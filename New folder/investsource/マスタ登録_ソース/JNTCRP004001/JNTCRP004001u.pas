//=============================================================================
//
//      システム名  ：Ｇａｌｉｌｅｏｐｔ
//      処理名      ：取引先登録　基本情報
//      制作・著作  ：（株）ミロク情報サービス
//      開発元      ：リード（株）Ｓプロジェクト
//
//      作成者      ：井上 佳美(LEAD)
//      作成日      ：2005.02.04(FRI)
//
//=============================================================================
//
//  修正履歴
//  <ﾏｰｸ>   <修正者>    <修正日>        <修正内容>
//  <100>   井上 佳美   2005/06/01(Wen) ﾌﾘｰ項目ﾀﾞｲｱﾛｸﾞ対応。
//  <101>   井上 佳美   2005/06/29(Wed) ｶｰﾄﾞ型画面に付箋追加。
//  <102>   井上 佳美   2005/07/11(Mon) ﾌﾘｰ項目ﾀﾞｲｱﾛｸﾞ最新版対応。（新規も登録可能に）
//  <103>   井上 佳美   2005/07/25(Mon) 販売のストアド関係を移植。
//  <104>   井上 佳美   2005/08/02(Thu) ﾗｲｾﾝｽの制御を追加。（販売のﾗｲｾﾝｽなしの場合は、請求・支払情報を非表示）
//  <105>   茂木 勇次   2005/08/11(Thu) 検索機能の実装。
//  <106>   高橋 功二   2005/08/12(Fri) JNTCommonを親から引き継ぐように修正。
//  <107>   高橋 功二   2005/08/24(Wed) TMJSAppRecordを親から引き継ぐように修正。
//  <108>   高橋 功二   2005/08/24(Wed) fnClearCardの第一引数が使用されていないので削除。
//  <109>   高橋 功二   2005/08/24(Wed) 不明な処理をｺﾒﾝﾄ。
//  <110>   高橋 功二   2005/08/24(Wed) 一覧で内容を修正、登録すると詳細の情報が消えてしまう不具合修正。
//  <111>   高橋 功二   2005/08/24(Wed) 加算情報消去機能の実装。
//  <112>   高橋 功二   2005/08/25(Thu) ﾃﾝﾌﾟﾚｰﾄ区分(TemplateKbn)の考慮。
//  <PRN>   茂木 勇次   2008/08/26(Fri) 印刷機能の追加。
//  <113>   高橋 功二   2005/08/30(Tue) <110>の不具合を再度検証、修正。
//                                      DB更新時(fnDataWrite)に一覧、詳細で処理を分ける。
//  <114>   高橋 功二   2005/09/19(Mon) 「並び替え」ﾎﾞﾀﾝを一時的に使用不可とする。
//  <115>   高橋 功二   2005/09/20(Tue) SELのInsert時にﾃﾝﾌﾟﾚｰﾄ情報を書き込む。
//  <116>   高橋 功二   2005/09/21(Wed) TRSEIKBNのｾｯﾄを修正。
//  <117>   茂木 勇次   2005/09/28(Wed) 初回諸口ﾀﾞｲｱﾛｸﾞｷｬﾝｾﾙ時に親ｺﾝﾎﾞにﾌｫｰｶｽを移動させ、自身Formは使用不可とする。
//  <118>   高橋 功二   2005/09/28(Wed) 名寄せ情報が登録されている取引先の削除を不可とする。
//  <119>   茂木 勇次   2005/09/28(Wed) 切出/埋込ﾎﾞﾀﾝを継承し、子側で処理を行う。
//  <120>   茂木 勇次   2005/09/29(Thu) ｸﾞﾘｯﾄﾞの付箋Bitmapを変更。TImageを追加。
//  <121>   高橋 功二   2005/09/29(Thu) 一覧から詳細へﾀﾌﾞを変更するときにState = dsInsertの場合は
//                                      Canselする。(詳細画面で内部ｺｰﾄﾞが0になってしまう為)
//  <122>   高橋 功二   2005/09/30(Fri) 合計取引先の場合はTRSEIKBN=0（通常取引先）とする。
//  <123>   飯塚 健介   2005/10/12(WED) ﾌﾘｰﾀﾞｲｱﾛｸﾞのCaption対応。
//  <   >   飯塚 健介   2005/10/19(WED) 連想12ﾊﾞｲﾄ→10ﾊﾞｲﾄに変更。
//  <124>   飯塚 健介   2005/10/19(WED) ｷｰｲﾍﾞﾝﾄ追加。
//  <125>   飯塚 健介   2005/10/19(WED) 同一ｺｰﾄﾞ入力時のﾒｯｾｰｼﾞを修正。
//  <126>   飯塚 健介   2005/10/19(WED) 正式名称を簡略名称にｺﾋﾟｰ。(14→20ﾊﾞｲﾄに変更)
//  <127>   飯塚 健介   2005/10/20(THU) 株ｶｯﾄ。
//  <128>   飯塚 健介   2005/10/20(THU) 担当者内部ｺｰﾄﾞをDBに書き込み。
//  <129>   飯塚 健介   2005/10/24(MON) ﾂﾘｰPopUp制御修正。
//  <130>   加藤(PRIME) 2005/10/26(WED) 終了確認機能追加。
//  <131>   加藤(PRIME) 2005/10/27(THU) 削除ﾒｯｾｰｼﾞ変更。
//  <WF>    加藤(PRIME) 2005/10/28(FRI) WF対応。
//  <132>   加藤(PRIME) 2005/10/31(MON) 業種をHPｱﾄﾞﾚｽの下に移動。
//  <133>   加藤(PRIME) 2005/11/01(TUE) 業種名がｸﾘｱされない不具合修正。
//  <134>   加藤(PRIME) 2005/11/01(TUE) 取消ﾎﾞﾀﾝ押下時に表示内容をｸﾘｱしない不具合修正。
//  <135>   加藤(PRIME) 2005/11/02(WED) 採用情報の得意先(仕入先)区分で1，2以外を入力すると化けた文字が表示される不具合修正。
//  <136>   加藤(PRIME) 2005/11/07(MON) 終了をｷｬﾝｾﾙされてもSelCorpSysを解放する不具合修正。
//  <137>   加藤(PRIME) 2005/11/07(MON) ComboBoxで端まで移動したらｺﾝﾄﾛｰﾙ移動する動作をやめる。
//  <138>   加藤(PRIME) 2005/11/07(MON) 実在/合計を切り替えたときにｸﾞﾘｯﾄﾞにﾌｫｰｶｽがあたるようにした。
//  <139>   加藤(PRIME) 2005/11/11(FRI) 連想を名称から初期表示する時、4桁しか取り込まないのを10桁に修正。
//  <140>   加藤(PRIME) 2005/11/25(FRI) 一覧で得意先・仕入先の採用状態を更新可能にする。 (Wｸﾘｯｸ・ｽﾍﾟｰｽｷｰで○)
//  <141>   加藤(PRIME) 2005/11/25(FRI) 随時請求で更新した取引先の締日情報を変更したときに請求実績ﾃﾞｰﾀが作成されない不具合修正。
//  <142>   加藤(PRIME) 2005/11/25(FRI) 実績がある状態で実績を作ろうとしてｴﾗｰになる対応。（仮）
//  <143>   加藤(PRIME) 2005/11/28(MON) 履歴ｽﾄｱﾄﾞ呼び出し。
//  <144>   加藤(PRIME) 2005/11/29(TUE) 諸口ﾀﾞｲｱﾛｸﾞOK押下後にﾌｫｰｶｽがなくなる不具合修正。
//  <145>   加藤(PRIME) 2005/12/09(FRI) 一覧で採用ありにした時にMTOKUI_SELが作られない不具合修正。
//  <146>   加藤(PRIME) 2005/12/13(TUE) ｾｸﾞﾒﾝﾄ検索Exp呼出の不具合修正。
//  <147>   加藤(PRIME) 2005/12/14(WED) WF取込時に販売担当者区分はﾁｪｯｸしない。
//  <148>   加藤(PRIME) 2005/12/21(WED) ﾌﾘｰﾀﾞｲｱﾛｸﾞの引数修正。
//  <149>   飯塚 健介   2006/01/12(THU) 実在取引先登録ﾘｽﾄ【簡略】追加。
//  <150>   飯塚 健介   2006/01/20(FRI) 前頁、次頁ﾎﾞﾀﾝ追加。
//  <151>   飯塚 健介   2006/01/20(FRI) ﾂﾘｰ変更時にPMTabを基本情報に戻さないように修正。
//  <152>   飯塚 健介   2006/01/20(FRI) 詳細画面で外部ｺｰﾄﾞ決定時に該当するﾂﾘｰにｶｰｿﾙを当てる。
//  <153>   飯塚 健介   2006/01/23(MON) ﾌﾘｰ項目DLGに渡す外部ｺｰﾄﾞの桁数対応※呼び元から修正出来ません。ﾌﾘｰダﾀﾞｲｱﾛｸﾞ側で桁数制御を行ってください。
//  <154>   飯塚 健介   2006/01/23(MON) 取引先ｺｰﾄﾞでの↑←Shift+Tabｷｰの制御を修正。
//                                      ←          : 何もしない
//                                      ↑          : 何もしない
//                                      Shift+Tab   : Root_PMTabへ移動
//  <155>   飯塚 健介   2006/01/23(MON) 取引先ｺｰﾄﾞ未入力時のExitｲﾍﾞﾝﾄを修正。
//  <156>   飯塚 健介   2006/01/24(TUE) ｾｸﾞﾒﾝﾄｺｰﾄﾞ0が入力出来ない不具合修正。
//  <157>   飯塚 健介   2006/01/24(TUE) 権限がない時の削除ﾎﾞﾀﾝを非表示から使用不可に修正。
//  <158>   飯塚 健介   2006/01/25(WED) 資産情報対応。
//  <159>   飯塚 健介   2006/01/27(FRI) 諸口ﾚｺｰﾄﾞ時、得意先採用/仕入先採用の変更を抑止する。
//  <160>   飯塚 健介   2006/01/31(TUE) 固定資産ﾗｲｾﾝｽﾁｪｯｸ追加。
//  <161>   茂木 勇次   2006/02/02(FRI) 未対応の帳票作成。
//  <162>   茂木 勇次   2006/02/02(FRI) 帳票でﾃﾝﾌﾟﾚｰﾄ区分、得意先,仕入先,採用なし区分対応。
//  <163>   茂木 勇次   2006/02/08(WED) 評価ﾚﾎﾟｰﾄ(SHM19-001)対応。
//  <164>   茂木 勇次   2006/02/08(WED) 評価ﾚﾎﾟｰﾄ(SHM18-004)対応。
//  <165>   茂木 勇次   2006/02/15(WED) 終了ﾒｯｾｰｼﾞの追加。
//                                      (ﾏｽﾀが新規登録されました。出力順序などの設定の見直しが必要と思われます。)
//  <166>   茂木 勇次   2006/02/17(FRI) 一覧画面で新規登録した時に付箋ｶﾗﾑにﾏｳｽﾎﾟｲﾝﾀをﾌｫｰｶｽするとｱﾄﾞﾚｽ違反が発生する不具合対応。
//  <167>   茂木 勇次   2006/02/17(FRI) 一覧画面で新規登録した時ﾃﾞｰﾀの外部ｺｰﾄﾞの属性・桁数対応。
//  <168>   茂木 勇次   2006/02/17(FRI) 削除ﾁｪｯｸ用ｽﾄｱﾄﾞﾌﾟﾛｼｼﾞｬの追加。
//  <169>   茂木 勇次   2006/02/20(MON) 採用情報ﾀﾌﾞの入力制御の不具合対応。
//  <170>   高橋 功二   2006/03/13(MON) 資産管理ﾗｲｾﾝｽの制御なし(MJS遠山様より修正依頼)
//  <171>   高橋 功二   2006/03/13(MON) 資産 購入先、売却先の採用ﾁｪｯｸのｸﾘｱ追加
//  <172>   茂木 勇次   2006/03/13(MON) 新規詳細画面から登録すると、得意先・仕入先採用区分が更新されない不具合対応。
//  <173>   高橋 功二   2006/03/14(TUE) 子得意先をReadした場合は締日情報を変更不可とする
//  <174>   高橋 功二   2006/03/14(TUE) 詳細画面でﾚｺｰﾄﾞを読み込んだ後に外部ｺｰﾄﾞへﾌｫｰｶｽ移動して違う外部ｺｰﾄﾞを入力した場合に
//                                      ﾃﾞｰﾀが読み込まれない不具合について修正
//                                      ※ TreeViewの移動時にReadが2回?呼ばれるのを防いでいるﾌﾗｸﾞ(gbTreeClick)による不具合
//  <175>   高橋 功二   2006/03/14(TUE) 代替得意先をReadした場合は締日情報を変更不可とする
//  <176>   高橋 功二   2006/03/16(THU) ｺｰﾄﾞで空白を入力したときの制御を修正(<155>を修正。会計の動作に合わせました。)
//  <177>   高橋 功二   2006/03/16(THU) 諸口ﾚｺｰﾄﾞ表示後に別のｺｰﾄﾞを入力すると採用区分がｸﾞﾚｰのままになっていた不具合を修正
//  <178>   高橋 功二   2006/03/16(THU) <177>の関係で次のﾌｨｰﾙﾄﾞ移動を強制的に行うように修正(OnExitｲﾍﾞﾝﾄでの記述なので強制的にSetFocusした)
//  <179>   高橋 功二   2006/03/16(THU) 削除ﾁｪｯｸの文言修正
//  <180>   高橋 功二   2006/03/17(Fri) 随時取引先で伝票が発生したときの締日情報制御を修正
//  <181>   高橋 功二   2006/03/17(Fri) 特殊取引先で伝票が発生したときの締日情報制御を修正
//  <182>   高橋 功二   2006/03/17(Fri) 特殊請求NOが残ってしまう不具合を修正
//  <183>   高橋 功二   2006/03/17(Fri) 特殊得意先で伝票が発生している場合は特殊請求NOを入力必須とする
//  <184>   高橋 功二   2006/03/21(Tue) 諸口ﾚｺｰﾄﾞを表示した後に詳細の資産採用がｸﾞﾚｰになってしまう不具合修正
//  <185>   高橋 功二   2006/03/21(Tue) ｷｰの移動を見直し※ <178>は削除しました。
//  <186>   高橋 功二   2006/03/21(Tue) ﾀﾌﾞｸﾘｯｸ時のﾌｫｰｶｽ制御
//                                      fnGetLastFLDのﾌｨｰﾙﾄﾞﾁｪｯｸに「Enabled」を追加
//  <187>   高橋 功二   2006/03/22(Wed) 外部ｺｰﾄﾞを一覧で数値10桁入力してPostするとｺｰﾄﾞが変わってしまう不具合を修正
//                                      ※ 受け側の変数がIntegerで定義されていた為、Extendedへ変更
//  <188>   飯塚 健介   2006/03/27(MON) ｾｸﾞﾒﾝﾄｺｰﾄﾞで実在以外のｺｰﾄﾞが選択・入力出来てしまう不具合を修正
//	<189>	長谷川耕平	2006/04/20(Thu)	締日関連のｴﾗｰﾁｪｯｸを強化。　第１締日より小さい日付が第２、第３で入力できていた。
//	<190>	長谷川耕平	2006/04/24(Mon)	実在／合計ﾀﾌﾞを切り替えた時の一覧表示を修正（販売評価ﾚﾎﾟｰﾄ【Gali0277】）
//	<191>	長谷川耕平	2006/04/25(Tue)	更新時に「fnDataRead」で締日回数をｸﾘｱしていた。　更新時に読み込んだ後、締日回数を求め直すように修正
//	<192>	長谷川耕平					販売評価ﾚﾎﾟｰﾄ【Gali0278】
//	<193>   久保(NTC)   2006/05/23(Tue)	販売評価ﾚﾎﾟｰﾄ【Gali0278】再 及び 【Gali0334】
//	<194>	長谷川耕平	2006/06/19(Mon)	申請書参照の仕様変更
//	<195>	荒井秀士	2006/06/26(Mon)	リース取引先区分追加
//	<196>	長谷川耕平	2006/07/24(Mon)	販売評価ﾚﾎﾟｰﾄ【Gali0377】
//	<197>	長谷川耕平					随時、特殊の時でﾃﾝﾌﾟﾚｰﾄの消費税請求区分が請求書単位の場合、伝票単位に変更する
//	<198>	長谷川耕平	2006/07/25(Tue)	申請書参照の仕様変更２
//	<199>	長谷川耕平	2006/08/04(Fri)	付箋配列をMemDataに変更。（大量データでエラーになるため）
//	<200>	新保一馬	2006/09/06(Wed)	フリーコードのとき、カード型とグリッドの両方で半角カナが登録できない不具合を修正。
//	<201>	丸山智史	2006/09/07(Thu)	追加or修正の権限がないとき、ﾌﾘｰ項目のﾀﾞｲｱﾛｸﾞを表示しようとするとエラーになる
//	<202>	長谷川耕平	2006/09/25(Mon)	「並び替え」機能を復活
//	<203>	新保一馬	2006/11/10(Fri)	採用区分の可否の切り替えにおいて、チェックを増やす。
//	<204>	新保一馬	2006/11/10(Fri)	資産ライセンスチェックを復活
//	<205>	新保一馬	2006/11/10(Fri)	リースのライセンスがないときは、一覧のカラムを非表示に。
//                                      また、資産のライセンスがないとき、リースのライセンスがないときは
//                                      詳細画面のチェックボックスは非表示ではなく、グレーにする。
//	<206>	新保一馬	2006/11/29(WED)	新規登録時、MTOKUI_DEPのTel2とFax1も基本からコピーする。
//	<207>	新保一馬	2006/11/29(WED)	住所関係コピー対応。
//	<208>	長谷川耕平	2006/12/20(WED)	一覧からの削除のスピードUP
//	<   >	長谷川耕平	2006/12/20(WED)	販売のテンプレート項目追加(拡張分類、コメント)
//  <209>   新保一馬	2006/12/20(WED)	得意先・仕入先区分はいつでも変更可能とする。(Gali0596)
//  <DOJI>  新保一馬    2007/01/30(TUE) データ交換同時実行対応。エラー表示。
//  <210>   新保一馬    2007/01/30(TUE) 表示のみの権限のとき、詳細型の画面において、[前へ][次へ]のボタンをクリックすると、フォーカスエラーになる。
//	<211>   藤塚正人    inert文にMemo1が２回書いてある為重複エラーになる。
//  <Vista> 新保一馬	2007.03.19(Mon) APのフォームのプロパティをClientHeightと、ClientWidthを調整しスクロールバーが出ないように設計。
//                                      スクロールボックスコンポーネント内のパネルの幅を調整します。
//                                      TreeViewの幅を225⇒180にし、詳細のグリッド部に横スクロールバーがでないようにした。
//  <212>   新保一馬	2007.04.14(Sat) 更新時に、関連するMTOKUI_xxxがなかったらインサートする。
//  <Rel>   新保一馬    2007/03/30(Fri) ﾏｽﾀ同期対応(ｸﾞﾙｰﾌﾟ会社管理対応)
//                                      <***>はどうしたら良いか案件。
//  <213>   新保一馬	2007.05.16(Wed) 日付ﾌﾘｰ項目をｸﾘｱしても残ってしまう。(Gali0703)
//  <214>   新保一馬    2007/05/16(Wed) 諸口にテンプレート情報をセットする際、単価ランク、単価掛率を設定する。(Gali0698)
//  <215>   新保一馬    2007/05/18(Fri) 削除時、「MP_BIL_DEL_MTOKUI」を実行する。(岩村さんから依頼。)
//  <216>   新保一馬    2007/06/06(Wed) 詳細画面の修正。
//                                      諸口はセグメント、分類の入力は不可にする。
//                                      更新時、分類の入力コンポーネントの使用可⇔不可の状態が正しく切り替わらなかったので修正。
//	<KSSN>	久保義和    2007/06/28(Thu) 決算更新区分の判定は権限に依存させる
//  <DOJI-2>新保一馬    2007/07/04(Wed) ロックエラーメッセージのあと、行の内容は変更前に戻し、先頭カラムにフォーカスを移す。
//	<217>	藤塚正人	2007/08/03(Fri)	ﾌﾘｰ項目設定ﾀﾞｲｱﾛｸﾞのｺｰﾄﾞが正しく表示されない。
//  <Rel-2> 新保一馬    2007/08/09(Thu) ﾏｽﾀ同期対応(ｸﾞﾙｰﾌﾟ会社管理対応)。全社⇔子社のDB切り替え漏れ。
//	<218>	新保一馬	2007/09/05(Wed)	オペレーションにより、_S作成の論理に流れない。
//	<219>	新保一馬	2007/09/18(Tue)	申請書からの表示時は、得意先区分を[1:通常得意先]を初期表示する。(仕入先区分も同様)
//	<220>	新保一馬	2007/09/21(Fri)	［申請書参照］ボタンを押下時、「編集中のデータを取り消します～」のメッセージが表示される。(Gali0924)
//                                      JHojyoMA_DMemDataGCode.Size 10 → 16 に拡張。
//	<221>	藤塚正人	2007.10.15(Mon)	ロール設定の修正権限をオフにした時、ツリーの右クリックから「加算しない」が有効になっていた点を修正。（Gali0968）
//	<222>	藤塚正人	2007.10.19(Fri) ロール設定の修正権限をオフにした時、グリッドの右クリックから付箋を貼ることが出来てしまう。（Gali0968）
//  <MHIS>  新保一馬    2008/01/09(Wed) ﾏｽﾀ更新履歴対応(参考:JNTCRP009001)
//                                      ・MTOKUI,MTOKUI_MAS,MTOKUI_SEL,MTOKUI_CRD,MTOKUI_PAY,MTOKUI_DEP の更新時、セッションストアドではさむ考慮を入れてあります。
//                                      ・念のためHOJYOTREE、HOJYOTREE2の更新でも同様の考慮を入れてあります。
//	<223>	新保一馬	2008.01.23(Wed) 実在に子がぶら下げられそうになったときは、総合計にぶら下げる。(保険)
//	<224>	新保一馬	2008.01.30(Wed) 「随時・特殊回収サイト」が‘31’までしか入力できない。※仕様では0～999まで入力可能です。(Gali1047)
//	<225>	新保一馬	2008.01.30(Wed) ［詳細］画面で「合計情報」にすると、「情報区分」の切り替えができなくなる。(Gali1045)
//	<226>	LEAD M.Yamashita 2008.02.18 ホウエイ対応
//	<227>	藤塚正人	2008.03.10(Mon)	①伝票入力後に「国内外区分」「通貨」が変更できてしまう。<Gali1063>
//										②国内外区分が「1.国内」のとき通貨区分に1が入り進まない
//										③「通貨」登録時に空白で進んでしまう。
//	<228>	新保一馬	2008.03.11(Tue)	(1)　得意先採用または仕入先採用のある取引先を選び、詳細画面で更新する。
//                                      (2)　得意先・仕入先採用のない取引先を選び、詳細画面で更新すると、履歴テーブルにMTOKUI、MTOKUI_MAS、MTOKUI_PAY、MTOKUI_CRDの履歴が作成される。
//                                           そのうち、MTOKUI_MAS、MTOKUI_PAY、MTOKUI_CRDの履歴が、なぜか(1)で選択した取引先の情報で作成される。
//                                      <207>の改良の影響でした。内部ｺｰﾄﾞ取得ロジックのミスです。
//	<229>	新保一馬	2008.03.11(Tue)	(1)取引先を選択しても内容が表示されないことがある。→ Enter ｷｰのｴﾐｭﾚｲﾄを行っているのに、CMChildKeyに流れなかった。直前でﾌｫｰｶｽをあてた。
//                                      (2)「基本情報」で取引先ｺｰﾄﾞが空の時に「情報区分」を変更しようとすると「編集中のデータを保存します～」のメッセージが表示される。また、このメッセージを［はい］で進むと、画面は「基本情報」のまま情報区分だけが変わっている。(Gali1045再)
//	<230>	新保一馬	2008.05.14(Wed) 適用期間を変更時(更新ボタン押下時のみチェック)は、伝票の存在チェックを行う。(Gali1217)
//	<231>	新保一馬	2008.05.15(Thu) 適用期間の自が入っていると、至を空にできない件を修正。
//	<232>	新保一馬	2008.05.15(Thu) ツリーの並び替えを行ってから取引先を新規に登録すると、更新でエラーになります。(Gali1268)
//	<RCNT>	新保一馬	2008.07.02(Wed) 件数表示対応(Gali1301)
//                                      親から渡されたコンポーネントを操作します。もともとのコンポーネント名は変更しました。LblRecCnt → LblRecCntChild
//	<233>	新保一馬	2008.07.07(Mon) 適用日付を年月日をきちんと入れないと先へ進めなかった点を修正しました。
//  <234>	新保一馬	2008.08.28(Thu) 名称に改行が入るのを防ぐ対応
//
//  ================== ↓Ver 3.00 リリース向け ===================================================
//
//  <235>   新保一馬	2008.11.18(Tue) 申請書情報取込処理の修正
//  <236>   新保一馬	2008.11.19(Wed) 得意先採用がOFF、仕入先採用がON → 得意先採用がON、仕入先採用がONにすると仕入先請求実績が再作成されてしまう。
//                                      仕入先採用を参照しなければいけない箇所で得意先採用を参照していた。
//  <237>   新保一馬	2008.11.21(Fri) 国内外区分=2:国外にするときに、得意先が採用されているときは2:国外にできなくさせる。
//                                      国内外区分=2:国外のときに、得意先の採用はONにできなくさせる。
//  <PST2>  新保一馬	2008.12.15(MON) 郵便番号-枝番を0000を入力&表示させる対応。ただし、郵便番号-基番が000以外のときのみ。
//  <1719>  倉持  剛	2009.06.05(Fri) 工事系伝票フォームの登録に対応。(Gali1719)
//
//  ================== ↓Ver 3.00 リリース向け ===================================================
//
//  <238>   T.SATOH(IDC)2009.07.06(MON) 債務情報テンプレート更新
//  <239>   T.Ogawa(RIT)2009.09.08(TUE) ３階層までの制限をなくし、無制限に登録できる対応
//  <240>   T.Ogawa(RIT)2009.09.11(TUE) 削除、加算しない、コピーを行ってもTreeView内では別の加算体系に該当コードが残るまたは反映されない不具合対応
//  <241>   T.Ogawa(RIT)2009.09.14(MON) 合計取引先のコピーは１階層までにする対応(管理表側でおかしくなるため)
//  <242>   T.Ogawa(RIT)2009.09.14(MON) DisplayControl手続きでは削除ボタンのEnabledプロパティは制御しないように修正
//=============================================================================
// =================== ↓Ver 3.04 サイバード様個別対応 ===========================================
//
//  <243>   黒田祐生    2009.09.24(Thu) 取引先登録にて仕入情報の振込情報とﾌﾘｰ項目を申請書参照した場合に取込みを行う。
//                                      申請書参照した場合でも取引先の正式名称にフォーカスがあるとき、ﾌﾘｰ項目情報をF1で呼び出す。内容は申請書から取り込んだ情報を表示する。
//  <244>   新保一馬    2009.10.15(Thu) 得意先変更申請、仕入先変更申請 対応
//  <244++> 新保一馬    2009.10.15(Thu) パッケージ版では、生かすロジックです。
//  <245>   新保一馬	2009.10.21(WED) 後で得意先採用(仕入先採用)をONにしたとき、販売情報の部門、担当者コードにテンプレートをセットしてほしい。(GBY-0063)(Gali1822)
//  <246>   新保一馬	2009.10.22(THU) カード型画面で、新規のとき得意先(仕入先)区分が変更できない。
//
// ===============================================================================================
//
// =================== ↓Ver 3.07 リリース向け ===================================================
//
//  <247>   黒田祐生    2009.12.07(Mon) 仕入先登録/変更申請書情報取込処理のパッケージ対応（項目の追加）
//
// =================== ↓Ver 3.08 リリース向け ===================================================
//
//  <248>   新保一馬    2010.02.16(Tue) Shift判定の関数を変更
//  <249>   新保一馬    2010.02.16(Tue) メモデータの操作時、DisableControls、EnableControlsではさんだ。
//
// =================== ↓Ver 4.00 リリース向け ===================================================
//
//  <252>   新保一馬    2010.04.06(Tue) カード型画面を表示時、実在なのに合計の項目が、合計なのに実在の項目が表示されてしまっていた。(RGY-0104)(Gali1948)
//  <WAN>   新保一馬    2010.05.11(Tue) WAN環境におけるBPLキャッシュ対応
//
// =================== ↓Ver 4.01 リリース向け ===================================================
//
//  <FREE>  新保一馬    2010.07.27(Tue) 連続削除を行うと50回ほどで「prepared statementsのリソース・ガバナーが制限を越えています」のエラー
//                                      ソース内でCreateしたクエリコンポーネントを破棄していなかったため、connection_propertyの
//                                      「Cursor」「CursorOpen」「PrepStmt」がどんどん増えていき、制限値50を超えるときにエラーになっていた。
//  <253>   新保一馬    2010.03.10(Wed) 得意先変更申請書、仕入先変更申請書を取り込んだとき、フリー項目設定ダイアログの変更箇所を赤字にする（Gali1934）
//  <254>   黒田祐生    2010.08.25(Wed) 仕入先変更申請書取込で更新エラーになる点の修正。
//  <255>   新保一馬    2010.09.03(Fri) カード型でコードが空のとき、削除時エラーになる点の修正。ツリーにないものを削除しようとしてエラーになる点の修正。
//	<MJUP>	新保一馬	2010.07.28(Wed)	名称文字数UP対応
//                                      f0NameがTMTxtEditのため文字数によって長体がかかる直前に均等割り(？)っぽくなって、全部が出ないので、TMLabelにした。
// =================== ↓Ver 4.03 リリース向け ===================================================
//  <256>   T.Ogawa(RIT)2010.11.19(FRI) 速度アップ対応
//  <257>   T.Ogawa(RIT)2010.11.29(MON) 分類・セグメント印刷で適用期間が出力されていない不具合対応
//  <258>   T.Ogawa(RIT)2010.12.03(FRI) 「0(ゼロ)諸口」が削除出来ない不具合対応
//
// =================== ↓Ver 4.04 リリース向け ===================================================
//  <259>   新保一馬    2010.01.18(Tue) フリガナ等、全角を認めないフィールドにペーストで全角を入力し、更新ボタンを押下したとき、フォーカスが戻るが、警告を出してほしい。
//                                      会計情報、販売情報などは警告が出る。(Gali2008)
//                                      フリガナ、連想、電話番号(1)、電話番号(2)、FAX番号 を対象としました。
//  <260>   新保一馬    2010.01.18(Tue) 得意先・仕入先登録申請書の連動項目追加
//
// =================== ↓Ver 4.06 リリース向け ===================================================
//  <261>   大田原(MSI) 2011.05.13(Fri) 印刷モジュールをUnLoadしていなかった点を修正
//  <SZERO> 新保一馬    2011.05.26(Thu) ・初回、セグメントの諸口が表示されない。
//										・0諸口が登録できない。
//                                      ・諸口をツリーをクリックして選んだとき、セグメントなどが入力可になっている。
//                                      ・fnCngCodePropertyの不具合。属性を取得する添え字が間違っていて、セグメント、得意先分類、仕入先分類のコンポーネントの属性が正しく設定されない。
//  <262>   佐藤(GSOL)  2011.06.09(THU) 取引先マスタ(債務)申請書対応
//
// =================== ↓Ver 4.07差分 データホライゾン様個別リリース向け =============================
//
//  <263>   佐藤(GSOL)  2011.10.20(THU) 取引先マスタ(支払情報)申請書追加対応
//  <Gali2235> 新保一馬    2011.11.04(Fri) 登録申請の上書き対応(GL33)(Gali2235)
//
// =================== ↓Ver 4.08(NX-I 5.01) リリース向け ===================================================
//  <KSN>   小川(LEAD)  2011.12.15(THU) 速度改良に伴う加算体系タブの新規対応。
//                                      その他、コンパイル時の‘ヒント’‘警告’を減らすための対応。
//                                      セグメントの外部コード取得時に削除レコードが考慮されていない対応。
//  <>      小川(LEAD)  2011.12.20(TUE) 加算体系登録リストの加算元・先の名称が切れて表示される不具合対応 (MemDataのサイズを修正)
//  <264>   小川(LEAD)  2011.12.28(WED) 基本情報側ではフォームをクローズしないようにする。
//  <265>   小川(LEAD)  2012.02.10(FRI) 詳細画面のデータ取得にてテンプレートデータは読まないようにする対応。
//  <Gali2258>新保一馬  2011.12.16(Fri) 起動時エラーの回避(Gali2258)
//  <Gali2258-2>新保一馬2011.12.28(Wed) ストアド「MP200010」の実行時エラーメッセージを変更。ソースレビュー指摘分(Gali2258)
//  <265-2> 新保一馬    2011.12.28(Wed) <265>の修正により、詳細画面で新規のとき、[採用情報]タブの「得意先採用」のチェックボックスがグレーになる。
//                                      MTOKUI_DMQuery.RecordCount > 0 の判定を付加した部分は元に戻した。
//  <Gali2285>新保一馬  2012.02.14(Tue) <104>の修正をやめた。随時、特殊NOのパーツが、販売管理が入っていないと出さないようにしているが、この考慮をやめる。(Gali2285)
//
//	<2284>	 吉田健吾	2012.02.14(Tue	取引先登録にて基本情報から印刷（実在取引先登録リスト「詳細」）にてファイル
//									    出力すると入金予定日情報・支払締日情報が出力されない。修正に伴い詳細型の印刷レイアウトに項目を追加する。
//										デザイナ上のMemPtnJitsuzaiのカラムにFkana,Keisyokbn,GyoGcode,GyoNMKを追加しました。
//
//  <266>   小川(LEAD)  2012.02.16(THU) 加算体系登録にて2階層より上の合計取引先が登録出来てしまい無限ループしてしまう不具合対応
//	<2257FC> 吉田健吾	2012.02.23(THU) 新規ｺｰﾄﾞ入力後にｺｰﾄﾞにフォーカスを戻すとフリー項目登録のﾌｧﾝｸｼｮﾝが表示されてしまう。
//	<2226-1> 吉田健吾	2012.03.01(THU) コピー元の内容が間違っていた。詳細型の時は画面に入力されている内容をコピーするべきなのに、必ず更新前のMTOKUIからコピーしていた。
//										詳細型の時は画面に入力されている内容、一覧の時はMTOKUIからコピーするように修正。
//	<2303>	 吉田健吾	2012.03.08(THU) 得意先・仕入先の締日情報を入力済みの取引先を一覧で得意先・仕入先の採用をOFFにし、
//										詳細でその取引先の得意先・仕入先の締日情報を入力後に更新ボタンを押下するとエラーメッセージが表示される。
//	<2257-5> 吉田健吾	2012.03.12(MON) コピー元を選択・表示後に正式名称からフォーカスを移動すると削除ボタンが押せてしまう、押すとエラーメッセージが表示される。
//	<2257-6> 吉田健吾	2012.03.12(MON) 付箋が張ってある取引先をコピーした時にｺｰﾄﾞ欄周辺で右クリックすると、コピー元の付箋をはがす事ができてしまう。
//	<2257-7> 吉田健吾	2012.03.13(TUE) 詳細型での入力コンポーネントに割り当てられているExitイベント入れているﾌｧﾝｸｼｮﾝを設定する関数が流れるたびにSQLを流していたため、
//										クエリから必要な情報を取るように修正しました。
//
// =================== ↓Ver5.01 Ver4.05差分 アディスミューズ対応 ========================================
//			 吉田健吾	2012.02.13(Mon) 下記のVer4.05差分 アディスミューズ対応全てを最新に反映
//	<2226>	 吉田健吾	2011.12.01(Thu) <207>で販売情報・資産情報の採用が無い時は住所コピーがされていなかったので
//										採用なしの状態から採用ありになった場合は住所コピーがされるようにしました。
//
//	<2257>	 吉田健吾	2011.12.09(Fri) 新規コードを入力後のF8に取引先コピーの機能追加
//										ﾌｧﾝｸｼｮﾝﾊﾞｰの制御に伴い、合計取引先でもF1フリー項目登録を表示するようにしました。又、不要な時は表示しないように修正しました。
//										デザイナ上にCopyMtokuiProcを追加しました。
//										デザイナ上のaclExecのアクションリストにCopyMtokuiを追加しました。
//
//	<2257-1> 吉田健吾	2011.12.14(Wed) 外部コードが０の取引先は諸口以外使えなくする
//
//	<2257-2> 吉田健吾	2011.12.19(Mon) 合計情報の時にツリーで実在取引先を選択した時に選択した取引先が表示されない
//
//	<2257-3> 吉田健吾	2011.12.27(Tue) 属性フリーで取引先ｺｰﾄﾞを消した後に他のコンポーネントにマウスで移動した場合に
//										表示されているデータがクリアされない。→<265>で修正済みでした。
//
//	<2257-4> 吉田健吾	2011.01.06(Fri) カード型で新規の外部ｺｰﾄﾞを入力した後に取引先ｺｰﾄﾞ付近で右クリックをした場合、
//										付箋を貼れない仕様だが貼れてしまう。
//
// =================== ↓Ver 5.02 リリース向け ===================================================
//  <502_001>   小川(LEAD) 2012.04.04(WED) データ取得時に採用区分の変更可・不可の制御は行わずにフラグON⇒OFF時にチェックする対応。
//  <502_001@>  小川(LEAD) 2012.04.10(TUE) ソースレビュー指摘分の修正。
//  <502_002>   小川(LEAD) 2012.04.11(WED) 詳細画面で取引先コードを手入力で入力してEnterキーを押下しても前の取引先の情報が残ってしまう不具合対応
//  <502_003>   小川(LEAD) 2012.04.12(THU) <183>の対応漏れで、仕入先でも伝票が発生している場合は特殊請求NOを入力必須とする
//  <Authority> 小川(LEAD) 2012.06.22(Fri) サブモジュールの権限管理対応
//  <502_004>   小川(LEAD) 2012.06.27(WED) TreeViewの限界となる判断が誤っていたため修正
//  <502_005>   小川(LEAD) 2012.08.20(MON) <502_001>の影響で、採用情報フラグの制御が正しくない不具合対応。
//                                         採用情報を修正途中で更新せずにTreeViewクリックで別取引先に切り替えた時のセット情報がおかしい不具合対応
//                                         随時請求回収(支払)サイトもチェック対象に含める
//  <KSN2>  小川(LEAD)   2012/08/22(WED) 挿入⇒登録を繰り返した場合、並び順が変わってしまう不具合対応
//                                       挿入⇒登録を繰り返した場合、登録したものが反映されない場合がある不具合対応
//  <KSN3>  小川(LEAD)   2012/08/23(THU) 加算体系登録グリッドで数字属性の時、文字の入力が出来てしまう不具合対応
//
// =================== ↓Ver 5.03 リリース向け ===================================================
//  <503_001>   小川(LEAD) 2012.11.26(MON) <502_001>の影響で、一覧からの更新時に例外が発生する場合がある不具合対応
//
// =================== ↓Ver 5.05 リリース向け ===================================================
//  <KSN4>   小川(LEAD) 2013.09.12(THU) 加算体系更新方法変更対応。
//                                      合わせて既に登録済みの行を空行にしたとき、削除ボタンが押せてしまい、例外が発生する不具合対応。

//  <KSN_PRN>   吉澤(MJS) 2013.09.20(FRI) 加算体系登録リストで範囲指定を行っても全件出力された件を修正
//                                        JNTCRP004001CONST.incも修正
//  <505_001>   吉澤(MJS) 2013.11.22(FRI) MTOKUI_CRDのEDI・手数料負担区分はINSERTしないように修正
//
// ================== ↓Ver 4.13(NX-I 5.07) リリース向け ===================================================
//
//	<CD16>		柄松克弥	2014/1/17(Fri)	取引先コード16桁対応
//                                     		DdxDBGridGCodeの長体（StretchChar）をTrueに変更。
//											MemPtnSegBunのStrExCodeDstのDisplayWidth及びSizeを10→16に変更。
//											MemPtnGoukeiのStrExCodeのDisplayWidth及びSizeを10→16に変更。
//											MemPtnKasanのStrExCodeDst,StrExCodeSrcのDisplayWidth及びSizeを10→16に変更。
//	<Gali2419>	柄松克弥	2014.04.22(Tue)	修正権限のないログイン担当者だと詳細型で取引先コードを押下してもF1フリー項目登録が表示されない不具合対応
//	<Gali2422>	柄松克弥	2014.04.24(Thu) フリーコードのとき、申請書取込すると半角カナのコードが登録できない不具合を修正。
//	<CD16_2>	柄松克弥	2014/06/11(Wed)	外部ｺｰﾄﾞが0で16桁の時、フリーコードの場合はそれを登録出来るようにするよう修正。
//											※諸口以外がｺｰﾄﾞ変更によりオールゼロにすることが出来ないので、後日対応
//	<MDEL>		柄松克弥	2014/07/03(Thu)	開発環境の更新に伴い、MHokanFromDateの廃止。
//	<Gali2446>	柄松克弥	2014.10.21(Tue) 基本情報で、仕入先の分類１～５のどれか１つ以上を設定し、セグメントは一切設定しない場合、
//											印刷でパターンを「実在取引先登録リスト[分類、セグメント型]」と指定した時に印刷対象とならない不具合を修正。
//	<ZCF-0016> 	小川(NTC)   2015.01.16(Fri) 印刷、CSV出力の簡略名称で15バイト以降が正確に表示されない不具合修正。MemPtnGoukeistrNameSimple.Size=14→20に修正。
//	<267> 		小川(NTC)   2015.03.02(Mon) コピー後ﾌﾘｰ項目登録がOK以外で更新されない不具合修正。
//	<CD16_3>	柄松克弥	2015.03.06(Fri)	・取引先16桁の時に、数値・前ゼロあり状態では桁幅が広がらないのを修正。
//											・取引先正式名表示欄の幅が見切れないように修正。
//	<MYN>		小川(NTC)	2015.06.17(Wed)	マイナンバー対応。基本情報タブに「法人･個人区分」「法人･個人番号」追加。
//											・RequiresにMYNAccess追加。
//											・タブ順序変更。
//											また、印刷・ファイル出力の基本情報に「法人･個人区分」「法人･個人番号」追加。
//											・MemPtnJitsuzaiのカラムにMYNHoujinKojinKbnNm,MYNHoujinKojinNoを追加。
//	<MYN2>		小川(NTC)	2015.08.10(Mon) ・取引先コードから抜ける場合、Enterキーのみ可で入力不可のコンポーネントにマウス移動させない。
//											・MYNInsertに外部コード、住所、郵便番号を追加する。
//	<MYN3> 		小川(NTC)	2015.08.17(Mon) マイナンバー管理なし(-9)の場合、エラーとしない。
//	<MYN4> 		小川(NTC)	2015.08.24(Mon) 法人検索EXPに正式名称追加。
//	<MYN5>		小川(NTC)	2015.09.02(Wed) ・個人キーあり/個人番号なしの場合、キーをはFirstKeyのまま更新する。
//											・MYNInsertは個人番号変更済み新規の場合、個人キー・個人番号以外も更新する。
//	<MYN6>		小川(NTC)	2015.09.04(Fri) 登録ボタン制御修正。
//  <KSN5>      小川(LEAD)  2015/09/07(MON) <KSN4>の影響でHojyoTree2の更新が行われていなかった不具合対応。
//	<MYN7>		小川(NTC)	2015.09.08(Tue) ツリーから選択した場合、登録済みの個人番号が空白になる不具合修正。
//  <KSN6>      小川(LEAD)  2015/09/08(Tue) 加算体系タブ選択時に終了した場合は、編集中フラグをOFFにする対応。
//	<MYN8>		小川(NTC)	2015.09.14(Mon) 個人番号管理なしの場合、個人キーありだとMYNInsertで更新エラーになるのでスキップする。
//	<MYN9>		小川(NTC)	2015.10.19(Mon) F8 取引先コピーで個人番号キーはコピーされないよう修正。
//	<MYN10>		小川(NTC)	2015.10.28(Wed) 新規登録で更新ボタンを押下し、フォーカスが取引先コードに戻った後、情報区分のコンボが開かない不具合修正。
//	<MYN10-2>   小川(NTC)	2015.11.13(Fri) <MYN10>の追加修正。取引先コードが空白の場合、情報区分のコンボが開かない不具合修正。
//	<MYN10-3>   小川(NTC)	2015.11.16(Mon) <MYN10-2>の追加修正。「基本情報」タブ、ツリーからフォーカスが抜ける場合、個人番号をマスクする。
//	<MYN11>   	小川(NTC)	2015.11.16(Mon) 法人･個人区分が個人の場合、登録ボタン・マスク表示ボタンの権限による非表示を入力不可にする。
//											また、権限なしで個人番号ありの場合は空欄でなく*表示する。
//	<MYN12>   	小川(NTC)	2015.11.18(Wed) マイナンバー初期処理失敗 かつ マイナンバー管理なし以外 かつ 担当者マイナンバーアクセス権限（AccTypeDB）が参照不可以外 の場合、
//											処理失敗継続メッセージを表示する。
//	<MYN13>   	小川(NTC)	2015.11.18(Wed) 法人･個人番号が入力済で法人･個人区分を変更した場合、一度切り替えメッセージで「はい」を選択した場合でも再びメッセージが出る点を修正。
//											また、法人番号入力済でメッセージ「はい」の後再び法人に戻る場合、保持している法人番号が表示されなかった点を修正。
//	<MYN14>   	小川(NTC)	2015.11.25(Wed) マイナンバーBPO対応。
//                                          RequiresのMYNAccess.dcp→MYNAccess3.dcpに修正。
//	<MYN15>   	小川(NTC)	2015.11.30(Mon) ・法人･個人番号が登録された状態で、諸口を選択した後に法人･個人番号が登録済の取引先を選択すると法人･個人番号が消える不具合修正。
//											・法人番号が12桁でも更新が出来てしまう不具合修正。
//											・法人番号として不適切な番号を入力した場合、メッセージを表示する。
//											　メッセージを表示するためJituzaiEditExitからfnFldChkにチェックを移動する。移動しないとタブ切替でメッセージが2度表示されてしまう。
//	<MYN16>   	小川(NTC)	2016.01.13(Wed) 個人番号ダイアログ3を使用する様に修正。
//	<MYN17>     小川(NTC)	2016.01.28(Thu) 個人キーの重複チェック追加。
//	<FREEINIT>	柄松克弥	2016.02.18(Thu)	複数画面起動時にフリー項目ﾀﾞｲｱﾛｸﾞの起動制御が正しく行われていない不具合対応。
//
//	<2610>		志水(LEAD)	2016.10.25(Tue) WF変更申請書取込の動作を修正。
//	<2615>      志水(LEAD)	2016.10.25(Tue) 削除時のメッセージダイアログ用に行われているコード編集を修正。
//	<2610-2>	志水(LEAD)	2017.02.08(Wed) WF変更申請書のフラグ制御に修正を追加。(旧GLでの不具合に対応)
// =================== 2017年06月リリース向け ==================================
//	<MYN18>     小川(NTC)	2017.03.28(Tue) ・統合版クラスへの変更。 RequiresのMYNAccess3.dcp→MYNAccessIf.dcpに変更。
//											　MYNAccessIfからは個人番号ダイアログMYNInpDLGIfを呼んでいるので3→Ifに変更。
//	<MYN19> 	小川(NTC)	2017.03.28(Tue)	・個人番号ダイアログのMLXとGali統合対応。
//											　（JNT系PGの仕様でTMjsAppRecord.rcSYSTEMAREAがTJNTMASComなためにGaliで個人番号ダイアログを起動したとき、MjsColorChangeが正しく動作しない。
//											　グリッドの色がおかしくなる。個人番号ダイアログの仕様前後でrcSYSTEMAREAを切り替える対応を行った。）※JNTCRP008002u.pas<DIC_BANK_2>参考。
//	<MYN20> 	小川(NTC)	2017.03.28(Tue) ・個人番号ダイアログにパラメータ（郵便番号、住所）追加。郵便番号関数作成。
//											・MYNInsertは個人番号ダイアログでOKが押された時のみ氏名・住所等（個人キー・個人番号以外）をセットするように修正。
//											・「MJSマイナンバー」に文言を合わせる。
//											・マスクボタンの文言変更。(dfmのみ)Image_Mask、Image_MaskGray.Hint=「個人番号表示設定」→「個人番号表示」に変更。
//
//	<2668>		柄松克弥	2017.11.15(Wed) 取引先コピーを行って適用期間を設定したときに、既に伝票入力済み扱いとなって更新できない。
//											コピーを含む新規入力時は適用期間期間チェックを行わないように対応。(保険科学不具合対応マージ）
//
//	<Edge>		柄松克弥	2018.10.03(Wed)	Edge Tracker 連携対応 削除メッセージ追加
//	<KaiGG>		中村達也	2018.12.20(Thu)	詳細チェックリストの印刷・ファイル出力で、更新日付の元号が適用期間・至の元号を出力していた点を修正。
//	<KaiGG2>	中村達也	2018.12.20(Thu)	会社基本情報で和暦設定だった場合、適用期間が「K 1/05/01～H31/04/30」で更新できていた点を修正。
//  <KAIGG3>    本間(LEAD)  2019.01.28(Mon) 存在しない日付が入力された場合、元号に合わせて変換できるよう修正。（ex:H31/05/01→K 1/05/01）
//  <KAIGG3-1>  本間(LEAD)  2019.01.29(Tue) レビュー指摘事項の修正(JituzaiEditCheckのロジック自体通っていないため、元号変換のロジックを削除。)
//  <KAIGG4>    本間(LEAD)  2019.02.01(Fri) 日付入力の変換ロジックにTMDateEdit以外でも通ってしまうのを修正。
//  <KAIGG5>    柄松克弥	2019.03.13(Wed) 適用期間（自）のチェックロジックで新元号をまたいだ大小チェックをすると正しく判定されないのを修正。
//	<2750>		柄松克弥	2019.06.18(Tue)	・適用期間でうるう年のチェックが正しく行われていなかったのを修正。（一旦ASDATETIME型で取得する）
//                                          ・適用期間の入力初期値が「H」始まりになってしまうのを修正。
//	<D10>		鈴木基男	2019.09.13(Fri)	Delphi10対応
//	<3135>		衣川  貴	2022.01.06(Thu)	新規登録後にシステム別情報レコードの存在チェックを追加
//================================================================================================


unit JNTCRP004001u;

interface
  {$I JNTMasCommonFuncH.inc}

uses
  Windows, Messages, SysUtils, Classes, VCL.Graphics, VCL.Controls, VCL.Forms, VCL.Dialogs,
  ComCtrls, MJSStatusBar, MJSTab, VCL.ExtCtrls, MJSPanel, VCL.StdCtrls, MJSEdits,
  MJSLabel, dxCntner, dxTL, dxDBGrid, Buttons, MJSSpeedButton, MJSComboBox,
  JNTMasComu, MjsDBModuleu, Db, FireDAC.Comp.Client, MJSBitBtn, MJSQuery, MjsDispCtrl,
  dxmdaset, dxGrClms, VCL.ImgList, MJSCommonu, CMNExpFuncU, MjsStrCtrl, MjsDateCtrl,
  Menus, {JNTCRP004001PrnDlgu,<PRN>} MjsPrnDlgU ,{MjsPrnSupportU,<PRN>} ppCache, ppDB,
  ppDBPipe, {<D10>ppDBBDE,} ppComm, ppRelatv, ppProd, ppClass, ppReport, ppBands,
  ppCtrls, ppVar, ppPrnabl, JNTMasWndIFu, MJSCheckBox,
  JNTCRP004001SyokuchiDlgu, {MjsPreviewIFu,<PRN>} MJSMsgStdu, dxExEdtr, JNTMasTreee2Dlgu,
  JNTCommonU,JNTSelCorpSys,
  JNTSelGlobal,MJSPostCtrl
  ,JNTAuthorityu,// <Authority> ADD
// <MYN> ins -s
// <MYN14> upd -s
{
  MYNAccessU,
  MJSMyNumApIfU,	// 個人情報クラス（TMJSMyNumPersonInfoClass）を使用するため必要
}
// <MYN18> upd -s
//  MYNAccess3U,
  MYNAccessIfU,
// <MYN18> upd -e
  MJSMyNumApIf20U,	// 個人情報クラス（TMJSMyNumPersonInfoClass）を使用するため必要
//<MYN18>  MJSMyNumBpoApIfU,	// BPO用
// <MYN14> upd -e
  Contnrs,       	// TObjectListを使用するため必要
// <MYN> ins -e

  ActnList, MJSTreeView, ToolWin, MJSToolBar, MJSMemo,
  MJSFunctionBar, MJSSPFunctionBar,
//↓<Gali2235>
  JNTCRP004001SameListParau, JNTCRP004001SameListu,
  JNTCRP004001NotSameu,
//↑<Gali2235>

  Commctrl,  Math,  MjsExceptU,
  MJSDBNavigator,
  JNTFuncU,
  FXLicense,

  JNTExpGlobal, JNTPDlg, // <PRN>
  JNTCRP004001MsgDLGu, //<KSN> ADD
  JNTCRP004001SetUpDLGu, //<KSN> ADD
  JNTCRP004001APGu, //<KSN> ADD
  MetaSpt,  //<KSN> ADD
  MLBplLoaderU, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, System.Actions, FireDAC.Comp.DataSet,
  System.ImageList; //<WAN>

type
  {$include TableMasterH.inc} //<KSN> ADD
// <MYN16> upd -s
//  {$I MYNInpDlgIFH.inc}			// <MYN>
// <MYN18> upd -s
//  {$I MYNInpDlgIF3H.inc}
  {$I MYNInpDlgIFIfH.inc}
// <MYN18> upd -e
// <MYN16> upd -e
  {$I MJSCorpNumExpIFH.inc}		// <MYN>

//↓<207>
    TAddressRec = record
        PostNo1         : Integer;
        PostNo2         : Integer;
        Ads1            : string;
        Ads2            : string;
        Tel1            : string;
        Tel2            : string;
        Fax1            : string;
    end;
//↑<207>
//↓<2226>
	TSisanSaiyoRec = record
		SisanHojyoKbn1	: integer;
		SisanHojyoKbn2	: integer;
		SisanHojyoKbn3	: integer;
	end;
//↑<2226>
	{TreeView.Data定義}
	TreeViewRec  = record
		nDivision	    : Integer;
		strExCode	    : string;
		strName  	    : string;
		iNCode		    : Extended;
		iSyokuti        : Integer;
        bComp           : Boolean;  //<KSN> ADD
	end;

	FusenCmntRec = record
		Code		    : String;						    // ｺｰﾄﾞ
		Cmnt		    : String;							// 付箋ｺﾒﾝﾄ
	end;

    // ﾌｧﾝｸｼｮﾝ制御用<100>
    urFncInfo = record
        Caption         : array[0..7] of String;
        Action          : array[0..7] of TAction;
    end;

	SearchInfoRec = Record
		sKojCD	        : String;			                // 検索科目
		iItem	        : Integer;		                    // 検索するItemの位置
		bFstFlg	        : Boolean;		                    // 初回判定ﾌﾗｸﾞ
	end;

	AdoptInfo = Record
        nMasterDivision : Integer;							// ﾏｽﾀ区分
		nAdoption	    : Integer;							// 採用区分
		nCodeDigit	    : Integer;							// ｺｰﾄﾞ桁数
		nCodeAttribute  : Integer;							// ｺｰﾄﾞ属性
		strDescription  : String;							// 名称
    end;

    // 得意先変更前状態 <103>
    TuvData_Load = record
        pvrSime1,                                           // 締日1
        pvrSime2,                                           // 締日2
        pvrSime3        : Integer;                          // 締日3
        pvrCycle1,                                          // ｻｲｸﾙ1
        pvrCycle2,                                          // ｻｲｸﾙ2
        pvrCycle3       : Integer;                          // ｻｲｸﾙ3
        pvrKaisyu1,                                         // 回収日1
        pvrKaisyu2,                                         // 回収日2
        pvrKaisyu3      : Integer;                          // 回収日3
        pvrZuiSite      : Integer;                          // 随時回収ｻｲﾄ
        pvrTokuSeiNo	: Integer;                          // 特殊請求No
        pvrSeiKbn       : Integer;                          // 請求区分
        pvrDenHas		: Boolean;                          // 伝票発生(T:発生、F:未発生)
        pvrSHas			: Boolean;                          // _S  発生(T:発生、F:未発生)
        pvrSai          : Integer;                          // 得意先採用(T:採用、F:未採用)
    end;

    // 仕入先変更前状態 <103>
    TuvData_Load_S = record
    	pvrSeiCD        : String;                           // 請求先ｺｰﾄﾞ
        pvrUsKinKbn     : Integer;                          // 入出金区分
        pvrSime1,                                           // 締日1
        pvrSime2,                                           // 締日2
        pvrSime3        : Integer;                          // 締日3
        pvrCycle1,                                          // ｻｲｸﾙ1
        pvrCycle2,                                          // ｻｲｸﾙ2
        pvrCycle3       : Integer;                          // ｻｲｸﾙ3
        pvrKaisyu1,                                         // 回収日1
        pvrKaisyu2,                                         // 回収日2
        pvrKaisyu3      : Integer;                          // 回収日3
        pvrZuiSite      : Integer;                          // 随時回収ｻｲﾄ
        pvrTokuSeiNo	: Integer;                          // 特殊請求No
        pvrSeiKbn       : Integer;                          // 請求区分
        pvrDenHas		: Boolean;                          // 伝票発生(T:発生、F:未発生)
        pvrSHas			: Boolean;                          // _S  発生(T:発生、F:未発生)
        pvrSai          : Integer;                          // 仕入先採用(T:採用、F:未採用)
    end;

    // 申請書情報から取り込む別ﾓｼﾞｭｰﾙの情報<WF>
    TWFOtherInfo = record
        CanInsert       : Boolean;                          // 登録可否
//↓<244>
        CanUpdate       : Boolean;                          // 更新可否
        SyncKbn         : Integer;							// 申請書式連動区分
//↑<244>
        TrihikiKbn      : Integer;                          // 取引区分
        TrihikiKbnFlg   : Boolean;                          // 取引区分ｾｯﾄ有無
        TnNCode         : Extended;                         // 担当者ｺｰﾄﾞ
        TnNCodeFlg      : Boolean;                          // 担当者ｺｰﾄﾞｾｯﾄ有無
        BmNCode         : Extended;                         // 部門
        BmNCodeFlg      : Boolean;                          // 部門ｺｰﾄﾞｾｯﾄ有無
        YsGKin          : Extended;                         // 与信限度額
        YsGKinFlg       : Boolean;                          // 与信限度額ｾｯﾄ有無
// <243>↓
        { // <247>↓整理
        AccNCode        : Int64;                            // 振込依頼口座内部コード
        AccNCodeFlg     : Boolean;                          // セットフラグ True:セットあり False:セットなし
        BkBraNCode      : Int64;                            // 振込先支店内部コード
        BkBraNCodeFlg   : Boolean;                          // セットフラグ True:セットあり False:セットなし
        UketoriName     : String;                           // 受取人名
        UketoriNameFlg  : Boolean;                          // セットフラグ True:セットあり False:セットなし
        TransKanaName   : String;                           // カナ振込先名称
        TransKanaNameFlg: Boolean;                          // セットフラグ True:セットあり False:セットなし
        Acckbn          : Integer;                          // 預金種目
        AcckbnFlg       : Boolean;                          // セットフラグ True:セットあり False:セットなし
        AccNo           : String;                           // 口座番号
        AccNoFlg        : Boolean;                          // セットフラグ True:セットあり False:セットなし
        ChargeFutan     : Integer;                          // 手数料負担
        ChargeFutanFlg  : Boolean;                          // セットフラグ True:セットあり False:セットなし
        ChargeKbn       : Integer;                          // 手数料計算区分
        ChargeKbnFlg    : Boolean;                          // セットフラグ True:セットあり False:セットなし
        TransKbn        : Integer;                          // 振込方法
        TransKbnFlg     : Boolean;                          // セットフラグ True:セットあり False:セットなし
        FBSet           : Integer;                          // FBセット項目
        FBSetFlg        : Boolean;                          // セットフラグ True:セットあり False:セットなし
        AccAutoKbn      : Integer;                          // 口座自動引落区分
        AccAutoKbnFlg   : Boolean;                          // セットフラグ True:セットあり False:セットなし
        AccAutoData     : Integer;                          // 自動引落支払データ
        AccAutoDataFlg  : Boolean;                          // セットフラグ True:セットあり False:セットなし
        } // <247>↑
        // <247>↓
        AccNCode        : Int64;                            // 振込依頼口座内部コード
        AccNCodeFlg     : Boolean;                          // セットフラグ True:セットあり False:セットなし
        BkBraNCode      : Int64;                            // 振込先支店内部コード
        BkBraNCodeFlg   : Boolean;                          // セットフラグ True:セットあり False:セットなし
        Acckbn          : Integer;                          // 預金種目
        AcckbnFlg       : Boolean;                          // セットフラグ True:セットあり False:セットなし
        AccNo           : String;                           // 口座番号
        AccNoFlg        : Boolean;                          // セットフラグ True:セットあり False:セットなし
        UketoriName     : String;                           // 受取人名
        UketoriNameFlg  : Boolean;                          // セットフラグ True:セットあり False:セットなし
        TransKanaName   : String;                           // カナ振込先名称
        TransKanaNameFlg: Boolean;                          // セットフラグ True:セットあり False:セットなし
        ChargeFutan     : Integer;                          // 手数料負担
        ChargeFutanFlg  : Boolean;                          // セットフラグ True:セットあり False:セットなし
        ChargeKbn       : Integer;                          // 手数料計算区分
        ChargeKbnFlg    : Boolean;                          // セットフラグ True:セットあり False:セットなし
        TransKbn        : Integer;                          // 振込方法
        TransKbnFlg     : Boolean;                          // セットフラグ True:セットあり False:セットなし
        // <247> ↑
// <263> ADD-STR
        EdiInfo                 : String;       // ＥＤＩ情報
        EdiInfoFlg              : Boolean;      // セットフラグ True:セットあり、False:セットなし
        AiteNo1                 : String;       // 顧客コード１
        AiteNo1Flg              : Boolean;      // セットフラグ True:セットあり、False:セットなし
        AiteNo2                 : String;       // 顧客コード２
        AiteNo2Flg              : Boolean;      // セットフラグ True:セットあり、False:セットなし
        FBSet                   : Integer;      // FBセット項目
        FBSetFlg                : Boolean;      // セットフラグ True:セットあり、False:セットなし
        AccAutoKbn              : Integer;      // 口座自動引落区分
        AccAutoKbnFlg           : Boolean;      // セットフラグ True:セットあり、False:セットなし
        AccAutoData             : Integer;      // 自動引落支払データ
        AccAutoDataFlg          : Boolean;      // セットフラグ True:セットあり、False:セットなし
// <263> ADD-END
// <262> ADD-STR
        MailAddress_MTP : String;                           // 担当者メールアドレス
        MailAddress_MTPFlg : Boolean;                       // セットフラグ True:セットあり、False:セットなし

        GensenUseKbn    : Integer;                          // 預かり源泉税採用区分
        GensenUseKbnFlg : Boolean;                          // セットフラグ True:セットあり、False:セットなし
        PersonKbn       : Integer;                          // 個人／法人区分
        PersonKbnFlg    : Boolean;                          // セットフラグ True:セットあり、False:セットなし
        LocationKbn     : Integer;                          // 国内／国外区分
        LocationKbnFlg  : Boolean;                          // セットフラグ True:セットあり、False:セットなし

        PayKbn2         : Integer;                          // 支払通知書メール配信区分
        PayKbn2Flg      : Boolean;                          // セットフラグ True:セットあり、False:セットなし

        ZipPass         : String;                           // 解凍用パスワード
        ZipPassFlg      : Boolean;                          // セットフラグ True:セットあり、False:セットなし
// <262> ADD-END
        VFree1          : String;                           // 文字フリー項目1
        VFree1Flg       : Boolean;                          // セットフラグ1
        VFree2          : String;                           // 文字フリー項目2
        VFree2Flg       : Boolean;                          // セットフラグ2
        VFree3          : String;                           // 文字フリー項目3
        VFree3Flg       : Boolean;                          // セットフラグ3
        VFree4          : String;                           // 文字フリー項目4
        VFree4Flg       : Boolean;                          // セットフラグ4
        VFree5          : String;                           // 文字フリー項目5
        VFree5Flg       : Boolean;                          // セットフラグ5
        VFree6          : String;                           // 文字フリー項目6
        VFree6Flg       : Boolean;                          // セットフラグ6
        VFree7          : String;                           // 文字フリー項目7
        VFree7Flg       : Boolean;                          // セットフラグ7
        VFree8          : String;                           // 文字フリー項目8
        VFree8Flg       : Boolean;                          // セットフラグ8
        VFree9          : String;                           // 文字フリー項目9
        VFree9Flg       : Boolean;                          // セットフラグ9
        VFree10         : String;                           // 文字フリー項目10
        VFree10Flg      : Boolean;                          // セットフラグ10
        NFree1          : Double;                           // 数字フリー項目1
        NFree1Flg       : Boolean;                          // セットフラグ1
        NFree2          : Double;                           // 数字フリー項目2
        NFree2Flg       : Boolean;                          // セットフラグ2
        NFree3          : Double;                           // 数字フリー項目3
        NFree3Flg       : Boolean;                          // セットフラグ3
        NFree4          : Double;                           // 数字フリー項目4
        NFree4Flg       : Boolean;                          // セットフラグ4
        NFree5          : Double;                           // 数字フリー項目5
        NFree5Flg       : Boolean;                          // セットフラグ5
        NFree6          : Double;                           // 数字フリー項目6
        NFree6Flg       : Boolean;                          // セットフラグ6
        NFree7          : Double;                           // 数字フリー項目7
        NFree7Flg       : Boolean;                          // セットフラグ7
        NFree8          : Double;                           // 数字フリー項目8
        NFree8Flg       : Boolean;                          // セットフラグ8
        NFree9          : Double;                           // 数字フリー項目9
        NFree9Flg       : Boolean;                          // セットフラグ9
        NFree10         : Double;                           // 数字フリー項目10
        NFree10Flg      : Boolean;                          // セットフラグ10
        DFree1          : TDateTime;                        // 日付フリー項目1
        DFree1Flg       : Boolean;                          // セットフラグ1
        DFree2          : TDateTime;                        // 日付フリー項目2
        DFree2Flg       : Boolean;                          // セットフラグ2
        DFree3          : TDateTime;                        // 日付フリー項目3
        DFree3Flg       : Boolean;                          // セットフラグ3
//<243> ↑
    end;

    PrintDstData = record                                   // <161>
        strExCode       :   String;			                // 補助外部ｺｰﾄﾞ
        strExNCode      :   Extended;                       // 補助内部ｺｰﾄﾞ
		strAssociation  :   String;			                // 連想
		strName         :   String;			                // 正式名称
		strNameSimple   :   String;			                // 簡略名称

	end;

//↓<2257>
	TTorihikiBunrui = (tbMAS, tbSEL1, tbSEL2, tbCRD, tbPAY, tbDEP);

	//取引先コピー住所系変更チェック用構造体
	MTOKUI_ORG				= record
		//得意・仕入・資産採用
		HojyoKbn1			: Integer;	//得意先採用
		HojyoKbn2			: Integer;	//仕入先採用
		SisanHojyoKbn1		: Integer;	//資産購入先採用
		SisanHojyoKbn2		: Integer;	//資産売却先採用
		SisanHojyoKbn3		: Integer;	//資産リース会社採用

		PostNo1				: Integer;
		PostNo2				: Integer;
		Ads1				: String;
		Ads2				: String;
		Tel1				: String;
		Tel2				: String;
		Fax1				: String;
	end;
	//取引先コピー住所系変更チェック用構造体
	MTOKUI_COPY				= record
		PostNo1				: Integer;
		PostNo2				: Integer;
		Ads1				: String;
		Ads2				: String;
		Tel1				: String;
		Tel2				: String;
		Fax1				: String;
	end;
//↑<2257>
//<KSN> ADD St
    TSend_Exp = record
        TableName : String;
        Where : String;
    end;

    TRcv_Exp = record
        GCode : String;
        Nm : String;
        Nmk : String;
    end;
//<KSN> ADD Ed
//↓<MJUP>
	// 個別ｶｽﾀﾏｲｽﾞ情報(識別が増えたらここに増やして使用してください)
	TSELCSTM_TBLRec = record
		GL06		: Boolean;
		GL33		: Boolean; //<Gali2235>
	end;
//↑<MJUP>

//<KSN> ADD St
    TDragData = record
        DspNo : Integer;
        MTokui : TMTokui;
        HojyoTree : THojyoTree;
    end;
//<KSN> ADD Ed
const
	WM_ONPAINT			= WM_APP + 1;				        // OnPaint時の処理起動メッセージ用
	WM_IMPORTWF			= WM_APP + 2;				        // <Gali2235>
//<226> ↓
    ucCL_UnEnableCtrl = $00F2F2F2;          //使用不可カラー
    ucPrvSys_HOUEI = 'HE01';
//<226> ↑
//<KSN> ADD St
    ORDER_ASC = 0;
    ORDER_DESC = 1;
//<KSN> ADD Ed
//    PRGNAME = 'JNTCRP004001';  //*Log*
    m_test : array [boolean] of string=('False','True');  //*Log*
type
  {$I ActionInterface.inc}
  {$I JNTMASFUSENBIKODLGIFH.inc}
  {$I JNTMASExceptIFI.inc}
  {$I JNTMASExceptIFH.inc}
  {$I JNTMASSEARCHDLGIFH.inc}
  {$include JNTSelPrtIF.inc}                                // <PRN>
  {$I ETYMasterSinseiExgIFI.inc}                            // <WF>
  {$I ETYMasterSinseiExgIFH.inc}                            // <WF>
  {$include JNTCRPSyncMasterH.inc}                // <Rel> ﾏｽﾀ同期共通ﾍｯﾀﾞ部
  {$include JNTSelFncH.inc}
  //↓<253>
  {$include JNTCRPFreeChg.inc}
  {$include JNTCRPFreeDlgH.inc}
  //↑<253>
//  {$I Log_Writer_1.inc}  //*Log*

  // <PRN>
  TPrintAppEntry = function
  (AOwner       :   TComponent;
   pRec		    :   Pointer;
   Mode		    :   Integer;
   PrtParam	    :   rcPrtParam;
   var ArHdl    :   array of Pointer): Integer;

  TJNTCRP004001f = class(TForm)
	PPanelSpeed: TMPanel;
	PPanelTree: TMPanel;
	VTreeView: TMTreeView;
	PPanelBase: TMPanel;
	Root_PMTab: TMTab;
	BSpeedButtonEnd: TMSpeedButton;
	BSpeedButtonPrn: TMSpeedButton;
	BSpeedButtonChg: TMSpeedButton;
	BSpeedButtonIS: TMSpeedButton;
	Jituzai_PPanel_Card: TMPanel;
    v: TScrollBox;
    PMTab: TMTab;
    PPanel_Kihon: TMPanel;
	JHojyoMA_DMemData: TdxMemData;
	JHojyoMA_DMemDataSumKbn: TIntegerField;
	JHojyoMA_DMemDataRecordKbn: TIntegerField;
	JHojyoMA_DMemDataGCode: TStringField;
	JHojyoMA_DMemDataRenChar: TStringField;
	JHojyoMA_DMemDataLongName: TStringField;
	JHojyoMA_DMemDataSimpleName: TStringField;
	JHojyoMA_DDataSource: TDataSource;
	TreeView_VImageList: TImageList;
    MTOKUI_DMQuery: TMQuery;
	BSpeedButtonDel: TMSpeedButton;
	PMKasantaikei: TPopupMenu;
	TPCopy: TMenuItem;
	TPPaste: TMenuItem;
	N1: TMenuItem;
	TPDelete: TMenuItem;
	TPAllDel: TMenuItem;
	N3: TMenuItem;
	TFBlue: TMenuItem;
	TFGreen: TMenuItem;
	TFOrange: TMenuItem;
	TFRed: TMenuItem;
	ImageList2: TImageList;
	ImageList3: TImageList;
    PMTokui: TPopupMenu;
	GFBlue: TMenuItem;
	GFGreen: TMenuItem;
	GFOrange: TMenuItem;
	GFRed: TMenuItem;
	JHojyoMA_DMemDataFusen: TGraphicField;
	MasterInfo_DMemData: TdxMemData;
	MasterInfo_DMemDataJHojyoName: TStringField;
	MasterInfo_DMemDataGHojyoName: TStringField;
	MasterInfo_DMemDataCodeDigit: TIntegerField;
	MasterInfo_DMemDataCodeAttr: TIntegerField;
	TPDetail: TMenuItem;
	N2: TMenuItem;
	Splitter1: TSplitter;
	GFDel: TMenuItem;
	GFSep: TMenuItem;
	TFDel: TMenuItem;
	TFSep: TMenuItem;
	GFRe: TMenuItem;
	GFRedOff: TMenuItem;
	GFRedOn: TMenuItem;
	GFBlueOff: TMenuItem;
	GFBlueOn: TMenuItem;
	GFGreenOff: TMenuItem;
	GFGreenOn: TMenuItem;
	GFOrangeOff: TMenuItem;
	GFOrangeOn: TMenuItem;
	TFRe: TMenuItem;
	TFRedOff: TMenuItem;
	TFRedOn: TMenuItem;
	TFBlueOff: TMenuItem;
	TFBlueOn: TMenuItem;
	TFGreenOff: TMenuItem;
	TFGreenOn: TMenuItem;
	TFOrangeOff: TMenuItem;
	TFOrangeOn: TMenuItem;
	JHojyoMA_DMemDataFusenIndex: TIntegerField;
	LVStyleBar: TMToolBar;
	btnFusenCtl: TToolButton;
	imgFusen: TImageList;
	imgFusenD: TImageList;
	PMFusen: TPopupMenu;
    R1: TMenuItem;
	B1: TMenuItem;
	G1: TMenuItem;
	O1: TMenuItem;
	BSpeedButtonSort: TMSpeedButton;
	MPnlCount: TMPanel;
    LblRecCntChild: TMLabel;
	MLabel16: TMLabel;
	MLabel17: TMLabel;
    MemPtnJitsuzai: TdxMemData;
	BSpeedButtonFind: TMSpeedButton;
	N4: TMenuItem;
	TPOpen: TMenuItem;
	TPClose: TMenuItem;
    JHojyoMA_DMemDataNCode: TFloatField;
    Jituzai_LLabel_RenChar: TMLabel;
    Jituzai_LLabel_LongName: TMLabel;
    Jituzai_LLabel_SimpleName: TMLabel;
    f0RenChar: TMTxtEdit;
    f0LongName: TMTxtEdit;
    f0SimpleName: TMTxtEdit;
    f0KEISYOKBN: TMTxtEdit;
    MLabel1: TMLabel;
    Label44: TMLabel;
    f0FKANA: TMTxtEdit;
    Jituzai_PPanel_Card_1: TMPanel;
    Jituzai_LLabel_Fusen: TMLabel;
    Jituzai_ImageRaised_FusenRed: TImage;
    Jituzai_ImageRaised_FusenGreen: TImage;
    Jituzai_ImageRaised_FusenBlue: TImage;
    Jituzai_ImageRaised_FusenOrange: TImage;
    Jituzai_ImageLowered_FusenRed: TImage;
    Jituzai_ImageLowered_FusenGreen: TImage;
    Jituzai_ImageLowered_FusenBlue: TImage;
    Jituzai_ImageLowered_FusenOrange: TImage;
    Jituzai_ETEdit_Fusen: TMTxtEdit;
    Jituzai_PPanel_Grid: TMPanel;
    Jituzai_DdxDBGrid: TdxDBGrid;
    Jituzai_DdxDBGridRecId: TdxDBGridColumn;
    Jituzai_DdxDBGridFusen: TdxDBGridGraphicColumn;
    Jituzai_DdxDBGridGCode: TdxDBGridMaskColumn;
    Jituzai_DdxDBGridRenChar: TdxDBGridMaskColumn;
    Jituzai_DdxDBGridLongName: TdxDBGridMaskColumn;
    Jituzai_DdxDBGridSimpleName: TdxDBGridMaskColumn;
    MPanel1: TMPanel;
    MPanel2: TMPanel;
    Jituzai_LLabel_ZipCode1: TMLabel;
    Jituzai_LLabel_Address: TMLabel;
    Jituzai_LLabel_ZipCode2: TMLabel;
    Jituzai_LLabel_TelNo: TMLabel;
    MLabel2: TMLabel;
    MLabel3: TMLabel;
    LblFAX: TMLabel;
    Label1: TMLabel;
    Label48: TMLabel;
    Label11: TMLabel;
    f0ZipCode1: TMNumEdit;
    f0ZipCode2: TMNumEdit;
    f0Address1: TMTxtEdit;
    f0Address2: TMTxtEdit;
    f0TelNo: TMTxtEdit;
    f0DHYONM1: TMTxtEdit;
    Jituzai_LLabel_StartDate: TMLabel;
    MLabel20: TMLabel;
    Label13: TMLabel;
    Label15: TMLabel;
    Label14: TMLabel;
    f0EndDate: TMDateEdit;
    f0SYAINSU: TMNumEdit;
    f0SIHONKIN: TMNumEdit;
    f0NENSYO: TMNumEdit;
    KanaCtl: TMFurigana;
    PPanel_Seg: TMPanel;
    MLabel49: TMLabel;
    f2SegLab1: TMLabel;
    f2SegLab2: TMLabel;
    f2SegLab3: TMLabel;
    f2SegLab4: TMLabel;
    f2SegLab5: TMLabel;
    f2SegLab6: TMLabel;
    f2SegLab7: TMLabel;
    f2SegLab8: TMLabel;
    f2SegLab9: TMLabel;
    f2SegLab10: TMLabel;
    f2SgName1: TMLabel;
    f2SgName2: TMLabel;
    f2SgName3: TMLabel;
    f2SgName4: TMLabel;
    f2SgName5: TMLabel;
    f2SgName6: TMLabel;
    f2SgName7: TMLabel;
    f2SgName8: TMLabel;
    f2SgName9: TMLabel;
    f2SgName10: TMLabel;
    f0HPADD: TMTxtEdit;
    f0TelNo2: TMTxtEdit;
    f0FAX: TMTxtEdit;
    f0DHYONM2: TMTxtEdit;
    f0StartDate: TMDateEdit;
    PPanel_Saiyo: TMPanel;
    Label3: TMLabel;
    LblMASKBN_N: TMLabel;
    f1TKBNNM: TMLabel;
    LblSaiyo_S: TMLabel;
    LblMASKBN_S: TMLabel;
    f1SKBNNM: TMLabel;
    f1TSKBN: TMCheckBox;
    f1TKBN: TMNumEdit;
    f1SSKBN: TMCheckBox;
    f1SKBN: TMNumEdit;
    Jituzai_LLabel_GCode: TMLabel;
    f0TGCode: TMTxtEdit;
    f0NGCode: TMNumEdit;
    f2SgCode1: TMTxtEdit;
    f2SgCode2: TMTxtEdit;
    f2SgCode3: TMTxtEdit;
    f2SgCode4: TMTxtEdit;
    f2SgCode5: TMTxtEdit;
    f2SgCode6: TMTxtEdit;
    f2SgCode7: TMTxtEdit;
    f2SgCode8: TMTxtEdit;
    f2SgCode9: TMTxtEdit;
    f2SgCode10: TMTxtEdit;
    MLabel35: TMLabel;
    MLabel36: TMLabel;
    MLabel9: TMLabel;
    MLabel40: TMLabel;
    PPanel_Br: TMPanel;
    MLabel116: TMLabel;
    MLabel117: TMLabel;
    MLabel118: TMLabel;
    MLabel119: TMLabel;
    MLabel53: TMLabel;
    f3TBrLab1: TMLabel;
    f3TBrLab2: TMLabel;
    f3TBrLab3: TMLabel;
    f3TBrLab4: TMLabel;
    f3TBrLab5: TMLabel;
    f3TBrLab6: TMLabel;
    f3TBrLab7: TMLabel;
    f3TBrLab8: TMLabel;
    f3TBrLab9: TMLabel;
    f3TBrLab10: TMLabel;
    f3TBrName1: TMLabel;
    f3TBrName2: TMLabel;
    f3TBrName3: TMLabel;
    f3TBrName4: TMLabel;
    f3TBrName5: TMLabel;
    f3TBrName6: TMLabel;
    f3TBrName7: TMLabel;
    f3TBrName8: TMLabel;
    f3TBrName9: TMLabel;
    f3TBrName10: TMLabel;
    f3SBrLab1: TMLabel;
    f3SBrLab2: TMLabel;
    f3SBrLab3: TMLabel;
    f3SBrLab4: TMLabel;
    f3SBrLab5: TMLabel;
    f3SBrLab6: TMLabel;
    f3SBrLab7: TMLabel;
    f3SBrLab8: TMLabel;
    f3SBrLab9: TMLabel;
    f3SBrLab10: TMLabel;
    f3SBrName1: TMLabel;
    f3SBrName2: TMLabel;
    f3SBrName3: TMLabel;
    f3SBrName4: TMLabel;
    f3SBrName5: TMLabel;
    f3SBrName6: TMLabel;
    f3SBrName7: TMLabel;
    f3SBrName8: TMLabel;
    f3SBrName9: TMLabel;
    f3SBrName10: TMLabel;
    f3TBrCode2: TMTxtEdit;
    f3TBrCode3: TMTxtEdit;
    f3TBrCode4: TMTxtEdit;
    f3TBrCode5: TMTxtEdit;
    f3TBrCode6: TMTxtEdit;
    f3TBrCode7: TMTxtEdit;
    f3TBrCode8: TMTxtEdit;
    f3TBrCode9: TMTxtEdit;
    f3TBrCode10: TMTxtEdit;
    f3SBrCode1: TMTxtEdit;
    f3SBrCode2: TMTxtEdit;
    f3SBrCode3: TMTxtEdit;
    f3SBrCode4: TMTxtEdit;
    f3SBrCode5: TMTxtEdit;
    f3SBrCode6: TMTxtEdit;
    f3SBrCode7: TMTxtEdit;
    f3SBrCode8: TMTxtEdit;
    f3SBrCode9: TMTxtEdit;
    f3SBrCode10: TMTxtEdit;
    aclExec: TActionList;
    FreeSetMtokui: TAction;
    MPanel3: TMPanel;
    MSPFunctionBar: TMSPFunctionBar;
    SStatusBar: TMStatusBar;
    Jituzai_DdxDBGridTKBN: TdxDBGridColumn;
    Jituzai_DdxDBGridSKBN: TdxDBGridColumn;
    JHojyoMA_DMemDataTKBN: TStringField;
    JHojyoMA_DMemDataSKBN: TStringField;
    MPanel_NY: TMPanel;
    MLabel5: TMLabel;
    MLabel21: TMLabel;
    MLabel22: TMLabel;
    MLabel23: TMLabel;
    DtlCs2Label0101: TMLabel;
    DtlCs2Label0102: TMLabel;
    DtlCs2Label0103: TMLabel;
    DtlCs2Label0201: TMLabel;
    DtlCs2Label0202: TMLabel;
    DtlCs2Label0203: TMLabel;
    DtlCs2Label0301: TMLabel;
    DtlCs2Label0302: TMLabel;
    DtlCs2Label0303: TMLabel;
    MLabel39: TMLabel;
    f1NClosingDay1: TMNumEdit;
    f1NClosingDay2: TMNumEdit;
    f1NClosingDay3: TMNumEdit;
    f1NMonth1: TMComboBox;
    f1NMonth2: TMComboBox;
    f1NMonth3: TMComboBox;
    f1NDay1: TMNumEdit;
    f1NDay2: TMNumEdit;
    f1NDay3: TMNumEdit;
    f1NHoliday3: TMComboBox;
    f1NHoliday2: TMComboBox;
    f1NHoliday1: TMComboBox;
    Pnl_SelSeikyu: TMPanel;
    MLabel6: TMLabel;
    MLabel7: TMLabel;
    MLabel8: TMLabel;
    MLabel32: TMLabel;
    f1NSSite: TMNumEdit;
    f1NSeino: TMNumEdit;
    f1NHolidayKbn: TMComboBox;
    MPanel_SH: TMPanel;
    MLabel10: TMLabel;
    MLabel11: TMLabel;
    MLabel12: TMLabel;
    MLabel13: TMLabel;
    MLabel14: TMLabel;
    MLabel15: TMLabel;
    MLabel18: TMLabel;
    MLabel19: TMLabel;
    MLabel24: TMLabel;
    MLabel25: TMLabel;
    MLabel26: TMLabel;
    MLabel27: TMLabel;
    MLabel28: TMLabel;
    f1SClosingDay1: TMNumEdit;
    f1SClosingDay2: TMNumEdit;
    f1SClosingDay3: TMNumEdit;
    f1SMonth1: TMComboBox;
    f1SMonth2: TMComboBox;
    f1SMonth3: TMComboBox;
    f1SDay1: TMNumEdit;
    f1SDay2: TMNumEdit;
    f1SDay3: TMNumEdit;
    f1SHoliday3: TMComboBox;
    f1SHoliday2: TMComboBox;
    f1SHoliday1: TMComboBox;
    Pnl_SelSihrai: TMPanel;
    MLabel29: TMLabel;
    MLabel30: TMLabel;
    MLabel31: TMLabel;
    MLabel33: TMLabel;
    f1SSSite: TMNumEdit;
    f1SSeino: TMNumEdit;
    f1SHolidayKbn: TMComboBox;
    f1Fusen1: TImage;
    f1Fusen2: TImage;
    f1Fusen3: TImage;
    f1Fusen4: TImage;
    JHojyoMA_DMemDataSyokuchiKbn: TIntegerField;
    f3TBrCode1: TMTxtEdit;
    StdProc7: TFDStoredProc;
    StdProc7_S: TFDStoredProc;
    StdProc1: TFDStoredProc;
    StdProc1_S: TFDStoredProc;
    StdProc4: TFDStoredProc;
    StdProc4_S: TFDStoredProc;
    MemPtnJitsuzaiFusen: TGraphicField;
    MemPtnJitsuzaiGCode: TStringField;
    MemPtnJitsuzaiHojyoKbn: TStringField;
    MemPtnJitsuzaiRenso: TStringField;
    MemPtnJitsuzaiNmk: TStringField;
    MemPtnJitsuzaiNm: TStringField;
    MemPtnJitsuzaiPostNo1: TStringField;
    MemPtnJitsuzaiPostNo2: TStringField;
    MemPtnJitsuzaiAds1: TStringField;
    MemPtnJitsuzaiAds2: TStringField;
    MemPtnJitsuzaiDHyoNm1: TStringField;
    MemPtnJitsuzaiDHyoNm2: TStringField;
    MemPtnJitsuzaiTel1: TStringField;
    MemPtnJitsuzaiTel2: TStringField;
    MemPtnJitsuzaiFax1: TStringField;
    MemPtnJitsuzaiShihonKin: TFloatField;
    MemPtnJitsuzaiSyainSu: TFloatField;
    MemPtnJitsuzaiNensyo: TFloatField;
    MemPtnJitsuzaiTStartDate: TStringField;
    MemPtnJitsuzaiTEndDate: TStringField;
    MemPtnJitsuzaiRCloseDay1: TSmallintField;
    MemPtnJitsuzaiRCloseDay2: TSmallintField;
    MemPtnJitsuzaiRCloseDay3: TSmallintField;
    MemPtnJitsuzaiRcvDay1: TSmallintField;
    MemPtnJitsuzaiRcvDay2: TSmallintField;
    MemPtnJitsuzaiRcvDay3: TSmallintField;
    MemPtnJitsuzaiRcvMonth1: TSmallintField;
    MemPtnJitsuzaiRcvMonth2: TSmallintField;
    MemPtnJitsuzaiRcvMonth3: TSmallintField;
    MemPtnJitsuzaiRHolidayKbn1: TSmallintField;
    MemPtnJitsuzaiRHolidayKbn2: TSmallintField;
    MemPtnJitsuzaiRHolidayKbn3: TSmallintField;
    MemPtnJitsuzaiPCloseDay1: TSmallintField;
    MemPtnJitsuzaiPCloseDay2: TSmallintField;
    MemPtnJitsuzaiPCloseDay3: TSmallintField;
    MemPtnJitsuzaiPayDay1: TSmallintField;
    MemPtnJitsuzaiPayDay2: TSmallintField;
    MemPtnJitsuzaiPayDay3: TSmallintField;
    MemPtnJitsuzaiPayMonth1: TSmallintField;
    MemPtnJitsuzaiPayMonth2: TSmallintField;
    MemPtnJitsuzaiPayMonth3: TSmallintField;
    MemPtnJitsuzaiPHolidayKbn1: TSmallintField;
    MemPtnJitsuzaiPHolidayKbn2: TSmallintField;
    MemPtnJitsuzaiHPAddress: TStringField;
    MemPtnJitsuzaiTRRZuiSSite: TIntegerField;
    MemPtnJitsuzaiTRRHolidayKbn: TSmallintField;
    MemPtnJitsuzaiSRRZuiSSite: TIntegerField;
    MemPtnJitsuzaiSRRHolidayKbn: TSmallintField;
    MemPtnJitsuzaiTRRHolidayName: TStringField;
    MemPtnJitsuzaiSRRHolidayName: TStringField;
    MemPtnJitsuzaiRcvMonth1Name: TStringField;
    MemPtnJitsuzaiRcvMonth2Name: TStringField;
    MemPtnJitsuzaiRcvMonth3Name: TStringField;
    MemPtnJitsuzaiRHolidayKbn1Name: TStringField;
    MemPtnJitsuzaiRHolidayKbn2Name: TStringField;
    MemPtnJitsuzaiRHolidayKbn3Name: TStringField;
    MemPtnJitsuzaiPayMonth1Name: TStringField;
    MemPtnJitsuzaiPayMonth2Name: TStringField;
    MemPtnJitsuzaiPayMonth3Name: TStringField;
    MemPtnJitsuzaiPHolidayKbn1Name: TStringField;
    MemPtnJitsuzaiPHolidayKbn2Name: TStringField;
    MemPtnJitsuzaiPHolidayKbn3Name: TStringField;
    MemPtnJitsuzaiUpdDateTM: TStringField;
    MemPtnJitsuzaiPHolidayKbn3: TSmallintField;
    MemPtnJitsuzaiTRRTSEINO: TStringField;
    MemPtnJitsuzaiSRRTSEINO: TStringField;
    Image_Fusen_Blue: TImage;
    Image_Fusen_Red: TImage;
    Image_Fusen_Green: TImage;
    Image_Fusen_Orange: TImage;
    Image_Fusen_Glay: TImage;
    BSpeedButtonWF: TMSpeedButton;
    PGyousyu: TMPanel;
    f0GYLab: TMLabel;
    f0GYCode: TMTxtEdit;
    f0GYName: TMLabel;
    MemPtnSegBun: TdxMemData;
    CmnMemDataPrintSystemstrExCode: TStringField;
    CmnMemDataPrintSystemstrName: TStringField;
    CmnMemDataPrintSystemstrSeg01Code: TStringField;
    CmnMemDataPrintSystemstrSeg02Code: TStringField;
    CmnMemDataPrintSystemstrSeg03Code: TStringField;
    CmnMemDataPrintSystemstrSeg04Code: TStringField;
    CmnMemDataPrintSystemstrSeg05Code: TStringField;
    CmnMemDataPrintSystemstrSeg01Name: TStringField;
    CmnMemDataPrintSystemstrSeg02Name: TStringField;
    CmnMemDataPrintSystemstrSeg03Name: TStringField;
    CmnMemDataPrintSystemstrSeg04Name: TStringField;
    CmnMemDataPrintSystemstrSeg05Name: TStringField;
    CmnMemDataPrintSystemstrBun01Code: TStringField;
    CmnMemDataPrintSystemstrBun02Code: TStringField;
    CmnMemDataPrintSystemstrBun03Code: TStringField;
    CmnMemDataPrintSystemstrBun04Code: TStringField;
    CmnMemDataPrintSystemstrBun05Code: TStringField;
    CmnMemDataPrintSystemstrBun01Name: TStringField;
    CmnMemDataPrintSystemstrBun02Name: TStringField;
    CmnMemDataPrintSystemstrBun03Name: TStringField;
    CmnMemDataPrintSystemstrBun04Name: TStringField;
    CmnMemDataPrintSystemstrBun05Name: TStringField;
    MemPtnSegBunstrSeg06Code: TStringField;
    MemPtnSegBunstrSeg07Code: TStringField;
    MemPtnSegBunstrSeg08Code: TStringField;
    MemPtnSegBunstrSeg09Code: TStringField;
    MemPtnSegBunstrSeg10Code: TStringField;
    MemPtnSegBunstrSeg06Name: TStringField;
    MemPtnSegBunstrSeg07Name: TStringField;
    MemPtnSegBunstrSeg08Name: TStringField;
    MemPtnSegBunstrSeg09Name: TStringField;
    MemPtnSegBunstrSeg10Name: TStringField;
    MemPtnSegBunstrBun06Code: TStringField;
    MemPtnSegBunstrBun07Code: TStringField;
    MemPtnSegBunstrBun08Code: TStringField;
    MemPtnSegBunstrBun09Code: TStringField;
    MemPtnSegBunstrBun10Code: TStringField;
    MemPtnSegBunstrBun06Name: TStringField;
    MemPtnSegBunstrBun07Name: TStringField;
    MemPtnSegBunstrBun08Name: TStringField;
    MemPtnSegBunstrBun09Name: TStringField;
    MemPtnSegBunstrBun10Name: TStringField;
    MemPtnJitsuzaiTSAIYOU: TStringField;
    MemPtnJitsuzaiSSAIYOU: TStringField;
    JHojyoMA_DMemDataSHojyoKbn1: TStringField;
    JHojyoMA_DMemDataSHojyoKbn2: TStringField;
    Jituzai_DdxDBGridSHojyoKbn1: TdxDBGridColumn;
    Jituzai_DdxDBGridSHojyoKbn2: TdxDBGridColumn;
    LblSHojyoKbn1: TMLabel;
    LblSHojyoKbn2: TMLabel;
    f1SHojyoKbn1: TMCheckBox;
    f1SHojyoKbn2: TMCheckBox;
    MemPtnJitsuzaiSisanHojyoKbn1: TStringField;
    MemPtnJitsuzaiSisanHojyoKbn2: TStringField;
    MemPtnJitsuzaiSisan: TStringField;
    MemPtnGoukei: TdxMemData;
    MemPtnGoukeigrTag: TGraphicField;
    MemPtnGoukeistrExCode: TStringField;
    MemPtnGoukeistrName: TStringField;
    MemPtnGoukeistrNameSimple: TStringField;
    MemPtnGoukeistrAssociation: TStringField;
    MemPtnGoukeistrAddress: TStringField;
    MemPtnGoukeinZipCodeUpper: TIntegerField;
    MemPtnGoukeinZipCodeLower: TIntegerField;
    MemPtnKasan: TdxMemData;
    MemPtnKasanstrExCodeDst: TStringField;
    MemPtnKasanstrExCodeSrc: TStringField;
    MemPtnKasanstrNameSimpleDst: TStringField;
    MemPtnKasanstrNameSimpleSrc: TStringField;
    MemPtnGoukeiTSAIYOU: TStringField;
    MemPtnGoukeiSSAIYOU: TStringField;
    MemPtnGoukeiKSAIYOU: TStringField;
    MemPtnGoukeiBSAIYOU: TStringField;
    SPMasTori: TFDStoredProc;
    SPPayTori: TFDStoredProc;
    SPCrdTori: TFDStoredProc;
    SPDepTori: TFDStoredProc;
    SPSelTori: TFDStoredProc;
    f1SHojyoKbn3: TMCheckBox;
    LblSHojyoKbn3: TMLabel;
    Jituzai_DdxDBGridSHojyoKbn3: TdxDBGridColumn;
    JHojyoMA_DMemDataSHojyoKbn3: TStringField;
    MemPtnJitsuzaiSisanHojyoKbn3: TStringField;
    MemPtnGoukeiRSAIYOU: TStringField;
    LSinsei: TMPanel;
    memFsn: TdxMemData;
    memFsnCode: TStringField;
    memFsnCmnt: TStringField;
    ProgressBar1: TProgressBar;
    StoredProc10: TFDStoredProc;
    MP_DEP_CHK_MTOKUI_Saiyo: TFDStoredProc;
    MP_BIL_DEL_MTOKUI: TFDStoredProc;
    BtnPagePrevious: TMBitBtn;
    BtnPageNext: TMBitBtn;
    Jituzai_BBitBtn_Ok: TMBitBtn;
    Jituzai_BBitBtn_Cancel: TMBitBtn;
    SPMsHistParent: TFDStoredProc;
    SPMsHist: TFDStoredProc;
    pnlJPorFR: TMPanel;
    MLabel4: TMLabel;
    f0LCOUNTRY: TMLabel;
    MLabel37: TMLabel;
    f0LCURRENCY: TMLabel;
    f0ECURRENCY: TMTxtEdit;
    f0ECOUNTRY: TMNumEdit;
    SPDenChkSEL: TFDStoredProc;
    SPDenChkMAS: TFDStoredProc;
    f0Name: TMLabel;
    CmnMemDataPrintSystemdtStart: TStringField;
    CmnMemDataPrintSystemdtEnd: TStringField;
    PPanelKasan: TMPanel;
    ScrollBox1: TScrollBox;
    Kasan_Parent_Panel: TMPanel;
    Lbl_KasanParent: TMLabel;
    Kasan_Parent_DBGrid: TdxDBGrid;
    Kasan_Parent_DBGridRecId: TdxDBGridColumn;
    Kasan_Parent_DBGridFusen: TdxDBGridGraphicColumn;
    Kasan_Parent_DBGridGCode: TdxDBGridMaskColumn;
    Kasan_Parent_DBGridLongName: TdxDBGridMaskColumn;
    Kasan_Parent_DBGridSimpleName: TdxDBGridMaskColumn;
    Kasan_Child_Panel: TMPanel;
    Lbl_KasanChild: TMLabel;
    Kasan_Child_DBGrid: TdxDBGrid;
    Kasan_Child_DBGridRecId: TdxDBGridColumn;
    Kasan_Child_DBGridDspNO: TdxDBGridMaskColumn;
    Kasan_Child_DBGridFusen: TdxDBGridGraphicColumn;
    Kasan_Child_DBGridGCode: TdxDBGridButtonColumn;
    Kasan_Child_DBGridLongName: TdxDBGridMaskColumn;
    Kasan_Child_DBGridSimpleName: TdxDBGridMaskColumn;
    PPanelTree_Kasan: TMPanel;
    Lbl_KasanTaikei: TMLabel;
    VTreeView_Kasan: TMTreeView;
    MasterInfo_DMemDataMstrKbn26: TIntegerField;
    dsKasanParent: TDataSource;
    MemKasanParent: TdxMemData;
    MemKasanParentFusen: TGraphicField;
    MemKasanParentFusenIndex: TIntegerField;
    MemKasanParentSumKbn: TIntegerField;
    MemKasanParentGCode: TStringField;
    MemKasanParentLongName: TStringField;
    MemKasanSimpleName: TStringField;
    MemKasanNCode: TFloatField;
    dsKasanChild: TDataSource;
    MemKasanChild: TdxMemData;
    MemKasanChildEntNoSumKbn: TIntegerField;
    MemKasanChildFusen: TGraphicField;
    MemKasanChildGCode: TStringField;
    MemKasanChildEntNoLongName: TStringField;
    MemKasanChildSimpleName: TStringField;
    MemKasanChildNewData: TBooleanField;
    MemKasanChildPatternNo: TIntegerField;
    MemKasanChildSumNCode: TFloatField;
    MemKasanChildEntNo: TIntegerField;
    MemKasanChildBasedNCode: TFloatField;
    MemKasanChildAddKbn: TIntegerField;
    MemKasanChildSaveGCode: TStringField;
    MemKasanChildUpdDateTM: TDateTimeField;
    MemKasanChildInsDateTM: TDateTimeField;
    MemKasanChildDspNo: TIntegerField;
    FindMTokui: TAction;
    PMChild: TPopupMenu;
    TPInsert: TMenuItem;
    TPDelChild: TMenuItem;
    Image_Goukei: TImage;
    Image_Jitsuzai: TImage;
    CopyMtokuiProc: TFDStoredProc;
    CopyMtokui: TAction;
    MemPtnJitsuzaiFkana: TStringField;
    MemPtnJitsuzaiKeisyokbn: TStringField;
    MemPtnJitsuzaiGyoGcode: TStringField;
    MemPtnJitsuzaiGyoNMK: TStringField;
    chb_KasanUpdate: TMCheckBox;
// <MYN> ins -s
    MPanelMYN: 							TMPanel;
    MLabel34: 							TMLabel;
    f0LMYNKbnNm:						TMLabel;
    f0MYNKbn: 							TMNumEdit;
    f0HoujinLab: 						TMLabel;
    MemPtnJitsuzaiMYNHoujinKojinKbnNm: 	TStringField;
    MemPtnJitsuzaiMYNHoujinKojinNo: 	TStringField;
    f0MYNNo: 							TMTxtEdit;
    JHojyoMA_DMemDataHoujinKbn: 		TStringField;
    JHojyoMA_DMemDataHoujinNo: 			TStringField;
    JHojyoMA_DMemDataKojinKey: 			TStringField;
    BtnMYNKojinUpd: 					TMBitBtn;
    Image_Mask: 						TImage;
// <MYN> ins -e
// <MYN11> ins -s
    MPanelKojin: 						TMPanel;
    Image_MaskGray: 					TImage;
// <MYN11> ins -e

	procedure FormCreate(Sender: TObject);
	procedure FormClose(Sender: TObject; var Action: TCloseAction);
	procedure FormActivate(Sender: TObject);

	procedure BSpeedButtonEndClick(Sender: TObject);
	procedure BSpeedButtonISClick(Sender: TObject);
	procedure VTreeViewClick(Sender: TObject);
	procedure VTreeViewEnter(Sender: TObject);
	procedure VTreeViewDragDrop(Sender, Source: TObject; X, Y: Integer);
	procedure VTreeViewDragOver(Sender, Source: TObject; X, Y: Integer;
	  State: TDragState; var Accept: Boolean);
	procedure Jituzai_BBitBtn_OkClick(Sender: TObject);
	procedure Jituzai_BBitBtn_CancelClick(Sender: TObject);

	procedure EnterEvent(Sender: TObject);
	function  fnDataWrite(strGCode: String; iSumKbn: Integer; bSw: Boolean): Boolean;
    function  fnDataWriteGrid(strGCode: String; iSumKbn: Integer): Boolean; // <140>ｸﾞﾘｯﾄﾞ用にｶｽﾀﾏｲｽﾞ
	function  fnDataRead(strGCode: String; iSumKbn: Integer; iChk: Integer): Integer;

	function  fnDataDelete(strGCode: String; iSumKbn: Integer): Boolean;
//	procedure fnSumSMDelete(strGCode: String);
//	procedure fnSumDSMDelete(strGCode: String);
//	procedure fnSumBMDelete(strGCode: String);
//	procedure fnFusenDelete(strGCode: String);

	procedure fnMemSet(iSumKbn: Integer; bSw: Boolean);
	procedure fnJEntrySet();
	procedure fnCreateAll();
	procedure fnCreateTreeViewItems(cSrcNode: TTreeNode);
	procedure fnCreateTreeViewItem(dqMasterTree: TMQuery; cSrcNode: TTreeNode);
	procedure fnRebuildTreeViewItems();
	procedure fnCreateGrid(WkTreeNode: TTreeNode; iSumKbn: Integer);
	procedure fnCreateCard(iSumKbn: Integer);
//	procedure fnClearCard(iSumKbn,pKBN: Integer); <108>
	procedure fnClearCard(iKBN: Integer);
	procedure fnTreeUpdate(strGCode: String; iSumKbn: Integer);
	function  fnHojyoTreeWrite(strGCode: String): Boolean;
	procedure fnMasterInfoRead();

	function  fnDropCheck(nDragNode: TTreeNode; nDropNode: TTreeNode) : Integer;
	procedure Root_PMTabChange(Sender: TObject);
	procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
	procedure FormShow(Sender: TObject);
	procedure BSpeedButtonChgClick(Sender: TObject);
	procedure FormHide(Sender: TObject);
	procedure Jituzai_DdxDBGridKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Goukei_DdxDBGridKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Jituzai_DdxDBGridKeyUp(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Goukei_DdxDBGridKeyUp(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Jituzai_DdxDBGridMouseDown(Sender: TObject;
	  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
	procedure Jituzai_DdxDBGridBeforeChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
	  NewColumn: Integer; var CanChange: Boolean);
	procedure JHojyoMA_DDataSourceStateChange(Sender: TObject);
	procedure VTreeViewChange(Sender: TObject; Node: TTreeNode);
	procedure PMTabChange(Sender: TObject);
	procedure Jituzai_DdxDBGridExit(Sender: TObject);
	procedure CmnPostShow(Sender: TObject);
	procedure JHojyoMA_DMemDataBeforePost(DataSet: TDataSet);
	procedure JHojyoMA_DMemDataAfterPost(DataSet: TDataSet);
	procedure JituzaiEditExit(Sender: TObject);
	procedure JituzaiEditCheck(Sender: TObject);
	// PopUp
	procedure PMKasantaikeiPopup(Sender: TObject);
	procedure CutClick(Sender: TObject);
	procedure CopyClick(Sender: TObject);
	procedure PasteClick(Sender: TObject);
	procedure DeleteClick(Sender: TObject);
	procedure AllDelClick(Sender: TObject);
	procedure DelKoujiClick(Sender: TObject);

	procedure FusenDsp(iPage : Integer; stCode : String; iFlg : Integer);
	function  FusenInfoWrite(iColor : Integer; stCode : String; stCmt : String; bSw: Boolean): Boolean;
	function  FusenInfaDelete(stCode : String): Boolean;

	procedure GFBlueOffClick(Sender: TObject);
	procedure GFGreenOffClick(Sender: TObject);
	procedure GFOrangeOffClick(Sender: TObject);
	procedure GFRedOffClick(Sender: TObject);

	procedure GFBlueOnClick(Sender: TObject);
	procedure GFGreenOnClick(Sender: TObject);
	procedure GFOrangeOnClick(Sender: TObject);
	procedure GFRedOnClick(Sender: TObject);

	procedure TFBlueOffClick(Sender: TObject);
	procedure TFGreenOffClick(Sender: TObject);
	procedure TFOrangeOffClick(Sender: TObject);
	procedure TFRedOffClick(Sender: TObject);

	procedure TFBlueOnClick(Sender: TObject);
	procedure TFGreenOnClick(Sender: TObject);
	procedure TFOrangeOnClick(Sender: TObject);
	procedure TFRedOnClick(Sender: TObject);

	procedure PMTokuiPopup(Sender: TObject);
	function  WriteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode; NodeTarget : TTreeNode): Boolean;
	function  DeleteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode): Boolean;
	function  NodeSearch(stWorkRecSearch : TreeViewRec; stWorkRecOya : TreeViewRec): Integer;
	procedure TaikeiDelete(NodeOya : TTreeNode; NodeKo : TTreeNode);
	procedure BSpeedButtonDelClick(Sender: TObject);

	function  fnDeleteCheck(strGCode: String): Boolean;

	procedure FusenInitialize();
	procedure FusenImageRedClick(Sender: TObject);
	procedure FusenImageGreenClick(Sender: TObject);
	procedure FusenImageBlueClick(Sender: TObject);
	procedure FusenImageOrangeClick(Sender: TObject);
	procedure SelectFusenColor(SelectFusen: Integer);
	procedure BSpeedButtonPrnClick(Sender: TObject);
	procedure ArrowClick(Sender: TObject);
	function  AgainEntNoSet(ParentCode: Extended): Boolean;
	procedure FusenClick(Sender: TObject);

	function  fnCreateTreeViewItemsHagure(cSrcNode: TTreeNode; iFlg : Integer): Boolean;
	function  fnCreateTreeViewItemHagure(dqMasterTree: TMQuery; cSrcNode: TTreeNode; iFlg : Integer): Boolean;
	function  fnRebuildTreeViewItemsHagure(): Boolean;
	procedure TPDetailClick(Sender: TObject);
	procedure Jituzai_DdxDBGridKeyPress(Sender: TObject; var Key: Char);
	procedure Jituzai_DdxDBGridGCodeGetText(Sender: TObject;
	  ANode: TdxTreeListNode; var AText: String);
	procedure Goukei_DdxDBGridGCodeGetText(Sender: TObject;
	  ANode: TdxTreeListNode; var AText: String);
	procedure FormDestroy(Sender: TObject);
	procedure SetFileOut(iSelect : Integer; var sTitle: TStringList; var sMemFld: TStringList);

	procedure WMOnPaint(var Msg: TMessage); message WM_ONPAINT;
//	function  MakeSQL(TAN_CD: Integer; TAN_NAME: String; FLAG: Boolean; Proc : Integer ):String;
    function  MakeSQL(TAN_CD: Extended; FLAG: Boolean; Proc : Integer):String;      // <143>
	procedure ErrorMessageDsp(DmQuery: TMQuery);
	procedure DisplayControl(Select: Integer);
	procedure SyosaiControl();
	procedure Jituzai_DdxDBGridChangeNodeEx(Sender: TObject);
	function  fnRecordCount():Boolean;
	function  fnUpdateCheck(iSumKbn : Integer):Boolean;
	procedure VTreeViewExit(Sender: TObject);
	procedure Jituzai_DdxDBGrid_KeiContDateDateValidateInput(
	  Sender: TObject; const AText: String; var ADate: TDateTime;
	  var AMessage: String; var AError: Boolean);
	procedure GFDelClick(Sender: TObject);
	procedure TFDelClick(Sender: TObject);

	function  BtnClkWriteJ():Boolean;

	procedure btnFusenCtlClick(Sender: TObject);
	procedure FusenListClick(Sender: TObject);
	procedure GFReClick(Sender: TObject);
	procedure TFReClick(Sender: TObject);
	procedure Jituzai_DdxDBGridMouseMove(Sender: TObject;
	  Shift: TShiftState; X, Y: Integer);
	procedure PMTabKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Root_PMTabKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Goukei_PMTabKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure DdxDBGrid_KeiKeyPress(Sender: TObject; var Key: Char);
	procedure Goukei_DdxDBGrid_KeiContDateDateValidateInput(
	  Sender: TObject; const AText: String; var ADate: TDateTime;
	  var AMessage: String; var AError: Boolean);
	procedure FieldRestor(Sender: TObject; SumKbn: Integer);
	procedure BSpeedButtonSortClick(Sender: TObject);
	procedure BSpeedButtonFindClick(Sender: TObject);

	procedure fnSearch		();
	function  fnDownSearch	():Boolean;
	procedure BSpeedButtonDelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);

	function  fnClearAllSystems(): Boolean;

	procedure fnSetLabel(Sender: TObject);

	function  fnDataCheck(Sender: TObject;AllChkMode: Boolean;iSumKbn : Integer):Boolean;
	procedure TPOpenClick(Sender: TObject);
	procedure TPCloseClick(Sender: TObject);
	function  fnCheckMasterTreeInsertValid(DragCode,DropCode: String): Boolean;
    procedure KanaCtlCompositionStr(Sender: TObject; Value: String);
    procedure KBNChange(Sender: TObject);
    procedure ConboKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure MSPFunctionBarFunctionClick(Sender: TObject;
      FuncNo: Integer);
    procedure FreeSetMtokuiExecute(Sender: TObject);
    procedure CopyMtokuiExecute(Sender: TObject);			// <2257>
    procedure f0LongNameChange(Sender: TObject);
    procedure f1TSKBNClick(Sender: TObject);
    procedure BChangeClick(Sender: TObject);// <119>
    procedure evtOnChange(Sender: TObject); // <130>
    function  UpdateMTOKUI(): Boolean;      // <130>
    procedure evtOnExit(Sender: TObject); // <502_001> ADD
// <WF>↓
    procedure fnImportWF();
    function  UpdateSinsei(objKey: TSinseiInfoKey): Boolean;
    procedure BSpeedButtonWFClick(Sender: TObject);
    procedure fnFldSetWF(objRec: TTokuiSinseiInfo);
//<Gali2235>    procedure fnFldSetWFUpd(objRec: TTokuiSinseiInfo); //<244>
    procedure fnFldSetWFUpd(objRec: TTokuiSinseiInfo; IsUpd:Boolean); //<244><Gali2235>
    procedure ClearOtherRec(var objRec: TWFOtherInfo);
    function  ExistMst(iMKbn: Integer; exNCode: Extended): Boolean;
    procedure Jituzai_DdxDBGridDblClick(Sender: TObject);
// <WF>↑
    procedure ChangeSaiyo();
    procedure fnCmnPageMoveClick(Sender: TObject);                // <140>
//<KSN> ADD St
	procedure DBGridChangeNodeEx(Sender: TObject);
	procedure MemDataAfterPost(DataSet: TDataSet);
	procedure MemDataBeforePost(DataSet: TDataSet);
    procedure BSpeedButtonInsClick(Sender: TObject);
    procedure DBGridStartDrag(Sender: TObject;
        var DragObject: TDragObject);
    procedure DBGridDragOver(Sender, Source: TObject; X,
      Y: Integer; State: TDragState; var Accept: Boolean);
    procedure DBGridEndDrag(Sender, Target: TObject; X, Y: Integer);
    procedure DBGridDragDrop(Sender, Source: TObject; X,
      Y: Integer);
    procedure DBGridCodeEditButtonClick(Sender: TObject);
    procedure DBGridMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure PMPopup(Sender: TObject);
    procedure DBGridCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
      var AText: String; var AColor: TColor; AFont: TFont;
      var AAlignment: TAlignment; var ADone: Boolean);
    procedure TreeViewMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure BSpeedButtonClick(Sender: TObject);
    procedure FindMtokuiExecute(Sender : TObject);
//<KSN> ADD Ed
// <MYN> ins -s
    procedure 	Image_MaskClick(Sender: TObject);
    procedure 	fnKeyPressMYN(Sender: TObject; var Key: Char);

    procedure 	f0MYNNoArrowClick(Sender: TObject);
    procedure 	Button1Click(Sender: TObject);
// <MYN> ins -e
    procedure 	PPanel_KihonExit(Sender: TObject);	// <MYN10-3>

  private
	{ Private 宣言 }
	m_pMyAppRecord		: ^TMjsAppRecord;
	m_Base_pRec		    : ^TMjsAppRecord;                   // <107>
//	m_pSystemArea	    : ^rcSYSTEMAREA;	// MJSｼｽﾃﾑｴﾘｱ
//	m_pCommonArea	    : ^rcCOMMONAREA;	// MJS共通ｴﾘｱ
	ComArea				: TJNTMASCom;

	dbCorp_Select   	: TFDConnection;
	CTRL_DB				: TFDConnection;
	MDataModule			: TMDataModulef;
	DmqCtrlDb			: TMQuery;
	m_AcControl			: TWinControl;
	TBaseNode			: TTreeNode;
	TBaseNodeSv			: TTreeNode;
	MemPost_Sw			: Integer;
// <PRN> 	PrnSupport			: TMjsPrnSupport;
// <PRN>	mjspreview			: TMjsPreviewIF;
	MjsMsgRec			: TMJSMsgRec;
	MasTreee2Dlg		: TJNTMasTreee2Dlgf;

	m_fAccessTab		: Boolean;
	m_fAccessTabJ		: Boolean;
	m_fAccessTabG		: Boolean;
	m_fAccessTree		: Boolean;
	m_stGCodeSave		: String;
	m_fEnd				: Integer;
	m_fChange			: Integer;
	m_fPrint			: Integer;
	m_fIS				: Integer;
	m_fDel				: Integer;
	m_fTreeClk			: Integer;
	m_stRecPaste		: ^TreeViewRec;					    // NodeDataｾｰﾌﾞ用
	m_cNodeRightClk		: TTreeNode;					    // 右ｸﾘｯｸNodeｾｰﾌﾞ
	giFusenSelectColorJ	: Integer;
	giFusenSelectColorG	: Integer;
	m_iRekiKbn			: Integer;
	m_iMailKbn			: Integer;
	m_iAccProKbn		: Integer;						    // 消費税区分

	m_bFieldFlg			: Boolean;

	giChkFlg			: Integer;
	gbHojyoTree2Flag	: Boolean;					        // 書き込みﾌﾗｸﾞ
	giCloseFlg			: Integer;
	gbHojyoTreeDelFlag	: Boolean;					        // 削除ﾌﾗｸﾞ
	giReferFlag			: Integer;					        // 参照ﾌﾗｸﾞ
	gbTreeClick			: Boolean;
	gstErrorStr			: String;					        // ﾌﾘｰｺｰﾄﾞ入力可能文字列


	m_HintRow_Jitu		: Integer;
	m_aCmnt_Gou			: array of FusenCmntRec;

	giAllCnt			: Integer;

//	cExcept				: TJNTMASExceptIF;
	m_bExFlg			: Boolean;					        // 排他制御ﾌﾗｸﾞ

	m_SearchInfo		: SearchInfoRec;			        // 検索対象分類情報

	m_fSystemClear		: Boolean;					        // 加算体系ｸﾘｱ
//	m_pExpModule		: ^TMjsExceptDbmf;			        // 排他制御

	m_bFirstFlag		: Boolean;					        // 初期処理ﾌﾗｸﾞ

	m_bModeChg			: Boolean;					        // False:ｺｰﾄﾞ入力 True:ﾃｷｽﾄ入力
    m_Zoom              : Integer;

	m_arAdoptInfo_Seg	: array [1..10] of AdoptInfo;
	m_arAdoptInfo_TBr	: array [1..10] of AdoptInfo;
	m_arAdoptInfo_SBr	: array [1..10] of AdoptInfo;

    //親Bplより
    m_CmpList	        : TList;
    B_Print             : TMSpeedButton;                    // <PRN>
    B_Syousai           : TMSpeedButton;
    B_Delete            : TMSpeedButton;
    B_Fusen             : TToolButton;
    B_FusenBar          : TToolBar;
    B_Search            : TMSpeedButton;                    // <105>
    MComboBox           : TMComboBox;                     	// <117>
    B_Change            : TMSpeedButton;
    B_ImportWF          : TMSpeedButton;                    // <WF>
    B_Sort				: TMSpeedButton;					// <202>
    B_SetUp				: TMSpeedButton;					// <KSN> ADD
    m_bBtnChange	    : Boolean;                          // 切出≪=≫埋込ﾌﾗｸﾞ<119>
	LblRecCnt           : TMLabel;							//<RCNT>

    m_cJNTArea          : TJNTCommon;

    CloseFlg	        : Boolean;
    m_EdtSw             : Boolean;                          // <130>編集ｽｲｯﾁ

    uvFncInfo           : urFncInfo;                        // <100>
	uvSelSys            : TJNTSelCorpSys;			        // 会社ｼｽﾃﾑ情報
    uvExpOpenSW         : Boolean;                          // ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ(True:OPEN False:CLOSE)
    uvWFExpOpenSW       : Boolean;                          // WF用ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ<WF>

    uvGYCodeAttr        : Integer;
    uvGYCodeDigit       : Integer;
    uvENDKAISU_T        : Integer;
    uvENDKAISU_S        : Integer;

    m_recSinseiKey      : TSinseiInfoKey;                   // 申請書情報ｷｰ<WF>
    m_recOther          : TWFOtherInfo;                     // 申請書情報の他ﾓｼﾞｭｰﾙ部分<WF>

    // ﾌﾘｰ項目対応<102>
    UpdFreeFlg			: Boolean;
    freeItem			: TJNTFreeRec;
    freeItemNull		: TJNTFreeRec;
    //↓<253>
    freeChgItem		    : TJNTFreeChgRec;
    freeChgItemNull		: TJNTFreeChgRec;
    //↑<253>

    // 得意先締日情報の制御 <103>
    uvData_Load         : TuvData_Load;        	            // 読み込み時の各データ
    uvChildFL           : Boolean;                          // 子存在フラグ(T:有、F:無)
    uvSeiKbn            : Integer;                          // 請求区分(0:通常、1:特殊、2:随時)
    uvChangeFL_Sime     : Boolean;                          // 通常得意先(締日)の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_T        : Boolean;                          // 特殊得意先へ    の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_Z        : Boolean;                          // 随時得意先へ    の変更可能フラグ(T:OK、F:NG)

    // 仕入先締日情報の制御 <103>
    uvData_Load_S       : TuvData_Load_S;        	        // 読み込み時の各データ
    uvChildFL_S         : Boolean;                          // 子存在フラグ(T:有、F:無)
    uvSeiKbn_S          : Integer;                          // 請求区分(0:通常、1:特殊、2:随時)
    uvChangeFL_Sime_S   : Boolean;                          // 通常仕入先(締日)の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_T_S      : Boolean;                          // 特殊仕入先へ    の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_Z_S      : Boolean;                          // 随時仕入先へ    の変更可能フラグ(T:OK、F:NG)
//↓<203>
    IsLeaseLicense      : Boolean;                          // リースのライセンス有無(T:有、F:無)
    uvChangeFL_Kounyu   : Boolean;                          // 資産購入先採用区分の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_Baikyaku : Boolean;                          // 資産売却先採用区分の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_Lease    : Boolean;                          // リース取引先採用区分の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_Crd      : Boolean;                          // 債権情報をチェック用得意先採用区分の変更可能フラグ(T:OK、F:NG)
    uvChangeFL_Pay      : Boolean;                          // 債務情報をチェック用仕入先採用区分の変更可能フラグ(T:OK、F:NG)
//↑<203>
    // 印刷制御 <PRN>
    uvHani              : TJNTHani;		                    // 範囲ﾀﾞｲｱﾛｸﾞ用ﾊﾟﾗﾒｰﾀ
    PrintAppEntry       : TPrintAppEntry;                   //
    ArrHdl              : Array[0..100] of Pointer;			// Lのﾌｫｰﾑﾎﾟｲﾝﾀの格納配列(Lに渡す)
    PrtParam		    : rcPrtParam;                       //
    DmqPrint            : TMQuery;                          // 印刷用ｸｴﾘｰ
    m_nCurrentCodeAttr  : Integer;                          // 取引先ｺｰﾄﾞ属性
    m_nCurrentCodeDigit : Integer;                          // 取引先ｺｰﾄﾞ桁数
    // <PRN>

    // ﾃﾝﾌﾟﾚｰﾄ情報保存用(得意先) <115>
	uvTmpKKBN1			: Extended;
	uvTmpKKBN2			: Extended;
	uvTmpCmt1			: String;
	uvTmpCmt2			: String;

    uvTmpURKINHSUKBN    : Integer;                          // 売上端数区分
    uvTmpGRUZSEIKBN     : Integer;                          // 現売税請求区分
    uvTmpZSEIKBN        : Integer;                          // 消費税請求区分
    uvTmpZHSUKBN        : Integer;                          // 消費税端数単位
    uvTmpZHSUTNIKBN     : Integer;                          // 消費税端数処理
    uvTmpTRIHIKIKBN     : Integer;                          // 取引区分
    uvTmpNMKBN          : Integer;                          // 名称変更区分
    uvTmpSSHCDKBN       : Integer;                          // 指定商品ｺｰﾄﾞ区分
    uvTmpSSHCDKET       : Integer;                          // 指定商品ｺｰﾄﾞ桁数
    uvTmpYYKBN          : Integer;                          // 和暦西暦区分
    uvTmpDAINMKBN       : Integer;                          // 代表者名の印字
    uvTmpUSDENPFM       : Integer;                          // 納品書ﾌｫｰﾑ
    uvTmpMITPFM         : Integer;                          // 見積書ﾌｫｰﾑ
    uvTmpJHDENPFM       : Integer;                          // 受注伝票ﾌｫｰﾑ
    uvTmpSNDENPFM       : Integer;                          // 出荷伝票ﾌｫｰﾑ
    uvTmpUSGKEI         : Integer;                          // 売上合計欄税印字
    uvTmpJYGKEI         : Integer;                          // 上代合計欄税印字
    uvTmpSOFOPFM        : Integer;                          // 送り状ﾌｫｰﾑ
    // 債権管理用
    uvTmpSSDENPFM       : Integer;                          // 請求書ﾌｫｰﾑ
    uvTmpSSGKEI         : Integer;                          // 請求書鏡欄税印字
    uvTmpBMCODE         : Extended;                         // 部門ｺｰﾄﾞ
    uvTmpTNCODE         : Extended;                         // 担当者ｺｰﾄﾞ
    uvTmpRYOPFM         : Integer;                          // 領収証ﾌｫｰﾑ
    uvTmpRYOTEKI        : Integer;                          // 領収証の但し書き
    uvTmpSYURYOKBN      : Integer;                          // 集金用領収証

    // ﾃﾝﾌﾟﾚｰﾄ情報保存用(仕入先) <115>
	uvTmpKKBN1_Si		: Extended;
	uvTmpKKBN2_Si		: Extended;
	uvTmpCmt1_Si		: String;
	uvTmpCmt2_Si		: String;

    uvTmpURKINHSUKBN_Si : Integer;
    uvTmpGRUZSEIKBN_Si  : Integer;
    uvTmpZSEIKBN_Si     : Integer;
    uvTmpZHSUKBN_Si     : Integer;
    uvTmpZHSUTNIKBN_Si  : Integer;
    uvTmpTRIHIKIKBN_Si  : Integer;
    uvTmpNMKBN_Si       : Integer;
    uvTmpSSHCDKBN_Si    : Integer;
    uvTmpSSHCDKET_Si    : Integer;
    uvTmpYYKBN_Si       : Integer;
    uvTmpDAINMKBN_Si    : Integer;
    uvTmpUSDENPFM_Si    : Integer;
    uvTmpJHDENPFM_Si    : Integer;
    uvTmpSNDENPFM_Si    : Integer;
    uvTmpUSGKEI_Si      : Integer;
    // 債務管理用
    uvTmpSSDENPFM_Si    : Integer;
    uvTmpSSGKEI_Si      : Integer;
    uvTmpBMCODE_Si      : Extended;
    uvTmpTNCODE_Si      : Extended;
    m_TantoNCode        : Extended;
//    uvSyokuchiKbn       : Integer;
    uvSLicense          : Boolean;          // <160> 資産ﾗｲｾﾝｽﾁｪｯｸ
    m_stPrintDstData    : PrintDstData;     // <161>
    m_NewRecord		    : Boolean;          // <165>
	m_WFSw				: Boolean;			// <194>
    m_AddressRec        : TAddressRec;      // <207>
	m_SisanSaiyoRec		: TSisanSaiyoRec;	// <2226>
    m_SyncMaster        : TSyncMaster;      // <Rel> ﾏｽﾀ同期基本ｸﾗｽ

//↓<139>
	uvTmpTnkRnk			: Integer;
	uvTmpTnkRnk_Si		: Integer;
	uvTmpKakeRt			: Extended;
	uvTmpKakeRt_Si		: Extended;
//↑<139>

//<1719> Upd-s
	// 工事伝票上表保存用(得意先)
	uvTmpKUSGKei		: Integer;							// 工事合計欄印字
	uvTmpKUSDenPfm		: Integer;							// 工事売上伝票ﾌｫｰﾑ
	uvTmpKMitPfm		: Integer;							// 工事見積伝票ﾌｫｰﾑ
	uvTmpKJHDenPfm		: Integer;							// 工事受注伝票ﾌｫｰﾑ

	// 工事伝票上表保存用(仕入先)
	uvTmpKUSGKei_Si		: Integer;							// 工事合計欄印字
	uvTmpKUSDenPfm_Si	: Integer;							// 工事原価伝票ﾌｫｰﾑ
	uvTmpKMitPfm_Si		: Integer;							// 工事見積伝票ﾌｫｰﾑ
	uvTmpKJHDenPfm_Si	: Integer;							// 工事発注伝票ﾌｫｰﾑ
//<1719> Upd-e

// <238> ADD-STR
    uvTmpLetterKbn      : Integer;                          // 支払通知書区分
    uvTmpGensenUseKbn   : Integer;                          // 預かり源泉税採用区分
    uvTmpPersonKbn      : Integer;                          // 個人／法人区分
// <238> ADD-END

//↓<230>
	m_TStartDate		: TDateTime;
	m_TEndDate			: TDateTime;
//↑<230>

    m_SELCSTM_TBL		: TSELCSTM_TBLRec; //<MJUP>
//    m_Log           : TLog_Writer;  //*Log*
    m_bNotStored : Boolean;  //<256> ADD  チェック用ストアド呼び出し判定

//↓<2257	>
	uvCopyMtokui			: boolean;									//取引先コピー用フラグ
	uvBeforeNCode			: Extended;									//コピー元NCode
	m_arMTOKUI_COPY			: array[TTorihikiBunrui] of MTOKUI_COPY;	//取引先コピー住所系変更チェック用構造体
	m_MTOKUI_ORG			: MTOKUI_ORG;								//取引先基本情報用構造体
//↑<2257>
    m_RepHandle			: THandle;                          // 印刷モジュールハンドル <261>
//<KSN> ADD St
    m_bRead             : Boolean;
    m_bShowStart        : Boolean;
    m_HojyoTree_Drag : TDragData;     // 加算データ(ドラッグ用)
	m_DragCtlName	: TComponentName; // ドラッグ開始時のコンポーネント
    // 検索関連
    m_NCodeArray : array of Extended;
    m_SrchMTokui : TMTokui;

    m_APGFILE    : TJNTCRP004001APG;
    m_iStartMode : Integer;
    m_sComputerName : string;
//<KSN> ADD Ed
    m_sSaveValue : string;       //<502_001> ADD
    m_JNTAuthority : TJNTAuthority;  //<Authority> ADD

// <MYN> ins -s
// <MYN14> upd -s
//	m_MYNAcc 			: TMYNAccess;
// <MYN18> upd -s
//	m_MYNAcc 			: TMYNAccess3;
	m_MYNAcc 			: TMYNAccessIf;
// <MYN18> upd -e
// <MYN14> upd -e
    m_iAccType 			: Smallint;

    // フラグ
	m_MaskCancel		: Boolean;		// マスク解除中
	m_MaskCancelFirst	: Boolean;		// 一度もマスク解除していない
	m_MaskCancelClick	: Boolean;		// マスク解除押下中

	m_KbnEnter			: Boolean;    	// 区分にEnter中
	m_KbnEnterFirst		: Boolean;   	// 一度も区分にEnterしていない

	m_CodeReturn		: Boolean;    	// コードからEnterキー押下 <MYN2>

	m_bOutInputFlg		: Boolean; 		// 個人番号登録が変更された	<MYN5> ⇒ 個人番号ダイアログでOKが押された<MYN20>

	m_iEdgeFlag			: Integer;		//Edge Tracker使用フラグ(0:未使用、1:使用)<Edge>

	// 保存用
	m_sSaveKojinKey		: String;		// 個人キー
	m_sSaveKojinNo  	: String;       // 個人番号
	m_sSaveKojinNoDummy	: String;       // 個人番号ダミー
	m_sSaveHoujinNo 	: String;       // 法人番号

    m_sSaveValueCode 	: String;		// 取引先コード
    m_sSaveValueMYNKbn 	: String;     	// 法人･個人区分
// <MYN> ins -e
	m_bPanelKojin      	: Boolean;   	// <MYN11>マイナンバー個人パネル表示

    m_Wf_HENKO          : Boolean;      // WF変更申請書 <2610> Add

    function  fnGetNCODE(pCODE : String; pMKBN, pAttr : Integer):Extended;
    function  fnGetGCODE(pCODE : Extended; pMKBN: Integer): String;
    Function  fnGetNAME(pCODE : String; pMKBN, pAttr : Integer; var RName : String ):Boolean;
    procedure fnCompVisible(pFlg : Boolean);
    procedure fnSeiKbn_EntryControl;
    procedure fnSeiKbn_EntryControl_SI;
    function  fnChildCount(pNCode : Extended): Boolean;
//    procedure fnProcess_EnableJudge(pNCODE : Extended; pTKBN, pSKBN : Integer); <173>
    procedure fnProcess_EnableJudge(pNCODE : Extended; pTKBN, pTOFlg, pSKBN, pSOFlg : Integer);
    procedure fnSeiKbn_EnableControl(nType : Integer; bSime, bToku, bZui : Boolean);

    procedure fnDep_EnableJudge(pNCODE : Extended);

    procedure fnSetEnabled(nBol: Boolean);  // 画面のEnabled制御<117>
    procedure fnPrnSETShosaiJ();
	procedure fnPrintCheckListSegBun();
    procedure fnPrintCheckListTtlStandard();            // <161>
    procedure fnPrintCheckListSystem();                 // <161>
	procedure fnSetSystemRecords();                     // <161>
    procedure fnSetSystemRecord(dqMasterData: TMQuery); // <161>
    function  fnGetLastFLD():String;                    // <150>
    procedure fnCngCodeProperty(pExp:Boolean);          // <156>
    function  fnDelCheck(exNCode: Extended; var strErr: String): Boolean;   // <168>
    function  fnSime_DataCheck: TWinControl;			// <189>

	function  fnMTOKUI_Chk(strGCode: String; iSumKbn: Integer): Integer;	//<194>

	function  fnChkMtokui_Others(sMasNm:string):Boolean; //<212>

    function  fnCorpRelation(pExCode: String; pSumKbn: Integer): Integer;     // <Rel>

	procedure SessionPractice(iSyori: Integer); // <MHIS> ADD ｾｯｼｮﾝ管理ｽﾄｱﾄﾞのﾊﾟﾗﾒｰﾀ追加
//↓<223>
    function fnGetSumKbn(pNCode:Extended; var pSumKbn:Integer):Boolean;
    function fnExistsSouGoukei(pNCode:Extended):Boolean;
    procedure fnChgCmpEna(pEna: Boolean; pCMP: TObject;
                pSub1: TObject = nil; pSub2: TObject = nil);
    function fnFldChk(Sender: TObject; AllChkMode: Boolean): Boolean;
//↑<223>
//↓<226>
    function fnSetZSeiKbn_Sel(pKBN: Integer): Boolean;
//<245>    Function fnChkMtokui_Sel(pKBN:Integer; var rTUpd: Boolean; var rSUpd: Boolean):Boolean;
    Function fnChkMtokui_Sel(pKBN:Integer; var rTUpd: Boolean; var rSUpd: Boolean; var rTnNCd: Extended; var rBmNCd: Extended):Boolean; //<245>
//↑<226>

//↓<244>
    procedure fnGetMaster(pCODE : Extended; var sGCode:string; var sNmk: string; var iRDelKbn: Integer); // Add
    function fnShinToFld(pVal: string): string; overload;
    function fnShinToFld(pVal: Integer): Integer; overload;
    function fnShinToFld(pVal: Extended): Extended; overload;
    function fnShinToFld(pVal: Int64): Int64; overload;
    function fnShinToFldDouble(pVal: Double): Double;
    function fnShinToFldDateTime(pVal: TDateTime): TDateTime;
	function fnFreeItemGetRec(eNCode: Extended): TJNTFreeRec;
//↑<244>

	procedure fnGetAllKbn(); //<MJUP>

	procedure fnSetFncTypeSelect();			// <2257>

	procedure WMImportWF(var msg: TMessage); message WM_IMPORTWF; //<Gali2235>

    function    fnCheckMasterTreeInsertValidStr (strExCodeSrc, strExCodeDst: String): Boolean; //<239> ADD
//<240> ADD St
    procedure   fnUpdateTreeViewItemsEx         (cNodeSrc, cNodeSrcParent, cNodeDst, cNodeDstParent: TTreeNode);
    procedure   fnInsertTreeViewItemsEx         (cNodeTarget: TTreeNode; strExCode: String; nDivision: Integer);
	function    MakeDspString                   (CODE: String; NAME: String):String;
	procedure	fnEraseTreeViewItems			(cNodeTarget: TTreeNode);
	procedure	fnDeleteTreeViewItems			(strExCode: String);
//<240> ADD Ed
    function    IsSyosaiMode():Boolean;  //<256> ADD

//<KSN> ADD St
    function  IsLimitCount():Boolean;
    function  fnRead():Boolean;
    function  IsRead():Boolean;
    function  GetStartMode():Integer;
    procedure SetStartMode(Value:Integer);
    procedure Read_ON();
    procedure Read_OFF();
    procedure ShowDLG(Mode:Integer;var iRet:Integer);
    procedure ShowExplorer(Send_Exp:TSend_Exp;var Rcv_Exp:TRcv_Exp);
    procedure QueryDispose(var Qry:TMQuery);
    procedure SetGuidance(Value:string);
    procedure GuidanceClear();
    // 得意先マスタ関連
    function fnMTokui_Count(SumKbn:Integer=-1):Integer;
    function fnMTokui_GetGoukei():TMQuery;
    function fnMTokui_GetJitsuzai():TMQuery;
    function fnMTokui_Get(iSumKbn:Integer):TMQuery; overload;
    function fnMTokui_Get(GCode:String;NCode:Extended):TMTokui; overload;
    function fnMTokui_CodeEdit(sGCode:String):String;
    function fnMTokui_GetData(GCode:String):TMTokui; overload;
    function fnMTokui_GetData(NCode:Extended):TMTokui; overload;
    // 加算先マスタ関連
    function fnKasan_Count(SumNCode:Extended=-1):Integer;
    function fnKasan_GetMaxEntNo(SumNCode:Extended):Integer;
    function fnKasan_GetMinEntNo(SumNCode:Extended):Integer;
    function fnKasan_GetEntNo(SumNCode:Extended;iGetKbn:Integer):Integer;
    function fnKasan_GetChild(SumNCode:Extended;iOrder:Integer=ORDER_ASC):TMQuery;
    function fnKasan_GetParent(BasedNCode:Extended;iOrder:Integer=ORDER_ASC):TMQuery;
    function fnKasan_Get(iNCode:Extended;iSumKbn:Integer;iOrder:Integer=ORDER_ASC):TMQuery;
//<KSN4> MOD St
//    procedure fnKasan_Update(HojyoTree:THojyoTree;bIns : Boolean);
    function fnKasan_Update(HojyoTree:THojyoTree;bIns : Boolean; pQry: TMQuery = nil): Boolean;
    procedure fnKasan_UpdateExecute(HojyoTree:THojyoTree);
//<KSN4> MOD Ed
    function fnKasan_ResetEntNo(PatternNo:Integer;SumNCode:Extended):Boolean;
//<KSN4> DEL    procedure fnKasan_Delete(HojyoTree:THojyoTree);
    function fnKasan_Delete(HojyoTree:THojyoTree; pQry: TMQuery = nil): Boolean;  //<KSN4> ADD
    function fnKasan_GetData(BasedNCode,SumNCode:Extended):THojyoTree;
    function fnKasan_EXISTS(MasterKbn,PatternNo,EntNo:Integer;SumNCode:Extended):Boolean;
    function fnKasan_Sort(Prog:TProgressBar;SumNCode:Extended=-1):Boolean;
    function fnKasan_Search(SumNCode:Extended):Boolean;
    procedure fnKasan_InsValidation(HojyoTree:THojyoTree;var ErrMsg:String);
    procedure fnKasan_DelValidation(HojyoTree:THojyoTree;var ErrMsg:String);

    procedure TreeView_Kasan_Create(NCode:Extended;iSumKbn:Integer=0);
    procedure MemData_EventCtrl(Mem:TdxMemData;bSet:Boolean);
    procedure DBGrid_EventCtrl(DBGrid:TdxDBGrid;bSet:Boolean);
    procedure TreeView_EventCtrl(TreeView:TMTreeView;bSet:Boolean);
    procedure Kasan_CreateChildGrid(SumNCode : Extended);
    procedure Kasan_CreateParentGrid();
    procedure Kasan_CreateSearchParent();
//<KSN> ADD Ed
//<502_001> ADD St
    function ChangeSaiyoEnabled(SaiyoKbn : Integer;GCode:string;var ErrMsg:string):Boolean;
    function SaiyoCheck(Sender:TObject):Boolean;
    procedure TagSet_Saiyo(Saiyokbn:integer=-1);
    procedure TagSet_SaiyoTokui(Kbn:integer);
    procedure TagSet_SaiyoShiire(Kbn:integer);
    procedure TagSet_SaiyoKounyu(Kbn:integer);
    procedure TagSet_SaiyoBaikyaku(Kbn:integer);
    procedure TagSet_SaiyoLease(Kbn:integer);
    procedure TagClear_Saiyo(SaiyoKbn:integer=-1);
    function SaiyoCheckCmpFlg(SaiyoKbn:integer=-1):Boolean;
//<502_001> ADD Ed
//<KSN4> ADD St
    function GetKasanUpdate(): Boolean;
    property KasanUpdate : Boolean read GetKasanUpdate;
//<KSN4> ADD Ed

// <MYN> ins -s
	function	fnClearMYN(): Boolean;
	function	fnSetMYN(pKBN: String): Boolean;
	function	fnMaskDsp(pFlg: Boolean): Boolean;
	function	fnKojinUpdDsp(pFlg: Boolean): Boolean;	// <MYN6>

	function 	fnExistKojinNo(pKey: String): String;
	function	fnSelectKojinNo(pKey: String): String;
	function 	fnGetHoujinNo(pNo: String): String;

	function	fnInsertMYN(): String;
// <MYN> ins -e
	function 	fnCheckCorpNum(sCorpNum:String): Boolean;	//<MYN15>
	function 	fnCheckKojinKey(pKey, pNm: String; var sTopNm: String): Boolean;	//<MYN17>
	function 	fnGetPost(): String;	// <MYN20>
  public
	{ Public 宣言 }
	constructor CreateForm(pRec: Pointer);

//	procedure WMSetFocus(var Msg: TWMSetFocus); message WM_SETFOCUS;
	procedure CMChildKey(var Msg: TWMKey); message CM_CHILDKEY;
    procedure fnSetFncType(pKBN:Integer);
    procedure fnFreeDlg(nFunc: Integer);
	function 	fnforcedlyUpdAddress			(pTBL:string;pKBN:Integer=0):Boolean;	//<2226>

	procedure	fnSetFldCopy();	//<2257>取引先コピー

	function  fnchkSystemRec(pCode:Extended):Integer;	//<3135>

  end;

const
	// ﾍﾟｰｼﾞﾃﾞﾌｧｲﾝ
	PAGE_JITUZAI	= 0;
	PAGE_GOKEI		= 1;
	PAGE_KASAN		= 2;  //<KSN> ADD

	PAGE_KIHON		= 0;
	PAGE_Saiyo		= 1;
	PAGE_Seg		= 2;
	PAGE_Br  		= 3;

	// ｶﾗﾑﾃﾞﾌｧｲﾝ
	COL_FUSEN		= 0;
	COL_GCODE		= 1;
	COL_REN			= 2;
	COL_L_NAME		= 3;
	COL_S_NAME		= 4;
    COL_TOKUI       = 5;                    // <140>得意先採用ｶﾗﾑ
    COL_SIIRE       = 6;                    // <140>仕入先採用ｶﾗﾑ
    COL_SHOJYO1     = 7;                    // <158>資産購入先ｶﾗﾑ
    COL_SHOJYO2     = 8;                    // <158>資産売却先ｶﾗﾑ
	COL_SHOJYO3		= 9;					// <195>リース取引先カラム


	COL_KEINEN		= 0;
	COL_KEINO		= 1;
	COL_KEIKIN		= 2;
	COL_ZEIRITU		= 3;
	COL_ZEIRITUNAME	= 4;
	COL_ZEIGAKU		= 5;

	COL_YOTEIBI		= 0;
	COL_YOTEIGAKU	= 1;

	// ﾌｾﾝﾃﾞﾌｧｲﾝ
	RED				= 1;
	GREEN			= 2;
	BLUE			= 3;
	ORANGE			= 4;
	NOCOLOR			= 99;

	// ﾂﾘｰｱｲｺﾝﾃﾞﾌｧｲﾝ
	IC_JCLOSE		= 0;
	IC_JOPEN		= 1;
	IC_GMCLOSE		= 2;
	IC_GMOPEN		= 3;

	// ﾌｨｰﾙﾄﾞ判定
	KOJI			= 1;
	BUMON			= 2;
	SHAIN			= 3;
	TORIHIKI		= 4;
	KAMOKU			= 5;
	KOUSYU			= 6;

	// 印刷用
	JITUZAIKANI		= 1;		                            // 実在簡易
	JITUZAISHOSAI	= 2;		                            // 実在詳細
	GOUKEIKANI		= 3;		                            // 合計簡易
	GOUKEISHOSAI	= 4;		                            // 合計詳細

	CODEORDER		= 1;		                            // ｺｰﾄﾞ順
	RENSOUORDER		= 2;		                            // 連想順

	// ﾃｰﾌﾞﾙ番号
	TBL_HOJYOMA		= 111;
	TBL_HOJYOTREE	= 199;
	TBL_MASTERINFO	= 10;

	// 参照ﾌﾗｸﾞ時に使用
	NORMAL			= 1;		                            // 通常処理
	BASICONLY		= 2;		                            // 基本のみ設定可能(詳細ﾎﾞﾀﾝ使用不可)
	REFER			= 3;		                            // 参照

	sRoot	: array[0..1] of String = ('通常','名寄せ親');
	MASTER_SEGMENT_Str = 101;								// ｾｸﾞﾒﾝﾄの開始範囲
	MASTER_SEGMENT_End = 110;								// ｾｸﾞﾒﾝﾄの終了範囲

	MASTER_TBunrui_Str = 411;								// 得意先分類の開始範囲
	MASTER_TBunrui_End = 420;								// 得意先分類の終了範囲

	MASTER_SBunrui_Str = 421;								// 仕入先分類の開始範囲
	MASTER_SBunrui_End = 430;								// 仕入先分類の終了範囲
//<226> ↓
	MASTER_CurrKBN     = 9001;								// 通貨区分
//<226> ↑

    // <WF>申請書の仕訳入力形式
    SWKFORM_TOKUI   = 9;                  // 得意先登録申請書<235>4001 → 9
    SWKFORM_SIIRE   = 10;                 // 仕入先登録申請書<235>4002 → 10
//↓<244>
    SWKFORM_TOKUI_HENKO   = 61;                 // 得意先変更申請書
    SWKFORM_SIIRE_HENKO   = 62;                 // 仕入先変更申請書
//↑<244>
    // <WF>取込時のｴﾗｰﾒｯｾｰｼﾞ
    MSG_WF_INPUTERR = '申請書情報に誤りがある為登録できません。';

    // <140>ｸﾞﾘｯﾄﾞで採用変更時
//<501_001> DEL    MSG_SAIYO_CHANGEERR = '伝票または実績データが存在しているため、採用区分は変更できません。';
    MSG_SAIYO_CHANGEERR = '伝票または実績データが存在しているかまたは名寄せ情報が登録されているため、採用区分を変更できません。';  //<501_001> ADD
//↓<203>
    MSG_SAIYO_CHANGEERR_CRD = '債権管理で使用中のため、採用区分は変更できません。';
    MSG_SAIYO_CHANGEERR_PAY = '債務管理で使用中のため、採用区分は変更できません。';
    MSG_SAIYO_CHANGEERR_DEP = '資産管理で使用中のため、採用区分は変更できません。';
//↑<203>

	//<193>締日登録警告メッセージ
	MSG_W_AFTER_CLOSINGDAY = '締日より後の日付を入力してください。';
	MSG_W_DAY_RANGE        = 'は1～31の間で入力してください。';

	// -----<MHIS> Add-St-----
	C_ST_PROCESS	= 0;				// 設定
	C_ED_PROCESS	= 1;				// 開放
	// -----<MHIS> Add-Ed-----
//<226> ↓
    ucCstM_CTR: array [1..2] of String = ('国内','国外');
//<226> ↑

//<KSN> ADD St
    GCODE_LENGTH = 16;
    LIMIT_COUNT = 10000;
//<502_0004> DEL    LIMIT_TREE_COUNT = 65536;  // TreeViewの限界  65536
    LIMIT_TREE_COUNT = 65535;  // TreeViewの限界  (65535 + 1(トップノード))
    KBNSAIYO = 19;
    INFO_MSG = '%sが、%s件以上登録されています。' +
                #13#10 +
               '集計に時間がかかるため、一覧表示の集計は行わず、' +
                #13#10 +
               '詳細画面での起動をしますか？';


    KBN_MIN = 0;
    KBN_MAX = 1;

    INFO_SORTMSG = '全てのマスタの並び替えを行います。' +
                    #13#10 +
                    'よろしいですか？'+
                    #13#10 +
                    #13#10 +
                    '全て…　　　　 全てのマスタの並び替えを行います。' +
                    #13#10 +
                    #13#10 +
                    '選択内…　　　今選択されている、%s内で' +
                    #13#10 +
                    '　　　　　　　　　並び替えを行います。' +
                    #13#10 +
                    #13#10 +
                    'キャンセル… 並び替えを行いません。';
//<KSN> ADD Ed
//<502_001> ADD St
    // 採用フラグチェック区分
    S_NOCHECK   = 0;
    S_TOKUI     = 1;
    S_SHIIRE    = 2;
    S_KOUNYU    = 3;
    S_BAIKYAKU  = 4;
    S_LEASE     = 5;

    S_CHKMSG = '採用区分をチェック中・・・';
    S_CHKCMP = '採用区分のチェックが完了しました。';
//<502_001> ADD Ed

// <MYN> ins -s
	// 法人･個人区分
    MYN_HOUJIN 	= '0';	// 法人
    MYN_KOJIN 	= '1'; 	// 個人
// <MYN> ins -e


function AppEntry(pParam:Pointer)	: Integer;
exports
	AppEntry;


implementation
{$I JNTMASFUSENBIKODLGIFB.inc}
{$I JNTMasCommonFuncB.inc}
{$I JNTMASERRORCODECHECK.INC}
{$I JNTMasExceptIFB.inc}
{$I JNTMASSEARCHDLGIFB.inc}
{$I JNTConst.inc}                           // <131>
{$I ETYMasterSinseiExgIFB.inc}              // <WF>
//↓<Rel>
{$include JNTCRPSyncMasterB.inc}            // ﾏｽﾀ同期共通実装部
{$include JNTMTOKUI_Sync.INC}
//↑<Rel>

{$include JNTSelFncB.inc}

{$include JNTCRPFreeDlgB.inc} //<253>

  {$include JNTCRP004001CONST.inc}            // <256> ADD
{$include TableMasterB.inc} //<KSN> ADD
//{$I Log_Writer_2.inc}  //*Log*

{$R *.DFM}
// <MYN16> upd -s
//{$I MYNInpDlgIFB.inc }		// <MYN>
// <MYN18> upd -s
//{$I MYNInpDlgIF3B.inc }
{$I MYNInpDlgIFIfB.inc }
// <MYN18> upd -e
// <MYN16> upd -e
{$I MJSCorpNumExpIFB.inc }	// <MYN>

var
    uvNCODE      : Extended;
//<226> ↓
    uvEnaHOUEI: Boolean;
    uvChgCOUNTRY: Boolean;
    uvChgCurrency: Boolean;
    uvTmpCOUNTRY: Integer = 1;  //国内外区分 <226>ﾃﾝﾌﾟﾚｰﾄ取得の予定だったが、基本情報にﾃﾝﾌﾟﾚｰﾄ設定がないので、1固定とする
//<226> ↑

Const ucTORIHIKI = 22;
Const ucGYOSYU   = 91;

{$include SelgfnValidDate.inc} //<KAIGG3>

//**************************************************************************
//	Proccess	:	外部ﾌﾟﾛｸﾞﾗﾑからのｴﾝﾄﾘﾎﾟｲﾝﾄ
//	Name		:	unknown
//	Date		:	2000/ 08 / 09
//	Parameter	:	pParam	Pointer
//	Retrun		:	result
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function AppEntry(pParam: Pointer): Integer;
var
	pMyForm	:	^TJNTCRP004001f;
	pRec    :	^TMjsAppRecord;
begin
	result	:= ACTID_RET_OK;
	pRec	:= Pointer(TAppParam(pParam^).pRecord);

	case TAppParam(pParam^).iAction of

		ACTID_FORMCREATESTART:							// ﾌｫｰﾑの作成要求（作成のみ）
		begin
			new (pMyForm);
			try
				pMyForm^:= TJNTCRP004001f.CreateForm(pParam);
				pRec^.m_pChildForm := pMyForm;
			except
				Dispose(pMyForm);
				result	:= ACTID_RET_NG;
			end;
		end;

		ACTID_FORMCREATESHOWSTART:						// ﾌｫｰﾑの作成要求（作成&表示）
		begin
			new (pMyForm);
			try
				pMyForm^ := TJNTCRP004001f.CreateForm(pRec);
				pMyForm^.Show;
//				pMyForm^.SetFocus();
				pRec^.m_pChildForm := pMyForm;
			except
				Dispose(pMyForm);
				result	:= ACTID_RET_NG;
			end;
		end;

		ACTID_FORMCLOSESTART:							// ﾌｫｰﾑの解放要求
		begin
			pMyForm	:= Pointer(pRec^.m_pChildForm);
			pMyForm^.Close();
			pMyForm^.Free();
			Dispose(pMyForm);
		end;

		ACTID_FORMCANCLOSESTART:						// ﾌｫｰﾑの解放直前要求
		begin
			pMyForm	:= Pointer(pRec^.m_pChildForm);
			if pMyForm^.CloseQuery = False then
				result	:= ACTID_RET_NG;
		end;

		ACTID_SHOWSTART:								// ﾌｫｰﾑの表示要求
		begin
			pMyForm	:= Pointer(pRec^.m_pChildForm);
			pMyForm^.Show();
//			pMyForm^.SetFocus();
		end;

		ACTID_HIDESTART:
		begin
			pMyForm := Pointer( pRec^.m_pChildForm );

			if pMyForm^.Parent <> nil then
			begin
				pMyForm^.Hide;
			end;
		end;
	end;
end;


//**************************************************************************
//	Proccess	:	ﾌｫｰﾑｺﾝｽﾄﾗｸﾄ
//	Name		:	unknown
//	Date		:	2000/ 08 / 09
//	Parameter	:	pRec	Pointer
//	Retrun		:
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
constructor TJNTCRP004001f.CreateForm(pRec: Pointer);
var
	DmqData		:	TMQuery;
	sTanName	:	String;		                            // 担当者名
	sMessage	:	String;
	iRet      	: 	Integer;	// <MYN>
begin
	// 初期処理
	sTanName		:=  '';			                        // 担当者名
    m_NewRecord		:=  FALSE;                              // <165>
	m_WFSw			:=	False;								// <194>

	m_pMyAppRecord	:= Pointer      (TAppParam(pRec^).pRecord);
	MDataModule	    := TMDataModulef(m_pMyAppRecord^.m_pDBModule^);
	ComArea  	    := TJNTMASCom   (m_pMyAppRecord^.m_pSystemArea^);

//m_Log := TLog_Writer.Init(0,rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot);  //*Log*
    m_TantoNCode := rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;  //<128>

    // 親からの情報を受け取る
    m_CmpList       := TList(TAppParam( pRec^ ).pActionParam^);

    // 郵便番号辞書 初期化
	if fnCMNPostInit(m_pMyAppRecord) <> 0 then
	begin
		raise EMathError.Create('郵便番号辞書の初期化に失敗しました｡');
		Exit;
	end;

	// DBOpen
	dbCorp_Select := MDataModule.COPDBOpen(1, m_pMyAppRecord.m_iCorpID);

	if dbCorp_Select = nil then
	begin
		raise Exception.Create('');
		Exit;
	end;

	DmqData := TMQuery.Create(Self);					    // MQueryの構築
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, DmqData);	// DBとMQueryの接続
	gfnJNTSELSetDbName(DmqData, dbCorp_Select);		//<D10>

	// CTLDBOpen
	CTRL_DB	:= MDataModule.CTLDBOpen(0);

	if CTRL_DB = nil then
	begin
		ShowMessage('エラー');
		raise EMathError.Create('エラー');
	end;

	DmqCtrlDb := TMQuery.Create(Self);		 		        // MQueryの構築
//<D10>MDataModule.SetDBInfoToQuery(CTRL_DB, DmqCtrlDb);		// DBとMQueryの接続
	gfnJNTSELSetDbName(DmqCtrlDb, CTRL_DB);		//<D10>

//↓<Gali2258>FormCreateから移動
    m_cJNTArea           := TJNTCommon   ( m_CmpList.Items[8]^ );   // <106>
    m_Base_pRec          := Pointer      ( m_CmpList.Items[9]^ );   // <107>

	m_cJNTArea.setSelAppRecord;
//↑<Gali2258>

	// 会社別ｼｽﾃﾑ情報の初期化
    try
        uvSelSys := nil;
	    uvSelSys := TJNTSelCorpSys.Create(Self);
        if uvSelSys = nil then
            Abort;

//<Gali2258>if uvSelSys.CreateSysMsg(m_pMyAppRecord) <> 0 then
    	if uvSelSys.CreateSysMsg(m_Base_pRec) <> 0 then //<Gali2258>
            Abort;
    except
		MjsMessageBox(Self,'ｼｽﾃﾑ情報の初期化に失敗です。', mjError, mjDefOk);
        raise;
    end;

  	m_cJNTArea.setMasAppRecord; //<Gali2258>

    // 会社別ｼｽﾃﾑ情報読み込み<PRN>
    try
    	if (uvSelSys.CreateSysInfo(dbCorp_Select) <> 0) then
            Abort;
    except
        MjsMessageBox(Self,'ｼｽﾃﾑ情報が取得できませんでした。', mjError, mjDefOk);
        raise;
    end;

// <143>↓
	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD,
                            True,1));
	DmqData.SetFld('TANCD').AsFloat := rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;

	if (DmqData.ExecSQL  = False) then
	begin
//		sMessage	:=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
//<Gali2258-2>showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
//↓<Gali2258-2>第1引数はフォームができていないため渡せないので、nilとしておく。
		ComArea.m_MsgStd.GetMsgDB(MjsMsgRec, DmqData);
		MjsMessageBoxEx(nil, 'ストアド「MP200010」の実行でエラー。' + #13#10 + MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, FALSE);
//↑<Gali2258-2>
	end;
	DmqData.Close;
	DmqData.Free;

{
	//	共通ﾒﾓﾘﾎﾟｲﾝﾀの担当者内部ｺｰﾄﾞ
    iTanCD   := 0;
	sTanName :=	'';

	if (rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD <> -1) then
	begin
		DmqCtrlDb.Close;
		DmqCtrlDb.SQL.Clear;
		DmqCtrlDb.SQL.Add('SELECT '				);
		DmqCtrlDb.SQL.Add(	'Name, '			);		//	担当者名
		DmqCtrlDb.SQL.Add(	'TantoGCD '			);		//	担当者ｺｰﾄﾞ
		DmqCtrlDb.SQL.Add('FROM '				);
		DmqCtrlDb.SQL.Add(	'MOS_OFFICE_STAFF '	);
		DmqCtrlDb.SQL.Add('WHERE '				);
		DmqCtrlDb.SQL.Add(	'TantoNCD = :NCode'	);		//	担当者内部ｺｰﾄﾞ
		DmqCtrlDb.ParamByName('NCode').AsInteger	:=	rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;
		DmqCtrlDb.Open;
		if (DmqCtrlDb.Eof <> True) then
		begin
			iTanCD		:=	DmqCtrlDb.GetFLD('TantoGCD').AsInteger;
			sTanName	:=	DmqCtrlDb.GetFLD('Name'	   ).AsString;
		end;
		bFlag	:=	True;
	end;

	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(iTanCD,sTanName,bFlag,1));
	if (bFlag) then		//	担当者選択なし
	begin
		DmqData.SetFld('TANCD').AsInteger := iTanCD;
		DmqData.SetFld('TANNAME').AsString := sTanName;
	end;
	if (DmqData.ExecSQL  = False) then
	begin
//		sMessage	:=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(0,'',False,2));
	if (DmqData.ExecSQL  = False) then
	begin
//		sMessage	:=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(0,'',False,3));
	if (DmqData.ExecSQL  = False) then
	begin
//		sMessage	:=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	DmqData.Close;
	DmqData.Free;
}
// <143>↑

// <MYN> ins -s
	// マイナンバー初期処理
	m_iAccType	:= MYNACCESS_TYPE_NONE;
    m_bPanelKojin	:= True;	// <MYN11>個人ボタンパネル表示　Create前なので直接パネルは使えないのでフラグにする。

// <MYN14> upd -s
//	m_MYNAcc	:= TMYNAccess.Create;
// <MYN18> upd -s
//	m_MYNAcc	:= TMYNAccess3.Create;
	m_MYNAcc	:= TMYNAccessIf.Create;
// <MYN18> upd -e
// <MYN14> upd -e

    iRet		:= m_MYNAcc.Init(m_pMyAppRecord^.m_pCommonArea, m_pMyAppRecord.m_iSystemCode, m_pMyAppRecord.m_iOptionCode,
	   				  			 m_pMyAppRecord.m_iProgramCode, m_pMyAppRecord^.m_pDBModule, dbCorp_Select);
	if (iRet <> MYNACCESS_SUCCESS) then
	begin
// <MYN3> ins -s
		if (iRet <> MYNACCESS_NOKANRI) then	// -9:マイナンバー管理なし・受託なしエラー
		begin
// <MYN3> ins -e
// <MYN12> ins -s
			// AccTypeDBはInit関数でエラー終了する場合でも、DB値が設定される（0:参照不可、1:参照のみ、2:参照・更新可）
			if (m_MYNAcc.AccTypeDB <> MYNACCESS_TYPE_NONE) then	// 担当者マイナンバーアクセス権限参照不可以外の場合、メッセージ表示
			begin
// <MYN12> ins -e
	    	// 失敗
// <MYN20> upd -s
//		        if (MjsMessageBoxEx(nil, 'マイナンバーシステムの初期処理に失敗しました。（' + IntToStr(iRet) + '）' + #13#10 +
		        if (MjsMessageBoxEx(nil, 'MJSマイナンバーの初期処理に失敗しました。（' + IntToStr(iRet) + '）' + #13#10 +
// <MYN20> upd -e
										 '取引先登録を継続しますか？', '警告', mjWarning, mjYesNo, mjDefNO) = mrYES ) then
		        begin
		            // 「はい」の場合、権限なしで処理を続ける
		        end else
		        begin
					// 「いいえ」の場合、「情報区分」に戻る
		            Abort;
		        end;
			end;	// <MYN12>
// <MYN11> ins -s
		end else
		begin
        	m_bPanelKojin	:= False;	// マイナンバー管理なしの場合、個人ボタンパネル非表示
// <MYN11> ins -e
		end;	// <MYN3>
	end else
	begin
		// 1:処理成功
		m_iAccType	:= m_MYNAcc.AccType;	// 担当者マイナンバーアクセス権限
	end;
// <MYN> ins -e

    inherited Create(TForm(m_pMyAppRecord^.m_pOwnerForm^))

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnActivate
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormActivate(Sender: TObject);
var
	AppPara : TAppParam;
begin
	AppPara.iAction := ACTID_ACTIVEEND;
	AppPara.pRecord := Pointer( m_pMyAppRecord );
	AppPara.pActionParam := nil;

	TMjsAppRecord( m_pMyAppRecord^ ).m_pOwnerEntry( @AppPara );
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnCreate
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormCreate(Sender: TObject);
var
//<KSN> DEL	iSumKbn		:   Integer;
	QueryRead	:   TMQuery;
	Qry         :   TMQuery;
//	iJituCnt	:   Integer;
    i           :   Integer;
    lvStr       :   TStringList;
    iRet        :   Integer;        // <PRN>
    lvHandle    :   THandle;        // <PRN>

//--------------------------------------------
// [区分名コード]文字列オブジェクトを作成する
//--------------------------------------------
function lfnKbnStrSet(Qry: TFDQuery; TBL, TYP: String; var Str: TStringList):Integer;
var
    lvSelectCount: Integer;

begin

    lvSelectCount := 0;

    //[区分]テーブルよりレコードを取得する
    with Qry do
    begin
        Str.Clear;
        SQL.Clear;
        SQL.Add('select CODE, NM from MKBN ');
        SQL.Add('where (TBL = :pTBL) and (TYPE = :pTYPE) order by CODE');
        ParamByName('pTBL') .AsString  := TBL;
        ParamByName('pTYPE').AsString  := TYP;

        Open;
        while not  EOF  do
        begin
            Inc(lvSelectCount);
            //取得結果を文字列オブジェクトにセットする
            Str.Add(FieldByName('NM').AsString);
            Next;
        end;
        Close;
    end;

    Result := lvSelectCount;

end;

begin
	CloseFlg        := False;
	m_bFirstFlag	:= False;
	m_fAccessTree   := False;
	m_fAccessTab    := False;
	m_fAccessTabJ   := False;
	m_fAccessTabG   := False;
    m_bBtnChange 	:= TRUE;   // <119>
    m_Wf_HENKO      := false; // <2610> Add

//<KSN> ADD St
    m_HojyoTree_Drag.HojyoTree := nil;
    m_HojyoTree_Drag.MTokui := nil;
    m_SrchMTokui := nil;
    m_iStartMode := -1;

    GetClientName(m_sComputerName);

    m_APGFILE := TJNTCRP004001APG.Create(rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot+'\ENV\JNT\'+m_sComputerName+'_'+'JNTCRP004001.APG');
//<KSN> ADD Ed
    // <PRN>ArrHdlの初期化。
    for i := 0 to 100 do
        ArrHdl[i] := nil;

	Parent	:= TPanel(m_pMyAppRecord^.m_pOwnerPanel^);		// 親ﾊﾟﾈﾙをParent
	Align	:= alClient; 							 		// 全領域を作成

	MJSColorChange (TJNTCRP004001f (Self), ComArea.SystemArea.SysColorB,
                                           ComArea.SystemArea.SysColorD,
									       ComArea.SystemArea.SysBaseColorB,
                                           ComArea.SystemArea.SysBaseColorD,
										  	rcCOMMONAREA (m_pMyAppRecord^.m_pCommonArea^).SysFocusColor);
	// ﾌｫｰﾑの初期化
	uvSelSys.gfnInzForm(self);

//    m_cJNTArea      :=  TJNTCommon.Create(Self); <106>

//    m_cJNTArea.Init(m_pMyAppRecord); <106>
//	m_cJNTArea.setSelAppRecord;	 <106>					            // 販売ポインタ設定
//	m_cJNTArea.setMasAppRecord;	 <106>					            // 販売ポインタ設定

    B_Print              := TMSpeedButton( m_CmpList.Items[0]^ );
    B_Print.OnClick      := BSpeedButtonPrnClick;

    B_Syousai            := TMSpeedButton( m_CmpList.Items[1]^ );
    B_Syousai.OnClick    := BSpeedButtonISClick;

    B_Delete             := TMSpeedButton( m_CmpList.Items[2]^ );
    B_Delete.OnClick     := BSpeedButtonDelClick;
    B_Delete.OnMouseDown := BSpeedButtonDelMouseDown;               // <111>

//<202>↓
	B_Sort				:= TMSpeedButton( m_CmpList.Items[3]^ );
	B_Sort.OnClick		:= BSpeedButtonSortClick;
//<202>↑

    B_Search             := TMSpeedButton( m_CmpList.Items[4]^ );   // <105>
    B_Search.OnClick     := BSpeedButtonFindClick;                  // <105>

    B_ImportWF           := TMSpeedButton( m_CmpList.Items[12]^);   // <WF>
    B_ImportWF.OnClick   := BSpeedButtonWFClick;                    // <WF>
//<198>
	TMSpeedButton( m_CmpList.Items[12]^).Caption	:= '申請書参照(&B)';

    B_Fusen              := TToolButton  ( m_CmpList.Items[6]^ );
    B_Fusen.OnClick      := btnFusenCtlClick;
    B_Fusen.DropdownMenu := PMFusen;

    B_FusenBar           := TMToolBar    ( m_CmpList.Items[7]^ );
{↓<Gali2258>CreateFormへ移動
    m_cJNTArea           := TJNTCommon   ( m_CmpList.Items[8]^ );   // <106>
    m_Base_pRec          := Pointer      ( m_CmpList.Items[9]^ );   // <107>
↑<Gali2258>}
    MComboBox            := TMComboBox   ( m_CmpList.Items[10]^ );  // <117>
    B_Change             := TMSpeedButton( m_CmpList.Items[11]^ );  // <119>
    B_Change.OnClick     := BChangeClick;   						// <119>

	m_SyncMaster         := TSyncMaster  ( m_CmpList.Items[13]^ );  // <Rel>

    LblRecCnt			 := TMLabel      ( m_CmpList.Items[14]^ );  // <RCNT>
//<KSN> ADD St
    B_SetUp			     := TMSpeedButton      ( m_CmpList.Items[15]^ );
    B_SetUp.OnClick      := BSpeedButtonClick;
    B_SetUp.Enabled      := True;
    B_SetUp.Visible      := True;
    B_SetUp.Hint         := '初回起動モードの設定';
//<KSN> ADD Ed
//<KSN4> ADD st
    chb_KasanUpdate.Left := Kasan_Parent_Panel.Left;
    chb_KasanUpdate.Top  :=
        Kasan_Parent_Panel.Top + Kasan_Parent_Panel.Height + 10;
//<KSN4> ADD Ed
{↓<Gali2258>CreateFormの最後で行っているので、ここでは再度の設定は不要なのでコメントアウトしました。
    m_cJNTArea.setMasAppRecord;                                     // 財務ﾎﾟｲﾝﾀ設定
↑<Gali2258>}

    m_RepHandle	:= 0;                                               // 印刷モジュールハンドル <261>

    m_JNTAuthority := TJNTAuthority(m_CmpList.Items[16]^);  //<Authority> ADD
//↓<MJUP>
    fnGetAllKbn(); //画面表示に必要な情報があれば、ここでまとめて取得します

    //サイズ等の変更。念のためMjsFontResizeより前に行います。
    // その他、設計上で変えたもの
    //     JHojyoMA_DMemDataLongName
    //     MemPtnGoukei.FieldByName('strName')
    //     MemPtnSegBun.FieldByName('strNameSimpleDst') ← 名前はSimpleだが、正式名称をセットしていたので
	//     MemPtnJitsuzai.FieldByName('Nm')
    //         DisplayWidth、Size 60 → 80
    if m_SELCSTM_TBL.GL06 then
    begin
    	Jituzai_LLabel_GCode.Width	:= 76;
        f0NGCode.Left				:= 103;
        f0TGCode.Left				:= 103;
        f0Name.Left					:= 227;
        f0Name.Width				:= 530;
        f0LongName.Width			:= 654;
        f0LongName.MaxLength		:= 80;

        Jituzai_DdxDBGridLongName.MaxLength := 80;
//<KSN> ADD St
        Kasan_Parent_DBGridLongName.MaxLength := 80;
        Kasan_Child_DBGridLongName.MaxLength := 80;
//<KSN> ADD Ed
    end
    else
    begin
    	Jituzai_LLabel_GCode.Width	:= 144;
        f0NGCode.Left				:= 171;
        f0TGCode.Left				:= 171;
        f0Name.Left					:= 305;
        f0Name.Width				:= 430;
        f0LongName.Width			:= 292;
        f0LongName.MaxLength		:= 60;

        Jituzai_DdxDBGridLongName.MaxLength := 60;
//<KSN> ADD St
        Kasan_Parent_DBGridLongName.MaxLength := 60;
        Kasan_Child_DBGridLongName.MaxLength := 60;
//<KSN> ADD Ed
   	end;
//↑<MJUP>

	m_Zoom := MjsFontResize(TJNTCRP004001f( Self )	,Pointer(m_pMyAppRecord));
    B_FusenBar.ButtonHeight := B_FusenBar.Height;
    B_FusenBar.ButtonWidth := Trunc(B_FusenBar.ButtonWidth * m_Zoom / 100);
    B_FusenBar.Left := Trunc(B_FusenBar.Left * m_Zoom / 100);

	JNTMasAccelCharCancel(Self);

	{Query 初期設定}
//<D10>MDataModule.SetDBInfoToQuery (dbCorp_Select, MTOKUI_DMQuery);
	gfnJNTSELSetDbName(MTOKUI_DMQuery, dbCorp_Select);		//<D10>


	// -----<MHIS> Add-St-----
//<D10>	SPMsHist.DatabaseName := dbCorp_Select.DatabaseName;
//<D10>	SPMsHist.SessionName  := dbCorp_Select.SessionName;
	gfnJNTSELSetDbName(SPMsHist, dbCorp_Select);		//<D10>

	// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = 1 then
	begin
//<D10>	SPMsHistParent.DatabaseName	:= m_SyncMaster.m_cPDBSelect.DatabaseName;
//<D10>	SPMsHistParent.SessionName	:= m_SyncMaster.m_cPDBSelect.SessionName;
		gfnJNTSELSetDbName(SPMsHistParent, m_SyncMaster.m_cPDBSelect);		//<D10>
	end;
	// -----<MHIS> Add-Ed-----


    // <PRN>	mjspreview := TMjsPreviewIF.Create;
// <PRN>	mjspreview.Init( m_pMyAppRecord );

    // <100>ファンクション設定
    fnSetFncType(0);
    // <100>フリー項目設定ダイアログ初期化
    fnJNTFreeDlgLoad(m_pMyAppRecord );
    fnJNTFreeDlgInit(m_pMyAppRecord ,ComArea,@dbCorp_Select, m_cJNTArea);

    KanaCtl.Control := f0LongName;        // ﾌﾘｶﾞﾅｺﾝﾎﾟｰﾈﾝﾄにｺﾝﾄﾛｰﾙをｾｯﾄする

	{Flag Clear}
	MemPost_Sw    := 1;
	giChkFlg      := 0;
	giCloseFlg    := 0;
	m_SearchInfo.sKojCD := '';
	m_bFieldFlg   := False;
	m_bModeChg    := False;

	fnMasterInfoRead();										// マスタ基本情報読み込み

//<CD16>↓
//        f0TGCode.width			:= 106;
//        f0Name.Left				:= 305;

	if MasterInfo_DMemDataCodeDigit.AsInteger > 10 then
	begin
		f0TGCode.width					:= 106+65;		//詳細型コード欄
		f0NGCode.width					:= 106+65;		//詳細型コード欄（数値）//<CD16_3>
        f0Name.Left						:= 305+65;		//詳細型正式名称欄
//        f0Name.width					:= 430-15;		//詳細型正式名称欄		//<CD16_3>
        f0Name.width					:= 430-60;		//詳細型正式名称欄      //<CD16_3>
		Jituzai_DdxDBGridGCode.width    := 86+44;			//一覧型コード欄
	end;
//<CD16>↑

//<KSN> ADD St
    // 登録件数取得
    giAllCnt := fnMTokui_Count();
//<KSN> ADD Ed
	{TreeView 作成}
//<KSN> DEL	fnRebuildTreeViewItems ();

	{TreeView 作成(はぐれ対応)}
//<KSN> DEL	if fnRebuildTreeViewItemsHagure () = False then
//<KSN> DEL		giCloseFlg := 1;

//    fnClearCard  (iSumKbn,0); <108>
    fnClearCard  (0);
//<KSN> DEL St
(*
	if giCloseFlg <> 1 then
	begin
		{Grid 初期表示}
		TBaseNode	:= VTreeView.Items[0];
		TBaseNodeSv	:= VTreeView.Items[0];

		iSumKbn		:= 0;										// 実在グリッド
		fnCreateGrid (TBaseNode, iSumKbn);
		if JHojyoMA_DMemData.Eof = False then
		begin
	        JHojyoMA_DMemData.DisableControls; //<249>
			JHojyoMA_DMemData.First;
	        JHojyoMA_DMemData.EnableControls; //<249>
//<256> DEL			fnCreateCard (iSumKbn);
		end
		else
//			fnClearCard  (iSumKbn,0); <108>
			fnClearCard  (0);
*)
//<KSN> DEL Ed
//<KSN> ADD St
        // 登録件数が基準を超えているか、または詳細画面起動の場合は、ここでは取得しない
        if not ((IsLimitCount() = True) or (GetStartMode() = 1)) then
        begin
            if fnRead() = False then giCloseFlg := 1;
        end;
//<KSN> ADD Ed

		m_fEnd    := 0;									// 終了ﾌﾗｸﾞ初期化
		m_fChange := 0;									// 切り出しﾌﾗｸﾞ初期化
		m_fPrint  := 0;									// 印刷ﾌﾗｸﾞ初期化
		m_fIS     := 0;									// 一覧詳細ﾌﾗｸﾞ初期化
		m_fDel    := 0;									// 削除ﾌﾗｸﾞ初期化
		m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
		m_stGCodeSave := '          ';					// 外部ｺｰﾄﾞｾｰﾌﾞ変数初期化

		MasTreee2Dlg := nil;

		FusenInitialize();								// 付箋初期化

		QueryRead	:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
		gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

    	gbHojyoTree2Flag	:=	False;					//	加算体系２仕様ﾌﾗｸﾞ初期化
		gbHojyoTreeDelFlag	:=	False;					//  削除ﾌﾗｸﾞ初期化

		with QueryRead do
		begin
			try
				Close;
				SQL.Clear;		 							// qmQuery 初期化
				SQL.Add('select NCode,GCODE from MTOKUI');
				SQL.Add('where RDelKbn = 0 and Syokuchikbn = 1');
				Open;										// 諸口が登録されているかﾁｪｯｸ

				if EOF = False then
					giChkFlg := 1;
//<KSN> DEL St
{
				// 登録件数表示
				Close;
				SQL.Clear;		 							// qmQuery 初期化
//<256> DEL				SQL.Add('select Count(*) as Kensu from MTOKUI');
				SQL.Add('select Count(NCode) as Kensu from MTOKUI');  //<256> ADD
				SQL.Add('where  RDelKbn = 0');
                SQL.Add(' and   TemplateKbn = 0');          // <112>
				Open;										// 登録件数取得
				giAllCnt := GetFld('Kensu').AsInteger;
}
//<KSN> DEL Ed

				LblRecCnt.Caption := IntToStr(giAllCnt);

                // ﾃﾝﾌﾟﾚｰﾄﾃﾞｰﾀ(得意先)を求める <115>
                Close;
                SQL.Clear;
//<256> MOD St
//                SQL.Add('select se.* from MTOKUI_SEL se '+
                SQL.Add('select ');
                SQL.Add('      se.URKINHSUKBN ');
                SQL.Add('      ,se.GRUZSEIKBN ');
                SQL.Add('      ,se.ZSEIKBN ');
                SQL.Add('      ,se.ZHSUKBN ');
                SQL.Add('      ,se.ZHSUTNIKBN ');
                SQL.Add('      ,se.TRIHIKIKBN ');
                SQL.Add('      ,se.NMKBN ');
                SQL.Add('      ,se.SSHCDKBN ');
                SQL.Add('      ,se.SSHCDKET ');
                SQL.Add('      ,se.YYKBN ');
                SQL.Add('      ,se.DAINMKBN ');
                SQL.Add('      ,se.USDENPFM ');
                SQL.Add('      ,se.MITPFM ');
                SQL.Add('      ,se.JHDENPFM ');
                SQL.Add('      ,se.SNDENPFM ');
                SQL.Add('      ,se.USGKEI ');
                SQL.Add('      ,se.JYGKEI ');
                SQL.Add('      ,se.SOFOPFM ');
                SQL.Add('      ,se.SSsyoPfm ');
                SQL.Add('      ,se.SSsyoKgm ');
                SQL.Add('      ,se.BmNCode ');
                SQL.Add('      ,se.TnNCode ');
                SQL.Add('      ,se.RyoPfm ');
                SQL.Add('      ,se.RyoTeki ');
                SQL.Add('      ,se.SyuRyoKbn ');
                SQL.Add('      ,se.HBunNCode1 ');
                SQL.Add('      ,se.HBunNCode2 ');
                SQL.Add('      ,se.Memo1 ');
                SQL.Add('      ,se.Memo2 ');
                SQL.Add('      ,se.TnkRnk ');
                SQL.Add('      ,se.KakeRt ');
                SQL.Add('      ,se.KUSGKei ');
                SQL.Add('      ,se.KUSDenPfm ');
                SQL.Add('      ,se.KMitPfm ');
                SQL.Add('      ,se.KJHDenPfm ');
                SQL.Add('from MTOKUI_SEL se ' +
//<256> MOD Ed
                        'left outer Join MTOKUI m on se.BaseNCode = m.NCode '+
                        'where (m.TemplateKbn = 1) '+
                        'and (se.RecKbn = 1)');
                Open;

                if not Eof then
                begin
                    uvTmpURKINHSUKBN    := GetFld('URKINHSUKBN').AsInteger; // 売上端数区分
                    uvTmpGRUZSEIKBN     := GetFld('GRUZSEIKBN') .AsInteger; // 現売税請求区分
                    uvTmpZSEIKBN        := GetFld('ZSEIKBN')    .AsInteger; // 消費税請求区分
                    uvTmpZHSUKBN        := GetFld('ZHSUKBN')    .AsInteger; // 消費税端数単位
                    uvTmpZHSUTNIKBN     := GetFld('ZHSUTNIKBN') .AsInteger; // 消費税端数処理
                    uvTmpTRIHIKIKBN     := GetFld('TRIHIKIKBN') .AsInteger; // 取引区分
                    uvTmpNMKBN          := GetFld('NMKBN')      .AsInteger; // 名称変更区分
                    uvTmpSSHCDKBN       := GetFld('SSHCDKBN')   .AsInteger; // 指定商品ｺｰﾄﾞ区分
                    uvTmpSSHCDKET       := GetFld('SSHCDKET')   .AsInteger; // 指定商品ｺｰﾄﾞ桁数
                    uvTmpYYKBN          := GetFld('YYKBN')      .AsInteger; // 和暦西暦区分
                    uvTmpDAINMKBN       := GetFld('DAINMKBN')   .AsInteger; // 代表者名の印字
                    uvTmpUSDENPFM       := GetFld('USDENPFM')   .AsInteger; // 納品書ﾌｫｰﾑ
                    uvTmpMITPFM         := GetFld('MITPFM')     .AsInteger; // 見積書ﾌｫｰﾑ
                    uvTmpJHDENPFM       := GetFld('JHDENPFM')   .AsInteger; // 受注伝票ﾌｫｰﾑ
                    uvTmpSNDENPFM       := GetFld('SNDENPFM')   .AsInteger; // 出荷伝票ﾌｫｰﾑ
                    uvTmpUSGKEI         := GetFld('USGKEI')     .AsInteger; // 売上合計欄税印字
                    uvTmpJYGKEI         := GetFld('JYGKEI')     .AsInteger; // 上代合計欄税印字
                    uvTmpSOFOPFM        := GetFld('SOFOPFM')    .AsInteger; // 送り状ﾌｫｰﾑ
                    // 債権管理用
                    uvTmpSSDENPFM       := GetFld('SSsyoPfm').AsInteger;    // 請求書ﾌｫｰﾑ
                    uvTmpSSGKEI         := GetFld('SSsyoKgm').AsInteger;    // 請求書鏡欄税印字
                    uvTmpBMCODE         := GetFld('BmNCode').AsFloat;       // 部門ｺｰﾄﾞ
                    uvTmpTNCODE         := GetFld('TnNCode').AsFloat;       // 担当者ｺｰﾄﾞ
                    uvTmpRYOPFM         := GetFld('RyoPfm').AsInteger;      // 領収証ﾌｫｰﾑ
                    uvTmpRYOTEKI        := GetFld('RyoTeki').AsInteger;     // 領収証の但し書き
                    uvTmpSYURYOKBN      := GetFld('SyuRyoKbn').AsInteger;   // 集金用領収証

					uvTmpKKBN1			:= GetFld('HBunNCode1').AsFloat;
					uvTmpKKBN2			:= GetFld('HBunNCode2').AsFloat;
					uvTmpCmt1			:= GetFld('Memo1').AsString;
					uvTmpCmt2			:= GetFld('Memo2').AsString;
//↓<214>
                    uvTmpTnkRnk			:= GetFld('TnkRnk').AsInteger;
                    uvTmpKakeRt			:= GetFld('KakeRt').AsFloat;
//↑<214>

//<1719> Ins-s
					uvTmpKUSGKei		:= GetFld('KUSGKei').AsInteger;		// 工事合計欄印字
					uvTmpKUSDenPfm		:= GetFld('KUSDenPfm').AsInteger;	// 工事売上伝票ﾌｫｰﾑ
					uvTmpKMitPfm		:= GetFld('KMitPfm').AsInteger;		// 工事見積伝票ﾌｫｰﾑ
					uvTmpKJHDenPfm		:= GetFld('KJHDenPfm').AsInteger;	// 工事受注伝票ﾌｫｰﾑ
//<1719> Ins-e
                end;

                // ﾃﾝﾌﾟﾚｰﾄﾃﾞｰﾀ(仕入先)を求める <115>
                Close;
                SQL.Clear;
//<256> MOD St
//                SQL.Add('select se.* from MTOKUI_SEL se '+
                SQL.Add('select ');
                SQL.Add('      se.URKINHSUKBN ');
                SQL.Add('      ,se.GRUZSEIKBN ');
                SQL.Add('      ,se.ZSEIKBN ');
                SQL.Add('      ,se.ZHSUKBN ');
                SQL.Add('      ,se.ZHSUTNIKBN ');
                SQL.Add('      ,se.TRIHIKIKBN ');
                SQL.Add('      ,se.NMKBN ');
                SQL.Add('      ,se.SSHCDKBN ');
                SQL.Add('      ,se.SSHCDKET ');
                SQL.Add('      ,se.YYKBN ');
                SQL.Add('      ,se.DAINMKBN ');
                SQL.Add('      ,se.USDENPFM ');
                SQL.Add('      ,se.MITPFM ');
                SQL.Add('      ,se.JHDENPFM ');
                SQL.Add('      ,se.SNDENPFM ');
                SQL.Add('      ,se.USGKEI ');
                SQL.Add('      ,se.JYGKEI ');
                SQL.Add('      ,se.SOFOPFM ');
                SQL.Add('      ,se.SSsyoPfm ');
                SQL.Add('      ,se.SSsyoKgm ');
                SQL.Add('      ,se.BmNCode ');
                SQL.Add('      ,se.TnNCode ');
                SQL.Add('      ,se.RyoPfm ');
                SQL.Add('      ,se.RyoTeki ');
                SQL.Add('      ,se.SyuRyoKbn ');
                SQL.Add('      ,se.HBunNCode1 ');
                SQL.Add('      ,se.HBunNCode2 ');
                SQL.Add('      ,se.Memo1 ');
                SQL.Add('      ,se.Memo2 ');
                SQL.Add('      ,se.TnkRnk ');
                SQL.Add('      ,se.KakeRt ');
                SQL.Add('      ,se.KUSGKei ');
                SQL.Add('      ,se.KUSDenPfm ');
                SQL.Add('      ,se.KMitPfm ');
                SQL.Add('      ,se.KJHDenPfm ');
                SQL.Add('from MTOKUI_SEL se ' +
//<256> MOD Ed
                        'left outer Join MTOKUI m on se.BaseNCode = m.NCode '+
                        'where (m.TemplateKbn = 1) '+
                        'and (se.RecKbn = 2)');
                Open;

                if not Eof then
                begin
                    uvTmpURKINHSUKBN_Si := GetFld('URKINHSUKBN').AsInteger; // 売上端数区分
                    uvTmpGRUZSEIKBN_Si  := GetFld('GRUZSEIKBN') .AsInteger; // 現売税請求区分
                    uvTmpZSEIKBN_Si     := GetFld('ZSEIKBN')    .AsInteger; // 消費税請求区分
                    uvTmpZHSUKBN_Si     := GetFld('ZHSUKBN')    .AsInteger; // 消費税端数単位
                    uvTmpZHSUTNIKBN_Si  := GetFld('ZHSUTNIKBN') .AsInteger; // 消費税端数処理
                    uvTmpTRIHIKIKBN_Si  := GetFld('TRIHIKIKBN') .AsInteger; // 取引区分
                    uvTmpNMKBN_Si       := GetFld('NMKBN')      .AsInteger; // 名称変更区分
                    uvTmpSSHCDKBN_Si    := GetFld('SSHCDKBN')   .AsInteger; // 指定商品ｺｰﾄﾞ区分
                    uvTmpSSHCDKET_Si    := GetFld('SSHCDKET')   .AsInteger; // 指定商品ｺｰﾄﾞ桁数
                    uvTmpYYKBN_Si       := GetFld('YYKBN')      .AsInteger; // 和暦西暦区分
                    uvTmpDAINMKBN_Si    := GetFld('DAINMKBN')   .AsInteger; // 代表者名の印字
                    uvTmpUSDENPFM_Si    := GetFld('USDENPFM')   .AsInteger; // 納品書ﾌｫｰﾑ
                    uvTmpJHDENPFM_Si    := GetFld('JHDENPFM')   .AsInteger; // 受注伝票ﾌｫｰﾑ
                    uvTmpSNDENPFM_Si    := GetFld('SNDENPFM')   .AsInteger; // 出荷伝票ﾌｫｰﾑ
                    uvTmpUSGKEI_Si      := GetFld('USGKEI')     .AsInteger; // 売上合計欄税印字
                    // 債務管理用
                    uvTmpSSDENPFM_Si    := GetFld('SSsyoPfm').AsInteger;    // 支払通知書請求書ﾌｫｰﾑ
                    uvTmpSSGKEI_Si      := GetFld('SSsyoKgm').AsInteger;    // 支払通知書鏡欄税印字
                    uvTmpBMCODE_Si      := GetFld('BmNCode').AsFloat;       // 部門ｺｰﾄﾞ
                    uvTmpTNCODE_Si      := GetFld('TnNCode').AsFloat;       // 担当者ｺｰﾄﾞ

					uvTmpKKBN1_Si		:= GetFld('HBunNCode1').AsFloat;
					uvTmpKKBN2_Si		:= GetFld('HBunNCode2').AsFloat;
					uvTmpCmt1_Si		:= GetFld('Memo1').AsString;
					uvTmpCmt2_Si		:= GetFld('Memo2').AsString;
//↓<214>
                    uvTmpTnkRnk_Si		:= GetFld('TnkRnk').AsInteger;
                    uvTmpKakeRt_Si		:= GetFld('KakeRt').AsFloat;
//↑<214>

//<1719> Ins-s
					uvTmpKUSGKei_Si		:= GetFld('KUSGKei').AsInteger;		// 工事合計欄印字
					uvTmpKUSDenPfm_Si	:= GetFld('KUSDenPfm').AsInteger;	// 工事原価伝票ﾌｫｰﾑ
					uvTmpKMitPfm_Si		:= GetFld('KMitPfm').AsInteger;		// 工事見積伝票ﾌｫｰﾑ
					uvTmpKJHDenPfm_Si	:= GetFld('KJHDenPfm').AsInteger;	// 工事発注伝票ﾌｫｰﾑ
//<1719> Ins-e
                end;

// <238> ADD-STR
                // 債務テンプレート取得
                Close;
                SQL.Clear;
                Sql.Add('SELECT MP.LetterKbn, MP.GensenUseKbn, MP.PersonKbn ' +
                        '  FROM MTOKUI_PAY MP ' +
                        '  LEFT JOIN MTOKUI M ' +
                        '    ON MP.BaseNCode = M.NCode ' +
                        ' WHERE M.TemplateKbn = 1');
                Open ();

                if not Eof then
                begin
                    uvTmpLetterKbn    := GetFld('LetterKbn').AsInteger;         // 支払通知書区分
                    uvTmpGensenUseKbn := GetFld('GensenUseKbn').AsInteger;      // 預かり源泉税採用区分
                    uvTmpPersonKbn    := GetFld('PersonKbn').AsInteger;         // 個人／法人区分
                end;
// <238> ADD-END
			finally
				Close;
				Free;
			end;
		end;
//<KSN> DEL	end;

	giReferFlag	:= NORMAL;						            // 参照ﾌﾗｸﾞ初期化

    //権限情報を取得<104>
//    m_cJNTArea.FxPermission; <106>
//<Authority> DEL    if (m_cJNTArea.IsModify = False) then
    if (m_JNTAuthority.IsModify = False) then  //<Authority> ADD
    begin
//<Authority> DEL        if (m_cJNTArea.IsAppend = False ) then
        if (m_JNTAuthority.IsAppend = False ) then //<Authority> ADD
        begin
            giReferFlag := REFER;//決算確定と同様の処理
        end
        else
        begin
    		Jituzai_DdxDBGrid.Options 	:= Jituzai_DdxDBGrid.Options + [egoCanAppend] - [egoCanInsert];
    		Kasan_Child_DBGrid.Options 	:= Kasan_Child_DBGrid.Options + [egoCanAppend] - [egoCanInsert];  //<KSN> ADD
        end;
    end;
//<KSSN>↓
//親画面ですでに追加・変更・削除の権限をFalseにしているため、
//ここであえて処理する必要はない（上のロジックで既に参照モードが確定している）
//    if ( m_cJNTArea.IsKessan(TRUE) = 1 ) then				// 決算確定MSG
//        giReferFlag	:= REFER;						    // 決算確定の為参照のみ
//<KSSN>↑

//↓<Rel>
	// この時点で、参照権限以外のときのみ、以下の論理を行う。
	if (giReferFlag <> REFER) then
	begin
        // 全社の過年度DBを選択している場合
        if ( m_SyncMaster.m_flgGrpCorp = 0 ) then
        begin
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                if ( MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Oya,
                                        'グループ会計', mjQuestion, mjYesNo, mjDefNO) = mrYES ) then
                begin
                    // 通常のﾏｽﾀ登録として起動する。
                    // 登録したﾏｽﾀについて_RELの作成はしない。(Triggerでﾁｪｯｸを行う)
                    giReferFlag	:= NORMAL;  // 通常ﾓｰﾄﾞ
                end
                else
                begin
                    // 更新ﾎﾞﾀﾝは、入力不可の状態で起動する。
                    // ﾏｽﾀをUpdata、Insertすることはできない。
                    m_cJNTArea.Invalidity;
                    giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
                end;
            end;
        end
        // 子会社(ｸﾞﾙｰﾌﾟ会計採用有)
        else if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 子会社が過年度DBの場合
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_K,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;
                giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
            end
            // 親会社が過年度DBの場合
            else if  ( m_SyncMaster.m_PEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_O,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;
                giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
            end;
        end;
	end;
//↑<Rel>

    B_ImportWF.Enabled := False;                            // <WF>申請書参照ﾎﾞﾀﾝ

	m_bExFlg		:= False;

	PostMessage( Self.Handle,WM_ONPAINT,0,0 );		        // OnPaint Post

	DisplayControl(giReferFlag);

	if (m_iMailKbn = 1) or (giReferFlag = REFER) then
	begin
//<157>		B_Delete.Visible := False;
		B_Delete.Enabled := False;  //<157>
		TPDelete.Visible := False;
		if giReferFlag = REFER then
			BSpeedButtonFind.Left := Trunc(289 * m_Zoom / 100)
		else
		begin
			BSpeedButtonSort.Left := Trunc(289 * m_Zoom / 100);
			BSpeedButtonFind.Left := Trunc(385 * m_Zoom / 100);
			B_FusenBar.Left := Trunc(466 * m_Zoom / 100);
		end;
	end;

	MPnlCount.Align := alNone;
	MPnlCount.Align := alRight;

	if giReferFlag = BASICONLY then
	begin
		B_Syousai.Visible := False;
		TPDetail.Visible  := False;
	end;

	m_fAccessTree   := True;
	m_fAccessTab    := True;
	m_fAccessTabJ   := True;
	m_fAccessTabG   := True;
	gbTreeClick 	:= False;
	m_bFirstFlag	:= True;

	MemPost_Sw	:= 0;

	if giReferFlag <> REFER then
	begin
		{フォーカス初期処理}
		m_AcControl	:= Jituzai_DdxDBGrid;
		Jituzai_DdxDBGrid.FocusedColumn	:= 1;
	end
	else
	begin
		{フォーカス初期処理}
		m_AcControl	:= VTreeView;
	end;

	if m_iAccProKbn = 0 then
	begin

		// 表示形式変更

//		ppDBText56.DisplayFormat := '###,###';
//		ppDBText57.DisplayFormat := '###,###,###,###,###';
//		ppDBText61.DisplayFormat := '###,###';
//		ppDBText62.DisplayFormat := '###,###,###,###,###';
//		ppDBText66.DisplayFormat := '###,###';
//		ppDBText67.DisplayFormat := '###,###,###,###,###';
//		ppDBText69.DisplayFormat := '###,###,###,###,###';
	end;

	// 付箋フィールド非表示
	Jituzai_LLabel_Fusen.Visible             := False;
	Jituzai_ImageLowered_FusenRed.Visible    := False;
	Jituzai_ImageLowered_FusenGreen.Visible  := False;
	Jituzai_ImageLowered_FusenBlue.Visible   := False;
	Jituzai_ImageLowered_FusenOrange.Visible := False;
	Jituzai_ImageRaised_FusenRed.Visible     := False;
	Jituzai_ImageRaised_FusenGreen.Visible   := False;
	Jituzai_ImageRaised_FusenBlue.Visible    := False;
	Jituzai_ImageRaised_FusenOrange.Visible  := False;
	Jituzai_ETEdit_Fusen.Visible             := False;
//<222>↓
	// グリッド部分の付箋を制御
//<Authority> MOD St
{
	GFDel.Enabled := m_cJNTArea.IsFusen;
	GFRe.Enabled := m_cJNTArea.IsFusen;

	GFRed.Enabled := m_cJNTArea.IsFusen;
    GFBlue.Enabled := m_cJNTArea.IsFusen;
    GFGreen.Enabled := m_cJNTArea.IsFusen;
    GFOrange.Enabled := m_cJNTArea.IsFusen;
}
	GFDel.Enabled := m_JNTAuthority.IsFusen;
	GFRe.Enabled := m_JNTAuthority.IsFusen;

	GFRed.Enabled := m_JNTAuthority.IsFusen;
    GFBlue.Enabled := m_JNTAuthority.IsFusen;
    GFGreen.Enabled := m_JNTAuthority.IsFusen;
    GFOrange.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
//<222>↑

    //項目のクリア
    JNTSelXClrCtrls(Self, 'f3TBrCode');
    JNTSelXClrCtrls(Self, 'f3TBrName');
    // [f1]項目を使用不可にする
    MjsDispCtrl.MjsSetEnableds(Self,'f3TBrCode',False);

    //項目のクリア
    JNTSelXClrCtrls(Self, 'f3SBrCode');
    JNTSelXClrCtrls(Self, 'f3SBrName');
    // [f1]項目を使用不可にする
    MjsDispCtrl.MjsSetEnableds(Self,'f3SBrCode',False);

    // 共通ｴｸｽﾌﾟﾛｰﾗの初期化
    uvExpOpenSW := FALSE;
    if fnJNTExpInit(Self,m_pMyAppRecord) = 0 then
        uvExpOpenSW := TRUE
    else
		MjsMessageBox(Self,'ｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10
					+ 'ｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);

    // WFｴｸｽﾌﾟﾛｰﾗの初期化<WF>
    uvWFExpOpenSW := FALSE;
    if fnJNTWFExpInit(Self,m_pMyAppRecord) = 0 then
        uvWFExpOpenSW := TRUE
    else
		MjsMessageBox(Self,'WFｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10
					+ 'WFｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);

    // 敬称区分の設定
    // 文字列オブジェクトを作成する
    Qry	:= TMQuery.Create(Self);
    try
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        lvStr := TStringList.Create;

        //[敬称区分]を作成する
        lfnKbnStrSet(Qry, 'ALL', '敬称区分',lvStr);
        f0KEISYOKBN.SelectItems := lvStr;

//<226> ↓
        //国内外区分
        f0ECOUNTRY.SelectItems.Clear;
        for i := 1 to Length(ucCstM_CTR) do
            f0ECOUNTRY.SelectItems.Add(InttoStr(i) + ':' + ucCstM_CTR[i]);

        //通貨区分
        with Qry do
        begin
            f0ECURRENCY.SelectItems.Clear;
            Close;
            Sql.Clear;
            SQL.Add('select GCODE, RTRIM(NM) + ''(''+ RTRIM(MnSymbol) + '')'' NM '
                  + 'from GAIMONEY where (RDELKBN = 0) ');
            open;
            while not EOF do
            begin
                f0ECURRENCY.SelectItems.Add(FieldByName('GCODE').text + ':' + FieldByName('NM').text);
                next;
            end;
            Close;
        end;

        //国内外項目表示制御
        uvEnaHOUEI := IsCustomSel(Qry, ucPrvSys_HOUEI);
        pnlJPorFR.Visible := uvEnaHOUEI;

//<Edge>↓
		// Edge Tracker使用フラグ
		m_iEdgeFlag	:= 0;

        //EdgeTracker 経費清算連携チェック
		//※GnPuKbn1 = 1は採用あり。0,空白は採用なし
        with Qry do
        begin
            Close;
            Sql.Clear;
            SQL.Add('select GnPuKbn1 from kbninfo where reckbn = 54');
			if ( Open = True ) then
			begin
				if Eof <> True then
				begin
					m_iEdgeFlag := FieldByName( 'GnPuKbn1' ).AsInteger;
				end;
			end;
            Close;
        end;
//<Edge>↑
//<226> ↑
    finally
        lvStr.Free;
        Qry.Close;
        Qry.Free;
    end;

// <MYN> ins -s
	// 初期化
	if not (pnlJPorFR.Visible) then
    	MPanelMYN.Top	:= pnlJPorFR.Top
	else
		MPanelMYN.Top	:= 363;

	m_MaskCancelClick	:= False;
	m_bOutInputFlg		:= False;	// <MYN5>

	fnClearMYN();
// <MYN> ins -e
	m_CodeReturn	:= False;	// <MYN2>

  	MPanelKojin.Visible	:= m_bPanelKojin;	// <MYN11>個人パネル

{↓<Gali2285>
    // ﾗｲｾﾝｽの制御<104>
    if CheckModuleLicense(m_pMyAppRecord,FXLicense.SEL_HAN) = False then //販売ﾗｲｾﾝｽﾁｪｯｸ
    begin
        Pnl_SelSeikyu.Visible  := False;
        Pnl_SelSihrai.Visible  := False;
    end;
↑<Gali2285>}

// ↓↓↓<PRN>
    // MQueryの構築
    DmqPrint    :=  TMQuery.Create (Self);
    // DBとMQueryの接続
//<D10>MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqPrint );
	gfnJNTSELSetDbName(DmqPrint, dbCorp_Select);		//<D10>

{ ﾛｰﾄﾞﾊﾟｯｹｰｼﾞ処理 }
	try
		lvHandle    :=  LoadPackageHelper(rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004001L.BPL'); //<WAN>LoadPackage → LoadPackageHelper

        if ( lvHandle = 0 ) then
            Abort;
	except
		MjsMessageBox(Self, 'JNTCRP004001LのLoadPackageに失敗しました。' + #13 + '処理終了します。' , mjError, mjDefOk);
		Exit;
	end;

    // Export関数ｱﾄﾞﾚｽの取得
    PrintAppEntry := GetProcAddress(lvHandle,'PrintAppEntry');

    if ( @PrintAppEntry = nil ) then
    begin
	    MjsMessageBox(Self,'PrintAppEntry関数ｱﾄﾞﾚｽの取得に失敗しました。', mjError, mjDefOk);
    	UnloadPackageHelper( lvHandle ); //<WAN>UnloadPackage → UnloadPackageHelper
    end;

    m_RepHandle	:= lvHandle;                            // 印刷モジュールハンドル <261>

    { 印刷用ﾓｼﾞｭｰﾙを生成 }
    try
        with PrtParam do
		begin
            Para		    :=  uvHani;
			TargetQry	    :=  nil;
            TargetMD        :=  nil;
			CorpSys		    :=  uvSelSys;
            // *** 汎用変数 *** //
            TargetParam	    :=  nil;
	    	TargetStr	    :=  '';
    		TargetInt	    :=  0;
            // *** 汎用変数 *** //
            iAPP_HDL_REC    :=  100;
		end;
        ArrHdl[0] := @m_JntAuthority;  //<Authority> ADD
		iRet := PrintAppEntry(Self,m_Base_pRec,0,PrtParam,ArrHdl);
		if ( iRet = 0 ) then
			Abort;
	except
		MjsMessageBox(Self,'印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙの作成に失敗しました。'#13#10#13#10
				 + '印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙは使用できません。', mjError, mjDefOk);
	end;

    gfnHaniInit(Self,
                m_Base_pRec,
                MDataModule,
                ComArea,
                dbCorp_Select,
                'JNTCRP004001',
                uvHani,
                uvSelSys);

// ↑↑↑<PRN>
    // <WF>↓
    m_recSinseiKey.SinForm := -1;           // 初期化<235>SwkForm → SinForm
    m_recSinseiKey.OrgNo := -1;
    m_recSinseiKey.HisID := -1; //<235>
    m_recOther.CanInsert := False;
    m_recOther.CanUpdate := False; //<244>
    // <WF>↑


//↓<203>fnDataReadからここに移動させました。また、コントロールのEnabledを操作せず、変数に保存するようにしました。
    if (CheckModuleLicense(m_pMyAppRecord,FXLicense.DEP_LEA)) then
// 		f1SHojyoKbn3.Enabled := True
        IsLeaseLicense := True
    else
// 		f1SHojyoKbn3.Enabled := False;
        IsLeaseLicense := False;
//↑<203>
//↓<205>
    LblSHojyoKbn3.Enabled               := IsLeaseLicense;
    f1SHojyoKbn3.Enabled                := IsLeaseLicense;
    Jituzai_DdxDBGridSHojyoKbn3.Visible := IsLeaseLicense;
    Jituzai_DdxDBGrid.Bands[9].Visible  := IsLeaseLicense;
//↑<205>

    // <160> 資産ﾗｲｾﾝｽﾁｪｯｸ(識別子420000)
{ <170>
    if ( CheckModuleLicense(m_Base_pRec,420000)) then
        uvSLicense := True
    else
        uvSLicense := False;
}
//↓<204>
    if ( CheckModuleLicense(m_pMyAppRecord,FXLicense.DEP_CMN)) then
        uvSLicense := True
    else
        uvSLicense := False;
//↑<204>

    if ( uvSLicense ) then
    begin
    // 資産ﾗｲｾﾝｽ有
(*
        Jituzai_DdxDBGridRenChar    .Width := 60;
        Jituzai_DdxDBGridLongName   .Width := 240;
        Jituzai_DdxDBGridSimpleName .Width := 130;
        Jituzai_DdxDBGridTKBN       .Width := 45;
        Jituzai_DdxDBGridSKBN       .Width := 45;
        Jituzai_DdxDBGridSHojyoKbn1 .Width := 45;
        Jituzai_DdxDBGridSHojyoKbn2 .Width := 45;
*)
        LblSHojyoKbn1.Enabled := True; //<205>Visible → Enabled
        LblSHojyoKbn2.Enabled := True; //<205>Visible → Enabled
        f1SHojyoKbn1.Enabled := True;  //<205>Visible → Enabled
        f1SHojyoKbn2.Enabled := True;  //<205>Visible → Enabled
        Jituzai_DdxDBGridSHojyoKbn1.Visible := True;
        Jituzai_DdxDBGridSHojyoKbn2.Visible := True;
        Jituzai_DdxDBGrid.Bands[7].Visible := True;
        Jituzai_DdxDBGrid.Bands[8].Visible := True;
    end
    else
    begin
    // 資産ﾗｲｾﾝｽ無
(*
        Jituzai_DdxDBGridRenChar    .Width := 65;
        Jituzai_DdxDBGridLongName   .Width := 285;
        Jituzai_DdxDBGridSimpleName .Width := 170;
        Jituzai_DdxDBGridTKBN       .Width := 45;
        Jituzai_DdxDBGridSKBN       .Width := 45;
        Jituzai_DdxDBGridSHojyoKbn1 .Width := 45;
        Jituzai_DdxDBGridSHojyoKbn2 .Width := 45;
*)
        LblSHojyoKbn1.Enabled := False; //<205>Visible → Enabled
        LblSHojyoKbn2.Enabled := False; //<205>Visible → Enabled
        f1SHojyoKbn1.Enabled := False;  //<205>Visible → Enabled
        f1SHojyoKbn2.Enabled := False;  //<205>Visible → Enabled
        Jituzai_DdxDBGridSHojyoKbn1.Visible := False;
        Jituzai_DdxDBGridSHojyoKbn2.Visible := False;
        Jituzai_DdxDBGrid.Bands[7].Visible := False;
        Jituzai_DdxDBGrid.Bands[8].Visible := False;
    end;

    // <130>編集状態ｽｲｯﾁを初期化する
    m_EdtSw := False;

    m_bShowStart := True;  //<KSN> ADD
//m_Log.Log_Output('FormCreate-End');  //*Log*
end;


//**************************************************************************
//	Component	:	Form
//	Event	    :	OnClose
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormClose(Sender: TObject; var Action: TCloseAction);
var
	wkParam	        : TAppParam;
	iarMasterKbn    : Array of integer;
	DmQuery			: TMQuery;
	iRet      		: Integer;		// <MYN>
begin

	// 財務排他制御解除
//	if cExcept <> nil then
//	begin
//		cExcept.ResetTerm;
//		cExcept.Free;
//	end;

	if (gbHojyoTree2Flag = True) then
	begin
		// -----<MHIS> Add-St-----
		SessionPractice(C_ST_PROCESS);

		try
		// -----<MHIS> Add-Ed-----

		// 補助加算体系ﾏｽﾀ2を呼ぶ処理
		SetLength(iarMasterKbn, 1);
		iarMasterKbn[0] := ucTORIHIKI;

		// 加算更新処理
		MasTreee2Dlg:= TJNTMasTreee2Dlgf.Create(Self);
		if MasTreee2Dlg.ExecTree2(rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot,
										MDataModule,
//										m_pMyAppRecord.m_iCorpID,
                                        ComArea.m_iCopNo,
										iarMasterKbn, DmQuery ) < 0 then
		begin
			if (DmQuery <> nil) then
			begin
				MjsMessageBoxEx(Self,'加算体系更新に失敗しました。', '加算体系更新',mjError, mjOk, mjDefOk, FALSE );
				Beep;
				ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, DmQuery );
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,FALSE );
				DmQuery.Free;
			end
			else
			begin
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10,3);
				Beep;
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,FALSE );
			end;
		end;
		MasTreee2Dlg.Free;

		// -----<MHIS> Add-St-----
		finally
			SessionPractice(C_ED_PROCESS);
		end;
		// -----<MHIS> Add-Ed-----
	end;

	// 加算体系2 更新
{2005/07/14上記の方法で固まったので、↓↓↓のようにやってみたが、やっぱり固まる
	if (gbHojyoTree2Flag = True) then
	begin
		MasTreee2Dlg	:= TJNTMasTreee2Dlgf.Create (Self);

		//	補助加算体系ﾏｽﾀ２を呼ぶ処理
		SetLength( iarMasterKbn, 1 );
		iarMasterKbn[0] := ucTORIHIKI;			//	取引先(22)

		if	(MasTreee2Dlg.ExecTree2 (rcCOMMONAREA (m_pMyAppRecord^.m_pCommonArea^).SysRoot,
									MDataModule, ComArea.m_iCopNo, iarMasterKbn, Dmpuery) < 0) then
		begin
			if	(Dmpuery <> nil) then
			begin
				ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, Dmpuery );
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,FALSE );
				Dmpuery.Free ();
			end
			else
            begin
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10,3);
				Beep;
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,FALSE );
            end;
       	end;

		MasTreee2Dlg.Close ();
		MasTreee2Dlg.Free  ();
	end;

}
	gbHojyoTree2Flag	:=	False;

	if gbHojyoTreeDelFlag = True then											// メール会計履歴洗い替えﾌﾗｸﾞOn?
	begin
		gbHojyoTreeDelFlag := False;											// メール会計履歴洗い替えﾌﾗｸﾞOff
	end;

    // ↓↓↓<165>
    if ( m_NewRecord = TRUE ) then
	begin
		// ﾏｽﾀが新規登録されました。出力順序などの設定の見直しが必要と思われます。
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,30 );
		MjsMessageBoxEx(Self,
                        MjsMsgRec.sMsg,
                        MjsMsgRec.sTitle,
                        MjsMsgRec.icontype,
                        MjsMsgRec.btntype,
                        MjsMsgRec.btndef,
                        MjsMsgRec.LogType
                       );
	end;
    // ↑↑↑<165>

{	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	// ｽﾄｱﾄﾞの終了処理
	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(0,'',False,4));
	if (DmqData.ExecSQL  = False) then
	begin
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	DmqData.Close;
	DmqData.Free;
}

// <MYN> ins -s

	try
		iRet := m_MYNAcc.Term();
		if iRet <> MYNACCESS_SUCCESS then
		begin
// <MYN20> upd -s
//			MjsMessageBoxEx(Self, 'マイナンバーシステムの終了処理に失敗しました。（' + IntToStr(iRet) + '）',
			MjsMessageBoxEx(Self, 'MJSマイナンバーの終了処理に失敗しました。（' + IntToStr(iRet) + '）',
// <MYN20> upd -e
								 '警告', mjWarning, mjOK, mjDefOK);
		end;
		m_MYNAcc.Destroy();
	except
	end;

// <MYN> ins -e

    // 共通ｴｸｽﾌﾟﾛｰﾗの解放
    if uvExpOpenSW = TRUE then
        fnJNTExpFree;

    // WF用ｴｸｽﾌﾟﾛｰﾗの解放<WF>
    if uvWFExpOpenSW = TRUE then
        fnJNTWFExpFree;

// <136>
    // 販売ｼｽﾃﾑ情報の解放
    if ( uvSelSys <> nil ) then
	    uvSelSys.Free();

	DmqCtrlDb.Close;
	DmqCtrlDb.Free;

    // 印刷用ｸｴﾘｰの解放<PRN>
    DmqPrint.Close();
    DmqPrint.Free();

    // 共通DBｸﾛｰｽﾞ処理
    if ( CTRL_DB <> nil ) then
	    MDataModule.CTLDBClose(CTRL_DB);

    // 会社DBｸﾛｰｽﾞ処理
    if ( dbCorp_Select <> nil ) then
	    MDataModule.COPDBClose(dbCorp_Select);

//<D10>↓
	if	m_SyncMaster.m_flgGrpCorp = 1 then
	begin
		// TFDConnectionのマッピングをクリア
		m_SyncMaster.m_cPDBSelect.FormatOptions.MapRules.Clear;
		m_SyncMaster.m_cPDBSelect.FormatOptions.OwnMapRules := False;
	end;
//<D10>↑

    // 郵便番号辞書 終了
	fnCMNPostFree;
//<KSN> ADD St
    // 設定ボタンは非表示にする
    B_SetUp.Visible := False;
    B_SetUp.OnClick := nil;
    // ドラッグ用オブジェクトの開放
    if m_HojyoTree_Drag.HojyoTree <> nil then
    begin
        m_HojyoTree_Drag.HojyoTree.Free();
        m_HojyoTree_Drag.HojyoTree := nil;
    end;

    if m_HojyoTree_Drag.MTokui <> nil then
    begin
        m_HojyoTree_Drag.MTokui.Free();
        m_HojyoTree_Drag.MTokui := nil;
    end;

    // 検索関連
    if m_SrchMTokui <> nil then
    begin
        m_SrchMTokui.Free();
        m_SrchMTokui := nil;
    end;

    SetLength(m_NCodeArray,0);

    m_APGFILE.Free();  //APGファイル開放
//<KSN> ADD Ed

	m_pMyAppRecord^.m_iDelete := 1;
	wkParam.iAction			  := ACTID_FORMCLOSEEND;		// 呼び出し区分 設定
	wkParam.pRecord			  := Pointer(m_pMyAppRecord);	// 管理構造体ﾎﾟｲﾝﾀ設定
	wkParam.pActionParam	  := nil;						// 予備ﾎﾟｲﾝﾀ 設定

	TMjsAppRecord(m_pMyAppRecord^).m_pOwnerEntry(@wkParam);	// 親を呼び出す!!
	Action	:= caFree;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnDestroy
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormDestroy(Sender: TObject);
begin

    // ﾌﾘｰﾀﾞｲｱﾛｸﾞ開放<100>
    fnJNTFreeDlgFree();

    // 終了処理<PRN>
	gfnHaniTerm(uvHani);

    // <PRN>
    with PrtParam do
	begin
        Para		:=  uvHani;
		TargetQry   :=  nil;
        TargetMD    :=  nil;
		CorpSys		:=  uvSelSys;
	end;

    // 開放<PRN>
    PrintAppEntry(nil,nil,3,PrtParam,ArrHdl);

// <PRN>	mjspreview. Term();
// <PRN>	mjspreview. Free();

// <261>↓↓
    // 印刷モジュール開放
	if ( m_RepHandle <> 0 ) then
	begin
    	UnloadPackageHelper( m_RepHandle );
	end;
// <261>↑↑

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnCloseQuery
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
var
 	iRet	:	Integer;
begin
try //<502_002> ADD
    // 終了ﾌﾗｸﾞをONに設定する
    if ( CloseFlg = False ) then CloseFlg := True;

    MemData_EventCtrl(MemKasanChild,False);     //イベント制御 <KSN> ADD
    DBGrid_EventCtrl(Kasan_Child_DBGrid,False); //イベント制御 <KSN> ADD

    //  共通システム解放
//    m_cJNTArea.Free; <106>

// <136>FormCloseに移動
{    // 販売ｼｽﾃﾑ情報の解放
    if ( uvSelSys <> nil ) then
	    uvSelSys.Free();
}

// <PRN>	if mjspreview.IsPreView then
    if ( uvHani.mjspre.IsPreView = TRUE ) then  // <PRN>
   	begin
// <130>↓ｺﾒﾝﾄｱｳﾄしていたのを戻しました
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,2);
		Beep;
   		MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
	   	CanClose := FALSE;
// <130>↑
	end
	else
	begin
{
//		if m_fEnd = 1 then
//		begin
//			CanClose := True;
//			exit;
//		end;

        if BSpeedButtonIS.Caption = '一覧(&T)' then
        begin
            if (m_AcControl = f0NGCode) or (m_AcControl = f0TGCode) then
            begin
                m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                CanClose := True;
            end
            else
            begin
                m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                if not fnUpdateCheck(0) then											// 変更確認
                begin
//						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,2);
                    Beep;
                    iRet := MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
                    m_fEnd := 0;										// 終了ﾌﾗｸﾞOFF
                    case iRet of
                        mrYes:
                        begin
                            if not fnDataCheck(0) then
                            begin
                                CanClose := False;
                            end
                            else
                            begin
                                if not BtnClkWriteJ() then
                                begin
                                    m_fEnd := 0;										// 終了ﾌﾗｸﾞOFF
                                    CanClose := False;
                                end
                                else
                                begin
                                    m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                                    fnCreateCard(0);
                                    CanClose := True;
                                end;
                            end;
                        end;
                        mrNo:
                        begin
                            m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                            fnCreateCard(0);
                            CanClose := True;
                        end;
                        mrCancel:
                        begin
                            CanClose := False;
                        end;
                        else
                        begin
                            CanClose := False;
                        end;
                    end;
                end
                else
                begin
                    m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                    CanClose := True;
                end;
            end;
		end
		else
		begin
			if BSpeedButtonIS.Caption = '一覧(&T)' then
			begin
                m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                if not fnUpdateCheck(1) then
                begin
//						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,2);
                    Beep;
                    iRet := MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
                    m_fEnd := 0;									// 終了ﾌﾗｸﾞOFF
                    case iRet of
                        mrYes:
                        begin
                            if not fnDataCheck(1) then
                            begin
                                CanClose := False;
                            end
                            else
                            begin
                                m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                                fnCreateCard(1);
                                CanClose := True;
                            end;
                        end;
                        mrNo:
                        begin
                            m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                            fnCreateCard(1);
                            CanClose := True;
                        end;
                        mrCancel:
                        begin
                            CanClose := False;
                        end;
                        else
                        begin
                            CanClose := False;
                        end;
                    end;
                end
                else
                begin
                    m_fEnd := 1;										// 終了ﾌﾗｸﾞON
                    CanClose := True;
                end;
			end
			else
			begin
				m_fEnd := 1;										// 終了ﾌﾗｸﾞON
				CanClose := True;
			end;
		end;
}
// <130> St --------------------------------------------------------------------
        CanClose := True;

        //↓<229>
        // 詳細画面で、ｺｰﾄﾞﾌｨｰﾙﾄﾞが空でここに流れてきた場合は、編集スイッチをOFFにする。
        if B_Syousai.Caption = '一覧(&T)' then
        begin
        	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
        	begin
                if (f0NGCode.Value = 0) then
                begin
                    m_EdtSw := False;
                end;
            end
            else
            begin
                if (f0TGCode.Text = '') then
                begin
                    m_EdtSw := False;
                end;
            end;
//<KSN6> ADD St
            if (Root_PMTab.Items.Selected = PAGE_KASAN) then
            begin
                m_EdtSw := False;
            end;
//<KSN6> ADD Ed
        end;
        //↑<229>

//<KSSN> 	if (m_EdtSw)  then           // 変更あり
    	if (m_EdtSw) and (giReferFlag <> REFER) then           //<KSSN> 変更あり かつ 参照モードでない
	    begin
            // 変更を保存します。よろしいですか？
            ComArea.m_MsgStd.GetMsg(MjsMsgRec,10020,2);
            with MjsMsgRec do
            begin
                iRet := MjsMessageBoxEx(Self, sMsg, sTitle, icontype,
                                    btntype, btndef,LogType );
            end;

            if iRet = mrYes then            // 「はい」
            begin
//<502_001> ADD St
                if (isSyosaiMode()=true) then
                begin
                    if (SaiyoCheck(m_AcControl) = false) then
                    begin
                        CanClose := False;
                        Exit;
                    end;
// <MYN> ins -s
					if (f0MYNKbn.Text = MYN_HOUJIN) and (f0MYNNo.Text <> '') then
					begin
// <MYN15> upd -s
//						if (m_MYNAcc.CheckMyNumber(f0MYNNo.Text) = False) then
						if (fnCheckCorpNum(f0MYNNo.Text) = False) then
// <MYN15> upd -e
    	                begin
	                        CanClose := False;

							Beep;
        		    	    PMTab.items.Selected := 0;
// <MYN15> ins -s
							MjsmessageBoxEx(Self,'入力値が正しくありません。法人番号を見直してください。','法人番号入力',mjInformation,mjOk,mjDefOk);
            			    if (TMTxtEdit(f0MYNNo).CanFocus) then
// <MYN15> ins -e
								MjsSetFocus(Self,TMTxtEdit(f0MYNNo).name);	// 元の場所に戻す
// <MYN15> upd -s Abortは使えない。
//                            Abort;
							CanClose := False;
							Exit;
// <MYN15> upd -e
	                   	end;
					end;
// <MYN> ins -e
                end
                else
                    TagClear_Saiyo();
//<502_001> ADD Ed
                if not UpdateMTOKUI() then  // 入力ﾁｪｯｸ・更新処理
                    CanClose := False       // 入力ﾁｪｯｸでｴﾗｰ時は閉じない
                else
                    m_EdtSw := False;
            end
            else if iRet = mrCancel then    // 「ｷｬﾝｾﾙ」
            begin
                CanClose := False;
            end
            else                            // 「いいえ」
            begin
                m_EdtSw := False;
            end;
        end;

// <130> Ed --------------------------------------------------------------------

	end;
//<502_002> ADD St
finally
    CloseFlg := CanClose;
end;
//<502_002> ADD Ed
end;

//**************************************************************************
//	Proccess  :	CM_CHILDKEY
//	Name	  :	Sin.Nakamura
//	Date	  :	2000/ 08 / 09
//	Parameter :	Msg		TWMKey
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.CMChildKey(var Msg: TWMKey);
var
	sShift		:	TShiftState;
	iRet		:	Integer;
    iEndTab     :   Integer;
    strLastFLD  :   String;
	strGCode	:	String;
    strValue : string;      //<502_001@> ADD
//<KSN> ADD St
    //-----------------------------------
    // 加算体系タブ用の内部関数
    //-----------------------------------
    procedure CMChildKey_Kasan();
    begin

        if m_AcControl is TdxDBGrid then
        begin
            // Esc処理
            if	((Msg.CharCode = VK_ESCAPE) and (sShift = [])) then
            begin
                if	(MemKasanChild.State in [dsEdit, dsInsert]) then						// ﾃﾞｰﾀ入力中
                    Exit;

                if m_AcControl = Kasan_Child_DBGrid then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                    Abort;
                end;
                MComboBox.SetFocus ();
                Abort;
            end;
            // Shift+TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
            begin
                if m_AcControl = Kasan_Parent_DBGrid then
                begin
                    if MemKasanParent.RecNo = 1 then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
                        Abort;
                    end;
                end;

                 if m_AcControl = Kasan_Child_DBGrid then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                    Abort;
                end;
            end;
            // ←,↑処理
            if ((Msg.CharCode = VK_LEFT)  and (sShift = [])) or
               ((Msg.CharCode = VK_UP)   and (sShift = [])) then
            begin
                if MemKasanChild.RecNo = 1 then
                begin
                    if m_AcControl = Kasan_Child_DBGrid then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                        Abort;
                    end;
                end;
            end;
            // TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[]) then
            begin
                if m_AcControl = Kasan_Parent_DBGrid then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Child_DBGrid');
                    (m_AcControl as TdxDBGrid).DataSource.DataSet.FieldByName('GCode').FocusControl();
                    Abort;
                end;
            end;
            // Enter,→,↓処理
            if ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
               ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
               ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
            begin
                if m_AcControl = Kasan_Parent_DBGrid then
                begin
                    if MemKasanParent.RecNo = MemKasanParent.RecordCount then  // 最終行？
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Child_DBGrid');
                        (m_AcControl as TdxDBGrid).DataSource.DataSet.FieldByName('GCode').FocusControl();
                        Abort;
                    end;
                end;
            end;
        end;

        if m_AcControl = Root_PMTab then
        begin
            // TAB,Enter,→,↓処理
            if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
               ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
               ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
               ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                Abort;
            end;

            // Shift+TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
            begin
                Abort;
            end;
        end;
    end;
//<KSN> ADD Ed
begin
    //<150>ST-------------------------
    // 最終TAB項目ｾｯﾄ
    iEndTab := 0;
    if (Root_PMTab.Items.Selected  = PAGE_JITUZAI) then
        iEndTab := PAGE_Br
    else if (Root_PMTab.Items.Selected = PAGE_GOKEI) then
        iEndTab := PAGE_Saiyo;
    //<150>ED-------------------------

    fnCngCodeProperty(false);   //<156>

    //-------------------------------------------------------------------------
    // ｷｰのﾄﾗｯﾌﾟ
    //-------------------------------------------------------------------------
//<248>	sShift := KeyDataToShiftState(Msg.KeyData);		        // Shiftｷｰの取得
	sShift := JNTSELXKeyDataToShiftState(Msg.KeyData);		        // Shiftｷｰの取得<248>

    // ??
	if GetKeyState(VK_MENU) < 0 then
		Exit;

//<KSN> ADD St
    if PPanelKasan.Visible then
    begin
        CMChildKey_Kasan();
        if not (Msg.CharCode = VK_F3) then  // ファンクションキーの制御は下で行うので、ここで抜けない
            Exit;
    end;
//<KSN> ADD Ed

	if m_AcControl is TSelectStrGrid then			        // TMNumEditのItemsが開いている？
		Exit;

    // TComboBoxの↑↓のｷｰは処理しない
    if m_AcControl is TMComboBox then
    begin
		if (Msg.CharCode = VK_UP)   or
           (Msg.CharCode = VK_DOWN) then
            Exit;
    end;

	// ｷｬﾚｯﾄが入力ﾌｨｰﾙﾄﾞの途中にある場合、LEFT, RIGHTｷｰでのﾌｫｰｶｽ移動は禁止する
   	if (m_AcControl is TMTxtEdit) then
	begin
        // LEFT
		if Msg.CharCode = VK_LEFT then
		begin
			if not MjsChkCurTop(m_AcControl) then
			    Exit;
		end;

        // RIGHT
		if Msg.CharCode = VK_RIGHT then
		begin
			if not MjsChkCurEnd(m_AcControl) then
			    Exit;
		end;
	end;


    //-------------------------------------------------------------------------
    // ｺﾝﾄﾛｰﾙ別のｷｰのﾄﾗｯﾌﾟ
    //-------------------------------------------------------------------------

    //-------------------------------------------------------------------------
	// dxGridのの制御
    //-------------------------------------------------------------------------
    if m_AcControl = Jituzai_DdxDBGrid then
    begin

        // Esc処理
		if	((Msg.CharCode = VK_ESCAPE) and (sShift = [])) then
		begin
			if	((JHojyoMA_DMemData.State in [dsEdit, dsInsert]) or	                // ﾃﾞｰﾀ変更中
				 (Jituzai_DdxDBGrid.EditingText <> '')) then						// ﾃﾞｰﾀ入力中
				Exit;

			MComboBox.SetFocus ();
			Abort;
		end;


        // Shift+TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
        begin
            if ((JHojyoMA_DMemData.RecNo = 0) and
                (Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE)) or
               ((JHojyoMA_DMemData.RecNo = 1) and
                (Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE)) or
               (giReferFlag = REFER)                           then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
                Abort;
            end;
        end;

        // F8処理
        if (Msg.CharCode = VK_F8) then
        begin
            // 簡略名称の場合 正式名称から14Byteｺﾋﾟｰする
            if Jituzai_DdxDBGrid.FocusedColumn = COL_S_NAME then
            begin
                JHojyoMA_DMemData.Edit;
//<126>                JHojyoMA_DMemDataSimpleName.AsString := MjsCopy(JHojyoMA_DMemDataLongName.AsString, 14);
//<127>                JHojyoMA_DMemDataSimpleName.AsString := MjsCopy(JHojyoMA_DMemDataLongName.AsString, 20);
                JHojyoMA_DMemDataSimpleName.AsString := MJSKabuCut(JHojyoMA_DMemDataLongName.AsString, 20);
            end;
        end;
    end;

    //-------------------------------------------------------------------------
	// 実在、合計ﾀﾌﾞのｷｰ制御
    //-------------------------------------------------------------------------
	if m_AcControl = Root_PMTab then
	begin
        // ENTER処理
		if Msg.CharCode = VK_RETURN then
		begin
            if B_Syousai.Caption = '詳細(&T)' then          // 一覧
            begin
                // 実在ｸﾞﾘｯﾄﾞの外部ｺｰﾄﾞへﾌｫｰｶｽを移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
                Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
                Abort;
            end
            else begin                                      // 詳細
                if giReferFlag = NORMAL then
                begin
                    // 外部ｺｰﾄﾞへﾌｫｰｶｽを移動
                    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                        MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
                    else
                        MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
                    Abort;
                end;
            end;
		end;

		// Shift＋Tab処理
		if ((Msg.CharCode=VK_TAB) and (sShift=[ssShift])) then
		begin
			// ﾂﾘｰへﾌｫｰｶｽを移動
			MjsDispCtrl.MjsSetFocus(Self, 'VTreeView');
			Abort;
		end;

        // END処理
		if Msg.CharCode = VK_END then
		begin
			if B_Syousai.Caption = '一覧(&T)' then          // 詳細
			begin
				if giReferFlag = NORMAL then
				begin
                    //<150> MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                    //<150>---ST---
                    if (PMTab.Items.Selected = iEndTab) then
                    begin
                        if (Jituzai_BBitBtn_Ok.Enabled) then
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');// 更新ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                    end
                    else
                    begin
                        if (BtnPageNext.Enabled) then
                            MjsDispCtrl.MjsSetFocus(Self, 'BtnPageNext')        // 次頁ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                    end;
                    //<150>---ED---

                    Abort;
				end;
			end;
		end;

        // LEFT,RIGHT処理
		if (Msg.CharCode = VK_LEFT) or (Msg.CharCode = VK_RIGHT) then
            Exit;
	end;

    //-------------------------------------------------------------------------
	// 詳細ﾀﾌﾞのｷｰ制御
    //-------------------------------------------------------------------------
	if m_AcControl = PMTab then
	begin
        // LEFT,RIGHT処理
		if (Msg.CharCode = VK_LEFT) or (Msg.CharCode = VK_RIGHT) then
            Exit;
    end;

    //-------------------------------------------------------------------------
	// ﾂﾘｰのｷｰ制御
    //-------------------------------------------------------------------------
	if m_AcControl = VTreeView then
	begin
        // ENTER or TAB処理
		if (Msg.CharCode = VK_RETURN) or (Msg.CharCode = VK_TAB) then
		begin
            if B_Syousai.Caption = '詳細(&T)' then          // 一覧
            begin
                // 実在ｸﾞﾘｯﾄﾞの外部ｺｰﾄﾞへﾌｫｰｶｽを移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
				Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
                Abort;
            end
            else begin                                      // 詳細
                if giReferFlag = NORMAL then
                begin
                    // 外部ｺｰﾄﾞへﾌｫｰｶｽを移動
                    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                        MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
                    else
                        MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
                    Abort;
                end;
            end;
		end;
{ 検索機能は保留中
		if (Msg.CharCode = VK_F3) and (sShift=[]) then
		begin
			if m_SearchInfo.sKojCD = '' then				// 検索対象ｺｰﾄﾞが存在しない時
				BSpeedButtonFindClick(Self)					// 検索DLG表示
			else 											// 検索対象ｺｰﾄﾞが存在する時
				fnSearch();									// 検索
		end;
}
		exit;
	end;

    //-------------------------------------------------------------------------
	// 頁移動ﾎﾞﾀﾝの制御<150>
    //-------------------------------------------------------------------------
	if (m_AcControl = BtnPagePrevious) or (m_AcControl = BtnPageNext) then
	begin
        // ENTER処理
		if Msg.CharCode = VK_RETURN then
		begin
            // 頁移動ﾎﾞﾀﾝｸﾘｯｸ処理呼び出し
			fnCmnPageMoveClick(m_AcControl);
			Abort;
		end;

        // Shift+TAB, LEFT, UP処理
		if ((Msg.CharCode = VK_TAB) and (sShift=[ssShift])) or
		    (Msg.CharCode = VK_LEFT)                        or
		    (Msg.CharCode = VK_UP)                          then
		begin
            // 一つ前のｺﾝﾄﾛｰﾙへﾌｫｰｶｽを移動
			MjsPrevCtrl(Self);
			Abort;
		end;

        // TAB, RIGHT, DOWN処理
		if ((Msg.CharCode = VK_TAB) and (sShift=[]))        or
		    (Msg.CharCode = VK_RIGHT)                       or
		    (Msg.CharCode = VK_DOWN)                        then
		begin
			// 次項目ﾎﾞﾀﾝへﾌｫｰｶｽを移動
            MjsNextCtrl(Self);
			Abort;
		end;
	end;

    //-------------------------------------------------------------------------
	// 実在更新ﾎﾞﾀﾝの制御
    //-------------------------------------------------------------------------
	if m_AcControl = Jituzai_BBitBtn_Ok then
	begin
        // ENTER処理
		if Msg.CharCode = VK_RETURN then
		begin
            // 更新ﾎﾞﾀﾝｸﾘｯｸ処理呼び出し
			Jituzai_BBitBtn_OkClick(Jituzai_BBitBtn_Ok);
			Abort;
		end;

        // Shift+TAB, LEFT, UP処理
		if ((Msg.CharCode = VK_TAB) and (sShift=[ssShift])) or
		    (Msg.CharCode = VK_LEFT)                        or
		    (Msg.CharCode = VK_UP)                          then
		begin
            // 一つ前のｺﾝﾄﾛｰﾙへﾌｫｰｶｽを移動
			MjsPrevCtrl(Self);
			Abort;
		end;

        // TAB, RIGHT, DOWN処理
		if ((Msg.CharCode = VK_TAB) and (sShift=[]))        or
		    (Msg.CharCode = VK_RIGHT)                       or
		    (Msg.CharCode = VK_DOWN)                        then
		begin
			// 取消ﾎﾞﾀﾝへﾌｫｰｶｽを移動
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Cancel');
			Abort;
		end;
	end;

    //-------------------------------------------------------------------------
	// 実在取消ﾎﾞﾀﾝの制御
    //-------------------------------------------------------------------------
	if m_AcControl = Jituzai_BBitBtn_Cancel then
	begin
        // ENTER処理
		if Msg.CharCode = VK_RETURN then
		begin
            // 取消ﾎﾞﾀﾝｸﾘｯｸ処理呼び出し
			Jituzai_BBitBtn_CancelClick(Jituzai_BBitBtn_Cancel);
			Abort;
		end;

        // Shift+TAB, LEFT, UP処理
		if ((Msg.CharCode = VK_TAB) and (sShift=[ssShift])) or
		    (Msg.CharCode = VK_LEFT)                        or
		    (Msg.CharCode = VK_UP)                          then
		begin
            // 一つ前のｺﾝﾄﾛｰﾙへﾌｫｰｶｽを移動
			MjsPrevCtrl(Self);
			Abort;
		end;

        // TAB, RIGHT, DOWN処理
		if ((Msg.CharCode = VK_TAB) and (sShift=[]))        or
		    (Msg.CharCode = VK_RIGHT)                       or
		    (Msg.CharCode = VK_DOWN)                        then
		begin
			// 連想に移動
// <109>			MjsDispCtrl.MjsSetFocus(Self, 'f0RenChar');
			abort;
		end;
	end;

// <MYN> ins -s
    //-------------------------------------------------------------------------
	// 登録ﾎﾞﾀﾝの制御
    //-------------------------------------------------------------------------
	if m_AcControl = BtnMYNKojinUpd then
	begin
		// Shift+ENTER, SPACE処理
		if ((sShift=[ssShift]) and (Msg.CharCode = VK_RETURN)) or
			(Msg.CharCode = VK_SPACE)then
		begin
            // 登録ﾎﾞﾀﾝｸﾘｯｸ処理呼び出し
			Button1Click(BtnMYNKojinUpd);
			Abort;
		end;

        // ENTER処理
		if Msg.CharCode = VK_RETURN then
		begin
			// 次項目ﾎﾞﾀﾝへﾌｫｰｶｽを移動
            MjsNextCtrl(Self);
			Abort;
		end;
	end;
// <MYN> ins -e

    //-------------------------------------------------------------------------
	// 取引先ｺｰﾄﾞの制御
    //-------------------------------------------------------------------------
    if (m_AcControl = f0TGCode) or (m_AcControl = f0NGCode) then
    begin
        // Esc処理
		if	((Msg.CharCode = VK_ESCAPE) and (sShift = [])) then
		begin
			MComboBox.SetFocus ();
			Abort;
		end;

        // 取引先ｺｰﾄﾞの場合↑←ｷｰは無効 <154>
        if ((Msg.CharCode=VK_UP)   and (sShift=[])) or
           ((Msg.CharCode=VK_LEFT) and (sShift=[])) then
		    Abort;


        // Shift+Tabの場合は実在/合計ﾀﾌﾞへ移動
        if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
        begin
            MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
            Abort;
        end;

//<194>↓
		// TAB,Enter,→,↓処理
		if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
		   ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
		   ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
		   ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
		begin

			if LSinsei.Visible	then
			begin
				strGCode := '';
				if m_AcControl = f0NGCode then
				begin
					if (f0NGCode.InputFlag = False) or (f0NGCode.Value <> 0) then
						strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);
				end
				else
				begin
					if f0TGCode.Text <> '' then
						strGCode	:= f0TGCode.Text;
				end;

				if strGCode <> '' then
				begin
					iRet := fnMTOKUI_Chk(strGCode, Root_PMTab.Items.Selected);

					if iRet <> 0 then
					begin

						iRet := MjsMessageBoxEx(Self, '選択したｺｰﾄﾞは既に登録済みです。'+#13#10+'申請書参照をキャンセルしてよろしいですか？', '取引先登録', mjQuestion, mjYesNo, mjDefNo);
						if iRet <> mrYes then
						begin
							if m_AcControl = f0NGCode then
								f0NGCode.SelectAll
							else
								f0TGCode.SelectAll;
							abort;
						end
						else
						begin
							LSinsei.Visible := False;
						end;
					end;

//					PPanelTree.Enabled		:= True;
					PPanel_Kihon.Enabled	:= True;
					PPanel_Saiyo.Enabled	:= True;
					PPanel_Seg.Enabled		:= True;
					PPanel_Br.Enabled		:= True;
					Jituzai_BBitBtn_Ok.Enabled := True;

//<243> ↓
                    //F1:ﾌﾘｰ項目情報登録の表示
                    fnSetFncType(1);
                    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
//<243> ↑
				end;
			end;

// <MYN2> ins -s
			if (m_AcControl = f0NGCode) then
			begin
				if (f0NGCode.Text <> '') then
					m_CodeReturn	:= True;
			end
			else
			if (m_AcControl = f0TGCode) then
			begin
				if (f0TGCode.Text <> '') then
					m_CodeReturn	:= True;
			end;
// <MYN2> ins -e
		end;
//<194>↑

	end;

    //-------------------------------------------------------------------------
	// 正式名称(詳細)の制御
    //-------------------------------------------------------------------------
    //<124>---St---
    if (m_AcControl = f0NGCode) or  (m_AcControl = f0TGCode) then
    begin
        if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
        begin
            MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
            Abort;
        end;
    end;
    //<124>---St---

	if (m_AcControl = f0LongName) then
	begin
        if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
        begin
            MjsDispCtrl.MjsSetFocus(Self, 'PMTab');
            Abort;
        end;
    end;

    //-------------------------------------------------------------------------
	// 簡略名称(詳細)の制御
    //-------------------------------------------------------------------------
	if (m_AcControl = f0SimpleName) then
	begin
        // 正式名称から14Byteｺﾋﾟｰする
        if (Msg.CharCode=VK_F8) then
//<126>            f0SimpleName.Text := MjsCopy(f0LongName.Text, 14);
//<127>            f0SimpleName.Text := MjsCopy(f0LongName.Text, 20);
            f0SimpleName.Text := MJSKabuCut(f0LongName.Text, 20);
	end;


    //-------------------------------------------------------------------------
	// 共通のｷｰ制御
    //-------------------------------------------------------------------------
	// TAB,Enter,→,↓処理
	if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
	   ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
	   ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
	   ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
	begin
        if m_AcControl <> Jituzai_DdxDBGrid then
        begin
//<226> ↓
            //詳細画面の項目チェック
            //フィールド入力値のチェックをする
            if not fnFldChk(Screen.ActiveControl, False) then
            begin
                Msg.Result := 0;
                Exit;
            end;
//<226> ↑
//<502_001> ADD St
//<502_001@> ADD St
            strValue := '';

            if (m_AcControl is TMComboBox) then
                strValue := IntToStr((m_AcControl as TMComboBox).ItemIndex)
            else if (m_AcControl is TMNumEdit) then
                strValue := (m_AcControl as TMNumEdit).Text;

            if ((not (m_AcControl is TMCheckBox)) and (strValue <> m_sSaveValue)) then
//<502_001@> ADD Ed
                if (SaiyoCheck(m_AcControl) = false) then abort;
//<502_001> ADD Ed
            if fnDataCheck(TComponent(Screen.ActiveControl),False,Root_PMTab.items.selected) then
            begin
                // 外部ｺｰﾄﾞの場合 TreeClickﾌﾗｸﾞをFalseにする <174>
                if (m_AcControl = f0TGCode) or (m_AcControl = f0NGCode) then
                begin
                    gbTreeClick := False;

                    // 外部ｺｰﾄﾞから次のﾌｨｰﾙﾄﾞへ移動する場合はｶｰﾄﾞの先頭ﾌｨｰﾙﾄﾞへ移動する
                    // ※ 下記、MjsNextCtrlでPMTabへ移動し、さらに下記、if文のelse内の
                    //　　MjsNextCtrlでｶｰﾄﾞの先頭ﾌｨｰﾙﾄﾞへ移動する
                    MjsNextCtrl(Self);
                end;

                //<150>---ST---
                strLastFLD := fnGetLastFLD();     // 最終ﾌｨｰﾙﾄﾞ取得
                // 最終ﾌｨｰﾙﾄﾞの場合は、ﾎﾞﾀﾝへ移動する
                if (strLastFLD = m_AcControl.Name) or (strLastFLD = '') then
                begin
                    if (PMTab.Items.Selected = iEndTab) then
                    begin
                        if (Jituzai_BBitBtn_Ok.Enabled) then
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');// 更新ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                    end
                    else
                    begin
                        if (BtnPageNext.Enabled) then
                            MjsDispCtrl.MjsSetFocus(Self, 'BtnPageNext')        // 次頁ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                    end;
                end
                else
                //<150>---ED---
                begin
                    MjsNextCtrl(Self);
                end;
                Abort;
            end
            else
            begin
                Abort;
            end;
        end;
	end;

    // Shift+TAB,←,↑処理
	if ((Msg.CharCode = VK_TAB)  and (sShift = [ssShift])) or
	   ((Msg.CharCode = VK_LEFT) and (sShift = []))        or
	   ((Msg.CharCode = VK_UP)   and (sShift = []))        then
    begin
        if m_AcControl <> Jituzai_DdxDBGrid then
        begin
            MjsPrevCtrl(Self);
            Abort;
        end;
    end;

//<125>--- ST ---
    // Esc End処理
	if ((Msg.CharCode = VK_ESCAPE) and (sShift = [])) or
        ((Msg.CharCode = VK_END) and (sShift = [])) then
    begin
        if m_AcControl <> Jituzai_DdxDBGrid then
        begin
            if Jituzai_BBitBtn_Ok.Enabled then
            begin
                //<150>---ST---
//<150>                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                if (PMTab.Items.Selected = iEndTab) then
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok') // 更新ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                else
                begin
                    if (BtnPageNext.Enabled) then
                        MjsDispCtrl.MjsSetFocus(Self, 'BtnPageNext')        // 次頁ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                end;
                //<150>---ED---

                Abort;
            end;

            if Jituzai_BBitBtn_Cancel.Enabled then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Cancel');
                Abort;
            end;

            if giReferFlag = NORMAL then
            begin
                // 外部ｺｰﾄﾞへﾌｫｰｶｽを移動
                if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                    MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
                else
                    MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
                Abort;
            end;

        end;
    end;
//<125>--- ED ---

	// F3
// <109>	if (Msg.CharCode = VK_F3) and (sShift=[]) then
// <109>	begin
// <109>		if m_SearchInfo.sKojCD = '' then				// 検索対象ｺｰﾄﾞが存在しない時
// <109>			BSpeedButtonFindClick(Self)					// 検索DLG表示
// <109>		else 											// 検索対象ｺｰﾄﾞが存在する時
// <109>			fnSearch();									// 検索
// <109>	end;

    // <100>*** ﾌｧﾝｸｼｮﾝ ***
    case Msg.CharCode of
    VK_F1:  MSPFunctionBarFunctionClick(MSPFunctionBar, 1);
    VK_F2:  MSPFunctionBarFunctionClick(MSPFunctionBar, 2);
    VK_F3:  MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
    VK_F4:  MSPFunctionBarFunctionClick(MSPFunctionBar, 4);
    VK_F5:  MSPFunctionBarFunctionClick(MSPFunctionBar, 5);
    VK_F6:  MSPFunctionBarFunctionClick(MSPFunctionBar, 6);
    VK_F7:  MSPFunctionBarFunctionClick(MSPFunctionBar, 7);
    VK_F8:  MSPFunctionBarFunctionClick(MSPFunctionBar, 8);
    end;

    // ｸﾞﾘｯﾄﾞの場合はinheritedしない(親BPL(JNTCRP004000u)のCMChildKeyを呼ばない))
    if (m_AcControl = Jituzai_DdxDBGrid) then
        Exit;

	inherited;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnShow
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormShow(Sender: TObject);
begin

    // <100>  ファンクションキーの設定
    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

	JNTMASSetCaption( m_pMyAppRecord );
	MJSBtnVisible( TJNTCRP004001f(Self), True );

	if (m_iMailKbn = 1) or (giReferFlag = REFER) then
	begin
//<157>		B_Delete.Visible := False;
		B_Delete.Enabled := False;  //<157>
		TPDelete.Visible := False;
	end;

	if giReferFlag = REFER then
		BSpeedButtonSort.Visible := False;

	if giReferFlag = BASICONLY then
	begin
		B_Syousai.Visible := False;
		TPDetail.Visible := False;
	end;

// <PRN>	if mjspreview.IsPreview then
// <PRN>		mjspreview.Show
    if ( uvHani.mjspre.IsPreView = TRUE ) then  // <PRN>
		uvHani.mjspre.Show                      // <PRN>
	else
		m_AcControl.SetFocus;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnPaint
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.WMOnPaint(var Msg: TMessage);
var
//	JNTCRP004001Chk: TJNTCRP004001ChkDlgf;
	JNTCRP004001Syo: TJNTCRP004001SyokuchiDlgf;
	iCodeDigit	: Integer;
	iCodeAttr	: Integer;
//<KSN> DEL	iSumKbn		: Integer;
	QueryRead	: TMQuery;
	iCorpKbn	: Integer;
	iDataKbn	: Integer;
	iUseKbn		: Integer;
	stMessageRec: TMJSMsgRec;
	stWork		: String;
	stName		: String;
	iRet		: Integer;
	stBusyoName	: String;
begin
	// 排他制御処理で失敗
//	if m_bExFlg = True then
//	begin
//		Close;
//		exit;
//	end;
//<KSN> DEL St
// fnRead()に移動
{
	if giCloseFlg <> 0 then
	begin
		raise EMathError.Create('加算体系の表示に失敗しました｡');
		Close;
		Exit;
	end;
}
//<KSN> DEL Ed
	if giChkFlg = 0 then
	begin

		QueryRead		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
		gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

		iCorpKbn := 0;
		iDataKbn := 0;
		iUseKbn := 0;
		stName := '';
		stBusyoName := '';
        Jituzai_LLabel_GCode.Caption :=  '';

		// 会社基本情報読み込み
		try

			QueryRead.Close;
			QueryRead.SQL.Clear;
			QueryRead.SQL.Add('Select DataKbn,CorpKbn from DTMAIN_MAS');
			QueryRead.Open;

			if QueryRead.Eof = False then
            begin
				iCorpKbn := QueryRead.GetFld('CorpKbn').AsInteger;
				iDataKbn := QueryRead.GetFld('DataKbn').AsInteger;
            end;

			// ﾏｽﾀ基本情報読み込み
			QueryRead.Close;
			QueryRead.SQL.Clear;
			QueryRead.SQL.Add('Select UseKbn, JHojyoName from MasterInfo');
			QueryRead.SQL.Add('Where MasterKbn = :pMKBN');
            QueryRead.ParamByName('pMKBN').AsInteger := ucTORIHIKI;
			QueryRead.Open;

			if QueryRead.Eof = False then
			begin
				iUseKbn := QueryRead.GetFld('UseKbn').AsInteger;
				stName := QueryRead.GetFld('JHojyoName').AsString;
                Jituzai_LLabel_GCode.Caption :=  stName;
				stName := Trim(stName);
			end;

			if stName = '' then
				stName := '取引先';

			// 部署だったら読み込み
			if iDataKbn = 3 then
			begin
				// ｼｽﾃﾑ基本情報読み込み
				QueryRead.Close;
				QueryRead.SQL.Clear;
				QueryRead.SQL.Add('Select SysName from MasInfo Where SysID = 1007');
				QueryRead.Open;

				if QueryRead.Eof = False then
					stBusyoName := QueryRead.GetFld('SysName').AsString;

				if stBusyoName = '' then
					stBusyoName := '部署';
			end;

			// 法人区分が取引先以外で、採用がない場合は終了
			if ((iCorpKbn <> 3) and (iCorpKbn <> 4)) and (iUseKbn = 0) then
			begin
//				ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 10);
//				stWork := ComArea.m_MsgStd.MsgChange(stMessageRec.sMsg,'@_@',stName);
				Beep;
				MjsMessageBoxEx(Self,stWork, stMessageRec.sTitle,stMessageRec.icontype ,
								stMessageRec.btntype , stMessageRec.btndef,stMessageRec.LogType );
//<264> DEL				Close;
				Exit;
			end;

			// 取引先が未登録で登録権利がない場合
{			if giReferFlag = REFER then
			begin
				MjsMessageBoxEX(Self,stName + '情報が未登録のため処理を終了します。',
								'登録',mjInformation, mjOk, mjDefOk);
				Close;
				Exit;
			end;
}
			// 部署で取引先が未登録の場合
			if iDataKbn = 3 then
			begin
				Beep;
				MjsMessageBoxEX(Self,'経理側で「諸口マスタ」が未登録のため'#13#10 + stBusyoName + '側でのマスタ登録は行えません。',
								'登録',mjWarning, mjOk, mjDefOk);
//<264> DEL				Close;
				Exit;
			end;

			// 取引先採用確認
			if iUseKbn = 0 then
			begin
				iRet := MjsMessageBoxEX(Self,'会社基本情報では「採用なし」の設定ですが、'#13#10'登録処理を継続しますか？',
										'登録',mjQuestion, mjYesNo, mjDefNo);

				if iRet <> mrYes then
				begin
//<264> DEL					Close;
					exit;
				end;
			end;
{
			// 採用区分Dlg表示
			if giAllCnt = 0 then
			begin
				JNTCRP004001Chk	:= TJNTCRP004001ChkDlgf.fnCreateDialog (Self, MDataModule, dbCorp_Select, ComArea,ucTORIHIKI, m_pMyAppRecord);
				if JNTCRP004001Chk <> nil then
				begin
					if	(JNTCRP004001Chk.ShowModal () = mrCancel) then
					begin
						JNTCRP004001Chk.Release;
						Close;
						Exit;
					end;
					JNTCRP004001Chk.Release;
				end
				else
				begin
					raise EMathError.Create('採用区分ダイアログの作成に失敗しました｡');
					Close;
					Exit;
				end;
			end;
}
            // 変更後ﾏｽﾀ基本情報再読み込み
			fnMasterInfoRead();

            if giReferFlag <> REFER then
            begin

				// -----<MHIS> Add-St-----
				SessionPractice(C_ST_PROCESS);

				try
				// -----<MHIS> Add-Ed-----

                iCodeDigit := MasterInfo_DMemDataCodeDigit.AsInteger;
                iCodeAttr := MasterInfo_DMemDataCodeAttr.AsInteger;

                // 諸口登録Dlg表示
                JNTCRP004001Syo	:= TJNTCRP004001SyokuchiDlgf.fnCreateDialog
                            (Self, MDataModule, dbCorp_Select, ComArea, ucTORIHIKI,
                                iCodeDigit, iCodeAttr, gstErrorStr, m_pMyAppRecord, @m_SyncMaster); // <Rel>
                if JNTCRP004001Syo <> nil then
                begin
                    if	(JNTCRP004001Syo.ShowModal () = mrCancel) then
                    begin
                        JNTCRP004001Syo.Release;

                        // ↓↓↓<117>
                        // 子BPLをCLOSEせず、親ｺﾝﾎﾞ指示へﾌｫｰｶｽを移動させることで対処
                        with MComboBox do
                        begin
                            ItemIndex   :=  0;
                            DroppedDown :=  TRUE;
                            SetFocus();
                        end;
                        fnSetEnabled(FALSE);
                        Exit;
                        // ↑↑↑<117>

// <117>                        Close;
// <117>                        Exit;
                    end;
                    JNTCRP004001Syo.Release;
                end
                else
                begin
                    raise EMathError.Create('諸口登録ダイアログの作成に失敗しました｡');
//<264> DEL                    Close;
                    Exit;
                end;

				// -----<MHIS> Add-St-----
				finally
					SessionPractice(C_ED_PROCESS);
				end;
				// -----<MHIS> Add-Ed-----

            end;

			// 登録件数表示
			QueryRead.Close;
			QueryRead.SQL.Clear;
//<256> DEL 			QueryRead.SQL.Add('Select Count(*) As Kensu from MTOKUI');
 			QueryRead.SQL.Add('Select Count(NCode) As Kensu from MTOKUI');  //<256> ADD
    		QueryRead.SQL.Add('Where RDelKbn=0');
    		QueryRead.SQL.Add(' and SumKbn=0');
            QueryRead.SQL.Add(' and TemplateKbn=0');                // <112>
			QueryRead.Open;

            // 登録件数取得
			giAllCnt := QueryRead.GetFld('Kensu').AsInteger;
			LblRecCnt.Caption := IntToStr(giAllCnt);
//				LblRecCnt.AutoSize := True;

		finally
			QueryRead.Close;
			QueryRead.Free;
		end;
//<KSN> DEL St
{
		// Flag Clear
		MemPost_Sw	:= 1;
		m_fAccessTree    := False;

		// TreeView 作成
		fnRebuildTreeViewItems ();

        // TreeView はぐれ作成
		if fnRebuildTreeViewItemsHagure () = False then
		begin
			Close;
			exit;
		end;

		// Grid 初期表示
		TBaseNode	:= VTreeView.Items[0];
		TBaseNodeSv	:= VTreeView.Items[0];

        // 実在ｸﾞﾘｯﾄﾞ
		iSumKbn		:= 0;
		fnCreateGrid (TBaseNode, iSumKbn);
		if JHojyoMA_DMemData.Eof = False then
		begin
            if Jituzai_DdxDBGrid.CanFocus then  // <144>追加
                Jituzai_DdxDBGrid.SetFocus;     // <144>追加
	        JHojyoMA_DMemData.DisableControls; //<249>
			JHojyoMA_DMemData.First;
	        JHojyoMA_DMemData.EnableControls; //<249>
//<256> DEL			fnCreateCard (iSumKbn);
		end
		else
//			fnClearCard  (iSumKbn,0); <108>
			fnClearCard  (0);
}
//<KSN> DEL Ed
		MemPost_Sw	:= 0;
		giChkFlg := 1;
		m_fAccessTree   := True;
        m_NewRecord		:= TRUE;    // <165>
        Read_OFF();  //<KSN> ADD  下で再読み込みしてもらうのでOFFにする。
	end;

//<KSN> ADD St
    try
        if IsLimitCount() then  // 基準となる件数を超えている？
        begin
            // 加算件数がTreeViewの限界を超えた？
//<502_004> DEL            if fnKasan_Count() > LIMIT_TREE_COUNT then
            if fnKasan_Count() >= LIMIT_TREE_COUNT then  //<502_004> ADD
            begin

                if (GetStartMode() = 0) then  // 一覧起動になっていたら警告メッセージ
                    MjsMessageBoxEx(self,'加算体系の数が膨大なため、詳細画面で起動します。','取引先登録',mjInformation,mjOK,mjDefOK);

                B_SetUp.Enabled := False;

                // 詳細画面モードに強制変更
                m_APGFile.SetValue(DSPTYPE,'1');
                SetStartMode(1);

                B_Syousai.Enabled := False;
                Exit;
            end;
            // 毎回表示する場合
            if (m_APGFILE.GetValue(INFO) = '0') then
            begin
                ShowDLG(DLG_START,iRet);                   // 表示方法確認のダイアログを表示

                if iRet = mrOK then
                begin
                    // 詳細画面モードに変更
                    m_APGFile.SetValue(DSPTYPE,'1');
                end
                else
                begin
                    // 一覧画面モードに変更
                    m_APGFile.SetValue(DSPTYPE,'0');
                end;

            end;
        end;

        // 通常画面モード且つデータが読み込まれていない場合
        if ((GetStartMode() = 0) and (IsRead() = False)) then
        begin
            fnRead();
        end;

    finally
        // 詳細画面モード？
        if (GetStartMode() = 1) then
        begin
            TreeView_EventCtrl(VTreeView,False);
            PPanelTree.Visible := False;
            B_Syousai.OnClick := BSpeedButtonClick;
            BSpeedButtonISClick(B_Syousai);
            B_Delete.Enabled := False;
            B_Sort.Enabled := False;
            B_Search.Enabled := False;

            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                m_AcControl := f0TGCode
            else
                m_AcControl := f0NGCode;
        end
        else
        begin
//<Authority> DEL            B_Delete.Enabled := m_cJNTArea.IsDelete;
            B_Delete.Enabled := m_JNTAuthority.IsDelete;  //<Authority> ADD
            B_Sort.Enabled := True;
            B_Search.Enabled := True;
        end;

        Root_PMTab.Items[2].Visible := GetStartMode() <> 0;

        SetGuidance(m_APGFile.ErrMsg());

        m_bShowStart := True;
    end;
//<KSN> ADD Ed
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnShow
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.FormHide(Sender: TObject);
begin

	MJSBtnVisible( TJNTCRP004001f(Self), False );

// <PRN>	if mjspreview.IsPreView then
// <PRN>		mjspreview.Hide;

    if ( uvHani.mjspre.IsPreView = TRUE ) then  // <PRN>
        uvHani.mjspre.Hide;                     // <PRN>

end;

//**************************************************************************
//	Proccess  :	WM_SETFOCUS
//	Name	  :	Sin.Nakamura
//	Date	  :	2000/ 08 / 09
//	Parameter :	Msg		TWMSetFocus
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
{procedure TJNTCRP004001f.WMSetFocus(var Msg: TWMSetFocus);
begin
	m_AcControl.SetFocus;

	inherited;
end;
}
//**************************************************************************
//	Component	:	bDocking ( TMSpeedButton )
//		    			ﾂｰﾙﾊﾞｰの取出ﾎﾞﾀﾝ
//	Event		:	OnClick
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonChgClick(Sender: TObject);
var
	AppPara : TAppParam;
	iAction : Integer;
begin
    MemData_EventCtrl(MemKasanChild,False); //イベント制御 <KSN> ADD
	m_fChange := 1;

	Hide;

	// 切り出し
	if Parent = TPanel(m_pMyAppRecord^.m_pOwnerPanel^) then
	begin
		Align			:= alNone;
		Parent			:= nil;
		BorderStyle		:= bsSizeable;
		Position		:= poDefaultPosOnly;
		BSpeedButtonChg.Caption := '埋込(&G)';
//↓2005/01/13 T.Shimada
//		ClientHeight	:= 622;
//		ClientWidth		:= 945;
		ClientHeight	:= Trunc(622 * m_Zoom / 100);
		ClientWidth		:= Trunc(945 * m_Zoom / 100);
//↑
		iAction			:= ACTID_DOCKINGOUTEND;
	end
	// 埋め込み
	else
	begin
		Parent			:= TPanel(m_pMyAppRecord^.m_pOwnerPanel^);
		Align			:= alClient;
		BorderStyle		:= bsNone;
		BSpeedButtonChg.Caption := '切出(&G)';
		iAction			:= ACTID_DOCKINGINEND;
	end;

	AppPara.iAction := iAction;
	AppPara.pRecord := Pointer( m_pMyAppRecord );
	AppPara.pActionParam := nil;

	TMjsAppRecord( m_pMyAppRecord^ ).m_pOwnerEntry( @AppPara );

	Show;

	gbTreeClick := False;
	m_fChange := 0;

    MemData_EventCtrl(MemKasanChild,True); //イベント制御 <KSN> ADD
end;


//**************************************************************************
//	Proccess	:	OnEnterの共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name		:	UnKnown
//	Date		:	2000/ 08 / 31
//	Parameter	:	Sender
//	Retrun		:
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.EnterEvent(Sender: TObject);
var
	stMessageRec: TMJSMsgRec;
//	iRet		: Integer;
//<KSN> ADD St
    // -----------------------------------------------------------------------------
    //  OnEnterの共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(加算体系タブ用)
    // -----------------------------------------------------------------------------
    procedure EnterEvent_KasanTab();
    begin

        B_Search.Enabled := Root_PMTab.Items.Selected = PAGE_KASAN;  // 検索ボタン

        if Sender is TdxDBGrid then
        begin
            DBGridChangeNodeEx(Sender);
            B_Sort.Enabled := True;
        end
        else
            B_Sort.Enabled := False;

    end;
//<KSN> ADD Ed
begin
	m_AcControl := Screen.ActiveControl;

	if giReferFlag = REFER then
	begin
		fnSetFncTypeSelect(); //<Gali2419>
		exit;
	end;

//<502_001> ADD St
    if (Sender is TMCheckBox) then
    begin
        if ((Sender as TMCheckBox).Checked) then m_sSaveValue := '1'
        else                                     m_sSaveValue := '0';
    end
    else if (Sender is TMNumEdit) then m_sSaveValue := (Sender as TMNumEdit).Text
    else if (Sender is TMComboBox) then m_sSaveValue := IntToStr((Sender as TMComboBox).ITemIndex);
//<502_001> ADD Ed

//<KSN> ADD St
    if PPanelKasan.Visible then
    begin
        EnterEvent_KasanTab();
        Exit;
    end;
//<KSN> ADD Ed

	if (m_AcControl = Root_PMTab) then
	begin
		B_Delete.Enabled := False;
		B_Fusen.Enabled  := False;
		B_FusenBar.Enabled := False;
		exit;
	end;

	if (m_AcControl = f0TGCode) or
		(m_AcControl = f0NGCode) then
    begin
//        B_Delete.Enabled := False;
        fnSetFncType(0);
        MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

		// <194>申請書参照ﾎﾞﾀﾝの有効/無効切替
//<Authority> DEL		if (m_cJNTArea.IsAppend = True) then
		if (m_JNTAuthority.IsAppend = True) then  //<Authority> ADD
			B_ImportWF.Enabled := True;
    end
	else
	begin
//<194>
//<198>
//		B_ImportWF.Enabled := False;
//<Authority> DEL		if (m_cJNTArea.IsAppend = True) then
		if (m_JNTAuthority.IsAppend = True) then  //<Authority> ADD
			B_ImportWF.Enabled := True;

		if B_Syousai.Caption = '詳細(&T)' then
		begin
			if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			begin
				if JHojyoMA_DMemData.RecordCount = 0 then
				begin
					B_Delete.Enabled := False;
					B_Fusen.Enabled  := False;
					B_FusenBar.Enabled := False;
				end
				else
				begin
					if (JHojyoMA_DMemData.FieldByName('SyokuchiKbn').AsInteger <> 0) then
					begin
//<Authority> DEL                        if m_cJNTArea.IsDelete = False then //削除権限がない為使用不可
                        if m_JNTAuthority.IsDelete = False then //削除権限がない為使用不可  <Authority> ADD
    						B_Delete.Enabled := False
                        else
    						B_Delete.Enabled := fnRecordCount();
//<Authority> MOD St
{
						B_Fusen.Enabled    := m_cJNTArea.IsFusen;
						B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
						B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
						B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
					end
					else
					begin
						if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then
						begin
                            B_Delete.Enabled   := False;
							B_Fusen.Enabled    := False;
							B_FusenBar.Enabled := False;
						end
						else
						begin
//<Authority> DEL                            if m_cJNTArea.IsDelete = False then//削除権限がない為使用不可
                            if m_JNTAuthority.IsDelete = False then //削除権限がない為使用不可 <Authority> ADD
    							B_Delete.Enabled := False
                            else
    							B_Delete.Enabled
                                    := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));
//<Authority> MOD St
{
							B_Fusen.Enabled    := m_cJNTArea.IsFusen;
							B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
							B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
							B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
    					end;

					end;
				end;
			end
			else
			begin
				if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then
				begin
					B_Delete.Enabled   := False;
					B_Fusen.Enabled    := False;
					B_FusenBar.Enabled := False;
				end
				else
				begin
//<Authority> MOD St
{
					B_Delete.Enabled   := m_cJNTArea.IsDelete;//削除権限を考慮
					B_Fusen.Enabled    := m_cJNTArea.IsFusen;
					B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
					B_Delete.Enabled   := m_JNTAuthority.IsDelete;//削除権限を考慮
					B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
					B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD St
				end;
			end;
		end
		else
		begin

			if MTOKUI_DMQuery.Eof = True then
				B_Delete.Enabled := False
			else
			begin
//<Authority> DEL                if m_cJNTArea.IsDelete = False then//削除権限がない為使用不可
                if m_JNTAuthority.IsDelete = False then//削除権限がない為使用不可  <Authority> ADD
                begin
                    B_Delete.Enabled := False;
                end
                else
                begin
                    if MTOKUI_DMQuery.GetFld('SyokuchiKbn').AsInteger <> 0 then
                        B_Delete.Enabled := fnRecordCount()
                    else
                        B_Delete.Enabled := True;
                end;
			end;
		end;
	end;

	if (m_AcControl = f0SimpleName) then
	begin
		if (m_AcControl = f0SimpleName) then
		begin
			SStatusBar.SimpleText := stMessageRec.sMsg;
		end
	end
	else
		SStatusBar.SimpleText := '';


//<198>
//<244>	if LSinsei.Visible then
	if (LSinsei.Visible) and (m_recOther.CanUpdate = False) then //<244>[申請書参照]ラベルが表示 かつ 登録申請を取り込む場合は、削除ボタンを使用不可にする。
		B_Delete.Enabled := False;

	fnSetFncTypeSelect();	//<2257>

// <MYN> ins -s
	// 区分Enter
	if (Sender = f0MYNKbn) then
	begin
        if (m_KbnEnter = False) then
		begin
			m_sSaveValueMYNKbn	:= (Sender as TMNumEdit).Text;
		end;
		m_KbnEnter	:= True;

        if (f0MYNKbn.Text = '') then
		begin
			f0MYNKbn.Value	:= 0;
		end;

		if (m_KbnEnterFirst = True) then
		begin
			m_KbnEnterFirst		:= False;
        end;
	end;
// <MYN> ins -e
end;


//**************************************************************************
//	Component	:	Root_PMTab ( TMTab )
//	Notice		:	実在 or 合計
//	Event		:	OnChange
//**************************************************************************
procedure TJNTCRP004001f.Root_PMTabChange(Sender: TObject);
var
	bEnable	    :	Boolean;
// <109>	Node1			:	TTreeNode;
// <109>	stWorkRecSelect	:	^TreeViewRec;
	iSumKbn	 	: Integer;          // <110>
	Node		: TTreeNode;        // <110>
	stWorkRec	: ^TreeViewRec;     // <110>
	NodeOya		: TTreeNode;        // <110>

begin
//	if giReferFlag = REFER then
//		exit;
	if  m_fAccessTab = False then
	begin
		m_fAccessTab := True;
		exit;
	end;

// <MYN> ins -s
	if B_Syousai.Caption = '一覧(&T)' then
	begin
    	if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			// 詳細で実在タブへ切り替え時
// <MYN2> upd -s
{
			if (m_AcControl.Name = 'f0MYNNo') or
			   (m_AcControl.Name = 'BtnMYNKojinUpd') then
			begin
            	if (m_AcControl.Focused = False) then
				begin
					PMTab.items.Selected := 0;
                    f0LongName.SetFocus;
				end;
            end;
}
         	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            	MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
            else
                MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
// <MYN2> upd -e
		end else
		begin
			// 詳細で実在タブから他へ切り替え時
			// 初期化
			fnClearMYN();

	        f0MYNKbn.Value		:= -1;
			f0MYNKbn.Clear;
		end;
	end;
// <MYN> ins -e


//<KSN> ADD St
    GuidanceClear();
    if Root_PMTab.Items.Selected = PAGE_KASAN then
    begin
        if PPanelKasan.Visible = False then   // 他のタブから加算体系タブへ切り替え時
        begin
            fnSetFncType(0);
            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
            B_Search.Enabled := Root_PMTab.Items.Selected = PAGE_KASAN;  // 検索ボタン
        end;

        B_Delete.OnClick := BSpeedButtonClick;
        B_Sort.OnClick :=    BSpeedButtonClick;
        B_Search.OnClick :=    BSpeedButtonClick;
        PPanelKasan.Visible := True;
        Jituzai_PPanel_Card.Visible := False;
        Jituzai_PPanel_Grid.Visible := False;
		B_Fusen.Enabled  := False;
		B_FusenBar.Enabled := False;

        DBGrid_EventCtrl(Kasan_Parent_DBGrid,False);  // 加算先(親)グリッドのイベント無効化
        DBGrid_EventCtrl(Kasan_Child_DBGrid,False);   // 加算元(子)グリッドのイベント無効化

        Kasan_CreateParentGrid();  // 加算先(親)グリッドの作成

        DBGrid_EventCtrl(Kasan_Parent_DBGrid,True);  // 加算先(親)グリッドのイベント有効化
        DBGrid_EventCtrl(Kasan_Child_DBGrid,True);   // 加算元(子)グリッドのイベント有効化

        Kasan_Parent_DBGrid.SetFocus;
        Kasan_Parent_DBGrid.FocusedColumn := COL_GCODE;
        Exit;
    end
    else
    begin
        if PPanelKasan.Visible then   // 加算体系タブから他のタブへ切り替え時
        begin
            fnSetFncType(0);
            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
            B_Search.Enabled := Root_PMTab.Items.Selected = PAGE_KASAN;  // 検索ボタン
        end;

        B_Delete.OnClick := BSpeedButtonDelClick;
        B_Sort.OnClick := BSpeedButtonSortClick;
        B_Search.OnClick := BSpeedButtonFindClick;
        PPanelKasan.Visible := False;
		B_Fusen.Enabled  := True;
		B_FusenBar.Enabled := True;

        if PPanelTree.Visible = False then
        begin
            B_Sort.Enabled := False;
            B_Search.Enabled := False;
        end;
    end;
//<KSN> ADD Ed

    m_EdtSw := False;                       // <130>変更ﾌﾗｸﾞOFF
//<194>
//    B_ImportWF.Enabled := False;            // <WF>申請書参照ﾎﾞﾀﾝ
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ

//	Node1 := VTreeView.Selected;  <109>
//	stWorkRecSelect := Node1.Data;<109>

    if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then	//	実在GridのｺｰﾄﾞがNullの時
        bEnable := False
    else
//<Authority> DEL        bEnable := m_cJNTArea.IsFusen;
        bEnable := m_JNTAuthority.IsFusen;  //<Authority> ADD

//	B_Delete.Enabled := bEnable;
//	TPDelKouji.Enabled := bEnable;
	GFBlue.Enabled   := bEnable;
	GFGreen.Enabled  := bEnable;
	GFOrange.Enabled := bEnable;
	GFRed.Enabled    := bEnable;

	// 付箋ボタン入力制御
	if B_Syousai.Caption = '詳細(&T)' then
	begin
        if JHojyoMA_DMemData.RecordCount <> 0 then
        begin
//<Authority> MOD St
{
            B_Fusen.Enabled    := m_cJNTArea.IsFusen;
            B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
            B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
            B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
        end
        else
        begin
            B_Fusen.Enabled    := False;
            B_FusenBar.Enabled := False;
        end;
	end
	else
	begin
		B_Fusen.Enabled    := False;
		B_FusenBar.Enabled := False;
	end;

    // 実在/合計の取得
    iSumKbn := Root_PMTab.Items.Selected;

	{初期フォーカス}
    if B_Syousai.Caption = '詳細(&T)' then
    begin
        Jituzai_PPanel_Card.Visible := False;
        Jituzai_PPanel_Grid.Visible := True;
//        Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
//        Jituzai_DdxDBGrid.SetFocus;
//		fnClearCard  (0,0); <108>
//		fnClearCard  (0); <110>

    	//グリッドデータ作成
//        fnCreateGrid (TBaseNode, Root_PMTab.Items.Selected); <110>

// <110> START

        // ﾂﾘｰで選択されているﾉｰﾄﾞを取得
        Node := VTreeView.Selected;
        stWorkRec	:= Node.Data;

{
        if (stWorkRec^.nDivision <> 9) then
            NodeOya := Node.Parent
        else
            NodeOya := Node;
}

		if (stWorkRec^.nDivision = 0) then
			NodeOya := Node.Parent
		else
			NodeOya := Node;

        if NodeOya = nil then
            NodeOya := Node.Parent;

        // 詳細のﾃﾞｰﾀｸﾘｱ
        fnClearCard(0);

        // ｸﾞﾘｯﾄﾞの作成
        fnCreateGrid (NodeOya, iSumKbn);

        JHojyoMA_DMemData.DisableControls; //<249>

        if stWorkRec^.nDivision = 0 then
        begin
            // 先頭ﾚｺｰﾄﾞへ移動
            if JHojyoMA_DMemData.RecordCount <> 0 then
                JHojyoMA_DMemData.First;

            // ﾂﾘｰで選択されているﾚｺｰﾄﾞへ移動
            if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
            begin
                while JHojyoMA_DMemData.Eof = False do
                begin
                    if JHojyoMA_DMemDataGCode.AsString <> '' then
                    begin
                        if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) = stWorkRec^.strExCode then
                        begin
                            Break;
                        end;
                    end;
                    JHojyoMA_DMemData.Next;
                end;
            end
            else
            begin
                while JHojyoMA_DMemData.Eof = False do
                begin
                    if JHojyoMA_DMemDataGCode.AsString = stWorkRec^.strExCode then
                    begin
                        Break;
                    end;
                    JHojyoMA_DMemData.Next;
                end;
            end;
        end;

        JHojyoMA_DMemData.EnableControls; //<249>

// <138>↓
        Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
        Jituzai_DdxDBGrid.SetFocus;         // ｸﾞﾘｯﾄﾞにﾌｫｰｶｽ
// <138>↑

        // 詳細のﾃﾞｰﾀｾｯﾄ
// <113>       fnCreateCard (iSumKbn);

// <110> END
    end
    else
    begin
        Jituzai_PPanel_Card.Visible := True;
        Jituzai_PPanel_Grid.Visible := False;
        JHojyoMA_DMemData.Cancel;
//        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
//            f0TGCode.SetFocus
//        else
//            f0NGCode.SetFocus;

        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            fnCompVisible(True)
        else
            fnCompVisible(False);

//    	fnClearCard  (Root_PMTab.Items.Selected,0); <108>
    	fnClearCard  (0);
        PMTab.items.Selected := 0;
{
//    	strGCode := Trim(stWorkRecSelect^.strExCode);
        strGCode := Trim(JHojyoMA_DMemData.FieldByName('GCode').asString);

        fnDataRead (strGCode, Root_PMTab.Items.Selected, 0);
        SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
        fnMemSet (Root_PMTab.Items.Selected, False);
		fnCreateCard (Root_PMTab.Items.Selected);
}

{
		// <194>申請書参照ﾎﾞﾀﾝの有効/無効切替
		if (m_cJNTArea.IsAppend = True) then
			B_ImportWF.Enabled := True;
}
//↓<2257>
        fnSetFncType(0);	//ファンクションバーに何も表示しない
        MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
		uvCopyMtokui := false;	//タブを変更されるとｺﾋﾟｰ内容が削除されるため
//↑<2257>
   end;

end;

//**************************************************************************
//	Component	:	OnClick ( TMSpeedButton )
//                      ｽﾋﾟｰﾄﾞﾎﾞﾀﾝ → 終了
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonEndClick(Sender: TObject);
begin
	Close;
end;

//**************************************************************************
//	Component	:	OnClick ( TMSpeedButton )
//                      ｽﾋﾟｰﾄﾞﾎﾞﾀﾝ → 一覧＆詳細切替
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonISClick(Sender: TObject);
var
	iSumKbn	 	: Integer;
	Node		: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	NodeOya		: TTreeNode;
//	stWorkRecOya: ^TreeViewRec;
	strGCode	: String;
begin
	m_fIS := 1;										// 一覧詳細ﾌﾗｸﾞ

    iSumKbn := Root_PMTab.Items.Selected;

//<194>
//    B_ImportWF.Enabled := False;                    // <WF>申請書参照ﾎﾞﾀﾝ無効
    ClearOtherRec(m_recOther);                      // <WF>申請書情報ｸﾘｱ

    if B_Syousai.Caption = '詳細(&T)' then
    begin
        fnMaskDsp(True);	// <MYN>

        m_bNotStored := True;  //<502_001> ADD
        // Insertﾓｰﾄﾞの時はｷｬﾝｾﾙする <121>
	    if JHojyoMA_DMemData.State in [dsInsert] then
            JHojyoMA_DMemData.Cancel;

        Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Card;
        Jituzai_PPanel_Grid.Visible 	:= False;
        Jituzai_PPanel_Card.Visible 	:= True;

        B_Syousai.Caption			:= '一覧(&T)';
//		B_Sort.Enabled				:= False;	//<202>

        {実在取引／詳細登録}		// 2004/07/09
        strGCode := JHojyoMA_DMemDataGCode.AsString;

        fnDataRead (strGCode, iSumKbn, 0);
//<199>
//        SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
		memFsn.Close;	memFsn.Open;
        fnMemSet (iSumKbn, False);

        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            fnCompVisible(True)
        else
            fnCompVisible(False);

        fnCreateCard (iSumKbn);
        //ボタンフォーマット
        PMTabChange(Sender);

        if giReferFlag = NORMAL then
        begin
//<KSN> MOD St
{
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                f0TGCode.SetFocus
            else
                MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
//                f0NGCode.SetFocus;
}
            if m_bShowStart = True then
            begin
                if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                    f0TGCode.SetFocus
                else
                    MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
            end;
//<KSN> MOD Ed
        end;
    end
    else
    begin
		fnMaskDsp(False);	// <MYN>

        Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Grid;
        Jituzai_PPanel_Card.Visible 	:= False;
        Jituzai_PPanel_Grid.Visible 	:= True;

        B_Syousai.Caption			:= '詳細(&T)';
//		B_Sort.Enabled				:= True;	//<202>

        m_EdtSw := False;                   // <130>変更ﾌﾗｸﾞOFF

        fnSetFncType(0);
        MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

        Node := VTreeView.Selected;
        stWorkRec	:= Node.Data;
        if (stWorkRec^.nDivision <> 9) then
            NodeOya := Node.Parent
        else
            NodeOya := Node;

        if NodeOya = nil then
            NodeOya := Node.Parent;

//        fnClearCard(iSumKbn,0); <108>
        fnClearCard(0);
        fnCreateGrid (NodeOya, iSumKbn);

        JHojyoMA_DMemData.DisableControls; //<249>

        if stWorkRec^.nDivision = 0 then
        begin
            // 先頭ﾚｺｰﾄﾞへ移動
            if JHojyoMA_DMemData.RecordCount <> 0 then
                JHojyoMA_DMemData.First;

            // ﾂﾘｰで選択されているﾚｺｰﾄﾞへ移動
            if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
            begin
                while JHojyoMA_DMemData.Eof = False do
                begin
                    if JHojyoMA_DMemDataGCode.AsString <> '' then
                    begin
                        if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) = stWorkRec^.strExCode then
                        begin
                            Break;
                        end;
                    end;
                    JHojyoMA_DMemData.Next;
                end;
            end
            else
            begin
                while JHojyoMA_DMemData.Eof = False do
                begin
                    if JHojyoMA_DMemDataGCode.AsString = stWorkRec^.strExCode then
                    begin
                        Break;
                    end;
                    JHojyoMA_DMemData.Next;
                end;
            end;
        end;

        JHojyoMA_DMemData.EnableControls; //<249>

        if JHojyoMA_DMemData.Eof = False then
        begin
//<Authority> MOD St
{
            B_Fusen.Enabled    := m_cJNTArea.IsFusen;
            B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
            B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
            B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed

            // 詳細のﾃﾞｰﾀｾｯﾄ <110>
// <113>            fnCreateCard (iSumKbn);
        end
        else
        begin
            B_Fusen.Enabled    := False;
            B_FusenBar.Enabled := False;
// <109>            JHojyoMA_DMemData.First;
        end;

        Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
//        Jituzai_DdxDBGrid.SetFocus;
    end;
	m_fIS := 0;										// 一覧詳細ﾌﾗｸﾞ初期化
end;

//**************************************************************************
//	Component	:	OnClick ( TTreeView )
//                  	TreeView のノードをクリック
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP004001f.VTreeViewClick(Sender: TObject);
{var
	Node1			:	TTreeNode;
	NodeOya			:	TTreeNode;
	stWorkRecSelect	:	^TreeViewRec;
	stWorkRecOya	:	^TreeViewRec;
	stGCode			:	String;}
begin
{	MemPost_Sw := 1;

	if BSpeedButtonIS.Caption = '詳細(&T)' then
	begin
		Node1 := VTreeView.Selected;
		NodeOya := Node1.Parent;
		stWorkRecSelect := Node1.Data;

		if (stWorkRecSelect^.nDivision = 9) or (stWorkRecSelect^.nDivision = 1) then
		begin
			stGCode := stWorkRecSelect^.strExCode;
		end
		else
		begin
			stWorkRecOya := NodeOya.Data;
			stGCode := stWorkRecOya^.strExCode;
		end;

		if m_stGCodeSave = stGCode then
			Exit;

		if Node1 = nil then
			Exit;

		m_stGCodeSave := stGCode;							// ｺｰﾄﾞのｾｰﾌﾞ

	end;

	fnCreateAll ();

	MemPost_Sw := 0;}
end;

//**************************************************************************
//	Component	:	OnClick ( TTreeView )
//                  	TreeView のノードをクリック
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP004001f.fnCreateAll();
var
	SelectNode	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	stWorkRecBase: ^TreeViewRec;
	iSumKbn		: Integer;
	stCode		: String;
	stName		: String;
	iCode		: Int64;
	iCut		: Integer;
//	stWorkRecSv : ^TreeViewRec;

begin
	{親ノードをMTABに表示}
	TBaseNodeSv						:= TBaseNode;
	TBaseNode						:= VTreeView.Selected;
	stWorkRec						:= TBaseNode.Data;
	if stWorkRec^.nDivision = 0 then
		TBaseNode					:= TBaseNode.Parent;

//	stWorkRecSv						:= TBaseNodeSv.Data;
	stWorkRecBase					:= TBaseNode.Data;

	if stWorkRecBase^.nDivision <> 9 then
	begin
		stCode				   		:= stWorkRecBase^.strExCode;
		m_stGCodeSave				:= stCode;				// ｺｰﾄﾞのｾｰﾌﾞ
	end
	else
	begin
		stCode						:= '';
		m_stGCodeSave				:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
		begin
			if stCode <> '' then
			begin
				iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
				System.Delete(stCode, 1, iCut);
			end;
		end
		else
		begin
			if stCode <> '' then
			begin
				iCode := StrToInt64(Trim(stCode));
				stCode := IntToStr(iCode);
			end;
		end;
	end;
	stName							:= stWorkRecBase^.strName;
	Root_PMTab.BorderCaption		:= stCode + ' ' + stName;

	{実在取引先}
	// Grid作成
	// Gridのフォーカス移動＆Card表示
	SelectNode		:= VTreeView.Selected;
	stWorkRec		:= SelectNode.Data;

   	//iSumKbn			:= stWorkRec^.nDivision;
    if Root_PMTab.items.Selected = 0 then
       	iSumKbn			:= 0
    else
       	iSumKbn			:= 1;

	fnCreateGrid (TBaseNode, iSumKbn);

//<208>
	JHojyoMA_DMemData.DisableControls;
	if JHojyoMA_DMemData.RecordCount <> 0 then
		JHojyoMA_DMemData.First;

    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
    begin
        while JHojyoMA_DMemData.Eof = False do
        begin
            if stWorkRec^.strExCode = JHojyoMA_DMemDataGCode.AsString then
                Break;
            JHojyoMA_DMemData.Next;
        end;
    end
    else
    begin
        while JHojyoMA_DMemData.Eof = False do
        begin
            if JHojyoMA_DMemDataGCode.AsString <> '' then
            begin
                if JHojyoMA_DMemDataGCode.AsString <> '' then
                begin
                    if stWorkRec^.strExCode = Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) then
                        Break;
                end;
            end;
            JHojyoMA_DMemData.Next;
        end;
    end;
	if B_Syousai.Caption <> '詳細(&T)' then
	begin
		if JHojyoMA_DMemData.Eof = False then
		begin
            m_bNotStored := True;  // <503_001> ADD
			stCode := JHojyoMA_DMemDataGCode.AsString;				// 2004/07/09
			fnDataRead (stCode, iSumKbn, 0);
//<199>
//			SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
			memFsn.Close;	memFsn.Open;
			fnMemSet (iSumKbn, False);
			fnCreateCard (iSumKbn);
		end
		else
//			fnClearCard  (iSumKbn,0); <108>
			fnClearCard  (0);
	end;

//<208>
	JHojyoMA_DMemData.EnableControls;

end;


//**************************************************************************
//	Component	:	OnDragDrop ( TTreeView )
//                  	TreeView のノードをドロップ
//	Event		:	OnEnter
//**************************************************************************
procedure TJNTCRP004001f.VTreeViewDragDrop(Sender, Source: TObject; X,
  Y: Integer);
var
	qmQuery			: TMQuery;
	DragNode		: TTreeNode;		// ドラッグしたノード
	DragNode_wk		: TTreeNode;
	DropNode		: TTreeNode;		// ドロップしたノード
	DropNode_wk		: TTreeNode;
	stRecDrag		: ^TreeViewRec;
	stRecDrag_wk	: ^TreeViewRec;
	stRecDrop		: ^TreeViewRec;
	stRecDrop_wk	: ^TreeViewRec;

//<KSN> DEL	NodeOya			: TTreeNode;
//<KSN> DEL	NodeOya2		: TTreeNode;
//<KSN> DEL	stWorkRecOya	: ^TreeViewRec;
//<KSN> DEL	stWorkRecOya2	: ^TreeViewRec;

	Drop_which		: Boolean;			// True:実在→合計 False:その他
	iEntNo1			: Integer;
	iEntNo2			: Integer;
	iEntNoSv		: Integer;
	iError_sw		: Integer;
    iSumKbn         : Integer; //<223>
begin
	SessionPractice(C_ST_PROCESS); //<MHIS> ADD

	try

{		try
			if m_bExFlg <> True then
			begin
				cExcept := TJNTMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> JNTMAS_EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
//					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				m_bExFlg 	:= True;
			end;
		except;
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;
}
		DragNode		:= VTreeView.Selected;
		DropNode		:= VTreeView.DropTarget;

		if DropNode = nil then
			exit;

//<KSN> DEL		stRecDrag		:= DragNode.Data;
//<KSN> DEL		stRecDrop		:= DropNode.Data;

//<KSN> DEL		DropNode_wk		:= VTreeView.DropTarget;
//<KSN> DEL		if stRecDrop^.nDivision <> 9 then
//<KSN> DEL			DropNode_wk		:= DropNode.Parent;			// ドロップされるノードの親

//<KSN> DEL		stRecDrop_wk  := DropNode_wk.Data;

//		if ((stRecDrop_wk^.nDivision <> 9) and (stRecDrag^.nDivision = 1)) then
//			((stRecDrop^.nDivision = 1) and (stRecDrag^.nDivision = 1)) then
{<239> DEL St
        if ((stRecDrop^.nDivision = 0) and (stRecDrag^.nDivision = 1) and (VTreeView.DropTarget.Level > 2)) or
            ((stRecDrop^.nDivision = 1) and (stRecDrag^.nDivision = 1) and (VTreeView.DropTarget.Level >= 2)) then
            exit;
<239> DEL Ed}

		{Drop Check}
		iError_sw		:= fnDropCheck (DragNode, DropNode);

		if iError_sw = 0 then
		begin
			stRecDrag		:= DragNode.Data;
			stRecDrop		:= DropNode.Data;
			// 親
			DragNode_wk		:= DragNode.Parent;
			stRecDrag_wk	:= DragNode_wk.Data;
			DropNode_wk		:= VTreeView.DropTarget;
			if stRecDrop^.nDivision <> 9 then
				DropNode_wk		:= DropNode_wk.Parent;

			Drop_which		:= False;
			iEntNoSv		:= 0;

	//		if stRecDrag^.nDivision = 0 then						// 0:実在取引先
	//		begin
				if (stRecDrop^.nDivision = 1) or (stRecDrop^.nDivision = 9)then	// 1:合計取引先
				begin
					DropNode_wk		:= VTreeView.DropTarget;
					Drop_which		:= True;
				end;
	//		end;
			stRecDrop_wk	:= DropNode_wk.Data;

			m_fAccessTree    := False;
			m_fAccessTab	 := False;
{<239> DEL St
            if stRecDrop^.nDivision = 1 then				// 合計取引先だった場合
            begin
                NodeOya := DropNode.Parent;
                stWorkRecOya := NodeOya.Data;
                if stWorkRecOya^.nDivision = 1 then				// 親が合計取引先だった場合
                begin
                    if B_Syousai.Caption = '詳細(&T)' then
                    begin
                        Root_PMTab.Items.Selected		:= PAGE_JITUZAI;
                        Root_PMTab.Items[1].Enabled		:= False;
                    end
                    else
                    begin
                        Root_PMTab.Items.Selected		:= PAGE_GOKEI;
                        Root_PMTab.Items[1].Enabled		:= True;
                    end;
                end
                else
                    Root_PMTab.Items[1].Enabled := True;
            end
            else
            begin
                if stRecDrop^.nDivision = 0 then					// 実在取引先だった場合、親を見る
                begin
                    NodeOya := DropNode.Parent;
                    stWorkRecOya := NodeOya.Data;
                    if stWorkRecOya^.nDivision = 1 then				// 合計取引先だった場合、更に親を見る
                    begin
                        NodeOya2 := NodeOya.Parent;
                        stWorkRecOya2 := NodeOya2.Data;
                        if stWorkRecOya2^.nDivision = 1 then			// 親の親が合計取引先だった場合、子供は実在のみとする
                        begin
                            if B_Syousai.Caption = '詳細(&T)' then
                            begin
                                Jituzai_PPanel_Grid.Visible 	:= True;
                            end
                            else
                            begin
                                Jituzai_PPanel_Card.Visible 	:= True;
                            end;
                            Root_PMTab.Items.Selected := PAGE_JITUZAI;
                            Root_PMTab.Items[1].Enabled := False;
                        end
                        else
                        begin
                            if B_Syousai.Caption <> '詳細(&T)' then
                                Root_PMTab.Items.Selected := PAGE_JITUZAI;

                            Root_PMTab.Items[1].Enabled := True;
                        end;
                    end
                    else
                    begin
                        if B_Syousai.Caption <> '詳細(&T)' then
                            Root_PMTab.Items.Selected := PAGE_JITUZAI;

                        Root_PMTab.Items[1].Enabled := True;
                    end;
                end
                else
                    Root_PMTab.Items[1].Enabled := True;
            end;
<239> DEL Ed}
			m_fAccessTree    := True;
			m_fAccessTab	 := True;

            //↓<223>
            // 加算先(親)の実在合計区分をチェックする。
            if not fnGetSumKbn(stRecDrop_wk^.InCode,iSumKbn) then
            begin
                // 取得できない場合はエラー。
                Abort;
                Exit;
            end;
            // 加算先(親)が実在の場合
            if iSumKbn = 0 then
            begin
                // 総合計のノードに加算元(自身)が存在しているか？
                // 存在していれば何もしない。
                if fnExistsSouGoukei(stRecDrag^.InCode) then
                begin
                    Exit;
                end;
                // 存在していない場合は総合計のノードをVTreeView.DropTargetに代入し、
                // この関数を再度実行する。
                VTreeView.DropTarget := VTreeView.Items[0];
                VTreeViewDragDrop(self,self,0,0); //再帰 引数は使用していないので適当
            end;
            //↑<223>

			qmQuery		:= TMQuery.Create(Self);
//<D10>		MDataModule.SetDBInfoToQuery(dbCorp_Select, qmQuery);
			gfnJNTSELSetDbName(qmQuery, dbCorp_Select);		//<D10>

			MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

			with qmQuery do
			begin
				try
					{EntNo算出}
					Close;
					SQL.Clear;		 							// qmQuery 初期化
//<256> DEL					SQL.Add('Select * from HojyoTree');
					SQL.Add('Select EntNo,BasedNCode from HojyoTree');  //<256> ADD
					SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
					SQL.Add('Order by EntNo DESC');
    				SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//					SetFld('strSumCode').AsString	:= stRecDrop_wk^.strExCode;
//<256> DEL					SetFld('strSumCode').AsFloat	:= stRecDrop_wk^.InCode;
					SetFld('strSumCode').AsString	:= FormatFloat('0',stRecDrop_wk^.InCode);  //<256> ADD

					Open;

					First;

					if Drop_which = True then
					begin
						if Eof = True then
							iEntNo1	:= 100
						else
							iEntNo1	:= GetFld('EntNo').AsInteger + 100;
					end
					else
					begin
						while Eof = False do
						begin
							if stRecDrop^.InCode = GetFld('BasedNCode').AsFloat then
								Break
							else
								Next;
						end;
						iEntNo1		:= GetFld('EntNo').AsInteger;
						Next;
						if Eof = True then
						begin
							iEntNo2	:= 0;
							iEntNoSv:= 0;
						end
						else
						begin
							iEntNo2	:= GetFld('EntNo').AsInteger;
							iEntNoSv:= GetFld('EntNo').AsInteger;
						end;

						iEntNo2		:= iEntNo1 + iEntNo2;
						iEntNo1		:= iEntNo2 div 2;
					end;

					if iEntNo1 <> iEntNoSv then
					begin
						if iEntNo1 <> 0 then
						begin
							{Dragデータ書き込み}
							Close;
//<D10>						RequestLive	:= False;
							SQL.Clear;
							SQL.Add('Update HojyoTree');
							SQL.Add('Set');
							SQL.Add('MasterKbn		= :iMasterKbn');
							SQL.Add(',PatternNo		= 0');
							SQL.Add(',SumNCode		= :strSumCode');
							SQL.Add(',EntNo			= :iEntNo');
							SQL.Add(',BasedNCode		= :strBasedCode');
							SQL.Add(',AddKbn		= :iAddKbn');
							SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode_Drag and BasedNCode=:strBasedCode');

                            SetFld('pMKBN').asInteger := ucTORIHIKI;
//<256> DEL							SetFld('strSumCode_Drag').AsFloat	:= stRecDrag_wk^.InCode;
							SetFld('strSumCode_Drag').AsString	:= FormatFloat('0',stRecDrag_wk^.InCode);  //<256> ADD
//							SetFld('strSumCode_Drag').AsString	:= stRecDrag_wk^.strExCode;

							SetFld('iMasterKbn').AsInteger		:= ucTORIHIKI;
							SetFld('strSumCode').AsFloat		:= stRecDrop_wk^.InCode;
//							SetFld('strSumCode').AsString		:= stRecDrop_wk^.strExCode;
							SetFld('iEntNo').AsInteger			:= iEntNo1;
//<256> DEL							SetFld('strBasedCode').AsFloat   	:= stRecDrag^.InCode;
							SetFld('strBasedCode').AsString   	:= FormatFloat('0',stRecDrag^.InCode);  //<256> ADD
//							SetFld('strBasedCode').AsString		:= stRecDrag^.strExCode;
							SetFld('iAddKbn').AsInteger			:= 0;

							// DB更新
							if (ExecSQL = False) then
							begin
								ErrorMessageDsp(qmQuery);
								MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
								qmQuery.Close;
	//							qmQuery.Free;
								Exit;
							end;

							MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

							gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
(*<240> DEL St
							{Dragデータ移動：TreeView}
							if Drop_which = True then
								DragNode.MoveTo (DropNode, naAddChild)
							else
								DragNode.MoveTo (DropNode, naInsert);
<240> DEL Ed*)
							{Grid & Card 再作成}
							MemPost_Sw := 1;
							fnCreateAll ();
							MemPost_Sw := 0;

//<240> ADD St
                            // TreeView子情報再作成
                        	fnUpdateTreeViewItemsEx (DragNode, DragNode.Parent, DropNode, DropNode.Parent);
//<240> ADD Ed

							if stRecDrop^.nDivision <> 9 then
								DropNode.Parent.Expand(False)
							else
								DropNode.Expand(False)
						end
						else
						begin
		//					ShowMessage('登録ＮＯ再編成処理を行って下さい。');
//							if AgainEntNoSet (stRecDrop_wk^.strExCode) = False then				// 登録ＮＯ再編成処理
							if AgainEntNoSet (stRecDrop_wk^.InCode) = False then				// 登録ＮＯ再編成処理
							begin
								abort;
								exit;
							end;

							{EntNo再算出}
							Close;
							SQL.Clear;		 							// qmQuery 初期化
//<256> DEL							SQL.Add('Select * from HojyoTree');
							SQL.Add('Select EntNo,BasedNCode from HojyoTree');  //<256> ADD
							SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
							SQL.Add('Order by EntNo DESC');
            				SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//							SetFld('strSumCode').AsString	:= stRecDrop_wk^.strExCode;
//<256> DEL							SetFld('strSumCode').AsFloat	:= stRecDrop_wk^.InCODE;
							SetFld('strSumCode').AsString	:= FormatFloat('0',stRecDrop_wk^.InCODE);  //<256> ADD

							Open;

							First;

							if Drop_which = True then
							begin
								if Eof = True then
									iEntNo1	:= 100
								else
									iEntNo1	:= GetFld('EntNo').AsInteger + 100;
							end
							else
							begin
								while Eof = False do
								begin
									if stRecDrop^.InCode = GetFld('BasedNCode').AsFloat then
										Break
									else
										Next;
								end;
								iEntNo1		:= GetFld('EntNo').AsInteger;
								Next;
								if Eof = True then
								begin
									iEntNo2	:= 0;
								end
								else
								begin
									iEntNo2	:= GetFld('EntNo').AsInteger;
								end;

								iEntNo2		:= iEntNo1 + iEntNo2;
								iEntNo1		:= iEntNo2 div 2;
							end;

							{Dragデータ書き込み}
							Close;
//<D10>						RequestLive	:= False;
							SQL.Clear;
							SQL.Add('Update HojyoTree');
							SQL.Add('Set');
							SQL.Add('MasterKbn		= :iMasterKbn');
							SQL.Add(',PatternNo		= 0');
							SQL.Add(',SumNCode		= :strSumCode');
							SQL.Add(',EntNo			= :iEntNo');
							SQL.Add(',BasedNCode		= :strBasedCode');
							SQL.Add(',AddKbn		= :iAddKbn');
							SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode_Drag and BasedNCode=:strBasedCode');

                            SetFld('pMKBN').asInteger := ucTORIHIKI;
//							SetFld('strSumCode_Drag').AsString	:= stRecDrag_wk^.strExCode;
//<256> DEL							SetFld('strSumCode_Drag').AsFloat	:= stRecDrag_wk^.InCode;
							SetFld('strSumCode_Drag').AsString	:= FormatFloat('0',stRecDrag_wk^.InCode);  //<256> ADD


							SetFld('iMasterKbn').AsInteger		:= ucTORIHIKI;
							SetFld('strSumCode').AsFloat		:= stRecDrop_wk^.InCode;
//							SetFld('strSumCode').AsString		:= stRecDrop_wk^.strExCode;
							SetFld('iEntNo').AsInteger			:= iEntNo1;
//<256> DEL							SetFld('strBasedCode').AsFloat  	:= stRecDrag^.InCode;
							SetFld('strBasedCode').AsString  	:= FormatFloat('0',stRecDrag^.InCode);  //<256> ADD
//							SetFld('strBasedCode').AsString		:= stRecDrag^.strExCode;
							SetFld('iAddKbn').AsInteger			:= 0;

							if (ExecSQL = False) then
							begin
								ErrorMessageDsp(qmQuery);
								MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
								qmQuery.Close;
	//							qmQuery.Free;
								Exit;
							end;

							MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

							gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ

							{Dragデータ移動：TreeView}
							if Drop_which = True then
								DragNode.MoveTo (DropNode, naAddChild)
							else
								DragNode.MoveTo (DropNode, naInsert);

							{Grid & Card 再作成}
							MemPost_Sw := 1;
							fnCreateAll ();
							MemPost_Sw := 0;

//<240> ADD St
                            // TreeView子情報再作成
                        	fnUpdateTreeViewItemsEx (DragNode, DragNode.Parent, DropNode, DropNode.Parent);
//<240> ADD Ed

							if stRecDrop^.nDivision <> 9 then
								DropNode.Parent.Expand(False)
							else
								DropNode.Expand(False)
						end;
					end
					else
					begin
	//    				ShowMessage('同一登録ＮＯにより再構築');
						if AgainEntNoSet (stRecDrop_wk^.InCode) = False then				// 登録ＮＯ再編成処理
						begin
							abort;
							exit;
						end;

						{EntNo再算出}
						Close;
						SQL.Clear;		 							// qmQuery 初期化
//<256> DEL						SQL.Add('Select * from HojyoTree');
						SQL.Add('Select EntNo,BasedNCode from HojyoTree');  //<256> ADD
						SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
						SQL.Add('Order by EntNo DESC');
        				SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//						SetFld('strSumCode').AsString	:= stRecDrop_wk^.strExCode;
//<256> DEL						SetFld('strSumCode').AsFloat	:= stRecDrop_wk^.INCODE;
						SetFld('strSumCode').AsString	:= FormatFloat('0',stRecDrop_wk^.INCODE); //<256> ADD

						Open;

						First;

						if Drop_which = True then
						begin
							if Eof = True then
								iEntNo1	:= 100
							else
								iEntNo1	:= GetFld('EntNo').AsInteger + 100;
						end
						else
						begin
							while Eof = False do
							begin
								if stRecDrop^.InCode = GetFld('BasedNCode').AsFloat then
									Break
								else
									Next;
							end;
							iEntNo1		:= GetFld('EntNo').AsInteger;
							Next;
							if Eof = True then
							begin
								iEntNo2	:= 0;
							end
							else
							begin
								iEntNo2	:= GetFld('EntNo').AsInteger;
							end;

							iEntNo2		:= iEntNo1 + iEntNo2;
							iEntNo1		:= iEntNo2 div 2;
						end;

						{Dragデータ書き込み}
						Close;
//<D10>					RequestLive	:= False;
						SQL.Clear;
						SQL.Add('Update HojyoTree');
						SQL.Add('Set');
						SQL.Add('MasterKbn		= :iMasterKbn');
						SQL.Add(',PatternNo		= 0');
						SQL.Add(',SumNCode		= :strSumCode');
						SQL.Add(',EntNo			= :iEntNo');
						SQL.Add(',BasedNCode		= :strBasedCode');
						SQL.Add(',AddKbn		= :iAddKbn');
						SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode_Drag and BasedNCode=:strBasedCode');

                        SetFld('pMKBN').asInteger := ucTORIHIKI;
//						SetFld('strSumCode_Drag').AsString	:= stRecDrag_wk^.strExCode;
//<256> DEL						SetFld('strSumCode_Drag').AsFloat	:= stRecDrag_wk^.InCode;
						SetFld('strSumCode_Drag').AsString	:= FormatFloat('0',stRecDrag_wk^.InCode);  //<256> ADD
//						SetFld('strSumCode_Drag').AsInteger	:= stRecDrag^.InCODE;

						SetFld('iMasterKbn').AsInteger		:= ucTORIHIKI;
						SetFld('strSumCode').AsFloat		:= stRecDrop_wk^.InCode;
//						SetFld('strSumCode').AsString		:= stRecDrop_wk^.strExCode;
						SetFld('iEntNo').AsInteger			:= iEntNo1;
//						SetFld('strBasedCode').AsString		:= stRecDrag^.strExCode;
//<256> DEL						SetFld('strBasedCode').AsFloat  	:= stRecDrag^.InCode;
						SetFld('strBasedCode').AsString  	:= FormatFloat('0',stRecDrag^.InCode);  //<256> ADD
						SetFld('iAddKbn').AsInteger			:= 0;

						if (ExecSQL = False) then
						begin
							ErrorMessageDsp(qmQuery);
							MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
							qmQuery.Close;
	//						qmQuery.Free;
							Exit;
						end;

						MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

						gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ

						{Dragデータ移動：TreeView}
						if Drop_which = True then
							DragNode.MoveTo (DropNode, naAddChild)
						else
							DragNode.MoveTo (DropNode, naInsert);

						{Grid & Card 再作成}
						MemPost_Sw := 1;
						fnCreateAll ();
						MemPost_Sw := 0;

//<240> ADD St
                            // TreeView子情報再作成
                        	fnUpdateTreeViewItemsEx (DragNode, DragNode.Parent, DropNode, DropNode.Parent);
//<240> ADD Ed

						if stRecDrop^.nDivision <> 9 then
							DropNode.Parent.Expand(False)
						else
							DropNode.Expand(False)
					end;
				finally
	//				ShowMessage('HojyoTree Write Error!');
					Free;
				end;
			end;
		end
		else
		begin
			MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjInformation,mjOk, mjDefOk);
{			case iError_sw of
				1: ShowMessage('総合計取引先の移動は出来ません！');
				2: ShowMessage('総合計取引先より上位への移動は出来ません！');
				3: ShowMessage('加算体系が重複しています。');
			end;
}		end;

	finally
//		if cExcept <> nil then
//		begin
//			cExcept.ResetTerm;
//			cExcept.Free;
//			cExcept := nil;
//		end;
		SessionPractice(C_ED_PROCESS); //<MHIS> ADD
	end;

end;

//**************************************************************************
//	Component	:	OnDragOver ( TTreeView )
//                  	TreeView のノードをドロップ
//	Event		:	OnEnter
//**************************************************************************
procedure TJNTCRP004001f.VTreeViewDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
var
	NodeSelect		:	TTreeNode;
	stWorkRecSelect	:	^TreeViewRec;
	DropNode		:	TTreeNode;
	stWorkRecDrop	:	^TreeViewRec;
//<KSN> DEL	NodeChk			:	TTreeNode;
//<KSN> DEL	stWorkRecChk	:	^TreeViewRec;
begin
//	if VTreeView.Selected = VTreeView.Items[0] then
//		ShowMessage('You will not move this NODE !');
//		abort;

	NodeSelect := VTreeView.Selected;
	stWorkRecSelect := NodeSelect.Data;

	if stWorkRecSelect^.nDivision = 9 then
		abort;

	DropNode	:=	(VTreeView.GetNodeAt (X, Y));	//	Drop先のNode取得

	if  (DropNode = nil) then			//	Nil時
	begin
		Accept  := False;
		exit;
	end;

	stWorkRecDrop	:=	DropNode.Data;			//	Drop先のData取得
{<239> DEL St
	if (DropNode.Level > 1) or (stWorkRecDrop^.nDivision = 1) then
	begin
		// 合計→合計の加算が組まれているかどうか
		if stWorkRecSelect^.nDivision = 1 then		// 合計のみ
		begin
			NodeChk := NodeSelect.getFirstChild;
			while NodeChk <> nil do
			begin
				stWorkRecChk  := NodeChk.Data;
				if stWorkRecChk^.nDivision = 1 then
				begin
					Accept  := False;
					exit;
				end;

				NodeChk := NodeSelect.GetNextChild(NodeChk);
			end;
		end;
	end;
<239> DEL Ed}
	if  (stWorkRecSelect.nDivision = 1) then	//	選択したNodeが合計の時
	begin
		if  (not fnCheckMasterTreeInsertValid (stWorkRecSelect.strExCode,stWorkRecDrop.strExCode)) then
		begin
			Accept	:= FALSE;
			Exit;
		end;
	end;

end;


//**************************************************************************
//	Component	:	OnEnter ( TTreeView )
//                  	TreeView のノードを選択（Enter）
//	Event		:	OnEnter
//**************************************************************************
procedure TJNTCRP004001f.VTreeViewEnter(Sender: TObject);

var
	SelectNode	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	cNodeWork  : TTreeNode;
//	iFlg		: Integer;
begin
	if giReferFlag = REFER then
		exit;

	MemPost_Sw := 1;

//	iFlg := 0;
//	B_Delete.Enabled := True;
	m_AcControl := Screen.ActiveControl;
	{Gridのフォーカス移動＆Card表示}
	SelectNode		:= VTreeView.Selected;
	stWorkRec		:= SelectNode.Data;

	if (stWorkRec^.nDivision = 9) then
	begin
		MemPost_Sw := 0;
  		B_Delete.Enabled   := False;
        B_Fusen.Enabled    := False;
		B_FusenBar.Enabled := False;
		exit;
	end
	else
	begin
		if stWorkRec^.iSyokuti <> 0 then
			B_Delete.Enabled := False
		else
//<Authority> DEL            B_Delete.Enabled := m_cJNTArea.IsDelete;//削除権限を考慮
            B_Delete.Enabled := m_JNTAuthority.IsDelete;//削除権限を考慮  <Authority> ADD

//<Authority> MOD St
{
		B_Fusen.Enabled := m_cJNTArea.IsFusen;
        B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
		B_Fusen.Enabled := m_JNTAuthority.IsFusen;
        B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
	end;

	cNodeWork	:= SelectNode.GetFirstChild ();

	if (stWorkRec^.nDivision = 1) then
    begin
    	if(cNodeWork <> nil) then
    		B_Delete.Enabled   := False
        else
//<Authority> DEL      		B_Delete.Enabled   := m_cJNTArea.IsDelete;//削除権限を考慮
      		B_Delete.Enabled   := m_JNTAuthority.IsDelete;//削除権限を考慮  <Authority> ADD
    end;

{	if JHojyoMA_DMemData.RecordCount <> 0 then
		JHojyoMA_DMemData.First;

	while JHojyoMA_DMemData.Eof = False do
	begin
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if stWorkRec^.strExCode = JHojyoMA_DMemDataGCode.AsString then
			begin
				iFlg := 1;
				Break;
			end;
		end
		else
		begin
		   	if JHojyoMA_DMemDataGCode.AsString <> '' then
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
				begin
					if stWorkRec^.strExCode = Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) then
					begin
						iFlg := 1;
						Break;
					end;
				end;
			end;
		end;
		JHojyoMA_DMemData.Next;
	end;

	if iFlg = 1 then
		fnCreateCard (stWorkRec^.nDivision)
	else
		fnClearCard  (stWorkRec^.nDivision);
}
	MemPost_Sw := 0;

end;

//**************************************************************************
//	Component	:	OnClick ( TMBitBtn )
//					実在取引先／更新ボタン
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_BBitBtn_OkClick(Sender: TObject);

var
	strGCode		: String;
	iSumKbn			: Integer;
    ExitEvent       : TNotifyEvent;  //<502_001@> ADD
	sTopNm			: String;	// <MYN17>
begin
//<502_001@> ADD St
    ExitEvent := nil;
    // 更新ボタン以外にフォーカスされている？
    if (Sender <> m_AcControl) then
    begin
        // SenderにSetFocusした場合、m_AcControlのExitイベント内でabortしても処理が続行してしまうため、
        // Exitイベントを保持して直接呼ぶようにする。
        if (m_AcControl is TMNumEdit) then
            ExitEvent := (m_AcControl as TMNumEdit).OnExit
        else if (m_AcControl is TMComboBox) then
            ExitEvent := (m_AcControl as TMComboBox).OnExit;


        if  Assigned(ExitEvent) then ExitEvent(m_AcControl);
    end;
//<502_001@> ADD Ed
	// コードチェック
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		if f0TGCode.Text = '' then
		begin
			Beep;
			MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode');
		end;
	end
	else
	begin
		if (f0NGCode.Value = 0) and (f0NGCode.InputFlag = True) then
		begin
			Beep;
			MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
		end;
	end;

// <MYN17> ins -s
	// 個人キーの重複チェック
	if fnCheckKojinKey(m_sSaveKojinKey, f0LongName.Text, sTopNm) then
	begin
	    // 重複あり
		if (MjsMessageBoxEx(Self,
			f0LongName.Text + ' さんが更新するマイナンバーの個人情報、及び個人番号は、' + #13#10 +
			'既に ' + sTopNm + ' さんで使用されています。このまま更新すると、MJSマイナンバーの' + #13#10 +
			'個人情報、及び個人番号を上書きしますがよろしいですか？',
			'警告', mjWarning, mjYesNo, mjDefNO) = mrYES ) then
		begin
			// 「はい」の場合、処理を続ける
		end else
		begin
			// 「いいえ」の場合、「更新」ボタンに戻る
			Exit;
		end;
	end;
// <MYN17> ins -e

	if not fnDataCheck(Self,True,Root_PMTab.items.selected) then
		exit;

//<226> ↓
    if not fnFldChk(Sender, True) then
        exit;
//<226> ↑

	if not BtnClkWriteJ() then
	begin
		abort;
		exit;
    end;

	{ＤＢに書き込み}
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		strGCode	:= f0TGCode.Text;
		strGCode    := TrimRight(strGCode);
		f0TGCode.Text := strGCode;
	end
	else
		strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);

	iSumKbn		:= Root_PMTab.Items.Selected;

	fnTreeUpdate (strGCode, iSumKbn);

    PMTab.Items.Selected := PAGE_KIHON;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
	else
		MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');

    m_EdtSw := False;                       // <130>変更ﾌﾗｸﾞOFF
//<194>
//    B_ImportWF.Enabled := False;            // <WF>申請書参照ﾎﾞﾀﾝ
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
//	abort;

// <MYN> ins -s
	if (f0MYNKbn.Text = MYN_KOJIN) and (f0MYNNo.Text <> '') then
	begin
		// 更新後、マスクする
		m_MaskCancel		:= False;
		m_MaskCancelFirst	:= True;

    	f0MYNNo.PasswordChar	:= '*';

		m_bOutInputFlg		:= False;	// <MYN5>
    end;
// <MYN> ins -e
end;

//**************************************************************************
//	Component	:	OnClick ( TMBitBtn )
//					実在取引先／取消ボタン
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_BBitBtn_CancelClick(Sender: TObject);

var
	strGCode	: String;
	iSumKbn		: Integer;
	iRet		: Integer;
begin
	//<KSSN>参照モードの時はチェックしない、無条件に取消
	if giReferFlag <> REFER then
	begin
        if not fnUpdateCheck(0) then
        begin
            ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,1);
            Beep;
            iRet := MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
            if iRet <> mrYes then
                exit;
        end;
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		strGCode	:= f0TGCode.Text;
		strGCode := TrimRight(strGCode);
		f0TGCode.Text := strGCode;
	end
	else
		strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);

    fnClearCard(0);                         // <134>ｸﾘｱ

//<194>
	if Sender <> B_ImportWF then
	begin
		iSumKbn		:= 0;
		fnDataRead (strGCode, iSumKbn, 0);
//		SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
//<199>
		memFsn.Close;	memFsn.Open;
		fnMemSet (iSumKbn, False);
		fnCreateCard (iSumKbn);

	    PMTab.Items.Selected := PAGE_KIHON;
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
	else
		MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');

    m_EdtSw := False;                       // <130>変更ﾌﾗｸﾞOFF
    uvCopyMtokui := False;					//<2257>取引先コピーフラグOFF
//<194>
//<198>
//    B_ImportWF.Enabled := False;            // <WF>申請書参照ﾎﾞﾀﾝ
//<Authority> DEL	if (m_cJNTArea.IsAppend = True) then
	if (m_JNTAuthority.IsAppend = True) then  //<Authority> ADD
		B_ImportWF.Enabled := True;
//    B_ImportWF.Enabled := True;            // <WF>申請書参照ﾎﾞﾀﾝ
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ

//<194>
	if Sender <> B_ImportWF then
		abort;
end;



//**************************************************************************
//	Component	:	JHojyoMA_DMemData ( TdxMemData )
//                  	DBに書き込み
//	Event		:	AfterPost
//**************************************************************************
procedure TJNTCRP004001f.JHojyoMA_DMemDataAfterPost(DataSet: TDataSet);

var
	strGCode,
    stCode      :   String;     // <166>
    iCut,iCode,                 // <166>
	iSumKbn		:   Integer;
//	iRet		:   Integer;
begin

	if giReferFlag = REFER then
		exit;

	if MemPost_Sw <> 0 then
		exit;

	if m_fEnd = 1 then
		Exit;

	if Jituzai_PPanel_Grid.Visible = False then
		exit;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		strGCode	:= JHojyoMA_DMemDataGCode.AsString
	else
	begin
		if JHojyoMA_DMemDataGCode.AsString <> '' then
			strGCode	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
		else
			strGCode := '';
	end;

	iSumKbn := Root_PMTab.Items.Selected;

	try
(*↓<DOJI-2>BeforePostに移動しました。

{		try
			if m_bExFlg <> True then
			begin
				cExcept := TMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					JHojyoMA_DMemData.Cancel;
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					JHojyoMA_DMemData.Cancel;
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				m_bExFlg 	:= True;
			end;
		except;
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;
}
// <109>       f1TSKBN.Checked := False;
// <109>       f1SSKBN.Checked := False;

		// -------------------------------------------------------------------------
		//  ｸﾞﾙｰﾌﾟ管理処理 <Rel>
		//
		//  親子同時に同一ｺｰﾄﾞを指定し、一覧(実在)画面でPostした場合の処理
		//  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合
		//  の考慮が必要。
		// -------------------------------------------------------------------------
		if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( JHojyoMA_DMemData.State in [dsInsert] ) then
		begin
		    case fnCorpRelation ( strGCode, iSumKbn ) of
		        0:  begin
		                // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
		            end;
		        1:  begin
		                // 正常に関連付が行えた場合は、画面の再描画を行う
                        Root_PMTabChange(Root_PMTab);
                        JHojyoMA_DMemData.Last();  // とりあえず、ﾌｫｰｶｽ位置は最終行
		                DataSet.FieldByName('GCode').FocusControl();
		                Abort;
		            end;
		        2:  begin
		                // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
		                DataSet.FieldByName('GCode').FocusControl();
		                Abort;
		            end;
		        -1, -9: begin
		                // 実在合計不一致、例外ｴﾗｰ
		                Abort;
		            end;
		    end;
		end;
		// ↑↑↑<Rel>
		// -------------------------------------------------------------------------

		{ＤＢに書き込み}
// <140>↓
//		if fnDataWrite (strGCode, iSumKbn, False) = False then
        if fnDataWriteGrid (strGCode, iSumKbn) = False then
// <140>↑
		begin
			abort;
			exit;
		end;

↑<DOJI-2>*)

		{TreeView追加or更新}
		fnTreeUpdate (strGCode, iSumKbn);

// ↓↓↓<166>
// AfterPostするﾀｲﾐﾝｸﾞでm_aCmnt_Jitu(付箋備考ﾋﾝﾄ用)配列を生成する。
        stCode:=strGCode;
        if ( MasterInfo_DMemDataCodeAttr.AsInteger <> 2 ) then
        begin
            if ( MasterInfo_DMemDataCodeAttr.AsInteger = 1 ) then
            begin
                if ( stCode <> '' ) then
                begin
                    iCut    :=  16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                    System.Delete(stCode, 1, iCut);
                end;
            end
            else
            begin
                if ( stCode <> '' ) then
                begin
                    iCode   :=  StrToInt64(Trim(stCode));
                    stCode  :=  IntToStr(iCode);
                end;
            end;
        end;
{
        SetLength(m_aCmnt_Jitu,Length(m_aCmnt_Jitu)+1);
        m_aCmnt_Jitu[Length(m_aCmnt_Jitu)-1].Code 	:= stCode;
        m_aCmnt_Jitu[Length(m_aCmnt_Jitu)-1].Cmnt 	:= '';
}
//<199>
		memFsn.Append;
		memFsnCode.AsString	:= stCode;
		memFsnCmnt.AsString := '';
		memFsn.Post;

// ↑↑↑<166>

	finally
//		if cExcept <> nil then
//		begin
//			cExcept.ResetTerm;
//			cExcept.Free;
//			cExcept := nil;
//		end;
	end;

end;



//**************************************************************************
//	Proccess	:	対象データをグリッドに表示する（子ノード全て）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	MyTreeNode	: TTreeNode
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.fnCreateGrid(WkTreeNode: TTreeNode; iSumKbn: Integer);

var
//	PickNode	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
//<KSN> DEL	strGCode	: String;
    iSumNCode : Extended;  //<KSN> ADD
begin
//	JHojyoMA_DMemData.DisableControls;
//	GHojyoMA_DMemData.DisableControls;

    JHojyoMA_DDataSource.DataSet := nil;
    Jituzai_DdxDBGrid.BeginUpdate;
    JHojyoMA_DMemData.Close;
    JHojyoMA_DMemData.Open;
//    SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
//<199>
	memFsn.Close;	memFsn.Open;
//<KSN> MOD St
{
	stWorkRec	:= WkTreeNode.Data;
	strGCode	:= stWorkRec^.strExCode;
}
    if TTreeNode = nil then
        iSumNCode := 0
    else
    begin
    	stWorkRec := WkTreeNode.Data;
        iSumNCode := stWorkRec^.iNCODE;
    end;
//<KSN> MOD Ed

	JHojyoMA_DMemData.DisableControls;

	try
		with MTOKUI_DMQuery do
		begin
			Close;
			SQL.Clear;		 							    // qmQuery 初期化
//<256> MOD St
//			SQL.Add('Select * from MTOKUI MA');

			SQL.Add('Select ');
			SQL.Add('      MA.GCode ');
			SQL.Add('      ,MA.SumKbn ');
			SQL.Add('      ,MA.RDelKbn ');
			SQL.Add('      ,MA.Renso ');
			SQL.Add('      ,MA.NM ');
			SQL.Add('      ,MA.NMK ');
			SQL.Add('      ,MA.NCode ');
			SQL.Add('      ,MA.SyokuchiKbn ');
			SQL.Add('      ,MA.HojyoKbn1 ');
			SQL.Add('      ,MA.HojyoKbn2 ');
			SQL.Add('      ,MA.SisanHojyoKbn1 ');
			SQL.Add('      ,MA.SisanHojyoKbn2 ');
			SQL.Add('      ,MA.SisanHojyoKbn3 ');
{
			SQL.Add('      ,MA.KeisyoKbn ');
			SQL.Add('      ,MA.Fkana ');
			SQL.Add('      ,MA.PostNo1 ');
			SQL.Add('      ,MA.PostNo2 ');
			SQL.Add('      ,MA.Ads1 ');
			SQL.Add('      ,MA.Ads2 ');
			SQL.Add('      ,MA.Tel1 ');
			SQL.Add('      ,MA.Tel2 ');
			SQL.Add('      ,MA.Fax1 ');
			SQL.Add('      ,MA.DHyoNm1 ');
			SQL.Add('      ,MA.DHyoNm2 ');
			SQL.Add('      ,MA.HPAddress ');
			SQL.Add('      ,MA.GyoNCode ');
			SQL.Add('      ,MA.CountryKBN ');
			SQL.Add('      ,MA.CurrencyNCODE ');
}
			SQL.Add('      ,FI.FusenKbn ');
			SQL.Add('      ,FI.FusenCmnt ');
// <MYN> ins -s
			SQL.Add('      ,MA.HoujinKbn ');
			SQL.Add('      ,MA.HoujinNo ');
			SQL.Add('      ,MA.KojinKey ');
// <MYN> ins -e
			SQL.Add('from MTOKUI MA');

//<256> MOD Ed
			SQL.Add('Left Outer Join HojyoTree TR On MA.NCode = TR.BasedNCode and TR.MasterKbn = :pMKBN');
			SQL.Add('Left Outer Join MFusenInfo FI On MA.NCode = FI.NCode and FI.MasterKbn = :pMKBN');
			SQL.Add('where TR.SumNCode =:SUMCD and MA.RDelKbn = 0 and MA.SumKbn =:SUM');
            SQL.Add(' and  TemplateKbn=0');                 // <112>
			SQL.ADD('ORDER BY EntNo');
//<256> DEL			SetFld('SUMCD').AsFloat := stWorkRec^.iNCODE;
//<KSN> DEL			SetFld('SUMCD').AsString := FormatFloat('0',stWorkRec^.iNCODE);  //<256> ADD
			SetFld('SUMCD').AsString := FormatFloat('0',iSumNCode);  //<KSN> ADD
			SetFld('SUM').AsInteger := iSumKbn;
            SetFld('pMKBN').asInteger := ucTORIHIKI;
			Open;

			while Eof = False do
			begin
				fnMemSet (iSumKbn, True);
				Next;
			end;
		end;

	finally
        JHojyoMA_DDataSource.DataSet := JHojyoMA_DMemData;
        if JHojyoMA_DMemData.RecordCount <> 0 then
            JHojyoMA_DMemData.First;
        Jituzai_DdxDBGrid.EndUpdate;
		JHojyoMA_DMemData.EnableControls;
	end;

end;

//**************************************************************************
//	Proccess	:	対象データをカードに表示する
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.fnCreateCard(iSumKbn: Integer);
var
	strGCode	: String;
	i		: Integer;
	QueryRead,Qry	: TMQuery;
    lvNAME          : String;
	lvSgCode        : string; //<SZERO>
begin
	QueryRead := nil;
    TagClear_Saiyo();  //<502_001> ADD

	try
		QueryRead := TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
		gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

        // 付箋情報SET
        FusenDsp(iSumKbn, JHojyoMA_DMemDataGCode.AsString, 1);
//        fnClearCard(iSumKbn,1); <108>
//        fnClearCard(1);

        if (JHojyoMA_DMemDataGCode.AsString <> '')  then
        begin

            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                f0TGCode.Text	   := JHojyoMA_DMemDataGCode.AsString
            else
            begin
                f0NGCode.InputFlag := False;
                f0NGCode.Value	   := StrToInt64(Trim(JHojyoMA_DMemDataGCode.AsString));
            end;
            strGCode := JHojyoMA_DMemDataGCode.AsString;

            // 付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

            if (JHojyoMA_DMemDataFusenIndex.AsInteger >=1 )
                and (JHojyoMA_DMemDataFusenIndex.AsInteger <=4 ) then
                TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(JHojyoMA_DMemDataFusenIndex.AsInteger))).Visible := TRUE;

            // 基本情報
            f0RenChar.Text				:=  JHojyoMA_DMemDataRenChar.AsString;
            f0LongName.Text			    :=  JHojyoMA_DMemDataLongName.AsString;
//<MJUP>    f0Name.Text                 :=  JHojyoMA_DMemDataLongName.AsString; // <163>
            f0Name.Caption              :=  JHojyoMA_DMemDataLongName.AsString; // <163><MJUP>
            f0SimpleName.Text			:=  JHojyoMA_DMemDataSimpleName.AsString;
            f0KEISYOKBN.text            :=  MTOKUI_DMQuery.FieldByName('KeisyoKbn').asString;
            f0FKANA.text                :=  MTOKUI_DMQuery.FieldByName('Fkana').asString;
            f0ZipCode1.Value            :=  MTOKUI_DMQuery.FieldByName('PostNo1').asInteger;
            f0ZipCode2.Value            :=  MTOKUI_DMQuery.FieldByName('PostNo2').asInteger;
            //↓<PST2>
            if MTOKUI_DMQuery.FieldByName('PostNo1').asInteger <> 0 then
         	begin
	            f0ZipCode2.Zero := True;
            end
            else
            begin
	            f0ZipCode2.Zero := False;
            end;
            //↑<PST2>
            f0Address1.text             :=  MTOKUI_DMQuery.FieldByName('Ads1').asString;
            f0Address2.text             :=  MTOKUI_DMQuery.FieldByName('Ads2').asString;
            f0TelNo.text                :=  MTOKUI_DMQuery.FieldByName('Tel1').asString;
            f0TelNo2.text               :=  MTOKUI_DMQuery.FieldByName('Tel2').asString;
            f0FAX.text                  :=  MTOKUI_DMQuery.FieldByName('Fax1').asString;
            f0DHYONM1.text              :=  MTOKUI_DMQuery.FieldByName('DHyoNm1').asString;
            f0DHYONM2.text              :=  MTOKUI_DMQuery.FieldByName('DHyoNm2').asString;
            f0HPADD.text                :=  MTOKUI_DMQuery.FieldByName('HPAddress').asString;
            f0GYCode.Text               :=  fnGetGCODE(MTOKUI_DMQuery.FieldByName('GyoNCode').asFloat,ucGyosyu);
            // 名称を取得
            fnGetNAME(f0GYCode.Text,ucGyosyu,uvGYCodeAttr,lvNAME);
            // ﾗﾍﾞﾙに名称をｾｯﾄ
            f0GYName.Caption := lvName;
//<226> ↓
            f0ECOUNTRY.value            := MTOKUI_DMQuery.FieldByName('CountryKBN').AsInteger;
            f0ECURRENCY.text            := fnGetGCODE(MTOKUI_DMQuery.FieldByName('CurrencyNCODE').AsInteger, MASTER_CurrKBN);
            if (f0ECOUNTRY.AsInteger > 0) and (f0ECOUNTRY.AsInteger <= Length(ucCstM_CTR)) then
                f0LCOUNTRY.Caption      := ucCstM_CTR[f0ECOUNTRY.AsInteger]
            else
                f0LCOUNTRY.Caption      := '';

            fnGetNAME(f0ECURRENCY.text, MASTER_CurrKBN, 2, lvNAME);
            f0LCURRENCY.Caption         := lvNAME;
            //使用制御
            if f0ECOUNTRY.AsInteger = 1 then
			begin
                fnChgCmpEna(False, f0ECURRENCY);     //通貨区分
			end
            else
			begin
                fnChgCmpEna(True, f0ECURRENCY);     //通貨区分
				// 伝票入力済みの時は、「国内外区分」「通貨」は変更出来ない。
			    fnChgCmpEna(uvChangeFL_Sime, f0ECURRENCY);	//<227>
			end;

			// 伝票入力済みの時は、「国内外区分」「通貨」は変更出来ない。
		    fnChgCmpEna(uvChangeFL_Sime, f0ECOUNTRY);	//<227>

            //変数初期化
            uvChgCOUNTRY  := False;
            uvChgCurrency := False;
//<226> ↑

// <MYN> ins -s
            fnClearMYN();	// <MYN7>
			// 法人･個人区分
			if (MTOKUI_DMQuery.FieldByName('Syokuchikbn').AsInteger = 1) then	// 諸口
			begin
				f0MYNKbn.Clear;
               	fnSetMYN('-2');
			end else
			begin
				if (MTOKUI_DMQuery.FieldByName('HoujinKbn').IsNull) then  		// 空白
				begin
					f0MYNKbn.Value	:= -1;	// 初期化<MYN2>

	    	       	f0MYNKbn.Clear;
					KBNChange(f0MYNKbn);
				end else
				begin
					f0MYNKbn.Value	:= -1;	// <MYN15>初期化しないと区分が入らない。

    		       	f0MYNKbn.Value	:= MTOKUI_DMQuery.FieldByName('HoujinKbn').AsInteger;
					KBNChange(f0MYNKbn);
				end;
			end;

			// 法人･個人番号
			if (f0MYNKbn.Text = MYN_HOUJIN) then	// 法人
			begin
				f0MYNNo.Text	:= fnGetHoujinNo(MTOKUI_DMQuery.FieldByName('HoujinNo').asString);
				m_sSaveHoujinNo	:= f0MYNNo.Text;
			end else
			if (f0MYNKbn.Text = MYN_KOJIN) then		// 個人
			begin
				// 初回
				m_sSaveKojinKey	:= MTOKUI_DMQuery.FieldByName('KojinKey').AsString;
                m_sSaveKojinNo 		:= '';
                m_sSaveKojinNoDummy	:= '';

				if (m_sSaveKojinKey <> '') then
				begin
// <MYN3> ins -s
// <MYN11> upd -s 権限なしで個人番号ありの場合は空欄でなく*表示する。
//          			if (m_iAccType = MYNACCESS_TYPE_NONE) then
					if (m_bPanelKojin = False) then
// <MYN11> upd -e
					begin
	                   	f0MYNNo.Text		:= '';
					end else
					begin
// <MYN3> ins -e
  						m_sSaveKojinNoDummy	:= fnExistKojinNo(m_sSaveKojinKey);
	                  	f0MYNNo.Text		:= m_sSaveKojinNoDummy;
					end;	// <MYN3>
				end else
				begin
                   	f0MYNNo.Text		:= '';
				end;
			end;
// <MYN> ins -e

            f0SYAINSU.Value             := MTOKUI_DMQuery.FieldByName('SyainSu').asFloat;
            f0NENSYO.Value              := MTOKUI_DMQuery.FieldByName('Nensyo').asFloat;
            f0SIHONKIN.Value            := MTOKUI_DMQuery.FieldByName('ShihonKin').asFloat;

            if MTOKUI_DMQuery.FieldByName('TStartDate').asDateTime = m_cJNTArea.getDefDate(1) then
                f0StartDate.asDateTime  := 0
            else
                f0StartDate.AsDateTime  := MTOKUI_DMQuery.FieldByName('TStartDate').asDateTime;

            if MTOKUI_DMQuery.FieldByName('TEndDate').asDateTime = m_cJNTArea.getDefDate(2) then
                f0EndDate.asDatetime    := 0
            else
                f0EndDate.asDateTime    := MTOKUI_DMQuery.FieldByName('TEndDate').asDateTime;

            // 得意先採用区分
            if MTOKUI_DMQuery.FieldByName('HojyoKbn1').asInteger = 0 then
            begin
                f1TSKBN.Checked := False
            end
            else begin
                f1TSKBN.Checked := True;

                // 入金情報
                // 締日1
                f1NClosingDay1.Value := MTOKUI_DMQuery.FieldByName('RCloseDay1').AsInteger;
                if f1NClosingDay1.Value <> 0 then
                begin
                    f1NMonth1.ItemIndex   := MTOKUI_DMQuery.FieldByName('RcvMonth1').AsInteger;
                    f1NDay1.value         := MTOKUI_DMQuery.FieldByName('RcvDay1').AsInteger;
                    f1NHoliday1.ItemIndex := MTOKUI_DMQuery.FieldByName('RHolidayKbn1').AsInteger;
                end;

                // 締日2
                f1NClosingDay2.Value := MTOKUI_DMQuery.FieldByName('RCloseDay2').AsInteger;
                if f1NClosingDay2.Value <> 0 then
                begin
                    f1NMonth2.ItemIndex   := MTOKUI_DMQuery.FieldByName('RcvMonth2').AsInteger;
                    f1NDay2.value         := MTOKUI_DMQuery.FieldByName('RcvDay2').AsInteger;
                    f1NHoliday2.ItemIndex := MTOKUI_DMQuery.FieldByName('RHolidayKbn2').AsInteger;
                end;

                // 締日3
                f1NClosingDay3.Value := MTOKUI_DMQuery.FieldByName('RCloseDay3').AsInteger;
                if f1NClosingDay3.Value <> 0 then
                begin
                    f1NMonth3.ItemIndex   := MTOKUI_DMQuery.FieldByName('RcvMonth3').AsInteger;
                    f1NDay3.value         := MTOKUI_DMQuery.FieldByName('RcvDay3').AsInteger;
                    f1NHoliday3.ItemIndex := MTOKUI_DMQuery.FieldByName('RHolidayKbn3').AsInteger;
                end;
            end;

            // 仕入先採用区分
            if MTOKUI_DMQuery.FieldByName('HojyoKbn2').asInteger = 0 then
            begin
                f1SSKBN.Checked := False
            end
            else begin
                f1SSKBN.Checked := True;

                // 支払情報
                // 締日1
                f1SClosingDay1.Value := MTOKUI_DMQuery.FieldByName('PCloseDay1').AsInteger;
                if f1SClosingDay1.Value <> 0 then
                begin
                    f1SMonth1.ItemIndex   := MTOKUI_DMQuery.FieldByName('PayMonth1').AsInteger;
                    f1SDay1.Value         := MTOKUI_DMQuery.FieldByName('PayDay1').AsInteger;
                    f1SHoliday1.ItemIndex := MTOKUI_DMQuery.FieldByName('PHolidayKbn1').AsInteger;
                end;
                // 締日2
                f1SClosingDay2.Value := MTOKUI_DMQuery.FieldByName('PCloseDay2').AsInteger;
                if f1SClosingDay2.Value <> 0 then
                begin
                    f1SMonth2.ItemIndex   := MTOKUI_DMQuery.FieldByName('PayMonth2').AsInteger;
                    f1SDay2.Value         := MTOKUI_DMQuery.FieldByName('PayDay2').AsInteger;
                    f1SHoliday2.ItemIndex := MTOKUI_DMQuery.FieldByName('PHolidayKbn2').AsInteger;
                end;
                // 締日3
                f1SClosingDay3.Value := MTOKUI_DMQuery.FieldByName('PCloseDay3').AsInteger;
                if f1SClosingDay3.Value <> 0 then
                begin
                    f1SMonth3.ItemIndex   := MTOKUI_DMQuery.FieldByName('PayMonth3').AsInteger;
                    f1SDay3.Value         := MTOKUI_DMQuery.FieldByName('PayDay3').AsInteger;
                    f1SHoliday3.ItemIndex := MTOKUI_DMQuery.FieldByName('PHolidayKbn3').AsInteger;
                end;
            end;

            //<158>ST---
            if MTOKUI_DMQuery.FieldByName('SisanHojyoKbn1').AsInteger = 0 then
                f1SHojyoKbn1.Checked := False
            else
                f1SHojyoKbn1.Checked := True;

            if MTOKUI_DMQuery.FieldByName('SisanHojyoKbn2').AsInteger = 0 then
                f1SHojyoKbn2.Checked := False
            else
                f1SHojyoKbn2.Checked := True;
            //<158>ED---

			//<195>ST---
			if MTOKUI_DMQuery.FieldByName('SisanHojyoKbn3').AsInteger = 0 then
				f1SHojyoKbn3.Checked := False
            else
				f1SHojyoKbn3.Checked := True;
			//<195>ED---

            // ｾｸﾞﾒﾝﾄ情報
            for i := 1 to  10 do
            begin
{↓<SZERO>
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text
                    := fnGetGCODE(MTOKUI_DMQuery.FieldByName('SegNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_Seg [i].nMasterDivision) ;
↑<SZERO>}
//↓<SZERO>表示時、0諸口を表現したい。InputFlagをFalseにしたいので一度変数に受けてから制御する。
				TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Zero			:= True;

				lvSgCode := fnGetGCODE(MTOKUI_DMQuery.FieldByName('SegNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_Seg [i].nMasterDivision);
				if lvSgCode <> '' then
				begin
					TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlag	:= False;
					TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text			:= lvSgCode;
				end
				else
				begin
					TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlag	:= True;
					TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text			:= '';
				end;
//↑<SZERO>
                // 名称を取得
                fnGetNAME(TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text,
                  m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute,lvNAME);
                // ﾗﾍﾞﾙに名称をｾｯﾄ
                TMLabel  (MJSFindCtrl(Self, 'f2SgName' + IntToStr(i))).Caption := lvName;

            end;

//↓<SZERO>VTreeViewChangeが流れたとき、諸口なのにセグメントなどが入力可になっているので、ここで制御する。
            if (MTOKUI_DMQuery.FieldByName('Syokuchikbn').AsInteger = 1) then
            begin
                // 諸口取引先はセグメント、得意先分類、仕入先分類は使用不可
                MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode',  False);
                MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', False);
                MjsDispCtrl.MjsSetEnableds(Self, 'f3SBrCode', False);
            end
            else
            begin
                // 通常取引先はセグメント使用可
                //             得意先分類、仕入先分類は採用状態により使用可⇔不可を切り替え
                MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode',  True);
                MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', f1TSKBN.Checked);
                MjsDispCtrl.MjsSetEnableds(Self, 'f3SBrCode', f1SSKBN.Checked);
            end;
//↑<SZERO>

//            uvSyokuchiKbn := MTOKUI_DMQuery.GetFld('SyokuchiKbn').AsInteger;    //<159><177>

            // 対象ﾚｺｰﾄﾞを取得する
            Qry := TMQuery.Create(Self);					    // MQueryの構築
            if Assigned(Qry) <> True then
                Exit;
//<D10>		MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとの接続
			gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

            try
                with Qry  do
                begin
                    // 得意先採用
                    if f1TSKBN.Checked then
                    begin
                        // mtokui_SELからの情報を取得
                        Close;
                        Sql.Clear;
                        Sql.Add('Select se1.MasKbn,se1.RZuiSSite,se1.RTSEINO,se1.RHolidayKbn, '+
                                ' se1.BunruiNCode1,se1.BunruiNCode2,se1.BunruiNCode3,se1.BunruiNCode4,se1.BunruiNCode5, '+
                                ' se1.BunruiNCode6,se1.BunruiNCode7,se1.BunruiNCode8,se1.BunruiNCode9,se1.BunruiNCode10 '+
                                ' from MTOKUI_SEL se1'+
                                ' Left Outer Join MTOKUI ma On ma.NCode = se1.BaseNCode and se1.RecKbn= 1'+
                                ' Where ma.NCODE = :NCODE and ma.RDelKbn =0 '+
                                '   and se1.RecKbn    = 1');
//<256> DEL                        ParamByName('NCODE').asFloat := JHojyoMA_DMemDataNCode.AsFloat;
                        ParamByName('NCODE').asString := JHojyoMA_DMemDataNCode.AsString;  //<256> ADD
                        Open;

                        if not Eof then
                        begin
                            // 得意先区分
                            f1TKBN.Value   := FieldByName('MasKBN').AsInteger;
                            // 随時請求回収ｻｲﾄ
                            f1NSSite.Value := FieldByName('RZuiSSite').AsInteger;
                            // 特殊請求NO <182>
                            if FieldByName('RTSEINO').AsString <> '' then
                                f1NSeino.Value := FieldByName('RTSEINO').AsInteger
                            else
                                f1NSeino.Value := 0;
                            // 随時/特殊休日
                            f1NHolidayKbn.ItemIndex := FieldByName('RHolidayKbn').AsInteger;

                            // 得意先分類
                            for i := 1 to  10 do
                            begin
                                TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Text
                                 := fnGetGCODE(FieldByName('BunruiNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_Tbr [i].nMasterDivision);

                                // 名称を取得
                                fnGetNAME(TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Text,
                                         m_arAdoptInfo_Tbr [i].nMasterDivision,m_arAdoptInfo_Tbr [i].nCodeAttribute,lvNAME);
                                // ﾗﾍﾞﾙに名称をｾｯﾄ
                                TMLabel  (MJSFindCtrl(Self, 'f3TBrName' + IntToStr(i))).Caption := lvName;
                            end;

                            // 締日ﾌｨｰﾙﾄﾞの制御
                            fnSeiKbn_EnableControl( 0,
                                                    uvChangeFL_Sime,
                                                    uvChangeFL_T,
                                                    uvChangeFL_Z);
                            fnSeiKbn_EntryControl;
                        end;
                    end;

                    // 仕入先採用
                    if f1SSKBN.Checked then
                    begin
                        Close;
                        Sql.Clear;
                        Sql.Add('Select se2.MasKbn,se2.RZuiSSite,se2.RTSEINO,se2.RHolidayKbn, '+
                                ' se2.BunruiNCode1,se2.BunruiNCode2,se2.BunruiNCode3,se2.BunruiNCode4,se2.BunruiNCode5, '+
                                ' se2.BunruiNCode6,se2.BunruiNCode7,se2.BunruiNCode8,se2.BunruiNCode9,se2.BunruiNCode10 '+
                                ' from MTOKUI_SEL se2'+
                                ' Left Outer Join MTOKUI ma On ma.NCode = se2.BaseNCode  and se2.RecKbn= 2'+
                                ' Where ma.NCODE = :NCODE and ma.RDelKbn = 0'+
                                '   and se2.RecKbn    = 2');
//<256> DEL                        ParamByName('NCODE').asFloat := JHojyoMA_DMemDataNCode.AsFloat;
                        ParamByName('NCODE').asString := JHojyoMA_DMemDataNCode.AsString;  //<256> ADD
                        Open;

                        if not Eof then
                        begin
                            // 仕入先区分
                            f1SKBN.Value := FieldByName('MasKBN').AsInteger;
                            // 随時請求回収ｻｲﾄ
                            f1SSSite.Value := FieldByName('RZuiSSite').AsInteger;
                            // 特殊請求NO <182>
                            if FieldByName('RTSEINO').AsString <> '' then
                                f1SSeino.Value := FieldByName('RTSEINO').AsInteger
                            else
                                f1SSeino.Value := 0;
                            // 随時/特殊休日
                            f1SHolidayKbn.ItemIndex := FieldByName('RHolidayKbn').AsInteger;

                            // 仕入先分類
                            for i := 1 to  10 do
                            begin
                                TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Text
                                    := fnGetGCODE(FieldByName('BunruiNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_SBr [i].nMasterDivision);

                                // 名称を取得
                                fnGetNAME(TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Text,
                                         m_arAdoptInfo_Sbr [i].nMasterDivision,m_arAdoptInfo_Sbr [i].nCodeAttribute,lvNAME);
                                // ﾗﾍﾞﾙに名称をｾｯﾄ
                                TMLabel  (MJSFindCtrl(Self, 'f3SBrName' + IntToStr(i))).Caption := lvName;
                            end;

                            // 締日ﾌｨｰﾙﾄﾞの制御
                            fnSeiKbn_EnableControl( 1,
                                                    uvChangeFL_Sime_S,
                                                    uvChangeFL_T_S,
                                                    uvChangeFL_Z_S);

                            fnSeiKbn_EntryControl_SI;
                        end;
                    end;
                end;
//<Authority> MOD St
{
                B_Fusen.Enabled    := m_cJNTArea.IsFusen;
                B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
                B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
                B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed

            finally
                Qry.Close ;
                Qry.Free ;
            end;

        end
        else
        begin
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                f0TGCode.Text			:= ''
            else
            begin
                f0NGCode.Value			:= 0;
                f0NGCode.InputFlag		:= True;
            end;
        end;

	finally
		QueryRead.Free;
	end;

// <MYN2> ins -s
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		m_sSaveValueCode	:= f0TGCode.Text
    else
		m_sSaveValueCode	:= f0NGCode.Text;
// <MYN2> ins -e


    //<159> ST---
{ <177>
    if uvSyokuchiKbn = 1 then
    begin
        f1TSKBN.Enabled := False;
        f1SSKBN.Enabled := False;
        f1SHojyoKbn1.Enabled := False;
        f1SHojyoKbn2.Enabled := False;
    end
    else
    begin
        f1SHojyoKbn1.Enabled := True;
        f1SHojyoKbn2.Enabled := True;
    end;
}
    //<159> ED---

    // 初期化
    UpdFreeFlg := False;
    freeItem   := freeItemNull;
    freeChgItem   := freeChgItemNull;//<253>

    m_EdtSw := False;                       // <130>変更ﾌﾗｸﾞOFF
//<194>
//    B_ImportWF.Enabled := False;            // <WF>申請書参照ﾎﾞﾀﾝ
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
    TagSet_Saiyo();  //<502_001> ADD
end;

//**************************************************************************
//	Proccess	:	対象データをカードをクリアする
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
//procedure TJNTCRP004001f.fnClearCard(iSumKbn,pKBN: Integer); <108>
procedure TJNTCRP004001f.fnClearCard(iKBN: Integer);
                                        //画面を初期化のみ（pKBN=1はｶｰﾄﾞﾃﾞｰﾀ初期化のみ）
var
	i: Integer;
begin
	MemPost_Sw	:= 1;

    B_Fusen.Enabled    := False;
    B_FusenBar.Enabled := False;

// <164>    if iKBN = 0 then
    if (iKBN in [0,2] ) then    // <164>
    begin
        JHojyoMA_DMemData.Close;
        JHojyoMA_DMemData.Open;
    end;

    TagClear_Saiyo();  // Tagクリア <502_001> ADD

    // 基本情報TAB
    if ( iKBN <> 2 ) then // <164>
    begin
        f0TGCode    .Clear;
        f0NGCode    .Value      :=  0;
        f0NGCode    .InputFlag  :=  TRUE;
    end;

//<MJUP>f0Name      .Clear;     // <163>
    f0Name      .Caption := '';     // <163><MJUP>
    f0RenChar   .Clear;
    f0LongName  .Clear;
    f0SimpleName.Clear;
    f0FKANA     .Clear;
    f0KEISYOKBN .Clear;
    f0ZipCode1  .Clear;
    f0ZipCode2  .Clear;
    f0ZipCode1  .Value      :=  0;
    f0ZipCode2  .Value      :=  0;
    f0ZipCode2  .Zero       := False; //<PST2>
    f0Address1  .Clear;
    f0Address2  .Clear;
    f0TelNo     .Clear;
    f0TelNo2    .Clear;
    f0FAX       .Clear;
    f0DHYONM1   .Clear;
    f0DHYONM2   .Clear;
    f0HPADD     .Clear;
    f0GYCode    .Text       :=  '';
    f0GYName    .Caption    :=  ''; // <133>
    f0SYAINSU   .Value      :=  0;
    f0NENSYO    .Value      :=  0;
    f0SIHONKIN  .Value      :=  0;
    f0StartDate .Value      :=  0;
    f0EndDate   .Value      :=  0;
//<226> ↓
    f0ECOUNTRY.value        := 0;
    f0ECURRENCY.Text        :=  '';
    f0LCOUNTRY.Caption      := '';
    f0LCURRENCY.Caption     := '';
//<226> ↑

// <MYN> ins -s
    f0MYNKbn.Value			:= -1;
	f0MYNKbn.Clear;
    KbnChange(f0MYNKbn);

	f0LMYNKbnNm.Caption		:= '';
	f0MYNNo.Text			:= '';

	fnClearMYN();
// <MYN> ins -e

    // 採用情報TAB
    f1TSKBN.Checked         := False;
    f1TKBN.Value            := 0;
    f1TKBNNM.Caption        := '';
    f1NClosingDay1.Value    := 0;
    f1NClosingDay2.Value    := 0;
    f1NClosingDay3.Value    := 0;
    f1NMonth1.ItemIndex     := -1;
    f1NMonth2.ItemIndex     := -1;
    f1NMonth3.ItemIndex     := -1;
    f1NDay1.Value           := 0;
    f1NDay2.Value           := 0;
    f1NDay3.Value           := 0;
    f1NHoliday1.ItemIndex   := -1;
    f1NHoliday2.ItemIndex   := -1;
    f1NHoliday3.ItemIndex   := -1;
    f1NSSite.Value          := 0;
    f1NSeino.Value          := 0;
    f1NHolidayKbn.ItemIndex := -1;

    f1SKBNNM.Caption        := '';
    f1SSKBN.Checked         := False;
    f1SKBN.Value            := 0;
    f1SClosingDay1.Value    := 0;
    f1SClosingDay2.Value    := 0;
    f1SClosingDay3.Value    := 0;
    f1SMonth1.ItemIndex     := -1;
    f1SMonth2.ItemIndex     := -1;
    f1SMonth3.ItemIndex     := -1;
    f1SDay1.Value           := 0;
    f1SDay2.Value           := 0;
    f1SDay3.Value           := 0;
    f1SHoliday1.ItemIndex   := -1;
    f1SHoliday2.ItemIndex   := -1;
    f1SHoliday3.ItemIndex   := -1;
    f1SSSite.Value          := 0;
    f1SSeino.Value          := 0;
    f1SHolidayKbn.ItemIndex := -1;

    f1SHojyoKbn1.Checked    := False;   // <171>
    f1SHojyoKbn2.Checked    := False;   // <171>
	f1SHojyoKbn3.Checked	:= False;	// <195>

    // ｾｸﾞﾒﾝﾄ
    for i := 1 to  10 do
    begin
        TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Zero         := False;   //<156>
        TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlag    := True;    //<156>
        TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text         := '';
        TMLabel  (MJSFindCtrl(Self, 'f2SgName' + IntToStr(i))).Caption      := '';
    end;

    // 得意先分類
    for i := 1 to  10 do
    begin
        TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Zero        := False;   //<156>
        TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).InputFlag   := True;    //<156>
        TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Text        := '';
        TMLabel  (MJSFindCtrl(Self, 'f3TBrName' + IntToStr(i))).Caption     := '';
    end;

    // 仕入先分類
    for i := 1 to  10 do
    begin
        TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Zero        := False;   //<156>
        TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).InputFlag   := True;    //<156>
        TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Text        := '';
        TMLabel  (MJSFindCtrl(Self, 'f3SBrName' + IntToStr(i))).Caption     := '';
    end;

    // 付箋初期化
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

	MemPost_Sw	:= 0;

    //初期化102>
    UpdFreeFlg := False;
    freeItem   := freeItemNull;
    freeChgItem   := freeChgItemNull;//<253>

    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
//<194>
	LSinsei.Visible	:= False;
	PPanelTree.Enabled		:= True;
	PPanel_Kihon.Enabled	:= True;
	PPanel_Saiyo.Enabled	:= True;
	PPanel_Seg.Enabled		:= True;
	PPanel_Br.Enabled		:= True;
	Jituzai_BBitBtn_Ok.Enabled := True;
//	f0Name.MLeftMargin := 0;

// <MYN10> upd -s
//	m_sSaveValueCode	:= '';	// <MYN2>
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		m_sSaveValueCode	:= f0TGCode.Text
    else
		m_sSaveValueCode	:= f0NGCode.Text;

	m_EdtSw := False;                       // 変更ﾌﾗｸﾞOFF
// <MYN10> upd -e
end;


//**************************************************************************
//	Proccess	:	取引先データ読み込み（１件）
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer (0:実在 1:合計)
//	Retrun		:
//**************************************************************************
function TJNTCRP004001f.fnDataRead(strGCode: String; iSumKbn: Integer; iChk: Integer): Integer;
var
	QueryError	:	TMQuery;
    i           :   Integer;    //<156>
begin
//m_Log.Log_OutPut('fnDataRead-Start');  //*Log*
    // 外部ｺｰﾄﾞを属性により編集
	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if strGCode <> '' then
			strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
	end;

    // 取引先の存在ﾁｪｯｸ
	if iChk = 1 then
	begin
		QueryError := TMQuery.Create(Self);					        // MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryError);    // DBとMQueryの接続
		gfnJNTSELSetDbName(QueryError, dbCorp_Select);		//<D10>

		// 取引先ﾕﾆｰｸﾁｪｯｸ
		with QueryError do
		begin
			try
				Close;
				SQL.Clear;
				SQL.Add('Select GCODE from MTOKUI');
    			SQL.Add('Where  RDelKbn=0 and GCode=:strGCode and SumKbn=:iSumKbn');
				SetFld('strGCode').AsString	:= strGCode;
				if iSumKbn = 0 then
					SetFld('iSumKbn').AsInteger	:= 1
				else
					SetFld('iSumKbn').AsInteger	:= 0;
				Open;

				if Eof = False then
				begin
					result := -1;
					exit;
				end;
			finally
				Free;
			end;
		end;
	end;

    // 締日変更情報の初期化
    // 得意先
    uvENDKAISU_T      := 0;                                 // 締回数
    uvChangeFL_Sime   := True;                              // 締日変更可能
    uvChangeFL_T      := True;                              // 特殊変更可能
    uvChangeFL_Z      := True;                              // 随時変更可能
    // 仕入先
    uvENDKAISU_S      := 0;                                 // 締回数
    uvChangeFL_Sime_S := True;                              // 締日変更可能
    uvChangeFL_T_S    := True;                              // 特殊変更可能
    uvChangeFL_Z_S    := True;                              // 随時変更可能

//↓<203>
    uvChangeFL_Kounyu   := True;                            // 資産購入先採用区分変更可能
    uvChangeFL_Baikyaku := True;                            // 資産売却先採用区分変更可能
    uvChangeFL_Lease    := True;                            // リース取引先採用区分変更可能
    uvChangeFL_Crd      := True;                            // 債権情報をチェック用得意先採用区分を、まずは変更可能に
    uvChangeFL_Pay      := True;                            // 債務情報をチェック用仕入先採用区分を、まずは変更可能に
//↑<203>
    if IsSyosaiMode then   // <256> ADD 詳細画面時
    begin                  // <256> ADD
        //<156>--Zeroﾌﾟﾛﾊﾟﾃｨ---ST
{↓<SZERO>制御しなくてＯＫ
        // ｾｸﾞﾒﾝﾄ
        for i := 1 to  10 do
        begin
            TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Zero         := False;
            TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlag    := True;
        end;
↑<SZERO>}
        // 得意先分類
        for i := 1 to  10 do
        begin
            TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Zero        := False;
            TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).InputFlag   := True;
        end;

        // 仕入先分類
        for i := 1 to  10 do
        begin
            TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Zero        := False;
            TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).InputFlag   := True;
        end;
        //<156>--Zeroﾌﾟﾛﾊﾟﾃｨ---ED
    end;  //<256> ADD

	// MTOKUIの読み込み
	with MTOKUI_DMQuery do
	begin
		try
			Close;
			SQL.Clear;
//			SQL.Add('Select ma.*, se1.TRSEIKBN TSKBN ,se2.TRSEIKBN SSKBN '); <173>
//<256> MOD St
			SQL.Add('Select ma.*, se1.TRSEIKBN TSKBN, se1.OyakoFlg TOFlg, ');
{
			SQL.Add('Select ma.NCode ');
			SQL.Add('       ,ma.HojyoKbn1 ');
			SQL.Add('       ,ma.HojyoKbn2 ');
			SQL.Add('       ,ma.SyokuchiKbn ');
			SQL.Add('       ,ma.PostNo1 ');
			SQL.Add('       ,ma.PostNo2 ');
			SQL.Add('       ,ma.Ads1 ');
			SQL.Add('       ,ma.Ads2 ');
			SQL.Add('       ,ma.Tel1 ');
			SQL.Add('       ,ma.Tel2 ');
			SQL.Add('       ,ma.Fax1 ');
			SQL.Add('       ,ma.TStartDate ');
			SQL.Add('       ,ma.TEndDate ');
			SQL.Add(' , se1.TRSEIKBN TSKBN, se1.OyakoFlg TOFlg, ');
}
//<256> MOD Ed
			SQL.Add(' se2.TRSEIKBN SSKBN, se2.OyakoFlg SOFlg ');
            SQL.Add(' from MTOKUI ma');
			SQL.Add('Left Outer Join MTOKUI_SEL se1 On ma.NCode = se1.BaseNCode  and se1.RecKbn= 1');
			SQL.Add('Left Outer Join MTOKUI_SEL se2 On ma.NCode = se2.BaseNCode  and se2.RecKbn= 2');
			SQL.Add('Where ma.RDelKbn=0 and ma.GCode=:strGCode');
			SQL.Add('  and ma.SumKbn=:iSumKbn');
			SQL.Add('  and ma.TemplateKbn = 0');   //<265> ADD
			SetFld('strGCode').AsString	:= strGCode;
			SetFld('iSumKbn').AsInteger	:= iSumKbn;
			Open;

		except
			ShowMessage('MTOKUI Read Error!');
			Result := -1;
            Exit;  //<KSN> ADD
		end;
// <141>↓ｺﾒﾝﾄｱｳﾄ
//        uvSeiKbn   := FieldByName('TSKBN').AsInteger;       // 請求区分<103>
//        uvSeiKbn_S := FieldByName('SSKBN').AsInteger;       // 請求区分<103>
// <141>↑

        // 得意先の変更前状態の保存
        with uvData_Load do
        begin
            pvrDenHas := False;	                                // 伝票発生(未発生)<103>
            pvrSHas	  := False;	                                // _S  発生(未発生)<103>
            pvrSeiKbn := uvSeiKbn;		                        // 請求区分<103>
            pvrSeiKbn := FieldByName('TSKBN')       .AsInteger;	// 請求区分<103><169>
            pvrSai    := FieldByName('HojyoKbn1')   .AsInteger; // 得意先採用区分
        end;

        // 仕入先の変更前状態の保存
        with uvData_Load_S do
        begin
            pvrDenHas := False;	                                // 伝票発生(未発生)<103>
            pvrSHas	  := False;	                                // _S  発生(未発生)<103>
            pvrSeiKbn := uvSeiKbn;		                        // 請求区分<103>
            pvrSeiKbn := FieldByName('SSKBN')       .AsInteger;	// 請求区分<103><169>
            pvrSai    := FieldByName('HojyoKbn2')   .AsInteger; // 仕入先採用区分
        end;

        // 実績の存在、発生ﾁｪｯｸ
//        fnProcess_EnableJudge <173>
//                (FieldByName('NCODE').asFloat,
//                 FieldByName('HojyoKbn1').AsInteger,
//                 FieldByName('HojyoKbn2').AsInteger);
//<256> ADD St
        if m_bNotStored = false then
        begin
//<256> ADD Ed
            fnProcess_EnableJudge
                    (FieldByName('NCODE').asFloat,
                     FieldByName('HojyoKbn1').AsInteger,
                     FieldByName('TOFlg').AsInteger,
                     FieldByName('HojyoKbn2').AsInteger,
                     FieldByName('SOFlg').AsInteger);
        end;  //<256> ADD
{↓<203>ライセンスチェックは一度だけ行えばよいので、FormCreateに移動する。
        //<195>↓
		if (CheckModuleLicense(m_pMyAppRecord,FXLicense.DEP_LEA)) then
    		f1SHojyoKbn3.Enabled := True
		else
    		f1SHojyoKbn3.Enabled := False;
		//<195>↑
↑<203>}
//↓<203>
        if (MTOKUI_DMQuery.RecordCount > 0) then
        begin
            if m_bNotStored = false then  //<256> ADD
                fnDep_EnableJudge(FieldByName('NCODE').asFloat);
        end;
//↑<203>
        //<177>
        if FieldByName('SyokuchiKbn').AsInteger = 1 then
        begin
            uvChangeFL_Sime   := False;
            uvChangeFL_T      := False;
            uvChangeFL_Z      := False;
            uvChangeFL_Sime_S := False;
            uvChangeFL_T_S    := False;
            uvChangeFL_Z_S    := False;

            f1SHojyoKbn1.Enabled := False;
            f1SHojyoKbn2.Enabled := False;
			f1SHojyoKbn3.Enabled := False;		//<195>
        end
        else begin
{↓<203>
            // <184>
            f1SHojyoKbn1.Enabled := True;
            f1SHojyoKbn2.Enabled := True;
↑<203>}
//↓<203>
            f1SHojyoKbn1.Enabled := (uvChangeFL_Kounyu    and uvSLicense);     //SPでの結果とライセンスチェックの結果の論理積
            f1SHojyoKbn2.Enabled := (uvChangeFL_Baikyaku  and uvSLicense);     //SPでの結果とライセンスチェックの結果の論理積
            f1SHojyoKbn3.Enabled := (uvChangeFL_Lease     and IsLeaseLicense); //SPでの結果とライセンスチェックの結果の論理積
//↑<203>
        end;

//<265> DEL       if IsSyosaiMode then  //<256> ADD
//<265-2>         if ((IsSyosaiMode = True) and (MTOKUI_DMQuery.RecordCount > 0)) then  //<265> ADD
        if (IsSyosaiMode = True) then  //<265> ADD <265-2>
        begin                 //<256> ADD
            // 得意先
            if uvData_Load.pvrSai = 0 then
                fnSeiKbn_EnableControl(0, False, False, False)
            else
                fnSeiKbn_EnableControl(0, uvChangeFL_Sime, uvChangeFL_T, uvChangeFL_Z);

            // 仕入先
            if uvData_Load_S.pvrSai = 0 then
                fnSeiKbn_EnableControl(1, False, False, False)
            else
                fnSeiKbn_EnableControl(1, uvChangeFL_Sime_S, uvChangeFL_T_S, uvChangeFL_Z_S);

    //<227>↓
            // 伝票入力済みの時は、「国内外区分」「通貨」は変更出来ない。
            // ※詳細で新規コードを入れたときは、fnCreateCardを通らない為ここでもEnabledを変更する。
            fnChgCmpEna(uvChangeFL_Sime, f0ECURRENCY);
            fnChgCmpEna(uvChangeFL_Sime, f0ECOUNTRY);
    //<227>↑

        end;  //<256> ADD

//↓<207>
        //MTOKUI読み込み時の住所関係の値を保存
        m_AddressRec.PostNo1 := FieldByName('PostNo1').AsInteger;
        m_AddressRec.PostNo2 := FieldByName('PostNo2').AsInteger;
        m_AddressRec.Ads1    := FieldByName('Ads1').AsString;
        m_AddressRec.Ads2    := FieldByName('Ads2').AsString;
        m_AddressRec.Tel1    := FieldByName('Tel1').AsString;
        m_AddressRec.Tel2    := FieldByName('Tel2').AsString;
        m_AddressRec.Fax1    := FieldByName('Fax1').AsString;
//↑<207>
//↓<230>
		m_TStartDate		:= FieldByName('TStartDate').AsDateTime;
		m_TEndDate			:= FieldByName('TEndDate').AsDateTime;
//↑<230>
//↓<2226>
        //MTOKUI読み込み時の資産採用関係の値を保存
        m_SisanSaiyoRec.SisanHojyoKbn1		:= FieldByName('SisanHojyoKbn1').AsInteger;
        m_SisanSaiyoRec.SisanHojyoKbn2		:= FieldByName('SisanHojyoKbn2').AsInteger;
        m_SisanSaiyoRec.SisanHojyoKbn3		:= FieldByName('SisanHojyoKbn3').AsInteger;
//↑<2226>
    end;

	Result := 0;
    m_bNotStored := False;
end;


//**************************************************************************
//	Proccess	:	MemData ← MTOKUI_DMQuery（実在取引先）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	bSw = TrueはGrid表示、FalseはCard表示
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.fnMemSet(iSumKbn: Integer; bSw: Boolean);
var
	stCode		:	String;
	iCut		:	Integer;
	iCode		:	Int64;
	sCmnt		:	String;
	dQuery	:	TMQuery;
procedure lfnSetTSKBN;
begin

    JHojyoMA_DMemDataTKBN.asString := '';
    JHojyoMA_DMemDataSKBN.asString := '';

    JHojyoMA_DMemDataSHojyoKbn1.AsString := '';     //<158>
    JHojyoMA_DMemDataSHojyoKbn2.AsString := '';     //<158>
	JHojyoMA_DMemDataSHojyoKbn3.AsString := '';		//<195>

{
	Qry := TMQuery.Create( Self );

    try
    	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
//<158>     SQL.Add   ('SELECT HojyoKbn1,HojyoKbn2 FROM MTOKUI  ');
            SQL.Add   ('SELECT HojyoKbn1,HojyoKbn2,SisanHojyoKbn1,SisanHojyoKbn2,SisanHojyoKbn3 FROM MTOKUI  ');	//<195>SisanHojyoKbn3を追加
            SQL.Add   ('WHERE  NCode = :pCode');
			ParamByName ('pCode').AsFloat  := JHojyoMA_DMemDataNCode.AsFloat;
            Open;
            if not Eof then
            begin
                if FieldByname('HojyoKbn1').asInteger = 1 then
                    JHojyoMA_DMemDataTKBN.asString := '○';
                if FieldByname('HojyoKbn2').asInteger = 1 then
                    JHojyoMA_DMemDataSKBN.asString := '○';
                //<158>ST---
                if FieldByname('SisanHojyoKbn1').asInteger = 1 then
                    JHojyoMA_DMemDataSHojyoKbn1.AsString := '○';
                if FieldByname('SisanHojyoKbn2').asInteger = 1 then
                    JHojyoMA_DMemDataSHojyoKbn2.AsString := '○';
                //<158>ED---

				//<195>ST---
				if FieldByname('SisanHojyoKbn3').Asinteger = 1 then
					JHojyoMA_DMemDataSHojyoKbn3.AsString := '○';
				//<195>ED---

            end;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;
}

	with MTOKUI_DMQuery do
	begin
		if FieldByname('HojyoKbn1').asInteger = 1 then
			JHojyoMA_DMemDataTKBN.asString := '○';
		if FieldByname('HojyoKbn2').asInteger = 1 then
			JHojyoMA_DMemDataSKBN.asString := '○';
		//<158>ST---
		if FieldByname('SisanHojyoKbn1').asInteger = 1 then
			JHojyoMA_DMemDataSHojyoKbn1.AsString := '○';
		if FieldByname('SisanHojyoKbn2').asInteger = 1 then
			JHojyoMA_DMemDataSHojyoKbn2.AsString := '○';
		//<158>ED---

		//<195>ST---
		if FieldByname('SisanHojyoKbn3').Asinteger = 1 then
			JHojyoMA_DMemDataSHojyoKbn3.AsString := '○';
		//<195>ED---

	end;


end;

begin
    m_EdtSw := False;                       // <130>読み直したので変更ﾌﾗｸﾞをOFFにする
//<194>
//<198>
	if not m_WFSw then
	begin
//	    B_ImportWF.Enabled := False;            // <WF>申請書参照ﾎﾞﾀﾝ
	    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
	end;

	MemPost_Sw	:= 1;
	if bSw = False then
	begin
		dQuery := TMQuery.Create( Self );

		try
//<D10>		MDataModule.SetDBInfoToQuery(dbCorp_Select, dQuery);
			gfnJNTSELSetDbName(dQuery, dbCorp_Select);		//<D10>

			with dQuery do
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 付箋コメントGET
				SQL.Add('select FusenCmnt from MFusenInfo');
				SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
				SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL				SetFld('NCode').AsFloat   := MTOKUI_DMQuery.GetFld('NCode').AsFloat;// 検索対象の内部ｺｰﾄﾞ 設定
				SetFld('NCode').AsString   := MTOKUI_DMQuery.GetFld('NCode').AsString;// 検索対象の内部ｺｰﾄﾞ 設定  <256> ADD
				Open;						// ｸｴﾘの開始

				if Eof = False then
					sCmnt := GetFld('FusenCmnt').AsString
				else
					sCmnt := '';
			end;
		finally
			dQuery.Close;
			dQuery.Free;
		end;
	end
	else
		sCmnt := MTOKUI_DMQuery.GetFld('FusenCmnt').AsString;

    if bSw = False then
        JHojyoMA_DMemData.Edit
    else
        JHojyoMA_DMemData.Append;

    if bSw = False then
        // 付箋情報SET
        FusenDsp(iSumKbn, MTOKUI_DMQuery.GetFld('GCode').AsString, 0)
    else
    begin
        JHojyoMA_DMemDataFusen.Clear;
        if MTOKUI_DMQuery.GetFld('FusenKbn').AsInteger = 0 then
            JHojyoMA_DMemDataFusenIndex.AsInteger := NOColor
        else
            JHojyoMA_DMemDataFusenIndex.AsInteger := MTOKUI_DMQuery.GetFld('FusenKbn').AsInteger;

        // 一覧<120>
        if ( Jituzai_PPanel_Grid.Visible ) then
        begin
            case MTOKUI_DMQuery.GetFld('FusenKbn').AsInteger of
                RED     :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Red   .Picture.Bitmap);
                GREEN   :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Green .Picture.Bitmap);
                BLUE    :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Blue  .Picture.Bitmap);
                ORANGE  :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Orange.Picture.Bitmap);
            end;
        end
        // 詳細
        else
        begin
            case MTOKUI_DMQuery.GetFld('FusenKbn').AsInteger of
                RED     :	JHojyoMA_DMemDataFusen.Assign(GFRed     .Bitmap);
                GREEN   :	JHojyoMA_DMemDataFusen.Assign(GFGreen   .Bitmap);
                BLUE    :	JHojyoMA_DMemDataFusen.Assign(GFBlue    .Bitmap);
                ORANGE  :	JHojyoMA_DMemDataFusen.Assign(GFOrange  .Bitmap);
            end;
        end;
    end;

    with MTOKUI_DMQuery do
    begin
        JHojyoMA_DMemDataSumKbn.AsInteger			:= GetFld('SumKbn').AsInteger;
        JHojyoMA_DMemDataRecordKbn.AsInteger		:= GetFld('RDelKbn').AsInteger;

        stCode := MTOKUI_DMQuery.GetFld('GCode').AsString;
        if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
        begin
            if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
            begin
                if stCode <> '' then
                begin
                    iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                    System.Delete(stCode, 1, iCut);
                end;
            end
            else
            begin
                if stCode <> '' then
                begin
                    iCode := StrToInt64(Trim(stCode));
                    stCode := IntToStr(iCode);
                end;
            end;
        end;
        JHojyoMA_DMemDataGCode.AsString				:= stCode;
        JHojyoMA_DMemDataRenChar.AsString			:= GetFld('Renso').AsString;
        JHojyoMA_DMemDataLongName.AsString			:= GetFld('NM').AsString;
        JHojyoMA_DMemDataSimpleName.AsString		:= GetFld('NMK').AsString;
        JHojyoMA_DMemDataNCode.AsFloat  			:= GetFld('NCode').AsFloat;
        JHojyoMA_DMemDataSyokuchiKbn.AsInteger		:= GetFld('SyokuchiKbn').AsInteger;

// <MYN> ins -s
        JHojyoMA_DMemDataHoujinKbn.AsString			:= GetFld('HoujinKbn').AsString;
        JHojyoMA_DMemDataHoujinNo.AsString			:= GetFld('HoujinNo').AsString;
        JHojyoMA_DMemDataKojinKey.AsString			:= GetFld('KojinKey').AsString;
// <MYN> ins -e

        //得意先・仕入先区分をセットする
        lfnSetTSKBN;

{
        SetLength(m_aCmnt_Jitu,Length(m_aCmnt_Jitu)+1);
        m_aCmnt_Jitu[Length(m_aCmnt_Jitu)-1].Code 	:= stCode;
        m_aCmnt_Jitu[Length(m_aCmnt_Jitu)-1].Cmnt 	:= sCmnt;
}
//<199>
		memFsn.Append;
		memFsnCode.AsString	:= stCode;
		memFsnCmnt.AsString := sCmnt;
		memFsn.Post;

    end;

    JHojyoMA_DMemData.Post;

	MemPost_Sw	:= 0;
end;


//**************************************************************************
//	Proccess	:	MemData ← Entry Data （実在取引先）
//	Notice		:   カード型入力データをメモデータにセットする。
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.fnJEntrySet();

var
	MemAppend_Flg	: Boolean;
begin
	MemPost_Sw		:= 1;
	MemAppend_Flg	:= True;

    JHojyoMA_DMemData.DisableControls; //<249>

	if JHojyoMA_DMemData.RecordCount <> 0 then
		JHojyoMA_DMemData.First;

	while JHojyoMA_DMemData.Eof = False do
	begin
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if JHojyoMA_DMemDataGCode.AsString = f0TGCode.Text then
			begin
				MemAppend_Flg	:= False;
				Break;
			end
			else
				JHojyoMA_DMemData.Next;
		end
		else
		begin
			if JHojyoMA_DMemDataGCode.AsString <> '' then
			begin
				if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) = Format ('%.16d', [Trunc (f0NGCode.Value)]) then
//				if JHojyoMA_DMemDataGCode.AsString = Format ('%.16d', [Trunc (f0NGCode.Value)]) then
				begin
					MemAppend_Flg	:= False;
					Break;
				end
				else
					JHojyoMA_DMemData.Next;
			end
			else
				JHojyoMA_DMemData.Next;
		end;
	end;

    JHojyoMA_DMemData.EnableControls; //<249>

	if MemAppend_Flg = True then
		JHojyoMA_DMemData.Append
	else
		JHojyoMA_DMemData.Edit;

	JHojyoMA_DMemDataSumKbn.AsInteger			:= Root_PMTab.Items.Selected;
	JHojyoMA_DMemDataRecordKbn.AsInteger		:= 0;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		JHojyoMA_DMemDataGCode.AsString		   	:= f0TGCode.Text
	else
		JHojyoMA_DMemDataGCode.AsString		   	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);

	JHojyoMA_DMemDataRenChar.AsString			:= f0RenChar.Text;
	JHojyoMA_DMemDataLongName.AsString			:= f0LongName.Text;
	JHojyoMA_DMemDataSimpleName.AsString		:= f0SimpleName.Text;

	JHojyoMA_DMemData.Post;
	MemPost_Sw		:= 0;

end;



//**************************************************************************
//	Proccess	:	取引先データ書き込み（１件） <113>
//	Notice		:
//	Name		:
//	Date		:
//	Parameter	:   strGCode    : 外部ｺｰﾄﾞ
//                  iSumKbn     : 加算区分
//                  bSw         : True:詳細から、False:一覧から
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnDataWrite(strGCode: String; iSumKbn: Integer; bSw: Boolean): Boolean;
var
	HojyoMA_New	    : Boolean;			                    // True:追加 False:更新
//<Rel>使っていないのでコメントに。
//	QueryMaster     : TMQuery;
    i               : Integer;
//<KSN> DEL    lvChildFL	    : Boolean;	    	                    // 子存在ﾌﾗｸﾞ<ﾛｰｶﾙ用>(T:有、F:無)<103>
    Bol,BolS,BolDen : Boolean;
    lvTUpd          : Boolean;                              // _SEL得意先存在ﾌﾗｸﾞ(T:有、F:無)
    lvSUpd          : Boolean;                              // _SEL仕入先存在ﾌﾗｸﾞ(T:有、F:無)
    lvGRUZSEIKBN_SI, lvZSEIKBN_SI: Integer;
    //↓<245>
    lvTnNCd         : Extended;                             // _SELの担当者内部コード
    lvBmNCd         : Extended;                             // _SELの部門内部コード
    lvCnt           : Integer;                              // 件数(汎用)
    //↑<245>
	lvReturnValue	: Integer; 								//<2257>取引先コピーｽﾄｱﾄﾞﾘﾀｰﾝ用
	lvRetMsg		: String; 								//<2257>取引先コピーｽﾄｱﾄﾞﾘﾀｰﾝ用

 	sSQL_MYN		: String;	// <MYN>
{↓<2257>ﾊﾟﾗﾒｰﾀ2のMTOKUI_MAS・MTOKUI_PAY・MTOKUI_CRDを別々にする必要があるためlfnParamSetを全てコメントアウトします。
  //== パラメータをセット =====================
  //          0:MTOKU･････UPDATE
  //          1:MTOKU･････INSERT
  //          2:MTOKUI_MAS、MTOKUI_PAY、MTOKUI_CRD･････INSERT
  //          3:MTOKUI_SEL（得意先）･････INSERT,UPDATE
  //          4:MTOKUI_SEL（仕入先）･････INSERT,UPDATE
  //          5:MTOKUI_DEP（資産　）･････INSERT//<158>
  Procedure lfnParamSet(pKBN:Integer);
  var
      i : Integer;
  begin
      with MTOKUI_DMQuery do
      begin
          ParamByName('UPDTANTO')   .AsFloat        := m_TantoNCode;  //<128>

          // 基本情報以外
  //<158>        if (pKBN = 2) or (pKBN = 3) or (pKBN = 4)  then
          if (pKBN = 2) or (pKBN = 3) or (pKBN = 4) or (pKBN = 5) then
              ParamByName('BASENCODE')  .AsFloat    := uvNCODE;

          // 詳細からの場合
          if bSw = True then
          begin
              ParamByName('ADS1')       .AsString   := f0Address1.Text;
              ParamByName('ADS2')       .AsString   := f0Address2.Text;
              ParamByName('PostNo1')    .AsInteger  := f0ZipCode1.AsInteger;
              ParamByName('PostNo2')    .AsInteger  := f0ZipCode2.AsInteger;
              ParamByName('TEL1')       .AsString   := f0TelNo.Text;
              ParamByName('TEL2')   .AsString   := f0TelNo2.Text;
              ParamByName('FAX1')   .AsString   := f0FAX.Text;
↑<2257>}
  {//<206>
              if (pKBN <> 5) then
              begin
                  ParamByName('TEL2')   .AsString   := f0TelNo2.Text;
                  ParamByName('FAX1')   .AsString   := f0FAX.Text;
              end;
  }
{↓<2257>
              // MOKUI_Selﾃｰﾌﾞﾙに得意先として落とす場合
              if (pKBN = 3) then
              begin
                  ParamByName('RZuiSSite').AsInteger    := f1NSSite.asInteger;
                  ParamByName('RTSEINO')  .AsString     := f1NSeino.Text;
                  ParamByName('RHolidayKbn') .AsInteger := f1NHolidayKbn.itemIndex;
                  if f1NHolidayKbn.itemIndex = -1 then
                      ParamByName('RHolidayKbn') .AsInteger := 0;

                  ParamByName('SeiNCode') .AsFloat      := uvNCODE;

                  // 締日1がｾｯﾄされていれば "0"
                  // それ以外で、特殊請求NOが入力されていれば "1"
                  // 以外は随時請求"2" をｾｯﾄ  <116>
                  // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
                  if iSumKbn = 1 then
                      ParamByName('TRSEIKBN').AsInteger := 0
                  else
                  begin
                      if f1NClosingDay1.AsInteger <> 0 then
                          ParamByName('TRSEIKBN').AsInteger := 0
                      else if f1NSeino.AsInteger <> 0 then
                          ParamByName('TRSEIKBN').AsInteger := 1
                      else
                          ParamByName('TRSEIKBN').AsInteger := 2;
                  end;

                  // 得意先分類情報
                  for i := 1 to  10 do
                  begin
                      ParamByName('BunruiNCode' + IntToStr(i)).AsFloat
                          := fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Text,
                                        m_arAdoptInfo_Tbr [i].nMasterDivision,m_arAdoptInfo_Tbr [i].nCodeAttribute);
                  end;
              end;

              // MOKUI_Selﾃｰﾌﾞﾙに仕入先として落とす場合
              if (pKBN = 4) then
              begin
                  ParamByName('RZuiSSite').AsInteger     := f1SSSite.asInteger;
                  ParamByName('RTSEINO')  .AsString      := f1SSeino.Text;
                  ParamByName('RHolidayKbn') .AsInteger  := f1SHolidayKbn.itemIndex;
                  ParamByName('SeiNCode') .AsFloat       := uvNCODE;
                  if f1SHolidayKbn.itemIndex = -1 then
                      ParamByName('RHolidayKbn') .AsInteger  := 0;

                  // 締日1がｾｯﾄされていれば "0"
                  // それ以外で、特殊請求NOが入力されていれば "1"
                  // 以外は随時請求"2" をｾｯﾄ  <116>
                  // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
                  if iSumKbn = 1 then
                      ParamByName('TRSEIKBN').AsInteger := 0
                  else
                  begin
                      if f1SClosingDay1.AsInteger <> 0 then
                          ParamByName('TRSEIKBN').AsInteger := 0
                      else if f1SSeino.AsInteger <> 0 then
                          ParamByName('TRSEIKBN').AsInteger := 1
                      else
                          ParamByName('TRSEIKBN').AsInteger := 2;
                  end;

                  // 仕入先分類情報
                  for i := 1 to  10 do
                  begin
                      ParamByName('BunruiNCode' + IntToStr(i)).AsFloat
                          := fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Text,
                              m_arAdoptInfo_Sbr [i].nMasterDivision,m_arAdoptInfo_Sbr [i].nCodeAttribute);
                  end;
              end;
          end;

          // 基本情報
          if (pKBN = 0) or (pKBN = 1)  then
          begin
              ParamByName('CODE')       .AsString   := strGCode;
↑<2257>}
{↓<234>
              ParamByName('Renso')      .AsString   := JHojyoMA_DMemDataRenChar.asString;
              ParamByName('NM')         .AsString   := JHojyoMA_DMemDataLongName.asString;
              ParamByName('NMK')        .AsString   := JHojyoMA_DMemDataSimpleName.asString;
↑<234>}
{<2257>
//↓<234>
              ParamByName('Renso')      .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataRenChar.asString),    #13#10, '',[rfReplaceAll,rfIgnoreCase]);
              ParamByName('NM')         .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataLongName.asString),   #13#10, '',[rfReplaceAll,rfIgnoreCase]);
              ParamByName('NMK')        .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataSimpleName.asString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
//↑<234>
              if pKBN = 1 then
              begin
                  ParamByName('SUMKBN').AsInteger    := iSumKbn;
                  ParamByName('HojyoKbn1').AsInteger := 0;
                  ParamByName('HojyoKbn2').AsInteger := 0;
                  ParamByName('SisanHojyoKbn1').AsInteger := 0;    //<158>
                  ParamByName('SisanHojyoKbn2').AsInteger := 0;    //<158>
                  ParamByName('SisanHojyoKbn3').Asinteger	:= 0;	 //<195>
              end;

              // 詳細からの場合
              if bSw = True then
              begin
  // <WF>↓
                  if pKBN = 1 then            // insert時のみ
                  begin                       // WF入力ﾁｪｯｸOK & 入力ありの場合(与信限度額)
                      if m_recOther.CanInsert and m_recOther.YsGKinFlg then
                          ParamByName('YsGKin').AsFloat := m_recOther.YsGKin;
                  end
  // <WF>↑
  //↓<244>
				  else if pKBN = 0 then            // update時も考慮します
                  begin
                      if m_recOther.CanUpdate and m_recOther.YsGKinFlg then
                          ParamByName('YsGKin').AsFloat := m_recOther.YsGKin;
                  end;
  //↑<244>
                  ParamByName('TStartDate') .AsDateTime := f0StartDate.asDateTime;
                  ParamByName('TEndDate')   .AsDateTime := f0EndDate.asDateTime;
                  if f0StartDate.value = 0 then
                      ParamByName('TStartDate') .AsDateTime := m_cJNTArea.getDefDate(1);
                  if f0EndDate.value = 0 then
                      ParamByName('TEndDate')   .AsDateTime := m_cJNTArea.getDefDate(2);

                  ParamByName('KEISYOKBN')  .AsString   := f0KEISYOKBN .Text;
                  ParamByName('FKANA')      .AsString   := f0FKANA.Text;
                  ParamByName('DHYONM1')    .AsString   := f0DHYONM1.Text;
                  ParamByName('DHYONM2')    .AsString   := f0DHYONM2.Text;
                  ParamByName('HPAddress')  .AsString   := f0HPADD.Text;
                  ParamByName('GyoNCode')   .AsFloat    := fnGetNCODE(f0GYCode.Text,ucGyosyu,uvGYCodeAttr);
  //<226> ↓
                  ParamByName('CountryKBN').AsInteger    := f0ECOUNTRY.AsInteger;
                  ParamByName('CurrencyNCODE').AsFloat   := fnGetNCODE(f0ECURRENCY.text, MASTER_CurrKBN, 2);
  //<226> ↑
                  ParamByName('ShihonKin')  .AsFloat    := f0SIHONKIN.value;
                  ParamByName('Nensyo')     .AsFloat    := f0NENSYO.value;
                  ParamByName('SyainSu')    .AsFloat    := f0SYAINSU.value;
                  ParamByName('HojyoKbn1').AsInteger   := 0;
                  ParamByName('HojyoKbn2').AsInteger   := 0;
                  ParamByName('SisanHojyoKbn1').AsInteger   := 0;
                  ParamByName('SisanHojyoKbn2').AsInteger   := 0;
                  ParamByName('SisanHojyoKbn3').AsInteger	  :=0;
                  if f1TSKBN.Checked then ParamByName('HojyoKbn1').AsInteger := 1;
                  if f1SSKBN.Checked then ParamByName('HojyoKbn2').AsInteger := 1;
  // <158>---ST
                  if f1SHojyoKbn1.Checked then ParamByName('SisanHojyoKbn1').AsInteger := 1;
                  if f1SHojyoKbn2.Checked then ParamByName('SisanHojyoKbn2').AsInteger := 1;
  // <158>---ED
  // <195>---ST
                  if f1SHojyoKbn3.Checked then ParamByName('SisanHojyoKbn3').AsInteger :=1;
  // <195>---ED

                  // 入金予定
                  ParamByName('RCloseDay1').AsInteger   := f1NClosingDay1.asInteger;
                  ParamByName('RCloseDay2').AsInteger   := f1NClosingDay2.asInteger;
                  ParamByName('RCloseDay3').AsInteger   := f1NClosingDay3.asInteger;
                  ParamByName('RcvMonth1').AsInteger    := f1NMonth1.ItemIndex;
                  ParamByName('RcvMonth2').AsInteger    := f1NMonth2.ItemIndex;
                  ParamByName('RcvMonth3').AsInteger    := f1NMonth3.ItemIndex;
                  if f1NMonth1.ItemIndex = -1 then ParamByName('RcvMonth1').AsInteger := 0;
                  if f1NMonth2.ItemIndex = -1 then ParamByName('RcvMonth2').AsInteger := 0;
                  if f1NMonth3.ItemIndex = -1 then ParamByName('RcvMonth3').AsInteger := 0;
                  ParamByName('RcvDay1').AsInteger      := f1NDay1.asInteger;
                  ParamByName('RcvDay2').AsInteger      := f1NDay2.asInteger;
                  ParamByName('RcvDay3').AsInteger      := f1NDay3.asInteger;
                  ParamByName('RHolidayKbn1').AsInteger := f1NHoliday1.ItemIndex;
                  ParamByName('RHolidayKbn2').AsInteger := f1NHoliday2.ItemIndex;
                  ParamByName('RHolidayKbn3').AsInteger := f1NHoliday3.ItemIndex;
                  if f1NHoliday1.ItemIndex = -1 then ParamByName('RHolidayKbn1').AsInteger := 0;
                  if f1NHoliday2.ItemIndex = -1 then ParamByName('RHolidayKbn2').AsInteger := 0;
                  if f1NHoliday3.ItemIndex = -1 then ParamByName('RHolidayKbn3').AsInteger := 0;
                  ParamByName('REndKaisu').AsInteger    := uvENDKAISU_T;

                  // 支払予定
                  ParamByName('PCloseDay1').AsInteger   := f1SClosingDay1.asInteger;
                  ParamByName('PCloseDay2').AsInteger   := f1SClosingDay2.asInteger;
                  ParamByName('PCloseDay3').AsInteger   := f1SClosingDay3.asInteger;
                  ParamByName('PayMonth1').AsInteger    := f1SMonth1.ItemIndex;
                  ParamByName('PayMonth2').AsInteger    := f1SMonth2.ItemIndex;
                  ParamByName('PayMonth3').AsInteger    := f1SMonth3.ItemIndex;
                  if f1SMonth1.ItemIndex = -1 then ParamByName('PayMonth1').AsInteger := 0;
                  if f1SMonth2.ItemIndex = -1 then ParamByName('PayMonth2').AsInteger := 0;
                  if f1SMonth3.ItemIndex = -1 then ParamByName('PayMonth3').AsInteger := 0;
                  ParamByName('PayDay1').AsInteger      := f1SDay1.asInteger;
                  ParamByName('PayDay2').AsInteger      := f1SDay2.asInteger;
                  ParamByName('PayDay3').AsInteger      := f1SDay3.asInteger;
                  ParamByName('PHolidayKbn1').AsInteger := f1SHoliday1.ItemIndex;
                  ParamByName('PHolidayKbn2').AsInteger := f1SHoliday2.ItemIndex;
                  ParamByName('PHolidayKbn3').AsInteger := f1SHoliday3.ItemIndex;
                  if f1SHoliday1.ItemIndex = -1 then ParamByName('PHolidayKbn1').AsInteger := 0;
                  if f1SHoliday2.ItemIndex = -1 then ParamByName('PHolidayKbn2').AsInteger := 0;
                  if f1SHoliday3.ItemIndex = -1 then ParamByName('PHolidayKbn3').AsInteger := 0;
                  ParamByName('PEndKaisu').AsInteger    := uvENDKAISU_S;

                  // ｾｸﾞﾒﾝﾄ情報
                  for i := 1 to  10 do
                  begin
                      ParamByName('SegNCode' + IntToStr(i)).AsFloat
                          := fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text,
                              m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute);
                  end;

                  // ﾌﾘｰ情報ﾊﾟﾗﾒｰﾀｾｯﾄ <102>
                  if UpdFreeFlg then
                  begin
                      ParamByName('VFree1' ).AsString		 := freeItem.VFree1;
                      ParamByName('VFree2' ).AsString      := freeItem.VFree2;
                      ParamByName('VFree3' ).AsString      := freeItem.VFree3;
                      ParamByName('VFree4' ).AsString      := freeItem.VFree4;
                      ParamByName('VFree5' ).AsString      := freeItem.VFree5;
                      ParamByName('VFree6' ).AsString      := freeItem.VFree6;
                      ParamByName('VFree7' ).AsString      := freeItem.VFree7;
                      ParamByName('VFree8' ).AsString      := freeItem.VFree8;
                      ParamByName('VFree9' ).AsString      := freeItem.VFree9;
                      ParamByName('VFree10').AsString      := freeItem.VFree10;
                      ParamByName('NFree1' ).AsCurrency    := freeItem.NFree1;
                      ParamByName('NFree2' ).AsCurrency    := freeItem.NFree2;
                      ParamByName('NFree3' ).AsCurrency    := freeItem.NFree3;
                      ParamByName('NFree4' ).AsCurrency    := freeItem.NFree4;
                      ParamByName('NFree5' ).AsCurrency    := freeItem.NFree5;
                      ParamByName('NFree6' ).AsCurrency    := freeItem.NFree6;
                      ParamByName('NFree7' ).AsCurrency    := freeItem.NFree7;
                      ParamByName('NFree8' ).AsCurrency	 := freeItem.NFree8;
                      ParamByName('NFree9' ).AsCurrency	 := freeItem.NFree9;
                      ParamByName('NFree10').AsCurrency	 := freeItem.NFree10;
↑<2257>}
  {↓<213>
                      if freeItem.DFree1 > 0 then
                          ParamByName('DFree1').AsDateTime := freeItem.DFree1;
                      if freeItem.DFree2 > 0 then
                          ParamByName('DFree2').AsDateTime := freeItem.DFree2;
                      if freeItem.DFree3 > 0 then
                          ParamByName('DFree3').AsDateTime := freeItem.DFree3;
  ↑<213>}
  //↓<213>
{↓<2257>
                      if freeItem.DFree1 > 0 then
                          ParamByName('DFree1').AsDateTime := freeItem.DFree1
                      else
                      begin
                          ParamByName('DFree1').AsDateTime := now;
                          ParamByName('DFree1').Clear;
                      end;
                      if freeItem.DFree2 > 0 then
                          ParamByName('DFree2').AsDateTime := freeItem.DFree2
                      else
                      begin
                          ParamByName('DFree2').AsDateTime := now;
                          ParamByName('DFree2').Clear;
                      end;
                      if freeItem.DFree3 > 0 then
                          ParamByName('DFree3').AsDateTime := freeItem.DFree3
                      else
                      begin
                          ParamByName('DFree3').AsDateTime := now;
                          ParamByName('DFree3').Clear;
                      end;
  //↑<213>
                  end;
              end;
          end;
      end;

  end;
↑<2257>}
	//↓<2257>
	//== パラメータをセット =====================
	//          0:MTOKU･････UPDATE
	//          1:MTOKU･････INSERT
	//          2:MTOKUI_MAS･････INSERT
	//			3:MTOKUI_PAY･････INSERT
	//			4:MTOKUI_CRD･････INSERT
	//          5:MTOKUI_SEL（得意先）･････INSERT,UPDATE
	//          6:MTOKUI_SEL（仕入先）･････INSERT,UPDATE
	//          7:MTOKUI_DEP（資産　）･････INSERT
	Procedure lfnParamSet(pKBN:Integer);
	var
		i : Integer;

		Procedure lfnChangeAdressCheck(Tablename : MTOKUI_COPY);
		begin
			//郵便番号（基番）
            if m_MTOKUI_ORG.PostNo1 = f0ZipCode1.AsInteger then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('PostNo1').AsInteger	:=	Tablename.PostNo1;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.PostNo1 = Tablename.PostNo1 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('PostNo1').AsInteger	:=	f0ZipCode1.AsInteger;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('PostNo1').AsInteger	:=	Tablename.PostNo1;
				end;
            end;

			//郵便番号（枝番）
            if m_MTOKUI_ORG.PostNo2 = f0ZipCode2.AsInteger then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('PostNo2').AsInteger	:=	Tablename.PostNo2;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.PostNo2 = Tablename.PostNo2 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('PostNo2').AsInteger	:=	f0ZipCode2.AsInteger;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('PostNo2').AsInteger	:=	Tablename.PostNo2;
				end;
            end;

			//住所上段
            if m_MTOKUI_ORG.Ads1 = f0Address1.Text then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('ADS1').AsString	:=	Tablename.Ads1;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.Ads1 = Tablename.Ads1 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('Ads1').AsString	:=	f0Address1.Text;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('Ads1').AsString	:=	Tablename.Ads1;
				end;
            end;

			//住所下段
            if m_MTOKUI_ORG.Ads2 = f0Address2.Text then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('ADS2').AsString	:=	Tablename.Ads2;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.Ads1 = Tablename.Ads1 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('ADS2').AsString	:=	f0Address2.Text;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('ADS2').AsString	:=	Tablename.Ads2;
				end;
            end;

			//電話番号（１）
            if m_MTOKUI_ORG.Tel1 = f0TelNo.Text then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('Tel1').AsString	:=	Tablename.Tel1;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.Tel1 = Tablename.Tel1 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('Tel1').AsString	:=	f0TelNo.Text;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('Tel1').AsString	:=	Tablename.Tel1;
				end;
            end;

			//電話番号（２）
            if m_MTOKUI_ORG.Tel2 = f0TelNo2.Text then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('Tel2').AsString	:=	Tablename.Tel2;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.Tel2 = Tablename.Tel2 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('Tel2').AsString	:=	f0TelNo2.Text;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('Tel2').AsString	:=	Tablename.Tel2;
				end;
            end;

			//FAX
            if m_MTOKUI_ORG.FAX1 = f0FAX.Text then
            //コピー元から変更なし
            begin
                MTOKUI_DMQuery.ParamByName('FAX1').AsString	:=	Tablename.FAX1;
            end
            else
            //コピー元から変更あり
            begin
				if m_MTOKUI_ORG.FAX1 = Tablename.FAX1 then
				//基本情報と各モジュールの取引先情報が一致している
				begin
                	MTOKUI_DMQuery.ParamByName('FAX1').AsString	:=	f0FAX.Text;
				end
				else
				//基本情報と各モジュールの取引先情報が一致していない
				begin
                	MTOKUI_DMQuery.ParamByName('FAX1').AsString	:=	Tablename.FAX1;
				end;
            end;
		end;
	begin
		with MTOKUI_DMQuery do
		begin
			ParamByName('UPDTANTO')   .AsFloat        := m_TantoNCode;

			// 基本情報以外
			if (pKBN = 2) or (pKBN = 3) or (pKBN = 4) or (pKBN = 5) or (pKBN = 6) or (pKBN = 7) then
				ParamByName('BASENCODE')  .AsFloat    := uvNCODE;

			// 詳細からの場合
			if bSw = True then
			begin
				if uvCopyMtokui	= True	then
				begin
					if (pKBN = 2)	then
					begin
						lfnChangeAdressCheck(m_arMTOKUI_COPY[tbMAS]);
					end
					else if (pKBN = 3)	then
					begin
						lfnChangeAdressCheck(m_arMTOKUI_COPY[tbPAY]);
					end
					else if (pKBN = 4)	then
					begin
						lfnChangeAdressCheck(m_arMTOKUI_COPY[tbCRD]);
					end
					else if (pKBN = 5) and (m_MTOKUI_ORG.HojyoKbn1 = 1)	then
					begin
						lfnChangeAdressCheck(m_arMTOKUI_COPY[tbSEL1]);
					end
					else if (pKBN = 6) and (m_MTOKUI_ORG.HojyoKbn2 = 1)	then
					begin
						lfnChangeAdressCheck(m_arMTOKUI_COPY[tbSEL2]);
					end
					else if (pKBN = 7) and
							((m_MTOKUI_ORG.SisanHojyoKbn1 = 1) or		//資産のどれか１つの採用がある時
							(m_MTOKUI_ORG.SisanHojyoKbn2 = 1)  or
							(m_MTOKUI_ORG.SisanHojyoKbn3 = 1))	then
					begin
						lfnChangeAdressCheck(m_arMTOKUI_COPY[tbDEP]);
					end
					else
					begin
                        ParamByName('ADS1').AsString		:= f0Address1.Text;
                        ParamByName('ADS2').AsString		:= f0Address2.Text;
                        ParamByName('PostNo1').AsInteger	:= f0ZipCode1.AsInteger;
                        ParamByName('PostNo2').AsInteger	:= f0ZipCode2.AsInteger;
                        ParamByName('TEL1').AsString		:= f0TelNo.Text;
                        ParamByName('TEL2').AsString		:= f0TelNo2.Text;
                        ParamByName('FAX1').AsString		:= f0FAX.Text;
					end;
				end
				else
				begin
                    ParamByName('ADS1').AsString		:= f0Address1.Text;
                    ParamByName('ADS2').AsString		:= f0Address2.Text;
                    ParamByName('PostNo1').AsInteger	:= f0ZipCode1.AsInteger;
                    ParamByName('PostNo2').AsInteger	:= f0ZipCode2.AsInteger;
                    ParamByName('TEL1').AsString		:= f0TelNo.Text;
                    ParamByName('TEL2').AsString		:= f0TelNo2.Text;
                    ParamByName('FAX1').AsString		:= f0FAX.Text;
				end;

				// MOKUI_Selﾃｰﾌﾞﾙに得意先として落とす場合
				if (pKBN = 5) then

				begin
					ParamByName('RZuiSSite').AsInteger    := f1NSSite.asInteger;
					ParamByName('RTSEINO')  .AsString     := f1NSeino.Text;
					ParamByName('RHolidayKbn') .AsInteger := f1NHolidayKbn.itemIndex;
					if f1NHolidayKbn.itemIndex = -1 then
						ParamByName('RHolidayKbn') .AsInteger := 0;

					ParamByName('SeiNCode') .AsFloat      := uvNCODE;

					// 締日1がｾｯﾄされていれば "0"
					// それ以外で、特殊請求NOが入力されていれば "1"
					// 以外は随時請求"2" をｾｯﾄ
					// 合計(iSumKbn = 1)の場合は通常得意先とする
					if iSumKbn = 1 then
						ParamByName('TRSEIKBN').AsInteger := 0
					else
					begin
						if f1NClosingDay1.AsInteger <> 0 then
							ParamByName('TRSEIKBN').AsInteger := 0
						else if f1NSeino.AsInteger <> 0 then
							ParamByName('TRSEIKBN').AsInteger := 1
						else
							ParamByName('TRSEIKBN').AsInteger := 2;
					end;

					// 得意先分類情報
					for i := 1 to  10 do
					begin
						ParamByName('BunruiNCode' + IntToStr(i)).AsFloat
							:= fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Text,
									m_arAdoptInfo_Tbr [i].nMasterDivision,m_arAdoptInfo_Tbr [i].nCodeAttribute);
					end;
				end;

				// MOKUI_Selﾃｰﾌﾞﾙに仕入先として落とす場合
				if (pKBN = 6) then
				begin
					ParamByName('RZuiSSite').AsInteger     := f1SSSite.asInteger;
					ParamByName('RTSEINO')  .AsString      := f1SSeino.Text;
					ParamByName('RHolidayKbn') .AsInteger  := f1SHolidayKbn.itemIndex;
					ParamByName('SeiNCode') .AsFloat       := uvNCODE;
					if f1SHolidayKbn.itemIndex = -1 then
						ParamByName('RHolidayKbn') .AsInteger  := 0;

					// 締日1がｾｯﾄされていれば "0"
					// それ以外で、特殊請求NOが入力されていれば "1"
					// 以外は随時請求"2" をｾｯﾄ  <116>
					// 合計(iSumKbn = 1)の場合は通常得意先とする <122>
					if iSumKbn = 1 then
						ParamByName('TRSEIKBN').AsInteger := 0
					else
					begin
						if f1SClosingDay1.AsInteger <> 0 then
							ParamByName('TRSEIKBN').AsInteger := 0
						else if f1SSeino.AsInteger <> 0 then
							ParamByName('TRSEIKBN').AsInteger := 1
						else
							ParamByName('TRSEIKBN').AsInteger := 2;
					end;

					// 仕入先分類情報
					for i := 1 to  10 do
					begin
						ParamByName('BunruiNCode' + IntToStr(i)).AsFloat
							:= fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Text,
								m_arAdoptInfo_Sbr [i].nMasterDivision,m_arAdoptInfo_Sbr [i].nCodeAttribute);
					end;
			  	end;
			end;

			// 基本情報
			if (pKBN = 0) or (pKBN = 1)  then
			begin
				ParamByName('CODE')       .AsString   := strGCode;

				ParamByName('Renso')      .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataRenChar.asString),    #13#10, '',[rfReplaceAll,rfIgnoreCase]);
				ParamByName('NM')         .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataLongName.asString),   #13#10, '',[rfReplaceAll,rfIgnoreCase]);
				ParamByName('NMK')        .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataSimpleName.asString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);

				if pKBN = 1 then
				begin
					ParamByName('SUMKBN').AsInteger    := iSumKbn;
					ParamByName('HojyoKbn1').AsInteger := 0;
					ParamByName('HojyoKbn2').AsInteger := 0;
					ParamByName('SisanHojyoKbn1').AsInteger := 0;
					ParamByName('SisanHojyoKbn2').AsInteger := 0;
					ParamByName('SisanHojyoKbn3').Asinteger	:= 0;
				end;

				// 詳細からの場合
				if bSw = True then
				begin

					if pKBN = 1 then            // insert時のみ
					begin                       // WF入力ﾁｪｯｸOK & 入力ありの場合(与信限度額)
						if m_recOther.CanInsert and m_recOther.YsGKinFlg then
							ParamByName('YsGKin').AsFloat := m_recOther.YsGKin;
					end

					else if pKBN = 0 then            // update時も考慮します
					begin
						if m_recOther.CanUpdate and m_recOther.YsGKinFlg then
							ParamByName('YsGKin').AsFloat := m_recOther.YsGKin;
					end;

					ParamByName('TStartDate') .AsDateTime := f0StartDate.asDateTime;
					ParamByName('TEndDate')   .AsDateTime := f0EndDate.asDateTime;
					if f0StartDate.value = 0 then
						ParamByName('TStartDate') .AsDateTime := m_cJNTArea.getDefDate(1);
					if f0EndDate.value = 0 then
						ParamByName('TEndDate')   .AsDateTime := m_cJNTArea.getDefDate(2);

					ParamByName('KEISYOKBN')  .AsString   := f0KEISYOKBN .Text;
					ParamByName('FKANA')      .AsString   := f0FKANA.Text;
					ParamByName('DHYONM1')    .AsString   := f0DHYONM1.Text;
					ParamByName('DHYONM2')    .AsString   := f0DHYONM2.Text;
					ParamByName('HPAddress')  .AsString   := f0HPADD.Text;
					ParamByName('GyoNCode')   .AsFloat    := fnGetNCODE(f0GYCode.Text,ucGyosyu,uvGYCodeAttr);

					ParamByName('CountryKBN').AsInteger    := f0ECOUNTRY.AsInteger;
					ParamByName('CurrencyNCODE').AsFloat   := fnGetNCODE(f0ECURRENCY.text, MASTER_CurrKBN, 2);

// <MYN> ins -s
					if (f0MYNKbn.Text = MYN_HOUJIN) or (f0MYNKbn.Text = MYN_KOJIN) then
					begin
						ParamByName('HoujinKbn').AsInteger	:= f0MYNKbn.AsInteger;
					end else
					begin
						ParamByName('HoujinKbn').DataType	:= ftInteger;
						ParamByName('HoujinKbn').Clear;
					end;

					if (f0MYNKbn.Text = MYN_HOUJIN) then	// 法人
					begin
						if (f0MYNNo.Text = '') then
							ParamByName('HoujinNo').AsString	:= ''
						else
                        	ParamByName('HoujinNo').AsString	:= f0MYNNo.Text;

						if (m_iAccType = MYNACCESS_TYPE_ALL) then
                        	ParamByName('KojinKey').AsString	:= '';
					end
                    else
                    if (f0MYNKbn.Text = MYN_KOJIN) then	// 個人
					begin
                    	ParamByName('HoujinNo').AsString	:= '';

						if (m_iAccType = MYNACCESS_TYPE_ALL) then
						begin
// <MYN5> upd -s
{
							if (f0MYNNo.Text = '') then
								ParamByName('KojinKey').AsString	:= ''
							else
            	            	ParamByName('KojinKey').AsString	:= m_sSaveKojinKey;
}
	           	            	ParamByName('KojinKey').AsString	:= m_sSaveKojinKey;
// <MYN5> upd -e
						end;
					end;
// <MYN> ins -e

					ParamByName('ShihonKin')  .AsFloat    := f0SIHONKIN.value;
					ParamByName('Nensyo')     .AsFloat    := f0NENSYO.value;
					ParamByName('SyainSu')    .AsFloat    := f0SYAINSU.value;
					ParamByName('HojyoKbn1').AsInteger   := 0;
					ParamByName('HojyoKbn2').AsInteger   := 0;
					ParamByName('SisanHojyoKbn1').AsInteger   := 0;
					ParamByName('SisanHojyoKbn2').AsInteger   := 0;
					ParamByName('SisanHojyoKbn3').AsInteger	  :=0;
					if f1TSKBN.Checked then ParamByName('HojyoKbn1').AsInteger := 1;
					if f1SSKBN.Checked then ParamByName('HojyoKbn2').AsInteger := 1;

					if f1SHojyoKbn1.Checked then ParamByName('SisanHojyoKbn1').AsInteger := 1;
					if f1SHojyoKbn2.Checked then ParamByName('SisanHojyoKbn2').AsInteger := 1;


					if f1SHojyoKbn3.Checked then ParamByName('SisanHojyoKbn3').AsInteger :=1;


					// 入金予定
					ParamByName('RCloseDay1').AsInteger   := f1NClosingDay1.asInteger;
					ParamByName('RCloseDay2').AsInteger   := f1NClosingDay2.asInteger;
					ParamByName('RCloseDay3').AsInteger   := f1NClosingDay3.asInteger;
					ParamByName('RcvMonth1').AsInteger    := f1NMonth1.ItemIndex;
					ParamByName('RcvMonth2').AsInteger    := f1NMonth2.ItemIndex;
					ParamByName('RcvMonth3').AsInteger    := f1NMonth3.ItemIndex;
					if f1NMonth1.ItemIndex = -1 then ParamByName('RcvMonth1').AsInteger := 0;
					if f1NMonth2.ItemIndex = -1 then ParamByName('RcvMonth2').AsInteger := 0;
					if f1NMonth3.ItemIndex = -1 then ParamByName('RcvMonth3').AsInteger := 0;
					ParamByName('RcvDay1').AsInteger      := f1NDay1.asInteger;
					ParamByName('RcvDay2').AsInteger      := f1NDay2.asInteger;
					ParamByName('RcvDay3').AsInteger      := f1NDay3.asInteger;
					ParamByName('RHolidayKbn1').AsInteger := f1NHoliday1.ItemIndex;
					ParamByName('RHolidayKbn2').AsInteger := f1NHoliday2.ItemIndex;
					ParamByName('RHolidayKbn3').AsInteger := f1NHoliday3.ItemIndex;
					if f1NHoliday1.ItemIndex = -1 then ParamByName('RHolidayKbn1').AsInteger := 0;
					if f1NHoliday2.ItemIndex = -1 then ParamByName('RHolidayKbn2').AsInteger := 0;
					if f1NHoliday3.ItemIndex = -1 then ParamByName('RHolidayKbn3').AsInteger := 0;
					ParamByName('REndKaisu').AsInteger    := uvENDKAISU_T;

					// 支払予定
					ParamByName('PCloseDay1').AsInteger   := f1SClosingDay1.asInteger;
					ParamByName('PCloseDay2').AsInteger   := f1SClosingDay2.asInteger;
					ParamByName('PCloseDay3').AsInteger   := f1SClosingDay3.asInteger;
					ParamByName('PayMonth1').AsInteger    := f1SMonth1.ItemIndex;
					ParamByName('PayMonth2').AsInteger    := f1SMonth2.ItemIndex;
					ParamByName('PayMonth3').AsInteger    := f1SMonth3.ItemIndex;
					if f1SMonth1.ItemIndex = -1 then ParamByName('PayMonth1').AsInteger := 0;
					if f1SMonth2.ItemIndex = -1 then ParamByName('PayMonth2').AsInteger := 0;
					if f1SMonth3.ItemIndex = -1 then ParamByName('PayMonth3').AsInteger := 0;
					ParamByName('PayDay1').AsInteger      := f1SDay1.asInteger;
					ParamByName('PayDay2').AsInteger      := f1SDay2.asInteger;
					ParamByName('PayDay3').AsInteger      := f1SDay3.asInteger;
					ParamByName('PHolidayKbn1').AsInteger := f1SHoliday1.ItemIndex;
					ParamByName('PHolidayKbn2').AsInteger := f1SHoliday2.ItemIndex;
					ParamByName('PHolidayKbn3').AsInteger := f1SHoliday3.ItemIndex;
					if f1SHoliday1.ItemIndex = -1 then ParamByName('PHolidayKbn1').AsInteger := 0;
					if f1SHoliday2.ItemIndex = -1 then ParamByName('PHolidayKbn2').AsInteger := 0;
					if f1SHoliday3.ItemIndex = -1 then ParamByName('PHolidayKbn3').AsInteger := 0;
					ParamByName('PEndKaisu').AsInteger    := uvENDKAISU_S;

					// ｾｸﾞﾒﾝﾄ情報
					for i := 1 to  10 do
					begin
						ParamByName('SegNCode' + IntToStr(i)).AsFloat
							:= fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Text,
								m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute);
					end;

					// ﾌﾘｰ情報ﾊﾟﾗﾒｰﾀｾｯﾄ
					if UpdFreeFlg then
					begin
						ParamByName('VFree1' ).AsString		 := freeItem.VFree1;
						ParamByName('VFree2' ).AsString      := freeItem.VFree2;
						ParamByName('VFree3' ).AsString      := freeItem.VFree3;
						ParamByName('VFree4' ).AsString      := freeItem.VFree4;
						ParamByName('VFree5' ).AsString      := freeItem.VFree5;
						ParamByName('VFree6' ).AsString      := freeItem.VFree6;
						ParamByName('VFree7' ).AsString      := freeItem.VFree7;
						ParamByName('VFree8' ).AsString      := freeItem.VFree8;
						ParamByName('VFree9' ).AsString      := freeItem.VFree9;
						ParamByName('VFree10').AsString      := freeItem.VFree10;
						ParamByName('NFree1' ).AsCurrency    := freeItem.NFree1;
						ParamByName('NFree2' ).AsCurrency    := freeItem.NFree2;
						ParamByName('NFree3' ).AsCurrency    := freeItem.NFree3;
						ParamByName('NFree4' ).AsCurrency    := freeItem.NFree4;
						ParamByName('NFree5' ).AsCurrency    := freeItem.NFree5;
						ParamByName('NFree6' ).AsCurrency    := freeItem.NFree6;
						ParamByName('NFree7' ).AsCurrency    := freeItem.NFree7;
						ParamByName('NFree8' ).AsCurrency	 := freeItem.NFree8;
						ParamByName('NFree9' ).AsCurrency	 := freeItem.NFree9;
						ParamByName('NFree10').AsCurrency	 := freeItem.NFree10;

						if freeItem.DFree1 > 0 then
							ParamByName('DFree1').AsDateTime := freeItem.DFree1
						else
						begin
							ParamByName('DFree1').AsDateTime := now;
							ParamByName('DFree1').Clear;
						end;
						if freeItem.DFree2 > 0 then
							ParamByName('DFree2').AsDateTime := freeItem.DFree2
						else
						begin
							ParamByName('DFree2').AsDateTime := now;
							ParamByName('DFree2').Clear;
						end;
						if freeItem.DFree3 > 0 then
							ParamByName('DFree3').AsDateTime := freeItem.DFree3
						else
						begin
							ParamByName('DFree3').AsDateTime := now;
							ParamByName('DFree3').Clear;
						end;
					end;
				end;
			end;
		end;
	end;
	//↑<2257>

  //↓<207>
  //-------------------------------------------
  //  MTOKUI_xxxにMTOKUIの住所関係をコピーする
  //-------------------------------------------
  Function lfnUpdAddress(pTBL:string;pKBN:Integer=0):Boolean;
  var
      QryUpdAds  : TMQuery;
      AddressRec : TAddressRec;
  begin
      QryUpdAds := TMQuery.Create(Self);					    // MQueryの構築
  //<Rel>    MDataModule.SetDBInfoToQuery(dbCorp_Select, QryUpdAds); // DBとMQueryの接続
  //↓<Rel>
      if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
//<D10>	MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, QryUpdAds)
		gfnJNTSELSetDbName(QryUpdAds, m_SyncMaster.m_cPDBSelect)		//<D10>
      else
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QryUpdAds);
		gfnJNTSELSetDbName(QryUpdAds, dbCorp_Select);		//<D10>
  //↑<Rel>

      Result := False;

      try
          try
              with QryUpdAds do
              begin
                  // まず、該当のMTOKUI_xxxの住所関係を取得する。
                  Close;
                  SQL.Clear;
                  SQL.Add('select PostNo1, PostNo2, Ads1, Ads2, Tel1, Tel2, Fax1 '
                      +   ' from ' + pTBL + ' where (BaseNCode = :BaseNCode)');
                  // MTOKUI_SELのときはRecKbnの条件を付加。
                  if (pTBL = 'MTOKUI_SEL') then SQL.Add(' and (RecKbn = :KBN)');
                  if (pTBL = 'MTOKUI_SEL') then ParamByName('KBN').AsInteger := pKBN;
                  ParamByName('BaseNCode').AsFloat := uvNCODE;
                  Open;

                  if not Eof then
                  begin
                      AddressRec.PostNo1 := FieldByName('PostNo1').AsInteger;
                      AddressRec.PostNo2 := FieldByName('PostNo2').AsInteger;
                      AddressRec.Ads1    := FieldByName('Ads1').AsString;
                      AddressRec.Ads2    := FieldByName('Ads2').AsString;
                      AddressRec.Tel1    := FieldByName('Tel1').AsString;
                      AddressRec.Tel2    := FieldByName('Tel2').AsString;
                      AddressRec.Fax1    := FieldByName('Fax1').AsString;

                      // MTOKUIの更新前と、該当のMTOKUI_xxxの更新前が同じ場所には、
                      // MTOKUIに更新した住所関係の値をMTOKUI_xxxにコピーする。
                      Close;
                      SQL.Clear;

                      // update文の組み立て
                      SQL.Add('update ' + pTBL + ' set BaseNCode = BaseNCode');
                      if (m_AddressRec.PostNo1 = AddressRec.PostNo1) then
                          SQL.Add(', PostNo1 = :PostNo1');
                      if (m_AddressRec.PostNo2 = AddressRec.PostNo2) then
                          SQL.Add(', PostNo2 = :PostNo2');
                      if (m_AddressRec.Ads1 = AddressRec.Ads1) then
                          SQL.Add(', Ads1 = :Ads1');
                      if (m_AddressRec.Ads2 = AddressRec.Ads2) then
                          SQL.Add(', Ads2 = :Ads2');
                      if (m_AddressRec.Tel1 = AddressRec.Tel1) then
                          SQL.Add(', Tel1 = :Tel1');
                      if (m_AddressRec.Tel2 = AddressRec.Tel2) then
                          SQL.Add(', Tel2 = :Tel2');
                      if (m_AddressRec.Fax1 = AddressRec.Fax1) then
                          SQL.Add(', Fax1 = :Fax1');

                      SQL.Add(' where (BaseNCode = :BaseNCode) ');
                      if (pTBL = 'MTOKUI_SEL') then
                      begin
                          SQL.Add(' and (RecKbn = :KBN)');
                          ParamByName('KBN').AsInteger := pKBN;
                      end;

                      // バインド変数にセット
//<256> DEL                      ParamByName('BaseNCode').AsFloat := uvNCODE;
                      ParamByName('BaseNCode').AsString := FormatFloat('0',uvNCODE);  //<256> ADD
                      if (m_AddressRec.PostNo1 = AddressRec.PostNo1) then
                          ParamByName('PostNo1').AsInteger := f0ZipCode1.AsInteger;
                      if (m_AddressRec.PostNo2 = AddressRec.PostNo2) then
                          ParamByName('PostNo2').AsInteger := f0ZipCode2.AsInteger;
                      if (m_AddressRec.Ads1 = AddressRec.Ads1) then
                          ParamByName('Ads1').AsString := f0Address1.Text;
                      if (m_AddressRec.Ads2 = AddressRec.Ads2) then
                          ParamByName('Ads2').AsString := f0Address2.Text;
                      if (m_AddressRec.Tel1 = AddressRec.Tel1) then
                          ParamByName('Tel1').AsString := f0TelNo.Text;
                      if (m_AddressRec.Tel2 = AddressRec.Tel2) then
                          ParamByName('Tel2').AsString := f0TelNo2.Text;
                      if (m_AddressRec.Fax1 = AddressRec.Fax1) then
                          ParamByName('Fax1').AsString := f0FAX.Text;

                      if not ExecSQL then raise Exception.Create('');
                  end;
              end;
              Result := True;
          except
              Exit;
          end;
      finally
          QryUpdAds.Close;
          QryUpdAds.Free;
      end;
  end;
//↑<207>

//↓<Rel>
//== 得意先(仕入先)区分「1:通常、2:社内」のコンバート ====================
  function lfnCnvMasKbn(pMasKbn:string):string;
  begin
      Result := pMasKbn;
      if pMasKbn = '' then
          Result := '1';
  end;
//↑<Rel>

//== SQL実行 ====================
  function lfnExecSql: Boolean;
  begin
      Result := True;
      if (MTOKUI_DMQuery.ExecSQL = False) then
      begin
          ErrorMessageDsp(MTOKUI_DMQuery);
          if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
              // 親会社DBのﾛｰﾙﾊﾞｯｸ
              MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );

          MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
          MTOKUI_DMQuery.Close;
          Result := False;
      end;
  end;

// <263> ADD-STR
    function fnAiteNoPading(sAiteNo: String): String;
    var
        iLen: Integer;
    begin
        sAiteNo := Trim(sAiteNo);
        iLen := Length(sAiteNo);

        if (iLen <> 0) then
        begin
            sAiteNo := '0000000000' + sAiteNo;
            sAiteNo := Copy(sAiteNo, iLen + 1, 10);
        end;

        Result := sAiteNo;
    end;
// <263> ADD-END
//==============================
// ここからメイン
//==============================
begin
    Result := False;
	SessionPractice(C_ST_PROCESS); //<MHIS> ADD ここで作成するので、lfnxxxのローカル関数内の更新では作成しないくて良い。

    // 初期値設定
//<Rel>	QueryMaster := nil;

	try
//<Rel>		QueryMaster := TMQuery.Create(Self);					    // MQueryの構築
//<Rel>		MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryMaster);	// DBとMQueryの接続
        m_bNotStored := true;  //<502_001> ADD

        // 重複ﾁｪｯｸありでMTOKUIを読み込む
		if fnDataRead (strGCode, iSumKbn, 1) <> 0 then
		begin
			Result := False;
			exit;
		end;
		fnSeiKbn_EntryControl;
		fnSeiKbn_EntryControl_SI;

		HojyoMA_New := MTOKUI_DMQuery.Eof;

//↓<Rel>
	    // -------------------------------------------------------------------------
	    //  ｸﾞﾙｰﾌﾟ管理処理
	    //
	    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、親会社ﾃﾞｰﾀﾍﾞｰｽに対してﾄﾗﾝｻﾞｸｼｮﾝを掛ける
	    //  ｴﾗｰ時は、親会社ﾃﾞｰﾀﾍﾞｰｽに対してﾛｰﾙﾊﾞｯｸを行う
	    //  正常時は、親会社ﾃﾞｰﾀﾍﾞｰｽに対してｺﾐｯﾄを行う
	    // -------------------------------------------------------------------------
	    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    begin
			// MTOKUI_DMQueryを全社DBに接続しなおす。
			MTOKUI_DMQuery.Close;
//<D10>		MDataModule.SetDBInfoToQuery( m_SyncMaster.m_cPDBSelect, MTOKUI_DMQuery );
			gfnJNTSELSetDbName(MTOKUI_DMQuery, m_SyncMaster.m_cPDBSelect);		//<D10>

	        // 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始
	        MDataModule.BeginTran ( m_SyncMaster.m_cPDBSelect ) ;
	    end;
//↑<Rel>
        // ﾄﾗﾝｻﾞｸｼｮﾝの開始
		MDataModule.BeginTran(dbCorp_Select);

		{ MTOKUI 基本情報 }
		with MTOKUI_DMQuery do
		begin
			try
				Close;
//<D10>			RequestLive	:= False;
    			SQL.Clear;

//<226>↓
                //国外の場合は｢9:請求しない｣を固定セット
                lvGRUZSEIKBN_SI := uvTmpGRUZSEIKBN_SI;
                lvZSEIKBN_SI    := uvTmpZSEIKBN_SI;
                if f0ECOUNTRY.AsInteger = 2 then
                begin
                    lvGRUZSEIKBN_SI := 9;
                    lvZSEIKBN_SI    := 9;
                end;
//<226>↑
				if HojyoMA_New = False then
				begin
                    uvNCODE := JHojyoMA_DMemDataNCode.asFloat; //<228>

				    {更新}
                    SQL.Add(' Update MTOKUI SET        ' +
                            ' UpdTantoNCode= :UPDTANTO ,   ' +  //<128>
                            ' Renso        = :Renso    ,   ' +
                            ' NM           = :NM       ,   ' +
                            ' NMK          = :NMK          ');

                    // 詳細からの場合
                    if bSw = True then
                    begin
// <MYN> ins -s
						sSQL_MYN	:= '';
						if (f0MYNKbn.Text = MYN_HOUJIN) or (f0MYNKbn.Text = MYN_KOJIN) then
						begin
							sSQL_MYN	:= sSQL_MYN + ' HoujinNo     = :HoujinNo,   ';
                            if (m_iAccType = MYNACCESS_TYPE_ALL) then
								sSQL_MYN	:= sSQL_MYN + ' KojinKey     = :KojinKey,   ';
						end;
// <MYN> ins -e

                        SQL.Add(',KEISYOKBN    = :KEISYOKBN,   ' +
                                ' FKANA        = :FKANA    ,   ' +
                                ' ADS1         = :ADS1     ,   ' +
                                ' ADS2         = :ADS2     ,   ' +
                                ' PostNo1      = :PostNo1  ,   ' +
                                ' PostNo2      = :PostNo2  ,   ' +
                                ' TEL1         = :TEL1     ,   ' +
                                ' TEL2         = :TEL2     ,   ' +
                                ' FAX1         = :FAX1     ,   ' +
                                ' DHYONM1      = :DHYONM1  ,   ' +
                                ' DHYONM2      = :DHYONM2  ,   ' +
                                ' HPAddress    = :HPAddress,   ' +
                                ' GyoNCode     = :GyoNCode,    ' +
        //<226> ↓
                                ' CountryKbn    = :CountryKbn,    ' +
                                ' CurrencyNCode = :CurrencyNCode,    ' +
        //<226> ↑
// <MYN> ins -s
                                ' HoujinKbn    = :HoujinKbn,    ' +
								sSQL_MYN +
// <MYN> ins -e
                                ' ShihonKin    = :ShihonKin,   ' +
                                ' Nensyo       = :Nensyo,      ' +
                                ' SyainSu      = :SyainSu,     ' +
                                ' TStartDate   = :TStartDate,  ' +
                                ' TEndDate     = :TEndDate,    ' +
                                ' HojyoKbn1    = :HojyoKbn1,   ' +
                                ' HojyoKbn2    = :HojyoKbn2,   ' +
                                ' SisanHojyoKbn1    = :SisanHojyoKbn1,   ' +    //<158>
                                ' SisanHojyoKbn2    = :SisanHojyoKbn2,   ' +    //<158>
                                ' SisanHojyoKbn3    = :SisanHojyoKbn3,	 ' +	//<195>
                                ' RCloseDay1   = :RCloseDay1,  ' +
                                ' RCloseDay2   = :RCloseDay2,  ' +
                                ' RCloseDay3   = :RCloseDay3,  ' +
                                ' RcvMonth1    = :RcvMonth1 ,  ' +
                                ' RcvMonth2    = :RcvMonth2,   ' +
                                ' RcvMonth3    = :RcvMonth3,   ' +
                                ' RcvDay1      = :RcvDay1,     ' +
                                ' RcvDay2      = :RcvDay2,     ' +
                                ' RcvDay3      = :RcvDay3,     ' +
                                ' RHolidayKbn1 = :RHolidayKbn1,' +
                                ' RHolidayKbn2 = :RHolidayKbn2,' +
                                ' RHolidayKbn3 = :RHolidayKbn3,' +
                                ' REndKaisu    = :REndKaisu,   ' +
                                ' PCloseDay1   = :PCloseDay1,  ' +
                                ' PCloseDay2   = :PCloseDay2,  ' +
                                ' PCloseDay3   = :PCloseDay3,  ' +
                                ' PayMonth1    = :PayMonth1,   ' +
                                ' PayMonth2    = :PayMonth2,   ' +
                                ' PayMonth3    = :PayMonth3,   ' +
                                ' PayDay1      = :PayDay1,     ' +
                                ' PayDay2      = :PayDay2,     ' +
                                ' PayDay3      = :PayDay3,     ' +
                                ' PHolidayKbn1 = :PHolidayKbn1,' +
                                ' PHolidayKbn2 = :PHolidayKbn2,' +
                                ' PHolidayKbn3 = :PHolidayKbn3,' +
                                ' PEndKaisu    = :PEndKaisu,   ');
//↓<244>
                        if m_recOther.CanUpdate and m_recOther.YsGKinFlg then
                            SQL.Add(' YsGKin    = :YsGKin,   ');
//↑<244>
                        // ﾌﾘｰ項目の更新 <102>
                        if UpdFreeFlg then
                        begin
                            // 文字項目
                            SQL.Add(' VFree1  = :VFree1, VFree2  = :VFree2,  ');
                            SQL.Add(' VFree3  = :VFree3, VFree4  = :VFree4,  ');
                            SQL.Add(' VFree5  = :VFree5, VFree6  = :VFree6,  ');
                            SQL.Add(' VFree7  = :VFree7, VFree8  = :VFree8,  ');
                            SQL.Add(' VFree9  = :VFree9, VFree10 = :VFree10, ');
                            // 数字項目
                            SQL.Add(' NFree1  = :NFree1, NFree2  = :NFree2,  ');
                            SQL.Add(' NFree3  = :NFree3, NFree4  = :NFree4,  ');
                            SQL.Add(' NFree5  = :NFree5, NFree6  = :NFree6,  ');
                            SQL.Add(' NFree7  = :NFree7, NFree8  = :NFree8,  ');
                            SQL.Add(' NFree9  = :NFree9, NFree10 = :NFree10, ');
                            // 日付項目
{↓<213>
                            if freeItem.DFree1 > 0 then
                                SQL.Add(' DFree1 = :DFree1,  ');
                            if freeItem.DFree2 > 0 then
                                SQL.Add(' DFree2 = :DFree2,  ');
                            if freeItem.DFree3 > 0 then
                                SQL.Add(' DFree3 = :DFree3,  ');
↑<213>}
//↓<213> バインド変数としては、常に用意することにする。
                            SQL.Add(' DFree1 = :DFree1, DFree2 = :DFree2,  ');
                            SQL.Add(' DFree3 = :DFree3,  ');
//↑<213>
                        end;
                        // ｾｸﾞﾒﾝﾄ
                        SQL.Add(' SegNCode1  = :SegNCode1,SegNCode2  = :SegNCode2,' +
                                ' SegNCode3  = :SegNCode3,SegNCode4  = :SegNCode4,' +
                                ' SegNCode5  = :SegNCode5,SegNCode6  = :SegNCode6,' +
                                ' SegNCode7  = :SegNCode7,SegNCode8  = :SegNCode8,' +
                                ' SegNCode9  = :SegNCode9,SegNCode10 = :SegNCode10');
                    end;

                    // Where条件
                    SQL.Add(' Where  (GCODE = :CODE) and   (RDelKbn  <> 1) ');
                    // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                    lfnParamSet(0);
                    // SQL実行
                    if not lfnExecSql then Exit;

//<3135>ins-s
					//===== MTOKUI_MASのレコードが無い場合は作成する =====
                    if fnChkMtokui_Others('MAS') = False then
					begin
                    	SQL.Clear;
                    	SQL.Add(' insert into MTOKUI_MAS '+
                        	    ' (BaseNCode    , UpdTantoNCode , ' +
                        	    ' TCreditCash   , SDebitCash      ');

                    	// 詳細からの場合
                    	if bSw = True then
                    	begin
                        	SQL.Add(',PostNo1       , PostNo2       , ' +
                            	    ' ADS1          , ADS2          , ' +
                                	' TEL1          , TEL2          , ' +
                                	' FAX1          , TanNm         , ' +
                                	' DrawerDraft1  , DrawerDraft2    ');
                    	end;

                    	SQL.Add(' ) values        ' +
                    	        ' (:BaseNCode   , :UPDTANTO     , ' +
                    	        ' 0             , 0               ');

	                    // 詳細からの場合
    	                if bSw = True then
	                    begin
    	                    SQL.Add(',:PostNo1      , :PostNo2      , ' +
        	                        ' :ADS1         , :ADS2         , ' +
            	                    ' :TEL1         , :TEL2         , ' +
                	                ' :FAX1         , ''''          , ' +
                    	            ' ''''          , ''''            ');
                    	end;

                    	SQL.Add(' )           ');

	                    // ﾊﾟﾗﾒｰﾀの設定
	                    lfnParamSet(2);
	                    // SQL実行
	                    if not lfnExecSql then Exit;
                    end;
//<3135>ins-e

                    // 詳細画面の場合は_SELの書き込みを行う
                    if bSw = True then
                    begin
                        {MTOKUI_Sel更新  得意先}

//<3135>Del-s
{
                        if (f1TSKBN.Checked)        or                  // 得意先採用にﾁｪｯｸがあるか
                           (uvData_Load.pvrSai = 1) then                // 変更前にﾁｪｯｸされていたか
                        begin
}
//<3135>Del-e
                        //** 得意先情報－MTOKUI_SEL 更新 *****************
//<245>                 if fnChkMtokui_Sel(1, lvTUpd, lvSUpd) = False then
						//MTOKUI_SELのレコードがない場合は新規作成する
                        if fnChkMtokui_Sel(1, lvTUpd, lvSUpd, lvTnNCd, lvBmNCd) = False then //<245>担当者内部コード、部門内部コードを取得しておく。
                        begin
                            // 取引先(販売)にInsert
                            SQL.Clear;
                            SQL.Add(' insert into MTOKUI_SEL ' +
                                    ' (BaseNCode    , UpdTantoNCode , ' +   //<128>
                                    ' RecKBN        , MASKBN        , ' +
                                    ' UsKinKbn      , PostNo1       , ' +
                                    ' PostNo2       , ADS1          , ' +
                                    ' ADS2          , TEL1          , ' +
                                    ' TEL2          , FAX1          , ' +
                                    ' SectionName   , TanNm         , ' +
//<211>                                    ' Memo1         , ' +
                                    ' RZuiSSite     , RTSEINO       , ' +
                                    ' TRSEIKBN      , RHolidayKbn   , ' +
                                    ' SeiNCode      , URKINHSUKBN   , ' +
                                    ' GRUZSEIKBN    , ZSEIKBN       , ' +
                                    ' ZHSUKBN       , ZHSUTNIKBN    , ' +
                                    ' TRIHIKIKBN    , NMKBN         , ' +
                                    ' SSHCDKBN      , SSHCDKET      , ' +
                                    ' YYKBN         , DAINMKBN      , ' +
                                    ' USDENPFM      , MITPFM        , ' +
                                    ' JHDENPFM      , SNDENPFM      , ' +
                                    ' USGKEI        , JYGKEI        , ' +
                                    ' SOFOPFM       , ' +
//↓<214>
                                    ' TNKRNK        , KAKERT        , ' +
//↑<214>
                                    ' SSSYOPFM      , SSSYOKGM      , ' +
                                    ' BMNCODE       , TNNCODE       , ' +
                                    ' RYOPfm        , RYOTEKI       , ' +
                                    ' SYURYOKBN     , Memo1         , ' +
                                    ' Memo2         , HBunNCode1    , ' +
                                    ' HBunNCode2    , BunruiNCode1  , ' +
                                    ' BunruiNCode2  , BunruiNCode3  , ' +
                                    ' BunruiNCode4  , BunruiNCode5  , ' +
                                    ' BunruiNCode6  , BunruiNCode7  , ' +
                                    ' BunruiNCode8  , BunruiNCode9  , ' +
//<1719> Upd-s
//                                  ' BunruiNCode10)  ' +
                                    ' BunruiNCode10 , ' +
                                    ' KUSGKei       , KUSDenPfm     , ' +
                                    ' KMitPfm       , KJHDenPfm     ) ' +
//<1719> Upd-e
                                    ' values          ' +
                                    ' (:BaseNCode   , :UPDTANTO     , ' +  //<128>
//<3135>                                    ' 1             , ' + f1TKBN.text   +
									' 1             , ' + lfnCnvMasKbn(f1TKBN.text)  + //<3135>
                                    '               , ' +
                                    ' 1             , :PostNo1      , ' +
                                    ' :PostNo2      , :ADS1         , ' +
                                    ' :ADS2         , :TEL1         , ' +
                                    ' :TEL2         , :FAX1         , ' +
                                    ' ''''          , ''''          , ' +
//<211>                                    ' ''''          , ' +
                                    ' :RZuiSSite    , :RTSEINO      , ' +
                                    ' :TRSEIKBN     , :RHolidayKbn  , ' +
                                    ' :SeiNCode     , ' +
                                    IntToStr(uvTmpURKINHSUKBN) + ', ' +
                                    IntToStr(uvTmpGRUZSEIKBN ) + ', ' +
                                    IntToStr(uvTmpZSEIKBN    ) + ', ' +
                                    IntToStr(uvTmpZHSUKBN    ) + ', ' +
                                    IntToStr(uvTmpZHSUTNIKBN ) + ', ' +
// <WF>↓
//                                    IntToStr(uvTmpTRIHIKIKBN ) + ', ' +
                                    '');
                                        // WF入力ﾁｪｯｸOK & 入力ありの場合(取引区分)
                            if m_recOther.CanInsert and m_recOther.TrihikiKbnFlg then
                                SQL.Add(IntToStr(m_recOther.TrihikiKbn) + ', ')
                            else        // そうでなければﾃﾝﾌﾟﾚｰﾄ値
                                SQL.Add(IntToStr(uvTmpTRIHIKIKBN ) + ', ');
// <WF>↑
                            SQL.Add(IntToStr(uvTmpNMKBN      ) + ', ' +
                                    IntToStr(uvTmpSSHCDKBN   ) + ', ' +
                                    IntToStr(uvTmpSSHCDKET   ) + ', ' +
                                    IntToStr(uvTmpYYKBN      ) + ', ' +
                                    IntToStr(uvTmpDAINMKBN   ) + ', ' +
                                    IntToStr(uvTmpUSDENPFM   ) + ', ' +
                                    IntToStr(uvTmpMITPFM     ) + ', ' +
                                    IntToStr(uvTmpJHDENPFM   ) + ', ' +
                                    IntToStr(uvTmpSNDENPFM   ) + ', ' +
                                    IntToStr(uvTmpUSGKEI     ) + ', ' +
                                    IntToStr(uvTmpJYGKEI     ) + ', ' +
                                    IntToStr(uvTmpSOFOPFM    ) + ', ' +
//↓<214>
                                    IntToStr  (uvTmpTnkRnk   ) + ', ' +
                                    FloatToStr(uvTmpKakeRt   ) + ', ' +
//↑<214>

                                    IntToStr(uvTmpSSDENPFM   ) + ', ' +
                                    IntToStr(uvTmpSSGKEI     ) + ', ' +
// <WF>↓
//                                    FloatToStr(uvTmpBMCODE   ) + ', ' +
//                                    FloatToStr(uvTmpTNCODE   ) + ', ' +
                                    '');
                                        // WF入力ﾁｪｯｸOK & 入力ありの場合(部門)
                            if m_recOther.CanInsert and m_recOther.BmNCodeFlg then
                                SQL.Add(FloatToStr(m_recOther.BmNCode) + ', ')
                            else
                                SQL.Add(FloatToStr(uvTmpBMCODE   ) + ', ');
                                        // WF入力ﾁｪｯｸOK & 入力ありの場合(担当者)
                            if m_recOther.CanInsert and m_recOther.TnNCodeFlg then
                                SQL.Add(FloatToStr(m_recOther.TnNCode) + ', ')
                            else
                                SQL.Add(FloatToStr(uvTmpTNCODE   ) + ', ');
// <WF>↑
                            SQL.Add(IntToStr(uvTmpRYOPFM     ) + ', ' +
                                    IntToStr(uvTmpRYOTEKI    ) + ', ' +
                                    IntToStr(uvTmpSYURYOKBN  ) + ', ' +
                                    '''' + uvTmpCmt1 + ''', ' +
                                    '''' + uvTmpCmt2 + ''', ' +
                                    FloatToStr(uvTmpKKBN1  ) + ', ' +
                                    FloatToStr(uvTmpKKBN2  ) + ', ' +
                                    ' :BunruiNCode1 , :BunruiNCode2 , ' +
                                    ' :BunruiNCode3 , :BunruiNCode4 , ' +
                                    ' :BunruiNCode5 , :BunruiNCode6 , ' +
                                    ' :BunruiNCode7 , :BunruiNCode8 , ' +
//<1719> Upd-s
//                                  ' :BunruiNCode9 , :BunruiNCode10) ');
                                    ' :BunruiNCode9 , :BunruiNCode10 , ' +
                                    IntToStr(uvTmpKUSGKei      ) + ', ' +
                                    IntToStr(uvTmpKUSDenPfm    ) + ', ' +
                                    IntToStr(uvTmpKMitPfm      ) + ', ' +
                                  IntToStr(uvTmpKJHDenPfm    ) + ') ' );
//<1719> Upd-e
                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
//<2257>                                lfnParamSet(3);
						    lfnParamSet(5);	//<2257>
							if not lfnExecSql then Exit;  //<3135>
                        end
                        else
                        begin
//<3135>Ins-s
                    		if (f1TSKBN.Checked)        or                  // 得意先採用にﾁｪｯｸがあるか
                			(uvData_Load.pvrSai = 1) then                // 変更前にﾁｪｯｸされていたか
							begin
//<3135>Ins-e
                                // 取引先(販売)にUpdate
                                SQL.Clear;
                                SQL.Add(' update MTOKUI_Sel SET           ' +
                                        ' UpdTantoNCode = :UPDTANTO,      ' +       //<128>
                                        ' MasKbn        = :MasKbn,        ' +
                                        ' RZuiSSite     = :RZuiSSite,     ' +
                                        ' RTSEINO       = :RTSEINO,       ' +
                                        ' TRSEIKBN      = :TRSEIKBN,      ' +
                                        ' RHolidayKbn   = :RHolidayKbn,   ' +
                                        ' BunruiNCode1  = :BunruiNCode1,  ' +
                                        ' BunruiNCode2  = :BunruiNCode2,  ' +
                                        ' BunruiNCode3  = :BunruiNCode3,  ' +
                                        ' BunruiNCode4  = :BunruiNCode4,  ' +
                                        ' BunruiNCode5  = :BunruiNCode5,  ' +
                                        ' BunruiNCode6  = :BunruiNCode6,  ' +
                                        ' BunruiNCode7  = :BunruiNCode7,  ' +
                                        ' BunruiNCode8  = :BunruiNCode8,  ' +
                                        ' BunruiNCode9  = :BunruiNCode9,  ' +
                                        ' BunruiNCode10 = :BunruiNCode10, ');
//↓<244>
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_TOKUI_HENKO) and (m_recOther.TrihikiKbnFlg) then
                                begin
                                    SQL.Add(' TrihikiKbn = :TrihikiKbn, ');
                                end;
//<245>                         if m_recOther.CanUpdate and m_recOther.BmNCodeFlg then
                                if ((m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_TOKUI_HENKO) and (m_recOther.BmNCodeFlg)) or (lvBmNCd = 0) then //<245>
                                begin
                                    SQL.Add(' BmNCode = :BmNCode, ');
                                end;
//<245>                         if m_recOther.CanUpdate and m_recOther.TnNCodeFlg then
                                if ((m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_TOKUI_HENKO) and (m_recOther.TnNCodeFlg)) or (lvTnNCd = 0) then //<245>
                                begin
                                    SQL.Add(' TnNCode = :TnNCode, ');
                                end;
//↑<244>
                                SQL.Add(' UpdDateTM     = :UpdDateTM      ' + //<Rel>配信後、トリガを実行するためのきっかけ。
                                        ' Where  (BaseNCode = :BaseNCode) ' +
                                        '   and  (RecKbn    = 1)          ');

                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                                ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;  //<128>
                                ParamByName('MasKbn').AsInteger    := f1TKBN.asInteger;
                                ParamByName('RZuiSSite').AsInteger := f1NSSite.asInteger;
                                ParamByName('RTSEINO')  .AsString  := f1NSeino.Text;
                                ParamByName('UpdDateTM').AsDateTime:= now; //<Rel>
//↓<244>
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_TOKUI_HENKO) and (m_recOther.TrihikiKbnFlg) then
                                begin
                                    ParamByName('TrihikiKbn')  .AsInteger  := m_recOther.TrihikiKbn;
                                end;
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_TOKUI_HENKO) and (m_recOther.BmNCodeFlg) then
                                begin
                                    ParamByName('BmNCode')  .AsFloat  := m_recOther.BmNCode;
                                end
//↓<245>
								else if (lvBmNCd = 0) then
								begin
                                    ParamByName('BmNCode')  .AsFloat  := uvTmpBMCODE;
								end;
//↑<245>
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_TOKUI_HENKO) and (m_recOther.TnNCodeFlg) then
                                begin
                                    ParamByName('TnNCode')  .AsFloat  := m_recOther.TnNCode;
                                end
//↓<245>
								else if (lvTnNCd = 0) then
								begin
                                    ParamByName('TnNCode')  .AsFloat  := uvTmpTNCODE;
								end;
//↑<245>
//↑<244>

                                // 締日1がｾｯﾄされていれば "0"
                                // それ以外で、特殊請求NOが入力されていれば "1"
                                // 以外は随時請求"2" をｾｯﾄ  <116>
                                // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
                                if iSumKbn = 1 then
                                    ParamByName('TRSEIKBN').AsInteger := 0
                                else
                                begin
	                                if f1NClosingDay1.AsInteger <> 0 then
	                                    ParamByName('TRSEIKBN').AsInteger := 0
	                                else if f1NSeino.AsInteger <> 0 then
	                                    ParamByName('TRSEIKBN').AsInteger := 1
	                                else
	                                    ParamByName('TRSEIKBN').AsInteger := 2;
								end;

                                // 休日区分
                                if f1NHolidayKbn.ItemIndex = -1 then
                                    ParamByName('RHolidayKbn') .AsInteger := 0
                                else
                                    ParamByName('RHolidayKbn') .AsInteger := f1NHolidayKbn.ItemIndex;

//<256> DEL                                ParamByName('BaseNCode') .AsFloat  := JHojyoMA_DMemDataNCode.asFloat;
                                ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;  //<256> ADD

                                // 得意先分類
                                for i := 1 to  10 do
                                begin
                                    ParamByName('BunruiNCode' + IntToStr(i)).AsFloat
                                        := fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Text,
                                            m_arAdoptInfo_Tbr [i].nMasterDivision,m_arAdoptInfo_Tbr [i].nCodeAttribute);

                                end;

								if not lfnExecSql then Exit;  //<3135>
							end;

                        end;
                        // SQL実行
//<3135>Del                        if not lfnExecSql then Exit;
                        lfnUpdAddress('MTOKUI_SEL',1); //<207>

//↓<212>
                        //** 得意先情報－MTOKUI_CRD 更新 *****************
                        if fnChkMtokui_Others('CRD') = False then
                        begin
			                //===== 取引先(債権)にInsert =====
			                SQL.Clear;
			                SQL.Add(' insert into MTOKUI_CRD '+
                                    ' (BaseNCode    , UpdTantoNCode , ' +
                                    //' Ku            , TesuryoFutan  , ' +  <505_001>
                                    ' PostNo1       , PostNo2       , ' +
                                    ' ADS1          , ADS2          , ' +
                                    ' TEL1          , TEL2          , ' +
                                    ' FAX1          ' +
                                    ' ) values (    ' +
                                    ' :BaseNCode    , :UPDTANTO     , ' +
                                    //' 0             , 0             , ' +  <505_001>
                                    ' :PostNo1      , :PostNo2      , ' +
                                    ' :ADS1         , :ADS2         , ' +
                                    ' :TEL1         , :TEL2         , ' +
                                    ' :FAX1         ) ');
			                // ﾊﾟﾗﾒｰﾀの設定
//<2257>			                lfnParamSet(2);
			                lfnParamSet(4);	//<2257>
			                // SQL実行
                            if not lfnExecSql then Exit;
						end;
//<3135>del             end;
//↑<212>


                        {MSIIRE_Sel更新　仕入先}
//<3135>Del-s
{
                        if (f1SSKBN.Checked)        or                  // 仕入先採用にﾁｪｯｸがあるか
                           (uvData_Load_S.pvrSai = 1) then              // 変更前にﾁｪｯｸされていたか
                        begin
}

//<3135>Del-e
                            //** 仕入先情報－MTOKUI_SEL 更新 *****************
//<245>                     if fnChkMtokui_Sel(2, lvTUpd, lvSUpd) = False then
						//MTOKUI_SELのレコードがない場合は新規作成する
                        if fnChkMtokui_Sel(2, lvTUpd, lvSUpd, lvTnNCd, lvBmNCd) = False then //<245>担当者内部コード、部門内部コードを取得しておく。
                        begin
                            // 取引先(販売)にInsert
                            SQL.Clear;
                            SQL.Add(' insert into MTOKUI_SEL   '+
                                    ' (BaseNCode    , UpdTantoNCode , ' +   //<128>
                                    ' RecKBN        , MasKBN        , ' +
                                    ' UsKinKbn      , PostNo1       , ' +
                                    ' PostNo2       , ADS1          , ' +
                                    ' ADS2          , TEL1          , ' +
                                    ' TEL2          , FAX1          , ' +
                                    ' SectionName   , TanNm         , ' +
//<211>                                    ' Memo1         , ' +
                                    ' RZuiSSite     , RTSEINO       , ' +
                                    ' TRSEIKBN      , RHolidayKbn   , ' +
                                    ' SeiNCode      , URKINHSUKBN   , ' +
                                    ' GRUZSEIKBN    , ZSEIKBN       , ' +
                                    ' ZHSUKBN       , ZHSUTNIKBN    , ' +
                                    ' TRIHIKIKBN    , NMKBN         , ' +
                                    ' SSHCDKBN      , SSHCDKET      , ' +
                                    ' YYKBN         , DAINMKBN      , ' +
                                    ' USDENPFM      , JHDENPFM      , ' +
                                    ' SNDENPFM      , USGKEI        , ' +
//↓<214>
                                    ' TNKRNK        , KAKERT        , ' +
//↑<214>
                                    ' SSSYOPFM      , SSSYOKGM      , ' +
                                    ' BMNCODE       , TNNCODE       , ' +
                                    ' Memo1         , Memo2         , ' +
                                    ' HBunNCode1    , HBunNCode2    , ' +
                                    ' BunruiNCode1  , BunruiNCode2  , ' +
                                    ' BunruiNCode3  , BunruiNCode4  , ' +
                                    ' BunruiNCode5  , BunruiNCode6  , ' +
                                    ' BunruiNCode7  , BunruiNCode8  , ' +
//<1719> Upd-s
//                                  ' BunruiNCode9  , BunruiNCode10)  ' +
                                    ' BunruiNCode9  , BunruiNCode10 , ' +
                                    ' KUSGKei       , KUSDenPfm     , ' +
                                    ' KMitPfm       , KJHDenPfm)      ' +
//<1719> Upd-e
                                    ' values          ' +
                                    ' (:BaseNCode   , :UPDTANTO     , ' +  //<128>
//<3135>                                    ' 2             , ' + f1SKBN.text       +
                                    ' 2             , ' + lfnCnvMasKbn(f1TKBN.text) + //<3135>
                                    '               , ' +
                                    ' 1             , :PostNo1      , ' +
                                    ' :PostNo2      , :ADS1         , ' +
                                    ' :ADS2         , :TEL1         , ' +
                                    ' :TEL2         , :FAX1         , ' +
                                    ' ''''          , ''''          , ' +
//<211>                                    ' ''''          , ' +
                                    ' :RZuiSSite    , :RTSEINO      , ' +
                                    ' :TRSEIKBN     , :RHolidayKbn  , ' +
                                    ' :SeiNCode     , ' +
                                    IntToStr(uvTmpURKINHSUKBN_SI) + ', ' +
//<226>↓
                                    IntToStr(lvGRUZSEIKBN_SI ) + ', ' +
                                    IntToStr(lvZSEIKBN_SI    ) + ', ' +
//<226>↑
                                    IntToStr(uvTmpZHSUKBN_SI    ) + ', ' +
                                    IntToStr(uvTmpZHSUTNIKBN_SI ) + ', ' +
// <WF>↓
//                                    IntToStr(uvTmpTRIHIKIKBN_SI ) + ', ' +
                                    '');
                                        // WF入力ﾁｪｯｸOK & 入力ありの場合(取引区分)
                            if m_recOther.CanInsert and m_recOther.TrihikiKbnFlg then
                                SQL.Add(IntToStr(m_recOther.TrihikiKbn) + ', ')
                            else        // そうでなければﾃﾝﾌﾟﾚｰﾄ値
                                SQL.Add(IntToStr(uvTmpTRIHIKIKBN_SI ) + ', ');
// <WF>↑
                            SQL.Add(IntToStr(uvTmpNMKBN_SI      ) + ', ' +
                                    IntToStr(uvTmpSSHCDKBN_SI   ) + ', ' +
                                    IntToStr(uvTmpSSHCDKET_SI   ) + ', ' +
                                    IntToStr(uvTmpYYKBN_SI      ) + ', ' +
                                    IntToStr(uvTmpDAINMKBN_SI   ) + ', ' +
                                    IntToStr(uvTmpUSDENPFM_SI   ) + ', ' +
                                    IntToStr(uvTmpJHDENPFM_SI   ) + ', ' +
                                    IntToStr(uvTmpSNDENPFM_SI   ) + ', ' +
                                    IntToStr(uvTmpUSGKEI_SI     ) + ', ' +
//↓<214>
                                    IntToStr  (uvTmpTnkRnk_Si   ) + ', ' +
                                    FloatToStr(uvTmpKakeRt_Si   ) + ', ' +
//↑<214>
                                    IntToStr(uvTmpSSDENPFM_Si   ) + ', ' +
                                    IntToStr(uvTmpSSGKEI_Si     ) + ', ' +
// <WF>↓
//                                    FloatToStr(uvTmpBMCODE_Si   ) + ', ' +
//                                    FloatToStr(uvTmpTNCODE_Si   ) + ', ' +
                                    '');
                                        // WF入力ﾁｪｯｸOK & 入力ありの場合(部門)
                            if m_recOther.CanInsert and m_recOther.BmNCodeFlg then
                                SQL.Add(FloatToStr(m_recOther.BmNCode) + ', ')
                            else        // そうでなければﾃﾝﾌﾟﾚｰﾄ値
                                SQL.Add(FloatToStr(uvTmpBMCODE_Si   ) + ', ');
                                        // WF入力ﾁｪｯｸOK & 入力ありの場合(担当者)
                            if m_recOther.CanInsert and m_recOther.TnNCodeFlg then
                                SQL.Add(FloatToStr(m_recOther.TnNCode) + ', ')
                            else        // そうでなければﾃﾝﾌﾟﾚｰﾄ値
                                SQL.Add(FloatToStr(uvTmpTNCODE_Si   ) + ', ');
// <WF>↑
                            SQL.Add('''' + uvTmpCmt1_Si + ''', ' +
                                    '''' + uvTmpCmt2_Si + ''', ' +
                                    FloatToStr(uvTmpKKBN1_Si  ) + ', ' +
                                    FloatToStr(uvTmpKKBN2_Si  ) + ', ' +
                                    ' :BunruiNCode1 , :BunruiNCode2 , ' +
                                    ' :BunruiNCode3 , :BunruiNCode4 , ' +
                                    ' :BunruiNCode5 , :BunruiNCode6 , ' +
                                    ' :BunruiNCode7 , :BunruiNCode8 , ' +
//<1719> Upd-s
//                                    ' :BunruiNCode9 , :BunruiNCode10) ');
                                    ' :BunruiNCode9 , :BunruiNCode10 , ' +
                                    IntToStr(uvTmpKUSGKei_Si   ) + ', ' +
                                    IntToStr(uvTmpKUSDenPfm_Si ) + ', ' +
                                    IntToStr(uvTmpKMitPfm_Si   ) + ', ' +
                                  IntToStr(uvTmpKJHDenPfm_Si ) + ') ' );
//<1719> Upd-e
                            // ﾊﾟﾗﾒｰﾀのｾｯﾄ
//<2257>                            lfnParamSet(4);
							lfnParamSet(6);	//<2257>

                            if not lfnExecSql then Exit;//<3135>
                        end
                        else
                        begin
//<3135>ins-s
                    		if (f1SSKBN.Checked)        or                  // 仕入先採用にﾁｪｯｸがあるか
                       		(uvData_Load_S.pvrSai = 1) then              // 変更前にﾁｪｯｸされていたか
                    		begin
//<3135>ins-e
                                SQL.Clear;
                                SQL.Add(' update MTOKUI_Sel SET          ' +
                                        ' UpdTantoNCode = :UPDTANTO,     ' +       //<128>
                                        ' MasKbn        = :MasKbn,       ' +
                                        ' RZuiSSite     = :RZuiSSite,    ' +
                                        ' RTSEINO       = :RTSEINO,      ' +
                                        ' TRSEIKBN      = :TRSEIKBN,     ' +
                                        ' RHolidayKbn   = :RHolidayKbn,  ' +
                                        ' BunruiNCode1  = :BunruiNCode1, ' +
                                        ' BunruiNCode2  = :BunruiNCode2, ' +
                                        ' BunruiNCode3  = :BunruiNCode3, ' +
                                        ' BunruiNCode4  = :BunruiNCode4, ' +
                                        ' BunruiNCode5  = :BunruiNCode5, ' +
                                        ' BunruiNCode6  = :BunruiNCode6, ' +
                                        ' BunruiNCode7  = :BunruiNCode7, ' +
                                        ' BunruiNCode8  = :BunruiNCode8, ' +
                                        ' BunruiNCode9  = :BunruiNCode9, ' +
                                        ' BunruiNCode10 = :BunruiNCode10,');
//↓<244>
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_SIIRE_HENKO) and (m_recOther.TrihikiKbnFlg) then
                                begin
                                    SQL.Add(' TrihikiKbn = :TrihikiKbn, ');
                                end;
//<245>                         if m_recOther.CanUpdate and m_recOther.BmNCodeFlg then
                                if ((m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_SIIRE_HENKO) and (m_recOther.BmNCodeFlg)) or (lvBmNCd = 0) then //<245>
                                begin
                                    SQL.Add(' BmNCode = :BmNCode, ');
                                end;
//<245>                         if m_recOther.CanUpdate and m_recOther.TnNCodeFlg then
                                if ((m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_SIIRE_HENKO) and (m_recOther.TnNCodeFlg)) or (lvTnNCd = 0) then //<245>
                                begin
                                    SQL.Add(' TnNCode = :TnNCode, ');
                                end;
//↑<244>
                                SQL.Add(' UpdDateTM     = :UpdDateTM     '); //<Rel>配信後、トリガを実行するためのきっかけ。
//<226>↓                       //国外の場合は｢9:請求しない｣を固定セット
                                if f0ECOUNTRY.AsInteger = 2 then
                                    Sql.Add(',GRUZSEIKBN = 9, ZSEIKBN = 9 ');
//<226>↑
                                SQL.Add(' Where (BaseNCode = :BaseNCode) ' +
                                        '   and (RecKbn    = 2)          ');
                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                                ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;  //<128>
                                ParamByName('MasKbn').AsInteger    := f1SKBN.asInteger;
                                ParamByName('RZuiSSite').AsInteger := f1SSSite.asInteger;
                                ParamByName('RTSEINO').AsString    := f1SSeino.Text;
                                ParamByName('UpdDateTM').AsDateTime:= now; //<Rel>
//↓<244>
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_SIIRE_HENKO) and (m_recOther.TrihikiKbnFlg) then
                                begin
                                    ParamByName('TrihikiKbn')  .AsInteger  := m_recOther.TrihikiKbn;
                                end;
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_SIIRE_HENKO) and (m_recOther.BmNCodeFlg) then
                                begin
                                    ParamByName('BmNCode')  .AsFloat  := m_recOther.BmNCode;
                                end
//↓<245>
								else if (lvBmNCd = 0) then
								begin
                                    ParamByName('BmNCode')  .AsFloat  := uvTmpBMCODE_Si;
								end;
//↑<245>
                                if (m_recOther.CanUpdate) and (m_recOther.SyncKbn = SWKFORM_SIIRE_HENKO) and (m_recOther.TnNCodeFlg) then
                                begin
                                    ParamByName('TnNCode')  .AsFloat  := m_recOther.TnNCode;
                                end
//↓<245>
								else if (lvTnNCd = 0) then
								begin
                                    ParamByName('TnNCode')  .AsFloat  := uvTmpTNCODE_Si;
								end;
//↑<245>
//↑<244>

                                // 締日1がｾｯﾄされていれば "0"
                                // それ以外で、特殊請求NOが入力されていれば "1"
                                // 以外は随時請求"2" をｾｯﾄ  <116>
                                // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
                                if iSumKbn = 1 then
                                    ParamByName('TRSEIKBN').AsInteger := 0
                                else
                                begin
	                                if f1SClosingDay1.AsInteger <> 0 then
	                                    ParamByName('TRSEIKBN').AsInteger := 0
	                                else if f1SSeino.AsInteger <> 0 then
	                                    ParamByName('TRSEIKBN').AsInteger := 1
	                                else
	                                    ParamByName('TRSEIKBN').AsInteger := 2;
								end;

                                // 休日区分
                                if f1SHolidayKbn.itemIndex = -1 then
                                    ParamByName('RHolidayKbn') .AsInteger := 0
                                else
                                    ParamByName('RHolidayKbn') .AsInteger := f1SHolidayKbn.itemIndex;

//<256> DEL                                ParamByName('BaseNCode') .AsFloat  := JHojyoMA_DMemDataNCode.asFloat;
                                ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;  //<256> ADD

                                // 仕入先分類
                                for i := 1 to  10 do
                                begin
                                    ParamByName('BunruiNCode' + IntToStr(i)).AsFloat
                                        := fnGetNCODE(TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Text,
                                            m_arAdoptInfo_SBr [i].nMasterDivision,m_arAdoptInfo_SBr [i].nCodeAttribute);
                                end;

								if not lfnExecSql then Exit;     //<3135>
                            end;
						end;	//<3135>
                        // SQL実行
//<3135>Del                        if not lfnExecSql then Exit;
                        lfnUpdAddress('MTOKUI_SEL',2); //<207>
//↓<212>
                        //** 仕入先情報－MTOKUI_PAY 更新 *****************
                        if fnChkMtokui_Others('PAY') = False then
                        begin
			                //===== 取引先(支払)にInsert =====
			                SQL.Clear;
			                SQL.Add(' insert into MTOKUI_PAY ' +
                                    ' (BaseNCode    , UpdTantoNCode , ' +
                                    ' PostNo1       , PostNo2       , ' +
                                    ' ADS1          , ADS2          , ' +
                                    ' TEL1          , TEL2          , ' +
                                    ' FAX1          , SectionName   , ' +
// <238> MOD-STR
//                                      ' MailAddress   , LetterKBN       ' +
                                    ' MailAddress   , LetterKbn     , ' +
                                    ' GensenUseKbn  , PersonKbn       ' +
// <238> MOD-END
                                    ' ) values (      ' +
                                    ' :BaseNCode    , :UPDTANTO     , ' +
                                    ' :PostNo1      , :PostNo2      , ' +
                                    ' :ADS1         , :ADS2         , ' +
                                    ' :TEL1         , :TEL2         , ' +
                                    ' :FAX1         , ''''          , ' +
// <238> MOD-STR
//                                      ' ''''          , 0             ) ');
                                    ' ''''          , ' + IntToStr(uvTmpLetterKbn) + ', ' +
                                    IntToStr(uvTmpGensenUseKbn) + ', ' + IntToStr(uvTmpPersonKbn) + ')');
// <238> MOD-END
			                // ﾊﾟﾗﾒｰﾀの設定
//<2257>			                    lfnParamSet(2);
							lfnParamSet(3);	//<2257>

                            // SQL実行
                            if not lfnExecSql then Exit;
						end;
//↑<212>
//<3135>Del                        end;
//↓<207>
                        lfnUpdAddress('MTOKUI_MAS');      // 会計の住所系を更新
                        lfnUpdAddress('MTOKUI_PAY');      // 債務の住所系を更新
                        lfnUpdAddress('MTOKUI_CRD');      // 債権の住所系を更新
//↓<2226>
						if (f1TSKBN.Checked)        and                 // 得意先採用にﾁｪｯｸがあるか
                           (uvData_Load.pvrSai = 0)  then               // 変更前にﾁｪｯｸされていなかったか
						begin
							fnforcedlyUpdAddress('MTOKUI_SEL',1);      // 得意先の住所系を更新
						end;

						if	(f1SSKBN.Checked)        and            	// 仕入先採用にﾁｪｯｸがあるか
                           (uvData_Load_S.pvrSai = 0) then              // 変更前にﾁｪｯｸされていなかったか
						begin
							fnforcedlyUpdAddress('MTOKUI_SEL',2);      // 仕入先の住所系を更新
						end;
//↑<2226>
//<3135>Del-s
{
                        if (f1SHojyoKbn1.Checked) or
                           (f1SHojyoKbn2.Checked) or       // 資産購入先、資産売却先、リース取引先採用区分の
                           (f1SHojyoKbn3.Checked) then    // どれか1つでもチェックされていたら
                        begin
}
//<3135>Del-e
//↓<212>
                        //** 資産情報－MTOKUI_DEP 更新 *****************
						//MTOKUI_DEPのレコードがない場合は作成する
                        if fnChkMtokui_Others('DEP') = False then
                        begin
		                    //===== 取引先(資産情報)にInsert =====
		                    SQL.Clear;
		                    SQL.Add(' insert into MTOKUI_DEP '+
                                    ' (BaseNCode    , UpdTantoNCode , ' +
                                    ' PostNo1       , PostNo2       , ' +
                                    ' ADS1          , ADS2          , ' +
                                    ' TEL1          , TEL2          , ' +
                                    ' FAX1            ' +
                                    ' ) values (      ' +
                                    ' :BaseNCode    , :UPDTANTO     , ' +
                                    ' :PostNo1      , :PostNo2      , ' +
                                    ' :ADS1         , :ADS2         , ' +
                                    ' :TEL1         , :TEL2         , ' +
                                    ' :FAX1         ) ');
		                    // ﾊﾟﾗﾒｰﾀの設定
//<2257>			                    lfnParamSet(5);
							lfnParamSet(7);	//<2257>

                            // SQL実行
                            if not lfnExecSql then Exit;
						end;
//↑<212>
//<3135>ins-s
                        if (f1SHojyoKbn1.Checked) or
                           (f1SHojyoKbn2.Checked) or       // 資産購入先、資産売却先、リース取引先採用区分の
                           (f1SHojyoKbn3.Checked) then    // どれか1つでもチェックされていたら
                        begin
//<3135>ins-e
                            lfnUpdAddress('MTOKUI_DEP');  // 資産の住所系を更新
                        end;
//↓<2226>
                        if (
						   (f1SHojyoKbn1.Checked) or
                           (f1SHojyoKbn2.Checked) or       			 // 資産購入先、資産売却先、リース取引先採用区分の
                           (f1SHojyoKbn3.Checked)		   			 // どれか1つでもチェックされているか
						   )  and
						   (
						   (m_SisanSaiyoRec.SisanHojyoKbn1 = 0) and
						   (m_SisanSaiyoRec.SisanHojyoKbn2 = 0) and  // 元の得意先の登録で資産購入先、資産売却先、リース取引先採用区分の
						   (m_SisanSaiyoRec.SisanHojyoKbn3 = 0)      // いずれかひとつも採用していなかった
						   )  then
						begin
							fnforcedlyUpdAddress('MTOKUI_DEP');	 //資産の住所系を更新
						end;
//↑<2226>
//↑<207>
                    end;
// <MYN> ins -s
                    if bSw = True then
                    begin
// <MYN5> upd -s
//						if (f0MYNKbn.Text = MYN_KOJIN) and (f0MYNNo.Text <> '') then
						if (f0MYNKbn.Text = MYN_KOJIN) and (m_sSaveKojinKey <> '') then
// <MYN5> upd -e
						begin
							fnInsertMYN();
						end;
					end;

                    // 詳細画面の場合は_PAYの書き込みを行う
                    if bSw = True then
                    begin
                    	if (f0MYNKbn.Text <> '') then
						begin
	                        Close;
    	                    SQL.Clear;
        	                SQL.Add('UPDATE MTOKUI_PAY SET ');
							SQL.Add('PersonKbn = :PersonKbn, ');
                	      	SQL.Add('  UpdTantoNCode = ' + FloatToStr(m_TantoNCode) +   // 処理者
                    	            'WHERE BaseNCode = ' + FloatToStr(uvNCODE));

							ParamByName('PersonKbn').AsInteger	:= uvTmpPersonKbn;

	                        // SQL実行
    	                    if not lfnExecSql then Exit;
						end;
					end;
// <MYN> ins -e
				end
				else
                begin
					{新規追加}
                    SQL.Add(' insert into MTOKUI '+
                            ' (GCODE        , UpdTantoNCode , ' +  //<128>
                            ' Renso         , NM            , ' +
                            ' NMK           , SumKbn        , ' +
                            ' HojyoKbn1     , HojyoKbn2     , ' +
                            ' SisanHojyoKbn1, SisanHojyoKbn2, ' +  //<158>
                            ' SisanHojyoKbn3, TStartDate    , ' +
                            ' TEndDate        ');

                    // 詳細からの場合
                    if bSw = True then
                    begin
// <MYN> ins -s
						sSQL_MYN	:= 		'';
						if (f0MYNKbn.Text = MYN_HOUJIN) or (f0MYNKbn.Text = MYN_KOJIN) then
						begin
							sSQL_MYN	:= sSQL_MYN + ' HoujinNo      , ';

							if (m_iAccType = MYNACCESS_TYPE_ALL) then
								sSQL_MYN	:= sSQL_MYN	+ ' KojinKey      , ';
						end;
// <MYN> ins -e
                        SQL.Add(',KEISYOKBN     , FKANA         , ' +
                                ' ADS1          , ADS2          , ' +
                                ' PostNo1       , PostNo2       , ' +
                                ' TEL1          , TEL2          , ' +
                                ' FAX1          , DHYONM1       , ' +
                                ' DHYONM2       , HPAddress     , ' +
                                ' GyoNCode      , ' +
//<226> ↓
                                ' CountryKbn    , CurrencyNCode , ' +
//<226> ↑
// <MYN> ins -s
                                ' HoujinKbn     , ' +
								sSQL_MYN +
// <MYN> ins -e
                                ' ShihonKin     , Nensyo        , ' +
                                ' SyainSu       , ' +
//                        ' HojyoKbn1     , ' +
//                        ' HojyoKbn2     , ' +
                                ' RCloseDay1    , RCloseDay2    , ' +
                                ' RCloseDay3    , RcvMonth1     , ' +
                                ' RcvMonth2     , RcvMonth3     , ' +
                                ' RcvDay1       , RcvDay2       , ' +
                                ' RcvDay3       , RHolidayKbn1  , ' +
                                ' RHolidayKbn2  , RHolidayKbn3  , ' +
                                ' REndKaisu     , PCloseDay1    , ' +
                                ' PCloseDay2    , PCloseDay3    , ' +
                                ' PayMonth1     , PayMonth2     , ' +
                                ' PayMonth3     , PayDay1       , ' +
                                ' PayDay2       , PayDay3       , ' +
                                ' PHolidayKbn1  , PHolidayKbn2  , ' +
                                ' PHolidayKbn3  , PEndKaisu,    ');
// <WF>↓
                                            // WF入力ﾁｪｯｸOK & 入力ありの場合(与信限度額)
                        if m_recOther.CanInsert and m_recOther.YsGKinFlg then
                            SQL.Add('YsGKin, ');
// <WF>↑
                        // ﾌﾘｰ項目の登録 <102>
// <267> ins -s
			            if uvCopyMtokui then	// ｺﾋﾟｰ詳細の場合
							UpdFreeFlg	:= True;	// 下記ﾌﾘｰ項目を登録する
// <267> ins -e

                        if UpdFreeFlg then
                        begin
                            // 文字項目
                            SQL.Add('VFree1,VFree2,VFree3,VFree4,VFree5,  ');
                            SQL.Add('VFree6,VFree7,VFree8,VFree9,VFree10, ');
                            // 数値項目
                            SQL.Add('NFree1,NFree2,NFree3,NFree4,NFree5,  ');
                            SQL.Add('NFree6,NFree7,NFree8,NFree9,NFree10, ');
                            // 日付項目
{↓<213>
                            if freeItem.DFree1 > 0 then
                                SQL.Add('DFree1,  ');
                            if freeItem.DFree2 > 0 then
                                SQL.Add('DFree2,  ');
                            if freeItem.DFree3 > 0 then
                                SQL.Add('DFree3,  ');
↑<213>}
//↓<213> インサートするフィールドとしては、常に用意することにする。
                            SQL.Add('DFree1,DFree2,DFree3,  ');
//↑<213>
                        end;

                        // ｾｸﾞﾒﾝﾄ
                        SQL.Add(' SegNCode1     , SegNCode2     , ' +
                                ' SegNCode3     , SegNCode4     , ' +
                                ' SegNCode5     , SegNCode6     , ' +
                                ' SegNCode7     , SegNCode8     , ' +
                                ' SegNCode9     , SegNCode10      ');
                    end;

                    SQL.Add(' ) values    ' +
                            ' (:CODE        , :UPDTANTO     , ' +   //<128>
                            ' :Renso        , :NM           , ' +
                            ' :NMK          , :SumKbn       , ' +
(*
                        ' :SisanHojyoKbn1, ' +  //<158>
                        ' :SisanHojyoKbn2, ' +  //<158>
                        ' :HojyoKbn1     , ' +
                        ' :HojyoKbn2       ');
*) //<172>
                            ' :HojyoKbn1    , :HojyoKbn2    , ' +   // <172>
                            ' :SisanHojyoKbn1,:SisanHojyoKbn2,' +   // <158><172>
                            ' :SisanHojyoKbn3 ');   // <195>

                    // 詳細からの場合
                    if bSw = True then
                    begin
// <MYN> ins -s
						sSQL_MYN	:= '';
						if (f0MYNKbn.Text = MYN_HOUJIN) or (f0MYNKbn.Text = MYN_KOJIN) then
						begin
							sSQL_MYN	:= sSQL_MYN + ' :HoujinNo     , ';

							if (m_iAccType = MYNACCESS_TYPE_ALL) then
								sSQL_MYN	:= sSQL_MYN + ' :KojinKey     , ';
						end;
// <MYN> ins -e
                        SQL.Add(',:TStartDate   , :TEndDate     , ' +
                                ' :KEISYOKBN    , :FKANA        , ' +
                                ' :ADS1         , :ADS2         , ' +
                                ' :PostNo1      , :PostNo2      , ' +
                                ' :TEL1         , :TEL2         , ' +
                                ' :FAX1         , :DHYONM1      , ' +
                                ' :DHYONM2      , :HPAddress    , ' +
                                ' :GyoNCode     , ' +
//<226> ↓
                                ' :CountryKbn   , :CurrencyNCode, ' +
//<226> ↑
// <MYN> ins -s
                                ' :HoujinKbn   , ' +
								sSQL_MYN +
// <MYN> ins -e
                                ' :ShihonKin    , :Nensyo       , ' +
                                ' :SyainSu      , ' +
//                        ' :HojyoKbn1    , ' +
//                        ' :HojyoKbn2    , ' +
                                ' :RCloseDay1   , :RCloseDay2   , ' +
                                ' :RCloseDay3   , :RcvMonth1    , ' +
                                ' :RcvMonth2    , :RcvMonth3    , ' +
                                ' :RcvDay1      , :RcvDay2      , ' +
                                ' :RcvDay3      , :RHolidayKbn1 , ' +
                                ' :RHolidayKbn2 , :RHolidayKbn3 , ' +
                                ' :REndKaisu    , :PCloseDay1   , ' +
                                ' :PCloseDay2   , :PCloseDay3   , ' +
                                ' :PayMonth1    , :PayMonth2    , ' +
                                ' :PayMonth3    , :PayDay1      , ' +
                                ' :PayDay2      , :PayDay3      , ' +
                                ' :PHolidayKbn1 , :PHolidayKbn2 , ' +
                                ' :PHolidayKbn3 , :PEndKaisu    , ');
// <WF>↓
                                            // WF入力ﾁｪｯｸOK & 入力ありの場合(与信限度額)
                        if m_recOther.CanInsert and m_recOther.YsGKinFlg then
                            SQL.Add(' :YsGKin, ');
// <WF>↑
                        // ﾌﾘｰ項目の登録 <102>
                        if UpdFreeFlg then
                        begin
                            // 文字項目
                            SQL.Add(' :VFree1,:VFree2,:VFree3,:VFree4,:VFree5,  ');
                            SQL.Add(' :VFree6,:VFree7,:VFree8,:VFree9,:VFree10, ');
                            // 数字項目
                            SQL.Add(' :NFree1,:NFree2,:NFree3,:NFree4,:NFree5,  ');
                            SQL.Add(' :NFree6,:NFree7,:NFree8,:NFree9,:NFree10, ');
                            // 日付項目
{↓<213>
                            if freeItem.DFree1 > 0 then
                                SQL.Add(' :DFree1,  ');
                            if freeItem.DFree2 > 0 then
                                SQL.Add(' :DFree2,  ');
                            if freeItem.DFree3 > 0 then
                                SQL.Add(' :DFree3,  ');
↑<213>}
//↓<213> バインド変数としては、常に用意することにする。
                            SQL.Add(' :DFree1,:DFree2,:DFree3,  ');
//↑<213>
                        end;

                        // ｾｸﾞﾒﾝﾄ
                        SQL.Add(' :SegNCode1    , :SegNCode2    , ' +
                                ' :SegNCode3    , :SegNCode4    , ' +
                                ' :SegNCode5    , :SegNCode6    , ' +
                                ' :SegNCode7    , :SegNCode8    , ' +
                                ' :SegNCode9    , :SegNCode10     ');
                    end
                    else
                        SQL.Add(',:TStartDate   ,:TEndDate       ');
                    SQL.Add(' )           ');

                    // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                    lfnParamSet(1);

                    // 一覧からの場合 適用期間のﾃﾞﾌｫﾙﾄ値をｾｯﾄする
                    if bSw = False then
                    begin
                        ParamByName('TStartDate') .AsDateTime := m_cJNTArea.getDefDate(1);
                        ParamByName('TEndDate')   .AsDateTime := m_cJNTArea.getDefDate(2);
                    end;
                    // SQL実行
                    if not lfnExecSql then Exit;

                    // 内部ｺｰﾄﾞ取得
                    Close;
                    Sql.Clear;
                    Sql.Add('select @@identity NCODE from MTOKUI');
                    Open;

                    uvNCODE := 0;
                    if Not Eof then
                        uvNCODE := FieldByName('NCODE').asFloat;


                    //===== 取引先(会計)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_MAS '+
                            ' (BaseNCode    , UpdTantoNCode , ' +  //<128>
                            ' TCreditCash   , SDebitCash      ');

                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(',PostNo1       , PostNo2       , ' +
                                ' ADS1          , ADS2          , ' +
                                ' TEL1          , TEL2          , ' +
                                ' FAX1          , TanNm         , ' +
                                ' DrawerDraft1  , DrawerDraft2    ');
                    end;
                    SQL.Add(' ) values        ' +
                            ' (:BaseNCode   , :UPDTANTO     , ' +   //<128>
                            ' 0             , 0               ');

                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(',:PostNo1      , :PostNo2      , ' +
                                ' :ADS1         , :ADS2         , ' +
                                ' :TEL1         , :TEL2         , ' +
                                ' :FAX1         , ''''          , ' +
                                ' ''''          , ''''            ');
                    end;
                    SQL.Add(' )           ');
                    // ﾊﾟﾗﾒｰﾀの設定
                    lfnParamSet(2);
                    // SQL実行
                    if not lfnExecSql then Exit;

                    //===== 取引先(販売)にInsert =====
                    // 詳細からの場合
                    if bSw = True then
                    begin
                        // 得意先
//↓<Rel>採用に関わらず、新規追加時は販売のレコードは常に作る
//                        if f1TSKBN.Checked then
//                        begin
//↑<Rel>
                            SQL.Clear;
                            SQL.Add(' Insert into MTOKUI_SEL ' +
                                    ' (BaseNCode     , UpdTantoNCode  , ' +  //<128>
                                    ' RecKBN         , MASKBN         , ' +
                                    ' UsKinKbn       , PostNo1        , ' +
                                    ' PostNo2        , ADS1           , ' +
                                    ' ADS2           , TEL1           , ' +
                                    ' TEL2           , FAX1           , ' +
                                    ' SectionName    , TanNm          , ' +
//                                  ' Memo1          , ' +
                                    ' RZuiSSite      , TRSEIKBN       , ' +
                                    ' RTSEINO        , RHolidayKbn    , ' +
                                    ' SeiNCode       , URKINHSUKBN    , ' +
                                    ' GRUZSEIKBN     , ZSEIKBN        , ' +
                                    ' ZHSUKBN        , ZHSUTNIKBN     , ' +
                                    ' TRIHIKIKBN     , NMKBN          , ' +
                                    ' SSHCDKBN       , SSHCDKET       , ' +
                                    ' YYKBN          , DAINMKBN       , ' +
                                    ' USDENPFM       , MITPFM         , ' +
                                    ' JHDENPFM       , SNDENPFM       , ' +
                                    ' USGKEI         , JYGKEI         , ' +
                                    ' SOFOPFM        , ' +
//↓<214>
                                    ' TNKRNK         , KAKERT         , ' +
//↑<214>
                                    ' SSSYOPFM      , SSSYOKGM      , ' +
                                    ' BMNCODE       , TNNCODE       , ' +
                                    ' RYOPfm        , RYOTEKI       , ' +
                                    ' SYURYOKBN     , Memo1         , ' +
                                    ' Memo2         , HBunNCode1    , ' +
                                    ' HBunNCode2    , BunruiNCode1   , ' +
                                    ' BunruiNCode2   , BunruiNCode3   , ' +
                                    ' BunruiNCode4   , BunruiNCode5   , ' +
                                    ' BunruiNCode6   , BunruiNCode7   , ' +
                                    ' BunruiNCode8   , BunruiNCode9   , ' +
//<1719> Upd-s
//                                    ' BunruiNCode10)   ' +
                                    ' BunruiNCode10   , ' +
                                    ' KUSGKei   , KUSDenPfm   , ' +
                                    ' KMitPfm   , KJHDenPfm   ) ' +
//<1719> Upd-e
                                    ' values           ' +
                                    ' (:BaseNCode    , :UPDTANTO      , ' +   //<128>
                                    ' 1              , ' +
                                    lfnCnvMasKbn(f1TKBN.text) + //<Rel>常に_SELを作るようにしたため、f1TKBN.textが空のことがあるので、lfnCnvMasKbnで変換する。
                                    '                , ' +
                                    ' 1              , :PostNo1       , ' +
                                    ' :PostNo2       , :ADS1          , ' +
                                    ' :ADS2          , :TEL1          , ' +
                                    ' :TEL2          , :FAX1          , ' +
                                    ' ''''           , ''''           , ' +
//                                ' ''''           , ' +
                                    ' :RZuiSSite     , :TRSEIKBN      , ' +
                                    ' :RTSEINO       , :RHolidayKbn   , ' +
                                    ' :SeiNCode      , ' +
                                    IntToStr(uvTmpURKINHSUKBN) + ', ' +
                                    IntToStr(uvTmpGRUZSEIKBN ) + ', ' +
                                    IntToStr(uvTmpZSEIKBN    ) + ', ' +
                                    IntToStr(uvTmpZHSUKBN    ) + ', ' +
                                    IntToStr(uvTmpZHSUTNIKBN ) + ', ' +
// <WF>↓
//                                  IntToStr(uvTmpTRIHIKIKBN ) + ', ' +
                                    '');
                        // WF入力ﾁｪｯｸOK & 入力ありの場合(取引区分)
                        if m_recOther.CanInsert and m_recOther.TrihikiKbnFlg then
                            SQL.Add(IntToStr(m_recOther.TrihikiKbn) + ', ')
                        else                // そうでなければﾃﾝﾌﾟﾚｰﾄ値
                            SQL.Add(IntToStr(uvTmpTRIHIKIKBN ) + ', ');
// <WF>↑
                        SQL.Add(IntToStr(uvTmpNMKBN      ) + ', ' +
                                IntToStr(uvTmpSSHCDKBN   ) + ', ' +
                                IntToStr(uvTmpSSHCDKET   ) + ', ' +
                                IntToStr(uvTmpYYKBN      ) + ', ' +
                                IntToStr(uvTmpDAINMKBN   ) + ', ' +
                                IntToStr(uvTmpUSDENPFM   ) + ', ' +
                                IntToStr(uvTmpMITPFM     ) + ', ' +
                                IntToStr(uvTmpJHDENPFM   ) + ', ' +
                                IntToStr(uvTmpSNDENPFM   ) + ', ' +
                                IntToStr(uvTmpUSGKEI     ) + ', ' +
                                IntToStr(uvTmpJYGKEI     ) + ', ' +
                                IntToStr(uvTmpSOFOPFM    ) + ', ' +
//↓<214>
                                IntToStr  (uvTmpTnkRnk   ) + ', ' +
                                FloatToStr(uvTmpKakeRt   ) + ', ' +
//↑<214>
                                IntToStr(uvTmpSSDENPFM   ) + ', ' +
                                IntToStr(uvTmpSSGKEI     ) + ', ' +
// <WF>↓
//                                FloatToStr(uvTmpBMCODE   ) + ', ' +
//                                FloatToStr(uvTmpTNCODE   ) + ', ' +
                                '');
                                            // WF入力ﾁｪｯｸOK & 入力ありの場合(部門)
                        if m_recOther.CanInsert and m_recOther.BmNCodeFlg then
                            SQL.Add(FloatToStr(m_recOther.BmNCode) + ', ')
                        else
                            SQL.Add(FloatToStr(uvTmpBMCODE   ) + ', ');
                                            // WF入力ﾁｪｯｸOK & 入力ありの場合(担当者)
                        if m_recOther.CanInsert and m_recOther.TnNCodeFlg then
                            SQL.Add(FloatToStr(m_recOther.TnNCode) + ', ')
                        else
                            SQL.Add(FloatToStr(uvTmpTNCODE   ) + ', ');
// <WF>↑
                        SQL.Add(IntToStr(uvTmpRYOPFM     ) + ', ' +
                                IntToStr(uvTmpRYOTEKI    ) + ', ' +
                                IntToStr(uvTmpSYURYOKBN  ) + ', ' +
                                '''' + uvTmpCmt1 + ''', ' +
                                '''' + uvTmpCmt2 + ''', ' +
                                FloatToStr(uvTmpKKBN1  ) + ', ' +
                                FloatToStr(uvTmpKKBN2  ) + ', ' +
                                ' :BunruiNCode1  , :BunruiNCode2  , ' +
                                ' :BunruiNCode3  , :BunruiNCode4  , ' +
                                ' :BunruiNCode5  , :BunruiNCode6  , ' +
                                ' :BunruiNCode7  , :BunruiNCode8  , ' +
//<1719> Upd-s
//                                ' :BunruiNCode9  , :BunruiNCode10)  ');
                                ' :BunruiNCode9  , :BunruiNCode10 , ' +
                                IntToStr(uvTmpKUSGKei   ) + ', ' +
                                IntToStr(uvTmpKUSDenPfm ) + ', ' +
                                IntToStr(uvTmpKMitPfm   ) + ', ' +
                              IntToStr(uvTmpKJHDenPfm ) + ') ' );
//<1719> Upd-e

                            // ﾊﾟﾗﾒｰﾀの設定
//<2257>                            lfnParamSet(3);
                            lfnParamSet(5);	//<2257>
                            // SQL実行


                           if not lfnExecSql then Exit;
//<Rel>                        end;

                        // 仕入先
//↓<Rel>採用に関わらず、新規追加時は販売のレコードは常に作る
//                        if f1SSKBN.Checked then
//                        begin
//↑<Rel>
                            SQL.Clear;
                            SQL.Add(' insert into MTOKUI_SEL ' +
                                    ' (BaseNCode    , UpdTantoNCode , ' +  //<128>
                                    ' RecKBN        , MasKBN        , ' +
                                    ' UsKinKbn      , PostNo1       , ' +
                                    ' PostNo2       , ADS1          , ' +
                                    ' ADS2          , TEL1          , ' +
                                    ' TEL2          , FAX1          , ' +
                                    ' SectionName   , TanNm         , ' +
//                                ' Memo1         , ' +
                                    ' RZuiSSite     , RTSEINO       , ' +
                                    ' TRSEIKBN      , RHolidayKbn   , ' +
                                    ' SeiNCode      , URKINHSUKBN    , ' +
                                    ' GRUZSEIKBN    , ZSEIKBN        , ' +
                                    ' ZHSUKBN       , ZHSUTNIKBN     , ' +
                                    ' TRIHIKIKBN    , NMKBN          , ' +
                                    ' SSHCDKBN      , SSHCDKET       , ' +
                                    ' YYKBN         , DAINMKBN       , ' +
                                    ' USDENPFM      , JHDENPFM       , ' +
                                    ' SNDENPFM      , USGKEI         , ' +
//↓<214>
                                    ' TNKRNK        , KAKERT         , ' +
//↑<214>
                                    ' SSSYOPFM      , SSSYOKGM      , ' +
                                    ' BMNCODE       , TNNCODE       , ' +
                                    ' Memo1         , Memo2         , ' +
                                    ' HBunNCode1    , HBunNCode2    , ' +
                                    ' BunruiNCode1  , BunruiNCode2  , ' +
                                    ' BunruiNCode3  , BunruiNCode4  , ' +
                                    ' BunruiNCode5  , BunruiNCode6  , ' +
                                    ' BunruiNCode7  , BunruiNCode8  , ' +
//<1719> Upd-s
//                                    ' BunruiNCode9  , BunruiNCode10 ) ' +
                                    ' BunruiNCode9  , BunruiNCode10 , ' +
                                    ' KUSGKei       , KUSDenPfm     , ' +
                                    ' KMitPfm       , KJHDenPfm     ) ' +
//<1719> Upd-e
                                    ' values          ' +
                                    ' (:BaseNCode   , :UPDTANTO     , ' +   //<128>
                                    ' 2             , ' +
                                    lfnCnvMasKbn(f1SKBN.text) + //<Rel>常に_SELを作るようにしたため、f1SKBN.textが空のことがあるので、lfnCnvMasKbnで変換する。
                                    '               , ' +
                                    ' 1             , :PostNo1      , ' +
                                    ' :PostNo2      , :ADS1         , ' +
                                    ' :ADS2         , :TEL1         , ' +
                                    ' :TEL2         , :FAX1         , ' +
                                    ' ''''          , ''''          , ' +
//                                ' ''''          , ' +
                                    ' :RZuiSSite    , :RTSEINO      , ' +
                                    ' :TRSEIKBN     , :RHolidayKbn  , ' +
                                    ' :SeiNCode     , ' +
                                    IntToStr(uvTmpURKINHSUKBN_SI) + ', ' +
//<226>↓
                                    IntToStr(lvGRUZSEIKBN_SI ) + ', ' +
                                    IntToStr(lvZSEIKBN_SI    ) + ', ' +
//<226>↑
                                    IntToStr(uvTmpZHSUKBN_SI    ) + ', ' +
                                    IntToStr(uvTmpZHSUTNIKBN_SI ) + ', ' +
// <WF>↓
//                                IntToStr(uvTmpTRIHIKIKBN_SI ) + ', ' +
                                    '');
                        // WF入力ﾁｪｯｸOK & 入力ありの場合(取引区分)
                        if m_recOther.CanInsert and m_recOther.TrihikiKbnFlg then
                            SQL.Add(IntToStr(m_recOther.TrihikiKbn) + ', ')
                        else
                            SQL.Add(IntToStr(uvTmpTRIHIKIKBN_SI ) + ', ');
// <WF>↑
                        SQL.Add(IntToStr(uvTmpNMKBN_SI      ) + ', ' +
                                IntToStr(uvTmpSSHCDKBN_SI   ) + ', ' +
                                IntToStr(uvTmpSSHCDKET_SI   ) + ', ' +
                                IntToStr(uvTmpYYKBN_SI      ) + ', ' +
                                IntToStr(uvTmpDAINMKBN_SI   ) + ', ' +
                                IntToStr(uvTmpUSDENPFM_SI   ) + ', ' +
                                IntToStr(uvTmpJHDENPFM_SI   ) + ', ' +
                                IntToStr(uvTmpSNDENPFM_SI   ) + ', ' +
                                IntToStr(uvTmpUSGKEI_SI     ) + ', ' +
//↓<214>
                                IntToStr  (uvTmpTnkRnk_Si   ) + ', ' +
                                FloatToStr(uvTmpKakeRt_Si   ) + ', ' +
//↑<214>
                                IntToStr(uvTmpSSDENPFM_Si   ) + ', ' +
                                IntToStr(uvTmpSSGKEI_Si     ) + ', ' +
// <WF>↓
//                                FloatToStr(uvTmpBMCODE_Si   ) + ', ' +
//                                FloatToStr(uvTmpTNCODE_Si   ) + ', ' +
                                '');
                                            // WF入力ﾁｪｯｸOK & 入力ありの場合(部門)
                        if m_recOther.CanInsert and m_recOther.BmNCodeFlg then
                            SQL.Add(FloatToStr(m_recOther.BmNCode) + ', ')
                        else
                            SQL.Add(FloatToStr(uvTmpBMCODE_Si   ) + ', ');
                                            // WF入力ﾁｪｯｸOK & 入力ありの場合(担当者)
                        if m_recOther.CanInsert and m_recOther.TnNCodeFlg then
                            SQL.Add(FloatToStr(m_recOther.TnNCode) + ', ')
                        else
                            SQL.Add(FloatToStr(uvTmpTNCODE_Si   ) + ', ');
// <WF>↑
                        SQL.Add('''' + uvTmpCmt1_Si + ''', ' +
                                '''' + uvTmpCmt2_Si + ''', ' +
                                FloatToStr(uvTmpKKBN1_Si  ) + ', ' +
                                FloatToStr(uvTmpKKBN2_Si  ) + ', ' +
                                ' :BunruiNCode1 , :BunruiNCode2 , ' +
                                ' :BunruiNCode3 , :BunruiNCode4 , ' +
                                ' :BunruiNCode5 , :BunruiNCode6 , ' +
                                ' :BunruiNCode7 , :BunruiNCode8 , ' +
//<1719> Upd-s
//                                ' :BunruiNCode9 , :BunruiNCode10) ');
                                ' :BunruiNCode9 , :BunruiNCode10 , ' +
                                IntToStr(uvTmpKUSGKei_Si   ) + ', ' +
                                IntToStr(uvTmpKUSDenPfm_Si ) + ', ' +
                                IntToStr(uvTmpKMitPfm_Si   ) + ', ' +
                              IntToStr(uvTmpKJHDenPfm_Si ) + ') ' );
//<1719> Upd-e
                            // ﾊﾟﾗﾒｰﾀの設定
//<2257>                            lfnParamSet(4);
                            lfnParamSet(6);	//<2257>
                            // SQL実行
                            if not lfnExecSql then Exit;
//<Rel>                        end;
                    end;

                    //===== 取引先(支払)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_PAY ' +
                            ' (BaseNCode    , UpdTantoNCode , ' +  //<128>
                            ' PostNo1       , PostNo2       , ' +
                            ' ADS1          , ADS2          , ' +
                            ' TEL1          , TEL2          , ' +
                            ' FAX1          , SectionName   , ' +
// <238> MOD-STR
//                          ' MailAddress   , LetterKBN)      ' +
                            ' MailAddress   , LetterKbn     , ' +
                            ' GensenUseKbn  , PersonKbn)      ' +
// <238> MOD-END
                            ' values          ' +
                            ' (:BaseNCode   , :UPDTANTO       ');  //<128>

                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(',:PostNo1      , :PostNo2      , ' +
                                ' :ADS1         , :ADS2         , ' +
                                ' :TEL1         , :TEL2         , ' +
                                ' :FAX1         , ''''          , ' +
// <238> MOD-STR
//                              ' ''''          , 0               ');
                                ' ''''          , ' + IntToStr(uvTmpLetterKbn) + ', ' +
                                IntToStr(uvTmpGensenUseKbn) + ', ' + IntToStr(uvTmpPersonKbn));
// <238> MOD-END
                    end
                    else
                    begin
                        SQL.Add(',''''          , ''''          , ' +
                                ' ''''          , ''''          , ' +
                                ' ''''          , ''''          , ' +
                                ' ''''          , ''''          , ' +
// <238> MOD-STR
//                              ' ''''          , 0               ');
                                ' ''''          , ' + IntToStr(uvTmpLetterKbn) + ', ' +
                                IntToStr(uvTmpGensenUseKbn) + ', ' + IntToStr(uvTmpPersonKbn));
// <238> MOD-END
                    end;
                    SQL.Add(' )           ');

                    // ﾊﾟﾗﾒｰﾀの設定
//<2257>                    lfnParamSet(2);
                    lfnParamSet(3);	//<2257>
                    // SQL実行
                    if not lfnExecSql then Exit;

{ //<505_001>↓
                    //===== 取引先(債権)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_CRD '+
                            ' (BaseNCode    , UpdTantoNCode , ' +  //<128>
                            ' Ku            , TesuryoFutan    ');
                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(',PostNo1       , PostNo2       , ' +
                                ' ADS1          , ADS2          , ' +
                                ' TEL1          , TEL2          , ' +
                                ' FAX1            ');
                    end;
                    SQL.Add(' ) values (:BaseNCode   , :UPDTANTO       ' );   //<128>


                    // 詳細からの場合
                    if bSw = True then
                    begin

                        SQL.Add(',0             , 0             , ' +
                                ' :ADS1         , :ADS2         , ' +
                                ' :TEL1         , :TEL2         , ' +
                                ' :FAX1           ');

                    end;
                    else
                        SQL.Add(',0,0 ');
                    SQL.Add(' )           ');
}

                    //===== 取引先(債権)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_CRD '+
                            ' (BaseNCode    , UpdTantoNCode    ');
                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(',PostNo1       , PostNo2       , ' +
                                ' ADS1          , ADS2          , ' +
                                ' TEL1          , TEL2          , ' +
                                ' FAX1            ');
                    end;
                    SQL.Add(' ) values (:BaseNCode   , :UPDTANTO       ' );   //<128>

                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(', :PostNo1     , :PostNo2      , ' +
                                ' :ADS1         , :ADS2         , ' +
                                ' :TEL1         , :TEL2         , ' + //<206>
                                ' :FAX1           '); //<206>
                    end;
                    SQL.Add(' )           ');
//<505_001>↑

                    // ﾊﾟﾗﾒｰﾀの設定
//<2257>                    lfnParamSet(2);
                    lfnParamSet(4);	//<2257>
                    // SQL実行
                    if not lfnExecSql then Exit;

                    // <158>ST--------------------------------------------------
                    //===== 取引先(資産情報)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_DEP '+
                            ' (BaseNCode    , UpdTantoNCode    ');
                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(',PostNo1       , PostNo2       , ' +
                                ' ADS1          , ADS2          , ' +
                                ' TEL1          , TEL2          , ' + //<206>
                                ' FAX1            '); //<206>
                    end;
                    SQL.Add(' ) values (:BaseNCode   , :UPDTANTO       ' );

                    // 詳細からの場合
                    if bSw = True then
                    begin
                        SQL.Add(', :PostNo1     , :PostNo2      , ' +
                                ' :ADS1         , :ADS2         , ' +
                                ' :TEL1         , :TEL2         , ' + //<206>
                                ' :FAX1           '); //<206>
                    end;
                    SQL.Add(' )           ');

                    // ﾊﾟﾗﾒｰﾀの設定
//<2257>                    lfnParamSet(5);
                    lfnParamSet(7);	//<2257>
                    // SQL実行
                    if not lfnExecSql then Exit;
                    // <158>ST--------------------------------------------------
// <MYN2> ins -s
                    if bSw = True then
                    begin
// <MYN5> upd -s
//						if (f0MYNKbn.Text = MYN_KOJIN) and (f0MYNNo.Text <> '') then
						if (f0MYNKbn.Text = MYN_KOJIN) and (m_sSaveKojinKey <> '') then
// <MYN5> upd -e
						begin
							fnInsertMYN();
						end;
					end;
// <MYN2> ins -e

                    m_NewRecord		:= TRUE;    // <165>
                end;

                // 詳細からの場合
                if bSw = True then
                begin
                    //=======================================================
                    // 得意先請求実績レコードの再作成
                    //=======================================================
                    if lvTUpd then
                    begin
                        // MTOKUI_Sを再作成 <103>
                        //------------------------------------
                        // 変更されているかﾁｪｯｸ
                        with uvData_Load do
                        begin
                            Bol             := (pvrSime1     = f1NClosingDay1.AsInteger);   // 締日1
                            if Bol then Bol := (pvrSime2     = f1NClosingDay2.AsInteger);   // 締日2
                            if Bol then Bol := (pvrSime3     = f1NClosingDay3.AsInteger);   // 締日3
                            if Bol then Bol := (pvrCycle1    = f1NMonth1.ItemIndex);        // ｻｲｸﾙ1
                            if Bol then Bol := (pvrCycle2    = f1NMonth2.ItemIndex);        // ｻｲｸﾙ2
                            if Bol then Bol := (pvrCycle3    = f1NMonth3.ItemIndex);        // ｻｲｸﾙ3
                            if Bol then Bol := (pvrKaisyu1   = f1NDay1.AsInteger);          // 回収日1
                            if Bol then Bol := (pvrKaisyu2   = f1NDay2.AsInteger);          // 回収日2
                            if Bol then Bol := (pvrKaisyu3   = f1NDay3.AsInteger);          // 回収日3
                            if Bol then Bol := (pvrZuiSite   = f1NSSite.AsInteger);         // 随時回収ｻｲﾄ
                            if Bol then Bol := (pvrTokuSeiNo = f1NSeino.AsInteger);		    // 特殊請求No

                            // 特殊→特殊に変更の場合は、MTOKUI_Sの再作成は行わない
                            if ((pvrSeiKbn = 1) and (uvSeiKbn = 1)) then
                                Bol := True;

                            // 随時→随時に変更の場合は、MTOKUI_Sの再作成は行わない
                            if ((pvrSeiKbn = 2) and (uvSeiKbn = 2)) then
                            begin
                                // _Sあり発生なしは_Sを削除する(再作成を実行させ削除させる)
                                // 入力が変更されている
                                if Bol = False then
                                begin
//↓<Rel>
                                    //グループ会計子社は全社DBへの接続とする
                                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
//<D10>									MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc7);
										gfnJNTSELSetDbName(StdProc7, m_SyncMaster.m_cPDBSelect);		//<D10>
//↑<Rel>
                                    // PRC_MA0130_013
                                    with StdProc7 do
                                    begin
										ParamByName('@pTRNCD').AsFloat := uvNCODE;			    // 得意先ｺｰﾄﾞ
                                        ExecProc;
                                        BolS	:= (ParamByName('@RET_S')     .AsInteger = -1);	// MTOKUI_S存在
                                        BolDen	:= (ParamByName('@RET_ZANHAS').AsInteger = -1);	// 残高または発生
                                    end;
                                    if (BolS = True) and (BolDen = False) then
                                        Bol := False
                                    else
                                        Bol := True;
                                end;
                            end;

                            // 再作成
                            if not Bol then
                            begin
//<Rel>                         MDataModule.SetDBInfoToQuery( dbCorp_Select, StdProc4 );	// DBとMQueryの接続
//↓<Rel>
                                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                                    //グループ会計子社は全社DBに対して更新する。
//<D10>								MDataModule.SetDBInfoToSProc( m_SyncMaster.m_cPDBSelect, StdProc4 )
									gfnJNTSELSetDbName(StdProc4, m_SyncMaster.m_cPDBSelect)		//<D10>
                                else
                                    //グループ会計子社以外は自社DBに対して更新する。
//<D10>								MDataModule.SetDBInfoToSProc( dbCorp_Select, StdProc4 );
									gfnJNTSELSetDbName(StdProc4, dbCorp_Select);		//<D10>
//↑<Rel>

                                // PRC_MA0130_103
                                with StdProc4 do
                                begin
									ParamByName('@pTRNCD').AsFloat		:= uvNCODE;			// 得意先ｺｰﾄﾞ
                                    ParamByName('@pSEIKBN_B').AsInteger := pvrSeiKbn;       // 変更前請求区分
                                    ParamByName('@pSEIKBN_A').AsInteger := uvSeiKbn;        // 変更後請求区分
                                    ExecProc;
                                    Bol := (ParamByName('@RETURN_VALUE').AsInteger = 0);
                                end;

                                if not Bol then
                                begin
//↓<Rel>
                                    // ﾛｰﾙﾊﾞｯｸ(破棄)    親会社DBのﾛｰﾙﾊﾞｯｸ
							        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
							            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
//↑<Rel>
                                    MDataModule.Rollback (dbCorp_Select);
                                    result := False;
                                    Exit;
                                end;
                            end;
                        end;
                    end;

                    //=======================================================
                    //仕入先請求実績レコードの再作成
                    //=======================================================
                    if lvSUpd then
                    begin
                        // MSIIRE_Sを再作成<103>
                        //------------------------------------
                        // 変更されているかチェック
                        with uvData_Load_S do
                        begin
                            Bol             := (pvrSime1     = f1SClosingDay1.AsInteger);   // 締日1
                            if Bol then Bol := (pvrSime2     = f1SClosingDay2.AsInteger);   // 締日2
                            if Bol then Bol := (pvrSime3     = f1SClosingDay3.AsInteger);   // 締日3
                            if Bol then Bol := (pvrCycle1    = f1SMonth1.ItemIndex);        // ｻｲｸﾙ1
                            if Bol then Bol := (pvrCycle2    = f1SMonth2.ItemIndex);        // ｻｲｸﾙ2
                            if Bol then Bol := (pvrCycle3    = f1SMonth3.ItemIndex);        // ｻｲｸﾙ3
                            if Bol then Bol := (pvrKaisyu1   = f1SDay1.AsInteger);          // 回収日1
                            if Bol then Bol := (pvrKaisyu2   = f1SDay2.AsInteger);          // 回収日2
                            if Bol then Bol := (pvrKaisyu3   = f1SDay3.AsInteger);          // 回収日3
                            if Bol then Bol := (pvrZuiSite   = f1SSSite.AsInteger);         // 随時回収ｻｲﾄ
                            if Bol then Bol := (pvrTokuSeiNo = f1SSeino.AsInteger);		    // 特殊請求No

                            // 特殊→特殊に変更の場合は、MSIIRE_Sの再作成は行わない
                            if ((pvrSeiKbn = 1) and (uvSeiKbn_S = 1)) then
                                Bol := True;

                            //------------------------------------
                            // 随時→随時に変更の場合は、MSIIRE_Sの再作成は行わない
                            //------------------------------------
                            if ((pvrSeiKbn = 2) and (uvSeiKbn_S = 2)) then
                            begin
                                // _Sあり発生なしは_Sを削除する(再作成を実行させ削除させる)
                                // 入力が変更されている
                                if Bol = False then
                                begin
//↓<Rel>
                                    //グループ会計子社は全社DBへの接続とする
                                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
//<D10>									MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc7_S);
										gfnJNTSELSetDbName(StdProc7_S, m_SyncMaster.m_cPDBSelect);		//<D10>
//↑<Rel>
                                    // PRC_MA0150_013
                                    with StdProc7_S do
                                    begin
										ParamByName('@pTRNCD').AsFloat := uvNCODE;			    // 得意先ｺｰﾄﾞ
                                        ExecProc;
                                        BolS	:= (ParamByName('@RET_S')     .AsInteger = -1);	// MTOKUI_S存在
                                        BolDen	:= (ParamByName('@RET_ZANHAS').AsInteger = -1);	// 残高または発生
                                    end;
                                    if (BolS = True) and (BolDen = False) then
                                        Bol := False
                                    else
                                        Bol := True;
                                end;
                            end;

                            // 再作成
                            if not Bol then
                            begin
//<Rel>                         MDataModule.SetDBInfoToQuery( dbCorp_Select, StdProc4_S );	// DBとMQueryの接続
//↓<Rel>
                                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                                    //グループ会計子社は全社DBに対して更新する。
//<D10>								MDataModule.SetDBInfoToSProc( m_SyncMaster.m_cPDBSelect, StdProc4_S )
									gfnJNTSELSetDbName(StdProc4_S, m_SyncMaster.m_cPDBSelect)		//<D10>
                                else
                                    //グループ会計子社以外は自社DBに対して更新する。
//<D10>								MDataModule.SetDBInfoToSProc( dbCorp_Select, StdProc4_S );
									gfnJNTSELSetDbName(StdProc4_S, dbCorp_Select);		//<D10>
//↑<Rel>

                                // PRC_MA0130_103
                                with StdProc4_S do
                                begin
									ParamByName('@pTRNCD').AsFloat		:= uvNCODE;			// 得意先ｺｰﾄﾞ
                                    ParamByName('@pSEIKBN_B').AsInteger := pvrSeiKbn;       // 変更前請求区分
                                    ParamByName('@pSEIKBN_A').AsInteger := uvSeiKbn_S;      // 変更後請求区分
                                    ExecProc;
                                    Bol := (ParamByName('@RETURN_VALUE').AsInteger = 0);
                                end;

                                if not Bol then
                                begin
//↓<Rel>
                                    // ﾛｰﾙﾊﾞｯｸ(破棄)    親会社DBのﾛｰﾙﾊﾞｯｸ
							        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
							            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
//↑<Rel>
                                    MDataModule.Rollback(dbCorp_Select);
                                    result := False;
                                    Exit;
                                end;
                            end;
                        end;
                    end;
                end;
				// <197>
				fnSetZSeiKbn_Sel(1);
				fnSetZSeiKbn_Sel(2);

//↓<244>下からここに移動しました。
                // WF取込の場合
                if m_recOther.CanInsert then
                begin
//<243> ↓
                    // 何れかのフラグがTrueならInsertで申請書の振込先情報の登録行う
                    { // <247>↓ｺﾒﾝﾄｱｳﾄ
                    if m_recOther.BkBraNCodeFlg or                //振込先支店内部コード
                       m_recOther.AcckbnFlg or                    //預金種目
                       m_recOther.AccNoFlg or                     //口座番号
                       m_recOther.TransKanaNameFlg then           //カナ振込先名称
                    } // <247>↑
                    // <247>↓
                    if m_recOther.AccNCodeFlg or                  //振込依頼口座内部コード
                       m_recOther.BkBraNCodeFlg or                //振込先支店内部コード
                       m_recOther.AcckbnFlg or                    //預金種目
                       m_recOther.AccNoFlg or                     //口座番号
                       m_recOther.UketoriNameFlg or               //受取人名
                       m_recOther.TransKanaNameFlg or             //カナ振込先名称
                       m_recOther.ChargeFutanFlg or               //手数料負担
                       m_recOther.ChargeKbnFlg or                 //手数料計算区分
// <263> MOD-STR
//                     m_recOther.TransKbnFlg then                //振込方法
                       m_recOther.TransKbnFlg or                  //振込方法
                       m_recOther.EdiInfoFlg or                   // ＥＤＩ情報
                       m_recOther.AiteNo1Flg or                   // 顧客コード１
                       m_recOther.AiteNo2Flg or                   // 顧客コード２
                       m_recOther.FBSetFlg or                     // FBセット項目
                       m_recOther.AccAutoKbnFlg or                // 口座自動引落区分
                       m_recOther.AccAutoDataFlg then             // 自動引落支払データ
// <263> MOD-END
                    // <247>↑
                    begin
                    	//↓<244>登録申請の場合は、インサートのみです。
                        if m_recOther.CanUpdate = False then
                        begin
                        //↑<244>
                            //PayPtnInfoへInsert
                            SQL.Clear;
                            SQL.Add(' insert into PayPtnInfo    ' +
                                    ' (                         ' +
                                    '  MasterKbn,               ' +     // マスタ区分
                                    '  PayNCode,                ' +     // 支払先内部コード
                                    '  PayPtnNo,                ' +     // 条件パターンNo
                                    '  BmnNCode,                ' +     // 部門内部コード
                                    '  PrjNCode,                ' +     // プロジェクト内部コード
                                    '  PjSubNCode,              ' +     // プロジェクトサブ内部コード
                                    '  BunkaiKbn,               ' +     // 分解方法
                                    '  PriPayWay,               ' +     // 優先支払い方法
                                    '  RDelKbn,                 ' +     // 削除区分
                                 // '  UpdDateTM,               ' +     // 修正日付                   // <247>DBに任せる
                                 // '  InsDateTM,               ' +     // 登録日付                   // <247>DBに任せる
                                    '  UpdTantoNCode            ' +     // 処理者
                                    ' )                         ' +
                                    ' values                    ' +
                                    ' (                         ' +
                                    '  :MasterKbn,              ' +     // マスタ区分
                                    '  :PayNCode,               ' +     // 支払先内部コード
                                    '  :PayPtnNo,               ' +     // 条件パターンNo
                                    '  :BmnNCode,               ' +     // 部門内部コード
                                    '  :PrjNCode,               ' +     // プロジェクト内部コード
                                    '  :PjSubNCode,             ' +     // プロジェクトサブ内部コード
                                    '  :BunkaiKbn,              ' +     // 分解方法
                                    '  :PriPayWay,              ' +     // 優先支払い方法
                                    '  :RDelKbn,                ' +     // 削除区分
                                 // '  :UpdDateTM,              ' +     // 修正日付                    // <247>DBに任せる
                                 // '  :InsDateTM,              ' +     // 登録日付                    // <247>DBに任せる
                                    '  :UpdTantoNCode           ' +     // 処理者
                                    ' )                         ' );
                            ParamByName('MasterKbn').AsInteger      := 22;          //22:取引先(仕入先)
                            ParamByName('PayNCode').AsCurrency      := uvNCODE;
                            ParamByName('PayPtnNo').AsInteger       := 1;
                            ParamByName('BmnNCode').AsCurrency      := 0;
                            ParamByName('PrjNCode').AsCurrency      := 0;
                            ParamByName('PjSubNCode').AsCurrency    := 0;
                            ParamByName('BunkaiKbn').AsInteger      := 0;
                            ParamByName('PriPayWay').AsInteger      := 0;
                            ParamByName('RDelKbn').AsInteger        := 0;
                         // ParamByName('UpdDateTM').AsDateTime     := now;                             // <247>DBに任せる
                         // ParamByName('InsDateTM').AsDateTime     := now;                             // <247>DBに任せる
                            ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode;

                            // SQL実行
                            if not lfnExecSql then Exit;

                            //PayPtnDtlへInsert
                            SQL.Clear;
                            SQL.Add(' insert into PayPtnDtl     ' +
                                    ' (                         ' +
                                    '  MasterKbn,               ' +     // マスタ区分
                                    '  PayNCode,                ' +     // 支払い先内部コード
                                    '  JoukenNo,                ' +     // 条件明細No
                                    '  Houhou,                  ' +     // 支払い方法
                                    '  StdRitu,                 ' +     // 分解基準値
                                    '  MinKin,                  ' +     // 支払い最低額
                                    '  HasuuKin,                ' +     // 端数処理額
                                    '  HasuuHou,                ' +     // 端数処理方法
                                    '  RDelKbn,                 ' +     // 削除区分
                                 // '  UpdDateTM,               ' +     // 修正日付                      // <247>DBに任せる
                                 // '  InsDateTM,               ' +     // 登録日付                      // <247>DBに任せる
                                    '  UpdTantoNCode ,          ' +     // 処理者
                                    '  PayPtnNo                 ' +     // 条件パターンNo
                                    ' )                         ' +
                                    ' values                    ' +
                                    ' (                         ' +
                                    '  :MasterKbn,              ' +     // マスタ区分
                                    '  :PayNCode,               ' +     // 支払い先内部コード
                                    '  :JoukenNo,               ' +     // 条件明細No
                                    '  :Houhou,                 ' +     // 支払い方法
                                    '  :StdRitu,                ' +     // 分解基準値
                                    '  :MinKin,                 ' +     // 支払い最低額
                                    '  :HasuuKin,               ' +     // 端数処理額
                                    '  :HasuuHou,               ' +     // 端数処理方法
                                    '  :RDelKbn,                ' +     // 削除区分
                                 // '  :UpdDateTM,              ' +     // 修正日付                      // <247>DBに任せる
                                 // '  :InsDateTM,              ' +     // 登録日付                      // <247>DBに任せる
                                    '  :UpdTantoNCode,          ' +     // 処理者
                                    '  :PayPtnNo                ' +     // 条件パターンNo
                                    ' )                         ' );
                            ParamByName('MasterKbn').AsInteger      := 22;          //22:取引先(仕入先)
                            ParamByName('PayNCode').AsCurrency      := uvNCODE;
                            ParamByName('JoukenNo').AsInteger       := 1;
                            ParamByName('Houhou').AsInteger         := 1;           //1:振込
                            ParamByName('StdRitu').AsCurrency       := 100;         //100:基準値100
                            ParamByName('MinKin').AsCurrency        := 0;
                            ParamByName('HasuuKin').AsCurrency      := 0;
                            ParamByName('HasuuHou').AsInteger       := 0;
                            ParamByName('RDelKbn').AsInteger        := 0;
                         // ParamByName('UpdDateTM').AsDateTime     := now;                               // <247>DBに任せる
                         // ParamByName('InsDateTM').AsDateTime     := now;                               // <247>DBに任せる
                            ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode;
                            ParamByName('PayPtnNo').AsInteger       := 1;
                            // SQL実行
                            if not lfnExecSql then Exit;

                            //PayDetailInfoへInsert
                            SQL.Clear;
                            SQL.Add(' insert into PayDetailInfo ' +
                                    ' (                         ' +
                                    '  MasterKbn,               ' +     // マスタ区分
                                    '  PayNCode,                ' +     // 支払先内部コード
                                    '  ShiharaiSyubetu,         ' +     // 支払種別
                                    '  Edaban,                  ' +     // 枝番
                                    '  AccNCode,                ' +     // 依頼口座内部コード
                                    '  BkBraNCode,              ' +     // 振込先支店内部コード
                                    '  AccKbn,                  ' +     // 預金種目
                                    '  AccNo,                   ' +     // 口座番号
                                    '  AnserNo,                 ' +     // ANSER用口座番号
                                    '  UketoriName,             ' +     // 受取人名
                                    '  TransKanaName,           ' +     // カナ振込先名称
                                    '  ChargeKbn,               ' +     // 手数料計算区分
                                    '  ChargeFutan,             ' +     // 手数料負担
                                    '  TransKbn,                ' +     // 振込方法
                                    '  EdiInfo,                 ' +     // EDI情報
                                    '  AiteNo1,                 ' +     // 顧客コード1
                                    '  AiteNo2,                 ' +     // 顧客コード2
                                    '  FBSet,                   ' +     // FBセット項目
                                    '  Site,                    ' +     // サイト
                                    '  TegYusouKbn,             ' +     // 手形・小切手輸送区分
                                    '  TegYusouFutan,           ' +     // 手形・小切手輸送料負担区分
                                    '  TegBunkatuMax,           ' +     // 手形分割枚数
                                    '  Houhou,                  ' +     // 計算方法
                                    '  BaseKingaku,	            ' +     // 基準金額
                                    '  BaseHiritu,              ' +     // 基準比率
                                    '  HasuuKingaku,            ' +     // 端数処理額
                                    '  HasuuHou,                ' +     // 端数処理方法
                                    '  RDelKbn,                 ' +     // 削除区分
                                 // '  UpdDateTM,               ' +     // 修正日付                 // <247>DBに任せる
                                 // '  InsDateTM,               ' +     // 登録日付                 // <247>DBに任せる
                                    '  UpdTantoNCode,           ' +     // 処理者
                                    '  AccAutoKbn,              ' +     // 口座自動引落区分
                                    '  AccAutoData,             ' +     // 自動引落支払データ
                                    '  PayPtnNo                 ' +     // 条件パターンNo
                                    ' )                         ' +
                                    ' values                    ' +
                                    ' (                         ' +
                                    '  :MasterKbn,              ' +     // マスタ区分
                                    '  :PayNCode,               ' +     // 支払先内部コード
                                    '  :ShiharaiSyubetu,        ' +     // 支払種別
                                    '  :Edaban,                 ' +     // 枝番
                                    '  :AccNCode,               ' +     // 依頼口座内部コード
                                    '  :BkBraNCode,             ' +     // 振込先支店内部コード
                                    '  :AccKbn,                 ' +     // 預金種目
                                    '  :AccNo,                  ' +     // 口座番号
                                    '  :AnserNo,                ' +     // ANSER用口座番号
                                    '  :UketoriName,            ' +     // 受取人名
                                    '  :TransKanaName,          ' +     // カナ振込先名称
                                    '  :ChargeKbn,              ' +     // 手数料計算区分
                                    '  :ChargeFutan,            ' +     // 手数料負担
                                    '  :TransKbn,               ' +     // 振込方法
                                    '  :EdiInfo,                ' +     // EDI情報
                                    '  :AiteNo1,                ' +     // 顧客コード1
                                    '  :AiteNo2,                ' +     // 顧客コード2
                                    '  :FBSet,                  ' +     // FBセット項目
                                    '  :Site,                   ' +     // サイト
                                    '  :TegYusouKbn,            ' +     // 手形・小切手輸送区分
                                    '  :TegYusouFutan,          ' +     // 手形・小切手輸送料負担区分
                                    '  :TegBunkatuMax,          ' +     // 手形分割枚数
                                    '  :Houhou,                 ' +     // 計算方法
                                    '  :BaseKingaku,	        ' +     // 基準金額
                                    '  :BaseHiritu,             ' +     // 基準比率
                                    '  :HasuuKingaku,           ' +     // 端数処理額
                                    '  :HasuuHou,               ' +     // 端数処理方法
                                    '  :RDelKbn,                ' +     // 削除区分
                                 // '  :UpdDateTM,              ' +     // 修正日付                 // <247>DBに任せる
                                 // '  :InsDateTM,              ' +     // 登録日付                 // <247>DBに任せる
                                    '  :UpdTantoNCode,          ' +     // 処理者
                                    '  :AccAutoKbn,             ' +     // 口座自動引落区分
                                    '  :AccAutoData,            ' +     // 自動引落支払データ
                                    '  :PayPtnNo                ' +     // 条件パターンNo
                                    ' )                         ' );
                            ParamByName('MasterKbn').AsInteger          := 22;                      //22:取引先(仕入先)
                            ParamByName('PayNCode').AsCurrency          := uvNCODE;
                            ParamByName('ShiharaiSyubetu').AsInteger    := 1;                       //1:振込
                            ParamByName('Edaban').AsInteger             := 1;
                        //  ParamByName('AccNCode').AsCurrency          := 0;                       // 未対応  <247>ｺﾒﾝﾄｱｳﾄ
                            ParamByName('AccNCode').AsCurrency          := m_recOther.AccNCode;     // <247>
                            ParamByName('BkBraNCode').AsCurrency        := m_recOther.BkBraNCode;
// <263> ADD-STR
                            if not m_recOther.AcckbnFlg then
                                ParamByName('AccKbn').AsInteger             := 1                    // デフォルトは1.普通
                            else
// <263> ADD-END
                                ParamByName('AccKbn').AsInteger             := m_recOther.Acckbn;
                            ParamByName('AccNo').AsString               := m_recOther.AccNo;
                            ParamByName('AnserNo').AsString             := '';
                        //  ParamByName('UketoriName').AsString         := '';                      // 未対応  <247>ｺﾒﾝﾄｱｳﾄ
                            ParamByName('UketoriName').AsString         := m_recOther.UketoriName;  // <247>
                            ParamByName('TransKanaName').AsString       := m_recOther.TransKanaName;
                        //  ParamByName('ChargeKbn').AsInteger          := 0;                       // 未対応  <247>ｺﾒﾝﾄｱｳﾄ
                            ParamByName('ChargeKbn').AsInteger          := m_recOther.ChargeKbn;    // <247>
                        //  ParamByName('ChargeFutan').AsInteger        := 0;                       // 未対応  <247>ｺﾒﾝﾄｱｳﾄ
                            ParamByName('ChargeFutan').AsInteger        := m_recOther.ChargeFutan;  // <247>
                        //  ParamByName('TransKbn').AsInteger           := 0;                       // 未対応  <247>ｺﾒﾝﾄｱｳﾄ
                            ParamByName('TransKbn').AsInteger           := m_recOther.TransKbn;     // <247>
// <263> MOD-STR
//                          ParamByName('EdiInfo').AsString             := '';
//                          ParamByName('AiteNo1').AsString             := '';
//                          ParamByName('AiteNo2').AsString             := '';
                            ParamByName('EdiInfo').AsString             := m_recOther.EdiInfo;
                            ParamByName('AiteNo1').AsString             := fnAiteNoPading(m_recOther.AiteNo1);
                            ParamByName('AiteNo2').AsString             := fnAiteNoPading(m_recOther.AiteNo2);
                            if m_recOther.FBSetFlg then
                                ParamByName('FBSet').AsInteger              := m_recOther.FBSet
                            else
// <263> MOD-END
                                ParamByName('FBSet').AsInteger              := 2;                       //2: セットなし
                            ParamByName('Site').AsInteger               := 0;
                            ParamByName('TegYusouKbn').AsInteger        := 0;
                            ParamByName('TegYusouFutan').AsInteger      := 0;
                            ParamByName('TegBunkatuMax').AsInteger      := 0;
                            ParamByName('Houhou').AsInteger             := 0;
                            ParamByName('BaseKingaku').AsCurrency       := 0;
                            ParamByName('BaseHiritu').AsCurrency        := 0;
                            ParamByName('HasuuKingaku').AsCurrency      := 0;
                            ParamByName('HasuuHou').AsInteger           := 0;
                            ParamByName('RDelKbn').AsInteger            := 0;
                         // ParamByName('UpdDateTM').AsDateTime         := now;                     // <247>DBに任せる
                         // ParamByName('InsDateTM').AsDateTime         := now;                     // <247>DBに任せる
                            ParamByName('UpdTantoNCode').AsCurrency     := m_TantoNCode;
// <263> MOD-STR
//                          ParamByName('AccAutoKbn').AsInteger         := 0;
//                          ParamByName('AccAutoData').AsInteger        := 0;
                            ParamByName('AccAutoKbn').AsInteger         := m_recOther.AccAutoKbn;
                            ParamByName('AccAutoData').AsInteger        := m_recOther.AccAutoData;
// <263> MOD-END
                            ParamByName('PayPtnNo').AsInteger           := 1;

                            // SQL実行
                            if not lfnExecSql then Exit;

//↓<244>
                        end
                        else
                        begin
	                    	// 変更申請の場合

                            // PayPtnInfo 一件もない場合追加、一件でもあれば何もしない
                            lvCnt := 0;

                            Close;
                            SQL.Clear;
//<256> DEL                            SQL.Add('select count(*) as CNT from PayPtnInfo where MasterKbn = 22 and PayNCode = :PayNCode and PayPtnNo = 1');
                            SQL.Add('select count(PayNCode) as CNT from PayPtnInfo where MasterKbn = 22 and PayNCode = :PayNCode and PayPtnNo = 1');  //<256> ADD
                            ParamByName('PayNCode').AsString			:= FormatFloat('0',uvNCODE);  //<256> ADD
							Open;
                            if not EOF then
                            begin
                            	lvCnt := FieldByName('CNT').AsInteger;
                            end;

                            if lvCnt = 0 then
                            begin
                                // 一件もない場合、PayPtnInfoへInsert
                                Close;
                                SQL.Clear;
                                SQL.Add(' insert into PayPtnInfo    ' +
                                        ' (                         ' +
                                        '  MasterKbn,               ' +     // マスタ区分
                                        '  PayNCode,                ' +     // 支払先内部コード
                                        '  PayPtnNo,                ' +     // 条件パターンNo
                                        '  BmnNCode,                ' +     // 部門内部コード
                                        '  PrjNCode,                ' +     // プロジェクト内部コード
                                        '  PjSubNCode,              ' +     // プロジェクトサブ内部コード
                                        '  BunkaiKbn,               ' +     // 分解方法
                                        '  PriPayWay,               ' +     // 優先支払い方法
                                        '  RDelKbn,                 ' +     // 削除区分
                                     // '  UpdDateTM,               ' +     // 修正日付                       // <247>DBに任せる
                                     // '  InsDateTM,               ' +     // 登録日付                       // <247>DBに任せる
                                        '  UpdTantoNCode            ' +     // 処理者
                                        ' )                         ' +
                                        ' values                    ' +
                                        ' (                         ' +
                                        '  :MasterKbn,              ' +     // マスタ区分
                                        '  :PayNCode,               ' +     // 支払先内部コード
                                        '  :PayPtnNo,               ' +     // 条件パターンNo
                                        '  :BmnNCode,               ' +     // 部門内部コード
                                        '  :PrjNCode,               ' +     // プロジェクト内部コード
                                        '  :PjSubNCode,             ' +     // プロジェクトサブ内部コード
                                        '  :BunkaiKbn,              ' +     // 分解方法
                                        '  :PriPayWay,              ' +     // 優先支払い方法
                                        '  :RDelKbn,                ' +     // 削除区分
                                     // '  :UpdDateTM,              ' +     // 修正日付                        // <247>DBに任せる
                                     // '  :InsDateTM,              ' +     // 登録日付                        // <247>DBに任せる
                                        '  :UpdTantoNCode           ' +     // 処理者
                                        ' )                         ' );
                                ParamByName('MasterKbn').AsInteger      := 22;          //22:取引先(仕入先)
                                ParamByName('PayNCode').AsCurrency      := uvNCODE;
                                ParamByName('PayPtnNo').AsInteger       := 1;
                                ParamByName('BmnNCode').AsCurrency      := 0;
                                ParamByName('PrjNCode').AsCurrency      := 0;
                                ParamByName('PjSubNCode').AsCurrency    := 0;
                                ParamByName('BunkaiKbn').AsInteger      := 0;
                                ParamByName('PriPayWay').AsInteger      := 0;
                                ParamByName('RDelKbn').AsInteger        := 0;
                             // ParamByName('UpdDateTM').AsDateTime     := now;                                // <247>DBに任せる
                             // ParamByName('InsDateTM').AsDateTime     := now;                                // <247>DBに任せる
                                ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode;

                                // SQL実行
                                if not lfnExecSql then Exit;
                            end;

                            // PayPtnDtl の件数を取得します(JoukenNoを含めません)
                            lvCnt := 0;

                            Close;
                            SQL.Clear;
//<256> DEL                            SQL.Add('select count(*) as CNT from PayPtnDtl where MasterKbn = 22 and PayNCode = :PayNCode and PayPtnNo = 1');
                            SQL.Add('select count(PayNCode) as CNT from PayPtnDtl where MasterKbn = 22 and PayNCode = :PayNCode and PayPtnNo = 1');  //<256> ADD
                            ParamByName('PayNCode').AsString			:= FormatFloat('0',uvNCODE);  //<256> ADD
							Open;
                            if not EOF then
                            begin
                            	lvCnt := FieldByName('CNT').AsInteger;
                            end;


                            // PayPtnDtlが一件もない場合はPayPtnDtlを追加します。
                            if (lvCnt = 0) then
                            begin
                                //PayPtnDtlへInsert
                                Close;
                                SQL.Clear;
                                SQL.Add(' insert into PayPtnDtl     ' +
                                        ' (                         ' +
                                        '  MasterKbn,               ' +     // マスタ区分
                                        '  PayNCode,                ' +     // 支払い先内部コード
                                        '  JoukenNo,                ' +     // 条件明細No
                                        '  Houhou,                  ' +     // 支払い方法
                                        '  StdRitu,                 ' +     // 分解基準値
                                        '  MinKin,                  ' +     // 支払い最低額
                                        '  HasuuKin,                ' +     // 端数処理額
                                        '  HasuuHou,                ' +     // 端数処理方法
                                        '  RDelKbn,                 ' +     // 削除区分
                                     // '  UpdDateTM,               ' +     // 修正日付                        // <254>DBに任せる
                                     // '  InsDateTM,               ' +     // 登録日付                        // <254>DBに任せる
                                        '  UpdTantoNCode ,          ' +     // 処理者
                                        '  PayPtnNo                 ' +     // 条件パターンNo
                                        ' )                         ' +
                                        ' values                    ' +
                                        ' (                         ' +
                                        '  :MasterKbn,              ' +     // マスタ区分
                                        '  :PayNCode,               ' +     // 支払い先内部コード
                                        '  :JoukenNo,               ' +     // 条件明細No
                                        '  :Houhou,                 ' +     // 支払い方法
                                        '  :StdRitu,                ' +     // 分解基準値
                                        '  :MinKin,                 ' +     // 支払い最低額
                                        '  :HasuuKin,               ' +     // 端数処理額
                                        '  :HasuuHou,               ' +     // 端数処理方法
                                        '  :RDelKbn,                ' +     // 削除区分
                                     // '  :UpdDateTM,              ' +     // 修正日付                        // <247>DBに任せる
                                     // '  :InsDateTM,              ' +     // 登録日付                        // <247>DBに任せる
                                        '  :UpdTantoNCode,          ' +     // 処理者
                                        '  :PayPtnNo                ' +     // 条件パターンNo
                                        ' )                         ' );
                                ParamByName('MasterKbn').AsInteger      := 22;          //22:取引先(仕入先)
                                ParamByName('PayNCode').AsCurrency      := uvNCODE;
                                ParamByName('JoukenNo').AsInteger       := 1;
                                ParamByName('Houhou').AsInteger         := 1;           //1:振込
                                ParamByName('StdRitu').AsCurrency       := 100;         //100:基準値100
                                ParamByName('MinKin').AsCurrency        := 0;
                                ParamByName('HasuuKin').AsCurrency      := 0;
                                ParamByName('HasuuHou').AsInteger       := 0;
                                ParamByName('RDelKbn').AsInteger        := 0;
                             // ParamByName('UpdDateTM').AsDateTime     := now;                                // <247>DBに任せる
                             // ParamByName('InsDateTM').AsDateTime     := now;                                // <247>DBに任せる
                                ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode;
                                ParamByName('PayPtnNo').AsInteger       := 1;
                                // SQL実行
                                if not lfnExecSql then Exit;
                            end;

                            // PayDetailInfoは ShiharaiSyubetu=1:振込 が無かったらインサート、あったらアップデートする。
                            lvCnt := 0;

                            Close;
                            SQL.Clear;
//<256> DEL                            SQL.Add('select count(*) as CNT from PayDetailInfo where MasterKbn = 22 and PayNCode = :PayNCode and ShiharaiSyubetu = 1 and Edaban = 1 and PayPtnNo = 1');
                            SQL.Add('select count(PayNCode) as CNT from PayDetailInfo where MasterKbn = 22 and PayNCode = :PayNCode and ShiharaiSyubetu = 1 and Edaban = 1 and PayPtnNo = 1');  //<256> ADD
                            ParamByName('PayNCode').AsString			:= FormatFloat('0',uvNCODE);  //<256> ADD
							Open;
                            if not EOF then
                            begin
                            	lvCnt := FieldByName('CNT').AsInteger;
                            end;

                            if lvCnt = 0 then
                            begin
								// 無ければインサート
                                Close;
                                SQL.Clear;
                                SQL.Add(' insert into PayDetailInfo ' +
                                        ' (                         ' +
                                        '  MasterKbn,               ' +     // マスタ区分
                                        '  PayNCode,                ' +     // 支払先内部コード
                                        '  ShiharaiSyubetu,         ' +     // 支払種別
                                        '  Edaban,                  ' +     // 枝番
                                        '  AccNCode,                ' +     // 依頼口座内部コード
                                        '  BkBraNCode,              ' +     // 振込先支店内部コード
                                        '  AccKbn,                  ' +     // 預金種目
                                        '  AccNo,                   ' +     // 口座番号
                                        '  AnserNo,                 ' +     // ANSER用口座番号
                                        '  UketoriName,             ' +     // 受取人名
                                        '  TransKanaName,           ' +     // カナ振込先名称
                                        '  ChargeKbn,               ' +     // 手数料計算区分
                                        '  ChargeFutan,             ' +     // 手数料負担
                                        '  TransKbn,                ' +     // 振込方法
                                        '  EdiInfo,                 ' +     // EDI情報
                                        '  AiteNo1,                 ' +     // 顧客コード1
                                        '  AiteNo2,                 ' +     // 顧客コード2
                                        '  FBSet,                   ' +     // FBセット項目
                                        '  Site,                    ' +     // サイト
                                        '  TegYusouKbn,             ' +     // 手形・小切手輸送区分
                                        '  TegYusouFutan,           ' +     // 手形・小切手輸送料負担区分
                                        '  TegBunkatuMax,           ' +     // 手形分割枚数
                                        '  Houhou,                  ' +     // 計算方法
                                        '  BaseKingaku,	            ' +     // 基準金額
                                        '  BaseHiritu,              ' +     // 基準比率
                                        '  HasuuKingaku,            ' +     // 端数処理額
                                        '  HasuuHou,                ' +     // 端数処理方法
                                        '  RDelKbn,                 ' +     // 削除区分
                                     // '  UpdDateTM,               ' +     // 修正日付
                                     // '  InsDateTM,               ' +     // 登録日付
                                        '  UpdTantoNCode,           ' +     // 処理者
                                        '  AccAutoKbn,              ' +     // 口座自動引落区分
                                        '  AccAutoData,             ' +     // 自動引落支払データ
                                        '  PayPtnNo                 ' +     // 条件パターンNo
                                        ' )                         ' +
                                        '  values                   ' +
                                        ' (                         ' +
                                        '  :MasterKbn,              ' +     // マスタ区分
                                        '  :PayNCode,               ' +     // 支払先内部コード
                                        '  :ShiharaiSyubetu,        ' +     // 支払種別
                                        '  :Edaban,                 ' +     // 枝番
                                        '  :AccNCode,               ' +     // 依頼口座内部コード
                                        '  :BkBraNCode,             ' +     // 振込先支店内部コード
                                        '  :AccKbn,                 ' +     // 預金種目
                                        '  :AccNo,                  ' +     // 口座番号
                                        '  :AnserNo,                ' +     // ANSER用口座番号
                                        '  :UketoriName,            ' +     // 受取人名
                                        '  :TransKanaName,          ' +     // カナ振込先名称
                                        '  :ChargeKbn,              ' +     // 手数料計算区分
                                        '  :ChargeFutan,            ' +     // 手数料負担
                                        '  :TransKbn,               ' +     // 振込方法
                                        '  :EdiInfo,                ' +     // EDI情報
                                        '  :AiteNo1,                ' +     // 顧客コード1
                                        '  :AiteNo2,                ' +     // 顧客コード2
                                        '  :FBSet,                  ' +     // FBセット項目
                                        '  :Site,                   ' +     // サイト
                                        '  :TegYusouKbn,            ' +     // 手形・小切手輸送区分
                                        '  :TegYusouFutan,          ' +     // 手形・小切手輸送料負担区分
                                        '  :TegBunkatuMax,          ' +     // 手形分割枚数
                                        '  :Houhou,                 ' +     // 計算方法
                                        '  :BaseKingaku,	        ' +     // 基準金額
                                        '  :BaseHiritu,             ' +     // 基準比率
                                        '  :HasuuKingaku,           ' +     // 端数処理額
                                        '  :HasuuHou,               ' +     // 端数処理方法
                                        '  :RDelKbn,                ' +     // 削除区分
                                     // '  :UpdDateTM,              ' +     // 修正日付
                                     // '  :InsDateTM,              ' +     // 登録日付
                                        '  :UpdTantoNCode,          ' +     // 処理者
                                        '  :AccAutoKbn,             ' +     // 口座自動引落区分
                                        '  :AccAutoData,            ' +     // 自動引落支払データ
                                        '  :PayPtnNo                ' +     // 条件パターンNo
                                        ' )                         ' );
                                ParamByName('MasterKbn').AsInteger          := 22;                      //22:取引先(仕入先)
                                ParamByName('PayNCode').AsCurrency          := uvNCODE;
                                ParamByName('ShiharaiSyubetu').AsInteger    := 1;                       //1:振込
                                ParamByName('Edaban').AsInteger             := 1;
                             // ParamByName('AccNCode').AsCurrency          := 0;                       // 未対応 <247>ｺﾒﾝﾄｱｳﾄ
                                ParamByName('AccNCode').AsCurrency          := m_recOther.AccNCode;     // <247>
                                ParamByName('BkBraNCode').AsCurrency        := m_recOther.BkBraNCode;
// <263> ADD-STR
                                if not m_recOther.AcckbnFlg then
                                    ParamByName('AccKbn').AsInteger             := 1                    // デフォルトは1.普通
                                else
// <263> ADD-END
                                    ParamByName('AccKbn').AsInteger             := m_recOther.Acckbn;
                                ParamByName('AccNo').AsString               := m_recOther.AccNo;
                                ParamByName('AnserNo').AsString             := '';
                             // ParamByName('UketoriName').AsString         := '';                      // 未対応 <247>ｺﾒﾝﾄｱｳﾄ
                                ParamByName('UketoriName').AsString         := m_recOther.UketoriName;  // <247>
                                ParamByName('TransKanaName').AsString       := m_recOther.TransKanaName;
                             // ParamByName('ChargeKbn').AsInteger          := 0;                       // 未対応 <247>ｺﾒﾝﾄｱｳﾄ
                                ParamByName('ChargeKbn').AsInteger          := m_recOther.ChargeKbn;    // <247>
                             // ParamByName('ChargeFutan').AsInteger        := 0;                       // 未対応 <247>ｺﾒﾝﾄｱｳﾄ
                                ParamByName('ChargeFutan').AsInteger        := m_recOther.ChargeFutan;  // <247>
                             // ParamByName('TransKbn').AsInteger           := 0;                       // 未対応 <247>ｺﾒﾝﾄｱｳﾄ
                                ParamByName('TransKbn').AsInteger           := m_recOther.TransKbn;     // <247>
// <263> MOD-STR
//                              ParamByName('EdiInfo').AsString             := '';
//                              ParamByName('AiteNo1').AsString             := '';
//                              ParamByName('AiteNo2').AsString             := '';
                                ParamByName('EdiInfo').AsString             := m_recOther.EdiInfo;
                                ParamByName('AiteNo1').AsString             := fnAiteNoPading(m_recOther.AiteNo1);
                                ParamByName('AiteNo2').AsString             := fnAiteNoPading(m_recOther.AiteNo2);
                                if m_recOther.FBSetFlg then
                                    ParamByName('FBSet').AsInteger              := m_recOther.FBSet
                                else
// <263> MOD-END
                                    ParamByName('FBSet').AsInteger              := 2;                       //2: セットなし
                                ParamByName('Site').AsInteger               := 0;
                                ParamByName('TegYusouKbn').AsInteger        := 0;
                                ParamByName('TegYusouFutan').AsInteger      := 0;
                                ParamByName('TegBunkatuMax').AsInteger      := 0;
                                ParamByName('Houhou').AsInteger             := 0;
                                ParamByName('BaseKingaku').AsCurrency       := 0;
                                ParamByName('BaseHiritu').AsCurrency        := 0;
                                ParamByName('HasuuKingaku').AsCurrency      := 0;
                                ParamByName('HasuuHou').AsInteger           := 0;
                                ParamByName('RDelKbn').AsInteger            := 0;
                             // ParamByName('UpdDateTM').AsDateTime         := now;                     // <247>DBに任せる
                             // ParamByName('InsDateTM').AsDateTime         := now;                     // <247>DBに任せる
                                ParamByName('UpdTantoNCode').AsCurrency     := m_TantoNCode;
// <263> MOD-STR
//                              ParamByName('AccAutoKbn').AsInteger         := 0;
//                              ParamByName('AccAutoData').AsInteger        := 0;
                                ParamByName('AccAutoKbn').AsInteger         := m_recOther.AccAutoKbn;
                                ParamByName('AccAutoData').AsInteger        := m_recOther.AccAutoData;
// <263> MOD-END
                                ParamByName('PayPtnNo').AsInteger           := 1;
							end
                            else
                            begin
								// あったら、更新フラグを判定しながらupdate文を作り、アップデートします。
                                Close;
                                SQL.Clear;
                                SQL.Add(' update PayDetailInfo set  ');

                                // <247>↓
                                if m_recOther.AccNCodeFlg then
                                begin
	                                SQL.Add(' AccNCode      = :AccNCode,        ');
                                end;
                                // <247>↑
                                if m_recOther.BkBraNCodeFlg then
                                begin
	                                SQL.Add(' BkBraNCode    = :BkBraNCode,      ');
                                end;
                                if m_recOther.AcckbnFlg then
                                begin
	                                SQL.Add(' Acckbn        = :Acckbn,          ');
                                end;
                                if m_recOther.AccNoFlg then
                                begin
	                                SQL.Add(' AccNo         = :AccNo,           ');
                                end;
                                // <247>↓
                                if m_recOther.UketoriNameFlg then
                                begin
	                                SQL.Add(' UketoriName   = :UketoriName,     ');
                                end;
                                // <247>↑
                                if m_recOther.TransKanaNameFlg then
                                begin
	                                SQL.Add(' TransKanaName = :TransKanaName,   ');
                                end;
                                // <247>↓
                                if m_recOther.ChargeKbnFlg then
                                begin
	                                SQL.Add(' ChargeKbn     = :ChargeKbn,       ');
                                end;
                                if m_recOther.ChargeFutanFlg then
                                begin
	                                SQL.Add(' ChargeFutan   = :ChargeFutan,     ');
                                end;
                                if m_recOther.TransKbnFlg then
                                begin
	                                SQL.Add(' TransKbn      = :TransKbn,        ');
                                end;
                                // <247>↑
// <263> ADD-STR
                                if m_recOther.EdiInfoFlg then
                                begin
	                                SQL.Add(' EdiInfo       = :EdiInfo,        ');
                                end;
                                if m_recOther.AiteNo1Flg then
                                begin
	                                SQL.Add(' AiteNo1       = :AiteNo1,        ');
                                end;
                                if m_recOther.AiteNo2Flg then
                                begin
	                                SQL.Add(' AiteNo2       = :AiteNo2,        ');
                                end;
                                if m_recOther.FBSetFlg then
                                begin
	                                SQL.Add(' FBSet         = :FBSet,        ');
                                end;
                                if m_recOther.AccAutoKbnFlg then
                                begin
	                                SQL.Add(' AccAutoKbn    = :AccAutoKbn,        ');
                                end;
                                if m_recOther.AccAutoDataFlg then
                                begin
	                                SQL.Add(' AccAutoData   = :AccAutoData,        ');
                                end;
// <263> ADD-END

                                SQL.Add(' UpdTantoNCode         = :UpdTantoNCode   '// 処理者
                                	+   ' where MasterKbn       = :MasterKbn       '
                                	+   ' and   PayNCode        = :PayNCode        '
                                	+   ' and   ShiharaiSyubetu = :ShiharaiSyubetu '
                                	+   ' and   Edaban          = :Edaban          '
                                	+   ' and   PayPtnNo        = :PayPtnNo        ');

                                // <247>↓
                                if m_recOther.AccNCodeFlg then
                                begin
	                                ParamByName('AccNCode').AsCurrency      := m_recOther.AccNCode;
                                end;
                                // <247>↑
                                if m_recOther.BkBraNCodeFlg then
                                begin
	                                ParamByName('BkBraNCode').AsCurrency    := m_recOther.BkBraNCode;
                                end;
                                if m_recOther.AcckbnFlg then
                                begin
	                                ParamByName('AccKbn').AsInteger         := m_recOther.Acckbn;
                                end;
                                if m_recOther.AccNoFlg then
                                begin
	                                ParamByName('AccNo').AsString           := m_recOther.AccNo;
                                end;
                                // <247>↓
                                if m_recOther.UketoriNameFlg then
                                begin
	                                ParamByName('UketoriName').AsString     := m_recOther.UketoriName;
                                end;
                                // <247>↑
                                if m_recOther.TransKanaNameFlg then
                                begin
	                                ParamByName('TransKanaName').AsString   := m_recOther.TransKanaName;
                                end;
                                // <247>↓
                                if m_recOther.ChargeKbnFlg then
                                begin
                                    ParamByName('ChargeKbn').AsInteger      := m_recOther.ChargeKbn;
                                end;
                                if m_recOther.ChargeFutanFlg then
                                begin
                                    ParamByName('ChargeFutan').AsInteger    := m_recOther.ChargeFutan;
                                end;
                                if m_recOther.TransKbnFlg then
                                begin
                                    ParamByName('TransKbn').AsInteger       := m_recOther.TransKbn;
                                end;
                                // <247>↑
// <263> ADD-STR
                                if m_recOther.EdiInfoFlg then
                                begin
	                                ParamByName('EdiInfo').AsString         := m_recOther.EdiInfo;
                                end;
                                if m_recOther.AiteNo1Flg then
                                begin
	                                ParamByName('AiteNo1').AsString         := fnAiteNoPading(m_recOther.AiteNo1);
                                end;
                                if m_recOther.AiteNo2Flg then
                                begin
	                                ParamByName('AiteNo2').AsString         := fnAiteNoPading(m_recOther.AiteNo2);
                                end;
                                if m_recOther.FBSetFlg then
                                begin
                                    ParamByName('FBSet').AsInteger          := m_recOther.FBSet;
                                end;
                                if m_recOther.AccAutoKbnFlg then
                                begin
                                    ParamByName('AccAutoKbn').AsInteger     := m_recOther.AccAutoKbn;
                                end;
                                if m_recOther.AccAutoDataFlg then
                                begin
                                    ParamByName('AccAutoData').AsInteger    := m_recOther.AccAutoData;
                                end;
// <263> ADD-END
                                ParamByName('UpdTantoNCode').AsCurrency     := m_TantoNCode;
                                ParamByName('MasterKbn').AsInteger          := 22;                      //22:取引先(仕入先)
                                ParamByName('PayNCode').AsCurrency          := uvNCODE;
                                ParamByName('ShiharaiSyubetu').AsInteger    := 1;                       //1:振込
                                ParamByName('Edaban').AsInteger             := 1;
                                ParamByName('PayPtnNo').AsInteger           := 1;
                            end;

                            // SQL実行
                            if not lfnExecSql then Exit;
                        end;
//↑<244>
                    end;
//<243> ↑
// <262> ADD-STR
                    // 取引先マスタ(債務)関連更新
                    if m_recOther.MailAddress_MTPFlg or             // 担当者メールアドレス
                       m_recOther.GensenUseKbnFlg or                // 預かり源泉税採用区分
                       m_recOther.PersonKbnFlg or                   // 個人／法人区分
                       m_recOther.LocationKbnFlg or                 // 国内／国外区分
                       m_recOther.PayKbn2Flg or                     // 支払通知書メール配信区分
                       m_recOther.ZipPassFlg then                   // 解凍用パスワード
                    begin
                        // 必ず作成されているので更新のみ
                        Close;
                        SQL.Clear;
                        SQL.Add('UPDATE MTOKUI_PAY SET ');

                        if m_recOther.MailAddress_MTPFlg then       // 担当者メールアドレス
                        begin
                            SQL.Add('MailAddress = :MailAddress, ');
                            ParamByName('MailAddress').AsString := m_recOther.MailAddress_MTP;
                        end;

                        if m_recOther.GensenUseKbnFlg then          // 預かり源泉税採用区分
                        begin
                            SQL.Add('GensenUseKbn = :GensenUseKbn, ');
                            ParamByName('GensenUseKbn').AsInteger := m_recOther.GensenUseKbn;
                        end;

                        if m_recOther.PersonKbnFlg then             // 個人／法人区分
                        begin
                            SQL.Add('PersonKbn = :PersonKbn, ');
                            ParamByName('PersonKbn').AsInteger := m_recOther.PersonKbn;
                        end;

                        if m_recOther.LocationKbnFlg then           // 国内／国外区分
                        begin
                            SQL.Add('LocationKbn = :LocationKbn, ');
                            ParamByName('LocationKbn').AsInteger := m_recOther.LocationKbn;
                        end;

                        if m_recOther.PayKbn2Flg then               // 支払通知書メール配信区分
                        begin
                            SQL.Add('PayKbn2 = :PayKbn2, ');
                            ParamByName('PayKbn2').AsInteger := m_recOther.PayKbn2;
                        end;

                        if m_recOther.ZipPassFlg then               // 解凍用パスワード
                        begin
                            SQL.Add('ZipPass = :ZipPass, ');
                            ParamByName('ZipPass').AsString := m_recOther.ZipPass;
                        end;

                        SQL.Add('  UpdTantoNCode = ' + FloatToStr(m_TantoNCode) +   // 処理者
                                'WHERE BaseNCode = ' + FloatToStr(uvNCODE));

                        // SQL実行
                        if not lfnExecSql then Exit;
                    end;
// <262> ADD-END
                end;
//↑<244>

// <WF>↓
                // WF取込の場合
                if m_recOther.CanInsert then
                begin
{↓<244>上に移動します。
//<243> ↓
                    // 振込先支店内部コード,カナ振込先名称,預金種目,口座番号
                    // 何れかのフラグがTrueならInsertで申請書の振込先情報の登録行う
                    if m_recOther.BkBraNCodeFlg or
                       m_recOther.TransKanaNameFlg or
                       m_recOther.AcckbnFlg or
                       m_recOther.AccNoFlg then
                    begin
                        //PayPtnInfoへInsert
                        SQL.Clear;
                        SQL.Add(' insert into PayPtnInfo    ' +
                                ' (                         ' +
                                '  MasterKbn,               ' +     // マスタ区分
                                '  PayNCode,                ' +     // 支払先内部コード
                                '  PayPtnNo,                ' +     // 条件パターンNo
                                '  BmnNCode,                ' +     // 部門内部コード
                                '  PrjNCode,                ' +     // プロジェクト内部コード
                                '  PjSubNCode,              ' +     // プロジェクトサブ内部コード
                                '  BunkaiKbn,               ' +     // 分解方法
                                '  PriPayWay,               ' +     // 優先支払い方法
                                '  RDelKbn,                 ' +     // 削除区分
                                '  UpdDateTM,               ' +     // 修正日付
                                '  InsDateTM,               ' +     // 登録日付
                                '  UpdTantoNCode            ' +     // 処理者
                                ' )                         ' +
                                ' values                    ' +
                                ' (                         ' +
                                '  :MasterKbn,              ' +     // マスタ区分
                                '  :PayNCode,               ' +     // 支払先内部コード
                                '  :PayPtnNo,               ' +     // 条件パターンNo
                                '  :BmnNCode,               ' +     // 部門内部コード
                                '  :PrjNCode,               ' +     // プロジェクト内部コード
                                '  :PjSubNCode,             ' +     // プロジェクトサブ内部コード
                                '  :BunkaiKbn,              ' +     // 分解方法
                                '  :PriPayWay,              ' +     // 優先支払い方法
                                '  :RDelKbn,                ' +     // 削除区分
                                '  :UpdDateTM,              ' +     // 修正日付
                                '  :InsDateTM,              ' +     // 登録日付
                                '  :UpdTantoNCode           ' +     // 処理者
                                ' )                         ' );
                        ParamByName('MasterKbn').AsInteger      := 22;          //22:取引先(仕入先)
                        ParamByName('PayNCode').AsCurrency      := uvNCODE;
                        ParamByName('PayPtnNo').AsInteger       := 1;
                        ParamByName('BmnNCode').AsCurrency      := 0;
                        ParamByName('PrjNCode').AsCurrency      := 0;
                        ParamByName('PjSubNCode').AsCurrency    := 0;
                        ParamByName('BunkaiKbn').AsInteger      := 0;
                        ParamByName('PriPayWay').AsInteger      := 0;
                        ParamByName('RDelKbn').AsInteger        := 0;
                        ParamByName('UpdDateTM').AsDateTime     := now;
                        ParamByName('InsDateTM').AsDateTime     := now;
                        ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode;

                        // SQL実行
                        if not lfnExecSql then Exit;

                        //PayPtnDtlへInsert
                        SQL.Clear;
                        SQL.Add(' insert into PayPtnDtl     ' +
                                ' (                         ' +
                                '  MasterKbn,               ' +     // マスタ区分
                                '  PayNCode,                ' +     // 支払い先内部コード
                                '  JoukenNo,                ' +     // 条件明細No
                                '  Houhou,                  ' +     // 支払い方法
                                '  StdRitu,                 ' +     // 分解基準値
                                '  MinKin,                  ' +     // 支払い最低額
                                '  HasuuKin,                ' +     // 端数処理額
                                '  HasuuHou,                ' +     // 端数処理方法
                                '  RDelKbn,                 ' +     // 削除区分
                                '  UpdDateTM,               ' +     // 修正日付
                                '  InsDateTM,               ' +     // 登録日付
                                '  UpdTantoNCode ,          ' +     // 処理者
                                '  PayPtnNo                 ' +     // 条件パターンNo
                                ' )                         ' +
                                ' values                    ' +
                                ' (                         ' +
                                '  :MasterKbn,              ' +     // マスタ区分
                                '  :PayNCode,               ' +     // 支払い先内部コード
                                '  :JoukenNo,               ' +     // 条件明細No
                                '  :Houhou,                 ' +     // 支払い方法
                                '  :StdRitu,                ' +     // 分解基準値
                                '  :MinKin,                 ' +     // 支払い最低額
                                '  :HasuuKin,               ' +     // 端数処理額
                                '  :HasuuHou,               ' +     // 端数処理方法
                                '  :RDelKbn,                ' +     // 削除区分
                                '  :UpdDateTM,              ' +     // 修正日付
                                '  :InsDateTM,              ' +     // 登録日付
                                '  :UpdTantoNCode,          ' +     // 処理者
                                '  :PayPtnNo                ' +     // 条件パターンNo
                                ' )                         ' );
                        ParamByName('MasterKbn').AsInteger      := 22;          //22:取引先(仕入先)
                        ParamByName('PayNCode').AsCurrency      := uvNCODE;
                        ParamByName('JoukenNo').AsInteger       := 1;
                        ParamByName('Houhou').AsInteger         := 1;           //1:振込
                        ParamByName('StdRitu').AsCurrency       := 100;         //100:基準値100
                        ParamByName('MinKin').AsCurrency        := 0;
                        ParamByName('HasuuKin').AsCurrency      := 0;
                        ParamByName('HasuuHou').AsInteger       := 0;
                        ParamByName('RDelKbn').AsInteger        := 0;
                        ParamByName('UpdDateTM').AsDateTime     := now;
                        ParamByName('InsDateTM').AsDateTime     := now;
                        ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode;
                        ParamByName('PayPtnNo').AsInteger       := 1;
                        // SQL実行
                        if not lfnExecSql then Exit;


                        //PayDetailInfoへInsert
                        SQL.Clear;
                        SQL.Add(' insert into PayDetailInfo ' +
                                ' (                         ' +
                                '  MasterKbn,               ' +     // マスタ区分
                                '  PayNCode,                ' +     // 支払先内部コード
                                '  ShiharaiSyubetu,         ' +     // 支払種別
                                '  Edaban,                  ' +     // 枝番
                                '  AccNCode,                ' +     // 依頼口座内部コード
                                '  BkBraNCode,              ' +     // 振込先支店内部コード
                                '  AccKbn,                  ' +     // 預金種目
                                '  AccNo,                   ' +     // 口座番号
                                '  AnserNo,                 ' +     // ANSER用口座番号
                                '  UketoriName,             ' +     // 受取人名
                                '  TransKanaName,           ' +     // カナ振込先名称
                                '  ChargeKbn,               ' +     // 手数料計算区分
                                '  ChargeFutan,             ' +     // 手数料負担
                                '  TransKbn,                ' +     // 振込方法
                                '  EdiInfo,                 ' +     // EDI情報
                                '  AiteNo1,                 ' +     // 顧客コード1
                                '  AiteNo2,                 ' +     // 顧客コード2
                                '  FBSet,                   ' +     // FBセット項目
                                '  Site,                    ' +     // サイト
                                '  TegYusouKbn,             ' +     // 手形・小切手輸送区分
                                '  TegYusouFutan,           ' +     // 手形・小切手輸送料負担区分
                                '  TegBunkatuMax,           ' +     // 手形分割枚数
                                '  Houhou,                  ' +     // 計算方法
                                '  BaseKingaku,	            ' +     // 基準金額
                                '  BaseHiritu,              ' +     // 基準比率
                                '  HasuuKingaku,            ' +     // 端数処理額
                                '  HasuuHou,                ' +     // 端数処理方法
                                '  RDelKbn,                 ' +     // 削除区分
                                '  UpdDateTM,               ' +     // 修正日付
                                '  InsDateTM,               ' +     // 登録日付
                                '  UpdTantoNCode,           ' +     // 処理者
                                '  AccAutoKbn,              ' +     // 口座自動引落区分
                                '  AccAutoData,             ' +     // 自動引落支払データ
                                '  PayPtnNo                 ' +     // 条件パターンNo
                                ' )                         ' +
                                ' values                    ' +
                                ' (                         ' +
                                '  :MasterKbn,              ' +     // マスタ区分
                                '  :PayNCode,               ' +     // 支払先内部コード
                                '  :ShiharaiSyubetu,        ' +     // 支払種別
                                '  :Edaban,                 ' +     // 枝番
                                '  :AccNCode,               ' +     // 依頼口座内部コード
                                '  :BkBraNCode,             ' +     // 振込先支店内部コード
                                '  :AccKbn,                 ' +     // 預金種目
                                '  :AccNo,                  ' +     // 口座番号
                                '  :AnserNo,                ' +     // ANSER用口座番号
                                '  :UketoriName,            ' +     // 受取人名
                                '  :TransKanaName,          ' +     // カナ振込先名称
                                '  :ChargeKbn,              ' +     // 手数料計算区分
                                '  :ChargeFutan,            ' +     // 手数料負担
                                '  :TransKbn,               ' +     // 振込方法
                                '  :EdiInfo,                ' +     // EDI情報
                                '  :AiteNo1,                ' +     // 顧客コード1
                                '  :AiteNo2,                ' +     // 顧客コード2
                                '  :FBSet,                  ' +     // FBセット項目
                                '  :Site,                   ' +     // サイト
                                '  :TegYusouKbn,            ' +     // 手形・小切手輸送区分
                                '  :TegYusouFutan,          ' +     // 手形・小切手輸送料負担区分
                                '  :TegBunkatuMax,          ' +     // 手形分割枚数
                                '  :Houhou,                 ' +     // 計算方法
                                '  :BaseKingaku,	        ' +     // 基準金額
                                '  :BaseHiritu,             ' +     // 基準比率
                                '  :HasuuKingaku,           ' +     // 端数処理額
                                '  :HasuuHou,               ' +     // 端数処理方法
                                '  :RDelKbn,                ' +     // 削除区分
                                '  :UpdDateTM,              ' +     // 修正日付
                                '  :InsDateTM,              ' +     // 登録日付
                                '  :UpdTantoNCode,          ' +     // 処理者
                                '  :AccAutoKbn,             ' +     // 口座自動引落区分
                                '  :AccAutoData,            ' +     // 自動引落支払データ
                                '  :PayPtnNo                ' +     // 条件パターンNo
                                ' )                         ' );
                        ParamByName('MasterKbn').AsInteger          := 22;                      //22:取引先(仕入先)
                        ParamByName('PayNCode').AsCurrency          := uvNCODE;
                        ParamByName('ShiharaiSyubetu').AsInteger    := 1;                       //1:振込
                        ParamByName('Edaban').AsInteger             := 1;
                        ParamByName('AccNCode').AsCurrency          := 0;                       // 未対応
                        ParamByName('BkBraNCode').AsCurrency        := m_recOther.BkBraNCode;
                        ParamByName('AccKbn').AsInteger             := m_recOther.Acckbn;
                        ParamByName('AccNo').AsString               := m_recOther.AccNo;
                        ParamByName('AnserNo').AsString             := '';
                        ParamByName('UketoriName').AsString         := '';                       // 未対応
                        ParamByName('TransKanaName').AsString       := m_recOther.TransKanaName;
                        ParamByName('ChargeKbn').AsInteger          := 0;                       // 未対応
                        ParamByName('ChargeFutan').AsInteger        := 0;                       // 未対応
                        ParamByName('TransKbn').AsInteger           := 0;                       // 未対応
                        ParamByName('EdiInfo').AsString             := '';
                        ParamByName('AiteNo1').AsString             := '';
                        ParamByName('AiteNo2').AsString             := '';
                        ParamByName('FBSet').AsInteger              := 2;                       //2: セットなし
                        ParamByName('Site').AsInteger               := 0;
                        ParamByName('TegYusouKbn').AsInteger        := 0;
                        ParamByName('TegYusouFutan').AsInteger      := 0;
                        ParamByName('TegBunkatuMax').AsInteger      := 0;
                        ParamByName('Houhou').AsInteger             := 0;
                        ParamByName('BaseKingaku').AsCurrency       := 0;
                        ParamByName('BaseHiritu').AsCurrency        := 0;
                        ParamByName('HasuuKingaku').AsCurrency      := 0;
                        ParamByName('HasuuHou').AsInteger           := 0;
                        ParamByName('RDelKbn').AsInteger            := 0;
                        ParamByName('UpdDateTM').AsDateTime         := now;
                        ParamByName('InsDateTM').AsDateTime         := now;
                        ParamByName('UpdTantoNCode').AsCurrency     := m_TantoNCode;
                        ParamByName('AccAutoKbn').AsInteger         := 0;
                        ParamByName('AccAutoData').AsInteger        := 0;
                        ParamByName('PayPtnNo').AsInteger           := 1;

                        // SQL実行
                        if not lfnExecSql then Exit;

                    end;
//<243> ↑
↑<244>上に移動します。}


                    // WF連動区分更新
                    if not UpdateSinsei(m_recSinseiKey) then
                    begin
//↓<Rel>
			            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
//↑<Rel>
                        MDataModule.RollBack(dbCorp_Select);
                        Exit;
                    end;
                    // WF関係の初期化
                    ClearOtherRec(m_recOther);
                end;
// <WF>↑


//↓<Rel>
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_MAS) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_SEL) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_CRD) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_PAY) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_DEP) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;

	                // 更新されたときはSecHojyoDispInfoのメンテを行う。
	                if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,uvNCODE,MTOKUI_DMQuery) then
	                begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
	                    Result := false;
	                    Exit;
	                end;
                end;
//↑<Rel>
//↓<2257>
                if uvCopyMtokui = true then
                begin
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
//<D10>					MDataModule.SetDBInfoToSProc( m_SyncMaster.m_cPDBSelect, CopyMtokuiProc )
						gfnJNTSELSetDbName(CopyMtokuiProc, m_SyncMaster.m_cPDBSelect);		//<D10>
                    end
					else
					begin
//<D10>					MDataModule.SetDBInfoToSProc( dbCorp_Select, CopyMtokuiProc );
						gfnJNTSELSetDbName(CopyMtokuiProc, dbCorp_Select);		//<D10>
					end;


                    with CopyMtokuiProc do
                    begin
                        ParamByName('@p_FR_MstNo').AsFloat	 	:= uvBeforeNCode; 		//コピー元マスタNO
                        ParamByName('@p_TO_MstNo').AsFloat		:= uvNCODE;				//コピー先マスタNO
                        ParamByName('@p_TantoNcd').AsFloat		:= m_TantoNCode;		//ログイン担当者内部CD
                        ExecProc;
                        lvReturnValue							:=	ParamByName('@RETURN_VALUE').AsInteger;
                        lvRetMsg								:=	ParamByName('@RETMSG').AsString;
                    end;
					if lvReturnValue <> 0 then
					begin
						MjsMessageBox(Self,lvRetMsg, mjError, mjDefOk);

                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
			            	MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );	//ﾛｰﾙﾊﾞｯｸ
                        end
                        else
                        begin
			            	MDataModule.Rollback ( dbCorp_Select );	//ﾛｰﾙﾊﾞｯｸ
                        end;
						uvBeforeNCode	:=0;
                        result 			:= False;
                        uvCopyMtokui	:= False;
                        Exit;
					end;
                    uvCopyMtokui	:= False;
                end;
//↑<2257>
//<3135>ins-s
	            // コミットする前にシステム別情報テーブルが本当に作成されたかチェックする。
            	if fnchkSystemRec(uvNCODE) = -1 then
            	begin
	        		if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	        		begin
	            		// 親会社DBのﾛｰﾙﾊﾞｯｸ
		        		MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
            		end;

                	MDataModule.Rollback(dbCorp_Select);
                	Result := false;

					mjsmessagebox(self,'システム別情報が未作成です。', mjWarning, mjDefOK);

                	Exit;
            	end;
//<3135>ins-e

                // ｺﾐｯﾄ(反映)
                MDataModule.Commit(dbCorp_Select);
//↓<Rel>
	            // 親会社DBのｺﾐｯﾄ
		        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
		            MDataModule.Commit ( m_SyncMaster.m_cPDBSelect );
//↑<Rel>
            except
                ShowMessage('MTOKUI Write Error!');
//↓<Rel>
                //	ﾛｰﾙﾊﾞｯｸ(破棄)   親会社DBのﾛｰﾙﾊﾞｯｸ
		        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
		            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
//↑<Rel>
                MDataModule.Rollback(dbCorp_Select);
            end;
		end;

		{ <*> HojyoTree <*> }
		if HojyoMA_New = True then
		begin
			if fnHojyoTreeWrite(strGCode) = False then
			begin
				result := False;
				Exit;
			end;

			Inc(giAllCnt);									// 総件数を増やす
			LblRecCnt.Caption := IntToStr(giAllCnt);
		end;

	finally
//<Rel>		QueryMaster.Close;
//<Rel>		QueryMaster.Free;
//↓<Rel>
	    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    begin
			// MTOKUI_DMQueryの接続先DBをもとにもどしておく。
			MTOKUI_DMQuery.Close;
//<D10>		MDataModule.SetDBInfoToQuery( dbCorp_Select, MTOKUI_DMQuery );
			gfnJNTSELSetDbName(MTOKUI_DMQuery, dbCorp_Select);		//<D10>

            //ストアドの接続先DBをもとにもどしておく。
//<D10>		MDataModule.SetDBInfoToSProc( dbCorp_Select, StdProc7);
//<D10>		MDataModule.SetDBInfoToSProc( dbCorp_Select, StdProc7_S);
			gfnJNTSELSetDbName(StdProc7, 	dbCorp_Select);		//<D10>
			gfnJNTSELSetDbName(StdProc7_S, 	dbCorp_Select);		//<D10>
	    end;
//↑<Rel>

		SessionPractice(C_ED_PROCESS); //<MHIS> ADD
	end;

	Result := True;
end;

//-----------------------------------------------------------------------------
//  Mtokui_Selの存在チェック
//-----------------------------------------------------------------------------
//<245>Function TJNTCRP004001f.fnChkMtokui_Sel(pKBN:Integer; var rTUpd: Boolean; var rSUpd: Boolean):Boolean;
Function TJNTCRP004001f.fnChkMtokui_Sel(pKBN:Integer; var rTUpd: Boolean; var rSUpd: Boolean; var rTnNCd: Extended; var rBmNCd: Extended):Boolean; //<245>rTnNCd,rBmNCdを取得できるようにした。
var
    QrySelChk : TMQuery;
begin
    // Queryの構築
    QrySelChk := TMQuery.Create(Self);					    // MQueryの構築
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QrySelChk); // DBとMQueryの接続
	gfnJNTSELSetDbName(QrySelChk, dbCorp_Select);		//<D10>
    Result := False;

    //↓<245>
    rTnNCd := 0;
    rBmNCd := 0;
    //↑<245>

    try
        with QrySelChk do
        begin
            Close;
            SQL.clear;
//<245>     SQL.Add(' Select BaseNCode From MTOKUI_Sel ' +
            SQL.Add(' Select BaseNCode,TnNCode,BmNCode From MTOKUI_Sel ' + //<245>TnNCode,BmNCodeの取得
                    ' Where  (BaseNCode = :BaseNCode)  ' +
                    '   and  (RecKbn    = :KBN)        ');
//<256> DEL            ParamByName('BaseNCode').AsFloat := JHojyoMA_DMemDataNCode.asFloat;
            ParamByName('BaseNCode').AsString := JHojyoMA_DMemDataNCode.asString;  //<256> ADD
            ParamByName('KBN').AsInteger     := pKBN;
            Open;

            if not Eof then
            begin
                Result := True;

                //↓<245>担当者内部コード、部門内部コードを取得します。
                rTnNCd := FieldByName('TnNCode').AsFloat;
                rBmNCd := FieldByName('BmNCode').AsFloat;
                //↑<245>

                if pKBN = 1 then                            // 得意先情報
                    rTUpd := True
                else                                        // 仕入先情報
                    rSUpd := True;
            end
            else
            begin
                if pKBN = 1 then                            // 得意先情報
                    rTUpd := False
                else                                        // 仕入先情報
                    rSUpd := False;
            end;
        end;
	finally
        QrySelChk.Close;
        QrySelChk.Free;
	end;
    uvNCODE := JHojyoMA_DMemDataNCode.asFloat;
end;

//-----------------------------------------------------------------------------
//  消費税請求区分の再設定
//-----------------------------------------------------------------------------
Function TJNTCRP004001f.fnSetZSeiKbn_Sel(pKBN:Integer):Boolean;
var
    lvQry: TMQuery;
begin
    // Queryの構築
    lvQry := TMQuery.Create(Self);					    // MQueryの構築

    if (m_SyncMaster.m_flgGrpCorp = 1) then
//<D10>	MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, lvQry)
		gfnJNTSELSetDbName(lvQry, m_SyncMaster.m_cPDBSelect)		//<D10>
    else
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, lvQry);
		gfnJNTSELSetDbName(lvQry, dbCorp_Select);		//<D10>

    Result := False;
    try
        with lvQry do
        begin
            Close;
            SQL.clear;
            SQL.Add('select s.TRSEIKBN, s.ZSeiKbn, m.CountryKbn '
                  + 'from MTOKUI_Sel s '
                  + '  left outer Join MTOKUI m on (s.BaseNCode = m.NCode) '
                  + 'where (s.BaseNCode = :BaseNCode) '
                  + '  and (s.RecKbn    = :KBN)        ');
//<256> DEL            ParamByName('BaseNCode').AsFloat := uvNCODE;
            ParamByName('BaseNCode').AsString := FormatFloat('0',uvNCODE);  //<256> ADD
            ParamByName('KBN').AsInteger     := pKBN;
            Open;
			if not EOF then
			begin
				//条件に一致した場合は、｢1:伝票単位｣へ上書き
				if (GetFld('CountryKbn').AsInteger = 1) and     //国内
                   (GetFld('TRSEIKBN').AsInteger  <> 0) and     //通常請求以外
                   (GetFld('ZSeiKbn').AsInteger    = 2) then    //請求書単位
				begin
					Close;
					SQL.clear;
					SQL.Add('update MTOKUI_Sel set ZSeiKbn=1 '
                          + 'where (BaseNCode = :BaseNCode) and (RecKbn = :KBN) ');
//<256> DEL		            ParamByName('BaseNCode').AsFloat := uvNCODE;
		            ParamByName('BaseNCode').AsString := FormatFloat('0',uvNCODE);  //<256> ADD
		            ParamByName('KBN').AsInteger     := pKBN;
					ExecSQL;
				end;
			end;
        end;
	finally
        lvQry.Close;
        lvQry.Free;
	end;
end;

//**************************************************************************
//	Proccess	:	取引先データ削除（１件）
//	Notice		:
//	Name		:	N.Nabe
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnDataDelete(strGCode: String; iSumKbn: Integer): Boolean;
var
	HojyoMA_New		: Boolean;			// True:追加 False:更新
//<Rel>	QuerySel		: TMQuery;
	iNCode			: Int64;
	iRet			: Integer;
	strErr			: String;

	dqMasterData : TMQuery; //<Rel>


//-----------------------------------------------------------------------------
// lfnUpd_Rel()
//      PARAM   : NCode  : _Relを検索する内部コード
//                dq     : 親会社DBと接続されたクエリ
//                SyncNo : 「JNTCRPSyncMasterB.inc」に定義されている定数
//                RecKbn : 1:得意先 2:仕入先 (SyncNoが「JNTSYNC_MTOKUI_SEL」のときのみ有効)
//      RETURN  : Boolean True:成功, False:失敗
//      MEMO    : _Relを更新するための関数内の関数。
//-----------------------------------------------------------------------------
function lfnUpd_Rel(NCode:Extended;dq:TMQuery;SyncNo:Integer;RecKbn:Integer):Boolean;
var
	sTbl      : string; // _Relテーブル名格納用
	sNCodeFld : string; // 内部コードフィールド名格納用。MTOKUI_Rel は NCode。それ以外はBaseNCode。
begin
	Result := True;

	// テーブル名の決定
    case SyncNo of
        JNTSYNC_MTOKUI:     sTbl := 'MTOKUI_Rel';
        JNTSYNC_MTOKUI_MAS: sTbl := 'MTOKUI_MAS_Rel';
        JNTSYNC_MTOKUI_SEL: sTbl := 'MTOKUI_SEL_Rel';
        JNTSYNC_MTOKUI_CRD: sTbl := 'MTOKUI_CRD_Rel';
        JNTSYNC_MTOKUI_PAY: sTbl := 'MTOKUI_PAY_Rel';
        JNTSYNC_MTOKUI_DEP: sTbl := 'MTOKUI_DEP_Rel';
    end;

	// 内部コードフィールド名の決定
	if (SyncNo = JNTSYNC_MTOKUI) then
	begin
		sNCodeFld := 'NCode';
	end
	else
	begin
		sNCodeFld := 'BaseNCode';
	end;

    // 親会社の_Relを削除
    dq.Close();
    dq.SQL.Clear();
    dq.SQL.Add('update ' + sTbl);
    dq.SQL.Add(' set RDelKbn_Rel = 1,                ');
    dq.SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
    dq.SQL.Add(' where RDelKbn_Rel = :pRDelKbn       ');
    dq.SQL.Add('  and  ' + sNCodeFld + '     = :pNCode         ');
    dq.SQL.Add('  and  GrpSegNCode           = :pGrpSegNCode   ');
    if (SyncNo = JNTSYNC_MTOKUI_SEL) then
    begin
        dq.SQL.Add('   and (RecKbn = :pRecKbn) ');
    end;

    dq.ParamByName('pRDelKbn'    ).AsInteger := 0;
//<256> DEL    dq.ParamByName('pNCode'      ).AsFloat   := iNCode;
    dq.ParamByName('pNCode'      ).AsString   := FormatFloat('0',iNCode);  //<256> ADD
//<256> DEL    dq.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
    dq.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<256> ADD
    if (SyncNo = JNTSYNC_MTOKUI_SEL) then
    begin
        dq.ParamByName('pRecKbn').AsInteger  := RecKbn;
    end;

    if ( dq.ExecSQL = False ) then
    begin
	    MjsMessageBoxEx (Self,
                         '関連付けの解除に失敗しました。',
    	                 'マスタ同期', mjError, mjOk, mjDefOk);
        Result := False;
        Exit;
    end;

    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
    if ( m_SyncMaster.fnCall_SYNC ( SyncNo ) = false ) then
    begin
        Result := False;
        Exit;
    end;
end;


begin
//<Rel>	QuerySel		:= TMQuery.Create(Self);
//<Rel>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QuerySel);
	fnDataRead (strGCode, iSumKbn, 0);
 	HojyoMA_New		:= MTOKUI_DMQuery.Eof;

	iNCode := MTOKUI_DMQuery.GetFld('NCode').AsInteger;

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	// -----<MHIS> Add-St-----
	SessionPractice(C_ST_PROCESS); // ここで作成するので、lfnxxxのローカル関数内の更新では作成しないくて良い。

	try
	// -----<MHIS> Add-Ed-----

//↓<Rel>
    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理を採用している場合の削除は、親会社との関連性を削除する。
    //  その後同期ｽﾄｱﾄﾞﾌﾟﾛｼｼﾞｬで同期(削除)を行う。
    //
    //  ﾏｽﾀﾃﾞｰﾀを削除する際に、ｸﾞﾙｰﾌﾟ管理を採用している場合は、親会社ﾃﾞｰﾀﾍﾞｰｽに
    //  対してﾄﾗﾝｻﾞｸｼｮﾝを掛ける。。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        // 親会社ﾃﾞｰﾀﾍﾞｰｽに対してﾄﾗﾝｻﾞｸｼｮﾝを掛ける
        MDataModule.BeginTran ( m_SyncMaster.m_cPDBSelect );

	    dqMasterData := TMQuery.Create ( Self );

        // 親会社DBとMQueryの接続
//<D10>	MDataModule.SetDBInfoToQuery( m_SyncMaster.m_cPDBSelect, dqMasterData);
		gfnJNTSELSetDbName(dqMasterData, m_SyncMaster.m_cPDBSelect);		//<D10>

		try
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI,0) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI_MAS,0) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI_SEL,1) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI_SEL,2) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI_CRD,0) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI_PAY,0) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
			if not lfnUpd_Rel(iNCode,dqMasterData,JNTSYNC_MTOKUI_DEP,0) then
			begin
				MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
				Result := False;
				Exit;
			end;
		except
			MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
			MDataModule.Rollback (dbCorp_Select);				//	子会社をﾛｰﾙﾊﾞｯｸ(破棄)
			Result := False;
			Exit;
		end;


        try
//<D10>     StoredProc10.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10>     StoredProc10.SessionName   :=  dbCorp_Select.SessionName;
			gfnJNTSELSetDbName(StoredProc10, dbCorp_Select);		//<D10>

            // 【会計】MP_MAS_DEL_MTOKUI ・・・このSPでHojyoTreeが削除されます。
            with StoredProc10 do
            begin
				ParamByName('@p_NCode').AsFloat	:= iNCode;
                ExecProc();	// ｽﾄｱﾄﾞ実行

                // 結果
                iRet	:=  ParamByName('@RetCd')   .AsInteger;
                // ｴﾗｰ時の理由
                strErr	:=  ParamByName('@errMsg')  .AsString;
            end;
        except
            // 例外発生
			MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            MjsMessageBox(Self,'MP_MAS_DEL_MTOKUIで例外が発生しました。', mjError, mjDefOk);
            result := False;
            Exit;
        end;

        if iRet <> 0 then
        begin
			MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            MjsMessageBox(Self,strErr, mjError, mjDefOk);
            result := False;
            Exit;
        end;

        //↓<215>
        try
//<D10>		MDataModule.SetDBInfoToSProc(dbCorp_Select, MP_BIL_DEL_MTOKUI);
			gfnJNTSELSetDbName(MP_BIL_DEL_MTOKUI, dbCorp_Select);		//<D10>
            // 【手形】MP_BIL_DEL_MTOKUI ・・・このSPでBILSwkInfoが削除されます。
            with MP_BIL_DEL_MTOKUI do
            begin
			  ParamByName('@NCode').AsFloat	:= iNCode;
              ExecProc();	// ｽﾄｱﾄﾞ実行

                // 結果
                iRet	:=  ParamByName('@RetCd')   .AsInteger;
                // ｴﾗｰ時の理由
                strErr	:=  ParamByName('@errMsg')  .AsString;
            end;
        except
            // 例外発生
			MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            MjsMessageBox(Self,'MP_BIL_DEL_MTOKUIで例外が発生しました。', mjError, mjDefOk);
            result := False;
            Exit;
        end;

        if iRet <> 0 then
        begin
			MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            MjsMessageBox(Self,strErr, mjError, mjDefOk);
            result := False;
            Exit;
        end;
        //↑<215>

        // 更新されたときはSecHojyoDispInfoのメンテを行う。
        if not fnUpdSecHojyoDispInfo(2,Self,m_SyncMaster,iNCode,dqMasterData) then
        begin
			MDataModule.Rollback (m_SyncMaster.m_cPDBSelect);	//	親会社をﾛｰﾙﾊﾞｯｸ(破棄)
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            Result := false;
            Exit;
        end;

        gbHojyoTreeDelFlag	:=	True;			// 削除ﾌﾗｸﾞOn

		if HojyoMA_New = False then
		begin
			Dec(giAllCnt);										// 取引先総件数を減らす。
			LblRecCnt.Caption := IntToStr(giAllCnt);
		end;

		MDataModule.Commit (m_SyncMaster.m_cPDBSelect);	//	親会社をｺﾐｯﾄ(反映)
		MDataModule.Commit (dbCorp_Select);				//	子会社をｺﾐｯﾄ(反映)

		//↓<FREE>
		dqMasterData.Close;
		dqMasterData.Free;
		//↑<FREE>
    end
    // 通常削除
    else
    begin
//↑<Rel> 以降は既存論理
		{ <*> MTOKI <*> ／ 基本情報}
		with MTOKUI_DMQuery do
		begin
			try
				Close;
//<D10>			RequestLive	:= False;
				SQL.Clear;

				if HojyoMA_New = False then
				begin
//↓<Rel>
            	    dqMasterData := TMQuery.Create ( Self );

                    // 親会社DBとMQueryの接続
//<D10>				MDataModule.SetDBInfoToQuery( dbCorp_Select, dqMasterData);
					gfnJNTSELSetDbName(dqMasterData, dbCorp_Select);		//<D10>

					// <***>MTOKUI_Relのカウントだけで良いか？
					dqMasterData.Close();
					dqMasterData.SQL.Clear();
					dqMasterData.SQL.Add('select Count(NCode) CNT from MTOKUI_Rel ');
					dqMasterData.SQL.Add('where NCode       = :pNCode              ');
					dqMasterData.SQL.Add('  and RDelKbn_REL = 0                    ');
//<256> DEL					dqMasterData.ParamByName('pNCode' ).AsFloat   := iNCode;
					dqMasterData.ParamByName('pNCode' ).AsString   := FormatFloat('0',iNCode);  //<256> ADD

			        if ( dqMasterData.Open = False ) then
			        begin
						ErrorMessageDsp(dqMasterData);
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						dqMasterData.Close;
                        dqMasterData.Free;
			            Result := False;
			            Exit;
			        end;

			        if ( dqMasterData.FieldByName('CNT').AsInteger <> 0 ) then
			        begin
			            MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
			                        '削除', mjInformation, mjOk, mjDefOk);
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						dqMasterData.Close;
                        dqMasterData.Free;
			            Result := False;
			            Exit;
			        end;

					//↓<FREE>
					dqMasterData.Close;
					dqMasterData.Free;
					//↑<FREE>

//↑<Rel>
					{更新}
					Close;
					SQL.Add('Update MTOKUI');
					SQL.Add('Set');
					SQL.Add('RDelKbn	=:iRecordKbn');
					SQL.Add('Where RDelKbn=0 and SumKbn=:iSumKbn and GCode=:strGCode');

					{データセット}
					SetFld('iSumKbn').AsInteger			:= iSumKbn;
					SetFld('iRecordKbn').AsInteger		:= 1;							// 削除ﾚｺｰﾄﾞに変更
					SetFld('strGCode').AsString			:= strGCode;
					if (ExecSQL = False) then
					begin
						ErrorMessageDsp(MTOKUI_DMQuery);
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						MTOKUI_DMQuery.Close;
						result := False;
						Exit;
					end;


					try
//<D10>					StoredProc10.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10>					StoredProc10.SessionName   :=  dbCorp_Select.SessionName;
						gfnJNTSELSetDbName(StoredProc10, dbCorp_Select);		//<D10>

						// 【会計】MP_MAS_DEL_MTOKUI
						with StoredProc10 do
						begin
		         			ParamByName('@p_NCode').AsFloat		:= iNCode;
							ExecProc();	// ｽﾄｱﾄﾞ実行

							// 結果
							iRet	:=  ParamByName('@RetCd')   .AsInteger;
							// ｴﾗｰ時の理由
							strErr	:=  ParamByName('@errMsg')  .AsString;
						end;
					except
						// 例外発生
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						MjsMessageBox(Self,'MP_MAS_DEL_MTOKUIで例外が発生しました。', mjError, mjDefOk);
						result := False;
						Exit;
					end;

					if iRet <> 0 then
					begin
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						MjsMessageBox(Self,strErr, mjError, mjDefOk);
						result := False;
						Exit;
					end;

                    //↓<215>
                    try
//<D10>					MDataModule.SetDBInfoToSProc(dbCorp_Select, MP_BIL_DEL_MTOKUI);
						gfnJNTSELSetDbName(MP_BIL_DEL_MTOKUI, dbCorp_Select);		//<D10>
                        // 【手形】MP_BIL_DEL_MTOKUI ・・・このSPでBILSwkInfoが削除されます。
                        with MP_BIL_DEL_MTOKUI do
                        begin
							ParamByName('@NCode').AsFloat	:= iNCode;
                            ExecProc();	// ｽﾄｱﾄﾞ実行

                            // 結果
                            iRet	:=  ParamByName('@RetCd')   .AsInteger;
                            // ｴﾗｰ時の理由
                            strErr	:=  ParamByName('@errMsg')  .AsString;
                        end;
                    except
                        // 例外発生
                        MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                        MjsMessageBox(Self,'MP_BIL_DEL_MTOKUIで例外が発生しました。', mjError, mjDefOk);
                        result := False;
                        Exit;
                    end;

                    if iRet <> 0 then
                    begin
                        MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                        MjsMessageBox(Self,strErr, mjError, mjDefOk);
                        result := False;
                        Exit;
                    end;
                    //↑<215>

					MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
					gbHojyoTreeDelFlag	:=	True;			// 削除ﾌﾗｸﾞOn
				end;
			except
				ShowMessage('MTOKUI Delete Error!');
			end;
		end;

		if HojyoMA_New = False then
		begin
			Dec(giAllCnt);										// 取引先総件数を減らす。
			LblRecCnt.Caption := IntToStr(giAllCnt);
		end;
	end;

	// -----<MHIS> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<MHIS> Add-Ed-----

	result := True;
end;

//**************************************************************************
//	Proccess	:	加算体系の書き込み（新規）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String	（取引先外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnHojyoTreeWrite(strGCode: String): Boolean;
var
	qmQuery		: TMQuery;
	WkEntNo		: Integer;
	stWorkRec	: ^TreeViewRec;
//↓<223>
    iSumKbn     : Integer;
    exSumNCode  : Extended;
//↑<223>
    stWorkRec_Dummy	: TreeViewRec;  //<KSN> ADD
begin
//<KSN> MOD St
//	stWorkRec	:= TBaseNode.Data;
    if PPanelTree.Visible = False then
    begin
        stWorkRec_Dummy.nDivision := 9;
        stWorkRec_Dummy.strExCode := '          ';
        stWorkRec_Dummy.iNCode := 0;
        stWorkRec_Dummy.iSyokuti := 0;
        stWorkRec := @stWorkRec_Dummy;
    end
    else
        stWorkRec	:= TBaseNode.Data;
//<KSN> MOD Ed

    //↓<223>
    // 加算先(親)の実在合計区分をチェックする。
    if not fnGetSumKbn(stWorkRec^.iNCode,iSumKbn) then
    begin
        // 取得できない場合はエラー。
        Result := False;
        Exit;
    end;
    // 加算先(親)が実在の場合
    if iSumKbn = 0 then
    begin
        // 総合計のノードに加算元(自身)が存在しているか？
        // 存在していれば何もしない。
        if fnExistsSouGoukei(uvNCODE) then
        begin
            Result := True;
            Exit;
        end
        else
        begin
            // 存在していない場合は総合計のノードを加算先(親)とする。
            exSumNCode := 0;
        end;
    end
    else
    begin
        // 加算先(親)が合計の場合は今までのロジックとなるようにする。
        exSumNCode := stWorkRec^.InCode;
    end;
    //↑<223>

	qmQuery		:= TMQuery.Create(Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, qmQuery);
	gfnJNTSELSetDbName(qmQuery, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	with qmQuery do
	begin
		try
			{EntNo算出}
			Close;
			SQL.Clear;		 							// qmQuery 初期化
//<256> DEL			SQL.Add('Select * from HojyoTree');
			SQL.Add('Select EntNo from HojyoTree');  //<256> ADD
			SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
			SQL.Add('Order by EntNo DESC');
			SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//			SetFld('strSumCode').AsString	:= stWorkRec^.strExCode;
//<223>		SetFld('strSumCode').AsFloat	:= stWorkRec^.InCode;
//<256> DEL			SetFld('strSumCode').AsFloat	:= exSumNCode; //<223>
			SetFld('strSumCode').AsString	:= FormatFloat('0',exSumNCode); //<256> ADD
			Open;

			if Eof = True then
				WkEntNo	:= 100
			else
			begin
				WkEntNo	:= GetFld('EntNo').AsInteger;
				WkEntNo	:= WkEntNo div 100;
				WkEntNo	:= WkEntNo * 100;
				WkEntNo	:= WkEntNo + 100;
			end;

			{HojyoTree書き込み}
			Close;
//<D10>		RequestLive	:= False;
			SQL.Clear;

			SQL.Add('Insert into HojyoTree');
			SQL.Add('(MasterKbn');
			SQL.Add(',PatternNo');
			SQL.Add(',SumNCode');
			SQL.Add(',EntNo');
			SQL.Add(',BasedNCode');
			SQL.Add(',AddKbn)');
			SQL.Add('Values');
			SQL.Add('(:iMasterKbn');
			SQL.Add(',0');
			SQL.Add(',:strSumCode');
			SQL.Add(',:iEntNo');
			SQL.Add(',:strBasedCode');
			SQL.Add(',:iAddKbn)');

			SetFld('iMasterKbn').AsInteger		:= ucTORIHIKI;
//<223>		SetFld('strSumCode').AsFloat		:= stWorkRec^.InCode;
			SetFld('strSumCode').AsFloat		:= exSumNCode; //<223>
			SetFld('iEntNo').AsInteger			:= WkEntNo;
			SetFld('strBasedCode').AsFloat  	:= uvNCODE;
			SetFld('iAddKbn').AsInteger			:= 0;
			if (ExecSQL = False) then
			begin
				ErrorMessageDsp(qmQuery);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				qmQuery.Close;
//				qmQuery.Free;
				result := False;
				Exit;
			end;

			MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

			gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
		finally
			Free;
		end;
	end;

	result := True;
end;

//**************************************************************************
//	Proccess	:	TreeViewを追加or変更
//	Attension	:	DB書き込み後に実行する。
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.fnTreeUpdate(strGCode: String; iSumKbn: Integer);
var
	stWorkRec	: ^TreeViewRec;
	stWorkNode	: TTreeNode;
	NodeInsSW	: Boolean;
	MyTreeNode	: TTreeNode;
	stName		: String;
	iCut		: Integer;
	stCode		: String;
	iCode		: Currency;

begin
    m_bNotStored := True;  //<502_001> ADD
    if PPanelTree.Visible = False then Exit;  //<KSN> ADD
	fnDataRead (strGCode, iSumKbn, 0);					// 実在取引先読み込み

	NodeInsSW	:= True;

	{変更}
	stWorkNode		:= VTreeView.Items[0];
	while stWorkNode <> nil do
	begin
		stWorkRec	:= stWorkNode.Data;
		if strGCode = stWorkRec^.strExCode then
		begin
			stCode := MTOKUI_DMQuery.GetFld('GCode').AsString;
			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
					if stCode <> '' then
					begin
						iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(stCode, 1, iCut);
					end;
				end
				else
				begin
					if stCode <> '' then
					begin
						iCode := StrToInt64(Trim(stCode));
						stCode := CurrToStr(iCode);
					end;
				end;
			end;

			stWorkRec^.strName		:= MTOKUI_DMQuery.GetFld('NMK').AsString;
			stName := stCode + ' ' + MTOKUI_DMQuery.GetFld('NMK').AsString;
			stWorkNode.Text			:= stName;
			NodeInsSW				:= False;
		end;
		stWorkNode	:= stWorkNode.GetNext;
	end;

	{追加}
	if NodeInsSW = True then
	begin
		New (stWorkRec);
		MyTreeNode					:= TBaseNode;
		stWorkRec^.nDivision		:= MTOKUI_DMQuery.GetFld('SumKbn').AsInteger;
		stWorkRec^.strExCode		:= MTOKUI_DMQuery.GetFld('GCode').AsString;
		stWorkRec^.strName			:= MTOKUI_DMQuery.GetFld('NMK').AsString;
		stWorkRec^.iNCode			:= MTOKUI_DMQuery.GetFld('NCode').AsFloat;
		stWorkRec^.iSyokuti			:= MTOKUI_DMQuery.GetFld('SyokuchiKbn').AsInteger;

		stCode := MTOKUI_DMQuery.GetFld('GCode').AsString;
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
					stCode := CurrToStr(iCode);
				end;
			end;
		end;
		stName := stCode + ' ' + MTOKUI_DMQuery.GetFld('NMK').AsString;

		stWorkNode					:= VTreeView.Items.AddChildObject (MyTreeNode, stName, stWorkRec);

		if MTOKUI_DMQuery.GetFld('SumKbn').AsInteger = 0 then
		begin
			stWorkNode.ImageIndex		:= 0;
			stWorkNode.SelectedIndex	:= 1;
		end
		else
		begin
			stWorkNode.ImageIndex		:= 2;
			stWorkNode.SelectedIndex	:= 3;
		end;

		TBaseNode.Expand(False);
	end;
end;


//**************************************************************************
//	Proccess	:	Drag&Drop時の加算チェック
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	nDrapNode	: TTreeNode
//				:	nDropNode	: TTreeNode
//	Retrun		:	Integer		: 0 = Check OK
//				:				: 1	= 総合計取引先をドラッグ
//				:				: 2 = 総合計取引先にドロップ
//				:				: 3 = 重複加算
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnDropCheck(nDragNode: TTreeNode; nDropNode: TTreeNode) : Integer;
var
	stRecDrag	: ^TreeViewRec;
	stRecDrop	: ^TreeViewRec;
	nTreeNode	:	TTreeNode;
	QueryChk	: TMQuery;

begin
	Result			:= 0;
	stRecDrag		:= nDragNode.Data;
	stRecDrop		:= nDropNode.Data;
	if stRecDrop^.nDivision = 0 then
	begin
		nTreeNode := nDropNode.Parent;
		nDropNode := nTreeNode;
		stRecDrop := nDropNode.Data;
	end;

	// 同一加算先には貼り付け禁止
	if stRecDrag^.Incode = stRecDrop^.Incode then
	begin
		MjsMessageBoxEX(Self,'２重加算の為コピーすることができません。','確認',mjInformation,mjOk, mjDefOk);
		exit;
	end;

	{加算順序入れ替え？}
	if nDragNode.Parent = nDropNode then
		exit;

	{合計取引先にドロップしたかチェック}
{	if stRecDrag^.nDivision = 0 then						// 0:実在取引先
	begin
		if stRecDrop^.nDivision = 1 then					// 1:合計取引先
			nTreeNode		:= VTreeView.DropTarget;
	end;

	{加算順序入れ替え？}
{	if nDragNode.Parent <> nTreeNode then
	begin
		{総合計取引先をドラッグ？}
{		if stRecDrag^.nDivision = 9 then
			Result	:= 1
		else
		begin
			{総合計取引先以外にドロップ？}
{			if stRecDrop^.nDivision <> 9 then
			begin
				nTreeNode		:= nTreeNode.getFirstChild;
				{重複加算？}
{				while nTreeNode <> nil do
				begin
					stRecDrop	:= nTreeNode.Data;
					if stRecDrag^.strExCode = stRecDrop^.strExCode then
					begin
						Result	:= 3;
						Break;
					end;
					nTreeNode	:= nTreeNode.getNextSibling;
				end;
			end;
		end;
	end;
}

	// 加算体系ﾁｪｯｸ(移動先ノードに同一ﾚｺｰﾄﾞがあるかどうか)
	QueryChk := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryChk);
	gfnJNTSELSetDbName(QueryChk, dbCorp_Select);		//<D10>
	try
		with QueryChk do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
//<256> DEL			SQL.Add('select * from HojyoTree');
			SQL.Add('select EntNo from HojyoTree');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:iSum AND BasedNCode=:iBased');
			SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//<256> MOD St
//			SetFld('iSum').AsFloat          := stRecDrop^.InCode;
//			SetFld('iBased').AsFloat        := stRecDrag^.InCode;
			SetFld('iSum').AsString          := FormatFloat('0',stRecDrop^.InCode);
			SetFld('iBased').AsString        := FormatFloat('0',stRecDrag^.InCode);
//<256> MOD Ed

			Open;
			if EOF = False then
			begin
				Result	:= -1;
				MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjInformation,mjOk, mjDefOk);
				abort;
			end;
		end;
	finally
		QueryChk.Free;
	end;

end;

//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP004001f.fnRebuildTreeViewItems ()                                                 */
//*																									*/
//*	目的	: 取引先登録処理 ﾂﾘｰﾋﾞｭｰ再作成処理                                                        */
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//***************************************************************************************************/
procedure   TJNTCRP004001f.fnRebuildTreeViewItems ();
var
	stWorkRec  : ^TreeViewRec;
	cNode      : TTreeNode;
	strItemName: String;
	stName	   : String;

begin
    if PPanelTree.Visible = False then Exit;  //<KSN> ADD
	VTreeView.Items.BeginUpdate;

	stName := '総合計'+ MasterInfo_DMemDataJHojyoName.AsString;
	VTreeView.Items.Clear;

	New (stWorkRec);

	stWorkRec^.nDivision    	:= 9;
	stWorkRec^.strExCode    	:= '          ';
	stWorkRec^.strName      	:= stName;
//	stWorkRec^.iNCode	    	:= 9;
	stWorkRec^.iNCode	    	:= 0;
	stWorkRec^.iSyokuti	    	:= 0;
	strItemName					:= stName;
	Root_PMTab.BorderCaption	:= ' ' + stName;

	cNode   := VTreeView.Items.AddChildObject (Nil, strItemName, stWorkRec);

	cNode.ImageIndex			:= 2;
	cNode.SelectedIndex			:= 3;
//	cNode.Selected				:= True;

	fnCreateTreeViewItems (cNode);

	VTreeView.Selected := VTreeView.Items[0];
	gbTreeClick := False;

	if TreeView_EnsureVisible(VTreeView.Handle, VTreeView.Selected.ItemID) then
		VTreeView.Invalidate;

	VTreeView.FullExpand ();
	VTreeView.Items.EndUpdate;

end;

//**************************************************************************
//
// 関数	: TJNTCRP004001f.fnCreatTreeViewItems (TTreeNode)
//
// 目的	: 取引先登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ作成処理
//
// 戻り値	: なし,
//
// ﾊﾟﾗﾒｰﾀ	: cSrcNode  = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)
//
//**************************************************************************
procedure   TJNTCRP004001f.fnCreateTreeViewItems (cSrcNode: TTreeNode);
var
	dqMasterTree: TMQuery;
	stWorkRec   : ^TreeViewRec;

begin
	stWorkRec       := cSrcNode.Data;
	dqMasterTree    := TMQuery.Create (Self);

//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, dqMasterTree);
	gfnJNTSELSetDbName(dqMasterTree, dbCorp_Select);		//<D10>

	try
		with (dqMasterTree) do
		begin
			Close ();

			SQL.Clear;
			SQL.ADD ('SELECT ht.BasedNCode, hm.SumKbn, hm.NMK, hm.NCode , hm.GCode,hm.SyokuchiKbn FROM HojyoTree ht,MTOKUI hm ');
			SQL.ADD ('WHERE ht.MasterKbn = :pMKBN and ht.SumNCode = :strSumCode ');
			SQL.ADD (' and hm.RDelKbn =0 and hm.NCode = ht.BasedNCode');
            SQL.Add (' and hm.TemplateKbn=0');              // <112>
			SQL.ADD ('ORDER BY EntNo DESC');

            SetFld('pMKBN').asInteger := ucTORIHIKI;
//<256> DEL			SetFld ('strSumCode').AsFloat    := stWorkRec^.InCode;
			SetFld ('strSumCode').AsString    := FormatFloat('0',stWorkRec^.InCode);  //<256> ADD

			Open ();

			while (not EOF) do
			begin
				fnCreateTreeViewItem (dqMasterTree, cSrcNode);
				NEXT;
			end;

			Close ();
		end;
	finally
		dqMasterTree.Free;
	end;
end;

//**************************************************************************
//
// 関数	: TJNTCRP004001f.fnCreatTreeViewItem (TMQuery; TTreeNode)
//
// 目的	: 取引先登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ作成処理
//
// 戻り値	: なし,
//
// ﾊﾟﾗﾒｰﾀ	: dqMasterTree  = 補助加算体系ﾏｽﾀ用ｸｴﾘｰ
//		  cSrcNode      = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)
//
//**************************************************************************
procedure   TJNTCRP004001f.fnCreateTreeViewItem (dqMasterTree: TMQuery; cSrcNode: TTreeNode);
var
	stWorkRec   : ^TreeViewRec;
	cNode       : TTreeNode;
	iCut		: Integer;
	stCode		: String;
	stName		: String;
	iCode		: Currency;

begin
	New (stWorkRec);

	with (dqMasterTree) do
	begin
		stWorkRec^.strExCode	:= FieldByName ('GCode' ).AsString;
//		stWorkRec^.strExCode	:= FieldByName ('BasedNCode' ).AsString;
		stWorkRec^.nDivision	:= FieldByName ('SumKbn'    ).AsInteger;
		stWorkRec^.strName		:= FieldByName ('NMK').AsString;
		stWorkRec^.iNCode		:= FieldByName ('NCode' ).AsFloat;
		stWorkRec^.iSyokuti		:= FieldByName ('SyokuchiKbn' ).AsInteger;

//		stCode := FieldByName ('BasedNCode' ).AsString;
		stCode := FieldByName ('GCode' ).AsString;
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
					stCode := CurrToStr(iCode);
				end;
			end;
		end;
		stName := stCode + ' ' + FieldByName ('NMK').AsString;

		cNode	:= VTreeView.Items.AddChildObjectFirst (cSrcNode, stName, stWorkRec);

		if  (stWorkRec^.nDivision = 0) then
		begin
			cNode.ImageIndex    := IC_JCLOSE;
			cNode.SelectedIndex := IC_JOPEN;
		end
		else
		begin
			cNode.ImageIndex    := IC_GMCLOSE;
			cNode.SelectedIndex := IC_GMOPEN;

			fnCreateTreeViewItems (cNode);
		end;
	end;
end;

//**************************************************************************
//
// 関数	: TJNTCRP004001f.fnRebuildTreeViewItemsHagure ()
//
// 目的	: 取引先登録処理 ﾂﾘｰﾋﾞｭｰはぐれマスタ作成処理
//
// 戻り値	: なし,
//
//**************************************************************************
function   TJNTCRP004001f.fnRebuildTreeViewItemsHagure (): Boolean;
var
	cNode      : TTreeNode;

begin
//<KSN> ADD St
    if PPanelTree.Visible = False then
    begin
        result := True;
        Exit;
    end;
//<KSN> ADD Ed
	VTreeView.Items.BeginUpdate;

	cNode   := VTreeView.Items[0];

	if fnCreateTreeViewItemsHagure (cNode, 0) = False then
	begin
		result := False;
		abort;
		exit;
	end;

	VTreeView.Selected := VTreeView.Items[0];
	gbTreeClick := False;

	if TreeView_EnsureVisible(VTreeView.Handle, VTreeView.Selected.ItemID) then
		VTreeView.Invalidate;

	VTreeView.FullExpand ();
	VTreeView.Items.EndUpdate;

	result := True;
end;


//**************************************************************************
//
// 関数	: TJNTCRP004001f.fnCreatTreeViewItemsHagure (TTreeNode)
//
// 目的	: 取引先登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑはぐれマスタ作成処理
//
// 戻り値	: なし,
//
// ﾊﾟﾗﾒｰﾀ	: cSrcNode  = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)
//
//**************************************************************************
function   TJNTCRP004001f.fnCreateTreeViewItemsHagure (cSrcNode: TTreeNode; iFlg : Integer): Boolean;
var
	dqMasterTree : TMQuery;
	dqMasterWrite: TMQuery;
	stWorkRec    : ^TreeViewRec;
	iEntNo		 : Integer;

begin
	stWorkRec       := cSrcNode.Data;
	dqMasterTree    := TMQuery.Create (Self);
	dqMasterWrite   := TMQuery.Create (Self);

//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, dqMasterTree);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, dqMasterWrite);
	gfnJNTSELSetDbName(dqMasterTree, dbCorp_Select);		//<D10>
	gfnJNTSELSetDbName(dqMasterWrite, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	SessionPractice(C_ST_PROCESS); //<MHIS> ADD

	try
		with (dqMasterTree) do
		begin
			Close ();

			if iFlg = 0 then
			begin
				SQL.Clear;
				SQL.ADD('SELECT MA.GCode,MA.NMK,MA.SumKbn,MA.NCode,MA.SyokuchiKbn ');
				SQL.ADD('FROM MTOKUI MA');
				SQL.ADD('where MA.NCode not in(select TR.BasedNCode from HojyoTree TR where TR.MasterKbn=:pMKBN)');
				SQL.ADD('and MA.RDelKbn = 0');
                SQL.Add('and MA.TemplateKbn=0');            // <112>
				SQL.ADD('Order By MA.GCode');
			end
			else
			begin
				SQL.Clear;
				SQL.ADD ('SELECT TR.BasedNCode, MA.SumKbn, MA.NMK, MA.NCode,MA.SyokuchiKbn FROM HojyoTree TR, MTOKUI MA ');
				SQL.ADD ('WHERE TR.MasterKbn = :pMKBN and TR.SumNCode = :strSumCode ');
				SQL.ADD ('and MA.RDelKbn =0 and MA.GCode = TR.BasedNCode');
                SQL.Add ('and MA.TemplateKbn=0');           // <112>
				SQL.ADD ('ORDER BY EntNo DESC');

//<256> DEL				ParamByName ('strSumCode').AsFloat  := stWorkRec^.InCODE;
				ParamByName ('strSumCode').AsString  := FormatFloat('0',stWorkRec^.InCODE);  //<256> ADD
			end;
            ParamByName('pMKBN').asInteger       := ucTORIHIKI;
			Open ();

			if iFlg = 0 then
			begin
				with (dqMasterWrite) do
				begin
					Close ();
					SQL.Clear;
					SQL.ADD('SELECT EntNo From HojyoTree');
					SQL.ADD('Where MasterKbn=:pMKBN AND SumNCode =:stSum');
					SQL.ADD('Order by EntNo DESC');
                    ParamByName('pMKBN').asInteger       := ucTORIHIKI;
					SetFld('stSum').AsInteger := 0;

					Open;

					if EOF = False then
						iEntNo := GetFld('EntNo').AsInteger
					else
						iEntNo := 0;
				end;

				// はぐれマスタ書込み
				while (not EOF) do
				begin
					with (dqMasterWrite) do
					begin
						iEntNo := iEntNo + 100;
						SQL.Clear;
						SQL.ADD ('Insert Into HojyoTree ');
						SQL.ADD ('(MasterKbn, PatternNo, SumNCode, EntNo, BasedNCode, AddKbn) ');
						SQL.ADD ('Values (:pMKBN, 0, :stSum, :iEnt, :stBased, 0) ');
        				SetFld('pMKBN').AsInteger    := ucTORIHIKI;
						SetFld('stSum').AsInteger    := 0;
						SetFld('iEnt').AsInteger     := iEntNo;
						SetFld('stBased').AsFloat    := dqMasterTree.GetFld('NCode').AsFloat;

						if (ExecSQL = False) then
						begin
							ErrorMessageDsp(dqMasterWrite);
							MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
							dqMasterWrite.Close;
//							dqMasterWrite.Free;
							result := False;
							Exit;
						end;

//<244>commitは最後でやるのでここはカット
//						MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

						gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ

						dqMasterTree.NEXT;
					end;
				end;

				dqMasterTree.First;
			end;

			while (not EOF) do
			begin
				if fnCreateTreeViewItemHagure (dqMasterTree, cSrcNode, iFlg) = False then
				begin
					result := False;
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)<244>Rollbackが無かったので追加
					abort;
					exit;
				end;
				NEXT;
			end;

			Close ();
		end;
	finally
		dqMasterTree.Free;
		dqMasterWrite.Free;

		SessionPractice(C_ED_PROCESS); //<MHIS> ADD
	end;

	result := True;

	MDataModule.Commit (dbCorp_Select);		// ｺﾐｯﾄ(反映)<244>これがないために、BeginTranをしたままになっていた。

end;


//**************************************************************************
//
// 関数	: TJNTCRP004001f.fnCreatTreeViewItemHagure (TMQuery; TTreeNode)
//
// 目的	: 取引先登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑはぐれマスタ作成処理
//
// 戻り値	: なし,
//
// ﾊﾟﾗﾒｰﾀ	: dqMasterTree  = 補助加算体系ﾏｽﾀ用ｸｴﾘｰ
//			  cSrcNode      = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)
//
//**************************************************************************
function   TJNTCRP004001f.fnCreateTreeViewItemHagure (dqMasterTree: TMQuery; cSrcNode: TTreeNode; iFlg : Integer): Boolean;
var
	stWorkRec   : ^TreeViewRec;
	cNode       : TTreeNode;
	iCut		: Integer;
	stCode		: String;
	stName		: String;
	iCode		: Currency;

begin
	New (stWorkRec);

	with (dqMasterTree) do
	begin

		if iFlg =  1 then
		begin
//			stWorkRec^.strExCode	:= FieldByName ('BasedNCode' ).AsString;
			stWorkRec^.InCode   	:= FieldByName ('BasedNCode' ).AsFloat;
			stCode := FieldByName ('BasedNCode' ).AsString;
		end
		else
		begin
			stWorkRec^.strExCode	:= FieldByName ('GCode' ).AsString;
			stCode := FieldByName ('GCode' ).AsString;
		end;

		stWorkRec^.nDivision	:= FieldByName ('SumKbn'    ).AsInteger;
		stWorkRec^.strName		:= FieldByName ('NMK').AsString;
		stWorkRec^.iNCode		:= FieldByName ('NCode'    ).AsFloat;
		stWorkRec^.iSyokuti		:= FieldByName ('SyokuchiKbn').AsInteger;

		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
					stCode := CurrToStr(iCode);
				end;
			end;
		end;
		stName := stCode + ' ' + FieldByName ('NMK').AsString;

		cNode	:= VTreeView.Items.AddChildObject (cSrcNode, stName, stWorkRec);

		if  (stWorkRec^.nDivision = 0) then
		begin
			cNode.ImageIndex    := IC_JCLOSE;
			cNode.SelectedIndex := IC_JOPEN;
		end
		else
		begin
			cNode.ImageIndex    := IC_GMCLOSE;
			cNode.SelectedIndex := IC_GMOPEN;

			if fnCreateTreeViewItemsHagure (cNode, 1) = False then
			begin
				result := False;
				abort;
				exit;
			end;
		end;
	end;

	result := True;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin

	if (Key = VK_INSERT) then
		abort;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Goukei_DdxDBGridKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin

	if (Key = VK_INSERT) then
		abort;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyUp
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridKeyUp(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
	if giReferFlag = REFER then
		exit;

	if (Key = VK_UP) then
	begin
//		B_Delete.Enabled := True;
//		TPDelKouji.Enabled := True;
//<Authority> MOD St
{
		GFBlue.Enabled   := m_cJNTArea.IsFusen;
		GFGreen.Enabled  := m_cJNTArea.IsFusen;
		GFOrange.Enabled := m_cJNTArea.IsFusen;
		GFRed	.Enabled    := m_cJNTArea.IsFusen;
}
		GFBlue.Enabled   := m_JNTAuthority.IsFusen;
		GFGreen.Enabled  := m_JNTAuthority.IsFusen;
		GFOrange.Enabled := m_JNTAuthority.IsFusen;
		GFRed	.Enabled    := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
	end;

	if (Key = VK_INSERT) then
		abort;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyUp
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Goukei_DdxDBGridKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if giReferFlag = REFER then
		exit;

	if (Key = VK_UP) then
	begin
//		B_Delete.Enabled := True;
//		TPDelKouji.Enabled := True;
//<Authority> MOD St
{
		GFBlue.Enabled   := m_cJNTArea.IsFusen;
		GFGreen.Enabled  := m_cJNTArea.IsFusen;
		GFOrange.Enabled := m_cJNTArea.IsFusen;
		GFRed.Enabled    := m_cJNTArea.IsFusen;
}
		GFBlue.Enabled   := m_JNTAuthority.IsFusen;
		GFGreen.Enabled  := m_JNTAuthority.IsFusen;
		GFOrange.Enabled := m_JNTAuthority.IsFusen;
		GFRed.Enabled    := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
	end;

	if (Key = VK_INSERT) then
		abort;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnMouseDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
	iFocus	:	Integer;
	cField	:	TField;
begin
	iFocus := Jituzai_DdxDBGrid.FocusedColumn;					// ﾌｫｰｶｽ位置

	case iFocus of
		COL_FUSEN:
		begin
			cField  := JHojyoMA_DMemDataGCode;
			cField.FocusControl;
			abort;
			exit;
		end;
		COL_GCODE:							// 外部コード
		begin
		end;
		COL_REN:
		begin
		end;
		COL_L_NAME:
		begin
		end;
		COL_S_NAME:
		begin
		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnBeforeChangeColumn
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	stWork		:	String;
	QueryRead	:	TMQuery;
	stMessageRec: TMJSMsgRec;
//↓<Rel>
    iSumKbn : Integer;
    cField  : TField;
//↑<Rel>
begin
	if m_fEnd = 1 then
		Exit;

	// 移動元
	case Column of
		COL_GCODE:							// 外部コード
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			begin
				stWork := JHojyoMA_DMemDataGCode.AsString;
				if JHojyoMA_DMemData.State in [dsInsert] then		// 新規ﾃﾞｰﾀ？
				begin
					stWork := TrimRight(stWork);
					JHojyoMA_DMemDataGCode.AsString := stWork;
				end;
			end
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
					stWork := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
				else
					stWork := '';
			end;

			if JHojyoMA_DMemData.State in [dsInsert] then		// 新規ﾃﾞｰﾀ？
			begin
    			//　外部コードの0は許さない
				if (stWork = '') or (stWork = '0000000000000000') then
				begin
					if not (MasterInfo_DMemDataCodeAttr.AsInteger = 2)          //<CD16_2> ﾌﾘｰｺｰﾄﾞ？あるいは空白？
					   or  (stWork = '')  then 									//<CD16_2>
					begin
//					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
//					Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;					// コードに初期ﾌｫｰｶｽ
//					abort;
						CanChange := False;
						Exit;
					end;
				end;
			end;

			if JHojyoMA_DMemDataGCode.ReadOnly = False then
			begin
				// フリーコードチェック
				if not JNTMASERRORCODECHECK(stWork,gstErrorStr) then
				begin
					ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg,MjsMsgRec.sTitle,MjsMsgRec.icontype,MjsMsgRec.btntype,MjsMsgRec.btndef,MjsMsgRec.LogType);
					CanChange := False;
					Abort;
				end;

				QueryRead := TMQuery.Create (Self);
//<D10>			MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
				gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

				try
					with QueryRead do
					begin
						Close;

						SQL.Clear;							    // ｸｴﾘの初期化
						// 取引先を外部ｺｰﾄﾞ昇順でGET
//<256> DEL						SQL.Add('select * from MTOKUI');
						SQL.Add('select GCode from MTOKUI');  //<256> ADD
						SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
						SQL.Add('and TemplateKbn = 0');
//<256> DEL						SQL.Add('order by Gcode');

						SetFld('stGCode').AsString := stWork;
						Open;						            // ｸｴﾘの開始

						if EOF = False then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一' + MasterInfo_DMemDataJHojyoName.AsString + 'が登録済みです。','登録',mjInformation ,mjOk, mjDefOk);
//							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
//							Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;					// コードに初期ﾌｫｰｶｽ
//							abort;
							CanChange := False;
							abort;
//							exit;
						end
                        //↓<Rel>
                        else
                        begin
                            //グループ会計子社の場合、子社になければ、全社にあるかどうかで動作を変更する。
                            // 親会社に既に同一ｺｰﾄﾞが登録されている場合、関連付を行い同期をとる
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 実在/合計区分
                                if ( Root_PMTab.Items [0].Selected ) then
                                        iSumKbn := 0   // 実在
                                else    iSumKbn := 1;  // 合計
                                // 会社関連付処理
                                case fnCorpRelation(stWork,iSumKbn) of
                                    0:  begin
                                            // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                        end;
                                    1:  begin
                                            // 正常に関連付が行えた場合は、画面の再描画を行う
                                            Root_PMTabChange(Root_PMTab);
                                            JHojyoMA_DMemData.Last();  // とりあえず、ﾌｫｰｶｽ位置は最終行
                                            cField := JHojyoMA_DDataSource.DataSet.FieldByName ('GCode');
                                            cField.FocusControl();
                                            Abort;
                                        end;
                                    2:  begin
                                            // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                                            CanChange := False;
                                            Abort;
                                        end;
                                    -1, -9: begin
                                            // 例外ｴﾗｰ
                                            CanChange := False;
                                            Abort;
                                        end;
                                end;
                            end;
                        end;
                        //↑<Rel>
					end;
				finally
					QueryRead.Free;
				end;
			end;
		end;
		COL_REN:
		begin
		end;
		COL_L_NAME:
		begin
			stWork := JHojyoMA_DMemDataSimpleName.AsString;
			if (JHojyoMA_DMemDataLongName.AsString <> '') and (stWork = '') then
			begin
				JHojyoMA_DMemData.Edit;
//<126>				JHojyoMA_DMemDataSimpleName.AsString := MjsCopy(JHojyoMA_DMemDataLongName.AsString, 14);
//<127>				JHojyoMA_DMemDataSimpleName.AsString := MjsCopy(JHojyoMA_DMemDataLongName.AsString, 20);
				JHojyoMA_DMemDataSimpleName.AsString := MjsKabuCut(JHojyoMA_DMemDataLongName.AsString, 20);
			end;
		end;
		COL_S_NAME:
		begin
		end;
	end;

	// ステータスバー消去
	SStatusBar.SimpleText := '';

	case NewColumn of
		COL_S_NAME:
		begin
//			ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 19);
			SStatusBar.SimpleText := stMessageRec.sMsg;
 		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnStateChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.JHojyoMA_DDataSourceStateChange(Sender: TObject);
begin
	if  (JHojyoMA_DMemData.State in [dsInsert]) then
	begin
		Jituzai_DdxDBGrid.Columns[COL_GCODE].ReadOnly := False;
		JHojyoMA_DMemDataGCode.ReadOnly := False;
	end
	else
	begin
		Jituzai_DdxDBGrid.Columns[COL_GCODE].ReadOnly := True;
		JHojyoMA_DMemDataGCode.ReadOnly := True;
	end;

	if  (JHojyoMA_DMemData.Active) then
	begin
		if  (JHojyoMA_DMemData.RecordCount = 0) then
		begin
			Jituzai_DdxDBGrid.Columns [COL_GCODE].ReadOnly := False;
			JHojyoMA_DMemDataGCode.ReadOnly := False;
		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.VTreeViewExit(Sender: TObject);
var
	strActiveControl	:	String;		// <MYN10-3>
begin
	gbTreeClick := False;

	m_SearchInfo.sKojCD := '';

	if (m_AcControl = Jituzai_DdxDBGrid) then
	begin
		if (m_AcControl = Jituzai_DdxDBGrid) and
			(JHojyoMA_DMemData.Eof = False)then
		begin
//<Authority> MOD St
{
			B_Fusen.Enabled    := m_cJNTArea.IsFusen;
			B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
			B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
			B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
			exit;
		end;

		B_Fusen.Enabled    := False;
		B_FusenBar.Enabled := False;
	end
	else
	begin
		B_Fusen.Enabled    := False;
		B_FusenBar.Enabled := False;
	end;

// <MYN10-3> ins -s
	strActiveControl	:= Screen.ActiveControl.Name;	// 移動先コントロールを取得

	// ツリーからフォーカスが抜ける場合、移動先が情報区分コンボなら個人番号をマスクする。
	if (f0MYNKbn.Text = MYN_KOJIN) and        		// 個人
	   (strActiveControl = 'ECombo_Header')	then
	begin
		m_MaskCancel			:= False;
		f0MYNNo.PasswordChar	:= '*';          	// マスクする
	end;
// <MYN10-3> ins -e
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.VTreeViewChange(Sender: TObject; Node: TTreeNode);
var
	Node1			:	TTreeNode;
	NodeOya			:	TTreeNode;
//<KSN> DEL	NodeOya2		:	TTreeNode;
	stWorkRecSelect	:	^TreeViewRec;
	stWorkRecOya	:	^TreeViewRec;
//<KSN> DEL	stWorkRecOya2	:	^TreeViewRec;
	stGCode			:	String;
	stMemGCode		:	String;
	bFlg			:	Boolean;
	cNodeWork  : TTreeNode;
begin
	if  m_fAccessTree = False then
		exit;

    m_EdtSw := False;                       // <130>変更ﾌﾗｸﾞOFF
//<194>
//<198>
//    B_ImportWF.Enabled := False;            // <WF>申請書参照ﾎﾞﾀﾝ
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ

	m_fTreeClk := 1;								// TreeClickﾌﾗｸﾞ
	uvCopyMtokui	:=	False;						//<2257-6>取引先コピーフラグのOFFが抜けていた、付箋に関係するため。

	Node1 := VTreeView.Selected;
	stWorkRecSelect := Node1.Data;
	if (stWorkRecSelect^.nDivision = 9) then
	begin
		B_Delete.Enabled   := False;
		B_Fusen.Enabled    := False;
		B_FusenBar.Enabled := False;
	end
	else
	begin
//<Authority> MOD St
{
		B_Fusen.Enabled    := m_cJNTArea.IsFusen;
		B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
		B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
		B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
//<Authority> DEL        if m_cJNTArea.IsDelete = False then//削除権限がない為使用不可
        if m_JNTAuthority.IsDelete = False then//削除権限がない為使用不可  //<Authority> ADD
        begin
            B_Delete.Enabled := False;
        end
        else
        begin
            if stWorkRecSelect^.iSyokuti <> 0 then
                B_Delete.Enabled := fnRecordCount()
            else
                B_Delete.Enabled := True;
        end;
	end;

	cNodeWork	:= Node.GetFirstChild ();

	if (stWorkRecSelect^.nDivision = 1) then
    begin
        if (cNodeWork <> nil) then
    		B_Delete.Enabled   := False
        else
//<Authority> DEL      		B_Delete.Enabled   := m_cJNTArea.IsDelete;//削除権限を考慮
      		B_Delete.Enabled   := m_JNTAuthority.IsDelete;//削除権限を考慮  //<Authority> ADD
    end;

	gbTreeClick := True;

	MemPost_Sw := 1;
	m_fAccessTree    := False;
	m_fAccessTab	 := False;
{<239> DEL St
    if stWorkRecSelect^.nDivision = 1 then				// 合計取引先だった場合
    begin
        NodeOya := Node1.Parent;
        stWorkRecOya := NodeOya.Data;
        if stWorkRecOya^.nDivision = 1 then				// 親が合計取引先だった場合
        begin
            if B_Syousai.Caption = '詳細(&T)' then
            begin
                Root_PMTab.Items.Selected		:= PAGE_JITUZAI;
                Root_PMTab.Items[1].Enabled		:= False;
            end
            else
            begin
                Root_PMTab.Items.Selected		:= PAGE_GOKEI;
                Root_PMTab.Items[1].Enabled		:= True;
            end;
        end
        else
            Root_PMTab.Items[1].Enabled := True;
    end
    else
    begin
        if stWorkRecSelect^.nDivision = 0 then				// 実在取引先だった場合、親を見る
        begin
            NodeOya := Node1.Parent;
            stWorkRecOya := NodeOya.Data;
            if stWorkRecOya^.nDivision = 1 then				// 合計取引先だった場合、更に親を見る
            begin
                NodeOya2 := NodeOya.Parent;
                stWorkRecOya2 := NodeOya2.Data;
                if stWorkRecOya2^.nDivision = 1 then			// 親の親が合計取引先だった場合、子供は実在のみとする
                begin
                    if Root_PMTab.Items.Selected = PAGE_GOKEI then
                    begin
                        if B_Syousai.Caption = '詳細(&T)' then
                            Jituzai_PPanel_Grid.Visible 	:= True;

                        Root_PMTab.Items.Selected := PAGE_JITUZAI;
                    end;
                    Root_PMTab.Items[1].Enabled := False;
                end
                else
                begin
                    if B_Syousai.Caption <> '詳細(&T)' then
                        Root_PMTab.Items.Selected := PAGE_JITUZAI;

                    Root_PMTab.Items[1].Enabled := True;
                end;
            end
            else
            begin
                if B_Syousai.Caption <> '詳細(&T)' then
                begin
                    Root_PMTab.Items.Selected := PAGE_JITUZAI;
                end;

                Root_PMTab.Items[1].Enabled := True;
            end;
        end
        else
            Root_PMTab.Items[1].Enabled := True;
    end;
<239> DEL Ed}

	m_fAccessTree    := True;
	m_fAccessTab	 := True;

	bFlg := False;

	Node1 := VTreeView.Selected;
	NodeOya := Node1.Parent;
	stWorkRecSelect := Node1.Data;

	stGCode := Trim(stWorkRecSelect^.strExCode);

	if B_Syousai.Caption <> '詳細(&T)' then
	begin
		if stWorkRecSelect^.nDivision = 1 then
		begin
			m_cNodeRightClk := VTreeView.Selected;
			TPDetailClick(Self);
			MemPost_Sw := 0;
			m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
    		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
  			begin
                fnCompVisible(True);
			end
			else
			begin
                m_bNotStored := True;  //<502_001> ADD
				fnDataRead (stGCode, 1, 0);				// 2004/07/09
				SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
				fnMemSet (1, False);
				fnCreateCard (1);
                fnCompVisible(False);
			end;
            PMTab.Items.Selected := PAGE_KIHON;
{//↓<2257>合計でもﾌﾘｰ項目登録を表示するためｺﾒﾝﾄｱｳﾄ
			if Root_PMTab.Items.Selected = 0 then
                fnSetFncType(1)
            else
                fnSetFncType(0);
            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
//↑<2257>}
			fnSetFncTypeSelect();	//<2257>
            Exit;
		end;
	end;

    if JHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
        JHojyoMA_DMemData.Cancel;

    JHojyoMA_DMemData.DisableControls; //<249>

    if JHojyoMA_DMemData.RecordCount <> 0 then
        JHojyoMA_DMemData.First;
    while JHojyoMA_DMemData.Eof = False do
    begin
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            stMemGCode := JHojyoMA_DMemDataGCode.AsString
        else
        begin
            if JHojyoMA_DMemDataGCode.AsString <> '' then
                stMemGCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
            else
                JHojyoMA_DMemData.Next;
        end;

        if stMemGCode = stGCode then
        begin
            bFlg := True;
            break;
        end
        else
            JHojyoMA_DMemData.Next;
    end;

	if bFlg = False then
	begin
		if JHojyoMA_DMemData.RecordCount <> 0 then
			JHojyoMA_DMemData.First;
	end;

    JHojyoMA_DMemData.EnableControls; //<249>

	MemPost_Sw := 0;

	if B_Syousai.Caption <> '詳細(&T)' then
	begin
{//↓<2257-2>合計情報から実在取引先を選択した時にelseに流れ実在取引先を合計取引先として取り扱っていた。
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            fnDataRead (stGCode, 0, 0);				// 2004/07/09
//            SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
//<199>
			memFsn.Close;	memFsn.Open;
            fnMemSet (0, False);
            fnCreateCard (0);
            fnCompVisible(True)
        end
        else
        begin
            fnDataRead (stGCode, 1, 0);				// 2004/07/09
            SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
            fnMemSet (1, False);
            fnCreateCard (1);
            fnCompVisible(False);
        end;
}//↑<2257-2>
//↓<2257-2>
		if stWorkRecSelect^.nDivision <> 9 then
		begin
            m_bNotStored := True;  //<502_001> ADD
            if Root_PMTab.Items.Selected = PAGE_GOKEI then
            //合計情報から実在の取引先をツリーで選択された時は一度初期化を行う。
            begin
                m_cNodeRightClk := VTreeView.Selected;
                TPDetailClick(Self);
                MemPost_Sw := 0;
                m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
            end;
            fnDataRead (stGCode, 0, 0);
            memFsn.Close;	memFsn.Open;
            fnMemSet (0, False);
            fnCreateCard (0);
            fnCompVisible(True);
		end;
//↑<2257-2>
//<151>        PMTab.Items.Selected := PAGE_KIHON;
{<2257>
        if Root_PMTab.Items.Selected = 0 then
            fnSetFncType(1)
        else
            fnSetFncType(0);
        MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
<2257>}
		fnSetFncTypeSelect();	//<2257>
	end;

	if (stWorkRecSelect^.nDivision = 9) or (stWorkRecSelect^.nDivision = 1) then
	begin
		stGCode := stWorkRecSelect^.strExCode;
	end
	else
	begin
		stWorkRecOya := NodeOya.Data;
		stGCode := stWorkRecOya^.strExCode;
	end;
{
	if JHojyoMA_DMemData.FieldByName('SyokuchiKbn').AsInteger  = 0 then
    begin
        B_Delete.Enabled := True;
		TPDelete.Enabled := True;
    end
	else
    begin
        lvFlg := fnRecordCount();
		B_Delete.Enabled := lvFlg;
		TPDelete.Enabled := lvFlg;
    end;
}
	if m_stGCodeSave = stGCode then
	begin
		m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
		Exit;
	end;

	if Node1 = nil then
	begin
		m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
		Exit;
	end;

	m_stGCodeSave := stGCode;							// ｺｰﾄﾞのｾｰﾌﾞ


	MemPost_Sw := 1;
//<503_001> DEL    m_bNotStored := True;  //<502_001> ADD
	fnCreateAll ();
	MemPost_Sw := 0;

	m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化

	MemPost_Sw := 1;

	MemPost_Sw := 0;

	{初期フォーカス}
{    if BSpeedButtonIS.Caption = '詳細(&T)' then
        fnCreateGrid (TBaseNode, Root_PMTab.Items.Selected)
    else
    	//カードデータ作成
		fnCreateCard (Root_PMTab.Items.Selected);
}
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.PMTabChange(Sender: TObject);
var
    iEndTab : Integer;
begin
    //↓<Vista>
    // ScrollBoxにボタンを乗せたため、後ろに隠れてしまうので前面にする。
    BtnPagePrevious.BringToFront;
    BtnPageNext.BringToFront;
    Jituzai_BBitBtn_Ok.BringToFront;
    Jituzai_BBitBtn_Cancel.BringToFront;
    //↑<Vista>

    //<150>ST-------------------------
    // 最終TAB項目ｾｯﾄ
    iEndTab := 0;
    if (Root_PMTab.Items.Selected  = PAGE_JITUZAI) then
        iEndTab := PAGE_Br
    else if (Root_PMTab.Items.Selected = PAGE_GOKEI) then
        iEndTab := PAGE_Saiyo;

    // *** BitBtnの使用不可制御 ***
    if (PMTab.Items.Selected = PAGE_KIHON) then
        BtnPagePrevious.Enabled := False
    else
        BtnPagePrevious.Enabled := True;

    if (PMTab.Items.Selected = iEndTab) then
        BtnPageNext.Enabled := False
    else
        BtnPageNext.Enabled := True;
    //<150>ED-------------------------

// <MYN10-3> ins -s 「基本情報」タブ切替時、マスクする
	if (f0MYNKbn.Text = MYN_KOJIN) then		// 個人
	begin
		m_MaskCancel			:= False;
		f0MYNNo.PasswordChar	:= '*';          	// マスクする
	end;
// <MYN10-3> ins -e

	if giReferFlag = REFER then
		exit;

    // ﾀﾌﾞでのｷｰ移動時には以下の処理を行わない
	if  m_fAccessTabJ = False then
	begin
		m_fAccessTabJ := True;
		exit;
	end;

//<198>
//<244>	if LSinsei.Visible	then
	if (LSinsei.Visible) and (m_recOther.CanUpdate = False) then //<244>[申請書参照]ラベルが表示 かつ 登録申請を取り込む場合は、この関数をぬける。
		Exit;


//<226>↓
    if (uvChgCOUNTRY) then
    begin
        if not fnFldChk(f0ECOUNTRY, False) then
            Exit;
    end;
    if (uvChgCurrency) then
    begin
        if not fnFldChk(f0ECURRENCY, False) then
            Exit;
    end;
//<226>↑

    // ﾏｳｽｸﾘｯｸによるﾀﾌﾞ移動の場合、先頭ﾌｨｰﾙﾄﾞへﾌｫｰｶｽを移動する <186>
    if fnGetLastFLD = '' then
    begin
        if      (Root_PMTab.Items.Selected = PAGE_JITUZAI) then
        begin
            if PMTab.Items.Selected = PAGE_Br then
                // 更新ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok')
            else
                // 次頁ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                MjsDispCtrl.MjsSetFocus(Self, 'BtnPageNext');
        end
        else if (Root_PMTab.Items.Selected = PAGE_GOKEI) then
        begin
            if PMTab.Items.Selected = PAGE_Saiyo then
                // 更新ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok')
            else
                // 次頁ﾎﾞﾀﾝへﾌｫｰｶｽを移動
                MjsDispCtrl.MjsSetFocus(Self, 'BtnPageNext');
        end
    end
    else
    begin
//<KSN> MOD St
//        PMTab.SetFocus;
//        MjsNextCtrl(Self);
        if m_bShowStart = True then
        begin
            PMTab.SetFocus;
            MjsNextCtrl(Self);
        end;
//<KSN> MOD Ed
    end;

{
	if PMTab.Items.Selected = PAGE_KIHON then
	begin
        MjsDispCtrl.MjsSetFocus(Self, 'f0LongName');
		abort;
		exit;
	end
    else if PMTab.Items.Selected = PAGE_Saiyo then
    begin
        MjsDispCtrl.MjsSetFocus(Self, 'f1TSKBN');
		abort;
		exit;
	end
    else if PMTab.Items.Selected = PAGE_Seg then
    begin
        if f2SgCode1.Enabled then
            MjsDispCtrl.MjsSetFocus(Self, 'f2SgCode1');
		abort;
		exit;
	end
    else if PMTab.Items.Selected = PAGE_Br then
    begin
        if f3TBrCode1.Enabled then
            MjsDispCtrl.MjsSetFocus(Self, 'f3TBrCode1')
        else if f3SBrCode1.Enabled then
            MjsDispCtrl.MjsSetFocus(Self, 'f3SBrCode1');
		abort;
		exit;
	end;
}
end;

//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridExit(Sender: TObject);
begin
{	if m_fEnd = 0 then
	begin
		if JHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
		begin
			if JHojyoMA_DMemDataGCode.AsString <> '' then
				JHojyoMA_DMemData.Post
			else
				JHojyoMA_DMemData.Cancel;
		end;
	end;
}
end;

//**************************************************************************
//	Proccess  :	郵便番号入力のOnArrowClickの共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//					ArrowClickによる郵便番号辞書Expの呼び出し
//	Name	  :	Sin.Nakamura
//	Date	  :	2000/ 08 / 28
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.CmnPostShow(Sender: TObject);
var
	sAdr1  :	String;
	sAdr2  :	String;
	sZip   :	String;
	iZip1  :	Integer;
	iZip2  :	Integer;
	iValue :	Integer;
begin
	if Sender is TMNumEdit then							// 郵便番号枝番入力
	begin
        iZip1 := Trunc(f0ZipCode1.Value);			// 基番 取得
        iZip2 := Trunc(f0ZipCode2.Value);			// 枝番 取得

		sZip  := MjsEditNum(iZip1,'0000',3);					// 基番文字列変換
		if iZip2 <> 0 then
			sZip  := sZip + '-' + MjsEditNum(iZip2,'0000',4);	// 枝番文字列変換

		sAdr1 := '';
		sAdr2 := '';
	end
	else												// 住所上段入力
	begin
		sZip  := '';
        sAdr1 := f0Address1.Text;					// 住所上段 取得
        sAdr2 := f0Address2.Text;					// 住所下段 取得
	end;

	iValue := fnCMNPostShow(sZip,sAdr1,sAdr2,0);		// 郵便番号辞書Exp 起動
	if iValue = 1 then
	begin
		iZip1 := StrToInt(MjsCopy(sZip,3));				// 基番 取り出し
		iZip2 := StrToInt(Copy(sZip,5,4));				// 枝番 取り出し

		if Sender is TMNumEdit then
		begin
            if (f0Address1.Text <> '') or
               (f0Address2.Text <> '') then
            begin
                Beep;
                iValue := MjsMessageBoxEX(Self,'住所を上書きしてもよろしいですか？','郵便番号検索',
                                          mjQuestion,mjYesNo,mjDefYes);
                if iValue <> mrYes then
                    Exit;
            end;
		end;

        f0ZipCode1.Value := iZip1;					// 基番 SET
        f0ZipCode2.Value := iZip2;					// 枝番 SET
        //↓<PST2>
        if (iZip1 <> 0) then
        begin
        	f0ZipCode2.Zero := True;
        end
        else
        begin
        	f0ZipCode2.Zero := False;
        end;
        //↑<PST2>
        f0Address1.Text  := sAdr1;					// 住所上段 SET
        f0Address2.Text  := sAdr2;					// 住所下段 SET
	end
	else if iValue < 0 then
	begin
		MjsMessageBox(Self,'郵便番号辞書の呼び出しに失敗しました',mjError,mjDefOk);
		Exit;
	end;
end;

//**************************************************************************
//	Component	:	MemData
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.JHojyoMA_DMemDataBeforePost(DataSet: TDataSet);
var
	stCode,
    stCode2  	:	String;
	QueryRead	:	TMQuery;
    iCut        :   Integer;
    iCode       :   Extended; // <187>
//↓<DOJI-2>
	strGCode    :   string;
	iSumKbn		:   Integer;
//↑<DOJI-2>
begin
	if 	MemPost_Sw <> 0 then
		exit;

	if m_fEnd = 1 then
		Exit;

	if Jituzai_PPanel_Grid.Visible = False then
		abort;

	// 外部ｺｰﾄﾞ
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		stCode := JHojyoMA_DMemDataGCode.AsString;
		stCode := TrimRight(stCode);
		JHojyoMA_DMemDataGCode.AsString := stCode;
	end
	else
	begin
		if JHojyoMA_DMemDataGCode.AsString <> '' then
			stCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
		else
			stCode := '';

        // ↓↓↓<167>
        stCode2:=stCode;
        if ( MasterInfo_DMemDataCodeAttr.AsInteger = 1 ) then
        begin
            if ( stCode2 <> '' ) then
            begin
                iCut    :=  16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                System.Delete(stCode2, 1, iCut);
            end;
        end
        else
        begin
            if ( stCode2 <> '' ) then
            begin
                iCode   :=  StrToInt64(Trim(stCode2));
                stCode2 :=  FloatToStr(iCode);
            end;
        end;

        JHojyoMA_DMemDataGCode.AsString := stCode2;
        // ↑↑↑<167>
	end;


	// 外部ｺｰﾄﾞの0は許さない
	if JHojyoMA_DMemData.State in [dsInsert] then		    // 新規ﾃﾞｰﾀ？
	begin
		if (stCode = '') or (stCode = '0000000000000000') then
		begin
			if not (MasterInfo_DMemDataCodeAttr.AsInteger = 2)			        //<CD16_2> ﾌﾘｰｺｰﾄﾞ？あるいは空白？
			   or  (stcode = '')  then		 									//<CD16_2>
			begin
				if B_Syousai.Caption = '詳細(&T)' then
				begin
					Beep;
					Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
					abort;
					exit;
				end
				else
				begin
					Beep;
//<CD16_2>				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
//<CD16_2>				MjsSetFocus(Self, 'f0TGCode')	        // 元の場所に戻す
//<CD16_2>				else
					MjsSetFocus(Self, 'f0NGCode');	        // 元の場所に戻す
					abort;
				end;
			end;
		end;
	end;

	if JHojyoMA_DMemData.State in [dsInsert] then		    // 新規ﾃﾞｰﾀ？
	begin
		// ﾌﾘｰｺｰﾄﾞﾁｪｯｸ
		if not JNTMASERRORCODECHECK(stCode,gstErrorStr) then
		begin
			Beep;
//			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg,MjsMsgRec.sTitle,MjsMsgRec.icontype,MjsMsgRec.btntype,MjsMsgRec.btndef,MjsMsgRec.LogType);
			if B_Syousai.Caption = '詳細(&T)' then
			begin
				Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
				abort;
				exit;
			end
			else
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					MjsSetFocus(Self, 'f0TGCode')	        // 元の場所に戻す
				else
					MjsSetFocus(Self, 'f0NGCode');	        // 元の場所に戻す
				abort;
			end;
		end;

		QueryRead := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
		gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

		try
			with QueryRead do
			begin
				Close;

				SQL.Clear;
				// 取引先を外部ｺｰﾄﾞ昇順でGET
//<256> DEL				SQL.Add('select * from MTOKUI');
				SQL.Add('select GCode from MTOKUI');  //<256> ADD
				SQL.Add('where RDelKbn = 0 AND GCode = :GCode');
				SQL.Add('and TemplateKbn = 0');
//<256> DEL				SQL.Add('order by Gcode');
				SetFld('GCode').AsString := stCode;

				Open;						// ｸｴﾘの開始

				if stCode = GetFld('GCode').AsString then
				begin
					if B_Syousai.Caption = '詳細(&T)' then
					begin
						Beep;
						MjsMessageBoxEX(Self,'同一' + MasterInfo_DMemDataJHojyoName.AsString + 'が登録済みです。','登録',mjInformation ,mjOk, mjDefOk);
						Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
						abort;
						exit;
					end
					else
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsSetFocus(Self, 'f0TGCode')	// 元の場所に戻す
						else
							MjsSetFocus(Self, 'f0NGCode');	// 元の場所に戻す
						abort;
					end;
				end;
			end;
		finally
			QueryRead.Free;
		end;
	end
//<196>↓
	else
	begin
		QueryRead := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
		gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

		try
			with QueryRead do
			begin
				Close;

				SQL.Clear;
				// 取引先を外部ｺｰﾄﾞ昇順でGET
				SQL.Add('select NCODE from MTOKUI');
				SQL.Add('where RDelKbn = 0 AND GCode = :GCode');
				SQL.Add('and TemplateKbn = 0');
				SQL.Add('order by Gcode');
				SetFld('GCode').AsString := stCode;

				Open;						// ｸｴﾘの開始

				// 新規で登録した行の内部ｺｰﾄﾞがMemDataにｾｯﾄされていないので、ここでｾｯﾄする。
		        JHojyoMA_DMemDataNCode.AsFloat	:= GetFld('NCode').AsFloat;

				Close;
			end;
		finally
			QueryRead.Free;
		end;
	end;
//<196>↑

{
	try
//		try
			if m_bExFlg <> True then
			begin
				cExcept := TJNTMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> JNTMAS_EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					JHojyoMA_DMemData.Cancel;
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					abort;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
//					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					JHojyoMA_DMemData.Cancel;
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					abort;
				end;
				m_bExFlg 	:= True;
			end;
//		except;
//			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
//			Exit;
//		end;
	finally
//		if cExcept <> nil then
//		begin
//			cExcept.ResetTerm;
//			cExcept.Free;
//			cExcept := nil;
//		end;
	end;
}
//↓<DOJI-2>
    // AfterPostから移動しました。エラーだったときにDataSet.Cancelしたいため。BeforePostだと不可能なため。

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		strGCode	:= JHojyoMA_DMemDataGCode.AsString
	else
	begin
		if JHojyoMA_DMemDataGCode.AsString <> '' then
			strGCode	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
		else
			strGCode := '';
	end;

	iSumKbn := Root_PMTab.Items.Selected;

{		try
			if m_bExFlg <> True then
			begin
				cExcept := TMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					JHojyoMA_DMemData.Cancel;
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					JHojyoMA_DMemData.Cancel;
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				m_bExFlg 	:= True;
			end;
		except;
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;
}
// <109>       f1TSKBN.Checked := False;
// <109>       f1SSKBN.Checked := False;

		// -------------------------------------------------------------------------
		//  ｸﾞﾙｰﾌﾟ管理処理 <Rel>
		//
		//  親子同時に同一ｺｰﾄﾞを指定し、一覧(実在)画面でPostした場合の処理
		//  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合
		//  の考慮が必要。
		// -------------------------------------------------------------------------
		if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( JHojyoMA_DMemData.State in [dsInsert] ) then
		begin
		    case fnCorpRelation ( strGCode, iSumKbn ) of
		        0:  begin
		                // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
		            end;
		        1:  begin
		                // 正常に関連付が行えた場合は、画面の再描画を行う
                        Root_PMTabChange(Root_PMTab);
                        JHojyoMA_DMemData.Last();  // とりあえず、ﾌｫｰｶｽ位置は最終行
		                DataSet.FieldByName('GCode').FocusControl();
		                Abort;
		            end;
		        2:  begin
		                // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
		                DataSet.FieldByName('GCode').FocusControl();
		                Abort;
		            end;
		        -1, -9: begin
		                // 実在合計不一致、例外ｴﾗｰ
		                Abort;
		            end;
		    end;
		end;
		// ↑↑↑<Rel>
		// -------------------------------------------------------------------------

		{ＤＢに書き込み}
// <140>↓
//		if fnDataWrite (strGCode, iSumKbn, False) = False then
        if fnDataWriteGrid (strGCode, iSumKbn) = False then
// <140>↑
		begin
            DataSet.Cancel;
            Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
			abort;
			exit;
		end;

//↑<DOJI-2>
end;

//**************************************************************************
//	Proccess  :	実在EditコンポーネントのExit共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 11 / 9
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.JituzaiEditExit(Sender: TObject);
var
	strGCode	: String;
	iSumKbn		: Integer;
	stWork		: String;
	sAdr1		: String;
	sAdr2		: String;
	sZip		: String;
	iZip1		: Integer;
	iZip2		: Integer;
	iValue		: Int64;
//<KSN> DEL	iCount		: Integer;
	i			: Integer;
//<KSN> DEL	sValue		: String;
//<KSN> DEL	iPos		: Integer;
//<KSN> DEL	iMin		: Integer;
//<KSN> DEL	iMax		: Integer;
//<KSN> DEL	QueryRead	: TMQuery;
	NodeSelect	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	NodeOya		: TTreeNode;
	stWorkRecOya: ^TreeViewRec;
//<KSN> DEL	NodeOya2	: TTreeNode;
//<KSN> DEL	stWorkRecOya2: ^TreeViewRec;
	stWorkRecBase: ^TreeViewRec;
	stCode		: String;
	stName		: String;
	iCode		: Int64;
	iCut		: Integer;
//<KSN> DEL	iRet		: Integer;
    lvNAME      : String;
    nCount      : Integer;
	strValueCode	: string;	// <MYN2>
    strActiveControl: string;	// <MYN10-2>

function lfnGetSumKbn:Integer;
var
	Qry	:	TMQuery;
begin
    result := Root_PMTab.Items.Selected;
    Qry := TMQuery.Create( Self );					//	MQueryの構築
//<D10>MDataModule.SetDBInfoToQuery( dbCorp_Select, Qry );		//	DBとMQueryの接続
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    // ユニークチェック
    try
        with Qry do
        begin
            Close;
            SQL.Clear;
            SQL.Add('Select SumKbn from MTOKUI');
            SQL.Add('Where  RDelKbn=0 and GCode=:strGCode ');
            SetFld('strGCode').AsString	:= strGCode;
            Open;

            if Eof = False then
                result := FieldByName('SUMKBN').asInteger;

        end;
    finally
        Qry.Close;
        Qry.Free;
    end;
end;
begin
    if CloseFlg then Exit;

	if (m_Wf_HENKO) then Exit; // <2610-2>

	if (m_fEnd = 1) or (m_fChange = 1) or (m_fPrint = 1) or
		(m_fIS = 1) or (m_fDel = 1) or (m_fTreeClk = 1) then
		exit;
{↓<244>
//<198>
	if (LSinsei.Visible) and (f0TGCode.Text = '')	then
		Exit;
↑<244>}
//↓<244>数値の外部コンポーネントの考慮がなかったので、入れました。
	if (LSinsei.Visible) then
    begin
    	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
        begin
        	if f0TGCode.Text = '' then
            begin
            	Exit;
            end;
        end
        else
        begin
        	if f0NGCode.Value = 0 then
            begin
            	Exit;
            end;
        end;
    end;
//↑<244>

    // <155>---ST---
{ <176>
    if (f0NGCode.Visible = True) then
    begin
        if (f0NGCode.InputFlag = true) then
        begin
            if (f0NGCode.Value = 0 ) then
            begin
                fnClearCard  (0);   // 詳細ｸﾘｱ処理
                Exit;
            end;
        end;
    end
    else
    begin
        if (f0TGCode.Text ='') then
        begin
            fnClearCard  (0);       // 詳細ｸﾘｱ処理
            Exit;
        end;
    end;
<176> }
    // <155>---ED---

// <MYN> ins -s
	if (Jituzai_PPanel_Card.Visible = True) then	// 詳細
	begin
		// 取引先コードからExitした場合
		if (Sender = f0TGCode) or (Sender = f0NGCode) then
		begin
// <MYN2> ins -s Exit時現在の値を取得
			if (Sender = f0TGCode) then
			    strValueCode	:= f0TGCode.Text;
			if (Sender = f0NGCode) then
			    strValueCode	:= f0NGCode.Text;

			strActiveControl	:= Screen.ActiveControl.Name;	// <MYN10-2>移動先コントロールを取得

			if (strValueCode = '') then
	        begin
				if (strActiveControl <> 'ECombo_Header') then	// <MYN10-2>移動先が情報区分コンボ以外なら元の場所に戻す
				begin	// <MYN10-2>
					if (Sender = f0TGCode) then
					begin
						MjsSetFocus(Self,'f0TGCode');	// 元の場所に戻す
					end;
					if (Sender = f0NGCode) then
					begin
						MjsSetFocus(Self,'f0NGCode');	// 元の場所に戻す
		            end;
//<MYN10>				m_CodeReturn	:= False;
//<MYN10>				Abort;
				end;	// <MYN10-2>
			end;

		    // 値が変更されている？
	    	if (strValueCode <> m_sSaveValueCode) or (m_EdtSw = True) then
		    begin
				if (m_CodeReturn = False) then
				begin
					if (Sender = f0TGCode) then
					begin
						if (m_sSaveValueCode <> '') then
							f0TGCode.Text	:= m_sSaveValueCode;					// 元の値に戻す

						if (strActiveControl <> 'ECombo_Header') then	// <MYN10-2>移動先が情報区分コンボ以外なら元の場所に戻す
							MjsSetFocus(Self,'f0TGCode');								// 元の場所に戻す
					end;
					if (Sender = f0NGCode) then
					begin
						if (m_sSaveValueCode <> '') then
							f0NGCode.value	:= StrToFloat(m_sSaveValueCode);		// 元の値に戻す

						if (strActiveControl <> 'ECombo_Header') then	// <MYN10-2>移動先が情報区分コンボ以外なら元の場所に戻す
							MjsSetFocus(Self,'f0NGCode');								// 元の場所に戻す
					end;
//<MYN10>					m_CodeReturn	:= False;
//<MYN10>					Abort;
		        end;

			end;
			m_CodeReturn	:= False;
// <MYN2> ins -e

			// 初期化
//<MYN7>移動			fnClearMYN();
// <MYN10-2> upd -s 0でなく空白にする
{
			if ((MasterInfo_DMemDataCodeAttr.AsInteger = 2) and (f0TGCode.Text = '')) or
	           ((MasterInfo_DMemDataCodeAttr.AsInteger <> 2) and (f0NGCode.Value = 0)) then
			begin
}
			if (strValueCode = '') then
			begin
				if (strActiveControl = 'ECombo_Header') then	// 移動先が情報区分コンボなら抜ける
					Exit;
// <MYN10-2> upd -e
				fnClearMYN();	// <MYN7>移動
		        f0MYNKbn.Value		:= -1;
				f0MYNKbn.Clear;
			end;
		end;
// <MYN> ins -e
    end;

	if m_fEnd = 0 then
	begin
		if Jituzai_PPanel_Card.Visible = False then
		begin
			FieldRestor(Sender, 0);				// 項目復元
			exit;
		end;

		if (gbTreeClick = True) then
		begin
			gbTreeClick := False;
			exit;
		end;

		// 実在外部ｺｰﾄﾞ
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if Sender = f0TGCode then
			begin
                m_bNotStored := True;  //<502_001> ADD
				strGCode	:= f0TGCode.Text;
				strGCode := TrimRight(strGCode);
				f0TGCode.Text := strGCode;

				iSumKbn		:= lfnGetSumKbn;

				fnDataRead (strGCode, iSumKbn, 1);

                //↓<Rel>
                // 親会社に既に同一ｺｰﾄﾞが登録されている場合、関連付を行い同期をとる
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                  	// 現状、子社にデータがないとき、全社を検索しに行く。
    				if MTOKUI_DMQuery.Eof = True then
                    begin
                        // 会社関連付処理
                        case fnCorpRelation(strGCode,iSumKbn) of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                end;
                            1:  begin
                                    // 正常に関連付が行えた場合は、画面の再描画を行う
                    				fnDataRead (strGCode, iSumKbn, 1);
                                    m_AcControl := PMTab;
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                                    MjsSetFocus(Self,'Root_PMTab');	// 元の場所に戻す
                                    Abort;
                                end;
                            -1, -9: begin
                                    // 例外ｴﾗｰ
                                    MjsSetFocus(Self,'Root_PMTab');	// 元の場所に戻す
                                    Abort;
                                end;
                        end;
                    end;
                end;
                //↑<Rel>

//<194>
				if MTOKUI_DMQuery.Eof = True then	// 新規
					if LSinsei.Visible then			// WF参照
						m_WFSw := True;

                fnMemSet (iSumKbn, False);
//<194>
				m_WFSw := False;
                Root_PMTab.Items.Selected := iSumKbn;
                Root_PMTab.Items[iSumKbn].Enabled := True;

{				iSumKbn		:= 0;
				iRet := fnDataRead (strGCode, iSumKbn, 1);
				if iRet < 0 then
				begin
//					Beep;
//					MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjQuestion,mjOk, mjDefOk);
// 					MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
//					Abort;
//					exit;
					Root_PMTab.Items.Selected := PAGE_GOKEI;
					Root_PMTab.Items[1].Enabled := True;
					exit;
				end;
}
				if MTOKUI_DMQuery.Eof = True then
				{新規}
				begin
					// フリーコードチェック
					if not JNTMASERRORCODECHECK(strGCode,gstErrorStr) then
					begin
						Beep;
//						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
						MjsMessageBoxEx(Self,MjsMsgRec.sMsg,MjsMsgRec.sTitle,MjsMsgRec.icontype,MjsMsgRec.btntype,MjsMsgRec.btndef,MjsMsgRec.LogType);
						MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
						Abort;
					end;

{<194>
                    // <WF>↓申請書参照ﾎﾞﾀﾝの有効/無効切替
                    if (m_cJNTArea.IsAppend = True) then
                    begin
                        B_ImportWF.Enabled := True;         // 新規登録時のみ有効
                    end
                    else
                    begin
                        B_ImportWF.Enabled := False;        // 追加権限がなかったら無効
                        ClearOtherRec(m_recOther);          // <WF>申請書情報ｸﾘｱ
                    end;
                    // <WF>↑
}

//					fnClearCard (iSumKbn,0); <108>
// <164>					fnClearCard (0);
//<194>
					if not LSinsei.Visible then
					begin
						fnClearCard (2);    // <164> 外部ｺｰﾄﾞは初期化しないようにする為、区分2を使用
// <164>					f0TGCode.Text	:= strGCode;
					end
					else
					begin
						f1TSKBNClick(f1TSKBN);
						f1TSKBNClick(f1SSKBN);

//↓<219>この新規コードを入力後の表示のため。上記「f1TSKBNClick」で0を入れてしまうので、ここで入れなおす。
                        if f1TSKBN.Checked then
                            f1TKBN.Value    := 1;           // 得意先区分
                        if f1SSKBN.Checked then
                            f1SKBN.Value    := 1;           // 仕入先区分
//↑<219>
						fnSeiKbn_EntryControl;
						fnSeiKbn_EntryControl_SI;
					end;
{↓<225>CMChildKeyや更新ボタンのOnClickでも空のガードはかけているので、ここではやらないことにする。
					if f0TGCode.Text = ''then
					begin
						Beep;
						MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
						Abort;
					end;
↑<225>}
                    MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode', True); //<216>新規のときは常に使用可にする。新規で諸口はこの画面ではありえないので。

					//<KSSN>[参照のみ]のときに新規入力はさせない
					if giReferFlag = REFER then
					begin
						DisplayControl(giReferFlag);
//						MjsSetFocus(Self,TComponent(Sender).Name);	// 元の場所に戻す
//                      Abort;
					end;

				end
				else
				begin
				{更新}
                    if PPanelTree.Visible then   //<KSN> ADD
                    begin  //<KSN> ADD
                        // 他の合計についている？
                        NodeSelect := VTreeView.Items[0];
                        while NodeSelect <> nil do
                        begin
                            stWorkRec 	:= NodeSelect.Data;
                            if strGCode = stWorkRec^.strExCode then
                            begin
                                NodeOya := NodeSelect.Parent;
                                stWorkRecOya := NodeOya.Data;
                                if stWorkRec^.strExCode <> stWorkRecOya^.strExCode then
                                begin
    //								TBaseNodeSv := TBaseNode;
                                    TBaseNode := NodeOya;
                                    stWorkRecBase	:= TBaseNode.Data;
                                    if stWorkRecBase^.nDivision <> 9 then
                                    begin
                                        stCode	:= stWorkRecBase^.strExCode;
                                        m_stGCodeSave := stCode;		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end
                                    else
                                    begin
                                        stCode		 	:= '';
                                        m_stGCodeSave	:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end;
                                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                                    begin
                                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                                System.Delete(stCode, 1, iCut);
                                            end;
                                        end
                                        else
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCode := StrToInt64(Trim(stCode));
                                                stCode := IntToStr(iCode);
                                            end;
                                        end;
                                    end;
                                    stName							:= stWorkRecBase^.strName;
                                    Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
    //								Root_PMTab.BorderCaption := TBaseNode.Text;
                                end;
    {<239> DEL St
                                if stWorkRecOya^.nDivision = 1 then
                                begin
                                    NodeOya2 := NodeOya.Parent;
                                    stWorkRecOya2 := NodeOya2.Data;
                                    if stWorkRecOya2^.nDivision = 1 then
                                        Root_PMTab.Items[1].Enabled := False
                                    else
                                        Root_PMTab.Items[1].Enabled := True;
                                end;
    <239> DEL Ed}
                                break;
                            end
                            else
                            begin
                                NodeSelect	:= NodeSelect.GetNext;
                                Root_PMTab.Items[1].Enabled := True;
                            end;
                        end;

                    end;  //<KSN> ADD

					gbTreeClick := False;

//					SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
//<199>
					memFsn.Close;	memFsn.Open;
					fnMemSet (iSumKbn, False);
					fnCreateCard (iSumKbn);
//↓<216>
                    if (MTOKUI_DMQuery.FieldByName('Syokuchikbn').AsInteger = 1) then
                    begin
                        // 諸口取引先はセグメント、得意先分類、仕入先分類は使用不可
                        MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode',  False);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', False);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3SBrCode', False);
                    end
                    else
                    begin
                        // 通常取引先はセグメント使用可
                        //             得意先分類、仕入先分類は採用状態により使用可⇔不可を切り替え
                        MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode',  True);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', f1TSKBN.Checked);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3SBrCode', f1SSKBN.Checked);
                    end;
//↑<216>
				end;

{//↓<2257>合計でもﾌﾘｰ項目登録を表示するためｺﾒﾝﾄｱｳﾄ
                if iSumKbn = 0 then
                    fnSetFncType(1)
                else
                    fnSetFncType(0);
                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
//↑<2257>}
				fnSetFncTypeSelect();	//<2257>
				uvCopyMtokui := False;	//<2257>
    		end;
		end
		else
		begin
			if Sender = f0NGCode then
			begin
                m_bNotStored := True;  //<502_001> ADD
				strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);
				iSumKbn		:= lfnGetSumKbn;

				fnDataRead (strGCode, iSumKbn, 1);

                //↓<Rel>
                // 親会社に既に同一ｺｰﾄﾞが登録されている場合、関連付を行い同期をとる
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                  	// 現状、子社にデータがないとき、全社を検索しに行く。
    				if MTOKUI_DMQuery.Eof = True then
                    begin
                        // 会社関連付処理
                        case fnCorpRelation(strGCode,iSumKbn) of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                end;
                            1:  begin
                                    // 正常に関連付が行えた場合は、画面の再描画を行う
                    				fnDataRead (strGCode, iSumKbn, 1);
                                    m_AcControl := PMTab;
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                                    MjsSetFocus(Self,'Root_PMTab');	// 元の場所に戻す
                                    Abort;
                                end;
                            -1, -9: begin
                                    // 例外ｴﾗｰ
                                    MjsSetFocus(Self,'Root_PMTab');	// 元の場所に戻す
                                    Abort;
                                end;
                        end;
                    end;
                end;
                //↑<Rel>
//↓<2257-1>
				if (MTOKUI_DMQuery.Eof = True) and (f0NGCode.Value=0) then	//新規かつGCodeが0の時はEXITする
				begin
					f0NGCode.SetFocus;
					exit;
				end;
//↑<2257-1>
//<194>
				if MTOKUI_DMQuery.Eof = True then	// 新規
					if LSinsei.Visible then			// WF参照
						m_WFSw := True;

                fnMemSet (iSumKbn, False);
//<194>
				m_WFSw := False;

                Root_PMTab.Items.Selected := iSumKbn;
                Root_PMTab.Items[iSumKbn].Enabled := True;

				if MTOKUI_DMQuery.Eof = True then
				{新規}
				begin
{<194>
                    // <WF>↓申請書参照ﾎﾞﾀﾝの有効/無効切替
                    if (m_cJNTArea.IsAppend = True) then
                    begin
                        B_ImportWF.Enabled := True;         // 新規登録時のみ有効
                    end
                    else
                    begin
                        B_ImportWF.Enabled := False;        // 追加権限がなかったら無効
                        ClearOtherRec(m_recOther);          // <WF>申請書情報ｸﾘｱ
                    end;
                    // <WF>↑
}

//					fnClearCard (iSumKbn,0); <108>
//<164>					fnClearCard (0);
//<194>
					if not LSinsei.Visible then
					begin
						fnClearCard (2);    // <164> 外部ｺｰﾄﾞは初期化しないようにする為、区分2を使用
//<164>					f0NGCode.Value	:= StrToInt64 (Trim (strGCode));
					end
					else
					begin
						f1TSKBNClick(f1TSKBN);
						f1TSKBNClick(f1SSKBN);

//↓<219>この新規コードを入力後の表示のため。上記「f1TSKBNClick」で0を入れてしまうので、ここで入れなおす。
                        if f1TSKBN.Checked then
                            f1TKBN.Value    := 1;           // 得意先区分
                        if f1SSKBN.Checked then
                            f1SKBN.Value    := 1;           // 仕入先区分
//↑<219>
						fnSeiKbn_EntryControl;
						fnSeiKbn_EntryControl_SI;
					end;

                    MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode', True); //<216>新規のときは常に使用可にする。新規で諸口はこの画面ではありえないので。
{↓<225>CMChildKeyや更新ボタンのOnClickでも空のガードはかけているので、ここではやらないことにする。
                    if f0NGCode.Value = 0 then
					begin
						Beep;
						MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
					end;
↑<225>}
					//<KSSN>[参照のみ]のときに新規入力はさせない
					if giReferFlag = REFER then
					begin
						DisplayControl(giReferFlag);
//						MjsSetFocus(Self,TComponent(Sender).Name);	// 元の場所に戻す
//                      Abort;
					end;
				end
				else
				begin
				{更新}
                    if PPanelTree.Visible then  //<KSN> ADD
                    begin  //<KSN> ADD
                        // 他の合計についている？
                        NodeSelect := VTreeView.Items[0];
                        while NodeSelect <> nil do
                        begin
                            stWorkRec 	:= NodeSelect.Data;
                            if strGCode = stWorkRec^.strExCode then
                            begin
                                NodeOya := NodeSelect.Parent;
                                stWorkRecOya := NodeOya.Data;
                                if stWorkRec^.strExCode <> stWorkRecOya^.strExCode then
                                begin
    //								TBaseNodeSv := TBaseNode;
                                    TBaseNode := NodeOya;
                                    stWorkRecBase	:= TBaseNode.Data;
                                    if stWorkRecBase^.nDivision <> 9 then
                                    begin
                                        stCode	:= stWorkRecBase^.strExCode;
                                        m_stGCodeSave := stCode;		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end
                                    else
                                    begin
                                        stCode		 	:= '';
                                        m_stGCodeSave	:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end;
                                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                                    begin
                                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                                System.Delete(stCode, 1, iCut);
                                            end;
                                        end
                                        else
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCode := StrToInt64(Trim(stCode));
                                                stCode := IntToStr(iCode);
                                            end;
                                        end;
                                    end;
                                    stName							:= stWorkRecBase^.strName;
                                    Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
    //								Root_PMTab.BorderCaption := TBaseNode.Text;
                                end;
    {<239> DEL St
                                if stWorkRecOya^.nDivision = 1 then
                                begin
                                    NodeOya2 := NodeOya.Parent;
                                    stWorkRecOya2 := NodeOya2.Data;
                                    if stWorkRecOya2^.nDivision = 1 then
                                         Root_PMTab.Items[1].Enabled := False
                                    else
                                        Root_PMTab.Items[1].Enabled := True;
                                end;
    <239> DEL Ed}
                                break;
                            end
                            else
                            begin
                                NodeSelect	:= NodeSelect.GetNext;
                                Root_PMTab.Items[1].Enabled := True;
                            end;
                        end;
                    end;  //<KSN> ADD

					gbTreeClick := False;
//					SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
//<199>
					memFsn.Close;	memFsn.Open;
					fnMemSet (iSumKbn, False);
					fnCreateCard (iSumKbn);
//↓<216>
                    if (MTOKUI_DMQuery.FieldByName('Syokuchikbn').AsInteger = 1) then
                    begin
                        // 諸口取引先はセグメント、得意先分類、仕入先分類は使用不可
                        MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode',  False);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', False);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3SBrCode', False);
                    end
                    else
                    begin
                        // 通常取引先はセグメント使用可
                        //             得意先分類、仕入先分類は採用状態により使用可⇔不可を切り替え
                        MjsDispCtrl.MjsSetEnableds(Self, 'f2SgCode',  True);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', f1TSKBN.Checked);
                        MjsDispCtrl.MjsSetEnableds(Self, 'f3SBrCode', f1SSKBN.Checked);
                    end;
//↑<216>
				end;

{//↓<2257>合計でもﾌﾘｰ項目登録を表示するためｺﾒﾝﾄｱｳﾄ
                if iSumKbn = 0 then
                    fnSetFncType(1)
                else
                    fnSetFncType(0);
                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
//↑<2257>}
				fnSetFncTypeSelect();	//<2257>
				uvCopyMtokui := False;	//<2257>
			end;
		end;

		//　実在正式名称
		if Sender = f0LongName then
		begin
			stWork := f0SimpleName.Text;
			if stWork = '' then
			begin
				stWork := f0LongName.Text;
//<126>				f0SimpleName.Text := MjsCopy(stWork, 14);
//<127>				f0SimpleName.Text := MjsCopy(stWork, 20);
				f0SimpleName.Text := MjsKabuCut(stWork, 20);

			end;
			fnSetFncTypeSelect();	//<2257>
		end;

		if (Jituzai_PPanel_Card.Visible = False) then
		begin
			FieldRestor(Sender, 0);				// 項目復元
			exit;
		end;

        //<152>ST-------------
		if (Jituzai_PPanel_Card.Visible = True) then
		begin
	        for nCount := 1 to VTreeView.Items.Count do
            begin
		       	stWorkRec   := VTreeView.Items [nCount - 1].Data;
                if	(CompareStr (stWorkRec^.strExCode, strGCode) = 0) then
            	begin
            		VTreeView.Items [nCount - 1].Selected := TRUE;
					gbTreeClick := False; //<SZERO>↑でVTreeViewChangeが流れる。そこでTrueにしているが、抜けたところでFalseにしていないので、その後のJituzaiEditExitで抜けてしまっていたため、マスタの取得がされなかった。
            		Break;
            	end;
            end;
        end;
        //<152>ED-------------

		//　実在郵便番号
		if (Sender = f0ZipCode2)	and			// 郵便番号枝番入力(基番,枝番入力済み)
//<PST2>   (f0ZipCode1.Value <> 0) and
//<PST2>   (f0ZipCode2.Value <> 0) then
           (f0ZipCode1.Value <> 0) then //<PST2>枝番の判定は不要。例：100-0000という郵便番号があるので。
		begin
			if (f0Address1.Text = '') and		// 住所上段下段 未入力？
			   (f0Address2.Text = '') then
			begin
				iZip1 := Trunc(f0ZipCode1.Value);		// 基番 取得
				iZip2 := Trunc(f0ZipCode2.Value);		// 枝番 取得
				sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
				sAdr1 := '';
				sAdr2 := '';

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
				if iValue = 1 then
				begin
					f0Address1.Text := sAdr1;			// 住所上段 SET
					f0Address2.Text := sAdr2;			// 住所下段 SET
				end
				else if iValue < 0 then
				begin
					Beep;
                    PMTab.items.Selected := 0;
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
					Abort;
				end;
			end;
		end;

		// 実在住所上段
		if Sender = f0Address1 then					// 住所上段入力
		begin
			if (f0ZipCode1.Value = 0) and				// 基番,枝番 未入力？
			   (f0ZipCode2.Value = 0) then
			begin
				sZip  := '';
				sAdr1 := f0Address1.Text;
				sAdr2 := f0Address2.Text;

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 住所から直接検索
				if iValue = 1 then
				begin
					iZip1 := StrToInt(MjsCopy(sZip,3));				// 基番 取り出し
					iZip2 := StrToInt(Copy(sZip,5,4));				// 枝番 取り出し
					f0ZipCode1.Value := iZip1;			// 基番 SET
					f0ZipCode2.Value := iZip2;			// 枝番 SET
                    //↓<PST2>
                    if (iZip1 <> 0) then
                    begin
                    	f0ZipCode2.Zero := True;
                    end
                    else
                    begin
                    	f0ZipCode2.Zero := False;
                    end;
                    //↑<PST2>
				end;
			end;
		end;
        //業種
		if Sender = f0GYCode then
        begin

            f0GYName.Caption := '';
            if f0GYCode.text = '' then Exit;

            if fnGetNAME(f0GYCode.text,ucGyosyu,uvGYCodeAttr,lvNAME) then
                //ラベルに名称をセット
                f0GYName.Caption := lvName
            else
			begin
				Beep;
                PMTab.items.Selected := 0;
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;
        end;

{<MYN15> del -s fnFldChkに移動
// <MYN> ins -s
		if Sender = f0MYNNo then
        begin
            if f0MYNNo.Text = '' then
			begin
				m_sSaveHoujinNo	:= '';
				Exit;
			end;

			if (m_MYNAcc.CheckMyNumber(f0MYNNo.Text)) then
			begin
                m_sSaveHoujinNo	:= f0MYNNo.Text;
            end else
			begin
				Beep;
           	    PMTab.items.Selected := 0;
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;
        end;
// <MYN> ins -e
<MYN15> del -e}

		// 開始適用日付
		if Sender = f0StartDate then
		begin
            // 新元号の修正
			gfnValidDate(TMDateEdit(Sender)); //<KAIGG3>

			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
			if ((iValue <> 0)               and
//<2750>↓
//              (not MjsIntYMDChk(iValue))) or
                (not MjsIntYMDChk(MjsDateToInt8(f0StartDate.AsDateTime)))) or
//<2750>↑
               ((f0EndDate.Value <> 0)      and
//<KAIGG5>      (f0EndDate.Value < iValue)) then
                (f0EndDate.AsDateTime < f0StartDate.AsDateTime)) then
			begin
				Beep;
                PMTab.items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 終了適用日付
		if Sender = f0EndDate then
		begin
            // 新元号の修正
			gfnValidDate(TMDateEdit(Sender)); //<KAIGG3>

			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
			if ((iValue <> 0)               and
//<2750>↓
//              (not MjsIntYMDChk(iValue))) or
                (not MjsIntYMDChk(MjsDateToInt8(f0EndDate.AsDateTime)))) or
//<2750>↑
//<231>        (f0StartDate.Value > iValue) then
//↓<231>
			   ((iValue <> 0) and
//<KaiGG2>	    (f0StartDate.Value > iValue)) then
    		    (f0StartDate.AsDateTime > f0EndDate.AsDateTime)) then					//<KaiGG2>
//↑<231>
			begin
				Beep;
                PMTab.items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

        //存在チェック及び名称の取得【セグメント】
        if Copy(TMTxtEdit(Sender).name,1,8) = 'f2SgCode'  then
        begin
            i := StrToInt(Copy(TMTxtEdit(Sender).name,9,2));
            TMLabel  (MJSFindCtrl(Self, 'f2SgName' + IntToStr(i))).Caption := '';

            //<156> --- St ---
            if m_arAdoptInfo_Seg [i].nCodeAttribute <> 2 then
            begin
                if TMTxtEdit(Sender).InputFlag = False then
                    TMTxtEdit(Sender).Zero := True
                else
                    TMTxtEdit(Sender).Zero := False;
            end
            else
                TMTxtEdit(Sender).Zero := False;
            //<156> --- Ed ---


            if TMTxtEdit(Sender).text = '' then Exit;

            if fnGetNAME(TMTxtEdit(Sender).text,
                  m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute,lvNAME) then
                //ラベルに名称をセット
                TMLabel  (MJSFindCtrl(Self, 'f2SgName' + IntToStr(i))).Caption := lvName
            else
			begin
				Beep;
                PMTab.items.Selected := 2;
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;
        end;

        //存在チェック及び名称の取得【得意先分類】
        if Copy(TMTxtEdit(Sender).name,1,9) = 'f3TBrCode'  then
        begin
            i := StrToInt(Copy(TMTxtEdit(Sender).name,10,2));
            TMLabel  (MJSFindCtrl(Self, 'f3TBrName' + IntToStr(i))).Caption := '';

            //<156> --- St ---
            if m_arAdoptInfo_Tbr [i].nCodeAttribute <> 2 then
            begin
                if TMTxtEdit(Sender).InputFlag = False then
                    TMTxtEdit(Sender).Zero := True
                else
                    TMTxtEdit(Sender).Zero := False;
            end
            else
                TMTxtEdit(Sender).Zero := False;
            //<156> --- Ed ---

            if TMTxtEdit(Sender).text = '' then Exit;

            if fnGetNAME(TMTxtEdit(Sender).text,
                  m_arAdoptInfo_Tbr [i].nMasterDivision,m_arAdoptInfo_Tbr [i].nCodeAttribute,lvNAME) then
                //ラベルに名称をセット
                TMLabel  (MJSFindCtrl(Self, 'f3TBrName' + IntToStr(i))).Caption := lvName
            else
			begin
				Beep;
                PMTab.items.Selected := 3;
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;

        end;

        //存在チェック及び名称の取得【仕入先分類】
        if Copy(TMTxtEdit(Sender).name,1,9) = 'f3SBrCode'  then
        begin

            i := StrToInt(Copy(TMTxtEdit(Sender).name,10,2));
            TMLabel  (MJSFindCtrl(Self, 'f3SBrName' + IntToStr(i))).Caption := '';

            //<156> --- St ---
            if m_arAdoptInfo_Sbr [i].nCodeAttribute <> 2 then
            begin
                if TMTxtEdit(Sender).InputFlag = False then
                    TMTxtEdit(Sender).Zero := True
                else
                    TMTxtEdit(Sender).Zero := False;
            end
            else
                TMTxtEdit(Sender).Zero := False;
            //<156> --- Ed ---

            if TMTxtEdit(Sender).text = '' then Exit;

            if fnGetNAME(TMTxtEdit(Sender).text,
                  m_arAdoptInfo_Sbr [i].nMasterDivision,m_arAdoptInfo_Sbr [i].nCodeAttribute,lvNAME) then
                //ラベルに名称をセット
                TMLabel  (MJSFindCtrl(Self, 'f3SBrName' + IntToStr(i))).Caption := lvName
            else
			begin
				Beep;
                PMTab.items.Selected := 3;
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;

        end;

    end;
end;

//<226> ↓
//**************************************************************************
//フィールドチェック処理（使用制御）
//  項目のOnExitで評価すると、フォーカス移動の後の使用制御変更になり、
//  次項目へフォーカスセットできないのでKeyDownにて発生するように作成
//**************************************************************************
function TJNTCRP004001f.fnFldChk(Sender: TObject; AllChkMode: Boolean): Boolean;
var
	lvCompoName:	String;
    lvNM:           String;
	sCode:			String;		//<227>
begin
	Result      := True;
	lvCompoName := TComponent(Sender).Name;

    //** 国内外区分 ***********************
	with f0ECOUNTRY do
	begin
		if (AllChkMode) or (lvCompoName = Name) then
		begin
//<226> ↓      初期化
            if value = 0 then value := uvTmpCOUNTRY; //国内外区分
//<226> ↑
            f0LCOUNTRY.Caption := '';
            if f0ECOUNTRY.value <> 0 then
            begin
                //名称セット
                if f0ECOUNTRY.AsInteger <= Length(ucCstM_CTR) then
                    f0LCOUNTRY.Caption := ucCstM_CTR[f0ECOUNTRY.AsInteger]
                else
                begin
                    Beep;
                    PMTab.items.Selected := 0;
                    MjsSetFocus(Self, name);	// 元の場所に戻す
                    Abort;
                end;
                //↓<237>
                if (f0ECOUNTRY.AsInteger = 2) then
                begin
                    if (f1TSKBN.Checked = True) then
                    begin
                        MjsMessageBox(Self,'得意先として採用の場合は、「国外」は選択できません。',mjWarning,mjDefOk);
                        PMTab.items.Selected := 0;
                        f0ECOUNTRY.Value	 := 1;
                        f0LCOUNTRY.Caption   := ucCstM_CTR[f0ECOUNTRY.AsInteger];
                        f0ECOUNTRY.SelectAll;
                        MjsSetFocus(Self, name);
                        Abort;
                    end;
                end;
                //↑<237>
            end;

			if not AllChkMode then
			begin
                //国内制御
                if f0ECOUNTRY.AsInteger = 1 then
                begin
                    f0ECURRENCY.text := '01';
                    fnFldChk(f0ECURRENCY, False);
                    fnChgCmpEna(False, f0ECURRENCY);    //通貨区分
                    fnChgCmpEna(True,  f1TKBN);         //得意先区分
                    fnChgCmpEna(True,  f1SKBN);         //仕入先区分
                end
                else
                begin
                    f1TKBN.value := 1;
                    f1SKBN.value := 1;
                    fnChgCmpEna(True,  f0ECURRENCY);    //通貨区分
                    fnChgCmpEna(False, f1TKBN);         //得意先区分
                    fnChgCmpEna(False, f1SKBN);         //仕入先区分
                end;
				Exit;
			end;
            uvChgCOUNTRY := False;
		end;
	end;

    //** 通貨区分 ***********************
	with f0ECURRENCY do
	begin
		if (AllChkMode) or (lvCompoName = Name) then
		begin
            if f0ECURRENCY.text = '' then text := '01'; 	//<227>

            f0LCURRENCY.Caption := '';
            if f0ECURRENCY.text <> '' then
            begin
				// 外部コードは、DBに前０ありでセットされているため考慮。<227>
	            sCode   := ComArea.SetDspCodeAttr(f0ECURRENCY.text, 2, 1);

                //名称セット
//<227>                if fnGetNAME(f0ECURRENCY.text, MASTER_CurrKBN, 2, lvNM) then
                if fnGetNAME(sCode, MASTER_CurrKBN, 2, lvNM) then	//<227>
				begin
					f0ECURRENCY.text := sCode;		//<227>
                    f0LCURRENCY.Caption := lvNM;
				end
                else
                begin
                    Beep;
                    PMTab.items.Selected := 0;
                    MjsSetFocus(Self, name);	// 元の場所に戻す
                    Abort;
                end;
            end;
            uvChgCurrency := False;
        end;
	end;

// <MYN15> ins -s JituzaiEditExitから移動
	with f0MYNNo do
	begin
		if (AllChkMode) or (lvCompoName = Name) then
        begin
			if (f0MYNKbn.Text = MYN_HOUJIN) then
			begin
	            if f0MYNNo.Text = '' then
				begin
					m_sSaveHoujinNo	:= '';
					Exit;
				end;

				if (fnCheckCorpNum(f0MYNNo.Text) = True) then
				begin
	                m_sSaveHoujinNo	:= f0MYNNo.Text;
	            end else
				begin
					Beep;
	           	    PMTab.items.Selected := 0;
					MjsmessageBoxEx(Self,'入力値が正しくありません。法人番号を見直してください。','法人番号入力',mjInformation,mjOk,mjDefOk);
	                if (f0MYNNo.CanFocus) then
						MjsSetFocus(Self,'f0MYNNo');	// 元の場所に戻す
					Abort;
				end;
			end;
		end;
	end;
// <MYN15> ins -e

end;
//<226> ↑
//**************************************************************************
//	Proccess  :	実在EditコンポーネントのCheck共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 11 / 9
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.JituzaiEditCheck(Sender: TObject);
var
	sAdr1		: String;
	sAdr2		: String;
	sZip		: String;
	iZip1		: Integer;
	iZip2		: Integer;
	iValue		: Integer;

begin

	if m_fEnd = 0 then
	begin
		//　実在郵便番号
		if (Sender = f0ZipCode2)	and			// 郵便番号枝番入力(基番,枝番入力済み)
//<PST2>   (f0ZipCode1.Value <> 0) and
//<PST2>   (f0ZipCode2.Value <> 0) then
		   (f0ZipCode1.Value <> 0) then //<PST2>枝番の判定は不要。例：100-0000という郵便番号があるので。
		begin
			iZip1 := Trunc(f0ZipCode1.Value);		// 基番 取得
			iZip2 := Trunc(f0ZipCode2.Value);		// 枝番 取得
			sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
			sAdr1 := '';
			sAdr2 := '';

			iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
			if iValue < 0 then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 実在住所上段
		if Sender = f0Address1 then					// 住所上段入力
		begin
			sZip  := '';
			sAdr1 := f0Address1.Text;
			sAdr2 := f0Address2.Text;

			iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 住所から直接検索
			if iValue < 1 then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		//　開始適用日付
		if Sender = f0StartDate then
		begin
            // 新元号の修正
//<KAIGG3-1>			gfnValidDate(TMDateEdit(Sender)); //<KAIGG3>

			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 終了適用日付
		if Sender = f0EndDate then
		begin
            // 新元号の修正
//<KAIGG3-1>			gfnValidDate(TMDateEdit(Sender)); //<KAIGG3>

			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

	end;
end;

//**************************************************************************
//	Proccess  :	ツリービュー右クリックﾎﾟｯﾌﾟｱｯﾌﾟｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.PMKasantaikeiPopup(Sender: TObject);
var
	NodeSelect			: TTreeNode;
	stWorkRec			: ^TreeViewRec;
	NodeOya				: TTreeNode;
	stWorkRecOya		: ^TreeViewRec;
	NodeOya2			: TTreeNode;
	stWorkRecOya2		: ^TreeViewRec;
	QueryFusen			: TMQuery;
	NodeChk				: TTreeNode;
	stWorkRecChk		: ^TreeViewRec;
	cNodeWork  : TTreeNode;

begin
	m_fTreeClk := 1;							// TreeClickﾌﾗｸﾞ

	NodeSelect          := VTreeView.Selected;
	m_cNodeRightClk     := NodeSelect;
	stWorkRec           := NodeSelect.Data;

	VTreeView.Selected  := NodeSelect;
//    VTreeViewChange(Sender, NodeSelect);

	if  (stWorkRec^.nDivision = 9) then			// 取引先加算体系だったら
	begin
//		TPCut.Enabled  := False;
		TPDetail.Enabled  := False;
		TPCopy.Enabled    := False;
		TFSep.Enabled     := False;
		TFBlue.Enabled    := False;
		TFGreen.Enabled   := False;
		TFOrange.Enabled  := False;
		TFRed.Enabled     := False;
        TPAllDel.Enabled  := False;             //加算しない    <129>
        TPDelete.Enabled  := False;             //削除          <129>
	end
	else
	begin
//		TPCut.Enabled  := True;
		TPDetail.Enabled     := True;
        if giReferFlag = REFER then
    		TPCopy.Enabled       := False
        else
    		TPCopy.Enabled       := True;
//<Authority> DEL        if m_cJNTArea.IsDelete = False then //削除権限を考慮する
        if m_JNTAuthority.IsDelete = False then //削除権限を考慮する  <Authority> ADD
			TPDelete.Enabled := False
        else
        begin
            if stWorkRec^.iSyokuti <> 0 then
                TPDelete.Enabled := fnRecordCount()
            else
                TPDelete.Enabled := True;
        end;
//<221>		TPAllDel .Enabled    := True;
//<Authority> DEL		TPAllDel .Enabled    := m_cJNTArea.IsAppend;	//<221>
		TPAllDel .Enabled    := m_JNTAuthority.IsAppend;	//<Authority> ADD
		TFSep.Enabled        := True;
//<222>		TFDel.Enabled        := True;
//<Authority> MOD St
{
		TFDel.Enabled        := m_cJNTArea.IsFusen;		//<222>
		TFRe.Enabled         := m_cJNTArea.IsFusen;		//<222>
		TFBlue.Enabled       := m_cJNTArea.IsFusen;
		TFGreen.Enabled      := m_cJNTArea.IsFusen;
		TFOrange.Enabled     := m_cJNTArea.IsFusen;
		TFRed.Enabled        := m_cJNTArea.IsFusen;
}
		TFDel.Enabled        := m_JNTAuthority.IsFusen;
		TFRe.Enabled         := m_JNTAuthority.IsFusen;
		TFBlue.Enabled       := m_JNTAuthority.IsFusen;
		TFGreen.Enabled      := m_JNTAuthority.IsFusen;
		TFOrange.Enabled     := m_JNTAuthority.IsFusen;
		TFRed.Enabled        := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed

		NodeOya			    := NodeSelect.Parent;
		stWorkRecOya        := NodeOya.Data;
		if  stWorkRecOya^.nDivision = 9 then
			TPAllDel.Enabled  := False;
	end;
    cNodeWork	:= NodeSelect.GetFirstChild ();

    if	(stWorkRec^.nDivision = 1) then
    begin
        if (cNodeWork <> nil) then
        begin
            TPDelete.Enabled  := FALSE;
            TPAllDel.Enabled  := False;
            TFDel.Enabled     := False;
        end
        else
        begin
//<Authority> DEL            TPDelete.Enabled  := m_cJNTArea.IsDelete;//削除権限を考慮する
            TPDelete.Enabled  := m_JNTAuthority.IsDelete;//削除権限を考慮する  <Authority> ADD
//<221>            TPAllDel.Enabled  := True;
//<Authority> DEL            TPAllDel.Enabled  := m_cJNTArea.IsAppend;//追加権限を考慮する<221>
            TPAllDel.Enabled  := m_JNTAuthority.IsAppend;//追加権限を考慮する <Authority> ADD
            TFDel.Enabled     := True;
        end;
    end;

{	if  stWorkRec^.nDivision = 0 then
		TPPaste.Enabled  := False
	else
		TPPaste.Enabled  := True;
}
	// 合計→合計の加算が組まれているかどうか
// <241> コメントを解除→{<239> DEL St
	if stWorkRec^.nDivision = 1 then		// 合計のみ
	begin
		NodeChk := NodeSelect.getFirstChild;
		while NodeChk <> nil do
		begin
			stWorkRecChk  := NodeChk.Data;
			if stWorkRecChk^.nDivision = 1 then
			begin
				TPCopy.Enabled  := False;
				break;
			end;

			NodeChk := NodeSelect.GetNextChild(NodeChk);
		end;
	end;
// <241> コメントを解除→<239> DEL Ed}

	if  m_stRecPaste = nil then
		TPPaste.Enabled  := False
	else
	begin
        case stWorkRec^.nDivision of
            0:
            begin
                NodeOya			    := NodeSelect.Parent;
                stWorkRecOya        := NodeOya.Data;
                if  stWorkRecOya^.nDivision = 9 then
                begin
                    // 二重加算は許さない
                    if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                        TPPaste.Enabled  := False
                    else
                        TPPaste.Enabled  := True;
                end
                else
                begin
                    TPPaste.Enabled  := True; //<239> ADD
                    NodeOya2		:= NodeOya.Parent;
                    stWorkRecOya2	:= NodeOya2.Data;
                    if  stWorkRecOya2^.nDivision = 9 then
                        TPPaste.Enabled  := True
                    else
                    begin
{<239> DEL St
                        // 合計取引先に合計取引先は貼り付けさせない
                        if m_stRecPaste^.nDivision = 1 then
                            TPPaste.Enabled  := False
                        else
                        begin
                            // 二重加算は許さない
                            if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                                TPPaste.Enabled  := False
                            else
                                TPPaste.Enabled  := True;
                        end;
<239> DEL Ed}
                    end;
                end;
            end;
            1:
            begin
                NodeOya			    := NodeSelect.Parent;
                stWorkRecOya        := NodeOya.Data;
                if  stWorkRecOya^.nDivision = 9 then
                begin
                    // 二重加算は許さない
                    if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                        TPPaste.Enabled  := False
                    else
                        TPPaste.Enabled  := True;
                end
                else
                begin
                    TPPaste.Enabled  := True; //<239> ADD
{<239> DEL St
                    // 合計取引先に合計取引先は貼り付けさせない
                    if m_stRecPaste^.nDivision = 1 then
                        TPPaste.Enabled  := False
                    else
                    begin
                        // 二重加算は許さない
                        if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                            TPPaste.Enabled  := False
                        else
                            TPPaste.Enabled  := True;
                    end;
<239> DEL Ed}
                end;
            end;
            9:
            begin
                // 二重加算は許さない
                if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                    TPPaste.Enabled  := False
                else
                    TPPaste.Enabled  := True;
            end;
        end;
//<239> ADD St
        if	(m_stRecPaste.nDivision = 1) then
        begin
            TPPaste.Enabled := fnCheckMasterTreeInsertValidStr (m_stRecPaste^.strExCode, stWorkRec^.strExCode);
        end;
//<239> ADD Ed
	end;

	if B_Syousai.Caption <> '詳細(&T)' then
		TPDetail.Enabled  := False
	else
    begin
    	if  stWorkRec^.nDivision = 9 then			// 取引先加算体系だったら
    		TPDetail.Enabled  := False
        else
    		TPDetail.Enabled  := True;
    end;

	QueryFusen := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

//	PMKasantaikei.Items[8].Checked := False;
//	PMKasantaikei.Items[9].Checked := False;
//	PMKasantaikei.Items[10].Checked := False;
//	PMKasantaikei.Items[11].Checked := False;
	try
		// 付箋ﾁｪｯｸ
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 取引先付箋情報をGET
//<256> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenKbn from MFusenInfo');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger  := ucTORIHIKI;
//<256> DEL			SetFld('Ncode').AsFloat := stWorkRec^.iNCode;// 検索対象の外部ｺｰﾄﾞ 設定
			SetFld('Ncode').AsString := FormatFloat('0',stWorkRec^.iNCode);// 検索対象の外部ｺｰﾄﾞ 設定  <256> ADD
			Open;						// ｸｴﾘの開始

{			while EOF = False do
			begin
//	            showmessage(IntToStr(GetFld('FusenKbn').AsInteger));
				case GetFld('FusenKbn').AsInteger of
				RED:	PMKasantaikei.Items[8].Checked := True;
				GREEN:	PMKasantaikei.Items[9].Checked := True;
				BLUE:	PMKasantaikei.Items[10].Checked := True;
				ORANGE:	PMKasantaikei.Items[11].Checked := True;
				end;
				Next;
			end;}

			if EOF = False then
			begin
				PMKasantaikei.Items[11].Visible := True;
				PMKasantaikei.Items[12].Visible := True;
				PMKasantaikei.Items[13].Visible := True;
				case GetFld('FusenKbn').AsInteger of
					RED:
					begin
						PMKasantaikei.Items[14].Visible := False;
						PMKasantaikei.Items[15].Visible := True;
						PMKasantaikei.Items[16].Visible := True;
						PMKasantaikei.Items[17].Visible := True;
						TFDel.Bitmap.Assign(TFRed.Bitmap);
					end;
					BLUE:
					begin
						PMKasantaikei.Items[14].Visible := True;
						PMKasantaikei.Items[15].Visible := False;
						PMKasantaikei.Items[16].Visible := True;
						PMKasantaikei.Items[17].Visible := True;
						TFDel.Bitmap.Assign(TFBlue.Bitmap);
					end;
					GREEN:
					begin
						PMKasantaikei.Items[14].Visible := True;
						PMKasantaikei.Items[15].Visible := True;
						PMKasantaikei.Items[16].Visible := False;
						PMKasantaikei.Items[17].Visible := True;
						TFDel.Bitmap.Assign(TFGreen.Bitmap);
					end;
					ORANGE:
					begin
						PMKasantaikei.Items[14].Visible := True;
						PMKasantaikei.Items[15].Visible := True;
						PMKasantaikei.Items[16].Visible := True;
						PMKasantaikei.Items[17].Visible := False;
						TFDel.Bitmap.Assign(TFOrange.Bitmap);
					end;
				end;
			end
			else
			begin
				PMKasantaikei.Items[11].Visible := False;
				PMKasantaikei.Items[12].Visible := False;
				PMKasantaikei.Items[13].Visible := False;
				PMKasantaikei.Items[14].Visible := True;
				PMKasantaikei.Items[15].Visible := True;
				PMKasantaikei.Items[16].Visible := True;
				PMKasantaikei.Items[17].Visible := True;
			end;
		end;


{		with QueryFusen do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
			SQL.Add('select * from HojyoMA');
			SQL.Add('where MasterKbn=51 AND SumKbn=:iSum AND RecordKbn=0 AND GCode=:stGCode');
			SetFld('iSum').AsInteger := stWorkRec^.nDivision;
			SetFld('stGCode').AsString := stWorkRec^.strExCode;
			Open;
		end;

		if QueryFusen.GetFld('KoteiKbn').AsInteger = 1 then			// 固定体系区分が1：固定のとき
			Cut.Enabled  := False;}
	finally
		QueryFusen.Free;
	end;

	m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ切り取りｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.CutClick(Sender: TObject);
var
	NodeOya		: TTreeNode;
//	stWorkRecKo : ^TreeViewRec;
begin
	NodeOya			:= m_cNodeRightClk.Parent;
	m_stRecPaste	:= m_cNodeRightClk.Data;

	// 指定のノードのﾊﾟﾗﾒｰﾀをｾｰﾌﾞ
//	m_stRecPaste^.prmCode  := stWorkRecKo^.prmCode;
//	m_stRecPaste^.prmName  := stWorkRecKo^.prmName;
//	m_stRecPaste^.prmSumKbn:= stWorkRecKo^.prmSumKbn;
//	m_stRecPaste^.prmAddKbn:= stWorkRecKo^.prmAddKbn;

	// 加算体系削除
	if DeleteHOJYOTREE(NodeOya, m_cNodeRightClk) = False then
	begin
		abort;
		exit;
	end;

	// ノード自体を削除
	m_cNodeRightClk.Delete;
	gbTreeClick := False;

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟコピーｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.CopyClick(Sender: TObject);
begin
	m_stRecPaste  := m_cNodeRightClk.Data;

	// 指定のノードのﾊﾟﾗﾒｰﾀをｾｰﾌﾞ
//	m_stRecPaste^.prmCode  := stWorkRecKo^.prmCode;
//	m_stRecPaste^.prmName  := stWorkRecKo^.prmName;
//	m_stRecPaste^.prmSumKbn:= stWorkRecKo^.prmSumKbn;
//	m_stRecPaste^.prmAddKbn:= stWorkRecKo^.prmAddKbn;

	// 加算体系削除
//    DeleteKMKTREE(NodeOya, m_cNodeRightClk);

	// ノード自体を削除
//	m_cNodeRightClk.Delete;

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ貼り付けｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.PasteClick(Sender: TObject);
var
	NodeSelect		: TTreeNode;
	NodeOya			: TTreeNode;
	NodeKo			: TTreeNode;
	stWorkRecSelect	: ^TreeViewRec;
	stWorkRecOya	: ^TreeViewRec;
	stWorkRecAdd 	: ^TreeViewRec;
	QueryCheck		: TMQuery;
	iCut			: Integer;
	stCode			: String;
	stName			: String;
	iCode			: Currency;
    iSumKbn         : Integer; //<223>
begin
	New(stWorkRecAdd);

	NodeSelect		:= m_cNodeRightClk;
	stWorkRecSelect	:= NodeSelect.Data;

	// 親ノード取得
	if stWorkRecSelect^.nDivision = 0 then
		NodeOya			:= NodeSelect.Parent
	else
		NodeOya			:= NodeSelect;

	stWorkRecOya	:= NodeOya.Data;

	// 同一加算先には貼り付け禁止
	if m_stRecPaste^.Incode = stWorkRecSelect^.Incode then
	begin
		MjsMessageBoxEX(Self,'２重加算の為コピーすることができません。','確認',mjInformation,mjOk, mjDefOk);
		exit;
	end;

	// 加算体系ﾁｪｯｸ(移動先ノードに同一ﾚｺｰﾄﾞがあるかどうか)
	QueryCheck := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryCheck);
	gfnJNTSELSetDbName(QueryCheck, dbCorp_Select);		//<D10>
	try
		with QueryCheck do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
//<256> DEL			SQL.Add('select * from HojyoTree');
			SQL.Add('select EntNo from HojyoTree');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
//          SQL.Add('order by EntNo DESC');
			SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//<256> MOD St
//			SetFld('stSum').AsFloat         := stWorkRecOya^.Incode;
//			SetFld('stBased').AsFloat       := m_stRecPaste^.InCode;
			SetFld('stSum').AsString         := FormatFloat('0',stWorkRecOya^.Incode);
			SetFld('stBased').AsString       := FormatFloat('0',m_stRecPaste^.InCode);
//<256> MOD Ed

			Open;
			if EOF = False then
			begin
				Beep;
				MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjInformation,mjOk, mjDefOk);
				exit;
			end;
		end;
	finally
		QueryCheck.Free;
	end;

	try
{		try
			if m_bExFlg <> True then
			begin
				cExcept := TJNTMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> JNTMAS_EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
//					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				m_bExFlg 	:= True;
			end;
		except;
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;

}		if stWorkRecSelect^.nDivision = 0 then
		begin
			// ﾂﾘｰﾋﾞｭｰに反映
			stWorkRecAdd^.nDivision	:= m_stRecPaste^.nDivision;
			stWorkRecAdd^.strName	:= m_stRecPaste^.strName;
			stWorkRecAdd^.strExCode	:= m_stRecPaste^.strExCode;
			stWorkRecAdd^.iNCode	:= m_stRecPaste^.iNCode;
			stWorkRecAdd^.iSyokuti	:= m_stRecPaste^.iSyokuti;

			stCode := m_stRecPaste^.strExCode;
			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
					if stCode <> '' then
					begin
						iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(stCode, 1, iCut);
					end;
				end
				else
				begin
					if stCode <> '' then
					begin
						iCode := StrToInt64(Trim(stCode));
						stCode := CurrToStr(iCode);
					end;
				end;
			end;
			stName := stCode + ' ' + m_stRecPaste^.strName;

            //↓<223>
            // 加算先(親)の実在合計区分をチェックする。
            if not fnGetSumKbn(TreeViewRec(NodeOya.Data^).iNCode,iSumKbn) then
            begin
                // 取得できない場合はエラー。
				Abort;
				Exit;
            end;
            // 加算先(親)が実在の場合
            if iSumKbn = 0 then
            begin
                // 総合計のノードに加算元(自身)が存在しているか？
                // 存在していれば何もしない。
                if fnExistsSouGoukei(m_stRecPaste^.InCode) then
                begin
                    Exit;
                end;
                // 存在していない場合は総合計のノードをNodeOyaに代入し、以降のロジックを流す。
                NodeOya := VTreeView.Items[0];
            end;
            //↑<223>

			NodeKo := VTreeView.Items.AddChildObject(NodeOya, stName, stWorkRecAdd);
			if m_stRecPaste^.nDivision = 0 then			// 追加するノードが実在
			begin
				NodeKo.ImageIndex := IC_JCLOSE;
				NodeKo.SelectedIndex := IC_JOPEN;
			end
			else 									// 合計
			begin
				NodeKo.ImageIndex := IC_GMCLOSE;
				NodeKo.SelectedIndex := IC_GMOPEN;
			end;

			// 加算体系書込
			if WriteHOJYOTREE(NodeOya, NodeKo, NodeSelect) = False then
			begin
				abort;
				exit;
			end;

			NodeOya.DeleteChildren;
			gbTreeClick := False;

			fnCreateTreeViewItems(NodeOya);				// 加算体系ﾂﾘｰﾋﾞｭｰ作成

			{Grid & Card 再作成}
			MemPost_Sw := 1;
			fnCreateAll ();
			MemPost_Sw := 0;

			// グリッド再表示
	//		TaikeiSelectDsp(NodeOya);
		end
		else
		begin
			// ﾂﾘｰﾋﾞｭｰに反映
			stWorkRecAdd^.nDivision	:= m_stRecPaste^.nDivision;
			stWorkRecAdd^.strName	:= m_stRecPaste^.strName;
			stWorkRecAdd^.strExCode	:= m_stRecPaste^.strExCode;
			stWorkRecAdd^.iNCode	:= m_stRecPaste^.iNCode;
			stWorkRecAdd^.iSyokuti	:= m_stRecPaste^.iSyokuti;

			stCode := m_stRecPaste^.strExCode;
			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
					if stCode <> '' then
					begin
						iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(stCode, 1, iCut);
					end;
				end
				else
				begin
					if stCode <> '' then
					begin
						iCode := StrToInt64(Trim(stCode));
						stCode := CurrToStr(iCode);
					end;
				end;
			end;
			stName := stCode + ' ' + m_stRecPaste^.strName;

            //↓<223>
            // 加算先(親)の実在合計区分をチェックする。
            if not fnGetSumKbn(TreeViewRec(NodeSelect.Data^).iNCode,iSumKbn) then
            begin
                // 取得できない場合はエラー。
				Abort;
				Exit;
            end;
            // 加算先(親)が実在の場合
            if iSumKbn = 0 then
            begin
                // 総合計のノードに加算元(自身)が存在しているか？
                // 存在していれば何もしない。
                if fnExistsSouGoukei(m_stRecPaste^.InCode) then
                begin
                    Exit;
                end;
                // 存在していない場合は総合計のノードをNodeOyaに代入し、以降のロジックを流す。
                NodeSelect := VTreeView.Items[0];
            end;
            //↑<223>

			NodeKo := VTreeView.Items.AddChildObject(NodeSelect, stName, stWorkRecAdd);
			if m_stRecPaste^.nDivision = 0 then			// 追加するノードが実在
			begin
				NodeKo.ImageIndex := IC_JCLOSE;
				NodeKo.SelectedIndex := IC_JOPEN;
			end
			else 									// 合計
			begin
				NodeKo.ImageIndex := IC_GMCLOSE;
				NodeKo.SelectedIndex := IC_GMOPEN;
			end;

			// 加算体系書込
			if WriteHOJYOTREE(NodeSelect, NodeKo, NodeSelect) = False then
			begin
				abort;
				exit;
			end;

			NodeSelect.DeleteChildren;
			gbTreeClick := False;

			fnCreateTreeViewItems(NodeSelect);				// 加算体系ﾂﾘｰﾋﾞｭｰ作成

			{Grid & Card 再作成}
			MemPost_Sw := 1;
			fnCreateAll ();
			MemPost_Sw := 0;

			// グリッド再表示
	//		TaikeiSelectDsp(NodeSelect);
		end;

		m_stRecPaste := nil;							// 初期化
	//	VKasantaikei.Selected := m_cNodeRightClk;
	//	Mtab1.BorderCaption := m_cNodeRightClk.Text;
//		VTreeView.FullExpand;

	finally
//		if cExcept <> nil then
//		begin
//			cExcept.ResetTerm;
//			cExcept.Free;
//			cExcept := nil;
//		end;
	end;

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ削除ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.DeleteClick(Sender: TObject);
//var
//	NodeOya			: TTreeNode;
//	NodeKo			: TTreeNode;
//	stWorkRecKo		: ^TreeViewRec;
//	stWorkRecOya	: ^TreeViewRec;
//	iRet			: Integer;
//	iRetChk			: Boolean;
//	QueryRead		: TMQuery;
begin
{	NodeKo		 := m_cNodeRightClk;
	stWorkRecKo  := NodeKo.Data;
	NodeOya		 := NodeKo.Parent;
	stWorkRecOya := NodeOya.Data;

{	if NodeKo.getFirstChild <> nil then
	begin
		Beep;
		MjsMessageBoxEX(Self,'加算先として登録済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
		exit;
	end;

	// 発生データの存在チェック
	iRetChk := fnDeleteCheck(stWorkRecKo^.strExCode);
	if iRetChk = False then
	begin
		Beep;
		MjsMessageBoxEX(Self,'仕訳データが入力済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
		exit;
	end;

	QueryRead		:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);

	try
		// 諸口かどうか判定
		QueryRead.Close;
		QueryRead.SQL.Clear;		 							// QueryFree 初期化
		QueryRead.SQL.Add('Select * from HojyoMA');
		QueryRead.SQL.Add('Where MasterKbn=51 AND GCode=:stCode AND NCode=0');
		QueryRead.SetFld('stCode').AsString := stWorkRecKo^.strExCode;
		QueryRead.Open;

		if QueryRead.EOF = False then
		begin
			QueryRead.Close;
			QueryRead.SQL.Clear;		 							// QueryFree 初期化
			QueryRead.SQL.Add('Select * from HojyoMA');
			QueryRead.SQL.Add('Where MasterKbn=51 AND NCode<>0 AND RecordKbn=0');
			QueryRead.Open;

			if QueryRead.EOF = False Then
			begin
				Beep;
				MjsMessageBoxEX(Self,'諸口以外のデータが登録済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
				exit;
			end;
		end;
	finally
		QueryRead.Free;
	end;
}
{	Beep;
	iRet := MjsMessageBoxEX(Self,''''+stWorkRecKo^.strName+''''+'を削除します。よろしいですか？','削除',mjQuestion,mjYesNo,mjDefNo);
	if iRet <> mrYes then
		exit;

	m_fDel := 1;										// 削除ﾌﾗｸﾞ

	if NodeSearch(stWorkRecKo^, stWorkRecOya^) <= 1 then							// ツリー内に一件のみの時は削除
	begin
		// 取引先削除
		if fnDataDelete(stWorkRecKo^.strExCode, stWorkRecKo^.nDivision) = False then
		begin
			m_fDel := 0;										// 削除ﾌﾗｸﾞ
			abort;
			exit;
		end;
	end
	else																			// 一件以上存在する場合は加算体系のみ削除
	begin
		// 加算体系削除
		if DeleteHOJYOTREE(NodeOya, NodeKo) = False then
		begin
			m_fDel := 0;										// 削除ﾌﾗｸﾞ
			abort;
			exit;
		end;
	end;

	// ノード自体を削除
	NodeKo.Delete;
	gbTreeClick := False;

	// グリッド再表示
	MemPost_Sw := 1;

	fnCreateAll ();


//	m_stGCodeSave := stGCode;							// ｺｰﾄﾞのｾｰﾌﾞ

	MemPost_Sw := 0;
	m_fDel := 0;										// 削除ﾌﾗｸﾞ
}

	BSpeedButtonDelClick(Sender);
end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ体系消去ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.AllDelClick(Sender: TObject);
var
	NodeWork		:	TTreeNode;
	NodeTop			:	TTreeNode;
	NodeOya			:	TTreeNode;
	stWorkRecWk		: ^TreeViewRec;
//	stWorkRecOya	: ^TreeViewRec;
	QueryRead		:	TMQuery;
	iCount			:	Integer;
begin

	try
{		try
			if m_bExFlg <> True then
			begin
				cExcept := TJNTMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> JNTMAS_EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
//					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				m_bExFlg 	:= True;
			end;
		except;
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;
}
		NodeTop  := VTreeView.Items[0];
		NodeWork := m_cNodeRightClk;
		NodeOya := NodeWork.Parent;
		stWorkRecWk := NodeWork.Data;
	//	stWorkRecOya := NodeTop.Data;

		// 加算体系削除
		if DeleteHOJYOTREE(NodeOya, NodeWork) = False then
		begin
			abort;
			exit;
		end;

		QueryRead := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
		gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

		try
			with QueryRead do
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 取引先を外部ｺｰﾄﾞ昇順でGET
//<256> DEL				SQL.Add('select Count(*) as Kensu from HojyoTree');
				SQL.Add('select Count(BasedNCode) as Kensu from HojyoTree');  //<256> ADD
	//			SQL.Add('where MasterKbn=51 AND SumCode =:SUM AND BasedCode =:BASE');
				SQL.Add('where MasterKbn=:pMKBN AND BasedNCode =:BASE');
	//			SetFld('SUM').AsString := stWorkRecOya^.strExCode;
				SetFld('pMKBN').AsInteger  := ucTORIHIKI;
//<256> DEL				SetFld('BASE').AsFloat     := stWorkRecWk^.inCode;
				SetFld('BASE').AsString     := FormatFloat('0',stWorkRecWk^.inCode);  //<256> ADD
				Open;

				iCount := GetFld('Kensu').AsInteger;
			end;
		finally
			QueryRead.Close;
			QueryRead.Free;
		end;

		// 加算体系書込
		if iCount <= 0 then
		begin
			if WriteHOJYOTREE(NodeTop, NodeWork, NodeTop) = False then
			begin
				abort;
				exit;
			end;

			// Nodeの移動
//<240> DEL			NodeWork.MoveTo (NodeTop, naAddChild);
		end
		else;
//<240> DEL			NodeWork.Delete;
    	fnEraseTreeViewItems    (NodeWork);  //<240> ADD
		fnCreateAll ();
	finally
//		if cExcept <> nil then
//		begin
//			cExcept.ResetTerm;
//			cExcept.Free;
//			cExcept := nil;
//		end;
	end;

//	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

{	iRet := MjsMessageBoxEX(Self,'取引先加算体系を消去します。よろしいですか？','削除',mjQuestion,mjYesNo,mjDefNo);
	if iRet = mrYes then
	begin
		QueryHojyoMA := TMQuery.Create (Self);
		MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryHojyoMA);
		QueryHojyoTREE := TMQuery.Create (Self);
		MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryHojyoTREE);

		VTreeView.Items.Clear; 	{ 既存のノードを削除する }

{		iMaxEntNo := 0;

		try
			with QueryHojyoMA do
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 取引先を外部ｺｰﾄﾞ昇順でGET
				SQL.Add('select * from HojyoMA');
				SQL.Add('where MasterKbn=51 AND RecordKbn=0');
				SQL.Add('order by GCode');

				Open;
			end;

			with QueryHojyoTREE do
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 加算体系マスタ該当ﾚｺｰﾄﾞ全削除
				SQL.Add('delete from HojyoTree');
				SQL.Add('where MasterKbn=51');

				// DB更新
				if (ExecSQL = False) then
				begin
					ErrorMessageDsp(QueryHojyoTREE);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryHojyoTREE.Close;
//					QueryHojyoTREE.Free;
					Exit;
				end;

				MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

				gbHojyoTreeDelFlag	:= True;					// 削除ﾌﾗｸﾞ
				gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ

				// 加算体系新規に書込み
				while QueryHojyoMA.EOF = False do
				begin
					Close;
					SQL.Clear;							// ｸｴﾘの初期化

					// 挿入ｸｴﾘの作成
					SQL.Add('insert into HojyoTree');
					SQL.Add('(MasterKbn, PatternNo, SumCode, EntNo, BasedCode, AddKbn)');
					SQL.Add('values (:iMasterKbn, 0, :stSumCode, :iEntNo, :stBasedCode, :iAddKbn)');

					// マスタ区分
					SetFld('iMasterKbn').AsInteger := 51;
					// 加算先外部ｺｰﾄﾞ
					SetFld('stSumCode').AsString := '          ';
					// 登録NO
					iMaxEntNo := iMaxEntNo + 100;
					SetFld('iEntNo').AsInteger := iMaxEntNo;			// 登録NOは親内部で100番単位
					// 加算元外部ｺｰﾄﾞ
					SetFld('stBasedCode').AsString := QueryHojyoMA.GetFld('GCode').AsString;
					// 加算区分
					SetFld('iAddKbn').AsInteger := 0;					// とりあえず加算にしておく

					// DB更新
					if (ExecSQL = False) then
					begin
						ErrorMessageDsp(QueryHojyoTREE);
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						QueryHojyoTREE.Close;
//						QueryHojyoTREE.Free;
						Exit;
					end;

					MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

					gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ

					QueryHojyoMA.Next;
				end;
			end;
		finally
			QueryHojyoMA.Free;
			QueryHojyoTREE.Free;
		end;

		// グリッド再表示
//		MemPost_Sw := 1;

		{TreeView 作成}
// 		fnRebuildTreeViewItems ();

		{TreeViewはぐれ 作成}
//		fnRebuildTreeViewItemsHagure ();

{		fnCreateAll ();

//		MemPost_Sw := 0;
	end
	else
		exit;
}
end;

//**************************************************************************
//	Proccess  :	ツリービュー該当科目サーチ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.NodeSearch(stWorkRecSearch : TreeViewRec; stWorkRecOya : TreeViewRec): Integer;
var
	iCount   		: Integer;
	iLoop   		: Integer;
	stWorkRec		: ^TreeViewRec;
    QueryRead       :   TMQuery;  //<KSN> ADD
begin
	iCount := 0;
//<KSN> ADD St
    if PPanelTree.Visible = False then
    begin
        QueryRead := nil;
        try
            QueryRead		:= TMQuery.Create(Self);
//<D10>		MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
			gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

			QueryRead.Close;
			QueryRead.SQL.Clear;
            QueryRead.SQL.Add('Select T1.GCode as GCode,T1.BasedNCode as BasedNCode, Count(T1.GCode) as count ');
            QueryRead.SQL.Add(' From ');
            QueryRead.SQL.Add('(Select * From HojyoTree TR ');
            QueryRead.SQL.Add('Inner join MTokui MA ');
            QueryRead.SQL.Add('ON TR.MasterKbn = :iMasterKbn ');
            QueryRead.SQL.Add('AND TR.BasedNCode = MA.NCode ');
            QueryRead.SQL.Add('Where MA.RDelKbn = 0 ');
            QueryRead.SQL.Add('And MA.GCode = :strExCode) T1 ');
            QueryRead.SQL.Add('Group by GCode, BasedNCode ');

            QueryRead.SetFld('strExCode').AsString	:= stWorkRecSearch.strExCode;
            QueryRead.SetFld('iMasterKbn').AsInteger	:= ucTORIHIKI;

			QueryRead.Open;

            if QueryRead.Eof = false then
            begin
                iCount := QueryRead.GetFld('Count').AsInteger;
            end;

        finally
            QueryRead.Close;
            QueryRead.Free;
            result := iCount;
        end;
        Exit;
    end;
//<KSN> ADD Ed

	for iLoop := 1 to VTreeView.Items.Count do
	begin
		stWorkRec := VTreeView.Items [iLoop - 1].Data;
		if stWorkRecSearch.strExCode = stWorkRec.strExCode then
		begin
			Inc(iCount);
{			if (iCount >= 2) AND
			   (stWorkRecOya.strExCode = stWorkRec.strExCode) AND
			   (stWorkRecOya.nDivision = stWorkRec.nDivision) then
			begin
				VTreeView.Items [iLoop - 1].Delete;
				gbTreeClick := False;
			end;}
		end
	end;

	result := iCount;
end;

//**************************************************************************
//	Proccess  :	加算体系削除ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.TaikeiDelete(NodeOya : TTreeNode; NodeKo : TTreeNode);
var
	stWorkRecKo	:	^TreeViewRec;
	stWorkRecOya:	^TreeViewRec;
	NodeChild	:	TTreeNode;
//	iRet		:	Boolean;
begin
	stWorkRecKo  := NodeKo.Data;
	stWorkRecOya := NodeOya.Data;
	NodeChild := NodeKo.getFirstChild;

	// 発生データの存在チェック
//	iRet := fnDeleteCheck(strGCode);
//    if iRet = False then
//   begin
//		MjsMessageBoxEX(Self,'仕訳データが入力済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
//		exit;
//   end;

	if NodeSearch(stWorkRecKo^, stWorkRecOya^) <= 1 then	// ツリー内に一件のみの時は削除
	begin
		// 加算体系削除
		if DeleteHOJYOTREE(NodeOya, NodeKo) = False then
		begin
			abort;
			exit;
		end;

		// 取引先削除
		if fnDataDelete(stWorkRecKo^.strExCode, stWorkRecKo^.nDivision) = False then
		begin
			abort;
			exit;
		end;
	end;

	// 子ノードを削除
	while NodeChild <> nil do
	begin
		// 加算体系削除
		TaikeiDelete(NodeKo, NodeChild);
		NodeChild := NodeKo.GetNextChild(NodeChild);
	end;
end;


//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからの取引先削除
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : TTreeNode
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.DelKoujiClick(Sender: TObject);
begin
	BSpeedButtonDelClick(Sender);
end;

//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからの詳細表示
//	Name	  :	N.Nabe
//	Date	  :	2000/ 12 / 04
//	Parameter : TTreeNode
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.TPDetailClick(Sender: TObject);
var
	NodeWork	:	TTreeNode;
	NodeSelect	:	TTreeNode;
	NodeOya		:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	stWorkRecOya:	^TreeViewRec;
	iSumKbn		:	Integer;
	strGCode	:	String;
	stWorkRecBase: ^TreeViewRec;
	stCode		: String;
	stName		: String;
	iCode		: Integer;
	iCut		: Integer;
begin
	NodeWork := m_cNodeRightClk;
	stWorkRec := NodeWork.Data;

	Root_PMTab.Items.Selected := stWorkRec^.nDivision;

   	VTreeview.Selected := m_cNodeRightClk;
	gbTreeClick := False;

	m_fAccessTree    := False;
	if stWorkRec.nDivision = PAGE_JITUZAI then
    begin
        iSumKbn := 0;
        {実在取引先／詳細登録}
    //    Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Card;
    //		Root_PMTab.Items.Selected		:= -1;
    //		Root_PMTab.Items.Selected		:= 0;
        Jituzai_PPanel_Grid.Visible 	:= False;
        Jituzai_PPanel_Card.Visible 	:= True;

//↓<252>
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            fnCompVisible(True)
        else
            fnCompVisible(False);
//↑<252>

        B_Syousai.Caption			:= '一覧(&T)';

        NodeOya := m_cNodeRightClk.Parent;
        stWorkRecOya := NodeOya.Data;
        if stWorkRecOya^.nDivision = 9 then
            Root_PMTab.Items[1].Enabled	:= True;

   		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
   			f0TGCode.SetFocus
   		else
   			f0NGCode.SetFocus;

    		fnDataRead (stWorkRec.strExCode, iSumKbn, 0);

(*
<129> VTreeViewClick.OnChangeで同様の処理をしているので不必要？
        if JHojyoMA_DMemData.RecordCount <> 0 then
            JHojyoMA_DMemData.First;
        while JHojyoMA_DMemData.Eof = False do
        begin
            if JHojyoMA_DMemDataGCode.AsString = stWorkRec.strExCode then
            begin
                Break;
            end;
            JHojyoMA_DMemData.Next;
        end;
*)

        fnCreateCard (iSumKbn);
    end
	else
	begin
	{合計工事パネルコントロール}
		iSumKbn								:= 1;
		{合計工事／詳細登録}
        Jituzai_PPanel_Grid.Visible 	:= False;
        Jituzai_PPanel_Card.Visible 	:= True;

//↓<252>
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            fnCompVisible(True)
        else
            fnCompVisible(False);
//↑<252>

        B_Syousai.Caption			:= '一覧(&T)';

		Root_PMTab.Items[1].Enabled	:= True;
//		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
//			Goukei_ETEdit_GCode.SetFocus
//		else
//			Goukei_ENEdit_GCode.SetFocus;

		strGCode := stWorkRec^.strExCode;
		fnDataRead (strGCode, iSumKbn, 0);
		// 他の合計についている？
		NodeSelect := VTreeView.Items[0];
		while NodeSelect <> nil do
		begin
			stWorkRec 	:= NodeSelect.Data;
			if strGCode = stWorkRec^.strExCode then
			begin
				NodeOya := NodeSelect.Parent;
				stWorkRecOya := NodeOya.Data;
				if stWorkRec^.strExCode <> stWorkRecOya^.strExCode then
				begin
					TBaseNodeSv := TBaseNode;
					TBaseNode := NodeOya;
					stWorkRecBase	:= TBaseNode.Data;
					if stWorkRecBase^.nDivision <> 9 then
					begin
						stCode	:= stWorkRecBase^.strExCode;
						m_stGCodeSave := stCode;		// ｺｰﾄﾞのｾｰﾌﾞ
					end
					else
					begin
						stCode		 	:= '';
						m_stGCodeSave	:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
					end;
					if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
					begin
						if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
						begin
							if stCode <> '' then
							begin
								iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
								System.Delete(stCode, 1, iCut);
							end;
						end
						else
						begin
							if stCode <> '' then
							begin
								iCode := StrToInt64(Trim(stCode));
								stCode := IntToStr(iCode);
							end;
						end;
					end;
					stName							:= stWorkRecBase^.strName;
					Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
//					Root_PMTab.BorderCaption := TBaseNode.Text;
				end;
				break;
			end;
			NodeSelect	:= NodeSelect.GetNext;
		end;

        JHojyoMA_DMemData.DisableControls; //<249>

		if JHojyoMA_DMemData.RecordCount <> 0 then
			JHojyoMA_DMemData.First;
		while JHojyoMA_DMemData.Eof = False do
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			begin
				if JHojyoMA_DMemDataGCode.AsString = strGCode then
				begin
					Break;
				end;
			end
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
				begin
					if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) = strGCode then
					begin
						Break;
					end;
				end;
			end;
			JHojyoMA_DMemData.Next;
		end;

		JHojyoMA_DMemData.EnableControls; //<249>

		SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
		if JHojyoMA_DMemData.Eof = True then
			fnMemSet (iSumKbn, False);

		fnCreateCard (iSumKbn);
	end;

//<KSN> ADD St
    // 詳細起動であればTreeViewは非表示
    if (GetStartMode() = 1) then
    begin
        TreeView_EventCtrl(VTreeView,False);
        PPanelTree.Visible := False;
        Root_PMTab.Items[PAGE_KASAN].Visible := True;
        B_Sort.Enabled := False;
        B_Search.Enabled := False;
        Root_PMTab.BorderCaption := '';      // タブのキャプションはクリアしておく
    end;
//<KSN> ADD Ed
	m_fAccessTree    := True;
end;

//**********************************************************************
//	Proccess	:	付箋表示処理
//	Name		:	N.Nabe
//	Date		:	2000/08/23
//	Return		:
//	History		:	9999/99/99	X.Xxxx
//					XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenDsp(iPage : Integer; stCode : String; iFlg : Integer);
var
	QueryFusen	:	TMQuery;
begin
	if stCode = '' then
		exit;

	QueryFusen := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 取引先付箋情報をGET
//<256> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenKbn from MFusenInfo');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL			SetFld('NCode').AsFloat   := fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD

			Open;						// ｸｴﾘの開始

			if EOF = False then
			begin
                if JHojyoMA_DMemDataFusenIndex.AsInteger <> GetFld('FusenKbn').AsInteger then
                begin
                    if iFlg = 1 then
                        JHojyoMA_DMemData.Edit;
                    JHojyoMA_DMemDataFusen.Clear;
                    JHojyoMA_DMemDataFusenIndex.AsInteger := GetFld('FusenKbn').AsInteger;

                    // 一覧<120>
                    if ( Jituzai_PPanel_Grid.Visible ) then
                    begin
                        case GetFld('FusenKbn').AsInteger of
                            RED     :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Red   .Picture.Bitmap);
                            GREEN   :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Green .Picture.Bitmap);
                            BLUE    :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Blue  .Picture.Bitmap);
                            ORANGE  :   JHojyoMA_DMemDataFusen.Assign(Image_Fusen_Orange.Picture.Bitmap);
                        end;
                    end
                    // 詳細
                    else
                    begin
                        case GetFld('FusenKbn').AsInteger of
                            RED     :	JHojyoMA_DMemDataFusen.Assign(GFRed     .Bitmap);
                            GREEN   :	JHojyoMA_DMemDataFusen.Assign(GFGreen   .Bitmap);
                            BLUE    :	JHojyoMA_DMemDataFusen.Assign(GFBlue    .Bitmap);
                            ORANGE  :	JHojyoMA_DMemDataFusen.Assign(GFOrange  .Bitmap);
                        end;
                    end;

                    if iFlg = 1 then
                    begin
                        MemPost_Sw := 1;
                        JHojyoMA_DMemData.Post;
                        MemPost_Sw := 0;
                    end;
                end;
			end
			else
			begin
                if (JHojyoMA_DMemDataFusenIndex.AsInteger <> NOCOLOR) and
                    (JHojyoMA_DMemDataFusenIndex.AsInteger <> 0) then
                begin
                    if iFlg = 1 then
                        JHojyoMA_DMemData.Edit;
                    JHojyoMA_DMemDataFusen.Clear;
                    JHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR;
                    if iFlg = 1 then
                    begin
                        MemPost_Sw := 1;
                        JHojyoMA_DMemData.Post;
                        MemPost_Sw := 0;
                    end;
                end;
			end;
		end;
	finally
		QueryFusen.Free;
	end;
end;

//**********************************************************************
//	Proccess	:	付箋情報書込み処理
//	Name		:	N.Nabe
//	Date		:	2000/08/23
//	Return		:
//	History		:	9999/99/99	X.Xxxx
//					XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP004001f.FusenInfoWrite(iColor : Integer; stCode : String; stCmt : String; bSw: Boolean): Boolean;
var
	QueryFusen	:	TMQuery;
	sCmntSv		:	String;
begin
	QueryFusen := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	sCmntSv := '';

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 取引先付箋情報をGET
//<256> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenCmnt from MFusenInfo');  //<256> ADD
			SQL.Add('Where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL			SetFld('NCode').AsFloat   := fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD
			Open;						// ｸｴﾘの開始

			if EOF = False then
			begin
				// 付箋コメント退避
				sCmntSv := GetFld('FusenCmnt').AsString;

				// 書き込まれている付箋を削除
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 挿入ｸｴﾘの作成
				SQL.Add('Delete MFusenInfo');
				SQL.Add('Where MasterKbn=:pMKBN AND NCode=:NCode');
				SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL    			SetFld('NCode').AsFloat   := fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
    			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD

				// DB更新
				if (ExecSQL = False) then
				begin
					ErrorMessageDsp(QueryFusen);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryFusen.Close;
	//				QueryFusen.Free;
					result := False;
					Exit;
				end;

				MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end;

			Close;
			SQL.Clear;							// ｸｴﾘの初期化
			// 挿入ｸｴﾘの作成
			SQL.Add('insert into MFusenInfo');
			SQL.Add('(MasterKbn, NCode,SubNCode, FusenKbn, FusenCmnt)');
			SQL.Add('values (:iMasterKbn, :NCode, 0,:iFusenKbn, :stFsnCmt)');
			// ﾏｽﾀ区分
			SetFld('iMasterKbn').AsInteger := ucTORIHIKI;
			SetFld('NCode').AsFloat   := fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
			// 付箋区分
			SetFld('iFusenKbn').AsInteger := iColor;
			// 付箋コメント
			if bSw = True then
			begin
				if stCmt <> '' then
					SetFld('stFsnCmt').AsString := stCmt
				else
					SetFld('stFsnCmt').AsString := sCmntSv;
			end
			else
				SetFld('stFsnCmt').AsString := '';

			// DB更新
			if (ExecSQL = False) then
			begin
				ErrorMessageDsp(QueryFusen);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				QueryFusen.Close;
//				QueryFusen.Free;
				result := False;
				Exit;
			end;

			MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
		end;
	finally
		QueryFusen.Free;
	end;

	result := True;
end;

//**********************************************************************
//	Proccess	:	付箋情報削除処理
//	Name		:	N.Nabe
//	Date		:	2000/08/23
//	Return		:
//	History		:	9999/99/99	X.Xxxx
//					XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP004001f.FusenInfaDelete(stCode : String): Boolean;
var
	QueryFusen	:	TMQuery;
begin
	QueryFusen := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 資金繰科目科目付箋情報をGET
//<256> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenKbn from MFusenInfo');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL			SetFld('NCode').AsFloat   := fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD
			Open;						// ｸｴﾘの開始

			if EOF = False then
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 削除ｸｴﾘの作成
				SQL.Add('delete from MFusenInfo');
				SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
				SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL    			SetFld('NCode').AsFloat   := fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
    			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(stCode,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD

				// DB更新
				if (ExecSQL = False) then
				begin
					ErrorMessageDsp(QueryFusen);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryFusen.Close;
//					QueryFusen.Free;
					result := False;
					Exit;
				end;

				MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end;
		end;
	finally
		QueryFusen.Free;
	end;

	result := True;

end;

//**************************************************************************
//	Proccess  :	グリッドﾎﾟｯﾌﾟｱｯﾌﾟｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.PMTokuiPopup(Sender: TObject);
var
	QueryFusen	:	TMQuery;
begin
	QueryFusen := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>
//↓<2257-4>
	if (B_Syousai.Caption <> '詳細(&T)') then
	//詳細の時
	begin
		if (uvCopyMtokui = true) or (MTOKUI_DMQuery.Eof = true) then
		//コピーモードの時か新規の時は付箋を貼らせない
        begin
            GFRed.Enabled		:= false;
            GFBlue.Enabled		:= false;
            GFGreen.Enabled		:= false;
            GFOrange.Enabled	:= false;
//<2257-6>コピーの時に付箋を新規扱いにするためJHojyoMA_DMemDataGcodeを空にする。
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Edit;
			JHojyoMA_DMemDataGcode.AsString	:=	'';
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
//<2257-6>
        end
		else
		//更新の時はﾛｰﾙを見て付箋貼り付けを可にする
		begin
//<Authority> MOD St
{
            GFRed.Enabled		:= m_cJNTArea.IsFusen;
            GFBlue.Enabled		:= m_cJNTArea.IsFusen;
            GFGreen.Enabled		:= m_cJNTArea.IsFusen;
            GFOrange.Enabled	:= m_cJNTArea.IsFusen;
}
            GFRed.Enabled		:= m_JNTAuthority.IsFusen;
            GFBlue.Enabled		:= m_JNTAuthority.IsFusen;
            GFGreen.Enabled		:= m_JNTAuthority.IsFusen;
            GFOrange.Enabled	:= m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
		end;
	end;
//↑<2257-4>
//	PMKouji.Items[0].Checked := False;
//	PMKouji.Items[1].Checked := False;
//	PMKouji.Items[2].Checked := False;
//	PMKouji.Items[3].Checked := False;
	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 取引先付箋情報をGET
//<256> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenKbn from MFusenInfo');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL			SetFld('NCode').AsFloat   := fnGetNCODE(JHojyoMA_DMemDataGCode.AsString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(JHojyoMA_DMemDataGCode.AsString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD

			Open;						// ｸｴﾘの開始

{			while EOF = False do
			begin
//	            showmessage(IntToStr(GetFld('FusenKbn').AsInteger));
				case GetFld('FusenKbn').AsInteger of
				RED:	PMKouji.Items[0].Checked := True;
				GREEN:	PMKouji.Items[1].Checked := True;
				BLUE:	PMKouji.Items[2].Checked := True;
				ORANGE:	PMKouji.Items[3].Checked := True;
				end;
				Next;
			end;}

			if EOF = False then
			begin
				PMTokui.Items[0].Visible := True;
				PMTokui.Items[1].Visible := True;
				PMTokui.Items[2].Visible := True;
				case GetFld('FusenKbn').AsInteger of
					RED:
					begin
						PMTokui.Items[3].Visible := False;
						PMTokui.Items[4].Visible := True;
						PMTokui.Items[5].Visible := True;
						PMTokui.Items[6].Visible := True;
						GFDel.Bitmap.Assign(GFRed.Bitmap);
					end;
					BLUE:
					begin
						PMTokui.Items[3].Visible := True;
						PMTokui.Items[4].Visible := False;
						PMTokui.Items[5].Visible := True;
						PMTokui.Items[6].Visible := True;
						GFDel.Bitmap.Assign(GFBlue.Bitmap);
					end;
					GREEN:
					begin
						PMTokui.Items[3].Visible := True;
						PMTokui.Items[4].Visible := True;
						PMTokui.Items[5].Visible := False;
						PMTokui.Items[6].Visible := True;
						GFDel.Bitmap.Assign(GFGreen.Bitmap);
					end;
					ORANGE:
					begin
						PMTokui.Items[3].Visible := True;
						PMTokui.Items[4].Visible := True;
                        PMTokui.Items[5].Visible := True;
						PMTokui.Items[6].Visible := False;
						GFDel.Bitmap.Assign(GFOrange.Bitmap);
					end;
				end;
			end
			else
			begin
				PMTokui.Items[0].Visible := False;
                PMTokui.Items[1].Visible := False;
				PMTokui.Items[2].Visible := False;
				PMTokui.Items[3].Visible := True;
				PMTokui.Items[4].Visible := True;
				PMTokui.Items[5].Visible := True;
				PMTokui.Items[6].Visible := True;
			end;
		end;
	finally
		QueryFusen.Free;
	end;
end;

//**************************************************************************
//	Proccess  :	グリッドﾎﾟｯﾌﾟｱｯﾌﾟ付箋貼り付けｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(各色)
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.GFRedOffClick(Sender: TObject);
var
	iIndex	:	Integer;
	i		:	Integer;
	stCode	:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(RED, stCode, '', False) = False then
    begin
        abort;
        exit;
    end;


    FusenDsp(iIndex, stCode, 1);

    if B_Syousai.Caption = '詳細(&T)' then
    begin
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
		memFsn.RecNo := JHojyoMA_DMemData.RecNo;
		memFsn.Edit;
		memFsnCode.AsString	:= '';
		memFsnCmnt.AsString := '';
		memFsn.Post;
    end;

    //付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    //ｶｰﾄﾞ型付箋セット(赤)
    f1Fusen1.Visible := TRUE;


end;

procedure TJNTCRP004001f.GFGreenOffClick(Sender: TObject);
var
	iIndex 	:	Integer;
	i		:	Integer;
	stCode 	:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(GREEN, stCode, '', False) = False then
    begin
        abort;
        exit;
    end;

    FusenDsp(iIndex, stCode, 1);
    if B_Syousai.Caption = '詳細(&T)' then
    begin
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
		memFsn.RecNo := JHojyoMA_DMemData.RecNo;
		memFsn.Edit;
		memFsnCode.AsString	:= '';
		memFsnCmnt.AsString := '';
		memFsn.Post;
    end;
    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(緑)
    f1Fusen2.Visible := TRUE;

end;

procedure TJNTCRP004001f.GFBlueOffClick(Sender: TObject);
var
	iIndex 	:	Integer;
	i		:	Integer;
	stCode 	:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(BLUE, stCode, '', False) = False then
    begin
        abort;
        exit;
    end;

    FusenDsp(iIndex, stCode, 1);
    if B_Syousai.Caption = '詳細(&T)' then
    begin
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
		memFsn.RecNo := JHojyoMA_DMemData.RecNo;
		memFsn.Edit;
		memFsnCode.AsString	:= '';
		memFsnCmnt.AsString := '';
		memFsn.Post;
    end;
    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(青)
    f1Fusen3.Visible := TRUE;

end;

procedure TJNTCRP004001f.GFOrangeOffClick(Sender: TObject);
var
	iIndex	:	Integer;
	i		:	Integer;
	stCode	:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(ORANGE, stCode, '', False) = False then
    begin
        abort;
        exit;
    end;

    FusenDsp(iIndex, stCode, 1);
    if B_Syousai.Caption = '詳細(&T)' then
    begin
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
		memFsn.RecNo := JHojyoMA_DMemData.RecNo;
		memFsn.Edit;
		memFsnCode.AsString	:= '';
		memFsnCmnt.AsString := '';
		memFsn.Post;
    end;
    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(橙)
    f1Fusen4.Visible := TRUE;

end;

procedure TJNTCRP004001f.GFRedOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i   		:	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;

begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(RED, stCode, '', True) = False then
	begin
		abort;
		exit;
	end;

    FusenDsp(iIndex, stCode, 1);
    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(赤)
    f1Fusen1.Visible := TRUE;

	// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam				 := TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn := ucTORIHIKI;					// ﾏｽﾀ区分(取引先)
                                                            // 科目ｺｰﾄﾞ
	MasDLGParam.m_iNCode 	 := fnGetNCODE(stCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);
	MasDLGParam.m_iSubNCode  := 0;							// 科目別補助ｺｰﾄﾞ

	MasDLGParam.m_iFusenKbn	 := RED;						// 付箋区分
	MasDLGParam.m_pApRec	 := pointer( m_pMyAppRecord );	// ApRecのﾎﾟｲﾝﾀ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.GFGreenOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i   		:	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;              // 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(GREEN, stCode, '', True) = False then
	begin
		abort;
		exit;
	end;

    FusenDsp(iIndex, stCode, 1);
    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(緑)
    f1Fusen2.Visible := TRUE;


	// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;				// ﾏｽﾀ区分(取引先)
                                                            //	科目ｺｰﾄﾞ
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);
	MasDLGParam.m_iSubNCode		:= 0;						// 科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= GREEN;					// 付箋区分
	MasDLGParam.m_pApRec		:= pointer(m_pMyAppRecord); // ApRecのﾎﾟｲﾝﾀ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.GFBlueOnClick(Sender: TObject);
var
	i   		:	Integer;
	iIndex		:	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;                  // 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(BLUE, stCode, '', True) = False then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stCode, 1);

    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(青)
    f1Fusen3.Visible := TRUE;

	// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam				 := TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn := ucTORIHIKI;				    // ﾏｽﾀ区分(取引先)
                                                            // 科目ｺｰﾄﾞ
	MasDLGParam.m_iNCode 	 := fnGetNCODE(stCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);
	MasDLGParam.m_iSubNCode	 := 0;						    // 科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn	 := BLUE;						// 付箋区分
	MasDLGParam.m_pApRec	 := pointer( m_pMyAppRecord );	// ApRecのﾎﾟｲﾝﾀ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.GFOrangeOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i   		:	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	stCode := JHojyoMA_DMemDataGCode.AsString;              // 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(ORANGE, stCode, '', True) = False then
	begin
		abort;
		exit;
	end;

    FusenDsp(iIndex, stCode, 1);
    // 付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;

    // ｶｰﾄﾞ型付箋ｾｯﾄ(橙)
    f1Fusen4.Visible := TRUE;

	// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam				 := TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn := ucTORIHIKI;				    // ﾏｽﾀ区分(取引先)
                                                            //	科目ｺｰﾄﾞ
	MasDLGParam.m_iNCode 	 := fnGetNCODE(stCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);
	MasDLGParam.m_iSubNCode	 := 0;							// 科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn	 := ORANGE;						// 付箋区分
	MasDLGParam.m_pApRec	 := pointer( m_pMyAppRecord );	// ApRecのﾎﾟｲﾝﾀ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.GFDelClick(Sender: TObject);
var
	i		:	Integer;
//<KSN> DEL	iIndex  :	Integer;
	stCode	:	String;
begin
//<KSN> DEL	iIndex := Root_PMTab.Items.Selected;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		stCode := JHojyoMA_DMemDataGCode.AsString;          // 検索対象の外部ｺｰﾄﾞ 設定
	end
	else
	begin
        if JHojyoMA_DMemDataGCode.AsString <> '' then       // 検索対象の外部ｺｰﾄﾞ 設定
            stCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
        else
            stCode := '';
	end;

	if FusenInfaDelete(stCode) = False then
	begin
		abort;
		exit;
	end;

    MemPost_Sw := 1;
    JHojyoMA_DMemData.Edit;
    JHojyoMA_DMemDataFusen.Clear;
    JHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR;
    JHojyoMA_DMemData.Post;
    MemPost_Sw := 0;
    if B_Syousai.Caption = '詳細(&T)' then
    begin
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//        m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
		memFsn.RecNo := JHojyoMA_DMemData.RecNo;
		memFsn.Edit;
		memFsnCode.AsString	:= '';
		memFsnCmnt.AsString := '';
		memFsn.Post;
    end;
    //付箋初期化 <101>
    for i := 1 to  4 do
        TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
end;

// 付箋備考修正イベント
procedure TJNTCRP004001f.GFReClick(Sender: TObject);
var
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	QueryFusen	:	TMQuery;
	iColor		:	Integer;
	sCmnt		:	String;
begin
	QueryFusen := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 取引先付箋情報をGET
			SQL.Add('select FusenKbn from MFusenInfo');
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL			SetFld('NCode').AsFloat   := fnGetNCODE(JHojyoMA_DMemDataGCode.asString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('NCode').AsString   := FormatFloat('0',fnGetNCODE(JHojyoMA_DMemDataGCode.asString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));  //<256> ADD

			Open;						// ｸｴﾘの開始

			iColor := GetFld('FusenKbn').AsInteger;
		end;
	finally
		QueryFusen.Free;
	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;							//	ﾏｽﾀ区分(資金繰)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(JHojyoMA_DMemDataGCode.asString,22,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= iColor;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := JHojyoMA_DMemDataGCode.AsString;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= JHojyoMA_DMemDataGCode.AsString;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();
end;


//**************************************************************************
//	Proccess  :	ツリーﾎﾟｯﾌﾟｱｯﾌﾟ付箋貼り付けｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(各色)
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.TFRedOffClick(Sender: TObject);
var
	iIndex		:  Integer;
	NodeSelect	:  TTreeNode;
	stWorkRec	:  ^TreeViewRec;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

//	if PMKasantaikei.Items[8].Checked = False then
//	begin
		if FusenInfoWrite(RED, stWorkRec^.strExCode, '', False) = False then
		begin
			abort;
			exit;
		end;
{	end
	else
	begin
		if FusenInfaDelete(stWorkRec^.strExCode) = False then
		begin
			abort;
			exit;
		end;

		PMKasantaikei.Items[8].Checked := False;
	end;}

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

		if B_Syousai.Caption = '詳細(&T)' then
		begin
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= '';
			memFsnCmnt.AsString := '';
			memFsn.Post;
		end;
	end;
    if B_Syousai.Caption = '一覧(&T)' then
    begin
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(赤)
        f1Fusen1.Visible := TRUE;
    end;

//	fnCreateAll ();
end;

procedure TJNTCRP004001f.TFGreenOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

    if FusenInfoWrite(GREEN, stWorkRec^.strExCode, '', False) = False then
    begin
        abort;
        exit;
    end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);
		if B_Syousai.Caption = '詳細(&T)' then
		begin
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= '';
			memFsnCmnt.AsString := '';
			memFsn.Post;
		end;
	end;

    if B_Syousai.Caption = '一覧(&T)' then
    begin
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(緑)
        f1Fusen2.Visible := TRUE;
    end;

//	fnCreateAll ();
end;

procedure TJNTCRP004001f.TFBlueOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := Root_PMTab.Items.Selected;

    if FusenInfoWrite(BLUE, stWorkRec^.strExCode, '', False) = False then
    begin
        abort;
        exit;
    end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

		if B_Syousai.Caption = '詳細(&T)' then
		begin
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= '';
			memFsnCmnt.AsString := '';
			memFsn.Post;
		end;
	end;

    if B_Syousai.Caption = '一覧(&T)' then
    begin
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(青)
        f1Fusen3.Visible := TRUE;
    end;

//	fnCreateAll ();

end;

procedure TJNTCRP004001f.TFOrangeOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

    if FusenInfoWrite(ORANGE, stWorkRec^.strExCode, '', False) = False then
    begin
        abort;
        exit;
    end;
	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

		if B_Syousai.Caption = '詳細(&T)' then
		begin
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= '';
			memFsnCmnt.AsString := '';
			memFsn.Post;
		end;
	end;

    if B_Syousai.Caption = '一覧(&T)' then
    begin
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(黄)
        f1Fusen4.Visible := TRUE;
    end;

end;

procedure TJNTCRP004001f.TFRedOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfoWrite(RED, stWorkRec^.strExCode, '', True) = False then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stWorkRec^.strExCode, 1);

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;							//	ﾏｽﾀ区分(取引先)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= RED;							//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stWorkRec^.strExCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(赤)
        f1Fusen1.Visible := TRUE;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.TFGreenOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfoWrite(GREEN, stWorkRec^.strExCode, '', True) = False then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stWorkRec^.strExCode, 1);

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;							//	ﾏｽﾀ区分(取引先)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= GREEN;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stWorkRec^.strExCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(緑)
        f1Fusen2.Visible := TRUE;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.TFBlueOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i           :   Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := Root_PMTab.Items.Selected;

	if FusenInfoWrite(BLUE, stWorkRec^.strExCode, '', True) = False then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stWorkRec^.strExCode, 1);

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;							//	ﾏｽﾀ区分(取引先)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= BLUE;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stWorkRec^.strExCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(青)
        f1Fusen3.Visible := TRUE;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.TFOrangeOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i           :   Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfoWrite(ORANGE, stWorkRec^.strExCode, '', True) = False then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stWorkRec^.strExCode, 1);

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;							//	ﾏｽﾀ区分(取引先)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= ORANGE;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stWorkRec^.strExCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
        //ｶｰﾄﾞ型付箋 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
        //ｶｰﾄﾞ型付箋セット(橙)
        f1Fusen4.Visible := TRUE;
    end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP004001f.TFDelClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           :  Integer;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfaDelete(stWorkRec^.strExCode) = False then
	begin
		abort;
	end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

		if B_Syousai.Caption = '詳細(&T)' then
		begin
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<199>
			memFsn.Append;
			memFsnCode.AsString	:= '';
			memFsnCmnt.AsString := '';
			memFsn.Post;
		end;
	end;

    //ｶｰﾄﾞ型付箋 <101>
    if B_Syousai.Caption = '一覧(&T)' then
    begin
        //付箋初期化
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
    end;

//	fnCreateAll ();
end;

// 付箋備考
procedure TJNTCRP004001f.TFReClick(Sender: TObject);
var
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	QueryFusen	:	TMQuery;
	iColor		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	sCmnt		:	String;
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	QueryFusen := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
	gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 取引先付箋情報をGET
			SQL.Add('select FusenKbn from MFusenInfo');
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL			SetFld('Ncode').AsFloat   := stWorkRec^.iNCode;// 検索対象の内部ｺｰﾄﾞ 設定
			SetFld('Ncode').AsString   := FormatFloat('0',stWorkRec^.iNCode);// 検索対象の内部ｺｰﾄﾞ 設定  <256> ADD

			Open;						// ｸｴﾘの開始

			iColor := GetFld('FusenKbn').AsInteger;
		end;
	finally
		QueryFusen.Free;
	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(  Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= ucTORIHIKI;							//	ﾏｽﾀ区分(取引先)
	MasDLGParam.m_iNCode 		:= stWorkRec^.iNCode;							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= iColor;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
        if B_Syousai.Caption = '詳細(&T)' then
        begin
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<199>
			memFsn.RecNo := JHojyoMA_DMemData.RecNo;
			memFsn.Edit;
			memFsnCode.AsString	:= stWorkRec^.strExCode;
			memFsnCmnt.AsString := sCmnt;
			memFsn.Post;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();
end;

//**************************************************************************
//	Proccess  :	加算体系用DB書込みｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.WriteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode; NodeTarget : TTreeNode): Boolean;
var
	QueryWrite		:	TMQuery;
	QueryTree		:	TMQuery;
	stWorkRecOya	:	^TreeViewRec;
	stWorkRecKo		:	^TreeViewRec;
	stWorkRecTarget	:	^TreeViewRec;
	iMaxEntNo		:	Integer;
	iWkEntNo1		:	Integer;
	iWkEntNo2		:	Integer;
begin
	stWorkRecOya := NodeOya.Data;
	stWorkRecKo := NodeKo.Data;
	if NodeTarget <> nil Then
		stWorkRecTarget := NodeTarget.Data
	else
		stWorkRecTarget := nil;

//	if stWorkRecOya^.prmSumKbn = 9 then						// ’資金繰加算体系’の場合は加算体系には更新しない
//		exit;

	QueryWrite := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryWrite);
	gfnJNTSELSetDbName(QueryWrite, dbCorp_Select);		//<D10>

	QueryTree := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryTree);
	gfnJNTSELSetDbName(QueryTree, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	SessionPractice(C_ST_PROCESS); //<MHIS> ADD

	try
		with QueryWrite do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			if stWorkRecTarget^.nDivision = 0 then
			begin
				// ターゲットノード
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
				SQL.Add('order by EntNo DESC');
				SetFld('pMKBN').AsInteger  := ucTORIHIKI;
//<256> MOD St
//				SetFld('stSum').AsFloat    := stWorkRecOya^.InCode;
//				SetFld('stBased').AsFloat  := stWorkRecTarget^.Incode;
				SetFld('stSum').AsString    := FormatFloat('0',stWorkRecOya^.InCode);
				SetFld('stBased').AsString  := FormatFloat('0',stWorkRecTarget^.Incode);
//<256> MOD Ed
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//				SetFld('stBased').AsString := stWorkRecTarget^.strExCode;

				Open;

				iWkEntNo1 := QueryWrite.GetFld('EntNo').AsInteger;

				// ターゲットノードの上のノード
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND EntNo<:iEnt');
				SQL.Add('order by EntNo DESC');
				SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//<256> DEL				SetFld('stSum').AsFloat := stWorkRecOya^.InCode;
				SetFld('stSum').AsString := FormatFloat('0',stWorkRecOya^.InCode);  //<256> ADD
				SetFld('iEnt').AsInteger := iWkEntNo1;

				Open;

				if EOF <> True then
					iWkEntNo2 := QueryWrite.GetFld('EntNo').AsInteger
				else
					iWkEntNo2 := 0;

				// 登録NOを求める
				iMaxEntNo := (iWkEntNo1 + iWkEntNo2) div 2;

				if iMaxEntNo = iWkEntNo2 then
				begin
					if AgainEntNoSet (stWorkRecTarget^.InCode) = False then				// 登録ＮＯ再編成処理
					begin
						result := False;
						abort;
						exit;
					end;

					// ターゲットノード
					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
					SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
					SQL.Add('order by EntNo DESC');
    				SetFld('pMKBN').AsInteger  := ucTORIHIKI;
//<256> MOD St
//					SetFld('stSum').AsFloat    := stWorkRecOya^.InCode;
//					SetFld('stBased').AsFloat  := stWorkRecTarget^.InCode;
					SetFld('stSum').AsString    := FormatFloat('0',stWorkRecOya^.InCode);
					SetFld('stBased').AsString  := FormatFloat('0',stWorkRecTarget^.InCode);
//<256> MOD Ed
//					SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//					SetFld('stBased').AsString := stWorkRecTarget^.strExCode;

					Open;

					iWkEntNo1 := QueryWrite.GetFld('EntNo').AsInteger;

					// ターゲットノードの上のノード
					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
					SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND EntNo<:iEnt');
					SQL.Add('order by EntNo DESC');
    				SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL					SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
					SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);  //<256> ADD
//					SetFld('stSum').AsString := stWorkRecOya^.strExCode;
					SetFld('iEnt').AsInteger := iWkEntNo1;

					Open;

					if EOF <> True then
						iWkEntNo2 := QueryWrite.GetFld('EntNo').AsInteger
					else
						iWkEntNo2 := 0;

					// 登録NOを求める
					iMaxEntNo := (iWkEntNo1 + iWkEntNo2) div 2;
				end;
			end
			else									// ターゲットが合計
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum');
				SQL.Add('order by EntNo DESC');
				SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> DEL				SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
				SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);  //<256> ADD
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
				Open;

				if EOF = False then
				begin
					iWkEntNo2 := GetFld('EntNo').AsInteger;
					// 登録NOを求める
					iMaxEntNo := iWkEntNo2 + 100;
				end
				else
				begin
					// 登録NOを求める
					iMaxEntNo := 100;
				end;
			end;

			// 取引先をDBにWriteする
			Close;
			SQL.Clear;							// ｸｴﾘの初期化
			// 挿入ｸｴﾘの作成
			SQL.Add('insert into HojyoTree');
			SQL.Add('(MasterKbn, PatternNo, SumNCode, EntNo, BasedNCode, AddKbn) ');
			SQL.Add('values (:iMasterKbn, 0, :stSumCode, :iEntNo, :stBasedCode, :iAddKbn) ');

			// マスタ区分
			SetFld('iMasterKbn').AsInteger := ucTORIHIKI;
			// 加算先外部ｺｰﾄﾞ
			SetFld('stSumCode').AsFloat := stWorkRecOya^.InCODE;
//			SetFld('stSumCode').AsString := stWorkRecOya^.strExCode;
//            showmessage('加算先コード'+IntToStr(stWorkRecOya^.prmCode));
			// 登録NO
			SetFld('iEntNo').AsInteger := iMaxEntNo;
//            showmessage('登録NO'+IntToStr(iMaxEntNo));
			// 加算元外部ｺｰﾄﾞ
			SetFld('stBasedCode').AsFloat := stWorkRecKo^.InCode;
//			SetFld('stBasedCode').AsString := stWorkRecKo^.strExCode;
//            showmessage('加算元コード'+IntToStr(stWorkRecKo^.prmCode));
			// 加算区分
			SetFld('iAddKbn').AsInteger := 0;

			// DB更新
			if (ExecSQL = False) then
			begin
				ErrorMessageDsp(QueryWrite);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				QueryWrite.Close;
//				QueryWrite.Free;
				result := False;
				Exit;
			end;

			MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

			gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
		end;
	finally
		QueryWrite.Free;
		QueryTree.Free;

		SessionPractice(C_ED_PROCESS); //<MHIS> ADD
	end;

	result := True;
end;

//**************************************************************************
//	Proccess  :	加算体系ﾚｺｰﾄﾞ削除ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.DeleteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode): Boolean;
var
	QueryWrite	:	TMQuery;
	stWorkRecOya:	^TreeViewRec;
	stWorkRecKo	:	^TreeViewRec;
begin
	stWorkRecOya := NodeOya.Data;
	stWorkRecKo := NodeKo.Data;

//	if stWorkRecOya^.prmSumKbn = 9 then						// ’資金繰加算体系’の場合は加算体系には更新しない
//		exit;

	QueryWrite := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryWrite);
	gfnJNTSELSetDbName(QueryWrite, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	SessionPractice(C_ST_PROCESS); //<MHIS> ADD

	try
		with QueryWrite do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
//<256> DEL			SQL.Add('select * from HojyoTree');
			SQL.Add('select EntNo from HojyoTree');  //<256> ADD
			SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
//          SQL.Add('order by EntNo DESC');
			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> MOD St
//			SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
//			SetFld('stBased').AsFloat := stWorkRecKo^.InCode;
			SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);
			SetFld('stBased').AsString := FormatFloat('0',stWorkRecKo^.InCode);
//<256> MOD Ed
//			SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//			SetFld('stBased').AsString := stWorkRecKo^.strExCode;
//			ShowMessage(IntToStr(stWorkRecOya^.prmCode)+'親');
//			ShowMessage(IntToStr(stWorkRecKo^.prmCode)+'子');

			Open;

			if EOF = False then
			begin
				// 加算体系の該当ﾚｺｰﾄﾞを削除する
//				ShowMessage('加算体系の該当ﾚｺｰﾄﾞあり');
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 挿入ｸｴﾘの作成
				SQL.Add('delete from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
    			SetFld('pMKBN').AsInteger := ucTORIHIKI;
//<256> MOD St
//				SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
//				SetFld('stBased').AsFloat := stWorkRecKo^.InCode;
				SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);
				SetFld('stBased').AsString := FormatFloat('0',stWorkRecKo^.InCode);
//<256> MOD Ed
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//				SetFld('stBased').AsString := stWorkRecKo^.strExCode;

				// DB更新
				if (ExecSQL = False) then
				begin
					ErrorMessageDsp(QueryWrite);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryWrite.Close;
//					QueryWrite.Free;
					result := False;
					Exit;
				end;

				MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

				gbHojyoTreeDelFlag	:= True;					// 削除ﾌﾗｸﾞ
				gbHojyoTree2Flag	:= True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
			end;
		end;
	finally
		QueryWrite.Free;

		SessionPractice(C_ED_PROCESS); //<MHIS> ADD
	end;

	result := True;
end;

//**************************************************************************
//	Proccess  :	削除ﾎﾞﾀﾝｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonDelClick(Sender: TObject);
var
	stCode			:   String;
	iIndex			:   Integer;
	NodeSelect  	:   TTreeNode;
	NodeOya			:   TTreeNode;
	stWorkRecSelect :   ^TreeViewRec;
	stWorkRecOya	:   ^TreeViewRec;
	iRet			:   Integer;
	stName			:   String;
	iSumKbn			:   Integer;
    Qry             :   TMQuery;
    nNCode          :   Extended;
    stMsg           :   String;

    strErr          :   String;             // <168>
    strMsg          :   String;             // <168>
    stCode2         :   String;             // <168>
    iCode,iCut      :   Integer;            // <168>
    stWorkRecSelect_Dummy :   TreeViewRec;       // <KSN> ADD
    stWorkRecOya_Dummy	:   TreeViewRec;         // <KSN> ADD
begin
//<KSN> ADD St
    NodeSelect := nil;
    NodeOya := nil;
    stWorkRecSelect := nil;
    stWorkRecOya := nil;
//<KSN> ADD Ed

	if	(m_fSystemClear) then
	begin
		m_fSystemClear	:= FALSE;

		if	(MJSMessageBoxEx (Self,'加算情報を消去します。'#13#10'再登録後はマスタ更新処理を行って下さい。',
								'警告', mjWarning, mjOkCancel, mjDefCancel, FALSE) = mrCancel) then
			Exit;

		if	(not fnClearAllSystems ()) then
			Exit;

		{TreeView 作成}
		fnRebuildTreeViewItems ();

		{TreeView はぐれ作成}
		if fnRebuildTreeViewItemsHagure () = False then
		begin
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			Exit;
		end;

		{Grid 初期表示}
		TBaseNode	:= VTreeView.Items[0];
		TBaseNodeSv	:= VTreeView.Items[0];

		iSumKbn		:= 0;										// 実在グリッド
		fnCreateGrid (TBaseNode, iSumKbn);
		if JHojyoMA_DMemData.Eof = False then
		begin
	        JHojyoMA_DMemData.DisableControls; //<249>
			JHojyoMA_DMemData.First;
	        JHojyoMA_DMemData.EnableControls; //<249>
			fnCreateCard (iSumKbn);
		end
		else
// <108>			fnClearCard  (iSumKbn,0);
			fnClearCard  (0);

// <109>		iSumKbn		:= 1;										// 合計グリッド
// <109>		fnCreateGrid (TBaseNode, iSumKbn);
// <108>		fnClearCard  (iSumKbn,0);
// <109>		fnClearCard  (0);

		Exit;
	end;

// <109> 財務に合わせるのが基本と思うので外部ｺｰﾄﾞのﾌｨｰﾙﾄﾞでも削除を可能とする
// <109>	if (m_AcControl = f0TGCode) or
// <109>	   (m_AcControl = f0NGCode) then
// <109>		exit;

//	if (m_AcControl <> Jituzai_DdxDBGrid) AND (m_AcControl <> Goukei_DdxDBGrid) then
//		exit;

	iIndex := Root_PMTab.Items.Selected;						// どのタブがActiveか取得

	if m_AcControl = VTreeView then
	begin
		NodeSelect := VTreeView.Selected;
		stWorkRecSelect := NodeSelect.Data;
		stCode := stWorkRecSelect.strExCode;
		stName := stWorkRecSelect.strName;
	end
	else
	begin
		if B_Syousai.Caption = '詳細(&T)' then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			begin
                stCode := JHojyoMA_DMemDataGCode.AsString;
                stName := JHojyoMA_DMemDataSimpleName.AsString;
			end
			else
			begin
                if JHojyoMA_DMemDataGCode.AsString <> '' then
                    stCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
                else
                    stCode := '';
                stName := JHojyoMA_DMemDataSimpleName.AsString;
			end;
		end
		else
		begin
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                stCode := f0TGCode.Text
            else
//<258> MOD St
//                stCode := Format ('%.16d', [Trunc (f0NGCode.Value)]);
            begin
                if f0NGCode.Text <> '' then
                    stCode := Format ('%.16d', [Trunc (f0NGCode.Value)])
                else
                    stCode := '';
            end;
//<258> MOD Ed
            stName := f0SimpleName.Text;
		end;
	end;
//<258> MOD St
	if stCode = '' then   //<255>のコメント解除
//	if (stCode = '') or (stCode = '0000000000000000') then //<255>属性が数字で空だと0が16桁補完された文字列となるので、Exitの判定に含めた。
//<258> MOD Ed
		exit;

//<KSN> ADD St
    if PPanelTree.Visible = False then
    begin
        if iIndex = PAGE_GOKEI then
            stWorkRecSelect_Dummy.nDivision := 1
        else
            stWorkRecSelect_Dummy.nDivision := 0;

        stWorkRecSelect_Dummy.strExCode := stCode;
        stWorkRecSelect_Dummy.strName := stName;
        stWorkRecSelect := @stWorkRecSelect_Dummy;

        stWorkRecOya_Dummy.nDivision := 0;
        stWorkRecOya_Dummy.strExCode := stCode;
        stWorkRecOya_Dummy.strName := stName;
        stWorkRecOya := @stWorkRecOya_Dummy;
    end;
//<KSN> ADD Ed

    Qry := TMQuery.Create (Self);
	try
        // Queryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        // 名寄せ情報に存在する場合は削除不可 <118>
        stMsg  := '';
        nNCode := fnGetNCODE(stCode, 22, MasterInfo_DMemDataCodeAttr.AsInteger);

        with Qry do
        begin
            Close;
            SQL.Clear;
            SQL.Add('select NknNCode from CRDNayoseInfo');
            SQL.Add('where (MasterKbn = :pMKbn) and (NknNCode = :pCode or NayoseOyaNCode = :pCode)');
            ParamByName('pMKbn').AsInteger := 22;
//<256> DEL            ParamByName('pCode').AsFloat   := nNCode;
            ParamByName('pCode').AsString   := FormatFloat('0',nNCode);  //<256> ADD
            Open;

            if not EOF then
                stMsg := '債権情報';

            Close;
            SQL.Clear;
            SQL.Add('select PayNCode from PAYNayoseInfo');
            SQL.Add('where (MasterKbn = :pMKbn) and (PayNCode = :pCode or NayoseOyaNCode = :pCode)');
            ParamByName('pMKbn').AsInteger := 22;
//<256> DEL            ParamByName('pCode').AsFloat   := nNCode;
            ParamByName('pCode').AsString   := FormatFloat('0',nNCode);  //<256> ADD
            Open;

            if not EOF then
            begin
                if stMsg <> '' then
                    stMsg := stMsg + '、';
                stMsg := stMsg + '債務情報';
            end;

            Close;

            if stMsg <> '' then
            begin
                MjsMessageBox(Self, stMsg + 'に名寄せ情報が登録されている為削除できません。', mjInformation, mjDefOk);
                Exit;
            end;
        end;

		Beep;
// <131>↓
//		iRet := MjsMessageBoxEX(Self,''''+stName+''''+'を削除します。よろしいですか？','削除',mjQuestion,mjYesNo,mjDefNo);
		iRet := MjsMessageBoxEX(Self, MSG_DELETE, '削除',mjQuestion,mjYesNo,mjDefNo);
// <131>↑
		if iRet <> mrYes then
        begin
			Exit;
        end;

		m_fDel := 1;										// 削除ﾌﾗｸﾞ初期化
//<KSN> MOD St
(*
    	NodeSelect := VTreeView.Selected;
		stWorkRecSelect := NodeSelect.Data;
		if stWorkRecSelect^.nDivision = 0 then
			NodeOya := NodeSelect.Parent
		else
			NodeOya := NodeSelect;

		if stWorkRecSelect^.strExCode <> stCode then
		begin
			NodeSelect := NodeOya.getFirstChild;
			while NodeSelect<> nil do
			begin
				stWorkRecSelect := NodeSelect.Data;
				if stWorkRecSelect^.strExCode = stCode then
				begin
					NodeOya := NodeSelect.Parent;
					break;
				end;

				NodeSelect := NodeSelect.GetNext;
			end;
		end;

        //↓<255>上記の検索の結果見つからないときは、TreeViewを再作成し再度上記のロジックを流してNodeSelectを取得する。
        if not Assigned(NodeSelect) then
        begin
            {TreeView 再作成}
            fnRebuildTreeViewItems ();
            {TreeView 再作成(はぐれ対応)}
            if fnRebuildTreeViewItemsHagure () = False then
            begin
                Exit;
            end;

            NodeSelect := VTreeView.Selected;
            stWorkRecSelect := NodeSelect.Data;
            if stWorkRecSelect^.nDivision = 0 then
                NodeOya := NodeSelect.Parent
            else
                NodeOya := NodeSelect;

            if stWorkRecSelect^.strExCode <> stCode then
            begin
                NodeSelect := NodeOya.getFirstChild;
                while NodeSelect<> nil do
                begin
                    stWorkRecSelect := NodeSelect.Data;
                    if stWorkRecSelect^.strExCode = stCode then
                    begin
                        NodeOya := NodeSelect.Parent;
                        break;
                    end;

                    NodeSelect := NodeSelect.GetNext;
                end;
            end;
        end;
        //↑<255>

		stWorkRecSelect := NodeSelect.Data;
		stWorkRecOya := NodeOya.Data;
*)
        if PPanelTree.Visible then
        begin
            NodeSelect := VTreeView.Selected;
            stWorkRecSelect := NodeSelect.Data;

            if stWorkRecSelect^.nDivision = 0 then
                NodeOya := NodeSelect.Parent
            else
                NodeOya := NodeSelect;

            if stWorkRecSelect^.strExCode <> stCode then
            begin
                NodeSelect := NodeOya.getFirstChild;
                while NodeSelect<> nil do
                begin
                    stWorkRecSelect := NodeSelect.Data;
                    if stWorkRecSelect^.strExCode = stCode then
                    begin
                        NodeOya := NodeSelect.Parent;
                        break;
                    end;

                    NodeSelect := NodeSelect.GetNext;
                end;
            end;

            stWorkRecSelect := NodeSelect.Data;
            stWorkRecOya := NodeOya.Data;
        end;
//<KSN> MOD Ed

// ↓↓↓<168>

        // 属性対応
// <2615> Del        stCode2 :=  stCode;
// <2615> Del        case MasterInfo_DMemDataCodeAttr.AsInteger of
// <2615> Del            0:  begin
// <2615> Del                    if ( stCode <> '' ) then
// <2615> Del                    begin
// <2615> Del                        iCode   :=  StrToInt64(Trim(stCode2));
// <2615> Del                        stCode2 :=  IntToStr(iCode);
// <2615> Del                    end;
// <2615> Del                end;
// <2615> Del            1:  begin
// <2615> Del                    if ( stCode <> '' ) then
// <2615> Del                    begin
// <2615> Del                        iCut    :=  16 - MasterInfo_DMemDataCodeDigit.AsInteger;
// <2615> Del                        System.Delete(stCode2, 1, iCut);
// <2615> Del                    end;
// <2615> Del                end;
// <2615> Del        end;
        stCode2 := fnMTokui_CodeEdit(stCode); // <2615> Add

        // 削除ﾁｪｯｸｽﾄｱﾄﾞ実行
        if ( not fnDelCheck(nNCode, strErr) ) then
        begin
            // 「ｺｰﾄﾞ 簡略名称 は、xxxのため削除できません。」 <179>
            strMsg := stCode2 + ' ' + stName + ' ' + strErr;
            MjsMessageBoxEx(Self, strMsg, '確認', mjInformation, mjOk, mjDefOk);
            Exit;
        end;
// ↑↑↑<168>

        // ﾂﾘｰ内に1件のみの時は削除
		if NodeSearch(stWorkRecSelect^, stWorkRecOya^) <= 1 then
		begin
            if JHojyoMA_DMemData.FieldByName('SyokuchiKbn').AsInteger <> 0 then
            begin
                with Qry do
                begin
                    Close;
                    SQL.Clear;
                    SQL.Add('Delete MFusenInfo');
                    SQL.Add('Where MasterKbn=:pMKBN AND NCode=:NCode');
                    ParamByName('pMKBN').asInteger := 22;
//<256> DEL                    ParamByName('NCODE').asFloat := stWorkRecSelect^.iNCode;
                    ParamByName('NCODE').asString := FormatFloat('0',stWorkRecSelect^.iNCode);  //<256> ADD
                    ExecSql;

                    Close;
                end;
            end;

			// 取引先削除
			if fnDataDelete(stWorkRecSelect^.strExCode, stWorkRecSelect^.nDivision) = False then
			begin
				m_fDel := 0;							   // 削除ﾌﾗｸﾞ初期化
				Exit;
			end;

//<Edge>↓
			if m_iEdgeFlag = 1 then
			begin
				//実在マスタの削除時のみメッセージ
				if (Root_PMTab.Items.Selected  = PAGE_JITUZAI) then
		        begin
		            MJSMessageBoxEx (Self, '取引先が削除されました。' +#13#10+
		            'Edge Tracker でマスタを見直してください。', '確認', mjInformation, mjOk, mjDefOk, FALSE);
		        end;
			end;
//<Edge>↑

		end
        // 1件以上存在する場合は加算体系のみ削除
		else
		begin
            if PPanelTree.Visible then  //<KSN> ADD
            begin                       //<KSN> ADD
                // 加算体系削除
                if DeleteHOJYOTREE(NodeOya, NodeSelect) = False then
                begin
                    m_fDel := 0;								// 削除ﾌﾗｸﾞ初期化
                    Exit;
                end;
//<KSN> ADD St
            end
            else
            begin
                MjsMessageBoxEx(Self, '加算体系が複数存在します。先に加算体系を削除してください。', '確認', mjInformation, mjOk, mjDefOk);
				m_fDel := 0;							   // 削除ﾌﾗｸﾞ初期化
                Exit;
            end;
//<KSN> ADD Ed
		end;

		if B_Syousai.Caption <> '詳細(&T)' then			    // 詳細の時のみ
		begin
//<108>			if iIndex = PAGE_GOKEI then					// 元のﾍﾟｰｼﾞ
//<108>				fnClearCard  (1,0)
				fnClearCard  (0)
//<108>			else
//<108>				fnClearCard  (0,0);
		end;

		// ﾉｰﾄﾞ自体を削除
//<240> DEL		NodeSelect.Delete;
        if PPanelTree.Visible then NodeSelect.Delete               //<KSN> ADD
        else                                                       //<KSN> ADD
            fnDeleteTreeViewItems (stCode);  //<240> ADD
		gbTreeClick := False;

		MemPost_Sw := 1;

		if B_Syousai.Caption <> '詳細(&T)' then
		begin
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
            else
                MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');

			MemPost_Sw := 0;
			m_fDel     := 0; 					            // 削除ﾌﾗｸﾞ初期化
			Exit;
		end
		else
		begin
			// ｸﾞﾘｯﾄﾞ再表示
			fnCreateAll ();

            // 合計ﾀﾌﾞ
			if iIndex = PAGE_GOKEI then
			begin
				if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then
				begin
					B_Delete.Enabled   := False;
					B_Fusen.Enabled    := False;
					B_FusenBar.Enabled := False;
				end
				else
				begin
//<Authority> MOD St
{
					B_Delete.Enabled   := m_cJNTArea.IsDelete;
					B_Fusen.Enabled    := m_cJNTArea.IsFusen;
					B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
					B_Delete.Enabled   := m_JNTAuthority.IsDelete;
					B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
					B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
				end;
			end
			else
            // 実在ﾀﾌﾞ
			begin
				if JHojyoMA_DMemData.RecordCount = 0 then
				begin
					B_Delete.Enabled   := False;
					B_Fusen.Enabled    := False;
					B_FusenBar.Enabled := False;
				end
				else
				begin
                    // 削除権限がない為使用不可
//<Authority> DEL                    if m_cJNTArea.IsDelete = False then
                    if m_JNTAuthority.IsDelete = False then  //<Authority> ADD
                    begin
						B_Delete.Enabled := False;
                    end
                    else
                    begin
                        if (JHojyoMA_DMemData.FieldByName('SyokuchiKbn').AsInteger <> 0) then
                        begin
                            B_Delete.Enabled   := fnRecordCount();
//<Authority> MOD St
{
                            B_Fusen.Enabled    := m_cJNTArea.IsFusen;
                            B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
                            B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
                            B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
                        end
                        else
                        begin
                            if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then
                            begin
                                B_Delete.Enabled   := False;
                                B_Fusen.Enabled    := False;
                                B_FusenBar.Enabled := False;
                            end
                            else
                            begin
                                B_Delete.Enabled
                                    := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));
//<Authority> MOD St
{
                                B_Fusen.Enabled    := m_cJNTArea.IsFusen;
                                B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
                                B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
                                B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
                            end;
                        end;
                    end;
				end;
			end;
		end;

		MemPost_Sw := 0;
		m_fDel     := 0;									// 削除ﾌﾗｸﾞ初期化
	finally
		m_fDel     := 0;	// 削除ﾌﾗｸﾞ初期化  <502_02> ADD
        Qry.Close;
        Qry.Free;
	end;

end;

//**********************************************************************
//*		Proccess	:	削除ﾁｪｯｸ <168>
//*		Date		:	2006/02/07
//*		Parameter	:	exNCode : ﾁｪｯｸ対象内部ｺｰﾄﾞ
//*                     strErr  : ｴﾗｰ時の理由格納域
//*		Return		:	削除可(TRUE)/削除不可(FALSE)
//**********************************************************************
function TJNTCRP004001f.fnDelCheck(exNCode: Extended; var strErr: String): Boolean;
var
    iRet    :   Integer;
begin

    Result := FALSE;

    try
//<D10>	SPMasTori.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10>	SPMasTori.SessionName   :=  dbCorp_Select.SessionName;
		gfnJNTSELSetDbName(SPMasTori, dbCorp_Select);		//<D10>

        // 【会計】MP_MAS_CHK_MTOKUI
        with SPMasTori do
        begin
			ParamByName('@p_NCode').AsFloat		:=  exNCode;
			ExecProc();                         // ｽﾄｱﾄﾞ実行

            // 結果
            iRet    :=  ParamByName('@RetCd')   .AsInteger;
            // ｴﾗｰ時の理由
            strErr  :=  ParamByName('@errMsg')  .AsString;
        end;
    except
        // 例外発生
        strErr  :=  '例外発生(MP_MAS_CHK_MTOKUI)';
        Exit;
    end;

    // 削除不可
    if ( iRet = 1 ) then Exit;

    try
//<D10>	SPSelTori.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10>	SPSelTori.SessionName   :=  dbCorp_Select.SessionName;
		gfnJNTSELSetDbName(SPSelTori, dbCorp_Select);		//<D10>

        // 【販売】MP_SEL_CHK_MTOKUI
        with SPSelTori do
        begin
			ParamByName('@NCode')   .AsFloat    :=  exNCode;
            ExecProc();                         // ｽﾄｱﾄﾞ実行

            // 結果
            iRet    :=  ParamByName('@RetCd')   .AsInteger;
            // ｴﾗｰ時の理由
            strErr  :=  ParamByName('@errMsg')  .AsString;
        end;
    except
        // 例外発生
        strErr  :=  '例外発生(MP_SEL_CHK_MTOKUI)';
        Exit;
	end;

    // 削除不可
    if ( iRet = 1 ) then Exit;

    try
//<D10> SPPayTori.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10> SPPayTori.SessionName   :=  dbCorp_Select.SessionName;
		gfnJNTSELSetDbName(SPPayTori, dbCorp_Select);		//<D10>

        // 【債務】MP_PAY_CHK_MTOKUI
        with SPPayTori do
        begin
			ParamByName('@NCode')   .AsFloat    :=  exNCode;
            ExecProc;                           // ｽﾄｱﾄﾞ実行

            // 結果
            iRet    :=  ParamByName('@RetCd')   .AsInteger;
            // ｴﾗｰ時の理由
            strErr  :=  ParamByName('@errMsg')  .AsString;
        end;
    except
        // 例外発生
        strErr  :=  '例外発生(MP_PAY_CHK_MTOKUI)';
        Exit;
    end;

    // 削除不可
    if ( iRet = 1 ) then Exit;

    try
//<D10> SPCrdTori.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10> SPCrdTori.SessionName   :=  dbCorp_Select.SessionName;
		gfnJNTSELSetDbName(SPCrdTori, dbCorp_Select);		//<D10>

        // 【債権】MP_CRD_CHK_MTOKUI
        with SPCrdTori do
        begin
			ParamByName('@NCode')   .AsFloat    :=  exNCode;
			ExecProc;                           // ｽﾄｱﾄﾞ実行

            // 結果
            iRet    :=  ParamByName('@RetCd')   .AsInteger;
            // ｴﾗｰ時の理由
            strErr  :=  ParamByName('@errMsg')  .AsString;
        end;
    except
        // 例外発生
        strErr  :=  '例外発生(MP_CRD_CHK_MTOKUI)';
        Exit;
    end;

    // 削除不可
    if ( iRet = 1 ) then Exit;

    try
//<D10> SPDepTori.DatabaseName  :=  dbCorp_Select.DatabaseName;
//<D10> SPDepTori.SessionName   :=  dbCorp_Select.SessionName;
		gfnJNTSELSetDbName(SPDepTori, dbCorp_Select);		//<D10>

        // 【資産】MP_DEP_CHK_MTOKUI
        with SPDepTori do
        begin
			ParamByName('@p_NCode').AsFloat		:=  exNCode;
            ExecProc;                           // ｽﾄｱﾄﾞ実行

            // 結果
            iRet    :=  ParamByName('@p_RetCd')   .AsInteger;	//<D10>p_追加
            // ｴﾗｰ時の理由
            strErr  :=  ParamByName('@p_errMsg')  .AsString;	//<D10>p_追加
        end;
    except
        // 例外発生
        strErr  :=  '例外発生(MP_DEP_CHK_MTOKUI)';
        Exit;
    end;

    // 削除不可
    if ( iRet = 1 ) then Exit;

    // 全ﾁｪｯｸで削除可能と判断
    Result := TRUE;

end;

//**************************************************************************
//	Proccess  :	DELETEﾎﾞﾀﾝマウスダウンｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2004/ 06 / 25
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonDelMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	m_fSystemClear	:= FALSE;

	if	(ssShift in Shift) then
		m_fSystemClear	:= TRUE;
end;

//**************************************************************************
//	Proccess  :	取引先加算体系クリア処理
//	Name	  :	N.Nabe
//	Date	  :	2004/ 06 / 25
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnClearAllSystems(): Boolean;
var
	dqMasterTree: TMQuery;
begin
{	if	(m_pExpModule.SetExcept (ueCop, m_pMyAppRecord^.m_iSystemCode,
										m_pMyAppRecord^.m_iOptionCode,
										m_pMyAppRecord^.m_iCorpCode,
										m_pMyAppRecord^.m_iCorpSubCode,
										m_pMyAppRecord^.m_iProgramCode, 0) <> 0) then
	begin
		Beep ();

		MJSMessageBoxEx (Self,'会社単独処理の設定を行うことができませんでした。',
														m_pMyAppRecord^.m_ProgramName, mjError, mjOk, mjDefOk, FALSE);

		Result	:= FALSE;
		Exit;
	end;
}
	MDataModule.BeginTran (dbCorp_Select);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始

	dqMasterTree	:= TMQuery.Create (Self);									// MQueryの構築

//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterTree);							// DBとMQueryの接続
	gfnJNTSELSetDbName(dqMasterTree, dbCorp_Select);		//<D10>

	// -----<MHIS> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<MHIS> Add-Ed-----
	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('DELETE FROM HojyoTree WHERE MasterKbn = :pMKBN');
		SetFld('pMKBN').AsInteger	    := ucTORIHIKI;

		if (ExecSQL = False) then
		begin
			ErrorMessageDsp(dqMasterTree);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
//<MHIS>	dqMasterTree.Close;
//<MHIS>	dqMasterTree.Free;
			result := False;
			Exit;
		end;

		Close ();
		SQL.Clear ();
		SQL.Add   ('DELETE FROM HojyoTree2 WHERE MasterKbn = :pMKBN');
		SetFld('pMKBN').AsInteger	    := ucTORIHIKI;

		if (ExecSQL = False) then
		begin
			ErrorMessageDsp(dqMasterTree);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
//<MHIS>	dqMasterTree.Close;
//<MHIS>	dqMasterTree.Free;
			result := False;
			Exit;
		end;

		gbHojyoTreeDelFlag	:= True;	// 削除ﾌﾗｸﾞ
		gbHojyoTree2Flag	:= True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
	end;

	MDataModule.Commit (dbCorp_Select);													// ｺﾐｯﾄ(反映)

	// -----<MHIS> Add-St-----
	finally
		dqMasterTree.Close (); // finallyに入れた。そのため、↑の論理でClose、Freeはコメントにした。
		dqMasterTree.Free  (); // finallyに入れた。そのため、↑の論理でClose、Freeはコメントにした。

		SessionPractice(C_ED_PROCESS);
	end;
	// -----<MHIS> Add-Ed-----

{	m_pExpModule.ResetExcept (ueCop, m_pMyAppRecord^.m_iSystemCode,
									 m_pMyAppRecord^.m_iOptionCode,
									 m_pMyAppRecord^.m_iCorpCode,
									 m_pMyAppRecord^.m_iCorpSubCode,
									 m_pMyAppRecord^.m_iProgramCode, 0);
}
	Result	:= TRUE;
end;

//**************************************************************************
//	Proccess  :	SORTﾎﾞﾀﾝｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2003/ 05 / 14
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonSortClick(Sender: TObject);
var
	iRet		:	Integer;
	iEntNo		:	Integer;
	QueryRead	:	TMQuery;
	QueryWrite	:	TMQuery;
	sSvSumCode	:	Integer;
	iCount		:	Integer;
	stName		:	String;
begin
	QueryRead		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
	gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

	QueryWrite		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryWrite);
	gfnJNTSELSetDbName(QueryWrite, dbCorp_Select);		//<D10>

	iEntNo := 100;

	SessionPractice(C_ST_PROCESS); //<MHIS>

	try
		try
			// マスタ基本情報読み込み
			QueryRead.Close;
			QueryRead.SQL.Clear;		 							// qmQuery 初期化
			QueryRead.SQL.Add('Select UseKbn, JHojyoName from MasterInfo');
			QueryRead.SQL.Add('Where MasterKbn = :pMKBN');
            QueryRead.ParamByName('pMKBN').AsInteger := ucTORIHIKI;
			QueryRead.Open;
			if QueryRead.Eof = False then
			begin
				stName := QueryRead.GetFld('JHojyoName').AsString;
				stName := Trim(stName);
			end;

			if stName = '' then
				stName := '取引先';

			iRet := MjsMessageBoxEX(Self,stName + 'コード昇順で並び替えを行います。よろしいですか？','並び替え',mjQuestion,mjYesNo,mjDefYes);
			if iRet = mrYes then
			begin
                TagClear_Saiyo();  //<502_001> ADD
				MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

				ProgressBar1.Visible := True;
{
				ProgressBar1.Height := Trunc(9 * m_Zoom / 100);
				ProgressBar1.Left := Trunc(8 * m_Zoom / 100);
				ProgressBar1.Width := Trunc(273 * m_Zoom / 100);
				ProgressBar1.Top := SStatusBar.Top + 6;
}

				// 加算体系更新下準備
				QueryWrite.Close;
				QueryWrite.SQL.Clear;		 							// QueryFree 初期化
				QueryWrite.SQL.Add('Update HojyoTree Set EntNo = EntNo * -1 Where MasterKbn = :pMKBN and EntNo > 0');
				QueryWrite.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
				if (QueryWrite.ExecSQL = False) then
				begin
					ErrorMessageDsp(QueryWrite);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					Exit;
				end;

				// 加算体系の読み込み
				QueryRead.Close;
				QueryRead.SQL.Clear;		 							// QueryFree 初期化
//<256> DEL				QueryRead.SQL.Add('Select Count(*) as Kensu from HojyoTree Where MasterKbn = :pMKBN');
				QueryRead.SQL.Add('Select Count(EntNo) as Kensu from HojyoTree Where MasterKbn = :pMKBN');  //<256> ADD
				QueryRead.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
				if not QueryRead.Open then
					showmessage(QueryRead.Errors.Text);

				if QueryRead.Eof = False then
				begin
					ProgressBar1.Max := QueryRead.GetFld('Kensu').AsInteger;
					ProgressBar1.Position := 0;
					iCount := 0;
				end
				else
				begin
					Exit;
				end;

				// 加算体系の読み込み
				QueryRead.Close;
				QueryRead.SQL.Clear;		 							// QueryFree 初期化
				QueryRead.SQL.Add('Select HT.SumNCode, HT.BasedNCode, HT.EntNo from HojyoTree HT  Left Outer Join MTOKUI MT');
				QueryRead.SQL.Add('on HT.BasedNCode = MT.NCode');
				QueryRead.SQL.Add('Where HT.MasterKbn = :pMKBN');
				QueryRead.SQL.Add('order by HT.SumNCode, MT.GCode');
				QueryRead.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
				if not QueryRead.Open then
					showmessage(QueryRead.Errors.Text);
				QueryRead.FetchAll;

				sSvSumCode := -1;
				while QueryRead.Eof = False do
				begin
					if sSvSumCode <> QueryRead.GetFld('SumNCode').AsInteger then
						iEntNo := 100;

					QueryWrite.Close;
					QueryWrite.SQL.Clear;		 							// QueryFree 初期化
					QueryWrite.SQL.Add('Update HojyoTree Set EntNo =:NewENT Where MasterKbn = :pMKBN and SumNCode =:SUM and BasedNCode =:BASED and EntNo =:ENT');
    				QueryWrite.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
					QueryWrite.SetFld('NewENT').AsInteger := iEntNo;
					QueryWrite.SetFld('SUM').AsString := QueryRead.GetFld('SumNCode').AsString;
					QueryWrite.SetFld('BASED').AsString := QueryRead.GetFld('BasedNCode').AsString;
					QueryWrite.SetFld('ENT').AsInteger := QueryRead.GetFld('EntNo').AsInteger;
					if (QueryWrite.ExecSQL = False) then
					begin
						ErrorMessageDsp(QueryWrite);
						MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						Exit;
					end;

					sSvSumCode := QueryRead.GetFld('SumNCode').AsInteger;
					iEntNo := iEntNo + 100;

					QueryRead.Next;

					Inc(iCount);
					ProgressBar1.Position := iCount;
				end;

				ProgressBar1.Visible := False;

				{TreeView 再作成}
				fnRebuildTreeViewItems ();
				{TreeView 再作成(はぐれ対応)}
				if fnRebuildTreeViewItemsHagure () = False then
				begin
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					Exit;
				end;

				if B_Syousai.Caption <> '詳細(&T)' then
				begin
{
                    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                        MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
                    else
                        MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');
}
//↓<232>
					TBaseNode	:= VTreeView.Items[0];
					TBaseNodeSv	:= VTreeView.Items[0];
//↑<232>
					B_Syousai.Caption := '詳細(&T)';
					BSpeedButtonISClick(B_Syousai);
				    fnClearCard(0);

				end
				else
				begin
//					Root_PMTabChange(Root_PMTab);
{
				    iSumKbn := Root_PMTab.Items.Selected;
					if iSumKbn = 0 then
					begin
						fnCreateGrid(VTreeView.TopItem, 1);
						fnCreateGrid(VTreeView.TopItem, 0);
					end
					else
					begin
						fnCreateGrid(VTreeView.TopItem, 0);
						fnCreateGrid(VTreeView.TopItem, 1);
					end;
}

					TBaseNode	:= VTreeView.Items[0];
					TBaseNodeSv	:= VTreeView.Items[0];
					B_Syousai.Caption := '一覧(&T)';
					BSpeedButtonISClick(B_Syousai);


				end;

				MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end;
		finally
		end;
	finally
		QueryRead.Free;										// QueryFree 開放
		QueryWrite.Free;									// QueryFree 開放

		SessionPractice(C_ED_PROCESS); //<MHIS>
	end;

end;

//**************************************************************************
//	Proccess  :	検索ﾎﾞﾀﾝｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ  <105>
//	Name	  :	N.Nabe
//	Date	  :	2004/ 06 / 22
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonFindClick(Sender: TObject);
var
	lvExpSend   :   rcJNTExpSend;   // 親BPL送信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    lvExpRecv   :   rcJNTExpRecv;   // 親BPL受信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    iExpRtn     :   Integer;        // 戻り値
    sCode       :   String;         // 外部ｺｰﾄﾞ(属性対応用)
begin

	// ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;                     // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;                     // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;

    lvExpSend.MasterKbn     :=  22;
    lvExpSend.ModulKbn      :=  0;
    lvExpSend.PatternNo     :=  1;
    lvExpSend.TBarNM        :=  Jituzai_LLabel_GCode.Caption + '検索ｴｸｽﾌﾟﾛｰﾗ';
    lvExpSend.TableName     :=  'MTOKUI';
    lvExpSend.TrRootCaption :=  Jituzai_LLabel_GCode.Caption;
    lvExpSend.WhereStr      :=  ' MTOKUI.RDelKBN = 0 and MTOKUI.SumKBN = ' + intToStr(Root_PMTab.Items.Selected)
                                + ' and MTOKUI.TemplateKbn = 0';       // <112>
    lvExpSend.SortStr       :=  'Order By MTOKUI.GCode';


    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
        Exit;

    TagClear_Saiyo();  //<502_001> ADD

//<198>
	if LSinsei.Visible then
	begin
//		Jituzai_BBitBtn_CancelClick(Sender);
	    fnClearCard(0);
	    m_EdtSw := False;
	    ClearOtherRec(m_recOther);
	end;

    // 中身あり
    if ( Length(Trim(lvExpRecv.GCode)) > 0 ) then
    begin
        // 数値属性(前ｾﾞﾛ有)
        if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
            sCode   := Format ('%.16d', [StrToInt64 (Trim (lvExpRecv.GCode))])
        // ﾌﾘｰ属性
        else
            sCode   := ComArea.SetDspCodeAttr(lvExpRecv.GCode, MasterInfo_DMemDataCodeDigit.AsInteger, 2);

		m_SearchInfo.sKojCD     := sCode;
		m_SearchInfo.iItem      := 0;
		m_SearchInfo.bFstFlg    := FALSE;
		VTreeView.SetFocus;
		fnSearch();

    end;
	uvCopyMtokui := False;	//<2257>コピー後に検索ボタンを押された時にfalseにできないため
end;

//**********************************************************************
//*		Proccess	:	検索
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/04
//*		Parameter	:   Nothing
//*		Return		:	Nothing
//**********************************************************************
procedure  TJNTCRP004001f.fnSearch();
begin
	if fnDownSearch() = True then
	begin
		if m_SearchInfo.bFstFlg = False then
			m_SearchInfo.bFstFlg := True;
		exit;
	end;

	while True do
	begin
		// 1件も一致しなかった時
		if m_SearchInfo.bFstFlg = False then
			break;

		// 最後まで検索した時
		if m_SearchInfo.bFstFlg = True then
		begin
//			ComArea.m_MsgStd.GetMsg(MjsMsgRec, 30,31);
//	   		MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype ,
//										MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
			showmessage('最後まで検索しました。');
			m_SearchInfo.sKojCD := '';
			break;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	検索処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/04
//*		Parameter	:	Nothing
//*		Return		:	一致(True)/不一致(False)
//**********************************************************************
function TJNTCRP004001f.fnDownSearch():Boolean;
var
	stWorkRec	: ^TreeViewRec;
	i			: Integer;
begin
	Result := False;
	for i:=m_SearchInfo.iItem to VTreeView.Items.Count-1 do
	begin
		stWorkRec := VTreeView.Items[i].Data;
		if stWorkRec^.strExCode = m_SearchInfo.sKojCD then
		begin
			VTreeView.Items[i].Selected := True;
			m_SearchInfo.iItem := i+1;
			Result := True;
			break;
		end;
	end;
end;

//**************************************************************************
//	Proccess	:	削除前仕訳・実績有無チェック
//	Name		:	N.Nabe
//	Date		:	2000.11.16
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnDeleteCheck(strGCode: String): Boolean;
var
	QueryFree	: TMQuery;
	QueryMain	: TMQuery;
	iFlg		: Integer;

begin
	QueryFree		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFree);
	gfnJNTSELSetDbName(QueryFree, dbCorp_Select);		//<D10>

	QueryMain		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryMain);
	gfnJNTSELSetDbName(QueryMain, dbCorp_Select);		//<D10>

	iFlg := 0;													// 削除不可ﾌﾗｸﾞ初期化

	try
		// 会社基本情報読み込み
		QueryMain.Close;
		QueryMain.SQL.Clear;		 							// QueryFree 初期化
//<256> DEL		QueryMain.SQL.Add('Select * from DTMAIN_MAS');
		QueryMain.SQL.Add('Select strMonth from DTMAIN_MAS');  //<256> ADD
		QueryMain.Open;

		// 取引先実績有無のチェック
		QueryFree.Close;
		QueryFree.SQL.Clear;		 							// QueryFree 初期化
//<256> DEL		QueryFree.SQL.Add('Select * from SumSM');
		QueryFree.SQL.Add('Select DebitSum,CreditSum from SumSM');  //<256> ADD
		QueryFree.SQL.Add('Where NMonth>=:iNMonth and MasterKbn=:pMKBN and BmnNCode=:stKouji');
		QueryFree.SetFld('pMKBN').AsInteger := ucTORIHIKI;
		QueryFree.SetFld('iNMonth').AsInteger	:= QueryMain.GetFld('strMonth').AsInteger;
		QueryFree.SetFld('stKouji').AsString	:= strGCode;
		QueryFree.Open;

		if QueryFree.EOF = False then
		begin
			while QueryFree.EOF = False do
			begin
				if (QueryFree.GetFld('DebitSum').AsInteger <> 0) or
				   (QueryFree.GetFld('CreditSum').AsInteger <> 0)then
				begin
					iFlg := 1;
				end;

				if iFlg = 1 then
				begin
					result := False;
					exit;
				end;

				QueryFree.Next;
			end;

			// 仕訳有無のチェック(借方)
			QueryFree.Close;
			QueryFree.SQL.Clear;		 							// QueryFree 初期化
//<256> DEL			QueryFree.SQL.Add('Select * from SwkDetail');
			QueryFree.SQL.Add('Select NMonth from SwkDetail');  //<256> ADD
			QueryFree.SQL.Add('Where NMonth>=:iNMonth and DKojCode=:stKarikouji');
			QueryFree.SetFld('iNMonth').AsInteger	:= QueryMain.GetFld('strMonth').AsInteger;
			QueryFree.SetFld('stKariKouji').AsString	:= strGCode;
			QueryFree.Open;

			if QueryFree.EOF = False then
			begin
				result := False;
				exit;
			end;

			// 仕訳有無のチェック(貸方)
			QueryFree.Close;
			QueryFree.SQL.Clear;		 							// QueryFree 初期化
//<256> DEL			QueryFree.SQL.Add('Select * from SwkDetail');
			QueryFree.SQL.Add('Select NMonth from SwkDetail');  //<256> ADD
			QueryFree.SQL.Add('Where NMonth>=:iNMonth and CKojCode=:stKasikouji');
			QueryFree.SetFld('iNMonth').AsInteger	:= QueryMain.GetFld('strMonth').AsInteger;
			QueryFree.SetFld('stKasiKouji').AsString	:= strGCode;
			QueryFree.Open;

			if QueryFree.EOF = False then
			begin
				result := False;
				exit;
			end;

			result := True;
			exit;

		end
		else
		begin
			result := True;
			exit;
		end;

	finally
		QueryMain.Free;										// QueryFree 開放
		QueryFree.Free;										// QueryFree 開放
	end;
end;

//**********************************************************************
//*		Proccess	:	付箋の初期化
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenInitialize();
begin
	giFusenSelectColorJ	:=	0;
	giFusenSelectColorG	:=	0;

{	Jituzai_ImageLowered_FusenRed.Visible	:=	False;
	Jituzai_ImageLowered_FusenGreen.Visible	:=	False;
	Jituzai_ImageLowered_FusenBlue.Visible	:=	False;
	Jituzai_ImageLowered_FusenOrange.Visible:=	False;
	Jituzai_ImageRaised_FusenRed.Visible 	:=	True;
	Jituzai_ImageRaised_FusenGreen.Visible	:=	True;
	Jituzai_ImageRaised_FusenBlue.Visible	:=	True;
	Jituzai_ImageRaised_FusenOrange.Visible	:=	True;

	Jituzai_ETEdit_Fusen.Enabled	:=	False;
	Jituzai_ETEdit_Fusen.Color		:=	Self.Color;
	Jituzai_ETEdit_Fusen.Text		:=	'';

	Goukei_ImageLowered_FusenRed.Visible	:=	False;
	Goukei_ImageLowered_FusenGreen.Visible	:=	False;
	Goukei_ImageLowered_FusenBlue.Visible	:=	False;
	Goukei_ImageLowered_FusenOrange.Visible	:=	False;
	Goukei_ImageRaised_FusenRed.Visible 	:=	True;
	Goukei_ImageRaised_FusenGreen.Visible	:=	True;
	Goukei_ImageRaised_FusenBlue.Visible	:=	True;
	Goukei_ImageRaised_FusenOrange.Visible	:=	True;

	Goukei_ETEdit_Fusen.Enabled		:=	False;
	Goukei_ETEdit_Fusen.Color		:=	Self.Color;
	Goukei_ETEdit_Fusen.Text		:=	'';
}
end;

//**********************************************************************
//*		Proccess	:	赤の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenImageRedClick(Sender: TObject);
begin
	SelectFusenColor(Red);
end;

//**********************************************************************
//*		Proccess	:	緑の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenImageGreenClick(Sender: TObject);
begin
	SelectFusenColor(Green);
end;

//**********************************************************************
//*		Proccess	:	青の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenImageBlueClick(Sender: TObject);
begin
	SelectFusenColor(Blue);
end;

//**********************************************************************
//*		Proccess	:	橙の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenImageOrangeClick(Sender: TObject);
begin
	SelectFusenColor(Orange);
end;

//**********************************************************************
//*		Proccess	:	付箋の表示処理
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	SelectFusen		:	選ばれた付箋
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.SelectFusenColor(SelectFusen: Integer);
begin

    case (giFusenSelectColorJ) of
        Red:
        begin
            Jituzai_ImageLowered_FusenRed.Visible	:= False;
            Jituzai_ImageRaised_FusenRed .Visible	:= True;
        end;
        Green:
        begin
            Jituzai_ImageLowered_FusenGreen.Visible	:= False;
            Jituzai_ImageRaised_FusenGreen .Visible	:= True;
        end;
        Blue:
        begin
            Jituzai_ImageLowered_FusenBlue.Visible	:= False;
            Jituzai_ImageRaised_FusenBlue .Visible	:= True;
        end;
        Orange:
        begin
            Jituzai_ImageLowered_FusenOrange.Visible:= False;
            Jituzai_ImageRaised_FusenOrange .Visible:= True;
        end;
    end;

    if	(SelectFusen = giFusenSelectColorJ) then
        giFusenSelectColorJ	:= 0
    else
    begin
        case (SelectFusen) of
            Red:
            begin
                Jituzai_ImageRaised_FusenRed .Visible	:= False;
                Jituzai_ImageLowered_FusenRed.Visible	:= True;
            end;
            Green:
            begin
                Jituzai_ImageRaised_FusenGreen .Visible	:= False;
                Jituzai_ImageLowered_FusenGreen.Visible	:= True;
            end;
            Blue:
            begin
                Jituzai_ImageRaised_FusenBlue .Visible	:= False;
                Jituzai_ImageLowered_FusenBlue.Visible	:= True;
            end;
            Orange:
            begin
                Jituzai_ImageRaised_FusenOrange .Visible	:= False;
                Jituzai_ImageLowered_FusenOrange.Visible	:= True;
            end;
        end;

        giFusenSelectColorJ	:= SelectFusen;
    end;

{		if	(giFusenSelectColorJ = 0) then
    begin
        Jituzai_ETEdit_Fusen.Enabled	:= False;
        Jituzai_ETEdit_Fusen.Color		:= Self.Color;
    end
    else
    begin
        Jituzai_ETEdit_Fusen.Enabled	:= True;
        Jituzai_ETEdit_Fusen.Color		:= clWindow;
    end;}

end;

//**********************************************************************
//*		Proccess	:	印刷
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.BSpeedButtonPrnClick(Sender: TObject);
var
    lvRet       :   Integer;
    JNTPDlg     :   TFrmJNTPDialog;
    SaveEvent : TNotifyEvent;  //<502_001> ADD
begin
    SaveEvent := nil;  //<502_001> ADD
    // 販売ﾎﾟｲﾝﾀ設定
    m_cJNTArea.setSelAppRecord;

    // 範囲ﾀﾞｲｱﾛｸﾞを表示する<PRN>
    JNTPDlg := TFrmJNTPDialog.Create(Self, @uvHani);
    lvRet   := JNTPDlg.ShowModal;
    JNTPDlg.Free();

//<502_001> ADD St
    try
        if (m_AcControl.Tag <> S_NOCHECK) then
        begin
            if (m_AcControl is TMNumEdit) then
            begin
                SaveEvent := (m_AcControl as TMNumEdit).OnExit;
                (m_AcControl as TMNumEdit).OnExit := nil;
            end
            else if (m_AcControl is TMComboBox) then
            begin
                SaveEvent := (m_AcControl as TMComboBox).OnExit;
                (m_AcControl as TMComboBox).OnExit := nil;
            end;
        end;
//<502_001> ADD Ed

        //結果を判断する
        case lvRet of
         0: //ｷｬﾝｾﾙ
            begin
                Exit;
            end;
         1:	//通常
            begin
                // 実在取引先登録ﾘｽﾄ(簡略型・詳細型)
    //<149>            if ( uvHani.pvrPattern = 0 )  then
                if ( uvHani.pvrPattern <= 1 )  then         //<149>
                begin
                    fnPrnSETShosaiJ();
                    PrtParam.TargetMD   :=  MemPtnJitsuzai;
                end
                // 実在取引先登録ﾘｽﾄ(分類、ｾｸﾞﾒﾝﾄ型)
                else if (uvHani.pvrPattern = 2 ) then
                begin
                    fnPrintCheckListSegBun();
                    PrtParam.TargetMD	:= MemPtnSegBun;
                end
                // 合計取引先登録ﾘｽﾄ<161>
                else if ( uvHani.pvrPattern = 3 ) then
                begin
                    fnPrintCheckListTtlStandard();
                    PrtParam.TargetMD	:= MemPtnGoukei;
                end
                // 取引先加算登録ﾘｽﾄ<161>
                else if ( uvHani.pvrPattern = 4 ) then
                begin
                    fnPrintCheckListSystem();
                    PrtParam.TargetMD	    :=  MemPtnKasan;
                end;

                // <PRN>
                with PrtParam do
                begin
                    Para		    :=  uvHani;
                    TargetQry	    :=  DmqPrint;
                    CorpSys		    :=  uvSelSys;
                    JNTArea         :=  m_cJNTArea;
                    // *** 汎用変数 *** //
                    TargetParam	    :=  nil;
                    TargetStr	    :=  '';
                    TargetInt	    :=  0;
                    // *** 汎用変数 *** //
                end;

                //印刷する<PRN>
                PrintAppEntry(nil,nil,1,PrtParam,ArrHdl);
            end;
        else Exit;		//ｴﾗｰ
        end;

        // 財務ﾎﾟｲﾝﾀ設定
        m_cJNTArea.setMasAppRecord;
//<502_001> ADD St
    finally
        if Assigned(SaveEvent) then
        begin
            if (m_AcControl is TMNumEdit) then (m_AcControl as TMNumEdit).OnExit := SaveEvent
            else if (m_AcControl is TMComboBox) then (m_AcControl as TMComboBox).OnExit := SaveEvent;
        end;
    end;
//<502_001> ADD Ed
end;
//<256> DEL St
(*
// -----------------------------------------------------------------------------
//  印刷処理【実在取引先登録リスト[簡略型・詳細型]】    <PRN>
// -----------------------------------------------------------------------------
procedure TJNTCRP004001F.fnPrnSETShosaiJ();
var
	DmqMTOKUI       :   TMQuery;
    DmqMTOKUI_SEL   :   TMQuery;
    DmqFusen        :   TMQuery;
    i               :   Integer;
    sCode           :   String;
begin

    // MQueryの構築
	DmqMTOKUI       :=  TMQuery.Create (Self);
    DmqMTOKUI_SEL   :=  TMQuery.Create (Self);
    DmqFusen        :=  TMQuery.Create (Self);
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqMTOKUI);
    MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqMTOKUI_SEL);
    MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqFusen);

    if ( MemPtnJitsuzai.Active ) then MemPtnJitsuzai.Close();
    MemPtnJitsuzai.Open();

	with DmqMTOKUI do
	begin
        // -------------------------------------
        //  取引先マスタ MTOKUI
        // -------------------------------------
		Close ();
		SQL.Clear();
		SQL.Add('SELECT GCode,          HojyoKbn1,      HojyoKbn2,      '
            +   '       SisanHojyoKbn1, SisanHojyoKbn2, SisanHojyoKbn3, '		//リース取引先区分追加
            +   '       Renso,          Nmk,            Nm,             '
            +   '       PostNo1,        PostNo2,        Ads1,           '
            +   '       Ads2,           DHyoNm1,        DHyoNm2,        '
            +   '       Tel1,           Tel2,           Fax1,           '
            +   '       ShihonKin,      SyainSu,        Nensyo,         '
            +   '       HPAddress,      TStartDate,     TEndDate,       '
            +   '       RCloseDay1,     RCloseDay2,     RCloseDay3,     '
            +   '       RcvDay1,        RcvDay2,        RcvDay3,        '
            +   '       RcvMonth1,      RcvMonth2,      RcvMonth3,      '
            +   '       RHolidayKbn1,   RHolidayKbn2,   RHolidayKbn3,   '
            +   '       PCloseDay1,     PCloseDay2,     PCloseDay3,     '
            +   '       PayDay1,        PayDay2,        PayDay3,        '
            +   '       PayMonth1,      PayMonth2,      PayMonth3,      '
            +   '       PHolidayKbn1,   PHolidayKbn2,   PHolidayKbn3,   '
            +   '       UpdDateTM,      NCode,          REndKaisu,      '
            +   '       PEndKaisu                                       '
            +   'FROM MTOKUI                                            '
// <112>           +   'WHERE  (SumKbn = 0) AND (RDelKbn = 0)                       ');
// <162>           +   'WHERE  (SumKbn = 0) AND (RDelKbn = 0) AND (TemplateKbn = 0) ');
            +   'WHERE  (SumKbn = 0) AND (RDelKbn = 0)                  '); // <162>

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
{051201 hirota >>
            if ( uvHani.pvrStCode[0] <> '' ) and
               ( uvHani.pvrEdCode[0] =  '' ) then
            begin
                SQL.Add('  AND  (GCode >= :ExCode)   ');
                if ( m_nCurrentCodeAttr <= 1 ) then
    			    ParamByName('ExCode').AsString :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrStCode[0]))])
                else
                    ParamByName('ExCode').AsString :=  uvHani.pvrStCode[0];
            end
            else if ( uvHani.pvrStCode[0] =  '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (GCode <= :ExCode)   ');
                if ( m_nCurrentCodeAttr <= 1 ) then
        			ParamByName('ExCode').AsString :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrEdCode[0]))])
                else
                    ParamByName('ExCode').AsString :=  uvHani.pvrEdCode[0];
            end
            else if ( uvHani.pvrStCode[0] <> '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (GCode >= :ExStCode)     ');
			    SQL.Add('  AND  (GCode <= :ExEdCode)     ');
                if ( m_nCurrentCodeAttr <= 1 ) then
                begin
        			ParamByName('ExStCode').AsString   :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrStCode[0]))]);
        			ParamByName('ExEdCode').AsString   :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrEdCode[0]))]);
                end
                else
                begin
                    ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
        			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
                end;
            end;
051201 hirota <<}
			//051201 hirota >>
            SQL.Add('  AND  (GCode >= :ExStCode)     ');
		    SQL.Add('  AND  (GCode <= :ExEdCode)     ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
			//051201 hirota <<
        end;

        // ﾃﾝﾌﾟﾚｰﾄを出力する<162>
        if ( uvHani.pvrTemplate = TRUE ) then
                SQL.Add('   AND (TemplateKbn in (0,1))  ')
        else    SQL.Add('   AND (TemplateKbn in (0))    ');

        // ↓↓↓<162>
        // 得意先採用のみ
        if ( uvHani.UseTokui = TRUE  ) and
           ( uvHani.UseSiire = FALSE ) and
           ( uvHani.UseNashi = FALSE ) then
                SQL.Add('   AND (HojyoKbn1 = 1)          ')
        // 仕入先採用のみ
        else if ( uvHani.UseTokui = FALSE ) and
                ( uvHani.UseSiire = TRUE  ) and
                ( uvHani.UseNashi = FALSE ) then
                SQL.Add('   AND (HojyoKbn2 = 1)          ')
        // 得意先採用・仕入先採用なし
        else if ( uvHani.UseTokui = FALSE ) and
                ( uvHani.UseSiire = FALSE ) and
                ( uvHani.UseNashi = TRUE  ) then
                SQL.Add('   AND (HojyoKbn1 = 0) AND (HojyoKbn2 = 0) ')
        // 得意先採用・仕入先採用あり
        else if ( uvHani.UseTokui = TRUE  ) and
                ( uvHani.UseSiire = TRUE  ) and
                ( uvHani.UseNashi = FALSE ) then
                SQL.Add('   AND (HojyoKbn1 = 1) AND (HojyoKbn2 = 1) ')
        // 得意先採用又は得意先採用・仕入先採用なし
        else if ( uvHani.UseTokui = TRUE  ) and
                ( uvHani.UseSiire = FALSE ) and
                ( uvHani.UseNashi = TRUE  ) then
                SQL.Add('   AND (HojyoKbn1 = 1 OR (HojyoKbn1 = 0 AND HojyoKbn2 = 0))    ')
        // 仕入先採用又は得意先採用・仕入先採用なし
        else if ( uvHani.UseTokui = FALSE ) and
                ( uvHani.UseSiire = TRUE  ) and
                ( uvHani.UseNashi = TRUE  ) then
                SQL.Add('   AND (HojyoKbn2 = 1 OR (HojyoKbn1 = 0 AND HojyoKbn2 = 0))    ');
        // ↑↑↑<162>

        // 出力順序
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY GCode         ')
        else    SQL.Add('ORDER BY Renso, GCode  ');

        // ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqMTOKUI);
			DmqMTOKUI.Close();
			DmqMTOKUI.Free();
            DmqMTOKUI_SEL.Close();
            DmqMTOKUI_SEL.Free();
			DmqFusen.Close();
			DmqFusen.Free();
			Exit;
		end;

        while ( EOF <> TRUE ) do
		begin
			MemPtnJitsuzai.Append();

            // -------------------------------------
            //  付箋(MFusenInfo)
            // -------------------------------------
			DmqFusen.Close();
			DmqFusen.SQL.Clear();
			DmqFusen.SQL.Add('SELECT                        '
                        +    '   FusenKbn                   '   // 付箋区分
			            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
			            +    'WHERE (MasterKbn = 22)        '   // ﾏｽﾀ区分(1:勘定科目)
			            +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                        +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

			DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

			// ｴﾗｰの判定
			if ( DmqFusen.Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqFusen);
				DmqMTOKUI.Close();
			    DmqMTOKUI.Free();
                DmqMTOKUI_SEL.Close();
                DmqMTOKUI_SEL.Free();
    			DmqFusen.Close();
    			DmqFusen.Free();
				Exit;
			end;

			if ( DmqFusen.EOF <> TRUE ) then
			begin
                // 付箋区分
				case DmqFusen.GetFld('FusenKbn').AsInteger of
					0:	TGraphicField(MemPtnJitsuzai.FieldByName('Fusen')).Clear;
					1:	TGraphicField(MemPtnJitsuzai.FieldByName('Fusen')).Assign(Image_Fusen_Red.Picture.Bitmap);
					2:	TGraphicField(MemPtnJitsuzai.FieldByName('Fusen')).Assign(Image_Fusen_Green.Picture.Bitmap);
					3:	TGraphicField(MemPtnJitsuzai.FieldByName('Fusen')).Assign(Image_Fusen_Blue.Picture.Bitmap);
					4:	TGraphicField(MemPtnJitsuzai.FieldByName('Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
				end;
			end;

            // -------------------------------------
            //  取引先マスタ(販売) MTOKUI_SEL
            // -------------------------------------
            // i=1(得意先) i=2(仕入先)
            for i := 1 to 2 do
            begin
                DmqMTOKUI_SEL.Close();
    			DmqMTOKUI_SEL.SQL.Clear();
    			DmqMTOKUI_SEL.SQL.Add('SELECT                       '
                                 +    '     RZuiSSite               '   // 随時請求回収ｻｲﾄ
                                 +    '    ,RTSEINO                 '   // 特殊請求No
                                 +    '    ,RHolidayKbn             '   // 特殊・随時休日区分
    			                 +    'FROM MTOKUI_SEL              '	// 取引先ﾏｽﾀ(販売)
    			                 +    'WHERE (BaseNCode = :ExNCode) '   // 内部ｺｰﾄﾞ
                                 +    '  AND (RecKbn    = :RecKbn)  '); // ﾚｺｰﾄﾞ区分(1:得意先2:仕入先)

    			DmqMTOKUI_SEL.ParamByName('ExNCode').AsFloat    :=  GetFld('NCode').AsFloat;
                DmqMTOKUI_SEL.ParamByName('RecKbn') .AsInteger  :=  i;

                // ｴﾗｰの判定
                if ( DmqMTOKUI_SEL.Open = FALSE ) then
                begin
                    ErrorMessageDsp(DmqMTOKUI_SEL);
                    DmqMTOKUI.Close();
                    DmqMTOKUI.Free();
                    DmqMTOKUI_SEL.Close();
                    DmqMTOKUI_SEL.Free();
                    DmqFusen.Close();
                    DmqFusen.Free();
                    Exit;
                end;

                if ( DmqMTOKUI_SEL.EOF <> TRUE ) then
                begin
                    case i of
                        1:
                        begin
                            if ( GetFld('REndKaisu').AsInteger = 0 ) and
                               ( GetFld('HojyoKbn1').AsInteger = 1 ) then
                            begin
                                // 随時請求回収ｻｲﾄ(得意先)
                                if ( not DmqMTOKUI_SEL.FieldByName('RZuiSSite').IsNull ) then
                                    MemPtnJitsuzai.FieldByName('TRRZuiSSite').AsInteger     :=
                                        DmqMTOKUI_SEL.FieldByName('RZuiSSite').AsInteger;
                                // 特殊請求No(得意先)
                                if ( not DmqMTOKUI_SEL.FieldByName('RTSEINO').IsNull ) then
                                    MemPtnJitsuzai.FieldByName('TRRTSEINO').AsString        :=
                                        DmqMTOKUI_SEL.FieldByName('RTSEINO').AsString;
                                // 特殊・随時休日区分(得意先)
                                if ( not DmqMTOKUI_SEL.FieldByName('RHolidayKbn').IsNull ) then
                                begin
                                    MemPtnJitsuzai.FieldByName('TRRHolidayKbn').AsInteger   :=
                                        DmqMTOKUI_SEL.FieldByName('RHolidayKbn').AsInteger;

                                    // 特殊・随時休日区分名称(得意先)
                                    case DmqMTOKUI_SEL.FieldByName('RHolidayKbn').AsInteger of
                                        0:  MemPtnJitsuzai.FieldByName('TRRHolidayName').AsString   :=  '翌営業日';
                                        1:  MemPtnJitsuzai.FieldByName('TRRHolidayName').AsString   :=  '前営業日';
                                        2:  MemPtnJitsuzai.FieldByName('TRRHolidayName').AsString   :=  '当日';
                                    end;
                                end;
                            end;
                        end;
                        2:
                        begin
                            if ( GetFld('PEndKaisu').AsInteger = 0 ) and
                               ( GetFld('HojyoKbn2').AsInteger = 1 ) then
                            begin
                                // 随時請求回収ｻｲﾄ(仕入先)
                                if ( not DmqMTOKUI_SEL.FieldByName('RZuiSSite').IsNull ) then
                                    MemPtnJitsuzai.FieldByName('SRRZuiSSite').AsInteger     :=
                                        DmqMTOKUI_SEL.FieldByName('RZuiSSite').AsInteger;
                                // 特殊請求No(仕入先)
                                if ( not DmqMTOKUI_SEL.FieldByName('RTSEINO').IsNull ) then
                                    MemPtnJitsuzai.FieldByName('SRRTSEINO').AsString        :=
                                        DmqMTOKUI_SEL.FieldByName('RTSEINO').AsString;
                                // 特殊・随時休日区分(仕入先)
                                if ( not DmqMTOKUI_SEL.FieldByName('RHolidayKbn').IsNull ) then
                                begin
                                    MemPtnJitsuzai.FieldByName('SRRHolidayKbn').AsInteger   :=
                                        DmqMTOKUI_SEL.FieldByName('RHolidayKbn').AsInteger;

                                    // 特殊・随時休日区分名称(仕入先)
                                    case DmqMTOKUI_SEL.FieldByName('RHolidayKbn').AsInteger of
                                        0:  MemPtnJitsuzai.FieldByName('SRRHolidayName').AsString   :=  '翌営業日';
                                        1:  MemPtnJitsuzai.FieldByName('SRRHolidayName').AsString   :=  '前営業日';
                                        2:  MemPtnJitsuzai.FieldByName('SRRHolidayName').AsString   :=  '当日';
                                    end;
                                end;
                            end;
                        end;
                    end;
                end;
            end;

            // 数値属性
            if ( m_nCurrentCodeAttr = 0 ) then
                sCode   := ComArea.SetDspCodeAttr(GetFld('GCode').AsString, m_nCurrentCodeDigit, 0)
            // 数値属性前ｾﾞﾛ有
            else if ( m_nCurrentCodeAttr = 1 ) then
                sCode   := ComArea.SetDspCodeAttr(GetFld('GCode').AsString, m_nCurrentCodeDigit, 1)
            // ﾌﾘｰ属性
            else
                sCode   := ComArea.SetDspCodeAttr(GetFld('GCode').AsString, m_nCurrentCodeDigit, 2);
            // 外部ｺｰﾄﾞ
			MemPtnJitsuzai.FieldByName('GCode').AsString	    :=  sCode;
            // 得意先区分
            if ( GetFld('HojyoKbn1').AsInteger = 1 ) then
            begin
                MemPtnJitsuzai.FieldByName('TSAIYOU').AsString	:=	'○';   //<149>Add
                MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=	'得意先';
            end;

            // 仕入先区分
            if ( GetFld('HojyoKbn2').AsInteger = 1 ) then
            begin
                MemPtnJitsuzai.FieldByName('SSAIYOU').AsString	:=	'○';   //<149>Add
                if ( Trim(MemPtnJitsuzai.FieldByName('HojyoKbn').AsString) <> '' ) then
                    MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  MemPtnJitsuzai.FieldByName('HojyoKbn').AsString +
                                                                        '／仕入先'
                else
                    MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  '仕入先';
            end;

            if (uvSLicense) then
            begin
                // 資産購入先
                if ( GetFld('SisanHojyoKbn1').AsInteger = 1 ) then
                begin
                    MemPtnJitsuzai.FieldByName('SisanHojyoKbn1').AsString	:=	'○';
                    if ( Trim(MemPtnJitsuzai.FieldByName('HojyoKbn').AsString) <> '' ) then
                        MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  MemPtnJitsuzai.FieldByName('HojyoKbn').AsString +
                                                                            '／購入先'
                    else
                        MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  '購入先';
                end;

                // 資産売却先
                if ( GetFld('SisanHojyoKbn2').AsInteger = 1 ) then
                begin
                    MemPtnJitsuzai.FieldByName('SisanHojyoKbn2').AsString	:=	'○';
                    if ( Trim(MemPtnJitsuzai.FieldByName('HojyoKbn').AsString) <> '' ) then
                        MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  MemPtnJitsuzai.FieldByName('HojyoKbn').AsString +
                                                                            '／売却先'
                    else
                        MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  '売却先';
                end;

				// リース取引先<195>ST---
				if ( GetFld('SisanHojyoKbn3').AsInteger = 1 ) then
                begin
                    MemPtnJitsuzai.FieldByName('SisanHojyoKbn3').AsString	:=	'○';
                    if ( Trim(MemPtnJitsuzai.FieldByName('HojyoKbn').AsString) <> '' ) then
                        MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  MemPtnJitsuzai.FieldByName('HojyoKbn').AsString +
                                                                            '／リース'
                    else
                        MemPtnJitsuzai.FieldByName('HojyoKbn').AsString	:=  'リース';
                end;
				//<195>ED---

            end;

            // 連想
			MemPtnJitsuzai.FieldByName('Renso').AsString			:=	GetFld('Renso').AsString;
            // 簡略名称
			MemPtnJitsuzai.FieldByName('Nmk').AsString	            :=	GetFld('Nmk').AsString;
		    // 正式名称
            MemPtnJitsuzai.FieldByName('Nm').AsString	            :=	GetFld('Nm').AsString;
            // 郵便番号(基番)
            if ( not GetFld('PostNo1').IsNull      ) and
               ( GetFld('PostNo1').AsString <> '0' ) then
                MemPtnJitsuzai.FieldByName('PostNo1').AsString	        :=	Format('%.3d', [GetFld('PostNo1').AsInteger]);	// 051201 hirota
                //MemPtnJitsuzai.FieldByName('PostNo1').AsString	        :=	GetFld('PostNo1').AsString;
            // 郵便番号(枝番)
{↓<PST2>
            if ( not GetFld('PostNo2').IsNull      ) and
               ( GetFld('PostNo2').AsString <> '0' ) then
                MemPtnJitsuzai.FieldByName('PostNo2').AsString	        :=	Format('%.4d',[GetFld('PostNo2').AsInteger]);	// 051201 hirota
                //MemPtnJitsuzai.FieldByName('PostNo2').AsString	        :=	GetFld('PostNo2').AsString;
↑<PST2>}
//↓<PST2>
			// 郵便番号(枝番)は000-0000以外は出すことにする。
            // 例：000-0001、001-0000 → 枝番は出力する。
            if  ((GetFld('PostNo1').IsNull) or (GetFld('PostNo1').AsString = '0'))
            and ((GetFld('PostNo2').IsNull) or (GetFld('PostNo2').AsString = '0')) then
            begin
                MemPtnJitsuzai.FieldByName('PostNo2').AsString	        :=	'';
            end
            else
            begin
                MemPtnJitsuzai.FieldByName('PostNo2').AsString	        :=	Format('%.4d',[GetFld('PostNo2').AsInteger]);
            end;
//↑<PST2>
            // 住所(上段)
            MemPtnJitsuzai.FieldByName('Ads1').AsString	            :=	GetFld('Ads1').AsString;
            // 住所(下段)
            MemPtnJitsuzai.FieldByName('Ads2').AsString	            :=	GetFld('Ads2').AsString;
            // 代表者役職名
            MemPtnJitsuzai.FieldByName('DHyoNm1').AsString	        :=	GetFld('DHyoNm1').AsString;
            // 代表者名
            MemPtnJitsuzai.FieldByName('DHyoNm2').AsString	        :=	GetFld('DHyoNm2').AsString;
		    // 電話番号1
			MemPtnJitsuzai.FieldByName('Tel1').AsString	            :=	GetFLD('Tel1').AsString;
		    // 電話番号2
			MemPtnJitsuzai.FieldByName('Tel2').AsString		        :=	GetFld('Tel2').AsString;
            // FAX番号
			MemPtnJitsuzai.FieldByName('Fax1').AsString		        :=	GetFld('Fax1').AsString;
            // 資本金
            MemPtnJitsuzai.FieldByName('ShihonKin').AsString		:=	GetFld('ShihonKin').AsString;
            // 社員数
            MemPtnJitsuzai.FieldByName('SyainSu').AsString		    :=	GetFld('SyainSu').AsString;
            // 年商
            MemPtnJitsuzai.FieldByName('Nensyo').AsString		    :=	GetFld('Nensyo').AsString;

            // 和暦
            if ( m_iRekiKbn = 0 ) then
            begin
                // 適用期間(開始)
                if GetFld('TStartDate').AsDateTime = m_cJNTArea.getDefDate(1) then
                	MemPtnJitsuzai.FieldByName('TStartDate').Clear
                else
	                MemPtnJitsuzai.FieldByName('TStartDate').AsString   :=  MjsGetGengou( GetFld('TStartDate').AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd', GetFld('TStartDate').AsDateTime );
                // 適用期間(終了)
                if GetFld('TEndDate').AsDateTime = m_cJNTArea.getDefDate(2) then
                	MemPtnJitsuzai.FieldByName('TEndDate').Clear
                else
	                MemPtnJitsuzai.FieldByName('TEndDate').AsString		:=	MjsGetGengou( GetFld('TEndDate').AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd', GetFld('TEndDate').AsDateTime );
	            // 更新日
    	        if ( not GetFld('UpdDateTM').IsNull ) then
        	        MemPtnJitsuzai.FieldByName('UpdDateTM').AsString	:=	MjsGetGengou( GetFld('TEndDate').AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd HH:MM:SS', GetFld('UpdDateTM').AsDateTime );
            end
            // 西暦
            else
            begin
                // 適用期間(開始)
                if GetFld('TStartDate').AsDateTime = m_cJNTArea.getDefDate(1) then
                	MemPtnJitsuzai.FieldByName('TStartDate').Clear
                else
	                MemPtnJitsuzai.FieldByName('TStartDate').AsString   :=  FormatDateTime( 'yyyy/mm/dd', GetFld('TStartDate').AsDateTime );
                // 適用期間(終了)
                if GetFld('TEndDate').AsDateTime = m_cJNTArea.getDefDate(2) then
                	MemPtnJitsuzai.FieldByName('TEndDate').Clear
                else
	                MemPtnJitsuzai.FieldByName('TEndDate').AsString		:=	FormatDateTime( 'yyyy/mm/dd', GetFld('TEndDate').AsDateTime );
	            // 更新日
    	        if ( not GetFld('UpdDateTM').IsNull ) then
        	        MemPtnJitsuzai.FieldByName('UpdDateTM').AsString	:=	FormatDateTime( 'yyyy/mm/dd HH:MM:SS', GetFld('UpdDateTM').AsDateTime);
            end;
{
            // 更新日
   	        if ( not GetFld('UpdDateTM').IsNull ) then
       	        MemPtnJitsuzai.FieldByName('UpdDateTM').AsDateTime	:=	GetFld('UpdDateTM').AsDateTime;
}
            // HPｱﾄﾞﾚｽ
            MemPtnJitsuzai.FieldByName('HPAddress').AsString		:=	GetFld('HPAddress').AsString;

            if ( GetFld('REndKaisu').AsInteger in [1,2,3] ) then
            begin
                // 入金締日1
                if ( not GetFld('RCloseDay1').IsNull ) then
                    MemPtnJitsuzai.FieldByName('RCloseDay1').AsInteger	:=
                        GetFld('RCloseDay1').AsInteger;
                // 入金回収日1
                if ( not GetFld('RcvDay1').IsNull ) then
                    MemPtnJitsuzai.FieldByName('RcvDay1').AsInteger		:=
                        GetFld('RcvDay1').AsInteger;
                // 入金ｻｲｸﾙ1
                if ( not GetFld('RcvMonth1').IsNull ) then
                begin
					if GetFld('RcvMonth1').AsInteger = 0 then
						MemPtnJitsuzai.FieldByName('RcvMonth1Name').AsString    := '当月'
					else if GetFld('RcvMonth1').AsInteger = 1 then
						MemPtnJitsuzai.FieldByName('RcvMonth1Name').AsString    := '翌月'
					else if GetFld('RcvMonth1').AsInteger = 2 then
						MemPtnJitsuzai.FieldByName('RcvMonth1Name').AsString    := '翌々月'
					else
					begin
						MemPtnJitsuzai.FieldByName('RcvMonth1').AsInteger	    :=
							GetFld('RcvMonth1').AsInteger;
						MemPtnJitsuzai.FieldByName('RcvMonth1Name').AsString    :=
							IntToStr(GetFld('RcvMonth1').AsInteger) + 'ヶ月後';
					end;
                end;
                // 入金休日区分1
                if ( not GetFld('RHolidayKbn1').IsNull ) then
                begin
                    MemPtnJitsuzai.FieldByName('RHolidayKbn1').AsInteger	:=
                        GetFld('RHolidayKbn1').AsInteger;

                    case MemPtnJitsuzai.FieldByName('RHolidayKbn1').AsInteger of
                        0:  MemPtnJitsuzai.FieldByName('RHolidayKbn1Name').AsString :=  '翌営業日';
                        1:  MemPtnJitsuzai.FieldByName('RHolidayKbn1Name').AsString :=  '前営業日';
                        2:  MemPtnJitsuzai.FieldByName('RHolidayKbn1Name').AsString :=  '当日';
                    end;
                end;
            end;

            if ( GetFld('REndKaisu').AsInteger in [2,3] ) then
            begin
                // 入金締日2
                if ( not GetFld('RCloseDay2').IsNull ) then
                MemPtnJitsuzai.FieldByName('RCloseDay2').AsInteger	:=
                    GetFld('RCloseDay2').AsInteger;
                // 入金回収日2
                if ( not GetFld('RcvDay2').IsNull ) then
                    MemPtnJitsuzai.FieldByName('RcvDay2').AsInteger :=
                        GetFld('RcvDay2').AsInteger;
                // 入金ｻｲｸﾙ2
                if ( not GetFld('RcvMonth2').IsNull ) then
                begin
					if GetFld('RcvMonth2').AsInteger = 0 then
						MemPtnJitsuzai.FieldByName('RcvMonth2Name').AsString    := '当月'
					else if GetFld('RcvMonth2').AsInteger = 1 then
						MemPtnJitsuzai.FieldByName('RcvMonth2Name').AsString    := '翌月'
					else if GetFld('RcvMonth2').AsInteger = 2 then
						MemPtnJitsuzai.FieldByName('RcvMonth2Name').AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzai.FieldByName('RcvMonth2').AsInteger	    :=
	                        GetFld('RcvMonth2').AsInteger;
	                    MemPtnJitsuzai.FieldByName('RcvMonth2Name').AsString    :=
	                        IntToStr(GetFld('RcvMonth2').AsInteger) + 'ヶ月後';
					end;
                end;
                // 入金休日区分2
                if ( not GetFld('RHolidayKbn2').IsNull ) then
                begin
                    MemPtnJitsuzai.FieldByName('RHolidayKbn2').AsInteger	:=
                        GetFld('RHolidayKbn2').AsInteger;

                    case MemPtnJitsuzai.FieldByName('RHolidayKbn2').AsInteger of
                        0:  MemPtnJitsuzai.FieldByName('RHolidayKbn2Name').AsString :=  '翌営業日';
                        1:  MemPtnJitsuzai.FieldByName('RHolidayKbn2Name').AsString :=  '前営業日';
                        2:  MemPtnJitsuzai.FieldByName('RHolidayKbn2Name').AsString :=  '当日';
                    end;
                end;
            end;

            if ( GetFld('REndKaisu').AsInteger in [3] ) then
            begin
                // 入金締日3
                if ( not GetFld('RCloseDay3').IsNull ) then
                    MemPtnJitsuzai.FieldByName('RCloseDay3').AsInteger	:=
                        GetFld('RCloseDay3').AsInteger;
                // 入金回収日3
                if ( not GetFld('RcvDay3').IsNull ) then
                    MemPtnJitsuzai.FieldByName('RcvDay3').AsInteger	    :=
                        GetFld('RcvDay3').AsInteger;
                // 入金ｻｲｸﾙ3
                if ( not GetFld('RcvMonth3').IsNull ) then
                begin
					if GetFld('RcvMonth3').AsInteger = 0 then
						MemPtnJitsuzai.FieldByName('RcvMonth3Name').AsString    := '当月'
					else if GetFld('RcvMonth3').AsInteger = 1 then
						MemPtnJitsuzai.FieldByName('RcvMonth3Name').AsString    := '翌月'
					else if GetFld('RcvMonth3').AsInteger = 2 then
						MemPtnJitsuzai.FieldByName('RcvMonth3Name').AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzai.FieldByName('RcvMonth3').AsInteger	    :=
	                        GetFld('RcvMonth3').AsInteger;
	                    MemPtnJitsuzai.FieldByName('RcvMonth3Name').AsString    :=
	                        IntToStr(GetFld('RcvMonth3').AsInteger) + 'ヶ月後';
					end;
                end;
                // 入金休日区分3
                if ( not GetFld('RHolidayKbn3').IsNull ) then
                begin
                    MemPtnJitsuzai.FieldByName('RHolidayKbn3').AsInteger	:=
                        GetFld('RHolidayKbn3').AsInteger;

                    case MemPtnJitsuzai.FieldByName('RHolidayKbn3').AsInteger of
                        0:  MemPtnJitsuzai.FieldByName('RHolidayKbn3Name').AsString :=  '翌営業日';
                        1:  MemPtnJitsuzai.FieldByName('RHolidayKbn3Name').AsString :=  '前営業日';
                        2:  MemPtnJitsuzai.FieldByName('RHolidayKbn3Name').AsString :=  '当日';
                    end;
                end;
            end;

            if ( GetFld('PEndKaisu').AsInteger in [1,2,3] ) then
            begin
                // 支払締日1
                if ( not GetFld('PCloseDay1').IsNull ) then
                    MemPtnJitsuzai.FieldByName('PCloseDay1').AsInteger		:=
                        GetFld('PCloseDay1').AsInteger;
                // 支払回収日1
                if ( not GetFld('PayDay1').IsNull ) then
                    MemPtnJitsuzai.FieldByName('PayDay1').AsInteger		    :=
                        GetFld('PayDay1').AsInteger;
                // 支払ｻｲｸﾙ1
                if ( not GetFld('PayMonth1').IsNull ) then
                begin
					if GetFld('PayMonth1').AsInteger = 0 then
						MemPtnJitsuzai.FieldByName('PayMonth1Name').AsString    := '当月'
					else if GetFld('PayMonth1').AsInteger = 1 then
						MemPtnJitsuzai.FieldByName('PayMonth1Name').AsString    := '翌月'
					else if GetFld('PayMonth1').AsInteger = 2 then
						MemPtnJitsuzai.FieldByName('PayMonth1Name').AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzai.FieldByName('PayMonth1').AsInteger	    :=
	                        GetFld('PayMonth1').AsInteger;
	                    MemPtnJitsuzai.FieldByName('PayMonth1Name').AsString    :=
	                        IntToStr(GetFld('PayMonth1').AsInteger) + 'ヶ月後';
					end;
                end;
                // 支払休日区分1
                if ( not GetFld('PHolidayKbn1').IsNull ) then
                begin
                    MemPtnJitsuzai.FieldByName('PHolidayKbn1').AsInteger	:=
                        GetFld('PHolidayKbn1').AsInteger;

                    case MemPtnJitsuzai.FieldByName('PHolidayKbn1').AsInteger of
                        0:  MemPtnJitsuzai.FieldByName('PHolidayKbn1Name').AsString :=  '翌営業日';
                        1:  MemPtnJitsuzai.FieldByName('PHolidayKbn1Name').AsString :=  '前営業日';
                        2:  MemPtnJitsuzai.FieldByName('PHolidayKbn1Name').AsString :=  '当日';
                    end;
                end;
            end;

            if ( GetFld('PEndKaisu').AsInteger in [2,3] ) then
            begin
                // 支払締日2
                if ( not GetFld('PCloseDay2').IsNull ) then
                    MemPtnJitsuzai.FieldByName('PCloseDay2').AsInteger		:=
                        GetFld('PCloseDay2').AsInteger;
                // 支払回収日2
                if ( not GetFld('PayDay2').IsNull ) then
                    MemPtnJitsuzai.FieldByName('PayDay2').AsInteger		    :=
                        GetFld('PayDay2').AsInteger;
                // 支払ｻｲｸﾙ2
                if ( not GetFld('PayMonth2').IsNull ) then
                begin
					if GetFld('PayMonth2').AsInteger = 0 then
						MemPtnJitsuzai.FieldByName('PayMonth2Name').AsString    := '当月'
					else if GetFld('PayMonth2').AsInteger = 1 then
						MemPtnJitsuzai.FieldByName('PayMonth2Name').AsString    := '翌月'
					else if GetFld('PayMonth2').AsInteger = 2 then
						MemPtnJitsuzai.FieldByName('PayMonth2Name').AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzai.FieldByName('PayMonth2').AsInteger	    :=
	                        GetFld('PayMonth2').AsInteger;
    	                MemPtnJitsuzai.FieldByName('PayMonth2Name').AsString    :=
        	                IntToStr(GetFld('PayMonth2').AsInteger) + 'ヶ月後';
					end;
                end;
                // 支払休日区分2
                if ( not GetFld('PHolidayKbn2').IsNull ) then
                begin
                    MemPtnJitsuzai.FieldByName('PHolidayKbn2').AsInteger	:=
                        GetFld('PHolidayKbn2').AsInteger;

                    case MemPtnJitsuzai.FieldByName('PHolidayKbn2').AsInteger of
                        0:  MemPtnJitsuzai.FieldByName('PHolidayKbn2Name').AsString :=  '翌営業日';
                        1:  MemPtnJitsuzai.FieldByName('PHolidayKbn2Name').AsString :=  '前営業日';
                        2:  MemPtnJitsuzai.FieldByName('PHolidayKbn2Name').AsString :=  '当日';
                    end;
                end;
            end;

            if ( GetFld('PEndKaisu').AsInteger in [3] ) then
            begin
                // 支払締日3
                if ( not GetFld('PCloseDay3').IsNull ) then
                    MemPtnJitsuzai.FieldByName('PCloseDay3').AsInteger		:=
                        GetFld('PCloseDay3').AsInteger;
                // 支払回収日3
                if ( not GetFld('PayDay3').IsNull ) then
                    MemPtnJitsuzai.FieldByName('PayDay3').AsInteger		    :=
                        GetFld('PayDay3').AsInteger;
                // 支払ｻｲｸﾙ3
                if ( not GetFld('PayMonth3').IsNull ) then
                begin
					if GetFld('PayMonth3').AsInteger = 0 then
						MemPtnJitsuzai.FieldByName('PayMonth3Name').AsString    := '当月'
					else if GetFld('PayMonth3').AsInteger = 1 then
						MemPtnJitsuzai.FieldByName('PayMonth3Name').AsString    := '翌月'
					else if GetFld('PayMonth3').AsInteger = 2 then
						MemPtnJitsuzai.FieldByName('PayMonth3Name').AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzai.FieldByName('PayMonth3').AsInteger	    :=
	                        GetFld('PayMonth3').AsInteger;
	                    MemPtnJitsuzai.FieldByName('PayMonth3Name').AsString    :=
	                        IntToStr(GetFld('PayMonth3').AsInteger) + 'ヶ月後';
					end;
                end;
                // 支払休日区分3
                if ( not GetFld('PHolidayKbn3').IsNull ) then
                begin
                    MemPtnJitsuzai.FieldByName('PHolidayKbn3').AsInteger	:=
                        GetFld('PHolidayKbn3').AsInteger;

                    case MemPtnJitsuzai.FieldByName('PHolidayKbn3').AsInteger of
                        0:  MemPtnJitsuzai.FieldByName('PHolidayKbn3Name').AsString :=  '翌営業日';
                        1:  MemPtnJitsuzai.FieldByName('PHolidayKbn3Name').AsString :=  '前営業日';
                        2:  MemPtnJitsuzai.FieldByName('PHolidayKbn3Name').AsString :=  '当日';
                    end;
                end;
            end;

            MemPtnJitsuzai.Post();
            Next;
        end;
	end;

    DmqMTOKUI.Close();
	DmqMTOKUI.Free();
    DmqMTOKUI_SEL.Close();
	DmqMTOKUI_SEL.Free();
	DmqFusen.Close();
	DmqFusen.Free();

end;
*)
//<256> DEL Ed

// -----------------------------------------------------------------------------
//  印刷処理【実在取引先登録リスト[分類・セグメント型]】    <PRN>
// -----------------------------------------------------------------------------
procedure	TJNTCRP004001f.fnPrintCheckListSegBun ();
var
	dqMasterData: TMQuery;
	strExCode	: String;
	strFormat	: String;
    i,j			: Integer;
begin
	dqMasterData	:= TMQuery.Create (Self);

//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);					// DBとMQueryの接続
	gfnJNTSELSetDbName(dqMasterData, dbCorp_Select);		//<D10>

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear;

		SQL.Add   ('SELECT mt.GCode, mt.Nm, mt.TStartDate, mt.TEndDate, ');
		SQL.Add   ('       seg01.GCode As seg01Code, seg01.SimpleName As seg01Name, bun01.GCode As bun01Code, bun01.Nmk As bun01Name, ');
		SQL.Add   ('       seg02.GCode As seg02Code, seg02.SimpleName As seg02Name, bun02.GCode As bun02Code, bun02.Nmk As bun02Name, ');
		SQL.Add   ('       seg03.GCode As seg03Code, seg03.SimpleName As seg03Name, bun03.GCode As bun03Code, bun03.Nmk As bun03Name, ');
		SQL.Add   ('       seg04.GCode As seg04Code, seg04.SimpleName As seg04Name, bun04.GCode As bun04Code, bun04.Nmk As bun04Name, ');
		SQL.Add   ('       seg05.GCode As seg05Code, seg05.SimpleName As seg05Name, bun05.GCode As bun05Code, bun05.Nmk As bun05Name, ');
		SQL.Add   ('       seg06.GCode As seg06Code, seg06.SimpleName As seg06Name, bun06.GCode As bun06Code, bun06.Nmk As bun06Name, ');
		SQL.Add   ('       seg07.GCode As seg07Code, seg07.SimpleName As seg07Name, bun07.GCode As bun07Code, bun07.Nmk As bun07Name, ');
		SQL.Add   ('       seg08.GCode As seg08Code, seg08.SimpleName As seg08Name, bun08.GCode As bun08Code, bun08.Nmk As bun08Name, ');
		SQL.Add   ('       seg09.GCode As seg09Code, seg09.SimpleName As seg09Name, bun09.GCode As bun09Code, bun09.Nmk As bun09Name, ');
		SQL.Add   ('       seg10.GCode As seg10Code, seg10.SimpleName As seg10Name, bun10.GCode As bun10Code, bun10.Nmk As bun10Name  ');
		SQL.Add   ('FROM MTOKUI mt ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg01 ');
		SQL.Add   ('  ON   seg01.MasterKbn = 101 and mt.SegNCode1 = seg01.NCode and seg01.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg02 ');
		SQL.Add   ('  ON   seg02.MasterKbn = 102 and mt.SegNCode2 = seg02.NCode and seg02.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg03 ');
		SQL.Add   ('  ON   seg03.MasterKbn = 103 and mt.SegNCode3 = seg03.NCode and seg03.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg04 ');
		SQL.Add   ('  ON   seg04.MasterKbn = 104 and mt.SegNCode4 = seg04.NCode and seg04.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg05 ');
		SQL.Add   ('  ON   seg05.MasterKbn = 105 and mt.SegNCode5 = seg05.NCode and seg05.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg06 ');
		SQL.Add   ('  ON   seg06.MasterKbn = 106 and mt.SegNCode6 = seg06.NCode and seg06.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg07 ');
		SQL.Add   ('  ON   seg07.MasterKbn = 107 and mt.SegNCode7 = seg07.NCode and seg07.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg08 ');
		SQL.Add   ('  ON   seg08.MasterKbn = 108 and mt.SegNCode8 = seg08.NCode and seg08.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg09 ');
		SQL.Add   ('  ON   seg09.MasterKbn = 109 and mt.SegNCode9 = seg09.NCode and seg09.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA seg10 ');
		SQL.Add   ('  ON   seg10.MasterKbn = 110 and mt.SegNCode10 = seg10.NCode and seg10.RDelKbn = 0 ');

        SQL.Add   ('LEFT OUTER JOIN MTOKUI_SEL tok ');
		SQL.Add   ('  ON  mt.NCode = tok.BaseNCode and tok.RecKbn = 1 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun01 ');
		SQL.Add   ('  ON   bun01.SetNm = :SetNM01 and tok.BunruiNCode1 = bun01.NCode and bun01.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun02 ');
		SQL.Add   ('  ON   bun02.SetNm = :SetNM02 and tok.BunruiNCode2 = bun02.NCode and bun02.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun03 ');
		SQL.Add   ('  ON   bun03.SetNm = :SetNM03 and tok.BunruiNCode3 = bun03.NCode and bun03.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun04 ');
		SQL.Add   ('  ON   bun04.SetNm = :SetNM04 and tok.BunruiNCode4 = bun04.NCode and bun04.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun05 ');
		SQL.Add   ('  ON   bun05.SetNm = :SetNM05 and tok.BunruiNCode5 = bun05.NCode and bun05.RDelKbn = 0 ');

        SQL.Add   ('LEFT OUTER JOIN MTOKUI_SEL shi ');
		SQL.Add   ('  ON  mt.NCode = shi.BaseNCode and shi.RecKbn = 2 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun06 ');
		SQL.Add   ('  ON   bun06.SetNm = :SetNM06 and shi.BunruiNCode1 = bun06.NCode and bun06.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun07 ');
		SQL.Add   ('  ON   bun07.SetNm = :SetNM07 and shi.BunruiNCode2 = bun07.NCode and bun07.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun08 ');
		SQL.Add   ('  ON   bun08.SetNm = :SetNM08 and shi.BunruiNCode3 = bun08.NCode and bun08.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun09 ');
		SQL.Add   ('  ON   bun09.SetNm = :SetNM09 and shi.BunruiNCode4 = bun09.NCode and bun09.RDelKbn = 0 ');
        SQL.Add   ('LEFT OUTER JOIN MMEISHO bun10 ');
		SQL.Add   ('  ON   bun10.SetNm = :SetNM10 and shi.BunruiNCode5 = bun10.NCode and bun10.RDelKbn = 0 ');

		SQL.Add   ('WHERE  mt.SumKbn = 0 and mt.RDelKbn = 0 and mt.TemplateKbn = 0');
        SQL.Add	  ('AND (');
        SQL.Add   (' EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg01, SegMA ');
		SQL.Add   ('  WHERE seg01.MasterKbn = 101 and mt.SegNCode1 = seg01.NCode and seg01.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse1 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg02, SegMA ');
		SQL.Add   ('  WHERE seg02.MasterKbn = 102 and mt.SegNCode2 = seg02.NCode and seg02.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse2 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg03, SegMA ');
		SQL.Add   ('  WHERE seg03.MasterKbn = 103 and mt.SegNCode3 = seg03.NCode and seg03.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse3 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg04, SegMA ');
		SQL.Add   ('  WHERE seg04.MasterKbn = 104 and mt.SegNCode4 = seg04.NCode and seg04.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse4 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg05, SegMA ');
		SQL.Add   ('  WHERE seg05.MasterKbn = 105 and mt.SegNCode5 = seg05.NCode and seg05.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse5 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg06, SegMA ');
		SQL.Add   ('  WHERE seg06.MasterKbn = 106 and mt.SegNCode6 = seg06.NCode and seg06.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse6 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg07, SegMA ');
		SQL.Add   ('  WHERE seg07.MasterKbn = 107 and mt.SegNCode7 = seg07.NCode and seg07.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse7 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg08, SegMA ');
		SQL.Add   ('  WHERE seg08.MasterKbn = 108 and mt.SegNCode8 = seg08.NCode and seg08.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse8 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg09, SegMA ');
		SQL.Add   ('  WHERE seg09.MasterKbn = 109 and mt.SegNCode9 = seg09.NCode and seg09.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse9 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from HojyoMA seg10, SegMA ');
		SQL.Add   ('  WHERE seg10.MasterKbn = 110 and mt.SegNCode10 = seg10.NCode and seg10.RDelKbn = 0 ');
		SQL.Add   ('    AND SegMA.MasterKbn = 22 and SegMA.SegUse10 = 1 and SegMA.RDelKbn = 0 ');
		SQL.Add   (') ');

        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun01, MasterInfo ');
		SQL.Add   ('  WHERE bun01.SetNm = :SetNM01 and tok.BunruiNCode1 = bun01.NCode and bun01.RDelKbn = 0 ');
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM01 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun02, MasterInfo ');
		SQL.Add   ('  WHERE bun02.SetNm = :SetNM02 and tok.BunruiNCode2 = bun02.NCode and bun02.RDelKbn = 0 ');
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM02 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun03, MasterInfo ');
		SQL.Add   ('  WHERE bun03.SetNm = :SetNM03 and tok.BunruiNCode3 = bun03.NCode and bun03.RDelKbn = 0 ');
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM03 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun04, MasterInfo ');
		SQL.Add   ('  WHERE bun04.SetNm = :SetNM04 and tok.BunruiNCode4 = bun04.NCode and bun04.RDelKbn = 0 ');
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM04 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun05, MasterInfo ');
		SQL.Add   ('  WHERE bun05.SetNm = :SetNM05 and tok.BunruiNCode5 = bun05.NCode and bun05.RDelKbn = 0 ');
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM05 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun06, MasterInfo ');
//		SQL.Add   ('  WHERE bun06.SetNm = :SetNM06 and shi.BunruiNCode6 = bun06.NCode and bun06.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('  WHERE bun06.SetNm = :SetNM06 and shi.BunruiNCode1 = bun06.NCode and bun06.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM06 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun07, MasterInfo ');
//		SQL.Add   ('  WHERE bun07.SetNm = :SetNM07 and shi.BunruiNCode7 = bun07.NCode and bun07.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('  WHERE bun07.SetNm = :SetNM07 and shi.BunruiNCode2 = bun07.NCode and bun07.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM07 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun08, MasterInfo ');
//		SQL.Add   ('  WHERE bun08.SetNm = :SetNM08 and shi.BunruiNCode8 = bun08.NCode and bun08.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('  WHERE bun08.SetNm = :SetNM08 and shi.BunruiNCode3 = bun08.NCode and bun08.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM08 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun09, MasterInfo ');
//		SQL.Add   ('  WHERE bun09.SetNm = :SetNM09 and shi.BunruiNCode9 = bun09.NCode and bun09.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('  WHERE bun09.SetNm = :SetNM09 and shi.BunruiNCode4 = bun09.NCode and bun09.RDelKbn = 0 ');  //<Gali2446>
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM09 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
        SQL.Add   (' OR EXISTS(');
        SQL.Add   ('  select * from MMEISHO bun10, MasterInfo ');
//		SQL.Add   ('  WHERE bun10.SetNm = :SetNM10 and shi.BunruiNCode10 = bun10.NCode and bun10.RDelKbn = 0 '); //<Gali2446>
		SQL.Add   ('  WHERE bun10.SetNm = :SetNM10 and shi.BunruiNCode5 = bun10.NCode and bun10.RDelKbn = 0 '); //<Gali2446>
		SQL.Add   ('    AND MasterInfo.MasterKbn = :SetNM10 and MasterInfo.UseKbn <> 0 ');
		SQL.Add   (') ');
		SQL.Add   (') ');

        if ( uvHani.pvrRgType[0] <> 0 ) then									// 指定あり
        begin
            if ( uvHani.pvrStCode[0] <> '' ) then								// 開始指定
            begin
                SQL.Add('  AND  (mt.GCode >= :ExStCode)   ');
    			ParamByName('ExStCode').AsString   :=	uvHani.pvrStCode[0];
            end;

            if ( uvHani.pvrEdCode[0] <> '' ) then								// 終了のみ指定
            begin
                SQL.Add('  AND  (mt.GCode <= :ExEdCode)   ');
    			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
        end;

		if	(uvHani.pvrOrder = 0) then											// 印刷範囲指定: 0=ｺｰﾄﾞ順
			SQL.ADD ('ORDER BY mt.GCode')
		else																	// 印刷範囲指定: 1=連想順
			SQL.ADD ('ORDER BY mt.Renso, mt.GCode');

		ParamByName ('SetNM01').AsInteger	:= 411;
		ParamByName ('SetNM02').AsInteger	:= 412;
		ParamByName ('SetNM03').AsInteger	:= 413;
		ParamByName ('SetNM04').AsInteger	:= 414;
		ParamByName ('SetNM05').AsInteger	:= 415;
		ParamByName ('SetNM06').AsInteger	:= 421;
		ParamByName ('SetNM07').AsInteger	:= 422;
		ParamByName ('SetNM08').AsInteger	:= 423;
		ParamByName ('SetNM09').AsInteger	:= 424;
		ParamByName ('SetNM10').AsInteger	:= 425;

		Open ();

		MemPtnSegBun.Active	:= False;
		MemPtnSegBun.Active	:= True;

		while  (not EOF) do
		begin
			MemPtnSegBun.Append();

			strExCode	:= GetFld ('GCode').AsString;

			if	(m_nCurrentCodeAttr <= 1) then
			begin
				case (m_nCurrentCodeAttr) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
				end;

				strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
			end;

			MemPtnSegBun.FieldByName ('strExCodeDst').AsString		:= strExCode;
			MemPtnSegBun.FieldByName ('strNameSimpleDst').AsString	:= GetFld ('Nm').AsString;
//<257> ADD St
            // 和暦
            if ( m_iRekiKbn = 0 ) then
            begin
                // 適用期間(開始)
                if GetFld('TStartDate').AsDateTime = m_cJNTArea.getDefDate(1) then
                	MemPtnSegBun.FieldByName('dtStart').Clear
                else
	                MemPtnSegBun.FieldByName('dtStart').AsString   :=  MjsGetGengou( GetFld('TStartDate').AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd', GetFld('TStartDate').AsDateTime );
                // 適用期間(終了)
                if GetFld('TEndDate').AsDateTime = m_cJNTArea.getDefDate(2) then
                	MemPtnSegBun.FieldByName('dtEnd').Clear
                else
	                MemPtnSegBun.FieldByName('dtEnd').AsString		:=	MjsGetGengou( GetFld('TEndDate').AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd', GetFld('TEndDate').AsDateTime );
            end
            // 西暦
            else
            begin
                // 適用期間(開始)
                if GetFld('TStartDate').AsDateTime = m_cJNTArea.getDefDate(1) then
                	MemPtnSegBun.FieldByName('dtStart').Clear
                else
	                MemPtnSegBun.FieldByName('dtStart').AsString   :=  FormatDateTime( 'yyyy/mm/dd', GetFld('TStartDate').AsDateTime );
                // 適用期間(終了)
                if GetFld('TEndDate').AsDateTime = m_cJNTArea.getDefDate(2) then
                	MemPtnSegBun.FieldByName('dtEnd').Clear
                else
	                MemPtnSegBun.FieldByName('dtEnd').AsString		:=	FormatDateTime( 'yyyy/mm/dd', GetFld('TEndDate').AsDateTime );
            end;
//<257> ADD Ed

			// セグメント
            for i:=1 to 10 do
            begin
				strExCode	:= GetFld ('seg' + Format('%.2d',[i]) + 'Code').AsString;
                if strExCode = '' then							// 未設定
                	continue;

	            for j:=1 to 10 do
    	        begin
                	if i+100 = m_arAdoptInfo_Seg [j].nMasterDivision then
                    	break;
                end;

                if j > 10 then	// 採用なし
                	continue;
                if m_arAdoptInfo_Seg [j].nAdoption = 0 then	// 採用なし
                	continue;

				if	(m_arAdoptInfo_Seg [j].nCodeAttribute <= 1) then
				begin
					case (m_arAdoptInfo_Seg [j].nCodeAttribute) of
						0:	strFormat	:= '%'  + IntToStr (m_arAdoptInfo_Seg [j].nCodeDigit) + 'd';
						1:	strFormat	:= '%.' + IntToStr (m_arAdoptInfo_Seg [j].nCodeDigit) + 'd';
					end;

					strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
				end;

				MemPtnSegBun.FieldByName ('strSeg' + Format('%.2d',[i]) + 'Code').AsString	:= strExCode;
				MemPtnSegBun.FieldByName ('strSeg' + Format('%.2d',[i]) + 'Name').AsString	:= GetFld ('seg' + Format('%.2d',[i]) + 'Name').AsString;
			end;

			// 得意先分類
            for i:=1 to 5 do
            begin
				strExCode	:= GetFld ('bun' + Format('%.2d',[i]) + 'Code').AsString;
                if strExCode = '' then							// 未設定
                	continue;

	            for j:=1 to 10 do
    	        begin
                	if i+410 = m_arAdoptInfo_TBr [j].nMasterDivision then
                    	break;
                end;

                if j > 10 then	// 採用なし
                	continue;
                if m_arAdoptInfo_TBr [j].nAdoption = 0 then	// 採用なし
                	continue;

				if	(m_arAdoptInfo_TBr [j].nCodeAttribute <= 1) then
				begin
					case (m_arAdoptInfo_TBr [j].nCodeAttribute) of
						0:	strFormat	:= '%'  + IntToStr (m_arAdoptInfo_TBr [j].nCodeDigit) + 'd';
						1:	strFormat	:= '%.' + IntToStr (m_arAdoptInfo_TBr [j].nCodeDigit) + 'd';
					end;

					strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
				end;

				MemPtnSegBun.FieldByName ('strBun' + Format('%.2d',[i]) + 'Code').AsString	:= strExCode;
				MemPtnSegBun.FieldByName ('strBun' + Format('%.2d',[i]) + 'Name').AsString	:= GetFld ('bun' + Format('%.2d',[i]) + 'Name').AsString;
            end;

			// 仕入先分類
            for i:=6 to 10 do
            begin
				strExCode	:= GetFld ('bun' + Format('%.2d',[i]) + 'Code').AsString;
                if strExCode = '' then							// 未設定
                	continue;

	            for j:=1 to 10 do
    	        begin
                	if i+420-5 = m_arAdoptInfo_SBr [j].nMasterDivision then
                    	break;
                end;

                if j > 10 then	// 採用なし
                	continue;
                if m_arAdoptInfo_SBr [j].nAdoption = 0 then	// 採用なし
                	continue;

				if	(m_arAdoptInfo_SBr [j].nCodeAttribute <= 1) then
				begin
					case (m_arAdoptInfo_SBr [j].nCodeAttribute) of
						0:	strFormat	:= '%'  + IntToStr (m_arAdoptInfo_SBr [j].nCodeDigit) + 'd';
						1:	strFormat	:= '%.' + IntToStr (m_arAdoptInfo_SBr [j].nCodeDigit) + 'd';
					end;

					strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
				end;

				MemPtnSegBun.FieldByName ('strBun' + Format('%.2d',[i]) + 'Code').AsString	:= strExCode;
				MemPtnSegBun.FieldByName ('strBun' + Format('%.2d',[i]) + 'Name').AsString	:= GetFld ('bun' + Format('%.2d',[i]) + 'Name').AsString;
            end;

			MemPtnSegBun.Post();

			NEXT;
		end;

		Close ();
	end;

	dqMasterData.Free ();
end;
//<256> DEL St
(*
// -----------------------------------------------------------------------------
//  印刷処理【合計取引先登録リスト】    <PRN><161>
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnPrintCheckListTtlStandard ();
var
	dqMasterData    :   TMQuery;
	strExCode	    :   String;
	strFormat	    :   String;
begin

	dqMasterData	:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);

    MemPtnGoukei.Close();
	MemPtnGoukei.Open();

	with dqMasterData do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT m.GCode,m.Nm,m.Nmk,m.Renso,m.HojyoKbn1,m.HojyoKbn2,     '
            +   '       m.SisanHojyoKbn1,m.SisanHojyoKbn2,m.SisanHojyoKbn3,c.PostNo1,c.PostNo2,  '
            +   '       c.Ads1,f.FusenKbn                                       '
            +   'FROM MTOKUI m                                                  '
            +   'LEFT OUTER JOIN MTOKUI_CRD c on (c.BaseNCode = m.NCode)        '
            +   'LEFT OUTER JOIN MFusenInfo f on (f.NCode     = m.NCode)        '
            +   '                            AND (f.MasterKbn = 22)             '
            +   'WHERE  (SumKbn <> 0) AND (RDelKbn = 0)                         ');

        // ｺｰﾄﾞの範囲指定
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            SQL.Add('  AND  (m.GCode >= :ExStCode)  ');
		    SQL.Add('  AND  (m.GCode <= :ExEdCode)  ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
        end;

        // 出力順序
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY m.GCode           ')
        else    SQL.Add('ORDER BY m.Renso, m.GCode  ');

        //	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(dqMasterData);
			dqMasterData.Close();
			dqMasterData.Free();
            Exit;
		end;

		while  (not EOF) do
		begin
			MemPtnGoukei.Append();

			strExCode	:= GetFld ('GCode').AsString;

			if ( m_nCurrentCodeAttr <= 1 ) then
			begin
				case (m_nCurrentCodeAttr) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
				end;
				strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
			end;

            // 付箋区分
			case GetFld('FusenKbn').AsInteger of
				0:	TGraphicField(MemPtnGoukei.FieldByName('grTag')).Clear;
				1:	TGraphicField(MemPtnGoukei.FieldByName('grTag')).Assign(Image_Fusen_Red.Picture.Bitmap);
				2:	TGraphicField(MemPtnGoukei.FieldByName('grTag')).Assign(Image_Fusen_Green.Picture.Bitmap);
				3:	TGraphicField(MemPtnGoukei.FieldByName('grTag')).Assign(Image_Fusen_Blue.Picture.Bitmap);
				4:	TGraphicField(MemPtnGoukei.FieldByName('grTag')).Assign(Image_Fusen_Orange.Picture.Bitmap);
			end;

            // 取引先ｺｰﾄﾞ
			MemPtnGoukei.FieldByName('strExCode')       .AsString	:=  strExCode;
            // 連想
			MemPtnGoukei.FieldByName('strAssociation')  .AsString	:=  GetFld ('Renso')    .AsString;
            // 正式名称
			MemPtnGoukei.FieldByName('strName')         .AsString	:=  GetFld ('Nm')       .AsString;
            // 簡略名称
			MemPtnGoukei.FieldByName('strNameSimple')   .AsString	:=  GetFld ('Nmk')      .AsString;

            // 郵便番号(基番、枝番)
            if	((FieldByName ('PostNo1').AsInteger = 0) and
                 (FieldByName ('PostNo2').AsInteger = 0)) then
            begin
                MemPtnGoukei.FieldByName ('nZipCodeUpper').Clear ();
                MemPtnGoukei.FieldByName ('nZipCodeLower').Clear ();
            end
            else
            begin
                MemPtnGoukei.FieldByName ('nZipCodeUpper').AsInteger    :=  FieldByName('PostNo1')  .AsInteger;
                MemPtnGoukei.FieldByName ('nZipCodeLower').AsInteger	:=  FieldByName('PostNo2')  .AsInteger;
            end;
            // 住所１
            MemPtnGoukei.FieldByName ('strAddress')         .AsString	:=  GetFld('Ads1')          .AsString;

            // 得意先、仕入先、購入先、売却先区分
            if ( GetFld('HojyoKbn1').AsInteger = 1 ) then
                MemPtnGoukei.FieldByName('TSAIYOU').AsString	:=	'○';
            if ( GetFld('HojyoKbn2').AsInteger = 1 ) then
                MemPtnGoukei.FieldByName('SSAIYOU').AsString	:=	'○';

            // 資産ﾗｲｾﾝｽﾁｪｯｸ
            if (uvSLicense) then
            begin
                if ( GetFld('SisanHojyoKbn1').AsInteger = 1 ) then
                    MemPtnGoukei.FieldByName('KSAIYOU').AsString	:=	'○';
                if ( GetFld('SisanHojyoKbn2').AsInteger = 1 ) then
                    MemPtnGoukei.FieldByName('BSAIYOU').AsString	:=	'○';
				//<195>ST---リース取引先追加
				if ( GetFld('SisanHojyoKbn3').AsInteger = 1 ) then
                    MemPtnGoukei.FieldByName('RSAIYOU').AsString	:=	'○';
				//<195>ED---
            end;

			MemPtnGoukei.Post();

			Next;
		end;
	end;

    MemPtnGoukei.First;

    dqMasterData.Close();
    dqMasterData.Free();

end;

// -----------------------------------------------------------------------------
//  印刷処理【取引先加算登録リスト】    <PRN><161>
// -----------------------------------------------------------------------------
procedure	TJNTCRP004001f.fnPrintCheckListSystem();
var
	dqMasterData: TMQuery;
	strExCode	: String;
	strFormat	: String;
begin

	dqMasterData	:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);

    MemPtnKasan.Close();
	MemPtnKasan.Open();

	with dqMasterData do
	begin
		Close ();
		SQL.Clear();
        SQL.Add('SELECT NCode,GCode,Renso,Nm,Nmk FROM MTOKUI                    '
            +   'WHERE (SumKbn = 1) AND (RDelKbn = 0) AND (TemplateKbn = 0)     '
            +   'Order By GCode                                                 ');
		Open ();

		while  (not EOF) do
		begin
			strExCode	:= GetFld ('GCode').AsString;

			if	(m_nCurrentCodeAttr <= 1) then
			begin
				case (m_nCurrentCodeAttr) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
				end;

				strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
			end;

            m_stPrintDstData.strExNCode     := GetFld('NCode')      .AsFloat;
			m_stPrintDstData.strExCode		:= strExCode;
			m_stPrintDstData.strAssociation	:= GetFld ('Renso')     .AsString;
			m_stPrintDstData.strName		:= GetFld ('Nm')        .AsString;
			m_stPrintDstData.strNameSimple	:= GetFld ('Nmk')       .AsString;

			fnSetSystemRecords();

			NEXT;
		end;

		Close ();
	end;

	dqMasterData.Free ();

end;

// -----------------------------------------------------------------------------
//  印刷処理【取引先加算登録リスト】    <PRN><161>
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnSetSystemRecords ();
var
	dqMasterData: TMQuery;
	nRecords	: Integer;

begin
	dqMasterData	:= TMQuery.Create(Self);
    MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);

	nRecords	:= 0;

    with dqMasterData do
    begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT hm.GCode, hm.Nmk FROM HojyoTree ht, MTOKUI hm   '
		    +   'WHERE  (ht.MasterKbn   = 22)                           '
            +   '   AND (hm.RDelKbn     = 0)                            '
            +   '   AND (hm.TemplateKbn = 0)                            '
            +   '   AND (ht.SumNCode    = :strExCodeDst)                '
            +   '   AND (hm.NCode       = ht.BasedNCode)                '
            +   'Order By ht.EntNo                                      ');

        ParamByName ('strExCodeDst'   ).AsFloat 	:= m_stPrintDstData.strExNCode;
		Open();

		while (not EOF) do
		begin
			fnSetSystemRecord (dqMasterData);
			nRecords	:= nRecords + 1;
			Next;
		end;
    end;

	if	(nRecords = 0) then
	begin
		MemPtnKasan.Append();
		MemPtnKasan.FieldByName('strExCodeDst')     .AsString   :=  m_stPrintDstData.strExCode;
		MemPtnKasan.FieldByName('strNameSimpleDst') .AsString	:=  m_stPrintDstData.strNameSimple;
		MemPtnKasan.Post();
	end;

    MemPtnKasan.First();

    dqMasterData.Close();
	dqMasterData.Free();

end;

// -----------------------------------------------------------------------------
//  印刷処理【取引先加算登録リスト】    <PRN><161>
// -----------------------------------------------------------------------------
procedure	TJNTCRP004001f.fnSetSystemRecord(dqMasterData: TMQuery);
var
    strExCode   :   String;
	strFormat   :   String;
begin

	with dqMasterData do
	begin
		strExCode	:= GetFld ('GCode').AsString;

		if	( m_nCurrentCodeAttr <= 1 ) then
		begin
			case (m_nCurrentCodeAttr) of
				0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
				1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
			end;
			strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
		end;

		MemPtnKasan.Append();
		MemPtnKasan.FieldByName ('strExCodeDst')    .AsString	:= m_stPrintDstData.strExCode;
		MemPtnKasan.FieldByName ('strNameSimpleDst').AsString	:= m_stPrintDstData.strNameSimple;
		MemPtnKasan.FieldByName ('strExCodeSrc')    .AsString	:= strExCode;
		MemPtnKasan.FieldByName ('strNameSimpleSrc').AsString	:= GetFld('Nmk').AsString;
		MemPtnKasan.Post();
	end;

end;
*)
//<256> DEL Ed
//**********************************************************************
//*		Proccess	:	検索EXP ArrowClick共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/17
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.ArrowClick(Sender: TObject);
var
    lvExpSend:  rcJNTExpSend;   //
    lvExpRecv:  rcJNTExpRecv;   //
    iExpRtn:    Integer;        //
    CompName:   String;         //
    i : Integer;
begin

    CompName    :=  TComponent(Sender).name;

    fnJNTExpMakeParam(@lvExpSend);   //ﾊﾟﾗﾒｰﾀ初期設定
    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;       //MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;           //TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;

    if (CompName = 'f0NGCode') or  (CompName = 'f0TGCode') then
    begin
        lvExpSend.MasterKbn     :=  22;         //マスタ区分＝
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
        lvExpSend.PatternNo     :=  1;                  //マスタ区分＝
        lvExpSend.TBarNM        :=  Jituzai_LLabel_GCode.Caption + '検索ｴｸｽﾌﾟﾛｰﾗ'; //
        lvExpSend.TableName     :=  'MTOKUI';           //
        lvExpSend.TrRootCaption :=  Jituzai_LLabel_GCode.Caption;
        lvExpSend.WhereStr      :=  ' MTOKUI.RDelKBN = 0 and MTOKUI.SumKBN = ' + intToStr(Root_PMTab.Items.Selected)
                                    + ' and MTOKUI.TemplateKbn = 0';       // <112>
    end
    else if Copy(CompName,1,9) =  'f3TBrCode'  then
    begin
        i := StrToInt(Copy(CompName,10,2));
        lvExpSend.MasterKbn     :=  m_arAdoptInfo_Tbr [i].nMasterDivision;                 //マスタ区分＝
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
        lvExpSend.PatternNo     :=  1;                  //マスタ区分＝
        lvExpSend.TBarNM        :=  m_arAdoptInfo_Tbr [i].strDescription + '検索ｴｸｽﾌﾟﾛｰﾗ'; //
        lvExpSend.TableName     :=  'MMEISHO';           //
        lvExpSend.TrRootCaption :=  m_arAdoptInfo_Tbr [i].strDescription;
        lvExpSend.WhereStr      :=  ' RDelKbn = 0 and SETNM = ' + IntToStr(m_arAdoptInfo_Tbr [i].nMasterDivision);
    end
    else if Copy(CompName,1,9) =  'f3SBrCode'  then
    begin
        i := StrToInt(Copy(CompName,10,2));
        lvExpSend.MasterKbn     :=  m_arAdoptInfo_Sbr [i].nMasterDivision;                 //マスタ区分＝
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
        lvExpSend.PatternNo     :=  1;                  //マスタ区分＝
        lvExpSend.TBarNM        :=  m_arAdoptInfo_Sbr [i].strDescription + '検索ｴｸｽﾌﾟﾛｰﾗ'; //
        lvExpSend.TableName     :=  'MMEISHO';           //
        lvExpSend.TrRootCaption :=  m_arAdoptInfo_Sbr [i].strDescription;
        lvExpSend.WhereStr      :=  ' RDelKbn = 0 and SETNM = ' + IntToStr(m_arAdoptInfo_Sbr [i].nMasterDivision);
    end
    else if Copy(CompName,1,8) =  'f2SgCode'  then
    begin
        i := StrToInt(Copy(CompName,9,2));
        lvExpSend.MasterKbn     :=  m_arAdoptInfo_Seg [i].nMasterDivision;                 //マスタ区分＝
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
        lvExpSend.PatternNo     :=  1;                  //マスタ区分＝
        lvExpSend.TBarNM        :=  m_arAdoptInfo_Seg [i].strDescription + '検索ｴｸｽﾌﾟﾛｰﾗ'; //
//        lvExpSend.WhereStr      :=  ' MTOKUI.RDelKbn = 0 and MTOKUI.Masterkbn = ' + IntToStr(m_arAdoptInfo_Seg [i].nMasterDivision); // <146>削除
        lvExpSend.TableName     :=  'HOJYOMA';           //
        lvExpSend.TrRootCaption :=  m_arAdoptInfo_Seg [i].strDescription;
        lvExpSend.WhereStr      :=  ' RDelKbn = 0 and SumKbn = 0';  //<188>
    end
    else if (CompName = 'f0GYCode') then
    begin
        lvExpSend.MasterKbn     :=  ucGyosyu;         //マスタ区分＝
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
        lvExpSend.PatternNo     :=  1;                  //マスタ区分＝
        lvExpSend.TBarNM        :=  f0GYLab.Caption + '検索ｴｸｽﾌﾟﾛｰﾗ'; //
        lvExpSend.TableName     :=  'MMEISHO';           //
        lvExpSend.TrRootCaption :=  f0GYLab.Caption;
    end;
    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;

    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
        if Sender is TMNumEdit then
           TMNumEdit(MJSFindCtrl(Self,CompName )).value := StrToFloat(lvExpRecv.GCode)
        else if Sender is TMTxtEdit then
           TMTxtEdit(MJSFindCtrl(Self,CompName )).Text := lvExpRecv.GCode;

        if Copy(CompName,1,9) =  'f3TBrCode'  then
        begin
            i := StrToInt(Copy(CompName,10,2));
            TMLabel  (MJSFindCtrl(Self, 'f3TBrName' + IntToStr(i))).Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,1,9) =  'f3SBrCode'  then
        begin
            i := StrToInt(Copy(CompName,10,2));
            TMLabel  (MJSFindCtrl(Self, 'fSSBrName' + IntToStr(i))).Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,1,8) =  'f2SgCode'  then
        begin
            i := StrToInt(Copy(CompName,9,2));
            TMLabel  (MJSFindCtrl(Self, 'f2SgName' + IntToStr(i))).Caption := lvExpRecv.NMK;
        end
        else if (CompName = 'f0GYCode') then
        begin
            f0GYName.Caption := lvExpRecv.NMK;   // 情報取得
        end;

        fnCngCodeProperty(True);

        MjsDispCtrl.MjsSetFocus(Self, CompName); //<229>

        keybd_event(VK_RETURN, 0, 0, 0);         //Enter ｷｰのｴﾐｭﾚｲﾄ

		abort;
    end;
end;

//**********************************************************************
//*		Proccess	:	登録ＮＯ再付番
//*		Name		:	N.Nabe
//*		Date		:	2000/11/27
//*		Parameter	:	ParentCode		:	再付番する親の外部ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP004001f.AgainEntNoSet(ParentCode: Extended): Boolean;
var
	DmqTreeSelect	:	TMQuery;
	DmqTreeUpdate	:	TMQuery;
	iCount			:	Integer;
begin
	iCount	:=	1;

	DmqTreeSelect := TMQuery.Create(Self );					//	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTreeSelect );	//	DBとMQueryの接続
	gfnJNTSELSetDbName(DmqTreeSelect, dbCorp_Select);		//<D10>

	DmqTreeUpdate := TMQuery.Create(Self );					//	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTreeUpdate );	//	DBとMQueryの接続
	gfnJNTSELSetDbName(DmqTreeUpdate, dbCorp_Select);		//<D10>

	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	// -----<MHIS> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<MHIS> Add-Ed-----

	with DmqTreeSelect do
	begin
		Close ();
		SQL.Clear;
		SQL.ADD ('SELECT MasterKbn, SumNCode, BasedNCode FROM HojyoTree ');
		SQL.ADD ('WHERE MasterKbn = :MasterKbn AND SumNCode = :SakiGCode ');
		SQL.ADD ('ORDER BY EntNo');
		ParamByName('MasterKbn').AsInteger	:=	ucTORIHIKI;
//<256> DEL		ParamByName('SakiGCode').AsFloat	:=	ParentCode;
		ParamByName('SakiGCode').AsString	:=	FormatFloat('0',ParentCode);  //<256> ADD
		Open ();
		while (not EOF) do
		begin
			with DmqTreeUpdate do
			begin
				Close ();
				SQL.Clear;
				SQL.ADD('UPDATE HojyoTree SET EntNo = :EntryNo ');
				SQL.ADD('WHERE MasterKbn = :MasterKbn and ');
				SQL.ADD('SumNCode = :SakiGCode and BasedNCode = :MotoGCode');

{
                Showmessage('1:' + IntToStr(DmqTreeSelect.GetFLD('MasterKbn').AsInteger));
                Showmessage('2:' + IntToStr(DmqTreeSelect.GetFLD('SumNCode').AsInteger));
                Showmessage('3:' + IntToStr(DmqTreeSelect.GetFLD('BasedNCode').AsInteger));
                Showmessage('4:' + FormatFloat('#',iCount * -100));
}

				ParamByName('MasterKbn').AsInteger	:=	DmqTreeSelect.GetFLD('MasterKbn').AsInteger;
				ParamByName('SakiGCode').AsInteger	:=	DmqTreeSelect.GetFLD('SumNCode'  ).AsInteger;
				ParamByName('MotoGCode').AsInteger	:=	DmqTreeSelect.GetFLD('BasedNCode').AsInteger;

				ParamByName('EntryNo').AsInteger	:=	iCount * -100;

				if (ExecSQL = False) then
				begin
					ErrorMessageDsp(DmqTreeUpdate);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
//<MHIS>			DmqTreeUpdate.Close;
//<MHIS>			DmqTreeUpdate.Free;
					result := False;
					Exit;
				end;

				MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

				gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
			end;

			iCount	:=	iCount + 1;

			NEXT;
		end;
	end;
//<MHIS>	DmqTreeSelect.Close;
//<MHIS>	DmqTreeSelect.Free;

	with DmqTreeUpdate do
	begin
		Close ();
		SQL.Clear;
		SQL.ADD ('UPDATE HojyoTree SET EntNo = EntNo * -1 ');
		SQL.ADD ('WHERE MasterKbn = :MasKbn AND SumNCode = :SakiGCode and EntNo < 0');		// 2003/11/19

		ParamByName ('MasKbn'	).AsInteger	:=	ucTORIHIKI;
//<256> DEL		ParamByName ('SakiGCode').AsFloat	:=	ParentCode;
		ParamByName ('SakiGCode').AsString	:=	FormatFloat('0',ParentCode);  //<256> ADD

		if (ExecSQL = False) then
		begin
			ErrorMessageDsp(DmqTreeUpdate);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
//<MHIS>	DmqTreeUpdate.Close;
//<MHIS>	DmqTreeUpdate.Free;
			result := False;
			Exit;
		end;

		MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

		gbHojyoTree2Flag	:=	True;	// 加算体系２更新ﾌﾗｸﾞＯＮ
	end;

	// -----<MHIS> Add-St-----
	finally
		// finallyに入れた。そのため、↑の論理でClose、Freeはコメントにした。
		DmqTreeSelect.Close;
		DmqTreeSelect.Free;
		DmqTreeUpdate.Close;
		DmqTreeUpdate.Free;

		SessionPractice(C_ED_PROCESS);
	end;
	// -----<MHIS> Add-Ed-----

	result := True;
end;

//**********************************************************************
//*		Proccess	:	マスタ基本情報読み込み
//*		Name		:	N.Nabe
//*		Date		:	2000/11/27
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.fnMasterInfoRead();
var
	QueryMaster		: TMQuery;
	QueryFree		: TMQuery;
    dqMasterInfo	: TMQuery;
    i : Integer;
	urSegSaiyo		: array[1..10] of Integer;
    lvMKBN          : Integer;
begin
	QueryMaster := TMQuery.Create(Self );					//	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryMaster );		//	DBとMQueryの接続
	gfnJNTSELSetDbName(QueryMaster, dbCorp_Select);		//<D10>

	dqMasterInfo	:= TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterInfo);							// DBとMQueryの接続
	gfnJNTSELSetDbName(dqMasterInfo, dbCorp_Select);		//<D10>

	QueryFree := TMQuery.Create( Self );					//	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryFree );		//	DBとMQueryの接続
	gfnJNTSELSetDbName(QueryFree, dbCorp_Select);		//<D10>

	MasterInfo_DMemData.Close;
	MasterInfo_DMemData.Open;
	MasterInfo_DMemData.Append;

	try

		// MasterInfo情報
		with QueryMaster do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName, ');
			SQL.ADD ('GHojyoName, ');
			SQL.ADD ('CodeDigit, ');
			SQL.ADD ('CodeAttr ');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = ' + IntToStr(ucTORIHIKI));
			Open ();
		end;


		// 情報SET
		// 名称変更
		MasterInfo_DMemDataCodeDigit.AsInteger := QueryMaster.GetFld('CodeDigit').AsInteger;
		MasterInfo_DMemDataCodeAttr.AsInteger  := QueryMaster.GetFld('CodeAttr').AsInteger;

        MasterInfo_DMemDataJHojyoName.AsString := QueryMaster.GetFld('JHojyoName').AsString;   //<125>

// ↓↓↓<PRN>
        m_nCurrentCodeAttr  :=  QueryMaster.GetFld('CodeAttr').AsInteger;
        m_nCurrentCodeDigit :=  QueryMaster.GetFld('CodeDigit').AsInteger;
// ↑↑↑<PRN>

        Jituzai_LLabel_GCode.Caption := '';
        Jituzai_LLabel_GCode.Caption :=  QueryMaster.GetFld('JHojyoName').AsString + 'コード';

		MasterInfo_DMemData.Post;
		// コード桁数・属性設定
		Jituzai_DdxDBGridGCode.MaxLength := QueryMaster.GetFld('CodeDigit').AsInteger;
//<KSN> ADD St
        Lbl_KasanParent.Caption := '合計' + QueryMaster.FieldByName ('JHojyoName').AsString;
		Kasan_Child_DBGridGCode.MaxLength := QueryMaster.GetFld('CodeDigit').AsInteger;
//<KSN> ADD Ed
		if QueryMaster.GetFld('CodeAttr').AsInteger = 2 then						// フリー
		begin
			Jituzai_DdxDBGridGCode.Alignment       := taLeftJustify;
			Jituzai_DdxDBGridGCode.EditAlignment   := taLeftJustify;
            Jituzai_DdxDBGridGCode.ImeMode         := imClose; //<200>
//<KSN> ADD St
            // 加算先(親)グリッド
			Kasan_Parent_DBGridGCode.Alignment       := taLeftJustify;
			Kasan_Parent_DBGridGCode.EditAlignment   := taLeftJustify;
            Kasan_Parent_DBGridGCode.ImeMode         := imClose;
            // 加算元(子)グリッド
			Kasan_Child_DBGridGCode.Alignment       := taLeftJustify;
			Kasan_Child_DBGridGCode.EditAlignment   := taLeftJustify;
            Kasan_Child_DBGridGCode.ImeMode         := imClose;
//<KSN> ADD Ed

			f0NGCode.Visible		   := False;
			f0TGCode.Visible		   := True;
			f0TGCode.MaxLength := QueryMaster.GetFld('CodeDigit').AsInteger;
            f0TGCode.ImeMode   := imClose; //<200>
            f0TGCode.InputAttr := iaFree;  //<200>
		end
		else																		// 数字
		begin
			Jituzai_DdxDBGridGCode.Alignment       := taRightJustify;
			Jituzai_DdxDBGridGCode.EditAlignment   := taRightJustify;
            Jituzai_DdxDBGridGCode.ImeMode         := imDisable; //<200>
//<KSN> ADD St
            // 加算先(親)グリッド
			Kasan_Parent_DBGridGCode.Alignment       := taRightJustify;
			Kasan_Parent_DBGridGCode.EditAlignment   := taRightJustify;
            Kasan_Parent_DBGridGCode.ImeMode         := imDisable;
            // 加算元(子)グリッド
			Kasan_Child_DBGridGCode.Alignment       := taRightJustify;
			Kasan_Child_DBGridGCode.EditAlignment   := taRightJustify;
            Kasan_Child_DBGridGCode.ImeMode         := imDisable;
//<KSN> ADD Ed

			f0NGCode.Visible		   := True;
			f0TGCode.Visible		   := False;
			f0NGCode.Digits			   := QueryMaster.GetFld('CodeDigit').AsInteger;
			f0NGCode.TabOrder		   := 0;

			if	QueryMaster.GetFld('CodeAttr').AsInteger = 1 then
			begin
				f0NGCode.FormatStr	:= StringOfChar ('0', QueryMaster.GetFld('CodeDigit').AsInteger);
			end
			else
			begin
				f0NGCode.FormatStr	:= '';
			end;
		end;

		with QueryFree do
		begin
            f0GYLab.Enabled := False;
            f0GYCode.Enabled  := False;

			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT UseKbn,JHojyoName,CodeDigit,CodeAttr ');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = ' + IntToStr(ucGYOSYU));
			Open ();
            if not Eof then
            begin
                if FieldByname('USEKBN').asInteger <> 0 then
                begin
                    f0GYLab.Enabled    := True;
                    f0GYCode.Enabled   := True;
                    uvGYCodeAttr       := FieldByName ('CodeAttr').AsInteger;
                    uvGYCodeDigit      := FieldByName ('CodeDigit').AsInteger;
                    //ラベル名称
                    f0GYLab.Caption    := FieldByName ('JHojyoName').AsString;
                    f0GYCode.MaxLength := FieldByName ('CodeDigit').AsInteger;
                    //属性
                    if FieldByName ('CodeAttr').AsInteger = 0 then
                    begin
                        f0GYCode.InputAttr := iaZeroSup;
                        f0GYCode.ImeMode   := imDisable;
                    end
                    else if FieldByName ('CodeAttr').AsInteger = 1 then
                    begin
                        f0GYCode.InputAttr := iaZeroPad;
                        f0GYCode.ImeMode   := imDisable;
                    end
                    else if FieldByName ('CodeAttr').AsInteger = 2 then
                    begin
                        f0GYCode.InputAttr := iaFree;
                        f0GYCode.ImeMode   := imClose;
                    end;
                end;
            end;
        end;

        for i := 1 to  10 do
        begin
            urSegSaiyo[i]                           := 0;
    		// セグメント
            m_arAdoptInfo_Seg [i].nMasterDivision	:= 0;
            m_arAdoptInfo_Seg [i].nAdoption      	:= 0;
            m_arAdoptInfo_Seg [i].nCodeDigit    	:= 0;
            m_arAdoptInfo_Seg [i].nCodeAttribute	:= 0;
            m_arAdoptInfo_Seg [i].strDescription	:= '';

    		// 得意先分類
            m_arAdoptInfo_TBr [i].nMasterDivision	:= 0;
            m_arAdoptInfo_TBr [i].nAdoption      	:= 0;
            m_arAdoptInfo_TBr [i].nCodeDigit    	:= 0;
            m_arAdoptInfo_TBr [i].nCodeAttribute	:= 0;
            m_arAdoptInfo_TBr [i].strDescription	:= '';

    		// 仕入先分類
            m_arAdoptInfo_SBr [i].nMasterDivision	:= 0;
            m_arAdoptInfo_SBr [i].nAdoption      	:= 0;
            m_arAdoptInfo_SBr [i].nCodeDigit    	:= 0;
            m_arAdoptInfo_SBr [i].nCodeAttribute	:= 0;
            m_arAdoptInfo_SBr [i].strDescription	:= '';

        end;
        //i := 1;
		// セグメント採用
        with (dqMasterInfo) do
        begin
            Close;
            Sql.Clear;
            Sql.add(' Select SegUse1,SegUse2,SegUse3,SegUse4,SegUse5,'+
                    '        SegUse6,SegUse7,SegUse8,SegUse9,SegUse10'+
                    ' From SegMa '+
                    ' Where (MasterKBN = :MasKbn)');
            ParamByName('MasKbn').asInteger := ucTORIHIKI;
            Open;
            if not eof then
            begin
                for i := 1 to  10 do
                    urSegSaiyo[i]	:= FieldByName ('SegUse' + IntToStr(i)).AsInteger;
            end;
            Close;

        end;
		// セグメント
        with (dqMasterInfo) do
        begin
            Close;
            Sql.Clear;
            Sql.add(' Select MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr From MasterInfo '+
                    ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                    '   Order By MasterKBN');
            ParamByName('pSMKBN').asInteger := MASTER_SEGMENT_Str;
            ParamByName('pEMKBN').asInteger := MASTER_SEGMENT_End;
            Open;
            i := 1;
            While not eof do
            begin
                //lvMKBN := 0;
                if i > 10 then Break;
                m_arAdoptInfo_Seg [i].nMasterDivision	:= FieldByName ('MasterKBN'   ).AsInteger;
                lvMKBN := StrToInt(Copy(FieldByName ('MasterKBN').AsString,2,2));
                //採用はSegMaを考慮する
                m_arAdoptInfo_Seg [i].nAdoption        	:= urSegSaiyo[lvMKBN];
                m_arAdoptInfo_Seg [i].nCodeDigit		:= FieldByName ('CodeDigit').AsInteger;
                m_arAdoptInfo_Seg [i].nCodeAttribute	:= FieldByName ('CodeAttr' ).AsInteger;
                m_arAdoptInfo_Seg [i].strDescription	:= FieldByName ('JHojyoName').AsString;
                inc(i);
                Next;
            end;

        end;
		// セグメント名称セット
        for i := 1 to  10 do
        begin
            //ラベル名称
            TMLabel(MJSFindCtrl(Self, 'f2SegLab' + IntToStr(i))).Caption := m_arAdoptInfo_Seg [i].strDescription;

            TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).MaxLength := m_arAdoptInfo_Seg [i].nCodeDigit;
            //属性
            if m_arAdoptInfo_Seg [i].nCodeAttribute = 0 then
            begin
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputAttr := iaZeroSup;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).ImeMode   := imDisable;
//↓<SZERO>0諸口を表現するための設定です
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlag		:= True;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlagEnabled	:= True;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Zero				:= True;
//↑<SZERO>
            end
            else if m_arAdoptInfo_Seg [i].nCodeAttribute = 1 then
            begin
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputAttr := iaZeroPad;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).ImeMode   := imDisable;
//↓<SZERO>0諸口を表現するための設定です
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlag		:= True;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputFlagEnabled	:= True;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Zero				:= True;
//↑<SZERO>
            end
            else if m_arAdoptInfo_Seg [i].nCodeAttribute = 2 then
            begin
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).InputAttr := iaNone;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).ImeMode   := imClose;
            end;

            //採用
            if m_arAdoptInfo_Seg [i].nAdoption = 0 then
            begin
                TMLabel(MJSFindCtrl(Self, 'f2SegLab' + IntToStr(i))).Visible   := False;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Visible := False;
            end
            else
            begin
                TMLabel(MJSFindCtrl(Self, 'f2SegLab' + IntToStr(i))).visible   := True;
                TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Visible := True;
            end;

        end;

        i := 1;
		// 得意先分類
        with (dqMasterInfo) do
        begin
            Close;
            Sql.Clear;
            Sql.add(' Select MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr From MasterInfo '+
                    ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                    '   Order By MasterKBN');
            ParamByName('pSMKBN').asInteger := MASTER_TBunrui_Str;
            ParamByName('pEMKBN').asInteger := MASTER_TBunrui_End;
            Open;
            While not eof do
            begin
                if i > 10 then Break;
                m_arAdoptInfo_TBr [i].nMasterDivision	:= FieldByName ('MasterKBN'   ).AsInteger;
                m_arAdoptInfo_TBr [i].nAdoption			:= FieldByName ('UseKbn'   ).AsInteger;
                m_arAdoptInfo_TBr [i].nCodeDigit		:= FieldByName ('CodeDigit').AsInteger;
                m_arAdoptInfo_TBr [i].nCodeAttribute	:= FieldByName ('CodeAttr' ).AsInteger;
                m_arAdoptInfo_TBr [i].strDescription	:= FieldByName ('JHojyoName').AsString;
                inc(i);
                Next;
            end;

        end;
		// 得意先分類名称セット
        for i := 1 to  10 do
        begin
            //ラベル名称
            TMLabel(MJSFindCtrl(Self, 'f3TBrLab' + IntToStr(i))).Caption := m_arAdoptInfo_TBr [i].strDescription;

            //属性
            if m_arAdoptInfo_TBr [i].nCodeAttribute = 0 then
                TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).InputAttr := iaZeroSup
            else if m_arAdoptInfo_TBr [i].nCodeAttribute = 1 then
                TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).InputAttr := iaZeroPad
            else if m_arAdoptInfo_TBr [i].nCodeAttribute = 2 then
                TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).InputAttr := iaNone;

            //桁数
            TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).MaxLength := m_arAdoptInfo_TBr [i].nCodeDigit;
            if m_arAdoptInfo_TBr [i].nAdoption = 0 then
            begin
                TMLabel(MJSFindCtrl(Self, 'f3TBrLab' + IntToStr(i))).Visible    := False;
                TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Visible := False;
            end
            else
            begin
                TMLabel(MJSFindCtrl(Self, 'f3TBrLab' + IntToStr(i))).visible    := True;
                TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Visible := True;
            end;

        end;

        i := 1;
		// 仕入先分類
        with (dqMasterInfo) do
        begin
            Close;
            Sql.Clear;
            Sql.add(' Select MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr From MasterInfo '+
                    ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                    '   Order By MasterKBN');
            ParamByName('pSMKBN').asInteger := MASTER_SBunrui_Str;
            ParamByName('pEMKBN').asInteger := MASTER_SBunrui_End;
            Open;
            While not eof do
            begin
                if i > 10 then Break;
                m_arAdoptInfo_SBr [i].nMasterDivision	:= FieldByName ('MasterKBN'   ).AsInteger;
                m_arAdoptInfo_SBr [i].nAdoption			:= FieldByName ('UseKbn'   ).AsInteger;
                m_arAdoptInfo_SBr [i].nCodeDigit		:= FieldByName ('CodeDigit').AsInteger;
                m_arAdoptInfo_SBr [i].nCodeAttribute	:= FieldByName ('CodeAttr' ).AsInteger;
                m_arAdoptInfo_SBr [i].strDescription	:= FieldByName ('JHojyoName').AsString;
                inc(i);
                Next;
            end;
        end;
		// 仕入先名称セット
        for i := 1 to  10 do
        begin
            //ラベル名称
            TMLabel(MJSFindCtrl(Self, 'f3SBrLab' + IntToStr(i))).Caption := m_arAdoptInfo_SBr [i].strDescription;

            //属性
            if m_arAdoptInfo_SBr [i].nCodeAttribute = 0 then
                TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).InputAttr := iaZeroSup
            else if m_arAdoptInfo_SBr [i].nCodeAttribute = 1 then
                TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).InputAttr := iaZeroPad
            else if m_arAdoptInfo_SBr [i].nCodeAttribute = 2 then
                TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).InputAttr := iaNone;

            //桁数
            TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).MaxLength := m_arAdoptInfo_SBr [i].nCodeDigit;
            if m_arAdoptInfo_SBr [i].nAdoption = 0 then
            begin
                TMLabel(MJSFindCtrl(Self, 'f3SBrLab' + IntToStr(i))).Visible    := False;
                TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Visible := False;
            end
            else
            begin
                TMLabel(MJSFindCtrl(Self, 'f3SBrLab' + IntToStr(i))).visible    := True;
                TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Visible := True;
            end;

        end;

		// 和暦西暦区分取得
		with QueryFree do
		begin
			m_iRekiKbn := 0;
			m_iMailKbn := 0;

			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('ComKbn3 ');
			SQL.ADD ('From DTMAIN_MAS ');
			Open ();

			if EOF = False then
        		m_iMailKbn := GetFld('ComKbn3').AsInteger;

			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('YearKbn,  DTName7 ');
			SQL.ADD ('From DTMAIN ');
			Open ();

			// 和暦西暦設定
			FormatSettings.ShortDateFormat := 'yyyy/mm/dd';							// 西暦
			if EOF = False then
			begin
				m_iRekiKbn := GetFld('YearKbn').AsInteger;
				gstErrorStr := GetFld('DTName7').AsString;
				if GetFld('YearKbn').AsInteger = 0 then
				begin
//					ShortDateFormat := 'gggee/mm/dd';							// 和暦
					f0StartDate.DateFormat		:=	TDateFormatType(1);
					f0EndDate.DateFormat		:=	TDateFormatType(1);
//<2750>↓
//					f0StartDate.Gengou			:=	'H';
//					f0EndDate.Gengou			:=	'H';
					f0StartDate.Gengou			:=	'R';
					f0EndDate.Gengou			:=	'R';
//<2750>↑
                end
				else
				begin
//					ShortDateFormat := 'yyyy/mm/dd';							// 西暦
					f0StartDate.DateFormat		:=	TDateFormatType(0);
					f0EndDate.DateFormat		:=	TDateFormatType(0);
					f0StartDate.Gengou			:=	#0;
					f0EndDate.Gengou			:=	#0;
				end;
			end;
		end;
	finally
// 2012/07/12 ADD St
		QueryMaster.Close();
		QueryFree.Close();
    	dqMasterInfo.Close();
// 2012/07/12 ADD Ed
		QueryMaster.Free;
		QueryFree.Free;
    	dqMasterInfo.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	付箋Clickｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.FusenClick(Sender: TObject);
begin
	// 付箋貼り付け
{	if Sender = Jituzai_ImageRaised_FusenRed then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := True;
		Jituzai_ImageRaised_FusenRed.Visible := False;
		Jituzai_ImageLowered_FusenGreen.Visible := False;
		Jituzai_ImageRaised_FusenGreen.Visible := True;
		Jituzai_ImageLowered_FusenBlue.Visible := False;
		Jituzai_ImageRaised_FusenBlue.Visible := True;
		Jituzai_ImageLowered_FusenOrange.Visible := False;
		Jituzai_ImageRaised_FusenOrange.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := True;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Jituzai_ImageRaised_FusenGreen then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := False;
		Jituzai_ImageRaised_FusenRed.Visible := True;
		Jituzai_ImageLowered_FusenGreen.Visible := True;
		Jituzai_ImageRaised_FusenGreen.Visible := False;
		Jituzai_ImageLowered_FusenBlue.Visible := False;
		Jituzai_ImageRaised_FusenBlue.Visible := True;
		Jituzai_ImageLowered_FusenOrange.Visible := False;
		Jituzai_ImageRaised_FusenOrange.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := True;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Jituzai_ImageRaised_FusenBlue then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := False;
		Jituzai_ImageRaised_FusenRed.Visible := True;
		Jituzai_ImageLowered_FusenGreen.Visible := False;
		Jituzai_ImageRaised_FusenGreen.Visible := True;
		Jituzai_ImageLowered_FusenBlue.Visible := True;
		Jituzai_ImageRaised_FusenBlue.Visible := False;
		Jituzai_ImageLowered_FusenOrange.Visible := False;
		Jituzai_ImageRaised_FusenOrange.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := True;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Jituzai_ImageRaised_FusenOrange then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := False;
		Jituzai_ImageRaised_FusenRed.Visible := True;
		Jituzai_ImageLowered_FusenGreen.Visible := False;
		Jituzai_ImageRaised_FusenGreen.Visible := True;
		Jituzai_ImageLowered_FusenBlue.Visible := False;
		Jituzai_ImageRaised_FusenBlue.Visible := True;
		Jituzai_ImageLowered_FusenOrange.Visible := True;
		Jituzai_ImageRaised_FusenOrange.Visible := False;

		Jituzai_ETEdit_Fusen.Enabled := True;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenRed then
	begin
		Goukei_ImageLowered_FusenRed.Visible := True;
		Goukei_ImageRaised_FusenRed.Visible := False;
		Goukei_ImageLowered_FusenGreen.Visible := False;
		Goukei_ImageRaised_FusenGreen.Visible := True;
		Goukei_ImageLowered_FusenBlue.Visible := False;
		Goukei_ImageRaised_FusenBlue.Visible := True;
		Goukei_ImageLowered_FusenOrange.Visible := False;
		Goukei_ImageRaised_FusenOrange.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := True;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenGreen then
	begin
		Goukei_ImageLowered_FusenRed.Visible := False;
		Goukei_ImageRaised_FusenRed.Visible := True;
		Goukei_ImageLowered_FusenGreen.Visible := True;
		Goukei_ImageRaised_FusenGreen.Visible := False;
		Goukei_ImageLowered_FusenBlue.Visible := False;
		Goukei_ImageRaised_FusenBlue.Visible := True;
		Goukei_ImageLowered_FusenOrange.Visible := False;
		Goukei_ImageRaised_FusenOrange.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := True;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenBlue then
	begin
		Goukei_ImageLowered_FusenRed.Visible := False;
		Goukei_ImageRaised_FusenRed.Visible := True;
		Goukei_ImageLowered_FusenGreen.Visible := False;
		Goukei_ImageRaised_FusenGreen.Visible := True;
		Goukei_ImageLowered_FusenBlue.Visible := True;
		Goukei_ImageRaised_FusenBlue.Visible := False;
		Goukei_ImageLowered_FusenOrange.Visible := False;
		Goukei_ImageRaised_FusenOrange.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := True;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenOrange then
	begin
		Goukei_ImageLowered_FusenRed.Visible := False;
		Goukei_ImageRaised_FusenRed.Visible := True;
		Goukei_ImageLowered_FusenGreen.Visible := False;
		Goukei_ImageRaised_FusenGreen.Visible := True;
		Goukei_ImageLowered_FusenBlue.Visible := False;
		Goukei_ImageRaised_FusenBlue.Visible := True;
		Goukei_ImageLowered_FusenOrange.Visible := True;
		Goukei_ImageRaised_FusenOrange.Visible := False;

		Goukei_ETEdit_Fusen.Enabled := True;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	// 付箋はがし
	if Sender = Jituzai_ImageLowered_FusenRed then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := False;
		Jituzai_ImageRaised_FusenRed.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := False;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Jituzai_ImageLowered_FusenGreen then
	begin
		Jituzai_ImageLowered_FusenGreen.Visible := False;
		Jituzai_ImageRaised_FusenGreen.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := False;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Jituzai_ImageLowered_FusenBlue then
	begin
		Jituzai_ImageLowered_FusenBlue.Visible := False;
		Jituzai_ImageRaised_FusenBlue.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := False;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Jituzai_ImageLowered_FusenOrange then
	begin
		Jituzai_ImageLowered_FusenOrange.Visible := False;
		Jituzai_ImageRaised_FusenOrange.Visible := True;

		Jituzai_ETEdit_Fusen.Enabled := False;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenRed then
	begin
		Goukei_ImageLowered_FusenRed.Visible := False;
		Goukei_ImageRaised_FusenRed.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := False;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenGreen then
	begin
		Goukei_ImageLowered_FusenGreen.Visible := False;
		Goukei_ImageRaised_FusenGreen.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := False;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenBlue then
	begin
		Goukei_ImageLowered_FusenBlue.Visible := False;
		Goukei_ImageRaised_FusenBlue.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := False;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenOrange then
	begin
		Goukei_ImageLowered_FusenOrange.Visible := False;
		Goukei_ImageRaised_FusenOrange.Visible := True;

		Goukei_ETEdit_Fusen.Enabled := False;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;}
end;

//**********************************************************************
//*		Proccess	:	実在Grid OnKeyPressｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridKeyPress(Sender: TObject;
  var Key: Char);
//<KSN3> ADD St
var
    dbGrid : TdxDBGrid;
//<KSN3> ADD Ed
begin
    dbGrid := TdxDBGrid(Sender);  //<KSN3> ADD
//<KSN3> DEL	if  (Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE) then
    if (dbGrid.FocusedField.FieldName = 'GCode') then  //<KSN3> ADD
	begin
		if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
		begin
//        	showmessage('['+Key+']');
			if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) and (Key <> #13) then
			begin                          // #8=BackSpace   #27=Esc  #9=Tab #13=Enter
				Beep ();
				Abort;
			end;
		end;
	end;
// <140>↓
                                            // 得意先・仕入先ｶﾗﾑ
    if (Jituzai_DdxDBGrid.FocusedColumn = COL_TOKUI) or
        (Jituzai_DdxDBGrid.FocusedColumn = COL_SIIRE) or
        (Jituzai_DdxDBGrid.FocusedColumn = COL_SHOJYO1) or
        (Jituzai_DdxDBGrid.FocusedColumn = COL_SHOJYO2) or
		(Jituzai_DdxDBGrid.FocusedColumn = COL_SHOJYO3) then     //COL_SHOJYO3を追加
    begin
        if Key <> ' ' then                  // ｽﾍﾟｰｽｷｰ以外は抜ける
        begin
            Abort;
            Exit;
        end;

        ChangeSaiyo();                      // 採用情報変更

    end;
// <140>↑
end;

//**********************************************************************
//*		Proccess	:	実在Grid OnGetTextｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(数値属性の時に必要)
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridGCodeGetText(Sender: TObject;
  ANode: TdxTreeListNode; var AText: String);
var
	strFormat	:	String;
begin
	if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
	begin
		case (MasterInfo_DMemDataCodeAttr.AsInteger) of
			0:  strFormat   := '%'  + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
			1:  strFormat   := '%.' + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
		end;

		if  (AText <> '') then
			AText   := Format (strFormat, [StrToInt64 (Trim (AText))]);
	end
end;

//**********************************************************************
//*		Proccess	:	合計Grid OnGetTextｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(数値属性の時に必要)
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.Goukei_DdxDBGridGCodeGetText(Sender: TObject;
  ANode: TdxTreeListNode; var AText: String);
var
	strFormat	:	String;
begin
	if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
	begin
		case (MasterInfo_DMemDataCodeAttr.AsInteger) of
			0:  strFormat   := '%'  + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
			1:  strFormat   := '%.' + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
		end;

		if  (AText <> '') then
			AText   := Format (strFormat, [StrToInt64 (Trim (AText))]);
	end
end;

//**********************************************************************
//*		Proccess	:	ファイル出力に必要なTitle･Filed設定
//*		Name		:	N.Nabe
//*		Date		:	2000/1/31
//*		Parameter	:	sTitle	:	CreateされたTStringList(ﾀｲﾄﾙ用)
//*						sMemFld	:	CreateされたTStringList(ﾌｨｰﾙﾄﾞ用)
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP004001f.SetFileOut(iSelect : Integer; var sTitle: TStringList; var sMemFld: TStringList);
begin
end;

//**********************************************************************
//*		Proccess	:	ｽﾄｱﾄﾞのSQL文作成
//*		Name		:	H.Endo
//*		Date		:	2001/2/15
//*		Parameter	:	TAN_CD		:	担当者ｺｰﾄﾞ
//*						TAN_NAME	:	担当者名
//*						FLAG		:	担当者選択なし(-1以外:True/-1:False)
//*		Return		:	作成したSQL文
//*		History		:   <143>担当者内部ｺｰﾄﾞを渡す
//**********************************************************************
//function TJNTCRP004001f.MakeSQL(TAN_CD: Integer; TAN_NAME: String; FLAG: Boolean; Proc : Integer):String;
function TJNTCRP004001f.MakeSQL(TAN_CD: Extended; FLAG: Boolean; Proc : Integer):String;
var
	sSQL		:	String;
begin
	case Proc of
		1:														// 初期処理
		begin
//			sTanCD		:=	IntToStr(TAN_CD);                   // <143>削除
			sSQL	:=	'CALL MP200010(0';
			if (FLAG) then		//	担当者選択なし
			begin
				sSQL	:=	sSQL	+ ',:TANCD'
//				sSQL	:=	sSQL	+ ',:TANCD,:TANNAME'        // <143>削除
//				sSQL	:=	sSQL	+ ','
//									+ ''+ sTanCD + ','
//									+ ''''+ TAN_NAME + '''';
			end;
			sSQL	:=	sSQL + ')';
		end;
		2:														// 諸口存在チェック
		begin
			sSQL	:=	'CALL MP200010_GetSyokuchi(510);';
		end;
		3:														// 最大内部コードの取得
		begin
			sSQL	:=	'CALL MP200010_GetMaxNCode(''HojyoMA'');';
		end;
		4:														// 終了処理
		begin
			sSQL	:=	'CALL MP200010(1);';
		end;
	end;

	Result	:=	sSQL;
end;

//**********************************************************************
//*		Proccess	:	ｴﾗｰﾒｯｾｰｼﾞ表示処理
//*		Name		:	H.Endo
//*		Date		:	2001/2/16
//*		Parameter	:	DmQuery		:	ｴﾗｰになったQuery
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP004001f.ErrorMessageDsp(DmQuery: TMQuery);
var
//↓<DOJI>
    iLoop:Integer;
    EngineErr: TEngineErr;
    iErrCode: integer;
//↑<DOJI>
begin
//↓<DOJI>
    iErrCode := 0;
    if DmQuery.EngineErrCount >= 1 then
    begin
        for iLoop := 1 to DmQuery.EngineErrCount do
        begin
            EngineErr := DmQuery.EngineErrs[iLoop - 1];
            if EngineErr.NativeError <> 0 then
            begin
                iErrCode := EngineErr.NativeError;
                break;
            end;
        end;
    end;
    case iErrCode of
        -193,-196: uvSelSys.MsgDlg(10000, 10017); // 重複ｴﾗｰ。共通ﾒｯｾｰｼﾞ
        -210:      uvSelSys.MsgDlg(10000, 10016); // ﾛｯｸｴﾗｰ。共通ﾒｯｾｰｼﾞ
        else       uvSelSys.MsgDlg( 1030,   110); // それ以外のｴﾗｰ。販売ﾒｯｾｰｼﾞ
    end;
//↑<DOJI>
{	case ComArea.m_MsgStd.GetDBCode(DmQuery) of
		1:
		begin
			//	最大登録件数をｵｰﾊﾞｰしました
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 0,1);
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		2:
		begin
			//	･･･のため削除できません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,5);
			MjsMessageBoxEx(Self,'固定体系区分が固定' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		3:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'子供が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		4:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'仕訳が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
//--- 追加 START -----
		5:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'諸口、総合計を削除する時にその他のマスタが登録済みの為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		6:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'支払予定データが存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		7:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'部署情報が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		8:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'未連結仕訳(部署or分散)が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
//--- 追加  END  -----
		else
		begin
			ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, DmQuery );
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,FALSE );
		end;
	end;
}
end;

//**********************************************************************
//*		Proccess	:	参照・更新時のｺﾝﾎﾟｰﾈﾝﾄ制御処理
//*		Name		:	N.Nabe
//*		Date		:	2001/2/2
//*		Parameter	:	Select		:	REFER(参照)･NORMAL(通常処理)･BASICONLY(基本のみ設定可能)
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP004001f.DisplayControl(Select: Integer);
begin
	case Select of
		REFER:
		begin
			//	実在Grid
			Jituzai_DdxDBGrid.Options	:=	Jituzai_DdxDBGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
			Jituzai_DdxDBGridFusen.ReadOnly			:= True;
			Jituzai_DdxDBGridGCode.ReadOnly			:= True;
			Jituzai_DdxDBGridRenChar.ReadOnly		:= True;
			Jituzai_DdxDBGridLongName.ReadOnly		:= True;
			Jituzai_DdxDBGridSimpleName.ReadOnly	:= True;
//<KSN> ADD St
            Kasan_Child_DBGridGCode.ReadOnly        := True;
			Kasan_Child_DBGrid.Options	:=	Kasan_Child_DBGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
            Kasan_Child_DBGrid.OnStartDrag := nil;
            Kasan_Child_DBGrid.OnDragDrop := nil;
            Kasan_Child_DBGrid.OnDragOver := nil;
//<KSN> ADD Ed

            Jituzai_BBitBtn_Ok.Enabled := False;
			B_Delete.Enabled	:=	False;
			BSpeedButtonSort.Visible :=	False;
//			B_Fusen.Visible     := False;
//			B_FusenBar.Visible  := False;
			VTreeView.DragMode	:=	dmManual;
//			VTreeView.PopupMenu	:=	nil;

//			Jituzai_DdxDBGrid.PopupMenu	:=	nil;

			SyosaiControl();								// 詳細画面設定
		end;
		NORMAL:
		begin
			//	実在Grid
			Jituzai_DdxDBGrid.Options	:=	Jituzai_DdxDBGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
			Jituzai_DdxDBGridFusen.ReadOnly			:= False;
			Jituzai_DdxDBGridGCode.ReadOnly			:= False;
			Jituzai_DdxDBGridRenChar.ReadOnly		:= False;
			Jituzai_DdxDBGridLongName.ReadOnly		:= False;
			Jituzai_DdxDBGridSimpleName.ReadOnly	:= False;

            Kasan_Child_DBGridGCode.ReadOnly        := False;  //<KSN> ADD

//<242> DEL			B_Delete.Enabled	     :=	False;
			BSpeedButtonSort.Visible :=	True;
            B_Fusen.Visible          := True;
			B_FusenBar.Visible       := True;
			VTreeView.DragMode	     :=	dmAutomatic;
			VTreeView.PopupMenu	     :=	PMKasantaikei;

			Jituzai_DdxDBGrid.PopupMenu	:=	PMTokui;
		end;
		BASICONLY:
		begin
			//	実在Grid
			Jituzai_DdxDBGrid.Options	:=	Jituzai_DdxDBGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
			Jituzai_DdxDBGridFusen.ReadOnly			:= False;
			Jituzai_DdxDBGridGCode.ReadOnly			:= False;
			Jituzai_DdxDBGridRenChar.ReadOnly		:= False;
			Jituzai_DdxDBGridLongName.ReadOnly		:= False;
			Jituzai_DdxDBGridSimpleName.ReadOnly	:= False;

            Kasan_Child_DBGridGCode.ReadOnly        := False;  //<KSN> ADD

			B_Delete.Enabled	     := False;
			B_Syousai.Enabled	     := False;
			BSpeedButtonSort.Visible := True;
			B_Fusen.Visible          := True;
			B_FusenBar.Visible       := True;
			VTreeView.DragMode	     := dmAutomatic;
			VTreeView.PopupMenu	     := PMKasantaikei;

			Jituzai_DdxDBGrid.PopupMenu	:=	PMTokui;

			SyosaiControl();								// 詳細画面設定
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	詳細参照制御処理
//*		Name		:	H.Endo
//*		Date		:	2000/12/19
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP004001f.SyosaiControl();
begin
//	参照
	//	実在
	//	基本情報
    PPanel_Kihon.Enabled  := False;
	//	採用情報
    PPanel_Saiyo.Enabled  := False;
	//	ｾｸﾞﾒﾝﾄ情報
    PPanel_Seg.Enabled    := False;
	//	採用情報
    PPanel_Br.Enabled     := False;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChangeNodeEx
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridChangeNodeEx(Sender: TObject);
var
    lvFlg   : Boolean;
begin
	if giReferFlag = REFER then
		exit;

	if m_AcControl = VTreeView then
		exit;

	if MemPost_Sw = 1 then
		exit;

	if gbTreeClick = True then
		exit;

    if m_bFirstFlag	= False then Exit;


	if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then	//	実在GridのｺｰﾄﾞがNullの時
	begin
		B_Delete.Enabled   := False;
		TPDelete.Enabled   := False;
		GFBlue.Enabled     := False;
		GFGreen.Enabled    := False;
		GFOrange.Enabled   := False;
		GFRed.Enabled      := False;
		B_Fusen.Enabled    := False;
		B_FusenBar.Enabled := False;

		Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;	//	ﾌｫｰｶｽのｶﾗﾑ位置を指定
	end
	else
	begin
		if JHojyoMA_DMemData.State in [dsInsert] then	// ﾃﾞｰﾀ挿入中？
		begin
			B_Delete.Enabled   := False;
			TPDelete.Enabled   := False;
			GFBlue.Enabled     := False;
			GFGreen.Enabled    := False;
			GFOrange.Enabled   := False;
			GFRed.Enabled      := False;
			B_Fusen.Enabled    := False;
			B_FusenBar.Enabled := False;
		end
		else
		begin
//<Authority> DEL            if m_cJNTArea.IsDelete = False then//削除権限がない為使用不可
            if m_JNTAuthority.IsDelete = False then//削除権限がない為使用不可  //<Authority> ADD
            begin
				B_Delete.Enabled := False;
                TPDelete.Enabled := False;
            end
            else
            begin
                if JHojyoMA_DMemData.FieldByName('SyokuchiKbn').AsInteger <> 0 then	//	実在Gridのｺｰﾄﾞが諸口の時
                begin
                    B_Delete.Enabled := fnRecordCount();
                    TPDelete.Enabled := BSpeedButtonDel.Enabled;
                end
                else
                begin
                    lvFlg := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,ucTorihiki,MasterInfo_DMemDataCodeAttr.AsInteger));
                    B_Delete.Enabled := lvFlg;
                    TPDelete.Enabled := lvFlg;
                end;
            end;
//<Authority> MOD St
{
            GFBlue.Enabled     := m_cJNTArea.IsFusen;
            GFGreen.Enabled    := m_cJNTArea.IsFusen;
            GFOrange.Enabled   := m_cJNTArea.IsFusen;
            GFRed.Enabled      := m_cJNTArea.IsFusen;
            B_Fusen.Enabled    := m_cJNTArea.IsFusen;
            B_FusenBar.Enabled := m_cJNTArea.IsFusen;
}
            GFBlue.Enabled     := m_JNTAuthority.IsFusen;
            GFGreen.Enabled    := m_JNTAuthority.IsFusen;
            GFOrange.Enabled   := m_JNTAuthority.IsFusen;
            GFRed.Enabled      := m_JNTAuthority.IsFusen;
            B_Fusen.Enabled    := m_JNTAuthority.IsFusen;
            B_FusenBar.Enabled := m_JNTAuthority.IsFusen;
//<Authority> MOD Ed
		end;
	end;

end;


//**********************************************************************
//*		Proccess	:	レコード件数取得処理
//*		Name		:	N.Nabe
//*		Date		:	2001/3/28
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP004001f.fnRecordCount():Boolean;
var
	QueryRead	:	TMQuery;
begin
	Result := False;

	QueryRead := TMQuery.Create(Self);					    //	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);	//	DBとMQueryの接続
	gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

	// 全レコード件数取得
	with QueryRead do
	begin
		try
			Close;											// 会社情報 Close
			SQL.Clear;										// SQL文 Clear
//<256> DEL			SQL.Add('SELECT Count(*) as Kensu FROM MTOKUI '+
			SQL.Add('SELECT Count(NCode) as Kensu FROM MTOKUI '+  //<256> ADD
                    ' Where RDelKbn = 0 and SyokuchiKbn = 0');
            SQL.Add(' and   TemplateKbn=0');                // <112>
			if not Open then
			begin
//				ComArea.m_MsgStd.GetMsgDB(MjsMsgRec,QueryRead);
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg,
								MjsMsgRec.sTitle,
								MjsMsgRec.icontype,
								MjsMsgRec.btntype,
								MjsMsgRec.btndef,
								MJsMsgRec.LogType);
				Exit;
			end;

			if FieldByName('Kensu').asinteger > 0 then
				Result := False
			else
				Result := True;
		finally
			Close;
			Free;
		end;
	end;
end;
//**********************************************************************
//*		Proccess	:	子供のレコード件数取得処理
//*		Name		:	N.Nabe
//*		Date		:	2001/3/28
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP004001f.fnChildCount(pNCode:Extended):Boolean;
var
	QueryRead	:	TMQuery;
begin
	//Result := False;

	QueryRead := TMQuery.Create( Self );						//	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);	//	DBとMQueryの接続
	gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

	// 全レコード件数取得
	with QueryRead do
	begin
		try
			Close;											// 会社情報 Close
			SQL.Clear;										// SQL文 Clear
			SQL.Add('SELECT MasterKbn FROM HojyoTree '+
                    ' Where MasterKbn =:MasKbn and SumNCode = :NCODE');
            ParambyName('MasKbn').asinteger := ucTorihiki;
//<256> DEL            ParambyName('NCode').asFloat    := pNCode;
            ParambyName('NCode').asString    := FormatFloat('0',pNCode);  //<256> ADD
            Open;
			if not Eof then
				Result := False
			else
				Result := True;
		finally
			Close;
			Free;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	変更確認
//*		Name		:	N.Nabe
//*		Date		:	2001/3/28
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP004001f.fnUpdateCheck(iSumKbn : Integer):Boolean;
var
	strGCode	: String;
begin
	result := False;

	if iSumKbn = 0 then
	begin
	{実在取引先}
		// 付箋情報SET
//		FusenDsp(iSumKbn, JHojyoMA_DMemDataGCode.AsString, 1);
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if f0TGCode.Text <> '' then
			begin
				if f0TGCode.Text <> JHojyoMA_DMemDataGCode.AsString then
					exit;
			end
			else
			begin
				result := True;
				exit;
			end;
		end
		else
		begin
			if f0NGCode.Value = 0 then
			begin
				if f0NGCode.InputFlag <> True then
				begin
					if JHojyoMA_DMemDataGCode.AsString <> '' then
					begin
						if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) <>
							Format ('%.16d', [Trunc (f0NGCode.AsInteger)]) then
							exit;
					end
					else
						exit;
				end
				else
				begin
					result := True;
					exit;
				end;
			end
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
				begin
					if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) <>
						Format ('%.16d', [Trunc (f0NGCode.AsInteger)]) then
						exit;
				end
				else
					exit;
			end;
		end;

		strGCode := JHojyoMA_DMemDataGCode.AsString;

		if f0RenChar.Text <> JHojyoMA_DMemDataRenChar.AsString then
			exit;

		if f0LongName.Text <> JHojyoMA_DMemDataLongName.AsString then
			exit;

		if f0SimpleName.Text <> JHojyoMA_DMemDataSimpleName.AsString then
			exit;

// <MYN> ins -s
		// 法人･個人区分
		if f0MYNKbn.Text <> JHojyoMA_DMemDataHoujinKbn.AsString then
			exit;

		// 法人･個人番号
		if (f0MYNKbn.Text = MYN_HOUJIN) then	// 法人
		begin
			if f0MYNNo.Text <> JHojyoMA_DMemDataHoujinNo.AsString then
				exit;
		end else
		if (f0MYNKbn.Text = MYN_KOJIN) then		// 個人
		begin
			if m_sSaveKojinKey <> JHojyoMA_DMemDataKojinKey.AsString then
				exit;
		end;
// <MYN> ins -e
    end;

	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if strGCode <> '' then
			strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
	end;

	result := True;
end;

//**********************************************************************
//*		Proccess	:	登録内容確認
//*		Name		:	N.Nabe
//*		Date		:	2004/09/14
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP004001f.fnDataCheck(Sender: TObject;AllChkMode: Boolean;iSumKbn : Integer):Boolean;
var
    lvCompoName : string;
	sAdr1		: String;
	sAdr2		: String;
	sZip		: String;
	iZip1		: Integer;
	iZip2		: Integer;
	iValue		: Int64;
	i			: Integer;

	retComp		: TWinControl;

    iRet		: Integer; //<230>
begin
	result := True;

    lvCompoName := TComponent(Sender).Name;

	//QueryRead := nil;

// <WF>↓
                                            // WFから取り込んだ場合
    if (m_recSinseiKey.SinForm > 0) and (m_recSinseiKey.OrgNo > 0) and (m_recSinseiKey.HisID > 0) then //<235>SwkForm → SinForm。HisIDの判定を追加。
    begin
        if not m_recOther.CanInsert then    // 画面にない項目のﾁｪｯｸでｴﾗｰだったら登録させない
        begin                               // 「申請書情報に誤りがある為登録できません。」
    		MjsMessageBoxEx(Self, MSG_WF_INPUTERR, '登録',mjWarning, mjOk, mjDefOk);
            Result := False;
            Exit;
        end;
    end;
// <WF>↑

    //===================================================================
    //取引先ｺｰﾄﾞ <176>
    //===================================================================
    if (f0NGCode.Visible = True) then
    begin
        with f0NGCode do
        begin
            if (AllChkMode) or (lvCompoName = Name) then
            begin
                if (InputFlag = True) then
                begin
                    if (Value = 0) then
                    begin
                        Result := False;
                        Abort;
                    end;
                end;
                if AllChkMode = False then Exit;
            end;
        end;
    end
    else
    begin
        with f0TGCode do
        begin
            if (AllChkMode) or (lvCompoName = Name) then
            begin
                if (Text ='') then
                begin
                    Result := False;
                    Abort;
                end;
                if AllChkMode = False then Exit;
            end;
        end;
    end;

    //　実在郵便番号
//<PST2>if (f0ZipCode1.Value <> 0) and
//<PST2>   (f0ZipCode2.Value <> 0) then
    if (f0ZipCode1.Value <> 0) then //<PST2>枝番の判定は不要。例：100-0000という郵便番号があるので。
    begin
        if (f0Address1.Text = '') and		// 住所上段下段 未入力？
           (f0Address2.Text = '') then
        begin
            iZip1 := Trunc(f0ZipCode1.Value);		// 基番 取得
            iZip2 := Trunc(f0ZipCode2.Value);		// 枝番 取得
            sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
            sAdr1 := '';
            sAdr2 := '';

            iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
            if iValue < 0 then
            begin
                Beep;
                PMTab.Items.Selected := 1;
                MjsSetFocus(Self,f0ZipCode1.Name);	// 元の場所に戻す
            	result := False;
                Abort;
            end;
        end;

		f0ZipCode2.Zero := True; //<PST2>基番が0以外のときは、枝番の0000は出す。
    end
    //↓<PST2>
    else
    begin
    	//基番が0のときは、枝番の0000は出さない。
       	f0ZipCode2.Zero := False;
    end;
    //↑<PST2>

    //===================================================================
    //ﾌﾘｶﾞﾅ
    //===================================================================
    with f0FKANA do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
            //ﾌﾘｶﾞﾅ
            if JNTSelXKanjiCheck(f0FKANA.Text) = True then
            begin
                PMTab.Items.Selected := 0;
                uvSelSys.MsgDlg(1010,20); //<259>
                MjsSetFocus(Self,f0FKANA.Name);	// 元の場所に戻す
                SetFocus;
                Result := False;
                Exit;
            end;
            if Trim(f0RenChar.Text) = '' then
            begin
// <139>
//                f0RenChar.Text := MjsKabuCut(f0FKANA.Text,4);				// 半角4文字分 取り出す
                f0RenChar.Text := MjsKabuCut(f0FKANA.Text,10);				// 半角10文字分 取り出す
            end;
            if AllChkMode = False then Exit;
        end;
    end;

    //===================================================================
    //検索名
    //===================================================================
    with f0RenChar do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
            //検索名
            if JNTSelXKanjiCheck(f0RenChar.Text) = True then
            begin
                PMTab.Items.Selected := 0;
                uvSelSys.MsgDlg(1010,20); //<259>
                MjsSetFocus(Self,f0RenChar.Name);	// 元の場所に戻す
                SetFocus;
                Result := False;
                Exit;
            end;
            if AllChkMode = False then Exit;
        end;
    end;

    with f0TelNo do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
            //電話番号
            if JNTSelXKanjiCheck(f0TelNo.Text) = True then
            begin
                PMTab.Items.Selected := 0;
                uvSelSys.MsgDlg(1010,20); //<259>
                MjsSetFocus(Self,f0TelNo.Name);	// 元の場所に戻す
                SetFocus;
                Result := False;
                Exit;
            end;
            if AllChkMode = False then Exit;
        end;
    end;

    with f0TelNo2 do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
            //電話番号2
            if JNTSelXKanjiCheck(f0TelNo2.Text) = True then
            begin
                PMTab.Items.Selected := 0;
                uvSelSys.MsgDlg(1010,20); //<259>
                MjsSetFocus(Self,f0TelNo.Name);	// 元の場所に戻す
                SetFocus;
                Result := False;
                Exit;
            end;
            if AllChkMode = False then Exit;
        end;
    end;

    with f0FAX do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
            //FAX番号
            if JNTSelXKanjiCheck(f0FAX.Text) = True then
            begin
                PMTab.Items.Selected := 0;
                uvSelSys.MsgDlg(1010,20); //<259>
                MjsSetFocus(Self,f0FAX.Name);	// 元の場所に戻す
                SetFocus;
                Result := False;
                Exit;
            end;
            if AllChkMode = False then Exit;
        end;
    end;

// <MYN> ins -s
	// 法人･個人区分
    with f0MYNKbn do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
			if (not ((f0MYNKbn.Text = '0') or (f0MYNKbn.Text = '1') )) and
			   (m_KbnEnterFirst = False) then
    	    begin
        	    PMTab.Items.Selected := 0;
                MessageDlg('入力に誤りがあります', mtWarning, [mbOk], 0);

	            MjsSetFocus(Self, f0MYNKbn.Name);	// 元の場所に戻す
    	        SetFocus;
        	    Result := False;
            	Exit;
            end;

            if AllChkMode = False then Exit;
        end;
    end;
// <MYN> ins -e

    // 開始適用期間
    // 日付にｴﾗｰがないか？
    with f0StartDate do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
        	{↓<233>
            iValue := Trunc(f0StartDate.Value);
            if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then
            begin
                Beep;
                PMTab.Items.Selected := 0;
                MjsSetFocus(Self,f0StartDate.Name);	// 元の場所に戻す
                Abort;
            end;
            ↑<233>}

            // 新元号の修正
//<KAIGG4>	gfnValidDate(TMDateEdit(Sender)); //<KAIGG3>
			gfnValidDate(TMDateEdit(f0StartDate)); //<KAIGG4>

            //↓<233>
            if f0StartDate.Value <> 0 then
            begin
                if not MjsIntYMDChk(MjsDateToInt8(f0StartDate.AsDateTime)) then
                begin
                    Beep;
                    PMTab.Items.Selected := 0;
                    MjsSetFocus(Self,f0StartDate.Name);	// 元の場所に戻す
                    Abort;
                end;
            end;
            //↑<233>
            if AllChkMode = False then Exit;
        end;
    end;


    // 終了適用期間
    // 日付にｴﾗｰがないか？
    with f0EndDate do
    begin
        if (AllChkMode) or (lvCompoName = Name) then
        begin
        	{↓<233>
            iValue := Trunc(f0EndDate.Value);
            if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then
            begin
                Beep;
                PMTab.Items.Selected := 0;
                MjsSetFocus(Self,f0EndDate.Name);	// 元の場所に戻す
                Abort;
            end;
            ↑<233>}

            // 新元号の修正
//<KAIGG4>	gfnValidDate(TMDateEdit(Sender)); //<KAIGG3>
			gfnValidDate(TMDateEdit(f0EndDate)); //<KAIGG4>

            //↓<233>
            if f0EndDate.Value <> 0 then
            begin
                if not MjsIntYMDChk(MjsDateToInt8(f0EndDate.AsDateTime)) then
                begin
                    Beep;
                    PMTab.Items.Selected := 0;
                    MjsSetFocus(Self,f0EndDate.Name);	// 元の場所に戻す
                    Abort;
                end;
            end;
            //↑<233>
            if AllChkMode = False then Exit;
        end;
    end;

//↓<2668>
	//コピーボタン押下後はTMQueryがCloseされている。このとき、State=dsInactive)
	if not (MTOKUI_DMQuery.State = dsInactive) then
	begin
//↑<2668>
	    //↓<230>
    	if AllChkMode then
    	begin
	        // 【販売】適用期間外に伝票が存在するかチェックするストアドを実行する

			// グループ会計子社は全社DBへの接続とする
	        if (m_SyncMaster.m_flgGrpCorp = 1) then
	        begin
//<D10>			MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, SPDenChkSEL);
				gfnJNTSELSetDbName(SPDenChkSEL, m_SyncMaster.m_cPDBSelect);		//<D10>
	        end
	        else
	        begin
//<D10>			MDataModule.SetDBInfoToSProc(dbCorp_Select, SPDenChkSEL);
				gfnJNTSELSetDbName(SPDenChkSEL, dbCorp_Select);		//<D10>
	        end;

	        with SPDenChkSEL do
	        begin
		         ParamByName('@NCODE').asFloat				:= JHojyoMA_DMemDataNCode.asFloat;

	            iValue := Trunc(f0StartDate.Value);
	            if iValue <> 0 then
	            begin
		            ParamByName('@TSTARTDATE').AsDateTime	:= f0StartDate.AsDateTime;
	            end
	            else
	            begin
		            ParamByName('@TSTARTDATE').AsDateTime	:= m_cJNTArea.getDefDate(1);
	            end;

	            iValue := Trunc(f0EndDate.Value);
	            if iValue <> 0 then
	            begin
		            ParamByName('@TENDDATE').AsDateTime		:= f0EndDate.AsDateTime;
	            end
	            else
	            begin
		            ParamByName('@TENDDATE').AsDateTime		:= m_cJNTArea.getDefDate(2);
	            end;

	            ExecProc;

		        iRet := ParamByName('@RetCd').AsInteger;
	        end;



	       	// 【会計】適用期間外に伝票が存在するかチェックするストアドを実行する
	        if iRet = 0 then
	        begin
	            // グループ会計子社は全社DBへの接続とする
	            if (m_SyncMaster.m_flgGrpCorp = 1) then
	            begin
//<D10>				MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, SPDenChkMAS);
					gfnJNTSELSetDbName(SPDenChkMAS, m_SyncMaster.m_cPDBSelect);		//<D10>
	            end
	            else
	            begin
//<D10>				MDataModule.SetDBInfoToSProc(dbCorp_Select, SPDenChkMAS);
					gfnJNTSELSetDbName(SPDenChkMAS, dbCorp_Select);		//<D10>
	            end;

	            with SPDenChkMAS do
	            begin
					ParamByName('@p_nNCode').AsFloat			:= JHojyoMA_DMemDataNCode.asFloat;

	                iValue := Trunc(f0StartDate.Value);
	                if iValue <> 0 then
	                begin
//<D10>					ParamByName('@p_dStartDate').AsDateTime	:= f0StartDate.AsDateTime;
		                ParamByName('@p_dStartDate').AsDate		:= f0StartDate.AsDateTime;	   	//<D10>
	                end
	                else
	                begin
//<D10>					ParamByName('@p_dStartDate').AsDateTime	:= m_cJNTArea.getDefDate(1);
						ParamByName('@p_dStartDate').AsDate		:= m_cJNTArea.getDefDate(1);	//<D10>
	                end;

	                iValue := Trunc(f0EndDate.Value);
	                if iValue <> 0 then
	                begin
//<D10>					ParamByName('@p_dEndDate').AsDateTime	:= f0EndDate.AsDateTime;
						ParamByName('@p_dEndDate').AsDate		:= f0EndDate.AsDateTime;		//<D10>
	                end
	                else
	                begin
//<D10>					ParamByName('@p_dEndDate').AsDateTime	:= m_cJNTArea.getDefDate(2);
						ParamByName('@p_dEndDate').AsDate		:= m_cJNTArea.getDefDate(2);	//<D10>
	                end;

	                ExecProc;

			        iRet := ParamByName('@p_Ret').AsInteger;
	            end;
	        end;


	        // 存在していたら、適用期間（自）と（至）は、呼び出し時の値とする。
	        if iRet <> 0 then
	        begin
	            if m_TStartDate = m_cJNTArea.getDefDate(1) then
	            begin
	                f0StartDate.AsDateTime := 0;
	            end
	            else
	            begin
	                f0StartDate.AsDateTime := m_TStartDate;
	            end;

	            if m_TEndDate = m_cJNTArea.getDefDate(2) then
	            begin
	                f0EndDate.AsDateTime := 0;
	            end
	            else
	            begin
	                f0EndDate.AsDateTime := m_TEndDate;
	            end;

				MjsMessageBox(Self,'適用期間外で伝票または仕訳が入力済みなので変更できません。', mjError, mjDefOk);
	            PMTab.Items.Selected := 0;

				// 適用期間（自）にフォーカスを戻す。
	            MjsSetFocus(Self,f0StartDate.Name);

	            Result := False;
	            Exit;
	        end;
	    end;
	    //↑<230>
	end; 			//<2668>

    if iSumkbn = 0 then
    begin
        // 得意先採用あり
        if f1TSKBN.Checked then
        begin
            // 得意先区分
            with f1TKBN do
            begin
                if (AllChkMode) or (lvCompoName = Name) then
                begin
                    if (f1TKBN.Value < 1) or (f1TKBN.Value > 2) then
                    begin
                        MessageDlg('入力に誤りがあります', mtWarning, [mbOk], 0);
                        PMTab.Items.Selected := 1;
                        f1TKBN.SetFocus;
                        Result := False;
                        exit;
                    end;
                    if AllChkMode = False then Exit;
                end;
            end;

            if  Copy(lvCompoName,1,13) = 'f1NClosingDay' then
            begin
                // 締日
                if	(Trunc (TMNumEdit(Sender).value) < 0)
                         or (Trunc (TMNumEdit(Sender).value) > 31) then
                begin
	           		MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk); //<193>
                    PMTab.Items.Selected := 1;
                    TMNumEdit(Sender).SetFocus;
                    Result	:= FALSE;
                    Exit;
                end;


				//<193>↓追加
                i := StrToInt(Copy(lvCompoName,14,1));
				if (i > 1) and (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).Value) > 0) then
				begin
                	 // 締日同士の前後チェック
                	if	(Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i-1))).value) >=
                         Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i  ))).Value)) then
                    begin
                        MjsMessageBox(self,'前の'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
                        PMTab.Items.Selected := 1;
                        TMNumEdit(Sender).SetFocus;
                        Result	:= FALSE;
                        Exit;
                    end;
				end;
				//<193>↑追加

                // ﾌｨｰﾙﾄﾞの入力制御
                fnSeiKbn_EntryControl;

                if AllChkMode = False then Exit;
            end;

            if Copy(lvCompoName,1,6) = 'f1NDay' then
            begin
                i := StrToInt(Copy(lvCompoName,7,1));

				//<193>↓下から移動してきた
                if	(TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value <> 0)
                 and	(((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).value) < 1)
                         or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).Value) > 31))) then												// 予定月: 0=当月
                begin
					MjsMessageBox(self,'回収予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
                    PMTab.Items.Selected := 1;
                    TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).SetFocus;
                    Result	:= FALSE;
                    Exit;
                end;
            	//<193>↑下から移動してきた

                if	(TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value <> 0)
                    and	(TMComboBox(MJSFindCtrl(Self, 'f1NMonth' + IntToStr(i))).ItemIndex = 0) then												// 予定月: 0=当月
                begin
                    if	(Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value))
                            > (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).value)) then      //<193> >= → > へ判定式修正
                    begin
						MjsMessageBox(self,'回収予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>

                        PMTab.Items.Selected := 1;
                        TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).SetFocus;
                        Result	:= FALSE;
                        Exit;
                    end;
                end;
{<193>↓上へ移動
				//判定順序が逆（単体チェックをしてから、締日との比較)
                if	(TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value <> 0)
                 and	(((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).value) < 1)
                         or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).Value) > 31))) then												// 予定月: 0=当月
                begin
                    PMTab.Items.Selected := 1;
                    TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).SetFocus;
                    Result	:= FALSE;
                    Exit;
                end;
<193>↑上へ移動}
                if AllChkMode = False then Exit;

                // 更新処理でのﾁｪｯｸ
                if AllChkMode then
                begin
                    for i := 1 to  3 do
                    begin
                        // 締日
                        if	((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value) < 0)
                                 or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).Value) > 31)) then
                        begin
                            PMTab.Items.Selected := 1;
                            TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).SetFocus;
                            Result	:= FALSE;
                            Exit;
                        end;

// <109>                        fnSeiKbn_EntryControl;

                        if	(TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value <> 0)
                                and (TMComboBox(MJSFindCtrl(Self, 'f1NMonth' + IntToStr(i))).ItemIndex = 0)											// 予定月: 0=当月
                                and	(TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).Text <> '') then												// 予定月: 0=当月
                        begin
                            if	(Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value))
                                    >= (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).value)) then
                            begin
                                PMTab.Items.Selected := 1;
                                TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).SetFocus;
                                Result	:= FALSE;
                                Exit;
                            end;
                        end;

                        if	(TMNumEdit(MJSFindCtrl(Self, 'f1NClosingDay' + IntToStr(i))).value <> 0)
                            and (((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).value) < 1)
                                 or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).Value) > 31)))
                                and	(TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).Text <> '') then												// 予定月: 0=当月
                        begin
                            PMTab.Items.Selected := 1;
                            TMNumEdit(MJSFindCtrl(Self, 'f1NDay' + IntToStr(i))).SetFocus;
                            Result	:= FALSE;
                            Exit;
                        end;
                    end;
                end;
            end;

            // 特殊請求NO <183>
            with f1NSeino do
            begin
                if (AllChkMode) or (lvCompoName = Name) then
                begin
                    // 特殊得意先で伝票が発生している場合は入力必須とする
                    if (uvChangeFL_Sime = False) and (uvChangeFL_T = True) then
                    begin
                        if Value = 0 then
                        begin
                            PMTab.Items.Selected := PAGE_Saiyo;
                            f1NSeino.SetFocus;
                            Result := False;
                            Exit;
                        end;
                        if AllChkMode = False then Exit;
                    end;
                end;
            end;
        end;

        // 仕入先採用あり
        if f1SSKBN.Checked then
        begin
            // 仕入先区分
            with f1SKBN do
            begin
                if (AllChkMode) or (lvCompoName = Name) then
                begin
                    if (f1SKBN.Value < 1) or (f1SKBN.Value > 2) then
                    begin
                        MessageDlg('入力に誤りがあります', mtWarning, [mbOk], 0);
                        PMTab.Items.Selected := 1;
                        f1SKBN.SetFocus;
                        Result := False;
                        exit;
                    end;
                    if AllChkMode = False then Exit;
                end;
            end;

            if  Copy(lvCompoName,1,13) = 'f1SClosingDay' then
            begin
                // 締日
                if	(Trunc (TMNumEdit(Sender).value) < 0)
                         or (Trunc (TMNumEdit(Sender).value) > 31) then
                begin
	           		MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk); //<193>
                    PMTab.Items.Selected := 1;
                    TMNumEdit(Sender).SetFocus;
                    Result	:= FALSE;
                    Exit;
                end;

				//<193>↓追加
                i := StrToInt(Copy(lvCompoName,14,1));
				if (i > 1) and (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).Value) > 0) then
				begin
                	 // 締日同士の前後チェック
                	if	(Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i-1))).value) >=
                         Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i  ))).Value)) then
                    begin
                        MjsMessageBox(self,'前の'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
                        PMTab.Items.Selected := 1;
                        TMNumEdit(Sender).SetFocus;
                        Result	:= FALSE;
                        Exit;
                    end;
				end;
				//<193>↑追加


                // ﾌｨｰﾙﾄﾞの入力制御
                fnSeiKbn_EntryControl_SI;

                if AllChkMode = False then Exit;
            end;

            if Copy(lvCompoName,1,6) = 'f1SDay' then
            begin
                i := StrToInt(Copy(lvCompoName,7,1));

				//<193>↓下から移動してきた
                if	(TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value <> 0)
                 and	(((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).value) < 1)
                         or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).Value) > 31))) then												// 予定月: 0=当月
                begin
					MjsMessageBox(self,'支払予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
                    PMTab.Items.Selected := 1;
                    TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).SetFocus;
                    Result	:= FALSE;
                    Exit;
                end;
				//<193>↑下から移動してきた


                if	(TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value <> 0)
                    and	(TMComboBox(MJSFindCtrl(Self, 'f1SMonth' + IntToStr(i))).ItemIndex = 0) then												// 予定月: 0=当月
                begin
                    if	(Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value))
                            > (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).value)) then    //<193> >= → > へ判定式修正
                    begin
						MjsMessageBox(self,'支払予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	   //<193>
                        PMTab.Items.Selected := 1;
                        TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).SetFocus;
                        Result	:= FALSE;
                        Exit;
                    end;
                end;
{<193>↓上へ移動
				//判定順序が逆（単体チェックをしてから、締日との比較)
                if	(TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value <> 0)
                 and	(((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).value) < 1)
                         or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).Value) > 31))) then												// 予定月: 0=当月
                begin
                    PMTab.Items.Selected := 1;
                    TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).SetFocus;
                    Result	:= FALSE;
                    Exit;
                end;
<193>↑上へ移動}

                if AllChkMode = False then Exit;

                // 更新処理でのチェック
                if AllChkMode then
                begin
                    for i := 1 to  3 do
                    begin
                        // 締日
                        if	((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value) < 0)
                                 or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).Value) > 31)) then
                        begin
                            PMTab.Items.Selected := 1;
                            TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).SetFocus;
                            Result	:= FALSE;
                            Exit;
                        end;

// <109>                        fnSeiKbn_EntryControl_SI;

                        if	(TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value <> 0)
                                and (TMComboBox(MJSFindCtrl(Self, 'f1SMonth' + IntToStr(i))).ItemIndex = 0)											// 予定月: 0=当月
                                and	(TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).Text <> '') then												// 予定月: 0=当月
                        begin
                            if	(Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value))
                                    >= (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).value)) then
                            begin
                                PMTab.Items.Selected := 1;
                                TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).SetFocus;
                                Result	:= FALSE;
                                Exit;
                            end;
                        end;

                        if	(TMNumEdit(MJSFindCtrl(Self, 'f1SClosingDay' + IntToStr(i))).value <> 0)
                            and (((Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).value) < 1)
                                 or (Trunc (TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).Value) > 31)))
                                and	(TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).Text <> '') then												// 予定月: 0=当月
                        begin
                            PMTab.Items.Selected := 1;
                            TMNumEdit(MJSFindCtrl(Self, 'f1SDay' + IntToStr(i))).SetFocus;
                            Result	:= FALSE;
                            Exit;
                        end;
                    end;
                end;
            end;
//<502_003> ADD St
            // 特殊請求NO
            with f1SSeino do
            begin
                if (AllChkMode) or (lvCompoName = Name) then
                begin
                    // 特殊仕入先で伝票が発生している場合は入力必須とする
                    if (uvChangeFL_Sime_S = False) and (uvChangeFL_T_S = True) then
                    begin
                        if Value = 0 then
                        begin
                            PMTab.Items.Selected := PAGE_Saiyo;
                            f1SSeino.SetFocus;
                            Result := False;
                            Exit;
                        end;
                        if AllChkMode = False then Exit;
                    end;
                end;
            end;
//<502_003> ADD Ed
        end;

// 締日関連チェック <189>
		if AllChkMode then
		begin
			retComp := fnSime_DataCheck;
			if retComp <> nil then
			begin
				PMTab.Items.Selected := 1;
				retComp.SetFocus;
				Result	:= FALSE;
				Exit;
			end;
		end;
// <189> ↑↑↑

        if f1TSKBN.Checked = False then f1TKBN.value := 0;
        if f1SSKBN.Checked = False then f1SKBN.value := 0;
    end
    else
    begin
        f1TKBN.value := 1;
        f1SKBN.value := 1;
    end;

	result := True;

end;

//**************************************************************************
//	Proccess	:	締日関連ﾁｪｯｸ <189>
//	Name		:	unknown
//	Parameter	:
//	Retrun		:	TWinControl  ｴﾗｰのｺﾝﾄﾛｰﾙ
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function	TJNTCRP004001f.fnSime_DataCheck:TWinControl;
begin
	result := nil;

	if f1TSKBN.Checked then
	begin

		//第１締日
		if f1NClosingDay1.AsInteger = 0 then
		begin
{↓<224>このガードは不要なのでコメントにする。999までのガードはコンポーネントの桁のプロパティが3桁で設定されているので、特にソースではガードしない。
			if f1NSSite.AsInteger > 31 then
			begin
				result := f1NSSite;
				Exit;
			end;
↑<224>}
		end
		else
		begin
			//<193>↓
			//第１締日のレンジチェック(メッセージ出力用)
			if f1NClosingDay1.AsInteger > 31 then
			begin
           		MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);
				result := f1NClosingDay1;
				Exit;
			end;
			//<193>↑

			//第１回収予定日
			if (f1NDay1.AsInteger = 0) or (f1NDay1.AsInteger > 31) then
			begin
				MjsMessageBox(self,'回収予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
				result := f1NDay1;
				Exit;
			end;

			if f1NMonth1.ItemIndex < 1 then
			begin
				if f1NClosingDay1.AsInteger > f1NDay1.AsInteger then
				begin
					MjsMessageBox(self,'回収予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
					result := f1NDay1;
					Exit;
				end;
			end;

//---------------------------------------------------
			//第２締日
			if f1NClosingDay2.AsInteger <> 0 then
			begin

                //<193>↓
                //レンジチェック(メッセージ出力用)
                if f1NClosingDay2.AsInteger > 31 then
                begin
                    MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);
                    result := f1NClosingDay2;
                    Exit;
                end;
                //<193>↑

				if f1NClosingDay1.AsInteger >= f1NClosingDay2.AsInteger then
				begin
					MjsMessageBox(self,'前の'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
					result := f1NClosingDay2;
					Exit;
				end;

				if (f1NDay2.AsInteger = 0) or (f1NDay2.AsInteger > 31) then
				begin
					MjsMessageBox(self,'回収予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
					result := f1NDay2;
					Exit;
				end;

				if f1NMonth2.ItemIndex < 1 then
				begin
					if f1NClosingDay2.AsInteger > f1NDay2.AsInteger then
					begin
						MjsMessageBox(self,'回収予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
						result := f1NDay2;
						Exit;
					end;
				end;

			end;
//---------------------------------------------------
			//第３締日
			if f1NClosingDay3.AsInteger <> 0 then
			begin
                //<193>↓
                //レンジチェック(メッセージ出力用)
                if f1NClosingDay3.AsInteger > 31 then
                begin
                    MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);
                    result := f1NClosingDay3;
                    Exit;
                end;
                //<193>↑

				if f1NClosingDay2.AsInteger >= f1NClosingDay3.AsInteger then
				begin
					MjsMessageBox(self,'前の'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
					result := f1NClosingDay3;
					Exit;
				end;

				if (f1NDay3.AsInteger = 0) or (f1NDay3.AsInteger > 31) then
				begin
					MjsMessageBox(self,'回収予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
					result := f1NDay3;
					Exit;
				end;

				if f1NMonth3.ItemIndex < 1 then
				begin
					if f1NClosingDay3.AsInteger > f1NDay3.AsInteger then
					begin
						MjsMessageBox(self,'回収予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);		//<193>
						result := f1NDay3;
						Exit;
					end;
				end;

			end;
//---------------------------------------------------
		end;
	end;


	if f1SSKBN.Checked then
	begin

		if f1SClosingDay1.AsInteger = 0 then
		begin
{↓<224>このガードは不要なのでコメントにする。999までのガードはコンポーネントの桁のプロパティが3桁で設定されているので、特にソースではガードしない。
			if f1SSSite.AsInteger > 31 then
			begin
				result := f1SSSite;
				Exit;
			end;
↑<224>}
		end
		else
		begin

			//<193>↓
			//第１締日のレンジチェック(メッセージ出力用)
			if f1SClosingDay1.AsInteger > 31 then
			begin
           		MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);
				result := f1SClosingDay1;
				Exit;
			end;
			//<193>↑

			if (f1SDay1.AsInteger = 0) or (f1SDay1.AsInteger > 31) then
			begin
				MjsMessageBox(self,'支払予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
				result := f1SDay1;
				Exit;
			end;

			if f1SMonth1.ItemIndex < 1 then
			begin
				if f1SClosingDay1.AsInteger > f1SDay1.AsInteger then
				begin
					MjsMessageBox(self,'支払予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
					result := f1SDay1;
					Exit;
				end;
			end;

//---------------------------------------------------
			//第２締日
			if f1SClosingDay2.AsInteger <> 0 then
			begin

                //<193>↓
                //レンジチェック(メッセージ出力用)
                if f1SClosingDay2.AsInteger > 31 then
                begin
                    MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);
                    result := f1SClosingDay2;
                    Exit;
                end;
                //<193>↑


				if f1SClosingDay1.AsInteger >= f1SClosingDay2.AsInteger then
				begin
					MjsMessageBox(self,'前の'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
					result := f1SClosingDay2;
					Exit;
				end;

				if (f1SDay2.AsInteger = 0) or (f1SDay2.AsInteger > 31) then
				begin
					MjsMessageBox(self,'支払予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
					result := f1SDay2;
					Exit;
				end;

				if f1SMonth2.ItemIndex < 1 then
				begin
					if f1SClosingDay2.AsInteger > f1SDay2.AsInteger then
					begin
						MjsMessageBox(self,'支払予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);		//<193>
						result := f1SDay2;
						Exit;
					end;
				end;

			end;
//---------------------------------------------------
			//第３締日
			if f1SClosingDay3.AsInteger <> 0 then
			begin

		        //<193>↓
                //レンジチェック(メッセージ出力用)
                if f1SClosingDay3.AsInteger > 31 then
                begin
                    MjsMessageBox(self,'締日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);
                    result := f1SClosingDay3;
                    Exit;
                end;
                //<193>↑

				if f1SClosingDay2.AsInteger >= f1SClosingDay3.AsInteger then
				begin
					MjsMessageBox(self,'前の'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);	//<193>
					result := f1SClosingDay3;
					Exit;
				end;

				if (f1SDay3.AsInteger = 0) or (f1SDay3.AsInteger > 31) then
				begin
					MjsMessageBox(self,'支払予定日'+MSG_W_DAY_RANGE,mjWarning, mjDefOk);	//<193>
					result := f1SDay3;
					Exit;
				end;

				if f1SMonth3.ItemIndex < 1 then
				begin
					if f1SClosingDay3.AsInteger > f1SDay3.AsInteger then
					begin
						MjsMessageBox(self,'支払予定日は'+MSG_W_AFTER_CLOSINGDAY,mjWarning, mjDefOk);		//<193>
						result := f1SDay3;
						Exit;
					end;
				end;

			end;
//---------------------------------------------------
		end;
	end;


end;


//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnValidateInput
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGrid_KeiContDateDateValidateInput(
  Sender: TObject; const AText: String; var ADate: TDateTime;
  var AMessage: String; var AError: Boolean);
var
	sDate	:	String;
	iDate	:	Integer;
	sGengou	:	String;
begin
	AMessage := '';
	AError := False;

	if AText = '' then
	begin
		exit;
	end;

	sDate := AText;
	sDate := AText;

	if m_iRekiKbn = 0 then				// 和暦
	begin
		sGengou := Copy(AText, 1, 1);
		System.Delete(sDate, 1, 2);
		sDate := Trim(sDate);

		if (sDate = '') or
			(AnsiUpperCase(sDate) = 'H') or
			(AnsiUpperCase(sDate) = 'S') or
			(AnsiUpperCase(sDate) = 'T') or
			(AnsiUpperCase(sDate) = 'M') then
		begin
			Beep;
			abort;
		end;

//		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし//<MDEL>
		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
		iDate := MjsDateCtrl.MjsIntDateHokan6(StrToInt(sDate), MdtWAREKI);
		ADate := MjsDateCtrl.MjsIntToDate(iDate, sGengou[1]);
	end
	else
	begin
//		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし //<MDEL>
		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
		ADate := MjsDateCtrl.MjsIntToDate(iDate, #0);
	end;

	if (AText <> '') and (ADate <= 0) then
	begin
		Beep;
		abort;
	end;
end;

//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnValidateInput
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP004001f.Goukei_DdxDBGrid_KeiContDateDateValidateInput(
  Sender: TObject; const AText: String; var ADate: TDateTime;
  var AMessage: String; var AError: Boolean);
var
	sDate	:	String;
	iDate	:	Integer;
	sGengou	:	String;
begin
	AMessage := '';
	AError := False;

	if AText = '' then
	begin
		exit;
	end;

	sDate := AText;
	sDate := AText;

	if m_iRekiKbn = 0 then				// 和暦
	begin
		sGengou := Copy(AText, 1, 1);
		System.Delete(sDate, 1, 2);
		sDate := Trim(sDate);

		if (sDate = '') or
			(AnsiUpperCase(sDate) = 'H') or
			(AnsiUpperCase(sDate) = 'S') or
			(AnsiUpperCase(sDate) = 'T') or
			(AnsiUpperCase(sDate) = 'M') then
		begin
			Beep;
			abort;
		end;

//		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし//<MDEL>
		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
		iDate := MjsDateCtrl.MjsIntDateHokan6(StrToInt(sDate), MdtWAREKI);
		ADate := MjsDateCtrl.MjsIntToDate(iDate, sGengou[1]);
	end
	else
	begin
//		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし //<MDEL>
		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
		ADate := MjsDateCtrl.MjsIntToDate(iDate, #0);
	end;

	if (AText <> '') and (ADate <= 0) then
	begin
		Beep;
		abort;
	end;
end;


//**********************************************************************
//*		Proccess	:	ボタンクリックイベント付属
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP004001f.BtnClkWriteJ():Boolean;
var
	strGCode	: String;
	iSumKbn		: Integer;
    lvNCODE     : Extended;
    lvChildFL   : Boolean;
    lvChildFL_S : Boolean;		                            // 子存在ﾌﾗｸﾞ<ﾛｰｶﾙ用>(T:有  、F:無)<103>
    BolS        : Boolean;						            // MTOKUI_S　　　    (T:あり、F:なし)
    BolDen		: Boolean;		                            // 残高または発生    (T:あり、F:なし)
    lvStr       : String;
    Qry         : TMQuery;

begin
	Result := False;

	{ＤＢに書き込み}
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		strGCode	  := f0TGCode.Text;
		strGCode      := TrimRight(strGCode);
		f0TGCode.Text := strGCode;
	end
	else begin
		strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);
    end;

	// ﾌﾘｰｺｰﾄﾞﾁｪｯｸ
	if not JNTMASERRORCODECHECK(strGCode, gstErrorStr) then
	begin
		Beep;
//		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
		MjsMessageBoxEx(Self, MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,
                            MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);

        // 元の場所(外部ｺｰﾄﾞ)に戻す
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			MjsSetFocus(Self, 'f0TGCode')
		else
			MjsSetFocus(Self, 'f0NGCode');
		Abort;
	end;

    // 実在or合計
	iSumKbn	:= Root_PMTab.Items.Selected;

	try
{		try
			if m_bExFlg <> True then
			begin
				cExcept := TJNTMASExceptIF.Init(m_pMyAppRecord);

				// 500番台の排他
				iRet := cExcept.SetExcept(551);
				if iRet <> JNTMAS_EXCEPT_RET_OK then
				begin
					MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsSetFocus(Self, 'f0TGCode')	// 元の場所に戻す
					else
						MjsSetFocus(Self, 'f0NGCode');	// 元の場所に戻す

					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
				begin
//					ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsSetFocus(Self, 'f0TGCode')	// 元の場所に戻す
					else
						MjsSetFocus(Self, 'f0NGCode');	// 元の場所に戻す

					if cExcept <> nil then
					begin
						cExcept.ResetTerm;
						cExcept.Free;
						cExcept := nil;
					end;
					Exit;
				end;
				m_bExFlg 	:= True;
			end;
		except;
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;
}
		{入力データをMemDataにセット}
		fnJEntrySet ();
        lvNCODE := fnGetNCODE(strGCode, 22, MasterInfo_DMemDataCodeAttr.AsInteger);

        //<103>･･･････････････････････････････････････････････････････････････････↓↓↓
        //========================================================
        // ﾃﾞｰﾀ読み込み時に伝票または_Sが発生していない得意先の
        // 入力中に伝票または_Sが発生している可能性があるのでﾁｪｯｸを行う
        // ※例外処理なので条件に引っかかれば名称変更なども許さない
        //========================================================

        // 変更時のみﾁｪｯｸ(新規はInsertでｴﾗｰ)
        if ((f1TSKBN.Checked) and (lvNCODE <> 0)) and
            (SaiyoCheckCmpFlg(S_TOKUI) = true) then  // 得意先採用がメンテされた？ <502_001> ADD
        begin
//<Rel-2>     MDataModule.SetDBInfoToQuery (dbCorp_Select, StdProc7);
//↓<Rel-2>
            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
            begin
                //グループ会計子社は全社DBに対してチェックする。
//<D10>			MDataModule.SetDBInfoToSProc (m_SyncMaster.m_cPDBSelect, StdProc7);
				gfnJNTSELSetDbName(StdProc7, m_SyncMaster.m_cPDBSelect);		//<D10>
            end
            else
            begin
                //グループ会計子社以外は自社DBに対してチェックする。
//<D10>			MDataModule.SetDBInfoToSProc (dbCorp_Select, StdProc7);
				gfnJNTSELSetDbName(StdProc7, dbCorp_Select);		//<D10>
            end;
//↑<Rel-2>

            if (uvData_Load.pvrDenHas = False) or (uvData_Load.pvrSHas   = False) then
            begin
                // PRC_MA0130_013
                with StdProc7 do
                begin
					ParamByName('@pTRNCD').AsFloat := lvNCODE;			    // 得意先ｺｰﾄﾞ
                    ExecProc;
                    BolS	:= (ParamByName('@RET_S')     .AsInteger = -1);	// MTOKUI_S存在
                    BolDen	:= (ParamByName('@RET_ZANHAS').AsInteger = -1);	// 残高または発生
                end;

                //-------------------------------
                // 発生した！！
                //-------------------------------
                if ((uvData_Load.pvrDenHas = False) and (BolDen = True)) or
                   ((uvData_Load.pvrSHas   = False) and (BolS   = True)) then
                begin
                    // [関連するデータが発生したため更新できません。]
                    uvSelSys.MsgDlg(1030,90);
                    Exit;
                end;
            end;
        end;

        //<103>･･･････････････････････････････････････････････････････････････････↓↓↓
        //========================================================
        // ﾃﾞｰﾀ読み込み時に伝票または_Sが発生していない得意先の
        // 入力中に伝票または_Sが発生している可能性があるのでﾁｪｯｸを行う
        // ※例外処理なので条件に引っかかれば名称変更なども許さない
        //========================================================

        // 変更時のみﾁｪｯｸ(新規はInsertでｴﾗｰ)
        if ((f1SSKBN.Checked) and (lvNCODE <> 0)) and
            (SaiyoCheckCmpFlg(S_SHIIRE) = true) then  // 仕入先採用がメンテされた？ <502_001> ADD
        begin
//<Rel-2>     MDataModule.SetDBInfoToQuery (dbCorp_Select, StdProc7_S);
//↓<Rel-2>
            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
            begin
                //グループ会計子社は全社DBに対してチェックする。
//<D10>			MDataModule.SetDBInfoToSProc (m_SyncMaster.m_cPDBSelect, StdProc7_S);
				gfnJNTSELSetDbName(StdProc7_S, m_SyncMaster.m_cPDBSelect);		//<D10>
            end
            else
            begin
                //グループ会計子社以外は自社DBに対してチェックする。
//<D10>			MDataModule.SetDBInfoToSProc (dbCorp_Select, StdProc7_S);			
				gfnJNTSELSetDbName(StdProc7_S, dbCorp_Select);		//<D10>
            end;
//↑<Rel-2>

            if (uvData_Load_S.pvrDenHas = False) or (uvData_Load_S.pvrSHas   = False) then
            begin
                // PRC_MA0130_013
                with StdProc7_S do
                begin
					ParamByName('@pTRNCD').AsFloat := lvNCODE;			    // 得意先ｺｰﾄﾞ
                    ExecProc;
                    BolS	:= (ParamByName('@RET_S')     .AsInteger = -1);	// MTOKUI_S存在
                    BolDen	:= (ParamByName('@RET_ZANHAS').AsInteger = -1);	// 残高または発生
                end;
                //-------------------------------
                // 発生した！！
                //-------------------------------
                if ((uvData_Load_S.pvrDenHas = False) and (BolDen = True)) or
                   ((uvData_Load_S.pvrSHas   = False) and (BolS   = True)) then
                begin
                    // [関連するデータが発生したため更新できません。]
                    uvSelSys.MsgDlg(1030,90);
                    Exit;
                end;
            end;
        end;

        //<103>====================================================
        // ﾃﾞｰﾀ読み込み時には子会社が存在しないが
        // 入力中に子会社が発生している可能性があるのでﾁｪｯｸを行う
        // ※通常から特殊/随時に変更の場合のみ
        //========================================================
        if f1TSKBN.checked and
           (SaiyoCheckCmpFlg(S_TOKUI) = true) then // 得意先採用がメンテされた？ <502_001> ADD
        begin
            if (uvChildFL = False) 				  and 	    // 子会社の無い
               (uvData_Load.pvrSeiKbn = 0) 		  and	    // 通常から
               ((uvSeiKbn = 1) or (uvSeiKbn = 2)) then	    // 特殊か随時に変更した場合
            begin
//<Rel-2>         MDataModule.SetDBInfoToQuery (dbCorp_Select, StdProc1);
//↓<Rel-2>
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    //グループ会計子社は全社DBに対してチェックする。
//<D10>				MDataModule.SetDBInfoToSProc (m_SyncMaster.m_cPDBSelect, StdProc1);	
					gfnJNTSELSetDbName(StdProc1, m_SyncMaster.m_cPDBSelect);		//<D10>
                end
                else
                begin
                    //グループ会計子社以外は自社DBに対してチェックする。
//<D10>				MDataModule.SetDBInfoToSProc (dbCorp_Select, StdProc1);		
					gfnJNTSELSetDbName(StdProc1, dbCorp_Select);		//<D10>
                end;
//↑<Rel-2>

                // PRC_MA0130_010(子会社の有無)
                with StdProc1 do
                begin
					ParamByName('@pTRNCD').AsFloat := lvNCODE;			    // 得意先ｺｰﾄﾞ
                    ExecProc;
                    lvChildFL := (ParamByName('@RETURN_VALUE').AsInteger = -1);
                end;
                //-------------------------------
                // 発生した！！
                //-------------------------------
                if lvChildFL = True then
                begin
                    // [関連するデータが発生したため更新できません。]
                    uvSelSys.MsgDlg(1030,90);
                    Exit;
                end;
            end;
        end;

        //<103>====================================================
        // ﾃﾞｰﾀ読み込み時には子会社が存在しないが
        // 入力中に子会社が発生している可能性があるのでﾁｪｯｸを行う
        // ※通常から特殊/随時に変更の場合のみ
        //========================================================
        if f1SSKBN.checked and
           (SaiyoCheckCmpFlg(S_SHIIRE) = true) then  // 仕入先採用がメンテされた？ <502_001> ADD
        begin
            if (uvChildFL_S = False) 				  and 	// 子会社の無い
               (uvData_Load_S.pvrSeiKbn = 0) 		  and	// 通常から
               ((uvSeiKbn_S = 1) or (uvSeiKbn_S = 2)) then	// 特殊か随時に変更した場合
            begin
//<Rel-2>         MDataModule.SetDBInfoToQuery (dbCorp_Select, StdProc1_S);
//↓<Rel-2>
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    //グループ会計子社は全社DBに対してチェックする。
//<D10>				MDataModule.SetDBInfoToSProc (m_SyncMaster.m_cPDBSelect, StdProc1_S);	
					gfnJNTSELSetDbName(StdProc1_S, m_SyncMaster.m_cPDBSelect);		//<D10>
                end
                else
                begin
                    //グループ会計子社以外は自社DBに対してチェックする。
//<D10>				MDataModule.SetDBInfoToSProc (dbCorp_Select, StdProc1_S);		
					gfnJNTSELSetDbName(StdProc1_S, dbCorp_Select);		//<D10>
                end;
//↑<Rel-2>

                // PRC_MA0130_010(子会社の有無)
                with StdProc1_S do
                begin
					ParamByName('@pTRNCD').AsFloat := lvNCODE;			    // 得意先ｺｰﾄﾞ
                    ExecProc;
                    lvChildFL_S := (ParamByName('@RETURN_VALUE').AsInteger = -1);
                end;
                //-------------------------------
                // 発生した！！
                //-------------------------------
                if lvChildFL_S = True then
                begin
                    // [関連するデータが発生したため更新できません。]
                    uvSelSys.MsgDlg(1030,90);
                    Exit;
                end;
            end;
        end;

        //<103>===================================================
        // 更新前のMTOKUIの状態を格納する
        //========================================================
        Qry := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            // 得意先情報
// <142>↓
//            if f1TSKBN.Checked then
            if uvData_Load.pvrSai = 1 then
// <142>↑
            begin
                Close;
                SQL.Clear;
                SQL.Add('select ');
                SQL.Add('ma.RCloseDay1, ma.RCloseDay2, ma.RCloseDay3, ');   // 締日1,2,3
                SQL.Add('ma.RcvMonth1, ma.RcvMonth2, ma.RcvMonth3, ');		// ｻｲｸﾙ1,2,3
                SQL.Add('ma.RcvDay1, ma.RcvDay2, ma.RcvDay3, ');	        // 回収日1,2,3
                SQL.Add('se.RZuiSSite, ');							        // 随時請求回収ｻｲﾄ
                SQL.Add('se.RTSEINO ');				    			        // 特殊請求No
                SQL.Add('from MTOKUI ma ');
    			SQL.Add('Left Outer Join MTOKUI_SEL se On MA.NCode = se.BaseNCode and se.ReCKBN = 1');
                SQL.Add(' where ma.NCODE = :pCODE');
//<256> DEL                ParamByName('pCODE').AsFloat := lvNCODE;
                ParamByName('pCODE').AsString := FormatFloat('0',lvNCODE);  //<256> ADD
                Open;

                with uvData_Load do
                begin
                    pvrSime1   := FieldByName('RCloseDay1').AsInteger;      // 締日1
                    pvrSime2   := FieldByName('RCloseDay2').AsInteger;	    // 締日2
                    pvrSime3   := FieldByName('RCloseDay3').AsInteger;	    // 締日3

                    // ｻｲｸﾙ1
                    if pvrSime1 = 0 then
                        pvrCycle1 := -1
                    else
                        pvrCycle1 := FieldByName('RcvMonth1').AsInteger;

                    // ｻｲｸﾙ2
                    if pvrSime2 = 0 then
                        pvrCycle2 := -1
                    else
                        pvrCycle2 := FieldByName('RcvMonth2').AsInteger;

                    // ｻｲｸﾙ3
                    if pvrSime3 = 0 then
                        pvrCycle3 := -1
                    else
                        pvrCycle3 := FieldByName('RcvMonth3').AsInteger;

                    pvrKaisyu1 := FieldByName('RcvDay1').AsInteger;	        // 回収日1
                    pvrKaisyu2 := FieldByName('RcvDay2').AsInteger;	        // 回収日2
                    pvrKaisyu3 := FieldByName('RcvDay3').AsInteger;	        // 回収日3
                    pvrZuiSite := FieldByName('RZuiSSite').AsInteger;	    // 随時回収ｻｲﾄ

                    // 特殊請求No
                    lvStr	:= FieldByName('RTSEINO').AsString;
                    if (lvStr = '') then
                        lvStr	:= '0';
                    pvrTokuSeiNo:= StrToInt(lvStr);
                end;

                Close;
            end
            //↓<218>pvrSai=0のときは、_S作成の判定に使用する以下の変数をクリアする。
            else
            begin
                with uvData_Load do
                begin
                    pvrSime1        := 0;
                    pvrSime2        := 0;
                    pvrSime3        := 0;
                    pvrCycle1       := -1;
                    pvrCycle2       := -1;
                    pvrCycle3       := -1;
                    pvrKaisyu1      := 0;
                    pvrKaisyu2      := 0;
                    pvrKaisyu3      := 0;
                    pvrZuiSite      := 0;
                    pvrTokuSeiNo    := 0;
                end;
            end;
            //↑<218>

            // 仕入先情報
// <142>↓
//            if f1SSKBN.Checked then
//<236>     if uvData_Load.pvrSai = 1 then
            if uvData_Load_S.pvrSai = 1 then //<236>
// <142>↑
            begin
                Close;
                SQL.Clear;
                SQL.Add('select ');
                SQL.Add('ma.PCloseDay1, ma.PCloseDay2, ma.PCloseDay3, ');   // 締日1,2,3
                SQL.Add('ma.PayMonth1, ma.PayMonth2, ma.PayMonth3, ');		// ｻｲｸﾙ1,2,3
                SQL.Add('ma.PayDay1, ma.PayDay2, ma.PayDay3, ');	        // 回収日1,2,3
                SQL.Add('se.RZuiSSite, ');							        // 随時請求回収ｻｲﾄ
                SQL.Add('se.RTSEINO ');				    			        // 特殊請求No
                SQL.Add('from MTOKUI ma ');
    			SQL.Add('Left Outer Join MTOKUI_SEL se On MA.NCode = se.BaseNCode and se.RecKBN = 2');
                SQL.Add(' where ma.NCODE = :pCODE');
//<256> DEL                ParamByName('pCODE').AsFloat := lvNCODE;
                ParamByName('pCODE').AsString := FormatFloat('0',lvNCODE);  //<256> ADD
                Open;

                with uvData_Load_S do
                begin
                    pvrSime1   := FieldByName('PCloseDay1').AsInteger;	    // 締日1
                    pvrSime2   := FieldByName('PCloseDay2').AsInteger;	    // 締日2
                    pvrSime3   := FieldByName('PCloseDay3').AsInteger;	    // 締日3

                    // ｻｲｸﾙ1
                    if pvrSime1 = 0 then
                        pvrCycle1 := -1
                    else
                        pvrCycle1 := FieldByName('PayMonth1').AsInteger;

                    // ｻｲｸﾙ2
                    if pvrSime2 = 0 then
                        pvrCycle2 := -1
                    else
                        pvrCycle2 := FieldByName('PayMonth2').AsInteger;

                    // ｻｲｸﾙ3
                    if pvrSime3 = 0 then
                        pvrCycle3 := -1
                    else
                        pvrCycle3 := FieldByName('PayMonth3').AsInteger;

                    pvrKaisyu1 := FieldByName('PayDay1').AsInteger;	        // 回収日1
                    pvrKaisyu2 := FieldByName('PayDay2').AsInteger;	        // 回収日2
                    pvrKaisyu3 := FieldByName('PayDay3').AsInteger;	        // 回収日3
                    pvrZuiSite := FieldByName('RZuiSSite').AsInteger;	    // 随時回収ｻｲﾄ

                    // 特殊請求No
                    lvStr	:= FieldByName('RTSEINO').AsString;
                    if (lvStr = '') then
                        lvStr	:= '0';
                    pvrTokuSeiNo:= StrToInt(lvStr);
                end;

                Close;
            end
            //↓<218>pvrSai=0のときは、_S作成の判定に使用する以下の変数をクリアする。
            else
            begin
                with uvData_Load_S do
                begin
                    pvrSime1        := 0;
                    pvrSime2        := 0;
                    pvrSime3        := 0;
                    pvrCycle1       := -1;
                    pvrCycle2       := -1;
                    pvrCycle3       := -1;
                    pvrKaisyu1      := 0;
                    pvrKaisyu2      := 0;
                    pvrKaisyu3      := 0;
                    pvrZuiSite      := 0;
                    pvrTokuSeiNo    := 0;
                end;
            end;
            //↑<218>
        end;
        Qry.Free;

        // 登録
		if fnDataWrite (strGcode, iSumKbn, True) = False then
		begin
			abort;
			exit;
		end;

	finally
//		if cExcept <> nil then
//		begin
//			cExcept.ResetTerm;
//			cExcept.Free;
//			cExcept := nil;
//		end;
	end;

	result := True;
end;


// 付箋ボタンクリック
procedure TJNTCRP004001f.btnFusenCtlClick(Sender: TObject);
var
	iColor	:	Integer;
	iIndex	:	Integer;
	sCode	:	String;
    nCode   :   Extended;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	QueryFusen	:	TMQuery;
    i           :  Integer;
begin
	iIndex := 0;
	stWorkRec := nil;

	if (Screen.ActiveControl = VTreeView) 			// 加算体系
    	   and	(B_Syousai.Caption = '詳細(&T)') then
	begin
		NodeSelect := VTreeView.Selected;
		stWorkRec := NodeSelect.Data;
	end;

//	if (Screen.ActiveControl = VTreeView) and (stWorkRec^.nDivision = 1)then			// 加算体系
	if (Screen.ActiveControl = VTreeView) 			// 加算体系
    	   and	(B_Syousai.Caption = '詳細(&T)') then
	begin
		sCode := stWorkRec^.strExCode;
		nCode := stWorkRec^.iNCode;

		try
			QueryFusen := TMQuery.Create (Self);
		except
			// クエリのインスタンスに失敗
			MjsMessageBoxEX(Self,'Query Instance Error','btnFusenCtlClick',mjError ,mjOk ,mjDefOk);
			Exit;
		end;
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryFusen);
		gfnJNTSELSetDbName(QueryFusen, dbCorp_Select);		//<D10>

		try
			// 付箋ﾁｪｯｸ
			with QueryFusen do
			begin
				Close ();
				SQL.Clear;							// ｸｴﾘの初期化

				// 取引先合計/集計科目付箋情報をGET
				SQL.Add('select FusenKbn from MFusenInfo');
				SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
                ParamByName('pMKBN').asInteger := ucTORIHIKI;
				// 検索対象の外部ｺｰﾄﾞ 設定
//<256> DEL				SetFld('Ncode').AsFloat  := nCode;
				SetFld('Ncode').AsString  := FormatFloat('0',nCode);  //<256> ADD

				Open ();							// ｸｴﾘの開始

				if EOF = False then
					iColor := GetFld('FusenKbn').AsInteger
				else
					iColor := NOCOLOR;
			end;
		finally
			QueryFusen.Close;
			QueryFusen.Free;
		end;
	end
	else
	begin
        iColor := JHojyoMA_DMemDataFusenIndex.AsInteger;
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            sCode := JHojyoMA_DMemDataGCode.AsString
        else
        begin
            if JHojyoMA_DMemDataGCode.AsString <> '' then
                sCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
            else
                sCode := '';
        end;
	end;

	if sCode = '' then
		exit;

	case iColor of
		NOCOLOR:	iIndex := 99;
		RED:		iIndex := 0;
		GREEN:		iIndex := 2;
		BLUE:		iIndex := 1;
		ORANGE:		iIndex := 3;
	end;

	if B_Fusen.ImageIndex =  iIndex then		// 同色を設定→はがす。
	begin
//		if (Screen.ActiveControl = VTreeView) and (stWorkRec^.nDivision = 1)then			// 加算体系
		if (Screen.ActiveControl = VTreeView)			// 加算体系
    	   and	(B_Syousai.Caption = '詳細(&T)') then
		begin
			m_cNodeRightClk := VTreeView.Selected;
			TFDelClick(Sender);
		end
		else
        begin
			GFDelClick(Sender);
            //ｶｰﾄﾞ型付箋 <101>
    		if B_Syousai.Caption = '一覧(&T)' then
            begin
                //付箋初期化
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
            end;

        end;
	end
	else
	begin
		case B_Fusen.ImageIndex of
			0:	iColor := RED;
			1:	iColor := BLUE;
			2:	iColor := GREEN;
			3:	iColor := ORANGE;
		end;

		if FusenInfoWrite(iColor, sCode, '', True) = False then
		begin
			abort;
			exit;
		end;

//		if (Screen.ActiveControl = VTreeView) and (stWorkRec^.nDivision = 1)then			// 加算体系
//		if (Screen.ActiveControl = VTreeView)then			// 加算体系
		if B_Syousai.Caption = '一覧(&T)' then
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(i))).Visible := False;
            //ｶｰﾄﾞ型付箋セット
            if (iColor >=1 ) and (iColor <=4 ) then
                TImage(MJSFindCtrl(Self, 'f1Fusen' + IntToStr(iColor))).Visible := TRUE;
        end;

		FusenDsp(Root_PMTab.Items.Selected, sCode, 1);

{		MemPost_Sw := 1;
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			JHojyoMA_DMemData.Post
		else
			GHojyoMA_DMemData.Post;
		MemPost_Sw := 0;
}	end;
end;

// 付箋ボタンdropdownクリック
procedure TJNTCRP004001f.FusenListClick(Sender: TObject);
begin
	B_Fusen.ImageIndex := TControl(Sender).Tag-1;
end;

// 実在グリッドマウス移動イベント
procedure TJNTCRP004001f.Jituzai_DdxDBGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	Row	:	Integer;
begin

  inherited;

	// 付箋備考表示処理
	Row	:= Y div Jituzai_DdxDBGrid.DefaultRowHeight + Jituzai_DdxDBGrid.TopIndex;

	if (Row <> m_HintRow_Jitu) then
	begin
		m_HintRow_Jitu			:= Row;
		Jituzai_DdxDBGrid.Hint		:= '';
		Jituzai_DdxDBGrid.ShowHint	:= False;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;

	//	行
	if (Row = m_HintRow_Jitu) and (Jituzai_DdxDBGrid.ShowHint = True) then
		Exit;

//<199>
//	if (Row <= JHojyoMA_DMemData.RecordCount) and (m_aCmnt_Jitu[Row-1].Cmnt <> '') then
	memFsn.RecNo := Row;
	if (Row <= JHojyoMA_DMemData.RecordCount) and (memFsnCmnt.AsString <> '') then
	begin
    {
         for iLoop := Low(m_aCmnt_Jitu) to  High(m_aCmnt_Jitu) do
         begin
            if (m_aCmnt_Jitu[iLoop].Code=JHojyoMA_DMemDataGCode.AsString) then
            begin
           		Jituzai_DdxDBGrid.Hint		:= m_aCmnt_Jitu[Row-1].Cmnt;
        		Jituzai_DdxDBGrid.ShowHint	:= True;
                break;
            end;
         end;}

//<199>
//		Jituzai_DdxDBGrid.Hint		:= m_aCmnt_Jitu[Row-1].Cmnt;
		Jituzai_DdxDBGrid.Hint		:= memFsnCmnt.AsString;
		Jituzai_DdxDBGrid.ShowHint	:= True;
	end;
end;

procedure TJNTCRP004001f.Root_PMTabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
// <109>	m_fAccessTab := False;
end;

procedure TJNTCRP004001f.Goukei_PMTabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	m_fAccessTabG := False;
end;

procedure TJNTCRP004001f.PMTabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	m_fAccessTabJ := False;
end;

//**************************************************************************
//	Proccess  :	取引先契約情報KeyPressｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2002/ 07 / 12
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.DdxDBGrid_KeiKeyPress(Sender: TObject; var Key: Char);
begin
	if m_iRekiKbn = 1 then				// 西暦
	begin
		if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) and (Key <> #13) then
		begin                          // #8=BackSpace   #27=Esc  #9=Tab #13=Enter
			Beep ();
			Abort;
		end;
	end;
end;

//**************************************************************************
//	Proccess  :	取引先詳細復元
//	Name	  :	N.Nabe
//	Date	  :	2002/ 07 / 16
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.FieldRestor(Sender: TObject; SumKbn: Integer);
var
	QueryRead	:	TMQuery;
begin
	QueryRead := TMQuery.Create (Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
	gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

	try
{参考例として残した
        // 日付関係
        if Sender = Jituzai_EDEdit_JEndDate then
        begin
            iValue := Jituzai_EDEdit_JEndDate.Value;
            if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then
                Jituzai_EDEdit_JEndDate.AsDateTime := JHojyoMA_DMemDataJEndDate.AsDateTime;
        end;
}
	finally
		QueryRead.Free;
	end;
end;

//**************************************************************************
//	Proccess  :	入力ﾃﾞｰﾀによるﾗﾍﾞﾙのｷｬﾌﾟｼｮﾝ登録
//					区分による数値入力しか通さない
//	Name	  :	N.Nabe
//	Date	  :	2000/ 09 / 29
//	Parameter :
//	Retrun	  :
//	History	　:	2001 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.fnSetLabel(Sender: TObject);
var
	sValue	:	String;
	iValue	:	Integer;
	iPos	:	Integer;
	iLen	:	Integer;
	iCount	:	Integer;
	iwk		:	Integer;
	swk		:	String;
begin
	if not(Sender is TMNumEdit) then
		Exit;

	iCount := TMNumEdit(Sender).SelectItems.Count;	// ﾄﾞﾛｯﾌﾟﾀﾞｳﾝ なし？
	if iCount = 0 then
		Exit;

	sValue := '';
	iValue := Trunc((Sender as TMNumEdit).Value);	// 区分 取得
	if (iValue = 0) then
		(Sender as TMNumEdit).Zero := True;

	// 区分から名称 取得
	for iwk := 0 to iCount-1 do
	begin
		swk := TMNumEdit(Sender).SelectItems.Strings[iwk];
		iPos := AnsiPos(IntToStr(iValue)+':',swk);
		if iPos = 0 then
			continue;
		iPos := AnsiPos(':',swk);
		iLen := Length(swk);
		sValue := Copy(swk,iPos+1,iLen-iPos);
		Break;
	end;


end;

//**************************************************************************
//	Proccess	:	初期チェック（排他制御）
//	Name		:	N.Nabe
//	Date		:	2003 /  7 /  9
//	Retrun		:
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
{procedure TJNTCRP004001f.ExceptChk();
var
	iRet		:	Integer;
begin
	//	初期処理
	giReferFlag		:=	NORMAL;						// 参照ﾌﾗｸﾞ初期化

	// 排他制御処理
	if cExcept <> nil then
	begin
		cExcept.ResetTerm;
		cExcept.Free;
		cExcept := nil;
	end;
	iRet 	:= EXCEPT_RET_OK;

	try
		try
			cExcept := TMASExceptIF.Init(m_pMyAppRecord);

			// 500番台の排他
			iRet := cExcept.SetExcept(551);
			if iRet <> EXCEPT_RET_OK then
			begin
				MjsMessageBox(Self,'cExcept.SetExceptでエラーが発生しました。',mjError,mjDefOk);
				Exit;
			end;
			if (cExcept.Status100 <> 0) or (cExcept.Status400 <> 0) then
			begin
				giReferFlag	:=	REFER;					// 参照
				ComArea.m_MsgStd.GetMSG(MjsMsgRec,10,113);				// 「他端末で実行中」
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype,	MjsMsgRec.btntype, MjsMsgRec.btndef, MjsMsgRec.LogType);
				Exit;
			end;
		except;
			m_bExFlg 	:= True;		// エラー
			MjsMessageBox(Self,'排他制御処理の初期処理に失敗しました。', mjError, mjDefOk);
			Exit;
		end;
	finally
		if iRet <> EXCEPT_RET_OK then
			m_bExFlg := True;
		if m_bExFlg = True then
			giReferFlag	:= REFER;  		// 参照
		if giReferFlag = REFER then     // 参照orエラー時
		begin
			if cExcept <> nil then
			begin
				cExcept.ResetTerm;
				cExcept.Free;
				cExcept := nil;
			end;
		end;
	end;
end;
}


//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからのツリーを全て展開
//	Name	  :	N.Nabe
//	Date	  :	2004/ 11 / 25
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.TPOpenClick(Sender: TObject);
begin
	VTreeView.FullExpand();
end;

//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからのツリーを全て閉じる
//	Name	  :	N.Nabe
//	Date	  :	2004/ 11 / 25
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP004001f.TPCloseClick(Sender: TObject);
begin
	VTreeView.FullCollapse();
	VTreeView.Selected.Expand(False);
end;

//**********************************************************************
//*		Proccess	:	加算体系ﾏｽﾀ 挿入ﾁｪｯｸ
//*		Name		:	H.Endo
//*		Date		:	2001/06/28
//*		Parameter	:	DragCode	:	挿入元
//*						DropCode	:	挿入先
//*		Return		:	正常(True)/異常(False)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP004001f.fnCheckMasterTreeInsertValid(DragCode,DropCode: String): Boolean;
var
	iCount  : Integer;
	cNode   : TTreeNode;
	WorkRec	: ^TreeViewRec;
begin
	for iCount := 1 to VTreeView.Items.Count do
	begin
		WorkRec   := VTreeView.Items [iCount - 1].Data;

		if  (WorkRec^.strExCode = DropCode) then
		begin
			cNode       := VTreeView.Items [iCount - 1];
			WorkRec   := cNode.Data;

			if  WorkRec^.nDivision = 0 then
			begin
				cNode       := cNode.Parent;
				WorkRec   := cNode.Data;
			end;

			while (True) do
			begin
				if  (WorkRec^.strExCode = DragCode) then
				begin
					Result	:= FALSE;
					Exit;
				end;

				cNode   := cNode.Parent;

				if  (cNode = nil) then
					break
				else
					WorkRec   := cNode.Data;
			end;
		end;
	end;

	result  := True;

end;
//-----------------------------------------------------------------------------
// ﾌﾘｶﾞﾅ処理
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.KanaCtlCompositionStr(Sender: TObject;
  Value: String);
var
	lvKana: String;
begin
    inherited;

	if Length(f0FKANA.Text) < 40 then
	begin
		lvKana       := f0FKANA.Text + Value;
		f0FKANA.Text := Copy(lvKana, 1, 40);
	end;

end;
//-----------------------------------------------------------------------------
//  内部コード取得
//-----------------------------------------------------------------------------
Function TJNTCRP004001f.fnGetNCODE(pCODE:String; pMKBN, pAttr:Integer):Extended;
var
    Qry :TMQuery;
    lvCode : String;
begin

    Result := 0;
    lvCODE := '';

	if pAttr = 2 then
		lvCODE:= pCODE
	else
	begin
		if pCODE <> '' then
			lvCODE	:= Format ('%.16d', [StrToInt64 (Trim(pCODE))])
		else
			lvCODE := '';
	end;

    Qry := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            if (pMKBN >= MASTER_SEGMENT_Str) and (pMKBN <= MASTER_SEGMENT_End) then
            begin
                SQL.Add('select NCODE from HOJYOMA');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('       AND MasterKbn =:MKBN');
                SetFld('MKBN').asInteger   := pMKBN;
            end
            else if pMKBN = 22 then
            begin
                SQL.Add('select NCODE from MTOKUI');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
            end
//<226> ↓
            else if (pMKBN = MASTER_CurrKBN) then       //通貨区分
            begin
                SQL.Add('select NCODE from GAIMONEY ');
                SQL.Add('where (RDELKBN = 0) and (GCODE = :stGCode)');
            end
//<226> ↑
            else
            begin
                SQL.Add('select NCODE from MMEISHO');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('       AND SetNM =:MKBN');
                SetFld('MKBN').asInteger   := pMKBN;
            end;
            SetFld('stGCode').AsString := lvCODE;
            Open;						// ｸｴﾘの開始

            if EOF = False then
                Result := FieldByName('NCODE').asFloat;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  外部コード取得
//-----------------------------------------------------------------------------
Function TJNTCRP004001f.fnGetGCODE(pCODE:Extended; pMKBN:Integer):String;
var
    Qry :TMQuery;
begin

    Result := '';


    Qry := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            if (pMKBN >= MASTER_SEGMENT_Str) and (pMKBN <= MASTER_SEGMENT_End) then
            begin
                SQL.Add   ('SELECT GCODE FROM HOJYOMA  ');
                SQL.Add   ('WHERE  MasterKbn = :MKBN AND NCode = :pCode');
                SQL.Add   ('And  RDelKbn = 0');  //<KSN> ADD
            end
//<226> ↓
            else if (pMKBN = MASTER_CurrKBN) then       //通貨区分
            begin
                SQL.Add('select GCODE from GAIMONEY ');
                SQL.Add('where (RDELKBN = 0) and (NCODE = :pCode)');
            end
//<226> ↑
            else
            begin
                SQL.Add   ('SELECT GCODE FROM MMEISHO  ');
                SQL.Add   ('WHERE  SetNM = :MKBN AND NCode = :pCode');
            end;
//<256> DEL			ParamByName ('pCode').AsFloat  := pCODE;
			ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<256> ADD
//<226> ↓
            if (pMKBN <> MASTER_CurrKBN) then       //通貨以外
                SetFld('MKBN').asInteger := pMKBN;
//<226> ↑
            Open;						// ｸｴﾘの開始

            if EOF = False then
                Result := FieldByName('GCODE').asString;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  名称を取得
//-----------------------------------------------------------------------------
Function TJNTCRP004001f.fnGetNAME(pCODE:String;pMKBN,pAttr:Integer; var RName:String ):Boolean;
var
    Qry :TMQuery;
    lvCode : String;
begin

    Result := False;
    RName  := '';
    lvCODE := '';

	if pAttr = 2 then
		lvCODE := pCODE
	else
	begin
		if pCODE <> '' then
			lvCODE	:= Format ('%.16d', [StrToInt64 (Trim(pCODE))])
		else
			lvCODE := '';
	end;

    Qry := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            if (pMKBN >= MASTER_SEGMENT_Str) and (pMKBN <= MASTER_SEGMENT_End) then
            begin
                SQL.Add('select SimpleName NMK from HOJYOMA');
//<188>         SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('where  SumKbn = 0 AND RDelKbn=0 AND GCode=:stGCode');  //<188>
                SQL.Add('       AND MasterKbn =:MKBN');
            end
//<226> ↓
            else if (pMKBN = MASTER_CurrKBN) then       //通貨区分
            begin
                SQL.Add('select RTRIM(NM) + ''(''+ RTRIM(MnSymbol) + '')'' NMK from GAIMONEY '
                      + 'where (RDELKBN = 0) and (GCODE = :stGCode)');
            end
//<226> ↑
            else
            begin
                SQL.Add('select NMK from MMEISHO');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('       AND SetNM =:MKBN');
            end;
            SetFld('stGCode').AsString := lvCODE;
            //通貨区分以外
            if (pMKBN <> MASTER_CurrKBN) then
                SetFld('MKBN').asInteger   := pMKBN;
            Open;						// ｸｴﾘの開始

            if EOF = False then
            begin
                Result := True;
                RName  := FieldByName('NMK').asString;
            end;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  区分名称を取得する
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.KBNChange(Sender: TObject);
var
    lvNM: String;
const
    lvTKNM : Array[1..2] of String = ('通常得意先','社内得意先');
    lvSRNM : Array[1..2] of String = ('通常仕入先','社内仕入先');

	lvMYNNM : Array[0..1] of String = ('法人','個人');	// <MYN>
begin

    if Sender = f1TKBN then
    begin
        f1TKBNNM.caption := '';
// <135>
//        if f1TKBN.value <> 0 then
        if (f1TKBN.value > 0) and (f1TKBN.value < 3) then
            f1TKBNNM.caption := lvTKNM[f1TKBN.asInteger];
    end;

    if Sender = f1SKBN then
    begin
        f1SKBNNM.caption := '';
// <135>
//        if f1SKBN.value <> 0 then
        if (f1SKBN.value > 0) and (f1SKBN.value < 3) then
            f1SKBNNM.caption := lvSRNM[f1SKBN.asInteger];
    end;

//<226> ↓
    //国内外区分
    if Sender = f0ECOUNTRY then
    begin
        if (f0ECOUNTRY.AsInteger > 0) and (f0ECOUNTRY.AsInteger <= Length(ucCstM_CTR)) then
            f0LCOUNTRY.Caption := ucCstM_CTR[f0ECOUNTRY.AsInteger]
        else
            f0LCOUNTRY.Caption := '';
    end;
    //通貨区分
    if Sender = f0ECURRENCY then
    begin
        fnGetNAME(f0ECURRENCY.text, MASTER_CurrKBN, 2, lvNM);
        f0LCURRENCY.Caption := lvNM;
    end;
//<226> ↑

// <MYN> ins -s
    //法人･個人区分
    if Sender = f0MYNKbn then
    begin
        f0LMYNKbnNm.Caption	:= '';

		if (f0MYNKbn.Text <> '') then
		begin
	        if (f0MYNKbn.Text = '0') or (f0MYNKbn.Text = '1') then
			begin
       		    f0LMYNKbnNm.Caption	:= lvMYNNM[f0MYNKbn.AsInteger];

                fnSetMYN(f0MYNKbn.Text);
			end
		end else
		begin
			fnSetMYN(f0MYNKbn.Text);
        end;
    end;
// <MYN> ins -e

    // <130>↓
    if (m_EdtSw = False) then
        m_EdtSw := True;                    // 変更ﾌﾗｸﾞON
    // <130>↑

end;
//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004001f.ConboKeyDown (TObject; var Word; TShiftState)					                */
//*																											*/
//*	目的	: 取引先録処理 共通(ComboBox用) OnKeyDown ｲﾍﾞﾝﾄ													*/
//*																											*/
//*	戻り値	: なし,																							*/
//*																											*/
//***********************************************************************************************************/
procedure TJNTCRP004001f.ConboKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
//var
	//cComboBox: TMComboBox;

begin
	//cComboBox	:= Sender as TMComboBox;

	if	(Key = VK_RETURN) then
	begin
		MjsDispCtrl.MjsNextCtrl (Self);
		Abort;
	end;

	if	((Key = VK_ESCAPE) or (Key = VK_END)) then
	begin
		Jituzai_BBitBtn_Ok.SetFocus ();

		Abort;
	end;

// <137>以下ｺﾒﾝﾄｱｳﾄ
{	if	((Key = VK_LEFT) or (Key = VK_UP)) then
	begin
		if	(cComboBox.ItemIndex = 0) then
		begin
			MJSDispCtrl.MjsPrevCtrl (Self);
			Abort;
		end;

        Exit;
	end;

	if	((Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	(cComboBox.ItemIndex = cComboBox.Items.Count - 1) then
		begin
			MJSDispCtrl.MjsNextCtrl (Self);
			Abort;
		end;

        Exit;
	end;
}
end;
//-----------------------------------------------------------------------------
// <100>fnSetFncType
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnSetFncType(pKBN:Integer);
begin
{<2257>pKBNを追加するためコーディングし直し
    if pKBN = 1 then
        // ｸﾘｱ
        uvFncInfo.Caption[0] := 'F1 ﾌﾘｰ項目登録'
    else
        // ｸﾘｱ
        uvFncInfo.Caption[0] := '';
    uvFncInfo.Caption[1] := '';
//<KSN> MOD St
//    uvFncInfo.Caption[2] := '';
    if pKbN = 3 then
        uvFncInfo.Caption[2] := 'F3 次検索'
    else
        uvFncInfo.Caption[2] := '';
//<KSN> MOD Ed
    uvFncInfo.Caption[3] := '';
    uvFncInfo.Caption[4] := '';
    uvFncInfo.Caption[5] := '';
    uvFncInfo.Caption[6] := '';
    uvFncInfo.Caption[7] := '';
<2257>}
//<201>↓上のｷｬﾌﾟｼｮﾝと同条件に
{
    if giReferFlag = REFER then
        uvFncInfo.Action[0]  := nil
    else
        uvFncInfo.Action[0]  := FreeSetMTokui;
}
{<2257>
    if pKBN = 1 then
        uvFncInfo.Action[0]  := FreeSetMTokui
    else
        uvFncInfo.Action[0]  := nil;
//<201>↑
    uvFncInfo.Action[1]  := nil;
//<KSN> MOD St
//    uvFncInfo.Action[2]  := nil;
    if pKbN = 3 then
        uvFncInfo.Action[2]  := FindMTokui
    else
        uvFncInfo.Action[2]  := nil;
//<KSN> MOD Ed
    uvFncInfo.Action[3]  := nil;
    uvFncInfo.Action[4]  := nil;
    uvFncInfo.Action[5]  := nil;
    uvFncInfo.Action[6]  := nil;
    uvFncInfo.Action[7]  := nil;
<2257>}
//<2257>↓
    if pKBN = 1 then		//ﾌﾘｰ項目登録のみを表示
	begin
        uvFncInfo.Caption[0] := 'F1 ﾌﾘｰ項目登録';
		uvFncInfo.Caption[2] := '';
        uvFncInfo.Caption[7] := '';
	end
	else if pKBN = 2 then	//ﾌﾘｰ項目登録・取引先ｺﾋﾟｰを表示
	begin
        uvFncInfo.Caption[0] := 'F1 ﾌﾘｰ項目登録';
		uvFncInfo.Caption[2] := '';
        uvFncInfo.Caption[7] := 'F8 取引先コピー';
	end
	else if pKBN = 3 then	//'F3 次検索'のみを表示
	begin
		uvFncInfo.Caption[0] := '';
		uvFncInfo.Caption[2] := 'F3 次検索';
		uvFncInfo.Caption[7] := '';
	end
    else					// ｸﾘｱ
	begin
    	uvFncInfo.Caption[0] := '';
		uvFncInfo.Caption[2] := '';
		uvFncInfo.Caption[7] := '';
	end;
	//0・7以外は毎回非表示
    uvFncInfo.Caption[1] := '';
    uvFncInfo.Caption[3] := '';
    uvFncInfo.Caption[4] := '';
    uvFncInfo.Caption[5] := '';
    uvFncInfo.Caption[6] := '';

    if pKBN = 1 then		//ﾌﾘｰ項目登録のみを表示
	begin
        uvFncInfo.Action[0]  := FreeSetMTokui;
		uvFncInfo.Action[2]  := nil;
    	uvFncInfo.Action[7]  := nil;
	end
	else if pKBN = 2 then	//ﾌﾘｰ項目登録・取引先ｺﾋﾟｰを表示
	begin
        uvFncInfo.Action[0]  := FreeSetMTokui;
		uvFncInfo.Action[2]  := nil;
  	  	uvFncInfo.Action[7]  := CopyMtokui;
	end
	else if pKBN = 3 then	//'F3 次検索'のみを表示
	begin
        uvFncInfo.Action[0]  := nil;
        uvFncInfo.Action[2]  := FindMTokui;
    	uvFncInfo.Action[7]  := nil;
	end
	else					// ｸﾘｱ
	begin
        uvFncInfo.Action[0]  := nil;
		uvFncInfo.Action[2]  := nil;
    	uvFncInfo.Action[7]  := nil;
	end;
    uvFncInfo.Action[1]  := nil;
    uvFncInfo.Action[3]  := nil;
    uvFncInfo.Action[4]  := nil;
    uvFncInfo.Action[5]  := nil;
    uvFncInfo.Action[6]  := nil;
//<2257>↑
end;
//-----------------------------------------------------------------------------
// <100>fnFrrDlg
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnFreeDlg(nFunc: Integer);
var
    lvNCode:    Currency;
    lvCaption:  String;
    lvType:     integer;
    lvTblName:  String;
    strGCode :  String;
    strDspCode  :  String;     //<153>
    iCode       :  Integer;    //<153>
    iCut        :  Integer;    //<153>
begin
    fnJNTFreeDlgInit(m_pMyAppRecord ,ComArea,@dbCorp_Select, m_cJNTArea);//<FREEINIT>
    try
        lvNCode := 0;
        lvType  := 0;
        Case nFunc of
            0:
            begin
                if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                begin
                    strGCode := f0TGCode.Text;
                    strGCode := TrimRight(strGCode);
                    strDspCode := strGCode;
                end
                else
                begin
                    strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);
                    strDspCode  := strGCode;

	    	    	if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
		    	    begin
        				if strDspCode <> '' then
	        			begin
		        			iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
			        		System.Delete(strDspCode, 1, iCut);
        				end;
        			end
		        	else
        			begin
		        		if strDspCode <> '' then
				        begin
        					iCode := StrToInt64(Trim(strDspCode));
		        			strDspCode := CurrToStr(iCode);
				        end;
        			end;

                end;

                lvNCode     :=  fnGetNCODE(strGCode,22,MasterInfo_DMemDataCodeAttr.AsInteger);     //内部ｺｰﾄﾞ
//<123>                lvCaption   := '取引先ｺｰﾄﾞ';         //Caption
                lvCaption   := Jituzai_LLabel_GCode.Caption;
                lvTblName   :=  'MTOKUI';            //参照TableName
				lvType		:= MMEI_TORIHIKI_S;		//<217>
            end;

            1:  ;
            2:  ;
            3:  ;
            4:  ;
            5:  ;
            6:  ;
            7:  ;
        end;

        //  ダイアログ表示内容変更
// <148>↓
//        fnJNTFreeDlgInfo(lvTblName, 'NCode', 'GCode', 'Nmk', lvCaption, 22);
        fnJNTFreeDlgInfo(lvTblName, 'NCode', 'GCode', 'Nmk', lvCaption, MMEI_TORIHIKI_S);
// <148>↑
        if lvNCode <> 0 then
        begin
            if UpdFreeFlg = False then//ﾌﾘｰﾀﾞｲｱﾛｸﾞ初回起動時
            begin
                //  ダイアログ表示
                if fnJNTFreeDlgShow(lvNCode) = mrOK then
                begin
                    //  フリー項目更新
                    freeItem := fnJNTFreeDlgGetItem;
                    UpdFreeFlg := True;
                end;
            end
            else
            begin
            	//  表示項目設定
        	    fnJNTFreeDlgSetItem(@freeItem, lvType);
				fnJNTFreeDlgSetChgRec(@freeChgItem); //<253>
                //  ダイアログ表示
                if fnJNTFreeDlgShow2() = mrOK then
                begin
                    //  フリー項目更新
                    freeItem := fnJNTFreeDlgGetItem;
                end;
            end;
        end
        else
        begin
    		freeItem.GCode     := strGCode;
//    		freeItem.GCode     := strDspCode;   //<153>ﾌﾘｰ項目DLG側で桁数調整する必要あり
                                                //DEGIT対応桁数を呼び元から送っても変化無し。
			freeItem.LCaption  := lvCaption;
            freeItem.NCode     := lvNCode;
            freeItem.Nm        := f0LongName.Text;
			freeItem.Nmk       := f0SimpleName.Text;

        	//  表示項目設定
    	    fnJNTFreeDlgSetItem(@freeItem, lvType);
        	//  ダイアログ表示
	        if fnJNTFreeDlgShow2() = mrOK then
    	    begin
        	    //  フリー項目更新
	            freeItem := fnJNTFreeDlgGetItem;
    	        UpdFreeFlg := True;
        	end;
        end;

    except
    end;
end;
//-----------------------------------------------------------------------------
// <100>MSPFunctionBar Event
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.MSPFunctionBarFunctionClick(Sender: TObject;
  FuncNo: Integer);
begin

    if MSPFunctionBar.GetFuncCaption(FuncNo) <> '' then
        uvFncInfo.Action[FuncNo-1].Execute;

end;
//-----------------------------------------------------------------------------
// <100>
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.FreeSetMtokuiExecute(Sender: TObject);
begin

    fnFreeDlg(0);

end;
//-----------------------------------------------------------------------------
//  名称の制御
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.f0LongNameChange(Sender: TObject);
begin

	// 正式会社名を全て消されたらﾌﾘｶﾞﾅも消去する
    if f0LongName.Text = '' then
    begin
        f0FKANA.Text    	:= '';			// ﾌﾘｶﾞﾅ ｸﾘｱ
        f0SimpleName.Text	:= '';			// 簡略名称 ｸﾘｱ
        f0RenChar.Text		:= '';			// 連想ｼﾝﾎﾞﾙ ｸﾘｱ
    end;

    // <130>↓
    if (m_EdtSw = False) then
        m_EdtSw := True;                    // 変更ﾌﾗｸﾞON
    // <130>↑
end;
//-----------------------------------------------------------------------------
//  得意先・仕入先採用時の分類の制御
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.f1TSKBNClick(Sender: TObject);
begin
//<502_001> ADD St
    if (m_bShowStart = true) then
    begin
        if (TMCheckBox(Sender).Checked = false) then
        begin
            if (not SaiyoCheck(Sender)) then Exit;   // メンテ不可は抜ける
        end
        else
            TagClear_Saiyo(TMCheckBox(Sender).Tag);
    end;
//<502_001> ADD Ed
    if Sender = f1TSKBN then
    begin
        if f1TSKBN.Checked then
        begin
        	//↓<237>
            if (f0ECOUNTRY.AsInteger = 2) then
            begin
                if (f1TSKBN.Checked = True) then
                begin
                    MjsMessageBox(Self,'国外取引先の場合は、得意先として採用できません。',mjWarning,mjDefOk);
                    f1TSKBN.Checked := False;
					Exit;
                end;
            end;
            //↑<237>

            // 得意先分類を使用可にする
            MjsDispCtrl.MjsSetEnableds(Self, 'f3TBrCode', True);

            // ﾌｨｰﾙﾄﾞを使用可にする
//<246>     if f0ECOUNTRY.AsInteger = 1 then
            if f0ECOUNTRY.AsInteger <> 2 then //<246> 判定2以外に変更。新規のときに使用可にさせたいため。
            begin       //国内得意先なら使用可
                fnChgCmpEna(True, f1TKBN);              // 得意先区分
                f1TKBN.Value := 0;
            end
            else
            begin       //海外取引先は使用不可
                fnChgCmpEna(False, f1TKBN);
                f1TKBN.Value := 1;
            end;
            fnChgCmpEna(True, f1NClosingDay1);          // 得意先締日1
            fnChgCmpEna(True, f1NSSite);                // 随時回収ｻｲﾄ
            fnChgCmpEna(True, f1NSeino);	            // 特殊請求No
            fnChgCmpEna(True, f1NHolidayKbn);	        // 特殊請求休日
            f1NHolidayKbn.ItemIndex := 0;
        end
        else
        begin
            // 得意先分類のｸﾘｱ
            JNTSelXClrCtrls(Self, 'f3TBrCode');
            JNTSelXClrCtrls(Self, 'f3TBrName');

            // 得意先分類を使用不可にする
            MjsDispCtrl.MjsSetEnableds(Self,'f3TBrCode',False);

            // 締日情報のｸﾘｱ
            f1TSKBN.Checked         := False;
            f1TKBN.Value            := 0;
            f1TKBNNM.Caption        := '';
            f1NClosingDay1.Value    := 0;
            f1NClosingDay2.Value    := 0;
            f1NClosingDay3.Value    := 0;
            f1NMonth1.ItemIndex     := -1;
            f1NMonth2.ItemIndex     := -1;
            f1NMonth3.ItemIndex     := -1;
            f1NDay1.Value           := 0;
            f1NDay2.Value           := 0;
            f1NDay3.Value           := 0;
            f1NHoliday1.ItemIndex   := 0;
            f1NHoliday2.ItemIndex   := 0;
            f1NHoliday3.ItemIndex   := 0;
            f1NSSite.Value          := 0;
            f1NSeino.Value          := 0;
            f1NHolidayKbn.ItemIndex := -1;
            fnSeiKbn_EntryControl;
        end
    end;

    if Sender = f1SSKBN then
    begin
        if f1SSKBN.Checked then
        begin
            // 仕入先分類を使用可にする
            MjsDispCtrl.MjsSetEnableds(Self,'f3SBrCode',True);

            // ﾌｨｰﾙﾄﾞを使用可にする
//<246>     if f0ECOUNTRY.AsInteger = 1 then
            if f0ECOUNTRY.AsInteger <> 2 then //<246> 判定2以外に変更。新規のときに使用可にさせたいため。
            begin       //国内得意先なら使用可
                fnChgCmpEna(True, f1SKBN);              // 仕入先区分
                f1SKBN.Value := 0;
            end
            else
            begin       //海外取引先は使用不可
                fnChgCmpEna(False, f1SKBN);              // 仕入先区分
                f1SKBN.Value := 1;
            end;

            fnChgCmpEna(True, f1SClosingDay1);          // 仕入先締日1
            fnChgCmpEna(True, f1SSSite);                // 随時回収ｻｲﾄ
            fnChgCmpEna(True, f1SSeino);		        // 特殊請求No
            fnChgCmpEna(True, f1SHolidayKbn);		    // 特殊請求休日
            f1SHolidayKbn.ItemIndex := 0;
        end
        else
        begin
            // 仕入先分類のｸﾘｱ
            JNTSelXClrCtrls(Self, 'f3SBrCode');
            JNTSelXClrCtrls(Self, 'f3SBrName');

            // 仕入先分類を使用不可にする
            MjsDispCtrl.MjsSetEnableds(Self,'f3SBrCode',False);

            // 締日情報をｸﾘｱする
            f1SKBNNM.Caption        := '';
            f1SSKBN.Checked         := False;
            f1SKBN.Value            := 0;
            f1SClosingDay1.Value    := 0;
            f1SClosingDay2.Value    := 0;
            f1SClosingDay3.Value    := 0;
            f1SMonth1.ItemIndex     := -1;
            f1SMonth2.ItemIndex     := -1;
            f1SMonth3.ItemIndex     := -1;
            f1SDay1.Value           := 0;
            f1SDay2.Value           := 0;
            f1SDay3.Value           := 0;
            f1SHoliday1.ItemIndex   := -1;
            f1SHoliday2.ItemIndex   := -1;
            f1SHoliday3.ItemIndex   := -1;
            f1SSSite.Value          := 0;
            f1SSeino.Value          := 0;
            f1SHolidayKbn.ItemIndex := -1;

            fnSeiKbn_EntryControl_SI;
        end
    end;

    // <130>↓
    if (m_EdtSw = False) then
        m_EdtSw := True;                    // 変更ﾌﾗｸﾞON
    // <130>↑
end;
//-----------------------------------------------------------------------------
//  合計・実在選択時のコンポーネントの制御
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnCompVisible(pFlg:Boolean);
begin

    MPanel1.Visible         := pFlg;
    MPanel2.Visible         := pFlg;
    PGyousyu.Visible        := pFlg;             // <132>
    MPanel_NY.Visible       := pFlg;
    MPanel_SH.Visible       := pFlg;
    LblMASKBN_N.Visible     := pFlg;
    LblMASKBN_S.Visible     := pFlg;
    f1TKBN.Visible          := pFlg;
    f1TKBNNM.Visible        := pFlg;
    f1SKBN.Visible          := pFlg;
    f1SKBNNM.Visible        := pFlg;
    PMTab.Items[2].Visible  := pFlg;
    PMTab.Items[3].Visible  := pFlg;
//<226>↓
    if uvEnaHOUEI then pnlJPorFR.Visible := pFlg;
//<226>↑
// <MYN> ins -s
	MPanelMYN.Visible		:= pFlg;
	if not (pnlJPorFR.Visible) then
    	MPanelMYN.Top		:= pnlJPorFR.Top
	else
		MPanelMYN.Top		:= 363;

	fnMaskDsp(pFlg);
	fnKojinUpdDsp(pFlg);	// <MYN6>
// <MYN> ins -e

    if pFlg then
    begin
        LblSaiyo_S.Top      := 166;
        f1SSKBN.Top         := 166;
        LblSHojyoKbn1.Top   := 309;
        LblSHojyoKbn2.Top   := 309;
        LblSHojyoKbn3.Top   := 309;		//<195>
        f1SHojyoKbn1.Top    := 309;
        f1SHojyoKbn2.Top    := 309;
        f1SHojyoKbn3.Top    := 309;		//<195>
    end
    else
    begin
        LblSaiyo_S.Top      := 50;
        f1SSKBN.Top         := 50;
        LblSHojyoKbn1.Top   := 77;
        LblSHojyoKbn2.Top   := 77;
		LblSHojyoKbn3.Top   := 77;		//<195>
        f1SHojyoKbn1.Top    := 77;
        f1SHojyoKbn2.Top    := 77;
		f1SHojyoKbn3.Top    := 77;		//<195>
    end;


end;
//<100>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//【関数名】fnSeiKbn_EntryControl (※fnSimeChkの改良型)
//【内　容】通常/特殊/随時の入力規制
//
//【 PARA 】なし
//【RETURN】なし
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
procedure TJNTCRP004001f.fnSeiKbn_EntryControl;
begin
    uvENDKAISU_T := 0;

    if f1TSKBN.Checked = True then
    begin
//<159>        f1TSKBN.Enabled         := uvChangeFL_Sime;        // 採用区分
        fnChgCmpEna((uvChangeFL_Sime and uvChangeFL_Crd), f1TSKBN); // 採用区分<203>uvChangeFL_Crdを論理演算に追加。
        //fnChgCmpEna(True, f1TKBN);         // 得意先区分//<209>uvChangeFL_Sime→Trueに。

        //国内得意先なら使用可
        fnChgCmpEna((f0ECOUNTRY.AsInteger = 1), f1TKBN);         // 得意先区分//<209>uvChangeFL_Sime→Trueに。

        //<159>ST---
//        if (uvSyokuchiKbn = 0) then
//            f1TSKBN.Enabled         := uvChangeFL_Sime      // 採用区分
//        else
//            f1TSKBN.Enabled         := False;               // 採用区分
        //<159>ED---

    end
    else
    begin
        // ﾌｨｰﾙﾄﾞを使用不可にする
        fnChgCmpEna(False, f1TKBN);                     // 得意先区分
        fnChgCmpEna(False, f1NClosingDay1);             // 得意先締日1
        fnChgCmpEna(False, f1NSSite);                   // 随時回収ｻｲﾄ
        fnChgCmpEna(False, f1NSeino);		            // 特殊請求No
        fnChgCmpEna(False, f1NHolidayKbn);   	        // 特殊請求休日
    end;

    //===================================================
    //締日１
    //===================================================
    //----------------------------------
    //入力されなかった
    //----------------------------------
//<502_005> MOD St
{
    fnChgCmpEna(uvChangeFL_Sime, f1NMonth1);        // ｻｲｸﾙ1
    fnChgCmpEna(uvChangeFL_Sime, f1NDay1);          // 回収1
    fnChgCmpEna(uvChangeFL_Sime, f1NHoliday1);      // 休日1
    fnChgCmpEna(uvChangeFL_Sime, f1NClosingDay2);   // 締日2
}
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NMonth1);        // ｻｲｸﾙ1
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NDay1);          // 回収1
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NHoliday1);      // 休日1
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NClosingDay2);   // 締日2
//<502_005> MOD Ed

    if (f1NClosingDay1.AsInteger = 0) then
    begin
        fnChgCmpEna(False, f1NMonth1);              // ｻｲｸﾙ1
        f1NMonth1     .ItemIndex := -1;
        f1NDay1       .Value     :=  0;             // 回収1
        fnChgCmpEna(False, f1NDay1);
        fnChgCmpEna(False, f1NHoliday1);            // 休日1
        f1NHoliday1   .ItemIndex := -1;
        fnChgCmpEna(False, f1NClosingDay2);         // 締日2
        f1NClosingDay2.Value     := 0;
    end
    else begin
        uvENDKAISU_T := 1;                                  // 締日回数

		//<193>未入力時は「当月」をセット
        if (f1NMonth1.ItemIndex = -1) then
		begin
			f1NMonth1.ItemIndex := 0;
		end;

		//<193>未入力時は「翌営業日」をセット
        if (f1NHoliday1.ItemIndex = -1) then
		begin
	        f1NHoliday1.ItemIndex := 0;
		end;
    end;
    //===================================================
    //締日２
    //===================================================
//<502_005> MOD St
{
    fnChgCmpEna(uvChangeFL_Sime, f1NMonth2);        // ｻｲｸﾙ2
    fnChgCmpEna(uvChangeFL_Sime, f1NDay2);          // 回収2
    fnChgCmpEna(uvChangeFL_Sime, f1NHoliday2);      // 休日2
    fnChgCmpEna(uvChangeFL_Sime, f1NClosingDay3);   // 締日3
}
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NMonth2);        // ｻｲｸﾙ2
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NDay2);          // 回収2
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NHoliday2);      // 休日2
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NClosingDay3);   // 締日3
//<502_005> MOD Ed

    //----------------------------------
    //入力されなかった
    //----------------------------------
    if (f1NClosingDay2.AsInteger = 0) then
    begin
        fnChgCmpEna(False, f1NMonth2);              // ｻｲｸﾙ2
        f1NMonth2    .ItemIndex  := -1;
        f1NDay2      .Value      :=  0;             // 回収2
        fnChgCmpEna(False, f1NDay2);
        fnChgCmpEna(False, f1NHoliday2);            // 締日2
        f1NHoliday2  .ItemIndex  := -1;
        fnChgCmpEna(False, f1NClosingDay3);         // 締日3
        f1NClosingDay3.Value     := 0;
    end
    else begin
        uvENDKAISU_T := 2;                                  // 締日回数

		//<193>未入力時は「当月」をセット
        if (f1NMonth2.ItemIndex = -1) then
		begin
			f1NMonth2.ItemIndex := 0;
		end;

		//<193>未入力時は「翌営業日」をセット
        if (f1NHoliday2.ItemIndex = -1) then
		begin
	        f1NHoliday2.ItemIndex := 0;
		end;
    end;

    //===================================================
    //締日３
    //===================================================
//<502_005> MOD St
{
    fnChgCmpEna(uvChangeFL_Sime, f1NMonth3);        // ｻｲｸﾙ3
    fnChgCmpEna(uvChangeFL_Sime, f1NDay3);          // 回収3
    fnChgCmpEna(uvChangeFL_Sime, f1NHoliday3);      // 休日3
}
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NMonth3);        // ｻｲｸﾙ3
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NDay3);          // 回収3
    fnChgCmpEna(uvChangeFL_Sime and f1TSKBN.Checked, f1NHoliday3);      // 休日3
//<502_005> MOD Ed

    //----------------------------------
    //入力されなかった
    //----------------------------------
    if (f1NClosingDay3.AsInteger = 0) then
    begin
        fnChgCmpEna(False, f1NMonth3);              // ｻｲｸﾙ3
        f1NMonth3    .ItemIndex  := -1;
        f1NDay3      .Value      :=  0;             // 回収3
        fnChgCmpEna(False, f1NDay3);
        fnChgCmpEna(False, f1NHoliday3);            // 休日3
        f1NHoliday3  .ItemIndex  := -1;
    end
    else begin
        uvENDKAISU_T := 3;                                  // 締日回数

		//<193>未入力時は「当月」をセット
        if (f1NMonth3.ItemIndex = -1) then
		begin
			f1NMonth3.ItemIndex := 0;
		end;

		//<193>未入力時は「翌営業日」をセット
        if (f1NHoliday3.ItemIndex = -1) then
		begin
	        f1NHoliday3.ItemIndex := 0;
		end;
    end;

    if f1TSKBN.Checked = True then
    begin
        //===================================================
        //請求区分による入力制御
        //===================================================
        //----------------------------------
        //締回数が0回以上【通常】
        //----------------------------------
        if uvENDKAISU_T > 0 then
        begin
            uvSeiKbn := 0;                                  //☆----- 通常 -----☆
            fnChgCmpEna(False, f1NSSite);               // 随時請求回収ｻｲﾄは入力不可
            fnChgCmpEna(False, f1NSeino);               // 特殊請求Noは入力不可
            fnChgCmpEna(False, f1NHolidayKbn);
            f1NHolidayKbn.ItemIndex := -1;
            f1NSSite.Value          := 0;
            f1NSeino.Value          := 0;
        end
        else
        begin
// <180>           f1NSSite.Enabled        := True;                // 随時請求回収ｻｲﾄは入力可
// <180>           f1NSeino.Enabled        := True;                // 特殊請求Noは入力可
// <180>           f1NHolidayKbn.Enabled   := True;

            fnChgCmpEna(uvChangeFL_Z, f1NSSite);
            fnChgCmpEna(uvChangeFL_T, f1NSeino);
            fnChgCmpEna(uvChangeFL_Z, f1NHolidayKbn);


            if f1NHolidayKbn.ItemIndex = -1 then
                f1NHolidayKbn.ItemIndex := 0;

            //----------------------------------
            //特殊請求Noがあれば【特殊】
            //----------------------------------
            if f1NSeino.AsInteger <> 0 then
            begin
                uvSeiKbn := 1;                              //☆----- 特殊 -----☆
            end
            //----------------------------------
            //特殊請求Noがなければ【随時】
            //----------------------------------
            else begin
                uvSeiKbn := 2;                              //☆----- 随時 -----☆
            end;
        end;
    end;

end;
//<100>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//【関数名】fnSeiKbn_EntryControl (※fnSimeChkの改良型)
//【内　容】通常/特殊/随時の入力規制
//
//【 PARA 】なし
//【RETURN】なし
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
procedure TJNTCRP004001f.fnSeiKbn_EntryControl_SI;
begin

    uvENDKAISU_S := 0;

    if f1SSKBN.Checked = True then
    begin
//<159>        f1SSKBN.Enabled         := uvChangeFL_Sime_S;       // 採用区分
        fnChgCmpEna((uvChangeFL_Sime_S and uvChangeFL_Pay), f1SSKBN); // 採用区分<203>uvChangeFL_Payを論理演算に追加。
        //国内仕入先なら使用可
        fnChgCmpEna((f0ECOUNTRY.AsInteger = 1), f1SKBN);       // 仕入先区分<209>uvChangeFL_Sime_S→Trueに。
//        if uvSyokuchiKbn = 0 then
//            f1SSKBN.Enabled         := uvChangeFL_Sime_S    // 採用区分
//        else
//            f1SSKBN.Enabled         := False;               // 採用区分


    end
    else
    begin
        // ﾌｨｰﾙﾄﾞを使用不可にする
        fnChgCmpEna(False, f1SKBN);                 // 得意先区分
        fnChgCmpEna(False, f1SClosingDay1);         // 得意先締日1
        fnChgCmpEna(False, f1SSSite);               // 随時回収ｻｲﾄ
        fnChgCmpEna(False, f1SSeino);		        // 特殊請求No
        fnChgCmpEna(False, f1SHolidayKbn);   	    // 特殊請求休日
    end;

    //===================================================
    //締日１
    //===================================================
    //----------------------------------
    //入力されなかった
    //----------------------------------
//<502_005> MOD St
{
    fnChgCmpEna(uvChangeFL_Sime_S, f1SMonth1);      // ｻｲｸﾙ1
    fnChgCmpEna(uvChangeFL_Sime_S, f1SDay1);        // 回収1
    fnChgCmpEna(uvChangeFL_Sime_S, f1SHoliday1);    // 休日1
    fnChgCmpEna(uvChangeFL_Sime_S, f1SClosingDay2); // 締日2
}
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SMonth1);      // ｻｲｸﾙ1
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SDay1);        // 回収1
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SHoliday1);    // 休日1
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SClosingDay2); // 締日2
//<502_005> MOD Ed

    if (f1SClosingDay1.AsInteger = 0) then
    begin
        fnChgCmpEna(False, f1SMonth1);              // ｻｲｸﾙ1
        f1SMonth1     .ItemIndex := -1;
        f1SDay1       .Value     :=  0;             // 回収1
        fnChgCmpEna(False, f1SDay1);
        fnChgCmpEna(False, f1SHoliday1);            // 休日1
        f1SHoliday1   .ItemIndex := -1;
        fnChgCmpEna(False, f1SClosingDay2);         // 締日2
        f1SClosingDay2.Value     := 0;
    end
    else begin
        uvENDKAISU_S := 1;                                  // 締日回数

		//<193>未入力時は「当月」をセット
        if (f1SMonth1.ItemIndex = -1) then
		begin
			f1SMonth1.ItemIndex := 0;
		end;

		//<193>未入力時は「翌営業日」をセット
        if (f1SHoliday1.ItemIndex = -1) then
		begin
	        f1SHoliday1.ItemIndex := 0;
		end;
    end;
    //===================================================
    //締日２
    //===================================================
//<502_005> MOD St
{
    fnChgCmpEna(uvChangeFL_Sime_S, f1SMonth2);      // ｻｲｸﾙ2
    fnChgCmpEna(uvChangeFL_Sime_S, f1SDay2);        // 回収2
    fnChgCmpEna(uvChangeFL_Sime_S, f1SHoliday2);    // 休日2
    fnChgCmpEna(uvChangeFL_Sime_S, f1SClosingDay3); // 締日3
}
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SMonth2);      // ｻｲｸﾙ2
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SDay2);        // 回収2
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SHoliday2);    // 休日2
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SClosingDay3); // 締日3
//<502_005> MOD Ed

    //----------------------------------
    //入力されなかった
    //----------------------------------
    if (f1SClosingDay2.AsInteger = 0) then
    begin
        fnChgCmpEna(False, f1SMonth2);              // ｻｲｸﾙ2
        f1SMonth2    .ItemIndex  := -1;
        f1SDay2      .Value      :=  0;             // 回収2
        fnChgCmpEna(False, f1SDay2);
        fnChgCmpEna(False, f1SHoliday2);            // 締日2
        f1SHoliday2  .ItemIndex  := -1;
        fnChgCmpEna(False, f1SClosingDay3);         // 締日3
        f1SClosingDay3.Value     := 0;
    end
    else begin
        uvENDKAISU_S := 2;                                  // 締日回数

		//<193>未入力時は「当月」をセット
        if (f1SMonth2.ItemIndex = -1) then
		begin
			f1SMonth2.ItemIndex := 0;
		end;

		//<193>未入力時は「翌営業日」をセット
        if (f1SHoliday2.ItemIndex = -1) then
		begin
	        f1SHoliday2.ItemIndex := 0;
		end;
    end;

    //===================================================
    //締日３
    //===================================================
//<502_005> MOD St
{
    fnChgCmpEna(uvChangeFL_Sime_S, f1SMonth3);      // ｻｲｸﾙ3
    fnChgCmpEna(uvChangeFL_Sime_S, f1SDay3);        // 回収3
    fnChgCmpEna(uvChangeFL_Sime_S, f1SHoliday3);    // 休日3
}
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SMonth3);      // ｻｲｸﾙ3
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SDay3);        // 回収3
    fnChgCmpEna(uvChangeFL_Sime_S and f1SSKBN.Checked, f1SHoliday3);    // 休日3
//<502_005> MOD Ed

    //----------------------------------
    //入力されなかった
    //----------------------------------
    if (f1SClosingDay3.AsInteger = 0) then
    begin
        fnChgCmpEna(False, f1SMonth3);              // ｻｲｸﾙ3
        f1SMonth3    .ItemIndex  := -1;
        f1SDay3      .Value      :=  0;             // 回収3
        fnChgCmpEna(False, f1SDay3);
        fnChgCmpEna(False, f1SHoliday3);            // 休日3
        f1SHoliday3  .ItemIndex  := -1;
    end
    else begin
        uvENDKAISU_S := 3;                                  // 締日回数

		//<193>未入力時は「当月」をセット
        if (f1SMonth3.ItemIndex = -1) then
		begin
			f1SMonth3.ItemIndex := 0;
		end;

		//<193>未入力時は「翌営業日」をセット
        if (f1SHoliday3.ItemIndex = -1) then
		begin
	        f1SHoliday3.ItemIndex := 0;
		end;
    end;

    if f1SSKBN.Checked = True then
    begin
        //===================================================
        //請求区分による入力制御
        //===================================================
        //----------------------------------
        //締回数が0回以上【通常】
        //----------------------------------
        if uvENDKAISU_S > 0 then
        begin
            uvSeiKbn_S := 0;                                //☆----- 通常 -----☆
            fnChgCmpEna(False, f1SSSite);               // 随時請求回収ｻｲﾄは入力不可
            fnChgCmpEna(False, f1SSeino);               // 特殊請求Noは入力不可
            fnChgCmpEna(False, f1SHolidayKbn);
            f1SHolidayKbn.ItemIndex := -1;
            f1SSSite.Value          := 0;
            f1SSeino.Value          := 0;
        end
        else begin
// <180>           f1SSSite.Enabled        := True;                // 随時請求回収ｻｲﾄは入力不可
// <180>           f1SSeino.Enabled        := True;                // 特殊請求Noは入力不可
// <180>           f1SHolidayKbn.Enabled   := True;

            fnChgCmpEna(uvChangeFL_Z_S, f1SSSite);
            fnChgCmpEna(uvChangeFL_T_S, f1SSeino);
            fnChgCmpEna(uvChangeFL_Z_S, f1SHolidayKbn);

            if f1SHolidayKbn.ItemIndex = -1 then
                f1SHolidayKbn.ItemIndex := 0;

            //----------------------------------
            //特殊請求Noがあれば【特殊】
            //----------------------------------
            if f1SSeino.AsInteger <> 0 then
            begin
                uvSeiKbn_S := 1;                            //☆----- 特殊 -----☆
            end
            //----------------------------------
            //特殊請求Noがなければ【随時】
            //----------------------------------
            else begin
                uvSeiKbn_S := 2;                            //☆----- 随時 -----☆
            end;
        end;
    end;

end;

//-----------------------------------------------------------------------------
//【関数名】fnDep_EnableJudge <203>
//【内　容】資産関係採用区分変更可能判定
//
//【 PARA 】pNCode  : 取引先内部ｺｰﾄﾞ
//【RETURN】なし
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnDep_EnableJudge(pNCODE:Extended);
begin
    // ｽﾄｱﾄﾞにDBをｾｯﾄ
//<D10>MDataModule.SetDBInfoToSProc(dbCorp_Select, MP_DEP_CHK_MTOKUI_Saiyo);
	gfnJNTSELSetDbName(MP_DEP_CHK_MTOKUI_Saiyo, dbCorp_Select);		//<D10>

    //=====================================================
    //MP_DEP_CHK_MTOKUI_Saiyo(得意先「通常/特殊/随時」変更可能ﾁｪｯｸ)
    //=====================================================
    with MP_DEP_CHK_MTOKUI_Saiyo do
    begin
		ParamByName('@p_NCode').AsFloat		:= pNCODE;
        ExecProc;
        uvChangeFL_Kounyu   := (ParamByName('@p_RetCd1').AsInteger = 0);   // 資産購入先採用区分の変更可能フラグ(T:OK、F:NG)
        uvChangeFL_Baikyaku := (ParamByName('@p_RetCd2').AsInteger = 0);   // 資産売却先採用区分の変更可能フラグ(T:OK、F:NG)
        uvChangeFL_Lease    := (ParamByName('@p_RetCd3').AsInteger = 0);   // リース取引先採用区分の変更可能フラグ(T:OK、F:NG)
    end;
end;

//-----------------------------------------------------------------------------
//【関数名】fnProcess_EnableJudge
//【内　容】処理可能判定
//
//【 PARA 】pNCode  : 取引先内部ｺｰﾄﾞ
//          pTKBN   : 得意先採用
//          pSKBN   : 仕入先採用
//【RETURN】なし
//-----------------------------------------------------------------------------
//procedure TJNTCRP004001f.fnProcess_EnableJudge(pNCODE:Extended;pTKBN,pSKBN:Integer); <173>
procedure TJNTCRP004001f.fnProcess_EnableJudge(pNCODE:Extended;pTKBN,pTOFlg,pSKBN,pSOFlg:Integer);
var
    bData_S,                                                // MTOKUI_S存在  (T:あり、F:なし)
    bData_ZanHas    : Boolean;                              // 残高または発生(T:あり、F:なし)
    iPattern        : Integer;                              // ﾊﾟﾀｰﾝ

begin
(*↓<Rel-2>
    // ｽﾄｱﾄﾞにDBをｾｯﾄ
    MDataModule.SetDBInfoToQuery(dbCorp_Select, StdProc1);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, StdProc1_S);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, StdProc7);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, StdProc7_S);
//↓<203>
    MDataModule.SetDBInfoToQuery(dbCorp_Select, SPCrdTori);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, SPPayTori);
//↑<203>
↑<Rel-2>*)
//↓<Rel-2>
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        //グループ会計子社は全社DBへの接続とする
{<D10>↓
        MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc1);
        MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc1_S);	
        MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc7);
        MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc7_S);	
        MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, SPCrdTori);
        MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, SPPayTori);
<D10>↑}
//<D10>↓
		gfnJNTSELSetDbName(StdProc1,	m_SyncMaster.m_cPDBSelect);
		gfnJNTSELSetDbName(StdProc1_S,	m_SyncMaster.m_cPDBSelect);
		gfnJNTSELSetDbName(StdProc7, 	m_SyncMaster.m_cPDBSelect);
		gfnJNTSELSetDbName(StdProc7_S, 	m_SyncMaster.m_cPDBSelect);
		gfnJNTSELSetDbName(SPCrdTori, 	m_SyncMaster.m_cPDBSelect);
		gfnJNTSELSetDbName(SPPayTori, 	m_SyncMaster.m_cPDBSelect);
//<D10>↑
    end
    else
    begin
        //グループ会計子社以外は自社DBへの接続とする
{<D10>↓
        MDataModule.SetDBInfoToSProc(dbCorp_Select, StdProc1);
        MDataModule.SetDBInfoToSProc(dbCorp_Select, StdProc1_S);	
        MDataModule.SetDBInfoToSProc(dbCorp_Select, StdProc7);
        MDataModule.SetDBInfoToSProc(dbCorp_Select, StdProc7_S);	
        MDataModule.SetDBInfoToSProc(dbCorp_Select, SPCrdTori);
        MDataModule.SetDBInfoToSProc(dbCorp_Select, SPPayTori);
<D10>↑}
//<D10>↓
		gfnJNTSELSetDbName(StdProc1,	dbCorp_Select);
		gfnJNTSELSetDbName(StdProc1_S,	dbCorp_Select);
		gfnJNTSELSetDbName(StdProc7, 	dbCorp_Select);
		gfnJNTSELSetDbName(StdProc7_S, 	dbCorp_Select);
		gfnJNTSELSetDbName(SPCrdTori, 	dbCorp_Select);
		gfnJNTSELSetDbName(SPPayTori, 	dbCorp_Select);
//<D10>↑
    end;
//↑<Rel-2>

    // 得意先採用
    if pTKBN = 1 then
    begin
//↓<203>
        with SPCrdTori do
        begin
		  ParamByName('@NCode').AsFloat	:=  pNCODE;			// 得意先ｺｰﾄﾞ
          ExecProc;
            uvChangeFL_Crd := (ParamByName('@RetCd').AsInteger = 0);
        end;
//↑<203>
        //=====================================================
        //PRC_MA0130_013(得意先「通常/特殊/随時」変更可能ﾁｪｯｸ)
        //=====================================================
        with StdProc7 do
        begin
			ParamByName('@pTRNCD').AsFloat := pNCODE;			    // 得意先ｺｰﾄﾞ
            ExecProc;
            bData_S      := (ParamByName('@RET_S')     .AsInteger = -1);    // MTOKUI_S存在
            bData_ZanHas := (ParamByName('@RET_ZANHAS').AsInteger = -1);    // 残高または発生
        end;

        with uvData_Load do
        begin
            pvrDenHas := bData_ZanHas;
            pvrSHas   := bData_S;
        end;

        //=====================================================
        //PRC_MA0130_010(子会社の有無)
        //=====================================================
        with StdProc1 do
        begin
			ParamByName('@pTRNCD').AsFloat := pNCODE;			    // 得意先ｺｰﾄﾞ
            ExecProc;
            uvChildFL := (ParamByName('@RETURN_VALUE').AsInteger = -1);
        end;

        //=====================================================
        //bData_SとbData_ZanHasでﾊﾟﾀｰﾝの生成
        //MTOKUI_S：有、残高または発生：有　[11]
        //MTOKUI_S：有、残高または発生：無　[12]
        //MTOKUI_S：無、残高または発生：有　[21]
        //MTOKUI_S：無、残高または発生：無　[22]
        //=====================================================
        if bData_S = True then
            iPattern := 10
        else
            iPattern := 20;

        if bData_ZanHas = True then
            iPattern := iPattern + 1
        else
            iPattern := iPattern + 2;

        //=====================================================
        // 現在の得意先の請求区分により入力可能フィールドを制御する
        //=====================================================
// <169>        case uvSeiKbn of
        case uvData_Load.pvrSeiKbn of   // <169>
            //----------------------------------
            // 通常
            //----------------------------------
            0:
            begin
                case iPattern of
                    11:     { MTOKUI_S：有、残高または発生：有 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)　[不可]
                        uvChangeFL_T    := False;           // 特殊      　[不可]
                        uvChangeFL_Z    := False;           // 随時      　[不可]
                    end;
                    12:     { MTOKUI_S：有、残高または発生：無 }
                    begin
                        uvChangeFL_Sime := True;            // 通常(締日)  [可            ]
                        uvChangeFL_T    := not(uvChildFL);  // 特殊        [子がいたら不可]
                        uvChangeFL_Z    := not(uvChildFL);  // 随時        [子がいたら不可]
                    end;
                    // 通常でMTOKUI_Sが無い場合は有り得ないので21・22は不要
                end;

            end;
            //----------------------------------
            // 特殊
            //----------------------------------
            1:
            begin
                case iPattern of
                    11:     { MTOKUI_S：有、残高または発生：有 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)[不可]
                        uvChangeFL_T    := True;            // 特殊      [可  ]
//                        uvChangeFL_Z    := False;           // 随時　　　[不可] <181>
                        uvChangeFL_Z    := True;            // 随時　　　[可  ] <181>
                    end;
                    12:     { MTOKUI_S：有、残高または発生：無 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)[不可]
                        uvChangeFL_T    := True;            // 特殊　　　[可  ]
//                        uvChangeFL_Z    := False;           // 随時　　　[不可] <181>
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                    21:     { MTOKUI_S：無、残高または発生：有 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)[不可]
                        uvChangeFL_T    := True;            // 特殊　　　[可  ]
//                        uvChangeFL_Z    := False;           // 随時　　　[不可] <181>
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                    22:     { MTOKUI_S：無、残高または発生：無 }
                    begin
                        uvChangeFL_Sime := True;            // 通常(締日)[可  ]
                        uvChangeFL_T    := True;            // 特殊　　　[可  ]
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                end;
            end;
            //----------------------------------
            //随時
            //----------------------------------
            2:
            begin
                case iPattern of
                    11:     { MTOKUI_S：有、残高または発生：有 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)[不可]
                        uvChangeFL_T    := False;           // 特殊　　　[不可]
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                    12:     { MTOKUI_S：有、残高または発生：無 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)[不可]
                        uvChangeFL_T    := True;            // 特殊　　　[可  ]
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                    21:     { MTOKUI_S：無、残高または発生：有 }
                    begin
                        uvChangeFL_Sime := False;           // 通常(締日)[不可]
                        uvChangeFL_T    := False;           // 特殊　　　[不可]
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                    22:     { MTOKUI_S：無、残高または発生：無 }
                    begin
                        uvChangeFL_Sime := True;            // 通常(締日)[可  ]
                        uvChangeFL_T    := True;            // 特殊　　　[可  ]
                        uvChangeFL_Z    := True;            // 随時　　　[可  ]
                    end;
                end;
            end;
        end;

        // 子得意先の場合は 締日情報を使用不可とする <173>
        // 代替得意先の場合も締日情報を使用不可とする <175>
        if (pTOFlg = 2) or (pTOFlg = 12) or (pTOFlg = 3) then
        begin
            uvChangeFL_Sime := False;                       // 通常(締日)[不可]
            uvChangeFL_T    := False;                       // 特殊　　　[不可]
            uvChangeFL_Z    := False;                       // 随時　　　[不可]
        end;
    end;

    // 仕入先採用
    if pSKBN = 1 then
    begin
//↓<203>
        with SPPayTori do
        begin
			ParamByName('@NCode').AsFloat := pNCODE;			    // 得意先ｺｰﾄﾞ
            ExecProc;
            uvChangeFL_Pay := (ParamByName('@RetCd').AsInteger = 0);
        end;
//↑<203>
        //=====================================================
        //PRC_MA0150_013(仕入先「通常/特殊/随時」変更可能ﾁｪｯｸ)
        //=====================================================
        with StdProc7_S do
        begin
			ParamByName('@pTRNCD').AsFloat := pNCODE;			// 得意先ｺｰﾄﾞ
            ExecProc;
            bData_S      := (ParamByName('@RET_S')     .AsInteger = -1);    // MSIIRE_S存在
            bData_ZanHas := (ParamByName('@RET_ZANHAS').AsInteger = -1);    // 残高または発生
        end;

        with uvData_Load_S do
        begin
            pvrDenHas	:= bData_ZanHas;
            pvrSHas 	:= bData_S;
        end;

        //=====================================================
        //PRC_MA0150_010(子会社の有無)
        //=====================================================
        with StdProc1_S do
        begin
			ParamByName('@pTRNCD').AsFloat := pNCODE;			// 得意先ｺｰﾄﾞ
            ExecProc;

            uvChildFL_S := (ParamByName('@RETURN_VALUE').AsInteger = -1);
        end;

       //=====================================================
        //bData_SとbData_ZanHasでﾊﾟﾀｰﾝの生成
        //MTOKUI_S：有、残高または発生：有　[11]
        //MTOKUI_S：有、残高または発生：無　[12]
        //MTOKUI_S：無、残高または発生：有　[21]
        //MTOKUI_S：無、残高または発生：無　[22]
        //=====================================================
        if bData_S = True then
            iPattern := 10
        else
            iPattern := 20;

        if bData_ZanHas = True then
            iPattern := iPattern + 1
        else
            iPattern := iPattern + 2;

        //=====================================================
        // 現在の仕入先の請求区分により入力可能フィールドを制御する
        //=====================================================
// <169>        case uvSeiKbn_S of
        case uvData_Load_S.pvrSeiKbn of // <169>
            //----------------------------------
            // 通常
            //----------------------------------
            0:
            begin
                case iPattern of
                    11:     { MSIIRE_S：有、残高または発生：有 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)　[不可]
                        uvChangeFL_T_S    := False;         // 特殊      　[不可]
                        uvChangeFL_Z_S    := False;         // 随時      　[不可]
                    end;
                    12:     { MSIIRE_S：有、残高または発生：無 }
                    begin
                        uvChangeFL_Sime_S := True;          // 通常(締日)  [可            ]
                        uvChangeFL_T_S    := not(uvChildFL);// 特殊        [子がいたら不可]
                        uvChangeFL_Z_S    := not(uvChildFL);// 随時        [子がいたら不可]
                    end;
                    // 通常でMSIIRE_Sが無い場合は有り得ないので21・22は不要
                end;

            end;
            //----------------------------------
            // 特殊
            //----------------------------------
            1:
            begin
                case iPattern of
                    11:     { MSIIRE_S：有、残高または発生：有 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)[不可]
                        uvChangeFL_T_S    := True;          // 特殊      [可  ]
//                        uvChangeFL_Z_S    := False;         // 随時　　　[不可] <181>
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                    12:     { MSIIRE_S：有、残高または発生：無 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)[不可]
                        uvChangeFL_T_S    := True;          // 特殊　　　[可  ]
//                        uvChangeFL_Z_S    := False;         // 随時　　　[不可] <181>
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                    21:     { MSIIRE_S：無、残高または発生：有 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)[不可]
                        uvChangeFL_T_S    := True;          // 特殊　　　[可  ]
//                        uvChangeFL_Z_S    := False;         // 随時　　　[不可] <181>
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                    22:     { MSIIRE_S：無、残高または発生：無 }
                    begin
                        uvChangeFL_Sime_S := True;          // 通常(締日)[可  ]
                        uvChangeFL_T_S    := True;          // 特殊　　　[可  ]
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                end;
            end;
            //----------------------------------
            //随時
            //----------------------------------
            2:
            begin
                case iPattern of
                    11:     { MSIIRE_S：有、残高または発生：有 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)[不可]
                        uvChangeFL_T_S    := False;         // 特殊　　　[不可]
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                    12:     { MSIIRE_S：有、残高または発生：無 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)[不可]
                        uvChangeFL_T_S    := True;          // 特殊　　　[可  ]
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                    21:     { MSIIRE_S：無、残高または発生：有 }
                    begin
                        uvChangeFL_Sime_S := False;         // 通常(締日)[不可]
                        uvChangeFL_T_S    := False;         // 特殊　　　[不可]
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                    22:     { MSIIRE_S：無、残高または発生：無 }
                    begin
                        uvChangeFL_Sime_S := True;          // 通常(締日)[可  ]
                        uvChangeFL_T_S    := True;          // 特殊　　　[可  ]
                        uvChangeFL_Z_S    := True;          // 随時　　　[可  ]
                    end;
                end;
            end;
        end;

        // 子仕入先の場合は 締日情報を使用不可とする <173>
        // 代替仕入先の場合も締日情報を使用不可とする <175>
        if (pSOFlg = 2) or (pSOFlg = 12) or (pSOFlg = 3) then
        begin
            uvChangeFL_Sime_S := False;                     // 通常(締日)[不可]
            uvChangeFL_T_S    := False;                     // 特殊　　　[不可]
            uvChangeFL_Z_S    := False;                     // 随時　　　[不可]
        end;
    end;
end;

//-----------------------------------------------------------------------------
//【関数名】fnSeiKbn_EnableControl
//【内　容】請求・締日のEnableを一括管理
//
//【 PARA 】nType   : 0:得意先、1:仕入先
//          bSime   : 締日
//          bToku   : 特殊
//          bZui    : 随時
//【RETURN】なし
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnSeiKbn_EnableControl(nType : Integer; bSime, bToku, bZui : Boolean);
begin
    // 得意先
    if nType = 0 then
    begin

        //<159>ST---
//        if uvSyokuchiKbn = 1 then
//            f1TSKBN       .Enabled := False                 // 採用区分
//        else
//            f1TSKBN       .Enabled := True;                 // 採用区分
        //<159>ED---
                // ﾌｨｰﾙﾄﾞを使用可にする
//<159> f1TSKBN       .Enabled := True;                     // 採用区分
        fnChgCmpEna(True           ,f1TSKBN);            // 採用区分
        fnChgCmpEna(f1TSKBN.Checked and (f0ECOUNTRY.AsInteger = 1),f1TKBN);             // 得意先区分<209>bSime→f1TSKBN.Checkedに。採用区分の状態と連動させる。
        fnChgCmpEna(bSime          ,f1NClosingDay1);     // 締日1
        fnChgCmpEna(bSime          ,f1NClosingDay2);     // 締日2
        fnChgCmpEna(bSime          ,f1NClosingDay3);     // 締日3
        fnChgCmpEna(bSime          ,f1NMonth1);          // ｻｲｸﾙ1
        fnChgCmpEna(bSime          ,f1NMonth2);          // ｻｲｸﾙ2
        fnChgCmpEna(bSime          ,f1NMonth3);          // ｻｲｸﾙ3
        fnChgCmpEna(bSime          ,f1NDay1);            // 回収日1
        fnChgCmpEna(bSime          ,f1NDay2);            // 回収日2
        fnChgCmpEna(bSime          ,f1NDay3);            // 回収日3
        fnChgCmpEna(bSime          ,f1NHoliday1);        // 休日1
        fnChgCmpEna(bSime          ,f1NHoliday2);        // 休日2
        fnChgCmpEna(bSime          ,f1NHoliday3);        // 休日3

        fnChgCmpEna(bSime   	   ,f1NHolidayKbn);      // 特殊請求休日
        fnChgCmpEna(bSime          ,f1NSeino);           // 特殊請求No

        if bToku = True then                                // 特殊がOnなら随時請求回収ｻｲﾄはONになる
            fnChgCmpEna(bToku, f1NSSite)
        else
            fnChgCmpEna(bZui, f1NSSite);
    end
    // 仕入先
    else begin


//        if uvSyokuchiKbn = 1 then
//            f1SSKBN       .Enabled := False                 // 採用区分
//        else
//            f1SSKBN       .Enabled := True;                 // 採用区分
        //<159>ED---

//<159> f1SSKBN       .Enabled := True;                     // 採用区分
        fnChgCmpEna(True           ,f1SSKBN);           // 採用区分
        fnChgCmpEna(f1SSKBN.Checked,f1SKBN);            // 仕入先区分<209>bSime→f1SSKBN.Checkedに。採用区分の状態と連動させる。
        fnChgCmpEna(bSime          ,f1SClosingDay1);    // 締日1
        fnChgCmpEna(bSime          ,f1SClosingDay2);    // 締日2
        fnChgCmpEna(bSime          ,f1SClosingDay3);    // 締日3
        fnChgCmpEna(bSime          ,f1SMonth1);         // ｻｲｸﾙ1
        fnChgCmpEna(bSime          ,f1SMonth2);         // ｻｲｸﾙ2
        fnChgCmpEna(bSime          ,f1SMonth3);         // ｻｲｸﾙ3
        fnChgCmpEna(bSime          ,f1SDay1);           // 回収日1
        fnChgCmpEna(bSime          ,f1SDay2);           // 回収日2
        fnChgCmpEna(bSime          ,f1SDay3);           // 回収日3
        fnChgCmpEna(bSime          ,f1SHoliday1);       // 休日1
        fnChgCmpEna(bSime          ,f1SHoliday2);       // 休日2
        fnChgCmpEna(bSime          ,f1SHoliday3);       // 休日3

        fnChgCmpEna(bSime          ,f1SHolidayKbn);     // 特殊請求休日
        fnChgCmpEna(bSime          ,f1SSeino);          // 特殊請求No

        if bToku = True then                            // 特殊がOnなら随時請求回収ｻｲﾄはONになる
            fnChgCmpEna(bToku ,f1SSSite)
        else
            fnChgCmpEna(bZui ,f1SSSite);
    end;

end;

//-----------------------------------------------------------------------------
// fnSetEnabled()   <117>
//  < 画面のEnabled制御処理 >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    : 初回起動時に、諸口ﾀﾞｲｱﾛｸﾞｷｬﾝｾﾙ時に画面をﾛｯｸする。
//                再度子ﾌｫｰﾑにﾌｫｰｶｽが当てられた時に入力できるとまずいので･･･
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnSetEnabled(nBol: Boolean);
begin

    // TMTreeViewﾊﾟﾈﾙ
    MjsDispCtrl.MjsSetEnabled(Self, 'PPanelTree',   nBol);
    // 一覧/詳細ﾊﾟﾈﾙ
    MjsDispCtrl.MjsSetEnabled(Self, 'PPanelBase',   nBol);

    // 各種ﾎﾞﾀﾝ使用不可
    B_Print     .Enabled    := nBol;
    B_Syousai   .Enabled    := nBol;
    B_Delete    .Enabled    := nBol;
    B_Search    .Enabled    := nBol;
    B_FusenBar  .Enabled    := nBol;
    B_Change    .Enabled    := nBol;

    // 並び替えﾎﾞﾀﾝは使用していない？

end;

//-----------------------------------------------------------------------------
// BChangeClick()   <119>
//  < 切出・埋込処理 >
//      PARAM   : Sender : TObject
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.BChangeClick(Sender: TObject);
var
	wkParam : TAppParam;
    lvRect  : TRect;
    lvWidth,
    lvHeight: Integer;
begin

    // ここでActiveControlをｾｯﾄする。
    m_ACControl :=  Screen.ActiveControl;

    m_bBtnChange := FALSE;

    if ( B_Change.Caption = '埋込(&G)' ) then
    begin
        // 親画面への設定
        wkParam.iAction     :=  ACTID_DOCKINGINEND;         // 格納通知
        B_Change.Caption    := '切出(&G)';                  // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end
    else
    begin
		Visible             :=	FALSE;
        // 現在のｸﾗｲｱﾝﾄ領域を取得し幅と高さを取得
        lvRect              :=  Self.ClientRect;
        lvWidth             :=  lvRect.Right - lvRect.Left;
        lvHeight            :=  lvRect.Bottom - lvRect.Top;

        ClientWidth         :=  lvWidth;
        ClientHeight        :=  lvHeight;
		Visible		        :=	TRUE;

        // 親画面への設定
        wkParam.iAction     :=  ACTID_DOCKINGOUTEND;        // 取出通知
        B_Change.Caption    :=  '埋込(&G)';                 // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end;

    wkParam.pRecord         :=  Pointer(m_Base_pRec);       // 管理構造体ﾎﾟｲﾝﾀ設定
    wkParam.pActionParam    :=  nil;                        // 予備ﾎﾟｲﾝﾀ設定
    TMjsAppRecord(m_Base_pRec^).m_pOwnerEntry(@wkParam);

    m_bBtnChange := TRUE;

end;
// <130>
//**************************************************************************
//	Component	:	入力ﾌｨｰﾙﾄﾞ
//		    			詳細ﾀﾌﾞの入力ｺﾝﾄﾛｰﾙ共通Changeｲﾍﾞﾝﾄ
//	Event		:	OnChange
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP004001f.evtOnChange(Sender: TObject);
begin
// <MYN> ins -s
	if ((f0MYNKbn.Text = MYN_KOJIN) and (Sender = f0MYNNo)) and
	   (m_MaskCancelClick) then
	begin
		// マスク解除ボタン押下では変更フラグはONにしない
	end else
	begin
// <MYN> ins -e
	    if (m_EdtSw = False) then
    	    m_EdtSw := True;                    // 変更ﾌﾗｸﾞON
    end;	// <MYN>

//<226>↓
    //項目チェック用
    if (Sender = f0ECOUNTRY)  then uvChgCOUNTRY  := True;
    if (Sender = f0ECURRENCY) then uvChgCurrency := True;
//<226>↑

end;
// <130>
//**********************************************************************
//*		Proccess	:	登録処理（終了時に呼ぶ）
//*		Name		:	K.Katou
//*		Date		:	2005/10/27
//*		Return		:	True: 正常 False: 異常/入力ｴﾗｰ
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP004001f.UpdateMTOKUI(): Boolean;
var
    strGCode    : String;
    iSumKbn     : Integer;
begin
    Result := False;
	if not fnDataCheck(Self,True,Root_PMTab.items.selected) then
		Exit;

	if not BtnClkWriteJ() then
	begin
		abort;
		exit;
    end;

	{ＤＢに書き込み}
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		strGCode	:= f0TGCode.Text;
		strGCode    := TrimRight(strGCode);
		f0TGCode.Text := strGCode;
	end
	else
		strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);

	iSumKbn		:= Root_PMTab.Items.Selected;

	fnTreeUpdate (strGCode, iSumKbn);

    PMTab.Items.Selected := PAGE_KIHON;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
	else
		MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');

    Result := True;

end;
// <WF>
//**************************************************************************
//	Component	:	申請書参照ﾎﾞﾀﾝ
//	Event		:	OnClick
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP004001f.BSpeedButtonWFClick(Sender: TObject);
begin

	if B_Syousai.Caption = '詳細(&T)' then          // 一覧
	begin
{
		BSpeedButtonISClick(Sender);

			Jituzai_BBitBtn_CancelClick(Sender);
			if m_EdtSw then
				Exit;
}
	end
	else
	begin
		if Root_PMTab.Items.Selected = 0 then
		begin
			Jituzai_BBitBtn_CancelClick(Sender);
			if m_EdtSw then
				Exit;

			PMTab.items.Selected := 0;
		end
		else
		begin
//			Root_PMTab.Items.Selected := 0;
		end;
	end;


	fnImportWF();

end;
// <WF>
//**********************************************************************
//*		Proccess	:	申請書参照(得意先/仕入先)
//*		Name		:	K.Katou
//*		Date		:	2005/10/31
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.fnImportWF();
var
    lvExpSend   : rcJNTWFExpSend;           // WFEXP送信ﾊﾟﾗﾒｰﾀ
    lvExpRecv   : rcJNTWFExpRecv;           // WFEXP受信ﾊﾟﾗﾒｰﾀ
    iExpRtn     : Integer;
    prTORIHIKI  : ^TTokuiSinseiInfo;        // 得意先/仕入先申請書情報
//↓<244>
    sGCode      : string;
    sNmk        : string;
    iRDelKbn    : Integer;
//↑<244>
//↓<Gali2235>
	lvSameListPara	: TSameListPara;
    lvSameListf		: TJNTCRP004001SameListf;
    lvIsUpd			: Boolean;
    lvNotSamef		: TJNTCRP004001NotSamef;
//↑<Gali2235>
begin

    lvExpSend.pMjsAppRec    :=  m_Base_pRec;    // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select; // TDatabaseﾎﾟｲﾝﾀ
                                                // ｼｽﾃﾑ色
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;

    lvExpSend.MasterKbn     :=  MKBN_TORIHIKI;  // ﾏｽﾀ区分(得意先/仕入先の両方取得)
    lvExpSend.BumonNCode    :=  -1;             // 部署・部門内部ｺｰﾄﾞ(-1は指定無）
    lvExpSend.SyainNCode    :=  -1;             // 社員内部ｺｰﾄﾞ(-1は指定無）
    lvExpSend.SPKbn         :=  0;              // 単複区分
    lvExpSend.StartDate     := -1;
    lvExpSend.EndDate       := -1;

                                            // WF用ｴｸｽﾌﾟﾛｰﾗ出力
    iExpRtn :=  fnJNTWFExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <> 1 then                    // ｷｬﾝｾﾙ
        Exit;

    if (lvExpRecv.RetCount) > 0 then        // 中身あり?
    begin                                   // 得意先or仕入先or取引先
        if (lvExpRecv.MasterKbn = MKBN_TOKUI) or
            (lvExpRecv.MasterKbn = MKBN_SIIRE) or
            (lvExpRecv.MasterKbn = MKBN_TORIHIKI) then
        begin                               // 1ﾚｺｰﾄﾞ目を取得(一次は1ﾚｺｰﾄﾞのみ対応)

//			LSinsei.Visible	:= True;

			if B_Syousai.Caption = '詳細(&T)' then          // 一覧
			begin
				BSpeedButtonISClick(BSpeedButtonIS);
				PMTab.items.Selected := 0;
//				Jituzai_BBitBtn_CancelClick(B_ImportWF);

			end
			else
			begin
				if Root_PMTab.Items.Selected = 0 then
				begin
//					Jituzai_BBitBtn_CancelClick(Sender);
//					if m_EdtSw then
//						Exit;
				end
				else
				begin
					Root_PMTab.Items.Selected := 0;
					PMTab.items.Selected := 0;
//					Jituzai_BBitBtn_CancelClick(B_ImportWF);
				end;
			end;
			Jituzai_BBitBtn_CancelClick(B_ImportWF);

            //↓<244>得意先登録申請、仕入先登録申請は既存ロジック


			prTORIHIKI :=  lvExpRecv.ArHdl[0]; // ↓からここに移動してきました

            //↓<Gali2235>
            lvIsUpd := False;
            if ((prTORIHIKI^.SyncKbn = SWKFORM_TOKUI)
             or (prTORIHIKI^.SyncKbn = SWKFORM_SIIRE))
            and (m_SELCSTM_TBL.GL33) then
            begin
                lvSameListPara	:= TSameListPara.Create;
                lvSameListPara.m_pRec		:= Pointer(m_Base_pRec);
                lvSameListPara.m_DM         := MDataModule;
                lvSameListPara.m_DB         := dbCorp_Select;
                lvSameListPara.m_JNTCom     := m_cJNTArea;
                lvSameListPara.m_JNTMASCom	:= ComArea;
                lvSameListPara.m_JNTSelSys  := uvSelSys;
                lvSameListPara.m_pTkSinInfo := Pointer(prTORIHIKI);

                lvSameListf		:= TJNTCRP004001SameListf.Create(Self);
                lvSameListf.DoDLG(lvSameListPara);
                lvSameListf.Free;

                if (lvSameListPara.Result = SAMELIST_RET_CAN) then
                begin
                    // キャンセルは申請一覧に戻る
                    PostMessage(Self.Handle, WM_IMPORTWF, 0, 0);
                    Exit;
                end
                else if (lvSameListPara.Result = SAMELIST_RET_NON) then
                begin
                	// 同一マスタが無い場合は「不一致の場合の選択処理画面」を出す
                    lvNotSamef		:= TJNTCRP004001NotSamef.Create(Self);
                    lvNotSamef.DoDLG(lvSameListPara);
                    lvNotSamef.Free;

                    if (lvSameListPara.Result = SAMELIST_RET_CAN) then
                    begin
                        // キャンセルは申請一覧に戻る
	                    PostMessage(Self.Handle, WM_IMPORTWF, 0, 0);
	                    Exit;
                    end;
                end;

                if (lvSameListPara.Result = SAMELIST_RET_UPD) then
                begin
                	lvIsUpd := True;
                end;
            end;
            //↑<Gali2235>

            if (prTORIHIKI^.SyncKbn = SWKFORM_TOKUI)
            or (prTORIHIKI^.SyncKbn = SWKFORM_SIIRE) then
            begin
            //↑<244>

			fnDataRead ('', 0, 0);

			f0NGCode.ImeMode := imDisable;
//			f0TGCode.ImeMode := imDisable; //<Gali2422>
			f0TGCode.ImeMode := imClose;   //<Gali2422>

			f1TSKBNClick(f1TSKBN);
			f1TSKBNClick(f1SSKBN);
			fnSeiKbn_EntryControl;
			fnSeiKbn_EntryControl_SI;

//<244>↑に移動            prTORIHIKI :=  lvExpRecv.ArHdl[0];

            fnFldSetWF(prTORIHIKI^);        // 戻りを画面に表示

//<194>
			LSinsei.Visible	:= True;
//			f0Name.MLeftMargin	:= LSinsei.Width;

			f1TSKBNClick(f1TSKBN);
			f1TSKBNClick(f1SSKBN);

//↓<219>この論理は表示時のため。
            if f1TSKBN.Checked then f1TKBN.Value := 1;           // 得意先区分
            if f1SSKBN.Checked then f1SKBN.Value := 1;           // 仕入先区分
//↑<219>
			fnSeiKbn_EntryControl;
			fnSeiKbn_EntryControl_SI;

//<198>
			PPanelTree.Enabled		:= False;
			PPanel_Kihon.Enabled	:= False;
			PPanel_Saiyo.Enabled	:= False;
			PPanel_Seg.Enabled		:= False;
			PPanel_Br.Enabled		:= False;
			Jituzai_BBitBtn_Ok.Enabled := False;
			B_Delete.Enabled		:= False;

			Jituzai_BBitBtn_Cancel.SetFocus;
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				MjsDispCtrl.MjsSetFocus(Self, 'f0TGCode')
			else
				MjsDispCtrl.MjsSetFocus(Self, 'f0NGCode');

            //↓<244>得意先変更申請、仕入先変更申請のロジック
            end
            else
            begin
                sGCode      := '';
                sNmk        := '';
                iRDelKbn    := 0;

                // 取引先マスタを取得します。
				fnGetMaster(prTORIHIKI^.NCode,sGCode,sNmk,iRDelKbn);

				// 削除されていたら、警告を出します。
            	if iRDelKbn = 1 then
                begin
	            	// 外部コードを編集します
    	            sGCode := gfnJNTSELCodeEdit(MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,sGCode);

	                if ( MjsMessageBox(Self, '「' + sGCode + ' ' + sNmk + '」は既に削除されているので変更できません。'
                                        + #13#10#13#10 + 'この申請を一覧から削除しますか？',
                                        mjQuestion, mjDefYes) = mrYes ) then
                    begin
                    	// 申請一覧から該当申請を削除（連動区分をたてる）

                        // 申請書情報ｷｰ
                        if prTORIHIKI^.SinFormFlg then
                            m_recSinseiKey.SinForm := prTORIHIKI^.SinForm
                        else
                            m_recSinseiKey.SinForm := -1;
                        if prTORIHIKI^.OrgNoFlg then
                            m_recSinseiKey.OrgNo := prTORIHIKI^.OrgNo
                        else
                            m_recSinseiKey.OrgNo := -1;
                        if prTORIHIKI^.HisIDFlg then
                            m_recSinseiKey.HisID := prTORIHIKI^.HisID
                        else
                            m_recSinseiKey.HisID := -1;

                        // WF連動区分更新
                        if not UpdateSinsei(m_recSinseiKey) then
                        begin
							MjsMessageBox(Self,'連動区分の更新に失敗しました。', mjError, mjDefOk);
                        end;

                        // WF関係の初期化
                        ClearOtherRec(m_recOther);
                    end
                    else
                    begin
                    	// 該当申請を削除せず申請一覧に戻る
                    	fnImportWF();
                    end;
                end
                else
                begin
                    m_CodeReturn := true; // <2610> Add

                	// 生きているマスタだったら、変更処理を行います。
                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                    begin
                		f0NGCode.Value := StrToFloat(sGCode);

						JituzaiEditExit(f0NGCode); // <2610> Add
                    end
                    else
                    begin
                    	f0TGCode.Text := sGCode;

						JituzaiEditExit(f0TGCode); // <2610> Add
                    end;

                    fnCngCodeProperty(True);

// <2610> Del                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
// <2610> Del                    begin
// <2610> Del                		f0NGCode.SetFocus;
// <2610> Del                    end
// <2610> Del                    else
// <2610> Del                    begin
// <2610> Del                    	f0TGCode.SetFocus;
// <2610> Del                    end;

// <2610> Del			        keybd_event(VK_RETURN, 0, 0, 0);         //Enter ｷｰのｴﾐｭﾚｲﾄ

                  	m_cJNTArea.ProcessMessages;

                    // フォーカスが移動しないことがあるので、次フィールドにフォーカスを持っていく。
// <2610> Del					f0LongName.SetFocus;

//<Gali2235>        fnFldSetWFUpd(prTORIHIKI^);        // 戻りを画面に表示
                    fnFldSetWFUpd(prTORIHIKI^, lvIsUpd); // 戻りを画面に表示<Gali2235>

                    LSinsei.Visible := True;

                    //↓<2610> Add
                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                    begin
                        f0NGCode.Enabled := false;
                    end
                    else
                    begin
                        f0TGCode.Enabled := false;
                    end;

                	m_Wf_HENKO := true; // <2610-2> Add

                    MjsDispCtrl.MjsSetFocus(Self, 'f0LongName');

                	// <2610-2> Del m_Wf_HENKO := true;
                    //↑<2610> Add
                end;
            end;
            //↑<244>
        end;

//		abort;
    end;

end;
// <WF>
//**********************************************************************
//*		Proccess	:	申請書の情報をｾｯﾄ　構造体→画面
//*		Name		:	K.Katou
//*		Date		:	2005/10/31
//*     Param       :   objRec  : 得意先申請書構造体
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP004001f.fnFldSetWF(objRec: TTokuiSinseiInfo);
begin
    ClearOtherRec(m_recOther);              // 中身をｸﾘｱ

	with objRec do
    begin
        // 【基本情報】＞基本情報
        if RensoFlg then                    // 連想
            f0RenChar.Text := Renso;
        if FkanaFlg then                    // ﾌﾘｶﾞﾅ
            f0FKANA.Text := Fkana;
        if NmFlg then                       // 正式名称
            f0LongName.Text := Nm;
        if NmkFlg then                      // 簡略名称
            f0SimpleName.Text := Nmk;
        if PostNo1Flg then                  // 郵便番号1
            f0ZipCode1.Value := PostNo1;
        if PostNo2Flg then                  // 郵便番号2
        begin
            f0ZipCode2.Value := PostNo2;
            //↓<PST2>
            if (PostNo1Flg) and (PostNo1 <> 0) then
            begin
            	f0ZipCode2.Zero := True;
            end
            else
            begin
            	f0ZipCode2.Zero := False;
            end;
            //↑<PST2>
        end;
        if Ads1Flg then                     // 住所上段
            f0Address1.Text := Ads1;
        if Ads2Flg then                     // 住所下段
            f0Address2.Text := Ads2;
        if Tel1Flg then                     // 電話番号(1)
            f0TelNo.Text := Tel1;
        if Tel2Flg then                     // 電話番号(2)
            f0TelNo2.Text := Tel2;
        if Fax1Flg then                     // FAX番号
            f0FAX.Text := Fax1;
//↓<260>
		if KeisyoKbnFlg then				// 敬称
        	f0KEISYOKBN.text := KeisyoKbn;

        if DHyoNm1Flg then					// 代表者役職名
        	f0DHYONM1.text := DHyoNm1;

        if DHyoNm2Flg then					// 代表者名
			f0DHYONM2.Text := DHyoNm2;

        if HPAddressFlg then				// HPアドレス
            f0HPADD.Text := HPAddress;

        if ShihonKinFlg then				// 資本金
            f0SIHONKIN.Value := ShihonKin;

        if NensyoFlg then					// 年商
            f0NENSYO.Value := Nensyo;

        if SyainSuFlg then					// 社員数
            f0SYAINSU.Value := SyainSu;
//↑<260>

        // 【基本情報】＞採用情報
        if SyncKbn = SWKFORM_TOKUI then     // 得意先採用？<235>SwkForm → SyncKbn
        begin
            f1TSKBN.Checked := True;
            // ＞入金予定日
            if RCloseDay1Flg then               // 締日1
            begin
                f1NClosingDay1.Value := RCloseDay1;
                if RcvDay1Flg then              // 回収日1
                    f1NDay1.Value := RcvDay1;
            end;
            if RCloseDay2Flg then               // 締日2
            begin
                f1NClosingDay2.Value := RCloseDay2;
                if RcvDay2Flg then              // 回収日2
                    f1NDay2.Value := RcvDay2;
            end;
            if RCloseDay3Flg then               // 締日3
            begin
                f1NClosingDay3.Value := RCloseDay3;
                if RcvDay3Flg then              // 回収日3
                    f1NDay3.Value := RcvDay3;
            end;
            fnSeiKbn_EntryControl();            // ｺﾝﾄﾛｰﾙの有効/無効切替

            if RCloseDay1Flg then
            begin
                if RcvMonth1Flg then            // ｻｲｸﾙ1
                begin
                    if f1NMonth1.Items.Count > RcvMonth1 then
                        f1NMonth1.ItemIndex := RcvMonth1;
                end;
            end;
            if RCloseDay2Flg then
            begin
                if RcvMonth2Flg then            // ｻｲｸﾙ2
                begin
                    if f1NMonth2.Items.Count > RcvMonth2 then
                        f1NMonth2.ItemIndex := RcvMonth2;
                end;
            end;
            if RCloseDay3Flg then
            begin
                if RcvMonth3Flg then            // ｻｲｸﾙ3
                begin
                    if f1NMonth3.Items.Count > RcvMonth3 then
                        f1NMonth3.ItemIndex := RcvMonth3;
                end;
            end;
//↓<260>
			if RCloseDay1Flg then
            begin
            	if RHolidayKbn1Flg then			// 休日区分1
                begin
                	if f1NHoliday1.Items.Count > RHolidayKbn1 then
                    	f1NHoliday1.ItemIndex := RHolidayKbn1;
                end;
            end;
			if RCloseDay2Flg then
            begin
            	if RHolidayKbn2Flg then			// 休日区分2
                begin
                	if f1NHoliday2.Items.Count > RHolidayKbn2 then
                    	f1NHoliday2.ItemIndex := RHolidayKbn2;
                end;
            end;
			if RCloseDay3Flg then
            begin
            	if RHolidayKbn3Flg then			// 休日区分3
                begin
                	if f1NHoliday3.Items.Count > RHolidayKbn3 then
                    	f1NHoliday3.ItemIndex := RHolidayKbn3;
                end;
            end;
//↑<260>
        end;
        if SyncKbn = SWKFORM_SIIRE then     // 仕入先採用？<235>SwkForm → SyncKbn
        begin
            f1SSKBN.Checked := True;
            // ＞支払予定日
            if RCloseDay1Flg then               // 締日1
            begin
                f1SClosingDay1.Value := RCloseDay1;
                if RcvDay1Flg then              // 回収日1
                    f1SDay1.Value := RcvDay1;
            end;
            if RCloseDay2Flg then               // 締日2
            begin
                f1SClosingDay2.Value := RCloseDay2;
                if RcvDay2Flg then              // 回収日2
                    f1SDay2.Value := RcvDay2;
            end;
            if RCloseDay3Flg then               // 締日3
            begin
                f1SClosingDay3.Value := RCloseDay3;
                if RcvDay3Flg then              // 回収日3
                    f1SDay3.Value := RcvDay3;
            end;

            fnSeiKbn_EntryControl_SI();         // ｺﾝﾄﾛｰﾙの有効/無効切替

            if RCloseDay1Flg then
            begin
                if RcvMonth1Flg then            // ｻｲｸﾙ1
                begin
                    if f1SMonth1.Items.Count > RcvMonth1 then
                        f1SMonth1.ItemIndex := RcvMonth1;
                end;
            end;
            if RCloseDay2Flg then
            begin
                if RcvMonth2Flg then            // ｻｲｸﾙ2
                begin
                    if f1SMonth2.Items.Count > RcvMonth2 then
                        f1SMonth2.ItemIndex := RcvMonth2;
                end;
            end;
            if RCloseDay3Flg then
            begin
                if RcvMonth3Flg then            // ｻｲｸﾙ3
                begin
                    if f1SMonth3.Items.Count > RcvMonth3 then
                        f1SMonth3.ItemIndex := RcvMonth3;
                end;
            end;
//↓<260>
			if RCloseDay1Flg then
            begin
            	if RHolidayKbn1Flg then			// 休日区分1
                begin
                	if f1SHoliday1.Items.Count > RHolidayKbn1 then
                    	f1SHoliday1.ItemIndex := RHolidayKbn1;
                end;
            end;
			if RCloseDay2Flg then
            begin
            	if RHolidayKbn2Flg then			// 休日区分2
                begin
                	if f1SHoliday2.Items.Count > RHolidayKbn2 then
                    	f1SHoliday2.ItemIndex := RHolidayKbn2;
                end;
            end;
			if RCloseDay3Flg then
            begin
            	if RHolidayKbn3Flg then			// 休日区分3
                begin
                	if f1SHoliday3.Items.Count > RHolidayKbn3 then
                    	f1SHoliday3.ItemIndex := RHolidayKbn3;
                end;
            end;
//↑<260>
        end;

        m_recOther.SyncKbn			:= SyncKbn;                     // 申請書式連動区分<244>

        // 【販売情報】
        m_recOther.TrihikiKbn := TrihikiKbn;        // 取引区分
        m_recOther.TrihikiKbnFlg := TrihikiKbnFlg;  // 取引区分有無
        m_recOther.TnNCode := TnNCode;              // 担当者ｺｰﾄﾞ
        m_recOther.TnNCodeFlg := TnNCodeFlg;        // 担当者ｺｰﾄﾞ有無
        m_recOther.BmNCode := BmNCode;              // 部門ｺｰﾄﾞ
        m_recOther.BmNCodeFlg := BmNCodeFlg;        // 部門ｺｰﾄﾞ有無

        // 【債権情報】
        m_recOther.YsGKin := YsGKin;                // 与信限度額
        m_recOther.YsGKinFlg := YsGKinFlg;          // 与信限度額有無

//<243> ↓
        // 【振込情報】
        if SyncKbn = SWKFORM_SIIRE then                // 仕入先採用
        begin
            m_recOther.AccNCode := AccNCode;                    // 依頼口座内部コード       <247>
            m_recOther.AccNCodeFlg := AccNCodeFlg;              // 依頼口座内部コード 有無  <247>
            m_recOther.BkBraNCode := BkBraNCode;                // 振込先支店内部コード
            m_recOther.BkBraNCodeFlg := BkBraNCodeFlg;          // 振込先支店内部コード 有無
            m_recOther.Acckbn := Acckbn;                        // 預金種目
            m_recOther.AcckbnFlg := AcckbnFlg;                  // 預金種目 有無
            m_recOther.AccNo := AccNo;                          // 口座番号
            m_recOther.AccNoFlg := AccNoFlg;                    // 口座番号 有無
            m_recOther.UketoriName := UketoriName;              // 受取人名　               <247>
            m_recOther.UketoriNameFlg := UketoriNameFlg;        // 受取人名 有無            <247>
            m_recOther.TransKanaName := TransKanaName;          // カナ振込先名称
            m_recOther.TransKanaNameFlg := TransKanaNameFlg;    // カナ振込先名称 有無
            m_recOther.ChargeKbn := ChargeKbn;                  // 手数料計算区分           <247>
            m_recOther.ChargeKbnFlg := ChargeKbnFlg;            // 手数料計算区分 有無      <247>
            m_recOther.ChargeFutan := ChargeFutan;              // 手数料負担               <247>
            m_recOther.ChargeFutanFlg := ChargeFutanFlg;        // 手数料負担 有無          <247>
            m_recOther.TransKbn := TransKbn;                    // 振込方法                 <247>
            m_recOther.TransKbnFlg := TransKbnFlg;              // 振込方法 有無            <247>
// <263> ADD-STR
            m_recOther.EdiInfo := EdiInfo;                      // ＥＤＩ情報
            m_recOther.EdiInfoFlg := EdiInfoFlg;                // セットフラグ True:セットあり、False:セットなし
            m_recOther.AiteNo1 := AiteNo1;                      // 顧客コード１
            m_recOther.AiteNo1Flg := AiteNo1Flg;                // セットフラグ True:セットあり、False:セットなし
            m_recOther.AiteNo2 := AiteNo2;                      // 顧客コード２
            m_recOther.AiteNo2Flg := AiteNo2Flg;                // セットフラグ True:セットあり、False:セットなし
            m_recOther.FBSet := FBSet;                          // FBセット項目
            m_recOther.FBSetFlg := FBSetFlg;                    // セットフラグ True:セットあり、False:セットなし
            m_recOther.AccAutoKbn := AccAutoKbn;                // 口座自動引落区分
            m_recOther.AccAutoKbnFlg := AccAutoKbnFlg;          // セットフラグ True:セットあり、False:セットなし
            m_recOther.AccAutoData := AccAutoData;              // 自動引落支払データ
            m_recOther.AccAutoDataFlg := AccAutoDataFlg;        // セットフラグ True:セットあり、False:セットなし
// <263> ADD-END
        end;

// <262> ADD-STR
        // 【債務情報】
        if SyncKbn = SWKFORM_SIIRE then                // 仕入先採用
        begin
            m_recOther.MailAddress_MTP := MailAddress_MTP;      // 担当者メールアドレス
            m_recOther.MailAddress_MTPFlg := MailAddress_MTPFlg;// セットフラグ True:セットあり、False:セットなし

            m_recOther.GensenUseKbn    := GensenUseKbn;         // 預かり源泉税採用区分
            m_recOther.GensenUseKbnFlg := GensenUseKbnFlg;      // セットフラグ True:セットあり、False:セットなし
            m_recOther.PersonKbn       := PersonKbn;            // 個人／法人区分
            m_recOther.PersonKbnFlg    := PersonKbnFlg;         // セットフラグ True:セットあり、False:セットなし
            m_recOther.LocationKbn     := LocationKbn;          // 国内／国外区分
            m_recOther.LocationKbnFlg  := LocationKbnFlg;       // セットフラグ True:セットあり、False:セットなし

            m_recOther.PayKbn2         := PayKbn2;              // 支払通知書メール配信区分
            m_recOther.PayKbn2Flg      := PayKbn2Flg;           // セットフラグ True:セットあり、False:セットなし

            m_recOther.ZipPass         := ZipPass;              // 解凍用パスワード
            m_recOther.ZipPassFlg      := ZipPassFlg;           // セットフラグ True:セットあり、False:セットなし
        end;
// <262> ADD-END

        // 【フリー項目情報】
        if VFree1Flg or VFree2Flg or VFree3Flg or VFree4Flg or VFree5Flg or
           VFree6Flg or VFree7Flg or VFree8Flg or VFree9Flg or VFree10Flg or
           NFree1Flg or NFree2Flg or NFree3Flg or NFree4Flg or NFree5Flg or
           NFree6Flg or NFree7Flg or NFree8Flg or NFree9Flg or NFree10Flg or
           DFree1Flg or DFree2Flg or DFree3Flg then
        begin
            UpdFreeFlg := True;                         //アップデートフラグTrue
            if VFree1Flg then                           //文字型フリー項目1
                freeItem.VFree1 := VFree1;
            if VFree2Flg then                           //文字型フリー項目2
                freeItem.VFree2 := VFree2;
            if VFree3Flg then                           //文字型フリー項目3
                freeItem.VFree3 := VFree3;
            if VFree4Flg then                           //文字型フリー項目4
                freeItem.VFree4 := VFree4;
            if VFree5Flg then                           //文字型フリー項目5
                freeItem.VFree5 := VFree5;
            if VFree6Flg then                           //文字型フリー項目6
                freeItem.VFree6 := VFree6;
            if VFree7Flg then                           //文字型フリー項目7
                freeItem.VFree7 := VFree7;
            if VFree8Flg then                           //文字型フリー項目8
                freeItem.VFree8 := VFree8;
            if VFree9Flg then                           //文字型フリー項目9
                freeItem.VFree9 := VFree9;
            if VFree10Flg then                          //文字型フリー項目10
                freeItem.VFree10 := VFree10;
            if NFree1Flg then                           //数字型フリー項目1
                freeItem.NFree1 := NFree1;
            if NFree2Flg then                           //数字型フリー項目2
                freeItem.NFree2 := NFree2;
            if NFree3Flg then                           //数字型フリー項目3
                freeItem.NFree3 := NFree3;
            if NFree4Flg then                           //数字型フリー項目4
                freeItem.NFree4 := NFree4;
            if NFree5Flg then                           //数字型フリー項目5
                freeItem.NFree5 := NFree5;
            if NFree6Flg then                           //数字型フリー項目6
                freeItem.NFree6 := NFree6;
            if NFree7Flg then                           //数字型フリー項目7
                freeItem.NFree7 := NFree7;
            if NFree8Flg then                           //数字型フリー項目8
                freeItem.NFree8 := NFree8;
            if NFree9Flg then                           //数字型フリー項目9
                freeItem.NFree9 := NFree9;
            if NFree10Flg then                          //数字型フリー項目10
                freeItem.NFree10 := NFree10;
            if DFree1Flg then                           //日付型フリー項目1
                freeItem.DFree1 := DFree1;
            if DFree2Flg then                           //日付型フリー項目2
                freeItem.DFree2 := DFree2;
            if DFree3Flg then                           //日付型フリー項目3
                freeItem.DFree3 := DFree3;
        end;
//<243> ↑


        // 申請書情報ｷｰ
        if SinFormFlg then                  // 仕訳入力形式<235>SwkFormFlg → SinFormFlg
            m_recSinseiKey.SinForm := SinForm //<235>SwkForm → SinForm
        else
            m_recSinseiKey.SinForm := -1; //<235>SwkForm → SinForm
        if OrgNoFlg then                    // 原票No
            m_recSinseiKey.OrgNo := OrgNo
        else
            m_recSinseiKey.OrgNo := -1;
        //↓<235>
        if HisIDFlg then                    // 処理履歴ID
            m_recSinseiKey.HisID := HisID
        else
            m_recSinseiKey.HisID := -1;
        //↑<235>

       // 取込内容の入力ﾁｪｯｸ
        if TnNCodeFlg then
        begin                               // 担当者
            if not ExistMst(MKBN_SYAIN, TnNCode) then
                Exit;
        end;
        if BmNCodeFlg then
        begin                               // 部門
            if not ExistMst(MKBN_BUMON, BmNCode) then
                Exit;
        end;
    end;

    m_recOther.CanInsert := True;           // 取込可能

end;
// <WF>
// *************************************************************
// *
// *　　　作成日付：2005.11.01
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：ClearOtherRec
// *　　　関数説明：基本情報以外のWF取込ﾃﾞｰﾀ構造体をｸﾘｱ
// *
// *　　　入力　　：objRec  : ｸﾘｱしたい構造体
// *　　　出力　　：なし
// *
// *************************************************************
procedure TJNTCRP004001f.ClearOtherRec(var objRec: TWFOtherInfo);
begin
	//↓<2610> Add
    if (m_Wf_HENKO) then
    begin
        if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
        begin
            f0NGCode.Enabled := true;
        end
        else
        begin
            f0TGCode.Enabled := true;
        end;
    end;

	m_Wf_HENKO := false;
    //↑<2610> Add

    with objRec do
    begin
        CanInsert       := False;           // 登録可否
//↓<244>
        CanUpdate       := False;           // 更新可否
        SyncKbn         := 0;				// 申請書式連動区分
//↑<244>
        TrihikiKbn      := 0;               // 取引区分
        TrihikiKbnFlg   := False;           // 取引区分ｾｯﾄ有無
        TnNCode         := 0;               // 担当者ｺｰﾄﾞ
        TnNCodeFlg      := False;           // 担当者ｺｰﾄﾞｾｯﾄ有無
        BmNCode         := 0;               // 部門
        BmNCodeFlg      := False;           // 部門ｺｰﾄﾞｾｯﾄ有無
        YsGKin          := 0;               // 与信限度額
        YsGKinFlg       := False;           // 与信限度額ｾｯﾄ有無
//<243> ↓
        AccNCode        := 0;               // 振込依頼口座内部コード
        AccNCodeFlg     := False;           // セットフラグ True:セットあり False:セットなし
        BkBraNCode      := 0;               // 振込先支店内部コード
        BkBraNCodeFlg   := False;           // セットフラグ True:セットあり False:セットなし
        Acckbn          := 0;               // 預金種目
        AcckbnFlg       := False;           // セットフラグ True:セットあり False:セットなし
        AccNo           := '';              // 口座番号
        AccNoFlg        := False;           // セットフラグ True:セットあり False:セットなし
        UketoriName     := '';              // 受取人名
        UketoriNameFlg  := False;           // セットフラグ True:セットあり False:セットなし
        TransKanaName   := '';              // カナ振込先名称
        TransKanaNameFlg:= False;           // セットフラグ True:セットあり False:セットなし
        ChargeKbn       := 0;               // 手数料計算区分
        ChargeKbnFlg    := False;           // セットフラグ True:セットあり False:セットなし
        ChargeFutan     := 0;               // 手数料負担
        ChargeFutanFlg  := False;           // セットフラグ True:セットあり False:セットなし
        TransKbn        := 0;               // 振込方法
        TransKbnFlg     := False;           // セットフラグ True:セットあり False:セットなし
//<247> ↓　不要だった為コメント
    //  FBSet           := 0;               // FBセット項目
    //  FBSetFlg        := False;           // セットフラグ True:セットあり False:セットなし
    //  AccAutoKbn      := 0;               // 口座自動引落区分
    //  AccAutoKbnFlg   := False;           // セットフラグ True:セットあり False:セットなし
    //  AccAutoData     := 0;               // 自動引落支払データ
    //  AccAutoDataFlg  := False;           // セットフラグ True:セットあり False:セットなし
//<247> ↑
// <263> ADD-STR
        EdiInfo         := '';              // ＥＤＩ情報
        EdiInfoFlg      := False;           // セットフラグ True:セットあり、False:セットなし
        AiteNo1         := '';              // 顧客コード１
        AiteNo1Flg      := False;           // セットフラグ True:セットあり、False:セットなし
        AiteNo2         := '';              // 顧客コード２
        AiteNo2Flg      := False;           // セットフラグ True:セットあり、False:セットなし
        FBSet           := 0;               // FBセット項目
        FBSetFlg        := False;           // セットフラグ True:セットあり、False:セットなし
        AccAutoKbn      := 0;               // 口座自動引落区分
        AccAutoKbnFlg   := False;           // セットフラグ True:セットあり、False:セットなし
        AccAutoData     := 0;               // 自動引落支払データ
        AccAutoDataFlg  := False;           // セットフラグ True:セットあり、False:セットなし
// <263> ADD-END
// <262> ADD-STR
        MailAddress_MTP := '';              // 担当者メールアドレス
        MailAddress_MTPFlg := False;        // セットフラグ True:セットあり、False:セットなし

        GensenUseKbn    := 0;               // 預かり源泉税採用区分
        GensenUseKbnFlg := False;           // セットフラグ True:セットあり、False:セットなし
        PersonKbn       := 0;               // 個人／法人区分
        PersonKbnFlg    := False;           // セットフラグ True:セットあり、False:セットなし
        LocationKbn     := 0;               // 国内／国外区分
        LocationKbnFlg  := False;           // セットフラグ True:セットあり、False:セットなし

        PayKbn2         := 0;               // 支払通知書メール配信区分
        PayKbn2Flg      := False;           // セットフラグ True:セットあり、False:セットなし

        ZipPass         := '';              // 解凍用パスワード
        ZipPassFlg      := False;           // セットフラグ True:セットあり、False:セットなし
// <262> ADD-END

        VFree1          := '';              // 文字フリー項目1
        VFree1Flg       := False;           // セットフラグ1
        VFree2          := '';              // 文字フリー項目2
        VFree2Flg       := False;           // セットフラグ2
        VFree3          := '';              // 文字フリー項目3
        VFree3Flg       := False;           // セットフラグ3
        VFree4          := '';              // 文字フリー項目4
        VFree4Flg       := False;           // セットフラグ4
        VFree5          := '';              // 文字フリー項目5
        VFree5Flg       := False;           // セットフラグ5
        VFree6          := '';              // 文字フリー項目6
        VFree6Flg       := False;           // セットフラグ6
        VFree7          := '';              // 文字フリー項目7
        VFree7Flg       := False;           // セットフラグ7
        VFree8          := '';              // 文字フリー項目8
        VFree8Flg       := False;           // セットフラグ8
        VFree9          := '';              // 文字フリー項目9
        VFree9Flg       := False;           // セットフラグ9
        VFree10         := '';              // 文字フリー項目10
        VFree10Flg      := False;           // セットフラグ10
        NFree1          := 0;               // 数字フリー項目1
        NFree1Flg       := False;           // セットフラグ1
        NFree2          := 0;               // 数字フリー項目2
        NFree2Flg       := False;           // セットフラグ2
        NFree3          := 0;               // 数字フリー項目3
        NFree3Flg       := False;           // セットフラグ3
        NFree4          := 0;               // 数字フリー項目4
        NFree4Flg       := False;           // セットフラグ4
        NFree5          := 0;               // 数字フリー項目5
        NFree5Flg       := False;           // セットフラグ5
        NFree6          := 0;               // 数字フリー項目6
        NFree6Flg       := False;           // セットフラグ6
        NFree7          := 0;               // 数字フリー項目7
        NFree7Flg       := False;           // セットフラグ7
        NFree8          := 0;               // 数字フリー項目8
        NFree8Flg       := False;           // セットフラグ8
        NFree9          := 0;               // 数字フリー項目9
        NFree9Flg       := False;           // セットフラグ9
        NFree10         := 0;               // 数字フリー項目10
        NFree10Flg      := False;           // セットフラグ10
        DFree1          := 0;               // 日付フリー項目1
        DFree1Flg       := False;           // セットフラグ1
        DFree2          := 0;               // 日付フリー項目2
        DFree2Flg       := False;           // セットフラグ2
        DFree3          := 0;               // 日付フリー項目3
        DFree3Flg       := False;           // セットフラグ3
//<243> ↑
    end;

    with m_recSinseiKey do
    begin
        SinForm := -1; //<235>SwkForm → SinForm
        OrgNo := -1;
        HisID := -1; //<235>
    end;

	//↓<244>コンポーネントのフォントを赤字にしている可能性があるので標準色に戻します。
    f0RenChar.Font.Color	:= clWindowText;	// 連想
    f0FKANA.Font.Color		:= clWindowText;    // フリガナ
    f0LongName.Font.Color	:= clWindowText;    // 正式名称
    f0SimpleName.Font.Color	:= clWindowText;    // 簡略名称
    f0ZipCode1.Font.Color	:= clWindowText;    // 郵便番号１
    f0ZipCode2.Font.Color	:= clWindowText;    // 郵便番号２
    f0Address1.Font.Color	:= clWindowText;    // 住所上段１
    f0Address2.Font.Color	:= clWindowText;    // 住所上段２
    f0TelNo.Font.Color		:= clWindowText;    // 電話番号１
    f0TelNo2.Font.Color		:= clWindowText;    // 電話番号２
    f0FAX.Font.Color		:= clWindowText;    // FAX番号
    //↑<244>
//↓<260>
    f0KEISYOKBN.Font.Color	:= clWindowText;	// 敬称
    f0DHYONM1.Font.Color	:= clWindowText;	// 代表者役職名
    f0DHYONM2.Font.Color	:= clWindowText;	// 代表者名
    f0HPADD.Font.Color		:= clWindowText;	// HPアドレス
    f0SIHONKIN.Font.Color	:= clWindowText;	// 資本金
    f0NENSYO.Font.Color		:= clWindowText;	// 年商
    f0SYAINSU.Font.Color	:= clWindowText;	// 社員数
//↑<260>

//<194>
	LSinsei.Visible	:= False;
	PPanelTree.Enabled		:= True;
	PPanel_Kihon.Enabled	:= True;
	PPanel_Saiyo.Enabled	:= True;
	PPanel_Seg.Enabled		:= True;
	PPanel_Br.Enabled		:= True;
	Jituzai_BBitBtn_Ok.Enabled := True;
//	f0Name.MLeftMargin := 0;

	//参照・更新時のｺﾝﾎﾟｰﾈﾝﾄ制御処理<201>
	DisplayControl(giReferFlag);

end;
// <WF>
// *************************************************************
// *
// *　　　作成日付：2005.11.01
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：ExistMst
// *　　　関数説明：ﾏｽﾀに存在するか
// *
// *　　　入力　　：iMKbn   : ﾏｽﾀ区分(社員、部門)
// *                exNCode : 内部ｺｰﾄﾞ
// *　　　出力　　：Boolean : True: ある False: ない
// *
// *************************************************************
function TJNTCRP004001f.ExistMst(iMKbn: Integer; exNCode: Extended): Boolean;
var
    qryMst  : TMQuery;
    strSQL  : String;
begin
    Result := False;

    if iMKbn = MKBN_SYAIN then              // 社員
    begin
//<256> DEL        strSQL := 'select * from HAPSC HAP ' +
        strSQL := 'select HAP.NCode from HAPSC HAP ' +  //<256> ADD
                    'left outer join MOS_OFFICE_STAFF MOS ' +
                    'on (MOS.NCode = HAP.NCode) ' +
                    'where (HAP.NCode = :parNCode) ' +
                    'and (MOS.RDelKbn = 0) ';
// <147>販売担当者区分はﾁｪｯｸしない
                // 得意先担当者
{                if m_recSinseiKey.SwkForm = SWKFORM_TOKUI then
                    strSQL := strSQL + '  AND  (HAP.KBN in (1,3)) '
                // 仕入先担当者
                else if m_recSinseiKey.SwkForm = SWKFORM_SIIRE then
                    strSQL := strSQL + '  AND  (HAP.KBN in (2,3)) '
                else
                    Exit;
}
    end
    else if iMKbn = MKBN_BUMON then         // 部門
    begin
//<256> DEL        strSQL := 'select * from HojyoMA '+
        strSQL := 'select NCode from HojyoMA '+  //<256> ADD
                    'where RDelKbn = 0 and MasterKbn = 41 and SumKbn = 0 ' +
                    'and NCode = :parNCode';
    end
    else
        Exit;


	qryMst := TMQuery.Create(Self);					        // MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryMst);	// DBとMQueryの接続
	gfnJNTSELSetDbName(qryMst, dbCorp_Select);		//<D10>

   	with qryMst do
   	begin
   		try
   			Close;
   			SQL.Clear;		 							// qmQuery 初期化
   			SQL.Add(strSQL);
//<256> DEL            ParamByName('parNCode').AsFloat := exNCode; // 内部ｺｰﾄﾞ
            ParamByName('parNCode').AsString := FormatFloat('0',exNCode); // 内部ｺｰﾄﾞ  <256> ADD

   			Open;
   			if not EOF then                 // ﾃﾞｰﾀあり
                Result := True;

        finally
            Close;
            Free;
        end;
    end;

end;
// <WF>
// *************************************************************
// *
// *　　　作成日付：2005.10.31
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：UpdateSinsei
// *　　　関数説明：申請書情報の連動区分更新
// *
// *　　　入力　　：objKey  : 申請書情報ｷｰ
// *　　　出力　　：正常 or 異常
// *
// *************************************************************
function TJNTCRP004001f.UpdateSinsei(objKey: TSinseiInfoKey): Boolean;
var
    cMasterSinseiExpIF : TETYMasterSinseiExgIF;
    iResult    : Integer;
begin
    Result := True;
                                            // BPL管理構造体、ｵｰﾌﾟﾝ済み会社DB
    cMasterSinseiExpIF := TETYMasterSinseiExgIF.Create(m_Base_pRec, dbCorp_Select);

                                            // 更新
    iResult := cMasterSinseiExpIF.UpdConnectFlg(objKey);
    if iResult < 0 then
        Result := False;

    cMasterSinseiExpIF.Free;                // 申請ﾃﾞｰﾀIFｵﾌﾞｼﾞｪｸﾄの破棄

end;

// <140>
//**************************************************************************
//  Proccess    :   取引先データ書き込み（１件）一覧用
//  Notice      :   fnDataWriteのｸﾞﾘｯﾄﾞ用として切り分け。
//                  fnDataWriteのｸﾞﾘｯﾄﾞﾙｰﾄはもう使わない
//  Name        :
//  Date        :
//  Parameter   :   strGCode    : 外部ｺｰﾄﾞ
//                  iSumKbn     : 加算区分
//  Retrun      :
//  History     :   9999.99.99  X.Xxxxxx
//                  XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP004001f.fnDataWriteGrid(strGCode: String; iSumKbn: Integer): Boolean;
var
    HojyoMA_New     : Boolean;                              // True:追加 False:更新
//<Rel>使っていないのでコメントに。
//    QueryMaster     : TMQuery;
    Bol,BolS,BolDen : Boolean;
    lvTUpd          : Boolean;                              // _SEL得意先存在ﾌﾗｸﾞ(T:有、F:無)
    lvSUpd          : Boolean;                              // _SEL仕入先存在ﾌﾗｸﾞ(T:有、F:無)
    //↓<245>
    lvTnNCd         : Extended;                             // _SELの担当者内部コード
    lvBmNCd         : Extended;                             // _SELの部門内部コード
    //↑<245>

//-------------------------------------------
//  パラメータをセット
//          0:MTOKU･････UPDATE
//          1:MTOKU･････INSERT
//          2:MTOKUI_MAS、MTOKUI_PAY、MTOKUI_CRD･････INSERT
//          3:MTOKUI_SEL（得意先）･････INSERT,UPDATE
//          4:MTOKUI_SEL（仕入先）･････INSERT,UPDATE
//          5:MTOKUI_DEP（資産　）･････INSERT//<158> 2と同様だが一応追加
//-------------------------------------------
Procedure lfnParamSet(pKBN:Integer);
begin

    with MTOKUI_DMQuery do
    begin
        ParamByName('UPDTANTO')   .AsFloat        := m_TantoNCode;      //<128>

        // 基本情報以外
//<158>        if (pKBN = 2) or (pKBN = 3) or (pKBN = 4)  then
        if (pKBN = 2) or (pKBN = 3) or (pKBN = 4) or (pKBN = 5) then    //<158>

            ParamByName('BASENCODE')  .AsFloat    := uvNCODE;

        // MOKUI_Selﾃｰﾌﾞﾙに得意先として落とす場合
        if (pKBN = 3) then
        begin
            ParamByName('SeiNCode') .AsFloat      := uvNCODE;

            // 締日1がｾｯﾄされていれば "0"
            // それ以外で、特殊請求NOが入力されていれば "1"
            // 以外は随時請求"2" をｾｯﾄ  <116>
            // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
            if iSumKbn = 1 then
            begin
                ParamByName('TRSEIKBN').AsInteger := 0;
            end
            else
            begin
                ParamByName('TRSEIKBN').AsInteger := 2;     // 更新からは呼ばれないので固定
            end;
        end;

        // MTOKUI_Selﾃｰﾌﾞﾙに仕入先として落とす場合
        if (pKBN = 4) then
        begin
            ParamByName('SeiNCode') .AsFloat       := uvNCODE;

            // 締日1がｾｯﾄされていれば "0"
            // それ以外で、特殊請求NOが入力されていれば "1"
            // 以外は随時請求"2" をｾｯﾄ  <116>
            // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
            if iSumKbn = 1 then
            begin
                ParamByName('TRSEIKBN').AsInteger := 0;
            end
            else
            begin
                ParamByName('TRSEIKBN').AsInteger := 2;     // 更新からは呼ばれないので固定
            end;
        end;

        // 基本情報
        if (pKBN = 0) or (pKBN = 1)  then   // MTOKUIのUPDATE or INSERT
        begin
            ParamByName('CODE')       .AsString   := strGCode;
{↓<234>
            ParamByName('Renso')      .AsString   := JHojyoMA_DMemDataRenChar.asString;
            ParamByName('NM')         .AsString   := JHojyoMA_DMemDataLongName.asString;
            ParamByName('NMK')        .AsString   := JHojyoMA_DMemDataSimpleName.asString;
↑<234>}
//↓<234>
            ParamByName('Renso')      .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataRenChar.asString),    #13#10, '',[rfReplaceAll,rfIgnoreCase]);
            ParamByName('NM')         .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataLongName.asString),   #13#10, '',[rfReplaceAll,rfIgnoreCase]);
            ParamByName('NMK')        .AsString   := StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataSimpleName.asString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
//↑<234>

            if pKBN = 1 then                // MTOKUIのINSERT
            begin
                ParamByName('SUMKBN').AsInteger    := iSumKbn;
                ParamByName('TStartDate') .AsDateTime := m_cJNTArea.getDefDate(1);
                ParamByName('TEndDate')   .AsDateTime := m_cJNTArea.getDefDate(2);
            end;

            if JHojyoMA_DMemDataTKBN.AsString = '○' then
                ParamByName('HojyoKbn1').AsInteger   := 1
            else
                ParamByName('HojyoKbn1').AsInteger   := 0;

            if JHojyoMA_DMemDataSKBN.AsString = '○' then
                ParamByName('HojyoKbn2').AsInteger   := 1
            else
                ParamByName('HojyoKbn2').AsInteger   := 0;

            //<158>ST---
            if JHojyoMA_DMemDataSHojyoKbn1.AsString = '○' then
                ParamByName('SisanHojyoKbn1').AsInteger   := 1
            else
                ParamByName('SisanHojyoKbn1').AsInteger   := 0;

            if JHojyoMA_DMemDataSHojyoKbn2.AsString = '○' then
                ParamByName('SisanHojyoKbn2').AsInteger   := 1
            else
                ParamByName('SisanHojyoKbn2').AsInteger   := 0;
            //<158>ED---

			//<195>ST---
			if JHojyoMA_DMemDataSHojyoKbn3.AsString = '○' then
				ParamByName('SisanHojyoKbn3').AsInteger   := 1
            else
                ParamByName('SisanHojyoKbn3').AsInteger   := 0;
			//<195>ED---

        end;
    end;

end;
{
//-------------------------------------------
//  Mtokui_Selの存在チェック
//-------------------------------------------
Function lfnChkMtokui_Sel(pKBN:Integer):Boolean;
var
    QrySelChk : TMQuery;

begin

    // Queryの構築
    //QrySelChk := Nil;
    QrySelChk := TMQuery.Create(Self);                      // MQueryの構築
    MDataModule.SetDBInfoToQuery(dbCorp_Select, QrySelChk); // DBとMQueryの接続

    //Result := False;
    try
        with QrySelChk do
        begin
            Close;
            SQL.clear;
            SQL.Add(' Select BaseNCode From MTOKUI_Sel ' +
                    ' Where  (BaseNCode = :BaseNCode)  ' +
                    '   and  (RecKbn    = :KBN)        ');
            ParamByName('BaseNCode').AsFloat := JHojyoMA_DMemDataNCode.asFloat;
            ParamByName('KBN').AsInteger     := pKBN;
            Open;

            if not Eof then
            begin
                Result := True;
                if pKBN = 1 then                            // 得意先情報
                    lvTUpd := True
                else                                        // 仕入先情報
                    lvSUpd := True;
            end
            else begin
                Result := False;
                if pKBN = 1 then                            // 得意先情報
                    lvTUpd := False
                else                                        // 仕入先情報
                    lvSUpd := False;
            end;
        end;

    finally
        QrySelChk.Close;
        QrySelChk.Free;
    end;

    uvNCODE := JHojyoMA_DMemDataNCode.asFloat;
end;

//-------------------------------------------
//  消費税請求区分の再設定
//-------------------------------------------
Function lfnSetZSeiKbn_Sel(pKBN:Integer):Boolean;
var
    QrySelChk : TMQuery;

	iTrSeiKbn,iZSeiKbn	:	Integer;

begin

    // Queryの構築
    //QrySelChk := Nil;
    QrySelChk := TMQuery.Create(Self);					    // MQueryの構築
//<Rel>    MDataModule.SetDBInfoToQuery(dbCorp_Select, QrySelChk); // DBとMQueryの接続

//↓<Rel>
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, QrySelChk);
    end
    else
    begin
        MDataModule.SetDBInfoToQuery(dbCorp_Select, QrySelChk);
    end;
//↑<Rel>

    Result := False;
    try
        with QrySelChk do
        begin
            Close;
            SQL.clear;
            SQL.Add(' Select TRSEIKBN,ZSeiKbn From MTOKUI_Sel ' +
                    ' Where  (BaseNCode = :BaseNCode)  ' +
                    '   and  (RecKbn    = :KBN)        ');
            ParamByName('BaseNCode').AsFloat := uvNCODE;
            ParamByName('KBN').AsInteger     := pKBN;
            Open;

			if not EOF then
			begin
				iTrSeiKbn	:= GetFld('TRSEIKBN').AsInteger;
				iZSeiKbn	:= GetFld('ZSeiKbn').AsInteger;
				Close;

				// 通常請求以外で請求書単位
				if (iTrSeiKbn <> 0) and (iZSeiKbn = 2) then
				begin
					Close;
					SQL.clear;
					SQL.Add('Update MTOKUI_Sel set ZSeiKbn=1 where (BaseNCode = :BaseNCode) and  (RecKbn = :KBN)');
		            ParamByName('BaseNCode').AsFloat := uvNCODE;
		            ParamByName('KBN').AsInteger     := pKBN;
					ExecSQL;
				end;
			end;
        end;

	finally
        QrySelChk.Close;
        QrySelChk.Free;
	end;

end;
}
begin   // 本体はじめ
	SessionPractice(C_ST_PROCESS); //<MHIS> ADD ここで作成するので、lfnxxxのローカル関数内の更新では作成しないくて良い。
//<256> ADD St
    // グリッドのKeyPressイベントで採用区分のチェックは行っているので、チェックしないように制御する
    m_bNotStored := True;
//<256> ADD Ed

    // 初期値設定
//<Rel>    QueryMaster := nil;

    try
//<Rel>        QueryMaster := TMQuery.Create(Self);                        // MQueryの構築
//<Rel>        MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryMaster);   // DBとMQueryの接続

        // 重複ﾁｪｯｸありでMTOKUIを読み込む
        if fnDataRead (strGCode, iSumKbn, 1) <> 0 then
        begin
            Result := False;
            exit;
        end;

        HojyoMA_New := MTOKUI_DMQuery.Eof;

//↓<Rel>
	    // -------------------------------------------------------------------------
	    //  ｸﾞﾙｰﾌﾟ管理処理
	    //
	    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、親会社ﾃﾞｰﾀﾍﾞｰｽに対してﾄﾗﾝｻﾞｸｼｮﾝを掛ける
	    //  ｴﾗｰ時は、親会社ﾃﾞｰﾀﾍﾞｰｽに対してﾛｰﾙﾊﾞｯｸを行う
	    //  正常時は、親会社ﾃﾞｰﾀﾍﾞｰｽに対してｺﾐｯﾄを行う
	    // -------------------------------------------------------------------------
	    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    begin
			// MTOKUI_DMQueryを全社DBに接続しなおす。
			MTOKUI_DMQuery.Close;
//<D10>		MDataModule.SetDBInfoToQuery( m_SyncMaster.m_cPDBSelect, MTOKUI_DMQuery );
			gfnJNTSELSetDbName(MTOKUI_DMQuery, m_SyncMaster.m_cPDBSelect);		//<D10>

	        // 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始
	        MDataModule.BeginTran ( m_SyncMaster.m_cPDBSelect ) ;
	    end;
//↑<Rel>

        // ﾄﾗﾝｻﾞｸｼｮﾝの開始
        MDataModule.BeginTran(dbCorp_Select);
        { MTOKUI 基本情報 }
        with MTOKUI_DMQuery do
        begin
            try
                Close;
//<D10>         RequestLive := False;
                SQL.Clear;

                if HojyoMA_New = False then
                begin
                    uvNCODE := JHojyoMA_DMemDataNCode.asFloat; //<228>

                    {更新}
                    SQL.Add(' Update MTOKUI SET        ' +
                        ' UpdTantoNCode= :UPDTANTO ,   ' +  //<128>
                        ' Renso        = :Renso    ,   ' +
                        ' NM           = :NM       ,   ' +
                        ' NMK          = :NMK      ,   ' +

                        ' SisanHojyoKbn1    = :SisanHojyoKbn1,   ' +    //<158>
                        ' SisanHojyoKbn2    = :SisanHojyoKbn2,   ' +    //<158>
						' SisanHojyoKbn3    = :SisanHojyoKbn3,   ' +	//<195>

                        ' HojyoKbn1    = :HojyoKbn1,   ' +
                        ' HojyoKbn2    = :HojyoKbn2    ');
                    if (JHojyoMA_DMemDataTKBN.AsString = '') and    // 得意先採用あり→なし
                       (uvData_Load.pvrSai = 1) then
                    begin
                        SQL.Add(',REndKaisu  = 0,   ' +
                                'RCloseDay1 = 0,    ' +
                                'RCloseDay2 = 0,    ' +
                                'RCloseDay3 = 0,    ' +
                                'RcvDay1    = 0,    ' +
                                'RcvDay2    = 0,    ' +
                                'RcvDay3    = 0,    ' +
                                'RcvMonth1  = 0,    ' +
                                'RcvMonth2  = 0,    ' +
                                'RcvMonth3  = 0,    ' +
                                'RHolidayKbn1 = 0,  ' +
                                'RHolidayKbn2 = 0,  ' +
                                'RHolidayKbn3 = 0   ');
                    end;
                    if (JHojyoMA_DMemDataSKBN.AsString = '') and    // 仕入先採用あり→なし
                       (uvData_Load_S.pvrSai = 1) then
                    begin
                        SQL.Add(',PEndKaisu  = 0,   ' +
                                'PCloseDay1 = 0,    ' +
                                'PCloseDay2 = 0,    ' +
                                'PCloseDay3 = 0,    ' +
                                'PayDay1    = 0,    ' +
                                'PayDay2    = 0,    ' +
                                'PayDay3    = 0,    ' +
                                'PayMonth1  = 0,    ' +
                                'PayMonth2  = 0,    ' +
                                'PayMonth3  = 0,    ' +
                                'PHolidayKbn1 = 0,  ' +
                                'PHolidayKbn2 = 0,  ' +
                                'PHolidayKbn3 = 0   ');
                    end;

                    // Where条件
                    SQL.Add(' Where  (GCODE = :CODE) ' +
                        '  and   (RDelKbn  <> 1) ');

                    // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                    lfnParamSet(0);

                    // SQL実行
                    if (ExecSQL = False) then
                    begin
                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        begin
				            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        end;
//↑<Rel>
                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        MTOKUI_DMQuery.Close;
                        result := False;
                        Exit;
                    end;

//<3135>ins-s
                    //===== MTOKUI_MASのレコードがない場合は作成する =====
					if fnChkMtokui_Others('MAS') = False then
					begin
                    	SQL.Clear;
                    	SQL.Add(' insert into MTOKUI_MAS '+
                    	    ' (BaseNCode    , ' +
                        	' UpdTantoNCode , ' +
                        	' TCreditCash   , ' +
                        	' SDebitCash      ');
                    	SQL.Add(
                    	    ' ) values        ' +
                    	    ' (:BaseNCode   , ' +
                    	    ' :UPDTANTO     , ' +
                    	    ' 0             , ' +
                    	    ' 0               ');
                    	SQL.Add(' )           ');

                    	// ﾊﾟﾗﾒｰﾀの設定
                    	lfnParamSet(2);

                    	// SQLの実行
                    	if (ExecSQL = False) then
                    	begin
                        	ErrorMessageDsp(MTOKUI_DMQuery);

				        	if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        	begin
				            	// 親会社DBのﾛｰﾙﾊﾞｯｸ
				            	MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        	end;

                        	MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        	MTOKUI_DMQuery.Close;
                        	result := False;
                        	Exit;
                    	end;
					end;
//<3135>ins-e

                    {MTOKUI_Sel更新  得意先}

//<196>
//                    if (JHojyoMA_DMemDataTKBN.AsString = '○') or   // 得意先採用にﾁｪｯｸがあるか
//                       (uvData_Load.pvrSai = 1) then                // 変更前にﾁｪｯｸされていたか
//<3135>Del-s
{
                    if (JHojyoMA_DMemDataTKBN.AsString = '○') then   // 得意先採用にﾁｪｯｸがあるか
                    begin
}
//<3135>Del-e
                        // _SELの存在ﾁｪｯｸ
//<245>                 if fnChkMtokui_Sel(1, lvTUpd, lvSUpd) = False then
                    if fnChkMtokui_Sel(1, lvTUpd, lvSUpd, lvTnNCd, lvBmNCd) = False then //<245>担当者内部コード、部門内部コードを取得しておく。
                    begin
                        // 取引先(販売)にInsert
                        SQL.Clear;
                        SQL.Add(' insert into MTOKUI_SEL ' +
                                ' (BaseNCode    , ' +
                                ' UpdTantoNCode , ' +   //<128>
                                ' RecKBN        , ' +
                                ' MASKBN        , ' +
                                ' UsKinKbn      , ' +
                                ' SectionName   , ' +
                                ' TanNm         , ' +
//                                ' Memo1         , ' +
                                ' TRSEIKBN      , ' +
                                ' SeiNCode      , ' +

                                ' URKINHSUKBN   , ' +
                                ' GRUZSEIKBN    , ' +
                                ' ZSEIKBN       , ' +
                                ' ZHSUKBN       , ' +
                                ' ZHSUTNIKBN    , ' +
                                ' TRIHIKIKBN    , ' +
                                ' NMKBN         , ' +
                                ' SSHCDKBN      , ' +
                                ' SSHCDKET      , ' +
                                ' YYKBN         , ' +
                                ' DAINMKBN      , ' +
                                ' USDENPFM      , ' +
                                ' MITPFM        , ' +
                                ' JHDENPFM      , ' +
                                ' SNDENPFM      , ' +
                                ' USGKEI        , ' +
                                ' JYGKEI        , ' +
                                ' SOFOPFM       , ' +
//↓<214>
                                ' TNKRNK        , ' +
                                ' KAKERT        , ' +
//↑<214>
                                ' Memo1         , ' +
                                ' Memo2         , ' +
                                ' HBunNCode1    , ' +
                                ' HBunNCode2    , ' +

                                ' SSSYOPFM      , ' +
                                ' SSSYOKGM      , ' +
                                ' BMNCODE       , ' +
                                ' TNNCODE       , ' +
                                ' RYOPfm        , ' +
                                ' RYOTEKI       , ' +
//<3135>upd-s
//                                ' SYURYOKBN     ) ' +
								' SYURYOKBN     , ' +
        	                    ' KUSGKei       , ' +
        	                    ' KUSDenPfm     , ' +
        	                    ' KMitPfm       , ' +
        	                    ' KJHDenPfm)      ' +
//<3135>upd-e
                                ' values          ' +
                                ' (:BaseNCode   , ' +
                                ' :UPDTANTO     , ' +  //<128>
                                ' 1             , ' +
                                ' 1             , ' +
                                ' 1             , ' +
                                ' ''''          , ' +
                                ' ''''          , ' +
//                                ' ''''          , ' +
                                ' :TRSEIKBN     , ' +
                                ' :SeiNCode     , ' +

                                IntToStr(uvTmpURKINHSUKBN) + ', ' +
                                IntToStr(uvTmpGRUZSEIKBN ) + ', ' +
                                IntToStr(uvTmpZSEIKBN    ) + ', ' +
                                IntToStr(uvTmpZHSUKBN    ) + ', ' +
                                IntToStr(uvTmpZHSUTNIKBN ) + ', ' +
                                IntToStr(uvTmpTRIHIKIKBN ) + ', ' +
                                IntToStr(uvTmpNMKBN      ) + ', ' +
                                IntToStr(uvTmpSSHCDKBN   ) + ', ' +
                                IntToStr(uvTmpSSHCDKET   ) + ', ' +
                                IntToStr(uvTmpYYKBN      ) + ', ' +
                                IntToStr(uvTmpDAINMKBN   ) + ', ' +
                                IntToStr(uvTmpUSDENPFM   ) + ', ' +
                                IntToStr(uvTmpMITPFM     ) + ', ' +
                                IntToStr(uvTmpJHDENPFM   ) + ', ' +
                                IntToStr(uvTmpSNDENPFM   ) + ', ' +
                                IntToStr(uvTmpUSGKEI     ) + ', ' +
                                IntToStr(uvTmpJYGKEI     ) + ', ' +
                                IntToStr(uvTmpSOFOPFM    ) + ', ' +
//↓<214>
                                IntToStr  (uvTmpTnkRnk   ) + ', ' +
                                FloatToStr(uvTmpKakeRt   ) + ', ' +
//↑<214>
                                '''' + uvTmpCmt1 + ''', ' +
                                '''' + uvTmpCmt2 + ''', ' +
                                FloatToStr(uvTmpKKBN1    ) + ', ' +
                                FloatToStr(uvTmpKKBN2    ) + ', ' +

                                IntToStr(uvTmpSSDENPFM   ) + ', ' +
                                IntToStr(uvTmpSSGKEI     ) + ', ' +
                                FloatToStr(uvTmpBMCODE   ) + ', ' +
                                FloatToStr(uvTmpTNCODE   ) + ', ' +
                                IntToStr(uvTmpRYOPFM     ) + ', ' +
                                IntToStr(uvTmpRYOTEKI    ) + ', ' +
//<1719> Upd-s
//                                IntToStr(uvTmpSYURYOKBN  ) + ') ');
                                IntToStr(uvTmpSYURYOKBN  ) + ', ' +
                                IntToStr(uvTmpKUSGKei    ) + ', ' +
                                IntToStr(uvTmpKUSDenPfm  ) + ', ' +
                                IntToStr(uvTmpKMitPfm    ) + ', ' +
                                IntToStr(uvTmpKJHDenPfm  ) + ') ' );
//<1719> Upd-e
                        // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                        lfnParamSet(3);
                        // SQL実行
                        if (ExecSQL = False) then
                        begin
                            ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
                            MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                            MTOKUI_DMQuery.Close;
                            result := False;
                            Exit;
                        end;
                    end
                    else
                    begin
//<3135>Del-s
//分岐条件の(JHojyoMA_DMemDataTKBN.AsString = '○')がなくなり、通過するようになったため削除
{                            if (JHojyoMA_DMemDataTKBN.AsString = '') and    // 得意先採用あり→なしに変更
                               (uvData_Load.pvrSai = 1) then
                            begin
                                // 取引先(販売)にUpdate
                                SQL.Clear;
                                SQL.Add(' update MTOKUI_Sel SET           ' +
                                        ' UpdTantoNCode = :UPDTANTO,      ' +       //<128>
                                        ' MasKbn        = 0,              ' +
                                        ' RZuiSSite     = 0,              ' +
                                        ' RTSEINO       = '''',           ' +
                                        ' TRSEIKBN      = :TRSEIKBN,      ' +
                                        ' RHolidayKbn   = 0,              ' +
                                        ' BunruiNCode1  = 0,              ' +
                                        ' BunruiNCode2  = 0,              ' +
                                        ' BunruiNCode3  = 0,              ' +
                                        ' BunruiNCode4  = 0,              ' +
                                        ' BunruiNCode5  = 0,              ' +
                                        ' BunruiNCode6  = 0,              ' +
                                        ' BunruiNCode7  = 0,              ' +
                                        ' BunruiNCode8  = 0,              ' +
                                        ' BunruiNCode9  = 0,              ' +
                                        ' BunruiNCode10 = 0,              ' +
                                        ' UpdDateTM     = :UpdDateTM      ' + //<Rel>配信後、トリガを実行するためのきっかけ。
                                        ' Where  (BaseNCode = :BaseNCode) ' +
                                        '   and  (RecKbn    = 1)          ');

                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                                ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;  //<128>
                                ParamByName('UpdDateTM').AsDateTime:= now;  //<Rel>

                                // 締日1がｾｯﾄされていれば "0"
                                // それ以外で、特殊請求NOが入力されていれば "1"
                                // 以外は随時請求"2" をｾｯﾄ  <116>
                                // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
                                if iSumKbn = 1 then
                                    ParamByName('TRSEIKBN').AsInteger := 0
                                else
                                    ParamByName('TRSEIKBN').AsInteger := 2;

//<256> DEL                                ParamByName('BaseNCode') .AsFloat  := JHojyoMA_DMemDataNCode.asFloat;
                                ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;  //<256> ADD
                            end
                            //↓<245>
                            	//↑このロジック、判定にひっかからないので、通ることがないが。。。
                                //  ということで、elseで今回の考慮を記述しました。
                    else
                    begin
}
//<3135>Del-e
                    	if (JHojyoMA_DMemDataTKBN.AsString = '○') then   //<3135> 得意先採用にﾁｪｯｸがある場合のみ更新する
                    	begin
                            SQL.Clear;
                            SQL.Add(' update MTOKUI_Sel SET           ' +
                                    ' UpdTantoNCode = :UPDTANTO,      ');

                            if lvTnNCd = 0 then // あらかじめ取得しておいた担当者内部コードが0なら、テンプレートを更新します。
                            begin
                                SQL.Add(' TnNCode = :TnNCode, ');
                            end;
                            if lvBmNCd = 0 then // あらかじめ取得しておいた部門内部コードが0なら、テンプレートを更新します。
                            begin
                                SQL.Add(' BmNCode = :BmNCode, ');
                            end;

                            SQL.Add(' UpdDateTM     = :UpdDateTM      ' + //配信後、トリガを実行するためのきっかけ。
                                    ' Where  (BaseNCode = :BaseNCode) ' +
                                    '   and  (RecKbn    = 1)          ');

                            // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                            ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;
                            ParamByName('UpdDateTM').AsDateTime:= now;

                            if lvTnNCd = 0 then // あらかじめ取得しておいた担当者内部コードが0なら、テンプレートを更新します。
                            begin
                                ParamByName('TnNCode').AsFloat    := uvTmpTNCODE;
                            end;
                            if lvBmNCd = 0 then // あらかじめ取得しておいた部門内部コードが0なら、テンプレートを更新します。
                            begin
                                ParamByName('BmNCode').AsFloat    := uvTmpBMCODE;
                            end;

//<256> DEL                            ParamByName('BaseNCode') .AsFloat  := JHojyoMA_DMemDataNCode.asFloat;
                            ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;  //<256> ADD

//<3135>                        end;
                        //↑<245>

                        // SQL実行
                        	if (ExecSQL = False) then
                        	begin
                            	ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
						    	if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
						    	begin
						        	// 親会社DBのﾛｰﾙﾊﾞｯｸ
						        	MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
						    	end;
//↑<Rel>
                            	MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                            	MTOKUI_DMQuery.Close;
                            	result := False;
                            	Exit;
                        	end;
//↓<2226>
                        	if (uvData_Load.pvrSai = 0)  then               // 変更前にﾁｪｯｸされていなかったか
                        	begin
                            	fnforcedlyUpdAddress('MTOKUI_SEL',1);		//得意先の住所系の更新

							end;//<3135>
//↑<2226>
                    	end;
					end;	//<3135>

//↓<212>
                        // _CRDの存在ﾁｪｯｸ
                    if fnChkMtokui_Others('CRD') = False then
                    begin
		                    //===== 取引先(債権)にInsert =====
		                SQL.Clear;
//<505_001>↓
                        {
		                SQL.Add(' insert into MTOKUI_CRD '+
		                    ' (BaseNCode    , ' +
		                    ' UpdTantoNCode , ' +
		                    ' Ku            , ' +
		                    ' TesuryoFutan    ' +
		                    ' ) values        ' +
		                    ' (:BaseNCode   , ' +
		                    ' :UPDTANTO     , ' +
		                    ' 0             , ' +
		                    ' 0             ) ');

                        }
		                SQL.Add(' insert into MTOKUI_CRD '+
		                    ' (BaseNCode    , ' +
		                    ' UpdTantoNCode , ' +
		                    ' ) values        ' +
		                    ' (:BaseNCode   , ' +
		                    ' :UPDTANTO     ) ');
//<505_001>↑

		                // ﾊﾟﾗﾒｰﾀの設定
		                lfnParamSet(2);

		                // SQLの実行
		                if (ExecSQL = False) then
		                begin
		                    ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
		                    MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
		                    MTOKUI_DMQuery.Close;
		                    result := False;
		                    Exit;
		                end;
					end;
//↑<212>
//↓<2303>                end;
//<3135>				end
//<3135>				else

                	if (JHojyoMA_DMemDataTKBN.AsString = '○') then   // 得意先採用にﾁｪｯｸがあるか
					begin
                        if fnChkMtokui_Sel(1, lvTUpd, lvSUpd, lvTnNCd, lvBmNCd) = True	then //担当者内部コード、部門内部コードを取得しておく。
						//selに得意先のレコードが存在する
						begin
							//今までしてきたチェックでこのif文に入るのは確実
                            if (JHojyoMA_DMemDataTKBN.AsString = '') and    // 得意先採用あり→なしに変更
                               (uvData_Load.pvrSai = 1) then
                            begin
                                // 取引先(販売)にUpdate
                                SQL.Clear;
                                SQL.Add(' update MTOKUI_Sel SET           ' +
                                        ' UpdTantoNCode = :UPDTANTO,      ' +
                                        ' MasKbn        = 0,              ' +
                                        ' RZuiSSite     = 0,              ' +
                                        ' RTSEINO       = '''',           ' +
                                        ' TRSEIKBN      = :TRSEIKBN,      ' +
                                        ' RHolidayKbn   = 0,              ' +
                                        ' BunruiNCode1  = 0,              ' +
                                        ' BunruiNCode2  = 0,              ' +
                                        ' BunruiNCode3  = 0,              ' +
                                        ' BunruiNCode4  = 0,              ' +
                                        ' BunruiNCode5  = 0,              ' +
                                        ' BunruiNCode6  = 0,              ' +
                                        ' BunruiNCode7  = 0,              ' +
                                        ' BunruiNCode8  = 0,              ' +
                                        ' BunruiNCode9  = 0,              ' +
                                        ' BunruiNCode10 = 0,              ' +
                                        ' UpdDateTM     = :UpdDateTM      ' + //配信後、トリガを実行するためのきっかけ。
                                        ' Where  (BaseNCode = :BaseNCode) ' +
                                        '   and  (RecKbn    = 1)          ');

                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                                ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;
                                ParamByName('UpdDateTM').AsDateTime:= now;

                                // 締日1がｾｯﾄされていれば "0"
                                // それ以外で、特殊請求NOが入力されていれば "1"
                                // 以外は随時請求"2" をｾｯﾄ
                                // 合計(iSumKbn = 1)の場合は通常得意先とする
                                if iSumKbn = 1 then
                                    ParamByName('TRSEIKBN').AsInteger := 0
                                else
                                    ParamByName('TRSEIKBN').AsInteger := 2;

                                ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;
                                if (ExecSQL = False) then
                                begin
                                    ErrorMessageDsp(MTOKUI_DMQuery);
                                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                                    begin
                                        // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                        MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
                                    end;
                                    MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                                    MTOKUI_DMQuery.Close;
                                    result := False;
                                    Exit;
                                end;
                            end;
						end;
					end;
//↑<2303>
                    {MSIIRE_Sel更新　仕入先}

//<196>
//                    if (JHojyoMA_DMemDataSKBN.AsString = '○') or   // 仕入先採用にﾁｪｯｸがあるか
//                       (uvData_Load_S.pvrSai = 1) then              // 変更前にﾁｪｯｸされていたか
//<3135>Del-s
{
                    if (JHojyoMA_DMemDataSKBN.AsString = '○') then   // 仕入先採用にﾁｪｯｸがあるか
                    begin
}
//<3135>Del-e
//<245>                 if fnChkMtokui_Sel(2, lvTUpd, lvSUpd) = False then

                    if fnChkMtokui_Sel(2, lvTUpd, lvSUpd, lvTnNCd, lvBmNCd) = False then //<245>担当者内部コード、部門内部コードを取得しておく。
                    begin
                        // 取引先(販売)にInsert
                        SQL.Clear;
                        SQL.Add(' insert into MTOKUI_SEL   '+
                                ' (BaseNCode    , ' +
                                ' UpdTantoNCode , ' +   //<128>
                                ' RecKBN        , ' +
                                ' MasKBN        , ' +
                                ' UsKinKbn      , ' +
                                ' SectionName   , ' +
                                ' TanNm         , ' +
//                                ' Memo1         , ' +
                                ' TRSEIKBN      , ' +
                                ' SeiNCode      , ' +

                                ' URKINHSUKBN   , ' +
                                ' GRUZSEIKBN    , ' +
                                ' ZSEIKBN       , ' +
                                ' ZHSUKBN       , ' +
                                ' ZHSUTNIKBN    , ' +
                                ' TRIHIKIKBN    , ' +
                                ' NMKBN         , ' +
                                ' SSHCDKBN      , ' +
                                ' SSHCDKET      , ' +
                                ' YYKBN         , ' +
                                ' DAINMKBN      , ' +
                                ' USDENPFM      , ' +
                                ' JHDENPFM      , ' +
                                ' SNDENPFM      , ' +
                                ' USGKEI        , ' +
//↓<214>
                                ' TNKRNK        , ' +
                                ' KAKERT        , ' +
//↑<214>
                                ' Memo1         , ' +
                                ' Memo2         , ' +
                                ' HBunNCode1    , ' +
                                ' HBunNCode2    , ' +

                                ' SSSYOPFM      , ' +
                                ' SSSYOKGM      , ' +
                                ' BMNCODE       , ' +
//<3135> Upd-s
//                            ' TNNCODE)        ' +
        	                    ' TNNCODE       , ' +
        	                    ' KUSGKei       , ' +
        	                    ' KUSDenPfm     , ' +
        	                    ' KMitPfm       , ' +
        	                    ' KJHDenPfm)      ' +
//<3135> Upd-e
                                ' values          ' +
                                ' (:BaseNCode   , ' +
                                ' :UPDTANTO     , ' +  //<128>
                                ' 2             , ' +
                                ' 1             , ' +
                                ' 1             , ' +
                                ' ''''          , ' +
                                ' ''''          , ' +
//                                ' ''''          , ' +
                                ' :TRSEIKBN     , ' +
                                ' :SeiNCode     , ' +

                                IntToStr(uvTmpURKINHSUKBN_SI) + ', ' +
                                IntToStr(uvTmpGRUZSEIKBN_SI ) + ', ' +
                                IntToStr(uvTmpZSEIKBN_SI    ) + ', ' +
                                IntToStr(uvTmpZHSUKBN_SI    ) + ', ' +
                                IntToStr(uvTmpZHSUTNIKBN_SI ) + ', ' +
                                IntToStr(uvTmpTRIHIKIKBN_SI ) + ', ' +
                                IntToStr(uvTmpNMKBN_SI      ) + ', ' +
                                IntToStr(uvTmpSSHCDKBN_SI   ) + ', ' +
                                IntToStr(uvTmpSSHCDKET_SI   ) + ', ' +
                                IntToStr(uvTmpYYKBN_SI      ) + ', ' +
                                IntToStr(uvTmpDAINMKBN_SI   ) + ', ' +
                                IntToStr(uvTmpUSDENPFM_SI   ) + ', ' +
                                IntToStr(uvTmpJHDENPFM_SI   ) + ', ' +
                                IntToStr(uvTmpSNDENPFM_SI   ) + ', ' +
                                IntToStr(uvTmpUSGKEI_SI     ) + ', ' +
//↓<214>
                                IntToStr  (uvTmpTnkRnk_Si   ) + ', ' +
                                FloatToStr(uvTmpKakeRt_Si   ) + ', ' +
//↑<214>
                                '''' + uvTmpCmt1_Si + ''', ' +
                                '''' + uvTmpCmt2_Si + ''', ' +
                                FloatToStr(uvTmpKKBN1_Si    ) + ', ' +
                                FloatToStr(uvTmpKKBN2_Si    ) + ', ' +

                                IntToStr(uvTmpSSDENPFM_Si   ) + ', ' +
                                IntToStr(uvTmpSSGKEI_Si     ) + ', ' +
                                FloatToStr(uvTmpBMCODE_Si   ) + ', ' +
//<1719> Upd-s
//                                FloatToStr(uvTmpTNCODE_Si   ) + ') ');
                                FloatToStr(uvTmpTNCODE_Si     ) + ', ' +
                                FloatToStr(uvTmpKUSGKei_Si    ) + ', ' +
                                FloatToStr(uvTmpKUSDenPfm_Si  ) + ', ' +
                                FloatToStr(uvTmpKMitPfm_Si    ) + ', ' +
                                FloatToStr(uvTmpKJHDenPfm_Si  ) + ') ' );
//<1719> Upd-e
                        // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                        lfnParamSet(4);

                        // SQLの実行
                        if (ExecSQL = False) then
                        begin
                            ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
                            MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                            MTOKUI_DMQuery.Close;
                            result := False;
                            Exit;
                        end;

                    end
                    else
                    begin
//<3135>Del-s
//(JHojyoMA_DMemDataSKBN.AsString = '○')の条件がなくなり通過するようになったため削除
{
                            if (JHojyoMA_DMemDataSKBN.AsString = '') and    // 仕入先採用あり→なしに変更
                               (uvData_Load_S.pvrSai = 1) then
                            begin
                                SQL.Clear;
                                SQL.Add(' update MTOKUI_Sel SET          ' +
                                        ' UpdTantoNCode = :UPDTANTO,     ' +       //<128>
                                        ' MasKbn        = 0,             ' +
                                        ' RZuiSSite     = 0,             ' +
                                        ' RTSEINO       = '''',          ' +
                                        ' TRSEIKBN      = :TRSEIKBN,     ' +
                                        ' RHolidayKbn   = 0,             ' +
                                        ' BunruiNCode1  = 0,             ' +
                                        ' BunruiNCode2  = 0,             ' +
                                        ' BunruiNCode3  = 0,             ' +
                                        ' BunruiNCode4  = 0,             ' +
                                        ' BunruiNCode5  = 0,             ' +
                                        ' BunruiNCode6  = 0,             ' +
                                        ' BunruiNCode7  = 0,             ' +
                                        ' BunruiNCode8  = 0,             ' +
                                        ' BunruiNCode9  = 0,             ' +
                                        ' BunruiNCode10 = 0,             ' +
                                        ' UpdDateTM     = :UpdDateTM     ' + //<Rel>配信後、トリガを実行するためのきっかけ。
                                        ' Where (BaseNCode = :BaseNCode) ' +
                                        '   and (RecKbn    = 2)          ');

                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                                ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;  //<128>
                                ParamByName('UpdDateTM').AsDateTime:= now;  //<Rel>

                                // 締日1がｾｯﾄされていれば "0"
                                // それ以外で、特殊請求NOが入力されていれば "1"
                                // 以外は随時請求"2" をｾｯﾄ  <116>
                                // 合計(iSumKbn = 1)の場合は通常得意先とする <122>
                                if iSumKbn = 1 then
                                    ParamByName('TRSEIKBN').AsInteger := 0
                                else
	                                ParamByName('TRSEIKBN').AsInteger := 2;

//<256> DEL                                ParamByName('BaseNCode') .AsFloat  := JHojyoMA_DMemDataNCode.asFloat;
                                ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;  //<256> ADD

                                // SQLの実行
                                if (ExecSQL = False) then
                                begin
                                    ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
							        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
							        begin
							            // 親会社DBのﾛｰﾙﾊﾞｯｸ
							            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
							        end;
//↑<Rel>
                                    MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                                    MTOKUI_DMQuery.Close;
                                    result := False;
                                    Exit;
                                end;
                            end
                            //↓<245>
                            	//↑このロジック、判定にひっかからないので、通ることがないが。。。
                                //  ということで、elseで今回の考慮を記述しました。
                            else
                            begin
}
//<3135>Del-e
                    	if (JHojyoMA_DMemDataSKBN.AsString = '○') then   // 仕入先採用にﾁｪｯｸがある場合のみ更新
                    	begin

                            SQL.Clear;
                            SQL.Add(' update MTOKUI_Sel SET           ' +
                                    ' UpdTantoNCode = :UPDTANTO,      ');

                            if lvTnNCd = 0 then // あらかじめ取得しておいた担当者内部コードが0なら、テンプレートを更新します。
                            begin
                                SQL.Add(' TnNCode = :TnNCode, ');
                            end;
                            if lvBmNCd = 0 then // あらかじめ取得しておいた部門内部コードが0なら、テンプレートを更新します。
                            begin
                                SQL.Add(' BmNCode = :BmNCode, ');
                            end;

                            SQL.Add(' UpdDateTM     = :UpdDateTM      ' + //配信後、トリガを実行するためのきっかけ。
                                    ' Where  (BaseNCode = :BaseNCode) ' +
                                    '   and  (RecKbn    = 2)          ');

                            // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                            ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;
                            ParamByName('UpdDateTM').AsDateTime:= now;

                            if lvTnNCd = 0 then // あらかじめ取得しておいた担当者内部コードが0なら、テンプレートを更新します。
                            begin
                                ParamByName('TnNCode').AsFloat    := uvTmpTNCODE_Si;
                            end;
                            if lvBmNCd = 0 then // あらかじめ取得しておいた部門内部コードが0なら、テンプレートを更新します。
                            begin
                                ParamByName('BmNCode').AsFloat    := uvTmpBMCODE_Si;
                            end;

//<256> DEL                            ParamByName('BaseNCode') .AsFloat  := JHojyoMA_DMemDataNCode.asFloat;
                            ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;  //<256> ADD

                            // SQLの実行
                            if (ExecSQL = False) then
                            begin
                                ErrorMessageDsp(MTOKUI_DMQuery);
						        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
						        begin
						            // 親会社DBのﾛｰﾙﾊﾞｯｸ
						            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
						        end;
                                MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                                MTOKUI_DMQuery.Close;
                                result := False;
                                Exit;
                            end;
                        end;
                        //↑<245>
//↓<2226>
                        if (uvData_Load_S.pvrSai = 0)  then               // 変更前にﾁｪｯｸされていなかったか
                        begin
                            fnforcedlyUpdAddress('MTOKUI_SEL',2);		  // 仕入先の住所系の更新
                        end;
//↑<2226>
                    end;
//↓<212>
                        // _PAYの存在ﾁｪｯｸ

                    if fnChkMtokui_Others('PAY') = False then
                    begin
		                //===== 取引先(支払)にInsert =====
		                SQL.Clear;
		                SQL.Add(' insert into MTOKUI_PAY ' +
		                    ' (BaseNCode    , ' +
		                    ' UpdTantoNCode , ' +
		                    ' PostNo1       , ' +
		                    ' PostNo2       , ' +
		                    ' ADS1          , ' +
		                    ' ADS2          , ' +
		                    ' TEL1          , ' +
		                    ' TEL2          , ' +
		                    ' FAX1          , ' +
		                    ' SectionName   , ' +
		                    ' MailAddress   , ' +
// <238> MOD-STR
//		                    ' LetterKBN)      ' +
		                    ' LetterKbn     , ' +
		                    ' GensenUseKbn  , ' +
		                    ' PersonKbn)      ' +
// <238> MOD-END
		                    ' values          ' +
		                    ' (:BaseNCode   , ' +
		                    ' :UPDTANTO     , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
		                    ' ''''          , ' +
// <238> MOD-STR
//		                    ' 0             ) ');
                            IntToStr(uvTmpLetterKbn) + ', ' +
                            IntToStr(uvTmpGensenUseKbn) + ', ' +
                            IntToStr(uvTmpPersonKbn) + ') ');
// <238> MOD-END

		                // ﾊﾟﾗﾒｰﾀの設定
		                lfnParamSet(2);

		                // SQLの実行
		                if (ExecSQL = False) then
		                begin
		                    ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
		                    MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
		                    MTOKUI_DMQuery.Close;
		                    result := False;
		                    Exit;
		                end;
					end;
//↑<212>
//↓<2303>                end;
//<3135>upd-s
{
					end
					else
}

                    if (JHojyoMA_DMemDataSKBN.AsString = '○') then   // 仕入先採用にﾁｪｯｸがあるか
//<3135>upd-e
					begin
						if fnChkMtokui_Sel(2, lvTUpd, lvSUpd, lvTnNCd, lvBmNCd) = True then //担当者内部コード、部門内部コードを取得しておく。
						//selに仕入先のレコードが存在する。
						begin
                            if (JHojyoMA_DMemDataSKBN.AsString = '') and    //仕入先採用あり→なしに変更
                               (uvData_Load_S.pvrSai = 1) then
                            begin
                                SQL.Clear;
                                SQL.Add(' update MTOKUI_Sel SET          ' +
                                        ' UpdTantoNCode = :UPDTANTO,     ' +
                                        ' MasKbn        = 0,             ' +
                                        ' RZuiSSite     = 0,             ' +
                                        ' RTSEINO       = '''',          ' +
                                        ' TRSEIKBN      = :TRSEIKBN,     ' +
                                        ' RHolidayKbn   = 0,             ' +
                                        ' BunruiNCode1  = 0,             ' +
                                        ' BunruiNCode2  = 0,             ' +
                                        ' BunruiNCode3  = 0,             ' +
                                        ' BunruiNCode4  = 0,             ' +
                                        ' BunruiNCode5  = 0,             ' +
                                        ' BunruiNCode6  = 0,             ' +
                                        ' BunruiNCode7  = 0,             ' +
                                        ' BunruiNCode8  = 0,             ' +
                                        ' BunruiNCode9  = 0,             ' +
                                        ' BunruiNCode10 = 0,             ' +
                                        ' UpdDateTM     = :UpdDateTM     ' + //配信後、トリガを実行するためのきっかけ。
                                        ' Where (BaseNCode = :BaseNCode) ' +
                                        '   and (RecKbn    = 2)          ');

                                // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                                ParamByName('UPDTANTO').AsFloat    := m_TantoNCode;
                                ParamByName('UpdDateTM').AsDateTime:= now;

                                // 締日1がｾｯﾄされていれば "0"
                                // それ以外で、特殊請求NOが入力されていれば "1"
                                // 以外は随時請求"2" をｾｯﾄ  <116>
                                // 合計(iSumKbn = 1)の場合は通常得意先とする
                                if iSumKbn = 1 then
                                    ParamByName('TRSEIKBN').AsInteger := 0
                                else
	                                ParamByName('TRSEIKBN').AsInteger := 2;

                                ParamByName('BaseNCode') .AsString  := JHojyoMA_DMemDataNCode.asString;

                                // SQLの実行
                                if (ExecSQL = False) then
                                begin
                                    ErrorMessageDsp(MTOKUI_DMQuery);
							        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
							        begin
							            // 親会社DBのﾛｰﾙﾊﾞｯｸ
							            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
							        end;
                                    MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                                    MTOKUI_DMQuery.Close;
                                    result := False;
                                    Exit;
                                end;
                            end;
						end;
					end;

//↑<2303>
//↓<212>
//<3135>Del-s //未採用でもレコードがなければ作成する
{
					// 更新時、資産購入先、資産売却先、リース取引先のどれか一つでも採用があり
					// MTOKUI_DEPのレコードがないときは、作ってあげる。
					if (JHojyoMA_DMemDataSHojyoKbn1.AsString = '○')
					or (JHojyoMA_DMemDataSHojyoKbn2.AsString = '○')
					or (JHojyoMA_DMemDataSHojyoKbn3.AsString = '○') then
					begin
}
//<3135>Del-e
                    // _DEPの存在ﾁｪｯｸ
                    if fnChkMtokui_Others('DEP') = False then
                    begin
	                    //===== 取引先(資産情報)にInsert =====
	                    SQL.Clear;
	                    SQL.Add(' insert into MTOKUI_DEP    '+
	                        ' (BaseNCode,UpdTantoNCode)     '+
	                        ' Values        ' +
	                        ' (:BaseNCode,:UPDTANTO)' );

	                    // ﾊﾟﾗﾒｰﾀの設定
	                    lfnParamSet(5);

	                    // SQLの実行
	                    if (ExecSQL = False) then
	                    begin
	                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
	                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
	                        MTOKUI_DMQuery.Close;
	                        result := False;
	                        Exit;
	                    end;
					end;
//↓<2226>
//<3135>ins-s
				// 更新時、資産購入先、資産売却先、リース取引先のどれか一つでも採用があり
				// MTOKUI_DEPのレコードがないときは、作ってあげる。
					if (JHojyoMA_DMemDataSHojyoKbn1.AsString = '○')
					or (JHojyoMA_DMemDataSHojyoKbn2.AsString = '○')
					or (JHojyoMA_DMemDataSHojyoKbn3.AsString = '○') then
					begin
//<3135>ins-e
						if	(m_SisanSaiyoRec.SisanHojyoKbn1 = 0) and
                   			(m_SisanSaiyoRec.SisanHojyoKbn2 = 0) and  		  // 元の得意先の登録で資産購入先、資産売却先、リース取引先採用区分の
                  			(m_SisanSaiyoRec.SisanHojyoKbn3 = 0)	then      // いずれかひとつも採用していなかった
						begin
							fnforcedlyUpdAddress('MTOKUI_DEP');			  //資産の住所系の更新
						end;
//↑<2226>
					end;
//↑<212>
                end
                else begin
                    {新規追加}
                    SQL.Add(' insert into MTOKUI '+
                        ' (GCODE        , ' +
                        ' UpdTantoNCode , ' +  //<128>
                        ' Renso         , ' +
                        ' NM            , ' +
                        ' NMK           , ' +
                        ' SumKbn        , ' +
                        ' HojyoKbn1     , ' +
                        ' HojyoKbn2     , ' +
                        ' SisanHojyoKbn1, ' +  //<158>
                        ' SisanHojyoKbn2, ' +  //<158>
						' SisanHojyoKbn3, ' +  //<195>
                        ' TStartDate    , ' +
                        ' TEndDate        ');

                    SQL.Add(' ) values    ' +
                        ' (:CODE        , ' +
                        ' :UPDTANTO     , ' +   //<128>
                        ' :Renso        , ' +
                        ' :NM           , ' +
                        ' :NMK          , ' +
                        ' :SumKbn       , ' +
                        ' :HojyoKbn1    , ' +
                        ' :HojyoKbn2    , ' +
                        ' :SisanHojyoKbn1, ' +  //<158>
                        ' :SisanHojyoKbn2, ' +  //<158>
						' :SisanHojyoKbn3, ' +	//<195>
                        ' :TStartDate   , ' +
                        ' :TEndDate       ' +
                        ' )           ');

                    // ﾊﾟﾗﾒｰﾀのｾｯﾄ
                    lfnParamSet(1);

                    // SQLの実行
                    if (ExecSQL = False) then
                    begin
                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        begin
				            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        end;
//↑<Rel>
                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        MTOKUI_DMQuery.Close;
                        result := False;
                        Exit;
                    end;

                    // 内部ｺｰﾄﾞ取得
                    Close;
                    Sql.Clear;
                    Sql.Clear;
                    Sql.Add('select @@identity NCODE from MTOKUI');
                    Open;

                    uvNCODE := 0;
                    if Not Eof then
                        uvNCODE := FieldByName('NCODE').asFloat;


                    //===== 取引先(会計)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_MAS '+
                        ' (BaseNCode    , ' +
                        ' UpdTantoNCode , ' +  //<128>
                        ' TCreditCash   , ' +
                        ' SDebitCash      ');
                    SQL.Add(
                        ' ) values        ' +
                        ' (:BaseNCode   , ' +
                        ' :UPDTANTO     , ' +   //<128>
                        ' 0             , ' +
                        ' 0               ');
                    SQL.Add(' )           ');

                    // ﾊﾟﾗﾒｰﾀの設定
                    lfnParamSet(2);

                    // SQLの実行
                    if (ExecSQL = False) then
                    begin
                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        begin
				            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        end;
//↑<Rel>
                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        MTOKUI_DMQuery.Close;
                        result := False;
                        Exit;
                    end;

                    //===== 取引先(販売)にInsert =====

                    // 得意先
//↓<Rel>採用に関わらず、新規追加時は販売のレコードは常に作る
//// <145>↓
////                    if f1TSKBN.Checked then
//                    if JHojyoMA_DMemDataTKBN.AsString = '○' then
//// <145>↑
//                    begin
//↑<Rel>
                        SQL.Clear;
                        SQL.Add(' Insert into MTOKUI_SEL ' +
                            ' (BaseNCode     , ' +
                            ' UpdTantoNCode  , ' +  //<128>
                            ' RecKBN         , ' +
                            ' MASKBN         , ' +
                            ' UsKinKbn       , ' +
                            ' SectionName    , ' +
                            ' TanNm          , ' +
//                            ' Memo1          , ' +
                            ' TRSEIKBN       , ' +
                            ' SeiNCode       , ' +

                            ' URKINHSUKBN    , ' +
                            ' GRUZSEIKBN     , ' +
                            ' ZSEIKBN        , ' +
                            ' ZHSUKBN        , ' +
                            ' ZHSUTNIKBN     , ' +
                            ' TRIHIKIKBN     , ' +
                            ' NMKBN          , ' +
                            ' SSHCDKBN       , ' +
                            ' SSHCDKET       , ' +
                            ' YYKBN          , ' +
                            ' DAINMKBN       , ' +
                            ' USDENPFM       , ' +
                            ' MITPFM         , ' +
                            ' JHDENPFM       , ' +
                            ' SNDENPFM       , ' +
                            ' USGKEI         , ' +
                            ' JYGKEI         , ' +
                            ' SOFOPFM        , ' +
//↓<214>
                            ' TNKRNK        , ' +
                            ' KAKERT        , ' +
//↑<214>
                            ' Memo1         , ' +
                            ' Memo2         , ' +
                            ' HBunNCode1    , ' +
                            ' HBunNCode2    , ' +

                            ' SSSYOPFM      , ' +
                            ' SSSYOKGM      , ' +
                            ' BMNCODE       , ' +
                            ' TNNCODE       , ' +
                            ' RYOPfm        , ' +
                            ' RYOTEKI       , ' +
//<1719> Upd-s
//                            ' SYURYOKBN)      ' +
                            ' SYURYOKBN     , ' +
                            ' KUSGKei       , ' +
                            ' KUSDenPfm     , ' +
                            ' KMitPfm       , ' +
                            ' KJHDenPfm)      ' +
//<1719> Upd-e
                            ' values           ' +
                            ' (:BaseNCode    , ' +
                            ' :UPDTANTO      , ' +   //<128>
                            ' 1              , ' +
                            ' 1              , ' +
                            ' 1              , ' +
                            ' ''''           , ' +
                            ' ''''           , ' +
//                            ' ''''           , ' +
                            ' :TRSEIKBN      , ' +
                            ' :SeiNCode      , ' +

                            IntToStr(uvTmpURKINHSUKBN) + ', ' +
                            IntToStr(uvTmpGRUZSEIKBN ) + ', ' +
                            IntToStr(uvTmpZSEIKBN    ) + ', ' +
                            IntToStr(uvTmpZHSUKBN    ) + ', ' +
                            IntToStr(uvTmpZHSUTNIKBN ) + ', ' +
                            IntToStr(uvTmpTRIHIKIKBN ) + ', ' +
                            IntToStr(uvTmpNMKBN      ) + ', ' +
                            IntToStr(uvTmpSSHCDKBN   ) + ', ' +
                            IntToStr(uvTmpSSHCDKET   ) + ', ' +
                            IntToStr(uvTmpYYKBN      ) + ', ' +
                            IntToStr(uvTmpDAINMKBN   ) + ', ' +
                            IntToStr(uvTmpUSDENPFM   ) + ', ' +
                            IntToStr(uvTmpMITPFM     ) + ', ' +
                            IntToStr(uvTmpJHDENPFM   ) + ', ' +
                            IntToStr(uvTmpSNDENPFM   ) + ', ' +
                            IntToStr(uvTmpUSGKEI     ) + ', ' +
                            IntToStr(uvTmpJYGKEI     ) + ', ' +
                            IntToStr(uvTmpSOFOPFM    ) + ', ' +
//↓<214>
                            IntToStr  (uvTmpTnkRnk   ) + ', ' +
                            FloatToStr(uvTmpKakeRt   ) + ', ' +
//↑<214>
                            '''' + uvTmpCmt1 + ''', ' +
                            '''' + uvTmpCmt2 + ''', ' +
                            FloatToStr(uvTmpKKBN1    ) + ', ' +
                            FloatToStr(uvTmpKKBN2    ) + ', ' +

                            IntToStr(uvTmpSSDENPFM   ) + ', ' +
                            IntToStr(uvTmpSSGKEI     ) + ', ' +
                            FloatToStr(uvTmpBMCODE   ) + ', ' +
                            FloatToStr(uvTmpTNCODE   ) + ', ' +
                            IntToStr(uvTmpRYOPFM     ) + ', ' +
                            IntToStr(uvTmpRYOTEKI    ) + ', ' +
//<1719> Upd-s
//                            IntToStr(uvTmpSYURYOKBN  ) + ') ');
                            IntToStr(uvTmpSYURYOKBN  ) + ', ' +
                            IntToStr(uvTmpKUSGKei    ) + ', ' +
                            IntToStr(uvTmpKUSDenPfm  ) + ', ' +
                            IntToStr(uvTmpKMitPfm    ) + ', ' +
                            IntToStr(uvTmpKJHDenPfm  ) + ') ' );
//<1719> Upd-e
                        // ﾊﾟﾗﾒｰﾀの設定
                        lfnParamSet(3);

                        // SQLの実行
                        if (ExecSQL = False) then
                        begin
                            ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
                            MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                            MTOKUI_DMQuery.Close;
                            result := False;
                            Exit;
                        end;
//<Rel>                    end;

                    // 仕入先
//↓<Rel>採用に関わらず、新規追加時は販売のレコードは常に作る
//// <145>↓
////                    if f1SSKBN.Checked then
//                    if (JHojyoMA_DMemDataSKBN.AsString = '○') then
//// <145>↑
//                    begin
//↑<Rel>
                        SQL.Clear;
                        SQL.Add(' insert into MTOKUI_SEL ' +
                            ' (BaseNCode    , ' +
                            ' UpdTantoNCode , ' +  //<128>
                            ' RecKBN        , ' +
                            ' MasKBN        , ' +
                            ' UsKinKbn      , ' +
                            ' SectionName   , ' +
                            ' TanNm         , ' +
//                            ' Memo1         , ' +
                            ' TRSEIKBN      , ' +
                            ' SeiNCode      , ' +

                            ' URKINHSUKBN    , ' +
                            ' GRUZSEIKBN     , ' +
                            ' ZSEIKBN        , ' +
                            ' ZHSUKBN        , ' +
                            ' ZHSUTNIKBN     , ' +
                            ' TRIHIKIKBN     , ' +
                            ' NMKBN          , ' +
                            ' SSHCDKBN       , ' +
                            ' SSHCDKET       , ' +
                            ' YYKBN          , ' +
                            ' DAINMKBN       , ' +
                            ' USDENPFM       , ' +
                            ' JHDENPFM       , ' +
                            ' SNDENPFM       , ' +
                            ' USGKEI         , ' +
//↓<214>
                            ' TNKRNK        , ' +
                            ' KAKERT        , ' +
//↑<214>
                            ' Memo1         , ' +
                            ' Memo2         , ' +
                            ' HBunNCode1    , ' +
                            ' HBunNCode2    , ' +

                            ' SSSYOPFM      , ' +
                            ' SSSYOKGM      , ' +
                            ' BMNCODE       , ' +
//<1719> Upd-s
//                            ' TNNCODE)        ' +
                            ' TNNCODE       , ' +
                            ' KUSGKei       , ' +
                            ' KUSDenPfm     , ' +
                            ' KMitPfm       , ' +
                            ' KJHDenPfm)      ' +
//<1719> Upd-e
                            ' values          ' +
                            ' (:BaseNCode   , ' +
                            ' :UPDTANTO     , ' +   //<128>
                            ' 2             , ' +
                            ' 1             , ' +
                            ' 1             , ' +
                            ' ''''          , ' +
                            ' ''''          , ' +
//                            ' ''''          , ' +
                            ' :TRSEIKBN     , ' +
                            ' :SeiNCode     , ' +

                            IntToStr(uvTmpURKINHSUKBN_SI) + ', ' +
                            IntToStr(uvTmpGRUZSEIKBN_SI ) + ', ' +
                            IntToStr(uvTmpZSEIKBN_SI    ) + ', ' +
                            IntToStr(uvTmpZHSUKBN_SI    ) + ', ' +
                            IntToStr(uvTmpZHSUTNIKBN_SI ) + ', ' +
                            IntToStr(uvTmpTRIHIKIKBN_SI ) + ', ' +
                            IntToStr(uvTmpNMKBN_SI      ) + ', ' +
                            IntToStr(uvTmpSSHCDKBN_SI   ) + ', ' +
                            IntToStr(uvTmpSSHCDKET_SI   ) + ', ' +
                            IntToStr(uvTmpYYKBN_SI      ) + ', ' +
                            IntToStr(uvTmpDAINMKBN_SI   ) + ', ' +
                            IntToStr(uvTmpUSDENPFM_SI   ) + ', ' +
                            IntToStr(uvTmpJHDENPFM_SI   ) + ', ' +
                            IntToStr(uvTmpSNDENPFM_SI   ) + ', ' +
                            IntToStr(uvTmpUSGKEI_SI     ) + ', ' +
//↓<214>
                            IntToStr  (uvTmpTnkRnk_Si   ) + ', ' +
                            FloatToStr(uvTmpKakeRt_Si   ) + ', ' +
//↑<214>
                            '''' + uvTmpCmt1_Si + ''', ' +
                            '''' + uvTmpCmt2_Si + ''', ' +
                            FloatToStr(uvTmpKKBN1_Si    ) + ', ' +
                            FloatToStr(uvTmpKKBN2_Si    ) + ', ' +

                            IntToStr(uvTmpSSDENPFM_Si   ) + ', ' +
                            IntToStr(uvTmpSSGKEI_Si     ) + ', ' +
                            FloatToStr(uvTmpBMCODE_Si   ) + ', ' +
//<1719> Upd-s
//                            FloatToStr(uvTmpTNCODE_Si   ) + ') ');
                            FloatToStr(uvTmpTNCODE_Si     ) + ', ' +
                            FloatToStr(uvTmpKUSGKei_Si    ) + ', ' +
                            FloatToStr(uvTmpKUSDenPfm_Si  ) + ', ' +
                            FloatToStr(uvTmpKMitPfm_Si    ) + ', ' +
                            FloatToStr(uvTmpKJHDenPfm_Si  ) + ') ');
//<1719> Upd-e
                        // ﾊﾟﾗﾒｰﾀの設定
                        lfnParamSet(4);

                        // SQLの実行
                        if (ExecSQL = False) then
                        begin
                            ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
					        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
					        begin
					            // 親会社DBのﾛｰﾙﾊﾞｯｸ
					            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
					        end;
//↑<Rel>
                            MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                            MTOKUI_DMQuery.Close;
                            result := False;
                            Exit;
                        end;
//<Rel>                    end;


                    //===== 取引先(支払)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_PAY ' +
                        ' (BaseNCode    , ' +
                        ' UpdTantoNCode , ' +  //<128>
                        ' PostNo1       , ' +
                        ' PostNo2       , ' +
                        ' ADS1          , ' +
                        ' ADS2          , ' +
                        ' TEL1          , ' +
                        ' TEL2          , ' +
                        ' FAX1          , ' +
                        ' SectionName   , ' +
                        ' MailAddress   , ' +
// <238> MOD-STR
//                      ' LetterKBN)      ' +
                        ' LetterKbn     , ' +
                        ' GensenUseKbn  , ' +
                        ' PersonKbn)      ' +
// <238> MOD-END
                        ' values          ' +
                        ' (:BaseNCode   , ' +
                        ' :UPDTANTO       ');  //<128>
                        SQL.Add('       , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
                        ' ''''          , ' +
// <238> MOD-STR
//                      ' 0               ');
                        IntToStr(uvTmpLetterKbn) + ', ' +
                        IntToStr(uvTmpGensenUseKbn) + ', ' +
                        IntToStr(uvTmpPersonKbn));
// <238> MOD-END
                    SQL.Add(' )           ');

                    // ﾊﾟﾗﾒｰﾀの設定
                    lfnParamSet(2);

                    // SQLの実行
                    if (ExecSQL = False) then
                    begin
                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        begin
				            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        end;
//↑<Rel>
                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        MTOKUI_DMQuery.Close;
                        result := False;
                        Exit;
                    end;


                    //===== 取引先(債権)にInsert =====
                    SQL.Clear;
//<505_001>↓
{
                    SQL.Add(' insert into MTOKUI_CRD '+
                        ' (BaseNCode    , ' +
                        ' UpdTantoNCode , ' +  //<128>
                        ' ) values        ' +
                        ' (:BaseNCode   , ' +
                        ' :UPDTANTO       ' +   //<128>
                        '       , '         +
                        ' 0             , ' +
                        ' 0               ' +
                        ' )           ');
}
                    SQL.Add(' insert into MTOKUI_CRD '+
                        ' (BaseNCode    , ' +
                        ' UpdTantoNCode , ' +  //<128>
                        ' ) values        ' +
                        ' (:BaseNCode   , ' +
                        ' :UPDTANTO       ' +   //<128>
                        ' )           ');
//<505_001>↑

                    // ﾊﾟﾗﾒｰﾀの設定
                    lfnParamSet(2);

                    // SQLの実行
                    if (ExecSQL = False) then
                    begin
                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        begin
				            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        end;
//↑<Rel>
                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        MTOKUI_DMQuery.Close;
                        result := False;
                        Exit;
                    end;

                    // <158>ST--------------------------------------------------
                    //===== 取引先(資産情報)にInsert =====
                    SQL.Clear;
                    SQL.Add(' insert into MTOKUI_DEP    '+
                        ' (BaseNCode,UpdTantoNCode)     '+
                        ' Values        ' +
                        ' (:BaseNCode,:UPDTANTO)' );

                    // ﾊﾟﾗﾒｰﾀの設定
                    lfnParamSet(5);

                    // SQLの実行
                    if (ExecSQL = False) then
                    begin
                        ErrorMessageDsp(MTOKUI_DMQuery);
//↓<Rel>
				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
				        begin
				            // 親会社DBのﾛｰﾙﾊﾞｯｸ
				            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
				        end;
//↑<Rel>
                        MDataModule.Rollback (dbCorp_Select);   //  ﾛｰﾙﾊﾞｯｸ(破棄)
                        MTOKUI_DMQuery.Close;
                        result := False;
                        Exit;
                    end;
                    // <158>ST--------------------------------------------------

                    m_NewRecord		:= TRUE;    // <165>
                end;
                //=======================================================
                // 得意先請求実績レコードの再作成
                //=======================================================
                if lvTUpd then
                begin
                    // MTOKUI_Sを再作成 <103>
                    //------------------------------------
                    // 変更されているかﾁｪｯｸ
                    //------------------------------------
                    with uvData_Load do
                    begin
                                            // 得意先の採用状態が変更された
                        if ((pvrSai = 0) and (JHojyoMA_DMemDataTKBN.AsString = '○')) or
                            ((pvrSai = 1) and (JHojyoMA_DMemDataTKBN.AsString = '')) then
                            Bol := False
                        else
                            Bol := True;

                        //-------------------------------
                        // _Sあり発生なしは_Sを削除する(再作成を実行させ削除させる)
                        //------------------------------------
                        // 入力が変更されている
                        if Bol = False then
                        begin
//↓<Rel>
    				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    			        begin
                                //グループ会計子社は全社DBへの接続とする
//<D10>							MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc7);
								gfnJNTSELSetDbName(StdProc7, m_SyncMaster.m_cPDBSelect);		//<D10>
                            end;
//↑<Rel>
                            // PRC_MA0130_013
                            with StdProc7 do
                            begin
								ParamByName('@pTRNCD').AsFloat := uvNCODE;			    // 得意先ｺｰﾄﾞ
                                ExecProc;
                                BolS	:= (ParamByName('@RET_S')     .AsInteger = -1);	// MTOKUI_S存在
                                BolDen	:= (ParamByName('@RET_ZANHAS').AsInteger = -1);	// 残高または発生
                            end;
                            if (BolS = True) and (BolDen = False) then
                                Bol := False
                            else
                                Bol := True;
                        end;

                        //------------------------------------
                        // 再作成
                        //------------------------------------
                        if not Bol then
                        begin
//<Rel>                     MDataModule.SetDBInfoToQuery( dbCorp_Select, StdProc4 );	// DBとMQueryの接続
//↓<Rel>
    				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    			        begin
                                //グループ会計子社は全社DBに対して更新する。
//<D10>							MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc4);
								gfnJNTSELSetDbName(StdProc4, m_SyncMaster.m_cPDBSelect);		//<D10>
                            end
                            else
                            begin
                                //グループ会計子社以外は自社DBに対して更新する。
//<D10>							MDataModule.SetDBInfoToSProc(dbCorp_Select, StdProc4);
								gfnJNTSELSetDbName(StdProc4, dbCorp_Select);		//<D10>
                            end;
//↑<Rel>

                            // PRC_MA0130_103
                            with StdProc4 do
                            begin
								ParamByName('@pTRNCD').AsFloat		:= uvNCODE;			// 得意先ｺｰﾄﾞ
                                ParamByName('@pSEIKBN_B').AsInteger := pvrSeiKbn;       // 変更前請求区分
                                ParamByName('@pSEIKBN_A').AsInteger := uvSeiKbn;        // 変更後請求区分
                                ExecProc;
                                Bol := (ParamByName('@RETURN_VALUE').AsInteger = 0);
                            end;

                            if not Bol then
                            begin
//↓<Rel>
						        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
						        begin
						            // 親会社DBのﾛｰﾙﾊﾞｯｸ
						            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
						        end;
//↑<Rel>
                                // ﾛｰﾙﾊﾞｯｸ(破棄)
                                MDataModule.Rollback (dbCorp_Select);
                                result := False;
                                Exit;
                            end;
                        end;
                    end;
                end;

                //=======================================================
                //仕入先請求実績レコードの再作成
                //=======================================================
                if lvSUpd then
                begin
                    // MSIIRE_Sを再作成<103>
                    //------------------------------------
                    // 変更されているかチェック
                    //------------------------------------
                    with uvData_Load_S do
                    begin
                                            // 仕入先の採用状態が変更された
                        if ((pvrSai = 0) and (JHojyoMA_DMemDataSKBN.AsString = '○')) or
                            ((pvrSai = 1) and (JHojyoMA_DMemDataSKBN.AsString = '')) then
                            Bol := False
                        else
                            Bol := True;

                        //-------------------------------
                        // _Sあり発生なしは_Sを削除する(再作成を実行させ削除させる)
                        //------------------------------------
                        // 入力が変更されている
                        if Bol = False then
                        begin
//↓<Rel>
    				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    			        begin
                                //グループ会計子社は全社DBへの接続とする
//<D10>							MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc7_S);
								gfnJNTSELSetDbName(StdProc7_S, m_SyncMaster.m_cPDBSelect);		//<D10>
                            end;
//↑<Rel>
                            // PRC_MA0150_013
                            with StdProc7_S do
                            begin
								ParamByName('@pTRNCD').AsFloat := uvNCODE;				// 得意先ｺｰﾄﾞ
                                ExecProc;
                                BolS	:= (ParamByName('@RET_S')     .AsInteger = -1);	// MTOKUI_S存在
                                BolDen	:= (ParamByName('@RET_ZANHAS').AsInteger = -1);	// 残高または発生
                            end;
                            if (BolS = True) and (BolDen = False) then
                                Bol := False
                            else
                                Bol := True;
                        end;

                        //------------------------------------
                        // 再作成
                        //------------------------------------
                        if not Bol then
                        begin
//<Rel>                     MDataModule.SetDBInfoToQuery( dbCorp_Select, StdProc4_S );	// DBとMQueryの接続
//↓<Rel>
    				        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    			        begin
                                //グループ会計子社は全社DBに対して更新する。
//<D10>							MDataModule.SetDBInfoToSProc(m_SyncMaster.m_cPDBSelect, StdProc4_S);
								gfnJNTSELSetDbName(StdProc4_S, m_SyncMaster.m_cPDBSelect);		//<D10>
                            end
                            else
                            begin
                                //グループ会計子社以外は自社DBに対して更新する。
//<D10>							MDataModule.SetDBInfoToSProc(dbCorp_Select, StdProc4_S);
								gfnJNTSELSetDbName(StdProc4_S, dbCorp_Select);		//<D10>
                            end;
//↑<Rel>

                            // PRC_MA0130_103
                            with StdProc4_S do
                            begin
								ParamByName('@pTRNCD').AsFloat		:= uvNCODE;			// 得意先ｺｰﾄﾞ
                                ParamByName('@pSEIKBN_B').AsInteger := pvrSeiKbn;       // 変更前請求区分
                                ParamByName('@pSEIKBN_A').AsInteger := uvSeiKbn_S;      // 変更後請求区分
                                ExecProc;
                                Bol := (ParamByName('@RETURN_VALUE').AsInteger = 0);
                            end;

                            if not Bol then
                            begin
//↓<Rel>
						        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
						        begin
						            // 親会社DBのﾛｰﾙﾊﾞｯｸ
						            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
						        end;
//↑<Rel>
                                // ﾛｰﾙﾊﾞｯｸ(破棄)
                                MDataModule.Rollback(dbCorp_Select);
                                result := False;
                                Exit;
                            end;
                        end;
                    end;
                end;
				// <197>
				fnSetZSeiKbn_Sel(1);
				fnSetZSeiKbn_Sel(2);

//↓<Rel>
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_MAS) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_SEL) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_CRD) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_PAY) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_DEP) = false ) then
                    begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
                        Result := false;
                        Exit;
                    end;

	                // 更新されたときはSecHojyoDispInfoのメンテを行う。
	                if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,uvNCODE,MTOKUI_DMQuery) then
	                begin
    		            MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
                        MDataModule.Rollback(dbCorp_Select);
	                    Result := false;
	                    Exit;
	                end;
                end;
//↑<Rel>
//<3135>ins-s
	            // コミットする前にシステム別情報テーブルが本当に作成されたかチェックする。
            	if fnchkSystemRec(uvNCODE) = -1 then
            	begin
	        		if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	        		begin
	            		// 親会社DBのﾛｰﾙﾊﾞｯｸ
   		        		MDataModule.Rollback(m_SyncMaster.m_cPDBSelect);
               		end;

                   	MDataModule.Rollback(dbCorp_Select);
                	Result := false;

					mjsmessagebox(self,'システム別情報が未作成です。', mjWarning, mjDefOK);

                	Exit;
            	end;
//<3135>ins-e

                // ｺﾐｯﾄ(反映)
                MDataModule.Commit(dbCorp_Select);
//↓<Rel>
		        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
		        begin
		            // 親会社DBのｺﾐｯﾄ
		            MDataModule.Commit ( m_SyncMaster.m_cPDBSelect );
		        end;
//↑<Rel>
            except
//                ShowMessage('MTOKUI Write Error!');
                ShowMessage('MTOKUI Write Error(一覧)!');
//↓<Rel>
		        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
		        begin
		            // 親会社DBのﾛｰﾙﾊﾞｯｸ
		            MDataModule.Rollback ( m_SyncMaster.m_cPDBSelect );
		        end;
//↑<Rel>
                //  ﾛｰﾙﾊﾞｯｸ(破棄)
                MDataModule.Rollback(dbCorp_Select);
            end;
        end;

        { <*> HojyoTree <*> }
        if HojyoMA_New = True then
        begin
            if fnHojyoTreeWrite(strGCode) = False then
            begin
                result := False;
                Exit;
            end;

            Inc(giAllCnt);                                  // 総件数を増やす
            LblRecCnt.Caption := IntToStr(giAllCnt);
        end;

    finally
//<Rel>        QueryMaster.Close;
//<Rel>        QueryMaster.Free;
//↓<Rel>
	    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
	    begin
			// MTOKUI_DMQueryの接続先DBをもとにもどしておく。
			MTOKUI_DMQuery.Close;
//<D10>		MDataModule.SetDBInfoToQuery( dbCorp_Select, MTOKUI_DMQuery );
			gfnJNTSELSetDbName(MTOKUI_DMQuery, dbCorp_Select);		//<D10>

            //ストアドの接続先DBをもとにもどしておく。
//<D10>		MDataModule.SetDBInfoToSProc( dbCorp_Select, StdProc7);
//<D10>		MDataModule.SetDBInfoToSProc( dbCorp_Select, StdProc7_S);
			gfnJNTSELSetDbName(StdProc7, 	dbCorp_Select);		//<D10>
			gfnJNTSELSetDbName(StdProc7_S, 	dbCorp_Select);		//<D10>
	    end;
//↑<Rel>

		SessionPractice(C_ED_PROCESS); //<MHIS>
    end;

    Result := True;
//<256> ADD St
    // AfterPost時にも再度呼ばれないように制御
    m_bNotStored := True;
//<256> ADD Ed
end;
// <140>一覧Wｸﾘｯｸで採用情報登録
//**************************************************************************
//	Component	:	実在/合計ｸﾞﾘｯﾄﾞ
//	Event		:	OnDblClick
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP004001f.Jituzai_DdxDBGridDblClick(Sender: TObject);
begin

    ChangeSaiyo();                          // 採用区分変更

end;
// <140>
// *************************************************************
// *
// *　　　作成日付：2005.11.30
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：ChangeSaiyo
// *　　　関数説明：ｸﾞﾘｯﾄﾞでの採用区分変更処理
// *
// *　　　入力　　：なし
// *　　　出力　　：なし
// *
// *************************************************************
procedure TJNTCRP004001f.ChangeSaiyo();
var
	iFocus	: Integer;
    iSumKbn : Integer;
begin
                                            // ﾌｫｰｶｽ位置
	iFocus := Jituzai_DdxDBGrid.FocusedColumn;

//<158>    if (iFocus <> COL_TOKUI) and (iFocus <> COL_SIIRE) then
//<158>        Exit;

    if (iFocus <> COL_TOKUI) and (iFocus <> COL_SIIRE) and              //<158>
        (iFocus <> COL_SHOJYO1) and (iFocus <> COL_SHOJYO2) and (iFocus <> COL_SHOJYO3) then        //<158>//<195>
        Exit;

    //<159> 得意先採用、仕入先採用は諸口ﾚｺｰﾄﾞ変更不可
    if ((iFocus = COL_TOKUI) or (iFocus = COL_SIIRE) or (iFocus = COL_SHOJYO1) or (iFocus = COL_SHOJYO2) or (iFocus = COL_SHOJYO3)) and //<195>
	     (JHojyoMA_DMemData.FieldByName('SyokuchiKbn').AsInteger <> 0) then
        Exit;


    iSumKbn := Root_PMTab.Items.Selected;

    // 選択中のﾚｺｰﾄﾞを読み込み
    if (iFocus = COL_TOKUI) or (iFocus = COL_SIIRE)                 //<158>条件追加
        or (iFocus = COL_SHOJYO1) or (iFocus = COL_SHOJYO2) or (iFocus = COL_SHOJYO3) then //<203>
            fnDataRead (JHojyoMA_DMemDataGCode.AsString, iSumKbn, 0);

	case iFocus of
		COL_TOKUI:                          // 得意先
		begin
            if not uvChangeFL_Sime then     // 得意先採用を外せない
            begin                           // 伝票または実績データが存在しているため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↓<203>
            if not uvChangeFL_Crd then      // 得意先採用を外せない
            begin                           // 債権管理で使用中のため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR_CRD, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↑<203>
            JHojyoMA_DmemData.Edit;
			if JHojyoMA_DMemDataTKBN.AsString = '○' then
                JHojyoMA_DMemDataTKBN.AsString := ''
            else
                JHojyoMA_DMemDataTKBN.AsString := '○';
		end;
		COL_SIIRE:                          // 仕入先
		begin
            if not uvChangeFL_Sime_S then   // 仕入先採用を外せない
            begin                           // 伝票または実績データが存在しているため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↓<203>
            if not uvChangeFL_Pay then      // 仕入先採用を外せない
            begin                           // 債務管理で使用中のため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR_PAY, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↑<203>
            JHojyoMA_DmemData.Edit;
			if JHojyoMA_DMemDataSKBN.AsString = '○' then
                JHojyoMA_DMemDataSKBN.AsString := ''
            else
                JHojyoMA_DMemDataSKBN.AsString := '○';
		end;
        //<158>---ST---
        COL_SHOJYO1:
		begin
//↓<203>
            if not uvChangeFL_Kounyu then   // 資産購入先採用を外せない
            begin                           // 資産管理で使用中のため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR_DEP, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↑<203>
            JHojyoMA_DmemData.Edit;
			if JHojyoMA_DMemDataSHojyoKbn1.AsString = '○' then
                JHojyoMA_DMemDataSHojyoKbn1.AsString := ''
            else
                JHojyoMA_DMemDataSHojyoKbn1.AsString := '○';
		end;
        COL_SHOJYO2:
		begin
//↓<203>
            if not uvChangeFL_Baikyaku then   // 資産売却先採用を外せない
            begin                           // 資産管理で使用中のため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR_DEP, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↑<203>
            JHojyoMA_DmemData.Edit;
			if JHojyoMA_DMemDataSHojyoKbn2.AsString = '○' then
                JHojyoMA_DMemDataSHojyoKbn2.AsString := ''
            else
                JHojyoMA_DMemDataSHojyoKbn2.AsString := '○';
		end;
        //<158>---ED---
		//<195>---ST---
		COL_SHOJYO3:
		begin
//↓<203>
            if not uvChangeFL_Lease then   // リース取引先採用を外せない
            begin                           // 資産管理で使用中のため、採用区分は変更できません。
    	    	MjsMessageBoxEx(Self, MSG_SAIYO_CHANGEERR_DEP, '登録',mjWarning, mjOk, mjDefOk);
                Exit;
            end;
//↑<203>
			JHojyoMA_DmemData.Edit;
			if JHojyoMA_DMemDataSHojyoKbn3.AsString = '○' then
                JHojyoMA_DMemDataSHojyoKbn3.AsString := ''
            else
                JHojyoMA_DMemDataSHojyoKbn3.AsString := '○';
		end;
		//<195>---ED---
    end;

end;
//<150>
// *************************************************************
// *
// *　　　作成日付：2006.01.20
// *　　　作成者  ：K.Iiduka
// *
// *　　　関数名称：fnCmnPageMoveClick
// *　　　関数説明：頁移動ﾎﾞﾀﾝ共通
// *
// *************************************************************
procedure TJNTCRP004001f.fnCmnPageMoveClick(Sender: TObject);
var
    strFirstCmp : String;
    iEndTab     : Integer;
    i           : Integer;
    fHit        : Boolean;
    iCurrntTab  : Integer;
    bFocus      : Boolean; //<210>
begin
    // 最終TAB項目ｾｯﾄ
    iEndTab := 0;
    if (Root_PMTab.Items.Selected  = PAGE_JITUZAI) then
        iEndTab := PAGE_Br
    else if (Root_PMTab.Items.Selected = PAGE_GOKEI) then
        iEndTab := PAGE_Saiyo;

    // *** TAB移動 ***
    // 前頁ﾎﾞﾀﾝ
    if (Sender = BtnPagePrevious) then
    begin
        if (PMTab.Items.Selected <> PAGE_KIHON) then
            PMTab.Items.Selected := PMTab.Items.Selected -1;
    end
    // 次頁ﾎﾞﾀﾝ
    else if (Sender = BtnPageNext) then
    begin
        if (PMTab.Items.Selected <> iEndTab) then
            PMTab.Items.Selected := PMTab.Items.Selected +1;
    end;

    iCurrntTab := PMTab.Items.Selected;     // 移動後のTAB項目取得

    // *** BitBtnの使用不可制御 ***
    if (iCurrntTab = PAGE_KIHON) then
        BtnPagePrevious.Enabled := false
    else
        BtnPagePrevious.Enabled := true;

    if (iCurrntTab = iEndTab) then
        BtnPageNext.Enabled := false
    else
        BtnPageNext.Enabled := true;

//<198>
	if (LSinsei.Visible) and (not PPanel_Kihon.Enabled)	then
	begin
		f0NGCode.SetFocus;
		Exit;
	end;

    // *** 先頭項目ｾｯﾄﾌｫｰｶｽ ***
    fHit := true;

    case Root_PMTab.Items.Selected of
        PAGE_JITUZAI:
        begin
            case iCurrntTab of
                PAGE_KIHON  : strFirstCmp := 'f0LongName';  // 基本情報先頭項目
                PAGE_Saiyo  : strFirstCmp := 'f1TSKBN';     // 採用情報先頭項目
                PAGE_Seg    :
                begin
                    for i := 1 to 10 do
                    begin
                        fHit := false;
                        if (TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Visible = True) and
                            (TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Enabled = True)then
                        begin
                            strFirstCmp := TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Name;
                            fHit := true;
                            break;
                        end;
                    end;
                end;
                PAGE_Br     :
                begin
                    for i := 1 to 10 do
                    begin
                        fHit := false;
                        if (TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Visible = True) and
                            (TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Enabled = True) then
                        begin
                            strFirstCmp := TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Name;
                            fHit := true;
                            break;
                        end;
                    end;
                    if (fHit = false) then
                    for i := 1 to 10 do
                    begin
                        if (TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Visible = True) and
                            (TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Enabled = True) then
                        begin
                            strFirstCmp := TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Name;
                            fHit := true;
                            break;
                        end;
                    end;
                end;
            end;
        end;
        PAGE_GOKEI:
        begin
            case PMTab.Items.Selected of
                PAGE_KIHON  : strFirstCmp := 'f0LongName';
                PAGE_Saiyo  : strFirstCmp := 'f1TSKBN';
            end;
        end;
    end;

    if (fHit = true) then
    begin
{↓<210>
        if (TMTxtEdit(MJSFindCtrl(Self, strFirstCmp)).Enabled) then
            TMTxtEdit(MJSFindCtrl(Self, strFirstCmp)).SetFocus;
↑<210>}
//↓<210>
        bFocus := False;
        case PMTab.Items.Selected of
        	PAGE_KIHON:
            begin
                bFocus := PPanel_Kihon.Enabled;
            end;
        	PAGE_Saiyo:
            begin
                bFocus := PPanel_Saiyo.Enabled;
            end;
        	PAGE_Seg:
            begin
                bFocus := PPanel_Seg.Enabled;
            end;
        	PAGE_Br:
            begin
                bFocus := PPanel_Br.Enabled;
            end;
        end;
        if bFocus then
        begin
            if (TMTxtEdit(MJSFindCtrl(Self, strFirstCmp)).Enabled) then
                TMTxtEdit(MJSFindCtrl(Self, strFirstCmp)).SetFocus;
        end;
//↑<210>
    end
    else
    begin
        if (PMTab.Items.Selected = iEndTab) then
        begin
            if (Jituzai_BBitBtn_Ok.Enabled) then
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');// 更新ﾎﾞﾀﾝへﾌｫｰｶｽを移動
        end
        else
        begin
            if (BtnPageNext.Enabled) then
                MjsDispCtrl.MjsSetFocus(Self, 'BtnPageNext')        // 次頁ﾎﾞﾀﾝへﾌｫｰｶｽを移動
        end;
    end;

end;
//<150>
// *************************************************************
// *
// *　　　作成日付：2006.01.20
// *　　　作成者  ：K.Iiduka
// *
// *　　　関数名称：fnGetLastFLD
// *　　　関数説明：ｶｰﾄﾞ型最終ﾌｨｰﾙﾄﾞ取得
// *
// *************************************************************
function TJNTCRP004001f.fnGetLastFLD():String;
var
    strLastFLD  : String;
//<KSN> DEL    iEndTab     : Integer;
    i           : Integer;
    fHit        : Boolean;
    iCurrntTab  : Integer;
begin
    strLastFLD := '';
//<KSN> DEL St
{
    // 最終TAB項目ｾｯﾄ
    if (Root_PMTab.Items.Selected  = PAGE_JITUZAI) then
        iEndTab := PAGE_Br
    else if (Root_PMTab.Items.Selected = PAGE_GOKEI) then
        iEndTab := PAGE_Saiyo;
}
//<KSN> DEL Ed

    iCurrntTab := PMTab.Items.Selected;

    // *** 先頭項目ｾｯﾄﾌｫｰｶｽ ***
//<KSN> DEL    fHit := true;

    case Root_PMTab.Items.Selected of
        PAGE_JITUZAI:
        begin
            case iCurrntTab of
                PAGE_KIHON  : strLastFLD := 'f0EndDate';        // 基本情報最終項目
                PAGE_Saiyo  :
                begin
                    if (uvSLicense) then
                    begin
                        if f1SHojyoKbn3.Enabled then                      //<195>最終項目をリース取引先区分に変更
                            strLastFLD := 'f1SHojyoKbn3'
                        else
                        begin
                            if (f1SSKBN.Checked = False) and
                               (f1SSKBN.Enabled = True)  then
                                strLastFLD := 'f1SSKBN'
                            else
                            begin
                                if (f1SClosingDay1.Value = 0)      and
                                   (f1SClosingDay1.Enabled = True) then
                                    strLastFLD := 'f1SHolidayKbn'
                                else
                                begin
                                    if (f1SClosingDay2.Value   = 0)    and
                                       (f1SClosingDay2.Enabled = True) then
                                        strLastFLD := 'f1SClosingDay2'
                                    else
                                    begin
                                        if (f1SClosingDay3.Value = 0)      and
                                           (f1SClosingDay3.Enabled = True) then
                                            strLastFLD := 'f1SClosingDay3'
                                        else
                                        begin
                                            if (f1SHoliday3.Enabled = True) then
                                                strLastFLD := 'f1SHoliday3';
                                        end;
                                    end;
                                end;
                            end;
                        end;
                    end
                    else
                    begin
                        if (f1SSKBN.Checked = False) and
                           (f1SSKBN.Enabled = True)  then
                            strLastFLD := 'f1SSKBN'
                        else
                        begin
                            if (f1SClosingDay1.Value = 0)      and
                               (f1SClosingDay1.Enabled = True) then
                                strLastFLD := 'f1SHolidayKbn'
                            else
                            begin
                                if (f1SClosingDay2.Value   = 0)    and
                                   (f1SClosingDay2.Enabled = True) then
                                    strLastFLD := 'f1SClosingDay2'
                                else
                                begin
                                    if (f1SClosingDay3.Value = 0)      and
                                       (f1SClosingDay3.Enabled = True) then
                                        strLastFLD := 'f1SClosingDay3'
                                    else
                                    begin
                                        if (f1SHoliday3.Enabled = True) then
                                            strLastFLD := 'f1SHoliday3';
                                    end;
                                end;
                            end;
                        end;
                    end;
                end;
                PAGE_Seg    :
                begin
                    for i := 10 downto 1 do
                    begin
//<KSN> DEL                        fHit := false;
                        if (TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Visible = True) and
                            (TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Enabled = True) then
                        begin
                            strLastFLD := TMTxtEdit(MJSFindCtrl(Self, 'f2SgCode' + IntToStr(i))).Name;
                            break;
                        end;
                    end;
                end;
                PAGE_Br     :
                begin
                    for i := 10 downto 1 do
                    begin
                        fHit := false;
                        if (TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Visible = True) and
                            (TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Enabled = True)then
                        begin
                            fHit := true;
                            strLastFLD := TMTxtEdit(MJSFindCtrl(Self, 'f3SBrCode' + IntToStr(i))).Name;
                            break;
                        end;
                    end;
                    if (fHit = false) then
                    for i := 10 downto 1 do
                    begin
                        if (TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Visible = True) and
                            (TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Enabled = True) then
                        begin
                            strLastFLD := TMTxtEdit(MJSFindCtrl(Self, 'f3TBrCode' + IntToStr(i))).Name;
                            break;
                        end;
                    end;
                end;
            end;
        end;
        PAGE_GOKEI:
        begin
            case PMTab.Items.Selected of
                PAGE_KIHON  : strLastFLD := 'f0EndDate';
                PAGE_Saiyo  :
                begin
                    if (uvSLicense) then
                        strLastFLD := 'f1SHojyoKbn3'	//<195>最終項目をリース取引先区分に変更
                    else
                        strLastFLD := 'f1SSKBN';
                end
            end;
        end;
    end;

    Result := strLastFLD;

end;

//<156>
// *************************************************************
// *
// *　　　作成日付：2006.01.24
// *　　　作成者  ：K.Iiduka
// *
// *　　　関数名称：fnCngCodeProperty
// *　　　関数説明：ｾｸﾞﾒﾝﾄ、分類ｺｰﾄﾞのﾌﾟﾛﾊﾟﾃｨ値を変更
// *
// *************************************************************
procedure TJNTCRP004001f.fnCngCodeProperty(pExp:Boolean);
var
    i           :   Integer;
    ix          :   Integer;
    iAttr       :   Integer;
    FldNm       :   String;

begin
    iAttr := 0;  //<KSN> ADD
	for ix := 1 to 3 do
	begin
		case ix of
			1:
			begin
				FldNm := 'f2SgCode';
//<SZERO>属性をここで取得してはだめ。それぞれ1番目、2番目、3番目の属性を1～10に設定してしまっていた。
//				iAttr := m_arAdoptInfo_Seg[ix].nCodeAttribute;
			end;
			2:
			begin
				FldNm := 'f3TBrCode';
//<SZERO>				iAttr := m_arAdoptInfo_TBr[ix].nCodeAttribute;
			end;
			3:
			begin
				FldNm := 'f3SBrCode';
//<SZERO>				iAttr := m_arAdoptInfo_SBr[ix].nCodeAttribute;
			end;
		end;

		for i := 1 to 10 do
		begin
//↓<SZERO>コンポーネントを判断して適切な配列から属性を取得します。
			if FldNm = 'f2SgCode' then
			begin
				iAttr := m_arAdoptInfo_Seg[i].nCodeAttribute;
			end
			else if FldNm = 'f3TBrCode' then
			begin
				iAttr := m_arAdoptInfo_TBr[i].nCodeAttribute;
			end
			else if FldNm = 'f3SBrCode' then
			begin
				iAttr := m_arAdoptInfo_SBr[i].nCodeAttribute;
			end;
//↑<SZERO>
		    if (m_AcControl = TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i)))) then
		    begin
                if (TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i))).Enabled) then
    	            if (iAttr <> 2) then
	                begin
	                    if TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i))).InputFlag = False then
	                        TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i))).Zero := True
	                    else
	                        TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i))).Zero := False;
    	            end
	                else
	                    TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i))).Zero := False;

                if (pExp) then
                    TMTxtEdit(MJSFindCtrl(Self, FldNm + IntToStr(i))).InputFlag := False;
		    end;
		end;
	end;
end;

//<194>
//**************************************************************************
//	Proccess	:	取引先データ存在ﾁｪｯｸ
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer (0:実在 1:合計)
//	Retrun		:
//**************************************************************************
function TJNTCRP004001f.fnMTOKUI_Chk(strGCode: String; iSumKbn: Integer): Integer;
var
	QueryError	:	TMQuery;

begin
	result := 0;

    // 外部ｺｰﾄﾞを属性により編集
	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if strGCode <> '' then
			strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
	end;

    // 取引先の存在ﾁｪｯｸ
	QueryError := TMQuery.Create(Self);					        // MQueryの構築
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryError);    // DBとMQueryの接続
	gfnJNTSELSetDbName(QueryError, dbCorp_Select);		//<D10>

	with QueryError do
	begin
		try
			Close;
			SQL.Clear;
			SQL.Add('Select GCODE from MTOKUI');
   			SQL.Add('Where  RDelKbn=0 and GCode=:strGCode and SumKbn=:iSumKbn');
			SetFld('strGCode').AsString	:= strGCode;
			SetFld('iSumKbn').AsInteger	:= iSumKbn;

			Open;

			if Eof = False then
			begin
				result := 1;
				exit;
			end;
		finally
			Free;
		end;
	end;

end;

//↓<Rel>
//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: fnCorpRelation         		                                                        */
//*																									*/
//*	目的	: 会社関連付処理(ﾏｽﾀ同期)								                                */
//*																									*/
//*	戻り値	: 0: 対象外 1: 正常 2:ｷｬﾝｾﾙ -1: 実在合計不一致 -9:ｴﾗｰ                                   */
//*																									*/
//***************************************************************************************************/
function    TJNTCRP004001f.fnCorpRelation(pExCode: String; pSumKbn: Integer): Integer;
var
    Qe            : TMQuery;
    nPNCode       : Extended;
    strNameSimple : string;





//-----------------------------------------------------------------------------
// lfnUpd_Rel()
//      PARAM   : PDB    : 親会社DB
//                CDB    : 子会社DB
//                dq     : 親会社DBと接続されたクエリ
//                NCode  : _Relを検索する内部コード
//                SyncNo : 「JNTCRPSyncMasterB.inc」に定義されている定数
//                RecKbn : 1:得意先 2:仕入先 (SyncNoが「JNTSYNC_MTOKUI_SEL」のときのみ有効)
//      RETURN  : Boolean True:成功, False:失敗
//      MEMO    : _Relを更新するための関数内の関数。
//-----------------------------------------------------------------------------
function lfnUpd_Rel(PDB:TFDConnection;CDB:TFDConnection;NCode:Extended;dq:TMQuery;SyncNo:Integer;RecKbn:Integer):Boolean;
var
	sTbl      : string; // _Relテーブル名格納用
	sNCodeFld : string; // 内部コードフィールド名格納用。MTOKUI_Rel は NCode。それ以外はBaseNCode。
begin
	Result := True;

	// テーブル名の決定
    case SyncNo of
        JNTSYNC_MTOKUI:     sTbl := 'MTOKUI_Rel';
        JNTSYNC_MTOKUI_MAS: sTbl := 'MTOKUI_MAS_Rel';
        JNTSYNC_MTOKUI_SEL: sTbl := 'MTOKUI_SEL_Rel';
        JNTSYNC_MTOKUI_CRD: sTbl := 'MTOKUI_CRD_Rel';
        JNTSYNC_MTOKUI_PAY: sTbl := 'MTOKUI_PAY_Rel';
        JNTSYNC_MTOKUI_DEP: sTbl := 'MTOKUI_DEP_Rel';
    end;

	// 内部コードフィールド名の決定
	if (SyncNo = JNTSYNC_MTOKUI) then
	begin
		sNCodeFld := 'NCode';
	end
	else
	begin
		sNCodeFld := 'BaseNCode';
	end;

    // _Relの存在ﾁｪｯｸ
    dq.Close();
    dq.SQL.Clear();
//<256> DEL    dq.SQL.Add('select * from ' + sTbl);
    dq.SQL.Add('select ' + sNCodeFld + ' from ' + sTbl);  //<256> ADD
    dq.SQL.Add(' where (' + sNCodeFld + ' = :pNCode) ');
    dq.SQL.Add('   and (GrpSegNCode = :pGrpSegNCode) ');
    if (SyncNo = JNTSYNC_MTOKUI_SEL) then
    begin
        dq.SQL.Add('   and (RecKbn = :pRecKbn) ');
    end;
//<256> MOD St
//    dq.ParamByName('pNCode'      ).AsFloat   := NCode;
//    dq.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
    dq.ParamByName('pNCode'      ).AsString   := FormatFloat('0',NCode);
    dq.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<256> MOD Ed
    if (SyncNo = JNTSYNC_MTOKUI_SEL) then
    begin
        dq.ParamByName('pRecKbn').AsInteger  := RecKbn;
    end;

    if ( dq.Open() = false ) then
    begin
        Result := False;  // SQLｴﾗｰ
        Exit;
    end;

    // 親会社の_Relの更新
    if ( dq.Eof ) then    // 新規挿入
    begin
        dq.Close();
        dq.SQL.Clear();
        dq.SQL.Add('insert into ' + sTbl + ' ( ');
        dq.SQL.Add(' ' + sNCodeFld + ' ');
        dq.SQL.Add(',GrpSegNCode ');
        dq.SQL.Add(',RDelKbn_REL ');
        if (SyncNo = JNTSYNC_MTOKUI_SEL) then
        begin
            dq.SQL.Add(',RecKbn ');
        end;
        dq.SQL.Add(' ) values ( ');
        dq.SQL.Add(' :pNCode ');
        dq.SQL.Add(',:pGrpSegNCode ');
        dq.SQL.Add(',0 ');
        if (SyncNo = JNTSYNC_MTOKUI_SEL) then
        begin
            dq.SQL.Add(',:pRecKbn ');
        end;
        dq.SQL.Add(' ) ');
    end
    else
    begin
        dq.Close();
        dq.SQL.Clear();
        dq.SQL.Add('update ' + sTbl + ' set ');
        dq.SQL.Add('    RDelKbn_REL = 0                  ');
        dq.SQL.Add('   ,UpdDateTM   = CURRENT_TIMESTAMP  ');
        dq.SQL.Add('where  (' + sNCodeFld + ' = :pNCode) ');
        dq.SQL.Add('  and  (GrpSegNCode = :pGrpSegNCode) ');
        if (SyncNo = JNTSYNC_MTOKUI_SEL) then
        begin
            dq.SQL.Add('   and (RecKbn = :pRecKbn) ');
        end;
    end;
//<256> MOD St
//    dq.ParamByName('pNCode'      ).AsFloat   := NCode;
//    dq.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
    dq.ParamByName('pNCode'      ).AsString   := FormatFloat('0',NCode);
    dq.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<256> MOD Ed
    if (SyncNo = JNTSYNC_MTOKUI_SEL) then
    begin
        dq.ParamByName('pRecKbn').AsInteger  := RecKbn;
    end;

    if ( dq.ExecSQL = false ) then
    begin
        MjsMessageBoxEx (Self,
                         '自社への関連付けに失敗しました。',
                         'マスタ同期', mjError, mjOk, mjDefOk);
        Result := False;
        Exit;
    end;

    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
    if ( m_SyncMaster.fnCall_SYNC (SyncNo) = false ) then
    begin
        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
        MDataModule.Rollback ( PDB );
        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
        MDataModule.Rollback ( CDB );
        Result := False;
        Exit;
    end;

end;





begin

    result := 0;

    Qe := TMQuery.Create( Self );
    // 親会社DBとMQueryの接続
//<D10>MDataModule.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, Qe );
	gfnJNTSELSetDbName(Qe, m_SyncMaster.m_cPDBSelect);		//<D10>

	// -----<MHIS> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<MHIS> Add-Ed-----

    Qe.Close();
    Qe.SQL.Clear();
//<256> DEL    Qe.SQL.Add('select * from MTOKUI        ');
    Qe.SQL.Add('select NCode,SumKbn,NMK from MTOKUI        ');  //<256> ADD
    Qe.SQL.Add('where RDelKbn   = 0         ');
    Qe.SQL.Add(' and  GCode     = :pGCode   ');
    Qe.ParamByName('pGCode' ).AsString  := pExCode;

    if ( Qe.Open = false ) then
    begin
        // SQLｴﾗｰ
        ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, Qe );
        with MjsMsgRec do
            MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, False);
        result := -9;
        Exit;
    end;

    // 親会社に既に該当ﾃﾞｰﾀが存在した場合
    if not Qe.Eof then
    begin
        // 全社と子社で実在・合計が合致しない場合はﾒｯｾｰｼﾞを表示し同期は行わない
        if ( Qe.FieldByName('SumKbn').AsInteger <> pSumKbn ) then
        begin
            MjsMessageBoxEx (Self, JNTSYNC_MSG_SUM_ERR + #13#10#13#10
                           + Qe.FieldByName('NMK').AsString,
                           '取引先登録', mjQuestion, mjOk, mjDefOk);
            result := -1;
            Exit;
        end;

        // MTOKUI_Relｷｰ情報を取得
        nPNCode       := Qe.FieldByName('NCode'     ).AsFloat;
        strNameSimple := Qe.FieldByName('NMK').AsString;

        if ( MjsMessageBoxEx(Self, JNTSYNC_MSG_CHK_SYNC + #13#10#13#10
                           + strNameSimple,
                             '確認', mjQuestion, mjYESNO, mjDefNO) = mrYES ) then
        begin
            // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule.BeginTran ( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule.BeginTran( dbCorp_Select );

	        try
	            // MTOKUI_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI,0) then
	            begin
	                Result := -9;
	                Exit;
	            end;
	            // MTOKUI_MAS_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI_MAS,0) then
	            begin
	                Result := -9;
	                Exit;
	            end;
	            // MTOKUI_SEL_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI_SEL,1) then
	            begin
	                Result := -9;
	                Exit;
	            end;
	            // MTOKUI_SEL_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI_SEL,2) then
	            begin
	                Result := -9;
	                Exit;
	            end;
	            // MTOKUI_CRD_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI_CRD,0) then
	            begin
	                Result := -9;
	                Exit;
	            end;
	            // MTOKUI_PAY_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI_PAY,0) then
	            begin
	                Result := -9;
	                Exit;
	            end;
	            // MTOKUI_DEP_Rel の更新
	            if not lfnUpd_Rel(m_SyncMaster.m_cPDBSelect,dbCorp_Select,nPNCode,Qe,JNTSYNC_MTOKUI_DEP,0) then
	            begin
	                Result := -9;
	                Exit;
	            end;

                // 更新されたときはSecHojyoDispInfoのメンテを行う。
                if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,nPNCode,Qe) then
                begin
                    Result := -9;
                    Exit;
                end;

                // 子会社DBの補助体系を更新する
                uvNCODE := nPNCode;
                if fnHojyoTreeWrite(pExCode) = False then
                begin
                    // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                    MDataModule.Rollback( m_SyncMaster.m_cPDBSelect );
                    // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                    MDataModule.Rollback( dbCorp_Select );
                    result := -9;
                    Exit;
                end;

                Inc(giAllCnt);                                  // 総件数を増やす
                LblRecCnt.Caption := IntToStr(giAllCnt);
            except
                // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule.Rollback( m_SyncMaster.m_cPDBSelect );
                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule.Rollback( dbCorp_Select );
                result := -9;
                Exit;
            end;

            // TreeViewの更新
        	fnTreeUpdate (pExCode, pSumKbn);

            // 親会社DBに対してｺﾐｯﾄを実行する
            MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してｺﾐｯﾄを実行する
            MDataModule.Commit( dbCorp_Select );

            result := 1;    // 正常
            Exit;
        end
        else
        begin
            // ｷｬﾝｾﾙ
            result := 2;
            Exit;
        end;
    end;

	// -----<MHIS> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<MHIS> Add-Ed-----

end;
//↑<Rel>

//↓<212>
//**************************************************************************
//	Proccess	:	Mtokui_xxxの存在チェック
//	Parameter	:	sMasNm	: String チェックしたいMTOKUI_xxxのxxxの部分。
//                            _SELはこの関数ではチェックしない。lfnChkMtokui_Selを使う。
//	Retrun		: True:存在する。False:存在しない。
//**************************************************************************
function TJNTCRP004001f.fnChkMtokui_Others(sMasNm:string):Boolean;
var
    QryChk : TMQuery;

begin

    // Queryの構築
    //QryChk := Nil;
    QryChk := TMQuery.Create(Self);					    // MQueryの構築
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, QryChk); // DBとMQueryの接続
	gfnJNTSELSetDbName(QryChk, dbCorp_Select);		//<D10>

    Result := False;
    try
        with QryChk do
        begin
            Close;
            SQL.clear;
            SQL.Add(' Select BaseNCode From MTOKUI_' + sMasNm
                  + ' Where  (BaseNCode = :BaseNCode)  ');
//<256> DEL            ParamByName('BaseNCode').AsFloat := JHojyoMA_DMemDataNCode.asFloat;
            ParamByName('BaseNCode').AsString := JHojyoMA_DMemDataNCode.asString;  //<256> ADD
            if not Open then
			begin
				raise Exception.Create('');
				Exit;
			end;

            if not Eof then
            begin
                Result := True;
            end
            else
			begin
                Result := False;
            end;
        end;

	finally
        QryChk.Close;
        QryChk.Free;
	end;

    uvNCODE := JHojyoMA_DMemDataNCode.asFloat;
end;
//↑<212>

//↓<MHIS>
//**********************************************************************
//	Proccess	:	ｾｯｼｮﾝ管理ｽﾄｱﾄﾞの実行
//	Name		:	T.Seki
//	Date		:	2007/12/21
//	Parameter	:	iSyori  0=設定 1=開放
//	Return		:	なし
//	History		:	9999/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**********************************************************************
procedure TJNTCRP004001f.SessionPractice(iSyori: Integer);
begin
												// 処理区分
	SPMsHist.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
	SPMsHist.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
	SPMsHist.ParamByName('@pTanNCode').AsFloat			:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;	//<D10>AsCurrency → AsFloat
												// 担当者名称
    SPMsHist.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
    SPMsHist.ParamByName('@pSysCode').AsInteger			:= m_pMyAppRecord^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
    SPMsHist.ParamByName('@pOptCode').AsInteger			:= m_pMyAppRecord^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
    SPMsHist.ParamByName('@pPrgCode').AsInteger			:= m_pMyAppRecord^.m_iProgramCode;

    SPMsHist.Prepare;							// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする

    SPMsHist.ExecProc;							// ｽﾄｱﾄﾞ実行

	SPMsHist.UnPrepare;							// ﾘｿｰｽを解放する

												// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = 1 then
	begin
												// 処理区分
		SPMsHistParent.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
		SPMsHistParent.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pTanNCode').AsFloat		:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;		//<D10>AsCurrency → AsFloat
												// 担当者名称
    	SPMsHistParent.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pSysCode').AsInteger		:= m_pMyAppRecord^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pOptCode').AsInteger		:= m_pMyAppRecord^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pPrgCode').AsInteger		:= m_pMyAppRecord^.m_iProgramCode;

    	SPMsHistParent.Prepare;					// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
    	SPMsHistParent.ExecProc;				// ｽﾄｱﾄﾞ実行
		SPMsHistParent.UnPrepare;				// ﾘｿｰｽを解放する
	end;
end;
//↑<MHIS>

//↓<223>
//**********************************************************************
//	Proccess	:	MTOKUIのSumKbnを返す
//	Parameter	:	    pNCode  : 内部コード
//                  var pSumKbn : MTOKUIのSumKbn
//                                戻り値がTrueだったときに参照してください。
//                                戻り値がFalseのときは、必ず-1です。
//	Return		:	True:MTOKUIにレコードあり False:MTOKUIにレコードなし
//**********************************************************************
function TJNTCRP004001f.fnGetSumKbn(pNCode:Extended; var pSumKbn:Integer):Boolean;
var
	Qry	:	TMQuery;
begin
    if pNCode = 0 then
    begin
        Result := True;
        pSumKbn := 9;
        Exit;
    end;

    Qry := TMQuery.Create(Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select,Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    Result := False;
    pSumKbn := -1;

    try
        try
            with Qry do
            begin
                Close;
                SQL.Clear;
                SQL.Add('select SumKbn from MTOKUI where RDelKbn = 0 and NCode = :NCode');
//<256> DEL                SetFld('NCode').AsFloat := pNCode;
                SetFld('NCode').AsString := FormatFloat('0',pNCode);  //<256> ADD
                if not Open then
                begin
                    ErrorMessageDsp(Qry);
                    Exit;
                end;

                if EOF then
                begin
            		MjsMessageBox(Self,'取引先が見つかりませんでした。', mjError, mjDefOk);
                    Exit;
                end
                else
                begin
                    pSumKbn := GetFld('SumKbn').AsInteger;
                    Result := True;
                end;
            end;

        except
            on e: Exception do
            begin
        		MjsMessageBox(Self,'実在合計区分のチェックで例外エラー。'+#13#10+e.Message, mjError, mjDefOk);
            end;
        end;
    finally
        if Assigned(Qry) then
        begin
            Qry.Close;
            Qry.Free;
        end;
    end;
end;

//**********************************************************************
//	Proccess	:	HojyoTreeの総合計に自身がぶら下がっているか？
//	Parameter	:	    pNCode  : 内部コード
//	Return		:	True:総合計にレコードあり False:総合計にレコードなし
//**********************************************************************
function TJNTCRP004001f.fnExistsSouGoukei(pNCode:Extended):Boolean;
var
	Qry	:	TMQuery;
begin

    Qry := TMQuery.Create(Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select,Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    Result := False;

    try
        try
            with Qry do
            begin
                Close;
                SQL.Clear;
//<256> DEL                SQL.Add('select * from HojyoTree');
                SQL.Add('select EntNo from HojyoTree');  //<256> ADD
                SQL.Add('where MasterKbn=:pMKBN AND SumNCode=0 AND BasedNCode=:stBased');
                SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
//<256> DEL                SetFld('stBased').AsFloat       := pNCode;
                SetFld('stBased').AsString       := FormatFloat('0',pNCode);  //<256> ADD
                if not Open then
                begin
                    ErrorMessageDsp(Qry);
                    Exit;
                end;

                Result := not(EOF);
            end;

        except
            on e: Exception do
            begin
        		MjsMessageBox(Self,'総合計のチェックで例外エラー。'+#13#10+e.Message, mjError, mjDefOk);
            end;
        end;
    finally
        if Assigned(Qry) then
        begin
            Qry.Close;
            Qry.Free;
        end;
    end;
end;
//↑<223>
//↓<226>
//-----------------------------------------------------------------------------
//	指定コンポーネントの使用制御
//-----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnChgCmpEna(pEna: Boolean; pCMP: TObject;
    pSub1: TObject = nil; pSub2: TObject = nil);
var
    lvCOL: TColor;
begin
    //使用制御
    TControl(pCMP).Enabled := pEna;
    //補助コンポーネントの指定があったら
    if pSub1 <> nil then TControl(pSub1).Enabled := pEna;
    if pSub2 <> nil then TControl(pSub2).Enabled := pEna;

    //色
    lvCOL := clWindow;
    if pEna = False then
        lvCOL := ucCL_UnEnableCtrl;

    //色セット(コンポーネントごとに切分 ※TControlだとColorプロはパティがプロテクトされているため)
    if (pCMP is TMNumEdit)  then TMNumEdit(pCMP).Color  := lvCOL;
    if (pCMP is TMTxtEdit)  then TMTxtEdit(pCMP).Color  := lvCOL;
    if (pCMP is TMComboBox) then TMComboBox(pCMP).Color := lvCOL;
    if (pCMP is TEdit)      then TEdit(pCMP).Color      := lvCOL;
end;
//↑<226>

//***************************************************************************************************/
//*<015>                                                                                            */
//*	関数	: TJNTCRP004001f.fnCheckMasterTreeInsertValid (String; String)	<239> ADD               */
//*																									*/
//*	目的	: 補助登録処理 補助加算体系ﾏｽﾀ 挿入ﾁｪｯｸ                                     		    */
//*																									*/
//*	戻り値	: Boolean, (TRUE:ﾁｪｯｸOK, FALSE:ﾁｪｯｸNG)						                            */
//*																									*/
//*-------------------------------------------------------------------------------------------------*/
//*																									*/
//*	ﾊﾟﾗﾒｰﾀ	: strExCodeSrc	= 挿入(加算)元補助外部ｺｰﾄﾞ                                  		    */
//*			  strExCodeDst  = 挿入(加算)先補助外部ｺｰﾄﾞ								                */
//*                                                                                                 */
//***************************************************************************************************/
function    TJNTCRP004001f.fnCheckMasterTreeInsertValidStr (strExCodeSrc, strExCodeDst: String): Boolean;
var
    nCount   : Integer;
    cNode    : TTreeNode;
    stWorkRec: ^TreeViewRec;
begin
//<KSN> DEL    Result := False;
    // TreeViewを上からチェックしていく。
    for nCount := 1 to VTreeView.Items.Count do
    begin
        stWorkRec   := VTreeView.Items [nCount - 1].Data;
        // TreeViewの外部コードと貼付先の外部コードが一致した？
		if  (CompareStr (stWorkRec^.strExCode, strExCodeDst) = 0) then
        begin
            cNode       := VTreeView.Items [nCount - 1];
            stWorkRec   := cNode.Data;

            if  (stWorkRec^.nDivision = 0) then
            begin
                cNode       := cNode.Parent;
                stWorkRec   := cNode.Data;
            end;

            // 下記のwhile文は貼付先の親情報をチェックしていく
			while (TRUE) do
            begin
                // 貼付先の親情報が貼付元の親情報と一致したらNGになる
				if  (CompareStr (stWorkRec^.strExCode, strExCodeSrc) = 0) then
                begin
					Result	:= FALSE;
					Exit;
                end;

                cNode   := cNode.Parent;

                if  (cNode = nil) then
                begin
                    break;
                end
                else
                    stWorkRec   := cNode.Data;
            end;
        end;
    end;

	Result	:= TRUE;

end;

//***********************************************************************************************************/
//*<240> ADD)																							    */
//*	関数	: TJNTCRP004001f.fnUpdateTreeViewItemsEx (TTreeNode; TTreeNode; TTreeNode; TTreeNode)           */
//*																											*/
//*	目的	: 補助登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ更新処理																*/
//*																											*/
//*	戻り値	: なし,                         																*/
//*																											*/
//*---------------------------------------------------------------------------------------------------------*/
//*																											*/
//*	ﾊﾟﾗﾒｰﾀ	: cNodeSrc			= 挿入(加算)元ﾉｰﾄﾞ															*/
//*			  cNodeSrcParent	= 挿入(加算)元ﾉｰﾄﾞ(親)														*/
//*			  cNodeDst			= 挿入(加算)先ﾉｰﾄﾞ															*/
//*			  cNodeDstParent	= 挿入(加算)先ﾉｰﾄﾞ(親)														*/
//*																											*/
//***********************************************************************************************************/
procedure   TJNTCRP004001f.fnUpdateTreeViewItemsEx (cNodeSrc, cNodeSrcParent, cNodeDst, cNodeDstParent: TTreeNode);
var
    cNodeWork     : TTreeNode;															// ﾉｰﾄﾞ Work
    cNodeDstWork  : TTreeNode;															// ﾉｰﾄﾞ Work
    cNodeSrcOther : TTreeNode;
    cNodeDstOther : TTreeNode;
    stRecSrc      : ^TreeViewRec;														// 挿入元ﾉｰﾄﾞ･ﾃﾞｰﾀ
    stRecDst      : ^TreeViewRec;														// 挿入先ﾉｰﾄﾞ･ﾃﾞｰﾀ
    stRecSrcParent: ^TreeViewRec;														// 挿入元ﾉｰﾄﾞ･ﾃﾞｰﾀ(親)
    stRecDstParent: ^TreeViewRec;														// 挿入先ﾉｰﾄﾞ･ﾃﾞｰﾀ(親)
    stRecTreeItem : ^TreeViewRec;														// ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ･ﾃﾞｰﾀ
    nCount        : Integer;															// ｶｳﾝﾀｰ
	strExCodeWork : String;																// 補助外部ｺｰﾄﾞ Work

begin
	stRecSrc		:= cNodeSrc.Data;													// 挿入元ﾉｰﾄﾞ     ﾃﾞｰﾀ取得
	stRecDst		:= cNodeDst.Data;													// 挿入先ﾉｰﾄﾞ     ﾃﾞｰﾀ取得
	stRecSrcParent	:= cNodeSrcParent.Data;												// 挿入元ﾉｰﾄﾞ(親) ﾃﾞｰﾀ取得

	if	(cNodeDstParent <> nil) then
		stRecDstParent  := cNodeDstParent.Data											// 挿入先ﾉｰﾄﾞ(親) ﾃﾞｰﾀ取得
	else
		stRecDstParent	:= nil;

	if	(stRecDst^.nDivision = 0) then	// 挿入先ﾉｰﾄﾞが子ﾉｰﾄﾞ(実在)
	begin
		cNodeSrc.MoveTo (cNodeDst, naInsert);											// 挿入元ﾉｰﾄﾞを挿入先(子)ﾉｰﾄﾞの前に移動

		cNodeDstWork	:= cNodeDstParent;

		if	(stRecDstParent <> nil) then
			strExCodeWork	:= stRecDstParent^.strExCode
		else
			strExCodeWork	:= '';
	end
	else																				// 挿入先ﾉｰﾄﾞが親ﾉｰﾄﾞ(合計)
	begin
		cNodeSrc.MoveTo (cNodeDst, naAddChild);											// 挿入元ﾉｰﾄﾞを挿入先(親)ﾉｰﾄﾞの子として末尾に移動

		cNodeDstWork	:= cNodeDst;
		strExCodeWork	:= stRecDst^.strExCode;
	end;

	for nCount := 1 to VTreeView.Items.Count do										// ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ検索
	begin
		if  (VTreeView.Items [nCount - 1] = cNodeDstWork) then						// 挿入先(親)ﾉｰﾄﾞと同一は除く
			Continue;

		stRecTreeItem   := VTreeView.Items [nCount - 1].Data;							// 検索ｱｲﾃﾑ･ﾃﾞｰﾀ取得

		if  (CompareStr (stRecTreeItem^.strExCode, strExCodeWork) = 0) then				// 挿入先(親)ｱｲﾃﾑと外部ｺｰﾄﾞが一致
		begin
			cNodeSrcOther   := nil;
			cNodeDstOther   := nil;

			if	(stRecDst^.nDivision <> 0)  then		// 挿入先ﾉｰﾄﾞが親ﾉｰﾄﾞ(合計)
				cNodeDstOther	:= VTreeView.Items [nCount - 1];									// 現在のﾉｰﾄﾞを保存

			cNodeWork       := VTreeView.Items [nCount - 1].GetFirstChild ();						// 先頭の子ﾉｰﾄﾞ取得

			while (TRUE) do
			begin
				if  (cNodeWork = nil) then
					Break;

				stRecTreeItem   := cNodeWork.Data;													// 子ﾉｰﾄﾞ･ﾃﾞｰﾀ取得

				if  (CompareStr (stRecTreeItem^.strExCode, stRecSrc^.strExCode) = 0) then			// 挿入元ｱｲﾃﾑと外部ｺｰﾄﾞが一致
                    cNodeSrcOther   := cNodeWork;

				if	((stRecDst^.nDivision <> 0) and (cNodeSrcOther <> nil)) then
					Break;

				if	(stRecDst^.nDivision = 0) then	// 挿入先ﾉｰﾄﾞが子ﾉｰﾄﾞ(実在)
				begin
					if  (CompareStr (stRecTreeItem^.strExCode, stRecDst^.strExCode) = 0) then		// 挿入先ｱｲﾃﾑと外部ｺｰﾄﾞが一致
						cNodeDstOther   := cNodeWork;
				end;

				cNodeWork   := cNodeWork.GetNextSibling ();											// 次の子ﾉｰﾄﾞ取得
			end;

            if  (cNodeSrcOther <> nil) then															// 挿入元ｱｲﾃﾑと同一のｱｲﾃﾑが存在した場合
			begin
				if	(stRecDst^.nDivision = 0)  then	// 挿入先ﾉｰﾄﾞが子ﾉｰﾄﾞ(実在)
					cNodeSrcOther.MoveTo (cNodeDstOther, naInsert)
				else																	// 挿入先ﾉｰﾄﾞが親ﾉｰﾄﾞ(合計)
					cNodeSrcOther.MoveTo (cNodeDstOther, naAddChild)
			end
			else
				fnInsertTreeViewItemsEx (cNodeDstOther, stRecSrc^.strExCode, stRecSrc^.nDivision);
		end;
	end;

	if  (CompareStr (stRecSrcParent^.strExCode, strExCodeWork) <> 0) then				// 挿入元と先の(親)ｱｲﾃﾑが違う場合
	begin
		nCount  := 0;

		while (TRUE) do
		begin
			nCount  := nCount + 1;

			if	(VTreeView.Items.Count < nCount) then
				Break;

			stRecTreeItem   := VTreeView.Items [nCount - 1].Data;						// 検索ｱｲﾃﾑ･ﾃﾞｰﾀ取得

			if  (CompareStr (stRecTreeItem^.strExCode, stRecSrcParent^.strExCode) = 0) then		// 挿入元親ｱｲﾃﾑと外部ｺｰﾄﾞが一致
			begin
				cNodeSrcOther   := nil;
				cNodeWork       := VTreeView.Items [nCount - 1].GetFirstChild ();		// 先頭の子ﾉｰﾄﾞ取得

				while (TRUE) do
				begin
					if  (cNodeWork = nil) then
						Break;

					stRecTreeItem	:= cNodeWork.Data;									// 子ﾉｰﾄﾞ･ﾃﾞｰﾀ取得

					if	((cNodeWork <> cNodeSrc) and
						 (CompareStr (stRecTreeItem^.strExCode, stRecSrc^.strExCode) = 0)) then		// 挿入元ｱｲﾃﾑと外部ｺｰﾄﾞが一致
					begin
						cNodeSrcOther   := cNodeWork;									// 削除用にﾉｰﾄﾞを保存
						Break;
					end;

					cNodeWork   := cNodeWork.GetNextSibling ();							// 次の子ﾉｰﾄﾞ取得
				end;

				if  (cNodeSrcOther <> nil) then
					cNodeSrcOther.Delete ();
			end;
		end;
	end;

	nCount  := 0;

	while (TRUE) do
	begin
		nCount  := nCount + 1;

		if  (VTreeView.Items.Count < nCount) then
			Break;

		if  (VTreeView.Items [nCount - 1] <> cNodeDstWork) then					// 挿入先(親)ﾉｰﾄﾞのみ対象
			Continue;

		stRecTreeItem   := VTreeView.Items [nCount - 1].Data;						// 検索ｱｲﾃﾑ･ﾃﾞｰﾀ取得

		if  (CompareStr (stRecTreeItem^.strExCode, stRecSrcParent^.strExCode) = 0) then		// 挿入元親ｱｲﾃﾑと外部ｺｰﾄﾞが一致
		begin
			cNodeSrcOther   := nil;
			cNodeWork       := VTreeView.Items [nCount - 1].GetFirstChild ();		// 先頭の子ﾉｰﾄﾞ取得

			while (TRUE) do
			begin
				if  (cNodeWork = nil) then
					Break;

				stRecTreeItem	:= cNodeWork.Data;									// 子ﾉｰﾄﾞ･ﾃﾞｰﾀ取得

				if	((cNodeWork <> cNodeSrc) and
					 (CompareStr (stRecTreeItem^.strExCode, stRecSrc^.strExCode) = 0)) then		// 挿入元ｱｲﾃﾑと外部ｺｰﾄﾞが一致
				begin
					cNodeSrcOther   := cNodeWork;									// 削除用にﾉｰﾄﾞを保存
					Break;
				end;

				cNodeWork   := cNodeWork.GetNextSibling ();							// 次の子ﾉｰﾄﾞ取得
			end;

			if  (cNodeSrcOther <> nil) then
				cNodeSrcOther.Delete ();
		end;
	end;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004001f.fnInsertTreeViewItemsEx (TTreeNode; String; Integer)							*/
//*																											*/
//*	目的	: 補助登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ挿入処理																*/
//*																											*/
//*	戻り値	: なし,                         																*/
//*																											*/
//*---------------------------------------------------------------------------------------------------------*/
//*																											*/
//*	ﾊﾟﾗﾒｰﾀ	: cNodeTarget   = ｱｲﾃﾑ挿入ﾉｰﾄﾞ																	*/
//*           strExCode     = 挿入元ｱｲﾃﾑ 補助外部ｺｰﾄﾞ														*/
//*           nDivision     = 挿入元ｱｲﾃﾑ 実在/合計区分 (0:実在, 1:合計)										*/
//*																											*/
//***********************************************************************************************************/
procedure   TJNTCRP004001f.fnInsertTreeViewItemsEx (cNodeTarget: TTreeNode; strExCode: String; nDivision: Integer);
var
    dqMasterData: TMQuery;
    dqMasterTree: TMQuery;
	stRecTarget	: ^TreeViewRec;
    stRecInsert : ^TreeViewRec;

    sCode       : String;
begin
    dqMasterData    := TMQuery.Create (Self);
    dqMasterTree    := TMQuery.Create (Self);

//<D10>MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);							// DBとMQueryの接続
//<D10>MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterTree);							// DBとMQueryの接続
	gfnJNTSELSetDbName(dqMasterData, dbCorp_Select);		//<D10>
	gfnJNTSELSetDbName(dqMasterTree, dbCorp_Select);		//<D10>


    with (dqMasterData) do
    begin
		Close ();

		SQL.Clear ();
        SQL.Add ('SELECT GCode, NCode, Nmk FROM MTokui   ');
        SQL.Add ('WHERE  RDelKbn   = 0                    ');
        SQL.Add ('  AND  GCode     = :strGCode                      ');

		ParamByName ('strGCode'  ).AsString     := strExCode;

		Open ();

		if  (EOF) then
		begin
			Close ();

			dqMasterData.Free ();
			dqMasterTree.Free ();

		    Exit;
		end;

		stRecTarget	:= cNodeTarget.Data;

        New (stRecInsert);

        stRecInsert^.nDivision  := nDivision;
        stRecInsert^.strExCode  := strExCode;
        stRecInsert^.strName    := FieldByName ('Nmk').AsString;
        stRecInsert^.iNCode := FieldByName ('NCode').AsFloat;

        if m_nCurrentCodeAttr = 0 then
            sCode   := ComArea.SetDspCodeAttr(stRecInsert^.strExCode, m_nCurrentCodeDigit, 0)
        else if m_nCurrentCodeAttr = 1 then
            sCode   := ComArea.SetDspCodeAttr(stRecInsert^.strExCode, m_nCurrentCodeDigit, 1)
        else
            sCode   := ComArea.SetDspCodeAttr(stRecInsert^.strExCode, m_nCurrentCodeDigit, 2);

        if	(stRecTarget^.nDivision = 0) then
        	cNodeTarget := VTreeView.Items.InsertObject   (cNodeTarget, MakeDspString(sCode, stRecInsert^.strName), stRecInsert)
		else
			cNodeTarget	:= VTreeView.Items.AddChildObject (cNodeTarget, MakeDspString(sCode, stRecInsert^.strName), stRecInsert);

		if	(stRecInsert^.nDivision = 0) then
		begin
			cNodeTarget.ImageIndex		:= 0;
			cNodeTarget.SelectedIndex	:= 1;
		end
		else
        begin
			cNodeTarget.ImageIndex		:= 2;
			cNodeTarget.SelectedIndex	:= 3;
		end;

		Close ();
    end;

    if  (nDivision = 0) then
	begin
		dqMasterData.Free ();
		dqMasterTree.Free ();
        Exit;
	end;

    with (dqMasterTree) do
    begin
		Close ();

		SQL.Clear ();
        SQL.Add ('SELECT ht.SumNCode, ht.BasedNCode, hm.SumKbn, hm.Nmk, hm.NCode, hm.Syokuchikbn ');
        SQL.Add (',hm.GCode ');
        SQL.Add ('FROM   HojyoTree ht, MTokui hm                                 ');
        SQL.Add ('WHERE  ht.MasterKbn = :nMasterDivision AND ht.SumNCode = :strSumCode  ');
        SQL.Add ('  AND  hm.RDelKbn  = 0            ');
        SQL.Add ('  AND  hm.NCode     = ht.BasedNCode   ORDER BY EntNo DESC             ');

		ParamByName ('nMasterDivision').AsInteger	:= ucTORIHIKI;
//<256> DEL		ParamByName ('strSumCode'     ).AsFloat 	:= stRecInsert^.iNCode;
		ParamByName ('strSumCode'     ).AsString 	:= FormatFloat('0',stRecInsert^.iNCode);  //<256> ADD
		Open ();

		while (not EOF) do
		begin
            fnCreateTreeViewItem (dqMasterTree, cNodeTarget);
			NEXT;
		end;

		Close ();
    end;

	dqMasterData.Free ();
	dqMasterTree.Free ();
end;

//<240> ADD St
function TJNTCRP004001f.MakeDspString(CODE: String; NAME: String): String;
var
	sWork		:	String;
	sWork2		:	String;
	iCnt		:	Integer;
begin
    //	初期処理
	sWork	:=	'';
	sWork2	:=	'';
//	iCnt	:=	0;

	sWork	:=	CODE;
	iCnt	:=	m_nCurrentCodeDigit - Length(sWork);
	sWork2	:=	StringOfChar(' ', iCnt);

    if m_nCurrentCodeAttr <= 1 then
    	sWork	:=	sWork2 + sWork
    else
       	sWork	:=	sWork  + sWork2;

	Result	:=	sWork + ' ' + NAME;
end;

//***********************************************************************************************************/
//*	<240> ADD																						        */
//*	関数	: TJNTCRP004001f.fnEraseTreeViewItems (TTreeNode)												*/
//*																											*/
//*	目的	: 補助登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ(体系)消去処理														*/
//*																											*/
//*	戻り値	: なし,                         																*/
//*																											*/
//*---------------------------------------------------------------------------------------------------------*/
//*																											*/
//*	ﾊﾟﾗﾒｰﾀ	: cNodeTarget	= 体系消去対象ﾉｰﾄﾞ																*/
//*																											*/
//***********************************************************************************************************/
procedure   TJNTCRP004001f.fnEraseTreeViewItems (cNodeTarget: TTreeNode);
var
	strExCodeParent: String;															//
	strExCodeTarget: String;															//
	stRecTreeItem  : ^TreeViewRec;														// ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ･ﾃﾞｰﾀ
	cNodeChild	   : TTreeNode;															// 子ﾉｰﾄﾞ
	nCount         : Integer;															// ｶｳﾝﾀｰ
	nDivisionTarget: Integer;
	fCreateNode	   : Boolean;

//<KSN> DEL    strExNCodeParent: Extended;
//<KSN> DEL    strExNCodeTarget: Extended;

begin
	nCount	:= 0;

	stRecTreeItem	    := cNodeTarget.Data;
	strExCodeTarget	    := stRecTreeItem^.strExCode;
//<KSN> DEL    strExNCodeTarget	:= stRecTreeItem^.iNCode;
	nDivisionTarget	    := stRecTreeItem^.nDivision;
	stRecTreeItem	    := cNodeTarget.Parent.Data;
	strExCodeParent	    := stRecTreeItem^.strExCode;
//<KSN> DEL    strExNCodeParent    := stRecTreeItem^.iNCode;

	while (TRUE) do
	begin
		nCount	:= nCount + 1;

		if  (VTreeView.Items.Count < nCount) then
			Break;

		stRecTreeItem	:= VTreeView.Items [nCount - 1].Data;							// 検索ｱｲﾃﾑ･ﾃﾞｰﾀ取得

		if	(CompareStr (stRecTreeItem^.strExCode, strExCodeParent) = 0) then			// 親外部ｺｰﾄﾞが一致
		begin
			cNodeChild	:= VTreeView.Items [nCount - 1].GetFirstChild ();

			while (TRUE) do
			begin
				if  (cNodeChild = nil) then
					Break;

				stRecTreeItem	:= cNodeChild.Data;										// 子ﾉｰﾄﾞ･ﾃﾞｰﾀ取得

				if	(CompareStr (stRecTreeItem^.strExCode, strExCodeTarget) = 0) then	// 外部ｺｰﾄﾞが一致
				begin
					cNodeChild.Delete ();
					Break;
				end;

				cNodeChild	:= cNodeChild.GetNextSibling ();							// 次の子ﾉｰﾄﾞ取得
			end;
		end;
	end;

//	if m_fUpDeleteRecord = FALSE then
//		Exit;

	fCreateNode	:= FALSE;

	cNodeChild	:= VTreeView.Items [0].GetFirstChild ();

	while (TRUE) do
	begin
		if	(cNodeChild = nil) then
		begin
			fCreateNode	:= TRUE;
			Break;
		end;

		stRecTreeItem	:= cNodeChild.Data;												// 子ﾉｰﾄﾞ･ﾃﾞｰﾀ取得

		if	(CompareStr (stRecTreeItem^.strExCode, strExCodeTarget) = 0) then			// 外部ｺｰﾄﾞが一致
		begin
			fCreateNode	:= FALSE;
			Break;
		end;

		cNodeChild	:= cNodeChild.GetNextSibling ();									// 次の子ﾉｰﾄﾞ取得
	end;

	if	(fCreateNode) then
		fnInsertTreeViewItemsEx (VTreeView.Items [0], strExCodeTarget, nDivisionTarget);

end;

//***********************************************************************************************************/
//*	<240> ADD																						        */
//*	関数	: TJNTCRP004001f.fnDeleteTreeViewItems (String)													*/
//*																											*/
//*	目的	: 補助登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ削除処理																*/
//*																											*/
//*	戻り値	: なし,                         																*/
//*																											*/
//*---------------------------------------------------------------------------------------------------------*/
//*																											*/
//*	ﾊﾟﾗﾒｰﾀ	: strExCode	= 補助外部ｺｰﾄﾞ																		*/
//*																											*/
//***********************************************************************************************************/
procedure   TJNTCRP004001f.fnDeleteTreeViewItems (strExCode: String);
var
	stRecTreeBase: ^TreeViewRec;														// ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ･ﾃﾞｰﾀ
	stRecTreeItem: ^TreeViewRec;														// ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ･ﾃﾞｰﾀ
	cNodeBase	 : TTreeNode;															// 子ﾉｰﾄﾞ
	cNodeChild	 : TTreeNode;															// 子ﾉｰﾄﾞ
	cNodeTarget	 : TTreeNode;															// 子ﾉｰﾄﾞ
	nCount       : Integer;																// ｶｳﾝﾀｰ
	fMove		 : Boolean;

begin
	nCount	:= 0;

	while (TRUE) do
	begin
    	nCount	:= nCount + 1;

		if  (VTreeView.Items.Count < nCount) then
			Break;

		stRecTreeItem	:= VTreeView.Items [nCount - 1].Data;							// 検索ｱｲﾃﾑ･ﾃﾞｰﾀ取得

		if  (CompareStr (stRecTreeItem^.strExCode, strExCode) = 0) then					// 外部ｺｰﾄﾞが一致
		begin
			if	((stRecTreeItem^.nDivision = 1)) then
			begin
				cNodeChild	:= VTreeView.Items [nCount - 1].GetFirstChild ();

				while (TRUE) do
				begin
					if  (cNodeChild = nil) then
						Break;

					stRecTreeItem	:= cNodeChild.Data;									// 子ﾉｰﾄﾞ･ﾃﾞｰﾀ取得

					fMove	:= TRUE;

					cNodeBase	:= VTreeView.Items [0].GetFirstChild ();

					while (TRUE) do
					begin
						if  (cNodeBase = nil) then
							Break;

						stRecTreeBase	:= cNodeBase.Data;

						if	(CompareStr (stRecTreeBase^.strExCode, stRecTreeItem^.strExCode) = 0) then
						begin
							fMove	:= FALSE;
							Break;
						end;

						cNodeBase	:= cNodeBase.GetNextSibling ();						// 次の子ﾉｰﾄﾞ取得
					end;

					cNodeTarget	:= cNodeChild;
					cNodeChild	:= cNodeChild.GetNextSibling ();						// 次の子ﾉｰﾄﾞ取得

					if	(fMove) then
						cNodeTarget.MoveTo (VTreeView.Items [0], naAddChild);			// 挿入先ﾉｰﾄﾞの子として末尾に移動
				end;
			end;

			VTreeView.Items [nCount - 1].Delete ();
		end;
	end;
end;

//<240> ADD Ed

//↓<244>
//**********************************************************************
//	Proccess	:	MTOKUIのGCodeを返す
//	Parameter	:	    pNCode   : 内部コード
//                  var sGCode   : 外部コード
//                  var sNmk  	 : 簡略名
//                  var iRDelKbn : 削除区分
//	Return		:	なし
//**********************************************************************
procedure TJNTCRP004001f.fnGetMaster(pCODE : Extended; var sGCode:string; var sNmk: string; var iRDelKbn: Integer);
var
    Qry :TMQuery;
begin

    Qry := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            SQL.Add('SELECT GCODE,NMK,RDELKBN FROM MTOKUI WHERE NCode = :pCode');
            SetFld('pCode').AsString := FormatFloat('0',pCODE);

            Open;						// ｸｴﾘの開始

            if EOF = False then
            begin
                sGCode		:= GetFld('GCODE').AsString;
                sNmk		:= GetFld('NMK').AsString;
                iRDelKbn	:= GetFld('RDELKBN').AsInteger;
            end;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;

//**********************************************************************
//*		Proccess	:	申請書の値 → 画面 （クリアを考慮）
//*     Param       :   pVal  : 申請書の値
//*		Return		:	画面にセットする値
//**********************************************************************
function TJNTCRP004001f.fnShinToFld(pVal: string): string;
begin
	Result := '';

	if pVal <> NullData_String then
    begin
    	Result := pVal;
    end;
end;

//**********************************************************************
//*		Proccess	:	申請書の値 → 画面 （クリアを考慮）
//*     Param       :   pVal  : 申請書の値
//*		Return		:	画面にセットする値
//**********************************************************************
function TJNTCRP004001f.fnShinToFld(pVal: Integer): Integer;
begin
	Result := 0;

	if pVal <> NullData_Integer then
    begin
    	Result := pVal;
    end;
end;

//**********************************************************************
//*		Proccess	:	申請書の値 → 画面 （クリアを考慮）
//*     Param       :   pVal  : 申請書の値
//*		Return		:	画面にセットする値
//**********************************************************************
function TJNTCRP004001f.fnShinToFld(pVal: Extended): Extended;
begin
	Result := 0;

	if pVal <> NullData_Extended then
    begin
    	Result := pVal;
    end;
end;

//**********************************************************************
//*		Proccess	:	申請書の値 → 画面 （クリアを考慮）
//*     Param       :   pVal  : 申請書の値
//*		Return		:	画面にセットする値
//**********************************************************************
function TJNTCRP004001f.fnShinToFld(pVal: Int64): Int64;
begin
	Result := 0;

	if pVal <> NullData_Int64 then
    begin
    	Result := pVal;
    end;
end;

//**********************************************************************
//*		Proccess	:	申請書の値 → 画面 （クリアを考慮）
//*     Param       :   pVal  : 申請書の値
//*		Return		:	画面にセットする値
//**********************************************************************
function TJNTCRP004001f.fnShinToFldDouble(pVal: Double): Double;
begin
	Result := 0;

	if pVal <> NullData_Double then
    begin
    	Result := pVal;
    end;
end;

//**********************************************************************
//*		Proccess	:	申請書の値 → 画面 （クリアを考慮）
//*     Param       :   pVal  : 申請書の値
//*		Return		:	画面にセットする値
//**********************************************************************
function TJNTCRP004001f.fnShinToFldDateTime(pVal: TDateTime): TDateTime;
begin
	Result := 0;

	if pVal <> NullData_TDateTime then
    begin
    	Result := pVal;
    end;
end;

//**********************************************************************
//*		Proccess	:	申請書の情報をｾｯﾄ(変更申請用)　構造体→画面
//*     Param       :   objRec  : 得意先申請書構造体
//*		Return		:	なし
//**********************************************************************
//<Gali2235>procedure TJNTCRP004001f.fnFldSetWFUpd(objRec: TTokuiSinseiInfo);
procedure TJNTCRP004001f.fnFldSetWFUpd(objRec: TTokuiSinseiInfo; IsUpd:Boolean); //<Gali2235>
begin
    ClearOtherRec(m_recOther);              // 中身をｸﾘｱ


    // 変更申請書で変更があった箇所をセットします。
    // 基本情報で登録できるコンポーネントなら、フォントを赤字にします。
	with objRec do
    begin
        // 【基本情報】＞基本情報
        if RensoFlg then                    // 連想
        begin
            f0RenChar.Text			:= fnShinToFld(Renso);
            f0RenChar.Font.Color	:= clRed;
        end;

        if FkanaFlg then                    // ﾌﾘｶﾞﾅ
        begin
            f0FKANA.Text			:= fnShinToFld(Fkana);
            f0FKANA.Font.Color		:= clRed;
        end;

        if NmFlg then                       // 正式名称
        begin
            f0LongName.Text			:= fnShinToFld(Nm);
            f0LongName.Font.Color	:= clRed;
        end;

        if NmkFlg then                      // 簡略名称
        begin
            f0SimpleName.Text		:= fnShinToFld(Nmk);
            f0SimpleName.Font.Color	:= clRed;
        end;


        if PostNo1Flg then                  // 郵便番号1
        begin
            f0ZipCode1.Value		:= fnShinToFld(PostNo1);
            f0ZipCode1.Font.Color	:= clRed;
        end;

        if PostNo2Flg then                  // 郵便番号2
        begin
            f0ZipCode2.Value		:= fnShinToFld(PostNo2);
            f0ZipCode2.Font.Color	:= clRed;

            if (f0ZipCode1.Value <> 0) then
            begin
            	f0ZipCode2.Zero := True;
            end
            else
            begin
            	f0ZipCode2.Zero := False;
            end;
        end;

        if Ads1Flg then                     // 住所上段
        begin
            f0Address1.Text			:= fnShinToFld(Ads1);
            f0Address1.Font.Color	:= clRed;
        end;

        if Ads2Flg then                     // 住所下段
        begin
            f0Address2.Text			:= fnShinToFld(Ads2);
            f0Address2.Font.Color	:= clRed;
        end;

        if Tel1Flg then                     // 電話番号(1)
        begin
            f0TelNo.Text			:= fnShinToFld(Tel1);
            f0TelNo.Font.Color		:= clRed;
        end;

        if Tel2Flg then                     // 電話番号(2)
        begin
            f0TelNo2.Text			:= fnShinToFld(Tel2);
            f0TelNo2.Font.Color		:= clRed;
        end;

        if Fax1Flg then                     // FAX番号
        begin
            f0FAX.Text				:= fnShinToFld(Fax1);
            f0FAX.Font.Color		:= clRed;
        end;
//↓<260>
		if KeisyoKbnFlg then				// 敬称
        begin
        	f0KEISYOKBN.text		:= fnShinToFld(KeisyoKbn);
            f0KEISYOKBN.Font.Color	:= clRed;
        end;

        if DHyoNm1Flg then					// 代表者役職名
        begin
        	f0DHYONM1.text			:= fnShinToFld(DHyoNm1);
            f0DHYONM1.Font.Color	:= clRed;
        end;

        if DHyoNm2Flg then					// 代表者名
        begin
			f0DHYONM2.Text			:= fnShinToFld(DHyoNm2);
            f0DHYONM2.Font.Color	:= clRed;
        end;

        if HPAddressFlg then				// HPアドレス
        begin
            f0HPADD.Text			:= fnShinToFld(HPAddress);
            f0HPADD.Font.Color		:= clRed;
        end;

        if ShihonKinFlg then				// 資本金
        begin
            f0SIHONKIN.Value		:= fnShinToFld(ShihonKin);
            f0SIHONKIN.Font.Color	:= clRed;
        end;

        if NensyoFlg then					// 年商
        begin
            f0NENSYO.Value			:= fnShinToFld(Nensyo);
            f0NENSYO.Font.Color		:= clRed;
        end;

        if SyainSuFlg then					// 社員数
        begin
            f0SYAINSU.Value			:= fnShinToFld(SyainSu);
            f0SYAINSU.Font.Color	:= clRed;
        end;
//↑<260>

//↓<Gali2235>
		if IsUpd then // このフラグがONはGL33がたっていて、上書取込をされたとき
        begin
            // 【基本情報】＞採用情報
            if SyncKbn = SWKFORM_TOKUI_HENKO then   // 得意先変更申請
            begin
                f1TSKBN.Checked := True;
                f1TKBN.Value	:= 1;

                // ＞入金予定日
                if RCloseDay1Flg then               // 締日1
                begin
                    f1NClosingDay1.Value := RCloseDay1;
                    if RcvDay1Flg then              // 回収日1
                        f1NDay1.Value := RcvDay1;
                end;
                if RCloseDay2Flg then               // 締日2
                begin
                    f1NClosingDay2.Value := RCloseDay2;
                    if RcvDay2Flg then              // 回収日2
                        f1NDay2.Value := RcvDay2;
                end;
                if RCloseDay3Flg then               // 締日3
                begin
                    f1NClosingDay3.Value := RCloseDay3;
                    if RcvDay3Flg then              // 回収日3
                        f1NDay3.Value := RcvDay3;
                end;

                fnSeiKbn_EntryControl();            // ｺﾝﾄﾛｰﾙの有効/無効切替

                if RCloseDay1Flg then
                begin
                    if RcvMonth1Flg then            // ｻｲｸﾙ1
                    begin
                        if f1NMonth1.Items.Count > RcvMonth1 then
                            f1NMonth1.ItemIndex := RcvMonth1;
                    end;
                end;
                if RCloseDay2Flg then
                begin
                    if RcvMonth2Flg then            // ｻｲｸﾙ2
                    begin
                        if f1NMonth2.Items.Count > RcvMonth2 then
                            f1NMonth2.ItemIndex := RcvMonth2;
                    end;
                end;
                if RCloseDay3Flg then
                begin
                    if RcvMonth3Flg then            // ｻｲｸﾙ3
                    begin
                        if f1NMonth3.Items.Count > RcvMonth3 then
                            f1NMonth3.ItemIndex := RcvMonth3;
                    end;
                end;
                if RCloseDay1Flg then
                begin
                    if RHolidayKbn1Flg then			// 休日区分1
                    begin
                        if f1NHoliday1.Items.Count > RHolidayKbn1 then
                            f1NHoliday1.ItemIndex := RHolidayKbn1;
                    end;
                end;
                if RCloseDay2Flg then
                begin
                    if RHolidayKbn2Flg then			// 休日区分2
                    begin
                        if f1NHoliday2.Items.Count > RHolidayKbn2 then
                            f1NHoliday2.ItemIndex := RHolidayKbn2;
                    end;
                end;
                if RCloseDay3Flg then
                begin
                    if RHolidayKbn3Flg then			// 休日区分3
                    begin
                        if f1NHoliday3.Items.Count > RHolidayKbn3 then
                            f1NHoliday3.ItemIndex := RHolidayKbn3;
                    end;
                end;
            end;
            if SyncKbn = SWKFORM_SIIRE_HENKO then   // 仕入先変更申請
            begin
                f1SSKBN.Checked := True;
                f1SKBN.Value	:= 1;

                // ＞支払予定日
                if RCloseDay1Flg then               // 締日1
                begin
                    f1SClosingDay1.Value := RCloseDay1;
                    if RcvDay1Flg then              // 回収日1
                        f1SDay1.Value := RcvDay1;
                end;
                if RCloseDay2Flg then               // 締日2
                begin
                    f1SClosingDay2.Value := RCloseDay2;
                    if RcvDay2Flg then              // 回収日2
                        f1SDay2.Value := RcvDay2;
                end;
                if RCloseDay3Flg then               // 締日3
                begin
                    f1SClosingDay3.Value := RCloseDay3;
                    if RcvDay3Flg then              // 回収日3
                        f1SDay3.Value := RcvDay3;
                end;

                fnSeiKbn_EntryControl_SI();         // ｺﾝﾄﾛｰﾙの有効/無効切替

                if RCloseDay1Flg then
                begin
                    if RcvMonth1Flg then            // ｻｲｸﾙ1
                    begin
                        if f1SMonth1.Items.Count > RcvMonth1 then
                            f1SMonth1.ItemIndex := RcvMonth1;
                    end;
                end;
                if RCloseDay2Flg then
                begin
                    if RcvMonth2Flg then            // ｻｲｸﾙ2
                    begin
                        if f1SMonth2.Items.Count > RcvMonth2 then
                            f1SMonth2.ItemIndex := RcvMonth2;
                    end;
                end;
                if RCloseDay3Flg then
                begin
                    if RcvMonth3Flg then            // ｻｲｸﾙ3
                    begin
                        if f1SMonth3.Items.Count > RcvMonth3 then
                            f1SMonth3.ItemIndex := RcvMonth3;
                    end;
                end;
                if RCloseDay1Flg then
                begin
                    if RHolidayKbn1Flg then			// 休日区分1
                    begin
                        if f1SHoliday1.Items.Count > RHolidayKbn1 then
                            f1SHoliday1.ItemIndex := RHolidayKbn1;
                    end;
                end;
                if RCloseDay2Flg then
                begin
                    if RHolidayKbn2Flg then			// 休日区分2
                    begin
                        if f1SHoliday2.Items.Count > RHolidayKbn2 then
                            f1SHoliday2.ItemIndex := RHolidayKbn2;
                    end;
                end;
                if RCloseDay3Flg then
                begin
                    if RHolidayKbn3Flg then			// 休日区分3
                    begin
                        if f1SHoliday3.Items.Count > RHolidayKbn3 then
                            f1SHoliday3.ItemIndex := RHolidayKbn3;
                    end;
                end;
            end;
        end;
//↑<Gali2235>

        m_recOther.SyncKbn			:= SyncKbn;                     // 申請書式連動区分

        // 【販売情報】
        m_recOther.TrihikiKbn		:= fnShinToFld(TrihikiKbn);		// 取引区分
        m_recOther.TrihikiKbnFlg	:= TrihikiKbnFlg;				// 取引区分有無
        m_recOther.TnNCode			:= fnShinToFld(TnNCode);		// 担当者ｺｰﾄﾞ
        m_recOther.TnNCodeFlg		:= TnNCodeFlg;					// 担当者ｺｰﾄﾞ有無
        m_recOther.BmNCode			:= fnShinToFld(BmNCode);        // 部門ｺｰﾄﾞ
        m_recOther.BmNCodeFlg		:= BmNCodeFlg;					// 部門ｺｰﾄﾞ有無

        // 【債権情報】
        m_recOther.YsGKin			:= fnShinToFld(YsGKin);         // 与信限度額
        m_recOther.YsGKinFlg		:= YsGKinFlg;					// 与信限度額有無

        // 【振込情報】
        if SyncKbn = SWKFORM_SIIRE_HENKO then		// 仕入先変更申請
        begin
            m_recOther.AccNCode             := fnShinToFld(AccNCode);       // 振込依頼口座内部コード       // <247>
            m_recOther.AccNCodeFlg          := AccNCodeFlg;                 // 振込依頼口座内部コード有無   // <247>
            m_recOther.BkBraNCode			:= fnShinToFld(BkBraNCode);		// 振込先支店内部コード
            m_recOther.BkBraNCodeFlg		:= BkBraNCodeFlg;				// 振込先支店内部コード有無
            m_recOther.TransKanaName		:= fnShinToFld(TransKanaName);  // カナ振込先名称
            m_recOther.TransKanaNameFlg		:= TransKanaNameFlg;    		// カナ振込先名称有無
            m_recOther.Acckbn				:= fnShinToFld(Acckbn);         // 預金種目
            m_recOther.AcckbnFlg 			:= AcckbnFlg;                  	// 預金種目有無
            m_recOther.AccNo				:= fnShinToFld(AccNo);          // 口座番号
            m_recOther.AccNoFlg 			:= AccNoFlg;                    // 口座番号有無
            m_recOther.UketoriName          := fnShinToFld(UketoriName);    // 受取人名                     // <247>
            m_recOther.UketoriNameFlg       := UketoriNameFlg;              // 受取人名有無                 // <247>
            m_recOther.ChargeFutan          := fnShinToFld(ChargeFutan);    // 手数料負担                   // <247>
            m_recOther.ChargeFutanFlg       := ChargeFutanFlg;              // 手数料負担有無               // <247>
            m_recOther.ChargeKbn            := fnShinToFld(ChargeKbn);      // 手数料計算区分               // <247>
            m_recOther.ChargeKbnFlg         := ChargeKbnFlg;                // 手数料計算区分有無           // <247>
            m_recOther.TransKbn             := fnShinToFld(TransKbn);       // 振込方法                     // <247>
            m_recOther.TransKbnFlg          := TransKbnFlg;                 // 振込方法有無                 // <247>
// <263> ADD-STR
            m_recOther.EdiInfo              := fnShinToFld(EdiInfo);        // ＥＤＩ情報
            m_recOther.EdiInfoFlg           := EdiInfoFlg;                  // セットフラグ True:セットあり、False:セットなし
            m_recOther.AiteNo1              := fnShinToFld(AiteNo1);        // 顧客コード１
            m_recOther.AiteNo1Flg           := AiteNo1Flg;                  // セットフラグ True:セットあり、False:セットなし
            m_recOther.AiteNo2              := fnShinToFld(AiteNo2);        // 顧客コード２
            m_recOther.AiteNo2Flg           := AiteNo2Flg;                  // セットフラグ True:セットあり、False:セットなし
            m_recOther.FBSet                := fnShinToFld(FBSet);          // FBセット項目
            m_recOther.FBSetFlg             := FBSetFlg;                    // セットフラグ True:セットあり、False:セットなし
            m_recOther.AccAutoKbn           := fnShinToFld(AccAutoKbn);     // 口座自動引落区分
            m_recOther.AccAutoKbnFlg        := AccAutoKbnFlg;               // セットフラグ True:セットあり、False:セットなし
            m_recOther.AccAutoData          := fnShinToFld(AccAutoData);    // 自動引落支払データ
            m_recOther.AccAutoDataFlg       := AccAutoDataFlg;              // セットフラグ True:セットあり、False:セットなし
// <263> ADD-END
        end;

// <262> ADD-STR
        // 【債務情報】
        if SyncKbn = SWKFORM_SIIRE_HENKO then		// 仕入先変更申請
        begin
            m_recOther.MailAddress_MTP := fnShinToFld(MailAddress_MTP);     // 担当者メールアドレス
            m_recOther.MailAddress_MTPFlg := MailAddress_MTPFlg;            // セットフラグ True:セットあり、False:セットなし

            m_recOther.GensenUseKbn    := fnShinToFld(GensenUseKbn);        // 預かり源泉税採用区分
            m_recOther.GensenUseKbnFlg := GensenUseKbnFlg;                  // セットフラグ True:セットあり、False:セットなし
            m_recOther.PersonKbn       := fnShinToFld(PersonKbn);           // 個人／法人区分
            m_recOther.PersonKbnFlg    := PersonKbnFlg;                     // セットフラグ True:セットあり、False:セットなし
            m_recOther.LocationKbn     := fnShinToFld(LocationKbn);         // 国内／国外区分
            m_recOther.LocationKbnFlg  := LocationKbnFlg;                   // セットフラグ True:セットあり、False:セットなし

            m_recOther.PayKbn2         := fnShinToFld(PayKbn2);             // 支払通知書メール配信区分
            m_recOther.PayKbn2Flg      := PayKbn2Flg;                       // セットフラグ True:セットあり、False:セットなし

            m_recOther.ZipPass         := fnShinToFld(ZipPass);             // 解凍用パスワード
            m_recOther.ZipPassFlg      := ZipPassFlg;                       // セットフラグ True:セットあり、False:セットなし
        end;
// <262> ADD-END

        // 【フリー項目情報】
        if VFree1Flg or VFree2Flg or VFree3Flg or VFree4Flg or VFree5Flg or
           VFree6Flg or VFree7Flg or VFree8Flg or VFree9Flg or VFree10Flg or
           NFree1Flg or NFree2Flg or NFree3Flg or NFree4Flg or NFree5Flg or
           NFree6Flg or NFree7Flg or NFree8Flg or NFree9Flg or NFree10Flg or
           DFree1Flg or DFree2Flg or DFree3Flg then
        begin
//<244++>  	freeItem := fnJNTFreeDlgGetRec(objRec.NCode);

        	freeItem := fnFreeItemGetRec(objRec.NCode); //現時点のフリー項目を取得します<253>上記関数には置きかえれませんでした。fnJNTFreeDlgInfoがこの後に呼ばれて、そこでキャプションなどが決まるので。

            UpdFreeFlg := True;                         //アップデートフラグTrue
            if VFree1Flg then                           //文字型フリー項目1
            begin
                freeItem.VFree1 := fnShinToFld(VFree1);
			end;

            if VFree2Flg then                           //文字型フリー項目2
            begin
                freeItem.VFree2 := fnShinToFld(VFree2);
			end;

            if VFree3Flg then                           //文字型フリー項目3
            begin
                freeItem.VFree3 := fnShinToFld(VFree3);
			end;

            if VFree4Flg then                           //文字型フリー項目4
            begin
                freeItem.VFree4 := fnShinToFld(VFree4);
			end;

            if VFree5Flg then                           //文字型フリー項目5
            begin
                freeItem.VFree5 := fnShinToFld(VFree5);
			end;

            if VFree6Flg then                           //文字型フリー項目6
            begin
                freeItem.VFree6 := fnShinToFld(VFree6);
			end;

            if VFree7Flg then                           //文字型フリー項目7
            begin
                freeItem.VFree7 := fnShinToFld(VFree7);
			end;

            if VFree8Flg then                           //文字型フリー項目8
            begin
                freeItem.VFree8 := fnShinToFld(VFree8);
			end;

            if VFree9Flg then                           //文字型フリー項目9
            begin
                freeItem.VFree9 := fnShinToFld(VFree9);
			end;

            if VFree10Flg then                          //文字型フリー項目10
            begin
                freeItem.VFree10 := fnShinToFld(VFree10);
			end;

            if NFree1Flg then                           //数字型フリー項目1
            begin
                freeItem.NFree1 := fnShinToFldDouble(NFree1);
			end;

            if NFree2Flg then                           //数字型フリー項目2
            begin
                freeItem.NFree2 := fnShinToFldDouble(NFree2);
			end;

            if NFree3Flg then                           //数字型フリー項目3
            begin
                freeItem.NFree3 := fnShinToFldDouble(NFree3);
			end;

            if NFree4Flg then                           //数字型フリー項目4
            begin
                freeItem.NFree4 := fnShinToFldDouble(NFree4);
			end;

            if NFree5Flg then                           //数字型フリー項目5
            begin
                freeItem.NFree5 := fnShinToFldDouble(NFree5);
			end;

            if NFree6Flg then                           //数字型フリー項目6
            begin
                freeItem.NFree6 := fnShinToFldDouble(NFree6);
			end;

            if NFree7Flg then                           //数字型フリー項目7
            begin
                freeItem.NFree7 := fnShinToFldDouble(NFree7);
			end;

            if NFree8Flg then                           //数字型フリー項目8
            begin
                freeItem.NFree8 := fnShinToFldDouble(NFree8);
			end;

            if NFree9Flg then                           //数字型フリー項目9
            begin
                freeItem.NFree9 := fnShinToFldDouble(NFree9);
			end;

            if NFree10Flg then                          //数字型フリー項目10
            begin
                freeItem.NFree10 := fnShinToFldDouble(NFree10);
			end;

            if DFree1Flg then                           //日付型フリー項目1
            begin
                freeItem.DFree1 := fnShinToFldDateTime(DFree1);
			end;

            if DFree2Flg then                           //日付型フリー項目2
            begin
                freeItem.DFree2 := fnShinToFldDateTime(DFree2);
			end;

            if DFree3Flg then                           //日付型フリー項目3
            begin
                freeItem.DFree3 := fnShinToFldDateTime(DFree3);
			end;

        end;


		//↓<253>
        // 【フリー項目情報変更フラグ】
        freeChgItem.VFree1Flg	:= VFree1Flg;	//文字型フリー項目1
        freeChgItem.VFree2Flg	:= VFree2Flg;	//文字型フリー項目2
        freeChgItem.VFree3Flg	:= VFree3Flg;	//文字型フリー項目3
        freeChgItem.VFree4Flg	:= VFree4Flg;	//文字型フリー項目4
        freeChgItem.VFree5Flg	:= VFree5Flg;	//文字型フリー項目5
        freeChgItem.VFree6Flg	:= VFree6Flg;	//文字型フリー項目6
        freeChgItem.VFree7Flg	:= VFree7Flg;	//文字型フリー項目7
        freeChgItem.VFree8Flg	:= VFree8Flg;	//文字型フリー項目8
        freeChgItem.VFree9Flg	:= VFree9Flg;	//文字型フリー項目9
        freeChgItem.VFree10Flg	:= VFree10Flg;	//文字型フリー項目10
        freeChgItem.NFree1Flg	:= NFree1Flg;	//数字型フリー項目1
        freeChgItem.NFree2Flg	:= NFree2Flg;	//数字型フリー項目2
        freeChgItem.NFree3Flg	:= NFree3Flg;	//数字型フリー項目3
        freeChgItem.NFree4Flg	:= NFree4Flg;	//数字型フリー項目4
        freeChgItem.NFree5Flg	:= NFree5Flg;	//数字型フリー項目5
        freeChgItem.NFree6Flg	:= NFree6Flg;	//数字型フリー項目6
        freeChgItem.NFree7Flg	:= NFree7Flg;	//数字型フリー項目7
        freeChgItem.NFree8Flg	:= NFree8Flg;	//数字型フリー項目8
        freeChgItem.NFree9Flg	:= NFree9Flg;	//数字型フリー項目9
        freeChgItem.NFree10Flg	:= NFree10Flg;	//数字型フリー項目10
        freeChgItem.DFree1Flg	:= DFree1Flg;	//日付型フリー項目1
        freeChgItem.DFree2Flg	:= DFree2Flg;	//日付型フリー項目2
        freeChgItem.DFree3Flg	:= DFree3Flg;	//日付型フリー項目3
		//↑<253>


        // 申請書情報ｷｰ
        if SinFormFlg then                  // 仕訳入力形式
            m_recSinseiKey.SinForm := SinForm
        else
            m_recSinseiKey.SinForm := -1;
        if OrgNoFlg then                    // 原票No
            m_recSinseiKey.OrgNo := OrgNo
        else
            m_recSinseiKey.OrgNo := -1;
        if HisIDFlg then                    // 処理履歴ID
            m_recSinseiKey.HisID := HisID
        else
            m_recSinseiKey.HisID := -1;


		// 取込内容の入力ﾁｪｯｸ
        if TnNCodeFlg then
        begin
        	if TnNCode <> NullData_Int64 then   // 担当者
            begin
	            if not ExistMst(MKBN_SYAIN, TnNCode) then
    	            Exit;
            end;
        end;
        if BmNCodeFlg then
        begin
        	if BmNCode <> NullData_Int64 then	// 部門
            begin
	            if not ExistMst(MKBN_BUMON, BmNCode) then
    	            Exit;
            end;
        end;
    end;

    m_recOther.CanInsert := True;           // 取込可能
    m_recOther.CanUpdate := True;           // 更新可能

end;
//↑<244>
//↓<244++>パッケージでは「fnJNTFreeDlgGetRec」に置き換えたいです。
//**********************************************************************
//	Proccess	:	MTOKUIのフリー項目を返す
//	Parameter	:	    eNCode   : 内部コード
//	Return		:	TJNTFreeRec
//**********************************************************************
function TJNTCRP004001f.fnFreeItemGetRec(eNCode: Extended): TJNTFreeRec;
var
    Qry :TMQuery;
    lvFree : TJNTFreeRec;
    lvFormat:   String;
    lvFwk:      Extended;
begin

    Qry := TMQuery.Create (Self);
//<D10>MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    try
        with Qry, lvFree do
        begin

            LCaption	:= Jituzai_LLabel_GCode.Caption;
            NCode		:= eNCode;

            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            SQL.Add('SELECT GCode, Nmk, ');
            SQL.Add('VFree1,VFree2,VFree3,VFree4,VFree5,');
            SQL.Add('VFree6,VFree7,VFree8,VFree9,VFree10,');
            SQL.Add('NFree1,NFree2,NFree3,NFree4,NFree5,');
            SQL.Add('NFree6,NFree7,NFree8,NFree9,NFree10,');
            SQL.Add('DFree1,DFree2,DFree3');
            SQL.Add(' FROM MTOKUI WHERE NCode = :pCode');
            SetFld('pCode').AsString := FormatFloat('0',eNCode);

            Open;						// ｸｴﾘの開始


            if EOF = False then
            begin

                GCode   :=  GetFld('GCode').AsString;
                //  外部コード属性による変更
                if MasterInfo_DMemDataCodeAttr.AsInteger = 0 then
                begin
                    lvFormat    :=  StringOfChar('#',MasterInfo_DMemDataCodeDigit.AsInteger);
                    lvFwk       :=  StrToFloat(GCode);
                    if lvFwk = 0 then
                    begin
                        GCode := '0';
                    end
                    else
                    begin
                        GCode       :=  FormatFloat(lvFormat,lvFwk);
                    end;
                end
                else if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                begin
                    lvFormat    :=  StringOfChar('0',MasterInfo_DMemDataCodeDigit.AsInteger);
                    lvFwk       :=  StrToFloat(GCode);
                    GCode       :=  FormatFloat(lvFormat,lvFwk);
                end;


            	Nm		:=  GetFld('Nmk').AsString;

                VFree1  :=  GetFld('VFree1').AsString;
                VFree2  :=  GetFld('VFree2').AsString;
                VFree3  :=  GetFld('VFree3').AsString;
                VFree4  :=  GetFld('VFree4').AsString;
                VFree5  :=  GetFld('VFree5').AsString;
                VFree6  :=  GetFld('VFree6').AsString;
                VFree7  :=  GetFld('VFree7').AsString;
                VFree8  :=  GetFld('VFree8').AsString;
                VFree9  :=  GetFld('VFree9').AsString;
                VFree10 :=  GetFld('VFree10').AsString;
                NFree1  :=  GetFld('NFree1').AsCurrency;
                NFree2  :=  GetFld('NFree2').AsCurrency;
                NFree3  :=  GetFld('NFree3').AsCurrency;
                NFree4  :=  GetFld('NFree4').AsCurrency;
                NFree5  :=  GetFld('NFree5').AsCurrency;
                NFree6  :=  GetFld('NFree6').AsCurrency;
                NFree7  :=  GetFld('NFree7').AsCurrency;
                NFree8  :=  GetFld('NFree8').AsCurrency;
                NFree9  :=  GetFld('NFree9').AsCurrency;
                NFree10 :=  GetFld('NFree10').AsCurrency;
                DFree1  :=  GetFld('DFree1').AsDateTime;
                DFree2  :=  GetFld('DFree2').AsDateTime;
                DFree3  :=  GetFld('DFree3').AsDateTime;
            end;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

    Result  :=  lvFree;

end;
//↑<244++>

//<MJUP>↓
// *********************************************************************
//	Proccess	:	全ての必要な区分を取得します
//	Parameter	:   なし
//	Return		:	なし
//**********************************************************************
procedure TJNTCRP004001f.fnGetAllKbn();
var
	Qry		: TMQuery;
begin
	// 今はまだ一つですが、画面初期表示時に必要な情報はここでまとめて取得してください。

	m_SELCSTM_TBL.GL06	:= False;
	m_SELCSTM_TBL.GL33	:= False; //<Gali2235>

    Qry	:= TMQuery.Create(Self);

    try
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            Close;
            SQL.Clear;
            SQL.Add('select '
                +   '  isnull((select count(1) Cnt from SELCSTM_TBL where Kbn = ''GL06''),0) as GL06'
                +   ' ,isnull((select count(1) Cnt from SELCSTM_TBL where Kbn = ''GL33''),0) as GL33' //<Gali2235>
                );
            Open;
            if not EOF then
            begin
                m_SELCSTM_TBL.GL06	:= (GetFld('GL06').AsInteger >= 1);
                m_SELCSTM_TBL.GL33	:= (GetFld('GL33').AsInteger >= 1); //<Gali2235>
            end;
        end;
    finally
		Qry.Close;
		Qry.Free;
    end;
end;
//<MJUP>↑
//<256> ADD St
// -----------------------------------------------------------------------------
//  印刷処理【実在取引先登録リスト[簡略型・詳細型]】
// -----------------------------------------------------------------------------
procedure TJNTCRP004001F.fnPrnSETShosaiJ();
var
	DmqMTOKUI       :   TMQuery;
    DmqMTOKUI_SEL   :   TMQuery;
    DmqFusen        :   TMQuery;
    i               :   Integer;
    sCode           :   String;
begin
    // MQueryの構築
	DmqMTOKUI       :=  TMQuery.Create (Self);
    DmqMTOKUI_SEL   :=  TMQuery.Create (Self);
    DmqFusen        :=  TMQuery.Create (Self);
    // DBとMQueryの接続
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqMTOKUI);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqMTOKUI_SEL);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqFusen);
	gfnJNTSELSetDbName(DmqMTOKUI, 		dbCorp_Select);		//<D10>
	gfnJNTSELSetDbName(DmqMTOKUI_SEL, 	dbCorp_Select);		//<D10>
	gfnJNTSELSetDbName(DmqFusen, 		dbCorp_Select);		//<D10>

    if ( MemPtnJitsuzai.Active ) then MemPtnJitsuzai.Close();
    MemPtnJitsuzai.Open();

	with DmqMTOKUI do
	begin
        // -------------------------------------
        //  取引先マスタ MTOKUI
        // -------------------------------------
		Close ();
		SQL.Clear();

        if uvHani.pvrPattern = 0 then
            SQL.Add(KANI_SQL)
        else
    		SQL.Add(SHOSAI_SQL);

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
//<2284>            SQL.Add('  AND  (GCode >= :ExStCode)     ');
//<2284>		    SQL.Add('  AND  (GCode <= :ExEdCode)     ');
            SQL.Add('  AND  (tok.GCode >= :ExStCode)     ');	//<2284>
		    SQL.Add('  AND  (tok.GCode <= :ExEdCode)     ');	//<2284>
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
        end;

        // ﾃﾝﾌﾟﾚｰﾄを出力する
        if ( uvHani.pvrTemplate = TRUE ) then
//<2284>                SQL.Add('   AND (TemplateKbn in (0,1))  ')
//<2284>        else    SQL.Add('   AND (TemplateKbn in (0))    ');
                SQL.Add('   AND (tok.TemplateKbn in (0,1))  ')		//<2284>
        else    SQL.Add('   AND (tok.TemplateKbn in (0))    ');		//<2284>

        // 得意先採用のみ
        if ( uvHani.UseTokui = TRUE  ) and
           ( uvHani.UseSiire = FALSE ) and
           ( uvHani.UseNashi = FALSE ) then
//<2284>                SQL.Add('   AND (HojyoKbn1 = 1)          ')
                SQL.Add('   AND (tok.HojyoKbn1 = 1)          ')		//<2284>
        // 仕入先採用のみ
        else if ( uvHani.UseTokui = FALSE ) and
                ( uvHani.UseSiire = TRUE  ) and
                ( uvHani.UseNashi = FALSE ) then
//<2284>                SQL.Add('   AND (HojyoKbn2 = 1)          ')
                SQL.Add('   AND (tok.HojyoKbn2 = 1)          ')			//<2284>
        // 得意先採用・仕入先採用なし
        else if ( uvHani.UseTokui = FALSE ) and
                ( uvHani.UseSiire = FALSE ) and
                ( uvHani.UseNashi = TRUE  ) then
//<2284>                SQL.Add('   AND (HojyoKbn1 = 0) AND (HojyoKbn2 = 0) ')
                SQL.Add('   AND (tok.HojyoKbn1 = 0) AND (tok.HojyoKbn2 = 0) ')	//<2284>
        // 得意先採用・仕入先採用あり
        else if ( uvHani.UseTokui = TRUE  ) and
                ( uvHani.UseSiire = TRUE  ) and
                ( uvHani.UseNashi = FALSE ) then
//<2284>                SQL.Add('   AND (HojyoKbn1 = 1) AND (HojyoKbn2 = 1) ')
                SQL.Add('   AND (tok.HojyoKbn1 = 1) AND (tok.HojyoKbn2 = 1) ')			//<2284>
        // 得意先採用又は得意先採用・仕入先採用なし
        else if ( uvHani.UseTokui = TRUE  ) and
                ( uvHani.UseSiire = FALSE ) and
                ( uvHani.UseNashi = TRUE  ) then
//<2284>                SQL.Add('   AND (HojyoKbn1 = 1 OR (HojyoKbn1 = 0 AND HojyoKbn2 = 0))    ')
                SQL.Add('   AND (tok.HojyoKbn1 = 1 OR (tok.HojyoKbn1 = 0 AND tok.HojyoKbn2 = 0))    ')	//<2284>
        // 仕入先採用又は得意先採用・仕入先採用なし
        else if ( uvHani.UseTokui = FALSE ) and
                ( uvHani.UseSiire = TRUE  ) and
                ( uvHani.UseNashi = TRUE  ) then
//<2284>                SQL.Add('   AND (HojyoKbn2 = 1 OR (HojyoKbn1 = 0 AND HojyoKbn2 = 0))    ');
                SQL.Add('   AND (tok.HojyoKbn2 = 1 OR (tok.HojyoKbn1 = 0 AND tok.HojyoKbn2 = 0))    ');	//<2284>

        // 出力順序
        if ( uvHani.pvrOrder = 0 ) then
//<2284>                SQL.Add('ORDER BY GCode         ')
//<2284>        else    SQL.Add('ORDER BY Renso, GCode  ');
                SQL.Add('ORDER BY tok.GCode         ')		//<2284>
        else    SQL.Add('ORDER BY tok.Renso, tok.GCode  ');		//<2284>


        // ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqMTOKUI);
			DmqMTOKUI.Close();
			DmqMTOKUI.Free();
            DmqMTOKUI_SEL.Close();
            DmqMTOKUI_SEL.Free();
			DmqFusen.Close();
			DmqFusen.Free();
			Exit;
		end;

        while ( EOF <> TRUE ) do
		begin
			MemPtnJitsuzai.Append();

            // -------------------------------------
            //  付箋(MFusenInfo)
            // -------------------------------------
			DmqFusen.Close();
			DmqFusen.SQL.Clear();
			DmqFusen.SQL.Add('SELECT                        '
                        +    '   FusenKbn                   '   // 付箋区分
			            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
			            +    'WHERE (MasterKbn = 22)        '   // ﾏｽﾀ区分(1:勘定科目)
			            +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                        +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

			DmqFusen.ParamByName('ExNCode').AsString :=  Fields[INDEX_NCODE].AsString;

			// ｴﾗｰの判定
			if ( DmqFusen.Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqFusen);
				DmqMTOKUI.Close();
			    DmqMTOKUI.Free();
                DmqMTOKUI_SEL.Close();
                DmqMTOKUI_SEL.Free();
    			DmqFusen.Close();
    			DmqFusen.Free();
				Exit;
			end;

			if ( DmqFusen.EOF <> TRUE ) then
			begin
                // 付箋区分
				case DmqFusen.Fields[0].AsInteger of  // FusenKbn
					0:	TGraphicField(MemPtnJitsuzaiFusen).Clear;
					1:	TGraphicField(MemPtnJitsuzaiFusen).Assign(Image_Fusen_Red.Picture.Bitmap);
					2:	TGraphicField(MemPtnJitsuzaiFusen).Assign(Image_Fusen_Green.Picture.Bitmap);
					3:	TGraphicField(MemPtnJitsuzaiFusen).Assign(Image_Fusen_Blue.Picture.Bitmap);
					4:	TGraphicField(MemPtnJitsuzaiFusen).Assign(Image_Fusen_Orange.Picture.Bitmap);
				end;
			end;

            // 数値属性
            if ( m_nCurrentCodeAttr = 0 ) then
                sCode   := ComArea.SetDspCodeAttr(Fields[INDEX_GCODE].AsString, m_nCurrentCodeDigit, 0)
            // 数値属性前ｾﾞﾛ有
            else if ( m_nCurrentCodeAttr = 1 ) then
                sCode   := ComArea.SetDspCodeAttr(Fields[INDEX_GCODE].AsString, m_nCurrentCodeDigit, 1)
            // ﾌﾘｰ属性
            else
                sCode   := ComArea.SetDspCodeAttr(Fields[INDEX_GCODE].AsString, m_nCurrentCodeDigit, 2);
            // 外部ｺｰﾄﾞ
			MemPtnJitsuzaiGCode.AsString	    :=  sCode;
            // 得意先区分
            if ( Fields[INDEX_HOJYOKBN1].AsInteger = 1 ) then
            begin
                MemPtnJitsuzaiTSAIYOU.AsString	:=	'○';   //<149>Add
                MemPtnJitsuzaiHojyoKbn.AsString	:=	'得意先';
            end;

            // 仕入先区分
            if ( Fields[INDEX_HOJYOKBN2].AsInteger = 1 ) then
            begin
                MemPtnJitsuzaiSSAIYOU.AsString	:=	'○';   //<149>Add
                if ( Trim(MemPtnJitsuzaiHojyoKbn.AsString) <> '' ) then
                    MemPtnJitsuzaiHojyoKbn.AsString	:=  MemPtnJitsuzaiHojyoKbn.AsString +
                                                                        '／仕入先'
                else
                    MemPtnJitsuzaiHojyoKbn.AsString	:=  '仕入先';
            end;

            if (uvSLicense) then
            begin
                // 資産購入先
                if ( Fields[INDEX_SISANHOJYOKBN1].AsInteger = 1 ) then
                begin
                    MemPtnJitsuzaiSisanHojyoKbn1.AsString	:=	'○';
                    if ( Trim(MemPtnJitsuzaiHojyoKbn.AsString) <> '' ) then
                        MemPtnJitsuzaiHojyoKbn.AsString	:=  MemPtnJitsuzaiHojyoKbn.AsString +
                                                                            '／購入先'
                    else
                        MemPtnJitsuzaiHojyoKbn.AsString	:=  '購入先';
                end;

                // 資産売却先
                if ( Fields[INDEX_SISANHOJYOKBN2].AsInteger = 1 ) then
                begin
                    MemPtnJitsuzaiSisanHojyoKbn2.AsString	:=	'○';
                    if ( Trim(MemPtnJitsuzaiHojyoKbn.AsString) <> '' ) then
                        MemPtnJitsuzaiHojyoKbn.AsString	:=  MemPtnJitsuzaiHojyoKbn.AsString +
                                                                            '／売却先'
                    else
                        MemPtnJitsuzaiHojyoKbn.AsString	:=  '売却先';
                end;

				// リース取引先<195>ST---
				if ( Fields[INDEX_SISANHOJYOKBN3].AsInteger = 1 ) then
                begin
                    MemPtnJitsuzaiSisanHojyoKbn3.AsString	:=	'○';
                    if ( Trim(MemPtnJitsuzaiHojyoKbn.AsString) <> '' ) then
                        MemPtnJitsuzaiHojyoKbn.AsString	:=  MemPtnJitsuzaiHojyoKbn.AsString +
                                                                            '／リース'
                    else
                        MemPtnJitsuzaiHojyoKbn.AsString	:=  'リース';
                end;
				//<195>ED---

            end;

            // 連想
			MemPtnJitsuzaiRenso.AsString			:=	Fields[INDEX_RENSO].AsString;
            // 簡略名称
			MemPtnJitsuzaiNmk.AsString	            :=	Fields[INDEX_NMK].AsString;
		    // 正式名称
            MemPtnJitsuzaiNm.AsString	            :=	Fields[INDEX_NM].AsString;

            // 簡易印刷はここまで
            if uvHani.pvrPattern = 0 then
            begin
                MemPtnJitsuzai.Post();
                Next;
                continue;
            end;

            // 郵便番号(基番)
            if ( not Fields[INDEX_POSTNO1].IsNull      ) and
               ( Fields[INDEX_POSTNO1].AsString <> '0' ) then
                MemPtnJitsuzaiPostNo1.AsString	        :=	Format('%.3d', [Fields[INDEX_POSTNO1].AsInteger]);

            // -------------------------------------
            //  取引先マスタ(販売) MTOKUI_SEL
            // -------------------------------------
            // i=1(得意先) i=2(仕入先)
            for i := 1 to 2 do
            begin
                DmqMTOKUI_SEL.Close();
    			DmqMTOKUI_SEL.SQL.Clear();
    			DmqMTOKUI_SEL.SQL.Add('SELECT                       '
                                 +    '     RZuiSSite               '   // 随時請求回収ｻｲﾄ
                                 +    '    ,RTSEINO                 '   // 特殊請求No
                                 +    '    ,RHolidayKbn             '   // 特殊・随時休日区分
    			                 +    'FROM MTOKUI_SEL              '	// 取引先ﾏｽﾀ(販売)
    			                 +    'WHERE (BaseNCode = :ExNCode) '   // 内部ｺｰﾄﾞ
                                 +    '  AND (RecKbn    = :RecKbn)  '); // ﾚｺｰﾄﾞ区分(1:得意先2:仕入先)

    			DmqMTOKUI_SEL.ParamByName('ExNCode').AsString    :=  Fields[INDEX_NCODE].AsString;
                DmqMTOKUI_SEL.ParamByName('RecKbn') .AsInteger  :=  i;

                // ｴﾗｰの判定
                if ( DmqMTOKUI_SEL.Open = FALSE ) then
                begin
                    ErrorMessageDsp(DmqMTOKUI_SEL);
                    DmqMTOKUI.Close();
                    DmqMTOKUI.Free();
                    DmqMTOKUI_SEL.Close();
                    DmqMTOKUI_SEL.Free();
                    DmqFusen.Close();
                    DmqFusen.Free();
                    Exit;
                end;

                if ( DmqMTOKUI_SEL.EOF <> TRUE ) then
                begin
                    case i of
                        1:
                        begin
                            if ( Fields[INDEX_RENDKAISU].AsInteger = 0 ) and
                               ( Fields[INDEX_HOJYOKBN1].AsInteger = 1 ) then
                            begin
                                // 随時請求回収ｻｲﾄ(得意先)
                                if ( not DmqMTOKUI_SEL.Fields[0].IsNull ) then  // RZuiSSite
                                    MemPtnJitsuzaiTRRZuiSSite.AsInteger     :=
                                        DmqMTOKUI_SEL.Fields[0].AsInteger;  // RZuiSSite
                                // 特殊請求No(得意先)
                                if ( not DmqMTOKUI_SEL.Fields[1].IsNull ) then  // RTSEINO
                                    MemPtnJitsuzaiTRRTSEINO.AsString        :=
                                        DmqMTOKUI_SEL.Fields[1].AsString;  // RTSEINO
                                // 特殊・随時休日区分(得意先)
                                if ( not DmqMTOKUI_SEL.Fields[2].IsNull ) then  // RHolidayKbn
                                begin
                                    MemPtnJitsuzaiTRRHolidayKbn.AsInteger   :=
                                        DmqMTOKUI_SEL.Fields[2].AsInteger;  // RHolidayKbn

                                    // 特殊・随時休日区分名称(得意先)
                                    case DmqMTOKUI_SEL.Fields[2].AsInteger of  // RHolidayKbn
                                        0:  MemPtnJitsuzaiTRRHolidayName.AsString   :=  '翌営業日';
                                        1:  MemPtnJitsuzaiTRRHolidayName.AsString   :=  '前営業日';
                                        2:  MemPtnJitsuzaiTRRHolidayName.AsString   :=  '当日';
                                    end;
                                end;
                            end;
                        end;
                        2:
                        begin
                            if ( Fields[INDEX_PENDKAISU].AsInteger = 0 ) and
                               ( Fields[INDEX_HOJYOKBN2].AsInteger = 1 ) then
                            begin
                                // 随時請求回収ｻｲﾄ(仕入先)
                                if ( not DmqMTOKUI_SEL.Fields[0].IsNull ) then  // RZuiSSite
                                    MemPtnJitsuzaiSRRZuiSSite.AsInteger     :=
                                        DmqMTOKUI_SEL.Fields[0].AsInteger;  // RZuiSSite
                                // 特殊請求No(仕入先)
                                if ( not DmqMTOKUI_SEL.Fields[1].IsNull ) then  // RTSEINO
                                    MemPtnJitsuzaiSRRTSEINO.AsString        :=
                                        DmqMTOKUI_SEL.Fields[1].AsString;  // RTSEINO
                                // 特殊・随時休日区分(仕入先)
                                if ( not DmqMTOKUI_SEL.Fields[2].IsNull ) then  // RHolidayKbn
                                begin
                                    MemPtnJitsuzaiSRRHolidayKbn.AsInteger   :=
                                        DmqMTOKUI_SEL.Fields[2].AsInteger;  // RHolidayKbn

                                    // 特殊・随時休日区分名称(仕入先)
                                    case DmqMTOKUI_SEL.Fields[2].AsInteger of  // RHolidayKbn
                                        0:  MemPtnJitsuzaiSRRHolidayName.AsString   :=  '翌営業日';
                                        1:  MemPtnJitsuzaiSRRHolidayName.AsString   :=  '前営業日';
                                        2:  MemPtnJitsuzaiSRRHolidayName.AsString   :=  '当日';
                                    end;
                                end;
                            end;
                        end;
                    end;
                end;
            end;

			// 郵便番号(枝番)は000-0000以外は出すことにする。
            // 例：000-0001、001-0000 → 枝番は出力する。
            if  ((Fields[INDEX_POSTNO1].IsNull) or (Fields[INDEX_POSTNO1].AsString = '0'))
            and ((Fields[INDEX_POSTNO2].IsNull) or (Fields[INDEX_PostNo2].AsString = '0')) then
            begin
                MemPtnJitsuzaiPostNo2.AsString	        :=	'';
            end
            else
            begin
                MemPtnJitsuzaiPostNo2.AsString	        :=	Format('%.4d',[Fields[INDEX_POSTNO2].AsInteger]);
            end;

            // 住所(上段)
            MemPtnJitsuzaiAds1.AsString	            :=	Fields[INDEX_ADS1].AsString;
            // 住所(下段)
            MemPtnJitsuzaiAds2.AsString	            :=	Fields[INDEX_ADS2].AsString;
            // 代表者役職名
            MemPtnJitsuzaiDHyoNm1.AsString	        :=	Fields[INDEX_DHYONM1].AsString;
            // 代表者名
            MemPtnJitsuzaiDHyoNm2.AsString	        :=	Fields[INDEX_DHYONM2].AsString;
		    // 電話番号1
			MemPtnJitsuzaiTel1.AsString	            :=	Fields[INDEX_TEL1].AsString;
		    // 電話番号2
			MemPtnJitsuzaiTel2.AsString		        :=	Fields[INDEX_TEL2].AsString;
            // FAX番号
			MemPtnJitsuzaiFax1.AsString		        :=	Fields[INDEX_FAX1].AsString;
            // 資本金
            MemPtnJitsuzaiShihonKin.AsString		:=	Fields[INDEX_SHIHONKIN].AsString;
            // 社員数
            MemPtnJitsuzaiSyainSu.AsString		    :=	Fields[INDEX_SYAINSU].AsString;
            // 年商
            MemPtnJitsuzaiNensyo.AsString		    :=	Fields[INDEX_NENSYO].AsString;
//↓<2284>
			// 敬称
			MemPtnJitsuzaiKeisyokbn.AsString		:=	Fields[INDEX_KEISYOKBN].AsString;
			// ﾌﾘｶﾞﾅ
			MemPtnJitsuzaiFkana.AsString			:=  Fields[INDEX_FKANA].AsString;
			// 業種外部ｺｰﾄﾞ
			MemPtnJitsuzaiGyoGcode.AsString			:=	Fields[INDEX_GYOGCODE].AsString;
			// 業種名称
			MemPtnJitsuzaiGyoNMK.AsString			:=	Fields[INDEX_GYONMK].AsString;

//↑<2284>

// <MYN> ins -s 印刷
			MemPtnJitsuzaiMYNHoujinKojinKbnNm.AsString			:=  '';
			MemPtnJitsuzaiMYNHoujinKojinNo.AsString     		:=  '';

			if (Fields[INDEX_HOUJINKBN].Text = MYN_HOUJIN) then	// 法人
			begin
            	MemPtnJitsuzaiMYNHoujinKojinKbnNm.AsString		:=  '法人';		// 法人･個人区分
                if not ((Fields[INDEX_HOUJINNO].IsNull) or
						(Fields[INDEX_HOUJINNO].AsString = '0') or
						(Fields[INDEX_HOUJINNO].AsString = '')) then
	                MemPtnJitsuzaiMYNHoujinKojinNo.AsString		:=	Format('%.13d', [StrToInt64(Fields[INDEX_HOUJINNO].AsString)]);	// 法人･個人番号
			end else
			if (Fields[INDEX_HOUJINKBN].Text = MYN_KOJIN) then	// 個人
			begin
				MemPtnJitsuzaiMYNHoujinKojinKbnNm.AsString		:=  '個人'; 	// 法人･個人区分
                if not ((Fields[INDEX_KOJINKEY].IsNull) or
						(Fields[INDEX_KOJINKEY].AsString = '0') or
						(Fields[INDEX_KOJINKEY].AsString = '')) then
	                MemPtnJitsuzaiMYNHoujinKojinNo.AsString		:=	'個人番号登録済み';	// 法人･個人番号
			end;
// <MYN> ins -e

            // 和暦
            if ( m_iRekiKbn = 0 ) then
            begin
                // 適用期間(開始)
                if Fields[INDEX_TSTARTDATE].AsDateTime = m_cJNTArea.getDefDate(1) then
                	MemPtnJitsuzaiTStartDate.Clear
                else
	                MemPtnJitsuzaiTStartDate.AsString   :=  MjsGetGengou( Fields[INDEX_TSTARTDATE].AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd', Fields[INDEX_TSTARTDATE].AsDateTime );
                // 適用期間(終了)
                if Fields[INDEX_TENDDATE].AsDateTime = m_cJNTArea.getDefDate(2) then
                	MemPtnJitsuzaiTEndDate.Clear
                else
	                MemPtnJitsuzaiTEndDate.AsString		:=	MjsGetGengou( Fields[INDEX_TEndDate].AsDateTime, MdtCMP_YMD )
    	                                                                  + FormatDateTime( 'ee/mm/dd', Fields[INDEX_TENDDATE].AsDateTime );
	            // 更新日
    	        if ( not Fields[INDEX_UPDDATETM].IsNull ) then
//<KaiGG>           MemPtnJitsuzaiUpdDateTM.AsString	:=	MjsGetGengou( Fields[INDEX_TENDDATE].AsDateTime, MdtCMP_YMD )
        	        MemPtnJitsuzaiUpdDateTM.AsString	:=	MjsGetGengou( Fields[INDEX_UPDDATETM].AsDateTime, MdtCMP_YMD )										//<KaiGG>
    	                                                                  + FormatDateTime( 'ee/mm/dd HH:MM:SS', Fields[INDEX_UPDDATETM].AsDateTime );
            end
            // 西暦
            else
            begin
                // 適用期間(開始)
                if Fields[INDEX_TSTARTDATE].AsDateTime = m_cJNTArea.getDefDate(1) then
                	MemPtnJitsuzaiTStartDate.Clear
                else
	                MemPtnJitsuzaiTStartDate.AsString   :=  FormatDateTime( 'yyyy/mm/dd', Fields[INDEX_TSTARTDATE].AsDateTime );
                // 適用期間(終了)
                if Fields[INDEX_TENDDATE].AsDateTime = m_cJNTArea.getDefDate(2) then
                	MemPtnJitsuzaiTEndDate.Clear
                else
	                MemPtnJitsuzaiTEndDate.AsString		:=	FormatDateTime( 'yyyy/mm/dd', Fields[INDEX_TENDDATE].AsDateTime );
	            // 更新日
    	        if ( not Fields[INDEX_UPDDATETM].IsNull ) then
        	        MemPtnJitsuzaiUpdDateTM.AsString	:=	FormatDateTime( 'yyyy/mm/dd HH:MM:SS', Fields[INDEX_UPDDATETM].AsDateTime);
            end;

            // HPｱﾄﾞﾚｽ
            MemPtnJitsuzaiHPAddress.AsString		:=	Fields[INDEX_HPADDRESS].AsString;

            if ( Fields[INDEX_RENDKAISU].AsInteger in [1,2,3] ) then
            begin
                // 入金締日1
                if ( not Fields[INDEX_RCLOSEDAY1].IsNull ) then
                    MemPtnJitsuzaiRCloseDay1.AsInteger	:=
                        Fields[INDEX_RCLOSEDAY1].AsInteger;
                // 入金回収日1
                if ( not Fields[INDEX_RCVDAY1].IsNull ) then
                    MemPtnJitsuzaiRcvDay1.AsInteger		:=
                        Fields[INDEX_RCVDAY1].AsInteger;
                // 入金ｻｲｸﾙ1
                if ( not Fields[INDEX_RCVMONTH1].IsNull ) then
                begin
					if Fields[INDEX_RCVMONTH1].AsInteger = 0 then
						MemPtnJitsuzaiRcvMonth1Name.AsString    := '当月'
					else if Fields[INDEX_RCVMONTH1].AsInteger = 1 then
						MemPtnJitsuzaiRcvMonth1Name.AsString    := '翌月'
					else if Fields[INDEX_RCVMONTH1].AsInteger = 2 then
						MemPtnJitsuzaiRcvMonth1Name.AsString    := '翌々月'
					else
					begin
						MemPtnJitsuzaiRcvMonth1.AsInteger	    :=
							Fields[INDEX_RCVMONTH1].AsInteger;
						MemPtnJitsuzaiRcvMonth1Name.AsString    :=
							IntToStr(Fields[INDEX_RCVMONTH1].AsInteger) + 'ヶ月後';
					end;
                end;
                // 入金休日区分1
                if ( not Fields[INDEX_RHOLIDAYKBN1].IsNull ) then
                begin
                    MemPtnJitsuzaiRHolidayKbn1.AsInteger	:=
                        Fields[INDEX_RHOLIDAYKBN1].AsInteger;

                    case MemPtnJitsuzaiRHolidayKbn1.AsInteger of
                        0:  MemPtnJitsuzaiRHolidayKbn1Name.AsString :=  '翌営業日';
                        1:  MemPtnJitsuzaiRHolidayKbn1Name.AsString :=  '前営業日';
                        2:  MemPtnJitsuzaiRHolidayKbn1Name.AsString :=  '当日';
                    end;
                end;
            end;

            if ( Fields[INDEX_RENDKAISU].AsInteger in [2,3] ) then
            begin
                // 入金締日2
                if ( not Fields[INDEX_RCLOSEDAY2].IsNull ) then
                MemPtnJitsuzaiRCloseDay2.AsInteger	:=
                    Fields[INDEX_RCLOSEDAY2].AsInteger;
                // 入金回収日2
                if ( not Fields[INDEX_RCVDAY2].IsNull ) then
                    MemPtnJitsuzaiRcvDay2.AsInteger :=
                        Fields[INDEX_RCVDAY2].AsInteger;
                // 入金ｻｲｸﾙ2
                if ( not Fields[INDEX_RCVMONTH2].IsNull ) then
                begin
					if Fields[INDEX_RCVMONTH2].AsInteger = 0 then
						MemPtnJitsuzaiRcvMonth2Name.AsString    := '当月'
					else if Fields[INDEX_RCVMONTH2].AsInteger = 1 then
						MemPtnJitsuzaiRcvMonth2Name.AsString    := '翌月'
					else if Fields[INDEX_RCVMONTH2].AsInteger = 2 then
						MemPtnJitsuzaiRcvMonth2Name.AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzaiRcvMonth2.AsInteger	    :=
	                        Fields[INDEX_RCVMONTH2].AsInteger;
	                    MemPtnJitsuzaiRcvMonth2Name.AsString    :=
	                        IntToStr(Fields[INDEX_RCVMONTH2].AsInteger) + 'ヶ月後';
					end;
                end;
                // 入金休日区分2
                if ( not Fields[INDEX_RHOLIDAYKBN2].IsNull ) then
                begin
                    MemPtnJitsuzaiRHolidayKbn2.AsInteger	:=
                        Fields[INDEX_RHOLIDAYKBN2].AsInteger;

                    case MemPtnJitsuzaiRHolidayKbn2.AsInteger of
                        0:  MemPtnJitsuzaiRHolidayKbn2Name.AsString :=  '翌営業日';
                        1:  MemPtnJitsuzaiRHolidayKbn2Name.AsString :=  '前営業日';
                        2:  MemPtnJitsuzaiRHolidayKbn2Name.AsString :=  '当日';
                    end;
                end;
            end;

            if ( Fields[INDEX_RENDKAISU].AsInteger in [3] ) then
            begin
                // 入金締日3
                if ( not Fields[INDEX_RCLOSEDAY3].IsNull ) then
                    MemPtnJitsuzaiRCloseDay3.AsInteger	:=
                        Fields[INDEX_RCLOSEDAY3].AsInteger;
                // 入金回収日3
                if ( not Fields[INDEX_RCVDAY3].IsNull ) then
                    MemPtnJitsuzaiRcvDay3.AsInteger	    :=
                        Fields[INDEX_RCVDAY3].AsInteger;
                // 入金ｻｲｸﾙ3
                if ( not Fields[INDEX_RCVMONTH3].IsNull ) then
                begin
					if Fields[INDEX_RCVMONTH3].AsInteger = 0 then
						MemPtnJitsuzaiRcvMonth3Name.AsString    := '当月'
					else if Fields[INDEX_RCVMONTH3].AsInteger = 1 then
						MemPtnJitsuzaiRcvMonth3Name.AsString    := '翌月'
					else if Fields[INDEX_RCVMONTH3].AsInteger = 2 then
						MemPtnJitsuzaiRcvMonth3Name.AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzaiRcvMonth3.AsInteger	    :=
	                        Fields[INDEX_RCVMONTH3].AsInteger;
	                    MemPtnJitsuzaiRcvMonth3Name.AsString    :=
	                        IntToStr(Fields[INDEX_RCVMONTH3].AsInteger) + 'ヶ月後';
					end;
                end;
                // 入金休日区分3
                if ( not Fields[INDEX_RHOLIDAYKBN3].IsNull ) then
                begin
                    MemPtnJitsuzaiRHolidayKbn3.AsInteger	:=
                        Fields[INDEX_RHOLIDAYKBN3].AsInteger;

                    case MemPtnJitsuzaiRHolidayKbn3.AsInteger of
                        0:  MemPtnJitsuzaiRHolidayKbn3Name.AsString :=  '翌営業日';
                        1:  MemPtnJitsuzaiRHolidayKbn3Name.AsString :=  '前営業日';
                        2:  MemPtnJitsuzaiRHolidayKbn3Name.AsString :=  '当日';
                    end;
                end;
            end;

            if ( Fields[INDEX_PENDKAISU].AsInteger in [1,2,3] ) then
            begin
                // 支払締日1
                if ( not Fields[INDEX_PCLOSEDAY1].IsNull ) then
                    MemPtnJitsuzaiPCloseDay1.AsInteger		:=
                        Fields[INDEX_PCLOSEDAY1].AsInteger;
                // 支払回収日1
                if ( not Fields[INDEX_PAYDAY1].IsNull ) then
                    MemPtnJitsuzaiPayDay1.AsInteger		    :=
                        Fields[INDEX_PAYDAY1].AsInteger;
                // 支払ｻｲｸﾙ1
                if ( not Fields[INDEX_PAYMONTH1].IsNull ) then
                begin
					if Fields[INDEX_PAYMONTH1].AsInteger = 0 then
						MemPtnJitsuzaiPayMonth1Name.AsString    := '当月'
					else if Fields[INDEX_PAYMONTH1].AsInteger = 1 then
						MemPtnJitsuzaiPayMonth1Name.AsString    := '翌月'
					else if Fields[INDEX_PAYMONTH1].AsInteger = 2 then
						MemPtnJitsuzaiPayMonth1Name.AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzaiPayMonth1.AsInteger	    :=
	                        Fields[INDEX_PAYMONTH1].AsInteger;
	                    MemPtnJitsuzaiPayMonth1Name.AsString    :=
	                        IntToStr(Fields[INDEX_PAYMONTH1].AsInteger) + 'ヶ月後';
					end;
                end;
                // 支払休日区分1
                if ( not Fields[INDEX_PHOLIDAYKBN1].IsNull ) then
                begin
                    MemPtnJitsuzaiPHolidayKbn1.AsInteger	:=
                        Fields[INDEX_PHOLIDAYKBN1].AsInteger;

                    case MemPtnJitsuzaiPHolidayKbn1.AsInteger of
                        0:  MemPtnJitsuzaiPHolidayKbn1Name.AsString :=  '翌営業日';
                        1:  MemPtnJitsuzaiPHolidayKbn1Name.AsString :=  '前営業日';
                        2:  MemPtnJitsuzaiPHolidayKbn1Name.AsString :=  '当日';
                    end;
                end;
            end;

            if ( Fields[INDEX_PENDKAISU].AsInteger in [2,3] ) then
            begin
                // 支払締日2
                if ( not Fields[INDEX_PCLOSEDAY2].IsNull ) then
                    MemPtnJitsuzaiPCloseDay2.AsInteger		:=
                        Fields[INDEX_PCLOSEDAY2].AsInteger;
                // 支払回収日2
                if ( not Fields[INDEX_PAYDAY2].IsNull ) then
                    MemPtnJitsuzaiPayDay2.AsInteger		    :=
                        Fields[INDEX_PAYDAY2].AsInteger;
                // 支払ｻｲｸﾙ2
                if ( not Fields[INDEX_PAYMONTH2].IsNull ) then
                begin
					if Fields[INDEX_PAYMONTH2].AsInteger = 0 then
						MemPtnJitsuzaiPayMonth2Name.AsString    := '当月'
					else if Fields[INDEX_PAYMONTH2].AsInteger = 1 then
						MemPtnJitsuzaiPayMonth2Name.AsString    := '翌月'
					else if Fields[INDEX_PAYMONTH2].AsInteger = 2 then
						MemPtnJitsuzaiPayMonth2Name.AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzaiPayMonth2.AsInteger	    :=
	                        Fields[INDEX_PAYMONTH2].AsInteger;
    	                MemPtnJitsuzaiPayMonth2Name.AsString    :=
        	                IntToStr(Fields[INDEX_PAYMONTH2].AsInteger) + 'ヶ月後';
					end;
                end;
                // 支払休日区分2
                if ( not Fields[INDEX_PHOLIDAYKBN2].IsNull ) then
                begin
                    MemPtnJitsuzaiPHolidayKbn2.AsInteger	:=
                        Fields[INDEX_PHOLIDAYKBN2].AsInteger;

                    case MemPtnJitsuzaiPHolidayKbn2.AsInteger of
                        0:  MemPtnJitsuzaiPHolidayKbn2Name.AsString :=  '翌営業日';
                        1:  MemPtnJitsuzaiPHolidayKbn2Name.AsString :=  '前営業日';
                        2:  MemPtnJitsuzaiPHolidayKbn2Name.AsString :=  '当日';
                    end;
                end;
            end;

            if ( Fields[INDEX_PENDKAISU].AsInteger in [3] ) then
            begin
                // 支払締日3
                if ( not Fields[INDEX_PCLOSEDAY3].IsNull ) then
                    MemPtnJitsuzaiPCloseDay3.AsInteger		:=
                        Fields[INDEX_PCLOSEDAY3].AsInteger;
                // 支払回収日3
                if ( not Fields[INDEX_PAYDAY3].IsNull ) then
                    MemPtnJitsuzaiPayDay3.AsInteger		    :=
                        Fields[INDEX_PAYDAY3].AsInteger;
                // 支払ｻｲｸﾙ3
                if ( not Fields[INDEX_PAYMONTH3].IsNull ) then
                begin
					if Fields[INDEX_PAYMONTH3].AsInteger = 0 then
						MemPtnJitsuzaiPayMonth3Name.AsString    := '当月'
					else if Fields[INDEX_PAYMONTH3].AsInteger = 1 then
						MemPtnJitsuzaiPayMonth3Name.AsString    := '翌月'
					else if Fields[INDEX_PAYMONTH3].AsInteger = 2 then
						MemPtnJitsuzaiPayMonth3Name.AsString    := '翌々月'
					else
					begin
	                    MemPtnJitsuzaiPayMonth3.AsInteger	    :=
	                        Fields[INDEX_PAYMONTH3].AsInteger;
	                    MemPtnJitsuzaiPayMonth3Name.AsString    :=
	                        IntToStr(Fields[INDEX_PAYMONTH3].AsInteger) + 'ヶ月後';
					end;
                end;
                // 支払休日区分3
                if ( not Fields[INDEX_PHOLIDAYKBN3].IsNull ) then
                begin
                    MemPtnJitsuzaiPHolidayKbn3.AsInteger	:=
                        Fields[INDEX_PHOLIDAYKBN3].AsInteger;

                    case MemPtnJitsuzaiPHolidayKbn3.AsInteger of
                        0:  MemPtnJitsuzaiPHolidayKbn3Name.AsString :=  '翌営業日';
                        1:  MemPtnJitsuzaiPHolidayKbn3Name.AsString :=  '前営業日';
                        2:  MemPtnJitsuzaiPHolidayKbn3Name.AsString :=  '当日';
                    end;
                end;
            end;

            MemPtnJitsuzai.Post();
            Next;
        end;
	end;

    DmqMTOKUI.Close();
	DmqMTOKUI.Free();
    DmqMTOKUI_SEL.Close();
	DmqMTOKUI_SEL.Free();
	DmqFusen.Close();
	DmqFusen.Free();
end;

// -----------------------------------------------------------------------------
//  印刷処理【合計取引先登録リスト】
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnPrintCheckListTtlStandard ();
var
	dqMasterData    :   TMQuery;
	strExCode	    :   String;
	strFormat	    :   String;
begin

	dqMasterData	:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);
	gfnJNTSELSetDbName(dqMasterData, dbCorp_Select);		//<D10>

    MemPtnGoukei.Close();
	MemPtnGoukei.Open();

	with dqMasterData do
	begin
		Close();
		SQL.Clear();
        SQL.Add(GOUKEI_SQL);

        // ｺｰﾄﾞの範囲指定
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            SQL.Add('  AND  (m.GCode >= :ExStCode)  ');
		    SQL.Add('  AND  (m.GCode <= :ExEdCode)  ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
        end;

        // 出力順序
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY m.GCode           ')
        else    SQL.Add('ORDER BY m.Renso, m.GCode  ');

        //	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(dqMasterData);
			dqMasterData.Close();
			dqMasterData.Free();
            Exit;
		end;

		while  (not EOF) do
		begin
			MemPtnGoukei.Append();

			strExCode	:= Fields[G_INDEX_GCODE].AsString;

			if ( m_nCurrentCodeAttr <= 1 ) then
			begin
				case (m_nCurrentCodeAttr) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
				end;
				strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
			end;

            // 付箋区分
			case Fields[G_INDEX_FUSENKBN].AsInteger of
				0:	TGraphicField(MemPtnGoukeigrTag).Clear;
				1:	TGraphicField(MemPtnGoukeigrTag).Assign(Image_Fusen_Red.Picture.Bitmap);
				2:	TGraphicField(MemPtnGoukeigrTag).Assign(Image_Fusen_Green.Picture.Bitmap);
				3:	TGraphicField(MemPtnGoukeigrTag).Assign(Image_Fusen_Blue.Picture.Bitmap);
				4:	TGraphicField(MemPtnGoukeigrTag).Assign(Image_Fusen_Orange.Picture.Bitmap);
			end;

            // 取引先ｺｰﾄﾞ
			MemPtnGoukeistrExCode       .AsString	:=  strExCode;
            // 連想
			MemPtnGoukeistrAssociation  .AsString	:=  Fields[G_INDEX_RENSO]    .AsString;
            // 正式名称
			MemPtnGoukeistrName         .AsString	:=  Fields[G_INDEX_NM]       .AsString;
            // 簡略名称
			MemPtnGoukeistrNameSimple   .AsString	:=  Fields[G_INDEX_NMK]      .AsString;

            // 郵便番号(基番、枝番)
            if	((Fields[G_INDEX_POSTNO1].AsInteger = 0) and
                 (Fields[G_INDEX_POSTNO2].AsInteger = 0)) then
            begin
                MemPtnGoukeinZipCodeUpper.Clear ();
                MemPtnGoukeinZipCodeLower.Clear ();
            end
            else
            begin
                MemPtnGoukeinZipCodeUpper.AsInteger :=  Fields[G_INDEX_POSTNO1]  .AsInteger;
                MemPtnGoukeinZipCodeLower.AsInteger	:=  Fields[G_INDEX_POSTNO2]  .AsInteger;
            end;
            // 住所１
            MemPtnGoukeistrAddress.AsString	:=  Fields[G_INDEX_ADS1]          .AsString;

            // 得意先、仕入先、購入先、売却先区分
            if ( Fields[G_INDEX_HOJYOKBN1].AsInteger = 1 ) then
                MemPtnGoukei.FieldByName('TSAIYOU').AsString	:=	'○';
            if ( Fields[G_INDEX_HOJYOKBN2].AsInteger = 1 ) then
                MemPtnGoukei.FieldByName('SSAIYOU').AsString	:=	'○';

            // 資産ﾗｲｾﾝｽﾁｪｯｸ
            if (uvSLicense) then
            begin
                if ( Fields[G_INDEX_SISANHOJYOKBN1].AsInteger = 1 ) then
                    MemPtnGoukei.FieldByName('KSAIYOU').AsString	:=	'○';
                if ( Fields[G_INDEX_SISANHOJYOKBN2].AsInteger = 1 ) then
                    MemPtnGoukei.FieldByName('BSAIYOU').AsString	:=	'○';

				if ( Fields[G_INDEX_SISANHOJYOKBN3].AsInteger = 1 ) then
                    MemPtnGoukei.FieldByName('RSAIYOU').AsString	:=	'○';

            end;

			MemPtnGoukei.Post();

			Next;
		end;
	end;

    MemPtnGoukei.First;

    dqMasterData.Close();
    dqMasterData.Free();

end;

// -----------------------------------------------------------------------------
//  印刷処理【取引先加算登録リスト】
// -----------------------------------------------------------------------------
procedure	TJNTCRP004001f.fnPrintCheckListSystem();
var
	dqMasterData: TMQuery;
	strExCode	: String;
	strFormat	: String;
begin

	dqMasterData	:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);
	gfnJNTSELSetDbName(dqMasterData, dbCorp_Select);		//<D10>

    MemPtnKasan.Close();
	MemPtnKasan.Open();

	with dqMasterData do
	begin
		Close ();
		SQL.Clear();
        SQL.Add(KASAN_SQL);

        // ｺｰﾄﾞの範囲指定  <KSN_PRN>
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            SQL.Add('  AND  (GCode >= :ExStCode)  ');
		    SQL.Add('  AND  (GCode <= :ExEdCode)  ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
        end;

        // 順序指定  <KSN_PRN>
        SQL.Add('ORDER BY GCode  ');



		Open ();

		while  (not EOF) do
		begin
			strExCode	:= Fields[KASAN_INDEX_GCODE].AsString;

			if	(m_nCurrentCodeAttr <= 1) then
			begin
				case (m_nCurrentCodeAttr) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
				end;

				strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
			end;

            m_stPrintDstData.strExNCode     := Fields[KASAN_INDEX_NCODE]      .AsFloat;
			m_stPrintDstData.strExCode		:= strExCode;
			m_stPrintDstData.strAssociation	:= Fields[KASAN_INDEX_RENSO]     .AsString;
			m_stPrintDstData.strName		:= Fields[KASAN_INDEX_NM]        .AsString;
			m_stPrintDstData.strNameSimple	:= Fields[KASAN_INDEX_NMK]       .AsString;

			fnSetSystemRecords();

			NEXT;
		end;

		Close ();
	end;

	dqMasterData.Free ();

end;

// -----------------------------------------------------------------------------
//  印刷処理【取引先加算登録リスト】
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnSetSystemRecords ();
var
	dqMasterData: TMQuery;
	nRecords	: Integer;

begin
	dqMasterData	:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery (dbCorp_Select, dqMasterData);
	gfnJNTSELSetDbName(dqMasterData, dbCorp_Select);		//<D10>

	nRecords	:= 0;

    with dqMasterData do
    begin
		Close ();
		SQL.Clear();
		SQL.Add(KASAN_SQL2);

        ParamByName ('strExCodeDst'   ).AsString 	:= FormatFloat('0',m_stPrintDstData.strExNCode);
		Open();

		while (not EOF) do
		begin
			fnSetSystemRecord (dqMasterData);
			nRecords	:= nRecords + 1;
			Next;
		end;
    end;

	if	(nRecords = 0) then
	begin
		MemPtnKasan.Append();
		MemPtnKasanstrExCodeDst     .AsString   :=  m_stPrintDstData.strExCode;
		MemPtnKasanstrNameSimpleDst .AsString	:=  m_stPrintDstData.strNameSimple;
		MemPtnKasan.Post();
	end;

    MemPtnKasan.First();

    dqMasterData.Close();
	dqMasterData.Free();

end;

// -----------------------------------------------------------------------------
//  印刷処理【取引先加算登録リスト】
// -----------------------------------------------------------------------------
procedure	TJNTCRP004001f.fnSetSystemRecord(dqMasterData: TMQuery);
var
    strExCode   :   String;
	strFormat   :   String;
begin

	with dqMasterData do
	begin
		strExCode	:= GetFld ('GCode').AsString;

		if	( m_nCurrentCodeAttr <= 1 ) then
		begin
			case (m_nCurrentCodeAttr) of
				0:	strFormat	:= '%'  + IntToStr (m_nCurrentCodeDigit) + 'd';
				1:	strFormat	:= '%.' + IntToStr (m_nCurrentCodeDigit) + 'd';
			end;
			strExCode	:= Format (strFormat, [StrToInt64 (Trim (strExCode))]);
		end;

		MemPtnKasan.Append();
		MemPtnKasan.FieldByName ('strExCodeDst')    .AsString	:= m_stPrintDstData.strExCode;
		MemPtnKasan.FieldByName ('strNameSimpleDst').AsString	:= m_stPrintDstData.strNameSimple;
		MemPtnKasan.FieldByName ('strExCodeSrc')    .AsString	:= strExCode;
		MemPtnKasan.FieldByName ('strNameSimpleSrc').AsString	:= GetFld('Nmk').AsString;
		MemPtnKasan.Post();
	end;

end;

// -----------------------------------------------------------------------------
//  詳細モードならTrueを返す
// -----------------------------------------------------------------------------
function	TJNTCRP004001f.IsSyosaiMode():Boolean;
begin
    result := False;
    if B_Syousai.Caption = '詳細(&T)' then Exit;
    result := True;
end;
//<256> ADD Ed
//↓<2226>
//----------------------------------------------------------------
//  MTOKUI_xxxにMTOKUIの住所関係をコピーする
//  変更のﾁｪｯｸをせずに強制的にupdate文を流す点でlfnUpdAddressと異なります
//----------------------------------------------------------------
Function	TJNTCRP004001f.fnforcedlyUpdAddress(pTBL:string;pKBN:Integer=0):Boolean;
var
  QryUpdAds  : TMQuery;
  AddressRec : TAddressRec;
begin
  QryUpdAds := TMQuery.Create(Self);					    // MQueryの構築
  if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
//<D10>	MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, QryUpdAds)
		gfnJNTSELSetDbName(QryUpdAds, m_SyncMaster.m_cPDBSelect)		//<D10>
  else
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QryUpdAds);
		gfnJNTSELSetDbName(QryUpdAds, dbCorp_Select);		//<D10>

  Result := False;

  try
      try
          with QryUpdAds do
          begin
              // update文の組み立て
              SQL.Add('update ' + pTBL + ' set BaseNCode = BaseNCode');

              SQL.Add(', PostNo1 = :PostNo1');
              SQL.Add(', PostNo2 = :PostNo2');
              SQL.Add(', Ads1 = :Ads1');
              SQL.Add(', Ads2 = :Ads2');
              SQL.Add(', Tel1 = :Tel1');
              SQL.Add(', Tel2 = :Tel2');
              SQL.Add(', Fax1 = :Fax1');

              SQL.Add(' where (BaseNCode = :BaseNCode) ');
              if (pTBL = 'MTOKUI_SEL') then
              begin
                  SQL.Add(' and (RecKbn = :KBN)');
                  ParamByName('KBN').AsInteger := pKBN;
              end;

//↓<2226-1>
			  if B_Syousai.Caption = '詳細(&T)' then		//一覧の時
			  begin
                  // fnDataReadで保存しておいたMTOKUIの情報をバインド変数にセット
                  ParamByName('BaseNCode').AsString := FormatFloat('0',uvNCODE);
                  ParamByName('PostNo1').AsInteger	:= m_AddressRec.PostNo1;
                  ParamByName('PostNo2').AsInteger	:= m_AddressRec.PostNo2;
                  ParamByName('Ads1').AsString		:= m_AddressRec.Ads1;
                  ParamByName('Ads2').AsString		:= m_AddressRec.Ads2;
                  ParamByName('Tel1').AsString		:= m_AddressRec.Tel1;
                  ParamByName('Tel2').AsString		:= m_AddressRec.Tel2 ;
                  ParamByName('Fax1').AsString		:= m_AddressRec.Fax1;
			  end
			  else// 詳細型の時は画面に入力された情報をバインド変数にセット
			  begin
                  ParamByName('BaseNCode').AsString := FormatFloat('0',uvNCODE);
                  ParamByName('PostNo1').AsInteger	:= f0ZipCode1.AsInteger;
                  ParamByName('PostNo2').AsInteger	:= f0ZipCode2.AsInteger;
                  ParamByName('Ads1').AsString		:= f0Address1.Text;
                  ParamByName('Ads2').AsString		:= f0Address2.Text;
                  ParamByName('Tel1').AsString		:= f0TelNo.Text;
                  ParamByName('Tel2').AsString		:= f0TelNo2.Text;
                  ParamByName('Fax1').AsString		:= f0FAX.Text;
			  end;
//↑<2226-1>

              if not ExecSQL then raise Exception.Create('');
          end;
          Result := True;
      except
          Exit;
      end;
  finally
      QryUpdAds.Close;
      QryUpdAds.Free;
  end;
end;
//↑<2226>

//↓<Gali2235>
//**************************************************************************
//	Proccess  :
//	Name	  :
//	Parameter :
//	Retrun	  :
//**************************************************************************
procedure TJNTCRP004001f.WMImportWF(var msg: TMessage);
begin
	fnImportWF();
end;
//↑<Gali2235>
//<KSN> ADD St
// -----------------------------------------------------------------------------
//  ダイアログ表示
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.ShowDLG(Mode:Integer;var iRet:Integer);
var
	JNTCRP004001MSG: TJNTCRP004001MsgDlgf;
    // -----------------------------------------------------------------------------
    //  起動確認
    // -----------------------------------------------------------------------------
    procedure SHOW_START();
    var
        sCount : String;
    begin
        sCount := FormatFloat('#,##0',LIMIT_COUNT);
        try
            JNTCRP004001MSG := TJNTCRP004001MsgDlgf.fnCreateDialog(self,m_pMyAppRecord,DLG_START);

            if JNTCRP004001MSG <> nil then
            begin
                JNTCRP004001MSG.MMessage.Lines.Add(Format(INFO_MSG,[MasterInfo_DMemDataJHojyoName.AsString,sCount]));

                iRet := JNTCRP004001MSG.ShowModal();

                // DLG_INFOの更新
                if (JNTCRP004001MSG.chkDLGInfo.Checked) then m_APGFILE.SetValue(INFO,'1')     // 次回以降は問い合わせない
                else                                         m_APGFILE.SetValue(INFO,'0');    // 毎回問い合わせる
            end;
        finally
            JNTCRP004001MSG.Release;
            JNTCRP004001MSG := nil;
        end;
    end;

    // -----------------------------------------------------------------------------
    //  並び替え
    // -----------------------------------------------------------------------------
    procedure SHOW_SORT();
    begin
        try
            JNTCRP004001MSG := TJNTCRP004001MsgDlgf.fnCreateDialog(self,m_pMyAppRecord,DLG_SORT);

            if JNTCRP004001MSG <> nil then
            begin
                JNTCRP004001MSG.MMessage.Lines.Add(Format(INFO_SORTMSG,[MemKasanSimpleName.AsString]));
                iRet := JNTCRP004001MSG.ShowModal();
            end;
        finally
            JNTCRP004001MSG.Release;
            JNTCRP004001MSG := nil;
            Self.Refresh;  // 並び替え中にダイアログを残さないように再描画
        end;
    end;
begin

    if Mode = DLG_START then SHOW_START()
    else if Mode = DLG_SORT then SHOW_SORT();

end;
// -----------------------------------------------------------------------------
//  取引先の登録件数を返す
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_Count(SumKbn:Integer=-1):Integer;
var
    Qry : TMQuery;
begin
    result := 0;
    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('select Count(NCode) as Kensu from MTOKUI');
            SQL.Add('where  RDelKbn = 0');
            SQL.Add(' and   TemplateKbn = 0');
            if SumKbn <> -1 then
            begin
                SQL.Add(' and SumKbn = :SumKbn');
                SetFld('SumKbn').AsInteger := SumKbn;
            end;

            if not Open() then
            begin
        		MjsMessageBox(Self,'登録件数の取得に失敗しました。', mjError, mjDefOk);
                Exit;
            end;

            if not EOF then
                result := GetFld('Kensu').AsInteger;

        end;
    finally
        QueryDispose(Qry);
    end;
end;
// -----------------------------------------------------------------------------
//  合計取引先取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_GetGoukei():TMQuery;
var
    Qry : TMQuery;
begin
    Qry := fnMTokui_Get(1);
    result := Qry;
end;

// -----------------------------------------------------------------------------
//  実在取引先取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_GetJitsuzai():TMQuery;
var
    Qry : TMQuery;
begin
    Qry := fnMTokui_Get(0);
    result := Qry;
end;

// -----------------------------------------------------------------------------
//  取引先マスタ取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_Get(iSumKbn:integer):TMQuery;
var
    Qry : TMQuery;
begin
    result := nil;
    Qry	:= TMQuery.Create(Self);

//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    with Qry do
    begin
        SQL.Clear();
        SQL.Add('Select ');
        SQL.Add('      MA.GCode ');
        SQL.Add('      ,MA.SumKbn ');
        SQL.Add('      ,MA.NM As LongName ');
        SQL.Add('      ,MA.NMK As SimpleName ');
        SQL.Add('      ,MA.NCode ');
        SQL.Add('      ,FI.FusenKbn ');
        SQL.Add('      ,FI.FusenCmnt ');
        SQL.Add('from MTOKUI MA');
        SQL.Add('Left Outer Join MFusenInfo FI On MA.NCode = FI.NCode and FI.MasterKbn = :pMKBN');
        SQL.Add('where MA.RDelKbn = 0 and MA.SumKbn =:SUM');
        SQL.Add(' and  TemplateKbn=0');
        SQL.ADD('ORDER BY GCode');

        SetFld('SUM').AsInteger := iSumKbn;
        SetFld('pMKBN').AsInteger := ucTORIHIKI;

        if not Open() then
        begin
            ErrorMessageDsp(Qry);
            Exit;
        end;
    end;

    result := Qry;

end;

// -----------------------------------------------------------------------------
//  受け取った引数を取引先の属性・桁数に従い編集して返却する
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_CodeEdit(sGCode:String):String;
var
    iAttr,
    iDigit : integer;
    wkCode : String;
begin
    wkCode := '';
    iAttr := MasterInfo_DMemDataCodeAttr.AsInteger;
    iDigit := MasterInfo_DMemDataCodeDigit.AsInteger;

    if sGCode <> '' then
    begin
        if iAttr <> 2 then
        begin
            if iAttr = 1 then wkCode := Format ('%.'+IntToStr(iDigit)+'d', [StrToInt64(Trim(sGCode))])
            else              wkCode := FloatToStr(StrToFloat(Trim(sGCode)));

        end
        else
            wkCode := sGCode;
    end;

    result := wkCode;
end;

// -----------------------------------------------------------------------------
//  MTokuiデータの取得(外部コード検索)
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_GetData(GCode:String):TMTokui;
var
    MTokui : TMTokui;
    wkGCode : String;
begin
//<KSN4> ADD St
    if GCode = '' then
    begin
        result := nil;
        Exit;
    end;
//<KSN4> ADD Ed
    // 外部コードをDB用に編集
    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
    begin
        wkGCode := Format('%.'+IntToStr(GCODE_LENGTH)+'d', [StrToInt64Def(GCode,0)]);
    end
    else
        wkGCode := Trim(GCode);

    MTokui := fnMTokui_Get(wkGCode,0);
    result := MTokui;
end;

// -----------------------------------------------------------------------------
//  MTokuiデータの取得(内部コード検索)
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_GetData(NCode:Extended):TMTokui;
var
    MTokui : TMTokui;
begin
    MTokui := fnMTokui_Get('',NCode);
    result := MTokui;
end;

// -----------------------------------------------------------------------------
//  MTokuiデータの取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMTokui_Get(GCode:String;NCode:Extended):TMTokui;
var
    Qry : TMQuery;
    MTokui : TMTokui;
    wkCode : String;
begin

    MTokui := nil;
    if GCode <> '' then
    begin
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            wkCode := GCode
        else
            wkCode := Format ('%.' + IntToStr(GCODE_LENGTH)+'d', [StrToInt64(GCode)]);
    end;

    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            SQL.Clear;
            if GCode <> '' then
            begin
                SQL.Add('Select * From MTokui Where GCode = :GCode and RDelKbn = 0');
                SetFld('GCode').AsString := wkCode;
            end
            else
            begin
                SQL.Add('Select * From MTokui Where NCode = :NCode and RDelKbn = 0');
                SetFld('NCode').AsString := FormatFloat('0',NCode);
            end;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                result := nil;
                Exit;
            end;

            if EOF = False then
            begin
                MTokui := TMTokui.Create;

                MTokui.GCode := GetFld('GCode').AsString;
                MTokui.NCode := GetFld('NCode').AsFloat;
                MTokui.Nm := GetFld('Nm').AsString;
                MTokui.Nmk := GetFld('Nmk').AsString;
                MTokui.SumKbn := GetFld('SumKbn').AsInteger;
                MTokui.SyokuchiKbn := GetFld('SyokuchiKbn').AsInteger;
                // その他のカラムは当面必要なさそうなので、ここでセットを終わる

            end;
        end;

        result := MTokui;
    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  加算(親)取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_GetParent(BasedNCode:Extended;iOrder:Integer=0):TMQuery;
var
    Qry : TMQuery;
begin
//    result := nil;
    Qry := fnKasan_Get(BasedNCode,1,iOrder);
    result := Qry;
end;

// -----------------------------------------------------------------------------
//  加算(子)取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_GetChild(SumNCode:Extended;iOrder:Integer=0):TMQuery;
var
    Qry : TMQuery;
begin
//    result := nil;
    Qry := fnKasan_Get(SumNCode,0,iOrder);
    result := Qry;
end;

// -----------------------------------------------------------------------------
//  加算先マスタ取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_Get(iNCode:Extended;iSumKbn:Integer;iOrder:Integer=0):TMQuery;
const
    sParent : array[0..2] of String = ('TR.SumNCode','TR.BasedNCode','And MA.SumKbn =1');
    sChild : array[0..2] of String = ('TR.BasedNCode','TR.SumNCode','');
var
    Qry : TMQuery;
begin
    result := nil;
    Qry	:= TMQuery.Create(Self);

//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
	gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    with Qry do
    begin
        SQL.Clear();
        SQL.Add('Select ');
        SQL.Add('      MA.GCode ');
        SQL.Add('      ,MA.SumKbn ');
        SQL.Add('      ,MA.NM As LongName ');
        SQL.Add('      ,MA.NMK As SimpleName ');
        SQL.Add('      ,MA.NCode ');
        SQL.Add('      ,TR.PatternNo ');
        SQL.Add('      ,TR.SumNCode ');
        SQL.Add('      ,TR.EntNo ');
        SQL.Add('      ,TR.AddKbn ');
        SQL.Add('      ,TR.UpdDateTM ');
        SQL.Add('      ,TR.InsDateTM ');
        SQL.Add('      ,FI.FusenKbn ');
        SQL.Add('      ,FI.FusenCmnt ');
        SQL.Add('from MTOKUI MA');
        SQL.Add('Left Outer Join HojyoTree TR On MA.NCode = %s and TR.MasterKbn = :pMKBN');
        SQL.Add('Left Outer Join MFusenInfo FI On MA.NCode = FI.NCode and FI.MasterKbn = :pMKBN');
        SQL.Add('where %s =:NCode and MA.RDelKbn = 0 %s');
        SQL.Add(' and  TemplateKbn=0');

        if iSumKbn = 1 then
            SQL.ADD('ORDER BY GCode')
        else
            SQL.ADD('ORDER BY EntNo');

        if iOrder = ORDER_DESC then SQL.ADD(' DESC');

        if iSumKbn = 0      then SQL.Text :=  Format(SQL.Text,[sChild[0],sChild[1],sChild[2]])
        else if iSumKbn = 1 then SQL.Text :=  Format(SQL.Text,[sParent[0],sParent[1],sParent[2]])
        else                     SQL.Text :=  Format(SQL.Text,[sChild[0],sChild[1],sChild[2]]);

        SetFld('NCode').AsString := FormatFloat('0',iNCode);
        SetFld('pMKBN').asInteger := ucTORIHIKI;

        if not Open() then
        begin
            ErrorMessageDsp(Qry);
            Exit;
        end;
    end;

    result := Qry;

end;

// -----------------------------------------------------------------------------
//  HojyoTreeの更新
// -----------------------------------------------------------------------------
//<KSN4> DEL procedure TJNTCRP004001f.fnKasan_Update(HojyoTree : THojyoTree;bIns : Boolean);
function TJNTCRP004001f.fnKasan_Update(HojyoTree:THojyoTree;bIns : Boolean; pQry: TMQuery = nil): Boolean;  //<KSN4> ADD
var
    Qry : TMQuery;
begin

    result := false;  //<KSN4> ADD

    try
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed

            Qry := TMQuery.Create(self);
//<D10>		MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
			gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

            MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

            SessionPractice(C_ST_PROCESS);

//<KSN4> ADD St
        end
        else
        begin
            Qry := pQry;
        end;
//<KSN4> ADD Ed

        with Qry do
        begin
            SQL.Clear;
            if bIns then
            begin
                SQL.Add('Insert Into HojyoTree (MasterKbn');
                SQL.Add(',PatternNo');
                SQL.Add(',SumNCode');
                SQL.Add(',EntNo');
                SQL.Add(',BasedNCode');
                SQL.Add(',AddKbn');
                SQL.Add(',UpdDateTM');
                SQL.Add(',InsDateTM');
                SQL.Add(',UpdTantoNCode');
                SQL.Add(') Values(');
                SQL.Add(' :MasterKbn');
                SQL.Add(' ,:PatternNo');
                SQL.Add(' ,:SumNCode');
                SQL.Add(' ,:EntNo');
                SQL.Add(' ,:BasedNCode');
                SQL.Add(' ,:AddKbn');
                SQL.Add(' ,:UpdDateTM');
                SQL.Add(' ,:InsDateTM');
                SQL.Add(' ,:UpdTantoNCode');
                SQL.Add(' )');

            end
            else
            begin
                SQL.Add('Update HojyoTree Set ');
                SQL.Add('MasterKbn = :MasterKbn,');
                SQL.Add('PatternNo = :PatternNo,');
                SQL.Add('SumNCode = :SumNCode,');
                SQL.Add('EntNo = :EntNo,');
                SQL.Add('BasedNCode = :BasedNCode,');
                SQL.Add('AddKbn = :AddKbn,');
                SQL.Add('UpdDateTM = :UpdDateTM,');
                SQL.Add('InsDateTM = :InsDateTM,');
                SQL.Add('UpdTantoNCode = :UpdTantoNCode');
                SQL.Add('Where MasterKbn = :MasterKbn');
                SQL.Add('And PatternNo = :PatternNo');
                SQL.Add('And SumNCode = :SumNCode');
                SQL.Add('And EntNo = :EntNo');
            end;

            SetFld('MasterKbn').AsInteger := HojyoTree.MasterKbn;
            SetFld('PatternNo').AsInteger := HojyoTree.PatternNo;
            SetFld('SumNCode').AsString := FormatFloat('0',HojyoTree.SumNCode);
            SetFld('EntNo').AsInteger := HojyoTree.EntNo;
            SetFld('BasedNCode').AsString := FormatFloat('0',HojyoTree.BasedNCode);
            SetFld('AddKbn').AsInteger := HojyoTree.AddKbn;

            SetFld('UpdDateTM').AsString := DateTimeToStr(HojyoTree.UpdDateTM);
            SetFld('InsDateTM').AsString := DateTimeToStr(HojyoTree.InsDateTM);
            SetFld('UpdTantoNCode').AsString := FormatFloat('0',HojyoTree.UpdTantoNCode);

            if not ExecSQL then
            begin
//<KSN4> ADD St
                if (not Assigned(pQry)) then
                begin
//<KSN4> ADD Ed
                    ErrorMessageDsp(Qry);
                    MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                end;  //<KSN4> ADD
                Exit;
            end;

//<KSN4> ADD St
            if (not Assigned(pQry)) then
            begin
//<KSN4> ADD Ed
                MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

                gbHojyoTree2Flag := True;
            end;  //<KSN4> ADD

            result := true;  //<KSN4> ADD
        end;
    finally
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            QueryDispose(Qry);
            SessionPractice(C_ED_PROCESS);
        end;  //<KSN4> ADD
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeの削除
// -----------------------------------------------------------------------------
//<KSN4> DEL procedure TJNTCRP004001f.fnKasan_Delete(HojyoTree : THojyoTree);
function TJNTCRP004001f.fnKasan_Delete(HojyoTree : THojyoTree; pQry: TMQuery = nil): Boolean;  //<KSN4> ADD
var
    Qry : TMQuery;
begin

    result := false;  //<KSN4> ADD

    try
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            Qry := TMQuery.Create(self);
//<D10>		MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
			gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

            MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

            SessionPractice(C_ST_PROCESS);
//<KSN4> ADD St
        end
        else
        begin
            Qry := pQry;
        end;
//<KSN4> ADD Ed

        with Qry do
        begin
            SQL.Clear;

            SQL.Add('Delete HojyoTree  ');
            SQL.Add('Where MasterKbn = :MasterKbn');
            SQL.Add('And PatternNo = :PatternNo');
            SQL.Add('And SumNCode = :SumNCode');
            SQL.Add('And BasedNCode = :BasedNCode');

            SetFld('MasterKbn').AsInteger := HojyoTree.MasterKbn;
            SetFld('PatternNo').AsInteger := HojyoTree.PatternNo;
            SetFld('SumNCode').AsString := FormatFloat('0',HojyoTree.SumNCode);
            SetFld('BasedNCode').AsString := FormatFloat('0',HojyoTree.BasedNCode);

            if not ExecSQL then
            begin
//<KSN4> ADD St
                if (not Assigned(pQry)) then
                begin
//<KSN4> ADD Ed
                    ErrorMessageDsp(Qry);
                    MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                end;  //<KSN4> ADD

                Exit;
            end;

//<KSN4> ADD St
            if (not Assigned(pQry)) then
            begin
//<KSN4> ADD Ed
                MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
                gbHojyoTree2Flag := True;
            end;  //<KSN4> ADD

            result := true;  //<KSN4> ADD
        end;
    finally
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            QueryDispose(Qry);
            SessionPractice(C_ED_PROCESS);
        end;  //<KSN4> ADD
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeのEntNo再付番
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_ResetEntNo(PatternNo:Integer;SumNCode:Extended):Boolean;
var
    Qry : TMQuery;
    bRet : Boolean;
begin
    bRet := False;

    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

    	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

        SessionPractice(C_ST_PROCESS);

        with Qry do
        begin
            SQL.Clear;

            SQL.Add('Update HojyoTree Tree ');
            SQL.Add('Inner Join ');
            SQL.Add('(Select Masterkbn');
            SQL.Add(',PatternNo');
            SQL.Add(',SumNCode');
            SQL.Add(',EntNo');
            SQL.Add(',BasedNCode');
            SQL.Add(',AddKbn');
            SQL.Add(',UpdDateTM');
            SQL.Add(',InsDateTM');
            SQL.Add(',UpdTantoNCode');
            SQL.Add(',(Row_Number() Over (Order by EntNo) * 100) as OrderEntNo');  //<KSN2> ADD
            SQL.Add('From HojyoTree');
            SQL.Add('Where MasterKbn = :MasterKbn');
            SQL.Add('And SumNCode = :SumNCode');
            SQL.Add('And PatternNo = :PatternNo');
            SQL.Add('Order by EntNo) Tree2');
            SQL.Add('On Tree.MasterKbn = Tree2.MasterKbn');
            SQL.Add('And Tree.PatternNo = Tree2.PatternNo');
            SQL.Add('And Tree.SumNCode = Tree2.SumNCode');
            SQL.Add('And Tree.EntNo = Tree2.EntNo');
//<KSN2> DEL            SQL.Add('Set Tree.EntNo = number(*) * 100');
            SQL.Add('Set Tree.EntNo = Tree2.OrderEntNo');  //<KSN2> ADD

            SetFld('MasterKbn').AsInteger := ucTorihiki;
            SetFld('PatternNo').AsInteger := PatternNo;
            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);

            if not ExecSQL then
            begin
				ErrorMessageDsp(Qry);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                result := False;
                Exit;
            end;

            MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
            bRet := True;
        end;
    finally
        QueryDispose(Qry);
		SessionPractice(C_ED_PROCESS);
        result := bRet;
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeデータの取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_GetData(BasedNCode,SumNCode:Extended):THojyoTree;
var
    Qry : TMQuery;
    HojyoTree : THojyoTree;
begin
    HojyoTree := nil;

    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select * From HojyoTree Where SumNCode = :SumNCode and BasedNCode = :BasedNCode');
            SQL.Add('and MasterKbn = :MasterKbn');

            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            SetFld('BasedNCode').AsString := FormatFloat('0',BasedNCode);
            SetFld('MasterKbn').AsInteger := ucTorihiki;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                result := nil;
                Exit;
            end;

            if EOF = False then
            begin
                HojyoTree := THojyoTree.Create;

                HojyoTree.MasterKbn := GetFld('MasterKbn').AsInteger;
                HojyoTree.PatternNo := GetFld('PatternNo').AsInteger;
                HojyoTree.SumNCode := GetFld('SumNCode').AsFloat;
                HojyoTree.EntNo := GetFld('EntNo').AsInteger;
                HojyoTree.BasedNCode := GetFld('BasedNCode').AsFloat;
                HojyoTree.AddKbn := GetFld('AddKbn').AsInteger;
                HojyoTree.UpdDateTM := GetFld('UpdDateTM').AsDateTime;
                HojyoTree.InsDateTM := GetFld('InsDateTM').AsDateTime;
                HojyoTree.UpdTantoNCode := GetFld('UpdTantoNCode').AsFloat;

            end;
        end;

    finally
        QueryDispose(Qry);
        result := HojyoTree;
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeデータの存在チェック
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_EXISTS(MasterKbn,PatternNo,EntNo:Integer;SumNCode:Extended):Boolean;
var
    Qry : TMQuery;
begin
    result := False;

    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select EntNo From HojyoTree Where SumNCode = :SumNCode and EntNo = :EntNo');
            SQL.Add('and MasterKbn = :MasterKbn');
            SQL.Add('and PatternNo = :PatternNo');

            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            SetFld('EntNo').AsInteger := EntNo;
            SetFld('MasterKbn').AsInteger := Masterkbn;
            SetFld('PatternNo').AsInteger := PatternNo;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                Exit;
            end;

            if EOF = False then result := True;
        end;

    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeデータのEntNo取得(最大値)
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_GetMaxEntNo(SumNCode:Extended):Integer;
begin
    result := fnKasan_GetEntNo(SumNCode,KBN_MAX);
end;
// -----------------------------------------------------------------------------
//  HojyoTreeデータのEntNo取得(最小値)
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_GetMINEntNo(SumNCode:Extended):Integer;
begin
    result := fnKasan_GetEntNo(SumNCode,KBN_MIN);
end;
// -----------------------------------------------------------------------------
//  HojyoTreeデータのEntNo取得
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_GetEntNo(SumNCode:Extended;iGetKbn:Integer):Integer;
var
    Qry : TMQuery;
begin
    result := 0;

    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select ');

            if iGetKbn = KBN_MAX then SQL.Add('MAX(EntNo) As EntNo')
            Else                      SQL.Add('MIN(EntNo) As EntNo');

            SQL.Add('From HojyoTree');
            SQL.Add('Where MasterKbn = :MasterKbn');
            SQL.Add('And SumNCode = :SumNCode');
            SQL.Add('And PatternNo = :PatternNo');

            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            SetFld('PatternNo').AsInteger := 0;
            SetFld('MasterKbn').AsInteger := ucTorihiki;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                Exit;
            end;

            if EOF = False then
            begin
                result := GetFld('EntNo').AsInteger;
            end;
        end;

    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのChangeNodeExイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridChangeNodeEx(Sender: TObject);
var
    Mem     : TdxMemData;
    // -----------------------------------------------------------------------------
    //  グリッドのChangeNodeExイベント(加算先(親)グリッド用)
    // -----------------------------------------------------------------------------
    procedure DBGridChangeNodeEx_ParentGrid();
    begin
        Mem := MemKasanParent;

        B_Delete.Enabled := False;

        DBGrid_EventCtrl(Kasan_Child_DBGrid,False);

        Kasan_CreateChildGrid(Mem.FieldByName('NCode').AsFloat);

        DBGrid_EventCtrl(Kasan_Child_DBGrid,True);

        Lbl_KasanChild.Caption := Mem.FieldByName('GCode').AsString +' '+ Mem.FieldByName('SimpleName').AsString;

        TreeView_Kasan_Create(Mem.FieldByName('NCode').AsFloat,1);
    end;

    // -----------------------------------------------------------------------------
    //  グリッドのChangeNodeExイベント(加算元(子)グリッド用)
    // -----------------------------------------------------------------------------
    procedure DBGridChangeNodeEx_ChildGrid();
    var
        iNo:Integer;
        sMSG : String;
        HojyoTree : THojyoTree;
    begin
        HojyoTree := nil;
        Mem := MemKasanChild;

        if Mem.RecordCount <= 0 then
        begin
            B_Delete.Enabled := False;
            TPDelChild.Enabled := False;
            TPInsert.Enabled := False
        end;

        try
            // 加算TreeView作成処理
            TreeView_Kasan_Create(Mem.FieldByName('NCode').AsFloat);

            if (Mem.FieldByName('GCode').IsNull) then	//	実在GridのｺｰﾄﾞがNullの時
            begin
                B_Delete.Enabled   := False;
                TPDelChild.Enabled   := False;
            end
            else
            begin
                if Mem.State in [dsInsert] then	// ﾃﾞｰﾀ挿入中？
                begin
                    B_Delete.Enabled   := False;
                    TPDelChild.Enabled   := False;
                    TPInsert.Enabled := False;
                end
                else
                begin
//<Authority> MOD St
{
                    B_Delete.Enabled := m_cJNTArea.IsDelete;
                    TPDelChild.Enabled := m_cJNTArea.IsDelete;
                    TPInsert.Enabled := m_cJNTArea.IsAppend;  // 追加権限
}
                    B_Delete.Enabled := m_JNTAuthority.IsDelete;
                    TPDelChild.Enabled := m_JNTAuthority.IsDelete;
                    TPInsert.Enabled := m_JNTAuthority.IsAppend;  // 追加権限
//<Authority> MOD Ed

                    if B_Delete.Enabled then
                    begin
                        // HojyoTree生成
                        HojyoTree := THojyoTree.Create();
                        With HojyoTree do
                        begin
                            BasedNCode := Mem.FieldByName('NCode').AsFloat;
                            SumNCode := Mem.FieldByName('SumNCode').AsFloat;
                        end;
                        // 削除可能かチェックする
                        fnKasan_DelValidation(HojyoTree,sMSG);

                        if sMSG <> '' then
                        begin
                            B_Delete.Enabled := False;
                            TPDelChild.Enabled := False;
                        end;
                    end;

                    // DspNoが振られているか？
                    iNo := Mem.FieldByName('DspNo').AsInteger;
                    if iNo = 0 then
                    begin
                        TPDelChild.Enabled := False;
                        B_Delete.Enabled := False;
                    end;
                end;
            end;
        finally
            if HojyoTree <> nil then HojyoTree.Free();
        end;
    end;
begin

    // 加算先(親)グリッド
    if Sender = Kasan_Parent_DBGrid then
    begin
        DBGridChangeNodeEx_ParentGrid();
    end;

    // 加算元(子)グリッド
    if Sender = Kasan_Child_DBGrid then
    begin
        DBGridChangeNodeEx_ChildGrid();
    end;
end;

// -----------------------------------------------------------------------------
//  MemDataのBeforePostイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.MemDataBeforePost(DataSet: TDataSet);
var
    stCode : String;
    Mem : TdxMemData;
    iSumNCode : Extended;
    iBasedNCode : Extended;
    MTokui,MTokuiParent : TMTokui;
    HojyoTree : THojyoTree;
    sMsg : String;
//<KSN4> ADD St
    oQry : TMQuery;
    iSumNCode2 : Extended;
//<KSN4> ADD Ed
    // -----------------------------------------------------------------------------
    //  取引先情報のセット
    // -----------------------------------------------------------------------------
    procedure MTokuiSET();
    begin
//<KSN4> DEL        if (MTokui = nil) then Exit;
//<KSN4> ADD St
        if (MTokui = nil) then
        begin
            DataSet.FieldByName('SumNCode').AsFloat := 0;
            DataSet.FieldByName('SumKbn').AsInteger := 0;
            DataSet.FieldByName('PatternNo').Asinteger := 0;
            DataSet.FieldByName('NCode').AsFloat := 0;
            DataSet.FieldByName('AddKbn').Asinteger := 0;
            DataSet.FieldByName('LongName').AsString := '';
            DataSet.FieldByName('SimpleName').AsString := '';
            DataSet.FieldByName('NewData').AsBoolean :=  (DataSet.State in [dsInsert]);
            Exit;
        end;
//<KSN4> ADD Ed
        // 取引先情報セット
        with MTokui do
        begin
            DataSet.FieldByName('SumNCode').AsFloat := iSumNCode;
            DataSet.FieldByName('SumKbn').AsInteger := SumKbn;
            DataSet.FieldByName('PatternNo').Asinteger := 0;
            DataSet.FieldByName('NCode').AsFloat := NCode;
            DataSet.FieldByName('AddKbn').Asinteger := 0;
            DataSet.FieldByName('LongName').AsString := Nm;
            DataSet.FieldByName('SimpleName').AsString := Nmk;
            DataSet.FieldByName('NewData').AsBoolean :=  (DataSet.State in [dsInsert]);

            if SumKbn <> 0 then DataSet.FieldByName('Fusen').Assign(Image_Goukei.Picture.Bitmap)
            else                DataSet.FieldByName('Fusen').Assign(Image_Jitsuzai.Picture.Bitmap);

        end;
    end;
    // -----------------------------------------------------------------------------
    //  インスタンスの開放
    // -----------------------------------------------------------------------------
    procedure oFree();
    begin
        if MTokui <> nil then
        begin
            MTokui.Free();
            MTokui := nil;
        end;

        if MTokuiParent <> nil then
        begin
            MTokuiParent.Free();
            MTokuiParent := nil;
        end;

        if HojyoTree <> nil then
        begin
            HojyoTree.Free();
            HojyoTree := nil;
        end;
    end;
begin
    try
        MTokui := nil;
        MTokuiParent := nil;
        HojyoTree := nil;
        oQry := nil;  //<KSN4> ADD
        iSumNCode := 0;
        iSumNCode2 := 0;  //<KSN4> ADD
        iBasedNCode := 0;

        MTokui := fnMTokui_GetData(DataSet.FieldByName('GCode').AsString);

        if MTokui <> nil then iBasedNCode := MTokui.NCode;

        Mem := MemKasanParent;
        MTokuiParent := fnMTokui_GetData(Mem.FieldByName('NCode').AsFloat);

        if MTokuiParent <> nil then iSumNCode := MTokuiParent.NCode;

//<KSN4> ADD St
        if (MTokui = nil) and (DataSet.FieldByName('NCode').AsInteger <> 0) then
        begin
            // 削除して行もクリア
            HojyoTree := fnKasan_GetData(DataSet.FieldByName('NCode').AsInteger, iSumNCode);
            fnKasan_Delete(HojyoTree);
            Exit;
        end;
//<KSN4> ADD Ed

        // Editモードの時に、同じコードで上書きしたときに登録チェックを行ってしまうための対策
        if (DataSet.FieldByName('EntNo').AsInteger <> 0) then
        begin
            HojyoTree := fnKasan_GetData(iBasedNCode,iSumNCode);
            if (HojyoTree <> nil) then
            begin
                // EntNoイコール時は同じコードで上書きしているので以下のチェックは行わない
                if (DataSet.FieldByName('EntNo').AsInteger = HojyoTree.EntNo) then
                    Exit;
            end;
        end;

        // HojyoTree生成
        if (HojyoTree = nil) then HojyoTree := THojyoTree.Create();
        With HojyoTree do
        begin
            BasedNCode := iBasedNCode;
            SumNCode := iSumNCode;
        end;

        fnKasan_InsValidation(HojyoTree,sMsg);   // 登録チェック

        if sMsg <> '' then
        begin
            MjsMessageBoxEX(Self,sMsg,'登録',mjInformation,mjOk, mjDefOk);
            // 名称をクリア
            DataSet.FieldByName('LongName').AsString := '';
            DataSet.FieldByName('SimpleName').AsString := '';
            DataSet.FieldByName('Fusen').Clear;
            oFree();
            abort;
        end;

//<KSN4> ADD St
        oQry := fnKasan_GetParent(iBasedNCode);
        if (oQry <> nil) then
        begin
            while not (oQry.EOF) do
            begin
                if iSumNCode <> oQry.GetFld('SumNCode').AsFloat then
                begin
                    iSumNCode2 := oQry.GetFld('SumNCode').AsFloat;
                    break;
                end;
                oQry.Next();
            end;

            QueryDispose(oQry);

            if iSumNCode2 <> 0 then
            begin
                if mrYes <> MjsMessageBoxEx(
                    self, '既に別の合計取引先にも加算されていますが登録しますか？',
                    '確認', mjQuestion, mjYesNo, mjDefNo) then
                begin
                    oFree();
                    abort;
                end;
            end;
        end;
//<KSN4> ADD Ed

        // 外部ｺｰﾄﾞ
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
        begin
            stCode := DataSet.FieldByName('GCode').AsString;
            stCode := TrimRight(stCode);
            DataSet.FieldByName('GCode').AsString := fnMTokui_CodeEdit(stCode);
        end;

        //最終行に新規に入力した時 NOを付番
        if DataSet.FieldByName('DspNo').AsInteger = 0 then
        begin
            if DataSet.RecNo = 0 then						// 初回は0らしいので..
                DataSet.FieldByName('DspNo').AsInteger := 1
            else
                DataSet.FieldByName('DspNo').AsInteger := DataSet.RecNo;
        end;

        // EntNoが入っていない場合
        if DataSet.FieldByName('EntNo').AsInteger = 0 then
            DataSet.FieldByName('EntNo').AsInteger := fnKasan_GetMaxEntNo(iSumNCode)+100;

    finally
        MTokuiSET();
        oFree();
    end;
end;

// -----------------------------------------------------------------------------
//  MemDataのAfterPostイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.MemDataAfterPost(DataSet: TDataSet);
var
    HojyoTree : THojyoTree;
//<KSN4> DEL    bIns      : Boolean;
    oMem : TdxMemData;  //<KSN4> ADD
begin
//<KSN4> ADD St
    oMem := TdxMemData(DataSet);
    if oMem.FieldByName('GCode').AsString = '' then
    begin
        Exit;
    end;
//<KSN4> ADD Ed
    HojyoTree := nil;
    try
        // HojyoTreeの更新
        HojyoTree := THojyoTree.Create;

        with HojyoTree do
        begin
            MasterKbn := ucTORIHIKI;
            PatternNo := DataSet.FieldByName('PatternNo').AsInteger;
            SumNCode := DataSet.FieldByName('SumNCode').AsFloat;
            EntNo := DataSet.FieldByName('EntNo').AsInteger;
            BasedNCode := DataSet.FieldByName('NCode').AsFloat;
            AddKbn := DataSet.FieldByName('AddKbn').AsInteger;
//<KSN4> DEL St
{
            // 存在したら新規作成
            bIns := not fnKasan_EXISTS(MasterKbn,PatternNo,EntNo,SumNCode);

            UpdDateTM := now;

            if bIns then
                InsDateTM := now
            else
                InsDateTM := DataSet.FieldByName('InsDateTM').AsDateTime;
}
//<KSN4> DEL Ed
            UpdTantoNCode := m_TantoNCode;
//<KSN4> DEL St
{
            fnKasan_Update(HojyoTree,bIns);

            if not Assigned(m_SrchMTokui) then Exit;

            // 検索用加算先の作成
            if (bIns = True) and (m_SrchMTokui.NCode = BasedNCode) then Kasan_CreateSearchParent();
}
//<KSN4> DEL Ed
        end;

        fnKasan_UpdateExecute(HojyoTree);  //<KSN4> ADD

    finally
        HojyoTree.Free;
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系TreeViewの作成
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.TreeView_Kasan_Create(NCode:Extended;iSumKbn:Integer=0);
var
    stWorkRec  : ^TreeViewRec;
	cNode : TTreeNode;
    cSrcNode   : TTreeNode;
    TreeView : TMTreeView;
    nCodeArray : array of Extended;
    Qry:TMQuery;
    iCnt : Integer;
    MTokui : TMTokui;

    // -----------------------------------------------------------------------------
    //  TreeViewのノード作成
    // -----------------------------------------------------------------------------
    procedure SetData(MTokui : TMTokui;bComp:Boolean);
    var
        stName : String;
        stCode : String;
        SetWorkRec : ^TreeViewRec;
    begin
    	New (SetWorkRec);
    	SetWorkRec^.nDivision    	:= MTokui.SumKbn;
    	SetWorkRec^.strExCode    	:= MTokui.GCode;
        SetWorkRec^.iNCode          := MTokui.NCode;
    	SetWorkRec^.strName      	:= MTokui.Nmk;
    	SetWorkRec^.iSyokuti	    := MTokui.SyokuchiKbn;
		SetWorkRec^.bComp           := bComp;

        stCode := fnMTokui_CodeEdit(MTokui.GCode);
		stName := stCode + ' ' + MTokui.Nmk;
        cNode	:= TreeView.Items.AddChildObjectFirst (cSrcNode, stName, SetWorkRec);

        if cSrcNode = nil then
            cSrcNode := cNode;

		if  (SetWorkRec^.nDivision = 0) then
		begin
			cNode.ImageIndex    := IC_JCLOSE;
			cNode.SelectedIndex := IC_JCLOSE;
		end
		else
		begin
			cNode.ImageIndex    := IC_GMCLOSE;
			cNode.SelectedIndex := IC_GMCLOSE;
		end;
    end;

    // -----------------------------------------------------------------------------
    //  子情報の作成
    // -----------------------------------------------------------------------------
    procedure CreateChild(pNCode:Extended);
    begin

        MTokui := nil;
        Qry := nil;

        try
            // 子情報の取得
            Qry := fnKasan_GetChild(pNCode,ORDER_DESC);

            if Qry <> nil then
            begin
                cNode := nil;

                while Qry.Eof = False do
                begin
                    MTokui := TMTokui.Create();

                    with MTokui do
                    begin
                        SumKbn := Qry.GetFld('SumKbn').AsInteger;
                        GCode := Qry.GetFld('GCode').AsString;
                        NCode := Qry.GetFld('NCode').AsFloat;
                        Nmk := Qry.GetFld('SimpleName').AsString;
                        SyokuchiKbn := 0;
                    end;

                    if MTokui <> nil then
                    begin
                        SetData(MTokui,MTokui.SumKbn = 0);     // 加算元(子)のセット

                        MTokui.Free();
                        MTokui := nil;
                    end;
                    Qry.Next();
                end;
            end;
        finally
            QueryDispose(Qry);
        end;
    end;

    // -----------------------------------------------------------------------------
    // まだ取得していない子情報の作成
    // -----------------------------------------------------------------------------
    procedure TreeBuild();
    var
        iCnt,iCnt2 : Integer;
        wkNode : TTreeNode;
    begin
        iCnt2 := 0;
        iCnt := 0;

        while iCnt <= (TreeView.Items.Count -1) do
        begin
            wkNode := TreeView.Items [iCnt];

            if iCnt = 0 then wkNode.Expanded := True;   // 先頭は開く

            stWorkRec := wkNode.Data;
            if stWorkRec^.bComp = False then
            begin
                if wkNode.Level = 0 then inc(iCnt2);

                cSrcNode := wkNode;
                CreateChild(stWorkRec^.iNCode);
                stWorkRec^.bComp := True;

                // 初期表示で先頭にスクロールを持っていくための対策
                if iCnt2 < 2 then wkNode.Expanded := True;
            end;
            inc(iCnt);
        end;
    end;
begin

    TreeView := VTreeView_Kasan;
    TreeView.Items.BeginUpdate;
    TreeView.Items.Clear;

    Qry := nil;
    MTokui := nil;

    if iSumKbn = 0 then
    begin
        // 複数の加算先を取得
        Qry := fnKasan_GetParent(NCode,ORDER_DESC);

        if Qry <> nil then
        begin
            SetLength(nCodeArray,Qry.RecordCount);

            iCnt := 0;
            while Qry.EOF = False do
            begin
                nCodeArray[iCnt] := Qry.GetFld('NCode').AsFloat;
                inc(iCnt);
                Qry.Next();
            end;

            QueryDispose(Qry);
        end;
    end
    else
    begin
        SetLength(nCodeArray,1);
        nCodeArray[0] := NCode;
    end;

    for iCnt := Low(nCodeArray) to High(nCodeArray) do
    begin

        MTokui := fnMTokui_GetData(nCodeArray[iCnt]);

        if MTokui = nil then continue;

        cSrcNode := nil;

        SetData(MTokui,True);  // 加算先(親)のセット

        CreateChild(nCodeArray[iCnt]);
    end;

    if TreeView.Items.Count > 0 then
    begin
        // まだ取得していない子情報の作成
        TreeBuild();

        TreeView.Selected := TreeView.Items[0];

        if TreeView_EnsureVisible(TreeView.Handle, TreeView.Selected.ItemID) then
            TreeView.Invalidate;
    end;

    TreeView.Items.EndUpdate;
end;

// -----------------------------------------------------------------------------
//  挿入ボタンのクリックイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.BSpeedButtonInsClick(Sender: TObject);
var
	i,
	iNo,
	iEntNo,
	iEntNoPrev,
	iWk		:	Integer;
    DBGrid  :   TdxDBGrid;
    Mem     :   TdxMemData;
    iSumNCode : Extended;
    iPatternNo : Integer;
begin
    DBGrid := Kasan_Child_DBGrid;
    Mem    := MemKasanChild;

//<KSN2> ADD St
    if (Mem.State in [dsEdit]) then
    begin
        Mem.Post();
    end;
//<KSN2> ADD St

    DBGrid_EventCtrl(DBGrid,False);

	// 挿入場所以降のNOを振り直す
	iNo := Mem.FieldByName('DspNo').AsInteger;		// 挿入場所のNO
	iEntNo := Mem.FieldByName('EntNo').AsInteger;	    // 挿入場所のEntNO
	iEntNoPrev := 0;
	if Mem.RecNo > 1 then
	begin
		Mem.Prior;
		iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のDspNo
		Mem.Next;
	end;
	iEntNo := (iEntNo + iEntNoPrev) div 2;

	// 間に挿入できなくなったら、出力順NOの振り直しを行う
	if iEntNo = iEntNoPrev then
	begin
        iSumNCode := Mem.FieldByName('SumNCode').AsFloat;
        iPatternNo := Mem.FieldByName('PatternNo').AsInteger;
        // EntNoの再付番
		if not fnKasan_ResetEntNo(iPatternNo,iSumNCode) then
			exit;

        MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化

        Kasan_CreateChildGrid(iSumNCode);  // 加算元(子)グリッド作成

        MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す

		Mem.RecNo	:=	iNo;						// Dropしたﾚｺｰﾄﾞに戻る
		iEntNo := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
		iEntNoPrev := 0;
		if Mem.RecNo > 1 then
		begin
			Mem.Prior;
			iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のDspNo
			Mem.Next;
		end;
		iEntNo := (iEntNo + iEntNoPrev) div 2;
	end;

	if iNo <> 0 then									// 途中のNOに挿入したとき,以降のNOを振り直す
	begin
		Mem.Last;									// 後ろの行からNOを＋１していく
        MemData_EventCtrl(Mem,False);
		for i := Mem.RecNo downto iNo do
		begin
			Mem.Edit;								// 編集ﾓｰﾄﾞ
			iWk := Mem.FieldByName('DspNo').AsInteger+1;	// NO <-- 行+1
			Mem.FieldByName('DspNo').AsInteger := iWk;
			Mem.Post;
			Mem.Prior;
		end;
        MemData_EventCtrl(Mem,True);
	end;

	if iNo <> 1 then
		Mem.Next;

    MemData_EventCtrl(Mem,False);
	Mem.Insert;									// ｲﾝｻｰﾄ
	iWk := Mem.RecNo;								// 行NO
	Mem.FieldByName('DspNo').AsInteger	:= iWk;
	Mem.FieldByName('EntNo').AsInteger	:= iEntNo;
	Mem.Post;
    MemData_EventCtrl(Mem,True);
    DBGrid_EventCtrl(DBGrid,True);
end;

// -----------------------------------------------------------------------------
//  MemDataのイベント制御
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.MemData_EventCtrl(Mem:TdxMemData;bSet:Boolean);
begin

    if bSet = False then
    begin
        Mem.BeforePost := nil;
        Mem.AfterPost := nil;
        Exit;
    end;

    if Mem = MemKasanChild then
    begin
        Mem.BeforePost := MemDataBeforePost;
        Mem.AfterPost := MemDataAfterPost;
    end;
end;

// -----------------------------------------------------------------------------
//  DBGridのイベント制御
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGrid_EventCtrl(DBGrid:TdxDBGrid;bSet:Boolean);
begin
    if bSet = False then
    begin
        DBGrid.OnChangeNodeEx := nil;
        DBGrid.OnEnter := nil;
        Exit;
    end;

    if DBGrid = Kasan_Child_DBGrid then
    begin
        DBGrid.OnChangeNodeEx := DBGridChangeNodeEx;
        DBGrid.OnEnter := EnterEvent;
    end;

    if DBGrid = Kasan_Parent_DBGrid then
    begin
        DBGrid.OnChangeNodeEx := DBGridChangeNodeEx;
        DBGrid.OnEnter := EnterEvent;
    end;
end;

// -----------------------------------------------------------------------------
//  TreeViewのイベント制御
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.TreeView_EventCtrl(TreeView:TMTreeView;bSet:Boolean);
begin
    if bSet = False then
    begin
        // イベントの無効化
        TreeView.OnChange := nil;
        TreeView.OnClick := nil;
        TreeView.OnDragDrop := nil;
        TreeView.OnDragOver := nil;
        TreeView.OnEnter := nil;
        TreeView.OnExit := nil;
        Exit;
    end;

    if TreeView = VTreeView then
    begin
        TreeView.OnChange := VTreeViewChange;
        TreeView.OnClick := VTreeViewClick;
        TreeView.OnDragDrop := VTreeViewDragDrop;
        TreeView.OnDragOver := VTreeViewDragOver;
        TreeView.OnEnter := VTreeViewEnter;
        TreeView.OnExit := VTreeViewExit;
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドの作成
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Kasan_CreateChildGrid(SumNCode : Extended);
var
    Qry : TMQuery;
    DBGrid : TdxDBGrid;
    Mem : TdxMemData;
    DSource : TDataSource;
    iCnt : Integer;
begin

    if SumNCode = 0 then Exit;

    DBGrid := Kasan_Child_DBGrid;
    Mem := MemKasanChild;
    MemData_EventCtrl(Mem,False);
    DSource := dsKasanChild;

    DSource.DataSet := nil;

    DBGrid.BeginUpdate;

    Mem.Close;
    Mem.Open;

	Mem.DisableControls;

    Qry := fnKasan_GetChild(SumNCode);

    if Qry = nil then Exit;

    try
        iCnt := 1;
        with Qry do
        begin
            While EOF = False do
            begin
                Mem.Append;
                Mem.FieldByName('DspNo').AsInteger := iCnt;
                Mem.FieldByName('SumKbn').AsInteger := GetFld('SumKbn').AsInteger;
                Mem.FieldByName('GCode').AsString := fnMTokui_CodeEdit(GetFld('GCode').AsString);
                Mem.FieldByName('LongName').AsString := GetFld('LongName').AsString;
                Mem.FieldByName('SimpleName').AsString := GetFld('SimpleName').AsString;
                Mem.FieldByName('NCode').AsFloat := GetFld('NCode').AsFloat;
                Mem.FieldByName('SumNCode').AsFloat := GetFld('SumNCode').AsFloat;
                Mem.FieldByName('EntNo').AsInteger := GetFld('EntNo').AsInteger;
                Mem.FieldByName('UpdDateTM').AsDateTime := GetFld('UpdDateTM').AsDateTime;
                Mem.FieldByName('InsDateTM').AsDateTime := GetFld('InsDateTM').AsDateTime;

                if Mem.FieldByName('SumKbn').AsInteger <> 0 then
                    Mem.FieldByName('Fusen').Assign(Image_Goukei.Picture.Bitmap)
                else
                    Mem.FieldByName('Fusen').Assign(Image_Jitsuzai.Picture.Bitmap);
                Mem.Post;
                Next;
                inc(iCnt);
            end;
        end;

    finally
        QueryDispose(Qry);

        DSource.DataSet := Mem;
        if Mem.RecordCount <> 0 then
            Mem.First;
        DBGrid.EndUpdate;
        Mem.EnableControls;
        MemData_EventCtrl(Mem,True);
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドラッグ開始イベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridStartDrag(Sender: TObject;
  var DragObject: TDragObject);
var
    Mem:TdxMemData;
    DBGrid : TdxDBGrid;
begin

	m_DragCtlName := TdxDBGrid(m_AcControl).Name;
    m_HojyoTree_Drag.DspNo := MemKasanChild.FieldByName('DspNo').AsInteger;
    Mem := MemKasanChild;
    DBGrid := TdxDBGrid(Sender);

    DBGrid_EventCtrl(DBGrid,False);  // グリッドのイベント無効化

    if m_HojyoTree_Drag.MTokui <> nil then
    begin
        m_HojyoTree_Drag.MTokui.Free;
        m_HojyoTree_Drag.MTokui := nil;
    end;

    if m_HojyoTree_Drag.HojyoTree <> nil then
    begin
        m_HojyoTree_Drag.HojyoTree.Free;
        m_HojyoTree_Drag.HojyoTree := nil;
    end;

    m_HojyoTree_Drag.MTokui := fnMTokui_GetData(Mem.FieldByName('NCode').AsFloat);

    m_HojyoTree_Drag.HojyoTree := THojyoTree.Create();

    with m_HojyoTree_Drag.HojyoTree do
    begin
        MasterKbn := ucTORIHIKI;
        PatternNo := Mem.FieldByName('PatternNo').AsInteger;
        SumNCode := Mem.FieldByName('SumNCode').AsFloat;
        EntNo := Mem.FieldByName('EntNo').AsInteger;
        BasedNCode := Mem.FieldByName('NCode').AsFloat;
        AddKbn := Mem.FieldByName('AddKbn').AsInteger;
        UpdDateTM := now;
        UpdTantoNCode := m_TantoNCode;
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドラッグオーバーイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
begin
	Accept := true;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドラッグ終了イベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridEndDrag(Sender, Target: TObject; X, Y: Integer);
var
    Mem:TdxMemData;
    DBGrid : TdxDBGrid;
begin
    Mem := MemKasanChild;
    DBGrid := TdxDBGrid(Sender);
	m_DragCtlName := '';
    DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
    MemData_EventCtrl(Mem,True);    // MemDataのPostイベント有効にする
    DBGrid_EventCtrl(DBGrid,True);    // MemDataのPostイベント有効にする

    if m_HojyoTree_Drag.HojyoTree <> nil then
    begin
        m_HojyoTree_Drag.HojyoTree.Free();
        m_HojyoTree_Drag.HojyoTree := nil;
    end;

    if m_HojyoTree_Drag.MTokui <> nil then
    begin
        m_HojyoTree_Drag.MTokui.Free();
        m_HojyoTree_Drag.MTokui := nil;
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドロップイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridDragDrop(Sender, Source: TObject; X,
  Y: Integer);
var
	iNo,
	iNoSave,
	iEntNo,
	iEntNoSave,
	iEntNoPrev,
	iDragNo,
	iWk,
	i,
	iRecCount	: Integer;
	DBGrid : TdxDBGrid;
    Mem : TdxMemData;
    iSumNCode : Extended;
    iPatternNo : Integer;
begin

    DBGrid := Kasan_Child_DBGrid;
    Mem := MemKasanChild;

	if m_DragCtlName = DBGrid.Name then
	begin
		iRecCount := Mem.RecordCount;				// 全件数
		iDragNo := m_HojyoTree_Drag.DspNo;						// ﾄﾞﾗｯｸﾞしたﾚｺｰﾄﾞのNO
		iNo := Mem.FieldByName('DspNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のNO
		iNoSave := Mem.FieldByName('DspNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のNO
		iEntNo := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
		iEntNoSave := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
		iEntNoPrev := 0;
		if iNo <> iRecCount then						// Dropした場所は最終行ではない
		begin
			if iDragNo < iNoSave then						// 上から下に移動した時
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Next;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Prior;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end
			else
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Prior;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Next;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end;
		end
		else
		begin
			iEntNo := iEntNo + 100;
		end;

		if (iNo = 0) or (iNo = iDragNo) then			// 新規の場所にDropした 又は
			Abort;										// 元いたNOにDropした

		// 間に挿入できなくなったら、出力順NOの振り直しを行う
		if (iEntNo = iEntNoPrev) or (iEntNo = iEntNoSave) then
		begin
            iSumNCode := Mem.FieldByName('SumNCode').AsFloat;
            iPatternNo := Mem.FieldByName('PatternNo').AsInteger;

			if not fnKasan_ResetEntNo(iPatternNo,iSumNCode) then
				exit;

            MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化

            Kasan_CreateChildGrid(iSumNCode);  // 加算元(子)グリッド作成

            MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す

			Mem.RecNo	:=	iNo;						// Dropしたﾚｺｰﾄﾞに戻る
			iEntNo := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
			iEntNoPrev := 0;
			if iDragNo < iNoSave then						// 上から下に移動した時
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Next;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Prior;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end
			else
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Prior;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Next;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end;
		end;

		iRecCount := Mem.RecordCount;				// 全件数

//<出力順NO>↓
		// ①ﾄﾞﾗｯｸﾞしたﾚｺｰﾄﾞのNoを一旦×999999→999999999に変更し、ﾒﾓﾃﾞｰﾀから削除
		Mem.RecNo	:=	iDragNo;					// Dragしたﾚｺｰﾄﾞに戻る

		Mem.Delete;								// DragしたﾚｺｰﾄﾞをMomから削除

        fnKasan_Delete(m_HojyoTree_Drag.HojyoTree);  // DragしたﾚｺｰﾄﾞをHojyoTreeから削除

		// ②間のﾚｺｰﾄﾞのNoを＋(－)１
		if iDragNo < iNoSave then						// 上から下に移動した時
		begin
            MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化
			for i := Mem.FieldByName('DspNo').AsInteger to iNo do
			begin
				Mem.Edit;							// 編集ﾓｰﾄﾞ

				iWk := Mem.FieldByName('DspNo').AsInteger - 1;	// NO <-- 元NO-1
				Mem.FieldByName('DspNo').AsInteger := iWk;
				Mem.Post;
				Mem.Next;
			end;
            MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す
		end
		else											// 下から上に移動した時
		begin
			if iDragNo <> iRecCount then				// Dragしたﾚｺｰﾄﾞは最終行ではない
				Mem.Prior;

            MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化
			for i := Mem.FieldByName('DspNo').AsInteger downto iNo do
			begin
				Mem.Edit;							// 編集ﾓｰﾄﾞ

				iWk := Mem.FieldByName('DspNo').AsInteger + 1;		// NO <-- 元NO+1
				Mem.FieldByName('DspNo').AsInteger := iWk;
				Mem.Post;
				Mem.Prior;
			end;
            MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す

			if iNo <> 1 then
				Mem.Next;
		end;

		// ③ﾄﾞﾗｯｸﾞしたﾚｺｰﾄﾞをﾄﾞﾛｯﾌﾟ先のNoでWrite
		if iNo <> iRecCount then						// Dropした場所は最終行ではない
			Mem.Insert							// ﾒﾓﾘ上はｲﾝｻｰﾄﾓｰﾄﾞ
		else
			Mem.Append;							// ﾒﾓﾘ上は追加ﾓｰﾄﾞ


        with m_HojyoTree_Drag do
        begin
            Mem.FieldByName('DspNo').AsInteger		    := iNo;
            Mem.FieldByName('EntNo').AsInteger		    := iEntNo;
            Mem.FieldByName('PatternNo').AsInteger		:= HojyoTree.PatternNo;
            Mem.FieldByName('SumNCode').AsFloat	        := HojyoTree.SumNCode;
            Mem.FieldByName('NCode').AsFloat		    := HojyoTree.BasedNCode;
            Mem.FieldByName('GCode').AsString		    := fnMTokui_CodeEdit(MTokui.GCode);
            Mem.FieldByName('LongName').AsString		:= MTokui.Nm;
            Mem.FieldByName('SimpleName').AsString		:= MTokui.Nmk;
            Mem.FieldByName('AddKbn').AsInteger		    := HojyoTree.AddKbn;
            Mem.FieldByName('UpdDateTM').AsDateTime		:= HojyoTree.UpdDateTM;
            Mem.FieldByName('InsDateTM').AsDateTime		:= HojyoTree.InsDateTM;
            Mem.FieldByName('NewData').AsBoolean		:= True;
        end;
		Mem.Post;

        DBGridChangeNodeEx(DBGrid);  //ChangeNodeExイベントの呼び出し
	end;

    DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
end;

// -----------------------------------------------------------------------------
//  加算先(親)グリッドの作成
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Kasan_CreateParentGrid();
var
    Qry : TMQuery;
    DBGrid : TdxDBGrid;
    Mem : TdxMemData;
    DSource : TDataSource;
begin

    DBGrid := Kasan_Parent_DBGrid;
    Mem := MemKasanParent;
    DSource := dsKasanParent;

    DSource.DataSet := nil;

    DBGrid.BeginUpdate;

    Mem.Close;
    Mem.Open;

	Mem.DisableControls;

    Qry := fnMTokui_GetGoukei();

    if Qry = nil then Exit;

    try
        with Qry do
        begin
            While EOF = False do
            begin
                Mem.Append;
                Mem.FieldByName('GCode').AsString := fnMTokui_CodeEdit(GetFld('GCode').AsString);
                Mem.FieldByName('LongName').AsString := GetFld('LongName').AsString;
                Mem.FieldByName('SimpleName').AsString := GetFld('SimpleName').AsString;
                Mem.FieldByName('NCode').AsFloat := GetFld('NCode').AsFloat;
                Mem.FieldByName('Fusen').Assign(Image_Goukei.Picture.Bitmap);

                Mem.Post;
                Next;
            end;
        end;

    finally
        QueryDispose(Qry);

        DSource.DataSet := Mem;
        if Mem.RecordCount <> 0 then
            Mem.First;
        DBGrid.EndUpdate;
        Mem.EnableControls;
    end;
end;

// -----------------------------------------------------------------------------
//  検索エクスプローラー表示
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.ShowExplorer(Send_Exp:TSend_Exp;var Rcv_Exp:TRcv_Exp);
var
    lvExpSend:  rcJNTExpSend;
    lvExpRecv:  rcJNTExpRecv;
    iExpRtn:    Integer;
begin
    Rcv_Exp.GCode := '';
    Rcv_Exp.Nm := '';
    Rcv_Exp.Nmk := '';

    fnJNTExpMakeParam(@lvExpSend);   //ﾊﾟﾗﾒｰﾀ初期設定
    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;       //MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;           //TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;

    if Send_Exp.TableName = 'MTOKUI' then
    begin
        lvExpSend.MasterKbn     :=  22;         //マスタ区分
        lvExpSend.TBarNM        :=  MasterInfo_DMemDataJHojyoName.AsString + '検索ｴｸｽﾌﾟﾛｰﾗ';
    end;

    lvExpSend.ModulKbn      :=  0;                  //モジュール区分
    lvExpSend.PatternNo     :=  1;                  //マスタ区分

    lvExpSend.TableName     :=  Send_Exp.TableName;
    lvExpSend.TrRootCaption :=  MasterInfo_DMemDataJHojyoName.AsString;

    lvExpSend.WhereStr := Send_Exp.Where;

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;

    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
        Rcv_Exp.GCode := lvExpRecv.GCode;
        Rcv_Exp.Nm := lvExpRecv.Nm;
        Rcv_Exp.Nmk := lvExpRecv.Nmk;
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのクリックイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridCodeEditButtonClick(Sender: TObject);
var
    Send_Exp:TSend_Exp;
    Rcv_Exp:TRcv_Exp;
    Mem : TdxMemData;
begin
    if m_AcControl = Kasan_Child_DBGrid then
    begin
        Mem := MemKasanChild;

        Send_Exp.TableName := 'MTOKUI';
        Send_Exp.Where := 'MTOKUI.RDelKBN = 0 and MTOKUI.TemplateKbn = 0';
        ShowExplorer(Send_Exp,Rcv_Exp);

        if Rcv_Exp.GCode <> '' then
        begin
            Mem.Open;
            Mem.Edit;
            Mem.FieldByName('GCode').AsString	:=	fnMTokui_CodeEdit(Rcv_Exp.GCode);
            Mem.FieldByName('LongName').AsString	:=	Rcv_Exp.Nm;
            Mem.FieldByName('SimpleName').AsString	:=	Rcv_Exp.Nmk;
        end;
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのMouseDownイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
    DBGrid  :   TdxDBGrid;
begin
    DBGrid := TdxDBGrid(Sender);

    DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
end;

// -----------------------------------------------------------------------------
//  PopupMenuのClickイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.PMPopup(Sender: TObject);
begin
    if m_AcControl = Kasan_Child_DBGrid then DBGridChangeNodeEx(Kasan_Child_DBGrid);
end;

// -----------------------------------------------------------------------------
//  TMQueryの破棄
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.QueryDispose(var Qry:TMQuery);
begin
    if Assigned(Qry) then
    begin
        Qry.Close();
        Qry.Free();
        Qry := nil;
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのCustomDrawCellイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.DBGridCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
    Mem : TdxMemData;
begin
    Mem := MemKasanParent;

	if (ANode.Focused) then
    begin
    	if Mem.RecordCount <> 0 then			// ｸﾞﾘｯﾄﾞにﾃﾞｰﾀが表示されているとき
        begin
    											// ﾌｫｰｶｽ色にする
    		AColor      := rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysFocusColor;
        	AFont.Color := clBlack;
    	end;
    end;
end;

// -----------------------------------------------------------------------------
//  ツリービューのMouseDownイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.TreeViewMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
    // 加算体系イメージのツリービューにはフォーカスをあてない
    if m_AcControl is TdxDBGrid then
    begin
        DBGrid_EventCtrl(TdxDBGrid(m_AcControl),False);
        m_AcControl.SetFocus;
        DBGrid_EventCtrl(TdxDBGrid(m_AcControl),True);
    end
    else
        m_AcControl.SetFocus;

    abort;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeの登録件数を返す
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_Count(SumNCode:Extended=-1):Integer;
var
    Qry : TMQuery;
begin
    result := 0;
    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select Count(EntNo) as Kensu from HojyoTree Where MasterKbn = :pMKBN');

            if SumNCode <> -1 then
            begin
                SQL.Add(' and SumNCode = :SumNCode');
                SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            end;

            SetFld('pMKBN').AsInteger := ucTORIHIKI;

            if not Open() then
            begin
        		MjsMessageBox(Self,'登録件数の取得に失敗しました。', mjError, mjDefOk);
                Exit;
            end;

            if not EOF then
                result := GetFld('Kensu').AsInteger;
        end;
    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  TMSpeedButtonクリックイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.BSpeedButtonClick(Sender: TObject);
    // -----------------------------------------------------------------------------
    //  並び替えボタン(加算体系用タブ用)
    // -----------------------------------------------------------------------------
    procedure KasanSort();
    var
        iSumNCode : Extended;
        Mem : TdxMemData;
        iRet : Integer;
    begin
        iSumNCode := 0;
        Mem := MemKasanParent;

        ShowDLG(DLG_SORT,iRet);

        if iRet = mrCancel then Exit;

        if iRet = mrYes then
        begin
            iSumNCode := -1;
        end
        else if iRet = mrNo then
        begin
            iSumNCode := Mem.FieldByName('NCode').AsFloat;
        end;

        if not fnKasan_Sort(ProgressBar1,iSumNCode) then
        begin
            MjsMessageBox(Self,'並び替えに失敗しました。'+#13#10+'並び替えは行われませんでした。', mjError, mjDefOk);
            Exit;
        end;

        if iRet = mrYes then
        begin
            DBGrid_EventCtrl(Kasan_Parent_DBGrid,False);
            MemData_EventCtrl(Mem,False);
            Mem.First;
            DBGrid_EventCtrl(Kasan_Parent_DBGrid,True);
            MemData_EventCtrl(Mem,True);
        end;

        DBGridChangeNodeEx(Kasan_Parent_DBGrid);    // 合計マスタ内はグリッドの読み直しを行う

    end;

    // -----------------------------------------------------------------------------
    //  設定ボタン
    // -----------------------------------------------------------------------------
    procedure SetUp();
    var
    	JNTCRP004001SetUp: TJNTCRP004001SetUpDlgf;
        iRet        :   Integer;
    begin
        JNTCRP004001SetUp := nil;
        try
            JNTCRP004001SetUp := TJNTCRP004001SetUpDlgf.fnCreateDialog(self,m_pMyAppRecord);
            JNTCRP004001SetUp.Caption := '起動設定';
            JNTCRP004001SetUp.chb_Syosai.Checked := m_APGFile.GetValue(DSPTYPE) = '1';

            iRet := JNTCRP004001SetUp.ShowModal();

            if (iRet = mrOK) then
            begin
                if JNTCRP004001SetUp.chb_Syosai.Checked then m_APGFile.SetValue(DSPTYPE,'1')   // 詳細起動
                else                                         m_APGFile.SetValue(DSPTYPE,'0');  // 一覧起動

                SetGuidance(m_APGFile.ErrMSG());

                if m_APGFile.ErrMSG() = '' then
                begin
                    if JNTCRP004001SetUp.chb_Syosai.Checked then SetGuidance('次回より詳細画面で起動します。')
                    else                                         SetGuidance('次回より一覧画面で起動します。');
                end;
            end;

        finally
            JNTCRP004001SetUp.Release;
        end;
    end;

    // -----------------------------------------------------------------------------
    //  削除ボタン(加算体系用タブ用)
    // -----------------------------------------------------------------------------
    procedure KasanDelete();
    var
        HojyoTree,
        HojyoTree2 : THojyoTree;
        Mem : TdxMemData;
        DBGrid : TdxDBGrid;
        iNo,
        iCnt,
        iRecNo,
        iParentCount : Integer;
        Qry_Parent : TMQuery;
    begin
        HojyoTree := nil;
        Mem := MemKasanChild;
        DBGrid := Kasan_Child_DBGrid;
        iParentCount := 0;
        Qry_Parent := nil;
//        HojyoTree2 := nil;

        try
            if Mem.FieldByName('GCode').AsString <> '' then
            begin
                HojyoTree := THojyoTree.Create;

                with HojyoTree do
                begin
                    MasterKbn := ucTORIHIKI;
                    PatternNo := Mem.FieldByName('PatternNo').AsInteger;
                    SumNCode := Mem.FieldByName('SumNCode').AsFloat;
                    EntNo := Mem.FieldByName('EntNo').AsInteger;
                    BasedNCode := Mem.FieldByName('NCode').AsFloat;
                    AddKbn := Mem.FieldByName('AddKbn').AsInteger;
                    UpdDateTM := now;
                    UpdTantoNCode := m_TantoNCode;
                end;

                fnKasan_Delete(HojyoTree);

                Mem.Delete();

                MemData_EventCtrl(Mem,False);

                iCnt := Mem.RecordCount;

                TPDelChild.Enabled := iCnt = 0;

                if iCnt = 0 then Exit;

                // 途中のNOを削除したとき,以降のNOを振り直す
                if Mem.FieldByName('DspNo').AsInteger <> Mem.RecNo then
                begin
                    DBGrid_EventCtrl(DBGrid,False);
                    iRecNo := Mem.RecNo;
                    while True do
                    begin
                        Mem.Edit;
                        iNo := Mem.FieldByName('DspNo').AsInteger;
                        Mem.FieldByName('DspNo').AsInteger := iNo-1;
                        Mem.Post;
                        if iCnt = Mem.RecNo then		// 最終行まで処理した
                            break;
                        Mem.Next;
                    end;
                    DBGrid_EventCtrl(DBGrid,True);
                    Mem.RecNo := iRecNo;
                end;
            end;

            // 加算先(親)情報の取得
            Qry_Parent := fnKasan_GetParent(HojyoTree.BasedNCode);

            if Qry_Parent <> nil then
            begin
                iParentCount := Qry_Parent.RecordCount;
                QueryDispose(Qry_Parent);
            end;

            if iParentCount = 0 then
            begin
                // 総合計に存在しているか？
                HojyoTree2 := fnKasan_GetData(HojyoTree.BasedNCode,0);
                if HojyoTree2 <> nil then
                    HojyoTree2.Free
                // 総合計に作成する
                else
                begin
                    with HojyoTree do
                    begin
                        SumNCode := 0;
                        EntNo := fnKasan_GetMaxEntNo(0) + 100;
                        UpdDateTM := now;
                        InsDateTM := now;
                        fnKasan_Update(HojyoTree,True);
                    end;
                end;
            end;

            DBGridChangeNodeEx(DBGrid);  // イベント発生にてTreeView情報を読み込む

            if not Assigned(m_SrchMTokui) then Exit;  // まだ生成されていなければ、ここで終了

            // 検索用加算先の作成
            if (m_SrchMTokui.NCode = HojyoTree.BasedNCode) then Kasan_CreateSearchParent();

            if Length(m_NCodeArray) <= 0 then
            begin
                fnSetFncType(0);
                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
            end;

        finally
            if HojyoTree <> nil then HojyoTree.Free;

            MemData_EventCtrl(Mem,True);
        end;
    end;

    // -----------------------------------------------------------------------------
    //  検索ボタン
    // -----------------------------------------------------------------------------
    procedure KasanSearch();
    var
        Send_Exp:TSend_Exp;
        Rcv_Exp:TRcv_Exp;
        MTokui : TMTokui;
    begin
//        MTokui := nil;
        try
            Send_Exp.TableName := 'MTOKUI';
            Send_Exp.Where := 'MTOKUI.RDelKBN = 0 and MTOKUI.TemplateKbn = 0';

            ShowExplorer(Send_Exp,Rcv_Exp);  // 検索EXP

            if Rcv_Exp.GCode = '' then Exit;

            MTokui := fnMTokui_GetData(Rcv_Exp.GCode);

            if MTokui = nil then Exit;

            if m_SrchMTokui <> nil then
            begin
                m_SrchMTokui.Free();
                m_SrchMTokui := nil;
            end;

            m_SrchMTokui := MTokui;

            Kasan_CreateSearchParent();  // 検索用加算先の作成

            if Length(m_NCodeArray) > 0 then
            begin
                fnKasan_Search(m_NCodeArray[0]);
                fnSetFncType(3);
                Kasan_Child_DBGrid.SetFocus;
                Kasan_Child_DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
            end
            else
            begin
                fnSetFncType(0);
                MjsMessageBoxEx(Self,'見つかりませんでした。','検索',mjInformation,mjOK,mjDefOK);
            end;

            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

        finally
//            MTokui := nil;
        end;
    end;

    // -----------------------------------------------------------------------------
    //  一覧(詳細)ボタン
    // -----------------------------------------------------------------------------
    procedure DspChange();
    var
        iRet : Integer;
    begin
        iRet := 0;
        if B_Syousai.Caption = '詳細(&T)' then  // 一覧 ⇒ 詳細
        begin
            TreeView_EventCtrl(VTreeView,False);
            PPanelTree.Visible := False;
            Root_PMTab.Items[PAGE_KASAN].Visible := True;
            B_Sort.Enabled := False;
            B_Search.Enabled := False;
            BSpeedButtonISClick(Sender);   // 既存のクリックイベント実行
            Root_PMTab.BorderCaption := '';      // タブのキャプションはクリアしておく
        end
        else                                    // 詳細 ⇒ 一覧
        begin
            if IsLimitCount() then
                iRet := MjsMessageBoxEx(Self, '画面表示に時間がかかる場合がありますが、よろしいですか？', '取引先登録', mjWarning, mjYesNo, mjDefNo);

            if (iRet = mrYes) or (not IsLimitCount() = True) then
            begin
                if Root_PMTab.Items.Selected = PAGE_KASAN then Root_PMTab.Items.Selected := PAGE_JITUZAI;

                TreeView_EventCtrl(VTreeView,True);
                PPanelTree.Visible := True;
                Root_PMTab.Items[PAGE_KASAN].Visible := False;
                Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Grid;
                Jituzai_PPanel_Card.Visible 	:= False;
                PPanelKasan.Visible := False;
                Jituzai_PPanel_Grid.Visible 	:= True;
                B_Delete.OnClick := BSpeedButtonDelClick;
                B_Sort.OnClick := BSpeedButtonSortClick;
                B_Search.OnClick := BSpeedButtonFindClick;
                B_Sort.Enabled := True;
                B_Search.Enabled := True;
                fnRead();

                Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');

                B_Syousai.Caption := '詳細(&T)';
            end;
        end;

    end;

// -----------------------------------------------------------------------------
//  ここからメイン
// -----------------------------------------------------------------------------
begin

    if Sender = B_Sort then      // 並び替え
    begin
        KasanSort();
        Exit;
    end;

    if Sender = B_SetUp then     // 設定
    begin
        SetUp();
        Exit;
    end;

    if (Sender = B_Delete) or (Sender = TPDelChild) then    // 削除
    begin
        KasanDelete();
        Exit;
    end;

    if Sender = B_Search then    // 検索
    begin
        KasanSearch();
        Exit;
    end;

    if Sender = B_Syousai then    // 一覧(詳細)
    begin
        DspChange();
        Exit;
    end;

end;

// -----------------------------------------------------------------------------
//  HojyoTreeの並び替え
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_Sort(Prog:TProgressBar;SumNCode:Extended=-1):Boolean;
var
	iEntNo		:	Integer;
	QueryRead	:	TMQuery;
	QueryWrite	:	TMQuery;
	sSvSumCode	:	Integer;
	iCount		:	Integer;
begin
    result := False;
    iEntNo := 0;
	QueryRead		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
	gfnJNTSELSetDbName(QueryRead, dbCorp_Select);		//<D10>

	QueryWrite		:= TMQuery.Create(Self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryWrite);
	gfnJNTSELSetDbName(QueryWrite, dbCorp_Select);		//<D10>

	SessionPractice(C_ST_PROCESS);

    try

        MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

        Prog.Visible := True;

        // 加算体系更新下準備
        QueryWrite.Close;
        QueryWrite.SQL.Clear;		 							// QueryFree 初期化
        QueryWrite.SQL.Add('Update HojyoTree Set EntNo = EntNo * -1 Where MasterKbn = :pMKBN and EntNo > 0');

        if SumNCode <> -1 then
        begin
            QueryWrite.SQL.Add('and SumNCode = :SumNCode');
            QueryWrite.SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
        end;

        QueryWrite.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
        if (QueryWrite.ExecSQL = False) then
        begin
            ErrorMessageDsp(QueryWrite);
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            Exit;
        end;

        Prog.Max := fnKasan_Count(SumNCode);
        Prog.Position := 0;
        iCount := 0;

        // 加算体系の読み込み
        QueryRead.Close;
        QueryRead.SQL.Clear;		 							// QueryFree 初期化
        QueryRead.SQL.Add('Select HT.SumNCode, HT.BasedNCode, HT.EntNo from HojyoTree HT  Left Outer Join MTOKUI MT');
        QueryRead.SQL.Add('on HT.BasedNCode = MT.NCode');
        QueryRead.SQL.Add('Where HT.MasterKbn = :pMKBN');

        if SumNCode <> -1 then
        begin
            QueryRead.SQL.Add('and HT.SumNCode = :SumNCode');
            QueryRead.SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
        end;

        QueryRead.SQL.Add('order by HT.SumNCode, MT.GCode');

        QueryRead.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;

        if not QueryRead.Open then
            showmessage(QueryRead.Errors.Text);
        QueryRead.FetchAll;

        sSvSumCode := -1;
        while QueryRead.Eof = False do
        begin
            if sSvSumCode <> QueryRead.GetFld('SumNCode').AsInteger then
                iEntNo := 100;

            QueryWrite.Close;
            QueryWrite.SQL.Clear;		 							// QueryFree 初期化
            QueryWrite.SQL.Add('Update HojyoTree Set EntNo =:NewENT Where MasterKbn = :pMKBN and SumNCode =:SUM and BasedNCode =:BASED and EntNo =:ENT');
            QueryWrite.SetFld('pMKBN').AsInteger	    := ucTORIHIKI;
            QueryWrite.SetFld('NewENT').AsInteger := iEntNo;
            QueryWrite.SetFld('SUM').AsString := QueryRead.GetFld('SumNCode').AsString;
            QueryWrite.SetFld('BASED').AsString := QueryRead.GetFld('BasedNCode').AsString;
            QueryWrite.SetFld('ENT').AsInteger := QueryRead.GetFld('EntNo').AsInteger;
            if (QueryWrite.ExecSQL = False) then
            begin
                ErrorMessageDsp(QueryWrite);
                MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                Exit;
            end;

            sSvSumCode := QueryRead.GetFld('SumNCode').AsInteger;
            iEntNo := iEntNo + 100;

            QueryRead.Next;

            Inc(iCount);
            Prog.Position := iCount;
        end;

        Prog.Visible := False;

        MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
        result := True;
    finally
        QueryDispose(QueryRead);										// Query 開放
        QueryDispose(QueryWrite);										// Query 開放

        SessionPractice(C_ED_PROCESS);
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系エラーチェック(登録時)
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnKasan_InsValidation(HojyoTree:THojyoTree;var ErrMsg:String);
var
    MST_Child  : TMTokui;
    HojyoTree_chk : THojyoTree;
    Qry : TMQuery;
    pSearchParent : ^Extended;  //<266> ADD
    ParentList : TList;  //<266> ADD
    idx : Integer;       //<266> ADD
begin
    ErrMsg := '';
    Qry := nil;
    MST_Child := nil;
    HojyoTree_chk := nil;
    idx := 0;  //<266> Add
    ParentList := TList.Create();  //<266> Add

    try
        if HojyoTree = nil then
        begin
            ErrMsg := 'マスタが生成されていません。';
            Exit;
        end;

        if HojyoTree.BasedNCode = 0 then
        begin
            ErrMsg := 'コードに誤りがあります。';
            Exit;
        end;

        if HojyoTree.SumNCode = HojyoTree.BasedNCode then
        begin
            ErrMsg := '加算先と同じコードの登録は出来ません。';
            Exit;
        end;

        // 加算先に既に登録済み？
        HojyoTree_chk := fnKasan_GetData(HojyoTree.BasedNCode,HojyoTree.SumNCode);
        if HojyoTree_chk <> nil then
        begin
            ErrMsg := '同一コードが登録済みです。';
            Exit;
        end;

        MST_Child := fnMTokui_GetData(HojyoTree.BasedNCode);

        if MST_Child <> nil then
        begin
            // 子供が合計の場合、合計の子供に加算先が含まれているか？(循環チェック)
            if MST_Child.SumKbn = 1 then
            begin
//<266> MOD St
{
                Qry := fnKasan_GetChild(MST_Child.NCode);
                if Qry <> nil then
                begin
                    with Qry do
                    begin
                        while EOF = False do
                        begin
                            // 子供に加算先合計が存在している？
                            if GetFld('NCode').AsFloat = HojyoTree.SumNCode then
                            begin
                                ErrMsg := '加算体系が重複しています。';
                                Exit;
                            end;
                            Next();
                        end;
                    end;
                end;
}

                new(pSearchParent);
                pSearchParent^ := MST_Child.NCode;
                ParentList.Add(pSearchParent);

                while (idx <= (ParentList.Count-1)) do
                begin
                    pSearchParent := ParentList.Items[idx];
                    Qry := fnKasan_GetChild(pSearchParent^);
                    if Qry <> nil then
                    begin
                        with Qry do
                        begin
                            while EOF = False do
                            begin
                                // 子供に加算先合計が存在している？
                                if GetFld('NCode').AsFloat = HojyoTree.SumNCode then
                                begin
                                    ErrMsg := '加算体系が重複しています。';
                                    Exit;
                                end;
                                // 合計のときリストに追加
                                if (GetFld('SumKbn').AsInteger = 1) then
                                begin
                                    new(pSearchParent);
                                    pSearchParent^ := GetFld('NCode').AsFloat;
                                    ParentList.Add(pSearchParent);
                                end;
                                Next();
                            end;
                        end;
                        QueryDispose(Qry);
                    end;

                    inc(idx);
                end;
//<266> MOD Ed
            end;
        end;
    finally
        if MST_Child <> nil then MST_Child.Free();

        if HojyoTree_chk <> nil then HojyoTree_chk.Free();

        QueryDispose(Qry);

//<266> ADD St
        for idx := 0 to (ParentList.Count -1) do
        begin
            pSearchParent := ParentList.Items[idx];
            Dispose(pSearchParent);
        end;
        ParentList.Free();
//<266> ADD Ed
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系エラーチェック(削除時)
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnKasan_DelValidation(HojyoTree:THojyoTree;var ErrMsg:String);
var
    Qry:TMQuery;
    MST_Child : TMTokui;
begin
    ErrMsg := '';
    Qry := nil;
    MST_Child := nil;

    try
        if HojyoTree = nil then
        begin
            ErrMsg := 'マスタが生成されていません。';
            Exit;
        end;

        // 親が総合計の場合、他の親に加算しているかチェックする
        if HojyoTree.SumNCode = 0 then
        begin
            Qry := fnKasan_GetParent(HojyoTree.BasedNCode);

            if Qry <> nil then
            begin
                // 他の親に加算していない？
                if Qry.RecordCount <= 0 then
                begin
                    ErrMsg := '他の合計マスタに加算されていないため、削除できません。';
                    Exit;
                end;
            end;
        end;

        MST_Child := fnMTokui_GetData(HojyoTree.BasedNCode);

        if MST_Child <> nil then
        begin
            // 合計だった場合、加算元(子)が存在しているかチェックする
            if MST_Child.SumKbn = 1 then
            begin
                // 加算元(子)情報の取得
                Qry := fnKasan_GetChild(MST_Child.NCode);

                if Qry <> nil then
                begin
                    if Qry.RecordCount <> 0 then
                    begin
                        ErrMsg := '子となる加算先が登録されているため、削除できません。';
                        Exit;
                    end;
                end;
            end;
        end;
    finally
        if MST_Child <> nil then MST_Child.Free();

        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系の検索
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKasan_Search(SumNCode:Extended):Boolean;
begin
    result := True;
    try
        if m_SrchMTokui = nil then Exit;

        MemData_EventCtrl(MemKasanParent,False);
        DBGrid_EventCtrl(Kasan_Parent_DBGrid,False);

        if SumNCode <> 0 then
        begin
            MemKasanParent.First;

            while MemKasanParent.EOF = False do
            begin
                if SumNCode = MemKasanParent.FieldByName('NCode').AsFloat then
                begin
                    break;
                end;

                MemKasanParent.Next;
            end;
        end
        // 総合計より検索
        else
        begin
            MemKasanParent.Last;
        end;

        DBGridChangeNodeEx(Kasan_Parent_DBGrid);

        MemData_EventCtrl(MemKasanChild,False);
        DBGrid_EventCtrl(Kasan_Child_DBGrid,False);

        MemKasanChild.First;

        // 加算元グリッドを検索コードまで行移動
        while MemKasanChild.EOF = False do
        begin
            if m_SrchMTokui.NCode = MemKasanChild.FieldByName('NCode').AsFloat then break;
            MemKasanChild.Next;
        end;

        DBGridChangeNodeEx(Kasan_Child_DBGrid);
    finally
        MemData_EventCtrl(MemKasanChild,True);
        DBGrid_EventCtrl(Kasan_Child_DBGrid,True);
        MemData_EventCtrl(MemKasanParent,True);
        DBGrid_EventCtrl(Kasan_Parent_DBGrid,True);
    end;
end;

// -----------------------------------------------------------------------------
//  TreeView・グリッドの読み込み
// -----------------------------------------------------------------------------
function  TJNTCRP004001f.fnRead():Boolean;
var
    iSumKbn : Integer;
begin
    try
        MemPost_Sw	:= 1;
        m_fAccessTree    := False;

        // TreeView 作成
        fnRebuildTreeViewItems ();

        // TreeView はぐれ作成
        if fnRebuildTreeViewItemsHagure () = False then
        begin
            raise EMathError.Create('加算体系の表示に失敗しました｡');
            Close;
            exit;
        end;

        // Grid 初期表示
        TBaseNode	:= VTreeView.Items[0];
        TBaseNodeSv	:= VTreeView.Items[0];

        // 実在 or 合計？
        if Root_PMTab.Items.Selected <> PAGE_JITUZAI then iSumKbn := 1
        else                                              iSumKbn := 0;

        fnCreateGrid (TBaseNode, iSumKbn);
        if JHojyoMA_DMemData.Eof = False then
        begin
            if Jituzai_DdxDBGrid.CanFocus then
                Jituzai_DdxDBGrid.SetFocus;
            JHojyoMA_DMemData.DisableControls;
            JHojyoMA_DMemData.First;
            JHojyoMA_DMemData.EnableControls;
        end
        else
            fnClearCard  (0);

        MemPost_Sw	:= 0;
        m_fAccessTree   := True;
    except
//<D10>	result := False;
//<D10>	Exit;
//<D10>↓
        on e:Exception do
        begin
            ShowMessage(e.Message);
			result := False;
			Exit;
        end
//<D10>↑
    end;

    Read_ON();

    result := True;
end;

// -----------------------------------------------------------------------------
//  詳細画面初回起動の基準となる件数以上か？
// -----------------------------------------------------------------------------
function TJNTCRP004001f.IsLimitCount():Boolean;
begin
    result := giAllCnt >= LIMIT_COUNT;
end;

// ----------------------------------------------------------------------------
// 加算体系の検索
// ----------------------------------------------------------------------------
procedure TJNTCRP004001f.FindMtokuiExecute(Sender : TObject);
var
    sGCode : String;
    iCnt : Integer;
    MTokui : TMTokui;
begin

    if m_SrchMTokui = nil then Exit;

    MTokui := nil;

    sGCode := MemKasanParent.FieldByName('GCode').AsString;

    for iCnt := 0 to High(m_NCodeArray) do
    begin
        try
            MTokui := fnMTokui_GetData(m_NCodeArray[iCnt]);

            if MTokui = nil then continue;

            if fnMTokui_CodeEdit(MTokui.GCode) > sGCode then
            begin
                fnKasan_Search(m_NCodeArray[iCnt]);
                Exit;
            end;
        finally
            MTokui.Free();
        end;
    end;

end;

// -----------------------------------------------------------------------------
//  検索用加算先親の作成
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Kasan_CreateSearchParent();
var
    Qry : TMQuery;
    idx : Integer;
begin
    idx := 0;

    if m_SrchMTokui = nil then Exit;

    try
        Qry := nil;

        SetLength(m_NCodeArray,0);

        // 加算先の親を取得する
        Qry := fnKasan_GetParent(m_SrchMTokui.NCode);

        if Qry = nil then Exit;

        SetLength(m_NCodeArray,Qry.RecordCount);

        // 加算先の親をセット
        while Qry.EOF = False do
        begin
            m_NCodeArray[idx] := Qry.GetFld('NCode').AsFloat;
            Qry.Next;
            inc(idx);
        end;
    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  取引先データ読み込みフラグを返す
// -----------------------------------------------------------------------------
function TJNTCRP004001f.IsRead():Boolean;
begin
    result := m_bRead;
end;

// -----------------------------------------------------------------------------
//  取引先データ読み込みフラグをON
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Read_ON();
begin
    m_bRead := True;
end;

// -----------------------------------------------------------------------------
//  取引先データ読み込みフラグをOFF
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Read_OFF();
begin
    m_bRead := False;
end;

// -----------------------------------------------------------------------------
//  StatusBarへセット
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.SetGuidance(Value:string);
begin
    SStatusBar.SimpleText := Value;
end;

// -----------------------------------------------------------------------------
//  StatusBarクリア
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.GuidanceClear();
begin
    SStatusBar.SimpleText := '';
end;

// -----------------------------------------------------------------------------
//  起動モード取得   0:一覧起動 1:詳細起動
// -----------------------------------------------------------------------------
function TJNTCRP004001f.GetStartMode():integer;
begin
    if (m_iStartMode = -1) then
    begin
        m_iStartMode := StrToIntDef(m_APGFile.GetValue(DSPTYPE),0);
    end;

    result := m_iStartMode;
end;

// -----------------------------------------------------------------------------
//  起動モードセット
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.SetStartMode(Value:Integer);
begin
    m_iStartMode := Value;
end;

//↓<2257>
//----------------------------------------------------------------
//  取引先コピー【Fc8】
//  取引先コピー用のストアドを流す
//----------------------------------------------------------------
procedure	TJNTCRP004001f.fnSetFldCopy();
var
    lvExpSend	:   rcJNTExpSend;
    lvExpRecv	:   rcJNTExpRecv;
    iExpRtn		:   Integer;
	StrGCode	:   string;
	lvintf1TKBN	:	integer;
	lvintf1SKBN	:	integer;
	lvQry		:	TMQuery;
begin
	//初期処理
	lvQry			:= TMQuery.Create( Self );					//	MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, lvQry);
	gfnJNTSELSetDbName(lvQry, dbCorp_Select);		//<D10>
	StrGCode		:= '';
	uvCopyMtokui	:= false;
	uvBeforeNCode	:= 0;

	m_CodeReturn	:= True;	// <MYN2>取引先ｺﾋﾟｰ

    fnJNTExpMakeParam(@lvExpSend);   //ﾊﾟﾗﾒｰﾀ初期設定
    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;       //MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;           //TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;


    lvExpSend.MasterKbn     :=  22;         //マスタ区分＝
    lvExpSend.ModulKbn      :=  0;                  //モジュール区分
    lvExpSend.PatternNo     :=  1;                  //マスタ区分＝
    lvExpSend.TBarNM        :=  Jituzai_LLabel_GCode.Caption + '検索ｴｸｽﾌﾟﾛｰﾗ';
    lvExpSend.TableName     :=  'MTOKUI';
    lvExpSend.TrRootCaption :=  Jituzai_LLabel_GCode.Caption;
    lvExpSend.WhereStr      :=  ' MTOKUI.RDelKBN = 0 and MTOKUI.SumKBN = ' + intToStr(Root_PMTab.Items.Selected)
                                + ' and MTOKUI.TemplateKbn = 0'
                                + ' and MTOKUI.syokuchikbn = 0';

	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		StrGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);
	end
	else
	begin
		StrGCode	:= f0TGCode.Text;
	end;

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;

    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
		with lvQry do
		//住所系の更新用に変更前のコピー元の住所系の情報を取得
		begin
			try
                Close;
                SQL.Clear;
                SQL.Add('select ma.HojyoKbn1 ma_HojyoKbn1 , ma.HojyoKbn2 ma_HojyoKbn2 '
					+	',ma.SisanHojyoKbn1 ma_SisanHojyoKbn1 , ma.SisanHojyoKbn2 ma_SisanHojyoKbn2 , ma.SisanHojyoKbn3 ma_SisanHojyoKbn3 '
					+	',ma.postno1 ma_postno1, ma.postno2 ma_postno2, ma.ads1 ma_ads1 '
                	+	',ma.ads2 ma_ads2, ma.tel1 ma_tel1, ma.tel2 ma_tel2, ma.fax1 ma_fax1 '
                	+	',se1.postno1 sel1_postno1, se1.postno2 sel1_postno2, se1.ads1 sel1_ads1 '
                	+	',se1.ads2 sel1_ads2, se1.tel1 sel1_tel1, se1.tel2 sel1_tel2, se1.fax1 sel1_fax1 '
                	+	',se2.postno1 sel2_postno1, se2.postno2 sel2_postno2, se2.ads1 sel2_ads1 '
                	+	',se2.ads2 sel2_ads2, se2.tel1 sel2_tel1, se2.tel2 sel2_tel2, se2.fax1 sel2_fax1 '
                	+	',mas.postno1 mas_postno1, mas.postno2 mas_postno2, mas.ads1 mas_ads1 '
                	+	',mas.ads2 mas_ads2, mas.tel1 mas_tel1, mas.tel2 mas_tel2, mas.fax1 mas_fax1 '
                	+	',dep.postno1 dep_postno1, dep.postno2 dep_postno2, dep.ads1 dep_ads1 '
                	+	',dep.ads2 dep_ads2, dep.tel1 dep_tel1, dep.tel2 dep_tel2, dep.fax1 dep_fax1 '
                	+	',crd.postno1 crd_postno1, crd.postno2 crd_postno2, crd.ads1 crd_ads1 '
                	+	',crd.ads2 crd_ads2, crd.tel1 crd_tel1, crd.tel2 crd_tel2, crd.fax1 crd_fax1 '
                	+	',pay.postno1 pay_postno1, pay.postno2 pay_postno2, pay.ads1 pay_ads1 '
                	+	',pay.ads2 pay_ads2, pay.tel1 pay_tel1, pay.tel2 pay_tel2, pay.fax1 pay_fax1 '

                	+	' from MTOKUI ma '
                	+	'Left Outer Join MTOKUI_SEL se1 On ma.NCode = se1.BaseNCode  and se1.RecKbn= 1 '
                	+	'Left Outer Join MTOKUI_SEL se2 On ma.NCode = se2.BaseNCode  and se2.RecKbn= 2 '

                	+	'Left Outer Join MTOKUI_MAS mas On ma.NCode = mas.BaseNCode '
                	+	'Left Outer Join MTOKUI_DEP dep On ma.NCode = dep.BaseNCode '
                	+	'Left Outer Join MTOKUI_CRD crd On ma.NCode = crd.BaseNCode '
                	+	'Left Outer Join MTOKUI_PAY pay On ma.NCode = pay.BaseNCode '

                	+	'Where ma.RDelKbn=0 and ma.GCode=:strGCode ');

				if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                begin
            		SetFld('strGCode').AsString		:= Format ('%.16d', [StrToInt64 (Trim(lvExpRecv.GCode))]) ;
                end
                else
                begin
            		SetFld('strGCode').AsString		:= lvExpRecv.GCode;
                end;
                Open;
				m_MTOKUI_ORG.HojyoKbn1				:= FieldByName('ma_HojyoKbn1').AsInteger;
				m_MTOKUI_ORG.HojyoKbn2				:= FieldByName('ma_HojyoKbn2').AsInteger;
				m_MTOKUI_ORG.SisanHojyoKbn1			:= FieldByName('ma_SisanHojyoKbn1').AsInteger;
				m_MTOKUI_ORG.SisanHojyoKbn2			:= FieldByName('ma_SisanHojyoKbn2').AsInteger;
				m_MTOKUI_ORG.SisanHojyoKbn3			:= FieldByName('ma_SisanHojyoKbn3').AsInteger;

				m_MTOKUI_ORG.PostNo1				:= FieldByName('ma_PostNo1').AsInteger;
                m_MTOKUI_ORG.PostNo2				:= FieldByName('ma_PostNo2').AsInteger;
                m_MTOKUI_ORG.Ads1					:= FieldByName('ma_Ads1').AsString;
                m_MTOKUI_ORG.Ads2					:= FieldByName('ma_Ads2').AsString;
                m_MTOKUI_ORG.Tel1					:= FieldByName('ma_Tel1').AsString;
                m_MTOKUI_ORG.Tel2					:= FieldByName('ma_Tel2').AsString;
                m_MTOKUI_ORG.Fax1					:= FieldByName('ma_Fax1').AsString;
                m_arMTOKUI_COPY[tbMAS].PostNo1		:= FieldByName('mas_PostNo1').AsInteger;
                m_arMTOKUI_COPY[tbMAS].PostNo2		:= FieldByName('mas_PostNo2').AsInteger;
                m_arMTOKUI_COPY[tbMAS].Ads1			:= FieldByName('mas_Ads1').AsString;
                m_arMTOKUI_COPY[tbMAS].Ads2			:= FieldByName('mas_Ads2').AsString;
                m_arMTOKUI_COPY[tbMAS].Tel1			:= FieldByName('mas_Tel1').AsString;
                m_arMTOKUI_COPY[tbMAS].Tel2			:= FieldByName('mas_Tel2').AsString;
                m_arMTOKUI_COPY[tbMAS].Fax1			:= FieldByName('mas_Fax1').AsString;
                m_arMTOKUI_COPY[tbSEL1].PostNo1		:= FieldByName('sel1_PostNo1').AsInteger;
                m_arMTOKUI_COPY[tbSEL1].PostNo2		:= FieldByName('sel1_PostNo2').AsInteger;
                m_arMTOKUI_COPY[tbSEL1].Ads1		:= FieldByName('sel1_Ads1').AsString;
                m_arMTOKUI_COPY[tbSEL1].Ads2		:= FieldByName('sel1_Ads2').AsString;
                m_arMTOKUI_COPY[tbSEL1].Tel1		:= FieldByName('sel1_Tel1').AsString;
                m_arMTOKUI_COPY[tbSEL1].Tel2		:= FieldByName('sel1_Tel2').AsString;
                m_arMTOKUI_COPY[tbSEL1].Fax1		:= FieldByName('sel1_Fax1').AsString;
                m_arMTOKUI_COPY[tbSEL2].PostNo1		:= FieldByName('sel2_PostNo1').AsInteger;
                m_arMTOKUI_COPY[tbSEL2].PostNo2		:= FieldByName('sel2_PostNo2').AsInteger;
                m_arMTOKUI_COPY[tbSEL2].Ads1		:= FieldByName('sel2_Ads1').AsString;
                m_arMTOKUI_COPY[tbSEL2].Ads2		:= FieldByName('sel2_Ads2').AsString;
                m_arMTOKUI_COPY[tbSEL2].Tel1		:= FieldByName('sel2_Tel1').AsString;
                m_arMTOKUI_COPY[tbSEL2].Tel2		:= FieldByName('sel2_Tel2').AsString;
                m_arMTOKUI_COPY[tbSEL2].Fax1		:= FieldByName('sel2_Fax1').AsString;
                m_arMTOKUI_COPY[tbCRD].PostNo1		:= FieldByName('crd_PostNo1').AsInteger;
                m_arMTOKUI_COPY[tbCRD].PostNo2		:= FieldByName('crd_PostNo2').AsInteger;
                m_arMTOKUI_COPY[tbCRD].Ads1			:= FieldByName('crd_Ads1').AsString;
                m_arMTOKUI_COPY[tbCRD].Ads2			:= FieldByName('crd_Ads2').AsString;
                m_arMTOKUI_COPY[tbCRD].Tel1			:= FieldByName('crd_Tel1').AsString;
                m_arMTOKUI_COPY[tbCRD].Tel2			:= FieldByName('crd_Tel2').AsString;
                m_arMTOKUI_COPY[tbCRD].Fax1			:= FieldByName('crd_Fax1').AsString;
                m_arMTOKUI_COPY[tbPAY].PostNo1		:= FieldByName('pay_PostNo1').AsInteger;
                m_arMTOKUI_COPY[tbPAY].PostNo2		:= FieldByName('pay_PostNo2').AsInteger;
                m_arMTOKUI_COPY[tbPAY].Ads1			:= FieldByName('pay_Ads1').AsString;
                m_arMTOKUI_COPY[tbPAY].Ads2			:= FieldByName('pay_Ads2').AsString;
                m_arMTOKUI_COPY[tbPAY].Tel1			:= FieldByName('pay_Tel1').AsString;
                m_arMTOKUI_COPY[tbPAY].Tel2			:= FieldByName('pay_Tel2').AsString;
                m_arMTOKUI_COPY[tbPAY].Fax1			:= FieldByName('pay_Fax1').AsString;
                m_arMTOKUI_COPY[tbDEP].PostNo1		:= FieldByName('dep_PostNo1').AsInteger;
                m_arMTOKUI_COPY[tbDEP].PostNo2		:= FieldByName('dep_PostNo2').AsInteger;
                m_arMTOKUI_COPY[tbDEP].Ads1			:= FieldByName('dep_Ads1').AsString;
                m_arMTOKUI_COPY[tbDEP].Ads2			:= FieldByName('dep_Ads2').AsString;
                m_arMTOKUI_COPY[tbDEP].Tel1			:= FieldByName('dep_Tel1').AsString;
                m_arMTOKUI_COPY[tbDEP].Tel2			:= FieldByName('dep_Tel2').AsString;
                m_arMTOKUI_COPY[tbDEP].Fax1			:= FieldByName('dep_Fax1').AsString;
			finally
            	Close;
            	Free;
			end;
		end;


		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
           f0NGCode.value	:= StrToFloat(lvExpRecv.GCode);
		end
        else
		begin
           f0TGCode.Text	:= lvExpRecv.GCode;
		end;

        fnCngCodeProperty(True);

		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			JituzaiEditExit(f0NGCode);
            f0NGCode.Value  := StrToFloat(StrGCode);
		end
		else
		begin
			JituzaiEditExit(f0TGCode);
            f0TGCode.text	:=StrGCode;
		end;
		uvBeforeNCode := lvExpRecv.NCode;				//内部コードの取得、取引先コピー用ｽﾄｱﾄﾞを流すため。
		freeItem := fnFreeItemGetRec(uvBeforeNCode);	//コピー元のフリー項目を取得します
    end;
	f0Name.Caption := '';

    // 締日変更情報の初期化
    // 得意先
    uvENDKAISU_T      := 0;                                 // 締回数
    uvChangeFL_Sime   := True;                              // 締日変更可能
    uvChangeFL_T      := True;                              // 特殊変更可能
    uvChangeFL_Z      := True;                              // 随時変更可能
    // 仕入先
    uvENDKAISU_S      := 0;                                 // 締回数
    uvChangeFL_Sime_S := True;                              // 締日変更可能
    uvChangeFL_T_S    := True;                              // 特殊変更可能
    uvChangeFL_Z_S    := True;                              // 随時変更可能

    uvChangeFL_Kounyu   := True;                            // 資産購入先採用区分変更可能
    uvChangeFL_Baikyaku := True;                            // 資産売却先採用区分変更可能
    uvChangeFL_Lease    := True;                            // リース取引先採用区分変更可能
    uvChangeFL_Crd      := True;                            // 債権情報をチェック用得意先採用区分変更可能
    uvChangeFL_Pay      := True;                            // 債務情報をチェック用仕入先採用区分変更可能

    //ﾁｪｯｸがはしると値がクリアされてしまうため、ｺﾋﾟｰ直後の状態を取っておく
    lvintf1TKBN := f1TKBN.AsInteger;
    lvintf1SKBN := f1SKBN.AsInteger;

	fnChgCmpEna(True,f1TSKBN);
	fnChgCmpEna(True,f1SSKBN);
	f1TSKBNClick(f1TSKBN);
	f1TSKBNClick(f1SSKBN);

    //ｺﾋﾟｰ直後の状態をセット
    f1TKBN.Value := lvintf1TKBN;
    f1SKBN.Value := lvintf1SKBN;
    fnSeiKbn_EntryControl;
    fnSeiKbn_EntryControl_SI;

	//付箋を使えなくする。
    B_Delete.Enabled	:= False;
    B_Fusen.Enabled		:= False;
    B_FusenBar.Enabled	:= False;
	f1Fusen1.Visible	:= False;
	f1Fusen2.Visible	:= False;
	f1Fusen3.Visible	:= False;
	f1Fusen4.Visible	:= False;

// <MYN> ins -s
    // 個人番号はコピーしない
	if (f0MYNKbn.AsInteger = 1) then
	    f0MYNNo.Text	:= '';
// <MYN> ins -e
// <MYN9> ins -s
	// 個人番号キーはコピーしない
	m_sSaveKojinKey	:= '';
// <MYN9> ins -e

    fnSetFncType(2);	//EXITイベントを流した時点でfnSetFncType(1)に変更されてしまうため、(2)を入れなおします。
    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

    uvCopyMtokui	:= true;


	MTOKUI_DMQuery.Close;		//<2257-5>MTOKUI_DMQueryをクリアする事で、新規扱いの流れに乗せる。


	abort;

end;

//=========================================================
//
//
//=========================================================
procedure TJNTCRP004001f.CopyMtokuiExecute(Sender: TObject);
begin
	fnSetFldCopy
end;


//==========================================================
// fnSetFncTypeの引数を決め、ﾌｧﾝｸｼｮﾝを表示させる。
//==========================================================
procedure TJNTCRP004001f.fnSetFncTypeSelect();
var
	Qry				: TMQuery;
	isumkbn			: integer;
	isyokuchikbn	: integer;
	strGCode		: String ;
	iKbn			: integer;
begin
    isumkbn := Root_PMTab.Items.Selected;					//  実在情報から呼ばれた時は0、合計情報から呼ばれたら1
{<2257-7>
    Qry 	:= TMQuery.Create( Self );						//	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, Qry );		//	DBとMQueryの接続
<2257-7>}
    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then		//	属性によりコード編集を変更する。
    begin
        strGCode	:= f0TGCode.Text;
        strGCode    := TrimRight(strGCode);
    end
    else
    begin
        strGCode	:= Format ('%.16d', [Trunc (f0NGCode.Value)]);
    end;

    // sumkbnの取得・ユニークのﾁｪｯｸ
//<2257-7>    try
//<2257-7>        with Qry do
        with MTOKUI_DMQuery do
        begin
{<2257-7>
            Close;
            SQL.Clear;
            SQL.Add(' Select SumKbn, syokuchikbn '
				  + ' from MTOKUI '
            	  + ' Where  RDelKbn=0 and GCode=:strGCode ');
            SetFld('strGCode').AsString	:= strGCode;
            Open;
<2257-7>}

            if Eof = False then
            begin
                isumkbn 		:= FieldByName('SUMKBN').asInteger;
				isyokuchikbn	:= FieldByName('syokuchikbn').asInteger;
            end
            else
            begin
                isumkbn := 2;		//isumkbnには実在取引先は0、合計取引先は1、新規の取引先なら2が入ります。
            end;
        end;
{<2257-7>
    finally
        Qry.Close;
        Qry.Free;
    end;
<2257-7>}
    begin
        if isyokuchikbn <> 1 then //諸口以外の時
        begin
			if (B_Syousai.Caption <> '一覧(&T)') or (strGCode = '') then
			//画面が一覧の時、又は取引先ｺｰﾄﾞ欄が空の時は表示しない
			begin
				ikbn := 0;
			end
			else
			//詳細の時
			begin
                if	isumkbn	<> 2 then
                //新規でない時
                begin
//↓<2257FC>
                    //取引先ｺｰﾄﾞにフォーカスがある時は表示しない。
                    if (m_AcControl = f0TGCode) or (m_AcControl = f0NGCode) then
                    begin
                        ikbn := 0;
                    end
					else
					begin
                    	ikbn := 1;	//ﾌﾘｰ項目登録のみ表示
					end;
//↑<2257FC>
//<2257FC>                    ikbn := 1;	//ﾌﾘｰ項目登録のみ表示
                end
                else
                //新規の時
                begin
                    if LSinsei.Visible	then
                    //申請書参照の時
                    begin
                        ikbn := 1;
                    end
                    else
                    //申請書参照でない
                    begin
                        //正式名称にフォーカスがある
                        if m_AcControl = f0LongName then
                        begin
                            ikbn := 2;
                        end
//↓<2257FC>
						//取引先ｺｰﾄﾞにフォーカスがある時は表示しない。
						else if (m_AcControl = f0TGCode) or (m_AcControl = f0NGCode) then
                        begin
                       	     ikbn := 0;
                        end
//↑<2257FC>
                        else
                        //正式名称以外にフォーカスがある時はフリー項目登録のみを表示
                        begin
                            ikbn := 1;
                        end;
                    end;
                end;
			end;
		end
		else
		//諸口の時
		begin
			ikbn := 0;
		end;
	end;
    fnSetFncType(iKbn);
	MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
end;
//↑<2257>
//<502_001> ADD St
//=========================================
// 概要：採用フラグの変更が可能か判定する
//=========================================
function TJNTCRP004001f.ChangeSaiyoEnabled(SaiyoKbn : Integer;GCode:string;var ErrMsg:string):Boolean;
var
    MTokui:TMTokui;
    bTokui,
    bShiire,
    bKounyu,
    bBaikyaku,
    bLease : Boolean;
    SaveEvent : TNotifyEvent;
    //=========================================
    // 概要：採用フラグの制御
    //=========================================
    procedure EnableControl();
    begin
        // 得意先
        if (bTokui = false) and (f1TSKBN.Checked = false) then
        begin
            SaveEvent := f1TSKBN.OnClick;
            f1TSKBN.OnClick := nil;
            f1TSKBN.Checked := true;
            f1TSKBN.OnClick := SaveEvent;
        end;
        fnChgCmpEna(f1TSKBN.Checked and (f0ECOUNTRY.AsInteger = 1),f1TKBN); // 得意先区分

        // 仕入先
        if (bShiire = false) and (f1SSKBN.Checked = false) then
        begin
            SaveEvent := f1SSKBN.OnClick;
            f1SSKBN.OnClick := nil;
            f1SSKBN.Checked := true;
            f1SSKBN.OnClick := SaveEvent;
        end;
        fnChgCmpEna(f1SSKBN.Checked,f1SKBN);            // 仕入先区分

        // 購入先
        if (bKounyu = false) and (f1SHojyoKbn1.Checked = false) then
        begin
            SaveEvent := f1SHojyoKbn1.OnClick;
            f1SHojyoKbn1.OnClick := nil;
            f1SHojyoKbn1.Checked := true;
            f1SHojyoKbn1.OnClick := SaveEvent;
        end;
        // 売却先
        if (bBaikyaku = false) and (f1SHojyoKbn2.Checked = false) then
        begin
            SaveEvent := f1SHojyoKbn2.OnClick;
            f1SHojyoKbn2.OnClick := nil;
            f1SHojyoKbn2.Checked := true;
            f1SHojyoKbn2.OnClick := SaveEvent;
        end;
        // リース
        if (bLease = false) and (f1SHojyoKbn3.Checked = false) then
        begin
            SaveEvent := f1SHojyoKbn3.OnClick;
            f1SHojyoKbn3.OnClick := nil;
            f1SHojyoKbn3.Checked := true;
            f1SHojyoKbn3.OnClick := SaveEvent;
        end;

        f1TSKBN.Enabled := bTokui;
        f1SSKBN.Enabled := bShiire;
        f1SHojyoKbn1.Enabled := bKounyu;
        f1SHojyoKbn2.Enabled := bBaikyaku;
        f1SHojyoKbn3.Enabled := bLease;
    end;
// ここからメイン
begin
    result := true;
    bTokui := true;
    bShiire := true;
    bKounyu := true;
    bBaikyaku := true;
    bLease := true;
    ErrMsg := '';

    TagClear_Saiyo(); // チェック完了済みにする

    MTokui := nil;

    try
        if (GCode = '') then Exit;

        MTokui := fnMTokui_GetData(GCode);

        if (MTokui = nil) then Exit;

        fnDataRead(MTokui.GCode,MTokui.SumKbn,0);

        // 得意先採用フラグ
        if (uvChangeFL_Sime = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_TOKUI)) then
                ErrMsg := MSG_SAIYO_CHANGEERR;
            result := false;
            bTokui := result;
        end;

        if (uvChangeFL_Crd = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_TOKUI)) then
                ErrMsg := MSG_SAIYO_CHANGEERR_CRD;
            result := false;
            bTokui := result;
        end;

        // 仕入先採用フラグ
        if (uvChangeFL_Sime_S = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_SHIIRE)) then
                ErrMsg := MSG_SAIYO_CHANGEERR;
            result := false;
            bShiire := result;
        end;

        if (uvChangeFL_Pay = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_SHIIRE)) then
                ErrMsg := MSG_SAIYO_CHANGEERR_PAY;
            result := false;
            bShiire := result;
        end;


        // 購入先採用フラグ
        if (uvChangeFL_Kounyu = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_KOUNYU)) then
                ErrMsg := MSG_SAIYO_CHANGEERR_DEP;
            result := false;
            bKounyu := result;
        end;


        // 売却先採用フラグ
        if (uvChangeFL_Baikyaku = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_BAIKYAKU)) then
                ErrMsg := MSG_SAIYO_CHANGEERR_DEP;
            result := false;
            bKounyu := result;
        end;


        // リース採用フラグ
        if (uvChangeFL_Lease = false) then
        begin
            if ((ErrMsg = '') and (SaiyoKbn = S_LEASE)) then
                ErrMsg := MSG_SAIYO_CHANGEERR_DEP;
            result := false;
            bLease := result;
        end;

        EnableControl();  // コンポーネントの制御

    finally
        if Assigned(MTokui) then FreeAndNil(MTokui);
    end;
end;

//<502_001> ADD St
//==============================================================
// 概要：採用フラグチェックを行うコンポーネントにTagをセットする
//==============================================================
procedure TJNTCRP004001f.TagSet_Saiyo(Saiyokbn:integer=-1);
begin

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_TOKUI)) then
        TagSet_SaiyoTokui(S_TOKUI);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_SHIIRE)) then
        TagSet_SaiyoShiire(S_SHIIRE);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_KOUNYU)) then
        TagSet_SaiyoKounyu(S_KOUNYU);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_BAIKYAKU)) then
        TagSet_SaiyoBaikyaku(S_BAIKYAKU);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_LEASE)) then
        TagSet_SaiyoLease(S_LEASE);
end;

//==============================================================
// 概要：採用フラグチェックを行うコンポーネントにTagをセットする
//==============================================================
procedure TJNTCRP004001f.TagSet_SaiyoTokui(kbn:Integer);
begin
    // 得意先関係
    f1TSKBN.Tag := kbn;
    f1TKBN.Tag := kbn;
    f1NClosingDay1.Tag := kbn;
    f1NClosingDay2.Tag := kbn;
    f1NClosingDay3.Tag := kbn;
    f1NMonth1.Tag := kbn;
    f1NMonth2.Tag := kbn;
    f1NMonth3.Tag := kbn;
    f1NDay1.Tag := kbn;
    f1NDay2.Tag := kbn;
    f1NDay3.Tag := kbn;
    f1NHoliday1.Tag := kbn;
    f1NHoliday2.Tag := kbn;
    f1NHoliday3.Tag := kbn;
    f1NSeino.Tag := kbn;
    f1NSSite.Tag := kbn;   //<502_005> ADD
end;

//==============================================================
// 概要：採用フラグチェックを行うコンポーネントにTagをセットする
//==============================================================
procedure TJNTCRP004001f.TagSet_SaiyoShiire(kbn:Integer);
begin
    // 仕入先関係
    f1SSKBN.Tag := kbn;
    f1SKBN.Tag := Kbn;
    f1SClosingDay1.Tag := kbn;
    f1SClosingDay2.Tag := kbn;
    f1SClosingDay3.Tag := kbn;
    f1SMonth1.Tag := kbn;
    f1SMonth2.Tag := kbn;
    f1SMonth3.Tag := kbn;
    f1SDay1.Tag := kbn;
    f1SDay2.Tag := kbn;
    f1SDay3.Tag := kbn;
    f1SHoliday1.Tag := kbn;
    f1SHoliday2.Tag := kbn;
    f1SHoliday3.Tag := kbn;
    f1SSeino.Tag := kbn;
    f1SSSite.Tag := kbn;   //<502_005> ADD
end;

//==============================================================
// 概要：採用フラグチェックを行うコンポーネントにTagをセットする
//==============================================================
procedure TJNTCRP004001f.TagSet_SaiyoKounyu(kbn:Integer);
begin
    // 購入先
    f1SHojyoKbn1.Tag := kbn;
end;

//==============================================================
// 概要：採用フラグチェックを行うコンポーネントにTagをセットする
//==============================================================
procedure TJNTCRP004001f.TagSet_SaiyoBaikyaku(kbn:Integer);
begin
    // 売却
    f1SHojyoKbn2.Tag := kbn;
end;

//==============================================================
// 概要：採用フラグチェックを行うコンポーネントにTagをセットする
//==============================================================
procedure TJNTCRP004001f.TagSet_SaiyoLease(kbn:Integer);
begin
    // リース
    f1SHojyoKbn3.Tag := kbn;
end;

//==============================================================
// 概要：採用フラグチェックを行うコンポーネントのTagをクリアする
//==============================================================
procedure TJNTCRP004001f.TagClear_Saiyo(Saiyokbn:integer=-1);
begin
    if ((SaiyoKbn = -1) or (SaiyoKbn = S_TOKUI)) then
        TagSet_SaiyoTokui(S_NOCHECK);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_SHIIRE)) then
        TagSet_SaiyoShiire(S_NOCHECK);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_KOUNYU)) then
        TagSet_SaiyoKounyu(S_NOCHECK);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_BAIKYAKU)) then
        TagSet_SaiyoBaikyaku(S_NOCHECK);

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_LEASE)) then
        TagSet_SaiyoLease(S_NOCHECK);
end;

//==============================================================
// 概要：採用情報のチェック
//==============================================================
function TJNTCRP004001f.SaiyoCheck(Sender:TObject):Boolean;
var
    sMsg : String;
    sGCode : string;
    SaveEvent : TNotifyEvent;
begin

    result := true;
    if (((Sender is TMNumEdit) or (Sender is TMComboBox) or (Sender is TMCheckBox)) and
         (m_bShowStart = True)) then
    begin
        // Tagが設定されている場合だけチェックする
        if (TWinControl(Sender).Tag <> S_NOCHECK) then
        begin
            try
                SetGuidance(S_CHKMSG);
                if (f0NGCode.Visible) then sGCode := f0NGCode.Text
                else sGCode := f0TGCode.Text;

                // 変更可能かどうかをチェックする
                if (not ChangeSaiyoEnabled(TWinControl(Sender).Tag,sGCode,sMsg)) then
                begin
                    try
                        fnSeiKbn_EntryControl();    // 得意先のコンポーネント制御
                        fnSeiKbn_EntryControl_SI(); // 仕入先のコンポーネント制御

                        if (((Sender is TMCheckBox) = false) and (TWinControl(Sender).Enabled = True)) then Exit;

                        if (Sender is TMNumEdit) then
                        begin
                            if (m_sSaveValue = '') then m_sSaveValue := '0';

                            SaveEvent := TMNumEdit(Sender).OnChange;
                            TMNumEdit(Sender).OnChange := nil;
                            TMNumEdit(Sender).Value := StrToFloat(m_sSaveValue);
                            TMNumEdit(Sender).OnChange := SaveEvent;
                        end
                        else if (Sender is TMComboBox) then
                        begin
                            SaveEvent := TMComboBox(Sender).OnChange;
                            TMComboBox(Sender).OnChange := nil;
                            TMComboBox(Sender).ItemIndex := StrToIntDef(m_sSaveValue,0);
                            TMComboBox(Sender).OnChange := SaveEvent;
                        end;
                    except
                    end;

                    if (sMsg <> '') then
                    begin
                        beep();
                        MjsMessageBoxEx(Self,sMsg,'取引先登録',mjWarning,mjOK,mjDefOk);
                        PMTab.SetFocus();
                    end;

                    SaveEvent := nil;
                    result := false;
                end;

            finally
                fnSeiKbn_EntryControl();    // 得意先のコンポーネント制御
                fnSeiKbn_EntryControl_SI(); // 仕入先のコンポーネント制御
                SetGuidance(S_CHKCMP);
            end;
        end;
    end;
end;

//==============================================================
// 概要：採用情報チェックのステータス取得
//       result true    : 採用情報がメンテナンスされた
//              false   : 採用情報はメンテナンスされていない
//==============================================================
function TJNTCRP004001f.SaiyoCheckCmpFlg(SaiyoKbn:integer=-1):Boolean;
var
    iTag : integer;
begin
    iTag := 0;

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_TOKUI)) then iTag := iTag + f1TSKBN.Tag;

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_SHIIRE)) then iTag := iTag + f1SSKBN.Tag;

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_KOUNYU)) then iTag := iTag + f1SHojyoKbn1.Tag;

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_BAIKYAKU)) then iTag := iTag + f1SHojyoKbn2.Tag;

    if ((SaiyoKbn = -1) or (SaiyoKbn = S_LEASE)) then iTag := iTag + f1SHojyoKbn3.Tag;

    if iTag <> 0 then result := false
    else result := true;
end;

//**************************************************************************
//	Component	:	入力ﾌｨｰﾙﾄﾞ
//		    			詳細ﾀﾌﾞの入力ｺﾝﾄﾛｰﾙ共通Exitｲﾍﾞﾝﾄ
//	Event		:	OnChange
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP004001f.evtOnExit(Sender: TObject);
var
    strValue : string;
    NextCom : TWinControl;
// <MYN> ins -s
	iValue 			: Integer;
	strValueMYNKbn 	: string;
const
	MYN_MESSAGE_KBN	= 	'区分を切り替えた場合、番号の再登録が必要です。' + #13#10 +
						'区分を切り替えてよろしいですか？';
// <MYN> ins -e
begin
    if CloseFlg then Exit;  // 終了時は抜ける

    NextCom := Screen.ActiveControl;

    strValue := '';
    if (Sender is TMComboBox) then strValue := IntToStr((Sender as TMComboBox).ItemIndex)
    else if (Sender is TMNumEdit) then strValue := (Sender as TMNumEdit).Text;

// <MYN> ins -s
	if (m_AcControl = f0MYNKbn) then
	begin
		if (f0MYNKbn.Text = '') then
		begin
        	f0MYNKbn.Value	:= 0;
		end;

      	strValueMYNKbn := (Sender as TMNumEdit).Text;

		// 0:法人→1:個人
		if (m_sSaveValueMYNKbn = '0') and (strValueMYNKbn = '1') then
		begin
			if (m_sSaveHoujinNo <> '') then
			begin
				iValue := MjsMessageBoxEX(Self, MYN_MESSAGE_KBN, '警告', mjQuestion, mjYesNo, mjDefNo);
                if iValue = mrYes then
				begin
					m_sSaveValueMYNKbn	:= MYN_KOJIN;	// <MYN13>
                    Exit;
				end else
				begin
                    // 戻す
                   	f0MYNKbn.Value	:= 0;
                 	f0MYNNo.Text	:= m_sSaveHoujinNo;

					f0MYNKbn.SetFocus;
				end;
			end;
		end;

		// 1:個人→0:法人
		if (m_sSaveValueMYNKbn = '1') and (strValueMYNKbn = '0') then
		begin
			if (m_sSaveKojinNoDummy <> '') then
			begin
				iValue := MjsMessageBoxEX(Self,MYN_MESSAGE_KBN, '警告', mjQuestion, mjYesNo, mjDefNo);
                if iValue = mrYes then
				begin
             		m_sSaveValueMYNKbn	:= MYN_HOUJIN;	// <MYN13>
                    Exit;
				end else
				begin
                    // 戻す
                   	f0MYNKbn.Value	:= 1;
                 	f0MYNNo.Text	:= m_sSaveKojinNoDummy;

					f0MYNKbn.SetFocus;
				end;
			end;
		end;

		m_KbnEnter	:= False;
	end;
// <MYN> ins -e

    // 値が変更されている？
    if (strValue <> m_sSaveValue) then
    begin
        // 遷移先がTreeViewの場合は、値を戻してチェックは行わない。
        if (NextCom is TMTreeView) then
        begin
//<502_005> DEL            if (Sender is TMNumEdit) then (Sender as TMNumEdit).Value := Trunc(StrToIntDef(m_sSaveValue,0))
//<502_005> DEL            else if (Sender is TMComboBox) then (Sender as TMComboBox).ItemIndex := StrToIntDef(m_sSaveValue,0);
            Exit;
        end;

        if (SaiyoCheck(Sender) = false) then
            abort();
    end;



end;
//<502_001> ADD Ed
//<KSN4> ADD St
// -----------------------------------------------------------------------------
//  加算体系の一連の更新処理
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnKasan_UpdateExecute(HojyoTree:THojyoTree);
var
    bIns      : Boolean;
    Qry : TMQuery;
begin
    try
        Qry := TMQuery.Create(self);
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);
		gfnJNTSELSetDbName(Qry, dbCorp_Select);		//<D10>

        MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

        SessionPractice(C_ST_PROCESS);

        with HojyoTree do
        begin

            // 存在したら新規作成
            bIns := not fnKasan_EXISTS(MasterKbn, PatternNo, EntNo, SumNCode);

            if bIns then
            begin
                InsDateTM := now;
            end;

            if not fnKasan_Update(HojyoTree, bIns, Qry) then
            begin
				ErrorMessageDsp(Qry);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                Exit;
            end;

            // 検索用加算先の作成
            if (bIns = True) and
                Assigned(m_SrchMTokui) and
                (m_SrchMTokui.NCode = BasedNCode) then Kasan_CreateSearchParent();

            // 総合計体系は移動(削除)
            if (not KasanUpdate) and (SumNCode <> 0) then
            begin
                SumNCode := 0;

                if not fnKasan_Delete(HojyoTree, Qry) then
                begin
                    ErrorMessageDsp(Qry);
                    MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                    Exit;
                end;
            end;

            MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

            gbHojyoTree2Flag := true;  //<KSN5> ADD

        end;
    finally
        QueryDispose(Qry);
        SessionPractice(C_ED_PROCESS);
    end;
end;

// -----------------------------------------------------------------------------
//  True : コピーモードで更新  False : 総合計体系は削除
// -----------------------------------------------------------------------------
function TJNTCRP004001f.GetKasanUpdate(): Boolean;
begin
    result := chb_KasanUpdate.Checked;
end;
//<KSN4> ADD Ed

// <MYN> ins -s
// -----------------------------------------------------------------------------
//  マイナンバー初期化
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnClearMYN(): Boolean;
begin
	// 保存用
	m_sSaveKojinKey		:= '';
   	m_sSaveKojinNo		:= '';
	m_sSaveKojinNoDummy := '';
	m_sSaveHoujinNo		:= '';

	// マスク解除
	m_MaskCancel		:= False;
    f0MYNNo.PasswordChar	:= '*';	// <MYN10-3>
	m_MaskCancelFirst	:= True;

	m_bOutInputFlg		:= False;	// <MYN5>

	// 区分
	m_KbnEnter			:= False;
	m_KbnEnterFirst		:= True;
end;

// -----------------------------------------------------------------------------
//  マイナンバー番号制御　初期
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnSetMYN(pKBN: String): Boolean;
begin
	result := False;

	if (pKBN = MYN_HOUJIN) then		// 法人
	begin
		f0MYNKbn.Enabled			:= True;


		f0MYNNo.MaxLength			:= 13;
        f0MYNNo.Enabled				:= True;

// <MYN13> upd -s
//        f0MYNNo.Text				:= '';
        f0MYNNo.Text				:= m_sSaveHoujinNo;
// <MYN13> upd -e
      	f0MYNNo.PasswordChar		:= #0;				// マスクしない

		// 登録ボタン
		BtnMYNKojinUpd.Visible		:= False;
		Image_Mask.Visible			:= False;
		Image_MaskGray.Visible		:= False;	// <MYN11>

		uvTmpPersonKbn				:= 1;
    end else
	if (pKBN = MYN_KOJIN) then		// 個人
	begin
		f0MYNKbn.Enabled			:= True;

		f0MYNNo.MaxLength			:= 12;
		f0MYNNo.Enabled				:= False;

{<MYN13> del -s
		if (m_MaskCancel) then		// マスク解除中
		begin
			f0MYNNo.Text			:= '';
         	f0MYNNo.PasswordChar	:= #0;     			// マスクしない
		end else
		begin
<MYN13> del -e}
	        f0MYNNo.Text			:= m_sSaveKojinNoDummy;
			f0MYNNo.PasswordChar	:= '*';          	// マスクする
//<MYN13>       	end;

		// 登録ボタン
		if (m_iAccType = MYNACCESS_TYPE_ALL) then
		begin
			BtnMYNKojinUpd.Visible	:= True;
			BtnMYNKojinUpd.Enabled	:= True;	// <MYN11>
			Image_Mask.Visible		:= True;
			Image_MaskGray.Visible	:= False;	// <MYN11>
//<MYN11>			Image_Mask.Left			:= 283;				// マスクボタンの位置
		end else
		if (m_iAccType = MYNACCESS_TYPE_REFER) then
		begin
// <MYN11> upd -s
//			BtnMYNKojinUpd.Visible	:= False;
			BtnMYNKojinUpd.Visible	:= True;
			BtnMYNKojinUpd.Enabled	:= False;
// <MYN11> upd -e
			Image_Mask.Visible		:= True;
			Image_MaskGray.Visible	:= False;	// <MYN11>
//<MYN11>			Image_Mask.Left			:= 236;				// マスクボタンの位置
		end else
		begin
// <MYN11> upd -s
{
			BtnMYNKojinUpd.Visible	:= False;
			Image_Mask.Visible		:= False;
			Image_Mask.Left			:= 236;				// マスクボタンの位置
}
			BtnMYNKojinUpd.Visible	:= True;
			BtnMYNKojinUpd.Enabled	:= False;
            Image_Mask.Visible		:= False;
			Image_MaskGray.Visible	:= True;
// <MYN11> upd -e
        end;

// <MYN14> ins -s
		if (m_MYNAcc.MYNType = MYNSYSTEM_TYPE_BPO) then	// BPO契約
		begin
      		BtnMYNKojinUpd.Visible	:= False;	// 登録ボタン非表示
		end;
// <MYN14> ins -e

		uvTmpPersonKbn				:= 0;
	end else
	begin
		if (pKBN = '-2') then		// 諸口
        	f0MYNKbn.Enabled		:= False
		else
        	f0MYNKbn.Enabled		:= True;

    	// デフォルトは無し
		f0MYNNo.Enabled				:= False;
        f0MYNNo.Text				:= '';

		// 登録ボタン
		BtnMYNKojinUpd.Visible		:= False;
		Image_Mask.Visible			:= False;
		Image_MaskGray.Visible		:= False;	// <MYN11>
//<MYN11>		Image_Mask.Left				:= 236;				// マスクボタンの位置
  	end;

    result := True;
end;

// <MYN6> ins -s
// -----------------------------------------------------------------------------
//  登録ボタン　表示制御
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnKojinUpdDsp(pFlg: Boolean): Boolean;
begin
	result := False;

	BtnMYNKojinUpd.Visible	:= False;
	if (pFlg) then
	begin
		if (f0MYNKbn.Text = MYN_KOJIN) then	// 個人
		begin
// <MYN14> ins -s
      		if (m_MYNAcc.MYNType <> MYNSYSTEM_TYPE_BPO) then	// BPO契約
			begin
// <MYN14> ins -e
				if (m_iAccType = MYNACCESS_TYPE_ALL) then
				begin
			   		BtnMYNKojinUpd.Visible	:= True;
// <MYN11> ins -s
			   		BtnMYNKojinUpd.Enabled	:= True;
				end else
				begin
					BtnMYNKojinUpd.Visible	:= True;
	            	BtnMYNKojinUpd.Enabled	:= False;
// <MYN11> ins -e
				end;
			end;	// <MYN14>
		end;
	end;

    result := True;
end;
// <MYN6> ins -e

// -----------------------------------------------------------------------------
//  マスク解除　表示
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnMaskDsp(pFlg: Boolean): Boolean;
begin
	result := False;

	Image_Mask.Visible		:= False;
	Image_MaskGray.Visible	:= False;	// <MYN11>
	if (pFlg) then
	begin
		if (f0MYNKbn.Text = MYN_KOJIN) then	// 個人
		begin
			if (m_iAccType <> MYNACCESS_TYPE_NONE) then
			begin
		   		Image_Mask.Visible	:= True;
// <MYN11> ins -s
				Image_MaskGray.Visible	:= False;
			end else
			begin
				Image_Mask.Visible		:= False;
				Image_MaskGray.Visible	:= True;
// <MYN11> ins -e
			end;
		end;
	end;

    result := True;
end;

// -----------------------------------------------------------------------------
//  マスク解除　切り替え
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Image_MaskClick(Sender: TObject);
begin
	try
		m_MaskCancelClick	:= True;

	    if (f0MYNKbn.Text = '') then Exit;	// 何もしない

		if (f0MYNKbn.Text = MYN_KOJIN) then		// 個人
		begin
			// 切り替え
			if (m_MaskCancel = True) then
				m_MaskCancel	:= False
			else
				m_MaskCancel	:= True;

			if (m_MaskCancel) then	// マスク解除中
			begin
				if (m_MaskCancelFirst) then	// 初回
				begin
					m_sSaveKojinNo		:= fnSelectKojinNo(m_sSaveKojinKey);
	             	m_MaskCancelFirst	:= False;
				end;
				f0MYNNo.Text			:= m_sSaveKojinNo;
				m_sSaveKojinNoDummy		:= m_sSaveKojinNo;

	    	    f0MYNNo.PasswordChar	:= #0;         		// マスクしない
			end
			else
			begin
		        f0MYNNo.Text			:= m_sSaveKojinNoDummy;
		    	f0MYNNo.PasswordChar	:= '*';          	// マスクする
			end;
		end;
	finally
		m_MaskCancelClick	:= False;
	end;
end;

// -----------------------------------------------------------------------------
//  法人番号の番号取得（表示用）
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnGetHoujinNo(pNo: String): String;
begin
	Result	:= '';
	try
		if (pNo <> '') then
			StrToFloat(pNo);
		Result	:= pNo;
	except
	end;
end;

// -----------------------------------------------------------------------------
//  個人番号の番号取得（表示用）※履歴残らない
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnExistKojinNo(pKey: String): String;
var
	sMyNumber : String;

    iCnt      : Integer;
  	slKey     : TStringList;
    ListRet   : TObjectList;
    cPerson   : TMJSMyNumPersonInfoClass;
begin
	Result	:= '';

	if (pKey = '0') or (pKey = '') then
		Exit;

	try 	// <MYN3>
	  	slKey := TStringList.Create;
		slKey.Add(pKey);
		ListRet := m_MYNAcc.MYNCheckNumExist(slKey);

	  	if ListRet <> nil then
	  	begin
	    	for iCnt := 0 to ListRet.Count - 1 do
	    	begin
	      		cPerson := (ListRet[iCnt]) as TMJSMyNumPersonInfoClass;
	      		// マイナンバー取得
	      		if (cPerson.sMyNumber <> '') then
				begin
					if (cPerson.sMyNumber = '*') then
						Result	:= StringOfChar('*', 12)
					else
	                	Result	:= cPerson.sMyNumber;
				end;
	    	end;
	  	end;

	  	// 解放
		slKey.Free;

		if ListRet <> nil then
	  	begin
	    	for iCnt := 0 to ListRet.Count - 1 do
	    	begin
	      		cPerson := (ListRet[iCnt]) as TMJSMyNumPersonInfoClass;
	      		FreeAndNil(cPerson);
	    	end;
	  	end;
// <MYN3> ins -s
	except
		Exit;
	end;
// <MYN3> ins -e
end;

// -----------------------------------------------------------------------------
//  個人番号の番号取得（表示用）※履歴残る
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnSelectKojinNo(pKey: String): String;
var
	sMyNumber : String;

    iCnt      : Integer;
  	slKey     : TStringList;
    ListRet   : TObjectList;
    cPerson   : TMJSMyNumPersonInfoClass;
begin
	Result	:= '';

	if (pKey = '0') or (pKey = '') then
		Exit;

  	slKey := TStringList.Create;
	slKey.Add(pKey);
	ListRet := m_MYNAcc.MYNSelect(slKey);

  	if ListRet <> nil then
  	begin
    	for iCnt := 0 to ListRet.Count - 1 do
    	begin
      		cPerson := (ListRet[iCnt]) as TMJSMyNumPersonInfoClass;
      		// マイナンバー取得
      		if (cPerson.sMyNumber <> '') then
			begin
				Result	:= cPerson.sMyNumber;
                m_sSaveKojinNo	:= Result;
				m_sSaveKojinNoDummy	:= m_sSaveKojinNo;
				m_MaskCancelFirst	:= False;
			end;
    	end;
  	end;

  	// 解放
	slKey.Free;

	if ListRet <> nil then
  	begin
    	for iCnt := 0 to ListRet.Count - 1 do
    	begin
      		cPerson := (ListRet[iCnt]) as TMJSMyNumPersonInfoClass;
      		FreeAndNil(cPerson);
    	end;
  	end;
end;

// -----------------------------------------------------------------------------
//  個人番号の新規登録・更新
// -----------------------------------------------------------------------------
function TJNTCRP004001f.fnInsertMYN(): String;
var
 	iRet      : Integer;
  	iCnt      : Integer;
  	arPersonInfo : array of TMJSMyNumPersonInfoClass;  // 個人情報クラス
  	sZipCode1, sZipCode2	: String;	// <MYN2>
begin
	if (m_iAccType <> MYNACCESS_TYPE_ALL) then Exit;	// <MYN8>
    if (m_bOutInputFlg = False) then Exit;	// <MYN20>個人番号ダイアログでOKが押された場合のみMYNInsertする

	SetLength(arPersonInfo, 1);

  	// arPersonInfoのセット
  	arPersonInfo[0] := TMJSMyNumPersonInfoClass.Create;
 	arPersonInfo[0].sPersonalKey	:= m_sSaveKojinKey;
  	arPersonInfo[0].sMyNumber    	:= m_sSaveKojinNo;

{<MYN20> del -s
// <MYN5> ins -s
	if (m_bOutInputFlg = True) then	// 個人番号変更済み新規
	begin
// <MYN5> ins -e
<MYN20> del -e}
	  	arPersonInfo[0].sName        	:= f0LongName.Text;
// <MYN2> ins -s
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			arPersonInfo[0].sGCode		:= f0NGCode.Text
		else
		  	arPersonInfo[0].sGCode		:= f0TGCode.Text;
		arPersonInfo[0].sAddress1		:= f0Address1.Text;
		arPersonInfo[0].sAddress2		:= f0Address2.Text;

		// 郵便番号
{<MYN20> upd -s
		if ((f0ZipCode1.Text + f0ZipCode2.Text) <> '') then
		begin
			sZipCode1	:= '';
			sZipCode2	:= '';
			if (f0ZipCode1.Text <> '') then
				sZipCode1	:= Format('%.3d', [f0ZipCode1.AsInteger])
			else
	     		sZipCode1	:= Format('%.3d', [0]);
			if (f0ZipCode2.Text <> '') then
				sZipCode2	:= Format('%.4d', [f0ZipCode2.AsInteger])
			else
				sZipCode2	:= Format('%.4d', [0]);
	        arPersonInfo[0].sZipCode	:= Format('%s-%s', [sZipCode1, sZipCode2])
		end else
		begin
	     	arPersonInfo[0].sZipCode	:= '';
		end;
}
		arPersonInfo[0].sZipCode	:= fnGetPost;
// <MYN20> upd -e
// <MYN2> ins -e
//<MYN20>	end;	// <MYN5>

  	// トランザクション開始（Init関数で渡したDB）
  	MDataModule.BeginTran(dbCorp_Select);

  	iRet := m_MYNAcc.MYNInsert(arPersonInfo);  // 新規登録または更新を行う

  	if iRet <> MYNACCESS_SUCCESS then
  	begin
    	// エラー処理
		MjsMessageBoxEx(Self,
						'個人番号の登録が行えませんでした。（' + IntToStr(iRet) + '）',
						'警告', mjWarning, mjOK, mjDefOK);
    	// ロールバックはしない。
    	//MDataModule.Rollback(dbCorp_Select);
  	end
  	else begin

    	// AP側マスタの更新処理（個人キーを登録）
    	// コミット
    	MDataModule.Commit(dbCorp_Select);
  	end;

  	// 解放
  	for iCnt := 0 to High(arPersonInfo) do
	begin
    	FreeAndNil(arPersonInfo[iCnt]);
	end;

  	arPersonInfo := nil;
end;

// -----------------------------------------------------------------------------
//  法人番号検索エクスプローラ起動
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.f0MYNNoArrowClick(Sender: TObject);
var
    CorpExp : TMJSCorpNumExpIF;
    iRet    : Integer;
    iExpRtn :   Integer;        // 戻り値

	sInKey,  sInNum,  sInName,
	sOutKey, sOutNum, sOutName 		: String;
begin
	sInNum	:= f0MYNNo.Text;
	sInName	:= f0LongName.Text;	// <MYN4>

	CorpExp := TMJSCorpNumExpIF.Create;
	CorpExp.Init(Pointer(m_pMyAppRecord));

	try
		if (sInNum <> '') then
		begin
			CorpExp.In_CorpNumber	:= sInNum;
		end;
		CorpExp.In_CorpName		:= sInName;		// <MYN4>

	    iExpRtn	:= CorpExp.EXEC();
       	if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
		begin
        	Exit;
        end;

		sOutNum	:= CorpExp.Out_CorpNumber;

		if (sOutNum <> '') then
		begin
	    	f0MYNNo.Text := sOutNum;
            m_sSaveHoujinNo		:= f0MYNNo.Text;

            f0SYAINSU.SetFocus;
    	end;
	finally
	    CorpExp.Term();
    end;
end;

// -----------------------------------------------------------------------------
//  登録ボタンクリック
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.Button1Click(Sender: TObject);
var
// <MYN16> upd -s
//	MYNInpDlgIF : TMYNInpDlgIF;
// <MYN18> upd -s
//	MYNInpDlgIF : TMYNInpDlgIF3;
	MYNInpDlgIF : TMYNInpDlgIFIf;
// <MYN18> upd -e
// <MYN16> upd -e
	sInKey,  sInNum,  sInName,
	sInZipCode, sInAddress1,  sInAddress2,	// <MYN20>
	sOutKey, sOutNum, sOutName 		: String;
	iOutStatus						: Integer;
	bOutInputFlg					: Boolean;
	iRet	:	Integer;
begin

	sInKey	:= m_sSaveKojinKey;		// 個人番号キー
   	sInNum	:= m_sSaveKojinNo;  	// 個人番号
   	sInName	:= f0LongName.Text;		// 正式名称
// <MYN20> ins -s
 	sInZipCode	:= fnGetPost;   	// 郵便番号
    sInAddress1	:= f0Address1.Text;	// 住所1
	sInAddress2	:= f0Address2.Text;	// 住所2
// <MYN20> ins -e

// <MYN16> upd -s
//    MYNInpDlgIF := TMYNInpDlgIF.Create;
// <MYN18> upd -s
//    MYNInpDlgIF := TMYNInpDlgIF3.Create;
    MYNInpDlgIF := TMYNInpDlgIFIf.Create;
// <MYN18> upd -e
// <MYN16> upd -e

	m_cJNTArea.setOthAppRecord;				// <MYN19>rcSYSTEMAREAに変更

// <MYN19> upd -s
//    MYNInpDlgIF.Init(m_pMyAppRecord);
    MYNInpDlgIF.Init(m_Base_pRec);			// m_cJNTArea.setxxxで操作できるm_Base_pRecを渡します。
// <MYN19> upd -e

    try
        MYNInpDlgIF.In_MyKey 	:= sInKey;
        MYNInpDlgIF.In_MyNum 	:= sInNum;
        MYNInpDlgIF.In_MyName	:= sInName;
// <MYN20> ins -s
		MYNInpDlgIF.In_ZipCode	:= sInZipCode;	// 郵便番号
        MYNInpDlgIF.In_Address1	:= sInAddress1;	// 住所1
        MYNInpDlgIF.In_Address2	:= sInAddress2;	// 住所2
// <MYN20> ins -e
        iRet	:= MYNInpDlgIF.EXEC(@m_MYNAcc);

		sOutKey			:= MYNInpDlgIF.Out_MyKey;
        sOutNum			:= MYNInpDlgIF.Out_MyNum;
		sOutName		:= MYNInpDlgIF.Out_MyName;
		bOutInputFlg	:= MYNInpDlgIF.Out_InputFlg;	// Dialog内で変更されたか？　　True：変更/Flase:変更なし
		iOutStatus		:= MYNInpDlgIF.Out_Status;   	// IDOK or IDCANCEL 終了時の押下ボタン

		if (iRet = ACTID_RET_OK) then
		begin
			if (bOutInputFlg) then
			begin
			    f0MYNNo.Text	:= sOutNum;
				m_sSaveKojinKey	:= sOutKey;
				m_sSaveKojinNo	:= sOutNum;
				m_sSaveKojinNoDummy	:= m_sSaveKojinNo;

				m_MaskCancelFirst	:= False;
//<MYN20>				m_bOutInputFlg		:= True;	// <MYN5>
			end;

			if (iOutStatus = IDOK) then
			begin
				m_bOutInputFlg		:= True;	// <MYN20> OKが押された
				// フォーカス移動
				f0SYAINSU.SetFocus;
			end;
		end;

    finally
    	MYNInpDlgIF.Term;
		m_cJNTArea.setMasAppRecord;		//<MYN19>TJNTMASComに戻す
    end;

end;

// -----------------------------------------------------------------------------
//  法人･個人番号KeyPress
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.fnKeyPressMYN(Sender: TObject; var Key: Char);
begin

    if (Sender = f0MYNKbn) then		// 法人･個人区分
	begin
    	if (f0MYNKbn.Text = '') then
		begin
         	f0MYNKbn.Value	:= 0;
		end;
	end;

	if (Sender = f0MYNNo) then		// 法人･個人番号
	begin
		// 数字のみ入力可
//<D10>	if not((Key in ['0'..'9']) or (Key = Chr(VK_BACK))) then
		if not(CharInSet(Key,['0'..'9']) or (Key = Chr(VK_BACK))) then	//<D10>
			Key := Chr(0);
	end;
end;
// <MYN> ins -e

// <MYN10-3> ins -s
// -----------------------------------------------------------------------------
//  基本情報タブパネルExit
// -----------------------------------------------------------------------------
procedure TJNTCRP004001f.PPanel_KihonExit(Sender: TObject);
begin
	// 「基本情報」タブからフォーカスが抜ける場合、個人番号をマスクする。
	if (f0MYNKbn.Text = MYN_KOJIN) then		// 個人
	begin
		m_MaskCancel			:= False;
		f0MYNNo.PasswordChar	:= '*';          	// マスクする
	end;
end;
// <MYN10-3> ins -e

// <MYN15> ins -s
//-----------------------------------------------------------------------------
// fnCheckCorpNum()
//	< 法人番号チェック >
//		PARAM	:	sCorpNum	:	確認する法人番号
//      RETURN  :	設定結果(True:正しい, False:間違っている)
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP004001f.fnCheckCorpNum(sCorpNum:String): Boolean;
begin
    Result := False;

    // 法人番号が13桁か確認する
    if Length(sCorpNum) <> 13 then
        Exit;

    // マイナンバーチェック
    if m_MYNAcc.CheckMyNumber(sCorpNum) = False then
		Exit;

	Result := True;
end;
// <MYN15> ins -e

// <MYN17> ins -s
//-----------------------------------------------------------------------------
// fnCheckKojinKey	個人キーの重複チェック
//		PARAM	:	pKey	:	個人キー
//                  pNm     :	正式名称
//					sTopNm  :	先頭の名称取得用
//      RETURN  :	設定結果(True:重複あり, False:重複なし)
//      MEMO    :   個人キー ＋　正式名称　が同じ場合　⇒　重複なし
//                  個人キー のみが同じ場合　　　　　　⇒　重複あり
//-----------------------------------------------------------------------------
function TJNTCRP004001f.fnCheckKojinKey(pKey, pNm: String; var sTopNm: String): Boolean;
var
    QryKeyChk : TMQuery;
begin
    Result := False;
    if (pKey = '') then Exit;

    // Queryの構築
    QryKeyChk := TMQuery.Create(Self);					    // MQueryの構築
//<D10>	MDataModule.SetDBInfoToQuery(dbCorp_Select, QryKeyChk);
	gfnJNTSELSetDbName(QryKeyChk, dbCorp_Select);		//<D10>


	sTopNm	:= '';

    try
        with QryKeyChk do
        begin
            Close;
            SQL.clear;
			SQL.Add(' select TOP 1 Mtokui.Ncode '
				   +     ' , Mtokui.Nm '
				   +  ' from MTOKUI '
                   + ' where Mtokui.RdelKbn = 0 '
				   +   ' and Mtokui.HoujinKbn = 1 '
				   +   ' and Mtokui.KojinKey = :pKey ' );

			if MTOKUI_DMQuery.Eof = False then	// 修正の場合
				SQL.Add(' and Mtokui.Ncode <> :pNcode ');

			// 半角スペース・全角スペースを除いた文字で同じかどうかを判定する
			SQL.Add(   ' and replace(replace(Mtokui.Nm, ''　'', ''''), '' '', '''') '
				   +    ' <> replace(replace(:pNm, ''　'', ''''), '' '', '''') ');

			SQL.Add( ' order by Mtokui.Gcode ');

            ParamByName('pKey').AsString    	:= pKey;
			if MTOKUI_DMQuery.Eof = False then	// 修正の場合
	            ParamByName('pNcode').AsString	:= JHojyoMA_DMemDataNCode.asString;
            ParamByName('pNm').AsString 		:= pNm;
            Open;

            if not Eof then
            begin
				// Ncodeが NULL でない時は、重複している
            	if not (FieldByName('Ncode').IsNull) then
				begin
                	Result	:= True;
					sTopNm	:= FieldByName('Nm').asString;	// 先頭の名称取得
				end;
            end;
        end;
	finally
        QryKeyChk.Close;
        QryKeyChk.Free;
	end;
end;
// <MYN17> ins -e
// <MYN20> ins -s
//******************************************************************************
//	Function	:	fnSetPersonClass
//	Memo		:	個人情報クラスに保存
//	Parameters	:
//	Return		:
//	Comment		:
//******************************************************************************
function TJNTCRP004001f.fnGetPost(): String;
var
	sZipCode1, sZipCode2	: String;
begin
	Result	:= '';

	if ((f0ZipCode1.Text + f0ZipCode2.Text) <> '') then
	begin
		sZipCode1	:= '';
		sZipCode2	:= '';
		if (f0ZipCode1.Text <> '') then
			sZipCode1	:= Format('%.3d', [f0ZipCode1.AsInteger])
		else
			sZipCode1	:= Format('%.3d', [0]);
		if (f0ZipCode2.Text <> '') then
			sZipCode2	:= Format('%.4d', [f0ZipCode2.AsInteger])
		else
			sZipCode2	:= Format('%.4d', [0]);
	    Result	:= Format('%s-%s', [sZipCode1, sZipCode2]);
	end else
	begin
	 	Result	:= '';
	end;
end;
// <MYN20> ins -e
// <3135> ins-s
//******************************************************************************
//	Function	:	fnchkSystemRec
//	Memo		:	システム別情報レコードの存在チェック
//	Parameters	:
//	Return		:
//	Comment		:
//******************************************************************************
function TJNTCRP004001f.fnchkSystemRec(pCode:Extended): Integer;
var
	chkQry  : TMQuery;
	i		: Integer;
	strColumn: String;
begin

	Result := 0;

	chkQry := TMQuery.Create(self);

    gfnJNTSELSetDbName(chkQry, dbCorp_Select);

    with chkQry do
    begin
       	Close;
       	SQL.Clear;
        SQL.Add('select m1.BaseNCode m1cd,m2.BaseNCode m2cd,m3.BaseNCode m3cd,m4.BaseNCode m4cd,m5.BaseNCode m5cd,m6.BaseNCode m6cd '
    	       	+ 'From MTOKUI mt '
    	        + 'Left Outer Join MTOKUI_MAS m1 on mt.NCode = m1.BaseNCode '
    	        + 'Left Outer Join MTOKUI_DEP m2 on mt.NCode = m2.BaseNCode '
    	        + 'Left Outer Join MTOKUI_CRD m3 on mt.NCode = m3.BaseNCode '
    	        + 'Left Outer Join MTOKUI_PAY m4 on mt.NCode = m4.BaseNCode '
    	        + 'Left Outer Join MTOKUI_SEL m5 on mt.NCode = m5.BaseNCode and m5.RecKbn = 1'
    	        + 'Left Outer Join MTOKUI_SEL m6 on mt.NCode = m6.BaseNCode and m6.RecKbn = 2'
    	        + 'Where (mt.NCode = :pCode) and (mt.RDelKbn= 0)') ;

        ParamByName('pCode').AsExtended := pCode;

        open;

        while not EOF do
        begin
			i := 0;

			while (i < 6) do
            begin
				inc(i);

				//フィールド名(m1cd～m6cd）を合成する
                strColumn := 'm'+inttostr(i)+'cd';

				//いずれかのシステム別レコードが存在しない場合、エラーとする。
				if FieldByName(strColumn).IsNull then
				begin
                   	result := -1;
					break;
                end;

            end;

			Next;

        end;

		close;
    end;

	chkQry.Free;

end;

end.

