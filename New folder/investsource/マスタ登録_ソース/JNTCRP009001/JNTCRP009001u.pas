//=============================================================================
//
//      システム名  ：Ｇａｌｉｌｅｏｐｔ
//      処理名      ：科目情報 勘定科目
//
//      制作・著作  ：（株）ミロク情報サービス
//      開発元      ：リード（株）Ｓプロジェクト
//
//      作成者      ：高橋 功二(LEAD)
//      作成日      ：2005.01.25(TUE)
//
//=============================================================================
//  修正履歴
//  <ﾏｰｸ>   <修正者>    <修正日>        <修正内容>
//  <!!!>   高橋 功二   2005.04.08(FRI) 仕様確認後修正予定。
//  <001>   高橋 功二   2005.04.08(FRI) FX-STYLE対応。
//  <   >   高橋 功二   2005.04.18(MON) FX-STYLEﾗｲﾌﾞﾗﾘ対応。
//  <002>   高橋 功二   2005.05.10(TUE) 分類登録の追加。
//  <   >   高橋 功二   2005.05.12(THU) KMKMB,KmkInfo.KmkNCode→NCode,SubNCode→CNCodeに変更。
//  <   >   茂木 勇次   2005.07.04(MON) 付箋機能の追加。
//  <   >   茂木 勇次   2005.07.06(WED) 部門,ｾｸﾞﾒﾝﾄ,ﾌﾟﾛｼﾞｪｸﾄ採用更新の追加。
//  <003>   茂木 勇次   2005.07.14(THU) 付箋備考の第１引数にAOwnerを追加。
//  <004>   茂木 勇次   2005.07.14(THU) 検索ｴｸｽﾌﾟﾛｰﾗ機能の追加。
//  <005>   茂木 勇次   2005.07.15(FRI) MjsMessageBox,MjsMessageBoxExの第1引数に"Self"を追加。
//  <006>   茂木 勇次   2005.07.15(FRI) 科目検索ﾀﾞｲｱﾛｸﾞ機能の追加。
//  <007>   茂木 勇次   2005.07.22(FRI) 科目検索ﾀﾞｲｱﾛｸﾞの廃止⇒検索ｴｸｽﾌﾟﾛｰﾗを表示するように変更。
//  <008>   飯塚 健介   2005.08.03(WED) 決算確定・権限対応。
//  <010>   茂木 勇次   2005.08.04(THU) 同一加算体系上で科目を変更し、ｸﾞﾘｯﾄﾞへﾎｰｶｽを移動すると
//                                      ｱﾄﾞﾚｽ違反が発生する現象対応。
//  <011>   茂木 勇次   2005.08.11(THU) 工事未採用時に工事ｺﾝﾎﾟｰﾈﾝﾄを動的に作成する部分でｱﾄﾞﾚｽ違反
//                                      が発生する現象対応。
//  <012>   茂木 勇次   2005.08.11(THU) 銀行のｴｸｽﾌﾟﾛｰﾗ対応。PatternNo=0⇒4に変更。
//  <013>   茂木 勇次   2005.08.11(THU) KmkMAの勘定科目時のSubCodeについて、""⇒0に変更。
//  <014>   茂木 勇次   2005.08.11(THU) 検索ﾎﾞﾀﾝ 科目別補助対応。戻り値に科目別補助ｺｰﾄﾞがない為
//                                      検索ｴｸｽﾌﾟﾛｰﾗの表示のみしか対応できません。
//  <015>   高橋 功二   2005.08.19(FRI) JNTCommonを親から引き継ぐように修正
//  <016>   高橋 功二   2005.08.19(FRI) m_System = MJSLINKの場合に詳細更新時に「ComboNumber1.ItemIndex」
//                                      が「-1」になってしまう。
//                                      MJSLINK、ACELINKにより分岐する仕様の確認が必要。
//                                      現状で動作するようにする為、m_System = ACELINKとして処理する
//  <PRN>   茂木 勇次   2005.08.19(FRI) 印刷機能の追加。
//  <   >   茂木 勇次   2005.09.08(THU) ｷｰの動作修正。
//  <017>   茂木 勇次   2005.09.12(MON) 上記の<016>番号管理機能対応。
//  <018>   茂木 勇次   2005.09.13(TUE) 細目科目がﾌﾘｰ属性の場合、禁則文字入力を考慮する。
//  <019>   茂木 勇次   2005.09.17(SAT) 科目ｺﾋﾟｰ機能の不具合対応。
//  <   >   茂木 勇次   2005.09.19(MON) 分析ｺｰﾄﾞの見直し。仕様を間違えて修正していました。
//  <020>   茂木 勇次   2005.09.19(MON) 科目/科目別補助更新時に適用期間にNULLが落ちる不具合対応。
//  <021>   茂木 勇次   2005.09.21(WED) 詳細画面-集計情報[表示/印刷]項目を画面から削除(MJS大宮様からの指摘)
//  <022>   茂木 勇次   2005.09.21(WED) 電子帳簿は2次以降の対応の為一時保留(画面上から非表示)
//  <023>   茂木 勇次   2005.09.22(THU) 会社基本情報-会計情報で対象科目の科目別補助が未採用の場合
//                                      科目別補助ﾀﾌﾞを選択した場合にﾒｯｾｰｼﾞを表示して実在ﾀﾌﾞへ移動するように修正。
//  <024>   茂木 勇次   2005.09.29(THU) ｸﾞﾘｯﾄﾞの付箋Bitmapを変更。TImageを追加。
//  <025>   茂木 勇次   2005.09.29(THU) 初回起動時に「X---X」ｷｬﾌﾟｼｮﾝが表示される不具合対応。
//  <   >   茂木 勇次   2005.10.05(WED) 未対応の帳票の作成
//  <   >   加藤(PRIME) 2005.10.14(FRI) 設計時のﾗﾍﾞﾙのCaptionｸﾘｱ(<025>の追加対応)
//  <026>   加藤(PRIME) 2005.10.14(FRI) 削除ﾒｯｾｰｼﾞ変更
//  <027>   加藤(PRIME) 2005.10.19(WED) 科目別補助分類の検索EXPで科目分類のEXPが出る不具合修正
//  <028>   加藤(PRIME) 2005.10.19(WED) 科目分類、科目別補助分類で先頭と同じ値が続けて入る不具合修正
//  <029>   加藤(PRIME) 2005.10.19(WED) 分類をｸﾘｱできない不具合を修正
//  <030>   加藤(PRIME) 2005.10.19(WED) 科目別補助ﾘｽﾄ印刷の属性対応
//                                          ※属性変更の処理を初めから入れる必要があります
//  <031>   加藤(PRIME) 2005.10.19(WED) 検索ﾎﾞﾀﾝ押下時のExpに渡す条件修正(付箋で検索できなくなっていた)
//  <ESC>   加藤(PRIME) 2005.10.20(THU) Escｷｰ動作対応
//                                          ・MJSDispCtrl.MJSSetFocusで親のｺﾝﾎﾞにSetFocusできなかった
//  <032>   加藤(PRIME) 2005.10.21(FRI) 科目別補助の検索機能修正。<014>への対応
//  <033>   加藤(PRIME) 2005.10.24(MON) 帳票に適用期間のﾃﾞﾌｫﾙﾄが出力されていたので条件を修正
//  <034>   加藤(PRIME) 2005.10.25(TUE) ﾂﾘｰで合計科目選択時に詳細に切り替えると科目別補助ﾀﾌﾞが有効になる不具合修正
//  <035>   加藤(PRIME) 2005.10.25(TUE) ｸﾞﾘｯﾄﾞの科目別補助ｺｰﾄﾞ属性がたまに変わらない不具合修正
//  <036>   加藤(PRIME) 2005.10.25(TUE) ｷｰ動作整備
//  <037>   加藤(PRIME) 2005.10.25(TUE) 銀行ｺｰﾄﾞがﾌﾘｰ属性のときの不具合修正
//  <038>   加藤(PRIME) 2005.11.01(TUE) 集計単位区分名称が表示されない不具合修正
//  <039>   加藤(PRIME) 2005.11.16(WED) 検索EXPで製造科目を青字にする
//  <040>   加藤(PRIME) 2005.11.16(WED) 履歴用ｽﾄｱﾄﾞ呼び出し
//  <041>   加藤(PRIME) 2005.11.22(TUE) 実在簡略型帳票の連想順でSQLｴﾗｰになる不具合修正
//  <042>   加藤(PRIME) 2005.12.10(SAT) 実在詳細型帳票の分析ｺｰﾄﾞが出力されない不具合修正
//  <043>   加藤(PRIME) 2005.12.12(MON) 分析ｺｰﾄﾞのExpﾊﾟﾗﾒｰﾀ修正
//  <044>   広田(PRIME) 2005.12.14(WED) 帳票不具合対応
//  <045>   青木(PRIME) 2006.01.10(TUE) 範囲指定追加
//  <046>   青木(PRIME) 2006.01.11(WED) ﾌｧｲﾙ出力対応
//  <047>   青木(PRIME) 2006.01.17(TUE) ﾌｧｲﾙ出力不具合対応
//  <048>   青木(PRIME) 2006.01.17(TUE) 帳票に項目がないため、ﾌｧｲﾙ出力しない
//  <049>   加藤(PRIME) 2006.01.26(THU) 初期ﾃﾞｰﾀの正式名称の最後のﾊﾞｲﾄに、2ﾊﾞｲﾄ文字の前半分が入っていた場合の対応
//  <   >   加藤(PRIME) 2006.01.26(THU) ｸﾞﾘｯﾄﾞのｺｰﾄﾞ欄が狭いので広げました
//  <   >   加藤(PRIME) 2006.01.27(FRI) 変動損益関係ﾘｽﾄの変動費・固定費区分のBlankWhenZeroをTrueに設定
//  <CHK>   加藤(PRIME) 2006.02.13(MON) 削除ﾁｪｯｸ対応
//  <050>   青木(PRIME) 2006.03.16(THU) Tab動作不具合修正
//  <051>   加藤(PRIME) 2006.03.17(FRI) 複数の加算先にｺﾋﾟｰした科目を削除するとKmkTreeが残る不具合修正
//  <052>   加藤(PRIME) 2006.03.27(MON) 科目別補助の適用期間を入力可能にする
//  <053>   小林(MJS)   2006.05.01(MON) 新会社法対応     <2006/05/17>修正
//  <054>   難波(LABO)  2006.05.18(THU) 科目別補助の削除ができない不具合を修正
//  <055>   高橋 功二   2006.08.22(TUE) 資金繰ｺｰﾄﾞ(KmkMA.DebitCash, CreditCash)が外部ｺｰﾄﾞで登録されていた不具合修正
//  <056>   高橋 功二   2006.09.21(THU) ﾂﾘｰからの削除不具合と削除ﾒｯｾｰｼﾞの修正。
//  <057>   茂木 勇次   2006.12.05(TUE) 小数点桁数の復活。
//  <058>   茂木 勇次   2006.12.05(TUE) 科目ｺﾋﾟｰ機能で、合計科目のｺﾋﾟｰで全てｺﾋﾟｰする場合、性格ｺｰﾄﾞ2も対象とする。
//  <059>   茂木 勇次   2006.12.05(TUE) AnalizeCode=52(少数株主持分)の時無条件でSumAnaCode=8(引当金)をｾｯﾄする。
//  <060>   高橋 功二   2007/01/24(WED) ﾏｽﾀ重複対応(ﾒｯｾｰｼﾞの統一) Ver1.07正式版(2007/2)にてﾘﾘｰｽ
//  <061>   高橋 功二   2007/01/26(FRI) 特定科目と一致した場合の処理で内部ｺｰﾄﾞ対応されていなかった点を修正
//	<SYNC>	加藤(PRIME)	2007/03/28(WED) ﾏｽﾀ同期対応(仮)　★次回ﾘﾘｰｽ時に削除予定
//  <062>   佐藤(IDC)   2007/04/06(FRI) VISTA対応(詳細画面のボタン位置を調整)
//	<063>	加藤(PRIME)	2007/03/28(WED)	ﾏｽﾀ同期対応
//  <064>   茂木 勇次   2007/02/15(THU) 小数点桁数を4桁⇒9桁指定可能に変更。MaxVlueを4⇒9に変更。
//  <065>   茂木 勇次   2007/02/19(MON) 番号1,2表示区分の自動付番機能の追加。
//	<066>	加藤(PRIME)	2007/05/15(TUE)	ﾏｽﾀ同期 配信ﾀﾞｲｱﾛｸﾞ対応
//	<067>	加藤(PRIME)	2007/05/18(FRI)	ﾏｽﾀ同期 関連付け関係のﾒｯｾｰｼﾞに簡略名称がなかったので追加
//	<068>	加藤(PRIME)	2007/05/22(TUE)	ﾏｽﾀ同期 KmkMBは物理削除ﾏｽﾀ用の同期ｽﾄｱﾄﾞを呼ぶ(RDelKbnを使っていないため)
//	<069>	加藤(PRIME)	2007/05/22(TUE)	子会社で削除時に親会社のTreeを削除する不具合修正
//	<070>	渡邊(LAB)   2007/07/02(MON) 決算確定の判定は権限に依存させる（子でメッセージを出さない）
//  <071>   鈴木(PRIME) 2007/08/09(THE) 配信ﾀﾞｲｱﾛｸﾞの呼び出し条件の修正
//  <072>   鈴木(PRIME) 2007/08/28(TUE) 追加権限なしおよび修正権限なしの場合でもﾎﾟｯﾌﾟｱｯﾌﾟの詳細は有効にする
//  <073>   茂木 勇次   2007/10/18(THE) 細目科目を1科目に対して数万件登録すると、ｸﾞﾘｯﾄﾞ表示時に例外[ﾒﾓﾘ不足ｴﾗｰ]が発生する対応。
//  <074>   茂木 勇次   2007/10/18(TUE) 実在、合計、細目ｸﾞﾘｯﾄﾞで付箋ｺﾒﾝﾄを表示する際のRowの取得方法に問題がある為
//                                      ﾏｳｽでﾎﾟｲﾝﾄしている対象ﾚｺｰﾄﾞのｺﾒﾝﾄと異なるｺﾒﾝﾄが表示される対応。
//  <075>   大竹 文顕   2008/01/08(TUE) 科目別補助の諸口がない状態で諸口を追加をした時の無限ﾙｰﾌﾟ回避
//  <076>   大竹 文顕   2008/01/08(TUE) 科目別補助のｿｰﾄ順を外部ｺｰﾄﾞ順に変更
//	<077>	関(PRIME)	2007/12/21(FRI)	ﾏｽﾀ更新履歴対応
//	<078>	小川 尚子	2008/02/04(MON)	会社法未対応時の繰越利益剰余金の表示エラー
//  <079>   大竹 文顕   2008/02/20(WED) 要約ｺｰﾄﾞの自動ｾｯﾄ
//  <080>   大竹 文顕   2008/03/14(FRI) 更新担当者内部ｺｰﾄﾞのｾｯﾄ
//	<081>	小柴 尚子	2008/03/31(MON)	初期で科目区分をマウスで選択後に[詳細]を実行→表示に問題
//	<082>	斎藤		2008/05/22(THU)	JSOX印刷履歴対応
//	<083>	渡邊(LAB)	2008/08/04(MON) 銀行実績更新方法の変更対応
//						修正内容: 銀行の期首残高登録したときに、マスタ更新できる、エクスポートされない現象あり。 SRBNo.QZC-2110
//									科目に銀行コードが採用されているかチェックし、銀行採用を採用したときは実績のAddKbn=0に更新する。
//	<DKAI>	難波(LAB)	2008/08/27(WED)	名称に改行が入らないようにする
//  <084>   難波(LAB)	2008/09/04(THU)	グリッドの選択行変更時にツリーの選択ノードも変更する。(VWF-0183)
//  <085>   難波(LAB)	2008/09/05(FRI)	グリッドで細目あり科目選択時に、削除ボタン使用不可にならない件を修正
//  <086>   難波(LAB)	2008/09/05(FRI)	外部コード9999999の合計科目を加算先とした場合に２重加算できてしまう件を修正
//  <087>   難波(LAB)	2008/09/11(THU)	ツリーで科目別補助採用あり実在科目を選択した状態で、詳細画面の科目別補助タブを選択したあと
//										一覧画面に戻すと科目別補助グリッドに何も表示されず、編集しようとするとエラーになる件を修正
//  <088>   難波(LAB)	2008/09/12(FRI)	詳細画面で外部コード=0の科目別補助を表示した後、科目・合計科目画面で外部コード=0を登録可能になってしまう件を修正
//  <089>   小川(RIT)	2009/11/04(WED)	科目別補助の外部コードがブランクで更新できてしまう不具合修正(GXC-0097)
//  <090>   小川(RIT)   2009/11/05(THU) 科目の検索時、KmkTreeに存在しないと無限ループする不具合修正
//  <091>   小川(RIT)   2009/11/25(WED) 実在科目を削除したとき、「既に同一コードが登録済みです。」と表示される不具合修正
//  <092>   小川(RIT)   2009/11/26(THU) 表示している科目分類とは異なる科目分類の合計科目を検索してもフォーカスが移らない不具合修正
//                                      検索する科目の科目分類が取得できなかった場合の考慮を追加
//  <093>   黒田 祐生   2010/05/27(THU) MLBplLoader対応
//  <094>   吉澤        2010/06/16(THU) SRB　GWF-0167　諸口登録後、TAB・ENTER等で移動できない件の修正
//  <095>   吉澤        2010/06/16(THU) 科目別補助が8ケタまでしか印刷されない件の修正 （MEMDATAのみ修正）
//================== ver4.02 修正内容 ======================
//  <096>   小川(RIT)   2010/09/27(MON) 親科目なし(はぐれ科目)のとき、合計科目に同じ合計科目を加算しようとする場合はガードをかける。
//  <097>   小川(RIT)   2010/10/12(TUE) 親の合計科目が複数存在するとき、その合計科目内でドラッグアンドドロップによる移動が出来ない不具合対応。
//================== ver4.03 修正内容 ======================
//  <098>   吉澤        2010/11/18(THU) SRB　GWC-0324 タイトルとデータがずれてCSV出力される件の修正 　
//  <099>   黒田 祐生   2010/11/30(TUE) 他の処理を起動中に科目登録を閉じると検索Expが起動出来ない点を修正
//================== ver4.06 修正内容 ======================
//  <100>	黒田 祐生	2010/03/08(TUE) 科目出力順序登録対応
//	<101>	黒田 祐生	2011/06/08(WED)	出力順序自動追加用に工事/ﾌﾟﾛｼﾞｪｸﾄ採用区分を取得(ﾌﾟﾛｼﾞｪｸﾄ試算表等の対応を必要になった場合)。
//	<102>	黒田 祐生	2011/06/08(WED)	固定区分(KoteiKbn)が3の場合のみ「加算しない」を不可とする
//	<103>	黒田 祐生	2011/06/08(WED)	ツリーのはぐれ科目をソートする
//	<104>	黒田 祐生	2011/06/08(WED)	他の処理でプレビュー中にプレビューを起動するとエラーとして表示される点を修正
//================== ver4.08/ver5.01 修正内容 ======================
//	<105>	黒田 祐生	2012/02/13(MON)	ShiftState対応
//	<106>	黒田 祐生	2012/02/22(WED) 印刷ﾌﾟﾚﾋﾞｭｰ中にﾌｫｰﾑの終了ﾎﾞﾀﾝからGaliを終了しようした際のｶﾞｰﾄﾞの後にExitするよう修正。
//================== ver5.02 修正内容 ======================
//	<107>	黒田 祐生	2012/03/19(MON)	PLの合計科目がBS体系のはぐれに表示されてしまう不具合修正。
//	<108>	黒田 祐生	2012/04/04(WED)	損益科目以外のはぐれの合計科目が印刷で表示されない不具合修正。
//	<109>	黒田 祐生	2012/04/04(WED)	印刷時の加算体系リストのはぐれ科目をソートする。<103>の修正漏れ
//	<110>	黒田 祐生	2012/04/04(WED)	期首繰越利益剰余金（分析ｺｰﾄﾞ55:利益剰余金）はBS/PL区分の変更を可能とする。
//	<111>	黒田 祐生	2012/04/04(WED)	工事採用のある科目の分析ｺｰﾄﾞを変更すると部門採用がなしになってしまう不具合修正。
//	<112>	黒田 祐生	2012/08/08(WED)	合計科目更新時に補助採用区分を0クリアしてしまう不具合修正。
//================== ver5.04 修正内容 ======================
//	<113>	黒田 祐生	2013/04/17(WED)	科目別補助の諸口を削除時、仕訳が入力されていても削除可能とする。
//										削除した場合は、科目別補助の採用もオフる。
//	<114>	黒田 祐生	2013/04/18(THU)	起動速度UP
//	<115>	黒田 祐生	2013/05/15(WED)	特殊科目のPL科目に実在科目を指定している場合、その科目に科目別補助の登録があると、
//                                      ツリー上に科目別補助の簡略名称で表示されてしまう不具合修正。
//	<116>	黒田 祐生	2013/05/17(FRI)	分析コード198（借方繰越利益PL）、分析コード199（貸方繰越利益PL）の消費税科目区分のデフォルトを対象外に設定する
//================== ver5.05 修正内容 ======================
//	<117>	黒田 祐生	2013/10/04(FRI) 科目ｺﾋﾟｰ時に分類ｺｰﾄﾞもｺﾋﾟｰするようにする
//	<118>	黒田 祐生	2013/11/08(FRI) 科目ｺﾋﾟｰ時に一覧画面から合計科目で「選択」を選らんで、正残区分にﾁｪｯｸを入れてもｺﾋﾟｰされない点を修正
//	<119>	黒田 祐生	2014/01/15(WED)	詳細画面で複合科目の分析ｺｰﾄﾞを変更したときに、部門,ｾｸﾞﾒﾝﾄ,工事採用の範囲に入っていると採用が立ってしまう点を修正
//	<120>	大下(3A)	2014/02/27(THU)	科目ｺﾋﾟｰ時に部門、ｾｸﾞﾒﾝﾄｺｰﾄﾞがｺﾋﾟｰされない不具合修正
//	<121>	大下(3A)	2014/02/27(THU)	分析ｺｰﾄﾞ変更時に部門、ｾｸﾞﾒﾝﾄ、工事の採用が変更されてしまう不具合修正
//	<122>	大下(3A)	2014/02/28(FRI)	科目別補助ｺｰﾄﾞの末尾にｽﾍﾟｰｽが登録できる不具合修正
//	<123>	大下(3A)	2015/03/31(TUE)	科目別補助の採用情報設定Dlg、諸口登録Dlgでキャンセル押下すると、科目コード0の科目が登録できてしまう不具合を修正
//	<124>	柴崎 裕紀	2017/09/20(WED)	EdgeTracker連携（メッセージ対応） 、科目の削除時にメッセージを出す。
//================== ver5.13 修正内容 ======================
//  <125>   森江(CYB)   2018/04/19(THU) 分析コード<52：少数株主持分>設定時に自動セットする要約コードを<20：引当金>から<23：他株主資本>に修正。
//                                      さらに上記の勘定科目更新時に
//                                      　①勘定科目基本マスタに更新する要約分析コードを<8:引当金>から<10:剰余金>に修正。
//                                      　②管理科目基本マスタのマスタ区分=<10：分析科目>、外部コード=<52：少数株主持分>に対応する
//                                        　要約分析コードを<8:引当金>から<10:剰余金>に修正。
//  <126>   小松 泰斗   2018/09/18(THU) EdgeTracker連携（メッセージ対応）：<124>で対応していなかった科目別補助も削除後にメッセージを出せるようにする。
//
//  <#NGEN>	小室(Admax)	2018/11/13(TUE) 新元号対応
//================== Ver5.18 修正内容 ========================
//  <127>   中村(LEAD)  2021/01/07(TUE) 呼量削減対応（出力順序確認画面終了時に工事合計集計科目等の見直しを促すメッセージを表示する）
//=============================================================================
//================== Ver5.19 修正内容 ========================
//  <128>   真田(CYB)   2021/08/10(TUE) 科目体系リストにて外部コードではなく内部コードが出力される不具合を修正。
//================== Ver5.20 修正内容 ========================
//  <129>   中村(LEAD)  2021/12/27(MON) 分析コード変更時に以下の項目が初期化されてしまう旨の確認メッセージを表示するように対応。
//										正残区分、BS/PL区分、期首残区分、要約分析コード、固定費・変動費コード、消費税区分（科目別消費税）
//=============================================================================
unit JNTCRP009001u;

interface

uses
  Windows, Messages, SysUtils, Classes, VCL.Graphics, VCL.Controls, VCL.Forms, VCL.Dialogs, MJSCommonDialogs,
  Buttons, VCL.ExtCtrls, ComCtrls, VCL.ImgList, VCL.StdCtrls, dxGrClms, dxTL, dxDBGrid,
  dxCntner, Db, dxmdaset, FireDAC.Comp.Client, CommCtrl, Menus, ToolWin, Grids, ActnList,

  ppBands, ppCtrls, ppVar, ppPrnabl, ppClass, ppCache, ppComm, ppRelatv,
  ppProd, ppReport, ppDB, ppDBPipe,

  MJSFunctionBar, MJSSPFunctionBar, MJSPanel,  MJSLabel, MJSPageControl,
  MJSEdits, MJSTab, MJSQuery, MJSComboBox, MJSGroupBox, MJSSpeedButton, MJSBitBtn,
  MJSRadioButton, MJSCheckBox,

  MjsDBModuleu, MjsDispCtrl, MjsPrnDlgu, MjsPrnSupportu, MjsDateCtrl, MjsCommonu,
  MjsCommon2u, MjsPreviewIFu, MjsMsgStdu, MjsStrCtrl,

  JNTMasWndIFu, JNTMasComu, JNTMasTreee2Dlgu,
  JNTFuncU,                             // <004>
  JNTSelCorpSys, JNTExpGlobal, JNTPDlg, // <PRN>

  JNTCRP009001_D1u, // ｺﾋﾟｰ元設定ﾀﾞｲｱﾛｸﾞ
  JNTCRP009001_D3u, // 諸口設定ﾀﾞｲｱﾛｸﾞ
  JNTCRP009001_D4u, // ｺｰﾄﾞ設定ﾀﾞｲｱﾛｸﾞ
  JNTCRP009001_D5u,	// 科目出力順序ﾀﾞｲｱﾛｸﾞ	// <100>
  MasDateCtrl,		// <#NGEN>

  JNTCommonu, MJSToolBar, MJSStatusBar, MJSTreeView,       // 共通ﾏｽﾀ専用ﾗｲﾌﾞﾗﾘ
  MLBplLoaderU	// <093>
  ,MJSKeyDataState	// <105>ADD
  ,Variants, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, ppDesignLayer, ppParameter,
  FireDAC.Comp.DataSet, System.Actions, System.ImageList
  ;

  const
	WM_ONPAINT	= WM_APP + 1;	// OnPaint 時の処理起動ﾒｯｾｰｼﾞ用

type
{$include ActionInterface.inc}
{$include JNTCRP009001.inc}
{$include JNTMASFUSENBIKODLGIFH.inc}    // 付箋備考DLG
{$include JNTMasCommonFuncH.inc}
{$include JNTMasExceptIFI.inc}			// 排他制御
{$include JNTMasExceptIFH.inc}			// 排他制御
{$include JNTCRP009001_H.inc}
{$include JNTMASSEARCHDLGIFH.inc}		// 検索DLG
{$include JNTCRPSyncMasterH.inc}   		// <SYNC> ﾏｽﾀ同期共通ﾍｯﾀﾞ部
{$include JNTSyncMasterIFH.inc}   		// <066> 配信ﾀﾞｲｱﾛｸﾞ共通ﾍｯﾀﾞ部
{$include MenuActionInterface.inc}      // 別処理の呼び出し <100>ADD
// -------------------------------------
//  TMTreeViewアイテム
// -------------------------------------
	TaikeiRec = Record
        NCode		    :	Extended;	//  科目内部ｺｰﾄﾞ
        CNCode          :   Extended;   //  細目内部ｺｰﾄﾞ
        GCode           :   Integer;    //  科目外部ｺｰﾄﾞ
        SubCode         :   String;     //  細目外部ｺｰﾄﾞ
		Kbn			    :	Byte;		//	実在/合計区分
		Name		    :	String;		//	簡略名称
		AddKbn		    :	Byte;		//	加算区分
		KoteiKbn	    :	Byte;		//	固定体系区分
		MasKbn		    :	Byte;		//	ﾏｽﾀ区分
		ChildKbn	    :	Boolean;	//	子供があるかないかの区分
		NotAdd		    :	Byte;		//	加算なし(0:なし、1:あり)
		DefKbn		    :	Byte;		//  損益科目の直下の科目かどうかの判断(損益表示時に使用)
        Syokuchi        :   Integer;    //  諸口区分(0:諸口以外 1:諸口)
        CodeAttr        :   Integer;    //  細目ｺｰﾄﾞ属性
        CodeDigit       :   Integer;    //  細目ｺｰﾄﾞ桁数
	end;

	wkRec = Record
		ConstNCode	    :	Extended;
		SumKbn		    :	Byte;		//	実在/合計区分
		AddKbn		    :	Integer;	//	加算/減算区分
	end;

	//	工事の科目範囲
	KoujiCodeRec = Record
		KoujiStartCode	:	Extended;
		KoujiEndCode	:	Extended;
	end;

	//	性格ｺｰﾄﾞのﾃﾞﾌｫﾙﾄ
	SeikakuDefaultRec = Record
		Kijitsu		    :	Byte;		//	期日入力区分
		H_Kijitsu	    :	Byte;		//	期日必須入力区分
		Tegata		    :	Byte;		//	手形番号入力区分
		H_Tegata	    :	Byte;		//	手形番号必須入力区分
		TegataNo	    :	Byte;		//	手形管理NO入力区分
		H_TegataNo	    :	Byte;		//	手形管理NO必須入力区分
		NoInput1	    :	Byte;		//	番号１入力区分
		H_NoInput1	    :	Byte;		//	番号１必須入力区分
		NoInput2	    :	Byte;		//	番号２入力区分
		H_NoInput2	    :	Byte;		//	番号２必須入力区分
	end;

	//	分析ｺｰﾄﾞのﾃﾞﾌｫﾙﾄ
	DefaultRec = Record
		Code		    :	Integer;	//	分析ｺｰﾄﾞ
		SeiZan		    :	Integer;	//	正残区分(0:借方、1:貸方)
		BPKbn		    :	Integer;	//	BS/PL区分(0:B/S、1:P/L)
		Kisyuzan	    :	Integer;	//	期首残(0:なし、1:あり)
		Shiwake		    :	Integer;	//	仕訳入力区分(0:貸借入力、1:正残側のみ、2:負残側のみ、9:入力不可)
		TaxKbn		    :	Integer;	//	消費税科目区分(0:対象外、1:売上科目、2:仕入科目)
		TaxCode		    :	Integer;	//	消費税ｺｰﾄﾞ(0:なし、10～99)
		Mainasu		    :	Integer;	//	ﾏｲﾅｽ印刷区分(0:なし、1:あり)
		YouyakuCode	    :	Integer;	//	要約(BS/PL)ｺｰﾄﾞ
		KoteiCode   	:	Integer;	//	固定費ｺｰﾄﾞ
		HendoCode	    :	Integer;	//	変動費ｺｰﾄﾞ
	end;

	//	銀行ｺｰﾄﾞの属性・桁数
	BankRec = Record
		CodeZoku	    :	Integer;	//	ｺｰﾄﾞ属性
		CodeKeta	    :	Integer;	//	ｺｰﾄﾞ桁数
	end;

	//	勘定科目・細目科目の桁数
	KmkRec = Record
        KanjyoZoku      :   Integer;    //  勘定科目の属性
		KanjyoKeta	    :	Integer;	//	勘定科目の桁数
        SaimokukZoku    :   Integer;    //  細目科目の属性
		SaimokuKeta	    :	Integer;	//	細目科目の桁数
	end;

	//	部門・ｾｸﾞﾒﾝﾄ・工事の採用
	SaiyouRec = Record
		Bumon		    :	Integer;	            //	部門
		Seg			    :	array[0..9] of Integer;	//	ｾｸﾞﾒﾝﾄ
		Kouji		    :	Integer;	            //	工事
	end;

	//	部門・ｾｸﾞﾒﾝﾄ・工事の大元採用
	UseKbnRec = Record
		Bmn		        :	Integer;	//	部門
		Seg		        :	Integer;	//	ｾｸﾞﾒﾝﾄ
		Koj		        :	Integer;	//	工事
	end;

	//	ﾏｽﾀ再計算のﾒｯｾｰｼﾞ
	SwkRec = Record
		MessageFlag	    :	Boolean;		//	ﾒｯｾｰｼﾞﾌﾗｸﾞ
		SaveKmkCode	    :	Integer;		//	退避科目ｺｰﾄﾞ
	end;

// -------------------------------------
//	    印刷用の固定体系
// -------------------------------------
	PrintK_TaikeiRec = Record
		NCode		    :	Extended;		// 内部ｺｰﾄﾞ
		Sumkbn		    :	Byte;			// 実在合計区分
		SimpleName	    :	String;			// 簡略名称
		S_NCode		    :	Extended;		// 加算先内部ｺｰﾄﾞ
		S_SimpleName    :	String;			// 加算先簡略名称
		AddKbn		    :	String;			// 加算(+)減算(-)区分
	end;

	//	ｽﾄｱﾄﾞ終了処理に必要な情報
	EndInfoRec = Record
// <040>型変更
//		TanCD		    :	Integer;		//	担当者ｺｰﾄﾞ
        TanCD           :   Extended;       //  担当者ｺｰﾄﾞ
		TanName		    :	String;			//	担当者名
		TanFlag		    :	Boolean;		//	担当者選択なし(-1以外:TRUE/-1:FALSE)
	end;

	// 科目体系登録
	PrintTaikeiRec = Record
		KmkCode		    :	Integer;		//	外部ｺｰﾄﾞ
		SimpleName	    :	String;			//	加算先簡略名称
		AddKbn		    :	String;			//	加算(+)減算(-)区分
		MaxEnt		    :	String;			//	最大登録Noの科目ｺｰﾄﾞ
		SumKbn		    :	Integer;		//	実在/合計区分
	end;

	POverCodeRec = ^TOverCodeRec;

	TOverCodeRec = Record
		KmkCode		    :	Integer;
		SumKbn		    :	Integer;
	end;

	SaveRec = Record
		Node		    :	TTreeNode;
		NodeOya		    :	TTreeNode;
		Taikei		    :	^TaikeiRec;
		DspName		    :	String;
	end;

    //  分類用<002>
    BunruiRec = Record
        LCaption        :   TMLabel;
        ECode           :   TMTxtEdit;
        LName           :   TMLabel;
        NCode           :   Extended;
        GCode           :   String;
    end;

  TJNTCRP009001f = class(TForm)
    P_Title: TMPanel;
    B_End: TMSpeedButton;
    B_Print_: TMSpeedButton;
    B_Change: TMSpeedButton;
    B_Syousai_: TMSpeedButton;
    B_Delete_: TMSpeedButton;
    StatusBar: TMStatusBar;
    Splitter: TSplitter;
    P_Grid: TMPanel;
    PGoukei: TMPanel;
    PZitsu: TMPanel;
    PSaimoku: TMPanel;
    DZitsuGrid: TdxDBGrid;
    DGoukeiGrid: TdxDBGrid;
    DGoukeiGridGCode: TdxDBGridMaskColumn;
    DGoukeiGridGRen: TdxDBGridMaskColumn;
    DGoukeiGridGLongName: TdxDBGridMaskColumn;
    DGoukeiGridGSName: TdxDBGridMaskColumn;
    DSaimokuGrid: TdxDBGrid;
    MemZitsuCode: TIntegerField;
    MemZitsuRen: TStringField;
    MemZitsuLongName: TStringField;
    MemZitsuSName: TStringField;
    DSourceZitsu: TDataSource;
    MemSai: TdxMemData;
    MemSaiSRen: TStringField;
    MemSaiSLongName: TStringField;
    MemSaiSSName: TStringField;
    DSourceSai: TDataSource;
    MemGou: TdxMemData;
    MemGouGCode: TIntegerField;
    MemGouGRen: TStringField;
    MemGouGLongName: TStringField;
    MemGouGSName: TStringField;
    DSourceGou: TDataSource;
    DSaimokuGridSCode: TdxDBGridMaskColumn;
    DSaimokuGridSLongName: TdxDBGridMaskColumn;
    DSaimokuGridSSName: TdxDBGridMaskColumn;
    DSaimokuGridSRen: TdxDBGridMaskColumn;
    ImageList: TImageList;
    MTab_N: TMTab;
    TreeView: TMTreeView;
    P_Top: TMPanel;
    MComboBox_: TMComboBox;
    DZitsuGridCode: TdxDBGridMaskColumn;
    DZitsuGridRen: TdxDBGridMaskColumn;
    DZitsuGridLongName: TdxDBGridMaskColumn;
    DZitsuGridSName: TdxDBGridMaskColumn;
    MemSaiSFusen: TGraphicField;
    DSaimokuGridSFusen: TdxDBGridGraphicColumn;
    MemZitsuFusen: TGraphicField;
    DZitsuGridFusen: TdxDBGridGraphicColumn;
    MemGouGFusen: TGraphicField;
    DGoukeiGridGFusen: TdxDBGridGraphicColumn;
    MemSaiSFusenInfo: TIntegerField;
    MemGouGFusenInfo: TIntegerField;
    MemZitsuSeikakuNO: TIntegerField;
    DZitsuGridFusenInfo: TdxDBGridMaskColumn;
    DZitsuGridSeikaku: TdxDBGridMaskColumn;
    MemZitsu: TdxMemData;
    MemZitsuBunsekiNO: TIntegerField;
    MemSeikaku: TdxMemData;
    MemZitsuSeikakuData: TSmallintField;
    DZitsuGridSeikakuNO: TdxDBGridLookupColumn;
    MemSeikakuS_Code: TIntegerField;
    MemSeikakuS_Name: TStringField;
    DZitsuGridBunseki: TdxDBGridMaskColumn;
    MLabel1: TMLabel;
    P_Syousai: TMPanel;
    ScrollBox: TScrollBox;
    MTab_Select: TMTab;
    P_SyouTop: TMPanel;
    LCode: TMLabel;
    LLName: TMLabel;
    LSName: TMLabel;
    LRen: TMLabel;
    LBunseki: TMLabel;
    LYoubun: TMLabel;
    LSeikaku: TMLabel;
    LBunName: TMLabel;
    LYoBunName: TMLabel;
    LSeikakuName: TMLabel;
    ERen: TMTxtEdit;
    ELName: TMTxtEdit;
    ESName: TMTxtEdit;
    EBunCode: TMNumEdit;
    ESeikakuCode: TMNumEdit;
    P_SyouCli: TMPanel;
    MTab_SyousaiInfo: TMTab;
    P_OP_Bottom: TMPanel;
    B_SUpDate: TMBitBtn;
    B_SCancel: TMBitBtn;
    P_Shiwake: TMPanel;
    MLabel40: TMLabel;
    MLabel46: TMLabel;
    LShiwa: TMLabel;
    LKijitsu: TMLabel;
    LTegataNo: TMLabel;
    LKoteiTeki: TMLabel;
    LTekiBunrui: TMLabel;
    LShikikuriYu: TMLabel;
    LTekiyoubunrui: TMLabel;
    LShiwakeName: TMLabel;
    LKijitsuName: TMLabel;
    LTegataNoName: TMLabel;
    LTekiName: TMLabel;
    LShikuriName: TMLabel;
    EShiwakeCode: TMNumEdit;
    ETekiyouBunrui: TMNumEdit;
    EKijitsuCode: TMNumEdit;
    ETegataNoCode: TMNumEdit;
    ETekiCode: TMNumEdit;
    EShikuriCode: TMNumEdit;
    P_Syukei: TMPanel;
    MLabel8: TMLabel;
    LSeizan: TMLabel;
    LBsPl: TMLabel;
    LKisyuzan: TMLabel;
    LDspPri: TMLabel;
    LHiritsu: TMLabel;
    LKariShiki: TMLabel;
    LKashiShiki: TMLabel;
    LHendou: TMLabel;
    MLabel33: TMLabel;
    MLabel34: TMLabel;
    LMaina: TMLabel;
    LSagaPri: TMLabel;
    LRiekiPri: TMLabel;
    LAve: TMLabel;
    LRuikei: TMLabel;
    LMainaHen: TMLabel;
    LSousyoku: TMLabel;
    MLabel35: TMLabel;
    LSeiZanName: TMLabel;
    LBPName: TMLabel;
    LKisyuName: TMLabel;
    LDPName: TMLabel;
    LHiritsuName: TMLabel;
    LKariName: TMLabel;
    LKashiName: TMLabel;
    LMainasuName: TMLabel;
    LSagakuName: TMLabel;
    LRiekiName: TMLabel;
    LAveName: TMLabel;
    LRuiSyuName: TMLabel;
    LSousyokuName: TMLabel;
    LKobePA: TMLabel;
    LGoukeiDsp: TMLabel;
    LGoukeiDspName: TMLabel;
    LKihyousya: TMLabel;
    LKihyousyaName: TMLabel;
    LBank: TMLabel;
    LBankName: TMLabel;
    EHendouhi: TMNumEdit;
    EMainaName: TMTxtEdit;
    ESeiZanCode: TMNumEdit;
    EBPCode: TMNumEdit;
    EKisyuCode: TMNumEdit;
    EDPCode: TMNumEdit;
    EHiritsuCode: TMNumEdit;
    EKariCode: TMNumEdit;
    EKashiCode: TMNumEdit;
    EMainasuCode: TMNumEdit;
    ESagakuCode: TMNumEdit;
    ERiekiCode: TMNumEdit;
    EAveCode: TMNumEdit;
    ERuiSyuCode: TMNumEdit;
    ESousyokuCode: TMNumEdit;
    EGoukeiDsp: TMNumEdit;
    EKihyousya: TMNumEdit;
    EBankCodeT: TMTxtEdit;
    MemGouSousyokuCode: TIntegerField;
    MemGouSousyoku: TStringField;
    MemGouSousyokuData: TSmallintField;
    MemSousyoku: TdxMemData;
    MemSousyokuSousyokuNo: TIntegerField;
    MemSousyokuSousyoku: TStringField;
    DGoukeiGridSousyokuNo: TdxDBGridLookupColumn;
    DGoukeiGridSousyoku: TdxDBGridMaskColumn;
    DZitsuGridRecId: TdxDBGridColumn;
    LYouyaku: TMLabel;
    EYouCode: TMNumEdit;
    LYouName: TMLabel;
    LKotei: TMLabel;
    EKotei: TMNumEdit;
    LKoteiName: TMLabel;
    LHendo: TMLabel;
    EHendo: TMNumEdit;
    LHendoName: TMLabel;
    ToolBar: TMToolBar;
    ToolButton_: TToolButton;
    FusenImageList: TImageList;
    TBPopup: TPopupMenu;
    FAka_ToolBtn: TMenuItem;
    FAo_ToolBtn: TMenuItem;
    FMido_ToolBtn: TMenuItem;
    FOre_ToolBtn: TMenuItem;
    PopupFusen: TPopupMenu;
    PM_Del: TMenuItem;
    PM_Revise: TMenuItem;
    N1: TMenuItem;
    PM_FRE: TMenuItem;
    Grid_FAka_BN: TMenuItem;
    Grid_FAka_BA: TMenuItem;
    PM_FBU: TMenuItem;
    Grid_FAo_BN: TMenuItem;
    Grid_FAo_BA: TMenuItem;
    PM_FGR: TMenuItem;
    Grid_FMido_BN: TMenuItem;
    Grid_FMido_BA: TMenuItem;
    PM_FOR: TMenuItem;
    Grid_FOre_BN: TMenuItem;
    Grid_FOre_BA: TMenuItem;
    PopupMenu: TPopupMenu;
    MI_Kasan: TMenuItem;
    MI_Gensan: TMenuItem;
    N6: TMenuItem;
    MI_Syousai: TMenuItem;
    N5: TMenuItem;
    MI_Copy: TMenuItem;
    MI_Paste: TMenuItem;
    N4: TMenuItem;
    MI_TaikeiDel: TMenuItem;
    MI_Delete: TMenuItem;
    N3: TMenuItem;
    TM_F_Delete: TMenuItem;
    TM_F_Revise: TMenuItem;
    N10: TMenuItem;
    TM_F_Aka: TMenuItem;
    FAka_BN: TMenuItem;
    FAka_BA: TMenuItem;
    TM_F_Ao: TMenuItem;
    FAo_BN: TMenuItem;
    FAo_BA: TMenuItem;
    TM_F_Mido: TMenuItem;
    FMido_BN: TMenuItem;
    FMido_BA: TMenuItem;
    TM_F_Ore: TMenuItem;
    FOre_BN: TMenuItem;
    FOre_BA: TMenuItem;
    DZitsuGridBunsekiNO: TdxDBGridButtonColumn;
    B_KmkCopy_: TMSpeedButton;
    LAddUnit: TMLabel;
    EAddUnit: TMNumEdit;
    LAddUnitName: TMLabel;
    Panel_Denshi: TMPanel;
    MLabel3: TMLabel;
    LDen_Rireki: TMLabel;
    ERirekiKbnCode: TMNumEdit;
    LRirekiKbnName: TMLabel;
    Panel_Number: TMPanel;
    MLabel4: TMLabel;
    ComboNumber1: TMComboBox;
    ENumber1: TMNumEdit;
    LNumber1: TMLabel;
    LDspKbnNumber1: TMLabel;
    EDspNumber1: TMNumEdit;
    LDspNumber1: TMLabel;
    LTitleNumber2: TMLabel;
    ComboNumber2: TMComboBox;
    ENumber2: TMNumEdit;
    LNumber2: TMLabel;
    LDspNumber2: TMLabel;
    EDspNumber2: TMNumEdit;
    LDspKbnNumber2: TMLabel;
    MLabel14: TMLabel;
    ETotalKbn: TMNumEdit;
    LTotalKbnName: TMLabel;
    LNameNumber1: TMLabel;
    LInputNumber1: TMLabel;
    LNameNumber2: TMLabel;
    LInputNumber2: TMLabel;
    B_Search_: TMSpeedButton;
    ActionList: TActionList;
    FusenClick: TAction;
    SyousaiClick: TAction;
    DeleteClick: TAction;
    KmkCopyClick: TAction;
    SearchClick: TAction;
    PrintClick: TAction;
    MemZitsuNCode: TFloatField;
    MemZitsuCNCode: TFloatField;
    MemSaiNCode: TFloatField;
    MemSaiCNCode: TFloatField;
    MemGouNCode: TFloatField;
    MemGouCNCode: TFloatField;
    P_Saiyo: TMPanel;
    LSaiyou: TMLabel;
    LStartDate: TMLabel;
    EStartDate: TMDateEdit;
    EEndDate: TMDateEdit;
    LEndDate: TMLabel;
    EBankCodeN: TMNumEdit;
    LBumon: TMLabel;
    EBmnUse: TMNumEdit;
    LBmnUse: TMLabel;
    LGinko: TMLabel;
    LShain: TMLabel;
    MLabel10: TMLabel;
    LTorihikisaki: TMLabel;
    LHojyo1: TMLabel;
    MLabel13: TMLabel;
    MLabel15: TMLabel;
    MLabel16: TMLabel;
    EBankUse: TMNumEdit;
    EToriUse: TMNumEdit;
    EShainUse: TMNumEdit;
    EHojyoUse1: TMNumEdit;
    EHojyoUse2: TMNumEdit;
    EHojyoUse3: TMNumEdit;
    EHojyoUse4: TMNumEdit;
    EHojyoUse5: TMNumEdit;
    LBankUse: TMLabel;
    LToriUse: TMLabel;
    LShainUse: TMLabel;
    LHojyoUse1: TMLabel;
    LHojyoUse2: TMLabel;
    LHojyoUse3: TMLabel;
    LHojyoUse4: TMLabel;
    LHojyoUse5: TMLabel;
    MLabel17: TMLabel;
    LSegUse1: TMLabel;
    MLabel27: TMLabel;
    MLabel28: TMLabel;
    MLabel29: TMLabel;
    MLabel30: TMLabel;
    MLabel31: TMLabel;
    MLabel32: TMLabel;
    MLabel36: TMLabel;
    MLabel37: TMLabel;
    LSegUse2: TMLabel;
    LSegUse3: TMLabel;
    LSegUse4: TMLabel;
    LSegUse5: TMLabel;
    LSegUse6: TMLabel;
    LSegUse7: TMLabel;
    LSegUse8: TMLabel;
    LSegUse9: TMLabel;
    ESegUse1: TMNumEdit;
    ESegUse2: TMNumEdit;
    ESegUse3: TMNumEdit;
    ESegUse4: TMNumEdit;
    ESegUse5: TMNumEdit;
    ESegUse6: TMNumEdit;
    ESegUse7: TMNumEdit;
    ESegUse8: TMNumEdit;
    ESegUse9: TMNumEdit;
    MLabel48: TMLabel;
    LSegUse10: TMLabel;
    ESegUse10: TMNumEdit;
    MLabel50: TMLabel;
    LPrjUse1: TMLabel;
    MLabel52: TMLabel;
    MLabel53: TMLabel;
    MLabel54: TMLabel;
    MLabel55: TMLabel;
    MLabel56: TMLabel;
    MLabel57: TMLabel;
    MLabel58: TMLabel;
    MLabel59: TMLabel;
    LPrjUse2: TMLabel;
    LPrjUse3: TMLabel;
    LPrjUse4: TMLabel;
    LPrjUse5: TMLabel;
    LPrjUse6: TMLabel;
    LPrjUse7: TMLabel;
    LPrjUse8: TMLabel;
    LPrjUse9: TMLabel;
    EPrjUse1: TMNumEdit;
    EPrjUse2: TMNumEdit;
    EPrjUse3: TMNumEdit;
    EPrjUse4: TMNumEdit;
    EPrjUse5: TMNumEdit;
    EPrjUse6: TMNumEdit;
    EPrjUse7: TMNumEdit;
    EPrjUse8: TMNumEdit;
    EPrjUse9: TMNumEdit;
    MLabel68: TMLabel;
    LPrjUse10: TMLabel;
    EPrjUse10: TMNumEdit;
    MemSaiSCode: TStringField;
    DZitsuGridNCode: TdxDBGridColumn;
    DSaimokuGridNCode: TdxDBGridColumn;
    DSaimokuGridCNCode: TdxDBGridColumn;
    DGoukeiGridNCode: TdxDBGridColumn;
    P_Bunrui: TMPanel;
    MLabel5: TMLabel;
    LBun01: TMLabel;
    MLabel21: TMLabel;
    MLabel43: TMLabel;
    EBun01: TMTxtEdit;
    L2Bun01: TMLabel;
    LBun02: TMLabel;
    EBun02: TMTxtEdit;
    L2Bun02: TMLabel;
    LBun03: TMLabel;
    EBun03: TMTxtEdit;
    L2Bun03: TMLabel;
    LBun04: TMLabel;
    EBun04: TMTxtEdit;
    L2Bun04: TMLabel;
    LBun05: TMLabel;
    EBun05: TMTxtEdit;
    L2Bun05: TMLabel;
    LBun06: TMLabel;
    MLabel23: TMLabel;
    EBun06: TMTxtEdit;
    L2Bun06: TMLabel;
    LBun07: TMLabel;
    EBun07: TMTxtEdit;
    L2Bun07: TMLabel;
    LBun08: TMLabel;
    EBun08: TMTxtEdit;
    L2Bun08: TMLabel;
    LBun09: TMLabel;
    EBun09: TMTxtEdit;
    L2Bun09: TMLabel;
    LBun10: TMLabel;
    EBun10: TMTxtEdit;
    L2Bun10: TMLabel;
    MLabel6: TMLabel;
    MLabel7: TMLabel;
    MLabel9: TMLabel;
    MLabel11: TMLabel;
    MLabel12: TMLabel;
    imgFusenD: TImageList;
    DtlCmnImgFusen: TImage;
    MemPrint: TdxMemData;
    MemPrintFusen: TGraphicField;
    MemPrintCode: TIntegerField;
    MemPrintSeishikiName: TStringField;
    MemPrintKanryakuName: TStringField;
    MemPrintRensou: TStringField;
    MemPrintMainaKamoku: TStringField;
    MemPrintBunseki: TIntegerField;
    MemPrintYouYakuCode: TSmallintField;
    MemPrintSeikaku: TIntegerField;
    MemPrintKisyuName: TStringField;
    MemPrintSeizanName: TStringField;
    MemPrintBsPlName: TStringField;
    MemPrintKariKuri: TSmallintField;
    MemPrintKashiKuri: TSmallintField;
    MemPrintSousyokuName: TStringField;
    MemPrintDspPriName: TStringField;
    MemPrintSaimoku: TSmallintField;
    MemPrintHojo1: TSmallintField;
    MemPrintHojo2: TSmallintField;
    MemPrintBumon: TSmallintField;
    MemPrintSeg: TSmallintField;
    MemPrintHiritsuName: TStringField;
    MemPrintHendouhi: TFloatField;
    MemPrintKobetsu: TFloatField;
    MemPrintSagakuName: TStringField;
    MemPrintRiekiName: TStringField;
    MemPrintMainasuPriName: TStringField;
    MemPrintKihyouPri: TStringField;
    MemPrintAveName: TStringField;
    MemPrintRuikeiName: TStringField;
    MemPrintShiwakeName: TStringField;
    MemPrintKijitsuName: TStringField;
    MemPrintKijitsuHisu: TStringField;
    MemPrintTegataNoName: TStringField;
    MemPrintTegataHisu: TStringField;
    MemPrintKoteiTekiName: TStringField;
    MemPrintTekiyouBun: TIntegerField;
    MemPrintSyousu: TSmallintField;
    MemPrintShikuriYuName: TStringField;
    MemPrintRirekiName: TStringField;
    MemPrintDenHojo1Name: TStringField;
    MemPrintDenHojo2Name: TStringField;
    MemPrintStartDate: TDateField;
    MemPrintEndDate: TDateField;
    MemPrintLastUpDate: TDateTimeField;
    MemPrintYouyaku: TSmallintField;
    MemPrintKotei: TSmallintField;
    MemPrintHendo: TSmallintField;
    MemPrintAddUnit: TStringField;
    MemPrint_Saimoku: TdxMemData;
    MemPrint_SaimokuS_Fusen: TGraphicField;
    MemPrint_SaimokuS_KCode: TIntegerField;
    MemPrint_SaimokuS_KName: TStringField;
    MemPrint_SaimokuS_SCode: TStringField;  // <030>Integer→String
    MemPrint_SaimokuS_SeisikiName: TStringField;
    MemPrint_SaimokuS_KanryakuName: TStringField;
    MemPrint_SaimokuS_Renso: TStringField;
    MemPrint_SaimokuS_KarikuriNo: TIntegerField;
    MemPrint_SaimokuS_KarikuriName: TStringField;
    MemPrint_SaimokuS_KashikuriNo: TSmallintField;
    MemPrint_SaimokuS_KashikuriName: TStringField;
    MemPrint_SaimokuS_SousyokuName: TStringField;
    MemPrint_SaimokuS_Syousu: TSmallintField;
    MemPrint_SaimokuS_StartDate: TDateField;
    MemPrint_SaimokuS_EndDate: TDateField;
    MemPrint_SaimokuS_LastUpDate: TDateTimeField;
    MemPrint_Goukei: TdxMemData;
    MemPrint_GoukeiG_Fusen: TGraphicField;
    MemPrint_GoukeiG_Code: TIntegerField;
    MemPrint_GoukeiG_SeishikiName: TStringField;
    MemPrint_GoukeiG_KanryakuName: TStringField;
    MemPrint_GoukeiG_Rensou: TStringField;
    MemPrint_GoukeiG_SeizanName: TStringField;
    MemPrint_GoukeiG_BPName: TStringField;
    MemPrint_GoukeiG_SousyokuName: TStringField;
    MemPrint_GoukeiG_DsPriName: TStringField;
    MemPrint_GoukeiG_SagakuPriName: TStringField;
    MemPrint_GoukeiG_RiekiPriName: TStringField;
    MemPrint_GoukeiG_MainaPriName: TStringField;
    MemPrint_GoukeiG_AveName: TStringField;
    MemPrint_GoukeiG_RuikeiName: TStringField;
    MemPrint_GoukeiG_GoukeiDsp: TStringField;
    MemPrint_GoukeiG_MainaKmk: TStringField;
    MemPrint_GoukeiG_LastUpDate: TDateTimeField;
    MemPrint_TaikeiList: TdxMemData;
    MemPrint_TaikeiListT_KMCode: TIntegerField;
    MemPrint_TaikeiListT_KMKanryaku: TStringField;
    MemPrint_TaikeiListT_Add01: TStringField;
    MemPrint_TaikeiListT_KSCode01: TIntegerField;
    MemPrint_TaikeiListT_KSName01: TStringField;
    MemPrint_TaikeiListT_Add02: TStringField;
    MemPrint_TaikeiListT_KSCode02: TIntegerField;
    MemPrint_TaikeiListT_KSName02: TStringField;
    MemPrint_TaikeiListT_Add03: TStringField;
    MemPrint_TaikeiListT_KSCode03: TIntegerField;
    MemPrint_TaikeiListT_KSName03: TStringField;
    MemPrint_JitsuKan: TdxMemData;
    MemPrint_JitsuKanJ_Code: TIntegerField;
    MemPrint_JitsuKanJ_LongName: TStringField;
    MemPrint_JitsuKanJ_SimpleName: TStringField;
    MemPrint_JitsuKanJ_Renso: TStringField;
    MemPrint_JitsuKanJ_BunsekiCode: TIntegerField;
    MemPrint_JitsuKanJ_BunsekiName: TStringField;
    MemPrint_JitsuKanJ_SeikakuCode: TIntegerField;
    MemPrint_JitsuKanJ_SeikakuName: TStringField;
    MemPrint_JitsuKanJ_Seizan: TStringField;
    MemPrint_JitsuKanJ_BPKbn: TStringField;
    MemPrint_JitsuKanJ_Kisyuzan: TStringField;
    MemPrint_JitsuKanJ_KariKuriCode: TIntegerField;
    MemPrint_JitsuKanJ_KariKuriName: TStringField;
    MemPrint_JitsuKanJ_KashiKuriCode: TIntegerField;
    MemPrint_JitsuKanJ_KashiKuriName: TStringField;
    MemPrint_JitsuKanJ_Sousyoku: TStringField;
    MemPrint_JitsuKanJ_Fusen: TGraphicField;
    MemPrint_Hendo: TdxMemData;
    IntegerField1: TIntegerField;
    StringField1: TStringField;
    IntegerField2: TIntegerField;
    StringField3: TStringField;
    IntegerField3: TIntegerField;
    StringField5: TStringField;
    MemPrint_HendoH_HendoRate: TFloatField;
    MemPrint_Ichiran: TdxMemData;
    MemPrint_IchiranIchi_KmkCode: TIntegerField;
    MemPrint_IchiranIchi_KmkName: TStringField;
    MemPrint_Taikei: TdxMemData;
    MemPrint_TaikeiCode: TIntegerField;
    MemPrint_TaikeiSimpleName: TStringField;
    MemPrint_TaikeiCode01: TIntegerField;
    MemPrint_TaikeiAddKbn01: TStringField;
    MemPrint_TaikeiName01: TStringField;
    MemPrint_TaikeiMaxEnt01: TStringField;
    MemPrint_TaikeiAddKbn02: TStringField;
    MemPrint_TaikeiCode02: TIntegerField;
    MemPrint_TaikeiName02: TStringField;
    MemPrint_TaikeiMaxEnt02: TStringField;
    MemPrint_TaikeiAddKbn03: TStringField;
    MemPrint_TaikeiCode03: TIntegerField;
    MemPrint_TaikeiName03: TStringField;
    MemPrint_TaikeiMaxEnt03: TStringField;
    MemPrint_TaikeiAddKbn04: TStringField;
    MemPrint_TaikeiCode04: TIntegerField;
    MemPrint_TaikeiName04: TStringField;
    MemPrint_TaikeiMaxEnt04: TStringField;
    MemPrint_TaikeiAddKbn05: TStringField;
    MemPrint_TaikeiCode05: TIntegerField;
    MemPrint_TaikeiName05: TStringField;
    MemPrint_TaikeiMaxEnt05: TStringField;
    MemPrint_TaikeiAddKbn06: TStringField;
    MemPrint_TaikeiCode06: TIntegerField;
    MemPrint_TaikeiName06: TStringField;
    MemPrint_TaikeiMaxEnt06: TStringField;
    MemPrint_TaikeiAddKbn07: TStringField;
    MemPrint_TaikeiCode07: TIntegerField;
    MemPrint_TaikeiName07: TStringField;
    MemPrint_TaikeiMaxEnt07: TStringField;
    MemPrint_TaikeiAddKbn08: TStringField;
    MemPrint_TaikeiCode08: TIntegerField;
    MemPrint_TaikeiName08: TStringField;
    MemPrint_TaikeiMaxEnt08: TStringField;
    MemPrint_TaikeiAddKbn09: TStringField;
    MemPrint_TaikeiName09: TStringField;
    MemPrint_TaikeiCode09: TIntegerField;
    MemPrint_TaikeiMaxEnt09: TStringField;
    MemPrint_TaikeiBitmapTop: TGraphicField;
    MemPrint_TaikeiBitmap01: TGraphicField;
    MemPrint_TaikeiBitmap02: TGraphicField;
    MemPrint_TaikeiBitmap03: TGraphicField;
    MemPrint_TaikeiBitmap04: TGraphicField;
    MemPrint_TaikeiBitmap05: TGraphicField;
    MemPrint_TaikeiBitmap06: TGraphicField;
    MemPrint_TaikeiBitmap07: TGraphicField;
    MemPrint_TaikeiBitmap08: TGraphicField;
    MemPrint_TaikeiBitmap09: TGraphicField;
    MemPrint_TaikeiSumKbn09: TIntegerField;
    MemPrintBun1Nm: TStringField;
    MemPrintBun2Nm: TStringField;
    MemPrintBun3Nm: TStringField;
    MemPrintBun4Nm: TStringField;
    MemPrintBun5Nm: TStringField;
    ECode: TMTxtEdit;
    MLabel18: TMLabel;
    MLabel19: TMLabel;
    MLabel2: TMLabel;
    Image_Fusen_Red: TImage;
    Image_Fusen_Blue: TImage;
    Image_Fusen_Green: TImage;
    Image_Fusen_Orange: TImage;
    Image_Fusen_Glay: TImage;
    RList: TppReport;
    ppTitleBand1: TppTitleBand;
    ppHeaderBand1: TppHeaderBand;
    ppLineJS_Top: TppLine;
    ppLineJS_Bottom: TppLine;
    ppLine3: TppLine;
    ppLabel1: TppLabel;
    SVppDate: TppSystemVariable;
    LppCorpCode: TppLabel;
    LppCorpName: TppLabel;
    RLKamokuName: TppLabel;
    ppLabel3: TppLabel;
    ppLine4: TppLine;
    ppLine5: TppLine;
    ppLine10: TppLine;
    ppLine11: TppLine;
    ppLabel8: TppLabel;
    ppLabel33: TppLabel;
    ppLabel68: TppLabel;
    pL_Bunseki: TppLabel;
    pL_YouBunseki: TppLabel;
    ppLabel2: TppLabel;
    ppLabel14: TppLabel;
    ppLabel15: TppLabel;
    ppLabel13: TppLabel;
    ppLine115: TppLine;
    ppLabel19: TppLabel;
    ppLabel20: TppLabel;
    ppLine120: TppLine;
    ppLine121: TppLine;
    ppLine122: TppLine;
    ppLine123: TppLine;
    ppLine124: TppLine;
    ppLabel34: TppLabel;
    ppLabel17: TppLabel;
    ppLabel21: TppLabel;
    ppLine125: TppLine;
    ppLine127: TppLine;
    ppLine128: TppLine;
    ppLine129: TppLine;
    ppLine130: TppLine;
    ppLabel26: TppLabel;
    ppLabel27: TppLabel;
    ppLabel30: TppLabel;
    ppLabel12: TppLabel;
    ppLabel35: TppLabel;
    ppLabel36: TppLabel;
    ppLabel38: TppLabel;
    ppLabel39: TppLabel;
    ppLabel40: TppLabel;
    ppLabel47: TppLabel;
    ppLabel25: TppLabel;
    ppLabel10: TppLabel;
    ppLabel11: TppLabel;
    ppLineJS_Left: TppLine;
    ppLineJS_Right: TppLine;
    ppLabel9: TppLabel;
    ppLabel16: TppLabel;
    ppLabel23: TppLabel;
    ppLabel37: TppLabel;
    ppLabel59: TppLabel;
    ppLabel63: TppLabel;
    ppLabel64: TppLabel;
    ppLabel72: TppLabel;
    ppDetailBand_JitsuS: TppDetailBand;
    ppUnderLineJS: TppLine;
    pDT_Code: TppDBText;
    pDT_Seishiki: TppDBText;
    pDT_Kanryaku: TppDBText;
    pDT_Renso: TppDBText;
    pDT_Bunseki: TppDBText;
    pDT_Seikaku: TppDBText;
    pDT_BunsekiName: TppDBText;
    pDT_StartDate: TppDBText;
    pDT_EndDate: TppDBText;
    ppLine1: TppLine;
    ppLine2: TppLine;
    pDT_BsPlName: TppDBText;
    pDT_KisyuName: TppDBText;
    pDT_HiritsuName: TppDBText;
    pDT_SeizanName: TppDBText;
    ppLine6: TppLine;
    ppLine8: TppLine;
    pDT_KariKuri: TppDBText;
    pDT_KashiKuri: TppDBText;
    pDT_Hendouhi: TppDBText;
    ppLine9: TppLine;
    ppDBText7: TppDBText;
    ppDBText9: TppDBText;
    ppDBText13: TppDBText;
    ppDBText17: TppDBText;
    ppLine12: TppLine;
    ppDBText8: TppDBText;
    ppDBText21: TppDBText;
    ppDBText25: TppDBText;
    ppDBText27: TppDBText;
    ppDBText29: TppDBText;
    ppDBText30: TppDBText;
    ppDBText37: TppDBText;
    RImageZitsuSFusen: TppDBImage;
    ppLine114: TppLine;
    ppLine116: TppLine;
    ppLine117: TppLine;
    ppLine118: TppLine;
    ppLine119: TppLine;
    ppLine131: TppLine;
    ppLine133: TppLine;
    ppLine134: TppLine;
    ppLine135: TppLine;
    ppLine136: TppLine;
    ppLine137: TppLine;
    ppDBText1: TppDBText;
    R_JS_LastUpDate: TppDBText;
    pDT_Youyaku: TppDBText;
    pDT_Kotei: TppDBText;
    pDT_Hendo: TppDBText;
    ppDBText19: TppDBText;
    ppDBText28: TppDBText;
    ppDBText31: TppDBText;
    ppDBText32: TppDBText;
    ppDBText34: TppDBText;
    ppFooterBand2: TppFooterBand;
    SVppPage: TppSystemVariable;
    LppAccOffice: TppLabel;
    ppGroup1: TppGroup;
    ppGroupHeaderBand1: TppGroupHeaderBand;
    ppGroupFooterBand1: TppGroupFooterBand;
    LKensu: TppLabel;
    LGouLeft: TppLabel;
    LGouRight: TppLabel;
    RPipeline: TppDBPipeline;
    DDataSource: TDataSource;
    RSaimoku: TppReport;
    ppTitleBand2: TppTitleBand;
    ppHeaderBand2: TppHeaderBand;
    ppLineBootom: TppLine;
    ppLineLeft: TppLine;
    ppLineTop: TppLine;
    ppLine15: TppLine;
    ppLabel50: TppLabel;
    R_SDate: TppSystemVariable;
    R_SCorpNo: TppLabel;
    R_SCorpName: TppLabel;
    ppLine16: TppLine;
    ppLine17: TppLine;
    ppLine18: TppLine;
    ppLine19: TppLine;
    ppLine20: TppLine;
    ppLine31: TppLine;
    ppLine33: TppLine;
    ppLine34: TppLine;
    ppLine36: TppLine;
    ppLabel53: TppLabel;
    ppLabel18: TppLabel;
    ppLabel51: TppLabel;
    ppLabel52: TppLabel;
    ppLabel55: TppLabel;
    ppLabel54: TppLabel;
    ppLabel75: TppLabel;
    ppLabel76: TppLabel;
    ppLabel90: TppLabel;
    ppLabel97: TppLabel;
    ppLine141: TppLine;
    ppLine142: TppLine;
    ppLabel69: TppLabel;
    ppLabel70: TppLabel;
    ppLineRight: TppLine;
    ppDetailBand_Saimoku: TppDetailBand;
    ppUnderLineS: TppLine;
    R_KmkCode: TppDBText;
    R_KmkName: TppDBText;
    ppLine22: TppLine;
    ppLine23: TppLine;
    ppLine24: TppLine;
    ppLine25: TppLine;
    ppLine26: TppLine;
    ppLine27: TppLine;
    ppLine28: TppLine;
    ppLine29: TppLine;
    ppDBText48: TppDBText;
    ppLine30: TppLine;
    ppDBText49: TppDBText;
    ppLine32: TppLine;
    ppDBText50: TppDBText;
    ppDBText51: TppDBText;
    R_S_StartDate: TppDBText;
    R_S_EndDate: TppDBText;
    ppDBText79: TppDBText;
    ppDBText84: TppDBText;
    ppDBText83: TppDBText;
    ppDBText80: TppDBText;
    ppDBText98: TppDBText;
    ppLine35: TppLine;
    ppDBImage1: TppDBImage;
    ppLine143: TppLine;
    ppLine144: TppLine;
    R_S_LastUpDate: TppDBText;
    ppFooterBand1: TppFooterBand;
    R_SPage: TppSystemVariable;
    R_SKaikeiName: TppLabel;
    ppGroup3: TppGroup;
    ppGroupHeaderBand3: TppGroupHeaderBand;
    ppGroupFooterBand3: TppGroupFooterBand;
    RPipeline_Saimoku: TppDBPipeline;
    DataSource_Saimoku: TDataSource;
    RGoukei: TppReport;
    ppTitleBand3: TppTitleBand;
    ppHeaderBand3: TppHeaderBand;
    ppLine43: TppLine;
    ppLine21: TppLine;
    ppLabel108: TppLabel;
    ppLine37: TppLine;
    ppLabel62: TppLabel;
    R_GDate: TppSystemVariable;
    R_GCorpNo: TppLabel;
    R_GCorpName: TppLabel;
    ppLine38: TppLine;
    ppLine39: TppLine;
    ppLine40: TppLine;
    ppLine41: TppLine;
    ppLine42: TppLine;
    ppLine52: TppLine;
    ppLine54: TppLine;
    ppLine56: TppLine;
    ppLine57: TppLine;
    ppLine138: TppLine;
    ppLine139: TppLine;
    ppLine148: TppLine;
    ppLine150: TppLine;
    ppLabel65: TppLabel;
    ppLabel66: TppLabel;
    ppLabel67: TppLabel;
    ppLabel73: TppLabel;
    ppLabel94: TppLabel;
    ppLabel95: TppLabel;
    ppLabel110: TppLabel;
    ppLabel88: TppLabel;
    ppLabel103: TppLabel;
    ppLabel104: TppLabel;
    ppLabel107: TppLabel;
    ppLabel32: TppLabel;
    ppLine7: TppLine;
    ppDetailBand_Gou: TppDetailBand;
    ppUnderLineG: TppLine;
    ppDBText33: TppDBText;
    ppDBText41: TppDBText;
    ppDBText46: TppDBText;
    ppDBText47: TppDBText;
    ppLine44: TppLine;
    ppLine45: TppLine;
    ppDBText78: TppDBText;
    ppDBText82: TppDBText;
    ppDBText86: TppDBText;
    ppLine46: TppLine;
    ppLine48: TppLine;
    ppDBText102: TppDBText;
    ppDBText103: TppDBText;
    ppDBText107: TppDBText;
    ppDBText111: TppDBText;
    ppLine49: TppLine;
    ppDBText112: TppDBText;
    ppLine50: TppLine;
    ppLine51: TppLine;
    ppLine53: TppLine;
    ppLine55: TppLine;
    ppLine58: TppLine;
    ppLine153: TppLine;
    ppLine154: TppLine;
    ppLine157: TppLine;
    ppLine158: TppLine;
    ppDBImage2: TppDBImage;
    R_G_LastUpDate: TppDBText;
    ppFooterBand3: TppFooterBand;
    R_GPage: TppSystemVariable;
    R_GKaikeiName: TppLabel;
    ppGroup2: TppGroup;
    ppGroupHeaderBand2: TppGroupHeaderBand;
    ppGroupFooterBand2: TppGroupFooterBand;
    RL_Kensu: TppLabel;
    ppLabel127: TppLabel;
    ppLabel128: TppLabel;
    RPipeline_Goukei: TppDBPipeline;
    DataSource_Goukei: TDataSource;
    RTaikeiList: TppReport;
    ppTitleBand4: TppTitleBand;
    ppHeaderBand4: TppHeaderBand;
    ppLine59: TppLine;
    pL_Title: TppLabel;
    R_TLDate: TppSystemVariable;
    R_TLCorpNo: TppLabel;
    R_TLCorpName: TppLabel;
    ppColumnHeaderBand1: TppColumnHeaderBand;
    ppLineT_Bottom: TppLine;
    ppLineT_Top: TppLine;
    ppLine62: TppLine;
    ppLine70: TppLine;
    ppLabel71: TppLabel;
    ppLine65: TppLine;
    ppLabel102: TppLabel;
    ppLabel85: TppLabel;
    ppLineT_Left: TppLine;
    ppLineT_Right: TppLine;
    ppLabel28: TppLabel;
    ppLabel31: TppLabel;
    ppLine75: TppLine;
    ppDetailBand_Taikei: TppDetailBand;
    ppUnderLineT: TppLine;
    ppLine72: TppLine;
    ppDBTextCode: TppDBText;
    ppLine77: TppLine;
    ppDBTextKanryaku: TppDBText;
    ppLine71: TppLine;
    ppDBText56: TppDBText;
    ppLine84: TppLine;
    ppDBText62: TppDBText;
    ppLine60: TppLine;
    ppDBText85: TppDBText;
    ppLine79: TppLine;
    ppLine64: TppLine;
    ppDBText2: TppDBText;
    ppLine66: TppLine;
    ppDBText3: TppDBText;
    ppLine67: TppLine;
    ppDBText4: TppDBText;
    ppLine68: TppLine;
    ppDBText5: TppDBText;
    ppLine74: TppLine;
    ppLine76: TppLine;
    ppDBText6: TppDBText;
    ppDBText10: TppDBText;
    ppColumnFooterBand1: TppColumnFooterBand;
    ppFooterBand4: TppFooterBand;
    R_TLPage: TppSystemVariable;
    R_TLKaikeiName: TppLabel;
    ppGroup4: TppGroup;
    ppGroupHeaderBand4: TppGroupHeaderBand;
    ppGroupFooterBand4: TppGroupFooterBand;
    RPipeline_TaikeiList: TppDBPipeline;
    DataSource_TaikeiList: TDataSource;
    RJitsuzai_K: TppReport;
    ppTitleBand5: TppTitleBand;
    ppHeaderBand5: TppHeaderBand;
    ppLine88: TppLine;
    ppLabel7: TppLabel;
    RSV_JitsuK_Date: TppSystemVariable;
    RL_Jitsu_CorpCode: TppLabel;
    RL_JitsuK_CorpName: TppLabel;
    ppLabel58: TppLabel;
    ppLabel60: TppLabel;
    ppLine89: TppLine;
    ppLine90: TppLine;
    ppLine91: TppLine;
    ppLine92: TppLine;
    ppLine93: TppLine;
    ppLabel61: TppLabel;
    ppLabel86: TppLabel;
    ppLabel87: TppLabel;
    ppLabel91: TppLabel;
    ppLine102: TppLine;
    ppLine103: TppLine;
    ppLabel119: TppLabel;
    ppLine104: TppLine;
    ppLabel120: TppLabel;
    ppLine105: TppLine;
    ppLabel114: TppLabel;
    ppLine106: TppLine;
    ppLabel117: TppLabel;
    ppLine107: TppLine;
    ppLabel118: TppLabel;
    ppLabel133: TppLabel;
    ppLineJK_Top: TppLine;
    ppLineJK_Left: TppLine;
    ppLineJK_Right: TppLine;
    ppLineJK_Bottom: TppLine;
    ppLabel41: TppLabel;
    ppDetailBand_JitsuK: TppDetailBand;
    ppUnderLineJK: TppLine;
    ppDBText14: TppDBText;
    ppDBText16: TppDBText;
    ppDBText52: TppDBText;
    ppDBText53: TppDBText;
    ppDBText54: TppDBText;
    ppDBText55: TppDBText;
    ppDBText57: TppDBText;
    ppDBText61: TppDBText;
    ppLine95: TppLine;
    ppLine96: TppLine;
    ppDBText110: TppDBText;
    ppDBText117: TppDBText;
    ppDBText124: TppDBText;
    ppLine97: TppLine;
    ppLine98: TppLine;
    ppDBText125: TppDBText;
    ppDBText126: TppDBText;
    ppDBText129: TppDBText;
    ppDBText130: TppDBText;
    ppLine99: TppLine;
    ppDBText142: TppDBText;
    ppLine100: TppLine;
    ppLine101: TppLine;
    ppLine108: TppLine;
    ppLine109: TppLine;
    ppLine110: TppLine;
    ppLine111: TppLine;
    ppLine112: TppLine;
    ppLine113: TppLine;
    RImageJitsuFusen: TppDBImage;
    ppFooterBand5: TppFooterBand;
    RSV_JitsuK_Page: TppSystemVariable;
    RL_JitsuK_Kaikei: TppLabel;
    ppGroup5: TppGroup;
    ppGroupHeaderBand5: TppGroupHeaderBand;
    ppGroupFooterBand5: TppGroupFooterBand;
    LJitsu_Kensu: TppLabel;
    ppLabel150: TppLabel;
    ppLabel151: TppLabel;
    RPipeline_JitsuKan: TppDBPipeline;
    DataSource_JitsuKan: TDataSource;
    RTaikei: TppReport;
    ppTitleBand6: TppTitleBand;
    ppHeaderBand6: TppHeaderBand;
    ppLine47: TppLine;
    ppLabel24: TppLabel;
    R_TDate: TppSystemVariable;
    R_TCorpNo: TppLabel;
    R_TCorpName: TppLabel;
    ppDetailBand1: TppDetailBand;
    ppLineBottom: TppLine;
    ppLine85: TppLine;
    ppDBText_TR_Code: TppDBText;
    ppDBText_TR_SName: TppDBText;
    ppDBText_TR_AddKbn01: TppDBText;
    ppDBText_TR_Code01: TppDBText;
    ppDBText_TR_Name01: TppDBText;
    ppLine145: TppLine;
    ppDBText_TR_AddKbn02: TppDBText;
    ppDBText_TR_Code02: TppDBText;
    ppDBText_TR_Name02: TppDBText;
    ppDBText_TR_AddKbn03: TppDBText;
    ppDBText_TR_Code03: TppDBText;
    ppDBText_TR_Name03: TppDBText;
    ppDBText_TR_AddKbn04: TppDBText;
    ppDBText_TR_Code04: TppDBText;
    ppDBText_TR_Name04: TppDBText;
    ppDBText_TR_AddKbn05: TppDBText;
    ppDBText_TR_Code05: TppDBText;
    ppDBText_TR_Name05: TppDBText;
    ppDBText_TR_AddKbn06: TppDBText;
    ppDBText_TR_Code06: TppDBText;
    ppDBText_TR_Name06: TppDBText;
    ppDBText_TR_AddKbn07: TppDBText;
    ppDBText_TR_Code07: TppDBText;
    ppDBText_TR_Name07: TppDBText;
    ppDBText_TR_AddKbn08: TppDBText;
    ppDBText_TR_Code08: TppDBText;
    ppDBText_TR_Name08: TppDBText;
    ppDBText_TR_AddKbn09: TppDBText;
    ppDBText_TR_Code09: TppDBText;
    ppDBText_TR_Name09: TppDBText;
    ppLineTate_101: TppLine;
    ppLineTate_102: TppLine;
    ppLineYoko_101: TppLine;
    ppLineYoko_102: TppLine;
    ppLineYoko_201: TppLine;
    ppLineYoko_202: TppLine;
    ppLineTate_202: TppLine;
    ppLineTate_301: TppLine;
    ppLineTate_302: TppLine;
    ppLineYoko_301: TppLine;
    ppLineYoko_302: TppLine;
    ppLineTate_401: TppLine;
    ppLineTate_402: TppLine;
    ppLineYoko_401: TppLine;
    ppLineYoko_402: TppLine;
    ppLineTate_501: TppLine;
    ppLineTate_502: TppLine;
    ppLineYoko_501: TppLine;
    ppLineYoko_502: TppLine;
    ppLineTate_601: TppLine;
    ppLineTate_602: TppLine;
    ppLineYoko_601: TppLine;
    ppLineYoko_602: TppLine;
    ppLineTate_701: TppLine;
    ppLineTate_702: TppLine;
    ppLineYoko_701: TppLine;
    ppLineYoko_702: TppLine;
    ppLineTate_801: TppLine;
    ppLineTate_802: TppLine;
    ppLineYoko_802: TppLine;
    ppLineYoko_801: TppLine;
    ppLineTate_901: TppLine;
    ppLineTate_902: TppLine;
    ppLineYoko_902: TppLine;
    ppLineYoko_901: TppLine;
    ppDBImage_01: TppDBImage;
    ppLineTate_201: TppLine;
    ppDBImage_02: TppDBImage;
    ppDBImage_03: TppDBImage;
    ppDBImage_04: TppDBImage;
    ppDBImage_05: TppDBImage;
    ppDBImage_06: TppDBImage;
    ppDBImage_07: TppDBImage;
    ppDBImage_08: TppDBImage;
    ppDBImage_09: TppDBImage;
    ppDBImage: TppDBImage;
    ppLabel29: TppLabel;
    ppFooterBand6: TppFooterBand;
    R_TPage: TppSystemVariable;
    R_TKaikeiName: TppLabel;
    ppPageStyle1: TppPageStyle;
    ppShape1: TppShape;
    ppGroup6: TppGroup;
    ppGroupHeaderBand6: TppGroupHeaderBand;
    ppLine86: TppLine;
    ppGroupFooterBand6: TppGroupFooterBand;
    RPipeline_Taikei: TppDBPipeline;
    DataSource_Taikei: TDataSource;
    RPipeline_Ichiran: TppDBPipeline;
    DataSource_Ichiran: TDataSource;
    RHendo: TppReport;
    ppTitleBand8: TppTitleBand;
    ppHeaderBand8: TppHeaderBand;
    ppLine73: TppLine;
    ppLabel22: TppLabel;
    R_HDate: TppSystemVariable;
    R_HCorpNo: TppLabel;
    R_HCorpName: TppLabel;
    ppColumnHeaderBand3: TppColumnHeaderBand;
    ppLine78: TppLine;
    ppLine83: TppLine;
    ppLine87: TppLine;
    ppLine147: TppLine;
    ppLabel45: TppLabel;
    ppLine149: TppLine;
    ppLabel46: TppLabel;
    ppLabel49: TppLabel;
    ppLine151: TppLine;
    ppLine152: TppLine;
    ppLabel56: TppLabel;
    ppLabel57: TppLabel;
    ppLine155: TppLine;
    ppDetailBand_Hendo: TppDetailBand;
    UnderLine_Hendo: TppLine;
    ppLine159: TppLine;
    ppDBText15: TppDBText;
    ppLine160: TppLine;
    ppDBText18: TppDBText;
    ppLine161: TppLine;
    ppDBText20: TppDBText;
    ppLine163: TppLine;
    ppDBText22: TppDBText;
    ppLine164: TppLine;
    ppLine165: TppLine;
    ppDBText23: TppDBText;
    ppLine166: TppLine;
    ppDBText24: TppDBText;
    ppDBText26: TppDBText;
    ppLine169: TppLine;
    ppColumnFooterBand3: TppColumnFooterBand;
    ppFooterBand8: TppFooterBand;
    R_HPage: TppSystemVariable;
    R_HKaikeiName: TppLabel;
    ppGroup8: TppGroup;
    ppGroupHeaderBand8: TppGroupHeaderBand;
    ppGroupFooterBand8: TppGroupFooterBand;
    RPipeline_Hendo: TppDBPipeline;
    DataSource_Hendo: TDataSource;
    Image_Book: TImage;
    Image_M_Book: TImage;
    Image_P_Book: TImage;
    Image_P_Paper: TImage;
    Image_Paper: TImage;
    Image_M_Paper: TImage;
    RIchiran: TppReport;
    ppTitleBand7: TppTitleBand;
    ppHeaderBand7: TppHeaderBand;
    ppLine61: TppLine;
    pL_IchiTitle: TppLabel;
    R_IchiDate: TppSystemVariable;
    R_IchiCorpNo: TppLabel;
    R_IchiCorpName: TppLabel;
    ppColumnHeaderBand2: TppColumnHeaderBand;
    ppLine69: TppLine;
    ppLine63: TppLine;
    ppLabel42: TppLabel;
    ppLine80: TppLine;
    ppLabel43: TppLabel;
    ppLine81: TppLine;
    ppLine82: TppLine;
    ppDetailBand_Ichi: TppDetailBand;
    UnderLine_Ichi: TppLine;
    ppLine94: TppLine;
    ppDBText11: TppDBText;
    ppLine140: TppLine;
    ppDBText12: TppDBText;
    ppLine146: TppLine;
    ppColumnFooterBand2: TppColumnFooterBand;
    ppFooterBand7: TppFooterBand;
    R_IchiPage: TppSystemVariable;
    R_IchiKaikeiName: TppLabel;
    ppGroup7: TppGroup;
    ppGroupHeaderBand7: TppGroupHeaderBand;
    ppGroupFooterBand7: TppGroupFooterBand;
    MemPrint_SaimokuS_CodeDigit: TIntegerField;
    MemPrint_SaimokuS_CodeAttr: TIntegerField;
    ppLabel4: TppLabel;
    SPMasKmk: TFDStoredProc;
    SPPayKmk: TFDStoredProc;
    SPCrdKmk: TFDStoredProc;
    LSyousu: TMLabel;
    LSyousuKeta: TMLabel;
    ESyousuten: TMNumEdit;
    SPMsHist: TFDStoredProc;
    SPMsHistParent: TFDStoredProc;
    B_Order_: TMSpeedButton;

	constructor CreateForm(pRec: Pointer);
	procedure CMChildKey(var Msg: TWMKey); message CM_CHILDKEY;
    procedure B_SyousaiClick(Sender: TObject);
    procedure B_EndClick(Sender: TObject);
    procedure B_Delete_Click(Sender: TObject);
    procedure B_ChangeClick(Sender: TObject);
    procedure B_PrintClick(Sender: TObject);
    procedure B_SUpDateClick(Sender: TObject);
    procedure B_SCancelClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure MComboBox_Change(Sender: TObject);
    procedure TreeViewChange(Sender: TObject; Node: TTreeNode);
    procedure TreeViewDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure TreeViewDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure TreeViewExit(Sender: TObject);
    procedure MemGouBeforePost(DataSet: TDataSet);
    procedure MemZitsuBeforePost(DataSet: TDataSet);
    procedure MemSaiBeforePost(DataSet: TDataSet);
    procedure DGoukeiGridChangeNodeEx(Sender: TObject);
    procedure DGoukeiGridBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure DGoukeiGridKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DZitsuGridChangeNodeEx(Sender: TObject);
	procedure DZitsuGridBunsekiNOEditButtonClick(Sender: TObject);
    procedure DZitsuGridBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure DZitsuGridKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DSaimokuGridChangeNodeEx(Sender: TObject);
    procedure DSaimokuGridBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure DSaimokuGridKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure PM_Click(Sender: TObject);
    procedure PopupFusenPopup(Sender: TObject);
    procedure PM_F_Click(Sender: TObject);
    procedure PopupMenuPopup(Sender: TObject);
    procedure MI_CopyClick(Sender: TObject);
    procedure MI_PasteClick(Sender: TObject);
    procedure MI_DeleteClick(Sender: TObject);
    procedure MI_TaikeiDelClick(Sender: TObject);
    procedure MI_SyousaiClick(Sender: TObject);
    procedure MI_GridDeleteClick(Sender: TObject);
    procedure MI_GensanClick(Sender: TObject);
    procedure MI_KasanClick(Sender: TObject);
    procedure MTab_NChange(Sender: TObject);
    procedure MTab_NKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure DSourceZitsuStateChange(Sender: TObject);
    procedure DSourceSaiStateChange(Sender: TObject);
    procedure DSourceGouStateChange(Sender: TObject);
    procedure DSaimokuGridExit(Sender: TObject);
    procedure DGoukeiGridExit(Sender: TObject);
    procedure DZitsuGridExit(Sender: TObject);
    procedure ESeiZanCodeExit(Sender: TObject);
    procedure EBPCodeExit(Sender: TObject);
    procedure EKisyuCodeExit(Sender: TObject);
    procedure EDPCodeExit(Sender: TObject);
    procedure EHiritsuCodeExit(Sender: TObject);
    procedure EKariCodeExit(Sender: TObject);
    procedure EKashiCodeExit(Sender: TObject);
    procedure EMainasuCodeExit(Sender: TObject);
    procedure ESagakuCodeExit(Sender: TObject);
    procedure ERiekiCodeExit(Sender: TObject);
    procedure EAveCodeExit(Sender: TObject);
    procedure ERuiSyuCodeExit(Sender: TObject);
    procedure ESousyokuCodeExit(Sender: TObject);
    procedure EShiwakeCodeExit(Sender: TObject);
    procedure EKijitsuCodeExit(Sender: TObject);
    procedure ETegataNoCodeExit(Sender: TObject);
    procedure ETekiCodeExit(Sender: TObject);
    procedure EShikuriCodeExit(Sender: TObject);
    procedure ERirekiKbnCodeExit(Sender: TObject);
    procedure EDenHojyo1Exit(Sender: TObject);
    procedure EDenHojyo2Exit(Sender: TObject);
    procedure ESeikakuCodeExit(Sender: TObject);
    procedure EBunCodeArrowClick(Sender: TObject);
    procedure PopupMenuChange(Sender: TObject; Source: TMenuItem;
      Rebuild: Boolean);
    procedure EBunCodeExit(Sender: TObject);
    procedure OnEnter(Sender: TObject);
    procedure EKariCodeArrowClick(Sender: TObject);
    procedure EKashiCodeArrowClick(Sender: TObject);
    procedure ETekiyouBunruiArrowClick(Sender: TObject);
    procedure ETekiyouBunruiExit(Sender: TObject);
    procedure EEndDateExit(Sender: TObject);
    procedure EStartDateExit(Sender: TObject);
    procedure MComboBox_Enter(Sender: TObject);
    procedure ELNameEnter(Sender: TObject);
    procedure DZitsuGridEnter(Sender: TObject);
    procedure DSaimokuGridEnter(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure MTab_NEnter(Sender: TObject);
    procedure MComboBox_KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure TreeViewKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure MTab_SelectChange(Sender: TObject);
    procedure ECodeExit(Sender: TObject);
    procedure EHendouhiExit(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure DGoukeiGridEnter(Sender: TObject);
    procedure EGoukeiDspExit(Sender: TObject);
    procedure EKihyousyaExit(Sender: TObject);
    procedure ESyousutenExit(Sender: TObject);
    procedure FormHide(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure ETekiCodeChange(Sender: TObject);
    procedure TreeViewExpanded(Sender: TObject; Node: TTreeNode);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure EBankCodeArrowClick(Sender: TObject);
    procedure EBankCodeTExit(Sender: TObject);
    procedure EBankCodeNExit(Sender: TObject);
    procedure MemSaiAfterPost(DataSet: TDataSet);
    procedure DZitsuGridBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure DGoukeiGridBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure DSaimokuGridBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure ELNameExit(Sender: TObject);
    procedure EBunCodeEnter(Sender: TObject);
    procedure ESeikakuCodeEnter(Sender: TObject);
    procedure ESNameEnter(Sender: TObject);
    procedure ESNameExit(Sender: TObject);
    procedure DGridChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer);
    procedure DZitsuGridKeyPress(Sender: TObject; var Key: Char);
    procedure DSaimokuGridKeyPress(Sender: TObject; var Key: Char);
    procedure DGoukeiGridKeyPress(Sender: TObject; var Key: Char);
    procedure PM_ReviseClick(Sender: TObject);
    procedure Grid_F_BAClick(Sender: TObject);
    procedure ToolButton_Click(Sender: TObject);
    procedure F_ToolBtnClick(Sender: TObject);
    procedure F_BAClick(Sender: TObject);
    procedure TM_F_ReviseClick(Sender: TObject);
    procedure DZitsuGridMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure DSaimokuGridMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure DGoukeiGridMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure B_KmkCopy_Click(Sender: TObject);
    procedure EBunCodeChange(Sender: TObject);
    procedure EAddUnitExit(Sender: TObject);
    procedure CmnENumberExit(Sender: TObject);
    procedure CmnNumberChange(Sender: TObject);
    procedure B_Search_Click(Sender: TObject);
    procedure EBunExit(Sender: TObject);
    procedure fnCodeOnArrowClick(Sender: TObject);
    procedure BeforePrint(Sender: TObject);
    procedure RSaimokuEndPage(Sender: TObject);
    procedure RTaikeiListEndColumn(Sender: TObject);
    procedure RTaikeiListEndPage(Sender: TObject);
    procedure RTaikeiEndPage(Sender: TObject);
    procedure ppDetailBand_JitsuSBeforeGenerate(Sender: TObject);
    procedure ppDetailBand_SaimokuBeforeGenerate(Sender: TObject);
    procedure R_KmkCodePrint(Sender: TObject);
    procedure ppDetailBand_GouBeforeGenerate(Sender: TObject);
    procedure ppDetailBand_TaikeiBeforeGenerate(Sender: TObject);
    procedure ppDBTextCodePrint(Sender: TObject);
    procedure ppDetailBand_JitsuKBeforeGenerate(Sender: TObject);
    procedure ppDBText_TR_CodePrint(Sender: TObject);
    procedure ppDetailBand_IchiBeforeGenerate(Sender: TObject);
    procedure ppDetailBand_HendoBeforeGenerate(Sender: TObject);
    procedure ppDBText_TR_AddKbn01Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn02Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn03Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn04Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn05Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn06Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn07Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn08Print(Sender: TObject);
    procedure ppDBText_TR_AddKbn09Print(Sender: TObject);
    procedure B_Order_Click(Sender: TObject);  // <004>

  private

    // 親BPLよりｺﾝﾎﾟｰﾈﾝﾄを子BPLへ継承
    m_CmpList	        :   TList;
    B_Print 	        :   TMSpeedButton;   // 印刷
    B_Syousai 	        :   TMSpeedButton;   // 詳細
    B_Delete            :   TMSpeedButton;   // 削除
    B_KmkCopy           :   TMSpeedButton;   // 科目ｺﾋﾟｰ
    B_Search            :   TMSpeedButton;   // 検索
    ToolButton 	        :   TToolButton;
    B_Order				:	TMSpeedButton;   // 出力順序登録 <100>
    MComboBox           :   TMComboBox;

	PasteNode		    :	TTreeNode;		//	貼り付け時のNode
	KaGenNode		    :	TTreeNode;		//	加算減算時のNode
	m_PNode			    :	TTreeNode;
	m_SetNode		    :	TTreeNode;		//	削除後にFoucsをあてるNode
	MjsMsgRec 		    :   TMjsMsgRec;

	gbEndFlag		    :	Boolean;		//	終了ﾌﾗｸﾞ
	gbChangeFlg		    :	Boolean;
	giTabTaihi		    :	Integer;
	giG_Code		    :	String;
	giMasKbn		    :	Integer;
	gbFusenFlag		    :	Boolean;
	gbT_FusenFlag	    :	Boolean;
	gbFlag			    :	Boolean;		//	MTab_Nで使用
	gbChangeFlag	    :	Boolean;		//	ChangeNodeEX後ChangeColumnでのﾁｪｯｸを通る為
	gbActiveFlag	    :	Integer;		//	どの画面がｱｸﾃｨﾌﾞなのか判断する
	giTaihi_GCode	    :	Integer;		//	退避用外部ｺｰﾄﾞ
	giTaihi_SCode	    :	String;	        //	退避用細目ｺｰﾄﾞ
	gbHanteiFlag	    :	Boolean;		//	性格ｺｰﾄﾞ入力時にｴｸｽﾌﾟﾛｰﾗかﾃﾝｷｰの判定
	gbComboFlag		    :	Boolean;
	gbSetPosition	    :	Integer;		//	詳細画面時のﾌｫｰｶｽの位置
	gbUpDateChek	    :	Boolean;		//	詳細の更新ﾎﾞﾀﾝの制御
	gbDspFlag		    :	Boolean;		//	TreeViewのChangeｲﾍﾞﾝﾄに入らない為のﾌﾗｸﾞ
	gbDataUpdateFlag    :	Boolean;		//	ﾃﾞｰﾀの更新ﾌﾗｸﾞ
	gbBorderFlag	    :	Boolean;		//	BorderCaptionのﾌﾗｸﾞ(詳細時に使用)
	gsBorderCaption	    :	String;			//	BorderCaptionの一時退避(詳細時に使用)
	giKamoku		    :	Integer;		//	選択されている科目退避
	giTaihi_OyaNCode    :	Extended;		//	選択せれている親内部ｺｰﾄﾞ退避
	giTaihi_OyaNCodeSv  :	Extended; 	    //	選択せれている親内部ｺｰﾄﾞ退避(一時保存用)
	giTaihi_OyaCode	    :	Integer;		//	選択せれている親外部ｺｰﾄﾞ退避
	giOrder			    :	Integer;		//	ﾀﾞｲｱﾛｸﾞで選択された順序
	giRightClick	    :	Boolean;		//	右ｸﾘｯｸ時の処理
	gDspLevel		    :	Integer;		//	Treeに表示Nodeの次のLEVEL
	giUpDate_MasKbn	    :	Integer;		//	詳細更新時のﾏｽﾀｰ区分
	giUpDate_SumKbn	    :	Integer;		//	詳細更新時の実在／合計区分
	giUpDate_GCode	    :	Integer;	    //	詳細更新時の外部ｺｰﾄﾞ
	giUpDate_SCode	    :	String;		    //	詳細更新時の細目ｺｰﾄﾞ
	giSousyoku		    :	Integer;		//	装飾区分
	gsKanryaku		    :	String;			//	簡略名称
	gbDelBtnFlag        :	Boolean;        //  削除ﾎﾞﾀﾝの制御
	gbEnabledCheck	    :	Boolean;		//	一番上のNodoの時のPopUpの制御
	giOyaCode		    :	Integer;
	giFusenSelectColor	:	Integer;	    //	付箋情報
	giSelectTab		    :	Integer;		//	詳細でのTAB情報
	gbEndEscFlag	    :	Boolean;		//	ECodeでEND･ESCを押された時
	gbKoujiFlag		    :	Boolean;		//	工事ﾌﾗｸﾞ
	gHagureNCode	    :	Extended;		//	ﾊｸﾞﾚｺｰﾄﾞ
	gbTaikeiFlag	    :	Boolean;		//	体系削除ﾌﾗｸﾞ
	giKoujiSyubetsu	    :	Integer;		//	工事管理種別
	gDragJitsuFlag	    :	Boolean;		//	DragDrop時の実在Grid表示に使用
	gDragGouFlag	    :	Boolean;		//	DragDrop時の合計Grid表示に使用
	giStartCode		    :	Integer;		//	印刷時範囲選択開始ｺｰﾄﾞ
	giEndCode		    :	Integer;		//	印刷時範囲選択終了ｺｰﾄﾞ
	giSelect		    :	Integer;		//	印刷時帳票選択
	grCopyPaste		    :	TaikeiRec;		//	CopyPaste時の体系
	grMotoOya		    :	TaikeiRec;		//	挿入もとの親
	grTaikei 		    :	^TaikeiRec;		//	ﾎﾟｯﾌﾟｱｯﾌﾟ選択時の体系
	grOya_Taikei	    :	^TaikeiRec;		//	ﾎﾟｯﾌﾟｱｯﾌﾟ選択時の親の体系
	grDelTaikei		    :	^TaikeiRec;		//	削除時の体系
	gwkRec	 		    :	^TaikeiRec;		//	体系
	gP_wkRec		    :	^TaikeiRec;		//	親の体系
	gDelGrid		    :	^TaikeiRec;		//
	wkKouji			    :	KoujiCodeRec;
	wkBank			    :	BankRec;
	wkKmk			    :	KmkRec;
	TableHistory	    :	Table;			//	Tableの更新履歴
	bEndFlag		    :	Boolean;
	iD				    :   Integer;		//　印刷でのComboBoxの選択
	bSyokuchiFlag	    :	Boolean;		//	諸口を削除時使用
	bListDraw		    :	Boolean;
	gbKmkTree2Flag	    :	Boolean;		//	書き込みﾌﾗｸﾞ
	giReferFlag		    :	Integer;		//	参照ﾌﾗｸﾞ
	gBunCode		    :	Integer;		//	分析ｺｰﾄﾞ
	gbBunChengeFlag	    :	Boolean;		//	分析ｺｰﾄﾞが変わったかの判断ﾌﾗｸﾞ
	gSeiCode		    :	Integer;		//	性格ｺｰﾄﾞ
	gSeiChengeFlag	    :	Boolean;		//	性格ｺｰﾄﾞが変わったかの判断ﾌﾗｸﾞ
//	gHojyoCode		    :	Byte;			//	第１補助ｺｰﾄﾞ
	gShiftTabFlag	    :	Boolean;		//	詳細のｺｰﾄﾞでShift+Tabを押された時
	giBankUseKbn	    :	Integer;		//	銀行採用区分
	giChangeFlag	    :	Boolean;		//	切出/埋込が押された時

	gCheckCode		    :	Integer;
	m_YearKbn		    :	Integer;		//	西暦/和暦区分
	m_MailKbn		    :	Integer;		//	ﾒｰﾙ会計区分
	m_KouekiKbn		    :	Integer;		//	公益法人区分

	m_Electronic	    :	Boolean;		//	電子帳簿採用区分
	m_KmkInfo		    :	KmkInfo;		//	詳細のﾁｪｯｸ時に使用
	m_iOyaCode		    :	Integer;
	m_EndFlag		    :	Boolean;
	m_KodomoFlag	    :	Boolean;
	m_CopyFlag		    :	Boolean;
	m_bSpaceCode	    :	Boolean;
	m_bSpaceAgain	    :	Boolean;
//	m_S_BtnClick	    :	Boolean;
	m_bEndDown		    :	Boolean;
	m_SwkInfo		    :	SwkRec;
	m_GridEndEscFlag    :	Boolean;
	m_TaikeiPriFlag	    :	Boolean;
	m_EndInfoRec	    :	EndInfoRec;
	m_ToolBtn		    :	ToolBtnRec;
	m_FusenNode		    :	TTreeNode;		//	付箋時に使用するNode
	m_HintRow_Jitsu	    :	Integer;
	m_HintRow_Gou	    :	Integer;
	m_HintRow_Sai	    :	Integer;
	m_aCmnt_Goukei	    :	array of FusenCmntRec;
	m_aCmnt_Jitsu	    :	array of FusenCmntRec;
	m_aCmnt_Sai		    :	array of FusenCmntRec;
	m_CopyInfo		    :	CopyInfoRec;
	m_DlgCopyInfo	    :	DLGCopyInfoRec;
	m_F8CopyFlag	    :	Boolean;
	m_InpNewFlag	    :	Boolean;
	m_BackSpaceFlag	    :	Boolean;
	gMasInfoUseKbn	    :	UseKbnRec;		                                    //	ﾏｽﾀ基本情報の部門､工事､ｾｸﾞﾒﾝﾄの採用区分
	giSyouDspCode	    :	String;		                                        //	詳細の表示時のCode
	giDspOyaCode	    :	Integer;		                                    //	詳細時で科目別補助時のｺｰﾄﾞ
	aSeikaku		    :	array[0..17]  of String;		                    //	性格名称
	SonekiArrayL1	    :	array[0..15]  of wkRec;	        	                //	損益科目体系
	aYouBunName		    :	array[0..99]  of String;		                    //	要約分析名称
	aDefault		    :	array[0..112] of DefaultRec;	                    //	分析ｺｰﾄﾞによりﾃﾞﾌｫﾙﾄ設定
	aTokuteiKmkCode	    :	array[0..19]  of Extended;	                        //	特定科目の科目ｺｰﾄﾞ配列(はぐれ科目作成時に使用)
	sFukuKmk		    :	array[0..2]   of Extended;	                        //	特定科目に登録されている複合科目ｺｰﾄﾞ
//	aHojyoNO		    :	array[1..10]  of Byte;		                        //	補助ｺｰﾄﾞNO
	aDoubleAddCheck	    :	array[0..1]   of array[1..20] of Integer;	        //	2重加算のﾁｪｯｸ
	aDefaultSeikaku	    :	array[0..17]  of SeikakuDefaultRec;	                //	性格ｺｰﾄﾞによりﾃﾞﾌｫﾙﾄ設定
	aPrintK_Taikei	    :	array[1..15]  of PrintK_TaikeiRec;	                //	印刷用の体系情報
	aTaikeiList		    :	array[0..9]   of PrintTaikeiRec;
	aTaikeiSaveCode     :   array[0..9]   of String;
	aMaxEntNo		    :	array[0..9]   of Extended;
	aSaveFlag		    :	array[0..9]   of Boolean;
    aBunruiKbn          :   array[0..19]  of Integer;                           // 分類採用区分<002>
    aBunruiNm           :   array[0..19]  of String;                            // 分類名称<002>
    aBunruiAttr         :   array[0..19]  of Integer;                           // 分類属性<002>
    aBunruiDigit        :   array[0..19]  of Integer;                           // 分類桁数<002>

//	m_PriKodomoFlag	    :	Boolean;											// <107>DEL 使用していないため削除
	m_PriHagureCode	    :	Extended;		//	ﾊｸﾞﾚｺｰﾄﾞ
	m_OverCodeList	    :	TList;
	m_OverCodeList2	    :	TList;
	m_Count		    	:	Integer;
	m_aTaxInfo		    :	array[1..9] of Extended;
	m_TaxInfo		    :	TaxInfoRec;

	m_KmkHError		    :	Boolean;
//	m_Bmn			    :	Integer;				// <121>DEL
//    m_Seg			    :	array[0..9] of Integer;	// <121>DEL
	m_NewFlag		    :	Boolean;	        // 新規登録されたかどうかの判定ﾌﾗｸﾞ
	m_NewFlag_J			:	Boolean;			// 新規登録されたかどうかの判定ﾌﾗｸﾞ(実在科目のみ) <100>
	cExcept			    :	TJNTMASExceptIF;
	m_DbAddChk		    :	array of Integer;	// 2重加算ﾁｪｯｸ用
	m_NumberUseKbn	    :	Integer;			// 番号管理採用区分
	m_NameList		    :	TNameList;			// 番号の名称
	m_System		    :	Integer;			// 処理ｼｽﾃﾑ
	m_bFocusControl	    :	Boolean;			// ﾌｫｰｶｽの制御ﾌﾗｸﾞ
	m_SameParentChk	    :	array of Extended;
	m_Save			    :	SaveRec;			// 削除したNODEを退避
    m_ErrorFlg          :   Integer;            // 諸口削除時のｴﾗｰﾌﾗｸﾞ
	m_SearchInfo	    :	SearchInfoRec;		// 検索対象分類情報
    m_strValidCharacters:   String;
    m_SyokuchiDlg       :   Boolean;
    gsT_KamokuCode      :	String;			    // 印刷時細目科目ﾘｽﾄ時に使用(科目ｺｰﾄﾞ)
    gsT_GoukeiCode      :	String;			    // 印刷時科目加算ﾘｽﾄ時に使用(合計ｺｰﾄﾞ)
//    gsT_TaikeiCode	    :	String;				// 印刷時科目体系ﾘｽﾄ時に使用(合計ｺｰﾄﾞ)



    m_Bunrui            :   array[1..10] of BunruiRec;  // <002>
    m_FusenColorIdx     :   Integer;
//    m_SegAttrUseKbn     :   array[1..10] of Integer;    // ｾｸﾞﾒﾝﾄ採用情報採用区分
    m_KoujiMasKbn       :   Integer;
    m_ExpOpenSW         :   Boolean;                    // ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ(TRUE:OPEN FALSE:CLOSE)<004>
    AOwner              :   TComponent;                 // <005>



    m_IsUpdate          :   Boolean;                    // <008>権限
    uvSelSys            :   TJNTSelCorpSys; 	        // <PRN> 会社ｼｽﾃﾑ情報
    m_FreeLayout        :   Boolean;                    // ﾌﾘｰ帳票採用区分<057>
    m_NumberAutoKbn     :   Integer;                    // 番号管理番号自動付番<065>

    m_SyncMaster        : 	TSyncMaster;				// <SYNC> ﾏｽﾀ同期ｸﾗｽ
	m_iSecMasterKbn		:	Integer;					// <063> ｸﾞﾙｰﾌﾟ管理ｾｸﾞﾒﾝﾄﾏｽﾀ区分

    m_UpdAddKbnFlg		: 	Boolean;					// 実績集計区分更新<083>
	m_GridChgFlg		:	Boolean;					// 実在科目グリッド行移動フラグ <084>
   	m_KmkOrder			:	array of KmkOrderRec;		// 出力順序自動追加用 			<100>
	m_AnotherPrgStFlg	:	Boolean;					// 別プログラム起動フラグ       <100>
	m_bBunChgMsgFlag	:	Boolean;                    // 分析コード変更時メッセージ表示フラグ <129>

	procedure WMOnPaint                     (var Msg: TMessage); message WM_ONPAINT;
	function  MakeSQL                       (FLAG,StratEndFlag: Boolean):String;
	function  fnExcept                      ():Integer;

    // 【初期処理】
	procedure ComboChange                   ();
	procedure MakeDspDate                   (No: Integer);
	procedure fnMakeDsp                     ();
	function  GetKmkInfo                    (Code: Integer; Mas: Integer; var Sum: Byte): Extended;
    function  SetKmkInfoInit				(): Boolean; //<114>ADD
	procedure SetYouBunName                 ();
	procedure BunsekiDefaultSet             ();
	procedure SeikakuDefaultSet             ();
	procedure GetKbnInfo                    ();
	procedure fnNumberControlInit           ();
    procedure fnGetKbnInfo                  (Qe: TMQuery);
	procedure fnGetNamInfo                  (Qe: TMQuery);

    // 制御系系処理
    procedure EnabledSelect                 (EnableNO: Integer; KoteiKbn: Integer; KoujiKbn: Integer; Hojyo1: Integer; BunsekiCode: Integer);
	procedure fnControl                     (Select: Integer);
	procedure SyousaiEnabledControl         ();
    procedure ErrorMessageDsp               (DmQuery: TMQuery);
	procedure fnNumberDspControl            (MODE: Integer);
	procedure fnInputControl                (KBN: Integer);

    // データ(コード・名称等)取得系処理
	procedure GetBankInfo                   ();
    procedure fnSubNCodeCheck               (GCode: Integer; SubCode: String; var NCode: Extended; var SyokuchiKbn : Integer);overload;//<054>
    procedure fnSubNCodeCheck               (GCode: Integer; SubCode: String; var NCode: Extended; var CNCode: Extended; var SyokuchiKbn : Integer);overload;//<054>
	function  ReturnKmkCode                 (Select: Integer): Integer;
	function  GetNameSKmkMA                 (MasCode: Integer; var Code: Integer; var SimpleName: String; var DC: Integer): Boolean;
	function  fnGetSubCode                  (CODE: Integer):Integer;
	function  fnGetNameInfo                 (Int: Integer):Integer;
    function  GetNewCNCode                  ():Extended;
    function  GetNewNCode                   ():Extended;
    function  fnSaimokuSetAttr              (m_Type: Integer; m_SCode: String; m_CodeAttr, m_CodeDigit: Integer):String;
    procedure fnGetCodeAttr                 (NCode: Extended; var Attr, Digit: Integer);
    function  fnGetGBunrui                  (strGCode: String; iMasKbn: Integer; var nNCode: Extended; var strName: String): Boolean;  // <002>
    function  fnGetNBunrui                  (nNCode: Extended; iMasKbn: Integer; var strGCode, strName: String): Boolean; // <002>

    // ツリー関連処理
	procedure MakeTreeKotei                 (No: Integer; L1Cnt: Integer);
//  procedure MakeTreeKouji                 (No: Integer);
	procedure MakeTree                      (No: Integer);
	function  MakeKodomo                    (OyaNode: TTreeNode; NCode: Extended; DspLevel: Integer): Integer;
	function  MakeSaimokuKdomo              (OyaNode: TTreeNode; NCode: Extended): Integer;
    procedure MakeHagure                    (NCode: Extended);
	procedure HagureMakeNode                (Select: Integer);
	procedure LevelDspSaimoku               (NCode: Extended);
    procedure LevelDsp                      (NCode: Extended; Hantei: Boolean);
	function  MakeDspString                 (Code: Integer; Name: String):String;
    function  MakeDspString_Sai             (Code, Name: String; Attr, Digit: Integer):String;
	function  GetSousyoku                   (SName: String; SouKbn: Integer): String;
//<097> DEL	procedure fnGetSystem                   (MODE,Code,Index: Integer);
	procedure fnGetSystem                   (MODE,Code,Index: Integer;ParentCode: Integer=0);  //<097> ADD
	procedure fnGetParentInfo               (NCode: Extended);
    function  InsertTreeRecord              (MotoGCode, MotoGCodeParent: Integer;
                                             MotoNCode, MotoNCodeParent: Extended;
                                             MotoSumKbn: Integer; MotoSubCode : String;
          			        			     SakiGCode, SakiGCodeParent: Integer;
                                             SakiNCode, SakiNCodeParent: Extended;
                                             SakiSubCode: String;
                                             SumKbn: Integer; AccessMethod: Integer; MotoMasKbn: Integer; SakiMasKbn: Integer;
								             AddKbn: Integer; var RollBackFlag: Boolean): Integer;
    function  GetTreeEntryNo                (DmqKmkTree: TMQuery; SakiNCode: Extended; SakiNCodeParent: Extended;
                                             GetNoKbn: Integer; var RollBack: Boolean): Integer;
	function  AgainEntNoSet                 (ParentNCode: Extended):Boolean;

    // チェック処理
	function  fnEndCheck                    (): Boolean;
    function  JitsuzaiCheck                 (NCode: Extended): Boolean;
    function  FukuKmkCheck                  (NCode: Extended): Boolean;
    function  fnTaxCodeCheck                (NCode: Extended): Boolean;
    function  KoteiKbnCheck                 (NCode: Extended; SelectGrid: Integer): Boolean;
    function  KbnCheck                      (NCode: Extended; var Flag: Boolean; Check: Boolean; Dispose: Byte):Boolean;
    function  SubUseClear					(aKmkNCode: Extended): Boolean;	//<113>ADD
	function  KoujiAdoptCheck               (NCode: Extended):Boolean;
	function  AdoptCountCheck               (NCode: Extended; Kbn: Integer):Integer;
// <121>MOD↓
//	procedure MasInfoKmkCodeCheck           (GCode: Integer; BPKBN: Integer; var EMPLOY: SaiyouRec);
	procedure MasInfoKmkCodeCheck           (GCode: Integer; BPKBN: Integer; BunCode: Integer; var EMPLOY: SaiyouRec);
// <121>MOD↑
	procedure fnBmnUseCheck                 ();
	procedure HagureCheck                   ();
	procedure fnToolBtnUseCheck             (Kbn:Integer);
	procedure fnTreeCheck                   ();
	procedure fnSegUseCheck                 ();
	procedure fnBunruiCheck 	            ();
    function  KodomoCheck                   (NCode: Extended; Select: Integer; var ChildFlag: Boolean): Boolean;
	function  BunsekiCheck                  ():Boolean;
    function  BankUseCheck                  (Select: Integer; Choice: Boolean):Boolean;
	function  PasteCheck                    (SAKI: Extended; MOTO: Extended):Boolean;
	function  GetKmkMABank                  (Code: String; var RecordFlag: Boolean):String;
	function  fnSyousaiSetCheck             (Choice,Select: Byte): Boolean;
	function  fnCheckMasterTreeInsertValid  (DragCode,DropCode: Integer): Boolean;
	function  fnFurikaeCheck                (KmkCode: Integer): Boolean;
	function  fnDoubleAddCheck              (MODE: Integer; cNode: TTreeNode):Integer;
	function  fnSameParentCheck             (MODE: Integer; cNode: TTreeNode):Integer;
	function  fnSearchCheck	                (Qe: TMQuery; TopCD: Extended; KmkNCD: Extended): Boolean;  // <006>
    function  fnSearchCheck2	            (Qe: TMQuery;OyaNCode,NCode: Extended): Boolean;  // <092> ADD

    // 諸口関連処理
	function  fnSyokuchiDel                 (Qe: TMQuery; KmkNCode: Extended): Boolean;
	function  Syokuchi                      (Code: Integer; HANTEI: Boolean):Boolean;
	procedure fnFlgClear                    ();

    // 詳細画面処理
	procedure SyousaiInitialize             (Select: Boolean);
    procedure SelectDsp                     (MasKbn, JiGoKbn, GaiCode: Integer; SaiCode: String);
	procedure SyousaiUpDate                 ();
	procedure SyousaiNew                    ();
	function  GetList                       (cmpEdit: TObject; cmpLabel: TMLabel): Boolean;
    function  GetSKmkMA                     (MasterKbn: Integer; Code: Integer; var YouBun: Integer): String;
    function  SetYouBun                     (MasterKbn: Integer; Code: Integer; var YouBun: Integer): Boolean;  //  <125>
	function  GetTekiMA                     (Code: Integer): String;
	function  fnSwkCheck                    (KmkCode: Integer): Boolean;

    // 付箋関連処理
	procedure FusenInitialize               ();
	procedure FusenDsp                      (FusenKbn: Integer; MemNO: Integer);
	procedure FusenDsp2                     (FusenKbn: Integer);
	function  FusenUpDel                    (FusenKbn: Integer; MemNO: Integer; NCode, SubNCode: Extended; Cmnt: String; FusenSelect: Byte):Boolean;
    function  FusenCheck                    (MasNo : Integer; NCode, SubNCode: Extended; var Cmnt: String): Integer;
    procedure fnCallFusenBikoDlg            (MasKbn: Integer; NCode, SubNCode: Extended; FusenKbn:Integer);
	procedure fnFusenArraySet               (Choice: Integer; NCode, SubNCode: Extended; Cmnt: String);

    // グリッド関連処理
	procedure GridAgainDsp                  (Select:Integer; NCode: Extended);
    procedure MoveGridRecordSelecter        (Select: Integer; Code: String);
    function  ChangeNode                    (CNode,PNode: TTreeNode) : TTreeNode;

    // コピー・検索ダイアログ系処理
    procedure fnCallCopyDlg                 (Choice,Dsp: Integer);
	procedure fnSearch		                ();
	function  fnDownSearch	                ():Boolean;

    // 印刷・ファイル出力関連処理
    procedure ZitsuzaiPrn                   (Select: TDlgRetID);
	procedure SaimokuPrn                    (Select: TDlgRetID);
	procedure GoukeiPrn                     (Select: TDlgRetID);
	procedure TaikeiPrn                     (Select: TDlgRetID);
	procedure JitsuzaiKPrn                  (Select: TDlgRetID);
	procedure TaikeiPrnList                 (Select: TDlgRetID; Choice: Integer);
    function  fnTaikeiMake                  (NCode: Extended; Count: Integer): Integer;
    procedure fnKoteiTaiKeiMake             ();
    procedure fnArrayClear                  (Count: Integer; ChoiceFlag: Boolean);
    function  fnTaiKeiPrintSet              (JitusGoKbn: Integer; QueryData,QueryPrint: TMQuery): Boolean;
	procedure fnIchiranPrint                (Select: TDlgRetID; Choice: Integer);
	procedure fnHendoPrint                  (Select: TDlgRetID);									// 050825 hirota
	function  fnGetKmkSimpleName            (NCode: Extended): String;
	procedure HagureMakePrint               (Select: Integer);
    procedure fnGetLinePosition             (DspName: String; DspNameLeft,TateLeft: Single;	var YokoLeft: Single; var YokoWidth: Single);
	function  PrintGetSousyoku              (SouKbn: Integer): String;
	function  GetAriNashi                   (Kbn: Integer): String;
    function  PrintInpInfo                  (Kbn: Integer; Select: Integer): String;
	function  GetMaxEntKmkCode              (KmkNCode: Extended): Extended;
	function  fnGetEndKmkInfo               (): Extended;
	function  fnOverCodeCheck               (NCode: Extended; Count,SumKbn: Integer): Integer;

	procedure FileOut;
	procedure SetFileOutTF                  (Select: Integer; var sTitle: TStringList; var sMemFld: TStringList);

    function  gfnGetSKmkMA_GCODE            (nNCode: Extended; iMasCode: Integer): Integer;     // <055>
    function  gfnGetSKmkMA_NCODE            (iGCode, iMasCode: Integer): Extended;              // <055>
    function  gfnGetTekiMA_GCODE            (nNCode: Extended): Integer;
    function  gfnGetTekiMA_NCODE            (nGCode: Integer): Extended;
    function  gfnGetBank_GCODE              (nNCode: Extended): String;
    function  gfnGetBank_NCODE              (nGCode: String): Extended;
    procedure gfnCheckTekiDate              (nDmqDataQry: TMQuery);
    procedure gfnGetKmk_NCODE               (nMasKbn, nSumKbn, nGCode: Integer; nSubCode: String;
                                             var nNCode, nCNCode: Extended);

    function    gfnGetKmk_GCODE                 (nNCode: Extended): Integer;
    function  gfnKoujiMasKbnGet(): Integer;
    procedure fnGetGrants();                // <008>

//	function  GetCount(): integer;
    procedure ChangeCodeAttr(exNCode: Extended);    // <035>
    function  CutLeadByte   (strBefore: String; iByteCnt: Integer): String;    // <049>

    // 削除ﾁｪｯｸ処理
    function  fnDelCheck    (exNCode: Extended; exCNCode: Extended; var strErr: String): Boolean;   // <CHK>

    // メッセージ表示処理
	procedure fnMiseiKoujiKmkMsg;			// <127>
	function  fnChkBunChgMsg(KmkGCode: Integer; SyosaiFlg: Boolean; iAnaCode: Integer = 9999): Boolean;// <129>

//<053>

	function  kaisyahou(): Boolean ;
	function  fnGetEndKmkInfo2(): Extended;
    function  BunSekiCodeCheck(GCode: Integer): Boolean;

    procedure DspNumberListremake(iNumber: Integer);    // <065>

//<SYNC> ADD start
	function  IsDeleteEx(): Boolean;
	function  IsUpdateEx(): Boolean;
//<SYNC> ADD end
//<063> ADD start
	procedure B_Delete_Click_GrpChild	();
	procedure MI_DeleteClick_GrpChild	();
	function  GetSecMain				(): Boolean;
    function  fnCorpRelation			(iMasterKbn: Integer; iGCode: Integer; strSubCode: String;
										iSumKbn: Integer; var exNCode: Extended; var exCNCode: Extended): Integer;
    function  fnAllCorpRelation			(exNCode: Extended; exCNCode: Extended): Boolean;
	function  DeleteKmkREL				(exNCode: Extended; exCNCode: Extended; 
										exSegNCode: Extended; Query: TMQuery): Boolean;
    function  fnDelCheckChild			(exNCode: Extended; exCNCode: Extended; var bUse: Boolean): Boolean;
	procedure ExecParentDBTran			(iTrnKind: Integer);
    function  ImportOyaSyokuchi			(exNCode: Extended; var bSyokuchi: Boolean; bGrid: Boolean = True): Boolean;
	function  WriteKmkREL				(exNCode: Extended; exCNCode: Extended; exSegNCode: Extended;
										iTableKind: Integer; Query: TMQuery): Boolean;
	function  WriteSecKmkInfo			(exNCode: Extended; exPlaceNCode: Extended;
										iNewDispKbn: Integer): Boolean;
	function  UpdateSecKmkInfo			(exNCode: Extended; exPlaceNCode: Extended;
										iDispKbn: Integer; Query: TMQuery): Boolean;
	function  InsertSecKmkInfo			(exNCode: Extended; exPlaceNCode: Extended;
										iDispKbn: Integer; Query: TMQuery): Boolean;
	function  IsSameKmkBunrui			(iMasterKbn: Integer; iSumKbn: Integer;
										iBPKbn: Integer; iAnalyzeCode: Integer): Boolean;
	function  MakeTreeRecord			(iMasterKbn: Integer; exKmkNCode: Extended;
										exKmkCNCode: Extended; bGrid: Boolean = True): Boolean;
//<063> ADD end

	procedure CallSyncDlg				();			// <066>

    // -----<077> Add-St-----
	procedure SessionPractice(iSyori: Integer);			// ｾｯｼｮﾝ管理ｽﾄｱﾄﾞのﾊﾟﾗﾒｰﾀ追加
	// -----<077> Add-Ed-----

    function  HojBankUseCheck           ():Boolean;							//<083>
	procedure DataWrite_AddKbn_Bank(pKmkNCode : Extended; ParaMQuery: TMQuery);    //<083>

	function  fnDelCRLF(sData: String): String;		// 改行削除 <DKAI>
	procedure Search_Zitsu;							//<084>
	function  fnSearch_HagureNode(iCode: Integer): Boolean;							//<084>
	function  fnSearch_ChildNode(cOyaNode: TTreeNode; iCode: Integer): Boolean;		//<084>
	procedure TreeViewChange_Sub;													//<084>

    procedure ClearKmkSubTaxKbn(kmkNCode: Extended);	//科目別補助の消費税区分をクリアする <116>ADD
// <100>ADD↓
	procedure UpdMasTreee2;	   	// 加算体系更新処理
    procedure ShowOrderDLG;	   	// 出力順序自動登録処理
	procedure AnotherStart;     // 別プログラム起動処理
// <100>ADD↑

//  procedure EdgeTrackerKeihiSeisanMsg;                // <124>  EdgeTracker対応メッセージ処理 <126>Delete
	procedure EdgeTrackerKeihiSeisanMsg(iActive: Integer);                //  <126> Add 科目、科目別補助の判定引数を追加


  public
    { Public 宣言 }
	m_pRec			    :	^TMjsAppRecord;
    m_Base_pRec		    :   ^TMjsAppRecord;         // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ(ｾｰﾌﾞ用)(親から継承)<015>
	MDataModule		    :	TMDataModulef;
	ComArea			    :	TJNTMASCom;
	dbCorp_Select	    :	TFDConnection;
	ACControl		    :	TWinControl;
    MJSPrnDlgf	        :	TMJSPrnDlgf;		// 印刷ﾀﾞｲｱﾛｸﾞ
	PrnSupport          :	TMjsPrnSupport;		// 印刷設定
    mjspre		        :	TMjsPreviewIF;		// ﾌﾟﾚﾋﾞｭｰ
    m_cJNTArea          :   TJNTCommon;
    uvHani              :   TJNTHani;		                    // <PRN> 範囲ﾀﾞｲｱﾛｸﾞ用ﾊﾟﾗﾒｰﾀ

	procedure fnTestSubUseChk();

  end;

function AppEntry(pPar : Pointer)	:	Integer;

exports
	AppEntry;

implementation
{$include JNTMASFUSENBIKODLGIFB.inc}		// 付箋備考DLG
{$include JNTMasCommonFuncB.inc}
{$include JNTMasExceptIFB.inc}			    // 排他制御
{$include JNTMASSEARCHDLGIFB.inc}		    // 検索DLG
{$include JNTMASERRORCODECHECK.inc}
{$include MAS523IsSaiyoFreeLayout.inc}      // ﾌﾘｰ帳票<057>

const
	ACCESS_PASTE		=	0;	//	Paste
	ACCESS_DRAGANDDROP	=	1;	//	Drag&Drop
	ACCESS_COPY			=	2;	//	Copy

	GOUKEI			    =	1;		//	合計
	ZITSUZAI		    =	2;		//	実在
	SAIMOKU			    =	3;		//	細目
	TAIKEI			    =	4;		//	体系(印刷時に使用)
	JITSUZAI_K		    =	5;		//	実在(簡略)－印刷時に使用
	TAIKEILIST		    =	6;		//	体系2(実在)(印刷時に使用)
	TAIKEILIST_G	    =	7;		//	体系2(合計)
	ICHIRAN_J		    =	8;		//	実在科目ｺｰﾄﾞ一覧
	ICHIRAN_G		    =	9;		//	合計科目ｺｰﾄﾞ一覧
	HENDO			    =	10;		//	変動損益関係ﾘｽﾄ

	MOVE			    =	1;		//	間に挿入
	ENDMOVE			    =	2;		//	最後に挿入

	INSERT			    =	1;		//	挿入
	ADD				    =	2;		//	追加

	Indicate		    =	1;		//	表示
	NotIndicate		    =	2;		//	非表示

	OTHER			    =	1;		//	以外
	SYOUSAI			    =	2;		//	詳細
	POPUP			    =	3;		//	ﾎﾟｯﾌﾟｱｯﾌﾟ時
	DELETE		    	=	4;		//	削除
	ICHIRAN			    =	5;		//	一覧
	AGAIN			    =	6;

	SHIKINGURI		    =	3;		//	資金繰科目NO(管理基本ﾏｽﾀ-ﾏｽﾀ区分)
	BUNSEKI			    =	10;		//	分析科目NO(管理基本ﾏｽﾀ-ﾏｽﾀ区分)

	CODEORDER		    =	0;		//	ｺｰﾄﾞ順
	RENSOUORDER		    =	1;		//	連想順

	SHISAN			    =	0;		//	資産の部
	FUSAI			    =	1;		//	負債及び資本の部
	SONEKI			    =	2;		//	損益科目体系
	SEIZOU			    =	3;		//	製造の部
	GENKOU			    =	4;		//	原価の部/工事原価の部

	DISPOSE_DELETE  :   Byte    =   10; //  削除処理
//  DISPOSE_OTHER   :   Byte    =   20; //  通常処理

	//	印刷時の入力条件内容
	P_SHIWAKEKBN	    =	1;		//	仕訳入力区分時
	P_SHIKURIYU		    =	2;		//	資金繰ｺｰﾄﾞ優先区分
	P_KOTEITEKIYOU	    =	3;		//	固定摘要必須入力
	P_OTHER			    =	4;		//	上記以外

	P_URIAGETAX		    =	1;		//	売上消費税
	P_SHIIRETAX		    =	2;		//	仕入消費税

	{特定科目}
	SHISAN_BU		    =	010104;	//	資産の部
	FUSAI_BU		    =	010107;	//	負債及び資本の部
	URIAGE			    =	010201;	//	売上高
	URIAGEGENKA		    =	010203;	//	売上原価
	URIAGESOURI		    =	010204;	//	売上総利益
	HANBAI_IPAN		    =	010205;	//	販売費及び一般管理費
	EIGYOU_RI		    =	010206;	//	営業利益
	KEIZYOU_RI		    =	010207;	//	経常利益
	ZEIHIKIMAE		    =	010208;	//	税引前利益
	HOUZIN			    =	010209;	//	法人税等
	HOUZINTYOUSEI	    =	010210;	//	法人税調整額
	TOUKIRIEKI_SO	    =	010211;	//	当期利益
	ZENKIKURIKOSHI	    =	010212;	//	前期繰越利益
	KANENDO			    =	010213;	//	過年度税効果調整額
	MOKUTEKI		    =	010214;	//	目的積立金取崩
	TYUKAN			    =	010215;	//	中間配当金
	RIEKIZYUNBI		    =	010216;	//	利益準備金
	TOUKIMISYO		    =	010217;	//	当期未処分利益

	SEIZOU_BU		    =	010202;	//	製造の部
	GEN_KOUJI_BU	    =	010218;	//	原価の部/工事原価の部

	//	参照フラグ時に使用
	NORMAL			    =	1;		//	通常処理
	BASICONLY		    =	2;		//	基本のみ設定可能(詳細ボタン使用不可)
	REFER			    =	3;		//	参照
	KAN_NO_HO_BA	    =	4;		//	勘定科目通常/科目別補助基本
	KAN_NO_HO_RE	    =	5;		//	勘定科目通常/科目別補助参照
	KAN_BA_HO_NO	    =	6;		//	勘定科目基本/科目別補助通常
	KAN_BA_HO_RE	    =	7;		//	勘定科目基本/科目別補助参照
	KAN_RE_HO_NO	    =	8;		//	勘定科目参照/科目別補助通常
	KAN_RE_HO_BA	    =	9;		//	勘定科目参照/科目別補助基本



	DATABASE		    =	1;		//	採用ﾁｪｯｸ時にDBをﾁｪｯｸ
	NEWUP			    =	2;		//	採用ﾁｪｯｸ時に更新時・新規時をﾁｪｯｸ
	MAXADOPTCOUNT	    =	3;		//	採用できる最大値

	CHECKLIST		    =	990100;	//	帳票ｸﾞﾙｰﾌﾟNo(ﾁｪｯｸﾘｽﾄ系)

	//	2重加算ﾁｪｯｸ
	COPYMOTO		    =	0;		//	ｺﾋﾟｰした元
	COPYSAKI		    =	1;		//	ｺﾋﾟｰした先

	//	ﾃｰﾌﾞﾙ更新履歴に使用
	TABLE_KMKMA		    :	Integer	=	101;
	TABLE_KMKMB		    :	Integer	=	102;
	TABLE_KMKTREE	    :	Integer	=	198;
	TABLE_FUSENINFO	    :	Integer	=	912;

	TABLE_IN_UPDATE	    :	Integer	=	1;
	TABLE_DELETE	    :	Integer	=	2;

	//	詳細時の表示内容をｾｯﾄ/Check
	INFOSET			    =	1;		//	詳細情報をｾｯﾄ
	CHECK			    =	2;		//	ﾁｪｯｸ

	//	付箋の備考有り/無し
	FUSENBIKO_NASHI	    =	1;		//	付箋備考無し
	FUSENBIKO_ARI	    =	2;		//	付箋備考有り

	KMK				    =	1;		//	勘定科目
	KMK_HOJYO		    =	2;		//	科目別補助

	DISPOSE_NUM1		=	1;		// 番号1入力区分
	DISPOSE_NUM1FUZAN	=	2;		// 番号1入力区分(負残)
	DISPOSE_NUM2		=	3;		// 番号2入力区分
	DISPOSE_NUM2FUZAN	=	4;		// 番号2入力区分(負残)

	ACELINK				=	0;
	MJSLINK				=	1;

    // 表示可能byte数<049>
    DISP_LENGTH_LONG    =   24;     // 科目正式名称

// <SYNC> ADD start
	// ﾏｽﾀ同期ｸﾗｽの採用ﾌﾗｸﾞ
	GRP_SYNC_CHILD			= 1;		// ｸﾞﾙｰﾌﾟ会計採用あり 子会社
	GRP_SYNC_PARENT			= 0;		// ｸﾞﾙｰﾌﾟ会計採用あり 親会社
	GRP_SYNC_NOTUSE			= -1;		// ｸﾞﾙｰﾌﾟ会計採用なし

	// ｸﾞﾙｰﾌﾟ会計採用時の親会社DBへの指示
	GRP_PARENTDB_BEGINTRAN	= 0;		// ﾄﾗﾝｻﾞｸｼｮﾝ開始
	GRP_PARENTDB_ROLLBACK	= 1;		// ﾛｰﾙﾊﾞｯｸ
	GRP_PARENTDB_COMMIT		= 2;		// ｺﾐｯﾄ

	// 実在/合計区分
	SUMKBN_JITUZAI			= 0;		// 実在
	SUMKBN_GOUKEI			= 1;		// 合計

	// 表示区分(SecKmkNoDispInfo)		// <063> ADD
	DSPKBN_DISP				= 1;		// 表示
	DSPKBN_NODISP			= 2;		// 非表示
    // 使用区分(SecKmkNoDispInfo)		// <063> ADD
    OPEKBN_GRP				= 2;		// ｸﾞﾙｰﾌﾟ管理で使用

	// ﾃｰﾌﾞﾙ識別						// <063> ADD
	TBL_KMKMA_REL			= 0;		// KmkMA_REL
	TBL_KMKMB_REL			= 1;		// KmkMB_REL

	// ﾒｯｾｰｼﾞ
	MSGCAP_GRP				= 'グループ会計';

	MSG_GRP_RELATION_ERR	= '自社への関連付けに失敗しました。';
    MSG_GRP_RELATIONALL_ERR	= '子会社への関連付けに失敗しました。';
										// ★暫定対応
	MSG_GRP_CHILD_READONLY	= 'グループ会計の子会社として採用されています。'#13#10 +
							'体系のみの修正が可能です。';
										// <063> ADD
	JNTSYNC_MSG_KMKBUNRUI_ERR	= '指定のコードは、全社にて登録済みですが、'#13#10 +
								'科目分類が異なるため、'#13#10 +
								'自社へ同期することはできません。';
    									//<129>
	MSG_AnalyzeCodeChange	=  '分析コードを変更すると、以下の項目に初期値がセットされます。' + #13#10 +
                               '　正残区分、BS/PL区分、期首残区分、要約分析コード、固定費コード、変動費コード、' + #13#10 +
                               '　会社基本情報登録 - 会計情報 - 消費税情報 - 科目別消費税' + #13#10 +
                               '上記の項目と勘定科目の加算体系の確認が必要となります。' + #13#10 +
                               '分析コードを変更してよろしいでしょうか？';

// <SYNC> ADD end

	// -----<077> Add-St-----
	C_ST_PROCESS	= 0;				// 設定
	C_ED_PROCESS	= 1;				// 開放
	// -----<077> Add-Ed-----

{$R *.DFM}
{$Include JNTCRP009001_B.inc}
{$Include JNTConst.inc}
{$Include JNTCRPSyncMasterB.inc}    		// <SYNC> ﾏｽﾀ同期共通実装部
{$include JNTSyncMasterIFB.inc}   			// <066> 配信ﾀﾞｲｱﾛｸﾞ共通実装部

//-----------------------------------------------------------------------------
//  AppEntry
//      ｴﾝﾄﾘｰ関数群     <BPL>
//      親ﾌｫｰﾑから呼ばれる関数
//-----------------------------------------------------------------------------
function AppEntry(pPar	:	Pointer):	Integer;
var
	pFrm	:	^TJNTCRP009001f;
	pRec	:	^TMjsAppRecord;
begin
	result := ACTID_RET_OK;

	pRec :=	Pointer(TAppParam(pPar^).pRecord);

	case TAppParam(pPar^).iAction of
        // ---------------------------
        //	Form Create要求
        // ---------------------------
		ACTID_FORMCREATESTART		:
		begin
			new(pFrm);

			try
				pFrm^ := TJNTCRP009001f.CreateForm(pPar);
				pRec^.m_pChildForm := pFrm;
			except
				Dispose(pFrm);
				Result := ACTID_RET_NG;
			end;
		end;

        // ---------------------------
        //	Form Create&Show要求
        // ---------------------------
		ACTID_FORMCREATESHOWSTART	:
		begin
			new(pFrm);

			try
				pFrm^ := TJNTCRP009001f.CreateForm(pPar);
				pFrm^.Show();
				pRec^.m_pChildForm := pFrm;
			except
				Dispose(pFrm);
				Result := ACTID_RET_NG;
			end;
		end;

        // ---------------------------
        //	Form Close要求
        // ---------------------------
		ACTID_FORMCLOSESTART		:
		begin
			pFrm :=	Pointer(pRec^.m_pChildForm);
			pFrm^.Close();
			pFrm^.Free();
			Dispose(pFrm);
		end;

        // ---------------------------
        //	Form CanClose要求
        // ---------------------------
		ACTID_FORMCANCLOSESTART		:
		begin
			pFrm :=	Pointer(pRec^.m_pChildForm);
			if ( pFrm^.CloseQuery() = FALSE ) then
				result := ACTID_RET_NG;
		end;

        // ---------------------------
        //	Show要求
        // ---------------------------
		ACTID_SHOWSTART				:
		begin
			pFrm :=	Pointer(pRec^.m_pChildForm);
			pFrm^.Show();
		end;

        // ---------------------------
        //	Hide要求
        // ---------------------------
        ACTID_HIDESTART				:
        begin
			pFrm :=	Pointer(pRec^.m_pChildForm);
			if ( pFrm^.Parent <> nil ) then
            	pFrm^.Hide();
        end;
	end;

end;

//-----------------------------------------------------------------------------
//  CreateForm
//      ｺﾝｽﾄﾗｸﾀ <BPL>
//-----------------------------------------------------------------------------
constructor TJNTCRP009001f.CreateForm(pRec: Pointer);
var
	CTRL_DB		:	TFDConnection;
	DmqCtrlDb	:	TMQuery;
	DmqData		:	TMQuery;
//	iTanCD		:	Integer;	//	担当者ｺｰﾄﾞ// <040>
	iTanCD		:	Extended;	//	担当者ｺｰﾄﾞ
	sTanName	:	String;		//	担当者名
	bFlag		:	Boolean;	//	担当者がいるかいないか
//	sMessage	:	String;		// <SYNC> DEL
begin

	// 初期処理
	bFlag			    :=  FALSE;
	iTanCD			    :=	0;			//	担当者ｺｰﾄﾞ
	sTanName		    :=	'';			//	担当者名
	giTabTaihi		    :=	99;
	giG_Code		    :=	'99';
	giMasKbn		    :=	0;
	gbFlag			    :=	FALSE;
	gCheckCode		    :=	1;
	m_BackSpaceFlag     :=	FALSE;
	m_EndFlag		    :=	FALSE;
	m_F8CopyFlag	    :=	FALSE;
	m_KmkHError		    :=	FALSE;
	m_NewFlag		    :=  FALSE;
	m_NewFlag_J		    :=  FALSE;		// <100>
	m_NameList 		    :=  TNameList.Create;
	m_bFocusControl     :=	FALSE;
	m_Save.Node		    :=  nil;
	m_Save.NodeOya	    :=  nil;
	m_ErrorFlg		    :=  0;
	m_SearchInfo.iKmkCD :=  -1;

	m_pRec  :=  Pointer( TAppParam( pRec^ ).pRecord );

    // JNTCommonの構築
//    m_cJNTArea      := TJNTCommon.Create(Self);   <015>
//    m_cJNTArea.Init(m_pRec);                      <015>
//    m_cJNTArea.setMasAppRecord;

	MDataModule	    :=  TMDataModulef( m_pRec^.m_pDBModule^ );
    ComArea		    :=  TJNTMASCom( m_pRec^.m_pSystemArea^ );

    // 親BPLのｵﾌﾞｼﾞｪｸﾄ取得
    m_CmpList   := TList(TAppParam( pRec^ ).pActionParam^);

    AOwner  :=  TForm(m_pRec.m_pOwnerForm^);    // <005>

	// DBOpen
	dbCorp_Select := MDataModule.COPDBOpen(1, ComArea.m_iCopNo);
	if ( dbCorp_Select = nil ) then
	begin
		ComArea.m_MsgStd.GetMsg(MjsMsgRec,10000,MDataModule.GetStatus);
		with MjsMsgRec do
			MjsMessageBoxEx(AOwner,sMsg,sTitle,icontype,btntype,btndef,LogType);    // <005>
		raise Exception.Create( '' );
	end;
// <040>以下復帰↓
//(* <001> <!!!>
	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//	共通ﾒﾓﾘﾎﾟｲﾝﾀの担当者内部ｺｰﾄﾞ
	if ( rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD <> -1 ) then
	begin
		//	CTLDBOpen
		CTRL_DB	:=	MDataModule.CTLDBOpen(0);
		if ( CTRL_DB = nil ) then
		begin
			ShowMessage('エラー');
			raise EMathError.Create('エラー');
		end;

		DmqCtrlDb := TMQuery.Create( Self );		 		    //	MQueryの構築
		MDataModule.SetDBInfoToQuery( CTRL_DB, DmqCtrlDb );		//	DBとMQueryの接続

		DmqCtrlDb.Close;
		DmqCtrlDb.SQL.Clear;
		DmqCtrlDb.SQL.Add('SELECT '				);
		DmqCtrlDb.SQL.Add(	'Name '			);		    //	担当者名
		DmqCtrlDb.SQL.Add('FROM '				);
		DmqCtrlDb.SQL.Add(	'MOS_OFFICE_STAFF '	);
		DmqCtrlDb.SQL.Add('WHERE '				);
		DmqCtrlDb.SQL.Add(	'NCode = :NCode'	);		//	担当者内部ｺｰﾄﾞ
		DmqCtrlDb.ParamByName('NCode').AsFloat :=	rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;

		//	ｴﾗｰの判定
		if ( DmqCtrlDb.Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqCtrlDb);
			DmqCtrlDb.Close;
			DmqCtrlDb.Free;
			DmqData.Close;
			DmqData.Free;
            Exit;
		end;

		if ( DmqCtrlDb.Eof <> TRUE ) then
		begin
                                                                //	担当者ｺｰﾄﾞ
			iTanCD	 :=	rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
			sTanName :=	DmqCtrlDb.GetFLD('Name'	   ).AsString;	//	担当者名
		end;
		bFlag := TRUE;

		DmqCtrlDb.Close;
		DmqCtrlDb.Free;

		MDataModule.CTLDBClose(CTRL_DB);
	end;

	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(bFlag,TRUE));

	if ( bFlag = TRUE ) then
	begin
		DmqData.ParamByName('TANCD'  ).AsFloat := iTanCD;
	end;

	if ( DmqData.ExecSQL = FALSE ) then
	begin
// <SYNC> MOD start
(*		sMessage :=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
*)
		ErrorMessageDsp(DmqData);			// DBｴﾗｰﾒｯｾｰｼﾞ表示
// <SYNC> MOD end
	end;

	DmqData.Close;
	DmqData.Free;

// <SYNC> ADD start
    // SyncMasterｸﾗｽの生成
    try
        m_SyncMaster := TSyncMaster.Create(Self, m_pRec, m_cJNTArea, dbCorp_Select);
        m_SyncMaster.InitData();
	    m_SyncMaster.m_AOwner := TForm(m_pRec^.m_pOwnerForm^);
// <063> ADD start
											// 子会社の場合
		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
		begin								// 同期ｽﾄｱﾄﾞ呼出
			MDataModule.BeginTran(dbCorp_Select);
											// KmkMA
			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
			begin
				MDataModule.RollBack(dbCorp_Select);
                Abort;
			end;
											// KmkMB
// <068> MOD start
//   			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
   			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
			begin
				MDataModule.RollBack(dbCorp_Select);
                Abort;
			end;
											// SKmkMA
   			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_SKMKMA) then
			begin
				MDataModule.RollBack(dbCorp_Select);
                Abort;
			end;

			MDataModule.Commit(dbCorp_Select);
        end;
// <063> ADD end
    except
        raise;
    end;
// <SYNC> ADD end

// <063> ADD start
	try
	    if not GetSecMain() then   			// ｾｷｭﾘﾃｨ基本情報取得
		begin
        	Abort;
        end;
    except
    	raise;
	end;
// <063> ADD end

	//	ｽﾄｱﾄﾞの終了処理で必要な情報を退避
	m_EndInfoRec.TanCD	 := iTanCD;
	m_EndInfoRec.TanName := sTanName;
	m_EndInfoRec.TanFlag := bFlag;
//*)
// <040>↑

	JNTMasAccelCharCancel(Self);

// ↓↓↓<PRN>

    // 会社別ｼｽﾃﾑ情報の初期化
    try
        uvSelSys := nil;
	    uvSelSys := TJNTSelCorpSys.Create(Self);
        if uvSelSys = nil then
            Abort;

    	if uvSelSys.CreateSysMsg(m_pRec) <> 0 then
            Abort;
    except
		MjsMessageBox(AOwner,'ｼｽﾃﾑ情報の初期化に失敗です。', mjError, mjDefOk);
        raise;
    end;

    // 会社別ｼｽﾃﾑ情報読み込み
    try
        if uvSelSys.CreateSysInfo(dbCorp_Select) <> 0 then
            Abort;
    except
        uvSelSys.MsgDlg(1001,20);
        raise;
    end;
// ↑↑↑<PRN>

    inherited Create( AOwner );                 // <005>

// <005>	inherited Create( TForm(m_pRec.m_pOwnerForm^) );

end;

//************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*							フォーム作成
//*		Event			:	OnCreate
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.FormCreate(Sender: TObject);
var
	DmqMasInfo		:	TMQuery;
	aComboName		:	array[0..4]  of String;		//	Combo内に表示させる名称
	aHojyoMasKbn	:	array[0..30] of Integer;	//	MasterInfoのﾏｽﾀ区分No
//	aHojyoDspName	:	array[0..9]  of String;		//	補助名称
	aMasInfoMasKbn	:	array[0..2]  of Integer;	//	ﾏｽﾀ基本情報のﾏｽﾀ区分
	aT_FukuKmk		:	array[0..2]  of Integer;	//	複合科目の特定科目ｺｰﾄﾞ
	aSousyoku		:	array[0..6]  of String;		//	装飾
	aTokuteiKmk		:	array[0..19] of Integer;	//	特定科目のｺｰﾄﾞ配列(はぐれ科目作成時に使用)
	Dummy			:	Byte;						//	ﾀﾞﾐｰ
	iLoop			:	Integer;
	sDspName		:	String;						//	Comboに表示する名称
	sWork			:	String;						//	補助名称
	iCount			:	Integer;					//	表示用の件数
	UseKbn			:	Byte;						//	採用区分(0:なし、1:あり)
//	DspNo			:	Byte;						//	表示No
	SumKbn			:	Byte;						//	実在/合計区分
//	KmkKbn			:	Integer;
	iMassage		:	Integer;					//	ﾒｯｾｰｼﾞの種類
//	iRet			:	Integer;					//	排他制御処理の戻り値
    sLWork          :   String;
    sL2Work         :   String;
    sEWork          :   String;
begin
    iMassage := 0;

    // 親画面からToolBarのﾎﾞﾀﾝを継承
    B_Print 	:= TMSpeedButton( m_CmpList.Items[0]^ );     // 印刷
    B_Syousai 	:= TMSpeedButton( m_CmpList.Items[1]^ );     // 詳細
    B_Delete 	:= TMSpeedButton( m_CmpList.Items[2]^ );     // 削除
    B_KmkCopy 	:= TMSpeedButton( m_CmpList.Items[3]^ );     // 科目ｺﾋﾟｰ
    B_Search 	:= TMSpeedButton( m_CmpList.Items[4]^ );     // 検索
    ToolButton 	:= TToolButton  ( m_CmpList.Items[5]^ );     // 付箋
// <ESC>↓
//    MComboBox   := TMComboBox   ( m_CmpList.Items[6]^ );
//    m_cJNTArea  := TJNTCommon   ( m_CmpList.Items[7]^ );     // <015>
//    m_Base_pRec := Pointer      ( m_CmpList.Items[8]^ );     // <015>
    MComboBox   := TMComboBox   ( m_CmpList.Items[7]^ );     // 第2ｺﾝﾎﾞ
    m_cJNTArea  := TJNTCommon   ( m_CmpList.Items[8]^ );     // <015>
    m_Base_pRec := Pointer      ( m_CmpList.Items[9]^ );     // <015>
// <ESC>↑
	B_Order		:= TMSpeedButton( m_CmpList.Items[10]^ );     // 出力順序登録 <100>

    B_Print.OnClick     := B_PrintClick;
    B_Syousai.OnClick   := B_SyousaiClick;
    B_Delete.OnClick    := B_Delete_Click;
    B_KmkCopy.OnClick   := B_KmkCopy_Click;
    B_Search.OnClick    := B_Search_Click;
    ToolButton.OnClick  := ToolButton_Click;
	B_Order.OnClick		:= B_Order_Click;		// <100>

    MComboBox.OnChange  := MComboBox_Change;
    MComboBox.OnEnter   := MComboBox_Enter;
    MComboBox.OnKeyDown := MComboBox_KeyDown;

    ToolButton.DropdownMenu :=  TBPopup;

    // 分類ﾌｨｰﾙﾄﾞ情報の設定<002>
    for iLoop := 1 to 10 do
    begin
        sLWork  := 'LBun'  + FormatFloat('00', iLoop);
        sL2Work := 'L2Bun' + FormatFloat('00', iLoop);
        sEWork  := 'EBun'  + FormatFloat('00', iLoop);
        m_Bunrui[iLoop].LCaption := TMLabel  (MJSDispCtrl.MJSFindCtrl(Self, sLWork));
        m_Bunrui[iLoop].ECode    := TMTxtEdit(MJSDispCtrl.MJSFindCtrl(Self, sEWork));
        m_Bunrui[iLoop].LName    := TMLabel  (MJSDispCtrl.MJSFindCtrl(Self, sL2Work));
    end;

	Parent	  := TMPanel(m_pRec^.m_pOwnerPanel^);
	Align	  := alClient;
	ACControl := MComboBox;

	// ｼｽﾃﾑｶﾗｰとｱｸｾﾝﾄｶﾗｰをｾｯﾄされた色に変更
	MjsColorChange(
			TJNTCRP009001f ( Self ),
					ComArea.SystemArea.SysColorB,
					ComArea.SystemArea.SysColorD,
					ComArea.SystemArea.SysBaseColorB,
					ComArea.SystemArea.SysBaseColorD,
					rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysFocusColor
				);

//------------------------------------------------------------------------ <016>
	// AL、MLのどちらのｼｽﾃﾑで起動されているかCheck
//	if ( rcCOMMONAREA(m_pRec^.m_pCommonArea^).ObjectFlg = 1 ) then
//		m_System := MJSLINK
//	else
//		m_System := ACELINK;
	m_System := MJSLINK;    // <017>
//------------------------------------------------------------------------ <016>

	// 初期化処理
	gbEndFlag		        :=	FALSE;
	gbFusenFlag		        :=	FALSE;
	gbT_FusenFlag	        :=	FALSE;
	gbChangeFlag	        :=	FALSE;
// <025>	gbActiveFlag	        :=	0;
    gbActiveFlag            :=  ZITSUZAI;   // <025>
	giTaihi_GCode	        :=	0;
// <013>	giTaihi_SCode	        :=	'';
	giTaihi_SCode	        :=	'0';    // <013>
	gbHanteiFlag	        :=	FALSE;
	gbUpDateChek	        :=	FALSE;
	giOyaCode		        :=	0;
	giSelectTab	            :=	0;
	gbDspFlag		        :=	FALSE;
	gbDataUpdateFlag        :=	FALSE;
	gbEndEscFlag	        :=	FALSE;
	gbBorderFlag	        :=	FALSE;
//	iCount			        :=	0;
	giOrder			        :=	0;
	giRightClick	        :=	FALSE;
	bListDraw		        :=	TRUE;
	gHagureNCode	        :=	0;
	gbTaikeiFlag	        :=	FALSE;
	gbKmkTree2Flag	        :=	FALSE;
	giStartCode		        :=	0;			//	印刷時範囲選択開始ｺｰﾄﾞ
	giEndCode		        :=	0;			//	印刷時範囲選択終了ｺｰﾄﾞ
	giSelect		        :=	0;			//	印刷時帳票選択
	giKoujiSyubetsu	        :=	0;
	bEndFlag		        :=	FALSE;		//	終了ﾌﾗｸﾞ
	giReferFlag		        :=	NORMAL;
	giSyouDspCode	        :=	'0';
	giDspOyaCode	        :=	0;
	bSyokuchiFlag	        :=	FALSE;		//	諸口を削除時使用
	gBunCode		        :=	0;			//	分析ｺｰﾄﾞのｸﾘｱ
	gSeiCode		        :=	0;			//	性格ｺｰﾄﾞのｸﾘｱ
	gbBunChengeFlag	        :=	FALSE;
	gSeiChengeFlag	        :=	FALSE;
	SumKbn			        :=	0;
	gShiftTabFlag	        :=	FALSE;
	giChangeFlag	        :=	FALSE;
    giBankUseKbn			:=  0;			//<114>銀行採用区分 SQLを変更したので初期化を行う
	m_MailKbn		        :=	0;			//	ﾒｰﾙ会計区分
	m_KodomoFlag	        :=	FALSE;
	m_CopyFlag		        :=	FALSE;
//	KmkKbn			        :=	0;
	m_bSpaceCode	        :=	FALSE;
	m_bSpaceAgain	        :=	FALSE;
	m_bEndDown		        :=	FALSE;
	m_GridEndEscFlag        :=  FALSE;
	m_TaikeiPriFlag         :=  FALSE;
	m_ToolBtn.ClickFlag     :=  FALSE;
//	m_PriKodomoFlag         :=  FALSE;		// <107>DEL 使用していないため削除
	m_PriHagureCode         :=  0;
    m_FusenColorIdx         :=  -1;

    // 階層表示(値を変えれば階層の表示も変わる)
	gDspLevel		        :=	4;
    m_SyokuchiDlg           :=  FALSE;

	// 詳細ﾎﾞﾀﾝの使用不可
	B_Syousai.Enabled       :=  FALSE;

	// ﾏｽﾀ再計算のﾒｯｾｰｼﾞ表示処理の初期処理
	m_SwkInfo.MessageFlag   :=  FALSE;
	m_SwkInfo.SaveKmkCode   :=  0;

	//	ﾃｰﾌﾞﾙ更新履歴Flag
	TableHistory.KmkMA_Kan		   := 0;	//	勘定科目基本ﾏｽﾀ(勘定科目)
	TableHistory.KmkMA_Sai		   := 0;	//	勘定科目基本ﾏｽﾀ(細目科目)
	TableHistory.KmkMB_Kan		   := 0;	//	勘定科目詳細情報(勘定科目)
	TableHistory.KmkMB_KanDel	   := 0;	//	勘定科目詳細情報削除(勘定科目)
	TableHistory.KmkMB_Sai		   := 0;	//	勘定科目詳細情報(細目科目)
	TableHistory.KmkMB_SaiDel	   := 0;	//	勘定科目詳細情報削除(細目科目)
	TableHistory.KmkTree_Kan	   := 0;	//	科目加算体系ﾏｽﾀ(勘定科目)
	TableHistory.KmkTree_KanDel	   := 0;	//	科目加算体系ﾏｽﾀ削除(勘定科目)
	TableHistory.KmkTree_Kou	   := 0;	//	科目加算体系ﾏｽﾀ(工事合計)
	TableHistory.MFusenInfo_Kan	   := 0;	//	ﾏｽﾀ付箋管理情報(勘定科目)
	TableHistory.MFusenInfo_KanDel := 0;	//	ﾏｽﾀ付箋管理情報削除(勘定科目)
	TableHistory.MFusenInfo_Sai	   := 0;	//	ﾏｽﾀ付箋管理情報(細目合計)
	TableHistory.MFusenInfo_SaiDel := 0;	//	ﾏｽﾀ付箋管理情報削除(細目合計)

	//	ｸﾞﾘｯﾄﾞと詳細の表示／非表示
	P_Grid.Visible	  := TRUE;
	P_Syousai.Visible := FALSE;

	//	印刷ﾎﾞﾀﾝ・詳細ﾎﾞﾀﾝの使用不可
	B_Print.Enabled	  := FALSE;
	B_Syousai.Enabled := FALSE;

	//	初期段階Enableにする
	TreeView.Enabled :=	FALSE;
	Splitter.Enabled :=	FALSE;
	P_Grid.Enabled	 :=	FALSE;

	// 別プログラム起動フラグ    
	m_AnotherPrgStFlg := FALSE;

	// 分析コード変更時メッセージ表示フラグ
    m_bBunChgMsgFlag := False;

	//	ﾏｽﾀ基本情報(MasterInfo)からｺｰﾄﾞ桁数を取得
	DmqMasInfo := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqMasInfo );		//	DBとMQueryの接続

	with DmqMasInfo do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT         ');
		SQL.Add('    YearKbn    ');	//	和暦/西暦区分
		SQL.Add('   ,ComKbn3    ');	//	ﾒｰﾙ会計区分
		SQL.Add('   ,ComKbn4    ');	//	公益法人区分
        SQL.Add('   ,DTName7    '); //  使用可能ｺｰﾄﾞ
		SQL.Add('FROM           ');
		SQL.Add('   DTMAIN,     ');	//	会社基本情報
		SQL.Add('   DTMAIN_MAS  ');	//	会社基本情報(財務)

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqMasInfo);
			DmqMasInfo.Close;
			DmqMasInfo.Free;
            Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			m_YearKbn := GetFLD('YearKbn').AsInteger;
			//	適用開始・終了の和暦/西暦設定
			case GetFLD('YearKbn').AsInteger of
				0:	// 和暦
				begin
					// 詳細での適用開始・終了のｺﾝﾎﾟｰﾈﾝﾄの設定
					EStartDate.DateFormat := dfEMD;
//					EStartDate.Gengou	  := 'H';								//<#NGEN>
					EStartDate.Gengou	  := MasDateCtrl.MasGetNowGengo();		//<#NGEN>
					EEndDate.DateFormat   := dfEMD;
//					EEndDate.Gengou	      := 'H';								//<#NGEN>
					EEndDate.Gengou	      := MasDateCtrl.MasGetNowGengo();		//<#NGEN>
                    // 印刷での適用開始・終了の設定
					// 実在(詳細)

                    //@ ↓12.01 DisplayFormat設定
					//pDT_StartDate.DisplayFormat   := '';					// 適用開始
					//pDT_EndDate.DisplayFormat     := '';					// 適用終了
                    pDT_StartDate.DisplayFormat   := 'ee/mm/dd';    		// 適用開始
					pDT_EndDate.DisplayFormat     := 'ee/mm/dd';			// 適用終了
                    //@ ↑12.01

					R_JS_LastUpDate.DisplayFormat := 'ee/mm/dd hh:mm:ss';	// 最終更新日時
					// 細目
					R_S_StartDate.DisplayFormat  :=	'';						// 適用開始
					R_S_EndDate.DisplayFormat    :=	'';						// 適用終了
					R_S_LastUpDate.DisplayFormat :=	'ee/mm/dd hh:mm:ss';	// 最終更新日時
					// 合計
					R_G_LastUpDate.DisplayFormat :=	'ee/mm/dd hh:mm:ss';	// 最終更新日時
				end;
				1:	// 西暦
				begin
					// 詳細での適用開始・終了のｺﾝﾎﾟｰﾈﾝﾄの設定
					EStartDate.DateFormat := dfYMD;
					EStartDate.Gengou	  := #0;
					EEndDate.DateFormat   := dfYMD;
					EEndDate.Gengou	      := #0;
                    // 印刷での適用開始・終了の設定
					// 実在(詳細)
					pDT_StartDate.DisplayFormat   := 'yy/mm/dd';			// 適用開始
					pDT_EndDate.DisplayFormat     := 'yy/mm/dd';			// 適用終了
					R_JS_LastUpDate.DisplayFormat := 'yy/mm/dd hh:mm:ss';	// 最終更新日時
					// 細目
					R_S_StartDate.DisplayFormat  :=	'yy/mm/dd';				// 適用開始
					R_S_EndDate.DisplayFormat    :=	'yy/mm/dd';				// 適用終了
					R_S_LastUpDate.DisplayFormat :=	'yy/mm/dd hh:mm:ss';	// 最終更新日時
					// 合計
					R_G_LastUpDate.DisplayFormat :=	'yy/mm/dd hh:mm:ss';	// 最終更新日時
				end;
			end;

			m_MailKbn := GetFLD('ComKbn3').AsInteger;						//	ﾒｰﾙ会計区分
{
			if ( m_MailKbn = 1 ) then
			begin
				B_Delete.Visible  := FALSE;
				MI_Delete.Visible := FALSE;
				B_KmkCopy.Left	  := 282;
				B_Search.Left	  := 382;		// 検索ﾎﾞﾀﾝ
				ToolBar.Left	  := 465;		// ToolBarの位置
			end
			else
			begin
				B_Delete.Visible  := TRUE;
				MI_Delete.Visible := TRUE;
				B_KmkCopy.Left	  := 352;
				B_Search.Left	  := 452;		// 検索ﾎﾞﾀﾝ
				ToolBar.Left	  := 535;		// ToolBarの位置
			end;
}
			m_KouekiKbn := GetFLD('ComKbn4').AsInteger;						//	公益法人区分

            m_strValidCharacters    :=  GetFld('DTName7').AsString;
		end
		else
		begin
			//	詳細での適用開始・終了のｺﾝﾎﾟｰﾈﾝﾄの設定
			EStartDate.DateFormat := dfEMD;
			EStartDate.Gengou	  := 'H';
			EEndDate.DateFormat   := dfEMD;
			EEndDate.Gengou	      := 'H';
            // 印刷での適用開始・終了の設定
			// 実在(詳細)

			//@ ↓12.01 DisplayFormat設定
            //pDT_StartDate.DisplayFormat   := '';					// 適用開始
			//pDT_EndDate.DisplayFormat     := '';					// 適用終了
            pDT_StartDate.DisplayFormat   := 'ee/mm/dd';    		// 適用開始
			pDT_EndDate.DisplayFormat     := 'ee/mm/dd';			// 適用終了
            //@ ↑12.01

			R_JS_LastUpDate.DisplayFormat := 'ee/mm/dd hh:mm:ss';	// 最終更新日時
			// 細目
			R_S_StartDate.DisplayFormat  :=	'';						// 適用開始
			R_S_EndDate.DisplayFormat    :=	'';						// 適用終了
			R_S_LastUpDate.DisplayFormat :=	'ee/mm/dd hh:mm:ss';	// 最終更新日時
			// 合計
			R_G_LastUpDate.DisplayFormat :=	'ee/mm/dd hh:mm:ss';	// 最終更新日時
		end;

        // ﾀｲﾄﾙに分類1～5名称を設定<hirota>
        ppLabel39.Caption := '';
        ppLabel59.Caption := '';
        ppLabel63.Caption := '';
        ppLabel64.Caption := '';
        ppLabel72.Caption := '';

        Close();
		SQL.Clear();
		SQL.Add('SELECT MasterKbn, JHojyoName   '
            +   'FROM MasterInfo                '
            +   'WHERE  (UseKbn <> 0)           '
            +   '  AND  (481 <= MasterKbn)      '
// <042>↓
//            +   '  ANE  (MasterKbn <= 485)      ');
            +   '  AND  (MasterKbn <= 485)      ');
        Open();
// <042>↑
        while (not EOF) do
		begin
			case GetFLD('MasterKbn').AsInteger of
                481:    ppLabel39.Caption := GetFLD('JHojyoName').AsString;
                482:    ppLabel59.Caption := GetFLD('JHojyoName').AsString;
                483:    ppLabel63.Caption := GetFLD('JHojyoName').AsString;
                484:    ppLabel64.Caption := GetFLD('JHojyoName').AsString;
                485:    ppLabel72.Caption := GetFLD('JHojyoName').AsString;
            end;

            next;
        end;
        // ↑↑↑<hirota>

        // 工事のﾏｽﾀ区分を取得
        m_KoujiMasKbn   :=  gfnKoujiMasKbnGet();

		//	勘定科目/細目科目のｺｰﾄﾞ属性・桁数取得・工事管理種別
		aMasInfoMasKbn[0] := 1;		        //	ﾏｽﾀ基本情報(ﾏｽﾀ区分	1:勘定科目)
		aMasInfoMasKbn[1] := 2;		        //	ﾏｽﾀ基本情報(ﾏｽﾀ区分	2:細目科目)
		aMasInfoMasKbn[2] := m_KoujiMasKbn;	//	ﾏｽﾀ基本情報(ﾏｽﾀ区分	201～210のうちどれか1つ:工事)

		for iLoop := 0 to 2 do
		begin
            // 工事を採用していない場合は無視する
            if ( aMasInfoMasKbn[iLoop] = 0 ) then
            begin
                giKoujiSyubetsu		        :=  0;	//	工事管理種別
				wkKouji.KoujiStartCode      :=  0;	//	(開始)未成工事支出金ｺｰﾄﾞ
				wkKouji.KoujiEndCode        :=  0;	//	(終了)未成工事支出金ｺｰﾄﾞ
            end;

			Close();
			SQL.Clear;
			SQL.Add('SELECT                 ');
			if ( aMasInfoMasKbn[iLoop] = m_KoujiMasKbn ) then
			begin
				SQL.Add('   UseKbn,         '		//	工事管理種別
				    +   '   KmkNCode8,      '		//	(開始)未成工事支出金ｺｰﾄﾞ
				    +   '   KmkNCode9,      ');		//	(終了)未成工事支出金ｺｰﾄﾞ
			end;
			SQL.Add('   CodeDigit               '
			    +   'FROM MasterInfo            '
			    +   'WHERE (MasterKbn = :Kbn)   ');
			ParamByName('Kbn').AsInteger := aMasInfoMasKbn[iLoop];

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqMasInfo);
				DmqMasInfo.Close;
				DmqMasInfo.Free;
        	    Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
                if ( aMasInfoMasKbn[iLoop] = 1 ) then
                begin
                    DGoukeiGridGCode.MaxLength  :=  GetFLD('CodeDigit').AsInteger;	//	合計Grid
                    DZitsuGridCode.MaxLength    :=  GetFLD('CodeDigit').AsInteger;	//	実在Grid
                    wkKmk.KanjyoKeta		    :=  GetFLD('CodeDigit').AsInteger;	//	勘定科目の桁数
                end
                else if ( aMasInfoMasKbn[iLoop] = 2 ) then
                begin
                    DSaimokuGridSCode.MaxLength	:=	GetFLD('CodeDigit').AsInteger;	//	細目Grid
                    wkKmk.SaimokuKeta			:=	GetFLD('CodeDigit').AsInteger;	//	細目科目の桁数
                end
                else if ( aMasInfoMasKbn[iLoop] = m_KoujiMasKbn ) then
                begin
                    giKoujiSyubetsu		        :=  GetFLD('UseKbn'  ).AsInteger;	//	工事管理種別
                    wkKouji.KoujiStartCode      :=  GetFLD('KmkNCode8').AsInteger;	//	(開始)未成工事支出金ｺｰﾄﾞ
                    wkKouji.KoujiEndCode        :=  GetFLD('KmkNCode9').AsInteger;	//	(終了)未成工事支出金ｺｰﾄﾞ
				end;
			end;
		end;

		// 補助採用区分のｺｰﾄﾞｾｯﾄ
		aHojyoMasKbn[0]	:=	21;		        //	ﾏｽﾀ区分(21:銀行)
		aHojyoMasKbn[1]	:=	22;		        //	ﾏｽﾀ区分(22:取引先)
		aHojyoMasKbn[2]	:=	25;		        //	ﾏｽﾀ区分(24:社員)
		aHojyoMasKbn[3]	:=	31;		        //	ﾏｽﾀ区分(31:汎用補助１)
		aHojyoMasKbn[4]	:=	32;		        //	ﾏｽﾀ区分(32:汎用補助２)
		aHojyoMasKbn[5]	:=	33;		        //	ﾏｽﾀ区分(33:汎用補助３)
		aHojyoMasKbn[6]	:=	34;		        //	ﾏｽﾀ区分(34:汎用補助４)
		aHojyoMasKbn[7]	:=	35;		        //	ﾏｽﾀ区分(35:汎用補助５)
		aHojyoMasKbn[8] :=	41;		        //	ﾏｽﾀ区分(41:部門)
		aHojyoMasKbn[9] :=	42;		        //	ﾏｽﾀ区分(42:ｾｸﾞﾒﾝﾄ)
		aHojyoMasKbn[10]:=	m_KoujiMasKbn;	//	ﾏｽﾀ区分(201～210のうち1つ:工事)
        // <002>
		aHojyoMasKbn[11]:=	481;            //	ﾏｽﾀ区分(481:科目分類1)
		aHojyoMasKbn[12]:=	482;            //	ﾏｽﾀ区分(482:科目分類2)
		aHojyoMasKbn[13]:=	483;            //	ﾏｽﾀ区分(483:科目分類3)
		aHojyoMasKbn[14]:=	484;            //	ﾏｽﾀ区分(484:科目分類4)
		aHojyoMasKbn[15]:=	485;            //	ﾏｽﾀ区分(485:科目分類5)
		aHojyoMasKbn[16]:=	486;            //	ﾏｽﾀ区分(486:科目分類6)
		aHojyoMasKbn[17]:=	487;            //	ﾏｽﾀ区分(487:科目分類7)
		aHojyoMasKbn[18]:=	488;            //	ﾏｽﾀ区分(488:科目分類8)
		aHojyoMasKbn[19]:=	489;            //	ﾏｽﾀ区分(489:科目分類9)
		aHojyoMasKbn[20]:=	490;            //	ﾏｽﾀ区分(490:科目分類10)
        // <002>
		aHojyoMasKbn[21]:=	491;            //	ﾏｽﾀ区分(491:科目別補助分類1)
		aHojyoMasKbn[22]:=	492;            //	ﾏｽﾀ区分(492:科目別補助分類2)
		aHojyoMasKbn[23]:=	493;            //	ﾏｽﾀ区分(493:科目別補助分類3)
		aHojyoMasKbn[24]:=	494;            //	ﾏｽﾀ区分(494:科目別補助分類4)
		aHojyoMasKbn[25]:=	495;            //	ﾏｽﾀ区分(495:科目別補助分類5)
		aHojyoMasKbn[26]:=	496;            //	ﾏｽﾀ区分(496:科目別補助分類6)
		aHojyoMasKbn[27]:=	497;            //	ﾏｽﾀ区分(497:科目別補助分類7)
		aHojyoMasKbn[28]:=	498;            //	ﾏｽﾀ区分(498:科目別補助分類8)
		aHojyoMasKbn[29]:=	499;            //	ﾏｽﾀ区分(499:科目別補助分類9)
		aHojyoMasKbn[30]:=	500;            //	ﾏｽﾀ区分(500:科目別補助分類10)

//		DspNo	:=	1;
		//	MasterInfoから名称取得
        //<114>MOVE↓
        Close();
        SQL.Clear();
        SQL.Add(' SELECT MasterKbn, JHojyoName, UseKbn, CodeAttr, CodeDigit ');
        SQL.Add(' FROM MasterInfo ');
        SQL.Add(' WHERE MasterKbn IN ( ');

        for iLoop := Low(aHojyoMasKbn) to High(aHojyoMasKbn) do
        begin
        	SQL.Add(IntToStr(aHojyoMasKbn[iLoop]));

            if iLoop <> High(aHojyoMasKbn) then
            	SQL.Add(',')
            else
                SQL.Add(')');
        end;
        
        SQL.Add(' ORDER BY MasterKbn ');

        //	ｴﾗｰの判定
        if ( Open = FALSE ) then
        begin
            ErrorMessageDsp(DmqMasInfo);
            DmqMasInfo.Close;
            DmqMasInfo.Free;
            Exit;
        end;
        //<114>MOVE↑

		//for iLoop := 0 to 30 do								//<114>DEL
        for iLoop := Low(aHojyoMasKbn) to High(aHojyoMasKbn) do //<114>ADD
		begin
            // 工事が採用されていない場合は無視する
            if ( aHojyoMasKbn[iLoop] = 0 ) then Continue;

			//ﾏｽﾀ区分が一致していない場合はContiue
            if ( aHojyoMasKbn[iLoop] <> GetFld('MasterKbn').AsInteger) then Continue;	//<114>ADD

			{//<114>MOVE↓
			Close();
			SQL.Clear();
			SQL.Add('SELECT                     '
			    +   '    JHojyoName             '   //	補助名称(実在)
			    +   '   ,UseKbn                 '	//	採用区分
			    +   '   ,CodeAttr               '   //	ｺｰﾄﾞ属性
    		    +   '   ,CodeDigit              '   //	ｺｰﾄﾞ桁数
			    +   'FROM MasterInfo            '
			    +   'WHERE  (MasterKbn = :Kbn)  ');

			ParamByName('Kbn').AsInteger := aHojyoMasKbn[iLoop];

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqMasInfo);
				DmqMasInfo.Close;
				DmqMasInfo.Free;
        	    Exit;
			end;
            }//<114>MOVE↑
            //	ﾚｺｰﾄﾞが存在した時
			//if ( EOF <> TRUE ) then							//<114>DEL
			//begin												//<114>DEL
				sWork	:=	GetFLD('JHojyoName'	).AsString;		//	名称取得
				UseKbn	:=	GetFLD('UseKbn'		).AsInteger;	//	採用区分

				if ( aHojyoMasKbn[iLoop] = 21 ) then	//	ﾏｽﾀ区分が銀行(21)の時
				begin
					if ( UseKbn = 0 ) then
                    	giBankUseKbn :=	0	//	なし
					else
						giBankUseKbn :=	1;	//	あり
				end;

                // 分類採用区分、名称、ｺｰﾄﾞ属性、ｺｰﾄﾞ桁数の取得 <002>
				if ( aHojyoMasKbn[iLoop] >= 481 ) and
                   ( aHojyoMasKbn[iLoop] <= 500 ) then
                begin
                    aBunruiKbn  [aHojyoMasKbn[iLoop] - 481] := UseKbn;
                    aBunruiNm   [aHojyoMasKbn[iLoop] - 481] := sWork;
                    aBunruiAttr [aHojyoMasKbn[iLoop] - 481] := GetFLD('CodeAttr').AsInteger;
                    aBunruiDigit[aHojyoMasKbn[iLoop] - 481] := GetFLD('CodeDigit').AsInteger;

                    // 分類ﾌｨｰﾙﾄﾞの制御
                    if ( aHojyoMasKbn[iLoop] < 491 ) then
                    begin
                        // ﾌｨｰﾙﾄﾞを使用不可
                        m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LCaption.Enabled   := FALSE;
                        m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.Visible      := FALSE;
                        m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LName.Enabled      := FALSE;

                        // ﾌｨｰﾙﾄﾞのｸﾘｱ
                        m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LCaption.Caption   := '';
                        m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.Text         := '';
                        m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LName.Caption      := '';

                        // 採用区分の確認
                        if (UseKbn = 1) then             // 採用あり
                        begin
                            // 属性、桁数の設定
                            if      GetFLD('CodeAttr').AsInteger = 0 then     // 0:数字
                                m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.InputAttr := iaZeroSup
                            else if GetFLD('CodeAttr').AsInteger = 1 then     // 1:数字（前ｾﾞﾛあり）
                                m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.InputAttr := iaZeroPad
                            else if GetFLD('CodeAttr').AsInteger = 2 then     // 2:ﾌﾘｰ
                                m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.InputAttr := iaFree;
                            m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.MaxLength := GetFLD('CodeDigit').AsInteger;

                            // ﾌｨｰﾙﾄﾞを使用可
                            m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LCaption.Enabled   := TRUE;
                            m_Bunrui[aHojyoMasKbn[iLoop]-481+1].ECode.Visible      := TRUE;
                            m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LName.Enabled      := TRUE;

                            // ｷｬﾌﾟｼｮﾝの表示
                            m_Bunrui[aHojyoMasKbn[iLoop]-481+1].LCaption.Caption   := sWork;
                        end;
                    end;
                end;
			//end																	//<114>DEL
			//else																	//<114>DEL
			//begin																	//<114>DEL
			//	if ( aHojyoMasKbn[iLoop] = 21 ) then	//	ﾏｽﾀ区分が銀行(21)の時	//<114>DEL
            //    	giBankUseKbn	:=	0	//	なし								//<114>DEL
			//end;																	//<114>DEL
            Next;	//<114>ADD
		end;

//<053> -- start --
		Close();
		SQL.Clear;
		SQL.ADD('SELECT count(*) as cnt FROM KbnInfo WHERE RecKbn=1 and GnPuKbn4 = 1');
		//	ｴﾗｰの判定
		if Open = False then
		begin
			ErrorMessageDsp(DmqMasInfo);
			DmqMasInfo.Close;
			DmqMasInfo.Free;
			Exit;
		end;

	//	ComboBox表示名称作成
		aComboName[0]	:=	'資産科目';
		if GetFld('cnt').AsInteger>0 then
			aComboName[1]	:=	'負債・純資産科目'
		else
			aComboName[1]	:=	'負債・資本科目';
		aComboName[2]	:=	'損益科目';
		aComboName[3]	:=	'製造科目';
	end;
	DmqMasInfo.Close;
	DmqMasInfo.Free;
//<053> --- end ---
//<053> -- start --
//	end;
//	DmqMasInfo.Close;
//	DmqMasInfo.Free;
//	ComboBox表示名称作成
//	aComboName[0]	:=	'資産科目';
//	aComboName[1]	:=	'負債・資本科目';
//	aComboName[2]	:=	'損益科目';
//	aComboName[3]	:=	'製造科目';
//<053> --- end ---
	if ( m_KouekiKbn <> 0 ) then	//	一般法人ではない時
		iCount := 2		            //	製造科目非表示
	else
		iCount := 3;	            //	製造科目表示

	for iLoop := 0 to iCount do
	begin
		sDspName	:=	aComboName[iLoop];
		MComboBox.Items.Add(sDspName);
	end;

	MComboBox.ItemIndex	:=	0;	    //	Comboの初期表示

	//	性格区分
	aSeikaku[0]		:=	'通常科目型';
	aSeikaku[1]		:=	'支払債務型';
	aSeikaku[2]		:=	'支払手形型';
	aSeikaku[3]		:=	'当座小切手型';
	aSeikaku[4]		:=	'支払先日付小切手';
	aSeikaku[5]		:=	'売掛金型';
	aSeikaku[6]		:=	'受取手形型';
	aSeikaku[7]		:=	'割引手形型';
	aSeikaku[8]		:=	'受取先日付小切手';
	aSeikaku[9]		:=	'期日付債権型';
	aSeikaku[10]	:=	'期日付債務型';
	aSeikaku[11]	:=	'期日付債権型２';
	aSeikaku[12]	:=	'期日付債務型２';
	aSeikaku[13]	:=	'番号付債権型';
	aSeikaku[14]	:=	'番号付債務型';
	aSeikaku[15]	:=	'番号付債権型２';
	aSeikaku[16]	:=	'番号付債務型２';
	aSeikaku[17]	:=	'期日指定振込';

	MemSeikaku.Open;
	for iLoop := 0 to 17 do
	begin
		MemSeikaku.Append();
		MemSeikaku.FieldByName('S_Code' ).AsInteger	:= iLoop;
		MemSeikaku.FieldByName('S_Name' ).AsString	:= aSeikaku[iLoop];
		MemSeikaku.Post();
	end;

	//	装飾区分
	aSousyoku[0] :=	'なし';
	aSousyoku[1] :=	'【】';
	aSousyoku[2] :=	'（）';
	aSousyoku[3] :=	'〔〕';
	aSousyoku[4] :=	'＜＞';
	aSousyoku[5] :=	'(())';
	aSousyoku[6] :=	'｛｝';

	MemSousyoku.Open;
	for iLoop := 0 to 6 do
	begin
		MemSousyoku.Append();
		MemSousyoku.FieldByName('SousyokuNo').AsInteger	:= iLoop;
		MemSousyoku.FieldByName('Sousyoku'	).AsString	:= aSousyoku[iLoop];
		MemSousyoku.Post();
	end;

	SetYouBunName();			//	要約分析名称ｾｯﾄ
	BunsekiDefaultSet();		//	分析ｺｰﾄﾞのﾃﾞﾌｫﾙﾄ値
	SeikakuDefaultSet();		//	性格ｺｰﾄﾞのﾃﾞﾌｫﾙﾄｾｯﾄ処理

    // 最初の表示時に付箋の箇所に色がついていたのでつかない為の制御
	DZitsuGrid.FocusedColumn	:=	1;
	DSaimokuGrid.FocusedColumn	:=	1;
	DGoukeiGrid.FocusedColumn	:=	1;

    {//<114>DEL↓
	//	特定科目のｺｰﾄﾞｾｯﾄ
	aTokuteiKmk[0]	:=	10104;	//	資産の部
	aTokuteiKmk[1]	:=	10107;	//	負債及び資本の部
	aTokuteiKmk[2]	:=	10201;	//	売上高
	aTokuteiKmk[3]	:=	10203;	//	売上原価
	aTokuteiKmk[4]	:=	10204;	//	売上総利益
	aTokuteiKmk[5]	:=	10205;	//	販売費及び一般管理費
	aTokuteiKmk[6]	:=	10206;	//	営業利益
	aTokuteiKmk[7]	:=	10207;	//	経常利益
	aTokuteiKmk[8]	:=	10208;	//	税引前利益
	aTokuteiKmk[9]	:=	10209;	//	法人税等
	aTokuteiKmk[10]	:=	10210;	//	法人税調整額
	aTokuteiKmk[11]	:=	10211;	//	当期利益
	aTokuteiKmk[12]	:=	10212;	//	前期繰越利益
	aTokuteiKmk[13]	:=	10213;	//	過年度税効果調整額
	aTokuteiKmk[14]	:=	10214;	//	目的積立金取崩
	aTokuteiKmk[15]	:=	10215;	//	中間配当金
	aTokuteiKmk[16]	:=	10216;	//	利益準備金
	aTokuteiKmk[17]	:=	10217;	//	当期未処分利益
	aTokuteiKmk[18]	:=	10202;	//	製造の部
	aTokuteiKmk[19]	:=	10218;	//	原価の部/工事原価の部

	//	特定科目ｺｰﾄﾞから科目ｺｰﾄﾞを取得
	Dummy := 0;
	for iLoop := 0 to 19 do
	begin
		aTokuteiKmkCode[iLoop] := GetKmkInfo(aTokuteiKmk[iLoop],1,Dummy);
	end;

	//	複合科目の特定科目ｺｰﾄﾞをｾｯﾄ
	aT_FukuKmk[0]	:=	10301;	//	複合科目
	aT_FukuKmk[1]	:=	10302;	//	資金複合科目
	aT_FukuKmk[2]	:=	10303;	//	非会計複合科目

	//	複合の特定科目ｺｰﾄﾞから複合の科目ｺｰﾄﾞを取得
	for iLoop := 0 to 2 do
	begin
		sFukuKmk[iLoop]	:=	GetKmkInfo(aT_FukuKmk[iLoop],1,SumKbn);
	end;

	//	消費税関係の科目ｺｰﾄﾞを特定科目ｺｰﾄﾞから取得
	for iLoop := 1 to 9 do
	begin
		m_aTaxInfo[iLoop] := GetKmkInfo((30100 + iLoop),1,SumKbn);
	end;
    }//<114>DEL↑
    //特定科目情報のｾｯﾄ
    SetKmkInfoInit;	//<114>ADD

    // 電子帳簿は2次以降の対応の為、一時非表示にします。(MJSの大宮様より) <022>
    Panel_Denshi.Visible    :=  FALSE;

//	メール会計によって通常処理・基本のみ設定・参照を切り替える
//	(NORMAL:通常処理,BASICONLY:基本のみ設定可能,REFER:参照のみ)
	//	ﾒｰﾙ会計登録権利をCheck(勘定科目)

(* <001> FXではﾒｰﾙ会計なし <!!!>
	KanjyoMaster	:=	MailEntCheck(dbCorp_Select,MDataModule,nil,1,1);
	case KanjyoMaster of
		DISPOSE_SETTLE:		giReferFlag	:= REFER;		//	決算確定の為参照のみ
        DISPOSE_MAILNOTUSE:	giReferFlag	:= NORMAL;		//	メール未採用の為通常処理
		DISPOSE_USUALLY:	KmkKbn		:= NORMAL;		//	通常処理
		DISPOSE_BASIC:		KmkKbn		:= BASICONLY;	//	基本のみ設定可能
		DISPOSE_REFER:		KmkKbn		:= REFER;		//	参照のみ
	end;

	//	ﾒｰﾙ会計登録権利をCheck(科目別補助)
	SaimokuMaster	:=	MailEntCheck(dbCorp_Select,MDataModule,nil,2,1);
	case SaimokuMaster of
		DISPOSE_USUALLY:	//	通常処理
		begin
			case kmkKbn of
				NORMAL:		begin
								giReferFlag := NORMAL; 			//	通常処理
								iMassage	:= 1;
							end;
				BASICONLY:	begin
								giReferFlag := KAN_BA_HO_NO;	//	勘定科目(基本)/科目別補助(通常)
								iMassage	:= 4;
							end;
				REFER:		begin
								giReferFlag := KAN_RE_HO_NO;	//	勘定科目(参照)/科目別補助(通常)
								iMassage	:= 4;
							end;
			end;
		end;
		DISPOSE_BASIC:		//	基本のみ設定可能
		begin
			case kmkKbn of
				NORMAL:		begin
								giReferFlag := KAN_NO_HO_BA;	//	勘定科目通常/科目別補助基本
								iMassage	:= 3;
							end;
				BASICONLY:	begin
								giReferFlag := BASICONLY;		//	基本のみ設定可能
								iMassage	:= 2;
							end;
				REFER:		begin
								giReferFlag := KAN_RE_HO_BA;	//	勘定科目参照/科目別補助基本
								iMassage	:= 2;
							end;
			end;
		end;
		DISPOSE_REFER:		//	参照のみ
		begin
			case kmkKbn of
				NORMAL:		begin
								giReferFlag := KAN_NO_HO_RE;	//	勘定科目通常/科目別補助参照
								iMassage	:= 3;
							end;
				BASICONLY:	begin
								giReferFlag := KAN_BA_HO_RE;	//	勘定科目基本/科目別補助参照
								iMassage	:= 2;
							end;
				REFER:		begin
								giReferFlag := REFER;			//	参照のみ
								iMassage	:= 2;
							end;
			end;
		end;
	end;
*)

	// 排他制御
(* 排他制御はどのように行うのか？<!!!>
	if ( giReferFlag <> REFER ) then	// 参照のみ以外の時
	begin
		if ( fnExcept() = 99 ) then
		begin
			iMassage    := 99;
			giReferFlag := REFER;			//	参照のみ
		end;
	end;
*)

	case iMassage of
		2:      MjsMessageBoxEx(AOwner,'登録権利がない為、参照のみです。','確認',
                        mjInformation,mjOK,mjDefOK);    // <005>
		3:      MjsMessageBoxEx(AOwner,'補助の登録権利がない為、科目のみ登録可能です。','確認',
                        mjInformation,mjOK,mjDefOK);    // <005>
		4:      MjsMessageBoxEx(AOwner,'科目の登録権利がない為、補助のみ登録可能です。','確認',
                        mjInformation,mjOK,mjDefOK);    // <005>
		99:	    // 排他制御のﾒｯｾｰｼﾞ
		begin
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10,113);
			MjsMessageBoxEx(AOwner,     // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            FALSE
                           );
		end;
	end;

    fnGetGrants();              // <008>
	fnControl(giReferFlag);
    // 電子帳簿採用区分を取得
	GetKbnInfo();
    fnNumberControlInit();	// 番号管理初期処理<017>
// <017>	m_NumberUseKbn := 0;    // 0:なし 1:番号１ 2:番号１＋番号２


	//	ﾌｫﾝﾄを、ﾕｰｻﾞｰｶｽﾀﾏｲｽﾞされたﾌｫﾝﾄに変更
	MjsFontResize(TJNTCRP009001f(Self),Pointer(m_pRec));

    // <PRN>
    gfnHaniInit(AOwner,
                 m_Base_pRec,
                 MDataModule,
                 ComArea,
                 dbCorp_Select,
                 'JNTCRP009001',
                 uvHani,
                 uvSelSys);

    // 共通ｴｸｽﾌﾟﾛｰﾗの初期化<004>
    m_ExpOpenSW := FALSE;
    if ( fnJNTExpInit( Self,m_pRec ) = 0 ) then
        m_ExpOpenSW :=  TRUE
    else
		MjsMessageBox(AOwner,'ｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10 // <005>
					+ 'ｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);

{
	// ToolBarの位置
	ToolBar.Left         := B_Search.Left+B_Search.Width;
	MJSCompoResize(ToolBar,1,Pointer(m_pRec));
	ToolBar.ButtonHeight := ToolBar.Height;
}

    //--- <057> St -----
    // ↓↓↓Galileoptでは、ﾌﾘｰﾚｲｱｳﾄ帳票のｵﾌﾟｼｮﾝ採用有無を判断する必要なはなし
//    m_FreeLayout := False;

//    if ( IsSaiyo_FreeLayout(m_pRec) = True ) then
//        m_FreeLayout := True;

    m_FreeLayout := True;   // 常にON
    // 2006.12.05 中村様に確認済
    //--- <057> Ed -----

   	m_UpdAddKbnFlg := False;	// 実績集計区分 更新なし <083>

    // -----<077> Add-St-----
	SPMsHist.Connection := dbCorp_Select;
	//SPMsHist.SessionName  := dbCorp_Select.SessionName;

											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
		SPMsHistParent.Connection	:= m_SyncMaster.m_cPDBSelect;
		//SPMsHistParent.SessionName	:= m_SyncMaster.m_cPDBSelect.SessionName;
	end;
	// -----<077> Add-Ed-----

    // ｲﾍﾞﾝﾄOnCreateの最後に
	PostMessage(Self.Handle, WM_ONPAINT, 0, 0);

end;

//************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*							終了処理
//*		Event			:	OnClose
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.FormClose(Sender: TObject; var Action: TCloseAction);
var
	AppPrm			:	TAppParam;
	iLoop			:	Integer;
	wkRec			:	^TaikeiRec;
//	MasTreee2Dlgf	:	TJNTMasTreee2Dlgf;	// <100>DEL
//	iarMasterKbn 	:	Array of integer;	// <100>DEL
//	Dmpuery			:	TMQuery;			// <100>DEL
	DmqData			:	TMQuery;
//	sMessage		:	String;				// <SYNC> DEL
begin
	SessionPractice(C_ST_PROCESS);			// <077> ADD

// <100>DEL↓ FormCloseQueryへ移動
{
	fnTreeCheck();

	if ( gbKmkTree2Flag = TRUE ) then
	begin
		// 科目加算体系ﾏｽﾀ2を呼ぶ処理
   	    SetLength( iarMasterKbn, 1 );
        // 勘定科目(1)
  	  	iarMasterKbn[0] :=  1;

        // 工事管理種別がなしの時
		if ( giKoujiSyubetsu = 0 ) then
		begin
	   	    SetLength( iarMasterKbn, 1 );
            // 勘定科目(1)
    	  	iarMasterKbn[0] := 1;
		end
		else
		begin
	   	    SetLength( iarMasterKbn, 3 );
            // 勘定科目(1)
    	   	iarMasterKbn[0] := 1;
            // 工事合計(8)
       		iarMasterKbn[1] := 8;
            // 工事集計(9)
       		iarMasterKbn[2] := 9;
		end;

        // 加算更新処理
		MasTreee2Dlgf:= TJNTMasTreee2Dlgf.Create( Self );
		if MasTreee2Dlgf.ExecTree2(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot,
	       							MDataModule,
                                    ComArea.m_iCopNo,
                                    iarMasterKbn, Dmpuery ) < 0 then
		begin
			if (Dmpuery <> nil) then
			begin
				ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, Dmpuery );
                MjsMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                FALSE
                               );
				Dmpuery.Free;
			end
			else
			begin
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10,3);
				MjsMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                FALSE
                               );
			end;
       	end;

		MasTreee2Dlgf.Close();
		MasTreee2Dlgf.Free();

(*
	    // Tree2は呼ばない
		// ﾃｰﾌﾞﾙ更新履歴(KmkTree2時)
		if ( giKoujiSyubetsu = 0 ) then	//	工事管理種別がなしの時
			MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKTREE2,1,0,0);
		else
		begin
        	TblHistory(298,1,'KmkTree2');
			TblHistory(298,8,'KmkTree2');
			TblHistory(298,9,'KmkTree2');
		end;
*) //<!!!>
	end;

	gbKmkTree2Flag	:=	FALSE;


(*
//	ﾃｰﾌﾞﾙ更新履歴
	if (TableHistory.KmkMA_Kan = TABLE_IN_UPDATE) then		//	勘定科目基本ﾏｽﾀ(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKMA,1,0,0);

	if (TableHistory.KmkMA_Sai = TABLE_IN_UPDATE) then		//	勘定科目基本ﾏｽﾀ(細目科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKMA,2,0,0);

	if (TableHistory.KmkMB_Kan = TABLE_IN_UPDATE) then		//	勘定科目詳細情報(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKMB,1,0,0);

	if (TableHistory.KmkMB_KanDel = TABLE_DELETE) then		//	勘定科目詳細情報(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKMB,1,0,1);

	if (TableHistory.KmkMB_Sai = TABLE_IN_UPDATE) then		//	勘定科目詳細情報(細目科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKMB,2,0,0);

	if (TableHistory.KmkMB_SaiDel = TABLE_DELETE) then		//	勘定科目詳細情報(細目科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKMB,2,0,1);

    if (TableHistory.KmkTree_Kan = TABLE_IN_UPDATE) then	//	科目加算体系ﾏｽﾀ(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKTREE,1,0,0);

    if (TableHistory.KmkTree_KanDel = TABLE_DELETE) then	//	科目加算体系ﾏｽﾀ(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_KMKTREE,1,0,1);

	if (TableHistory.MFusenInfo_Kan = TABLE_IN_UPDATE) then	//	ﾏｽﾀ付箋管理情報(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_FUSENINFO,1,0,0);

	if (TableHistory.MFusenInfo_KanDel = TABLE_DELETE) then	//	ﾏｽﾀ付箋管理情報(勘定科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_FUSENINFO,1,0,1);

	if (TableHistory.MFusenInfo_Sai = TABLE_IN_UPDATE) then	//	ﾏｽﾀ付箋管理情報(細目科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_FUSENINFO,2,0,0);

	if (TableHistory.MFusenInfo_SaiDel = TABLE_DELETE) then	//	ﾏｽﾀ付箋管理情報(細目科目)
		MailHisUpdate(dbCorp_Select,MDataModule,TABLE_FUSENINFO,2,0,1);

*) // Mailに関しては保留<LEAD 2005.07.07>

	// 新規登録が行われた時
	if ( m_NewFlag = TRUE ) then
	begin

		ComArea.m_MsgStd.GetMsg(MjsMsgRec, 30,30);
   		MjsMessageBoxEx(AOwner, // <005>
                        MjsMsgRec.sMsg,
                        MjsMsgRec.sTitle,
                        MjsMsgRec.icontype,
                        MjsMsgRec.btntype,
                        MjsMsgRec.btndef,
                        MJsMsgRec.LogType
                       );
	end;
}
// <100>DEL↑

	// 合計の部門採用区分を更新
	fnBmnUseCheck();

	// 合計のｾｸﾞﾒﾝﾄ1～10採用区分を更新
    fnSegUseCheck();

    // ﾌﾟﾛｼﾞｪｸﾄも必要??

// <066> ADD start ﾏｽﾀ同期一括配信ﾀﾞｲｱﾛｸﾞ呼出
											// ｸﾞﾙｰﾌﾟ会計採用あり
    if m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE then
    begin

// <071> MOD start
//		if (giReferFlag <> REFER) and (m_SyncMaster.m_CEComKbn5 = 0) then
		if ((m_cJNTArea.IsAppend) or        // 追加権限あり
           (m_cJNTArea.IsModify) or         // 修正権限あり
           (m_cJNTArea.IsDelete)) and       // 削除権限あり
           (m_SyncMaster.m_CEComKbn5 = 0) and
           (m_SyncMaster.m_PEComKbn5 = 0) then	// 表示のみでなくて翌期更新済みでもない場合
// <071> MOD end
        begin
			CallSyncDlg();				   	// 配信ﾀﾞｲｱﾛｸﾞ呼出
        end;
    end;
// <066> ADD end

// <040>以下復帰↓
//(*
    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	DmqData.Close();
	DmqData.SQL.Clear();
	DmqData.SQL.Add(MakeSQL(m_EndInfoRec.TanFlag,FALSE));

	if ( m_EndInfoRec.TanFlag = TRUE ) then
	begin
		DmqData.ParamByName('TANCD')    .AsFloat  :=  m_EndInfoRec.TanCD;
	end;

	if ( DmqData.ExecSQL = FALSE ) then
	begin
// <SYNC> MOD start
(*		sMessage :=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage);
*)
		ErrorMessageDsp(DmqData);			// DBｴﾗｰﾒｯｾｰｼﾞ表示
// <SYNC> MOD end
	end;

	DmqData.Close();
	DmqData.Free();

//*) // ｽﾄｱﾄﾞﾌﾟﾛｼｼﾞｬに関しては現状対応はしません<LEAD 2005.07.07>
// <040>ここまで復帰↑

    m_SyncMaster.fnSyncTerm();				// <SYNC> ADD ｽﾄｱﾄﾞ終了処理呼出

	for iLoop := 1 to TreeView.Items.Count do
	begin
		wkRec   :=  TreeView.Items[iLoop - 1].Data;
		Dispose( wkRec );

		TreeView.Items[iLoop - 1].Data  :=  nil;
	end;


	// 排他情報ﾘｾｯﾄ
	if ( cExcept <> nil ) then
	begin
		cExcept.ResetTerm;
		cExcept.Free();
	end;

    // JNTCommonの解放
//    m_cJNTArea.Free();    <015>

	SessionPractice(C_ED_PROCESS);			// <077>

    // 会社DBｸﾛｰｽﾞ処理
	if ( dbCorp_Select <> nil ) then
	    MDataModule.COPDBClose(dbCorp_Select);

// <SYNC> ADD start
											// 自社が子会社だった場合
    if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
    begin									// 親会社DBのClose
        MDataModule.COPDBClose(m_SyncMaster.m_cPDBSelect);
    end;
// <SYNC> ADD end


    // 販売ｼｽﾃﾑ情報の開放   // <PRN>
    if ( uvSelSys <> nil ) then
    	uvSelSys.Free();

	Action	            :=	caFree;
	m_pRec^.m_iDelete	:=	1;
	AppPrm.iAction		:=	ACTID_FORMCLOSEEND;			//	呼出区分設定
	AppPrm.pRecord		:=	Pointer(m_pRec);			//	管理構造体ﾎﾟｲﾝﾀ設定
	AppPrm.pActionParam	:=	nil;						//	予備ﾎﾟｲﾝﾀ設定
	TMjsAppRecord(m_pRec^).m_pOwnerEntry(@AppPrm);

    // <099>ADD↓ FormCloseQueryから移動
    // 共通ｴｸｽﾌﾟﾛｰﾗの開放
    if ( m_ExpOpenSW = TRUE ) then
        fnJNTExpFree();
    // <099>ADD↑
end;

//************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*
//*		Event			:	OnShow
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.FormShow(Sender: TObject);
begin

	//	ｷｬﾌﾟｼｮﾝをｾｯﾄ
	JNTMasSetCaption(m_pRec);
	//	ｱｸｾﾗﾚｰﾀの不具合を回避する関数
	MJSBtnVisible(TJNTCRP009001f( Self ),TRUE);

	if ( m_MailKbn = 1 ) then
	begin
		B_Delete .Visible := FALSE;
		MI_Delete.Visible := FALSE;
	end;

    if ( uvHani.mjspre.IsPreView = TRUE ) then
		uvHani.mjspre.Show
	else
	begin
		if ( m_bFocusControl = TRUE ) then
		begin
			m_bFocusControl := FALSE;
			ACControl := MTab_SyousaiInfo;
		end;
		ACControl.SetFocus;
	end;

end;

//************************************************************************
//*		Component		:	OnEnter
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.OnEnter(Sender: TObject);
var
	wkRec	:	^TaikeiRec;
begin

	ACControl := Screen.ActiveControl;

	if ( gbDelBtnFlag = FALSE ) then
		B_Delete.Enabled :=	FALSE
	else
	begin
		//	参照時
//		if ( giReferFlag = REFER ) then	//	参照
//			exit;

// <SYNC> MOD start
//	    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
	end;

	if ( ACControl.Name = ECode.Name ) then
		gShiftTabFlag := FALSE;

	//	詳細ﾎﾞﾀﾝの使用可
	if ( ACControl.Name = TreeView.Name ) then
    begin
        PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
        PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
      	PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
      	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
   	    PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
       	PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

        if m_cJNTArea.IsFusen then
            ToolButton.ImageIndex	:=  m_FusenColorIdx
        else
            ToolButton.ImageIndex	:=  4;

   	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;

        if ( MComboBox.ItemIndex = 2 ) then	//	TreeVeiw時かつ損益時
    	begin
    		wkRec := TreeView.Selected.Data;
    		if ( wkRec <> nil ) then
    		begin
    			if ( wkRec.GCode = 0 ) then
    				B_Syousai.Enabled := FALSE
    			else
    				B_Syousai.Enabled := TRUE;
    		end
    		else
    			B_Syousai.Enabled := TRUE;
    	end
    	else
    		B_Syousai.Enabled := TRUE;
    end;

	//	詳細の連想
	if ( ACControl.Name = ERen.Name ) and ( MTab_Select.Items.Selected <> 1 ) and ( m_InpNewFlag = TRUE ) then
	begin
		//	科目ｺﾋﾟｰ
		StatusBar.SimpleText := 'F8 科目コピー';
		B_KmkCopy.Enabled := TRUE;
	end;

	// 検索ﾎﾞﾀﾝ使用可
	B_Search.Enabled := TRUE;

	// 出力順序登録ﾎﾞﾀﾝ使用可 <100>
	B_Order.Enabled := TRUE;
end;

//************************************************************************
//*		Component		:	MComboBox( TMComboBox )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MComboBox_Enter(Sender: TObject);
begin

	ACControl           :=  Screen.ActiveControl;
	B_Delete.Enabled    :=  FALSE;
	//	詳細ﾎﾞﾀﾝの使用不可
	B_Syousai.Enabled   :=  FALSE;
	B_Search.Enabled    :=  FALSE;	// 検索ﾎﾞﾀﾝ使用不可
	B_Order.Enabled		:=	FALSE;	// 出力順序登録ﾎﾞﾀﾝ使用不可 <100>
end;

//************************************************************************
//*		Component		:	ELName( TMTxtEdit )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ELNameEnter(Sender: TObject);
begin

	ACControl := Screen.ActiveControl;

	if ( gbDelBtnFlag = TRUE ) then
	begin
		//	参照時		
//		if ( giReferFlag = REFER ) then
//			exit;

// <SYNC> MOD start
//	    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
	end;

end;

//************************************************************************
//*		Component		:	DZitsuGrid( TdxDBGrid )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridEnter(Sender: TObject);
var
	iCode		:	Extended;
	TRec		:	^TaikeiRec;
	iLoop		:	Integer;
	bNodeType	:	Boolean;
begin

	//	詳細ﾎﾞﾀﾝの使用可
	B_Syousai.Enabled := TRUE;
	//	参照時
	if ( giReferFlag = REFER ) then Exit;

	ACControl := Screen.ActiveControl;

	TRec :=	TreeView.Selected.Data;
	if ( TRec.NCode = 0 ) then		//	損益科目時
	begin
		DZitsuGrid.Options := DZitsuGrid.Options - [egoCanAppend];
		if (DZitsuGrid.DataSource.DataSet.FieldByName('NCode').IsNull) then
		begin
		end
		else
		begin
		end;
    end
	else
	begin
		bNodeType := FALSE;
		//	加算減算で損益の固定科目の時は使用不可
		for iLoop := 0 to 15 do
		begin
			//	選択されている科目が特定科目と一致した時
			if ( SonekiArrayL1[iLoop].ConstNCode = TRec.NCode ) then
			begin
				if ( TRec.MasKbn = 1 ) and ( TRec.Kbn = 0 ) then
					bNodeType := TRUE;
				break;
			end
		end;

		if ( bNodeType = FALSE ) then
			DZitsuGrid.Options := DZitsuGrid.Options + [egoCanAppend] - [egoMultiSelect]
		else
			DZitsuGrid.Options := DZitsuGrid.Options - [egoCanAppend];

	end;

	if not ( DZitsuGrid.DataSource.DataSet.FieldByName('NCode').IsNull ) then	//	実在のｺｰﾄﾞがNullじゃない時
    begin
		iCode := DZitsuGrid.DataSource.DataSet.FieldByName('NCode').AsFloat;
		if ( JitsuzaiCheck(iCode) ) then			    //	実在に細目がついているかどうかのCheck
			B_Delete.Enabled :=	FALSE				    //	付いていたら削除ﾎﾞﾀﾝ使用不可
		else
        begin
//			B_Delete.Enabled :=	TRUE;				    //	付いていなかったら削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//	 	   	B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    	B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
        end;

        if ( B_Delete.Enabled = TRUE ) then			    //	削除ﾎﾞﾀﾝが使用可の時
        begin
			if ( KoteiKbnCheck(iCode,Zitsuzai) ) then	//	固定区分が固定かCheckして固定だったら
				B_Delete.Enabled :=	FALSE;			    //	削除ﾎﾞﾀﾝ使用不可
		end;
	end
	else
		B_Delete.Enabled :=	FALSE;					    //	削除ﾎﾞﾀﾝ使用不可

    if MemZitsu.State in [dsInsert] then
	begin
        ToolButton.ImageIndex	:=  4;
		ToolButton.Enabled      :=  FALSE;
	end
	else
	begin
        if ( MemZitsu.RecordCount <> 0 ) then
        begin
            PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
            PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
          	PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
          	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
       	    PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
           	PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

            if m_cJNTArea.IsFusen then
                ToolButton.ImageIndex	:=  m_FusenColorIdx
            else
                ToolButton.ImageIndex	:=  4;

       	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
        end
        else
        begin
            ToolButton.ImageIndex	:=  4;
    		ToolButton.Enabled      :=  FALSE;
        end;
	end;



end;

//************************************************************************
//*		Component		:	DSaimokuGrid( TdxDBGrid )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridEnter(Sender: TObject);
var
	iCode	        :	String;     // 細目外部ｺｰﾄﾞ(DBﾘﾝｸ用)
	iPos	        :	Integer;
	iNCode	        :	Extended;
	sCode	        :	String;
    iSyokuchiKbn    :   Integer;    // 諸口区分
begin
	//	詳細ﾎﾞﾀﾝの使用可
	B_Syousai.Enabled	:=	TRUE;
	//	参照時
	if ( giReferFlag = REFER ) then Exit;

	ACControl := Screen.ActiveControl;

	if ( DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').IsNull ) then			//	細目ｺｰﾄﾞがNullじゃない時
    begin
		B_Delete.Enabled        :=	FALSE;	//	削除ﾎﾞﾀﾝ使用不可
    end
	else
	begin
        // ｺｰﾄﾞ属性対応
		iCode :=    fnSaimokuSetAttr(1,
                                     DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString,
                                     wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);    //  細目外部ｺｰﾄﾞ

        //	先頭からSPACEまでの桁数COUNT
		iPos  := MJSHanPos(' ', MTab_N.BorderCaption);
        //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
		sCode := MJSHanCopy(MTab_N.BorderCaption, 1, iPos-1);




// <013>		if ( sCode <> '' ) then
        if ( sCode <> '0' ) then    // <013>
            fnSubNCodeCheck(StrToIntDef(sCode,0),iCode,iNCode,iSyokuchiKbn);

        // 諸口区分が1:諸口は削除できない
        if ( iSyokuchiKbn = 1 ) then
		begin
			// 諸口以外に科目別補助が存在しない時
			if ( Syokuchi(StrToInt(sCode),TRUE) = TRUE ) then
            begin
//				B_Delete.Enabled :=	TRUE	//	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//			    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
			    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
            end
			else
				B_Delete.Enabled :=	FALSE;	//	削除ﾎﾞﾀﾝ使用不可
		end
		else
        begin
//			B_Delete.Enabled :=	TRUE;	    //	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//		    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
		    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
        end;
	end;

    if MemSai.State in [dsInsert] then
	begin
        ToolButton.ImageIndex	:=  4;
		ToolButton.Enabled      :=  FALSE;
	end
	else
	begin
        if ( MemSai.RecordCount <> 0 ) then
        begin
            PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
            PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
      	    PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
          	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
   	        PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
       	    PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

            if m_cJNTArea.IsFusen then
                ToolButton.ImageIndex	:=  m_FusenColorIdx
            else
                ToolButton.ImageIndex	:=  4;

       	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
        end
        else
        begin
            ToolButton.ImageIndex	:=  4;
    		ToolButton.Enabled      :=  FALSE;
        end;
	end;

end;

//************************************************************************
//*		Component		:	DGoukeiGrid( TdxDBGrid )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridEnter(Sender: TObject);
var
	iCode		:	Extended;
	TRec		:	^TaikeiRec;
	iLoop		:	Integer;
	bNodeType	:	Boolean;
begin
	//	詳細ﾎﾞﾀﾝの使用可
	B_Syousai.Enabled	:=	TRUE;
	//	参照時
	if ( giReferFlag = REFER ) then
		Exit;

	ACControl := Screen.ActiveControl;

	TRec :=	TreeView.Selected.Data;
	if ( TRec.GCode = 0 ) then
	begin
		DGoukeiGrid.Options	:= DGoukeiGrid.Options - [egoCanAppend];
		if ( DZitsuGrid.DataSource.DataSet.FieldByName('Code').IsNull ) then
		begin
		end
		else
		begin
		end;
    end
	else
	begin
		bNodeType := FALSE;
		//	加算減算で損益の固定科目の時は使用不可
		for iLoop := 0 to 15 do
		begin
			//	選択されている科目が特定科目と一致した時
			if ( SonekiArrayL1[iLoop].ConstNCode = TRec.NCode ) then
			begin
				if ( TRec.MasKbn = 1 ) and ( TRec.Kbn = 0 ) then
					bNodeType := TRUE;
				break;
			end
		end;

		if ( bNodeType = FALSE ) then
			DGoukeiGrid.Options	:= DGoukeiGrid.Options + [egoCanAppend]
		else
			DGoukeiGrid.Options	:= DGoukeiGrid.Options - [egoCanAppend];
	end;

	if not ( DGoukeiGrid.DataSource.DataSet.FieldByName('NCode').IsNull ) then		//	合計ｺｰﾄﾞがNullじゃない時
    begin
		iCode := DGoukeiGrid.DataSource.DataSet.FieldByName('NCode').AsFloat;
		if ( JitsuzaiCheck(iCode) ) then				//	合計に子供がついているかCheck
			B_Delete.Enabled :=	FALSE				    //	削除ﾎﾞﾀﾝ使用不可
		else
        begin
//			B_Delete.Enabled :=	TRUE;				    //	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//		    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
		    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
        end;

        if ( B_Delete.Enabled = TRUE ) then				//	削除ﾎﾞﾀﾝが使用可の時
        begin
			if ( KoteiKbnCheck(iCode,Goukei) ) then		//	固定区分が固定かCheckして固定だったら
				B_Delete.Enabled :=	FALSE;			    //	削除ﾎﾞﾀﾝ使用不可
		end;
	end
	else
		B_Delete.Enabled :=	FALSE;					    //	削除ﾎﾞﾀﾝ使用不可

    if MemGou.State in [dsInsert] then
	begin
        ToolButton.ImageIndex	:=  4;
		ToolButton.Enabled      :=  FALSE;
	end
	else
	begin
        if ( MemGou.RecordCount <> 0 ) then
        begin
            PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
            PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
      	    PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
          	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
   	        PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
       	    PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

            if m_cJNTArea.IsFusen then
                ToolButton.ImageIndex	:=  m_FusenColorIdx
            else
                ToolButton.ImageIndex	:=  4;

       	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
        end
        else
        begin
            ToolButton.ImageIndex	:=  4;
    		ToolButton.Enabled      :=  FALSE;
        end;
	end;

end;

//************************************************************************
//*		Component		:	MTab_N( TMTab )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MTab_NEnter(Sender: TObject);
var
	wkRec	:	^TaikeiRec;
begin

	ACControl           :=  Screen.ActiveControl;
    //	削除ﾎﾞﾀﾝ使用不可
	B_Delete.Enabled    :=	FALSE;

	wkRec := TreeView.Selected.Data;
	if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) then
	begin
		MTab_N.Items[1].Enabled :=	FALSE;		//	細目のTab使用不可
		DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
	end;

	if ( MemGou.State in [dsInsert] ) then		//	新規登録時
		MemGou.Delete;
	if ( MemZitsu.State in [dsInsert] ) then    //	新規登録時
		MemZitsu.Delete;
	if ( MemSai.State in [dsInsert] ) then		//	新規登録時
		MemSai.Delete;

end;

//************************************************************************
//*		Component		:	B_Syousai ( TMSpeedButton )
//*							詳細と登録の表示切り替え
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_SyousaiClick(Sender: TObject);
var
	iG_Code		:	Integer;		//	外部ｺｰﾄﾞ
	iS_Code		:	String;		    //	細目ｺｰﾄﾞ
	iCode		:	String;
	cNode		:	TTreeNode;
	cNodeOya	:	TTreeNode;
	wkNode		:	TTreeNode;
	Pos			:	Integer;		//	SPASEまでの桁数
	iLoop		:	Integer;		//	ﾙｰﾌﾟｶｳﾝﾄ
	Name		:	String;			//	取得Code
	iMasKbn		:	Integer;		//	ﾏｽﾀｰ区分
	iJiGoKbn	:	integer;		//	実在／合計区分
	iGaibuCode	:	Integer;		//	外部ｺｰﾄﾞ
	iSaiCode	:	String;		    //	細目ｺｰﾄﾞ
	wkRec		:	^TaikeiRec;
	wkRecOya	:	^TaikeiRec;
	wkRecOya2	:	^TaikeiRec;
	iHantei		:	Integer;
	iSelectTab	:	Integer;		//	どのTabが選択されているか
	iCodeCheck	:	String;
	iWk			:	Integer;
	bFlag		:	Boolean;
//<053>
	SumKbn		:	Byte;
begin
	//	初期化処理
	iMasKbn		:=	0;
	iJiGoKbn	:=	0;
	iGaibuCode	:=	0;

    iG_Code     :=  0;
// <013>    iSaiCode    :=  '';
	iSaiCode    :=  '0';    // <013>
	iCode		:=	'0';
	iHantei		:=	0;
	iSelectTab	:=	0;
	wkRecOya	:=	nil;
	bFlag		:=	FALSE;

	if ( P_Grid.Visible = TRUE ) then	    //	Gridが表示されている時
	begin
		P_Grid.Visible	  := FALSE;			//	Gridを非表示
		P_Syousai.Visible := TRUE;			//	詳細を表示
		B_Syousai.Caption := '一覧(&T)';	//	ﾎﾞﾀﾝの表示名所変更
		//	詳細時に付箋のToolBtnを押しても付箋がついているかわからないので使用不可とする
		ToolButton.ImageIndex	:=  m_FusenColorIdx;
		ToolButton.Enabled      :=  TRUE;

//		if ( ACControl.Name = TreeView.Name ) then
		if ( ACControl.Name = TreeView.Name ) or ( ACControl.Name = MComboBox.Name ) then	// <081>
		begin
			if ( gwkRec.MasKbn = 2 ) then	//	細目科目の時
			begin
				iG_Code	:= gP_wkRec.GCode;	//	親ｺｰﾄﾞを外部ｺｰﾄﾞへ
				iS_Code	:= gwkRec.SubCode;
		    end
			else
			begin
				iG_Code	:= gwkRec.GCode;
// <013>				iS_Code	:= '';
				iS_Code	:= '0'; // <013>
			end;

            //	退避した外部ｺｰﾄﾞと細目ｺｰﾄﾞを比較
			if ( giTaihi_GCode <> iG_Code ) or ( giTaihi_SCode <> iS_Code ) or ( m_bSpaceAgain = TRUE ) then
			begin
				m_bSpaceAgain := FALSE;
				giTaihi_GCode := iG_Code;	//	外部ｺｰﾄﾞを退避
				giTaihi_SCode := iS_Code;	//	細目ｺｰﾄﾞを退避
				SelectDsp(gwkRec.MasKbn, gwkRec.Kbn, iG_Code, iS_Code);	//	選択した物を表示

				//	参照時
				if ( giReferFlag = REFER ) then
					Treeview.SetFocus
				else if (( giReferFlag = KAN_NO_HO_RE ) or ( giReferFlag = KAN_BA_HO_RE ))
																	and ( MTab_Select.Items.Selected = 1 ) then
					Treeview.SetFocus
				//	勘定科目(参照)/科目別補助(通常),勘定科目(参照)/科目別補助(基本)
				else if (( giReferFlag = KAN_RE_HO_NO ) or ( giReferFlag = KAN_RE_HO_BA ))
						and (( MTab_Select.Items.Selected = 0 ) or ( MTab_Select.Items.Selected = 2 )) then
					Treeview.SetFocus
				else
				begin
					if ( ECode.Enabled = TRUE ) then
						ECode.SetFocus;
				end;
			end;

			if ( iG_Code = 0 ) then	//	損益科目
			begin
				SyousaiInitialize(FALSE);
				EnabledSelect(4,0,0,0,0);
				Treeview.SetFocus;
				exit;
			end;

			//	参照時
			if ( giReferFlag = REFER ) then
				Treeview.SetFocus
			else if (( giReferFlag = KAN_NO_HO_RE ) or ( giReferFlag = KAN_BA_HO_RE ))
																and ( MTab_Select.Items.Selected = 1 ) then
				Treeview.SetFocus
			//	勘定科目(参照)/科目別補助(通常),勘定科目(参照)/科目別補助(基本)
			else if (( giReferFlag = KAN_RE_HO_NO ) or ( giReferFlag = KAN_RE_HO_BA ))
					and (( MTab_Select.Items.Selected = 0 ) or ( MTab_Select.Items.Selected = 2 )) then
				Treeview.SetFocus
			else
			begin
				if ( ECode.Enabled = TRUE ) then
					ECode.SetFocus;
			end;

			//--- <057> St -----
            if (gwkRec.MasKbn = 1) and (gwkRec.Kbn = 0) and (m_FreeLayout = True) then
            begin
                // 分析ｺｰﾄﾞﾁｪｯｸ
                if ( BunSekiCodeCheck(iG_Code) = True ) then
                begin
                    LSyousu     .Visible := True;
                    ESyousuten  .Visible := True;
                    LSyousuKeta .Visible := True;

                    // 集計単位区分非表示
                    if ( EAddUnit.Visible = False ) then
                    begin
                        LSyousu     .Left := 420; LSyousu    .Top := 164;
                        ESyousuten  .Left := 540; ESyousuten .Top := 162;
                        LSyousuKeta .Left := 564; LSyousuKeta.Top := 164;
                    end
                    else
                    begin
                        LSyousu     .Left := 420; LSyousu    .Top := 186;
                        ESyousuten  .Left := 540; ESyousuten .Top := 184;
                        LSyousuKeta .Left := 564; LSyousuKeta.Top := 186;
                    end;
				end;
            end
			else
			begin
                LSyousu     .Visible := False;
                ESyousuten  .Visible := False;
				LSyousuKeta .Visible := False;
            end;
            //--- HIS0128 Ed -----

			MTab_Select.BorderCaption := MTab_N.BorderCaption;
		end
		else if ( ACControl.Name = DGoukeiGrid.Name ) or ( ACControl.Name = DSaimokuGrid.Name ) or
								( ACControl.Name = DZitsuGrid.Name ) or ( ACControl.Name = MTab_N.Name ) then
		begin
			//	Gridから詳細を呼ばれた時
			case gbActiveFlag of
				0:	Exit;
				ZITSUZAI:	//	実在時
				begin
					iMasKbn		:=	1;		//	ﾏｽﾀ区分
					iJiGoKbn	:=	0;		//	実在/合計区分
					iGaibuCode	:=	DZitsuGrid.DataSource.DataSet.FieldByName('Code').AsInteger;	//	外部ｺｰﾄﾞ
// <013>					iSaiCode	:=	'';		//	細目ｺｰﾄﾞ
					iSaiCode	:=	'0';		    //	細目ｺｰﾄﾞ<013>
				end;
				SAIMOKU:	//	細目時
				begin
					for iLoop:=1 to 6 do
					begin
						Pos	:= MJSHanPos(' ', MTab_N.BorderCaption);			//	先頭からSPACEまでの桁数COUNT
						Name	:=	MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1);	//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
					end;
					iMasKbn		:=	2;		//	ﾏｽﾀ区分
					iJiGoKbn	:=	0;		//	実在/合計区分
					iGaibuCode	:=	StrToInt(Name);		//	外部ｺｰﾄﾞ
					if (DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').IsNull) then		//	細目ｺｰﾄﾞがNullじゃない時
						iSaiCode := '-1'
					else
						iSaiCode :=	DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString;	//	細目ｺｰﾄﾞ

				end;
				GOUKEI:		//	合計時
				begin
					iMasKbn		:=	1;		//	ﾏｽﾀ区分
					iJiGoKbn	:=	1;		//	実在/合計区分
					iGaibuCode	:=	DGoukeiGrid.DataSource.DataSet.FieldByName('GCode').AsInteger;	//	外部ｺｰﾄﾞ
// <013>					iSaiCode	:=	'';		//	細目ｺｰﾄﾞ
					iSaiCode	:=	'0';		    //	細目ｺｰﾄﾞ<013>
				end;
			end;

			//	Gridで選択されたNodeにﾌｫｰｶｽ移動
			if (gbActiveFlag = SAIMOKU) then
				iCodeCheck := iSaiCode
			else
				iCodeCheck := IntToStr(iGaibuCode);

			if ((gbActiveFlag = ZITSUZAI) or (gbActiveFlag = GOUKEI))
														and (iCodeCheck <> '0') then
			begin
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wkRec := TreeView.Items[iLoop].Data;
		   			if wkRec.GCode = StrToIntDef(iCodeCheck,0) then
					begin
	                    TreeView.Selected := TreeView.Items[iLoop];
						break;
		   	    	end;
		   		end;
			end
			else if (gbActiveFlag = SAIMOKU) and (iCodeCheck <> '-1') then
			begin
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wkRec := TreeView.Items[iLoop].Data;
					if wkRec.SubCode = iCodeCheck then
					begin
	        			if (gbActiveFlag = SAIMOKU) then		//	細目時
						begin
							cNodeOya := TreeView.Items[iLoop].Parent;
							if (cNodeOya <> nil) then
							begin
								wkRecOya := cNodeOya.Data;
								if (wkRecOya.GCode = iGaibuCode) then
								begin
			    	                TreeView.Selected := TreeView.Items[iLoop];
									break;
								end;
							end;
						end;
					end;
		   		end;
			end
			else if (gbActiveFlag = GOUKEI) then
			begin
				if (MTab_Select.Items[2].Enabled = FALSE) then	//	合計
					MTab_Select.Items[2].Enabled	:=	TRUE;
				MTab_Select.Items.Selected	:=	2;
				SyousaiInitialize(FALSE);
			end
			else if (gbActiveFlag = ZITSUZAI) then
				SyousaiInitialize(FALSE);

			if (giTaihi_GCode <> iG_Code) or (giTaihi_SCode <> iS_Code) then	//	退避した外部ｺｰﾄﾞと細目ｺｰﾄﾞを比較
			begin
				giTaihi_GCode := iGaibuCode;	//	外部ｺｰﾄﾞを退避
				giTaihi_SCode := iSaiCode;		//	細目ｺｰﾄﾞを退避
				SelectDsp(iMasKbn,iJiGoKbn,iGaibuCode,iSaiCode);
			end;

			//	参照時
			if (giReferFlag = REFER) or (giReferFlag = BASICONLY)then
				Treeview.SetFocus
			//	勘定科目(通常)/科目別補助(参照),勘定科目(基本)/科目別補助(参照)
			else if ((giReferFlag = KAN_NO_HO_RE) or (giReferFlag = KAN_BA_HO_RE))
																and (MTab_Select.Items.Selected = 1) then
				Treeview.SetFocus
			//	勘定科目(参照)/科目別補助(通常),勘定科目(参照)/科目別補助(基本)
			else if ((giReferFlag = KAN_RE_HO_NO) or (giReferFlag = KAN_RE_HO_BA))
					and ((MTab_Select.Items.Selected = 0) or (MTab_Select.Items.Selected = 2)) then
				Treeview.SetFocus
			else
			begin
				if (ECode.Enabled = TRUE) then
					ECode.SetFocus;
			end;

            //--- <057> St -----
			if (gbActiveFlag = ZITSUZAI) and (m_FreeLayout = True) then
            begin
                if ( BunSekiCodeCheck(iGaibuCode) = True ) then
                begin
                    LSyousu     .Visible := True;
                    ESyousuten  .Visible := True;
                    LSyousuKeta .Visible := True;

                    // 集計単位区分非表示
                    if ( EAddUnit.Visible = False ) then
                    begin
                        LSyousu     .Left := 420; LSyousu    .Top := 164;
                        ESyousuten  .Left := 540; ESyousuten .Top := 162;
                        LSyousuKeta .Left := 564; LSyousuKeta.Top := 164;
                    end
                    else
                    begin
                        LSyousu     .Left := 420; LSyousu    .Top := 186;
                        ESyousuten  .Left := 540; ESyousuten .Top := 184;
                        LSyousuKeta .Left := 564; LSyousuKeta.Top := 186;
                    end;
                end;
            end
			else
            begin
				LSyousu     .Visible := False;
				ESyousuten  .Visible := False;
                LSyousuKeta .Visible := False;
            end;
			//--- <057> Ed -----

			MTab_Select.BorderCaption := MTab_N.BorderCaption;
		end;
        // <034>↓
		//	一覧の細目のTabが使用不可の時
		if (MTab_N.Items[1].Enabled = FALSE) then
			MTab_Select.Items[1].Enabled	:=	FALSE   // 詳細側も使用不可にする
		else
			MTab_Select.Items[1].Enabled	:=	TRUE;
        // <034>↑
	end
	else	//	詳細が表示されている時
	begin
		cNode	:=	TreeView.Selected;
		if cNode <> nil then
		begin
			GridAgainDsp(SYOUSAI,0);		//	Gridの再表示処理
			wkRec	:=	cNode.Data;
            if ( wkRec.MasKbn = 1 ) then
    			    iCode	:=	IntToStr(wkRec.GCode)
            else    iCode   :=  wkRec.SubCode;

			if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then		    //	実在時
			begin
				if (MComboBox.ItemIndex = 2) then
                begin
					cNodeOya	:=	cNode.Parent;
					if (cNodeOya <> nil) then
					begin
						wkRecOya	:=	cNodeOya.Data;
//<053>-- start ---
// <078> ↓↓↓
//						if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
						if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SumKbn)) then
// <078> ↑↑↑
						begin
							if	(wkRecOya.NCode = 0)	and	((wkRecOya.NCode <> (GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn)))	or
								(wkRecOya.NCode <> (GetKmkInfo(KANENDO,1,SumKbn)))	or	(wkRecOya.NCode <> (GetKmkInfo(MOKUTEKI,1,SumKbn)))		or
								(wkRecOya.NCode <> (GetKmkInfo(TYUKAN,1,SumKbn)))	or	(wkRecOya.NCode <> (GetKmkInfo(RIEKIZYUNBI,1,SumKbn))))	then
							begin
								gbChangeFlg	:=	True;	//	表示のみなのでPostのｲﾍﾞﾝﾄで更新等をしなようにしている
								fnMakeDsp();
								gbChangeFlg	:=	False;
							end
							else if	((wkRecOya.NCode = (GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn)))	or
									(wkRecOya.NCode = (GetKmkInfo(KANENDO,1,SumKbn)))	or	(wkRecOya.NCode = (GetKmkInfo(MOKUTEKI,1,SumKbn)))		or
									(wkRecOya.NCode = (GetKmkInfo(TYUKAN,1,SumKbn)))		or	(wkRecOya.NCode = (GetKmkInfo(RIEKIZYUNBI,1,SumKbn))))	then
							begin
								LevelDsp(wkRec.NCode,True);
							end
							else
								LevelDsp(wkRec.NCode,True);			//	実在時同一ﾚﾍﾞﾙ表示処理		HIS0046
						end
						else
						begin
//<053>--- end ----

						    if (wkRecOya.GCode = 0) then
						    begin
							    gbChangeFlg	:=	TRUE;	                //	表示のみなのでPostのｲﾍﾞﾝﾄで更新等をしなようにしている
							    fnMakeDsp();
							    gbChangeFlg	:=	FALSE;
						    end
						    else
							    LevelDsp(wkRec.NCode,TRUE);  //	実在時同一ﾚﾍﾞﾙ表示処理
                        end;    //<053>
					end
					else
						HagureCheck();							    //	実在時同一ﾚﾍﾞﾙ表示処理
				end
				else
				begin
					cNodeOya	:=	cNode.Parent;
					if (cNodeOya <> nil) then
					begin
						wkRecOya	:=	cNodeOya.Data;
						LevelDsp(wkRec.NCode,TRUE);		//	実在時同一ﾚﾍﾞﾙ表示処理
					end
					else
						HagureCheck();
				end;

				iHantei	:=	ZITSUZAI;
			end
			else if (wkRec.MasKbn = 2) and (wkRec.Kbn = 0) then	//	細目時
			begin
				cNodeOya	:=	cNode.Parent;
				if (cNodeOya = nil) then
				begin
					showmessage('科目別補助の親が不明･･･01');
					exit;	//	細目選択時で親がnilの時はﾄﾗﾌﾞﾙ発生と思われる
				end;
				wkRecOya	:=	cNodeOya.Data;
				LevelDspSaimoku(wkRecOya.NCode);		//	細目時同一ﾚﾍﾞﾙ表示処理
				iHantei		:=	SAIMOKU;
			end
			else if (wkRec.MasKbn = 1) and (wkRec.Kbn = 1) then	//	合計時
			begin
				if (wkRec.GCode = 0) then
					bFlag	:=	TRUE;
				iHantei		:=	GOUKEI;
			end;

			giKamoku :=	iHantei;	//hiro0705

			//	ｺｰﾄﾞが空時のﾌｫｰｶｽ移動の処理
			iSelectTab	:=	MTab_Select.Items.Selected;
			if (iSelectTab <> 1) then	//	選択されているTabが細目以外
			begin
				if (Trim(ECode.Text) = '') then
					m_bSpaceCode := TRUE;										//hiro0709
			end
			else begin	//	細目時
				if ( Trim(ECode.Text) = ''   ) then
				begin
					m_bSpaceCode  := TRUE;										//hiro0709
					m_bSpaceAgain := TRUE;
				end;
			end;

			cNode.Selected := TRUE;

			gbDspFlag := True;	//<087> TreeViewChangeｲﾍﾞﾝﾄを通さない
			TreeView.SetFocus;
			gbDspFlag := False;	//<087>
		end;

		P_Grid.Visible		:=	TRUE;		//	Gridを表示
		P_Syousai.Visible	:=	FALSE;		//	詳細を非表示
		B_Syousai.Caption	:=	'詳細(&T)';

		if (MTab_Select.Items.Selected <> 2) then	//	選択されているTabが合計以外
			MoveGridRecordSelecter(iHantei,iCode);

		//	詳細の細目のTabが使用不可の時			HIS0019
		if (MTab_Select.Items[1].Enabled = FALSE) then
			MTab_N.Items[1].Enabled	:=	FALSE			//	Grid側も使用不可にする
		else
			MTab_N.Items[1].Enabled	:=	TRUE;

		//	ToolBtnの使用可・不可制御
		if (iHantei = SAIMOKU) then
			fnToolBtnUseCheck(KMK_HOJYO)
		else
			fnToolBtnUseCheck(KMK);
	end;

end;

//************************************************************************
//*		Component		:	B_Change ( TMSpeedButton )
//*							切り出し・埋め込み
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_ChangeClick(Sender: TObject);
var
	AppPrm	:	TAppParam;
begin
	if (P_Grid.Visible = FALSE) and (MTab_SyousaiInfo.Items[1].Selected	= TRUE) then
		m_bFocusControl := TRUE;

	giChangeFlag	:=	TRUE;
	Hide;

    if  (Parent = Nil) then
    begin
		gbDspFlag	:=	TRUE;	//	TreeViewのChangeｲﾍﾞﾝﾄに入らない為のﾌﾗｸﾞ

		AppPrm.iAction		:=	ACTID_DOCKINGINEND;			//	格納通知
		AppPrm.pRecord		:=	Pointer(m_pRec);			//	管理構造体ﾎﾟｲﾝﾀ設定
		AppPrm.pActionParam	:=	nil;						//	予備ﾎﾟｲﾝﾀ設定
		TMjsAppRecord(m_pRec^).m_pOwnerEntry(@AppPrm);

	    Parent      := TMPanel (m_pRec^.m_pOwnerPanel^);
    	Align       := alClient;
        BorderStyle := bsNone;
        Position    := poDesigned;

        B_Change.Caption  := '切出(&G)';
    end
    else
    begin
		gbDspFlag	:=	TRUE;	//	TreeViewのChangeｲﾍﾞﾝﾄに入らない為のﾌﾗｸﾞ

		AppPrm.iAction		:=	ACTID_DOCKINGOUTEND;		//	取出通知
		AppPrm.pRecord		:=	Pointer(m_pRec);			//	管理構造体ﾎﾟｲﾝﾀ設定
		AppPrm.pActionParam	:=	nil;						//	予備ﾎﾟｲﾝﾀ設定
		TMjsAppRecord(m_pRec^).m_pOwnerEntry(@AppPrm);

		Visible		:=	FALSE;
		Parent		:=	Nil;
		Align		:=	alNone;
		BorderStyle	:=	bsSizeable;
		Position	:=	poDefaultPosOnly;
		MJSCompoResize(Parent,0,Pointer(m_pRec));

        B_Change.Caption  := '埋込(&G)';
    end;

    Show;

	giChangeFlag	:=	FALSE;
end;



//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							変わった時
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.TreeViewChange(Sender: TObject; Node: TTreeNode);
var
	cNode		:	TTreeNode;		//	選択されているNode
	cP_Node		:	TTreeNode;		//	選択されているNodeの親
	DelNode		:	TTreeNode;		//	Delete時に使用する選択されているNode
	wkRec		:	^TaikeiRec;		//	選択されているNodeの構造体
	wkP_Rec		:	^TaikeiRec;		//	選択されているNodeの親の構造体
	DelRec		:	^TaikeiRec;		//	Delete時に使用する選択されているNodeの構造体
	DmqTree		:	TMQuery;
	DmqDsp		:	TMQuery;
	iCode		:	String;		    //	ﾂﾘｰで選択された外部ｺｰﾄﾞ
	iNCode		:	Extended;		//	ﾂﾘｰで選択された内部ｺｰﾄﾞ
	iKasanMoto	:	Extended;		//	加算元外部ｺｰﾄﾞ
	iFusenKbn	:	Integer;		//	付箋区分
	iG_Code		:	Integer;		//	外部ｺｰﾄﾞ
	iS_Code		:	String;		    //	細目ｺｰﾄﾞ
	iWork		:	Integer;		//	関数分析名称取得処理の３番目の引数(ﾀﾞﾐｰ)
	iHantei		:	Integer;		//	GridのTABのActiveにする制御
	iMasKbn		:	Integer;		//	ﾏｽﾀ区分
	iSumKbn		:	Integer;		//	実在/合計区分
	iGCode		:	Integer;		//	外部ｺｰﾄﾞ
	iKamokuNCode:	Extended;		//	親の内部ｺｰﾄﾞ
	iKamokuCode	:	Integer;		//	親の外部ｺｰﾄﾞ
	iMasterKbn	:	Integer;
	sWork		:	String;			//	装飾済みの科目名
	sName		:	String;			//	簡略名称
	sCmnt		:	String;
	bNilFlag	:	Boolean;		//	選択されているNodeの親がNilかどうかの判定Flag
	bHantei		:	Boolean;
	bKoteiFlag	:	Boolean;
	bMemCloseFlag:	Boolean;
	iMaster		:	Integer;
	iNCode2     :   Extended;
//<053>
	iLoop		:	Integer;
	iflg		:	Integer;
	Dummy		:	Byte;						//	ﾀﾞﾐｰ
begin

	//	初期化処理
	wkP_Rec		    :=	nil;
	bNilFlag	    :=	FALSE;
	bKoteiFlag	    :=	FALSE;
	bMemCloseFlag :=	FALSE;
	iHantei		    :=  	0;

    iNCode2         := 0;
    iGCode          := 0;
    iMasKbn         := 0;
    iSumKbn         := 0;
    iKamokuNCode    := 0;
//<053>
	iflg		:=	0;


	if ( gbDspFlag = TRUE ) then				//	切出・埋込時にTreeViewのｲﾍﾞﾝﾄに入らない為の制御
    begin
		gbDspFlag	:=	FALSE;
		Exit;
	end;

	if ( TreeView.Selected.Data = nil ) then
		Exit;

	if ( TreeView.Selected = nil ) then
		Exit;

	cNode		:=	TreeView.Selected;		//	選択されているNode
	wkRec		:=	cNode.Data;				//	NodeDataを体系へ
	gwkRec		:=	cNode.Data;				//	TreeClick時に詳細押された時使用
	iNCode		:=	wkRec.NCode;			//	内部ｺｰﾄﾞを取得

    if ( iNCode <> 0 ) then
    begin
        PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
        PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
      	PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
      	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
   	    PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
       	PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

		if m_cJNTArea.IsFusen then
            ToolButton.ImageIndex	:=  m_FusenColorIdx
        else
			ToolButton.ImageIndex	:=  4;

		ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
    end
    else
    begin
		ToolButton.ImageIndex	:=  4;
        ToolButton.Enabled      :=  FALSE;
	end;

    //	外部ｺｰﾄﾞを取得
	if ( wkRec.MasKbn = 1 ) then
			iCode	:=	IntToStr(wkRec.GCode)
    else    iCode   :=  wkRec.SubCode;

	iMasterKbn	:=	wkRec.MasKbn;

    //	削除ﾎﾞﾀﾝの制御
	DelNode	    :=  TreeView.Selected;

	gbDelBtnFlag    :=	TRUE;
	DelRec          :=  DelNode.Data;

	//	参照以外
	if ( giReferFlag <> REFER ) then
	begin
		//	実在時に細目があった時は削除を使用不可
		if ( TreeView.Selected.Count <> 0 ) then	//	選択されたNODEに子供があるかないかﾁｪｯｸ
		begin
			B_Delete.Enabled	:=	FALSE;		    //	削除ﾎﾞﾀﾝの使用不可
			gbDelBtnFlag		:=	FALSE;
		end
		else
        begin
//			B_Delete.Enabled	:=	TRUE;		//	削除ﾎﾞﾀﾝの使用可
// <SYNC> MOD start
//	    	B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    	B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
        end;

		//	削除ﾎﾞﾀﾝの制御
		if ( DelRec.KoteiKbn > 0 ) and ( B_Delete.Enabled = TRUE ) then	//	固定区分が0以外で削除ﾎﾞﾀﾝが使用可の時
		begin
			B_Delete.Enabled	:=	FALSE;		//	削除ﾎﾞﾀﾝ使用不可
			gbDelBtnFlag		:=	FALSE;
		end;

		//	諸口は削除できない
		if ( wkRec.MasKbn = 2 ) and ( wkRec.Syokuchi = 1 ) then
		begin
			wkP_Rec := cNode.Parent.Data;										// HIS0119
			// 諸口以外に科目別補助が存在しない時
			if Syokuchi(wkP_Rec.GCode,TRUE) = TRUE then							// HIS0119
            begin
//				B_Delete.Enabled :=	TRUE		    //	削除ﾎﾞﾀﾝの使用可
// <SYNC> MOD start
//	 			B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    		B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
            end
			else
			begin
				B_Delete.Enabled	:=	FALSE;		//	削除ﾎﾞﾀﾝ使用不可
				gbDelBtnFlag		:=	FALSE;
			end;
		end;

		//	ToolBtnの使用可・不可制御
		//	Gridが表示されている時
		if (P_Grid.Visible = TRUE) then
		begin
			//	細目の時
			if (iMasterKbn = 2) then
				fnToolBtnUseCheck(KMK_HOJYO)
			//	実在・合計時
			else
				fnToolBtnUseCheck(KMK);
		end;
	end;

	if (wkRec.MasKbn = 1) and (wkRec.Kbn = 1) then			//	合計科目時細目のTagを使用不可
		iHantei	:=	GOUKEI
	else if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then		//	実在科目時合計のTagを使用不可
		iHantei	:=	ZITSUZAI
	else if (wkRec.MasKbn = 2) and (wkRec.Kbn = 0) then		//	細目科目時合計・実在のTagを使用不可
		iHantei	:=	SAIMOKU
	else if (wkRec.MasKbn = 8) and (wkRec.Kbn = 1) then		//	工事合計時
		iHantei	:=	GOUKEI;

	if wkRec.KoteiKbn in [0,1] then
	begin
		case iHantei of
			GOUKEI:		//	合計時
			begin
				MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
				DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
				MTab_N.Items[0].Enabled	:=	TRUE;		//	実在のTab使用可
				DZitsuGrid.Enabled		:=	TRUE;		//	実在のGrid使用可
				MTab_N.Items[2].Enabled	:=	TRUE;		//	合計のTab使用可
				DGoukeiGrid.Enabled		:=	TRUE;		//	合計のGrid使用可
				if (MTab_N.Items.Selected = 1) {or (MComboBox.ItemIndex = 4)} then	//	細目のTabがActiveの時又は工事科目時は実在へ
				begin
					gbFlag	:=	FALSE;
					if (giChangeFlag = FALSE) then	//hiro0703
						MTab_N.Items.Selected	:=	0;		//	実在科目Gridへ
				end;
			end;
			ZITSUZAI:	//	実在時
			begin
				MTab_N.Items[2].Enabled	:=	TRUE;		//	合計のTab使用可
				DGoukeiGrid.Enabled		:=	TRUE;		//	合計のGrid使用可
				//	選択されたｺｰﾄﾞが複合科目かﾁｪｯｸ		HIS0007
				if (FukuKmkCheck(wkRec.NCode)) then
				begin
					MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
					DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
				end
				else
				begin
					//	選択されたｺｰﾄﾞが工事を採用されているかCheck
					if (KoujiAdoptCheck(wkRec.NCode)) and (gMasInfoUseKbn.Koj <> 0) then		//HIS0083
					begin
						MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
						DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
					end
					//	いくつ補助が採用されているかチェック	HIS0008
					else if (MAXADOPTCOUNT > AdoptCountCheck(wkRec.NCode,DATABASE)) then
					begin
						MTab_N.Items[1].Enabled	:=	TRUE;		//	細目のTab使用可
						DSaimokuGrid.Enabled	:=	TRUE;		//	細目のGrid使用可
					end
					else
					begin
						bHantei	:=	FALSE;
						MDataModule.BeginTran (dbCorp_Select);					//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
						if (KbnCheck(wkRec.NCode,bHantei,TRUE,OTHER))then	    //	RollBackが行われたらTRUEが返ってくる
							Exit;
						MDataModule.Commit (dbCorp_Select);						//	ｺﾐｯﾄ(反映)

						if (bHantei) then
						begin
							MTab_N.Items[1].Enabled	:=	TRUE;		//	細目のTab使用可
							DSaimokuGrid.Enabled	:=	TRUE;		//	細目のGrid使用可
						end
						else begin
							MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
							DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
						end;
					end;
				end;
				MTab_N.Items[0].Enabled	:=	TRUE;		//	実在のTab使用可
				DZitsuGrid.Enabled		:=	TRUE;		//	実在のGrid使用可
				if (MTab_N.Items.Selected = 2) or (MTab_N.Items.Selected = 1) then	//	細目のTab、合計のTabがActiveの時
				begin
					gbFlag	:=	FALSE;
					if (giChangeFlag = FALSE) then	//hiro0703(切出を押された時Tabを変えてしまって表示がおかしくなってしまう為切出時はTabの制御をさせない)
						MTab_N.Items.Selected	:=	0;		//	実在科目Gridへ
				end;
				gbFlag	:=	TRUE;
			end;
			SAIMOKU:	//	細目時
			begin
				MTab_N.Items[0].Enabled	:=	FALSE;		//	実在のTab使用不可
				DZitsuGrid.Enabled		:=	FALSE;		//	実在のGrid使用不可
				MTab_N.Items[2].Enabled	:=	FALSE;		//	合計のTab使用不可
				DGoukeiGrid.Enabled		:=	FALSE;		//	合計のGrid使用不可
				MTab_N.Items[1].Enabled	:=	TRUE;		//	細目のTab使用可
				DSaimokuGrid.Enabled	:=	TRUE;		//	細目のGrid使用可
				if (MTab_N.Items.Selected = 0) or (MTab_N.Items.Selected = 2) then	//	実在のTab、合計のTabがActiveの時
				begin
					gbFlag	:=	FALSE;
					if (giChangeFlag = FALSE) then	//hiro0703
						MTab_N.Items.Selected	:=	1;		//	細目科目Gridへ
				end;

				// 一応細目科目の属性と桁数を取得する
                fnGetCodeAttr(wkRec.NCode,wkKmk.SaimokukZoku,wkKmk.SaimokuKeta);
			end;
		end;
	end
	else	//	固定区分が｢2｣｢3｣の時下位層は作れない
	begin
		MTab_N.Items[0].Enabled	:=	FALSE;		//	実在のTab使用不可
		DZitsuGrid.Enabled		:=	FALSE;		//	実在のGrid使用不可
		MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
		DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
		MTab_N.Items[2].Enabled	:=	FALSE;		//	合計のTab使用不可
		DGoukeiGrid.Enabled		:=	FALSE;		//	合計のGrid使用不可
	end;

	// 選択されたものが科目別補助の時
	if iHantei = SAIMOKU then
		grDelTaikei	:= cNode.Parent.Data		//	削除時に使用する
	else
		grDelTaikei	:= cNode.Data;					//	削除時に使用する

	cP_Node	:=	cNode.Parent;
	if (cP_Node <> nil) then					//	親Nodeがnilかどうかﾁｪｯｸ
	begin
		wkP_Rec		 :=	cP_Node.Data;
		gP_wkRec	 :=	cP_Node.Data;			//	TreeClick時に詳細押された時使用
		iKamokuCode	 :=	wkP_Rec.GCode;
	end
	else
	begin
		bNilFlag	 :=	TRUE;
//		iKamokuCode	 :=	9999999;				//	あり得ない数字を代入
		iKamokuCode	 :=	-1;						//	あり得ない数字を代入 <086>
	end;

	if ( MComboBox.ItemIndex <> 4 ) then	//	工事時はMemDataをｸﾘｱしない。
	begin
		//	退避ｺｰﾄﾞと選択ｺｰﾄﾞが一致の時はExit　
		if (giG_Code = iCode) and (giMasKbn = iMasterKbn) and (giTaihi_OyaCode = iKamokuCode)then
			EXIT

		//<084>↓
		else if m_GridChgFlg then
		begin
			TreeViewChange_Sub;		// 科目別補助グリッドのみ再表示
			Exit;
		end
		//<084>↑

		else	//	MemDataのｸﾘｱ
		begin
			if ( iHantei = giKamoku ) and ( iHantei = 1 ) then
			begin
				MemGou.Close;
				MemZitsu.Close;
				bMemCloseFlag := TRUE;
			end;

			if ( iKamokuCode <> giTaihi_OyaCode ) or ( iHantei = GOUKEI ) then
			begin
				MemGou.Close;
				MemZitsu.Close;
				MemSai.Close;
				bMemCloseFlag := TRUE;
			end;

			if ( MComboBox.ItemIndex = 2 ) and ( iHantei <> giKamoku ) then
			begin
				MemGou.Close;
				MemZitsu.Close;
				MemSai.Close;
				bMemCloseFlag := TRUE;
			end;
		end;
	end;

	if bNilFlag = FALSE then	//	選択されているNodeの親がNilじゃない時
	begin
		//	選択された科目ｺｰﾄﾞ･装飾･簡略名称を表示
		if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) then	//	合計時
		begin
			iMasKbn	:=	wkRec.MasKbn;		    //	ﾏｽﾀ区分
			iSumKbn	:=	wkRec.Kbn;			    //	実在/合計区分
			iGCode	:=	wkRec.GCode;	        //	ｺｰﾄﾞ
			iNCode2 :=  wkRec.NCode;            //  内部ｺｰﾄﾞ
			sName	:=	wkRec.Name;			    //	簡略名称
			iKamokuNCode := wkRec.NCode;
		end
		else
		begin
			iMasKbn	:=	wkP_Rec^.MasKbn;	        //	ﾏｽﾀ区分
			iSumKbn	:=	wkP_Rec^.Kbn;		        //	実在/合計区分
			iGCode	:=	wkP_Rec^.GCode;	            //	ｺｰﾄﾞ
			iNCode2 :=  wkP_Rec^.NCode;             //  内部ｺｰﾄﾞ
			sName	:=	wkP_Rec^.Name;		        //	簡略名称
			iKamokuNCode := wkP_Rec^.NCode;
		end;
	end
	else	//	親がNilの時
	begin
		if ( wkRec.Kbn = 1 ) then		//	合計時
		begin
			iMasKbn	:=	wkRec.MasKbn;			//	ﾏｽﾀ区分
			iSumKbn	:=	wkRec.Kbn;				//	実在/合計区分
			iGCode	:=	wkRec.GCode;		   	//	ｺｰﾄﾞ
			iNCode2 :=  wkRec.NCode;            //  内部ｺｰﾄﾞ
			sName	:=	wkRec.Name;				//	簡略名称
			iKamokuNCode := wkRec.NCode;
		end;
	end;

	DmqDsp := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDsp );		//	DBとMQueryの接続

	//	損益科目時はﾃﾞﾌｫﾙﾄｾｯﾄ
	if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) and ( wkRec.GCode = 0 ) then
	begin
		if ( MComboBox.ItemIndex = 2 ) then
		begin
			MTab_N.BorderCaption	  := '【損益科目】';
			MTab_Select.BorderCaption := '【損益科目】';
			bKoteiFlag := TRUE;
			gsBorderCaption := MTab_N.BorderCaption;
            giTaihi_OyaNCodeSv := giTaihi_OyaNCode;
			//損益科目Click時詳細ﾎﾞﾀﾝを使用不可にする
			B_Syousai.Enabled := FALSE;
		end;
	end
	else if ( MComboBox.ItemIndex = 2 ) and ( iGCode = 0 ) then
	begin
		MTab_N.BorderCaption		:=	'【損益科目】';
		MTab_Select.BorderCaption	:=	'【損益科目】';
		bKoteiFlag	:=	TRUE;
		gsBorderCaption := MTab_N.BorderCaption;
        giTaihi_OyaNCodeSv := giTaihi_OyaNCode;
		if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
			B_Syousai.Enabled := TRUE
		else
			B_Syousai.Enabled := FALSE;		//損益科目Click時詳細ﾎﾞﾀﾝを使用不可にする
	end
	else
	begin
//損益科目Click時詳細ﾎﾞﾀﾝを使用不可にする
		B_Syousai.Enabled := TRUE;

		//	TabBorder名称表示処理
		with DmqDsp do
		begin
			Close();
			SQL.Clear;
            SQL.Add('SELECT                     ');
			SQL.Add('   DecoKbn                 '); //	装飾区分
            SQL.Add('FROM KmkMB                 '); //	勘定科目詳細情報
            SQL.Add('WHERE MasterKbn = :MasKbn  '); //	ﾏｽﾀ区分
            SQL.Add('  AND SumKbn    = :Sum     '); //	実在/合計区分
            SQL.Add('  AND NCode  = :Code       '); //	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode  = 0          '); //	細目内部ｺｰﾄﾞ

			ParamByName('MasKbn').AsInteger	:=	iMasKbn;		//	ﾏｽﾀ区分
			ParamByName('Sum'	).AsInteger :=	iSumKbn;		//	実在/合計区分
			ParamByName('Code'	).AsFloat   :=	iNCode2;		//	内部ｺｰﾄﾞ
			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDsp);
				DmqDsp.Close;
				DmqDsp.Free;
        	    Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				sWork	:=	GetSousyoku(sName,(GetFld('DecoKbn').AsInteger));	//	装飾済みの科目名取得
				MTab_N.BorderCaption		:=	IntToStr(iGCode) + ' ' + sWork;	//	GridのBorderCaption表示内容作成(ｺｰﾄﾞ+''＋名称)
				MTab_Select.BorderCaption	:=	IntToStr(iGCode) + ' ' + sWork;	//	詳細のBorderCaption表示内容作成(ｺｰﾄﾞ+''＋名称)
				gsBorderCaption := MTab_N.BorderCaption;
                giTaihi_OyaNCode := iKamokuNCode;
				giTaihi_OyaNCodeSv := giTaihi_OyaNCode;
			end
			else
			begin
				MTab_N.BorderCaption		:=	'';								//	GridのBorderCaption表示
				MTab_Select.BorderCaption	:=	'';								//	詳細のBorderCaption表示
				gsBorderCaption := MTab_N.BorderCaption;
                giTaihi_OyaNCode := 0;
				giTaihi_OyaNCodeSv := giTaihi_OyaNCode;
			end;
		end;
		DmqDsp.Close;

		gbBorderFlag	:=	FALSE;	//hiro0705
	end;

	//	詳細画面表示時
	if ( P_Syousai.Visible = TRUE ) then	//	詳細画面表示時表示内容も変更
	begin
		EBankCodeN.InputFlag	:=	TRUE;
		if ( wkRec.MasKbn = 2 ) then		//	細目科目の時
		begin
			iG_Code	:=	wkP_Rec.GCode;	//	親のｺｰﾄﾞ取得
			iS_Code	:=	wkRec.SubCode;	//	細目のｺｰﾄﾞ
			if ( giTaihi_OyaCode <> iKamokuCode )then
				giTaihi_OyaCode	 :=	iKamokuCode;

	    end
		else
		begin
			iG_Code	:=	wkRec.GCode;		//	外部ｺｰﾄﾞ
// <013>			iS_Code	:=	'';				    //	細目ｺｰﾄﾞ
			iS_Code	:=	'0';				//	細目ｺｰﾄﾞ<013>
		end;

        //--- <057> St -----
        if (gwkRec.MasKbn = 1) and (gwkRec.Kbn = 0) and (m_FreeLayout = True) then
        begin
			if ( BunSekiCodeCheck(iG_Code) = True ) then
			begin
				LSyousu     .Visible := True;
                ESyousuten  .Visible := True;
                LSyousuKeta .Visible := True;

				// 集計単位区分非表示
                if ( EAddUnit.Visible = False ) then
				begin
                    LSyousu     .Left := 420; LSyousu    .Top := 164;
                    ESyousuten  .Left := 540; ESyousuten .Top := 162;
                    LSyousuKeta .Left := 564; LSyousuKeta.Top := 164;
				end
                else
                begin
                    LSyousu     .Left := 420; LSyousu    .Top := 186;
                    ESyousuten  .Left := 540; ESyousuten .Top := 184;
                    LSyousuKeta .Left := 564; LSyousuKeta.Top := 186;
                end;
            end;
        end
        else
        begin
            LSyousu     .Visible := False;
			ESyousuten  .Visible := False;
            LSyousuKeta .Visible := False;
        end;
        //--- <057> Ed -----

		gbBorderFlag	:=	FALSE;	//	詳細時で実在から細目へTab変更時のBorderCaptionの変更ﾌﾗｸﾞ
		SelectDsp(wkRec.MasKbn,wkRec.Kbn,iG_Code,iS_Code);	//	選択された内容表示
		giG_Code	:=	iCode;
		giMasKbn	:=	iMasterKbn;
		MTab_SyousaiInfo.Items[0].Selected	:=	TRUE;		//	詳細のTab実在科目をActiveに
		MTab_SyousaiInfo.Items[1].Selected	:=	FALSE;
        MTab_SyousaiInfo.Items[2].Selected  :=  FALSE;
        MTab_SyousaiInfo.Items[3].Selected  :=  FALSE;      // <002>

		DmqDsp.Close;
		DmqDsp.Free;
		Exit;
	end;

	gbChangeFlg	:=	TRUE;

	DSourceGou	.DataSet :=	nil;
	DSourceZitsu.DataSet :=	nil;
	DSourceSai	.DataSet :=	nil;

	MemGou	  .Open;
	MemZitsu  .Open;
	MemSai	  .Open;
	MemSeikaku.Open;

	DGoukeiGrid	.BeginUpdate;
	DZitsuGrid	.BeginUpdate;
	DSaimokuGrid.BeginUpdate;

	DmqTree := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );		//	DBとMQueryの接続

	//	損益科目時での固定科目表示処理
	if ( MComboBox.ItemIndex = 2 ) then		//	損益科目の時
	begin
		if ( bKoteiFlag = TRUE ) and (( gCheckCode <> iGCode ) or ( bMemCloseFlag = TRUE )) then
		begin			fnMakeDsp();	//	HIS0028
			giKamoku :=	iHantei;
		end;
		DmqTree.Close;
		gCheckCode	  := iGCode;
		bMemCloseFlag := FALSE;
	end;

	with DmqTree do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('   BasedNCode              ');	//	加算元外部ｺｰﾄﾞ
		SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
		SQL.Add('  AND SumNCode  = :Code    '); //	加算先内部ｺｰﾄﾞ
		SQL.Add('ORDER BY EntNo             ');

		ParamByName('Code').AsFloat := iNCode2;    //	加算先外部ｺｰﾄﾞ
		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;
			DmqDsp.Close;
			DmqDsp.Free;
       	    Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
// <010>			if ( iCode <> '0' ) then
            if ( iCode <> '0' ) and (giTaihi_OyaCode <> iKamokuCode) then   // <010>
			begin
				SetLength(m_aCmnt_Goukei,0);	//	配列をｸﾘｱ
				SetLength(m_aCmnt_Jitsu ,0);	//	配列をｸﾘｱ
			end;
			SetLength(m_aCmnt_Sai,0);		    //	配列をｸﾘｱ
		end;

		while ( EOF <> TRUE ) do
		begin
			iKasanMoto := GetFld('BasedNCode').AsFloat;	    //	加算元外部ｺｰﾄﾞを取得

			with DmqDsp do
			begin
//<053>--start---
// <078> ↓↓↓
//				if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn))then
				if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,Dummy))then
				begin
//					if (iNCode2 = GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) and (iflg <> 1) then
					if (iNCode2 = GetKmkInfo(TOUKIMISYO,1,Dummy)) and (iflg <> 1) then
// <078> ↑↑↑
					begin
						for iLoop := 11 to 15 do
						begin
							DSourceGou.Enabled := False;
							DSourceZitsu.Enabled := False;
							Close();
							SQL.Clear;
							SQL.ADD('SELECT '									);
							SQL.ADD(	'MA.NCode as NCode'						);	//	内部ｺｰﾄﾞ
							SQL.ADD(    ',MA.GCode as Code'                     );  //  外部ｺｰﾄﾞ
							SQL.ADD(	',MA.Renso as Ren'						);	//	連想ｼﾝﾎﾞﾙ
							SQL.ADD(	',MA.LongName as LName'					);	//	正式名称
							SQL.ADD(	',MA.SimpleName as SName'				);	//	簡略名称
							SQL.ADD(	',MA.CharCode as CharCD'				);	//	性格ｺｰﾄﾞ
							SQL.ADD(	',MA.AnalyzeCode as BunCode'			);	//	分析ｺｰﾄﾞ
							SQL.ADD(	',MB.DecoKbn as Syo'					);	//	装飾区分
							SQL.ADD('FROM '										);
							SQL.ADD(	'KmkMA MA'								);	//	勘定科目基本ﾏｽﾀ
							SQL.ADD(	'LEFT OUTER JOIN KmKMB MB ON '			);	//	勘定科目詳細情報
							SQL.ADD(		'( '								);
							SQL.ADD(			'MA.MasterKbn = MB.MasterKbn '	);
							SQL.ADD(			'AND MA.NCode = MB.NCode '		);
							SQL.ADD(		') '								);
							SQL.ADD('WHERE '									);
							SQL.ADD(	'MA.MasterKbn = 1 AND '					);	//	ﾏｽﾀ区分(1:勘定科目)
							SQL.ADD(	'MA.RDelKbn = 0 AND '					);	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
							SQL.ADD(	'MA.NCode = :Code AND '					);	//	外部ｺｰﾄﾞ
							SQL.ADD(	'MA.SubCode = 0'						);	//	細目ｺｰﾄﾞ(0)
							ParamByName('Code').AsFloat := SonekiArrayL1[iLoop].ConstNCode;
							//	ｴﾗｰの判定
							if Open = False then
							begin
								ErrorMessageDsp(DmqTree);
								DmqTree.Close;
								DmqTree.Free;
				        	    Exit;
							end;
							while EOF <> True do
							begin
								if (SonekiArrayL1[iLoop].SumKbn = 1) then	//	合計時
								begin
									gDragGouFlag := True;	//HIS0054
									MemGou.Append;
									MemGou.FieldByName('NCode').AsFloat		:=	GetFld('NCode').AsFloat;		//	外部ｺｰﾄﾞ
//<2006/05/17>
//                                  MemGou.FieldByName('Code').AsInteger    :=  GetFld('Code').AsInteger;
//									MemGou.FieldByName('Ren').AsString			:=	GetFld('Ren').AsString;		//	連想ｼﾝﾎﾞﾙ
                                    MemGou.FieldByName('GCode').AsInteger    :=  GetFld('Code').AsInteger;
									MemGou.FieldByName('GRen').AsString			:=	GetFld('Ren').AsString;		//	連想ｼﾝﾎﾞﾙ
//<2006/05/17>
									MemGou.FieldByName('GLongName').AsString	:=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);
									MemGou.FieldByName('GSName').AsString		:=	GetFld('SName').AsString;	//	簡略名称
									MemGou.FieldByName('SousyokuData').AsInteger :=	GetFld('Syo'  ).AsInteger;	//	装飾区分

									iFusenKbn	:=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分のCheck
									SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
									m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode := GetFld('NCode').AsFloat;
									m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt := sCmnt;
									FusenDsp(iFusenKbn,GOUKEI);									//	付箋表示処理
									MemGou.Post;
									NEXT;
								end
								else begin
									gDragJitsuFlag := True;	//HIS0054
    								MemZitsu.Append();
									MemZitsu.FieldByName('NCode').AsFloat			:=	GetFld('NCode').AsFloat;		//	外部ｺｰﾄﾞ
               						MemZitsu.FieldByName('Code'		  ).AsInteger   :=  GetFld('Code'	 ).AsInteger;	// 外部ｺｰﾄﾞ
									MemZitsu.FieldByName('Ren').AsString			:=	GetFld('Ren').AsString;		//	連想ｼﾝﾎﾞﾙ
									MemZitsu.FieldByName('LongName').AsString		:=	CutLeadByte(GetFld('LName'  ).AsString, DISP_LENGTH_LONG);	//	正式名称
									MemZitsu.FieldByName('SName').AsString			:=	GetFld('SName').AsString;	//	簡略名称
									MemZitsu.FieldByName('SeikakuData').AsInteger	:=	GetFld('CharCD').AsInteger;	//	性格ｺｰﾄﾞ
									MemZitsu.FieldByName('BunsekiNO').AsInteger		:=	GetFld('BunCode').AsInteger;//	分析ｺｰﾄﾞ
									MemZitsu.FieldByName('Bunseki').AsString		:=	GetSKmkMA(BUNSEKI,GetFld('BunCode').AsInteger,iWork);
									iFusenKbn	:=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分Check
									SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
									m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode := GetFld('NCode').AsFloat;
									m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt := sCmnt;
									FusenDsp(iFusenKbn,ZITSUZAI);								//	付箋表示処理
									MemZitsu.Post;
									NEXT;
								end;
							end;
							DSourceGou.Enabled := True;
							DSourceZitsu.Enabled := True;

							MemGou.First;
							MemZitsu.First;
						end;
						iflg := 1;
					end;
				end;
//<053>---end----
     											//	ここより以下で装飾区分関係修正	HIS0017
				Close();
				SQL.Clear;
				SQL.Add('SELECT                         ');
				SQL.Add('    MA.MasterKbn   as Mas      ');	//	ﾏｽﾀ区分
				SQL.Add('   ,MA.SumKbn      as Sum      ');	//	実在/合計区分
				SQL.Add('   ,MA.NCode       as NCode    ');	//	内部ｺｰﾄﾞ
				SQL.Add('   ,MA.GCode       as Code     ');	//	外部ｺｰﾄﾞ
                SQL.Add('   ,MA.CNCode      as NSubCD   '); //  細目内部ｺｰﾄﾞ
				SQL.Add('   ,MA.SubCode     as GSubCD   ');	//	細目外部ｺｰﾄﾞ
				SQL.Add('   ,MA.Renso       as Ren      ');	//	連想ｼﾝﾎﾞﾙ
				SQL.Add('   ,MA.LongName    as LName    ');	//	正式名称
				SQL.Add('   ,MA.SimpleName  as SName    ');	//	簡略名称
				SQL.Add('   ,MA.CharCode    as CharCD   ');	//	性格ｺｰﾄﾞ
				SQL.Add('   ,MA.AnalyzeCode as BunCode  ');	//	分析ｺｰﾄﾞ
				SQL.Add('   ,MB.DecoKbn     as Syo      ');	//	分析ｺｰﾄﾞ
                SQL.Add('   ,MA.CodeDigit   as Digit    '); //  ｺｰﾄﾞ桁数
                SQL.Add('   ,MA.CodeAttr    as Attr     '); //  ｺｰﾄﾞ属性
				SQL.Add('FROM  KmkMA MA                 '); //	勘定科目基本ﾏｽﾀ
				SQL.Add('     ,KmkMB MB                 ');	//	勘定科目詳細情報
				SQL.Add('WHERE MA.RDelKbn =  0          '); //	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('  AND MA.NCode   <> 0          ');	//	内部ｺｰﾄﾞ

				if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then	//	実在科目時(※加算先が実在時は子供は細目の時という判断)
				begin
                    SQL.Add('  AND MA.NCode    = :Code  '); //	内部ｺｰﾄﾞ
					SQL.Add('  AND MB.NCode    = :Code  '); //	内部ｺｰﾄﾞ
                    SQL.Add('  AND MA.CNCode   = :Sub   '); //	細目内部ｺｰﾄﾞ
                    SQL.Add('  AND MB.CNCode   = :Sub   '); //	細目内部ｺｰﾄﾞ

					ParamByName('Code'	).AsFloat   := iNCode2;		//	内部ｺｰﾄﾞ
					ParamByName('Sub'	).AsFloat   := iKasanMoto;	//	細目内部ｺｰﾄﾞ
				end
				else
				begin
                    SQL.Add('  AND MA.MasterKbn = 1     '); //	勘定科目
                    SQL.Add('  AND MB.MasterKbn = 1     '); //	勘定科目
                    SQL.Add('  AND MA.NCode     = :Code '); //	内部ｺｰﾄﾞ
                    SQL.Add('  AND MB.NCode     = :Code '); //	内部ｺｰﾄﾞ
                    SQL.Add('  AND MB.CNCode    = 0     '); //	細目内部ｺｰﾄﾞ
                    SQL.Add('  AND MA.CNCode    = 0     '); //	細目内部ｺｰﾄﾞ

					ParamByName('Code').AsFloat     := iKasanMoto;	//	内部ｺｰﾄﾞ
				end;

				SQL.Add('ORDER BY MA.GCode              ');

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqDsp);
					DmqDsp.Close;
					DmqDsp.Free;
					DmqTree.Close;
					DmqTree.Free;
		       	    Exit;
				end;

				iMaster	:= GetFld('Mas').AsInteger;
				if (iMaster = 1) and			//	合計時
							((GetFld('Sum').AsInteger) = 1) then
				begin
                    DSourceGou.Enabled := FALSE;
					while EOF <> TRUE do
					begin
						MemGou.Append;
						MemGou.FieldByName('NCode'		 ).AsFloat   :=	GetFld('NCode').AsFloat;	//	内部ｺｰﾄﾞ
                        MemGou.FieldByName('CNCode'		 ).AsFloat   :=	GetFld('NSubCD').AsFloat;	//	細目内部ｺｰﾄﾞ
						MemGou.FieldByName('GCode'		 ).AsInteger :=	GetFld('Code' ).AsInteger;	//	外部ｺｰﾄﾞ
						MemGou.FieldByName('GRen'		 ).AsString	 :=	GetFld('Ren'  ).AsString;	//	連想ｼﾝﾎﾞﾙ
// <049>↓
//						MemGou.FieldByName('GLongName'	 ).AsString	 :=	GetFld('LName').AsString;	//	正式名称
																									//	正式名称
						MemGou.FieldByName('GLongName'	 ).AsString	 :=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);
// <049>↑
						MemGou.FieldByName('GSName'		 ).AsString	 :=	GetFld('SName').AsString;	//	簡略名称
						MemGou.FieldByName('SousyokuData').AsInteger :=	GetFld('Syo'  ).AsInteger;	//	装飾区分

						iFusenKbn := FusenCheck(1,GetFld('NCode').AsFloat,0,sCmnt);	//	付箋区分Check
						SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
						m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  GetFld('NCode')     .AsFloat;
                        m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  GetFld('NSubCD')    .AsFloat;
						m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  sCmnt;
						FusenDsp(iFusenKbn,GOUKEI);									//	付箋表示処理
						MemGou.Post;
						NEXT;
					end;
                    DSourceGou.Enabled := TRUE;
					MemGou.First;
				end
                else if ((GetFld('Mas').AsInteger) = 1) and		//	実在時
								((GetFld('Sum').AsInteger) = 0) then
				begin
					DZitsuGrid.DataSource.DataSet := nil;
					DSourceZitsu.Enabled := FALSE;
					while EOF <> TRUE do
					begin
						MemZitsu.Append();
						MemZitsu.FieldByName('NCode'   	  ).AsFloat   := GetFld('NCode'  ).AsFloat;	    // 内部ｺｰﾄﾞ
                        MemZitsu.FieldByName('CNCode'	  ).AsFloat   := GetFld('NSubCD' ).AsFloat;	    // 細目内部ｺｰﾄﾞ
						MemZitsu.FieldByName('Code'		  ).AsInteger := GetFld('Code'	 ).AsInteger;	// 外部ｺｰﾄﾞ
						MemZitsu.FieldByName('Ren'		  ).AsString  := GetFld('Ren'	 ).AsString;	// 連想ｼﾝﾎﾞﾙ
// <049>↓
//						MemZitsu.FieldByName('LongName'	  ).AsString  := GetFld('LName'  ).AsString;	// 正式名称
                                                                                                        // 正式名称
						MemZitsu.FieldByName('LongName'	  ).AsString  := CutLeadByte(GetFld('LName'  ).AsString, DISP_LENGTH_LONG);
// <049>↑
						MemZitsu.FieldByName('SName'	  ).AsString  := GetFld('SName'	 ).AsString;	// 簡略名称
						MemZitsu.FieldByName('SeikakuData').AsInteger := GetFld('CharCD' ).AsInteger;	// 性格ｺｰﾄﾞ
						MemZitsu.FieldByName('BunsekiNO'  ).AsInteger := GetFld('BunCode').AsInteger;   // 分析ｺｰﾄﾞ
						MemZitsu.FieldByName('Bunseki'	  ).AsString  := GetSKmkMA(BUNSEKI,GetFld('BunCode').AsInteger,iWork);
                                                                                                        // 分析ｺｰﾄﾞから分析名称取得

						iFusenKbn := FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分Check
						SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
						m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  GetFld('NCode').AsFloat;
                        m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  GetFld('NSubCD').AsFloat;
						m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  sCmnt;
						FusenDsp(iFusenKbn,ZITSUZAI);								//	付箋表示処理
						MemZitsu.Post;
						NEXT;
					end;
                   	DSourceZitsu.Enabled := TRUE;
					MemZitsu.First;
				end
				else if ((GetFld('Mas').AsInteger) = 2) then		//	細目時
				begin
                    ChangeCodeAttr(iNCode); // <035>属性変更
                    DSourceSai.Enabled := FALSE;
					while EOF <> TRUE do
					begin
						MemSai.Append;
						MemSai.FieldByName('NCode'    ).AsFloat   := GetFld('NCode').AsFloat; 	    //	内部ｺｰﾄﾞ
                        MemSai.FieldByName('CNCode'	  ).AsFloat   := GetFld('NSubCD').AsFloat;      //	細目内部ｺｰﾄﾞ
                        MemSai.FieldByName('SCode'	  ).AsString  := fnSaimokuSetAttr(0,            //  細目ｺｰﾄﾞ(属性対応)
                                                                                      GetFld('GSubCD').AsString,
                                                                                      GetFld('Attr').AsInteger,
                                                                                      GetFld('Digit').AsInteger);

						MemSai.FieldByName('SRen'	  ).AsString  := GetFld('Ren'  ).AsString;	    //	連想ｼﾝﾎﾞﾙ
						MemSai.FieldByName('SLongName').AsString  := GetFld('LName').AsString;	    //	正式名称
						MemSai.FieldByName('SSName'	  ).AsString  := GetFld('SName').AsString;	    //	簡略名称

						iFusenKbn := FusenCheck(2,wkP_Rec.NCode,(GetFld('NSubCD').AsFloat),sCmnt);	//	付箋区分Check
						SetLength(m_aCmnt_Sai,Length(m_aCmnt_Sai)+1);
                        m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].NCode    :=  GetFld('NCode').AsFloat;    //  科目内部ｺｰﾄﾞ
						m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].SubNCode :=  GetFld('NSubCD').AsFloat;	//	細目内部ｺｰﾄﾞ
						m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].Cmnt     :=  sCmnt;
						FusenDsp(iFusenKbn,SAIMOKU);										//	付箋表示処理

						MemSai.Post;
						NEXT;
					end;
					DSourceSai.Enabled := TRUE;
					MemSai.First;
				end;
			end;
			NEXT;
        end;
	end;

	DmqTree.Close;
	DmqTree.Free;		//	CreateしているのでFreeを行う
	DmqDsp.Close;
	DmqDsp.Free;		//	CreateしているのでFreeを行う

	giG_Code :=	iCode;
	giMasKbn :=	iMasterKbn;

	case iHantei of
		GOUKEI:
		begin
			gDragJitsuFlag	 :=	FALSE;		//	DragDrop時の実在Grid表示に使用
			gDragGouFlag	 :=	FALSE;		//	DragDrop時の合計Grid表示に使用
			giTaihi_OyaCode	 :=	iKamokuCode;
			giKamoku		 :=	GOUKEI;

		end;
		ZITSUZAI:
		begin
			if (iHantei <> giKamoku) or (iKamokuCode <> giTaihi_OyaCode) then
			begin
				if (bKoteiFlag = FALSE) then
					if (TreeView.Selected.Parent = nil) then
						HagureCheck()	//HIS0036
					else
						LevelDsp(iNCode,FALSE);	//	同一ﾚﾍﾞﾙの表示処理		HIS0046
				giTaihi_OyaCode	 := iKamokuCode;
				giKamoku		 := ZITSUZAI;
			end;
			LevelDspSaimoku(wkRec.NCode);
		end;
		SAIMOKU:
		begin
			if (iKamokuCode <> giTaihi_OyaCode) then
			begin
				LevelDspSaimoku(wkP_Rec.NCode);		//	同一ﾚﾍﾞﾙの表示処理
				giTaihi_OyaCode	 := iKamokuCode;
				giKamoku		 := SAIMOKU;
			end;
		end;
    end;

	DSourceGou	.DataSet :=	MemGou;
	DSourceZitsu.DataSet :=	MemZitsu;
	DSourceSai	.DataSet :=	MemSai;

	DSaimokuGrid.EndUpdate;
	DZitsuGrid  .EndUpdate;
	DGoukeiGrid .EndUpDate;

	gbChangeFlg	:= FALSE;

	if (iHantei <> GOUKEI) then
		MoveGridRecordSelecter(iHantei,iCode);

	bKoteiFlag := FALSE;

end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*							新規の時フォーカスを左端に移動(合計科目)
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridChangeNodeEx(Sender: TObject);
var
	iCode	:	Extended;
begin

	if ( Screen.ActiveControl.Name = TreeView.Name ) then   Exit;

    //	合計GridのｺｰﾄﾞがNullの時
	if (DGoukeiGrid.DataSource.DataSet.FieldByName('GCode').IsNull) then
	begin
		gbChangeFlag                :=  TRUE;
		B_Delete.Enabled            :=	FALSE;		//	削除ﾎﾞﾀﾝ使用不可
		DGoukeiGrid.FocusedColumn   :=  1;	        //	ﾌｫｰｶｽのｶﾗﾑ位置を指定

        ToolButton.ImageIndex	:=  4;
        ToolButton.Enabled      :=  FALSE;
	end
	else
	begin
		//	参照時
		if ( giReferFlag = REFER ) then Exit;

        //	合計科目の時
		if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
		begin
			iCode := DGoukeiGrid.DataSource.DataSet.FieldByName('NCode').AsFloat;

            //	入力中は何もしない
			if (MemGou.State in [dsInsert]) then    Exit;

			if ( JitsuzaiCheck(iCode) ) then			    //	子供が付いているかCheck
				B_Delete.Enabled :=	FALSE				    //	削除ﾎﾞﾀﾝ使用不可
			else
            begin
//				B_Delete.Enabled :=	TRUE;				    //	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//	    		B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    		B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
            end;

	        if ( B_Delete.Enabled = TRUE ) then			    //	削除ﾎﾞﾀﾝが使用可の時
    	    begin
				if ( KoteiKbnCheck(iCode,Goukei) ) then		//	固定区分が固定かCheckして固定だったら
					B_Delete.Enabled :=	FALSE;			    //	削除ﾎﾞﾀﾝ使用不可
			end;

            if MemGou.State in [dsInsert] then
    		begin
                ToolButton.ImageIndex	:=  4;
    			ToolButton.Enabled      :=  FALSE;
    		end
    		else
    		begin
                PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
                PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
              	PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
              	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
           	    PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
               	PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

                if m_cJNTArea.IsFusen then
                    ToolButton.ImageIndex	:=  m_FusenColorIdx
                else
                    ToolButton.ImageIndex	:=  4;

           	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
    		end;
		end;
	end;

	StatusBar.SimpleText    :=  '';
	B_KmkCopy.Enabled       :=  FALSE;
end;

//************************************************************************
//*		Component		:	DZitsuGrid ( TdxDBGrid )
//*							新規の時フォーカスを左端に移動(実在科目)
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridChangeNodeEx(Sender: TObject);
var
	iWork			:	Integer;
	iCode			:	Extended;
	sBunsekiName	:	String;
	wkRec			:	^TaikeiRec;
	bHantei			:	Boolean;
    iBCode          :   Integer;
begin

	if ( Screen.ActiveControl.Name = TreeView.Name ) then   Exit;

    //	実在GridのｺｰﾄﾞがNullの時
    if ( DZitsuGrid.DataSource.DataSet.FieldByName('Code').IsNull ) then
	begin
		gbChangeFlag			    :=	TRUE;
		B_Delete.Enabled		    :=	FALSE;		//	削除ﾎﾞﾀﾝ使用不可
		DZitsuGrid.FocusedColumn    :=	1;			//	ﾌｫｰｶｽのｶﾗﾑ位置を指定

		wkRec := TreeView.Selected.Data;
		if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) then	//	合計選択時
		begin
			MTab_N.Items[1].Enabled	:=	FALSE;			//	細目のTab使用不可
			DSaimokuGrid.Enabled	:=	FALSE;			//	細目のGrid使用不可
		end;

        ToolButton.ImageIndex	:=  4;
		ToolButton.Enabled      :=  FALSE;

		Exit;
	end;

	if ( Screen.ActiveControl.Name = DZitsuGrid.Name ) then	//	実在科目の時
	begin
		iBCode := DSourceZitsu.DataSet.FieldByName('BunsekiNO').AsInteger;
		sBunsekiName :=	GetSKmkMA(BUNSEKI,iBCode,iWork);	//	分析名称を取得
		if ( iWork = 9999 ) then	//	分析名称のCheck
		begin
			//	コードが間違っています
			ComArea.m_MsgStd.GetMsg(MjsMsgRec, 30,15);
    		MjsMessageBoxEx(AOwner, // <005>
                            'コード'+ MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType);
			MemZitsu.Open;
			MemZitsu.Edit;
			MemZitsu.FieldByName('Bunseki').AsString := '';
			Abort;
			Beep;
			Exit;
		end;

		//	参照時
		if ( giReferFlag <> REFER ) then
		begin
            //	入力中は何もしない
			if ( MemZitsu.State in [dsInsert] ) then    Exit;

            //	実在GridのｺｰﾄﾞがNullじゃない時
			if not(DZitsuGrid.DataSource.DataSet.FieldByName('NCode').IsNull) then
		    begin
				iCode := DZitsuGrid.DataSource.DataSet.FieldByName('NCode').AsFloat;

				if ( JitsuzaiCheck(iCode) ) then			        //	子供が付いているかCheck
					B_Delete.Enabled :=	FALSE				        //	削除ﾎﾞﾀﾝ使用不可
				else
                begin
//					B_Delete.Enabled :=	TRUE;				        //	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//	    			B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    			B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
                end;

	    	    if ( B_Delete.Enabled = TRUE ) then			        //	削除ﾎﾞﾀﾝが使用可の時
    	    	begin
					if ( KoteiKbnCheck(iCode,Zitsuzai) ) then	    //	固定区分が固定かCheckして固定だったら
						B_Delete.Enabled :=	FALSE;			        //	削除ﾎﾞﾀﾝ使用不可
				end;

				wkRec := TreeView.Selected.Data;
				if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then	//	実在選択時
				begin
					//	選択されたｺｰﾄﾞが複合科目かﾁｪｯｸ
					if ( FukuKmkCheck(iCode) ) then
					begin
						MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
						DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
					end
					//	選択されたｺｰﾄﾞが工事を採用されているかCheck
					else if ( KoujiAdoptCheck(iCode)  ) and
                            ( gMasInfoUseKbn.Koj <> 0 ) then
					begin
						MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
						DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
					end
					//	補助が３つ採用されている時
					else if ( MAXADOPTCOUNT = AdoptCountCheck(iCode,DATABASE) ) then
					begin
						bHantei	:= FALSE;
						MDataModule.BeginTran (dbCorp_Select);					//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
						if ( KbnCheck(wkRec.NCode,bHantei,TRUE,OTHER) )then	    //	RollBackが行われたらTRUEが返ってくる
							Exit;
						MDataModule.Commit (dbCorp_Select);						//	ｺﾐｯﾄ(反映)

						if ( bHantei ) then
						begin
							MTab_N.Items[1].Enabled	:= TRUE;		//	細目のTab使用可
							DSaimokuGrid.Enabled	:= TRUE;		//	細目のGrid使用可
						end
                        else
						begin
							MTab_N.Items[1].Enabled	:= FALSE;		//	細目のTab使用可
							DSaimokuGrid.Enabled	:= FALSE;		//	細目のGrid使用可
						end;
					end
					else
					begin
						MTab_N.Items[1].Enabled	:= TRUE;		//	細目のTab使用可
						DSaimokuGrid.Enabled	:= TRUE;		//	細目のGrid使用可
					end;
				end;
			end
			else begin
				MTab_N.Items[1].Enabled	:= TRUE;		//	細目のTab使用可
				DSaimokuGrid.Enabled	:= TRUE;		//	細目のGrid使用可
			end;
		end;

        if MemZitsu.State in [dsInsert] then
		begin
            ToolButton.ImageIndex	:=  4;
			ToolButton.Enabled      :=  FALSE;
		end
		else
		begin
            PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
            PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
          	PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
      	    PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
       	    PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
           	PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

            if m_cJNTArea.IsFusen then
                ToolButton.ImageIndex	:=  m_FusenColorIdx
            else
                ToolButton.ImageIndex	:=  4;

       	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
		end;

		Search_Zitsu;	//<084> ツリーノード検索
	end;

	StatusBar.SimpleText    :=  '';
	B_KmkCopy.Enabled       :=  FALSE;

end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*							新規の時フォーカスを左端に移動(細目科目)
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridChangeNodeEx(Sender: TObject);
var
	iCode	        :	String;
	iPos	        :	Integer;
	iNCode	        :	Extended;
	sCode	        :	String;
    iSyokuchiKbn    :   Integer;
begin
	if (Screen.ActiveControl.Name = TreeView.Name) then		//	TreeView
		exit;

	if (DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').IsNull) then	//	細目GridのｺｰﾄﾞがNullの時
	begin
		B_Delete.Enabled :=	FALSE;			//	削除ﾎﾞﾀﾝ使用不可				//HIS0074
		DSaimokuGrid.FocusedColumn := 1;	//	ﾌｫｰｶｽのｶﾗﾑ位置指定

        ToolButton.ImageIndex	:=  4;
        ToolButton.Enabled      :=  FALSE;
		exit;
	end;

	if (Screen.ActiveControl.Name = DSaimokuGrid.Name) then	//	細目科目の時
	begin
		if (MemSai.State in [dsInsert]) then		//	入力中は何もしない
			exit;

        // ｺｰﾄﾞ属性対応
		iCode :=    fnSaimokuSetAttr(1,
                                     DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString,
                                     wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);    //  細目外部ｺｰﾄﾞ

		iPos  := MJSHanPos(' ', MTab_N.BorderCaption);	//	先頭からSPACEまでの桁数COUNT
		sCode := MJSHanCopy(MTab_N.BorderCaption, 1, iPos-1);	//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
// <013>		if sCode <> '' then
		if ( sCode <> '0' ) then // <013>
            fnSubNCodeCheck(StrToInt(sCode),iCode,iNCode,iSyokuchiKbn);

        if iSyokuchiKbn = 1 then	//	諸口の時
		begin
			// 諸口以外に科目別補助が存在しない時
			if Syokuchi(StrToInt(sCode),TRUE) = TRUE then						//HIS0119
            begin
//				B_Delete.Enabled :=	TRUE			//	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//	    		B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    		B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
            end
  			else
				B_Delete.Enabled :=	FALSE;			//	削除ﾎﾞﾀﾝ使用不可
		end
		else
		begin
			if (giReferFlag = REFER) then	//	参照
				B_Delete.Enabled :=	FALSE		//	削除ﾎﾞﾀﾝ使用不可
			else
            begin
//				B_Delete.Enabled :=	TRUE;		//	削除ﾎﾞﾀﾝ使用可
// <SYNC> MOD start
//	    		B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    		B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
            end;
		end;

        if MemSai.State in [dsInsert] then
		begin
            ToolButton.ImageIndex	:=  4;
			ToolButton.Enabled      :=  FALSE;
		end
		else
		begin
            PM_Del.Enabled          :=  m_cJNTArea.IsFusen;
            PM_Revise.Enabled       :=  m_cJNTArea.IsFusen;
      	    PM_FRE.Enabled          :=  m_cJNTArea.IsFusen;
          	PM_FBU.Enabled          :=  m_cJNTArea.IsFusen;
   	        PM_FGR.Enabled          :=  m_cJNTArea.IsFusen;
       	    PM_FOR.Enabled          :=  m_cJNTArea.IsFusen;

            if m_cJNTArea.IsFusen then
                ToolButton.ImageIndex	:=  m_FusenColorIdx
            else
                ToolButton.ImageIndex	:=  4;

       	    ToolButton.Enabled      :=  m_cJNTArea.IsFusen;
		end;

	end;
end;

//************************************************************************
//*		Component		:	B_End ( TMSpeedButton )
//*							ﾃﾞｰﾀを更新して終了
//*		Event			:	Click
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_EndClick(Sender: TObject);
begin
	gbEndFlag := TRUE;

//	Gridの終了時に編集中のものがあれば更新する	//	HIS0035
	if (P_Grid.Visible = TRUE) then
	begin
		case MTab_N.Items.Selected of
			0:	//	実在
			begin
				if MemZitsu.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
					MemZitsu.Post;
			end;
			1:	//	細目
			begin
				if MemSai.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
					MemSai.Post;
			end;
			2:	//	合計
			begin
				if MemGou.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
					MemGou.Post;
			end;
		end;
	end;
//*****
    Close();
end;

//************************************************************************
//*		Component		:	B_Delete ( TMSpeedButton )
//*							ﾚｺｰﾄﾞを削除
//*		Event			:	Click
//*		Name			:	H.Endo（MJS）
//*		Comment			:	2007/04/13 K.Katou(PRIME)
//*							この関数を流用してB_Delete_Click_GrpChild関数作成(子会社用)。
//*							ｸﾞﾙｰﾌﾟ会計採用なしまたは親会社の場合はB_Delete_Clickで処理する
//************************************************************************
procedure TJNTCRP009001f.B_Delete_Click(Sender: TObject);
var
	wkRec		:	^TaikeiRec;
	wkRec2		:	^TaikeiRec;
	DelRec		:	^TaikeiRec;	//	詳細からの削除時に使用
	DelRecOya	:	^TaikeiRec;	//	詳細からの削除時に使用
	DmqDel		:	TMQuery;
	DmqData		:	TMQuery;
	cNode		:	TTreeNode;
	cNodeOYA	:	TTreeNode;
	DelNode		:	TTreeNode;	//	詳細からの削除時に使用
	DelNodeOya	:	TTreeNode;	//	詳細からの削除時に使用
	GDelNode	:	TTreeNode;	//	選択されているNode(Gird再表示に使用)
	iWkNCode   	:	Extended;	//	選択されている内部ｺｰﾄﾞ
	iCode		:	String;	    //	選択されている外部ｺｰﾄﾞ
    iCode2      :   String;     //  属性対応用
	iLoop		:	Integer;	//	ﾙｰﾌﾟｶｳﾝﾄ
	iActive		:	Integer;	//	ｱｸﾃｨﾌﾞ判定
	iMotoNCode	:	Extended;	//	加算元ｺｰﾄﾞ
	iOyaCode	:	Integer;	//	親外部ｺｰﾄﾞ
	iOyaNCode	:	Extended;	//	親内部ｺｰﾄﾞ
	iKamokuNCode:	Extended;	//  特殊科目情報から取得する科目ｺｰﾄﾞ
	iEntNo		:	Integer;	//	登録No
	iKaGeCode	:	Integer;	//	加算区分
	iKamoku		:	Integer;	//	特殊科目の固定値
	iNCode2		:	Extended;
    iCNCode2    :   Extended;   //  科目別補助内部ｺｰﾄﾞ
	iMasKbn		:	Integer;
	iKbn		:	Integer;
	bS_Flag		:	Boolean;	//	詳細のﾊﾟﾈﾙかどうかの判断
	DummyFlag	:	Boolean;	//	ﾀﾞﾐｰﾌﾗｸﾞ
	SumKbn		:	Byte;		//	実在/合計区分
	sMsgName	:	String;		//	表示ﾒｯｾｰｼﾞ(削除時に使用)
	iLoop2		:	Integer;	//	ﾙｰﾌﾟｶｳﾝﾄ
	iNCode		:	Extended;	//	内部ｺｰﾄﾞ
    iSyokuchiKbn:   Integer;    //  諸口区分
    iCodeDigit  :   Integer;
    iCodeAttr   :   Integer;
    exCNCode    :   Extended;   // 科目別補助内部ｺｰﾄﾞ<CHK>
    strMsg      :   String;     // <CHK>
    strErr      :   String;     // <CHK>
	bUse		:	Boolean;	// <063>
    deleteQuestionMessage: String; //<113>ADD
begin
// <063> ADD start
											// 子会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
	begin
		B_Delete_Click_GrpChild();			// 子会社用の削除処理
		Exit;
    end;
// <063> ADD end

	//	初期化処理
	iActive		    :=	0;
	bS_Flag		    :=	TRUE;
    iWkNCode        :=  0;
	iCode		    :=	'';
    iCode2          :=  '';
	iEntNo		    :=	0;
	iKamokuNCode	:=	0;
	iOyaCode	    :=	0;
//	iNCode2		    :=	0;				   	// <063> DEL
//    iCNCode2        :=  0;                // <063> DEL
	sMsgName	    :=	'';
	iNCode		    :=  -1;
    iCodeDigit      :=  0;
    iCodeAttr       :=  0;
	iOyaNCode 		:= 	0;					// <063> ADD

	DmqDel := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );		//	DBとMQueryの接続

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//	Gird再表示に使用
	GDelNode  := TreeView.Selected;	//	選択されているNodeを取得
	gDelGrid  := GDelNode.Data;		//	NodeDataを取得
	m_SetNode := TreeView.Selected;

// -------------------------
//      TdxdbGrid時
// -------------------------
    // ------------------------
	//	    合計科目の時
    // ------------------------
	if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
	begin
		iCode	    :=  IntToStr(DGoukeiGrid.DataSource.DataSet.FieldByName('GCode') .AsInteger);   // 外部ｺｰﾄﾞ
		iWkNCode    :=	DGoukeiGrid.DataSource.DataSet.FieldByName('NCode') .AsFloat;               // 内部ｺｰﾄﾞ
		sMsgName    :=  DGoukeiGrid.DataSource.DataSet.FieldByName('GSName').AsString;              // 名称
		iActive	    :=	1;
		bS_Flag	    :=	FALSE;
        iCode2      :=  iCode;

        //	選択されているNodeが実在の時
		if ( gDelGrid.MasKbn = 1 ) and ( gDelGrid.Kbn = 0 ) then
		begin
			m_SetNode := GDelNode.Parent;								//	親のNodeを取得
			GDelNode  := GDelNode.Parent;								//	親のNodeを取得
			if ( GDelNode = nil ) then									//	親Nodeがnilの時
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)			//	特殊科目から科目ｺｰﾄﾞ取得
			else
			begin
				gDelGrid :=	GDelNode.Data;
				iOyaCode :=	gDelGrid.GCode;						        //	選択時に削除時に使用
			end;
		end
        //	選択されているNodeが合計の時
		else if ( gDelGrid.MasKbn = 1 ) and ( gDelGrid.Kbn = 1 ) then
        begin
			iOyaCode  := gDelGrid.GCode;	                            //	選択時に削除時に使用
            iOyaNCode := gDelGrid.NCode;
        end;
	end;

    // ------------------------
	//	    実在科目の時
    // ------------------------
	if ( Screen.ActiveControl.Name = DZitsuGrid.Name ) then
	begin
		iCode	    :=	IntToStr(DZitsuGrid.DataSource.DataSet.FieldByName('Code')   .AsInteger);   // 外部ｺｰﾄﾞ
		iWkNCode    :=	DZitsuGrid.DataSource.DataSet.FieldByName('NCode')  .AsFloat;               // 内部ｺｰﾄﾞ
		sMsgName    :=	DZitsuGrid.DataSource.DataSet.FieldByName('SName')  .AsString;              // 名称
		iActive	    :=	2;
		bS_Flag	    :=	FALSE;
        iCode2      :=  iCode;

        //	選択されているNodeが実在の時
		if (gDelGrid.MasKbn = 1) and (gDelGrid.Kbn = 0) then
		begin
			m_SetNode := GDelNode.Parent;								//	親のNodeを取得
			GDelNode  := GDelNode.Parent;								//	親Node取得
			if ( GDelNode = nil ) then
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)
			else
			begin
				gDelGrid :=	GDelNode.Data;
				iOyaCode :=	gDelGrid.GCode;	                            //	選択時に削除時に使用
			end;
		end;
		if (gDelGrid.MasKbn = 1) and (gDelGrid.Kbn = 1) then	        //	選択されているNodeが合計の時
        begin
			iOyaCode  := gDelGrid.GCode;	                            //	選択時に削除時に使用
            iOyaNCode := gDelGrid.NCode;
        end;

		//	実在の時細目が子供としてあったときは削除しない
		if JitsuzaiCheck(iWkNCode) then
		begin
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			exit;
		end;
	end;

    // ------------------------
	//	    細目科目の時
    // ------------------------
	if ( ACControl.Name = DSaimokuGrid.Name ) then
	begin
        fnGetCodeAttr(gDelGrid.NCode, iCodeAttr, iCodeDigit);

		iOyaCode    :=	grDelTaikei.GCode;	                                                //	実在選択時に削除時に使用
		iCode	    :=	fnSaimokuSetAttr(1,
                                         DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString,
                                         iCodeAttr, iCodeDigit);    //  細目外部ｺｰﾄﾞ
        iCode2      :=  fnSaimokuSetAttr(0,
                                         DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString,
                                         iCodeAttr, iCodeDigit);    //  細目外部ｺｰﾄﾞ
		sMsgName    :=	DSaimokuGrid.DataSource.DataSet.FieldByName('SSName')   .AsString;  //  名称

        // 内部ｺｰﾄﾞ及び諸口区分を取得
//      fnSubNCodeCheck(iOyaCode,iCode,iNCode,iSyokuchiKbn);
		fnSubNCodeCheck(iOyaCode,iCode,iWkNCode,iNCode,iSyokuchiKbn);//<054>

		iActive	    :=	3;
		bS_Flag	    :=	FALSE;

        //	選択されているNodeが実在の時
		if ( gDelGrid.MasKbn = 2 ) and ( gDelGrid.Kbn = 0 ) then
		begin
			GDelNode :=	GDelNode.Parent;
			if ( GDelNode = nil ) then
				iOyaCode :=	0
			else
			begin
				gDelGrid :=	GDelNode.Data;
				iOyaCode :=	gDelGrid.GCode;	//	細目選択時に削除時に使用
			end;
		end;
	end;

// -------------------------
//      TMTreeView時
// -------------------------
	if ( Screen.ActiveControl.Name = TreeView.Name ) then
	begin
		cNode	    :=  TreeView.Selected;
		PasteNode   :=  TreeView.Selected;
		grTaikei    :=  cNode.Data;
        iCode       :=  intToStr(grTaikei.GCode);
		if ( grTaikei.GCode <> 0 ) then
    	begin
			cNodeOYA  := cNode.Parent;
			m_SetNode := cNode.Parent;	//	削除後のFoucsをあてるために使用
			if ( cNodeOYA = nil ) then	//	第１ﾚﾍﾞﾙの親の時
			begin
                //	はぐれ時かつ固定ではない時
				if ( grTaikei.NotAdd = 0 ) and ( grTaikei.KoteiKbn = 0 ) then
				begin
                	grOya_Taikei := nil;
					MI_DeleteClick(self);
				end;

				DmqDel .Close;
				DmqDel .Free;
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;
			grOya_Taikei :=	cNodeOYA.Data;
		end
		else if (grTaikei.MasKbn = 2) then		//	細目ｺｰﾄﾞ時
    	begin
			cNodeOYA    :=	cNode.Parent;
			m_SetNode   :=  cNode.Parent;	//	削除後のFoucsをあてるために使用
			if ( cNodeOYA = nil ) then	    //	第１ﾚﾍﾞﾙの親の時
			begin
				DmqDel .Close;
				DmqDel .Free;
				DmqData.Close;
				DmqData.Free;
				exit;
            end;
			grOya_Taikei :=	cNodeOYA.Data;
		end;

		MI_DeleteClick(self);

		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
		exit;
	end;

// -------------------------
//      TMTab時
// -------------------------
	if ( Screen.ActiveControl.Name = MTab_N.Name ) then
	begin
		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
		exit;
	end;

// -------------------------
//      詳細の削除
// -------------------------
	if ( bS_Flag = TRUE ) then
	begin
		DelNode	 :=	TreeView.Selected;
		DelRec	 :=	DelNode.Data;
		sMsgName :=	ESName.Text;
        iCode    := Trim(ECode.Text);               // 削除対象の外部ｺｰﾄﾞ取得
		iCode2	 := Trim(ECode.Text);               // 削除対象の外部ｺｰﾄﾞ取得
        iWkNCode := DelRec.NCode;                   // 削除対象の内部ｺｰﾄﾞ取得

		if (Not( bSyokuchiFlag )) then	            // 細目の諸口以外
		begin
			iMasKbn := DelRec.MasKbn;
			iKbn	:= DelRec.Kbn;
            bSyokuchiFlag   :=  FALSE;
		end
		else
		begin
			iCode2	:= IntToStr(fnGetSubCode(m_iOyaCode));
			iMasKbn := 2;
			iKbn	:= 0;
		end;

        // -------------------------
        //      実在時
        // -------------------------
		if ( iMasKbn = 1 ) and ( iKbn = 0 ) then
		begin
			iActive	    :=  2;
			DelNodeOya  :=  DelNode.Parent;
			m_SetNode   :=  DelNode.Parent;
			if ( DelNodeOya = nil ) then
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)
			else
			begin
				DelRecOya := DelNodeOya.Data;
				iOyaCode  := DelRecOya.GCode;
				iOyaNCode := DelRecOya.NCode;
			end;
		end
        // -------------------------
        //      合計時
        // -------------------------
		else if ( iMasKbn = 1 ) and ( iKbn = 1 ) then
		begin
			iActive	    :=	1;
			DelNodeOya  :=  DelNode.Parent;
			m_SetNode   :=  DelNode.Parent;
			if ( DelNodeOya = nil ) then
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)
			else
			begin
				DelRecOya := DelNodeOya.Data;
				iOyaCode  := DelRecOya.GCode;
				iOyaNCode := DelRecOya.NCode;
			end;
		end
        // -------------------------
        //      細目時
        // -------------------------
		else if ( iMasKbn = 2 ) and ( iKbn = 0 ) then
		begin
			iActive	    :=	3;
			if (Not( bSyokuchiFlag )) then	//	細目の諸口以外
			begin
				DelNodeOya := DelNode.Parent;
				if ( DelNodeOya = nil ) then
        	    begin
					showmessage('科目別補助の親が不明･･･02');
					Exit;
				end;
				DelRecOya  := DelNodeOya.Data;
				iOyaCode   := DelRecOya.GCode;
				m_iOyaCode := iOyaCode;
			end
			else
				iOyaCode :=	m_iOyaCode;

            fnGetCodeAttr(gDelGrid.NCode, iCodeAttr, iCodeDigit);

            iCode	    :=	fnSaimokuSetAttr(1,DelRec.SubCode,
                                         iCodeAttr, iCodeDigit);    //  細目外部ｺｰﾄﾞ

            // 内部ｺｰﾄﾞ及び諸口区分を取得
//          fnSubNCodeCheck(iOyaCode,iCode,iNCode,iSyokuchiKbn);
            fnSubNCodeCheck(iOyaCode,iCode,iWkNCode,iNCode,iSyokuchiKbn);//<054>

		end;
	end;

	//	削除メッセージ表示('xxx'を削除します。よろしいですか？)
	ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
// <026> 「当該ﾏｽﾀにﾃﾞｰﾀが存在している場合、削除すると管理表に不整合が生ずる恐れがあります。
//          削除してもよろしいですか？」
//	if (MjsMessageBoxEx(AOwner, // <005>
//                        '''' + sMsgName +'''を' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype ,
//                        MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType) <> mrYes) then
// <113>ADD↓
	if iSyokuchiKbn = 1 then
    	deleteQuestionMessage := '科目別補助の諸口を削除した場合、該当科目の科目別補助採用はなしになります。' + #13#10
                              + 'また、仕訳データが入力済みの場合は管理表に不整合が生ずる恐れがあるため、必ずマスタ再計算処理を行う必要があります。' + #13#10
                              + '削除してもよろしいですか？'
    else
	   	deleteQuestionMessage := MSG_DELETE;
// <113>ADD↑
	if (MjsMessageBoxEx(AOwner, // <005>
                        deleteQuestionMessage, MjsMsgRec.sTitle,MjsMsgRec.icontype , 				//<113>ﾒｯｾｰｼﾞの引数変更
                        MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType) <> mrYes) then
	begin
		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
		Exit;
	end;

    // <CHK>↓
    if iNCode < 0 then                      // 科目別補助内部ｺｰﾄﾞ
        exCNCode := 0
    else
        exCNCode := iNCode;

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の親会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_PARENT) then
	begin									// 子会社で使っていないかﾁｪｯｸ
		if not fnDelCheckChild(iWkNCode, exCNCode, bUse) then
		begin
			if bUse then					// 子会社で使っていた場合
			begin							// 「子会社で使用しているため、削除できません。」
	    	    MjsMessageBoxEx(AOwner, JNTSYNC_MSG_USE_CHILD, '削除', mjInformation, mjOk, mjDefOk);
			end;
			DmqDel .Close;
			DmqDel .Free;
			DmqData.Close;
			DmqData.Free;
			Exit;
        end;
	end;
// <063> ADD end
                                            // 削除ﾁｪｯｸｽﾄｱﾄﾞ実行
    if not fnDelCheck(iWkNCode, exCNCode, strErr) then
    begin
                                            // 「ｺｰﾄﾞ 簡略名称 は、xxxのため削除できません。」
        strMsg := iCode2 + ' ' + sMsgName + ' ' + strErr;
// <063> MOD Self→AOwner
//        MjsMessageBoxEx(Self, strMsg, '確認', mjInformation, mjOk, mjDefOk);
        MjsMessageBoxEx(AOwner, strMsg, '確認', mjInformation, mjOk, mjDefOk);
// <063> MOD end
		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
        Exit;
    end;
    // <CHK>↑

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	bSyokuchiFlag := FALSE;

// ------------------------
//      諸口の時
// ------------------------
    if ( iSyokuchiKbn = 1 ) and ( iActive = 3 ) then	//	細目で諸口の時
	begin
		bSyokuchiFlag := TRUE;

		if ( fnSyokuchiDel(DmqDel,iOyaNCode) = FALSE ) then
		begin
			DmqDel .Close;
			DmqDel .Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			exit;
		end;
	end;

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);

	with DmqDel do
	begin
		//	勘定科目基本ﾏｽﾀ(KmkMA)からの削除する内部ｺｰﾄﾞを取得
		Close;
		SQL.Clear;
		SQL.Add('SELECT                 ');
		SQL.Add('    NCode              ');	//	内部ｺｰﾄﾞ
        SQL.Add('   ,CNCode             '); //  科目別補助内部ｺｰﾄﾞ
		SQL.Add('FROM KmkMA             '); //	勘定科目基本ﾏｽﾀ
        SQL.Add('WHERE RDelKbn   = 0    '); //	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        // --------------------
        //      細目時
        // --------------------
		if (iActive = 3) then
		begin
			SQL.Add('  AND MasterKbn = 2        '); //	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :Sub     ');	//	細目ｺｰﾄﾞ

			ParamByName('Code'	).AsInteger := iOyaCode;
			ParamByName('Sub'	).AsString  := iCode;
		end
        // --------------------
        //      勘定科目時
        // --------------------
		else
		begin
			SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

//			ParamByName('Code').AsInteger := StrToIntDef(Trim(ECode.Text),0);
            ParamByName('Code').AsInteger := StrToIntDef(Trim(iCode),0);
		end;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
       	    Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
            // 削除を行う内部ｺｰﾄﾞ
			iNCode2	    :=  GetFld('NCode') .AsFloat;
            iCNCode2    :=  GetFld('CNCode').AsFloat;
		end
		// 内部ｺｰﾄﾞが存在しなかった時
		else
		begin
			showmessage('エラー140219-2');
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		//	勘定科目基本ﾏｽﾀ(KmkMA)からの削除
		Close;
		SQL.Clear;
		SQL.Add('UPDATE KmkMA SET       '); //	勘定科目基本ﾏｽﾀ
        SQL.Add('    RDelKbn   = 1      ');	//	ﾚｺｰﾄﾞ区分(1:削除ﾚｺｰﾄﾞ)
        SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//	更新担当者内部ｺｰﾄﾞ<080>
        SQL.Add('WHERE RDelKbn   = 0    ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        // --------------------
        //      細目時
        // --------------------
		if ( iActive = 3 ) then
		begin
			SQL.Add('  AND MasterKbn = 2        ');	//	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :Sub     ');	//	細目ｺｰﾄﾞ

			ParamByName('Code') .AsInteger  :=  iOyaCode;
			ParamByName('Sub')  .AsString   :=  iCode;
		end
        // --------------------
        //      勘定科目時
        // --------------------
		else
		begin
			SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND SumKbn    = :SKbn    ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

            // ------------------
            //	    合計時
            // ------------------
			if ( iActive = 1 ) then
				ParamByName('SKbn').AsInteger := 1
            // ------------------
            //	    実在時
            // ------------------
			else
				ParamByName('SKbn').AsInteger := 0;

			ParamByName('Code').AsInteger := StrToIntDef(iCode,0);

		end;
        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; // 更新担当者内部ｺｰﾄﾞ<080>


		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
            Exit;
		end;

		if ( bS_Flag <> TRUE ) then
		begin
			case iActive of
				1:	MemGou.Delete;
				2:	MemZitsu.Delete;
				3:	MemSai.Delete;
			end;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if (iActive = 3) then	//	細目時
			TableHistory.KmkMA_Sai := TABLE_IN_UPDATE
		else
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

		//	勘定科目詳細情報(KmkMB)からの削除
		Close;
		SQL.Clear;
		SQL.Add('DELETE FROM KmkMB              '); //	勘定科目詳細情報

        // --------------------
        //      細目時
        // --------------------
		if ( iActive = 3 ) then
		begin
			SQL.Add('WHERE MasterKbn = 2        '); //	ﾏｽﾀ区分(2:細目科目)
            SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :Sub     ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('Code') .AsFloat   := iNCode2;
            ParamByName('Sub')  .AsFloat   := iCNCode2;
		end
		// --------------------
        //      勘定科目時
        // --------------------
		else
		begin
			SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('Code') .AsFloat    := iNCode2;
		end;

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
            Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if ( iActive = 3 ) then
            //	細目時
			TableHistory.KmkMB_SaiDel := TABLE_DELETE
		else
            //  勘定科目時
			TableHistory.KmkMB_KanDel := TABLE_DELETE;

        //	合計科目の時で子がいる時
		if ( iActive = 1 ) then
		begin
			iKamoku	:= ReturnKmkCode(MComboBox.ItemIndex);

			iKamokuNCode	:= GetKmkInfo(iKamoku,1,SumKbn);	    //	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)

			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				wkRec := TreeView.Items[iLoop].Data;
	    		if ( wkRec.NCode = iKamokuNCode ) then
    	    	begin
	        		TreeView.Selected   :=  TreeView.Items[iLoop];
					m_PNode             :=  TreeView.Selected;
					break;
	    	    end;
	    	end;

			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('        MAX(EntNo)         '); //	登録Noの最大値
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = :MasKbn  '); //  ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :ExNCode ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('MasKbn').AsInteger	:=	1;	//	ﾏｽﾀ区分(1:勘定科目)
			ParamByName('ExNCode').AsFloat  := iKamokuNCode;

			//	ｴﾗｰの判定
			if Open = FALSE then
			begin
				ErrorMessageDsp(DmqDel);
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
       		    Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iEntNo := ((GetFld('MAX(KmkTree.EntNo)').AsInteger) div 100 * 100) + 100;
			end;
		end;

        //	細目科目の時はTreeには登録していない
		if ( iActive <> 3 ) then
		begin
			//	削除するﾚｺｰﾄﾞを加算先としているﾚｺｰﾄﾞ取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    BasedNCode             ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('   ,AddKbn                 ');	//	加算区分
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        '); //  ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :Code    ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('Code').AsFloat     := iWkNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
       		    Exit;
			end;

			while ( EOF <> TRUE ) do
			begin
				iMotoNCode  := GetFld('BasedNCode')   .AsFloat;   	//	加算元内部ｺｰﾄﾞ
				iKaGeCode   := GetFld('AddKbn')       .AsInteger;		//	加算区分
				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,EntNo              ');	//	登録NO
				DmqData.SQL.Add('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,AddKbn             ');	//	加算区分
				DmqData.SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,UpdTantoNCode      ');	//	更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(') VALUES (                 ');
				DmqData.SQL.Add('        1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:SakiNCode         ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:No                ');	//	登録NO
				DmqData.SQL.Add('       ,:MotoNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:Kasan             ');	//	加算区分
				DmqData.SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:UpdTantoNCode     ');	//	更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(')                          ');

				DmqData.ParamByName('SakiNCode').AsFloat    :=  iKamokuNCode;	//	加算先内部ｺｰﾄﾞ
				DmqData.ParamByName('No')       .AsInteger  :=  iEntNo;		    //	登録NO
				DmqData.ParamByName('MotoNCode').AsFloat    :=  iMotoNCode;	    //	加算元内部ｺｰﾄﾞ
				DmqData.ParamByName('Kasan')    .AsInteger  :=  iKaGeCode;	    //	加算区分
                DmqData.ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
		            Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;

				iEntNo := iEntNo + 100;

				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wkRec := TreeView.Items[iLoop].Data;
	    			if ( wkRec.GCode = StrToIntDef(iCode2,0) ) then
    	    		begin
		        		TreeView.Selected := TreeView.Items[iLoop];
						break;
	    		    end;
	    		end;

				TreeView.Selected.Item[0].MoveTo(m_PNode,naAddChild);

				//	新しく書き換えたので前のﾚｺｰﾄﾞを削除
				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('DELETE FROM KmkTree        '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('WHERE MasterKbn  = 1       ');
				DmqData.SQL.Add('  AND SumNCode   = :Code   ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('  AND BasedNCode = :Sub    ');	//	加算元内部ｺｰﾄﾞ

				DmqData.ParamByName('Code') .AsFloat    :=  iWkNCode;
				DmqData.ParamByName('Sub')  .AsFloat    :=  iMotoNCode;

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
		            Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_KanDel	:= TABLE_DELETE;

				Next;
			end;

			//	科目加算体系(KmkTree)からの削除
			Close;
			SQL.Clear;
			SQL.Add('DELETE FROM KmkTree            '); //	科目加算体系ﾏｽﾀ

            // --------------------
            //      細目時
            // --------------------
			if ( iActive = 3 ) then
			begin
				SQL.Add('WHERE MasterKbn  = 1       ');
				SQL.Add('  AND SumNCode   = :Code   ');	//	加算先内部ｺｰﾄﾞ
				SQL.Add('  AND BasedNCode = :Sub    ');	//	加算元内部ｺｰﾄﾞ
				ParamByName('Code'	).AsFloat   := iOyaNCode;
				ParamByName('Sub'	).AsFloat   := iWkNCode;
			end
            // --------------------
            //      勘定科目時
            // --------------------
			else
			begin
				SQL.Add('WHERE MasterKbn  = 1       ');
//<051>ﾂﾘｰ上に存在する同ﾏｽﾀは全て削除する
//				SQL.Add('  AND SumNCode   = :Code   ');	//	加算先内部ｺｰﾄﾞ
				SQL.Add('  AND BasedNCode = :Sub    ');	//	加算元内部ｺｰﾄﾞ
//<051>				ParamByName('Code'	).AsFloat   := iOyaNCode;
				ParamByName('Sub'	).AsFloat   := iWkNCode;
			end;

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
				exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
		end;

		//	ﾂﾘｰからの削除
		for iLoop := TreeView.Items.Count-1 downto 0 do
		begin
			cNode := TreeView.Items[iLoop];
			wkRec := cNode.Data;

			if ( (iActive <> 3) and (wkRec^.GCode = StrToIntDef(iCode2,0)) ) or
               ( (iActive = 3 ) and (wkRec^.SubCode = iCode2) )          then
			begin
                // --------------------
                //      細目時
                // --------------------
				if ( iActive = 3 ) then
				begin
					cNodeOYA :=	TreeView.Items[iLoop].Parent;
					if ( cNodeOYA <> nil ) then
					begin
						wkRec2 := cNodeOYA.Data;
		             	if ( wkRec2.GCode = iOyaCode ) then
						begin
							m_Save.Node    := TreeView.Items[iLoop];
							m_Save.NodeOya := cNodeOYA;
							m_Save.Taikei  := cNode.Data;
							m_Save.DspName := m_Save.Node.Text;

							(TreeView.Items[iLoop]).delete;
                            //<113>DEL↓ ※詳細画面から諸口を削除したとき、ﾀﾌﾞのOnChangeが不要に動いてしまい、
                            //            科目別補助採用ﾀﾞｲｱﾛｸﾞが表示されてしまうのでｺﾒﾝﾄｱｳﾄ
                            //if ( iSyokuchiKbn = 1 ) then
							//	MTab_N.Items.Selected := 1;
                            //<113>DEL↑
						end;
					end;
				end
				else begin
					// 科目別補助以外の時
					if ( wkRec^.MasKbn <> 2 ) then
						(TreeView.Items[iLoop]).delete;
				end;
			end;
		end;
		DmqData.Close;
    end;
	DmqData.Free;

	//	諸口が削除されたら、細目採用区分をなしにする
    if ( iSyokuchiKbn = 1 ) then
    begin
		DummyFlag := FALSE;
		//if ( KbnCheck(iOyaNCode,DummyFlag,FALSE,DISPOSE_DELETE) ) then		//	RollBack時TRUE <113>DEL
        if not SubUseClear(iNCode2) then	//<113>ADD
		begin
			DmqDel.Close;
			DmqDel.Free;
			Exit;
		end;

		if ( P_Syousai.Visible = TRUE ) then
		begin
			DelNode	:= TreeView.Selected;
			DelRec	:= DelNode.Data;
// <013>			SelectDsp(DelRec.MasKbn,DelRec.Kbn,DelRec.GCode,'');
			SelectDsp(DelRec.MasKbn,DelRec.Kbn,DelRec.GCode,'0');   // <013>
		end;
	end;

	// <100>ADD↓
	// 出力順序自動登録 構造体設定
	if Length(m_KmkOrder) > 0 then
	begin
		// 新規追加された科目が削除された科目か確認して、配列からも削除
		for iLoop := 0 to Length(m_KmkOrder)-1 do
		begin
			if m_KmkOrder[iLoop].Delete = True then
				continue;

			if iNCode2 = m_KmkOrder[iLoop].NCode then
			begin
				m_KmkOrder[iLoop].Delete := True;
				break;
			end;
		end;
	end;
	// <100>ADD↑

	MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	DmqDel.Close;
	DmqDel.Free;

	//<126> Delete ↓
	// <124> Start
	//実在の勘定科目（合計科目、科目別補助は対象外）で削除を行われた場合が対象[ iActive(1:合計、2:科目、3:科目別補助) ; SumKbn（0:実在、1:合計）]
	//if ( iActive = 2 ) and ( SumKbn = 0 ) then
	//begin
		//「Edger Tracker 経費精算連携」の場合、メッセージを出力する。
		//EdgeTrackerKeihiSeisanMsg();
	// <124> End
	//<126> Delete ↑

	// <126> Start
	if ( iActive = 2) and ( SumKbn = 0 ) then
	begin
		//「Edger Tracker 経費精算連携」の場合、メッセージを出力する。
		EdgeTrackerKeihiSeisanMsg(ZITSUZAI);                           // 実在かつ科目の場合 Const値のZITSUZAIを渡す
	end
	else if ( iActive = 3 ) then
	begin
		EdgeTrackerKeihiSeisanMsg(SAIMOKU);                            // 科目別補助の場合 Const値のSAIMOKUを渡す
	end;
// <126> End


	if ( m_SetNode <> nil ) and ( iActive <> 3 ) then
		m_SetNode.Selected := TRUE;

	//	ﾊﾟﾈﾙGridの時
	if ( bS_Flag = FALSE ) then
	begin
		if ( iOyaCode <> 0 ) then
		begin
			case iOyaCode of
				//-----------------------------------------
				// SHISAN_BU   :資産の部
				// FUSAI_BU    :負債及び資本の部
				// SEIZOU_BU   :製造の部
				// GEN_KOUJI_BU:原価の部/工事原価の部
				//-----------------------------------------
				SHISAN_BU,FUSAI_BU,SEIZOU_BU,GEN_KOUJI_BU: HagureCheck();		// はぐれ表示処理
				else GridAgainDsp(DELETE,0);	//	再表示処理
			end;

		end;
	end;

	if ( iActive <> 3 ) then		//	細目削除以外
		gbKmkTree2Flag := TRUE;

	if ( grCopyPaste.GCode = StrToIntDef(iCode2,0) ) and ( grCopyPaste.MasKbn = 1 ) then
	begin
		m_CopyFlag		 := FALSE;
		MI_Paste.Enabled := FALSE;
    end;

    // 細目科目削除時にﾚｺｰﾄﾞが1件も無くなった場合に、ﾀﾌﾞを実在に切り替える
    if ( iActive = 3  ) then
    begin
        if ( MemSai.RecordCount = 0 ) then
        begin
            MTab_N.Items[0].Selected    :=  TRUE;
            MTab_N.Items[1].Selected    :=  FALSE;
            MTab_N.Items[2].Selected    :=  FALSE;
        end;
    end;

end;

//************************************************************************
//*		Process			:	ﾚｺｰﾄﾞを削除(ｸﾞﾙｰﾌﾟ会計採用の子会社用の処理) <063> ADD
//*		Name			:	K.Katou(PRIME)
//*		Date			:	2007/04/13
//*		Comment			:	B_Delete_Click関数を流用して作成。
//*							B_Delete_Clickｲﾍﾞﾝﾄから呼ばれる。
//************************************************************************
procedure TJNTCRP009001f.B_Delete_Click_GrpChild();
var
	wkRec		:	^TaikeiRec;
	wkRec2		:	^TaikeiRec;
	DelRec		:	^TaikeiRec;	//	詳細からの削除時に使用
	DelRecOya	:	^TaikeiRec;	//	詳細からの削除時に使用
	DmqDel		:	TMQuery;
	DmqData		:	TMQuery;
	cNode		:	TTreeNode;
	cNodeOYA	:	TTreeNode;
	DelNode		:	TTreeNode;	//	詳細からの削除時に使用
	DelNodeOya	:	TTreeNode;	//	詳細からの削除時に使用
	GDelNode	:	TTreeNode;	//	選択されているNode(Gird再表示に使用)
	iWkNCode   	:	Extended;	//	選択されている内部ｺｰﾄﾞ
	iCode		:	String;	    //	選択されている外部ｺｰﾄﾞ
    iCode2      :   String;     //  属性対応用
	iLoop		:	Integer;	//	ﾙｰﾌﾟｶｳﾝﾄ
	iActive		:	Integer;	//	ｱｸﾃｨﾌﾞ判定
	iMotoNCode	:	Extended;	//	加算元ｺｰﾄﾞ
	iOyaCode	:	Integer;	//	親外部ｺｰﾄﾞ
	iOyaNCode	:	Extended;	//	親内部ｺｰﾄﾞ
	iKamokuNCode:	Extended;	//  特殊科目情報から取得する科目ｺｰﾄﾞ
	iEntNo		:	Integer;	//	登録No
	iKaGeCode	:	Integer;	//	加算区分
	iKamoku		:	Integer;	//	特殊科目の固定値
	iNCode2		:	Extended;
    iCNCode2    :   Extended;   //  科目別補助内部ｺｰﾄﾞ
	iMasKbn		:	Integer;
	iKbn		:	Integer;
	bS_Flag		:	Boolean;	//	詳細のﾊﾟﾈﾙかどうかの判断
	DummyFlag	:	Boolean;	//	ﾀﾞﾐｰﾌﾗｸﾞ
	SumKbn		:	Byte;		//	実在/合計区分
	sMsgName	:	String;		//	表示ﾒｯｾｰｼﾞ(削除時に使用)
	iLoop2		:	Integer;	//	ﾙｰﾌﾟｶｳﾝﾄ
	iNCode		:	Extended;	//	内部ｺｰﾄﾞ
    iSyokuchiKbn:   Integer;    //  諸口区分
    iCodeDigit  :   Integer;
    iCodeAttr   :   Integer;
    exCNCode    :   Extended;   // 科目別補助内部ｺｰﾄﾞ<CHK>
    strMsg      :   String;     // <CHK>
    strErr      :   String;     // <CHK>

begin
	//	初期化処理
	iActive		    :=	0;
	bS_Flag		    :=	TRUE;
    iWkNCode        :=  0;
	iCode		    :=	'';
    iCode2          :=  '';
	iEntNo		    :=	0;
	iKamokuNCode	:=	0;
	iOyaCode	    :=	0;
    iOyaNCode		:= 	0;
	sMsgName	    :=	'';
	iNCode		    :=  -1;
    iCodeDigit      :=  0;
    iCodeAttr       :=  0;

	DmqDel := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );		//	DBとMQueryの接続

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//	Gird再表示に使用
	GDelNode  := TreeView.Selected;	//	選択されているNodeを取得
	gDelGrid  := GDelNode.Data;		//	NodeDataを取得
	m_SetNode := TreeView.Selected;

// -------------------------
//      TdxdbGrid時
// -------------------------
    // ------------------------
	//	    合計科目の時
    // ------------------------
	if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
	begin
		iCode	    :=  IntToStr(DGoukeiGrid.DataSource.DataSet.FieldByName('GCode') .AsInteger);   // 外部ｺｰﾄﾞ
		iWkNCode    :=	DGoukeiGrid.DataSource.DataSet.FieldByName('NCode') .AsFloat;               // 内部ｺｰﾄﾞ
		sMsgName    :=  DGoukeiGrid.DataSource.DataSet.FieldByName('GSName').AsString;              // 名称
		iActive	    :=	1;
		bS_Flag	    :=	FALSE;
        iCode2      :=  iCode;

        //	選択されているNodeが実在の時
		if ( gDelGrid.MasKbn = 1 ) and ( gDelGrid.Kbn = 0 ) then
		begin
			m_SetNode := GDelNode.Parent;								//	親のNodeを取得
			GDelNode  := GDelNode.Parent;								//	親のNodeを取得
			if ( GDelNode = nil ) then									//	親Nodeがnilの時
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)			//	特殊科目から科目ｺｰﾄﾞ取得
			else
			begin
				gDelGrid :=	GDelNode.Data;
				iOyaCode :=	gDelGrid.GCode;						        //	選択時に削除時に使用
			end;
		end
        //	選択されているNodeが合計の時
		else if ( gDelGrid.MasKbn = 1 ) and ( gDelGrid.Kbn = 1 ) then
        begin
			iOyaCode  := gDelGrid.GCode;	                            //	選択時に削除時に使用
            iOyaNCode := gDelGrid.NCode;
        end;
	end;

    // ------------------------
	//	    実在科目の時
    // ------------------------
	if ( Screen.ActiveControl.Name = DZitsuGrid.Name ) then
	begin
		iCode	    :=	IntToStr(DZitsuGrid.DataSource.DataSet.FieldByName('Code')   .AsInteger);   // 外部ｺｰﾄﾞ
		iWkNCode    :=	DZitsuGrid.DataSource.DataSet.FieldByName('NCode')  .AsFloat;               // 内部ｺｰﾄﾞ
		sMsgName    :=	DZitsuGrid.DataSource.DataSet.FieldByName('SName')  .AsString;              // 名称
		iActive	    :=	2;
		bS_Flag	    :=	FALSE;
        iCode2      :=  iCode;

        //	選択されているNodeが実在の時
		if (gDelGrid.MasKbn = 1) and (gDelGrid.Kbn = 0) then
		begin
			m_SetNode := GDelNode.Parent;								//	親のNodeを取得
			GDelNode  := GDelNode.Parent;								//	親Node取得
			if ( GDelNode = nil ) then
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)
			else
			begin
				gDelGrid :=	GDelNode.Data;
				iOyaCode :=	gDelGrid.GCode;	                            //	選択時に削除時に使用
			end;
		end;
		if (gDelGrid.MasKbn = 1) and (gDelGrid.Kbn = 1) then	        //	選択されているNodeが合計の時
        begin
			iOyaCode  := gDelGrid.GCode;	                            //	選択時に削除時に使用
            iOyaNCode := gDelGrid.NCode;
        end;

		//	実在の時細目が子供としてあったときは削除しない
		if JitsuzaiCheck(iWkNCode) then
		begin
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			exit;
		end;
	end;

    // ------------------------
	//	    細目科目の時
    // ------------------------
	if ( ACControl.Name = DSaimokuGrid.Name ) then
	begin
        fnGetCodeAttr(gDelGrid.NCode, iCodeAttr, iCodeDigit);

		iOyaCode    :=	grDelTaikei.GCode;	                                                //	実在選択時に削除時に使用
		iCode	    :=	fnSaimokuSetAttr(1,
                                         DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString,
                                         iCodeAttr, iCodeDigit);    //  細目外部ｺｰﾄﾞ
        iCode2      :=  fnSaimokuSetAttr(0,
                                         DSaimokuGrid.DataSource.DataSet.FieldByName('SCode').AsString,
                                         iCodeAttr, iCodeDigit);    //  細目外部ｺｰﾄﾞ
		sMsgName    :=	DSaimokuGrid.DataSource.DataSet.FieldByName('SSName')   .AsString;  //  名称

        // 内部ｺｰﾄﾞ及び諸口区分を取得
        fnSubNCodeCheck(iOyaCode,iCode,iWkNCode,iNCode,iSyokuchiKbn);//<054>

		iActive	    :=	3;
		bS_Flag	    :=	FALSE;

        //	選択されているNodeが実在の時
		if ( gDelGrid.MasKbn = 2 ) and ( gDelGrid.Kbn = 0 ) then
		begin
			GDelNode :=	GDelNode.Parent;
			if ( GDelNode = nil ) then
				iOyaCode :=	0
			else
			begin
				gDelGrid :=	GDelNode.Data;
				iOyaCode :=	gDelGrid.GCode;	//	細目選択時に削除時に使用
			end;
		end;
	end;

// -------------------------
//      TMTreeView時
// -------------------------
	if ( Screen.ActiveControl.Name = TreeView.Name ) then
	begin
		cNode	    :=  TreeView.Selected;
		PasteNode   :=  TreeView.Selected;
		grTaikei    :=  cNode.Data;
        iCode       :=  intToStr(grTaikei.GCode);
		if ( grTaikei.GCode <> 0 ) then
    	begin
			cNodeOYA  := cNode.Parent;
			m_SetNode := cNode.Parent;	//	削除後のFoucsをあてるために使用
			if ( cNodeOYA = nil ) then	//	第１ﾚﾍﾞﾙの親の時
			begin
                //	はぐれ時かつ固定ではない時
				if ( grTaikei.NotAdd = 0 ) and ( grTaikei.KoteiKbn = 0 ) then
				begin
                	grOya_Taikei := nil;
					MI_DeleteClick(self);
				end;

				DmqDel .Close;
				DmqDel .Free;
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;
			grOya_Taikei :=	cNodeOYA.Data;
		end
		else if (grTaikei.MasKbn = 2) then		//	細目ｺｰﾄﾞ時
    	begin
			cNodeOYA    :=	cNode.Parent;
			m_SetNode   :=  cNode.Parent;	//	削除後のFoucsをあてるために使用
			if ( cNodeOYA = nil ) then	    //	第１ﾚﾍﾞﾙの親の時
			begin
				DmqDel .Close;
				DmqDel .Free;
				DmqData.Close;
				DmqData.Free;
				exit;
            end;
			grOya_Taikei :=	cNodeOYA.Data;
		end;

		MI_DeleteClick(self);

		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
		exit;
	end;

// -------------------------
//      TMTab時
// -------------------------
	if ( Screen.ActiveControl.Name = MTab_N.Name ) then
	begin
		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
		exit;
	end;

// -------------------------
//      詳細の削除
// -------------------------
	if ( bS_Flag = TRUE ) then
	begin
		DelNode	 :=	TreeView.Selected;
		DelRec	 :=	DelNode.Data;
		sMsgName :=	ESName.Text;
        iCode    := Trim(ECode.Text);               // 削除対象の外部ｺｰﾄﾞ取得
		iCode2	 := Trim(ECode.Text);               // 削除対象の外部ｺｰﾄﾞ取得
        iWkNCode := DelRec.NCode;                   // 削除対象の内部ｺｰﾄﾞ取得

		if (Not( bSyokuchiFlag )) then	            // 細目の諸口以外
		begin
			iMasKbn := DelRec.MasKbn;
			iKbn	:= DelRec.Kbn;
            bSyokuchiFlag   :=  FALSE;
		end
		else
		begin
			iCode2	:= IntToStr(fnGetSubCode(m_iOyaCode));
			iMasKbn := 2;
			iKbn	:= 0;
		end;

        // -------------------------
        //      実在時
        // -------------------------
		if ( iMasKbn = 1 ) and ( iKbn = 0 ) then
		begin
			iActive	    :=  2;
			DelNodeOya  :=  DelNode.Parent;
			m_SetNode   :=  DelNode.Parent;
			if ( DelNodeOya = nil ) then
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)
			else
			begin
				DelRecOya := DelNodeOya.Data;
				iOyaCode  := DelRecOya.GCode;
				iOyaNCode := DelRecOya.NCode;
			end;
		end
        // -------------------------
        //      合計時
        // -------------------------
		else if ( iMasKbn = 1 ) and ( iKbn = 1 ) then
		begin
			iActive	    :=	1;
			DelNodeOya  :=  DelNode.Parent;
			m_SetNode   :=  DelNode.Parent;
			if ( DelNodeOya = nil ) then
    	        iOyaCode :=	ReturnKmkCode(MComboBox.ItemIndex)
			else
			begin
				DelRecOya := DelNodeOya.Data;
				iOyaCode  := DelRecOya.GCode;
				iOyaNCode := DelRecOya.NCode;
			end;
		end
        // -------------------------
        //      細目時
        // -------------------------
		else if ( iMasKbn = 2 ) and ( iKbn = 0 ) then
		begin
			iActive	    :=	3;
			if (Not( bSyokuchiFlag )) then	//	細目の諸口以外
			begin
				DelNodeOya := DelNode.Parent;
				if ( DelNodeOya = nil ) then
        	    begin
					showmessage('科目別補助の親が不明･･･02');
					Exit;
				end;
				DelRecOya  := DelNodeOya.Data;
				iOyaCode   := DelRecOya.GCode;
				m_iOyaCode := iOyaCode;
			end
			else
				iOyaCode :=	m_iOyaCode;

            fnGetCodeAttr(gDelGrid.NCode, iCodeAttr, iCodeDigit);

            iCode	    :=	fnSaimokuSetAttr(1,DelRec.SubCode,
                                         iCodeAttr, iCodeDigit);    //  細目外部ｺｰﾄﾞ

            // 内部ｺｰﾄﾞ及び諸口区分を取得
//          fnSubNCodeCheck(iOyaCode,iCode,iNCode,iSyokuchiKbn);
            fnSubNCodeCheck(iOyaCode,iCode,iWkNCode,iNCode,iSyokuchiKbn);//<054>

		end;
	end;

	//	削除メッセージ表示('xxx'を削除します。よろしいですか？)
	ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
// <026> 「当該ﾏｽﾀにﾃﾞｰﾀが存在している場合、削除すると管理表に不整合が生ずる恐れがあります。
//          削除してもよろしいですか？」
	if (MjsMessageBoxEx(AOwner, // <005>
                        MSG_DELETE, MjsMsgRec.sTitle,MjsMsgRec.icontype ,
                        MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType) <> mrYes) then
	begin
		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
		Exit;
	end;

    // <CHK>↓
    if iNCode < 0 then                      // 科目別補助内部ｺｰﾄﾞ
        exCNCode := 0
    else
        exCNCode := iNCode;
                                            // 削除ﾁｪｯｸｽﾄｱﾄﾞ実行
    if not fnDelCheck(iWkNCode, exCNCode, strErr) then
    begin
                                            // 「ｺｰﾄﾞ 簡略名称 は、xxxのため削除できません。」
        strMsg := iCode2 + ' ' + sMsgName + ' ' + strErr;
// <063> MOD start Self→AOwner
//        MjsMessageBoxEx(Self, strMsg, '確認', mjInformation, mjOk, mjDefOk);
        MjsMessageBoxEx(AOwner, strMsg, '確認', mjInformation, mjOk, mjDefOk);
// <063> MOD end
		DmqDel .Close;
		DmqDel .Free;
		DmqData.Close;
		DmqData.Free;
        Exit;
    end;
    // <CHK>↑

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	bSyokuchiFlag := FALSE;

// ------------------------
//      諸口の時
// ------------------------
    if ( iSyokuchiKbn = 1 ) and ( iActive = 3 ) then	//	細目で諸口の時
	begin
		bSyokuchiFlag := TRUE;

		DmqDel.Close;
        												// 親会社DBとMQueryの接続
		MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqDel);

		if ( fnSyokuchiDel(DmqDel,iOyaNCode) = FALSE ) then
		begin
			DmqDel .Close;
			DmqDel .Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			exit;
		end;

		DmqDel.Close;
        												// 自会社(子会社)DBに戻す
		MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqDel);
	end;

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);				// 子会社DB
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);			// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始

	with DmqDel do
	begin
		//	勘定科目基本ﾏｽﾀ(KmkMA)からの削除する内部ｺｰﾄﾞを取得
		Close;
		SQL.Clear;
		SQL.Add('SELECT                 ');
		SQL.Add('    NCode              ');	//	内部ｺｰﾄﾞ
        SQL.Add('   ,CNCode             '); //  科目別補助内部ｺｰﾄﾞ
		SQL.Add('FROM KmkMA             '); //	勘定科目基本ﾏｽﾀ
        SQL.Add('WHERE RDelKbn   = 0    '); //	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        // --------------------
        //      細目時
        // --------------------
		if (iActive = 3) then
		begin
			SQL.Add('  AND MasterKbn = 2        '); //	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :Sub     ');	//	細目ｺｰﾄﾞ

			ParamByName('Code'	).AsInteger := iOyaCode;
			ParamByName('Sub'	).AsString  := iCode;
		end
        // --------------------
        //      勘定科目時
        // --------------------
		else
		begin
			SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

            ParamByName('Code').AsInteger := StrToIntDef(Trim(iCode),0);
		end;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
       	    Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
            // 削除を行う内部ｺｰﾄﾞ
			iNCode2	    :=  GetFld('NCode') .AsFloat;
            iCNCode2    :=  GetFld('CNCode').AsFloat;
		end
		// 内部ｺｰﾄﾞが存在しなかった時
		else
		begin
			showmessage('エラー140219-2');
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		DmqDel.Close;
        									// 親会社DBとMQueryの接続
		MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqDel);

		//	親会社の勘定科目基本ﾏｽﾀ関連付け(KmkMA_REL/KmkMB_REL)の削除
		if not DeleteKmkREL(iNCode2, iCNCode2, m_SyncMaster.m_nSegNCode, DmqDel) then
		begin
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
            Exit;
		end;


		if ( bS_Flag <> TRUE ) then
		begin
			case iActive of
				1:	MemGou.Delete;
				2:	MemZitsu.Delete;
				3:	MemSai.Delete;
			end;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if (iActive = 3) then	//	細目時
			TableHistory.KmkMA_Sai := TABLE_IN_UPDATE
		else
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

		//	ﾃｰﾌﾞﾙ更新履歴
		if ( iActive = 3 ) then
            //	細目時
			TableHistory.KmkMB_SaiDel := TABLE_DELETE
		else
            //  勘定科目時
			TableHistory.KmkMB_KanDel := TABLE_DELETE;

		// 同期ｽﾄｱﾄﾞ呼出
													// KMKMA同期
		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
		begin
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
   		    Exit;
		end;
													// KMKMB同期
// <068> MOD start
//		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
		begin
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
   		    Exit;		
		end;
// <069> ADD start
		DmqDel.Close;
	    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );	// 子会社DBとMQueryの接続
// <069> ADD end

        //	合計科目の時で子がいる時
		if ( iActive = 1 ) then
		begin
			iKamoku	:= ReturnKmkCode(MComboBox.ItemIndex);

			iKamokuNCode	:= GetKmkInfo(iKamoku,1,SumKbn);	    //	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)

			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				wkRec := TreeView.Items[iLoop].Data;
	    		if ( wkRec.NCode = iKamokuNCode ) then
    	    	begin
	        		TreeView.Selected   :=  TreeView.Items[iLoop];
					m_PNode             :=  TreeView.Selected;
					break;
	    	    end;
	    	end;

// <069> DEL start
(*			DmqDel.Close;
		    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );	// 子会社DBとMQueryの接続
*)
// <069> DEL end
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('        MAX(EntNo)         '); //	登録Noの最大値
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = :MasKbn  '); //  ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :ExNCode ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('MasKbn').AsInteger	:=	1;	//	ﾏｽﾀ区分(1:勘定科目)
			ParamByName('ExNCode').AsFloat  := iKamokuNCode;

			//	ｴﾗｰの判定
			if Open = FALSE then
			begin
				ErrorMessageDsp(DmqDel);
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
       		    Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iEntNo := ((GetFld('MAX(KmkTree.EntNo)').AsInteger) div 100 * 100) + 100;
			end;
		end;

        //	細目科目の時はTreeには登録していない
		if ( iActive <> 3 ) then
		begin
			//	削除するﾚｺｰﾄﾞを加算先としているﾚｺｰﾄﾞ取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    BasedNCode             ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('   ,AddKbn                 ');	//	加算区分
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        '); //  ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :Code    ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('Code').AsFloat     := iWkNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
       		    Exit;
			end;

			while ( EOF <> TRUE ) do
			begin
				iMotoNCode  := GetFld('BasedNCode')   .AsFloat;   	//	加算元内部ｺｰﾄﾞ
				iKaGeCode   := GetFld('AddKbn')       .AsInteger;		//	加算区分
				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,EntNo              ');	//	登録NO
				DmqData.SQL.Add('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,AddKbn             ');	//	加算区分
				DmqData.SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,UpdTantoNCode      ');	//	更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(') VALUES (                 ');
				DmqData.SQL.Add('        1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:SakiNCode         ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:No                ');	//	登録NO
				DmqData.SQL.Add('       ,:MotoNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:Kasan             ');	//	加算区分
				DmqData.SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:UpdTantoNCode     ');	//	更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(')                          ');

				DmqData.ParamByName('SakiNCode').AsFloat    :=  iKamokuNCode;	//	加算先内部ｺｰﾄﾞ
				DmqData.ParamByName('No')       .AsInteger  :=  iEntNo;		    //	登録NO
				DmqData.ParamByName('MotoNCode').AsFloat    :=  iMotoNCode;	    //	加算元内部ｺｰﾄﾞ
				DmqData.ParamByName('Kasan')    .AsInteger  :=  iKaGeCode;	    //	加算区分
                DmqData.ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);		// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);	// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
		            Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;

				iEntNo := iEntNo + 100;

				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wkRec := TreeView.Items[iLoop].Data;
	    			if ( wkRec.GCode = StrToIntDef(iCode2,0) ) then
    	    		begin
		        		TreeView.Selected := TreeView.Items[iLoop];
						break;
	    		    end;
	    		end;

				TreeView.Selected.Item[0].MoveTo(m_PNode,naAddChild);

				//	新しく書き換えたので前のﾚｺｰﾄﾞを削除
				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('DELETE FROM KmkTree        '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('WHERE MasterKbn  = 1       ');
				DmqData.SQL.Add('  AND SumNCode   = :Code   ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('  AND BasedNCode = :Sub    ');	//	加算元内部ｺｰﾄﾞ

				DmqData.ParamByName('Code') .AsFloat    :=  iWkNCode;
				DmqData.ParamByName('Sub')  .AsFloat    :=  iMotoNCode;

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);		// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);	// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
		            Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_KanDel	:= TABLE_DELETE;

				Next;
			end;

			//	科目加算体系(KmkTree)からの削除
			Close;
			SQL.Clear;
			SQL.Add('DELETE FROM KmkTree            '); //	科目加算体系ﾏｽﾀ

            // --------------------
            //      細目時
            // --------------------
			if ( iActive = 3 ) then
			begin
				SQL.Add('WHERE MasterKbn  = 1       ');
				SQL.Add('  AND SumNCode   = :Code   ');	//	加算先内部ｺｰﾄﾞ
				SQL.Add('  AND BasedNCode = :Sub    ');	//	加算元内部ｺｰﾄﾞ
				ParamByName('Code'	).AsFloat   := iOyaNCode;
				ParamByName('Sub'	).AsFloat   := iWkNCode;
			end
            // --------------------
            //      勘定科目時
            // --------------------
			else
			begin
				SQL.Add('WHERE MasterKbn  = 1       ');
//<051>ﾂﾘｰ上に存在する同ﾏｽﾀは全て削除する
				SQL.Add('  AND BasedNCode = :Sub    ');	//	加算元内部ｺｰﾄﾞ
				ParamByName('Sub'	).AsFloat   := iWkNCode;
			end;

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
				exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
		end;

		//	ﾂﾘｰからの削除
		for iLoop := TreeView.Items.Count-1 downto 0 do
		begin
			cNode := TreeView.Items[iLoop];
			wkRec := cNode.Data;

			if ( (iActive <> 3) and (wkRec^.GCode = StrToIntDef(iCode2,0)) ) or
               ( (iActive = 3 ) and (wkRec^.SubCode = iCode2) )          then
			begin
                // --------------------
                //      細目時
                // --------------------
				if ( iActive = 3 ) then
				begin
					cNodeOYA :=	TreeView.Items[iLoop].Parent;
					if ( cNodeOYA <> nil ) then
					begin
						wkRec2 := cNodeOYA.Data;
		             	if ( wkRec2.GCode = iOyaCode ) then
						begin
							m_Save.Node    := TreeView.Items[iLoop];
							m_Save.NodeOya := cNodeOYA;
							m_Save.Taikei  := cNode.Data;
							m_Save.DspName := m_Save.Node.Text;

							(TreeView.Items[iLoop]).delete;
                            if ( iSyokuchiKbn = 1 ) then
								MTab_N.Items.Selected := 1;
						end;
					end;
				end
				else begin
					// 科目別補助以外の時
					if ( wkRec^.MasKbn <> 2 ) then
						(TreeView.Items[iLoop]).delete;
				end;
			end;
		end;
		DmqData.Close;
    end;
	DmqData.Free;

	//	諸口が削除されたら、細目採用区分をなしにする
    if ( iSyokuchiKbn = 1 ) then
    begin
		DummyFlag := FALSE;
		if ( KbnCheck(iOyaNCode,DummyFlag,FALSE,DISPOSE_DELETE) ) then		//	RollBack時TRUE
		begin
			DmqDel.Close;
			DmqDel.Free;
			Exit;
		end;

		if ( P_Syousai.Visible = TRUE ) then
		begin
			DelNode	:= TreeView.Selected;
			DelRec	:= DelNode.Data;
			SelectDsp(DelRec.MasKbn,DelRec.Kbn,DelRec.GCode,'0');   // <013>
		end;
	end;

	MDataModule.Commit(dbCorp_Select);		// 子会社のｺﾐｯﾄ
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	DmqDel.Close;
	DmqDel.Free;

	if ( m_SetNode <> nil ) and ( iActive <> 3 ) then
		m_SetNode.Selected := TRUE;

	//	ﾊﾟﾈﾙGridの時
	if ( bS_Flag = FALSE ) then
	begin
		if ( iOyaCode <> 0 ) then
		begin
			case iOyaCode of
				//-----------------------------------------
				// SHISAN_BU   :資産の部
				// FUSAI_BU    :負債及び資本の部
				// SEIZOU_BU   :製造の部
				// GEN_KOUJI_BU:原価の部/工事原価の部
				//-----------------------------------------
				SHISAN_BU,FUSAI_BU,SEIZOU_BU,GEN_KOUJI_BU: HagureCheck();		// はぐれ表示処理
				else GridAgainDsp(DELETE,0);	//	再表示処理
			end;

		end;
	end;

	if ( iActive <> 3 ) then		//	細目削除以外
		gbKmkTree2Flag := TRUE;

	if ( grCopyPaste.GCode = StrToIntDef(iCode2,0) ) and ( grCopyPaste.MasKbn = 1 ) then
	begin
		m_CopyFlag		 := FALSE;
		MI_Paste.Enabled := FALSE;
    end;

    // 細目科目削除時にﾚｺｰﾄﾞが1件も無くなった場合に、ﾀﾌﾞを実在に切り替える
    if ( iActive = 3  ) then
    begin
        if ( MemSai.RecordCount = 0 ) then
        begin
            MTab_N.Items[0].Selected    :=  TRUE;
            MTab_N.Items[1].Selected    :=  FALSE;
            MTab_N.Items[2].Selected    :=  FALSE;
        end;
    end;

end;

//************************************************************************
//*		Component		:	MemGou ( TdxMemData )
//*							合計科目のMemDataに書き込む前
//*		Event			:	BeforePost
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MemGouBeforePost(DataSet: TDataSet);
var
	wkRec		:	^TaikeiRec;
	wRec		:	^TaikeiRec;
	CNode		:	TTreeNode;
	TNode		:	TTreeNode;
	wkNode		:	TTreeNode;
	DmqData		:	TMQuery;
	iGoukeiCode	:	Integer;
    iGoukeiNCode:   Extended;       // 内部ｺｰﾄﾞ
	iKensu		:	Integer;		// ﾚｺｰﾄﾞ件数
	iNCode		:	Extended;		// 内部ｺｰﾄﾞ
	iCode		:	Extended;		// 外部ｺｰﾄﾞ
	iWork		:	Integer;
	iLoop		:	Integer;
	Pos			:	Integer;		// SPASEまでの桁数
	iOyaCode	:	Integer;
	iUpDateFlag	:	Boolean;		// 更新処理かどうかの判断ﾌﾗｸﾞ
	sDspName	:	String;
	bNodeNilFlag:	Boolean;		// 親NodeがNilかどうかの判断
	iRet		:	Integer;		// <063> ADD
	exCNCode	:	Extended;		// <063> ADD
begin

	// 初期化処理
	iKensu		:=	0;
	iUpDateFlag	:=	FALSE;
	sDspName	:=	'';
	iRet		:= 0;				// <063> ADD

    // 最初の表示でｲﾍﾞﾝﾄが起こるのでその時は処理をしない
	if ( gbChangeFlg ) then Exit;

	if ( gbT_FusenFlag = TRUE ) then Exit;

    //	DragDrop時の合計Gridの表示
	if ( gDragGouFlag = TRUE ) then
	begin
		gDragGouFlag	:=	FALSE;
		Exit;
	end;

	if ( DSourceGou.DataSet.FieldByName('GCode').IsNull        ) or
       ( DSourceGou.DataSet.FieldByName('GCode').AsInteger = 0 ) then
	begin
		if ( gbEndFlag = TRUE ) then Exit;
		Abort;
	end;

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	iGoukeiCode	    :=  MemGou.FieldByName('GCode').AsInteger;
    iGoukeiNCode    :=  MemGou.FieldByName('NCode').AsFloat;

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);		// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADD

	with DmqData do
	begin

// ------------------------------
//	    新規作成時
// ------------------------------
		if ( DataSet.State in [dsInsert] ) then
		begin
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('   GCode                   ');	//	外部ｺｰﾄﾞ
			SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            SQL.Add('  AND NCode     = :N_Code  ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0        '); //  科目別補助内部ｺｰﾄﾞ

            ParamByName('N_Code').AsFloat   :=  iGoukeiNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				if ( DataSet.State in [dsInsert] ) then
				begin
					//	同一コードが存在してます
					ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
					MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
		    		MjsMessageBoxEx(AOwner, // <005>
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    MJsMsgRec.LogType
                                   );
					gbEndFlag := FALSE;	//HIS0051
					MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					Abort;
				end;
			end;

			if ( DSourceGou.DataSet.FieldByName('SousyokuData').AsInteger = 0 ) then
			begin
				MemGou.Open;
				MemGou.Edit;
				MemGou.FieldByName('SousyokuData').AsInteger	:=	0;
			end;

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
				DmqData.Close;
        									// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);

                // 会社関連付処理
				iRet := fnCorpRelation(MKBN_KAMOKU, MemGou.FieldByName('GCode').AsInteger, '', SUMKBN_GOUKEI,
										iNCode, exCNCode);
                case iRet of
                    0:
					begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
						// →親にinsert
                    end;
                    1:
					begin
                        // 正常に関連付が行えた場合は、画面の再描画を行う
                    end;
                    2:
					begin
                        // 会社関連付をｷｬﾝｾﾙ
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
                        Abort;
                    end;
                    -9:
					begin
                        // 例外ｴﾗｰ
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
                        Abort;
                    end;
                end;
			end;
// <063> ADD end

        {勘定科目基本マスタ(KmkMA)}
			if iRet = 0 then					// <063> ADD 以下は親会社から取り込んだ場合に通さない
			begin								// <063> ADD
            // 内部ｺｰﾄﾞの取得
            iNCode  :=  GetNewNCode;

			//	基本ﾏｽﾀへのﾚｺｰﾄﾞの追加
			Close;
			SQL.Clear;
			SQL.Add('INSERT INTO KmkMA (    '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('        MasterKbn      ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumKbn         ');	//	実在/合計区分
            SQL.Add('       ,NCode          ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,CNCode         '); //  科目別補助内部ｺｰﾄﾞ
            SQL.Add('       ,RDelKbn        ');	//	ﾚｺｰﾄﾞ区分
			SQL.Add('       ,GCode          ');	//	外部ｺｰﾄﾞ
			SQL.Add('       ,SubCode        ');	//	細目ｺｰﾄﾞ
			SQL.Add('       ,Renso          ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('       ,LongName       ');	//	正式名称
			SQL.Add('       ,SimpleName     ');	//	簡略名称
            SQL.Add('       ,TStartDate     '); //  適用期間（自）
            SQL.Add('       ,TEndDate       '); //  適用期間（至）
			SQL.Add('       ,BPKbn          ');	//	BS/PL区分
			SQL.Add('       ,DCKbn          ');	//	正残区分
			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
			begin
				SQL.Add('       ,NonDspKbn      ');	//	表示／印刷不可区分
			end;
			SQL.Add('       ,UpdTantoNCode  ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') VALUES (             ');
			SQL.Add('        1              ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('       ,1              ');	//	実在/合計区分(1:合計)
            SQL.Add('       ,:NaibuCode     ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,0              '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,0              ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.Add('       ,:GaibuCode     ');	//	外部ｺｰﾄﾞ
// <013>			SQL.Add('       ,''''           ');	//	細目ｺｰﾄﾞ
			SQL.Add('       ,''0''          ');	//	細目ｺｰﾄﾞ<013>
			SQL.Add('       ,:Rensou        ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('       ,:SeisikiName   ');	//	正式名称
			SQL.Add('       ,:KanName       ');	//	簡略名称
            SQL.Add('       ,:StartDate     '); //  適用期間（自）
            SQL.Add('       ,:EndDate       '); //  適用期間（至）
			SQL.Add('       ,:BPkbn         ');	//	BS/PL区分
			SQL.Add('       ,:Seizan        ');	//	正残区分
			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
			begin
				SQL.Add('       ,:Dsp           ');	//	表示／印刷不可区分
			end;
			SQL.Add('       ,:UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                      ');

			ParamByName('NaibuCode')    .AsFloat    :=  iNCode;	                                    //  内部ｺｰﾄﾞ
            MemGou.FieldByName('NCode') .AsFloat    :=  iNCode;		                                //	内部ｺｰﾄﾞ
			ParamByName('GaibuCode')    .AsInteger  :=  MemGou.FieldByName('GCode')     .AsInteger;	//	外部ｺｰﾄﾞ
			ParamByName('Rensou')       .AsString	:=  fnDelCRLF(MemGou.FieldByName('GRen')      .AsString);	//	連想ｼﾝﾎﾞﾙ <DKAI>
			ParamByName('SeisikiName')  .AsString	:=  fnDelCRLF(MemGou.FieldByName('GLongName') .AsString);	//	正式名称  <DKAI>
			ParamByName('KanName')      .AsString	:=  fnDelCRLF(MemGou.FieldByName('GSName')    .AsString);	//	簡略名称  <DKAI>
            ParamByName('StartDate')    .AsDateTime :=  m_cJNTArea.getDefDate(1);                   //  適用期間（自）
            ParamByName('EndDate')      .AsDateTime :=  m_cJNTArea.getDefDate(2);                   //  適用期間（至）

			case MComboBox.ItemIndex of
				//	資産科目,負債／資本科目
				0,1: ParamByName('BPKbn').AsInteger :=  0;		//	B/S
				//	損益科目,製造科目
				2,3: ParamByName('BPKbn').AsInteger :=  1;		//	P/L
			end;

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
			begin
            	//すべて
				ParamByName('Seizan')   .AsInteger  :=  m_CopyInfo.SeiZan;		//	正残区分
				ParamByName('Dsp')      .AsInteger  :=  m_CopyInfo.DspPri;		//	表示／印刷不可区分
			end
            //<118>ADD↓
            else if ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = TRUE ) then
			begin
            	//選択
            	if ( m_DLGCopyInfo.Seizan ) then
                begin
					ParamByName('Seizan')   .AsInteger  :=  m_CopyInfo.SeiZan;	//	正残区分
                end;
            end
            //<118>ADD↑
			else
				ParamByName('Seizan')   .AsInteger	:=  0;						//	正残区分
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

		{勘定科目詳細情報(KmkMB)}
			Close;
			SQL.Clear;
			SQL.Add('INSERT INTO KmkMB (    '); //	勘定科目詳細情報
            SQL.Add('        MasterKbn      ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumKbn         ');	//	実在/合計区分
			SQL.Add('       ,NCode       ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,CNCode       '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,DecoKbn        ');	//	装飾区分

			// F8ｺﾋﾟｰ時かつすべて又は出力情報のみ
			if ( m_F8CopyFlag = TRUE ) and (( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE )) then
			begin
				SQL.Add('       ,MinusKbn       ');	//	ﾏｲﾅｽ印刷区分
				SQL.Add('       ,SagakuKbn      ');	//	差額印刷区分
				SQL.Add('       ,ProfitKbn      ');	//	利益印刷区分
				SQL.Add('       ,MinusName      ');	//	ﾏｲﾅｽ変換科目名
                SQL.Add('       ,CharCode2      '); //  性格ｺｰﾄﾞ2<058>
			end;
			SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') VALUES (             ');
            SQL.Add('        1              ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('       ,1              ');	//	実在/合計区分(1:合計)
			SQL.Add('       ,:NaibuCode     ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,0              '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,:Sousyoku      ');	//	装飾区分

			// F8ｺﾋﾟｰ時かつすべて又は出力情報のみ
			if ( m_F8CopyFlag = TRUE ) and (( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE )) then
			begin
				SQL.Add('       ,:MainaPriKbn   ');	//	ﾏｲﾅｽ印刷区分
				SQL.Add('       ,:SagakuPriKbn  ');	//	差額印刷区分
				SQL.Add('       ,:RiekiPriKbn   ');	//	利益印刷区分
				SQL.Add('       ,:MainaKmk      ');	//	ﾏｲﾅｽ変換科目名
                SQL.Add('       ,:CharCode2     '); //  性格ｺｰﾄﾞ2<058>
			end;
			SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                      ');

			ParamByName('NaibuCode').AsFloat    :=  iNCode;
			ParamByName('Sousyoku') .AsInteger  :=  MemGou.FieldByName('SousyokuCode')  .AsInteger;

			// F8ｺﾋﾟｰ時かつすべて又は出力情報のみ
			if ( m_F8CopyFlag = TRUE ) and (( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE )) then
			begin
				ParamByName('MainaPriKbn')  .AsInteger  :=  m_CopyInfo.MainasuPri;		//	ﾏｲﾅｽ印刷区分
				ParamByName('SagakuPriKbn') .AsInteger  :=  m_CopyInfo.SagakuPri;		//	差額印刷区分
				ParamByName('RiekiPriKbn')  .AsInteger  :=  m_CopyInfo.RiekiPri;		//	利益印刷区分
				ParamByName('MainaKmk')     .AsString   :=  m_CopyInfo.MainasuName;	    //	ﾏｲﾅｽ変換科目名
                ParamByName('CharCode2')    .AsInteger  :=  m_CopyInfo.CharCD2;         //  性格ｺｰﾄﾞ2<058>
			end;
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;
			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMB_Kan := TABLE_IN_UPDATE;

// <063> ADD start

			{ 親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出) }
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
													// KMKMA同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
													// KMKMB同期
// <068> MOD start
//				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
			end;
				DmqData.Close;
        											// 子会社(自会社)DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);
			end;									// 親から関連付けた場合には通らない end

			{ ｸﾞﾙｰﾌﾟ会計を採用している場合、全子会社にRELを作成 }
			if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) then
			begin									// 全子会社にRELを作成
				if not fnAllCorpRelation(iNCode, exCNCode) then
				begin								// ﾛｰﾙﾊﾞｯｸ
					MDataModule.Rollback (dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
			end;
// <063> ADD end

		{科目加算体系マスタ(KmkTree)}

			//	加算体系の内部ｺｰﾄﾞの件数取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                         ');
			SQL.Add('   MAX(EntNo)                  ');	//	登録NOの最大値
			SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1            ');
			SQL.Add('  AND SumNCode  = :SakiCode    ');	//	加算先外部ｺｰﾄﾞ

			TNode           :=  TreeView.Selected;
			wkRec           :=  TNode.Data;
			bNodeNilFlag    :=	FALSE;

            // -----------------
            //	    実在時
            // -----------------
			if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
			begin
				TNode := TNode.Parent;
				if ( TNode = nil ) then
				begin
					iCode           :=  0;
					bNodeNilFlag    :=	TRUE;
				end
				else
				begin
					wkRec   :=  TNode.Data;
					iCode   :=  wkRec^.NCode;
				end;
			end
			else
				iCode   :=  wkRec^.NCode;

			if ( iCode = 0 ) then
				bNodeNilFlag    :=  TRUE;

			ParamByName('SakiCode').AsFloat   :=  iCode;		//	加算先内部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄) 	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iWork  := GetFld('MAX(KmkTree.EntNo)').AsInteger;	//	登録NOの最大値
				iKensu := Trunc(iWork / 100) * 100;
				if ( iKensu = 0 ) then
					    iKensu := 100
				else    iKensu := iKensu + 100;
			end;

			if ( bNodeNilFlag = FALSE ) then
			begin
				//	加算体系へのﾚｺｰﾄﾞの追加
				Close;
				SQL.Clear;
				SQL.Add('INSERT INTO KmkTree (      '); //	加算体系ﾏｽﾀ
				SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
				SQL.Add('       ,SumNCode           ');	//	加算先外部ｺｰﾄﾞ
				SQL.Add('       ,EntNo              ');	//	登録NO
				SQL.Add('       ,BasedNCode         ');	//	加算元外部ｺｰﾄﾞ
				SQL.Add('       ,AddKbn             ');	//	加算区分
				SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分
				SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add(') VALUES (                 ');
				SQL.Add('        1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('       ,:SakiCode          ');	//	加算先外部ｺｰﾄﾞ
				SQL.Add('       ,:T_No              ');	//	登録NO
				SQL.Add('       ,:MotoCode          ');	//	加算元外部ｺｰﾄﾞ
				SQL.Add('       ,0                  ');	//	加算区分(0:加算)
				SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add(')                          ');

				ParamByName('SakiCode') .AsFloat    :=  iCode;
				ParamByName('T_No')     .AsInteger  :=  iKensu;
				ParamByName('MotoCode') .AsFloat    :=  MemGou.FieldByName('NCode').AsFloat;
                ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					DmqData.Close;
					DmqData.Free;
    				Abort;  // <060>Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;
			end;

            //	先頭からSPACEまでの桁数COUNT
			Pos	:= MJSHanPos(' ', MTab_N.BorderCaption);
			if ( Pos <> 0 ) then
			begin
                //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
				iOyaCode :=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));

			    // Selectedのセット
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wRec :=	TreeView.Items[iLoop].Data;
	    			if ( wRec.GCode = iOyaCode ) then
	    	    	begin
						wkNode := TreeView.Items[iLoop];
						New(wkRec);
						wkRec.NCode		:=	MemGou.FieldByName('NCode') .AsFloat;
                        wkRec.CNCode    :=  MemGou.FieldByName('CNCode').AsFloat;
						wkRec.GCode		:=	MemGou.FieldByName('GCode') .AsInteger;
// <013>                        wkRec.SubCode   :=  '';
                        wkRec.SubCode   :=  '0';    // <013>
						wkRec.Kbn		:=	1;
						wkRec.KoteiKbn	:=	0;
						wkRec.MasKbn	:=	1;
						wkRec.Name		:=	MemGou.FieldByName('GSName').AsString;
						wkRec.AddKbn	:=  0;
						wkRec.ChildKbn	:=	FALSE;
						wkRec.NotAdd	:=	1;
                        wkRec.Syokuchi  :=  0;
                        wkRec.CodeAttr  :=  0;
                        wkRec.CodeDigit :=  0;

						if ( m_F8CopyFlag = FALSE ) then
						begin
							sDspName    :=	GetSousyoku(wkRec.Name,(MemGou.FieldByName('SousyokuCode').AsInteger));
		    		       	CNode	    :=  TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,sDspName),wkRec);
						end
						else
						begin
							//	装飾区分
							if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
							begin
								sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
					           	CNode	    :=  TreeView.Items.AddChildobject(wkNode,sDspName,wkRec);
							end
							else
							begin
								sDspName    :=	GetSousyoku(wkRec.Name,(MemGou.FieldByName('SousyokuCode').AsInteger));
			    		       	CNode	    :=  TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,sDspName),wkRec);
							end;
						end;

        			    CNode.ImageIndex    :=  0;
						Cnode.SelectedIndex :=  1;
						TreeView.Items[iLoop].Expanded := TRUE;
			        end;
    			end;
			end
            else
			begin
				New(wkRec);
				wkRec.NCode		:=	MemGou.FieldByName('NCode') .AsFloat;
                wkRec.CNCode    :=  MemGou.FieldByName('CNCode').AsFloat;
				wkRec.GCode		:=	MemGou.FieldByName('GCode') .AsInteger;
// <013>                wkRec.SubCode   :=  '';
                wkRec.SubCode   :=  '0';    // <013>
				wkRec.Kbn		:=	1;
				wkRec.KoteiKbn	:=	0;
				wkRec.MasKbn	:=	1;
				wkRec.Name		:=	MemGou.FieldByName('GSName').AsString;
				wkRec.AddKbn	:=  0;
				wkRec.ChildKbn	:=	FALSE;
				wkRec.NotAdd	:=	0;
                wkRec.Syokuchi  :=  0;
                wkRec.CodeAttr  :=  0;
                wkRec.CodeDigit :=  0;

				if ( m_F8CopyFlag = FALSE ) then
				begin
					sDspName    :=	GetSousyoku(wkRec.Name,(MemGou.FieldByName('SousyokuCode').AsInteger));
   			       	CNode       :=  TreeView.Items.AddChildobject(nil,MakeDspString(wkRec.GCode,sDspName),wkRec);
				end
				else
				begin
					//	装飾区分
					if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
					begin
						sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
			           	CNode	    :=  TreeView.Items.AddChildobject(nil,sDspName,wkRec);
					end
					else
					begin
						sDspName    :=	GetSousyoku(wkRec.Name,(MemGou.FieldByName('SousyokuCode').AsInteger));
   				       	CNode       :=  TreeView.Items.AddChildobject(Nil,MakeDspString(wkRec.GCode,sDspName),wkRec);
					end;
				end;

				CNode.ImageIndex    :=  0;
				Cnode.SelectedIndex :=  1;
			end;
			gbKmkTree2Flag  :=  TRUE;

			SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
			m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  MemGou.FieldByName('NCode').AsFloat;
            m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  MemGou.FieldByName('CNCode').AsFloat;
			m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  ' ';

			m_NewFlag   :=  TRUE;	// 新規登録されたのでﾌﾗｸﾞをTRUEにする

		end;

// ------------------------
//	    更新処理時
// ------------------------
		if ( Dataset.State in [dsEdit] ) then
		begin
        {勘定科目基本マスタ(KmkMA)}
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
				DmqData.Close;
        									// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);
			end;
// <063> ADD end

			//	基本ﾏｽﾀへのﾚｺｰﾄﾞの更新
			Close;
			SQL.Clear;
			SQL.Add('UPDATE KmkMA SET               '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('    Renso      = :Rensou       ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('   ,LongName   = :SeisikiName  ');	//	正式名称
			SQL.Add('   ,SimpleName = :KanName      ');	//	簡略名称
			SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
            SQL.Add('WHERE RDelKbn   = 0            ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            SQL.Add('  AND NCode     = :ANCode      ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :ACNCode     '); //  科目別補助内部ｺｰﾄﾞ
			SQL.ADD('  AND MasterKbn = 1            ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND SumKbn    = 1            ');	//	実在/合計区分(1:合計)

            ParamByName('ANCode')       .AsFloat    :=  MemGou.FieldByName('NCode')     .AsFloat;	//  内部ｺｰﾄﾞ
            ParamByName('ACNCode')      .AsFloat    :=  MemGou.FieldByName('CNCode')    .AsFloat;	//	科目別補助内部ｺｰﾄﾞ
			ParamByName('Rensou')       .AsString	:=  fnDelCRLF(MemGou.FieldByName('GRen')      .AsString);	//	連想ｼﾝﾎﾞﾙ <DKAI>
			ParamByName('SeisikiName')  .AsString   :=  fnDelCRLF(MemGou.FieldByName('GLongName') .AsString);	//	正式名称  <DKAI>
			ParamByName('KanName')      .AsString   :=  fnDelCRLF(MemGou.FieldByName('GSName')    .AsString);	//	簡略名称  <DKAI>
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

        {勘定科目基本マスタ(KmkMB)}
			//	基本ﾏｽﾀへのﾚｺｰﾄﾞの更新
			Close;
			SQL.Clear;
			SQL.Add('UPDATE KmkMB SET               '); //	勘定科目詳細情報
			SQL.Add('   DecoKbn = :Sousyoku         ');	//	装飾区分
			SQL.Add('  ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
            SQL.Add('WHERE NCode     = :ANCode      '); //	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :ACNCode     '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('  AND MasterKbn = 1            ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND SumKbn    = 1            ');	//	実在/合計区分(1:合計)

            ParamByName('ANCode')   .AsFloat    :=  MemGou.FieldByName('NCode')         .AsFloat;	//	内部ｺｰﾄﾞ
            ParamByName('ACNCode')  .AsFloat    :=  MemGou.FieldByName('CNCode')        .AsFloat;	//	科目別補助内部ｺｰﾄﾞ
			ParamByName('Sousyoku' ).AsInteger  :=  MemGou.FieldByName('SousyokuCode')  .AsInteger;	//	簡略名称
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

			iUpDateFlag	:= TRUE;

// <063> ADD start
			{親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出)}
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
													// KMKMA同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
													// KMKMB同期
// <068> MOD start
//				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;

				DmqData.Close;
        											// 子会社(自会社)DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);
			end;
// <063> ADD end

			for iLoop := 0 to TreeView.Items.Count-1 do
			begin
				TreeView.Items[iLoop];
				wkRec := TreeView.Items[iLoop].Data;
				CNode := TreeView.Items[iLoop];
				if ( wkRec^.GCode = iGoukeiCode ) and ( wkRec^.Kbn = 1 ) and ( wkRec^.MasKbn = 1 )then
				begin
					sDspName    :=	GetSousyoku(MemGou.FieldByName('GSName').AsString,(MemGou.FieldByName('SousyokuCode').AsInteger));
					CNode.Text  :=  MakeDspString(MemGou.FieldByName('GCode').AsInteger,sDspName);
				end;
			end;
		end;
	end;

	DmqData.Close;
	DmqData.Free;

	MDataModule.Commit (dbCorp_Select);		// ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ <063> ADD

	m_F8CopyFlag := FALSE;

	if ( gbFusenFlag = FALSE ) then
	begin
		if ( iUpDateFlag = TRUE ) then			//	更新時は再表示のみ
			exit;
	end;
	gbFusenFlag	:= FALSE;

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

end;

//************************************************************************
//*		Component		:	MemZitsu ( TdxMemData )
//*							実在科目のMemDataに書き込む前
//*		Event			:	BeforePost
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MemZitsuBeforePost(DataSet: TDataSet);
var
	wkRec		:	^TaikeiRec;
	CNode		:	TTreeNode;
	DmqData		:	TMQuery;
	iCode		:	Extended;
	iKensu		:	Integer;		//	ﾚｺｰﾄﾞ件数
	TNode		:	TTreeNode;
	iGCode		:	Integer;		//	外部ｺｰﾄﾞ
	iWork		:	Integer;
	iLoop		:	Integer;
	Pos			:	Integer;		//	SPASEまでの桁数
	iOyaCode	:	Integer;
	wRec		:	^TaikeiRec;
	wkNode		:	TTreeNode;
	DfRec		:	DefaultRec;		//	分析ｺｰﾄﾞのﾃﾞﾌｫﾙﾄ情報
	Employ		:	SaiyouRec;
	iYouBun		:	Integer;
	iCharCode	:	Integer;        //	性格ｺｰﾄﾞ
	iAnaCode	:	Integer;        //	分析ｺｰﾄﾞ
	iBPKbn		:	Integer;		//	BS/PL区分	// <121>ADD
	iwkCharCode	:	Integer;        //	性格ｺｰﾄﾞ
	iwkAnaCode	:	Integer;        //	分析ｺｰﾄﾞ
	bParentNode	:	Boolean;		//	親NodeがNilかどうかの判断
	sDspName	:	String;
	Sousyoku	:	Integer;
    iNCode      :   Extended;       // 内部ｺｰﾄﾞ
    iZitsuNCode :   Extended;       // 内部ｺｰﾄﾞ
	iRet		:	Integer;		// <063> ADD
	exCNCode	:	Extended;		// <063> ADD
begin

	//	初期化処理
	iKensu	  := 0;
	iCharCode := 0;
	iAnaCode  := 0;
	iBPKbn    := 0;					// <121>ADD
	iRet	  := 0;					// <063> ADD

    //	最初の表示でｲﾍﾞﾝﾄが起こるのでその時は処理をしない
	if ( gbChangeFlg ) then
		Exit;

	if ( gbT_FusenFlag = TRUE ) then
		Exit;

    //	DragDrop時の実在Gridの表示
	if ( gDragJitsuFlag = TRUE ) then
	begin
		gDragJitsuFlag := FALSE;
		Exit;
	end;

    //hiro0613(LoadAllRecordに関係してる)
	DSourceZitsu.DataSet :=	MemZitsu;

	if ( DSourceZitsu.DataSet.FieldByName('Code').IsNull        ) or
       ( DSourceZitsu.DataSet.FieldByName('Code').AsInteger = 0 ) then
	begin
		if ( gbEndFlag = TRUE ) then		//	HIS0044
			Exit;
		Abort;
	end;

	iGCode      :=  MemZitsu.FieldByName('Code')    .AsInteger;
	iZitsuNCode :=  MemZitsu.FieldByName('NCode')   .AsFloat;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	if not( BunsekiCheck() ) then		//	HIS0002
	begin
		DmqData.Close;
		DmqData.Free;
		Abort;  // <060>Exit;
	end;

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	MDataModule.BeginTran (dbCorp_Select);		// ﾄﾗﾝｻﾞｸｼｮﾝの開始
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);	// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADD

	with DmqData do
	begin

// -----------------------------
//	    新規登録時
// -----------------------------
		if ( DataSet.State in [dsInsert] ) then
		begin
			//	同一ｺｰﾄﾞが登録されているかﾁｪｯｸ
			Close;
			SQL.Clear;
			SQL.ADD('SELECT                     ');
			SQL.ADD('   GCode                   ');	//	外部ｺｰﾄﾞ
			SQL.ADD('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
            SQL.ADD('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.ADD('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.ADD('  AND GCode     = :G_Code  ');	//	外部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0        '); //  科目別補助内部ｺｰﾄﾞ

			ParamByName('G_Code').AsInteger := iGCode;	//	外部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				if DataSet.State in [dsInsert] then
				begin
					//	同一コードが存在してます
                    ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
					MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
		    		MjsMessageBoxEx(AOwner, // <005>
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    MJsMsgRec.LogType
                                   );
					gbEndFlag := FALSE;	//HIS0051
					MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					Abort;
				end;
			end;
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
				DmqData.Close;
        									// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);

                // 会社関連付処理
				iRet := fnCorpRelation(MKBN_KAMOKU, MemZitsu.FieldByName('Code').AsInteger, '', SUMKBN_JITUZAI,
										iNCode, exCNCode);
                case iRet of
                    0:
					begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
						// →親にinsert
                    end;
                    1:
					begin
                        // 正常に関連付が行えた場合は、画面の再描画を行う
						// 選択中のﾉｰﾄﾞを再表示(ﾂﾘｰ・ｸﾞﾘｯﾄﾞ)
						GridAgainDsp(AGAIN, iNCode);
                    end;
                    2:
					begin
                        // 会社関連付をｷｬﾝｾﾙ
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
                        Abort;
                    end;
                    -9:
					begin
                        // 例外ｴﾗｰ
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
                        Abort;
                    end;
                end;
			end;
// <063> ADD end

		{勘定科目基本マスタ(KmkMA)}
			if iRet = 0 then					// <063> ADD 以下は親会社から取り込んだ場合に通さない
			begin								// <063> ADD
			//	Nodeが変わった時の分析・性格名称表示処理
			//	性格ｺｰﾄﾞ
			if ( DSourceZitsu.DataSet.FieldByName('SeikakuData').AsInteger = 0 ) then
			begin
				MemZitsu.Open;
				MemZitsu.Edit;
				MemZitsu.FieldByName('SeikakuData').AsInteger	:=	0;
			end;

			//	分析ｺｰﾄﾞ
			if ( DSourceZitsu.DataSet.FieldByName('BunsekiNO').IsNull ) then
			begin
				MemZitsu.Open;
				MemZitsu.Edit;
				MemZitsu.FieldByName('BunsekiNO').AsInteger	:=	0;
				MemZitsu.FieldByName('Bunseki').AsString    :=  GetSKmkMA(BUNSEKI,0,iWork);
			end;

			//	分析ｺｰﾄﾞのﾃﾞﾌｫﾙﾄｾｯﾄ
			for iLoop := 0 to 112 do
			begin
				if ( aDefault[iLoop].Code = MemZitsu.FieldByName('BunsekiNO').AsInteger ) then
				begin
					DfRec.Code := aDefault[iLoop].Code;		//	分析ｺｰﾄﾞ

			//--- HIS0041 START -----
					//	F8ｺﾋﾟｰではない時
					if ( m_F8CopyFlag = FALSE ) then
					begin
						DfRec.SeiZan    :=  aDefault[iLoop].SeiZan;		//	正残区分(0:借方、1:貸方)
						DfRec.Kisyuzan  :=  aDefault[iLoop].Kisyuzan;	//	期首残(0:なし、1:あり)
					//--- HIS0059 START -----
						if ( fnFurikaeCheck(iGCode) = FALSE ) then
							DfRec.Shiwake  := aDefault[iLoop].Shiwake	//	仕訳入力区分(0:貸借入力、1:正残側のみ、2:負残側のみ、9:入力不可)
						else
							DfRec.Shiwake  := 9;	                    //	仕訳入力区分(9:入力不可)
					//--- HIS0059  END  -----
                        DfRec.Mainasu  := aDefault[iLoop].Mainasu;	    //	ﾏｲﾅｽ印刷区分(0:なし、1:あり)
					end
					else
					begin
						//	正残区分
						if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Seizan = TRUE ) then
							DfRec.SeiZan :=	m_CopyInfo.SeiZan
						else
							DfRec.SeiZan :=	aDefault[iLoop].SeiZan;
						//	期首残
						if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kisyu = TRUE ) then
							DfRec.Kisyuzan := m_CopyInfo.KisyuZan
						else
							DfRec.Kisyuzan := aDefault[iLoop].Kisyuzan;
						//	入力条件
						if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Inp = TRUE ) then
							DfRec.Shiwake := m_CopyInfo.Shiwake
						else
							DfRec.Shiwake := aDefault[iLoop].Shiwake;
						//	ﾏｲﾅｽ印刷区分
						if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
							DfRec.Mainasu := m_CopyInfo.MainasuPri
						else
							DfRec.Mainasu := aDefault[iLoop].Mainasu;
					end;
			//--- HIS0041 END --------
				//--- HIS0066 START -----
					if ( aDefault[iLoop].BPKbn < 0 ) then
					begin
						case MComboBox.ItemIndex of
							0,1: DfRec.BPKbn := 0; //B/S
							2,3: DfRec.BPKbn := 1; //P/L
                        end;
					end
					else
					begin
					//--- HIS0072 START -----
						if ( aTokuteiKmkCode[12] = iGCode ) then	//科目が特定科目の前期繰越利益と一致した時
							DfRec.BPKbn := 1		                //	BS/PL区分(1:P/L)
						else
					//--- HIS0072  END  -----
							DfRec.BPKbn	:= aDefault[iLoop].BPKbn;	//	BS/PL区分(0:B/S、1:P/L)
					end;
				//--- HIS0066  END  -----

					DfRec.TaxKbn  := aDefault[iLoop].TaxKbn;		//	消費税科目区分(0:対象外、1:売上科目、2:仕入科目)
					DfRec.TaxCode := aDefault[iLoop].TaxCode;	    //	消費税ｺｰﾄﾞ(0:なし、10～99)
				//--- HIS0032 START -----
					DfRec.YouyakuCode := aDefault[iLoop].YouyakuCode;	//	要約ｺｰﾄﾞ
					DfRec.KoteiCode   := aDefault[iLoop].KoteiCode;		//	固定費ｺｰﾄﾞ
					DfRec.HendoCode   := aDefault[iLoop].HendoCode;		//	変動費ｺｰﾄﾞ
				//--- HIS0032 END -------
					break;
				end;
			end;

            // 内部ｺｰﾄﾞの取得
            iNCode  :=  GetNewNCode;

			Employ.Bumon            :=	0;	//	部門
			Employ.Kouji            :=	0;	//	工事
            for iLoop := 0 to 9 do
    			Employ.Seg[iLoop]   :=	0;	//	ｾｸﾞﾒﾝﾄ
                
// <120>MOD↓
//			MasInfoKmkCodeCheck(MemZitsu.FieldByName('Code').AsInteger,DfRec.BPKbn,Employ);
//
//            // 科目ｺﾋﾟｰ時
//			if ( m_F8CopyFlag = TRUE ) then
//			begin
//                // ------------------------------
//    			//	        部門採用区分
//                // ------------------------------
//				if ( EMPLOY.Bumon      = 1 ) and
//                   ( m_CopyInfo.BmnUse = 2 ) then
//					Employ.Bumon := 2
//				else if ( m_CopyInfo.BmnUse = 0 ) then
//					Employ.Bumon := 0;
//
//                // ------------------------------
//                //	      ｾｸﾞﾒﾝﾄ採用区分
//                // ------------------------------
//                for iLoop := 0 to 9 do
//                begin
//				    if ( EMPLOY.Seg[iLoop] = 1 ) and
//                       ( m_CopyInfo.SegUse = 2 ) then
//    					Employ.Seg[iLoop] := 2
//    				else if ( m_CopyInfo.SegUse = 0 ) then
//    					Employ.Seg[iLoop] := 0;
//                end;
//			end
//			else
//			begin
//                // ------------------------------
//    			//	部門採用区分
//                // ------------------------------
//				if ( EMPLOY.Bumon = 1 ) and ( m_Bmn = 2 ) then
//					Employ.Bumon := 2
//				else
//					Employ.Bumon := EMPLOY.Bumon;
//
//                // ------------------------------
//                //	      ｾｸﾞﾒﾝﾄ採用区分
//                // ------------------------------
//                for iLoop := 0 to 9 do
//                begin
//				    if ( EMPLOY.Seg[iLoop] = 1 ) and
//                       ( m_Seg[iLoop]      = 2 ) then
//					    Employ.Seg[iLoop]   :=  2
//    				else
//    					Employ.Seg[iLoop]   :=  Employ.Seg[iLoop];
//    			end;
//            end;

			MasInfoKmkCodeCheck(MemZitsu.FieldByName('Code').AsInteger, DfRec.BPKbn,
            					MemZitsu.FieldByName('BunsekiNO').AsInteger, Employ);

			// 科目ｺﾋﾟｰ時
			if (m_F8CopyFlag = TRUE) then
            begin
	            // 分析ｺｰﾄﾞをｺﾋﾟｰしている場合
				if (m_DLGCopyInfo.Choice = FALSE or m_DLGCopyInfo.Bunseki = TRUE) then
				begin
					// 科目ｺﾋﾟｰ時にMasInfoKmkCodeCheckでﾁｪｯｸ済みの為、ﾒﾝﾊﾞ変数をそのままｾｯﾄする
					// 部門採用区分
					Employ.Bumon := m_CopyInfo.BmnUse;
					// ｾｸﾞﾒﾝﾄ採用区分
					for iLoop := 0 to 9 do
					begin
						Employ.Seg[iLoop] := m_CopyInfo.SegUse[iLoop];
					end;
				end
	            // 分析ｺｰﾄﾞをｺﾋﾟｰしていない場合
				else
                begin
					// 部門、ｾｸﾞﾒﾝﾄ採用区分はMasInfoKmkCodeCheckで取得した部門、ｾｸﾞﾒﾝﾄ採用区分で登録する
                	// (ｺﾋﾟｰしない)
				end;
			end
            // 通常の新規登録時
			else
			begin
               	// 部門、ｾｸﾞﾒﾝﾄ採用区分はMasInfoKmkCodeCheckで取得した部門、ｾｸﾞﾒﾝﾄ採用区分で登録する
			end;
// <120>MOD↑

		    //	基本ﾏｽﾀへのﾚｺｰﾄﾞの追加
			Close;
			SQL.Clear;
			SQL.Add('INSERT INTO KmkMA (    '); //  勘定科目基本ﾏｽﾀ
			SQL.Add('        MasterKbn      '); //  ﾏｽﾀ区分
			SQL.Add('       ,SumKbn         '); //  実在/合計区分
            SQL.Add('       ,NCode          '); //  内部ｺｰﾄﾞ
            SQL.Add('       ,CNCode         '); //  科目別補助内部ｺｰﾄﾞ
            SQL.Add('       ,RDelKbn        '); //  ﾚｺｰﾄﾞ区分
			SQL.Add('       ,GCode          '); //  外部ｺｰﾄﾞ
			SQL.Add('       ,SubCode        '); //  細目ｺｰﾄﾞ
			SQL.Add('       ,Renso          '); //  連想ｼﾝﾎﾞﾙ
			SQL.Add('       ,LongName       '); //  正式名称
			SQL.Add('       ,SimpleName     '); //  簡略名称
            SQL.Add('       ,TStartDate     '); //  適用期間（自）
            SQL.Add('       ,TEndDate       '); //  適用期間（至）
			SQL.Add('       ,CharCode       '); //  性格ｺｰﾄﾞ
// <023>			SQL.Add('       ,SubKmkUse      '); //  細目科目採用区分
            SQL.Add('       ,BmnUse         '); //  部門採用区分
            SQL.Add('       ,SegUse1        '); //  ｾｸﾞﾒﾝﾄ1採用区分
            SQL.Add('       ,SegUse2        '); //  ｾｸﾞﾒﾝﾄ2採用区分
            SQL.Add('       ,SegUse3        '); //  ｾｸﾞﾒﾝﾄ3採用区分
            SQL.Add('       ,SegUse4        '); //  ｾｸﾞﾒﾝﾄ4採用区分
            SQL.Add('       ,SegUse5        '); //  ｾｸﾞﾒﾝﾄ5採用区分
            SQL.Add('       ,SegUse6        '); //  ｾｸﾞﾒﾝﾄ6採用区分
            SQL.Add('       ,SegUse7        '); //  ｾｸﾞﾒﾝﾄ7採用区分
            SQL.Add('       ,SegUse8        '); //  ｾｸﾞﾒﾝﾄ8採用区分
            SQL.Add('       ,SegUse9        '); //  ｾｸﾞﾒﾝﾄ9採用区分
            SQL.Add('       ,SegUse10       '); //  ｾｸﾞﾒﾝﾄ10採用区分
            SQL.Add('       ,PrjUse1        '); //  ﾌﾟﾛｼﾞｪｸﾄ1採用区分
            SQL.Add('       ,PrjUse2        '); //  ﾌﾟﾛｼﾞｪｸﾄ2採用区分
            SQL.Add('       ,PrjUse3        '); //  ﾌﾟﾛｼﾞｪｸﾄ3採用区分
            SQL.Add('       ,PrjUse4        '); //  ﾌﾟﾛｼﾞｪｸﾄ4採用区分
            SQL.Add('       ,PrjUse5        '); //  ﾌﾟﾛｼﾞｪｸﾄ5採用区分
            SQL.Add('       ,PrjUse6        '); //  ﾌﾟﾛｼﾞｪｸﾄ6採用区分
            SQL.Add('       ,PrjUse7        '); //  ﾌﾟﾛｼﾞｪｸﾄ7採用区分
            SQL.Add('       ,PrjUse8        '); //  ﾌﾟﾛｼﾞｪｸﾄ8採用区分
            SQL.Add('       ,PrjUse9        '); //  ﾌﾟﾛｼﾞｪｸﾄ9採用区分
            SQL.Add('       ,PrjUse10       '); //  ﾌﾟﾛｼﾞｪｸﾄ10採用区分
			SQL.Add('       ,AnalyzeCode    '); //  分析ｺｰﾄﾞ
			SQL.Add('       ,SumAnaCode     ');	//	要約分析ｺｰﾄﾞ
			SQL.Add('       ,DCKbn          ');	//	正残区分
			SQL.Add('       ,BPKbn          ');	//	BS/PL区分
			SQL.Add('       ,KisyuKbn       ');	//	期首残区分
			SQL.Add('       ,TaxKbn         ');	//	消費税科目区分
			case DfRec.TaxKbn of
				1:	SQL.Add('       ,STaxCode       ');	//	売上消費税ｺｰﾄﾞ
				2:	SQL.Add('       ,BTaxCode       ');	//	仕入消費税ｺｰﾄﾞ
			end;
			SQL.Add('       ,InputKbn       ');	//	仕訳入力区分
			SQL.Add('       ,DInputKbn      ');	//	期日入力区分
			SQL.Add('       ,DInputAlw      ');	//	期日必須入力区分
			SQL.Add('       ,TInputKbn      ');	//	手形番号入力区分
			SQL.Add('       ,TInputAlw      ');	//	手形番号必須入力区分
			SQL.Add('       ,TMInputKbn     ');	//	手形管理NO入力区分
			SQL.Add('       ,TMInputAlw     ');	//	手形管理NO必須入力区分
			SQL.Add('       ,NoInputKbn1    ');	//	番号１入力区分
			SQL.Add('       ,NoInputAlw1    ');	//	番号１必須入力区分
			SQL.Add('       ,NoInputKbn2    ');	//	番号２入力区分
			SQL.Add('       ,NoInputAlw2    ');	//	番号２必須入力区分

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) then
			begin
				if ( m_DLGCopyInfo.Choice = FALSE ) then
				begin
					SQL.Add('       ,NonDspKbn      ');	//	表示／印刷不可区分
					SQL.Add('       ,PerKmkKbn      ');	//	比率科目区分
				end;
				//	借方資金繰ｺｰﾄﾞ
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kari = TRUE ) then
					SQL.Add('       ,DebitCash      ');
				//	貸方資金繰ｺｰﾄﾞ
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kashi = TRUE ) then
					SQL.Add('       ,CreditCash     ');
				//	入力条件
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Inp = TRUE ) then
				begin
					SQL.Add('       ,TkInputKbn     ');	//	固定摘要必須入力
					SQL.Add('       ,TkClassCode    ');	//	摘要分類ｺｰﾄﾞ
					SQL.Add('       ,CashCodeKbn    ');	//	資金繰ｺｰﾄﾞ優先区分
				end;
                //<117>ADD↓
                //  分類
                if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Bunrui = TRUE ) then
                begin
                	SQL.Add(' ,BunruiNCode1 ');
                    SQL.Add(' ,BunruiNCode2 ');
                    SQL.Add(' ,BunruiNCode3 ');
                    SQL.Add(' ,BunruiNCode4 ');
                    SQL.Add(' ,BunruiNCode5 ');
                    SQL.Add(' ,BunruiNCode6 ');
                    SQL.Add(' ,BunruiNCode7 ');
                    SQL.Add(' ,BunruiNCode8 ');
                    SQL.Add(' ,BunruiNCode9 ');
                    SQL.Add(' ,BunruiNCode10 ');
                end;
                //<117>ADD↑
			end;
			SQL.Add('       ,UpdTantoNCode  ');	//  更新担当者内部ｺｰﾄﾞ<080>

			SQL.Add(') VALUES (             ');
            SQL.Add('        1              '); //  ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('       ,0              '); //  実在/合計区分(0:実在)
			SQL.Add('       ,:NaibuCode     '); //  内部ｺｰﾄﾞ
            SQL.Add('       ,0              '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,0              ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.Add('       ,:GaibuCode     ');	//	外部ｺｰﾄﾞ
// <013>			SQL.Add('       ,''''           ');	//	細目ｺｰﾄﾞ
			SQL.Add('       ,''0''          ');	//	細目ｺｰﾄﾞ<013>
			SQL.Add('       ,:Rensou        ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('       ,:SeisikiName   ');	//	正式名称
			SQL.Add('       ,:KanName       ');	//	簡略名称
            SQL.Add('       ,:StartDate     '); //  適用期間（自）
            SQL.Add('       ,:EndDate       '); //  適用期間（至）
			SQL.Add('       ,:Seikaku       ');	//	性格ｺｰﾄﾞ
// <023>			SQL.Add('       ,0              ');	//	細目科目採用区分(0:なし)
            SQL.Add('       ,:BmnUse        '); //  部門採用区分
            SQL.Add('       ,:SegUse1       '); //  ｾｸﾞﾒﾝﾄ1採用区分
            SQL.Add('       ,:SegUse2       '); //  ｾｸﾞﾒﾝﾄ2採用区分
            SQL.Add('       ,:SegUse3       '); //  ｾｸﾞﾒﾝﾄ3採用区分
            SQL.Add('       ,:SegUse4       '); //  ｾｸﾞﾒﾝﾄ4採用区分
            SQL.Add('       ,:SegUse5       '); //  ｾｸﾞﾒﾝﾄ5採用区分
            SQL.Add('       ,:SegUse6       '); //  ｾｸﾞﾒﾝﾄ6採用区分
            SQL.Add('       ,:SegUse7       '); //  ｾｸﾞﾒﾝﾄ7採用区分
            SQL.Add('       ,:SegUse8       '); //  ｾｸﾞﾒﾝﾄ8採用区分
            SQL.Add('       ,:SegUse9       '); //  ｾｸﾞﾒﾝﾄ9採用区分
            SQL.Add('       ,:SegUse10      '); //  ｾｸﾞﾒﾝﾄ10採用区分
            SQL.Add('       ,:PrjUse1       '); //  ﾌﾟﾛｼﾞｪｸﾄ1採用区分
            SQL.Add('       ,:PrjUse2       '); //  ﾌﾟﾛｼﾞｪｸﾄ2採用区分
            SQL.Add('       ,:PrjUse3       '); //  ﾌﾟﾛｼﾞｪｸﾄ3採用区分
            SQL.Add('       ,:PrjUse4       '); //  ﾌﾟﾛｼﾞｪｸﾄ4採用区分
            SQL.Add('       ,:PrjUse5       '); //  ﾌﾟﾛｼﾞｪｸﾄ5採用区分
            SQL.Add('       ,:PrjUse6       '); //  ﾌﾟﾛｼﾞｪｸﾄ6採用区分
            SQL.Add('       ,:PrjUse7       '); //  ﾌﾟﾛｼﾞｪｸﾄ7採用区分
            SQL.Add('       ,:PrjUse8       '); //  ﾌﾟﾛｼﾞｪｸﾄ8採用区分
            SQL.Add('       ,:PrjUse9       '); //  ﾌﾟﾛｼﾞｪｸﾄ9採用区分
            SQL.Add('       ,:PrjUse10      '); //  ﾌﾟﾛｼﾞｪｸﾄ10採用区分
			SQL.Add('       ,:Bunseki       ');	//	分析ｺｰﾄﾞ
			SQL.Add('       ,:YouBun        ');	//	要約分析ｺｰﾄﾞ
			SQL.Add('       ,:SeiZan        ');	//	正残区分
			SQL.Add('       ,:BPKbn         ');	//	BS/PL区分
			SQL.Add('       ,:Kisyu         ');	//	期首残区分
			SQL.Add('       ,:TaxKbn        ');	//	消費税科目区分
			case DfRec.TaxKbn of
				1:	SQL.Add('       ,:UriCode       ');	//	売上消費税ｺｰﾄﾞ
				2:	SQL.Add('       ,:ShiCode       ');	//	仕入消費税ｺｰﾄﾞ
			end;
			SQL.Add('       ,:Shiwake       ');	//	仕訳入力区分
			SQL.Add('       ,:Kijitsu       ');	//	期日入力区分
			SQL.Add('       ,:H_Kijitsu     ');	//	期日必須入力区分
			SQL.Add('       ,:TegataNo      ');	//	手形番号入力区分
			SQL.Add('       ,:H_TegataNo    ');	//	手形番号必須入力区分
			SQL.Add('       ,:TegataKanri   ');	//	手形管理NO入力区分
			SQL.Add('       ,:H_TegataKanri ');	//	手形管理NO必須入力区分
			SQL.Add('       ,:NoInput1      ');	//	番号１入力区分
			SQL.Add('       ,:H_NoInput1    ');	//	番号１必須入力区分
			SQL.Add('       ,:NoInput2      ');	//	番号２入力区分
			SQL.Add('       ,:H_NoInput2    ');	//	番号２必須入力区分

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) then
			begin
				if ( m_DLGCopyInfo.Choice = FALSE ) then
				begin
					SQL.Add('       ,:NonDspKbn     ');	//	表示／印刷不可区分
					SQL.Add('       ,:HiritsuKbn    ');	//	比率科目区分
				end;
				//	借方資金繰ｺｰﾄﾞ
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kari = TRUE ) then
					SQL.Add('       ,:Kari          ');
				//	貸方資金繰ｺｰﾄﾞ
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kashi = TRUE ) then
					SQL.Add('       ,:Kashi         ');
				//	入力条件
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Inp = TRUE ) then
				begin
					SQL.Add('       ,:KoteiHissu    ');	//	固定摘要必須入力
					SQL.Add('       ,:TekiBun       ');	//	摘要分類ｺｰﾄﾞ
					SQL.Add('       ,:ShikuriYu     ');	//	資金繰ｺｰﾄﾞ優先区分
				end;
                //<117>ADD↓
                //  分類
                if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Bunrui = TRUE ) then
                begin
                	SQL.Add(' ,:BunruiNCode1 ');
                    SQL.Add(' ,:BunruiNCode2 ');
                    SQL.Add(' ,:BunruiNCode3 ');
                    SQL.Add(' ,:BunruiNCode4 ');
                    SQL.Add(' ,:BunruiNCode5 ');
                    SQL.Add(' ,:BunruiNCode6 ');
                    SQL.Add(' ,:BunruiNCode7 ');
                    SQL.Add(' ,:BunruiNCode8 ');
                    SQL.Add(' ,:BunruiNCode9 ');
                    SQL.Add(' ,:BunruiNCode10 ');
                end;
                //<117>ADD↑
			end;
   			SQL.Add('       ,:UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                      ');

			ParamByName('NaibuCode'	 )      .AsFloat    :=  iNCode;		                                    //	内部ｺｰﾄﾞ
            MemZitsu.FieldByName('NCode')   .AsFloat    :=  iNCode;		                                    //	内部ｺｰﾄﾞ
			ParamByName('GaibuCode')        .AsInteger  :=  MemZitsu.FieldByName('Code')        .AsInteger;	//	外部ｺｰﾄﾞ
			ParamByName('Rensou')           .AsString   :=  fnDelCRLF(MemZitsu.FieldByName('Ren')         .AsString);	//	連想ｼﾝﾎﾞﾙ <DKAI>
			ParamByName('SeisikiName')      .AsString   :=  fnDelCRLF(MemZitsu.FieldByName('LongName')    .AsString);	//	正式名称  <DKAI>
			ParamByName('KanName')          .AsString	:=  fnDelCRLF(MemZitsu.FieldByName('SName')       .AsString);	//	簡略名称  <DKAI>
            ParamByName('StartDate')        .AsDateTime :=  m_cJNTArea.getDefDate(1);                       //  適用期間（自）
            ParamByName('EndDate')          .AsDateTime :=  m_cJNTArea.getDefDate(2);                       //  適用期間（至）
			iCharCode							        :=  MemZitsu.FieldByName('SeikakuNO')   .AsInteger; //	性格ｺｰﾄﾞ(配列で使用)
			ParamByName('Seikaku')          .AsInteger  :=  MemZitsu.FieldByName('SeikakuNO')   .AsInteger; //	性格ｺｰﾄﾞ

            ParamByName('BmnUse')           .AsInteger  :=  Employ.Bumon;   // 部門採用区分

            // ｾｸﾞﾒﾝﾄ採用区分
            for iLoop := 1 to 10 do
                ParamByName('SegUse'+intToStr(iLoop)).AsInteger :=  Employ.Seg[iLoop-1];

            // ﾌﾟﾛｼﾞｪｸﾄ採用区分
            if ( m_KoujiMasKbn <> 0 ) then  // <011>
            begin
                for iLoop := 1 to 10 do
                begin
                    if ( giKoujiSyubetsu <> 0 ) and ( iLoop = m_KoujiMasKbn-200 ) then
                        ParamByName('PrjUse'+IntToStr(iLoop)).AsInteger   :=  Employ.Kouji
                    else
                        ParamByName('PrjUse'+IntToStr(iLoop)).AsInteger   :=  0;
                end;
            end
            // 採用無の場合は0をWriteする <011>
            else
            begin
                for iLoop := 1 to 10 do
                begin
                    ParamByName('PrjUse'+IntToStr(iLoop)).AsInteger   :=  0;
                end;
            end;

			ParamByName('Bunseki')          .AsInteger  :=  MemZitsu.FieldByName('BunsekiNO').AsInteger;    //	分析ｺｰﾄﾞ

//--- <125> Mod St
//            //--- <059> St -----
//            if ( MemZitsu.FieldByName('BunsekiNO').AsInteger = 52 ) then                        //  少数株主持分
//            begin
//                ParamByName('YouBun').AsInteger	:= 8;						                    //	要約分析ｺｰﾄﾞ（8 = 引当金）
//            end
//            //--- <059> Ed -----
//            else
//            begin
//    			GetSKmkMA(BUNSEKI,MemZitsu.FieldByName('BunsekiNO').AsInteger,iYouBun);			//	要約分析ｺｰﾄﾞ取得
//
//    			if ( iYouBun = 999 ) then
//    				ParamByName('YouBun')       .AsInteger	:=	0						        //	要約分析ｺｰﾄﾞ
//    			else
//    				ParamByName('YouBun').AsInteger	:= iYouBun;					                //	要約分析ｺｰﾄﾞ
//            end;
            if not SetYouBun(BUNSEKI,MemZitsu.FieldByName('BunsekiNO').AsInteger,iYouBun) then
            begin
                MDataModule.Rollback(dbCorp_Select);
                DmqData.Close;
                DmqData.Free;
                Exit;
            end;
            ParamByName('YouBun').AsInteger := iYouBun;
//--- <125> Mod Ed

			ParamByName('SeiZan')           .AsInteger	:=  DfRec.SeiZan;								    //	正残区分
			ParamByName('BPKbn' )           .AsInteger	:=  DfRec.BPKbn;									//	BS/PL区分
			ParamByName('Kisyu' )           .AsInteger	:=  DfRec.Kisyuzan;								    //	期首残区分
			ParamByName('TaxKbn')           .AsInteger	:=  DfRec.TaxKbn;								    //	消費税科目区分
			case DfRec.TaxKbn of
				1:	ParamByName('UriCode')  .AsInteger	:=	DfRec.TaxCode;						            //	売上消費税ｺｰﾄﾞ
				2:	ParamByName('ShiCode')  .AsInteger	:=	DfRec.TaxCode;						            //	仕入消費税ｺｰﾄﾞ
			end;
			ParamByName('Shiwake')          .AsInteger	:=  DfRec.Shiwake;								    //	仕訳入力区分

			//	F8ｺﾋﾟｰではない時
			if ( m_F8CopyFlag = FALSE ) then
			begin
				ParamByName('Kijitsu'  )    .AsInteger  :=  aDefaultSeikaku[iCharCode].Kijitsu;		        //	期日入力区分
				ParamByName('H_Kijitsu')    .AsInteger  :=  aDefaultSeikaku[iCharCode].H_Kijitsu;		    //	期日必須入力区分
			end
			else
			begin
				//	入力条件
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Inp = TRUE ) then
				begin
					ParamByName('Kijitsu'  ).AsInteger  :=  m_CopyInfo.KijitsuInp;				            //	期日入力区分
					ParamByName('H_Kijitsu').AsInteger  :=  m_CopyInfo.KiJitsuHis;				            //	期日必須入力区分
				end
				else
				begin
					ParamByName('Kijitsu'  ).AsInteger  :=  aDefaultSeikaku[iCharCode].Kijitsu;	            //	期日入力区分
					ParamByName('H_Kijitsu').AsInteger  :=  aDefaultSeikaku[iCharCode].H_Kijitsu;	        //	期日必須入力区分
				end;
			end;

			ParamByName('TegataNo')         .AsInteger	:=  aDefaultSeikaku[iCharCode].Tegata;		        //	手形番号入力区分
			ParamByName('H_TegataNo')       .AsInteger	:=  aDefaultSeikaku[iCharCode].H_Tegata;		    //	手形番号必須入力区分
			ParamByName('TegataKanri')      .AsInteger	:=  aDefaultSeikaku[iCharCode].TegataNo;		    //	手形管理NO入力区分
			ParamByName('H_TegataKanri')    .AsInteger	:=  aDefaultSeikaku[iCharCode].H_TegataNo;	        //	手形管理NO必須入力区分
			ParamByName('NoInput1')         .AsInteger	:=  aDefaultSeikaku[iCharCode].NoInput1;	 	    //	番号１入力区分
			ParamByName('H_NoInput1')       .AsInteger	:=  aDefaultSeikaku[iCharCode].H_NoInput1;	        //	番号１必須入力区分
			ParamByName('NoInput2')         .AsInteger	:=  aDefaultSeikaku[iCharCode].NoInput2;	 	    //	番号２入力区分
			ParamByName('H_NoInput2')       .AsInteger	:=  aDefaultSeikaku[iCharCode].H_NoInput2;	        //	番号２必須入力区分

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) then
			begin
				if ( m_DLGCopyInfo.Choice = FALSE ) then
				begin
					ParamByName('NonDspKbn'	).AsInteger	:=  m_CopyInfo.DspPri;		                        //	表示／印刷不可区分
					ParamByName('HiritsuKbn').AsInteger	:=  m_CopyInfo.HiritsuKmk;	                        //	比率科目区分
				end;
				//	借方資金繰ｺｰﾄﾞ
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kari = TRUE ) then
					ParamByName('Kari'	)   .AsInteger	:=  m_CopyInfo.KariKuri;
				//	貸方資金繰ｺｰﾄﾞ
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Kashi = TRUE ) then
					ParamByName('Kashi'	)   .AsInteger	:=  m_CopyInfo.KashiKuri;
				//	入力条件
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Inp = TRUE ) then
				begin
					ParamByName('KoteiHissu').AsInteger	:=  m_CopyInfo.KoteiTeki;	                        //	固定摘要必須入力
					ParamByName('TekiBun')   .AsFloat	:=  gfnGetTekiMA_NCODE(m_CopyInfo.TekiBunCode);	                        //	摘要分類ｺｰﾄﾞ
					ParamByName('ShikuriYu') .AsInteger	:=  m_CopyInfo.ShikuriYu;	                        //	資金繰ｺｰﾄﾞ優先区分
				end;

                //<117>ADD↓
                //  分類
                if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Bunrui = TRUE ) then
                begin
                	ParamByName('BunruiNCode1' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode1);
                	ParamByName('BunruiNCode2' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode2);
                	ParamByName('BunruiNCode3' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode3);
                	ParamByName('BunruiNCode4' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode4);
                	ParamByName('BunruiNCode5' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode5);
                	ParamByName('BunruiNCode6' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode6);
                	ParamByName('BunruiNCode7' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode7);
                	ParamByName('BunruiNCode8' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode8);
                	ParamByName('BunruiNCode9' ).AsString := FormatFloat('0', m_CopyInfo.BunruiNCode9);
                	ParamByName('BunruiNCode10').AsString := FormatFloat('0', m_CopyInfo.BunruiNCode10);
                end
                else
                begin
                	ParamByName('BunruiNCode1' ).AsString := '0';
                	ParamByName('BunruiNCode2' ).AsString := '0';
                	ParamByName('BunruiNCode3' ).AsString := '0';
                	ParamByName('BunruiNCode4' ).AsString := '0';
                	ParamByName('BunruiNCode5' ).AsString := '0';
                	ParamByName('BunruiNCode6' ).AsString := '0';
                	ParamByName('BunruiNCode7' ).AsString := '0';
                	ParamByName('BunruiNCode8' ).AsString := '0';
                	ParamByName('BunruiNCode9' ).AsString := '0';
                	ParamByName('BunruiNCode10').AsString := '0';
                end;
                //<117>ADD↑
			end;
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

		{勘定科目詳細情報(KmkMB)}
			Close;
			SQL.Clear;
			SQL.Add('INSERT INTO KmkMB (    '); //	勘定科目詳細情報
            SQL.Add('        MasterKbn      ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumKbn         ');	//	実在/合計区分
			SQL.Add('       ,NCode          ');	//  内部ｺｰﾄﾞ
            SQL.Add('       ,CNCode         '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,MinusKbn       ');	//	ﾏｲﾅｽ印刷区分
			SQL.Add('       ,HisKbn         ');	//	履歴管理区分

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) then
			begin
				//	比率
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Hiritsu = TRUE ) then
					SQL.Add('       ,FixChgRate     ');	//	変動費比率
				//	出力情報
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
				begin
					SQL.Add('       ,SagakuKbn      ');	//	差額印刷区分
					SQL.Add('       ,ProfitKbn      ');	//	利益印刷区分
					SQL.Add('       ,MTekiPrn       ');	//	元帳摘要欄起票者印字区分
					SQL.Add('       ,MinusName      ');	//	ﾏｲﾅｽ変換科目名
					SQL.Add('       ,DecoKbn        ');	//	装飾区分
				end;

				// 全てｺﾋﾟｰ時
				if ( m_DLGCopyInfo.Choice = FALSE ) then
				begin
					// 比率
					SQL.Add('       ,CostRate       ');	//	個別原価率
					// 電子帳簿
// <019>					SQL.Add('       ,EBook1Kbn      ');	//	第1補助電子帳簿採用区分
// <019>		            SQL.Add('       ,EBook2Kbn      ');	//	第2補助電子帳簿採用区分
					// 公益法人
					SQL.Add('       ,CharCode2      ');	//	性格ｺｰﾄﾞ2
				end;
			end;
			SQL.Add('       ,UpdTantoNCode  ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') VALUES (             ');
            SQL.Add('        1              ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('       ,0              ');	//	実在/合計区分(0:実在)
			SQL.Add('       ,:NaibuCode     ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,0              '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,:Mainasu       ');	//	ﾏｲﾅｽ印刷区分

			// F8ｺﾋﾟｰ時で全てｺﾋﾟｰの時
			if ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
				SQL.Add('       ,:HK            ')	//	履歴管理
			else
			begin
				if ( m_Electronic = TRUE ) then	    //	履歴管理採用あり時
					SQL.Add('       ,1          ')	//	履歴管理
				else
					SQL.Add('       ,0          ');	//	履歴管理
			end;

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) then
			begin
				//	比率
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Hiritsu = TRUE ) then
					SQL.Add('       ,:Hendou        ');	//	変動費比率
				//	出力情報
				if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.OutInfo = TRUE) then
				begin
					SQL.Add('       ,:SagakuKbn     ');	//	差額印刷区分
					SQL.Add('       ,:RiekiPri      ');	//	利益印刷区分
					SQL.Add('       ,:KihyouSya     ');	//	元帳摘要欄起票者印字区分
					SQL.Add('       ,:MainaKmk      ');	//	ﾏｲﾅｽ変換科目名
					SQL.Add('       ,:Sousyoku      ');	//	装飾区分
				end;

				// 全てｺﾋﾟｰ時
				if ( m_DLGCopyInfo.Choice = FALSE ) then
				begin
					// 比率
					SQL.Add('       ,:CR            ');	//	個別原価率
					// 電子帳簿
// <019>					SQL.Add('       ,:EB1K          ');	//	第1補助電子帳簿採用区分
// <019>					SQL.Add('       ,:EB2K          ');	//	第2補助電子帳簿採用区分
					// 公益法人
					SQL.Add('       ,:CC2           ');	//	性格ｺｰﾄﾞ2
				end;
			end;
			SQL.Add('       ,:UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                      ');

			ParamByName('NaibuCode').AsFloat	:=	iNCode;
            ParamByName('Mainasu')  .AsInteger	:=	DfRec.Mainasu;

			// F8ｺﾋﾟｰ時
			if ( m_F8CopyFlag = TRUE ) then
			begin
				//	比率
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.Hiritsu = TRUE ) then
					ParamByName('Hendou')   .AsInteger  :=  m_CopyInfo.Hendouhi;		//	変動費比率
				//	出力情報
				if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
				begin
					ParamByName('SagakuKbn').AsInteger	:=  m_CopyInfo.SagakuPri;	    //	差額印刷区分
					ParamByName('RiekiPri') .AsInteger	:=  m_CopyInfo.RiekiPri;		//	利益印刷区分
					ParamByName('KihyouSya').AsInteger	:=  m_CopyInfo.MTekiPrn;		//	元帳摘要欄起票者印字区分
					ParamByName('MainaKmk') .AsString	:=  m_CopyInfo.MainasuName;	    //	ﾏｲﾅｽ変換科目名
					ParamByName('Sousyoku') .AsInteger	:=  m_CopyInfo.Sousyoku;		//	装飾区分
				end;

				// 全てｺﾋﾟｰ時
				if ( m_DLGCopyInfo.Choice = FALSE ) then
				begin
					// 比率
					ParamByName('CR')       .AsFloat   :=   m_CopyInfo.CostRate;		//	個別原価率
					// 電子帳簿
					ParamByName('HK')       .AsInteger :=   m_CopyInfo.Rireki;			//	履歴管理区分
// <019>					ParamByName('EB1K')     .AsInteger :=   m_CopyInfo.EBook1Kbn;		//	第1補助電子帳簿採用区分
// <019>					ParamByName('EB2K')     .AsInteger :=   m_CopyInfo.EBook2Kbn;		//	第2補助電子帳簿採用区分
					// 公益法人
					ParamByName('CC2' )     .AsInteger :=   m_CopyInfo.CharCD2;		//	性格ｺｰﾄﾞ2
				end;
			end;

            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
            begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMB_Kan := TABLE_IN_UPDATE;

// <063> ADD start
			{親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出)}
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
													// KMKMA同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
													// KMKMB同期
// <068> MOD start
//				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
			end;

			DmqData.Close;
       										// 子会社(自会社)DBとMQueryの接続
			MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);

			end;							// 親から関連付けた場合には通らないifの終わり

			{ ｸﾞﾙｰﾌﾟ会計を採用している場合、全子会社にRELを作成 }
			if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) then
			begin									// 全子会社にRELを作成
				if not fnAllCorpRelation(iNCode, 0) then
				begin								// ﾛｰﾙﾊﾞｯｸ
					MDataModule.Rollback (dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
			end;
// <063> ADD end


		{科目加算体系マスタ(KmkTree)}
			//	加算体系の内部ｺｰﾄﾞの件数取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                         ');
			SQL.Add('   MAX(EntNo)                  ');	//	登録Noの最大値
			SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1            ');
			SQL.Add('  AND SumNCode  = :SakiCode    ');	//	加算先内部ｺｰﾄﾞ

			TNode       :=  TreeView.Selected;
			wkRec       :=  TNode.Data;
			bParentNode	:=	FALSE;

			if ( wkRec.Kbn = 1 ) then	//	実在/合計区分が合計の時
				iCode	:=	wkRec^.NCode
			else	//	実在時
			begin
				TNode   :=  TNode.Parent;
				if ( TNode = nil ) then
				begin
					iCode       :=  0;
					bParentNode	:=  TRUE;
				end
				else
				begin
					wkRec   :=  TNode.Data;
					iCode   :=  wkRec^.NCode;

					//親のｺｰﾄﾞが0の時
					if ( iCode = 0 ) then
						bParentNode	:= TRUE;
				end;
			end;

			ParamByName('SakiCode').AsFloat := iCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iWork   :=  GetFld('MAX(KmkTree.EntNo)').AsInteger;
				iKensu  :=  Trunc(iWork / 100) * 100;
				if ( iKensu = 0 ) then
					iKensu  :=  100
				else
					iKensu  :=  iKensu + 100;
			end;

			if ( bParentNode = FALSE ) then	//	実在時で親NodeがNilでなければ
			begin
				//	加算体系へのﾚｺｰﾄﾞの追加
				Close;
				SQL.Clear;
				SQL.Add('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
				SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
				SQL.Add('       ,SumNCode           ');	//	加算先外部ｺｰﾄﾞ
				SQL.Add('       ,EntNo              ');	//	登録No
				SQL.Add('       ,BasedNCode         ');	//	加算元外部ｺｰﾄﾞ
				SQL.Add('       ,AddKbn             ');	//	加算区分
				SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分
				SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add(') VALUES (                 ');
				SQL.Add('        1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('       ,:SakiCode          ');	//	加算先内部ｺｰﾄﾞ
				SQL.Add('       ,:T_No              ');	//	登録No
				SQL.Add('       ,:MotoCode          ');	//	加算元内部ｺｰﾄﾞ
				SQL.Add('       ,0                  ');	//	加算区分(0:加算)
				SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add(')                          ');

				ParamByName('SakiCode') .AsFloat    :=  iCode;
				ParamByName('T_No')     .AsInteger  :=  iKensu;
				ParamByName('MotoCode') .AsFloat    :=  MemZitsu.FieldByName('NCode').AsFloat;
                ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					DmqData.Close;
					DmqData.Free;
    				Abort;  // <060>Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;
			end;

			Pos	:= MJSHanPos(' ', MTab_N.BorderCaption);			//	先頭からSPACEまでの桁数COUNT
			if ( Pos <> 0 ) then
			begin
                //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
				iOyaCode :=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));

				// Selectedのセット
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wRec :=	TreeView.Items[iLoop].Data;
	    			if ( wRec.GCode = iOyaCode ) then
	    	    	begin
						wkNode          :=  TreeView.Items[iLoop];

						New(wkRec);
                        wKRec.NCode     :=  MemZitsu.FieldByName('NCode')   .AsFloat;   // 科目内部ｺｰﾄﾞ
                        wkRec.CNCode    :=  MemZitsu.FieldByName('CNCode')  .AsFloat;   // 細目内部ｺｰﾄﾞ
						wkRec.GCode	    :=  MemZitsu.FieldByName('Code')    .AsInteger; // 科目外部ｺｰﾄﾞ
// <013>                        wkRec.SubCode   :=  '';                                         // 細目外部ｺｰﾄﾞ
                        wkRec.SubCode   :=  '0';                                        // 細目外部ｺｰﾄﾞ<013>
						wkRec.Kbn	    :=  0;
						wkRec.KoteiKbn  :=  0;
						wkRec.MasKbn    :=  1;
						wkRec.Name	    :=  MemZitsu.FieldByName('SName')   .AsString;  //	簡略名称
						wkRec.AddKbn    :=  0;
						wkRec.ChildKbn  :=  FALSE;
						wkRec.NotAdd    :=  1;
						wkRec.Syokuchi  :=  0;
                        wkRec.CodeAttr  :=  0;
                        wkRec.CodeDigit :=  0;

						if ( m_F8CopyFlag = FALSE ) then
				           	CNode := TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,wkRec.Name),wkRec)
						else
						begin
							//	装飾区分
							if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
							begin
								sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
					           	CNode	    :=  TreeView.Items.AddChildobject(wkNode,sDspName,wkRec);
							end
							else
								CNode       :=  TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,wkRec.Name),wkRec);
						end;

			            CNode.ImageIndex    :=  2;
						Cnode.SelectedIndex :=  8;
						TreeView.Items[iLoop].Expanded := TRUE;
		    	    end;
	    		end;
			end
			//はぐれ時
			else
			begin
				New(wkRec);
                wkRec.NCode     :=  MemZitsu.FieldByName('NCode')   .AsFloat;       // 科目内部ｺｰﾄﾞ
                wkRec.CNCode    :=  MemZitsu.FieldByName('CNCode')  .AsFloat;       // 細目内部ｺｰﾄﾞ
				wkRec.GCode	    :=  MemZitsu.FieldByName('Code')    .AsInteger;     // 科目外部ｺｰﾄﾞ
// <013>                wkRec.SubCode   :=  '';
                wkRec.SubCode   :=  '0';    // <013>
				wkRec.Kbn	    :=  0;
				wkRec.KoteiKbn  :=  0;
				wkRec.MasKbn    :=  1;
				wkRec.Name	    :=  MemZitsu.FieldByName('SName').AsString;		    //	簡略名称
				wkRec.AddKbn    :=  0;
				wkRec.ChildKbn  :=  FALSE;
				wkRec.NotAdd    :=  0;
                wkRec.Syokuchi  :=  0;
                wkRec.CodeAttr  :=  0;
                wkRec.CodeDigit :=  0;

				if ( m_F8CopyFlag = FALSE ) then
		           	CNode   :=  TreeView.Items.AddChildobject(nil,MakeDspString(wkRec.GCode,wkRec.Name),wkRec)
                else
				begin
					//	装飾区分
					if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
					begin
						sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
			           	CNode	    :=  TreeView.Items.AddChildobject(nil,sDspName,wkRec);
					end
					else
						CNode       :=  TreeView.Items.AddChildobject(nil,MakeDspString(wkRec.GCode,wkRec.Name),wkRec);
				end;

	            CNode.ImageIndex	:=  2;
				Cnode.SelectedIndex :=  8;
			end;

			gbKmkTree2Flag := TRUE;

			SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
			m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  MemZitsu.FieldByName('NCode').AsFloat;
            m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  MemZitsu.FieldByName('CNCode').AsFloat;
			m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  '';

			m_NewFlag := TRUE;	// 新規登録されたのでﾌﾗｸﾞをTRUEにする

			// <100>ADD↓
            // 出力順序自動登録 構造体設定
			if MemZitsu.FieldByName('BunsekiNO').AsInteger <> 0 then
			begin
			    m_NewFlag_J := True;	// 実在科目新規登録ﾌﾗｸﾞ
                SetLength(m_KmkOrder,Length(m_KmkOrder)+1);
                m_KmkOrder[Length(m_KmkOrder)-1].MasKbn			:= 1;													//	ﾏｽﾀ区分
                m_KmkOrder[Length(m_KmkOrder)-1].NCode 			:= MemZitsu.FieldByName('NCode').AsFloat;				//	内部ｺｰﾄﾞ
                m_KmkOrder[Length(m_KmkOrder)-1].GCode 			:= MemZitsu.FieldByName('Code').AsInteger;				//	外部部ｺｰﾄﾞ
                m_KmkOrder[Length(m_KmkOrder)-1].Kbn 			:= 0;													//	実在/合計区分
                m_KmkOrder[Length(m_KmkOrder)-1].SName 			:= fnDelCRLF(MemZitsu.FieldByName('SName').AsString);	//	簡略名称
                m_KmkOrder[Length(m_KmkOrder)-1].LName 			:= fnDelCRLF(MemZitsu.FieldByName('LongName').AsString);//	正式名称
                m_KmkOrder[Length(m_KmkOrder)-1].AnalyzeCode	:= MemZitsu.FieldByName('BunsekiNO').AsInteger;			//	分析ｺｰﾄﾞ
                m_KmkOrder[Length(m_KmkOrder)-1].Delete			:= False;												//	削除区分
                m_KmkOrder[Length(m_KmkOrder)-1].BPKbn			:= DfRec.BPKbn;											//	BS/PL区分
                m_KmkOrder[Length(m_KmkOrder)-1].BmnUse 		:= Employ.Bumon;										//	部門採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse1 		:= Employ.Seg[0];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse2 		:= Employ.Seg[1];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse3 		:= Employ.Seg[2];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse4 		:= Employ.Seg[3];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse5 		:= Employ.Seg[4];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse6		:= Employ.Seg[5];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse7		:= Employ.Seg[6];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse8		:= Employ.Seg[7];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse9		:= Employ.Seg[8];										//	セグメント採用
                m_KmkOrder[Length(m_KmkOrder)-1].SegUse10		:= Employ.Seg[9];										//	セグメント採用
                // <100>ADD↑
                // <101>ADD↓
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 201) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse1	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse1	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 202) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse2	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse2	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 203) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse3	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse3	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 204) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse4	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse4	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 205) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse5	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse5	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 206) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse6	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse6	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 207) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse7	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse7	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 208) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse8	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse8	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 209) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse9	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse9	:= 0;
                if (giKoujiSyubetsu <> 0) and (m_KoujiMasKbn = 210) then m_KmkOrder[Length(m_KmkOrder)-1].PrjUse10	:= Employ.Kouji
                else													 m_KmkOrder[Length(m_KmkOrder)-1].PrjUse10	:= 0;
			end;
			// <101>ADD↑
		end;

// -----------------------------
//	更新処理時
// -----------------------------
		if ( Dataset.State in [dsEdit] ) then
		begin
			//	性格・分析ｺｰﾄﾞを取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                         ');
			SQL.Add('    CharCode                   ');	//	性格ｺｰﾄﾞ
			SQL.Add('   ,AnalyzeCode                ');	//	分析ｺｰﾄﾞ
			SQL.Add('   ,BPKbn						');	//	BS/PL区分	// <121>ADD
			SQL.Add('FROM KmkMA                     '); //	勘定科目基本ﾏｽﾀ
            SQL.Add('WHERE MasterKbn = 1            '); //	ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND RDelKbn   = 0            ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.Add('  AND SumKbn    = 0            ');	//	実在/合計区分(0:実在)
			SQL.Add('  AND NCode     = :NaibuCode   ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0            '); //  科目別補助内部ｺｰﾄﾞ

			ParamByName('NaibuCode').AsFloat    := MemZitsu.FieldByName('NCode').AsFloat;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iCharCode := GetFld('CharCode'	 ).AsInteger;	//	性格ｺｰﾄﾞ
				iAnaCode  := GetFld('AnalyzeCode').AsInteger;	//	分析ｺｰﾄﾞ
				iBPKbn    := GetFld('BPKbn').AsInteger;			//	BS/PL区分	// <121>ADD
			end;

			iwkCharCode	:= MemZitsu.FieldByName('SeikakuNO').AsInteger;	//	性格ｺｰﾄﾞ
			iwkAnaCode	:= MemZitsu.FieldByName('BunsekiNO').AsInteger;	//	分析ｺｰﾄﾞ

			if ( iAnaCode <> iwkAnaCode ) then	//	分析ｺｰﾄﾞ変更時
			begin
				//	分析ｺｰﾄﾞのﾃﾞﾌｫﾙﾄｾｯﾄ
				for iLoop := 0 to 112 do
				begin
					if ( aDefault[iLoop].Code = iwkAnaCode ) then
					begin
						DfRec.Code		  := aDefault[iLoop].Code;			//	分析ｺｰﾄﾞ
						DfRec.SeiZan	  := aDefault[iLoop].SeiZan;		//	正残区分(0:借方、1:貸方)

						if ( aDefault[iLoop].BPKbn < 0 ) then
						begin
							case MComboBox.ItemIndex of
								0,1: DfRec.BPKbn := 0; //B/S
								2,3: DfRec.BPKbn := 1; //P/L
            	            end;
						end
						else
						begin
							if ( aTokuteiKmkCode[12] = iNCode ) then	//科目が特定科目の前期繰越利益と一致した時
								DfRec.BPKbn := 1		//	BS/PL区分(1:P/L)
							else
								DfRec.BPKbn := aDefault[iLoop].BPKbn;			//	BS/PL区分(0:B/S、1:P/L)
						end;

						DfRec.Kisyuzan	  := aDefault[iLoop].Kisyuzan;		//	期首残(0:なし、1:あり)

						if ( fnFurikaeCheck(MemZitsu.FieldByName('Code').AsInteger) = FALSE ) then
							DfRec.Shiwake := aDefault[iLoop].Shiwake		//	仕訳入力区分(0:貸借入力、1:正残側のみ、2:負残側のみ、9:入力不可)
						else
							DfRec.Shiwake := 9;								//	仕訳入力区分(9:入力不可)

						DfRec.TaxKbn	  := aDefault[iLoop].TaxKbn;		//	消費税科目区分(0:対象外、1:売上科目、2:仕入科目)
						DfRec.TaxCode 	  := aDefault[iLoop].TaxCode;		//	消費税ｺｰﾄﾞ(0:なし、10～99)
						DfRec.Mainasu	  := aDefault[iLoop].Mainasu;		//	ﾏｲﾅｽ印刷区分(0:なし、1:あり)
						DfRec.YouyakuCode := aDefault[iLoop].YouyakuCode;	//	要約ｺｰﾄﾞ
						DfRec.KoteiCode   := aDefault[iLoop].KoteiCode;		//	固定費ｺｰﾄﾞ
						DfRec.HendoCode   := aDefault[iLoop].HendoCode;		//	変動費ｺｰﾄﾞ

						break;
					end;
				end;
				// <129> ADD ST
                m_bBunChgMsgFlag := True;
                // 分析コード変更時メッセージの表示条件を満たしている場合
                if fnChkBunChgMsg(iGCode, False, iwkAnaCode) then
                begin
                    // 「はい」以外の場合
                    if (MjsMessageBoxEX(Self,MSG_AnalyzeCodeChange,'確認', mjQuestion, mjYesNo, mjDefNo) <> mrYes ) then
                    begin
                        MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
                        ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
                        DmqData.Close;
                        DmqData.Free;
                        Abort;
                    end;

					m_bBunChgMsgFlag := False;
                end;
				// <129> ADD ED
			end;

			//	基本ﾏｽﾀへのﾚｺｰﾄﾞの更新
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
				DmqData.Close;
        									// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);
			end;
// <063> ADD end

			Close;
			SQL.Clear;
			SQL.Add('UPDATE KmkMA SET    '); //	勘定科目基本ﾏｽﾀ

			if ( iCharCode <> iwkCharCode ) then	//	性格ｺｰﾄﾞの変更時
			begin
				SQL.Add('       CharCode    = :Seikaku,         ');	//	性格ｺｰﾄﾞ
				SQL.Add('       DInputKbn   = :Kijitsu,         ');	//	期日入力区分
				SQL.Add('       DInputAlw   = :H_Kijitsu,       ');	//	期日必須入力区分
				SQL.Add('       TInputKbn   = :TegataNo,        ');	//	手形番号入力区分
				SQL.Add('       TInputAlw   = :H_TegataNo,      ');	//	手形番号必須入力区分
				SQL.Add('       TMInputKbn  = :TegataKanri,     ');	//	手形管理NO入力区分
				SQL.Add('       TMInputAlw  = :H_TegataKanri,   ');	//	手形管理NO必須入力区分
				SQL.Add('       NoInputKbn1 = :NoInput1,        ');	//	番号１入力区分
				SQL.Add('       NoInputAlw1 = :H_NoInput1,      ');	//	番号１必須入力区分
				SQL.Add('       NoInputKbn2 = :NoInput2,        ');	//	番号２入力区分
				SQL.Add('       NoInputAlw2 = :H_NoInput2,      ');	//	番号２必須入力区分
			end;

			if ( iAnaCode <> iwkAnaCode ) then	//	分析ｺｰﾄﾞ変更時
			begin
				SQL.Add('       AnalyzeCode = :Bunseki,         ');	//	分析ｺｰﾄﾞ
				SQL.Add('       SumAnaCode  = :YouBun,          ');	//	要約分析ｺｰﾄﾞ
				SQL.Add('       DCKbn       = :SeiZan,          ');	//	正残区分
				SQL.Add('       BPKbn       = :BPKbn,           ');	//	BS/PL区分
				SQL.Add('       KisyuKbn    = :Kisyu,           ');	//	期首残区分

				if ( fnTaxCodeCheck(MemZitsu.FieldByName('NCode').AsFloat) = FALSE ) then
				begin
					SQL.Add('       TaxKbn   = :TaxKbn,             ');	//	消費税科目区分
					SQL.Add('       STaxCode = :UriCode,            ');	//	売上消費税ｺｰﾄﾞ
					SQL.Add('       BTaxCode = :ShiCode,            ');	//	仕入消費税ｺｰﾄﾞ
				end;
				SQL.Add('       InputKbn     = :Shiwake,            ');	//	仕訳入力区分
// <121>ADD↓
				// ----------------------------------------------------------------------
				// BS/PL区分が変わった場合は、部門、ｾｸﾞﾒﾝﾄ、工事が採用可能かﾁｪｯｸ。
                // 採用できなければ「0:採用なし」で更新する
				// ----------------------------------------------------------------------
				if (DfRec.BPKbn <> iBPKbn) then
                begin
					Employ.Bumon            :=	0;	//	部門
					Employ.Kouji            :=	0;	//	工事
					for iLoop := 0 to 9 do
						Employ.Seg[iLoop]   :=	0;	//	ｾｸﾞﾒﾝﾄ

					// 部門、ｾｸﾞﾒﾝﾄ1～10、工事が採用可能かの情報を取得する
					MasInfoKmkCodeCheck(MemZitsu.FieldByName('Code').AsInteger, DfRec.BPKbn,
                    					MemZitsu.FieldByName('BunsekiNO').AsInteger, Employ);

					//	部門採用区分が採用できなければ0で更新
					if (Employ.Bumon = 0) then
						SQL.Add('       BmnUse = 0,            		');					//	部門採用区分に0をｾｯﾄ

					// ｾｸﾞﾒﾝﾄ1～10が採用できなければ0で更新
					for iLoop := 0 to 9 do
						if (EMPLOY.Seg[iLoop] = 0) then
							SQL.Add('       SegUse' + intToStr(iLoop + 1) + ' = 0,');	//	ｾｸﾞﾒﾝﾄ1～10採用区分に0をｾｯﾄ

					//	工事が採用できなければ0で更新
                    if ((m_KoujiMasKbn <> 0) and (giKoujiSyubetsu <> 0) and (Employ.Kouji = 0)) then
                       	// 201～210のうち、工事用ﾚｺｰﾄﾞの採用情報のみｸﾘｱする
						SQL.Add('       PrjUse' + IntToStr(m_KoujiMasKbn - 200) + ' = 0,');	//	工事採用区分に0をｾｯﾄ(PrjUse1～10の内、工事のﾚｺｰﾄﾞのみ更新する)
                end;
// <121>ADD↑
			end;
			SQL.Add('       Renso      = :Rensou,       ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('       LongName   = :SeisikiName,  ');	//	正式名称
			SQL.Add('       SimpleName = :KanName       ');	//	簡略名称
			SQL.Add('       ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>

			SQL.Add('WHERE MasterKbn = 1                '); //	ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND RDelKbn   = 0                ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            SQL.Add('  AND NCode     = :ANcode          ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0                ');	//	科目別補助内部ｺｰﾄﾞ
			SQL.Add('  AND SumKbn    = 0                ');	//	実在/合計区分(0:実在)

			ParamByName('Rensou')       .AsString   :=  fnDelCRLF(MemZitsu.FieldByName('Ren')     .AsString);		//	連想ｼﾝﾎﾞﾙ <DKAI>
			ParamByName('SeisikiName')  .AsString	:=  fnDelCRLF(MemZitsu.FieldByName('LongName').AsString);		//	正式名称  <DKAI>
			ParamByName('KanName')      .AsString	:=  fnDelCRLF(MemZitsu.FieldByName('SName')   .AsString);		//	簡略名称  <DKAI>

			if ( iCharCode <> iwkCharCode ) then
			begin
				ParamByName('Seikaku')          .AsInteger	:=	iwkCharCode;
				ParamByName('Kijitsu')          .AsInteger	:=	aDefaultSeikaku[iwkCharCode].Kijitsu; 	    //	期日入力区分
				ParamByName('H_Kijitsu')        .AsInteger	:=	aDefaultSeikaku[iwkCharCode].H_Kijitsu;	    //	期日必須入力区分
				ParamByName('TegataNo')         .AsInteger	:=	aDefaultSeikaku[iwkCharCode].Tegata;		//	手形番号入力区分
				ParamByName('H_TegataNo')       .AsInteger	:=	aDefaultSeikaku[iwkCharCode].H_Tegata;  	//	手形番号必須入力区分
				ParamByName('TegataKanri')      .AsInteger	:=	aDefaultSeikaku[iwkCharCode].TegataNo;  	//	手形管理NO入力区分
				ParamByName('H_TegataKanri')    .AsInteger	:=	aDefaultSeikaku[iwkCharCode].H_TegataNo;	//	手形管理NO必須入力区分
				ParamByName('NoInput1')         .AsInteger	:=	aDefaultSeikaku[iwkCharCode].NoInput1;   	//	番号１入力区分
				ParamByName('H_NoInput1')       .AsInteger	:=	aDefaultSeikaku[iwkCharCode].H_NoInput1;	//	番号１必須入力区分
				ParamByName('NoInput2')         .AsInteger	:=	aDefaultSeikaku[iwkCharCode].NoInput2;   	//	番号２入力区分
				ParamByName('H_NoInput2')       .AsInteger	:=	aDefaultSeikaku[iwkCharCode].H_NoInput2;	//	番号２必須入力区分
			end;

			if ( iAnaCode <> iwkAnaCode ) then	//	分析ｺｰﾄﾞ変更時
			begin
				ParamByName('Bunseki')          .AsInteger	:=  iwkAnaCode;

//--- <125> Mod St
//                //--- <059> St ----
//                if ( iwkAnaCode = 52 ) then                                     //  少数株主持分
//                begin
//                    ParamByName('YouBun').AsInteger	:= 8;                       //	要約分析ｺｰﾄﾞ（8 = 引当金）
//                end
//                // --- <059> Ed ---
//                else
//                begin
//        			GetSKmkMA(BUNSEKI,iwkAnaCode,iYouBun);						//	要約分析ｺｰﾄﾞ取得
//    				if ( iYouBun = 999 ) then
//    					ParamByName('YouBun')       .AsInteger	:=	0			//	要約分析ｺｰﾄﾞ
//    				else
//    					ParamByName('YouBun')       .AsInteger	:=	iYouBun;	//	要約分析ｺｰﾄﾞ
//                end;
                if not SetYouBun(BUNSEKI,iwkAnaCode,iYouBun) then
                begin
                    MDataModule.Rollback(dbCorp_Select);
                    DmqData.Close;
                    DmqData.Free;
                    Exit;
                end;
                ParamByName('YouBun').AsInteger := iYouBun;
//--- <125> Mod Ed

				ParamByName('SeiZan')           .AsInteger	:=  DfRec.SeiZan;								//	正残区分
				ParamByName('BPKbn')            .AsInteger	:=  DfRec.BPKbn;							   	//	BS/PL区分
				ParamByName('Kisyu')            .AsInteger	:=  DfRec.Kisyuzan;								//	期首残区分

				if ( fnTaxCodeCheck(MemZitsu.FieldByName('NCode').AsFloat) = FALSE ) then
				begin
					ParamByName('TaxKbn')       .AsInteger	:=  DfRec.TaxKbn;								//	消費税科目区分

					case DfRec.TaxKbn of
						0:	begin
								ParamByName('UriCode').AsInteger :=	0;					//	売上消費税ｺｰﾄﾞ
								ParamByName('ShiCode').AsInteger :=	0;					//	仕入消費税ｺｰﾄﾞ
							end;
						1:	begin
								ParamByName('UriCode').AsInteger :=	DfRec.TaxCode;		//	売上消費税ｺｰﾄﾞ
								ParamByName('ShiCode').AsInteger :=	0;					//	仕入消費税ｺｰﾄﾞ
							end;
						2:	begin
								ParamByName('UriCode').AsInteger :=	0;					//	売上消費税ｺｰﾄﾞ
								ParamByName('ShiCode').AsInteger :=	DfRec.TaxCode;		//	仕入消費税ｺｰﾄﾞ
							end;
					end;
				end;
				ParamByName('Shiwake')      .AsInteger	:=  DfRec.Shiwake;								    //	仕訳入力区分
			end;

            ParamByName('ANCode')           .AsFloat	:=  MemZitsu.FieldByName('NCode')   .AsFloat;		//	内部ｺｰﾄﾞ
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

            //<116>ADD↓
            //分析ｺｰﾄﾞ変更時
            //変更後の分析ｺｰﾄﾞが「198:借方繰越利益」か「199:貸方繰越利益」だった場合
            //科目別補助の消費税関連をｸﾘｱする
            if (iAnaCode <> iwkAnaCode) and
               (iwkAnaCode in [aDefault[110].Code, aDefault[111].Code]) then
            begin
            	ClearKmkSubTaxKbn(MemZitsu.FieldByName('NCode').AsFloat);
            end;
            //<116>ADD↑

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMA_Kan	:=	TABLE_IN_UPDATE;

// <063> ADD start
			{親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出)}
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
													// KMKMA同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
		   		    Abort;
				end;
				DmqData.Close;
        									// 自社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);
			end;
// <063> ADD end
			// <100>ADD↓
			// 出力順序自動登録 構造体設定
			if Length(m_KmkOrder) > 0 then
			begin
				// 新規追加された科目が一覧で修正された科目か確認して、配列も修正
				for iLoop := 0 to Length(m_KmkOrder)-1 do
				begin
					if m_KmkOrder[iLoop].Delete = True then
						continue;

					if MemZitsu.FieldByName('NCode').AsFloat = m_KmkOrder[iLoop].NCode then
					begin
						m_KmkOrder[iLoop].SName := fnDelCRLF(MemZitsu.FieldByName('SName').AsString);	//	簡略名称
						m_KmkOrder[iLoop].LName := fnDelCRLF(MemZitsu.FieldByName('LongName').AsString);//	正式名称
						m_KmkOrder[iLoop].AnalyzeCode := MemZitsu.FieldByName('BunsekiNO').AsInteger;	//	分析ｺｰﾄﾞ
						break;
					end;
				end;
			end;
			// <100>ADD↑

			Sousyoku := 0;
			//	装飾区分取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                         ');
			SQL.Add('   DecoKbn                     ');	//	装飾区分
			SQL.Add('FROM KmkMB                     '); //	勘定科目詳細情報
            SQL.Add('WHERE MasterKbn = 1            '); //	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND SumKbn    = 0            ');	//	実在/合計区分(0:実在)
            SQL.Add('  AND NCode     = :ANcode      ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :ACNcode     '); //  科目別補助内部ｺｰﾄﾞ

            ParamByName('ANcode')   .AsFloat    :=  MemZitsu.FieldByName('NCode')   .AsFloat;       //	内部ｺｰﾄﾞ
            ParamByName('ACNcode')  .AsFloat 	:=  MemZitsu.FieldByName('CNCode')  .AsFloat;		//  科目別補助内部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				Sousyoku :=	GetFld('DecoKbn').AsInteger;	//	装飾区分
			end;

			for iLoop := 0 to TreeView.Items.Count-1 do
			begin
				TreeView.Items[iLoop];
				wkRec   :=  TreeView.Items[iLoop].Data;
				CNode   :=  TreeView.Items[iLoop];

				if ( wkRec^.GCode = iGCode ) and ( wkRec^.Kbn = 0 ) and ( wkRec^.MasKbn = 1 )then
				begin
					sDspName    :=  GetSousyoku(MemZitsu.FieldByName('SName').AsString,Sousyoku);
					CNode.Text  :=  MakeDspString(MemZitsu.FieldByName('Code').AsInteger,sDspName);
				end;
			end;
		end;
	end;
	DmqData.Close;
	DmqData.Free;

	MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ <063> ADD

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----


	gbFusenFlag	 :=	FALSE;
	m_F8CopyFlag := FALSE;
end;

//************************************************************************
//*		Component		:	MemSai ( TdxMemData )
//*							細目科目のMemDataに書き込む前
//*		Event			:	BeforePost
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MemSaiBeforePost(DataSet: TDataSet);
var
	wkRec		:	^TaikeiRec;
	wRec		:	^TaikeiRec;
	CNode		:	TTreeNode;
	TNode		:	TTreeNode;
	wkNode		:	TTreeNode;
	wkNode2		:	TTreeNode;
	PNode		:	TTreeNode;
	DmqData		:	TMQuery;
//	DmqUpDate	:	TMQuery;		// <063> DEL
	iNCode		:	Extended;
    iCNCode     :   Extended;       // 科目別補助内部ｺｰﾄﾞ
	iCode		:	Integer;
	iSCode		:	String;		    //	外部ｺｰﾄﾞ
	iLoop		:	Integer;
	Pos			:	Integer;		//	SPASEまでの桁数
	iOyaCode	:	Integer;
	bSyokuFlag	:	Boolean;
//	DummyFlag	:	Boolean;        // <063> DEL
//	RollBackFlag: 	Boolean;		// <063> DEL
	Sousyoku	:	Integer;
	sDspName	:	String;
//    iExCNCode   :   Extended;        // 科目別補助内部ｺｰﾄﾞ // <063> DEL
    iCodeDigit  :   Integer;
    iCodeAttr   :   Integer;
    iRet		:	Integer;		// <063> ADD
begin

	//	初期化処理
	iCode		 :=	0;
	bSyokuFlag	 :=	FALSE;
    iRet		 := 0;				// <063> ADD
//	RollBackFlag :=	FALSE;			// <063> DEL

    //	最初の表示でｲﾍﾞﾝﾄが起こるのでその時は処理をしない
	if ( gbChangeFlg ) then Exit;

	if ( gbT_FusenFlag ) then   Exit;

	if ( DSourceSai.DataSet.FieldByName('SCode').IsNull ) then
	begin
		if ( gbEndFlag = TRUE ) then
			Exit;
		Abort;
	end;

	DSourceSai.DataSet.FieldByName('SCode').AsString := TrimRight(DSourceSai.DataSet.FieldByName('SCode').AsString);	// <122> ADD

//<089> ADD St
    // 空白は認めない
	if Trim(MemSai.FieldByName('SCode').AsString) = '' then
    begin
		if ( gbEndFlag = TRUE ) then
			Exit;
		Abort;
    end;
//<089> ADD Ed

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

    // 細目外部ｺｰﾄﾞ
	iSCode      := MemSai.FieldByName('SCode')  .AsString;

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqData do
	begin
		wkNode2 :=  TreeView.Selected;
		TNode   :=  TreeView.Selected;
		wkRec   :=  TNode.Data;

        // ------------------------
        //	    細目科目
        // ------------------------
		if ( wkRec.MasKbn = 2 ) then
		begin
			TNode := TNode.Parent;
            if ( TNode = nil ) then
			begin
				showmessage('科目別補助の親が不明･･･03');
				DmqData.Close;
				DmqData.Free;
				Abort;  // <060>Exit;
			end;
			wkRec   :=  TNode.Data;
			iCode   :=  wkRec^.GCode;
            iNCode  :=  wkRec^.NCode;
		end
        // ------------------------
        //      実在/合計科目
        // ------------------------
		else if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
        begin
			iCode   :=  wkRec^.GCode;
            iNCode  :=  wkRec^.NCode;
        end;

        // ｺｰﾄﾞ属性・桁数の取得
        fnGetCodeAttr(iNCode, iCodeAttr, iCodeDigit);

        // ﾄﾗﾝｻﾞｸｼｮﾝの開始
        MDataModule.BeginTran (dbCorp_Select);
		ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);	// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADD

// -----------------------
//      新規処理時
// -----------------------
		if ( DataSet.State in [dsInsert] ) then
		begin
{
			// 実在科目の細目科目採用区分をありにする
			DummyFlag := FALSE;
			if ( KbnCheck(iNCode,DummyFlag,FALSE,OTHER) ) then
			begin
				DmqData.Close;
				DmqData.Free;
				m_KmkHError := TRUE;
				Exit;
			end;
}
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    SubCode                ');	//	細目外部ｺｰﾄﾞ
			SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 2        '); //	ﾏｽﾀ区分(2:細目科目)
            SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :S_Code  ');	//	細目ｺｰﾄﾞ

			ParamByName('Code'  ).AsInteger := iCode;	    //	科目外部ｺｰﾄﾞ
			ParamByName('S_Code').AsString  := iSCode;	    //	細目外部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				m_KmkHError := TRUE;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				if DataSet.State in [dsInsert] then
				begin
					// 同一ｺｰﾄﾞが存在してます
					ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
					MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
		    		MjsMessageBoxEx(AOwner, // <005>
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    MJsMsgRec.LogType);
					gbEndFlag := FALSE;
					MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					Abort;
				end;
			end;

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
				DmqData.Close;
        									// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);

                // 会社関連付処理
				iRet := fnCorpRelation(MKBN_SAIMOKU,
										iCode,
										fnSaimokuSetAttr(1, MemSai.FieldByName('SCode').AsString, iCodeAttr, iCodeDigit),
										SUMKBN_JITUZAI,
										iNCode, iCNCode);
                case iRet of
                    0:
					begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
						// →親にinsert
                    end;
                    1:
					begin
			            MemSai.FieldByName('CNCode') .AsFloat := iCNCode; // 科目別補助内部ｺｰﾄﾞ
                        // 正常に関連付が行えた場合は、画面の再描画を行う
                    end;
                    2:
					begin
                        // 会社関連付をｷｬﾝｾﾙ
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
                        Abort;
                    end;
                    -9:
					begin
                        // 例外ｴﾗｰ
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
						m_KmkHError := TRUE;
                        Abort;
                    end;
                end;
			end;
// <063> ADD end

			if iRet = 0 then				// <063> ADD 以下は親会社から取り込んだ場合に通さない
			begin							// <063> ADD

            // 新規追加の場合のみ内部ｺｰﾄﾞを取得
            iCNCode :=  GetNewCNCode;
            MemSai.FieldByName('CNCode') .AsFloat := iCNCode; // 科目別補助内部ｺｰﾄﾞ

			if (Not ( bSyokuFlag )) then
			begin
				{勘定科目基本マスタ(KmkMA)}

				//	基本ﾏｽﾀへのﾚｺｰﾄﾞの追加
				Close;
				SQL.Clear;
				SQL.Add('INSERT INTO KmkMA (    '); //	勘定科目基本ﾏｽﾀ

                if ( m_SyokuchiDlg ) then
				    SQL.Add('       Syokuchikbn,        ');             //	諸口区分

    			SQL.Add('        NCode,         '); //  内部ｺｰﾄﾞ
                SQL.Add('        CNCode         '); //  科目別補助内部ｺｰﾄﾞ
				SQL.Add('       ,MasterKbn      ');	//	ﾏｽﾀ区分
				SQL.Add('       ,SumKbn         ');	//	実在/合計区分
                SQL.Add('       ,RDelKbn        ');	//	ﾚｺｰﾄﾞ区分
				SQL.Add('       ,GCode          ');	//	外部ｺｰﾄﾞ
				SQL.Add('       ,SubCode        ');	//	細目ｺｰﾄﾞ
				SQL.Add('       ,Renso          ');	//	連想ｼﾝﾎﾞﾙ
				SQL.Add('       ,LongName       ');	//	正式名称
				SQL.Add('       ,SimpleName     ');	//	簡略名称
                SQL.Add('       ,TStartDate     '); //  適用期間（自）
                SQL.Add('       ,TEndDate       '); //  適用期間（至）
                SQL.Add('       ,CodeDigit      '); //  ｺｰﾄﾞ桁数
                SQL.Add('       ,CodeAttr       '); //  ｺｰﾄﾞ属性
                SQL.Add('       ,UpdTantoNCode  '); //  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add(') VALUES (             ');

                if ( m_SyokuchiDlg ) then
                    SQL.Add('        1,             ');	//	諸口区分
				SQL.Add('        :NCode,            ');	//	内部ｺｰﾄﾞ
                SQL.Add('        :CNCode            '); //  科目別補助内部ｺｰﾄﾞ
				SQL.Add('       ,2                  ');	//	ﾏｽﾀ区分(2:細目科目)
				SQL.Add('       ,0                  ');	//	実在/合計区分(0:実在)
				SQL.Add('       ,0                  ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('       ,:GCode             ');	//	外部ｺｰﾄﾞ
				SQL.Add('       ,:SaimokuCode       ');	//	細目ｺｰﾄﾞ
				SQL.Add('       ,:Rensou            ');	//	連想ｼﾝﾎﾞﾙ
				SQL.Add('       ,:SeisikiName       ');	//	正式名称
				SQL.Add('       ,:KanName           ');	//	簡略名称
                SQL.Add('       ,:StartDate         '); //  適用期間（自）
                SQL.Add('       ,:EndDate           '); //  適用期間（至）
                SQL.Add('       ,:CodeDigit         '); //  ｺｰﾄﾞ桁数
                SQL.Add('       ,:CodeAttr          '); //  ｺｰﾄﾞ属性
                SQL.Add('       ,:UpdTantoNCode     '); //  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add(')                          ');

				ParamByName('NCode')        .AsFloat    :=  iNCode;
                MemSai.FieldByName('NCode') .AsFloat    :=  iNCode;
                ParamByName('CNCode')       .AsFloat    :=  iCNCode;
                MemSai.FieldByName('CNCode').AsFloat    :=  iCNCode;
				ParamByName('GCode')        .AsInteger  :=  iCode;										//	外部ｺｰﾄﾞ
				ParamByName('SaimokuCode')  .AsString   :=  fnSaimokuSetAttr(1,MemSai.FieldByName('SCode').AsString,
                                                                             iCodeAttr,iCodeDigit);	    //	細目ｺｰﾄﾞ(属性対応)
				ParamByName('Rensou')       .AsString	:=  fnDelCRLF(MemSai.FieldByName('SRen')      .AsString);	//	連想ｼﾝﾎﾞﾙ <DKAI>
				ParamByName('SeisikiName')  .AsString	:=  fnDelCRLF(MemSai.FieldByName('SLongName') .AsString);	//	正式名称  <DKAI>
				ParamByName('KanName')      .AsString	:=  fnDelCRLF(MemSai.FieldByName('SSName')    .AsString);	//	簡略名称  <DKAI>
                ParamByName('StartDate')    .AsDateTime :=  m_cJNTArea.getDefDate(1);                   //  適用期間（自）
                ParamByName('EndDate')      .AsDateTime :=  m_cJNTArea.getDefDate(2);                   //  適用期間（至）
                ParamByName('CodeDigit')    .AsInteger  :=  iCodeDigit;                                 //  ｺｰﾄﾞ桁数
                ParamByName('CodeAttr')     .AsInteger  :=  iCodeAttr;                                  //  ｺｰﾄﾞ属性
                ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
                    DmqData.Close;
					DmqData.Free;
					m_KmkHError := TRUE;
    				Abort;  // <060>Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkMA_Sai := TABLE_IN_UPDATE;
			end;

		{勘定科目詳細情報(KmkMB)}
			Close;
			SQL.Clear;
			SQL.Add('INSERT INTO KmkMB (    '); //	勘定科目詳細情報
			SQL.Add('        NCode          ');	//  内部ｺｰﾄﾞ
            SQL.Add('       ,CNCode         '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,MasterKbn      ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumKbn         ');	//	実在/合計区分
			SQL.Add('       ,UpdTantoNCode  ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') VALUES (             ');
			SQL.Add('        :NCode         ');	//  内部ｺｰﾄﾞ
            SQL.Add('       ,:CNCode        '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,2              ');	//	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('       ,0              ');	//	実在/合計区分(0:実在)
			SQL.Add('       ,:UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                      ');

			ParamByName('NCode') .AsFloat  := iNCode;     //  内部ｺｰﾄﾞ
            ParamByName('CNCode') .AsFloat := iCNCode;    //  科目別補助内部ｺｰﾄﾞ
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				m_KmkHError := TRUE;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMB_Sai := TABLE_IN_UPDATE;

// <063> ADD start
			{親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出)}
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
													// KMKMA同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					m_KmkHError := TRUE;
		   		    Abort;
				end;
													// KMKMB同期
// <068> MOD start
//				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					m_KmkHError := TRUE;
		   		    Abort;
				end;
			end;
			DmqData.Close;
        									// 子会社(自会社)DBとMQueryの接続
			MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);

			end;							// 親から関連付けた場合には通らないifの終わり

			{ ｸﾞﾙｰﾌﾟ会計を採用している場合、全子会社にRELを作成 }
			if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) then
			begin									// 全子会社にRELを作成
				if not fnAllCorpRelation(iNCode, iCNCode) then
				begin								// ﾛｰﾙﾊﾞｯｸ
					MDataModule.Rollback (dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
					DmqData.Close;
					DmqData.Free;
					m_KmkHError := TRUE;
		   		    Abort;
				end;
			end;
// <063> ADD end

            //	先頭からSPACEまでの桁数COUNT
			Pos		 := MJSHanPos(' ', MTab_N.BorderCaption);
            //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
			iOyaCode :=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));

		    // Selectedのセット
			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				wRec :=	TreeView.Items[iLoop].Data;
	    		if ( wRec.GCode = iOyaCode ) and ( wRec.MasKbn = 1 ) and ( wRec.Kbn = 0 ) then
	    	    begin
					wkNode := TreeView.Items[iLoop];
                    New(wkRec);
                    wkRec.NCode     :=  MemSai.FieldByName('NCode').AsFloat;
                    wkRec.CNCode    :=  MemSai.FieldByName('CNCode').AsFloat;
					wkRec.GCode	    :=  iCode;
                    wkRec.SubCode   :=  MemSai.FieldByName('SCode').AsString;
					wkRec.Kbn		:=	0;
					wkRec.KoteiKbn	:=	0;
					wkRec.MasKbn	:=	2;
					wkRec.Name		:=	MemSai.FieldByName('SSName').AsString;
					wkRec.AddKbn	:=  0;
        		    wkRec.ChildKbn	:=	FALSE;
					wkRec.NotAdd	:=	1;
                    wkRec.CodeAttr  :=  iCodeAttr;
                    wkRec.CodeDigit :=  iCodeDigit;

                    if ( m_SyokuchiDlg ) then
                            wkRec.Syokuchi  :=  1
                    else    wkRec.Syokuchi  :=  0;

                    fnSubNCodeCheck(iCode,fnSaimokuSetAttr(1,MemSai.FieldByName('SCode').AsString,
                                                           iCodeAttr,iCodeDigit),
                                    wkRec.NCode,wkRec.Syokuchi);

           			CNode               :=  TreeView.Items.AddChildobject(wkNode,
                                                                          MakeDspString_Sai(wkRec.SubCode,
                                                                                            wkRec.Name,
                                                                                            wkRec.CodeAttr,
                                                                                            wkRec.CodeDigit
                                                                                           ),
                                                                          wkRec);
		            CNode.ImageIndex    :=  3;
					Cnode.SelectedIndex :=  10;
                    // <075>
					// TreeView.Items[iLoop].Expanded	:=	TRUE;
		        end;
    		end;

			if ( TreeView_EnsureVisible(TreeView.Handle, TreeView.Selected.ItemID) ) then
				TreeView.Invalidate;

			m_SwkInfo.MessageFlag := TRUE;

			SetLength(m_aCmnt_Sai,Length(m_aCmnt_Sai)+1);
            m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].NCode    :=  MemSai.FieldByName('NCode').AsFloat;
			m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].SubNCode :=  MemSai.FieldByName('CNCode').AsFloat;
			m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].Cmnt     :=  '';
		end;

// -----------------------
//	    更新処理時
// -----------------------
		if Dataset.State in [dsEdit] then
		begin
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
				DmqData.Close;
        									// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);
			end;
// <063> ADD end
			//	基本ﾏｽﾀへのﾚｺｰﾄﾞの更新
			Close;
			SQL.Clear;
			SQL.Add('UPDATE KmkMA SET               '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('    Renso      = :Rensou       ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('   ,LongName   = :SeisikiName  ');	//	正式名称
			SQL.Add('   ,SimpleName = :KanName      ');	//	簡略名称
			SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add('WHERE MasterKbn = 2            '); //	ﾏｽﾀ区分(2:細目科目)
            SQL.Add('  AND SumKbn    = 0            '); //	実在/合計区分(0:実在)
            SQL.Add('  AND RDelKbn   = 0            ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            SQL.Add('  AND NCode     = :ANCode      ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :ACNCode     ');	//	科目別補助内部ｺｰﾄﾞ

			ParamByName('Rensou')       .AsString	:=  fnDelCRLF(MemSai.FieldByName('SRen')      .AsString);	//	連想ｼﾝﾎﾞﾙ <DKAI>
			ParamByName('SeisikiName')  .AsString	:=  fnDelCRLF(MemSai.FieldByName('SLongName') .AsString);	//	正式名称  <DKAI>
			ParamByName('KanName')      .AsString	:=  fnDelCRLF(MemSai.FieldByName('SSName')    .AsString);	//	簡略名称  <DKAI>
            ParamByName('ANCode')       .AsFloat    :=  MemSai.FieldByName('NCode')     .AsFloat;   //  内部ｺｰﾄﾞ
            ParamByName('ACNCode')      .AsFloat    :=  MemSai.FieldByName('CNCode')    .AsFloat;   //  科目別補助内部ｺｰﾄﾞ
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				m_KmkHError := TRUE;
				Abort;  // <060>Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkMA_Sai := TABLE_IN_UPDATE;
// <063> ADD start
			{親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出)}
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
													// KMKMA同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					m_KmkHError := TRUE;
		   		    Abort;
				end;
				DmqData.Close;
        											// 子会社(自会社)DBとMQueryの接続
				MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);
			end;
// <063> ADD end

			Sousyoku := 0;
			//	装飾区分取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                        ');
			SQL.Add('   DecoKbn                    ');	//	装飾区分
			SQL.Add('FROM KmkMB                    ');  //	勘定科目詳細情報
            SQL.Add('WHERE MasterKbn = 2           ');  //	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND SumKbn    = 0           ');	//	実在/合計区分(0:実在)
            SQL.Add('  AND NCode     = :NCode      ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :CNCode     ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('NCode').AsFloat  := iNCode;    //  科目内部ｺｰﾄﾞ
            ParamByName('CNCode').AsFloat := iCNCode;   //  細目内部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				m_KmkHError := TRUE;
				Abort;  // <060>Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				Sousyoku :=	GetFld('DecoKbn').AsInteger;	//	装飾区分
			end;

			for iLoop := 0 to TreeView.Items.Count-1 do
			begin
				TreeView.Items[iLoop];
				CNode   :=  TreeView.Items[iLoop];
				wkRec   :=  CNode.Data;
				if ( wkRec^.SubCode = iSCode ) and ( wkRec^.Kbn = 0 ) and ( wkRec^.MasKbn = 2 ) then
				begin
					PNode := CNode.Parent;
					if ( PNode <> nil ) then
					begin
						wRec :=	PNode.Data;
						if ( iCode = wRec.GCode ) then
						begin
							sDspName    :=  GetSousyoku(MemSai.FieldByName('SSName').AsString,Sousyoku);
							CNode.Text  :=  MakeDspString_Sai(MemSai.FieldByName('SCode').AsString,
                                                              sDspName,
                                                              iCodeAttr,
                                                              iCodeDigit);
						end;
					end;
				end;
			end;
		end;
	end;

	DmqData.Close;
	DmqData.Free;

	MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ <063> ADD

	gbFusenFlag	:= FALSE;

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----
end;

//**********************************************************************
//*		Proccess	:	ツリー表示(固定表示)
//*		Name		:	H.Endo
//*		Date		:	2000/08/10
//*		Parameter	:	No		:	ComboBoxで選択されているItemIndexNO
//*						L1Cnt	:	ﾚﾍﾞﾙ1の件数
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*						2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
procedure TJNTCRP009001f.MakeTreeKotei(No: Integer; L1Cnt: Integer);
var
	rTaikei 	:	^TaikeiRec;
	TNode		:	TTreeNode;
	KNode		:	TTreeNode;
	sDspName	:	String;
	DmqTree		:	TMQuery;
	iLoop		:	Integer;
	bFlag		:	Boolean;		//	ﾚｺｰﾄﾞがあるかないかの判断ﾌﾗｸﾞ
//<053>
	wTaikei 	:	^TaikeiRec;
	iLoop2		:	Integer;
	KNode2		:	TTreeNode;
	Dummy		:	Byte;						//	ﾀﾞﾐｰ
begin
	//	初期処理
	KNode := nil;
	bFlag := FALSE;

	case No of
		SONEKI:	sDspName :=	'【損益科目】';
	end;

	New(rTaikei);
	rTaikei.NCode       :=  0;          // 科目内部ｺｰﾄﾞ
	rTaikei.CNCode      :=  0;          // 細目内部ｺｰﾄﾞ
	rTaikei.GCode		:=	0;			// 科目外部ｺｰﾄﾞ
// <013>    rTaikei.SubCode     :=  '';         // 細目外部ｺｰﾄﾞ
	rTaikei.SubCode     :=  '0';        // 細目外部ｺｰﾄﾞ<013>
	rTaikei.Kbn			:=	1;			// 実在／合計区分(0:実在、1:合計)
	rTaikei.Name		:=	'損益科目';	// 簡略名称
	rTaikei.AddKbn		:=	0;	 		// 加算/減算(0:加算、1:減算)
	rTaikei.KoteiKbn	:=	1;			// 固定体系区分(0:任意,1:固定,2:固定,3:固定)
	rTaikei.MasKbn		:=	1;			// ﾏｽﾀｰ区分
	rTaikei.ChildKbn	:=	FALSE;		// 子供があるかないかの区分(表示してしまうのでFALSE)
	rTaikei.NotAdd		:=	1;
	rTaikei.Syokuchi    :=  0;
	rTaikei.CodeAttr    :=  0;
	rTaikei.CodeDigit   :=  0;
	TNode               :=  TreeView.Items.AddChildobject( nil, sDspName, rTaikei );
	TNode.ImageIndex    :=  0;
	TNode.SelectedIndex :=  0;

	DmqTree := TMQuery.Create( Self );					        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );		// DBとMQueryの接続

//<053>--start---
// <078> ↓↓↓
//	if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
	if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,Dummy)) then
// <078> ↑↑↑
	begin
		for iLoop := 0 to L1Cnt - 6 do
		begin
			if (SonekiArrayL1[iLoop].ConstNCode <> 0) and (iLoop in [0..10])then	//	特定科目情報で科目がｾｯﾄされていた時
			begin
				bFlag := True;	//	ｺｰﾄﾞが登録されている時はTrueにする
				with DmqTree do
				begin

					Close();
					SQL.Clear;
					SQL.ADD('SELECT '					);
					SQL.ADD(	'MA.MasterKbn,'			);	//	ﾏｽﾀ区分(勘定科目基本ﾏｽﾀ)
					SQL.ADD(	'MA.NCode,'				);	//	内部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
					SQL.ADD(	'MA.GCode,'				);	//	外部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
					SQL.ADD(	'MA.LongName,'			);	//	正式名称(勘定科目基本ﾏｽﾀ)
					SQL.ADD(	'MA.SimpleName,'		);	//	簡略名称(勘定科目基本ﾏｽﾀ)
					SQL.ADD(	'MA.KoteiKbn,'			);	//	固定体系区分(勘定科目基本ﾏｽﾀ)
					SQL.ADD(	'MB.DecoKbn '			);	//	装飾区分(勘定科目詳細情報)
					SQL.ADD('FROM '						);
                    {//<115>DEL↓
					SQL.ADD(	'KmkMA MA,'				);	//	勘定科目基本ﾏｽﾀ
					SQL.ADD(	'KmkMB MB '				);	//	勘定科目詳細情報
					SQL.ADD('WHERE '					);
					SQL.ADD(	'MA.RDelKbn = 0 AND '	);	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
					SQL.ADD(	'MA.NCode = :ExNCode AND '	);	//	内部ｺｰﾄﾞ
					SQL.ADD(	'MB.NCode = :ExNCode'		);	//	内部ｺｰﾄﾞ
					ParamByName('ExNCode').AsFloat := SonekiArrayL1[iLoop].ConstNCode;
                    }//<115>DEL↑
                    //<115>ADD↓
                    SQL.ADD(    'KmkMA MA'				);
                    SQL.ADD('LEFT OUTER JOIN KmkMB MB'  );
                    SQL.ADD( 'ON ( MA.MasterKbn = MB.MasterKbn');
                    SQL.ADD(  'AND MA.NCode = MB.NCode');
                    SQL.ADD(  'AND MA.CNCode = MB.CNCode');
                    SQL.ADD(  'AND MA.SumKbn = MB.SumKbn)');
                    SQL.ADD('WHERE MA.MasterKbn = 1');
                    SQL.ADD(  'AND MA.RDelKbn = 0');
                    SQL.ADD(  'AND MA.NCode = ' + FormatFloat('0', SonekiArrayL1[iLoop].ConstNCode));
                    //<115>ADD↑
					//	ｴﾗｰの判定
					if Open = False then
					begin
						ErrorMessageDsp(DmqTree);
						DmqTree.Close;
						DmqTree.Free;
						Exit;
					end;
					if EOF <> True then
					begin
						New(rTaikei);
						rTaikei.NCode	 :=	GetFld('NCode').AsFloat;		//	内部ｺｰﾄﾞ
						rTaikei.GCode	 :=	GetFld('GCode').AsInteger;		//	外部ｺｰﾄﾞ
						rTaikei.Kbn		 :=	SonekiArrayL1[iLoop].SumKbn;	//	実在／合計区分(0:実在、1:合計)
						rTaikei.Name	 :=	GetFld('SimpleName').AsString; 	//	簡略名称
						rTaikei.AddKbn	 :=	SonekiArrayL1[iLoop].AddKbn;	//	加算/減算(0:加算、1:減算)
						rTaikei.KoteiKbn :=	GetFld('KoteiKbn').AsInteger;	//	固定体系区分(0:任意、1:固定)
						rTaikei.MasKbn	 :=	GetFld('MasterKbn').AsInteger;	//	ﾏｽﾀ区分(1:勘定科目、2:細目科目)
						if (gDspLevel <= 2) then  //階層表示
							rTaikei.ChildKbn :=	True
						else
							rTaikei.ChildKbn :=	False;
						rTaikei.NotAdd := 1;
						rTaikei.DefKbn := 1;	//HIS0097
						sDspName :=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
						KNode	 := TreeView.Items.AddChildobject(TNode,MakeDspString(rTaikei.GCode,sDspName),rTaikei);
// <078> ↓↓↓
//						if (rtaikei.NCode = GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
						if (rtaikei.NCode = GetKmkInfo(TOUKIMISYO,1,Dummy)) then
// <078> ↑↑↑
						begin
							for iLoop2 := 11 to 15 do
							begin
								Close();
								SQL.Clear;
								SQL.ADD('SELECT '					);
								SQL.ADD(	'MA.MasterKbn,'			);	//	ﾏｽﾀ区分(勘定科目基本ﾏｽﾀ)
								SQL.ADD(    'MA.NCode,'             );  //  内部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
								SQL.ADD(	'MA.GCode,'				);	//	外部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
								SQL.ADD(	'MA.LongName,'			);	//	正式名称(勘定科目基本ﾏｽﾀ)
								SQL.ADD(	'MA.SimpleName,'		);	//	簡略名称(勘定科目基本ﾏｽﾀ)
								SQL.ADD(	'MA.KoteiKbn,'			);	//	固定体系区分(勘定科目基本ﾏｽﾀ)
								SQL.ADD(	'MB.DecoKbn '			);	//	装飾区分(勘定科目詳細情報)
								SQL.ADD('FROM '						);
                                {//<115>DEL↓
								SQL.ADD(	'KmkMA MA,'				);	//	勘定科目基本ﾏｽﾀ
								SQL.ADD(	'KmkMB MB '				);	//	勘定科目詳細情報
								SQL.ADD('WHERE '					);
								SQL.ADD(	'MA.RDelKbn = 0 AND '	);	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
//								SQL.ADD(	'MA.SumKbn = 1 AND '	);	//	実在/合計区分(1:合計)
								SQL.ADD(	'MA.NCode = :ExNCode AND '	);	//	内部ｺｰﾄﾞ
								SQL.ADD(	'MB.NCode = :ExNCode'		);	//	内部ｺｰﾄﾞ
								ParamByName('ExNCode').AsFloat := SonekiArrayL1[iLoop2].ConstNCode;
                                }//<115>DEL↑
                                //<115>ADD↓
                                SQL.ADD(    'KmkMA MA'				);
                                SQL.ADD('LEFT OUTER JOIN KmkMB MB'  );
                                SQL.ADD( 'ON ( MA.MasterKbn = MB.MasterKbn');
                                SQL.ADD(  'AND MA.NCode = MB.NCode');
                                SQL.ADD(  'AND MA.CNCode = MB.CNCode');
                                SQL.ADD(  'AND MA.SumKbn = MB.SumKbn)');
                                SQL.ADD('WHERE MA.MasterKbn = 1');
                                SQL.ADD(  'AND MA.RDelKbn = 0');
                                SQL.ADD(  'AND MA.NCode = ' + FormatFloat('0', SonekiArrayL1[iLoop2].ConstNCode));
                                //<115>ADD↑
								//	ｴﾗｰの判定
								if Open = False then
								begin
									ErrorMessageDsp(DmqTree);
									DmqTree.Close;
									DmqTree.Free;
									Exit;
								end;
								if EOF <> True then
								begin
									New(wTaikei);
									wTaikei.NCode	 :=	GetFld('NCode').AsFloat;		//	内部ｺｰﾄﾞ
									wTaikei.GCode	 :=	GetFld('GCode').AsInteger;		//	外部ｺｰﾄﾞ
									wTaikei.Kbn		 :=	SonekiArrayL1[iLoop2].SumKbn;	//	実在／合計区分(0:実在、1:合計)
									wTaikei.Name	 :=	GetFld('SimpleName').AsString; 	//	簡略名称
									wTaikei.AddKbn	 :=	SonekiArrayL1[iLoop2].AddKbn;	//	加算/減算(0:加算、1:減算)
									wTaikei.KoteiKbn :=	GetFld('KoteiKbn').AsInteger;	//	固定体系区分(0:任意、1:固定)
									wTaikei.MasKbn	 :=	GetFld('MasterKbn').AsInteger;	//	ﾏｽﾀ区分(1:勘定科目、2:細目科目)
									if (gDspLevel <= 2) then
										wTaikei.ChildKbn :=	True
									else
										wTaikei.ChildKbn :=	False;
									wTaikei.NotAdd := 1;
									wTaikei.DefKbn := 1;	//HIS0097
									sDspName :=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
									KNode2	 := TreeView.Items.AddChildobject(KNode,MakeDspString(wTaikei.GCode,sDspName),wTaikei);		//	HIS0012
									//	合計時
									if (SonekiArrayL1[iLoop2].SumKbn = 1) then
									begin
										if (SonekiArrayL1[iLoop2].AddKbn = 0) then	//	加算時
										begin
											KNode2.ImageIndex 	:= 0;
											KNode2.SelectedIndex := 1;
										end
										else	//	減算時
										begin
											KNode2.ImageIndex	:= 4;
											KNode2.SelectedIndex := 5;
										end;
										MakeKodomo(KNode2,GetFld('NCode').AsFloat,gDspLevel);
									end
									//	実在時
									else
									begin
										if (SonekiArrayL1[iLoop2].AddKbn = 0) then	//	加算時
										begin
											KNode2.ImageIndex	:= 2;
											KNode2.SelectedIndex := 8;
										end
										else	//	減算時
										begin
											KNode2.ImageIndex	:= 6;
											KNode2.SelectedIndex := 9;
										end;
										MakeSaimokuKdomo(KNode2,GetFld('NCode').AsFloat)
									end;
								end;
							end;
						end;
						//	合計時
						if (SonekiArrayL1[iLoop].SumKbn = 1) then
						begin
							if (SonekiArrayL1[iLoop].AddKbn = 0) then	//	加算時
							begin
								KNode.ImageIndex 	:= 0;
								KNode.SelectedIndex := 1;
							end
							else	//	減算時
							begin
								KNode.ImageIndex	:= 4;
								KNode.SelectedIndex := 5;
							end;
							MakeKodomo(KNode,rTaikei.NCode,gDspLevel);
						end
						//	実在時
						else
						begin
							if (SonekiArrayL1[iLoop].AddKbn = 0) then	//	加算時
							begin
								KNode.ImageIndex	:= 2;
								KNode.SelectedIndex := 8;
							end
							else	//	減算時
							begin
								KNode.ImageIndex	:= 6;
								KNode.SelectedIndex := 9;
							end;
							MakeSaimokuKdomo(KNode,rTaikei.NCode)
						end;
					end;
				end;
			end;
			TreeView.Items[0].Expanded := True;
			if (gDspLevel > 2) and (bFlag) then
			begin
				KNode.Expanded := True;
				bFlag		   := False;
			end;

			DmqTree.Close;
		end;
	DmqTree.Free;
	end
	else
	begin

//<053>---end---

	for iLoop := 0 to L1Cnt - 1 do
	begin
		//	特定科目情報で科目がｾｯﾄされていた時
		if ( SonekiArrayL1[iLoop].ConstNCode <> 0 ) then
		begin
			bFlag := TRUE;	//	ｺｰﾄﾞが登録されている時はTRUEにする
			with DmqTree do
			begin
				Close();
				SQL.Clear;
				SQL.Add('SELECT                         ');
				SQL.Add('    MA.MasterKbn               ');	//	ﾏｽﾀ区分
				SQL.Add('   ,MA.NCode                   ');	//	科目内部ｺｰﾄﾞ
				SQL.Add('   ,MA.CNCode                  '); //  細目内部ｺｰﾄﾞ
				SQL.Add('   ,MA.GCode                   ');	//	科目外部ｺｰﾄﾞ
				SQL.Add('   ,MA.SubCode                 '); //  細目外部ｺｰﾄﾞ
				SQL.Add('   ,MA.LongName                ');	//	正式名称
				SQL.Add('   ,MA.SimpleName              ');	//	簡略名称
				SQL.Add('   ,MA.KoteiKbn                ');	//	固定体系区分
				SQL.Add('   ,MB.DecoKbn                 ');	//	装飾区分
				SQL.Add('   ,MA.SyokuchiKbn             '); //  諸口区分
				SQL.Add('FROM    KmkMA MA               '); //	勘定科目基本ﾏｽﾀ
                {//<115>DEL↓
				SQL.Add('       ,KmkMB MB               ');	//	勘定科目詳細情報
				SQL.Add('WHERE MA.RDelKbn  = 0          '); //	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('  AND MA.NCode    = :ExNCode   ');	//	内部ｺｰﾄﾞ
				SQL.Add('  AND MB.NCode    = :ExNCode   ');	//	内部ｺｰﾄﾞ

				ParamByName('ExNCode').AsFloat := SonekiArrayL1[iLoop].ConstNCode;
                }//<115>DEL↑
                //<115>ADD↓
                SQL.ADD('LEFT OUTER JOIN KmkMB MB'  );
                SQL.ADD( 'ON ( MA.MasterKbn = MB.MasterKbn');
                SQL.ADD(  'AND MA.NCode = MB.NCode');
                SQL.ADD(  'AND MA.CNCode = MB.CNCode');
                SQL.ADD(  'AND MA.SumKbn = MB.SumKbn)');
                SQL.ADD('WHERE MA.MasterKbn = 1');
                SQL.ADD(  'AND MA.RDelKbn = 0');
                SQL.ADD(  'AND MA.NCode = ' + FormatFloat('0', SonekiArrayL1[iLoop].ConstNCode));
                //<115>ADD↑


				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqTree);
					DmqTree.Close;
					DmqTree.Free;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
					New(rTaikei);
					rTaikei.NCode	    :=	GetFld('NCode')     .AsFloat;		// 科目内部ｺｰﾄﾞ
					rTaikei.CNCode      :=  GetFld('CNCode')    .AsFloat;       // 細目部ｺｰﾄﾞ
					rTaikei.GCode	    :=	GetFld('GCode')     .AsInteger;		// 科目外部ｺｰﾄﾞ
					rTaikei.SubCode     :=  GetFld('SubCode')   .AsString;      // 細目外部ｺｰﾄﾞ
					rTaikei.Kbn		    :=	SonekiArrayL1[iLoop].SumKbn;	    // 実在／合計区分(0:実在、1:合計)
					rTaikei.Name	    :=	GetFld('SimpleName').AsString; 	    // 簡略名称
					rTaikei.AddKbn	    :=	SonekiArrayL1[iLoop].AddKbn;	    // 加算/減算(0:加算、1:減算)
					rTaikei.KoteiKbn    :=	GetFld('KoteiKbn')  .AsInteger;	    // 固定体系区分(0:任意、1:固定)
					rTaikei.MasKbn	    :=	GetFld('MasterKbn') .AsInteger;	    // ﾏｽﾀ区分(1:勘定科目、2:細目科目)
					if (gDspLevel <= 2) then
							rTaikei.ChildKbn    :=	TRUE
					else    rTaikei.ChildKbn    :=  FALSE;
					rTaikei.NotAdd      :=  1;
					rTaikei.DefKbn      :=  1;
					rTaiKei.Syokuchi    :=  GetFld('SyokuchiKbn').AsInteger;    // 諸口区分
					rTaikei.CodeAttr    :=  0;
					rTaikei.CodeDigit   :=  0;
					sDspName            :=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
					KNode	            :=  TreeView.Items.AddChildobject( TNode, MakeDspString(rTaikei.GCode,sDspName), rTaikei);

					// 合計時
					if (SonekiArrayL1[iLoop].SumKbn = 1) then
					begin
						if (SonekiArrayL1[iLoop].AddKbn = 0) then	// 加算時
						begin
							KNode.ImageIndex 	:= 0;
							KNode.SelectedIndex := 1;
						end
						else	                                    // 減算時
						begin
							KNode.ImageIndex	:= 4;
							KNode.SelectedIndex := 5;
						end;

						MakeKodomo(KNode,GetFld('NCode').AsFloat,gDspLevel);
					end
					// 実在時
					else
					begin
						if (SonekiArrayL1[iLoop].AddKbn = 0) then	// 加算時
						begin
							KNode.ImageIndex	:= 2;
							KNode.SelectedIndex := 8;
						end
						else	                                    // 減算時
						begin
							KNode.ImageIndex	:= 6;
							KNode.SelectedIndex := 9;
						end;

						MakeSaimokuKdomo(KNode,GetFld('NCode').AsFloat)
					end;


				end;
			end;
		end;

		TreeView.Items[0].Expanded := TRUE;

		if (gDspLevel > 2) and (bFlag) then
		begin
			KNode.Expanded := TRUE;
			bFlag		   := FALSE;
		end;

		DmqTree.Close;
	end;

	DmqTree.Free;
	end;        //<053>

	// はぐれ表示処理
	HagureMakeNode(SONEKI);

end;

//**********************************************************************
//*		Proccess	:	ツリー表示
//*		Name		:	H.Endo
//*		Date		:	2000/08/11
//*		Parameter	:	No			:	ComboBoxで選択されているItemIndexNO
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*						2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
procedure TJNTCRP009001f.MakeTree(No: Integer);
var
	rTaikei 	    :	^TaikeiRec;
	sDspName	    :	String;
	DmqTree		    :	TMQuery;
	iTakeiCode	    :	Integer;
	iKamokuNCode	:	Extended;           // 科目内部ｺｰﾄﾞ
	TNode		    :	TTreeNode;
	SumKbn		:   	Byte;				//	実在/合計区分
begin
	//	初期化処理
	iTakeiCode := 0;

	case No of
		SHISAN:	iTakeiCode := SHISAN_BU;		//	資産の部
		FUSAI:	iTakeiCode := FUSAI_BU;			//	負債及び資本の部
		SEIZOU:	iTakeiCode := SEIZOU_BU;		//	製造の部
	end;

    //	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)
	iKamokuNCode	:= GetKmkInfo(iTakeiCode,1,SumKbn);

	if ( iKamokuNCode = 0 ) then
	begin
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,10);
		MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '特定科目コード' );
   		MjsMessageBoxEx(AOwner, // <005>
                        MjsMsgRec.sMsg,
                        MjsMsgRec.sTitle,
                        MjsMsgRec.icontype,
                        MjsMsgRec.btntype,
                        MjsMsgRec.btndef,
                        MJsMsgRec.LogType);
		TreeView.Items.EndUpdate;

		// 使用不可にする
		B_Syousai.Enabled := FALSE;		// 詳細ﾎﾞﾀﾝ
		B_Print.Enabled	  := FALSE;		// 印刷ﾎﾞﾀﾝ
		TreeView.Enabled  := FALSE;		// Tree
		Splitter.Enabled  := FALSE;
		P_Grid.Enabled	  := FALSE;
		giTabTaihi := MComboBox.ItemIndex;	//	表示中のIndexを退避

		Abort;
		Exit;
	end;

	DmqTree := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );	    //	DBとMQueryの接続

	with DmqTree do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                         ');
		SQL.Add('        MA.MasterKbn           ');	//	ﾏｽﾀ区分
		SQL.Add('       ,MA.NCode               ');	//	科目内部ｺｰﾄﾞ
        SQL.Add('       ,MA.CNCode              '); //  細目内部ｺｰﾄﾞ
		SQL.Add('       ,MA.GCode               ');	//	科目外部ｺｰﾄﾞ
        SQL.Add('       ,MA.SubCode             '); //  細目外部ｺｰﾄﾞ
		SQL.Add('       ,MA.LongName            ');	//	正式名称
		SQL.Add('       ,MA.SimpleName          ');	//	簡略名称
		SQL.Add('       ,MA.KoteiKbn            ');	//	固定体系区分
		SQL.Add('       ,MB.DecoKbn             ');	//	装飾区分
        SQL.Add('       ,MA.SyokuchiKbn         '); //  諸口区分
		SQL.Add('FROM    KmkMA MA               '); //	勘定科目基本ﾏｽﾀ
        {//<115>DEL↓
		SQL.Add('       ,KmkMB MB               ');	//	勘定科目詳細情報
		SQL.Add('WHERE MA.SumKbn = 1            '); //	実在/合計区分(1:合計)
        SQL.Add('  AND MA.RDelKbn   = 0         ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND MA.NCode     = :ExNCode  ');	//	外部ｺｰﾄﾞ
        SQL.Add('  AND MB.NCode     = :ExNCode  ');	//	内部ｺｰﾄﾞ

		ParamByName('ExNCode').AsFloat := iKamokuNCode;
        }//<115>DEL↑
        //<115>ADD↓
        SQL.ADD('LEFT OUTER JOIN KmkMB MB'  );
        SQL.ADD( 'ON ( MA.MasterKbn = MB.MasterKbn');
        SQL.ADD(  'AND MA.NCode = MB.NCode');
        SQL.ADD(  'AND MA.CNCode = MB.CNCode');
        SQL.ADD(  'AND MA.SumKbn = MB.SumKbn)');
        SQL.ADD('WHERE MA.MasterKbn = 1');
        SQL.ADD(  'AND MA.RDelKbn = 0');
        SQL.ADD(  'AND MA.SumKbn = 1');
        SQL.ADD(  'AND MA.NCode = ' + FormatFloat('0', iKamokuNCode));
        //<115>ADD↑

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;
            Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			New(rTaikei);
			rTaikei.NCode		:=	GetFld('NCode')         .AsFloat;		    //	内部ｺｰﾄﾞ
            rTaikei.CNCode      :=  GetFld('CNCode')        .AsFloat;           //  細目内部ｺｰﾄﾞ
			rTaikei.GCode		:=	GetFld('GCode')         .AsInteger;		    //	科目外部ｺｰﾄﾞ
            rTaikei.SubCode     :=  GetFld('SubCode')       .AsString;          //  細目外部ｺｰﾄﾞ
			rTaikei.Kbn			:=	1;								            //	実在／合計区分(0:実在、1:合計)
			rTaikei.Name		:=	GetFld('SimpleName')    .AsString;	        //	簡略名称
			rTaikei.AddKbn		:=	0;								            //	加算/減算(0:加算、1:減算)
			rTaikei.KoteiKbn	:=	GetFld('KoteiKbn')      .AsInteger;	        //	固定体系区分(0:任意、1:固定)
			rTaikei.MasKbn		:=	GetFld('MasterKbn')     .AsInteger;	        //	ﾏｽﾀ区分(1:勘定科目、2:細目科目)
			rTaikei.ChildKbn	:=	FALSE;							            //	子供があるかないかの区分(表示されるのでFALSE)
			rTaikei.NotAdd		:=	1;
            rTaikei.Syokuchi    :=  GetFld('SyokuchiKbn')   .AsInteger;         // 諸口区分
            rTaikei.CodeAttr    :=  0;
            rTaikei.CodeDigit   :=  0;

			sDspName	        :=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
			TNode               :=  TreeView.Items.AddChildobject(nil,MakeDspString(rTaikei.GCode,sDspName),rTaikei);
			TNode.ImageIndex    :=  0;
			TNode.SelectedIndex :=  0;

			MakeKodomo(TNode,GetFld('NCode').AsFloat,gDspLevel);
		end;
	end;

	TreeView.Items[0].Expanded := TRUE;

	DmqTree.Close;
	DmqTree.Free;

	//	はぐれ表示処理
	case no of
		SHISAN:	HagureMakeNode(SHISAN);
		FUSAI:	HagureMakeNode(FUSAI);
	end;

end;

//**********************************************************************
//*		Proccess	:	工事ツリー表示
//*		Name		:	H.Endo
//*		Date		:	2000/08/11
//*		Parameter	:	No			:	ComboBoxで選択されているItemIndexNO
//*		Return		:	なし
//*		History		:	HIS0001
//*
//**********************************************************************
(*
procedure TJNTCRP009001f.MakeTreeKouji(No: Integer);
var
	rTaikei 	:	^TaikeiRec;
	sDspName	:	String;
	DmqTreeOYA	:	TMQuery;				//
	DmqTreeKO 	:	TMQuery;				//
	DmqInfo		:	TMQuery;				//
	iKamokuCode	:	Integer;
	TNode		:	TTreeNode;
	KNode		:	TTreeNode;
	iKasanKbn	:	Integer;				//	加算区分
	SumKbn		:	Byte;					//	実在/合計区分
begin
	iKamokuCode	:=	GetKmkInfo(GEN_KOUJI_BU,8,SumKbn);	//	特殊科目情報から科目ｺｰﾄﾞ取得(工事合計科目)

	DmqTreeOYA := TMQuery.Create( Self );					    //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTreeOYA );	//	DBとMQueryの接続

	DmqTreeKO := TMQuery.Create( Self );					    //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTreeKO );	//	DBとMQueryの接続

	DmqInfo := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqInfo );		//	DBとMQueryの接続

	with DmqTreeOYA do
	begin
		Close();
		SQL.Clear;
		SQL.ADD('SELECT '					);
		SQL.ADD(	'MasterKbn,'			);	//	ﾏｽﾀ区分
		SQL.ADD(	'NCode,'				);	//	内部ｺｰﾄﾞ
		SQL.ADD(	'GCode,'				);	//	外部ｺｰﾄﾞ
		SQL.ADD(	'LongName,'				);	//	正式名称
		SQL.ADD(	'SimpleName,'			);	//	簡略名称
		SQL.ADD(	'KoteiKbn,'				);	//	固定体系区分
		SQL.ADD(	'DecoKbn '				);	//	装飾区分
		SQL.ADD('FROM '						);
		SQL.ADD(	'SKmkMA,'   	    	);	//	管理科目基本ﾏｽﾀ
		SQL.ADD('WHERE '					);
		SQL.ADD(	'MasterKbn = 8 AND '	);	//	ﾏｽﾀ区分(8:工事合計科目)
		SQL.ADD(	'RecordKbn = 0 AND '	);	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.ADD(	'SumKbn = 1 AND '		);	//	実在/合計区分(1:合計)
		SQL.ADD(	'NCode = :Code'			);	//	外部ｺｰﾄﾞ
		ParamByName('Code').AsInteger := iKamokuCode;
		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqTreeOYA);
			DmqTreeOYA.Close;
			DmqTreeOYA.Free;

			DmqTreeKO.Close;
			DmqTreeKO.Free;
			DmqInfo.Close;
			DmqInfo.Free;
            Exit;
		end;

        if EOF then
        begin
			MjsMessageBoxEx(AOwner,'工事合計科目が登録されてません。', 'エラー',mjError, mjOk, mjDefOk, FALSE );    // <005>
			DmqInfo.Close;
			DmqInfo.Free;
			DmqTreeKO.Close;
			DmqTreeKO.Free;
			DmqTreeOYA.Close;
			DmqTreeOYA.Free;
        	exit;
        end;

		if EOF <> TRUE then
		begin
			New(rTaikei);
			rTaikei.NCode	 :=	GetFld('NCode').AsInteger;		//	内部ｺｰﾄﾞ
			rTaikei.Code	 :=	GetFld('GCode').AsInteger;		//	外部ｺｰﾄﾞ
			rTaikei.Kbn		 :=	1;								//	実在／合計区分(0:実在、1:合計)
			rTaikei.Name	 :=	GetFld('SimpleName').AsString;	//	簡略名称
			rTaikei.AddKbn	 :=	0;								//	加算/減算(0:加算、1:減算)
			rTaikei.KoteiKbn :=	GetFld('KoteiKbn').AsInteger;	//	固定体系区分(0:任意、1:固定)
			rTaikei.MasKbn	 :=	GetFld('MasterKbn').AsInteger;	//	ﾏｽﾀ区分(1:勘定科目、2:細目科目)
			rTaikei.ChildKbn :=	FALSE;							//	子供があるかないかの区分(表示されるのでFALSE)
			rTaikei.NotAdd	 :=	1;
			sDspName :=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
			TNode := TreeView.Items.AddChildobject(Nil,MakeDspString(rTaikei.Code,sDspName),rTaikei);		//	HIS0012
			TNode.ImageIndex := 0;
			TNode.SelectedIndex := 0;
			with DmqTreeKO do
			begin
				//	加算先が総合計のｺｰﾄﾞの検索
				Close();
				SQL.Clear;
				SQL.ADD('SELECT '								);
				SQL.ADD(	'TA.BasedNCode TBasedCode,'			);
				SQL.ADD(	'TA.MasterKbn2 TMasterKbn2,' 		);
				SQL.ADD(	'TA.AddKbn TAddKbn,'	 			);
				SQL.ADD(	'MA.MasterKbn MMasterKbn,'			);	//	ﾏｽﾀ区分(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'MA.SumKbn MSumKbn,'				);	//	実在/合計区分(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'MA.NCode MNCode,'					);	//	内部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
                SQL.Add(    'MA.CNCode MCNCode,'                );  //  科目別補助内部ｺｰﾄﾞ
				SQL.ADD(	'MA.GCode MGCode,'					);	//	外部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'MA.SubCode MSubCode,'				);	//	細目ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'MA.SimpleName MSimpleName,'		);	//	簡略名称(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'MA.KoteiKbn MKoteiKbn,'			);	//	固定体系区分(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'SK.MasterKbn SMasterKbn,'			);	//	ﾏｽﾀ区分(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'SK.SumKbn SSumKbn,'				);	//	実在/合計区分(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'SK.GCode SGCode,'					);	//	外部ｺｰﾄﾞ(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'SK.SimpleName SSimpleName,'		);	//	簡略名称(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'SK.KoteiKbn SKoteiKbn,'			);	//	固定体系区分(勘定科目基本ﾏｽﾀ)
				SQL.ADD(	'SK.DecoKbn SDecoKbn '				);	//	装飾区分(勘定科目詳細情報)
				SQL.ADD('FROM '									);
				SQL.ADD(	'KmkTree TA '					);
				SQL.ADD(	'LEFT OUTER JOIN KmKMA MA ON ( TA.BasedNCode = MA.NCode AND MA.MasterKbn = 1 AND MA.RecordKbn = 0) ');
				SQL.ADD(	'LEFT OUTER JOIN SKmKMA SK ON ( TA.BasedNCode = SK.NCode AND SK.MasterKbn = 8 AND SK.SumKbn = 1 AND SK.RecordKbn = 0) ');
				SQL.ADD('WHERE '								);
				SQL.ADD(	'TA.MasterKbn = 8 AND '				);
				SQL.ADD(	'TA.SumNCode = :Code ' 				);
				SQL.ADD('ORDER BY TA.EntNo DESC'				);

				ParamByName('Code').AsInteger := iKamokuCode;
				//	ｴﾗｰの判定
				if Open = FALSE then
				begin
					ErrorMessageDsp(DmqTreeKO);
					DmqTreeKO.Close;
					DmqTreeKO.Free;

					DmqTreeOYA.Close;
					DmqTreeOYA.Free;
					DmqInfo.Close;
					DmqInfo.Free;

    	    	    Exit;
				end;

				while EOF <> TRUE do
				begin
					iKasanKbn := GetFld('TAddKbn').AsInteger;		        //	加算区分

					if GetFld('TMasterKbn2').AsInteger = 1 then			    // 実在科目（KmKMA)
					begin
						New(rTaikei);
						rTaikei.NCode	 :=	GetFld('MNCode').AsInteger;	    //	内部ｺｰﾄﾞ
                        rTaikei.CNCode   := GetFld('MCNCode').AsInteger;    //　科目別補助内部ｺｰﾄﾞ
						rTaikei.Code	 :=	GetFld('MGCode').AsInteger;	    //	外部ｺｰﾄﾞ
						rTaikei.Kbn		 :=	0;					   		    //	実在／合計区分
						rTaikei.Name	 :=	GetFld('MSimpleName').AsString;	//	簡略名称
						rTaikei.AddKbn	 := iKasanKbn;						//	加算区分
						rTaikei.KoteiKbn :=	GetFld('MKoteiKbn').AsInteger;	//	固定体系区分
						rTaikei.MasKbn	 := GetFld('MMasterKbn').AsInteger; //	ﾏｽﾀ区分(1:勘定科目、2:細目科目)
						rTaikei.ChildKbn :=	FALSE;
						rTaikei.NotAdd	 :=	1;
						sDspName :=	GetSousyoku( GetFld('MSimpleName').AsString, 0 );
						KNode := TreeView.Items.AddChildObjectFirst( TNode,MakeDspString(rTaikei.Code,sDspName),rTaikei);		//	HIS0012
						if iKasanKbn = 0 then	//	加算時
						begin
							KNode.ImageIndex	:= 2;
							KNode.SelectedIndex := 8;
						end
						else					//	減算時
						begin
							KNode.ImageIndex	:= 6;
							KNode.SelectedIndex := 9;
						end;
					end
					else
					begin
						New(rTaikei);
						rTaikei.NCode	 :=	GetFld('MNCode').AsInteger;	    //	内部ｺｰﾄﾞ
						rTaikei.Code	 :=	GetFld('SGCode').AsInteger;	    //	外部ｺｰﾄﾞ
						rTaikei.Kbn		 :=	1;					   		    //	実在／合計区分
						rTaikei.Name	 :=	GetFld('SSimpleName').AsString;	//	簡略名称
						rTaikei.AddKbn	 := iKasanKbn;						//	加算区分
						rTaikei.KoteiKbn :=	GetFld('SKoteiKbn').AsInteger;	//	固定体系区分
						rTaikei.MasKbn	 := GetFld('SMasterKbn').AsInteger; //	ﾏｽﾀ区分(1:勘定科目、2:細目科目)
						rTaikei.ChildKbn :=	FALSE;
						rTaikei.NotAdd	 :=	1;
						sDspName :=	GetSousyoku((GetFld('SSimpleName').AsString),(GetFld('SDecoKbn').AsInteger));
						KNode := TreeView.Items.AddChildObjectFirst( TNode,MakeDspString(rTaikei.Code,sDspName),rTaikei);	//	HIS0012
						if iKasanKbn = 0 then	//	加算時
						begin
							KNode.ImageIndex	:= 0;
							KNode.SelectedIndex := 1;
						end
						else	//	減算時
						begin
							KNode.ImageIndex	:= 4;
							KNode.SelectedIndex := 5;
						end;
						MakeKodomo_Koji(KNode,GetFld('SGCode').AsInteger,gDspLevel);
					end;
					NEXT;
				end;
			end;
		end;
	end;

	TreeView.Items[0].Expanded := TRUE;

	DmqInfo.Close;
	DmqInfo.Free;
	DmqTreeKO.Close;
	DmqTreeKO.Free;
	DmqTreeOYA.Close;
	DmqTreeOYA.Free;
end;
*) // HIS9127

//**********************************************************************
//*		Proccess	:	ツリー表示(子)
//*		Name		:	H.Endo
//*		Date		:	2000/08/10
//*		Parameter	:	OyaNode		:	親Node
//*						NCode		:	親の内部ｺｰﾄﾞ
//*						DspLevel	:	読み込むLEVEL
//*		Return		:	なし
//*		History		:   HIS0001
//*                     2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
function TJNTCRP009001f.MakeKodomo(OyaNode: TTreeNode; NCode: Extended; DspLevel: Integer): Integer;
var
	rTaikei 	:	^TaikeiRec;
	wTaikei 	:	^TaikeiRec;
	KNode		:	TTreeNode;
	DmqTree		:	TMQuery;
	iChildNCode	:	Extended;       // 科目内部ｺｰﾄﾞ
    iChildCNCode:   Extended;       // 細目内部ｺｰﾄﾞ
	iKasanKbn	:	Integer;		// 加算区分
	sDspName	:	String;
	iKodomoCnt	:	Integer;
	iReturn		:	Integer;
begin

	// 初期化処理
	iKodomoCnt	:=	0;
    iReturn     :=  0;

	DmqTree := TMQuery.Create( Self );					        // MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );	    // DBとMQueryの接続

	with DmqTree do
	begin
		// 加算先が総合計のｺｰﾄﾞの検索
		Close();
		SQL.Clear;
		SQL.Add('SELECT                             ');
   		SQL.Add('    TA.BasedNCode  TBasedCode      ');
   		SQL.Add('   ,TA.MasterKbn2  TMasterKbn2     ');
   		SQL.Add('   ,TA.AddKbn      TAddKbn         ');
   		SQL.Add('   ,MA.MasterKbn   AMasterKbn      ');
   		SQL.Add('   ,MA.SumKbn      ASumKbn         ');
   		SQL.Add('   ,MA.NCode       ANCode          ');
        SQL.Add('   ,MA.CNCode      ACNCode         ');
   		SQL.Add('   ,MA.GCode       AGCode          ');
   		SQL.Add('   ,MA.SubCode     ASubCode        ');
   		SQL.Add('   ,MA.SimpleName  ASimpleName     ');
   		SQL.Add('   ,MA.KoteiKbn    AKoteiKbn       ');
   		SQL.Add('   ,MB.MasterKbn   BMasterKbn      ');
   		SQL.Add('   ,MB.SumKbn      BSumKbn         ');
   		SQL.Add('   ,MB.DecoKbn     BDecoKbn        ');
   		SQL.Add('   ,MA.SubKmkUse   ASubUse         ');
        SQL.Add('   ,MA.SyokuchiKbn Syokuchi        ');
		SQL.Add('FROM KmkTree TA                    ');
//<051>        SQL.Add('LEFT OUTER JOIN KmKMA MA ON        ');
        SQL.Add('INNER JOIN KmKMA MA ON             '); // <051> KmkMAが削除済みだったら取得しない
        SQL.Add('   (    TA.BasedNCode = MA.NCode   ');
        SQL.Add('    AND MA.MasterKbn  = 1          ');
        SQL.Add('    AND MA.RDelKbn    = 0 )        ');
        SQL.Add('LEFT OUTER JOIN KmKMB MB ON        ');
        SQL.Add('   (    TA.BasedNCode = MB.NCode   ');
        SQL.Add('    AND MB.MasterKbn  = 1 )        ');
		SQL.Add('WHERE TA.MasterKbn  =  1           ');
		SQL.Add('  AND TA.SumNCode   =  :Code       ');
		SQL.Add('  AND TA.BasedNCode <> 0           ');
		SQL.Add('ORDER BY TA.EntNo DESC             ');

		ParamByName('Code').AsFloat := NCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;
			Result := 0;
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			iKodomoCnt          :=  iKodomoCnt + 1;
			iKasanKbn           :=  GetFld('TAddKbn').AsInteger;	            // 加算区分
           	iChildNCode	        :=  GetFld('ANCode') .AsFloat;	    	        // 科目内部ｺｰﾄﾞ
            iChildCNCode        :=  GetFld('ACNCode').AsFloat;                  // 細目内部ｺｰﾄﾞ

			New(rTaikei);
			rTaikei.NCode		:=	iChildNCode;                                // 科目内部ｺｰﾄﾞ
            rTaikei.CNCode      :=  iChildCNCode;                               // 細目内部ｺｰﾄﾞ
			rTaikei.GCode		:=	GetFld('AGCode')        .AsInteger;         // 科目外部ｺｰﾄﾞ
            rTaikei.SubCode     :=  GetFld('ASubCode')      .AsString;          // 細目外部ｺｰﾄﾞ
			rTaikei.Kbn			:=	GetFld('ASumKbn')       .AsInteger;	        // 実在／合計区分
			rTaikei.Name		:=	GetFld('ASimpleName')   .AsString;	        // 簡略名称
			rTaikei.AddKbn		:=  iKasanKbn;						            // 加算区分
			rTaikei.KoteiKbn	:=	GetFld('AKoteiKbn')     .AsInteger;	        // 固定体系区分
			rTaikei.MasKbn		:=  GetFld('AMasterKbn')    .AsInteger;         // ﾏｽﾀ区分(1:勘定科目、2:細目科目)
			rTaikei.ChildKbn	:=	FALSE;
			rTaikei.NotAdd		:=	1;
            rTaikei.Syokuchi    :=  GetFld('Syokuchi')      .AsInteger;         // 諸口区分
            rTaikei.CodeAttr    :=  0;
            rTaikei.CodeDigit   :=  0;
			sDspName	        :=	GetSousyoku((GetFld('ASimpleName').AsString),(GetFld('BDecoKbn').AsInteger));
			KNode               :=  TreeView.Items.AddChildObjectFirst( OyaNode, MakeDspString(rTaikei.GCode,sDspName), rTaikei);

            // --------------
            //  実在／合計区分が実在の時
            // --------------
			if ( GetFld('ASumKbn').AsInteger = 0 ) then
			begin
                // ﾏｽﾀ区分が勘定科目の時
				if ( GetFld('AMasterKbn').AsInteger = 1 ) then
				begin
                    // --------------
                    //  加算時
                    // --------------
					if ( iKasanKbn = 0 ) then
					begin
						KNode.ImageIndex	:= 2;
						KNode.SelectedIndex := 8;
					end
                    // --------------
                    //  減算時
                    // --------------
					else
					begin
						KNode.ImageIndex	:= 6;
						KNode.SelectedIndex := 9;
					end;
				end;
			end
            // --------------
            //  合計時
            // --------------
			else
			begin
                // --------------
                //  加算時
                // --------------
				if ( iKasanKbn = 0 ) then
				begin
					KNode.ImageIndex	:= 0;
					KNode.SelectedIndex := 1;
				end
                // --------------
                //  減算時
                // --------------
				else
				begin
					KNode.ImageIndex	:= 4;
					KNode.SelectedIndex := 5;
				end;
			end;

            // --------------
            //  実在時
            // --------------
			if ( rTaikei.MasKbn = 1 ) and ( rTaikei.Kbn = 0 ) then
			begin
				// 採用区分がありの時
				if ( GetFld('ASubUse').AsInteger = 1 ) then
                    // 細目子供作成処理
                    iReturn	:= MakeSaimokuKdomo(KNode,iChildNCode)
			end
			else
                // 子供作成処理
				iReturn	:= MakeKodomo(KNode,iChildNCode,DspLevel);

            // -----------------
            //	子供がいる時
            // -----------------
			if ( iReturn <> 0 ) then
			begin
				if ( OyaNode.Level = DspLevel - 1 ) then
				begin
					wTaikei	            :=  KNode.Data;
					wTaikei.ChildKbn    :=  TRUE;
				end;
			end;

			if ( OyaNode.Level < DspLevel - 2 ) then
				KNode.Expanded          :=  TRUE;

			Next;
		end;
	end;

	DmqTree.Close;
	DmqTree.Free;

	Result := iKodomoCnt;

end;

//************************************************************************
//*		Component		:	MComboBox ( TMComboBox )
//*							ComboBoxが変わった時
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MComboBox_Change(Sender: TObject);
begin

	//	機能指示ｺﾝﾎﾞ
	if ( MComboBox.DroppedDown = TRUE ) then
		Exit
	else
		ComboChange();
end;

//**********************************************************************
//*		Proccess	:	ツリーの表示文字に装飾をつける
//*		Name		:	H.Endo
//*		Date		:	2000/08/11
//*		Parameter	:	SName		:	表示する文字
//*						SouKbn		:	装飾区分
//*		Return		:	装飾を付けた文字
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.GetSousyoku(SName: String; SouKbn: Integer): String;
var
	sSousyoku	:	String;
begin

	case SouKbn of
		0:	sSousyoku	:=	SName;
		1:	sSousyoku	:=	'【' + SName +'】';
		2:	sSousyoku	:=	'（' + SName +'）';
		3:	sSousyoku	:=	'〔' + SName +'〕';
		4:	sSousyoku	:=	'＜' + SName +'＞';
		5:	sSousyoku	:=	'((' + SName +'))';
		6:	sSousyoku	:=	'｛' + SName +'｝';
	end;
	Result	:=	sSousyoku;

end;

//**********************************************************************
//*		Proccess	:	体系のデータのセット
//*		Name		:	H.Endo
//*		Date		:	2000/08/11
//*		Parameter	:	No		:	選択されているCOMBOBOXITEMINDEXNO
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*						2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
procedure TJNTCRP009001f.MakeDspDate(No: Integer);
var
	SumKbn	:	Byte;		//	実在/合計区分
begin

	//	初期化
	SumKbn	:=	0;

	case No of
		SONEKI:	//	損益科目体系
		begin
			//	売上高
			SonekiArrayL1[0].ConstNCode	:=	GetKmkInfo(URIAGE,1,SumKbn);	//	特殊科目情報から科目ｺｰﾄﾞ取得
			SonekiArrayL1[0].SumKbn		:=	SumKbn;
			SonekiArrayL1[0].Addkbn		:=	0;	//加算
			//	売上原価
			SonekiArrayL1[1].ConstNCode	:=	GetKmkInfo(URIAGEGENKA,1,SumKbn);
			SonekiArrayL1[1].SumKbn		:=	SumKbn;
			SonekiArrayL1[1].Addkbn		:=	1;	//減算
			//	売上総利益
			SonekiArrayL1[2].ConstNCode	:=	GetKmkInfo(URIAGESOURI,1,SumKbn);
			SonekiArrayL1[2].SumKbn		:=	SumKbn;
			SonekiArrayL1[2].Addkbn		:=	0;	//加算
			//	販売費及び一般管理費
			SonekiArrayL1[3].ConstNCode	:=	GetKmkInfo(HANBAI_IPAN,1,SumKbn);
			SonekiArrayL1[3].SumKbn		:=	SumKbn;
			SonekiArrayL1[3].Addkbn		:=	1;	//減算
			//	営業利益
			SonekiArrayL1[4].ConstNCode	:=	GetKmkInfo(EIGYOU_RI,1,SumKbn);
			SonekiArrayL1[4].SumKbn		:=	SumKbn;
			SonekiArrayL1[4].Addkbn		:=	0;	//加算
			//	経常利益
			SonekiArrayL1[5].ConstNCode	:=	GetKmkInfo(KEIZYOU_RI,1,SumKbn);
			SonekiArrayL1[5].SumKbn		:=	SumKbn;
			SonekiArrayL1[5].Addkbn		:=	0;	//加算
			//	税引前利益
			SonekiArrayL1[6].ConstNCode	:=	GetKmkInfo(ZEIHIKIMAE,1,SumKbn);
			SonekiArrayL1[6].SumKbn		:=	SumKbn;
			SonekiArrayL1[6].Addkbn		:=	0;	//加算
            //	法人税等
			SonekiArrayL1[7].ConstNCode	:=	GetKmkInfo(HOUZIN,1,SumKbn);
			SonekiArrayL1[7].SumKbn		:=	SumKbn;
			SonekiArrayL1[7].Addkbn		:=	1;	//減算
			//	法人税調整額
			SonekiArrayL1[8].ConstNCode	:=	GetKmkInfo(HOUZINTYOUSEI,1,SumKbn);
			SonekiArrayL1[8].SumKbn		:=	SumKbn;
			SonekiArrayL1[8].Addkbn		:=	1;	//減算
			//	当期利益
			SonekiArrayL1[9].ConstNCode	:=	GetKmkInfo(TOUKIRIEKI_SO,1,SumKbn);
			SonekiArrayL1[9].SumKbn		:=	SumKbn;
			SonekiArrayL1[9].Addkbn		:=	0;	//加算
			//	前期繰越利益
			SonekiArrayL1[10].ConstNCode	:=	GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn);
			SonekiArrayL1[10].SumKbn	:=	SumKbn;
			SonekiArrayL1[10].Addkbn	:=	0;	//加算
			//	過年度税効果調整額
			SonekiArrayL1[11].ConstNCode	:=	GetKmkInfo(KANENDO,1,SumKbn);
			SonekiArrayL1[11].SumKbn	:=	SumKbn;
			SonekiArrayL1[11].Addkbn	:=	0;	//加算
			//	目的積立金取崩
			SonekiArrayL1[12].ConstNCode	:=	GetKmkInfo(MOKUTEKI,1,SumKbn);
			SonekiArrayL1[12].SumKbn	:=	SumKbn;
			SonekiArrayL1[12].Addkbn	:=	0;	//加算
			//	中間配当金
			SonekiArrayL1[13].ConstNCode	:=	GetKmkInfo(TYUKAN,1,SumKbn);
			SonekiArrayL1[13].SumKbn	:=	SumKbn;
			SonekiArrayL1[13].Addkbn	:=	1;	//減算
			//	利益準備金
			SonekiArrayL1[14].ConstNCode	:=	GetKmkInfo(RIEKIZYUNBI,1,SumKbn);
			SonekiArrayL1[14].SumKbn	:=	SumKbn;
			SonekiArrayL1[14].Addkbn	:=	1;	//減算
			//	当期未処分利益
			SonekiArrayL1[15].ConstNCode	:=	GetKmkInfo(TOUKIMISYO,1,SumKbn);
			SonekiArrayL1[15].SumKbn	:=	SumKbn;
			SonekiArrayL1[15].Addkbn	:=	0;	//加算
//<053>--start---
// <078> ↓↓↓
//			if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
			if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SumKbn)) then
// <078> ↑↑↑
			begin
				//	当期未処分利益
				SonekiArrayL1[10].ConstNCode	:=	GetKmkInfo(TOUKIMISYO,1,SumKbn);
//				SonekiArrayL1[10].NodeCode	:=	0;
				SonekiArrayL1[10].SumKbn	:=	SumKbn;
				SonekiArrayL1[10].Addkbn	:=	0;	//加算
				//	前期繰越利益
				SonekiArrayL1[11].ConstNCode	:=	GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn);
//				SonekiArrayL1[11].NodeCode	:=	0;
				SonekiArrayL1[11].SumKbn	:=	SumKbn;
				SonekiArrayL1[11].Addkbn	:=	0;	//加算
				//	過年度税効果調整額
				SonekiArrayL1[12].ConstNCode	:=	GetKmkInfo(KANENDO,1,SumKbn);
//				SonekiArrayL1[12].NodeCode	:=	0;
				SonekiArrayL1[12].SumKbn	:=	SumKbn;
				SonekiArrayL1[12].Addkbn	:=	0;	//加算
				//	目的積立金取崩
				SonekiArrayL1[13].ConstNCode	:=	GetKmkInfo(MOKUTEKI,1,SumKbn);
//				SonekiArrayL1[13].NodeCode	:=	0;
				SonekiArrayL1[13].SumKbn	:=	SumKbn;
				SonekiArrayL1[13].Addkbn	:=	0;	//加算
				//	中間配当金
				SonekiArrayL1[14].ConstNCode	:=	GetKmkInfo(TYUKAN,1,SumKbn);
//				SonekiArrayL1[14].NodeCode	:=	0;
				SonekiArrayL1[14].SumKbn	:=	SumKbn;
				SonekiArrayL1[14].Addkbn	:=	1;	//減算
				//	利益準備金
				SonekiArrayL1[15].ConstNCode	:=	GetKmkInfo(RIEKIZYUNBI,1,SumKbn);
//				SonekiArrayL1[15].NodeCode	:=	0;
				SonekiArrayL1[15].SumKbn	:=	SumKbn;
				SonekiArrayL1[15].Addkbn	:=	1;	//減算
			end
			else
			begin
				//	前期繰越利益
				SonekiArrayL1[10].ConstNCode	:=	GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn);
//				SonekiArrayL1[10].NodeCode	:=	0;
				SonekiArrayL1[10].SumKbn	:=	SumKbn;
				SonekiArrayL1[10].Addkbn	:=	0;	//加算
				//	過年度税効果調整額
				SonekiArrayL1[11].ConstNCode	:=	GetKmkInfo(KANENDO,1,SumKbn);
//				SonekiArrayL1[11].NodeCode	:=	0;
				SonekiArrayL1[11].SumKbn	:=	SumKbn;
				SonekiArrayL1[11].Addkbn	:=	0;	//加算
				//	目的積立金取崩
				SonekiArrayL1[12].ConstNCode	:=	GetKmkInfo(MOKUTEKI,1,SumKbn);
//				SonekiArrayL1[12].NodeCode	:=	0;
				SonekiArrayL1[12].SumKbn	:=	SumKbn;
				SonekiArrayL1[12].Addkbn	:=	0;	//加算
				//	中間配当金
				SonekiArrayL1[13].ConstNCode	:=	GetKmkInfo(TYUKAN,1,SumKbn);
//				SonekiArrayL1[13].NodeCode	:=	0;
				SonekiArrayL1[13].SumKbn	:=	SumKbn;
				SonekiArrayL1[13].Addkbn	:=	1;	//減算
				//	利益準備金
				SonekiArrayL1[14].ConstNCode	:=	GetKmkInfo(RIEKIZYUNBI,1,SumKbn);
//				SonekiArrayL1[14].NodeCode	:=	0;
				SonekiArrayL1[14].SumKbn	:=	SumKbn;
				SonekiArrayL1[14].Addkbn	:=	1;	//減算
				//	当期未処分利益
				SonekiArrayL1[15].ConstNCode	:=	GetKmkInfo(TOUKIMISYO,1,SumKbn);
//				SonekiArrayL1[15].NodeCode	:=	0;
				SonekiArrayL1[15].SumKbn	:=	SumKbn;
				SonekiArrayL1[15].Addkbn	:=	0;	//加算
			end;
//<053>---end----
			MakeTreeKotei(No,16);
		end;
//  		GENKOU:	MakeTreeKouji(No);
		else
		begin
			MakeTree(No);
		end;
	end;

end;

//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							ドラッグ＆ドロップ
//*		Event			:	OnDragDrop
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.TreeViewDragDrop(Sender, Source: TObject; X,
  Y: Integer);
var
	DmqData			:	TMQuery;
	cDragNode		:	TTreeNode;
	cDropNode		:	TTreeNode;
	cDragNodeParent	:	TTreeNode;
	cDropNodeParent	:	TTreeNode;
	cNode			:	TTreeNode;
	cNodeP			:	TTreeNode;
	wkNode			:	TTreeNode;
	rDrag			:	^TaikeiRec;
	rDrop			:	^TaikeiRec;
	rDragParent		:	^TaikeiRec;
	rDropParent		:	^TaikeiRec;
	iDragParentNCode:	Extended;
	iDragParentCode	:	Integer;
	iDropParentNCode:	Extended;
	iDropParentCode	:	Integer;
	iSelect			:	Integer;
	wkRecP			:	^TaikeiRec;
	wkRec			:	^TaikeiRec;
	WorkRec			:	^TaikeiRec;
	iLoop			:	Integer;
	iCode			:	Integer;
	iNCode			:	Extended;
	sName			:	String;
	iEntNo			:	Integer;
	iSelectCode		:	Integer;
	RollBackFlag	:	Boolean;
	iOyaCode		:	Integer;
	cwkNode			:	TTreeNode;
	iKmkCode		:	Integer;
begin

	iEntNo	        :=	0;
	RollBackFlag	:=	FALSE;
    iKmkCode        :=  0;
//	iOyaCode		:=	0;					// <063> DEL

	//	参照時		HIS0004
//aaaaa	if ( giReferFlag = REFER ) then
//aaaaa		Exit;

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
//	MDataModule.BeginTran (dbCorp_Select);	// <063> DEL ↓に移動

	// -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----


// ------------------------
//	    TMTreeView時
// ------------------------
	if ( Screen.ActiveControl.Name = TreeView.Name ) then
	begin
		cDragNode		:=	TreeView.Selected;
		cDropNode		:=	TreeView.DropTarget;
		cDragNodeParent	:=	cDragNode.Parent;
		cDropNodeParent	:=	cDropNode.Parent;

		cwkNode := cDragNode.GetPrevChild(cDragNode);

		if ( cDragNodeParent <> nil ) then
		begin
			rDragParent	 :=	cDragNodeParent.Data;	//	挿入元親ﾃﾞｰﾀ
			grOya_Taikei :=	cDragNodeParent.Data;	//	移動後のGrid再表示に使用
		end
		else
		begin
			rDragParent	 :=	nil;
			grOya_Taikei :=	nil;
		end;

		if ( cDropNodeParent <> nil ) then
			rDropParent	:= cDropNodeParent.Data		//	挿入先親ﾃﾞｰﾀ
		else
			rDropParent	:= nil;						//	挿入先親ﾃﾞｰﾀ

		rDrag := cDragNode.Data;					//	挿入元ﾃﾞｰﾀ
		rDrop := cDropNode.Data;					//	挿入先ﾃﾞｰﾀ

		if ( rDrag.MasKbn = 1 ) then	            //	挿入元が勘定科目時
		begin
			if (rDrag.GCode = rDrop.GCode) then	    //	挿入元と挿入先が同一時は何もしない
				Exit;
		end;

		//	合計に細目はつかない
		if ( rDrag.MasKbn = 2 ) then			    //	挿入元が細目の時
		begin
			if ( rDrop.Kbn = 1 ) then			    //	挿入先が合計の時
				Exit;
		end;

		//	挿入元が細目の時
		if ( rDrag.MasKbn = 2 ) and ( rDrag.Kbn = 0 ) then
		begin
			if ( rDrop.MasKbn = 2 ) then
			begin
				cNode := TreeView.GetNodeAt(X, Y);
				TreeView.Selected.MoveTo(cNode,naInsert);
				Exit;
			end;
		end;

		//	固定区分が２の時
		if ( rDrop.KoteiKbn = 2 ) then
			Exit;

		if ( rDragParent = nil ) then
        begin
			iDragParentNCode := 0;
			iDragParentCode  := 0;
        end
		else
        begin
			iDragParentNCode := rDragParent.NCode;
			iDragParentCode  := rDragParent.GCode;
        end;

		if ( rDropParent = nil ) then
        begin
			iDropParentNCode := 0;
			iDropParentCode  := 0;
        end
		else
        begin
			iDropParentNCode := rDropParent.NCode;
			iDropParentCode  := rDropParent.GCode;
        end;


		// 公益法人の時は２重加算ﾁｪｯｸを行わない
		if ( m_KouekiKbn = 0 ) then		// 一般法人の時							// HIS0113(if文追加)
		begin
		//--- HIS0107 St -----
			// DRAG対象と同じｺｰﾄﾞの体系を全て取得
//<097> MOD St
//			fnGetSystem(ACCESS_DRAGANDDROP,rDrag.GCode,cDragNode.AbsoluteIndex);
            if (rDragParent <> nil) then
    			fnGetSystem(ACCESS_DRAGANDDROP,rDrag.GCode,cDragNode.AbsoluteIndex,iDragParentCode)
            else
                fnGetSystem(ACCESS_DRAGANDDROP,rDrag.GCode,cDragNode.AbsoluteIndex);
//<097> MOD Ed
			// 2重加算ﾁｪｯｸ処理
			if ( fnDoubleAddCheck(ACCESS_DRAGANDDROP,cDropNode) = -1 ) then Exit;
		//--- HIS0107 Ed -----
		end
//--- HIS0113 St ----------
		else
		begin
			// Drop先が実在の時
			if ( rDrop.MasKbn = 1 ) and ( rDrop.Kbn = 0 ) then
				iKmkCode := iDropParentCode;
			// Drop先が合計の時
			if ( rDrop.MasKbn = 1 ) and ( rDrop.Kbn = 1 ) then
				iKmkCode := rDrop.GCode;
			// Drag元の親ｺｰﾄﾞと同一かﾁｪｯｸ
			if ( iDragParentCode <> iKmkCode ) then
			begin
				// Drag対象ｺｰﾄﾞの親情報を全て取得

                fnGetParentInfo(rDrag.NCode);   

				if ( fnSameParentCheck(ACCESS_DRAGANDDROP,cDropNode) = -1 ) then Exit;
			end;
		end;
//--- HIS0113 Ed ----------

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
		MDataModule.BeginTran (dbCorp_Select);			// 子会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始	<063> ADD ↑から移動
		ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);		// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始	<063> ADD

		iSelect	:= InsertTreeRecord(rDrag.GCode,iDragParentCode,rDrag.NCode,iDragParentNCode,rDrag.Kbn,rDrag.SubCode,
									 rDrop.GCode,iDropParentCode,rDrop.NCode,iDropParentNCode,rDrop.SubCode,rDrop.Kbn,
        	            			 ACCESS_DRAGANDDROP,rDrag.MasKbn,
                                     rDrop.MasKbn,rDrag.AddKbn,RollBackFlag);

        //	RollBack時TRUE
		if ( RollBackFlag ) then
// <063> MOD start
//			Exit;
		begin
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);	// 親会社DBもﾛｰﾙﾊﾞｯｸ(子はﾛｰﾙﾊﾞｯｸ済み)
			Exit;
		end;
// <063> MOD end

		cNode := TreeView.GetNodeAt(X, Y);

		case iSelect of
			INSERT	:	TreeView.Selected.MoveTo(cNode,naInsert);
			ADD		:	TreeView.Selected.MoveTo(cNode,naAddChild);
		end;

		iSelectCode	:=	0;

		case iSelect of
			INSERT	:
            begin
				//	同一ｺﾋﾟｰ元の削除処理
				for iLoop := TreeView.Items.Count-1 downto 0 do
				begin
					cNode := TreeView.Items[iLoop];
					if ( cNode <> cDragNode ) then
					begin
						wkRec := cNode.Data;
						if ( wkRec^.GCode = rDrag.GCode ) then
						begin
//--- HIS0114 St ----------
							cNodeP := cNode.Parent;									//hiro0204
							if ( cNodeP <> nil ) then
							begin
								wkRecP := cNodeP.Data;
								if ( wkRecP^.GCode = rDragParent.GCode ) then
									(TreeView.Items[iLoop]).delete;
							end
							else
//--- HIS0114 Ed ----------
								(TreeView.Items[iLoop]).delete;
						end;
					end;
				end;

				//	同一ｺﾋﾟｰ先への追加処理
				for iLoop := TreeView.Items.Count-1 downto 0 do
			    begin
					cNode := TreeView.Items[iLoop];
					if ( cNode <> cDropNodeParent ) then
					begin
						wkRec := cNode.Data;
   						if ( wkRec.GCode = rDropParent.GCode ) then
						begin
                            // --------------------
                            //	    実在時
                            // --------------------
							if ( rDrag.MasKbn = 1 ) and ( rDrag.Kbn = 0 ) then
							begin
								New(WorkRec);
                                WorkRec.NCode       :=  rDrag.NCode;
                                WorkRec.CNCode      :=  rDrag.CNCode;
								WorkRec.GCode		:=	rDrag.GCode;
                                WorkRec.SubCode     :=  rDrag.SubCode;
								WorkRec.Kbn			:=	rDrag.Kbn;
								WorkRec.KoteiKbn	:=	rDrag.KoteiKbn;
								WorkRec.MasKbn		:=	rDrag.MasKbn;
								WorkRec.Name		:=	rDrag.Name;
								WorkRec.AddKbn		:=  rDrag.AddKbn;
								WorkRec.ChildKbn	:=	rDrag.ChildKbn;
								WorkRec.NotAdd		:=	rDrag.NotAdd;
                                WorkRec.Syokuchi    :=  rDrag.Syokuchi;
								wkNode := TreeView.Items.AddChildobject(cNode,MakeDspString(WorkRec.GCode,WorkRec.Name),WorkRec);
								wkNode.ImageIndex	 := cDragNode.ImageIndex;
								wkNode.SelectedIndex := cDragNode.SelectedIndex;
							end
                            // --------------------
                            //	    合計時
                            // --------------------
							else if ( rDrag.MasKbn = 1 ) and ( rDrag.Kbn = 1 ) then
							begin
								New(WorkRec);
                                WorkRec.NCode       :=  rDrag.NCode;
                                WorkRec.CNCode      :=  rDrag.CNCode;
								WorkRec.GCode		:=	rDrag.GCode;
                                WorkRec.SubCode     :=  rDrag.SubCode;
								WorkRec.Kbn			:=	rDrag.Kbn;
								WorkRec.KoteiKbn	:=	rDrag.KoteiKbn;
								WorkRec.MasKbn		:=	rDrag.MasKbn;
								WorkRec.Name		:=	rDrag.Name;
								WorkRec.AddKbn		:=  rDrag.AddKbn;
								WorkRec.ChildKbn	:=	rDrag.ChildKbn;
								WorkRec.NotAdd		:=	rDrag.NotAdd;
                                WorkRec.Syokuchi    :=  rDrag.Syokuchi;
								wkNode := TreeView.Items.AddChildobject(cNode,MakeDspString(WorkRec.GCode,WorkRec.Name),WorkRec);
								wkNode.ImageIndex	 := cDragNode.ImageIndex;
								wkNode.SelectedIndex := cDragNode.SelectedIndex;
								MakeKodomo(wkNode,rDrag.NCode,gDspLevel);
							end;
						end;
					end;
    			end;

				LevelDsp(rDrag.NCode,FALSE);	//	勘定科目時

                //	実在科目の時、加算元の親と加算先の親が違ったら
				if ( rDrag.Kbn = 0 ) and ( iDragParentCode <> iDropParentCode ) then
					gbKmkTree2Flag := TRUE;

//--- HIS0111 St ----------
//原型				cDragNode.Selected := TRUE;
				if ( cDragNodeParent <> nil ) then
				begin
					if ( cDragNodeParent = cDropNodeParent ) then	// 同一内の移動時
						cDragNode.Selected := TRUE
					else
						cDragNodeParent.Selected := TRUE;		    //	Dragした親Nodeへ移動
				end
				else
				begin
					HagureCheck();
					cwkNode.Selected := TRUE;					    //	はぐれの実在の時は一つ上のNodeへ移動
				end;
//--- HIS0111 Ed -----
			end;
			ADD		:
			begin
				//	同一ｺﾋﾟｰ元の削除処理
				for iLoop := TreeView.Items.Count-1 downto 0 do
				begin
					cNode := TreeView.Items[iLoop];
					if ( cNode <> cDragNode ) then
					begin
						wkRec := cNode.Data;
						if ( wkRec^.GCode = rDrag.GCode ) then
						begin
//--- HIS0114 St ----------
							cNodeP := cNode.Parent;									//hiro0204
							if ( cNodeP <> nil ) then
							begin
								wkRecP := cNodeP.Data;
								if ( wkRecP^.GCode = rDragParent.GCode ) then
									(TreeView.Items[iLoop]).delete;
							end
							else
//--- HIS0114 Ed ----------
								(TreeView.Items[iLoop]).delete;
						end;
					end;
				end;

				//	同一ｺﾋﾟｰ先への追加処理
				for iLoop := TreeView.Items.Count-1 downto 0 do
			    begin
					cNode := TreeView.Items[iLoop];
					if ( cNode <> cDropNode ) then
					begin
						wkRec := cNode.Data;
   						if ( wkRec.GCode = rDrop.GCode ) then
						begin
                            // --------------------
                            //	    実在時
                            // --------------------
							if ( rDrag.MasKbn = 1 ) and ( rDrag.Kbn = 0 ) then
							begin
								New(WorkRec);
                                WorkRec.NCode       :=  rDrag.NCode;
                                WorkRec.CNCode      :=  rDrag.CNCode;
								WorkRec.GCode		:=	rDrag.GCode;
                                WorkRec.SubCode     :=  rDrag.SubCode;
								WorkRec.Kbn			:=	rDrag.Kbn;
								WorkRec.KoteiKbn	:=	rDrag.KoteiKbn;
								WorkRec.MasKbn		:=	rDrag.MasKbn;
								WorkRec.Name		:=	rDrag.Name;
								WorkRec.AddKbn		:=  rDrag.AddKbn;
								WorkRec.ChildKbn	:=	rDrag.ChildKbn;
								WorkRec.NotAdd		:=	rDrag.NotAdd;
                                WorkRec.Syokuchi    :=  rDrag.Syokuchi;
								wkNode := TreeView.Items.AddChildobject(cNode,MakeDspString(WorkRec.GCode,WorkRec.Name),WorkRec);
								wkNode.ImageIndex	 := cDragNode.ImageIndex;
								wkNode.SelectedIndex := cDragNode.SelectedIndex;
							end
                            // --------------------
                            //	    合計時
                            // --------------------
							else if ( rDrag.MasKbn = 1 ) and ( rDrag.Kbn = 1 ) then
							begin
								New(WorkRec);
								WorkRec.NCode       :=  rDrag.NCode;
                                WorkRec.CNCode      :=  rDrag.CNCode;
								WorkRec.GCode		:=	rDrag.GCode;
                                WorkRec.SubCode     :=  rDrag.SubCode;
								WorkRec.Kbn			:=	rDrag.Kbn;
								WorkRec.KoteiKbn	:=	rDrag.KoteiKbn;
								WorkRec.MasKbn		:=	rDrag.MasKbn;
								WorkRec.Name		:=	rDrag.Name;
								WorkRec.AddKbn		:=  rDrag.AddKbn;
								WorkRec.ChildKbn	:=	rDrag.ChildKbn;
								WorkRec.NotAdd		:=	rDrag.NotAdd;
                                WorkRec.Syokuchi    :=  rDrag.Syokuchi;
								wkNode := TreeView.Items.AddChildobject(cNode,MakeDspString(WorkRec.GCode,WorkRec.Name),WorkRec);
								wkNode.ImageIndex	 := cDragNode.ImageIndex;
								wkNode.SelectedIndex := cDragNode.SelectedIndex;
								MakeKodomo(wkNode,rDrag.NCode,gDspLevel);
							end;
						end;
					end;
    			end;

				if ( rDrag.Kbn = 0 ) and ( iDragParentCode <> rDrop.GCode ) then
					gbKmkTree2Flag := TRUE;		//	HIS0003
				if ( rDrag.Kbn = 1 ) then		//	合計時
					gbKmkTree2Flag := TRUE;		//	HIS0003

				if ( cDragNodeParent <> nil ) then
					cDragNodeParent.Selected := TRUE	//	Dragした親Nodeへ移動
//--- HIS0111 St ----------
				else
				begin
					HagureCheck();
					cwkNode.Selected := TRUE;			//	はぐれの実在の時は一つ上のNodeへ移動
				end;
//--- HIS0111 Ed ----------
			end;
		end;
	end
	else
	begin
		DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

		iCode  := DZitsuGrid.DataSource.DataSet.FieldValues['Code'];
		iNCode := DZitsuGrid.DataSource.DataSet.FieldValues['NCode'];
		sName  := DZitsuGrid.DataSource.DataSet.FieldValues['SName'];

		cDropNode := TreeView.DropTarget;
		rDrop	  := TreeView.DropTarget.Data;

		if ( rDrop.MasKbn = 1 ) and ( rDrop.Kbn = 0 ) then
		begin
			DmqData.Close;	//HIS99
			DmqData.Free;	//HIS99
			exit;
		end;

		with DmqData do
		begin
			//	登録NOを取得し次のNOを取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('   MAX(EntNo)              ');	//	登録Noの最大値
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 8        '); //  ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :Code    ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('Code').AsFloat	:=	rDrop.NCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iEntNo := ((GetFld('MAX(KmkTree.EntNo)').AsInteger) div 100 * 100) + 100;
			end;

			MDataModule.BeginTran (dbCorp_Select);		// 子会社のﾄﾗﾝｻﾞｸｼｮﾝ開始	<063> ADD
			ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);	// 親会社DBもﾄﾗﾝｻﾞｸｼｮﾝ開始	<063> ADD

			//	体系を挿入
			Close();
			SQL.Clear;
			SQL.Add('INSERT INTO KmkTree (      ');
			SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
            SQL.Add('       ,EntNo              ');	//	登録NO
            SQL.Add('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('       ,AddKbn             ');	//	加算区分
			SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分			HIS0001
			SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') VALUES (                 ');
			SQL.Add('        8                  ');	//	ﾏｽﾀ区分(8:工事合計)
			SQL.Add('       ,:SakiCode          ');	//	加算先内部ｺｰﾄﾞ
			SQL.Add('       ,:No                ');	//	登録NO
			SQL.Add('       ,:MotoCode          ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('       ,:Add               ');	//	加算区分
			SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                          ');

			ParamByName('SakiCode') .AsFloat   := rDrop.NCode;	//	加算先内部ｺｺｰﾄﾞ
			ParamByName('No')       .AsInteger := iEntNo;		//	登録NO
			ParamByName('MotoCode') .AsFloat   := iNCode; 		//	加算元内部ｺｰﾄﾞ
			ParamByName('Add')      .AsInteger := 0;			//	加算区分
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
			TableHistory.KmkTree_Kou	:=	8;

			gbKmkTree2Flag	:=	TRUE;	//	HIS0003
		end;

		New(wkRec);
		wkRec.NCode		:=	iNCode;
        wkRec.CNCode    :=  0;
		wkRec.GCode		:=	iCode;
// <013>        wkRec.SubCode   :=  '';
        wkRec.SubCode   :=  '0';    // <013>
		wkRec.Kbn		:=	0;
		wkRec.KoteiKbn	:=	0;
		wkRec.MasKbn	:=	1;
		wkRec.Name		:=	sName;
		wkRec.AddKbn	:=  0;
		wkRec.ChildKbn	:=	FALSE;
		wkRec.NotAdd	:=	1;
        wkRec.Syokuchi  :=  0;
		cNode := TreeView.Items.AddChildobject(cDropNode,MakeDspString(wkRec.GCode,sName),wkRec);	//	HIS0012
		cNode.ImageIndex 	:= 2;
		cNode.SelectedIndex := 8;

		DmqData.Close;
		DmqData.Free;
    end;

	MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----
end;

//**********************************************************************
//*		Proccess	:	ﾚｺｰﾄﾞ挿入処理
//*		Name		:	H.Endo
//*		Date		:	2000/08/22
//*		Parameter	:	MotoGCode		:	挿入(加算)元外部ｺｰﾄﾞ
//*						MotoGCodeParent	:	挿入(加算)元外部ｺｰﾄﾞ(親)
//*						MotoSumKbn		:	挿入(加算)元実在／合計区分 (0:実在, 1:合計)
//*						SakiGCode		:	挿入(加算)先外部ｺｰﾄﾞ
//*						SakiGCodeParent	:	挿入(加算)先外部ｺｰﾄﾞ(親)
//*						SumKbn			:	挿入(加算)先実在/合計区分 (0:実在, 1:合計)
//*						AccessMethod	:	挿入方法 (ACCESS_PASTE:Paste,
//*													  ACCESS_DRAGANDDROP:Drag&Drop)
//*						MotoMasKbn		:	挿入(加算)元ﾏｽﾀｰ区分(1:勘定科目、2:細目科目)
//*						SakiMasKbn		:	挿入(加算)先ﾏｽﾀｰ区分(1:勘定科目、2:細目科目)
//*						AddKbn			:	加算区分
//*						RollBackFlag	:	RollBack時TRUE
//*		Return		:	挿入方法(INSERT．ADD)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.InsertTreeRecord(MotoGCode, MotoGCodeParent: Integer;
                                         MotoNCode, MotoNCodeParent: Extended;
                                         MotoSumKbn: Integer; MotoSubCode: String;
									     SakiGCode, SakiGCodeParent: Integer;
                                         SakiNCode, SakiNCodeParent: Extended;
                                         SakiSubCode: String;
                                         SumKbn: Integer; AccessMethod: Integer;
                                         MotoMasKbn: Integer; SakiMasKbn: Integer;
									     AddKbn:	Integer; var RollBackFlag: Boolean): Integer;
var
	DmqTree			:	TMQuery;
	DmqData			:	TMQuery;
	iChangeOrder	:	Integer;
	iNCode			:	Extended;
    iCNCode         :   Extended;
	iCode			:	Integer;
	iHantei			:	Integer;	    //	戻り値
	bFlag			:	Boolean;
	RollBack		:	Boolean;
begin
	//	初期化処理
	iChangeOrder	:=	0;
	iNCode			:=	0;
	iCode			:=	0;
    iCNCode         :=  0;
	iHantei			:=	0;
	bFlag			:=	FALSE;
	RollBack		:=	FALSE;

	DmqTree := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );		//	DBとMQueryの接続

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	if ( MotoMasKbn = 2 ) then	//	挿入元が細目勘定時
	begin
		if (( SakiMasKbn = 1 )) and ( SumKbn = 0 ) then		// 挿入先が実在
		begin
			iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, ENDMOVE, RollBack);
			if (RollBack) then		//	RollBack時TRUE
			begin
				RollBackFlag	:=	RollBack;
				result	:=	0;

				DmqTree.Close;
				DmqTree.Free;
				DmqData.Close;
				DmqData.Free;
				exit;
			end;
			iNCode	:=	SakiNCode;
			iCode	:=	SakiGCode;

			if iChangeOrder = -1 then
			begin
				iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent,ENDMOVE, RollBack);
				if ( RollBack ) then		//	RollBack時TRUE
				begin
					RollBackFlag	:=	RollBack;
					result	:=	0;

					DmqTree.Close;
					DmqTree.Free;
					DmqData.Close;
					DmqData.Free;

					exit;
				end;
			end;

			iHantei	:=	ADD;			//	追加
		end;

		if ( SakiMasKbn = 2 ) and ( SumKbn = 0 ) then	//	挿入先が細目勘定時
		begin
			iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, MOVE, RollBack);
			if ( RollBack ) then		//	RollBack時TRUE
			begin
				RollBackFlag	:=	RollBack;
				result	:=	0;

				DmqTree.Close;
				DmqTree.Free;
				DmqData.Close;
				DmqData.Free;

				exit;
			end;

			iNCode			:=	SakiNCodeParent;
			iCode			:=	SakiGCodeParent;
			if iChangeOrder = -1 then
			begin
				iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, MOVE, RollBack);
				if ( RollBack ) then		//	RollBack時TRUE
				begin
					RollBackFlag	:=	RollBack;
					result	:=	0;

					DmqTree.Close;
					DmqTree.Free;
					DmqData.Close;
					DmqData.Free;

					exit;
				end;
			end;

			iHantei	:=	INSERT;			//	挿入
		end;
	end
	else	// 挿入元が勘定科目時
	begin
    	// HIS0001
		if (( SakiMasKbn = 1 ) or ( SakiMasKbn = 8 )) and ( SumKbn = 1 ) then	//	挿入先が合計時
		begin
			//	貼り付けの時で加算先ｺｰﾄﾞと加算元の親ｺｰﾄﾞが同一ｺｰﾄﾞがあるかCheck
			if ( AccessMethod = ACCESS_PASTE ) then
				bFlag	:=	PasteCheck(SakiNCode,MotoNCode);

			if (bFlag) then		//	貼り付け先に同一コードが存在した時
			begin
				//	同一コードが存在する為貼り付けをすることができません
				ComArea.m_MsgStd.GetMsg( MjsMsgRec,30,18);
    			MjsMessageBoxEx(AOwner, // <005>
                                '同一コードが存在する為貼り付けを' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
			end;

			iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, ENDMOVE, RollBack);
			if ( RollBack ) then		//	RollBack時TRUE
			begin
				RollBackFlag	:=	RollBack;
				result	:=	0;

				DmqTree.Close;
				DmqTree.Free;
				DmqData.Close;
				DmqData.Free;

				exit;
			end;

			iNCode			:=	SakiNCode;
			iCode			:=	SakiGCode;
			if iChangeOrder = -1 then
			begin
				iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, ENDMOVE, RollBack);
				if ( RollBack ) then		//	RollBack時TRUE
				begin
					RollBackFlag	:=	RollBack;
					result	:=	0;

					DmqTree.Close;
					DmqTree.Free;
					DmqData.Close;
					DmqData.Free;

					exit;
				end;
			end;

			iHantei	:=	ADD;
		end
		else	//	挿入先が実在時
       	begin
			//	貼り付けの時で加算先ｺｰﾄﾞと加算元の親ｺｰﾄﾞが同一ｺｰﾄﾞがあるかCheck
			if ( AccessMethod = ACCESS_PASTE ) then
				bFlag	:=	PasteCheck(SakiNCodeParent,MotoNCode);

			if ( bFlag ) then		//	貼り付け先に同一コードが存在した時
			begin
				//	同一コードが存在する為貼り付けをすることができません
				ComArea.m_MsgStd.GetMsg( MjsMsgRec,30,18);
    			MjsMessageBoxEx(AOwner, // <005>
                                '同一コードが存在する為貼り付けを' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
			end;

			iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, MOVE, RollBack);
			if ( RollBack ) then		//	RollBack時TRUE
			begin
				RollBackFlag	:=	RollBack;
				result	:=	0;

				DmqTree.Close;
				DmqTree.Free;
				DmqData.Close;
				DmqData.Free;

				exit;
			end;

			iNCode			:=	SakiNCodeParent;
			iCode			:=	SakiGCodeParent;
			if iChangeOrder = -1 then
			begin
				iChangeOrder	:=	GetTreeEntryNo(DmqTree, SakiNCode, SakiNCodeParent, MOVE, RollBack);
				if ( RollBack ) then		//	RollBack時TRUE
				begin
					RollBackFlag	:=	RollBack;
					result	:=	0;

					DmqTree.Close;
					DmqTree.Free;
					DmqData.Close;
					DmqData.Free;

					exit;
				end;
			end;

			iHantei	:=	INSERT;			//	追加
		end;
	end;

	if ( MotoMasKbn = 2 ) then		//	細目の移動先に同一ｺｰﾄﾞが存在するかﾁｪｯｸ
	begin
		with DmqTree do
		begin
			Close ();
            SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('   GCode                   ');
			SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('WHERE GCode     = :Code    '); //	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :SaiCode ');	//	細目ｺｰﾄﾞ
            SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.Add('  AND MasterKbn = 2        ');	//	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)

			ParamByName ('Code')    .AsInteger	:=	iCode;		//	外部ｺｰﾄﾞ
			ParamByName ('SaiCode') .AsInteger	:=	MotoGCode;	//	細目ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqTree);
				DmqTree.Close;
				DmqTree.Free;

				DmqData.Close;
				DmqData.Free;

				result	:=	0;
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				result	:=	99;		//	同一ｺｰﾄﾞがあった時移動させない。

				DmqTree.Close;
				DmqTree.Free;
				DmqData.Close;
				DmqData.Free;

				Exit;
			end;

            // 科目別補助内部ｺｰﾄﾞの取得
            Close();
            SQL.Clear;
            SQL.Add('SELECT CNCODE FROM KMKMA       ');
            SQL.Add('WHERE RDelKbn   = 0            ');
            SQL.Add('  AND MasterKbn = 2            ');
            SQL.Add('  AND SubCode   = :ExSubCode   ');

            ParamByName('ExSubCode').AsString    :=	MotoSubCode;	//	細目ｺｰﾄﾞ

            //	ｴﾗｰの判定
            if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqTree);
				DmqTree.Close;
				DmqTree.Free;

				DmqData.Close;
				DmqData.Free;

				Result	:=	0;
				Exit;
			end;

            if ( EOF = FALSE ) then
            begin
                iCNCode :=  GetFld('CNCODE').AsFloat;
            end;
        end;
		DmqTree.Close;
	end;

	if  ( AccessMethod = ACCESS_DRAGANDDROP ) then
	begin
		with DmqTree do
		begin
			Close ();
            SQL.Clear;
			SQL.Add('DELETE FROM KmkTree            '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn  = :MasKbn     '); //	ﾏｽﾀ区分
			SQL.Add('  AND SumNCode   = :SakiNCode  ');	//	加算内外部ｺｰﾄﾞ
			SQL.Add('  AND BasedNCode = :MotoNCode  ');	//	加算内外部ｺｰﾄﾞ
            // HIS0001
{	工事関係はよべなくする	HIS0015
			if MComboBox.ItemIndex = 4 then
				ParamByName ('MasKbn'	).AsInteger	:=	8	//	ﾏｽﾀ区分(8:工事合計)
			else
}
			ParamByName ('MasKbn')      .AsInteger	:=	1;	                    //	ﾏｽﾀ区分(1:勘定科目)

			ParamByName ('SakiNCode')   .AsFloat 	:=	MotoNCodeParent;	    //	加算先内部ｺｰﾄﾞ
			ParamByName ('MotoNCode')   .AsFloat	:=	MotoNCode;			    //	加算元内部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqTree);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				DmqTree.Close;
				DmqTree.Free;

				DmqData.Close;
				DmqData.Free;

				RollBackFlag	:=	TRUE;				//	RollBack時
				result	:=	0;
				Exit;
			end;
			//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
{	工事関係は呼べなくする	HIS0015
			if MComboBox.ItemIndex = 4 then
				TableHistory.KmkTree_Kou	:=	8
			else
}
 			TableHistory.KmkTree_KanDel	:=	TABLE_DELETE;

			if ( MotoMasKbn = 2 ) then
			begin
				//	勘定科目基本ﾏｽﾀ
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
				if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
				begin
					DmqData.Close;
        									// 親会社DBとMQueryの接続
					MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);
				end;
// <063> ADD end

				Close ();
				SQL.Clear;
				SQL.Add('UPDATE KmkMA SET               '); //	勘定科目基本ﾏｽﾀ
                SQL.Add('    NCode = :NCode             '); //  内部ｺｰﾄﾞ
				SQL.Add('   ,GCode = :Code              ');	//	外部ｺｰﾄﾞ
				SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
                SQL.Add('WHERE RDelKbn   = 0            ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.ADD('  AND SubCode   = :MotoGCode   ');	//	細目ｺｰﾄﾞ
				SQL.Add('  AND MasterKbn = 2            ');	//	ﾏｽﾀ区分(2:細目科目)

				ParamByName('Code')     .AsInteger	:=	iCode;		//	外部ｺｰﾄﾞ
                ParamByName('NCode')    .AsFloat    :=  iNCode;     //  内部ｺｰﾄﾞ
				ParamByName('MotoGCode').AsInteger	:=	MotoGCode;	//	細目ｺｰﾄﾞ
                ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqTree);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqTree.Close;
					DmqTree.Free;

					DmqData.Close;
					DmqData.Free;

					RollBackFlag	:=	TRUE;				//	RollBack時
					result	:=	0;
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
				TableHistory.KmkMA_Sai	:=	TABLE_IN_UPDATE;

				//	勘定科目詳細情報
				Close ();
				SQL.Clear;
				SQL.Add('UPDATE KmkMB SET               '); //	勘定科目詳細情報
                SQL.Add('    NCode = :NCode             '); //  内部ｺｰﾄﾞ
                SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode '); //  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add('WHERE MasterKbn = 2            '); //	ﾏｽﾀ区分(2:細目科目)
                SQL.Add('  AND CNCode  = :MotoNCode     '); //  細目内部ｺｰﾄﾞ

                ParamByName('NCode')    .AsFloat    :=  iNCode;     // 内部ｺｰﾄﾞ
                ParamByName('MotoNCode').AsFloat    :=  iCNCode;    // 細目内部ｺｰﾄﾞ
                ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqTree);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqTree.Close;
					DmqTree.Free;

					DmqData.Close;
					DmqData.Free;

					RollBackFlag	:=	TRUE;				//	RollBack時
					result	:=	0;
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
				TableHistory.KmkMB_Sai	:=	TABLE_IN_UPDATE;
			end;
		end;
		DmqTree.Close;
	end;

	if ( MotoMasKbn <> 2 ) and ( bFlag = FALSE )then
	begin
		with DmqTree do
		begin
			Close ();
			SQL.Clear;
			SQL.Add('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
            SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
			SQL.Add('       ,EntNo              ');	//	登録No
			SQL.Add('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('       ,AddKbn             ');	//	加算区分
			SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分			HIS0001
			SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') Values (                 ');
			SQL.Add('        :MasKbn            ');	//	ﾏｽﾀ区分
			SQL.Add('       ,:SumCode           ');	//	加算先内部ｺｰﾄﾞ
			SQL.Add('       ,:EntryNo           ');	//	登録No
			SQL.Add('       ,:BasedCode         ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('       ,:Add               ');	//	加算区分
			SQL.Add('       ,:Type              ');	//	ﾏｽﾀ区分
			SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                          ');

            // 工事合計科目 HIS0001
{	工事関係は呼べなくする	HIS0015
			if (MComboBox.ItemIndex = 4) then
				ParamByName('MasKbn').AsInteger	:=	8
			else
}
			ParamByName('MasKbn')   .AsInteger	:=	1;
			ParamByName('SumCode')  .AsFloat 	:=	iNCode;
			ParamByName('EntryNo')  .AsInteger	:=	iChangeOrder;
			ParamByName('BasedCode').AsFloat	:=	MotoNCode;
			ParamByName('Add')      .AsInteger	:=	AddKbn;
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

            // 工事合計科目 HIS0001
{	工事関係を呼べなくする	HIS0015
			if (MComboBox.ItemIndex = 4) then
            begin
            	// 実在
	            if MotoSumKbn = 0 then
					ParamByName ('Type').AsInteger	:=	1
				// 合計
				else
					ParamByName ('Type').AsInteger	:=	8;
			end
			else
}
			ParamByName ('Type')    .AsInteger	:=	1;

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqTree);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				DmqTree.Close;
				DmqTree.Free;

				DmqData.Close;
				DmqData.Free;

				RollBackFlag	:=	TRUE;				//	RollBack時
				result	:=	0;
				Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
{	工事関係を呼べなくする	HIS0015
			if (MComboBox.ItemIndex = 4) then
				TableHistory.KmkTree_Kou	:=	8
			else
}
 			TableHistory.KmkTree_Kan	:=	TABLE_IN_UPDATE;
		end;
	end;

	DmqTree.Close;
	DmqTree.Free;
	DmqData.Free;

	if ( bFlag ) then		//	同一ｺｰﾄﾞがある場所にｺﾋﾟｰしようとした時
		iHantei	:=	99;

	result	:=	iHantei;

end;

//**********************************************************************
//*		Proccess	:	KmkTreeの登録NO取得処理
//*		Name		:	H.Endo
//*		Date		:	2000/08/22
//*		Parameter	:	DmqKmkTree		:	構築・接続済みのQuery
//*						SakiGCode		:	挿入(加算)先外部ｺｰﾄﾞ
//*						SakiGCodeParent	:	挿入(加算)先外部ｺｰﾄﾞ(親)
//*						GetNoKbn		:	間に挿入か最後に挿入かの判断
//*												(1:MOVE 間挿入、2:ENDMOVE最後挿入)
//*						RollBack		:	RollBack時TRUE
//*		Return		:	最終登録№
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.GetTreeEntryNo(DmqKmkTree: TMQuery; SakiNCode: Extended;
							SakiNCodeParent: Extended; GetNoKbn: Integer; var RollBack: Boolean): Integer;
var
	iEntryNo	:	Integer;
	iEntryNoCur	:	Integer;
	iEntryNoPre	:	Integer;
begin

	with DmqKmkTree do
	begin
		Close();
		SQL.Clear;

		if ( GetNoKbn = 2 ) then
		begin
			SQL.Add('SELECT                         ');
			SQL.Add('    count(EntNo)               ');	//	登録Noの件数
			SQL.Add('   ,MAX(EntNo)                 ');	//	登録Noの最大値
			SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = :MasKbn      '); //	ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :SakiCode    ');	//	加算先内部ｺｰﾄﾞ

{	工事関係を呼べなくする	HIS0015
            if MComboBox.ItemIndex = 4 then
		        ParamByName ('MasKbn'	).AsInteger	:=	8
			else
}
	        ParamByName ('MasKbn'	).AsInteger	:=	1;
			ParamByName ('SakiCode'	).AsFloat 	:=	SakiNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqKmkTree);
				DmqKmkTree.Close;
				DmqKmkTree.Free;
				result	:=	0;
				Exit;
			end;

			if ( (GetFld('count(KmkTree.EntNo)').AsInteger) <> 0 ) then
				iEntryNo	:=	((GetFld('MAX(KmkTree.EntNo)').AsInteger) div 100 * 100) + 100
			else
				iEntryNo	:=	100;
		end
		else
		begin
			SQL.Add('SELECT                         ');
			SQL.Add('    EntNo                      ');	//	登録No
			SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn  = :MasKbn     '); //	ﾏｽﾀ区分
			SQL.Add('  AND SumNCode   = :SakiCode   ');	//	加算先内部ｺｰﾄﾞ
			SQL.Add('  AND BasedNCode = :MotoCode   ');	//	加算元内部ｺｰﾄﾞ

	        ParamByName ('MasKbn'	).AsInteger	:=	1;
			ParamByName ('SakiCode'	).AsFloat	:=	SakiNCodeParent;
			ParamByName ('MotoCode'	).AsFloat	:=	SakiNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqKmkTree);
				DmqKmkTree.Close;
				DmqKmkTree.Free;
				result	:=	0;
				Exit;
			end;

			iEntryNoCur	:=	GetFld('EntNo').AsInteger;

			Close ();

			SQL.Clear;
			SQL.Add('SELECT                         ');
			SQL.Add('    EntNo                      ');	//	登録No
			SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = :MasKbn      '); //	ﾏｽﾀ区分
			SQL.Add('  AND SumNCode  = :SakiCode    ');	//	加算先内部ｺｰﾄﾞ
			SQL.Add('  AND EntNo     < :EntryNo     ');	//	登録No
			SQL.Add('ORDER BY EntNo DESC            ');

    	    ParamByName ('MasKbn'	).AsInteger	:=	1;
			ParamByName ('SakiCode'	).AsFloat 	:=	SakiNCodeParent;
			ParamByName ('EntryNo'	).AsInteger	:=	iEntryNoCur;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqKmkTree);
				DmqKmkTree.Close;
				DmqKmkTree.Free;
				result	:=	0;
				Exit;
			end;

			if  ( not EOF ) then
				iEntryNoPre := GetFld('EntNo').AsInteger
			else
				iEntryNoPre := 0;

		    iEntryNo    := iEntryNoPre + (iEntryNoCur - iEntryNoPre) div 2;

		    if  (( iEntryNo <= iEntryNoPre ) or ( iEntryNo >= iEntryNoCur )) then
		    begin
				RollBack	:=	AgainEntNoSet (SakiNCodeParent);	//	RollBack時TRUE
		        iEntryNo    := -1;
		    end;
		end;

	    result  := iEntryNo;
	end;

end;

//**********************************************************************
//*		Proccess	:	登録ＮＯ再付番
//*		Name		:	H.Endo
//*		Date		:	2000/08/22
//*		Parameter	:	ParentCode		:	再付番する親の外部ｺｰﾄﾞ
//*		Return		:	RollBack時TRUE
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function  TJNTCRP009001f.AgainEntNoSet(ParentNCode: Extended):Boolean;
var
	DmqTreeSelect	:	TMQuery;
	DmqTreeUpdate	:	TMQuery;
	iCount			:	Integer;
begin
	iCount	:=	1;

	DmqTreeSelect := TMQuery.Create( Self );					    //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTreeSelect );	//	DBとMQueryの接続

	DmqTreeUpdate := TMQuery.Create( Self );					    //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTreeUpdate );	//	DBとMQueryの接続

	with DmqTreeSelect do
	begin
		Close ();
		SQL.Clear;
		SQL.Add('SELECT                         ');
        SQL.Add('    MasterKbn                  ');	//	ﾏｽﾀ区分
		SQL.Add('   ,SumNCode                   ');	//	加算先内部ｺｰﾄﾞ
		SQL.Add('   ,BasedNCode                 ');	//	加算元内部ｺｰﾄﾞ
		SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = :MasterKbn   '); //	ﾏｽﾀ区分
		SQL.Add('  AND SumNCode  = :SakiNCode   ');	//	加算先内部ｺｰﾄﾞ
		SQL.Add('ORDER BY EntNo                 ');

		ParamByName('MasterKbn').AsInteger	:=	1;
		ParamByName('SakiNCode').AsFloat	:=	ParentNCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTreeSelect);
			DmqTreeSelect.Close;
			DmqTreeSelect.Free;

			DmqTreeUpdate.Close;
			DmqTreeUpdate.Free;

			Result	:=	TRUE;
			Exit;
		end;

		while ( not EOF ) do
		begin
			with DmqTreeUpdate do
			begin
				Close ();
				SQL.Clear;
				SQL.Add('UPDATE KmkTree SET             '); //	科目加算体系ﾏｽﾀ
				SQL.Add('    EntNo = :EntryNo           ');	//	登録No
				SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
				SQL.Add('WHERE MasterKbn  = :MasterKbn  '); //	ﾏｽﾀ区分
				SQL.Add('  AND SumNCode   = :SakiGCode  ');	//	加算先内部ｺｰﾄﾞ
				SQL.Add('  AND BasedNCode = :MotoGCode  ');	//	加算元内部ｺｰﾄﾞ

				ParamByName('MasterKbn').AsInteger	:=	DmqTreeSelect.GetFLD('MasterKbn').AsInteger;
				ParamByName('SakiGCode').AsFloat	:=	DmqTreeSelect.GetFLD('SumNCode'  ).AsFloat;
				ParamByName('MotoGCode').AsFloat	:=	DmqTreeSelect.GetFLD('BasedNCode').AsFloat;
				ParamByName('EntryNo').AsInteger	:=	iCount * -100;
                ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqTreeUpdate);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqTreeUpdate.Close;
					DmqTreeUpdate.Free;

					DmqTreeSelect.Close;
					DmqTreeSelect.Free;

					Result	:=	TRUE;
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
				if ( DmqTreeSelect.GetFLD('MasterKbn').AsInteger = 1 ) then
					TableHistory.KmkTree_Kan	:=	TABLE_IN_UPDATE
				else
					TableHistory.KmkTree_Kou	:=	8;
			end;
			iCount	:=	iCount + 1;
			NEXT;
		end;
	end;
	DmqTreeSelect.Close;
	DmqTreeSelect.Free;

	with DmqTreeUpdate do
	begin
		Close ();
		SQL.Clear;
		SQL.Add('UPDATE KmkTree SET             '); //	科目加算体系ﾏｽﾀ
		SQL.Add('    EntNo = EntNo * -1         ');
		SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode '); //  更新担当者内部ｺｰﾄﾞ<080>
		SQL.Add('WHERE MasterKbn = :MasKbn      '); //	ﾏｽﾀ区分
		SQL.Add('  AND SumNCode  = :SakiNCode   '); //	加算先内部ｺｰﾄﾞ
		SQL.Add('  AND EntNo     < 0            ');	//	登録NOが0より小さい時	//HIS0086

		ParamByName ('MasKbn'	).AsInteger	:=	1;
		ParamByName ('SakiNCode').AsFloat	:=	ParentNCode;
        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqTreeUpdate);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqTreeUpdate.Close;
			DmqTreeUpdate.Free;
			Result	:=	TRUE;
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
		TableHistory.KmkTree_Kan	:=	TABLE_IN_UPDATE;
	end;

	DmqTreeUpdate.Close;
	DmqTreeUpdate.Free;

	Result	:=	FALSE;

end;

//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							オブジェクトをドラッグしたとき
//*		Event			:	OnDragOver
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.TreeViewDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
var
	rTaikei 		:	^TaikeiRec;
	DragTaikei 		:	^TaikeiRec;
	cDragNode		:	TTreeNode;
	cDropNode		:	TTreeNode;
	DropNode,
	TopNode,
	LastNode,
	TopNode2,
	LastNode2,
	ScrollNode		:	TTreeNode;
	VisibleCnt		:	Integer;
    iLoop 			:	integer;
	NodeID			: 	HTreeItem;
begin
    DragTaikei := Nil;

	if (Screen.ActiveControl.Name = TreeView.Name) then		//	TreeViewの時
	begin
		cDragNode 	:=	TreeView.Selected;
		DragTaikei	:=	cDragNode.Data;

	//--- HIS0096 START -----
	// HIS0088 でこの処理をｺﾒﾝﾄとしたが、固定区分1、2は移動可能なのでこの処理を
	// 復活させ、固定区分3の時移動不可とする
		if (DragTaikei.KoteiKbn = 3) then	//	固定区分が3の時
		begin
			Accept  := FALSE;
			exit;
		end;
	//--- HIS0096  END  -----

	//--- HIS0097 START -----
		// 損益科目時かつ直下の科目の時移動不可とする
		if (MComboBox.ItemIndex = 2) and (DragTaikei.DefKbn = 1) then
		begin
			Accept  := FALSE;
			exit;
		end;
	//--- HIS0097  END  -----
//HIS0033
		case giReferFlag of
			//	勘定科目(参照)/科目別補助(通常),勘定科目(参照)/科目別補助(基本)
			KAN_RE_HO_NO,KAN_RE_HO_BA:
			begin
				if (DragTaikei.MasKbn = 1) then	//	勘定科目
				begin
					Accept := FALSE;
					exit;
				end;
			end;
			//	勘定科目(通常)/科目別補助(参照),勘定科目(基本)/科目別補助(参照)
			KAN_NO_HO_RE,KAN_BA_HO_RE:
			begin
				if (DragTaikei.MasKbn = 2) then	//	科目別補助
				begin
					Accept := FALSE;
					exit;
				end;
			end;
		end;
//*******
	end;

    // HIS0001
    if Screen.ActiveControl.name = 'DZitsuGrid' then
    begin
    	Accept := TRUE;
        exit;
	end;

	cDropNode	:=	(TreeView.GetNodeAt (X, Y));	//	Drop先のNode取得

	if  (cDropNode = nil) then			//	Nil時
	begin
		Accept  := FALSE;
		exit;
	end;

	rTaikei	:=	cDropNode.Data;			//	Drop先のData取得

{	工事関係を呼べなくする	HIS0015
	if (MComboBox.ItemIndex = 4) then	//	工事表示時実在の下に実在を付けないため
	begin
		if (rTaikei.MasKbn = 1) and (rTaikei.Kbn = 0) then
		begin
			Accept  := FALSE;
			exit;
		end;
    end;
}
//hiro0627
	//Drop先が実在の時で親がNilの時(実在のはぐれ)はDropできない
	if (rTaikei.MasKbn = 1) and (rTaikei.Kbn = 0) and (cDropNode.Parent = nil) then
	begin
		Accept  := FALSE;
		exit;
	end;
//****
	if (rTaikei.GCode = 0) then			//	損益
	begin
		Accept  := FALSE;
		exit;
	end;

//	if (rTaikei.KoteiKbn = 2) then		//	固定区分が2の時
	if rTaikei.KoteiKbn in [2,3] then
	begin
		Accept  := FALSE;
		exit;
	end;

	//	合計･実在時は細目への移動不可
	if (DragTaikei.MasKbn = 1) then		//	ﾏｽﾀ区分(1:勘定科目)
	begin
		if (rTaikei.MasKbn = 2) then	//	ﾏｽﾀ区分(2:細目科目)
		begin
			Accept  := FALSE;
			exit;
		end;
	end;

	//	細目時は合計への移動不可
	if (DragTaikei.MasKbn = 2) then		//	ﾏｽﾀ区分(2:細目科目)
	begin
		if (rTaikei.MasKbn = 1) and (rTaikei.Kbn = 1) then	//	合計時
		begin
			Accept  := FALSE;
			exit;
		end;
	end;

	//	細目移動不可
	if (DragTaikei.MasKbn = 2) then		//	細目ｺｰﾄﾞの時
	begin
		Accept  := FALSE;
	end;

	if (Screen.ActiveControl.Name = DZitsuGrid.Name) then	//	実在Gridの時
	begin
		if (rTaikei.MasKbn = 1) and (rTaikei.Kbn = 0) then		//	固定区分が2の時
			Accept  := FALSE;
	end;

    if  (DragTaikei.Kbn = 1) then	//	選択したNodeが合計の時
    begin
		if  (not fnCheckMasterTreeInsertValid (DragTaikei.GCode,rTaikei.GCode)) then
		begin
			Accept	:= FALSE;
			Exit;
		end;
	end;

	//	初期処理
	ScrollNode	:=	nil;
	LastNode2	:=	nil;
	cDragNode	:=	nil;
	// ドロップしようとしているNode
	DropNode  := TreeView.GetNodeAt(X, Y);
	// 一番上のNode
	TopNode    := TreeView.TopItem;
	// 一番上から２こめ
    TopNode2 := TreeView.items.GetNode( TreeView_GetNextVisible(TreeView.Handle, TopNode.ItemId) );

	// 表示されているNode数
	VisibleCnt := TreeView_GetVisibleCount(TreeView.Handle);
    LastNode := TopNode;
	for iLoop := 1 to VisibleCnt do
    begin
	    NodeID := TreeView_GetNextVisible(TreeView.Handle, LastNode.ItemId);
		if NodeID = nil then
			break;

        if iLoop <= VisibleCnt -1 then
			LastNode2 	:= TreeView.items.GetNode( NodeID );

		LastNode	:= TreeView.items.GetNode( NodeID );
	end;

    if ( DropNode = TopNode ) or ( DropNode = TopNode2 ) then
    begin
		TreeView.TopItem := TreeView.items.GetNode(TreeView_GetPrevVisible(TreeView.Handle,TopNode.ItemId));
		TreeView.Invalidate;
        exit;
	end
    else if ( DropNode = LastNode ) or ( DropNode = LastNode2 ) then
    begin
	    NodeID := TreeView_GetNextVisible( TreeView.Handle, TreeView.TopItem.ItemId );
		ScrollNode := TreeView.items.GetNode( NodeID );
        if ScrollNode <> nil then
        begin
			TreeView.TopItem := ScrollNode;
			TreeView.Invalidate;
        end;
        exit;
    end;
end;

//************************************************************************
//*		Component		:	PopupMenu(TPopupMenu)
//*							ﾎﾟｯﾌﾟｱｯﾌﾟを表示した時のNodeを取得
//*		Event			:	OnPopup
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.PopupMenuPopup(Sender: TObject);
var
	cNode		:	TTreeNode;
	cNodeOYA	:	TTreeNode;
	wkNode		:	TTreeNode;
	wkNodeOYA	:	TTreeNode;
	iLoop		:	Integer;
	wkRec		:	^TaikeiRec;
	wkTaikeiOya	:	^TaikeiRec;
	iFusenInfo	:	Integer;
	iHantei		:	Integer;
	bAddFlag	:	Boolean;
	sCmnt		:	String;
	bHantei     :   Boolean;

label
	GotoFusen;

begin

	iHantei	 :=	0;
	bAddFlag := FALSE;

	cNode			:=	TreeView.Selected;
	PasteNode		:=	TreeView.Selected;	//	貼り付け時に使用
	KaGenNode		:=	TreeView.Selected;	//	加算減算時に使用
	m_FusenNode		:=	TreeView.Selected;	//	付箋時に使用
	grTaikei		:=	cNode.Data;
	gbEnabledCheck	:=	FALSE;

	//	Gird再表示に使用
	gDelGrid		:=	cNode.Data;

    TM_F_Revise .Enabled	:=  m_cJNTArea.IsFusen;	    //	備考修正
    TM_F_Delete .Enabled	:=  m_cJNTArea.IsFusen;	    //	はがす非表示
	TM_F_Aka	.Enabled	:=	m_cJNTArea.IsFusen;	    //	赤
	TM_F_Mido	.Enabled	:=	m_cJNTArea.IsFusen;	    //	緑
	TM_F_Ao		.Enabled	:=	m_cJNTArea.IsFusen;	    //	青
	TM_F_Ore	.Enabled	:=	m_cJNTArea.IsFusen;	    //	橙

// <SYNC> MOD start
//	MI_Delete	.Enabled	:=	m_cJNTArea.IsDelete;    //	削除
	MI_Delete	.Enabled	:=	IsDeleteEx();   		//	削除
// <SYNC> MOD end


	MI_Kasan	.Enabled	:=	FALSE;	                //　加算
	MI_Gensan	.Enabled	:=	FALSE;	                //　減算
	MI_Syousai	.Enabled	:=	TRUE;	                //	詳細
	MI_Copy		.Enabled	:=	FALSE;	                //	コピー
// <SYNC> MOD start
//	MI_Paste	.Enabled	:=	m_IsUpdate;	            //	貼り付け
//	MI_TaikeiDel.Enabled	:=	m_IsUpdate;             //	体系削除
	MI_Paste	.Enabled	:=	IsUpdateEx();	        //	貼り付け
	MI_TaikeiDel.Enabled	:=	IsUpdateEx();           //	体系削除
// <SYNC> MOD end


	if ( grTaikei.GCode  <> 0 ) or
       ( grTaikei.MasKbn <> 1 ) then
	begin
		cNodeOYA	:=	cNode.Parent;
		m_PNode		:=	cNode.Parent;	//	削除時に使用
		m_SetNode	:=	cNode.Parent;	//	削除後のFoucsをあてるために使用

		if (cNodeOYA = nil) then	//	第１ﾚﾍﾞﾙの親の時
		begin

			if ( grTaikei.MasKbn = 1 ) and
               ( grTaikei.Kbn    = 0 ) then
				MI_Paste.Enabled	:=	FALSE	//	貼り付け
			else
			begin
                if m_IsUpdate then
                begin
    				if ( m_CopyFlag = TRUE ) then	//	ｺﾋﾟｰしたもがない状態で貼り付けすることはできない為
// <SYNC> MOD start
//	    				MI_Paste.Enabled :=	TRUE	//	貼り付け
													//	貼り付け
	    				MI_Paste.Enabled :=	IsUpdateEx()
// <SYNC> MOD end
		    		else
			    		MI_Paste.Enabled :=	FALSE;	//	貼り付け
                end;
			end;

			MI_TaikeiDel.Enabled	:=	FALSE;	//	体系削除

			if ( grTaikei.NotAdd   = 0 ) and
               ( grTaikei.KoteiKbn = 0 ) then	//	はぐれ時かつ固定ではない時
			begin
// <SYNC> MOD start
//				MI_Delete.Enabled	:=	m_cJNTArea.IsDelete;     //	削除 <008>
				MI_Delete.Enabled	:=	IsDeleteEx();
// <SYNC> MOD end
				MI_Copy.Enabled 	:=  IsUpdateEx();			// ｺﾋﾟｰ <063> ADD はぐれも他の加算先にｺﾋﾟｰ可能にする
				grOya_Taikei        :=  nil;
			end
			else
				MI_Delete.Enabled	:=	FALSE;  //	削除

            TM_F_Delete.Visible	:= FALSE;			//	はがす非表示
			TM_F_Delete.Bitmap	:= Nil;				//	付箋Bitmap非表示
			TM_F_Revise.Visible := FALSE;			//	備考修正非表示
			TM_F_Revise.Tag		:= 0;
            TM_F_Aka   .Visible	:= TRUE;			//	付箋赤を表示
			TM_F_Mido  .Visible	:= TRUE;			//	付箋青を表示
			TM_F_Ao    .Visible	:= TRUE;			//	付箋緑を表示
			TM_F_Ore   .Visible	:= TRUE;			//	付箋橙を表示

			TM_F_Aka   .Enabled	:=	FALSE;	//	赤
			TM_F_Mido  .Enabled	:=	FALSE;	//	緑
			TM_F_Ao	   .Enabled	:=	FALSE;	//	青
			TM_F_Ore   .Enabled	:=	FALSE;	//	橙


// <SYNC> MOD start
//			gbEnabledCheck	        :=	(not m_cJNTArea.IsDelete);   //<008>
			gbEnabledCheck	        :=	(not IsDeleteEx());
// <SYNC> MOD end

            cNode.Selected          :=  TRUE;
			Exit;
		end;

   		grOya_Taikei	:=	cNodeOYA.Data;

        //	損益科目の時
		if ( MComboBox.ItemIndex = 2 ) then
		begin
			//	加算減算で損益の固定科目の時は使用不可
			for iLoop := 0 to 15 do
			begin
				//	選択されている科目が特定科目と一致した時
				if ( SonekiArrayL1[iLoop].ConstNCode = grTaikei.GCode ) then
				begin
					bAddFlag := TRUE;
					Break;
				end
			end;
		end;

		if ( bAddFlag = FALSE ) then
		begin
// <SYNC> MOD start
//			MI_Kasan .Enabled := m_IsUpdate;	        //　加算
//			MI_Gensan.Enabled := m_IsUpdate;	        //　減算
			MI_Kasan .Enabled := IsUpdateEx();	        //　加算
			MI_Gensan.Enabled := IsUpdateEx();	        //　減算
// <SYNC> MOD end
        end
		else
		begin
			MI_Kasan .Enabled := FALSE;	//　加算
			MI_Gensan.Enabled := FALSE;	//　減算
		end;

// <SYNC> MOD start
//      MI_Syousai.Enabled	    :=	m_IsUpdate;	//	詳細
//		MI_Copy	  .Enabled		:=	m_IsUpdate;	//	コピー

// <072>  MOD start
//        MI_Syousai.Enabled	    :=	IsUpdateEx();		//	詳細
		MI_Syousai.Enabled	    :=	True;		//	詳細
// <072> MOD end

		MI_Copy	  .Enabled		:=	IsUpdateEx();		//	コピー
// <SYNC> MOD end

		if ( m_CopyFlag = TRUE ) then	//	ｺﾋﾟｰしたもがない状態で貼り付けすることはできない為
		begin
		    if  ( grCopyPaste.Kbn = 1 ) then	//	ｺﾋﾟｰ元が合計の時
    		begin
        		if  ( not fnCheckMasterTreeInsertValid (grCopyPaste.GCode,grTaikei.GCode) ) then
            		MI_Paste.Enabled :=	FALSE
				else
// <SYNC> MOD start
//					MI_Paste.Enabled :=	m_IsUpdate;	//	貼り付け
					MI_Paste.Enabled :=	IsUpdateEx();	//	貼り付け
// <SYNC> MOD end
		    end
			else
// <SYNC> MOD start
//				MI_Paste.Enabled :=	m_IsUpdate;		//	貼り付け
				MI_Paste.Enabled :=	IsUpdateEx();	//	貼り付け
// <SYNC> MOD end
		end
		else
			MI_Paste.Enabled :=	FALSE;	//	貼り付け

// <SYNC> MOD start
//		MI_TaikeiDel.Enabled		:=	m_IsUpdate;         	//	体系削除
//		MI_Delete	.Enabled		:=	m_cJNTArea.IsDelete;	//	削除
		MI_TaikeiDel.Enabled		:=	IsUpdateEx();         	//	体系削除
		MI_Delete	.Enabled		:=	IsDeleteEx();			//	削除
// <SYNC> MOD end
		TM_F_Aka	.Enabled		:=	m_cJNTArea.IsFusen;	    //	赤
		TM_F_Mido	.Enabled		:=	m_cJNTArea.IsFusen;	    //	緑
		TM_F_Ao		.Enabled		:=	m_cJNTArea.IsFusen;	    //	青
		TM_F_Ore	.Enabled		:=	m_cJNTArea.IsFusen;	    //	橙
	end
    else	//	損益科目時
	begin
		MI_Kasan	.Enabled	:=	FALSE;	//　加算
		MI_Gensan	.Enabled	:=	FALSE;	//　減算
		MI_Syousai	.Enabled	:=	FALSE;	//	詳細
		MI_Copy		.Enabled	:=	FALSE;	//	コピー
		MI_Paste	.Enabled	:=	FALSE;	//	貼り付け
		MI_TaikeiDel.Enabled	:=	FALSE;	//	体系削除
		MI_Delete	.Enabled	:=	FALSE;	//	削除
		TM_F_Aka	.Enabled	:=	FALSE;	//	赤
		TM_F_Mido	.Enabled	:=	FALSE;	//	緑
		TM_F_Ao		.Enabled	:=	FALSE;	//	青
		TM_F_Ore	.Enabled	:=	FALSE;	//	橙
		gbEnabledCheck	:=	TRUE;
		Exit;
	end;

	//	細目科目時
	if ( grTaikei.MasKbn = 2 ) then
	begin
		MI_Kasan.Enabled		:=	FALSE;	//　加算
		MI_Gensan.Enabled		:=	FALSE;	//　減算
		MI_Copy	.Enabled		:=	FALSE;	//	コピー
		MI_Paste.Enabled		:=	FALSE;	//	貼り付け
		MI_TaikeiDel.Enabled	:=	FALSE;	//	体系削除

        //	諸口時
        if ( grTaikei.Syokuchi = 1 ) then
		begin
			// 諸口以外に科目別補助が存在しない時
			if ( Syokuchi(grOya_Taikei.GCode,TRUE) = TRUE ) then
//				MI_Delete.Enabled := TRUE	                //	削除
// <SYNC> MOD start
//				MI_Delete.Enabled := m_cJNTArea.IsDelete	//	削除 <008>
				MI_Delete.Enabled := IsDeleteEx()	//	削除
// <SYNC> MOD end
			else
				MI_Delete.Enabled := FALSE;	//	削除
		end;
	end;

	//	細目時は体系削除は使用不可
	if ( grTaikei.MasKbn = 1 ) then
	begin
		//	ｺﾋﾟｰしたものがあれば体系削除を使用可にする。
		for iLoop := 0 to TreeView.Items.Count-1 do
		begin
			wkNode	:=	TreeView.Items[iLoop];
			wkRec	:=	wkNode.Data;
			if ( wkRec^.GCode = grTaikei.GCode ) then
			begin
				wkNodeOya	:=	wkNode.Parent;
				if ( wkNodeOya <> nil ) then
				begin
					wkTaikeiOya	:=	wkNodeOya.Data;
					if ( wkTaikeiOya.GCode = grOya_Taikei.GCode ) then
					begin
						gbTaikeiFlag	:=	FALSE;
						Break;
	                end
					else
					begin
						gbTaikeiFlag	:=	TRUE;
						Break;
					end;
				end;
			end;
		end;
	end;

	// 固定区分が0以外の時加算・削除・ｺﾋﾟｰ使用不可
	if ( grTaikei.KoteiKbn <> 0 ) then
	begin
		// 固定区分が3の時ｺﾋﾟｰ使用不可
		if ( grTaikei.KoteiKbn = 3 ) then
		// <102>MOD↓
		//	MI_Copy.Enabled	:= FALSE;	// ｺﾋﾟｰ
		begin
			MI_Copy.Enabled			:= FALSE;	// ｺﾋﾟｰ
			MI_TaikeiDel.Enabled	:= FALSE;	//	体系削除
		end;
		// <102>MOD↑

		// 固定区分が2･3の時は貼り付け使用不可
		if ( grTaikei.KoteiKbn in [2,3] ) then
			MI_Paste.Enabled := FALSE;	// 貼り付け

	//	MI_TaikeiDel.Enabled	:=	FALSE;	//	体系削除 <102>DEL

		MI_Delete	.Enabled	:=	FALSE;	//	削除
    end;

	// 損益科目時かつ直下の科目の時ｺﾋﾟｰ不可とする
	if ( MComboBox.ItemIndex = 2 ) and
       ( grTaikei.DefKbn     = 1 ) then
		MI_Copy.Enabled	:= FALSE;	// ｺﾋﾟｰ

	if ( grTaikei.MasKbn = 1 ) then
	    iFusenInfo	:=	FusenCheck(grTaikei.MasKbn,grTaikei.NCode,0,sCmnt)
	else
		iFusenInfo	:=	FusenCheck(grTaikei.MasKbn,grOya_Taikei.NCode,grTaikei.CNCode,sCmnt);

	//	付箋選択状況
	case iFusenInfo of
		0:	//	なし
		begin
			TM_F_Delete.Visible	:= FALSE;			//	はがす非表示
			TM_F_Delete.Bitmap	:= Nil;				//	付箋Bitmap非表示
			TM_F_Revise.Visible := FALSE;			//	備考修正非表示
			TM_F_Revise.Tag		:= 0;
			TM_F_Aka   .Visible	:= TRUE;			//	付箋赤を表示
			TM_F_Mido  .Visible	:= TRUE;			//	付箋青を表示
			TM_F_Ao    .Visible	:= TRUE;			//	付箋緑を表示
			TM_F_Ore   .Visible	:= TRUE;			//	付箋橙を表示
		end;
		1:	//	赤
		begin
			TM_F_Delete.Visible	:= TRUE;			//	はがす表示
			TM_F_Delete.Bitmap	:= TM_F_Aka.Bitmap;	//	付箋赤を表示
			TM_F_Revise.Visible := TRUE;			//	備考修正表示
			TM_F_Revise.Tag		:= 1;
			TM_F_Aka   .Visible	:= FALSE;			//	付箋赤を非表示
			TM_F_Mido  .Visible	:= TRUE;			//	付箋青を表示
			TM_F_Ao    .Visible	:= TRUE;			//	付箋緑を表示
			TM_F_Ore   .Visible	:= TRUE;			//	付箋橙を表示
		end;
		2:	//	緑
		begin
			TM_F_Delete.Visible	:= TRUE;			//	はがす表示
			TM_F_Delete.Bitmap	:= TM_F_Mido.Bitmap;//	付箋緑を表示
			TM_F_Revise.Visible := TRUE;			//	備考修正表示
			TM_F_Revise.Tag		:= 2;
			TM_F_Aka   .Visible	:= TRUE;			//	付箋赤を表示
			TM_F_Mido  .Visible	:= FALSE;			//	付箋青を非表示
			TM_F_Ao    .Visible	:= TRUE;			//	付箋緑を表示
			TM_F_Ore   .Visible	:= TRUE;			//	付箋橙を表示
		end;
		3:	//	青
		begin
			TM_F_Delete.Visible	:= TRUE;			//	はがす表示
			TM_F_Delete.Bitmap	:= TM_F_Ao.Bitmap;	//	付箋青を表示
			TM_F_Revise.Visible := TRUE;			//	備考修正表示
			TM_F_Revise.Tag		:= 3;
			TM_F_Aka   .Visible	:= TRUE;			//	付箋赤を表示
			TM_F_Mido  .Visible	:= TRUE;			//	付箋青を表示
			TM_F_Ao    .Visible	:= FALSE;			//	付箋緑を非表示
			TM_F_Ore   .Visible	:= TRUE;			//	付箋橙を表示
		end;
		4:	//	橙
		begin
			TM_F_Delete.Visible	:= TRUE;			//	はがす表示
			TM_F_Delete.Bitmap	:= TM_F_Ore.Bitmap;	//	付箋橙を表示
			TM_F_Revise.Visible := TRUE;			//	備考修正表示
			TM_F_Revise.Tag		:= 4;
			TM_F_Aka   .Visible	:= TRUE;			//	付箋赤を表示
			TM_F_Mido  .Visible	:= TRUE;			//	付箋青を表示
			TM_F_Ao    .Visible	:= TRUE;			//	付箋緑を表示
			TM_F_Ore   .Visible	:= FALSE;			//	付箋橙を非表示
		end;
	end;

    //	合計科目時細目のTagを使用不可
	if      ( grTaikei.MasKbn = 1 ) and
            ( grTaikei.Kbn    = 1 ) then     iHantei	:=	GOUKEI
    //	実在科目時合計のTagを使用不可
	else if ( grTaikei.MasKbn = 1 ) and
            ( grTaikei.Kbn    = 0 ) then     iHantei	:=	ZITSUZAI
    //	細目科目時合計・実在のTagを使用不可
	else if ( grTaikei.MasKbn = 2 ) and
            ( grTaikei.Kbn    = 0 ) then     iHantei	:=	SAIMOKU;

	cNode.Selected := TRUE;

	// Gridが表示されている時かつ固定区分が2･3の時
	if ( P_Grid.Visible = TRUE           ) and
       ( not(grTaikei.KoteiKbn in [2,3]) ) then
	begin
		case iHantei of
			GOUKEI:
			begin
				MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
				DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
				MTab_N.Items[0].Enabled	:=	TRUE;		//	実在のTab使用可
				DZitsuGrid.Enabled		:=	TRUE;		//	実在のGrid使用可
				MTab_N.Items[2].Enabled	:=	TRUE;		//	合計のTab使用可
				DGoukeiGrid.Enabled		:=	TRUE;		//	合計のGrid使用可
				giRightClick			:=	TRUE;		//	右ｸﾘｯｸ時TRUEにする
				MTab_N.Items.Selected	:=	2;			//	合計科目Gridへ
		    end;
			ZITSUZAI:
			begin
				MTab_N.Items[2].Enabled	:=	TRUE;		//	合計のTab使用可
				DGoukeiGrid.Enabled		:=	TRUE;		//	合計のGrid使用可
				//	選択されたｺｰﾄﾞが複合科目かﾁｪｯｸ
				if ( FukuKmkCheck(grTaikei.NCode) ) then
				begin
					MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
					DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
				end
				else
				begin
					//	選択されたｺｰﾄﾞが工事を採用されているかCheck
					if ( KoujiAdoptCheck(grTaikei.NCode) ) and
                       ( gMasInfoUseKbn.Koj <> 0         ) then
					begin
						MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
						DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
					end
					//	いくつ補助が採用されているかﾁｪｯｸ
					else if ( MAXADOPTCOUNT > AdoptCountCheck(grTaikei.NCode,DATABASE) ) then
					begin
						MTab_N.Items[1].Enabled	:=	TRUE;		//	細目のTab使用可
						DSaimokuGrid.Enabled	:=	TRUE;		//	細目のGrid使用可
					end
					else
					begin
						bHantei	:=	FALSE;
						MDataModule.BeginTran (dbCorp_Select);					//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
						if ( KbnCheck(grTaikei.NCode,bHantei,TRUE,OTHER) )then	//	RollBackが行われたらTRUEが返ってくる
							Exit;
						MDataModule.Commit (dbCorp_Select);						//	ｺﾐｯﾄ(反映)

						if ( bHantei ) then
						begin
							MTab_N.Items[1].Enabled	:=	TRUE;		//	細目のTab使用可
							DSaimokuGrid.Enabled	:=	TRUE;		//	細目のGrid使用可
						end
						else begin
							MTab_N.Items[1].Enabled	:=	FALSE;		//	細目のTab使用不可
							DSaimokuGrid.Enabled	:=	FALSE;		//	細目のGrid使用不可
						end;
					end;
				end;

				MTab_N.Items[0].Enabled	:=	TRUE;		//	実在のTab使用可
				DZitsuGrid.Enabled		:=	TRUE;		//	実在のGrid使用可
				giRightClick			:=	TRUE;		//	右ｸﾘｯｸ時TRUEにする
				MTab_N.Items.Selected	:=	0;			//	実在科目Gridへ
			end;
			SAIMOKU:
			begin
				MTab_N.Items[0].Enabled	:=	FALSE;		//	実在のTab使用不可
				DZitsuGrid.Enabled		:=	FALSE;		//	実在のGrid使用不可
				MTab_N.Items[2].Enabled	:=	FALSE;		//	合計のTab使用不可
				DGoukeiGrid.Enabled		:=	FALSE;		//	合計のGrid使用不可
				MTab_N.Items[1].Enabled	:=	TRUE;		//	細目のTab使用可
				DSaimokuGrid.Enabled	:=	TRUE;		//	細目のGrid使用可
				giRightClick			:=	TRUE;		//	右ｸﾘｯｸ時TRUEにする
				MTab_N.Items.Selected	:=	1;			//	細目科目Gridへ
			end;
		end;
    end;

end;

//**********************************************************************
//*		Proccess	:	再表示処理
//*		Name		:	H.Endo
//*		Date		:	2000/08/23
//*		Parameter	:	SelectFlag		:	詳細ﾎﾞﾀﾝからの戻りで再表示かどうか判断する
//*													(詳細からの戻り:Ture､以外:FALSE)
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.GridAgainDsp(Select: Integer; NCode: Extended);
var
	cNode		:	TTreeNode;
	DmqTree		:	TMQuery;
	DmqDsp		:	TMQuery;
	iNCode		:	Extended;		//	ﾂﾘｰで選択された内部ｺｰﾄﾞ
	iKasanMoto	:	Extended;		//	加算元外部ｺｰﾄﾞ
	iFusenKbn	:	Integer;		//	付箋区分
	iWork		:	Integer;
	iKamoku		:	Integer;
	SumKbn		:	Byte;			//	実在/合計区分
	sCmnt		:	String;
	//<053>
	iLoop		:	Integer;
	iflg		:	Integer;
begin
	//	初期化処理
	gbT_FusenFlag	:=	TRUE;
	iNCode			:=	0;
	SumKbn			:=	0;
//<053>
	iflg			:=	0;

	case Select of
		OTHER:
		begin
			if grOya_Taikei <> Nil then
			begin
				//	細目時
				if (gDelGrid.MasKbn = 2) then			//	細目時
				begin
					LevelDspSaimoku(grOya_Taikei.NCode);		//	同一ﾚﾍﾞﾙの表示処理
					gbT_FusenFlag := FALSE;
					exit;
				end;

				iNCode := grOya_Taikei.NCode;
			end
			else
			begin

				iKamoku	:= ReturnKmkCode(MComboBox.ItemIndex);
{	工事関係を呼べなくする	HIS0015
				if (MComboBox.ItemIndex = 4) then
					iGCode		:=	GetKmkInfo(iKamoku,8,SumKbn)	//	特殊科目情報から科目ｺｰﾄﾞ取得(工事合計科目)
				else
}
				iNCode := GetKmkInfo(iKamoku,1,SumKbn);	//	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)
			end;
		end;
		SYOUSAI:
		begin
			cNode		 :=	TreeView.Selected;
			grOya_Taikei :=	cNode.Data;
			iNCode		 :=	grOya_Taikei.NCode;
		end;
		POPUP:  iNCode := grTaikei.NCode;
		DELETE:
		begin
			//	細目時
//			if (Screen.ActiveControl.Name = DSaimokuGrid.Name) then
			if (ACControl.Name = DSaimokuGrid.Name) then
			begin
				LevelDspSaimoku(gDelGrid.NCode);		//	同一ﾚﾍﾞﾙの表示処理
				gbT_FusenFlag := FALSE;
				exit;
			end;
			iNCode := gDelGrid.NCode;
		end;
		AGAIN:	iNCode := NCode;
	end;

	DmqTree := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );		//	DBとMQueryの接続

	DmqDsp := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDsp );		//	DBとMQueryの接続

	if NCode <> 9999999 then		//HIS0054
	begin
		MemGou.Close;
		MemZitsu.Close;
    end;
	MemSai.Close;

	MemGou.Open;
	MemZitsu.Open;
	MemSai.Open;

	with DmqTree do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    BasedNCode             ');	//	加算元内部ｺｰﾄﾞ
		SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
		SQL.Add('  AND SumNCode  = :ExCode  ');	//	加算先内部ｺｰﾄﾞ
		SQL.Add('ORDER BY EntNo             ');

		ParamByName('ExCode').AsFloat := iNCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;

			DmqDsp.Close;
			DmqDsp.Free;

			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			SetLength(m_aCmnt_Goukei,0);	//	配列をｸﾘｱ
			SetLength(m_aCmnt_Jitsu ,0);	//	配列をｸﾘｱ
		end;

		while ( EOF <> TRUE ) do
		begin
			iKasanMoto	:=	GetFld('BasedNCode').AsFloat;

			with DmqDsp do
			begin
//<053>--start---
// <078> ↓↓↓
//				if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
				if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,SumKbn)) then
				begin
//					if	(iNCode = GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) and (iflg <> 1) then
					if	(iNCode = GetKmkInfo(TOUKIMISYO,1,SumKbn)) and (iflg <> 1) then
// <078> ↑↑↑
					begin
						for iLoop := 11 to 15 do
						begin
							DSourceGou.Enabled := False;
							DSourceZitsu.Enabled := False;
							Close();
							SQL.Clear;
							SQL.ADD('SELECT '									);
                            SQL.ADD(    'MA.NCode as NCode'                     );  //  内部ｺｰﾄﾞ
							SQL.ADD(	',MA.GCode as Gaibu'					);	//	外部ｺｰﾄﾞ
							SQL.ADD(	',MA.Renso as Ren'						);	//	連想ｼﾝﾎﾞﾙ
							SQL.ADD(	',MA.LongName as LName'					);	//	正式名称
							SQL.ADD(	',MA.SimpleName as SName'				);	//	簡略名称
							SQL.ADD(	',MA.CharCode as CharCD'				);	//	性格ｺｰﾄﾞ
							SQL.ADD(	',MA.AnalyzeCode as Bunseki'			);	//	分析ｺｰﾄﾞ
							SQL.ADD(	',MB.DecoKbn as Sousyoku'				);	//	装飾区分
							SQL.ADD('FROM '										);
							SQL.ADD(	'KmkMA MA'								);	//	勘定科目基本ﾏｽﾀ
							SQL.ADD(	'LEFT OUTER JOIN KmKMB MB ON '			);	//	勘定科目詳細情報
							SQL.ADD(		'( '								);
							SQL.ADD(			'MA.MasterKbn = MB.MasterKbn '	);
							SQL.ADD(			'AND MA.NCode = MB.NCode '		);
							SQL.ADD(		') '								);
							SQL.ADD('WHERE '									);
							SQL.ADD(	'MA.MasterKbn = 1 AND '					);	//	ﾏｽﾀ区分(1:勘定科目)
							SQL.ADD(	'MA.RDelkbn = 0 AND '					);	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
							SQL.ADD(	'MA.NCode = :Code AND '					);	//	内部ｺｰﾄﾞ
							SQL.ADD(	'MA.SubCode = 0'						);	//	細目ｺｰﾄﾞ(0)
							ParamByName('Code').AsFloat := SonekiArrayL1[iLoop].ConstNCode;
							//	ｴﾗｰの判定
							if Open = False then
							begin
								ErrorMessageDsp(DmqTree);
								DmqTree.Close;
								DmqTree.Free;
				        	    Exit;
							end;
							while EOF <> True do
							begin
								if (SonekiArrayL1[iLoop].SumKbn = 1) then	//	合計時
								begin
        							gDragGouFlag := True;	//HIS0054
 									MemGou.Append;
            						MemGou.FieldByName('NCode').AsFloat     	:=	GetFld('NCode').AsFloat;        //  内部ｺｰﾄﾞ
									MemGou.FieldByName('GCode').AsInteger		:=	GetFld('Gaibu').AsInteger;		//	外部ｺｰﾄﾞ
									MemGou.FieldByName('GRen').AsString			:=	GetFld('Ren').AsString;		//	連想ｼﾝﾎﾞﾙ
									MemGou.FieldByName('GLongName').AsString	:=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);	//	正式名称
									MemGou.FieldByName('GSName').AsString		:=	GetFld('SName').AsString;	//	簡略名称
									MemGou.FieldByName('SousyokuData').AsInteger :=	GetFld('Sousyoku').AsInteger;	//	装飾区分
									iFusenKbn	:=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分のCheck
									SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
									m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode := GetFld('NCode').AsFloat;
									m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt := sCmnt;
									FusenDsp(iFusenKbn,GOUKEI);									//	付箋表示処理
									MemGou.Post;
									NEXT;
								end
								else begin
									gDragJitsuFlag := True;	//HIS0054
									MemZitsu.Append();
              						MemZitsu.FieldByName('NCode').AsFloat           :=  GetFld('NCode').AsFloat;        //  内部ｺｰﾄﾞ
	    							MemZitsu.FieldByName('Code').AsInteger			:=	GetFld('Gaibu').AsInteger;		//	外部ｺｰﾄﾞ
									MemZitsu.FieldByName('Ren').AsString			:=	GetFld('Ren').AsString;		//	連想ｼﾝﾎﾞﾙ
									MemZitsu.FieldByName('LongName').AsString		:=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);	//	正式名称
									MemZitsu.FieldByName('SName').AsString			:=	GetFld('SName').AsString;	//	簡略名称
									MemZitsu.FieldByName('SeikakuData').AsInteger	:=	GetFld('CharCD').AsInteger;	//	性格ｺｰﾄﾞ
									MemZitsu.FieldByName('BunsekiNO').AsInteger		:=	GetFld('Bunseki').AsInteger;//	分析ｺｰﾄﾞ
									MemZitsu.FieldByName('Bunseki').AsString		:=	GetSKmkMA(BUNSEKI,GetFld('Bunseki').AsInteger,iWork);
									iFusenKbn	:=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分Check
									SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
									m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode := GetFld('NCode').AsFloat;
									m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt := sCmnt;
									FusenDsp(iFusenKbn,ZITSUZAI);								//	付箋表示処理
									MemZitsu.Post;
									NEXT;
								end;
							end;
							DSourceGou.Enabled := True;
							DSourceZitsu.Enabled := True;

							MemGou.First;
							MemZitsu.First;
						end;
						iflg := 1;
					end;
				end;
//<053>---end----

				Close();
				SQL.Clear;
				SQL.Add('SELECT                         ');
				SQL.Add('    MA.MasterKbn   as Mas      ');	//	ﾏｽﾀ区分
				SQL.Add('   ,MA.SumKbn      as Sum      ');	//	実在/合計区分
                SQL.Add('   ,MA.NCode       as NCode    '); //  科目内部ｺｰﾄﾞ
                SQL.Add('   ,MA.CNCode      as CNCode   '); //  科目別補助内部ｺｰﾄﾞ
				SQL.Add('   ,MA.GCode       as Gaibu    ');	//	外部ｺｰﾄﾞ
				SQL.Add('   ,MA.Renso       as Ren      ');	//	連想ｼﾝﾎﾞﾙ
				SQL.Add('   ,MA.LongName    as LName    ');	//	正式名称
				SQL.Add('   ,MA.SimpleName  as SName    ');	//	簡略名称
				SQL.Add('   ,MA.CharCode    as CharCD   ');	//	性格ｺｰﾄﾞ
				SQL.Add('   ,MA.AnalyzeCode as Bunseki  ');	//	分析ｺｰﾄﾞ
				SQL.Add('   ,MB.DecoKbn     as Sousyoku ');	//	分析ｺｰﾄﾞ
				SQL.Add('FROM    KmkMA MA               '); //	勘定科目基本ﾏｽﾀ
				SQL.Add('       ,KmkMB MB               ');	//	勘定科目基本ﾏｽﾀ
                SQL.Add('WHERE MA.RDelKbn   = 0         ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('  AND MA.MasterKbn = 1         ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('  AND MB.MasterKbn = 1         ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('  AND MA.NCode     = :Code     ');	//	内部ｺｰﾄﾞ
                SQL.Add('  AND MB.NCode     = :Code     ');	//	内部ｺｰﾄﾞ
                SQL.Add('  AND MB.CNCode    = 0         ');	//	科目別補助内部ｺｰﾄﾞ
                SQL.Add('  AND MA.CNCode    = 0         ');	//	科目別補助内部ｺｰﾄﾞ
                SQL.Add('ORDER BY MA.GCode              ');

				ParamByName('Code').AsFloat := iKasanMoto;

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqDsp);
					DmqDsp  .Close;
					DmqDsp  .Free;
					DmqTree .Close;
					DmqTree .Free;
					Exit;
				end;

                gbT_FusenFlag	:=	True;    //<091> ADD

				if ( (GetFld('Mas').AsInteger) = 1 ) and
                   ( (GetFld('Sum').AsInteger) = 1 ) then
				begin

					DSourceGou.Enabled := FALSE;

					while ( EOF <> TRUE ) do
					begin
						MemGou.Append;
						MemGou.FieldByName('NCode')         .AsFloat 	:=	iKasanMoto;
						MemGou.FieldByName('GCode')         .AsInteger	:=	GetFld('Gaibu')     .AsInteger;
						MemGou.FieldByName('GRen')          .AsString	:=	GetFld('Ren')       .AsString;
// <049>↓
//						MemGou.FieldByName('GLongName')     .AsString	:=	GetFld('LName')     .AsString;
						MemGou.FieldByName('GLongName')     .AsString	:=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);
// <049>↑
						MemGou.FieldByName('GSName')        .AsString	:=	GetFld('SName')     .AsString;
						MemGou.FieldByName('SousyokuData')  .AsInteger  :=  GetFld('Sousyoku')  .AsInteger;

						iFusenKbn	:=	FusenCheck(1,iKasanMoto,0,sCmnt);
						SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
						m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  GetFld('NCode').AsFloat;
                        m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  GetFld('CNCode').AsFloat;
						m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  sCmnt;
						FusenDsp(iFusenKbn,GOUKEI);
						MemGou.Post;
						NEXT;
					end;

    				DSourceGou.Enabled := TRUE;
				end
                else if ( (GetFld('Mas').AsInteger) = 1 ) and
						( (GetFld('Sum').AsInteger) = 0 ) then
				begin

    				DSourceZitsu.Enabled            :=  FALSE;
					DZitsuGrid.DataSource.DataSet   :=  nil;

					while ( EOF <> TRUE ) do
					begin
						MemZitsu.Append();
						MemZitsu.FieldByName('NCode')       .AsFloat    :=  iKasanMoto;
						MemZitsu.FieldByName('Code')        .AsInteger	:=	GetFld('Gaibu')     .AsInteger;
						MemZitsu.FieldByName('Ren')         .AsString	:=	GetFld('Ren')       .AsString;
// <049>↓
//						MemZitsu.FieldByName('LongName')    .AsString	:=	GetFld('LName')     .AsString;
    					MemZitsu.FieldByName('LongName')    .AsString	:=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);
// <049>↑
						MemZitsu.FieldByName('SName')       .AsString	:=	GetFld('SName')     .AsString;
						MemZitsu.FieldByName('SeikakuData') .AsInteger	:=	GetFld('CharCD')    .AsInteger;
						MemZitsu.FieldByName('BunsekiNO')   .AsInteger	:=	GetFld('Bunseki')   .AsInteger;
						MemZitsu.FieldByName('Bunseki')     .AsString	:=	GetSKmkMA(BUNSEKI,GetFld('Bunseki').AsInteger,iWork);

						iFusenKbn	:=	FusenCheck(1,iKasanMoto,0,sCmnt);
						SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
						m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  GetFld('NCode').AsFloat;
                        m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  GetFld('CNCode').AsFloat;
						m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  sCmnt;
						FusenDsp(iFusenKbn,ZITSUZAI);

						MemZitsu.Post;
						NEXT;
					end;
					DZitsuGrid.DataSource.DataSet := MemZitsu;
					DSourceZitsu.Enabled := TRUE;
				end;
			end;
			NEXT;
        end;
	end;

	DmqTree .Close;
	DmqTree .Free;
	DmqDsp  .Close;
	DmqDsp  .Free;

	gbT_FusenFlag	        :=	FALSE;

	DSourceGou.DataSet	    :=	MemGou;
	DSourceZitsu.DataSet    :=	MemZitsu;

	DGoukeiGrid.DataSource.DataSet.First;
	DZitsuGrid.DataSource.DataSet.First;

end;

//-----------------------------------------------------------------------------
//  CMChildKey
//      ｷｰのﾁｪｯｸ <BPL>
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.CMChildKey(var Msg: TWMKey);
var
	sShift              : 	TShiftState;
    lvCompoName         : 	String;
	sName	:	String;
	wkRec	:	^TaikeiRec;
begin
	m_BackSpaceFlag := FALSE;

    // ｱｸﾃｲﾌﾞなｺﾝﾄﾛｰﾙの名称を取得する
    lvCompoName := '';
    if ( Screen.ActiveControl <> nil ) then
            lvCompoName := TComponent(Screen.ActiveControl).Name
    else    Exit;

	sShift	:=	MJSKeyDataToShiftState(Msg.KeyData);	//	Shiftｷｰの取得 <105>MOD

{
	if (EBankCodeT.Name = Screen.ActiveControl.Name) then
	begin
		//	←キーでカーソルが先頭でない、→キーでカーソルが末尾でない … そのままぬける
		if (Msg.CharCode = VK_LEFT)  and (MjsChkCurTop(Screen.ActiveControl) = FALSE) or
		   (Msg.CharCode = VK_RIGHT) and (MjsChkCurEnd(Screen.ActiveControl) = FALSE) then
		   Exit;
	end;
}
	//	ｺｰﾄﾞでのKeyPressで使用
	if (Msg.CharCode = VK_BACK) then	//	BackSpaceが押された時
	begin
		m_BackSpaceFlag := TRUE;
		exit;
	end;

// +++++++++++++++++++++++++
//  指示コンボボックス
// +++++++++++++++++++++++++
    if ( lvCompoName = 'MComboBox' ) then
	begin
// <ESC>↓
{		if ( MComboBox.DroppedDown = FALSE ) then
		begin
            // Escape/Endｷｰの補足
			if ( Msg.CharCode = VK_ESCAPE ) or ( Msg.CharCode = VK_END ) then
			begin
			    Close();
				Abort;
				Exit;
			end;
		end;
}
// <ESC>↑
        // Returnｷｰの補足
		if ( Msg.CharCode = VK_RETURN ) then
		begin
			ComboChange();
            MjsDispCtrl.MjsSetFocus(Self, 'Treeview');
			Abort;
		end;
        // Shift&Tab/Rightｷｰの補足
		if (( Msg.CharCode = VK_TAB   ) and ( sShift = [] )) or
		    ( Msg.CharCode = VK_RIGHT ) then
		begin
			// TreeにItemが一つでも存在した時
			if ( Treeview.Items.Count <> 0 ) then
                MjsDispCtrl.MjsSetFocus(Self, 'Treeview');
			Abort;
		end;
        // Shift&Tab/Leftｷｰの補足
		if (( Msg.CharCode = VK_TAB  ) and ( sShift = [ssShift] )) or
		    ( Msg.CharCode = VK_LEFT ) then Abort;

		Exit;
	end;

// +++++++++++++++++++++++++
//  ツリービュー
// +++++++++++++++++++++++++
    if ( lvCompoName = 'TreeView' ) then
	begin
        // Return/Tabｷｰの補足
		if  ( Msg.CharCode = VK_RETURN ) or
           (( Msg.CharCode = VK_TAB    ) and ( sShift = [] )) then
		begin
            // 一覧
			if ( P_Grid.Visible ) then
			begin
				case MTab_N.Items.Selected of
					0:  MjsDispCtrl.MjsSetFocus(Self, 'DZitsuGrid');
					1:	MjsDispCtrl.MjsSetFocus(Self, 'DSaimokuGrid');
					2:	MjsDispCtrl.MjsSetFocus(Self, 'DGoukeiGrid');
				end;
			end
            // 詳細
			else
            begin
				if ( ECode.Enabled ) then
                    MjsDispCtrl.MjsSetFocus(Self, 'ECode');
            end;
			Abort;
		end;

		// 参照時
		if ( giReferFlag = REFER ) then
        begin
			// Tabが押された時
			if ( Msg.CharCode=VK_TAB ) and ( sShift=[] ) then
        	begin
				MjsNextCtrl(Self);
				Abort;
			end;
		end;
	end;

// +++++++++++++++++++++++++
//  合計グリッド
// +++++++++++++++++++++++++
    if ( lvCompoName = 'DGoukeiGrid' ) then
	begin
		// 参照時
		if ( giReferFlag = REFER ) then
		begin
            // 先頭ﾉｰﾄﾞの場合
			if ( DGoukeiGrid.FocusedNode.Index = 0 ) then
			begin
                // Shift&Tabｷｰの補足
				if ( sShift = [ssShift] ) and ( Msg.CharCode = VK_TAB ) then
				begin
                    MjsDispCtrl.MjsSetFocus(Self, 'MTab_N');
					Abort;
				end;
			end;
		end;
        // 先頭ｶﾗﾑの場合
		if ( DGoukeiGrid.FocusedColumn = 1 ) then
		begin
			// Shift&Tabｷｰの補足
			if ( sShift = [ssShift] ) and ( Msg.CharCode = VK_TAB ) then
			begin
                // 新規登録時
				if ( MemGou.State in [dsInsert] ) then
					MemGou.Delete;

                MjsDispCtrl.MjsSetFocus(Self, 'MTab_N');
                Abort;
			end;
		end;

		// ｺｰﾄﾞを入力して連想にﾌｫｰｶｽがある時F8でｺﾋﾟｰDLGを呼べる様にする
		if  ( DGoukeiGrid.FocusedColumn = 2     ) and
           (( Msg.CharCode              = VK_F8 ) and ( sShift = [] )) and
            ( MemGou.State in [dsInsert]        ) then
		begin
			fnCallCopyDlg(GOUKEI,ICHIRAN);
		end;

		// 簡略名称にﾌｫｰｶｽがある時かつF8が押された時
		if  ( DGoukeiGrid.FocusedColumn = 4     ) and
           (( Msg.CharCode              = VK_F8 ) and ( sShift = [] )) then
		begin
			sName	:=	MemGou.FieldByName('GLongName').AsString;
			if ( sName <> '' ) then
			begin
				MemGou.Edit;
                // 正式名称を簡略名称へｺﾋﾟｰする
				MemGou.FieldByName('GSName').AsString := MjsCopy(sName,14);
				MemGou.Post;
			end;
		end;
        // Home&Ctrlｷｰの補足
		if ( Msg.CharCode = VK_HOME ) and ( sShift <> [ssCtrl] ) then
		begin
            // 先頭ｶﾗﾑへﾌｫｰｶｽを移動
			if ( DGoukeiGrid.EditingText = '' ) then
			begin
				DGoukeiGrid.FocusedColumn := 1;
				Abort;
			end;
		end;
        // End&Ctrlｷｰの補足
		if ( Msg.CharCode = VK_END ) and ( sShift <> [ssCtrl] ) then
		begin
			if ( DGoukeiGrid.EditingText = '' ) then
			begin
                // 先頭ｶﾗﾑにﾌｫｰｶｽがある場合、指示ｺﾝﾎﾞへ移動
				if (DGoukeiGrid.FocusedColumn = 1) then
                begin
// <ESC>↓                
//                    MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
                    ACControl := MComboBox;
                    ACControl.SetFocus;
// <ESC>↑

                    MComboBox.DroppedDown   :=  TRUE;
                    Abort;
                end
                // 先頭ｶﾗﾑ以外にﾌｫｰｶｽがある場合、最終ｶﾗﾑへﾌｫｰｶｽを移動
				else
				begin
					DGoukeiGrid.FocusedColumn := 4;
					Abort;
				end;
			end;
		end;
        // Escapeｷｰの補足
		if ( Msg.CharCode = VK_ESCAPE ) and ( sShift=[] ) then
		begin
            // ﾃﾞｰﾀ変更中(修正)
			if ( DSourceGou.DataSet.State in [dsEdit] ) or
			   ( DGoukeiGrid.EditingText   <> ''      ) then Exit;
            // ﾃﾞｰﾀ変更中(新規)
			if ( DSourceGou.DataSet.State in [dsInsert] ) then
			begin
				m_F8CopyFlag    :=  FALSE;
                MemGou.Cancel;
				Exit;
			end;
            
            // Gridを抜けて指示ｺﾝﾎﾞへﾌｫｰｶｽを移動
// <ESC>↓            
//            MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
            ACControl := MComboBox;
            ACControl.SetFocus;
// <ESC>↑
            MComboBox.DroppedDown   :=  TRUE;
            Abort;
		end;
	end;

// +++++++++++++++++++++++++
//  実在グリッド
// +++++++++++++++++++++++++
    if ( lvCompoName = 'DZitsuGrid' ) then
	begin
		// 参照時
		if ( giReferFlag = REFER ) then
		begin
            // 先頭ﾉｰﾄﾞの場合
			if ( DZitsuGrid.FocusedNode.Index = 0 ) then
			begin
				// Shift&Tabｷｰの補足
				if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'MTab_N');
					Abort;
				end;
			end;
		end;
        // 先頭ｶﾗﾑの場合
		if ( DZitsuGrid.FocusedColumn = 1 ) then
		begin
			// Shift&Tabｷｰの補足
			if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
			begin
                // 新規登録時
				if ( MemZitsu.State in [dsInsert] ) then
					MemZitsu.Delete;

				MjsDispCtrl.MjsSetFocus(Self, 'MTab_N');
                Abort;
			end;
		end;

		// ｺｰﾄﾞを入力して連想にﾌｫｰｶｽがある時F8でｺﾋﾟｰDLGを呼べる様にする
		if  ( DZitsuGrid.FocusedColumn = 2     ) and
           (( Msg.CharCode             = VK_F8 ) and ( sShift = [] )) and
            ( MemZitsu.State in [dsInsert]     ) then
		begin
			fnCallCopyDlg(ZITSUZAI,ICHIRAN);
		end;

		// 簡略名称にﾌｫｰｶｽがある時かつF8が押された時
		if  ( DZitsuGrid.FocusedColumn = 4     ) and
           (( Msg.CharCode             = VK_F8 ) and ( sShift = [] )) then
		begin
			sName	:=	MemZitsu.FieldByName('LongName').AsString;	//	正式名称
			if ( sName <> '' ) then
			begin
				MemZitsu.Open;
				MemZitsu.Edit;
                // 正式名称を簡略名称へｺﾋﾟｰする
				MemZitsu.FieldByName('SName').AsString := MjsCopy(sName,14);
				MemZitsu.Post;
			end;
		end;

        // 分析ｶﾗﾑ時
		if ( DZitsuGrid.FocusedColumn = 7 ) then
		begin
			// ﾃﾝｷｰの補足
			if ( Msg.CharCode = VK_NUMPAD0 ) or ( Msg.CharCode = VK_NUMPAD1 ) or
			   ( Msg.CharCode = VK_NUMPAD2 ) or ( Msg.CharCode = VK_NUMPAD3 ) or
			   ( Msg.CharCode = VK_NUMPAD4 ) or ( Msg.CharCode = VK_NUMPAD5 ) or
			   ( Msg.CharCode = VK_NUMPAD6 ) or ( Msg.CharCode = VK_NUMPAD7 ) or
			   ( Msg.CharCode = VK_NUMPAD8 ) or ( Msg.CharCode = VK_NUMPAD9 ) then
			begin
				gbHanteiFlag	:=	TRUE;
			end;
		end;
        // Home&Ctrlｷｰの補足
		if ( Msg.CharCode = VK_HOME ) and ( sShift <> [ssCtrl] ) then
		begin
            // 先頭ｶﾗﾑへﾌｫｰｶｽを移動
			if ( DZitsuGrid.EditingText = '' ) then
			begin
				DZitsuGrid.FocusedColumn := 1;
				Abort;
			end;
		end;
        // End&Ctrlｷｰの補足
		if ( Msg.CharCode = VK_END ) and ( sShift <> [ssCtrl] ) then
		begin
	 		if ( DZitsuGrid.EditingText = '' ) then
			begin
                // 先頭ｶﾗﾑにﾌｫｰｶｽがある場合、指示ｺﾝﾎﾞへ移動
				if ( DZitsuGrid.FocusedColumn = 1 ) then
                begin
// <ESC>↓
//                    MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
                    ACControl := MComboBox;
                    ACControl.SetFocus;
// <ESC>↑
                    MComboBox.DroppedDown   :=  TRUE;
                    Abort;
                end
                // 先頭ｶﾗﾑ以外にﾌｫｰｶｽがある場合、最終ｶﾗﾑへﾌｫｰｶｽを移動
				else
                begin
					DZitsuGrid.FocusedColumn := 7;
					Abort;
				end;
			end;
		end;
        // Escapeｷｰの補足
		if ( Msg.CharCode = VK_ESCAPE ) and ( sShift=[] ) then
		begin
            // ﾃﾞｰﾀ変更中(修正)
			if ( DSourceZitsu.DataSet.State in [dsEdit] ) or
			   ( DZitsuGrid.EditingText     <> ''       ) then Exit;
            // ﾃﾞｰﾀ変更中(新規)
			if ( DSourceZitsu.DataSet.State in [dsInsert] ) then
			begin
				m_F8CopyFlag := FALSE;
                MemZitsu.Cancel;
				Exit;
			end;

			// Gridを抜けて指示ｺﾝﾎﾞへﾌｫｰｶｽを移動
// <ESC>↓
//            MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
            ACControl := MComboBox;
            ACControl.SetFocus;
// <ESC>↑
            MComboBox.DroppedDown   :=  TRUE;
            Abort;
		end;
	end;

// +++++++++++++++++++++++++
//  細目グリッド
// +++++++++++++++++++++++++
    if ( lvCompoName = 'DSaimokuGrid' ) then
	begin
		// 参照時
		if ( giReferFlag = REFER ) then
		begin
            // 先頭ﾉｰﾄﾞの場合
			if ( DSaimokuGrid.FocusedNode.Index = 0 ) then
			begin
				// Shift&Tabｷｰの補足
				if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'MTab_N');
					Abort;
				end;
			end;
		end;
        // 先頭ｶﾗﾑの場合
		if ( DSaimokuGrid.FocusedColumn = 1 ) then
		begin
			// Shift&Tabｷｰの補足
			if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
			begin
                // 新規登録時
				if ( MemSai.State in [dsInsert] ) then
					MemSai.Delete;

				MjsDispCtrl.MjsSetFocus(Self, 'MTab_N');
                Abort;
			end;
		end;

		// 簡略名称にﾌｫｰｶｽがある時かつF8が押された時
		if  ( DSaimokuGrid.FocusedColumn = 4     ) and
           (( Msg.CharCode               = VK_F8 ) and ( sShift = [] )) then
		begin
			sName	:=	MemSai.FieldByName('SLongName').AsString;	//	正式名称
			if (sName <> '') then
			begin
				MemSai.Edit;
                // 正式名称を簡略名称へｺﾋﾟｰする。
				MemSai.FieldByName('SSName').AsString := MjsCopy(sName,14);
				MemSai.Post;
			end;
		end;
        // Home&Ctrlｷｰの補足
		if ( Msg.CharCode = VK_HOME ) and ( sShift <> [ssCtrl] ) then
		begin
            // 先頭ｶﾗﾑへﾌｫｰｶｽを移動
			if ( DSaimokuGrid.EditingText = '' ) then
			begin
				DSaimokuGrid.FocusedColumn := 1;
				Abort;
			end;
		end;
        // End&Ctrlｷｰの補足
		if ( Msg.CharCode = VK_END ) and ( sShift <> [ssCtrl] ) then
		begin
	 		if ( DSaimokuGrid.EditingText = '' ) then
			begin
                // 先頭ｶﾗﾑにﾌｫｰｶｽがある場合、指示ｺﾝﾎﾞへ移動
				if ( DSaimokuGrid.FocusedColumn = 1 ) then
                begin
// <ESC>↓
//					MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
                    ACControl := MComboBox;
                    ACControl.SetFocus;
// <ESC>↑
                    MComboBox.DroppedDown   :=  TRUE;
                    Abort;
                end
                // 先頭ｶﾗﾑ以外にﾌｫｰｶｽがある場合、最終ｶﾗﾑへﾌｫｰｶｽを移動
				else
				begin
					DSaimokuGrid.FocusedColumn := 4;
					Abort;
				end;
			end;

			m_GridEndEscFlag := TRUE;
		end;
        // Escapeｷｰの補足
		if ( Msg.CharCode = VK_ESCAPE ) and ( sShift=[] ) then
		begin
            // ﾃﾞｰﾀ変更中(新規)
			if ( DSourceSai.DataSet.State in [dsEdit] ) or
			   ( DSaimokuGrid.EditingText   <> ''     ) then  Exit;
            // ﾃﾞｰﾀ変更中(新規)
			if ( DSourceSai.DataSet.State in [dsInsert] ) then
			begin
                MemSai.Cancel;
                Exit;
            end;

			// Gridを抜けて指示ｺﾝﾎﾞへﾌｫｰｶｽを移動
// <ESC>↓            
//            MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
            ACControl := MComboBox;
            ACControl.SetFocus;
// <ESC>↑
            MComboBox.DroppedDown   :=  TRUE;
            Abort;
		end;
	end;

// +++++++++++++++++++++++++
//  グリッド専用タブ
// +++++++++++++++++++++++++
    if ( lvCompoName = 'MTab_N' ) then
	begin
		//	下ｶｰｿﾙｷｰ
		if (Msg.CharCode = VK_DOWN) then
		begin
			case MTab_N.Items.Selected of
				0:
				begin
                    MjsDispCtrl.MjsSetFocus(Self, 'DZitsuGrid');
					DZitsuGrid.FocusedColumn	:=	1;
				end;
				1:
				begin
                    MjsDispCtrl.MjsSetFocus(Self, 'DSaimokuGrid');
					DSaimokuGrid.FocusedColumn	:=	1;
				end;
				2:
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'DGoukeiGrid');
					DGoukeiGrid.FocusedColumn	:=	1;
				end;
			end;
		end;
	end;

// +++++++++++++++++++++++++
//  Returnキーの補足
// +++++++++++++++++++++++++
	if ( Msg.CharCode = VK_RETURN ) then
	begin
        if ( lvCompoName = 'MComboBox'    ) or
           ( lvCompoName = 'DZitsuGrid'   ) or
           ( lvCompoName = 'DSaimokuGrid' ) or
           ( lvCompoName = 'DGoukeiGrid'  ) or
           ( lvCompoName = 'B_SUpDate'    ) or
           ( lvCompoName = 'B_SCancel'    ) then Exit;

        if ( lvCompoName = 'MTab_Select' ) then
        begin
			if ( ECode.Enabled ) then
                MjsDispCtrl.MjsSetFocus(Self, 'ECode');
			Abort;
		end;

        if ( lvCompoName = 'MTab_N' ) then
		begin
			case MTab_N.Items.Selected of
                // 実在
				0:  begin
					    MjsDispCtrl.MjsSetFocus(Self, 'DZitsuGrid');
					    DZitsuGrid.FocusedColumn	:=	1;
				    end;
                // 細目
				1:  begin
					    MjsDispCtrl.MjsSetFocus(Self, 'DSaimokuGrid');
					    DSaimokuGrid.FocusedColumn	:=	1;
					end;
                // 合計
				2:  begin
                        MjsDispCtrl.MjsSetFocus(Self, 'DGoukeiGrid');
					    DGoukeiGrid.FocusedColumn	:=	1;
				    end;
			end;
			Abort;
		end;
{
		//	装飾(詳細時の入力ｺﾝﾎﾟｰﾈﾝﾄ)
		if (Screen.ActiveControl.Name = ESousyokuCode.Name) then
		begin
			MjsDispCtrl.MjsNextCtrl(Self);
			abort;		//	NextCtrl後にClickｲﾍﾞﾝﾄが発生するのでそれの回避の為Abort使用
			Exit;
		end;
}
		case gbSetPosition of
			ZITSUZAI:	//	実在時
			begin
				if (m_Electronic = TRUE) then
  				begin
					if (Screen.ActiveControl.Name = EShikuriCode.Name) then	//	資金繰ｺｰﾄﾞ優先
					begin
						B_SUpDate.SetFocus;
						abort;
					end;
				end
				else if (Screen.ActiveControl.Name = ERirekiKbnCode.Name) then	//	履歴管理
				begin
					B_SUpDate.SetFocus;
					abort;
				end;
			end;
			SAIMOKU:	//	細目時
			begin
{
				if (Screen.ActiveControl.Name = ESyousuten.Name) then	//	小数点桁数
				begin
					B_SUpDate.SetFocus;
					abort;
				end;
}
			end;
		end;

		MjsDispCtrl.MjsNextCtrl(Self);
        Abort;
	end;

	//	Grid時のTAB
	if (Screen.ActiveControl.Name = MTab_N.Name) then
	begin
		if (sShift = [ssShift]) then					//	ShiftKeyが押された時
		begin
			if (Msg.CharCode = VK_TAB) then				//	TabKeyが押された時
			begin
				MComboBox.SetFocus;
				abort;
			end;
		end;

		if (Msg.CharCode = VK_TAB) then					//	TabKeyが押された時
		begin
			case MTab_N.Items.Selected of
				0:	//	実在
				begin
					DZitsuGrid.SetFocus;
					DZitsuGrid.FocusedColumn	:=	1;
					abort;
				end;
				1:	//	細目
				begin
					DSaimokuGrid.SetFocus;
					DSaimokuGrid.FocusedColumn	:=	1;
					abort;
				end;
				2:	//	合計
				begin
					DGoukeiGrid.SetFocus;
					DGoukeiGrid.FocusedColumn	:=	1;
					abort;
				end;
			end;
			exit;
		end;
	end;

// +++++++++++++++++++++++++
//  詳細(コード)
// +++++++++++++++++++++++++
    if ( lvCompoName = 'ECode' ) then
	begin
		// Escape/Endｷｰの補足
		if ( Msg.CharCode = VK_ESCAPE ) or ( Msg.CharCode = VK_END )then
        begin
			gbEndEscFlag    :=  TRUE;

			wkRec	        :=	TreeView.Selected.Data;

            //	実在
			if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
			begin
				case MTab_Select.Items.Selected of
// <013>			0: SelectDsp(1,0,StrToIntDef(giSyouDspCode,0),'');	// 実在
					0: SelectDsp(1,0,StrToIntDef(giSyouDspCode,0),'0');	// 実在<013>
// <013>			1: SelectDsp(2,0,0,'');				                // 科目別補助
					1: SelectDsp(2,0,0,'0');				            // 科目別補助<013>
// <013>			2: SelectDsp(1,1,-1,'');				            // 合計
					2: SelectDsp(1,1,-1,'0');				            // 合計<013>
	    		end;
				MTab_Select.Items[0].Enabled	:=	TRUE;	            // 実在
				MTab_Select.Items[1].Enabled	:=	TRUE;	            // 細目
				MTab_Select.Items[2].Enabled	:=	TRUE;	            // 合計
			end
            // 合計
			else if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) then
			begin
				case MTab_Select.Items.Selected of
// <013>			0: SelectDsp(1,0,0,'');				                // 実在
					0: SelectDsp(1,0,0,'0');				            // 実在<013>
// <013>			2: SelectDsp(1,1,StrToIntDef(giSyouDspCode,0),'');	// 合計
					2: SelectDsp(1,1,StrToIntDef(giSyouDspCode,0),'0');	// 合計<013>
	    		end;
				MTab_Select.Items[0].Enabled	:=	TRUE;	            // 実在
				MTab_Select.Items[1].Enabled	:=	FALSE;	            // 細目
				MTab_Select.Items[2].Enabled	:=	TRUE;	            // 合計
			end
            // 科目別補助
			else if ( wkRec.MasKbn = 2 ) and ( wkRec.Kbn = 0 ) then
			begin
				SelectDsp(2,0,giDspOyaCode,giSyouDspCode);
				MTab_Select.Items[0].Enabled	:=	FALSE;	            // 実在
				MTab_Select.Items[1].Enabled	:=	TRUE;	            // 細目
				MTab_Select.Items[2].Enabled	:=	FALSE;  	        // 合計
			end;
// <ESC>↓
//            MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
            ACControl := MComboBox;
            ACControl.SetFocus;
// <ESC>↑
            MComboBox.DroppedDown   :=  TRUE;
            Abort;
		end;

		// Shift&Tabｷｰの補足
		if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
		begin
			gShiftTabFlag	:=	TRUE;
            MjsDispCtrl.MjsSetFocus(Self, 'MTab_Select');
			Abort;
		end;
	end;

// +++++++++++++++++++++++++
//  詳細専用タブ
// +++++++++++++++++++++++++
    if ( lvCompoName = 'MTab_Select' ) then
	begin
        // Shift&Tabｷｰの補足
		if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
		begin
// <ESC>↓
//            MjsDispCtrl.MjsSetFocus(Self, 'MComboBox');
            ACControl := MComboBox;
            ACControl.SetFocus;
// <ESC>↑
            MComboBox.DroppedDown   :=  TRUE;
            Abort;
        end;
        // Tabｷｰの補足
        if ( Msg.CharCode = VK_TAB ) and ( sShift = [] ) then
		begin
			if ( ECode.Enabled = TRUE ) then
                MjsDispCtrl.MjsSetFocus(Self, 'ECode');
			Abort;
		end;
	end;

// +++++++++++++++++++++++++
//  詳細画面
// +++++++++++++++++++++++++
	if ( P_Syousai.Visible ) then
	begin
        if ( lvCompoName = 'MComboBox' ) then Exit;

        if ( lvCompoName = 'TreeView' ) then
		begin
			// TreeでのHOME、ENDでの動きの制御の為追加　hiro0706
			if   ( ECode.Enabled = FALSE  ) and
               ((( Msg.CharCode  = VK_TAB ) and ( sShift = [] )) or ( Msg.CharCode = VK_RETURN ))then
			begin
				MjsDispCtrl.MjsNextCtrl(Self);
				Abort;
			end
			else    Exit;
        end;

        if ( lvCompoName = 'MTab_Select' ) then Exit;

        if ( lvCompoName = 'MTab_SyousaiInfo' ) then
        begin
            if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then Abort
            //<050>  ↓ Enter・Tabの場合
            //else if ( Msg.CharCode = VK_RETURN ) then
            else if ( Msg.CharCode = VK_RETURN ) or (( Msg.CharCode = VK_TAB ) and ( sShift = [] )) then
            //<050>  ↑
            begin
                if ( MTab_SyousaiInfo.Items.Selected in [0,2] ) then
                begin
                    MjsDispCtrl.MjsNextCtrl(Self);
                    Abort;
                end
                else if ( MTab_SyousaiInfo.Items.Selected = 1 ) then
                begin
                    Abort;
                end
                else if ( MTab_SyousaiInfo.Items.Selected = 3 ) then
                begin
                    if ( EBun01.Visible ) or ( EBun02.Visible ) or
                       ( EBun03.Visible ) or ( EBun04.Visible ) or
                       ( EBun05.Visible ) or ( EBun06.Visible ) or
                       ( EBun07.Visible ) or ( EBun08.Visible ) or
                       ( EBun09.Visible ) or ( EBun10.Visible ) then
                    begin
                        MjsDispCtrl.MjsNextCtrl(Self);
                        Abort;
					end
                    else    Abort;
                end;
            end
            else Exit;
        end;
            
        // 取消ﾎﾞﾀﾝ
		if ( lvCompoName = 'B_SCancel' ) then
		begin
            if (( Msg.CharCode = VK_TAB   ) and ( sShift = [] )) or
               (( Msg.CharCode = VK_RIGHT ) and ( sShift = [] )) or
               (( Msg.CharCode = VK_DOWN  ) and ( sShift = [] )) then Abort;

{
			if ( Msg.CharCode = VK_TAB ) and ( sShift = [] ) then
			begin
				if ( ECode.Enabled ) then
				begin
                    MjsDispCtrl.MjsSetFocus(Self, 'ECode');
					Abort;
					Exit;
				end;
			end;
}
		end;

        // Escape/Endｷｰの補足
		if ( Msg.CharCode = VK_ESCAPE ) or ( Msg.CharCode = VK_END ) then
		begin
            if ( B_SUpDate.Enabled = TRUE ) then    //<008>
                MjsDispCtrl.MjsSetFocus(Self, 'B_SUpDate');
			Abort;
		end;

		if ( Msg.CharCode = VK_UP ) and ( sShift = [] ) then
		begin
			if ( lvCompoName = 'ECode' ) then Abort
			else if ( lvCompoName = 'ComboNumber1' ) or
					( lvCompoName = 'ComboNumber2' ) then Exit
			else
			begin
				MjsDispCtrl.MjsPrevCtrl(Self);
				Abort;
			end;
		end;

        // AltKeyが押された時
		if ( GetKeyState(VK_MENU) < 0 ) and ( Msg.CharCode = VK_DOWN ) then
			Exit;

        // Tabｷｰの補足
        if ( Msg.CharCode = VK_TAB   ) and ( sShift = [] ) then
        begin
            MjsDispCtrl.MjsNextCtrl(Self);
            Abort;
        end;

		if (Msg.CharCode = VK_DOWN) then
		begin
		//--- HIS0109 St -----
			if (Screen.ActiveControl = ComboNumber1) or
			   (Screen.ActiveControl = ComboNumber2) then
				exit
			else
            begin
		//--- HIS0109 Ed
				MjsDispCtrl.MjsNextCtrl(Self);
                Abort;
            end;
		end;

		if (Msg.CharCode = VK_LEFT) and (sShift = []) then	//	左ｶｰｿﾙが押された時
		begin
			if (Screen.ActiveControl = ERen) or (Screen.ActiveControl = ELName) or
				(Screen.ActiveControl = ESName) or (Screen.ActiveControl = EMainaName) then
			begin
				if (MjsChkCurTop(Screen.ActiveControl)) then	//	ｷｬﾚｯﾄの移動
				begin
					MjsDispCtrl.MjsPrevCtrl(Self);
					abort;
				end;
			end
			else
			begin
				if (Screen.ActiveControl = ECode) then
					abort
				else
				begin
					MjsDispCtrl.MjsPrevCtrl(Self);
					abort;
				end;
			end;
		end;

		if (Msg.CharCode = VK_RIGHT) and (sShift = []) then	//	右ｶｰｿﾙが押された時
		begin
			if (Screen.ActiveControl = ERen) or (Screen.ActiveControl = ELName) or
				(Screen.ActiveControl = ESName) or (Screen.ActiveControl = EMainaName) then
			begin
				if MjsChkCurEnd(Screen.ActiveControl) then		//	ｷｬﾚｯﾄの移動
				begin
					MjsDispCtrl.MjsNextCtrl(Self);
					abort;
				end;
			end
			else
			begin
				if (Screen.ActiveControl <> B_SCancel) then
				begin
					MjsDispCtrl.MjsNextCtrl(Self);
					abort;
				end;
			end;
		end;

		//	集計・仕訳入力Tabへ移動処理
		case MTab_Select.Items.Selected of
            // 実在
			0:
			begin
                // Shift&Tabｷｰの補足
				if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
				begin
                    // 先頭ﾌｨｰﾙﾄﾞ時はﾀﾌﾞへﾌｫｰｶｽを移動
                    if ( lvCompoName = 'ESeiZanCode'  ) or
                       ( lvCompoName = 'EShiwakeCode' ) or
                       ( lvCompoName = 'EBun01'       ) then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'MTab_SyousaiInfo');
						Abort;
					end
                    else if ( lvCompoName = 'MTab_SyousaiInfo' ) then Abort
                    else
                    begin
                        MjsDispCtrl.MjsPrevCtrl(Self);
					    Abort;
                    end;
				end;
			end;
            // 細目
			1:
			begin
                // Shift&Tabｷｰの補足
				if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
                begin
                    // 先頭ﾌｨｰﾙﾄﾞ時はﾀﾌﾞへﾌｫｰｶｽを移動
                    if ( lvCompoName = 'EKariCode' ) or
                       ( lvCompoName = 'EStartDate') or // <052>
                       ( lvCompoName = 'EBun01'    ) then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'MTab_SyousaiInfo');
						Abort;
					end
                    else if ( lvCompoName = 'MTab_SyousaiInfo' ) then Abort
                    else
                    begin
                        MjsDispCtrl.MjsPrevCtrl(Self);
					    Abort;
                    end;
                end;
			end;
            // 合計
			2:
			begin
                // Shift&Tabｷｰの補足
				if ( Msg.CharCode = VK_TAB ) and ( sShift = [ssShift] ) then
				begin
                    // 先頭ﾌｨｰﾙﾄﾞ時はﾀﾌﾞへﾌｫｰｶｽを移動
                    if ( lvCompoName = 'ESeiZanCode'  ) then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'MTab_SyousaiInfo');
						Abort;
					end
                    else if ( lvCompoName = 'MTab_SyousaiInfo' ) then Abort
                    else
                    begin
                        MjsDispCtrl.MjsPrevCtrl(Self);
					    Abort;
                    end;
				end;
			end;
		end;

    //--- HIS0041 START -----
		//	ｺｰﾄﾞを入力して連想にﾌｫｰｶｽがある時F8でｺﾋﾟｰDLGを呼べる様にする
		if (Screen.ActiveControl = ERen) and		//	簡略名称時
				((Msg.CharCode = VK_F8) and (sShift=[])) and
									(MTab_Select.Items.Selected <> 1) and (m_InpNewFlag = TRUE) then
		begin
			case MTab_Select.Items.Selected of
				0: fnCallCopyDlg(ZITSUZAI,SYOUSAI);
				2: fnCallCopyDlg(GOUKEI,SYOUSAI);
			end;
		end;
	//--- HIS0041 END -------

		//	簡略名称にﾌｫｰｶｽがある時かつF8が押された時
		if (((Msg.CharCode = VK_F8) and (sShift=[])) and
									(Screen.ActiveControl = ESName)) then
		begin
			if (ELName.Text <> '') then
				ESName.Text	:=	MjsCopy(ELName.Text,14);					//	正式名称を簡略名称へｺﾋﾟｰする。
		end;
	end;









//--- HIS0122 St -----
	// F3
	if (Msg.CharCode = VK_F3) and (sShift=[]) then
	begin
		if m_SearchInfo.iKmkCD = -1 then				// 検索対象ｺｰﾄﾞが存在しない時
			B_Search_Click(Self)				   		// 検索DLG表示
		else 											// 検索対象ｺｰﾄﾞが存在する時
			fnSearch();									// 検索
	end;
//--- HIS0122 Ed -----



//--- 評価用 -----
	// Ctrl+Alt+HOME
	if (sShift = [ssCtrl]) and (Msg.CharCode = VK_HOME) and (GetKeyState(VK_MENU) < 0) then
		fnTestSubUseChk();
//--- 評価用 -----
end;

//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							ﾌｫｰｶｽが移動する時
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.TreeViewExit(Sender: TObject);
begin
	m_SearchInfo.iKmkCD := -1;													//	HIS0122
	case MTab_N.Items.Selected of
		0:	DZitsuGrid.FocusedColumn	:=	1;
		1:	DSaimokuGrid.FocusedColumn	:=	1;
		2:	DGoukeiGrid.FocusedColumn	:=	1;
	end;
//	gbTreeFlag	:=	TRUE;	//	ﾂﾘｰでの選択したのかの判断(Grid時と見分ける為)
end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(合計科目)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	DmqData	:	TMQuery;
	Fld		:	TField;
	sLName	:	String;
    iRet	:	Integer;					// <063> ADD
    exNCode	: 	Extended;					// <063> ADD
	exCNCode: 	Extended;					// <063> ADD
begin

	if ( NewColumn = 0 ) or ( NewColumn = 6 ) then
	begin
        CanChange   :=  FALSE;
		Exit;
	end;

	if ( Column = 1 ) then        //  Column 1 = ｺｰﾄﾞ
	begin
		if ( DSourceGou.DataSet.FieldByName('GCode').IsNull        ) or
           ( DSourceGou.DataSet.FieldByName('GCode').AsInteger = 0 ) then
		begin
			CanChange := FALSE;
			Exit;
		end
		else
		begin
			DmqData := TMQuery.Create( Self );					        //	MQueryの構築
		    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

			Fld := DSourceGou.DataSet.FieldByName('GCode');
			with DmqData do
			begin
				Close;
				SQL.Clear;
				SQL.Add('SELECT                     ');
				SQL.Add('    GCode                  ');	//	外部ｺｰﾄﾞ
				SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
                SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
//				SQL.Add('  AND SumKbn    = 1        ');	//	実在/合計区分(1:合計)
				SQL.Add('  AND GCode     = :G_Code  ');	//	外部ｺｰﾄﾞ

				ParamByName('G_Code').AsInteger := DSourceGou.DataSet.FieldByName('GCode').AsInteger;

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					DmqData.Close;
					DmqData.Free;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
					if ( MemGou.State in [dsInsert] ) then
					begin
						//	同一コードが存在してます
						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
						MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
			    		MjsMessageBoxEx(AOwner, // <005>
                                        MjsMsgRec.sMsg,
                                        MjsMsgRec.sTitle,
                                        MjsMsgRec.icontype,
                                        MjsMsgRec.btntype,
                                        MjsMsgRec.btndef,
                                        MJsMsgRec.LogType
                                       );

						if ( DGoukeiGrid.State <> tsEditing ) then
							Fld.FocusControl;

						abort;
					end
				end;
			end;
			DmqData.Close;
			DmqData.Free;

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin							// ただの移動はｽﾙｰ
				if MemGou.State <> dsInsert then
                begin
                	Exit;
                end;

                // -----<077> Add-St-----
				SessionPractice(C_ST_PROCESS);

				try
				// -----<077> Add-Ed-----

			    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
				MDataModule.BeginTran(dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);

                // 会社関連付処理
				iRet := fnCorpRelation(MKBN_KAMOKU, MemGou.FieldByName('GCode').AsInteger, '', SUMKBN_GOUKEI,
										exNCode, exCNCode);
                case iRet of
                    0:
					begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
						// →親にinsert
                        // ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback (dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                    end;
                    1:
					begin
                        // 正常に関連付が行えた場合は、画面の再描画を行う
						// ﾂﾘｰ作成
						if not MakeTreeRecord(MKBN_KAMOKU, exnCode, exCNCode) then
						begin
	                        // ﾛｰﾙﾊﾞｯｸ
							MDataModule.Rollback (dbCorp_Select);
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
	                        CanChange := False;
                            Abort;
						end;
                        // ｺﾐｯﾄ
						MDataModule.Commit(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_COMMIT);
                        MemGou.Last;
                    end;
                    2:
					begin
                        // 会社関連付をｷｬﾝｾﾙ
                        // ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback (dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                        CanChange := False;
                        Abort;
                    end;
                    -9:
					begin
                        // 例外ｴﾗｰ
                        // ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback (dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                        CanChange := False;
                        Abort;
                    end;
                end;

                // -----<077> Add-St-----
				finally
					SessionPractice(C_ED_PROCESS);
				end;
				// -----<077> Add-Ed-----

			end;
// <063> ADD end
        end;
    end;

	//	正式名称を簡略へｺﾋﾟｰ	※文字表示での問題あり！！
	if ( Column = 3 ) then        //  Column 3 = 正式名称
	begin	//	正式名称が空白ではなく、簡略が空白時
		if (( DSourceGou.DataSet.FieldByName('GLongName').AsString) <> '' ) and
           (( DSourceGou.DataSet.FieldByName('GSName')   .AsString) =  '' ) then
		begin
			MemGou.Open;
			MemGou.Edit;
			sLName	:=	DSourceGou.DataSet.FieldByName('GLongName').AsString;
			MemGou.FieldByName('GSName').AsString	:=	MjsCopy(sLName,14);	//	正式名称を簡略名称へｺﾋﾟｰする。
		end;
	end;

end;

//************************************************************************
//*		Component		:	DZitsuGrid ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(実在科目)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	DmqData	:	TMQuery;
	Fld		:	TField;
	sLName	:	String;
    iRet	:	Integer;					// <063> ADD
    exNCode	: 	Extended;					// <063> ADD
	exCNCode: 	Extended;					// <063> ADD
begin
	//	初期処理
	sLName	:=	'';

	if ( NewColumn = 0 ) or ( NewColumn = 6 ) or ( NewColumn = 8 )then
	begin
        CanChange   :=  FALSE;
		Exit;
	end;

	if ( Column = 1 ) then        //  Column 1 = ｺｰﾄﾞ
	begin
		if ( DSourceZitsu.DataSet.FieldByName('Code').IsNull        ) or
           ( DSourceZitsu.DataSet.FieldByName('Code').AsInteger = 0 ) then
//		if (DSourceZitsu.DataSet.FieldByName('Code').IsNull) then
		begin
			CanChange := FALSE;
			Exit;
		end
		else
		begin
			DmqData := TMQuery.Create( Self );					        //	MQueryの構築
		    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

			Fld := DSourceZitsu.DataSet.FieldByName('Code');
			with DmqData do
			begin
				Close;
				SQL.Clear;
				SQL.Add('SELECT                     ');
				SQL.Add('    GCode                  ');	//	外部ｺｰﾄﾞ
				SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
                SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('  AND GCode     = :G_Code  ');	//	外部ｺｰﾄﾞ

				ParamByName('G_Code').AsInteger := DSourceZitsu.DataSet.FieldByName('Code').AsInteger;

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					DmqData.Close;
					DmqData.Free;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
					if ( MemZitsu.State in [dsInsert] ) then
					begin
						//	同一コードが存在してます
						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
						MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
			    		MjsMessageBoxEx(AOwner, // <005>
                                        MjsMsgRec.sMsg,
										MjsMsgRec.sTitle,
                                        MjsMsgRec.icontype,
                                        MjsMsgRec.btntype,
                                        MjsMsgRec.btndef,
                                        MJsMsgRec.LogType
                                       );

						if ( DZitsuGrid.State <> tsEditing ) then
							Fld.FocusControl;

						abort;
					end;
				end;
			end;
			DmqData.Close;
			DmqData.Free;
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin							// ただの移動はｽﾙｰ
            	if MemZitsu.State <> dsInsert then
                begin
                	Exit;
                end;

                // -----<077> Add-St-----
				SessionPractice(C_ST_PROCESS);

				try
				// -----<077> Add-Ed-----

			    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
				MDataModule.BeginTran(dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);

                // 会社関連付処理
				iRet := fnCorpRelation(MKBN_KAMOKU, MemZitsu.FieldByName('Code').AsInteger, '', SUMKBN_JITUZAI,
										exNCode, exCNCode);
				case iRet of
                    0:
					begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
						// →親にinsert
						// ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                    end;
                    1:
					begin
                        // 正常に関連付が行えた場合は、画面の再描画を行う
						// ﾂﾘｰ作成
						if not MakeTreeRecord(MKBN_KAMOKU, exNCode, exCNCode) then
						begin
							// ﾛｰﾙﾊﾞｯｸ
							MDataModule.Rollback(dbCorp_Select);
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
	                        CanChange := False;
	                        Abort;
						end;
						// ｺﾐｯﾄ
						MDataModule.Commit(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_COMMIT);
                        MemZitsu.Last;
                    end;
                    2:
					begin
						// 会社関連付をｷｬﾝｾﾙ
						// ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                        CanChange := False;
                        Abort;
                    end;
                    -9:
					begin
                        // 例外ｴﾗｰ
						// ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                        CanChange := False;
                        Abort;
                    end;
                end;

                // -----<077> Add-St-----
				finally
					SessionPractice(C_ED_PROCESS);
				end;
				// -----<077> Add-Ed-----

			end;
// <063> ADD end
		end;
	end;

	//	正式名称を簡略へｺﾋﾟｰ	※文字表示での問題あり！！
	if ( Column = 3 ) then        //  Column 3 = 正式名称
	begin	//	正式名称が空白ではなく、簡略が空白時
		if (( DSourceZitsu.DataSet.FieldByName('LongName').AsString) <> '' ) and
           (( DSourceZitsu.DataSet.FieldByName('SName')   .AsString) =  '' ) then
		begin
			MemZitsu.Open;
			MemZitsu.Edit;
			sLName	:=	DSourceZitsu.DataSet.FieldByName('LongName').AsString;
			MemZitsu.FieldByName('SName').AsString	:=	MjsCopy(sLName,14);	//	正式名称を簡略名称へｺﾋﾟｰする。
		end;
	end;

	if ( NewColumn = 6 ) or ( NewColumn = 8 )then	//	性格と分析の名称にﾌｫｰｶｽを移動させない
		CanChange := FALSE;

	if ( gbChangeFlag = TRUE ) then
	begin
		gbChangeFlag	:=	FALSE;
		Exit;
    end;

	if ( Column = 5 ) then
	begin
		if ( DSourceZitsu.DataSet.FieldByName('SeikakuData').AsInteger = 0 ) then
		begin
			MemZitsu.Open;
			MemZitsu.Edit;
			MemZitsu.FieldByName('SeikakuData').AsInteger	:=	0;
		end;
	end;

	if ( Column = 7 ) then
	begin
      BunsekiCheck()		//	HIS0002
	end;

end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(細目科目)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	DmqData	    :	TMQuery;
	Fld		    :	TField;
	Pos		    :	Integer;		//	SPASEまでの桁数
	iGCode	    :	Integer;
    sSaiCD	    :   String;
	sLName	    :	String;
    strFormat   :   String;
    iRet		:	Integer;		// <063> ADD
	exNCode		: 	Extended;		// <063> ADD
	exCNCode	: 	Extended;		// <063> ADD
    strSubCode	:	String;			// <063> ADD
    wkRec		:	^TaikeiRec;		// <063> ADD
begin

	if ( NewColumn = 0 ) then
	begin
        CanChange   :=  FALSE;
		Exit;
	end;

	if ( Column = 1 ) then        //  Column 1 = ｺｰﾄﾞ
	begin
		if ( DSourceSai.DataSet.FieldByName('SCode').IsNull ) then
		begin
			CanChange := FALSE;
//hiro			abort;
			Exit;
		end
		else
		begin
            sSaiCD  :=  TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SCode').AsString;

//<089> ADD St
            // 空白は認めない
            if Trim(sSaiCD) = '' then
            begin
                CanChange := FALSE;
                Exit;
            end;
//<089> ADD Ed
			DmqData := TMQuery.Create( Self );					        //	MQueryの構築
		    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

			//	加算先ｺｰﾄﾞ
			Pos		:=	MJSHanPos(' ', MTab_N.BorderCaption);				//	先頭からSPACEまでの桁数COUNT
			iGCode	:=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));	//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ

			//	細目ｺｰﾄﾞ0(諸口)かつ細目件数が0件の時
// <013>            if ((DSourceSai.DataSet.FieldByName('SCode').AsString = '') and

//<094>↓
{  MLの名残の処理、諸口は、ダイアログで作成するため不要
　　ENTERキーや→キーで横移動ができないため 下記のチェックは不要


            if ((DSourceSai.DataSet.FieldByName('SCode').AsString = '0') and    // <013>
			   ( Syokuchi(iGCode, TRUE) )) then
			begin

				CanChange := FALSE;
				Abort;
				DmqData.Close;
				DmqData.Free;
				Exit;

			end
		//--- HIS0073 START -----
// <013>			else if ( MemSai.State in [dsInsert] ) and ( DSourceSai.DataSet.FieldByName('SCode').AsString = '' )
			else if ( MemSai.State in [dsInsert] ) and ( DSourceSai.DataSet.FieldByName('SCode').AsString = '0' )   // <013>
																				and ( Syokuchi(iGCode,FALSE) ) then
			begin
				CanChange := FALSE;
				Abort;
				DmqData.Close;
				DmqData.Free;
				Exit;
			end
			else
		//--- HIS0073  END  -----
			begin
} //<094>↑
				Fld := DSourceSai.DataSet.FieldByName('SCode');
				with DmqData do
				begin
					Close;
					SQL.Clear;
					SQL.Add('SELECT                     ');
					SQL.Add('    GCode                  ');	//	外部ｺｰﾄﾞ
					SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
                    SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
					SQL.Add('  AND MasterKbn = 2        ');	//	ﾏｽﾀ区分(2:細目科目)
					SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
					SQL.Add('  AND GCode     = :G_Code  ');	//	外部ｺｰﾄﾞ
					SQL.Add('  AND SubCode   = :SaiCode ');	//	細目ｺｰﾄﾞ

					ParamByName('G_Code').AsInteger		:=	iGCode;
                    if ( wkKmk.SaimokukZoku <= 1 ) then
                        ParamByName('SaiCode').AsString	:=	Format('%.16d',[StrToInt64(Trim(DSourceSai.DataSet.FieldByName('SCode').AsString))])
                    else
    					ParamByName('SaiCode').AsString	:=	DSourceSai.DataSet.FieldByName('SCode').AsString;

					//	ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqData);
						DmqData.Close;
						DmqData.Free;
						Exit;
					end;

					if ( EOF <> TRUE ) then
					begin
						if ( MemSai.State in [dsInsert] ) then
						begin
							//	同一コードが存在してます
							ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
							MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
				    		MjsMessageBoxEx(AOwner, // <005>
                                            MjsMsgRec.sMsg,
                                            MjsMsgRec.sTitle,
                                            MjsMsgRec.icontype,
                                            MjsMsgRec.btntype,
                                            MjsMsgRec.btndef,
                                            MJsMsgRec.LogType
                                           );

							if ( DSaimokuGrid.State <> tsEditing ) then
								Fld.FocusControl;

							Abort;
						end;
					end;
				end;

                DmqData.Close;
			    DmqData.Free;

                // 有効文字のﾁｪｯｸ(ﾌﾘｰ属性時) <018>
                if ( wkKmk.SaimokukZoku = 2 ) then
				begin
                    if ( MemSai.State in [dsInsert] ) then
                    begin
                        if	( not JNTMASERRORCODECHECK (DSourceSai.DataSet.FieldByName('SCode').AsString, m_strValidCharacters) ) then
                        begin
                            Beep ();
                            ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,21);
                            MJSMessageBoxEx(AOwner, // <005>
                                            MjsMsgRec.sMsg,
                                            m_pRec^.m_ProgramName,
                                            MjsMsgRec.icontype,
                                            MjsMsgRec.btntype,
                                            MjsMsgRec.btndef,
                                            MjsMsgRec.LogType
                                           );

                            if ( DSaimokuGrid.State <> tsEditing ) then
								Fld.FocusControl;

							Abort;
                        end;
                    end;
 			    end;
        //    end;

		//	HIS0034
			if ( MemSai.State in [dsInsert] ) and ( m_GridEndEscFlag = FALSE ) then
			begin
				if ( fnSwkCheck(iGCode) = FALSE ) then
				begin
					CanChange := FALSE;
					Abort;
				end;
			end;
			m_GridEndEscFlag := FALSE;
		//*********
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin							// ただの移動はｽﾙｰ
            	if MemSai.State <> dsInsert then
                begin
                	Exit;
                end;

                // -----<077> Add-St-----
				SessionPractice(C_ST_PROCESS);

				try
				// -----<077> Add-Ed-----

                wkRec := TreeView.Selected.Data;

			    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
				MDataModule.BeginTran(dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);

                // 科目別補助ｺｰﾄﾞﾌｫｰﾏｯﾄ
                if ( wkKmk.SaimokukZoku <= 1 ) then
                begin
                    strSubCode := Format('%.16d',[StrToInt64(Trim(DSourceSai.DataSet.FieldByName('SCode').AsString))]);
                end
                else
                begin
  					strSubCode := DSourceSai.DataSet.FieldByName('SCode').AsString;
                end;

                // 会社関連付処理
				iRet := fnCorpRelation(MKBN_SAIMOKU, wkRec^.GCode,
										strSubCode,
                                        SUMKBN_JITUZAI,
										exNCode, exCNCode);
                case iRet of
                    0:
					begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
						// →親にinsert
						// ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                    end;
                    1:
					begin
                        // 正常に関連付が行えた場合は、画面の再描画を行う
						// ﾂﾘｰ作成
						if not MakeTreeRecord(MKBN_SAIMOKU, exNCode, exCNCode) then
						begin
							// ﾛｰﾙﾊﾞｯｸ
							MDataModule.Rollback(dbCorp_Select);
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
	                        CanChange := False;
	                        Abort;
						end;
						// ｺﾐｯﾄ
						MDataModule.Commit(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_COMMIT);
                        MemSai.Last;
                    end;
                    2:
					begin
                        // 会社関連付をｷｬﾝｾﾙ
						// ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                        CanChange := False;
                        Abort;
                    end;
                    -9:
					begin
                        // 例外ｴﾗｰ
						// ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback(dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                        CanChange := False;
						Abort;
                    end;
                end;

                // -----<077> Add-St-----
				finally
					SessionPractice(C_ED_PROCESS);
				end;
				// -----<077> Add-Ed-----

			end;
// <063> ADD end
        end;

        // 属性対応
        MemSai.Edit;
    	// 数値(前0あり)
    	if ( wkKmk.SaimokukZoku = 1 ) then
    	begin
    		strFormat := '%.' + IntToStr (wkKmk.SaimokuKeta) + 'd';
    		sSaiCD    := Format(strFormat,[StrToInt64(Trim(sSaiCD))]);
    		MemSai.FieldByName('SCode').AsString := sSaiCD;
    	end;

    end;

	//	正式名称を簡略へｺﾋﾟｰ	※文字表示での問題あり！！
	if ( Column = 3 ) then        //  Column 3 = 正式名称
	begin	//	正式名称が空白ではなく、簡略が空白時
		if (( DSourceSai.DataSet.FieldByName('SLongName').AsString) <> '' ) and
           (( DSourceSai.DataSet.FieldByName('SSName')   .AsString) =  '' ) then
		begin
			MemSai.Open;
			MemSai.Edit;
			sLName	:=	DSourceSai.DataSet.FieldByName('SLongName').AsString;
			MemSai.FieldByName('SSName').AsString	:=	MjsCopy(sLName,14);	//	正式名称を簡略名称へｺﾋﾟｰする。
		end;
	end;

end;

//************************************************************************
//*		Component		:	MI_Copy ( TMenuItem )
//*							コピー
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_CopyClick(Sender: TObject);
var
//	cNode	:	TTreeNode;					// <063> DEL
//	wkRec	:	^TaikeiRec;                 // <063> DEL
	iCount	:	Integer;
	iLoop	:	Integer;
begin
	//	初期処理
	iCount	:=	0;

    grCopyPaste.NCode       :=  grTaikei^.NCode;
    grCopyPaste.CNCode      :=  grTaikei^.CNCode;
	grCopyPaste.GCode		:=	grTaikei^.GCode;
    grCopyPaste.SubCode     :=  grTaikei^.SubCode;
	grCopyPaste.Kbn			:=	grTaikei^.Kbn;
	grCopyPaste.KoteiKbn	:=	grTaikei^.KoteiKbn;
	grCopyPaste.MasKbn		:=	grTaikei^.MasKbn;
	grCopyPaste.Name		:=	grTaikei^.Name;
	grCopyPaste.AddKbn		:=	grTaikei^.AddKbn;
    grCopyPaste.Syokuchi    :=  grTaikei^.Syokuchi;

	if (grOya_Taikei <> nil) then
		grMotoOya.GCode			:=	grOya_Taikei^.GCode;

	if (grTaikei^.MasKbn <> 2) then		//	細目でなければ
		m_CopyFlag := TRUE;				//	ｺﾋﾟｰが行われたら貼り付ける

	//	2重加算ﾁｪｯｸ用配列の初期化(損益科目ｺｰﾄﾞが0の為ありえない7桁のMAXの数値を入れている)	HIS0013
	for iLoop := 1 to 20 do
	begin
//		aDoubleAddCheck[COPYMOTO][iLoop]	:=	9999999;
		aDoubleAddCheck[COPYMOTO][iLoop]	:=	-1;		//<086>
	end;

	//	2重加算ﾁｪｯｸ(ｺﾋﾟｰ元の親ｺｰﾄﾞ取得)			HIS0013
{	//HIS0107	取得方法変更
	cNode	:=	TreeView.Selected.Parent;
	while cNode <> nil do
	begin
		wkRec	:=	cNode.Data;
		iCount	:=	iCount + 1;
		aDoubleAddCheck[COPYMOTO][iCount]	:=	wkRec.Code;
		cNode	:=	cNode.Parent;
	end;
}
	if m_KouekiKbn = 0 then		// 一般法人の時									//HIS0113(if文追加)
		fnGetSystem(ACCESS_COPY,grCopyPaste.GCode,0)		// ｺﾋﾟｰ対象と同じｺｰﾄﾞの体系を全て取得
//--- HIS0113 St ----------
	else
        fnGetParentInfo(grCopyPaste.NCode);				// Drag対象ｺｰﾄﾞの親情報を全て取得  
//--- HIS0113 Ed ----------

end;

//************************************************************************
//*		Component		:	MI_Paste ( TMenuItem )
//*							貼り付け
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_PasteClick(Sender: TObject);
var
	wkRec			:	^TaikeiRec;
	WorkRec			:	^TaikeiRec;
	PasteRec		:	^TaikeiRec;
	iExNCodeParent	:	Extended;
	iExCodeParent	:	Integer;
	cNode			:	TTreeNode;
	wkNode			:	TTreeNode;
	workNode		:	TTreeNode;
	iSelect			:	Integer;		//	Nodeの表示方法
	DummyFlag		:	Boolean;
	RollBackFlag	:	Boolean;
//	iCount			:	Integer;		// <063> DEL
	iLoop			:	Integer;
//	iLoop2			:	Integer;		// <063> DEL
begin
	//	初期化処理
	wkNode			:=	nil;
	RollBackFlag	:=	FALSE;
//	iCount			:=	0;				// <063> DEL

// <063> DEL ↓に移動
//	MDataModule.BeginTran (dbCorp_Select);										//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

    if  (grOya_Taikei = Nil) then
    begin
        iExNCodeParent := 0;
        iExCodeParent  := 0;
    end
    else
    begin
        iExNCodeParent := grOya_Taikei^.NCode;
        iExCodeParent  := grOya_Taikei^.GCode;
    end;


	// 公益法人の時は２重加算ﾁｪｯｸを行わない
	if m_KouekiKbn = 0 then		// 一般法人の時									//HIS0113(if文追加)
	begin
		if fnDoubleAddCheck(ACCESS_COPY,PasteNode) = -1 then exit;				// 2重加算ﾁｪｯｸ処理	//HIS0107
	end
//--- HIS0113 St ----------
	else
	begin
		if fnSameParentCheck(ACCESS_COPY,PasteNode) = -1 then exit;				// 同一親ﾁｪｯｸ処理
	end;
//--- HIS0113 Ed ----------

//--- HIS0107 St -----
{※関数にした為コメント
	//	2重加算ﾁｪｯｸ用配列の初期化(損益科目ｺｰﾄﾞが0の為ありえない7桁のMAXの数値を入れている)	HIS0013
	for iLoop := 1 to 20 do
	begin
		aDoubleAddCheck[COPYSAKI][iLoop]	:=	9999999;
	end;

	//	2重加算ﾁｪｯｸ(ｺﾋﾟｰ元の親ｺｰﾄﾞ取得)			HIS0013
	cNode	:=	PasteNode;
//	cNode	:=	TreeView.Selected;
	wkRec	:=	cNode.Data;
	if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then	//	ｺﾋﾟｰ先が実在時
    	cNode	:=	cNode.Parent;
	while cNode <> nil do
	begin
		wkRec	:=	cNode.Data;
		iCount	:=	iCount + 1;
		aDoubleAddCheck[COPYSAKI][iCount]	:=	wkRec.Code;
		cNode	:=	cNode.Parent;
	end;

	for iLoop := 1 to 20 do												//	ｺﾋﾟｰ先の配列
	begin
		if (aDoubleAddCheck[COPYSAKI][iLoop] = 9999999) then			//	ｺﾋﾟｰ先Data終了(初期値で設定されている数値)
			break;
		for iLoop2 := 1 to 20 do										//	ｺﾋﾟｰ元の配列
		begin
			if (aDoubleAddCheck[COPYMOTO][iLoop2] = 9999999) then		//	ｺﾋﾟｰ元Data終了(初期値で設定されている数値)
				break;
			//	ｺﾋﾟｰ先の親ｺｰﾄﾞの中にｺﾋﾟｰ元の親ｺｰﾄﾞと同一のｺｰﾄﾞがあった時(2重加算時)
			if (aDoubleAddCheck[COPYSAKI][iLoop] = aDoubleAddCheck[COPYMOTO][iLoop2]) then
			begin
				//	･･･することができません
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
				MjsMessageBoxEx(AOwner, // <005>
                                '２重加算の為コピー' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
				exit;
			end;
		end;
	end;
}
//--- HIS0107 Ed -----

	// -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----


	MDataModule.BeginTran (dbCorp_Select);				// ﾄﾗﾝｻﾞｸｼｮﾝの開始 			<063> ADD ↑から移動
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);			// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 	<063> ADD

	iSelect	:=	InsertTreeRecord(grCopyPaste.GCode,grMotoOya.GCode,grCopyPaste.NCode,grMotoOya.NCode,grCopyPaste.Kbn,grCopyPaste.SubCode,
    							 grTaikei^.GCode,iExCodeParent,grTaikei^.NCode,iExNCodeParent,grTaikei^.SubCode,grTaikei^.Kbn,
                    			 ACCESS_PASTE,grCopyPaste.MasKbn,grTaikei.MasKbn,
								 grCopyPaste.AddKbn,RollBackFlag);

	if (RollBackFlag) then	//	RollBack時TRUE
// <063> MOD start
//		exit;
	begin
		ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
		Exit;
	end;
// <063> MOD end

	//	挿入元ﾁｪｯｸ
	case iSelect of
		ADD:	wkNode	:=	PasteNode;
		INSERT:	wkNode	:=	PasteNode.Parent;
// <063> MOD start
//		99:	exit;								//	同一ｺｰﾄﾞがｺﾋﾟｰ側に存在するとき
		99:										//	同一ｺｰﾄﾞがｺﾋﾟｰ側に存在するとき
		begin									// 子会社のﾛｰﾙﾊﾞｯｸ
			MDataModule.Rollback (dbCorp_Select);
												// 親会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
			Exit;
		end;
// <063> MOD end
	end;

	//	ｺﾋﾟｰNodeの表示処理
	New(wkRec);
    wkRec.NCode     :=  grCopyPaste.NCode;
    wkRec.CNCode    :=  grCopyPaste.CNCode;
	wkRec.GCode		:=	grCopyPaste.GCode;
    wkRec.SubCode   :=  grCopyPaste.SubCode;
	wkRec.Kbn		:=	grCopyPaste.Kbn;
	wkRec.KoteiKbn	:=	grCopyPaste.KoteiKbn;
	wkRec.MasKbn	:=	grCopyPaste.MasKbn;
	wkRec.Name		:=	grCopyPaste.Name;
	wkRec.AddKbn	:=  grCopyPaste.AddKbn;
	wkRec.ChildKbn	:=	grCopyPaste.ChildKbn;
	wkRec.NotAdd	:=	grCopyPaste.NotAdd;
    wkRec.Syokuchi  :=  grCopyPaste.Syokuchi;
	cNode := TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,grCopyPaste.Name),wkRec);	//	HIS0012
	if (grCopyPaste.MasKbn = 1) and (grCopyPaste.Kbn = 1) then			//	合計
	begin
		if (grCopyPaste.AddKbn = 0) then
		begin
		    cNode.ImageIndex 	:= 0;
			cNode.SelectedIndex := 1;
		end
		else
		begin
		    cNode.ImageIndex 	:= 4;
			cNode.SelectedIndex := 5;
		end;
		MakeKodomo(cNode,grCopyPaste.NCode,0);
	end
	else if (grCopyPaste.MasKbn = 1) and (grCopyPaste.Kbn = 0) then		//	実在
	begin
		if (grCopyPaste.AddKbn = 0) then
		begin
		    cNode.ImageIndex 	:= 2;
			cNode.SelectedIndex := 8;
		end
		else
		begin
		    cNode.ImageIndex 	:= 6;
			cNode.SelectedIndex := 9;
		end;
        
		MakeSaimokuKdomo(cNode,grCopyPaste.NCode);		                        // 細目子供作成処理
	end;

//*****
	PasteRec := wkNode.Data;
	//	同一ｺﾋﾟｰ先への追加処理
	for iLoop := 0 to TreeView.Items.Count-1 do
    begin
		cNode	:=	TreeView.Items[iLoop];
		if (cNode <> wkNode) then
		begin
			wkRec	:=	cNode.Data;
			if wkRec.GCode = PasteRec.GCode then
			begin
				if (grCopyPaste.MasKbn = 1) and (grCopyPaste.Kbn = 0) then		//	実在時
				begin
					New(WorkRec);
					WorkRec.NCode       :=  grCopyPaste.NCode;
                    WorkRec.CNCode      :=  grCopyPaste.CNCode;
                	WorkRec.GCode	    :=	grCopyPaste.GCode;
                    WorkRec.SubCode     :=  grCopyPaste.SubCode;
					WorkRec.Kbn			:=	grCopyPaste.Kbn;
					WorkRec.KoteiKbn	:=	grCopyPaste.KoteiKbn;
					WorkRec.MasKbn		:=	grCopyPaste.MasKbn;
					WorkRec.Name		:=	grCopyPaste.Name;
					WorkRec.AddKbn		:=  grCopyPaste.AddKbn;
					WorkRec.ChildKbn	:=	grCopyPaste.ChildKbn;
					WorkRec.NotAdd		:=	grCopyPaste.NotAdd;
                    WorkRec.Syokuchi    :=  grCopyPaste.Syokuchi;
					workNode := TreeView.Items.AddChildobject(cNode,MakeDspString(WorkRec.GCode,WorkRec.Name),WorkRec);
					if (grCopyPaste.AddKbn = 0) then
					begin
					    workNode.ImageIndex    := 2;
						workNode.SelectedIndex := 8;
					end
					else
					begin
			    		workNode.ImageIndex    := 6;
						workNode.SelectedIndex := 9;
					end;
                    MakeSaimokuKdomo(cNode,grCopyPaste.NCode);		            // 細目子供作成処理
				end
				else if (grCopyPaste.MasKbn = 1) and (grCopyPaste.Kbn = 1) then	//	合計時
				begin
					New(WorkRec);
                    WorkRec.NCode       :=  grCopyPaste.NCode;
                    WorkRec.CNCode      :=  grCopyPaste.CNCode;
                	WorkRec.GCode	    :=	grCopyPaste.GCode;
                    WorkRec.SubCode     :=  grCopyPaste.SubCode;
					WorkRec.Kbn			:=	grCopyPaste.Kbn;
					WorkRec.KoteiKbn	:=	grCopyPaste.KoteiKbn;
					WorkRec.MasKbn		:=	grCopyPaste.MasKbn;
					WorkRec.Name		:=	grCopyPaste.Name;
					WorkRec.AddKbn		:=  grCopyPaste.AddKbn;
					WorkRec.ChildKbn	:=	grCopyPaste.ChildKbn;
					WorkRec.NotAdd		:=	grCopyPaste.NotAdd;
                    WorkRec.Syokuchi    :=  grCopyPaste.Syokuchi;
					workNode := TreeView.Items.AddChildobject(cNode,MakeDspString(WorkRec.GCode,WorkRec.Name),WorkRec);
					MakeKodomo(workNode,grCopyPaste.NCode,gDspLevel);
					if (grCopyPaste.AddKbn = 0) then
					begin
		    			workNode.ImageIndex    := 0;
						workNode.SelectedIndex := 1;
					end
					else
					begin
					    workNode.ImageIndex    := 4;
						workNode.SelectedIndex := 5;
					end;
				end;
			end;
		end;
	end;
//*****
	wkNode.Selected := TRUE;
	GridAgainDsp(POPUP,0);

	//	挿入先が実在で挿入元が細目の時
	if (grTaikei^.MasKbn = 1) and (grTaikei^.Kbn = 0) and (grCopyPaste.MasKbn = 2) then
	begin
		DummyFlag	:=	FALSE;
		if (KbnCheck(grTaikei^.NCode,DummyFlag,FALSE,OTHER)) then	//	RollBack時TRUE
// <063> MOD start
//			exit;
		begin
												// 親会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
			Exit;
		end;
// <063> MOD end
	end;

	MDataModule.Commit (dbCorp_Select);								//	ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);							// 親会社DBもｺﾐｯﾄ <063> ADD

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	m_CopyFlag		 := FALSE;
	MI_Paste.Enabled :=	FALSE;

	gbKmkTree2Flag := TRUE;		//	HIS0003	HIS0049
end;

//************************************************************************
//*		Component		:	MI_Delete ( TMenuItem )
//*							ﾂﾘｰからの削除
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//*		Comment			:	2007/04/13 K.Katou(PRIME)
//*							この関数を流用してMI_DeleteClick_GrpChild関数作成(子会社用)。
//*							ｸﾞﾙｰﾌﾟ会計採用なしまたは親会社の場合はMI_DeleteClickで処理する
//************************************************************************
procedure TJNTCRP009001f.MI_DeleteClick(Sender: TObject);
var
	wkRec		    :	^TaikeiRec;
	MoveRec		    :	^TaikeiRec;
	DelRec		    :	^TaikeiRec;
	MoveNode	    :	TTreeNode;
	DelNode		    :	TTreeNode;
	CNode		    :	TTreeNode;
	DmqDel		    :	TMQuery;
	DmqData		    :	TMQuery;
	iGCode	    	:	Integer;
	iLoop		    :	Integer;
	iMotoNCode	    :	Extended;	    //	加算元内部ｺｰﾄﾞ
	iEntNo		    :	Integer;
	iKaGeCode	    :	Integer;
	iKmkGCode	    :	Integer;
	iKamokuNCode	:	Extended;
	iCount		    :	Integer;
	iNCode2		    :	Extended;
	SumKbn		    :	Byte;			//	実在/合計区分
	DummyFlag	    :	Boolean;
	sMsgName	    :	String;
	bSyokuDel	    :	Boolean;
	iNCode		    :	Extended;
	iCNCode			:	Extended;		// <054>
    exCNCode        :   Extended;       // <056>
    iSyokuchiKbn    :   Integer;        // 諸口区分
    iCode           :   String;         // DBﾘﾝｸ用細目外部ｺｰﾄﾞ
    iCode2          :   String;         // 表示用細目外務ｺｰﾄﾞ
    strErr          :   String;         // <CHK>
    strMsg          :   String;         // <CHK>
	bUse			:	Boolean;		// <063>
    deleteQuestionMessage: String; 		//<113>ADD
begin
    MoveNode := Nil;

// <063> ADD start
											// 子会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
	begin
		MI_DeleteClick_GrpChild();			// 子会社用の削除処理
		Exit;
    end;
// <063> ADD end

	//	初期化処理
	iEntNo		:=	0;
	iNCode2		:=	0;
	SumKbn		:=	0;
	sMsgName	:=	'';
	bSyokuDel	:=	FALSE;
	iNCode		:=  -1;
	iCNCode		:=  -1;//<054>
   	iKamokuNCode := 0; //<063> ADD

	DmqDel := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );		//	DBとMQueryの接続

    // 細目外部ｺｰﾄﾞ属性対応
    iCode	    :=	fnSaimokuSetAttr(1,grTaikei.SubCode,
                                       grTaikei.CodeAttr,
                                       grTaikei.CodeDigit);     //  細目外部ｺｰﾄﾞ(DBﾘﾝｸ用)
    iCode2      :=  fnSaimokuSetAttr(0,grTaikei.SubCode,
                                       grTaikei.CodeAttr,
                                       grTaikei.CodeDigit);     //  細目外部ｺｰﾄﾞ(表示用)

	if ( grTaikei.MasKbn = 2 ) then
//    fnSubNCodeCheck(grOya_Taikei.GCode,iCode,iNCode,iSyokuchiKbn);
      fnSubNCodeCheck(grOya_Taikei.GCode,iCode,iNCode,iCNCode,iSyokuchiKbn);//<054>

	sMsgName :=	grTaikei.Name;
	ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
// <026> 「当該ﾏｽﾀにﾃﾞｰﾀが存在している場合、削除すると管理表に不整合が生ずる恐れがあります。
//          削除してもよろしいですか？」
//	if ( MjsMessageBoxEx(AOwner,    // <005>
//                         '''' + sMsgName + '''' + 'を' + MjsMsgRec.sMsg,
// <113>ADD↓
	if iSyokuchiKbn = 1 then
    	deleteQuestionMessage := '科目別補助の諸口を削除した場合、該当科目の科目別補助採用はなしになります。' + #13#10
                              + 'また、仕訳データが入力済みの場合は管理表に不整合が生ずる恐れがあるため、必ずマスタ再計算処理を行う必要があります。' + #13#10
                              + '削除してもよろしいですか？'
    else
	   	deleteQuestionMessage := MSG_DELETE;
// <113>ADD↑
	if ( MjsMessageBoxEx(AOwner,    // <005>
                         deleteQuestionMessage,        // <026><113>MOD
                         MjsMsgRec.sTitle,
                         MjsMsgRec.icontype,
                         MjsMsgRec.btntype ,
                         MjsMsgRec.btndef,
                         MJsMsgRec.LogType
       ) <> mrYes ) then
	begin
		DmqDel.Close;
		DmqDel.Free;
		Exit;
	end;

    // <CHK>↓
    if iCNCode < 0 then                     // 科目別補助内部ｺｰﾄﾞ <056>
        exCNCode := 0
    else
		exCNCode := iCNCode;

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の親会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_PARENT) then
	begin									// 子会社で使っていないかﾁｪｯｸ
		if not fnDelCheckChild(grTaikei.NCode, exCNCode, bUse) then
		begin
			if bUse then					// 子会社で使っている場合
			begin							// 「子会社で使用しているため、削除できません。」
	    	    MjsMessageBoxEx(AOwner, JNTSYNC_MSG_USE_CHILD, '削除', mjInformation, mjOk, mjDefOk);
			end;
			DmqDel.Close;
			DmqDel.Free;
			Exit;
        end;
	end;
// <063> ADD end
                                            // 削除ﾁｪｯｸｽﾄｱﾄﾞ実行
//  if not fnDelCheck(grTaikei.NCode, iNCode, strErr) then
    if not fnDelCheck(grTaikei.NCode, exCNCode, strErr) then    // <054><056>
    begin
        if grTaikei.MasKbn = 2 then         // 科目別補助ｺｰﾄﾞ(表示用にﾌｫｰﾏｯﾄ後)
            strMsg := iCode2
        else                                // 実在・合計科目ｺｰﾄﾞ
            strMsg := IntToStr(grTaikei.GCode);
                                            // 「ｺｰﾄﾞ 簡略名称 は、xxxのため削除できません。」
// <056>       strMsg := strMsg + ' ' + sMsgName + ' は、' + strErr +
// <056>                       'のため削除できません。';
        strMsg := strMsg + ' ' + sMsgName + ' ' + strErr;
// <063> MOD start Self→AOwner
//        MjsMessageBoxEx(Self, strMsg, '確認', mjInformation, mjOk, mjDefOk);
        MjsMessageBoxEx(AOwner, strMsg, '確認', mjInformation, mjOk, mjDefOk);
// <063> MOD end
		DmqDel.Close;
		DmqDel.Free;
        Exit;
    end;
	// <CHK>↑

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	bSyokuchiFlag := FALSE;

    //	細目で諸口の時
    if ( iSyokuchiKbn    = 1 ) and
       ( grTaikei.MasKbn = 2 ) then
	begin
		bSyokuchiFlag := TRUE;

		if ( fnSyokuchiDel(DmqDel,grOya_Taikei.NCode) = FALSE ) then
		begin
			DmqDel .Close;
			DmqDel .Free;
			fnFlgClear();
			Exit;
		end;
	end;

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);

    //	MQueryの構築
	DmqData := TMQuery.Create( Self );
    //	DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqDel do
	begin
		//	削除対象が実在の時細目が子としてあるときは削除しない
		if ( grTaikei.MasKbn = 1 ) and
           ( grTaikei.Kbn    = 0 ) then
		begin
			if ( JitsuzaiCheck(grTaikei.NCode) ) then
            begin
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;
		end;

		//	勘定科目基本ﾏｽﾀ(KmkMA)からの削除する内部ｺｰﾄﾞを取得
		Close;
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    NCode                  ');	//	内部ｺｰﾄﾞ
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
        SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        // -------------------------
        //	    細目科目時
        // -------------------------
		if ( grTaikei.MasKbn = 2 ) then
		begin
			SQL.Add('  AND MasterKbn = 2        ');	//	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :Sub     ');	//	細目ｺｰﾄﾞ

			ParamByName('Code') .AsInteger := grOya_Taikei.GCode;
			ParamByName('Sub')  .AsString  := iCode;
		end
        // -------------------------
        //	    勘定科目時
        // -------------------------
        else
		begin
			SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

			ParamByName('Code').AsInteger := grTaikei.GCode;
		end;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			iNCode2	    :=  GetFld('NCode')     .AsFloat;
		end
		//内部ｺｰﾄﾞが存在しなかった時
		else
		begin
			showmessage('エラー140219-1');
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

// --------------------------------------------------------
//	勘定科目基本ﾏｽﾀ(KmkMA)からの削除(RDelKbnに1をたてる)
// --------------------------------------------------------
		Close;
		SQL.Clear;
		SQL.Add('UPDATE KmkMA SET           '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('    RDelKbn   = 1          ');	//	ﾚｺｰﾄﾞ区分(1:削除ﾚｺｰﾄﾞ)
		SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>

        SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        // -------------------------
        //	    細目科目時
        // -------------------------
		if ( grTaikei.MasKbn = 2 ) then
		begin
			SQL.Add('  AND MasterKbn = 2        ');	//	ﾏｽﾀ区分(2:細目科目)
            SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :Sub     ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('Code') .AsFloat   := grOya_Taikei.NCode;
            ParamByName('Sub')  .AsFloat   := grTaikei.CNCode;
		end
        // -------------------------
        //	    勘定科目時
        // -------------------------
        else
		begin
			SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('Code').AsFloat := grTaikei.NCode;
		end;
        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if ( grTaikei.MasKbn = 2 ) then	//	細目科目時
			TableHistory.KmkMA_Sai := TABLE_IN_UPDATE
		else
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;


// -------------------------------------
//	勘定科目詳細情報(KmkMB)からの削除
// -------------------------------------
		Close;
		SQL.Clear;
		SQL.Add('DELETE FROM KmkMB   '		     );  //	勘定科目詳細情報

        // -------------------------
        //	    細目科目時
        // -------------------------
		if ( grTaikei.MasKbn = 2 ) then
		begin
			SQL.Add('WHERE MasterKbn = 2        ');	//	細目科目
            SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = :Sub     ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('Code') .AsFloat    :=  grOya_Taikei.NCode;
            ParamByName('Sub')  .AsFloat    :=  grTaikei.CNCode;
		end
        // -------------------------
        //	    勘定科目時
        // -------------------------
        else
		begin
			SQL.Add('WHERE MasterKbn = 1        ');	//	勘定科目
            SQL.Add('  AND NCode  = :Code       ');	//	内部ｺｰﾄﾞ

            ParamByName('Code') .AsFloat    :=  grTaikei.NCode;
		end;

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if (grTaikei.MasKbn = 2) then	//	細目科目時
			TableHistory.KmkMB_SaiDel := TABLE_DELETE
		else
			TableHistory.KmkMB_KanDel := TABLE_DELETE;

        // -------------------------
        //	    合計時の削除
        // -------------------------
		if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 ) then
		begin
			iKmkGCode := ReturnKmkCode(MComboBox.ItemIndex);

            //	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)
			iKamokuNCode	:= GetKmkInfo(iKmkGCode,1,SumKbn);

			MoveNode :=	nil;	//	初期化
			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				MoveRec	:= TreeView.Items[iLoop].Data;
	    		if ( MoveRec.NCode = iKamokuNCode ) then
    	    	begin
	        		TreeView.Selected := TreeView.Items[iLoop];
					MoveNode := TreeView.Selected;
					break;
	    	    end;
	    	end;

			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    MAX(EntNo)             ');	//	登録No
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        ');
			SQL.Add('  AND SumNCode  = :ExNCode ');	//	加算先外部ｺｰﾄﾞ

			ParamByName('ExNCode').AsFloat := iKamokuNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iEntNo := ((GetFld('MAX(KmkTree.EntNo)').AsInteger) div 100 * 100) + 100;
			end;
		end;

        // -------------------------
        //	    細目の時以外
        // -------------------------
		if ( grTaikei.MasKbn <> 2 ) then
		begin
			//	削除するﾚｺｰﾄﾞを加算先としているﾚｺｰﾄﾞ取得(子供)
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    BasedNCode             ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('   ,AddKbn                 ');	//	加算区分
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        '); //	加算先内部ｺｰﾄﾞ
			SQL.Add('  AND SumNCode  = :ExNCode ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('ExNCode') .AsFloat   :=  grTaikei.NCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
				Exit;
			end;

			while ( EOF <> TRUE ) do
			begin
				iMotoNCode  :=  GetFld('BasedNCode').AsFloat;
				iKaGeCode   :=  GetFld('AddKbn')    .AsInteger;

				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,EntNo              ');	//	登録No
				DmqData.SQL.Add('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,AddKbn             ');	//	加算区分
				DmqData.SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(') VALUES (                 ');
				DmqData.SQL.Add('        1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:SakiNCode         ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:No                ');	//	登録No
				DmqData.SQL.Add('       ,:MotoNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:Kasan             ');	//	加算区分
				DmqData.SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(')                          ');

				DmqData.ParamByName('SakiNCode').AsFloat    :=  iKamokuNCode;
				DmqData.ParamByName('No')       .AsInteger  :=  iEntNo;
				DmqData.ParamByName('MotoNCode').AsFloat    :=  iMotoNCode;
				DmqData.ParamByName('Kasan')    .AsInteger  :=  iKaGeCode;
                DmqData.ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;

				iEntNo := iEntNo + 100;

				//	削除するNodeの子供を移動させている
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wkRec := TreeView.Items[iLoop].Data;
		    		if ( wkRec.NCode  = grTaikei.NCode  ) and
                       ( wkRec.CNCode = grTaikei.CNCode ) then
    		    	begin
						TreeView.Selected := TreeView.Items[iLoop];
						break;
	    		    end;
		    	end;

				TreeView.Selected.Item[0].MoveTo(MoveNode,naAddChild);

				//	新しく書き換えたので前のﾚｺｰﾄﾞを削除
				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('DELETE FROM KmkTree            '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('WHERE MasterKbn  = 1           ');
				DmqData.SQL.Add('  AND SumNCode   = :ExNCode    ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('  AND BasedNCode = :ExBNCode   ');	//	加算元内部ｺｰﾄﾞ

				DmqData.ParamByName('ExNCode')  .AsFloat    :=  grTaikei.NCode;
				DmqData.ParamByName('ExBNCode') .AsFloat    :=  iMotoNCode;

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
				Next;
			end;

			if ( grOya_Taikei <> nil ) then
			begin
				//	科目加算体系(KmkTree)からの削除
				Close;
				SQL.Clear;
				SQL.ADD('DELETE FROM KmkTree            ');//	科目加算体系ﾏｽﾀ
				SQL.ADD('WHERE MasterKbn  = 1           ');
//<051>				SQL.ADD('  AND SumNCode   = :ExNCode    ');	//	加算先内部ｺｰﾄﾞ
				SQL.ADD('  AND BasedNCode = :ExBnCode   ');	//	加算元内部ｺｰﾄﾞ

//<051>				ParamByName('ExNCode')  .AsFloat    :=  grOya_Taikei.NCode;
				ParamByName('ExBnCode') .AsFloat    :=  grTaikei.NCode;

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqDel);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqDel.Close;
					DmqDel.Free;
					DmqData.Close;
					DmqData.Free;
					fnFlgClear();
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
			end;
		end;

		iGCode := grTaikei.GCode;

        // -------------------------
        //	    細目の時以外
        // -------------------------
		if ( Not(bSyokuchiFlag) ) then
		begin
			m_Save.Node    := PasteNode;
			m_Save.NodeOya := PasteNode.Parent;
			m_Save.Taikei  := PasteNode.Data;
			m_Save.DspName := m_Save.Node.Text;

            //	選択されたNode削除
			PasteNode.Delete;
		end;

		iCount := 2;

        // -------------------------
        //	    勘定科目時
        // -------------------------
		if ( grTaikei.MasKbn <> 2 ) then
		begin
			//	ﾂﾘｰからの削除(ｺﾋﾟｰした同一ｺｰﾄﾞを削除)
			for iLoop := TreeView.Items.Count-1 downto 0 do
			begin
				wkRec := TreeView.Items[iLoop].Data;
				if ( wkRec^.NCode = iNCode2 ) then
					(TreeView.Items[iLoop]).delete;
			end;
		end
        // -------------------------
        //	    細目科目時
        // -------------------------
		else
		//	ﾂﾘｰからの削除
		for iLoop := TreeView.Items.Count-1 downto 0 do
		begin
			wkRec := TreeView.Items[iLoop].Data;
			if ( wkRec^.SubCode = iCode2 ) and
               ( wkRec^.GCode   = grOya_Taikei.GCode ) then
			begin
				DelNode	:= TreeView.Items[iLoop].Parent;
				if ( DelNode <> nil ) then
				begin
					DelRec := DelNode.Data;
    	    		if ( DelRec.GCode = grOya_Taikei.GCode ) then
					begin
						(TreeView.Items[iLoop]).delete;
					end;
				end;
			end;
		end;

		with DmqData do
		begin
			//	ﾏｽﾀ付箋管理情報(MFusenInfo)にﾚｺｰﾄﾞがあるかﾁｪｯｸ
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    NCode                  ');	//	科目ｺｰﾄﾞ
			SQL.Add('FROM MFusenInfo            '); //	ﾏｽﾀ付箋管理情報
			SQL.Add('WHERE MasterKbn = :Mas     '); //	ﾏｽﾀ区分
			SQL.Add('  AND NCode     = :Code    ');	//	科目ｺｰﾄﾞ
			SQL.Add('  AND SubNCode  = :SCode   ');	//	細目ｺｰﾄﾞ

            // -------------------------
            //	    細目科目時
            // -------------------------
			if ( grTaikei.MasKbn = 2 ) then
			begin
				ParamByName('Mas')  .AsInteger  :=  2;
				ParamByName('Code') .AsFloat    :=  grOya_Taikei.NCode;
				ParamByName('SCode').AsFloat    :=  grTaikei.NCode;
			end
            // -------------------------
            //	    勘定科目時
            // -------------------------
			else
			begin
				ParamByName('Mas')  .AsInteger  :=  1;
				ParamByName('Code') .AsFloat    :=  grTaikei.NCode;
				ParamByName('SCode').AsFloat    :=  0;
			end;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				DmqData.Close;
				DmqData.Free;
				DmqDel.Close;
				DmqDel.Free;
				fnFlgClear();
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				//	ﾏｽﾀ付箋管理情報(MFusenInfo)からの削除
				Close;
				SQL.Clear;
				SQL.Add('DELETE FROM MFusenInfo     '); //	ﾏｽﾀ付箋管理情報
				SQL.Add('WHERE MasterKbn = :Mas     '); //	ﾏｽﾀ区分
				SQL.Add('  AND NCode     = :Code    ');	//	科目ｺｰﾄﾞ
				SQL.Add('  AND SubNCode  = :SCode   ');	//	細目ｺｰﾄﾞ

                // -------------------------
                //	    細目科目時
                // -------------------------
				if ( grTaikei.MasKbn = 2 ) then
				begin
					ParamByName('Mas')  .AsInteger  :=  2;
					ParamByName('Code') .AsFloat    :=  grOya_Taikei.NCode;
					ParamByName('SCode').AsFloat    :=  grTaikei.NCode;
				end
                // -------------------------
                //	    勘定科目時
                // -------------------------
				else
				begin
					ParamByName('Mas')  .AsInteger  :=  1;
					ParamByName('Code') .AsFloat    :=  grTaikei.NCode;
					ParamByName('SCode').AsFloat    :=  0;
				end;

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();   // HIS0117
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
				if (grTaikei.MasKbn = 2) then		//	細目時
					TableHistory.MFusenInfo_SaiDel := TABLE_DELETE
				else
					TableHistory.MFusenInfo_KanDel := TABLE_DELETE;
			end;
		end;
    end;

    if ( iSyokuchiKbn = 1 ) then
    begin
		DummyFlag := FALSE;
		//if ( KbnCheck(grOya_Taikei.NCode,DummyFlag,FALSE,DISPOSE_DELETE) ) then	//<113>DEL
        if not SubUseClear(iNCode2) then	//<113>ADD
		begin
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( P_Syousai.Visible = TRUE ) then
		begin
			DelNode	:= TreeView.Selected;
			DelRec	:= DelNode.Data;
// <013>			SelectDsp(DelRec.MasKbn,DelRec.Kbn,DelRec.GCode,'');
			SelectDsp(DelRec.MasKbn,DelRec.Kbn,DelRec.GCode,'0');   // <013>
		end;
		bSyokuDel := TRUE;
	end;

	DmqDel.Close;
	DmqDel.Free;
	DmqData.Close;
	DmqData.Free;

	if ( grOya_Taikei = nil ) and ( grTaikei.NotAdd = 0 ) then
	begin
		wkRec := TreeView.Selected.Data;
		if wkRec <> nil then
		begin
			if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
				HagureCheck()
            else
			begin
				if ( wkRec.NotAdd = 0 ) then	//	はぐれ時
					GridAgainDsp(AGAIN,wkRec.NCode);
			end;
		end;
	end
	else
		GridAgainDsp(OTHER,0);

	if ( m_SetNode <> nil ) and (( grTaikei.MasKbn <> 2 ) or ( bSyokuDel = TRUE )) then
		m_SetNode.Selected := TRUE;

	if ( bSyokuDel       = FALSE ) and
       ( grTaikei.MasKbn = 2     ) then
		MTab_N.Items.Selected := 1;

	giRightClick :=	FALSE;

	if ( grTaikei.MasKbn <> 2 ) then	//	細目の時以外
		gbKmkTree2Flag := TRUE;

	// <100>ADD↓
	// 出力順序自動登録 構造体設定
	if (grTaikei.MasKbn <> 2) then
	begin
		if Length(m_KmkOrder) > 0 then
		begin
			// 新規追加された科目がﾂﾘｰで削除された科目か確認して、配列からも削除
			for iLoop := 0 to Length(m_KmkOrder)-1 do
			begin
				if m_KmkOrder[iLoop].Delete = True then
					continue;

				if grTaikei.NCode = m_KmkOrder[iLoop].NCode then
				begin
					m_KmkOrder[iLoop].Delete := True;
					break;
				end;
			end;
		end;
	end;
	// <100>ADD↑

	MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	// <126> Delete ↓
	// <124> Start 
	//実在の勘定科目（合計科目、科目別補助は対象外）で削除を行われた場合が対象[grTaikei.MasKbn(1:科目、2:科目別補助)　grTaikei.Kbn（0:実在、1:合計）]
	//if (( grTaikei.MasKbn = 1) and (grTaikei.Kbn = 0)) then
	//begin
		//「Edger Tracker 経費精算連携」の場合、メッセージを出力する。
		//EdgeTrackerKeihiSeisanMsg();
	// <124> End 
	//<126> Delete ↑
                  
	//<126> Start
	if ( grTaikei.MasKbn = 1) and ( grTaikei.Kbn = 0) then
	begin
		//「Edger Tracker 経費精算連携」の場合、メッセージを出力する。
		EdgeTrackerKeihiSeisanMsg(ZITSUZAI);                                    // 実在科目の場合、Const値ZITSUZAIを渡す
	end
	else if ( grTaikei.MasKbn = 2) then
	begin
		EdgeTrackerKeihiSeisanMsg(SAIMOKU);                                     // 科目別補助の場合、Const値SAIMOKUを渡す
	end;
    //<126> End

	if ( grCopyPaste.NCode  = grTaikei.NCode  ) and
       ( grCopyPaste.CNCode = grTaikei.CNCode ) and
       ( grCopyPaste.Kbn    = grTaikei.Kbn    ) and
       ( grCopyPaste.MasKbn = grTaikei.MasKbn ) then
	begin
		m_CopyFlag		 := FALSE;
		MI_Paste.Enabled := FALSE;
	end;

    // 細目科目削除時にﾚｺｰﾄﾞが1件も無くなった場合に、ﾀﾌﾞを実在に切り替える
    if ( grTaikei.MasKbn = 2  ) then
    begin
        if ( MemSai.RecordCount = 0 ) then
        begin
            MTab_N.Items[0].Selected    :=  TRUE;
            MTab_N.Items[1].Selected    :=  FALSE;
			MTab_N.Items[2].Selected    :=  FALSE;
        end;
    end;

end;

//************************************************************************
//*		Process			:	Popupの削除でﾚｺｰﾄﾞを削除(ｸﾞﾙｰﾌﾟ会計採用の子会社用の処理) <063> ADD
//*		Name			:	K.Katou(PRIME)
//*		Date			:	2007/04/13
//*		Comment			:	MI_DeleteClick関数を流用して作成。
//*							MI_DeleteClickｲﾍﾞﾝﾄから呼ばれる。
//************************************************************************
procedure TJNTCRP009001f.MI_DeleteClick_GrpChild();
var
	wkRec		    :	^TaikeiRec;
	MoveRec		    :	^TaikeiRec;
	DelRec		    :	^TaikeiRec;
	MoveNode	    :	TTreeNode;
	DelNode		    :	TTreeNode;
	DmqDel		    :	TMQuery;
	DmqData		    :	TMQuery;
	iLoop		    :	Integer;
	iMotoNCode	    :	Extended;	    //	加算元内部ｺｰﾄﾞ
	iEntNo		    :	Integer;
	iKaGeCode	    :	Integer;
	iKmkGCode	    :	Integer;
	iKamokuNCode	:	Extended;
	iNCode2		    :	Extended;
	SumKbn		    :	Byte;			//	実在/合計区分
	DummyFlag	    :	Boolean;
	sMsgName	    :	String;
	bSyokuDel	    :	Boolean;
	iNCode		    :	Extended;
	iCNCode			:	Extended;		// <054>
    exCNCode        :   Extended;       // <056>
    iSyokuchiKbn    :   Integer;        // 諸口区分
    iCode           :   String;         // DBﾘﾝｸ用細目外部ｺｰﾄﾞ
	iCode2          :   String;         // 表示用細目外務ｺｰﾄﾞ
    strErr          :   String;         // <CHK>
    strMsg          :   String;         // <CHK>
begin

	//	初期化処理
	iEntNo		:=	0;
	SumKbn		:=	0;
	sMsgName	:=	'';
	bSyokuDel	:=	FALSE;
	iNCode		:=  -1;
	iCNCode		:=  -1;//<054>
    iKamokuNCode:=	0;
	MoveNode 	:=	nil;					//	初期化

	DmqDel := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );		//	DBとMQueryの接続

    // 細目外部ｺｰﾄﾞ属性対応
    iCode	    :=	fnSaimokuSetAttr(1,grTaikei.SubCode,
                                       grTaikei.CodeAttr,
                                       grTaikei.CodeDigit);     //  細目外部ｺｰﾄﾞ(DBﾘﾝｸ用)
    iCode2      :=  fnSaimokuSetAttr(0,grTaikei.SubCode,
                                       grTaikei.CodeAttr,
                                       grTaikei.CodeDigit);     //  細目外部ｺｰﾄﾞ(表示用)

	if ( grTaikei.MasKbn = 2 ) then
      fnSubNCodeCheck(grOya_Taikei.GCode,iCode,iNCode,iCNCode,iSyokuchiKbn);//<054>

	sMsgName :=	grTaikei.Name;
	ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
// <026> 「当該ﾏｽﾀにﾃﾞｰﾀが存在している場合、削除すると管理表に不整合が生ずる恐れがあります。
//          削除してもよろしいですか？」
	if ( MjsMessageBoxEx(AOwner,    // <005>
                         MSG_DELETE,        // <026>
                         MjsMsgRec.sTitle,
                         MjsMsgRec.icontype,
                         MjsMsgRec.btntype ,
						 MjsMsgRec.btndef,
                         MJsMsgRec.LogType
       ) <> mrYes ) then
	begin
		DmqDel.Close;
		DmqDel.Free;
		Exit;
	end;

	// <CHK>↓
    if iCNCode < 0 then                     // 科目別補助内部ｺｰﾄﾞ <056>
        exCNCode := 0
    else
        exCNCode := iCNCode;
                                            // 削除ﾁｪｯｸｽﾄｱﾄﾞ実行
    if not fnDelCheck(grTaikei.NCode, exCNCode, strErr) then    // <054><056>
    begin
        if grTaikei.MasKbn = 2 then         // 科目別補助ｺｰﾄﾞ(表示用にﾌｫｰﾏｯﾄ後)
            strMsg := iCode2
        else                                // 実在・合計科目ｺｰﾄﾞ
            strMsg := IntToStr(grTaikei.GCode);
                                            // 「ｺｰﾄﾞ 簡略名称 は、xxxのため削除できません。」
        strMsg := strMsg + ' ' + sMsgName + ' ' + strErr;
// <063> MOD start Self→AOwner
//        MjsMessageBoxEx(Self, strMsg, '確認', mjInformation, mjOk, mjDefOk);
        MjsMessageBoxEx(AOwner, strMsg, '確認', mjInformation, mjOk, mjDefOk);
// <063> MOD end
		DmqDel.Close;
		DmqDel.Free;
        Exit;
    end;
    // <CHK>↑

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	bSyokuchiFlag := FALSE;

    //	細目で諸口の時
    if ( iSyokuchiKbn    = 1 ) and
       ( grTaikei.MasKbn = 2 ) then
	begin
		bSyokuchiFlag := TRUE;
		DmqDel.Close;
														// 親会社DBとMQueryの接続
		MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqDel);

		if ( fnSyokuchiDel(DmqDel,grOya_Taikei.NCode) = FALSE ) then
		begin
			DmqDel .Close;
			DmqDel .Free;
			fnFlgClear();
			Exit;
		end;
		DmqDel.Close;
        												// 自会社(子会社)DBとMQueryの接続
		MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqDel);
	end;

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);				// 子会社DB
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);			// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始

    //	MQueryの構築
	DmqData := TMQuery.Create( Self );
    //	DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqDel do
	begin
		//	削除対象が実在の時細目が子としてあるときは削除しない
		if ( grTaikei.MasKbn = 1 ) and
           ( grTaikei.Kbn    = 0 ) then
		begin
			if ( JitsuzaiCheck(grTaikei.NCode) ) then
            begin
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;
		end;

		//	勘定科目基本ﾏｽﾀ(KmkMA)からの削除する内部ｺｰﾄﾞを取得
		Close;
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    NCode                  ');	//	内部ｺｰﾄﾞ
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
        SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        // -------------------------
        //	    細目科目時
        // -------------------------
		if ( grTaikei.MasKbn = 2 ) then
		begin
			SQL.Add('  AND MasterKbn = 2        ');	//	ﾏｽﾀ区分(2:細目科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SubCode   = :Sub     ');	//	細目ｺｰﾄﾞ

			ParamByName('Code') .AsInteger := grOya_Taikei.GCode;
			ParamByName('Sub')  .AsString  := iCode;
		end
        // -------------------------
        //	    勘定科目時
        // -------------------------
        else
		begin
			SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

			ParamByName('Code').AsInteger := grTaikei.GCode;
		end;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			iNCode2	    :=  GetFld('NCode')     .AsFloat;
		end
		//内部ｺｰﾄﾞが存在しなかった時
		else
		begin
			showmessage('エラー140219-1');
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

// --------------------------------------------------------
//	勘定科目基本・詳細ﾏｽﾀ関連付け(KmkMA_REL, KmkMB_REL)の削除(RDelKbn_RELに1をたてる)
// --------------------------------------------------------
		DmqDel.Close;
        									// 親会社DBとMQueryの接続
		MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqDel);

		//	親会社の勘定科目基本ﾏｽﾀ関連付け(KmkMA_REL/KmkMB_REL)の削除
		if not DeleteKmkREL(iNCode2, exCNCode, m_SyncMaster.m_nSegNCode, DmqDel) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ(破棄)
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if ( grTaikei.MasKbn = 2 ) then	//	細目科目時
			TableHistory.KmkMA_Sai := TABLE_IN_UPDATE
		else
			TableHistory.KmkMA_Kan := TABLE_IN_UPDATE;

		//	ﾃｰﾌﾞﾙ更新履歴
		if (grTaikei.MasKbn = 2) then	//	細目科目時
			TableHistory.KmkMB_SaiDel := TABLE_DELETE
		else
			TableHistory.KmkMB_KanDel := TABLE_DELETE;

		// 同期ｽﾄｱﾄﾞ呼出
													// KMKMA同期
		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
		begin
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
			Exit;
		end;
													// KMKMB同期
// <068> MOD start
//		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
		begin
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			fnFlgClear();
   		    Exit;
		end;

// <069> ADD start
		DmqDel.Close;

	    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );	// 子会社DBとMQueryの接続
// <069> ADD end

        // -------------------------
        //	    合計時の削除
        // -------------------------
		if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 ) then
		begin
			iKmkGCode := ReturnKmkCode(MComboBox.ItemIndex);

            //	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)
			iKamokuNCode	:= GetKmkInfo(iKmkGCode,1,SumKbn);

			MoveNode :=	nil;	//	初期化
			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				MoveRec	:= TreeView.Items[iLoop].Data;
	    		if ( MoveRec.NCode = iKamokuNCode ) then
    	    	begin
	        		TreeView.Selected := TreeView.Items[iLoop];
					MoveNode := TreeView.Selected;
					break;
	    	    end;
	    	end;
// <069> DEL start
(*			DmqDel.Close;

		    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );	// 子会社DBとMQueryの接続
*)
// <069> DEL end
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    MAX(EntNo)             ');	//	登録No
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        ');
			SQL.Add('  AND SumNCode  = :ExNCode ');	//	加算先外部ｺｰﾄﾞ

			ParamByName('ExNCode').AsFloat := iKamokuNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iEntNo := ((GetFld('MAX(KmkTree.EntNo)').AsInteger) div 100 * 100) + 100;
			end;
		end;

        // -------------------------
        //	    細目の時以外
        // -------------------------
		if ( grTaikei.MasKbn <> 2 ) then
		begin
			//	削除するﾚｺｰﾄﾞを加算先としているﾚｺｰﾄﾞ取得(子供)
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    BasedNCode             ');	//	加算元内部ｺｰﾄﾞ
			SQL.Add('   ,AddKbn                 ');	//	加算区分
			SQL.Add('FROM KmkTree               '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        '); //	加算先内部ｺｰﾄﾞ
			SQL.Add('  AND SumNCode  = :ExNCode ');	//	加算先内部ｺｰﾄﾞ

			ParamByName('ExNCode') .AsFloat   :=  grTaikei.NCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqDel);
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqDel.Close;
				DmqDel.Free;
				DmqData.Close;
				DmqData.Free;
				fnFlgClear();
				Exit;
			end;

			while ( EOF <> TRUE ) do
			begin
				iMotoNCode  :=  GetFld('BasedNCode').AsFloat;
				iKaGeCode   :=  GetFld('AddKbn')    .AsInteger;

				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('        MasterKbn          ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,EntNo              ');	//	登録No
				DmqData.SQL.Add('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,AddKbn             ');	//	加算区分
				DmqData.SQL.Add('       ,MasterKbn2         ');	//	ﾏｽﾀ区分
				DmqData.SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(') VALUES (                 ');
				DmqData.SQL.Add('        1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:SakiNCode         ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:No                ');	//	登録No
				DmqData.SQL.Add('       ,:MotoNCode         ');	//	加算元内部ｺｰﾄﾞ
				DmqData.SQL.Add('       ,:Kasan             ');	//	加算区分
				DmqData.SQL.Add('       ,1                  ');	//	ﾏｽﾀ区分(1:勘定科目)
				DmqData.SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>
				DmqData.SQL.Add(')                          ');

				DmqData.ParamByName('SakiNCode').AsFloat    :=  iKamokuNCode;
				DmqData.ParamByName('No')       .AsInteger  :=  iEntNo;
				DmqData.ParamByName('MotoNCode').AsFloat    :=  iMotoNCode;
				DmqData.ParamByName('Kasan')    .AsInteger  :=  iKaGeCode;
                DmqData.ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;  //  更新担当者内部ｺｰﾄﾞ<080>

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;

				iEntNo := iEntNo + 100;

				//	削除するNodeの子供を移動させている
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wkRec := TreeView.Items[iLoop].Data;
		    		if ( wkRec.NCode  = grTaikei.NCode  ) and
                       ( wkRec.CNCode = grTaikei.CNCode ) then
    		    	begin
		        		TreeView.Selected := TreeView.Items[iLoop];
						break;
	    		    end;
		    	end;

				TreeView.Selected.Item[0].MoveTo(MoveNode,naAddChild);

				//	新しく書き換えたので前のﾚｺｰﾄﾞを削除
				DmqData.Close;
				DmqData.SQL.Clear;
				DmqData.SQL.Add('DELETE FROM KmkTree            '); //	科目加算体系ﾏｽﾀ
				DmqData.SQL.Add('WHERE MasterKbn  = 1           ');
				DmqData.SQL.Add('  AND SumNCode   = :ExNCode    ');	//	加算先内部ｺｰﾄﾞ
				DmqData.SQL.Add('  AND BasedNCode = :ExBNCode   ');	//	加算元内部ｺｰﾄﾞ

				DmqData.ParamByName('ExNCode')  .AsFloat    :=  grTaikei.NCode;
				DmqData.ParamByName('ExBNCode') .AsFloat    :=  iMotoNCode;

				//	ｴﾗｰの判定
				if ( DmqData.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);			// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);		// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
				Next;
			end;

			if ( grOya_Taikei <> nil ) then
			begin
				//	科目加算体系(KmkTree)からの削除
				Close;
				SQL.Clear;
				SQL.ADD('DELETE FROM KmkTree            ');//	科目加算体系ﾏｽﾀ
				SQL.ADD('WHERE MasterKbn  = 1           ');
//<051>				SQL.ADD('  AND SumNCode   = :ExNCode    ');	//	加算先内部ｺｰﾄﾞ
				SQL.ADD('  AND BasedNCode = :ExBnCode   ');	//	加算元内部ｺｰﾄﾞ

//<051>				ParamByName('ExNCode')  .AsFloat    :=  grOya_Taikei.NCode;
				ParamByName('ExBnCode') .AsFloat    :=  grTaikei.NCode;

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqDel);
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqDel.Close;
					DmqDel.Free;
					DmqData.Close;
					DmqData.Free;
					fnFlgClear();
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
			end;
		end;

        // -------------------------
        //	    細目の時以外
        // -------------------------
		if ( Not(bSyokuchiFlag) ) then
		begin
			m_Save.Node    := PasteNode;
			m_Save.NodeOya := PasteNode.Parent;
			m_Save.Taikei  := PasteNode.Data;
			m_Save.DspName := m_Save.Node.Text;

            //	選択されたNode削除
			PasteNode.Delete;
		end;

        // -------------------------
        //	    勘定科目時
        // -------------------------
		if ( grTaikei.MasKbn <> 2 ) then
		begin
			//	ﾂﾘｰからの削除(ｺﾋﾟｰした同一ｺｰﾄﾞを削除)
			for iLoop := TreeView.Items.Count-1 downto 0 do
			begin
				wkRec := TreeView.Items[iLoop].Data;
				if ( wkRec^.NCode = iNCode2 ) then
					(TreeView.Items[iLoop]).delete;
			end;
		end
        // -------------------------
        //	    細目科目時
        // -------------------------
		else
		//	ﾂﾘｰからの削除
		for iLoop := TreeView.Items.Count-1 downto 0 do
		begin
			wkRec := TreeView.Items[iLoop].Data;
			if ( wkRec^.SubCode = iCode2 ) and
               ( wkRec^.GCode   = grOya_Taikei.GCode ) then
			begin
				DelNode	:= TreeView.Items[iLoop].Parent;
				if ( DelNode <> nil ) then
				begin
					DelRec := DelNode.Data;
    	    		if ( DelRec.GCode = grOya_Taikei.GCode ) then
					begin
						(TreeView.Items[iLoop]).delete;
					end;
				end;
			end;
		end;

		with DmqData do
		begin
			//	ﾏｽﾀ付箋管理情報(MFusenInfo)にﾚｺｰﾄﾞがあるかﾁｪｯｸ
			Close;
			SQL.Clear;
			SQL.Add('SELECT                     ');
			SQL.Add('    NCode                  ');	//	科目ｺｰﾄﾞ
			SQL.Add('FROM MFusenInfo            '); //	ﾏｽﾀ付箋管理情報
			SQL.Add('WHERE MasterKbn = :Mas     '); //	ﾏｽﾀ区分
			SQL.Add('  AND NCode     = :Code    ');	//	科目ｺｰﾄﾞ
			SQL.Add('  AND SubNCode  = :SCode   ');	//	細目ｺｰﾄﾞ

            // -------------------------
            //	    細目科目時
            // -------------------------
			if ( grTaikei.MasKbn = 2 ) then
			begin
				ParamByName('Mas')  .AsInteger  :=  2;
				ParamByName('Code') .AsFloat    :=  grOya_Taikei.NCode;
				ParamByName('SCode').AsFloat    :=  grTaikei.NCode;
			end
            // -------------------------
			//	    勘定科目時
            // -------------------------
			else
			begin
				ParamByName('Mas')  .AsInteger  :=  1;
				ParamByName('Code') .AsFloat    :=  grTaikei.NCode;
				ParamByName('SCode').AsFloat    :=  0;
			end;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
				DmqData.Close;
				DmqData.Free;
				DmqDel.Close;
				DmqDel.Free;
				fnFlgClear();
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				//	ﾏｽﾀ付箋管理情報(MFusenInfo)からの削除
				Close;
				SQL.Clear;
				SQL.Add('DELETE FROM MFusenInfo     '); //	ﾏｽﾀ付箋管理情報
				SQL.Add('WHERE MasterKbn = :Mas     '); //	ﾏｽﾀ区分
				SQL.Add('  AND NCode     = :Code    ');	//	科目ｺｰﾄﾞ
				SQL.Add('  AND SubNCode  = :SCode   ');	//	細目ｺｰﾄﾞ

                // -------------------------
                //	    細目科目時
                // -------------------------
				if ( grTaikei.MasKbn = 2 ) then
				begin
					ParamByName('Mas')  .AsInteger  :=  2;
					ParamByName('Code') .AsFloat    :=  grOya_Taikei.NCode;
					ParamByName('SCode').AsFloat    :=  grTaikei.NCode;
				end
                // -------------------------
                //	    勘定科目時
                // -------------------------
				else
				begin
					ParamByName('Mas')  .AsInteger  :=  1;
					ParamByName('Code') .AsFloat    :=  grTaikei.NCode;
					ParamByName('SCode').AsFloat    :=  0;
				end;

				//	ｴﾗｰの判定
				if ( ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
					DmqData.Close;
					DmqData.Free;
					DmqDel.Close;
					DmqDel.Free;
					fnFlgClear();   // HIS0117
					Exit;
				end;

				//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
				if (grTaikei.MasKbn = 2) then		//	細目時
					TableHistory.MFusenInfo_SaiDel := TABLE_DELETE
				else
					TableHistory.MFusenInfo_KanDel := TABLE_DELETE;
			end;
		end;
    end;

    if ( iSyokuchiKbn = 1 ) then
	begin
		DummyFlag := FALSE;
		if ( KbnCheck(grOya_Taikei.NCode,DummyFlag,FALSE,DISPOSE_DELETE) ) then
		begin
			MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqDel.Close;
			DmqDel.Free;
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( P_Syousai.Visible = TRUE ) then
		begin
			DelNode	:= TreeView.Selected;
			DelRec	:= DelNode.Data;
			SelectDsp(DelRec.MasKbn,DelRec.Kbn,DelRec.GCode,'0');   // <013>
		end;
		bSyokuDel := TRUE;
	end;

	DmqDel.Close;
	DmqDel.Free;
	DmqData.Close;
	DmqData.Free;

	if ( grOya_Taikei = nil ) and ( grTaikei.NotAdd = 0 ) then
	begin
		wkRec := TreeView.Selected.Data;
		if wkRec <> nil then
		begin
			if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
				HagureCheck()
            else
			begin
				if ( wkRec.NotAdd = 0 ) then	//	はぐれ時
					GridAgainDsp(AGAIN,wkRec.NCode);
			end;
		end;
	end
	else
		GridAgainDsp(OTHER,0);

	if ( m_SetNode <> nil ) and (( grTaikei.MasKbn <> 2 ) or ( bSyokuDel = TRUE )) then
		m_SetNode.Selected := TRUE;

	if ( bSyokuDel       = FALSE ) and
       ( grTaikei.MasKbn = 2     ) then
		MTab_N.Items.Selected := 1;

	giRightClick :=	FALSE;

	if ( grTaikei.MasKbn <> 2 ) then		//	細目の時以外
		gbKmkTree2Flag := TRUE;

	MDataModule.Commit (dbCorp_Select);		// 子会社のｺﾐｯﾄ
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	if ( grCopyPaste.NCode  = grTaikei.NCode  ) and
       ( grCopyPaste.CNCode = grTaikei.CNCode ) and
       ( grCopyPaste.Kbn    = grTaikei.Kbn    ) and
       ( grCopyPaste.MasKbn = grTaikei.MasKbn ) then
	begin
		m_CopyFlag		 := FALSE;
		MI_Paste.Enabled := FALSE;
	end;

    // 細目科目削除時にﾚｺｰﾄﾞが1件も無くなった場合に、ﾀﾌﾞを実在に切り替える
    if ( grTaikei.MasKbn = 2  ) then
	begin
        if ( MemSai.RecordCount = 0 ) then
        begin
            MTab_N.Items[0].Selected    :=  TRUE;
            MTab_N.Items[1].Selected    :=  FALSE;
            MTab_N.Items[2].Selected    :=  FALSE;
        end;
    end;

end;

//************************************************************************
//*		Component		:	MI_TaikeiDe ( TMenuItem )
//*							ﾂﾘｰからの体系削除
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_TaikeiDelClick(Sender: TObject);
var
	wkRec		:	^TaikeiRec;
	wkRec2		:	^TaikeiRec;
	CNode		:	TTreeNode;
	cNodeOYA	:	TTreeNode;
	DmqDel		:	TMQuery;
	iLoop		:	Integer;
begin
	// -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	MDataModule.BeginTran (dbCorp_Select);						//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	DmqDel := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDel );		//	DBとMQueryの接続

	with DmqDel do
	begin
		//	科目加算体系(KmkTree)からの削除
		Close;
		SQL.Clear;
		SQL.Add('DELETE FROM KmkTree            '); //	科目加算体系ﾏｽﾀ
		SQL.Add('WHERE MasterKbn  = 1           ');
		SQL.Add('  AND BasedNCode = :ExNCode    ');	//	加算元内部ｺｰﾄﾞ
		SQL.Add('  AND SumNCode   = :ExBNCode   ');	//	加算先内部ｺｰﾄﾞ

		ParamByName('ExNCode')  .AsFloat   := grTaikei.NCode;		//	加算元外部ｺｰﾄﾞ
		ParamByName('ExBNCode') .AsFloat   := grOya_Taikei.NCode;	//	加算先外部ｺｰﾄﾞ

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqDel);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqDel.Close;
			DmqDel.Free;
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		TableHistory.KmkTree_KanDel	:=	TABLE_DELETE;
	end;

	DmqDel.Close;
	DmqDel.Free;

	PasteNode.Delete;		//	選択されたNodeの削除
	GridAgainDsp(OTHER,0);

	//	ﾂﾘｰからの削除(同一のｺｰﾄﾞ、親の時)
	for iLoop := TreeView.Items.Count-1 downto 0 do
	begin
		cNode := TreeView.Items[iLoop];
		wkRec := cNode.Data;
		if ( wkRec^.NCode  = grTaikei.NCode  ) and
		   ( wkRec^.CNCode = grTaikei.CNCode ) then
		begin
			cNodeOYA := TreeView.Items[iLoop].Parent;
			if ( cNodeOYA <> nil ) then
			begin
				wkRec2 := cNodeOYA.Data;
             	if ( wkRec2.NCode  = grOya_Taikei.NCode  ) and
                   ( wkRec2.CNCode = grOya_Taikei.CNCode ) then
					(TreeView.Items[iLoop]).delete;
			end;
		end;
	end;

	if ( gbTaikeiFlag = FALSE ) then
	begin
		//	ｺﾋﾟｰNodeの表示処理
		New(wkRec);
		wkRec.NCode		:=	grTaikei.NCode;
        wkRec.CNCode    :=  grTaikei.CNCode;
		wkRec.GCode		:=	grTaikei.GCode;
        wkRec.SubCode   :=  grTaikei.SubCode;
		wkRec.Kbn		:=	grTaikei.Kbn;
		wkRec.KoteiKbn	:=	grTaikei.KoteiKbn;
		wkRec.MasKbn	:=	grTaikei.MasKbn;
		wkRec.Name		:=	grTaikei.Name;
		wkRec.AddKbn	:=  grTaikei.AddKbn;
		wkRec.ChildKbn	:=	grTaikei.ChildKbn;
		wkRec.NotAdd	:=	0;
        wkRec.Syokuchi  :=  grTaikei.Syokuchi;
		cNode := TreeView.Items.AddChildobject(nil,MakeDspString(grTaikei.GCode,grTaikei.Name),wkRec);

        // -----------------
        //      合計時
        // -----------------
		if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 ) then
		begin
			if ( grTaikei.AddKbn = 0 ) then
			begin
				cNode.ImageIndex 	:= 0;
				cNode.SelectedIndex := 1;
			end
			else
			begin
		    	cNode.ImageIndex 	:= 4;
				cNode.SelectedIndex := 5;
			end;
			MakeKodomo(cNode,grTaikei.NCode,0);
		end
        // -----------------
        //      実在時
        // -----------------
		else if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 0 ) then
		begin
			if ( grTaikei.AddKbn = 0 ) then
			begin
		    	cNode.ImageIndex 	:= 2;
				cNode.SelectedIndex := 8;
			end
			else
			begin
			    cNode.ImageIndex 	:= 6;
				cNode.SelectedIndex := 9;
			end;
			MakeSaimokuKdomo(cNode,grTaikei.NCode);		                        // 細目子供作成処理
		end;
	end;

	gbTaikeiFlag	:=	FALSE;
	MDataModule.Commit (dbCorp_Select);											//	ｺﾐｯﾄ(反映)

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	if ( grCopyPaste.NCode  = grTaikei.NCode  ) and
       ( grCopyPaste.CNCode = grTaikei.CNCode ) and
       ( grCopyPaste.Kbn    = grTaikei.Kbn    ) and
       ( grCopyPaste.MasKbn = grTaikei.MasKbn ) then
    begin
		m_CopyFlag		 := FALSE;
		MI_Paste.Enabled := FALSE;
	end;

	gbKmkTree2Flag := TRUE;

end;

//************************************************************************
//*		Component		:	MI_Syousai ( TMenuItem )
//*							詳細画面表示
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_SyousaiClick(Sender: TObject);
var
	iG_Code		:	Integer;		//	外部ｺｰﾄﾞ
	iS_Code		:	String;		    //	細目ｺｰﾄﾞ
begin
	if (P_Grid.Visible = TRUE) then
	begin
		P_Grid.Visible		:=	FALSE;
		P_Syousai.Visible	:=	TRUE;
		B_Syousai.Caption	:=	'一覧(&T)';	//	ﾎﾞﾀﾝの表示名所変更
	end;

	if (grTaikei.MasKbn = 2) then		//細目科目の時
	begin
		iG_Code	:=	grOya_Taikei.GCode;
		iS_Code	:=	grTaikei.SubCode;
    end
	else
	begin
		iG_Code	:=	grTaikei.GCode;
// <013>		iS_Code	:=	'';
		iS_Code	:=	'0';    // <013>
	end;

	if (giTaihi_GCode <> iG_Code) or (giTaihi_SCode <> iS_Code) then	//	退避した外部ｺｰﾄﾞと細目ｺｰﾄﾞを比較
	begin
		giTaihi_GCode	:=	iG_Code;	//	外部ｺｰﾄﾞを退避
		giTaihi_SCode	:=	iS_Code;	//	細目ｺｰﾄﾞを退避
		SelectDsp(grTaikei.MasKbn, grTaikei.Kbn, iG_Code, iS_Code);

		//	参照時
		if (giReferFlag = REFER) then
			Treeview.SetFocus
		else
		begin
			if (ECode.Enabled = TRUE) then
				ECode.SetFocus;
		end;
	end;

end;

//-----------------------------------------------------------------------------
// KbnCheck
//	< 区分のチェック >
//      PARAM   :   NCode   :   内部コード
//                  Flag    :   細目科目採用区分があり・なしの判断
//                              (TreeViewChange時でしか使用していない他はﾀﾞﾐｰ)
//                  Check   :   細目採用区分あり(TRUE)・なし(FALSE)のﾁｪｯｸ
//                  Dispose :   処理区分削除(DISPOSE_DELETE)/以外(DISPOSE_OTHER)
//      RETURN  :   RollBackが行われた否か
//      MEMO    :
//-----------------------------------------------------------------------------
function  TJNTCRP009001f.KbnCheck(NCode: Extended; var Flag: Boolean; Check: Boolean; Dispose: Byte):Boolean;
var
	DmqKbn	:	TMQuery;
	DmqData	:	TMQuery;
begin

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

    // MQueryの構築
	DmqKbn := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqKbn );

	with DmqData do
	begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT                         '
		    +   '    SubKmkUse                  '	//	細目科目採用区分
            +   'FROM KmkMA                     '   //	勘定科目基本ﾏｽﾀ
            +   'WHERE (RDelKbn   = 0)          '	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		    +   '  AND (MasterKbn = 1)          '	//	ﾏｽﾀ区分(1:勘定科目)
		    +   '  AND (SumKbn    = 0)          '	//	実在/合計区分(0:実在)
		    +   '  AND (NCode     = :ExNCode)   '	//	外部ｺｰﾄﾞ
		    +   '  AND (CNCode    = 0)          ');	//	細目ｺｰﾄﾞ

		ParamByName ('ExNCode').AsFloat :=  NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();

			DmqKbn.Close();
			DmqKbn.Free();
			Result	:=	TRUE;
			Exit;
		end;

        // ﾚｺｰﾄﾞがあったら
		if ( EOF <> TRUE ) then
		begin
            // 区分のﾁｪｯｸのみ
			if ( Check ) then
			begin
                // 採用区分あり
				if ( (GetFld('SubKmkUse').AsInteger) = 1 )  then
					Flag	:=	TRUE;
			end
            // 採用区分なし
			else if ( (GetFld('SubKmkUse').AsInteger) = 0 ) then
            begin
(*
                DmqKbn.Close();
				DmqKbn.SQL.Add( 'UPDATE KmkMA SET               '   //	勘定科目基本ﾏｽﾀ
				            +   '     SubKmkUse   = 1)          '	//	細目科目採用区分(1:あり)
				            +   'WHERE (NCode     = :ExNCode)   '   //	外部ｺｰﾄﾞ
				            +   '  AND (CNCode    = 0)          '	//	細目ｺｰﾄﾞ
				            +   '  AND (MasterKbn = 1)          '	//	ﾏｽﾀ区分(1:勘定科目)
				            +   '  AND (SumKbn    = 0)          '	//	実在/合計区分(0:実在)
                            +   '  AND (RDelKbn   = 0)          ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

				DmqKbn.ParamByName('ExNCode').AsFloat   :=	NCode;

				// ｴﾗｰの判定
				if ( DmqKbn.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqKbn);
                    // ﾛｰﾙﾊﾞｯｸ(破棄)
					MDataModule.Rollback (dbCorp_Select);
					DmqKbn.Close();
					DmqKbn.Free();

					DmqData.Close();
					DmqData.Free();

					Result	:=	TRUE;
					Exit;
				end;

				// ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkMA_Kan	:=	TABLE_IN_UPDATE;
*) // <023>
            end
            // 細目採用区分がありで、諸口が削除された時採用区分をなしにする
            else if ( (GetFld('SubKmkUse').AsInteger) = 1 ) and ( Dispose = DISPOSE_DELETE ) then	//	細目採用ありかつ処理が削除の時
            begin
(*
                DmqKbn.Close();
				DmqKbn.SQL.Add('UPDATE KmkMA SET                '   //	勘定科目基本ﾏｽﾀ
				            +   '     SubKmkUse   = 0           '	//	細目科目採用区分(0:なし)
                            +   '    ,CodeDigit   = 0           '   //  ｺｰﾄﾞ桁数
                            +   '    ,CodeAttr    = 0           '   //  ｺｰﾄﾞ属性
				            +   'WHERE (NCode     = :ExNCode)   '   //	外部ｺｰﾄﾞ
				            +   '  AND (CNCode    = 0)          '	//	細目ｺｰﾄﾞ
				            +   '  AND (MasterKbn = 1)          '	//	ﾏｽﾀ区分(1:勘定科目)
				            +   '  AND (SumKbn    = 0)          '	//	実在/合計区分(0:実在)
                            +   '  AND (RDelKbn   = 0)          ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

				DmqKbn.ParamByName('ExNCode').AsFloat   :=  NCode;

				// ｴﾗｰの判定
				if ( DmqKbn.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp(DmqKbn);
                    // ﾛｰﾙﾊﾞｯｸ(破棄)
					MDataModule.Rollback (dbCorp_Select);
					DmqKbn.Close();
					DmqKbn.Free();

					DmqData.Close();
					DmqData.Free();

					Result	:=	TRUE;
					Exit;
				end;

				// ﾃｰﾌﾞﾙ更新履歴
				TableHistory.KmkMA_Kan	:=	TABLE_IN_UPDATE;
*) // <023>                
            end;
		end;
	end;

	DmqKbn.Close();
	DmqKbn.Free();
	DmqData.Close();
	DmqData.Free();

	Result	:=	FALSE;

end;

//************************************************************************
//*	Process			:	科目別補助採用ｸﾘｱ  <113>作成
//* Paramater		:	aKmkNCode : 科目内部ｺｰﾄﾞ
//* Return			:	True:正常/False:ｴﾗｰ
//************************************************************************
function TJNTCRP009001f.SubUseClear(aKmkNCode: Extended): Boolean;
var
	query		: TMQuery;
	kmkNCode	: String;
begin
	query := nil;
	Result := True;
	kmkNCode := IntToStr(Trunc(aKmkNCode));
	try
		query := TMQuery.Create(Self);
		MDataModule.SetDBInfoToQuery(dbCorp_Select, query );
		with query do
        begin
        	Close;
        	SQL.Clear;
            SQL.Add(' UPDATE KmkMA ');
            SQL.Add(' SET SubKmkUse = 0, CodeDigit = 0, CodeAttr = 0 ');
            SQL.Add(' WHERE MasterKbn = 1 ');
            SQL.Add(' AND SumKbn = 0 ');
            SQL.Add(' AND RDelKbn = 0 ');
            SQL.Add(' AND NCode = ' + kmkNCode);
            SQL.Add(' AND CNCode = 0 ');
            SQL.Add(' AND (SELECT COUNT(*) as Cnt ');
            SQL.Add('      FROM KmkMA ');
            SQL.Add('      WHERE MasterKbn = 2 ');
            SQL.Add('      AND SumKbn = 0 ');
            SQL.Add('      AND RDelKbn = 0 ');
            SQL.Add('      AND NCode = '+ kmkNCode + ') = 0 ');

            MDataModule.BeginTran(dbCorp_Select);
            if ExecSQL then MDataModule.Commit(dbCorp_Select);
    	end;
	finally
    	if dbCorp_Select.InTransaction then
        begin
        	ErrorMessageDsp(query);
            MDataModule.Rollback(dbCorp_Select);
            Result := False;
        end;

    	if Assigned(query) then
        begin
        	query.Close;
            query.Free;
        end;
    end;
end;

//************************************************************************
//*		Component		:	DZitsuGridBunseki ( TdxDBGridPickColumn )
//*							▼を押されたら分析ｺｰﾄﾞの検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo（MJS）   <004>
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridBunsekiNOEditButtonClick(Sender: TObject);
var
	lvExpSend   :   rcJNTExpSend;   // 親BPL送信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    lvExpRecv   :   rcJNTExpRecv;   // 親BPL受信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    iExpRtn     :   Integer;        // 戻り値
begin

	if ( gbHanteiFlag = TRUE ) then
	begin
		gbHanteiFlag	:=	FALSE;
	    Exit;
	end;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam( @lvExpSend );
    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pRec;                             // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;                     // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;       //
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;       //

//   lvExpSend.MasterKbn     :=  3;                  // ﾏｽﾀ区分 <043>削除
    lvExpSend.MasterKbn     :=  10;                  // ﾏｽﾀ区分 <043>追加
    lvExpSend.ModulKbn      :=  0;                  // ﾓｼﾞｭｰﾙ区分(共通=0)
    lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNo.
    lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';     // ﾂｰﾙﾊﾞｰｷｬﾌﾟｼｮﾝ
    lvExpSend.TableName     :=  'SKmkMA';           // ﾃｰﾌﾞﾙ名
//    lvExpSend.WhereStr      :=  'MASTERKBN = 10 AND SUMKBN = 0 AND RDelKbn = 0';// <043>削除
    lvExpSend.WhereStr      :=  'SUMKBN = 0 AND RDelKbn = 0';   // <043>追加
    lvExpSend.SortStr       :=  'Order By GCode';
    lvExpSend.TrRootCaption :=  '';

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
        Exit;

    // 中身あり
    if ( Length(Trim(lvExpRecv.GCode)) > 0 ) then
    begin
        MemZitsu.Open;
    	MemZitsu.Edit;
    	MemZitsu.FieldByName('BunsekiNO').AsInteger	:=	StrToInt(lvExpRecv.GCode);
    	MemZitsu.FieldByName('Bunseki').AsString	:=	lvExpRecv.NMK;
    	MemZitsu.Post;
    end
    else
    begin
        MemZitsu.Open;
    	MemZitsu.Edit;
		MemZitsu.FieldByName('BunsekiNO').AsInteger	:=	0;
    	MemZitsu.FieldByName('Bunseki').AsString	:=	'';
    	MemZitsu.Post;
    end;

end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*							Keyが押され時(合計科目Gird)
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	//  ↑カーソル or PageUp
	if ( Key = VK_UP ) or ( Key = VK_PRIOR ) then
	begin
		if ( DGoukeiGrid.DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	//	TAB AND SHIFT  ←カーソル and 編集中ではない
	if ((Key = VK_TAB) and (Shift = [ssShift])) or
				((Key = VK_LEFT) and (DGoukeiGrid.State <> tsEditing))then
	begin
		if ( DGoukeiGrid.FocusedColumn = 1 ) and ( DGoukeiGrid.DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	//	INSERTを押しても挿入不可にしている
	if (Key = VK_INSERT) then
		abort;
end;

//************************************************************************
//*		Component		:	DZitsuGrid ( TdxDBGrid )
//*							Keyが押され時(実在科目Gird)
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	//  ↑カーソル or PageUp
	if ( Key = VK_UP ) or ( Key = VK_PRIOR ) then
	begin
		if ( DZitsuGrid.DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	//	TAB AND SHIFT	←カーソル and 編集中ではない
	if ((Key = VK_TAB) and (Shift = [ssShift])) or
						((Key = VK_LEFT) and (DZitsuGrid.State <> tsEditing))then
	begin
		if ( DZitsuGrid.FocusedColumn = 1 ) and ( DZitsuGrid.DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	//	INSERTを押しても挿入不可にしている
	if (Key = VK_INSERT) then
		abort;
end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*							Keyが押され時(細目科目Gird)
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	//  ↑カーソル or PageUp
	if ( Key = VK_UP ) or ( Key = VK_PRIOR ) then
	begin
		if ( DSaimokuGrid.DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	//	TAB AND SHIFT	←カーソル and 編集中ではない
	if ((Key = VK_TAB) and (Shift = [ssShift])) or
						((Key = VK_LEFT) and (DSaimokuGrid.State <> tsEditing))then
	begin
		if ( DSaimokuGrid.FocusedColumn = 1 ) and ( DSaimokuGrid.DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	//	INSERTを押しても挿入不可にしている
	if (Key = VK_INSERT) then
		abort;
end;

//************************************************************************
//*		Component		:	MTab_N ( TMTab )
//*							Tabが変わる時
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MTab_NChange(Sender: TObject);
var
	sWork	        :	String;
	DmqData         :	TMQuery;
    dqMasterData    :   TMQuery;
	cNode	        :	TTreeNode;
//    wRec		    :	^TaikeiRec;			// <063> DEL
//    wRec2	        :	^TaikeiRec;         // <063> DEL
	wkRec	        :	^TaikeiRec;
    fDialogAdopt    :   Boolean;
    cDialogAdopt    :   TJNTCRP009001_D4F;
    cDialogRequisite:   TJNTCRP009001_D3F;
    nCodeDigit      :   Integer;
    nCodeAttr       :   Integer;
    nRetValue       :   TSyokuchiRetValue;
//    DummyFlag	    :	Boolean;           	// <063> DEL
	bCancel			:	Boolean;			// <063> ADD
    bSyokuchi		:	Boolean;			// <063> ADD
begin
    bCancel := False;

    case MTab_N.Items.Selected of
        // ----------------------
        //	    実在
        // ----------------------
        0:
        begin
            gbActiveFlag := ZITSUZAI;	// 実在<025>

            if ( gbFlag = FALSE ) then Exit;

            //	今表示している内容を保存
            MTab_N.BorderCaption	:=	gsBorderCaption;
            giTaihi_OyaNCode        :=  giTaihi_OyaNCodeSv;

			if ( giRightClick = FALSE ) then
            begin
                if ( MemGou.State in [dsInsert] ) then		//	新規登録時
                    MemGou.Delete;
                if ( MemSai.State in [dsInsert] ) then		//	新規登録時
                    MemSai.Delete;

                DZitsuGrid.SetFocus;
                DZitsuGrid.FocusedColumn	:=	1;
            end;
            giRightClick	:=	FALSE;
        end;
        // ----------------------
        //	    細目
        // ----------------------
        1:
        begin
            gbActiveFlag := SAIMOKU;		// 科目別補助<025>

            //	細目時はBorderCaptionを変える
            gsBorderCaption	    :=  MTab_N.BorderCaption;
            giTaihi_OyaNCodeSv  :=  giTaihi_OyaNCode;
            DmqData             :=  TMQuery.Create( Self );			        //	MQueryの構築
            MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		    //	DBとMQueryの接続

            cNode	:=	TreeView.Selected;
            wkRec	:=	cNode.Data;

            // ↓↓↓<023>
            // ---------------------------------------------------------
            //  選択科目に対する科目別補助採用が未採用の場合は
            //  メッセージを表示して、実在タブへフォーカスを移動させる。
            // ---------------------------------------------------------
            with DmqData do
            begin
                Close();
                SQL.Clear();
                SQL.Add('SELECT                     '
					+   '    SubKmkUse              '
                    +   'FROM KMKMA                 '
                    +   'WHERE MasterKbn = 1        '   //	ﾏｽﾀ区分(1:勘定科目)
                    +   '  AND SumKbn    = 0        '	//	実在/合計区分(0:実在)
                    +   '  AND NCode     = :ExNCode '	//	内部ｺｰﾄﾞ
                    +   '  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

                ParamByName('ExNCode').AsFloat  :=	wkRec.NCode;

                //	ｴﾗｰの判定
                if ( Open = FALSE ) then
                begin
                    ErrorMessageDsp(DmqData);
                    DmqData.Close;
                    DmqData.Free;
                    Exit;
                end;

                if ( EOF <> TRUE ) then
                begin
                    if ( GetFld('SubKmkUse').AsInteger = 0 ) then
                    begin
                        MJSMessageBoxEx (AOwner,
                                         '科目別補助が採用されていません。'#13#10
                                         + '会社基本情報登録で科目別補助の設定を行って下さい。',
                                         '確認',
                                         mjInformation,
                                         mjOk,
                                         mjDefOk,
                                         FALSE);

// <123> DEL St
						// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                        MTab_N.Items[0].Selected    :=  TRUE;
//                        MTab_N.Items[1].Selected    :=  FALSE;
//                        MTab_N.Items[2].Selected    :=  FALSE;
// <123> DEL Ed
                        DmqData.Close();
                        DmqData.Free();
// <123> ADD St
						// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
						MTab_N.Items.Selected := 0;
// <123> ADD ED
						Exit;
                    end;
                end;
                DmqData.Close();
            end;
            // ↑↑↑<023>

            with DmqData do
            begin
                Close();
                SQL.Clear;
                SQL.Add('SELECT                     ');
                SQL.Add('   DecoKbn                 ');	//	装飾区分
                SQL.Add('FROM KmkMB                 '); //	勘定科目詳細情報
                SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
                SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
                SQL.Add('  AND NCode     = :ExNCode ');	//	内部ｺｰﾄﾞ
                SQL.Add('  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

                ParamByName('ExNCode').AsFloat  :=	wkRec.NCode;

                //	ｴﾗｰの判定
                if ( Open = FALSE ) then
                begin
                    ErrorMessageDsp(DmqData);
                    DmqData.Close;
                    DmqData.Free;
                    Exit;
                end;

                if ( EOF <> TRUE ) then
                begin
                    sWork	                :=	GetSousyoku(wkRec.Name,(GetFld('DecoKbn').AsInteger));
                    MTab_N.BorderCaption	:=	IntToStr(wkRec.GCode) + ' ' + sWork;
                    giTaihi_OyaNCode        :=  wkRec.NCode;
                end;

            // ---------------------------------------------------------
			//  細目ｺｰﾄﾞの属性対応
            // ---------------------------------------------------------
                with DmqData do
                begin
                    Close();
                    SQL.Clear();
                    SQL.Add('SELECT                     '
                        +   '    CodeAttr               '
                        +   '   ,CodeDigit              '
                        +   'FROM KMKMA                 '
                        +   'WHERE MasterKbn = 1        '   //	ﾏｽﾀ区分(1:勘定科目)
                        +   '  AND SumKbn    = 0        '	//	実在/合計区分(0:実在)
                        +   '  AND NCode     = :ExNCode '	//	内部ｺｰﾄﾞ
                        +   '  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

                    ParamByName('ExNCode').AsFloat  :=	wkRec.NCode;

                    //	ｴﾗｰの判定
                    if ( Open = FALSE ) then
                    begin
                        ErrorMessageDsp(DmqData);
                        DmqData.Close;
                        DmqData.Free;
                        Exit;
                    end;

                    if ( EOF <> TRUE ) then
                    begin
                        wkKmk.SaimokuKeta   :=  GetFld('CodeDigit').AsInteger;
                        wkKmk.SaimokukZoku  :=  GetFld('CodeAttr').AsInteger;

                        case wkKmk.SaimokukZoku of
                            0,1:
                            begin
                                DSaimokuGridSCode.MaxLength     :=  wkKmk.SaimokuKeta;
                                DSaimokuGridSCode.Alignment     :=  taRightJustify;
                                DSaimokuGridSCode.EditAlignment :=  taRightJustify;
                            end;
							2:
                            begin
                                DSaimokuGridSCode.MaxLength     :=  wkKmk.SaimokuKeta;
                                DSaimokuGridSCode.Alignment     :=  taLeftJustify;
                                DSaimokuGridSCode.EditAlignment :=  taLeftJustify;
                            end;
                        end;
                    end;
                end;

                DmqData.Close;
                DmqData.Free;

            end;

            gbBorderFlag	:=	TRUE;

            if ( giRightClick = FALSE ) and ( P_Grid.Visible = TRUE ) then
            begin
                if ( MemGou.State in [dsInsert] ) then		    //	新規登録時
                    MemGou.Delete;
                if ( MemZitsu.State in [dsInsert] ) then		//	新規登録時
                    MemZitsu.Delete;

                if ( gbFlag = TRUE ) then
                begin
                    DSaimokuGrid.SetFocus;
                    DSaimokuGrid.FocusedColumn	:=	1;
                end;
            end;
            giRightClick	:=	FALSE;

            // 細目科目ﾀﾌﾞﾌｫｰｶｽ時に、対象となる勘定科目の細目科目が1件もない場合
            // ｺｰﾄﾞ設定ﾀﾞｲｱﾛｸﾞ及び諸口ﾀﾞｲｱﾛｸﾞを表示する。

            dqMasterData             :=  TMQuery.Create( Self );	 	    //	MQueryの構築
            MDataModule.SetDBInfoToQuery( dbCorp_Select, dqMasterData );	//	DBとMQueryの接続

			fDialogAdopt    :=  TRUE;

        // -------------------------------------------------
        //
        //  採用設定情報画面の表示
        //
        // -------------------------------------------------
            with dqMasterData do
            begin
                Close();
                SQL.Clear();
                SQL.Add('SELECT MasterKbn FROM KmkMA    '
                    +   'WHERE  MasterKbn = 2           '
                    +   '  AND  RDelKbn   = 0           '
                    +   '  AND  NCODE     = :nExNCode   ');

                ParamByName('nExNCode').AsFloat  :=  wkRec.NCode;

                Open();

                if	( not EOF ) then
                    fDialogAdopt	:= FALSE;

            end;

            // 存在しない場合
            if	( fDialogAdopt ) then
            begin
                // 参照の場合
                if	( giReferFlag = REFER ) then
                begin
                    dqMasterData.Close ();
                    dqMasterData.Free  ();

// <123> MOD St
					// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                    // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                    MTab_N.Items[0].Selected    :=  TRUE;
//                    MTab_N.Items[1].Selected    :=  FALSE;
//                    MTab_N.Items[2].Selected    :=  FALSE;
					// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
					MTab_N.Items.Selected := 0;
// <123> MOD ED

                    Exit;
                end;

// <063> ADD start if文追加 子会社では採用情報ﾀﾞｲｱﾛｸﾞを出さない
				if m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_CHILD then
				begin
// <063> ADD end

	                // 採用情報設定画面の表示
	                cDialogAdopt    :=  TJNTCRP009001_D4F.fnCreateDialog (Pointer (m_pRec),
	                                                                      Self,
	                                                                      dbCorp_Select,
	                                                                      wkRec.NCode);
	                // ｷｬﾝｾﾙ時
	                if	( cDialogAdopt.ShowModal () = mrCancel ) then
	                begin
	                  dqMasterData.Close ();
	                  dqMasterData.Free  ();

// <123> MOD St
						// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//	                  // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//	                  MTab_N.Items[0].Selected    :=  TRUE;
//	                  MTab_N.Items[1].Selected    :=  FALSE;
//	                  MTab_N.Items[2].Selected    :=  FALSE;
						// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
						MTab_N.Items.Selected := 0;
// <123> MOD Ed

	                  Exit;
	                end;
// <063> ADD start if文終わり
				end;
// <063> ADD end
            end;

        // -------------------------------------------------
        //
        //  諸口設定情報画面の表示
        //
        // -------------------------------------------------

			// -----<077> Add-St-----
			SessionPractice(C_ST_PROCESS);

			try
			// -----<077> Add-Ed-----


            with (dqMasterData) do
            begin
                Close();
                SQL.Clear();
                SQL.Add('SELECT NCODE                   '
                    +   'FROM KmkMA                     '
                    +   'WHERE SyokuchiKbn = 1          '
                    +   '  AND RDelKbn     = 0          '
                    +   '  AND NCODE       = :nExNCode  '
                    +   '  AND SUMKBN      = 0          '
                    +   '  AND Masterkbn   = 2          ');

                ParamByName('nExNCode').AsFloat :=  wkRec.NCode;


                Open ();

                if	(EOF) then
                begin

                    // 科目別補助のｺｰﾄﾞ属性/桁数の取得
                    SQL.Clear();
                    SQL.Add('SELECT                         '
                        +   '    CodeDigit                  '
                        +   '   ,CodeAttr                   '
                        +   'FROM KmkMA                     '
                        +   'WHERE RDelKbn     = 0          '
                        +   '  AND NCODE       = :nExNCode  '
                        +   '  AND SUMKBN      = 0          '
                        +   '  AND Masterkbn   = 1          ');

					ParamByName('nExNCode').AsFloat  :=  wkRec.NCode;

                    Open ();

                    if	( EOF ) then
                    begin
                        dqMasterData.Close ();
                        dqMasterData.Free  ();

// <123> MOD St
						// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                        MTab_N.Items[0].Selected    :=  TRUE;
//                        MTab_N.Items[1].Selected    :=  FALSE;
//                        MTab_N.Items[2].Selected    :=  FALSE;
						// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
						MTab_N.Items.Selected := 0;
// <123> MOD Ed

                        Exit;
                    end
                    else
                    begin
                        nCodeDigit  :=  GetFld('CodeDigit') .AsInteger;
                        nCodeAttr   :=  GetFld('CodeAttr')  .AsInteger;
                    end;

                    m_SyokuchiDlg   :=  FALSE;

// <063> MOD start
                    // 諸口画面の表示
(*                    cDialogRequisite	:= TJNTCRP009001_D3F.fnCreateDialog (Pointer (m_pRec),
                                                                             @nRetValue,
                                                                             Self,
                                                                             dbCorp_Select,
                                                                             nCodeDigit,
                                                                             nCodeAttr,
                                                                             wkRec.GCode,
                                                                             wkRec.NCode,
                                                                             m_strValidCharacters);

                    if	(cDialogRequisite.ShowModal () = mrCancel) then
                    begin
						cDialogRequisite.Close ();
                        cDialogRequisite.Free  ();
*)
					MDataModule.BeginTran (dbCorp_Select);		// 子会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始
					ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);	// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始

					// 子会社の場合、親会社にあったら同期をとる
					if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
                    begin
                    						// 親会社に諸口があったら関連付ける
                    	if not ImportOyaSyokuchi(wkRec.NCode, bSyokuchi) then
                        begin
// <123> DEL St
							// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//	                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//    	                    MTab_N.Items[0].Selected    :=  TRUE;
//	                        MTab_N.Items[1].Selected    :=  FALSE;
//    	                    MTab_N.Items[2].Selected    :=  FALSE;
// <123> DEL Ed
							MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
// <123> ADD St
							// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
							MTab_N.Items.Selected := 0;
// <123> ADD ED
	                        Exit;
                       	end;
                    end;
											// ｸﾞﾙｰﾌﾟ会計の子会社以外 または　子会社で諸口がない場合
					if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_CHILD) or
                    	(not bSyokuchi) then
					begin
    	                cDialogRequisite	:= TJNTCRP009001_D3F.fnCreateDialog (Pointer (m_pRec),
                                                                             @nRetValue,
                                                                             Self,
                                                                             dbCorp_Select,
                                                                             nCodeDigit,
                                                                             nCodeAttr,
                                                                             wkRec.GCode,
                                                                             wkRec.NCode,
                                                                             m_strValidCharacters);
                        if (cDialogRequisite.ShowModal () = mrCancel) then
                        begin
                        	bCancel := True;
        	                cDialogRequisite.Close ();
							cDialogRequisite.Free  ();
                        end;
        	        end;

                    if bCancel then 		// 諸口を追加しない場合
                    begin
// <063> MOD end
// <123> DEL St
						// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                        MTab_N.Items[0].Selected    :=  TRUE;
//                        MTab_N.Items[1].Selected    :=  FALSE;
//                        MTab_N.Items[2].Selected    :=  FALSE;
// <123> DEL Ed
// <063> ADD start
						MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
// <063> ADD end
// <123> ADD St
						// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
						MTab_N.Items.Selected := 0;
// <123> ADD ED
                        Exit;
                    end
                    else
                    begin
                        if ( Syokuchi(wkRec.GCode,FALSE) = FALSE ) and
                           ( gbChangeFlg           = FALSE ) and
                           ( gbT_FusenFlag         = FALSE )then
                        begin
                            m_SyokuchiDlg   :=  TRUE;

                            MemSai.Open;
                            MemSai.Append;
                            MemSai.FieldByName('SCode').AsString			:=	nRetValue.rcExCode;
                            MemSai.FieldByName('SRen').AsString				:=	nRetValue.rcRenso;
                            MemSai.FieldByName('SLongName').AsString		:=	nRetValue.rcLName;
                            MemSai.FieldByName('SSName').AsString			:=	nRetValue.rcSName;
                            MemSai.Post;
                        end;


                        wkKmk.SaimokuKeta   :=  nCodeDigit;
                        wkKmk.SaimokukZoku  :=  nCodeAttr;

						case wkKmk.SaimokukZoku of
                            0,1:
                            begin
                                DSaimokuGridSCode.MaxLength     :=  wkKmk.SaimokuKeta;
                                DSaimokuGridSCode.Alignment     :=  taRightJustify;
                                DSaimokuGridSCode.EditAlignment :=  taRightJustify;
                            end;
                            2:
                            begin
                                DSaimokuGridSCode.MaxLength     :=  wkKmk.SaimokuKeta;
                                DSaimokuGridSCode.Alignment     :=  taLeftJustify;
                                DSaimokuGridSCode.EditAlignment :=  taLeftJustify;
                            end;
                        end;
                    end;

                    // 採用ﾌﾗｸﾞをONにする
// <063> ADD start
																// ｸﾞﾙｰﾌﾟ会計の子会社の場合
					if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
					begin
						dqMasterData.Close;
		        												// 親会社DBとMQueryの接続
						MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, dqMasterData);
					end;
// <063> ADD end

                    Close();
                    SQL.Clear();
                    SQL.Add('UPDATE KmkMA SET               '); //	勘定科目基本ﾏｽﾀ
// <023>                    SQL.Add('     SubKmkUse  = 1            '); //	細目科目採用区分(1:あり)
                    SQL.Add('    CodeAttr    = :Attr        ');
                    SQL.Add('   ,CodeDigit   = :Digit       ');
                    SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode '); //  更新担当者内部ｺｰﾄﾞ<080>
                    SQL.Add('WHERE NCode     = :ExNCode     '); //	外部ｺｰﾄﾞ
                    SQL.Add('  AND CNCode    = 0            ');	//	細目ｺｰﾄﾞ
                    SQL.Add('  AND MasterKbn = 1            ');	//	ﾏｽﾀ区分(1:勘定科目)
					SQL.Add('  AND SumKbn    = 0            ');	//	実在/合計区分(0:実在)
                    SQL.Add('  AND RDelKbn   = 0            ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

                    ParamByName('ExNCode').AsFloat   :=	wkRec.NCode;
                    ParamByName('Attr').AsInteger   := wkKmk.SaimokukZoku;
                    ParamByName('Digit').AsInteger  := wkKmk.SaimokuKeta;
                    ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

                    //	ｴﾗｰの判定
                    if ( ExecSQL = FALSE ) then
                    begin
                        ErrorMessageDsp(dqMasterData);
// <123> DEL St
						// 下記だとMTab_NChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                        MTab_N.Items[0].Selected    :=  TRUE;
//                        MTab_N.Items[1].Selected    :=  FALSE;
//                        MTab_N.Items[2].Selected    :=  FALSE;
// <123> DEL Ed

                        dqMasterData.Close ();
                        dqMasterData.Free  ();
// <063> ADD start
						MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
// <063> ADD end
// <123> ADD St
						// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
						MTab_N.Items.Selected := 0;
// <123> ADD ED
                        Exit;
                    end;
                end;

                dqMasterData.Close ();
                dqMasterData.Free  ();

                m_SyokuchiDlg   :=  FALSE;
// <063> ADD start
				MDataModule.Commit(dbCorp_Select);		// 子会社のｺﾐｯﾄ
				ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBのｺﾐｯﾄ
// <063> ADD end
            end;

            // -----<077> Add-St-----
			finally
				SessionPractice(C_ED_PROCESS);
			end;
			// -----<077> Add-Ed-----

        end;
        // ----------------------
        //	    合計
        // ----------------------
        2:
        begin
            gbActiveFlag := GOUKEI;		// 合計<025>

            if ( gbFlag = FALSE ) then Exit;

            //	今表示している内容を保存
            MTab_N.BorderCaption	:=	gsBorderCaption;
            giTaihi_OyaNCode        :=  giTaihi_OyaNCodeSv;

            if ( giRightClick = FALSE ) and ( P_Grid.Visible = TRUE ) then
            begin
                if ( MemZitsu.State in [dsInsert] ) then		//	新規登録時
                    MemZitsu.Delete;
                if ( MemSai.State in [dsInsert] ) then		    //	新規登録時
                    MemSai.Delete;

                DGoukeiGrid.SetFocus;
                DGoukeiGrid.FocusedColumn	:=	1;
            end;
            giRightClick	:=	FALSE;
        end;
    end;
	gbFlag	:=	TRUE;
{
	case MTab_N.Items.Selected of	    // hiro0705
		0: gbActiveFlag := ZITSUZAI;	// 実在
		1: gbActiveFlag := SAIMOKU;		// 科目別補助
		2: gbActiveFlag := GOUKEI;		// 合計
	end;
} // <025>

end;

//************************************************************************
//*		Component		:	MTab_N ( TMTab )
//*							Tabでｷｰが押された時
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MTab_NKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
	sWork		:	String;
	DmqData		:	TMQuery;
	cNode		:	TTreeNode;
	wkRec		:	^TaikeiRec;
	sJitsuName	:	String;
begin

    //	LeftKeyが押されかつﾀﾌﾞが実在時は何もしない
	if ( Key = VK_LEFT ) and ( MTab_N.Items.Selected = 0 ) then
		Exit;

    //	RightKeyが押されかつﾀﾌﾞが合計時は何もしない
	if ( Key = VK_Right ) and ( MTab_N.Items.Selected = 2 ) then
		Exit;

	if ( Key = VK_LEFT ) or ( Key = VK_Right ) then
	begin
        gbFlag	:=	FALSE;

		//	Borderの表示内容を勘定科目時と細目科目時で切り替える処理
		//	選択されているNodeが実在の時Tabの
		cNode	:=	TreeView.Selected;
		wkRec	:=	cNode.Data;

        // ----------------------
        //	    実在
		// ----------------------
		if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
		begin

			DmqData := TMQuery.Create( Self );					        //	MQueryの構築
			MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

			with DmqData do
			begin
				Close();
				SQL.Clear;
				SQL.Add('SELECT                     ');
				SQL.Add('   DecoKbn                 ');	//	装飾区分
				SQL.Add('FROM KmkMB                 '); //	勘定科目詳細情報
				SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
				SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
                SQL.Add('  AND NCode     = :ExNCode ');	//	内部ｺｰﾄﾞ
                SQL.Add('  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

                ParamByName('ExNCode').AsFloat  :=	wkRec.NCode;

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					DmqData.Close;
					DmqData.Free;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
					sWork	    :=	GetSousyoku(wkRec.Name,(GetFld('DecoKbn').AsInteger));
					sJitsuName	:=	IntToStr(wkRec.GCode) + ' ' + sWork;
				end;
			end;

			DmqData.Close;
			DmqData.Free;

			case MTab_N.Items.Selected of
                // ----------------------
                //	    実在・合計
                // ----------------------
				0,2:
				begin
                    //	今表示している内容を退避
					gsBorderCaption	        :=	MTab_N.BorderCaption;
					MTab_N.BorderCaption	:=	sJitsuName;
                    giTaihi_OyaNCode        :=  wkRec.NCode;
                    giTaihi_OyaNCodeSv      :=  giTaihi_OyaNCode;
				end;
                // ----------------------
                //	    細目
                // ----------------------
				1:
				begin
                    //	退避している内容を表示
					MTab_N.BorderCaption	:=	gsBorderCaption;
                    giTaihi_OyaNCode        :=  giTaihi_OyaNCodeSv;
				end;
			end;
		end;
	end;

	if  ( Key = VK_ESCAPE ) or ( Key = VK_END ) then
		MComboBox.SetFocus;

end;

//**********************************************************************
//*		Proccess	:	Nodeの変更
//*		Name		:	H.Endo
//*		Date		:	2000/09/04
//*		Parameter	:	CNode		:
//*						PNode		:
//*		Return		:
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.ChangeNode(CNode, PNode: TTreeNode): TTreeNode;
var
	wkRec		:	^TaikeiRec;
	iCount		:	Integer;
	makeNode	:	TTreeNode;
begin
    result   := Nil;
    makeNode := Nil;

    wkRec := CNode.Data;

    if (wkRec^.MasKbn = 1) and (wkRec^.kbn = 1) then
	begin
        makeNode    :=  Treeview.Items.AddChildObject(PNode,MakeDspString(wkRec.GCode,wkRec.Name),wkRec);
        result      :=  makeNode;

        makeNode.ImageIndex := 0;
     	makenode.SelectedIndex := 1;
	end
    else if (wkRec^.MasKbn = 1) and (wkRec^.kbn = 0) then
	begin
        makeNode    :=  Treeview.Items.AddChildObject(PNode,MakeDspString(wkRec.GCode,wkRec.Name),wkRec);
        result      :=  makeNode;

        makeNode.ImageIndex := 2;
		makenode.SelectedIndex := 8;
	end
	else if (wkRec^.MasKbn = 2) then
    begin
        makeNode    :=  Treeview.Items.AddChildObject(PNode,MakeDspString_Sai(wkRec.SubCode,
                                                                              wkRec.Name,
                                                                              wkRec.CodeAttr,
                                                                              wkRec.CodeDigit
                                                                              ),wkRec);
        result      :=  makeNode;

        makeNode.ImageIndex := 3;
		makenode.SelectedIndex := 10;
	end;

	for iCount := 0 to CNode.Count - 1 do
	begin
		ChangeNode( Cnode.Item[iCount],makeNode );
	end;

end;

//************************************************************************
//*		Component		:	DZitsuGridGrid ( TdxDBGrid )
//*							実在のGridを抜けた時
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridExit(Sender: TObject);
begin
	gbActiveFlag	:=	ZITSUZAI;
//	gbTreeFlag		:=	FALSE;

end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*							細目のGridを抜けた時
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridExit(Sender: TObject);
begin
	gbActiveFlag	:=	SAIMOKU;
//	gbTreeFlag		:=	FALSE;

end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*							合計のGridを抜けた時
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridExit(Sender: TObject);
begin
	gbActiveFlag	:=	GOUKEI;
//	gbTreeFlag		:=	FALSE;

end;

//************************************************************************
//*		Component		:	DSourceZitsu ( TDataSource )
//*							ｺｰﾄﾞ入力可・不可(実在科目)
//*		Event			:	OnStateChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSourceZitsuStateChange(Sender: TObject);
begin
	if (MemZitsu.State in [dsInsert]) then
	begin
		MemZitsuCode.ReadOnly := FALSE;
//		DZitsuGrid.Columns[1].ReadOnly := FALSE;
	end
	else
	begin
		MemZitsuCode.ReadOnly := TRUE;
//		DZitsuGrid.Columns[1].ReadOnly := TRUE;
	end;

	if (MemZitsu.Active) then
	begin
		if (MemZitsu.RecordCount = 0) then
		begin
			MemZitsuCode.ReadOnly := FALSE;
//			DZitsuGrid.Columns[1].ReadOnly := FALSE;
		end;
	end;
end;

//************************************************************************
//*		Component		:	DSourceSai ( TDataSource )
//*							ｺｰﾄﾞ入力可・不可(細目科目)
//*		Event			:	OnStateChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSourceSaiStateChange(Sender: TObject);
begin
	if (MemSai.State in [dsInsert]) then
	begin
		MemSaiSCode.ReadOnly := FALSE;
//		DSaimokuGrid.Columns[1].ReadOnly := FALSE;
	end
	else
	begin
		MemSaiSCode.ReadOnly := TRUE;
//		DSaimokuGrid.Columns[1].ReadOnly := TRUE;
	end;

	if (MemSai.Active) then
	begin
		if (MemSai.RecordCount = 0) then
		begin
			MemSaiSCode.ReadOnly := FALSE;
//			DSaimokuGrid.Columns[1].ReadOnly := FALSE;
		end;
	end;
end;

//************************************************************************
//*		Component		:	DSourceGou ( TDataSource )
//*							ｺｰﾄﾞ入力可・不可(合計科目)
//*		Event			:	OnStateChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSourceGouStateChange(Sender: TObject);
begin
	if (MemGou.State in [dsInsert]) then
	begin
		MemGouGCode.ReadOnly := FALSE;
//		DGoukeiGrid.Columns[1].ReadOnly := FALSE;
	end
	else
	begin
		MemGouGCode.ReadOnly := TRUE;
//		DGoukeiGrid.Columns[1].ReadOnly := TRUE;
	end;

	if (MemGou.Active) then
	begin
		if (MemGou.RecordCount = 0) then
		begin
			MemGouGCode.ReadOnly := FALSE;
//			DGoukeiGrid.Columns[1].ReadOnly := FALSE;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	特定科目情報取得
//*		Name		:	H.Endo
//*		Date		:	2000/09/19
//*		Parameter	:	Code		:	特定ｺｰﾄﾞ
//*						Mas			:	ﾏｽﾀ区分
//*						Sum			:	実在/合計区分
//*		Return		:	特定科目の科目ｺｰﾄﾞ
//*		History		:	9999/99/99	X.Xxxx
//*						2005.01.31  Y.Mogi(LEAD)    内部ｺｰﾄﾞ対応
//**********************************************************************
function TJNTCRP009001f.GetKmkInfo(Code: Integer; Mas:	Integer; var Sum: Byte): Extended;
var
	DmqData		    :	TMQuery;
	iKamokuNCode	:	Extended;
begin
	//	初期化処理
	iKamokuNCode	:=	0;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//	特定科目情報から科目ｺｰﾄﾞを取得する
	with DmqData do
	begin
		Close();
		SQL.Clear;
		SQL.ADD('SELECT                     ');
		SQL.ADD('    NCode                  ');	//	科目ｺｰﾄﾞ
		SQL.ADD('   ,SumKbn                 ');	//	実在/合計区分
		SQL.ADD('FROM KmkInfo               '); //	特定科目情報
		SQL.ADD('WHERE  SpeCode   = :Code   '); //	特定科目ｺｰﾄﾞ
		SQL.ADD('  AND  MasterKbn = :MasKbn '); //	ﾏｽﾀ区分
		ParamByName('Code'	).AsInteger := Code;
		ParamByName('MasKbn').AsInteger := Mas;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Result	:=	0;
			Exit;
		end;

		if EOF <> TRUE then
		begin
			iKamokuNCode    :=	GetFld('NCode' ).AsFloat;
			Sum			    :=	GetFld('SumKbn').AsInteger;
		end;
	end;
	DmqData.Close;
	DmqData.Free;

	result	:=	iKamokuNCode;
end;

//**********************************************************************
//*		Proccess	:	特定科目情報取得 FormCreate時 <114>ADD
//*		Return		:	True:正常/False:ｴﾗｰ
//**********************************************************************
function TJNTCRP009001f.SetKmkInfoInit(): Boolean;
var
	query 		: TMQuery;
    fukugoIndex	: Integer;
    taxIndex	: Integer;
begin
	Result 			:= True;
    fukugoIndex		:= 0;
    taxIndex		:= 0;
    query           := Nil;

	try
    	query := TMQuery.Create(Self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, query);

        with query do
        begin
        	Close;
            SQL.Clear;
            SQL.Add(' SELECT SpeCode, NCode ');
            SQL.Add(' FROM KmkInfo ');
            SQL.Add(' WHERE MasterKbn = 1 ');
            SQL.Add(' AND (SpeCode IN ( ');
            SQL.Add(' 10104, ');	//	資産の部
            SQL.Add(' 10107, ');	//	負債及び資本の部
            SQL.Add(' 10201, ');	//	売上高
            SQL.Add(' 10203, ');	//	売上原価
            SQL.Add(' 10204, ');	//	売上総利益
            SQL.Add(' 10205, ');	//	販売費及び一般管理費
            SQL.Add(' 10206, ');	//	営業利益
            SQL.Add(' 10207, ');	//	経常利益
            SQL.Add(' 10208, ');	//	税引前利益
            SQL.Add(' 10209, ');	//	法人税等
            SQL.Add(' 10210, ');	//	法人税調整額
            SQL.Add(' 10211, ');	//	当期利益
            SQL.Add(' 10212, ');	//	前期繰越利益
            SQL.Add(' 10213, ');	//	過年度税効果調整額
            SQL.Add(' 10214, ');	//	目的積立金取崩
            SQL.Add(' 10215, ');	//	中間配当金
            SQL.Add(' 10216, ');	//	利益準備金
            SQL.Add(' 10217, ');	//	当期未処分利益
            SQL.Add(' 10202, ');	//	製造の部
            SQL.Add(' 10218, ');	//	原価の部/工事原価の部
            SQL.Add(' 10301, ');	//	複合科目
            SQL.Add(' 10302, ');	//	資金複合科目
            SQL.Add(' 10303) ');	//	非会計複合科目
            SQL.Add(' ) ');
            SQL.Add('  OR (SpeCode BETWEEN 30101 AND 30109)');	// 消費税関係科目
            SQL.Add(' ORDER BY SpeCode ');

            if not Open then
            begin
            	ErrorMessageDsp(query);
                Result := False;
                Exit;
            end;

            while not Eof do
            begin
                case GetFld('SpeCode').AsInteger of
                	//特殊科目配列は要素数で見ているところがあるので、順番は固定する
                    10104: aTokuteiKmkCode[0] := GetFld('NCode').AsInteger;		//	資産の部
                    10107: aTokuteiKmkCode[1] := GetFld('NCode').AsInteger;		//	負債及び資本の部
                    10201: aTokuteiKmkCode[2] := GetFld('NCode').AsInteger;		//	売上高
                    10203: aTokuteiKmkCode[3] := GetFld('NCode').AsInteger;		//	売上原価
                    10204: aTokuteiKmkCode[4] := GetFld('NCode').AsInteger;		//	売上総利益
                    10205: aTokuteiKmkCode[5] := GetFld('NCode').AsInteger;		//	販売費及び一般管理費
                    10206: aTokuteiKmkCode[6] := GetFld('NCode').AsInteger;		//	営業利益
                    10207: aTokuteiKmkCode[7] := GetFld('NCode').AsInteger;		//	経常利益
                    10208: aTokuteiKmkCode[8] := GetFld('NCode').AsInteger;		//	税引前利益
                    10209: aTokuteiKmkCode[9] := GetFld('NCode').AsInteger;		//	法人税等
                    10210: aTokuteiKmkCode[10] := GetFld('NCode').AsInteger;	//	法人税調整額
                    10211: aTokuteiKmkCode[11] := GetFld('NCode').AsInteger;	//	当期利益
                    10212: aTokuteiKmkCode[12] := GetFld('NCode').AsInteger;	//	前期繰越利益
                    10213: aTokuteiKmkCode[13] := GetFld('NCode').AsInteger;	//	過年度税効果調整額
                    10214: aTokuteiKmkCode[14] := GetFld('NCode').AsInteger;	//	目的積立金取崩
                    10215: aTokuteiKmkCode[15] := GetFld('NCode').AsInteger;	//	中間配当金
                    10216: aTokuteiKmkCode[16] := GetFld('NCode').AsInteger;	//	利益準備金
                    10217: aTokuteiKmkCode[17] := GetFld('NCode').AsInteger;	//	当期未処分利益
                    10202: aTokuteiKmkCode[18] := GetFld('NCode').AsInteger;	//	製造の部
                    10218: aTokuteiKmkCode[19] := GetFld('NCode').AsInteger;	//	原価の部/工事原価の部
                    10301..10303:
                    begin
                        sFukuKmk[fukugoIndex] := GetFld('NCode').AsInteger;
                        Inc(fukugoIndex);
                    end;
                    30101..30109:
                    begin
                        m_aTaxInfo[taxIndex] := GetFld('NCode').AsInteger;
                        Inc(taxIndex);
                    end;
                end;
            	Next;
			end;
        end;
    finally
    	if Assigned(query) then
        begin
        	query.Close;
            query.Free;
        end;
    end;
end;

//-----------------------------------------------------------------------------
// GetSKmkMA()
//	< 分析名称取得処理 >
//      PARAM   : MasterKbn		:	SHIKINGURI(3)・BUNSEKI(10)
//				  Code			:	資金繰・分析外部ｺｰﾄﾞ
//				  YouBun		:	要約分析内部ｺｰﾄﾞ
//      RETURN  : 簡略名称
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.GetSKmkMA(MasterKbn: Integer; Code: Integer; var YouBun: Integer): String;
var
	DmqData			:	TMQuery;				//	管理科目基本ﾏｽﾀ用のQuery
	sBunsekiName    :	String;				    //	分析名称
    iLoop,iMasKbn   :   Integer;
begin

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	// 管理科目基本ﾏｽﾀ(SKmkMA)から分析名称を取得する
	with DmqData do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT SimpleName ,AnalyzeCode FROM SKmkMA     '
            +   'WHERE  (MasterKbn = :MasKbn)                   '
			+   '  AND  (SumKbn    = 0)                         '
            +   '  AND  (RDelKbn   = 0)                         '
            +   '  AND  (GCode     = :Code)                     ');

		ParamByName('MasKbn')   .AsInteger  :=  MasterKbn;
		ParamByName('Code')     .AsInteger	:=  Code;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( DmqData );
			DmqData.Close();
			DmqData.Free();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			sBunsekiName	:=	GetFld('SimpleName').AsString;
			if GetFld('AnalyzeCode').AsInteger = 0 then
				YouBun	:=	999
			else
				YouBun	:=	GetFld('AnalyzeCode').AsInteger;
		end
		else
		begin
			sBunsekiName	:=  '';
			YouBun	        :=	9999;
		end;
	end;

	DmqData.Close();
	DmqData.Free();

	Result  :=  sBunsekiName;

end;

//************************************************************************
//*		Component		:	PopupMenu ( TPopupMenu )
//*							Popup表示前に使用可・不可の設定
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.PopupMenuChange(Sender: TObject; Source: TMenuItem;
  Rebuild: Boolean);
var
	Taikei 		:	^TaikeiRec;
	TaikeiOya	:	^TaikeiRec;
	wkRec		:	^TaikeiRec;
	wkNode		:	TTreeNode;
	wkNodeOYA	:	TTreeNode;
	wkTaikeiOya	:	^TaikeiRec;
	cNode		:	TTreeNode;
	cNodeOya	:	TTreeNode;
	iLoop		:	Integer;
	iCount		:	Integer;
	iCount2		:	Integer;
	iKamoku		:	Integer;
	iKamokuNCode	:	Extended;
	SumKbn		:	Byte;			//	実在/合計区分
begin
	iCount	:=	0;
	iCount2	:=	0;
	SumKbn	:=  0;

	cNode	:=	TreeView.Selected;
	if cNode = nil then
		exit;

	Taikei	:=	cNode.Data;
	cNodeOya	:=	cNode.Parent;
	if cNodeOya = nil then
	begin
		if (Taikei.NotAdd = 0) then		//	はぐれ時
		begin
			if TreeView.Selected.Count <> 0 then	//	選択されたNODEに子供があるかないかﾁｪｯｸ
				MI_Delete.Enabled		:=	FALSE;
		end;
//<096> ADD St
        // コピー元とコピー先が同じコードは貼り付け禁止
        if (grCopyPaste.GCode = Taikei.GCode) then
        begin
            MI_Paste.Enabled := False;
        end;
//<096> ADD Ed
		exit;
	end;
	TaikeiOya	:=	cNodeOya.Data;

	//	体系削除の使用可・不可の設定
	if Taikei.MasKbn = 1 then
	begin
		//	ｺﾋﾟｰしたものがあれば体系削除を使用可にする。
		for iLoop := 0 to TreeView.Items.Count-1 do
		begin
			wkNode		:=	TreeView.Items[iLoop];
			wkRec		:=	wkNode.Data;
			wkNodeOya	:=	wkNode.Parent;
			if (wkNodeOya = nil) then
			begin
				iKamoku	:=	ReturnKmkCode(MComboBox.ItemIndex);

				iKamokuNCode	:=	GetKmkInfo(iKamoku,1,SumKbn);	//	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)
            end
			else
			begin
				wkTaikeiOya	:=	wkNodeOya.Data;
				iKamokuNCode	:=	wkTaikeiOya.NCode;
			end;

			if (wkRec^.NCode = Taikei.NCode) and (iKamokuNCode = TaikeiOya.NCode)then
			begin
				iCount2	:=	iCount2	+ 1;
				iCount	:=	iCount	+ 1;
				if iCount2 = 2 then
				begin
					gbTaikeiFlag	:=	FALSE;
					break;
				end;

				if iCount = 2 then
				begin
					gbTaikeiFlag	:=	TRUE;
					break;
				end;
			end
			else if (wkRec^.NCode = Taikei.NCode) then
			begin
				iCount	:=	iCount	+ 1;
				if iCount = 2 then
				begin
					gbTaikeiFlag	:=	TRUE;
					break;
				end;
			end;
		end;
	end;

	//	POPUPの削除で実在時に細目があった時は削除を使用不可
	if (grTaikei.CNCode <> 0) and (grTaikei.MasKbn <> 2)then
//		MI_Delete.Enabled	:=	TRUE;
// <SYNC> MOD start
//		MI_Delete.Enabled	:=	m_cJNTArea.IsDelete; //<008>
		MI_Delete.Enabled	:=	IsDeleteEx();
// <SYNC> MOD end

	if TreeView.Selected.Count <> 0 then	//	選択されたNODEに子供があるかないかﾁｪｯｸ
	begin
		MI_Delete.Enabled		:=	FALSE;
	end;


//<008>?
	if (MComboBox.ItemIndex <> 4) then
	begin
		//	固定区分が
		if Taikei.KoteiKbn > 0 then
			MI_Delete.Enabled	:=	FALSE;

		if gbEnabledCheck = TRUE then
			MI_Delete.Enabled	:=	FALSE;
	end;
end;


//-----------------------------------------------------------------------------
// JitsuzaiCheck
//	< 実在に細目が付いているかチェック >
//      PARAM   :   NCode   :   科目内部ｺｰﾄﾞ
//      VAR     :
//      RETURN  :   TRUE:存在する FALSE:存在しない
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.JitsuzaiCheck(NCode: Extended): Boolean;
var
	DmqData		:	TMQuery;
	bReturn		:	Boolean;
begin

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	// 勘定科目基本ﾏｽﾀから実在科目に細目が付いているかﾁｪｯｸ
	with DmqData do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT * FROM KmkMA            '   //	勘定科目基本ﾏｽﾀ
		    +   'WHERE (MasterKbn = 2)          '   //	ﾏｽﾀ区分(2:細目科目)
		    +   '  AND (SumKbn    = 0)          '	//	実在/合計区分(0:実在)
            +   '  AND (RDelKbn   = 0)          '	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		    +   '  AND (NCode     = :ExNCode)   '
//          +   '  AND (CNCode    = 0)          ');
            +   '  AND (CNCode    > 0)          ');	//<085>

		ParamByName('ExNCode').AsFloat  :=  NCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
			Result	:=	FALSE;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			bReturn	:=	TRUE;
		end
		else
		begin
			bReturn	:=	FALSE;
		end;
	end;
	DmqData.Close();
	DmqData.Free();

	Result	:=	bReturn;

end;

//-----------------------------------------------------------------------------
// KoteiKbnCheck
//	< 固定体系区分が固定か否かチェック >
//      PARAM   :   NCode       :   内部コード
//                  SelectGrid  :   選択グリッド
//		VAR		:
//      RETURN  :   TRUE:有 FALSE:無
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.KoteiKbnCheck(NCode: Extended; SelectGrid: Integer): Boolean;
var
	DmqData		:	TMQuery;
	bReturn		:	Boolean;
	iSumKbn		:	Integer;
begin

	bReturn	:=	FALSE;

    // 選択されているのが実在の時
	if ( SelectGrid = Zitsuzai ) then
		iSumKbn	:=	0		//	実在
	else
		iSumKbn	:=	1;		//	合計

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	// 勘定科目基本ﾏｽﾀ(KmkMA)から勘定科目の固定体系をCheckする
	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                         '
		    +   '    KoteiKbn                   '	//	固定体系区分
		    +   'FROM KmkMA                     '   //	勘定科目基本ﾏｽﾀ
		    +   'WHERE (MasterKbn = 1)          '   //	ﾏｽﾀ区分(1:勘定科目)
		    +   '  AND (SumKbn    = :JGKbn)     '	//	実在/合計区分
            +   '  AND (RDelKbn   = 0)          '	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		    +   '  AND (NCode     = :ExNCode)   '	//	外部ｺｰﾄﾞ
		    +   '  AND (CNCode    = 0)          ');	//	細目ｺｰﾄﾞ

		ParamByName('JGKbn')    .AsInteger	:=	iSumKbn;
		ParamByName('ExNCode')  .AsFloat	:=	NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Result	:=	FALSE;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			if (( GetFLD('KoteiKbn').AsInteger) > 0 ) then
				bReturn	:=	TRUE
			else
				bReturn	:=	FALSE;
		end;
	end;
	DmqData.Close;
	DmqData.Free;

	Result	:=	bReturn;

end;

//**********************************************************************
//*		Proccess	:	同一ﾚﾍﾞﾙを表示
//*		Name		:	H.Endo
//*		Date		:	2000/10/03
//*		Parameter	:	NCode	:	科目内部ｺｰﾄﾞ
//*						Hantei	:	TRUE/FALSE
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*						2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
procedure TJNTCRP009001f.LevelDsp(NCode: Extended; Hantei: Boolean);
var
	DmqTree		    :	TMQuery;
	DmqSelect	    :	TMQuery;
	DmqDsp		    :	TMQuery;
	iKasanSaki	    :	Extended;
	iKasanMoto	    :	Extended;
	iFusenKbn	    :	Integer;
	iWork		    :	Integer;
	wkRec		    :	^TaikeiRec;
	cNode		    :	TTreeNode;
	iKamoku		    :	Integer;
	iKamokuNCode	:	Extended;
	SumKbn		    :	Byte;		//	実在/合計区分
	iLoop		    :	Integer;
	iLoop2		    :	Integer;
	sCmnt		    :	String;
	wkRec2		    :	^TaikeiRec;
//<053>
	iFlg			:	Integer;
begin

	// 初期化
	SumKbn	:=	0;
//<053>
	iFlg	:=	0;


	DSourceGou.DataSet		:=	nil;
	DSourceZitsu.DataSet	:=	nil;

	DmqTree := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );		//	DBとMQueryの接続

	DmqSelect := TMQuery.Create( Self );					    //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqSelect );	//	DBとMQueryの接続

	DmqDsp := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDsp );		//	DBとMQueryの接続

	MemZitsu.Close;
   	MemGou.Close;

	MemGou.Open;
	MemZitsu.Open;

	with DmqTree do
	begin
		if ( MComboBox.ItemIndex = 2 ) then		//	損益科目の時
		begin
			for iLoop := 0 to 15 do
			begin
				//	特定科目が実在時かつ特定科目と選択されている科目が一致した時
				if ( SonekiArrayL1[iLoop].ConstNCode = NCode ) and
                   ( P_Grid.Visible                  = TRUE  ) then
				begin
					for iLoop2 := 0 to 15 do
					begin
						if ( SonekiArrayL1[iLoop2].SumKbn = 0 ) then
						begin
							SQL.Clear;
							SQL.Add('SELECT                     ');
                            SQL.Add('    NCode                  '); //  内部ｺｰﾄﾞ
                            SQL.Add('   ,CNCode                 '); //  科目別補助内部ｺｰﾄﾞ
							SQL.Add('   ,GCode                  ');	//	外部ｺｰﾄﾞ
							SQL.Add('   ,Renso                  ');	//	連想ｼﾝﾎﾞﾙ
							SQL.Add('   ,LongName               ');	//	正式名称
							SQL.Add('   ,SimpleName             ');	//	簡略名称
							SQL.Add('   ,CharCode               ');	//	性格ｺｰﾄﾞ
							SQL.Add('   ,AnalyzeCode            ');	//	分析ｺｰﾄﾞ
							SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
							SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
                            SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
							SQL.Add('  AND NCode     = :ExNCode ');	//	外部ｺｰﾄﾞ
							SQL.Add('  AND CNCode    = 0        ');	//	細目ｺｰﾄﾞ(0)

							ParamByName('ExNCode').AsFloat  :=  SonekiArrayL1[iLoop2].ConstNCode;

							//	ｴﾗｰの判定
							if ( Open = FALSE ) then
							begin
								ErrorMessageDsp(DmqTree);
								DmqTree.Close;
								DmqTree.Free;

								DmqSelect.Close;
								DmqSelect.Free;
								DmqDsp.Close;
								DmqDsp.Free;

								Exit;
							end;

							SetLength(m_aCmnt_Jitsu,0);		//	配列をｸﾘｱ

							while EOF <> TRUE do
							begin
								MemZitsu.Append();

                                MemZitsu.FieldByName('NCode')       .AsFloat 	:=	GetFld('NCode')         .AsFloat;	//	内部ｺｰﾄﾞ
								MemZitsu.FieldByName('CNCode')      .AsFloat	:=	GetFld('CNCode')        .AsFloat;	//	科目別補助内部ｺｰﾄﾞ
								MemZitsu.FieldByName('Code')        .AsInteger	:=	GetFld('GCode')         .AsInteger;	//	外部ｺｰﾄﾞ
								MemZitsu.FieldByName('Ren')         .AsString	:=	GetFld('Renso')         .AsString;	//	連想ｼﾝﾎﾞﾙ
// <049>↓
//								MemZitsu.FieldByName('LongName')    .AsString	:=	GetFld('LongName')      .AsString;	//	正式名称
                                                                                                                        //	正式名称
								MemZitsu.FieldByName('LongName')    .AsString	:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
								MemZitsu.FieldByName('SName')       .AsString	:=	GetFld('SimpleName')    .AsString;	//	簡略名称
								MemZitsu.FieldByName('SeikakuData') .AsInteger  :=	GetFld('CharCode')      .AsInteger;	//	性格ｺｰﾄﾞ
								MemZitsu.FieldByName('BunsekiNO')   .AsInteger	:=	GetFld('AnalyzeCode')   .AsInteger; //	分析ｺｰﾄﾞ
								MemZitsu.FieldByName('Bunseki')     .AsString	:=	GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iWork);
								iFusenKbn	                                    :=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分Check
								SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu) + 1);
								m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  GetFld('NCode').AsFloat;
                                m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  GetFld('CNCode').AsFloat;
								m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  sCmnt;
								FusenDsp(iFusenKbn,ZITSUZAI);								//	付箋表示処理
								MemZitsu.Post;
								NEXT;
    	    	            end;
						end;
					end;
//<053>--start---
// <078> ↓↓↓
//					if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
					if kaisyahou() = true and (0 <> GetKmkInfo(TOUKIMISYO,1,SumKbn)) then
// <078> ↑↑↑
					begin
						//	加算先を取得
						Close();
						SQL.Clear;
						SQL.ADD('SELECT '					);
						SQL.ADD(	'BasedNCode '				);	//	加算先外部ｺｰﾄﾞ
						SQL.ADD('FROM '						);
						SQL.ADD(	'KmkTree '				);	//	科目加算体系ﾏｽﾀ
						SQL.ADD('WHERE '					);
						SQL.ADD(	'MasterKbn = 1 AND '	);	//	ﾏｽﾀ区分(1:勘定科目)
						SQL.ADD(	'SumNCode = :Code'		);	//	加算元外部ｺｰﾄﾞ
						SQL.ADD('ORDER BY EntNo'			);
//						ParamByName('Code').AsFloat := GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn);
						ParamByName('Code').AsFloat := GetKmkInfo(TOUKIMISYO,1,SumKbn); 	// <078>
						//	ｴﾗｰの判定
						if Open = False then
						begin
							ErrorMessageDsp(DmqTree);
							DmqTree.Close;
							DmqTree.Free;

							DmqSelect.Close;
							DmqSelect.Free;
							DmqDsp.Close;
							DmqDsp.Free;

							Exit;
						end;

						while EOF <> True do
						begin
							iKasanMoto	:=	GetFld('BasedNCode').AsFloat;
							with DmqDsp do
							begin
								Close();
								SQL.Clear;
								SQL.ADD('SELECT '							);
								SQL.ADD(	'MA.MasterKbn as Mas,'			);	//	ﾏｽﾀ区分
								SQL.ADD(	'MA.SumKbn as Sum,'				);	//	実在/合計区分
                                SQL.ADD(    'MA.NCode as NCode,'            );  //  内部ｺｰﾄﾞ
								SQL.ADD(	'MA.GCode as Gaibu,'			);	//	外部ｺｰﾄﾞ
								SQL.ADD(	'MA.SubCode as Sub,'			);	//	細目ｺｰﾄﾞ
                                SQL.ADD(    'MA.CNCode as CNCode,'          );  //  科目別補助内部ｺｰﾄﾞ
								SQL.ADD(	'MA.Renso as Ren,'	    		);	//	連想ｼﾝﾎﾞﾙ
								SQL.ADD(	'MA.LongName as LName,'			);	//	正式名称
								SQL.ADD(	'MA.SimpleName as SName,'		);	//	簡略名称
								SQL.ADD(	'MA.CharCode as CharCD,'		);	//	性格ｺｰﾄﾞ
								SQL.ADD(	'MA.AnalyzeCode as Bunseki,'	);	//	分析ｺｰﾄﾞ
								SQL.ADD(	'MB.DecoKbn as Sousyoku'		);	//	装飾区分		HIS0017
								SQL.ADD('FROM '								);
								SQL.ADD(	'KmkMA MA,'						);	//	勘定科目基本ﾏｽﾀ
								SQL.ADD(	'KmkMB MB '						);	//	勘定科目基本ﾏｽﾀ
								SQL.ADD('WHERE '							);
								SQL.ADD(	'MA.MasterKbn = 1 AND '			);	//	ﾏｽﾀ区分(1:勘定科目)
								SQL.ADD(	'MB.MasterKbn = 1 AND '			);	//	ﾏｽﾀ区分(1:勘定科目)
								SQL.ADD(	'MA.RDelKbn = 0 AND '			);	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
								SQL.ADD(	'MA.NCode = :Code AND'			);	//	外部ｺｰﾄﾞ
								SQL.ADD(	'MB.NCode = :Code AND'			);	//	外部ｺｰﾄﾞ
								SQL.ADD(	'MA.CNCode = 0 AND'			    );	//	細目ｺｰﾄﾞ
								SQL.ADD(	'MB.CNCode = 0 AND'			    );	//	細目ｺｰﾄﾞ
								SQL.ADD(	'MA.NCode <> 0'					);	//	内部ｺｰﾄﾞ		HIS0009
								ParamByName('Code').AsFloat := iKasanMoto;
								SQL.ADD('ORDER BY MA.NCode');
								//	ｴﾗｰの判定
								if Open = False then
								begin
									ErrorMessageDsp(DmqDsp);
									DmqDsp.Close;
									DmqDsp.Free;

									DmqTree.Close;
									DmqTree.Free;
									DmqSelect.Close;
									DmqSelect.Free;

									Exit;
								end;
								if ((GetFld('Mas').AsInteger) = 1) and			//	合計時
												((GetFld('Sum').AsInteger) = 1) then
								begin
									DSourceGou.Enabled := False;
									while EOF <> True do
									begin
										gDragGouFlag	:=	True;
										MemGou.Append;
        								MemGou.FieldByName('NCode'		).AsFloat		:=	GetFld('NCode').AsFloat;
										MemGou.FieldByName('GCode'		).AsInteger		:=	GetFld('Gaibu'	).AsInteger;
										MemGou.FieldByName('GRen'		).AsString		:=	GetFld('Ren'	).AsString;
										MemGou.FieldByName('GLongName'	).AsString		:=	CutLeadByte(GetFld('LName'	).AsString, DISP_LENGTH_LONG);
										MemGou.FieldByName('GSName'		).AsString		:=	GetFld('SName'	).AsString;
										MemGou.FieldByName('SousyokuData').AsInteger	:=	GetFld('Sousyoku').AsInteger;
										iFusenKbn	:=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);
										SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
										m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode := GetFld('NCode').AsFloat;
										m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt := sCmnt;
										FusenDsp(iFusenKbn,GOUKEI);
										MemGou.Post;
										gDragGouFlag	:=	False;
										NEXT;
									end;
									DSourceGou.Enabled := True;
									MemGou.First;
								end
				                else if ((GetFld('Mas').AsInteger) = 1) and		//	実在時
												((GetFld('Sum').AsInteger) = 0) then
								begin
									DSourceZitsu.Enabled := False;
									while EOF <> True do
									begin
										gDragJitsuFlag	:=	True;
										MemZitsu.Append();
        								MemZitsu.FieldByName('NCode').AsFloat			:=	GetFld('NCode').AsFloat;
        								MemZitsu.FieldByName('Code').AsInteger			:=	GetFld('Gaibu'	).AsInteger;
										MemZitsu.FieldByName('Ren').AsString			:=	GetFld('Ren'	).AsString;
										MemZitsu.FieldByName('LongName').AsString		:=	CutLeadByte(GetFld('LName'	).AsString, DISP_LENGTH_LONG);
										MemZitsu.FieldByName('SName').AsString			:=	GetFld('SName'	).AsString;
										MemZitsu.FieldByName('SeikakuData').AsInteger	:=	GetFld('CharCD'	).AsInteger;
										MemZitsu.FieldByName('BunsekiNO').AsInteger		:=	GetFld('Bunseki').AsInteger;
										MemZitsu.FieldByName('Bunseki').AsString		:=	GetSKmkMA(BUNSEKI,GetFld('Bunseki').AsInteger,iWork);

										iFusenKbn	:=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);
										SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
										m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode := GetFld('NCode').AsFloat;
				                        m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt := sCmnt;
										FusenDsp(iFusenKbn,ZITSUZAI);

										MemZitsu.Post;
										gDragJitsuFlag	:=	False;
										NEXT;
									end;
									DSourceZitsu.Enabled := True;
								end;
							end;
							NEXT;
						end;
					end;
                    //<053>---end----

					if ( Hantei = TRUE ) then
						LevelDspSaimoku(NCode);

					DmqTree.Close;
					DmqTree.Free;
					DmqSelect.Close;
					DmqSelect.Free;
					DmqDsp.Close;
					DmqDsp.Free;

					DSourceZitsu.DataSet	:=	MemZitsu;
					DZitsuGrid.DataSource.DataSet.First;

                    exit;
				end;
			end;
		end;

		//	加算先を取得
		Close();
		SQL.Clear;
		SQL.Add('SELECT                         ');
		SQL.Add('   SumNCode                    ');	//	加算先内部ｺｰﾄﾞ
		SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
		SQL.Add('WHERE MasterKbn  = 1           '); //	ﾏｽﾀ区分(1:勘定科目)
		SQL.Add('  AND BasedNCode = :ExNCode    ');	//	加算元内部ｺｰﾄﾞ
		SQL.Add('ORDER BY EntNo                 ');

		ParamByName('ExNCode').AsFloat := NCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;

			DmqSelect.Close;
			DmqSelect.Free;
			DmqDsp.Close;
			DmqDsp.Free;

			Exit;
		end;

		while EOF <> TRUE do
		begin
			iKasanSaki	:=	GetFld('SumNCode').AsFloat;

			cNode	:=	TreeView.Selected.Parent;
			if ( cNode = nil ) then
			begin
				iKamoku	        :=	ReturnKmkCode(MComboBox.ItemIndex);
                //	特殊科目情報から科目ｺｰﾄﾞ取得(勘定科目)
				iKamokuNCode	:=	GetKmkInfo(iKamoku,1,SumKbn);
			end
			else
			begin
				wkRec	        :=	cNode.Data;
				iKamokuNCode	:=	wkRec.NCode;
			end;

            //	ｺﾋﾟｰした同一のもあるのでNodeの親と一致した場合表示
			if ( iKamokuNCode = iKasanSaki ) then
			begin
				with DmqTree do
				begin
					Close();
					SQL.Clear;
					SQL.Add('SELECT                         ');
					SQL.Add('   BasedNCode                  ');	//	加算元内部ｺｰﾄﾞ
					SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
					SQL.Add('WHERE MasterKbn = 1            '); //	ﾏｽﾀ区分(1:勘定科目)
					SQL.Add('  AND SumNCode  = :ExNCode     ');	//	加算先内部ｺｰﾄﾞ
					SQL.Add('ORDER BY EntNo                 ');

					ParamByName('ExNCode').AsFloat := iKasanSaki;

					//	ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqTree);
						DmqTree.Close;
						DmqTree.Free;

						DmqSelect.Close;
						DmqSelect.Free;
						DmqDsp.Close;
						DmqDsp.Free;

						Exit;
					end;

					SetLength(m_aCmnt_Goukei,0);		//	配列をｸﾘｱ
					SetLength(m_aCmnt_Jitsu ,0);		//	配列をｸﾘｱ
					while EOF <> TRUE do
					begin
						iKasanMoto	:=	GetFld('BasedNCode').AsFloat;

						with DmqDsp do
						begin

							Close();
							SQL.Clear;
							SQL.Add('SELECT                             ');
							SQL.Add('    MA.MasterKbn   as Mas          ');	//	ﾏｽﾀ区分
							SQL.Add('   ,MA.SumKbn      as Sum          ');	//	実在/合計区分
                            SQL.Add('   ,MA.NCode       as NCode        '); //  内部ｺｰﾄﾞ
                            SQL.Add('   ,MA.CNCode      as CNCode       '); //  科目別補助内部ｺｰﾄﾞ
							SQL.Add('   ,MA.GCode       as Gaibu        ');	//	外部ｺｰﾄﾞ
							SQL.Add('   ,MA.SubCode     as Sub          ');	//	細目ｺｰﾄﾞ
							SQL.Add('   ,MA.Renso       as Ren          ');	//	連想ｼﾝﾎﾞﾙ
							SQL.Add('   ,MA.LongName    as LName        ');	//	正式名称
							SQL.Add('   ,MA.SimpleName  as SName        ');	//	簡略名称
							SQL.Add('   ,MA.CharCode    as CharCD       ');	//	性格ｺｰﾄﾞ
							SQL.Add('   ,MA.AnalyzeCode as Bunseki      ');	//	分析ｺｰﾄﾞ
							SQL.Add('   ,MB.DecoKbn     as Sousyoku     ');	//	装飾区分
							SQL.Add('FROM  KmkMA MA                     '); //	勘定科目基本ﾏｽﾀ
							SQL.Add('     ,KmkMB MB                     ');	//	勘定科目基本ﾏｽﾀ
							SQL.Add('WHERE MA.MasterKbn    = 1          '); //	ﾏｽﾀ区分(1:勘定科目)
							SQL.Add('  AND MB.MasterKbn    = 1          ');	//	ﾏｽﾀ区分(1:勘定科目)
                            SQL.Add('  AND MA.RDelKbn      = 0          ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
							SQL.Add('  AND MA.NCode        = :ExNCode   ');	//	科目内部ｺｰﾄﾞ
                            SQL.Add('  AND MB.NCode        = :ExNCode   ');	//	科目内部ｺｰﾄﾞ
                            SQL.Add('  AND MA.CNCode       = 0          ');	//	細目内部ｺｰﾄﾞ
                            SQL.Add('  AND MB.CNCode       = 0          ');	//	細目内部ｺｰﾄﾞ
                            SQL.Add('  AND MA.SyokuchiKbn  = 0          ');	//  諸口区分
                            SQL.Add('ORDER BY MA.GCode                  ');

							ParamByName('ExNCode').AsFloat := iKasanMoto;

							//	ｴﾗｰの判定
							if ( Open = FALSE ) then
							begin
								ErrorMessageDsp(DmqDsp);
								DmqDsp.Close;
								DmqDsp.Free;

								DmqTree.Close;
								DmqTree.Free;
								DmqSelect.Close;
								DmqSelect.Free;

								Exit;
							end;

                            // ------------------------------------------
                            //	                合計時
                            // ------------------------------------------
							if ( (GetFld('Mas').AsInteger) = 1 ) and
                               ( (GetFld('Sum').AsInteger) = 1 ) then
							begin
								DSourceGou.Enabled := FALSE;
								while EOF <> TRUE do
								begin
									gDragGouFlag	:=	TRUE;
									MemGou.Append;
									MemGou.FieldByName('NCode'		).AsFloat		:=	iKasanMoto;
                                    MemGou.FieldByName('CNCode'		).AsFloat		:=	GetFld('CNCode' ).AsFloat;
									MemGou.FieldByName('GCode'		).AsInteger		:=	GetFld('Gaibu'	).AsInteger;
									MemGou.FieldByName('GRen'		).AsString		:=	GetFld('Ren'	).AsString;
// <049>↓
//									MemGou.FieldByName('GLongName'	).AsString		:=	GetFld('LName'	).AsString;
									MemGou.FieldByName('GLongName'	).AsString		:=	CutLeadByte(GetFld('LName'	).AsString, DISP_LENGTH_LONG);
// <049>↑
									MemGou.FieldByName('GSName'		).AsString		:=	GetFld('SName'	).AsString;
									MemGou.FieldByName('SousyokuData').AsInteger	:=	GetFld('Sousyoku').AsInteger;
									iFusenKbn	:=	FusenCheck(1,iKasanMoto,0,sCmnt);
									SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
									m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  GetFld('NCode').AsFloat;
                                    m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  GetFld('CNCode').AsFloat;
									m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  sCmnt;
									FusenDsp(iFusenKbn,GOUKEI);
									MemGou.Post;
									gDragGouFlag	:=	FALSE;
									NEXT;
								end;
								DSourceGou.Enabled := TRUE;
								MemGou.First;
							end
                            // ------------------------------------------
                            //	                実在時
                            // ------------------------------------------
			                else if ( (GetFld('Mas').AsInteger) = 1 ) and
                                    ( (GetFld('Sum').AsInteger) = 0 ) then
							begin
								DSourceZitsu.Enabled := FALSE;
								while EOF <> TRUE do
								begin
									gDragJitsuFlag	:=	TRUE;
									MemZitsu.Append();
									MemZitsu.FieldByName('NCode').AsFloat			:=	iKasanMoto;
                                    MemZitsu.FieldByName('CNCode').AsFloat		    :=	GetFld('CNCode' ).AsFloat;
									MemZitsu.FieldByName('Code').AsInteger			:=	GetFld('Gaibu'	).AsInteger;
									MemZitsu.FieldByName('Ren').AsString			:=	GetFld('Ren'	).AsString;
// <049>↓
//									MemZitsu.FieldByName('LongName').AsString		:=	GetFld('LName'	).AsString;
									MemZitsu.FieldByName('LongName').AsString		:=	CutLeadByte(GetFld('LName'	).AsString, DISP_LENGTH_LONG);
// <049>↑
									MemZitsu.FieldByName('SName').AsString			:=	GetFld('SName'	).AsString;
									MemZitsu.FieldByName('SeikakuData').AsInteger	:=	GetFld('CharCD'	).AsInteger;
									MemZitsu.FieldByName('BunsekiNO').AsInteger		:=	GetFld('Bunseki').AsInteger;
									MemZitsu.FieldByName('Bunseki').AsString		:=	GetSKmkMA(BUNSEKI,GetFld('Bunseki').AsInteger,iWork);

									iFusenKbn	:=	FusenCheck(1,iKasanMoto,0,sCmnt);
									SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
									m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  GetFld('NCode').AsFloat;
                                    m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  GetFld('CNCode').AsFloat;
                                    m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  sCmnt;
									FusenDsp(iFusenKbn,ZITSUZAI);

									MemZitsu.Post;
									gDragJitsuFlag	:=	FALSE;
									NEXT;
								end;
								DSourceZitsu.Enabled := TRUE;
							end;
						end;
						NEXT;
					end;
				end;
   		    end;
			NEXT;
		end;
	end;

	if ( Hantei = TRUE ) then
	begin
		wkRec2 := TreeView.Selected.Data;
		if ( wkRec2 <> nil ) then
		begin
			if ( wkRec2.MasKbn = 1 ) and ( wkRec2.Kbn = 0 ) then
				LevelDspSaimoku(NCode);
		end;
	end;

	DmqTree.Close;
	DmqTree.Free;
	DmqSelect.Close;
	DmqSelect.Free;
	DmqDsp.Close;
	DmqDsp.Free;

	DSourceGou.DataSet		:=	MemGou;
	DSourceZitsu.DataSet	:=	MemZitsu;

	DGoukeiGrid.DataSource.DataSet.First;
	DZitsuGrid.DataSource.DataSet.First;

end;

//**********************************************************************
//*		Proccess	:	特殊科目から科目ｺｰﾄﾞを取得する
//*		Name		:	H.Endo
//*		Date		:	2000/10/06
//*		Parameter	:	Select	:	選択されているもの
//*
//*		Return		:	科目ｺｰﾄﾞ
//*		History		:	9999/99/99	X.Xxxx
//*
//**********************************************************************
function TJNTCRP009001f.ReturnKmkCode(Select: Integer): Integer;
var
	iKamoku :   Integer;
begin
	//	初期化処理
	iKamoku	:=	0;

	case Select of
		0:	iKamoku	:=	SHISAN_BU;		//	資産の部
		1:	iKamoku	:=	FUSAI_BU;		//	負債及び資本の部
		2:	iKamoku	:=	0;
		3:	iKamoku	:=	SEIZOU_BU;		//	製造の部
		4:	iKamoku :=	GEN_KOUJI_BU	//	原価の部/工事原価の部
	end;

	Result	:=	iKamoku;

end;

//**********************************************************************
//*		Proccess	:	選択された科目表示処理
//*		Name		:	H.Endo
//*		Date		:	2000/09/06
//*		Parameter	:	MasKbn		:	ﾏｽﾀｰ区分(1:勘定科目、2:細目科目)
//*						JiGoKbn		:	実在／合計区分(0:実在、1：合計)
//*						GaiCode		:	外部ｺｰﾄﾞ
//*						SaiCode		:	細目ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*						2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
procedure TJNTCRP009001f.SelectDsp(MasKbn, JiGoKbn, GaiCode: Integer; SaiCode: String);
var
	DmqData			:	TMQuery;
	DmqFusen		:	TMQuery;
	iDspCode		:	String;
	iSelect			:	Integer;
	iYouBun			:	Integer;
	iKoteiKbn		:	Integer;	    // 固定体系区分
	iKoujiKbn		:	Integer;	    // 工事採用区分
	iHojyo1			:	Integer;	    // 第１補助採用区分
	iBunsekiCode	:	Integer;	    // 分析ｺｰﾄﾞ
	iLoop			:	Integer;
    iLoop2          :   Integer;
	iCode			:	Integer;
	iDummy			:	Integer;
	sName			:	String;
	sTekiBunName	:	String;		    // 摘要分類名称
	bHantei			:	Boolean;
	bBankFlag		:	Boolean;
	wkRec			:	^TaikeiRec;

    iNCode          :   Extended;       // 内部ｺｰﾄﾞ
    iCNCode         :   Extended;       // 科目別補助内部ｺｰﾄﾞ
    iLinkSaiCode    :   String;

    iStart          :   Integer;
    iEnd            :   Integer;
    strGCode        :   String;
    strName         :   String;
    strWk           :   String;
    iFusenKbn       :   Integer;
    sCmnt           :   String;
begin
	//	初期化処理
	iKoteiKbn		:=	0;
	iKoujiKbn		:=	0;
	iHojyo1			:=	0;
	iBunsekiCode	:=	0;
// <013>    iLinkSaiCode    :=  '';
	iLinkSaiCode    :=  '0';    // <013>

	FusenInitialize();								//	付箋表示の初期化

	if (MasKbn = 1) and (JiGoKbn = 1) then			//	合計科目時
	begin
		if (GaiCode = 0) and (MComboBox.ItemIndex = 2) then	//	損益の部
		begin
			SyousaiInitialize(FALSE);
			EnabledSelect(4,0,0,0,0);
			Treeview.SetFocus;
			exit;
		end
		//	詳細でｺｰﾄﾞ入力後ｺｰﾄﾞ欄に戻りESCを押して抜け出るときに使用
		else if (GaiCode = -1) then
			GaiCode := 0;

		ECode.MaxLength		:=	wkKmk.KanjyoKeta;
        ECode.InputAttr     :=  iaZeroSup;  // ｾﾞﾛｻﾌﾟﾚｽ
		ELName.MaxLength	:=	24;

		iDspCode	        :=	IntToStr(GaiCode);
		iSelect	            :=	GOUKEI;
		MTab_Select.Items.Selected	:=	2;
		giSelectTab	        :=	2;							//	ActiveになるTab情報

		wkRec := TreeView.Selected.Data;
		if (wkRec.MasKbn = 1) and (wkRec.Kbn = 1) then
		begin
			MTab_Select.Items[0].Enabled	:=	TRUE;	//	実在
			MTab_Select.Items[1].Enabled	:=	FALSE;	//	細目
			MTab_Select.Items[2].Enabled	:=	TRUE;	//	合計
		end
		else if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
		begin
			//	複合科目のﾁｪｯｸ		HIS0007
			if (FukuKmkCheck(wkRec.NCode)) then
				MTab_Select.Items[1].Enabled	:=	FALSE	//	細目
			else
			begin
				//	選択されたｺｰﾄﾞが工事を採用されているかCheck
				if (KoujiAdoptCheck(wkRec.NCode)) and (gMasInfoUseKbn.Koj <> 0) then		//HIS0083
					MTab_Select.Items[1].Enabled	:=	FALSE		//	細目のTab使用不可
				//	いくつ補助が採用されているかチェック	HIS0008
				else if (MAXADOPTCOUNT > AdoptCountCheck(wkRec.NCode,DATABASE)) then
					MTab_Select.Items[1].Enabled	:=	TRUE	//	細目
				else
				begin
					bHantei	:=	FALSE;
					MDataModule.BeginTran (dbCorp_Select);					//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
					if (KbnCheck(wkRec.NCode,bHantei,TRUE,OTHER))then	    //	RollBackが行われたらTRUEが返ってくる
						exit;
					MDataModule.Commit (dbCorp_Select);						//	ｺﾐｯﾄ(反映)

					if (bHantei) then
						MTab_Select.Items[1].Enabled	:=	TRUE	//	細目Tab使用可
					else
						MTab_Select.Items[1].Enabled	:=	FALSE;	//	細目Tab使用不可
				end;
			end;
		end;
	end
	else if (MasKbn = 1) and (JiGoKbn = 0) then		//	実在科目時
	begin
		ECode.MaxLength		:=	wkKmk.KanjyoKeta;
		ECode.InputAttr     :=  iaZeroSup;  // ｾﾞﾛｻﾌﾟﾚｽ
		ELName.MaxLength	:=	24;

		iDspCode	:=	IntToStr(GaiCode);
		iSelect	:=	ZITSUZAI;
		MTab_Select.Items.Selected	:=	0;
		giSelectTab	:=	0;								//	ActiveになるTab情報

		MTab_Select.Items[0].Enabled	:=	TRUE;		//	実在

		wkRec := TreeView.Selected.Data;
		if (wkRec.MasKbn = 1) and (wkRec.Kbn = 1) then
		begin
			MTab_Select.Items[0].Enabled	:=	TRUE;	//	実在
			MTab_Select.Items[1].Enabled	:=	FALSE;	//	細目
			MTab_Select.Items[2].Enabled	:=	TRUE;	//	合計
		end
		else if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
		begin
			//	複合科目のﾁｪｯｸ		HIS0007
			if (FukuKmkCheck(wkRec.NCode)) then
				MTab_Select.Items[1].Enabled	:=	FALSE	//	細目
			else
			begin
				//	選択されたｺｰﾄﾞが工事を採用されているかCheck
				if (KoujiAdoptCheck(wkRec.NCode)) and (gMasInfoUseKbn.Koj <> 0) then		//HIS0083
					MTab_Select.Items[1].Enabled	:=	FALSE		//	細目のTab使用不可
				//	いくつ補助が採用されているかチェック	HIS0008
				else if (MAXADOPTCOUNT > AdoptCountCheck(wkRec.NCode,DATABASE)) then
					MTab_Select.Items[1].Enabled	:=	TRUE	//	細目
				else
				begin
					bHantei	:=	FALSE;
					MDataModule.BeginTran (dbCorp_Select);					//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
					if (KbnCheck(wkRec.NCode,bHantei,TRUE,OTHER))then	//	RollBackが行われたらTRUEが返ってくる
						exit;
					MDataModule.Commit (dbCorp_Select);						//	ｺﾐｯﾄ(反映)

					if (bHantei) then
						MTab_Select.Items[1].Enabled	:=	TRUE	//	細目Tab使用可
					else
						MTab_Select.Items[1].Enabled	:=	FALSE;	//	細目Tab使用不可
				end;
			end;
		end;
		MTab_Select.Items[2].Enabled	:=	TRUE;	//	合計
	end
    else if (MasKbn = 2) and (JiGoKbn = 0) then		//	細目科目時
	begin
		iDspCode	:=	SaiCode;
		iSelect		:=	SAIMOKU;

		MTab_Select.Items.Selected	:=	1;
		giSelectTab	:=	1;							//	ActiveになるTab情報

		wkRec := TreeView.Selected.Data;
		if (wkRec.MasKbn = 2) and (wkRec.Kbn = 0) then
		begin
			MTab_Select.Items[0].Enabled	:=	FALSE;	//	実在
			MTab_Select.Items[1].Enabled	:=	TRUE;	//	細目
			MTab_Select.Items[2].Enabled	:=	FALSE;	//	合計
		end
		else if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
		begin
			MTab_Select.Items[0].Enabled	:=	TRUE;	//	実在
			MTab_Select.Items[1].Enabled	:=	TRUE;	//	細目
			MTab_Select.Items[2].Enabled	:=	TRUE;	//	合計
		end;

        iLinkSaiCode    :=  fnSaimokuSetAttr(1, SaiCode,
                                     wkRec.CodeAttr, wkRec.CodeDigit);    //  細目外部ｺｰﾄﾞ

        // 属性対応
        case wkRec.CodeAttr of
            0:
            begin
                ECode.MaxLength :=  wkRec.CodeDigit;
                ECode.InputAttr :=  iaZeroSup;
            end;
            1:
            begin
                ECode.MaxLength :=  wkRec.CodeDigit;
                ECode.InputAttr :=  iaZeroPad;
            end;
            2:
            begin
                ECode.MaxLength :=  wkRec.CodeDigit;
// <018>                ECode.InputAttr :=  iaFree;
                ECode.InputAttr :=  iaNone; // <018>
            end;
        end;

		ELName.MaxLength	:=	30;

	end
	else
		exit;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryのS接続

	DmqFusen := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );	//	DBとMQueryの接続

	giSyouDspCode	:=	iDspCode;
	giDspOyaCode	:=	GaiCode;

	if (iSelect = SAIMOKU) then
	begin
		if (Syokuchi(GaiCode,FALSE)) then
		begin
			ECode.Text		:=	iDspCode;
		end
		else
			SyousaiInitialize(FALSE);
	end
	else
		ECode.Text		:=	iDspCode;

    // 内部ｺｰﾄﾞ及び細目内部ｺｰﾄﾞを取得
    gfnGetKmk_NCODE(MasKbn,JiGoKbn,GaiCode,iLinkSaiCode,
                    iNCode,iCNCode);
	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                 ');
		SQL.Add('    MA.Renso           ');	//	連想ｼﾝﾎﾞﾙ
		SQL.Add('   ,MA.LongName        ');	//	正式名称
		SQL.Add('   ,MA.SimpleName      ');	//	簡略名称
		SQL.Add('   ,MA.AnalyzeCode     ');	//	分析ｺｰﾄﾞ
		SQL.Add('   ,MA.CharCode        ');	//	性格ｺｰﾄﾞ
// 集計情報・採用区分
		SQL.Add('   ,MA.SubKmkUse       ');	//	細目科目採用区分
        SQL.Add('   ,MA.BmnUse          ');
        SQL.Add('   ,MA.BankUse         ');
        SQL.Add('   ,MA.ToriUse         ');
        SQL.Add('   ,MA.ShainUse        ');
        SQL.Add('   ,MA.HojyoUse1       ');
        SQL.Add('   ,MA.HojyoUse2       ');
        SQL.Add('   ,MA.HojyoUse3       ');
        SQL.Add('   ,MA.HojyoUse4       ');
        SQL.Add('   ,MA.HojyoUse5       ');
        SQL.Add('   ,MA.SegUse1         ');
        SQL.Add('   ,MA.SegUse2         ');
        SQL.Add('   ,MA.SegUse3         ');
        SQL.Add('   ,MA.SegUse4         ');
        SQL.Add('   ,MA.SegUse5         ');
        SQL.Add('   ,MA.SegUse6         ');
        SQL.Add('   ,MA.SegUse7         ');
        SQL.Add('   ,MA.SegUse8         ');
        SQL.Add('   ,MA.SegUse9         ');
        SQL.Add('   ,MA.SegUse10        ');
        SQL.Add('   ,MA.PrjUse1         ');
        SQL.Add('   ,MA.PrjUse2         ');
        SQL.Add('   ,MA.PrjUse3         ');
        SQL.Add('   ,MA.PrjUse4         ');
        SQL.Add('   ,MA.PrjUse5         ');
        SQL.Add('   ,MA.PrjUse6         ');
        SQL.Add('   ,MA.PrjUse7         ');
        SQL.Add('   ,MA.PrjUse8         ');
        SQL.Add('   ,MA.PrjUse9         ');
        SQL.Add('   ,MA.PrjUse10        ');
		SQL.Add('   ,MA.BankNCode       ');	//	銀行ｺｰﾄﾞ
		SQL.Add('   ,MA.TStartDate      ');	//	適用開始年月日
		SQL.Add('   ,MA.TEndDate        ');	//	適用終了年月日
		//	集計情報
		SQL.Add('   ,MA.DCKbn           ');	//	正残区分
		SQL.Add('   ,MA.BPKbn           ');	//	BS/PL区分
		SQL.Add('   ,MA.KisyuKbn        ');	//	期首残区分
		SQL.Add('   ,MA.NonDspKbn       ');	//	表示／印刷不可区分
		SQL.Add('   ,MA.PerKmkKbn       ');	//	比率科目区分
		SQL.Add('   ,MA.DebitCash       ');	//	借方資金繰ｺｰﾄﾞ
		SQL.Add('   ,MA.CreditCash      ');	//	貸方資金繰ｺｰﾄﾞ
		SQL.Add('   ,MB.FixChgRate      ');	//	変動費比率
		//	出力情報
		SQL.Add('   ,MB.MinusKbn        ');	//	ﾏｲﾅｽ印刷区分
		SQL.Add('   ,MB.SagakuKbn       ');	//	差額印刷区分
		SQL.Add('   ,MB.ProfitKbn       ');	//	利益印刷区分
		SQL.Add('   ,MB.OutKbn1         ');	//	集計単位区分
		SQL.Add('   ,MB.MTekiPrn        ');	//	元帳摘要欄起票者印字区分
		SQL.Add('   ,MB.MinusName       ');	//	ﾏｲﾅｽ変換科目名
		SQL.Add('   ,MB.DecoKbn         ');	//	装飾区分
// 仕訳入力・消費税情報
		//	入力条件
		SQL.Add('   ,MA.InputKbn        ');	//	仕訳入力区分
		SQL.Add('   ,MA.DInputKbn       ');	//	期日入力区分
		SQL.Add('   ,MA.DInputAlw       ');	//	期日必須入力区分
		SQL.Add('   ,MA.TInputKbn       ');	//	手形番号入力区分
		SQL.Add('   ,MA.TInputAlw       ');	//	手形番号必須入力区分
		SQL.Add('   ,MA.TkInputKbn      ');	//	固定摘要必須入力
		SQL.Add('   ,MA.TkClassCode     ');	//　摘要分類ｺｰﾄﾞ
		SQL.Add('   ,MA.CashCodeKbn     ');	//	資金繰ｺｰﾄﾞ優先区分
		SQL.Add('   ,MA.DPointNum       ');	//	小数点桁数

		//	分類 <002>
		SQL.Add('   ,MA.BunruiNCode1    ');	//	分類ｺｰﾄﾞ1
		SQL.Add('   ,MA.BunruiNCode2    ');	//	分類ｺｰﾄﾞ2
		SQL.Add('   ,MA.BunruiNCode3    ');	//	分類ｺｰﾄﾞ3
		SQL.Add('   ,MA.BunruiNCode4    ');	//	分類ｺｰﾄﾞ4
		SQL.Add('   ,MA.BunruiNCode5    ');	//	分類ｺｰﾄﾞ5
		SQL.Add('   ,MA.BunruiNCode6    ');	//	分類ｺｰﾄﾞ6
		SQL.Add('   ,MA.BunruiNCode7    ');	//	分類ｺｰﾄﾞ7
		SQL.Add('   ,MA.BunruiNCode8    ');	//	分類ｺｰﾄﾞ8
		SQL.Add('   ,MA.BunruiNCode9    ');	//	分類ｺｰﾄﾞ9
        SQL.Add('   ,MA.BunruiNCode10   ');	//	分類ｺｰﾄﾞ10

		if ( m_System = MJSLINK ) then
		begin
			SQL.Add('   ,MA.NoInputKbn1         ');	//	番号1入力区分
			SQL.Add('   ,MA.NoInputAlw1         ');	//	番号1必須入力区分
			SQL.Add('   ,MA.EInpKbn1            ');	//	番号1初期表示区分
			SQL.Add('   ,MA.NoInputKbn2         ');	//	番号2入力区分
			SQL.Add('   ,MA.NoInputAlw2         ');	//	番号2必須入力区分
			SQL.Add('   ,MA.EInpKbn2            ');	//	番号2初期表示区分
			SQL.Add('   ,MA.EInpKbn3            ');	//	同一番号集計区分
			SQL.Add('   ,MA.NoName1             ');	//	番号1名称No
			SQL.Add('   ,MA.NoName2             ');	//	番号2名称No
		end;

		//	電子帳簿
		SQL.Add('   ,MB.HisKbn                  ');	//	履歴管理区分
		SQL.Add('FROM    KmkMA MA               '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('       ,KmkMB MB               ');	//	勘定科目詳細情報
        SQL.Add('WHERE MA.RDelKbn   = 0         ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND MA.MasterKbn = :MasKbn   ');	//	ﾏｽﾀ区分
		SQL.Add('  AND MB.MasterKbn = :MasKbn   ');	//	ﾏｽﾀ区分
		SQL.Add('  AND MA.SumKbn    = :JGKbn    ');	//	実在/合計区分
        SQL.Add('  AND MA.NCode     = :G_Code   ');	//	内部ｺｰﾄﾞ
        SQL.Add('  AND MB.NCode     = :G_Code   ');	//	内部ｺｰﾄﾞ
        SQL.Add('  AND MA.CNCode    = :S_Code   ');	//	科目別補助内部ｺｰﾄﾞ
        SQL.Add('  AND MB.CNCode    = :S_Code   ');	//	科目別補助内部ｺｰﾄﾞ

		ParamByName('MasKbn').AsInteger	:=	MasKbn;		//	ﾏｽﾀ区分
		ParamByName('JGKbn'	).AsInteger :=	JiGoKbn;	//	実在／合計区分
        ParamByName('G_Code').AsFloat   :=	iNCode;	    //	内部ｺｰﾄﾞ
        ParamByName('S_Code').AsFloat   :=	iCNCode;	//  科目別補助内部ｺｰﾄﾞ

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			DmqFusen.Close;
			DmqFusen.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			//	共通
// <049>↓
//			ELName.Text			:=	GetFLD('LongName'	).AsString;			//	正式名称
                                                                            //	正式名称
            if MasKbn = 1 then                                              //  科目は24Byteに丸める
    			ELName.Text	 	:=	CutLeadByte(GetFLD('LongName').AsString, DISP_LENGTH_LONG)
            else
                ELName.Text     :=	GetFLD('LongName'	).AsString;
// <049>↑
			ESName.Text			:=	GetFLD('SimpleName'	).AsString;			//	簡略名称
			gsKanryaku			:=	GetFLD('SimpleName'	).AsString;			//	簡略名称(変更時用)
			ERen.Text			:=	GetFLD('Renso'	    ).AsString;			//	連想
            EBunCode.Value		:=  GetFLD('AnalyzeCode').AsInteger;
			iBunsekiCode		:=	GetFLD('AnalyzeCode').AsInteger;		//	分析ｺｰﾄﾞ
			LBunName.Caption	:=	GetSKmkMA(BUNSEKI,GetFLD('AnalyzeCode').AsInteger,iYouBun);	//	分析名称

			for iLoop := 0 to 112 do
			begin
				if (aDefault[iLoop].Code = iBunsekiCode) then
				begin
					GetNameSKmkMA(aDefault[iLoop].YouyakuCode,iCode,sName,iDummy);	//	要約
					EYouCode.Value	   := iCode;
					LYouName.Caption   := sName;
					GetNameSKmkMA(aDefault[iLoop].KoteiCode,iCode,sName,iDummy);	//	固定費
					EKotei.Value	   := iCode;
					LKoteiName.Caption := sName;
					GetNameSKmkMA(aDefault[iLoop].HendoCode,iCode,sName,iDummy);	//	変動費
					EHendo.Value	   := iCode;
					LHendoName.Caption := sName;
					break;
				end;
			end;

			ESeikakuCode.Value		:=	GetFLD('CharCode'	).AsInteger;		//	性格ｺｰﾄﾞ
			gSeiCode				:=	GetFLD('CharCode'	).AsInteger;		//	性格ｺｰﾄﾞ
			LSeikakuName.Caption	:=	'' + aSeikaku[GetFLD('CharCode').AsInteger];	//	性格ｺｰﾄﾞ内容

            // 詳細画面に付箋を表示する
            case MTab_Select.Items.Selected of
                // 実在
                0:  begin
                        iFusenKbn := FusenCheck(1,iNCode,0,sCmnt);
                        FusenDsp2(iFusenKbn);
                    end;
                1:  begin
                        iFusenKbn := FusenCheck(2,iNCode,iCNCode,sCmnt);
                        FusenDsp2(iFusenKbn);
                    end;
                2:  begin
                        iFusenKbn := FusenCheck(1,iNCode,0,sCmnt);
                        FusenDsp2(iFusenKbn);
                    end;
            end;

            case MTab_Select.Items.Selected of
                // -----------------------------
                //	        実在時
                // -----------------------------
    			0:
                begin
// <121>MOD↓
//                    m_Bmn               :=  GetFLD('BmnUse')    .AsInteger;
//                    EBmnUse     .Value  :=  m_Bmn;                            GetList(EBmnUse,LBmnUse);
					EBmnUse     .Value  :=  GetFLD('BmnUse')    .AsInteger;   GetList(EBmnUse,LBmnUse);
// <121>MOD↑

                    EBankUse    .Value  :=  GetFld('BankUse')   .AsInteger;   GetList(EBankUse,LBankUse);
					EToriUse    .Value  :=  GetFld('ToriUse')   .AsInteger;   GetList(EToriUse,LToriUse);
                    EShainUse   .Value  :=  GetFld('ShainUse')  .AsInteger;   GetList(EShainUse,LShainUse);

                    EBmnUse     .Zero   :=  TRUE;
                    EBankUse    .Zero   :=  TRUE;
                    EToriUse    .Zero   :=  TRUE;
                    EShainUse   .Zero   :=  TRUE;

                    for iLoop2 := 1 to 5 do
                    begin
                        TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop2))).Value
                            :=  GetFld('HojyoUse'+IntToStr(iLoop2)).AsInteger;
                        GetList(TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop2))),
                            TMLabel(MJSFindCtrl(Self,'LHojyoUse'+IntToStr(iLoop2))));
                        TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop2))).Zero    :=  TRUE;
                    end;

                    for iLoop2 := 1 to 10 do
                    begin
                        TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop2))).Value
                            :=  GetFld('SegUse'+IntToStr(iLoop2)).AsInteger;
                        GetList(TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop2))),
                            TMLabel(MJSFindCtrl(Self,'LSegUse'+IntToStr(iLoop2))));
//                        m_Seg[iLoop2-1]  :=  GetFLD('SegUse'+IntToStr(iLoop2)).AsInteger;	// <121>DEL

                        TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop2))).Value
                            :=  GetFld('PrjUse'+IntToStr(iLoop2)).AsInteger;
                        GetList(TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop2))),
                            TMLabel(MJSFindCtrl(Self,'LPrjUse'+IntToStr(iLoop2))));

                        TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop2))).Zero    :=  TRUE;
                        TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop2))).Zero    :=  TRUE;
                    end;
                end;
                // -----------------------------
                //	    合計/科目別補助時
                // -----------------------------
    			1,2:
				begin
                    EBmnUse     .Value      :=  0;
                    EBankUse    .Value      :=  0;
                    EToriUse    .Value      :=  0;
                    EShainUse   .Value      :=  0;
                    EBmnUse     .Zero       :=  FALSE;
                    EBankUse    .Zero       :=  FALSE;
                    EToriUse    .Zero       :=  FALSE;
                    EShainUse   .Zero       :=  FALSE;
                    LBmnUse     .Caption    :=  '';
                    LBankUse    .Caption    :=  '';
                    LToriUse    .Caption    :=  '';
                    LShainUse   .Caption    :=  '';

                    for iLoop2 := 1 to 5 do
                    begin
                        TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop2))).Value :=  0;
                        TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop2))).Zero  :=  FALSE;
                        TMLabel(MJSFindCtrl(Self,'LHojyoUse'+IntToStr(iLoop2))).Caption :=  '';
                    end;
                    for iLoop2 := 1 to 10 do
                    begin
                        TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop2))).Value   :=  0;
                        TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop2))).Zero    :=  FALSE;
                        TMLabel(MJSFindCtrl(Self,'LSegUse'+IntToStr(iLoop2))).Caption   :=  '';
                        TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop2))).Value   :=  0;
                        TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop2))).Zero    :=  FALSE;
                        TMLabel(MJSFindCtrl(Self,'LPrjUse'+IntToStr(iLoop2))).Caption   :=  '';
                    end;
                end;
            end;

			//	集計情報
			ESeiZanCode.Value		:=	GetFLD('DCKbn').AsInteger;				//	正残区分
			GetList(ESeiZanCode,LSeiZanName);									//	正残区分内容
			EBPCode.Value	:=	GetFLD('BPKbn').AsInteger;						//	BS/PL区分
			GetList(EBPCode,LBPName);											//	BS/PL区分内容
			EKisyuCode.Value		:=	GetFLD('KisyuKbn').AsInteger;			//	期首残区分
			GetList(EKisyuCode,LKisyuName);										//	期首残区分内容
			EDPCode.Value			:=	GetFLD('NonDspKbn').AsInteger;			//	表示／印刷不可区分
			GetList(EDPCode,LDPName);											//	表示／印刷不可区分内容
			EHiritsuCode.Value		:=	GetFLD('PerKmkKbn').AsInteger;			//	比率科目区分
			GetList(EHiritsuCode,LHiritsuName);									//	比率科目区分内容
			EKariCode.Value			:=                                          //	借方資金繰ｺｰﾄﾞ
                gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>
			LKariName.Caption		:=                                          //	貸方資金繰ｺｰﾄﾞ内容
                GetSKmkMA(SHIKINGURI, Trunc(EKariCode.Value), iYouBun);         //  <055>
			EKashiCode.Value		:=                                          //	貸方資金繰ｺｰﾄﾞ
                gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);   //  <055>
			LKashiName.Caption		:=                                          //	貸方資金繰ｺｰﾄﾞ内容
            	GetSKmkMA(SHIKINGURI, Trunc(EKashiCode.Value), iYouBun);        //  <055>

			EHendouhi.Value			:=	GetFLD('FixChgRate').AsFloat;			//	変動費比率

            if (giBankUseKbn = 1) then	//	銀行の採用区分がありの時		HIS0024
			begin
				GetBankInfo();														//	銀行ｺｰﾄﾞの桁数・属性・ｺﾝﾎﾟｰﾈﾝﾄの切り替え処理
				if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
				begin
//					if ((GetFLD('BankNCode').AsString) = '') then
					if ((GetFLD('BankNCode').AsFloat) = 0 ) then
					begin
						EBankCodeN.InputFlag :=	TRUE;
						EBankCodeN.Value	 :=	0;
					end
					else
					begin
//						if ((GetFLD('BankNCode').AsString) = '0000000000') then
                        if ((GetFLD('BankNCode').AsFloat) = 0 ) then
						begin
							EBankCodeN.InputFlag	:=	FALSE;
							EBankCodeN.Value		:=	1;
							EBankCodeN.Value		:=	0;
						end
						else
						begin
							EBankCodeN.InputFlag :=	FALSE;						//HIS0106
//							EBankCodeN.Value	:=	StrToInt(GetFLD('BankNCode').AsString);	//	ｺｰﾄﾞ
                            EBankCodeN.Value	:=	StrToIntDef(gfnGetBank_GCODE(GetFLD('BankNCode').AsFloat),0);	//	ｺｰﾄﾞ
						end;
					end;
	        	end
				else
				begin
					EBankCodeT.Text	:=	gfnGetBank_GCODE(GetFLD('BankNCode').AsFloat);
				end;
                LBankName.Caption		:=	GetKmkMABank(gfnGetBank_GCODE(GetFLD('BankNCode').AsFloat),bBankFlag); //	銀行名称
			end;

            //  分類 <002>
            if      (MasKbn = 1) and (JiGoKbn = 0) then		//	勘定科目時
            begin
                iStart := 0;
                iEnd   := 9;
            end
            else if (MasKbn = 2) and (JiGoKbn = 0) then		//	細目科目時
            begin
                iStart := 10;
                iEnd   := 19;
            end
            else
            begin
                iStart := 0;
                iEnd   := 0;
            end;

            if iEnd <> 0 then
            begin
                for iLoop := iStart to iEnd do
                begin
                    // 採用区分の確認
                    if (aBunruiKbn[iLoop] = 1) then             // 採用あり
                    begin
{
						// 属性、桁数の設定
                        if      aBunruiAttr[iLoop] = 0 then     // 0:数字
                            m_Bunrui[iLoop-iStart+1].ECode.InputAttr := iaZeroSup
                        else if aBunruiAttr[iLoop] = 1 then     // 1:数字（前ｾﾞﾛあり）
                            m_Bunrui[iLoop-iStart+1].ECode.InputAttr := iaZeroPad
                        else if aBunruiAttr[iLoop] = 2 then     // 2:ﾌﾘｰ
                            m_Bunrui[iLoop-iStart+1].ECode.InputAttr := iaFree;
                        m_Bunrui[iLoop-iStart+1].ECode.MaxLength := aBunruiDigit[iLoop];
}
                        // 分類情報の取得
                        strWk := 'BunruiNCode' + IntToStr(iLoop-iStart+1);
                        fnGetNBunrui(GetFLD(strWk).AsFloat, iLoop + 481, strGCode, strName);

                        // 分類情報を保存
                        m_Bunrui[iLoop-iStart+1].NCode := GetFLD(strWk).AsFloat;
                        m_Bunrui[iLoop-iStart+1].GCode := strGCode;
{
                        // ﾌｨｰﾙﾄﾞを使用可
                        m_Bunrui[iLoop-iStart+1].LCaption.Enabled   := TRUE;
                        m_Bunrui[iLoop-iStart+1].ECode.Enabled      := TRUE;
                        m_Bunrui[iLoop-iStart+1].LName.Enabled      := TRUE;

                        // ﾌｨｰﾙﾄﾞへ表示
                        m_Bunrui[iLoop-iStart+1].LCaption.Caption   := aBunruiNm[iLoop];
}
                        m_Bunrui[iLoop-iStart+1].ECode.Text         := strGCode;
                        m_Bunrui[iLoop-iStart+1].LName.Caption      := strName;
                    end
                    else                                        // 採用なし
                    begin
{
                        // ﾌｨｰﾙﾄﾞを使用不可
                        m_Bunrui[iLoop-iStart+1].LCaption.Enabled   := FALSE;
                        m_Bunrui[iLoop-iStart+1].ECode.Enabled      := FALSE;
                        m_Bunrui[iLoop-iStart+1].LName.Enabled      := FALSE;
}
                        // ﾌｨｰﾙﾄﾞのｸﾘｱ
                        m_Bunrui[iLoop-iStart+1].LCaption.Caption   := '';
						m_Bunrui[iLoop-iStart+1].ECode.Text         := '';
                        m_Bunrui[iLoop-iStart+1].LName.Caption      := '';
                    end;
                end;
            end;

			// 出力情報
			EMainasuCode.Value		:=	GetFLD('MinusKbn').AsInteger;			//	ﾏｲﾅｽ印刷区分
			GetList(EMainasuCode,LMainasuName);									//	ﾏｲﾅｽ印刷区分内容
			ESagakuCode.Value		:=	GetFLD('SagakuKbn').AsInteger;			//	差額印刷区分
			GetList(ESagakuCode,LSagakuName);									//	差額印刷区分内容
			ERiekiCode.Value		:=	GetFLD('ProfitKbn').AsInteger;			//	利益印刷区分
			GetList(ERiekiCode,LRiekiName);										//	利益印刷区分内容

			// 実在科目の時
			if (iSelect	= ZITSUZAI) then
			begin
				EAddUnit.Value := GetFLD('OutKbn1').AsInteger;					//	集計単位区分
				GetList(EAddUnit,LAddUnitName);									//	集計単位区分内容
			end
			else
				EAddUnit.Value := 0;

			EKihyousya.Value  		:=	GetFLD('MTekiPrn').AsInteger;			//	元帳摘要欄起票者印字区分
			GetList(EKihyousya,LKihyousyaName);									//	元帳摘要欄起票者印字区分内容
			EMainaName.Text			:=	GetFLD('MinusName').AsString;			//	ﾏｲﾅｽ変換科目名
			ESousyokuCode.Value  	:=	GetFLD('DecoKbn').AsInteger;			//	装飾区分
			giSousyoku				:=	Trunc(ESousyokuCode.Value);
			GetList(ESousyokuCode,LSousyokuName);								//	装飾区分内容

			//	入力条件
			EShiwakeCode.Value		:=	GetFLD('InputKbn').AsInteger;			//	仕訳入力区分
			GetList(EShiwakeCode,LShiwakeName);									//	仕訳入力区分内容

			case GetFLD('DInputKbn').AsInteger of	//	期日入力区分
				0:	EKijitsuCode.Value	:=	0;		//	入力なし
				1:	//	正残側のみ
				begin
					if (GetFLD('DInputAlw').AsInteger = 0) then		//	期日必須入力区分の時
						EKijitsuCode.Value	:=	1					//	任意入力
					else
						EKijitsuCode.Value	:=	2					//	必須入力
				end;
				2:	//	貸借入力
				begin
					if (GetFLD('DInputAlw').AsInteger = 0) then		//	期日必須入力区分の時
						EKijitsuCode.Value	:=	3					//	任意入力
					else
						EKijitsuCode.Value	:=	4					//	必須入力
				end;
				3:	//	負残側のみ
				begin
					if (GetFLD('DInputAlw').AsInteger = 0) then		//	期日必須入力区分の時
						EKijitsuCode.Value	:=	5					//	任意入力
					else
						EKijitsuCode.Value	:=	6					//	必須入力
				end;
			end;
			GetList(EKijitsuCode,LKijitsuName);						//	期日入力区分内容

			case GetFLD('TInputKbn').AsInteger of					//	手形番号入力区分
				0:	ETegataNoCode.Value	:=	0;						//	入力なし
				1:	//	正残側のみ
				begin
					if (GetFLD('TInputAlw').AsInteger = 0) then		//	手形番号必須入力区分の時
						ETegataNoCode.Value	:=	1					//	任意入力
					else
						ETegataNoCode.Value	:=	2					//	必須入力
				end;
				2:	//	貸借入力
				begin
					if (GetFLD('TInputAlw').AsInteger = 0) then		//	手形番号必須入力区分の時
						ETegataNoCode.Value	:=	3					//	任意入力
					else
						ETegataNoCode.Value	:=	4					//	必須入力
				end;
				3:	//	負残側のみ
				begin
					if (GetFLD('TInputAlw').AsInteger = 0) then		//	手形番号必須入力区分の時
						ETegataNoCode.Value	:=	5					//	任意入力
					else
						ETegataNoCode.Value	:=	6					//	必須入力
				end;
			end;

			ETekiCode.Value			:=	GetFLD('TkInputKbn').AsInteger;			//	固定摘要必須入力
			iKoteiKbn				:=	GetFLD('TkInputKbn').AsInteger;			//	固定摘要必須入力
			GetList(ETekiCode,LTekiName);                                       //	固定摘要必須入力内容
            if ( GetFLD('TkClassCode').AsFloat = 0 ) then
                ETekiyouBunrui.Value	:=	GetFLD('TkClassCode').AsFloat		//	摘要分類ｺｰﾄﾞ
            else
    			ETekiyouBunrui.Value	:=	gfnGetTekiMA_GCODE(GetFLD('TkClassCode').AsFloat);		//	摘要分類ｺｰﾄﾞ
			sTekiBunName			:=	GetTekiMA(Trunc(ETekiyouBunrui.Value));	//	摘要分類ｺｰﾄﾞ内容
			if (sTekiBunName = 'Null') then
				LTekiyoubunrui.Caption	:=	''
			else
				LTekiyoubunrui.Caption	:=	sTekiBunName;
			EShikuriCode.Value		:=	GetFLD('CashCodeKbn').AsInteger;		//	資金繰ｺｰﾄﾞ優先区分
			GetList(EShikuriCode,LShikuriName);									//	資金繰ｺｰﾄﾞ優先区分内容
            ESyousuten.Value		:=	GetFLD('DPointNum').AsInteger;			//	小数点桁数<057>

            // 適用開始・終了日付
            gfnCheckTekiDate(DmqData);

			// 番号管理
			if m_System = MJSLINK then
			begin
				ComboNumber1.ItemIndex := fnGetNameInfo(GetFLD('NoName1').AsInteger);	// 番号1名称No

				case GetFLD('NoInputKbn1').AsInteger of					//	番号1入力区分
					0:	ENumber1.Value	:=	0;							//	入力なし
					1:	//	正残側のみ
					begin
						if (GetFLD('NoInputAlw1').AsInteger = 0) then	//	番号1必須入力区分の時
							ENumber1.Value	:=	1						//	任意入力
						else
							ENumber1.Value	:=	2						//	必須入力
					end;
					2:	//	貸借入力
					begin
						if (GetFLD('NoInputAlw1').AsInteger = 0) then	//	番号1必須入力区分の時
							ENumber1.Value	:=	3						//	任意入力
						else
							ENumber1.Value	:=	4						//	必須入力
					end;
					3:	//	負残側のみ
					begin
						if (GetFLD('NoInputAlw1').AsInteger = 0) then	//	番号1必須入力区分の時
							ENumber1.Value	:=	5						//	任意入力
						else
							ENumber1.Value	:=	6						//	必須入力
					end;
				end;
				GetList(ENumber1,LNumber1);								//	番号1入力区分内容

				EDspNumber1.Value := GetFLD('EInpKbn1').AsInteger;		// 番号1初期表示区分
                DspNumberListremake(1);                                 // <065>
				GetList(EDspNumber1,LDspNumber1);						// 番号1初期表示区分内容


				ComboNumber2.ItemIndex := fnGetNameInfo(GetFLD('NoName2').AsInteger);	// 番号2名称No

				case GetFLD('NoInputKbn2').AsInteger of					//	番号2入力区分
					0:	ENumber2.Value	:=	0;							//	入力なし
					1:	//	正残側のみ
					begin
						if (GetFLD('NoInputAlw2').AsInteger = 0) then	//	番号2必須入力区分の時
							ENumber2.Value	:=	1						//	任意入力
						else
							ENumber2.Value	:=	2						//	必須入力
					end;
					2:	//	貸借入力
					begin
						if (GetFLD('NoInputAlw2').AsInteger = 0) then	//	番号2必須入力区分の時
							ENumber2.Value	:=	3						//	任意入力
						else
							ENumber2.Value	:=	4						//	必須入力
					end;
					3:	//	負残側のみ
					begin
						if (GetFLD('NoInputAlw2').AsInteger = 0) then	//	番号2必須入力区分の時
							ENumber2.Value	:=	5						//	任意入力
						else
							ENumber2.Value	:=	6						//	必須入力
					end;
				end;
				GetList(ENumber2,LNumber2);								//	番号2入力区分内容

				EDspNumber2.Value := GetFLD('EInpKbn2').AsInteger;		// 番号2初期表示区分
                DspNumberListremake(2);                                 // <065>
				GetList(EDspNumber2,LDspNumber2);						// 番号2初期表示区分内容

				ETotalKbn.Value := GetFLD('EInpKbn3').AsInteger;		// 同一番号集計区分
				GetList(ETotalKbn,LTotalKbnName);						// 同一番号集計区分内容
			end;

			//	電子帳簿
			ERirekiKbnCode.Value	:=	GetFLD('HisKbn').AsInteger;				//	履歴管理区分
			GetList(ERirekiKbnCode,LRirekiKbnName);								//	履歴管理区分内容

			if (gbEndEscFlag = FALSE) then
				fnSyousaiSetCheck(INFOSET,0);	//	表示内容の退避	//	HIS0031
		end;
	end;
	DmqFusen.Free;
	DmqData.Close;
	DmqData.Free;

	case iSelect of
		GOUKEI:
		begin
			EnabledSelect(GOUKEI,iKoteiKbn,iKoujiKbn,iHojyo1,iBunsekiCode);
			gbSetPosition	:=	GOUKEI;
		end;

		ZITSUZAI:
		begin
			EnabledSelect(ZITSUZAI,iKoteiKbn,iKoujiKbn,iHojyo1,iBunsekiCode);
			//	選択された科目が複合なのかﾁｪｯｸ		HIS0007
			if (FukuKmkCheck(wkRec.NCode)) then
			begin
//				EHojyo1Code.Enabled		:=	FALSE;		//	第１補助(ｺｰﾄﾞ)		//HIS0027
//				EHojyo2Code.Enabled		:=	FALSE;		//	第２補助(ｺｰﾄﾞ)		//HIS0027
			end;

			gbSetPosition	:=	ZITSUZAI;
		end;
		SAIMOKU:
		begin
			EnabledSelect(SAIMOKU,iKoteiKbn,iKoujiKbn,iHojyo1,iBunsekiCode);
//hiro0706
			if (MTab_N.Items[0].Enabled = FALSE) then
				MTab_Select.Items[0].Enabled :=	FALSE
			else
				MTab_Select.Items[0].Enabled :=	TRUE;
			gbSetPosition	:=	SAIMOKU;
		end;
	end;

	if wkRec.KoteiKbn in [2,3] then
	begin
		MTab_Select.Items[0].Enabled :=	FALSE;	//	実在
		MTab_Select.Items[1].Enabled :=	FALSE;	//	細目
		MTab_Select.Items[2].Enabled :=	FALSE;	//	合計
	end;

	//	更新時・取消時の条件とする為ｸﾞﾛｰﾊﾞﾙに代入
	giUpDate_MasKbn	:=	MasKbn;			//	ﾏｽﾀｰ区分
	giUpDate_SumKbn	:=	JiGoKbn;		//	実在／合計区分
	giUpDate_GCode	:=	GaiCode;		//	外部ｺｰﾄﾞ
	giUpDate_SCode	:=	SaiCode;		//	細目ｺｰﾄﾞ
end;

//**********************************************************************
//*		Proccess	:	選択された科目によって使用可・不可を判断
//*		Name		:	H.Endo
//*		Date		:	2000/09/07
//*		Parameter	:	EnableNO	:	選択された種類(1:合計,2:実在,3:細目,4:損益の部)
//*						KoteiKbn	:	固定摘要必須入力
//*						KoujiKbn	:	工事採用区分
//*						Hojyo1		:	第１補助採用区分
//*						BunsekiCode	:	分析ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.EnabledSelect(EnableNO: Integer; KoteiKbn: Integer;
									 KoujiKbn: Integer; Hojyo1: Integer; BunsekiCode: Integer);
var
	iChoice	:	Integer;
	cNode	:	TTreeNode;		//	選択されているNode
	wkRec	:	^TaikeiRec;		//	選択されているNodeの構造体

begin
    wkRec   := Nil;
    iChoice := 0;

	LCode.Enabled			:=	TRUE;	//	ｺｰﾄﾞ(名称)
	ECode.Enabled			:=	TRUE;	//	ｺｰﾄﾞ
	LRen.Enabled			:=	TRUE;	//	連想(名称)
	ERen.Enabled			:=	TRUE;	//	連想
	LLName.Enabled			:=	TRUE;	//	正式名称(名称)
	ELName.Enabled			:=	TRUE;	//	正式名称
	LSName.Enabled			:=	TRUE;	//	簡略名称(名称)
	ESName.Enabled			:=	TRUE;	//	簡略名称
	LSousyoku.Enabled		:=	TRUE;	//	装飾(名称)
	ESousyokuCode.Zero		:=	TRUE;	//	装飾区分
	ESousyokuCode.Enabled	:=	TRUE;	//	装飾区分
	LSousyokuName.Visible	:=	TRUE;	//	装飾(内容)

//HIS0033
	case giReferFlag of
		//	通常
		NORMAL:
		begin
			if (EnableNO = 4) then	//	損益科目
			begin
				B_SUpDate.Enabled := FALSE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用不可
				B_SCancel.Enabled := FALSE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用不可
			end
			else
			begin
				B_SUpDate.Enabled := TRUE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用可
				B_SCancel.Enabled := TRUE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用可
			end;
		end;
		//	基本のみ,参照,勘定科目(基本)/科目別補助(参照),勘定科目(参照)/科目別補助(基本)
		BASICONLY,REFER,KAN_BA_HO_RE,KAN_RE_HO_BA:
		begin
			B_SUpDate.Enabled := FALSE;		//	更新ﾎﾞﾀﾝ(詳細画面)使用不可
			B_SCancel.Enabled := FALSE;		//	取消ﾎﾞﾀﾝ(詳細画面)使用不可
		end;
		//	勘定科目(通常)/科目別補助(基本),勘定科目(通常)/科目別補助(参照)
		KAN_NO_HO_BA,KAN_NO_HO_RE:
		begin
			case EnableNO of
				1,2:
				begin
					B_SUpDate.Enabled := TRUE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用可
					B_SCancel.Enabled := TRUE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用可
				end;
				3,4:
				begin
					B_SUpDate.Enabled := FALSE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用不可
					B_SCancel.Enabled := FALSE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用不可
				end;
			end;
		end;
		//	勘定科目(基本)/科目別補助(通常),勘定科目(参照)/科目別補助(通常)
		KAN_BA_HO_NO,KAN_RE_HO_NO:
		begin
			case EnableNO of
				3:
				begin
					B_SUpDate.Enabled := TRUE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用可
					B_SCancel.Enabled := TRUE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用可
				end;
				1,2,4:
				begin
					B_SUpDate.Enabled := FALSE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用不可
					B_SCancel.Enabled := FALSE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用不可
				end;
			end;
		end;
	end;
//*******
{
	if (giReferFlag <> REFER) then	//	HIS0004
	begin
		if (EnableNO = 4) then	//	損益科目
		begin
			B_SUpDate.Enabled		:=	FALSE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用不可
			B_SCancel.Enabled		:=	FALSE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用不可
		end
		else begin
			B_SUpDate.Enabled		:=	TRUE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用可
			B_SCancel.Enabled		:=	TRUE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用可
		end;
	end
	else
	begin
		B_SUpDate.Enabled		:=	FALSE;	//	更新ﾎﾞﾀﾝ(詳細画面)使用不可
		B_SCancel.Enabled		:=	FALSE;	//	取消ﾎﾞﾀﾝ(詳細画面)使用不可
	end;
}
	MTab_Select.Items[0].Enabled	:=	TRUE;
	MTab_SyousaiInfo.Items[0].Enabled	:=	TRUE;
	MTab_SyousaiInfo.Items[1].Enabled	:=	TRUE;
    MTab_SyousaiInfo.Items[2].Enabled   :=  TRUE;
    MTab_SyousaiInfo.Items[3].Enabled   :=  TRUE;   // <002>

	case EnableNO of
		1:	//	合計の時
		begin
			//	共通
			LBunseki.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(名称)
			EBunCode.Zero			:=	FALSE;		//	分析ｺｰﾄﾞ(0表示/非表示)
			EBunCode.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(ｺｰﾄﾞ)
			LBunName.Visible		:=	FALSE;		//	分析ｺｰﾄﾞ(内容)
			LYoubun.Enabled			:=	FALSE;		//	要約分析ｺｰﾄﾞ(名称)
//			LYoBunName.Visible		:=	FALSE;		//	要約分析ｺｰﾄﾞ(内容)		//	HIS0018
//--- HIS0032 START -----
			LYouyaku.Enabled		:=	FALSE;		//	要約ｺｰﾄﾞ(名称)
			LYouName.Visible		:=	FALSE;		//	要約ｺｰﾄﾞ(内容)
			LKotei.Enabled			:=	FALSE;		//	固定費ｺｰﾄﾞ(名称)
			LKoteiName.Visible		:=	FALSE;		//	固定費ｺｰﾄﾞ(内容)
			LHendo.Enabled			:=	FALSE;		//	変動費ｺｰﾄﾞ(名称)
			LHendoName.Visible		:=	FALSE;		//	変動費ｺｰﾄﾞ(内容)
//--- HIS0032 END -------
			LSeikaku.Enabled		:=	FALSE;		//	性格ｺｰﾄﾞ(名称)
			ESeikakuCode.Zero		:=	FALSE;		//	性格ｺｰﾄﾞ(0表示/非表示)
			ESeikakuCode.Enabled	:=	FALSE;		//	性格ｺｰﾄﾞ(ｺｰﾄﾞ)
			LSeikakuName.Visible	:=	FALSE;		//	性格ｺｰﾄﾞ(内容)
			//	採用区分

            LBank.Enabled			:=	FALSE;		//	銀行ｺｰﾄﾞ(名称)
			if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
				EBankCodeN.Enabled		:=	FALSE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			else
				EBankCodeT.Enabled		:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			LBankName.Visible		:=	FALSE;		//	銀行ｺｰﾄﾞ(内容)
			LStartDate.Enabled		:=	FALSE;		//	適用開始日(名称)
			EStartDate.Enabled		:=	FALSE;		//	適用開始日
			LEndDate.Enabled		:=	FALSE;		//	適用終了日(名称)
			EEndDate.Enabled		:=	FALSE;		//	適用終了日
			//	集計情報
			LSeizan.Enabled			:=	TRUE;		//	正残(名称)
			ESeiZanCode.Zero	  	:=	TRUE;		//	正残(0表示/非表示)
			ESeiZanCode.Enabled		:=	TRUE;		//	正残(ｺｰﾄﾞ)
			LSeiZanName.Visible		:=	TRUE;		//	正残(内容)
			LBsPl.Enabled			:=	TRUE;		//	BS/PL(名称)
			EBPCode.Zero	  		:=	TRUE;		//	BS/PL(0表示/非表示)
			LBPName.Visible			:=	TRUE;		//	BS/PL(内容)
			LKisyuzan.Enabled		:=	FALSE;		//	期首残(名称)
			EKisyuCode.Zero	  		:=	FALSE;		//	期首残(0表示/非表示)
			EKisyuCode.Enabled		:=	FALSE;		//	期首残(ｺｰﾄﾞ)
			LKisyuName.Visible		:=	FALSE;		//	期首残(内容)
// <021>			LDspPri.Enabled			:=	TRUE;		//	表示／印刷(名称)
// <021>			EDPCode.Zero	  		:=	TRUE;		//	表示／印刷(0表示/非表示)
// <021>			LDPName.Visible			:=	TRUE;		//	表示／印刷(内容)
			LHiritsu.Enabled		:=	FALSE;		//	比率科目(名称)
			EHiritsuCode.Zero	  	:=	FALSE;		//	比率科目(0表示/非表示)
			EHiritsuCode.Enabled	:=	FALSE;		//	比率科目(ｺｰﾄﾞ)
			LHiritsuName.Visible	:=	FALSE;		//	比率科目(内容)
			LKariShiki.Enabled		:=	FALSE;		//	借方資金繰(名称)
			EKariCode.Zero	  		:=	FALSE;		//	借方資金繰(0表示/非表示)
			EKariCode.Enabled		:=	FALSE;		//	借方資金繰(ｺｰﾄﾞ)
			LKariName.Visible		:=	FALSE;		//	借方資金繰(内容)
			LKashiShiki.Enabled		:=	FALSE;		//	貸方資金繰(名称)
			EKashiCode.Zero	  		:=	FALSE;		//	貸方資金繰(0表示/非表示)
			EKashiCode.Enabled		:=	FALSE;		//	貸方資金繰(ｺｰﾄﾞ)
			LKashiName.Visible		:=	FALSE;		//	貸方資金繰(内容)
			LHendou.Enabled			:=	FALSE;		//	変動費比率(名称)
			EHendouhi.Zero	  		:=	FALSE;		//	変動費比率(0表示/非表示)
			EHendouhi.Enabled		:=	FALSE;		//	変動費比率(ｺｰﾄﾞ)
			//	出力情報
			LMaina.Enabled			:=	TRUE;		//	ﾏｲﾅｽ印刷(名称)
			EMainasuCode.Zero	  	:=	TRUE;		//	ﾏｲﾅｽ印刷(0表示/非表示)
			EMainasuCode.Enabled	:=	TRUE;		//	ﾏｲﾅｽ印刷(ｺｰﾄﾞ)
			LMainasuName.Visible	:=	TRUE;		//	ﾏｲﾅｽ印刷(内容)
			LSagaPri.Enabled		:=	TRUE;		//	差額印刷(名称)
			ESagakuCode.Zero	  	:=	TRUE;		//	差額印刷(0表示/非表示)
			ESagakuCode.Enabled		:=	TRUE;		//	差額印刷(ｺｰﾄﾞ)
			LSagakuName.Visible		:=	TRUE;		//	差額印刷(内容)
			LRiekiPri.Enabled		:=	TRUE;		//	利益印刷(名称)
			ERiekiCode.Zero	  		:=	TRUE;		//	利益印刷(0表示/非表示)
			ERiekiCode.Enabled		:=	TRUE;		//	利益印刷(ｺｰﾄﾞ)
			LRiekiName.Visible		:=	TRUE;		//	利益印刷(内容)
			EAddUnit.Zero			:=	FALSE;		//  集計単位区分(ｺｰﾄﾞ)		//HIS0098

			LKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字区分(名称)
			EKihyousya.Zero			:=	FALSE;		//	元帳摘要欄起票者印字区分(0表示/非表示)
			EKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字(ｺｰﾄﾞ)
			LKihyousyaName.Visible	:=	FALSE;		//	元帳摘要欄起票者印字(内容)
			LMainaHen.Enabled		:=	TRUE;		//	ﾏｲﾅｽ変換科目名(名称)
			EMainaName.Enabled		:=	TRUE;		//	ﾏｲﾅｽ変換科目名(科目名)

			MTab_SyousaiInfo.Items[2].Enabled	:=	FALSE;
			MTab_SyousaiInfo.Items[3].Enabled	:=	FALSE;  // <002>
			MTab_SyousaiInfo.Items[0].Selected	:=	TRUE;
			MTab_SyousaiInfo.Items[1].Selected	:=	FALSE;
            MTab_SyousaiInfo.Items[2].Selected  :=  FALSE;
            MTab_SyousaiInfo.Items[3].Selected  :=  FALSE;  // <002>

			//	入力条件
			LShiwa.Enabled			:=	FALSE;		//	仕訳(名称)
			EShiwakeCode.Zero		:=	FALSE;		//	仕訳(0表示/非表示)
			EShiwakeCode.Enabled	:=	FALSE;		//	仕訳(ｺｰﾄﾞ)
			LShiwakeName.Visible	:=	FALSE;		//	仕訳(内容)
			LKijitsu.Enabled	 	:=	FALSE;		//	期日(名称)
			EKijitsuCode.Zero		:=	FALSE;		//	期日(0表示/非表示)
			EKijitsuCode.Enabled	:=	FALSE;		//	期日(ｺｰﾄﾞ)
			LKijitsuName.Visible	:=	FALSE;		//	期日(内容)
//			LTegataNo.Enabled	 	:=	FALSE;		//	手形番号(名称)
//			ETegataNoCode.Zero		:=	FALSE;		//	手形番号(0表示/非表示)
//			ETegataNoCode.Enabled	:=	FALSE;		//	手形番号(ｺｰﾄﾞ)
//			LTegataNoName.Visible	:=	FALSE;		//	手形番号(内容)
			LKoteiTeki.Enabled	 	:=	FALSE;		//	固定摘要(名称)
			ETekiCode.Zero			:=	FALSE;		//	固定摘要(0表示/非表示)
			ETekiCode.Enabled		:=	FALSE;		//	固定摘要(ｺｰﾄﾞ)
			LTekiName.Visible		:=	FALSE;		//	固定摘要(内容)
			LTekiBunrui.Enabled	 	:=	FALSE;		//	摘要分類(名称)
			ETekiyouBunrui.Enabled	:=	FALSE;		//	摘要分類(ｺｰﾄﾞ)
			LTekiyoubunrui.Visible	:=	FALSE;		//	摘要分類(内容)
			LShikikuriYu.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(名称)
			EShikuriCode.Zero		:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(0表示/非表示)
			EShikuriCode.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(ｺｰﾄﾞ)
			LShikuriName.Visible	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(内容)

    	//	HIS0021
//			LSyousu.Enabled			:=	False;		//	小数点(名称)
//			ESyousuten.Zero			:=	False;		//	小数点(0表示/非表示)
//			ESyousuten.Enabled		:=	False;		//	小数点(ｺｰﾄﾞ)
//			LSyousuKeta.Enabled		:=	False;		//	小数点(桁)

		//--- HIS0109 St -----
			// 番号管理
			ENumber1.Zero			:=	FALSE;		//	番号1				(0表示/非表示)
			EDspNumber1.Zero		:=	FALSE;		//	番号1表示区分		(0表示/非表示)
			ENumber2.Zero			:=	FALSE;		//	番号2				(0表示/非表示)
			EDspNumber2.Zero		:=	FALSE;		//	番号2表示区分		(0表示/非表示)
			ETotalKbn.Zero			:=	FALSE;		//	番号集計区分固定摘要(0表示/非表示)
        //--- HIS0109 Ed -----
			//	電子帳簿
			LDen_Rireki.Enabled		:=	FALSE;		//	履歴管理(名称)
			ERirekiKbnCode.Zero		:=	FALSE;		//	履歴管理(0表示/非表示)
			ERirekiKbnCode.Enabled	:=	FALSE;		//	履歴管理(ｺｰﾄﾞ)
			LRirekiKbnName.Visible	:=	FALSE;		//	履歴管理(内容)
//			LDen_Hojyo1.Enabled	 	:=	FALSE;		//	第１補助(名称)
//			EDenHojyo1.Zero			:=	FALSE;		//	第１補助(0表示/非表示)
//			EDenHojyo1.Enabled		:=	FALSE;		//	第１補助(ｺｰﾄﾞ)
//			LDenHojyo1Name.Visible	:=	FALSE;		//	第１補助(内容)
//			LDen_Hojyo2.Enabled	 	:=	FALSE;		//	第２補助(名称)
//			EDenHojyo2.Zero			:=	FALSE;		//	第２補助(0表示/非表示)
//			EDenHojyo2.Enabled		:=	FALSE;		//	第２補助(ｺｰﾄﾞ)
//			LDenHojyo2Name.Visible	:=	FALSE;		//	第２補助(内容)

			//	参照時											//	HIS0004/HIS0033
			if (giReferFlag = REFER)
				or (giReferFlag = BASICONLY)			//	基本のみ
				or (giReferFlag = KAN_RE_HO_NO)			//	勘定科目(参照)/科目別補助(通常)
				or (giReferFlag = KAN_RE_HO_BA)			//	勘定科目(参照)/科目別補助(基本)
				or (giReferFlag = KAN_BA_HO_NO)			//	勘定科目(基本)/科目別補助(通常)
				or (giReferFlag = KAN_BA_HO_RE) then	//	勘定科目(基本)/科目別補助(参照)
				SyousaiEnabledControl();
		end;
		2:	//	実在の時
		begin
			//	共通
			LBunseki.Enabled		:=	TRUE;		//	分析ｺｰﾄﾞ(名称)
			EBunCode.Zero			:=	TRUE;		//	分析ｺｰﾄﾞ(0表示/非表示)
			EBunCode.Enabled		:=	TRUE;		//	分析ｺｰﾄﾞ(ｺｰﾄﾞ)
			LBunName.Visible		:=	TRUE;		//	分析ｺｰﾄﾞ(内容)
			LYoubun.Enabled			:=	TRUE;		//	要約分析ｺｰﾄﾞ(名称)
//			LYoBunName.Visible		:=	TRUE;		//	要約分析ｺｰﾄﾞ(内容)		//	HIS0018
//--- HIS0032 START -----
			LYouyaku.Enabled		:=	TRUE;		//	要約ｺｰﾄﾞ(名称)
			LYouName.Visible		:=	TRUE;		//	要約ｺｰﾄﾞ(内容)
			LKotei.Enabled			:=	TRUE;		//	固定費ｺｰﾄﾞ(名称)
			LKoteiName.Visible		:=	TRUE;		//	固定費ｺｰﾄﾞ(内容)
			LHendo.Enabled			:=	TRUE;		//	変動費ｺｰﾄﾞ(名称)
			LHendoName.Visible		:=	TRUE;		//	変動費ｺｰﾄﾞ(内容)
//--- HIS0032 END -------
			LSeikaku.Enabled		:=	TRUE;		//	性格ｺｰﾄﾞ(名称)
			ESeikakuCode.Zero		:=	TRUE;		//	性格ｺｰﾄﾞ(0表示/非表示)
			ESeikakuCode.Enabled	:=	TRUE;		//	性格ｺｰﾄﾞ(ｺｰﾄﾞ)
			LSeikakuName.Visible	:=	TRUE;		//	性格ｺｰﾄﾞ(内容)

			if (giBankUseKbn = 1) then	//	銀行の採用区分がありの時			HIS0024
			begin
				LBank.Enabled		:=	TRUE;		//	銀行ｺｰﾄﾞ(名称)
				LBankName.Visible	:=	TRUE;		//	銀行ｺｰﾄﾞ(内容)
			end
			else begin
				LBank.Enabled		:=	FALSE;		//	銀行ｺｰﾄﾞ(名称)
				LBankName.Visible	:=	FALSE;		//	銀行ｺｰﾄﾞ(内容)
				EBankCodeN.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
				EBankCodeT.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			end;
			//	分析ｺｰﾄﾞが現預金の時銀行ｺｰﾄﾞ使用可(銀行が採用ありの時 HIS0024)
			if (((BunsekiCode > 0) and (BunsekiCode < 10))
				or (BunsekiCode = 40) or (BunsekiCode = 46)								//HIS0068
				or (BunsekiCode = 38) or (BunsekiCode = 135) or (BunsekiCode = 138))	//HIS0077
																 and (giBankUseKbn = 1) then
			begin
				//	細目で銀行ｺｰﾄﾞが採用されていた時は実在では入力不可
				if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
					EBankCodeN.Enabled	:=	TRUE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
				else
					EBankCodeT.Enabled	:=	TRUE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			end
			else
			begin
				if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
					EBankCodeN.Enabled	:=	FALSE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
				else
					EBankCodeT.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			end;
			LStartDate.Enabled		:=	TRUE;		//	適用開始日(名称)
			EStartDate.Enabled		:=	TRUE;		//	適用開始日
			LEndDate.Enabled		:=	TRUE;		//	適用終了日(名称)
			EEndDate.Enabled		:=	TRUE;		//	適用終了日
			//	集計情報
			LSeizan.Enabled			:=	TRUE;		//	正残(名称)
			ESeiZanCode.Zero	  	:=	TRUE;		//	正残(0表示/非表示)
			ESeiZanCode.Enabled		:=	TRUE;		//	正残(ｺｰﾄﾞ)
			LSeiZanName.Visible		:=	TRUE;		//	正残(内容)
			LBsPl.Enabled			:=	TRUE;		//	BS/PL(名称)
			EBPCode.Zero	  		:=	TRUE;		//	BS/PL(0表示/非表示)
//			EBPCode.Enabled			:=	TRUE;		//	BS/PL(ｺｰﾄﾞ)
			// <110>ADD↓
			// 分析ｺｰﾄﾞ55:利益剰余金(aDefault[54].Code)のみBS/PL(ｺｰﾄﾞ)変更可
			EBPCode.Enabled	 		:=	(BunsekiCode = aDefault[54].Code);	// BS/PL(ｺｰﾄﾞ)
			// <110>ADD↑
{20020319 endo 非会計科目もBS/PLの判断ができるようになったので、非表示にしなくてもいいかな!?
			if (BunsekiCode = 0) then
			begin
			//--- HIS0066 START -----
				case MComboBox.ItemIndex of
					0,1: LBPName.Visible :=	FALSE;	//	BS/PL(内容)
					2,3: LBPName.Visible :=	TRUE;	//	BS/PL(内容)
				end;
			//--- HIS0066  END  -----
			end
			else
}
				LBPName.Visible		:=	TRUE;		//	BS/PL(内容)
			LKisyuzan.Enabled		:=	TRUE;		//	期首残(名称)
			EKisyuCode.Zero	  		:=	TRUE;		//	期首残(0表示/非表示)
			EKisyuCode.Enabled		:=	TRUE;		//	期首残(ｺｰﾄﾞ)
			LKisyuName.Visible		:=	TRUE;		//	期首残(内容)
// <021>			LDspPri.Enabled			:=	TRUE;		//	表示／印刷(名称)
// <021>			EDPCode.Zero	  		:=	TRUE;		//	表示／印刷(0表示/非表示)
// <021>			LDPName.Visible			:=	TRUE;		//	表示／印刷(内容)
			LHiritsu.Enabled		:=	TRUE;		//	比率科目(名称)
			EHiritsuCode.Zero	  	:=	TRUE;		//	比率科目(0表示/非表示)
			EHiritsuCode.Enabled	:=	TRUE;		//	比率科目(ｺｰﾄﾞ)
			LHiritsuName.Visible	:=	TRUE;		//	比率科目(内容)
			LKariShiki.Enabled		:=	TRUE;		//	借方資金繰(名称)
			EKariCode.Zero	  		:=	FALSE;		//	借方資金繰(0表示/非表示)
			EKariCode.Enabled		:=	TRUE;		//	借方資金繰(ｺｰﾄﾞ)
			LKariName.Visible		:=	TRUE;		//	借方資金繰(内容)
			LKashiShiki.Enabled		:=	TRUE;		//	貸方資金繰(名称)
			EKashiCode.Zero	  		:=	FALSE;		//	貸方資金繰(0表示/非表示)
			EKashiCode.Enabled		:=	TRUE;		//	貸方資金繰(ｺｰﾄﾞ)
			LKashiName.Visible		:=	TRUE;		//	貸方資金繰(内容)
			LHendou.Enabled			:=	TRUE;		//	変動費比率(名称)
			EHendouhi.Zero	  		:=	TRUE;		//	変動費比率(0表示/非表示)
			EHendouhi.Enabled		:=	TRUE;		//	変動費比率(ｺｰﾄﾞ)
			//	出力情報
			LMaina.Enabled			:=	TRUE;		//	ﾏｲﾅｽ印刷(名称)
			EMainasuCode.Zero	  	:=	TRUE;		//	ﾏｲﾅｽ印刷(0表示/非表示)
			EMainasuCode.Enabled	:=	TRUE;		//	ﾏｲﾅｽ印刷(ｺｰﾄﾞ)
			LMainasuName.Visible	:=	TRUE;		//	ﾏｲﾅｽ印刷(内容)
			LSagaPri.Enabled		:=	TRUE;		//	差額印刷(名称)
			ESagakuCode.Zero	  	:=	TRUE;		//	差額印刷(0表示/非表示)
			ESagakuCode.Enabled		:=	TRUE;		//	差額印刷(ｺｰﾄﾞ)
			LSagakuName.Visible		:=	TRUE;		//	差額印刷(内容)
			LRiekiPri.Enabled		:=	TRUE;		//	利益印刷(名称)
			ERiekiCode.Zero	  		:=	TRUE;		//	利益印刷(0表示/非表示)
			ERiekiCode.Enabled		:=	TRUE;		//	利益印刷(ｺｰﾄﾞ)
			LRiekiName.Visible		:=	TRUE;		//	利益印刷(内容)
			EAddUnit.Zero			:=	TRUE;		//  集計単位区分(ｺｰﾄﾞ)		//HIS0098

			LKihyousya.Enabled		:=	TRUE;		//	元帳摘要欄起票者印字区分(名称)
			EKihyousya.Zero			:=	TRUE;		//	元帳摘要欄起票者印字区分(0表示/非表示)
			EKihyousya.Enabled		:=	TRUE;		//	元帳摘要欄起票者印字(ｺｰﾄﾞ)
			LKihyousyaName.Visible	:=	TRUE;		//	元帳摘要欄起票者印字(内容)
			LMainaHen.Enabled		:=	TRUE;		//	ﾏｲﾅｽ変換科目名(名称)
			EMainaName.Enabled		:=	TRUE;		//	ﾏｲﾅｽ変換科目名(科目名)

			MTab_SyousaiInfo.Items[2].Enabled	:=	TRUE;
			MTab_SyousaiInfo.Items[3].Enabled	:=	TRUE;   // <002>

			//	入力条件
			LShiwa.Enabled			:=	TRUE;		//	仕訳(名称)
			EShiwakeCode.Zero		:=	TRUE;		//	仕訳(0表示/非表示)
			EShiwakeCode.Enabled	:=	TRUE;		//	仕訳(ｺｰﾄﾞ)
			LShiwakeName.Visible	:=	TRUE;		//	仕訳(内容)
			LKijitsu.Enabled	 	:=	TRUE;		//	期日(名称)
			EKijitsuCode.Zero		:=	TRUE;		//	期日(0表示/非表示)
			EKijitsuCode.Enabled	:=	TRUE;		//	期日(ｺｰﾄﾞ)
			LKijitsuName.Visible	:=	TRUE;		//	期日(内容)
//			LTegataNo.Enabled	 	:=	TRUE;		//	手形番号(名称)
//			ETegataNoCode.Zero		:=	TRUE;		//	手形番号(0表示/非表示)
//			ETegataNoCode.Enabled	:=	TRUE;		//	手形番号(ｺｰﾄﾞ)
//			LTegataNoName.Visible	:=	TRUE;		//	手形番号(内容)
			LKoteiTeki.Enabled	 	:=	TRUE;		//	固定摘要(名称)
			ETekiCode.Zero			:=	TRUE;		//	固定摘要(0表示/非表示)
			ETekiCode.Enabled		:=	TRUE;		//	固定摘要(ｺｰﾄﾞ)
			LTekiName.Visible		:=	TRUE;		//	固定摘要(内容)
//	HIS0029
//			if KoteiKbn = 1 then	//	固定摘要必須入力が固定摘要必須(1)の時
//			begin
				LTekiBunrui.Enabled	 	:=	TRUE;	//	摘要分類(名称)
//				ETekiyouBunrui.Zero		:=	TRUE;	//	摘要分類(0表示/非表示)
				ETekiyouBunrui.Enabled	:=	TRUE;	//	摘要分類(ｺｰﾄﾞ)
				LTekiyoubunrui.Visible	:=	TRUE;	//	摘要分類(内容)
//			end
//			else
//			begin
//				LTekiBunrui.Enabled	 	:=	FALSE;	//	摘要分類(名称)
//				ETekiyouBunrui.Value	:=	0;
//				ETekiyouBunrui.Zero		:=	FALSE;	//	摘要分類(0表示/非表示)
//				ETekiyouBunrui.Enabled	:=	FALSE;	//	摘要分類(ｺｰﾄﾞ)
//				LTekiyoubunrui.Visible	:=	FALSE;	//	摘要分類(内容)
//			end;
			LShikikuriYu.Enabled	:=	TRUE;		//	資金繰ｺｰﾄﾞ優先(名称)
			EShikuriCode.Zero		:=	TRUE;		//	資金繰ｺｰﾄﾞ優先(0表示/非表示)
			EShikuriCode.Enabled	:=	TRUE;		//	資金繰ｺｰﾄﾞ優先(ｺｰﾄﾞ)
			LShikuriName.Visible	:=	TRUE;		//	資金繰ｺｰﾄﾞ優先(内容)

            // --- <057> St ---
			LSyousu.Enabled			:=	TRUE;		//	小数点(名称)
			ESyousuten.Zero			:=	TRUE;		//	小数点(0表示/非表示)
			ESyousuten.Enabled		:=	TRUE;		//	小数点(ｺｰﾄﾞ)
			LSyousuKeta.Enabled		:=	TRUE;		//	小数点(桁)
            // --- <057> Ed ---

		//--- HIS0109 St -----
			// 番号管理
			ENumber1.Zero			:=	TRUE;		//	番号1				(0表示/非表示)
			EDspNumber1.Zero		:=	TRUE;		//	番号1表示区分		(0表示/非表示)
			ENumber2.Zero			:=	TRUE;		//	番号2				(0表示/非表示)
			EDspNumber2.Zero		:=	TRUE;		//	番号2表示区分		(0表示/非表示)
			ETotalKbn.Zero			:=	TRUE;		//	番号集計区分固定摘要(0表示/非表示)
        //--- HIS0109 Ed -----

			//	電子帳簿
			if (m_Electronic = TRUE) then		//	電子帳簿が採用されているとき
			begin
				LDen_Rireki.Enabled		:=	FALSE;		//	履歴管理(名称)
				ERirekiKbnCode.Zero		:=	TRUE;		//	履歴管理(0表示/非表示)
				ERirekiKbnCode.Enabled	:=	FALSE;		//	履歴管理(ｺｰﾄﾞ)
			end
			else
			begin
				LDen_Rireki.Enabled		:=	TRUE;		//	履歴管理(名称)
				ERirekiKbnCode.Zero		:=	TRUE;		//	履歴管理(0表示/非表示)
				ERirekiKbnCode.Enabled	:=	TRUE;		//	履歴管理(ｺｰﾄﾞ)
			end;
			LRirekiKbnName.Visible	:=	TRUE;		//	履歴管理(内容)
//			LDen_Hojyo1.Enabled	 	:=	TRUE;		//	第１補助(名称)
//			EDenHojyo1.Zero			:=	TRUE;		//	第１補助(0表示/非表示)
//			EDenHojyo1.Enabled		:=	TRUE;		//	第１補助(ｺｰﾄﾞ)
//			LDenHojyo1Name.Visible	:=	TRUE;		//	第１補助(内容)
//			LDen_Hojyo2.Enabled	 	:=	TRUE;		//	第２補助(名称)
//			EDenHojyo2.Zero			:=	TRUE;		//	第２補助(0表示/非表示)
//			EDenHojyo2.Enabled		:=	TRUE;		//	第２補助(ｺｰﾄﾞ)
//			LDenHojyo2Name.Visible	:=	TRUE;		//	第２補助(内容)

			//	参照時											//	HIS0004/HIS0033
			if (giReferFlag = REFER)
				or (giReferFlag = BASICONLY)			//	基本のみ
				or (giReferFlag = KAN_RE_HO_NO)			//	勘定科目(参照)/科目別補助(通常)
				or (giReferFlag = KAN_RE_HO_BA)			//	勘定科目(参照)/科目別補助(基本)
				or (giReferFlag = KAN_BA_HO_NO)			//	勘定科目(基本)/科目別補助(通常)
				or (giReferFlag = KAN_BA_HO_RE) then	//	勘定科目(基本)/科目別補助(参照)
				SyousaiEnabledControl();
		end;
		3:	//	細目の時
		begin
			//	共通
			LBunseki.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(名称)
			EBunCode.Zero			:=	FALSE;		//	分析ｺｰﾄﾞ(0表示/非表示)
			EBunCode.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(ｺｰﾄﾞ)
			LBunName.Visible		:=	FALSE;		//	分析ｺｰﾄﾞ(内容)
			LYoubun.Enabled			:=	FALSE;		//	要約分析ｺｰﾄﾞ(名称)
//			LYoBunName.Visible		:=	FALSE;		//	要約分析ｺｰﾄﾞ(内容)		//	HIS0018
//--- HIS0032 START -----
			LYouyaku.Enabled		:=	FALSE;		//	要約ｺｰﾄﾞ(名称)
			LYouName.Visible		:=	FALSE;		//	要約ｺｰﾄﾞ(内容)
			LKotei.Enabled			:=	FALSE;		//	固定費ｺｰﾄﾞ(名称)
			LKoteiName.Visible		:=	FALSE;		//	固定費ｺｰﾄﾞ(内容)
			LHendo.Enabled			:=	FALSE;		//	変動費ｺｰﾄﾞ(名称)
			LHendoName.Visible		:=	FALSE;		//	変動費ｺｰﾄﾞ(内容)
//--- HIS0032 END -------
			LSeikaku.Enabled		:=	FALSE;		//	性格ｺｰﾄﾞ(名称)
			ESeikakuCode.Zero		:=	FALSE;		//	性格ｺｰﾄﾞ(0表示/非表示)
			ESeikakuCode.Enabled	:=	FALSE;		//	性格ｺｰﾄﾞ(ｺｰﾄﾞ)
			LSeikakuName.Visible	:=	FALSE;		//	性格ｺｰﾄﾞ(内容)
			//	採用区分
			if (giBankUseKbn = 1) then	//	銀行の採用区分がありの時			HIS0024
			begin
				LBank.Enabled		:=	TRUE;		//	銀行ｺｰﾄﾞ(名称)
				LBankName.Visible	:=	TRUE;		//	銀行ｺｰﾄﾞ(内容)
			end
			else begin
				LBank.Enabled		:=	FALSE;		//	銀行ｺｰﾄﾞ(名称)
				LBankName.Visible	:=	FALSE;		//	銀行ｺｰﾄﾞ(内容)
				EBankCodeN.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
				EBankCodeT.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			end;

		//--- HIS0057 START -----
			cNode := TreeView.Selected;		//	選択されているNode
			if cNode <> nil then
				wkRec := cNode.Data;			//	NodeDataを体系へ

			if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
				iChoice := OTHER
			else if (wkRec.MasKbn = 2) and (wkRec.Kbn = 0) then
				iChoice := ZITSUZAI;
		//--- HIS0057  END  -----
			if (BankUseCheck(iChoice,TRUE) = FALSE) and (giBankUseKbn = 1) then 	//	HIS0024
			begin
				//	実在で銀行ｺｰﾄﾞが採用されていた時は細目では入力不可
				if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
					EBankCodeN.Enabled	:=	TRUE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
				else
					EBankCodeT.Enabled	:=	TRUE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			end
			else
			begin
				if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
					EBankCodeN.Enabled	:=	FALSE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
				else
					EBankCodeT.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			end;
			LStartDate.Enabled		:=	TRUE;		//	適用開始日(名称)
			EStartDate.Enabled		:=	TRUE;		//	適用開始日
			LEndDate.Enabled		:=	TRUE;		//	適用終了日(名称)
			EEndDate.Enabled		:=	TRUE;		//	適用終了日
			//	集計情報
			LSeizan.Enabled			:=	FALSE;		//	正残(名称)
			ESeiZanCode.Zero	  	:=	FALSE;		//	正残(0表示/非表示)
			ESeiZanCode.Enabled		:=	FALSE;		//	正残(ｺｰﾄﾞ)
			LSeiZanName.Visible		:=	FALSE;		//	正残(内容)
			LBsPl.Enabled			:=	FALSE;		//	BS/PL(名称)
			EBPCode.Zero	  		:=	FALSE;		//	BS/PL(0表示/非表示)
			LBPName.Visible			:=	FALSE;		//	BS/PL(内容)
			LKisyuzan.Enabled		:=	FALSE;		//	期首残(名称)
			EKisyuCode.Zero	  		:=	FALSE;		//	期首残(0表示/非表示)
			EKisyuCode.Enabled		:=	FALSE;		//	期首残(ｺｰﾄﾞ)
			LKisyuName.Visible		:=	FALSE;		//	期首残(内容)
// <021>			LDspPri.Enabled			:=	FALSE;		//	表示／印刷(名称)
// <021>			EDPCode.Zero	  		:=	FALSE;		//	表示／印刷(0表示/非表示)
// <021>			EDPCode.Enabled			:=	FALSE;		//	表示／印刷(ｺｰﾄﾞ)
// <021>			LDPName.Visible			:=	FALSE;		//	表示／印刷(内容)
			LHiritsu.Enabled		:=	FALSE;		//	比率科目(名称)
			EHiritsuCode.Zero	  	:=	FALSE;		//	比率科目(0表示/非表示)
			EHiritsuCode.Enabled	:=	FALSE;		//	比率科目(ｺｰﾄﾞ)
			LHiritsuName.Visible	:=	FALSE;		//	比率科目(内容)
			LKariShiki.Enabled		:=	TRUE;		//	借方資金繰(名称)
			EKariCode.Zero	  		:=	FALSE;		//	借方資金繰(0表示/非表示)
			EKariCode.Enabled		:=	TRUE;		//	借方資金繰(ｺｰﾄﾞ)
			LKariName.Visible		:=	TRUE;		//	借方資金繰(内容)
			LKashiShiki.Enabled		:=	TRUE;		//	貸方資金繰(名称)
			EKashiCode.Zero	  		:=	FALSE;		//	貸方資金繰(0表示/非表示)
			EKashiCode.Enabled		:=	TRUE;		//	貸方資金繰(ｺｰﾄﾞ)
			LKashiName.Visible		:=	TRUE;		//	貸方資金繰(内容)
			LHendou.Enabled			:=	FALSE;		//	変動費比率(名称)
			EHendouhi.Zero	  		:=	FALSE;		//	変動費比率(0表示/非表示)
			EHendouhi.Enabled		:=	FALSE;		//	変動費比率(ｺｰﾄﾞ)
			//	出力情報
			LMaina.Enabled			:=	FALSE;		//	ﾏｲﾅｽ印刷(名称)
			EMainasuCode.Zero	  	:=	FALSE;		//	ﾏｲﾅｽ印刷(0表示/非表示)
			EMainasuCode.Enabled	:=	FALSE;		//	ﾏｲﾅｽ印刷(ｺｰﾄﾞ)
			LMainasuName.Visible	:=	FALSE;		//	ﾏｲﾅｽ印刷(内容)
			LSagaPri.Enabled		:=	FALSE;		//	差額印刷(名称)
			ESagakuCode.Zero	  	:=	FALSE;		//	差額印刷(0表示/非表示)
			ESagakuCode.Enabled		:=	FALSE;		//	差額印刷(ｺｰﾄﾞ)
			LSagakuName.Visible		:=	FALSE;		//	差額印刷(内容)
			LRiekiPri.Enabled		:=	FALSE;		//	利益印刷(名称)
			ERiekiCode.Zero	  		:=	FALSE;		//	利益印刷(0表示/非表示)
			ERiekiCode.Enabled		:=	FALSE;		//	利益印刷(ｺｰﾄﾞ)
			LRiekiName.Visible		:=	FALSE;		//	利益印刷(内容)
			EAddUnit.Zero			:=	FALSE;		//  集計単位区分(ｺｰﾄﾞ)		//HIS0098

			LKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字区分(名称)
			EKihyousya.Zero			:=	FALSE;		//	元帳摘要欄起票者印字区分(0表示/非表示)
			EKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字(ｺｰﾄﾞ)
			LKihyousyaName.Visible	:=	FALSE;		//	元帳摘要欄起票者印字(内容)
			LMainaHen.Enabled		:=	FALSE;		//	ﾏｲﾅｽ変換科目名(名称)
			EMainaName.Enabled		:=	FALSE;		//	ﾏｲﾅｽ変換科目名(科目名)

//			MTab_SyousaiInfo.Items[2].Enabled	:=	FALSE;  // <052>
			MTab_SyousaiInfo.Items[0].Selected	:=	TRUE;
			MTab_SyousaiInfo.Items[1].Selected	:=	FALSE;
            MTab_SyousaiInfo.Items[2].Selected  :=  FALSE;
            MTab_SyousaiInfo.Items[3].Selected  :=  FALSE;  // <002>

			//	入力条件
			LShiwa.Enabled			:=	FALSE;		//	仕訳(名称)
			EShiwakeCode.Zero		:=	FALSE;		//	仕訳(0表示/非表示)
			EShiwakeCode.Enabled	:=	FALSE;		//	仕訳(ｺｰﾄﾞ)
			LShiwakeName.Visible	:=	FALSE;		//	仕訳(内容)
			LKijitsu.Enabled	 	:=	FALSE;		//	期日(名称)
			EKijitsuCode.Zero		:=	FALSE;		//	期日(0表示/非表示)
			EKijitsuCode.Enabled	:=	FALSE;		//	期日(ｺｰﾄﾞ)
			LKijitsuName.Visible	:=	FALSE;		//	期日(内容)
//			LTegataNo.Enabled	 	:=	FALSE;		//	手形番号(名称)
//			ETegataNoCode.Zero		:=	FALSE;		//	手形番号(0表示/非表示)
//			ETegataNoCode.Enabled	:=	FALSE;		//	手形番号(ｺｰﾄﾞ)
//			LTegataNoName.Visible	:=	FALSE;		//	手形番号(内容)
			LKoteiTeki.Enabled	 	:=	FALSE;		//	固定摘要(名称)
			ETekiCode.Zero			:=	FALSE;		//	固定摘要(0表示/非表示)
			ETekiCode.Enabled		:=	FALSE;		//	固定摘要(ｺｰﾄﾞ)
			LTekiName.Visible		:=	FALSE;		//	固定摘要(内容)
			LTekiBunrui.Enabled	 	:=	FALSE;		//	摘要分類(名称)
			ETekiyouBunrui.Enabled	:=	FALSE;		//	摘要分類(ｺｰﾄﾞ)
			LTekiyoubunrui.Visible	:=	FALSE;		//	摘要分類(内容)
			LShikikuriYu.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(名称)
			EShikuriCode.Zero		:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(0表示/非表示)
			EShikuriCode.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(ｺｰﾄﾞ)
			LShikuriName.Visible	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(内容)
{	//	HIS0021
			LSyousu.Enabled			:=	TRUE;		//	小数点(名称)
			ESyousuten.Zero			:=	TRUE;		//	小数点(0表示/非表示)
			ESyousuten.Enabled		:=	TRUE;		//	小数点(ｺｰﾄﾞ)
			LSyousuKeta.Enabled		:=	TRUE;		//	小数点(桁)
}
		//--- HIS0109 St -----
			// 番号管理
			ENumber1.Zero			:=	FALSE;		//	番号1				(0表示/非表示)
			EDspNumber1.Zero		:=	FALSE;		//	番号1表示区分		(0表示/非表示)
			ENumber2.Zero			:=	FALSE;		//	番号2				(0表示/非表示)
			EDspNumber2.Zero		:=	FALSE;		//	番号2表示区分		(0表示/非表示)
			ETotalKbn.Zero			:=	FALSE;		//	番号集計区分固定摘要(0表示/非表示)
        //--- HIS0109 Ed -----

			//	電子帳簿
			LDen_Rireki.Enabled		:=	FALSE;		//	履歴管理(名称)
			ERirekiKbnCode.Zero		:=	FALSE;		//	履歴管理(0表示/非表示)
			ERirekiKbnCode.Enabled	:=	FALSE;		//	履歴管理(ｺｰﾄﾞ)
			LRirekiKbnName.Visible	:=	FALSE;		//	履歴管理(内容)
//			LDen_Hojyo1.Enabled	 	:=	FALSE;		//	第１補助(名称)
//			EDenHojyo1.Zero			:=	FALSE;		//	第１補助(0表示/非表示)
//			EDenHojyo1.Enabled		:=	FALSE;		//	第１補助(ｺｰﾄﾞ)
//			LDenHojyo1Name.Visible	:=	FALSE;		//	第１補助(内容)
//			LDen_Hojyo2.Enabled	 	:=	FALSE;		//	第２補助(名称)
//			EDenHojyo2.Zero			:=	FALSE;		//	第２補助(0表示/非表示)
//			EDenHojyo2.Enabled		:=	FALSE;		//	第２補助(ｺｰﾄﾞ)
//			LDenHojyo2Name.Visible	:=	FALSE;		//	第２補助(内容)

			//	参照時	//	HIS0004/HIS0033
			if (giReferFlag = REFER)
				or (giReferFlag = BASICONLY)			//	基本のみ
				or (giReferFlag = KAN_NO_HO_RE)			//	勘定科目(通常)/科目別補助(参照)
				or (giReferFlag = KAN_BA_HO_RE)			//	勘定科目(基本)/科目別補助(参照)
				or (giReferFlag = KAN_NO_HO_BA)			//	勘定科目(通常)/科目別補助(基本)
				or (giReferFlag = KAN_RE_HO_BA) then	//	勘定科目(参照)/科目別補助(基本)
				SyousaiEnabledControl();
		end;
		4:	//	損益科目
		begin
			MTab_Select.Items[0].Enabled	:=	FALSE;
			MTab_Select.Items[1].Enabled	:=	FALSE;
			MTab_Select.Items[2].Enabled	:=	FALSE;
			//	共通
			LCode.Enabled			:=	FALSE;		//	ｺｰﾄﾞ(名称)
			ECode.Enabled			:=	FALSE;		//	ｺｰﾄﾞ
			LRen.Enabled			:=	FALSE;		//	連想(名称)
			ERen.Enabled			:=	FALSE;		//	連想
			LLName.Enabled			:=	FALSE;		//	正式名称(名称)
			ELName.Enabled			:=	FALSE;		//	正式名称
			LSName.Enabled			:=	FALSE;		//	簡略名称(名称)
			ESName.Enabled			:=	FALSE;		//	簡略名称
			LBunseki.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(名称)
			EBunCode.Zero			:=	FALSE;		//	分析ｺｰﾄﾞ(0表示/非表示)
			EBunCode.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(ｺｰﾄﾞ)
			LBunName.Visible		:=	FALSE;		//	分析ｺｰﾄﾞ(内容)
			LYoubun.Enabled			:=	FALSE;		//	要約分析ｺｰﾄﾞ(名称)
//			LYoBunName.Visible		:=	FALSE;		//	要約分析ｺｰﾄﾞ(内容)		//	HIS0018
//--- HIS0032 START -----
			LYouyaku.Enabled		:=	FALSE;		//	要約ｺｰﾄﾞ(名称)
			LYouName.Visible		:=	FALSE;		//	要約ｺｰﾄﾞ(内容)
			LKotei.Enabled			:=	FALSE;		//	固定費ｺｰﾄﾞ(名称)
			LKoteiName.Visible		:=	FALSE;		//	固定費ｺｰﾄﾞ(内容)
			LHendo.Enabled			:=	FALSE;		//	変動費ｺｰﾄﾞ(名称)
			LHendoName.Visible		:=	FALSE;		//	変動費ｺｰﾄﾞ(内容)
//--- HIS0032 END -------
			LSeikaku.Enabled		:=	FALSE;		//	性格ｺｰﾄﾞ(名称)
			ESeikakuCode.Zero		:=	FALSE;		//	性格ｺｰﾄﾞ(0表示/非表示)
			ESeikakuCode.Enabled	:=	FALSE;		//	性格ｺｰﾄﾞ(ｺｰﾄﾞ)
			LSeikakuName.Visible	:=	FALSE;		//	性格ｺｰﾄﾞ(内容)

			MTab_SyousaiInfo.Items[0].Enabled	:=	FALSE;
            MTab_SyousaiInfo.Items[1].Enabled   :=  FALSE;
			//	採用区分
            LBank.Enabled			:=	FALSE;		//	銀行ｺｰﾄﾞ(名称)
			if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
				EBankCodeN.Enabled		:=	FALSE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			else
				EBankCodeT.Enabled		:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			LBankName.Visible		:=	FALSE;		//	銀行ｺｰﾄﾞ(内容)
			LStartDate.Enabled		:=	FALSE;		//	適用開始日(名称)
			EStartDate.Enabled		:=	FALSE;		//	適用開始日
			LEndDate.Enabled		:=	FALSE;		//	適用終了日(名称)
			EEndDate.Enabled		:=	FALSE;		//	適用終了日
			//	集計情報
			LSeizan.Enabled			:=	FALSE;		//	正残(名称)
			ESeiZanCode.Zero	  	:=	FALSE;		//	正残(0表示/非表示)
			ESeiZanCode.Enabled		:=	FALSE;		//	正残(ｺｰﾄﾞ)
			LSeiZanName.Visible		:=	FALSE;		//	正残(内容)
			LBsPl.Enabled			:=	FALSE;		//	BS/PL(名称)
			EBPCode.Value			:=	0;
			EBPCode.Zero	  		:=	FALSE;		//	BS/PL(0表示/非表示)
			LBPName.Visible			:=	FALSE;		//	BS/PL(内容)
			LKisyuzan.Enabled		:=	FALSE;		//	期首残(名称)
			EKisyuCode.Zero	  		:=	FALSE;		//	期首残(0表示/非表示)
			EKisyuCode.Enabled		:=	FALSE;		//	期首残(ｺｰﾄﾞ)
			LKisyuName.Visible		:=	FALSE;		//	期首残(内容)
// <021>			LDspPri.Enabled			:=	FALSE;		//	表示／印刷(名称)
// <021>			EDPCode.Zero	  		:=	FALSE;		//	表示／印刷(0表示/非表示)
// <021>			EDPCode.Enabled			:=	FALSE;		//	表示／印刷(ｺｰﾄﾞ)
// <021>			LDPName.Visible			:=	FALSE;		//	表示／印刷(内容)
			LHiritsu.Enabled		:=	FALSE;		//	比率科目(名称)
			EHiritsuCode.Zero	  	:=	FALSE;		//	比率科目(0表示/非表示)
			EHiritsuCode.Enabled	:=	FALSE;		//	比率科目(ｺｰﾄﾞ)
			LHiritsuName.Visible	:=	FALSE;		//	比率科目(内容)
			LKariShiki.Enabled		:=	FALSE;		//	借方資金繰(名称)
			EKariCode.Zero	  		:=	FALSE;		//	借方資金繰(0表示/非表示)
			EKariCode.Enabled		:=	FALSE;		//	借方資金繰(ｺｰﾄﾞ)
			LKariName.Visible		:=	FALSE;		//	借方資金繰(内容)
			LKashiShiki.Enabled		:=	FALSE;		//	貸方資金繰(名称)
			EKashiCode.Zero	  		:=	FALSE;		//	貸方資金繰(0表示/非表示)
			EKashiCode.Enabled		:=	FALSE;		//	貸方資金繰(ｺｰﾄﾞ)
			LKashiName.Visible		:=	FALSE;		//	貸方資金繰(内容)
			LHendou.Enabled			:=	FALSE;		//	変動費比率(名称)
			EHendouhi.Zero	  		:=	FALSE;		//	変動費比率(0表示/非表示)
			EHendouhi.Enabled		:=	FALSE;		//	変動費比率(ｺｰﾄﾞ)
			//	出力情報
			LMaina.Enabled			:=	FALSE;		//	ﾏｲﾅｽ印刷(名称)
			EMainasuCode.Zero	  	:=	FALSE;		//	ﾏｲﾅｽ印刷(0表示/非表示)
			EMainasuCode.Enabled	:=	FALSE;		//	ﾏｲﾅｽ印刷(ｺｰﾄﾞ)
			LMainasuName.Visible	:=	FALSE;		//	ﾏｲﾅｽ印刷(内容)
			LSagaPri.Enabled		:=	FALSE;		//	差額印刷(名称)
			ESagakuCode.Zero	  	:=	FALSE;		//	差額印刷(0表示/非表示)
			ESagakuCode.Enabled		:=	FALSE;		//	差額印刷(ｺｰﾄﾞ)
			LSagakuName.Visible		:=	FALSE;		//	差額印刷(内容)
			LRiekiPri.Enabled		:=	FALSE;		//	利益印刷(名称)
			ERiekiCode.Zero	  		:=	FALSE;		//	利益印刷(0表示/非表示)
			ERiekiCode.Enabled		:=	FALSE;		//	利益印刷(ｺｰﾄﾞ)
			LRiekiName.Visible		:=	FALSE;		//	利益印刷(内容)

			LKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字区分(名称)
			EKihyousya.Zero			:=	FALSE;		//	元帳摘要欄起票者印字区分(0表示/非表示)
			EKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字(ｺｰﾄﾞ)
			LKihyousyaName.Visible	:=	FALSE;		//	元帳摘要欄起票者印字(内容)
			LMainaHen.Enabled		:=	FALSE;		//	ﾏｲﾅｽ変換科目名(名称)
			EMainaName.Enabled		:=	FALSE;		//	ﾏｲﾅｽ変換科目名(科目名)
			LSousyoku.Enabled		:=	FALSE;		//	装飾(名称)
			ESousyokuCode.Zero		:=	FALSE;		//	装飾区分
			ESousyokuCode.Enabled	:=	FALSE;		//	装飾区分
			LSousyokuName.Visible	:=	FALSE;		//	装飾(内容)

			MTab_SyousaiInfo.Items[2].Enabled	:=	FALSE;
			MTab_SyousaiInfo.Items[0].Selected	:=	TRUE;
			MTab_SyousaiInfo.Items[1].Selected	:=	FALSE;
            MTab_SyousaiInfo.Items[2].Selected  :=  FALSE;

			//	入力条件
			LShiwa.Enabled			:=	FALSE;		//	仕訳(名称)
			EShiwakeCode.Zero		:=	FALSE;		//	仕訳(0表示/非表示)
			EShiwakeCode.Enabled	:=	FALSE;		//	仕訳(ｺｰﾄﾞ)
			LShiwakeName.Visible	:=	FALSE;		//	仕訳(内容)
			LKijitsu.Enabled	 	:=	FALSE;		//	期日(名称)
			EKijitsuCode.Zero		:=	FALSE;		//	期日(0表示/非表示)
			EKijitsuCode.Enabled	:=	FALSE;		//	期日(ｺｰﾄﾞ)
			LKijitsuName.Visible	:=	FALSE;		//	期日(内容)
//			LTegataNo.Enabled	 	:=	FALSE;		//	手形番号(名称)
//			ETegataNoCode.Zero		:=	FALSE;		//	手形番号(0表示/非表示)
//			ETegataNoCode.Enabled	:=	FALSE;		//	手形番号(ｺｰﾄﾞ)
//			LTegataNoName.Visible	:=	FALSE;		//	手形番号(内容)
			LKoteiTeki.Enabled	 	:=	FALSE;		//	固定摘要(名称)
			ETekiCode.Zero			:=	FALSE;		//	固定摘要(0表示/非表示)
			ETekiCode.Enabled		:=	FALSE;		//	固定摘要(ｺｰﾄﾞ)
			LTekiName.Visible		:=	FALSE;		//	固定摘要(内容)
			LTekiBunrui.Enabled	 	:=	FALSE;		//	摘要分類(名称)
			ETekiyouBunrui.Enabled	:=	FALSE;		//	摘要分類(ｺｰﾄﾞ)
			LTekiyoubunrui.Visible	:=	FALSE;		//	摘要分類(内容)
			LShikikuriYu.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(名称)
			EShikuriCode.Zero		:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(0表示/非表示)
			EShikuriCode.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(ｺｰﾄﾞ)
			LShikuriName.Visible	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(内容)

            // --- <057> St ---
			LSyousu.Enabled			:=	FALSE;		//	小数点(名称)
			ESyousuten.Zero			:=	FALSE;		//	小数点(0表示/非表示)
			ESyousuten.Enabled		:=	FALSE;		//	小数点(ｺｰﾄﾞ)
			LSyousuKeta.Enabled		:=	FALSE;		//	小数点(桁)
            // --- <057> Ed ---

		//--- HIS0109 St -----
			// 番号管理
			ENumber1.Zero			:=	FALSE;		//	番号1				(0表示/非表示)
			EDspNumber1.Zero		:=	FALSE;		//	番号1表示区分		(0表示/非表示)
			ENumber2.Zero			:=	FALSE;		//	番号2				(0表示/非表示)
			EDspNumber2.Zero		:=	FALSE;		//	番号2表示区分		(0表示/非表示)
			ETotalKbn.Zero			:=	FALSE;		//	番号集計区分固定摘要(0表示/非表示)
        //--- HIS0109 Ed -----

			//	電子帳簿
			LDen_Rireki.Enabled		:=	FALSE;		//	履歴管理(名称)
			ERirekiKbnCode.Zero		:=	FALSE;		//	履歴管理(0表示/非表示)
			ERirekiKbnCode.Enabled	:=	FALSE;		//	履歴管理(ｺｰﾄﾞ)
			LRirekiKbnName.Visible	:=	FALSE;		//	履歴管理(内容)
//			LDen_Hojyo1.Enabled	 	:=	FALSE;		//	第１補助(名称)
//			EDenHojyo1.Zero			:=	FALSE;		//	第１補助(0表示/非表示)
//			EDenHojyo1.Enabled		:=	FALSE;		//	第１補助(ｺｰﾄﾞ)
//			LDenHojyo1Name.Visible	:=	FALSE;		//	第１補助(内容)
//			LDen_Hojyo2.Enabled	 	:=	FALSE;		//	第２補助(名称)
//			EDenHojyo2.Zero			:=	FALSE;		//	第２補助(0表示/非表示)
//			EDenHojyo2.Enabled		:=	FALSE;		//	第２補助(ｺｰﾄﾞ)
//			LDenHojyo2Name.Visible	:=	FALSE;		//	第２補助(内容)
		end;
	end;
	fnNumberDspControl(EnableNO);	//HIS0108
end;

//**********************************************************************
//*		Proccess	:	SelectItemから名称を取得する
//*		Name		:	H.Endo
//*		Date		:	2000/09/07
//*		Parameter	:	cmpEdit		:	ｺﾝﾎﾟｰﾈﾝﾄ名
//*		Return		:	表示名称
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.GetList(cmpEdit: TObject; cmpLabel: TMLabel): Boolean;
var
	i		: Integer;
	Pos		: Integer;
	Len		: Integer;
	Name	: String;
begin
	Result	:= FALSE;

	//名称ｾｯﾄなし
	Pos	:= 0;
	for i:=1 to TMNumEdit(cmpEdit).SelectItems.Count do
	begin
		Pos	:= MJSHanPos(':', TMNumEdit(cmpEdit).SelectItems.Strings[i-1]);
		if Pos = 0 then
			continue;

		Name	:= MJSHanCopy(TMNumEdit(cmpEdit).SelectItems.Strings[i-1], 1, Pos-1);
										//No一致?
		if TMNumEdit(cmpEdit).Value = StrToInt(Name) then
			break;
	end;
										//一致しなかった
	if i > TMNumEdit(cmpEdit).SelectItems.Count then
	begin
		cmpLabel.Caption	:= '';
		Exit;
	end;

	Len		:= MJSHanLength(TMNumEdit(cmpEdit).SelectItems.Strings[i-1]);
	Name	:= MJSHanCopy(TMNumEdit(cmpEdit).SelectItems.Strings[i-1], Pos+2, Len-Pos);
	cmpLabel.Caption:= Name;
	Result			:= TRUE;
end;

//************************************************************************
//*		Component		:	ELName ( TMNumEdit )
//*							正式名称
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ELNameExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if (Screen.ActiveControl.Name = ESName.Name) then
	begin
		if (ESName.Text = '') then
			ESName.Text	:=	MjsCopy(ELName.Text,14);					//	正式名称を簡略名称へｺﾋﾟｰする。
	end;
end;

//************************************************************************
//*		Component		:	EBunCode ( TMNumEdit )
//*							分析ｺｰﾄﾞ
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBunCodeEnter(Sender: TObject);
begin
	ACControl := Screen.ActiveControl;
	if gbDelBtnFlag = FALSE then
		B_Delete.Enabled	:=	FALSE
	else
	//	HIS0004
	begin
		//	参照時		HIS0004
		if (giReferFlag = REFER) then
			exit;
//		B_Delete.Enabled	:=	TRUE;
// <SYNC> MOD start
//	    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
	end;

{2002/05/22　非会計時にExitｲﾍﾞﾝﾄでﾃﾞﾌｫﾙﾄを入力させたいが為に行っているが、なぜこのようにしたのか
覚えていない。ここが原因で、非会計で登録した内容がﾃﾞﾌｫﾙﾄに変ってしまうので、ｺﾒﾝﾄとさせて頂きます。
ML評価ﾚﾎﾟｰﾄ:187対応
	if EBunCode.value = 0 then
		gBunCode := -1
	else
}
	gBunCode :=	Trunc(EBunCode.value);
end;

//************************************************************************
//*		Component		:	EBunCode ( TMNumEdit )
//*							分析ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBunCodeExit(Sender: TObject);
var
	iYouBun	:	Integer;
	sWork	:	String;
	iLoop	:	Integer;
	EMPLOY	:	SaiyouRec;
	iCode	:	Integer;
	sName	:	String;
	iDummy	:	Integer;
   	wkRec	:	^TaikeiRec; // <061>
	kmkNCode:	Extended;	// <119>ADD
    subNCode:	Extended;	// <119>ADD
	iBPKbn	:	Integer;	//	BS/PL区分	// <121>ADD
begin

	iCode := 0;
	sName := '';

	if (bEndFlag) then	//	終了した時にもｲﾍﾞﾝﾄが発生するのでその制御処理
		exit;

	sWork	:=	GetSKmkMA(BUNSEKI,Trunc(EBunCode.Value),iYouBun);	//	分析名称
	if (iYouBun = 9999) then		//	入力されたｺｰﾄﾞが存在しない時
	begin
//		Beep;
		EBunCode.SetFocus;
		abort;
		EXIT;
	end;
	LBunName.Caption	:=	sWork;
{	//	HIS0018
	if iYouBun = 999 then
		LYoBunName.Caption	:=	''
	else
		LYoBunName.Caption	:=	aYouBunName[iYouBun];
}
	if (gBunCode <> Trunc(EBunCode.Value)) then
	begin
// <121>ADD↓
		// 変更前のBS/PL区分を保持する
		iBPKbn := Trunc(EBPCode.Value);
// <121>ADD↑
		for iLoop := 0 to 112 do
		begin
			if (aDefault[iLoop].Code = Trunc(EBunCode.Value)) then
			begin
				ESeiZanCode.Value	:=	aDefault[iLoop].SeiZan;		//	正残区分(0:借方、1:貸方)
				GetList(ESeiZanCode,LSeiZanName);
			//--- HIS0066 START -----
				if aDefault[iLoop].BPKbn < 0 then
				begin
					case MComboBox.ItemIndex of
						0,1: EBPCode.Value := 0; //B/S
						2,3: EBPCode.Value := 1; //P/L
                    end;
				end
				else
				begin
{ <061>
				//--- HIS0072 START -----
					if aTokuteiKmkCode[12] = StrToIntDef(ECode.Text,0) then	//科目が特定科目の前期繰越利益と一致した時
						EBPCode.Value := 1		//	BS/PL区分(1:P/L)
					else
				//--- HIS0072  END  -----
						EBPCode.Value := aDefault[iLoop].BPKbn;		//	BS/PL区分(0:B/S、1:P/L)
  <061> ↓へ変更}

// <061> ↓
                    // ﾂﾘｰから現在選択されている科目情報を取得
                    wkRec := TreeView.Selected.Data;

                    // ﾂﾘｰで選択している科目外部ｺｰﾄﾞと入力している外部ｺｰﾄﾞが同じ場合は「更新」とする
                    if ((wkRec.GCode = StrToIntDef(ECode.Text,0)) and (wkRec.MasKbn = 1)) then
                    begin
                        // 科目が特定科目の前期繰越利益と一致した時「1.P/L」とする
                        if (aTokuteiKmkCode[12] = wkRec.NCode) then
                            EBPCode.Value := 1		                    //	BS/PL区分(1:P/L)
                        else
    						EBPCode.Value := aDefault[iLoop].BPKbn;		//	BS/PL区分(0:B/S、1:P/L)
                    end
                    else
                    begin
                        EBPCode.Value := aDefault[iLoop].BPKbn;		    //	BS/PL区分(0:B/S、1:P/L)
                    end;
// <061> ↑
				end;
			//--- HIS0066  END  -----
				GetList(EBPCode,LBPName);
{20020319 hiro PLに1と立っているのにP/Lと表示されないのがおかしい為ｺﾒﾝﾄ
				if (Trunc(EBunCode.Value) = 0) then
					LBPName.Visible		:=	FALSE		//	BS/PL(内容)
				else
					LBPName.Visible		:=	TRUE;		//	BS/PL(内容)
}
				EKisyuCode.Value	:=	aDefault[iLoop].Kisyuzan;	//	期首残(0:なし、1:あり)
				GetList(EKisyuCode,LKisyuName);
			//--- HIS0059 START -----
				if fnFurikaeCheck(StrToIntDef(ECode.Text,0)) = FALSE then
					EShiwakeCode.Value 	:=	aDefault[iLoop].Shiwake	//	仕訳入力区分(0:貸借入力、1:正残側のみ、2:負残側のみ、9:入力不可)
				else
					EShiwakeCode.Value 	:=	9;	//	仕訳入力区分(9:入力不可)
			//--- HIS0059  END  -----
				GetList(EShiwakeCode,LShiwakeName);
				EMainasuCode.Value	:=	aDefault[iLoop].Mainasu;	//	ﾏｲﾅｽ印刷区分(0:なし、1:あり)
				GetList(EMainasuCode,LMainasuName);
				m_TaxInfo.Kbn  := aDefault[iLoop].TaxKbn;	//	消費税区分
				m_TaxInfo.Code := aDefault[iLoop].TaxCode;	//	消費税ｺｰﾄﾞ
			//--- HIS0032 START -----
				GetNameSKmkMA(aDefault[iLoop].YouyakuCode,iCode,sName,iDummy);	//	要約
				EYouCode.Value	   := iCode;
				LYouName.Caption   := sName;
				GetNameSKmkMA(aDefault[iLoop].KoteiCode,iCode,sName,iDummy);	//	固定費
				EKotei.Value	   := iCode;
				LKoteiName.Caption := sName;
				GetNameSKmkMA(aDefault[iLoop].HendoCode,iCode,sName,iDummy);	//	変動費
				EHendo.Value	   := iCode;
				LHendoName.Caption := sName;
			//--- HIS0032 END -------
				break;
			end;
		end;
		gbBunChengeFlag := TRUE;
		m_bBunChgMsgFlag := True; // <129> ADD

		//	新規時にｺｰﾄﾞが採用の範囲内の時区分をたてる
		if (MTab_Select .Items.Selected = 0) then		//	実在時
		begin
            Employ.Bumon            :=	0;	//	部門
			Employ.Kouji            :=	0;	//	工事
            for iLoop := 0 to 9 do
    			Employ.Seg[iLoop]   :=	0;	//	ｾｸﾞﾒﾝﾄ

            gfnGetKmk_NCODE({MasterKbn}1,
            				{SumKbn}0,
                            {GCode}StrToIntDef(Trim(ECode.Text),0),
                            {SubCode}'0',
                            {var}kmkNCode, {var}subNCode);	//科目内部ｺｰﾄﾞの取得 <119>ADD

// <121>MOD↓
//			//複合科目以外を採用範囲ﾁｪｯｸする(複合科目の場合は採用はｸﾘｱされる)						//<119>ADD
//            if not FukuKmkCheck(kmkNCode) then														//<119>ADD
//            	MasInfoKmkCodeCheck(StrToIntDef(Trim(ECode.Text),0),Trunc(EBPCode.Value),EMPLOY);
//
//			// ------------------------------
//			//	部門採用区分
//			// ------------------------------
//			if ( EMPLOY.Bumon = 1 ) and ( m_Bmn = 2 ) then
//				EBmnUse.Value   :=  2
//			else
//				EBmnUse.Value   :=	EMPLOY.Bumon;
//
//			// ------------------------------
//			//	      ｾｸﾞﾒﾝﾄ採用区分
//			// ------------------------------
//			for iLoop := 0 to 9 do
//			begin
//				if ( EMPLOY.Seg[iLoop] = 1 ) and
//				   ( m_Seg[iLoop]      = 2 ) then
//					TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop+1))).Value   :=  2
//				else
//					TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop+1))).Value   :=  Employ.Seg[iLoop];
//            end;
//			// ------------------------------
//			//	      ﾌﾟﾛｼﾞｪｸﾄ採用区分
//			// ------------------------------
//			if ( m_KoujiMasKbn <> 0 ) then // <011>
//				TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(m_KoujiMasKbn-200))).Value :=  Employ.Kouji;
//
//			// 名称(あり,なし)の再表示
//			GetList(EBmnUse,LBmnUse);
//			for iLoop := 1 to 10 do
//				GetList(TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop))),
//					TMLabel(MJSFindCtrl(Self,'LSegUse'+IntToStr(iLoop))));
//            for iLoop := 1 to 10 do
//				GetList(TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop))),
//					TMLabel(MJSFindCtrl(Self,'LPrjUse'+IntToStr(iLoop))));

			//複合科目以外を採用範囲ﾁｪｯｸする(複合科目の場合は採用はｸﾘｱされる)
			if not FukuKmkCheck(kmkNCode) then
				MasInfoKmkCodeCheck(StrToIntDef(Trim(ECode.Text), 0), Trunc(EBPCode.Value), Trunc(EBunCode.Value), EMPLOY);

			// 新規登録時
			if (m_InpNewFlag = TRUE) Then
			begin
				// 部門採用区分
				EBmnUse.Value   :=	EMPLOY.Bumon;

				// ｾｸﾞﾒﾝﾄ採用区分
				for iLoop := 0 to 9 do
					TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop + 1))).Value := EMPLOY.Seg[iLoop];

				// 工事採用区分
				if ((m_KoujiMasKbn <> 0) and (giKoujiSyubetsu <> 0)) then
					TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(m_KoujiMasKbn - 200))).Value := EMPLOY.Kouji;
            end
			// 既存科目
            else
            begin
				// BS/PL区分が変わった場合は、部門、ｾｸﾞﾒﾝﾄ、工事が採用可能かﾁｪｯｸ。
				// 採用できなければ「0:採用なし」で更新する
				if (iBPKbn <> Trunc(EBPCode.Value)) then
				begin
					//	部門採用区分が採用できなければ0で更新
					if ((EBmnUse.Value <> 0) and (Employ.Bumon = 0)) then
						EBmnUse.Value := 0;					//	部門採用区分ｴﾃﾞｨｯﾄに0をｾｯﾄ

					// ｾｸﾞﾒﾝﾄ1～10が採用できなければ0で更新
					for iLoop := 0 to 9 do
						if ((TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop + 1))).Value <> 0) and
							(EMPLOY.Seg[iLoop] = 0)) then
							TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop + 1))).Value := 0;

					// 工事が使用可能な会社ﾃﾞｰﾀの場合
					if ((m_KoujiMasKbn <> 0) and (giKoujiSyubetsu <> 0)) then
						//	工事が採用できなければ0で更新
	                   	if ((TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(m_KoujiMasKbn - 200))).Value <> 0) and
	                       	(Employ.Kouji = 0)) then
							TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(m_KoujiMasKbn - 200))).Value :=  0;	//	工事採用区分ｴﾃﾞｨｯﾄに0をｾｯﾄ(ｴﾃﾞｨｯﾄ1～10の内、工事のｴﾃﾞｨｯﾄのみ更新する)
				end;
            end;

			// 名称(あり,なし)の再表示
			GetList(EBmnUse, LBmnUse);
			for iLoop := 1 to 10 do
				GetList(TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop))),
					TMLabel(MJSFindCtrl(Self, 'LSegUse' + IntToStr(iLoop))));
			for iLoop := 1 to 10 do
				GetList(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(iLoop))),
					TMLabel(MJSFindCtrl(Self, 'LPrjUse' + IntToStr(iLoop))));
// <121>MOD↑
		end;

	end
	else
	begin   // <129> ADD
    	gbBunChengeFlag := FALSE;
		m_bBunChgMsgFlag := False; // <129> ADD
    end;	// <129> ADD

	if ((Trunc(EBunCode.Value) > 0) and (Trunc(EBunCode.Value) < 10)) or
			(EBunCode.AsInteger = 40) or (EBunCode.AsInteger = 46) or									//HIS0068
			(EBunCode.AsInteger = 38) or (EBunCode.AsInteger = 135) or (EBunCode.AsInteger = 138) or	//HIS0077
			((MTab_Select.Items.Selected = 1) or (BankUseCheck(SAIMOKU,TRUE) = TRUE))then	//	分析ｺｰﾄﾞが現預金の時銀行ｺｰﾄﾞ使用可
	begin
		if (giBankUseKbn = 1) then		//	銀行が採用されている時
		begin
			//	細目で銀行ｺｰﾄﾞが採用されていた時は実在では入力不可
			if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
				EBankCodeN.Enabled	:=	TRUE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			else
				EBankCodeT.Enabled	:=	TRUE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
		end
		else	//	採用されていない時
		begin
			EBankCodeN.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
			EBankCodeT.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
		end;
	end
	else
	begin
		if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
			EBankCodeN.Enabled	:=	FALSE		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
		else
			EBankCodeT.Enabled	:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
	end;

{20020319 hiro PLに1と立っているのにP/Lと表示されないのがおかしい為ｺﾒﾝﾄ
	if (Trunc(EBunCode.Value) = 0) then
		LBPName.Visible		:=	FALSE		//	BS/PL(内容)
	else
		LBPName.Visible		:=	TRUE;		//	BS/PL(内容)
}
end;

//************************************************************************
//*		Component		:	EBunCode ( TMNumEdit )
//*							性格ｺｰﾄﾞ
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESeikakuCodeEnter(Sender: TObject);
begin
	ACControl := Screen.ActiveControl;
	if gbDelBtnFlag = FALSE then
		B_Delete.Enabled	:=	FALSE
	else
	//	HIS0004
	begin
		//	参照時		HIS0004
		if (giReferFlag = REFER) then
			exit;
//		B_Delete.Enabled	:=	TRUE;

// <SYNC> MOD start
//	    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
	end;
end;

//************************************************************************
//*		Component		:	ESeikakuCode ( TMNumEdit )
//*							性格ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESeikakuCodeExit(Sender: TObject);
var
	iCharCode	:	Integer;	//	性格ｺｰﾄﾞ
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ESeikakuCode,LSeikakuName) = FALSE then		//	性格ｺｰﾄﾞ内容
	begin
		Beep;
		ESeikakuCode.SetFocus;
	end;

	iCharCode	:=	Trunc(ESeikakuCode.Value);
	if (gSeiCode <> iCharCode) then		//	変更時
	begin
		case aDefaultSeikaku[iCharCode].Kijitsu of
			0:
			begin
				EKijitsuCode.Value	:=	0;
				GetList(EKijitsuCode,LKijitsuName);
			end;
			1:
			begin
				EKijitsuCode.Value	:=	1;
				GetList(EKijitsuCode,LKijitsuName);
			end;
			2:
			begin
				EKijitsuCode.Value	:=	3;
				GetList(EKijitsuCode,LKijitsuName);
			end;
        end;

	//--- HIS0109 St -----
		// 番号1
		case aDefaultSeikaku[iCharCode].NoInput1 of
			0:
			begin
				ENumber1.Value	:=	0;
				GetList(ENumber1,LNumber1);
			end;
			1:
			begin
				ENumber1.Value	:=	1;
				GetList(ENumber1,LNumber1);
			end;
			2:
			begin
				ENumber1.Value	:=	3;
				GetList(ENumber1,LNumber1);
			end;
		end;

		// 番号2
		case aDefaultSeikaku[iCharCode].NoInput2 of
			0:
			begin
				ENumber2.Value	:=	0;
				GetList(ENumber2,LNumber2);
			end;
			1:
			begin
				ENumber2.Value	:=	1;
				GetList(ENumber2,LNumber2);
			end;
			2:
			begin
				ENumber2.Value	:=	3;
				GetList(ENumber2,LNumber2);
			end;
		end;
	//--- HIS0109 Ed -----

		gSeiChengeFlag	:=	TRUE;
	end
	else
		gSeiChengeFlag	:=	FALSE;

end;

//************************************************************************
//*		Component		:	EBankCodeT ( TMTxtEdit )
//*							銀行ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBankCodeTExit(Sender: TObject);
var
	sBankName	:	String;
	bBankFlag	:	Boolean;
    iRet		:	Integer;		//<083>
begin
	//	終了した時にもｲﾍﾞﾝﾄが発生するのでその制御処理
	if (bEndFlag) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if (EBankCodeT.Text = '') then
	begin
		LBankName.Caption := '';
		exit;
	end;

// <037>↓
	if (MTab_Select.Items.Selected = 0) then	//	実在時
	begin
		if (BankUseCheck(SAIMOKU,FALSE)) then	//	細目で銀行ｺｰﾄﾞを採用していた時は実在では入力不可
		begin
			//	細目で銀行コードを採用しています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
			MjsMsgRec.sMsg := '科目別補助'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			LBankName.Caption	:=	'';
			EBankCodeT.SetFocus;
			exit;
		end;

        // <083>↓
		if (HojBankUseCheck()) then		//	銀行補助の採用があるかチェックする
		begin
			//	銀行補助を採用しています
            iRet := MjsMessageBoxEX(Self,'この科目は、銀行補助が採用されています。'+#13#10+
                                         '銀行補助採用をやめ、銀行コードのセットを行いますか？',
                                         '登録', mjQuestion, mjYesNo, mjDefNo);
			// はい
            if (iRet = mrYes) then
            begin
                m_UpdAddKbnFlg := True;		// 銀行補助採用ｸﾘｱ＆実績集計区分 更新あり
                Exit;
            end
			// いいえ
            else
            begin
                m_UpdAddKbnFlg := False;	// 実績集計区分 更新なし
				EBankCodeT.SetFocus;
				Exit;
            end;
		end;
        // <083>↑
    end
	else if (MTab_Select.Items.Selected = 1) then	//	細目時
	begin
		if (BankUseCheck(ZITSUZAI,FALSE)) then	//	実在で銀行ｺｰﾄﾞを採用していた時は細目では入力不可
		begin
			//	実在で銀行コードを採用しています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
			MjsMsgRec.sMsg := '実在'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			LBankName.Caption	:=	'';
			EBankCodeT.SetFocus;
			exit;
		end;
    end;

	sBankName	:=	GetKmkMABank(EBankCodeT.Text, bBankFlag);
	if (bBankFlag = FALSE) then
	begin
		LBankName.Caption	:=	sBankName;
		Beep;
		EBankCodeT.SetFocus;
		Exit;
	end;
	LBankName.Caption	:=	sBankName;

// <037>↑

end;

//************************************************************************
//*		Component		:	EBankCodeN ( TMNumEdit )
//*							銀行ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBankCodeNExit(Sender: TObject);
var
	sWork		:	String;
	sWork2		:	String;
	sFormat		:	String;
	sBankName	:	String;
	iCnt		:	Integer;
	bBankFlag	:	Boolean;
    iRet		:	Integer;		//<083>
begin
	//	終了した時にもｲﾍﾞﾝﾄが発生するのでその制御処理
	if (bEndFlag) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if (EBankCodeN.InputFlag) then
	begin
		EBankCodeN.Value	:=	0;
		LBankName.Caption	:=	'';
		exit;
	end;

	if (MTab_Select.Items.Selected = 0) then	//	実在時
	begin
		if (BankUseCheck(SAIMOKU,FALSE)) then	//	細目で銀行ｺｰﾄﾞを採用していた時は実在では入力不可
		begin
			//	細目で銀行コードを採用しています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
			MjsMsgRec.sMsg := '科目別補助'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			LBankName.Caption	:=	'';
			EBankCodeN.SetFocus;
			exit;
		end;
        // <083>↓
		if (HojBankUseCheck()) then		//	銀行補助の採用があるかチェックする
		begin
			//	銀行補助を採用しています
            iRet := MjsMessageBoxEX(Self,'この科目は、銀行補助が採用されています。'+#13#10+
                                         '銀行補助採用をやめ、銀行コードのセットを行いますか？',
                                         '登録', mjQuestion, mjYesNo, mjDefNo);
			// はい
            if (iRet = mrYes) then
            begin
                m_UpdAddKbnFlg := True;		// 銀行補助採用ｸﾘｱ＆実績集計区分 更新あり
                Exit;
            end
			// いいえ
            else
            begin
                m_UpdAddKbnFlg := False;	// 実績集計区分 更新なし
                EBankCodeN.SetFocus;
				Exit;
            end;
		end;
        // <083>↑
    end
	else if (MTab_Select.Items.Selected = 1) then	//	細目時
	begin
		if (BankUseCheck(ZITSUZAI,FALSE)) then	//	実在で銀行ｺｰﾄﾞを採用していた時は細目では入力不可
		begin
			//	実在で銀行コードを採用しています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
			MjsMsgRec.sMsg := '実在'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			LBankName.Caption	:=	'';
			EBankCodeN.SetFocus;
			exit;
		end;
    end;

	sWork	:=	IntToStr(Trunc(EBankCodeN.Value));
	iCnt	:=	16 - Length(sWork);
	sWork2	:=	StringOfChar('0', iCnt);
	sFormat	:=	sWork2	+	sWork;
	sBankName	:=	GetKmkMABank(sFormat,bBankFlag);
	if (bBankFlag = FALSE) then
	begin
		LBankName.Caption	:=	sBankName;
		Beep;
		EBankCodeN.SetFocus;
		EXIT;
	end;
	LBankName.Caption	:=	sBankName;
end;

//************************************************************************
//*		Component		:	EStartDate ( TMNumEdit )
//*							適用開始日
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EStartDateExit(Sender: TObject);
var
	bHantei		:	Boolean;
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if (EStartDate.Value > 0) then
	begin
		try
//			bHantei := MjsDateCtrl.MjsIntYMDChk(EStartDate.Value);		// <#NGEN> 
			bHantei := MjsDateCtrl.MjsIntYMDChk(EStartDate.AsIntYM);	// <#NGEN> 
			if bHantei = FALSE then
			begin
				//	日付が間違っています
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
    			MjsMessageBoxEx(AOwner, // <005>
                                '日付' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
				EStartDate.SetFocus;
			end;
		except
			//	日付が間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            '日付' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			EStartDate.SetFocus;
		end;
	end;
end;

//************************************************************************
//*		Component		:	EEndDate ( TMNumEdit )
//*							適用終了日
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EEndDateExit(Sender: TObject);
var
	bHantei		:	Boolean;
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if (EEndDate.Value > 0) then	//	日付のCheck
	begin
		try
//			bHantei := MjsDateCtrl.MjsIntYMDChk(EEndDate.Value);		// <#NGEN> 
			bHantei := MjsDateCtrl.MjsIntYMDChk(EEndDate.AsIntYM);		// <#NGEN> 
			if bHantei = FALSE then
			begin
				//	日付が間違っています
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
    			MjsMessageBoxEx(AOwner, // <005>
                                '日付' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
				EEndDate.SetFocus;
			end;
		except
			//	日付が間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            '日付' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			EEndDate.SetFocus;
		end;
	end;

	if (EStartDate.Value > 0) and (EEndDate.Value > 0) then	//	開始・終了の日付のCheck
	begin
//		if (EStartDate.Value) > (EEndDate.Value) then		// <#NGEN> 
		if (EStartDate.AsIntYM) > (EEndDate.AsIntYM) then	// <#NGEN> 
		begin
			//	日付が間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            '日付' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			EEndDate.SetFocus;
		end;
    end;
end;

//************************************************************************
//*		Component		:	ESeiZanCode ( TMNumEdit )
//*							正残区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESeiZanCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ESeiZanCode,LSeiZanName) = FALSE then		//	正残区分内容
	begin
		Beep;
		ESeiZanCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EBPCode ( TMNumEdit )
//*							BS/PL区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBPCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EBPCode,LBPName) = FALSE then				//	BS/PL区分内容
	begin
		Beep;
		EBPCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EKisyuCode ( TMNumEdit )
//*							期首残区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKisyuCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EKisyuCode,LKisyuName) = FALSE then			//	期首残区分内容
	begin
		Beep;
		EKisyuCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EDPCode ( TMNumEdit )
//*							表示／印刷不可区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EDPCodeExit(Sender: TObject);
begin
(*
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EDPCode,LDPName) = FALSE then				//	表示／印刷不可区分内容
	begin
		Beep;
		EDPCode.SetFocus;
	end;
*) // <021>    
end;

//************************************************************************
//*		Component		:	EHiritsuCode ( TMNumEdit )
//*							比率科目区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EHiritsuCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EHiritsuCode,LHiritsuName) = FALSE then		//	比率科目区分内容
	begin
		Beep;
		EHiritsuCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EKariCode ( TMNumEdit )
//*							借方資金繰ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKariCodeExit(Sender: TObject);
var
	iYouBun	:	Integer;
	sWork	:	String;
begin
	//	終了ﾎﾞﾀﾝが押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	iYouBun	:=	0;

	if EKariCode.InputFlag = TRUE then
	begin
		LKariName.Caption	:=	'';
		exit;
	end;

	sWork	:=	GetSKmkMA(SHIKINGURI,Trunc(EKariCode.Value),iYouBun);	//	借方資金繰ｺｰﾄﾞ内容
	if iYouBun = 9999 then
	begin
		Beep;
		EKariCode.SetFocus;
		EXIT;
	end;
	LKariName.Caption	:=	sWork;
end;

//************************************************************************
//*		Component		:	EKashiCode ( TMNumEdit )
//*							貸方資金繰ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKashiCodeExit(Sender: TObject);
var
	iYouBun	:	Integer;
	sWork	:	String;
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	iYouBun	:=	0;

	if EKashiCode.InputFlag = TRUE then
	begin
		LKashiName.Caption	:=	'';
		exit;
	end;

	sWork	:=	GetSKmkMA(SHIKINGURI,Trunc(EKashiCode.Value),iYouBun);	//	貸方資金繰ｺｰﾄﾞ内容
	if iYouBun = 9999 then
	begin
		Beep;
		EKashiCode.SetFocus;
		EXIT;
	end;
	LKashiName.Caption	:=	sWork;
end;

//************************************************************************
//*		Component		:	EHendouhi ( TMNumEdit )
//*							変動費比率
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EHendouhiExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if EHendouhi.Value > 100.00 then
	begin
		Beep;
		EHendouhi.SetFocus;
		EXIT;
	end;
end;

//************************************************************************
//*		Component		:	EMainasuCode ( TMNumEdit )
//*							ﾏｲﾅｽ印刷区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EMainasuCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EMainasuCode,LMainasuName) = FALSE then		//	ﾏｲﾅｽ印刷区分内容
	begin
		Beep;
		EMainasuCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ESagakuCode ( TMNumEdit )
//*							差額印刷区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESagakuCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ESagakuCode,LSagakuName) = FALSE then		//	差額印刷区分内容
	begin
		Beep;
		ESagakuCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ERiekiCode ( TMNumEdit )
//*							利益印刷区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ERiekiCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ERiekiCode,LRiekiName) = FALSE then			//	利益印刷区分内容
	begin
		Beep;
		ERiekiCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EAveCode ( TMNumEdit )
//*							平均値採用区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EAveCodeExit(Sender: TObject);
begin
{	//	HIS0022
	if GetList(EAveCode,LAveName) = FALSE then				//	平均値採用区分内容
	begin
		Beep;
		EAveCode.SetFocus;
	end;
}
end;

//************************************************************************
//*		Component		:	ERuiSyuCode ( TMNumEdit )
//*							累計集計区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ERuiSyuCodeExit(Sender: TObject);
begin
{	//	HIS0022
	if GetList(ERuiSyuCode,LRuiSyuName) = FALSE then		//	累計集計区分内容
	begin
		Beep;
		ERuiSyuCode.SetFocus;
	end;
}
end;

//************************************************************************
//*		Component		:	EGoukei ( TMNumEdit )
//*							合計表示区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EGoukeiDspExit(Sender: TObject);
begin
{	//	HIS0022
	if GetList(EGoukeiDsp,LGoukeiDspName) = FALSE then		//	合計表示区分内容
	begin
		Beep;
		EGoukeiDsp.SetFocus;
	end;
}
end;

//************************************************************************
//*		Component		:	EKihyousya ( TMNumEdit )
//*							元帳摘要欄起票者印字区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKihyousyaExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EKihyousya,LKihyousyaName) = FALSE then		//	元帳摘要欄起票者印字区分内容
	begin
		Beep;
		EKihyousya.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ESousyokuCode ( TMNumEdit )
//*							装飾区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESousyokuCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ESousyokuCode,LSousyokuName) = FALSE then	//	装飾区分内容
	begin
		Beep;
		ESousyokuCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EShiwakeCode ( TMNumEdit )
//*							仕訳入力区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EShiwakeCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EShiwakeCode,LShiwakeName) = FALSE then		//	仕訳入力区分内容
	begin
		Beep;
		EShiwakeCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EKijitsuCode ( TMNumEdit )
//*							期日入力区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKijitsuCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EKijitsuCode,LKijitsuName) = FALSE then		//	期日入力区分内容
	begin
		Beep;
		EKijitsuCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ETegataNoCode ( TMNumEdit )
//*							手形番号入力区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ETegataNoCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ETegataNoCode,LTegataNoName) = FALSE then	//	手形番号入力区分内容
	begin
		Beep;
		ETegataNoCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ETekiCode ( TMNumEdit )
//*							固定摘要必須入力
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ETekiCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ETekiCode,LTekiName) = FALSE then			//	固定摘要必須入力内容
	begin
		Beep;
		ETekiCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ETekiCode ( TMNumEdit )
//*							固定摘要必須入力
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ETekiCodeChange(Sender: TObject);
begin
{	//	HIS0029
	if Trunc(ETekiCode.Value) = 1 then	//	固定摘要必須入力が固定摘要必須(1)の時
	begin
		LTekiBunrui.Enabled	 	:=	TRUE;		//	摘要分類(名称)
		ETekiyouBunrui.Enabled	:=	TRUE;		//	摘要分類(ｺｰﾄﾞ)
		LTekiyoubunrui.Visible	:=	TRUE;		//	摘要分類(内容)
	end
	else
	begin
		LTekiBunrui.Enabled	 	:=	FALSE;		//	摘要分類(名称)
		ETekiyouBunrui.Enabled	:=	FALSE;		//	摘要分類(ｺｰﾄﾞ)
		LTekiyoubunrui.Visible	:=	FALSE;		//	摘要分類(内容)
	end;
}
end;

//************************************************************************
//*		Component		:	ETekiyouBunrui ( TMNumEdit )
//*							摘要分類ｺｰﾄﾞ
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ETekiyouBunruiExit(Sender: TObject);
var
	sWork	:	String;
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if (ETekiyouBunrui.InputFlag) then
	begin
		LTekiyoubunrui.Caption	:=	'';
		exit;
	end;

	sWork	:=	GetTekiMA(Trunc(ETekiyouBunrui.Value));
	if sWork = 'Null' then
	begin
		Beep;
		ETekiyouBunrui.SetFocus;
		EXIT;
	end;

	LTekiyoubunrui.Caption	:=	sWork;
end;

//************************************************************************
//*		Component		:	EShikuriCode ( TMNumEdit )
//*							資金繰ｺｰﾄﾞ優先区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EShikuriCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(EShikuriCode,LShikuriName) = FALSE then		//	資金繰ｺｰﾄﾞ優先区分内容
	begin
		Beep;
		EShikuriCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ESyousuten ( TMNumEdit )
//*							小数点桁数
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESyousutenExit(Sender: TObject);
begin

    // --- <057> St ---
// <064>	if Trunc(ESyousuten.Value) > 4 then
	if Trunc(ESyousuten.Value) > 9 then // <064>
	begin
		Beep;
		ESyousuten.SetFocus;
		EXIT;
	end;
    // --- <057> Ed ---

end;

//************************************************************************
//*		Component		:	ERirekiKbnCode ( TMNumEdit )
//*							履歴管理区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ERirekiKbnCodeExit(Sender: TObject);
begin
	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then		//HIS0037
		exit;

	if GetList(ERirekiKbnCode,LRirekiKbnName) = FALSE then	//	履歴管理区分内容
	begin
		Beep;
		ERirekiKbnCode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	EDenHojyo1 ( TMNumEdit )
//*							第1補助電子帳簿採用区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EDenHojyo1Exit(Sender: TObject);
begin
{
	if GetList(EDenHojyo1,LDenHojyo1Name) = FALSE then		//	第1補助電子帳簿採用区分内容
	begin
		Beep;
		EDenHojyo1.SetFocus;
	end;
}
end;

//************************************************************************
//*		Component		:	EDenHojyo2 ( TMNumEdit )
//*							第2補助電子帳簿採用区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EDenHojyo2Exit(Sender: TObject);
begin
{
	if GetList(EDenHojyo2,LDenHojyo2Name) = FALSE then		//	第2補助電子帳簿採用区分内容
	begin
		Beep;
		EDenHojyo2.SetFocus;
	end;
}
end;

//************************************************************************
//*		Component		:	B_SUpDate ( TMBitBtn )
//*							詳細画面の更新ﾎﾞﾀﾝを押した時
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_SUpDateClick(Sender: TObject);
var
	wkRec		:	^TaikeiRec;
	iSelect		:	Integer;
begin
	//	初期処理
	iSelect	:=	0;

	wkRec	:=	TreeView.Selected.Data;

	//	選択されている詳細のTAB
	case MTab_Select.Items.Selected of
		0:	//	実在時
		begin
			//	ｺｰﾄﾞが未入力時の更新時
			if (Trim(ECode.Text) = '') then
				exit;
			iSelect	:=	1;

(*
			//	いくつ補助が採用されているかチェック <!!!>
			if (MAXADOPTCOUNT < AdoptCountCheck(wkRec.NCode,NEWUP)) then
			begin
				//	補助等を４つ以上採用することはできません
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
	    		MjsMessageBoxEx(AOwner, // <005>
                                '補助等を４つ以上採用' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType);
				if (ECode.Enabled = TRUE) then
					ECode.SetFocus;
				exit;
			end;
*)// 補助の採用件数チェックは不要

		end;
		1:
		begin
			if (Trim(ECode.Text) = '') then
				exit;

            // <018>
            if	( not JNTMASERRORCODECHECK (ECode.Text, m_strValidCharacters) ) then
        	begin
        		Beep ();

        		TJNTMASCom (m_pRec^.m_pSystemArea^).m_MsgStd.GetMsg (MjsMsgRec, 30, 21);

        		MJSMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                m_pRec^.m_ProgramName,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MjsMsgRec.LogType
                               );

//                if ( ECode.Enabled = TRUE ) then
//					ECode.SetFocus;

	        	Exit;
        	end;

			iSelect	:=	2;	//	細目時
			m_SwkInfo.MessageFlag := TRUE;
		end;
		2:
		begin
			//	ｺｰﾄﾞが未入力時の更新時
			if (Trim(ECode.Text) = '') then
				exit;

			iSelect	:=	1;	//	合計時
		end;
	end;

	if ( (iSelect = 1 ) and (wkRec.GCode = StrToIntDef(ECode.Text,0)) and (wkRec.MasKbn = iSelect) ) or
       ( (iSelect = 2 ) and (wkRec.SubCode = ECode.Text) and (wkRec.MasKbn = iSelect) ) then
	begin
        // <129> ADD ST
                        // 分析コードが変更されている かつ 分析コード変更時メッセージの表示条件を満たしている場合
        if (Trunc(EBunCode.Value) <> m_KmkInfo.Bunseki) AND fnChkBunChgMsg(giUpDate_GCode, True) then
        begin
            // 「はい」以外の場合
            if (MjsMessageBoxEX(Self,MSG_AnalyzeCodeChange,'確認', mjQuestion, mjYesNo, mjDefNo) <> mrYes ) then
            begin
                EXIT;
            end;

			m_bBunChgMsgFlag := False;
        end;
        // <129> ED

    	SyousaiUpDate();
    end
	else
	begin
		if wkRec.KoteiKbn = 2 then
		begin
			MjsMessageBoxEx(AOwner, // <005>
                            '特定科目の為、体系の変更はできません。',
                            '科目登録',
                            mjInformation,
                            mjOK,
                            mjDefOK
                           );
        	ECode.SetFocus;
			exit;
		end
		else
			SyousaiNew();
	end;

	fnSyousaiSetCheck(INFOSET,0);	//	表示内容の退避	//	HIS0031

    // 更新後は必ずﾌｫｰｶｽをｺｰﾄﾞにし、ﾀﾌﾞを集計情報に設定する
    MjsDispCtrl.MjsSetFocus(Self, 'ECode');
    MTab_SyousaiInfo.Items.Selected :=  0;

end;

//**********************************************************************
//*		Proccess	:	詳細画面での更新処理
//*		Name		:	H.Endo
//*		Date		:	2000/10/11
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.SyousaiUpDate();
var
	DmqData		:	TMQuery;
	wkRec		:	^TaikeiRec;
	wkP_Rec		:	^TaikeiRec;
	CNode		:	TTreeNode;
	wkNode		:	TTreeNode;
	sSDate		:	TDateTime;	//	適用開始日<020>
	sEDate		:	TDateTime;	//	適用終了日<020>
	sBankCode	:	String;		//	文字型の銀行ｺｰﾄﾞ
	sFusenCmnt	:	String;
	sName		:	String;
	iLoop		:	Integer;
	iSelect		:	Integer;
//	iKmkCode	:	Integer;	// <063> DEL
	iYouBun		:	Integer;	//	要約分析ｺｰﾄﾞ
	iCharCode	:	Integer;	//	性格ｺｰﾄﾞ

    iNCode      :   Extended;
    iCNCode     :   Extended;
    iLinkSaiCode:   String;
    iAnalyzeCode:	Integer;	//<116>ADD
begin
	//	初期化処理
	iSelect		    :=	0;
//	iKmkCode	    :=	0;		// <063> DEL
	sFusenCmnt	    :=	'';
// <013>    iLinkSaiCode    :=  '';
    iLinkSaiCode    :=  '0';    // <013>
    iAnalyzeCode	:=  0;		//<116>ADD

    iNCode          :=  0;
    iCNCode         :=  0;

    if  MTab_Select.Items.Selected = 1 then
    begin
        iLinkSaiCode    :=  fnSaimokuSetAttr(1, giUpDate_SCode,
                                     wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);    //  細目外部ｺｰﾄﾞ
    end;

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	MDataModule.BeginTran (dbCorp_Select);										//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);									// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADd

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

{
	if ( EStartDate.Value > 0 ) then
		sSDate	:=	'''' + FormatDateTime('yyyy mm dd', EStartDate.AsDateTime) + ''''
	else
		sSDate	:=	'NULL';

	if ( EEndDate.Value > 0 ) then
		sEDate	:=	'''' + FormatDateTime('yyyy mm dd ', EEndDate.AsDateTime) + ''''
	else
		sEDate	:=	'NULL';
}// <020>

    // ↓↓↓<020>
    if ( EStartDate.Value > 0 ) then
        sSDate	:=	EStartDate.AsDateTime
	else
        sSDate	:=  m_cJNTArea.getDefDate(1);       // 適用期間（自）

	if ( EEndDate.Value > 0 ) then
        sEDate	:=	EEndDate.AsDateTime
	else
        sEDate	:=  m_cJNTArea.getDefDate(2);       // 適用期間（至）
    // ↑↑↑<020>


	with DmqData do
	begin

        // 内部ｺｰﾄﾞ及び科目別補助内部ｺｰﾄﾞの取得
        Close;
        SQL.Clear;
        SQL.Add('SELECT                         ');
        SQL.Add('    NCode                      ');
        SQL.Add('   ,CNCode                     ');
        SQL.Add('   ,AnalyzeCode                ');	//<116>ADD
        SQL.Add('FROM KmkMA                     ');
        SQL.Add('WHERE MasterKbn = :MasKbn      ');
        SQL.Add('  AND SumKbn    = :SumKbn      ');
        SQL.Add('  AND RDelKbn   = 0            ');
        SQL.Add('  AND GCode     = :GCode       ');
        SQL.Add('  AND SubCode   = :SubCode     ');

        ParamByName('MasKbn')   .AsInteger  :=  giUpDate_MasKbn;
        ParamByName('SumKbn')   .AsInteger  :=  giUpDate_SumKbn;
        ParamByName('GCode')    .AsInteger  :=  giUpDate_GCode;
        ParamByName('SubCode')  .AsString   :=  iLinkSaiCode;

        if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);							// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

        if ( EOF <> TRUE ) then
        begin
            iNCode  :=  GetFld('NCode')     .AsFloat;
            iCNCode :=  GetFld('CNCode')    .AsFloat;
            iAnalyzeCode := GetFld('AnalyzeCode').AsInteger;	//<116>ADD
        end;

	    //	勘定科目基本ﾏｽﾀ(KmkMA)更新
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
		begin
			DmqData.Close;
    										// 親会社DBとMQueryの接続
			MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqData);
		end;
// <063> ADD end

		Close;
		SQL.Clear;
		SQL.Add('UPDATE kmkMA SET                   '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('    LongName    = :SeiName         ');	//	正式名称
		SQL.Add('   ,SimpleName  = :KanName         ');	//	簡略名称
		SQL.Add('   ,Renso       = :Rensou          ');	//	連想ｼﾝﾎﾞﾙ
		SQL.Add('   ,AnalyzeCode = :BunCode         ');	//	分析ｺｰﾄﾞ

		if ( MTab_Select.Items.Selected = 0 ) then		    //	実在時
            SQL.Add('   ,SumAnaCode  = :YouBunCode      ');	//	分析ｺｰﾄﾞ
		if ( gSeiChengeFlag ) then	                        //	性格ｺｰﾄﾞの変更時
            SQL.Add('   ,CharCode    = :SeikakuCode     ');	//	性格ｺｰﾄﾞ
        // --------------------
		//	    採用区分
        // --------------------
        //<112>ADD↓
        if ( MTab_Select.Items.Selected = 0 ) then		    //	実在時
        begin
        //<112>ADD↑
            SQL.Add('   ,BmnUse      = :BmnUse          ');
            SQL.Add('   ,SegUse1     = :SegUse1         ');
            SQL.Add('   ,SegUse2     = :SegUse2         ');
            SQL.Add('   ,SegUse3     = :SegUse3         ');
            SQL.Add('   ,SegUse4     = :SegUse4         ');
            SQL.Add('   ,SegUse5     = :SegUse5         ');
            SQL.Add('   ,SegUse6     = :SegUse6         ');
            SQL.Add('   ,SegUse7     = :SegUse7         ');
            SQL.Add('   ,SegUse8     = :SegUse8         ');
            SQL.Add('   ,SegUse9     = :SegUse9         ');
            SQL.Add('   ,SegUse10    = :SegUse10        ');
            SQL.Add('   ,PrjUse1     = :PrjUse1         ');
            SQL.Add('   ,PrjUse2     = :PrjUse2         ');
            SQL.Add('   ,PrjUse3     = :PrjUse3         ');
            SQL.Add('   ,PrjUse4     = :PrjUse4         ');
            SQL.Add('   ,PrjUse5     = :PrjUse5         ');
            SQL.Add('   ,PrjUse6     = :PrjUse6         ');
            SQL.Add('   ,PrjUse7     = :PrjUse7         ');
            SQL.Add('   ,PrjUse8     = :PrjUse8         ');
            SQL.Add('   ,PrjUse9     = :PrjUse9         ');
            SQL.Add('   ,PrjUse10    = :PrjUse10        ');
    // <083>↓
            if m_UpdAddKbnFlg = True then
                SQL.Add('   ,BankUse   = 0            	');	//	銀行補助採用なし
    // <083>↑
   		end;	//<112>ADD

		SQL.Add('   ,BankNCode   = :Bank            ');	//	銀行ｺｰﾄﾞ
		SQL.Add('   ,TStartDate  = :TStartDate      ');	//	適用開始年月日<020>
		SQL.Add('   ,TEndDate    = :TEndDate        ');	//	適用終了年月日<020>
        // --------------------
		//	    集計情報
        // --------------------
		SQL.Add('   ,DCKbn       = :SeiZan          ');	//	正残区分
		SQL.Add('   ,BPKbn       = :BsPl            ');	//	ＢＳ／ＰＬ区分
		SQL.Add('   ,KisyuKbn    = :Kisyu           ');	//	期首残区分
		SQL.Add('   ,NonDspKbn   = :DspPri          ');	//	表示／印刷不可区分
		SQL.Add('   ,PerKmkKbn   = :Hiritsu         ');	//	比率科目区分
		SQL.Add('   ,DebitCash   = :KariKuri        ');	//	借方資金繰コード
		SQL.Add('   ,CreditCash  = :KashiKuri       ');	//	貸方資金繰コード
        // --------------------
		//	消費税情報
        // --------------------
		if ( gbBunChengeFlag = TRUE ) and ( fnTaxCodeCheck(iNCode) = FALSE ) then	//	HIS0043
		begin
            SQL.Add('   ,TaxKbn      = :TaxKbn          ');	//	消費税科目区分
    		SQL.Add('   ,STaxCode    = :UriCode         ');	//	売上消費税ｺｰﾄﾞ
    		SQL.Add('   ,BTaxCode    = :ShiCode         ');	//	仕入消費税ｺｰﾄﾞ
		end;
        // --------------------
		//	入力条件
        // --------------------
		SQL.Add('   ,InputKbn    = :ShiwaInp        ');	//	仕訳入力区分
		SQL.Add('   ,DInputKbn   = :KijitsuInp      ');	//	期日入力区分
		SQL.Add('   ,DInputAlw   = :KijitsuH_Inp    ');	//	期日必須入力区分

        //	性格ｺｰﾄﾞの変更時
		if ( gSeiChengeFlag ) then
		begin
        SQL.Add('   ,TInputKbn   = :TegataNO        ');	//	手形番号入力区分
		SQL.Add('   ,TInputAlw   = :TegataH_NO      ');	//	手形番号必須入力区分
		SQL.Add('   ,TMInputKbn  = :TegataKanri     ');	//	手形管理NO入力区分
		SQL.Add('   ,TMInputAlw  = :H_TegataKanri   ');	//	手形管理NO必須入力区分
			if ( m_System = ACELINK ) then											//HIS0109(if文追加)
			begin
        		SQL.Add('   ,NoInputKbn1 = :NoInput1        ');	//	番号１入力区分
        		SQL.Add('   ,NoInputAlw1 = :H_NoInput1      ');	//	番号１必須入力区分
        		SQL.Add('   ,NoInputKbn2 = :NoInput2        ');	//	番号２入力区分
        		SQL.Add('   ,NoInputAlw2 = :H_NoInput2      ');	//	番号２必須入力区分
			end;
		end;

		if ( m_System = MJSLINK ) then
		begin
    		SQL.Add('   ,NoInputKbn1 = :NoInput1        ');	//	番号１入力区分
    		SQL.Add('   ,NoInputAlw1 = :H_NoInput1      ');	//	番号１必須入力区分
    		SQL.Add('   ,NoInputKbn2 = :NoInput2        ');	//	番号２入力区分
    		SQL.Add('   ,NoInputAlw2 = :H_NoInput2      ');	//	番号２必須入力区分
    		SQL.Add('   ,EInpKbn1    = :EInpKbn1        ');	//	番号1初期表示区分
    		SQL.Add('   ,EInpKbn2    = :EInpKbn2        ');	//	番号2初期表示区分
    		SQL.Add('   ,EInpKbn3    = :EInpKbn3        ');	//	同一番号区分
    		SQL.Add('   ,NoName1     = :NoName1         ');	//	番号1名称No
    		SQL.Add('   ,NoName2     = :NoName2         ');	//	番号2名称No
		end;

        // 分類 <002>
		for iLoop := 1 to 10 do
        begin
// <029>空でもｸﾘｱすることがあるため条件削除
//            if m_Bunrui[iLoop].ECode.Text <> '' then
//            begin
        		SQL.Add(' ,BunruiNCode' + IntToStr(iLoop));	//	分類内部ｺｰﾄﾞ
        		SQL.Add(' = :BunruiNCode' + IntToStr(iLoop));
//            end;
        end;

		SQL.Add('   ,TkInputKbn  = :Tekiyou         ');	//	固定摘要必須入力
		SQL.Add('   ,TkClassCode = :TekiBun         ');	//	摘要分類コード
		SQL.Add('   ,CashCodeKbn = :Yusen           ');	//	資金繰コード優先区分
        SQL.ADD('   ,DPointNum   = :Syosuten        ');	//	小数点桁数<057>
        SQL.ADD('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
		SQL.Add('WHERE MasterKbn = :MasKbn          '); //	ﾏｽﾀ区分
		SQL.Add('  AND SumKbn    = :JGKbn           ');	//	実在/合計区分
        SQL.Add('  AND RDelKbn   = 0                ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
        SQL.Add('  AND NCode     = :GCode           ');	//	内部ｺｰﾄﾞ
        SQL.Add('  AND CNCode    = :SCode           ');	//	科目別補助内部ｺｰﾄﾞ

		ParamByName('SeiName')  .AsString   :=	fnDelCRLF(ELName.Text);		//	正式名称  <DKAI>
		ParamByName('KanName')  .AsString	:=	fnDelCRLF(ESName.Text);		//	簡略名称  <DKAI>
		ParamByName('Rensou')   .AsString	:=	fnDelCRLF(ERen.Text);		//	連想ｼﾝﾎﾞﾙ <DKAI>
		ParamByName('BunCode')  .AsInteger	:=	Trunc(EBunCode.Value);		//	分析ｺｰﾄﾞ

        // -------------------
        //	    実在時
        // -------------------
		if ( MTab_Select.Items.Selected = 0 ) then
		begin
//--- <125> Mod St
//            //--- <059> ST ---
//            if ( Trunc(EBunCode.Value) = 52 ) then                              //  少数株主持分
//            begin
//                ParamByName('YouBunCode').AsInteger	:=	8;						//	要約分析ｺｰﾄﾞ（8 = 引当金）
//            end
//            //--- <059> Ed ---
//            else
//            begin
//    			GetSKmkMA(BUNSEKI,Trunc(EBunCode.Value),iYouBun);				//	要約分析名称
//    			if ( iYouBun = 999 ) then
//    				ParamByName('YouBunCode').AsInteger	:=	0					//	要約分析ｺｰﾄﾞ
//    			else
//    				ParamByName('YouBunCode').AsInteger	:=	iYouBun;			//	要約分析ｺｰﾄﾞ
//            end;
            if not SetYouBun(BUNSEKI,Trunc(EBunCode.Value),iYouBun) then
            begin
                MDataModule.Rollback(dbCorp_Select);
                DmqData.Close;
                DmqData.Free;
                Exit;
            end;
            ParamByName('YouBunCode').AsInteger := iYouBun;
//--- <125> Mod Ed
		end;

		if ( gbBunChengeFlag = TRUE ) and ( fnTaxCodeCheck(iNCode) = FALSE ) then
		begin
			ParamByName('TaxKbn').AsInteger := m_TaxInfo.Kbn;					//	消費税科目区分
			case m_TaxInfo.Kbn of
				0:	begin
						ParamByName('UriCode').AsInteger :=	0;				//	売上消費税ｺｰﾄﾞ
						ParamByName('ShiCode').AsInteger :=	0;				//	仕入消費税ｺｰﾄﾞ
					end;
				1:	begin
						ParamByName('UriCode').AsInteger :=	m_TaxInfo.Code;	//	売上消費税ｺｰﾄﾞ
						ParamByName('ShiCode').AsInteger :=	0;				//	仕入消費税ｺｰﾄﾞ
					end;
				2:	begin
						ParamByName('UriCode').AsInteger :=	0;				//	売上消費税ｺｰﾄﾞ
						ParamByName('ShiCode').AsInteger :=	m_TaxInfo.Code;	//	仕入消費税ｺｰﾄﾞ
					end;
			end;
		end;

        //	性格ｺｰﾄﾞの変更時
		if ( gSeiChengeFlag ) then
		begin
			ParamByName('SeikakuCode')  .AsInteger  :=	Trunc(ESeikakuCode.Value);	            //	性格ｺｰﾄﾞ
			iCharCode	                            :=	Trunc(ESeikakuCode.Value);	            //	性格ｺｰﾄﾞ
			ParamByName('TegataNO')     .AsInteger	:=	aDefaultSeikaku[iCharCode].Tegata;		//	手形番号入力区分
			ParamByName('TegataH_NO')   .AsInteger	:=	aDefaultSeikaku[iCharCode].H_Tegata;	//	手形番号必須入力区分
			ParamByName('TegataKanri')  .AsInteger	:=	aDefaultSeikaku[iCharCode].TegataNo;	//	手形管理NO入力区分			*
			ParamByName('H_TegataKanri').AsInteger	:=	aDefaultSeikaku[iCharCode].H_TegataNo;	//	手形管理NO必須入力区分		*

			if ( m_System = ACELINK ) then
			begin
				ParamByName('NoInput1')     .AsInteger	:=	aDefaultSeikaku[iCharCode].NoInput1;	//	番号１入力区分				*
				ParamByName('H_NoInput1')   .AsInteger	:=	aDefaultSeikaku[iCharCode].H_NoInput1;	//	番号１必須入力区分			*
				ParamByName('NoInput2')     .AsInteger	:=	aDefaultSeikaku[iCharCode].NoInput2;	//	番号２入力区分				*
				ParamByName('H_NoInput2')   .AsInteger	:=	aDefaultSeikaku[iCharCode].H_NoInput2;	//	番号２必須入力区分	//	HIS0014
			end;
		end;

        // --------------------
        //	採用区分
        // --------------------
        //<112>ADD↓
        if ( MTab_Select.Items.Selected = 0 ) then		    //	実在時
        begin
        //<112>ADD↑
            ParamByName('BmnUse')           .AsInteger  :=  Trunc(EBmnUse.Value);   // 部門採用区分

            // ｾｸﾞﾒﾝﾄ採用区分
            for iLoop := 1 to 10 do
                ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=
                    Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop))).Value);

            // ﾌﾟﾛｼﾞｪｸﾄ採用区分
            for iLoop := 1 to 10 do
                ParamByName('PrjUse'+IntToStr(iLoop)).AsInteger :=
                    Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(iLoop))).Value);
		end;	//<112>ADD

        if ( wkBank.CodeZoku <= 1 ) then
        begin
            if ( EBankCodeN.InputFlag ) then
                ParamByName('Bank') .AsFloat	:=	0
            else
            begin
                sBankCode	                    :=	IntToStr(Trunc(EBankCodeN.Value));	//	銀行ｺｰﾄﾞを数値から文字へ
                ParamByName('Bank') .AsFloat	:=	gfnGetBank_NCODE(ComArea.SetDspCodeAttr(sBankCode,16,1));
            end;
        end
        else
        begin
            ParamByName('Bank'	).AsFloat		:=	gfnGetBank_NCODE(ComArea.SetDspCodeAttr((EBankCodeT.Text),wkBank.CodeKeta,2));
        end;

        // --------------------
		//	集計情報
        // --------------------
		ParamByName('SeiZan')   .AsInteger		:=	Trunc(ESeiZanCode.Value);	//	正残区分

        // --------------------
		//  合計のTABの時
        // --------------------
		if ( MTab_Select.Items.Selected = 2 ) then
		begin
			case MComboBox.ItemIndex of
				0,1:// 資産科目,負債・資本科目
                begin
					// BS/PL区分がPLとなっていた時
					if ( EBPCode.Value = 1 ) then
					begin
						EBPCode.Value := 0; //B/S
						GetList(EBPCode,LBPName);
					end;
				end;
				2,3:// 損益科目,製造科目
				begin
					// BS/PL区分がBSとなっていた時
					if ( EBPCode.Value = 0 ) then
					begin
						EBPCode.Value := 1; //P/L
						GetList(EBPCode,LBPName);
					end;
				end;
			end;
		end;

		ParamByName('BsPl')     .AsInteger  :=	Trunc(EBPCode.Value);		//	ＢＳ／ＰＬ区分
		ParamByName('Kisyu')    .AsInteger	:=	Trunc(EKisyuCode.Value);	//	期首残区分
		ParamByName('DspPri')   .AsInteger	:=	Trunc(EDPCode.Value);		//	表示／印刷不可区分
		ParamByName('Hiritsu')  .AsInteger	:=	Trunc(EHiritsuCode.Value);	//	比率科目区分
		ParamByName('KariKuri') .AsFloat	:=                              //	借方資金繰コード
            gfnGetSKmkMA_NCODE(Trunc(EKariCode.Value), SHIKINGURI);         //  <055>
		ParamByName('KashiKuri').AsFloat	:=	                            //	貸方資金繰コード
            gfnGetSKmkMA_NCODE(Trunc(EKashiCode.Value), SHIKINGURI);        //  <055>

        // --------------------
		//	入力条件
        // --------------------
		ParamByName('ShiwaInp') .AsInteger	:=	Trunc(EShiwakeCode.Value);	//	仕訳入力区分

        //	期日入力区分
		case Trunc(EKijitsuCode.Value) of
			0:	//	入力なし
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	0;	//	期日入力区分(0:入力なし)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	//	期日必須入力区分(0:任意入力)
			end;
			1:	//	正残側(任意)
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	1;	//	期日入力区分(1:正残側のみ)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	//	期日必須入力区分(0:任意入力)
			end;
			2:	//	正残側(必須)
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	1;	//	期日入力区分(1:正残側のみ)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	1;	//	期日必須入力区分(1:必須入力)
			end;
			3:	//	貸借入力(任意)
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	2;	//	期日入力区分(2:貸借入力)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	//	期日必須入力区分(0:任意入力)
			end;
			4:	//	貸借入力(必須)
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	2;	//	期日入力区分(2:貸借入力)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	1;	//	期日必須入力区分(1:必須入力)
			end;
			5:	//	負残側(任意)
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	3;	//	期日入力区分(3:負残側のみ)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	//	期日必須入力区分(0:任意入力)
			end;
			6:	//	負残側(必須)
			begin
				ParamByName('KijitsuInp')   .AsInteger	:=	3;	//	期日入力区分(3:負残側のみ)
				ParamByName('KijitsuH_Inp') .AsInteger	:=	1;	//	期日必須入力区分(1:必須入力)
			end;
		end;

{	//	手形番号入力区分を今非表示にしている為ｺﾒﾝﾄ化
		case Trunc(ETegataNoCode.Value) of	//	手形番号入力区分
			0:	//	入力なし
			begin
				ParamByName('TegataNO'	).AsInteger	:=	0;	//	手形番号入力区分(0:入力なし)
				ParamByName('TegataH_NO').AsInteger	:=	0;	//	手形番号必須入力区分(0:任意入力)
			end;
			1:	//	正残側(任意)
			begin
				ParamByName('TegataNO'	).AsInteger	:=	1;	//	手形番号入力区分(1:正残側のみ)
				ParamByName('TegataH_NO').AsInteger	:=	0;	//	手形番号必須入力区分(0:任意入力)
			end;
			2:	//	正残側(必須)
			begin
				ParamByName('TegataNO'	).AsInteger	:=	1;	//	手形番号入力区分(1:正残側のみ)
				ParamByName('TegataH_NO').AsInteger	:=	1;	//	手形番号必須入力区分(1:必須入力)
			end;
			3:	//	貸借入力(任意)
			begin
				ParamByName('TegataNO'	).AsInteger	:=	2;	//	手形番号入力区分(2:貸借入力)
				ParamByName('TegataH_NO').AsInteger	:=	0;	//	手形番号必須入力区分(0:任意入力)
			end;
			4:	//	貸借入力(必須)
			begin
				ParamByName('TegataNO'	).AsInteger	:=	2;	//	手形番号入力区分(2:貸借入力)
				ParamByName('TegataH_NO').AsInteger	:=	1;	//	手形番号必須入力区分(1:必須入力)
			end;
			5:	//	負残側(任意)
			begin
				ParamByName('TegataNO'	).AsInteger	:=	3;	//	手形番号入力区分(3:負残側のみ)
				ParamByName('TegataH_NO').AsInteger	:=	0;	//	手形番号必須入力区分(0:任意入力)
			end;
			6:	//	負残側(必須)
			begin
				ParamByName('TegataNO'	).AsInteger	:=	3;	//	手形番号入力区分(3:負残側のみ)
				ParamByName('TegataH_NO').AsInteger	:=	1;	//	手形番号必須入力区分(1:必須入力)
			end;
		end;
}

		if ( m_System = MJSLINK ) then
		begin
			ParamByName('NoName1').AsInteger :=	m_NameList[ComboNumber1.ItemIndex].No;	// 番号1名称No

			case Trunc(ENumber1.Value) of	// 番号1入力
				0:	//	入力なし
				begin
					ParamByName('NoInput1')     .AsInteger :=	0;	//	番号1入力区分	 (0:入力なし)
					ParamByName('H_NoInput1')   .AsInteger :=	0;	//	番号1必須入力区分(0:任意入力)
				end;
				1:	//	正残側(任意)
				begin
					ParamByName('NoInput1')     .AsInteger :=	1;	//	番号1入力区分	 (1:正残側のみ)
					ParamByName('H_NoInput1')   .AsInteger :=	0;	//	番号1必須入力区分(0:任意入力)
				end;
				2:	//	正残側(必須)
				begin
					ParamByName('NoInput1')     .AsInteger :=	1;	//	番号1入力区分	 (1:正残側のみ)
					ParamByName('H_NoInput1')   .AsInteger :=	1;	//	番号1必須入力区分(1:必須入力)
				end;
				3:	//	貸借入力(任意)
				begin
					ParamByName('NoInput1')     .AsInteger :=	2;	//	番号1入力区分	 (2:貸借入力)
					ParamByName('H_NoInput1')   .AsInteger :=	0;	//	番号1必須入力区分(0:任意入力)
				end;
				4:	//	貸借入力(必須)
				begin
					ParamByName('NoInput1')     .AsInteger :=	2;	//	番号1入力区分	 (2:貸借入力)
					ParamByName('H_NoInput1')   .AsInteger :=	1;	//	番号1必須入力区分(1:必須入力)
				end;
				5:	//	負残側(任意)
				begin
					ParamByName('NoInput1')     .AsInteger :=	3;	//	番号1入力区分	 (3:負残側のみ)
					ParamByName('H_NoInput1')   .AsInteger :=	0;	//	番号1必須入力区分(0:任意入力)
				end;
				6:	//	負残側(必須)
				begin
					ParamByName('NoInput1')     .AsInteger :=	3;	//	番号1入力区分	 (3:負残側のみ)
					ParamByName('H_NoInput1')   .AsInteger :=	1;	//	番号1必須入力区分(1:必須入力)
				end;
			end;

			ParamByName('EInpKbn1') .AsInteger  :=  EDspNumber1.AsInteger;	                // 番号1初期表示区分
			ParamByName('NoName2')  .AsInteger  :=	m_NameList[ComboNumber2.ItemIndex].No;	// 番号2名称No

			case Trunc(ENumber2.Value) of	// 番号2入力
				0:	//	入力なし
				begin
					ParamByName('NoInput2')     .AsInteger :=	0;	//	番号2入力区分	 (0:入力なし)
					ParamByName('H_NoInput2')   .AsInteger :=	0;	//	番号2必須入力区分(0:任意入力)
				end;
				1:	//	正残側(任意)
				begin
					ParamByName('NoInput2')     .AsInteger :=	1;	//	番号2入力区分	 (1:正残側のみ)
					ParamByName('H_NoInput2')   .AsInteger :=	0;	//	番号2必須入力区分(0:任意入力)
				end;
				2:	//	正残側(必須)
				begin
					ParamByName('NoInput2')     .AsInteger :=	1;	//	番号2入力区分	 (1:正残側のみ)
					ParamByName('H_NoInput2')   .AsInteger :=	1;	//	番号2必須入力区分(1:必須入力)
				end;
				3:	//	貸借入力(任意)
				begin
					ParamByName('NoInput2')     .AsInteger :=	2;	//	番号2入力区分	 (2:貸借入力)
					ParamByName('H_NoInput2')   .AsInteger :=	0;	//	番号2必須入力区分(0:任意入力)
				end;
				4:	//	貸借入力(必須)
				begin
					ParamByName('NoInput2')     .AsInteger :=	2;	//	番号2入力区分	 (2:貸借入力)
					ParamByName('H_NoInput2')   .AsInteger :=	1;	//	番号2必須入力区分(1:必須入力)
				end;
				5:	//	負残側(任意)
				begin
					ParamByName('NoInput2')     .AsInteger :=	3;	//	番号2入力区分	 (3:負残側のみ)
					ParamByName('H_NoInput2')   .AsInteger :=	0;	//	番号2必須入力区分(0:任意入力)
				end;
				6:	//	負残側(必須)
				begin
					ParamByName('NoInput2')     .AsInteger :=	3;	//	番号2入力区分	 (3:負残側のみ)
					ParamByName('H_NoInput2')   .AsInteger :=	1;	//	番号2必須入力区分(1:必須入力)
				end;
			end;

			ParamByName('EInpKbn2').AsInteger := EDspNumber2.AsInteger;	// 番号2初期表示区分
			ParamByName('EInpKbn3').AsInteger := ETotalKbn.AsInteger;	// 同一番号区分
		end;

        // 分類 <002>
		for iLoop := 1 to 10 do
        begin
            if m_Bunrui[iLoop].ECode.Text <> '' then
            begin
                // 分類内部ｺｰﾄﾞ
                ParamByName('BunruiNCode' + IntToStr(iLoop)).AsFloat
                    := m_Bunrui[iLoop].NCode;
            end
            // <029>↓空の場合はｸﾘｱ
            else
            begin
                ParamByName('BunruiNCode' + IntToStr(iLoop)).AsFloat := 0;
            end;
            // <029>↑
        end;

		ParamByName('Tekiyou')  .AsInteger  :=	Trunc(ETekiCode.Value);		    //	固定摘要必須入力
		ParamByName('TekiBun')  .AsFloat	:=	gfnGetTekiMA_NCODE(Trunc(ETekiyouBunrui.Value));    //	摘要分類コード
		ParamByName('Yusen')    .AsInteger	:=	Trunc(EShikuriCode.Value);	    //	資金繰コード優先区分
        ParamByName('Syosuten') .AsInteger	:=	Trunc(ESyousuten.Value);	    //	小数点桁数<057>

		ParamByName('MasKbn')   .AsInteger	:=	giUpDate_MasKbn;			    //	ﾏｽﾀｰ区分
		ParamByName('JGKbn')    .AsInteger	:=	giUpDate_SumKbn;			    //	実在／合計区分
        ParamByName('GCode')    .AsFloat 	:=	iNCode;     				    //	内部ｺｰﾄﾞ
        ParamByName('SCode')    .AsFloat	:=	iCNCode;				        //	科目別補助内部ｺｰﾄﾞ

        ParamByName('TStartDate').AsDateTime :=  sSDate;  // 適用期間（自）<020>
        ParamByName('TEndDate')  .AsDateTime :=  sEDate;  // 適用期間（至）<020>

        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);							// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

        //<116>ADD↓
        //実在科目の場合
        if (giUpDate_MasKbn = 1) and (giUpDate_SumKbn = 0) then
        begin
            //変更後の分析ｺｰﾄﾞが「198:借方繰越利益」か「199:貸方繰越利益」だった場合
            //科目別補助の消費税関連をｸﾘｱする
        	if (iAnalyzeCode <> EBunCode.AsInteger) and
        	   (EBunCode.AsInteger in [aDefault[110].Code, aDefault[111].Code]) then
            	ClearKmkSubTaxKbn(iNCode);
        end;
        //<116>ADD↑

		//	ﾃｰﾌﾞﾙ更新履歴
		if (giUpDate_MasKbn = 2) then
			TableHistory.KmkMA_Sai	:=	TABLE_IN_UPDATE
		else
			TableHistory.KmkMA_Kan	:=	TABLE_IN_UPDATE;

		// <100>ADD
		// 出力順序自動登録 構造体設定
		if giUpDate_MasKbn = 1 then
		begin
			if Length(m_KmkOrder) > 0 then
			begin
				// 新規追加された科目が詳細画面で修正されたか科目か確認して、配列も修正
				for iLoop := 0 to Length(m_KmkOrder)-1 do
				begin
					if m_KmkOrder[iLoop].Delete = True then
						continue;

					if iNCode = m_KmkOrder[iLoop].NCode then
					begin
						m_KmkOrder[iLoop].SName			:= fnDelCRLF(ESName.Text);									//	簡略名称
						m_KmkOrder[iLoop].LName			:= fnDelCRLF(ELName.Text);									//	正式名称
						m_KmkOrder[iLoop].AnalyzeCode	:= Trunc(EBunCode.Value);									//	分析ｺｰﾄﾞ
						m_KmkOrder[iLoop].BPKbn			:= Trunc(EBPCode.Value);									//	ＢＳ／ＰＬ区分
						m_KmkOrder[iLoop].BmnUse		:= Trunc(EBmnUse.Value);									//	部門採用
						m_KmkOrder[iLoop].SegUse1		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse1')).Value);	//	セグメント1採用
						m_KmkOrder[iLoop].SegUse2		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse2')).Value);	//	セグメント2採用
						m_KmkOrder[iLoop].SegUse3		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse3')).Value);	//	セグメント3採用
						m_KmkOrder[iLoop].SegUse4		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse4')).Value);	//	セグメント4採用
						m_KmkOrder[iLoop].SegUse5		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse5')).Value);	//	セグメント5採用
						m_KmkOrder[iLoop].SegUse6		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse6')).Value);	//	セグメント6採用
						m_KmkOrder[iLoop].SegUse7		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse7')).Value);	//	セグメント7採用
						m_KmkOrder[iLoop].SegUse8		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse8')).Value);	//	セグメント8採用
						m_KmkOrder[iLoop].SegUse9		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse9')).Value);	//	セグメント9採用
						m_KmkOrder[iLoop].SegUse10		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse10')).Value);	//	セグメント10採用
						// <101>ADD↓
						m_KmkOrder[iLoop].PrjUse1		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse1')).Value);	//	プロジェクト1採用
						m_KmkOrder[iLoop].PrjUse2		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse2')).Value);	//	プロジェクト2採用
						m_KmkOrder[iLoop].PrjUse3		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse3')).Value);	//	プロジェクト3採用
						m_KmkOrder[iLoop].PrjUse4		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse4')).Value);	//	プロジェクト4採用
						m_KmkOrder[iLoop].PrjUse5		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse5')).Value);	//	プロジェクト5採用
						m_KmkOrder[iLoop].PrjUse6		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse6')).Value);	//	プロジェクト6採用
						m_KmkOrder[iLoop].PrjUse7		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse7')).Value);	//	プロジェクト7採用
						m_KmkOrder[iLoop].PrjUse8		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse8')).Value);	//	プロジェクト8採用
						m_KmkOrder[iLoop].PrjUse9		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse9')).Value);	//	プロジェクト9採用
						m_KmkOrder[iLoop].PrjUse10		:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse10')).Value);	//	プロジェクト10採用
						// <101>ADD↑
						break;
					end;
				end;
			end;
		end;
		// <100>ADD↑

	//	勘定科目詳細情報(KmkMB)
		Close;
		SQL.Clear;
		SQL.Add('UPDATE kmkMB SET               '); //	勘定科目詳細情報

        // --------------------
		//	集計情報
        // --------------------
		SQL.Add('    FixChgRate = :Hendouhi     ');	//	変動費比率
        // --------------------
		//	出力情報
        // --------------------
		SQL.Add('   ,MinusKbn   = :Mainasu      ');	//	マイナス印刷区分
		SQL.Add('   ,SagakuKbn  = :Sagaku       ');	//	差額印刷区分
		SQL.Add('   ,ProfitKbn  = :Rieki        ');	//	利益印刷区分

		// 実在時かつ分析ｺｰﾄﾞが｢0:非会計科目｣の時
		if ( MTab_Select.Items.Selected = 0 ) then
            SQL.Add('   ,OutKbn1    = :AddUnit      ');	//	集計単位区分

		SQL.Add('   ,MTekiPrn   = :Kihyousya    ');	//	元帳摘要欄起票者印字区分
		SQL.Add('   ,MinusName  = :MainaName    ');	//	マイナス変換科目名
		SQL.Add('   ,DecoKbn    = :Sousyoku     ');	//	装飾区分
        // --------------------
		//	電子帳簿
        // --------------------
		SQL.Add('   ,HisKbn     = :Rireki       ');	//	履歴管理区分
        SQL.ADD('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>

		SQL.Add('WHERE MasterKbn = :MasKbn      '); //	ﾏｽﾀ区分
		SQL.Add('  AND SumKbn    = :JGKbn       ');	//	実在/合計区分
        SQL.Add('  AND NCode     = :GCode       ');	//	内部ｺｰﾄﾞ
        SQL.Add('  AND CNCode    = :SCode       ');	//	科目別補助内部ｺｰﾄﾞ

        //	集計情報
		ParamByName('Hendouhi'	).AsFloat		:=	EHendouhi.Value;			//	変動費比率
		//	出力情報
		ParamByName('Mainasu'	).AsInteger		:=	Trunc(EMainasuCode.Value);	//	マイナス印刷区分
		ParamByName('Sagaku'	).AsInteger		:=	Trunc(ESagakuCode.Value);	//	差額印刷区分
		ParamByName('Rieki'		).AsInteger		:=	Trunc(ERiekiCode.Value);	//	利益印刷区分

		// 実在時
		if ( MTab_Select.Items.Selected = 0 ) then
		begin
			// 分析ｺｰﾄﾞが｢0:非会計科目｣の時
			if ( EBunCode.AsInteger = 0 ) then
				ParamByName('AddUnit').AsInteger :=  EAddUnit.AsInteger			//	集計単位区分
			// 分析ｺｰﾄﾞが｢0:非会計科目｣以外の時
			else
				ParamByName('AddUnit').AsInteger := 0;							//	集計単位区分(0:指定した単位で集計)
		end;

		ParamByName('Kihyousya'	).AsInteger		:=	Trunc(EKihyousya.Value);	//	元帳摘要欄起票者印字区分
		ParamByName('MainaName'	).AsString		:=	EMainaName.Text;			//	マイナス変換科目名
		ParamByName('Sousyoku'	).AsInteger		:=	Trunc(ESousyokuCode.Value);	//	装飾区分
		//	電子帳簿
		ParamByName('Rireki'	).AsInteger		:=	Trunc(ERirekiKbnCode.Value);//	履歴管理区分

		ParamByName('MasKbn'	).AsInteger		:=	giUpDate_MasKbn;			//	ﾏｽﾀｰ区分
		ParamByName('JGKbn'		).AsInteger		:=	giUpDate_SumKbn;			//	実在／合計区分
        ParamByName('GCode'		).AsFloat		:=	iNCode;				        //	内部ｺｰﾄﾞ
        ParamByName('SCode'		).AsFloat		:=	iCNCode;				    //	科目別補助内部ｺｰﾄﾞ

        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);							// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if ( giUpDate_MasKbn = 2 ) then	//	細目時
			TableHistory.KmkMB_Sai	:=	TABLE_IN_UPDATE
		else
			TableHistory.KmkMB_Kan	:=	TABLE_IN_UPDATE;

// <063> ADD start
		// 同期ｽﾄｱﾄﾞ呼出
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
		begin
											// KMKMA同期
			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
			begin                           // ﾛｰﾙﾊﾞｯｸ
				MDataModule.Rollback (dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
				DmqData.Close;
				DmqData.Free;
   		    	Exit;
			end;
            								// KMKMB同期
// <068> MOD start
//			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
			begin                           // ﾛｰﾙﾊﾞｯｸ
				MDataModule.Rollback (dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
				DmqData.Close;
				DmqData.Free;
   			    Exit;
			end;
        end;
// <063> ADD end
	end;

// <083>↓
	// 実績更新
    if m_UpdAddKbnFlg = True then
		DataWrite_AddKbn_Bank(iNCode, DmqData);
// <083>↑

	DmqData.Close;
	DmqData.Free;

	//	簡略名称変更時にTreeに反映させる
	sName	:=	ESName.Text;
	if ( gsKanryaku <> sName )then
    begin
		for iLoop := 0 to TreeView.Items.Count-1 do
		begin
			TreeView.Items[iLoop];
			wkRec	:=	TreeView.Items[iLoop].Data;
			CNode	:=	TreeView.Items[iLoop];
			if ( wkRec^.MasKbn = 2 ) then	//	細目時
			begin
				wkNode	:=	TreeView.Items[iLoop].Parent;
				if ( wkNode <> nil ) then
				begin
					wkP_Rec	:=	wkNode.Data;
					if ( wkP_Rec^.GCode = giUpDate_GCode   ) and
                       ( wkRec^.SubCode   = giUpDate_SCode ) and
					   ( wkRec^.Kbn    = 0                 ) and
                       ( wkRec^.MasKbn = 2                 ) then
					begin
						CNode.Text	:=	MakeDspString_Sai(ECode.Text,sName,
                                                    wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);
					end;
				end;
			end
			else begin
				if ( wkRec^.GCode   = giUpDate_GCode  ) and
                   ( wkRec^.Kbn    = giUpDate_SumKbn  ) and
                   ( wkRec^.MasKbn = giUpDate_MasKbn  ) then
				begin
					CNode.Text	:=	MakeDspString(StrToIntDef(ECode.Text,0),sName);
				end;
			end;
		end;
		gsKanryaku	:=	ESName.Text;
	end;

	//	装飾区分変更時にTreeに反映させる
	if ( giSousyoku <> Trunc(ESousyokuCode.Value) ) or ( gsKanryaku <> sName )then
    begin
		for iLoop := 0 to TreeView.Items.Count-1 do
		begin
			TreeView.Items[iLoop];
			wkRec	:=	TreeView.Items[iLoop].Data;
			CNode	:=	TreeView.Items[iLoop];
			if ( wkRec^.MasKbn = 2 ) then
			begin
				wkNode	:=	TreeView.Items[iLoop].Parent;
				if ( wkNode <> nil ) then
				begin
					wkP_Rec	:=	wkNode.Data;
					if ( wkP_Rec^.GCode = giUpDate_GCode ) and
                       ( wkRec^.SubCode   = giUpDate_SCode ) and
                       ( wkRec^.Kbn    = 0              ) and
                       ( wkRec^.MasKbn = 2              ) then
					begin
                        CNode.Text	:=	MakeDspString_Sai(ECode.Text,GetSousyoku(wkRec^.Name,Trunc(ESousyokuCode.Value)),
                                                    wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);
					end;
				end;
			end
			else begin
				if ( wkRec^.GCode   = giUpDate_GCode  ) and
                   ( wkRec^.Kbn    = giUpDate_SumKbn ) and
                   ( wkRec^.MasKbn = giUpDate_MasKbn ) then
				begin
					CNode.Text	:=	MakeDspString(StrToIntDef(ECode.Text,0),GetSousyoku(wkRec^.Name,Trunc(ESousyokuCode.Value)));
				end;
			end;
		end;
		giSousyoku	:=	Trunc(ESousyokuCode.Value);
	end;

	if ( ECode.Enabled = TRUE ) then
		ECode.SetFocus;

	if ( iSelect <> SAIMOKU ) then
		gbKmkTree2Flag	:=	TRUE;

	MDataModule.Commit (dbCorp_Select);											//	ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);										// 親会社DBもｺﾐｯﾄ <063> ADD

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	gSeiChengeFlag  := FALSE;
	gbBunChengeFlag := FALSE;
	m_bBunChgMsgFlag := False; // <129> ADD

end;

//**********************************************************************
//*		Proccess	:	詳細画面での新規追加処理
//*		Name		:	H.Endo
//*		Date		:	2000/10/11
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.SyousaiNew();
var
	DmqData		:	TMQuery;
//	DmqUpDate	:	TMQuery;		// <063> DEL
	wkRec		:	^TaikeiRec;
	wkOyaRec	:	^TaikeiRec;
	wRec		:	^TaikeiRec;
	CNode		:	TTreeNode;
	wkNode		:	TTreeNode;
	DfRec		:	DefaultRec;
    sSDate		:	TDateTime;		//	適用開始日
    sEDate		:	TDateTime;		//	適用終了日
	sBankCode	:	String;		    //	銀行ｺｰﾄﾞ
	sFusenCmnt	:	String;
	sDspName	:	String;
	iSelect		:	Integer;
	Pos			:	Integer;
	KasanCode	:	Integer;
	iWork		:	Integer;
	iEntNo		:	Integer;
	iSumKbn		:	Integer;
	iMasKbn		:	Integer;
	iLoop		:	Integer;
	iCharCode	:	Integer;	//	性格ｺｰﾄﾞ
	iOyaCode	:	Integer;
	iHantei		:	Integer;
	iYouBun		:	Integer;	//	要約分析ｺｰﾄﾞ
    iNCode      :   Extended;   //  内部コード
	bSyokuFlag	:	Boolean;
	DummyFlag	:	Boolean;
	RollBackFlag:	Boolean;
	bNodeNilFlag:	Boolean;

    iCNCode     :   Extended;   // 科目別補助内部ｺｰﾄﾞ
    iCodeAttr   :   Integer;
    iCodeDigit  :   Integer;
    iRet		:	Integer;	// <063> ADD
    iGCode		:	Integer;	// 科目外部ｺｰﾄﾞ <063> ADD
    strSubCode	:	String;		// 科目別補助外部ｺｰﾄﾞ <063> ADD

begin

	//	初期化処理
	iSelect			:=	0;
	iEntNo			:=	0;
	iMasKbn			:=	0;
	iSumKbn			:=	0;
	iHantei			:=	0;
	iYouBun			:=	0;
//	iCharCode		:=	0;		// <063> DEL
    iCNCode         :=  0;
    iCodeDigit      :=  0;
    iCodeAttr       :=  0;
	bSyokuFlag		:=	FALSE;
	RollBackFlag	:=	FALSE;
    iRet			:=	0;		  								// <063> ADD
    KasanCode		:=	0;                                      // <063> ADD
    CNode			:= 	nil;                                    // <063> ADD

    iOyaCode        :=  0;
    iNCode          :=  0;
    wkRec           :=  Nil;

    // -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

   	if ( Trim(ECode.Text) <> '' ) or
       ( m_SyokuchiDlg ) then
	begin														// <063> ADD
		MDataModule.BeginTran (dbCorp_Select);					//	ﾄﾗﾝｻﾞｸｼｮﾝの開始
		ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);				// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADD
	end;														// <063> ADD

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

// <063> DEL start
//	DmqUpDate := TMQuery.Create( Self );					    //	MQueryの構築
//    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqUpDate );	//	DBとMQueryの接続
// <063> DEL end

	//	親を取得
	bNodeNilFlag	:=	FALSE;
	Pos	:=	MJSHanPos(' ', MTab_Select.BorderCaption);			                //	先頭からSPACEまでの桁数COUNT
	if ( Pos <> 0 ) then
		KasanCode	:=	StrToInt(MJSHanCopy(MTab_Select.BorderCaption, 1, Pos-1))	    //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
	else
		bNodeNilFlag :=	TRUE;
	//	TabのActiveによってﾏｽﾀ区分・実在/合計区分を取得
	case MTab_Select.Items.Selected of
        // -------------------
        //	    実在時
        // -------------------
		0:
		begin
			iMasKbn :=	1;
			iSumKbn	:=	0;
			iHantei	:=	ZITSUZAI;
        	for iLoop := 0 to 112 do
			begin
				if ( aDefault[iLoop].Code = Trunc(EBunCode.Value) ) then
				begin
					DfRec.SeiZan	:=	aDefault[iLoop].SeiZan;		            //	正残区分(0:借方、1:貸方)

					if ( aDefault[iLoop].BPKbn < 0 ) then
					begin
						case MComboBox.ItemIndex of
							0,1: DfRec.BPKbn := 0; //B/S
							2,3: DfRec.BPKbn := 1; //P/L
                        end;
					end
					else
					begin
						if ( aTokuteiKmkCode[12] = StrToIntDef(ECode.Text,0) ) then	    //科目が特定科目の前期繰越利益と一致した時
							DfRec.BPKbn := 1		//	BS/PL区分(1:P/L)
						else
							DfRec.BPKbn	:=	aDefault[iLoop].BPKbn;		        //	BS/PL区分(0:B/S、1:P/L)
					end;
					DfRec.Kisyuzan	:=	aDefault[iLoop].Kisyuzan;	            //	期首残(0:なし、1:あり)

					if ( fnFurikaeCheck(StrToIntDef(ECode.Text,0)) = FALSE ) then
						DfRec.Shiwake := aDefault[iLoop].Shiwake	            //	仕訳入力区分(0:貸借入力、1:正残側のみ、2:負残側のみ、9:入力不可)
					else
						DfRec.Shiwake := 9;							            //	仕訳入力区分(9:入力不可)

					DfRec.TaxKbn	:=	aDefault[iLoop].TaxKbn;		            //	消費税科目区分(0:対象外、1:売上科目、2:仕入科目)
					DfRec.TaxCode 	:=	aDefault[iLoop].TaxCode;	            //	消費税ｺｰﾄﾞ(0:なし、10～99)
					DfRec.Mainasu	:=	aDefault[iLoop].Mainasu;	            //	ﾏｲﾅｽ印刷区分(0:なし、1:あり)
					DfRec.YouyakuCode := aDefault[iLoop].YouyakuCode;	        //	要約ｺｰﾄﾞ
					DfRec.KoteiCode   := aDefault[iLoop].KoteiCode;		        //	固定費ｺｰﾄﾞ
					DfRec.HendoCode   := aDefault[iLoop].HendoCode;		        //	変動費ｺｰﾄﾞ

					break;
				end;
			end;
		end;
        // -------------------
        //	    細目時
        // -------------------
		1:
		begin
			iMasKbn	:=	2;
			iSumKbn	:=	0;
			iHantei	:=	SAIMOKU;

		end;
        // -------------------
        //	    合計時
        // -------------------
		2:
		begin
			iMasKbn	:=	1;
			iSumKbn	:=	1;

			case MComboBox.ItemIndex of
				0,1: DfRec.BPKbn := 0; //B/S
				2,3: DfRec.BPKbn := 1; //P/L
			end;
		end;
	end;

	if ( EStartDate.Value > 0 ) then
        sSDate	:=	EStartDate.AsDateTime
	else
        sSDate	:=  m_cJNTArea.getDefDate(1);       // 適用期間（自）

	if ( EEndDate.Value > 0 ) then
        sEDate	:=	EEndDate.AsDateTime
	else
        sEDate	:=  m_cJNTArea.getDefDate(2);       // 適用期間（至）

    // -----------------------
    //	    細目科目
    // -----------------------
    if ( iMasKbn = 2 ) then
    begin
        // 科目別補助内部ｺｰﾄﾞを新規に取得する
        iCNCode :=  GetNewCNCode;

        // 内部ｺｰﾄﾞは親の内部ｺｰﾄﾞを取得する
        with DmqData do
        begin
            Close;
            SQL.Clear;
            SQL.Add('SELECT                     ');
            SQL.Add('    NCODE                  ');
            SQL.Add('   ,CodeAttr               ');
            SQL.Add('   ,CodeDigit              ');
            SQL.Add('FROM KmkMA                 ');
            SQL.Add('WHERE Masterkbn = 1        ');
            SQL.Add('  AND RDelKbn   = 0        ');
            SQL.Add('  AND GCode     = :GCODE   ');
            ParamByName('GCODE').AsInteger  := KasanCode;

            //	ｴﾗｰの判定
            if ( Open = FALSE ) then
            begin
                ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);		// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);	// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Exit;
            end;

            if ( EOF <> TRUE ) then
            begin
                iNCode      :=  GetFld('NCode')     .AsFloat;
                iCodeDigit  :=  GetFld('CodeDigit') .AsInteger;
                iCodeAttr   :=  GetFld('CodeAttr')  .AsInteger;
            end;
        end;
    end
    // -----------------------
    //	    勘定科目
    // -----------------------
    else
    begin
        // 勘定科目(実在・合計)時は、新規に内部ｺｰﾄﾞを取得する
        iNCode  :=  GetNewNCode;
    end;

//    DmqUpDate.Close;								// <063> DEL

	with DmqData do
	begin
		if ( Not(bSyokuFlag) ) then
		begin
// <063> ADD start
													// 子会社の場合
			if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
			begin
				DmqData.Close;
													// 親会社DBとMQueryの接続
				MDataModule.SetDBInfoToQuery( m_SyncMaster.m_cPDBSelect, DmqData );
			end;
// <063> ADD end
// ------------------------------------
//	    勘定科目基本ﾏｽﾀ(KmkMA)更新
// ------------------------------------
			Close;
			SQL.Clear;
			SQL.Add('INSERT INTO KmkMA (        ');
 			SQL.Add('        NCode              ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,CNCode             '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,MasterKbn          ');	//	ﾏｽﾀ区分
			SQL.Add('       ,SumKbn             ');	//	実在/合計区分
            SQL.Add('       ,RDelKbn            ');	//	ﾚｺｰﾄﾞ区分
			SQL.Add('       ,Gcode              ');	//	外部ｺｰﾄﾞ
			SQL.Add('       ,SubCode            ');	//	細目ｺｰﾄﾞ
			SQL.Add('       ,Renso              ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('       ,LongName           ');	//	正式名称
			SQL.Add('       ,SimpleName         ');	//	簡略名称

            // --------------------
            //      諸口時
            // --------------------
            if ( m_SyokuchiDlg ) and ( iHantei = SAIMOKU ) then
    			SQL.Add('       ,Syokuchikbn        ');	//	諸口区分

			SQL.Add('       ,AnalyzeCode        ');	//	分析ｺｰﾄﾞ
			SQL.Add('       ,CharCode           ');	//	性格ｺｰﾄﾞ

            // --------------------
            //      実在時
            // --------------------
			if ( iHantei = ZITSUZAI ) then
			begin
				SQL.Add('       ,SumAnaCode         ');	//	要約分析ｺｰﾄﾞ

			    //	消費税
				SQL.Add('       ,TaxKbn             ');	//	消費税科目区分
				case DfRec.TaxKbn of
					1:	SQL.Add('       ,STaxCode       ');	//	売上消費税ｺｰﾄﾞ
					2:	SQL.Add('       ,BTaxCode       ');	//	仕入消費税ｺｰﾄﾞ
				end;
			end;

            // --------------------
			//	    採用区分
            // --------------------
			SQL.Add('       ,BankNCode          ');	//	銀行ｺｰﾄﾞ
			SQL.Add('       ,TStartDate         ');	//	適用開始年月日
			SQL.Add('       ,TEndDate           ');	//	適用終了年月日
            SQL.Add('       ,CodeAttr           '); //  ｺｰﾄﾞ属性
            SQL.Add('       ,CodeDigit          '); //  ｺｰﾄﾞ桁数
            SQL.Add('       ,BmnUse             '); //  部門採用区分
            SQL.Add('       ,SegUse1            '); //  ｾｸﾞﾒﾝﾄ1採用区分
            SQL.Add('       ,SegUse2            '); //  ｾｸﾞﾒﾝﾄ2採用区分
            SQL.Add('       ,SegUse3            '); //  ｾｸﾞﾒﾝﾄ3採用区分
            SQL.Add('       ,SegUse4            '); //  ｾｸﾞﾒﾝﾄ4採用区分
            SQL.Add('       ,SegUse5            '); //  ｾｸﾞﾒﾝﾄ5採用区分
            SQL.Add('       ,SegUse6            '); //  ｾｸﾞﾒﾝﾄ6採用区分
            SQL.Add('       ,SegUse7            '); //  ｾｸﾞﾒﾝﾄ7採用区分
            SQL.Add('       ,SegUse8            '); //  ｾｸﾞﾒﾝﾄ8採用区分
            SQL.Add('       ,SegUse9            '); //  ｾｸﾞﾒﾝﾄ9採用区分
            SQL.Add('       ,SegUse10           '); //  ｾｸﾞﾒﾝﾄ10採用区分
            SQL.Add('       ,PrjUse1            '); //  ﾌﾟﾛｼﾞｪｸﾄ1採用区分
            SQL.Add('       ,PrjUse2            '); //  ﾌﾟﾛｼﾞｪｸﾄ2採用区分
            SQL.Add('       ,PrjUse3            '); //  ﾌﾟﾛｼﾞｪｸﾄ3採用区分
            SQL.Add('       ,PrjUse4            '); //  ﾌﾟﾛｼﾞｪｸﾄ4採用区分
            SQL.Add('       ,PrjUse5            '); //  ﾌﾟﾛｼﾞｪｸﾄ5採用区分
            SQL.Add('       ,PrjUse6            '); //  ﾌﾟﾛｼﾞｪｸﾄ6採用区分
            SQL.Add('       ,PrjUse7            '); //  ﾌﾟﾛｼﾞｪｸﾄ7採用区分
            SQL.Add('       ,PrjUse8            '); //  ﾌﾟﾛｼﾞｪｸﾄ8採用区分
            SQL.Add('       ,PrjUse9            '); //  ﾌﾟﾛｼﾞｪｸﾄ9採用区分
            SQL.Add('       ,PrjUse10           '); //  ﾌﾟﾛｼﾞｪｸﾄ10採用区分

            // --------------------
			//	    集計情報
            // --------------------
			SQL.Add('       ,DCKbn              ');	//	正残区分
			SQL.Add('       ,BPKbn              ');	//	ＢＳ／ＰＬ区分
			SQL.Add('       ,KisyuKbn           ');	//	期首残区分
			SQL.Add('       ,NonDspKbn          ');	//	表示／印刷不可区分
			SQL.Add('       ,PerKmkKbn          ');	//	比率科目区分
			SQL.Add('       ,DebitCash          ');	//	借方資金繰コード
			SQL.Add('       ,CreditCash         ');	//	貸方資金繰コード
			SQL.Add('       ,InputKbn           ');	//	仕訳入力区分

            // --------------------
			//	    入力条件
            // --------------------
			SQL.Add('       ,DInputKbn          ');	//	期日入力区分
			SQL.Add('       ,DInputAlw          ');	//	期日必須入力区分
			SQL.Add('       ,TInputKbn          ');	//	手形番号入力区分
			SQL.Add('       ,TInputAlw          ');	//	手形必須番号入力区分
			SQL.Add('       ,TMInputKbn         ');	//	手形管理NO入力区分
			SQL.Add('       ,TMInputAlw         ');	//	手形管理NO必須入力区分
			SQL.Add('       ,NoInputKbn1        ');	//	番号１入力区分
			SQL.Add('       ,NoInputAlw1        ');	//	番号１必須入力区分
			SQL.Add('       ,NoInputKbn2        ');	//	番号２入力区分
			SQL.Add('       ,NoInputAlw2        ');	//	番号２必須入力区分

			if ( m_System = MJSLINK ) then
			begin
				SQL.Add('       ,EInpKbn1           ');	//	番号1初期表示区分
				SQL.Add('       ,EInpKbn2           ');	//	番号2初期表示区分
				SQL.Add('       ,EInpKbn3           ');	//	同一番号区分

                if ( m_NumberUseKbn <> 0 ) and ( Panel_Number.Visible ) then
                begin
    				SQL.Add('       ,NoName1            ');	//	番号1名称No
    				SQL.Add('       ,NoName2            ');	//	番号2名称No
                end;
			end;

			SQL.Add('       ,TkInputKbn         ');	//	固定摘要必須入力
			SQL.Add('       ,TkClassCode        ');	//	摘要分類コード
			SQL.Add('       ,CashCodeKbn        ');	//	資金繰コード優先区分
            SQL.Add('       ,DPointNum          ');	//	小数点桁数<057>
            //<117>ADD↓
			// --------------------
			//	    分類
            // --------------------
            SQL.Add('       ,BunruiNCode1       ');
            SQL.Add('       ,BunruiNCode2       ');
            SQL.Add('       ,BunruiNCode3       ');
            SQL.Add('       ,BunruiNCode4       ');
            SQL.Add('       ,BunruiNCode5       ');
            SQL.Add('       ,BunruiNCode6       ');
            SQL.Add('       ,BunruiNCode7       ');
            SQL.Add('       ,BunruiNCode8       ');
            SQL.Add('       ,BunruiNCode9       ');
            SQL.Add('       ,BunruiNCode10      ');
            //<117>ADD↑
            SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(') VALUES (                 ');
			SQL.Add('        :NCode             ');	//	内部ｺｰﾄﾞ
            SQL.Add('       ,:CNCode            '); //  科目別補助内部ｺｰﾄﾞ
			SQL.Add('       ,:MasKbn            ');	//	ﾏｽﾀ区分
			SQL.Add('       ,:SumKbn            ');	//	実在/合計区分
			SQL.Add('       ,0                  ');	//	ﾚｺｰﾄﾞ区分
			SQL.Add('       ,:Gcode             ');	//	外部ｺｰﾄﾞ
			SQL.Add('       ,:SaiCode           ');	//	細目ｺｰﾄﾞ
			SQL.Add('       ,:Rensou            ');	//	連想ｼﾝﾎﾞﾙ
			SQL.Add('       ,:SeiName           ');	//	正式名称
			SQL.Add('       ,:KanName           ');	//	簡略名称

            if ( m_SyokuchiDlg ) and ( iHantei = SAIMOKU ) then
        	    SQL.Add('       ,1                  ');	//	諸口区分

			SQL.Add('       ,:BunCode           ');	//	分析ｺｰﾄﾞ
			SQL.Add('       ,:SeikakuCode       ');	//	性格ｺｰﾄﾞ

			if ( iHantei = ZITSUZAI ) then
			begin
				SQL.Add('       ,:YouBunCode        ');	//	要約分析ｺｰﾄﾞ
                // -----------------
    			//	    消費税
                // -----------------
				SQL.Add('       ,:TaxKbn            ');	//	消費税科目区分

				case DfRec.TaxKbn of
					1:	SQL.Add('       ,:UriCode       ');	//	売上消費税ｺｰﾄﾞ
					2:	SQL.Add('       ,:ShiCode       ');	//	仕入消費税ｺｰﾄﾞ
				end;
			end;

            // -----------------
			//	採用区分
            // -----------------
			SQL.Add('       ,:Bank          ');	//	銀行ｺｰﾄﾞ
            SQL.Add('       ,:StartDate     ');	//	適用開始年月日
            SQL.Add('       ,:EndDate       ');	//	適用終了年月日
            SQL.Add('       ,:Attr          '); //  ｺｰﾄﾞ属性
            SQL.Add('       ,:Digit         '); //  ｺｰﾄﾞ桁数
            SQL.Add('       ,:BmnUse        '); //  部門採用区分
            SQL.Add('       ,:SegUse1       '); //  ｾｸﾞﾒﾝﾄ1採用区分
            SQL.Add('       ,:SegUse2       '); //  ｾｸﾞﾒﾝﾄ2採用区分
            SQL.Add('       ,:SegUse3       '); //  ｾｸﾞﾒﾝﾄ3採用区分
            SQL.Add('       ,:SegUse4       '); //  ｾｸﾞﾒﾝﾄ4採用区分
            SQL.Add('       ,:SegUse5       '); //  ｾｸﾞﾒﾝﾄ5採用区分
            SQL.Add('       ,:SegUse6       '); //  ｾｸﾞﾒﾝﾄ6採用区分
            SQL.Add('       ,:SegUse7       '); //  ｾｸﾞﾒﾝﾄ7採用区分
            SQL.Add('       ,:SegUse8       '); //  ｾｸﾞﾒﾝﾄ8採用区分
            SQL.Add('       ,:SegUse9       '); //  ｾｸﾞﾒﾝﾄ9採用区分
            SQL.Add('       ,:SegUse10      '); //  ｾｸﾞﾒﾝﾄ10採用区分
            SQL.Add('       ,:PrjUse1       '); //  ﾌﾟﾛｼﾞｪｸﾄ1採用区分
            SQL.Add('       ,:PrjUse2       '); //  ﾌﾟﾛｼﾞｪｸﾄ2採用区分
            SQL.Add('       ,:PrjUse3       '); //  ﾌﾟﾛｼﾞｪｸﾄ3採用区分
            SQL.Add('       ,:PrjUse4       '); //  ﾌﾟﾛｼﾞｪｸﾄ4採用区分
            SQL.Add('       ,:PrjUse5       '); //  ﾌﾟﾛｼﾞｪｸﾄ5採用区分
            SQL.Add('       ,:PrjUse6       '); //  ﾌﾟﾛｼﾞｪｸﾄ6採用区分
            SQL.Add('       ,:PrjUse7       '); //  ﾌﾟﾛｼﾞｪｸﾄ7採用区分
            SQL.Add('       ,:PrjUse8       '); //  ﾌﾟﾛｼﾞｪｸﾄ8採用区分
            SQL.Add('       ,:PrjUse9       '); //  ﾌﾟﾛｼﾞｪｸﾄ9採用区分
            SQL.Add('       ,:PrjUse10      '); //  ﾌﾟﾛｼﾞｪｸﾄ10採用区分

			//	集計情報
			SQL.Add('       ,:SeiZan        ');	//	正残区分
			SQL.Add('       ,:BsPl          ');	//	ＢＳ／ＰＬ区分
			SQL.Add('       ,:Kisyu         ');	//	期首残区分
			SQL.Add('       ,:DspPri        ');	//	表示／印刷不可区分
			SQL.Add('       ,:Hiritsu       ');	//	比率科目区分
			SQL.Add('       ,:KariKuri      ');	//	借方資金繰コード
			SQL.Add('       ,:KashiKuri     ');	//	貸方資金繰コード
			//	入力条件
			SQL.Add('       ,:ShiwaInp      ');	//	仕訳入力区分
			SQL.Add('       ,:KijitsuInp    ');	//	期日入力区分
			SQL.Add('       ,:KijitsuH_Inp  ');	//	期日必須入力区分
			SQL.Add('       ,:TegataNO      ');	//	手形番号入力区分
			SQL.Add('       ,:TegataH_NO    ');	//	手形番号必須入力区分
			SQL.Add('       ,:TegataKanri   ');	//	手形管理NO入力区分
			SQL.Add('       ,:H_TegataKanri ');	//	手形管理NO必須入力区分
			SQL.Add('       ,:NoInput1      ');	//	番号１入力区分
			SQL.Add('       ,:H_NoInput1    ');	//	番号１必須入力区分
			SQL.Add('       ,:NoInput2      ');	//	番号２入力区分
			SQL.Add('       ,:H_NoInput2    ');	//	番号２必須入力区分

			if ( m_System = MJSLINK ) then
			begin
				SQL.Add('       ,:EInpKbn1      ');	//	番号1初期表示区分
				SQL.Add('       ,:EInpKbn2      ');	//	番号2初期表示区分
				SQL.Add('       ,:EInpKbn3      ');	//	同一番号区分
                if ( m_NumberUseKbn <> 0 ) and ( Panel_Number.Visible ) then
                begin
    				SQL.Add('       ,:NoName1       ');	//	番号1名称No
    				SQL.Add('       ,:NoName2       ');	//	番号2名称No
                end;
			end;

			SQL.Add('       ,:Tekiyou       ');	//	固定摘要必須入力
			SQL.Add('       ,:TekiBun       ');	//	摘要分類コード
			SQL.Add('       ,:Yusen         ');	//	資金繰コード優先区分
			SQL.Add('       ,:Syosuten      ');	//	小数点桁数<057>

			//<117>ADD↓
            //  分類
            SQL.Add('       ,:BunruiNCode1  ');
            SQL.Add('       ,:BunruiNCode2  ');
            SQL.Add('       ,:BunruiNCode3  ');
            SQL.Add('       ,:BunruiNCode4  ');
            SQL.Add('       ,:BunruiNCode5  ');
            SQL.Add('       ,:BunruiNCode6  ');
            SQL.Add('       ,:BunruiNCode7  ');
            SQL.Add('       ,:BunruiNCode8  ');
            SQL.Add('       ,:BunruiNCode9  ');
            SQL.Add('       ,:BunruiNCode10 ');
            //<117>ADD↑

            SQL.Add('       ,:UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
			SQL.Add(')                      ');

			ParamByName('NCode')    .AsFloat 		:=	iNCode;					//	内部ｺｰﾄﾞ
            ParamByName('CNCode')   .AsFloat        :=  iCNCode;                //　科目別補助内部ｺｰﾄﾞ
			ParamByName('MasKbn')   .AsInteger		:=	iMasKbn;				//	ﾏｽﾀ区分
			ParamByName('SumKbn')   .AsInteger		:=	iSumKbn;				//	実在/合計区分

			case MTab_Select.Items.Selected of
                // ------------------
                //	    実在時
                // ------------------
				0:
				begin
					ParamByName('Gcode')    .AsInteger  :=	StrToIntDef(ECode.Text,0);	//	外部ｺｰﾄﾞ
// <013>					ParamByName('SaiCode')  .AsString	:=	'';					//	細目ｺｰﾄﾞ
					ParamByName('SaiCode')  .AsString	:=	'0';					    //	細目ｺｰﾄﾞ<013>
				end;
                // ------------------
                //	    細目時
                // ------------------
				1:
				begin
					ParamByName('Gcode')    .AsInteger  :=	KasanCode;			            //	外部ｺｰﾄﾞ
					ParamByName('SaiCode')  .AsString	:=	fnSaimokuSetAttr(1,ECode.Text,	//	細目ｺｰﾄﾞ    // <16桁対応 !!!>
				                                            wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);
                end;
                // ------------------
                //	    合計時
                // ------------------
				2:
				begin
					ParamByName('Gcode')    .AsInteger  :=	StrToIntDef(ECode.Text,0);	//	外部ｺｰﾄﾞ
// <013>					ParamByName('SaiCode')  .AsString   :=	'';					//	細目ｺｰﾄﾞ
					ParamByName('SaiCode')  .AsString   :=	'0';					    //	細目ｺｰﾄﾞ<013>
				end;
			end;

			ParamByName('Rensou')       .AsString   :=	fnDelCRLF(ERen.Text);					//	連想ｼﾝﾎﾞﾙ <DKAI>
			ParamByName('SeiName')      .AsString	:=	fnDelCRLF(ELName.Text);				    //	正式名称  <DKAI>
			ParamByName('KanName')      .AsString	:=	fnDelCRLF(ESName.Text);                 //	簡略名称  <DKAI>
			ParamByName('BunCode')      .AsInteger	:=	Trunc(EBunCode.Value);		            //	分析ｺｰﾄﾞ
			iCharCode								:=	Trunc(ESeikakuCode.Value);	            //	性格ｺｰﾄﾞ
			ParamByName('SeikakuCode')  .AsInteger	:=	Trunc(ESeikakuCode.Value);	            //	性格ｺｰﾄﾞ
			ParamByName('TegataNO')     .AsInteger	:=	aDefaultSeikaku[iCharCode].Tegata;		//	手形番号入力区分
			ParamByName('TegataH_NO')   .AsInteger	:=	aDefaultSeikaku[iCharCode].H_Tegata;	//	手形番号必須入力区分
			ParamByName('TegataKanri')  .AsInteger	:=	aDefaultSeikaku[iCharCode].TegataNo;	//	手形管理NO入力区分
			ParamByName('H_TegataKanri').AsInteger	:=	aDefaultSeikaku[iCharCode].H_TegataNo;	//	手形管理NO必須入力区分

			if ( m_System = ACELINK ) then
			begin
				ParamByName('NoInput1')     .AsInteger	:=	aDefaultSeikaku[iCharCode].NoInput1;	//	番号１入力区分
				ParamByName('H_NoInput1')   .AsInteger	:=	aDefaultSeikaku[iCharCode].H_NoInput1;	//	番号１必須入力区分
				ParamByName('NoInput2')     .AsInteger	:=	aDefaultSeikaku[iCharCode].NoInput2;	//	番号２入力区分
				ParamByName('H_NoInput2')   .AsInteger	:=	aDefaultSeikaku[iCharCode].H_NoInput2;	//	番号２必須入力区分
			end;

			if ( iHantei = ZITSUZAI ) then
			begin
//--- <125> Mod St
//                //--- <059> ST ---
//                if ( Trunc(EBunCode.Value) = 52 ) then                          //  少数株主持分
//                begin
//                    ParamByName('YouBunCode').AsInteger	:=	8;					//	要約分析ｺｰﾄﾞ（8 = 引当金）
//                end
//                //--- <059> Ed ---
//                else
//                begin
//    				GetSKmkMA(BUNSEKI,Trunc(EBunCode.Value),iYouBun);			//	要約分析ｺｰﾄﾞ取得
//    				if ( iYouBun = 999 ) then
//    					ParamByName('YouBunCode').AsInteger	:=	0				//	要約分析ｺｰﾄﾞ
//    				else
//    					ParamByName('YouBunCode').AsInteger	:=	iYouBun;		//	要約分析ｺｰﾄﾞ
//                end;
                if not SetYouBun(BUNSEKI,Trunc(EBunCode.Value),iYouBun) then
                begin
                    MDataModule.Rollback(dbCorp_Select);
                    DmqData.Close;
                    DmqData.Free;
                    Exit;
                end;
                ParamByName('YouBunCode').AsInteger := iYouBun;
//--- <125> Mod Ed

                // ------------------
			    //	消費税
                // ------------------
				ParamByName('TaxKbn')   .AsInteger  :=  DfRec.TaxKbn;			//	消費税科目区分

				case DfRec.TaxKbn of
					1:	ParamByName('UriCode')  .AsInteger	:=	DfRec.TaxCode;	//	売上消費税ｺｰﾄﾞ
					2:	ParamByName('ShiCode')  .AsInteger	:=	DfRec.TaxCode;	//	仕入消費税ｺｰﾄﾞ
				end;
			end;

            // ------------------
   	    	//	採用区分
            // ------------------
            ParamByName('StartDate').AsDateTime :=  sSDate;  // 適用期間（自）
            ParamByName('EndDate')  .AsDateTime :=  sEDate;  // 適用期間（至）　
            ParamByName('Attr')     .AsInteger  :=  wkKmk.SaimokukZoku;
            ParamByName('Digit')    .AsInteger  :=  wkKmk.SaimokuKeta;

            ParamByName('BmnUse')           .AsInteger  :=  Trunc(EBmnUse.Value);   // 部門採用区分

            // ｾｸﾞﾒﾝﾄ採用区分
            for iLoop := 1 to 10 do
                ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=
                    Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse' + IntToStr(iLoop))).Value);

            // ﾌﾟﾛｼﾞｪｸﾄ採用区分
            for iLoop := 1 to 10 do
                ParamByName('PrjUse'+IntToStr(iLoop)).AsInteger :=
                    Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(iLoop))).Value);

			if ( wkBank.CodeZoku <= 1 ) then
			begin
				if ( EBankCodeN.InputFlag = TRUE ) then
//					ParamByName('Bank'	).AsString	:=	''
                    ParamByName('Bank'	).AsFloat	:=	0
				else
				begin
                    //	銀行ｺｰﾄﾞを数値から文字へ
					sBankCode	                    :=	IntToStr(Trunc(EBankCodeN.Value));
					ParamByName('Bank') .AsFloat	:=	gfnGetBank_NCODE(ComArea.SetDspCodeAttr(sBankCode,16,1));
				end;
				EBankCodeN.InputFlag	:=	TRUE;
			end
			else
			begin
				ParamByName('Bank') .AsFloat	:=	gfnGetBank_NCODE(ComArea.SetDspCodeAttr((EBankCodeT.Text),wkBank.CodeKeta,2));
			end;

            // ------------------
			//	集計情報
            // ------------------
			ParamByName('SeiZan')   .AsInteger  :=	Trunc(ESeiZanCode.Value);	//	正残区分
			ParamByName('BsPl')     .AsInteger	:=	DfRec.BPKbn;				//	ＢＳ／ＰＬ区分
			ParamByName('Kisyu')    .AsInteger	:=	Trunc(EKisyuCode.Value);	//	期首残区分
			ParamByName('DspPri')   .AsInteger	:=	Trunc(EDPCode.Value);		//	表示／印刷不可区分
			ParamByName('Hiritsu')  .AsInteger	:=	Trunc(EHiritsuCode.Value);	//	比率科目区分
			ParamByName('KariKuri') .AsFloat	:=		                        //	借方資金繰コード
                gfnGetSKmkMA_NCODE(Trunc(EKariCode.Value), SHIKINGURI);         //  <055>
			ParamByName('KashiKuri').AsFloat	:=	                            //	貸方資金繰コード
                gfnGetSKmkMA_NCODE(Trunc(EKashiCode.Value), SHIKINGURI);        //  <055>

            // ------------------
			//	入力条件
            // ------------------
			ParamByName('ShiwaInp') .AsInteger	:=	Trunc(EShiwakeCode.Value);	//	仕訳入力区分

            //	期日入力区分
			case Trunc(EKijitsuCode.Value) of
				0:	//	入力なし
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	0;	            //	期日入力区分(0:入力なし)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	            //	期日必須入力区分(0:任意入力)
				end;
				1:	//	正残側(任意)
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	1;	            //	期日入力区分(1:正残側のみ)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	            //	期日必須入力区分(0:任意入力)
				end;
				2:	//	正残側(必須)
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	1;	            //	期日入力区分(1:正残側のみ)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	1;	            //	期日必須入力区分(1:必須入力)
				end;
				3:	//	貸借入力(任意)
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	2;	            //	期日入力区分(2:貸借入力)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	            //	期日必須入力区分(0:任意入力)
				end;
				4:	//	貸借入力(必須)
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	2;	            //	期日入力区分(2:貸借入力)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	1;	            //	期日必須入力区分(1:必須入力)
				end;
				5:	//	負残側(任意)
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	3;	            //	期日入力区分(3:負残側のみ)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	0;	            //	期日必須入力区分(0:任意入力)
				end;
				6:	//	負残側(必須)
				begin
					ParamByName('KijitsuInp')   .AsInteger	:=	3;	            //	期日入力区分(3:負残側のみ)
					ParamByName('KijitsuH_Inp') .AsInteger	:=	1;	            //	期日必須入力区分(1:必須入力)
				end;
			end;

			if ( m_System = MJSLINK ) then
			begin
                // ------------------
                //  番号1入力
                // ------------------
				case Trunc(ENumber1.Value) of
					0:	//	入力なし
					begin
						ParamByName('NoInput1')     .AsInteger :=	0;	        //	番号1入力区分	 (0:入力なし)
						ParamByName('H_NoInput1')   .AsInteger :=	0;	        //	番号1必須入力区分(0:任意入力)
					end;
					1:	//	正残側(任意)
					begin
						ParamByName('NoInput1')     .AsInteger :=	1;	        //	番号1入力区分	 (1:正残側のみ)
						ParamByName('H_NoInput1')   .AsInteger :=	0;	        //	番号1必須入力区分(0:任意入力)
					end;
					2:	//	正残側(必須)
					begin
						ParamByName('NoInput1')     .AsInteger :=	1;	        //	番号1入力区分	 (1:正残側のみ)
						ParamByName('H_NoInput1')   .AsInteger :=	1;	        //	番号1必須入力区分(1:必須入力)
					end;
					3:	//	貸借入力(任意)
					begin
						ParamByName('NoInput1')     .AsInteger :=	2;	        //	番号1入力区分	 (2:貸借入力)
						ParamByName('H_NoInput1')   .AsInteger :=	0;	        //	番号1必須入力区分(0:任意入力)
					end;
					4:	//	貸借入力(必須)
					begin
						ParamByName('NoInput1')     .AsInteger :=	2;	        //	番号1入力区分	 (2:貸借入力)
						ParamByName('H_NoInput1')   .AsInteger :=	1;	        //	番号1必須入力区分(1:必須入力)
					end;
					5:	//	負残側(任意)
					begin
						ParamByName('NoInput1')     .AsInteger :=	3;	        //	番号1入力区分	 (3:負残側のみ)
						ParamByName('H_NoInput1')   .AsInteger :=	0;	        //	番号1必須入力区分(0:任意入力)
					end;
					6:	//	負残側(必須)
					begin
						ParamByName('NoInput1')     .AsInteger :=	3;	        //	番号1入力区分	 (3:負残側のみ)
						ParamByName('H_NoInput1')   .AsInteger :=	1;	        //	番号1必須入力区分(1:必須入力)
					end;
				end;

                // ------------------
                //  番号2入力
                // ------------------
				case Trunc(ENumber2.Value) of
					0:	//	入力なし
					begin
						ParamByName('NoInput2')     .AsInteger :=	0;	        //	番号2入力区分	 (0:入力なし)
						ParamByName('H_NoInput2')   .AsInteger :=	0;	        //	番号2必須入力区分(0:任意入力)
					end;
					1:	//	正残側(任意)
					begin
						ParamByName('NoInput2')     .AsInteger :=	1;	        //	番号2入力区分	 (1:正残側のみ)
						ParamByName('H_NoInput2')   .AsInteger :=	0;	        //	番号2必須入力区分(0:任意入力)
					end;
					2:	//	正残側(必須)
					begin
						ParamByName('NoInput2')     .AsInteger :=	1;	        //	番号2入力区分	 (1:正残側のみ)
						ParamByName('H_NoInput2')   .AsInteger :=	1;	        //	番号2必須入力区分(1:必須入力)
					end;
					3:	//	貸借入力(任意)
					begin
						ParamByName('NoInput2')     .AsInteger :=	2;	        //	番号2入力区分	 (2:貸借入力)
						ParamByName('H_NoInput2')   .AsInteger :=	0;	        //	番号2必須入力区分(0:任意入力)
					end;
					4:	//	貸借入力(必須)
					begin
						ParamByName('NoInput2')     .AsInteger :=	2;	        //	番号2入力区分	 (2:貸借入力)
						ParamByName('H_NoInput2')   .AsInteger :=	1;	        //	番号2必須入力区分(1:必須入力)
					end;
					5:	//	負残側(任意)
					begin
						ParamByName('NoInput2')     .AsInteger :=	3;	        //	番号2入力区分	 (3:負残側のみ)
						ParamByName('H_NoInput2')   .AsInteger :=	0;	        //	番号2必須入力区分(0:任意入力)
					end;
					6:	//	負残側(必須)
					begin
						ParamByName('NoInput2')     .AsInteger :=	3;	        //	番号2入力区分	 (3:負残側のみ)
						ParamByName('H_NoInput2')   .AsInteger :=	1;	        //	番号2必須入力区分(1:必須入力)
					end;
				end;

				ParamByName('EInpKbn1') .AsInteger  :=  EDspNumber1.AsInteger;	                // 番号1初期表示区分
				ParamByName('EInpKbn2') .AsInteger  :=  EDspNumber2.AsInteger;	                // 番号2初期表示区分
				ParamByName('EInpKbn3') .AsInteger  :=  ETotalKbn.AsInteger;	                // 同一番号区分

                if ( m_NumberUseKbn <> 0 ) and ( Panel_Number.Visible ) then
                begin
    				ParamByName('NoName1')  .AsInteger  :=  m_NameList[ComboNumber1.ItemIndex].No;	// 番号1名称No
    				ParamByName('NoName2')  .AsInteger  :=  m_NameList[ComboNumber2.ItemIndex].No;	// 番号2名称No
                end;
			end;

			ParamByName('Tekiyou')  .AsInteger		:=	Trunc(ETekiCode.Value);		            //	固定摘要必須入力
			ParamByName('TekiBun')  .AsFloat		:=	gfnGetTekiMA_NCODE(Trunc(ETekiyouBunrui.Value));            //	摘要分類コード
			ParamByName('Yusen')    .AsInteger		:=	Trunc(EShikuriCode.Value);	            //	資金繰コード優先区分
			ParamByName('Syosuten') .AsInteger		:=	Trunc(ESyousuten.Value);	            //	小数点桁数<057>

            //<117>ADD↓
            // ------------------
			//	分類
            // ------------------
            ParamByName('BunruiNCode1' ).AsString := FormatFloat('0', m_Bunrui[1].NCode);
            ParamByName('BunruiNCode2' ).AsString := FormatFloat('0', m_Bunrui[2].NCode);
            ParamByName('BunruiNCode3' ).AsString := FormatFloat('0', m_Bunrui[3].NCode);
            ParamByName('BunruiNCode4' ).AsString := FormatFloat('0', m_Bunrui[4].NCode);
            ParamByName('BunruiNCode5' ).AsString := FormatFloat('0', m_Bunrui[5].NCode);
            ParamByName('BunruiNCode6' ).AsString := FormatFloat('0', m_Bunrui[6].NCode);
            ParamByName('BunruiNCode7' ).AsString := FormatFloat('0', m_Bunrui[7].NCode);
            ParamByName('BunruiNCode8' ).AsString := FormatFloat('0', m_Bunrui[8].NCode);
            ParamByName('BunruiNCode9' ).AsString := FormatFloat('0', m_Bunrui[9].NCode);
            ParamByName('BunruiNCode10').AsString := FormatFloat('0', m_Bunrui[10].NCode);
            //<117>ADD↑

            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
  				MDataModule.Rollback (dbCorp_Select);							//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);						// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			if (iMasKbn = 2) then
				TableHistory.KmkMA_Sai	:=	TABLE_IN_UPDATE
			else
				TableHistory.KmkMA_Kan	:=	TABLE_IN_UPDATE;
		end;

// ------------------------------------
//	    勘定科目詳細情報(KmkMB)
// ------------------------------------
		Close;
		SQL.Clear;
		SQL.Add('INSERT INTO KmkMB (        '); //	勘定科目詳細情報
        SQL.Add('        NCode              ');	//	内部ｺｰﾄﾞ
        SQL.Add('       ,CNCode             '); //  科目別補助内部ｺｰﾄﾞ
		SQL.Add('       ,MasterKbn          ');	//	ﾏｽﾀ区分
		SQL.Add('       ,SumKbn             ');	//	実在/合計区分
		SQL.Add('       ,FixChgRate         ');	//	変動費比率

        // --------------------
		//	    出力情報
        // --------------------
		SQL.Add('       ,MinusKbn           ');	//	マイナス印刷区分
		SQL.Add('       ,SagakuKbn          ');	//	差額印刷区分
		SQL.Add('       ,ProfitKbn          ');	//	利益印刷区分

        // --------------------
		//      実在時
        // --------------------
		if ( MTab_Select.Items.Selected = 0 ) then
			SQL.Add('       ,OutKbn1            ');	//	集計単位区分

		SQL.Add('       ,MTekiPrn           ');	//	元帳摘要欄起票者印字区分
		SQL.Add('       ,MinusName          ');	//	マイナス変換科目名
		SQL.Add('       ,DecoKbn            ');	//	装飾区分

        // --------------------
		//	電子帳簿
        // --------------------
		SQL.Add('       ,HisKbn             ');	//	履歴管理区分

		// 実在科目ｺﾋﾟｰ全ての時
		if ( MTab_Select.Items.Selected = 0 ) and ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
		begin
            // --------------------
			//      比率
            // --------------------
			SQL.Add('       ,CostRate           ');	//	個別原価率
            // --------------------
			//      電子帳簿
            // --------------------
// <019>			SQL.Add('       ,EBook1Kbn          ');	//	第1補助電子帳簿採用区分
// <019>			SQL.Add('       ,EBook2Kbn          ');	//	第2補助電子帳簿採用区分
            // --------------------
			//      公益法人
            // --------------------
			SQL.Add('       ,CharCode2          ');	//	性格ｺｰﾄﾞ2
		end
        //--- <058> St -----
        else if ( MTab_Select.Items.Selected = 2 ) and ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
        begin
			SQL.Add('       ,CharCode2          ');	//	性格ｺｰﾄﾞ2
        end;
        //--- <058> Ed -----

    	SQL.Add('       ,UpdTantoNCode      ');	//  更新担当者内部ｺｰﾄﾞ<080>

		SQL.Add(') Values (                 ');
		SQL.Add('        :Ncode             ');	//	内部ｺｰﾄﾞ
        SQL.Add('       ,:CNCode            '); //  科目別補助内部ｺｰﾄﾞ
		SQL.Add('       ,:MasKbn            ');	//	ﾏｽﾀ区分
		SQL.Add('       ,:SumKbn            ');	//	実在/合計区分
		SQL.Add('       ,:Hendouhi          ');	//	変動費比率
        // --------------------
		//	出力情報
        // --------------------
		SQL.Add('       ,:Mainasu           ');	//	マイナス印刷区分
		SQL.Add('       ,:Sagaku            ');	//	差額印刷区分
		SQL.Add('       ,:Rieki             ');	//	利益印刷区分

        // --------------------
		//      実在時
        // --------------------
		if ( MTab_Select.Items.Selected = 0 ) then
			SQL.Add('       ,:AddUnit           ');	//	集計単位区分

		SQL.Add('       ,:Kihyousya         ');	//	元帳摘要欄起票者印字区分
		SQL.Add('       ,:MainaName         ');	//	マイナス変換科目名
		SQL.Add('       ,:Sousyoku          ');	//	装飾区分
        // --------------------
		//	    電子帳簿
        // --------------------
		SQL.Add('       ,:Rireki            ');	//	履歴管理区分

		// 実在科目ｺﾋﾟｰ全ての時
		if ( MTab_Select.Items.Selected = 0 ) and ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
		begin
			// 比率
			SQL.Add('       ,:CR                ');	//	個別原価率
			// 電子帳簿
// <019>			SQL.Add('       ,:EB1K              ');	//	第1補助電子帳簿採用区分
// <019>			SQL.Add('       ,:EB2K              ');	//	第2補助電子帳簿採用区分
			// 公益法人
			SQL.Add('       ,:CC2               ');	//	性格ｺｰﾄﾞ2
		end
        //--- <058> St -----
        else if ( MTab_Select.Items.Selected = 2 ) and ( m_F8CopyFlag = True ) and ( m_DLGCopyInfo.Choice = False ) then
        begin
            SQL.Add('       ,:CC2               ');	//	性格ｺｰﾄﾞ2
        end;
        //--- <058> Ed -----

    	SQL.Add('       ,:UpdTantoNCode     ');	//  更新担当者内部ｺｰﾄﾞ<080>

		SQL.Add(')                          ');

		ParamByName('Ncode')    .AsFloat		:=	iNCode;					    //	内部ｺｰﾄﾞ
        ParamByName('CNCode')   .AsFloat        :=  iCNCode;                    //  科目別補助内部ｺｰﾄﾞ
		ParamByName('MasKbn')   .AsInteger		:=	iMasKbn;					//	ﾏｽﾀ区分
		ParamByName('SumKbn')   .AsInteger		:=	iSumKbn;					//	実在/合計区分

        // --------------------
        //	集計情報
        // --------------------
		ParamByName('Hendouhi') .AsFloat		:=	EHendouhi.Value;			//	変動費比率
        // --------------------
		//  出力情報
        // --------------------
		ParamByName('Mainasu')  .AsInteger		:=	Trunc(EMainasuCode.Value);	//	マイナス印刷区分
		ParamByName('Sagaku')   .AsInteger		:=	Trunc(ESagakuCode.Value);	//	差額印刷区分
		ParamByName('Rieki')    .AsInteger		:=	Trunc(ERiekiCode.Value);	//	利益印刷区分

        // --------------------
		//      実在時
        // --------------------
		if ( MTab_Select.Items.Selected = 0 ) then
		begin
			// 分析ｺｰﾄﾞが｢0:非会計科目｣の時
			if ( EBunCode.AsInteger = 0 ) then
				ParamByName('AddUnit').AsInteger :=	EAddUnit.AsInteger			//	集計単位区分
			// 分析ｺｰﾄﾞが｢0:非会計科目｣以外の時
			else
				ParamByName('AddUnit').AsInteger := 0;							//	集計単位区分(0:指定した単位で集計)
		end;

		ParamByName('Kihyousya')    .AsInteger	:=	Trunc(EKihyousya.Value);	//	元帳摘要欄起票者印字区分
		ParamByName('MainaName')    .AsString	:=	EMainaName.Text;			//	マイナス変換科目名
		ParamByName('Sousyoku')     .AsInteger	:=	Trunc(ESousyokuCode.Value);	//	装飾区分
        // --------------------
		//	電子帳簿
        // --------------------
		ParamByName('Rireki')       .AsInteger	:=	Trunc(ERirekiKbnCode.Value);//	履歴管理区分

		// 実在科目ｺﾋﾟｰ全ての時
		if ( MTab_Select.Items.Selected = 0 ) and ( m_F8CopyFlag = TRUE ) and ( m_DLGCopyInfo.Choice = FALSE ) then
		begin
            // --------------------
			// 比率
            // --------------------
			ParamByName('CR')   .AsInteger  :=  m_CopyInfo.CostRate;		    //	個別原価率
            // --------------------
			// 電子帳簿
            // --------------------
// <019>			ParamByName('EB1K') .AsInteger  :=  m_CopyInfo.EBook1Kbn;		    //	第1補助電子帳簿採用区分
// <019>			ParamByName('EB2K') .AsInteger  :=  m_CopyInfo.EBook2Kbn;		    //	第2補助電子帳簿採用区分
            // --------------------
			// 公益法人
            // --------------------
			ParamByName('CC2')  .AsInteger  :=  m_CopyInfo.CharCD2;		        //	性格ｺｰﾄﾞ2
		end
        //--- <058> St -----
        else if ( MTab_Select.Items.Selected = 2 ) and ( m_F8CopyFlag = True ) and ( m_DLGCopyInfo.Choice = False ) then
        begin
			ParamByName('CC2')  .AsInteger  :=  m_CopyInfo.CharCD2;		        //	性格ｺｰﾄﾞ2
        end;
        //--- <058> Ed -----

        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);							// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴
		if (iMasKbn = 2) then	//	細目時
			TableHistory.KmkMB_Sai	:=	TABLE_IN_UPDATE
		else
			TableHistory.KmkMB_Kan	:=	TABLE_IN_UPDATE;

// <063> ADD start
    { 親会社から子会社への同期取り(同期ｽﾄｱﾄﾞ呼出) }
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
		begin
											// KMKMA同期
			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
			begin                           // ﾛｰﾙﾊﾞｯｸ
				MDataModule.Rollback (dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
				DmqData.Close;
				DmqData.Free;
    	        Exit;
			end;
											// KMKMB同期
// <068> MOD start
//	        if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
	        if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
    	    begin                           // ﾛｰﾙﾊﾞｯｸ
        		MDataModule.Rollback (dbCorp_Select);
	            ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
    	        DmqData.Close;
        	    DmqData.Free;
	            Exit;
    	    end;
			DmqData.Close;
    										// 子会社(自会社)DBとMQueryの接続
		   	MDataModule.SetDBInfoToQuery (dbCorp_Select, DmqData);
    	end;

		{ ｸﾞﾙｰﾌﾟ会計を採用している場合、全子会社にRELを作成 }
		if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) then
		begin								// 全子会社にRELを作成
			if not fnAllCorpRelation(iNCode, iCNCode) then
			begin							// ﾛｰﾙﾊﾞｯｸ
				MDataModule.Rollback (dbCorp_Select);
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
				DmqData.Close;
				DmqData.Free;
    	        Exit;
			end;
		end;
// <063> ADD end

        //	細目時は加算体系ﾏｽﾀに追加しない
		if ( MTab_Select.Items.Selected <> 1 ) and ( bNodeNilFlag = FALSE ) then
		begin
		//	科目加算体系ﾏｽﾀ(KmkTree)
			//	登録No取得
			Close;
			SQL.Clear;
			SQL.Add('SELECT                         ');
			SQL.Add('    MAX(EntNo)                 ');	//	登録No最大値
			SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1            ');
			SQL.Add('  AND SumNCode  = :SakiCode    ');	//	加算先内部ｺｰﾄﾞ
			ParamByName('SakiCode').AsFloat 	:= giTaihi_OyaNCode;

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
				iWork	:=	GetFld('MAX(KmkTree.EntNo)').AsInteger;
				iEntNo	:=	Trunc(iWork / 100) * 100;
				if ( iEntNo = 0 ) then
					iEntNo	:=	100
				else
					iEntNo	:=	iEntNo + 100;
			end;

			Close;
			SQL.Clear;
			SQL.ADD('INSERT INTO KmkTree (      '); //	科目加算体系ﾏｽﾀ
			SQL.ADD('        MasterKbn          ');	//	ﾏｽﾀ区分
			SQL.ADD('       ,SumNCode           ');	//	加算先内部ｺｰﾄﾞ
			SQL.ADD('       ,EntNo              ');	//	登録No
			SQL.ADD('       ,BasedNCode         ');	//	加算元内部ｺｰﾄﾞ
			SQL.ADD('       ,Masterkbn2         ');
			SQL.ADD('       ,UpdTantoNCode      '); //  更新担当者内部ｺｰﾄﾞ<080>
			SQL.ADD(') VALUES (                 ');
			SQL.ADD('        1                  ');	//	ﾏｽﾀ区分(勘定科目:1)
			SQL.ADD('       ,:SakiCode          ');	//	加算先内部ｺｰﾄﾞ
			SQL.ADD('       ,:EntNo             ');	//	登録No
			SQL.ADD('       ,:MotoCode          ');	//	加算元内部ｺｰﾄﾞ
			SQL.ADD('       ,1                  ');	//	ﾏｽﾀ区分(勘定科目:1)
			SQL.ADD('       ,:UpdTantoNCode     '); //  更新担当者内部ｺｰﾄﾞ<080>
			SQL.ADD(')                          ');	//	ﾏｽﾀ区分(勘定科目:1)

			ParamByName('SakiCode') .AsFloat	    :=  giTaihi_OyaNCode;
			ParamByName('EntNo')    .AsInteger		:=	iEntNo;		//	登録NO
			ParamByName('MotoCode') .AsFloat		:=	iNCode;	    //	加算元内部ｺｰﾄﾞ
            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				MDataModule.Rollback (dbCorp_Select);							//	ﾛｰﾙﾊﾞｯｸ(破棄)
				ExecParentDBTran(GRP_PARENTDB_ROLLBACK);						// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
				DmqData.Close;
				DmqData.Free;
				Exit;
			end;

			//	ﾃｰﾌﾞﾙ更新履歴
			TableHistory.KmkTree_Kan	:=	TABLE_IN_UPDATE;
		end;
    end;

	//	マスタ付箋管理情報(MFusenInfo)
	case MTab_Select.Items.Selected of
		0:	iSelect		:=	ZITSUZAI;	//	実在時
		1:	iSelect		:=	SAIMOKU;	//	細目時
		2:	iSelect		:=	GOUKEI;		//	合計時
	end;

    //	先頭からSPACEまでの桁数COUNT
	Pos	:= MJSHanPos(' ', MTab_Select.BorderCaption);
	if ( Pos <> 0 ) then
        //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
		iOyaCode	:=	StrToInt(MJSHanCopy(MTab_Select.BorderCaption, 1, Pos-1));

	if ( bNodeNilFlag = FALSE ) then
	begin
	    // Selectedのセット
		for iLoop := 0 to TreeView.Items.Count-1 do
	    begin
			wRec	:=	TreeView.Items[iLoop].Data;
   			if ( wRec.GCode = iOyaCode ) and ( wRec.MasKbn = 1 ) then
	   	    begin
				wkNode	:=	TreeView.Items[iLoop];
				//	Node挿入処理
				New(wkRec);
				wkRec.NCode		:=	iNCode;		                                //	内部ｺｰﾄﾞ
                wkRec.CNCode    :=  iCNCode;                                    //  科目別補助内部ｺｰﾄﾞ

                if ( iMasKbn = 1 ) then
                begin
    				wkRec.GCode		:=	StrToIntDef(ECode.Text,0);		                    //	外部･細目ｺｰﾄﾞ
// <013>                    wkRec.SubCode   :=  '';
                    wkRec.SubCode   :=  '0';    // <013>
                end
                else
                begin
                    wkRec.GCode		:=	iOyaCode;		                        //	外部･細目ｺｰﾄﾞ
                    wkRec.SubCode   :=  ECode.Text;
                end;
				wkRec.Kbn		:=	iSumKbn;				                    //	実在/合計区分
				wkRec.MasKbn	:=	iMasKbn;				                    //	ﾏｽﾀ区分
				wkRec.KoteiKbn	:=	0;						                    //	固定体系区分
				wkRec.Name		:=	ESName.Text;			                    //	簡略名称
				wkRec.AddKbn	:=  0;						                    //	加算区分
				wkRec.ChildKbn	:=	FALSE;
				wkRec.NotAdd	:=	1;
                wkRec.Syokuchi  :=  0;
                wkRec.CodeAttr  :=  iCodeAttr;
                wkRec.CodeDigit :=  iCodeDigit;

				if ( iMasKbn = 2 ) then
                begin
                    fnSubNCodeCheck(KasanCode,fnSaimokuSetAttr(1,ECode.Text,
                                                               iCodeAttr, iCodeDigit),
                                    wkRec.NCode,wkRec.Syokuchi);

				    sDspName := MakeDspString_Sai(wkRec.SubCode,GetSousyoku(ESName.Text,ESousyokuCode.AsInteger),iCodeAttr,iCodeDigit);
				    CNode 	 := TreeView.Items.AddChildobject(wkNode,sDspName,wkRec);
                end
                else
                begin
                    sDspName := MakeDspString(wkRec.GCode,GetSousyoku(ESName.Text,ESousyokuCode.AsInteger));
				    CNode 	 := TreeView.Items.AddChildobject(wkNode,sDspName,wkRec);
                end;

				case MTab_Select.Items.Selected of
                    // --------------------
                    //	    実在時
                    // --------------------
					0:
					begin
						CNode.ImageIndex    :=  2;
						Cnode.SelectedIndex :=  8;
					end;
                    // --------------------
                    //	    細目時
                    // --------------------
					1:
					begin
						CNode.ImageIndex    :=  3;
						Cnode.SelectedIndex :=  10;
			        end;
                    // --------------------
                    //	    合計時
                    // --------------------
					2:
					begin
						CNode.ImageIndex    :=  0;
						Cnode.SelectedIndex :=  1;
					end;
				end;
        	end;
		end;
	end
	else
	begin
		//	Node挿入処理
		New(wkRec);
		wkRec.NCode		:=  iNCode;		                                //	内部ｺｰﾄﾞ
        wkRec.CNCode    :=  iCNCode;                                    //  科目別補助内部ｺｰﾄﾞ
        if ( iMasKbn = 1 ) then
        begin
            wkRec.GCode		:=	StrToIntDef(ECode.Text,0);		                    //	外部･細目ｺｰﾄﾞ
// <013>            wkRec.SubCode   :=  '';
            wkRec.SubCode   :=  '0';    // <013>
        end
        else
        begin
            wkRec.GCode		:=	iOyaCode;		                        //	外部･細目ｺｰﾄﾞ
            wkRec.SubCode   :=  ECode.Text;
        end;
		wkRec.Kbn		:=	iSumKbn;				                    //	実在/合計区分
		wkRec.MasKbn	:=	iMasKbn;				                    //	ﾏｽﾀ区分
		wkRec.KoteiKbn	:=	0;						                    //	固定体系区分
		wkRec.Name		:=	ESName.Text;			                    //	簡略名称
		wkRec.AddKbn	:=  0;						                    //	加算区分
		wkRec.ChildKbn	:=	FALSE;
		wkRec.NotAdd	:=	0;
        wkRec.Syokuchi  :=  0;
        wkRec.CodeAttr  :=  iCodeAttr;
        wkRec.CodeDigit :=  iCodeDigit;

		if ( iMasKbn = 2 ) then
            fnSubNCodeCheck(KasanCode,fnSaimokuSetAttr(1,ECode.Text,
                                                               iCodeAttr, iCodeDigit),
                                    wkRec.NCode,wkRec.Syokuchi);

		sDspName := MakeDspString(wkRec.GCode,GetSousyoku(ESName.Text,ESousyokuCode.AsInteger));
		CNode	 := TreeView.Items.AddChildobject(nil,sDspName,wkRec);

		case MTab_Select.Items.Selected of
            // --------------------
            //	    実在時
            // --------------------
			0:
			begin
				CNode.ImageIndex    :=  2;
				Cnode.SelectedIndex :=  8;
			end;
            // --------------------
            //	    合計時
            // --------------------
			2:
			begin
				CNode.ImageIndex    :=  0;
				Cnode.SelectedIndex :=  1;
			end;
		end;
	end;

	//	新規に移動
	Cnode.Selected := TRUE;

	DmqData.Close;
	DmqData.Free;
{
	if ( iSelect = SAIMOKU ) then
	begin
		DummyFlag	:=	FALSE;
		if ( KbnCheck(iNCode,DummyFlag,FALSE,OTHER) ) then		//	RollBack時TRUE
			Exit;
    end;
}
	if ( ECode.Enabled = TRUE ) then
		ECode.SetFocus;

	if ( iSelect <> SAIMOKU ) then
	begin
		gbKmkTree2Flag	:=	TRUE;
		m_NewFlag		:=	TRUE;
	end;

	// <100>ADD↓
	// 出力順序自動登録 構造体設定
	if (iSelect <> SAIMOKU) and (Trunc(EBunCode.Value) <> 0) then
	begin
		m_NewFlag_J	:= True;	// 実在科目新規登録ﾌﾗｸﾞ
		SetLength(m_KmkOrder,Length(m_KmkOrder)+1);
		m_KmkOrder[Length(m_KmkOrder)-1].MasKbn 	:= iMasKbn;													//	ﾏｽﾀ区分
		m_KmkOrder[Length(m_KmkOrder)-1].NCode		:= iNCode;													//	内部ｺｰﾄﾞ
		m_KmkOrder[Length(m_KmkOrder)-1].GCode		:= wkRec.GCode;												//	外部ｺｰﾄﾞ
		m_KmkOrder[Length(m_KmkOrder)-1].Kbn		:= iSumKbn;													//	実在/合計区分
		m_KmkOrder[Length(m_KmkOrder)-1].SName		:= fnDelCRLF(ESName.Text);									//	簡略名称
		m_KmkOrder[Length(m_KmkOrder)-1].LName		:= fnDelCRLF(ELName.Text);									//	正式名称
		m_KmkOrder[Length(m_KmkOrder)-1].AnalyzeCode:= Trunc(EBunCode.Value);									//	分析ｺｰﾄﾞ
		m_KmkOrder[Length(m_KmkOrder)-1].Delete		:= False;													//	削除区分
		m_KmkOrder[Length(m_KmkOrder)-1].BPKbn		:= DfRec.BPKbn;												//	ＢＳ／ＰＬ区分
		m_KmkOrder[Length(m_KmkOrder)-1].BmnUse		:= Trunc(EBmnUse.Value);									//	部門採用
		m_KmkOrder[Length(m_KmkOrder)-1].SegUse1	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse1')).Value);	//	セグメント採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse2	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse2')).Value);	//	セグメント2採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse3	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse3')).Value);	//	セグメント3採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse4	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse4')).Value);	//	セグメント4採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse5	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse5')).Value);	//	セグメント5採用
		m_KmkOrder[Length(m_KmkOrder)-1].SegUse6	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse6')).Value);	//	セグメント6採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse7	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse7')).Value);	//	セグメント7採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse8	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse8')).Value);	//	セグメント8採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse9	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse9')).Value);	//	セグメント9採用
        m_KmkOrder[Length(m_KmkOrder)-1].SegUse10	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'ESegUse10')).Value);	//	セグメント10採用
        // <101>ADD↓
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse1  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse1')).Value);	//	プロジェクト1採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse2  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse2')).Value);	//	プロジェクト2採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse3  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse3')).Value);	//	プロジェクト3採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse4  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse4')).Value);	//	プロジェクト4採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse5  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse5')).Value);	//	プロジェクト5採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse6  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse6')).Value);	//	プロジェクト6採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse7  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse7')).Value);	//	プロジェクト7採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse8  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse8')).Value);	//	プロジェクト8採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse9  	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse9')).Value);	//	プロジェクト9採用
        m_KmkOrder[Length(m_KmkOrder)-1].PrjUse10 	:= Trunc(TMNumEdit(MJSFindCtrl(Self, 'EPrjUse10')).Value);	//	プロジェクト10採用
        // <101>ADD↑
	end;
	// <100>ADD↑

	MDataModule.Commit (dbCorp_Select);											//	ｺﾐｯﾄ(反映)
	ExecParentDBTran(GRP_PARENTDB_COMMIT);										// 親会社DBもｺﾐｯﾄ <063> ADD


    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----
end;

//************************************************************************
//*		Component		:	B_SCancel ( TMBitBtn )
//*							詳細画面の取消ﾎﾞﾀﾝを押した時
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_SCancelClick(Sender: TObject);
var
	SelectTab	:	Byte;
begin
    SelectTab := 0;

	case MTab_Select.Items.Selected of
		0: SelectTab := 2;	//	実在
		1: SelectTab := 3;	//	科目別補助
		2: SelectTab := 1;	//	合計
    end;

	if (fnSyousaiSetCheck(CHECK,SelectTab) = FALSE) then	//	HIS0031
	begin
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,1);
		if (MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType ) = mrYes) then
		begin
			SelectDsp(giUpDate_MasKbn, giUpDate_SumKbn, giUpDate_GCode, giUpDate_SCode);
		end
		else
			abort;
	end
	else
		SelectDsp(giUpDate_MasKbn, giUpDate_SumKbn, giUpDate_GCode, giUpDate_SCode);

	//	参照時		HIS0004
	if (giReferFlag = REFER) then
		Treeview.SetFocus
	else
	begin
		if (ECode.Enabled = TRUE) then
			ECode.SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	MI_GridDelete ( TMenuItem )
//*							Grid側でのPopUpからの削除
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_GridDeleteClick(Sender: TObject);
begin
	B_Delete_Click(Self);
end;

//************************************************************************
//*		Component		:	MI_Kasan ( TMenuItem )
//*							加算処理
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_KasanClick(Sender: TObject);
var
	DmqData		:	TMQuery;
	iLoop		:	Integer;
	wkRec		:	^TaikeiRec;
begin
	// -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	MDataModule.BeginTran (dbCorp_Select);						//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('UPDATE kmkTree SET             '); //	科目加算体系ﾏｽﾀ
		SQL.Add('    AddKbn = 0                 ');	//	加算区分(0:加算)
		SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
		SQL.Add('WHERE MasterKbn  = 1           '); //	ﾏｽﾀ区分(1:勘定科目)
		SQL.Add('  AND SumNCode   = :SakiCode   ');	//	加算先内部ｺｰﾄﾞ
		SQL.Add('  AND BasedNCode = :MotoCode   ');	//	加算元内部ｺｰﾄﾞ

		ParamByName('SakiCode'	).AsFloat		:=	grOya_Taikei.NCode;
		ParamByName('MotoCode'	).AsFloat		:=	grTaikei.NCode;
        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if (ExecSQL = FALSE) then
		begin
			ErrorMessageDsp(DmqData);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;
		//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
		TableHistory.KmkTree_Kan	:=	TABLE_IN_UPDATE;
	end;
	DmqData.Close;
    DmqData.Free;

    // ----------------
    //	    合計時
    // ----------------
	if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 ) then
	begin
		KaGenNode.ImageIndex	:=	0;
		KaGenNode.SelectedIndex	:=	1;
	end
    // ----------------
    //	    実在時
    // ----------------
	else if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 0 ) then
	begin
		KaGenNode.ImageIndex	:=	2;
		KaGenNode.SelectedIndex	:=	8;
	end
    // ----------------
    //	    細目時
    // ----------------
	else if ( grTaikei.MasKbn = 2 ) and ( grTaikei.Kbn = 0 ) then
	begin
		KaGenNode.ImageIndex	:=	3;
		KaGenNode.SelectedIndex	:=	10;
	end;

	//	変更したNodeへ移動
	for iLoop := 0 to TreeView.Items.Count-1 do
    begin
		wkRec	:=	TreeView.Items[iLoop].Data;
   		if ( wkRec.NCode  = grTaikei.NCode  ) and
           ( wkRec.CNCode = grTaikei.CNCode ) then
        begin
       		TreeView.Selected := TreeView.Items[iLoop];
			break;
   	    end;
   	end;

	grTaikei.AddKbn	:=	0;
	MDataModule.Commit (dbCorp_Select);											//	ｺﾐｯﾄ(反映)

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----


	if Not(( grTaikei.MasKbn = 2 ) and ( grTaikei.Kbn = 0 )) then	//	細目時以外
		gbKmkTree2Flag := TRUE;

end;

//************************************************************************
//*		Component		:	MI_Gensan ( TMenuItem )
//*							減算処理
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MI_GensanClick(Sender: TObject);
var
	DmqData		:	TMQuery;
	iLoop		:	Integer;
	wkRec		:	^TaikeiRec;
begin
	// -----<077> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<077> Add-Ed-----

	MDataModule.BeginTran (dbCorp_Select);						//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('UPDATE kmkTree SET             '); //	科目加算体系ﾏｽﾀ
		SQL.Add('    AddKbn = 1                 ');	//	加算区分(1:減算)
		SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');	//  更新担当者内部ｺｰﾄﾞ<080>
		SQL.Add('WHERE MasterKbn  = 1           '); //	ﾏｽﾀ区分(1:勘定科目)
		SQL.Add('  AND SumNCode   = :SakiCode   ');	//	加算先内部ｺｰﾄﾞ
		SQL.Add('  AND BasedNCode = :MotoCode   ');	//	加算元内部ｺｰﾄﾞ

		ParamByName('SakiCode'	).AsFloat		:=	grOya_Taikei.NCode;
		ParamByName('MotoCode'	).AsFloat		:=	grTaikei.NCode;
        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

		//	ｴﾗｰの判定
		if ( ExecSQL = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			MDataModule.Rollback (dbCorp_Select);								//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		//	ﾃｰﾌﾞﾙ更新履歴		HIS0011
		TableHistory.KmkTree_Kan	:=	TABLE_IN_UPDATE;
	end;
	DmqData.Close;
    DmqData.Free;

    // ----------------
    //	    合計時
    // ----------------
	if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 ) then
	begin
		KaGenNode.ImageIndex	:=	4;
		KaGenNode.SelectedIndex	:=	5;
	end
    // ----------------
    //	    実在時
    // ----------------
	else if ( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 0 ) then
	begin
		KaGenNode.ImageIndex	:=	6;
		KaGenNode.SelectedIndex	:=	9;
	end
    // ----------------
    //	    細目時
    // ----------------
	else if ( grTaikei.MasKbn = 2 ) and ( grTaikei.Kbn = 0 ) then
	begin
		KaGenNode.ImageIndex	:=	7;
		KaGenNode.SelectedIndex	:=	11;
	end;

	//	変更したNodeへ移動
	for iLoop := 0 to TreeView.Items.Count-1 do
    begin
		wkRec	:=	TreeView.Items[iLoop].Data;
   		if ( wkRec.NCode  = grTaikei.NCode  ) and
           ( wkRec.CNCode = grTaikei.CNCode ) then
        begin
       		TreeView.Selected := TreeView.Items[iLoop];
			break;
   	    end;
   	end;

	grTaikei.AddKbn	:=	1;
	MDataModule.Commit (dbCorp_Select);											//	ｺﾐｯﾄ(反映)

    // -----<077> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<077> Add-Ed-----

	if Not( (grTaikei.MasKbn = 2 ) and ( grTaikei.Kbn = 0 )) then	//	細目時以外
		gbKmkTree2Flag := TRUE;

end;

//************************************************************************
//*		Component		:	EBunCode ( TMNumEdit )
//*							検索ｴｸｽﾌﾟﾛｰﾗ表示（詳細分析ｺｰﾄﾞ）
//*		Event			:	OnArrowClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBunCodeArrowClick(Sender: TObject);
{
var
	MasWndParam	:	TJNTMasWndParam;
	Wnd			:	TJNTMasWndIF;
}
begin
{
	Wnd := TJNTMasWndIF.Create();
	Wnd.Init( pointer ( m_pRec ) );

	MasWndParam					:=	TJNTMasWndParam.CreateParam();
	MasWndParam.m_GCodeFD		:=	'GCode';			//コードフィールド名
	MasWndParam.m_RenCharFD		:=	'Renso';			//連想フィールド名
	MasWndParam.m_SimpleNameFD	:=	'SimpleName';		// 簡略名フィールド名
	MasWndParam.m_TableName		:=	'SKmkMA';  	    	// テーブル名
    MasWndParam.m_SQL_Where 	:=	'MASTERKBN = 10 AND SUMKBN = 0 AND RDelKbn = 0';	// Where句の条件
	MasWndParam.m_pApRec 		:=	pointer( m_pRec );	//ApRecのポインタ
	MasWndParam. m_iCodeLength	:=	6;					//　6桁//コード桁数
	MasWndParam. m_iCodeAttr	:=	0;					//　前０なし数字//コード属性

	if Wnd.DoDlg(MasWndParam) = mrOk then
	begin
		if MasWndParam.m_ExpRetCode = '' then
			EBunCode.Value	:=	0
		else
			EBunCode.Value	:=	StrToInt(MasWndParam.m_ExpRetCode);		//	ｺｰﾄﾞ
		LBunName.Caption	:=	MasWndParam.m_ExpRetText;					//	名称
	end;
	MasWndParam.Free();

	Wnd.Term();
	Wnd.Free();
}
end;

//**********************************************************************
//*		Proccess	:	要約分析名称ｾｯﾄ
//*		Name		:	H.Endo
//*		Date		:	2000/09/20
//*		Parameter	:	Code		:	要約分析ｺｰﾄﾞ
//*						Kbn			:	1:合計,2:実在,3:細目
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.SetYouBunName();
begin
	aYouBunName[0]	:=	'少数株主持分';
	aYouBunName[1]	:=	'流動性現預金';
	aYouBunName[2]	:=	'固定性預金';
	aYouBunName[3]	:=	'その他流動資産';
	aYouBunName[4]	:=	'有形固定資産';
	aYouBunName[5]	:=	'無形固定資産';
	aYouBunName[6]	:=	'流動負債';
	aYouBunName[7]	:=	'固定負債';
	aYouBunName[8]	:=	'引当金';
	aYouBunName[9]	:=	'資本金';
	aYouBunName[10]	:=	'剰余金';
	aYouBunName[11]	:=	'売上';
	aYouBunName[12]	:=	'売上原価';
	aYouBunName[13]	:=	'製造原価';
	aYouBunName[14]	:=	'販売費及び一般管理費';
	aYouBunName[15]	:=	'営業外収益';
	aYouBunName[16]	:=	'営業外費用';
	aYouBunName[17]	:=	'特別利益';
	aYouBunName[18]	:=	'特別損失';
	aYouBunName[19]	:=	'法人税等';
	aYouBunName[21]	:=	'事業主貸';
	aYouBunName[22]	:=	'事業主借';
	aYouBunName[23]	:=	'専従者給与';
	aYouBunName[24]	:=	'引当金戻入';
	aYouBunName[25]	:=	'引当金繰入';
	aYouBunName[99]	:=	'未処分項目';
end;

//************************************************************************
//*		Component		:	EKariCode ( TMNumEdit )
//*							検索ｴｸｽﾌﾟﾛｰﾗ表示（詳細借方資金繰ｺｰﾄﾞ）
//*		Event			:	OnArrowClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKariCodeArrowClick(Sender: TObject);
{
var
	MasWndParam	:	TJNTMasWndParam;
	Wnd			:	TJNTMasWndIF;
}
begin
{
	Wnd := TJNTMasWndIF.Create();
	Wnd.Init( pointer ( m_pRec ) );

	MasWndParam					:=	TJNTMasWndParam.CreateParam();
	MasWndParam.m_GCodeFD		:=	'GCode';			//コードフィールド名
	MasWndParam.m_RenCharFD		:=	'Renso';			//連想フィールド名
	MasWndParam.m_SimpleNameFD	:=	'SimpleName';		// 簡略名フィールド名
	MasWndParam.m_TableName		:=	'SKmkMA';	    	// テーブル名
    MasWndParam.m_SQL_Where 	:=	'MASTERKBN = 3 AND SUMKBN = 0 AND RDelKbn = 0';	// Where句の条件
	MasWndParam.m_pApRec 		:=	pointer( m_pRec );	//ApRecのポインタ
	MasWndParam. m_iCodeLength	:=	6;					//　6桁//コード桁数
	MasWndParam. m_iCodeAttr	:=	0;					//　前０なし数字//コード属性

	if Wnd.DoDlg(MasWndParam) = mrOk then
	begin
		if MasWndParam.m_ExpRetCode = '' then
			Exit
		else
			EKariCode.Value	:=	StrToInt(MasWndParam.m_ExpRetCode);		//	ｺｰﾄﾞ
		LKariName.Caption	:=	MasWndParam.m_ExpRetText;					//	名称
	end;
	MasWndParam.Free();

	Wnd.Term();
	Wnd.Free();
}    
end;

//************************************************************************
//*		Component		:	EKashiCode ( TMNumEdit )
//*							検索ｴｸｽﾌﾟﾛｰﾗ表示（詳細貸方資金繰ｺｰﾄﾞ）
//*		Event			:	OnArrowClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EKashiCodeArrowClick(Sender: TObject);
{
var
	MasWndParam	:	TJNTMasWndParam;
	Wnd			:	TJNTMasWndIF;
}
begin
{
	Wnd := TJNTMasWndIF.Create();
	Wnd.Init( pointer ( m_pRec ) );

	MasWndParam					:=	TJNTMasWndParam.CreateParam();
	MasWndParam.m_GCodeFD		:=	'GCode';			//コードフィールド名
	MasWndParam.m_RenCharFD		:=	'Renso';    		//連想フィールド名
	MasWndParam.m_SimpleNameFD	:=	'SimpleName';		// 簡略名フィールド名
	MasWndParam.m_TableName		:=	'SKmkMA';      		// テーブル名
    MasWndParam.m_SQL_Where 	:=	'MASTERKBN = 3 AND SUMKBN = 0 AND RDelKbn = 0';	// Where句の条件
	MasWndParam.m_pApRec 		:=	pointer( m_pRec );	//ApRecのポインタ
	MasWndParam. m_iCodeLength	:=	6;					//　6桁//コード桁数
	MasWndParam. m_iCodeAttr	:=	0;					//　前０なし数字//コード属性

	if Wnd.DoDlg(MasWndParam) = mrOk then
	begin
		if MasWndParam.m_ExpRetCode = '' then
			Exit
		else
			EKashiCode.Value	:=	StrToInt(MasWndParam.m_ExpRetCode);		//	ｺｰﾄﾞ
		LKashiName.Caption	:=	MasWndParam.m_ExpRetText;					//	名称
	end;
	MasWndParam.Free();

	Wnd.Term();
	Wnd.Free();
}    
end;

//************************************************************************
//*		Component		:	ETekiyouBunrui ( TMNumEdit )
//*							検索ｴｸｽﾌﾟﾛｰﾗ表示（詳細摘要分類）
//*		Event			:	OnArrowClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ETekiyouBunruiArrowClick(Sender: TObject);
{
var
	MasWndParam	:	TJNTMasWndParam;
	Wnd			:	TJNTMasWndIF;
}
begin
{
	Wnd := TJNTMasWndIF.Create();
	Wnd.Init( pointer ( m_pRec ) );

	MasWndParam					:=	TJNTMasWndParam.CreateParam();
	MasWndParam.m_GCodeFD		:=	'GCode';			//	コードフィールド名
	MasWndParam.m_RenCharFD		:=	'Renso';			//	連想フィールド名
	MasWndParam.m_TableName		:=	'TekiMA';			//	テーブル名
    MasWndParam.m_SimpleNameFD	:=	'TekiChar';			//	簡略名フィールド名
    MasWndParam.m_SQL_Where 	:=	'MASTERKBN = 61 AND SUMKBN = 1 AND RDelKbn = 0';	// Where句の条件
	MasWndParam.m_pApRec 		:=	pointer( m_pRec );	//	ApRecのポインタ
	MasWndParam. m_iCodeLength	:=	6;					//　6桁//コード桁数
	MasWndParam. m_iCodeAttr	:=	0;					//　前０なし数字//コード属性

	if Wnd.DoDlg(MasWndParam) = mrOk then
	begin
		if MasWndParam.m_ExpRetCode = '' then
			Exit
		else
			ETekiyouBunrui.Value	:=	StrToInt(MasWndParam.m_ExpRetCode);		//	ｺｰﾄﾞ
		LTekiyoubunrui.Caption	:=	MasWndParam.m_ExpRetText;					//	名称
	end;
	MasWndParam.Free();

	Wnd.Term();
	Wnd.Free();
}    
end;

//**********************************************************************
//*		Proccess	:	摘要分類名取得
//*		Name		:	H.Endo
//*		Date		:	2000/09/29
//*		Parameter	:	Code			:	摘要分類ｺｰﾄﾞ
//*						YouBun			:	要約分析ｺｰﾄﾞ
//*		Return		:	簡略名称
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.GetTekiMA(Code: Integer): String;
var
	DmqDataTeki		:	TMQuery;		//	固定摘要ﾏｽﾀ用のQuery
	sName		    :	String;			//	名称
begin

	DmqDataTeki := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDataTeki );		//	DBとMQueryの接続

	//	固定摘要ﾏｽﾀ(TekiMA)から摘要文字列を取得する
	with DmqDataTeki do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    TekiChar               ');
		SQL.Add('FROM TekiMA                ');
		SQL.Add('WHERE MasterKbn = 61       ');
		SQL.Add('  AND SumKbn    = 1        ');
        SQL.Add('  AND RDelKbn   = 0        ');
		SQL.Add('  AND GCode     = :Code    ');

		ParamByName('Code').AsString    :=  Format('%.16d',[StrToInt64(Trim(IntToStr(Code)))]);

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqDataTeki);
			DmqDataTeki.Close;
			DmqDataTeki.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			sName	:=	GetFld('TekiChar').AsString;
		end
		else
		begin
			sName	:=	'Null';
		end;
	end;

	DmqDataTeki.Close;
	DmqDataTeki.Free;

	Result	:=	sName;

end;

//************************************************************************
//*		Component		:	MComboBox ( TMComboBox )
//*							ComboBoxでEND･ESCｷｰは終了
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MComboBox_KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	//	ﾌﾟﾙﾀﾞｳﾝを閉じている時(CMChildKey後ｲﾍﾞﾝﾄがこなくなってしまったので、処理をCMChildKeyに移動)
{	if MComboBox.DroppedDown = FALSE then
	begin
		if (Key = VK_ESCAPE) or (Key = VK_END) then
		begin
		    Close();
			abort;
			exit;
		end;
	end;
}
// <KEY>
//	if (key = VK_RETURN) or (key = VK_TAB) then			// Enter Tab
//<050> ↓
{
	if (key = VK_RETURN) or
        ((key = VK_TAB) and (Shift = [])) then			// Enter Tab
}
    if (key = VK_RETURN) then
//<050> ↑
	begin
        MComboBox.DroppedDown :=  FALSE;    // <ESC>

		ComboChange();
		Treeview.SetFocus;
//hiro0706		MjsDispCtrl.MjsNextCtrl(Self);
		abort;
	end;

end;

//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							TreeViewでEND･ESCｷｰはComboBoxへ移動
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.TreeViewKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
{//ちょっと疑問の為コメント　hiro0706
	if (Key = VK_ESCAPE) or (Key = VK_END) then
    begin
		MComboBox.SetFocus;
		abort;
	end;
}
end;

//************************************************************************
//*		Component		:	MTab_Select ( TMTab )
//*							MTab_Selectで選択された時の表示/非表示の制御
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MTab_SelectChange(Sender: TObject);
var
	cNode		    :	TTreeNode;
	wkRec		    :	^TaikeiRec;
	sWork		    :	String;
	DmqData		    :	TMQuery;
//	iKoujiKbn	    :	Integer;	//	工事採用区分		<063> DEL
//	iHojyo1		    :	Integer;	//	第１補助採用区分	<063> DEL
	iBunseki	    :	Integer;	//	分析ｺｰﾄﾞ


    dqMasterData    :   TMQuery;
//    wRec2	        :	^TaikeiRec;	// <063> DEL
//	wkRec2          :	^TaikeiRec; // <063> DEL
    fDialogAdopt    :   Boolean;
    cDialogAdopt    :   TJNTCRP009001_D4F;
    cDialogRequisite:   TJNTCRP009001_D3F;
    nCodeDigit      :   Integer;
    nCodeAttr       :   Integer;
    nRetValue       :   TSyokuchiRetValue;
//    DummyFlag	    :	Boolean;	// <063> DEL

    iLoop           :   Integer;
    iStart          :   Integer;
    iEnd            :   Integer;
    DmqData2		:	TMQuery;
    bCancel			:	Boolean;	// <063> ADD
    bSyokuchi		:	Boolean; 	// <063> ADD

begin

	//	初期処理
//	iHojyo1		:=	0;				// <063> DEL
//	iKoujiKbn	:=	0;              // <063> DEL
	iBunseki	:=	0;
    bCancel		:= 	False;			// <063> ADD

	if ( m_pRec^.m_pChildForm <> nil ) then
	begin
		cNode	:=	TreeView.Selected;
		wkRec	:=	cNode.Data;

		EBankCodeN.Value		:=	0;
		EBankCodeN.InputFlag	:=	TRUE;
		LBankName.Caption		:=	'';

		ECode.Zero := False;	//<088>

		case MTab_Select.Items.Selected of

            // -------------------------
            //	    実在時
            // -------------------------
			0:
			begin
				ECode.MaxLength		:=	wkKmk.KanjyoKeta;
                ECode.InputAttr     :=  iaZeroSup;
				ELName.MaxLength	:=	24;


				if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
// <013>					SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkRec.GCode,'')
					SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkRec.GCode,'0')   // <013>
				else if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) then
					SyousaiInitialize(FALSE);

				//	工事採用区分をﾁｪｯｸ
				DmqData := TMQuery.Create( Self );					        //	MQueryの構築
				MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

				with DmqData do
				begin
					Close();
					SQL.Clear;
					SQL.Add('SELECT                     ');
					SQL.Add('    AnalyzeCode            ');	//	分析ｺｰﾄﾞ
					SQL.Add('FROM KmkMA                 ');
					SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
					SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
                    SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
                    SQL.Add('  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ
                    SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

                    ParamByName('Code'	).AsFloat  :=	wkRec.NCode;

					//	ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqData);
						DmqData.Close;
						DmqData.Free;
						Exit;
					end;

					if ( EOF <> TRUE ) then
					begin
						iBunseki	:=	GetFld('AnalyzeCode').AsInteger;	//	分析ｺｰﾄﾞ
					end;
				end;
				DmqData.Close;
                DmqData.Free;

                EnabledSelect(ZITSUZAI,0,0,0,iBunseki);
				gbSetPosition	:=	ZITSUZAI;

                MTab_Select.BorderCaption	:=	gsBorderCaption;	//	今表示している内容を保存
                giTaihi_OyaNCode := giTaihi_OyaNCodeSv;


				//HIS0033
				case giReferFlag of
					KAN_BA_HO_NO,KAN_BA_HO_RE,KAN_RE_HO_NO,KAN_RE_HO_BA,BASICONLY: exit;
				end;
			end;

            // -------------------------
            //	    細目時
            // -------------------------
			1:
			begin

                fnGetCodeAttr(wkRec.NCode,wkKmk.SaimokukZoku,wkKmk.SaimokuKeta);

                // ↓↓↓<023>
                // ---------------------------------------------------------
                //  選択科目に対する科目別補助採用が未採用の場合は
                //  メッセージを表示して、実在タブへフォーカスを移動させる。
                // ---------------------------------------------------------

                DmqData2 := TMQuery.Create( Self );					        //	MQueryの構築
				MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData2 );	//	DBとMQueryの接続
                
                with DmqData2 do
                begin
                    Close();
                    SQL.Clear();
                    SQL.Add('SELECT                     '
                        +   '    SubKmkUse              '
                        +   'FROM KMKMA                 '
                        +   'WHERE MasterKbn = 1        '   //	ﾏｽﾀ区分(1:勘定科目)
                        +   '  AND SumKbn    = 0        '	//	実在/合計区分(0:実在)
                        +   '  AND NCode     = :ExNCode '	//	内部ｺｰﾄﾞ
                        +   '  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

                    ParamByName('ExNCode').AsFloat  :=	wkRec.NCode;

                    //	ｴﾗｰの判定
                    if ( Open = FALSE ) then
                    begin
                        ErrorMessageDsp(DmqData2);
                        DmqData2.Close();
                        DmqData2.Free();
                        Exit;
                    end;

                    if ( EOF <> TRUE ) then
                    begin
                        if ( GetFld('SubKmkUse').AsInteger = 0 ) then
                        begin
                            MJSMessageBoxEx (AOwner,
                                             '科目別補助が採用されていません。'#13#10
                                             + '会社基本情報登録で科目別補助の設定を行って下さい。',
                                             '確認',
                                             mjInformation,
                                             mjOk,
                                             mjDefOk,
                                             FALSE);


// <123> DEL St
							// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                            // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                            MTab_Select.Items[0].Selected    :=  TRUE;
//                            MTab_Select.Items[1].Selected    :=  FALSE;
//                            MTab_Select.Items[2].Selected    :=  FALSE;
// <123> DEL Ed
                            DmqData2.Close();
                            DmqData2.Free();
// <123> ADD St
							// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
							MTab_Select.Items.Selected := 0;
// <123> ADD ED
                            Exit;
                        end;
                    end;
                end;

                DmqData2.Close();
                DmqData2.Free();
                // ↑↑↑<023>

                case wkKmk.SaimokukZoku of
                    0:
                    begin
                        ECode.MaxLength		:=	wkKmk.SaimokuKeta;
                        ECode.InputAttr     :=  iaZeroSup;
                        ECode.Zero          :=  TRUE;
                    end;
                    1:
                    begin
                        ECode.MaxLength		:=	wkKmk.SaimokuKeta;
                        ECode.InputAttr     :=  iaZeroPad;
                        ECode.Zero          :=  TRUE;
                    end;
                    2:
                    begin
                        ECode.MaxLength		:=	wkKmk.SaimokuKeta;
// <018>                        ECode.InputAttr     :=  iaFree;
                        ECode.InputAttr     :=  iaNone; // <018>
                        ECode.Zero          :=  TRUE;
                    end;
                end;

				ELName.MaxLength	:=	30;

				SyousaiInitialize(FALSE);
				EnabledSelect(SAIMOKU,0,0,0,0);		//	細目時
				gbSetPosition	:=	SAIMOKU;

				//	細目時はBorderCaptionを変える
				gsBorderCaption	:=	MTab_Select.BorderCaption;				//	今表示している内容を保存
                giTaihi_OyaNCodeSv := giTaihi_OyaNCode;

                // -------------------------
				//      勘定科目時
                // -------------------------
				if ( wkRec.MasKbn = 1 ) then										//HIS0089
				begin
					DmqData := TMQuery.Create( Self );					        //	MQueryの構築
					MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

					with DmqData do
					begin
						Close();
						SQL.Clear;
						SQL.Add('SELECT                     ');
						SQL.Add('    DecoKbn                ');	//	装飾区分
						SQL.Add('FROM KmkMB                 '); //	勘定科目詳細情報
						SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
						SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
                        SQL.Add('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
                        SQL.Add('  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ


                        ParamByName('Code'	).AsFloat :=	wkRec.NCode;

						//	ｴﾗｰの判定
						if ( Open = FALSE ) then
						begin
							ErrorMessageDsp(DmqData);
							DmqData.Close;
							DmqData.Free;
							Exit;
						end;

						if ( EOF <> TRUE ) then
						begin
							sWork	                    :=	GetSousyoku(wkRec.Name,(GetFld('DecoKbn').AsInteger));
							MTab_Select.BorderCaption	:=	IntToStr(wkRec.GCode) + ' ' + sWork;
                            giTaihi_OyaNCode            :=  wkRec.NCode;
						end;
					end;

					DmqData.Close;
        	        DmqData.Free;

					gbBorderFlag	:=	TRUE;
				end;

				//HIS0033
				case giReferFlag of
					KAN_NO_HO_BA,KAN_NO_HO_RE,KAN_BA_HO_RE,KAN_RE_HO_BA,BASICONLY: exit;
				end;

                dqMasterData             :=  TMQuery.Create( Self );	 	    //	MQueryの構築
				MDataModule.SetDBInfoToQuery( dbCorp_Select, dqMasterData );	//	DBとMQueryの接続

                fDialogAdopt    :=  TRUE;

            // -------------------------------------------------
            //
            //  採用設定情報画面の表示
            //
            // -------------------------------------------------
                with dqMasterData do
                begin
                    Close();
		            SQL.Clear();
                    SQL.Add('SELECT MasterKbn FROM KmkMA    '
                        +   'WHERE  MasterKbn = 2           '
                        +   '  AND  RDelKbn   = 0           '
                        +   '  AND  NCODE     = :nExNCode   ');

                    ParamByName('nExNCode').AsFloat :=  wkRec.NCode;

                    Open();

                    if	( not EOF ) then
			            fDialogAdopt	:= FALSE;

                end;

                // 存在しない場合
                if	( fDialogAdopt ) then
                begin
                    // 参照の場合
                    if	( giReferFlag = REFER ) then
                    begin
                        dqMasterData.Close ();
                        dqMasterData.Free  ();

// <123> MOD St
						// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                        MTab_Select.Items[0].Selected    :=  TRUE;
//                        MTab_Select.Items[1].Selected    :=  FALSE;
//                        MTab_Select.Items[2].Selected    :=  FALSE;
						// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
						MTab_Select.Items.Selected := 0;
// <123> MOD ED

                        Exit;
                    end;


// <063> ADD start if文追加 子会社では採用情報ﾀﾞｲｱﾛｸﾞを出さない
					if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_CHILD) then
					begin
// <063> ADD end
	                    // 採用情報設定画面の表示
	                    cDialogAdopt    :=  TJNTCRP009001_D4F.fnCreateDialog (Pointer (m_pRec),
	                                                                          Self,
	                                                                          dbCorp_Select,
	                                                                          wkRec.NCode);
	                    // ｷｬﾝｾﾙ時
	                    if	( cDialogAdopt.ShowModal () = mrCancel ) then
	                    begin
	                      dqMasterData.Close ();
	                      dqMasterData.Free  ();

// <123> MOD St
							// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//	                      // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//	                      MTab_Select.Items[0].Selected    :=  TRUE;
//	                      MTab_Select.Items[1].Selected    :=  FALSE;
//	                      MTab_Select.Items[2].Selected    :=  FALSE;
							// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
							MTab_Select.Items.Selected := 0;
// <123> MOD ED

	                      Exit;
	                    end;
// <063> ADD start if文終わり
                    end;					// 子会社の場合はここまで通らない
// <063> ADD end
                end;

            // -------------------------------------------------
            //
            //  諸口設定情報画面の表示
            //
            // -------------------------------------------------

            	// -----<077> Add-St-----
				SessionPractice(C_ST_PROCESS);

				try
				// -----<077> Add-Ed-----

                with (dqMasterData) do
	            begin
		            Close();
		            SQL.Clear();
		            SQL.Add('SELECT NCODE                   '
                        +   'FROM KmkMA                     '
                        +   'WHERE SyokuchiKbn = 1          '
                        +   '  AND RDelKbn     = 0          '
                        +   '  AND NCODE       = :nExNCode  '
                        +   '  AND SUMKBN      = 0          '
                        +   '  AND Masterkbn   = 2          ');

                    ParamByName('nExNCode').AsFloat :=  wkRec.NCode;


                    Open ();

                    if	(EOF) then
                    begin

                        // 科目別補助のｺｰﾄﾞ属性/桁数の取得
                        SQL.Clear();
                        SQL.Add('SELECT                         '
                            +   '    CodeDigit                  '
                            +   '   ,CodeAttr                   '
                            +   'FROM KmkMA                     '
                            +   'WHERE RDelKbn     = 0          '
                            +   '  AND NCODE       = :nExNCode  '
                            +   '  AND SUMKBN      = 0          '
                            +   '  AND Masterkbn   = 1          ');

                        ParamByName('nExNCode').AsFloat :=  wkRec.NCode;

                        Open ();

                        if	( EOF ) then
                        begin
                            dqMasterData.Close ();
                            dqMasterData.Free  ();

// <123> MOD St
							// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                            // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                            MTab_Select.Items[0].Selected    :=  TRUE;
//                            MTab_Select.Items[1].Selected    :=  FALSE;
//                            MTab_Select.Items[2].Selected    :=  FALSE;
							// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
							MTab_Select.Items.Selected := 0;
// <123> MOD ED

                            Exit;
                        end
                        else
                        begin
                            nCodeDigit  :=  GetFld('CodeDigit') .AsInteger;
                            nCodeAttr   :=  GetFld('CodeAttr')  .AsInteger;
                        end;

                        m_SyokuchiDlg   :=  FALSE;

// <063> MOD start
                        // 諸口画面の表示
(*                        cDialogRequisite	:= TJNTCRP009001_D3F.fnCreateDialog (Pointer (m_pRec),
                                                                                 @nRetValue,
                                                                                 Self,
                                                                                 dbCorp_Select,
                                                                                 nCodeDigit,
                                                                                 nCodeAttr,
                                                                                 wkRec.GCode,
                                                                                 wkRec.NCode,
                                                                                 m_strValidCharacters);

                        if	(cDialogRequisite.ShowModal () = mrCancel) then
                        begin
                            cDialogRequisite.Close ();
                            cDialogRequisite.Free  ();
*)
						MDataModule.BeginTran (dbCorp_Select);		// 子会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始
						ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);	// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始

						// 子会社の場合、親会社にあったら同期をとる
						if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
                        begin
                        					// 親会社に諸口があったら関連付ける
                        	if not ImportOyaSyokuchi(wkRec.NCode, bSyokuchi, False) then
                            begin
// <123> DEL St
								// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//		                        // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//    		                    MTab_N.Items[0].Selected    :=  TRUE;
//	    	                    MTab_N.Items[1].Selected    :=  FALSE;
//    	    	                MTab_N.Items[2].Selected    :=  FALSE;
// <123> DEL Ed
                	            dqMasterData.Close ();
                    	        dqMasterData.Free  ();

								MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
								ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
// <123> ADD St
								// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
								MTab_Select.Items.Selected := 0;
// <123> ADD ED
	    	                    Exit;
	                       	end;
                            if bSyokuchi then
                            begin
        			            dqMasterData.Close ();
		            	        dqMasterData.Free  ();

			                    m_SyokuchiDlg   :=  FALSE;
								MDataModule.Commit(dbCorp_Select);		// 子会社のｺﾐｯﾄ
								ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBのｺﾐｯﾄ

                            	Exit;
                            end;
                        end;

											// ｸﾞﾙｰﾌﾟ会計の子会社以外 または 子会社で諸口がない場合
						if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_CHILD) or
	                    	(not bSyokuchi) then
						begin
        	                cDialogRequisite	:= TJNTCRP009001_D3F.fnCreateDialog (Pointer (m_pRec),
                                                                                 @nRetValue,
                                                                                 Self,
                                                                                 dbCorp_Select,
                                                                                 nCodeDigit,
                                                                                 nCodeAttr,
                                                                                 wkRec.GCode,
                                                                                 wkRec.NCode,
                                                                                 m_strValidCharacters);
                            if (cDialogRequisite.ShowModal () = mrCancel) then
                            begin
                            	bCancel := True;
	                            cDialogRequisite.Close ();
    	                        cDialogRequisite.Free  ();
                            end;
            	        end;

                        if bCancel then 	// 諸口を追加しない場合
                        begin
// <063> MOD end
// <123> DEL St
							// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                            // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                            MTab_Select.Items[0].Selected    :=  TRUE;
//                            MTab_Select.Items[1].Selected    :=  FALSE;
//                            MTab_Select.Items[2].Selected    :=  FALSE;
// <123> DEL Ed
                            dqMasterData.Close ();		// <063> ADD
                            dqMasterData.Free  ();		// <063> ADD
// <063> ADD start
							MDataModule.Rollback (dbCorp_Select);	// 子会社のﾛｰﾙﾊﾞｯｸ
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ
// <063> ADD end
// <123> ADD St
							// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
							MTab_Select.Items.Selected := 0;
// <123> ADD ED
                            Exit;
                        end
                        else
                        begin
                            wkKmk.SaimokuKeta   :=  nCodeDigit;
                            wkKmk.SaimokukZoku  :=  nCodeAttr;

                            if ( Syokuchi(wkRec.GCode,FALSE) = FALSE ) then
                            begin
                                m_SyokuchiDlg   :=  TRUE;

                                SyousaiInitialize(FALSE);

                                // 属性対応
                                case wkKmk.SaimokukZoku of
                                    0:
                                    begin
                                        ECode.MaxLength		:=	wkKmk.SaimokuKeta;
                                        ECode.InputAttr     :=  iaZeroSup;
                                    end;
                                    1:
                                    begin
                                        ECode.MaxLength		:=	wkKmk.SaimokuKeta;
                                        ECode.InputAttr     :=  iaZeroPad;
                                    end;
                                    2:
                                    begin
                                        ECode.MaxLength		:=	wkKmk.SaimokuKeta;
                                        ECode.InputAttr     :=  iaNone; // <018>
// <018>                                        ECode.InputAttr     :=  iaFree;
                                    end;
                                end;

                                ECode.Text  :=  nRetValue.rcExCode;
                                ERen.Text   :=  nRetValue.rcRenso;
                                ELName.Text :=  nRetValue.rcLName;
                                ESName.Text :=  nRetValue.rcSName;

                                SyousaiNew();
//                                SyousaiInitialize(FALSE);

                            end;
                        end;

                        // 採用ﾌﾗｸﾞをONにする
// <063> ADD start
																	// ｸﾞﾙｰﾌﾟ会計の子会社の場合
						if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
						begin
							dqMasterData.Close;
			        												// 親会社DBとMQueryの接続
							MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, dqMasterData);
						end;
// <063> ADD end

                        Close();
                        SQL.Clear();
				        SQL.Add('UPDATE KmkMA SET               '); //	勘定科目基本ﾏｽﾀ
// <023>        				SQL.Add('     SubKmkUse  = 1            '); //	細目科目採用区分(1:あり)
                        SQL.Add('    CodeAttr    = :Attr        ');
                        SQL.Add('   ,CodeDigit   = :Digit       ');
                        SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode '); //  更新担当者内部ｺｰﾄﾞ<080>
        				SQL.Add('WHERE NCode     = :ExNCode     '); //	外部ｺｰﾄﾞ
        				SQL.Add('  AND CNCode    = 0            ');	//	細目ｺｰﾄﾞ
           				SQL.Add('  AND MasterKbn = 1            ');	//	ﾏｽﾀ区分(1:勘定科目)
        				SQL.Add('  AND SumKbn    = 0            ');	//	実在/合計区分(0:実在)
                        SQL.Add('  AND RDelKbn   = 0            ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)

        				ParamByName('ExNCode').AsFloat   :=	wkRec.NCode;
                        ParamByName('Attr').AsInteger   := wkKmk.SaimokukZoku;
                        ParamByName('Digit').AsInteger  := wkKmk.SaimokuKeta;
                        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

                        //	ｴﾗｰの判定
                        if ( ExecSQL = FALSE ) then
                        begin
                            ErrorMessageDsp(dqMasterData);
// <123> DEL St
							// 下記だとMTab_SelectChangeが実行されないため、Items.Selectedでタブを切り替えるよう修正
//                            // 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
//                            MTab_Select.Items[0].Selected    :=  TRUE;
//                            MTab_Select.Items[1].Selected    :=  FALSE;
//                            MTab_Select.Items[2].Selected    :=  FALSE;
// <123> DEL Ed

                            dqMasterData.Close ();
                            dqMasterData.Free  ();
// <123> ADD St
							// 実在ﾀﾌﾞにﾌｫｰｶｽを戻して終了
							MTab_Select.Items.Selected := 0;
// <123> ADD ED
                            Exit;
                        end;

                    end;

                    dqMasterData.Close ();
                    dqMasterData.Free  ();

                    m_SyokuchiDlg   :=  FALSE;
// <063> ADD start
					MDataModule.Commit(dbCorp_Select);		// 子会社のｺﾐｯﾄ
					ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBのｺﾐｯﾄ
// <063> ADD end
                end;

                // -----<077> Add-St-----
				finally
					SessionPractice(C_ED_PROCESS);
				end;
				// -----<077> Add-Ed-----

			end;

            // -------------------------
            //	    合計時
            // -------------------------
			2:
			begin
				ECode.MaxLength		:=	wkKmk.KanjyoKeta;
				ECode.InputAttr     :=  iaZeroSup;
				ELName.MaxLength	:=	24;

				if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 1 ) then
// <013>					SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkRec.GCode,'')
					SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkRec.GCode,'0')   // <013>
				else if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
					SyousaiInitialize(FALSE);

				EnabledSelect(GOUKEI,0,0,0,0);		//	合計時

				gbSetPosition	:=	GOUKEI;

				MTab_Select.BorderCaption	:=	gsBorderCaption;	//	今表示している内容を保存
                giTaihi_OyaNCode := giTaihi_OyaNCodeSv;

				//HIS0033
				case giReferFlag of
					KAN_BA_HO_NO,KAN_BA_HO_RE,KAN_RE_HO_NO,KAN_RE_HO_BA,BASICONLY: exit;
				end;
			end;
		end;

        // 分類 <002>
        if      (MTab_Select.Items.Selected = 0) then		//	勘定科目時
        begin
            iStart := 0;
            iEnd   := 9;
        end
        else if (MTab_Select.Items.Selected = 1) then		//	細目科目時
        begin
            iStart := 10;
            iEnd   := 19;
        end
        else
        begin
            iStart := 0;
            iEnd   := 0;
        end;

        if iEnd <> 0 then
        begin
            for iLoop := iStart to iEnd do
            begin
                // ﾌｨｰﾙﾄﾞを使用不可
                m_Bunrui[iLoop-iStart+1].LCaption.Enabled   := FALSE;
                m_Bunrui[iLoop-iStart+1].ECode.Visible      := FALSE;
                m_Bunrui[iLoop-iStart+1].LName.Enabled      := FALSE;

                // ﾌｨｰﾙﾄﾞのｸﾘｱ
                m_Bunrui[iLoop-iStart+1].LCaption.Caption   := '';
                m_Bunrui[iLoop-iStart+1].ECode.Text         := '';
                m_Bunrui[iLoop-iStart+1].LName.Caption      := '';

                // 採用区分の確認
                if (aBunruiKbn[iLoop] = 1) then             // 採用あり
                begin
                    // 属性、桁数の設定
                    if      aBunruiAttr[iLoop] = 0 then     // 0:数字
                        m_Bunrui[iLoop-iStart+1].ECode.InputAttr := iaZeroSup
                    else if aBunruiAttr[iLoop] = 1 then     // 1:数字（前ｾﾞﾛあり）
                        m_Bunrui[iLoop-iStart+1].ECode.InputAttr := iaZeroPad
                    else if aBunruiAttr[iLoop] = 2 then     // 2:ﾌﾘｰ
                        m_Bunrui[iLoop-iStart+1].ECode.InputAttr := iaFree;
                    m_Bunrui[iLoop-iStart+1].ECode.MaxLength := aBunruiDigit[iLoop];

                    // ﾌｨｰﾙﾄﾞを使用可
                    m_Bunrui[iLoop-iStart+1].LCaption.Enabled   := TRUE;
                    m_Bunrui[iLoop-iStart+1].ECode.Visible      := TRUE;
                    m_Bunrui[iLoop-iStart+1].LName.Enabled      := TRUE;

                    // ｷｬﾌﾟｼｮﾝの表示
                    m_Bunrui[iLoop-iStart+1].LCaption.Caption   := aBunruiNm[iLoop];
                end;
            end;
        end;

//	ちょっと問題があるかも？
		if ( ACControl.Name <> TreeView.Name    ) and
           ( ACControl.Name <> MTab_Select.Name ) and
           ( giChangeFlag   =  FALSE            ) and
           ( giReferFlag    <> REFER            ) then

			ECode.SetFocus;

	end;
end;



//**********************************************************************
//*		Proccess	:	詳細の初期化
//*		Name		:	H.Endo
//*		Date		:	2000/10/11
//*		Parameter	:	Select		:	入力時の初期化(TRUE)/Tab移動時の初期化(FALSE)
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.SyousaiInitialize(Select: Boolean);
var
    iLoop   :   Integer;
	Employ	:	SaiyouRec;	// 部門、ｾｸﾞﾒﾝﾄ、工事の採用 <121>ADD
begin

	if ( Select = FALSE ) then
		ECode.Text		    :=	'';			    //	ｺｰﾄﾞ
	ERen.Text			    :=	'';			    //	連想
	ELName.Text			    :=	'';			    //	正式名称
	ESName.Text			    :=	'';			    //	簡略名称
	EBunCode.Value		    :=	0;			    //	分析ｺｰﾄﾞ
	LBunName.Caption	    :=	'非会計科目';
	ESeikakuCode.Value	    :=	0;			    //	性格ｺｰﾄﾞ
	LSeikakuName.Caption    :=	'通常科目型';
	EYouCode.Value	        := 0;		        //	要約ｺｰﾄﾞ
	LYouName.Caption        := '';		        //	要約名称
	EKotei.Value	        := 0;		        //	固定費ｺｰﾄﾞ
	LKoteiName.Caption      := '';		        //	固定費名称
	EHendo.Value	        := 0;		        //	変動費ｺｰﾄﾞ
	LHendoName.Caption      := '';		        //	変動費名称
    EBmnUse.Value		    :=	0;
    EBankUse.Value		    :=	0;
    EToriUse.Value		    :=	0;
    EShainUse.Value			:=	0;
    for iLoop := 1 to 5 do
        TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop))).Value :=  0;
    for iLoop := 1 to 10 do
    begin
        TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop))).Value   :=  0;
        TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop))).Value   :=  0;
    end;

    case MTab_Select.Items.Selected of
        // 実在ﾀﾌﾞ
        0:  begin
// <121>ADD↓
				// 新規登録時は部門等の採用区分をｾｯﾄする
				if (Select = TRUE) then
                begin
					Employ.Bumon            :=	0;	//	部門
					Employ.Kouji            :=	0;	//	工事
					for iLoop := 0 to 9 do
						Employ.Seg[iLoop]   :=	0;	//	ｾｸﾞﾒﾝﾄ

            		// 部門、ｾｸﾞﾒﾝﾄ、工事の採用区分をｾｯﾄする
	            	MasInfoKmkCodeCheck(StrToIntDef(Trim(ECode.Text), 0), Trunc(EBPCode.Value), Trunc(EBunCode.Value), Employ);

            		// 部門採用区分ｴﾃﾞｨｯﾄ
				    EBmnUse.Value		    :=	Employ.Bumon;

            		// ｾｸﾞﾒﾝﾄ1～10採用区分ｴﾃﾞｨｯﾄ
					for iLoop := 1 to 10 do
						TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop))).Value   :=  EMPLOY.Seg[iLoop - 1];

					// 工事が使用可能な会社ﾃﾞｰﾀの場合
					if ((m_KoujiMasKbn <> 0) and (giKoujiSyubetsu <> 0)) then
						// 工事採用区分ｴﾃﾞｨｯﾄ
						TMNumEdit(MJSFindCtrl(Self, 'EPrjUse' + IntToStr(m_KoujiMasKbn - 200))).Value :=  EMPLOY.Kouji;
				end;
// <121>ADD↑
                GetList(EBmnUse,LBmnUse);
                GetList(EBankUse,LBankUse);
                GetList(EToriUse,LToriUse);
                GetList(EShainUse,LShainUse);
                EBmnUse     .Zero   :=  TRUE;
                EBankUse    .Zero   :=  TRUE;
                EToriUse    .Zero   :=  TRUE;
                EShainUse   .Zero   :=  TRUE;

                for iLoop := 1 to 5 do
                begin
                    GetList(TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop))),
                        TMLabel(MJSFindCtrl(Self,'LHojyoUse'+IntToStr(iLoop))));
                    TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop))).Zero   :=  TRUE;
                end;
                for iLoop := 1 to 10 do
                begin
                    GetList(TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop))),
                        TMLabel(MJSFindCtrl(Self,'LSegUse'+IntToStr(iLoop))));
                    TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop))).Zero     :=  TRUE;

                    GetList(TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop))),
                        TMLabel(MJSFindCtrl(Self,'LPrjUse'+IntToStr(iLoop))));
                    TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop))).Zero     :=  TRUE;
                end;
            end;
        // 科目別補助,合計ﾀﾌﾞ
        1,2:begin
                LBmnUse     .Caption    :=  '';
                LBankUse    .Caption    :=  '';
                LToriUse    .Caption    :=  '';
                LShainUse   .Caption    :=  '';
                EBmnUse     .Zero       :=  FALSE;
                EBankUse    .Zero       :=  FALSE;
                EToriUse    .Zero       :=  FALSE;
                EShainUse   .Zero       :=  FALSE;

                for iLoop := 1 to 5 do
                begin
                    TMLabel(MJSFindCtrl(Self,'LHojyoUse'+IntToStr(iLoop))).Caption  :=  '';
                    TMNumEdit(MJSFindCtrl(Self,'EHojyoUse'+IntToStr(iLoop))).Zero   :=  FALSE;
                end;

                for iLoop := 1 to 10 do
                begin
                    TMLabel(MJSFindCtrl(Self,'LSegUse'+IntToStr(iLoop))).Caption    :=  '';
                    TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop))).Zero     :=  FALSE;
                    TMLabel(MJSFindCtrl(Self,'LPrjUse'+IntToStr(iLoop))).Caption    :=  '';
                    TMNumEdit(MJSFindCtrl(Self,'EPrjUse'+IntToStr(iLoop))).Zero     :=  FALSE;
                end;
            end;
    end;

	//	銀行コード
	if (wkBank.CodeZoku <> 2) then	//	銀行の属性が数値
	begin
		EBankCodeN.InputFlag := TRUE;
		EBankCodeN.Value	 := 0;
	end
	else
		EBankCodeT.Text := '';
	LBankName.Caption := '';
	EStartDate.Value		:=	0;			//	適用開始年月日
	EEndDate.Value			:=	0;			//	適用終了年月日
	//	集計情報
	ESeiZanCode.Value		:=	0;			//	正残区分
	GetList(ESeiZanCode,LSeiZanName);
	if (MTab_Select.Items.Selected = 2) then //	合計選択時
	begin
		case MComboBox.ItemIndex of
			//	資産科目,負債／資本科目
			0,1: EBPCode.Value := 0;		//	B/S
			//	損益科目,製造科目
			2,3: EBPCode.Value := 1;		//	P/L
		end;
	end
//--- HIS0066 START -----
	else if (MTab_Select.Items.Selected = 0)
			and (EBunCode.Value = 0) then //	実在選択時かつ分析ｺｰﾄﾞが0の時
	begin
		case MComboBox.ItemIndex of
			//	資産科目,負債／資本科目
			0,1: EBPCode.Value := 0;		//	B/S
			//	損益科目,製造科目
			2,3: EBPCode.Value := 1;		//	P/L
		end;
	end
    else
//--- HIS0066  END  -----
		EBPCode.Value		:=	0;			//	BS/PL区分
	GetList(EBPCode,LBPName);
	EKisyuCode.Value		:=	0;			//	期首残区分
    GetList(EKisyuCode,LKisyuName);
	EDPCode.Value			:=	0;			//	表示／印刷不可区分
	GetList(EDPCode,LDPName);
	EHiritsuCode.Value		:=	0;			//	比率科目区分
	GetList(EHiritsuCode,LHiritsuName);
	EKariCode.Value			:=	0;			//	借方資金繰ｺｰﾄﾞ
	LKariName.Caption		:=	'';			//	借方資金繰ｺｰﾄﾞ名称
	EKashiCode.Value		:=	0;			//	貸方資金繰ｺｰﾄﾞ
	LKashiName.Caption		:=	'';			//	貸方資金繰ｺｰﾄﾞ名称
	EHendouhi.Value			:=	0;			//	変動費比率
	//	出力情報
	EMainasuCode.Value		:=	0;			//	ﾏｲﾅｽ印刷区分
	GetList(EMainasuCode,LMainasuName);
	ESagakuCode.Value		:=	0;			//	差額印刷区分
	GetList(ESagakuCode,LSagakuName);
	ERiekiCode.Value		:=	0;			//	利益印刷区分
	GetList(ERiekiCode,LRiekiName);
	EKihyousya.Value		:=	0;			//	元帳起票者印字
	GetList(EKihyousya,LKihyousyaName);

	EMainaName.Text			:=	'';			//	ﾏｲﾅｽ変換科目名
	ESousyokuCode.Value  	:=	0;			//	装飾区分
	GetList(ESousyokuCode,LSousyokuName);	//	装飾区分内容
//--- HIS0098 St -----
	if (MTab_Select.Items.Selected = 0) then
	begin
		LAddUnit.Visible	:= TRUE;		// 集計単位区分(ﾀｲﾄﾙ)
		EAddUnit.Visible	:= TRUE;		// 集計単位区分(入力)
		LAddUnitName.Visible := TRUE;		// 集計単位区分(名称)
	end;
//--- HIS0098 Ed -----
	//	入力条件
	EShiwakeCode.Value		:=	0;			//	仕訳入力区分
	GetList(EShiwakeCode,LShiwakeName);
	EKijitsuCode.Value		:=	0;			//	期日入力区分
	GetList(EKijitsuCode,LKijitsuName);
	ETegataNoCode.Value		:=	0;			//	手形番号入力区分
	ETekiCode.Value			:=	0;			//	固定摘要必須入力
	GetList(ETekiCode,LTekiName);
	ETekiyouBunrui.Value	:=	0;			//	摘要分類ｺｰﾄﾞ
	LTekiyoubunrui.Caption	:=	'';			//	摘要分類ｺｰﾄﾞ内容
	EShikuriCode.Value		:=	0;			//	資金繰ｺｰﾄﾞ優先区分
	GetList(EShikuriCode,LShikuriName);
	ESyousuten.Value		:=	0;			//	小数点桁数<057>
	//	電子帳簿
	if (m_Electronic = TRUE) then	//	電子帳簿採用時
		ERirekiKbnCode.Value :=	1			//	履歴管理区分
    else
		ERirekiKbnCode.Value :=	0;			//	履歴管理区分
	GetList(ERirekiKbnCode,LRirekiKbnName);
//	EDenHojyo1.Value		:=	0;			//	第1補助電子帳簿採用区分
//	EDenHojyo2.Value		:=	0;			//	第2補助電子帳簿採用区分

	//<117>ADD↓
    //分類
    for iLoop := Low(m_Bunrui) to High(m_Bunrui) do
    begin
    	m_Bunrui[iLoop].NCode         := 0;
        m_Bunrui[iLoop].GCode         := '';
        m_Bunrui[iLoop].ECode.Text    := '';
        m_Bunrui[iLoop].LName.Caption := '';
    end;
    //<117>ADD↑
end;

//************************************************************************
//*		Component		:	ECode ( TMNumEdit )
//*							詳細のｺｰﾄﾞ欄からのEXIT処理
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ECodeExit(Sender: TObject);
var
	DmqData		:	TMQuery;
	Pos			:	Integer;
	KasanCode	:	Integer;
	wkRec		:	^TaikeiRec;
	wkP_Rec		:	^TaikeiRec;
	iLoop		:	Integer;
	CNode		:	TTreeNode;
    wkNode		:	TTreeNode;
	bFlag		:	Boolean;
// <063> ADD start
    iRet		:	Integer;
    iMasKbn		:	Integer;
    iSumKbn		:	Integer;
    iGCode		:	Integer;
    exNCode		:	Extended;
    exCNCode	:	Extended;
    strSubCode	:	String;
// <063> ADD end
begin
    wkP_Rec := Nil;
    wkRec   := Nil;

	m_InpNewFlag := FALSE;
	//	終了ﾎﾞﾀﾝが押された時
	if ( gbEndFlag = TRUE ) then
		Exit;

	//	ｺｰﾄﾞの空Enter時での詳細からGridへの切り替え時							//hiro0709
	if ( m_bSpaceCode = TRUE ) then
	begin
		m_bSpaceCode := FALSE;
		Exit;
	end;

	//	Shift+Tabが押された時
	if ( gShiftTabFlag = TRUE ) then
		Exit;

	ECode.Text := TrimRight(ECode.Text);										// <122> ADD

	//	何も入力されてない時
	if ( MTab_Select.Items.Selected <> 1 ) then	//	細目ではない時
	begin
		if ( Trim(ECode.Text) = '' ) then
		begin
			if ( gbEndEscFlag = FALSE ) then	//	ECodeでEsc/Endが押されなかった時
			begin
				if ( ECode.Enabled = TRUE ) then
				begin
					try
					if ( TJNTCRP009001f(m_pRec^.m_pChildForm^).Parent.visible = TRUE ) and
                       ( TJNTCRP009001f(m_pRec^.m_pChildForm^).Parent.Enabled = TRUE ) then
						ECode.SetFocus
					except
					end;
				end;
			end;
			gbEndEscFlag	:=	FALSE;
			Exit;
		end;
	end
	else if ( Trim(ECode.Text) = '' ) then
	begin
		if ( gbEndEscFlag = FALSE ) then	//	ECodeでEsc/Endが押されなかった時
		begin
			if ( ECode.Enabled = TRUE ) then
			begin
				try
				if ( TJNTCRP009001f(m_pRec^.m_pChildForm^).Parent.visible = TRUE ) and
                   ( TJNTCRP009001f(m_pRec^.m_pChildForm^).Parent.Enabled = TRUE ) then
					ECode.SetFocus;
				except
				end;
			end;
		end;
		SyousaiInitialize(FALSE);
		gbEndEscFlag	:=	FALSE;
		Exit;
	end;

	//	親を取得
	Pos	:=	MJSHanPos(' ', MTab_Select.BorderCaption);			//	先頭からSPACEまでの桁数COUNT
	if ( Pos = 0 ) then
		KasanCode := 0
    else
		KasanCode	:=	StrToInt(MJSHanCopy(MTab_Select.BorderCaption, 1, Pos-1));	//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
		//	同一ｺｰﾄﾞが登録されているかﾁｪｯｸ
		Close;
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    GCode                  ');	//	外部ｺｰﾄﾞ
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
        SQL.Add('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND MasterKbn = :MasKbn  ');	//	ﾏｽﾀ区分
		SQL.Add('  AND GCode     = :G_Code  ');	//	外部ｺｰﾄﾞ
		SQL.Add('  AND SubCode   = :SaiCode ');	//	細目ｺｰﾄﾞ

		case MTab_Select.Items.Selected of
            // ---------------------
            //	    実在時
            // ---------------------
			0:
			begin
				ParamByName('MasKbn'	).AsInteger		:=	1;					//	ﾏｽﾀ区分
				ParamByName('G_Code'	).AsInteger		:=	StrToIntDef(ECode.Text,0);	//	外部ｺｰﾄﾞ
// <013>				ParamByName('SaiCode'	).AsString		:=	'';					//	細目ｺｰﾄﾞ
				ParamByName('SaiCode'	).AsString		:=	'0';    					//	細目ｺｰﾄﾞ<013>
			end;
            // ---------------------
            //	    細目時
            // ---------------------
			1:
			begin
				ParamByName('MasKbn'	).AsInteger		:=	2;					//	ﾏｽﾀ区分
				ParamByName('G_Code'	).AsInteger		:=	KasanCode;			//	外部ｺｰﾄﾞ
				ParamByName('SaiCode'	).AsString		:=	fnSaimokuSetAttr(1,ECode.Text,
                                                                wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);    //  細目外部ｺｰﾄﾞ
            end;
            // ---------------------
            //	    合計時
            // ---------------------
			2:
			begin
				ParamByName('MasKbn'	).AsInteger		:=	1;					//	ﾏｽﾀ区分
				ParamByName('G_Code'	).AsInteger		:=	StrToIntDef(ECode.Text,0);	//	外部ｺｰﾄﾞ
// <013>				ParamByName('SaiCode'	).AsString		:=	'';					//	細目ｺｰﾄﾞ
				ParamByName('SaiCode'	).AsString		:=	'0';					    //	細目ｺｰﾄﾞ<013>
			end;
		end;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		bFlag	:=	FALSE;
		if ( EOF <> TRUE ) then
		begin
			CNode	:=	nil;	//	初期化処理
			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				wkRec	:=	TreeView.Items[iLoop].Data;
		   		if ( ( wkRec.MasKbn = 2 ) and ( wkRec.SubCode = ECode.Text ) ) or
                   ( ( wkRec.MasKbn = 1 ) and ( wkRec.GCode = StrToIntDef(ECode.Text,0) )) then
				begin
                    // ----------------------
                    //	    細目時
                    // ----------------------
					if ( MTab_Select.Items.Selected = 1 ) then
					begin
						wkNode	:=	TreeView.Items[iLoop].Parent;
						if ( wkNode <> nil ) then
						begin
							wkP_Rec	:=	wkNode.Data;
							if ( wkP_Rec.GCode = KasanCode ) then
							begin
			                    TreeView.Selected := TreeView.Items[iLoop];
								bFlag	:=	TRUE;
								break;
							end;
						end;
					end
                    // ----------------------
					//      勘定科目の時
                    // ----------------------
					else if ( wkRec.MasKbn = 1 ) then								//HIS0089(if文を追加)
					begin
	                    TreeView.Selected := TreeView.Items[iLoop];
						bFlag	:=	TRUE;
						break;
					end;
		   	    end;
		   	end;

			if ( bFlag = FALSE ) then
			begin
				//	同一コードが存在してます
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,8);
				MjsMsgRec.sMsg := ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@', 'コード' );
	    		MjsMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );

				if ( ECode.Enabled = TRUE ) then
					ECode.SetFocus;
			end
			else if ( wkRec.MasKbn = 2 ) and ( wkRec.Kbn = 0 ) then	//	細目時
			begin
				SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkP_Rec.GCode,wkRec.SubCode);
			end
			else
			begin
// <013>				SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkRec.GCode,'');
				SelectDsp(wkRec.MasKbn,wkRec.Kbn,wkRec.GCode,'0');  // <013>
			end;

			DmqData.Close;
			DmqData.Free;

			Exit;

		end
        // 有効文字のﾁｪｯｸ
        else
        begin
            if	( not JNTMASERRORCODECHECK (ECode.Text, m_strValidCharacters) ) then
        	begin
        		Beep ();

        		TJNTMASCom (m_pRec^.m_pSystemArea^).m_MsgStd.GetMsg (MjsMsgRec, 30, 21);

        		MJSMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                m_pRec^.m_ProgramName,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MjsMsgRec.LogType
                               );

//                if ( ECode.Enabled = TRUE ) then
//					ECode.SetFocus;

	        	Exit;
        	end;
        end;

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
		begin
			// 外部ｺｰﾄﾞ取得
			if MTab_Select.Items.Selected in [0, 2] then
			begin
            	iMasKbn := MKBN_KAMOKU;
				iGCode := StrToIntDef(ECode.Text,0);
			end
			else
			begin
            	iMasKbn := MKBN_SAIMOKU;
	        	iGCode := KasanCode;		// 科目ｺｰﾄﾞ
											// 属性によってDB上のｺｰﾄﾞにﾌｫｰﾏｯﾄ
				strSubCode := fnSaimokuSetAttr(1,ECode.Text, wkKmk.SaimokukZoku, wkKmk.SaimokuKeta);
			end;
            if MTab_Select.Items.Selected = 2 then
            begin
            	iSumKbn := SUMKBN_GOUKEI;
            end
            else
            begin
            	iSumKbn := SUMKBN_JITUZAI;
            end;

            // -----<077> Add-St-----
			SessionPractice(C_ST_PROCESS);

			try
			// -----<077> Add-Ed-----

		    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
			MDataModule.BeginTran(dbCorp_Select);
			ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);

	        // 会社関連付処理
			iRet := fnCorpRelation(iMasKbn, iGCode, strSubCode, iSumKbn,
									exNCode, exCNCode);
	        case iRet of
    	        0:
				begin
            	    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
					// →親にinsert
					// ﾛｰﾙﾊﾞｯｸ
					MDataModule.Rollback(dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
    	        end;
        	    1:
				begin
					// ﾂﾘｰ作成
					if not MakeTreeRecord(iMasKbn, exnCode, exCNCode, False) then
					begin
                        // ﾛｰﾙﾊﾞｯｸ
						MDataModule.Rollback (dbCorp_Select);
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
	   					DmqData.Close;
						DmqData.Free;
	                    ECode.SetFocus;
		                Exit;
					end;
					// ｺﾐｯﾄ
					MDataModule.Commit(dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_COMMIT);

	                // 正常に関連付が行えた場合は、画面の再描画を行う
                    SelectDsp(iMasKbn, iSumKbn, iGCode, strSubCode);
   					DmqData.Close;
					DmqData.Free;
					Exit;
	            end;
    	        2:
				begin
    	            // 会社関連付をｷｬﾝｾﾙ
					DmqData.Close;
					DmqData.Free;
					// ﾛｰﾙﾊﾞｯｸ
					MDataModule.Rollback(dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                    ECode.SetFocus;
	                Exit;
    	        end;
        	    -9:
				begin
	                // 例外ｴﾗｰ
					DmqData.Close;
					DmqData.Free;
					// ﾛｰﾙﾊﾞｯｸ
					MDataModule.Rollback(dbCorp_Select);
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);
                    ECode.SetFocus;
	                Exit;
	            end;
    	    end;

            // -----<077> Add-St-----
			finally
				SessionPractice(C_ED_PROCESS);
			end;
			// -----<077> Add-Ed-----

		end;
// <063> ADD end

		if ( Trim(ECode.Text) = '' ) then
		begin
			if ( gbEndEscFlag = FALSE ) then	//	ECodeでEsc/Endが押されなかった時
				ECode.SetFocus;
			gbEndEscFlag	:=	FALSE;

			DmqData.Close;
			DmqData.Free;

			exit;
		end
		else begin
			m_InpNewFlag := TRUE;
			FusenInitialize();
			SyousaiInitialize(TRUE);

		//HIS0034
			if ( MTab_Select.Items.Selected = 1 ) then	//	細目時
			begin
				if ( fnSwkCheck(KasanCode) = FALSE ) then
					ECode.SetFocus;
			end;
		//*******
		end;
	end;
	DmqData.Close;
	DmqData.Free;

end;

//******************************************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*							処理
//*		Event			:	OnDestroy
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
procedure TJNTCRP009001f.FormDestroy(Sender: TObject);
begin

	m_NameList.Free;		// HIS0109

    // 終了処理<PRN>
	gfnHaniTerm(uvHani);

    // <SYNC> ADD start
    if (m_SyncMaster <> nil) then
	begin
		m_SyncMaster.Free();				// ﾏｽﾀ同期ｸﾗｽ破棄
	end;
    // <SYNC> ADD end
end;

//******************************************************************************************************
//*		Proccess	:	Comboの内容が変わった時
//*		Name		:	H.Endo
//*		Date		:	2000/10/26
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//******************************************************************************************************
procedure TJNTCRP009001f.ComboChange();
var
	wkRec	:	^TaikeiRec;
	iLoop	:	Integer;
	TNode	:	TTreeNode;
begin

    // 表示中とは別のものを表示する時
	if ( giTabTaihi <> (MComboBox.ItemIndex) ) then
	begin
		if ( TreeView.Items.Count <> 0 ) then
		begin
			for iLoop := 1 to TreeView.Items.Count do
            begin
                wkRec := TreeView.Items[iLoop - 1].Data;
				if ( wkRec = nil ) then
					continue;
                Dispose(wkRec);
				TreeView.Items[iLoop - 1].Data	:=	nil;
            end;

			while TRUE do
			begin
				if ( TreeView.Items.Count > 0 ) then
				begin
					TNode	:=	TreeView.Items[0];
                    // ﾂﾘｰの消去
					TNode.Delete;
				end;
				if ( TreeView.Items.Count = 0 ) then
					break;
			end;
		end;

		// 印刷ﾎﾞﾀﾝ・詳細ﾎﾞﾀﾝの使用不可
		B_Print.Enabled		:=	m_cJNTArea.IsPrint;

		MemGou  .Close;							// 合計Gridのｸﾘｱ
		MemZitsu.Close;							// 実在Gridのｸﾘｱ
		MemSai  .Close;							// 細目Gridのｸﾘｱ

		TreeView.Items.BeginUpdate;
		MakeDspDate(MComboBox.ItemIndex);		// ﾂﾘｰ表示処理

	//--- HIS0076 START -----
		// 切出されている時にTreeのChengeｲﾍﾞﾝﾄを発生させる為の処理
		if ( B_Change.Caption = '埋込(&G)' ) then
			TreeView.Selected := TreeView.Items[1];
	//--- HIS0076  END  -----

		// ComboでのEnter時で一番上へﾌｫｰｶｽ移動とｽｸﾛｰﾙの移動処理
		TreeView.Selected := TreeView.Items[0];
		if ( TreeView_EnsureVisible(TreeView.Handle, TreeView.Selected.ItemID) ) then
			TreeView.Invalidate;

		TreeView.Items.EndUpdate;

		giTabTaihi	        :=	MComboBox.ItemIndex;	//	表示中のIndexを退避
		gbComboFlag	        :=	TRUE;
		giG_Code	        :=	'99';
		giMasKbn	        :=	0;
		TreeView.Enabled	:=	TRUE;
		Splitter.Enabled	:=	TRUE;
		P_Grid.Enabled		:=	TRUE;

		if ( MComboBox.ItemIndex <> 4 ) then
        begin
			gbKoujiFlag	:=	FALSE;
		end else
        begin
            // ↓↓↓以下の処理は不要

			gbKoujiFlag	            :=	TRUE;
			gbChangeFlg	            :=	TRUE;

			DSourceZitsu.DataSet	:=	MemZitsu;
			DZitsuGrid.DataSource.DataSet.First;

			B_Syousai.Enabled	    :=	FALSE;	    // 削除ﾎﾞﾀﾝの使用不可
			B_Delete.Enabled	    :=	FALSE;		// 削除ﾎﾞﾀﾝの使用不可
			MTab_N.Items[0].Enabled	:=	TRUE;		// 実在のTab使用不可
			DZitsuGrid.Enabled		:=	TRUE;		// 実在のGrid使用不可
			MTab_N.Items[1].Enabled	:=	FALSE;		// 細目のTab使用不可
			DSaimokuGrid.Enabled	:=	FALSE;		// 細目のGrid使用不可
			MTab_N.Items[2].Enabled	:=	FALSE;		// 合計のTab使用不可
			DGoukeiGrid.Enabled		:=	FALSE;		// 合計のGrid使用不可

			gbChangeFlg	            :=	FALSE;
    	    exit;
        end;
	end;

end;



//******************************************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*
//*		Event			:	OnHide
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
procedure TJNTCRP009001f.FormHide(Sender: TObject);
begin

    if ( uvHani.mjspre.IsPreView = TRUE ) then
        uvHani.mjspre.Hide
    else
		MjsBtnVisible(TJNTCRP009001f(Self),FALSE);

end;

//******************************************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*
//*		Event			:	OnActivate
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
procedure TJNTCRP009001f.FormActivate(Sender: TObject);
var
	AppPrm	:	TAppParam;
begin

	AppPrm.iAction		:=	ACTID_ACTIVEEND;
	AppPrm.pRecord		:=	Pointer(m_pRec);
	AppPrm.pActionParam	:=	nil;
	TMjsAppRecord(m_pRec^).m_pOwnerEntry(@AppPrm);

end;

//******************************************************************************************************
//*		Component		:	MI_Syusei ( TMenuItem )
//*
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
{	HIS0005
procedure TJNTCRP009001f.MI_SyuseiClick(Sender: TObject);
begin

	if (P_Grid.Visible = TRUE) then			//	Gridが表示されている時
	begin
		if (grTaikei.MasKbn = 1) and (grTaikei.Kbn = 0) then		//	実在時
			DZitsuGrid.SetFocus
		else if (grTaikei.MasKbn = 1) and (grTaikei.Kbn = 1) then	//	合計時
			DGoukeiGrid.SetFocus
		else if (grTaikei.MasKbn = 2) and (grTaikei.Kbn = 0) then	//	細目時
			DSaimokuGrid.SetFocus;
	end
	else
		ECode.SetFocus;

end;
}

//******************************************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							TreeViewでNodeの開閉処理
//*		Event			:	OnExpanded
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
procedure TJNTCRP009001f.TreeViewExpanded(Sender: TObject; Node: TTreeNode);
var
	wkRec	:	^TaikeiRec;
	iLoop	:	Integer;
begin

	if ( ACControl.Name = TreeView.Name ) then
	begin

		if ( Node = nil ) then Exit;

		wkRec   :=  Node.Data;

		if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
		begin
			TreeView.Items.BeginUpdate;

			for iLoop := 0 to Node.Count - 1 do
				Node.Item[0].Delete;

            MakeSaimokuKdomo(Node,wkRec.NCode); 

			TreeView.Items.EndUpdate;
		end;
	end;

end;

//******************************************************************************************************
//*		Proccess	:	子供の細目作成
//*		Name		:	H.Endo
//*		Date		:	2000/11/08
//*		Parameter	:	OyaNode		:	親のNode
//*						NCode		:	内部ｺｰﾄﾞ
//*		Return		:	子供の件数
//*		History		:	9999/99/99	X.Xxxx
//*                     2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//******************************************************************************************************
function TJNTCRP009001f.MakeSaimokuKdomo(OyaNode: TTreeNode; NCode: Extended): Integer;
var
	DmqTree		:	TMQuery;
	rTaikei 	:	^TaikeiRec;
	sDspName	:	String;
	KNode		:	TTreeNode;
	iCount		:	Integer;
begin

	iCount	:=	0;

	DmqTree := TMQuery.Create( Self );					        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );	    // DBとMQueryの接続

	with DmqTree do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                             ');
		SQL.Add('    MA.MasterKbn                   ');	// ﾏｽﾀ区分
		SQL.Add('   ,MA.SumKbn                      ');	// 実在/合計区分
        SQL.Add('   ,MA.GCode                       '); // 科目外部ｺｰﾄﾞ
		SQL.Add('   ,MA.SubCode                     ');	// 細目外部ｺｰﾄﾞ
		SQL.Add('   ,MA.LongName                    ');	// 正式名称
		SQL.Add('   ,MA.SimpleName                  ');	// 簡略名称
		SQL.Add('   ,MA.KoteiKbn                    ');	// 固定体系区分
		SQL.Add('   ,MB.DecoKbn                     ');	// 装飾区分
		SQL.Add('   ,MA.NCode                       ');	// 内部ｺｰﾄﾞ
        SQL.Add('   ,MA.CNCode                      '); // 科目別補助内部ｺｰﾄﾞ
        SQL.Add('   ,MA.Syokuchikbn                 '); // 諸口区分
        SQL.Add('   ,MA.CodeDigit                   '); // ｺｰﾄﾞ桁数
        SQL.Add('   ,MA.CodeAttr                    '); // ｺｰﾄﾞ属性
		SQL.Add('FROM    KmkMA MA                   '); // 勘定科目基本ﾏｽﾀ
		SQL.Add('       ,KmkMb MB                   ');	// 勘定科目詳細情報
		SQL.Add('WHERE MA.RDelKbn   = 0             '); // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
        SQL.Add('  AND MA.NCode     = :GCode        ');	// 内部ｺｰﾄﾞ
        SQL.Add('  AND MB.NCode     = :GCode        ');	// 内部ｺｰﾄﾞ
		SQL.Add('  AND MA.MasterKbn = 2             ');	// ﾏｽﾀ区分(2:細目科目)
		SQL.Add('  AND MB.MasterKbn = 2             ');	// ﾏｽﾀ区分(2:細目科目)
        SQL.Add('  AND MA.CNCode    = MB.CNCode     ');	// 細目ｺｰﾄﾞが同一

		// <076>
		//SQL.Add('ORDER BY MA.CNCode   DESC,         '); //
		//SQL.Add('         MB.CNCode DESC            '); //

		SQL.Add('ORDER BY MA.SubCode DESC           '); //

		ParamByName('GCode').AsFloat := NCode;

		Active := TRUE;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;
			Result	:=	0;
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			iCount	            :=	iCount	+	1;
			New(rTaikei);
			rTaikei.NCode		:=	GetFld('NCode')     .AsFloat;	                        // 科目内部ｺｰﾄﾞ
			rTaikei.CNCode      :=  GetFld('CNCode')    .AsFloat;                           // 細目内部ｺｰﾄﾞ
			rTaikei.GCode       :=  GetFld('GCode')     .AsInteger;                         // 科目外部ｺｰﾄﾞ
			rTaikei.SubCode     :=	fnSaimokuSetAttr(0,GetFld('SubCode').AsString,
													   GetFld('CodeAttr').AsInteger,
													   GetFld('CodeDigit').AsInteger);      // 細目科目ｺｰﾄﾞ;
			rTaikei.Kbn			:=	GetFld('SumKbn')    .AsInteger;	                        // 実在／合計区分
			rTaikei.Name		:=	GetFld('SimpleName').AsString;	                        // 簡略名称
			rTaikei.AddKbn		:=  0;						                                // 加算区分
			rTaikei.KoteiKbn	:=	GetFld('KoteiKbn')  .AsInteger;	                        // 固定体系区分
			rTaikei.MasKbn		:=  GetFld('MasterKbn') .AsInteger;	                        // ﾏｽﾀ区分(1:勘定科目、2:細目科目)
			rTaikei.ChildKbn	:=	FALSE;
			rTaikei.NotAdd		:=	1;
			rTaikei.Syokuchi    :=  GetFld('SyokuchiKbn').AsInteger;                        // 諸口区分
			rTaikei.CodeAttr    :=  GetFld('CodeAttr')   .AsInteger;
			rTaikei.CodeDigit   :=  GetFld('CodeDigit')  .AsInteger;
			sDspName	        :=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
			KNode               :=  TreeView.Items.AddChildObjectFirst( OyaNode,
																		MakeDspString_Sai(rTaikei.SubCode,
																						  sDspName,
																						  rTaikei.CodeAttr,
																						  rTaikei.CodeDigit
																						 ),
																		rTaikei
																	   );
			KNode.ImageIndex 	:=  3;
			KNode.SelectedIndex :=  10;
			next;
		end;
	end;

	Result	:=	iCount;

	DmqTree.Close;
	DmqTree.Free;

end;

//******************************************************************************
//*		Proccess	:	細目の同一ﾚﾍﾞﾙを表示
//*		Name		:	H.Endo
//*		Date		:	2000/10/03
//*		Parameter	:	Code	:	外部ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*                     2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//*
//******************************************************************************
procedure TJNTCRP009001f.LevelDspSaimoku(NCode: Extended);
var
	DmqDsp		:	TMQuery;
	iFusenKbn	:	Integer;
	sCmnt		:	String;
    iIdx        :   Integer;    // <073>
begin
	DSourceSai.DataSet		:=	nil;

    ChangeCodeAttr(NCode);                  // <035>属性対応
    // MQueryの構築
	DmqDsp := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDsp );

	MemSai.Close;
	MemSai.Open;

	with DmqDsp do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                     '
            +   '    NCode                  '   // 科目内部ｺｰﾄﾞ
            +   '   ,CNCode                 '   // 細目内部ｺｰﾄﾞ
            +   '   ,GCode                  '   // 科目外部ｺｰﾄﾞ
		    +   '   ,SubCode                '	// 細目外部ｺｰﾄﾞ
		    +   '   ,Renso                  '	// 連想ｼﾝﾎﾞﾙ
		    +   '   ,LongName               '	// 正式名称
		    +   '   ,SimpleName             '	// 簡略名称
            +   '   ,CodeAttr               '   // ｺｰﾄﾞ属性
            +   '   ,CodeDigit              '   // ｺｰﾄﾞ桁数
		    +   'FROM KmkMA                 '	// 勘定科目基本ﾏｽﾀ
            +   'WHERE RDelKbn   = 0        '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		    +   '  AND MasterKbn = 2        '	// ﾏｽﾀ区分
		    +   '  AND NCode     = :ExNCode '	// 科目内部ｺｰﾄﾞ
		    +   'ORDER BY SubCode           ');

		ParamByName('ExNCode').AsFloat := NCode;

		// ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqDsp);
			DmqDsp.Close;
			DmqDsp.Free;
			Exit;
		end;

		SetLength(m_aCmnt_Sai,0);	    	        // 配列をｸﾘｱ
        SetLength(m_aCmnt_Sai,DmqDsp.RecordCount);  // <073>
        iIdx := 0;                                  // <073>

		while ( EOF <> TRUE ) do
		begin
			gbT_FusenFlag	:=	TRUE;
			MemSai.Append;
            MemSai.FieldByName('NCode')     .AsFloat    :=  GetFld('NCode')     .AsFloat;   // 科目内部ｺｰﾄﾞ
            MemSai.FieldByName('CNCode')    .AsFloat    :=  GetFld('CNCode')    .AsFloat;   // 細目内部ｺｰﾄﾞ
			MemSai.FieldByName('SCode')     .AsString	:=	fnSaimokuSetAttr(0,GetFld('SubCode').AsString,
                                                                               GetFld('CodeAttr').AsInteger,
                                                                               GetFld('CodeDigit').AsInteger); // 細目ｺｰﾄﾞ(属性対応)
			MemSai.FieldByName('SRen')      .AsString	:=	GetFld('Renso')     .AsString;  // 連想ｼﾝﾎﾞﾙ
			MemSai.FieldByName('SLongName') .AsString   :=	GetFld('LongName')  .AsString;  // 正式名称
			MemSai.FieldByName('SSName')    .AsString	:=	GetFld('SimpleName').AsString;  // 簡略名称

			iFusenKbn	                                :=	FusenCheck(2,
                                                                       GetFld('NCode').AsFloat,
                                                                       GetFld('CNCode').AsFloat,
                                                                       sCmnt);
// <073>	SetLength(m_aCmnt_Sai,Length(m_aCmnt_Sai) + 1);
// <073>    m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].NCode    :=  GetFld('NCode').AsFloat;
// <073>	m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].SubNCode :=  GetFld('CNCode').AsFloat;
// <073>	m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].Cmnt     :=  sCmnt;
            inc(iIdx);                                                  // <073>
            m_aCmnt_Sai[iIdx-1].NCode    :=  GetFld('NCode').AsFloat;   // <073>
            m_aCmnt_Sai[iIdx-1].SubNCode :=  GetFld('CNCode').AsFloat;  // <073>
            m_aCmnt_Sai[iIdx-1].Cmnt     :=  sCmnt;                     // <073>
			FusenDsp(iFusenKbn,SAIMOKU);
			MemSai.Post;
			gbT_FusenFlag	:=	FALSE;

			NEXT;
		end;
	end;

	DmqDsp.Close;
	DmqDsp.Free;

	DSourceSai.DataSet		:=	MemSai;
	DSaimokuGrid.DataSource.DataSet.First;

end;

//******************************************************************************************************
//*		Component		:
//*							ComboDefault表示
//*		Event			:
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
procedure TJNTCRP009001f.WMOnPaint(var Msg: TMessage);
begin

	// 初回だけ
	if ( bListDraw ) then
    begin
		MComboBox.DroppedDown   :=  TRUE;
		bListDraw               :=  FALSE;
	end;

end;

//******************************************************************************************************
//*		Proccess	:	分析ｺｰﾄﾞﾃﾞﾌｫﾙﾄ設定処理
//*		Name		:	H.Endo
//*		Date		:	2000/11/21
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//******************************************************************************************************
procedure TJNTCRP009001f.BunsekiDefaultSet();
begin
{	要約ｺｰﾄﾞ、固定費ｺｰﾄﾞ、変動費ｺｰﾄﾞの数値100番代は100で割ってSKmkMAのﾏｽﾀ区分で
	使用するためにセットしている
	400　→　SKmkMAのﾏｽﾀ区分　4：要約B/S科目
	500　→　SKmkMAのﾏｽﾀ区分　5：要約P/L科目
	600　→　SKmkMAのﾏｽﾀ区分　6：固定変動科目
}

	//	現金
	aDefault[0].Code		    :=	1;	//	分析ｺｰﾄﾞ
	aDefault[0].SeiZan		    :=	0;	//	借方
	aDefault[0].BPKbn		    :=	0;	//	B/S
	aDefault[0].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[0].TaxKbn		    :=  0;	//	対象外
	aDefault[0].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[0].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[0].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	当座預金
	aDefault[1].Code		    :=	2;	//	分析ｺｰﾄﾞ
	aDefault[1].SeiZan		    :=	0;	//	借方
	aDefault[1].BPKbn		    :=	0;	//	B/S
	aDefault[1].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[1].TaxKbn		    :=  0;	//	対象外
	aDefault[1].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[1].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[1].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	普通預金
	aDefault[2].Code		    :=	3;	//	分析ｺｰﾄﾞ
	aDefault[2].SeiZan		    :=	0;	//	借方
	aDefault[2].BPKbn		    :=	0;	//	B/S
	aDefault[2].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[2].TaxKbn		    :=  0;	//	対象外
	aDefault[2].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[2].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[2].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	通知預金等
	aDefault[3].Code		    :=	4;	//	分析ｺｰﾄﾞ
	aDefault[3].SeiZan		    :=	0;	//	借方
	aDefault[3].BPKbn		    :=	0;	//	B/S
	aDefault[3].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[3].TaxKbn		    :=  0;	//	対象外
	aDefault[3].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[3].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[3].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	外貨預金
	aDefault[4].Code		    :=	5;	//	分析ｺｰﾄﾞ
	aDefault[4].SeiZan		    :=	0;	//	借方
	aDefault[4].BPKbn		    :=	0;	//	B/S
	aDefault[4].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[4].TaxKbn		    :=  0;	//	対象外
	aDefault[4].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[4].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[4].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[5].Code		    :=	6;	//	分析ｺｰﾄﾞ
	aDefault[5].SeiZan		    :=	0;	//	借方
	aDefault[5].BPKbn		    :=	0;	//	B/S
	aDefault[5].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[5].TaxKbn		    :=  0;	//	対象外
	aDefault[5].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[5].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[5].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	その他流動性預金
	aDefault[6].Code		    :=	7;	//	分析ｺｰﾄﾞ
	aDefault[6].SeiZan		    :=	0;	//	借方
	aDefault[6].BPKbn		    :=	0;	//	B/S
	aDefault[6].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[6].TaxKbn		    :=  0;	//	対象外
	aDefault[6].YouyakuCode	    :=  401;//	要約ｺｰﾄﾞ  (1:流動性現預金)
	aDefault[6].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[6].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	定期預金
	aDefault[7].Code		    :=	8;	//	分析ｺｰﾄﾞ
	aDefault[7].SeiZan		    :=	0;	//	借方
	aDefault[7].BPKbn		    :=	0;	//	B/S
	aDefault[7].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[7].TaxKbn		    :=  0;	//	対象外
	aDefault[7].YouyakuCode	    :=  402;//	要約ｺｰﾄﾞ  (2:固定性預金)
	aDefault[7].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[7].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	定期積金
	aDefault[8].Code		    :=	9;	//	分析ｺｰﾄﾞ
	aDefault[8].SeiZan		    :=	0;	//	借方
	aDefault[8].BPKbn		    :=	0;	//	B/S
	aDefault[8].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[8].TaxKbn		    :=  0;	//	対象外
	aDefault[8].YouyakuCode	    :=  402;//	要約ｺｰﾄﾞ  (2:固定性預金)
	aDefault[8].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[8].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	受取手形
	aDefault[9].Code		    :=	10;	//	分析ｺｰﾄﾞ
	aDefault[9].SeiZan		    :=	0;	//	借方
	aDefault[9].BPKbn		    :=	0;	//	B/S
	aDefault[9].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[9].TaxKbn		    :=  0;	//	対象外
	aDefault[9].YouyakuCode	    :=  403;//	要約ｺｰﾄﾞ  (3:受取手形)
	aDefault[9].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[9].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	割引手形
	aDefault[10].Code		    :=	11;	//	分析ｺｰﾄﾞ
	aDefault[10].SeiZan		    :=	1;	//	貸方
	aDefault[10].BPKbn		    :=	0;	//	B/S
	aDefault[10].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[10].Mainasu	    :=	1;	//	ﾏｲﾅｽ符号あり
	aDefault[10].TaxKbn		    :=  0;	//	対象外
	aDefault[10].YouyakuCode    :=  403;//	要約ｺｰﾄﾞ  (3:受取手形)
	aDefault[10].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[10].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	売掛金
	aDefault[11].Code		    :=	12;	//	分析ｺｰﾄﾞ
	aDefault[11].SeiZan		    :=	0;	//	借方
	aDefault[11].BPKbn		    :=	0;	//	B/S
	aDefault[11].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[11].TaxKbn		    :=  0;	//	対象外
	aDefault[11].YouyakuCode    :=  404;//	要約ｺｰﾄﾞ  (4:売掛金)
	aDefault[11].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[11].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	商品
	aDefault[12].Code		    :=	13;	//	分析ｺｰﾄﾞ
	aDefault[12].SeiZan		    :=	0;	//	借方
	aDefault[12].BPKbn		    :=	0;	//	B/S
	aDefault[12].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[12].TaxKbn		    :=  0;	//	対象外
	aDefault[12].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[12].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[12].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	製品
	aDefault[13].Code		    :=	14;	//	分析ｺｰﾄﾞ
	aDefault[13].SeiZan		    :=	0;	//	借方
	aDefault[13].BPKbn		    :=	0;	//	B/S
	aDefault[13].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[13].TaxKbn		    :=  0;	//	対象外
	aDefault[13].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[13].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[13].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	材料
	aDefault[14].Code		    :=	15;	//	分析ｺｰﾄﾞ
	aDefault[14].SeiZan		    :=	0;	//	借方
	aDefault[14].BPKbn		    :=	0;	//	B/S
	aDefault[14].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[14].TaxKbn		    :=  0;	//	対象外
	aDefault[14].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[14].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[14].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	仕掛品
	aDefault[15].Code		    :=	16;	//	分析ｺｰﾄﾞ
	aDefault[15].SeiZan		    :=	0;	//	借方
	aDefault[15].BPKbn		    :=	0;	//	B/S
	aDefault[15].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[15].TaxKbn		    :=  0;	//	対象外
	aDefault[15].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[15].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[15].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	貯蔵品
	aDefault[16].Code		    :=	17;	//	分析ｺｰﾄﾞ
	aDefault[16].SeiZan		    :=	0;	//	借方
	aDefault[16].BPKbn		    :=	0;	//	B/S
	aDefault[16].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[16].TaxKbn		    :=  0;	//	対象外
	aDefault[16].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[16].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[16].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[17].Code		    :=	18;	//	分析ｺｰﾄﾞ
	aDefault[17].SeiZan		    :=	0;	//	借方
	aDefault[17].BPKbn		    :=	0;	//	B/S
	aDefault[17].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[17].TaxKbn		    :=  0;	//	対象外
	aDefault[17].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[17].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[17].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[18].Code		    :=	19;	//	分析ｺｰﾄﾞ
	aDefault[18].SeiZan		    :=	0;	//	借方
	aDefault[18].BPKbn		    :=	0;	//	B/S
	aDefault[18].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[18].TaxKbn		    :=  0;	//	対象外
	aDefault[18].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[18].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[18].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	その他棚卸資産
	aDefault[19].Code		    :=	20;	//	分析ｺｰﾄﾞ
	aDefault[19].SeiZan		    :=	0;	//	借方
	aDefault[19].BPKbn		    :=	0;	//	B/S
	aDefault[19].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[19].TaxKbn		    :=  0;	//	対象外
	aDefault[19].YouyakuCode    :=  405;//	要約ｺｰﾄﾞ  (5:棚卸資産)
	aDefault[19].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[19].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	有価証券
	aDefault[20].Code		    :=	21;	//	分析ｺｰﾄﾞ
	aDefault[20].SeiZan		    :=	0;	//	借方
	aDefault[20].BPKbn		    :=	0;	//	B/S
	aDefault[20].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[20].TaxKbn		    :=  0;	//	対象外
	aDefault[20].YouyakuCode    :=  406;//	要約ｺｰﾄﾞ  (6:その他流動資産)
	aDefault[20].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[20].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
//HIS0023
	//	前途金
	aDefault[21].Code		    :=	22;	//	分析ｺｰﾄﾞ
	aDefault[21].SeiZan		    :=	0;	//	借方
	aDefault[21].BPKbn		    :=	0;	//	B/S
	aDefault[21].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[21].TaxKbn		    :=  0;	//	対象外
	aDefault[21].YouyakuCode    :=  406;//	要約ｺｰﾄﾞ  (6:その他流動資産)
	aDefault[21].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[21].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	仮払金
	aDefault[22].Code		    :=	23;	//	分析ｺｰﾄﾞ
	aDefault[22].SeiZan		    :=	0;	//	借方
	aDefault[22].BPKbn		    :=	0;	//	B/S
	aDefault[22].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[22].TaxKbn		    :=  0;	//	対象外
	aDefault[22].YouyakuCode    :=  406;//	要約ｺｰﾄﾞ  (6:その他流動資産)
	aDefault[22].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[22].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
//*******
	//	その他流動資産
	aDefault[23].Code		    :=	24;	//	分析ｺｰﾄﾞ
	aDefault[23].SeiZan		    :=	0;	//	借方
	aDefault[23].BPKbn		    :=	0;	//	B/S
	aDefault[23].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[23].TaxKbn		    :=  0;	//	対象外
	aDefault[23].YouyakuCode    :=  406;//	要約ｺｰﾄﾞ  (6:その他流動資産)
	aDefault[23].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[23].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	建物
	aDefault[24].Code		    :=	25;	//	分析ｺｰﾄﾞ
	aDefault[24].SeiZan		    :=	0;	//	借方
	aDefault[24].BPKbn		    :=	0;	//	B/S
	aDefault[24].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[24].TaxKbn		    :=  0;	//	対象外
	aDefault[24].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[24].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[24].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	建築物
	aDefault[25].Code		    :=	26;	//	分析ｺｰﾄﾞ
	aDefault[25].SeiZan		    :=	0;	//	借方
	aDefault[25].BPKbn	    	:=	0;	//	B/S
	aDefault[25].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[25].TaxKbn		    :=  0;	//	対象外
	aDefault[25].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[25].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[25].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	車両運搬具
	aDefault[26].Code		    :=	27;	//	分析ｺｰﾄﾞ
	aDefault[26].SeiZan		    :=	0;	//	借方
	aDefault[26].BPKbn		    :=	0;	//	B/S
	aDefault[26].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[26].TaxKbn		    :=  0;	//	対象外
	aDefault[26].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[26].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[26].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	土地
	aDefault[27].Code		    :=	28;	//	分析ｺｰﾄﾞ
	aDefault[27].SeiZan		    :=	0;	//	借方
	aDefault[27].BPKbn		    :=	0;	//	B/S
	aDefault[27].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[27].TaxKbn		    :=  0;	//	対象外
	aDefault[27].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[27].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[27].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	機械装置
	aDefault[28].Code		    :=	29;	//	分析ｺｰﾄﾞ
	aDefault[28].SeiZan		    :=	0;	//	借方
	aDefault[28].BPKbn		    :=	0;	//	B/S
	aDefault[28].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[28].TaxKbn		    :=  0;	//	対象外
	aDefault[28].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[28].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[28].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	建設仮勘定
	aDefault[29].Code		    :=	30;	//	分析ｺｰﾄﾞ
	aDefault[29].SeiZan		    :=	0;	//	借方
	aDefault[29].BPKbn		    :=	0;	//	B/S
	aDefault[29].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[29].TaxKbn		    :=  0;	//	対象外
	aDefault[29].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[29].KoteiCode  	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[29].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	その他有形固定資産
	aDefault[30].Code		    :=	31;	//	分析ｺｰﾄﾞ
	aDefault[30].SeiZan		    :=	0;	//	借方
	aDefault[30].BPKbn		    :=	0;	//	B/S
	aDefault[30].Kisyuzan	    :=	1;	//	期首残あり
	aDefault[30].TaxKbn		    :=  0;	//	対象外
	aDefault[30].YouyakuCode    :=  408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[30].KoteiCode	    :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[30].HendoCode	    :=  0;	//	変動費ｺｰﾄﾞ
	//	減価償却累計額
	aDefault[31].Code		:=	32;	//	分析ｺｰﾄﾞ
	aDefault[31].SeiZan		:=	1;	//	貸方
	aDefault[31].BPKbn		:=	0;	//	B/S
	aDefault[31].Kisyuzan	:=	1;	//	期首残あり
	aDefault[31].Mainasu	:=	1;	//	ﾏｲﾅｽ符号あり
	aDefault[31].TaxKbn		:=  0;	//	対象外
	aDefault[31].YouyakuCode := 408;//	要約ｺｰﾄﾞ  (8:有形固定資産)
	aDefault[31].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[31].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	無形固定資産
	aDefault[32].Code		:=	33;	//	分析ｺｰﾄﾞ
	aDefault[32].SeiZan		:=	0;	//	借方
	aDefault[32].BPKbn		:=	0;	//	B/S
	aDefault[32].Kisyuzan	:=	1;	//	期首残あり
	aDefault[32].TaxKbn		:=  0;	//	対象外
	aDefault[32].YouyakuCode := 409;//	要約ｺｰﾄﾞ  (9:無形固定資産)
	aDefault[32].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[32].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	投資
	aDefault[33].Code		:=	34;	//	分析ｺｰﾄﾞ
	aDefault[33].SeiZan		:=	0;	//	借方
	aDefault[33].BPKbn		:=	0;	//	B/S
	aDefault[33].Kisyuzan	:=	1;	//	期首残あり
	aDefault[33].TaxKbn		:=  0;	//	対象外
	aDefault[33].YouyakuCode := 410;//	要約ｺｰﾄﾞ  (10:投資)
	aDefault[33].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[33].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	繰延資産
	aDefault[34].Code		:=	35;	//	分析ｺｰﾄﾞ
	aDefault[34].SeiZan		:=	0;	//	借方
	aDefault[34].BPKbn		:=	0;	//	B/S
	aDefault[34].Kisyuzan	:=	1;	//	期首残あり
	aDefault[34].TaxKbn		:=  0;	//	対象外
	aDefault[34].YouyakuCode := 412;//	要約ｺｰﾄﾞ  (12:繰延資産)
	aDefault[34].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[34].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[35].Code		:=	36;	//	分析ｺｰﾄﾞ
	aDefault[35].SeiZan		:=	0;	//	借方
	aDefault[35].BPKbn		:=	0;	//	B/S
	aDefault[35].Kisyuzan	:=	1;	//	期首残あり
	aDefault[35].TaxKbn		:=  0;	//	対象外
	aDefault[35].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[35].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[35].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[36].Code		:=	37;	//	分析ｺｰﾄﾞ
	aDefault[36].SeiZan		:=	0;	//	借方
	aDefault[36].BPKbn		:=	0;	//	B/S
	aDefault[36].Kisyuzan	:=	1;	//	期首残あり
	aDefault[36].TaxKbn		:=  0;	//	対象外
	aDefault[36].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[36].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[36].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	支払手形
	aDefault[37].Code		:=	38;	//	分析ｺｰﾄﾞ
	aDefault[37].SeiZan		:=	1;	//	貸方
	aDefault[37].BPKbn		:=	0;	//	B/S
	aDefault[37].Kisyuzan	:=	1;	//	期首残あり
	aDefault[37].TaxKbn		:=  0;	//	対象外
	aDefault[37].YouyakuCode := 414;//	要約ｺｰﾄﾞ  (14:支払手形)
	aDefault[37].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[37].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	買掛金
	aDefault[38].Code		:=	39;	//	分析ｺｰﾄﾞ
	aDefault[38].SeiZan		:=	1;	//	貸方
	aDefault[38].BPKbn		:=	0;	//	B/S
	aDefault[38].Kisyuzan	:=	1;	//	期首残あり
	aDefault[38].TaxKbn		:=  0;	//	対象外
	aDefault[38].YouyakuCode := 415;//	要約ｺｰﾄﾞ  (15:買掛金)
	aDefault[38].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[38].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	短期借入金
	aDefault[39].Code		:=	40;	//	分析ｺｰﾄﾞ
	aDefault[39].SeiZan		:=	1;	//	貸方
	aDefault[39].BPKbn		:=	0;	//	B/S
	aDefault[39].Kisyuzan	:=	1;	//	期首残あり
	aDefault[39].TaxKbn		:=  0;	//	対象外
	aDefault[39].YouyakuCode := 416;//	要約ｺｰﾄﾞ  (16:借入金)
	aDefault[39].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[39].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	未払金
	aDefault[40].Code		:=	41;	//	分析ｺｰﾄﾞ
	aDefault[40].SeiZan		:=	1;	//	貸方
	aDefault[40].BPKbn		:=	0;	//	B/S
	aDefault[40].Kisyuzan	:=	1;	//	期首残あり
	aDefault[40].TaxKbn		:=  0;	//	対象外
	aDefault[40].YouyakuCode := 417;//	要約ｺｰﾄﾞ  (17:その他流動負債)
	aDefault[40].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[40].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	未払費用
	aDefault[41].Code		:=	42;	//	分析ｺｰﾄﾞ
	aDefault[41].SeiZan		:=	1;	//	貸方
	aDefault[41].BPKbn		:=	0;	//	B/S
	aDefault[41].Kisyuzan	:=	1;	//	期首残あり
	aDefault[41].TaxKbn		:=  0;	//	対象外
	aDefault[41].YouyakuCode := 417;//	要約ｺｰﾄﾞ  (17:その他流動負債)
	aDefault[41].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[41].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
//	HIS0023
	//	前受金
	aDefault[42].Code		:=	43;	//	分析ｺｰﾄﾞ
	aDefault[42].SeiZan		:=	1;	//	貸方
	aDefault[42].BPKbn		:=	0;	//	B/S
	aDefault[42].Kisyuzan	:=	1;	//	期首残あり
	aDefault[42].TaxKbn		:=  0;	//	対象外
	aDefault[42].YouyakuCode := 417;//	要約ｺｰﾄﾞ  (17:その他流動負債)
	aDefault[42].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[42].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	仮受金
	aDefault[43].Code		:=	44;	//	分析ｺｰﾄﾞ
	aDefault[43].SeiZan		:=	1;	//	貸方
	aDefault[43].BPKbn		:=	0;	//	B/S
	aDefault[43].Kisyuzan	:=	1;	//	期首残あり
	aDefault[43].TaxKbn		:=  0;	//	対象外
	aDefault[43].YouyakuCode := 417;//	要約ｺｰﾄﾞ  (17:その他流動負債)
	aDefault[43].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[43].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
//*********
	//	その他流動負債
	aDefault[44].Code		:=	45;	//	分析ｺｰﾄﾞ
	aDefault[44].SeiZan		:=	1;	//	貸方
	aDefault[44].BPKbn		:=	0;	//	B/S
	aDefault[44].Kisyuzan	:=	1;	//	期首残あり
	aDefault[44].TaxKbn		:=  0;	//	対象外
	aDefault[44].YouyakuCode := 417;//	要約ｺｰﾄﾞ  (17:その他流動負債)
	aDefault[44].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[44].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	長期借入金
	aDefault[45].Code		:=	46;	//	分析ｺｰﾄﾞ
	aDefault[45].SeiZan		:=	1;	//	貸方
	aDefault[45].BPKbn		:=	0;	//	B/S
	aDefault[45].Kisyuzan	:=	1;	//	期首残あり
	aDefault[45].TaxKbn		:=  0;	//	対象外
	aDefault[45].YouyakuCode := 419;//	要約ｺｰﾄﾞ  (19:固定負債)
	aDefault[45].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[45].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	社債
	aDefault[46].Code		:=	47;	//	分析ｺｰﾄﾞ
	aDefault[46].SeiZan		:=	1;	//	貸方
	aDefault[46].BPKbn		:=	0;	//	B/S
	aDefault[46].Kisyuzan	:=	1;	//	期首残あり
	aDefault[46].TaxKbn		:=  0;	//	対象外
	aDefault[46].YouyakuCode := 419;//	要約ｺｰﾄﾞ  (19:固定負債)
	aDefault[46].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[46].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	退職給与引当金
	aDefault[47].Code		:=	48;	//	分析ｺｰﾄﾞ
	aDefault[47].SeiZan		:=	1;	//	貸方
	aDefault[47].BPKbn		:=	0;	//	B/S
	aDefault[47].Kisyuzan	:=	1;	//	期首残あり
	aDefault[47].TaxKbn		:=  0;	//	対象外
	aDefault[47].YouyakuCode := 419;//	要約ｺｰﾄﾞ  (19:固定負債)
	aDefault[47].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[47].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[48].Code		:=	49;	//	分析ｺｰﾄﾞ
	aDefault[48].SeiZan		:=	1;	//	貸方
	aDefault[48].BPKbn		:=	0;	//	B/S
	aDefault[48].Kisyuzan	:=	1;	//	期首残あり
	aDefault[48].TaxKbn		:=  0;	//	対象外
	aDefault[48].YouyakuCode := 419;//	要約ｺｰﾄﾞ  (19:固定負債)
	aDefault[48].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[48].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	その他固定負債
	aDefault[49].Code		:=	50;	//	分析ｺｰﾄﾞ
	aDefault[49].SeiZan		:=	1;	//	貸方
	aDefault[49].BPKbn		:=	0;	//	B/S
	aDefault[49].Kisyuzan	:=	1;	//	期首残あり
	aDefault[49].TaxKbn		:=  0;	//	対象外
	aDefault[49].YouyakuCode := 419;//	要約ｺｰﾄﾞ  (19:固定負債)
	aDefault[49].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[49].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	引当金
	aDefault[50].Code		:=	51;	//	分析ｺｰﾄﾞ
	aDefault[50].SeiZan		:=	1;	//	貸方
	aDefault[50].BPKbn		:=	0;	//	B/S
	aDefault[50].Kisyuzan	:=	1;	//	期首残あり
	aDefault[50].TaxKbn		:=  0;	//	対象外
	aDefault[50].YouyakuCode := 420;//	要約ｺｰﾄﾞ  (20:引当金)
	aDefault[50].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[50].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	少数株主持分
	aDefault[51].Code		:=	52;	//	分析ｺｰﾄﾞ
	aDefault[51].SeiZan		:=	1;	//	貸方
	aDefault[51].BPKbn		:=	0;	//	B/S
	aDefault[51].Kisyuzan	:=	1;	//	期首残あり
	aDefault[51].TaxKbn		:=  0;	//	対象外
    // <079> upd ↓
	//aDefault[51].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	//aDefault[51].YouyakuCode := 420;	//	要約ｺｰﾄﾞ  (20:引当金)       //<125>
    aDefault[51].YouyakuCode := 423;    //	要約ｺｰﾄﾞ  (23:他株主資本)   //<125>
    // <079> upd ↑
	aDefault[51].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[51].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	資本金
	aDefault[52].Code		:=	53;	//	分析ｺｰﾄﾞ
	aDefault[52].SeiZan		:=	1;	//	貸方
	aDefault[52].BPKbn		:=	0;	//	B/S
	aDefault[52].Kisyuzan	:=	1;	//	期首残あり
	aDefault[52].TaxKbn		:=  0;	//	対象外
	aDefault[52].YouyakuCode := 422;//	要約ｺｰﾄﾞ  (22:資本金)
	aDefault[52].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[52].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	資本剰余金
	aDefault[53].Code		:=	54;	//	分析ｺｰﾄﾞ
	aDefault[53].SeiZan		:=	1;	//	貸方
	aDefault[53].BPKbn		:=	0;	//	B/S
	aDefault[53].Kisyuzan	:=	1;	//	期首残あり
	aDefault[53].TaxKbn		:=  0;	//	対象外
	aDefault[53].YouyakuCode := 423;//	要約ｺｰﾄﾞ  (23:剰余金)
	aDefault[53].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[53].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	利益剰余金
	aDefault[54].Code		:=	55;	//	分析ｺｰﾄﾞ
	aDefault[54].SeiZan		:=	1;	//	貸方
	aDefault[54].BPKbn		:=	0;	//	B/S
	aDefault[54].Kisyuzan	:=	1;	//	期首残あり
	aDefault[54].TaxKbn		:=  0;	//	対象外
	aDefault[54].YouyakuCode := 423;//	要約ｺｰﾄﾞ  (23:剰余金)
	aDefault[54].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[54].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	自己株式
	aDefault[55].Code		:=	56;	//	分析ｺｰﾄﾞ
	aDefault[55].SeiZan		:=	1;	//	貸方
	aDefault[55].BPKbn		:=	0;	//	B/S
	aDefault[55].Kisyuzan	:=	1;	//	期首残あり
	aDefault[55].TaxKbn		:=  0;	//	対象外
	aDefault[55].YouyakuCode := 423;//	要約ｺｰﾄﾞ  (23:剰余金)
	aDefault[55].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[55].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	評価差額等
	aDefault[56].Code		:=	57;	//	分析ｺｰﾄﾞ
	aDefault[56].SeiZan		:=	1;	//	貸方
	aDefault[56].BPKbn		:=	0;	//	B/S
	aDefault[56].Kisyuzan	:=	1;	//	期首残あり
	aDefault[56].TaxKbn		:=  0;	//	対象外
	aDefault[56].YouyakuCode := 424;//	要約ｺｰﾄﾞ  (24:評価差額金)
	aDefault[56].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[56].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	事業主貸
	aDefault[57].Code		:=	58;	//	分析ｺｰﾄﾞ
	aDefault[57].SeiZan		:=	0;	//	借方
	aDefault[57].BPKbn		:=	0;	//	B/S
	aDefault[57].Kisyuzan	:=	0;	//	期首残なし
	aDefault[57].TaxKbn		:=  0;	//	対象外
    // <079> upd ↓
	//aDefault[57].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[57].YouyakuCode := 422;	//	要約ｺｰﾄﾞ
    // <079> upd ↑
	aDefault[57].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[57].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	事業主借
	aDefault[58].Code		:=	59;	//	分析ｺｰﾄﾞ
	aDefault[58].SeiZan		:=	1;	//	貸方
	aDefault[58].BPKbn		:=	0;	//	B/S
	aDefault[58].Kisyuzan	:=	0;	//	期首残なし
	aDefault[58].TaxKbn		:=  0;	//	対象外
    // <079> upd ↓
	//aDefault[58].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[58].YouyakuCode := 422;	//	要約ｺｰﾄﾞ
    // <079> upd ↑
	aDefault[58].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[58].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	借方未処分項目
	aDefault[59].Code		:=	98;	//	分析ｺｰﾄﾞ
	aDefault[59].SeiZan		:=	0;	//	借方
	aDefault[59].BPKbn		:=	0;	//	B/S
	aDefault[59].Kisyuzan	:=	1;	//	期首残あり
	aDefault[59].TaxKbn		:=  0;	//	対象外
	aDefault[59].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[59].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[59].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	貸方未処分項目
	aDefault[60].Code		:=	99;	//	分析ｺｰﾄﾞ
	aDefault[60].SeiZan		:=	1;	//	貸方
	aDefault[60].BPKbn		:=	0;	//	B/S
	aDefault[60].Kisyuzan	:=	1;	//	期首残あり
	aDefault[60].TaxKbn		:=  0;	//	対象外
	aDefault[60].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[60].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[60].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	売上高
	aDefault[61].Code		:=	101;//	分析ｺｰﾄﾞ
	aDefault[61].SeiZan		:=	1;	//	貸方
	aDefault[61].BPKbn		:=	1;	//	P/L
	aDefault[61].Kisyuzan	:=	0;	//	期首残なし
	aDefault[61].TaxKbn		:=	1;	//	売上
	aDefault[61].YouyakuCode := 501;//	要約ｺｰﾄﾞ  (1:純売上高)
	aDefault[61].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[61].HendoCode	:=  601;//	変動費ｺｰﾄﾞ
	//	兼業売上高
	aDefault[62].Code		:=	102;//	分析ｺｰﾄﾞ
	aDefault[62].SeiZan		:=	1;	//	貸方
	aDefault[62].BPKbn		:=	1;	//	P/L
	aDefault[62].Kisyuzan	:=	0;	//	期首残なし
	aDefault[62].TaxKbn		:=	1;	//	売上
	aDefault[62].YouyakuCode := 501;//	要約ｺｰﾄﾞ  (1:純売上高)
	aDefault[62].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[62].HendoCode	:=  601;//	変動費ｺｰﾄﾞ(1:純売上高)
	//	商品期首棚卸
	aDefault[63].Code		:=	103;//	分析ｺｰﾄﾞ
	aDefault[63].SeiZan		:=	0;	//	借方
	aDefault[63].BPKbn		:=	1;	//	P/L
	aDefault[63].Kisyuzan	:=	0;	//	期首残なし
	aDefault[63].Shiwake	:=	1;	//	正残側のみ
	aDefault[63].TaxKbn		:=	2;	//	仕入
	aDefault[63].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[63].YouyakuCode := 502;//	要約ｺｰﾄﾞ  (2:期首棚卸高)
	aDefault[63].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[63].HendoCode	:=  602;//	変動費ｺｰﾄﾞ(2:期首棚卸高)
	//	商品仕入
	aDefault[64].Code		:=	104;//	分析ｺｰﾄﾞ
	aDefault[64].SeiZan		:=	0;	//	借方
	aDefault[64].BPKbn		:=	1;	//	P/L
	aDefault[64].Kisyuzan	:=	0;	//	期首残なし
	aDefault[64].TaxKbn		:=	2;	//	仕入
	aDefault[64].YouyakuCode := 503;//	要約ｺｰﾄﾞ  (3:商品仕入)
	aDefault[64].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[64].HendoCode	:=  603;//	変動費ｺｰﾄﾞ(3:商品仕入)
	//	商品期末棚卸
	aDefault[65].Code		:=	105;//	分析ｺｰﾄﾞ
	aDefault[65].SeiZan		:=	1;	//	貸方
	aDefault[65].BPKbn		:=	1;	//	P/L
	aDefault[65].Kisyuzan	:=	0;	//	期首残なし
	aDefault[65].TaxKbn		:=	2;	//	仕入
	aDefault[65].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[65].YouyakuCode := 508;//	要約ｺｰﾄﾞ  (8:期末棚卸高)
	aDefault[65].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[65].HendoCode	:=  610;//	変動費ｺｰﾄﾞ(10:期末棚卸高)
	//	材料期首棚卸
	aDefault[66].Code		:=	106;//	分析ｺｰﾄﾞ
	aDefault[66].SeiZan		:=	0;	//	借方
	aDefault[66].BPKbn		:=	1;	//	P/L
	aDefault[66].Kisyuzan	:=	0;	//	期首残なし
	aDefault[66].Shiwake	:=	1;	//	正残側のみ
	aDefault[66].TaxKbn		:=	2;	//	仕入
	aDefault[66].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[66].YouyakuCode := 502;//	要約ｺｰﾄﾞ  (2:期首棚卸高)
	aDefault[66].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[66].HendoCode	:=  602;//	変動費ｺｰﾄﾞ(2:期首棚卸高)
	//	材料仕入
	aDefault[67].Code		:=	107;//	分析ｺｰﾄﾞ
	aDefault[67].SeiZan		:=	0;	//	借方
	aDefault[67].BPKbn		:=	1;	//	P/L
	aDefault[67].Kisyuzan	:=	0;	//	期首残なし
	aDefault[67].TaxKbn		:=	2;	//	仕入
	aDefault[67].YouyakuCode := 504;//	要約ｺｰﾄﾞ  ( 4:材料仕入)
	aDefault[67].KoteiCode	:=  613;//	固定費ｺｰﾄﾞ(13:材料費)
	aDefault[67].HendoCode	:=  604;//	変動費ｺｰﾄﾞ( 2:材料費(変動))
	//	材料期末棚卸
	aDefault[68].Code		:=	108;//	分析ｺｰﾄﾞ
	aDefault[68].SeiZan		:=	1;	//	貸方
	aDefault[68].BPKbn		:=	1;	//	P/L
	aDefault[68].Kisyuzan	:=	0;	//	期首残なし
	aDefault[68].TaxKbn		:=	2;	//	仕入
	aDefault[68].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[68].YouyakuCode := 508;//	要約ｺｰﾄﾞ  ( 8:期末棚卸高)
	aDefault[68].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[68].HendoCode	:=  610;//	変動費ｺｰﾄﾞ(10:期末棚卸高)
	//	労務費給与
	aDefault[69].Code		:=	109;//	分析ｺｰﾄﾞ
	aDefault[69].SeiZan		:=	0;	//	借方
	aDefault[69].BPKbn		:=	1;	//	P/L
	aDefault[69].Kisyuzan	:=	0;	//	期首残なし
	aDefault[69].TaxKbn		:=	2;	//	仕入
	aDefault[69].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[69].YouyakuCode := 505;//	要約ｺｰﾄﾞ  ( 5:労務費)
	aDefault[69].KoteiCode	:=  614;//	固定費ｺｰﾄﾞ(14:労務費)
	aDefault[69].HendoCode	:=  605;//	変動費ｺｰﾄﾞ( 5:労務費(変動))
	//	外注費
	aDefault[70].Code		:=	110;//	分析ｺｰﾄﾞ
	aDefault[70].SeiZan		:=	0;	//	借方
	aDefault[70].BPKbn		:=	1;	//	P/L
	aDefault[70].Kisyuzan	:=	0;	//	期首残なし
	aDefault[70].TaxKbn		:=	2;	//	仕入
	aDefault[70].YouyakuCode := 506;//	要約ｺｰﾄﾞ  (6:外注費)
	aDefault[70].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[70].HendoCode	:=  606;//	変動費ｺｰﾄﾞ(6:外注費(変動))
	//	労務外注費
	aDefault[71].Code		:=	111;//	分析ｺｰﾄﾞ
	aDefault[71].SeiZan		:=	0;	//	借方
	aDefault[71].BPKbn		:=	1;	//	P/L
	aDefault[71].Kisyuzan	:=	0;	//	期首残なし
	aDefault[71].TaxKbn		:=	2;	//	仕入
	aDefault[71].YouyakuCode := 506;//	要約ｺｰﾄﾞ  (6:外注費)
	aDefault[71].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[71].HendoCode	:=  606;//	変動費ｺｰﾄﾞ(6:外注費(変動))
	//	製造原価償却費
	aDefault[72].Code		:=	112;//	分析ｺｰﾄﾞ
	aDefault[72].SeiZan		:=	0;	//	借方
	aDefault[72].BPKbn		:=	1;	//	P/L
	aDefault[72].Kisyuzan	:=	0;	//	期首残なし
	aDefault[72].TaxKbn		:=	2;	//	仕入
	aDefault[72].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[72].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[72].KoteiCode	:=  620;//	固定費ｺｰﾄﾞ
	aDefault[72].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ(20:減価償却費)
	//	製造交際費
	aDefault[73].Code		:=	113;//	分析ｺｰﾄﾞ
	aDefault[73].SeiZan		:=	0;	//	借方
	aDefault[73].BPKbn		:=	1;	//	P/L
	aDefault[73].Kisyuzan	:=	0;	//	期首残なし
	aDefault[73].TaxKbn		:=	2;	//	仕入
	aDefault[73].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[73].KoteiCode	:=  616;//	固定費ｺｰﾄﾞ(16:製造経費)
	aDefault[73].HendoCode	:=  607;//	変動費ｺｰﾄﾞ( 7:製造経費(変動))
	//	製造賃借料
	aDefault[74].Code		:=	114;//	分析ｺｰﾄﾞ
	aDefault[74].SeiZan		:=	0;	//	借方
	aDefault[74].BPKbn		:=	1;	//	P/L
	aDefault[74].Kisyuzan	:=	0;	//	期首残なし
	aDefault[74].TaxKbn		:=	2;	//	仕入
	aDefault[74].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[74].KoteiCode	:=  616;//	固定費ｺｰﾄﾞ(16:製造経費)
	aDefault[74].HendoCode	:=  607;//	変動費ｺｰﾄﾞ( 7:製造経費(変動))
	//	製造租税公課
	aDefault[75].Code		:=	115;//	分析ｺｰﾄﾞ
	aDefault[75].SeiZan		:=	0;	//	借方
	aDefault[75].BPKbn		:=	1;	//	P/L
	aDefault[75].Kisyuzan	:=	0;	//	期首残なし
	aDefault[75].TaxKbn		:=	2;	//	仕入
	aDefault[75].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[75].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[75].KoteiCode	:=  616;//	固定費ｺｰﾄﾞ(16:製造経費)
	aDefault[75].HendoCode	:=  607;//	変動費ｺｰﾄﾞ( 7:製造経費(変動))
	//	製造粗付加ﾏｲﾅｽ
	aDefault[76].Code		:=	116;//	分析ｺｰﾄﾞ
	aDefault[76].SeiZan		:=	0;	//	借方
	aDefault[76].BPKbn		:=	1;	//	P/L
	aDefault[76].Kisyuzan	:=	0;	//	期首残なし
	aDefault[76].TaxKbn		:=	2;	//	仕入
	aDefault[76].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[76].KoteiCode	:=  616;//	固定費ｺｰﾄﾞ(16:製造経費)
	aDefault[76].HendoCode	:=  607;//	変動費ｺｰﾄﾞ( 7:製造経費(変動))
	//	製造経費人件費
	aDefault[77].Code		:=	117;//	分析ｺｰﾄﾞ
	aDefault[77].SeiZan		:=	0;	//	借方
	aDefault[77].BPKbn		:=	1;	//	P/L
	aDefault[77].Kisyuzan	:=	0;	//	期首残なし
	aDefault[77].TaxKbn		:=	2;	//	仕入
	aDefault[77].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[77].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[77].KoteiCode	:=  616;//	固定費ｺｰﾄﾞ(16:製造経費)
	aDefault[77].HendoCode	:=  607;//	変動費ｺｰﾄﾞ( 7:製造経費(変動))
	//	その他製造経費
	aDefault[78].Code		:=	118;//	分析ｺｰﾄﾞ
	aDefault[78].SeiZan		:=	0;	//	借方
	aDefault[78].BPKbn		:=	1;	//	P/L
	aDefault[78].Kisyuzan	:=	0;	//	期首残なし
	aDefault[78].TaxKbn		:=	2;	//	仕入
	aDefault[78].YouyakuCode := 507;//	要約ｺｰﾄﾞ  ( 7:製造経費)
	aDefault[78].KoteiCode	:=  616;//	固定費ｺｰﾄﾞ(16:製造経費)
	aDefault[78].HendoCode	:=  607;//	変動費ｺｰﾄﾞ( 7:製造経費(変動))
	//	仕掛品期首棚卸
	aDefault[79].Code		:=	119;//	分析ｺｰﾄﾞ
	aDefault[79].SeiZan		:=	0;	//	借方
	aDefault[79].BPKbn		:=	1;	//	P/L
	aDefault[79].Kisyuzan	:=	0;	//	期首残なし
	aDefault[79].Shiwake	:=	1;	//	正残側のみ
	aDefault[79].TaxKbn		:=	2;	//	仕入
	aDefault[79].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[79].YouyakuCode := 502;//	要約ｺｰﾄﾞ  (2:期首棚卸高)
	aDefault[79].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[79].HendoCode	:=  602;//	変動費ｺｰﾄﾞ(2:期首棚卸高)
	//	仕掛品期末棚卸
	aDefault[80].Code		:=	120;//	分析ｺｰﾄﾞ
	aDefault[80].SeiZan		:=	1;	//	貸方
	aDefault[80].BPKbn		:=	1;	//	P/L
	aDefault[80].Kisyuzan	:=	0;	//	期首残なし
	aDefault[80].TaxKbn		:=	2;	//	仕入
	aDefault[80].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[80].YouyakuCode := 508;//	要約ｺｰﾄﾞ  ( 8:期末棚卸高)
	aDefault[80].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[80].HendoCode	:=  610;//	変動費ｺｰﾄﾞ(10:期末棚卸高)
	//	販売促進費
	aDefault[81].Code		:=	121;//	分析ｺｰﾄﾞ
	aDefault[81].SeiZan		:=	0;	//	借方
	aDefault[81].BPKbn		:=	1;	//	P/L
	aDefault[81].Kisyuzan	:=	0;	//	期首残なし
	aDefault[81].TaxKbn		:=	2;	//	仕入
	aDefault[81].YouyakuCode := 511;//	要約ｺｰﾄﾞ  (11:販売費)
	aDefault[81].KoteiCode	:=  617;//	固定費ｺｰﾄﾞ(17:販売費)
	aDefault[81].HendoCode	:=  608;//	変動費ｺｰﾄﾞ( 8:販売費(変動))
	//	広告宣伝費
	aDefault[82].Code		:=	122;//	分析ｺｰﾄﾞ
	aDefault[82].SeiZan		:=	0;	//	借方
	aDefault[82].BPKbn		:=	1;	//	P/L
	aDefault[82].Kisyuzan	:=	0;	//	期首残なし
	aDefault[82].TaxKbn		:=	2;	//	仕入
	aDefault[82].YouyakuCode := 511;//	要約ｺｰﾄﾞ  (11:販売費)
	aDefault[82].KoteiCode	:=  617;//	固定費ｺｰﾄﾞ(17:販売費)
	aDefault[82].HendoCode	:=  608;//	変動費ｺｰﾄﾞ( 8:販売費(変動))
	//	その他販売費
	aDefault[83].Code		:=	123;//	分析ｺｰﾄﾞ
	aDefault[83].SeiZan		:=	0;	//	借方
	aDefault[83].BPKbn		:=	1;	//	P/L
	aDefault[83].Kisyuzan	:=	0;	//	期首残なし
	aDefault[83].TaxKbn		:=	2;	//	仕入
	aDefault[83].YouyakuCode := 511;//	要約ｺｰﾄﾞ  (11:販売費)
	aDefault[83].KoteiCode	:=  617;//	固定費ｺｰﾄﾞ(17:販売費)
	aDefault[83].HendoCode	:=  608;//	変動費ｺｰﾄﾞ( 8:販売費(変動))
	//	役員報酬
	aDefault[84].Code		:=	124;//	分析ｺｰﾄﾞ
	aDefault[84].SeiZan		:=	0;	//	借方
	aDefault[84].BPKbn		:=	1;	//	P/L
	aDefault[84].Kisyuzan	:=	0;	//	期首残なし
	aDefault[84].TaxKbn		:=	2;	//	仕入
	aDefault[84].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[84].YouyakuCode := 512;//	要約ｺｰﾄﾞ  (12:人件費)
	aDefault[84].KoteiCode	:=  618;//	固定費ｺｰﾄﾞ(18:販管人件費)
	aDefault[84].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	販管費人件費
	aDefault[85].Code		:=	125;//	分析ｺｰﾄﾞ
	aDefault[85].SeiZan		:=	0;	//	借方
	aDefault[85].BPKbn		:=	1;	//	P/L
	aDefault[85].Kisyuzan	:=	0;	//	期首残なし
	aDefault[85].TaxKbn		:=	2;	//	仕入
	aDefault[85].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[85].YouyakuCode := 512;//	要約ｺｰﾄﾞ  (12:人件費)
	aDefault[85].KoteiCode	:=  618;//	固定費ｺｰﾄﾞ(18:販管人件費)
	aDefault[85].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//	販管費減価償却費
	aDefault[86].Code		:=	126;//	分析ｺｰﾄﾞ
	aDefault[86].SeiZan		:=	0;	//	借方
	aDefault[86].BPKbn		:=	1;	//	P/L
	aDefault[86].Kisyuzan	:=	0;	//	期首残なし
	aDefault[86].TaxKbn		:=	2;	//	仕入
	aDefault[86].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[86].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[86].KoteiCode	:=  620;//	固定費ｺｰﾄﾞ(20:減価償却費)
	aDefault[86].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	販管費接待交際費
	aDefault[87].Code		:=	127;//	分析ｺｰﾄﾞ
	aDefault[87].SeiZan		:=	0;	//	借方
	aDefault[87].BPKbn		:=	1;	//	P/L
	aDefault[87].Kisyuzan	:=	0;	//	期首残なし
	aDefault[87].TaxKbn		:=	2;	//	仕入
	aDefault[87].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[87].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[87].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//	販管費賃借料
	aDefault[88].Code		:=	128;//	分析ｺｰﾄﾞ
	aDefault[88].SeiZan		:=	0;	//	借方
	aDefault[88].BPKbn		:=	1;	//	P/L
	aDefault[88].Kisyuzan	:=	0;	//	期首残なし
	aDefault[88].TaxKbn		:=	2;	//	仕入
	aDefault[88].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[88].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[88].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//	販管費租税公課
	aDefault[89].Code		:=	129;//	分析ｺｰﾄﾞ
	aDefault[89].SeiZan		:=	0;	//	借方
	aDefault[89].BPKbn		:=	1;	//	P/L
	aDefault[89].Kisyuzan	:=	0;	//	期首残なし
	aDefault[89].TaxKbn		:=	2;	//	仕入
	aDefault[89].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[89].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[89].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[89].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//	販管費粗付加ﾏｲﾅｽ
	aDefault[90].Code		:=	130;//	分析ｺｰﾄﾞ
	aDefault[90].SeiZan		:=	0;	//	借方
	aDefault[90].BPKbn		:=	1;	//	P/L
	aDefault[90].Kisyuzan	:=	0;	//	期首残なし
	aDefault[90].TaxKbn		:=	2;	//	仕入
	aDefault[90].YouyakuCode := 511;//	要約ｺｰﾄﾞ  (11:販売費)					//HIS0071(513→511)
	aDefault[90].KoteiCode	:=  617;//	固定費ｺｰﾄﾞ(17:販売費)					//HIS0071(619→617)
	aDefault[90].HendoCode	:=  608;//	変動費ｺｰﾄﾞ( 8:販売費(変動))				//HIS0071(609→608)
	//	販管費交通費
	aDefault[91].Code		:=	131;//	分析ｺｰﾄﾞ
	aDefault[91].SeiZan		:=	0;	//	借方
	aDefault[91].BPKbn		:=	1;	//	P/L
	aDefault[91].Kisyuzan	:=	0;	//	期首残なし
	aDefault[91].TaxKbn		:=	2;	//	仕入
	aDefault[91].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[91].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[91].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//
	aDefault[92].Code		:=	132;//	分析ｺｰﾄﾞ
	aDefault[92].SeiZan		:=	0;	//	借方
	aDefault[92].BPKbn		:=	1;	//	P/L
	aDefault[92].Kisyuzan	:=	0;	//	期首残なし
	aDefault[92].TaxKbn		:=	2;	//	仕入
	aDefault[92].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[92].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[92].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//
	aDefault[93].Code		:=	133;//	分析ｺｰﾄﾞ
	aDefault[93].SeiZan		:=	0;	//	借方
	aDefault[93].BPKbn		:=	1;	//	P/L
	aDefault[93].Kisyuzan	:=	0;	//	期首残なし
	aDefault[93].TaxKbn		:=	2;	//	仕入
	aDefault[93].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[93].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[93].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//	その他一般管理費
	aDefault[94].Code		:=	134;//	分析ｺｰﾄﾞ
	aDefault[94].SeiZan		:=	0;	//	借方
	aDefault[94].BPKbn		:=	1;	//	P/L
	aDefault[94].Kisyuzan	:=	0;	//	期首残なし
	aDefault[94].TaxKbn		:=	2;	//	仕入
	aDefault[94].YouyakuCode := 513;//	要約ｺｰﾄﾞ  (13:一般管理費)
	aDefault[94].KoteiCode	:=  619;//	固定費ｺｰﾄﾞ(19:一般管理費)
	aDefault[94].HendoCode	:=  609;//	変動費ｺｰﾄﾞ( 9:一般管理費(変動))
	//	受取利息
	aDefault[95].Code		:=	135;//	分析ｺｰﾄﾞ
	aDefault[95].SeiZan		:=	1;	//	貸方
	aDefault[95].BPKbn		:=	1;	//	P/L
	aDefault[95].Kisyuzan	:=	0;	//	期首残なし
	aDefault[95].TaxKbn		:=	1;	//	売上
	aDefault[95].TaxCode	:=	30;	//	消費税ｺｰﾄﾞ
	aDefault[95].YouyakuCode := 516;//	要約ｺｰﾄﾞ  (16:営業外収益)
	aDefault[95].KoteiCode	:=  623;//	固定費ｺｰﾄﾞ(23:営業外収益)
	aDefault[95].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	受取配当金
	aDefault[96].Code		:=	136;//	分析ｺｰﾄﾞ
	aDefault[96].SeiZan		:=	1;	//	貸方
	aDefault[96].BPKbn		:=	1;	//	P/L
	aDefault[96].Kisyuzan	:=	0;	//	期首残なし
	aDefault[96].TaxKbn		:=	1;	//	売上
	aDefault[96].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[96].YouyakuCode := 516;//	要約ｺｰﾄﾞ  (16:営業外収益)
	aDefault[96].KoteiCode	:=  623;//	固定費ｺｰﾄﾞ(23:営業外収益)
	aDefault[96].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	その他営業外収益
	aDefault[97].Code		:=	137;//	分析ｺｰﾄﾞ
	aDefault[97].SeiZan		:=	1;	//	貸方
	aDefault[97].BPKbn		:=	1;	//	P/L
	aDefault[97].Kisyuzan	:=	0;	//	期首残なし
	aDefault[97].TaxKbn		:=	1;	//	売上
	aDefault[97].YouyakuCode := 516;//	要約ｺｰﾄﾞ  (16:営業外収益)
	aDefault[97].KoteiCode	:=  623;//	固定費ｺｰﾄﾞ(23:営業外収益)
	aDefault[97].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	支払利息
	aDefault[98].Code		:=	138;//	分析ｺｰﾄﾞ
	aDefault[98].SeiZan		:=	0;	//	借方
	aDefault[98].BPKbn		:=	1;	//	P/L
	aDefault[98].Kisyuzan	:=	0;	//	期首残なし
	aDefault[98].TaxKbn		:=	2;	//	仕入
	aDefault[98].TaxCode	:=	30;	//	消費税ｺｰﾄﾞ
	aDefault[98].YouyakuCode := 517;//	要約ｺｰﾄﾞ  (17:支払利息割引料)
	aDefault[98].KoteiCode	:=  621;//	固定費ｺｰﾄﾞ(21:支払利息割引料)
	aDefault[98].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//
	aDefault[99].Code		:=	139;//	分析ｺｰﾄﾞ
	aDefault[99].SeiZan		:=	0;	//	借方
	aDefault[99].BPKbn		:=	1;	//	P/L
	aDefault[99].Kisyuzan	:=	0;	//	期首残なし
	aDefault[99].TaxKbn		:=	2;	//	仕入
	aDefault[99].YouyakuCode := 518;//	要約ｺｰﾄﾞ  (18:その他営業外費用)
	aDefault[99].KoteiCode	:=  622;//	固定費ｺｰﾄﾞ(22:その他営業外費用)
	aDefault[99].HendoCode	:=  0;	//	変動費ｺｰﾄﾞ
	//	その他営業外費用
	aDefault[100].Code		:=	140;//	分析ｺｰﾄﾞ
	aDefault[100].SeiZan	:=	0;	//	借方
	aDefault[100].BPKbn		:=	1;	//	P/L
	aDefault[100].Kisyuzan	:=	0;	//	期首残なし
	aDefault[100].TaxKbn	:=	2;	//	仕入
	aDefault[100].YouyakuCode := 518;//	要約ｺｰﾄﾞ  (18:その他営業外費用)
	aDefault[100].KoteiCode	:=  622;//	固定費ｺｰﾄﾞ(22:その他営業外費用)
	aDefault[100].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	特別利益
	aDefault[101].Code		:=	141;//	分析ｺｰﾄﾞ
	aDefault[101].SeiZan	:=	1;	//	貸方
	aDefault[101].BPKbn		:=	1;	//	P/L
	aDefault[101].Kisyuzan	:=	0;	//	期首残なし
	aDefault[101].TaxKbn	:=	1;	//	売上
	aDefault[101].YouyakuCode := 521;//	要約ｺｰﾄﾞ  (21:特別利益)
	aDefault[101].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[101].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	特別損失
	aDefault[102].Code		:=	142;//	分析ｺｰﾄﾞ
	aDefault[102].SeiZan	:=	0;	//	借方
	aDefault[102].BPKbn		:=	1;	//	P/L
	aDefault[102].Kisyuzan	:=	0;	//	期首残なし
	aDefault[102].TaxKbn	:=	2;	//	仕入
	aDefault[102].YouyakuCode := 522;//	要約ｺｰﾄﾞ  (22:特別損失)
	aDefault[102].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[102].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	法人税等
	aDefault[103].Code		:=	143;//	分析ｺｰﾄﾞ
	aDefault[103].SeiZan	:=	0;	//	借方
	aDefault[103].BPKbn		:=	1;	//	P/L
	aDefault[103].Kisyuzan	:=	0;	//	期首残なし
	aDefault[103].TaxKbn	:=	2;	//	仕入
	aDefault[103].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[103].YouyakuCode := 524;//	要約ｺｰﾄﾞ  (24:法人税等)
	aDefault[103].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[103].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	法人税等調整
	aDefault[104].Code		:=	144;//	分析ｺｰﾄﾞ
	aDefault[104].SeiZan	:=	0;	//	借方
	aDefault[104].BPKbn		:=	1;	//	P/L
	aDefault[104].Kisyuzan	:=	0;	//	期首残なし
	aDefault[104].TaxKbn	:=	2;	//	仕入
	aDefault[104].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[104].YouyakuCode := 524;//	要約ｺｰﾄﾞ  (24:法人税等)
	aDefault[104].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[104].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	家事消費
	aDefault[105].Code		:=	145;//	分析ｺｰﾄﾞ
	aDefault[105].SeiZan	:=	1;	//	貸方
	aDefault[105].BPKbn		:=	1;	//	P/L
	aDefault[105].Kisyuzan	:=	0;	//	期首残なし
	aDefault[105].TaxKbn	:=	1;	//	売上
	aDefault[105].YouyakuCode := 501;//	要約ｺｰﾄﾞ  (1:純売上高)
	aDefault[105].KoteiCode	 :=  0;	//	固定費ｺｰﾄﾞ
	aDefault[105].HendoCode :=  601;//	変動費ｺｰﾄﾞ(1:純売上高)
	//	雑収入
	aDefault[106].Code		:=	146;//	分析ｺｰﾄﾞ
	aDefault[106].SeiZan	:=	1;	//	貸方
	aDefault[106].BPKbn		:=	1;	//	P/L
	aDefault[106].Kisyuzan	:=	0;	//	期首残なし
	aDefault[106].TaxKbn	:=	1;	//	売上
	aDefault[106].YouyakuCode := 516;//	要約ｺｰﾄﾞ  (16:営業外収益)	//	HIS0047
	aDefault[106].KoteiCode	:=  623;//	固定費ｺｰﾄﾞ(23:営業外収益)	//	HIS0047
	aDefault[106].HendoCode :=  0;	//	変動費ｺｰﾄﾞ					//	HIS0047
	//	引当金戻入
	aDefault[107].Code		:=	147;//	分析ｺｰﾄﾞ
	aDefault[107].SeiZan	:=	1;	//	貸方
	aDefault[107].BPKbn		:=	1;	//	P/L
	aDefault[107].Kisyuzan	:=	0;	//	期首残なし
	aDefault[107].TaxKbn	:=	1;	//	売上
	aDefault[107].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[107].YouyakuCode := 521;//	要約ｺｰﾄﾞ  (21:特別利益)
	aDefault[107].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[107].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	専従者給与
	aDefault[108].Code		:=	148;//	分析ｺｰﾄﾞ
	aDefault[108].SeiZan	:=	0;	//	借方
	aDefault[108].BPKbn		:=	1;	//	P/L
	aDefault[108].Kisyuzan	:=	0;	//	期首残なし
	aDefault[108].TaxKbn	:=	2;	//	仕入
	aDefault[108].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
    // <079> ↓
	//aDefault[108].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[108].YouyakuCode := 522;	//	要約ｺｰﾄﾞ
    // <079> ↓
	aDefault[108].KoteiCode	:=  618;//	固定費ｺｰﾄﾞ(販管人件費)		//	HIS0047
	aDefault[108].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	引当金繰入
	aDefault[109].Code		:=	149;//	分析ｺｰﾄﾞ
	aDefault[109].SeiZan	:=	0;	//	借方
	aDefault[109].BPKbn		:=	1;	//	P/L
	aDefault[109].Kisyuzan	:=	0;	//	期首残なし
	aDefault[109].TaxKbn	:=	2;	//	仕入
	aDefault[109].TaxCode	:=	40;	//	消費税ｺｰﾄﾞ
	aDefault[109].YouyakuCode := 522;//	要約ｺｰﾄﾞ  (22:特別損失)
	aDefault[109].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[109].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	借方未処分項目(P/L)
	aDefault[110].Code		:=	198;//	分析ｺｰﾄﾞ
	aDefault[110].SeiZan	:=	0;	//	借方
	aDefault[110].BPKbn		:=	1;	//	P/L
	aDefault[110].Kisyuzan	:=	0;	//	期首残なし
	aDefault[110].TaxKbn	:=	0;	//	仕入		//<116>MOD(2:仕入→0:対象外)
	aDefault[110].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[110].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[110].HendoCode :=  0;	//	変動費ｺｰﾄﾞ
	//	貸方未処分項目(P/L)
	aDefault[111].Code		:=	199;//	分析ｺｰﾄﾞ
	aDefault[111].SeiZan	:=	1;	//	貸方
	aDefault[111].BPKbn		:=	1;	//	P/L
	aDefault[111].Kisyuzan	:=	0;	//	期首残なし
	aDefault[111].TaxKbn	:=	0;	//	売上		//<116>MOD(1:売上→0:対象外)
	aDefault[111].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[111].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[111].HendoCode :=  0;	//	変動費ｺｰﾄﾞ

	//	非会計科目
	aDefault[112].Code		:=	0;//	分析ｺｰﾄﾞ
	aDefault[112].SeiZan	:=	0;	//	貸方
	aDefault[112].BPKbn		:=	-1;	//	BS/PL区分								//HIS0066
	aDefault[112].Kisyuzan	:=	0;	//	期首残なし
	aDefault[112].TaxKbn	:=	0;	//	売上
	aDefault[112].YouyakuCode := 0;	//	要約ｺｰﾄﾞ
	aDefault[112].KoteiCode	:=  0;	//	固定費ｺｰﾄﾞ
	aDefault[112].HendoCode :=  0;	//	変動費ｺｰﾄﾞ

end;

//******************************************************************************************************
//*		Proccess	:	はぐれNode作成処理
//*		Name		:	H.Endo
//*		Date		:	2000/11/22
//*		Parameter	:	Select	:	選択されている科目
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*                     2005/03/07  Y.Mogi(LEAD)   
//*
//******************************************************************************************************
procedure TJNTCRP009001f.HagureMakeNode(Select: Integer);
var
	DmqTree			:	TMQuery;
	DmqData			:	TMQuery;
	DmqMA			:	TMQuery;
	bFlag			:	Boolean;
	bKodomoFlag		:	Boolean;
	bTokuteiFlag	:	Boolean;
	bGoukeiFlag		:	Boolean;
	iLoop			:	Integer;
	SumKbn			:	Byte;		//	実在/合計区分
begin

	// 初期化
	SumKbn	:=	0;

	bFlag		:= FALSE;
	bKodomoFlag	:= FALSE;
	bGoukeiFlag := FALSE;

	DmqTree := TMQuery.Create( Self );				        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );	// DBとMQueryの接続

	DmqData := TMQuery.Create( Self );				        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );	// DBとMQueryの接続

	DmqMA := TMQuery.Create( Self );					    // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqMA );	// DBとMQueryの接続

	with DmqTree do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT DISTINCT                    ');
		SQL.Add('    MA.NCode                       ');	// 内部ｺｰﾄﾞ
		SQL.Add('   ,MA.GCode                       ');	// 外部ｺｰﾄﾞ
		SQL.Add('   ,MA.MasterKbn                   ');	// ﾏｽﾀ区分
		SQL.Add('   ,MA.SumKbn                      ');	// 実在/合計区分
		SQL.Add('   ,MA.BPKbn                       ');	// BS/PL区分
		SQL.Add('   ,MA.AnalyzeCode                 ');	// 分析ｺｰﾄﾞ
		SQL.Add('FROM KmkMA MA                      '); // 勘定科目基本ﾏｽﾀ
		SQL.Add('INNER JOIN KmkTree TR ON           ');
		SQL.Add('( NOT EXISTS (                     ');
        SQL.Add('  SELECT TR.SumNCode               ');
        SQL.Add('  FROM KmkTree TR                  ');
		SQL.Add('  WHERE (TR.BasedNCode = MA.NCode) ');
        SQL.Add('    AND  TR.MasterKbn  = 1) )      ');
		SQL.Add('WHERE MA.MasterKbn = 1             ');
        SQL.Add('  AND MA.RDelKbn   = 0             ');
        SQL.Add('ORDER BY MA.SumKbn DESC, MA.GCode  ');	// <103>ADD
		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;

			DmqData.Close;
			DmqData.Free;
			DmqMA.Close;
			DmqMA.Free;

			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			bTokuteiFlag	:=	FALSE;
			gHagureNCode    :=	GetFld('NCode').AsFloat;  // 内部ｺｰﾄﾞ

            // 特定科目と一致したら表示しない
			for iLoop := 0 to 19 do
			begin
				if ( aTokuteiKmkCode[iLoop] = gHagureNCode ) then		// HIS0050
				begin
					bTokuteiFlag	:=	TRUE;
					break;
				end;
			end;

			if ( bTokuteiFlag = FALSE ) then
			begin
				with DmqData do
				begin
					Close();
					SQL.Clear;
					SQL.Add('SELECT                         ');
					SQL.Add('   BasedNCode                  '); // 加算元内部ｺｰﾄﾞ
					SQL.Add('FROM KmkTree                   '); // 科目加算体系ﾏｽﾀ
					SQL.Add('WHERE MasterKbn = 1            '); // ﾏｽﾀ区分
					SQL.Add('  AND SumNCode  = :KasanCode   ');	// 加算先内部ｺｰﾄﾞ

					ParamByName('KasanCode').AsFloat  :=  gHagureNCode;

					// ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqData);
						DmqData.Close;
						DmqData.Free;

						DmqTree.Close;
						DmqTree.Free;
						DmqMA  .Close;
						DmqMA  .Free;

						Exit;
					end;

					while ( EOF <> TRUE ) do
					begin
						bKodomoFlag	:=	TRUE;

					{<107>	bGoukeiFlag		:分析ｺｰﾄﾞに係わらず実在科目が子供にいるか
							ﾙｰﾌﾟ内で初期化してしまうと正しい体系に表示されない。}
					// 	bGoukeiFlag :=  FALSE;	// <107>DEL

						with DmqMA do
						begin
							Close();
							SQL.Clear;
							SQL.Add('SELECT                     ');
							SQL.Add('    MasterKbn              ');	// ﾏｽﾀ区分
							SQL.Add('   ,SumKbn                 ');	// 実在/合計区分
							SQL.Add('   ,AnalyzeCode            ');	// 分析ｺｰﾄﾞ
							SQL.Add('   ,BPKbn                  ');	// BS/PL区分
							SQL.Add('FROM KmkMA                 '); // 勘定科目基本ﾏｽﾀ
							SQL.Add('WHERE NCode     = :Code    '); // 外部ｺｰﾄﾞ
                            SQL.Add('  AND RDelKbn   = 0        ');	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
							SQL.Add('  AND MasterKbn = 1        ');	// ﾏｽﾀ区分  (1:実在)

							ParamByName('Code').AsFloat   :=  DmqData.GetFld('BasedNCode').AsFloat;

							// ｴﾗｰの判定
							if ( Open = FALSE ) then
							begin
								ErrorMessageDsp(DmqMA);
								DmqMA.Close;
								DmqMA.Free;

								DmqTree.Close;
								DmqTree.Free;
								DmqData.Close;
								DmqData.Free;

								Exit;
							end;

							if ( EOF <> TRUE ) then
							begin
                                // ----------------
								//  実在科目時
                                // ----------------
								if ( (GetFld('MasterKbn').AsInteger) = 1 ) and ( (GetFld('SumKbn').AsInteger) = 0 ) then
								begin
									case Select of
										SHISAN:
										begin
											// 分析ｺｰﾄﾞが37以下かつBS実在科目時
											if ( (GetFld('AnalyzeCode').AsInteger) <= 37 ) and
                                               ( (GetFld('BPKbn').AsInteger)        = 0  ) then
												m_KodomoFlag := TRUE;			//bFlag	:=	TRUE;
										end;
										FUSAI:
										begin
											// 分析ｺｰﾄﾞが38以上100以下かつBS実在科目時
											if ( (GetFld('AnalyzeCode').AsInteger) >= 38  ) and
//HIS0121									   ( (GetFld('AnalyzeCode').AsInteger) <= 100 ) and
											   ( (GetFld('BPKbn').AsInteger) = 0          ) then
												m_KodomoFlag := TRUE;			//bFlag	:=	TRUE;
										end;
										SONEKI:
										begin
											// PL実在科目時
											if ( (GetFld('BPKbn').AsInteger) = 1 ) then
												m_KodomoFlag := TRUE;			//bFlag	:=	TRUE;
										end;
									end;
									bGoukeiFlag := TRUE;
								end
                                // ----------------
								//  合計時
                                // ----------------
								else
//								else if ((GetFld('MasterKbn').AsInteger) = 1) and ((GetFld('SumKbn').AsInteger) = 1) then
								begin
									bFlag	:=	KodomoCheck(DmqData.GetFld('BasedNCode').AsFloat,Select,bGoukeiFlag);
    	            		    end;
							end;
						end;

   	    	            Next;
            		end;

					// 合計に子供がいて実在の範囲内の時
//					if (bKodomoFlag = TRUE) and (bFlag = TRUE) then
					if ( bKodomoFlag = TRUE ) and ( m_KodomoFlag = TRUE ) then
	                begin
//						if (bFlag = TRUE) then
//						begin
							// ----------------
                            //  合計時
                            // ----------------
							if ( (DmqTree.GetFld('MasterKbn').AsInteger) = 1 ) and
                               ( (DmqTree.GetFld('SumKbn').AsInteger)    = 1 ) then
								MakeHagure(gHagureNCode);
							m_KodomoFlag := FALSE;								//bFlag := FALSE;
//						end;
						bKodomoFlag := FALSE;
					end
					// 合計に子供がいるが実在の範囲外の時または子供すべて合計の時
//					else if (bKodomoFlag = TRUE) and (bFlag = FALSE) then
					else if ( bKodomoFlag = TRUE ) and ( m_KodomoFlag = FALSE ) then
					begin
                        // 合計に子供がいるが実在の範囲外の時
						if ( bGoukeiFlag = TRUE ) then
						begin
							bKodomoFlag := FALSE;
							bGoukeiFlag := FALSE;
						end
                        // 合計に子供がいるがすべて合計の時
						else
							MakeHagure(gHagureNCode);
					end
					// 子供がいない時
//					else if (bKodomoFlag = FALSE) and (bFlag = FALSE) then
					else if ( bKodomoFlag = FALSE ) and ( m_KodomoFlag = FALSE ) then
					begin
						// ----------------
                        //  合計時
                        // ----------------
						if ( (DmqTree.GetFld('MasterKbn').AsInteger) = 1 ) and
                           ( (DmqTree.GetFld('SumKbn').AsInteger)    = 1 ) then
						begin
							case Select of
								SHISAN,FUSAI:
								begin
// 合計のPL/BS区分は見ていないとのことなので、コメントとしました。
                                    // ----------------
                                    //	BS時
                                    // ----------------
									if ( (DmqTree.GetFld('BPKbn').AsInteger) = 0 ) then
										MakeHagure(gHagureNCode);
								end;
								SONEKI:
								begin
// 合計のPL/BS区分は見ていないとのことなので、コメントとしました。
                                    // ----------------
                                    //	PL時
                                    // ----------------
									if ( (DmqTree.GetFld('BPKbn').AsInteger) = 1 ) then
										MakeHagure(gHagureNCode);
								end;
							end;
						end
                        // ----------------
                        //  実在時
                        // ----------------
						else
						begin
							case Select of
								SHISAN:
								begin
									// 分析ｺｰﾄﾞが37以下かつBS実在科目時
									if ( (DmqTree.GetFld('AnalyzeCode').AsInteger) <= 37 ) and
                                       ( (DmqTree.GetFld('BPKbn').AsInteger)        = 0  ) then
										MakeHagure(gHagureNCode);
								end;
								FUSAI:
								begin
									// 分析ｺｰﾄﾞが38以上100以下かつBS実在科目時
									if ( (DmqTree.GetFld('AnalyzeCode').AsInteger) >= 38  ) and
//HIS0121							   ( (DmqTree.GetFld('AnalyzeCode').AsInteger) <= 100 ) and
									   ( (DmqTree.GetFld('BPKbn').AsInteger)        = 0   ) then
										MakeHagure(gHagureNCode);
								end;
								SONEKI:
								begin
									// PL実在科目時
									if ( (DmqTree.GetFld('BPKbn').AsInteger) = 1 ) then
										MakeHagure(gHagureNCode);
								end;
							end;
						end;
					end;
				end;
			end;

			Next;
		end;
	end;

	DmqMA   .Close;
	DmqMA   .Free;
	DmqData .Close;
	DmqData .Free;
	DmqTree .Close;
	DmqTree .Free;

end;

//******************************************************************************************************
//*		Proccess	:	子供のCHECK
//*		Name		:	H.Endo
//*		Date		:	2000/11/22
//*		Parameter	:	NCode		:	内部ｺｰﾄﾞ
//*                     Select      :   選択されている科目
//*						ChildFlag	:	実在の子供がついているか判定
//*		Return		:
//*		History		:	9999/99/99	X.Xxxx
//*                     2005/03/07  Y.Mogi(LEAD)    HIS0127 ﾒｿｯﾄﾞのﾊﾟﾗﾒｰﾀをCode⇒NCode
//*                                                         (内部/外部ｺｰﾄﾞの識別がし易いように変更)
//*                     2005/03/07  Y.Mogi(LEAD)    HIS0127 ｽｷｰﾏをMJSLINK⇒FXに変更。内部ｺｰﾄﾞ対応。
//*
//******************************************************************************************************
function TJNTCRP009001f.KodomoCheck(NCode: Extended; Select: Integer; var ChildFlag: Boolean): Boolean;
var
	DmqData		:	TMQuery;
	DmqMA		:	TMQuery;
	bFlag		:	Boolean;
begin
	bFlag	  := FALSE;

	DmqData := TMQuery.Create( Self );				            // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );	    // DBとMQueryの接続

	DmqMA := TMQuery.Create( Self );					        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqMA );	    // DBとMQueryの接続

	with DmqData do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                         ');
		SQL.Add('   BasedNCode                  '); // 加算元内部ｺｰﾄﾞ
		SQL.Add('FROM KmkTree                   '); // 科目加算体系ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 1            ');
		SQL.Add('  AND SumNCode  = :KasanCode   ');	// 加算先内部ｺｰﾄﾞ

        ParamByName('KasanCode').AsFloat  :=  NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;

			DmqMA.Close;
			DmqMA.Free;

			Result	:=	FALSE;
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			with DmqMA do
			begin
				Close();
				SQL.Clear;
				SQL.Add('SELECT                     ');
				SQL.Add('    MasterKbn              ');	// ﾏｽﾀ区分
				SQL.Add('   ,SumKbn                 ');	// 実在/合計区分
				SQL.Add('   ,AnalyzeCode            ');	// 分析ｺｰﾄﾞ
				SQL.Add('   ,BPKbn                  ');	// BS/PL区分
				SQL.Add('FROM KmkMA                 '); // 勘定科目基本ﾏｽﾀ
                SQL.Add('WHERE NCode     = :Code    '); // 内部ｺｰﾄﾞ
                SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				SQL.Add('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分  (1:実在)	

				ParamByName('Code').AsFloat   :=  DmqData.GetFld('BasedNCode').AsFloat;

				// ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqMA);
					DmqMA.Close;
					DmqMA.Free;

					DmqData.Close;
					DmqData.Free;

					Result	:=	FALSE;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
                    // --------------
					//  実在科目時
                    // --------------
					if ( (GetFld('MasterKbn').AsInteger) = 1 ) and ( (GetFld('SumKbn').AsInteger) = 0 ) then
					begin
						case Select of
							SHISAN:
							begin
                                // 分析ｺｰﾄﾞが37以下かつBS実在科目時
								if ( (GetFld('AnalyzeCode').AsInteger) <= 37 ) and
                                   ( (GetFld('BPKbn').AsInteger)        = 0  ) then
									m_KodomoFlag := TRUE;			//bFlag	:=	TRUE;
							end;
							FUSAI:
							begin
								// 分析ｺｰﾄﾞが38以上100以下かつBS実在科目時
								if ( (GetFld('AnalyzeCode').AsInteger) >= 38  ) and
//HIS0121						   ( (GetFld('AnalyzeCode').AsInteger) <= 100 ) and
								   ( (GetFld('BPKbn').AsInteger)        = 0   ) then
									m_KodomoFlag := TRUE;
                                    // bFlag	:=	TRUE;
							end;
							SONEKI:
							begin
								// PL実在科目時
								if ( (GetFld('BPKbn').AsInteger) = 1 ) then
									m_KodomoFlag := TRUE;
                                    // bFlag	:=	TRUE;
							end;
						end;

						ChildFlag := TRUE;
					end
					else
					begin
						bFlag   :=  KodomoCheck(DmqData.GetFld('BasedNCode').AsFloat,Select,ChildFlag);
					end;
				end;
			end;

			Next;
		end;
	end;

	DmqMA.Close;
	DmqMA.Free;

	DmqData.Close;
	DmqData.Free;

	result	:=	bFlag;

end;

//******************************************************************************************************
//*		Proccess	:	はぐれTREEの作成
//*		Name		:	H.Endo
//*		Date		:	2000/11/22
//*		Parameter	:	NCode		:	内部ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*						2005/03/07  Y.Mogi(LEAD)    HIS0127 ﾒｿｯﾄﾞのﾊﾟﾗﾒｰﾀをCode⇒NCode
//*                                                         (内部/外部ｺｰﾄﾞの識別がし易いように変更)
//*                     2005/03/07  Y.Mogi(LEAD)    HIS0127 ｽｷｰﾏをMJSLINK⇒FXに変更。内部ｺｰﾄﾞ対応。
//*
//******************************************************************************************************
procedure TJNTCRP009001f.MakeHagure(NCode: Extended);
var
	DmqTree		:	TMQuery;
	rTaikei 	:	^TaikeiRec;
	sDspName	:	String;
	TNode		:	TTreeNode;
begin

	DmqTree := TMQuery.Create( Self );					        // MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );	    // DBとMQueryの接続

	with DmqTree do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    MA.MasterKbn           ');	// ﾏｽﾀ区分
		SQL.Add('   ,MA.SumKbn              ');	// 実在/合計区分
		SQL.Add('   ,MA.NCode               ');	// 科目内部ｺｰﾄﾞ
        SQL.Add('   ,MA.CNCode              '); // 細目内部ｺｰﾄﾞ
		SQL.Add('   ,MA.GCode               ');	// 科目外部ｺｰﾄﾞ
        SQL.Add('   ,MA.SubCode             '); // 細目外部ｺｰﾄﾞ
		SQL.Add('   ,MA.LongName            ');	// 正式名称
		SQL.Add('   ,MA.SimpleName          ');	// 簡略名称
		SQL.Add('   ,MA.KoteiKbn            ');	// 固定体系区分
		SQL.Add('   ,MB.DecoKbn             ');	// 装飾区分
		SQL.Add('   ,MA.SubKmkUse           ');
		SQL.Add('FROM                       ');
		SQL.Add('    KmkMA MA               ');	// 勘定科目基本ﾏｽﾀ
        {//<115>DEL↓
		SQL.Add('   ,KmkMB MB               ');	// 勘定科目詳細情報
		SQL.Add('WHERE                      ');
        SQL.Add('      MA.RDelKbn   = 0     ');	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND MA.MasterKbn = 1     ');	// ﾏｽﾀ区分(1:勘定科目)
        SQL.Add('  AND MA.NCode     = :Code ');	// 内部ｺｰﾄﾞ
        SQL.Add('  AND MB.NCode     = :Code ');	// 内部ｺｰﾄﾞ

        ParamByName('Code').AsFloat   :=  NCode;
        }//<115>DEL↑
        //<115>ADD↓
        SQL.ADD('LEFT OUTER JOIN KmkMB MB'  );
        SQL.ADD( 'ON ( MA.MasterKbn = MB.MasterKbn');
        SQL.ADD(  'AND MA.NCode = MB.NCode');
        SQL.ADD(  'AND MA.CNCode = MB.CNCode');
        SQL.ADD(  'AND MA.SumKbn = MB.SumKbn)');
        SQL.ADD('WHERE MA.MasterKbn = 1');
        SQL.ADD(  'AND MA.RDelKbn = 0');
        SQL.ADD(  'AND MA.NCode = ' + FormatFloat('0', NCode));
        //<115>ADD↑

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close;
			DmqTree.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			New(rTaikei);
			rTaikei.NCode		:=	GetFld('NCode')     .AsFloat;		        // 科目内部ｺｰﾄﾞ
            rTaikei.CNCode      :=  GetFld('CNCode')    .AsFloat;               // 細目内部ｺｰﾄﾞ
			rTaikei.GCode		:=	GetFld('GCode')     .AsInteger;		        // 科目外部ｺｰﾄﾞ
            rTaikei.SubCode     :=  GetFld('SubCode')   .AsString;              // 細目外部ｺｰﾄﾞ
			rTaikei.Kbn			:=	GetFld('SumKbn')    .AsInteger;		        // 実在／合計区分(0:実在、1:合計)
			rTaikei.Name		:=	GetFld('SimpleName').AsString;	            // 簡略名称
			rTaikei.AddKbn		:=	0;								            // 加算/減算(0:加算、1:減算)
			rTaikei.KoteiKbn	:=	GetFld('KoteiKbn')  .AsInteger;	            // 固定体系区分(0:任意、1:固定)
			rTaikei.MasKbn		:=	GetFld('MasterKbn') .AsInteger;	            // ﾏｽﾀ区分(1:勘定科目、2:細目科目)
			rTaikei.ChildKbn	:=	FALSE;							            // 子供があるかないかの区分(表示されるのでFALSE)
			rTaikei.NotAdd		:=	0;								            // 加算なし
			sDspName	:=	GetSousyoku((GetFld('SimpleName').AsString),(GetFld('DecoKbn').AsInteger));
			TNode := TreeView.Items.AddChildobject(Nil,MakeDspString(rTaikei.GCode,sDspName),rTaikei);

            // -----------
            //	実在時
            // -----------
			if ( (GetFld('MasterKbn').AsInteger) = 1 ) and ( (GetFld('SumKbn').AsInteger) = 0 ) then
			begin
				TNode.ImageIndex 	:= 2;
				TNode.SelectedIndex := 8;
			end
            // -----------
            //	合計時
            // -----------
			else
			begin
				TNode.ImageIndex 	:= 0;
				TNode.SelectedIndex := 1;
			end;

			MakeKodomo(TNode,GetFld('NCode').AsFloat,gDspLevel);

            // -----------
            //	実在時
            // -----------
			if ( (GetFld('MasterKbn').AsInteger) = 1 ) and ( (GetFld('SumKbn').AsInteger) = 0 ) then
            begin
				if ( GetFld('SubKmkUse').AsInteger = 1 ) then
                    MakeSaimokuKdomo(TNode,GetFld('NCode').AsFloat);		    // 細目子供作成処理
			end;
		end;
	end;

	TreeView.Items[0].Expanded	:=	TRUE;

	DmqTree.Close;
	DmqTree.Free;

end;

//******************************************************************************************************
//*		Component		:	TJNTCRP009001f ( TForm )
//*
//*		Event			:	OnCloseQuery
//*		Name			:	H.Endo（MJS）
//******************************************************************************************************
procedure TJNTCRP009001f.FormCloseQuery(Sender: TObject;
	var CanClose: Boolean);
var
	iRet		:	Integer;
	SelectTab	:	Byte;
	iLoop		:	Integer;	// <100>
begin
    SelectTab := 0;

    if ( uvHani.mjspre.IsPreView = TRUE ) then
   	begin
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,2);
   		MjsMessageBoxEx(AOwner, // <005>
                        MjsMsgRec.sMsg,
                        MjsMsgRec.sTitle,
                        MjsMsgRec.icontype,
                        MjsMsgRec.btntype,
                        MjsMsgRec.btndef,
                        MJsMsgRec.LogType
                       );
    	CanClose := FALSE;
		Exit;			// <106>ADD
	end
    else
    	CanClose := TRUE;

    {// <099>DEL↓ 開放処理が2回呼ばれている為、FormCloseへ移動
    // 共通ｴｸｽﾌﾟﾛｰﾗの開放<004>
    if ( m_ExpOpenSW = TRUE ) then
        fnJNTExpFree();
    }// <099>DEL↑

	if ( P_Syousai.Visible = TRUE ) and ( m_EndFlag = FALSE ) and ( m_isUpdate )then
	begin
		case MTab_Select.Items.Selected of
			0: SelectTab := 2;	// 実在
			1: SelectTab := 3;	// 科目別補助
			2: SelectTab := 1;	// 合計
    	end;

		if ( fnSyousaiSetCheck(CHECK,SelectTab) = FALSE ) then	// HIS0031
		begin
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,2);
			iRet := MjsMessageBoxEx(AOwner, // <005>
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    MJsMsgRec.LogType
                                   );
			// はい
			if ( iRet = mrYes ) then
			begin
				if ( P_Syousai.Visible = TRUE ) then	// 詳細表示時
			    begin
					// 入力された値のﾁｪｯｸ
					if ( fnEndCheck = FALSE ) then
					begin
						CanClose := FALSE;
						Exit;
					end;
				end;

                // <129> ADD ST
                // 分析コードが変更されている かつ 分析コード変更時メッセージの表示条件を満たしている場合
                m_bBunChgMsgFlag := True;
                if (Trunc(EBunCode.Value) <> m_KmkInfo.Bunseki) AND fnChkBunChgMsg(giUpDate_GCode, True) then
                begin
                    // 「はい」以外の場合
                    if (MjsMessageBoxEX(Self,MSG_AnalyzeCodeChange,'確認', mjQuestion, mjYesNo, mjDefNo) <> mrYes ) then
                    begin
                        CanClose := False;
                        EXIT;
                    end;

                    m_bBunChgMsgFlag := False;
                end;
                // <129> ADD ST

				B_SUpDateClick(self);
			end
			// ｷｬﾝｾﾙ
			else if ( iRet = mrCancel ) then
			begin
				CanClose  := FALSE;
				exit;
			end
			// いいえ
			else if ( iRet = mrNo ) then
		end;
    end;

// <100>ADD↓
// FormCloseから移動
	if m_EndFlag = False then	// FormCloseが2回呼ばれた場合の考慮
	begin
		m_AnotherPrgStFlg := False;	// 科目出力順序起動ﾌﾗｸﾞ初期化

        SessionPractice(C_ST_PROCESS);

        // 加算体系のチェック
        fnTreeCheck();

        // 加算体系の更新
        UpdMasTreee2;

        // 出力順序自動登録DLG表示（実在科目新規追加時）
        if ( m_NewFlag_J = TRUE) then
        begin
            for iLoop := 0 to Length(m_KmkOrder)-1 do
            begin
                if m_KmkOrder[iLoop].AddOk = False then
                begin
                    ShowOrderDLG;
                    Break;
                end;
            end;

            // 科目出力順序起動
            if m_AnotherPrgStFlg then
            begin
                AnotherStart;
                CanClose := FALSE;
            end;
        end
        // 新規合計科目登録時
        else if ( m_NewFlag = TRUE ) then
        begin
            ComArea.m_MsgStd.GetMsg(MjsMsgRec, 30,30);
            MjsMessageBoxEx(AOwner,
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
        end;

		//	未成工事支出金の範囲に科目が追加された場合はメッセージを表示
		fnMiseiKoujiKmkMsg;			// <127> ADD

        SessionPractice(C_ED_PROCESS);
	end;
// <100>ADD↑

	bEndFlag	:=	TRUE;
	gbEndFlag	:=	TRUE;	// 詳細のｺｰﾄﾞ欄からのEXIT処理

	if m_AnotherPrgStFlg = False then								// <100>ADD
		m_EndFlag	:=	TRUE;	// CloseQueryが2度呼ばれるのでその制御の為のﾌﾗｸﾞ

end;

//**********************************************************************
//*		Proccess	:	分析ｺｰﾄﾞCheck
//*		Name		:	H.Endo
//*		Date		:	2000/12/13
//*		Parameter	:	なし
//*		Return		:	正常/異常
//*		History		:	00/12/13	H.Endo	HIS0002
//*									BeforePost,GridBeforeChangeColumn
//*									の三カ所で同じ処理を行っているので一つにまとめた
//**********************************************************************
function TJNTCRP009001f.BunsekiCheck():Boolean;
var
	bReturn			:	Boolean;
	iCode			:	Integer;
	iWork			:	Integer;
	sBunsekiName	:	String;
begin

	bReturn	:=	TRUE;

	if ( DSourceZitsu.DataSet.FieldByName('BunsekiNO').IsNull ) then
	begin
		MemZitsu.Open;
		MemZitsu.Edit;
		MemZitsu.FieldByName('BunsekiNO')   .AsInteger	:=	0;
		MemZitsu.FieldByName('Bunseki')     .AsString   :=  GetSKmkMA(BUNSEKI,0,iWork);
	end
	else
	begin
		iCode	        :=	DSourceZitsu.DataSet.FieldByName('BunsekiNO').AsInteger;
		sBunsekiName	:=	GetSKmkMA(BUNSEKI,iCode,iWork);

		if ( iWork <> 9999 ) then
		begin
			MemZitsu.Open;
			MemZitsu.Edit;
			MemZitsu.FieldByName('Bunseki').AsString := sBunsekiName;
		end
		else
		begin
			//	コードが間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            'コード' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			MemZitsu.Open;
			MemZitsu.Edit;
			MemZitsu.FieldByName('Bunseki').AsString := '';
			Abort;
			Beep;
			bReturn	:=	FALSE;
		end;
	end;

	Result	:=	bReturn;

end;

//**********************************************************************
//*		Proccess	:	参照・更新時のｺﾝﾎﾟｰﾈﾝﾄ制御処理
//*		Name		:	H.Endo
//*		Date		:	2000/12/18
//*		Parameter	:	Select		:	REFER		(参照)
//*									:	NORMAL		(通常処理)
//*									:	BASICONLY	(基本のみ設定可能)
//*									:	KAN_NO_HO_BA(勘定科目通常/科目別補助基本)
//*									:	KAN_NO_HO_RE(勘定科目通常/科目別補助参照)
//*									:	KAN_BA_HO_NO(勘定科目基本/科目別補助通常)
//*									:	KAN_BA_HO_RE(勘定科目基本/科目別補助参照)
//*									:	KAN_RE_HO_NO(勘定科目参照/科目別補助通常)
//*									:	KAN_RE_HO_BA(勘定科目参照/科目別補助基本)
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.fnControl(Select: Integer);	//	HIS0004		HIS0033
begin

	if (Select = REFER) then	//	参照のみ
	begin

        P_Saiyo.Enabled         := FALSE;
        P_Bunrui.Enabled        := FALSE;
        P_Shiwake.Enabled       := FALSE;
        P_Syukei.Enabled        := FALSE;
        P_SyouTop.Enabled       := FALSE;

		//	実在Grid
		DZitsuGrid.Options	:=	DZitsuGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
		DZitsuGridCode.ReadOnly 		:=	TRUE;
		DZitsuGridLongName.ReadOnly 	:=	TRUE;
		DZitsuGridSName.ReadOnly 		:=	TRUE;
		DZitsuGridRen.ReadOnly 			:=	TRUE;
		DZitsuGridBunsekiNO.ReadOnly 	:=	TRUE;
		DZitsuGridSeikakuNO.ReadOnly 	:=	TRUE;
		//	細目Grid
		DSaimokuGrid.Options	:=	DSaimokuGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
		DSaimokuGridSCode.ReadOnly 		:=	TRUE;
		DSaimokuGridSLongName.ReadOnly 	:=	TRUE;
		DSaimokuGridSSName.ReadOnly 	:=	TRUE;
		DSaimokuGridSRen.ReadOnly 		:=	TRUE;
		//	合計Grid
		DGoukeiGrid.Options	:=	DGoukeiGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
		DGoukeiGridGCode.ReadOnly 		:=	TRUE;
		DGoukeiGridGLongName.ReadOnly 	:=	TRUE;
		DGoukeiGridGSName.ReadOnly		:=	TRUE;
		DGoukeiGridGRen.ReadOnly 		:=	TRUE;

// <SYNC> MOD start
//		B_Delete.Enabled	            :=	m_cJNTArea.IsDelete;
		B_Delete.Enabled	            :=	IsDeleteEx();
// <SYNC> MOD end
		TreeView.DragMode	            :=	dmManual;

// <SYNC> ADD start　★暫定対応 →<063> DEL
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
                                            // 翌期更新済みでなければ
(*		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) and
        	((m_SyncMaster.m_CEComKbn5 <> 1) and (m_SyncMaster.m_PEComKbn5 <> 1)) then
	    begin                            	// Treeの体系変更可
			TreeView.DragMode	:=	dmAutomatic;
		end;
*)
// <SYNC> ADD end
        B_SUpDate.Enabled               :=  FALSE;
        B_SCancel.Enabled               :=  FALSE;


	    if ( m_cJNTArea.IsFusen ) then
            ToolButton.ImageIndex	:=  m_FusenColorIdx
        else
            ToolButton.ImageIndex           :=  4;

    	ToolButton.Enabled	            := m_cJNTArea.IsFusen;

   		DZitsuGrid.PopupMenu	:=	PopupFusen;     //<008>付箋PopUpは使用可能
    	DSaimokuGrid.PopupMenu	:=	PopupFusen;     //<008>付箋PopUpは使用可能
	    DGoukeiGrid.PopupMenu	:=	PopupFusen;     //<008>付箋PopUpは使用可能
	end
	//	勘定科目(通常)/科目別補助(参照)　又は　勘定科目(基本)/科目別補助(参照)
	else if (Select = KAN_NO_HO_RE) or (Select = KAN_BA_HO_RE) then
	begin
		//	実在Grid
		DZitsuGrid.Options	:=	DZitsuGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
		DZitsuGridCode.ReadOnly 		:=	FALSE;
		DZitsuGridLongName.ReadOnly 	:=	FALSE;
		DZitsuGridSName.ReadOnly 		:=	FALSE;
		DZitsuGridRen.ReadOnly 			:=	FALSE;
		DZitsuGridBunsekiNO.ReadOnly 	:=	FALSE;
		DZitsuGridSeikakuNO.ReadOnly 	:=	FALSE;
		//	細目Grid
		DSaimokuGrid.Options	:=	DSaimokuGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
		DSaimokuGridSCode.ReadOnly 		:=	TRUE;
		DSaimokuGridSLongName.ReadOnly 	:=	TRUE;
		DSaimokuGridSSName.ReadOnly 	:=	TRUE;
		DSaimokuGridSRen.ReadOnly 		:=	TRUE;
		//	合計Grid
		DGoukeiGrid.Options		:=	DGoukeiGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
		DGoukeiGridGCode.ReadOnly 		:=	FALSE;
		DGoukeiGridGLongName.ReadOnly 	:=	FALSE;
		DGoukeiGridGSName.ReadOnly		:=	FALSE;
		DGoukeiGridGRen.ReadOnly 		:=	FALSE;

		TreeView.DragMode	:=	dmAutomatic;

		DZitsuGrid.PopupMenu	:=	PopupFusen;
		DSaimokuGrid.PopupMenu	:=	nil;
		DGoukeiGrid.PopupMenu	:=	PopupFusen;
	end
	//	勘定科目(参照)/科目別補助(通常)　または　勘定科目(参照)/科目別補助(基本)
	else if (Select = KAN_RE_HO_NO) or (Select = KAN_RE_HO_BA) then
	begin
		//	実在Grid
		DZitsuGrid.Options	:=	DZitsuGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
		DZitsuGridCode.ReadOnly 		:=	TRUE;
		DZitsuGridLongName.ReadOnly 	:=	TRUE;
		DZitsuGridSName.ReadOnly 		:=	TRUE;
		DZitsuGridRen.ReadOnly 			:=	TRUE;
		DZitsuGridBunsekiNO.ReadOnly 	:=	TRUE;
		DZitsuGridSeikakuNO.ReadOnly 	:=	TRUE;
		//	細目Grid
		DSaimokuGrid.Options	:=	DSaimokuGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
		DSaimokuGridSCode.ReadOnly 		:=	FALSE;
		DSaimokuGridSLongName.ReadOnly 	:=	FALSE;
		DSaimokuGridSSName.ReadOnly 	:=	FALSE;
		DSaimokuGridSRen.ReadOnly 		:=	FALSE;
		//	合計Grid
		DGoukeiGrid.Options	:=	DGoukeiGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
		DGoukeiGridGCode.ReadOnly 		:=	TRUE;
		DGoukeiGridGLongName.ReadOnly 	:=	TRUE;
		DGoukeiGridGSName.ReadOnly		:=	TRUE;
		DGoukeiGridGRen.ReadOnly 		:=	TRUE;

		TreeView.DragMode	:=	dmAutomatic;

		DZitsuGrid.PopupMenu	:=	nil;
		DSaimokuGrid.PopupMenu	:=	PopupFusen;
		DGoukeiGrid.PopupMenu	:=	nil;
	end
	else
	begin
		//	実在Grid
		DZitsuGrid.Options	:=	DZitsuGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
		DZitsuGridCode.ReadOnly 		:=	FALSE;
		DZitsuGridLongName.ReadOnly 	:=	FALSE;
		DZitsuGridSName.ReadOnly 		:=	FALSE;
		DZitsuGridRen.ReadOnly 			:=	FALSE;
		DZitsuGridBunsekiNO.ReadOnly 	:=	FALSE;
		DZitsuGridSeikakuNO.ReadOnly 	:=	FALSE;
		//	細目Grid
		DSaimokuGrid.Options	:=	DSaimokuGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
		DSaimokuGridSCode.ReadOnly 		:=	FALSE;
		DSaimokuGridSLongName.ReadOnly 	:=	FALSE;
		DSaimokuGridSSName.ReadOnly 	:=	FALSE;
		DSaimokuGridSRen.ReadOnly 		:=	FALSE;
		//	合計Grid
		DGoukeiGrid.Options		:=	DGoukeiGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
		DGoukeiGridGCode.ReadOnly 		:=	FALSE;
		DGoukeiGridGLongName.ReadOnly 	:=	FALSE;
		DGoukeiGridGSName.ReadOnly		:=	FALSE;
		DGoukeiGridGRen.ReadOnly 		:=	FALSE;

		TreeView.DragMode	:=	dmAutomatic;

		DZitsuGrid.PopupMenu	:=	PopupFusen;
		DSaimokuGrid.PopupMenu	:=	PopupFusen;
		DGoukeiGrid.PopupMenu	:=	PopupFusen;
	end;
end;

//**********************************************************************
//*		Proccess	:	詳細参照制御処理
//*		Name		:	H.Endo
//*		Date		:	2000/12/19
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.SyousaiEnabledControl();
begin
(*
//	参照
	//	共通
	ECode.Enabled			:=	FALSE;		//	ｺｰﾄﾞ
	ERen.Enabled			:=	FALSE;		//	連想
	ELName.Enabled			:=	FALSE;		//	正式名称
	ESName.Enabled			:=	FALSE;		//	簡略名称
	EBunCode.Enabled		:=	FALSE;		//	分析ｺｰﾄﾞ(ｺｰﾄﾞ)
	ESeikakuCode.Enabled	:=	FALSE;		//	性格ｺｰﾄﾞ(ｺｰﾄﾞ)
	//	採用区分
//	EHojyo1Code.Enabled		:=	FALSE;		//	第１補助(ｺｰﾄﾞ)					//	HIS0027
//	EHojyo2Code.Enabled		:=	FALSE;		//	第２補助(ｺｰﾄﾞ)					//	HIS0027
	EBankCodeN.Enabled		:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
	EBankCodeT.Enabled		:=	FALSE;		//	銀行ｺｰﾄﾞ(ｺｰﾄﾞ)
	EStartDate.Enabled		:=	FALSE;		//	適用開始日
	EEndDate.Enabled		:=	FALSE;		//	適用終了日
	//	集計情報
	ESeiZanCode.Enabled		:=	FALSE;		//	正残(ｺｰﾄﾞ)
//	EBPCode.Enabled			:=	FALSE;		//	BS/PL(ｺｰﾄﾞ)
	EKisyuCode.Enabled		:=	FALSE;		//	期首残(ｺｰﾄﾞ)
	EDPCode.Enabled			:=	FALSE;		//	表示／印刷(ｺｰﾄﾞ)
	EHiritsuCode.Enabled	:=	FALSE;		//	比率科目(ｺｰﾄﾞ)
	EKariCode.Enabled		:=	FALSE;		//	借方資金繰(ｺｰﾄﾞ)
	EKashiCode.Enabled		:=	FALSE;		//	貸方資金繰(ｺｰﾄﾞ)
	EHendouhi.Enabled		:=	FALSE;		//	変動費比率(ｺｰﾄﾞ)
	//	出力情報
	EMainasuCode.Enabled	:=	FALSE;		//	ﾏｲﾅｽ印刷(ｺｰﾄﾞ)
	ESagakuCode.Enabled		:=	FALSE;		//	差額印刷(ｺｰﾄﾞ)
	ERiekiCode.Enabled		:=	FALSE;		//	利益印刷(ｺｰﾄﾞ)
{	//	HIS0022
	EAveCode.Enabled		:=	FALSE;		//	平均値採用(ｺｰﾄﾞ)
	ERuiSyuCode.Enabled		:=	FALSE;		//	累計集計(ｺｰﾄﾞ)
	EGoukeiDsp.Enabled		:=	FALSE;		//	合計表示区分(ｺｰﾄﾞ)
}
	EKihyousya.Enabled		:=	FALSE;		//	元帳摘要欄起票者印字(ｺｰﾄﾞ)
	EMainaName.Enabled		:=	FALSE;		//	ﾏｲﾅｽ変換科目名(科目名)
	ESousyokuCode.Enabled	:=	FALSE;		//	装飾区分
	//	入力条件
	EShiwakeCode.Enabled	:=	FALSE;		//	仕訳(ｺｰﾄﾞ)
	EKijitsuCode.Enabled	:=	FALSE;		//	期日(ｺｰﾄﾞ)
	ETegataNoCode.Enabled	:=	FALSE;		//	手形番号(ｺｰﾄﾞ)
	ETekiCode.Enabled		:=	FALSE;		//	固定摘要(ｺｰﾄﾞ)
	ETekiyouBunrui.Enabled	:=	FALSE;		//	摘要分類(ｺｰﾄﾞ)
	EShikuriCode.Enabled	:=	FALSE;		//	資金繰ｺｰﾄﾞ優先(ｺｰﾄﾞ)
//	ESyousuten.Enabled		:=	FALSE;		//	小数点(ｺｰﾄﾞ)					HIS0021
	//	電子帳簿
	ERirekiKbnCode.Enabled	:=	FALSE;		//	履歴管理(ｺｰﾄﾞ)
//	EDenHojyo1.Enabled		:=	FALSE;		//	第１補助(ｺｰﾄﾞ)
//	EDenHojyo2.Enabled		:=	FALSE;		//	第２補助(ｺｰﾄﾞ)

//--- HIS0109 St -----
	// 番号管理
	ComboNumber1.Enabled := FALSE;			// 番号1名称Combo
	ENumber1.Enabled     := FALSE;			// 番号1名称
	EDspNumber1.Enabled  := FALSE;			// 番号1表示区分
	ComboNumber2.Enabled := FALSE;			// 番号2名称Combo
	ENumber2.Enabled     := FALSE;			// 番号2名称
	EDspNumber2.Enabled  := FALSE;			// 番号2表示区分
	ETotalKbn.Enabled    := FALSE;			// 番号集計区分
//--- HIS0109 Ed -----

*)


end;

//**********************************************************************
//*		Proccess	:	ﾚｺｰﾄﾞのｾﾚｸﾀｰ移動
//*		Name		:	H.Endo
//*		Date		:	2000/12/22
//*		Parameter	:	Select		:	選択されているNodeが実在・細目の判断
//*						Code		:	選択されているNodeのｺｰﾄﾞ
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.MoveGridRecordSelecter(Select: Integer; Code: String);
var
	MemData		:	TdxMemData;
	RetRecNo	:	Integer;
	sFieldName	:	String;
begin

	MemData	:=	nil;
	case Select of
		ZITSUZAI:
		begin
			MemData		:=	MemZitsu;
			sFieldName	:=	'Code';
		end;
		SAIMOKU:
		begin
			MemData		:=	MemSai;
			sFieldName	:=	'SCode';
		end;
		GOUKEI:
		begin
			Exit;
		end;
	end;

	RetRecNo	:=	MemData.GetRecNoByFieldValue(Code,sFieldName);

	if ( RetRecNo > 0 ) then
	begin
		if ( RetRecNo = 1 ) then
			MemData.First()
		else if ( MemData.RecordCount = RetRecNo ) then
			MemData.Last
		else
			MemData.RecNo	:=	RetRecNo;
	end;

end;

//**********************************************************************
//*		Proccess	:	銀行のｺｰﾄﾞ桁数・属性取得ｺﾝﾎﾟｰﾈﾝﾄの表示切り替え
//*		Name		:	H.Endo
//*		Date		:	2000/12/25
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.GetBankInfo();
var
	DmqData		:	TMQuery;
	sFormat		:	String;
begin
	DmqData := TMQuery.Create( Self );					    //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );	//	DBとMQueryの接続

	with DmqData do
	begin
		SQL.ADD('SELECT '					);
		SQL.ADD(	'CodeDigit,'			);	//	ｺｰﾄﾞ桁数
		SQL.ADD(	'CodeAttr '				);	//	ｺｰﾄﾞ属性
		SQL.ADD('FROM '						);
		SQL.ADD(	'MasterInfo'  			);	//	ﾏｽﾀ基本情報
		SQL.ADD('WHERE '					);
		SQL.ADD(	'MasterKbn = 21'		);	//	ﾏｽﾀ区分(8:工事合計科目)
		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if EOF <> TRUE then
		begin
			wkBank.CodeKeta	:=	GetFld('CodeDigit').AsInteger;	//	ｺｰﾄﾞ桁数
			wkBank.CodeZoku	:=	GetFld('CodeAttr').AsInteger;	//	ｺｰﾄﾞ属性
		end;
	end;
	DmqData.Close;
	DmqData.Free;

	if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
	begin
		EBankCodeT.Visible		:= FALSE;	//	TxtEdit
		EBankCodeN.Visible		:= TRUE;	//	NumEdit

		if (wkBank.CodeZoku = 1) then	//	ｺｰﾄﾞ属性が数字の前0ありの時
			sFormat	:= StringOfChar('0', wkBank.CodeKeta)
		else
			sFormat	:= '';

		EBankCodeN.Enabled		:=	TRUE;
		EBankCodeN.FormatStr	:=	sFormat;
		EBankCodeN.Digits		:=	wkBank.CodeKeta;
		EBankCodeN.MaxValue		:=	StrToInt64(StringOfChar('9', wkBank.CodeKeta));
	end
	else						// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		EBankCodeN.Visible		:=	FALSE;
		EBankCodeT.Visible		:=	TRUE;
		EBankCodeT.Enabled		:=	TRUE;
		EBankCodeT.MaxLength	:=	wkBank.CodeKeta
	end;
end;

//************************************************************************
//*		Component		:	EBankCodeX ( TMNumEdit･ TMTxtEdit)
//*							検索ｴｸｽﾌﾟﾛｰﾗ表示（銀行）
//*		Event			:	OnArrowClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.EBankCodeArrowClick(Sender: TObject);
{
var
	MasWndParam	:	TJNTMasWndParam;
	Wnd			:	TJNTMasWndIF;
}
begin
{
	//	実在/細目で銀行コードを採用しているかどうかのチェック
	if (MTab_Select.Items.Selected = 0) then	//	実在時
	begin
		if (BankUseCheck(SAIMOKU,FALSE)) then	//	細目で銀行ｺｰﾄﾞを採用していた時は実在では入力不可
		begin
			//	細目で銀行コードを採用しています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
			MjsMsgRec.sMsg := '科目別補助'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			LBankName.Caption	:=	'';
			EBankCodeN.SetFocus;
			exit;
		end;
    end
	else if (MTab_Select.Items.Selected = 1) then	//	細目時
	begin
		if (BankUseCheck(ZITSUZAI,FALSE)) then	//	実在で銀行ｺｰﾄﾞを採用していた時は細目では入力不可
		begin
			//	実在で銀行コードを採用しています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
			MjsMsgRec.sMsg := '実在'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			LBankName.Caption	:=	'';
			EBankCodeN.SetFocus;
			exit;
		end;
    end;

	Wnd := TJNTMasWndIF.Create();
	Wnd.Init( pointer ( m_pRec ) );

	MasWndParam					:=	TJNTMasWndParam.CreateParam();
	MasWndParam.m_GCodeFD		:=	'GCode';			//	コードフィールド名
	MasWndParam.m_RenCharFD		:=	'Renso';			//	連想フィールド名
	MasWndParam.m_SimpleNameFD	:=	'SimpleName';		//	簡略名フィールド名
	MasWndParam.m_TableName		:=	'HojyoMA';			//	テーブル名
    MasWndParam.m_SQL_Where 	:=	'MASTERKBN = 21 AND SUMKBN = 0 AND RDelKbn = 0';	// Where句の条件
	MasWndParam.m_pApRec 		:=	pointer( m_pRec );	//	ApRecのポインタ
	MasWndParam. m_iCodeLength	:=	wkBank.CodeKeta;	//　6桁//コード桁数
	MasWndParam. m_iCodeAttr	:=	wkBank.CodeZoku;	//　前０なし数字//コード属性

	if Wnd.DoDlg(MasWndParam) = mrOk then
	begin
		if (wkBank.CodeZoku <= 1) then	// ｺｰﾄﾞ属性: 数字
		begin
			if MasWndParam.m_ExpRetCode = '' then
				EBankCodeN.Value :=	0
			else
			begin
				if (MasWndParam.m_ExpRetCode = '0000000000') then
				begin
					EBankCodeN.InputFlag :=	FALSE;
					EBankCodeN.Value	 :=	1;
					EBankCodeN.Value	 :=	0;
				end
                else
				begin
					EBankCodeN.InputFlag :=	FALSE;								//HIS0106
					EBankCodeN.Value :=	StrToInt64(MasWndParam.m_ExpRetCode);		//	ｺｰﾄﾞ
				end;
			end;
        end
		else
		begin
			EBankCodeT.Text	:= MasWndParam.m_ExpRetCode;
		end;
		LBankName.Caption := MasWndParam.m_ExpRetText;					//	名称
	end;
	MasWndParam.Free();

	Wnd.Term();
	Wnd.Free();
}
end;

//**********************************************************************
//*		Proccess	:	銀行ｺｰﾄﾞのCheck
//*		Name		:	H.Endo
//*		Date		:	2000/12/25
//*		Parameter	:	Code		:	銀行ｺｰﾄﾞ
//*		Return		:	簡略名称
//*		History		:
//**********************************************************************
function TJNTCRP009001f.GetKmkMABank(Code: String; var RecordFlag: Boolean):String;
var
	DmqData		:	TMQuery;
	sBankName	:	String;
begin
	//	初期処理
	sBankName	:=	'';
	RecordFlag	:=	FALSE;

    if ( Code = '' ) then Exit;

	DmqData := TMQuery.Create( Self );					    //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );	//	DBとMQueryの接続

	with DmqData do
	begin
		SQL.Add('SELECT                     ');
		SQL.Add('    SimpleName             ');	//	簡略名称
		SQL.Add('FROM HojyoMA               '); //	補助基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 21       '); //	ﾏｽﾀ区分(21:銀行)
		SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ
// <037>↓
//		ParamByName('Code').AsString := Code;
//        ParamByName('Code').AsString := Format('%.16d',[StrToInt64(Trim(Code))]);
        if wkBank.CodeZoku = 2 then         // 文字
            ParamByName('Code').AsString := Code
        else                                // 数字、0つき数字
            ParamByName('Code').AsString := Format('%.16d',[StrToInt64(Trim(Code))]);
// <037>↑

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			sBankName	:=	GetFld('SimpleName').AsString;	//	簡略名称
			RecordFlag	:=	TRUE;
		end;
	end;
	DmqData.Close;
	DmqData.Free;

	result	:=	sBankName;

end;

//**********************************************************************
//*		Proccess	:	実在/細目で銀行ｺｰﾄﾞを採用しているCheck
//*		Name		:	H.Endo
//*		Date		:	2000/12/26
//*		Parameter	:	Select		:	実在(ZITSUZAI)/細目(SAIMOKU)
//*						Choice		: 	分析ｺｰﾄﾞの範囲内のﾁｪｯｸ(TRUE)/銀行ｺｰﾄﾞのﾁｪｯｸ(FALSE)
//*		Return		:	TRUE/FALSE
//*		History		:
//**********************************************************************
function TJNTCRP009001f.BankUseCheck(Select: Integer; Choice: Boolean):Boolean;
var
	DmqData		:	TMQuery;
	iPos		:	Integer;
	sCode		:	String;
	bBankCode	:	Boolean;
	cNode		:	TTreeNode;		//	選択されているNode
	wkRec		:	^TaikeiRec;		//	選択されているNodeの構造体
	Bunseki		:	Integer;
begin
	//	初期処理
	bBankCode	:=	FALSE;
    wkRec := Nil;

    //	MQueryの構築
	DmqData := TMQuery.Create( Self );
    //	DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqData do
	begin
		SQL.Add('SELECT                     ');
		SQL.Add('    AnalyzeCode            ');	//	分析ｺｰﾄﾞ
		SQL.Add('   ,BankNCode              ');	//	銀行ｺｰﾄﾞ
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = :MasKbn  '); //	ﾏｽﾀ区分
		SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ
		SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

		if ( Select = ZITSUZAI ) then		//	実在時
		begin
			SQL.Add('  AND SubCode = :SaiCode ');	//	細目ｺｰﾄﾞ
			ParamByName('MasKbn')   .AsInteger	:=	1;						//	ﾏｽﾀ区分(1:勘定科目)
			iPos	:=	MJSHanPos(' ', MTab_Select.BorderCaption);			//	先頭からSPACEまでの桁数COUNT
			sCode	:=	MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1);			//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
			ParamByName('Code').AsInteger	:=	StrToInt(sCode);		    //	実在ｺｰﾄﾞ
// <013>			ParamByName('SaiCode').AsString	:=	''; 						//	細目ｺｰﾄﾞ
			ParamByName('SaiCode').AsString	:=	'0'; 						//	細目ｺｰﾄﾞ<013>
		end
		//	細目時
		else if ( Select = SAIMOKU ) then
		begin
			ParamByName('MasKbn').AsInteger	:=	2;						    //	ﾏｽﾀ区分(2:細目科目)
			ParamByName('Code')  .AsInteger	:=	StrToIntDef(ECode.Text,0);		//	実在ｺｰﾄﾞ
		end
		//	Treeで実在選択時に細目のTABを選ばれた時
		else if ( Select = OTHER ) then
		begin
			cNode := TreeView.Selected;		//	選択されているNode
			if cNode <> nil then
				wkRec := cNode.Data;			//	NodeDataを体系へ
			if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
			begin
				SQL.Add('  AND SubCode = :SaiCode '	);	                //	細目ｺｰﾄﾞ
				ParamByName('MasKbn')   .AsInteger :=	1;			    //	ﾏｽﾀ区分(1:勘定科目)
				ParamByName('Code')     .AsInteger :=	wkRec.GCode;	//	実在ｺｰﾄﾞ
// <013>				ParamByName('SaiCode')  .AsString  :=	'';			    //	細目ｺｰﾄﾞ
				ParamByName('SaiCode')  .AsString  :=	'0';			    //	細目ｺｰﾄﾞ<013>
			end;
        end;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Result	:=	FALSE;
			Exit;
		end;

		if (Select = SAIMOKU) then
		begin
			while (EOF <> TRUE) do
			begin
//				if ((GetFld('BankNCode').AsString) = '') then
                if ((GetFld('BankNCode').AsFloat) = 0 ) then
					bBankCode	:=	FALSE	//	ない時
				else
				begin
					bBankCode	:=	TRUE;	//	あった時
					break;
				end;
				next;
			end;
		end
		else
		begin
			if (EOF <> TRUE) then
			begin
				if (Choice) then
				begin
					//	分析ｺｰﾄﾞが現預金の時
					Bunseki := GetFld('AnalyzeCode').AsInteger;
					if (((Bunseki > 0) and (Bunseki < 10))
						or (Bunseki = 40) or (Bunseki = 46)								//HIS0068
						or (Bunseki = 38) or (Bunseki = 135) or (Bunseki = 138)) then	//HIS0077
						bBankCode	:=	FALSE
					else
						bBankCode	:=	TRUE;
				end
				else
				begin
//					if ((GetFld('BankNCode').AsString) = '') then
                    if ((GetFld('BankNCode').AsFloat) = 0 ) then
						bBankCode	:=	FALSE	//	銀行ｺｰﾄﾞがない時
					else
						bBankCode	:=	TRUE;	//	銀行ｺｰﾄﾞがあった時
				end;
			end ;
		end;
	end;
	DmqData.Close;
	DmqData.Free;

	result	:=	bBankCode;
end;

//-----------------------------------------------------------------------------
// FukuKmkCheck
//	< 複合科目チェック >
//      PARAM   :   NCode   :   科目内部コード
//		VAR		:
//      RETURN  :   TRUE:真 FALSE:偽
//      MEMO    :
//-----------------------------------------------------------------------------
function    TJNTCRP009001f.FukuKmkCheck(NCode: Extended): Boolean;
var
	iLoop	:	Integer;
	bReturn	:	Boolean;
begin

	bReturn	:=	FALSE;

	for iLoop := 0 to 2 do
	begin
		if ( NCode = sFukuKmk[iLoop] ) then
		begin
			bReturn	:=	TRUE;
			break;
		end;
    end;

	result	:=	bReturn;

end;

//**********************************************************************
//*		Proccess	:	採用件数Check
//*		Name		:	H.Endo
//*		Date		:	2000/12/28
//*		Parameter	:	Code		:	選択された実在科目ｺｰﾄﾞ
//*						Kbn			:	DB検索時(DATABASE)/新規・更新時(NEWUP)
//*		Return		:	採用件数
//*		History		:
//**********************************************************************
function TJNTCRP009001f.AdoptCountCheck(NCode: Extended; Kbn: Integer):Integer;
var
	DmqData		:	TMQuery;
	iCount		:	Integer;
begin

	//	初期処理
	iCount	:=	0;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	if ( Kbn = DATABASE ) then		//	DB検索時
	begin
    end
	else
    begin
		with DmqData do
		begin
			SQL.Add('SELECT                     ');
			SQL.Add('   SubKmkUse               ');	//	細目科目採用区分
			SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
			SQL.Add('WHERE MasterKbn = 1        '); //	ﾏｽﾀ区分(1:勘定科目)
			SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
            SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
			SQL.Add('  AND NCode     = :ExNCode ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND CNCode    = 0        ');	//	細目ｺｰﾄﾞ

			ParamByName('ExNCode')  .AsFloat    :=	NCode;		//	実在ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if Open = FALSE then
			begin
				ErrorMessageDsp(DmqData);
				DmqData.Close;
				DmqData.Free;
				Result	:=	0;
				Exit;
			end;

			if (EOF <> TRUE) then
			begin
				if ((GetFld('SubKmkUse').AsInteger) <> 0) then	//	細目科目が採用されている時
					iCount	:=	iCount + 1;
			end;
		end;

		DmqData.Close;
		DmqData.Free;
	end;

	Result	:=	iCount;

end;


//-----------------------------------------------------------------------------
// KoujiAdoptCheck
//	< 工事採用チェック >
//      PARAM   :   NCode   :   内部コード
//		VAR		:
//      RETURN  :   TRUE:採用 FALSE:不採用
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.KoujiAdoptCheck(NCode: Extended):Boolean;
var
	DmqData		:	TMQuery;
	bFlag		:	Boolean;
    iKoujiFLD   :   String;
begin

	//	初期処理
	bFlag	:=	FALSE;

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqData do
	begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT MasterKbn FROM MasterInfo                       '
            +   'WHERE  (MasterKbn between 201 and 210)                 '
            +   '  AND ((UseKbn = 1 ) AND (KojUseKbn between 1 and 3))  ');

        Open();

        if ( not EOF ) then
        begin
            iKoujiFLD    :=  'PrjUse' + IntToStr(FieldByName('MasterKbn').AsInteger - 200);
        end
        else
        begin
          	Close;
        	Free;

        	Result	:=	bFlag;
            Exit;
        end;

        // KmkMAからﾌﾟﾛｼﾞｪｸﾄ採用区分をﾁｪｯｸする
        Close();
        SQL.Clear();
        SQL.Add('SELECT                         '
            +   iKoujiFLD + '                   '
            +   'FROM KmkMA                     '
            +   'WHERE Masterkbn = 1            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND NCode     = :ExNCode     '
            +   '  AND CNCode    = 0            ');

        ParamByName('ExNCode').AsFloat  :=  NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
			Result	:=	FALSE;
			Exit;
		end;

		if ( not EOF) then
		begin
			if ((GetFld(iKoujiFLD).AsInteger) = 1) then
				bFlag	:=	TRUE;
		end;
	end;

    DmqData.Close();
    DmqData.Free();

	Result	:=	bFlag;

end;

//**********************************************************************
//*		Proccess	:	貼り付け時に同一ｺｰﾄﾞがあるかCheck
//*		Name		:	H.Endo
//*		Date		:	2001/1/11
//*		Parameter	:	SAKI		:	加算先ｺｰﾄﾞ
//*						MOTO		:	加算元ｺｰﾄﾞ
//*		Return		:	採用(TRUE)/不採用(FALSE)
//*		History		:
//**********************************************************************
function TJNTCRP009001f.PasteCheck(SAKI: Extended; MOTO: Extended):Boolean;
var
	DmqData		:	TMQuery;
	bFlag		:	Boolean;
begin

	//	初期処理
	bFlag	:=	FALSE;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
		Close ();
		SQL.Clear;
		SQL.Add('SELECT                         ');
		SQL.Add('   *                           ');
		SQL.Add('FROM KmkTree                   '); //	科目加算体系ﾏｽﾀ
		SQL.Add('WHERE SumNCode   = :SakiCode   '); //	加算先内部ｺｰﾄﾞ
		SQL.Add('  AND BasedNCode = :MotoCode   ');	//	加算元内部ｺｰﾄﾞ
		SQL.Add('  AND MasterKbn  = 1           ');	//	ﾏｽﾀ区分(1:勘定科目)

		ParamByName ('SakiCode'	).AsFloat	:=	SAKI;		//	加算先内部ｺｰﾄﾞ
		ParamByName ('MotoCode'	).AsFloat	:=	MOTO;		//	加算元内部ｺｰﾄﾞ

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Result	:=	FALSE;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			bFlag	:=	TRUE;
		end;
	end;

	DmqData.Close;
	DmqData.Free;

	Result	:=	bFlag;

end;

//-----------------------------------------------------------------------------
// MasInfoKmkCodeCheck
//	< 部門・工事・セグメント範囲・採用チェック >
//      PARAM   :   NCode   :   外部コード
//                  BPKbn   :   ＢＳ／ＰＬ区分
//                  BunCode :   分析ｺｰﾄﾞ		// <121>ADD
//		VAR		:   EMPLOY  :   採用区分格納構造体
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
//procedure TJNTCRP009001f.MasInfoKmkCodeCheck(GCODE: Integer; BPKBN: Integer; var EMPLOY: SaiyouRec);						// <121>MOD
procedure TJNTCRP009001f.MasInfoKmkCodeCheck(GCODE: Integer; BPKBN: Integer; BunCode: Integer; var EMPLOY: SaiyouRec);		// <121>MOD
var
	DmqData		:	TMQuery;
	iLoop		:	Integer;
    aMasterKbn  :   array[0..11] of Integer;    // [0]:工事 [1]:部門 [2-11]:ｾｸﾞﾒﾝﾄ1～10
    iSegKbn     :   Integer;

    // MasterInfoのKmkNCodeよりKmkMAのGCodeを取得
    function fnGetKmkma_GCode(ExNCode: Extended): Integer;
    var
        DmqKmkMA    :   TMQuery;
    begin

        Result      :=  0;
    	DmqKmkMA    := TMQuery.Create( Self );
        MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqKmkMA );

        with DmqKmkMA do
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT GCODE FROM KmkMA        '
                +   'WHERE (MasterKbn = :nMasKbn)   '
                +   '  AND (SumKbn    = 0)          '
                +   '  AND (NCode     = :nNCode)    '
                +   '  AND (RDelKbn   = 0)          ');
            ParamByName('nMasKbn').AsInteger    :=  Kmk;
            ParamByName('nNCode') .AsFloat      :=  ExNCode;
            Open();

            if not EOF then
                Result  :=  GetFld('GCODE').AsInteger;

        end;

        DmqKmkMA.Close();
        DmqKmkMa.Free();

    end;

begin

	// 初期処理
	aMasterKbn[0]	:=	m_KoujiMasKbn;		// 工事
    aMasterKbn[1]	:=	41;		            // 部門

    iSegKbn         :=  100;
    for iLoop := 2 to 11 do
    begin
        inc(iSegKbn);
    	aMasterKbn[iLoop]   :=  iSegKbn;    // ｾｸﾞﾒﾝﾄ
    end;

    // MQueryの構築
	DmqData     := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );


	for iLoop := 0 to 11 do
	begin
        // 工事の採用がない場合は無視
        if ( aMasterKbn[iLoop] = 0 ) then Continue;

		with DmqData do
		begin
			Close ();
			SQL.Clear();
			SQL.Add('SELECT                         '
			    +   '    UseKbn                     '	// 採用区分
                +   '   ,KojUseKbn                  '   // 工事採用区分
			    +   '   ,KmkNCode1                  '	// B/Sの部門・ｾｸﾞﾒﾝﾄ時に使用
			    +   '   ,KmkNCode2                  '	// B/Sの部門・ｾｸﾞﾒﾝﾄ時に使用
			    +   '   ,KmkNCode3                  '	// P/Lの部門・ｾｸﾞﾒﾝﾄ・工事時に使用
			    +   '   ,KmkNCode4                  '	// P/Lの部門・ｾｸﾞﾒﾝﾄ・工事時に使用
			    +   '   ,KmkNCode8                  '	// B/Sの工事時に使用
			    +   '   ,KmkNCode9                  '   // B/Sの工事時に使用
			    +   'FROM MasterInfo                '
    			+   'WHERE  (MasterKbn = :MasKbn)   ');

			ParamByName ('MasKbn').AsInteger	:=	aMasterKbn[iLoop];

			// ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp( DmqData );
				DmqData.Close();
				DmqData.Free();
				Exit;
			end;

			if ( EOF <> TRUE ) then
			begin
                // -----------------------------
                //            部門
                // -----------------------------
                if ( aMasterKbn[iLoop] = 41 ) then
                begin
				{// <111>DEL↓
                    // -------------------------
                    // 工事採用区分がありの時
                    // ※(必ず0なのでこの判定は不要??）
                    // -------------------------
                    if ( EMPLOY.Kouji = 1 ) then
    				begin
                        // 部門採用なし
    					EMPLOY.Bumon	:=	0;
    				end
				}// <111>DEL↑
                    // -------------------------
                    //          B/S時
                    // -------------------------
    			//	else if ( BPKBN = 0 ) then	// <111>DEL
					if ( BPKBN = 0 ) then		// <111>ADD
    				begin
	    				if ((( fnGetKmkma_GCode(GetFld('KmkNCode1').AsInteger)) <= gCODE )  and
							(( fnGetKmkma_GCode(GetFld('KmkNCode2').AsInteger)) >= gCODE )) and
                             ( GetFld('UseKbn')   .AsInteger   = 2     )  then
                            // 部門採用あり
    						EMPLOY.Bumon	:=	1
    					else
                            // 部門採用なし
    						EMPLOY.Bumon	:=	0;
    				end
                    // -------------------------
                    //	        P/L時
                    // -------------------------
    				else if ( BPKBN = 1 ) then
                    begin
    					if ((( fnGetKmkma_GCode(GetFld('KmkNCode3').AsInteger)) <= gCODE )  and
							(( fnGetKmkma_GCode(GetFld('KmkNCode4').AsInteger)) >= gCODE )) and
                             ( GetFld('UseKbn')  .AsInteger   <> 0     )  then
                            // 部門採用あり
    						EMPLOY.Bumon	:=	1
    					else
                            // 部門採用なし
   	    					EMPLOY.Bumon	:=	0;
    				end;
                end
                // -----------------------------
                //	        セグメント
                // -----------------------------
                else if ( aMasterKbn[iLoop] in [101,102,103,104,105,
                                                106,107,108,109,110] ) then
                begin
                    // -------------------------
                    // 工事採用区分がありの時
                    // ※(必ず0なのでこの判定は不要??）
					// -------------------------
                    if ( EMPLOY.Kouji = 1 ) then
    				begin
                        // ｾｸﾞﾒﾝﾄ採用なし
                        EMPLOY.Seg[iLoop-2]   :=  0;
                    end
                    // -------------------------
                    //	        B/S時
                    // -------------------------
                    else if ( BPKBN = 0 ) then
                    begin
                        if ((( fnGetKmkma_GCode(GetFld('KmkNCode1').AsInteger)) <= gCODE )  and
                            (( fnGetKmkma_GCode(GetFld('KmkNCode2').AsInteger)) >= gCODE )) and
                             ( GetFld('UseKbn')   .AsInteger   = 2     )  then
                            // ｾｸﾞﾒﾝﾄ採用あり
                            EMPLOY.Seg[iLoop-2]   :=  1
                        else
                            // ｾｸﾞﾒﾝﾄ採用なし
                            EMPLOY.Seg[iLoop-2]	:=	0;
                    end
                    // -------------------------
                    //	        P/L時
                    // -------------------------
                    else if ( BPKBN = 1 ) then
                    begin
                        if ((( fnGetKmkma_GCode(GetFld('KmkNCode3').AsInteger)) <= gCODE )  and
                            (( fnGetKmkma_GCode(GetFld('KmkNCode4').AsInteger)) >= gCODE )) and
                             ( GetFld('UseKbn')   .AsInteger  <> 0     )  then
                            // ｾｸﾞﾒﾝﾄ採用あり
                            EMPLOY.Seg[iLoop-2]   :=	1
                        else
                            //	ｾｸﾞﾒﾝﾄ採用なし
                            EMPLOY.Seg[iLoop-2]   :=	0;
                    end;
                end
                // -----------------------------
                //             工事
                // -----------------------------
                else if ( aMasterKbn[iLoop] = m_KoujiMasKbn ) then
                begin
                    // -------------------------
                    //	        B/S時
                    // -------------------------
                    if ( BPKBN = 0 ) then
                    begin
                        // 未成工事支出金ｺｰﾄﾞ開始～終了の範囲
                        if (((( fnGetKmkma_GCode(GetFld('KmkNCode8').AsInteger)) <= gCODE )  and
                             (( fnGetKmkma_GCode(GetFld('KmkNCode9').AsInteger)) >= gCODE )) or
                             (( fnGetKmkma_GCode(GetFld('KmkNCode1').AsInteger)) =  gCODE )  or	//	未成工事受入金ｺｰﾄﾞ
                             (( fnGetKmkma_GCode(GetFld('KmkNCode2').AsInteger)) =  gCODE )) and	//	完成工事未収入金ｺｰﾄﾞ
                              ( GetFld('UseKbn')   .AsInteger  =  1     )  and
                              ( GetFld('KojUseKbn').AsInteger  =  1     )  then
                            // 工事採用あり
                            EMPLOY.Kouji	:=	1
                        else
                            // 工事採用なし
                            EMPLOY.Kouji	:=	0;
                    end
                    // -------------------------
                    //	        P/L時
                    // -------------------------
                    else if ( BPKBN = 1 ) then
                    begin
                        if  ((( fnGetKmkma_GCode(GetFld('KmkNCode3').AsInteger) <= gCODE )  and
                              ( fnGetKmkma_GCode(GetFld('KmkNCode4').AsInteger) >= gCODE )  and
//                              ( Trunc(EBunCode.Value)  = 101                             )) or  		// <121>MOD 分析ｺｰﾄﾞｴﾃﾞｨｯﾄではなく、引数で指定するよう修正
                              ( BunCode = 101                             				 )) or	  		// <121>MOD
                             (( fnGetKmkma_GCode(GetFld('KmkNCode8').AsInteger) <= gCODE )  and
                              ( fnGetKmkma_GCode(GetFld('KmkNCode9').AsInteger) >= gCODE )) or
                              ( fnGetKmkma_GCode(GetFld('KmkNCode1').AsInteger) =  gCODE )  or	//	未成工事受入金ｺｰﾄﾞ
                              ( fnGetKmkma_GCode(GetFld('KmkNCode2').AsInteger) =  gCODE )) and	//	完成工事未収入金ｺｰﾄﾞ
                             (( GetFld('UseKbn')   .AsInteger) =  1     )  and
                             (( GetFld('KojUseKbn').AsInteger  =  2     )   or
                              ( GetFld('KojUseKbn').AsInteger  =  3     )) then
                            // 工事採用あり
                            EMPLOY.Kouji	:=	1
                        else
                            //	工事採用なし
                            EMPLOY.Kouji	:=	0;
                    end;
				end;
			end;
		end;
	end;

	DmqData.Close();
	DmqData.Free();

end;

//**********************************************************************
//*		Proccess	:	細目科目で諸口の件数処理
//*		Name		:	H.Endo
//*		Date		:	2001/1/15
//*		Parameter	:	CODE		:	外部ｺｰﾄﾞ
//*						DMQDATA		:	接続済みQuery
//*						HANTEI		:	TRUE(細目以外の件数)/FALSE(諸口があるかないか)
//*		Return		:	TRUE(0件)/FALSE(1件以上)/TRUE(あり)/FALSE(なし)
//*		History		:
//**********************************************************************
function TJNTCRP009001f.Syokuchi(CODE: Integer; HANTEI: Boolean):Boolean;
var
	DmqData		:	TMQuery;
begin
	//	初期処理
	result	:=	FALSE;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//	諸口追加処理
	with DmqData do
	begin
		//	諸口以外の細目があるかCheck
		Close;
		SQL.Clear;
		SQL.Add('SELECT                     ');

		if ( HANTEI ) then	//	細目の件数
			    SQL.Add('COUNT(SubCode)     ')	//	細目ｺｰﾄﾞ
		else    SQL.Add('*                  ');

		SQL.Add('FROM KmkMA                 ');     //	勘定科目基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 2        ');     //	ﾏｽﾀ区分(2:細目科目)
		SQL.Add('  AND SumKbn    = 0        ');	    //	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn   = 0        ');	    //	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND GCode     = :GCode   ');	    //	外部ｺｰﾄﾞ

		if ( HANTEI ) then
		begin
			SQL.Add('  AND Syokuchikbn <> 1     ');	//	諸口ｺｰﾄﾞ(not 1:諸口以外)
		end
		else
		begin
			SQL.Add('  AND Syokuchikbn  = 1     ');	//	諸口ｺｰﾄﾞ(=   1:諸口)
		end;
		ParamByName('GCode').AsInteger	:=	CODE;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			if (HANTEI) then
			begin
				if ((GetFld('COUNT(KmkMA.SubCode)').AsInteger) = 0) then
					result	:=	TRUE;
			end
			else
				result	:=	TRUE
		end;
	end;
	DmqData.Close;
	DmqData.Free;

end;

//**********************************************************************
//*		Proccess	:	細目科目の件数をｶｳﾝﾄ
//*		Name		:	H.Endo
//*		Date		:	2001/1/18
//*		Parameter	:	なし
//*		Return		:	細目の件数
//*		History		:
//**********************************************************************
(*
function TJNTCRP009001f.GetCount(): integer;								//	HIS0009
var
	Pos		:	TBookmark;
	iCount	:	Integer;
begin
	Pos		:= MemSai.GetBookmark;
	iCount	:= 0;

	DSourceSai.Enabled := FALSE;
   	MemSai.First;
    while (MemSai.Eof = FALSE) do
    begin
    	if MemSai.FieldByName('SCode').Asinteger >= 0 then      // 諸口区分をみるように変更
        begin
        	inc(iCount);
        end;
		MemSai.Next;
    end;
	if ( Pos = nil ) then
	begin
		//	初期位置は先頭
		MemSai.First();
	end
	else
	begin
		MemSai.GotoBookmark( Pos );
		MemSai.FreeBookmark( Pos );
	end;
   	DSourceSai.Enabled := TRUE;
	result := iCount;
end;
*)
//************************************************************************
//*		Component		:	MemSai ( TdxMemData )
//*							細目科目のMemDataに書き込んだ後
//*		Event			:	AfterPost
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.MemSaiAfterPost(DataSet: TDataSet);	//	HIS0009
var
	wkRec		:	^TaikeiRec;
	TNode		:	TTreeNode;
	iCode		:	Integer;
begin
	// 科目別補助の表示速度を速める為に追加
	if gbT_FusenFlag = TRUE then	//	HIS0046
		exit;

	// BeforePostでｴﾗｰが発生した時
	if m_KmkHError = TRUE then
	begin
		m_KmkHError := FALSE;
		exit;
	end;

end;

//************************************************************************
//*		Component		:	DZitsuGrid ( TdxDBGrid )
//*							Nodeが移動する前(実在科目)
//*		Event			:	OnBeforeChangeNode
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridBeforeChangeNode(Sender: TObject; Node,
  NewNode: TdxTreeListNode; var CanChange: Boolean);
begin
	if (DZitsuGrid.DataSource.DataSet.FieldByName('Code').IsNull) or
			(DZitsuGrid.DataSource.DataSet.FieldByName('Code').AsInteger = 0) then
//		CanChange	:=	FALSE;
end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*							Nodeが移動する前(合計科目)
//*		Event			:	OnBeforeChangeNode
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridBeforeChangeNode(Sender: TObject; Node,
  NewNode: TdxTreeListNode; var CanChange: Boolean);
begin
	if (DGoukeiGrid.DataSource.DataSet.FieldByName('GCode').IsNull) or
			(DGoukeiGrid.DataSource.DataSet.FieldByName('GCode').AsInteger = 0) then
//		CanChange	:=	FALSE;
end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*							Nodeが移動する前(細目科目)
//*		Event			:	OnBeforeChangeNode
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridBeforeChangeNode(Sender: TObject; Node,
  NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	Pos		:	Integer;		//	SPASEまでの桁数
	iGCode	:	Integer;
begin
	if (DSourceSai.DataSet.FieldByName('SCode').IsNull) then
	begin
//hiro		CanChange := FALSE;
		exit;
	end;

	//	加算先ｺｰﾄﾞ
	Pos		:=	MJSHanPos(' ', MTab_N.BorderCaption);				//	先頭からSPACEまでの桁数COUNT
	iGCode	:=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));	//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ

	//	細目ｺｰﾄﾞ0(諸口)かつ細目件数が0件の時
// <013>	if (DSourceSai.DataSet.FieldByName('SCode').AsString = '') and
	if (DSourceSai.DataSet.FieldByName('SCode').AsString = '0') and // <013>
											(Syokuchi(iGCode,TRUE)) then
		CanChange := FALSE
//--- HIS0073 START -----
// <013>	else if (MemSai.State in [dsInsert]) and (DSourceSai.DataSet.FieldByName('SCode').AsString = '')
	else if (MemSai.State in [dsInsert]) and (DSourceSai.DataSet.FieldByName('SCode').AsString = '0')   // <013>
																		and (Syokuchi(iGCode,FALSE)) then
		CanChange := FALSE;
//--- HIS0073  END  -----
end;

//**********************************************************************
//*		Proccess	:	ｽﾄｱﾄﾞのSQL文作成
//*		Name		:	H.Endo
//*		Date		:	2001/1/25
//*		Parameter	:	FLAG		:	担当者選択なし(-1以外:TRUE/-1:FALSE)
//*						StratEndFlag:	ｽﾄｱﾄﾞの開始(TRUE)/終了(FALSE)
//*		Return		:	作成したSQL文
//*		History		:
//**********************************************************************
function TJNTCRP009001f.MakeSQL(FLAG,StratEndFlag: Boolean):String;	//	HIS0010,HIS0038,HIS0053
var
	sSQL	:	String;
begin
	sSQL := '';
	if (StratEndFlag = TRUE) then
		sSQL	:=	'CALL MP200010(0'	//	ｽﾄｱﾄﾞの開始
	else
		sSQL	:=	'CALL MP200010(1';	//	ｽﾄｱﾄﾞの終了
	if (FLAG) then		//	担当者選択なし
	begin
		sSQL	:=	sSQL + ',:TANCD'
	end;
	sSQL	:=	sSQL + ')';

	Result	:=	sSQL;
end;

//**********************************************************************
//*		Proccess	:	ｴﾗｰﾒｯｾｰｼﾞ表示処理
//*		Name		:	H.Endo
//*		Date		:	2001/1/26
//*		Parameter	:	DmQuery		:	ｴﾗｰになったQuery
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.ErrorMessageDsp(DmQuery: TMQuery);
begin

	case ComArea.m_MsgStd.GetDBCode(DmQuery) of
		1:
		begin
			//	最大登録件数をｵｰﾊﾞｰしました
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 0,1 );
    		MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
		2:
		begin
			//	･･･のため削除できません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,5 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '固定体系区分が固定' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
		3:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '子供が存在する為削除' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
		4:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '仕訳が存在する為削除' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
		5:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '諸口、総合計を削除する時にその他のマスタが登録済みの為削除' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                            );
		end;
		6:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '支払予定データが存在する為削除' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
		7:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '部署情報が存在する為削除' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
		8:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18 );
    		MjsMessageBoxEx(AOwner, // <005>
                            '未連結仕訳(部署or分散)が存在する為削除' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
// <060> ↓
        -193, -196:
        begin
            // 重複ｴﾗｰ
            ComArea.m_MsgStd.GetMsg ( MjsMsgRec, 10000, 10017 );
			MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            FALSE
                           );
        end;
        -210:
        begin
            // ﾛｯｸｴﾗｰ
            ComArea.m_MsgStd.GetMsg ( MjsMsgRec, 10000, 10016 );
			MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            FALSE
                           );
        end;
// <060> ↑
		else
		begin
			ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, DmQuery );
			MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            FALSE
                           );
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	表示用文字列作成
//*		Name		:	H.Endo
//*		Date		:	2001/2/1
//*		Parameter	:	CODE		:	ｺｰﾄﾞ
//*						NAME		:	名称
//*		Return		:	作成した表示用文字
//*		History		:
//**********************************************************************
function TJNTCRP009001f.MakeDspString(CODE: Integer; NAME: String):String;		//	HIS0012
var
	sWork		:	String;
	sWork2		:	String;
	iCnt		:	Integer;
begin
	//	初期処理
	sWork	:=	'';
	sWork2	:=	'';
	iCnt	:=	0;

	sWork	:=	IntToStr(CODE);
	iCnt	:=	6 - Length(sWork);
	sWork2	:=	StringOfChar(' ', iCnt);
	sWork	:=	sWork2 + sWork;
	Result	:=	sWork + ' ' + NAME;
end;

function TJNTCRP009001f.MakeDspString_Sai(CODE, NAME: String; Attr, Digit: Integer):String;
var
	sWork		:	String;
	sWork2		:	String;
	iCnt		:	Integer;
begin

    // 細目時、属性を判断して表示する
    sWork   :=  fnSaimokuSetAttr(0,Code,Attr,Digit);

	Result	:=	sWork + ' ' + NAME;

end;


//**********************************************************************
//*		Proccess	:	性格ｺｰﾄﾞﾃﾞﾌｫﾙﾄ設定処理
//*		Name		:	H.Endo
//*		Date		:	2001/02/07
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.SeikakuDefaultSet();	//	HIS0014
begin
	//	通常科目型
	aDefaultSeikaku[0].Kijitsu		:=	0;	//	期日入力区分			(なし)
	aDefaultSeikaku[0].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[0].TegataNo		:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[0].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[0].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[0].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[0].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[0].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[0].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[0].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	支払債務型
	aDefaultSeikaku[1].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[1].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[1].TegataNo		:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[1].NoInput1		:=  2;	//	番号１入力区分			(貸借)
	aDefaultSeikaku[1].NoInput2		:=  2;	//	番号２入力区分			(貸借)
	aDefaultSeikaku[1].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[1].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[1].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[1].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[1].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	支払手形型
	aDefaultSeikaku[2].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[2].Tegata		:=	1;	//	手形番号入力区分		(正残)
	aDefaultSeikaku[2].TegataNo		:=  1;	//	手形管理No入力区分		(正残)
	aDefaultSeikaku[2].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[2].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[2].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[2].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[2].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[2].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[2].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	当座小切手型
	aDefaultSeikaku[3].Kijitsu		:=	0;	//	期日入力区分			(なし)
	aDefaultSeikaku[3].Tegata		:=	3;	//	手形番号入力区分		(負残)
	aDefaultSeikaku[3].TegataNo		:=  3;	//	手形管理No入力区分		(負残)
	aDefaultSeikaku[3].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[3].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[3].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[3].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[3].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[3].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[3].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	支払先日付小切手型
	aDefaultSeikaku[4].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[4].Tegata		:=	1;	//	手形番号入力区分		(正残)
	aDefaultSeikaku[4].TegataNo		:=  1;	//	手形管理No入力区分		(正残)
	aDefaultSeikaku[4].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[4].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[4].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[4].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[4].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[4].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[4].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	売掛金型
	aDefaultSeikaku[5].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[5].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[5].TegataNo		:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[5].NoInput1		:=  2;	//	番号１入力区分			(貸借)
	aDefaultSeikaku[5].NoInput2		:=  2;	//	番号２入力区分			(貸借)
	aDefaultSeikaku[5].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[5].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[5].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[5].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[5].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	受取手形型
	aDefaultSeikaku[6].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[6].Tegata		:=	1;	//	手形番号入力区分		(正残)
	aDefaultSeikaku[6].TegataNo		:=  1;	//	手形管理No入力区分		(正残)
	aDefaultSeikaku[6].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[6].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[6].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[6].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[6].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[6].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[6].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	割引手形型
	aDefaultSeikaku[7].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[7].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[7].TegataNo		:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[7].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[7].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[7].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[7].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[7].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[7].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[7].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	受取先日付小切手
	aDefaultSeikaku[8].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[8].Tegata		:=	1;	//	手形番号入力区分		(正残)
	aDefaultSeikaku[8].TegataNo		:=  1;	//	手形管理No入力区分		(正残)
	aDefaultSeikaku[8].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[8].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[8].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[8].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[8].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[8].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[8].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	期日付債権型
	aDefaultSeikaku[9].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[9].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[9].TegataNo		:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[9].NoInput1		:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[9].NoInput2		:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[9].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[9].H_Tegata		:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[9].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[9].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[9].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	期日付債務型
	aDefaultSeikaku[10].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[10].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[10].TegataNo	:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[10].NoInput1	:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[10].NoInput2	:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[10].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[10].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[10].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[10].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[10].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	期日付債権型２
	aDefaultSeikaku[11].Kijitsu		:=	2;	//	期日入力区分			(貸借)
	aDefaultSeikaku[11].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[11].TegataNo	:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[11].NoInput1	:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[11].NoInput2	:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[11].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[11].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[11].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[11].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[11].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	期日付債務型２
	aDefaultSeikaku[12].Kijitsu		:=	2;	//	期日入力区分			(貸借)
	aDefaultSeikaku[12].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[12].TegataNo	:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[12].NoInput1	:=  0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[12].NoInput2	:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[12].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[12].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[12].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[12].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[12].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	番号付債権型
	aDefaultSeikaku[13].Kijitsu		:=	0;	//	期日入力区分			(なし)
	aDefaultSeikaku[13].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[13].TegataNo	:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[13].NoInput1	:=  1;	//	番号１入力区分			(正残)
	aDefaultSeikaku[13].NoInput2	:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[13].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[13].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[13].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[13].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[13].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	番号付債務型
	aDefaultSeikaku[14].Kijitsu		:=	0;	//	期日入力区分			(なし)
	aDefaultSeikaku[14].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[14].TegataNo	:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[14].NoInput1	:=  1;	//	番号１入力区分			(正残)
	aDefaultSeikaku[14].NoInput2	:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[14].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[14].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[14].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[14].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[14].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	番号付債権型２
	aDefaultSeikaku[15].Kijitsu		:=	0;	//	期日入力区分			(なし)
	aDefaultSeikaku[15].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[15].TegataNo	:=  0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[15].NoInput1	:=	2;	//	番号１入力区分			(貸借)
	aDefaultSeikaku[15].NoInput2	:=  0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[15].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[15].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[15].H_TegataNo	:=  0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[15].H_NoInput1	:=  0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[15].H_NoInput2	:=  0;	//	番号２必須入力区分		(任意)
	//	番号付債務型２
	aDefaultSeikaku[16].Kijitsu		:=	0;	//	期日入力区分			(なし)
	aDefaultSeikaku[16].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[16].TegataNo	:=	0;	//	手形管理No入力区分		(なし)
	aDefaultSeikaku[16].NoInput1	:=	2;	//	番号１入力区分			(貸借)
	aDefaultSeikaku[16].NoInput2	:=	0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[16].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[16].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[16].H_TegataNo	:=	0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[16].H_NoInput1	:=	0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[16].H_NoInput2	:=	0;	//	番号２必須入力区分		(任意)
	//	期日指定振込
	aDefaultSeikaku[17].Kijitsu		:=	1;	//	期日入力区分			(正残)
	aDefaultSeikaku[17].Tegata		:=	0;	//	手形番号入力区分		(なし)
	aDefaultSeikaku[17].TegataNo	:=	1;	//	手形管理No入力区分		(正残)
	aDefaultSeikaku[17].NoInput1	:=	0;	//	番号１入力区分			(なし)
	aDefaultSeikaku[17].NoInput2	:=	0;	//	番号２入力区分			(なし)
	aDefaultSeikaku[17].H_Kijitsu	:=	0;	//	期日必須入力区分		(任意)
	aDefaultSeikaku[17].H_Tegata	:=	0;	//	手形番号必須入力区分	(任意)
	aDefaultSeikaku[17].H_TegataNo	:=	0;	//	手形管理No必須入力区分	(任意)
	aDefaultSeikaku[17].H_NoInput1	:=	0;	//	番号１必須入力区分		(任意)
	aDefaultSeikaku[17].H_NoInput2	:=	0;	//	番号２必須入力区分		(任意)
end;

//-----------------------------------------------------------------------------
// fnBmnUseCheck
//	< 実在が部門を採用時、合計の部門を採用有に設定する >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    : 2007/04/18 K.Katou(PRIME)
//				: ｸﾞﾙｰﾌﾟ会計を採用している場合、採用有りにしても採用無しにはしない
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnBmnUseCheck();
var
	DmqData		:	TMQuery;
	DmqUpDate	:	TMQuery;
	iSumNCode	:	Extended;
	iBmnKbn		:	Integer;
	bBmnFlag	:	Boolean;
//	bEndFlag	:	Boolean;				// <063> DEL
begin

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran ( dbCorp_Select );
    										// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADD
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);

	// 初期処理
//	iSumNCode	:=	0;						// <063> DEL
	bBmnFlag	:=	FALSE;

    // MQueryの構築
	DmqData	:=	TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );
    // MQueryの構築
	DmqUpDate	:=	TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqUpDate );

	with DmqData do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT                             '
            +   '    KT.SumNCode   as Sum           '   //	加算先外部ｺｰﾄﾞ
			+   '   ,KT.BasedNCode as Based         '	//	加算元実在科目ｺｰﾄﾞ
			+   '   ,MA.BmnUse     as Bmn           '	//	部門採用区分
    		+   'FROM KmkTree2 KT                   '	//	科目加算体系ﾏｽﾀ2
			+   'LEFT OUTER JOIN KmKMA MA ON        '
            +   '       (KT.BasedNCode = MA.NCode)  '
            +   '   AND (MA.MasterKbn  = 1)         '	//	ﾏｽﾀ区分(1:勘定科目)
            +   '   AND (MA.RDelKbn    = 0)         '	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            +   '   AND (MA.SumKbn     = 0)         '  	//	実在/合計区分(0:実在)
		    +   'WHERE  (KT.MasterKbn  = 1)         '	//	ﾏｽﾀ区分(1:勘定科目)
		    +   'ORDER BY KT.SumNCode,KT.BasedNCode ');

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( DmqData );
			MDataModule.Rollback (dbCorp_Select);		// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);	// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
			DmqData.Close();
			DmqData.Free();
			DmqUpDate.Close();
			DmqUpDate.Free();
       	    Exit;
		end;

		iSumNCode   :=  GetFld('Sum').AsFloat;

		while ( EOF <> TRUE ) do
		begin
			// 退避ｺｰﾄﾞが変わったら合計の部門を更新する

            // 退避ｺｰﾄﾞと違う時
			if ( iSumNCode <> GetFld('Sum').AsFloat ) then
			begin
				with DmqUpDate do
				begin
					Close();
					SQL.Clear();
					SQL.Add('SELECT BmnUse FROM KmkMA       '   // 部門採用区分
					    +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
					    +   '  AND  (SumKbn    = 1)         '	// 実在/合計区分(1:合計)
                        +   '  AND  (RDelKbn   = 0)         '	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
					    +   '  AND  (NCode     = :ExNCode)  ');	// 内部ｺｰﾄﾞ

					ParamByName('ExNCode').AsFloat  :=  iSumNCode;

					// ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp( DmqUpDate );
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
						DmqUpDate.Close();
						DmqUpDate.Free();
						DmqData.Close;
						DmqData.Free;
			       	    Exit;
					end;

					if ( EOF <> TRUE ) then
                        // 合計の部門採用区分
						iBmnKbn :=  GetFld('BmnUse').AsInteger
					else
						iBmnKbn	:=	0;

					// 合計の部門採用がなしで実在に部門採用ありがある時か
					// 合計の部門採用がありで実在に部門採用なしがある時更新する。
					if (( iBmnKbn = 0 ) and ( bBmnFlag = TRUE  )) or
                       (( iBmnKbn = 1 ) and ( bBmnFlag = FALSE )) then
					begin
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
						if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
						begin
							DmqUpDate.Close;
			        						// 親会社DBとMQueryの接続
							MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqUpDate);
						end;
// <063> ADD end

						Close();
						SQL.Clear();
						SQL.Add('UPDATE KmkMA SET               '
						    +   '   BmnUse = :BmnKbn            '   // 部門採用区分
						    +   '  ,UpdTantoNCode = :UpdTantoNCode '   //  更新担当者内部ｺｰﾄﾞ<080>
						    +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
						    +   '  AND  (SumKbn    = 1)         '	// 実在/合計区分(1:合計)
                            +   '  AND  (RDelKbn   = 0)         '	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
						    +   '  AND  (NCode     = :ExNCode)  ');	// 内部ｺｰﾄﾞ
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計を採用している場合
						if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) then
						begin
							SQL.Add('AND (BmnUse = 0) ');			// 部門採用なしのみ更新対象とする
						end;
// <063> ADD end

						ParamByName('ExNCode').AsFloat  :=  iSumNCode;


                        // TRUEの時は採用区分有にする
						if ( bBmnFlag ) then
							ParamByName('BmnKbn').AsInteger :=  1   // 部門採用区分(1:あり)
						else
							ParamByName('BmnKbn').AsInteger	:=  0;  // 部門採用区分(0:なし)
                        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

						// ｴﾗｰの判定
						if ( ExecSQL = FALSE ) then
						begin
							ErrorMessageDsp( DmqUpDate );
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
							MDataModule.Rollback ( dbCorp_Select );
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
							DmqUpDate.Close();
							DmqUpDate.Free();
							DmqData.Close();
							DmqData.Free();
							Exit;
						end;
					end;
				end;

				iSumNCode   :=	GetFld('Sum').AsFloat;
                bBmnFlag	:=	FALSE;
			end;

			// 実在で部門採用区分があり又は、共通部門の時
			if ( GetFld('Bmn').AsInteger = 1 ) or
               ( GetFld('Bmn').AsInteger = 2 ) then
				bBmnFlag    :=  TRUE;

            Next;
		end;


		// ﾚｺｰﾄﾞが終わった時
		if ( EOF       =  TRUE ) and
           ( iSumNCode <> 0    ) then
		begin
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
	            DmqUpDate.Close();
            								// 子に接続しなおし
				MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqUpDate );
			end;
// <063> ADD end

			with DmqUpDate do
			begin
				Close();
				SQL.Clear();
				SQL.Add('SELECT BmnUse FROM KmkMA       '   // 部門採用区分
				    +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
				    +   '  AND  (SumKbn    = 1)         '	// 実在/合計区分(1:合計)
                    +   '  AND  (RDelKbn   = 0)         '	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				    +   '  AND  (NCode     = :ExNCode)  ');	// 内部ｺｰﾄﾞ

				ParamByName('ExNCode').AsFloat  :=  iSumNCode;

				// ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp( DmqUpDate );
					MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					DmqUpDate.Close();
					DmqUpDate.Free();
					DmqData.Close();
					DmqData.Free();
		       	    Exit;
				end;

				if ( EOF <> TRUE ) then
                    // 合計の部門採用区分
					iBmnKbn	:=	GetFld('BmnUse').AsInteger
				else
					iBmnKbn :=	0;

				// 合計の部門採用がなしで実在に部門採用ありがある時か
				// 合計の部門採用がありで実在に部門採用なしがある時更新する。
				if (( iBmnKbn = 0 ) and ( bBmnFlag = TRUE  )) or
				   (( iBmnKbn = 1 ) and ( bBmnFlag = FALSE )) then
				begin
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
					if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
					begin
						DmqUpDate.Close;
		        							// また親会社DBとMQueryの接続
						MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, DmqUpDate);
					end;
// <063> ADD end

					Close();
					SQL.Clear();
					SQL.Add('UPDATE KmkMA SET               '
					    +   '   BmnUse = :BmnKbn            '   // 部門採用区分
					    +   '  ,UpdTantoNCode = :UpdTantoNCode '   //  更新担当者内部ｺｰﾄﾞ<080>
					    +   'WHERE  (MasterKbn = 1)         '	// ﾏｽﾀ区分(1:勘定科目)
					    +   '  AND  (SumKbn    = 1)         '	// 実在/合計区分(1:合計)
                        +   '  AND  (RDelKbn   = 0)         '	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
					    +   '  AND  (NCode     = :ExNCode)  ');	// 内部ｺｰﾄﾞ

// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計を採用している場合
					if (m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) then
					begin
						SQL.Add('AND (BmnUse = 0) ');			// 部門採用なしのみ更新対象とする
					end;
// <063> ADD end

					ParamByName('ExNCode').AsFloat  :=  iSumNCode;

                    // TRUEの時は採用区分を有にする
					if ( bBmnFlag ) then
                        // 部門採用区分(1:あり)
						ParamByName('BmnKbn').AsInteger :=  1
					else
                        // 部門採用区分(0:なし)
						ParamByName('BmnKbn').AsInteger	:=  0;
                    ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

					// ｴﾗｰの判定
					if ( ExecSQL = FALSE ) then
					begin
						ErrorMessageDsp( DmqUpDate );
                        // ﾛｰﾙﾊﾞｯｸ(破棄)
						MDataModule.Rollback ( dbCorp_Select );
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
						DmqUpDate.Close();
						DmqUpDate.Free();
						DmqData.Close();
						DmqData.Free();
						Exit;
					end;
				end;
			end;
		end;
	end;

// <063> ADD start
																// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
	begin
		// 同期ｽﾄｱﾄﾞ呼出
		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then		// KMKMA同期
		begin
			MDataModule.Rollback (dbCorp_Select);				// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);			// 親会社DBもﾛｰﾙﾊﾞｯｸ
			DmqUpDate.Close();
			DmqUpDate.Free();
			DmqData.Close();
			DmqData.Free();
   		    Exit;
		end;
	end;
// <063> ADD end

	DmqUpDate.Close();
	DmqUpDate.Free();
	DmqData.Close();
	DmqData.Free();

    // ｺﾐｯﾄ(反映)
	MDataModule.Commit (dbCorp_Select);
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ <063> ADD

end;

//-----------------------------------------------------------------------------
// fnSegUseCheck
//	< 実在がセグメントを採用時、合計のセグメントを採用有に設定する >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnSegUseCheck();
var
	Qe1		    :	TMQuery;
	Qe2		    :	TMQuery;
	iSumNCode	:	Extended;
	iSegKbn		:	array [1..10] of Integer;
	bSegFlag	:   array [1..10] of Boolean;
    bUpdFlag    :   Boolean;
    iLoop       :   Integer;
    nSQL        :   String;
    bUseFlag	:	array [1..10] of Boolean;	 		// 採用ありﾌﾗｸﾞ <063> ADD
begin
	bUpdFlag := False;									// <063> ADD

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);
	ExecParentDBTran(GRP_PARENTDB_BEGINTRAN);			// 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始 <063> ADd

	// 初期処理
//	iSumNCode   :=  0;									// <063> DEL
//    bUpdFlag    :=  FALSE;                              // <063> DEL
    for iLoop := 1 to 10 do
        bSegFlag[iLoop] :=  FALSE;

    // MQueryの構築
	Qe1	:= TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select,Qe1 );

    // MQueryの構築
	Qe2	:= TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select,Qe2 );

	with Qe1 do
	begin
		Close();
		SQL.Clear;
		SQL.Add('SELECT                             '
            +   '    KT.SumNCode   as Sum           '   // 加算先内部ｺｰﾄﾞ
			+   '   ,KT.BasedNCode as Based         '	// 加算元実在科目内部ｺｰﾄﾞ
			+   '   ,MA.SegUse1    as Seg1          '	// ｾｸﾞﾒﾝﾄ1採用区分
			+   '   ,MA.SegUse2    as Seg2          '	// ｾｸﾞﾒﾝﾄ2採用区分
			+   '   ,MA.SegUse3    as Seg3          '	// ｾｸﾞﾒﾝﾄ3採用区分
			+   '   ,MA.SegUse4    as Seg4          '	// ｾｸﾞﾒﾝﾄ4採用区分
			+   '   ,MA.SegUse5    as Seg5          '	// ｾｸﾞﾒﾝﾄ5採用区分
			+   '   ,MA.SegUse6    as Seg6          '	// ｾｸﾞﾒﾝﾄ6採用区分
			+   '   ,MA.SegUse7    as Seg7          '	// ｾｸﾞﾒﾝﾄ7採用区分
			+   '   ,MA.SegUse8    as Seg8          '	// ｾｸﾞﾒﾝﾄ8採用区分
			+   '   ,MA.SegUse9    as Seg9          '	// ｾｸﾞﾒﾝﾄ9採用区分
			+   '   ,MA.SegUse10   as Seg10         '	// ｾｸﾞﾒﾝﾄ10採用区分
    		+   'FROM KmkTree2 KT                   '	// 科目加算体系ﾏｽﾀ2
			+   'LEFT OUTER JOIN KmKMA MA ON        '
            +   '       (KT.BasedNCode = MA.NCode)  '
            +   '   AND (MA.MasterKbn  = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
            +   '   AND (MA.RDelKbn    = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
            +   '   AND (MA.SumKbn     = 0)         '   // 実在/合計区分(0:実在)
		    +   'WHERE  (KT.MasterKbn  = 1)         '
		    +   'ORDER BY KT.SumNCode,KT.BasedNCode ');

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( Qe1 );
			MDataModule.Rollback (dbCorp_Select);		// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);	// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
			Qe1.Close();
			Qe1.Free();
			Qe2.Close();
			Qe2.Free();
       	    Exit;
		end;

		iSumNCode   :=  GetFld('Sum').AsFloat;

		// 実在でｾｸﾞﾒﾝﾄ採用区分がありの時
        for iLoop := 1 to 10 do
        begin
    		if ( GetFld('Seg'+IntToStr(iLoop)).AsInteger = 1 ) then
    			bSegFlag[iLoop] :=  TRUE;
        end;

		while ( EOF <> TRUE ) do
		begin
			// 退避ｺｰﾄﾞが変わったら合計の部門を更新する

            // 退避ｺｰﾄﾞと違う時
			if ( iSumNCode <> GetFld('Sum').AsFloat ) then
			begin
				with Qe2 do
				begin
					Close();
					SQL.Clear();
					SQL.Add('SELECT                         '
                        +   '    SegUse1                    '   // ｾｸﾞﾒﾝﾄ1採用区分
                        +   '   ,SegUse2                    '   // ｾｸﾞﾒﾝﾄ2採用区分
                        +   '   ,SegUse3                    '   // ｾｸﾞﾒﾝﾄ3採用区分
                        +   '   ,SegUse4                    '   // ｾｸﾞﾒﾝﾄ4採用区分
                        +   '   ,SegUse5                    '   // ｾｸﾞﾒﾝﾄ5採用区分
                        +   '   ,SegUse6                    '   // ｾｸﾞﾒﾝﾄ6採用区分
                        +   '   ,SegUse7                    '   // ｾｸﾞﾒﾝﾄ7採用区分
                        +   '   ,SegUse8                    '   // ｾｸﾞﾒﾝﾄ8採用区分
                        +   '   ,SegUse9                    '   // ｾｸﾞﾒﾝﾄ9採用区分
                        +   '   ,SegUse10                   '   // ｾｸﾞﾒﾝﾄ10採用区分
					    +   'FROM KmkMA                     '   // 勘定科目基本ﾏｽﾀ
    					+   'WHERE  (MasterKbn = 1)         '	// ﾏｽﾀ区分		(1:勘定科目)
						+   '  AND  (SumKbn    = 1)         '	// 実在/合計区分(1:合計)
						+   '  AND  (RDelKbn   = 0)         '	// ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
						+   '  AND  (NCode     = :ExNCode)  ');	// 内部ｺｰﾄﾞ

					ParamByName('ExNCode').AsFloat  :=  iSumNCode;

					// ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp( Qe2 );
						MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
						Qe2.Close();
						Qe2.Free();
						Qe1.Close();
						Qe1.Free();
			       	    Exit;
					end;

                    // 合計のｾｸﾞﾒﾝﾄ1採用区分取得
					if ( EOF <> TRUE ) then
                    begin
                        for iLoop := 1 to 10 do
						    iSegKbn[iLoop]  :=  GetFld('SegUse'+IntToStr(iLoop)).AsInteger;
                    end
					else
                    begin
						for iLoop := 1 to 10 do
                            iSegKbn[iLoop]  :=  0;
                    end;

                    for iLoop := 1 to 10 do
                    begin
    					// 合計のｾｸﾞﾒﾝﾄ採用がなしで実在にｾｸﾞﾒﾝﾄ1採用ありがある時か
    					// 合計のｾｸﾞﾒﾝﾄ採用がありで実在にｾｸﾞﾒﾝﾄ1採用なしがある時更新する。
    					if ((iSegKbn[iLoop] = 0) and (bSegFlag[iLoop] = TRUE  )) or
                           ((iSegKbn[iLoop] = 1) and (bSegFlag[iLoop] = FALSE )) then
                        begin
// <063> ADD start          // ｸﾞﾙｰﾌﾟ会計を採用している場合、なしにはしない
                        	if ((m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) and
                            	(iSegKbn[iLoop] = 1) and (bSegFlag[iLoop] = FALSE )) then
                            begin
	                            bUpdFlag    :=  FALSE;
                            	Continue;
                            end;
// <063> ADD end
                            bUpdFlag    :=  TRUE;
                            Break;
                        end
                        else
                            bUpdFlag    :=  FALSE;
                    end;

                    if ( bUpdFlag ) then
					begin
// <063> ADD start
						for iLoop := 1 to 10 do
                        begin				// 採用ありにするｾｸﾞﾒﾝﾄにﾌﾗｸﾞをたてる
                            if (iSegKbn[iLoop] = 0) and (bSegFlag[iLoop] = TRUE) then
                            begin
	                        	bUseFlag[iLoop] := True;
                            end
                            else
                            begin
                            	bUseFlag[iLoop] := False;
                            end;
                        end;
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
						if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
						begin
							Qe2.Close;
			        						// 親会社DBとMQueryの接続
							MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, Qe2);
						end;
// <063> ADD end

// <063> MOD start
(*                        nSQL        :=  'UPDATE KmkMA SET   ';

                        for iLoop := 1 to 10 do
                        begin
                            if ( iLoop > 1 ) then
                                nSQL    :=  nSQL + ' ,';
                            // ｾｸﾞﾒﾝﾄ採用区分
                            nSQL    :=  nSQL    +   'SegUse' + intTostr(iLoop) + ' = :SegUse' + intTostr(iLoop) + ' ';
                        end;

                        nSQL    :=  nSQL
                                +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
                                +   '  AND  (SumKbn    = 1)         '   // 実在/合計区分(1:合計)
                                +   '  AND  (RDelKbn   = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
                                +   '  AND  (NCode     = :ExNCode)  ';  // 内部ｺｰﾄﾞ
                        Close();
						SQL.Clear();
       	                SQL.Add(nSQL);

						ParamByName('ExNCode').AsFloat  :=  iSumNCode;

                   	    for iLoop := 1 to 10 do
                       	begin
                            //	TRUEの時は採用区分ありにする
   	    					if ( bSegFlag[iLoop] ) then
       	                        // ｾｸﾞﾒﾝﾄ採用区分(1:あり)
       							ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  1
       						else
                   	            // ｾｸﾞﾒﾝﾄ1採用区分(0:なし)
       							ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  0;
                        end;
*)
											// ｸﾞﾙｰﾌﾟ会計を採用していない場合
						if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_NOTUSE) then
                        begin
	                        nSQL        :=  'UPDATE KmkMA SET   ';

    	                    for iLoop := 1 to 10 do
        	                begin
            	                if ( iLoop > 1 ) then
                	                nSQL    :=  nSQL + ' ,';
                    	        // ｾｸﾞﾒﾝﾄ採用区分
                        	    nSQL    :=  nSQL    +   'SegUse' + intTostr(iLoop) + ' = :SegUse' + intTostr(iLoop) + ' ';
	                        end;

    	                    nSQL    :=  nSQL
        	                        +   ', UpdTantoNCode = :UpdTantoNCode ' //  更新担当者内部ｺｰﾄﾞ<080>

        	                        +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
            	                    +   '  AND  (SumKbn    = 1)         '   // 実在/合計区分(1:合計)
                	                +   '  AND  (RDelKbn   = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
                    	            +   '  AND  (NCode     = :ExNCode)  ';  // 内部ｺｰﾄﾞ

	                        Close();
							SQL.Clear();
        	                SQL.Add(nSQL);

							ParamByName('ExNCode').AsFloat  :=  iSumNCode;
                            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

                    	    for iLoop := 1 to 10 do
                        	begin
	                            //	TRUEの時は採用区分ありにする
    	    					if ( bSegFlag[iLoop] ) then
        	                        // ｾｸﾞﾒﾝﾄ採用区分(1:あり)
        							ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  1
        						else
                    	            // ｾｸﾞﾒﾝﾄ1採用区分(0:なし)
        							ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  0;
	                        end;
                        end
                        else     			// ｸﾞﾙｰﾌﾟ会計を採用している場合
                        begin
                        	nSQL := '';
    	                    for iLoop := 1 to 10 do
        	                begin
                    	        // ｾｸﾞﾒﾝﾄ採用区分 採用ありにするｾｸﾞﾒﾝﾄだけ更新する
                                if bUseFlag[iLoop] then
                                begin
	            	                if ( nSQL <> '' ) then
                                    begin
    	            	                nSQL    :=  nSQL + ' ,';
                                    end;
	                        	    nSQL    :=  nSQL + 'SegUse' + intTostr(iLoop) + ' = :SegUse' + intTostr(iLoop) + ' ';
                                end;
	                        end;

    	                    nSQL    :=	'UPDATE KmkMA SET   '
                            		+	nSQL
        	                        +   ', UpdTantoNCode = :UpdTantoNCode ' //  更新担当者内部ｺｰﾄﾞ<080>
        	                        +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
            	                    +   '  AND  (SumKbn    = 1)         '   // 実在/合計区分(1:合計)
                	                +   '  AND  (RDelKbn   = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
                    	            +   '  AND  (NCode     = :ExNCode)  ';  // 内部ｺｰﾄﾞ
	                        Close();
							SQL.Clear();
        	                SQL.Add(nSQL);

							ParamByName('ExNCode').AsFloat  :=  iSumNCode;
                            ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

                	        for iLoop := 1 to 10 do
                    	    begin
                        	    // 採用区分ありにする
	        					if ( bUseFlag[iLoop] ) then
                                begin
    	                            // ｾｸﾞﾒﾝﾄ採用区分(1:あり)
        							ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  1;
                                end;
	                        end;
                        end;
// <063> MOD end
						// ｴﾗｰの判定
						if ( ExecSQL = FALSE ) then
						begin
							ErrorMessageDsp( Qe2 );
                            //	ﾛｰﾙﾊﾞｯｸ(破棄)
							MDataModule.Rollback ( dbCorp_Select );
							ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
							Qe2.Close();
							Qe2.Free();
							Qe1.Close();
							Qe1.Free();
							Exit;
						end;
					end;
				end;

				iSumNCode   :=  GetFld('Sum').AsFloat;
                for iLoop := 1 to 10 do
                    bSegFlag[iLoop] :=  FALSE;

			end;

            // 実在でｾｸﾞﾒﾝﾄ採用区分がありの時
            for iLoop := 1 to 10 do
            begin
			    if ( GetFld('Seg'+intTostr(iLoop)).AsInteger = 1 ) then
    				bSegFlag[iLoop] :=	TRUE;
            end;

            Next;
		end;

		// ﾚｺｰﾄﾞが終わった時
		if ( EOF        = TRUE ) and
           ( iSumNCode <> 0    ) then
		begin
// <063> ADD start
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
			if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
			begin
            	Qe2.Close();
            								// 子に接続しなおし
				MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe2 );
			end;
// <063> ADD end

			with Qe2 do
			begin
				Close();
				SQL.Clear();
				SQL.Add('SELECT                         '
				    +   '    SegUse1                    '	// ｾｸﾞﾒﾝﾄ1採用区分
                    +   '   ,SegUse2                    '	// ｾｸﾞﾒﾝﾄ2採用区分
                    +   '   ,SegUse3                    '	// ｾｸﾞﾒﾝﾄ3採用区分
                    +   '   ,SegUse4                    '	// ｾｸﾞﾒﾝﾄ4採用区分
                    +   '   ,SegUse5                    '	// ｾｸﾞﾒﾝﾄ5採用区分
                    +   '   ,SegUse6                    '	// ｾｸﾞﾒﾝﾄ6採用区分
                    +   '   ,SegUse7                    '	// ｾｸﾞﾒﾝﾄ7採用区分
                    +   '   ,SegUse8                    '	// ｾｸﾞﾒﾝﾄ8採用区分
                    +   '   ,SegUse9                    '	// ｾｸﾞﾒﾝﾄ9採用区分
                    +   '   ,SegUse10                   '   // ｾｸﾞﾒﾝﾄ10採用区分
				    +   'FROM KmkMA                     '	// 勘定科目基本ﾏｽﾀ
				    +   'WHERE  (MasterKbn = 1)         '	// ﾏｽﾀ区分		(1:勘定科目)
				    +   '  AND  (SumKbn    = 1)         '	// 実在/合計区分(1:合計)
				    +   '  AND  (RDelKbn   = 0)         '	// ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
				    +   '  AND  (NCode     = :ExNCode)  ');	// 外部ｺｰﾄﾞ

				ParamByName('ExNCode').AsFloat  :=  iSumNCode;

				// ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp( Qe2 );
					MDataModule.Rollback (dbCorp_Select);	// ﾛｰﾙﾊﾞｯｸ(破棄)	 <063> ADD
					ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
					Qe2.Close();
					Qe2.Free();
					Qe1.Close();
					Qe1.Free();
		       	    Exit;
				end;

				if ( EOF <> TRUE ) then
                begin
                    // 合計のｾｸﾞﾒﾝﾄ1採用区分取得
                    for iLoop := 1 to 10 do
    					iSegKbn[iLoop]  :=  GetFld('SegUse'+IntToStr(iLoop)).AsInteger;
                end
				else
                begin
                    for iLoop := 1 to 10 do
					    iSegKbn[iLoop]  :=  0;
                end;

                for iLoop := 1 to 10 do
                begin
                	// 合計のｾｸﾞﾒﾝﾄ採用がなしで実在にｾｸﾞﾒﾝﾄ1採用ありがある時か
                	// 合計のｾｸﾞﾒﾝﾄ採用がありで実在にｾｸﾞﾒﾝﾄ1採用なしがある時更新する。
                	if ((iSegKbn[iLoop] = 0) and (bSegFlag[iLoop] = TRUE  )) or
                       ((iSegKbn[iLoop] = 1) and (bSegFlag[iLoop] = FALSE )) then
                    begin
// <063> ADD start      // ｸﾞﾙｰﾌﾟ会計を採用している場合、なしにはしない
                       	if ((m_SyncMaster.m_flgGrpCorp <> GRP_SYNC_NOTUSE) and
                           	(iSegKbn[iLoop] = 1) and (bSegFlag[iLoop] = FALSE )) then
                        begin
                            bUpdFlag    :=  FALSE;
                          	Continue;
                        end;
// <063> ADD end
                        bUpdFlag    :=  TRUE;
                        Break;
                    end
                    else
                        bUpdFlag    :=  FALSE;
                end;

                if ( bUpdFlag ) then
				begin
// <063> ADD start
					for iLoop := 1 to 10 do
                    begin				// 採用ありにするｾｸﾞﾒﾝﾄにﾌﾗｸﾞをたてる
                        if (iSegKbn[iLoop] = 0) and (bSegFlag[iLoop] = TRUE) then
                        begin
                        	bUseFlag[iLoop] := True;
                        end
                        else
                        begin
                           	bUseFlag[iLoop] := False;
                        end;
                    end;
											// ｸﾞﾙｰﾌﾟ会計の子会社の場合
					if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
					begin
						Qe2.Close;
		        							// また親会社DBとMQueryの接続
						MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, Qe2);
					end;
// <063> ADD end
// <063> MOD start
(*
                    nSQL        :=  'UPDATE KmkMA SET   ';

                    for iLoop := 1 to 10 do
                    begin
                        if ( iLoop > 1 ) then
                            nSQL    :=  nSQL + ' ,';
                        // ｾｸﾞﾒﾝﾄ採用区分
                        nSQL    :=  nSQL    +   'SegUse' + intTostr(iLoop) + ' = :SegUse' + intTostr(iLoop) + ' ';
                    end;

                    nSQL    :=  nSQL
                            +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
                            +   '  AND  (SumKbn    = 1)         '   // 実在/合計区分(1:合計)
                            +   '  AND  (RDelKbn   = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
                            +   '  AND  (NCode     = :ExNCode)  ';  // 内部ｺｰﾄﾞ

                    Close();
					SQL.Clear();
                    SQL.Add(nSQL);

					ParamByName('ExNCode').AsFloat  :=  iSumNCode;

                    for iLoop := 1 to 10 do
                    begin
                        //	TRUEの時は採用区分ありにする
        				if ( bSegFlag[iLoop] ) then
                            // ｾｸﾞﾒﾝﾄ採用区分(1:あり)
        					ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  1
        				else
                            // ｾｸﾞﾒﾝﾄ1採用区分(0:なし)
        					ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  0;
                    end;
*)
											// ｸﾞﾙｰﾌﾟ会計を採用していない場合
					if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_NOTUSE) then
                    begin

	                    nSQL        :=  'UPDATE KmkMA SET   ';

    	                for iLoop := 1 to 10 do
        	            begin
            	            if ( iLoop > 1 ) then
                	            nSQL    :=  nSQL + ' ,';
                    	    // ｾｸﾞﾒﾝﾄ採用区分
                        	nSQL    :=  nSQL    +   'SegUse' + intTostr(iLoop) + ' = :SegUse' + intTostr(iLoop) + ' ';
	                    end;

    	                nSQL    :=  nSQL
        	                    +   ', UpdTantoNCode = :UpdTantoNCode ' //  更新担当者内部ｺｰﾄﾞ<080>
        	                    +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
            	                +   '  AND  (SumKbn    = 1)         '   // 実在/合計区分(1:合計)
                	            +   '  AND  (RDelKbn   = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
                    	        +   '  AND  (NCode     = :ExNCode)  ';  // 内部ｺｰﾄﾞ

	                    Close();
						SQL.Clear();
        	            SQL.Add(nSQL);

						ParamByName('ExNCode').AsFloat  :=  iSumNCode;
                        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

	                    for iLoop := 1 to 10 do
    	                begin
        	                //	TRUEの時は採用区分ありにする
        					if ( bSegFlag[iLoop] ) then
                	            // ｾｸﾞﾒﾝﾄ採用区分(1:あり)
        						ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  1
        					else
	                            // ｾｸﾞﾒﾝﾄ1採用区分(0:なし)
    	    					ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  0;
        	            end;
                    end
                    else		// ｸﾞﾙｰﾌﾟ会計を採用している場合
                    begin
                    	nSQL := '';
    	                for iLoop := 1 to 10 do
        	            begin
                    	    // ｾｸﾞﾒﾝﾄ採用区分 採用ありにするｾｸﾞﾒﾝﾄだけ更新する
                            if bUseFlag[iLoop] then
                            begin
	            	            if ( nSQL <> '' ) then
                                begin
	                	            nSQL    :=  nSQL + ' ,';
                                end;
	                       	    nSQL    :=  nSQL + 'SegUse' + intTostr(iLoop) + ' = :SegUse' + intTostr(iLoop) + ' ';
                            end;
	                    end;

    	                nSQL    :=	'UPDATE KmkMA SET   '
                        		+	nSQL
        	                    +   ', UpdTantoNCode = :UpdTantoNCode ' // 更新担当者内部ｺｰﾄﾞ<080>
        	                    +   'WHERE  (MasterKbn = 1)         '   // ﾏｽﾀ区分		(1:勘定科目)
            	                +   '  AND  (SumKbn    = 1)         '   // 実在/合計区分(1:合計)
                	            +   '  AND  (RDelKbn   = 0)         '   // ﾚｺｰﾄﾞ区分	(0:正規ﾚｺｰﾄﾞ)
                    	        +   '  AND  (NCode     = :ExNCode)  ';  // 内部ｺｰﾄﾞ
	                    Close();
						SQL.Clear();
        	            SQL.Add(nSQL);

						ParamByName('ExNCode').AsFloat  :=  iSumNCode;

                	    for iLoop := 1 to 10 do
                    	begin
                            // 採用区分ありにする
	        				if ( bUseFlag[iLoop] ) then
                            begin
    	                        // ｾｸﾞﾒﾝﾄ採用区分(1:あり)
        						ParamByName('SegUse'+IntToStr(iLoop)).AsInteger :=  1;
                            end;
	                    end;
                        ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

                    end;
// <063> MOD end
					// ｴﾗｰの判定
					if ( ExecSQL = FALSE ) then
					begin
						ErrorMessageDsp( Qe2 );
                        // ﾛｰﾙﾊﾞｯｸ(破棄)
						MDataModule.Rollback ( dbCorp_Select );
						ExecParentDBTran(GRP_PARENTDB_ROLLBACK);// 親会社DBもﾛｰﾙﾊﾞｯｸ <063> ADD
						Qe2.Close();
						Qe2.Free();
						Qe1.Close();
						Qe1.Free();
						Exit;
					end;
				end;
			end;
		end;
	end;

// <063> ADD start
																// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
	begin
		// 同期ｽﾄｱﾄﾞ呼出
		if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then		// KMKMA同期
		begin
			MDataModule.Rollback (dbCorp_Select);				// 子会社のﾛｰﾙﾊﾞｯｸ
			ExecParentDBTran(GRP_PARENTDB_ROLLBACK);			// 親会社DBもﾛｰﾙﾊﾞｯｸ
			Qe2.Close();
			Qe2.Free();
			Qe1.Close();
			Qe1.Free();
   		    Exit;
		end;
	end;
// <063> ADD end

	Qe2.Close();
	Qe2.Free();
	Qe1.Close();
	Qe1.Free();

    // ｺﾐｯﾄ(反映)
	MDataModule.Commit (dbCorp_Select);
	ExecParentDBTran(GRP_PARENTDB_COMMIT);	// 親会社DBもｺﾐｯﾄ <063> ADD

end;

//************************************************************************
//*		Component		:	ESName( TMTxtEdit )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESNameEnter(Sender: TObject);
begin
	ACControl := Screen.ActiveControl;
	if gbDelBtnFlag = FALSE then
		B_Delete.Enabled	:=	FALSE
	else
	//	HIS0004
	begin
		//	参照時		HIS0004
		if (giReferFlag = REFER) then
			exit;
//		B_Delete.Enabled	:=	TRUE;
// <SYNC> MOD start
//	    B_Delete.Enabled :=	m_cJNTArea.IsDelete;
	    B_Delete.Enabled :=	IsDeleteEx();
// <SYNC> MOD end
	end;

	//	F8正式名称コピー
	ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,19);
	StatusBar.SimpleText	:=	MjsMsgRec.sMsg;
end;

//************************************************************************
//*		Component		:	ESName( TMTxtEdit )
//*
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.ESNameExit(Sender: TObject);
begin
//HIS0041 F8正式名称と同じ処理な為、ERenのExitでも呼ぶようにした
	StatusBar.SimpleText :=	'';
	B_KmkCopy.Enabled := FALSE;	//HIS0048
end;

//************************************************************************
//*		Component		:	DXxxxGrid ( TdxDBGrid )
//*							Gridの共有ｲﾍﾞﾝﾄ
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGridChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
begin
//--- HIS0041 START -----
	//	ｶﾗﾑ連想時
	if (Column = 2) and (MTab_N.Items.Selected <> 1) then
	begin
		case MTab_N.Items.Selected of
			//実在
			0:	begin
					if (MemZitsu.State in [dsInsert]) then
					begin
						StatusBar.SimpleText := 'F8 科目コピー';
						B_KmkCopy.Enabled := TRUE;					//HIS0048
					end;
				end;
			//合計
			2:	begin
					if (MemGou.State in [dsInsert]) then
					begin
						StatusBar.SimpleText := 'F8 科目コピー';
						B_KmkCopy.Enabled := TRUE;					//HIS0048
					end;
				end;
		end;
    end
//--- HIS0041 END -------
	else if (Column = 4) then
	begin
		//	F8正式名称コピー
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,19);
		StatusBar.SimpleText	:=	MjsMsgRec.sMsg;
	end
	else
	begin
		StatusBar.SimpleText	:=	'';
		B_KmkCopy.Enabled := FALSE;					//HIS0048
    end;
end;

//**********************************************************************
//*		Proccess	:	損益科目の固定表示処理
//*		Name		:	H.Endo
//*		Date		:	2001/5/9
//*		Parameter	:
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.fnMakeDsp();		//	HIS0028
var
	DmqTree		:	TMQuery;
	iLoop		:	Integer;
	iFusenKbn	:	Integer;
	iWork		:	Integer;
	sCmnt		:	String;
//<053>

	iWork2		:	Integer;
	Dummy		:	Byte;						//	ﾀﾞﾐｰ
begin
	DmqTree := TMQuery.Create( Self );					        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );		// DBとMQueryの接続

	SetLength(m_aCmnt_Goukei,0);	// 配列をｸﾘｱ
	SetLength(m_aCmnt_Jitsu ,0);    // 配列をｸﾘｱ
//<053>
// <078> ↓↓↓
//	if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
	if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,Dummy)) then
// <078> ↑↑↑
		iWork2 := 10
	else
		iWork2 := 15;
	for iLoop := 0 to iWork2 do
///////	for iLoop := 0 to 15 do
	begin
		with DmqTree do
		begin
			DSourceGou.Enabled := FALSE;
			DSourceZitsu.Enabled := FALSE;
			Close();
			SQL.Clear;
			SQL.Add('SELECT                                 ');
			SQL.Add('    MA.GCode                           ');	// 外部ｺｰﾄﾞ
			SQL.Add('   ,MA.Renso                           ');	// 連想ｼﾝﾎﾞﾙ
			SQL.Add('   ,MA.LongName                        ');	// 正式名称
			SQL.Add('   ,MA.SimpleName                      ');	// 簡略名称
			SQL.Add('   ,MA.CharCode                        ');	// 性格ｺｰﾄﾞ
			SQL.Add('   ,MA.AnalyzeCode                     ');	// 分析ｺｰﾄﾞ
			SQL.Add('   ,MB.DecoKbn                         ');	// 装飾区分
            SQL.Add('   ,MA.NCode                           '); // 内部ｺｰﾄﾞ
            SQL.Add('   ,MA.CNCode                          '); // 科目別補助内部ｺｰﾄﾞ
			SQL.Add('FROM KmkMA MA                          '); // 勘定科目基本ﾏｽﾀ
			SQL.Add('LEFT OUTER JOIN KmKMB MB ON            '); // 勘定科目詳細情報
			SQL.Add('   (     MA.MasterKbn = MB.MasterKbn   ');
            SQL.Add('     AND MA.NCode     = MB.NCode )     ');
			SQL.Add('WHERE MA.MasterKbn = 1                 '); // ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND MA.RDelKbn   = 0                 ');	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            SQL.Add('  AND MA.NCode     = :Code             ');	// 内部ｺｰﾄﾞ
            SQL.Add('  AND MA.CNCode    = 0                 ');	// 細目ｺｰﾄﾞ(0)

			ParamByName('Code').AsFloat := SonekiArrayL1[iLoop].ConstNCode;

			//	ｴﾗｰの判定
			if Open = FALSE then
			begin
				ErrorMessageDsp(DmqTree);
				DmqTree.Close;
				DmqTree.Free;
        	    Exit;
			end;

			while EOF <> TRUE do
			begin
				if (SonekiArrayL1[iLoop].SumKbn = 1) then	//	合計時
				begin
					gDragGouFlag := TRUE;	// HIS0054
					MemGou.Append;
                    MemGou.FieldByName('NCode')       .AsFloat      :=	GetFld('NCode')     .AsFloat;		    // 内部ｺｰﾄﾞ
                    MemGou.FieldByName('CNCode')      .AsFloat      :=	GetFld('CNCode')    .AsFloat;		    // 科目別補助内部ｺｰﾄﾞ
					MemGou.FieldByName('GCode')       .AsInteger    :=	GetFld('GCode')     .AsInteger;		    // 外部ｺｰﾄﾞ
					MemGou.FieldByName('GRen')        .AsString	    :=	GetFld('Renso')     .AsString;		    // 連想ｼﾝﾎﾞﾙ
// <049>↓
//					MemGou.FieldByName('GLongName')   .AsString	    :=	GetFld('LongName')  .AsString;	        // 正式名称
                                                                                                                // 正式名称
					MemGou.FieldByName('GLongName')   .AsString	    :=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
					MemGou.FieldByName('GSName')      .AsString	    :=	GetFld('SimpleName').AsString;	        // 簡略名称
					MemGou.FieldByName('SousyokuData').AsInteger    :=	GetFld('DecoKbn')   .AsInteger;	        // 装飾区分
					iFusenKbn	                                    :=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分のCheck
					SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei) + 1);
					m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  GetFld('NCode').AsFloat;
                    m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  GetFld('CNCode').AsFloat;
					m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  sCmnt;
					FusenDsp(iFusenKbn,GOUKEI);									//	付箋表示処理
					MemGou.Post;
					gDragGouFlag := FALSE;	//HIS0054
					NEXT;
				end
				else begin
					gDragJitsuFlag := TRUE;	//HIS0054
					MemZitsu.Append;
                    MemZitsu.FieldByName('NCode')      .AsFloat     :=	GetFld('NCode')     .AsFloat;		// 内部ｺｰﾄﾞ
                    MemZitsu.FieldByName('CNCode')     .AsFloat     :=	GetFld('CNCode')    .AsFloat;		// 科目別補助内部ｺｰﾄﾞ
					MemZitsu.FieldByName('Code')       .AsInteger   :=	GetFld('GCode')     .AsInteger;		// 外部ｺｰﾄﾞ
					MemZitsu.FieldByName('Ren')        .AsString    :=	GetFld('Renso')     .AsString;		// 連想ｼﾝﾎﾞﾙ
// <049>↓
//					MemZitsu.FieldByName('LongName')   .AsString    :=	GetFld('LongName')  .AsString;	    // 正式名称
                                                                                                            // 正式名称
					MemZitsu.FieldByName('LongName')   .AsString    :=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
					MemZitsu.FieldByName('SName')      .AsString    :=	GetFld('SimpleName').AsString;	    // 簡略名称
					MemZitsu.FieldByName('SeikakuData').AsInteger   :=	GetFld('CharCode')  .AsInteger;	    // 性格ｺｰﾄﾞ
					MemZitsu.FieldByName('BunsekiNO')  .AsInteger   :=	GetFld('AnalyzeCode').AsInteger;    // 分析ｺｰﾄﾞ
					MemZitsu.FieldByName('Bunseki')    .AsString    :=	GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iWork);
					iFusenKbn	                                    :=	FusenCheck(1,(GetFld('NCode').AsFloat),0,sCmnt);	//	付箋区分Check
					SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu) + 1);
					m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  GetFld('NCode').AsFloat;
                    m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  GetFld('CNCode').AsFloat;
					m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  sCmnt;
					FusenDsp(iFusenKbn,ZITSUZAI);								//	付箋表示処理
					MemZitsu.Post;
					gDragJitsuFlag := FALSE;	//HIS0054
					NEXT;
				end;
			end;

			DSourceGou  .Enabled := TRUE;
			DSourceZitsu.Enabled := TRUE;

			MemGou  .First;
			MemZitsu.First;
		end;
	end;

	DmqTree.Close;
	DmqTree.Free;

end;

//************************************************************************
//*		Component		:	DZitsuGrid ( TdxDBGrid )
//*							ｷｰが押された時
//*		Event			:	OnKeyPress
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridKeyPress(Sender: TObject; var Key: Char);
begin
	if (DZitsuGrid.FocusedColumn = 1) then
	begin
		if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
		begin                          // #8=BackSpace   #27=Esc  #9=Tab
			Beep ();
			Abort;
		end;
    end;
end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*							ｷｰが押された時
//*		Event			:	OnKeyPress
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridKeyPress(Sender: TObject; var Key: Char);
begin
	if (DSaimokuGrid.FocusedColumn = 1) then
	begin
        if ( wkKmk.SaimokukZoku <> 2 ) then
        begin
    		if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
    		begin                          // #8=BackSpace   #27=Esc  #9=Tab
    			Beep ();
    			Abort;
    		end;
        end;

        // 有効文字Check<!!!>
    end;
end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*							ｷｰが押された時
//*		Event			:	OnKeyPress
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridKeyPress(Sender: TObject; var Key: Char);
begin
	if (DGoukeiGrid.FocusedColumn = 1) then
	begin
		if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
		begin                          // #8=BackSpace   #27=Esc  #9=Tab
			Beep ();
			Abort;
		end;
    end;
end;

//-----------------------------------------------------------------------------
// GetNameSKmkMA()
//	< 管理科目基本ﾏｽﾀから名称を取得 >
//      PARAM   : MasCode		:	ﾏｽﾀ区分、要約ｺｰﾄﾞ、固定費ｺｰﾄﾞ、変動費ｺｰﾄﾞ
//				  Code		    :	外部ｺｰﾄﾞ
//				  SimpleName	:	簡略名称
//				  DC			:	正残区分
//      RETURN  : ﾚｺｰﾄﾞあり(TRUE)/なし(FALSE)
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.GetNameSKmkMA(MasCode: Integer; var Code: Integer;
                                var SimpleName: String; var DC: Integer): Boolean;
var
	DmqData :	TMQuery;
	iMasKbn :   Integer;
begin

	Result	    :=  FALSE;
	iMasKbn     :=  0;
	Code	    :=  0;
	DC		    :=  0;
	SimpleName  :=  '';

    // ﾏｽﾀ区分を取得
	iMasKbn := Trunc(MasCode / 100);

	if ( iMasKbn = 0 ) then   Exit;

    // 外部ｺｰﾄﾞ取得
	Code := MasCode - (iMasKbn * 100);

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	// 管理科目基本ﾏｽﾀ(SKmkMA)から名称を取得する
	with DmqData do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT SimpleName ,DCKbn FROM SKmkMA   '
            +   'WHERE  (MasterKbn = :MasKbn)           '
            +   '  AND  (GCode     = :Code)             ');

		ParamByName('MasKbn')   .AsInteger  :=  iMasKbn;
		ParamByName('Code')     .AsInteger	:=  Code;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( DmqData );
			DmqData.Close();
			DmqData.Free();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			SimpleName  :=  GetFld('SimpleName').AsString;	// 簡略名称
			DC		    :=  GetFld('DCKbn')     .AsInteger; // 正残区分
			Result	    :=  TRUE;
        end
		else
		begin
			Name        :=	'';
			Result      :=  FALSE;
		end;
	end;

	DmqData.Close();
	DmqData.Free();

end;

//**********************************************************************
//*		Proccess	:	区分情報(電子帳簿)から電子帳簿採用区分をチェック
//*		Name		:	H.Endo
//*		Date		:	2001/06/06
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.GetKbnInfo();
var
	DmqData		:	TMQuery;
begin
	m_Electronic := FALSE;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//	区分情報(電子帳簿)から電子帳簿採用区分をチェック
	with DmqData do
	begin
		Close();
		SQL.Clear;
		SQL.ADD('SELECT '			);
		SQL.ADD(	'GnPuKbn1 '		);	//	電子帳簿採用区分
		SQL.ADD('FROM '		  		);
		SQL.ADD(	'KbnInfo '		);	//	区分情報(電子帳簿)
		SQL.Add('WHERE '	  		);
		SQL.ADD(	'RecKbn = 11 '	);	//	ﾚｺｰﾄﾞ区分(11:電子帳簿)
		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if EOF <> TRUE then
		begin
            if (GetFld('GnPuKbn1').AsInteger = 1) then	//	採用ありの時
				m_Electronic := TRUE;
		end;
	end;

	DmqData.Close;
	DmqData.Free;
end;

//-----------------------------------------------------------------------------
// fnEndCheck()
//	< 終了時のﾁｪｯｸ >
//      PARAM   :
//      RETURN  : TRUE:正常 FALSE:異常
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnEndCheck(): Boolean;
var
	iWork		:	Integer;
	iCnt		:	Integer;
	bBankFlag	:	Boolean;
	bHantei		:	Boolean;
	sWork		:	String;
	sWork2		:	String;
	sFormat		:	String;
begin

	Result  :=  FALSE;

    // -------------------------------
    //          分析ｺｰﾄﾞ
    // -------------------------------
	GetSKmkMA(BUNSEKI,Trunc(EBunCode.Value),iWork);
    // 入力されたｺｰﾄﾞが存在しない時
	if ( iWork = 9999 ) then  Exit;

    // -------------------------------
    //          性格ｺｰﾄﾞ
    // -------------------------------
	if ( GetList(ESeikakuCode,LSeikakuName) = FALSE ) then Exit;

    // -------------------------------
    //          銀行ｺｰﾄﾞ(文字)
    // -------------------------------
	if ( EBankCodeT.Text <> '' ) then
	begin
		GetKmkMABank(EBankCodeT.Text,bBankFlag);
		if ( bBankFlag = FALSE ) then Exit;
	end;
    // -------------------------------
    //          銀行ｺｰﾄﾞ(数値)
    // -------------------------------
	if ( EBankCodeN.InputFlag = FALSE ) then
	begin
		sWork	:=  IntToStr(Trunc(EBankCodeN.Value));
		iCnt	:=	16 - Length(sWork);
		sWork2	:=	StringOfChar('0', iCnt);
		sFormat :=	sWork2	+	sWork;
		GetKmkMABank(sFormat,bBankFlag);
		if ( bBankFlag = FALSE ) then Exit;
	end;

    // -------------------------------
    //          開始日付
    // -------------------------------
	if ( EStartDate.Value > 0 ) then
	begin
		try
//			bHantei := MjsDateCtrl.MjsIntYMDChk(EStartDate.Value);		// <#NGEN> 
			bHantei := MjsDateCtrl.MjsIntYMDChk(EStartDate.AsIntYM);	// <#NGEN> 
			if ( bHantei = FALSE ) then
			begin
				// 日付が間違っています
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
    			MjsMessageBoxEx(AOwner, // <005>
                                '日付' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
				EStartDate.SetFocus;
			end;
		except
			// 日付が間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            '日付' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			EStartDate.SetFocus;
		end;
	end;

    // -------------------------------
    //          終了日付
    // -------------------------------
	if ( EEndDate.Value > 0 ) then
	begin
		try
//			bHantei := MjsDateCtrl.MjsIntYMDChk(EEndDate.Value);		// <#NGEN> 
			bHantei := MjsDateCtrl.MjsIntYMDChk(EEndDate.AsIntYM);		// <#NGEN> 
			if ( bHantei = FALSE ) then
			begin
				// 日付が間違っています
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
    			MjsMessageBoxEx(AOwner, // <005>
                                '日付' + MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
				EEndDate.SetFocus;
			end;
		except
			// 日付が間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            '日付' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			EEndDate.SetFocus;
		end;
	end;

    // 開始・終了の日付のﾁｪｯｸ
	if ( EStartDate.Value > 0 ) and
       ( EEndDate.Value   > 0 ) then
	begin
//		if ( EStartDate.Value ) > ( EEndDate.Value ) then		//<#NGEN>
		if ( EStartDate.ASIntYM ) > ( EEndDate.ASIntYM ) then	//<#NGEN>
		begin
			// 日付が間違っています
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,15);
   			MjsMessageBoxEx(AOwner, // <005>
                            '日付' + MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			EEndDate.SetFocus;
		end;
    end;

    // -------------------------------
    //          正残区分
    // -------------------------------
	if ( GetList(ESeiZanCode,LSeiZanName) = FALSE ) then Exit;

    // -------------------------------
    //          期首残区分内容
    // -------------------------------
	if ( GetList(EKisyuCode,LKisyuName) = FALSE ) then Exit;

    // -------------------------------
    //      表示／印刷不可区分内容
    // -------------------------------
	if ( GetList(EDPCode,LDPName) = FALSE ) then Exit;

    // -------------------------------
    //       比率科目区分内容
    // -------------------------------
	if ( GetList(EHiritsuCode,LHiritsuName) = FALSE ) then Exit;

    // -------------------------------
    //      借方資金繰ｺｰﾄﾞ内容
    // -------------------------------
	if ( EKariCode.Value <> 0 ) then
	begin
		GetSKmkMA(SHIKINGURI,Trunc(EKariCode.Value),iWork);
		if ( iWork = 9999 ) then Exit;
	end;

    // -------------------------------
    //      貸方資金繰ｺｰﾄﾞ内容
    // -------------------------------
	if ( EKashiCode.Value <> 0 ) then
	begin
		GetSKmkMA(SHIKINGURI,Trunc(EKashiCode.Value),iWork);
		if ( iWork = 9999 ) then Exit;
	end;

    // -------------------------------
    //          変動費比率
    // -------------------------------
	if ( EHendouhi.Value <> 0 ) then
	begin
		if ( EHendouhi.Value > 100.00 ) then
			EXIT;
	end;

    // -------------------------------
    //      ﾏｲﾅｽ印刷区分内容
    // -------------------------------
	if ( GetList(EMainasuCode,LMainasuName) = FALSE ) then Exit;

    // -------------------------------
    //      差額印刷区分内容
    // -------------------------------
	if ( GetList(ESagakuCode,LSagakuName) = FALSE ) then Exit;

    // -------------------------------
    //      利益印刷区分内容
    // -------------------------------
	if ( GetList(ERiekiCode,LRiekiName) = FALSE ) then Exit;

    // -------------------------------
    //  元帳摘要欄起票者印字区分内容
    // -------------------------------
	if ( GetList(EKihyousya,LKihyousyaName) = FALSE ) then Exit;

    // -------------------------------
    //          装飾区分内容
    // -------------------------------
	if ( GetList(ESousyokuCode,LSousyokuName) = FALSE ) then Exit;

    // -------------------------------
    //      仕訳入力区分内容
    // -------------------------------
	if ( GetList(EShiwakeCode,LShiwakeName) = FALSE ) then Exit;

    // -------------------------------
    //      期日入力区分内容
    // -------------------------------
	if ( GetList(EKijitsuCode,LKijitsuName) = FALSE ) then Exit;

    // -------------------------------
    //      固定摘要必須入力内容
    // -------------------------------
	if ( GetList(ETekiCode,LTekiName) = FALSE ) then Exit;

    // -------------------------------
    //          摘要分類ｺｰﾄﾞ
    // -------------------------------
	if ( ETekiyouBunrui.InputFlag = FALSE ) then
	begin
		sWork   :=  'Null';
		sWork	:=	GetTekiMA(Trunc(ETekiyouBunrui.Value));
		if ( sWork = 'Null' ) then Exit;
	end;

    // -------------------------------
    //  資金繰ｺｰﾄﾞ優先区分内容
    // -------------------------------
	if ( GetList(EShikuriCode,LShikuriName) = FALSE ) then Exit;

    // -------------------------------
    //      履歴管理区分内容
    // -------------------------------
	if ( GetList(ERirekiKbnCode,LRirekiKbnName) = FALSE ) then Exit;

	Result := TRUE;

end;

//**********************************************************************
//*		Proccess	:	変更前の情報ｾｯﾄ/変更Check
//*		Name		:	H.Endo
//*		Date		:	2001/06/25
//*		Parameter	:	Choice		:	情報ｾｯﾄ(INFOSET)/ﾁｪｯｸ(CHECK)
//*						Select		:	合計(GOUKEI)/実在(ZITSUZAI)/細目(SAIMOKU)
//*		Return		:	正常(TRUE)/異常(FALSE)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.fnSyousaiSetCheck(Choice,Select: Byte): Boolean;			//	HIS0031
var
	iPos	:	Integer;
	KmkCode	:	Integer;
begin

	Result := TRUE;
	if (Choice = INFOSET) then
	begin
		m_KmkInfo.Code			:= ECode.Text;			        //	ｺｰﾄﾞ
		m_KmkInfo.Ren			:= ERen.Text;					//	連想
		m_KmkInfo.Long			:= ELName.Text;					//	正式名称
		m_KmkInfo.Simple		:= ESName.Text;					//	簡略名称
		m_KmkInfo.Bunseki		:= Trunc(EBunCode.Value);		//	分析ｺｰﾄﾞ
		m_KmkInfo.Seikaku		:= Trunc(ESeikakuCode.Value);	//	性格ｺｰﾄﾞ
		m_KmkInfo.BankCode_N	:= Trunc(EBankCodeN.Value);		//	銀行ｺｰﾄﾞ(数値)
		m_KmkInfo.BankCode_InpF := EBankCodeN.InputFlag;		//	銀行InputFlag
		m_KmkInfo.BankCode_T	:= EBankCodeT.Text;				//	銀行ｺｰﾄﾞ(文字)
		m_KmkInfo.StartDate		:= EStartDate.Text;				//	適用開始日
		m_KmkInfo.EndDate		:= EEndDate.Text;				//	適用終了日
		m_KmkInfo.SeiZan		:= Trunc(ESeiZanCode.Value);	//	正残区分
		m_KmkInfo.KisyuZan		:= Trunc(EKisyuCode.Value);		//	期首残区分
		m_KmkInfo.DspPri		:= Trunc(EDPCode.Value);		//	表示/印刷区分
		m_KmkInfo.HiritsuKmk	:= Trunc(EHiritsuCode.Value);	//	比率科目
		m_KmkInfo.KariKuri		:= Trunc(EKariCode.Value);		//	借方資金繰
		m_KmkInfo.KashiKuri		:= Trunc(EKashiCode.Value);		//	貸方資金繰
		m_KmkInfo.Hendouhi		:= Trunc(EHendouhi.Value);		//	変動費比率
		m_KmkInfo.MainasuPri	:= Trunc(EMainasuCode.Value);	//	ﾏｲﾅｽ印刷
		m_KmkInfo.SagakuPri		:= Trunc(ESagakuCode.Value);	//	差額印刷
		m_KmkInfo.RiekiPri		:= Trunc(ERiekiCode.Value);		//	利益印刷
		m_KmkInfo.MTekiPrn		:= Trunc(EKihyousya.Value);		//	元帳起票者印字
		m_KmkInfo.MainasuName	:= EMainaName.Text;				//	ﾏｲﾅｽ変換科目
		m_KmkInfo.Sousyoku		:= Trunc(ESousyokuCode.Value);	//	装飾
		m_KmkInfo.Shiwake		:= Trunc(EShiwakeCode.Value);	//	仕訳入力区分
		m_KmkInfo.KijitsuInp	:= Trunc(EKijitsuCode.Value);	//	期日入力区分
		m_KmkInfo.KoteiTeki		:= Trunc(ETekiCode.Value);		//	固定適用必須入力
		m_KmkInfo.TekiBunCode	:= Trunc(ETekiyouBunrui.Value);	//	摘要分類ｺｰﾄﾞ
		m_KmkInfo.TekiBunInpF	:= ETekiyouBunrui.InputFlag;	//	摘要分類InputFlag
		m_KmkInfo.ShikuriYu		:= Trunc(EShikuriCode.Value);	//	資金繰ｺｰﾄﾞ優先区分
		m_KmkInfo.Rireki		:= Trunc(ERirekiKbnCode.Value);	//	履歴管理
	end
	else if (Choice = CHECK) then
	begin
		//	ｺｰﾄﾞに何も入力されていない時
		case MTab_Select.Items.Selected of
			0,2://	実在、合計
			begin
				if (Trim(ECode.Text) = '') then
					exit;
			end;
			1:	//	科目別補助
			begin
				if (Trim(ECode.Text) = '') then
				begin
					//科目ｺｰﾄﾞを取得
					iPos := MJSHanPos(' ', MTab_Select.BorderCaption);	//	先頭からSPACEまでの桁数COUNT
					if (iPos <> 0) then
					begin
						KmkCode	:= StrToInt(MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1));	//	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
						if Syokuchi(KmkCode,FALSE) = FALSE then
							exit;
					end;
				end;
			end;
	    end;

		if (ECode.Text <> m_KmkInfo.Code) then	//	ｺｰﾄﾞ
			Result := FALSE;
		if (ERen.Text <> m_KmkInfo.Ren) then			//	連想
			Result := FALSE;
		if (ELName.Text <> m_KmkInfo.Long) then			//	正式名称
			Result := FALSE;
		if (ESName.Text <> m_KmkInfo.Simple) then		//	簡略名称
			Result := FALSE;

		case Select of
			GOUKEI:
            begin
				if (Trunc(ESeiZanCode.Value) <> m_KmkInfo.SeiZan) then		//	正残区分
					Result := FALSE;
				if (Trunc(EDPCode.Value) <> m_KmkInfo.DspPri) then			//	表示/印刷区分
					Result := FALSE;
				if (Trunc(EMainasuCode.Value) <> m_KmkInfo.MainasuPri) then	//	ﾏｲﾅｽ印刷
					Result := FALSE;
				if (Trunc(ESagakuCode.Value) <> m_KmkInfo.SagakuPri) then	//	差額印刷
					Result := FALSE;
				if (Trunc(ERiekiCode.Value) <> m_KmkInfo.RiekiPri) then		//	利益印刷
					Result := FALSE;
				if (EMainaName.Text <> m_KmkInfo.MainasuName) then			//	ﾏｲﾅｽ変換科目
					Result := FALSE;
				if (Trunc(ESousyokuCode.Value) <> m_KmkInfo.Sousyoku) then	//	装飾
					Result := FALSE;
			end;
			ZITSUZAI:
			begin
				if (Trunc(EBunCode.Value) <> m_KmkInfo.Bunseki) then		//	分析ｺｰﾄﾞ
					Result := FALSE;
				if (Trunc(ESeikakuCode.Value) <> m_KmkInfo.Seikaku) then	//	性格ｺｰﾄﾞ
					Result := FALSE;
				if (wkBank.CodeZoku <> 2) then	//	数値
				begin
					if (Trunc(EBankCodeN.Value) <> m_KmkInfo.BankCode_N)				//	銀行ｺｰﾄﾞ(数値)
							and (EBankCodeN.InputFlag <> m_KmkInfo.BankCode_InpF) then	//	銀行InputFlag
						Result := FALSE;
				end
				else
				begin
					if (EBankCodeT.Text <> m_KmkInfo.BankCode_T) then		//	銀行ｺｰﾄﾞ(文字)
						Result := FALSE;
				end;
				if (EStartDate.Text <> m_KmkInfo.StartDate) then			//	適用開始日
					Result := FALSE;
				if (EEndDate.Text <> m_KmkInfo.EndDate) then				//	適用終了日
					Result := FALSE;
				if (Trunc(ESeiZanCode.Value) <> m_KmkInfo.SeiZan) then		//	正残区分
					Result := FALSE;
				if (Trunc(EKisyuCode.Value) <> m_KmkInfo.KisyuZan) then		//	期首残区分
					Result := FALSE;
				if (Trunc(EDPCode.Value) <> m_KmkInfo.DspPri) then			//	表示/印刷区分
					Result := FALSE;
				if (Trunc(EHiritsuCode.Value) <> m_KmkInfo.HiritsuKmk) then	//	比率科目
					Result := FALSE;
				if (Trunc(EKariCode.Value) <> m_KmkInfo.KariKuri) then		//	借方資金繰
					Result := FALSE;
				if (Trunc(EKashiCode.Value) <> m_KmkInfo.KashiKuri) then	//	貸方資金繰
					Result := FALSE;
				if (Trunc(EHendouhi.Value) <> m_KmkInfo.Hendouhi) then		//	変動費比率
					Result := FALSE;
				if (Trunc(EMainasuCode.Value) <> m_KmkInfo.MainasuPri) then	//	ﾏｲﾅｽ印刷
					Result := FALSE;
				if (Trunc(ESagakuCode.Value) <> m_KmkInfo.SagakuPri) then	//	差額印刷
					Result := FALSE;
				if (Trunc(ERiekiCode.Value) <> m_KmkInfo.RiekiPri) then		//	利益印刷
					Result := FALSE;
				if (Trunc(EKihyousya.Value) <> m_KmkInfo.MTekiPrn) then		//	元帳起票者印字
					Result := FALSE;
				if (EMainaName.Text <> m_KmkInfo.MainasuName) then			//	ﾏｲﾅｽ変換科目
					Result := FALSE;
				if (Trunc(ESousyokuCode.Value) <> m_KmkInfo.Sousyoku) then	//	装飾
					Result := FALSE;
				if (Trunc(EShiwakeCode.Value) <> m_KmkInfo.Shiwake) then	//	仕訳入力区分
					Result := FALSE;
				if (Trunc(EKijitsuCode.Value) <> m_KmkInfo.KijitsuInp) then	//	期日入力区分
					Result := FALSE;
				if (Trunc(ETekiCode.Value) <> m_KmkInfo.KoteiTeki) then		//	固定適用必須入力
					Result := FALSE;
				if (Trunc(ETekiyouBunrui.Value) <> m_KmkInfo.TekiBunCode) and	//	摘要分類ｺｰﾄﾞ
						(ETekiyouBunrui.InputFlag <> m_KmkInfo.TekiBunInpF) then //	摘要分類InputFlag
					Result := FALSE;
				if (Trunc(EShikuriCode.Value) <> m_KmkInfo.ShikuriYu) then	//	資金繰ｺｰﾄﾞ優先区分
					Result := FALSE;
				if (Trunc(ERirekiKbnCode.Value) <> m_KmkInfo.Rireki) then	//	履歴管理
					Result := FALSE;
			end;
			SAIMOKU:
			begin
				if (wkBank.CodeZoku <> 2) then	//	数値
				begin
					if (Trunc(EBankCodeN.Value) <> m_KmkInfo.BankCode_N)				//	銀行ｺｰﾄﾞ(数値)
							and (EBankCodeN.InputFlag <> m_KmkInfo.BankCode_InpF) then	//	銀行InputFlag
						Result := FALSE;
				end
				else
				begin
					if (EBankCodeT.Text <> m_KmkInfo.BankCode_T) then		//	銀行ｺｰﾄﾞ(文字)
						Result := FALSE;
				end;
				if (EStartDate.Text <> m_KmkInfo.StartDate) then			//	適用開始日
					Result := FALSE;
				if (EEndDate.Text <> m_KmkInfo.EndDate) then				//	適用終了日
					Result := FALSE;
				if (Trunc(EKariCode.Value) <> m_KmkInfo.KariKuri) then		//	借方資金繰
					Result := FALSE;
				if (Trunc(EKashiCode.Value) <> m_KmkInfo.KashiKuri) then	//	貸方資金繰
					Result := FALSE;
				if (Trunc(ESousyokuCode.Value) <> m_KmkInfo.Sousyoku) then	//	装飾
					Result := FALSE;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	加算体系ﾏｽﾀ 挿入ﾁｪｯｸ
//*		Name		:	H.Endo
//*		Date		:	2001/06/28
//*		Parameter	:	DragCode	:	挿入元
//*						DropCode	:	挿入先
//*		Return		:	正常(TRUE)/異常(FALSE)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.fnCheckMasterTreeInsertValid(DragCode,DropCode: Integer): Boolean;
var
	iCount  : Integer;
	cNode   : TTreeNode;
	WorkRec	: ^TaikeiRec;
begin
    for iCount := 1 to TreeView.Items.Count do
    begin
        WorkRec   := TreeView.Items [iCount - 1].Data;

		if  (WorkRec^.GCode = DropCode) then
		begin
            cNode       := TreeView.Items [iCount - 1];
            WorkRec   := cNode.Data;

            if  ((WorkRec^.Kbn = 0) or (WorkRec^.MasKbn = 2)) then
            begin
                cNode       := cNode.Parent;
                WorkRec   := cNode.Data;
            end;

            while (TRUE) do
            begin
				if  (WorkRec^.GCode = DragCode) then
				begin
					Result	:= FALSE;
					Exit;
				end;

                cNode   := cNode.Parent;

                if  (cNode = nil) then
                    break
                else
                    WorkRec   := cNode.Data;
            end;
        end;
    end;

    result  := TRUE;

end;

//**********************************************************************
//*		Proccess	:	仕訳Check
//*		Name		:	H.Endo
//*		Date		:	2001/07/11
//*		Parameter	:	KmkCode		:	科目ｺｰﾄﾞ
//*		Return		:	はい(TRUE)/いいえ(FALSE)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.fnSwkCheck(KmkCode: Integer): Boolean;						//	HIS0034
var
	DmqData		:	TMQuery;
	bRecordFalg	:	Boolean;
	iRet		:	Integer;
begin
	Result		:= TRUE;
(*
	bRecordFalg := FALSE;

	if (Syokuchi(kmkcode,TRUE) = TRUE) then
		m_SwkInfo.MessageFlag := FALSE		//	ﾒｯｾｰｼﾞﾌﾗｸﾞをFALSE
	else
		m_SwkInfo.MessageFlag := TRUE;		//	ﾒｯｾｰｼﾞﾌﾗｸﾞをTRUE

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
		Close();
		SQL.Clear;
		SQL.ADD('SELECT '					);
		SQL.ADD(	'HsrchNo '				);	//	仕訳ﾍｯﾀﾞ検索No
		SQL.ADD('FROM '		  				);
		SQL.ADD(	'SwkDetail '			);	//	仕訳明細ﾃﾞｰﾀ
		SQL.Add('WHERE '	  				);
		SQL.ADD(	'DkmkCode = :Kmk '		);	//	借方科目ｺｰﾄﾞ
		SQL.ADD(	'OR CkmkCode = :Kmk '	);	//	貸方科目ｺｰﾄﾞ
		ParamByName('Kmk').AsInteger := KmkCode;
		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if EOF <> TRUE then
		begin
			bRecordFalg := TRUE;
		end;
	end;

	DmqData.Close;
	DmqData.Free;

	//仕訳ﾃﾞｰﾀに科目が存在した時でﾒｯｾｰｼﾞを表示する時
	if (bRecordFalg = TRUE) and (m_SwkInfo.MessageFlag = FALSE) then
	begin
		//「仕訳ﾃﾞｰﾀが入力済みです。変更してもよろしいですか？変更後はﾏｽﾀ再計算を行ってください」
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,20);
		iRet := MjsMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
		if (iRet = mrNo) then
			Result := FALSE;
	end;

*) // SwkDetailﾃｰﾌﾞﾙがないので一時コメントにしておきます。<2005.06.23> LEAD

end;

//-----------------------------------------------------------------------------
// HagureCheck()
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    : はぐれ取得・はぐれのｸﾞﾘｯﾄﾞ表示処理
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.HagureCheck();
var
	DmqDsp			:	TMQuery;
	SumKbn			:	Byte;		//	実在/合計区分
	iLoop			:	Integer;
	cNode   		:	TTreeNode;
	wkRec			:	^TaikeiRec;
	iFusenKbn		:	Integer;
	iWork			:	Integer;
	sCmnt			:	String;
begin
	//	初期化
	SumKbn := 0;

	MemZitsu.Close;
   	MemGou.Close;

	MemGou.Open;
	MemZitsu.Open;

	DmqDsp := TMQuery.Create( Self );				        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDsp );	//	DBとMQueryの接続

	SetLength(m_aCmnt_Goukei,0);	//	配列をｸﾘｱ
	SetLength(m_aCmnt_Jitsu ,0);    //	配列をｸﾘｱ

	//	Treeの表示されているItemを検索
	for iLoop := 0 to TreeView.Items.Count-1 do
    begin
		cNode := TreeView.Items[iLoop];
		//	表示位置のLevelが0のものがあったら
		if cNode.Level = 0 then
		begin
			wkRec := cNode.Data;
			with DmqDsp do
			begin
				Close();
				SQL.Clear;
				SQL.Add('SELECT                                 ');
				SQL.Add('    MA.MasterKbn   as Mas              ');	//	ﾏｽﾀ区分
				SQL.Add('   ,MA.SumKbn      as Sum              ');	//	実在/合計区分
                SQL.Add('   ,MA.NCode       as ANCode           '); //  内部ｺｰﾄﾞ
				SQL.Add('   ,MA.GCode       as Gaibu            ');	//	外部ｺｰﾄﾞ
                SQL.Add('   ,MA.CNCode      as ACNCode          '); //  科目別補助内部ｺｰﾄﾞ
				SQL.Add('   ,MA.SubCode     as Sub              ');	//	細目ｺｰﾄﾞ
				SQL.Add('   ,MA.Renso       as Ren              ');	//	連想ｼﾝﾎﾞﾙ
				SQL.Add('   ,MA.LongName    as LName            ');	//	正式名称
				SQL.Add('   ,MA.SimpleName  as SName            ');	//	簡略名称
				SQL.Add('   ,MA.CharCode    as CharCD           ');	//	性格ｺｰﾄﾞ
				SQL.Add('   ,MA.AnalyzeCode as Bunseki          ');	//	分析ｺｰﾄﾞ
				SQL.Add('   ,MB.DecoKbn     as Sousyoku         ');	//	装飾区分
				SQL.Add('FROM KmkMA MA                          '); //	勘定科目基本ﾏｽﾀ
				SQL.Add('LEFT OUTER JOIN KmKMB MB ON            ');	//	勘定科目詳細情報
				SQL.Add('   (    MA.MasterKbn = MB.MasterKbn    ');
                SQL.Add('    AND MA.NCode     = MB.NCode        '); //
                SQL.Add('    AND MA.CNCode    = MB.CNCode )     '); //
				SQL.Add('WHERE MA.MasterKbn   = 1               '); //	ﾏｽﾀ区分(1:勘定科目)
                SQL.Add('  AND MA.RDelKbn     = 0               ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
                SQL.Add('  AND MA.NCode       = :Code           ');	//	内部ｺｰﾄﾞ
                SQL.Add('  AND MA.CNCode      = 0               ');	//	科目補助内部ｺｰﾄﾞ
                SQL.Add('  AND MA.SyokuchiKbn = 0               ');	//	諸口区分(諸口以外)

                ParamByName('Code').AsFloat   :=  wkRec.NCode;

				//	ｴﾗｰの判定
				if Open = FALSE then
				begin
					ErrorMessageDsp(DmqDsp);
					DmqDsp.Close;
					DmqDsp.Free;
					Exit;
				end;

				if EOF <> TRUE then
				begin
					//	合計時
					if ((GetFld('Mas').AsInteger) = 1) and
								((GetFld('Sum').AsInteger) = 1) then
					begin
						DSourceGou.Enabled := FALSE;
						gDragGouFlag	:=	TRUE;
						MemGou.Append;
                        MemGou.FieldByName('NCode')         .AsFloat    :=  GetFld('ANCode')    .AsFloat;	//	内部ｺｰﾄﾞ
                        MemGou.FieldByName('CNCode')        .AsFloat    :=	GetFld('ACNCode')   .AsFloat;	//  科目別補助内部ｺｰﾄﾞ
						MemGou.FieldByName('GCode')         .AsInteger  :=	GetFld('Gaibu')     .AsInteger;	//	合計ｺｰﾄﾞ
						MemGou.FieldByName('GRen')          .AsString	:=	GetFld('Ren')       .AsString;	//	連想
// <049>↓
//						MemGou.FieldByName('GLongName')     .AsString	:=	GetFld('LName')     .AsString;	//	正式名称
                                                                                                            //	正式名称
						MemGou.FieldByName('GLongName')     .AsString	:=	CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);
// <049>↑
						MemGou.FieldByName('GSName')        .AsString	:=	GetFld('SName')     .AsString;	//	簡略名称
						MemGou.FieldByName('SousyokuData')  .AsInteger  :=	GetFld('Sousyoku')  .AsInteger; //	装飾区分
						iFusenKbn                                       :=  FusenCheck(1,(GetFld('ANCode').AsFloat),0,sCmnt);
						SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei) + 1);
						m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  GetFld('ANCode').AsFloat;
                        m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  GetFld('ACNCode').AsFloat;
						m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  sCmnt;
						FusenDsp(iFusenKbn,GOUKEI);
						MemGou.Post;
						gDragGouFlag        :=	FALSE;
						DSourceGou.Enabled  :=  TRUE;
						MemGou.First;
					end
					//	実在時
	                else if ((GetFld('Mas').AsInteger) = 1) and
									((GetFld('Sum').AsInteger) = 0) then
					begin
						DSourceZitsu.Enabled := FALSE;
						gDragJitsuFlag := TRUE;
						MemZitsu.Append();
                        MemZitsu.FieldByName('NCode')       .AsFloat    :=  GetFld('ANCode')    .AsFloat;	//	内部ｺｰﾄﾞ
                        MemZitsu.FieldByName('CNCode')      .AsFloat    :=  GetFld('ACNCode')   .AsFloat;	//  科目別補助内部ｺｰﾄﾞ
						MemZitsu.FieldByName('Code')        .AsInteger  :=  GetFld('Gaibu')     .AsInteger;	//	実在ｺｰﾄﾞ
						MemZitsu.FieldByName('Ren')         .AsString   :=  GetFld('Ren')       .AsString;	//	連想
// <049>↓
//						MemZitsu.FieldByName('LongName')    .AsString   :=  GetFld('LName')     .AsString;	//	正式名称
                                                                                                            //	正式名称
						MemZitsu.FieldByName('LongName')    .AsString   :=  CutLeadByte(GetFld('LName').AsString, DISP_LENGTH_LONG);
// <049>↑
						MemZitsu.FieldByName('SName')       .AsString   :=  GetFld('SName')     .AsString;	//	簡略名称
						MemZitsu.FieldByName('SeikakuData') .AsInteger  :=  GetFld('CharCD')    .AsInteger;	//	性格ｺｰﾄﾞ
						MemZitsu.FieldByName('BunsekiNO')   .AsInteger  :=  GetFld('Bunseki')   .AsInteger;	//	分析ｺｰﾄﾞ
						MemZitsu.FieldByName('Bunseki')     .AsString   :=  GetSKmkMA(BUNSEKI,GetFld('Bunseki').AsInteger,iWork);
						iFusenKbn                                       :=  FusenCheck(1,(GetFld('ANCode').AsFloat),0,sCmnt);
						SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu) + 1);
						m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  GetFld('ANCode').AsFloat;
                        m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  GetFld('ACNCode').AsFloat;
						m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  sCmnt;
						FusenDsp(iFusenKbn,ZITSUZAI);
						MemZitsu.Post;
						gDragJitsuFlag          :=  FALSE;
						DSourceZitsu.Enabled    :=  TRUE;
						LevelDspSaimoku(wkRec.NCode);
					end;
				end;
			end;
		end;
	end;
	DmqDsp.Close;
	DmqDsp.Free;

end;

//-----------------------------------------------------------------------------
// ToolButton_Click()
//      PARAM   : Sender    :   TObjectオプジェクト
//      VAR     :
//      RETURN  :
//      MEMO    : 付箋ToolButtonクリック処理
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.ToolButton_Click(Sender: TObject);
begin

	m_ToolBtn.ClickFlag :=  TRUE;

	case ToolButton.ImageIndex of
		0:  m_ToolBtn.Tag   :=  1;  // 付箋(赤)
		1:	m_ToolBtn.Tag   :=  3;	// 付箋(青)
		2:	m_ToolBtn.Tag   :=  2;	// 付箋(緑)
		3:	m_ToolBtn.Tag   :=  4;	// 付箋(橙)
	end;

    // 詳細画面時
    if ( P_Syousai.Visible ) then
    begin
        PM_Click(Self);

    end
    else
    begin

    	// ﾌｫｰｶｽがTreeにある時
    	if ( ACControl.Name = TreeView.Name ) then
        begin
    		m_FusenNode :=  TreeView.Selected;
    		grTaikei	:=  m_FusenNode.Data;

    		// ｸﾞﾘｯﾄﾞ再表示に使用
    		gDelGrid    :=	m_FusenNode.Data;

    		if ( m_FusenNode.Parent <> nil ) then
    			grOya_Taikei    :=  m_FusenNode.Parent.Data;

    		PM_F_Click(Self);
    	end
    	// ﾌｫｰｶｽが実在・科目別補助・合計のGridにある時
    	else if ( ACControl.Name = DZitsuGrid.Name   ) or
    			( ACControl.Name = DSaimokuGrid.Name ) or
                ( ACControl.Name = DGoukeiGrid.Name  ) then
            PM_Click(Self)
    end;

end;

//-----------------------------------------------------------------------------
// F_ToolBtnClick()
//      PARAM   : Sender    :   TObjectオプジェクト
//      VAR     :
//      RETURN  :
//      MEMO    : 付箋ToolButtonクリック処理
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.F_ToolBtnClick(Sender: TObject);
begin

	ToolButton.ImageIndex := (Sender as TMenuItem).Tag;

    // 現在の付箋ｶﾗｰを保存
    m_FusenColorIdx :=  ToolButton.ImageIndex;

end;

//-----------------------------------------------------------------------------
// F_BAClick()
//      PARAM   : Sender    :   TObjectオプジェクト
//      VAR     :
//      RETURN  :
//      MEMO    : 備考有選択時処理(共通) 付箋備考ダイアログの表示
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.F_BAClick(Sender: TObject);
var
	iTag		:   Integer;		// 選択された付箋NO
	iSyubetsuNo	:	Integer;		// 種類
	iFusenInfo	:	Integer;		// 付箋の種類
	wkRec		:	^TaikeiRec;
	iLoop		:	Integer;	    // ﾙｰﾌﾟｶｳﾝﾄ
	iNCode	    :	Extended;       // 科目内部ｺｰﾄﾞ
	iSubNCode	:	Extended;       // 科目別補助内部ｺｰﾄﾞ
	sCmnt		:	String;
begin

	// 初期化処理
	iSyubetsuNo :=  0;

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran ( dbCorp_Select );

    // 勘定科目時
	if ( grTaikei.MasKbn = 1 ) then
		iFusenInfo  :=  FusenCheck(grTaikei.MasKbn,grTaikei.NCode,0,sCmnt)
    // 科目別補助時
	else
		iFusenInfo  :=  FusenCheck(grTaikei.MasKbn,grOya_Taikei.NCode,grTaikei.CNCode,sCmnt);

	case grTaikei.MasKbn of
        // 勘定科目
		1:
		begin
            if ( grTaikei.Kbn = 0 ) then
				    iSyubetsuNo :=  ZITSUZAI    // 実在時
			else    iSyubetsuNo	:=	GOUKEI;     // 合計時
		end;
		2:  iSyubetsuNo :=  SAIMOKU;	        // 細目科目
	end;

	iTag    :=  (Sender as TMenuItem).Tag;

	if ( iTag = iFusenInfo ) then
        iTag    :=  0;

	if ( iSyubetsuNo = SAIMOKU ) then
	begin
        // RollBack時TRUE
		if ( FusenUpDel(iTag,iSyubetsuNo,grOya_Taikei.NCode,grTaikei.CNCode,'',FUSENBIKO_ARI) ) then
            Exit;

		LevelDspSaimoku(grOya_Taikei.NCode);
        // ｾﾚｸﾀｰの移動
		MoveGridRecordSelecter(iSyubetsuNo,grTaikei.SubCode);
    end
	else
	begin
        // RollBack時TRUE
		if ( FusenUpDel(iTag,iSyubetsuNo,grTaikei.NCode,0,'',FUSENBIKO_ARI) ) then
            Exit;
		// 合計をClickしてから付箋をつけるとGridの表示内容がかわってしまったので
		// 選択されているのが合計ではない時というif文を追加

		if not (( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 )) then
		begin
			GridAgainDsp(OTHER,0);
            // ｾﾚｸﾀｰの移動
			MoveGridRecordSelecter(iSyubetsuNo,IntToStr(grTaikei.GCode));
		end;
	end;

    // ｺﾐｯﾄ(反映)
	MDataModule.Commit (dbCorp_Select);

	if ( grTaikei.MasKbn <> 2 ) then	        // 実在/合計時
	begin
		iNCode      :=  grTaikei.NCode;		    // 科目内部ｺｰﾄﾞ
		iSubNCode   :=  0;					    // 科目別補助内部ｺｰﾄﾞ
	end
	else	                                    // 科目別補助時
	begin
		iNCode      :=  grOya_Taikei.NCode;		// 科目内部ｺｰﾄﾞ
		iSubNCode   :=  grTaikei.CNCode;		// 科目別補助内部ｺｰﾄﾞ
	end;

	// 付箋ﾀﾞｲｱﾛｸﾞをcallする
	fnCallFusenBikoDlg(grTaikei.MasKbn,iNCode,iSubNCode,(Sender as TMenuItem).Tag);

	m_FusenNode.Selected    :=  TRUE;

end;

//-----------------------------------------------------------------------------
// Grid_F_BAClick()     ( TMenuItem )
//      PARAM   : Sender    :   TObjectオプジェクト
//      VAR     :
//      RETURN  :
//      MEMO    : 備考有選択時処理(共通) 付箋備考ダイアログの表示
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.Grid_F_BAClick(Sender: TObject);
var
	iTag		    :   Integer;	// 付箋の種類
	iActiveNo	    :	Integer;	// ActiveGridNO
	iFusenInfo	    :	Integer;	// 付箋情報
	iNCode		    :	Extended;	// 科目内部ｺｰﾄﾞ
	iSubNCode	    :	Extended;   // 科目別補助内部ｺｰﾄﾞ
	iPos			:	Integer;	// SPASEまでの桁数
	iNCodeDlg	    :	Extended;	// 科目内部ｺｰﾄﾞ(Dlg用)
	iSubNCodeDlg	:	Extended;	// 科目別補助内部ｺｰﾄﾞ(Dlg用)
	iMasKbn		    :	Integer;	// ﾏｽﾀ区分
    sGCode          :   Integer;
    sSubCode        :   String;
    sCmnt           :   String;
begin
    iTag      := 0;
    iActiveNo := 0;

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran ( dbCorp_Select );

        // 詳細画面の時
    if ( P_Syousai.Visible ) then
    begin

        if ( Trim(ECode.Text) = '' ) then Exit;

        case MTab_Select.Items.Selected of
            // 実在
            0:  begin
// <013>                    gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'',
                    gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'0',    // <013>            
                                    iNCode,iSubNCode);
                    iActiveNo	:=	ZITSUZAI;
                    iFusenInfo  :=  FusenCheck(1,iNCode,0,sCmnt);

                    // Toolﾎﾞﾀﾝが押されてない時
            		if ( m_ToolBtn.ClickFlag = FALSE ) then
            			iTag    :=  (Sender as TMenuItem).Tag
                    // 押された時
               		else
            			iTag    :=  m_ToolBtn.Tag;

            		m_ToolBtn.ClickFlag :=  FALSE;

            		if ( iTag = iFusenInfo ) then
            			iTag    :=  0;

                    // RollBack時TRUE
            		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',FUSENBIKO_ARI) ) then
            			Exit;

            		gbFusenFlag	:=	TRUE;
                    FusenDsp2(iTag);
                end;
            // 細目
            1:  begin
                    // 先頭からSPACEまでの桁数COUNT
                	iPos    :=  MJSHanPos(' ', MTab_Select.BorderCaption);
                    // 上記で取得した桁数-1までの桁数をｺﾋﾟｰ
                	sGCode  :=  StrToIntDef(MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1),0);

                    // 数値属性
		            if ( wkKmk.SaimokukZoku <= 1 ) then
                		sSubCode    :=  Format ('%.16d', [StrToInt64(Trim(ECode.Text))])
                	else
                    // ﾌﾘｰ属性
                	begin
                		ECode.Text	:= TrimRight(ECode.Text);
                		sSubCode	:= ECode.Text;
                    end;

                    gfnGetKmk_NCODE(KMK_HOJYO,0,sGCode,sSubCode,
                                    iNCode,iSubNCode);

            		iActiveNo	:=	SAIMOKU;
            		iFusenInfo	:=	FusenCheck(2,iNCode,iSubNCode,sCmnt);

                    //	Toolﾎﾞﾀﾝが押されてない時
            		if (m_ToolBtn.ClickFlag = FALSE) then
            			iTag := (Sender as TMenuItem).Tag
                    //	押された時
            		else
            			iTag := m_ToolBtn.Tag;

            		m_ToolBtn.ClickFlag := FALSE;

            		if (iTag = iFusenInfo) then
            			iTag := 0;

                    // RollBack時TRUE
            		if (FusenUpDel(iTag,iActiveNo,iNCode,iSubNCode,'',FUSENBIKO_ARI)) then
                        Exit;

            		gbFusenFlag	:=	TRUE;
                    FusenDsp2(iTag);
                end;
            // 合計
            2:  begin
// <013>                    gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'',
                    gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'0',    // <013> 
                                    iNCode,iSubNCode);
                    iActiveNo	:=	GOUKEI;
                    iFusenInfo  :=  FusenCheck(1,iNCode,0,sCmnt);

                    // Toolﾎﾞﾀﾝが押されてない時
               		if ( m_ToolBtn.ClickFlag = FALSE ) then
            			iTag    :=  (Sender as TMenuItem).Tag
                    // 押された時
            		else
            			iTag    :=  m_ToolBtn.Tag;

            		m_ToolBtn.ClickFlag :=  FALSE;

            		if ( iTag = iFusenInfo ) then
            			iTag    :=  0;

                    // RollBack時TRUE
            		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',FUSENBIKO_ARI) ) then
            			Exit;

            		gbFusenFlag	:=	TRUE;
                    FusenDsp2(iTag);
                end;

        end;
    end;

    // 合計科目の時
	if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
	begin
		if ( MemGou.FieldByName('GCode').IsNull ) then  Exit;

		iActiveNo   :=  GOUKEI;
		iFusenInfo	:=	MemGou.FieldByName('GFusenInfo').AsInteger;
		iNCode		:=	MemGou.FieldByName('NCode')     .AsFloat;

        // Toolﾎﾞﾀﾝが押されてない時
		if ( m_ToolBtn.ClickFlag = FALSE ) then
			iTag    :=  (Sender as TMenuItem).Tag
        // 押された時
		else
			iTag    :=  m_ToolBtn.Tag;

		m_ToolBtn.ClickFlag :=  FALSE;

		if ( iTag = iFusenInfo ) then
			iTag    :=  0;

        // RollBack時TRUE
		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',FUSENBIKO_ARI) ) then
			Exit;

		MemGou.Open;
		MemGou.Edit;
		FusenDsp(iTag,iActiveNo);
		gbFusenFlag	:=	TRUE;
		MemGou.Post;
    end;

    // 実在科目の時
	if ( Screen.ActiveControl.Name = DZitsuGrid.Name ) then
	begin
		if ( MemZitsu.FieldByName('Code').IsNull ) then
			Exit;

		iActiveNo	:=	ZITSUZAI;
		iFusenInfo  :=  MemZitsu.FieldByName('FusenInfo')   .AsInteger;
		iNCode		:=	MemZitsu.FieldByName('NCode')       .AsFloat;

        // Toolﾎﾞﾀﾝが押されてない時
		if ( m_ToolBtn.ClickFlag = FALSE ) then
			iTag    :=  (Sender as TMenuItem).Tag
        // 押された時
		else
			iTag    :=  m_ToolBtn.Tag;

		m_ToolBtn.ClickFlag :=  FALSE;

		if ( iTag = iFusenInfo ) then
			iTag    :=  0;

        // RollBack時TRUE
		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',FUSENBIKO_ARI) ) then
			Exit;

		MemZitsu.Open;
		MemZitsu.Edit;
		FusenDsp(iTag,iActiveNo);
		gbFusenFlag	:=	TRUE;
		MemZitsu.Post;
    end;

    // 細目科目の時
	if ( Screen.ActiveControl.Name = DSaimokuGrid.Name ) then
	begin
		if ( MemSai.FieldByName('SCode').IsNull ) then
			Exit;

		iActiveNo	:=	SAIMOKU;
		iFusenInfo	:=	MemSai.FieldByName('SFusenInfo').AsInteger;
		iNCode		:=	MemSai.FieldByName('NCode')     .AsFloat;
        iSubNCode   :=  MemSai.FieldByName('CNCode')    .AsFloat;

		if (m_ToolBtn.ClickFlag = FALSE) then	//	Toolﾎﾞﾀﾝが押されてない時
			iTag := (Sender as TMenuItem).Tag
		else	//	押された時
			iTag := m_ToolBtn.Tag;
		m_ToolBtn.ClickFlag := FALSE;
		if (iTag = iFusenInfo) then
			iTag := 0;

        // RollBack時TRUE
		if (FusenUpDel(iTag,iActiveNo,iNCode,iSubNCode,'',FUSENBIKO_ARI)) then
            Exit;

		MemSai.Open;
		MemSai.Edit;
		FusenDsp(iTag,iActiveNo);
		gbFusenFlag	:=	TRUE;
		MemSai.Post;
    end;

	DSourceGou.DataSet	:=	MemGou;
	DSourceSai.DataSet	:=	MemSai;

    // 実在/合計時
	if (iActiveNo <> SAIMOKU) then
	begin
		iMasKbn	        :=  1;				// ﾏｽﾀ区分(勘定科目)
		iNCodeDlg       :=  iNCode;			// 科目内部ｺｰﾄﾞ
		iSubNCodeDlg    :=  0;				// 科目別補助内部ｺｰﾄﾞ
	end
    // 科目別補助時
	else
	begin
		iMasKbn	        :=  2;				// ﾏｽﾀ区分(科目別補助)
		iNCodeDlg       :=  iNCode;		    // 科目内部ｺｰﾄﾞ
		iSubNCodeDlg    :=  iSubNCode;		// 科目別補助内部ｺｰﾄﾞ
	end;

    //　ｺﾐｯﾄ(反映)
	MDataModule.Commit ( dbCorp_Select );

	// 付箋ﾀﾞｲｱﾛｸﾞをcallする
	fnCallFusenBikoDlg(iMasKbn,iNCodeDlg,iSubNCodeDlg,iTag);

end;

//-----------------------------------------------------------------------------
// TM_F_ReviseClick()     ( TMenuItem )
//      PARAM   : Sender    :   TObjectオプジェクト
//      VAR     :
//      RETURN  :
//      MEMO    : 備考修正選択時処理() 付箋備考ダイアログの表示
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.TM_F_ReviseClick(Sender: TObject);
var
	iNCode	    :   Extended;
	iSubNCode	:	Extended;
begin

    // 実在/合計時
	if ( grTaikei.MasKbn <> 2 ) then
	begin
		iNCode      :=  grTaikei.NCode;			// 科目内部ｺｰﾄﾞ
		iSubNCode   :=  0;						// 科目別補助内部ｺｰﾄﾞ
	end
    // 科目別補助時
	else
	begin
		iNCode      :=  grOya_Taikei.NCode;		// 科目内部ｺｰﾄﾞ
		iSubNCode   :=  grTaikei.NCode;			// 科目別補助内部ｺｰﾄﾞ
	end;

	// 付箋ﾀﾞｲｱﾛｸﾞをcallする
	fnCallFusenBikoDlg(grTaikei.MasKbn,iNCode,iSubNCode,TM_F_Revise.Tag);

end;

//-----------------------------------------------------------------------------
// TM_F_ReviseClick()     ( TMenuItem )
//      PARAM   : Sender    :   TObjectオプジェクト
//      VAR     :
//      RETURN  :
//      MEMO    : 備考修正選択時処理(Grid) 付箋備考ダイアログの表示
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.PM_ReviseClick(Sender: TObject);
var
	iPos		:	Integer;	// SPASEまでの桁数
	iMasKbn		:	Integer;	// ﾏｽﾀ区分
	iNCode	    :	Extended;	// 科目内部ｺｰﾄﾞ
	iSubNCode	:	Extended;	// 科目別補助内部ｺｰﾄﾞ
    sGCode      :   Integer;
    sSubCode    :   String;
begin
    iMasKbn := 0;

    // 詳細画面の時
    if ( P_Syousai.Visible ) then
    begin
        case MTab_Select.Items.Selected of
            // 実在
            0:  begin
                    iMasKbn :=  Kmk;
// <013>                    gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'',
                    gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'0',    // <013>
                                    iNCode,iSubNCode);
                end;
            // 細目
            1:  begin
                    iMasKbn :=  KMK_HOJYO;

                    // 先頭からSPACEまでの桁数COUNT
                	iPos    :=  MJSHanPos(' ', MTab_Select.BorderCaption);
                    // 上記で取得した桁数-1までの桁数をｺﾋﾟｰ
                	sGCode  :=  StrToIntDef(MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1),0);

                    // 数値属性
		            if ( wkKmk.SaimokukZoku <= 1 ) then
                		sSubCode    :=  Format ('%.16d', [StrToInt64(Trim(ECode.Text))])
                	else
                    // ﾌﾘｰ属性
                	begin
                		ECode.Text	:= TrimRight(ECode.Text);
                		sSubCode	:= ECode.Text;
                    end;

                    gfnGetKmk_NCODE(KMK_HOJYO,0,sGCode,sSubCode,
                                    iNCode,iSubNCode);
                end;
            // 合計
            2:  begin
                    iMasKbn :=  Kmk;
// <013>                    gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'',
                    gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'0',    // <013>
                                    iNCode,iSubNCode);
                end;
        end;
    end;

	// 合計科目の時
	if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
	begin
		iMasKbn     :=  1;										// ﾏｽﾀ区分(勘定科目)
		iNCode      :=  MemGou.FieldByName('NCode').AsFloat;	// 科目内部ｺｰﾄﾞ(合計)
		iSubNCode   :=  0;										// 科目別補助内部ｺｰﾄﾞ
    end
	// 実在科目の時
	else if (Screen.ActiveControl.Name = DZitsuGrid.Name) then
	begin
		iMasKbn     :=  1;										// ﾏｽﾀ区分(勘定科目)
		iNCode      :=	MemZitsu.FieldByName('NCode').AsFloat;	// 科目内部ｺｰﾄﾞ(実在)
		iSubNCode   :=  0;										// 科目別補助内部ｺｰﾄﾞ
    end
	// 細目科目の時
	else if ( Screen.ActiveControl.Name = DSaimokuGrid.Name ) then
	begin
		iMasKbn     :=  2;										//	ﾏｽﾀ区分(科目別補助)
        iNCode      :=  MemSai.FieldByName('NCode').AsFloat;    // 科目内部ｺｰﾄﾞ
        iSubNCode   :=  MemSai.FieldByName('CNCode').AsFloat;   // 科目別補助内部ｺｰﾄﾞ
    end;

	// 付箋ﾀﾞｲｱﾛｸﾞをcallする
	fnCallFusenBikoDlg(iMasKbn,iNCode,iSubNCode,PM_Revise.Tag);

end;

//-----------------------------------------------------------------------------
// fnCallFusenBikoDlg()
//      PARAM   : MasKbn        :   ﾏｽﾀ区分
//                NCode         :   科目内部ｺｰﾄﾞ
//                SubNCode      :   科目別補助内部ｺｰﾄﾞ
//                FusenKbn      :   付箋区分()
//      VAR     :
//      RETURN  :
//      MEMO    : 付箋備考ダイアログをＣａｌｌする
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnCallFusenBikoDlg(MasKbn: Integer; NCode,SubNCode: Extended; FusenKbn:Integer);
var
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
begin

// -----------------------------------------------------------------------------------
//
//	constructor関数は必ずCreateしてあげなければいけないくて通常であれば下記の様に
//	MasDLGParam	:= TMasDLGParam.Create;　してあげればよいが、今回使用している
//	MasDLGParam	:= TMasDLGParam.CreateParam();　はTMasDLGParamをCreateしながら
//	他の変数の初期化も行っている。
//
// -----------------------------------------------------------------------------------

	// 付箋ﾀﾞｲｱﾛｸﾞ表示
	Fusen   :=  TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( TForm(m_pRec.m_pOwnerForm^), Pointer ( m_pRec ) );  // <003>
	MasDLGParam				    :=	TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn    :=  MasKbn;				            // ﾏｽﾀ区分
	MasDLGParam.m_iNCode        :=  NCode;			                // 科目内部ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode     :=  SubNCode;			            // 科目別補助内部ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn     :=  FusenKbn;			            // 付箋区分
	MasDLGParam.m_pApRec	    :=	Pointer( m_pRec );	            // ApRecのﾎﾟｲﾝﾀ

	if ( Fusen.DoDlg(MasDLGParam) = mrOk ) then
	begin
		case MTab_N.Items.Selected of
			0:	fnFusenArraySet(ZITSUZAI,NCode, SubNCode, MasDLGParam.m_sCmnt);	//	実在
			1:	fnFusenArraySet(SAIMOKU, NCode, SubNCode, MasDLGParam.m_sCmnt);	//	細目
			2:	fnFusenArraySet(GOUKEI,  NCode, SubNCode, MasDLGParam.m_sCmnt);	//	合計
		end;
	end;

	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

//**********************************************************************
//*		Proccess	:	ToolBtnの使用可・不可制御
//*		Name		:	H.Endo
//*		Date		:	2001/08/21
//*		Parameter	:	Kbn			:	勘定科目(KMK)/科目別補助(KMK_HOJYO)
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.fnToolBtnUseCheck(Kbn:Integer);
begin
	//	勘定科目
	if (Kbn = KMK) then
	begin
		case giReferFlag of
		//	ToolBtn使用可
			//	通常処理,勘定科目(基本)/科目別補助(通常),勘定科目(通常)/科目別補助(基本),基本のみ
			//	勘定科目(通常)/科目別補助(参照),勘定科目(基本)/科目別補助(参照)
			NORMAL,KAN_BA_HO_NO,KAN_NO_HO_BA,BASICONLY,KAN_NO_HO_RE,KAN_BA_HO_RE:
            begin
                if ( m_FusenColorIdx = -1 ) then
                begin
                    ToolButton.ImageIndex	:=  0;
                    m_FusenColorIdx         :=  0;
                end
                else
                    ToolButton.ImageIndex	:=  m_FusenColorIdx;

                ToolButton.Enabled      :=  TRUE;
            end;
		//	ToolBtn使用不可
			//	勘定科目(参照)/科目別補助(通常),勘定科目(参照)/科目別補助(基本),参照のみ
			KAN_RE_HO_NO,KAN_RE_HO_BA,REFER:
            begin
                ToolButton.ImageIndex   :=  4;
                ToolButton.Enabled      :=  FALSE;
            end;
		end
	end
	//	科目別補助
	else if (Kbn = KMK_HOJYO) then
	begin
		case giReferFlag of
		//	ToolBtn使用可
			//	通常処理,勘定科目(基本)/科目別補助(通常),勘定科目(参照)/科目別補助(通常),
			//	勘定科目(通常)/科目別補助(基本),基本のみ,勘定科目(参照)/科目別補助(基本)
			NORMAL,KAN_BA_HO_NO,KAN_RE_HO_NO,KAN_NO_HO_BA,BASICONLY,KAN_RE_HO_BA:
            begin
                if ( m_FusenColorIdx = -1 ) then
                begin
                    ToolButton.ImageIndex	:=  0;
                    m_FusenColorIdx         :=  0;
                end
                else
                    ToolButton.ImageIndex	:=  m_FusenColorIdx;

                ToolButton.Enabled      :=  TRUE;
            end;
		//	ToolBtn使用不可
			//	勘定科目(通常)/科目別補助(参照),勘定科目(基本)/科目別補助(参照),参照のみ
			KAN_NO_HO_RE,KAN_BA_HO_RE,REFER:
            begin
                ToolButton.ImageIndex   :=  4;
                ToolButton.Enabled      :=  FALSE;
            end;
		end
	end;

end;

//************************************************************************
//*		Component		:	DZitsuGrid ( TdxDBGrid )
//*
//*		Event			:	OnMouseMove
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DZitsuGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	Row	      :	Integer;
    nExNCode  : Extended;   // <074>
    iLoop     : Integer;    // <074>
begin

  inherited;

// ↓<074>
    nExNCode  := 0;
    Row       := 0;

    if ((Y <= DZitsuGrid.HeaderPanelHeight) or
	    (X <= DZitsuGrid.GrIndicatorWidth ) or
	    (X >= (DZitsuGrid.GrIndicatorWidth + DZitsuGrid.Width))) then
    begin
        DZitsuGrid.Hint	  := '';
	    DZitsuGrid.ShowHint := FALSE;
	    Exit;
    end;

    if	((DZitsuGrid.GetNodeAt (X, Y) <> nil) and
		 (not VarIsNull (TdxTreeListNode (DZitsuGrid.GetNodeAt (X, Y)).Values [11]))) then
	begin
        nExNCode  := TdxTreeListNode (DZitsuGrid.GetNodeAt (X, Y)).Values [11];    // 科目内部ｺｰﾄﾞ

        for iLoop := 0 to Length(m_aCmnt_Jitsu) - 1 do
        begin
            if ( m_aCmnt_Jitsu[iLoop].NCode = nExNCode ) then
            begin
                Row := iLoop + 1;   // 該当行を検索
                break;
            end;
        end;
    end;
// ↑<074>

	// 付箋備考表示処理
// <074>	Row	:= Y div DZitsuGrid.DefaultRowHeight + DZitsuGrid.TopIndex;

	if (Row <> m_HintRow_Jitsu) then
	begin
		m_HintRow_Jitsu		:= Row;
		DZitsuGrid.Hint		:= '';
		DZitsuGrid.ShowHint	:= FALSE;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;

	//	行
	if (Row = m_HintRow_Jitsu) and (DZitsuGrid.ShowHint = TRUE) then
		Exit;

	if Row = 0 then exit;	//HIS0126

	if (Row <= MemZitsu.RecordCount) and (m_aCmnt_Jitsu[Row-1].Cmnt <> '') then
	begin
		DZitsuGrid.Hint		:= m_aCmnt_Jitsu[Row-1].Cmnt;
		DZitsuGrid.ShowHint	:= TRUE;
	end;

end;

//************************************************************************
//*		Component		:	DSaimokuGrid ( TdxDBGrid )
//*
//*		Event			:	OnMouseMove
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DSaimokuGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	Row	      : Integer;
    nExNCode,               // <074>
    nExCNCode : Extended;   // <074>
    iLoop     : Integer;    // <074>
begin
    inherited;

// ↓<074>
    nExNCode  := 0;
    nExCNCode := 0;
    Row       := 0;

    if ((Y <= DSaimokuGrid.HeaderPanelHeight) or
	    (X <= DSaimokuGrid.GrIndicatorWidth ) or
	    (X >= (DSaimokuGrid.GrIndicatorWidth + DSaimokuGrid.Width))) then
    begin
        DSaimokuGrid.Hint	  := '';
	    DSaimokuGrid.ShowHint := FALSE;
	    Exit;
    end;

    if	((DSaimokuGrid.GetNodeAt (X, Y) <> nil) and
		 (not VarIsNull (TdxTreeListNode (DSaimokuGrid.GetNodeAt (X, Y)).Values [5]))  and
		 (not VarIsNull (TdxTreeListNode (DSaimokuGrid.GetNodeAt (X, Y)).Values [6]))) then
	begin
        nExNCode  := TdxTreeListNode (DSaimokuGrid.GetNodeAt (X, Y)).Values [5];    // 科目内部ｺｰﾄﾞ
        nExCNCode := TdxTreeListNode (DSaimokuGrid.GetNodeAt (X, Y)).Values [6];    // 細目内部ｺｰﾄﾞ

        for iLoop := 0 to Length(m_aCmnt_Sai) - 1 do
        begin
            if ( m_aCmnt_Sai[iLoop].NCode    = nExNCode  ) and
               ( m_aCmnt_Sai[iLoop].SubNCode = nExCNCode ) then
            begin
                Row := iLoop + 1;   // 該当行を検索
                break;
            end;
        end;
    end;
// ↑<074>

	// 付箋備考表示処理
// <074>Row	:= Y div DSaimokuGrid.DefaultRowHeight + DSaimokuGrid.TopIndex;

	if (Row <> m_HintRow_Sai) then
	begin
		m_HintRow_Sai		  := Row;
		DSaimokuGrid.Hint	  := '';
		DSaimokuGrid.ShowHint := FALSE;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;

	//	行
	if (Row = m_HintRow_Sai) and (DSaimokuGrid.ShowHint = TRUE) then
		Exit;

	if Row = 0 then exit;	//HIS0126

	if (Row <= MemSai.RecordCount) and (m_aCmnt_Sai[Row-1].Cmnt <> '') then
	begin
		DSaimokuGrid.Hint	  := m_aCmnt_Sai[Row-1].Cmnt;
		DSaimokuGrid.ShowHint := TRUE;
	end;

end;

//************************************************************************
//*		Component		:	DGoukeiGrid ( TdxDBGrid )
//*
//*		Event			:	OnMouseMove
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.DGoukeiGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	Row	     : Integer;
	sWork    : String;
    nExNCode : Extended;   // <074>
    iLoop    : Integer;    // <074>
begin
  inherited;

// ↓<074>
    nExNCode  := 0;
    Row       := 0;

    if ((Y <= DGoukeiGrid.HeaderPanelHeight) or
	    (X <= DGoukeiGrid.GrIndicatorWidth ) or
	    (X >= (DGoukeiGrid.GrIndicatorWidth + DGoukeiGrid.Width))) then
    begin
        DGoukeiGrid.Hint	  := '';
	    DGoukeiGrid.ShowHint := FALSE;
	    Exit;
    end;

    if	((DGoukeiGrid.GetNodeAt (X, Y) <> nil) and
		 (not VarIsNull (TdxTreeListNode (DGoukeiGrid.GetNodeAt (X, Y)).Values [7]))) then
	begin
        nExNCode  := TdxTreeListNode (DGoukeiGrid.GetNodeAt (X, Y)).Values [7];    // 科目内部ｺｰﾄﾞ

        for iLoop := 0 to Length(m_aCmnt_Goukei) - 1 do
        begin
            if ( m_aCmnt_Goukei[iLoop].NCode = nExNCode ) then
            begin
                Row := iLoop + 1;   // 該当行を検索
                break;
            end;
        end;
    end;
// ↑<074>

	// 付箋備考表示処理
// <074>	Row	:= Y div DGoukeiGrid.DefaultRowHeight + DGoukeiGrid.TopIndex;

	if (Row <> m_HintRow_Gou) then
	begin
		m_HintRow_Gou		 := Row;
		DGoukeiGrid.Hint	 := '';
		DGoukeiGrid.ShowHint := FALSE;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;

	//	行
	if (Row = m_HintRow_Gou) and (DGoukeiGrid.ShowHint = TRUE) then
		Exit;

	if Row = 0 then exit;	//HIS0126

	if (Row <= MemGou.RecordCount) and (m_aCmnt_Goukei[Row-1].Cmnt <> '') then
	begin
		sWork := m_aCmnt_Goukei[Row-1].Cmnt;
		DGoukeiGrid.Hint	 := sWork;
		DGoukeiGrid.ShowHint := TRUE;
	end;

end;

//**********************************************************************
//*		Proccess	:	付箋配列ｾｯﾄ
//*		Name		:	H.Endo
//*		Date		:	2001/09/25
//*		Parameter	:
//*
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.fnFusenArraySet(Choice: Integer; NCode, SubNCode: Extended; Cmnt: String);
var
	iLoop	:	Integer;
begin

	case Choice of
        // -----------------------
        //      実在科目
        // -----------------------
		ZITSUZAI:
		begin
			for iLoop := 0 to Length(m_aCmnt_Jitsu)-1 do
			begin
				if ( m_aCmnt_Jitsu[iLoop].NCode    = NCode    ) and
                   ( m_aCmnt_Jitsu[iLoop].SubNCode = SubNCode ) then
				begin
					m_aCmnt_Jitsu[iLoop].Cmnt   :=  Cmnt;
					m_HintRow_Jitsu             :=  0;
					Break;
				end
			end;
		end;
        // -----------------------
        //      細目科目
        // -----------------------
		SAIMOKU:
		begin
			for iLoop := 0 to Length(m_aCmnt_Sai)-1 do
			begin
				if ( m_aCmnt_Sai[iLoop].NCode    = NCode    ) and
                   ( m_aCmnt_Sai[iLoop].SubNCode = SubNCode ) then
				begin
					m_aCmnt_Sai[iLoop].Cmnt     :=  Cmnt;
					m_HintRow_Sai               :=  0;
					Break;
				end
			end;
		end;
        // -----------------------
        //      合計科目
        // -----------------------
		GOUKEI:
		begin
			for iLoop := 0 to Length(m_aCmnt_Goukei)-1 do
			begin
				if ( m_aCmnt_Goukei[iLoop].NCode    = NCode    ) and
                   ( m_aCmnt_Goukei[iLoop].SubNCode = SubNCode ) then
				begin
					m_aCmnt_Goukei[iLoop].Cmnt  :=  Cmnt;
					m_HintRow_Gou               :=  0;
					Break;
				end
			end;
		end;
	end;

end;

//-----------------------------------------------------------------------------
// fnTaxCodeCheck
//	< 消費税コードチェック >
//      PARAM   :   NCode   :   内部コード
//		VAR		:
//      RETURN  :   TRUE:一致 FALSE:不一致
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnTaxCodeCheck(NCode: Extended): Boolean;
var
	iLoop	:	Integer;
begin

	Result := FALSE;

	for iLoop := 1 to 9 do
	begin
		if (m_aTaxInfo[iLoop] = NCode) then
		begin
			Result := TRUE;
			break;
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	振替先科目ｺｰﾄﾞのCheck
//*		Name		:	H.Endo
//*		Date		:	2001/12/11
//*		Parameter	:	KmkCode	:	科目ｺｰﾄﾞ
//*		Return		:	一致(TRUE)/不一致(FALSE)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.fnFurikaeCheck(KmkCode: Integer): Boolean;
var
	DmqData		:	TMQuery;
begin

	Result := FALSE;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
		SQL.ADD('SELECT '					);
		SQL.ADD(	'ScCode '				);	//	振替元科目ｺｰﾄﾞ
		SQL.ADD('FROM '						);
		SQL.ADD(	'ExKmkInfo '			);	//	工事完成振替科目
		SQL.ADD('WHERE '					);
		SQL.ADD(	'DeCode = :KmkCode '	);
		ParamByName('KmkCode').AsInteger :=	KmkCode;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if Eof <> TRUE then
		begin
			Result := TRUE;
		end;
	end;

	DmqData.Close;
	DmqData.Free;
end;

//--- HIS0059  END  -----

//--- HIS0061 START -----
//**********************************************************************
//*		Proccess	:	DB内に諸口が2つ以上存在したら削除されている方を実削除する
//*		Name		:	H.Endo
//*		Date		:	2002/01/18
//*		Parameter	:	Qu		:	接続済みのQuery
//*						KmkCode	:	科目ｺｰﾄﾞ
//*		Return		:	正常(TRUE)/異常(FALSE)
//*		History		:	9999/99/99	X.Xxxx
//*						2005.03.31  Y.Mogi  内部ｺｰﾄﾞ対応
//**********************************************************************
function    TJNTCRP009001f.fnSyokuchiDel(Qe: TMQuery; KmkNCode: Extended): Boolean;
var
	iCnt	:	Integer;
begin
	Result := TRUE;

	iCnt := 0;
	with Qe do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                         ');
		SQL.Add('   SubCode                     ');
		SQL.Add('FROM KmkMA                     ');
		SQL.Add('WHERE MasterKbn   = 2          ');
		SQL.Add('  AND NCode       = :ExNCode   ');
		SQL.Add('  AND SyokuchiKbn = 1          ');


		ParamByName('ExNCode').AsFloat := KmkNCode;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(Qe);
			Result := FALSE;
			Exit;
		end;

		while Eof <> TRUE do
		begin
			iCnt := iCnt + 1;
			next;
		end;

		if iCnt > 1 then
		begin
			Close;
			SQL.Clear;
			SQL.Add('DELETE FROM KmkMA              ');
			SQL.Add('WHERE MasterKbn   = 2          '); //	ﾏｽﾀ区分		(2:細目科目)
			SQL.Add('  AND NCode       = :ExNCode   ');	//	外部ｺｰﾄﾞ
			SQL.Add('  AND SyokuchiKbn = 1          ');	//	諸口区分
            SQL.Add('  AND RDelKbn     = 1          ');	//	削除ﾚｺｰﾄﾞ	(1:削除)

			ParamByName('ExNCode').AsFloat := KmkNCode;

			//	ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(Qe);
				Result := FALSE;
        	    Exit;
			end;
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	加算体系のCheck
//*		Name		:	H.Endo
//*		Date		:	2002/01/29
//*		Parameter	:
//*		Return		:
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.fnTreeCheck();
var
	Qe		:	TMQuery;
	bFlag	:	Boolean;
begin
	bFlag := FALSE;

	Qe := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );		//	DBとMQueryの接続

	with Qe do
	begin
		Close;
		SQL.Clear;
		SQL.ADD('SELECT                 '); //
		SQL.ADD('   SumNCode            ');	// 加算先内部ｺｰﾄﾞ
		SQL.ADD('FROM KmkTree           '); // 科目加算体系ﾏｽﾀ
		SQL.ADD('WHERE MasterKbn = 1    '); // ﾏｽﾀ区分(1:勘定科目)
		SQL.ADD('  AND SumNCode  = 0    ');	// 加算先内部ｺｰﾄﾞ

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(Qe);
			Qe.Close;
			Qe.Free;
			Exit;
		end;

		if Eof <> TRUE then
		begin
			bFlag := TRUE;
		end;

		if bFlag = TRUE then
		begin
			Close;
			SQL.Clear;
			SQL.ADD('DELETE FROM KmkTree    '); //
			SQL.ADD('WHERE MasterKbn = 1    '); // ﾏｽﾀ区分(1:勘定科目)
			SQL.ADD('  AND SumNCode  = 0    '); // 加算先内部ｺｰﾄﾞ

			//	ｴﾗｰの判定
			if (ExecSQL = FALSE) then
			begin
				ErrorMessageDsp(Qe);
				Qe.Close;
				Qe.Free;
        	    Exit;
			end;
			gbKmkTree2Flag := TRUE;
			TableHistory.KmkTree_KanDel	:= TABLE_DELETE;
		end;
	end;

	Qe.Close;	//HIS99
	Qe.Free;	//HIS99
end;

//--- HIS0062  END  -----

//--- HIS0073 START -----
//**********************************************************************
//*		Proccess	:	科目別補助の内部ｺｰﾄﾞを取得
//*		Name		:	H.Endo
//*		Date		:	2002/04/19
//*		Parameter	:	CODE		:	外部ｺｰﾄﾞ
//*						SUBCODE		:	科目別補助ｺｰﾄﾞ
//*		Return		:	内部ｺｰﾄﾞ
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.fnSubNCodeCheck(GCode: Integer; SubCode: String; var NCode: Extended; var SyokuchiKbn: Integer);
var
	DmqData		:	TMQuery;
begin

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//科目別補助の内部ｺｰﾄﾞ取得
	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    NCode                  ');	//	内部ｺｰﾄﾞ
		SQL.Add('   ,Syokuchikbn            ');	//	諸口区分
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 2        '); //	ﾏｽﾀ区分(2:細目科目)
		SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND GCode     = :GCode   ');	//	外部ｺｰﾄﾞ
		SQL.Add('  AND SubCode   = :SCode   ');	//	細目ｺｰﾄﾞ

		ParamByName('GCode').AsInteger := GCODE;
		ParamByName('SCode').AsString  := SUBCODE;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
            NCode       :=  GetFld('NCode')         .AsFloat;   // 内部ｺｰﾄﾞ
            SyokuchiKbn :=  GetFld('SyokuchiKbn')   .AsInteger; // 諸口区分
		end;
	end;
	DmqData.Close;
	DmqData.Free;

end;

//**********************************************************************
//*		Proccess	:	科目別補助の内部ｺｰﾄﾞを取得 <054>
//*		Name		:	E.Nanba
//*		Date		:	2006/05/18
//*		Parameter	:	GCode		:	勘定科目外部ｺｰﾄﾞ
//*						SubCode		:	科目別補助外部ｺｰﾄﾞ
//*						NCode		:	勘定科目内部ｺｰﾄﾞ(out)
//*						CNCode		:	科目別補助内部ｺｰﾄﾞ(out)
//*						SyokuchiKbn	:	諸口区分(out)
//*		Return		:
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.fnSubNCodeCheck(GCode: Integer; SubCode: String;
	var NCode: Extended; var CNCode: Extended; var SyokuchiKbn: Integer);
var
	DmqData		:	TMQuery;
begin

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	//科目別補助の内部ｺｰﾄﾞ取得
	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                     ');
		SQL.Add('    NCode                  ');	//	勘定科目内部ｺｰﾄﾞ
		SQL.Add('   ,CNCode                 ');	//	科目別補助内部ｺｰﾄﾞ
		SQL.Add('   ,Syokuchikbn            ');	//	諸口区分
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = 2        '); //	ﾏｽﾀ区分(2:細目科目)
		SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND GCode     = :GCode   ');	//	外部ｺｰﾄﾞ
		SQL.Add('  AND SubCode   = :SCode   ');	//	細目ｺｰﾄﾞ

		ParamByName('GCode').AsInteger := GCODE;
		ParamByName('SCode').AsString  := SUBCODE;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
            NCode       :=  GetFld('NCode')         .AsFloat;   // 勘定科目内部ｺｰﾄﾞ
            CNCode      :=  GetFld('CNCode')        .AsFloat;   // 科目別補助内部ｺｰﾄﾞ
            SyokuchiKbn :=  GetFld('SyokuchiKbn')   .AsInteger; // 諸口区分
		end;
	end;
	DmqData.Close;
	DmqData.Free;

end;

//--- HIS0082 START -----
//**********************************************************************
//*		Proccess	:	内部ｺｰﾄﾞ0から諸口ｺｰﾄﾞを取得
//*		Name		:	H.Endo
//*		Date		:	2002/07/31
//*		Parameter	:	CODE		:	外部ｺｰﾄﾞ
//*		Return		:	科目別補助ｺｰﾄﾞ
//*		History		:
//*	補足
//*		詳細画面から科目別補助を削除するとき、Treeで科目別補助、諸口という順番の
//*		時は問題ないが、再表示後の諸口、科目別補助という順番の時、科目別補助を削除
//*		すると諸口の削除の時ｴﾗｰとなってしまう
//**********************************************************************
function TJNTCRP009001f.fnGetSubCode(CODE: Integer):Integer;
var
	Qe	:	TMQuery;
begin
	//	初期処理
	result := 0;

	Qe := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );		//	DBとMQueryの接続

	//内部ｺｰﾄﾞ｢0｣から諸口ｺｰﾄﾞ取得
	with Qe do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                         ');
		SQL.Add('   SubCode                     ');	//	細目ｺｰﾄﾞ
		SQL.Add('FROM KmkMA                     '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn   = 2          '); //	ﾏｽﾀ区分		 (2:細目科目)
		SQL.Add('  AND SumKbn      = 0          ');	//	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn     = 0          ');	//	ﾚｺｰﾄﾞ区分	 (0:正規ﾚｺｰﾄﾞ)
		SQL.Add('  AND GCode       = :GCode     ');	//	外部ｺｰﾄﾞ
        SQL.Add('  AND SyokuchiKbn = 1          ');	//	諸口区分

		ParamByName('GCode').AsInteger  :=  CODE;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(Qe);
			Close;
			Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			result := GetFld('SubCode').AsInteger;
		end;
	end;
	Qe.Close;
	Qe.Free;

end;

//************************************************************************
//*		Component		:	EBunCode ( TMNumEdit )
//*							分析ｺｰﾄﾞの値が変った時
//*		Event			:	OnChange
//*		Name			:	H.Endo（開発第2Ｇ）
//************************************************************************
procedure TJNTCRP009001f.EBunCodeChange(Sender: TObject);
begin
	// 実在科目の詳細表示時
	if MTab_Select.Items.Selected = 0 then
	begin
		// 分析ｺｰﾄﾞが｢0:非会計科目｣の時
		if EBunCode.AsInteger = 0 then
		begin
			// 集計単位区分関係表示
			LAddUnit.Visible	 := TRUE;	// 集計単位区分(ﾀｲﾄﾙ)
			EAddUnit.Visible	 := TRUE;	// 集計単位区分(入力)
			LAddUnitName.Visible := TRUE;	// 集計単位区分(名称)

            //--- <057> St -----
            if (m_FreeLayout = True) then
            begin
                LSyousu     .Visible := TRUE;
                ESyousuten  .Visible := TRUE;
                LSyousuKeta .Visible := TRUE;
                LSyousu     .Left := 420; LSyousu    .Top := 186;
                ESyousuten  .Left := 540; ESyousuten .Top := 184;
                LSyousuKeta .Left := 564; LSyousuKeta.Top := 186;
            end;
            //--- <057> Ed -----
		end
		else
		begin
			// 集計単位区分関係非表示
			LAddUnit.Visible	 := FALSE;	// 集計単位区分(ﾀｲﾄﾙ)
			EAddUnit.Visible	 := FALSE;	// 集計単位区分(入力)
			LAddUnitName.Visible := FALSE;	// 集計単位区分(名称)

            //--- <057> ST -----
            LSyousu     .Visible := FALSE;
            ESyousuten  .Visible := FALSE;
            LSyousuKeta .Visible := FALSE;
            //--- <057> Ed -----
		end;
	end
	// 科目別補助、合計の詳細表示時
	else
	begin
		// 集計単位区分関係非表示
		LAddUnit.Visible	 := FALSE;	// 集計単位区分(ﾀｲﾄﾙ)
		EAddUnit.Visible	 := FALSE;	// 集計単位区分(入力)
		LAddUnitName.Visible := FALSE;	// 集計単位区分(名称)

        //--- <057> ST -----
        LSyousu     .Visible := FALSE;
        ESyousuten  .Visible := FALSE;
        LSyousuKeta .Visible := FALSE;
        //--- <057> Ed -----
	end;
end;

//************************************************************************
//*		Component		:	EAddUnit ( TMNumEdit )
//*							集計単位区分
//*		Event			:	OnExit
//*		Name			:	H.Endo（開発第2Ｇ）
//************************************************************************
procedure TJNTCRP009001f.EAddUnitExit(Sender: TObject);
begin
	// 集計単位区分内容取得
	if GetList(EAddUnit,LAddUnitName) = FALSE then
	begin
		Beep;
		EAddUnit.SetFocus;
	end;
end;

//**********************************************************************
//*		Proccess	:	排他制御処理
//*		Name		:	H.Endo
//*		Date		:	2003/06/26
//*		Parameter	:	なし
//*		Return		:	他で使われていない(0)/使われている(99)
//*		History		:
//**********************************************************************
function TJNTCRP009001f.fnExcept():Integer;
{
var
	iRet	:	Integer;
	bFlg	:	Boolean;
}
begin

	result  := 0;
	cExcept := nil;
{
	bFlg    := FALSE;

	try
		cExcept := TJNTMASExceptIF.Init(m_pRec);
		// 勘定科目の排他情報ｾｯﾄ
		iRet := cExcept.SetExcept(501);
		if iRet <> JNTMAS_EXCEPT_RET_OK then
		begin
			MjsMessageBoxEx(AOwner, // <005>
                            '科目の排他制御でエラーが発生しました。',
                            '排他制御',
                            mjError,
                            mjOK,
                            mjDefOK
                           );
			bFlg   := TRUE;
			result := -1;
			exit;
		end;
		// 他で更新処理が流れていないかﾁｪｯｸ
		if (cExcept.Status100 = 1) or (cExcept.Status400 = 1) then
		begin
			bFlg   := TRUE;
			result := 99;
			exit;
		end;

		// 科目別補助の排他情報ｾｯﾄ
		iRet := cExcept.SetExcept(502);
		if iRet <> JNTMAS_EXCEPT_RET_OK then
		begin
			MjsMessageBoxEx(AOwner, // <005>
                            '科目別補助の排他制御でエラーが発生しました。',
                            '排他制御',
                            mjError,
                            mjOK,
                            mjDefOK
                           );
			bFlg   := TRUE;
			result := -1;
			exit;
		end;
		// 他で更新処理が流れていないかﾁｪｯｸ
		if (cExcept.Status100 = 1) or (cExcept.Status400 = 1) then
		begin
			bFlg   := TRUE;
			result := 99;
			exit;
		end;

	finally
		// 排他情報ﾘｾｯﾄ
		if (cExcept <> nil) and (bFlg = TRUE) then
		begin
			cExcept.ResetTerm;
			cExcept.Free;
			cExcept := nil;
		end;
	end;
}
end;

//**********************************************************************
//*		Proccess	:	Drag、Copy時の体系を配列に取得
//*		Name		:	H.Endo
//*		Date		:	2003/07/28
//*		Parameter	:	MODE	:	ｺﾋﾟｰ(ACCESS_COPY)/ﾄﾞﾗｯｸ(ACCESS_DRAGANDDROP)
//*						Code	:	元ｺｰﾄﾞ
//*						Index	:	ﾄﾞﾗｯｸされたNodeのNo(ﾄﾞﾗｯｸ時に使用)
//*		Return		:	なし
//*		History		:
//**********************************************************************
//<097> DEL procedure  TJNTCRP009001f.fnGetSystem(MODE,Code,Index: Integer);
procedure  TJNTCRP009001f.fnGetSystem(MODE,Code,Index: Integer; ParentCode: Integer=0);  //<097> ADD
var
	i		:	Integer;
	wkRec	:	^TaikeiRec;
	wRec	:	^TaikeiRec;
	cNode	:	TTreeNode;
begin
    wRec := Nil;

	SetLength(m_DbAddChk,0);	// 配列をｸﾘｱ

	for i:=0 to TreeView.Items.Count-1 do
    begin
		wkRec := TreeView.Items[i].Data;

		if (wkRec.GCode = Code) and (wkRec.MasKbn = 1) then						//HIS0108(条件｢wkRec.MasKbn = 1｣追加)
		begin
			// Dragの時で処理対象のｺｰﾄﾞと一致した時
			if (MODE = ACCESS_DRAGANDDROP) and (i = Index) then continue;

			// 処理対象のｺｰﾄﾞと一致した時親の情報を取得
			cNode := TreeView.Items[i].Parent;
//<097> ADD
            if cNode <> nil then
                wRec := cNode.Data;

            if ((ParentCode <> 0) and (cNode <> nil))then
            begin
                // インデックスが違っても親が一緒ならcontinue
                if ParentCode = wRec.GCode then continue;
            end;
//<097> ADD
			while cNode <> nil do
			begin
				wRec  := cNode.Data;
				SetLength(m_DbAddChk,Length(m_DbAddChk)+1);
				m_DbAddChk[Length(m_DbAddChk)-1] := wRec.GCode;
				cNode := cNode.Parent;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:   2重加算ﾁｪｯｸ処理
//*		Name		:	H.Endo
//*		Date		:	2003/07/28
//*		Parameter	:	MODE	:	ｺﾋﾟｰ(ACCESS_COPY)/ﾄﾞﾗｯｸ(ACCESS_DRAGANDDROP)
//*						cNode	:	貼付先/DROP先のNode
//*		Return		:	正常(0)/異常(-1)
//*		History		:
//**********************************************************************
function TJNTCRP009001f.fnDoubleAddCheck(MODE: Integer; cNode: TTreeNode):Integer;
var
	i,j		:	Integer;
	wkRec	:	^TaikeiRec;
	iCount	:	Integer;
	sMsg	:	String;
begin
	Result := 0;
	iCount := 0;

	case MODE of
		ACCESS_COPY:		sMsg := '２重加算の為コピー';
		ACCESS_DRAGANDDROP:	sMsg := '２重加算の為移動';
	end;

	// 2重加算ﾁｪｯｸ用配列の初期化(損益科目ｺｰﾄﾞが0の為ありえない7桁のMAXの数値を入れている)	HIS0013
	for i := 1 to 20 do
	begin
//		aDoubleAddCheck[COPYSAKI][i] :=	9999999;
		aDoubleAddCheck[COPYSAKI][i] :=	-1;		//<086>
	end;

	wkRec := cNode.Data;
	if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then	//	ｺﾋﾟｰ先が実在時
    	cNode	:=	cNode.Parent;
	while cNode <> nil do
	begin
		wkRec  := cNode.Data;
		iCount := iCount + 1;
		aDoubleAddCheck[COPYSAKI][iCount] := wkRec.GCode;
		cNode  := cNode.Parent;
	end;

	for i:=1 to 20 do												//	ｺﾋﾟｰ先の配列
	begin
//		if (aDoubleAddCheck[COPYSAKI][i] = 9999999) then			//	ｺﾋﾟｰ先Data終了(初期値で設定されている数値)
		if (aDoubleAddCheck[COPYSAKI][i] = -1) then					//	ｺﾋﾟｰ先Data終了(初期値で設定されている数値) <086>
			break;

		for j:=0 to Length(m_DbAddChk)-1 do
		begin
			// ｺﾋﾟｰ/Drop先の親ｺｰﾄﾞの中にｺﾋﾟｰ/Drag元の親ｺｰﾄﾞと同一のｺｰﾄﾞがあった時(2重加算時)
			if (aDoubleAddCheck[COPYSAKI][i] = m_DbAddChk[j]) then
			begin
				//	･･･することができません
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    			MjsMessageBoxEx(AOwner, // <005>
                                sMsg+ MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
				Result := -1;
				exit;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	番号管理の画面操作
//*		Name		:	H.Endo
//*		Date		:	2003/11/10
//*		Parameter	:	MODE	:	合計	   : GOUKEI
//*									実在	   : ZITSUZAI
//*									科目別補助 : SAIMOKU
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure  TJNTCRP009001f.fnNumberDspControl(MODE: Integer);
var
	bDspFlg	: Boolean;
begin
	case MODE of
		// 実在
		ZITSUZAI:
		begin
			// 番号管理採用区分｢なし｣以外
			if m_NumberUseKbn <> 0 then
			begin
				Panel_Number.Visible := TRUE;
				Panel_Denshi.Top     := Panel_Number.Height+Panel_Number.Height;//HIS0125
				Panel_Denshi.Left    := 0;

				// 番号1+番号2の時
				if m_NumberUseKbn = 2 then
					bDspFlg := TRUE
				else
					bDspFlg := FALSE;

				LTitleNumber2.Visible  := bDspFlg;
				ComboNumber2.Visible   := bDspFlg;
				LInputNumber2.Visible  := bDspFlg;
				LNameNumber2.Visible   := bDspFlg;
				ENumber2.Visible       := bDspFlg;
				LNumber2.Visible       := bDspFlg;
				LDspKbnNumber2.Visible := bDspFlg;
				EDspNumber2.Visible    := bDspFlg;
				LDspNumber2.Visible    := bDspFlg;
			end
			else
			begin
				Panel_Number.Visible := FALSE;
				Panel_Denshi.Top     := Panel_Number.Height;					//HIS0125
				Panel_Denshi.Left    := 0;
			end;
		end;
		// 実在以外
		else
		begin
			Panel_Number.Visible := FALSE;
			Panel_Denshi.Top     := Panel_Number.Height;						//HIS0125
			Panel_Denshi.Left    := 0;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	番号管理の初期処理
//*		Name		:	H.Endo
//*		Date		:	2003/11/10
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure  TJNTCRP009001f.fnNumberControlInit();
var
	Qe	: TMQuery;
begin
	Qe := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );		//	DBとMQueryの接続

	// 番号管理採用区分取得
	fnGetKbnInfo(Qe);
	// 名称Combo内容作成
	fnGetNamInfo(Qe);

	Qe.Close;
	Qe.Free;
end;

//**********************************************************************
//*		Proccess	:	区分情報(採用区分)から情報を取得
//*		Name		:	H.Endo
//*		Date		:	2003/11/10
//*		Parameter	:	Qe	:	接続済みQuery
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure  TJNTCRP009001f.fnGetKbnInfo(Qe: TMQuery);
begin
	m_NumberUseKbn := 0;

	with Qe do
	begin
		Close();
		SQL.Clear;
		SQL.ADD('SELECT GnPuKbn12 FROM KbnInfo WHERE RecKbn = 1');
		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(Qe);
			Exit;
		end;

		if EOF <> TRUE then	//	ﾚｺｰﾄﾞがあったら
		begin
			m_NumberUseKbn := GetFld('GnPuKbn12').AsInteger;				// 番号管理採用区分
		end;
        // ↓↓↓<065>
        Close();
        SQL.Clear();
        SQL.Add('Select GnPuKbn2 From KbnInfo Where RecKbn = 18');
        if (Open() = false) then
        begin
            ErrorMessageDsp(Qe);
            Exit;
        end;

        if ( Eof <> True) then
        begin
            // 0:なし 1:自動付番(会社別) 2:(部署別) 3:(ｸﾞﾙｰﾌﾟ会社別)
            m_NumberAutoKbn := GetFld('GnPuKbn2').AsInteger;
        end;
        // ↑↑↑<065>
	end;
end;

//**********************************************************************
//*		Proccess	:	名称Comboの内容取得
//*		Name		:	H.Endo
//*		Date		:	2003/11/10
//*		Parameter	:	Qe	:	接続済みQuery
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure  TJNTCRP009001f.fnGetNamInfo(Qe: TMQuery);
var
	nCode	: Integer;
	nCnt	: Integer;
	nMax	: Integer;
begin
	m_NameList.Clear;
	m_NameList.Add;
	m_NameList.Items[0].No   := 0;
    m_NameList.Items[0].Name := '標準';

    {//<114>DEL↓
	nCnt := 1;
	for nCode:= 501 to 599 do
	begin
		with Qe do
		begin
			Close();
			SQL.Clear;
			SQL.ADD('SELECT NamValue FROM NamInfo WHERE NamCode = :NamCD');
			ParamByName('NamCD').AsInteger := nCode;
			//	ｴﾗｰの判定
			if Open = FALSE then
			begin
				ErrorMessageDsp(Qe);
				Exit;
			end;

			if EOF <> TRUE then	//	ﾚｺｰﾄﾞ存在
			begin
       			m_NameList.Add;
				m_NameList.Items[nCnt].No   := nCode;
                m_NameList.Items[nCnt].Name := GetFld('NamValue').AsString;
				nCnt := nCnt+1;
			end;
		end;
	end;
    }//<114>DEL↑
    //<114>ADD↓
    with Qe do
    begin
    	Close;
        SQL.Clear;
        SQL.Add(' SELECT NamValue FROM NamInfo ');
        SQL.Add(' WHERE NamCode BETWEEN 501 AND 599 ');
        SQL.Add(' ORDER BY NamCode ');

        if not Open then
        begin
            ErrorMessageDsp(Qe);
            Exit;
        end;

        nCnt	:= 1;
        nCode	:= 501;
        while not Eof do
        begin
        	m_NameList.Add;
            m_NameList.Items[nCnt].No	:= nCode;
            m_NameList.Items[nCnt].Name := GetFld('NamValue').AsString;
            Inc(nCode);
            Inc(nCnt);
            Next;
        end;
    end;
    //<114>ADD↑

	ComboNumber1.Clear;
	ComboNumber2.Clear;
	nMax := GetHigh(m_NameList);
	for nCnt:=0 to nMax do
	begin
		ComboNumber1.Items.Add(m_NameList[nCnt].Name);	// 番号1名称Combo
		ComboNumber2.Items.Add(m_NameList[nCnt].Name);	// 番号2名称Combo
	end;
end;

//**********************************************************************
//*		Proccess	:   名称情報取得
//*		Name		:	H.Endo
//*		Date		:	2003/11/11
//*		Parameter	:	FLG		:	ｺｰﾄﾞからIndexNo取得(TRUE)
//*						Int		:	ｺｰﾄﾞ
//*		Return		:	IndexNo
//*		History		:
//**********************************************************************
function TJNTCRP009001f.fnGetNameInfo(Int: Integer):Integer;
var
	iMax	: Integer;
	i		: Integer;
begin
	Result := 0;
	iMax := GetHigh(m_NameList);
	for i:=0 to iMax do
	begin
		if m_NameList[i].No = Int then
		begin
			Result := i;
			break;
		end;
	end;
end;

//************************************************************************
//*		Component		:	ENumber1,2 ( TMNumEdit )
//*
//*		Event			:	OnExit
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.CmnENumberExit(Sender: TObject);
var
	cmpLabel: TMLabel;
begin
    cmpLabel := Nil;

	//	終了ﾎﾞﾀﾝが押された時または切出/埋込が押された時
	if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then
		exit;

	if TMNumEdit(Sender).Name = ENumber1.Name then			// 番号1入力区分
	begin
		cmpLabel := LNumber1;

		case TMNumEdit(Sender).AsInteger of
			0:   fnInputControl(DISPOSE_NUM1);				// 番号1入力区分
			5,6: fnInputControl(DISPOSE_NUM1FUZAN);			// 番号1入力区分(負残入力)
		end;
	end
	else if TMNumEdit(Sender).Name = EDspNumber1.Name then	// 番号1初期表示区分
		cmpLabel := LDspNumber1
	else if TMNumEdit(Sender).Name = ENumber2.Name then		// 番号2入力区分
	begin
		cmpLabel := LNumber2;

		case TMNumEdit(Sender).AsInteger of
			0:   fnInputControl(DISPOSE_NUM2);				// 番号2入力区分
			5,6: fnInputControl(DISPOSE_NUM2FUZAN);			// 番号2入力区分(負残入力)
		end;
	end
	else if TMNumEdit(Sender).Name = EDspNumber2.Name then	// 番号2初期表示区分
		cmpLabel := LDspNumber2
	else if TMNumEdit(Sender).Name = ETotalKbn.Name then	// 同一番号集計区分
		cmpLabel := LTotalKbnName;

	// 番号管理内容
	if GetList(Sender,cmpLabel) = FALSE then
	begin
		Beep;
		TMNumEdit(Sender).SetFocus;
	end;
end;

//************************************************************************
//*		Component		:	ENumber1,2 ( TMNumEdit )
//*
//*		Event			:	OnChange
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.CmnNumberChange(Sender: TObject);
var
	cmnEdit	: TObject;
	cmnCombo: TMComboBox;
begin
    cmnEdit  := Nil;
    cmnCombo := Nil;

	if TMNumEdit(Sender).Name = ENumber1.Name then					// 番号1入力区分
	begin
		cmnEdit  := EDspNumber1;
		cmnCombo := ComboNumber1;
	end
	else if TMNumEdit(Sender).Name = ENumber2.Name then				// 番号2入力区分
	begin
		cmnEdit  := EDspNumber2;
		cmnCombo := ComboNumber2;
	end;

	case TMNumEdit(Sender).AsInteger of
		0:   TMComboBox(cmnCombo).Enabled := FALSE					// 初期表示区分使用不可
		else TMComboBox(cmnCombo).Enabled := TRUE;					// 初期表示区分使用可
	end;

	case TMNumEdit(Sender).AsInteger of
		0,5,6: TMNumEdit(cmnEdit).Enabled := FALSE					// 初期表示区分使用不可
// <065>		else   TMNumEdit(cmnEdit).Enabled := TRUE;			// 初期表示区分使用可
        // ↓↓↓<065>
        else
        begin
            TMNumEdit(cmnEdit).Enabled := TRUE;					    // 初期表示区分使用可

            if TMNumEdit(Sender).Name = ENumber1.Name then          // 処理表示区分ﾘｽﾄ再作成
                    DspNumberListremake(1)
            else    DspNumberListremake(2);
        end;
        // ↑↑↑<065>
	end;

	if (ENumber1.AsInteger = 0) and (ENumber2.AsInteger = 0) then
		ETotalKbn.Enabled := FALSE									// 同一番号集計区分使用不可
	else
		ETotalKbn.Enabled := TRUE;									// 同一番号集計区分使用可

	if TMNumEdit(Sender).Name = ENumber1.Name then					// 番号1入力区分
	begin
		if TMNumEdit(Sender).AsInteger = 0 then
        begin
			ENumber2.Enabled       := FALSE;
			ComboNumber2.Enabled   := FALSE;
			EDspNumber2.Enabled    := FALSE;
			ETotalKbn.Enabled      := FALSE;
		end
		else
		begin
			ENumber2.Enabled     := TRUE;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:   入力値の制御
//*		Name		:	H.Endo
//*		Date		:	2003/12/01
//*		Parameter	:	KBN	:	処理区分	DISPOSE_NUM1		番号1入力区分
//*							 				DISPOSE_NUM1FUZAN	番号1入力区分(負残)
//*							 				DISPOSE_NUM2		番号2入力区分
//*							 				DISPOSE_NUM2FUZAN	番号2入力区分(負残)
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.fnInputControl(KBN: Integer);
begin
	if (KBN = DISPOSE_NUM1) then
	begin
		ComboNumber1.ItemIndex := 0;
		ENumber2.Value := 0;
		GetList(ENumber2,LNumber2);
		ETotalKbn.Value := 0;
		GetList(ETotalKbn,LTotalKbnName);
	end;

	if (KBN = DISPOSE_NUM1) or (KBN = DISPOSE_NUM1FUZAN) then
	begin
		EDspNumber1.Value := 0;
		GetList(EDspNumber1,LDspNumber1);
	end;

	if (KBN = DISPOSE_NUM1) or (KBN = DISPOSE_NUM2) then
		ComboNumber2.ItemIndex := 0;

	if (KBN = DISPOSE_NUM1) or (KBN = DISPOSE_NUM2) or (KBN = DISPOSE_NUM2FUZAN) then
	begin
		EDspNumber2.Value := 0;
		GetList(EDspNumber2,LDspNumber2);
	end;
end;
//--- HIS0109 Ed -----

//--- HIS0113 St ----------
//**********************************************************************
//*		Proccess	:	Drag、Copy時に親情報を取得(公益時)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/02/04
//*		Parameter	:	Code	:	元ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure  TJNTCRP009001f.fnGetParentInfo(NCode: Extended);
var
	Qe	:	TMQuery;
begin
	SetLength(m_SameParentChk,0);	// 配列をｸﾘｱ

	Qe := TMQuery.Create( Self );					        // MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );		// DBとMQueryの接続

	with Qe do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT SumNCode FROM KmkTree               ');
        SQL.Add('WHERE MasterKbn = 1 AND BasedNCode = :BC   ');

		ParamByName('BC').AsFloat := NCode;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(Qe);
			Close;
			Free;
   		    Exit;
		end;

		while EOF <> TRUE do
		begin
			SetLength(m_SameParentChk,Length(m_SameParentChk)+1);
			m_SameParentChk[Length(m_SameParentChk)-1] := GetFld('SumNCode').AsFloat;	// 加算先内部ｺｰﾄﾞ
			Next;
		end;
	end;

	Qe.Close;
	Qe.Free;

end;

//**********************************************************************
//*		Proccess	:   同一親ﾁｪｯｸ処理(公益時)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/02/04
//*		Parameter	:	MODE	:	ｺﾋﾟｰ(ACCESS_COPY)/ﾄﾞﾗｯｸ(ACCESS_DRAGANDDROP)
//*						cNode	:	貼付先/DROP先のNode
//*		Return		:	正常(0)/異常(-1)
//*		History		:
//**********************************************************************
function TJNTCRP009001f.fnSameParentCheck(MODE: Integer; cNode: TTreeNode):Integer;
var
	i		:	Integer;
	wkRec	:	^TaikeiRec;
	iCount	:	Integer;
	sMsg	:	String;
begin
	Result := 0;
	iCount := 0;

	case MODE of
		ACCESS_COPY:		sMsg := '同一コードが存在する為貼り付けを';
		ACCESS_DRAGANDDROP:	sMsg := '同一コードが存在する為移動';
	end;

	wkRec := cNode.Data;
	if (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then	//	ｺﾋﾟｰ先が実在時
    	cNode	:=	cNode.Parent;

//   	cNode := cNode.Parent;
	wkRec := cNode.Data;

	for i:=0 to Length(m_SameParentChk)-1 do
	begin
		// ｺﾋﾟｰ/Drop先の親ｺｰﾄﾞがｺﾋﾟｰ/Drag元の親ｺｰﾄﾞと同一のｺｰﾄﾞがあった時
		if (wkRec.NCode = m_SameParentChk[i]) then
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
   			MjsMessageBoxEx(AOwner, // <005>
                            sMsg+ MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
			Result := -1;
			exit;
		end;
	end;
end;
//--- HIS0113 Ed ----------

//--- HIS0117 St ----------
//**********************************************************************
//*		Proccess	:	諸口ﾌﾗｸﾞをｸﾘｱ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/03/12
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		Comment
//*			科目別補助の削除時に諸口が削除された時に科目の科目別補助採用区分を
//*			なしとしているが、仕訳で諸口を使用している状態で科目別補助の削除を
//*			行うと、諸口を削除するﾌﾗｸﾞが｢TRUE｣のままとなってしまい、次に科目別補助
//*			の削除を行うと、科目別補助が存在していても採用区分が｢なし」となって
//*			しまうので、ｴﾗｰ時はFALSEを設定する
//**********************************************************************
procedure  TJNTCRP009001f.fnFlgClear();
var
	cNode		:	TTreeNode;
	wkRec		:	^TaikeiRec;
begin
//==============================================================================
//	HIS0119の対応で最後の科目別補助が削除されたら諸口を削除するという動きから
//	諸口は削除せず、諸口のみとなった時に削除するように変更したのでこの処理は
//	無意味となってしまったのでexitする
//==============================================================================
exit;	//HIS0119
	if (bSyokuchiFlag = TRUE) then
		bSyokuchiFlag := FALSE;

	// Treeから削除してしまった時戻す
	if m_Save.Node <> nil then
	begin
		if m_Save.NodeOya <> nil then
		begin
			New(wkRec);
            wkRec.NCode         :=  m_Save.Taikei.NCode;
            wkRec.CNCode        :=  m_Save.Taikei.CNCode;
			wkRec.GCode		    :=	m_Save.Taikei.GCode;
            wkRec.SubCode       :=  m_Save.Taikei.SubCode;
			wkRec.Kbn		    :=	m_Save.Taikei.Kbn;
			wkRec.KoteiKbn	    :=	m_Save.Taikei.KoteiKbn;
			wkRec.MasKbn	    :=	m_Save.Taikei.MasKbn;
			wkRec.Name		    :=	m_Save.Taikei.Name;
			wkRec.AddKbn	    :=  m_Save.Taikei.AddKbn;
			wkRec.ChildKbn	    :=	m_Save.Taikei.ChildKbn;
			wkRec.NotAdd	    :=	m_Save.Taikei.NotAdd;
            wkRec.Syokuchi      :=	m_Save.Taikei.Syokuchi;
            wkRec.CodeAttr      :=	m_Save.Taikei.CodeAttr;
            wkRec.CodeDigit     :=	m_Save.Taikei.CodeDigit;
			CNode               :=  TreeView.Items.AddChildobject(m_Save.NodeOya,m_Save.DspName,m_Save.Taikei);
            CNode.ImageIndex    :=  3;
			Cnode.SelectedIndex :=  10;
		end;
	end;

	m_Save.Node    := nil;
	m_Save.NodeOya := nil;

	if m_ErrorFlg = 1 then
		m_ErrorFlg := -1;

	MTab_N.Items.Selected := 1;		//	細目科目Gridへ
	GridAgainDsp(DELETE,0);			//	再表示処理
end;


//**********************************************************************
//*		Proccess	:	検索対象の科目が存在する分類をチェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/08
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//**********************************************************************
procedure TJNTCRP009001f.fnBunruiCheck();
var
	Qe		    :   TMQuery;
    DmqKmkMA    :   TMQuery;    // <006>
	iTopCD	    :   Extended;
    iKmkNCode   :   Extended;   // <006>
	i		    :   Integer;
	iSumKbn	    :   Byte;
	aSoneki	    :   array[0..15] of Integer;
    iSumKbn2    :   Integer;  //<092> ADD
    iDCKbn      :   Integer;  //<092> ADD
    iBPKbn      :   Integer;  //<092> ADD
begin
	// 初期処理
	m_SearchInfo.aTaikei[0] := FALSE;	// 資産
	m_SearchInfo.aTaikei[1] := FALSE;	// 負債・資本
	m_SearchInfo.aTaikei[2] := FALSE;	// 損益
	m_SearchInfo.aTaikei[3] := FALSE;	// 製造

	// 損益の特殊科目ｺｰﾄﾞを配列にｾｯﾄ
	aSoneki[0]  := URIAGE;			// 売上高
	aSoneki[1]  := URIAGEGENKA;		// 売上原価
	aSoneki[2]  := URIAGESOURI;		// 売上総利益
	aSoneki[3]  := HANBAI_IPAN;		// 販売費及び一般管理費
	aSoneki[4]  := EIGYOU_RI;		// 営業利益
	aSoneki[5]  := KEIZYOU_RI;		// 経常利益
	aSoneki[6]  := ZEIHIKIMAE;		// 税引前利益
	aSoneki[7]  := HOUZIN;			// 法人税等
	aSoneki[8]  := HOUZINTYOUSEI;	// 法人税調整額
	aSoneki[9]  := TOUKIRIEKI_SO;	// 当期利益
	aSoneki[10] := ZENKIKURIKOSHI;	// 前期繰越利益
	aSoneki[11] := KANENDO;			// 過年度税効果調整額
	aSoneki[12] := MOKUTEKI;		// 目的積立金取崩
	aSoneki[13] := TYUKAN;			// 中間配当金
	aSoneki[14] := RIEKIZYUNBI;		// 利益準備金
	aSoneki[15] := TOUKIMISYO;		// 当期未処分利益

    // MQueryの構築
	Qe          :=  TMQuery.Create( Self );
    DmqKmkMA    :=  TMQuery.Create( Self ); // <006>
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqKmkMA );    // <006>

    // <006>内部ｺｰﾄﾞの取得
    with DmqKmkMA do
    begin
        Close();
        SQL.Clear();
//<092> DEL        SQL.Add('SELECT NCODE FROM KmkMA    '
        SQL.Add('SELECT NCODE,SumKbn,DCKbn,BPKbn FROM KmkMA    '  //<092> ADD
            +   'WHERE  (GCODE   = :CODE)   '
            +   '  AND  (RDelKbn = 0)       ');
        ParamByName('CODE').AsInteger   :=  m_SearchInfo.iKmkCD;
//<092> MOD St
//        Open();
        if Open() = False then
        begin
            ErrorMessageDsp(DmqKmkMA);
            DmqKmkMA.Close();
            DmqKmkMA.Free();
            Qe.Close();
            Qe.Free();
            Exit;
        end;
//        if not EOF then
//            iKmkNCode   :=  FieldByName('NCODE').AsFloat;
        if not EOF then
        begin
            iKmkNCode   :=  FieldByName('NCODE').AsFloat;
            iSumKbn2    :=  FieldByName('SumKbn').AsInteger;
            iDCKbn      :=  FieldByName('DCKbn').AsInteger;
            iBPKbn      :=  FieldByName('BPKbn').AsInteger;
        end
        else
        begin
            iKmkNCode := 0;
            iSumKbn2  := 0;
            iDCKbn    := 0;
            iBPKbn    := 0;
        end;
//<092> MOD Ed
    end;
    DmqKmkMA.Close();
    DmqKmkMA.Free();

	try
		// 資産
		iTopCD := GetKmkInfo(SHISAN_BU,1,iSumKbn);
        // 特殊科目情報から資産の科目ｺｰﾄﾞ取得
//<092> MOD St
//		m_SearchInfo.aTaikei[0] := fnSearchCheck(Qe,iTopCD,iKmkNCode);  // <006>
        if iSumKbn2 = 0 then
            m_SearchInfo.aTaikei[0] := fnSearchCheck(Qe,iTopCD,iKmkNCode)
        else
            m_SearchInfo.aTaikei[0] := fnSearchCheck2(Qe,iTopCD,iKmkNCode);
//<092> MOD Ed

		// 負債・資本
		iTopCD := GetKmkInfo(FUSAI_BU,1,iSumKbn);
		// 特殊科目情報から負債･資本の科目ｺｰﾄﾞ取得
//<092> MOD St
//		m_SearchInfo.aTaikei[1] := fnSearchCheck(Qe,iTopCD,iKmkNCode);  // <006>
        if iSumKbn2 = 0 then
            m_SearchInfo.aTaikei[1] := fnSearchCheck(Qe,iTopCD,iKmkNCode)
        else
            m_SearchInfo.aTaikei[1] := fnSearchCheck2(Qe,iTopCD,iKmkNCode);
//<092> MOD Ed

		// 損益
		for i:=0 to 15 do
		begin
			if m_SearchInfo.aTaikei[2] = TRUE then
				break;
			iTopCD := GetKmkInfo(aSoneki[i],1,iSumKbn);
			// 特殊科目情報から損益の科目ｺｰﾄﾞ取得
//<092> MOD St
//			m_SearchInfo.aTaikei[2] := fnSearchCheck(Qe,iTopCD,iKmkNCode);  // <006>
        if iSumKbn2 = 0 then
            m_SearchInfo.aTaikei[2] := fnSearchCheck(Qe,iTopCD,iKmkNCode)
        else
            m_SearchInfo.aTaikei[2] := fnSearchCheck2(Qe,iTopCD,iKmkNCode);
//<092> MOD Ed
		end;

		// 製造
		iTopCD := GetKmkInfo(SEIZOU_BU,1,iSumKbn);
		// 特殊科目情報から製造の科目ｺｰﾄﾞ取得
//<092> MOD St
//		m_SearchInfo.aTaikei[3] := fnSearchCheck(Qe,iTopCD,iKmkNCode);  // <006>
        if iSumKbn2 = 0 then
            m_SearchInfo.aTaikei[3] := fnSearchCheck(Qe,iTopCD,iKmkNCode)
        else
            m_SearchInfo.aTaikei[3] := fnSearchCheck2(Qe,iTopCD,iKmkNCode);
//<092> MOD Ed

	finally
		Qe.Close;
		Qe.Free;
	end;
//<092> ADD St
    // はぐれ科目の可能性があるので科目分類をBPKbnとDCKbnで判定する
    if (m_SearchInfo.aTaikei[0] = False) and
       (m_SearchInfo.aTaikei[1] = False) and
       (m_SearchInfo.aTaikei[2] = False) and
       (m_SearchInfo.aTaikei[3] = False) Then
    begin
        if (iDCKbn = 1) and (iBPKbn = 0) then    // 負残、B/S科目
            m_SearchInfo.aTaikei[1] := True
        else if (iDCKbn = 0) and (iBPKbn = 0) then  // 正残、B/S科目
            m_SearchInfo.aTaikei[0] := True
        else
            m_SearchInfo.aTaikei[2] := True;        // P/L科目
    end;
//<092> ADD Ed
end;

//**********************************************************************
//*		Proccess	:	KmkTree2からどの分類に検索対象のｺｰﾄﾞがあるかﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/08
//*		Parameter	:	TopCD	:	TreeのTopCD
//*						KmkCD	:	検索対象ｺｰﾄﾞ
//*		Return		:	有(TRUE)/無(FALSE)
//*		History		:
//**********************************************************************
function TJNTCRP009001f.fnSearchCheck(Qe: TMQuery; TopCD: Extended; KmkNCD: Extended): Boolean; // <006>
begin

	Result  :=  FALSE;

	with Qe do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT * FROM KmkTree2     '
            +   'WHERE  (MasterKbn  = 1)    '
            +   '  AND  (SumNCode   = :SC)  '
            +   '  AND  (BasedNCode = :BC)  ');  // <006>

		ParamByName('SC').AsFloat   :=  TopCD;
		ParamByName('BC').AsFloat   :=  KmkNCD; // <006>

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(Qe);
   		    Exit;
		end;

        // ﾚｺｰﾄﾞ存在
		if ( EOF <> TRUE ) then
			Result := TRUE;
	end;

end;

//**********************************************************************
//*		Proccess	:	新規追加の細目内部ｺｰﾄﾞ取得
//*		Name		:	K.Takahashi
//*		Date		:	2005/02/07
//*		Parameter	:	なし
//*		Return		:	Integer　内部ｺｰﾄﾞ(異常：-1)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.GetNewCNCode():Extended;
var
	QueryWk : TMQuery;
begin
    Result := -1;
    										//MQueryの構築
	QueryWk := TMQuery.Create( Self );
	try
// <063> MOD start
											//DBとMQueryの接続
//    	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryWk );

											// 自社が子会社だった場合
	    if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	    begin								// 親会社DBとMQueryの接続
			MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, QueryWk);
	    end
		else
		begin								// 自社
	    	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryWk );
		end;
// <063> MOD end

	    QueryWk.Close;
    	QueryWk.SQL.Clear;
	    QueryWk.SQL.ADD('Select MAX(CNCode) as MaxCNcode From KMKMA');

        try
       	    QueryWk.Open;
        except
		    ErrorMessageDsp(QueryWk);
			Exit;
        end;

    	if QueryWk.Eof <> TRUE then
	    begin
                                            // 内部ｺｰﾄﾞの最大+1
    		Result := QueryWk.GetFld('MaxCNcode').AsFloat + 1;
        end
        else
        begin
            Result := 1;                    // 1ｵﾘｼﾞﾝ
	    end;
    finally
	    QueryWk.Free;
    end;
end;

function TJNTCRP009001f.GetNewNCode():Extended;
var
    QueryWk: TMQuery;
begin
    Result := -1;

    QueryWk := TMQuery.Create( Self );
	try
											//DBとMQueryの接続
// <063> MOD start
//    	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryWk );
											// 自社が子会社だった場合
	    if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	    begin								// 親会社DBとMQueryの接続
			MDataModule.SetDBInfoToQuery (m_SyncMaster.m_cPDBSelect, QueryWk);
	    end
		else
		begin								// 自社
	    	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryWk );
		end;
// <063> MOD end

	    QueryWk.Close;
    	QueryWk.SQL.Clear;
	    QueryWk.SQL.ADD('Select MAX(NCode) as MaxNcode From KMKMA');

        try
       	    QueryWk.Open;
        except
		    ErrorMessageDsp(QueryWk);
			Exit;
        end;

    	if QueryWk.Eof <> TRUE then
	    begin
                                            // 内部ｺｰﾄﾞの最大+1
    		Result := QueryWk.GetFld('MaxNcode').AsFloat + 1;
        end
        else
        begin
            Result := 1;                    // 1ｵﾘｼﾞﾝ
	    end;
    finally
	    QueryWk.Free;
    end;

end;

function TJNTCRP009001f.fnSaimokuSetAttr(m_Type:Integer; m_SCode: String; m_CodeAttr, m_CodeDigit: Integer):String;
begin

    Result  :=  '';

    case m_Type of
        0:  // 表示用
        begin
            // 数値属性
            if m_CodeAttr = 0 then
                Result   := ComArea.SetDspCodeAttr(m_SCode, m_CodeDigit, 0)
            // 数値(前ｾﾞﾛ有)属性
            else if m_CodeAttr = 1 then
                Result   := ComArea.SetDspCodeAttr(m_SCode, m_CodeDigit, 1)
            // ﾌﾘｰ属性
            else
                Result   := ComArea.SetDspCodeAttr(m_SCode, m_CodeDigit, 2);
        end;
        1:  // 検索用
        begin
            // 数値属性
            if m_CodeAttr in [0,1] then
                Result   := ComArea.SetDspCodeAttr(m_SCode, 16, 1)
            // ﾌﾘｰ属性
            else
                Result   := m_SCode;
        end;
    end;

end;


procedure TJNTCRP009001f.fnGetCodeAttr(NCode: Extended; var Attr, Digit: Integer);
var
    QueryWk :   TMQuery;
begin

    QueryWk := TMQuery.Create( Self );
    MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryWk );

    with QueryWk do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT                     '
            +   '    CodeAttr               '
            +   '   ,CodeDigit              '
            +   'FROM KmkMA                 '
            +   'WHERE Masterkbn = 1        '
            +   '  AND RDelKbn   = 0        '
            +   '  AND NCode     = :ExNCode '
            +   '  AND CNCode    = 0        ');

        ParamByName('ExNCode').AsFloat  :=  NCode;

        try
            QueryWk.Open;
        except
            ErrorMessageDsp(QueryWk);
        	Exit;
        end;

        if QueryWk.Eof <> TRUE then
        begin
            Attr    :=  GetFld('CodeAttr').AsInteger;
            Digit   :=  GetFld('CodeDigit').AsInteger;
        end;
    end;

    QueryWk.Close;
    QueryWk.Free;

end;

//**********************************************************************
//*		Proccess	:	fnGetGBunrui
//*		Name		:
//*		Date		:
//*		Parameter	:	strGCode    : 外部ｺｰﾄﾞ
//*                 :   iMasKbn     : ﾏｽﾀ区分
//*                 :   iNCode      : 内部ｺｰﾄﾞ格納用
//*                     strName     : 簡略名称格納用
//*		Return		:	TRUE: 正常 FALSE: 異常
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function  TJNTCRP009001f.fnGetGBunrui(strGCode: String; iMasKbn: Integer; var nNCode: Extended; var strName: String): Boolean;
var
	DmqData : TMQuery;

begin
	// 入力された外部ｺｰﾄﾞから略称と内部ｺｰﾄﾞを取得する
	strName	:= '';
	Result	:= FALSE;

	DmqData	:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, DmqData);   // DBとMQueryの接続

    try
        with (DmqData) do
        begin
            Close;

            SQL.Clear;
            SQL.ADD('SELECT NCode, Nmk FROM MMEISHO ');
            SQL.ADD('WHERE  SetNm = :iMasKbn and GCode = :strCode and RDelKbn = 0');
            ParamByName('iMasKbn').AsInteger := iMasKbn;
            ParamByName('strCode').AsString  := strGCode;
            Open;

            if  (not EOF) then
            begin
                nNCode  := GetFld('NCode').AsFloat;
                strName	:= GetFld('Nmk').AsString;

                Result	:= TRUE;
            end;

            Close;
        end;
    finally
    	DmqData.Free;
    end;

end;

//**********************************************************************
//*		Proccess	:	fnGetNBunrui
//*		Name		:
//*		Date		:
//*		Parameter	:	nNCode      : 内部ｺｰﾄﾞ
//*                 :   iMasKbn     : ﾏｽﾀ区分
//*                 :   strGCode    : 外部ｺｰﾄﾞ格納用
//*                     strName     : 簡略名称格納用
//*		Return		:	TRUE: 正常 FALSE: 異常
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function  TJNTCRP009001f.fnGetNBunrui(nNCode: Extended; iMasKbn: Integer; var strGCode, strName: String): Boolean;
var
	DmqData : TMQuery;

begin

	// 入力された内部ｺｰﾄﾞから略称と外部ｺｰﾄﾞを取得する
	strName	:= '';
    strGCode := '';                         // <028>
	Result	:= FALSE;

	DmqData	:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, DmqData);  // DBとMQueryの接続

    try
        with (DmqData) do
        begin
            Close;

            SQL.Clear;
            SQL.ADD('SELECT GCode, Nmk FROM MMEISHO ');
            SQL.ADD('WHERE  SetNm = :iMasKbn and NCode = :nNCode and RDelKbn = 0');

            ParamByName('iMasKbn').AsInteger := iMasKbn;
            ParamByName('nNCode').AsFloat    := nNCode;
            Open;

            if  (not EOF) then
            begin
                strGCode := GetFld('GCode').AsString;
                strName	 := GetFld('Nmk').AsString;

                Result	:= TRUE;
            end;

            Close;
        end;
    finally
    	DmqData.Free;
    end;

end;

// *** 付箋処理 *** //

//-----------------------------------------------------------------------------
// FusenInitialize()
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    : 付箋の初期化
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.FusenInitialize();
begin

	giFusenSelectColor  :=  0;

end;

//-----------------------------------------------------------------------------
// FusenDsp()
//      PARAM   : FusenKbn  :   付箋区分(1:赤,2:緑,3:青,4:ｵﾚﾝｼﾞ)
//                MemNO     :   付箋を選んだ場所
//      VAR     :
//      RETURN  :
//      MEMO    : 付箋表示処理
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.FusenDsp(FusenKbn: Integer; MemNO: Integer);
begin

	case MemNO of
		1:	//	合計科目
		begin
			case FusenKbn of	//	付箋区分
				0:	begin
						TGraphicField(MemGou.FieldByName('GFusen')).Clear;
						fnFusenArraySet(GOUKEI,
                                        MemGou.FieldByName('NCode').AsFloat,
                                        MemGou.FieldByName('CNCode').AsFloat,'');
					end;
{
				1:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(PM_FRE.Bitmap);
				2:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(PM_FGR.Bitmap);
				3:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(PM_FBU.Bitmap);
				4:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(PM_FOR.Bitmap);
} // <024>
                // ↓↓↓<024>
                1:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
				2:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
				3:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
				4:  TGraphicField(MemGou.FieldByName('GFusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
                // ↑↑↑<024>
			end;

            // ﾚｺｰﾄﾞの付箋情報を格納
			MemGou.FieldByName('GFusenInfo').AsInteger	:=	FusenKbn;
		end;
		2:	//	実在科目
		begin
			case FusenKbn of	//	付箋区分
				0:	begin
						TGraphicField(MemZitsu.FieldByName('Fusen')).Clear;
						fnFusenArraySet(ZITSUZAI,
                                        MemZitsu.FieldByName('NCode').AsFloat,
                                        MemZitsu.FieldByName('CNCode').AsFloat,'');
					end;
{
				1:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(PM_FRE.Bitmap);
				2:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(PM_FGR.Bitmap);
				3:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(PM_FBU.Bitmap);
				4:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(PM_FOR.Bitmap);
} // <024>
                // ↓↓↓<024>
                1:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
				2:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
				3:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
				4:  TGraphicField(MemZitsu.FieldByName('Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
                // ↑↑↑<024>
			end;

            // ﾚｺｰﾄﾞの付箋情報を格納
			MemZitsu.FieldByName('FusenInfo').AsInteger	:=	FusenKbn;
		end;
		3:	//	細目科目
		begin
			case FusenKbn of	//	付箋区分
				0:	begin
						TGraphicField(MemSai.FieldByName('SFusen')).Clear;
						fnFusenArraySet(SAIMOKU,
                                        MemSai.FieldByName('NCode').AsFloat,
                                        MemSai.FieldByName('CNCode').AsFloat,'');
					end;
{
				1:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(PM_FRE.Bitmap);
				2:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(PM_FGR.Bitmap);
				3:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(PM_FBU.Bitmap);
				4:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(PM_FOR.Bitmap);
} // <024>
                // ↓↓↓<024>
                1:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
				2:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
				3:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
				4:  TGraphicField(MemSai.FieldByName('SFusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
                // ↑↑↑<024>
			end;

            // ﾚｺｰﾄﾞの付箋情報を格納
			MemSai.FieldByName('SFusenInfo').AsInteger	:=	FusenKbn;
		end;
	end;

end;

//-----------------------------------------------------------------------------
// FusenDsp2()
//      PARAM   : FusenKbn  :   付箋区分(1:赤,2:緑,3:青,4:ｵﾚﾝｼﾞ)
//      VAR     :
//      RETURN  :
//      MEMO    : 付箋表示処理(詳細画面用)
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.FusenDsp2(FusenKbn: Integer);
begin

    case FusenKbn of	//	付箋区分
		0:  DtlCmnImgFusen.Picture	:= nil;
		1:  DtlCmnImgFusen.Picture  :=  TPicture (PM_FRE.Bitmap);
		2:  DtlCmnImgFusen.Picture  :=  TPicture (PM_FGR.Bitmap);
		3:  DtlCmnImgFusen.Picture  :=  TPicture (PM_FBU.Bitmap);
		4:  DtlCmnImgFusen.Picture  :=  TPicture (PM_FOR.Bitmap);
	end;

end;

//-----------------------------------------------------------------------------
// FusenUpDel()     付箋新規登録、削除処理
//      PARAM   : FusenKbn      :   付箋区分(1:赤,2:緑,3:青,4:ｵﾚﾝｼﾞ)
//                MemNO         :   Memdataの種類
//                NCode         :   科目内部ｺｰﾄﾞ
//                SubNCode      :   科目別補助内部ｺｰﾄﾞ
//                Cmnt          :   付箋ｺﾒﾝﾄ
//                FusenSelect	:	付箋の備考有り(FUSENBIKO_ARI)/無し(FUSENBIKO_NASHI)
//      VAR     :
//      RETURN  : RollBack時TRUE
//      MEMO    :
//
//-----------------------------------------------------------------------------
function  TJNTCRP009001f.FusenUpDel(FusenKbn: Integer; MemNO: Integer;
								NCode, SubNCode: Extended; Cmnt: String; FusenSelect: Byte):Boolean;
var
	DmqFusen	:	TMQuery;
	DmqUpIn		:	TMQuery;
begin

	DmqFusen := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );	//	DBとMQueryの接続

	DmqUpIn := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqUpIn );		//	DBとMQueryの接続

	with DmqFusen do
	begin
		if (FusenKbn = 0) then
		begin
			Close ();
			SQL.Clear();
			SQL.Add('DELETE FROM MFusenInfo         '
			    +   'WHERE  (MasterKbn = :MsaKbn)   '
			    +   '  AND  (NCode     = :Code)     '
			    +   '  AND  (SubNCode  = :SCode)    ');

            if ( MemNO <> 3 ) then
			begin
				ParamByName('MsaKbn').AsInteger :=	1;
				ParamByName('Code'	).AsFloat   :=	NCode;
				ParamByName('SCode' ).AsFloat   :=	0;
			end
			else
			begin
				ParamByName('MsaKbn').AsInteger :=	2;
				ParamByName('Code'	).AsFloat   :=	NCode;
				ParamByName('SCode' ).AsFloat   :=	SubNCode;
			end;

			// ｴﾗｰの判定
			if ( ExecSQL = FALSE ) then
			begin
				ErrorMessageDsp(DmqFusen);
                // ﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule.Rollback (dbCorp_Select);
				DmqFusen.Close();
				DmqFusen.Free();

				DmqUpIn.Close();
				DmqUpIn.Free();

				Result	:=	TRUE;
				Exit;
			end;

			// ﾃｰﾌﾞﾙ更新履歴
			if ( MemNO <> 3 ) then		//	細目ではない時
				TableHistory.MFusenInfo_KanDel := TABLE_DELETE
			else
				TableHistory.MFusenInfo_SaiDel := TABLE_DELETE;
		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT                         '
			    +   '    FusenKbn                   '
			    +   '   ,FusenCmnt                  '
			    +   'FROM MFusenInfo                '
			    +   'WHERE  (MasterKbn = :MsaKbn)   '
                +   '  AND  (NCode     = :Code)     '
			    +   '  AND  (SubNCode  = :SCode)    ');

            if ( MemNO <> 3 ) then
			begin
				ParamByName('MsaKbn').AsInteger := 1;
				ParamByName('Code'	).AsFloat   := NCode;
				ParamByName('SCode' ).AsFloat   := 0;
			end
			else
			begin
				ParamByName('MsaKbn').AsInteger := 2;
				ParamByName('Code'	).AsFloat 	:= NCode;
				ParamByName('SCode' ).AsFloat 	:= SubNCode;
			end;

			// ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				DmqFusen.Close();
				DmqFusen.Free();

				DmqUpIn.Close();
				DmqUpIn.Free();

				Result	:=	TRUE;
				Exit;
			end;

            // ﾚｺｰﾄﾞがあったら
			if ( EOF <> TRUE ) then
			begin
                // ﾚｺｰﾄﾞの付箋区分と表示の付箋区分またはｺﾒﾝﾄを比較
				if ( FusenKbn <> GetFld('FusenKbn') .AsInteger ) or
                   ( Cmnt     <> GetFld('FusenCmnt').AsString  ) then
				begin
					DmqUpIn.Close();
					DmqUpIn.SQL.Clear();
					DmqUpIn.SQL.Add('UPDATE MFusenInfo SET  '
                                +   '    FusenKbn = :Kbn    ');	//	付箋区分

					if ( FusenSelect = FUSENBIKO_NASHI ) then
						DmqUpIn.SQL.Add('   ,FusenCmnt = :FCmnt     ');	//	付箋ｺﾒﾝﾄ
    				DmqUpIn.SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode     ');	//<080>
					DmqUpIn.SQL.Add('WHERE  (MasterKbn = :MsaKbn)   '
					            +   '  AND  (NCode     = :Code)     '
            					+   '  AND  (SubNCode  = :SCode)    ');

					DmqUpIn.ParamByName('Kbn').AsInteger    :=  FusenKbn;

					if ( FusenSelect = FUSENBIKO_NASHI ) then
						DmqUpIn.ParamByName('FCmnt')    .AsString	:=	'';

					if ( MemNO <> 3 ) then
					begin
						DmqUpIn.ParamByName('MsaKbn')   .AsInteger	:=	1;
						DmqUpIn.ParamByName('Code')     .AsFloat	:=	NCode;
						DmqUpIn.ParamByName('SCode')    .AsFloat	:=	0;
					end
					else
					begin
						DmqUpIn.ParamByName('MsaKbn')   .AsInteger	:=	2;
						DmqUpIn.ParamByName('Code')     .AsFloat	:=	NCode;
						DmqUpIn.ParamByName('SCode')    .AsFloat	:=	SubNCode;
					end;

                    DmqUpIn.ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>
					// ｴﾗｰの判定
					if ( DmqUpIn.ExecSQL = FALSE ) then
					begin
						ErrorMessageDsp( DmqUpIn );
                        // ﾛｰﾙﾊﾞｯｸ(破棄)
						MDataModule.Rollback ( dbCorp_Select );
						DmqUpIn.Close();
						DmqUpIn.Free();

						DmqFusen.Close();
						DmqFusen.Free();

						Result	:=	TRUE;
						Exit;
					end;

					// ﾃｰﾌﾞﾙ更新履歴
					if ( MemNO <> 3 ) then		//	細目ではない時
						TableHistory.MFusenInfo_Kan	:=	TABLE_IN_UPDATE
					else
						TableHistory.MFusenInfo_Sai	:=	TABLE_IN_UPDATE;
				end;
			end
			else
            begin
				DmqUpIn.Close();
				DmqUpIn.SQL.Clear();
				DmqUpIn.SQL.Add('INSERT INTO MFusenInfo (   '
				            +   '    MasterKbn              '
				            +   '   ,NCode                  '
				            +   '   ,SubNCode               '
				            +   '   ,FusenKbn               '
				            +   '   ,UpdTantoNCode          ' // <080>
                            +   ') VALUES (                 '
					        +   '    :MsaKbn                '
					        +   '   ,:Code                  '
					        +   '   ,:SCode                 '
					        +   '   ,:Fusen                 '
				            +   '   ,:UpdTantoNCode         ' // <080>
				            +   ')                          ');

				DmqUpIn.ParamByName('Fusen')    .AsInteger  :=  FusenKbn;

        	    if ( MemNO <> 3 ) then
				begin
					DmqUpIn.ParamByName('MsaKbn')   .AsInteger	:=	1;
					DmqUpIn.ParamByName('Code')     .AsFloat	:=	NCode;
					DmqUpIn.ParamByName('SCode')    .AsFloat	:=	0;
				end
				else
				begin
					DmqUpIn.ParamByName('MsaKbn')   .AsInteger	:=	2;
					DmqUpIn.ParamByName('Code')     .AsFloat	:=	NCode;
					DmqUpIn.ParamByName('SCode')    .AsFloat	:=	SubNCode;
				end;
                DmqUpIn.ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

				// ｴﾗｰの判定
				if ( DmqUpIn.ExecSQL = FALSE ) then
				begin
					ErrorMessageDsp( DmqUpIn );
                    // ﾛｰﾙﾊﾞｯｸ(破棄)
					MDataModule.Rollback ( dbCorp_Select );
					DmqUpIn.Close();
					DmqUpIn.Free();

					DmqFusen.Close();
					DmqFusen.Free();

					Result	:=	TRUE;
					Exit;
				end;

				// ﾃｰﾌﾞﾙ更新履歴
				if ( MemNO <> 3 ) then		//	細目ではない時
					TableHistory.MFusenInfo_Kan	:=	TABLE_IN_UPDATE
				else
					TableHistory.MFusenInfo_Sai	:=	TABLE_IN_UPDATE;
			end;
		end;
	end;

	DmqFusen.Close();
	DmqFusen.Free();
	DmqUpIn.Close();
	DmqUpIn.Free();

	Result	:=	FALSE;

end;

//-----------------------------------------------------------------------------
// FusenUpDel()     付箋ＣＨＥＣＫ
//      PARAM   : MasNo		:	ﾏｽﾀ区分(1:勘定科目,2:細目科目)
//				  NCode		:	科目内部ｺｰﾄﾞ
//				  SubNCode  :	科目別補助内部ｺｰﾄﾞ
//      VAR     : Cmnt	    :	付箋ｺﾒﾝﾄ
//      RETURN  : 付箋区分(1:赤,2:緑,3:青,4:ｵﾚﾝｼﾞ)
//      MEMO    :
//
//-----------------------------------------------------------------------------
function TJNTCRP009001f.FusenCheck(MasNo: Integer; NCode, SubNCode: Extended; var Cmnt: String): Integer;
var
	DmqFusen	:	TMQuery;
	iFusenNO	:	Integer;	// 付箋区分(1:赤,2:緑,3:青,4:ｵﾚﾝｼﾞ)
begin

	iFusenNO    :=  0;
	Cmnt	    :=  '';

	DmqFusen    :=  TMQuery.Create( Self );					    //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );	//	DBとMQueryの接続

	with DmqFusen do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT                         '
            +   '    FusenKbn                   '
		    +   '   ,FusenCmnt                  '
		    +   'FROM MFusenInfo                '
		    +   'WHERE  (MasterKbn = :MasKbn)   '
		    +   '  AND  (NCode     = :Code)     '
            +   '  AND  (SubNCode  = :SCode)    ');

		ParamByName('MasKbn').AsInteger :=  MasNo;

		if ( MasNo = 2 ) then
		begin
			ParamByName('Code'	).AsFloat	:=	NCode;
			ParamByName('SCode'	).AsFloat	:=	SubNCode;
		end
		else
		begin
			ParamByName('Code'	).AsFloat	:=	NCode;
			ParamByName('SCode'	).AsFloat	:=	0;
		end;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( DmqFusen );
			DmqFusen.Close();
			DmqFusen.Free();
			Result  :=  0;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			iFusenNO    :=	GetFld('FusenKbn' ).AsInteger;		//	付箋区分
			Cmnt	    :=  GetFld('FusenCmnt').AsString;		//	付箋ｺﾒﾝﾄ
		end;
	end;

	DmqFusen.Close();
	DmqFusen.Free();

	Result  :=  iFusenNO;

end;

//-----------------------------------------------------------------------------
// PM_Click()       PM_xxxxx(TMenuItem)
//      PARAM   : Sender    :   TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     :
//      RETURN  :
//      MEMO    :
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.PM_Click(Sender: TObject);
var
	iTag		:   Integer;	//	付箋の種類
	iActiveNo	:	Integer;	//	ActiveGridNO
	iFusenInfo	:	Integer;	//	付箋情報
	iNCode		:	Extended;	//	科目内部ｺｰﾄﾞ
	iSubNCode	:	Extended;   //  科目別補助内部ｺｰﾄﾞ
	iWork		:	Integer;
    sCmnt       :   String;
    iPos        :   Integer;
    sGCode      :   Integer;
    sSubCode    :   String;
begin

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran (dbCorp_Select);

    // 詳細画面の時
    if ( P_Syousai.Visible ) then
    begin

        if ( Trim(ECode.Text) = '' ) then Exit;

        case MTab_Select.Items.Selected of
            // 実在
            0:  begin
// <013>                    gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'',
                    gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'0',    // <013>
                                    iNCode,iSubNCode);
                    iActiveNo	:=	ZITSUZAI;
                    iFusenInfo  :=  FusenCheck(1,iNCode,0,sCmnt);

                    // Toolﾎﾞﾀﾝが押されてない時
            		if ( m_ToolBtn.ClickFlag = FALSE ) then
            		begin
            			iTag    :=  (Sender as TMenuItem).Tag;
            			fnFusenArraySet(ZITSUZAI,iNCode,iSubNCode,'');
            			iWork   :=  FUSENBIKO_NASHI;
            		end
                    // 押された時
            		else
            		begin
            			iTag    :=  m_ToolBtn.Tag;
            			iWork   :=  FUSENBIKO_ARI;
            		end;
            		m_ToolBtn.ClickFlag :=  FALSE;

            		if ( iTag = iFusenInfo ) then
            			iTag    :=  0;

                    // RollBack時TRUE
            		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',iWork) ) then
               			Exit;

            		MemZitsu.Open;
            		MemZitsu.Edit;
            		FusenDsp(iTag,iActiveNo);
                    FusenDsp2(iTag);
            		gbFusenFlag	:=	TRUE;
            		MemZitsu.Post;
                end;
            // 細目
            1:  begin
                    // 先頭からSPACEまでの桁数COUNT
                	iPos    :=  MJSHanPos(' ', MTab_Select.BorderCaption);
                    // 上記で取得した桁数-1までの桁数をｺﾋﾟｰ
                	sGCode  :=  StrToIntDef(MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1),0);

                    // 数値属性
		            if ( wkKmk.SaimokukZoku <= 1 ) then
                		sSubCode    :=  Format ('%.16d', [StrToInt64(Trim(ECode.Text))])
                	else
                    // ﾌﾘｰ属性
                	begin
                		ECode.Text	:= TrimRight(ECode.Text);
                		sSubCode	:= ECode.Text;
                    end;

                    gfnGetKmk_NCODE(KMK_HOJYO,0,sGCode,sSubCode,
                                    iNCode,iSubNCode);

            		iActiveNo	:=	SAIMOKU;
            		iFusenInfo	:=	FusenCheck(2,iNCode,iSubNCode,sCmnt);

                    // Toolﾎﾞﾀﾝが押されてない時
            		if ( m_ToolBtn.ClickFlag = FALSE ) then
            		begin
            			iTag    :=  (Sender as TMenuItem).Tag;
              			fnFusenArraySet(SAIMOKU,iNCode,iSubNCode,'');
            			iWork   :=  FUSENBIKO_NASHI;
            		end
                    // 押された時
            		else
            		begin
            			iTag    :=  m_ToolBtn.Tag;
            			iWork   :=  FUSENBIKO_ARI;
            		end;
            		m_ToolBtn.ClickFlag :=  FALSE;

            		if ( iTag = iFusenInfo ) then
                        iTag    :=  0;

                    // RollBack時TRUE
            		if ( FusenUpDel(iTag,iActiveNo,iNCode,iSubNCode,'',iWork) ) then
            			Exit;

            		MemSai.Open;
            		MemSai.Edit;
            		FusenDsp(iTag,iActiveNo);
                    FusenDsp2(iTag);
            		gbFusenFlag	:=	TRUE;
            		MemSai.Post;
                end;
            // 合計
            2:  begin
// <013>                    gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'',
                    gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'0',    // <013>
                                    iNCode,iSubNCode);
                    iActiveNo	:=	GOUKEI;
                    iFusenInfo  :=  FusenCheck(1,iNCode,0,sCmnt);

                    // Toolﾎﾞﾀﾝが押されてない時
            		if ( m_ToolBtn.ClickFlag = FALSE ) then
            		begin
            			iTag    :=  (Sender as TMenuItem).Tag;
            			fnFusenArraySet(GOUKEI,iNCode,iSubNCode,'');
            			iWork   :=  FUSENBIKO_NASHI;
            		end
                    // 押された時
            		else
            		begin
            			iTag    :=  m_ToolBtn.Tag;
            			iWork   :=  FUSENBIKO_ARI;
            		end;
            		m_ToolBtn.ClickFlag :=  FALSE;

            		if ( iTag = iFusenInfo ) then
            			iTag    :=  0;

                    // RollBack時TRUE
            		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',iWork) ) then
            			Exit;

            		MemGou.Open;
            		MemGou.Edit;
            		FusenDsp(iTag,iActiveNo);
            		FusenDsp2(iTag);
            		gbFusenFlag	:=	TRUE;
            		MemGou.Post;
                end;

        end;
    end;

    // 合計科目の時
	if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
	begin
		if ( MemGou.FieldByName('GCode').IsNull ) then
			Exit;

		iActiveNo	:=	GOUKEI;
		iFusenInfo  :=	MemGou.FieldByName('GFusenInfo').AsInteger;
		iNCode		:=	MemGou.FieldByName('NCode').AsFloat;
        iSubNCode   :=  memGou.FieldByName('CNCode').AsFloat;

        // Toolﾎﾞﾀﾝが押されてない時
		if ( m_ToolBtn.ClickFlag = FALSE ) then
		begin
			iTag    :=  (Sender as TMenuItem).Tag;
			fnFusenArraySet(GOUKEI,iNCode,iSubNCode,'');
			iWork   :=  FUSENBIKO_NASHI;
		end
        // 押された時
		else
		begin
			iTag    :=  m_ToolBtn.Tag;
			iWork   :=  FUSENBIKO_ARI;
		end;
		m_ToolBtn.ClickFlag :=  FALSE;

		if ( iTag = iFusenInfo ) then
			iTag    :=  0;

        // RollBack時TRUE
		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',iWork) ) then
			Exit;

		MemGou.Open;
		MemGou.Edit;
		FusenDsp(iTag,iActiveNo);
		gbFusenFlag	:=	TRUE;
		MemGou.Post;
    end;

    // 実在科目の時
	if ( Screen.ActiveControl.Name = DZitsuGrid.Name ) then
	begin
		if ( MemZitsu.FieldByName('Code').IsNull ) then
			Exit;

		iActiveNo	:=	ZITSUZAI;
		iFusenInfo	:=	MemZitsu.FieldByName('FusenInfo').AsInteger;
		iNCode		:=	MemZitsu.FieldByName('NCode').AsFloat;
        iSubNCode   :=  MemZitsu.FieldByName('CNCode').AsFloat;

        // Toolﾎﾞﾀﾝが押されてない時
		if ( m_ToolBtn.ClickFlag = FALSE ) then
		begin
			iTag    :=  (Sender as TMenuItem).Tag;
			fnFusenArraySet(ZITSUZAI,iNCode,iSubNCode,'');
			iWork   :=  FUSENBIKO_NASHI;
		end
        // 押された時
		else
		begin
			iTag    :=  m_ToolBtn.Tag;
			iWork   :=  FUSENBIKO_ARI;
		end;
		m_ToolBtn.ClickFlag :=  FALSE;

		if ( iTag = iFusenInfo ) then
			iTag    :=  0;

        // RollBack時TRUE
		if ( FusenUpDel(iTag,iActiveNo,iNCode,0,'',iWork) ) then
			Exit;

		MemZitsu.Open;
		MemZitsu.Edit;
		FusenDsp(iTag,iActiveNo);
		gbFusenFlag	:=	TRUE;
		MemZitsu.Post;
    end;

    // 細目科目の時
	if ( Screen.ActiveControl.Name = DSaimokuGrid.Name ) then
	begin
		if ( MemSai.FieldByName('SCode').IsNull ) then
			Exit;

		iActiveNo	:=	SAIMOKU;
		iFusenInfo	:=	MemSai.FieldByName('SFusenInfo').AsInteger;
		iNCode		:=	MemSai.FieldByName('NCode').AsFloat;
        iSubNCode   :=  MemSai.FieldByName('CNCode').AsFloat;

        // Toolﾎﾞﾀﾝが押されてない時
		if ( m_ToolBtn.ClickFlag = FALSE ) then
		begin
			iTag    :=  (Sender as TMenuItem).Tag;
			fnFusenArraySet(SAIMOKU,iNCode,iSubNCode,'');
			iWork   :=  FUSENBIKO_NASHI;
		end
        // 押された時
		else
		begin
			iTag    :=  m_ToolBtn.Tag;
			iWork   :=  FUSENBIKO_ARI;
		end;
		m_ToolBtn.ClickFlag :=  FALSE;

		if ( iTag = iFusenInfo ) then
            iTag    :=  0;

        // RollBack時TRUE
		if ( FusenUpDel(iTag,iActiveNo,iNCode,iSubNCode,'',iWork) ) then
			Exit;

		MemSai.Open;
		MemSai.Edit;
		FusenDsp(iTag,iActiveNo);
		gbFusenFlag	:=	TRUE;
		MemSai.Post;
    end;

	DSourceGou.DataSet		:=	MemGou;
	DSourceSai.DataSet		:=	MemSai;

    // ｺﾐｯﾄ(反映)
	MDataModule.Commit (dbCorp_Select);

end;

//-----------------------------------------------------------------------------
// PopupFusenPopup()    ポップアップで付箋の種類表示
//      PARAM   : Sender    :   TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     :
//      RETURN  :
//      MEMO    :
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.PopupFusenPopup(Sender: TObject);
var
	iFusenInfo	:	Integer;
    DmqData     :   TMQuery;
    nSQL        :   String;
    iNCode,
    iCNCode     :   Extended;
    iPos        :   Integer;
    sGCode      :   Integer;
    sSubCode    :   String;
    iMasKbn     :   Integer;

    fEnabled    :   Boolean;

begin
    iMasKbn := 0;

	PM_Del.Enabled	    :=  m_cJNTArea.IsFusen;			//	はがす
	PM_Revise.Enabled   :=  m_cJNTArea.IsFusen;			//	備考修正
	PM_FRE.Enabled	    :=	m_cJNTArea.IsFusen;
	PM_FBU.Enabled	    :=	m_cJNTArea.IsFusen;
	PM_FGR.Enabled	    :=	m_cJNTArea.IsFusen;
	PM_FOR.Enabled	    :=	m_cJNTArea.IsFusen;

	//	初期化処理
	iFusenInfo	:=	0;
    iNCode      :=  0;
    iCNCode     :=  0;

    // 詳細画面の時
    if ( P_Syousai.Visible ) then
    begin

	    DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryのS接続

        nSQL    :=      'SELECT FusenKbn FROM MFusenInfo        '
                    +   'WHERE (MasterKbn = :nMasterDivision)   '
                    +   '  AND (NCode     = :strExCode)         '
                    +   '  AND (SubNCode  = :strExSubCode)      ';

        try
            // 内部ｺｰﾄﾞ及び細目内部ｺｰﾄﾞを取得
            case MTab_Select.Items.Selected of
                // 実在科目
                0:  begin
                        iMasKbn :=  1;
// <013>                        gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'',
                        gfnGetKmk_NCODE(KMK,0,StrToIntDef(ECode.Text,0),'0',    // <013>
                                        iNCode,iCNCode);
                    end;
                // 細目科目
                1:  begin
                        // 先頭からSPACEまでの桁数COUNT
                		iPos    :=  MJSHanPos(' ', MTab_Select.BorderCaption);
                        // 上記で取得した桁数-1までの桁数をｺﾋﾟｰ
                		sGCode  :=  StrToIntDef(MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1),0);

                        // 数値属性
		                if ( wkKmk.SaimokukZoku <= 1 ) then
                			sSubCode    :=  Format ('%.16d', [StrToInt64(Trim(ECode.Text))])
                		else
                        // ﾌﾘｰ属性
                		begin
                			ECode.Text	:= TrimRight(ECode.Text);
                			sSubCode	:= ECode.Text;
                        end;

                        iMasKbn :=  2;
                        gfnGetKmk_NCODE(KMK_HOJYO,0,sGCode,sSubCode,
                                        iNCode,iCNCode);
                    end;
                // 合計科目
                2:  begin
                        iMasKbn :=  1;
// <013>                        gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'',
                        gfnGetKmk_NCODE(KMK,1,StrToIntDef(ECode.Text,0),'0',    // <013>
                                    iNCode,iCNCode);
                    end;
            end;

            with DmqData do
            begin
                Close();
                SQL.Clear();
                SQL.Add(nSQL);

                ParamByName('nMasterDivision')  .AsInteger  :=  iMasKbn;
                ParamByName('strExCode')        .AsFloat    :=  iNCode;
                ParamByName('strExSubCode')     .AsFloat    :=  iCNCode;

                Open();

                if ( not EOF ) then
                    iFusenInfo  :=  GetFld('FusenKbn').AsInteger;

                Close();
            end;

        finally
            DmqData.Close();
            DmqData.Free();
        end;
    end

    // 一覧画面の時
    else
    begin
        // 合計科目の時
    	if ( Screen.ActiveControl.Name = DGoukeiGrid.Name ) then
		    iFusenInfo  :=  MemGou.FieldByName('GFusenInfo').AsInteger

        // 実在科目の時
	    else if ( Screen.ActiveControl.Name = DZitsuGrid.Name ) then
    		iFusenInfo	:=	MemZitsu.FieldByName('FusenInfo').AsInteger

        // 細目科目の時
    	else if ( Screen.ActiveControl.Name = DSaimokuGrid.Name ) then
    		iFusenInfo	:=	MemSai.FieldByName('SFusenInfo').AsInteger;
    end;

	case iFusenInfo of
		0:	//	付箋なし
		begin
			PM_Del.Visible	    :=  FALSE;			//	はがす
			PM_Del.Bitmap	    :=  nil;			//	付箋Bitmap
			PM_Revise.Visible   :=  FALSE;			//	備考修正
			PM_Revise.Tag	    :=  0;
			PM_FRE.Visible	    :=	TRUE;
			PM_FBU.Visible	    :=	TRUE;
			PM_FGR.Visible	    :=	TRUE;
			PM_FOR.Visible	    :=	TRUE;
		end;
		1:	//	付箋赤
		begin
			PM_Del.Visible	    :=  TRUE;				//	はがす
			PM_Del.Bitmap	    :=  PM_FRE.Bitmap;		//	付箋Bitmap
			PM_Revise.Visible   :=  TRUE;				//	備考修正
			PM_Revise.Tag	    :=  1;
			PM_FRE.Visible	    :=  FALSE;				//	付箋赤を非表示
			PM_FBU.Visible	    :=  TRUE;				//	付箋青を表示
			PM_FGR.Visible      :=  TRUE;				//	付箋緑を表示
			PM_FOR.Visible	    :=  TRUE;				//	付箋橙を表示
		end;
		2:	//	付箋緑
		begin
			PM_Del.Visible	    :=  TRUE;				//	はがす
			PM_Del.Bitmap	    :=  PM_FGR.Bitmap;		//	付箋Bitmap
			PM_Revise.Visible   :=  TRUE;				//	備考修正
			PM_Revise.Tag	    :=  2;
			PM_FRE.Visible	    :=  TRUE;				//	付箋赤を表示
			PM_FBU.Visible	    :=  TRUE;				//	付箋青を表示
			PM_FGR.Visible      :=  FALSE;				//	付箋緑を非表示
			PM_FOR.Visible	    :=  TRUE;				//	付箋橙を表示
		end;
		3:	//	付箋青
		begin
			PM_Del.Visible	    :=  TRUE;				//	はがす
			PM_Del.Bitmap	    :=  PM_FBU.Bitmap;		//	付箋Bitmap
			PM_Revise.Visible   :=  TRUE;				//	備考修正
			PM_Revise.Tag	    :=  3;
			PM_FRE.Visible	    :=  TRUE;				//	付箋赤を表示
			PM_FBU.Visible	    :=  FALSE;				//	付箋青を非表示
			PM_FGR.Visible      :=  TRUE;				//	付箋緑を表示
			PM_FOR.Visible	    :=  TRUE;				//	付箋橙を表示
		end;
		4:	//	付箋橙
		begin
			PM_Del.Visible	    :=  TRUE;				//	はがす
			PM_Del.Bitmap	    :=  PM_FOR.Bitmap;		//	付箋Bitmap
			PM_Revise.Visible   :=  TRUE;				//	備考修正
			PM_Revise.Tag	    :=  4;
			PM_FRE.Visible	    :=  TRUE;				//	付箋赤を表示
			PM_FBU.Visible	    :=  TRUE;				//	付箋青を表示
			PM_FGR.Visible      :=  TRUE;				//	付箋緑を表示
			PM_FOR.Visible	    :=  FALSE;				//	付箋橙を非表示
		end;
	end;

end;

//-----------------------------------------------------------------------------
// PM_F_Click()         付箋を選択した時(TreeView側)
//      PARAM   : Sender    :   TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     :
//      RETURN  :
//      MEMO    :
//
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.PM_F_Click(Sender: TObject);
var
	iTag		:   Integer;		//	選択された付箋NO
	iSyubetsuNo	:	Integer;		//	種類
	iFusenInfo	:	Integer;		//	付箋の種類
	wkRec		:	^TaikeiRec;
	iLoop		:	Integer;	    //	ﾙｰﾌﾟｶｳﾝﾄ
	sCmnt		:	String;
	iWork		:	Integer;
begin

	// 初期化処理
	iSyubetsuNo :=  0;

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule.BeginTran ( dbCorp_Select );

	if ( grTaikei.MasKbn = 1 ) then
		iFusenInfo := FusenCheck(grTaikei.MasKbn,grTaikei.NCode,0,sCmnt)
	else
		iFusenInfo := FusenCheck(grTaikei.MasKbn,grOya_Taikei.NCode,grTaikei.CNCode,sCmnt);

	case grTaikei.MasKbn of
		1:	//	勘定科目
		begin
            if ( grTaikei.Kbn = 0 ) then
			begin
				iSyubetsuNo	:=	ZITSUZAI;
			end
			else
			begin
				iSyubetsuNo	:=	GOUKEI;
			end;
		end;
		2:	//	細目科目
		begin
			iSyubetsuNo	:=	SAIMOKU;
		end;
	end;

    // Toolﾎﾞﾀﾝが押されてない時
	if ( m_ToolBtn.ClickFlag = FALSE ) then
	begin
		iTag    :=  (Sender as TMenuItem).Tag;
		iWork   :=  FUSENBIKO_NASHI;
    end
    // 押された時
	else
	begin
		iTag    :=  m_ToolBtn.Tag;
		iWork   :=  FUSENBIKO_ARI;
	end;

	m_ToolBtn.ClickFlag :=  FALSE;

	if ( iTag = iFusenInfo ) then
        iTag    :=  0;

	if ( iSyubetsuNo = SAIMOKU ) then
	begin
        // RollBack時TRUE
		if ( FusenUpDel(iTag,iSyubetsuNo,grOya_Taikei.NCode,grTaikei.CNCode,'',iWork) ) then
			Exit;
		LevelDspSaimoku(grOya_Taikei.NCode);
    end
	else
	begin
        // RollBack時TRUE
		if ( FusenUpDel(iTag,iSyubetsuNo,grTaikei.NCode,0,'',iWork) ) then
			Exit;
		// 合計をClickしてから付箋をつけるとGridの表示内容がかわってしまったので
		// 選択されているのが合計ではない時というif文を追加
		if not(( grTaikei.MasKbn = 1 ) and ( grTaikei.Kbn = 1 )) then
			GridAgainDsp(OTHER,0);
	end;

	m_FusenNode.Selected    :=  TRUE;

	if ( iSyubetsuNo = ZITSUZAI ) then
		MoveGridRecordSelecter(iSyubetsuNo,IntToStr(grTaikei.GCode))
    else if ( iSyubetsuNo = SAIMOKU ) then
		MoveGridRecordSelecter(iSyubetsuNo,grTaikei.SubCode);

    // ｺﾐｯﾄ(反映)
	MDataModule.Commit (dbCorp_Select);

end;

// *** 検索処理 *** //

//************************************************************************
//*		Component		:	B_Search ( TMSpeedButton )  <006>
//*							検索DLG
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_Search_Click(Sender: TObject);
var
// <007>	DLGParam	:	TJNTDLGParam;
// <007>	DLG			:	TJNTMASSEARCHDLGIF;
    lvExpSend   :   rcJNTExpSend;   // 親BPL送信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    lvExpRecv   :   rcJNTExpRecv;   // 親BPL受信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    iExpRtn     :   Integer;        // 戻り値
    iMasKbn     :   Integer;        // ﾏｽﾀ区分
    iPos        :   Integer;
    sCode       :   String;
	cNode	    :	TTreeNode;      // <031>
    wRec		:	^TaikeiRec;     // <031>
begin
    iMasKbn := 0;
{
	// 検索ﾀﾞｲｱﾛｸﾞ表示
	DLG := TJNTMASSEARCHDLGIF.Create();
	DLG.Init( AOwner, Pointer ( m_pRec ) );

	DLGParam			:= TJNTDLGParam.CreateParam();
	DLGParam.pApRec	    := pointer( m_pRec );		// ApRecのポインタ
    DLGParam.pApRec	    := pointer( m_Base_pRec );	// ApRecのポインタ
	DLGParam.iMasterkbn := 1;						// ﾏｽﾀ区分
	DLGParam.iAttr		:= 0;						// 属性
	DLGParam.iDigit		:= 6;						// 桁数

	if ( DLG.DoDlg(DLGParam) = mrOk ) then				// ↑検索、↓検索
	begin
		m_SearchInfo.iKmkCD :=  StrToInt(DLGParam.sSearchCD);
		if ( DLGParam.sSearchSubCD <> '' ) then
			m_SearchInfo.iSubCD :=  DLGParam.sSearchSubCD
		else
			m_SearchInfo.iSubCD :=  '-1';

        // 分類ﾁｪｯｸ
		fnBunruiCheck();
		m_SearchInfo.iItem    := 0;
		m_SearchInfo.bFstFlg  := FALSE;
		m_SearchInfo.iStIndex := MComboBox.ItemIndex;
		TreeView.SetFocus;
		fnSearch();
	end;

	DLGParam.Free();
	DLG.Term();
	DLG.Free();
} // <007>

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam( @lvExpSend );
    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pRec;                             // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;                     // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;       //
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;       //

    lvExpSend.MasterKbn     :=  1;                  // ﾏｽﾀ区分
    lvExpSend.ModulKbn      :=  0;                  // ﾓｼﾞｭｰﾙ区分(共通=0)
    lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNo.
    lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';     // ﾂｰﾙﾊﾞｰｷｬﾌﾟｼｮﾝ
    lvExpSend.TableName     :=  'KmkMA';            // ﾃｰﾌﾞﾙ名


// ↓↓↓<014>
    // 勘定科目
    if (( P_Grid.Visible    ) and ( MTab_N.Items.Selected      in [0,2] )) or
       (( P_Syousai.Visible ) and ( MTab_Select.Items.Selected in [0,2] )) then
    begin
// <031>↓
//        lvExpSend.WhereStr      :=  'MASTERKBN = 1 AND RDelKbn = 0';
        lvExpSend.WhereStr      :=  'KmkMA.MasterKbn = 1';
// <031>↑

        iMasKbn                 :=  1;
        lvExpSend.SortStr       :=  'Order By GCode';
// <039>↓
                                            // 製造科目は青字にする
        SetLength(lvExpSend.FontColorInfo, 1);
        lvExpSend.FontColorInfo[0].C_FieldName := '(case when (AnalyzeCode >= 106 and AnalyzeCode <= 120) then 1 else 0 end) AS COLFLD';
        lvExpSend.FontColorInfo[0].C_Value1 := '1';
        lvExpSend.FontColorInfo[0].C_Type := 0;
        lvExpSend.FontColorInfo[0].C_Color1 := clBlue;
// <039>↑
    end
    // 科目別補助
    else if (( P_Grid.Visible    ) and ( MTab_N.Items.Selected      in [1] )) or
            (( P_Syousai.Visible ) and ( MTab_Select.Items.Selected in [1] )) then
    begin

        if ( P_Grid.Visible ) then
        begin
            //	先頭からSPACEまでの桁数COUNT
    		iPos  := MJSHanPos(' ', MTab_N.BorderCaption);
            //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
    		sCode := MJSHanCopy(MTab_N.BorderCaption, 1, iPos-1);
        end
        else if ( P_Syousai.Visible ) then
        begin
            //	先頭からSPACEまでの桁数COUNT
            iPos	:=  MJSHanPos(' ', MTab_Select.BorderCaption);
            //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
		    sCode	:=	MJSHanCopy(MTab_Select.BorderCaption, 1, iPos-1);
        end;

//        lvExpSend.WhereStr      :=      'MASTERKBN = 2 AND RDelKbn = 0'   // <031>削除
//                                    +   'AND GCODE = ' + sCode + ' ';     // <031>削除
        lvExpSend.WhereStr      :=      'KmkMA.MasterKbn = 2 ';             // <031>追加
        iMasKbn                 :=  2;
// <031>↓
        lvExpSend.MasterKbn     := iMasKbn;
        cNode	:=	TreeView.Selected;
        wRec	:=	cNode.Data;
        lvExpSend.KmkNCode      := wRec.NCode;
// <031>↑
        lvExpSend.SortStr       :=  'Order By GCode, SubCode';
    end;
// ↑↑↑<014>

    lvExpSend.TrRootCaption :=  '';

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
        Exit;

    // 中身あり
    if ( Length(Trim(lvExpRecv.GCode)) > 0 ) then
    begin
// ↓↓↓<014>
        // 勘定科目
        if ( iMasKbn = 1 ) then
        begin
    		m_SearchInfo.iKmkCD :=  StrToInt(lvExpRecv.GCode);
            m_SearchInfo.iSubCD :=  '-1';
        end
        // 科目別補助
        else if ( iMasKbn = 2 ) then
        begin
// <032>↓
//            m_SearchInfo.iKmkCD :=  StrToInt(lvExpRecv.GCode);
//            m_SearchInfo.iSubCD :=  '-1';
            m_SearchInfo.iKmkCD :=  StrToInt(sCode);    // 科目外部ｺｰﾄﾞ
            m_SearchInfo.iSubCD :=  lvExpRecv.GCode;    // 科目別補助外部ｺｰﾄﾞ
// <032>↑

            // ※検索ｴｸｽﾌﾟﾛｰﾗでの科目別補助のｺｰﾄﾞが戻り値にない為取得できない
{
            if ( lvExpRecv.GCode <> '' ) then
    			m_SearchInfo.iSubCD :=  FloatToStr(lvExpRecv.NCode);
}
        end;
// ↑↑↑<014>

        // 分類ﾁｪｯｸ
		fnBunruiCheck();
		m_SearchInfo.iItem    := 0;
		m_SearchInfo.bFstFlg  := FALSE;
		m_SearchInfo.iStIndex := MComboBox.ItemIndex;
		TreeView.SetFocus;
		fnSearch();
    end;

end;

//**********************************************************************
//*		Proccess	:	検索処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/04
//*		Parameter	:	Nothing
//*		Return		:	一致(TRUE)/不一致(FALSE)
//**********************************************************************
function TJNTCRP009001f.fnDownSearch():Boolean;
var
	wkRec	: ^TaikeiRec;
	wkRecOYA: ^TaikeiRec;
	cNodeOYA: TTreeNode;
	i		: Integer;
begin
	Result := FALSE;
	for i:=m_SearchInfo.iItem to TreeView.Items.Count-1 do
    begin
		wkRec := TreeView.Items[i].Data;
														// 勘定科目の検索
		if m_SearchInfo.iSubCD = '-1' then
		begin
			if (wkRec.GCode = m_SearchInfo.iKmkCD) and (wkRec.MasKbn = 1) then
			begin
				TreeView.Items[i].Selected := TRUE;
				m_SearchInfo.iItem := i+1;
				Result := TRUE;
				break;
			end;
		end
		else											// 科目別補助の検索
		begin
			if (wkRec.SubCode = m_SearchInfo.iSubCD) and (wkRec.MasKbn = 2) then
			begin
				cNodeOYA := TreeView.Items[i].Parent;
				if cNodeOYA <> nil then
				begin
					wkRecOYA := cNodeOYA.Data;
					if (wkRecOYA.GCode = m_SearchInfo.iKmkCD) and (wkRecOYA.MasKbn = 1) then
					begin
						cNodeOYA.Expanded := TRUE;
						TreeView.Items[i].Selected := TRUE;
						m_SearchInfo.iItem := i+1;
						Result := TRUE;
						break;
					end;
				end;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	検索
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/04
//*		Parameter	:   Nothing
//*		Return		:	Nothing
//**********************************************************************
procedure  TJNTCRP009001f.fnSearch();
var
	iCnt:	integer;
begin

	if fnDownSearch() = TRUE then
	begin
		if m_SearchInfo.bFstFlg = FALSE then
		begin
			m_SearchInfo.iStItem := MComboBox.ItemIndex;
			m_SearchInfo.bFstFlg := TRUE;
		end;
		exit;
	end;

	case MComboBox.ItemIndex of
		3:   iCnt := 0;
		else iCnt := MComboBox.ItemIndex+1;
	end;

	while TRUE do
	begin
		// 1件も一致しなかった時
		if (iCnt = m_SearchInfo.iStIndex) and (m_SearchInfo.bFstFlg = FALSE) then
			break;

		// 最後まで検索した時
		if (iCnt = m_SearchInfo.iStItem) and (m_SearchInfo.bFstFlg = TRUE) then
		begin
//			ComArea.m_MsgStd.GetMsg(MjsMsgRec, 30,31);
//	   		MjsMessageBoxEx(AOwner, // <005>
//                          MjsMsgRec.sMsg,
//                          MjsMsgRec.sTitle,
//                          MjsMsgRec.icontype,
//							MjsMsgRec.btntype,
//                          MjsMsgRec.btndef,
//                          MJsMsgRec.LogType
//                         );
			showmessage('最後まで検索しました。');
			break;
		end;

		if m_SearchInfo.aTaikei[iCnt] = TRUE then
		begin
			MComboBox.ItemIndex := iCnt;
			ComboChange();
			m_SearchInfo.iItem := 0;
			if fnDownSearch() = TRUE then
			begin
				if m_SearchInfo.bFstFlg = FALSE then
				begin
					m_SearchInfo.iStItem := MComboBox.ItemIndex;
					m_SearchInfo.bFstFlg := TRUE;
				end;
				exit;
			end;
//<090> ADD St
            // 見つからなければ検索はやめる
            break;
//<090> ADD Ed
		end
		else
		begin
			case iCnt of
				3: iCnt := 0;
				else iCnt := iCnt+1;
			end;
		end;
	end;
end;


// *** 科目コピー処理 *** //

//************************************************************************
//*		Component		:	B_KmkCopy ( TMSpeedButton )
//*
//*		Event			:	OnClick
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_KmkCopy_Click(Sender: TObject);
begin
	//	Grid表示時
	if (P_Grid.Visible = TRUE) then
	begin
		//	選択されているTab
		case MTab_N.Items.Selected of
			0: fnCallCopyDlg(ZITSUZAI,ICHIRAN);	//	実在
			2: fnCallCopyDlg(GOUKEI,ICHIRAN);	//	合計
		end;
	end
	//	詳細表示時
	else
	begin
		//	選択されているTab
		case MTab_Select.Items.Selected of
			0: fnCallCopyDlg(ZITSUZAI,SYOUSAI);	//	実在
			2: fnCallCopyDlg(GOUKEI,SYOUSAI);	//	合計
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	ｺﾋﾟｰﾀﾞｲｱﾛｸﾞを呼ぶ処理とｺﾋﾟｰ処理
//*		Name		:	H.Endo
//*		Date		:	2001/08/23
//*		Parameter	:	Choice		:	実在(ZITSUZAI)/合計(GOUKEI)
//*						Dsp			:	Grid(ICHIRAN)/詳細(SYOUSAI)
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.fnCallCopyDlg(Choice,Dsp: Integer);
var
	JNTCRP009001_D1F	:	TJNTCRP009001_D1F;
	iReturn				:	Integer;
	iBPKbn				:	Integer;
	iSumKbn				:	Integer;
	DmqData				:	TMQuery;
	iDummy				:	Integer;
	iLoop				:	Integer;
	iCode				:	Integer;
	sName				:	String;
	sTekiBunName		:	String;
	EMPLOY				:	SaiyouRec;
	iGCode				:	Integer;											// <120>ADD
begin

	//	初期処理
	iDummy	  := 0;
    iGCode    := 0;
    iBPKbn    := 0;
    iSumKbn   := 0;

	case MComboBox.ItemIndex of
		//	資産/負債・資本
		0,1: iBPKbn := 0;	//	B/S
		//	損益/製造
		2,3: iBPKbn := 1;	//	P/L
	end;

	if ( Choice = ZITSUZAI ) then
		iSumKbn := 0
	else if ( Choice = GOUKEI ) then
		iSumKbn := 1;

	//	ｺﾋﾟｰﾀﾞｲｱﾛｸﾞ表示
	JNTCRP009001_D1F                :=  TJNTCRP009001_D1F.Create(Self);
	JNTCRP009001_D1F.MDataModule	:=	MDataModule;
	JNTCRP009001_D1F.dbCorp_Select	:=	dbCorp_Select;
	iReturn := JNTCRP009001_D1F.fnCopyDLG(AOwner,iSumKbn,iBPKbn,pointer(m_pRec),pointer(@m_DLGCopyInfo));   // <005>
	JNTCRP009001_D1F.Free;

	if ( iReturn = 2 ) then		//	CopyDLGでｷｬﾝｾﾙ時
		EXIT;

	//	ｺﾋﾟｰﾌﾗｸﾞをTRUEにする
	m_F8CopyFlag := TRUE;

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryのS接続

	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                             ');
		SQL.Add('    MA.Renso                       ');	//	連想ｼﾝﾎﾞﾙ					*
		SQL.ADD('   ,MA.LongName                    ');	//	正式名称					*
		SQL.ADD('   ,MA.SimpleName                  ');	//	簡略名称					*
		SQL.ADD('   ,MA.AnalyzeCode                 ');	//	分析ｺｰﾄﾞ
		SQL.ADD('   ,MA.CharCode                    ');	//	性格ｺｰﾄﾞ
		//	採用区分
		SQL.ADD('   ,MA.BmnUse                      ');	//	部門採用区分
		SQL.ADD('   ,MA.SegUse1                     ');	//	ｾｸﾞﾒﾝﾄ1採用区分
// <120>ADD↓
		SQL.ADD('   ,MA.SegUse2                     ');	//	ｾｸﾞﾒﾝﾄ2採用区分
		SQL.ADD('   ,MA.SegUse3                     ');	//	ｾｸﾞﾒﾝﾄ3採用区分
		SQL.ADD('   ,MA.SegUse4                     ');	//	ｾｸﾞﾒﾝﾄ4採用区分
		SQL.ADD('   ,MA.SegUse5                     ');	//	ｾｸﾞﾒﾝﾄ5採用区分
		SQL.ADD('   ,MA.SegUse6                     ');	//	ｾｸﾞﾒﾝﾄ6採用区分
		SQL.ADD('   ,MA.SegUse7                     ');	//	ｾｸﾞﾒﾝﾄ7採用区分
		SQL.ADD('   ,MA.SegUse8                     ');	//	ｾｸﾞﾒﾝﾄ8採用区分
		SQL.ADD('   ,MA.SegUse9                     ');	//	ｾｸﾞﾒﾝﾄ9採用区分
		SQL.ADD('   ,MA.SegUse10                    ');	//	ｾｸﾞﾒﾝﾄ10採用区分
// <120>ADD↑
		SQL.ADD('   ,MA.BankNCode                   ');	//	銀行ｺｰﾄﾞ
		SQL.ADD('   ,MA.TStartDate                  ');	//	適用開始年月日
		SQL.ADD('   ,MA.TEndDate                    ');	//	適用終了年月日
		//	集計情報
		SQL.ADD('   ,MA.DCKbn                       ');	//	正残区分					*
		SQL.ADD('   ,MA.BPKbn                       ');	//	BS/PL区分					*
		SQL.ADD('   ,MA.KisyuKbn                    ');	//	期首残区分
		SQL.ADD('   ,MA.NonDspKbn                   ');	//	表示／印刷不可区分			*
		SQL.ADD('   ,MA.PerKmkKbn                   ');	//	比率科目区分
		SQL.ADD('   ,MA.DebitCash                   ');	//	借方資金繰ｺｰﾄﾞ
		SQL.ADD('   ,MA.CreditCash                  ');	//	貸方資金繰ｺｰﾄﾞ
		SQL.ADD('   ,MB.FixChgRate                  ');	//	変動費比率
		//	出力情報
		SQL.ADD('   ,MB.MinusKbn                    ');	//	ﾏｲﾅｽ印刷区分				*
		SQL.ADD('   ,MB.SagakuKbn                   ');	//	差額印刷区分				*
		SQL.ADD('   ,MB.ProfitKbn                   ');	//	利益印刷区分				*
		SQL.ADD('   ,MB.MTekiPrn                    ');	//	元帳摘要欄起票者印字区分
		SQL.ADD('   ,MB.MinusName                   ');	//	ﾏｲﾅｽ変換科目名				*
		SQL.ADD('   ,MB.DecoKbn                     ');	//	装飾区分					*
		//	入力条件
		SQL.ADD('   ,MA.InputKbn                    ');	//	仕訳入力区分
		SQL.ADD('   ,MA.DInputKbn                   ');	//	期日入力区分
		SQL.ADD('   ,MA.DInputAlw                   ');	//	期日必須入力区分
		SQL.ADD('   ,MA.TkInputKbn                  ');	//	固定摘要必須入力
		SQL.ADD('   ,MA.TkClassCode                 ');	//　摘要分類ｺｰﾄﾞ
		SQL.ADD('   ,MA.CashCodeKbn                 ');	//	資金繰ｺｰﾄﾞ優先区分
		//	電子帳簿
		SQL.ADD('   ,MB.HisKbn                      ');	//	履歴管理区分
		//	比率
		SQL.ADD('   ,MB.CostRate                    ');	//	個別原価率
		//	電子帳簿
//<019>		SQL.ADD('   ,MB.EBook1Kbn                   ');	//	第一補助電子帳簿採用区分
//<019>		SQL.ADD('   ,MB.EBook2Kbn                   ');	//	第二補助電子帳簿採用区分
		//	公益法人
		SQL.ADD('   ,MB.CharCode2                   ');	//	性格ｺｰﾄﾞ2
        //<117>ADD↓
		//  分類ｺｰﾄﾞ1
		SQL.ADD('   ,MA.BunruiNCode1                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 481 WHEN 2 THEN 491 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode1 AND RDelKbn = 0) BunruiGCode1 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 481 WHEN 2 THEN 491 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode1 AND RDelKbn = 0) BunruiName1 ');
		//  分類ｺｰﾄﾞ2
		SQL.ADD('   ,MA.BunruiNCode2                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 482 WHEN 2 THEN 492 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode2 AND RDelKbn = 0) BunruiGCode2 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 482 WHEN 2 THEN 492 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode2 AND RDelKbn = 0) BunruiName2 ');
		//  分類ｺｰﾄﾞ3
		SQL.ADD('   ,MA.BunruiNCode3                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 483 WHEN 2 THEN 493 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode3 AND RDelKbn = 0) BunruiGCode3 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 483 WHEN 2 THEN 493 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode3 AND RDelKbn = 0) BunruiName3 ');
		//  分類ｺｰﾄﾞ4
		SQL.ADD('   ,MA.BunruiNCode4                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 484 WHEN 2 THEN 494 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode4 AND RDelKbn = 0) BunruiGCode4 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 484 WHEN 2 THEN 494 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode4 AND RDelKbn = 0) BunruiName4 ');
		//  分類ｺｰﾄﾞ5
		SQL.ADD('   ,MA.BunruiNCode5                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 485 WHEN 2 THEN 495 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode5 AND RDelKbn = 0) BunruiGCode5 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 485 WHEN 2 THEN 495 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode5 AND RDelKbn = 0) BunruiName5 ');
		//  分類ｺｰﾄﾞ6
		SQL.ADD('   ,MA.BunruiNCode6                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 486 WHEN 2 THEN 496 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode6 AND RDelKbn = 0) BunruiGCode6 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 486 WHEN 2 THEN 496 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode6 AND RDelKbn = 0) BunruiName6 ');
		//  分類ｺｰﾄﾞ7
		SQL.ADD('   ,MA.BunruiNCode7                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 487 WHEN 2 THEN 497 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode7 AND RDelKbn = 0) BunruiGCode7 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 487 WHEN 2 THEN 497 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode7 AND RDelKbn = 0) BunruiName7 ');
		//  分類ｺｰﾄﾞ8
		SQL.ADD('   ,MA.BunruiNCode8                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 488 WHEN 2 THEN 498 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode8 AND RDelKbn = 0) BunruiGCode8 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 488 WHEN 2 THEN 498 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode8 AND RDelKbn = 0) BunruiName8 ');
		//  分類ｺｰﾄﾞ9
		SQL.ADD('   ,MA.BunruiNCode9                ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 489 WHEN 2 THEN 499 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode9 AND RDelKbn = 0) BunruiGCode9 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 489 WHEN 2 THEN 499 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode9 AND RDelKbn = 0) BunruiName9 ');
		//  分類ｺｰﾄﾞ10
		SQL.ADD('   ,MA.BunruiNCode10               ');
		SQL.ADD('   ,(SELECT GCode FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 490 WHEN 2 THEN 500 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode10 AND RDelKbn = 0) BunruiGCode10 ');
		SQL.ADD('   ,(SELECT Nmk   FROM MMEISHO     ');
		SQL.ADD('     WHERE SetNm = (CASE MA.MasterKbn WHEN 1 THEN 490 WHEN 2 THEN 500 END) ');
		SQL.ADD('       AND NCode = MA.BunruiNCode10 AND RDelKbn = 0) BunruiName10 ');
        //<117>ADD↑

		SQL.ADD('FROM KmkMA MA                      ');//	勘定科目基本ﾏｽﾀ
		SQL.ADD('LEFT OUTER JOIN KmKMB MB ON        ');	//	勘定科目詳細情報
		SQL.ADD('(                                  ');
		SQL.ADD('       MA.MasterKbn = MB.MasterKbn ');
        SQL.ADD('   AND MA.NCode     = MB.NCode     ');
        SQL.Add('   AND MA.CNCode    = MB.CNCode    ');
		SQL.ADD(')                                  ');
		SQL.ADD('WHERE MA.MasterKbn = 1             '); //	ﾏｽﾀ区分(1:勘定科目)
        SQL.ADD('  AND MA.RDelKbn   = 0             ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.ADD('  AND MA.SumKbn    = :JGKbn        ');	//	実在/合計区分
		SQL.ADD('  AND MA.GCode     = :G_Code       ');	//	外部ｺｰﾄﾞ
		SQL.ADD('  AND MA.SubCode   = ''0''         ');	//	細目ｺｰﾄﾞ
		SQL.ADD('  AND MA.BPKbn     = :BsplKbn      ');	//	BS/PL区分

		ParamByName('JGKbn'	 ).AsInteger :=	iSumKbn;				//	実在／合計区分
		ParamByName('G_Code' ).AsInteger :=	m_DLGCopyInfo.CopyCode;	//	外部ｺｰﾄﾞ
		ParamByName('BsplKbn').AsInteger :=	iBPKbn;					//	BS/PL区分

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
// <120>MOD↓
//			m_CopyInfo.BmnUse := GetFld('BmnUse').AsInteger;	//	部門採用区分
//			m_CopyInfo.SegUse := GetFld('SegUse1').AsInteger;	//	ｾｸﾞﾒﾝﾄ1採用区分

			// ------------------------------------------------------------
			//	        部門採用区分、ｾｸﾞﾒﾝﾄ採用区分の割り出し
			// ------------------------------------------------------------
            // 分析ｺｰﾄﾞをｺﾋﾟｰしている場合のみ、設定する
			if (m_DLGCopyInfo.Choice = FALSE or m_DLGCopyInfo.Bunseki = TRUE) then
			begin
				// 外部ｺｰﾄﾞと分析ｺｰﾄﾞを取得する
				// Grid時
				if (Dsp = ICHIRAN) then
					iGCode		:= MemZitsu.FieldByName('Code').AsInteger
				// 詳細時
				else if (Dsp = SYOUSAI) then
					iGCode		:= StrToIntDef(Trim(ECode.Text), 0);

				EMPLOY.Bumon            :=	0;	//	部門
				EMPLOY.Kouji            :=	0;	//	工事
				for iLoop := 0 to 9 do
					EMPLOY.Seg[iLoop]   :=	0;	//	ｾｸﾞﾒﾝﾄ

				// 部門、工事、ｾｸﾞﾒﾝﾄ範囲・採用ﾁｪｯｸを取得する
				MasInfoKmkCodeCheck(iGCode, GetFld('BPKbn').AsInteger, GetFld('AnalyzeCode').AsInteger, EMPLOY);

				// ------------------------------
				//	        部門採用区分
				// ------------------------------
				// 外部ｺｰﾄﾞが部門の採用科目範囲外なら0をｾｯﾄ
				if (EMPLOY.Bumon = 0) then
					m_CopyInfo.BmnUse := 0
				// 範囲内ならｺﾋﾟｰ元の採用区分をｾｯﾄする
				else
					m_CopyInfo.BmnUse := GetFld('BmnUse').AsInteger;

				// ------------------------------
				//	      ｾｸﾞﾒﾝﾄ採用区分
				// ------------------------------
				for iLoop := 0 to 9 do
				begin
					// 外部ｺｰﾄﾞがｾｸﾞﾒﾝﾄの採用科目範囲外なら0をｾｯﾄ
					if (EMPLOY.Seg[iLoop] = 0) then
						m_CopyInfo.SegUse[iLoop] := 0
					// 範囲内ならｺﾋﾟｰ元の採用区分をｾｯﾄする
					else
					m_CopyInfo.SegUse[iLoop] := GetFld('SegUse'+IntToStr(iLoop + 1)).AsInteger;
                end;
			end
            else
            begin
            	// クリアしておく(採用区分はMemZitsuBeforePostで設定する)
				m_CopyInfo.BmnUse := 0;
				for iLoop := 0 to 9 do
					m_CopyInfo.SegUse[iLoop] := 0;
			end;
// <120>MOD↑
			//Grid時
			if ( Dsp = ICHIRAN ) then
			begin
				//実在
				if (Choice = ZITSUZAI) then
				begin
					MemZitsu.Open;
					MemZitsu.Edit;
					//	連想ｼﾝﾎﾞﾙ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Rensou = TRUE) then
						MemZitsu.FieldByName('Ren'		  ).AsString  := GetFld('Renso'	    ).AsString;	//	連想ｼﾝﾎﾞﾙ
					//	正式名称
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.LongName = TRUE) then
						MemZitsu.FieldByName('LongName'	  ).AsString  := GetFld('LongName'	 ).AsString;	//	正式名称
					//	簡略名称
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.SimpleName = TRUE) then
						MemZitsu.FieldByName('SName'	  ).AsString  := GetFld('SimpleName' ).AsString;	//	簡略名称
					//	性格ｺｰﾄﾞ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Seikaku = TRUE) then
						MemZitsu.FieldByName('SeikakuData').AsInteger := GetFld('CharCode'	 ).AsInteger;	//	性格ｺｰﾄﾞ
					//	分析ｺｰﾄﾞ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Bunseki = TRUE) then
					begin
						MemZitsu.FieldByName('BunsekiNO'  ).AsInteger := GetFld('AnalyzeCode').AsInteger;	//	分析ｺｰﾄﾞ
						MemZitsu.FieldByName('Bunseki'	  ).AsString  := GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iDummy);	//	分析名称
					end;

					m_CopyInfo.SeiZan	   := GetFld('DCKbn'	  ).AsInteger;	//	正残区分
					m_CopyInfo.BPKbn	   := GetFld('BPKbn'	  ).AsInteger;	//	BS/PL区分
					m_CopyInfo.KisyuZan	   := GetFld('KisyuKbn'	  ).AsInteger;	//	期首残区分
					m_CopyInfo.DspPri	   := GetFld('NonDspKbn'  ).AsInteger;	//	表示／印刷不可区分
					m_CopyInfo.HiritsuKmk  := GetFld('PerKmkKbn'  ).AsInteger;	//	比率科目区分
					m_CopyInfo.KariKuri	   := GetFld('DebitCash'  ).AsInteger;	//	借方資金繰ｺｰﾄﾞ
					m_CopyInfo.KashiKuri   := GetFld('CreditCash' ).AsInteger;	//	貸方資金繰ｺｰﾄﾞ
					m_CopyInfo.Hendouhi	   := GetFld('FixChgRate' ).AsInteger;	//	変動費比率
					m_CopyInfo.MainasuPri  := GetFld('MinusKbn'	  ).AsInteger;	//	ﾏｲﾅｽ印刷区分
					m_CopyInfo.SagakuPri   := GetFld('SagakuKbn'  ).AsInteger;	//	差額印刷区分
					m_CopyInfo.RiekiPri	   := GetFld('ProfitKbn'  ).AsInteger;	//	利益印刷区分
					m_CopyInfo.MTekiPrn	   := GetFld('MTekiPrn'	  ).AsInteger;	//	元帳摘要欄起票者印字区分
					m_CopyInfo.MainasuName := GetFld('MinusName'  ).AsString;	//	ﾏｲﾅｽ変換科目名
					m_CopyInfo.Sousyoku	   := GetFld('DecoKbn'	  ).AsInteger;	//	装飾区分
					m_CopyInfo.Shiwake	   := GetFld('InputKbn'	  ).AsInteger;	//	仕訳入力区分
					m_CopyInfo.KijitsuInp  := GetFld('DInputKbn'  ).AsInteger;	//	期日入力区分
					m_CopyInfo.KiJitsuHis  := GetFld('DInputAlw'  ).AsInteger;	//	期日必須入力区分
					m_CopyInfo.KoteiTeki   := GetFld('TkInputKbn' ).AsInteger;	//	固定摘要必須入力
					m_CopyInfo.TekiBunCode := gfnGetTekiMA_GCODE(GetFld('TkClassCode').AsInteger);	//	摘要分類ｺｰﾄﾞ
					m_CopyInfo.ShikuriYu   := GetFld('CashCodeKbn').AsInteger;	//	資金繰ｺｰﾄﾞ優先区分
					m_CopyInfo.Rireki	   := GetFld('HisKbn'	  ).AsInteger;	//	履歴管理区分
				//--- HIS0123 St -----
					m_CopyInfo.CostRate	   := GetFld('CostRate'	  ).AsInteger;	//	個別原価率
// <019>					m_CopyInfo.EBook1Kbn   := GetFld('EBook1Kbn'  ).AsInteger;	//	第1補助電子帳簿採用区分
// <019>					m_CopyInfo.EBook2Kbn   := GetFld('EBook2Kbn'  ).AsInteger;	//	第2補助電子帳簿採用区分
					m_CopyInfo.CharCD2	   := GetFld('CharCode2'  ).AsInteger;	//	性格ｺｰﾄﾞ2

				//--- HIS0123 Ed -----
                	//<117>ADD↓
                    //分類
                    if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Bunrui = TRUE) then
                    begin
                        m_CopyInfo.BunruiNCode1  := GetFld('BunruiNCode1' ).AsFloat;
                        m_CopyInfo.BunruiNCode2  := GetFld('BunruiNCode2' ).AsFloat;
                        m_CopyInfo.BunruiNCode3  := GetFld('BunruiNCode3' ).AsFloat;
                        m_CopyInfo.BunruiNCode4  := GetFld('BunruiNCode4' ).AsFloat;
                        m_CopyInfo.BunruiNCode5  := GetFld('BunruiNCode5' ).AsFloat;
                        m_CopyInfo.BunruiNCode6  := GetFld('BunruiNCode6' ).AsFloat;
                        m_CopyInfo.BunruiNCode7  := GetFld('BunruiNCode7' ).AsFloat;
                        m_CopyInfo.BunruiNCode8  := GetFld('BunruiNCode8' ).AsFloat;
                        m_CopyInfo.BunruiNCode9  := GetFld('BunruiNCode9' ).AsFloat;
                        m_CopyInfo.BunruiNCode10 := GetFld('BunruiNCode10').AsFloat;
                	end;
                    //<117>ADD↑
				end
				//合計
				else if (Choice = GOUKEI) then
				begin
					MemGou.Open;
					MemGou.Edit;
					//	連想ｼﾝﾎﾞﾙ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Rensou = TRUE) then
						MemGou.FieldByName('GRen'		 ).AsString  := GetFld('Renso'     ).AsString;	//	連想ｼﾝﾎﾞﾙ
					//	正式名称
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.LongName = TRUE) then
						MemGou.FieldByName('GLongName'	 ).AsString  := GetFld('LongName'  ).AsString;	//	正式名称
					//	簡略名称
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.SimpleName = TRUE) then
						MemGou.FieldByName('GSName'		 ).AsString  := GetFld('SimpleName').AsString;	//	簡略名称
					//	出力情報
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.OutInfo = TRUE) then
						MemGou.FieldByName('SousyokuData').AsInteger :=	GetFld('DecoKbn'   ).AsInteger;	//	装飾区分

					m_CopyInfo.SeiZan	   := GetFld('DCKbn'	  ).AsInteger;	//	正残区分
					m_CopyInfo.BPKbn	   := GetFld('BPKbn'	  ).AsInteger;	//	BS/PL区分
					m_CopyInfo.DspPri	   := GetFld('NonDspKbn'  ).AsInteger;	//	表示／印刷不可区分
					m_CopyInfo.MainasuPri  := GetFld('MinusKbn'	  ).AsInteger;	//	ﾏｲﾅｽ印刷区分
					m_CopyInfo.SagakuPri   := GetFld('SagakuKbn'  ).AsInteger;	//	差額印刷区分
					m_CopyInfo.RiekiPri	   := GetFld('ProfitKbn'  ).AsInteger;	//	利益印刷区分
					m_CopyInfo.MainasuName := GetFld('MinusName'  ).AsString;	//	ﾏｲﾅｽ変換科目名
					m_CopyInfo.Sousyoku	   := GetFld('DecoKbn'	  ).AsInteger;	//	装飾区分
					m_CopyInfo.CharCD2	   := GetFld('CharCode2'  ).AsInteger;	//	性格ｺｰﾄﾞ2<058>
				end;
			end
			//詳細時
			else if (Dsp = SYOUSAI) then
			begin
				//	連想ｼﾝﾎﾞﾙ
				if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Rensou = TRUE) then
					ERen.Text := GetFLD('Renso').AsString;
				//	正式名称
				if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.LongName = TRUE) then
					ELName.Text := GetFLD('LongName').AsString;
				//	簡略名称
				if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.SimpleName = TRUE) then
					ESName.Text := GetFLD('SimpleName').AsString;
				//	正残区分
				if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Seizan = TRUE) then
				begin
					ESeiZanCode.Value	:= GetFLD('DCKbn').AsInteger;		//	正残区分
					GetList(ESeiZanCode,LSeiZanName);						//	正残区分内容
				end;
				//	すべて
				if (m_DLGCopyInfo.Choice = FALSE) then
				begin
                	if (Choice = GOUKEI) then
					begin
						EBPCode.Value := GetFLD('BPKbn'	   ).AsInteger;			//	BS/PL区分
						GetList(EBPCode,LBPName);								//	BS/PL区分内容
					end;
					EDPCode.Value := GetFLD('NonDspKbn').AsInteger;			//	表示／印刷不可区分
					GetList(EDPCode,LDPName);								//	表示／印刷不可区分内容
				end;
				//	出力情報
				if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.OutInfo = TRUE) then
				begin
					EMainasuCode.Value  := GetFLD('MinusKbn' ).AsInteger;		//	ﾏｲﾅｽ印刷区分
					GetList(EMainasuCode,LMainasuName);							//	ﾏｲﾅｽ印刷区分内容
					ESagakuCode.Value   := GetFLD('SagakuKbn').AsInteger;		//	差額印刷区分
					GetList(ESagakuCode,LSagakuName);							//	差額印刷区分内容
					ERiekiCode.Value    := GetFLD('ProfitKbn').AsInteger;		//	利益印刷区分
					GetList(ERiekiCode,LRiekiName);								//	利益印刷区分内容
					EMainaName.Text	    := GetFLD('MinusName').AsString;		//	ﾏｲﾅｽ変換科目名
					ESousyokuCode.Value := GetFLD('DecoKbn'	 ).AsInteger;		//	装飾区分
					GetList(ESousyokuCode,LSousyokuName);						//	装飾区分内容
				end;

                m_CopyInfo.CharCD2 := GetFld('CharCode2').AsInteger;	        //	性格ｺｰﾄﾞ2<058>

				if (Choice = ZITSUZAI) then
				begin
					//	分析ｺｰﾄﾞ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Bunseki = TRUE) then
					begin
						EBunCode.Value	 :=	GetFLD('AnalyzeCode').AsInteger;							    //	分析ｺｰﾄﾞ
						LBunName.Caption :=	GetSKmkMA(BUNSEKI,GetFLD('AnalyzeCode').AsInteger,iDummy);	//	分析名称
						for iLoop := 0 to 112 do
						begin
							if (aDefault[iLoop].Code = GetFLD('AnalyzeCode').AsInteger) then
							begin
								GetNameSKmkMA(aDefault[iLoop].YouyakuCode,iCode,sName,iDummy);	//	要約
								EYouCode.Value	   := iCode;
								LYouName.Caption   := sName;
								GetNameSKmkMA(aDefault[iLoop].KoteiCode,iCode,sName,iDummy);	//	固定費
								EKotei.Value	   := iCode;
								LKoteiName.Caption := sName;
								GetNameSKmkMA(aDefault[iLoop].HendoCode,iCode,sName,iDummy);	//	変動費
								EHendo.Value	   := iCode;
								LHendoName.Caption := sName;
								break;
							end;
						end;
						EBPCode.Value := GetFLD('BPKbn'	   ).AsInteger;			//	BS/PL区分
						GetList(EBPCode,LBPName);								//	BS/PL区分内容

// <120>ADD↓
						// 分析ｺｰﾄﾞｺﾋﾟｰ時は、部門、ｾｸﾞﾒﾝﾄの採用区分をｴﾃﾞｨｯﾄにｾｯﾄする
						// 部門採用区分
						EBmnUse.Value	:= m_CopyInfo.BmnUse;
						GetList(EBmnUse, LBmnUse);

						// ｾｸﾞﾒﾝﾄ採用区分
						for iLoop := 0 to 9 do
						begin
							TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop + 1))).Value
									:= m_CopyInfo.SegUse[iLoop];
							GetList(TMNumEdit(MJSFindCtrl(Self,'ESegUse'+IntToStr(iLoop + 1))),
									TMLabel(MJSFindCtrl(Self,'LSegUse'+IntToStr(iLoop + 1))));
						end;
// <120>ADD↑
					end;
					//	性格ｺｰﾄﾞ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Seikaku = TRUE) then
					begin
						ESeikakuCode.Value	 :=	GetFLD('CharCode').AsInteger;					//	性格ｺｰﾄﾞ
						LSeikakuName.Caption :=	'' + aSeikaku[GetFLD('CharCode').AsInteger];	//	性格ｺｰﾄﾞ内容
					end;
					//	期首残
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Kisyu = TRUE) then
					begin
						EKisyuCode.Value :=	GetFLD('KisyuKbn').AsInteger;						//	期首残区分
						GetList(EKisyuCode,LKisyuName);											//	期首残区分内容
					end;
					//	すべて
					if (m_DLGCopyInfo.Choice = FALSE) then
					begin
						EHiritsuCode.Value := GetFLD('PerKmkKbn').AsInteger;		//	比率科目区分
						GetList(EHiritsuCode,LHiritsuName);							//	比率科目区分内容
						ERirekiKbnCode.Value := GetFLD('HisKbn').AsInteger;			//	履歴管理区分
						GetList(ERirekiKbnCode,LRirekiKbnName);						//	履歴管理区分内容

					//--- HIS0123 St -----
						m_CopyInfo.CostRate	   := GetFld('CostRate'	  ).AsInteger;	//	個別原価率
// <019>						m_CopyInfo.EBook1Kbn   := GetFld('EBook1Kbn'  ).AsInteger;	//	第1補助電子帳簿採用区分
// <019>						m_CopyInfo.EBook2Kbn   := GetFld('EBook2Kbn'  ).AsInteger;	//	第2補助電子帳簿採用区分
// <058>						m_CopyInfo.CharCD2	   := GetFld('CharCode2'  ).AsInteger;	//	性格ｺｰﾄﾞ2

					//--- HIS0123 Ed -----
					end;
					//	借方資金繰ｺｰﾄﾞ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Kari = TRUE) then
					begin
						EKariCode.Value	  :=                                        //	借方資金繰ｺｰﾄﾞ
                                                                                    //  <055>
                            gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);
						LKariName.Caption :=                                        //	貸方資金繰ｺｰﾄﾞ内容
							GetSKmkMA(SHIKINGURI, Trunc(EKariCode.Value), iDummy);  //  <055>
					end;
					//	貸方資金繰ｺｰﾄﾞ
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Kashi = TRUE) then
					begin
						EKashiCode.Value   := 				                        //	貸方資金繰ｺｰﾄﾞ
																					//  <055>
							gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);
						LKashiName.Caption :=                                       //	貸方資金繰ｺｰﾄﾞ内容
							GetSKmkMA(SHIKINGURI, Trunc(EKashiCode.Value), iDummy); //  <055>
					end;
					//	比率
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Hiritsu = TRUE) then
						EHendouhi.Value	  := GetFLD('FixChgRate').AsFloat;					//	変動費比率
					//	出力情報
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.OutInfo = TRUE) then
					begin
						EKihyousya.Value :=	GetFLD('MTekiPrn').AsInteger;					//	元帳摘要欄起票者印字区分
						GetList(EKihyousya,LKihyousyaName);									//	元帳摘要欄起票者印字区分内容
					end;
					//	入力条件
					if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Inp = TRUE) then
					begin
						EShiwakeCode.Value	 :=	GetFLD('InputKbn'  ).AsInteger;				//	仕訳入力区分
						GetList(EShiwakeCode,LShiwakeName);									//	仕訳入力区分内容

						case GetFLD('DInputKbn').AsInteger of	//	期日入力区分
							0:	EKijitsuCode.Value	:=	0;		//	入力なし
							1:	//	正残側のみ
							begin
								if (GetFLD('DInputAlw').AsInteger = 0) then		//	期日必須入力区分の時
									EKijitsuCode.Value	:=	1					//	任意入力
								else
									EKijitsuCode.Value	:=	2;					//	必須入力
							end;
							2:	//	貸借入力
							begin
								if (GetFLD('DInputAlw').AsInteger = 0) then		//	期日必須入力区分の時
									EKijitsuCode.Value	:=	3					//	任意入力
								else
									EKijitsuCode.Value	:=	4;					//	必須入力
							end;
							3:	//	負残側のみ
							begin
								if (GetFLD('DInputAlw').AsInteger = 0) then		//	期日必須入力区分の時
									EKijitsuCode.Value	:=	5					//	任意入力
								else
									EKijitsuCode.Value	:=	6;					//	必須入力
							end;
						end;
						GetList(EKijitsuCode,LKijitsuName);							//	期日入力区分内容
						ETekiCode.Value := GetFLD('TkInputKbn').AsInteger;			//	固定摘要必須入力
						GetList(ETekiCode,LTekiName);								//	固定摘要必須入力内容
						ETekiyouBunrui.Value :=	gfnGetTekiMA_GCODE(GetFLD('TkClassCode').AsInteger);	//	摘要分類ｺｰﾄﾞ
						sTekiBunName := GetTekiMA(Trunc(ETekiyouBunrui.Value));		//	摘要分類ｺｰﾄﾞ内容
						if (sTekiBunName = 'Null') then
							LTekiyoubunrui.Caption := ''
						else
							LTekiyoubunrui.Caption := sTekiBunName;
						EShikuriCode.Value := GetFLD('CashCodeKbn').AsInteger;		//	資金繰ｺｰﾄﾞ優先区分
						GetList(EShikuriCode,LShikuriName);							//	資金繰ｺｰﾄﾞ優先区分内容
					end;

                	//<117>ADD↓
                    //  分類
                    if (m_DLGCopyInfo.Choice = FALSE) or (m_DLGCopyInfo.Bunrui = TRUE) then
                    begin
                        for iLoop := Low(m_Bunrui) to High(m_Bunrui) do
                        begin
                            m_Bunrui[iLoop].NCode		  := GetFld('BunruiNCode' + IntToStr(iLoop)).AsFloat;
                            m_Bunrui[iLoop].GCode		  := GetFld('BunruiGCode' + IntToStr(iLoop)).AsString;
                            m_Bunrui[iLoop].ECode.Text	  := GetFld('BunruiGCode' + IntToStr(iLoop)).AsString;
                            m_Bunrui[iLoop].LName.Caption := GetFld('BunruiName'  + IntToStr(iLoop)).AsString;
                        end;
                    end;
                    //<117>ADD↑
				end;
			end;
		end;
	end;
	DmqData.Close;
	DmqData.Free;
end;

//**********************************************************************
//*		Proccess	:	科目別補助の消費税区分をｸﾘｱする <116>ADD
//*		Paramater	:	kmkNCode: 科目内部ｺｰﾄﾞ
//**********************************************************************
procedure TJNTCRP009001f.ClearKmkSubTaxKbn(kmkNCode: Extended);
var
	query: TMQuery;
begin
	query := nil;
	try
        query := TMQuery.Create(Self);

        MDataModule.SetDBInfoToQuery(dbCorp_Select, query);
        MDataModule.BeginTran(dbCorp_Select);

        with query do
        begin
        	Close;
            SQL.Clear;
            SQL.Add('UPDATE KmkMA SET');
            SQL.Add('TaxKbn = 0');
            SQL.Add(',STaxCode = 0');
            SQL.Add(',STaxRate = 0');
            SQL.Add(',BTaxCode = 0');
            SQL.Add(',BTaxRate = 0');
            SQL.Add('WHERE MasterKbn = 2');
            SQL.Add('AND SumKbn = 0');
            SQL.Add('AND RDelKbn = 0');
            SQL.Add('AND NCode = ' + FormatFloat('0', kmkNCode));

            if ExecSQL then
            begin
                MDataModule.Commit(dbCorp_Select);
            end;
        end;
	finally
		if Assigned(query) then
        begin
			query.Close;
            query.Free;
        end;

        if dbCorp_Select.InTransaction then
        begin
        	ErrorMessageDsp(query);
        	MDataModule.Rollback(dbCorp_Select);
        end;
    end;
end;

// <100>ADD↓
//************************************************************************
//*		Component		:	B_Order ( TMSpeedButton )
//*
//*		Event			:	OnClick
//*		Name			:	Y.Kuroda（MJS）
//************************************************************************
procedure TJNTCRP009001f.B_Order_Click(Sender: TObject);
begin
    B_Order.Enabled := False;
    SessionPractice(C_ST_PROCESS);

	// 加算体系のﾁｪｯｸ
    fnTreeCheck;

    // 加算体系の更新
	UpdMasTreee2;

	// 出力順序自動登録DLG起動
	ShowOrderDLG;

   	// 科目出力順序起動
	if m_AnotherPrgStFlg then
		AnotherStart;

    SessionPractice(C_ST_PROCESS);
	B_Order.Enabled := True;
end;
// <100>ADD↑
// <100>ADD↓
//**********************************************************************
//*		Proccess	:	加算体系更新処理
//*		Name		:	Y.Kuroda
//*		Date		:	2011/03/14
//**********************************************************************
procedure TJNTCRP009001f.UpdMasTreee2;
var
	Dmpuery				:	TMQuery;
	iarMasterKbn 		:	Array of integer;
	MasTreee2Dlgf		:	TJNTMasTreee2Dlgf;
begin
	Dmpuery 			:= Nil;
	iarMasterKbn 		:= Nil;
	MasTreee2Dlgf 		:= Nil;

    // 出力順序起動前に、自動登録させる
    if (gbKmkTree2Flag = True) then
    begin
        // 科目加算体系ﾏｽﾀ2を呼ぶ処理
        SetLength( iarMasterKbn, 1 );
        // 勘定科目(1)
        iarMasterKbn[0] :=  1;

        // 工事管理種別がなしの時
        if ( giKoujiSyubetsu = 0 ) then
        begin
            SetLength( iarMasterKbn, 1 );
            // 勘定科目(1)
            iarMasterKbn[0] := 1;
        end
        else
        begin
            SetLength( iarMasterKbn, 3 );
            // 勘定科目(1)
            iarMasterKbn[0] := 1;
            // 工事合計(8)
            iarMasterKbn[1] := 8;
            // 工事集計(9)
            iarMasterKbn[2] := 9;
        end;


        // 加算更新処理
		try
            MasTreee2Dlgf:= TJNTMasTreee2Dlgf.Create( Self );
            if MasTreee2Dlgf.ExecTree2(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot,
                                        MDataModule,
                                        ComArea.m_iCopNo,
                                        iarMasterKbn, Dmpuery ) < 0 then
            begin
                if (Dmpuery <> nil) then
                begin
                    ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, Dmpuery );
                    MjsMessageBoxEx(AOwner, // <005>
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    FALSE
                                   );
                    Dmpuery.Free;
                end
                else
                begin
                    ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10,3);
                    MjsMessageBoxEx(AOwner, // <005>
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    FALSE
                                   );
                end;
            end;
		finally
			if Assigned(MasTreee2Dlgf) then
			begin
		        MasTreee2Dlgf.Close;
	    	    MasTreee2Dlgf.Free;
			end;
        end;
    end;
    gbKmkTree2Flag	:=	False;

    //	合計の部門採用区分を更新
    fnBmnUseCheck();

    //　合計のｾｸﾞﾒﾝﾄ1採用区分を更新
    fnSegUseCheck();
end;
// <100>ADD↑
// <100>ADD↓
//**********************************************************************
//*		Proccess	:	出力順序自動登録DLG表示
//*		Name		:	Y.Kuroda
//*		Date		:	2011/03/14
//**********************************************************************
procedure TJNTCRP009001f.ShowOrderDLG;
var
	iLoop				:	Integer;
	iLoop2				:	Integer;
	iRet				:	Integer;
	JNTCRP009001_D5F	:	TJNTCRP009001_D5F;
begin
	m_AnotherPrgStFlg := False;
    JNTCRP009001_D5F := nil;

	//	自動登録ﾀﾞｲｱﾛｸﾞ表示
    try
        JNTCRP009001_D5F :=  TJNTCRP009001_D5F.Create(Self);
        SetLength(JNTCRP009001_D5F.m_KmkRecNew,0);
        for iLoop := 0 to Length(m_KmkOrder)-1 do
        begin
            // 合計科目
            if m_KmkOrder[iLoop].Kbn = 1 then
                Continue;

            // 新規追加されたが、削除された
            if m_KmkOrder[iLoop].Delete = True then
				Continue;

            // 分析コードが0：非会計科目
            if m_KmkOrder[iLoop].AnalyzeCode = 0 then
                Continue;


            SetLength(JNTCRP009001_D5F.m_KmkRecNew,Length(JNTCRP009001_D5F.m_KmkRecNew)+1);
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].MasKbn 		:= m_KmkOrder[iLoop].MasKbn;		//	ﾏｽﾀ区分
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].NCode 			:= m_KmkOrder[iLoop].NCode;			//	内部ｺｰﾄﾞ
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].GCode 			:= m_KmkOrder[iLoop].GCode;			//	外部ｺｰﾄﾞ
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].Kbn 			:= m_KmkOrder[iLoop].Kbn;			//	実在/合計区分
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SName 			:= m_KmkOrder[iLoop].SName;			//	簡略名称
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].LName 			:= m_KmkOrder[iLoop].LName;			//	正式名称
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].AnalyzeCode	:= m_KmkOrder[iLoop].AnalyzeCode;	//	分析ｺｰﾄﾞ
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].AddOk 			:= m_KmkOrder[iLoop].AddOk;			//	すでに登録済み
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].BPKbn 			:= m_KmkOrder[iLoop].BPKbn;			//	BS/PL区分
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].BmnUse 		:= m_KmkOrder[iLoop].BmnUse;		//	部門採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse1 		:= m_KmkOrder[iLoop].SegUse1;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse2 		:= m_KmkOrder[iLoop].SegUse2;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse3 		:= m_KmkOrder[iLoop].SegUse3;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse4 		:= m_KmkOrder[iLoop].SegUse4;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse5 		:= m_KmkOrder[iLoop].SegUse5;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse6 		:= m_KmkOrder[iLoop].SegUse6;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse7 		:= m_KmkOrder[iLoop].SegUse7;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse8 		:= m_KmkOrder[iLoop].SegUse8;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse9 		:= m_KmkOrder[iLoop].SegUse9;		//	セグメント採用
            JNTCRP009001_D5F.m_KmkRecNew[Length(JNTCRP009001_D5F.m_KmkRecNew)-1].SegUse10 		:= m_KmkOrder[iLoop].SegUse10;		//	セグメント採用
        end;

        iRet :=	JNTCRP009001_D5F.DLG(AOwner,MDataModule,dbCorp_Select,pointer(m_pRec),m_YearKbn);

		// すでに自動登録済み区分をコピー
        for iLoop := 0 to Length(JNTCRP009001_D5F.m_KmkRecNew)-1 do
        begin
            for iLoop2 := 0 to Length(m_KmkOrder)-1 do
            begin
                if JNTCRP009001_D5F.m_KmkRecNew[iLoop].NCode = m_KmkOrder[iLoop2].NCode then
                begin
                    m_KmkOrder[iLoop2].AddOk := JNTCRP009001_D5F.m_KmkRecNew[iLoop].AddOk;
                    Break;
                end;
            end;
        end;

		if (JNTCRP009001_D5F.m_bAnoPrgStFlg) then
			m_AnotherPrgStFlg := True;	// 別プログラム起動フラグ

    finally
        if Assigned(JNTCRP009001_D5F) then
        begin
            JNTCRP009001_D5F.Release;
        end;
    end;
end;
// <100>ADD↑
// <100>ADD↓
//**************************************************************************
//	Proccess  :	別プログラム起動 
//	Name	  : Y.Kuroda
//	Date	  :	2011/ 03 / 08
//	Parameter :	なし
//	Retrun	  : なし
//**************************************************************************
procedure TJNTCRP009001f.AnotherStart;
var
	AppPrm				:	TAppParam;
    AnotherParam		:	rcANOTHER_PARAM;
begin
    //科目出力順序起動
    AnotherParam.iPrgType		:= 0;	                            // 起動プログラムの種類→Formは0
    AnotherParam.iSysCD			:= 3110;                            // ｼｽﾃﾑｺｰﾄﾞ     -From 0
    AnotherParam.iOptCD			:= 0;                               // ｵﾌﾟｼｮﾝﾝｺｰﾄﾞ
    AnotherParam.iPrgCD		    := 140000;                          // ﾌﾟﾛｸﾞﾗﾑｺｰﾄﾞ
    AnotherParam.iCorpCode		:= m_Base_pRec^.m_iCorpCode;        // 会社ｺｰﾄﾞ
    AnotherParam.iCorpSubCode	:= m_Base_pRec^.m_iCorpSubCode;     // 開始年月

    AppPrm.iAction		:= ACTID_ANOTHERSTART;
    AppPrm.pRecord		:= @TMjsAppRecord(m_Base_pRec^);

    //親エントリ関数なし
    if TMjsAppRecord(m_Base_pRec^).m_pOwnerForm = nil then
    begin
        exit;
    end;

    //起動
    AppPrm.pActionParam	:= @AnotherParam;
    TMjsAppRecord(m_Base_pRec^).m_pOwnerEntry(@AppPrm);
end;
// <100>ADD↑

//**********************************************************************
//*		Proccess	:	評価用区分のﾁｪｯｸ
//*		Name		:	H.Endo
//*		Date		:	2003/05/13
//**********************************************************************
procedure  TJNTCRP009001f.fnTestSubUseChk();
var
	Qe		:	TMQuery;
	Dsp		:	String;
	cNode	:	TTreeNode;
	wkRec	:	^TaikeiRec;

begin
	cNode := TreeView.Selected;
	wkRec := cNode.Data;
	if not((wkRec.MasKbn = 1) and (wkRec.Kbn = 0)) then
		exit;

	Qe := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );		//	DBとMQueryの接続

	with Qe do
	begin
		Close ();
		SQL.Clear;
		SQL.ADD('SELECT                     ');
		SQL.ADD('   SubKmkUse               ');	//	細目科目採用区分
        SQL.ADD('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
        SQL.ADD('WHERE RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
		SQL.ADD('  AND MasterKbn = 1        ');	//	ﾏｽﾀ区分(1:勘定科目)
		SQL.ADD('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
        SQL.ADD('  AND NCode     = :Code    ');	//	内部ｺｰﾄﾞ
        SQL.ADD('  AND SubNCode  = 0        ');	//	科目別補助内部ｺｰﾄﾞ

        ParamByName ('Code').AsFloat := wkRec.NCode;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(Qe);
			Close;
			Free;
			Exit;
		end;

		if EOF <> TRUE then	//	ﾚｺｰﾄﾞがあったら
		begin
			case GetFld('SubKmkUse').AsInteger of
				0: Dsp := 'なし';
				1: Dsp := 'あり';
			end;
		end;
	end;
	Qe.Close;
	Qe.Free;

	showmessage('科目｢'+IntToStr(wkRec.GCode)+'｣の科目別補助採用区分は｢'+Dsp+'｣');
end;


// =============================================================================
//      印刷処理<PRN>
// =============================================================================



//-----------------------------------------------------------------------------
// B_PrintClick()   <PRN>
//	< 印刷処理 >
//      PARAM   : Sender    :   TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.B_PrintClick(Sender: TObject);
var
	iDlg			    :	Integer;
	iReturn			    :	Integer;
//    DmqPrint		    :	TMQuery;
	sTitle			    :	TStringList;
	sMemFld			    :	TStringList;
	pOverCodeListRec    :	POverCodeRec;
	iLoop			    :	Integer;
    iSelectRep,
    lvRet               :   Integer;
    JNTPDlg             :   TFrmJNTPDialog;
begin
    iSelectRep := 0;

    // 販売ポインタ設定
    m_cJNTArea.setSelAppRecord;

    // 範囲ﾀﾞｲｱﾛｸﾞを表示する
    JNTPDlg := TFrmJNTPDialog.Create(Self, @uvHani);
    lvRet   := JNTPDlg.ShowModal;
    JNTPDlg.Free;

	// <Del10-VerUp001> ST
    // TFDConnectionのマッピングをクリア
	dbCorp_Select.FormatOptions.MapRules.Clear;
	dbCorp_Select.FormatOptions.OwnMapRules := False;
	// <Del10-VerUp001> ED

    // MQueryの構築
//    DmqPrint := TMQuery.Create( Application );
    // DBとMQueryの接続
//    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqPrint );

    sTitle	:=	TStringList.Create;
    sMemFld :=	TStringList.Create;


    try
        //結果を判断する
        case lvRet of
         0: //ｷｬﾝｾﾙ
            begin
                Exit;
            end;
         1:	//通常
            begin
                MJSPrnDlgf	    :=  uvHani.MJSPrnDlgf;
	            PrnSupport      :=  uvHani.PrnSupport;
                mjspre		    :=  uvHani.mjspre;

                gfnSelSetPrnInfo (PrnSupport, uvSelSys);

                case uvHani.pvrPattern of
                    0:  iSelectRep  :=  JITSUZAI_K;		                // 実在(簡略)
                    1:	iSelectRep  :=  ZITSUZAI;			            // 実在(詳細)
                    2:	iSelectRep  :=  SAIMOKU;			            // 細目
                    3:	iSelectRep  :=  GOUKEI;			                // 合計
                    4:	iSelectRep  :=  TAIKEI;			                // 体系
                    5:	iSelectRep  :=  TAIKEILIST;		                // 体系2(実在)
                    6:	iSelectRep  :=  TAIKEILIST_G;		            // 体系2(合計)
                    7:	iSelectRep  :=  ICHIRAN_J;		                // 科目ｺｰﾄﾞ一覧
                    8:	iSelectRep  :=  ICHIRAN_G;		                // 科目ｺｰﾄﾞ一覧
                    9:	iSelectRep  :=  HENDO;			                // 変動損益関係ﾘｽﾄ
                end;

                // 帳票出力用ﾚｺｰﾄﾞ集計処理
                case iSelectRep of
                    // ----------------------------
                    //	    実在科目登録リスト
                    // ----------------------------
                    ZITSUZAI:
                    begin
                        PrnSupport.ApRB				:=	RList;
			            PrnSupport.strDocName		:=	('実在科目登録リスト');
            			PrnSupport.pPage			:=	SVppPage;
            			PrnSupport.pDate			:=	SVppDate;
            			PrnSupport.pCorpCode		:=	LppCorpCode;
            			PrnSupport.pCorpName		:=	LppCorpName;
            			PrnSupport.pAccountOffice	:=	LppAccOffice;
                    end;
                    // ----------------------------
                    //      科目別補助登録リスト
                    // ----------------------------
                    SAIMOKU:
                    begin
                        PrnSupport.ApRB				:=	RSaimoku;
            			PrnSupport.strDocName		:=	('科目別補助登録リスト');
            			PrnSupport.pPage			:=	R_SPage;
            			PrnSupport.pDate			:=	R_SDate;
            			PrnSupport.pCorpCode		:=	R_SCorpNo;
            			PrnSupport.pCorpName		:=	R_SCorpName;
            			PrnSupport.pAccountOffice	:=	R_SKaikeiName;
                    end;
                    // ----------------------------
                    //      合計科目登録リスト
                    // ----------------------------
                    GOUKEI:
                    begin
                        PrnSupport.ApRB				:=	RGoukei;
            			PrnSupport.strDocName		:=	('合計科目登録リスト');
            			PrnSupport.pPage			:=	R_GPage;
               			PrnSupport.pDate			:=	R_GDate;
            			PrnSupport.pCorpCode		:=	R_GCorpNo;
            			PrnSupport.pCorpName		:=	R_GCorpName;
            			PrnSupport.pAccountOffice	:=	R_GKaikeiName;
                    end;
                    // ----------------------------
                    //      科目登録リスト
                    // ----------------------------
            		TAIKEI:
            		begin
            			PrnSupport.ApRB				:=	RTaikei;
            			PrnSupport.strDocName		:=	('科目登録リスト');
            			PrnSupport.pPage			:=	R_TPage;
            			PrnSupport.pDate			:=	R_TDate;
            			PrnSupport.pCorpCode		:=	R_TCorpNo;
            			PrnSupport.pCorpName		:=	R_TCorpName;
            			PrnSupport.pAccountOffice	:=	R_TKaikeiName;
                    end;
                    // ----------------------------
                    //      科目登録リスト(簡略)
                    // ----------------------------
            		JITSUZAI_K:
            		begin
                        PrnSupport.ApRB				:=	RJitsuzai_K;
            			PrnSupport.strDocName		:=	('科目登録リスト(簡略)');
            			PrnSupport.pPage			:=	RSV_JitsuK_Page;
            			PrnSupport.pDate			:=	RSV_JitsuK_Date;
            			PrnSupport.pCorpCode		:=	RL_Jitsu_CorpCode;
            			PrnSupport.pCorpName		:=	RL_JitsuK_CorpName;
            			PrnSupport.pAccountOffice	:=	RL_JitsuK_Kaikei;
                    end;
                    // ----------------------------
                    //      科目登録リスト(実在)
                    // ----------------------------
                    TAIKEILIST:
            		begin
            			PrnSupport.ApRB				:=	RTaikeiList;
            			PrnSupport.strDocName		:=	('科目登録リスト(実在)');
            			PrnSupport.pPage			:=	R_TLPage;
            			PrnSupport.pDate			:=	R_TLDate;
            			PrnSupport.pCorpCode		:=	R_TLCorpNo;
            			PrnSupport.pCorpName		:=	R_TLCorpName;
            			PrnSupport.pAccountOffice	:=	R_TLKaikeiName;
                        pL_Title.Caption			:=	'実在科目加算リスト';
                    end;
                    // ----------------------------
                    //      科目登録リスト(合計)
                    // ----------------------------
            		TAIKEILIST_G:
            		begin
            			PrnSupport.ApRB				:=	RTaikeiList;
            			PrnSupport.strDocName		:=	('科目登録リスト(合計)');
            			PrnSupport.pPage			:=	R_TLPage;
            			PrnSupport.pDate			:=	R_TLDate;
            			PrnSupport.pCorpCode		:=	R_TLCorpNo;
            			PrnSupport.pCorpName		:=	R_TLCorpName;
            			PrnSupport.pAccountOffice	:=	R_TLKaikeiName;
            			pL_Title.Caption			:=	'合計科目加算リスト';
                    end;
                    // ----------------------------
                    //      変動損益関係リスト
                    // ----------------------------
                    HENDO:
            		begin
            			PrnSupport.ApRB				:=	RHendo;
            			PrnSupport.strDocName		:=	('変動損益関係リスト');
            			PrnSupport.pPage			:=	R_HPage;
            			PrnSupport.pDate			:=	R_HDate;
            			PrnSupport.pCorpCode		:=	R_HCorpNo;
            			PrnSupport.pCorpName		:=	R_HCorpName;
            			PrnSupport.pAccountOffice	:=	R_HKaikeiName;
                    end;
                    // ----------------------------
                    //      実在科目コード一覧
                    //      合計科目コード一覧
                    // ----------------------------
                    ICHIRAN_J,
                    ICHIRAN_G:
            		begin
            			PrnSupport.ApRB				:=	RIchiran;
            			if ( iSelectRep = ICHIRAN_J ) then
            			begin
            				PrnSupport.strDocName := ('実在科目コード一覧');
            				pL_IchiTitle.Caption  := '実在科目コード一覧';
            			end
            			else
            			begin
            				PrnSupport.strDocName := ('合計科目コード一覧');
            				pL_IchiTitle.Caption  := '合計科目コード一覧';
            			end;
            			PrnSupport.pPage			:=	R_IchiPage;
            			PrnSupport.pDate			:=	R_IchiDate;
            			PrnSupport.pCorpCode		:=	R_IchiCorpNo;
            			PrnSupport.pCorpName		:=	R_IchiCorpName;
            			PrnSupport.pAccountOffice	:=	R_IchiKaikeiName;
                    end;
                end;

                PrnSupport.strFileName	    :=	rcCOMMONAREA ( m_pRec^.m_pCommonArea^ ).SysCliRoot + '\tmp\' + PrnSupport.strDocName + '.csv';		// hirota
            	PrnSupport.pComArea 		:=  m_pRec^.m_pCommonArea;
//<082> start
				PrnSupport.pApRec			:=  m_pRec;
//<082> end
            	PrnSupport.MdataModule	    :=	MdataModule;                    // 共通DB用ﾃﾞｰﾀﾓｼﾞｭｰﾙ
                PrnSupport.iDspWriteBtn	    :=  0;                              // 保存ﾎﾞﾀﾝ制御(0:表示する)
                PrnSupport.iDspFileBtn	    :=	1;                              // ﾌｧｲﾙ出力表示

                if ( m_cJNTArea.IsExtract = FALSE )  then
                    PrnSupport.iDspFileBtn	:= 0 						        // 抽出権限なし→ﾌｧｲﾙ出力非表示
                else
                begin        // <044> >>
                	// 暫定対応
                    // 実在簡略以外はファイル出力停止

                    //<046> 全ﾊﾟﾀｰﾝファイル出力対応
                    {
                    if iSelectRep = JITSUZAI_K then
                    	PrnSupport.iDspFileBtn	:= 1 						        // 抽出権限あり→ﾌｧｲﾙ力表示
					else
                    	PrnSupport.iDspFileBtn	:= 0;
                    }
                    PrnSupport.iDspFileBtn	:= 1;
                    //<046>
                end;		// <044> <<

                // 暦区分
                if ( m_YearKbn = 0 ) then
                    PrnSupport.iCalendarKbn	:=  1	//　和暦
                else
                    PrnSupport.iCalendarKbn	:=  2;	//　西暦

                // 印刷ﾀﾞｲｱﾛｸﾞ表示
                iDlg := MJSPrnDlgf.DoDLG( PrnSupport );

                if ( iDlg > 0 ) then
                begin
                    // 戻り値が「ﾌﾟﾚﾋﾞｭｰ」かつ、他のAPでﾌﾟﾚﾋﾞｭｰ起動中はｴﾗｰ
                    if ( mjspre.IsExistPreview ) and
                       ( PrnSupport.iCommand = PDLG_PREVIEW ) then
                    begin
                        MessageBeep(MB_OK);
					// <104>MOD↓
					{
                        MjsMessageBox(AOwner,'他のプログラムでプレビューが起動中です。',
                                    mjError, mjDefOk);
					}
                        MjsMessageBox(AOwner,'他の処理でプレビューが起動しています。'+#13#10+
											 '他のプレビューを終了してください。',
                                    mjInformation, mjDefOk);
					// <104>MOD↑
                        Exit;
                    end;

                    // 帳票出力用ﾚｺｰﾄﾞ集計処理
                    case iSelectRep of
                        // ----------------------------
                        //	    実在科目登録リスト
                        // ----------------------------
                        ZITSUZAI:
                        begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   ZitsuzaiPrn(PrnSupport.iCommand);
                                PDLG_FILE       :
                                begin
                                    ZitsuzaiPrn(PrnSupport.iCommand);
                                    SetFileOutTF(ZITSUZAI,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      科目別補助登録リスト
                        // ----------------------------
                		SAIMOKU:
                        begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   SaimokuPrn(PrnSupport.iCommand);
                                PDLG_FILE       :
                                begin
                                    SaimokuPrn(PrnSupport.iCommand);
                                    SetFileOutTF(SAIMOKU,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_Saimoku, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      合計科目登録リスト
                        // ----------------------------
                		GOUKEI:
                		begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   GoukeiPrn(PrnSupport.iCommand);
                                PDLG_FILE       :
                                begin
                                    GoukeiPrn(PrnSupport.iCommand);
                                    SetFileOutTF(GOUKEI,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_Goukei, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      科目登録リスト
                        // ----------------------------
                		TAIKEI:
                		begin
                            m_OverCodeList2 := TList.Create;

                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   TaikeiPrn(PrnSupport.iCommand);
                                PDLG_FILE       :
                                begin
                                    TaikeiPrn(PrnSupport.iCommand);
                                    SetFileOutTF(TAIKEI,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_Taikei, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;

                            for iLoop := 0 to m_OverCodeList2.Count-1 do
                            begin
                                pOverCodeListRec := m_OverCodeList2.Items[iLoop];
                                Dispose(pOverCodeListRec);
                            end;
                            m_OverCodeList2.Free();
                        end;
                        // ----------------------------
                        //      科目登録リスト(簡略)
                        // ----------------------------
                		JITSUZAI_K:
                		begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   JitsuzaiKPrn(PrnSupport.iCommand);
                                PDLG_FILE       :
                                begin
                                    JitsuzaiKPrn(PrnSupport.iCommand);
                                    SetFileOutTF(JITSUZAI_K,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_JitsuKan, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      科目登録リスト(実在)
                        // ----------------------------
                        TAIKEILIST:
                		begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   TaikeiPrnList(PrnSupport.iCommand,TAIKEILIST);
                                PDLG_FILE       :
                                begin
                                    TaikeiPrnList(PrnSupport.iCommand,TAIKEILIST);
                                    SetFileOutTF(TAIKEILIST,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_TaikeiList, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      科目登録リスト(合計)
                        // ----------------------------
                		TAIKEILIST_G:
                		begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   TaikeiPrnList(PrnSupport.iCommand,TAIKEILIST_G);
                                PDLG_FILE       :
                                begin
                                    TaikeiPrnList(PrnSupport.iCommand,TAIKEILIST_G);
                                    SetFileOutTF(TAIKEILIST_G,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_TaikeiList, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      実在科目コード一覧
                        //      合計科目コード一覧
                        // ----------------------------
                        ICHIRAN_J,
                        ICHIRAN_G:
                        begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   fnIchiranPrint(PrnSupport.iCommand,iSelectRep);
                                PDLG_FILE       :
                                begin
                                    fnIchiranPrint(PrnSupport.iCommand,iSelectRep);
                                    SetFileOutTF(iSelectRep,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_Ichiran, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                        // ----------------------------
                        //      変動損益関係リスト
                        // ----------------------------
                        HENDO:
                		begin
                            case PrnSupport.iCommand of
                                PDLG_PRINT,
                                PDLG_PREVIEW    :   fnHendoPrint(PrnSupport.iCommand);
                                PDLG_FILE       :
                                begin
                                    fnHendoPrint(PrnSupport.iCommand);
                                    SetFileOutTF(HENDO,sTitle,sMemFld);
                                    if MjsFileOut(MemPrint_Hendo, sMemFld, sTitle, PrnSupport, m_pRec ) = -1 then
                                    begin
                                       MessageBeep(MB_OK);
                                       MessageDlg('ファイル出力に失敗しました。', mtError, [mbOk], 0);
                                    end;
                                end;
                            end;
                        end;
                    end;
                end;
            end;
        else Exit;		//ｴﾗｰ
        end;
    finally
    	MemPrint.Close();
    	MemPrint_Saimoku.Close();
    	MemPrint_Goukei.Close();
    	MemPrint_Taikei.Close();
    	MemPrint_JitsuKan.Close();
    	MemPrint_TaikeiList.Close();
    	MemPrint_Ichiran.Close();
    	MemPrint_Hendo.Close;
//        DmqPrint.Free();

        // 財務ポインタ設定
        m_cJNTArea.setMasAppRecord;
    end;
    
end;

//-----------------------------------------------------------------------------
// ZitsuzaiPrn()
//	< 実在印刷処理 >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.ZitsuzaiPrn(Select: TDlgRetID);
var
	DmqPrint			:	TMQuery;
	DmqFusen			:	TMQuery;
	iYouBunCode			:	Integer;
	sSousyoku			:	String;
	iKensu				:	Integer;		//	表示件数(Integer型)
	sKensu				:	String;			//	表示件数(String型)
	iLength				:	Integer;		//	文字の桁数
	sWork1				:	String;
	sWork2				:	String;
	sWork				:	String;
	bRensouOrderFlag	:	Boolean;
	iLoop				:	Integer;
	iCode				:	Integer;
	sName				:	String;
	iDummy				:	Integer;
begin

    //	初期処理
	iKensu	:=	0;
	bRensouOrderFlag    :=  FALSE;

    // MQueryの構築
	DmqPrint := TMQuery.Create( Self );
    DmqFusen := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqPrint );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );
    DDataSource.DataSet	:=	nil;
	MemPrint.Open();

	with DmqPrint do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT                     '
            +   '    MA.NCode               '   // 内部ｺｰﾄﾞ
            +   '   ,MA.GCode               '   // 外部ｺｰﾄﾞ
            +   '   ,MA.LongName            '   // 正式名称
            +   '   ,MA.SimpleName          '   // 簡略名称
            +   '   ,MA.Renso               '   // 連想ｼﾝﾎﾞﾙ
            +   '   ,MB.MinusName           '   // ﾏｲﾅｽ変換科目名
            +   '   ,MA.AnalyzeCode         '   // 分析ｺｰﾄﾞ
            +   '   ,MA.CharCode            '   // 性格ｺｰﾄﾞ
            +   '   ,MA.KisyuKbn            '   // 期首残区分
            +   '   ,MA.DCKbn               '   // 正残区分
            +   '   ,MA.BPKbn               '   // BS/PL区分
            +   '   ,MA.DebitCash           '   // 借方資金繰ｺｰﾄﾞ
            +   '   ,MA.CreditCash          '   // 貸方資金繰ｺｰﾄﾞ
            +   '   ,MB.DecoKbn             '   // 装飾区分
            +   '   ,MA.NonDspKbn           '   // 表示／印刷不可区分
            +   '   ,MA.SubKmkUse           '   // 細目科目採用区分
            +   '   ,MA.HojyoUse1           '   // 第1補助採用区分
            +   '   ,MA.HojyoUse2           '   // 第2補助採用区分
            +   '   ,MA.BmnUse              '   // 部門採用区分
            +   '   ,MA.SegUse1             '   // ｾｸﾞﾒﾝﾄ採用区分

            +   '   ,MA.PerKmkKbn           '   // 比率科目区分
            +   '   ,MB.FixChgRate          '   // 変動費比率
            +   '   ,MB.SagakuKbn           '   // 差額印刷区分
            +   '   ,MB.ProfitKbn           '   // 利益印刷区分
            +   '   ,MB.MinusKbn            '   // ﾏｲﾅｽ印刷区分
            +   '   ,MB.MTekiPrn            '   // 元帳摘要欄起票者印字区分
            +   '   ,MB.AveKbn              '   // 平均値採用区分
            +   '   ,MB.RuikeiKbn           '   // 累計集計区分
            +   '   ,MA.InputKbn            '   // 仕訳入力区分
            +   '   ,MA.DInputKbn           '   // 期日入力区分
            +   '   ,MA.DInputAlw           '   // 期日必須入力区分
            +   '   ,MA.TInputKbn           '   // 手形番号入力区分
            +   '   ,MA.TInputAlw           '   // 手形番号必須入力区分
            +   '   ,MA.TkInputKbn          '   // 固定摘要必須入力
            +   '   ,MA.TkClassCode         '   // 摘要分類ｺｰﾄﾞ
            +   '   ,MA.DPointNum           '   // 小数点桁数
            +   '   ,MA.CashCodeKbn         '   // 資金繰ｺｰﾄﾞ優先区分
            +   '   ,MB.HisKbn              '   // 履歴管理区分
// <019>            +   '   ,MB.EBook1Kbn           '   // 第1補助電子帳簿採用区分
// <019>            +   '   ,MB.EBook2kbn           '   // 第2補助電子帳簿採用区分
            +   '   ,MA.TStartDate          '   // 適用開始年月日
            +   '   ,MA.TEndDate            '   // 適用終了年月日
            +   '   ,MA.UpdDateTM           '   // 更新日時
            +   '   ,MB.OutKbn1             '   // 集計単位区分
// 050825 hirota >>
            +   '   ,MA.BunruiNCode1        '   // 分類コード１
            +   '   ,MA.BunruiNCode2        '   // 分類コード２
            +   '   ,MA.BunruiNCode3        '   // 分類コード３
            +   '   ,MA.BunruiNCode4        '   // 分類コード４
            +   '   ,MA.BunruiNCode5        '   // 分類コード５
// 050825 hirota <<
            +   'FROM KmkMA MA,             '   // 勘定科目基本ﾏｽﾀ
            +   '     KmkMB MB              '   // 勘定科目詳細情報
            +   'WHERE  (MA.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            +   '  AND  (MA.SumKbn    = 0)  '   // 実在/合計区分(0:実在)
            +   '  AND  (MA.CNCode    = 0)  '   // 細目ｺｰﾄﾞ
            +   '  AND  (MB.CNCode    = 0)  '); // 細目ｺｰﾄﾞ

        if ( uvHani.pvrRgType[0] = 0 ) then
        begin
            SQL.Add('  AND  (MA.NCode = MB.NCode)   ');
        end
        else
        begin
            if ( uvHani.pvrStCode[0] <> '' ) and
               ( uvHani.pvrEdCode[0] =  '' ) then
            begin
                SQL.Add('  AND  (MA.GCode >= :ExCode)   ');
			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
			    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
            end
            else if ( uvHani.pvrStCode[0] =  '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MA.GCode <= :ExCode)   ');
			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
    			ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrEdCode[0],0);
            end
            else if ( uvHani.pvrStCode[0] <> '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MA.GCode >= :ExStCode)     ');
			    SQL.Add('  AND  (MA.GCode <= :ExEdCode)     ');
    			SQL.Add('  AND  (MA.NCode  = MB.NCode)      ');
    			ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
    			ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
            end;
        end;

		// 出力順序
        if ( uvHani.pvrOrder = CODEORDER ) then
            SQL.Add('ORDER BY MA.GCode  ')
        else
        begin
            SQL.Add('  AND  (MA.Renso <> '''')  ');
            SQL.Add('ORDER BY MA.Renso,MA.GCode ');
            bRensouOrderFlag    :=  TRUE;
        end;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqPrint);
			DmqPrint.Close();
			DmqFusen.Close();
			DmqFusen.Free();
            DmqPrint.Free();
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			sSousyoku   :=  '';
			MemPrint.Append();

            // ﾌｧｲﾙ出力以外
			if ( Select <> PDLG_FILE ) then
			begin
				// 付箋
				DmqFusen.Close();
				DmqFusen.SQL.Clear();
				DmqFusen.SQL.Add('SELECT                        '
                            +    '   FusenKbn                   '   // 付箋区分
				            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
				            +    'WHERE (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
				            +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                            +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

				DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

				// ｴﾗｰの判定
				if ( DmqFusen.Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqFusen);
					DmqFusen.Close();
					DmqFusen.Free();
					DmqPrint.Close();
					DmqPrint.Free();
					Exit;
				end;

				if ( DmqFusen.EOF <> TRUE ) then
				begin
                    // 付箋区分
					case DmqFusen.GetFld('FusenKbn').AsInteger of
						0:	TGraphicField(MemPrint.FieldByName('Fusen')).Clear;
{
						1:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FRE.Bitmap);
						2:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FGR.Bitmap);
						3:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FBU.Bitmap);
						4:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FOR.Bitmap);
}
                        1:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
        				2:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
        				3:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
        				4:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
					end;
				end;
			end;

		    // 外部ｺｰﾄﾞ
			MemPrint.FieldByName('Code').AsInteger			:=	GetFld('GCode').AsInteger;
		    // 正式名称
// <049>↓
//			MemPrint.FieldByName('SeishikiName').AsString	:=	GetFld('LongName').AsString;
			MemPrint.FieldByName('SeishikiName').AsString	:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
		    // 簡略名称
			MemPrint.FieldByName('KanryakuName').AsString	:=	GetFld('SimpleName').AsString;
		    // 連想ｼﾝﾎﾞﾙ
			MemPrint.FieldByName('Rensou').AsString			:=	GetFld('Renso').AsString;
		    // ﾏｲﾅｽ変換科目名
			MemPrint.FieldByName('MainaKamoku').AsString	:=	GetFLD('MinusName').AsString;
		    // 分析ｺｰﾄﾞ
			MemPrint.FieldByName('Bunseki').AsInteger		:=	GetFld('AnalyzeCode').AsInteger;

			for iLoop := 0 to 112 do
			begin
				if ( aDefault[iLoop].Code = GetFld('AnalyzeCode').AsInteger ) then
				begin
					// 要約ｺｰﾄﾞ
					GetNameSKmkMA(aDefault[iLoop].YouyakuCode,iCode,sName,iDummy);
					if ( iCode = 0 ) then
						MemPrint.FieldByName('Youyaku').Clear
					else
						MemPrint.FieldByName('Youyaku').AsInteger := iCode;
					// 固定費ｺｰﾄﾞ
					GetNameSKmkMA(aDefault[iLoop].KoteiCode,iCode,sName,iDummy);
					if ( iCode = 0 ) then
						MemPrint.FieldByName('Kotei').Clear
					else
						MemPrint.FieldByName('Kotei').AsInteger   := iCode;
					// 変動費ｺｰﾄﾞ
					GetNameSKmkMA(aDefault[iLoop].HendoCode,iCode,sName,iDummy);
					if ( iCode = 0 ) then
						MemPrint.FieldByName('Hendo').Clear
					else
						MemPrint.FieldByName('Hendo').AsInteger   := iCode;
					break;
				end;
			end;

		    // 要約分析
			sWork	:=	GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iYouBunCode);
			if ( iYouBunCode = 999 ) then
			begin
				MemPrint.FieldByName('YouYakuCode').AsInteger	:=	0;
			end
			else
				MemPrint.FieldByName('YouYakuCode').AsInteger	:=	iYouBunCode;
		    // 性格ｺｰﾄﾞ
			MemPrint.FieldByName('Seikaku').AsInteger		:=	GetFld('CharCode').AsInteger;
		    // 期首残内容
			MemPrint.FieldByName('KisyuName').AsString		:=	GetAriNashi(GetFLD('KisyuKbn').AsInteger);
		    // 正残内容
			case GetFLD('DCKbn').AsInteger of
				0:	MemPrint.FieldByName('SeiZanName').AsString	:=	'借方';
				1:	MemPrint.FieldByName('SeiZanName').AsString	:=	'貸方';
			end;
		    // BS/PL内容
			case GetFLD('BPKbn').AsInteger of
				0:	MemPrint.FieldByName('BsPlName').AsString	:=	'BS';
				1:	MemPrint.FieldByName('BsPlName').AsString	:=	'PL';
			end;
		    // 借方資金繰ｺｰﾄﾞ
			if ( GetFLD('DebitCash').AsFloat = 0 ) then
				MemPrint.FieldByName('KariKuri').Clear
			else
				MemPrint.FieldByName('KariKuri').AsInteger		:=
                    gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>
		    // 貸方資金繰ｺｰﾄﾞ
			if ( GetFLD('CreditCash').AsFloat = 0 ) then
				MemPrint.FieldByName('KashiKuri').Clear
	 		else
				MemPrint.FieldByName('KashiKuri').AsInteger		:=
                    gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);   //  <055>
		    // 装飾区分内容
			MemPrint.FieldByName('SousyokuName').AsString	:=	PrintGetSousyoku(GetFLD('DecoKbn').AsInteger);
		    // 表示／印刷不可内容
			case GetFLD('NonDspKbn').AsInteger of
				0:	MemPrint.FieldByName('DspPriName').AsString	:=	'可';
				1:	MemPrint.FieldByName('DspPriName').AsString	:=	'不可';
			end;
		    // 細目採用区分
			MemPrint.FieldByName('Saimoku').AsInteger		:=	GetFLD('SubKmkUse').AsInteger;
    		// 第1補助採用区分
   			MemPrint.FieldByName('Hojo1').AsInteger			:=	GetFLD('HojyoUse1').AsInteger;
    		// 第2補助採用区分
   			MemPrint.FieldByName('Hojo2').AsInteger			:=	GetFLD('HojyoUse2').AsInteger;
    		// 部門採用区分
			case gMasInfoUseKbn.Bmn of
				0: MemPrint.FieldByName('Bumon').AsInteger	:=	0;	// 部門採用区分(0:なし)
				1:	// 部門採用区分(1:P/Lのみ採用)
				begin
					if ( GetFLD('BPKbn').AsInteger = 1 ) then	    // BS/PL区分が1のPLの時
						MemPrint.FieldByName('Bumon').AsInteger :=	GetFLD('BmnUse').AsInteger
                    else
						MemPrint.FieldByName('Bumon').AsInteger :=	0;
				end;
                // 部門採用区分(2:B/S&P/L採用)
				2: MemPrint.FieldByName('Bumon').AsInteger	:=	GetFLD('BmnUse').AsInteger;
			end;
		    // ｾｸﾞﾒﾝﾄ採用区分
			case gMasInfoUseKbn.Seg of
				0: MemPrint.FieldByName('Seg').AsInteger	:=	0;	// ｾｸﾞﾒﾝﾄ1採用区分(0:なし)
				1:	// ｾｸﾞﾒﾝﾄ1採用区分(1:P/Lのみ採用)
				begin
					if ( GetFLD('BPKbn').AsInteger = 1 ) then		// BS/PL区分が1のPLの時
						MemPrint.FieldByName('Seg').AsInteger := GetFLD('SegUse1').AsInteger
					else
						MemPrint.FieldByName('Seg').AsInteger := 0;
				end;
                // ｾｸﾞﾒﾝﾄ1採用区分(2:B/S&P/L採用)
				2: MemPrint.FieldByName('Seg').AsInteger	:=	GetFLD('SegUse1').AsInteger;
			end;
		    // 比率科目区分
			case GetFLD('PerKmkKbn').AsInteger of
				0:	MemPrint.FieldByName('HiritsuName').AsString	:=	'通常科目';
				1:	MemPrint.FieldByName('HiritsuName').AsString	:=	'比率科目';
			end;
    		// 変動費比率
   			MemPrint.FieldByName('Hendouhi').AsFloat		:=	GetFLD('FixChgRate').AsFloat;
		    // 差額印刷区分内容
			MemPrint.FieldByName('SagakuName').AsString		:=	GetAriNashi(GetFLD('SagakuKbn').AsInteger);
		    // 利益印刷区分内容
			MemPrint.FieldByName('RiekiName').AsString		:=	GetAriNashi(GetFLD('ProfitKbn').AsInteger);
    		// ﾏｲﾅｽ印刷区分内容
			MemPrint.FieldByName('MainasuPriName').AsString	:=	GetAriNashi(GetFLD('MinusKbn').AsInteger);
    		// 元帳摘要欄起票者印字区分
			case GetFLD('MTekiPrn').AsInteger of
				0:	MemPrint.FieldByName('KihyouPri').AsString	:=	'印字なし';
				1:	MemPrint.FieldByName('KihyouPri').AsString	:=	'印字あり';
			end;

		    // 平均値採用区分内容
			MemPrint.FieldByName('AveName').AsString		:=	GetAriNashi(GetFLD('AveKbn').AsInteger);
    		// 累計集計区分
			case GetFLD('RuikeiKbn').AsInteger of
				0:	MemPrint.FieldByName('RuikeiName').AsString	:=	'累計あり';
				1:	MemPrint.FieldByName('RuikeiName').AsString	:=	'累計なし';
			end;
		    // 仕訳入力区分
			MemPrint.FieldByName('ShiwakeName').AsString	:=	PrintInpInfo((GetFLD('InputKbn').AsInteger),P_SHIWAKEKBN);
		    // 期日入力区分
			MemPrint.FieldByName('KijitsuName').AsString	:=	PrintInpInfo((GetFLD('DInputKbn').AsInteger),P_OTHER);
		    // 期日必須入力区分
			if ( GetFLD('DInputKbn').AsInteger <> 0 ) then
			begin
				case GetFLD('DInputAlw').AsInteger of
					0:	MemPrint.FieldByName('KijitsuHisu').AsString	:=	'任意入力';
					1:	MemPrint.FieldByName('KijitsuHisu').AsString	:=	'必須入力';
				end;
			end
			else
				MemPrint.FieldByName('KijitsuHisu').AsString	:=	'';

		    // 手形番号入力区分
			MemPrint.FieldByName('TegataNoName').AsString	:=	PrintInpInfo((GetFLD('TInputKbn').AsInteger),P_OTHER);
		    // 手形番号必須入力区分
			if ( GetFLD('TInputKbn').AsInteger <> 0 ) then
            begin
				case GetFLD('TInputAlw').AsInteger of
					0:	MemPrint.FieldByName('TegataHisu').AsString		:=	'任意入力';
					1:	MemPrint.FieldByName('TegataHisu').AsString		:=	'必須入力';
				end;
			end
			else
				MemPrint.FieldByName('TegataHisu').AsString		:=	'';

		    // 固定摘要必須入力
			MemPrint.FieldByName('KoteiTekiName').AsString	:=	PrintInpInfo((GetFLD('TkInputKbn').AsInteger),P_KOTEITEKIYOU);

		    // 摘要分類ｺｰﾄﾞ
			if ( GetFLD('TkInputKbn').AsInteger = 1 ) then	        // 固定摘要必須入力が1:固定摘要必須の時
			begin
				if ( GetFLD('TkClassCode').AsInteger <> 0 ) then	// 摘要分類ｺｰﾄﾞが0の時
				begin
					MemPrint.FieldByName('TekiyouBun').AsInteger	:=	GetFLD('TkClassCode').AsInteger;
				end
				else
				begin
					MemPrint.FieldByName('TekiyouBun').Clear;
				end;
			end
			else
			begin
				MemPrint.FieldByName('TekiyouBun').Clear;
			end;
		    // 小数点桁数
			MemPrint.FieldByName('Syousu').AsInteger		:=	GetFLD('DPointNum').AsInteger;
		    // 資金繰ｺｰﾄﾞ優先区分
			MemPrint.FieldByName('ShikuriYuName').AsString	:=	PrintInpInfo((GetFLD('DPointNum').AsInteger),P_SHIKURIYU);
		    // 履歴管理区分
			case GetFLD('HisKbn').AsInteger of
				0:	MemPrint.FieldByName('RirekiName').AsString	:=	'修正履歴管理';
				1:	MemPrint.FieldByName('RirekiName').AsString	:=	'無条件';
			end;

			for iLoop := 1 to 5 do
			begin
                // 分類情報の取得
                fnGetNBunrui(GetFLD('BunruiNCode' + IntToStr(iLoop)).AsFloat, iLoop + 480, sWork1, sWork2);

                // 分類情報を保存
				MemPrint.FieldByName('Bun' + IntToStr(iLoop) + 'Nm').AsString	:=	sWork2;
			end;

{
		    // 第1補助電子帳簿採用区分
			case GetFLD('EBook1Kbn').AsInteger of
				0:	MemPrint.FieldByName('DenHojo1Name').AsString	:=	'なし';
				1:	MemPrint.FieldByName('DenHojo1Name').AsString	:=	'検索対象';
				2:	MemPrint.FieldByName('DenHojo1Name').AsString	:=	'電子帳簿対象';
			end;
		    // 第2補助電子帳簿採用区分
			case GetFLD('EBook2Kbn').AsInteger of
				0:	MemPrint.FieldByName('DenHojo2Name').AsString	:=	'なし';
				1:	MemPrint.FieldByName('DenHojo2Name').AsString	:=	'検索対象';
				2:	MemPrint.FieldByName('DenHojo2Name').AsString	:=	'電子帳簿対象';
			end;
}// <038>以下を復帰
		    // 適用開始日
			if ( GetFLD('TStartDate').IsNull ) then
				MemPrint.FieldByName('StartDate').Clear		// 051114
            //@ ↓12.01デフォルト値の場合は出力しない
			else if (GetFld('TStartDate').AsDateTime <> MjsIntToDate(DEFDATE_START, #0)) then
            begin
				MemPrint.FieldByName('StartDate').AsDateTime	:=	GetFLD('TStartDate').AsDateTime;	// 051114
            end;
             //@ ↑
		    // 適用終了日
			if ( GetFLD('TEndDate').IsNull ) then			// 051114
				MemPrint.FieldByName('EndDate').Clear		// 051114
            //@ ↓12.01デフォルト値の場合は出力しない
			else  if (GetFld('TEndDate').AsDateTime <> MjsIntToDate(DEFDATE_END, #0)) then
            begin
				MemPrint.FieldByName('EndDate').AsDateTime		:=	GetFLD('TEndDate').AsDateTime;		// 051114
            end;
             //@ ↑
		    // 更新日時
			if ( GetFLD('UpdDateTM').IsNull ) then
				MemPrint.FieldByName('LastUpDate').Clear
			else
				MemPrint.FieldByName('LastUpDate').AsDateTime	:=	GetFLD('UpdDateTM').AsDateTime;
    		// 集計単位区分
			// 分析ｺｰﾄﾞが｢0:非会計科目｣の時
			if ( GetFld('AnalyzeCode').AsInteger = 0 ) then
			begin
				case GetFld('OutKbn1').AsInteger of
					// 集計単位区分が｢0:指定単位｣の時
					0: MemPrint.FieldByName('AddUnit').AsString := '指定単位';
					// 集計単位区分が｢1:集計対象外｣の時
					1: MemPrint.FieldByName('AddUnit').AsString := '集計対象外';
				end;
			end
			// 分析ｺｰﾄﾞが｢0:非会計科目｣以外の時
			else
				MemPrint.FieldByName('AddUnit').AsString := '';
//} //<確認> // <038>ここまでｺﾒﾝﾄを戻す
			MemPrint.Post;
			iKensu	:=	iKensu	+	1;
			NEXT;
		end;

        // 連想順の時空白を後に印刷する
        if ( bRensouOrderFlag = TRUE ) then
		begin
			Close();
    		SQL.Clear();
			SQL.Add('SELECT                     '
                +   '    MA.NCode               '   // 内部ｺｰﾄﾞ
                +   '   ,MA.GCode               '   // 外部ｺｰﾄﾞ
                +   '   ,MA.LongName            '   // 正式名称
                +   '   ,MA.SimpleName          '   // 簡略名称
                +   '   ,MA.Renso               '   // 連想ｼﾝﾎﾞﾙ
                +   '   ,MB.MinusName           '   // ﾏｲﾅｽ変換科目名
                +   '   ,MA.AnalyzeCode         '   // 分析ｺｰﾄﾞ
                +   '   ,MA.CharCode            '   // 性格ｺｰﾄﾞ
                +   '   ,MA.KisyuKbn            '   // 期首残区分
                +   '   ,MA.DCKbn               '   // 正残区分
                +   '   ,MA.BPKbn               '   // BS/PL区分
                +   '   ,MA.DebitCash           '   // 借方資金繰ｺｰﾄﾞ
                +   '   ,MA.CreditCash          '   // 貸方資金繰ｺｰﾄﾞ
                +   '   ,MB.DecoKbn             '   // 装飾区分
                +   '   ,MA.NonDspKbn           '   // 表示／印刷不可区分
                +   '   ,MA.SubKmkUse           '   // 細目科目採用区分
                +   '   ,MA.HojyoUse1           '   // 第1補助採用区分
                +   '   ,MA.HojyoUse2           '   // 第2補助採用区分
                +   '   ,MA.BmnUse              '   // 部門採用区分
                +   '   ,MA.SegUse1             '   // ｾｸﾞﾒﾝﾄ採用区分
                +   '   ,MA.PerKmkKbn           '   // 比率科目区分
                +   '   ,MB.FixChgRate          '   // 変動費比率
                +   '   ,MB.SagakuKbn           '   // 差額印刷区分
                +   '   ,MB.ProfitKbn           '   // 利益印刷区分
                +   '   ,MB.MinusKbn            '   // ﾏｲﾅｽ印刷区分
                +   '   ,MB.MTekiPrn            '   // 元帳摘要欄起票者印字区分
                +   '   ,MB.AveKbn              '   // 平均値採用区分
                +   '   ,MB.RuikeiKbn           '   // 累計集計区分
                +   '   ,MA.InputKbn            '   // 仕訳入力区分
                +   '   ,MA.DInputKbn           '   // 期日入力区分
                +   '   ,MA.DInputAlw           '   // 期日必須入力区分
                +   '   ,MA.TInputKbn           '   // 手形番号入力区分
                +   '   ,MA.TInputAlw           '   // 手形番号必須入力区分
                +   '   ,MA.TkInputKbn          '   // 固定摘要必須入力
                +   '   ,MA.TkClassCode         '   // 摘要分類ｺｰﾄﾞ
                +   '   ,MA.DPointNum           '   // 小数点桁数
                +   '   ,MA.CashCodeKbn         '   // 資金繰ｺｰﾄﾞ優先区分
                +   '   ,MB.HisKbn              '   // 履歴管理区分
// <019>                +   '   ,MB.EBook1Kbn           '   // 第1補助電子帳簿採用区分
// <019>                +   '   ,MB.EBook2kbn           '   // 第2補助電子帳簿採用区分
                +   '   ,MA.TStartDate          '   // 適用開始年月日
                +   '   ,MA.TEndDate            '   // 適用終了年月日
                +   '   ,MA.UpdDateTM           '   // 更新日時
// 050825 hirota >>
	            +   '   ,MA.BunruiNCode1        '   // 分類コード１
            	+   '   ,MA.BunruiNCode2        '   // 分類コード２
        	    +   '   ,MA.BunruiNCode3        '   // 分類コード３
    	        +   '   ,MA.BunruiNCode4        '   // 分類コード４
	            +   '   ,MA.BunruiNCode5        '   // 分類コード５
// 050825 hirota <<
                +   'FROM KmkMA MA,             '   // 勘定科目基本ﾏｽﾀ
                +   '     KmkMB MB              '   // 勘定科目詳細情報
                +   'WHERE  (MA.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
                +   '  AND  (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
                +   '  AND  (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
                +   '  AND  (MA.SumKbn    = 0)  '   // 実在/合計区分(0:実在)
                +   '  AND  (MA.CNCode    = 0)  '   // 細目内部ｺｰﾄﾞ
                +   '  AND  (MB.CNCode    = 0)  '); // 細目内部ｺｰﾄﾞ

            if ( uvHani.pvrRgType[0] = 0 ) then
            begin
                SQL.Add('  AND  (MA.NCode = MB.NCode)   ');
            end
            else
            begin
                if ( uvHani.pvrStCode[0] <> '' ) and
                   ( uvHani.pvrEdCode[0] =  '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode >= :ExCode)   ');
    			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
    			    ParamByName('ExCode').AsInteger     :=	StrToIntDef(uvHani.pvrStCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] =  '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode <= :ExCode)   ');
    			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
        			ParamByName('ExCode').AsInteger     :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] <> '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode >= :ExStCode)     ');
    			    SQL.Add('  AND  (MA.GCode <= :ExEdCode)     ');
        			SQL.Add('  AND  (MA.NCode  = MB.NCode)      ');
                    ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
        			ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                end;
            end;

    		// 出力順序
// <044>           SQL.Add('  AND  (MA.Renso <> '''')  ');
            SQL.Add('  AND  (MA.Renso = '''')  ');		// <044>
            SQL.Add('ORDER BY MA.Renso,MA.GCode ');

			// ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqPrint);
				DmqPrint.Close();
				DmqPrint.Free();
				DmqFusen.Close();
				DmqFusen.Free();
				Exit;
			end;

            while ( EOF <> TRUE ) do
			begin
				sSousyoku	:=	'';
				MemPrint.Append();

                //	ﾌｧｲﾙ出力以外
				if ( Select <> PDLG_FILE ) then
				begin
					//	付箋
					DmqFusen.Close();
					DmqFusen.SQL.Clear();
					DmqFusen.SQL.Add('SELECT                        '
					            +    '   FusenKbn                   '	// 付箋区分
					            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
					            +    'WHERE (MasterKbn = 1)         '	// ﾏｽﾀ区分(1:勘定科目)
					            +    '  AND (NCode     = :ExNCode)  '   // 科目内部ｺｰﾄﾞ
						        +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ
					DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

					// ｴﾗｰの判定
					if ( DmqFusen.Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqFusen);
						DmqFusen.Close();
						DmqFusen.Free();
						DmqPrint.Close();
						DmqPrint.Free();
						Exit;
					end;

					if ( DmqFusen.EOF <> TRUE ) then
					begin
                        // 付箋区分
    					case DmqFusen.GetFLD('FusenKbn').AsInteger of
							0:	TGraphicField(MemPrint.FieldByName('Fusen')).Clear;
{
							1:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FRE.Bitmap);
							2:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FGR.Bitmap);
							3:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FBU.Bitmap);
							4:	TGraphicField(MemPrint.FieldByName('Fusen')).Assign(PM_FOR.Bitmap);
}
                            1:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
            				2:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
            				3:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
            				4:  TGraphicField(MemPrint.FieldByName('Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
						end;
					end;
				end;

                // 外部ｺｰﾄﾞ
                MemPrint.FieldByName('Code').AsInteger			:=	GetFld('GCode').AsInteger;
                // 正式名称
// <049>↓
//                MemPrint.FieldByName('SeishikiName').AsString	:=	GetFld('LongName').AsString;
                MemPrint.FieldByName('SeishikiName').AsString	:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
                // 簡略名称
                MemPrint.FieldByName('KanryakuName').AsString	:=	GetFld('SimpleName').AsString;
                // 連想ｼﾝﾎﾞﾙ
                MemPrint.FieldByName('Rensou').AsString			:=	GetFld('Renso').AsString;
                // ﾏｲﾅｽ変換科目名
                MemPrint.FieldByName('MainaKamoku').AsString	:=	GetFLD('MinusName').AsString;
                // 分析ｺｰﾄﾞ
                MemPrint.FieldByName('Bunseki').AsInteger		:=	GetFld('AnalyzeCode').AsInteger;
                // 要約分析
                sWork	:=	GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iYouBunCode);
                if ( iYouBunCode = 999 ) then
                begin
                    MemPrint.FieldByName('YouYakuCode').AsInteger	:=	0;
                end
                else
                    MemPrint.FieldByName('YouYakuCode').AsInteger	:=	iYouBunCode;
                // 性格ｺｰﾄﾞ
                MemPrint.FieldByName('Seikaku').AsInteger		:=	GetFld('CharCode').AsInteger;
                // 期首残内容
                MemPrint.FieldByName('KisyuName').AsString		:=	GetAriNashi(GetFLD('KisyuKbn').AsInteger);
                // 正残内容
                case GetFLD('DCKbn').AsInteger of
                    0:	MemPrint.FieldByName('SeiZanName').AsString	:=	'借方';
                    1:	MemPrint.FieldByName('SeiZanName').AsString	:=	'貸方';
                end;
                // BS/PL内容
                case GetFLD('BPKbn').AsInteger of
                    0:	MemPrint.FieldByName('BsPlName').AsString	:=	'BS';
                    1:	MemPrint.FieldByName('BsPlName').AsString	:=	'PL';
                end;
                // 借方資金繰ｺｰﾄﾞ
                if ( GetFLD('DebitCash').AsFloat = 0 ) then
                    MemPrint.FieldByName('KariKuri').Clear
                else
                    MemPrint.FieldByName('KariKuri').AsInteger		:=
                        gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>
                // 貸方資金繰ｺｰﾄﾞ
                if ( GetFLD('CreditCash').AsFloat = 0 ) then
                    MemPrint.FieldByName('KashiKuri').Clear
                else
                    MemPrint.FieldByName('KashiKuri').AsInteger		:=
                        gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);   //  <055>
                // 装飾区分内容
                MemPrint.FieldByName('SousyokuName').AsString	:=	PrintGetSousyoku(GetFLD('DecoKbn').AsInteger);
                // 表示／印刷不可内容
                case GetFLD('NonDspKbn').AsInteger of
                    0:	MemPrint.FieldByName('DspPriName').AsString	:=	'可';
                    1:	MemPrint.FieldByName('DspPriName').AsString	:=	'不可';
                end;
                // 細目採用区分
                MemPrint.FieldByName('Saimoku').AsInteger		:=	GetFLD('SubKmkUse').AsInteger;
                // 第1補助採用区分
                MemPrint.FieldByName('Hojo1').AsInteger			:=	GetFLD('HojyoUse1').AsInteger;
                // 第2補助採用区分
                MemPrint.FieldByName('Hojo2').AsInteger			:=	GetFLD('HojyoUse2').AsInteger;
                // 部門採用区分
                MemPrint.FieldByName('Bumon').AsInteger			:=	GetFLD('BmnUse').AsInteger;
                // ｾｸﾞﾒﾝﾄ採用区分
                MemPrint.FieldByName('Seg').AsInteger			:=	GetFLD('SegUse1').AsInteger;
                // 比率科目区分
                case GetFLD('PerKmkKbn').AsInteger of
                    0:	MemPrint.FieldByName('HiritsuName').AsString	:=	'通常科目';
                    1:	MemPrint.FieldByName('HiritsuName').AsString	:=	'比率科目';
                end;
                // 変動費比率
                MemPrint.FieldByName('Hendouhi').AsFloat		:=	GetFLD('FixChgRate').AsFloat;
                // 差額印刷区分内容
                MemPrint.FieldByName('SagakuName').AsString		:=	GetAriNashi(GetFLD('SagakuKbn').AsInteger);
                // 利益印刷区分内容
                MemPrint.FieldByName('RiekiName').AsString		:=	GetAriNashi(GetFLD('ProfitKbn').AsInteger);
                // ﾏｲﾅｽ印刷区分内容
                MemPrint.FieldByName('MainasuPriName').AsString	:=	GetAriNashi(GetFLD('MinusKbn').AsInteger);
                // 元帳摘要欄起票者印字区分
                case GetFLD('MTekiPrn').AsInteger of
                    0:	MemPrint.FieldByName('KihyouPri').AsString	:=	'印字なし';
                    1:	MemPrint.FieldByName('KihyouPri').AsString	:=	'印字あり';
                end;
                // 平均値採用区分内容
                MemPrint.FieldByName('AveName').AsString		:=	GetAriNashi(GetFLD('AveKbn').AsInteger);
                // 累計集計区分
                case GetFLD('RuikeiKbn').AsInteger of
                    0:	MemPrint.FieldByName('RuikeiName').AsString	:=	'累計あり';
                    1:	MemPrint.FieldByName('RuikeiName').AsString	:=	'累計なし';
                end;
                // 仕訳入力区分
                MemPrint.FieldByName('ShiwakeName').AsString	:=	PrintInpInfo((GetFLD('InputKbn').AsInteger),P_SHIWAKEKBN);
                // 期日入力区分
                MemPrint.FieldByName('KijitsuName').AsString	:=	PrintInpInfo((GetFLD('DInputKbn').AsInteger),P_OTHER);
                // 期日必須入力区分
                if ( GetFLD('DInputKbn').AsInteger <> 0 ) then
                begin
                    case GetFLD('DInputAlw').AsInteger of
                        0:	MemPrint.FieldByName('KijitsuHisu').AsString	:=	'任意入力';
                        1:	MemPrint.FieldByName('KijitsuHisu').AsString	:=	'必須入力';
                    end;
                end
                else
                    MemPrint.FieldByName('KijitsuHisu').AsString	:=	'';
                // 手形番号入力区分
                MemPrint.FieldByName('TegataNoName').AsString	:=	PrintInpInfo((GetFLD('TInputKbn').AsInteger),P_OTHER);
                // 手形番号必須入力区分
                if ( GetFLD('TInputKbn').AsInteger <> 0 ) then
                begin
                    case GetFLD('TInputAlw').AsInteger of
                        0:	MemPrint.FieldByName('TegataHisu').AsString		:=	'任意入力';
                        1:	MemPrint.FieldByName('TegataHisu').AsString		:=	'必須入力';
                    end;
                end
                else
                    MemPrint.FieldByName('TegataHisu').AsString		:=	'';
                // 固定摘要必須入力
                MemPrint.FieldByName('KoteiTekiName').AsString	:=	PrintInpInfo((GetFLD('TkInputKbn').AsInteger),P_KOTEITEKIYOU);
                // 摘要分類ｺｰﾄﾞ
                if ( GetFLD('TkInputKbn').AsInteger = 1 ) then	        // 固定摘要必須入力が1:固定摘要必須の時
                begin
                    if ( GetFLD('TkClassCode').AsInteger <> 0 ) then	// 摘要分類ｺｰﾄﾞが0の時
                        MemPrint.FieldByName('TekiyouBun').AsInteger	:=	GetFLD('TkClassCode').AsInteger
                    else
                        MemPrint.FieldByName('TekiyouBun').Clear;
                end
                else
                    MemPrint.FieldByName('TekiyouBun').Clear;
                // 小数点桁数
                MemPrint.FieldByName('Syousu').AsInteger		:=	GetFLD('DPointNum').AsInteger;
                // 資金繰ｺｰﾄﾞ優先区分
                MemPrint.FieldByName('ShikuriYuName').AsString	:=	PrintInpInfo((GetFLD('DPointNum').AsInteger),P_SHIKURIYU);
                // 履歴管理区分
                case GetFLD('HisKbn').AsInteger of
                    0:	MemPrint.FieldByName('RirekiName').AsString	:=	'修正履歴管理';
                    1:	MemPrint.FieldByName('RirekiName').AsString	:=	'無条件';
                end;

				for iLoop := 1 to 5 do
				begin
	                // 分類情報の取得
                	fnGetNBunrui(GetFLD('BunruiNCode' + IntToStr(iLoop)).AsFloat, iLoop + 480, sWork1, sWork2);

        	        // 分類情報を保存
					MemPrint.FieldByName('Bun' + IntToStr(iLoop) + 'Nm').AsString	:=	sWork2;
				end;

{
                // 第1補助電子帳簿採用区分
                case GetFLD('EBook1Kbn').AsInteger of
                    0:	MemPrint.FieldByName('DenHojo1Name').AsString	:=	'なし';
                    1:	MemPrint.FieldByName('DenHojo1Name').AsString	:=	'検索対象';
                    2:	MemPrint.FieldByName('DenHojo1Name').AsString	:=	'電子帳簿対象';
                end;
                // 第2補助電子帳簿採用区分
                case GetFLD('EBook2Kbn').AsInteger of
                    0:	MemPrint.FieldByName('DenHojo2Name').AsString	:=	'なし';
                    1:	MemPrint.FieldByName('DenHojo2Name').AsString	:=	'検索対象';
                    2:	MemPrint.FieldByName('DenHojo2Name').AsString	:=	'電子帳簿対象';
                end;
}// <038>以下を復帰
            // 適用開始日
			if ( GetFLD('TStartDate').IsNull ) then
				MemPrint.FieldByName('StartDate').Clear		// 051114
            //@ ↓12.01デフォルト値の場合は出力しない
			else if (GetFld('TStartDate').AsDateTime <> MjsIntToDate(DEFDATE_START, #0)) then
            begin
				MemPrint.FieldByName('StartDate').AsDateTime	:=	GetFLD('TStartDate').AsDateTime;	// 051114
            end;
             //@ ↑
		    // 適用終了日
			if ( GetFLD('TEndDate').IsNull ) then			// 051114
				MemPrint.FieldByName('EndDate').Clear		// 051114
            //@ ↓12.01デフォルト値の場合は出力しない
			else  if (GetFld('TEndDate').AsDateTime <> MjsIntToDate(DEFDATE_END, #0)) then
            begin
				MemPrint.FieldByName('EndDate').AsDateTime		:=	GetFLD('TEndDate').AsDateTime;		// 051114
            end;
             //@ ↑		// 051114
                // 更新日時
                if GetFLD('UpdDateTM').IsNull then
                    MemPrint.FieldByName('LastUpDate').Clear
                else
                    MemPrint.FieldByName('LastUpDate').AsDateTime	:=	GetFLD('UpdDateTM').AsDateTime;
//} //<確認> <038>ここまでｺﾒﾝﾄを戻す
                MemPrint.Post;
                iKensu	:=	iKensu	+	1;
                NEXT;
            end;
        end;
    end;

	DmqPrint.Close();
	DmqPrint.Free();
	DmqFusen.Close();
	DmqFusen.Free();

	//	件数表示処理
	sKensu	:=	IntToStr(iKensu);	//	数値型を文字型に
	iLength	:=	Length(sKensu);
	if ( iLength = 4 ) then
	begin
		sWork1	:=	COPY(sKensu,2,3);
		sWork2	:=	COPY(sKensu,1,1);
		sKensu	:=	sWork2 + ',' + sWork1;
	end;

    LKensu.Caption	:=	sKensu + ' 件';

    DDataSource.DataSet	:=	MemPrint;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

	if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// SaimokuPrn()
//	< 細目印刷処理 >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.SaimokuPrn(Select: TDlgRetID);
var
	DmqData			    :	TMQuery;	// 実在科目検索用
	DmqPrint		    :	TMQuery;	// 印刷用
	DmqFusen		    :	TMQuery;
	iKamokuCode		    :	Integer;	// 実在の外部ｺｰﾄﾞ
    iKamokuNCode        :   Extended;   // 実在の内部ｺｰﾄﾞ
	sSimpleName		    :	String;		// 実在の簡略名称
	iWork			    :	Integer;
	bRensouOrderFlag	:	Boolean;
    iDigit              :   Integer;    // <030>科目別補助ｺｰﾄﾞ桁数
    iAttr               :   Integer;    // <030>科目別補助ｺｰﾄﾞ属性
begin

	//	初期処理
	bRensouOrderFlag	:=	FALSE;

    // MQueryの構築
	DmqData     :=  TMQuery.Create( Self );
	DmqPrint    :=  TMQuery.Create( Self );
    DmqFusen    :=  TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqPrint );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );
    DDataSource.DataSet	:=	nil;
    MemPrint_Saimoku.Open();

	with DmqData do
	begin
		Close;
		SQL.Clear;
		SQL.Add('SELECT                 '
            +   '    NCode              '   // 科目内部ｺｰﾄﾞ
            +   '   ,GCode              '   // 科目外部ｺｰﾄﾞ
            +   '   ,SimpleName         '   // 簡略名称
            +   '   ,CodeDigit          '   // 科目別補助ｺｰﾄﾞ桁数<030>
            +   '   ,CodeAttr           '   // 科目別補助ｺｰﾄﾞ属性<030>
            +   'FROM   KmkMA           '   // 勘定科目基本ﾏｽﾀ
            +   'WHERE  (MasterKbn = 1) '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (RDelKbn   = 0) '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            +   '  AND  (SumKbn    = 0) '   // 実在/合計区分(0:実在)
            +   '  AND  (CNCode    = 0) '); // 細目内部ｺｰﾄﾞ

		// 050825 hirota >>
	    if ( uvHani.pvrRgType[0] <> 0 ) then									// 範囲指定？
        begin
	        if ( uvHani.pvrStCode[0] <> '' ) and
    	       ( uvHani.pvrEdCode[0] =  '' ) then
        	begin
            	SQL.Add('  AND  (GCode >= :ExCode)   ');
	            ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
    	    end
        	else if ( uvHani.pvrStCode[0] =  '' ) and
            	    ( uvHani.pvrEdCode[0] <> '' ) then
	        begin
    	        SQL.Add('  AND  (GCode <= :ExCode)   ');
        	    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrEdCode[0],0);
	        end
    	    else if ( uvHani.pvrStCode[0] <> '' ) and
        	        ( uvHani.pvrEdCode[0] <> '' ) then
	        begin
    	        SQL.Add('  AND  (GCode >= :ExStCode)     ');
        	    SQL.Add('  AND  (GCode <= :ExEdCode)     ');
            	ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
	            ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
    	    end;
  	    end;
		// 050825 hirota <<
		SQL.Add('ORDER BY GCode     ');

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
			DmqPrint.Close();
			DmqPrint.Free();
			DmqFusen.Close();
			DmqFusen.Free();
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			iKamokuCode	    :=	GetFLD('GCode')     .AsInteger;
            iKamokuNCode    :=  GetFLD('NCode')     .AsFloat;
			sSimpleName	    :=	GetFLD('SimpleName').AsString;
            iDigit          :=  GetFLD('CodeDigit') .AsInteger; // <030>科目別補助ｺｰﾄﾞ桁数
            iAttr           :=  GetFLD('CodeAttr')  .AsInteger; // <030>科目別補助ｺｰﾄﾞ属性

			with DmqPrint do
			begin
				Close();
				SQL.Clear();
				SQL.Add('SELECT                             '
                    +   '    MA.CNCode                      '   // 細目内部ｺｰﾄﾞ
                    +   '   ,MA.SubCode                     '   // 細目外部ｺｰﾄﾞ
                    +   '   ,MA.LongName                    '   // 正式名称
                    +   '   ,MA.SimpleName                  '   // 簡略名称
                    +   '   ,MA.Renso                       '   // 連想ｼﾝﾎﾞﾙ
                    +   '   ,MA.DebitCash                   '   // 借方資金繰ｺｰﾄﾞ
                    +   '   ,MA.CreditCash                  '   // 貸方資金繰ｺｰﾄﾞ
                    +   '   ,MB.DecoKbn                     '   // 装飾区分
                    +   '   ,MA.DPointNum                   '   // 小数点桁数
                    +   '   ,MA.TStartDate                  '   // 適用開始年月日
                    +   '   ,MA.TEndDate                    '   // 適用終了年月日
                    +   '   ,MA.UpdDateTM                   '   // 更新日時
                    +   'FROM   KmkMA MA,                   '   // 勘定科目基本ﾏｽﾀ
                    +   '       KmkMB MB                    '   // 勘定科目詳細情報
                    +   'WHERE  (MA.MasterKbn = 2)          '   // ﾏｽﾀ区分(2:細目科目)
                    +   '  AND  (MB.MasterKbn = 2)          '   // ﾏｽﾀ区分(2:細目科目)
                    +   '  AND  (MA.RDelKbn   = 0)          '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
                    +   '  AND  (MA.SumKbn    = 0)          '   // 実在/合計区分(0:実在)
                    +   '  AND  (MA.NCode     = MB.NCode)   '   // 科目内部ｺｰﾄﾞ
                    +   '  AND  (MA.CNCode    = MB.CNCode)  '   // 細目内部ｺｰﾄﾞ
                    +   '  AND  (MA.GCode     = :ExCode)    '); // 科目外部ｺｰﾄﾞ

                // 出力順序
                if ( uvHani.pvrOrder = CODEORDER ) then
                    SQL.Add('ORDER BY MA.SubCode            ')
                else
                begin
                    SQL.Add('  AND  (MA.Renso <> '''')      ');
                    SQL.Add('ORDER BY MA.Renso,MA.SubCode   ');
                    //@ ↓12.01 連想フラグにtrue代入
                    bRensouOrderFlag := TRUE
                    //@ ↑
                end;

				ParamByName('ExCode').AsInteger :=  iKamokuCode;

				// ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqPrint);
					DmqPrint.Close();
					DmqPrint.Free();
					DmqData.Close();
					DmqData.Free();
					DmqFusen.Close();
					DmqFusen.Free();
					Exit;
				end;

				while ( EOF <> TRUE ) do
				begin
					MemPrint_Saimoku.Append();

                    // ﾌｧｲﾙ出力以外
					if ( Select <> PDLG_FILE ) then
					begin
						// 付箋表示処理
						DmqFusen.Close();
						DmqFusen.SQL.Clear();
						DmqFusen.SQL.Add('SELECT                        '
                                    +    '   FusenKbn                   '	// 付箋区分
						            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
						            +    'WHERE (MasterKbn = 2)         '   // ﾏｽﾀ区分(2:細目科目)
                                    +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                                    +    '  AND (SubNCode  = :ExCNCode) ');	// 細目内部ｺｰﾄﾞ

						DmqFusen.ParamByName('ExNCode') .AsFloat    :=	iKamokuNCode;
						DmqFusen.ParamByName('ExCNCode').AsFloat	:=  GetFld('CNCode').AsFloat;

						// ｴﾗｰの判定
						if ( DmqFusen.Open = FALSE ) then
						begin
							ErrorMessageDsp(DmqFusen);
							DmqFusen.Close();
							DmqFusen.Free();
							DmqData.Close();
							DmqData.Free();
							DmqPrint.Close();
							DmqPrint.Free();
							Exit;
						end;

						if ( DmqFusen.EOF <> TRUE ) then
						begin
                            // 付箋区分
							case DmqFusen.GetFLD('FusenKbn').AsInteger of
								0:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Clear;
{
								1:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FRE.Bitmap);
								2:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FGR.Bitmap);
								3:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FBU.Bitmap);
								4:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FOR.Bitmap);
}
                                1:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
                				2:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
                				3:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
                				4:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
							end;
						end;
					end;

				    // 科目ｺｰﾄﾞ
					MemPrint_Saimoku.FieldByName('S_KCode').AsInteger			:=	iKamokuCode;
				    // 科目簡略名称
					MemPrint_Saimoku.FieldByName('S_KName').AsString			:=	sSimpleName;
                    // <030>科目別補助ｺｰﾄﾞ桁数
                    MemPrint_Saimoku.FieldByName('S_CodeDigit').AsInteger       :=  iDigit;
                    // <030>科目別補助ｺｰﾄﾞ属性
                    MemPrint_Saimoku.FieldByName('S_CodeAttr').AsInteger        :=  iAttr;
				    // 細目ｺｰﾄﾞ
// <030>↓
//					MemPrint_Saimoku.FieldByName('S_SCode').AsInteger			:=	GetFLD('SubCode').AsInteger;
					MemPrint_Saimoku.FieldByName('S_SCode').AsString
                                	:=	fnSaimokuSetAttr(0, GetFLD('SubCode').AsString, iAttr, iDigit);
// <030>↑
				    // 正式名称
					MemPrint_Saimoku.FieldByName('S_SeisikiName').AsString		:=	GetFLD('LongName').AsString;
				    // 簡略名称
					MemPrint_Saimoku.FieldByName('S_KanryakuName').AsString		:=	GetFLD('SimpleName').AsString;
				    // 連想ｼﾝﾎﾞﾙ
					MemPrint_Saimoku.FieldByName('S_Renso').AsString			:=	GetFLD('Renso').AsString;
				    // 借方資金繰ｺｰﾄﾞ
					if ( GetFLD('DebitCash').AsFloat = 0 ) then
						MemPrint_Saimoku.FieldByName('S_KarikuriNo').Clear
					else
						MemPrint_Saimoku.FieldByName('S_KarikuriNo').AsInteger	:=
                            gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>

					MemPrint_Saimoku.FieldByName('S_KarikuriName').AsString		:=
                            GetSKmkMA(SHIKINGURI, MemPrint_Saimoku.FieldByName('S_KarikuriNo').AsInteger, iWork);
    				// 貸方資金繰ｺｰﾄﾞ
					if ( GetFLD('CreditCash').AsFloat = 0 ) then
						MemPrint_Saimoku.FieldByName('S_KashikuriNo').Clear
					else
						MemPrint_Saimoku.FieldByName('S_KashikuriNo').AsInteger	:=
                            gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);   //  <055>

					MemPrint_Saimoku.FieldByName('S_KashikuriName').AsString	:=
                            GetSKmkMA(SHIKINGURI, MemPrint_Saimoku.FieldByName('S_KashikuriNo').AsInteger, iWork);
    				// 装飾区分名称
					MemPrint_Saimoku.FieldByName('S_SousyokuName').AsString	:=	PrintGetSousyoku(GetFLD('DecoKbn').AsInteger);
				    // 小数点桁数
					MemPrint_Saimoku.FieldByName('S_Syousu').AsInteger			:=	GetFLD('DPointNum').AsInteger;
				    // 適用開始日
// <033>
//					if ( GetFLD('TStartDate').IsNull ) then
                    if GetFLD('TStartDate').AsDateTime = MjsIntToDate(DEFDATE_START, #0) then
						MemPrint_Saimoku.FieldByName('S_StartDate').Clear
					else
						MemPrint_Saimoku.FieldByName('S_StartDate').AsDateTime	:=	GetFLD('TStartDate').AsDateTime;
				    // 適用終了日
// <033>
//					if ( GetFLD('TEndDate').IsNull ) then
                    if GetFLD('TEndDate').AsDateTime = MjsIntToDate(DEFDATE_END, #0) then
						MemPrint_Saimoku.FieldByName('S_EndDate').Clear
					else
						MemPrint_Saimoku.FieldByName('S_EndDate').AsDateTime	:=	GetFLD('TEndDate').AsDateTime;
				    // 更新日時
					if ( GetFLD('UpdDateTM').IsNull ) then
						MemPrint_Saimoku.FieldByName('S_LastUpDate').Clear
					else
						MemPrint_Saimoku.FieldByName('S_LastUpDate').AsDateTime	:=	GetFLD('UpdDateTM').AsDateTime;

					MemPrint_Saimoku.Post();
					Next();
				end;

                // 連想順の時空白を後に印刷する
				if ( bRensouOrderFlag = TRUE ) then
				begin
					Close();
					SQL.Clear();
					SQL.Add('SELECT                             '
                        +   '    MA.CNCode                      '   // 細目内部ｺｰﾄﾞ
					    +   '   ,MA.SubCode                     '   // 細目外部ｺｰﾄﾞ
					    +   '   ,MA.LongName                    '	// 正式名称
					    +   '   ,MA.SimpleName                  '   // 簡略名称
					    +   '   ,MA.Renso                       '   // 連想ｼﾝﾎﾞﾙ
					    +   '   ,MA.DebitCash                   '   // 借方資金繰ｺｰﾄﾞ
					    +   '   ,MA.CreditCash                  '   // 貸方資金繰ｺｰﾄﾞ
					    +   '   ,MB.DecoKbn                     '   // 装飾区分
					    +   '   ,MA.DPointNum                   '   // 小数点桁数
					    +   '   ,MA.TStartDate                  '   // 適用開始年月日
					    +   '   ,MA.TEndDate                    '	// 適用終了年月日
					    +   '   ,MA.UpdDateTM                   '	// 更新日時
					    +   'FROM   KmkMA MA,                   '	// 勘定科目基本ﾏｽﾀ
						+   '       KmkMB MB                    '	// 勘定科目詳細情報
					    +   'WHERE  (MA.MasterKbn = 2)          '	// ﾏｽﾀ区分(2:細目科目)
                        +   '  AND  (MB.MasterKbn = 2)          '	// ﾏｽﾀ区分(2:細目科目)
                    	+   '  AND  (MA.RDelKbn   = 0)          '	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
						+   '  AND  (MA.SumKbn    = 0)          '	// 実在/合計区分(0:実在)
						+   '  AND  (MA.NCode     = MB.NCode)   '	// 科目内部ｺｰﾄﾞ
						+   '  AND  (MA.CNCode    = MB.CNCode)  '   // 細目内部ｺｰﾄﾞ
						+   '  AND  (MA.GCode     = :ExCode)    '   // 科目外部ｺｰﾄﾞ
						+   '  AND  (MA.Renso     = '''')       '   // 連想=''
					    +   'ORDER BY MA.Renso,MA.GCode         ');

					ParamByName('ExCode').AsInteger  :=  iKamokuCode;

					// ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqPrint);
						DmqPrint.Close();
						DmqPrint.Free();
						DmqData.Close();
						DmqData.Free();
						DmqFusen.Close();
						DmqFusen.Free();
						Exit;
					end;

					while ( EOF <> TRUE ) do
					begin
						MemPrint_Saimoku.Append();

                        // ﾌｧｲﾙ出力以外
						if ( Select <> PDLG_FILE ) then
						begin
							// 付箋表示処理
							DmqFusen.Close();
							DmqFusen.SQL.Clear();
							DmqFusen.SQL.Add('SELECT                        '
							            +    '   FusenKbn                   '   // 付箋区分
							            +    'FROM MFusenInfo               '   // ﾏｽﾀ付箋管理情報
							            +    'WHERE (MasterKbn = 2)         '   // ﾏｽﾀ区分(2:細目科目)
                                        +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                                        +    '  AND (SubNCode  = :ExCNCode) ');	// 細目内部ｺｰﾄﾞ

							DmqFusen.ParamByName('ExNCode') .AsFloat    :=	iKamokuNCode;
							DmqFusen.ParamByName('ExCNCode').AsFloat	:=  GetFld('CNCode').AsFloat;

							// ｴﾗｰの判定
							if ( DmqFusen.Open = FALSE ) then
							begin
								ErrorMessageDsp(DmqFusen);
								DmqFusen.Close();
								DmqFusen.Free();
								DmqData.Close();
								DmqData.Free();
								DmqPrint.Close();
								DmqPrint.Free();
								Exit;
							end;

							if ( DmqFusen.EOF <> TRUE ) then
							begin
                                // 付箋区分
								case DmqFusen.GetFLD('FusenKbn').AsInteger of
									0:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Clear;
{
									1:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FRE.Bitmap);
									2:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FGR.Bitmap);
									3:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FBU.Bitmap);
									4:	TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(PM_FOR.Bitmap);
}
                                    1:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
                    				2:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
                    				3:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
                    				4:  TGraphicField(MemPrint_Saimoku.FieldByName('S_Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
								end;
							end;
						end;

					    // 科目ｺｰﾄﾞ
						MemPrint_Saimoku.FieldByName('S_KCode').AsInteger			:=	iKamokuCode;
					    // 科目簡略名称
						MemPrint_Saimoku.FieldByName('S_KName').AsString			:=	sSimpleName;
					    // 細目ｺｰﾄﾞ
// <030>↓
//						MemPrint_Saimoku.FieldByName('S_SCode').AsInteger			:=	GetFLD('SubCode').AsInteger;
					    MemPrint_Saimoku.FieldByName('S_SCode').AsString
                                	:=	fnSaimokuSetAttr(0, GetFLD('SubCode').AsString, iAttr, iDigit);
// <030>↑
					    // 正式名称
						MemPrint_Saimoku.FieldByName('S_SeisikiName').AsString		:=	GetFLD('LongName').AsString;
					    // 簡略名称
						MemPrint_Saimoku.FieldByName('S_KanryakuName').AsString		:=	GetFLD('SimpleName').AsString;
					    // 連想ｼﾝﾎﾞﾙ
						MemPrint_Saimoku.FieldByName('S_Renso').AsString			:=	GetFLD('Renso').AsString;
					    // 借方資金繰ｺｰﾄﾞ
						if ( GetFLD('DebitCash').AsFloat = 0 ) then
							MemPrint_Saimoku.FieldByName('S_KarikuriNo').Clear
						else
							MemPrint_Saimoku.FieldByName('S_KarikuriNo').AsInteger	:=
                                gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>

						MemPrint_Saimoku.FieldByName('S_KarikuriName').AsString		:=
                        	    GetSKmkMA(SHIKINGURI, MemPrint_Saimoku.FieldByName('S_KarikuriNo').AsInteger, iWork);
					    // 貸方資金繰ｺｰﾄﾞ
						if ( GetFLD('CreditCash').AsFloat = 0 ) then
							MemPrint_Saimoku.FieldByName('S_KashikuriNo').Clear
						else
							MemPrint_Saimoku.FieldByName('S_KashikuriNo').AsInteger	:=
                                gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);    //  <055>

						MemPrint_Saimoku.FieldByName('S_KashikuriName').AsString	:=
                            	GetSKmkMA(SHIKINGURI, MemPrint_Saimoku.FieldByName('S_KashikuriNo').AsInteger, iWork);
					    // 装飾区分名称
						MemPrint_Saimoku.FieldByName('S_SousyokuName').AsString	:=	PrintGetSousyoku(GetFLD('DecoKbn').AsInteger);
					    // 小数点桁数
						MemPrint_Saimoku.FieldByName('S_Syousu').AsInteger			:=	GetFLD('DPointNum').AsInteger;
					    // 適用開始日
// <033>
//						if ( GetFLD('TStartDate').IsNull ) then
                        if GetFLD('TStartDate').AsDateTime = MjsIntToDate(DEFDATE_START, #0) then
							MemPrint_Saimoku.FieldByName('S_StartDate').Clear
						else
							MemPrint_Saimoku.FieldByName('S_StartDate').AsDateTime	:=	GetFLD('TStartDate').AsDateTime;
					    // 適用終了日
// <033>
//						if ( GetFLD('TEndDate').IsNull ) then
                        if GetFLD('TEndDate').AsDateTime = MjsIntToDate(DEFDATE_END, #0) then
							MemPrint_Saimoku.FieldByName('S_EndDate').Clear
						else
							MemPrint_Saimoku.FieldByName('S_EndDate').AsDateTime	:=	GetFLD('TEndDate').AsDateTime;
					    // 更新日時
                        //@ ↓ 12.01　GetFld内項目変更
                        //if ( GetFLD('UpdDateTime').IsNull ) then
                        //@ ↑
                        if ( GetFLD('UpdDateTM').IsNull ) then

							MemPrint_Saimoku.FieldByName('S_LastUpDate').Clear
						else
							MemPrint_Saimoku.FieldByName('S_LastUpDate').AsDateTime	:=	GetFLD('UpdDateTM').AsDateTime;

						MemPrint_Saimoku.Post();
						Next();
					end;
				end;
			end;
			Next();
		end;
    end;

	DmqFusen.Close();
	DmqFusen.Free();
	DmqPrint.Close();
	DmqPrint.Free();
	DmqData.Close();
	DmqData.Free();

    DDataSource.DataSet	:=	MemPrint_Saimoku;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_Saimoku.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// GoukeiPrn()
//	< 合計印刷処理 >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.GoukeiPrn(Select: TDlgRetID);
var
	DmqPrint			:	TMQuery;
	DmqFusen			:	TMQuery;
	iKensu				:	Integer;		//	表示件数(Integer型)
	sKensu				:	String;			//	表示件数(String型)
	iLength				:	Integer;		//	文字の桁数
	sWork1				:	String;
	sWork2				:	String;
	bRensouOrderFlag	:	Boolean;
begin

	// 初期処理
	iKensu	            :=	0;
	bRensouOrderFlag	:=	FALSE;

    // MQueryの構築
	DmqPrint    :=  TMQuery.Create( Self );
    DmqFusen    :=  TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqPrint );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );
    DDataSource.DataSet	:=	nil;
	MemPrint_Goukei.Open();

	with DmqPrint do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT                     '
            +   '    MA.NCode               '   // 内部ｺｰﾄﾞ
		    +   '   ,MA.GCode               '   // 外部ｺｰﾄﾞ
		    +   '   ,MA.LongName            '	// 正式名称
		    +   '   ,MA.SimpleName          '   // 簡略名称
		    +   '   ,MA.Renso               '	// 連想ｼﾝﾎﾞﾙ
		    +   '   ,MA.DCKbn               '	// 正残区分
		    +   '   ,MA.BPKbn               '	// BS/PL区分
		    +   '   ,MB.DecoKbn             '	// 装飾区分
		    +   '   ,MA.NonDspKbn           '   // 表示／印刷不可区分
		    +   '   ,MB.SagakuKbn           '   // 差額印刷区分
	   	    +   '   ,MB.ProfitKbn           '   // 利益印刷区分
		    +   '   ,MB.MinusKbn            '   // ﾏｲﾅｽ印刷区分
		    +   '   ,MB.AveKbn              '	// 平均値採用区分
		    +   '   ,MB.RuikeiKbn           '   // 累計集計区分
		    +   '   ,MB.TotalKbn            '	// 合計表示区分
		    +   '   ,MB.MinusName           '   // ﾏｲﾅｽ変換科目名
		    +   '   ,MA.UpdDateTM           '	// 更新日時
		    +   'FROM   KmkMA MA,           '	// 勘定科目基本ﾏｽﾀ
		    +   '       KmkMB MB            '	// 勘定科目詳細情報
		    +   'WHERE  (MA.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            +   '  AND  (MA.SumKbn    = 1)  '   // 実在/合計区分(1:合計)
            +   '  AND  (MA.CNCode    = 0)  '   // 細目内部ｺｰﾄﾞ
            +   '  AND  (MB.CNCode    = 0)  '); // 細目内部ｺｰﾄﾞ

        if ( uvHani.pvrRgType[0] = 0 ) then
        begin
            SQL.Add('  AND  (MA.NCode = MB.NCode)   ');
        end
        else
        begin
            if ( uvHani.pvrStCode[0] <> '' ) and
               ( uvHani.pvrEdCode[0] =  '' ) then
            begin
                SQL.Add('  AND  (MA.GCode >= :ExCode)   ');
			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
			    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
            end
            else if ( uvHani.pvrStCode[0] =  '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MA.GCode <= :ExCode)   ');
			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
    			ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrEdCode[0],0);
            end
            else if ( uvHani.pvrStCode[0] <> '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MA.GCode >= :ExStCode)     ');
			    SQL.Add('  AND  (MA.GCode <= :ExEdCode)     ');
    			SQL.Add('  AND  (MA.NCode  = MB.NCode)      ');
    			ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
    			ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
            end;
        end;

		// 出力順序
        if ( uvHani.pvrOrder = CODEORDER ) then
            SQL.Add('ORDER BY MA.GCode  ')
        else
        begin
            SQL.Add('  AND  (MA.Renso <> '''')  ');
            SQL.Add('ORDER BY MA.Renso,MA.GCode ');
            bRensouOrderFlag    :=  TRUE;
        end;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqPrint);
			DmqPrint.Close();
			DmqPrint.Free();
			DmqFusen.Close();
            DmqFusen.Free();
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			MemPrint_Goukei.Append();

            // ﾌｧｲﾙ出力以外
			if ( Select <> PDLG_FILE ) then
			begin
				// 付箋表示処理
				DmqFusen.Close;
				DmqFusen.SQL.Clear;
				DmqFusen.SQL.Add('SELECT                        '
				            +    '   FusenKbn                   '   // 付箋区分
                            +    'FROM MFusenInfo               '   // ﾏｽﾀ付箋管理情報
				            +    'WHERE (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
                            +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                            +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

				DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

				// ｴﾗｰの判定
				if ( DmqFusen.Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqFusen);
					DmqFusen.Close();
					DmqFusen.Free();
					DmqPrint.Close();
					DmqPrint.Free();
					Exit;
				end;

				if ( DmqFusen.EOF <> TRUE ) then
				begin
                    // 付箋区分
					case DmqFusen.GetFLD('FusenKbn').AsInteger of
						0:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Clear;
{
						1:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FRE.Bitmap);
						2:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FGR.Bitmap);
						3:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FBU.Bitmap);
						4:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FOR.Bitmap);
}
                        1:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
                    	2:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
                    	3:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
                    	4:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
					end;
				end;
			end;

		    // 合計外部ｺｰﾄﾞ
			MemPrint_Goukei.FieldByName('G_Code').AsInteger			:=	GetFld('GCode').AsInteger;
		    // 正式名称
// <049>↓
//			MemPrint_Goukei.FieldByName('G_SeishikiName').AsString	:=	GetFld('LongName').AsString;
			MemPrint_Goukei.FieldByName('G_SeishikiName').AsString	:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
		    // 簡略名称
			MemPrint_Goukei.FieldByName('G_KanryakuName').AsString	:=	GetFld('SimpleName').AsString;
		    // 連想ｼﾝﾎﾞﾙ
			MemPrint_Goukei.FieldByName('G_Rensou').AsString		:=	GetFld('Renso').AsString;
		    // 正残区分(名称)
			case GetFLD('DCKbn').AsInteger of
				0:	MemPrint_Goukei.FieldByName('G_SeizanName').AsString	:=	'借方';
				1:	MemPrint_Goukei.FieldByName('G_SeizanName').AsString	:=	'貸方';
			end;
		    // BS/PL区分(名称)
			case GetFLD('BPKbn').AsInteger of
				0:	MemPrint_Goukei.FieldByName('G_BPName').AsString	:=	'BS';
				1:	MemPrint_Goukei.FieldByName('G_BPName').AsString	:=	'PL';
			end;
		    // 装飾区分
			MemPrint_Goukei.FieldByName('G_SousyokuName').AsString	:=	PrintGetSousyoku(GetFLD('DecoKbn').AsInteger);
		    // 表示/印刷区分(名称)
			case GetFLD('NonDspKbn').AsInteger of
				0:	MemPrint_Goukei.FieldByName('G_DsPriName').AsString	:=	'可';
				1:	MemPrint_Goukei.FieldByName('G_DsPriName').AsString	:=	'不可';
			end;
		    // 差額印刷
			MemPrint_Goukei.FieldByName('G_SagakuPriName').AsString :=	GetAriNashi(GetFLD('SagakuKbn').AsInteger);	//	差額印刷名称
		    // 利益印刷
			MemPrint_Goukei.FieldByName('G_RiekiPriName').AsString	:=	GetAriNashi(GetFLD('ProfitKbn').AsInteger);	//	利益印刷名称
		    // ﾏｲﾅｽ印刷
			MemPrint_Goukei.FieldByName('G_MainaPriName').AsString	:=	GetAriNashi(GetFLD('MinusKbn').AsInteger);	//	ﾏｲﾅｽ印刷名称
		    // 平均値採用
			MemPrint_Goukei.FieldByName('G_AveName').AsString		:=	GetAriNashi(GetFLD('AveKbn').AsInteger);	//	平均値採用名称
		    // 累計集計区分(名称)
			case GetFLD('RuikeiKbn').AsInteger of
				0:	MemPrint_Goukei.FieldByName('G_RuikeiName').AsString	:=	'累計あり';
				1:	MemPrint_Goukei.FieldByName('G_RuikeiName').AsString	:=	'累計なし';
			end;
		    // 合計表示区分
			MemPrint_Goukei.FieldByName('G_GoukeiDsp').AsString		:=	GetAriNashi(GetFLD('TotalKbn').AsInteger);	//	合計表示区分名称
		    // ﾏｲﾅｽ変換科目名
			MemPrint_Goukei.FieldByName('G_MainaKmk').AsString		:=	GetFLD('MinusName').AsString;
		    // 更新日時
			if ( GetFLD('UpdDateTM').IsNull ) then
				MemPrint_Goukei.FieldByName('G_LastUpDate').Clear
			else
				MemPrint_Goukei.FieldByName('G_LastUpDate').AsDateTime	:=	GetFLD('UpdDateTM').AsDateTime;

			MemPrint_Goukei.Post();
			iKensu	:=	iKensu	+	1;
			NEXT();
		end;

        // 連想順の時空白を後に印刷する
		if ( bRensouOrderFlag = TRUE ) then
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT                     '	   
                +   '    MA.NCode               '   // 内部ｺｰﾄﾞ
			    +   '   ,MA.GCode               '	// 外部ｺｰﾄﾞ
			    +   '   ,MA.LongName            '	// 正式名称
			    +   '   ,MA.SimpleName          '   // 簡略名称
			    +   '   ,MA.Renso               '	// 連想ｼﾝﾎﾞﾙ
			    +   '   ,MA.DCKbn               '	// 正残区分
			    +   '   ,MA.BPKbn               '   // BS/PL区分
			    +   '   ,MB.DecoKbn             '   // 装飾区分
			    +   '   ,MA.NonDspKbn           '   // 表示／印刷不可区分
			    +   '   ,MB.SagakuKbn           '   // 差額印刷区分
			    +   '   ,MB.ProfitKbn           '   // 利益印刷区分
			    +   '   ,MB.MinusKbn            '   // ﾏｲﾅｽ印刷区分
			    +   '   ,MB.AveKbn              '	// 平均値採用区分
			    +   '   ,MB.RuikeiKbn           '   // 累計集計区分
			    +   '   ,MB.TotalKbn            '   // 合計表示区分
			    +   '   ,MB.MinusName           '   // ﾏｲﾅｽ変換科目名
			    +   '   ,MA.UpdDateTM           '   // 更新日時
			    +   'FROM   KmkMA MA,           '	// 勘定科目基本ﾏｽﾀ
				+   '       KmkMB MB            '   // 勘定科目詳細情報
			    +   'WHERE  (MA.MasterKbn = 1)  '	// ﾏｽﾀ区分(1:勘定科目)
                +   '  AND  (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
                +   '  AND  (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
                +   '  AND  (MA.SumKbn    = 1)  '   // 実在/合計区分(1:合計)
                +   '  AND  (MA.CNCode    = 0)  '   // 細目内部ｺｰﾄﾞ
                +   '  AND  (MB.CNCode    = 0)  '); // 細目内部ｺｰﾄﾞ

            if ( uvHani.pvrRgType[0] = 0 ) then
            begin
                SQL.Add('  AND  (MA.NCode = MB.NCode)   ');
            end
            else
            begin
                if ( uvHani.pvrStCode[0] <> '' ) and
                   ( uvHani.pvrEdCode[0] =  '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode >= :ExCode)   ');
                    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
                    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] =  '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode <= :ExCode)   ');
                    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
                    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] <> '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode >= :ExStCode)     ');
                    SQL.Add('  AND  (MA.GCode <= :ExEdCode)     ');
                    SQL.Add('  AND  (MA.NCode  = MB.NCode)      ');
                    ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
                    ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                end;
            end;

			// 出力順序
			SQL.Add('  AND  (MA.Renso = '''')   ');
			SQL.Add('ORDER BY MA.Renso,MA.GCode ');

			// ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqPrint);
				DmqPrint.Close();
				DmqPrint.Free();
				DmqFusen.Close();
        		DmqFusen.Free();
				Exit;
			end;

			while ( EOF <> TRUE ) do
			begin
				MemPrint_Goukei.Append();

                // ﾌｧｲﾙ出力以外
				if ( Select <> PDLG_FILE ) then
				begin
					// 付箋表示処理
					DmqFusen.Close();
					DmqFusen.SQL.Clear();
					DmqFusen.SQL.Add('SELECT                        '
                                +    '   FusenKbn                   '   // 付箋区分
					            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
					            +    'WHERE (MasterKbn = 1)         '	// ﾏｽﾀ区分(1:勘定科目)
                                +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                                +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

					DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

					// ｴﾗｰの判定
					if ( DmqFusen.Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqFusen);
						DmqFusen.Close();
						DmqFusen.Free();
						DmqPrint.Close();
						DmqPrint.Free();
						Exit;
					end;

					if ( DmqFusen.EOF <> TRUE ) then
					begin
                        // 付箋区分
						case DmqFusen.GetFLD('FusenKbn').AsInteger of
							0:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Clear;
{
							1:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FRE.Bitmap);
							2:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FGR.Bitmap);
							3:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FBU.Bitmap);
							4:	TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(PM_FOR.Bitmap);
}
                            1:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
                        	2:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
                        	3:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
                        	4:  TGraphicField(MemPrint_Goukei.FieldByName('G_Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
						end;
					end;
				end;

			    // 合計外部ｺｰﾄﾞ
				MemPrint_Goukei.FieldByName('G_Code').AsInteger			:=	GetFld('GCode').AsInteger;
			    // 正式名称
// <049>↓
//				MemPrint_Goukei.FieldByName('G_SeishikiName').AsString	:=	GetFld('LongName').AsString;
				MemPrint_Goukei.FieldByName('G_SeishikiName').AsString	:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
			    // 簡略名称
				MemPrint_Goukei.FieldByName('G_KanryakuName').AsString	:=	GetFld('SimpleName').AsString;
			    // 連想ｼﾝﾎﾞﾙ
				MemPrint_Goukei.FieldByName('G_Rensou').AsString		:=	GetFld('Renso').AsString;
			    // 正残区分(名称)
				case GetFLD('DCKbn').AsInteger of
					0:	MemPrint_Goukei.FieldByName('G_SeizanName').AsString	:=	'借方';
					1:	MemPrint_Goukei.FieldByName('G_SeizanName').AsString	:=	'貸方';
				end;
    			// BS/PL区分(名称)
				case GetFLD('BPKbn').AsInteger of
					0:	MemPrint_Goukei.FieldByName('G_BPName').AsString	:=	'BS';
					1:	MemPrint_Goukei.FieldByName('G_BPName').AsString	:=	'PL';
				end;
    			// 装飾区分
				MemPrint_Goukei.FieldByName('G_SousyokuName').AsString	:=	PrintGetSousyoku(GetFLD('DecoKbn').AsInteger);
    			// 表示/印刷区分(名称)
				case GetFLD('NonDspKbn').AsInteger of
					0:	MemPrint_Goukei.FieldByName('G_DsPriName').AsString	:=	'可';
					1:	MemPrint_Goukei.FieldByName('G_DsPriName').AsString	:=	'不可';
				end;
    			// 差額印刷
				MemPrint_Goukei.FieldByName('G_SagakuPriName').AsString :=	GetAriNashi(GetFLD('SagakuKbn').AsInteger);	//	差額印刷名称
    			// 利益印刷
				MemPrint_Goukei.FieldByName('G_RiekiPriName').AsString	:=	GetAriNashi(GetFLD('ProfitKbn').AsInteger);	//	利益印刷名称
    			// ﾏｲﾅｽ印刷
				MemPrint_Goukei.FieldByName('G_MainaPriName').AsString	:=	GetAriNashi(GetFLD('MinusKbn').AsInteger);	//	ﾏｲﾅｽ印刷名称
    			// 平均値採用
				MemPrint_Goukei.FieldByName('G_AveName').AsString		:=	GetAriNashi(GetFLD('AveKbn').AsInteger);	//	平均値採用名称
    			// 累計集計区分(名称)
				case GetFLD('RuikeiKbn').AsInteger of
					0:	MemPrint_Goukei.FieldByName('G_RuikeiName').AsString	:=	'累計あり';
					1:	MemPrint_Goukei.FieldByName('G_RuikeiName').AsString	:=	'累計なし';
				end;
    			// 合計表示区分
				MemPrint_Goukei.FieldByName('G_GoukeiDsp').AsString		:=	GetAriNashi(GetFLD('TotalKbn').AsInteger);	//	合計表示区分名称
       			// ﾏｲﾅｽ変換科目名
				MemPrint_Goukei.FieldByName('G_MainaKmk').AsString		:=	GetFLD('MinusName').AsString;
    			// 更新日時
				if ( GetFLD('UpdDateTM').IsNull ) then
					MemPrint_Goukei.FieldByName('G_LastUpDate').Clear
				else
					MemPrint_Goukei.FieldByName('G_LastUpDate').AsDateTime	:=	GetFLD('UpdDateTM').AsDateTime;

				MemPrint_Goukei.Post();
				iKensu	:=	iKensu	+	1;
				NEXT();
			end;
		end;
	end;

	DmqFusen.Close();
	DmqFusen.Free();
	DmqPrint.Close();
	DmqPrint.Free();

	// 件数表示処理
	sKensu	:=  IntToStr(iKensu);	// 数値型を文字型に
	iLength :=	Length(sKensu);
	if (iLength = 4) then
	begin
		sWork1	:=	COPY(sKensu,2,3);
		sWork2	:=	COPY(sKensu,1,1);
		sKensu	:=	sWork2 + ',' + sWork1;
	end;

    RL_Kensu.Caption	:=	sKensu + ' 件';

	DDataSource.DataSet	:=	MemPrint_Goukei;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_Goukei.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
		mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// TaikeiPrn()
//	< 体系印刷処理 >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.TaikeiPrn(Select: TDlgRetID);
var
	iKmkNCode	:	Extended;
	SumKbn		:	Byte;
	sKmkName	:	String;
	iLoop		:	Integer;
	i			:	Integer;
	iEndCode	:	Extended;
	pOverRec	:	POverCodeRec;
	pRec		:	POverCodeRec;

    // 検索ｴｸｽﾌﾟﾛｰﾗから選択されたｺｰﾄﾞなので絶対存在するので、外部ｺｰﾄﾞと削除区分で取得する。
    function GetKmkNCode(nGCODE: Integer):Extended;
    var
        DmqData :   TMQuery;
    begin

        Result  :=  0;

        // MQueryの構築
    	DmqData     :=  TMQuery.Create( Self );
        // DBとMQueryの接続
    	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

		with DmqData do
        begin
            Close();
			SQL.Clear();
            SQL.Add('SELECT NCode FROM KmkMA        '
                +   'WHERE  (MasterKbn = 1)         '
                +   '  AND  (RDelKbn   = 0)         '
                +   '  AND  (GCode     = :GCode)    ');
            ParamByName('GCode').AsInteger  :=  nGCode;

			// ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				DmqData.Close();
				DmqData.Free();
				Exit;
			end;

            Result  :=  GetFld('NCode').AsFloat;

        end;

        DmqData.Close();
        DmqData.Free();

    end;

begin

    DDataSource.DataSet	:=	nil;
	MemPrint_Taikei.Open();

	for iLoop := 0 to 9 do
		aSaveFlag[iLoop]    :=  FALSE;

	for iLoop := 0 to 2 do
	begin
		case iLoop of
			// -------------------
			//      資産の部
			// -------------------
			0:
            begin
                m_OverCodeList := TList.Create;

//                if ( uvHani.pvrStCode[0] = '' ) then
				iKmkNCode   :=  GetKmkInfo(SHISAN_BU,1,SumKbn);
//				else
//                iKmkNCode   :=  GetKmkNCode(StrToIntDef(uvHani.pvrStCode[0],0));

				if ( iKmkNCode <> 0 ) then
				begin
				    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
	    			fnArrayClear(0,TRUE);
    				aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
    				aTaikeiList[0].SimpleName   :=  sKmkName;
    				aTaikeiList[0].SumKbn	    :=  SumKbn;
    				fnTaikeiMake(iKmkNCode,1);
    				HagureMakePrint(SHISAN);

					// 子供が10以上いるときの表示処理
    				for i := 0 to m_OverCodeList.Count-1 do
        			begin
    					pOverRec := m_OverCodeList.Items[i];
    					aTaikeiList[0].KmkCode	    :=  pOverRec^.KmkCode;
    					aTaikeiList[0].SimpleName   :=  fnGetKmkSimpleName(GetKmkNCode(pOverRec^.KmkCode));
    					aTaikeiList[0].SumKbn	    :=  pOverRec^.SumKbn;

	    				// 10を超えている体系のｺｰﾄﾞを別ﾘｽﾄに退避
    					New(pRec);
    					pRec^.KmkCode               :=  pOverRec^.KmkCode;
    					pRec^.SumKbn                :=  pOverRec^.SumKbn;
    					m_OverCodeList2.Add(pRec);
    					fnTaikeiMake(GetKmkNCode(pOverRec^.KmkCode),1);
    				end;

					for i := 0 to m_OverCodeList.Count-1 do
    	    		begin
						pOverRec := m_OverCodeList.Items[i];
    					Dispose(pOverRec);
    				end;
    				m_OverCodeList.Free;
    			end;
            end;
			// -------------------
			//	負債及び資本の部
            // -------------------
			1:
            begin
                m_OverCodeList  :=  TList.Create;

				iKmkNCode   :=  GetKmkInfo(FUSAI_BU,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					fnArrayClear(0,TRUE);
					aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[0].SimpleName   :=  sKmkName;
					aTaikeiList[0].SumKbn	    :=  SumKbn;
					fnTaikeiMake(iKmkNCode,1);
					HagureMakePrint(FUSAI);

					// 子供が10以上いるときの表示処理
					for i := 0 to m_OverCodeList.Count-1 do
    				begin
						pOverRec := m_OverCodeList.Items[i];
						aTaikeiList[0].KmkCode	    :=  pOverRec^.KmkCode;
						aTaikeiList[0].SimpleName   :=  fnGetKmkSimpleName(GetKmkNCode(pOverRec^.KmkCode));
						aTaikeiList[0].SumKbn	    :=  pOverRec^.SumKbn;

						// 10を超えている体系のｺｰﾄﾞを別ﾘｽﾄに退避
						New(pRec);
						pRec^.KmkCode               :=  pOverRec^.KmkCode;
						pRec^.SumKbn                :=  pOverRec^.SumKbn;
						m_OverCodeList2.Add(pRec);

						fnTaikeiMake(GetKmkNCode(pOverRec^.KmkCode),1);
					end;

					for i := 0 to m_OverCodeList.Count-1 do
    				begin
						pOverRec := m_OverCodeList.Items[i];
						Dispose(pOverRec);
					end;
					m_OverCodeList.Free;
				end;
            end;
			// -------------------
			//	    損益科目
            // -------------------
			2:
            begin
                iEndCode    :=  fnGetEndKmkInfo();

				m_OverCodeList  :=  TList.Create;
				fnArrayClear(0,TRUE);
				aTaikeiList[0].SimpleName   :=  '損益科目';

				// 売上高
				iKmkNCode   :=  GetKmkInfo(URIAGE,1,SumKbn);

                if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn 	    :=  '+'; 	//	加算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 売上原価
				iKmkNCode   :=  GetKmkInfo(URIAGEGENKA,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '-'; 	//	減算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 売上総利益
				iKmkNCode   :=  GetKmkInfo(URIAGESOURI,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt := '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 販売費及び一般管理費
				iKmkNCode   :=  GetKmkInfo(HANBAI_IPAN,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '-'; 	//	減算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 営業利益
				iKmkNCode   :=  GetKmkInfo(EIGYOU_RI,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt := '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 経常利益
				iKmkNCode := GetKmkInfo(KEIZYOU_RI,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 税引前利益
				iKmkNCode := GetKmkInfo(ZEIHIKIMAE,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 法人税等
				iKmkNCode   :=  GetKmkInfo(HOUZIN,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '-'; 	//	減算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 法人税調整額
				iKmkNCode   :=  GetKmkInfo(HOUZINTYOUSEI,1,SumKbn);

				if (iKmkNCode <> 0) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '-'; 	//	減算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;

				// 当期利益
				iKmkNCode   :=  GetKmkInfo(TOUKIRIEKI_SO,1,SumKbn);

				if ( iKmkNCode <> 0 ) then
				begin
					sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					aTaikeiList[1].SimpleName   :=  sKmkName;
					aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						aTaikeiList[1].MaxEnt   :=  '*';
					fnTaikeiMake(iKmkNCode,2);
				end;


				//<053>--start---
// <078> ↓↓↓
//				if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SonekiArrayL1[10].SumKbn)) then
				if (kaisyahou() = true) and (0 <> GetKmkInfo(TOUKIMISYO,1,SumKbn)) then
// <078> ↑↑↑
				begin
					//	当期未処分利益
					iKmkNCode := GetKmkInfo(TOUKIMISYO,1,SumKbn);
					if (iKmkNCode <> 0) then
					begin
						sKmkName := fnGetKmkSimpleName(iKmkNCode);
						aTaikeiList[1].KmkCode	  := gfnGetKmk_GCODE(iKmkNCode);
						aTaikeiList[1].SimpleName := sKmkName;
						aTaikeiList[1].AddKbn	  := '+'; 	//	加算
						aTaikeiList[1].SumKbn	  := SumKbn;
						if (iEndCode = iKmkNCode) then
							aTaikeiList[1].MaxEnt := '*';
						fnTaikeiMake(iKmkNCode,2);
					end;
					iEndCode := fnGetEndKmkInfo2();
					//	前期繰越利益
					iKmkNCode := GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn);
					if (iKmkNCode <> 0) then
					begin
						sKmkName := fnGetKmkSimpleName(iKmkNCode);
						aTaikeiList[2].KmkCode	  := gfnGetKmk_GCODE(iKmkNCode);
						aTaikeiList[2].SimpleName := sKmkName;
						aTaikeiList[2].AddKbn	  := '+'; 	//	加算
						aTaikeiList[2].SumKbn	  := SumKbn;
						if (iEndCode = iKmkNCode) then
							aTaikeiList[2].MaxEnt := '*';
						fnTaikeiMake(iKmkNCode,2);
					end;
					//	過年度税効果調整額
					iKmkNCode := GetKmkInfo(KANENDO,1,SumKbn);
					if (iKmkNCode <> 0) then
					begin
						sKmkName := fnGetKmkSimpleName(iKmkNCode);
						aTaikeiList[2].KmkCode	  := gfnGetKmk_GCODE(iKmkNCode);
						aTaikeiList[2].SimpleName := sKmkName;
						aTaikeiList[2].AddKbn	  := '+'; 	//	加算
						aTaikeiList[2].SumKbn	  := SumKbn;
						if (iEndCode = iKmkNCode) then
							aTaikeiList[2].MaxEnt := '*';
						fnTaikeiMake(iKmkNCode,2);
					end;
					//	目的積立金取崩
					iKmkNCode := GetKmkInfo(MOKUTEKI,1,SumKbn);
					if (iKmkNCode <> 0) then
					begin
						sKmkName := fnGetKmkSimpleName(iKmkNCode);
						aTaikeiList[2].KmkCode	  := gfnGetKmk_GCODE(iKmkNCode);
						aTaikeiList[2].SimpleName := sKmkName;
						aTaikeiList[2].AddKbn	  := '+'; 	//	加算
						aTaikeiList[2].SumKbn	  := SumKbn;
						if (iEndCode = iKmkNCode) then
							aTaikeiList[2].MaxEnt := '*';
						fnTaikeiMake(iKmkNCode,2);
					end;
					//	中間配当金
					iKmkNCode := GetKmkInfo(TYUKAN,1,SumKbn);
					if (iKmkNCode <> 0) then
					begin
						sKmkName := fnGetKmkSimpleName(iKmkNCode);
						aTaikeiList[2].KmkCode	  := gfnGetKmk_GCODE(iKmkNCode);
						aTaikeiList[2].SimpleName := sKmkName;
						aTaikeiList[2].AddKbn	  := '-'; 	//	減算
						aTaikeiList[2].SumKbn	  := SumKbn;
						if (iEndCode = iKmkNCode) then
							aTaikeiList[2].MaxEnt := '*';
						fnTaikeiMake(iKmkNCode,2);
					end;
					//	利益準備金
					iKmkNCode := GetKmkInfo(RIEKIZYUNBI,1,SumKbn);
					if (iKmkNCode <> 0) then
					begin
						sKmkName := fnGetKmkSimpleName(iKmkNCode);
						aTaikeiList[2].KmkCode	  := gfnGetKmk_GCODE(iKmkNCode);
						aTaikeiList[2].SimpleName := sKmkName;
						aTaikeiList[2].AddKbn	  := '-'; 	//	減算
						aTaikeiList[2].SumKbn	  := SumKbn;
						if (iEndCode = iKmkNCode) then
							aTaikeiList[2].MaxEnt := '*';
						fnTaikeiMake(iKmkNCode,2);
					end;
				end
				else
				begin
					//<053>---end----
					// 前期繰越利益
				    iKmkNCode   :=  GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn);

					if ( iKmkNCode <> 0 ) then
				    begin
					    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					    aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					    aTaikeiList[1].SimpleName   :=  sKmkName;
					    aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					    aTaikeiList[1].SumKbn	    :=  SumKbn;

					if ( iEndCode = iKmkNCode ) then
						    aTaikeiList[1].MaxEnt   :=  '*';
					    fnTaikeiMake(iKmkNCode,2);
				    end;

				    // 過年度税効果調整額
				    iKmkNCode   :=  GetKmkInfo(KANENDO,1,SumKbn);

				    if ( iKmkNCode <> 0 ) then
				    begin
					    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					    aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					    aTaikeiList[1].SimpleName   :=  sKmkName;
					    aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					    aTaikeiList[1].SumKbn	    :=  SumKbn;

					    if ( iEndCode = iKmkNCode ) then
						    aTaikeiList[1].MaxEnt   :=  '*';
					    fnTaikeiMake(iKmkNCode,2);
				    end;

				    // 目的積立金取崩
				    iKmkNCode   :=  GetKmkInfo(MOKUTEKI,1,SumKbn);

				    if ( iKmkNCode <> 0 ) then
				    begin
					    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					    aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					    aTaikeiList[1].SimpleName   :=  sKmkName;
					    aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
						aTaikeiList[1].SumKbn	    :=  SumKbn;

					    if ( iEndCode = iKmkNCode ) then
						    aTaikeiList[1].MaxEnt   :=  '*';
					    fnTaikeiMake(iKmkNCode,2);
				    end;

				    // 中間配当金
				    iKmkNCode   :=  GetKmkInfo(TYUKAN,1,SumKbn);

				    if ( iKmkNCode <> 0 ) then
				    begin
					    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					    aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					    aTaikeiList[1].SimpleName   :=  sKmkName;
					    aTaikeiList[1].AddKbn	    :=  '-'; 	//	減算
					    aTaikeiList[1].SumKbn	    :=  SumKbn;

					    if ( iEndCode = iKmkNCode ) then
						    aTaikeiList[1].MaxEnt   :=  '*';
					    fnTaikeiMake(iKmkNCode,2);
				    end;

				    // 利益準備金
				    iKmkNCode   :=  GetKmkInfo(RIEKIZYUNBI,1,SumKbn);

				    if ( iKmkNCode <> 0 ) then
				    begin
					    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					    aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					    aTaikeiList[1].SimpleName   :=  sKmkName;
					    aTaikeiList[1].AddKbn	    :=  '-'; 	//	減算
					    aTaikeiList[1].SumKbn	    :=  SumKbn;

					    if ( iEndCode = iKmkNCode ) then
						    aTaikeiList[1].MaxEnt   :=  '*';
					    fnTaikeiMake(iKmkNCode,2);
				    end;

				    //	当期未処分利益
				    iKmkNCode   :=  GetKmkInfo(TOUKIMISYO,1,SumKbn);

				    if ( iKmkNCode <> 0 ) then
				    begin
					    sKmkName    :=  fnGetKmkSimpleName(iKmkNCode);
					    aTaikeiList[1].KmkCode	    :=  gfnGetKmk_GCODE(iKmkNCode);
					    aTaikeiList[1].SimpleName   :=  sKmkName;
					    aTaikeiList[1].AddKbn	    :=  '+'; 	//	加算
					    aTaikeiList[1].SumKbn	    :=  SumKbn;

					    if ( iEndCode = iKmkNCode ) then
						    aTaikeiList[1].MaxEnt   :=  '*';
					    fnTaikeiMake(iKmkNCode,2);
				    end;

                end;    //<053>
                HagureMakePrint(SONEKI);

				// 子供が10以上いるときの表示処理
				for i := 0 to m_OverCodeList.Count-1 do
    			begin
					pOverRec    :=  m_OverCodeList.Items[i];
					aTaikeiList[0].KmkCode	    :=  pOverRec^.KmkCode;
					aTaikeiList[0].SimpleName   :=  fnGetKmkSimpleName(GetKmkNCode(pOverRec^.KmkCode));
					aTaikeiList[0].SumKbn	    :=  pOverRec^.SumKbn;

					// 10を超えている体系のｺｰﾄﾞを別ﾘｽﾄに退避
					New(pRec);
					pRec^.KmkCode               :=  pOverRec^.KmkCode;
					pRec^.SumKbn                :=  pOverRec^.SumKbn;
					m_OverCodeList2.Add(pRec);

					fnTaikeiMake(GetKmkNCode(pOverRec^.KmkCode),1);
				end;

				for i := 0 to m_OverCodeList.Count-1 do
    			begin
					pOverRec := m_OverCodeList.Items[i];
					Dispose(pOverRec);
				end;
				m_OverCodeList.Free;
            end;
		end;
	end;

	DDataSource.DataSet	:=	MemPrint_Taikei;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_Taikei.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// JitsuzaiKPrn()
//	< 実在印刷処理(簡略) >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.JitsuzaiKPrn(Select: TDlgRetID);
var
	DmqPrint	:	TMQuery;
	DmqFusen	:	TMQuery;
	iYouBunCode	:	Integer;
	sSousyoku	:	String;
	iKensu		:	Integer;		//	表示件数(Integer型)
	sKensu		:	String;			//	表示件数(String型)
	iLength		:	Integer;		//	文字の桁数
	sWork1		:	String;
	sWork2		:	String;
	sKisyuzan	:	String;
	bRensouOrderFlag	:	Boolean;		
begin

	//	初期処理
	iKensu	            :=	0;
	bRensouOrderFlag	:=	FALSE;

    // MQueryの構築
	DmqPrint := TMQuery.Create( Self );
	DmqFusen := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqFusen );
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqPrint );
    DDataSource.DataSet	:=	nil;
	MemPrint_JitsuKan.Open();

	with DmqPrint do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT                     '
            +   '    MA.NCode               '
            +   '   ,MA.GCode               '   // 外部ｺｰﾄﾞ
            +   '   ,MA.LongName            '   // 正式名称
            +   '   ,MA.SimpleName          '   // 簡略名称
            +   '   ,MA.Renso               '   // 連想ｼﾝﾎﾞﾙ
            +   '   ,MA.AnalyzeCode         '   // 分析ｺｰﾄﾞ
            +   '   ,MA.CharCode            '   // 性格ｺｰﾄﾞ
            +   '   ,MA.DCKbn               '   // 正残区分
            +   '   ,MA.BPKbn               '   // BS/PL区分
            +   '   ,MA.KisyuKbn            '   // 期首残区分
            +   '   ,MA.DebitCash           '   // 借方資金繰ｺｰﾄﾞ
            +   '   ,MA.CreditCash          '   // 貸方資金繰ｺｰﾄﾞ
            +   '   ,MB.DecoKbn             '   // 装飾区分
            +   'FROM   KmkMA MA,           '   // 勘定科目基本ﾏｽﾀ
            +   '       KmkMB MB            '   // 勘定科目詳細情報
            +   'WHERE  (MA.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
            +   '  AND  (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            +   '  AND  (MA.SumKbn    = 0)  '   // 実在/合計区分(0:実在)
            +   '  AND  (MA.CNCode    = 0)  '   // 細目ｺｰﾄﾞ
            +   '  AND  (MB.CNCode    = 0)  '); // 細目ｺｰﾄﾞ

        if ( uvHani.pvrRgType[0] = 0 ) then
        begin
            SQL.Add('  AND  (MA.NCode = MB.NCode)   ');
        end
        else
        begin
            if ( uvHani.pvrStCode[0] <> '' ) and
               ( uvHani.pvrEdCode[0] =  '' ) then
            begin
                SQL.Add('  AND  (MA.GCode >= :ExCode)   ');
			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
			    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
            end
            else if ( uvHani.pvrStCode[0] =  '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MA.GCode <= :ExCode)   ');
			    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
    			ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrEdCode[0],0);
            end
            else if ( uvHani.pvrStCode[0] <> '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MA.GCode >= :ExStCode)     ');
			    SQL.Add('  AND  (MA.GCode <= :ExEdCode)     ');
    			SQL.Add('  AND  (MA.NCode  = MB.NCode)      ');
    			ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
    			ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
            end;
        end;

        // 出力順序
        if ( uvHani.pvrOrder = CODEORDER ) then
            SQL.Add('ORDER BY MA.GCode  ')
        else
        begin
            SQL.Add('  AND  (MA.Renso <> '''')  ');
            SQL.Add('ORDER BY MA.Renso,MA.GCode ');
            bRensouOrderFlag    :=  TRUE;
        end;

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqPrint);
			DmqPrint.Close();
			DmqPrint.Free();
			DmqFusen.Close();
			DmqFusen.Free();
			Exit;
		end;

		while ( EOF <> TRUE ) do
		begin
			MemPrint_JitsuKan.Append();

            //	ﾌｧｲﾙ出力以外
			if ( Select <> PDLG_FILE ) then
			begin
                // 付箋
				DmqFusen.Close();
				DmqFusen.SQL.Clear();
				DmqFusen.SQL.Add('SELECT                        '
                            +    '   FusenKbn                   '   // 付箋区分
				            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
				            +    'WHERE (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
                            +    '  AND (NCode     = :ExNCode)  '	// 科目内部ｺｰﾄﾞ
                            +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

                DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

				// ｴﾗｰの判定
				if ( DmqFusen.Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqFusen);
					DmqFusen.Close();
					DmqFusen.Free();
					DmqPrint.Close();
					DmqPrint.Free();
					Exit;
				end;

				if ( DmqFusen.EOF <> TRUE ) then
				begin
                    //	付箋区分
					case DmqFusen.GetFLD('FusenKbn').AsInteger of
						0:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Clear;
{
						1:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FRE.Bitmap);
						2:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FGR.Bitmap);
						3:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FBU.Bitmap);
						4:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FOR.Bitmap);
}
                        1:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
                    	2:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
                    	3:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
                    	4:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
					end;
				end;
			end;

            // 外部ｺｰﾄﾞ
			MemPrint_JitsuKan.FieldByName('J_Code').AsInteger	        :=	GetFld('GCode').AsInteger;
            // 連想ｼﾝﾎﾞﾙ
			MemPrint_JitsuKan.FieldByName('J_Renso').AsString			:=	GetFld('Renso').AsString;
            // 正式名称
// <049>↓
//			MemPrint_JitsuKan.FieldByName('J_LongName').AsString		:=	GetFld('LongName').AsString;
			MemPrint_JitsuKan.FieldByName('J_LongName').AsString		:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
            // 簡略名称
			MemPrint_JitsuKan.FieldByName('J_SimpleName').AsString		:=	GetFld('SimpleName').AsString;
            // 分析ｺｰﾄﾞ
			MemPrint_JitsuKan.FieldByName('J_BunsekiCode').AsInteger	:=	GetFld('AnalyzeCode').AsInteger;
            // 分析内容
			MemPrint_JitsuKan.FieldByName('J_BunsekiName').AsString		:=	GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iYouBunCode);
            // 性格ｺｰﾄﾞ
			MemPrint_JitsuKan.FieldByName('J_SeikakuCode').AsInteger	:=	GetFld('CharCode').AsInteger;
            // 性格内容
			MemPrint_JitsuKan.FieldByName('J_SeikakuName').AsString		:=	aSeikaku[GetFLD('CharCode').AsInteger];

            // 正残内容
			case GetFLD('DCKbn').AsInteger of
				0:	MemPrint_JitsuKan.FieldByName('J_Seizan').AsString	:=	'借方';
				1:	MemPrint_JitsuKan.FieldByName('J_Seizan').AsString	:=	'貸方';
			end;
            // BS/PL内容
			case GetFLD('BPKbn').AsInteger of
				0:	MemPrint_JitsuKan.FieldByName('J_BPKbn').AsString	:=	'ＢＳ';
				1:	MemPrint_JitsuKan.FieldByName('J_BPKbn').AsString	:=	'ＰＬ';
			end;
			sKisyuzan	:=	GetAriNashi(GetFLD('KisyuKbn').AsInteger);
			if (sKisyuzan = 'なし') then
				sKisyuzan	:=	'';

            // 期首残内容
			MemPrint_JitsuKan.FieldByName('J_Kisyuzan').AsString		:=	sKisyuzan;
            // 借方資金繰ｺｰﾄﾞ
			if GetFLD('DebitCash').AsFloat = 0 then
				MemPrint_JitsuKan.FieldByName('J_KariKuriCode').Clear
			else
				MemPrint_JitsuKan.FieldByName('J_KariKuriCode').AsInteger		:=
                    gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>
            // 借方資金繰ｺｰﾄﾞ内容
			MemPrint_JitsuKan.FieldByName('J_KariKuriName').AsString	:=
            	    GetSKmkMA(SHIKINGURI, MemPrint_JitsuKan.FieldByName('J_KariKuriCode').AsInteger, iYouBunCode);
            // 貸方資金繰ｺｰﾄﾞ
			if GetFLD('CreditCash').AsFloat = 0 then
				MemPrint_JitsuKan.FieldByName('J_KashiKuriCode').Clear
			else
				MemPrint_JitsuKan.FieldByName('J_KashiKuriCode').AsInteger		:=
                    gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);   //  <055>
            // 貸方資金繰ｺｰﾄﾞ内容
			MemPrint_JitsuKan.FieldByName('J_KashiKuriName').AsString	:=
            	    GetSKmkMA(SHIKINGURI, MemPrint_JitsuKan.FieldByName('J_KashiKuriCode').AsInteger, iYouBunCode);
			sSousyoku	:=	' ';
            // 装飾区分内容
            sSousyoku	:=	GetSousyoku(sSousyoku,(GetFLD('DecoKbn').AsInteger));
			MemPrint_JitsuKan.FieldByName('J_Sousyoku').AsString	:=	sSousyoku;
			MemPrint_JitsuKan.Post;
			iKensu	:=	iKensu	+	1;
			NEXT;
		end;

        // 連想順の時空白を後に印刷する
		if ( bRensouOrderFlag = TRUE ) then
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT                     '
                +   '    MA.NCode               '
                +   '   ,MA.GCode               '   // 外部ｺｰﾄﾞ
                +   '   ,MA.LongName            '   // 正式名称
                +   '   ,MA.SimpleName          '   // 簡略名称
                +   '   ,MA.Renso               '   // 連想ｼﾝﾎﾞﾙ
                +   '   ,MA.AnalyzeCode         '   // 分析ｺｰﾄﾞ
                +   '   ,MA.CharCode            '   // 性格ｺｰﾄﾞ
                +   '   ,MA.DCKbn               '   // 正残区分
                +   '   ,MA.BPKbn               '   // BS/PL区分
                +   '   ,MA.KisyuKbn            '   // 期首残区分
                +   '   ,MA.DebitCash           '   // 借方資金繰ｺｰﾄﾞ
                +   '   ,MA.CreditCash          '   // 貸方資金繰ｺｰﾄﾞ
                +   '   ,MB.DecoKbn             '   // 装飾区分
                +   'FROM   KmkMA MA,           '   // 勘定科目基本ﾏｽﾀ
                +   '       KmkMB MB            '   // 勘定科目詳細情報
                +   'WHERE  (MA.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
// <041>↓
//                +   '       (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
//                +   '       (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
//                +   '       (MA.SumKbn    = 0)  '   // 実在/合計区分(0:実在)
                +   '  AND  (MB.MasterKbn = 1)  '   // ﾏｽﾀ区分(1:勘定科目)
                +   '  AND  (MA.RDelKbn   = 0)  '   // ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
                +   '  AND  (MA.SumKbn    = 0)  '   // 実在/合計区分(0:実在)
// <041>↑
                +   '  AND  (MA.CNCode    = 0)  '   // 細目ｺｰﾄﾞ
                +   '  AND  (MB.CNCode    = 0)  '); // 細目ｺｰﾄﾞ

            if ( uvHani.pvrRgType[0] = 0 ) then
            begin
                SQL.Add('  AND  (MA.NCode = MB.NCode)   ');
            end
            else
            begin
                if ( uvHani.pvrStCode[0] <> '' ) and
                   ( uvHani.pvrEdCode[0] =  '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode >= :ExCode)   ');
                    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
                    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] =  '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode <= :ExCode)   ');
                    SQL.Add('  AND  (MA.NCode  = MB.NCode)  ');
                    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] <> '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (MA.GCode >= :ExStCode)     ');
                    SQL.Add('  AND  (MA.GCode <= :ExEdCode)     ');
                    SQL.Add('  AND  (MA.NCode  = MB.NCode)      ');
                    ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
                    ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                end;
            end;

            // 出力順序
// <044>            SQL.Add('  AND  (MA.Renso <> '''')  ');
            SQL.Add('  AND  (MA.Renso = '''')  ');		// <044>
            SQL.Add('ORDER BY MA.Renso,MA.GCode ');

			//	ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqPrint);
				DmqPrint.Close();
				DmqPrint.Free();
				DmqFusen.Close();
				DmqFusen.Free();
				Exit;
			end;

			while ( EOF <> TRUE ) do
			begin
				MemPrint_JitsuKan.Append();

                //	ﾌｧｲﾙ出力以外
				if ( Select <> PDLG_FILE ) then
				begin
					DmqFusen.Close();
					DmqFusen.SQL.Clear();
					DmqFusen.SQL.Add('SELECT                        '
					            +    '   FusenKbn                   '   // 付箋区分
					            +    'FROM MFusenInfo               '	// ﾏｽﾀ付箋管理情報
					            +    'WHERE (MasterKbn = 1)         '   // ﾏｽﾀ区分(1:勘定科目)
                                +    '  AND (NCode     = :ExNCode)  '   // 科目内部ｺｰﾄﾞ
						        +    '  AND (SubNCode  = 0)         ');	// 細目内部ｺｰﾄﾞ

                    DmqFusen.ParamByName('ExNCode').AsFloat :=  GetFld('NCode').AsFloat;

					// ｴﾗｰの判定
					if ( DmqFusen.Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqFusen);
						DmqFusen.Close();
						DmqFusen.Free();
						DmqPrint.Close();
						DmqPrint.Free();
						Exit;
					end;

					if ( DmqFusen.EOF <> TRUE ) then
					begin
                        // 付箋区分
						case DmqFusen.GetFLD('FusenKbn').AsInteger of
							0:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Clear;
{
							1:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FRE.Bitmap);
							2:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FGR.Bitmap);
							3:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FBU.Bitmap);
							4:	TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(PM_FOR.Bitmap);
}
                            1:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Red   .Picture.Bitmap);
                        	2:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Green .Picture.Bitmap);
                        	3:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Blue  .Picture.Bitmap);
                        	4:  TGraphicField(MemPrint_JitsuKan.FieldByName('J_Fusen')).Assign(Image_Fusen_Orange.Picture.Bitmap);
						end;
					end;
				end;

                // 外部ｺｰﾄﾞ
				MemPrint_JitsuKan.FieldByName('J_Code').AsInteger			:=	GetFld('GCode').AsInteger;
                // 連想ｼﾝﾎﾞﾙ
				MemPrint_JitsuKan.FieldByName('J_Renso').AsString			:=	GetFld('Renso').AsString;
                // 正式名称
// <049>↓
//				MemPrint_JitsuKan.FieldByName('J_LongName').AsString		:=	GetFld('LongName').AsString;
				MemPrint_JitsuKan.FieldByName('J_LongName').AsString		:=	CutLeadByte(GetFld('LongName').AsString, DISP_LENGTH_LONG);
// <049>↑
                // 簡略名称
				MemPrint_JitsuKan.FieldByName('J_SimpleName').AsString		:=	GetFld('SimpleName').AsString;
                // 分析ｺｰﾄﾞ
				MemPrint_JitsuKan.FieldByName('J_BunsekiCode').AsInteger	:=	GetFld('AnalyzeCode').AsInteger;
                // 分析内容
				MemPrint_JitsuKan.FieldByName('J_BunsekiName').AsString		:=	GetSKmkMA(BUNSEKI,GetFld('AnalyzeCode').AsInteger,iYouBunCode);
                // 性格ｺｰﾄﾞ
				MemPrint_JitsuKan.FieldByName('J_SeikakuCode').AsInteger	:=	GetFld('CharCode').AsInteger;
                // 性格内容
				MemPrint_JitsuKan.FieldByName('J_SeikakuName').AsString		:=	aSeikaku[GetFLD('CharCode').AsInteger];
                // 正残内容
				case GetFLD('DCKbn').AsInteger of
					0:	MemPrint_JitsuKan.FieldByName('J_Seizan').AsString	:=	'借方';
					1:	MemPrint_JitsuKan.FieldByName('J_Seizan').AsString	:=	'貸方';
				end;
                // BS/PL内容
				case GetFLD('BPKbn').AsInteger of
					0:	MemPrint_JitsuKan.FieldByName('J_BPKbn').AsString	:=	'ＢＳ';
					1:	MemPrint_JitsuKan.FieldByName('J_BPKbn').AsString	:=	'ＰＬ';
				end;
                // 期首残内容
				sKisyuzan	:=	GetAriNashi(GetFLD('KisyuKbn').AsInteger);
				if (sKisyuzan = 'なし') then
					sKisyuzan	:=	'';
				MemPrint_JitsuKan.FieldByName('J_Kisyuzan').AsString		:=	sKisyuzan;
                // 借方資金繰ｺｰﾄﾞ
				if GetFLD('DebitCash').AsFloat = 0 then
					MemPrint_JitsuKan.FieldByName('J_KariKuriCode').Clear
				else
					MemPrint_JitsuKan.FieldByName('J_KariKuriCode').AsInteger		:=
                        gfnGetSKmkMA_GCODE(GetFLD('DebitCash').AsFloat, SHIKINGURI);    //  <055>
                // 借方資金繰ｺｰﾄﾞ内容
				MemPrint_JitsuKan.FieldByName('J_KariKuriName').AsString	:=
                    GetSKmkMA(SHIKINGURI, MemPrint_JitsuKan.FieldByName('J_KariKuriCode').AsInteger, iYouBunCode);
                // 貸方資金繰ｺｰﾄﾞ
				if GetFLD('CreditCash').AsFloat = 0 then
					MemPrint_JitsuKan.FieldByName('J_KashiKuriCode').Clear
				else
					MemPrint_JitsuKan.FieldByName('J_KashiKuriCode').AsInteger		:=
                        gfnGetSKmkMA_GCODE(GetFLD('CreditCash').AsFloat, SHIKINGURI);   //  <055>
                // 貸方資金繰ｺｰﾄﾞ内容
				MemPrint_JitsuKan.FieldByName('J_KashiKuriName').AsString	:=
                    GetSKmkMA(SHIKINGURI, MemPrint_JitsuKan.FieldByName('J_KashiKuriCode').AsInteger, iYouBunCode);
                // 装飾区分内容
				sSousyoku	:=	' ';
				sSousyoku	:=	GetSousyoku(sSousyoku,(GetFLD('DecoKbn').AsInteger));
				MemPrint_JitsuKan.FieldByName('J_Sousyoku').AsString	:=	sSousyoku;
				MemPrint_JitsuKan.Post;
				iKensu	:=	iKensu	+	1;
				NEXT;
			end;
		end;
	end;

	DmqFusen.Close();
	DmqFusen.Free();
	DmqPrint.Close();
	DmqPrint.Free();

	// 件数表示処理
	sKensu	:=	IntToStr(iKensu);	//	数値型を文字型に
	iLength	:=	Length(sKensu);
	if ( iLength = 4 ) then
	begin
		sWork1	:=	COPY(sKensu,2,3);
		sWork2	:=	COPY(sKensu,1,1);
		sKensu	:=	sWork2 + ',' + sWork1;
	end;
    LJitsu_Kensu.Caption	:=	sKensu + ' 件';

    DDataSource.DataSet	:=	MemPrint_JitsuKan;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_JitsuKan.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// TaikeiPrnList()
//	< 体系印刷処理 >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//                Choice    :   実在(TAIKEILIST)/合計(TAIKEILIAST_G)
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.TaikeiPrnList(Select: TDlgRetID; Choice: Integer);
var
	DmqData :	TMQuery;
	DmqTree	:	TMQuery;
begin

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    DmqTree := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );

	DDataSource.DataSet	:=	nil;

	fnKoteiTaiKeiMake();

	if ( Choice = TAIKEILIST ) then
	begin
        // -------------------
		//      実在科目
        // -------------------
		if ( fnTaiKeiPrintSet(0,DmqData,DmqTree) = FALSE ) then
		begin
			DmqTree.Close();
            DmqData.Close();
			DmqTree.Free();
			DmqData.Free();
			Exit;
		end;
	end
	else
	begin
        // -------------------
		//	    合計科目
        // -------------------
		if ( fnTaiKeiPrintSet(1,DmqData,DmqTree) = FALSE ) then
		begin
			DmqTree.Close();
            DmqData.Close();
			DmqTree.Free();
			DmqData.Free();
			Exit;
		end;
	end;

	DmqTree.Close();
	DmqData.Close();
	DmqTree.Free();
	DmqData.Free();

	DDataSource.DataSet	:=	MemPrint_TaikeiList;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_TaikeiList.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// fnTaikeiMake()
//	< 体系印刷処理 >
//      PARAM   : NCode     :   科目内部ｺｰﾄﾞ
//      VAR     :
//      RETURN  : Count     :   下位のCount
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnTaikeiMake(NCode: Extended; Count: Integer): Integer;
var
	DmqData	:	TMQuery;
	iLoop	:	Integer;
	iWork	:	Integer;
//<053>
	SumKbn	:	Byte;

begin

	// 加算元内部ｺｰﾄﾞを保存
	aMaxEntNo[Count] := GetMaxEntKmkCode(NCode);

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続

	with DmqData do
	begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT                                 '
            +   '    TA.BasedNCode  TBasedCode          '
            +   '   ,TA.AddKbn      TAddKbn             '
			+   '   ,MA.SumKbn      MSumKbn             '
            +   '   ,MA.GCode       MGCode              '
            +   '   ,MA.SimpleName  MSimpleName         '
            +   'FROM KmkTree TA                        '
            +   'LEFT OUTER JOIN KmKMA MA ON            '
            +   '       (TA.BasedNCode = MA.NCode)      '
            +   '  AND  (MA.MasterKbn  = 1)             '
            +   '  AND  (MA.RDelKbn    = 0)             '
            +   'WHERE  (TA.MasterKbn = 1)              '
            +   '  AND  (TA.SumNCode  = :KmkNCode)      '
            +   'ORDER BY EntNo                         ');

		ParamByName('KmkNCode').AsFloat :=  NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
            Result := 0;
			Exit;
		end;
//<053>-- start ---
		if	((NCode = (GetKmkInfo(TOUKIMISYO,1,SumKbn)))	or	(NCode = (GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn)))	or
			(NCode = (GetKmkInfo(KANENDO,1,SumKbn)))		or	(NCode = (GetKmkInfo(MOKUTEKI,1,SumKbn)))		or
			(NCode = (GetKmkInfo(TYUKAN,1,SumKbn)))		or	(NCode = (GetKmkInfo(RIEKIZYUNBI,1,SumKbn))))	and
			(kaisyahou() = true) and (0<>(GetKmkInfo(TOUKIMISYO,1,SumKbn))) then
		begin
			//	子供がいなかった時
			if (EOF = True)  then
			begin
				MemPrint_Taikei.Append();
				MemPrint_Taikei.FieldByName('Code'		).AsInteger := aTaikeiList[0].KmkCode;
				MemPrint_Taikei.FieldByName('SimpleName').AsString  := aTaikeiList[0].SimpleName;
				//	合計の時
				if (aTaikeiList[0].SumKbn = 1) then
					TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Book.Picture.Bitmap)
				//	実在の時
				else if (aTaikeiList[0].SumKbn = 0) then
					TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Paper.Picture.Bitmap);

				for iLoop := 1 to 9 do
				begin
					if (aTaikeiList[iLoop].KmkCode <> -1) then
					begin
//						MemPrint_Taikei.FieldByName('AddKbn0'+IntToStr(iLoop)).AsString	 := aTaikeiList[iLoop].AddKbn;
						//	加算の時でかつ合計の時
						if (aTaikeiList[iLoop].AddKbn = '+') and (aTaikeiList[iLoop].SumKbn = 1) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Book.Picture.Bitmap)
						//	減算の時でかつ合計の時
						else if (aTaikeiList[iLoop].AddKbn = '-') and (aTaikeiList[iLoop].SumKbn = 1) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Book.Picture.Bitmap)
						//	加算の時でかつ実在の時
						else if (aTaikeiList[iLoop].AddKbn = '+') and (aTaikeiList[iLoop].SumKbn = 0) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Paper.Picture.Bitmap)
						//	減算の時でかつ実在の時
						else if (aTaikeiList[iLoop].AddKbn = '-') and (aTaikeiList[iLoop].SumKbn = 0) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Paper.Picture.Bitmap);

						MemPrint_Taikei.FieldByName('Code0'+IntToStr(iLoop)	 ).AsInteger := aTaikeiList[iLoop].KmkCode;
						MemPrint_Taikei.FieldByName('Name0'+IntToStr(iLoop)	 ).AsString  := aTaikeiList[iLoop].SimpleName;
						MemPrint_Taikei.FieldByName('MaxEnt0'+IntToStr(iLoop)).AsString  := aTaikeiList[iLoop].MaxEnt;

						//	行の最大の時のｺｰﾄﾞが実在か合計かを取得
						if (iLoop = 9) then
							MemPrint_Taikei.FieldByName('SumKbn09').AsInteger := aTaikeiList[9].SumKbn;
					end;
				end;
				MemPrint_Taikei.Post;
			end;
			
			while Eof <> True do
			begin
// <128> ST
				aTaikeiList[Count].KmkCode	  := gfnGetKmk_GCODE(GetFld('TBasedCode' ).AsInteger);
//				aTaikeiList[Count].KmkCode	  := GetFld('TBasedCode' ).AsInteger;
// <128> ED
				aTaikeiList[Count].SimpleName := GetFld('MSimpleName').AsString;
				//	加算元加算区分
				if GetFld('TAddKbn').AsInteger = 0 then
					aTaikeiList[Count].AddKbn := '+' 	//	加算
				else
					aTaikeiList[Count].AddKbn := '-';	//	減算
				//	最大登録Noの科目ｺｰﾄﾞと一致した時
				if	(aMaxEntNo[Count] = GetFld('TBasedCode').AsInteger) and ((NCode <> (GetKmkInfo(TOUKIMISYO,1,SumKbn)))	or
					(0 = fnGetEndKmkInfo2()))	then
					aTaikeiList[Count].MaxEnt := '*'
				else
					aTaikeiList[Count].MaxEnt := '';
				aTaikeiList[Count].SumKbn	  := GetFld('MSumKbn').AsInteger;

				if (GetFld('MSumKbn').AsInteger = 0) then	//	実在の時
				begin
					MemPrint_Taikei.Append();
					MemPrint_Taikei.FieldByName('Code'		).AsInteger := aTaikeiList[0].KmkCode;
					MemPrint_Taikei.FieldByName('SimpleName').AsString  := aTaikeiList[0].SimpleName;
					//	合計の時
					if (aTaikeiList[0].SumKbn = 1) then
						TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Book.Picture.Bitmap)
					//	実在の時
					else if (aTaikeiList[0].SumKbn = 0) then
						TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Paper.Picture.Bitmap);

					for iLoop := 1 to 9 do
					begin
						if (aTaikeiList[iLoop].KmkCode <> -1) then
						begin
//							MemPrint_Taikei.FieldByName('AddKbn0'+IntToStr(iLoop)).AsString	 := aTaikeiList[iLoop].AddKbn;
							//	加算の時でかつ合計の時
							if (aTaikeiList[iLoop].AddKbn = '+') and (aTaikeiList[iLoop].SumKbn = 1) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Book.Picture.Bitmap)
							//	減算の時でかつ合計の時
							else if (aTaikeiList[iLoop].AddKbn = '-') and (aTaikeiList[iLoop].SumKbn = 1) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Book.Picture.Bitmap)
							//	加算の時でかつ実在の時
							else if (aTaikeiList[iLoop].AddKbn = '+') and (aTaikeiList[iLoop].SumKbn = 0) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Paper.Picture.Bitmap)
							//	減算の時でかつ実在の時
							else if (aTaikeiList[iLoop].AddKbn = '-') and (aTaikeiList[iLoop].SumKbn = 0) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Paper.Picture.Bitmap);

							MemPrint_Taikei.FieldByName('Code0'+IntToStr(iLoop)	 ).AsInteger := aTaikeiList[iLoop].KmkCode;
							MemPrint_Taikei.FieldByName('Name0'+IntToStr(iLoop)	 ).AsString  := aTaikeiList[iLoop].SimpleName;
							MemPrint_Taikei.FieldByName('MaxEnt0'+IntToStr(iLoop)).AsString  := aTaikeiList[iLoop].MaxEnt;

							//	行の最大の時のｺｰﾄﾞが実在か合計かを取得
							if (iLoop = 9) then
								MemPrint_Taikei.FieldByName('SumKbn09').AsInteger := aTaikeiList[9].SumKbn;
						end;
					end;
					MemPrint_Taikei.Post;
				end
				else	//	合計の時
				begin
					iWork := Count + 1;
					//	表示できる最大件数が10なのでそれ以上は表示することはできない(0始まりなので9まで)
					if (iWork < 10) then
					begin
						fnArrayClear(iWork,True);
						fnTaikeiMake(GetFld('TBasedCode').AsInteger,iWork);
					end
					//	10を超えた場合はそれまでの体系を表示
					else
					begin
						MemPrint_Taikei.Append();
						MemPrint_Taikei.FieldByName('Code'		).AsInteger := aTaikeiList[0].KmkCode;
						MemPrint_Taikei.FieldByName('SimpleName').AsString  := aTaikeiList[0].SimpleName;
						//	合計の時
						if (aTaikeiList[0].SumKbn = 1) then
							TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Book.Picture.Bitmap)
						//	実在の時
						else if (aTaikeiList[0].SumKbn = 0) then
							TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Paper.Picture.Bitmap);

						for iLoop := 1 to 9 do
						begin
							if (aTaikeiList[iLoop].KmkCode <> -1) then
							begin
//								MemPrint_Taikei.FieldByName('AddKbn0'+IntToStr(iLoop)).AsString	 := aTaikeiList[iLoop].AddKbn;
								//	加算の時でかつ合計の時
								if (aTaikeiList[iLoop].AddKbn = '+') and (aTaikeiList[iLoop].SumKbn = 1) then
									TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Book.Picture.Bitmap)
								//	減算の時でかつ合計の時
								else if (aTaikeiList[iLoop].AddKbn = '-') and (aTaikeiList[iLoop].SumKbn = 1) then
									TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Book.Picture.Bitmap)
								//	加算の時でかつ実在の時
								else if (aTaikeiList[iLoop].AddKbn = '+') and (aTaikeiList[iLoop].SumKbn = 0) then
									TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Paper.Picture.Bitmap)
								//	減算の時でかつ実在の時
								else if (aTaikeiList[iLoop].AddKbn = '-') and (aTaikeiList[iLoop].SumKbn = 0) then
									TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Paper.Picture.Bitmap);

								MemPrint_Taikei.FieldByName('Code0'+IntToStr(iLoop)	 ).AsInteger := aTaikeiList[iLoop].KmkCode;
								MemPrint_Taikei.FieldByName('Name0'+IntToStr(iLoop)	 ).AsString  := aTaikeiList[iLoop].SimpleName;
								MemPrint_Taikei.FieldByName('MaxEnt0'+IntToStr(iLoop)).AsString  := aTaikeiList[iLoop].MaxEnt;

								//	行の最大の時のｺｰﾄﾞが実在か合計かを取得
								if (iLoop = 9) then
									MemPrint_Taikei.FieldByName('SumKbn09').AsInteger := aTaikeiList[9].SumKbn;
							end;
						end;
						MemPrint_Taikei.Post;
						m_Count	:= 9;
						fnOverCodeCheck(GetFld('TBasedCode').AsInteger,iWork,GetFld('MSumKbn').AsInteger);
					end;
				end;
				Next;
			end;
		end
		else
		begin
//<053>--- end ----

		// 子供がいなかった時
		if ( EOF = TRUE ) then
		begin
			MemPrint_Taikei.Append();
			MemPrint_Taikei.FieldByName('Code')         .AsInteger  :=  aTaikeiList[0].KmkCode;
			MemPrint_Taikei.FieldByName('SimpleName')   .AsString   :=  aTaikeiList[0].SimpleName;

			// 合計の時
			if ( aTaikeiList[0].SumKbn = 1 ) then
				TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Book.Picture.Bitmap)
			//	実在の時
			else if (aTaikeiList[0].SumKbn = 0) then
				TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Paper.Picture.Bitmap);

			for iLoop := 1 to 9 do
			begin
				if ( aTaikeiList[iLoop].KmkCode <> -1 ) then
				begin
					// 加算の時でかつ合計の時
					if ( aTaikeiList[iLoop].AddKbn = '+' ) and ( aTaikeiList[iLoop].SumKbn = 1 ) then
						TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Book.Picture.Bitmap)
					// 減算の時でかつ合計の時
					else if ( aTaikeiList[iLoop].AddKbn = '-' ) and ( aTaikeiList[iLoop].SumKbn = 1 ) then
						TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Book.Picture.Bitmap)
					// 加算の時でかつ実在の時
					else if ( aTaikeiList[iLoop].AddKbn = '+' ) and ( aTaikeiList[iLoop].SumKbn = 0 ) then
						TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Paper.Picture.Bitmap)
					// 減算の時でかつ実在の時
					else if ( aTaikeiList[iLoop].AddKbn = '-' ) and ( aTaikeiList[iLoop].SumKbn = 0 ) then
						TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Paper.Picture.Bitmap);

					MemPrint_Taikei.FieldByName('Code0'+IntToStr(iLoop)	 ).AsInteger    :=  aTaikeiList[iLoop].KmkCode;
					MemPrint_Taikei.FieldByName('Name0'+IntToStr(iLoop)	 ).AsString     :=  aTaikeiList[iLoop].SimpleName;
					MemPrint_Taikei.FieldByName('MaxEnt0'+IntToStr(iLoop)).AsString     :=  aTaikeiList[iLoop].MaxEnt;

					// 行の最大の時のｺｰﾄﾞが実在か合計かを取得
					if ( iLoop = 9 ) then
						MemPrint_Taikei.FieldByName('SumKbn09').AsInteger   :=  aTaikeiList[9].SumKbn;
				end;
			end;
			MemPrint_Taikei.Post;
		end;

		while ( Eof <> TRUE ) do
		begin
			aTaikeiList[Count].KmkCode	    :=  gfnGetKmk_GCODE(GetFld('TBasedCode' ).AsFloat);
			aTaikeiList[Count].SimpleName   :=  GetFld('MSimpleName').AsString;

			// 加算元加算区分
			if ( GetFld('TAddKbn').AsInteger = 0 ) then
				aTaikeiList[Count].AddKbn   :=  '+'     // 加算
			else
				aTaikeiList[Count].AddKbn   :=  '-';	// 減算

			// 最大登録Noの科目ｺｰﾄﾞと一致した時
			if ( aMaxEntNo[Count] = GetFld('TBasedCode').AsFloat ) then
				aTaikeiList[Count].MaxEnt   :=  '*'
			else
				aTaikeiList[Count].MaxEnt   :=  '';

			aTaikeiList[Count].SumKbn	    :=  GetFld('MSumKbn').AsInteger;

            // 実在の時
			if ( GetFld('MSumKbn').AsInteger = 0 ) then
			begin
				MemPrint_Taikei.Append();
				MemPrint_Taikei.FieldByName('Code')         .AsInteger  :=  aTaikeiList[0].KmkCode;
				MemPrint_Taikei.FieldByName('SimpleName')   .AsString   :=  aTaikeiList[0].SimpleName;

				// 合計の時
				if ( aTaikeiList[0].SumKbn = 1 ) then
					TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Book.Picture.Bitmap)
				// 実在の時
				else if ( aTaikeiList[0].SumKbn = 0 ) then
					TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Paper.Picture.Bitmap);

				for iLoop := 1 to 9 do
				begin
					if ( aTaikeiList[iLoop].KmkCode <> -1 ) then
					begin
						// 加算の時でかつ合計の時
						if ( aTaikeiList[iLoop].AddKbn = '+' ) and ( aTaikeiList[iLoop].SumKbn = 1 ) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Book.Picture.Bitmap)
						// 減算の時でかつ合計の時
						else if ( aTaikeiList[iLoop].AddKbn = '-' ) and ( aTaikeiList[iLoop].SumKbn = 1 ) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Book.Picture.Bitmap)
						// 加算の時でかつ実在の時
						else if ( aTaikeiList[iLoop].AddKbn = '+' ) and ( aTaikeiList[iLoop].SumKbn = 0 ) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Paper.Picture.Bitmap)
						// 減算の時でかつ実在の時
						else if ( aTaikeiList[iLoop].AddKbn = '-' ) and ( aTaikeiList[iLoop].SumKbn = 0 ) then
							TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Paper.Picture.Bitmap);

						MemPrint_Taikei.FieldByName('Code0'+IntToStr(iLoop)	 ).AsInteger := aTaikeiList[iLoop].KmkCode;
						MemPrint_Taikei.FieldByName('Name0'+IntToStr(iLoop)	 ).AsString  := aTaikeiList[iLoop].SimpleName;
						MemPrint_Taikei.FieldByName('MaxEnt0'+IntToStr(iLoop)).AsString  := aTaikeiList[iLoop].MaxEnt;

						// 行の最大の時のｺｰﾄﾞが実在か合計かを取得
						if ( iLoop = 9 ) then
							MemPrint_Taikei.FieldByName('SumKbn09').AsInteger   :=  aTaikeiList[9].SumKbn;
					end;
				end;
				MemPrint_Taikei.Post;
			end
            // 合計の時
			else
			begin
				iWork := Count + 1;

				// 表示できる最大件数が10なのでそれ以上は表示することはできない(0始まりなので9まで)
				if ( iWork < 10 ) then
                begin
					fnArrayClear(iWork,TRUE);
					fnTaikeiMake(GetFld('TBasedCode').AsFloat,iWork);
				end
				// 10を超えた場合はそれまでの体系を表示
				else
				begin
					MemPrint_Taikei.Append();
					MemPrint_Taikei.FieldByName('Code')         .AsInteger  :=  aTaikeiList[0].KmkCode;
					MemPrint_Taikei.FieldByName('SimpleName')   .AsString   :=  aTaikeiList[0].SimpleName;

					// 合計の時
					if ( aTaikeiList[0].SumKbn = 1 ) then
						TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Book.Picture.Bitmap)
					// 実在の時
					else if ( aTaikeiList[0].SumKbn = 0 ) then
						TGraphicField(MemPrint_Taikei.FieldByName('BitmapTop')).Assign(Image_Paper.Picture.Bitmap);

					for iLoop := 1 to 9 do
					begin
						if ( aTaikeiList[iLoop].KmkCode <> -1 ) then
						begin
							// 加算の時でかつ合計の時
							if ( aTaikeiList[iLoop].AddKbn = '+' ) and ( aTaikeiList[iLoop].SumKbn = 1 ) then
                            	TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Book.Picture.Bitmap)
							// 減算の時でかつ合計の時
							else if ( aTaikeiList[iLoop].AddKbn = '-' ) and ( aTaikeiList[iLoop].SumKbn = 1 ) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Book.Picture.Bitmap)
							// 加算の時でかつ実在の時
                            else if ( aTaikeiList[iLoop].AddKbn = '+' ) and ( aTaikeiList[iLoop].SumKbn = 0 ) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_P_Paper.Picture.Bitmap)
							// 減算の時でかつ実在の時
							else if ( aTaikeiList[iLoop].AddKbn = '-' ) and ( aTaikeiList[iLoop].SumKbn = 0 ) then
								TGraphicField(MemPrint_Taikei.FieldByName('Bitmap0'+IntToStr(iLoop))).Assign(Image_M_Paper.Picture.Bitmap);

							MemPrint_Taikei.FieldByName('Code0'+IntToStr(iLoop)	 ).AsInteger := aTaikeiList[iLoop].KmkCode;
							MemPrint_Taikei.FieldByName('Name0'+IntToStr(iLoop)	 ).AsString  := aTaikeiList[iLoop].SimpleName;
							MemPrint_Taikei.FieldByName('MaxEnt0'+IntToStr(iLoop)).AsString  := aTaikeiList[iLoop].MaxEnt;

							// 行の最大の時のｺｰﾄﾞが実在か合計かを取得
							if ( iLoop = 9 ) then
								MemPrint_Taikei.FieldByName('SumKbn09').AsInteger := aTaikeiList[9].SumKbn;
						end;
					end;
					MemPrint_Taikei.Post;
					m_Count	:= 9;
					fnOverCodeCheck(GetFld('TBasedCode').AsFloat,iWork,GetFld('MSumKbn').AsInteger);
				end;
			end;
			Next;
		end;
//<053>
		end;


		fnArrayClear(Count,TRUE);
	end;

	DmqData.Close();
	DmqData.Free();

    Result := 0;
end;

//-----------------------------------------------------------------------------
// fnKoteiTaiKeiMake()
//	< 固定体系作成処理 >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnKoteiTaiKeiMake();
var
	SumKbn : Byte;
begin

	//	売上高/売上総利益
	aPrintK_Taikei[1].NCode		   := GetKmkInfo(URIAGE,1,SumKbn);					    // 売上高の科目内部ｺｰﾄﾞ取得
	aPrintK_Taikei[1].Sumkbn	   := SumKbn;										    // 売上高の実在合計区分
	aPrintK_Taikei[1].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[1].NCode);	    // 売上高の科目簡略名称取得
	aPrintK_Taikei[1].S_NCode	   := GetKmkInfo(URIAGESOURI,1,SumKbn);				    // 売上総利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[1].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[1].S_NCode);	// 売上総利益の科目簡略名称取得
	aPrintK_Taikei[1].AddKbn	   := '+';											    // 加算(+)
	//	売上原価/売上総利益
	aPrintK_Taikei[2].NCode 	   := GetKmkInfo(URIAGEGENKA,1,SumKbn);				    // 売上原価の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[2].Sumkbn	   := SumKbn;										    // 売上原価の実在合計区分
	aPrintK_Taikei[2].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[2].NCode);	    // 売上原価の科目簡略名称取得
	aPrintK_Taikei[2].S_NCode	   := GetKmkInfo(URIAGESOURI,1,SumKbn);				    // 売上総利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[2].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[2].S_NCode);    // 売上総利益の科目簡略名称取得
	aPrintK_Taikei[2].AddKbn	   := '-';											    // 減算(-)
	//	売上総利益/営業利益
	aPrintK_Taikei[3].NCode		   := GetKmkInfo(URIAGESOURI,1,SumKbn);				    // 売上総利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[3].Sumkbn	   := SumKbn;										    // 売上総利益の実在合計区分
	aPrintK_Taikei[3].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[3].NCode);	    // 売上総利益の科目簡略名称取得
	aPrintK_Taikei[3].S_NCode	   := GetKmkInfo(EIGYOU_RI,1,SumKbn);				    // 営業利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[3].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[3].S_NCode);    // 営業利益の科目簡略名称取得
	aPrintK_Taikei[3].AddKbn	   := '+';											    // 加算(+)
	//	販売費及び一般管理費/営業利益
	aPrintK_Taikei[4].NCode		   := GetKmkInfo(HANBAI_IPAN,1,SumKbn);				    // 販売費及び一般管理費の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[4].Sumkbn	   := SumKbn;										    // 販売費及び一般管理費の実在合計区分
	aPrintK_Taikei[4].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[4].NCode);	    // 販売費及び一般管理費の科目簡略名称取得
	aPrintK_Taikei[4].S_NCode	   := GetKmkInfo(EIGYOU_RI,1,SumKbn);				    // 営業利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[4].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[4].S_NCode);    // 営業利益の科目簡略名称取得
	aPrintK_Taikei[4].AddKbn	   := '-';											    // 減算(-)
	//	営業利益/経常利益
	aPrintK_Taikei[5].NCode		   := GetKmkInfo(EIGYOU_RI,1,SumKbn);				    // 営業利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[5].Sumkbn	   := SumKbn;										    // 営業利益の実在合計区分
	aPrintK_Taikei[5].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[5].NCode);	    // 営業利益の科目簡略名称取得
	aPrintK_Taikei[5].S_NCode	   := GetKmkInfo(KEIZYOU_RI,1,SumKbn);				    // 経常利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[5].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[5].S_NCode);    // 経常利益の科目簡略名称取得
	aPrintK_Taikei[5].AddKbn	   := '+';											    // 加算(+)
	//	経常利益/税引前利益
	aPrintK_Taikei[6].NCode		   := GetKmkInfo(KEIZYOU_RI,1,SumKbn);				    // 経常利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[6].Sumkbn	   := SumKbn;										    // 経常利益の実在合計区分
	aPrintK_Taikei[6].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[6].NCode);	    // 経常利益の科目簡略名称取得
	aPrintK_Taikei[6].S_NCode	   := GetKmkInfo(ZEIHIKIMAE,1,SumKbn);				    // 税引前利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[6].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[6].S_NCode);    // 税引前利益の科目簡略名称取得
	aPrintK_Taikei[6].AddKbn	   := '+';											    // 加算(+)
	//	税引前利益/当期利益
	aPrintK_Taikei[7].NCode		   := GetKmkInfo(ZEIHIKIMAE,1,SumKbn);				    // 税引前利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[7].Sumkbn	   := SumKbn;										    // 税引前利益の実在合計区分
	aPrintK_Taikei[7].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[7].NCode);	    // 税引前利益の科目簡略名称取得
	aPrintK_Taikei[7].S_NCode	   := GetKmkInfo(TOUKIRIEKI_SO,1,SumKbn);			    // 当期利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[7].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[7].S_NCode);    // 当期利益の科目簡略名称取得
	aPrintK_Taikei[7].AddKbn	   := '+';											    // 加算(+)
	//	法人税等/当期利益
	aPrintK_Taikei[8].NCode		   := GetKmkInfo(HOUZIN,1,SumKbn);					    // 法人税等の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[8].Sumkbn	   := SumKbn;										    // 法人税等の実在合計区分
	aPrintK_Taikei[8].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[8].NCode);	    // 法人税等の科目簡略名称取得
	aPrintK_Taikei[8].S_NCode	   := GetKmkInfo(TOUKIRIEKI_SO,1,SumKbn);			    // 当期利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[8].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[8].S_NCode);    // 当期利益の科目簡略名称取得
	aPrintK_Taikei[8].AddKbn	   := '-';											    // 減算(-)
	//	法人税調整額/当期利益
	aPrintK_Taikei[9].NCode		    := GetKmkInfo(HOUZINTYOUSEI,1,SumKbn);			    // 法人税調整額の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[9].Sumkbn	    := SumKbn;										    // 法人税調整額の実在合計区分
	aPrintK_Taikei[9].SimpleName    := fnGetKmkSimpleName(aPrintK_Taikei[9].NCode);	    // 法人税調整額の科目簡略名称取得
	aPrintK_Taikei[9].S_NCode	    := GetKmkInfo(TOUKIRIEKI_SO,1,SumKbn);			    // 当期利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[9].S_SimpleName  := fnGetKmkSimpleName(aPrintK_Taikei[9].S_NCode);   // 当期利益の科目簡略名称取得
	aPrintK_Taikei[9].AddKbn	    := '-';											    // 減算(-)
	//	当期利益/当期未処分利益
	aPrintK_Taikei[10].NCode	    := GetKmkInfo(TOUKIRIEKI_SO,1,SumKbn);			    // 当期利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[10].Sumkbn	    := SumKbn;										    // 当期利益の実在合計区分
	aPrintK_Taikei[10].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[10].NCode);    // 当期利益の科目簡略名称取得
	aPrintK_Taikei[10].S_NCode 	    := GetKmkInfo(TOUKIMISYO,1,SumKbn);				    // 当期未処分利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[10].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[10].S_NCode);  // 当期未処分利益の科目簡略名称取得
	aPrintK_Taikei[10].AddKbn	    := '+';											    // 加算(+)
	//	前期繰越利益/当期未処分利益
	aPrintK_Taikei[11].NCode		:= GetKmkInfo(ZENKIKURIKOSHI,1,SumKbn);			    // 前期繰越利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[11].Sumkbn	    := SumKbn;										    // 前期繰越利益の実在合計区分
	aPrintK_Taikei[11].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[11].NCode);	// 前期繰越利益の科目簡略名称取得
	aPrintK_Taikei[11].S_NCode	    := GetKmkInfo(TOUKIMISYO,1,SumKbn);				    // 当期未処分利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[11].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[11].S_NCode);  // 当期未処分利益の科目簡略名称取得
	aPrintK_Taikei[11].AddKbn	    := '+';											    // 加算(+)
	//	過年度税効果調整額/当期未処分利益
	aPrintK_Taikei[12].NCode	    := GetKmkInfo(KANENDO,1,SumKbn);					// 過年度税効果調整額の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[12].Sumkbn	    := SumKbn;										    // 過年度税効果調整額の実在合計区分
	aPrintK_Taikei[12].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[12].NCode);	// 過年度税効果調整額の科目簡略名称取得
	aPrintK_Taikei[12].S_NCode	    := GetKmkInfo(TOUKIMISYO,1,SumKbn);				    // 当期未処分利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[12].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[12].S_NCode);  // 当期未処分利益の科目簡略名称取得
	aPrintK_Taikei[12].AddKbn	    := '+';											    // 加算(+)
	//	目的積立金取崩/当期未処分利益
	aPrintK_Taikei[13].NCode		:= GetKmkInfo(MOKUTEKI,1,SumKbn);				    // 目的積立金取崩の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[13].Sumkbn	    := SumKbn;										    // 目的積立金取崩の実在合計区分
	aPrintK_Taikei[13].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[13].NCode);	// 目的積立金取崩の科目簡略名称取得
	aPrintK_Taikei[13].S_NCode	    := GetKmkInfo(TOUKIMISYO,1,SumKbn);			    	// 当期未処分利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[13].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[13].S_NCode);  // 当期未処分利益の科目簡略名称取得
	aPrintK_Taikei[13].AddKbn	    := '+';											    // 加算(+)
	//	中間配当金/当期未処分利益
	aPrintK_Taikei[14].NCode		:= GetKmkInfo(TYUKAN,1,SumKbn);					    // 中間配当金の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[14].Sumkbn	    := SumKbn;										    // 中間配当金の実在合計区分
	aPrintK_Taikei[14].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[14].NCode);	// 中間配当金の科目簡略名称取得
	aPrintK_Taikei[14].S_NCode	    := GetKmkInfo(TOUKIMISYO,1,SumKbn);				    // 当期未処分利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[14].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[14].S_NCode);  // 当期未処分利益の科目簡略名称取得
	aPrintK_Taikei[14].AddKbn	    := '-';											    // 減算(-)
	//	利益準備金/当期未処分利益
	aPrintK_Taikei[15].NCode		:= GetKmkInfo(RIEKIZYUNBI,1,SumKbn);				// 利益準備金の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[15].Sumkbn	    := SumKbn;										    // 利益準備金の実在合計区分
	aPrintK_Taikei[15].SimpleName   := fnGetKmkSimpleName(aPrintK_Taikei[15].NCode);	// 利益準備金の科目簡略名称取得
	aPrintK_Taikei[15].S_NCode	    := GetKmkInfo(TOUKIMISYO,1,SumKbn);			    	// 当期未処分利益の科目ｺｰﾄﾞ取得
	aPrintK_Taikei[15].S_SimpleName := fnGetKmkSimpleName(aPrintK_Taikei[15].S_NCode);  // 当期未処分利益の科目簡略名称取得
	aPrintK_Taikei[15].AddKbn	    := '-';											    // 減算(-)

end;

//-----------------------------------------------------------------------------
// fnArrayClear()
//	< 配列の初期化 >
//      PARAM   : Count		    :	ｺｰﾄﾞ
//                ChoiceFlag	:	List(TRUE)/Save(FALSE)
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnArrayClear(Count: Integer; ChoiceFlag: Boolean);
var
	iLoop : Integer;
begin

	if ( ChoiceFlag = TRUE ) then
    begin
		for iLoop := Count to 9 do
		begin
			aTaikeiList[iLoop].KmkCode	  := -1;
			aTaikeiList[iLoop].SimpleName := '';
			aTaikeiList[iLoop].AddKbn	  := '';
			aTaikeiList[iLoop].MaxEnt	  := '';
			aMaxEntNo[iLoop] := 0;
		end;
	end
	else
	begin
		for iLoop := Count to 9 do
		begin
			aTaikeiSaveCode[iLoop] := '';
		end;
	end;

end;

//-----------------------------------------------------------------------------
// fnTaiKeiPrintSet()
//	< 体系印刷情報ｾｯﾄ >
//      PARAM   : JitusGoKbn	:	実在/合計区分
//                QueryData	    :	範囲内の検索用Query
//                QueryPrint	:	印刷用ﾃﾞｰﾀｾｯﾄQuery
//      VAR     :
//      RETURN  : TRUE(正常)/FALSE(異常)
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnTaiKeiPrintSet(JitusGoKbn: Integer; QueryData,QueryPrint: TMQuery): Boolean;
var
	iGCode		:	Integer;
    iNCode      :   Extended;
	iCount		:	Integer;
	bPostFlag	:	Boolean;
	iLoop		:	Integer;
begin

	Result := TRUE;

	MemPrint_TaikeiList.Open;

	with QueryData do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT NCode, GCode,SimpleName     '
            +   'FROM KmkMA                         '
            +   'WHERE  (MasterKbn = 1)             '
            +   '  AND  (SumKbn    = :SumKbn)       '
            +   '  AND  (SubCode   = 0)             '
            +   '  AND  (RDelKbn   = 0)             ');
        //<045>
         if ( uvHani.pvrRgType[0] <> 0 ) then									// 範囲指定？
         begin
         //<045>
             if ( uvHani.pvrStCode[0] <> '' ) and
                 ( uvHani.pvrEdCode[0] =  '' ) then
             begin
                 SQL.Add('  AND  (GCode >= :ExCode)   ');
                 ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
             end
             else if ( uvHani.pvrStCode[0] =  '' ) and
                     ( uvHani.pvrEdCode[0] <> '' ) then
             begin
                 SQL.Add('  AND  (GCode <= :ExCode)   ');
                 //<045>
                 //ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],99999999);
                 ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                 //<045>
             end
             else if ( uvHani.pvrStCode[0] <> '' ) and
                     ( uvHani.pvrEdCode[0] <> '' ) then
             begin
                 SQL.Add('  AND  (GCode >= :ExStCode)     ');
                 SQL.Add('  AND  (GCode <= :ExEdCode)     ');
                 ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
                 //<045>
                 //ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],99999999);
                 ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                 //<045>
             end;
         end;

        SQL.Add('ORDER BY GCode ');
		ParamByName('SumKbn').AsInteger :=  JitusGoKbn;	//	実在/合計区分

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(QueryData);
			Result := FALSE;
			Exit;
		end;

		while Eof <> TRUE do
		begin
			// 初期処理
			iCount      :=  1;
			iGCode      :=  GetFLD('GCode').AsInteger;
            iNCode      :=  GetFLD('NCode').AsFloat;
			bPostFlag   :=  FALSE;

			with QueryPrint do
			begin
				Close();
				SQL.Clear();
                SQL.Add('SELECT                             '
                    +   '    TA.SumNCode    TSumCode        '
                    +   '   ,TA.AddKbn      TAddKbn         '
                    +   '   ,MA.GCode       MGCode          '
                    +   '   ,MA.SimpleName  MSimpleName     '
                    +   'FROM KmkTree TA                    '
                    +   'LEFT OUTER JOIN KmKMA MA ON        '
                    +   '       (TA.SumNCode  = MA.NCode)   '
                    +   '  AND  (MA.MasterKbn = 1)          '
                    +   '  AND  (MA.RDelKbn   = 0)          '
                    +   'WHERE  (TA.BasedNCode = :ExNCode)  '
                    +   '  AND  (TA.MasterKbn  = 1)         '
                    +   'ORDER BY SumNCode                  ');

				ParamByName('ExNCode').AsFloat  :=  iNCode;

				// ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(QueryPrint);
					Result := FALSE;
					Exit;
				end;

				// 実在のはぐれの時
				if ( EOF = TRUE ) then
				begin
					// 特定科目の時
					for iLoop := 1 to 15 do
					begin
						if ( aPrintK_Taikei[iLoop].NCode  = iNCode     ) and
                           ( aPrintK_Taikei[iLoop].Sumkbn = JitusGoKbn ) then
						begin
							MemPrint_TaikeiList.Append();
							MemPrint_TaikeiList.FieldByName('T_KMCode')     .AsInteger  :=  gfnGetKmk_GCODE(aPrintK_Taikei[iLoop].NCode);
							MemPrint_TaikeiList.FieldByName('T_KMKanryaku') .AsString   :=  aPrintK_Taikei[iLoop].SimpleName;
							MemPrint_TaikeiList.FieldByName('T_ADD01')      .AsString   :=  aPrintK_Taikei[iLoop].AddKbn;
							MemPrint_TaikeiList.FieldByName('T_KSCode01')   .AsInteger  :=  gfnGetKmk_GCODE(aPrintK_Taikei[iLoop].S_NCode);
							MemPrint_TaikeiList.FieldByName('T_KSName01')   .AsString   :=  aPrintK_Taikei[iLoop].S_SimpleName;
							MemPrint_TaikeiList.Post;
							bPostFlag   :=  TRUE;
						end;
					end;

					if ( bPostFlag = FALSE ) then
					begin
						MemPrint_TaikeiList.Append();
						MemPrint_TaikeiList.FieldByName('T_KMCode')     .AsInteger	:=  iGCode;
						MemPrint_TaikeiList.FieldByName('T_KMKanryaku') .AsString   :=	QueryData.GetFld('SimpleName').AsString;
						MemPrint_TaikeiList.Post;
						bPostFlag := TRUE;
					end;
				end;

				while EOF <> TRUE do
				begin
					bPostFlag := FALSE;

					if ( iCount = 1 ) then
					begin
						MemPrint_TaikeiList.Append();
						MemPrint_TaikeiList.FieldByName('T_KMCode')     .AsInteger	:=  iGCode;
						MemPrint_TaikeiList.FieldByName('T_KMKanryaku') .AsString   :=	QueryData.GetFld('SimpleName').AsString;
					end
					else
						MemPrint_TaikeiList.Edit();

                    // 加算先加算区分
					if ( QueryPrint.GetFld('TAddKbn').AsInteger = 0 ) then
						MemPrint_TaikeiList.FieldByName('T_ADD0'+IntToStr(iCount)).AsString := '+'	//	加算
					else
						MemPrint_TaikeiList.FieldByName('T_ADD0'+IntToStr(iCount)).AsString := '-';	//	減算
					MemPrint_TaikeiList.FieldByName('T_KSCode0'+IntToStr(iCount)).AsInteger	:=	GetFld('MGCode').AsInteger;		//	加算元ｺｰﾄﾞ
					MemPrint_TaikeiList.FieldByName('T_KSName0'+IntToStr(iCount)).AsString	:=	GetFld('MSimpleName').AsString;	//	加算元簡略名称

					if ( iCount = 3 ) then
					begin
						MemPrint_TaikeiList.Post;
						iCount      :=  0;
						bPostFlag   :=  TRUE;
					end;

					iCount := iCount + 1;
					Next;
				end;

				if ( bPostFlag = FALSE ) then
					MemPrint_TaikeiList.Post;
			end;
			Next;
		end;
	end;

end;

//-----------------------------------------------------------------------------
// fnIchiranPrint()
//	< 科目ｺｰﾄﾞ一覧印刷処理 >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//                Choice	:	実在(ICHIRAN_J)/合計(ICHIRAN_G)
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.
fnIchiranPrint(Select: TDlgRetID; Choice: Integer);
var
	DmqData				:	TMQuery;
	bRensouOrderFlag	:	Boolean;
begin

	bRensouOrderFlag := FALSE;

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	DDataSource.DataSet	:= nil;

	MemPrint_Ichiran.Close;
	MemPrint_Ichiran.Open;

	with DmqData do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT GCode, SimpleName       '
            +   'FROM KmkMA                     '
            +   'WHERE  (MasterKbn = 1)         '
            +   '  AND  (SumKbn    = :SumKbn)   '
            +   '  AND  (SubCode   = 0)         '
            +   '  AND  (RDelKbn   = 0)         ');

         //<045>
         if ( uvHani.pvrRgType[0] <> 0 ) then									// 範囲指定？
         begin
         //<045>
             if ( uvHani.pvrStCode[0] <> '' ) and
                 ( uvHani.pvrEdCode[0] =  '' ) then
             begin
                 SQL.Add('  AND  (GCode >= :ExCode)   ');
                 ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
             end
             else if ( uvHani.pvrStCode[0] =  '' ) and
                     ( uvHani.pvrEdCode[0] <> '' ) then
             begin
                 SQL.Add('  AND  (GCode <= :ExCode)   ');
                 //<045>
                 //ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],99999999);
                 ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                 //<045>
             end
             else if ( uvHani.pvrStCode[0] <> '' ) and
                     ( uvHani.pvrEdCode[0] <> '' ) then
             begin
                 SQL.Add('  AND  (GCode >= :ExStCode)     ');
                 SQL.Add('  AND  (GCode <= :ExEdCode)     ');
                 ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
                 //<045>
                 //ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],99999999);
                 ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                 //<045>
             end;
         end;


		// 出力順序
		if ( uvHani.pvrOrder = CODEORDER) then
			SQL.Add('ORDER BY GCode')
		else
		begin
			SQL.Add('  AND  (Renso <> '''') ');
			SQL.Add('ORDER BY Renso,GCode   ');
			bRensouOrderFlag := TRUE;
		end;

		// 実在/合計
		if ( Choice = ICHIRAN_J ) then
			ParamByName('SumKbn').AsInteger	:= 0	//	実在
		else if ( Choice = ICHIRAN_G ) then
            ParamByName('SumKbn').AsInteger	:= 1;	//	合計

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
			Exit;
		end;

		while Eof <> TRUE do
		begin
			MemPrint_Ichiran.Append;
			MemPrint_Ichiran.FieldByName('Ichi_KmkCode').AsInteger := GetFld('GCode'	 ).AsInteger;	//	科目ｺｰﾄﾞ
			MemPrint_Ichiran.FieldByName('Ichi_KmkName').AsString  := GetFld('SimpleName').AsString;	//	科目名称
			MemPrint_Ichiran.Post;
			next;
		end;

		// 連想順に表示時
		if ( bRensouOrderFlag = TRUE ) then
		begin
			Close;
			SQL.Clear;
			SQL.Add('SELECT GCode, SimpleName       '
			    +   'FROM KmkMA                     '
			    +   'WHERE  (MasterKbn = 1)         '
			    +   '  AND  (SumKbn    = :SumKbn)   '
			    +   '  AND  (SubCode   = 0)         '
                +   '  AND  (RDelKbn   = 0)         ');

            //<045>
            if ( uvHani.pvrRgType[0] <> 0 ) then									// 範囲指定？
            begin
            //<045>
                if ( uvHani.pvrStCode[0] <> '' ) and
                    ( uvHani.pvrEdCode[0] =  '' ) then
                begin
                    SQL.Add('  AND  (GCode >= :ExCode)   ');
                    ParamByName('ExCode').AsInteger :=  StrToIntDef(uvHani.pvrStCode[0],0);
                end
                else if ( uvHani.pvrStCode[0] =  '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (GCode <= :ExCode)   ');
                    //<045>
                    //ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],99999999);
                    ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                    //<045>
                end
                else if ( uvHani.pvrStCode[0] <> '' ) and
                        ( uvHani.pvrEdCode[0] <> '' ) then
                begin
                    SQL.Add('  AND  (GCode >= :ExStCode)     ');
                    SQL.Add('  AND  (GCode <= :ExEdCode)     ');
                    ParamByName('ExStCode').AsInteger   :=	StrToIntDef(uvHani.pvrStCode[0],0);
                    //<045>
                    //ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],99999999);
                    ParamByName('ExEdCode').AsInteger   :=  StrToIntDef(uvHani.pvrEdCode[0],0);
                    //<045>
                end;
            end;


			// 出力順序
			SQL.Add('  AND  (Renso = '''')  ');
			SQL.Add('ORDER BY Renso,GCode   ');

			// 実在/合計
			if ( Choice = ICHIRAN_J ) then
				ParamByName('SumKbn').AsInteger	:= 0	//	実在
			else if ( Choice = ICHIRAN_G ) then
    	        ParamByName('SumKbn').AsInteger	:= 1;	//	合計

			// ｴﾗｰの判定
			if ( Open = FALSE ) then
			begin
				ErrorMessageDsp(DmqData);
				DmqData.Close();
				DmqData.Free();
				Exit;
			end;

			while Eof <> TRUE do
			begin
				MemPrint_Ichiran.Append;
				MemPrint_Ichiran.FieldByName('Ichi_KmkCode').AsInteger := GetFld('GCode'	 ).AsInteger;	//	科目ｺｰﾄﾞ
				MemPrint_Ichiran.FieldByName('Ichi_KmkName').AsString  := GetFld('SimpleName').AsString;	//	科目名称
				MemPrint_Ichiran.Post;
				Next;
			end;
		end;
	end;

	DmqData.Close();
	DmqData.Free();

	DDataSource.DataSet	:=	MemPrint_Ichiran;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_Ichiran.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// fnHendoPrint()
//	< 変動損益関係ﾘｽﾄ >
//      PARAM   : Select	:	印刷ﾀﾞｲｱﾛｸﾞの戻り値
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnHendoPrint(Select: TDlgRetID);
var
	DmqHendo			:	TMQuery;
	bRensouOrderFlag	:	Boolean;
	i,iwk,iCode,iDC		:	Integer;
	iDCKbn				:	Integer;
	sName				:	String;
	iwk2 : integer;
begin

	bRensouOrderFlag := FALSE;

    // MQueryの構築
	DmqHendo := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqHendo );

    DDataSource.DataSet	:= nil;

	MemPrint_Hendo.Close;
	MemPrint_Hendo.Open;

	with DmqHendo do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT                                 '
            +   '    MA.GCode       KmkCode             '
            +   '   ,MA.SimpleName  SName               '
            +   '   ,MA.AnalyzeCode BunCode             '
            +   '   ,MA.DCKbn       DCKbn               '
            +   '   ,MB.FixChgRate  Rate                '
            +   'FROM KmkMA MA                          '
            +   'LEFT OUTER JOIN KmKMB MB ON            '
            +   '       (MA.MasterKbn = MB.MasterKbn)   '
            +   '  AND  (MA.SumKbn    = MB.SumKbn)      '
            +   '  AND  (MA.NCode     = MB.NCode)       '
            +   'WHERE  (MA.MasterKbn = 1)              '
            +   '  AND  (MA.SumKbn    = 0)              '
            +   '  AND  (MA.SubCode   = ''0'')          '
            +   '  AND  (MA.RDelKbn   = 0)              '
            +   '  AND  (MA.BPKbn     = 1)              '
            +   'ORDER BY MA.GCode                      ');

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqHendo);
			DmqHendo.Close();
			DmqHendo.Free();
			Exit;
		end;

		while Eof <> TRUE do
		begin
			MemPrint_Hendo.Append;
			MemPrint_Hendo.FieldByName('H_KMCode')      .AsInteger	:= GetFld('KmkCode').AsInteger;	// 科目ｺｰﾄﾞ
			MemPrint_Hendo.FieldByName('H_KMKanryaku')  .AsString   := GetFld('SName'  ).AsString;	// 科目名称

			iwk	   := GetFld('BunCode').AsInteger;	// 分析ｺｰﾄﾞ
			iDCKbn := GetFld('DCKbn'  ).AsInteger;	// 正残区分

			// 固定費ｺｰﾄﾞ、変動費ｺｰﾄﾞ取得
			for i := 0 to 112 do
			begin
				//分析ｺｰﾄﾞを比較
				if ( aDefault[i].Code = iwk ) then
				begin
					// 変動費
					GetNameSKmkMA(aDefault[i].HendoCode,iCode,sName,iDC);	// 変動費のｺｰﾄﾞ、名称取得

					// 科目の正残と変動費の正残が等しくない時
					if ( iDCKbn <> iDC ) then
					begin
						iwk2 := 0 - iCode;
						MemPrint_Hendo.FieldByName('H_HendoCode').AsInteger := iwk2;	// 変動費ｺｰﾄﾞ
					end
					else
						MemPrint_Hendo.FieldByName('H_HendoCode').AsInteger := iCode;	// 変動費ｺｰﾄﾞ
					MemPrint_Hendo.FieldByName('H_HendoName').AsString  := sName;	    // 変動費名称

					// 固定費
					GetNameSKmkMA(aDefault[i].KoteiCode,iCode,sName,iDC);	// 固定費のｺｰﾄﾞ、名称取得

					// 科目の正残と固定費の正残が等しくない時
					if ( iDCKbn <> iDC ) then
						MemPrint_Hendo.FieldByName('H_KoteiCode').AsInteger := 0-iCode	// 固定費ｺｰﾄﾞ
					else
						MemPrint_Hendo.FieldByName('H_KoteiCode').AsInteger := iCode;	// 固定費ｺｰﾄﾞ
					MemPrint_Hendo.FieldByName('H_KoteiName').AsString  := sName;	    // 固定費名称
					break;
                end;
			end;
			MemPrint_Hendo.FieldByName('H_HendoRate').AsFloat := GetFld('Rate').AsFloat;	//変動率
			MemPrint_Hendo.Post;
			next;
		end;
	end;

	DmqHendo.Close();
	DmqHendo.Free();

    DDataSource.DataSet	:=	MemPrint_Hendo;

    // ﾃﾞｰﾀの存在ﾁｪｯｸ
    if ( MemPrint_Hendo.RecordCount = 0 ) then
    begin
    	uvSelSys.MsgDlg(2010,10);
        Exit;
    end;

    if ( Select = PDLG_PRINT   ) or
       ( Select = PDLG_PREVIEW ) then
    begin
        mjspre.Exec(PrnSupport, MJSPrnDlgf, FileOut);
    end;

end;

//-----------------------------------------------------------------------------
// fnGetKmkSimpleName()
//	< 体系印刷情報ｾｯﾄ >
//      PARAM   : NCode :   科目内部ｺｰﾄﾞ
//      VAR     :
//      RETURN  : 科目の簡略名称
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnGetKmkSimpleName(NCode: Extended): String;
var
	DmqDsp			:	TMQuery;
begin

	Result := '';

	DmqDsp := TMQuery.Create( Self );				        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqDsp );	//	DBとMQueryの接続

	with DmqDsp do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT SimpleName FROM KmkMA   '
            +   'WHERE  (MasterKbn  = 1)        '
            +   '  AND  (RDelKbn    = 0)        '
            +   '  AND  (NCode      = :NCode)   '
            +   '  AND  (CNCode     = 0)        ');
		ParamByName('NCode').AsFloat    :=  NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqDsp);
			DmqDsp.Close();
			DmqDsp.Free();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			Result  :=  GetFld('SimpleName').AsString;
		end;
	end;
	DmqDsp.Close();
	DmqDsp.Free();

end;

//-----------------------------------------------------------------------------
// HagureMakePrint()
//	< はぐれの印刷処理 >
//      PARAM   : Select    :   選択されている科目
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.HagureMakePrint(Select: Integer);
var
	DmqTree			:	TMQuery;
	DmqData			:	TMQuery;
	DmqMA			:	TMQuery;
	bFlag			:	Boolean;
	bKodomoFlag		:	Boolean;
	bTokuteiFlag	:	Boolean;
	bGoukeiFlag		:	Boolean;
	iLoop			:	Integer;
	SumKbn			:	Byte;
	sSimpleName		:	String;
	iSumKbn			:	Integer;
begin

    //	初期化
	SumKbn	    :=	0;
	bFlag		:=  FALSE;
	bKodomoFlag	:=  FALSE;
	bGoukeiFlag :=  FALSE;

    // MQueryの構築
	DmqTree :=  TMQuery.Create( Self );
    DmqData :=  TMQuery.Create( Self );
    DmqMA   :=  TMQuery.Create( Self );

    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTree );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqMA   );

	with DmqTree do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT DISTINCT                                            '
            +   '    MA.GCode                                               '
            +   '   ,MA.NCode                                               '
            +   '   ,MA.MasterKbn                                           '
            +   '   ,MA.SumKbn                                              '
            +   '   ,MA.BPKbn                                               '
            +   '   ,MA.AnalyzeCode                                         '
            +   '   ,MA.SimpleName                                          '
            +   'FROM KmkMA MA                                              '
            +   'INNER JOIN KmkTree TR ON                                   '
            +   ' ( NOT EXISTS ( SELECT TR.SumNCode FROM KmkTree TR WHERE   '
            +   ' ( TR.BasedNCode = MA.NCode ) and TR.MasterKbn = 1) )      '
		// <109>MOD↓
        //  +   'WHERE (MA.MasterKbn = 1) AND (MA.RDelKbn = 0)              ');
            +   'WHERE (MA.MasterKbn = 1) AND (MA.RDelKbn = 0)              '
			+   'ORDER BY MA.SumKbn DESC, MA.GCode                          '
			);
		// <109>MOD↑

		// ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqTree);
			DmqTree.Close();
			DmqTree.Free();
			DmqData.Close();
			DmqData.Free();
			DmqMA.Close();
			DmqMA.Free();
			Exit;
		end;

		while EOF <> TRUE do
		begin
			bTokuteiFlag	:=  FALSE;
			m_PriHagureCode :=  GetFld('NCode')     .AsFloat;
			sSimpleName		:=  GetFld('SimpleName').AsString;
			iSumKbn			:=  GetFld('SumKbn')    .AsInteger;

            // 特定科目と一致したら表示しない
			for iLoop := 0 to 19 do
			begin
				if ( aTokuteiKmkCode[iLoop] = m_PriHagureCode ) then
				begin
					bTokuteiFlag	:=	TRUE;
					Break;
				end;
			end;

			if ( bTokuteiFlag = FALSE ) then
			begin
				with DmqData do
				begin
					Close();
					SQL.Clear();
                    SQL.Add('SELECT BasedNCode FROM KmkTree     '
                        +   'WHERE  (MasterKbn  = 1)            '
                        +   '  AND  (SumNCode   = :KasanNCode)  ');

					ParamByName('KasanNCode').AsFloat   :=  m_PriHagureCode;

					// ｴﾗｰの判定
					if ( Open = FALSE ) then
					begin
						ErrorMessageDsp(DmqData);
						DmqData.Close();
						DmqData.Free();
						DmqTree.Close();
						DmqTree.Free();
						DmqMA.Close();
						DmqMA.Free();
						Exit;
					end;

					while EOF <> TRUE do
					begin
						bKodomoFlag	    :=	TRUE;

					{<107>	bGoukeiFlag		:分析ｺｰﾄﾞに係わらず実在科目が子供にいるか
							m_KodomoFlag	:分析ｺｰﾄﾞが一致した実在科目の子供がいるか
							ﾙｰﾌﾟ内で初期化してしまうと正しい体系に表示されない。}
					//	bGoukeiFlag     :=  FALSE;	// <107>DEL
					//	m_KodomoFlag    :=  FALSE;	// <107>DEL
					//	m_PriKodomoFlag :=  FALSE;	// <107>DEL 使用していないため削除

						with DmqMA do
						begin
							Close();
							SQL.Clear();
                            SQL.Add('SELECT                         '
                                +   '    MasterKbn                  '
                                +   '   ,SumKbn                     '
                                +   '   ,AnalyzeCode                '
                                +   '   ,BPKbn                      '
                                +   'FROM KmkMA                     '
                                +   'WHERE  (NCode   = :ExNCode)    '
                                +   '  AND  (RDelKbn = 0)           ');

							ParamByName('ExNCode').AsFloat  :=  DmqData.GetFld('BasedNCode').AsFloat;

							// ｴﾗｰの判定
							if ( Open = FALSE ) then
							begin
								ErrorMessageDsp(DmqMA);
								DmqMA.Close();
								DmqMA.Free();
								DmqTree.Close();
								DmqTree.Free();
								DmqData.Close();
								DmqData.Free();
								Exit;
							end;

							if ( EOF <> TRUE ) then
							begin
								// 実在科目時
								if ( (GetFld('MasterKbn').AsInteger) = 1 ) and
                                   ( (GetFld('SumKbn')   .AsInteger) = 0 ) then
								begin
									case Select of
										SHISAN:
										begin
											// 分析ｺｰﾄﾞが37以下かつBS実在科目時
											if ( (GetFld('AnalyzeCode').AsInteger) <= 37 ) and
                                               ( (GetFld('BPKbn')      .AsInteger)  = 0  ) then
												m_KodomoFlag := TRUE;
										end;
										FUSAI:
										begin
											// 分析ｺｰﾄﾞが38以上100以下かつBS実在科目時
											if ( (GetFld('AnalyzeCode').AsInteger) >= 38 ) and
											   ( (GetFld('BPKbn')      .AsInteger)  = 0  ) then
												m_KodomoFlag := TRUE;
										end;
										SONEKI:
										begin
											// PL実在科目時
											if ( (GetFld('BPKbn').AsInteger) = 1 ) then
												m_KodomoFlag := TRUE;
										end;
									end;
									bGoukeiFlag := TRUE;
								end
								else	//	合計時
								begin
									bFlag	:=	KodomoCheck(DmqData.GetFld('BasedNCode').AsFloat,Select,bGoukeiFlag);
    	            		    end;
							end;
						end;

   	    	            Next;
            		end;

					// 合計に子供がいて実在の範囲内の時
					if ( bKodomoFlag = TRUE ) and ( m_KodomoFlag = TRUE ) then
	                begin
						// 合計時
						if ( (DmqTree.GetFld('MasterKbn').AsInteger) = 1 ) and
                           ( (DmqTree.GetFld('SumKbn')   .AsInteger) = 1 ) then
						begin
							fnArrayClear(0,TRUE);
							aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(m_PriHagureCode);
							aTaikeiList[0].SimpleName   :=  sSimpleName;
							aTaikeiList[0].SumKbn	    :=  iSumKbn;
							fnTaikeiMake(m_PriHagureCode,1);
						end;

						m_KodomoFlag    :=  FALSE;
						bKodomoFlag     :=  FALSE;
					end
					// 合計に子供がいるが実在の範囲外の時または子供すべて合計の時
					else if ( bKodomoFlag = TRUE ) and ( m_KodomoFlag = FALSE ) then
					begin
						// 合計に子供がいるが実在の範囲外の時
						if ( bGoukeiFlag = TRUE ) then
						begin
							bKodomoFlag :=  FALSE;
							bGoukeiFlag :=  FALSE;
						end
						// 合計に子供がいるがすべて合計の時
					//	else if ( Select = SONEKI ) then		// <108>DEL
						else									// <108>ADD
						begin
							fnArrayClear(0,TRUE);
							aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(m_PriHagureCode);
							aTaikeiList[0].SimpleName   :=  sSimpleName;
							aTaikeiList[0].SumKbn	    :=  iSumKbn;
							fnTaikeiMake(m_PriHagureCode,1);
						end;
					end
					// 子供がいない時
					else if ( bKodomoFlag = FALSE ) and ( m_KodomoFlag = FALSE ) then
					begin
						// 合計時
						if ( (DmqTree.GetFld('MasterKbn').AsInteger) = 1 ) and
                           ( (DmqTree.GetFld('SumKbn')   .AsInteger) = 1 ) then
						begin
							case Select of
								SHISAN,FUSAI:
								begin
                                    // BS時
									if ( (DmqTree.GetFld('BPKbn').AsInteger) = 0 ) then
									begin
										fnArrayClear(0,TRUE);
										aTaikeiList[0].KmkCode	  := gfnGetKmk_GCODE(m_PriHagureCode);
										aTaikeiList[0].SimpleName := sSimpleName;
										aTaikeiList[0].SumKbn	  := iSumKbn;
										fnTaikeiMake(m_PriHagureCode,1);
									end;
								end;
								SONEKI:
								begin
									//	合計時
									if ((DmqTree.GetFld('BPKbn').AsInteger) = 1) then	//	PL時
									begin
										fnArrayClear(0,TRUE);
										aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(m_PriHagureCode);
										aTaikeiList[0].SimpleName   :=  sSimpleName;
										aTaikeiList[0].SumKbn	    :=  iSumKbn;
										fnTaikeiMake(m_PriHagureCode,1);
									end;
								end;
							end;
						end
                        // 実在時
						else
						begin
							case Select of
								SHISAN:
								begin
									// 分析ｺｰﾄﾞが37以下かつBS実在科目時
									if ( (DmqTree.GetFld('AnalyzeCode').AsInteger) <= 37 ) and
                                       ( (DmqTree.GetFld('BPKbn')      .AsInteger)  = 0  ) then
									begin
										fnArrayClear(0,TRUE);
										aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(m_PriHagureCode);
										aTaikeiList[0].SimpleName   :=  sSimpleName;
										aTaikeiList[0].SumKbn	    :=  iSumKbn;
										fnTaikeiMake(m_PriHagureCode,1);
									end;
								end;
								FUSAI:
								begin
									// 分析ｺｰﾄﾞが38以上100以下かつBS実在科目時
									if ( (DmqTree.GetFld('AnalyzeCode').AsInteger) >= 38 ) and
									   ( (DmqTree.GetFld('BPKbn')      .AsInteger)  = 0  ) then
									begin
										fnArrayClear(0,TRUE);
										aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(m_PriHagureCode);
										aTaikeiList[0].SimpleName   :=  sSimpleName;
										aTaikeiList[0].SumKbn	    :=  iSumKbn;
										fnTaikeiMake(m_PriHagureCode,1);
									end;
								end;
								SONEKI:
								begin
									// PL実在科目時
									if ( (DmqTree.GetFld('BPKbn').AsInteger) = 1 ) then
									begin
										fnArrayClear(0,TRUE);
										aTaikeiList[0].KmkCode	    :=  gfnGetKmk_GCODE(m_PriHagureCode);
										aTaikeiList[0].SimpleName   :=  sSimpleName;
										aTaikeiList[0].SumKbn	    :=  iSumKbn;
										fnTaikeiMake(m_PriHagureCode,1);
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			Next;
		end;
	end;

	DmqMA.Close();
	DmqMA.Free();
	DmqData.Close();
	DmqData.Free();
	DmqTree.Close();
	DmqTree.Free();

end;

//-----------------------------------------------------------------------------
// fnGetLinePosition()
//	< はぐれの印刷処理 >
//      PARAM   : DspName			:	表示する文字 ]
//                DspNameLeft		:	名称表示のｺﾝﾎﾟｰﾈﾝﾄのLeft
//                TateLeft		    :	縦線のｺﾝﾎﾟｰﾈﾝﾄのLeft
//      VAR     : YokoLeft	        :	横線のｺﾝﾎﾟｰﾈﾝﾄLeft
//                YokoWidth	        :	横線のｺﾝﾎﾟｰﾈﾝﾄWeight
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnGetLinePosition(DspName: String; DspNameLeft,TateLeft: Single;
												var YokoLeft: Single; var YokoWidth: Single);
var
	iCount		:	Single;
begin

	//	表示する文字数を取得
	iCount := MJSHanLength(DspName);

	//	文字数が12文字を超えていた時
	if (iCount > 12) then
		iCount := 12;

	//	横線の左の位置(Left)を取得
	YokoLeft := (iCount * 0.063) + DspNameLeft;

	//	横線の幅(Weight)を取得
	YokoWidth := (TateLeft - YokoLeft);

end;

//**********************************************************************
//*		Proccess	:	印刷時の装飾
//*		Name		:	H.Endo
//*		Date		:	2000/08/11
//*		Parameter	:	SouKbn		:	装飾区分
//*		Return		:	装飾
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.PrintGetSousyoku(SouKbn: Integer): String;
var
	sSousyoku	:	String;
begin

	case SouKbn of
		0:	sSousyoku	:=	'';
		1:	sSousyoku	:=	'【】';
		2:	sSousyoku	:=	'（）';
		3:	sSousyoku	:=	'〔〕';
		4:	sSousyoku	:=	'＜＞';
		5:	sSousyoku	:=	'(())';
		6:	sSousyoku	:=	'｛｝';
	end;
	Result	:=	sSousyoku;

end;

//**********************************************************************
//*		Proccess	:	印刷時のあり・なしを取得
//*		Name		:	H.Endo
//*		Date		:	2000/09/26
//*		Parameter	:	Kbn			:	Tableの値
//*		Return		:	文字列（あり・なし・共通部門）
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.GetAriNashi(Kbn: Integer): String;
begin

	case Kbn of
		0:	result	:=	'なし';
		1:	result	:=	'あり';
	end;

end;

//**********************************************************************
//*		Proccess	:	印刷時の入力情報の内容取得
//*		Name		:	H.Endo
//*		Date		:	2000/09/26
//*		Parameter	:	Kbn			:	Tableの値
//*						Select		:	種類 P_SHIWAKEKBN(1)	:	仕訳入力区分
//*											 P_SHIKURIYU(2)		:	資金繰ｺｰﾄﾞ優先区分
//*											 P_KOTEITEKIYOU(3)	:	固定摘要必須入力
//*											 P_OTHER(4)			:	以外
//*		Return		:	文字列
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.PrintInpInfo(Kbn: Integer; Select: Integer): String;
var
	sWork	:	String;
begin

	case Select of
		P_SHIWAKEKBN:		//	仕訳入力区分
		begin
			case Kbn of
				0:  sWork   :=  '貸借入力';
				1:  sWork   :=  '正残のみ';
				2:  sWork   :=  '負残のみ';
				9:  sWork   :=  '入力不可';
			end;
		end;
		P_SHIKURIYU:	//	資金繰ｺｰﾄﾞ優先区分
		begin
			case Kbn of
				0:  sWork   :=  '科目優先';
				1:  sWork   :=  '補助優先';
			end;
		end;
		P_KOTEITEKIYOU:	//	固定摘要必須入力
		begin
			case Kbn of
				0:  sWork   :=  '任意';
				1:  sWork   :=  '固定摘要';
				2:  sWork   :=  '摘要残';
			end;
		end;
		P_OTHER:		//	上記以外
		begin
			case Kbn of
				0:  sWork   :=  '入力なし';
				1:  sWork   :=  '正残のみ';
				2:  sWork   :=  '貸借入力';
				3:  sWork   :=  '負残のみ';
			end;
		end;
	end;

	Result	:=	sWork;

end;

//-----------------------------------------------------------------------------
// GetMaxEntKmkCode()
//  < 加算元の最大登録Noの科目ｺｰﾄﾞ取得 >
//      PARAM   : KmkCode   :   科目外部ｺｰﾄﾞ
//      VAR     :
//      RETURN  : 最大登録No.の科目内部ｺｰﾄﾞ
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.GetMaxEntKmkCode(KmkNCode: Extended): Extended;
var
	DmqData		:	TMQuery;
	iMaxEnt		:	Integer;
begin

	Result	:= 0;

    // MQueryの構築
	DmqData :=  TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqData do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT MAX(EntNo) FROM KmkTree '
            +   'WHERE  (MasterKbn = 1)         '
            +   '  AND  (SumNCode  = :ExNCode)  ');

		ParamByName('ExNCode').AsFloat  :=  KmkNCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			iMaxEnt :=  GetFld('MAX(KmkTree.EntNo)').AsInteger;
		end
		else
		begin
			iMaxEnt :=  0;
			DmqData.Close();
			DmqData.Free();
			Exit;
		end;

		Close();
		SQL.Clear();
        SQL.Add('SELECT BasedNCode FROM KmkTree     '
            +   'WHERE  (MasterKbn = 1)             '
            +   '  AND  (EntNo     = :MaxEnt)       '
            +   '  AND  (SumNCode  = :ExNCode)      ');

		ParamByName('MaxEnt')   .AsInteger  :=  iMaxEnt;
		ParamByName('ExNCode')  .AsFloat    :=  KmkNCode;

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
			Exit;
		end;

		if ( EOF <> TRUE ) then
		begin
			Result  :=  GetFld('BasedNCode').AsFloat;
		end
		else
		begin
			Result  :=  0;
		end;
	end;

	DmqData.Close();
	DmqData.Free();

end;

//**********************************************************************
//*		Proccess	:	損益時特定科目の最後の科目を取得
//*		Name		:	H.Endo
//*		Date		:	2001/09/19
//*		Parameter	:	なし
//*		Return		:	最後の科目ｺｰﾄﾞ
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.fnGetEndKmkInfo(): Extended;
var
	aTokuteiCode	:	array[1..16] of Integer;
	iLoop			:	Integer;
	iKmkNCode		:	Extended;
	iDummy			:	Byte;
begin
	aTokuteiCode[1]  := 010217;	//	当期未処分利益
	aTokuteiCode[2]  := 010216;	//	利益準備金
	aTokuteiCode[3]  := 010215;	//	中間配当金
	aTokuteiCode[4]  := 010214;	//	目的積立金取崩
	aTokuteiCode[5]  := 010213;	//	過年度税効果調整額
	aTokuteiCode[6]  := 010212;	//	前期繰越利益
	aTokuteiCode[7]  := 010211;	//	当期利益
	aTokuteiCode[8]  := 010210;	//	法人税調整額
	aTokuteiCode[9]  := 010209;	//	法人税等
	aTokuteiCode[10] := 010208;	//	税引前利益
	aTokuteiCode[11] := 010207;	//	経常利益
	aTokuteiCode[12] := 010206;	//	営業利益
	aTokuteiCode[13] := 010205;	//	販売費及び一般管理費
	aTokuteiCode[14] := 010204;	//	売上総利益
	aTokuteiCode[15] := 010203;	//	売上原価
	aTokuteiCode[16] := 010201;	//	売上高

	for iLoop := 1 to 16 do
	begin
		iKmkNCode := GetKmkInfo(aTokuteiCode[iLoop],1,iDummy);
		if (iKmkNCode <> 0) then
			break;
	end;

	Result := iKmkNCode;
end;

//-----------------------------------------------------------------------------
// fnOverCodeCheck()
//  < 体系印刷情報ｾｯﾄ >
//      PARAM   : NCode     :   内部ｺｰﾄﾞ
//                Count		:	下位のCount
//                SumKbn	:	実在/合計区分
//      VAR     : Msg
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnOverCodeCheck(NCode: Extended; Count,SumKbn: Integer): Integer;
var
	DmqData		:	TMQuery;
	pOverRec	:	POverCodeRec;
	iWork		:	Integer;
	iCnt		:	Integer;
begin
    iCnt := 0;

	if ( (m_Count+1) = Count ) then
	begin
		New(pOverRec);
		pOverRec^.KmkCode   :=  gfnGetKmk_GCODE(NCode);
		pOverRec^.SumKbn    :=  SumKbn;
		m_OverCodeList.Add(pOverRec);
        m_Count             :=  m_Count + 9;
	end;

    // MQueryの構築
	DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqData do
	begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT                                 '
            +   '    TA.BasedNCode  TBasedCode          '
            +   '   ,MA.SumKbn      MSumKbn             '
            +   '   ,MA.GCode       MGCode              '
            +   'FROM KmkTree TA                        '
            +   'LEFT OUTER JOIN KmKMA MA ON            '
            +   '       (TA.BasedNCode  = MA.NCode)     '
            +   '  AND  (MA.MasterKbn   = 1)            '
            +   '  AND  (MA.RDelKbn     = 0)            '
            +   'WHERE  (TA.MasterKbn   = 1)            '
            +   '  AND  (TA.SumNCode    = :KmkNCode)    '
            +   'ORDER BY EntNo                         ');

		ParamByName('KmkNCode').AsFloat :=  NCode;

		// ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close();
			DmqData.Free();
            Result := 0;
			Exit;
		end;

		// 子供がいなかった時
		if ( EOF = TRUE ) then
			iCnt := Count;

		while Eof <> TRUE do
		begin
			// 合計の時
			if ( GetFld('MSumKbn').AsInteger = 1 ) then
			begin
				iWork   :=  Count + 1;
				iCnt    :=  fnOverCodeCheck(GetFld('TBasedCode').AsFloat,iWork,GetFld('MSumKbn').AsInteger);
			end;
			Next;
		end;
	end;

	// 最後に表示して終わりの時最後のﾃﾞｰﾀを消す
	if ( (m_Count-8) = iCnt ) then
	begin
		m_OverCodeList.Delete(m_OverCodeList.Count-1);
	end;

	DmqData.Close();
	DmqData.Free();

	Result  :=  iCnt;

end;

//************************************************************************
//*		Component		:
//*		Event			:   FileOut
//*		Name			:	H.Endo（MJS）
//************************************************************************
procedure TJNTCRP009001f.FileOut;
begin

    if iD = 0 then
	begin
		if DSet2CSV(MemPrint, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
    end
	else if iD = 1 then
	begin
        if DSet2CSV(MemPrint_Saimoku, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end
	else if iD = 2 then
	begin
		if DSet2CSV(MemPrint_Goukei, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end
	else if iD = 3 then
	begin
		if DSet2CSV(MemPrint_Taikei, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end
	else if iD = 4 then
	begin
		if DSet2CSV(MemPrint_JitsuKan, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end
	else if iD = 5 then
	begin
		if DSet2CSV(MemPrint_Taikei, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end
	else if iD = 6 then
	begin
		if DSet2CSV(MemPrint_Taikei, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end
//--- HIS0058 START -----
	else if (iD = 7) or (iD = 8) then
	begin
		if DSet2CSV(MemPrint_Ichiran, PrnSupport.strFileName) = -1 then
		begin
			//	ファイル出力大失敗
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
	    	MjsMessageBoxEx(AOwner, // <005>
                            MjsMsgRec.sMsg,
                            MjsMsgRec.sTitle,
                            MjsMsgRec.icontype,
                            MjsMsgRec.btntype,
                            MjsMsgRec.btndef,
                            MJsMsgRec.LogType
                           );
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	ファイル出力に必要なTitle･Filed設定
//*		Name		:	H.Endo
//*		Date		:	2000/1/5
//*		Parameter	:	Select	:	帳票種類
//*						sTitle	:	CreateされたTStringList(ﾀｲﾄﾙ用)
//*						sMemFld	:	CreateされたTStringList(ﾌｨｰﾙﾄﾞ用)
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP009001f.SetFileOutTF(Select: Integer; var sTitle: TStringList; var sMemFld: TStringList);
begin

	case Select of
        // ------------------------------
        //	    実在科目登録リスト
        // ------------------------------
		ZITSUZAI:
		begin
//<046>(*
			sTitle.Add('コード'					 );
			sTitle.Add('正式科目名'				 );
			sTitle.Add('簡略科目名'				 );
			sTitle.Add('連想'					 );
			sTitle.Add('ﾏｲﾅｽ変換科目名'			 );
			sTitle.Add('分析ｺｰﾄﾞ'				 );
			sTitle.Add('要約分析ｺｰﾄﾞ'			 );
			sTitle.Add('性格ｺｰﾄﾞ'				 );
			sTitle.Add('期首残区分'				 );
			sTitle.Add('正残区分'				 );
			sTitle.Add('BS/PL区分'				 );
			sTitle.Add('借方資金繰ｺｰﾄﾞ'			 );
			sTitle.Add('貸方資金繰ｺｰﾄﾞ'			 );
			sTitle.Add('要約BS/PLｺｰﾄﾞ'			 );  //<098>ADD
			sTitle.Add('装飾区分'				 );
            sTitle.Add('固定区分'				 );
            sTitle.Add('変動区分'				 );
			sTitle.Add('比率科目区分'			 );
			sTitle.Add('変動費比率'				 );
			sTitle.Add('差額印刷区分'			 );
			sTitle.Add('利益印刷区分'			 );
			sTitle.Add('ﾏｲﾅｽ印刷区分'			 );
			sTitle.Add('元帳摘要欄起票者印字区分');
			sTitle.Add('集計単位区分'			 );
			sTitle.Add('仕訳入力区分'			 );
			sTitle.Add('期日入力区分'			 );
			sTitle.Add('期日必須入力区分'		 );
			sTitle.Add('固定摘要必須入力'		 );
			sTitle.Add('科目分類1'			     );
            sTitle.Add('科目分類2'			     );
            sTitle.Add('科目分類3'			     );
            sTitle.Add('科目分類4'			     );
            sTitle.Add('科目分類5'			     );
			sTitle.Add('資金繰ｺｰﾄﾞ優先区分'		 );
			sTitle.Add('履歴管理区分'			 );
			//sTitle.Add('適用開始年月日'			 );
			//sTitle.Add('適用終了年月日'			 );
			sTitle.Add('更新日時'				 );
			//sTitle.Add('集計単位区分'			 );  //<098>コメント化（重複しているため）　　　

			sMemFld.Add('Code'			);
			sMemFld.Add('SeishikiName'	);
			sMemFld.Add('KanryakuName'	);
			sMemFld.Add('Rensou'		);
			sMemFld.Add('MainaKamoku'	);
			sMemFld.Add('Bunseki'		);
			sMemFld.Add('YouYakuCode'	);
			sMemFld.Add('Seikaku'		);
			sMemFld.Add('KisyuName'		);
			sMemFld.Add('SeizanName'	);
			sMemFld.Add('BsPlName'		);
			sMemFld.Add('KariKuri'		);
			sMemFld.Add('KashiKuri'		);
			sMemFld.Add('Youyaku'	    );
			sMemFld.Add('SousyokuName'	);
			sMemFld.Add('Kotei'	    	);
			sMemFld.Add('Hendo'			);
			sMemFld.Add('HiritsuName' 	);
			sMemFld.Add('Hendouhi'	 	);
			sMemFld.Add('SagakuName' 	);
			sMemFld.Add('RiekiName'	    );
			sMemFld.Add('MainasuPriName');
			sMemFld.Add('KihyouPri'	    );
			sMemFld.Add('AddUnit'		);
			sMemFld.Add('ShiwakeName'   );
			sMemFld.Add('KijitsuName'  	);
			sMemFld.Add('KijitsuHisu'  	);   //<098>ADD
			sMemFld.Add('KoteiTekiName'	);
			sMemFld.Add('Bun1Nm'	    );
			sMemFld.Add('Bun2Nm'		);
			sMemFld.Add('Bun3Nm'	    );
			sMemFld.Add('Bun4Nm'	    );
			sMemFld.Add('Bun5Nm'	    );
			sMemFld.Add('ShikuriYuName'	);
            sMemFld.Add('RirekiName'	);
			//sMemFld.Add('TStartDate' 	);
			//sMemFld.Add('TEndDate'	);
			sMemFld.Add('LastUpDate'	);

//<046>*)
		end;
        // ------------------------------
        //      科目別補助登録リスト
        // ------------------------------
		SAIMOKU:
		begin
//<046>(*
			sTitle.Add('科目ｺｰﾄﾞ'		   );
			sTitle.Add('科目名'	           );
			sTitle.Add('科目別補助ｺｰﾄﾞ'	   );
			sTitle.Add('正式科目別補助名'  );
			sTitle.Add('簡略科目別補助名'  );
			sTitle.Add('連想'			   );
			sTitle.Add('借方資金繰ｺｰﾄﾞ'	   );
			sTitle.Add('借方資金繰ｺｰﾄﾞ名称');
			sTitle.Add('貸方資金繰ｺｰﾄﾞ'	   );
			sTitle.Add('貸方資金繰ｺｰﾄﾞ名称');
			sTitle.Add('装飾区分'		   );
            //<048>↓
			//sTitle.Add('小数点桁数'		   );
            //<048>↑
			sTitle.Add('適用開始年月日'	   );
			sTitle.Add('適用終了年月日'	   );
			sTitle.Add('更新日時'		   );

			sMemFld.Add('S_KCode'		 );
			sMemFld.Add('S_KName'		 );
			sMemFld.Add('S_SCode'		 );
			sMemFld.Add('S_SeisikiName'	 );
			sMemFld.Add('S_KanryakuName' );
			sMemFld.Add('S_Renso'		 );
			sMemFld.Add('S_KarikuriNo'	 );
			sMemFld.Add('S_KarikuriName' );
			sMemFld.Add('S_KashikuriNo'	 );
			sMemFld.Add('S_KashikuriName');
			sMemFld.Add('S_SousyokuName' );
            //<048>↓
			//sMemFld.Add('S_Syousu'		 );
            //<048>↑
			sMemFld.Add('S_StartDate'	 );
			sMemFld.Add('S_EndDate'		 );
			sMemFld.Add('S_LastUpDate'	 );
//<046>*)
        end;
        // ------------------------------
        //      合計科目登録リスト
        // ------------------------------
		GOUKEI:
		begin
//<046>(*
			sTitle.Add('合計ｺｰﾄﾞ'		   );
			sTitle.Add('正式科目名'		   );
			sTitle.Add('簡略科目名'		   );
			sTitle.Add('連想'			   );
			sTitle.Add('正残区分'		   );
			sTitle.Add('BS/PL区分'		   );
			sTitle.Add('装飾区分'		   );
			sTitle.Add('表示／印刷不可区分');
			sTitle.Add('差額印刷区分'	   );
			sTitle.Add('利益印刷区分'	   );
			sTitle.Add('ﾏｲﾅｽ印刷区分'	   );
            //<048>↓
			//sTitle.Add('平均値採用区分'	   );
			//sTitle.Add('累計集計区分'	   );
			//sTitle.Add('合計表示区分'	   );
            //<048>↑
			sTitle.Add('ﾏｲﾅｽ変換科目名'	   );
			sTitle.Add('更新日時'		   );

			sMemFld.Add('G_Code'		 );
			sMemFld.Add('G_SeishikiName' );
			sMemFld.Add('G_KanryakuName' );
			sMemFld.Add('G_Rensou'		 );
			sMemFld.Add('G_SeizanName'	 );
			sMemFld.Add('G_BPName'		 );
			sMemFld.Add('G_SousyokuName' );
			sMemFld.Add('G_DsPriName'	 );
			sMemFld.Add('G_SagakuPriName');
			sMemFld.Add('G_RiekiPriName' );
			sMemFld.Add('G_MainaPriName' );
            //<048>↓
			//sMemFld.Add('G_AveName'		 );
			//sMemFld.Add('G_RuikeiName'	 );
			//sMemFld.Add('G_GoukeiDsp'	 );
            //<048>↑
			sMemFld.Add('G_MainaKmk'	 );
			sMemFld.Add('G_LastUpDate'	 );
//<046>*)
        end;
        // ------------------------------
        //      科目登録リスト
        // ------------------------------
		TAIKEI:
		begin
			sTitle.Add('');
			sMemFld.Add('Code'		);
			sMemFld.Add('SimpleName');
			sMemFld.Add('Code01'	);
			sMemFld.Add('Name01'	);
			sMemFld.Add('Code02'	);
			sMemFld.Add('Name02'	);
			sMemFld.Add('Code03'	);
			sMemFld.Add('Name03'	);
			sMemFld.Add('Code04'	);
			sMemFld.Add('Name04'	);
			sMemFld.Add('Code05'	);
			sMemFld.Add('Name05'	);
			sMemFld.Add('Code06'	);
			sMemFld.Add('Name06'	);
			sMemFld.Add('Code07'	);
			sMemFld.Add('Name07'	);
			sMemFld.Add('Code08'	);
			sMemFld.Add('Name08'	);
			sMemFld.Add('Code09'	);
			sMemFld.Add('Name09'	);
        end;
        // ------------------------------
        //      科目登録リスト(簡略)
        // ------------------------------
		JITSUZAI_K:
		begin
			sTitle.Add('コード'			   );
			sTitle.Add('正式科目名'		   );
			sTitle.Add('簡略科目名'		   );
			sTitle.Add('連想'			   );
			sTitle.Add('分析ｺｰﾄﾞ'		   );
			sTitle.Add('分析名称'		   );
			sTitle.Add('性格ｺｰﾄﾞ'		   );
			sTitle.Add('性格名称'		   );
			sTitle.Add('正残区分'		   );
			sTitle.Add('BS/PL区分'		   );
			sTitle.Add('期首残区分'		   );
			sTitle.Add('借方資金繰ｺｰﾄﾞ'	   );
			sTitle.Add('借方資金繰ｺｰﾄﾞ名称');
			sTitle.Add('貸方資金繰ｺｰﾄﾞ'	   );
			sTitle.Add('貸方資金繰ｺｰﾄﾞ名称');
			sTitle.Add('装飾区分'		   );

			sMemFld.Add('J_Code'		 );
			sMemFld.Add('J_LongName'	 );
			sMemFld.Add('J_SimpleName'	 );
			sMemFld.Add('J_Renso'		 );
			sMemFld.Add('J_BunsekiCode'	 );
			sMemFld.Add('J_BunsekiName'	 );
			sMemFld.Add('J_SeikakuCode'	 );
			sMemFld.Add('J_SeikakuName'	 );
			sMemFld.Add('J_Seizan'		 );
			sMemFld.Add('J_BPKbn'		 );
			sMemFld.Add('J_Kisyuzan'	 );
			sMemFld.Add('J_KariKuriCode' );
			sMemFld.Add('J_KariKuriName' );
			sMemFld.Add('J_KashiKuriCode');
			sMemFld.Add('J_KashiKuriName');
			sMemFld.Add('J_Sousyoku');
        end;
        // ------------------------------
        //      科目登録リスト(実在)
        //      科目登録リスト(合計)
        // ------------------------------
		TAIKEILIST,TAIKEILIST_G:
		begin
			sTitle.Add('加算元ｺｰﾄﾞ'	 );
			sTitle.Add('加算元科目名');
			sTitle.Add('加算減算'	 );
			sTitle.Add('加算先ｺｰﾄﾞ'	 );
			sTitle.Add('加算先科目名');
			sTitle.Add('加算減算'	 );
			sTitle.Add('加算先ｺｰﾄﾞ'	 );
			sTitle.Add('加算先科目名');
			sTitle.Add('加算減算'	 );
			sTitle.Add('加算先ｺｰﾄﾞ'	 );
			sTitle.Add('加算先科目名');

			sMemFld.Add('T_KMCode'	  );
			sMemFld.Add('T_KMKanryaku');
			sMemFld.Add('T_Add01'	  );
			sMemFld.Add('T_KSCode01'  );
			sMemFld.Add('T_KSName01'  );
			sMemFld.Add('T_Add02'	  );
			sMemFld.Add('T_KSCode02'  );
			sMemFld.Add('T_KSName02'  );
			sMemFld.Add('T_Add03'	  );
			sMemFld.Add('T_KSCode03'  );
			sMemFld.Add('T_KSName03'  );
		end;
        // ------------------------------
        //      実在科目コード一覧
        //      合計科目コード一覧
        // ------------------------------
		ICHIRAN_J,ICHIRAN_G:
		begin
			sTitle.Add('科目ｺｰﾄﾞ'	 );
			sTitle.Add('科目名');

			sMemFld.Add('Ichi_KmkCode');
			sMemFld.Add('Ichi_KmkName');
		end;
        // ------------------------------
        //      変動損益関係リスト
        // ------------------------------
		HENDO:
		begin
			sTitle.Add('科目ｺｰﾄﾞ'	);
			sTitle.Add('科目名'	 	);
			sTitle.Add('変動費ｺｰﾄﾞ'	);
			sTitle.Add('変動科目名'	);
			sTitle.Add('固定費ｺｰﾄﾞ'	);
			sTitle.Add('固定科目名'	);
			sTitle.Add('変動比率'	);

			sMemFld.Add('H_KMCode'	  );
			sMemFld.Add('H_KMKanryaku');
			sMemFld.Add('H_HendoCode' );
			sMemFld.Add('H_HendoName' );
			sMemFld.Add('H_KoteiCode' );
			sMemFld.Add('H_KoteiName' );
			sMemFld.Add('H_HendoRate' );
		end;
	end;

end;

procedure TJNTCRP009001f.EBunExit(Sender: TObject);
var
    nNCode      :   Extended;
	strGCode    :   String;
    strName     :   String;
    iBunNo      :   Integer;
    iMKbn       :   Integer;
    iLoop       :   Integer;

begin

	// Shift+Tabが押された時
	if gShiftTabFlag = TRUE then
		Exit;

    if (gbEndFlag = TRUE) or (giChangeFlag = TRUE) then
		exit;

    // 分類Noの取得
    iBunNo := StrToInt(Copy(TMTxtEdit(Sender).Name, 5, 2));

    // 空白の場合はExit
    if m_Bunrui[iBunNo].ECode.Text = '' then
// 2005.10.19 K.Katou ﾗﾍﾞﾙもｸﾘｱ↓
//        Exit;
    begin
    	m_Bunrui[iBunNo].NCode := 0;	   	//<117>ADD
        m_Bunrui[iBunNo].GCode := '';		//<117>ADD
        m_Bunrui[iBunNo].LName.Caption := '';
        Exit;
    end;
// 2005.10.19 ↑

    if m_Bunrui[iBunNo].ECode.InputAttr = iaFree then
        strGCode := m_Bunrui[iBunNo].ECode.Text
    else
	    strGCode := Format('%.16d', [StrToInt64(m_Bunrui[iBunNo].ECode.Text)]);

    // ﾏｽﾀ区分の取得
    if      MTab_Select.Items.Selected = 0 then     // 実在科目
        iMKbn := 480 + iBunNo
    else if MTab_Select.Items.Selected = 1 then     // 細目科目
        iMKbn := 490 + iBunNo
    else                                            // 合計科目
        Exit;

    // 外部ｺｰﾄﾞから内部ｺｰﾄﾞ、名称を取得する
    if fnGetGBunrui(strGCode, iMKbn, nNCode, strName) = FALSE then
    begin
        Beep;
        m_Bunrui[iBunNo].ECode.SetFocus;
        Abort;
    end;

    // 分類情報を保存
    m_Bunrui[iBunNo].NCode := nNCode;
    m_Bunrui[iBunNo].GCode := strGCode;

    // 名称を表示
    m_Bunrui[iBunNo].LName.Caption := strName;

end;

// =============================================================================
// 分析外部ｺｰﾄﾞ取得処理 <055>
// =============================================================================
function TJNTCRP009001f.gfnGetSKmkMA_GCODE(nNCode: Extended; iMasCode: Integer): Integer;
var
    DmqData    :   TMQuery;

begin

    Result  :=  0;

    DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );	    //	DBとMQueryのS接続

    with DmqData do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT GCODE FROM SKmkMA       '
            +   'WHERE MasterKbn = :MasCode     '
            +   '  AND SumKbn    = 0            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND NCode     = :CODE        ');
        ParamByName('CODE')     .AsFloat    :=  nNCode;
        ParamByName('MasCode')  .AsInteger  :=  iMasCode;
        Open();

        if not EOF then
            Result  :=  GetFld('GCODE').AsInteger;

        Close();
    end;

    DmqData.Close();
    DmqData.Free();

end;

// =============================================================================
// 分析内部ｺｰﾄﾞ取得処理 <055>
// =============================================================================
function TJNTCRP009001f.gfnGetSKmkMA_NCODE(iGCode, iMasCode: Integer): Extended;
var
    DmqData    :   TMQuery;

begin

    Result  :=  0;

    DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );	    //	DBとMQueryのS接続

    with DmqData do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT NCODE FROM SKmkMA       '
            +   'WHERE MasterKbn = :MasCode     '
            +   '  AND SumKbn    = 0            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND GCode     = :CODE        ');
        ParamByName('CODE')     .AsInteger  :=  iGCode;
        ParamByName('MasCode')  .AsInteger  :=  iMasCode;
        Open();

        if not EOF then
            Result  :=  GetFld('NCODE').AsFloat;

        Close();
    end;

    DmqData.Close();
    DmqData.Free();

end;

// =============================================================================
// 適用期間の開始・終了の判定処理(デフォルト値の場合はブランクとする)
// =============================================================================
procedure TJNTCRP009001f.gfnCheckTekiDate(nDmqDataQry: TMQuery);
var
    sDate   :   Integer;
begin

    sDate   :=  0;
    //	適用開始年月日
    sDate   :=  StrToInt(FormatDateTime('yyyymmdd',nDmqDataQry.GetFLD('TStartDate'	).AsDateTime));
    if ( sDate = DEFDATE_START ) then
        EStartDate.AsDateTime   :=  0
    else
        EStartDate.AsDateTime	:=	nDmqDataQry.GetFLD('TStartDate'	).AsDateTime;

    //	適用終了年月日
    sDate   :=  StrToInt(FormatDateTime('yyyymmdd',nDmqDataQry.GetFLD('TEndDate'	).AsDateTime));
    if ( sDate = DEFDATE_END ) then
        EEndDate.AsDateTime		:=  0
    else
    	EEndDate.AsDateTime		:=	nDmqDataQry.GetFLD('TEndDate'	).AsDateTime;

end;

// =============================================================================
// 摘要分類外部ｺｰﾄﾞ取得処理
// =============================================================================
function TJNTCRP009001f.gfnGetTekiMA_GCODE(nNCode: Extended): Integer;
var
    DmqTekiMA   :   TMQuery;
begin
    Result  :=  0;

    DmqTekiMA := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTekiMA );	    //	DBとMQueryのS接続

    with DmqTekiMA do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT GCODE FROM TekiMA       '
            +   'WHERE MasterKbn = 61           '
            +   '  AND SumKbn    = 1            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND NCode     = :CODE        ');
        ParamByName('CODE')     .AsFloat  :=  nNCode;
        Open();

        if not EOF then
            Result  :=  StrToIntDef(GetFld('GCODE').AsString,0);

        Close();
    end;

    DmqTekiMA.Close();
    DmqTekiMA.Free();

end;

// =============================================================================
// 摘要分類内部ｺｰﾄﾞ取得処理
// =============================================================================
function TJNTCRP009001f.gfnGetTekiMA_NCODE(nGCode: Integer): Extended;
var
    DmqTekiMA   :   TMQuery;
begin
    Result  :=  0;

    DmqTekiMA := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTekiMA );	    //	DBとMQueryのS接続

    with DmqTekiMA do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT NCODE FROM TekiMA       '
            +   'WHERE MasterKbn = 61           '
            +   '  AND SumKbn    = 1            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND GCode     = :CODE        ');
		ParamByName('CODE').AsString    :=
            Format('%.16d',[StrToInt64(Trim(IntToStr(nGCode)))]);
        Open();

        if not EOF then
            Result  :=  GetFld('NCODE').AsFloat;

        Close();
    end;

    DmqTekiMA.Close();
    DmqTekiMA.Free();
end;

// =============================================================================
// 銀行外部ｺｰﾄﾞ取得処理
// =============================================================================
function TJNTCRP009001f.gfnGetBank_GCODE(nNCode: Extended): String;
var
    DmqTekiMA   :   TMQuery;
begin
    Result  :=  '';

    DmqTekiMA := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTekiMA );	    //	DBとMQueryのS接続

    with DmqTekiMA do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT GCODE FROM HojyoMA      '
            +   'WHERE MasterKbn = 21           '
            +   '  AND SumKbn    = 0            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND NCode     = :CODE        ');
        ParamByName('CODE')     .AsFloat  :=  nNCode;
        Open();

        if not EOF then
            Result  :=  GetFld('GCODE').AsString;

        Close();
    end;

    DmqTekiMA.Close();
    DmqTekiMA.Free();

end;

// =============================================================================
// 銀行内部ｺｰﾄﾞ取得処理
// =============================================================================
function TJNTCRP009001f.gfnGetBank_NCODE(nGCode: String): Extended;
var
    DmqTekiMA   :   TMQuery;
begin
    Result  :=  0;

    DmqTekiMA := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqTekiMA );	    //	DBとMQueryのS接続

    with DmqTekiMA do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT NCODE FROM HojyoMA      '
            +   'WHERE MasterKbn = 21           '
            +   '  AND SumKbn    = 0            '
            +   '  AND RDelKbn   = 0            '
            +   '  AND GCode     = :CODE        ');
		ParamByName('CODE').AsString    :=  nGCode;
        Open();

        if not EOF then
            Result  :=  GetFld('NCODE').AsFloat;

        Close();
    end;

    DmqTekiMA.Close();
    DmqTekiMA.Free();
end;

// =============================================================================
// 科目外部ｺｰﾄﾞ取得処理
// =============================================================================
function TJNTCRP009001f.gfnGetKmk_GCODE(nNCode: Extended): Integer;
var
    DmqKmkMA    :   TMQuery;
begin

    Result  :=  0;

    DmqKmkMA := TMQuery.Create( Self );					            //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqKmkMA );	    //	DBとMQueryのS接続

    with DmqKmkMA do
	begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT                     '
            +   '    GCODE                  '
            +   'FROM KmkMA                 '
            +   'WHERE RDelKbn   = 0        '
            +   '  AND NCode     = :NCode   ');

        ParamByName('NCode')    .AsFloat    :=  nNCode;

        // ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( DmqKmkMA );
			DmqKmkMA.Close();
			DmqKmkMA.Free();
			Exit;
		end;

        if ( EOF <> TRUE ) then
		begin
            Result  :=  GetFld('GCode') .AsInteger;
        end;
    end;

    DmqKmkMA.Close();
    DmqKmkMA.Free();

end;

// =============================================================================
// 科目内部ｺｰﾄﾞ取得処理
// =============================================================================
procedure TJNTCRP009001f.gfnGetKmk_NCODE(nMasKbn, nSumKbn, nGCode: Integer; nSubCode: String;
                                            var nNCode, nCNCode: Extended);
var
    DmqKmkMA :   TMQuery;
begin


    DmqKmkMA := TMQuery.Create( Self );					            //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqKmkMA );	    //	DBとMQueryのS接続

    with DmqKmkMA do
	begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT                     '
            +   '    NCode                  '
            +   '   ,CNCode                 '
            +   'FROM KmkMA                 '
            +   'WHERE RDelKbn   = 0        '
            +   '  AND GCode     = :GCODE   '
            +   '  AND SubCode   = :SUBCODE '
            +   '  AND MasterKbn = :MasKbn  '
            +   '  AND SumKbn    = :SumKbn  ');

        ParamByName('GCODE')    .AsInteger  :=  nGCode;
        ParamByName('SUBCODE')  .AsString   :=  nSubCode;
        ParamByName('MasKbn')   .AsInteger  :=  nMasKbn;
        ParamByName('SumKbn')   .AsInteger  :=  nSumKbn;

        // ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			ErrorMessageDsp( DmqKmkMA );
			DmqKmkMA.Close();
			DmqKmkMA.Free();
			Exit;
		end;

        if ( EOF <> TRUE ) then
		begin
            nNCode  :=  GetFld('NCode') .AsFloat;
            nCNCode :=  GetFld('CNCode').AsFloat;
        end;
    end;

    DmqKmkMA.Close();
    DmqKmkMA.Free();

end;

// =============================================================================
// 採用ﾃｰﾌﾞﾙより工事ﾏｽﾀ区分を取得
// =============================================================================
function TJNTCRP009001f.gfnKoujiMasKbnGet(): Integer;
var
    DmqMasInfo  :   TMQuery;
begin

    Result  :=  0;

    DmqMasInfo  :=  TMQuery.Create( Self );
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqMasInfo );

    with DmqMasInfo do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT MasterKbn FROM MasterInfo                       '
            +   'WHERE  (MasterKbn between 201 and 210)                 '
            +   '  AND ((UseKbn = 1 ) AND (KojUseKbn between 1 and 3))  ');
        Open();
        if ( not EOF ) then
            Result  :=  GetFld('MasterKbn').AsInteger;

        Close();
    end;

    DmqMasInfo.Close();
    DmqMasInfo.Free();

end;

//-----------------------------------------------------------------------------
// fnCodeOnArrowClick()     <004>
//      PARAM   : Sender    :   TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     :
//      RETURN  :
//      MEMO    : 検索エクスプローラ表示処理(共通)
//-----------------------------------------------------------------------------
procedure TJNTCRP009001f.fnCodeOnArrowClick(Sender: TObject);
var
    lvExpSend   :   rcJNTExpSend;   // 親BPL送信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    lvExpRecv   :   rcJNTExpRecv;   // 親BPL受信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    iExpRtn     :   Integer;        // 戻り値
    lvCompoName :   String;         // Senderｺﾝﾎﾟｰﾈﾝﾄ名
    lvLabel     :   String;         // TMLabelｺﾝﾎﾟｰﾈﾝﾄ名
    iBunruiMKbn :   Integer;        // <027>
begin

    // ｺﾝﾎﾟｰﾈﾝﾄ名の作成
    lvCompoName :=  TComponent(Sender).Name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam( @lvExpSend );
    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pRec;                             // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;                     // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;       //
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;       //

    // 分析ｺｰﾄﾞ/要約ｺｰﾄﾞ/固定費/変動費
    if ( lvCompoName = 'EBunCode'   ) or
       ( lvCompoName = 'EYouCode'   ) or
       ( lvCompoName = 'EHendo'     ) or
       ( lvCompoName = 'EKariCode'  ) or
       ( lvCompoName = 'EKashiCode' ) then
    begin
        if ( lvCompoName = 'EBunCode' ) then
            lvLabel             :=  'LBunName'          // ﾗﾍﾞﾙ名
        else if ( lvCompoName = 'EYouCode' ) then
            lvLabel             :=  'LYouName'          // ﾗﾍﾞﾙ名
        else if ( lvCompoName = 'EHendo'   ) then
            lvLabel             :=  'LHendoName'        // ﾗﾍﾞﾙ名
        else if ( lvCompoName = 'EKariCode' ) then
            lvLabel             :=  'LKariName'
        else if ( lvCompoName = 'EKashiCode' ) then
            lvLabel             :=  'LKashiName';

//        lvExpSend.MasterKbn     :=  3;                  // ﾏｽﾀ区分 <043>削除
        lvExpSend.ModulKbn      :=  0;                  // ﾓｼﾞｭｰﾙ区分(共通=0)
        lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNo.
        lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';     // ﾂｰﾙﾊﾞｰｷｬﾌﾟｼｮﾝ
        lvExpSend.TableName     :=  'SKmkMA';           // ﾃｰﾌﾞﾙ名
        if ( lvCompoName = 'EBunCode' ) or
           ( lvCompoName = 'EYouCode' ) or
           ( lvCompoName = 'EHendo'   ) then
// <043>↓
        begin
//            lvExpSend.WhereStr      :=  'MASTERKBN = 10 AND SUMKBN = 0 AND RDelKbn = 0'
            lvExpSend.MasterKbn     :=  10;             // ﾏｽﾀ区分
            lvExpSend.WhereStr      :=  'SUMKBN = 0 AND RDelKbn = 0';
        end
// <043>↑
        else if ( lvCompoName = 'EKariCode'  ) or
                ( lvCompoName = 'EKashiCode' ) then
// <043>↓
        begin
//            lvExpSend.WhereStr      :=  'MASTERKBN = 3  AND SUMKBN = 0 AND RDelKbn = 0';
            lvExpSend.MasterKbn     :=  3;             // ﾏｽﾀ区分
            lvExpSend.WhereStr      :=  'SUMKBN = 0 AND RDelKbn = 0';
        end;
// <043>↑
        lvExpSend.SortStr       :=  'Order By GCode';
        lvExpSend.TrRootCaption :=  '';
    end
    // 摘要分類
    else if ( lvCompoName = 'ETekiyouBunrui' ) then
    begin
        lvLabel                 :=  'LTekiyoubunrui';   // ﾗﾍﾞﾙ名
        lvExpSend.MasterKbn     :=  61;                 // ﾏｽﾀ区分
        lvExpSend.ModulKbn      :=  0;                  // ﾓｼﾞｭｰﾙ区分(共通=0)
        lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNo.
        lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';     // ﾂｰﾙﾊﾞｰｷｬﾌﾟｼｮﾝ
        lvExpSend.TableName     :=  'TekiMA';
        lvExpSend.WhereStr      :=  'MASTERKBN = 61 AND SUMKBN = 1 AND RDelKbn = 0';
        lvExpSend.SortStr       :=  'Order By GCode';
        lvExpSend.TrRootCaption :=  '';
    end
    // 科目分類
    else if ( Copy(lvCompoName,1,4) =  'EBun' )  then
    begin
        // <027>科目別補助分類対応↓
        if MTab_Select.Items.Selected = 1 then
            iBunruiMKbn := 490              // 科目別補助分類
        else
            iBunruiMKbn := 480;             // 科目分類
        // <027>↑
        lvLabel                 :=  'L2Bun' + Copy(lvCompoName,5,2);
//        lvExpSend.MasterKbn     :=  480+StrToInt(Copy(lvCompoName,5,2));          // <027>
        lvExpSend.MasterKbn     :=  iBunruiMKbn + StrToInt(Copy(lvCompoName,5,2));  // <027>
        lvExpSend.ModulKbn      :=  0;                  // ﾓｼﾞｭｰﾙ区分(共通=0)
        lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNo.
        lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';     // ﾂｰﾙﾊﾞｰｷｬﾌﾟｼｮﾝ
        lvExpSend.TableName     :=  'MMEISHO';
//        lvExpSend.WhereStr      :=  'SetNm = ' + IntToStr(480 + StrToInt(Copy(lvCompoName,5,2))) +    // <027>
        lvExpSend.WhereStr      :=  'SetNm = ' + IntToStr(iBunruiMKbn + StrToInt(Copy(lvCompoName,5,2))) +   // <027>
                                    ' AND RDelKbn = 0 ';
        lvExpSend.SortStr       :=  'Order By GCode';
        lvExpSend.TrRootCaption :=  '';
    end
    // 銀行
    else if ( lvCompoName = 'EBankCodeN' ) or
            ( lvCompoName = 'EBankCodeT' ) then
    begin
        //	実在/細目で銀行ｺｰﾄﾞを採用しているかどうかのﾁｪｯｸ
       	if ( MTab_Select.Items.Selected = 0 ) then	// 実在時
    	begin
            // 細目で銀行ｺｰﾄﾞを採用していた時は実在では入力不可
    		if ( BankUseCheck( SAIMOKU,FALSE ) ) then
    		begin
    			// 細目で銀行ｺｰﾄﾞを採用しています
    			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
    			MjsMsgRec.sMsg := '科目別補助'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
        		MjsMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
    			LBankName.Caption	:=	'';
//    			EBankCodeN.SetFocus;            // <037>削除
                TWinControl(Sender).SetFocus;   // <037>追加
    			Exit;
    		end;
        end
    	else if ( MTab_Select.Items.Selected = 1 ) then	// 細目時
    	begin
            // 実在で銀行ｺｰﾄﾞを採用していた時は細目では入力不可
    		if ( BankUseCheck( ZITSUZAI,FALSE ) ) then
    		begin
    			// 実在で銀行ｺｰﾄﾞを採用しています
    			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,17);
    			MjsMsgRec.sMsg := '実在'+ ComArea.m_MsgStd.MsgChange( MjsMsgRec.sMsg, '@_@', '銀行コードを' );
        		MjsMessageBoxEx(AOwner, // <005>
                                MjsMsgRec.sMsg,
                                MjsMsgRec.sTitle,
                                MjsMsgRec.icontype,
                                MjsMsgRec.btntype,
                                MjsMsgRec.btndef,
                                MJsMsgRec.LogType
                               );
    			LBankName.Caption	:=	'';
//    			EBankCodeN.SetFocus;            // <037>削除
                TWinControl(Sender).SetFocus;   // <037>追加
    			Exit;
    		end;
        end;

        lvLabel                 :=  'LBankName';        // ﾗﾍﾞﾙ名
        lvExpSend.MasterKbn     :=  21;                 // ﾏｽﾀ区分
        lvExpSend.ModulKbn      :=  0;                  // ﾓｼﾞｭｰﾙ区分(共通=0)
// <012>        lvExpSend.PatternNo     :=  0;                  // ﾊﾟﾀｰﾝNo.
        lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNo.
        lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';     // ﾂｰﾙﾊﾞｰｷｬﾌﾟｼｮﾝ
        lvExpSend.TableName     :=  'HojyoMA';
        lvExpSend.SumKbn        :=  0;
        lvExpSend.WhereStr      :=  'MASTERKBN = 21 AND SUMKBN = 0 AND RDelKbn = 0';
        lvExpSend.SortStr       :=  'Order By GCode';
        lvExpSend.TrRootCaption :=  '';
    end;


    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
        Exit;

    // 中身あり
    if ( Length(Trim(lvExpRecv.GCode)) > 0 ) then
    begin

        if ( TControl(Sender) is TMNumEdit ) then
        begin
            TMNumEdit(MJSFindCtrl(Self,lvCompoName )).Value     :=  StrToFloat(lvExpRecv.GCode);
            TMLabel  (MJSFindCtrl(Self,lvLabel))     .Caption   :=  lvExpRecv.NMK;
        end
        else if ( TControl(Sender) is TMTxtEdit ) then
        begin
            TMTxtEdit(MJSFindCtrl(Self,lvCompoName )).Text      :=  lvExpRecv.GCode;
            TMLabel  (MJSFindCtrl(Self,lvLabel))     .Caption   :=  lvExpRecv.NMK;
        end;

        // Enter ｷｰのｴﾐｭﾚｲﾄ
        keybd_event(VK_RETURN, 0, 0, 0);
		Abort;
    end;

end;

// =============================================================================
//*		Proccess	:	権限取得 <008>
// =============================================================================
procedure TJNTCRP009001f.fnGetGrants();
begin

//    m_cJNTArea.FxPermission;						// 権限取得	//<070> Del


//<070>↓
//親画面ですでに追加・変更・削除の権限をFalseにしているため、
//ここであえて処理する必要はない（後述のロジックで参照モードが確定する）
{
    if ( m_cJNTArea.IsKessan(TRUE) = 1 ) then		// 決算確定MSG
    begin
        giReferFlag	:= REFER;						// 決算確定の為参照のみ
        m_IsUpdate  := FALSE;
    end
    else
	begin
}
//<070>↑
        if m_cJNTArea.IsAppend and m_cJNTArea.IsModify then
            m_IsUpdate := TRUE
        else
            m_IsUpdate := FALSE;

		if ( m_IsUpdate ) then
	        giReferFlag	:= NORMAL					// 通常処理
		else
			giReferFlag	:= REFER;					// 更新権限無し

// <SYNC> ADD start ｸﾞﾙｰﾌﾟ会計 翌期更新処理区分の考慮
        // 参照権限の場合は以下の処理は行わない。
        if ( giReferFlag = REFER ) then
		begin
			Exit;
		end;

		// ADD start ★子会社の場合は権限なしと判断させて登録できなくする
// <063> DEL start
													// 子会社の場合
(*		if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
		begin
			m_IsUpdate := FALSE;
            giReferFlag	:= REFER;		// 参照ﾓｰﾄﾞ
		end;
*)
// <063> DEL end
		// ADD end ★

        // 全社の過年度DBを選択している場合
        if ( m_SyncMaster.m_flgGrpCorp = GRP_SYNC_PARENT ) then
        begin
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin							// 「当該会社は、ｸﾞﾙｰﾌﾟ会計の全社として設定されています。
                                            // 翌期更新済みの会社のため、ﾏｽﾀの修正は、子会社へは配信されません。
                                            // ﾏｽﾀの修正を行いますか？」
                if ( MjsMessageBoxEx(AOwner, JNTSYNC_MSG_YokukiChk_Oya,
                                        MSGCAP_GRP, mjQuestion, mjYesNo, mjDefNO) = mrYES ) then
                begin
                    // 通常のﾏｽﾀ登録として起動する。
                    // 登録したﾏｽﾀについて_RELの作成はしない。(Triggerでﾁｪｯｸを行う)
                    giReferFlag	:= NORMAL;  // 通常ﾓｰﾄﾞ
                end
                else
                begin
                    // 更新ﾎﾞﾀﾝは、入力不可の状態で起動する。
                    // ﾏｽﾀをUpdata、Insertすることはできない。
                    m_cJNTArea.Invalidity;
                    giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
                    m_IsUpdate  := false;
                end;
            end;
        end
        // 子会社(ｸﾞﾙｰﾌﾟ会計採用有)
        else if ( m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD ) then
        begin
            // 子会社が過年度DBの場合
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin							// 「当該会社は、ｸﾞﾙｰﾌﾟ会計の子会社として設定されています。
                                            // 翌期更新済みの会社のため、ﾏｽﾀの修正は、できません。
                                            // 参照のみの起動となります。」
                MjsMessageBoxEx(AOwner, JNTSYNC_MSG_YokukiChk_Ko_K,
                                    MSGCAP_GRP, mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;
                giReferFlag	:= REFER;		// 参照ﾓｰﾄﾞ
                m_IsUpdate  := false;
            end
            // 親会社が過年度DBの場合
            else if  ( m_SyncMaster.m_PEComKbn5 = 1 ) then
            begin							// 「当該会社は、ｸﾞﾙｰﾌﾟ会計の子会社として設定されています。
                                            // 全社は、翌期更新済みの会社のため、ﾏｽﾀの修正は、できません。
                                            // 参照のみの起動となります。」
                MjsMessageBoxEx(AOwner, JNTSYNC_MSG_YokukiChk_Ko_O,
                                    MSGCAP_GRP, mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;
                giReferFlag	:= REFER;		// 参照ﾓｰﾄﾞ
                m_IsUpdate  := false;
            end
            else
            begin
// <063> DEL
											// 「ｸﾞﾙｰﾌﾟ会計の子会社として採用されています。
										   	// 体系のみの修正が可能です。」
//				MjsMessageBoxEx(AOwner, MSG_GRP_CHILD_READONLY, MSGCAP_GRP, mjInformation, mjOk, mjDefOk);
            end;
        end;
// <SYNC> ADD end
//	end;	//<070>
end;


// 以下ReportBuillderのｲﾍﾞﾝﾄ各種処理

// =============================================================================
//  ppReport BeforePrint
// =============================================================================
procedure TJNTCRP009001f.BeforePrint(Sender: TObject);
begin

    PrnSupport.BeforePrint(Sender);

end;

// =============================================================================
//  細目科目 OnEndPate
// =============================================================================
procedure TJNTCRP009001f.RSaimokuEndPage(Sender: TObject);
begin
    gsT_KamokuCode	:=	'';
end;

// =============================================================================
//
// =============================================================================
procedure TJNTCRP009001f.RTaikeiListEndColumn(Sender: TObject);
begin
    gsT_GoukeiCode	:=	'';
end;

// =============================================================================
//
// =============================================================================
procedure TJNTCRP009001f.RTaikeiListEndPage(Sender: TObject);
begin
    gsT_GoukeiCode	:=	'';
end;

// =============================================================================
//
// =============================================================================
procedure TJNTCRP009001f.RTaikeiEndPage(Sender: TObject);
begin
    fnArrayClear(0,FALSE);
end;

// =============================================================================
//  実在科目 ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_JitsuSBeforeGenerate(
  Sender: TObject);
begin

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_JitsuS.LastRecord            ) or
       ( ppDetailBand_JitsuS.PageOutOfSpace = TRUE ) Then
	begin
		if ( ppDetailBand_JitsuS.OverFlow = FALSE ) then
			ppDetailBand_JitsuS.OverFlow    :=  TRUE;

		if ( ppUnderLineJS.ReprintOnOverFlow = FALSE ) then
			ppUnderLineJS.ReprintOnOverFlow :=  TRUE;

        // ﾗｲﾝの太さを太くしている
		ppUnderLineJS.Weight    :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		ppUnderLineJS.Weight    :=  0.25;
	end;

end;

// =============================================================================
//  細目科目 ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_SaimokuBeforeGenerate(
  Sender: TObject);
begin
// <030>↓
 // 科目別補助登録ﾘｽﾄのBeforeGenerate
    if MemPrint_Saimoku.FieldByName('S_CodeAttr').AsInteger = 2 then
        ppDBText48.Alignment := taLeftJustify
    else
        ppDBText48.Alignment := taRightJustify;
// <030>↑

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_Saimoku.LastRecord            ) or
       ( ppDetailBand_Saimoku.PageOutOfSpace = TRUE ) Then
	begin
		if ( ppDetailBand_Saimoku.OverFlow = FALSE ) then
			ppDetailBand_Saimoku.OverFlow   :=  TRUE;

		if ( ppUnderLineS.ReprintOnOverFlow = FALSE ) then
			ppUnderLineS.ReprintOnOverFlow  :=  TRUE;

        // ﾗｲﾝの太さを太くしている
		ppUnderLineS.Weight     :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		ppUnderLineS.Weight     :=  0.25;
	end;

end;

// =============================================================================
//  細目科目 ppDBText(ｺｰﾄﾞ) OnPrint
// =============================================================================
procedure TJNTCRP009001f.R_KmkCodePrint(Sender: TObject);
var
	sCode	:	String;
begin
    sCode	:=	R_KmkCode.Text;

	if ( gsT_KamokuCode <> sCode ) then
	begin
		R_KmkCode.Visible	:=	TRUE;
		R_KmkName.Visible	:=	TRUE;
		gsT_KamokuCode		:=	sCode;
	end
	else
	begin
		R_KmkCode.Visible	:=	FALSE;
		R_KmkName.Visible	:=	FALSE;
	end;
end;

// =============================================================================
//  合計科目 ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_GouBeforeGenerate(Sender: TObject);
begin

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_Gou.LastRecord            ) or
       ( ppDetailBand_Gou.PageOutOfSpace = TRUE ) Then
	begin
		if ( ppDetailBand_Gou.OverFlow = FALSE ) then
			ppDetailBand_Gou.OverFlow := TRUE;

		if ( ppUnderLineG.ReprintOnOverFlow = FALSE ) then
			ppUnderLineG.ReprintOnOverFlow := TRUE;

        // ﾗｲﾝの太さを太くしている
		ppUnderLineG.Weight     :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		ppUnderLineG.Weight     :=  0.25;
	end;
end;

// =============================================================================
//  実在科目加算ﾘｽﾄ ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_TaikeiBeforeGenerate(
  Sender: TObject);
begin

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_Taikei.LastRecord             ) or
       ( ppDetailBand_Taikei.PageOutOfSpace  = TRUE ) Then
	begin
		if ( ppDetailBand_Taikei.OverFlow = FALSE ) then
			ppDetailBand_Taikei.OverFlow    :=  TRUE;

		if ( ppUnderLineT.ReprintOnOverFlow = FALSE ) then
			ppUnderLineT.ReprintOnOverFlow  :=  TRUE;

        // ﾗｲﾝの太さを太くしている
		ppUnderLineT.Weight     :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		ppUnderLineT.Weight     :=  0.25;
	end;

end;

// =============================================================================
//  実在科目加算ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
// =============================================================================
procedure TJNTCRP009001f.ppDBTextCodePrint(Sender: TObject);
var
	sCode	:	String;
begin

    sCode	:=	ppDBTextCode.Text;

	if ( gsT_GoukeiCode <> sCode ) then
	begin
		ppDBTextCode.Visible		:=	TRUE;
		ppDBTextKanryaku.Visible	:=	TRUE;
		gsT_GoukeiCode	            :=	sCode;
	end
	else
	begin
		ppDBTextCode.Visible		:=	FALSE;
		ppDBTextKanryaku.Visible	:=	FALSE;
	end;

end;

// =============================================================================
//  実在科目登録ﾘｽﾄ ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_JitsuKBeforeGenerate(
  Sender: TObject);
begin

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_JitsuK.LastRecord            ) or
       ( ppDetailBand_JitsuK.PageOutOfSpace = TRUE ) Then
	begin
		if ( ppDetailBand_JitsuK.OverFlow = FALSE ) then
			ppDetailBand_JitsuK.OverFlow    :=  TRUE;

		if ( ppUnderLineJK.ReprintOnOverFlow = FALSE ) then
			ppUnderLineJK.ReprintOnOverFlow :=  TRUE;

        // ﾗｲﾝの太さを太くしている
		ppUnderLineJK.Weight    :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		ppUnderLineJK.Weight    :=  0.25;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_CodePrint(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
	swork		:	String;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('SimpleName').AsString
						,ppDBText_TR_SName.Left,ppLineTate_101.Left,siYokoLeft,siYokoWidth);

	ppLineYoko_101.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_101.Width := siYokoWidth;	//	横線のWidth

	// 改頁の時
	if ( aTaikeiSaveCode[0] = '' ) then
		bFlag := FALSE;

	// 保存ｺｰﾄﾞと違う時は表示
	if ( aTaikeiSaveCode[0] <> sCode ) then
	begin
		if ( sCode = '-1' ) then
			ppDBText_TR_Code .Visible   :=  FALSE		// ｺｰﾄﾞ
		else
			ppDBText_TR_Code .Visible   :=  TRUE;		// ｺｰﾄﾞ
		ppDBText_TR_SName.Visible       :=  TRUE;		// 簡略名称
		ppDBImage.Visible               :=  TRUE;

		// ｺｰﾄﾞ(Code01)が空白ではない時
		swork := MemPrint_Taikei.FieldByName('Code01').AsString;

		if ( swork <> '') then
		begin
			// 最大登録NOの科目ｺｰﾄﾞではない時
			if ( MemPrint_Taikei.FieldByName('MaxEnt01').AsString <> '*' ) then
			begin
				// ┬型の表示
				ppLineTate_101.Visible  :=  FALSE;
				ppLineTate_102.Visible  :=  TRUE;
				ppLineYoko_101.Visible  :=  TRUE;
				ppLineYoko_102.Visible  :=  TRUE;
			end
			// 最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				// 非表示
				ppLineTate_101.Visible  :=  FALSE;
				ppLineTate_102.Visible  :=  FALSE;
				ppLineYoko_101.Visible  :=  TRUE;
				ppLineYoko_102.Visible  :=  TRUE;
			end;
		end
		//	ｺｰﾄﾞ(Code01)が空白の時
		else
		begin
			//	非表示
			ppLineTate_101.Visible  :=  FALSE;
			ppLineTate_102.Visible  :=  FALSE;
			ppLineYoko_101.Visible  :=  FALSE;
			ppLineYoko_102.Visible  :=  FALSE;
		end;

		aSaveFlag[1] := FALSE;			// 退避ﾌﾗｸﾞをFALSE
		fnArrayClear(0,FALSE);			// 退避配列をClear
		aTaikeiSaveCode[0] := sCode;	// ｺｰﾄﾞを退避
	end
	// 保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_Code .Visible   :=  FALSE;		// ｺｰﾄﾞ
		ppDBText_TR_SName.Visible   :=  FALSE;		// 簡略名称
		ppDBImage.Visible           :=  FALSE;

		sCode := MemPrint_Taikei.FieldByName('Code01').AsString;
		// ｺｰﾄﾞ(Code01)が空白の時
		if ( sCode = '' ) then
		begin
			//	非表示
			ppLineTate_101.Visible  :=  FALSE;
			ppLineTate_102.Visible  :=  FALSE;
			ppLineYoko_101.Visible  :=  FALSE;
			ppLineYoko_102.Visible  :=  FALSE;
		end
		//	保存ｺｰﾄﾞと違う時は表示
		else if ( aTaikeiSaveCode[1] <> sCode ) then
		begin
			//	ｺｰﾄﾞ(Code01)が空白ではない時
			if ( sCode <> '' ) then
			begin
				// 最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				// (SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if ( MemPrint_Taikei.FieldByName('MaxEnt01').AsString = '*' ) and
                   ( aSaveFlag[1] = FALSE ) then
				begin
					// └型の表示
					ppLineTate_101.Visible  :=  TRUE;
					ppLineTate_102.Visible  :=  FALSE;
					ppLineYoko_101.Visible  :=  FALSE;
					ppLineYoko_102.Visible  :=  TRUE;
					aSaveFlag[1]            :=  TRUE;
				end
				else
				begin
					// 改頁の時
					if ( bFlag = FALSE ) then
					begin
						// ┬型の表示
						ppLineTate_101.Visible  :=  FALSE;
						ppLineTate_102.Visible  :=  TRUE;
						ppLineYoko_101.Visible  :=  TRUE;
						ppLineYoko_102.Visible  :=  TRUE;
					end
					// 改頁ではない時
					else
					begin
						// ├型の表示
						ppLineTate_101.Visible  :=  TRUE;
						ppLineTate_102.Visible  :=  TRUE;
						ppLineYoko_101.Visible  :=  FALSE;
						ppLineYoko_102.Visible  :=  TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞ(Code01)が空白の時
			else
			begin
				//	非表示
				ppLineTate_101.Visible  :=  FALSE;
				ppLineTate_102.Visible  :=  FALSE;
				ppLineYoko_101.Visible  :=  FALSE;
				ppLineYoko_102.Visible  :=  FALSE;
			end;
		end
		else
		begin
			// 最大登録NOの科目ｺｰﾄﾞの時
			if ( MemPrint_Taikei.FieldByName('MaxEnt01').AsString = '*' ) then
			begin
				//	非表示
				ppLineTate_101.Visible  :=  FALSE;
				ppLineTate_102.Visible  :=  FALSE;
				ppLineYoko_101.Visible  :=  FALSE;
				ppLineYoko_102.Visible  :=  FALSE;
			end
			// 最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				// │型の表示
				ppLineTate_101.Visible  :=  TRUE;
				ppLineTate_102.Visible  :=  TRUE;
				ppLineYoko_101.Visible  :=  FALSE;
				ppLineYoko_102.Visible  :=  FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(01)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn01Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code01').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name01').AsString
						,ppDBText_TR_Name01.Left,ppLineTate_201.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_201.Left	 := siYokoLeft;	//	横線のLeft
	ppLineYoko_201.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if ( aTaikeiSaveCode[0] = '' ) then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if ( aTaikeiSaveCode[1] <> sCode ) then
	begin
		ppDBText_TR_AddKbn01.Visible := TRUE;	//	加算減算区分
		ppDBImage_01		.Visible := TRUE;
		ppDBText_TR_Code01	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name01	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code02').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if ( MemPrint_Taikei.FieldByName('MaxEnt02').AsString <> '*' ) then
			begin
				//	┬型の表示
				ppLineTate_201.Visible := FALSE;
				ppLineTate_202.Visible := TRUE;
				ppLineYoko_201.Visible := TRUE;
				ppLineYoko_202.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_201.Visible := FALSE;
				ppLineTate_202.Visible := FALSE;
				ppLineYoko_201.Visible := TRUE;
				ppLineYoko_202.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_201.Visible := FALSE;
			ppLineTate_202.Visible := FALSE;
			ppLineYoko_201.Visible := FALSE;
			ppLineYoko_202.Visible := FALSE;
		end;

		aSaveFlag[2] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(1,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[1] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn01.Visible := FALSE;	//	加算減算区分
		ppDBImage_01		.Visible := FALSE;
		ppDBText_TR_Code01	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name01	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code02').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_201.Visible := FALSE;
			ppLineTate_202.Visible := FALSE;
			ppLineYoko_201.Visible := FALSE;
			ppLineYoko_202.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[2] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt02').AsString = '*') and (aSaveFlag[2] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_201.Visible := TRUE;
					ppLineTate_202.Visible := FALSE;
					ppLineYoko_201.Visible := FALSE;
					ppLineYoko_202.Visible := TRUE;
					aSaveFlag[2] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_201.Visible := FALSE;
						ppLineTate_202.Visible := TRUE;
						ppLineYoko_201.Visible := TRUE;
						ppLineYoko_202.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_201.Visible := TRUE;
						ppLineTate_202.Visible := TRUE;
						ppLineYoko_201.Visible := FALSE;
						ppLineYoko_202.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_201.Visible := FALSE;
				ppLineTate_202.Visible := FALSE;
				ppLineYoko_201.Visible := FALSE;
				ppLineYoko_202.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt02').AsString = '*') then
			begin
				//	非表示
				ppLineTate_201.Visible := FALSE;
				ppLineTate_202.Visible := FALSE;
				ppLineYoko_201.Visible := FALSE;
				ppLineYoko_202.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_201.Visible := TRUE;
				ppLineTate_202.Visible := TRUE;
				ppLineYoko_201.Visible := FALSE;
				ppLineYoko_202.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(02)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn02Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag   :=  TRUE;
	sCode   :=  MemPrint_Taikei.FieldByName('Code02').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name02').AsString
						,ppDBText_TR_Name02.Left,ppLineTate_301.Left,siYokoLeft,siYokoWidth);

	ppLineYoko_301.Left     :=  siYokoLeft;	//	横線のLeft
	ppLineYoko_301.Width    :=  siYokoWidth;	//	横線のWidth

	// 改頁の時
	if ( aTaikeiSaveCode[0] = '' ) then
		bFlag := FALSE;

	// 保存ｺｰﾄﾞと違う時は表示
	if ( aTaikeiSaveCode[2] <> sCode ) then
	begin
		ppDBText_TR_AddKbn02.Visible := TRUE;	//	加算減算区分
		ppDBImage_02		.Visible := TRUE;
		ppDBText_TR_Code02	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name02	.Visible := TRUE;	//	簡略名称

		// ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code03').AsString <> '' ) then
		begin
			// 最大登録NOの科目ｺｰﾄﾞではない時
			if ( MemPrint_Taikei.FieldByName('MaxEnt03').AsString <> '*' ) then
			begin
				//	┬型の表示
				ppLineTate_301.Visible := FALSE;
				ppLineTate_302.Visible := TRUE;
				ppLineYoko_301.Visible := TRUE;
				ppLineYoko_302.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_301.Visible := FALSE;
				ppLineTate_302.Visible := FALSE;
				ppLineYoko_301.Visible := TRUE;
				ppLineYoko_302.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_301.Visible := FALSE;
			ppLineTate_302.Visible := FALSE;
			ppLineYoko_301.Visible := FALSE;
			ppLineYoko_302.Visible := FALSE;
		end;

		aSaveFlag[3]        :=  FALSE;	// 退避ﾌﾗｸﾞをFALSE
		fnArrayClear(2,FALSE);		    // 退避配列をClear
		aTaikeiSaveCode[2]  :=  sCode;	// ｺｰﾄﾞを退避
	end
	// 保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn02.Visible := FALSE;	// 加算減算区分
		ppDBImage_02		.Visible := FALSE;
		ppDBText_TR_Code02	.Visible := FALSE;	// ｺｰﾄﾞ
		ppDBText_TR_Name02	.Visible := FALSE;	// 簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code03').AsString;

		// ｺｰﾄﾞが空白の時
		if ( sCode = '' ) then
		begin
			//	非表示
			ppLineTate_301.Visible := FALSE;
			ppLineTate_302.Visible := FALSE;
			ppLineYoko_301.Visible := FALSE;
			ppLineYoko_302.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if ( aTaikeiSaveCode[3] <> sCode ) then
		begin
			// ｺｰﾄﾞが空白ではない時
			if ( sCode <> '' ) then
			begin
				// 最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				// (SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if ( MemPrint_Taikei.FieldByName('MaxEnt03').AsString = '*' ) and
                   ( aSaveFlag[3] = FALSE ) then
				begin
					// └型の表示
					ppLineTate_301.Visible := TRUE;
					ppLineTate_302.Visible := FALSE;
					ppLineYoko_301.Visible := FALSE;
					ppLineYoko_302.Visible := TRUE;
					aSaveFlag[3] := TRUE;
				end
				else
				begin
					// 改頁の時
					if ( bFlag = FALSE ) then
					begin
						// ┬型の表示
						ppLineTate_301.Visible := FALSE;
						ppLineTate_302.Visible := TRUE;
						ppLineYoko_301.Visible := TRUE;
						ppLineYoko_302.Visible := TRUE;
					end
					// 改頁ではない時
					else
					begin
						// ├型の表示
						ppLineTate_301.Visible := TRUE;
						ppLineTate_302.Visible := TRUE;
						ppLineYoko_301.Visible := FALSE;
						ppLineYoko_302.Visible := TRUE;
					end;
				end;
			end
			// ｺｰﾄﾞが空白の時
			else
			begin
				// 非表示
				ppLineTate_301.Visible := FALSE;
				ppLineTate_302.Visible := FALSE;
				ppLineYoko_301.Visible := FALSE;
				ppLineYoko_302.Visible := FALSE;
			end;
		end
		else
		begin
			// 最大登録NOの科目ｺｰﾄﾞの時
			if ( MemPrint_Taikei.FieldByName('MaxEnt03').AsString = '*' ) then
			begin
				// 非表示
				ppLineTate_301.Visible := FALSE;
				ppLineTate_302.Visible := FALSE;
				ppLineYoko_301.Visible := FALSE;
				ppLineYoko_302.Visible := FALSE;
			end
			// 最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				// │型の表示
				ppLineTate_301.Visible := TRUE;
				ppLineTate_302.Visible := TRUE;
				ppLineYoko_301.Visible := FALSE;
				ppLineYoko_302.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(03)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn03Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code03').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name03').AsString
						,ppDBText_TR_Name03.Left,ppLineTate_401.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_401.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_401.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if (aTaikeiSaveCode[0] = '') then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[3] <> sCode then
	begin
		ppDBText_TR_AddKbn03.Visible := TRUE;	//	加算減算区分
		ppDBImage_03		.Visible := TRUE;
		ppDBText_TR_Code03	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name03	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code04').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if (MemPrint_Taikei.FieldByName('MaxEnt04').AsString <> '*') then
			begin
				//	┬型の表示
				ppLineTate_401.Visible := FALSE;
				ppLineTate_402.Visible := TRUE;
				ppLineYoko_401.Visible := TRUE;
				ppLineYoko_402.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_401.Visible := FALSE;
				ppLineTate_402.Visible := FALSE;
				ppLineYoko_401.Visible := TRUE;
				ppLineYoko_402.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_401.Visible := FALSE;
			ppLineTate_402.Visible := FALSE;
			ppLineYoko_401.Visible := FALSE;
			ppLineYoko_402.Visible := FALSE;
		end;

		aSaveFlag[4] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(3,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[3] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn03.Visible := FALSE;	//	加算減算区分
		ppDBImage_03		.Visible := FALSE;
		ppDBText_TR_Code03	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name03	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code04').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_401.Visible := FALSE;
			ppLineTate_402.Visible := FALSE;
			ppLineYoko_401.Visible := FALSE;
			ppLineYoko_402.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[4] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt04').AsString = '*') and (aSaveFlag[4] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_401.Visible := TRUE;
					ppLineTate_402.Visible := FALSE;
					ppLineYoko_401.Visible := FALSE;
					ppLineYoko_402.Visible := TRUE;
					aSaveFlag[4] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_401.Visible := FALSE;
						ppLineTate_402.Visible := TRUE;
						ppLineYoko_401.Visible := TRUE;
						ppLineYoko_402.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_401.Visible := TRUE;
						ppLineTate_402.Visible := TRUE;
						ppLineYoko_401.Visible := FALSE;
						ppLineYoko_402.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_401.Visible := FALSE;
				ppLineTate_402.Visible := FALSE;
				ppLineYoko_401.Visible := FALSE;
				ppLineYoko_402.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt04').AsString = '*') then
			begin
				//	非表示
				ppLineTate_401.Visible := FALSE;
				ppLineTate_402.Visible := FALSE;
				ppLineYoko_401.Visible := FALSE;
				ppLineYoko_402.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_401.Visible := TRUE;
				ppLineTate_402.Visible := TRUE;
				ppLineYoko_401.Visible := FALSE;
				ppLineYoko_402.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(04)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn04Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code04').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name04').AsString
						,ppDBText_TR_Name04.Left,ppLineTate_501.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_501.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_501.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if (aTaikeiSaveCode[0] = '') then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[4] <> sCode then
	begin
		ppDBText_TR_AddKbn04.Visible := TRUE;	//	加算減算区分
		ppDBImage_04		.Visible := TRUE;
		ppDBText_TR_Code04	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name04	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code05').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if (MemPrint_Taikei.FieldByName('MaxEnt05').AsString <> '*') then
			begin
				//	┬型の表示
				ppLineTate_501.Visible := FALSE;
				ppLineTate_502.Visible := TRUE;
				ppLineYoko_501.Visible := TRUE;
				ppLineYoko_502.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_501.Visible := FALSE;
				ppLineTate_502.Visible := FALSE;
				ppLineYoko_501.Visible := TRUE;
				ppLineYoko_502.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_501.Visible := FALSE;
			ppLineTate_502.Visible := FALSE;
			ppLineYoko_501.Visible := FALSE;
			ppLineYoko_502.Visible := FALSE;
		end;

		aSaveFlag[5] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(4,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[4] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn04.Visible := FALSE;	//	加算減算区分
		ppDBImage_04		.Visible := FALSE;
		ppDBText_TR_Code04	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name04	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code05').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_501.Visible := FALSE;
			ppLineTate_502.Visible := FALSE;
			ppLineYoko_501.Visible := FALSE;
			ppLineYoko_502.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[5] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt05').AsString = '*') and (aSaveFlag[5] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_501.Visible := TRUE;
					ppLineTate_502.Visible := FALSE;
					ppLineYoko_501.Visible := FALSE;
					ppLineYoko_502.Visible := TRUE;
					aSaveFlag[5] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_501.Visible := FALSE;
						ppLineTate_502.Visible := TRUE;
						ppLineYoko_501.Visible := TRUE;
						ppLineYoko_502.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_501.Visible := TRUE;
						ppLineTate_502.Visible := TRUE;
						ppLineYoko_501.Visible := FALSE;
						ppLineYoko_502.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_501.Visible := FALSE;
				ppLineTate_502.Visible := FALSE;
				ppLineYoko_501.Visible := FALSE;
				ppLineYoko_502.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt05').AsString = '*') then
			begin
				//	非表示
				ppLineTate_501.Visible := FALSE;
				ppLineTate_502.Visible := FALSE;
				ppLineYoko_501.Visible := FALSE;
				ppLineYoko_502.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_501.Visible := TRUE;
				ppLineTate_502.Visible := TRUE;
				ppLineYoko_501.Visible := FALSE;
				ppLineYoko_502.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(05)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn05Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code05').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name05').AsString
						,ppDBText_TR_Name05.Left,ppLineTate_601.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_601.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_601.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if (aTaikeiSaveCode[0] = '') then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[5] <> sCode then
	begin
		ppDBText_TR_AddKbn05.Visible := TRUE;	//	加算減算区分
		ppDBImage_05		.Visible := TRUE;
		ppDBText_TR_Code05	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name05	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code06').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if (MemPrint_Taikei.FieldByName('MaxEnt06').AsString <> '*') then
			begin
				//	┬型の表示
				ppLineTate_601.Visible := FALSE;
				ppLineTate_602.Visible := TRUE;
				ppLineYoko_601.Visible := TRUE;
				ppLineYoko_602.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_601.Visible := FALSE;
				ppLineTate_602.Visible := FALSE;
				ppLineYoko_601.Visible := TRUE;
				ppLineYoko_602.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_601.Visible := FALSE;
			ppLineTate_602.Visible := FALSE;
			ppLineYoko_601.Visible := FALSE;
			ppLineYoko_602.Visible := FALSE;
		end;

		aSaveFlag[6] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(5,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[5] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn05.Visible := FALSE;	//	加算減算区分
		ppDBImage_05		.Visible := FALSE;
		ppDBText_TR_Code05	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name05	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code06').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_601.Visible := FALSE;
			ppLineTate_602.Visible := FALSE;
			ppLineYoko_601.Visible := FALSE;
			ppLineYoko_602.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[6] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt06').AsString = '*') and (aSaveFlag[6] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_601.Visible := TRUE;
					ppLineTate_602.Visible := FALSE;
					ppLineYoko_601.Visible := FALSE;
					ppLineYoko_602.Visible := TRUE;
					aSaveFlag[6] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_601.Visible := FALSE;
						ppLineTate_602.Visible := TRUE;
						ppLineYoko_601.Visible := TRUE;
						ppLineYoko_602.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_601.Visible := TRUE;
						ppLineTate_602.Visible := TRUE;
						ppLineYoko_601.Visible := FALSE;
						ppLineYoko_602.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_601.Visible := FALSE;
				ppLineTate_602.Visible := FALSE;
				ppLineYoko_601.Visible := FALSE;
				ppLineYoko_602.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt06').AsString = '*') then
			begin
				//	非表示
				ppLineTate_601.Visible := FALSE;
				ppLineTate_602.Visible := FALSE;
				ppLineYoko_601.Visible := FALSE;
				ppLineYoko_602.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_601.Visible := TRUE;
				ppLineTate_602.Visible := TRUE;
				ppLineYoko_601.Visible := FALSE;
				ppLineYoko_602.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(06)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn06Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code06').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name06').AsString
						,ppDBText_TR_Name06.Left,ppLineTate_701.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_701.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_701.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if (aTaikeiSaveCode[0] = '') then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[6] <> sCode then
	begin
		ppDBText_TR_AddKbn06.Visible := TRUE;	//	加算減算区分
		ppDBImage_06		.Visible := TRUE;
		ppDBText_TR_Code06	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name06	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code07').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if (MemPrint_Taikei.FieldByName('MaxEnt07').AsString <> '*') then
			begin
				//	┬型の表示
				ppLineTate_701.Visible := FALSE;
				ppLineTate_702.Visible := TRUE;
				ppLineYoko_701.Visible := TRUE;
				ppLineYoko_702.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_701.Visible := FALSE;
				ppLineTate_702.Visible := FALSE;
				ppLineYoko_701.Visible := TRUE;
				ppLineYoko_702.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_701.Visible := FALSE;
			ppLineTate_702.Visible := FALSE;
			ppLineYoko_701.Visible := FALSE;
			ppLineYoko_702.Visible := FALSE;
		end;

		aSaveFlag[7] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(6,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[6] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn06.Visible := FALSE;	//	加算減算区分
		ppDBImage_06		.Visible := FALSE;
		ppDBText_TR_Code06	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name06	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code07').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_701.Visible := FALSE;
			ppLineTate_702.Visible := FALSE;
			ppLineYoko_701.Visible := FALSE;
			ppLineYoko_702.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[7] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt07').AsString = '*') and (aSaveFlag[7] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_701.Visible := TRUE;
					ppLineTate_702.Visible := FALSE;
					ppLineYoko_701.Visible := FALSE;
					ppLineYoko_702.Visible := TRUE;
					aSaveFlag[7] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_701.Visible := FALSE;
						ppLineTate_702.Visible := TRUE;
						ppLineYoko_701.Visible := TRUE;
						ppLineYoko_702.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_701.Visible := TRUE;
						ppLineTate_702.Visible := TRUE;
						ppLineYoko_701.Visible := FALSE;
						ppLineYoko_702.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_701.Visible := FALSE;
				ppLineTate_702.Visible := FALSE;
				ppLineYoko_701.Visible := FALSE;
				ppLineYoko_702.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt07').AsString = '*') then
			begin
				//	非表示
				ppLineTate_701.Visible := FALSE;
				ppLineTate_702.Visible := FALSE;
				ppLineYoko_701.Visible := FALSE;
				ppLineYoko_702.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_701.Visible := TRUE;
				ppLineTate_702.Visible := TRUE;
				ppLineYoko_701.Visible := FALSE;
				ppLineYoko_702.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(07)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn07Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code07').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name07').AsString
						,ppDBText_TR_Name07.Left,ppLineTate_801.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_801.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_801.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if (aTaikeiSaveCode[0] = '') then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[7] <> sCode then
	begin
		ppDBText_TR_AddKbn07.Visible := TRUE;	//	加算減算区分
		ppDBImage_07		.Visible := TRUE;
		ppDBText_TR_Code07	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name07	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code08').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if (MemPrint_Taikei.FieldByName('MaxEnt08').AsString <> '*') then
			begin
				//	┬型の表示
				ppLineTate_801.Visible := FALSE;
				ppLineTate_802.Visible := TRUE;
				ppLineYoko_801.Visible := TRUE;
				ppLineYoko_802.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_801.Visible := FALSE;
				ppLineTate_802.Visible := FALSE;
				ppLineYoko_801.Visible := TRUE;
				ppLineYoko_802.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_801.Visible := FALSE;
			ppLineTate_802.Visible := FALSE;
			ppLineYoko_801.Visible := FALSE;
			ppLineYoko_802.Visible := FALSE;
		end;

		aSaveFlag[8] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(7,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[7] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn07.Visible := FALSE;	//	加算減算区分
		ppDBImage_07		.Visible := FALSE;
		ppDBText_TR_Code07	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name07	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code08').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_801.Visible := FALSE;
			ppLineTate_802.Visible := FALSE;
			ppLineYoko_801.Visible := FALSE;
			ppLineYoko_802.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[8] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt08').AsString = '*') and (aSaveFlag[8] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_801.Visible := TRUE;
					ppLineTate_802.Visible := FALSE;
					ppLineYoko_801.Visible := FALSE;
					ppLineYoko_802.Visible := TRUE;
					aSaveFlag[8] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_801.Visible := FALSE;
						ppLineTate_802.Visible := TRUE;
						ppLineYoko_801.Visible := TRUE;
						ppLineYoko_802.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_801.Visible := TRUE;
						ppLineTate_802.Visible := TRUE;
						ppLineYoko_801.Visible := FALSE;
						ppLineYoko_802.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_801.Visible := FALSE;
				ppLineTate_802.Visible := FALSE;
				ppLineYoko_801.Visible := FALSE;
				ppLineYoko_802.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt08').AsString = '*') then
			begin
				//	非表示
				ppLineTate_801.Visible := FALSE;
				ppLineTate_802.Visible := FALSE;
				ppLineYoko_801.Visible := FALSE;
				ppLineYoko_802.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_801.Visible := TRUE;
				ppLineTate_802.Visible := TRUE;
				ppLineYoko_801.Visible := FALSE;
				ppLineYoko_802.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(08)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn08Print(Sender: TObject);
var
	sCode		:	String;
	bFlag		:	Boolean;
	siYokoLeft	:	Single;
	siYokoWidth	:	Single;
begin

    siYokoLeft  := 0;
	siYokoWidth := 0;

	bFlag := TRUE;
	sCode := MemPrint_Taikei.FieldByName('Code08').AsString;

	//	Lineの移動処理
	fnGetLinePosition(MemPrint_Taikei.FieldByName('Name08').AsString
						,ppDBText_TR_Name08.Left,ppLineTate_901.Left,siYokoLeft,siYokoWidth);
	ppLineYoko_901.Left	 := siYokoLeft;		//	横線のLeft
	ppLineYoko_901.Width := siYokoWidth;	//	横線のWidth

	//	改頁の時
	if (aTaikeiSaveCode[0] = '') then
		bFlag := FALSE;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[8] <> sCode then
	begin
		ppDBText_TR_AddKbn08.Visible := TRUE;	//	加算減算区分
		ppDBImage_08		.Visible := TRUE;
		ppDBText_TR_Code08	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name08	.Visible := TRUE;	//	簡略名称

		//	ｺｰﾄﾞが空白ではない時
		if ( MemPrint_Taikei.FieldByName('Code09').AsString <> '') then
		begin
			//	最大登録NOの科目ｺｰﾄﾞではない時
			if (MemPrint_Taikei.FieldByName('MaxEnt09').AsString <> '*') then
			begin
				//	┬型の表示
				ppLineTate_901.Visible := FALSE;
				ppLineTate_902.Visible := TRUE;
				ppLineYoko_901.Visible := TRUE;
				ppLineYoko_902.Visible := TRUE;
			end
			//	最大登録NOの科目ｺｰﾄﾞの時
			else
			begin
				//	─型の表示
				ppLineTate_901.Visible := FALSE;
				ppLineTate_902.Visible := FALSE;
				ppLineYoko_901.Visible := TRUE;
				ppLineYoko_902.Visible := TRUE;
			end;
		end
		//	ｺｰﾄﾞが空白の時
		else
		begin
			//	非表示
			ppLineTate_901.Visible := FALSE;
			ppLineTate_902.Visible := FALSE;
			ppLineYoko_901.Visible := FALSE;
			ppLineYoko_902.Visible := FALSE;
		end;

		aSaveFlag[9] := FALSE;			//	退避ﾌﾗｸﾞをFALSE
		fnArrayClear(8,FALSE);			//	退避配列をClear
		aTaikeiSaveCode[8] := sCode;	//	ｺｰﾄﾞを退避
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn08.Visible := FALSE;	//	加算減算区分
		ppDBImage_08		.Visible := FALSE;
		ppDBText_TR_Code08	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name08	.Visible := FALSE;	//	簡略名称

		sCode := MemPrint_Taikei.FieldByName('Code09').AsString;
		//	ｺｰﾄﾞが空白の時
		if (sCode = '') then
		begin
			//	非表示
			ppLineTate_901.Visible := FALSE;
			ppLineTate_902.Visible := FALSE;
			ppLineYoko_901.Visible := FALSE;
			ppLineYoko_902.Visible := FALSE;
        end
		//	保存ｺｰﾄﾞと違う時は表示
		else if aTaikeiSaveCode[9] <> sCode then
		begin
			//	ｺｰﾄﾞが空白ではない時
			if (sCode <> '') then
			begin
				//	最大登録NOの科目ｺｰﾄﾞの時でかつｾｰﾌﾞﾌﾗｸﾞがFALSEの時
				//	(SaveFlagは最後の科目表示後線を表示しない様にする為に使用)
				if (MemPrint_Taikei.FieldByName('MaxEnt09').AsString = '*') and (aSaveFlag[9] = FALSE) then
				begin
					//	└型の表示
					ppLineTate_901.Visible := TRUE;
					ppLineTate_902.Visible := FALSE;
					ppLineYoko_901.Visible := FALSE;
					ppLineYoko_902.Visible := TRUE;
					aSaveFlag[9] := TRUE;
				end
				else
				begin
					//	改頁の時
					if (bFlag = FALSE) then
					begin
						//	┬型の表示
						ppLineTate_901.Visible := FALSE;
						ppLineTate_902.Visible := TRUE;
						ppLineYoko_901.Visible := TRUE;
						ppLineYoko_902.Visible := TRUE;
					end
					//	改頁ではない時
					else
					begin
						//	├型の表示
						ppLineTate_901.Visible := TRUE;
						ppLineTate_902.Visible := TRUE;
						ppLineYoko_901.Visible := FALSE;
						ppLineYoko_902.Visible := TRUE;
					end;
				end;
			end
			//	ｺｰﾄﾞが空白の時
			else
			begin
				//	非表示
				ppLineTate_901.Visible := FALSE;
				ppLineTate_902.Visible := FALSE;
				ppLineYoko_901.Visible := FALSE;
				ppLineYoko_902.Visible := FALSE;
			end;
		end
		else
		begin
			//	最大登録NOの科目ｺｰﾄﾞの時
			if (MemPrint_Taikei.FieldByName('MaxEnt09').AsString = '*') then
			begin
				//	非表示
				ppLineTate_901.Visible := FALSE;
				ppLineTate_902.Visible := FALSE;
				ppLineYoko_901.Visible := FALSE;
				ppLineYoko_902.Visible := FALSE;
			end
			//	最大登録NOの科目ｺｰﾄﾞではない時
			else
			begin
				//	│型の表示
				ppLineTate_901.Visible := TRUE;
				ppLineTate_902.Visible := TRUE;
				ppLineYoko_901.Visible := FALSE;
				ppLineYoko_902.Visible := FALSE;
			end;
		end;
	end;

end;

// =============================================================================
//  科目体系登録ﾘｽﾄ ppDBText(ｺｰﾄﾞ) OnPrint
//  科目加算ﾘｽﾄ印刷時の同一名表示制御(09)
// =============================================================================
procedure TJNTCRP009001f.ppDBText_TR_AddKbn09Print(Sender: TObject);
var
	sCode		:	String;
	pOverRec	:	POverCodeRec;
	iLoop		:	Integer;
	iCode		:	Integer;
begin

    sCode := MemPrint_Taikei.FieldByName('Code09').AsString;

	//	保存ｺｰﾄﾞと違う時は表示
	if aTaikeiSaveCode[9] <> sCode then
	begin
		ppDBText_TR_AddKbn09.Visible := TRUE;	//	加算減算区分
		ppDBImage_09		.Visible := TRUE;
		ppDBText_TR_Code09	.Visible := TRUE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name09	.Visible := TRUE;	//	簡略名称
		fnArrayClear(9,FALSE);
		aTaikeiSaveCode[9] := sCode;
	end
	//	保存ｺｰﾄﾞと同一の時は非表示
	else
	begin
		ppDBText_TR_AddKbn09.Visible := FALSE;	//	加算減算区分
		ppDBImage_09		.Visible := FALSE;
		ppDBText_TR_Code09	.Visible := FALSE;	//	ｺｰﾄﾞ
		ppDBText_TR_Name09	.Visible := FALSE;	//	簡略名称
	end;

	//	ｺｰﾄﾞが空白でなく、実在/合計区分が合計の時
	if (sCode <> '') and (MemPrint_Taikei.FieldByName('SumKbn09').AsInteger = 1) then
    begin
		iCode := StrToInt(sCode);
		for iLoop := 0 to m_OverCodeList2.Count-1 do
		begin
			pOverRec := m_OverCodeList2.Items[iLoop];
			if (iCode = pOverRec^.KmkCode) and (pOverRec^.SumKbn = 1) then
				ppLabel29.Visible := TRUE;
		end;
	end
	else
		ppLabel29.Visible := FALSE;
        
end;

// =============================================================================
//  実在科目ｺｰﾄﾞ一覧 ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_IchiBeforeGenerate(Sender: TObject);
begin

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_Ichi.LastRecord ) or
       ( ppDetailBand_Ichi.PageOutOfSpace = TRUE ) Then
	begin
		if ( ppDetailBand_Ichi.OverFlow = FALSE ) then
			ppDetailBand_Ichi.OverFlow          :=  TRUE;

		if ( UnderLine_Ichi.ReprintOnOverFlow = FALSE ) then
			UnderLine_Ichi.ReprintOnOverFlow    :=  TRUE;

        // ﾗｲﾝの太さを太くしている
		UnderLine_Ichi.Weight   :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		UnderLine_Ichi.Weight   :=  0.25;
	end;

end;

// =============================================================================
//  変動損益関係ﾘｽﾄ ppDetailBand BeforeGenerate
// =============================================================================
procedure TJNTCRP009001f.ppDetailBand_HendoBeforeGenerate(Sender: TObject);
begin

    // 最終ﾚｺｰﾄﾞ、頁の最下行を判定する関数の追加
	if ( ppDetailBand_Hendo.LastRecord ) or
       ( ppDetailBand_Hendo.PageOutOfSpace = TRUE ) Then
	begin
		if ( ppDetailBand_Hendo.OverFlow = FALSE ) then
			ppDetailBand_Hendo.OverFlow         :=  TRUE;

		if ( UnderLine_Hendo.ReprintOnOverFlow = FALSE ) then
			UnderLine_Hendo.ReprintOnOverFlow   :=  TRUE;

        // ﾗｲﾝの太さを太くしている
		UnderLine_Hendo.Weight  :=  0.75;
	end
	else
	begin
        // ﾗｲﾝの太さを元にもどす
		UnderLine_Hendo.Weight  :=  0.25;
	end;

end;

// <035>
//**********************************************************************
//*		Proccess	:	ｸﾞﾘｯﾄﾞの科目別補助ｺｰﾄﾞ属性変更
//*		Name		:	K.Katou
//*		Date		:	2005/10/25
//*		Parameter	:	exNCode : 科目内部ｺｰﾄﾞ
//*		Return		:   なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP009001f.ChangeCodeAttr(exNCode: Extended);
var
    Query   : TMQuery;
begin
    Query := TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, Query);

    try
        with Query do
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT                     '
                +   '    CodeAttr               '
                +   '   ,CodeDigit              '
                +   'FROM KMKMA                 '
                +   'WHERE MasterKbn = 1        '   //	ﾏｽﾀ区分(1:勘定科目)
                +   '  AND SumKbn    = 0        '	//	実在/合計区分(0:実在)
                +   '  AND NCode     = :ExNCode '	//	内部ｺｰﾄﾞ
                +   '  AND CNCode    = 0        ');	//	科目別補助内部ｺｰﾄﾞ

            ParamByName('ExNCode').AsFloat  :=	exNCode;

            //	ｴﾗｰの判定
            if ( Open = FALSE ) then
            begin
                ErrorMessageDsp(Query);
                Query.Close;
                Query.Free;
                Exit;
            end;

            if ( EOF <> TRUE ) then
            begin
                wkKmk.SaimokuKeta   :=  GetFld('CodeDigit').AsInteger;
                wkKmk.SaimokukZoku  :=  GetFld('CodeAttr').AsInteger;

                case wkKmk.SaimokukZoku of
                  0,1:
                  begin
                    DSaimokuGridSCode.MaxLength     :=  wkKmk.SaimokuKeta;
                    DSaimokuGridSCode.Alignment     :=  taRightJustify;
                    DSaimokuGridSCode.EditAlignment :=  taRightJustify;
                  end;
                  2:
                  begin
                    DSaimokuGridSCode.MaxLength     :=  wkKmk.SaimokuKeta;
                    DSaimokuGridSCode.Alignment     :=  taLeftJustify;
                    DSaimokuGridSCode.EditAlignment :=  taLeftJustify;
                  end;
                end;
            end;
        end;

    finally
        Query.Close;
        Query.Free;
    end;

end;

// <049>
//**********************************************************************
//*		Proccess	:	2byte文字の1byte目で終わる文字列を整形
//*		Name		:	K.Katou
//*		Date		:	2006/01/26
//*		Parameter	:	strBefore   : 整形前文字列
//*                 :   iByteCnt    : 返したいbyte数
//*		Return		:   String      : 整形後文字列
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.CutLeadByte(strBefore: String; iByteCnt: Integer): String;
var
    strAfter    : String;
begin
    strAfter := strBefore;

    if MJSHanLength(strBefore) > iByteCnt then    // 最大文字数を超えたら
    begin
                                            // 最後になる文字が全角文字の1byte目かﾁｪｯｸ
                                            // 1byte目だったら取り除く
        if MJSHanByteType(strBefore, iByteCnt) = mbLeadByte then
            strAfter := MJSHanCopy(strBefore, 1, iByteCnt - 1)
        else                                // それ以外なら取り込む
            strAfter := MJSHanCopy(strBefore, 1, iByteCnt);
    end;

    Result := strAfter;

end;

// <CHK>
//**********************************************************************
//*		Proccess	:	削除ﾁｪｯｸ
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2006/02/13
//*		Parameter	:	exNCode : ﾁｪｯｸ対象の科目内部ｺｰﾄﾞ
//*                     exCNCode: 科目別補助内部ｺｰﾄﾞ
//*                     strErr  : ｴﾗｰ時の理由格納域
//*		Return		:	削除可(TRUE)/削除不可(FALSE)
//**********************************************************************
function TJNTCRP009001f.fnDelCheck(exNCode: Extended; exCNCode: Extended; var strErr: String): Boolean;
var
    iRet        : Integer;
begin
    Result := False;
    try
        SPMasKmk.Connection := dbCorp_Select;
        //SPMasKmk.SessionName := dbCorp_Select.SessionName;

        // 【会計】MP_MAS_CHK_KMKMA
        with SPMasKmk do
        begin
                                            // 科目内部ｺｰﾄﾞ
            ParamByName('@NCode').AsFloat := exNCode;
                                            // 科目別補助内部ｺｰﾄﾞ
            ParamByName('@CNCode').AsFloat := exCNCode;
// Delphi10 ST
            FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
            ExecProc;                       // ｽﾄｱﾄﾞ実行
                                            // 結果
            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
            strErr := ParamByName('@errMsg').AsString;
        end;
    except
        // 例外発生
        strErr := '例外発生(MP_MAS_CHK_KMKMA)';
        Exit;
    end;

    if iRet = 1 then                        // 削除不可
        Exit;

    try
        SPPayKmk.Connection := dbCorp_Select;
        //SPPayKmk.SessionName := dbCorp_Select.SessionName;

        // 【債務】MP_PAY_CHK_KMKMA
        with SPPayKmk do
        begin
                                            // 科目内部ｺｰﾄﾞ
            ParamByName('@NCode').AsFloat := exNCode;
                                            // 科目別補助内部ｺｰﾄﾞ
            ParamByName('@CNCode').AsFloat := exCNCode;
// Delphi10 ST
            FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
            ExecProc;                       // ｽﾄｱﾄﾞ実行
                                            // 結果
            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
            strErr := ParamByName('@errMsg').AsString;
        end;
    except
        // 例外発生
        strErr := '例外発生(MP_PAY_CHK_KMKMA)';
        Exit;
    end;

    if iRet = 1 then                        // 削除不可
        Exit;

    try
        SPCrdKmk.Connection := dbCorp_Select;
        //SPCrdKmk.SessionName := dbCorp_Select.SessionName;

        // 【債権】MP_CRD_CHK_KMKMA
        with SPCrdKmk do
        begin
                                            // 科目内部ｺｰﾄﾞ
            ParamByName('@NCode').AsFloat := exNCode;
                                            // 科目別補助内部ｺｰﾄﾞ
            ParamByName('@CNCode').AsFloat := exCNCode;
// Delphi10 ST
            FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
            ExecProc;                       // ｽﾄｱﾄﾞ実行
                                            // 結果
            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
            strErr := ParamByName('@errMsg').AsString;
        end;
    except
        // 例外発生
        strErr := '例外発生(MP_CRD_CHK_KMKMA)';
        Exit;
    end;

    if iRet = 1 then                        // 削除不可
        Exit;

    Result := True;                         // 全ﾁｪｯｸで削除可能と判断

end;
//<053>--start---
//**********************************************************************
//*		Proccess	:	新会社法対応
//*		Name		:	T.KOBAYASHI(MJS)
//*		Date		:	2006/04/19
//*		Parameter	:	Nothing
//*		Return		:	対応(True)/非対応(False)
//**********************************************************************
function TJNTCRP009001f.kaisyahou(): Boolean ;
var
	Dm_q					: TMQuery;
begin
	Dm_q := TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, Dm_q);
	with Dm_q do
	begin
		Close;
		SQL.Clear;
		SQL.ADD('SELECT count(*) as cnt FROM KbnInfo WHERE RecKbn=1 and GnPuKbn4 = 1');
		if Open = False then
		begin
			ErrorMessageDsp(Dm_q);
			Dm_q.Close;
			Dm_q.Free;
            Result := False;
			Exit;
		end;
		if GetFld('cnt').AsInteger>0 then
			Result := True
		else
			Result := False;
		Close;
		Free;
	end;
end;

// <124> Start
//**********************************************************************
//*		Proccess	:	EdgeTracker経費精算連携用メッセージ表示(科目を削除した時にメッセージを出力)
//*		Name		:	Y.Shibasaki
//*		Date		:	2017.09.11
//*		Parameter	:	なし
//*		Return		:	なし
//**********************************************************************
//procedure TJNTCRP009001f.EdgeTrackerKeihiSeisanMsg;                   // detele <126>
procedure TJNTCRP009001f.EdgeTrackerKeihiSeisanMsg(iActive: Integer);   // add <126>
var
	DmqData			: TMQuery;
    iCnt			: Integer;
begin
	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続
    iCnt := 0 ;

	//	区分情報から経費精算連携採用の有無を取得
	with DmqData do
	begin
		Close();
		SQL.Clear;
        // RecKbn=54(経費精算)、GnPuKbn1（Edge Tracker 経費精算連携採用区分）
		SQL.ADD('SELECT count(*) as cnt FROM KbnInfo WHERE RecKbn=54 and GnPuKbn1 = 1');
		if Open = False then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Exit;
		end;
        iCnt := GetFld('cnt').AsInteger;
		Close;
		Free;
	end;
//<126> Delete ↓
    // 「Edge Tracker 経費精算連携」があるときにメッセージを表示する
//	if iCnt > 0 then
//    begin
//        MjsMessageBoxEx(AOwner, '科目が削除されました。' + #13#10 + 'Edge Tracker でマスタを見直してください。', '確認', mjWarning, mjOk, mjDefOk);
//    end;
//<126> Delete ↑

//<126> Start
    // 「Edge Tracker 経費精算連携」があるときにメッセージを表示する
	if iCnt > 0 then
    begin
        if ( iActive = 2) then          // iActive = 2: 実在科目
        begin
            MjsMessageBoxEx(AOwner, '科目が削除されました。' + #13#10 + 'Edge Tracker でマスタを見直してください。', '確認', mjInformation, mjOk, mjDefOk);
        end
        else if ( iActive = 3) then     // iActive = 3: 科目別補助
        begin
 		    MjsMessageBoxEx(AOwner, '科目別補助が削除されました。' + #13#10 + 'Edge Tracker でマスタを見直してください。', '確認', mjInformation, mjOk, mjDefOk);
	    end;
    end;
//<126> End
end;
// <124> End

//**********************************************************************
//*		Proccess	:	損益時特定科目の最後の科目を取得
//*		Name		:	T.KOBAYASHI
//*		Date		:	2006/05/01
//*		Parameter	:	なし
//*		Return		:	最後の科目ｺｰﾄﾞ
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP009001f.fnGetEndKmkInfo2(): Extended;
var
	aTokuteiCode	:	array[1..5] of Integer;
	iLoop			:	Integer;
	iDummy			:	Byte;
	iKmkNCode	    :	Extended;

begin
	aTokuteiCode[1]  := 010216;	//	利益準備金
	aTokuteiCode[2]  := 010215;	//	中間配当金
	aTokuteiCode[3]  := 010214;	//	目的積立金取崩
	aTokuteiCode[4]  := 010213;	//	過年度税効果調整額
	aTokuteiCode[5]  := 010212;	//	前期繰越利益
//	aTokuteiCode[6]  := 010217;	//	当期未処分利益
//	aTokuteiCode[7]  := 010211;	//	当期利益
//	aTokuteiCode[8]  := 010210;	//	法人税調整額
//	aTokuteiCode[9]  := 010209;	//	法人税等
//	aTokuteiCode[10] := 010208;	//	税引前利益
//	aTokuteiCode[11] := 010207;	//	経常利益
//	aTokuteiCode[12] := 010206;	//	営業利益
//	aTokuteiCode[13] := 010205;	//	販売費及び一般管理費
//	aTokuteiCode[14] := 010204;	//	売上総利益
//	aTokuteiCode[15] := 010203;	//	売上原価
//	aTokuteiCode[16] := 010201;	//	売上高

	for iLoop := 1 to 5 do
	begin
		iKmkNCode := GetKmkInfo(aTokuteiCode[iLoop],1,iDummy);
		if (iKmkNCode <> 0) then
			break;
	end;
	Result := iKmkNCode;
end;

//<053>---end----

//--- <057> St -----
function TJNTCRP009001f.BunSekiCodeCheck(GCode: Integer): Boolean;
var
	Qe : TMQuery;
begin
// <SYNC> MOD start
//	Qe := TMQuery.Create( Application );					//	MQueryの構築
	Qe := TMQuery.Create( Self );							//	MQueryの構築
// <SYNC> MOD end

	MDataModule.SetDBInfoToQuery( dbCorp_Select, Qe );		//	DBとMQueryの接続

    Qe.Close();
    Qe.SQL.Clear();
    Qe.SQL.Add('select AnalyzeCode from KmkMA   ');
    Qe.SQL.Add('where   (GCode     = :GCode)    ');
    Qe.SQL.Add('    and (MasterKbn = 1)         ');
    Qe.SQL.Add('    and (SumKbn    = 0)         ');
    Qe.SQL.Add('    and (RDelKbn   = 0)         ');
    Qe.ParamByName('GCode').AsInteger := GCode;

    if (Qe.Open = False) then
    begin
        Qe.Close();
        Qe.Free();
        Result := False;
        Exit;
    end;

    if not Qe.Eof then
    begin
        if (Qe.GetFld('AnalyzeCode').AsInteger = 0) then
                Result  := True
        else    Result  := False;
    end
    else
        Result  := False;

    Qe.Close();
    Qe.Free();

end;
//--- <057> Ed -----

// 番号1,2表示区分のｺﾝﾎﾞﾎﾞｯｸｽの内容を作成<065>
procedure TJNTCRP009001f.DspNumberListremake(iNumber: Integer);
begin
    // 番号管理番号自動付番(0:なし 1:会社別 2:部署別 3:ｸﾞﾙｰﾌﾟ会社別)
    if (m_NumberAutoKbn <> 0) then
    begin
        if (iNumber = 1)then
        begin
            // 番号1入力区分が2:正残(必須)または4:貸借(必須)の場合は、ﾘｽﾄに自動付番を追加
            if (ENumber1.AsInteger in [2,4]) then
            begin
                EDspNumber1.SelectItems.Clear();
                EDspNumber1.SelectItems.Add('0: なし');
                EDspNumber1.SelectItems.Add('1: 伝票Ｎｏ');
                EDspNumber1.SelectItems.Add('2: 自動付番');
            end
            else
            begin
                EDspNumber1.SelectItems.Clear();
                EDspNumber1.SelectItems.Add('0: なし');
                EDspNumber1.SelectItems.Add('1: 伝票Ｎｏ');
            end;
        end
        else if (iNumber = 2) then
        begin
            if (ENumber2.AsInteger in [2,4]) then
            begin
                EDspNumber2.SelectItems.Clear();
                EDspNumber2.SelectItems.Add('0: なし');
                EDspNumber2.SelectItems.Add('1: 伝票Ｎｏ');
                EDspNumber2.SelectItems.Add('2: 自動付番');
            end
            else
            begin
                EDspNumber2.SelectItems.Clear();
                EDspNumber2.SelectItems.Add('0: なし');
                EDspNumber2.SelectItems.Add('1: 伝票Ｎｏ');
            end;
        end;
    end;

end;

// <SYNC> ADD start
//**********************************************************************
//*		Proccess	:	削除ﾎﾞﾀﾝのEnabled制御	<SYNC>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/03/29
//*		Parameter	:	なし
//*		Return		:	Boolean	T: 有効 F: 無効
//**********************************************************************
function TJNTCRP009001f.IsDeleteEx(): Boolean;
begin
// <063> MOD start 仮対応削除
(*											// ★ｸﾞﾙｰﾌﾟ会計の子会社の場合の暫定対応
	if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
		Result := False;					// 削除不可	
	end
	else
	begin
		Result := m_cJNTArea.IsDelete;		// 通常は権限に従う
	end;
*)
	Result := m_cJNTArea.IsDelete;			// 権限に従う
// <063> MOD end
end;

//**********************************************************************
//*		Proccess	:	登録系ﾎﾞﾀﾝのEnabled制御	<SYNC>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/03/30
//*		Parameter	:	なし
//*		Return		:	Boolean	T: 有効 F: 無効
//**********************************************************************
function TJNTCRP009001f.IsUpdateEx(): Boolean;
begin
// <063> MOD start 仮対応削除
(*
											// ★ｸﾞﾙｰﾌﾟ会計の子会社の場合の暫定対応
	if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
		// ※子会社の場合は権限の変数を上書きしてしまっているため、共通ｸﾗｽを見て判断
		if (m_cJNTArea.IsAppend() and m_cJNTArea.IsModify()) then
		begin
			Result := True;
		end
		else
		begin
			Result := False;				// 削除不可
		end;
	end
	else
	begin
		Result := m_IsUpdate;				// 通常はﾒﾝﾊﾞの権限に従う
	end;
*)
	Result := m_IsUpdate;					// 権限に従う
// <063> MOD end
end;
// <SYNC> ADD end
// <063> ADD start
//**********************************************************************
//*		Proccess	:	ｾｷｭﾘﾃｨ基本情報取得 <063>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/04/19
//*		Parameter	:	なし
//*		Return		:   True or False
//**********************************************************************
function TJNTCRP009001f.GetSecMain(): Boolean;
var
    strSQL		: String;
    Query		: TMQuery;
begin
	Result := False;
    m_iSecMasterKbn := 0;					// ｸﾞﾙｰﾌﾟ管理用ｾｸﾞﾒﾝﾄﾏｽﾀ区分

    Query := TMQuery.Create(Self);

    try
	    // 親会社DBとMQueryの接続
											// 自社が子会社の場合
		if m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
		begin
	    									// 親会社DBに接続
			MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Query);
		end
		else
		begin
	    									// 自会社(親会社)DBに接続
			MDataModule.SetDBInfoToQuery(dbCorp_Select, Query);
		end;

    	Query.Close;
	    Query.SQL.Clear;

	  	strSQL := 'SELECT SecMasterKbn ' +
				'FROM SecMain ' +
				'WHERE OpeKbn = 2 ';		// ｸﾞﾙｰﾌﾟ管理

    	Query.SQL.Add(strSQL);

		if not Query.Open() then
    	begin
			Exit;
	    end;

   		if not Query.Eof then
	    begin
                                        	// 採用ｾｸﾞﾒﾝﾄﾏｽﾀ区分
            m_iSecMasterKbn := Query.GetFld('SecMasterKbn').AsInteger;
		end;
		Result := True;
	finally
    	Query.Free;
    end;
end;

//**********************************************************************
//*		Proccess	:	会社関連付処理(ﾏｽﾀ同期) <063>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/04/16
//*		Parameter	:	iMasterKbn	ﾏｽﾀ区分
//*					:	iGCode		科目外部ｺｰﾄﾞ
//*					:	strSubCode	科目別補助外部ｺｰﾄﾞ
//*					:	iSumKbn		実在/合計区分
//*					:	exNCode		科目内部ｺｰﾄﾞ格納域
//*					:	exCNCode	科目別補助内部ｺｰﾄﾞ格納域
//*		Return		:   Integer 	0: 対象外 1: 正常 2:ｷｬﾝｾﾙ -9:ｴﾗｰ
//**********************************************************************
function TJNTCRP009001f.fnCorpRelation(iMasterKbn: Integer; iGCode: Integer; strSubCode: String;
									iSumKbn: Integer; var exNCode: Extended; var exCNCode: Extended): Integer;
var
	bErr	: Boolean;						// T: ｴﾗｰ発生
	strSQL	: String;
    strMsg	: String;						// <067> ADD
    Qe		: TMQuery;
begin
    Result := 0;
	bErr := False;
    if iMasterKbn = MKBN_KAMOKU then
    begin
		exNCode := 0;
    end;
	exCNCode := 0;

    Qe := TMQuery.Create(Self);

	try
	    // 親会社DBとMQueryの接続
	    MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Qe);

		// 親会社に同じ外部ｺｰﾄﾞ・実在/合計区分のﾚｺｰﾄﾞがあるか
		strSQL := 'SELECT * FROM kmkMA ' +
	              'WHERE MasterKbn = :parMasterKbn ' +
	              'AND GCode     = :parGCode ' +
	              'AND RDelKbn   = 0  ';

	    Qe.Close();
	    Qe.SQL.Clear();
		Qe.SQL.Add(strSQL);

	    Qe.ParamByName('parMasterKbn').AsInteger := iMasterKbn;
	    Qe.ParamByName('parGCode' ).AsInteger := iGCode;

        if iMasterKbn = MKBN_SAIMOKU then	// 科目別補助
        begin								// 科目別補助ｺｰﾄﾞを条件に追加
        	Qe.SQL.Add('AND SubCode = :parSubCode ');
			Qe.ParamByName('parSubCode').AsString := strSubCode;
        end;

	    if not Qe.Open() then
	    begin
	        // SQLｴﾗｰ
	        ErrorMessageDsp(Qe);
	        Result := -9;
	        Exit;
	    end;

	    // 親会社に既に該当ﾃﾞｰﾀが存在した場合
	    if not Qe.Eof then
	    begin
			// ①実在/合計区分が一致するか
											// 実在/合計区分が違った
			if iSumKbn <> Qe.GetFld('SumKbn').AsInteger then
			begin
// <067> MOD start
											// 「指定のコードは、全社にて登録済みですが、
											// 実在・合計が異なるため、
											// 自社へ同期することはできません。」
(*				MjsMessageBoxEx(AOwner, JNTSYNC_MSG_SUM_ERR, '科目登録', mjInformation,
								mjOk, mjDefOk);
*)
											// 簡略名称も表示
				strMsg := JNTSYNC_MSG_SUM_ERR + #13#10 + #13#10 +
	        			Qe.GetFld('SimpleName').AsString;
				MjsMessageBoxEx(AOwner, strMsg, '科目登録', mjInformation,
								mjOk, mjDefOk);
// <067> MOD end
	            Result := 2;				// 処理を中止
				Exit;
			end;

			// ②科目分類が一致するか
			if not IsSameKmkBunrui(iMasterKbn,
							Qe.GetFld('SumKbn').AsInteger,
            				Qe.GetFld('BPKbn').AsInteger,
							Qe.GetFld('AnalyzeCode').AsInteger) then
			begin
// <067> MOD start
											// 「指定のコードは、全社にて登録済みですが、
											// 科目分類が異なるため、
											// 自社へ同期することはできません。」
(*				MjsMessageBoxEx(AOwner, JNTSYNC_MSG_KMKBUNRUI_ERR, '科目登録', mjInformation,
								mjOk, mjDefOk);
*)
											// 簡略名称も表示
				strMsg := JNTSYNC_MSG_KMKBUNRUI_ERR + #13#10 + #13#10 +
	        			Qe.GetFld('SimpleName').AsString;
				MjsMessageBoxEx(AOwner, strMsg, '科目登録', mjInformation,
								mjOk, mjDefOk);
// <067> MOD end
	            Result := 2;				// 処理を中止
				Exit;
			end;

			// ③本当に関連付ける？
// <067> MOD start
											// 「該当ﾏｽﾀは、自社にはありませんが、
											// 全社DBにあります。
											// 自社への関連付けを行いますか？」
(*	        if ( MjsMessageBoxEx(AOwner, JNTSYNC_MSG_CHK_SYNC, 
	                             '確認', mjQuestion, mjYESNO, mjDefNO) = mrYES ) then
*)
											// 簡略名称も表示
			strMsg := JNTSYNC_MSG_CHK_SYNC + #13#10 + #13#10 +
	        			Qe.GetFld('SimpleName').AsString;
	        if ( MjsMessageBoxEx(AOwner, strMsg, 
	                             '確認', mjQuestion, mjYESNO, mjDefNO) = mrYES ) then
// <067> MOD end
	        begin
	            // KmkMA_Relｷｰ情報を取得
											// 科目内部ｺｰﾄﾞ
	            exNCode  := Qe.FieldByName('NCode'    ).AsFloat;
											// 科目別補助内部ｺｰﾄﾞ
	            exCNCode := Qe.FieldByName('CNCode'   ).AsFloat;

				// KmkMA_REL書き込み
				if not WriteKmkREL(exNCode, exCNCode,
                				m_SyncMaster.m_nSegNCode, TBL_KMKMA_REL, Qe) then
				begin
					bErr := True;
					Exit;
				end;

				// KmkMB_REL書き込み
				if not WriteKmkREL(exNCode, exCNCode,
                				m_SyncMaster.m_nSegNCode, TBL_KMKMB_REL, Qe) then
				begin
					bErr := True;
					Exit;
				end;

				if exCNCode = 0 then		// 科目のinsert時(科目別補助の時はSecのﾒﾝﾃ不要)
				begin
					// 非表示ﾏｽﾀ情報(科目)も更新
					if not WriteSecKmkInfo(exNCode,
                    			m_SyncMaster.m_nSegNCode, DSPKBN_DISP) then
					begin
						bErr := True;
						Exit;
					end;
				end;

				// KmkMAの同期
				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
				begin
					bErr := True;
    	            Exit;
				end;

				// KmkMBの同期
// <068> MOD start
//   				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
   				if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
				begin
					bErr := True;
	                Exit;
				end;

	            Result := 1;    			// 正常
	        end
	        else
	        begin
	            // ｷｬﾝｾﾙ
	            Result := 2;
	        end;
	    end;
	finally
		Qe.Free;
        
		if bErr then						// ｴﾗｰ時
		begin                               // 「自社への関連付けに失敗しました。」
            MjsMessageBoxEx (AOwner,
                         MSG_GRP_RELATION_ERR,
                         'マスタ同期', mjError, mjOk, mjDefOk);
			Result := -9;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	全部の子会社に関連付処理(ﾏｽﾀ同期) <063>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/04/19
//*		Parameter	:	exNCode		科目内部ｺｰﾄﾞ
//*					:	exCNCode	科目別補助内部ｺｰﾄﾞ
//*		Return		:   Boolean 	True or False
//**********************************************************************
function TJNTCRP009001f.fnAllCorpRelation(exNCode: Extended; exCNCode: Extended): Boolean;
var
	bErr		: Boolean;					// True: ｴﾗｰ発生
    strSQL		: String;
    Qe			: TMQuery;
	QuerySeg	: TMQuery;					// 子会社に関連付けたｾｸﾞﾒﾝﾄ取得用
begin
    Result := False;
	bErr := False;

    Qe := TMQuery.Create(Self);
    QuerySeg := TMQuery.Create(Self);

	try
	    // 親会社DBとMQueryの接続
											// 自社が子会社の場合
		if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
		begin
	    									// 親会社DBに接続
			MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Qe);
			MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, QuerySeg);
		end
		else
		begin								// 翌期更新済み
			if m_SyncMaster.m_CEComKbn5 = 1 then
			begin
				Result := True;				// RELを作らない
				Exit;
			end;
	    									// 自会社(親会社)DBに接続
			MDataModule.SetDBInfoToQuery(dbCorp_Select, Qe);
			MDataModule.SetDBInfoToQuery(dbCorp_Select, QuerySeg);
		end;

		// 子会社に関連付けたｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞを取得

		strSQL := 'SELECT NCode FROM GrpSegMA ' +
				'WHERE MasterKbn = :parMasterKbn ' +
				'AND ParentKbn = 0 ' +
				'AND ForbidKbn = 0 ';

		QuerySeg.Close;
		QuerySeg.SQL.Clear;
		QuerySeg.SQL.Add(strSQL);
											// ｸﾞﾙｰﾌﾟ管理ｾｸﾞﾒﾝﾄﾏｽﾀ区分
        QuerySeg.ParamByName('parMasterKbn').AsInteger := m_iSecMasterKbn;

		if not QuerySeg.Open() then
		begin
            ErrorMessageDsp(QuerySeg);
			Exit;
		end;

		if QuerySeg.Eof then
		begin
			Exit;
		end;

		// 各子会社にRELを作成 + 非表示ﾏｽﾀ情報も作成
		while not QuerySeg.Eof do			// 子会社の数だけﾙｰﾌﾟ
		begin
			// 科目別補助追加時は科目が存在している会社にだけ追加する
			if exCNCode <> 0 then
			begin
				// この子会社には科目のRELがある？
				strSQL := 'SELECT * FROM KmkMA_REL ' +
	                      'WHERE NCode = :parNCode ' +
	                      'AND CNCode = 0 ' +
	                      'AND GrpSegNCode = :parGrpSegNCode ' +
                          'AND RDelKbn_REL = 0 ';

	            Qe.Close();
	            Qe.SQL.Clear();
	            Qe.SQL.Add(strSQL);

	            Qe.ParamByName('parNCode'      ).AsFloat := exNCode;
	            Qe.ParamByName('parGrpSegNCode').AsFloat := QuerySeg.GetFld('NCode').AsFloat;

	            if not Qe.Open() then
	            begin
	                // SQLｴﾗｰ
	                ErrorMessageDsp(Qe);
	                Exit;
	            end;

				if Qe.Eof then
				begin
					QuerySeg.Next;
					Continue;
				end;
			end;

			// KmkMA_REL書き込み
			if not WriteKmkREL(exNCode, exCNCode, QuerySeg.GetFld('NCode').AsFloat, TBL_KMKMA_REL, Qe) then
			begin
				bErr := True;
                Exit;
			end;
			// KmkMB_REL書き込み
			if not WriteKmkREL(exNCode, exCNCode, QuerySeg.GetFld('NCode').AsFloat, TBL_KMKMB_REL, Qe) then
			begin
				bErr := True;
                Exit;
			end;

			if exCNCode = 0 then		// 科目のinsert時
			begin						// 非表示ﾏｽﾀ情報(科目)も更新
				if not WriteSecKmkInfo(exNCode, QuerySeg.GetFld('NCode').AsFloat, DSPKBN_DISP) then
				begin
					bErr := True;
                    Exit;
				end;
			end;

			QuerySeg.Next;
		end;

		Result := True;
	finally
		QuerySeg.Free;
		Qe.Free;

		if bErr then
		begin                               // 「子会社への関連付けに失敗しました。」
    	    MjsMessageBoxEx (AOwner,
                     MSG_GRP_RELATIONALL_ERR,
                     'マスタ同期', mjError, mjOk, mjDefOk);
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	会社関連付削除処理(ﾏｽﾀ同期) <063>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/04/19
//*		Parameter	:	exNCode		科目内部ｺｰﾄﾞ
//*					:	exCNCode	科目別補助内部ｺｰﾄﾞ
//*					:	exSegNCode	会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
//*					:	Query		接続済みｸｴﾘ(親会社)
//*		Return		:   Boolean 	True or False
//**********************************************************************
function TJNTCRP009001f.DeleteKmkREL(exNCode: Extended; exCNCode: Extended;
								exSegNCode: Extended; Query: TMQuery): Boolean;
var
	strSQL	: String;
begin
	Result := False;

	with Query do
	begin
		// KmkMA_REL
		strSQL := 'UPDATE KmkMA_REL SET ' + // 勘定科目基本ﾏｽﾀ関連付け
            	'RDelKbn_REL = 1, ' +		// ﾚｺｰﾄﾞ区分(1:削除ﾚｺｰﾄﾞ)
            	'UpdDateTM = CURRENT_TIMESTAMP ' +
        		'WHERE RDelKbn_REL = 0 ' + 	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				'AND NCode = :parNCode ' +
				'AND CNCode = :parCNCode ' +
				'AND GrpSegNCode = :parGrpSegNCode ';

		Close;
		SQL.Clear;
		SQL.Add(strSQL);
											// 科目内部ｺｰﾄﾞ
		ParamByName('parNCode').AsFloat := exNCode;
											// 科目別補助内部ｺｰﾄﾞ
		ParamByName('parCNCode').AsFloat := exCNCode;
											// 会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
		ParamByName('parGrpSegNCode').AsFloat := exSegNCode;

		//	ｴﾗｰの判定
		if not ExecSQL() then
		begin
			ErrorMessageDsp(Query);
			Close;
            Exit;
		end;

		// KmkMB_REL
		strSQL := 'UPDATE KmkMB_REL SET ' + // 勘定科目詳細ﾏｽﾀ関連付け
            	'RDelKbn_REL = 1, ' +		// ﾚｺｰﾄﾞ区分(1:削除ﾚｺｰﾄﾞ)
            	'UpdDateTM = CURRENT_TIMESTAMP ' +
        		'WHERE RDelKbn_REL = 0 ' +	// ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
				'AND NCode = :parNCode ' +
				'AND CNCode = :parCNCode ' +
				'AND GrpSegNCode = :parGrpSegNCode ';

		Close;
		SQL.Clear;
		SQL.Add(strSQL);
											// 科目内部ｺｰﾄﾞ
		ParamByName('parNCode').AsFloat := exNCode;
											// 科目別補助内部ｺｰﾄﾞ
		ParamByName('parCNCode').AsFloat := exCNCode;
											// 会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
		ParamByName('parGrpSegNCode').AsFloat := exSegNCode;

		//	ｴﾗｰの判定
		if not ExecSQL() then
		begin
			ErrorMessageDsp(Query);
			Close;
			Exit;
		end;
		Close;
	end;

	if exCNCode = 0 then					// 科目の関連付け削除時
	begin									// 非表示ﾏｽﾀ情報(科目)も更新 非表示にする
		if not WriteSecKmkInfo(exNCode, exSegNCode, DSPKBN_NODISP) then
		begin
			Exit;
		end;
	end;

	Result := True;
end;

//**********************************************************************
//*		Proccess	:	ｸﾞﾙｰﾌﾟ管理時の親会社DBﾄﾗﾝｻﾞｸｼｮﾝ処理 <063>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/04/16
//*		Parameter	:	iTrnKind	親会社DBへの指示
//*		Return		:	なし
//*		Comment		:	ｸﾞﾙｰﾌﾟ管理を採用していない、または親会社の処理中は
//*					:	何もしない。子会社選択中のみ親会社との同期を考慮する
//*		History		:	9999/99/99	X.Xxxx
//**********************************************************************
procedure TJNTCRP009001f.ExecParentDBTran(iTrnKind: Integer);
begin
											// ｸﾞﾙｰﾌﾟ管理採用 & 子会社選択時
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
	begin
		if m_SyncMaster.m_cPDBSelect = nil then
		begin
			Exit;
		end;

		case iTrnKind of
			GRP_PARENTDB_BEGINTRAN:			// ﾄﾗﾝｻﾞｸｼｮﾝ開始
			begin
				MDataModule.BeginTran(m_SyncMaster.m_cPDBSelect);
			end;
			GRP_PARENTDB_ROLLBACK:			// ﾛｰﾙﾊﾞｯｸ
			begin
				MDataModule.RollBack(m_SyncMaster.m_cPDBSelect);
			end;
			GRP_PARENTDB_COMMIT:			// ｺﾐｯﾄ
			begin
				MDataModule.Commit(m_SyncMaster.m_cPDBSelect);
			end;
		end;
	end;
end;

//**************************************************************************
//	Proccess	:  	削除ﾁｪｯｸ(子会社に使用されていたら削除不可) <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/16
//	Parameter 	: 	exNCode		科目内部ｺｰﾄﾞ
//				:	exCNCode	科目別補助内部ｺｰﾄﾞ
//				:	bUse		使われているかどうか T: 使用されている F: 使用されていない
//	Retrun	  	:	Boolean		True or False
//	Comment		:	自社が親会社の時だけ呼ばれる
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.fnDelCheckChild(exNCode: Extended; exCNCode: Extended; var bUse: Boolean): Boolean;
var
	strSQL			: String;
	Query			: TMQuery;
begin
	Result := False;
	bUse := False;

	Query := TMQuery.Create(Self);
    										// 自会社(親会社)DBに接続
	MDataModule.SetDBInfoToQuery(dbCorp_Select, Query);

	try
	   	with  Query do
    	begin
			// KmkMA_RELに関連付けﾚｺｰﾄﾞがあるか
			strSQL := 'SELECT NCode ' +
					'FROM KmkMA_REL ' +
					'WHERE NCode = :parNCode ' +
            	    'AND CNCode = :parCNCode ' +
                	'AND RDelKbn_REL = 0 ';

		    Close();
    		SQL.Clear();
	    	SQL.Add(strSQL);
											// 科目内部ｺｰﾄﾞ
	        ParamByName('parNCode').AsFloat := exNCode;
											// 科目別補助内部ｺｰﾄﾞ
    	    ParamByName('parCNCode').AsFloat := exCNCode;

		    if not Open() then
    		begin
	    	    ErrorMessageDsp(Query);		// SQLｴﾗｰ
    	    	Exit;
		    end;

			if not Eof then
			begin
				bUse := True;				// 子が使用中
                Exit;
            end;
			Result := True;
	  	end;
	finally
	    Query.Close;
    	Query.Free;
	end;
end;

//**************************************************************************
//	Proccess	:  	親会社の諸口があれば子会社に連動する <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/20
//	Parameter 	:	exNCode		科目内部ｺｰﾄﾞ
//				:	bSyokuchi	T: 諸口を同期 F: 同期してない
//				:	bGrid		T: ｸﾞﾘｯﾄﾞ再表示 F: 詳細再表示
//	Retrun	  	:	True or False
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.ImportOyaSyokuchi(exNCode: Extended; var bSyokuchi: Boolean;
									bGrid: Boolean = True): Boolean;
var
	bErr		: Boolean;					// T: ｴﾗｰ発生
    iLoop		: Integer;
    iGCode		: Integer;					// 外部ｺｰﾄﾞ
    iCodeAttr	: Integer;
    iCodeDigit	: Integer;
	exCNCode	: Extended;					// 科目別補助内部ｺｰﾄﾞ
    strSubCode	: String;					// 科目別補助外部ｺｰﾄﾞ
    strRenso	: String;					// 連想
    strSimple	: String;					// 簡略名
    strLong		: String;					// 正式名
	strSQL		: String;
	Query  		: TMQuery;
	wRec  		: ^TaikeiRec;
	wkRec		: ^TaikeiRec;
	wkNode		: TTreeNode;
	cNode		: TTreeNode;
begin
	Result := False;
    bSyokuchi := False;
	bErr := False;

	Query := TMQuery.Create(Self);
    										// 自会社(親会社)DBに接続
	MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Query);

	try
	   	with  Query do
    	begin
        	// 親会社の諸口があるか
            strSQL := 'SELECT CNCode, GCode, SubCode, ' +
            		'SimpleName, LongName, Renso, ' +
                    'CodeAttr, CodeDigit ' +
            		'FROM KmkMA ' +
                    'WHERE NCode = :parNCode ' +
                    'AND SyokuchiKbn = 1 ' +
                    'AND RDelKbn = 0 ';

		    Close();
    		SQL.Clear();
	    	SQL.Add(strSQL);
											// 科目内部ｺｰﾄﾞ
	        ParamByName('parNCode').AsFloat := exNCode;

   		    if not Open() then
    		begin
	    	    ErrorMessageDsp(Query);		// SQLｴﾗｰ
    	    	Exit;
		    end;

			if Eof then						// ﾚｺｰﾄﾞなし
			begin
            	Result := True;
                Exit;
			end;
             								// 科目別補助内部ｺｰﾄﾞ
            exCNCode := GetFld('CNCode').AsFloat;
            								// 科目外部ｺｰﾄﾞ
        	iGCode := GetFld('GCode').AsInteger;
            								// 科目別補助外部ｺｰﾄﾞ
            strSubCode := GetFld('SubCode').AsString;
            strRenso := GetFld('Renso').AsString;
            strSimple := GetFld('SimpleName').AsString;
            strLong := GetFld('LongName').AsString;
            iCodeAttr := GetFld('CodeAttr').AsInteger;
            iCodeDigit := GetFld('CodeDigit').AsInteger;

			// KmkMA_REL書き込み
			if not WriteKmkREL(exNCode, exCNCode,
               				m_SyncMaster.m_nSegNCode, TBL_KMKMA_REL, Query) then
			begin
				bErr := True;
				Exit;
			end;
			// KmkMB_REL書き込み
			if not WriteKmkREL(exNCode, exCNCode,
               				m_SyncMaster.m_nSegNCode, TBL_KMKMB_REL, Query) then
			begin
				bErr := True;
				Exit;
			end;
			// KmkMAの同期
			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMA) then
			begin
				bErr := True;
                Exit;
			end;
			// KmkMBの同期
// <068> MOD start
//   			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB) then
   			if not m_SyncMaster.fnCall_SYNC(JNTSYNC_KMKMB, JNTSYNC_DELETE) then
// <068> MOD end
			begin
				bErr := True;
                Exit;
			end;
	  	end;

		// ﾂﾘｰに追加
        for iLoop := 0 to TreeView.Items.Count - 1 do
        begin
        	wRec :=	TreeView.Items[iLoop].Data;
            if ( wRec.GCode = iGCode ) and ( wRec.MasKbn = 1 ) and ( wRec.Kbn = 0 ) then
            begin
            	wkNode := TreeView.Items[iLoop];
                // 親科目の属性・桁数設定
                TaikeiRec(wkNode.Data^).CodeAttr := iCodeAttr;
                TaikeiRec(wkNode.Data^).CodeDigit := iCodeDigit;
				// 新しいﾉｰﾄﾞを追加
                New(wkRec);
                wkRec.NCode     :=  exNCode;
                wkRec.CNCode    :=  exCNCode;
                wkRec.GCode	    :=  iGCode;
                wkRec.SubCode   :=  strSubCode;
                wkRec.Kbn		:=	0;
                wkRec.KoteiKbn	:=	0;
                wkRec.MasKbn	:=	2;
                wkRec.Name		:=	strSimple;
                wkRec.AddKbn	:=  0;
                wkRec.ChildKbn	:=	FALSE;
                wkRec.NotAdd	:=	1;
                wkRec.CodeAttr  :=  iCodeAttr;
                wkRec.CodeDigit :=  iCodeDigit;

               	wkRec.Syokuchi  :=  1;

                fnSubNCodeCheck(iGCode, strSubCode,
                                    wkRec.NCode, wkRec.Syokuchi);

                CNode :=  TreeView.Items.AddChildobject(wkNode,
                                                        MakeDspString_Sai(wkRec.SubCode,
                                                                          wkRec.Name,
                                                                          wkRec.CodeAttr,
                                                                          wkRec.CodeDigit
                                                                          ),
                                                        wkRec);
		        CNode.ImageIndex    :=  3;
                Cnode.SelectedIndex :=  10;
                TreeView.Items[iLoop].Expanded	:=	TRUE;
            end;
        end;

		if ( TreeView_EnsureVisible(TreeView.Handle, TreeView.Selected.ItemID) ) then
        begin
        	TreeView.Invalidate;
        end;

        // 見た目を再表示
        if bGrid then
        begin
        	gbChangeFlg := True;
        	MemSai.Append;
			MemSai.FieldByName('NCode').AsFloat			:=	exNCode;
			MemSai.FieldByName('CNCode').AsFloat  		:=	exCNCode;
         	MemSai.FieldByName('SCode').AsString		:=	fnSaimokuSetAttr(0, strSubCode, iCodeAttr, iCodeDigit);
            MemSai.FieldByName('SRen').AsString			:=	strRenso;
            MemSai.FieldByName('SLongName').AsString	:=	strLong;
            MemSai.FieldByName('SSName').AsString		:=	strSimple;
			SetLength(m_aCmnt_Sai,Length(m_aCmnt_Sai) + 1);
            m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].NCode    :=  exNCode;    //  科目内部ｺｰﾄﾞ
			m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].SubNCode :=  exCNCode;	//	細目内部ｺｰﾄﾞ
			m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].Cmnt     :=  '';
            MemSai.Post;
            gbChangeFlg := False;
        end
        else
        begin
        	// 詳細の場合
        	SelectDsp(MKBN_SAIMOKU, SUMKBN_JITUZAI, iGCode, strSubCode);
        end;

		bSyokuchi := True;
		Result := True;
	finally
	    Query.Close;
    	Query.Free;
		if bErr then
		begin								// 「'自社への関連付けに失敗しました。」
            MjsMessageBoxEx(AOwner, MSG_GRP_RELATION_ERR,
                                    MSGCAP_GRP, mjInformation, mjOk, mjDefOk);
		end;
	end;
end;

//**************************************************************************
//	Proccess	:  	関連付け(KmkMA_REL, KmkMB_REL)更新 <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/19
//	Parameter 	: 	exNCode			科目内部ｺｰﾄﾞ
//				:	exCNCode		科目別補助内部ｺｰﾄﾞ
//				:	exSegNCode		会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
//				:	iTableKind		更新先ﾃｰﾌﾞﾙ(KmkMA_REL or KmkMB_REL)
//				:	Query			接続済みｸｴﾘ(親会社)
//	Retrun	  	:	True or False
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.WriteKmkREL(exNCode: Extended; exCNCode: Extended; exSegNCode: Extended;
									iTableKind: Integer; Query: TMQuery): Boolean;
var
	strTbl	: String;						// ﾃｰﾌﾞﾙ名
	strSQL	: String;
begin
	Result := False;
	if iTableKind = TBL_KMKMA_REL then
	begin
		strTbl := 'KmkMA_REL';
	end
	else
	begin
		strTbl := 'KmkMB_REL';
	end;

   	with Query do
	begin
		// KmkMA_REL(KmkMB_REL)はある？
		strSQL := 'SELECT * FROM ' + strTbl + ' ' +
                  'WHERE NCode = :parNCode ' +
                  'AND CNCode = :parCNCode ' +
                  'AND GrpSegNCode = :parGrpSegNCode ';

        Close();
        SQL.Clear();
        SQL.Add(strSQL);

        ParamByName('parNCode'      ).AsFloat := exNCode;
        ParamByName('parCNCode'     ).AsFloat := exCNCode;
        ParamByName('parGrpSegNCode').AsFloat := exSegNCode;

        if not Open() then
        begin
            Exit;
        end;

        // 親のKmkMA_REL(KmkMB_REL)の更新
        if Eof then   			// 新規挿入
        begin
			strSQL := 'INSERT INTO ' + strTbl + ' ( ' +
                      ' NCode, CNCode, GrpSegNCode, ' +
                      ' RDelKbn_REL) ' +
                      'VALUES ( ' +
                      ' :parNCode, :parCNCode, ' +
                      ' :parGrpSegNCode, 0) ';

        end
        else                	// 更新
        begin
			strSQL := 'UPDATE ' + strTbl + ' SET ' +
                          'RDelKbn_REL = 0, ' +
                          'UpdDateTM = CURRENT_TIMESTAMP ' +
                      'WHERE NCode = :parNCode ' +
                      'AND CNCode  = :parCNCode ' +
                      'AND GrpSegNCode = :parGrpSegNCode ';
        end;

        Close();
        SQL.Clear();
        SQL.Add(strSQL);

        ParamByName('parNCode'      ).AsFloat := exNCode;
        ParamByName('parCNCode'     ).AsFloat := exCNCode;
        ParamByName('parGrpSegNCode').AsFloat := exSegNCode;

        if not ExecSQL() then
        begin
	        Close();
			Exit;
        end;
	end;
    Query.Close();
	Result := True;
end;

//**************************************************************************
//	Proccess	:  	非表示ﾏｽﾀ情報(科目)更新 <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/18
//	Parameter 	: 	exNCode			科目内部ｺｰﾄﾞ
//				:	exPlaceNCode	子会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
//				:	iNewDispKbn		表示/非表示
//	Retrun	  	:	True or False
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.WriteSecKmkInfo(exNCode: Extended; exPlaceNCode: Extended;
									iNewDispKbn: Integer): Boolean;
var
	iOldDispKbn		: Integer;				// 表示区分
	strSQL			: String;
	Query			: TMQuery;
begin
	Result := False;

	Query := TMQuery.Create(Self);

											// 自社が子会社の場合
	if (m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD) then
	begin
    										// 親会社DBに接続
		MDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Query);
	end
	else
	begin
    										// 自会社(親会社)DBに接続
		MDataModule.SetDBInfoToQuery(dbCorp_Select, Query);
	end;

	try
	   	with  Query do
    	begin
			// SecKmkNoDispInfoに該当ﾚｺｰﾄﾞがあるか
			strSQL := 'SELECT DispKbn ' +
					'FROM SecKmkNoDispInfo ' +
					'WHERE OpeKbn = 2 ' +
					'AND MasterKbn = :parMasterKbn ' +
					'AND PlaceNCode = :parPlaceNCode ' +
					'AND NoDispMasterKbn = :parNoDispMasterKbn ' +
					'AND NCode = :parNCode ';

		    Close();
	    	SQL.Clear();
		    SQL.Add(strSQL);

											// ｸﾞﾙｰﾌﾟ管理として使用するﾏｽﾀ区分
	        ParamByName('parMasterKbn').AsInteger := m_iSecMasterKbn;
											// 部署内部ｺｰﾄﾞ(ｾｸﾞﾒﾝﾄ)
    	    ParamByName('parPlaceNCode').AsFloat := exPlaceNCode;
											// ﾏｽﾀ区分
	        ParamByName('parNoDispMasterKbn').AsInteger := MKBN_KAMOKU;
											// 科目内部ｺｰﾄﾞ
    	    ParamByName('parNCode').AsFloat := exNCode;

		    if not Open() then
	    	begin
		        ErrorMessageDsp(Query);		// SQLｴﾗｰ
	    	    Exit;
		    end;

			if not Eof then					// ﾚｺｰﾄﾞあり
			begin
				// UPDATE(SecKmkNoDispInfo)
											// 表示区分
				iOldDispKbn := GetFld('DispKbn').AsInteger;
											// 非表示→表示
				if ((iOldDispKbn = DSPKBN_NODISP) and (iNewDispKbn = DSPKBN_DISP)) or
											// 表示→非表示
					((iOldDispKbn <> DSPKBN_NODISP) and (iNewDispKbn = DSPKBN_NODISP)) then
				begin
					if not UpdateSecKmkInfo(exNCode, exPlaceNCode, iNewDispKbn, Query) then
					begin
						Exit;
					end;
				end;
			end
			else							// ﾚｺｰﾄﾞなし
			begin
				// INSERT(SecKmkNoDispInfo)
				if not InsertSecKmkInfo(exNCode, exPlaceNCode, iNewDispKbn, Query) then
				begin
					Exit;
				end;
			end;
			Result := True;
	  	end;
	finally
	    Query.Close;
	    Query.Free;
	end;
end;

//**************************************************************************
//	Proccess	:  	非表示ﾏｽﾀ情報(科目)UPDATE <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/18
//	Parameter 	: 	exNCode			科目内部ｺｰﾄﾞ
//				:	exPlaceNCode	子会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
//				:	iDispKbn		表示/非表示
//				:	Query			接続済みｸｴﾘ
//	Retrun	  	:	True or False
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.UpdateSecKmkInfo(exNCode: Extended; exPlaceNCode: Extended;
									iDispKbn: Integer; Query: TMQuery): Boolean;
var
	strSQL			: String;
begin
	Result := False;

   	with  Query do
	begin
		// SecKmkNoDispInfoのUPDATE
		strSQL := 'UPDATE SecKmkNoDispInfo ' +
				'SET DispKbn = :parDispKbn ' +
				'WHERE OpeKbn = 2 ' +
				'AND MasterKbn = :parMasterKbn ' +
				'AND PlaceNCode = :parPlaceNCode ' +
				'AND NoDispMasterKbn = :parNoDispMasterKbn ' +
				'AND NCode = :parNCode ';

	    Close();
    	SQL.Clear();
	    SQL.Add(strSQL);

											// 表示区分
        ParamByName('parDispKbn').AsInteger := iDispKbn;
											// ｸﾞﾙｰﾌﾟ管理として使用するﾏｽﾀ区分
        ParamByName('parMasterKbn').AsInteger := m_iSecMasterKbn;
											// 部署内部ｺｰﾄﾞ(ｾｸﾞﾒﾝﾄ)
   	    ParamByName('parPlaceNCode').AsFloat := exPlaceNCode;
											// ﾏｽﾀ区分
        ParamByName('parNoDispMasterKbn').AsInteger := MKBN_KAMOKU;
											// 科目内部ｺｰﾄﾞ
   	    ParamByName('parNCode').AsFloat := exNCode;

	    if not ExecSQL() then
    	begin
	        ErrorMessageDsp(Query);		// SQLｴﾗｰ
			Close();
    	    Exit;
	    end;
	end;
	Query.Close();
	Result := True;
end;

//**************************************************************************
//	Proccess	:  	非表示ﾏｽﾀ情報(科目)INSERT <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/18
//	Parameter 	: 	exNCode		科目内部ｺｰﾄﾞ
//				:	exPlaceNCode	子会社識別ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
//				:	iDispKbn	T: 表示	F: 非表示
//				:	Query		接続済みｸｴﾘ
//	Retrun	  	:	True or False
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.InsertSecKmkInfo(exNCode: Extended; exPlaceNCode: Extended;
									iDispKbn: Integer; Query: TMQuery): Boolean;
var
	strSQL	: String;
begin
	Result := False;

   	with  Query do
	begin
		// SecKmkNoDispInfoにINSERT
		strSQL := 'INSERT INTO SecKmkNoDispInfo ( ' +
				'OpeKbn, ' +
				'MasterKbn, ' +
				'PlaceNCode, ' +
				'NoDispMasterKbn, ' +
				'NCode, ' +
				'DispKbn ' +
				') VALUES ( ' +
				':parOpeKbn, ' +
				':parMasterKbn, ' +
				':parPlaceNCode, ' +
				':parNoDispMasterKbn, ' +
				':parNCode, ' +
				':parDispKbn ' +
				') ';

	    Close();
    	SQL.Clear();
	    SQL.Add(strSQL);

											// 使用区分 = ｸﾞﾙｰﾌﾟ管理
        ParamByName('parOpeKbn').AsInteger := OPEKBN_GRP;
											// ｸﾞﾙｰﾌﾟ管理として使用するﾏｽﾀ区分
        ParamByName('parMasterKbn').AsInteger := m_iSecMasterKbn;
											// 部署内部ｺｰﾄﾞ(ｾｸﾞﾒﾝﾄ)
   	    ParamByName('parPlaceNCode').AsFloat := exPlaceNCode;
											// ﾏｽﾀ区分
        ParamByName('parNoDispMasterKbn').AsInteger := MKBN_KAMOKU;
											// 科目内部ｺｰﾄﾞ
   	    ParamByName('parNCode').AsFloat := exNCode;
											// 表示区分
        ParamByName('parDispKbn').AsInteger := iDispKbn;

	    if not ExecSQL() then
    	begin
	        ErrorMessageDsp(Query);		// SQLｴﾗｰ
			Query.Close();
    	    Exit;
	    end;
	end;
	Query.Close();
	Result := True;
end;

//**************************************************************************
//	Proccess	:  	表示中の科目分類と合致するか <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/19
//	Parameter 	:	iMasterKbn		ﾏｽﾀ区分
//				:	iSumKbn			実在/合計区分
//				:	iBPKbn			BS/PL区分
//				:	iAnalyzeCode	分析ｺｰﾄﾞ
//	Retrun	  	:	Boolean	T: 一致 F: 不一致
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.IsSameKmkBunrui(iMasterKbn: Integer; iSumKbn: Integer;
										iBPKbn: Integer; iAnalyzeCode: Integer): Boolean;
var
	iIndex	: Integer;
begin
	Result := False;

	if iMasterKbn = MKBN_SAIMOKU then		// 科目別補助ならﾉｰﾁｪｯｸ
	begin
		Result := True;
		Exit;
	end;

    // ----------------
	//  実在科目時
    // ----------------
	if iSumKbn = SUMKBN_JITUZAI then		// 実在科目
	begin
		if iBPKbn = 0 then					// BS
		begin
			if iAnalyzeCode <= 37 then		// 分析ｺｰﾄﾞで絞り込む
			begin
				iIndex := SHISAN;			// 資産科目
			end
			else
			begin
				iIndex := FUSAI;			// 負債・資本科目
			end;

			if iIndex = MComboBox.ItemIndex then
			begin
				Result := True;
			end;
		end
		else								// PL
		begin
											// 損益か製造ならOK
			if MComboBox.ItemIndex in [SONEKI, SEIZOU] then
			begin
				Result := True;
			end;
		end;
	end
    // ----------------
	//  合計時
    // ----------------
	else
	begin
		if iBPKbn = 0 then					// BS
		begin
											// 資産か負債・資本ならOK
			if MComboBox.ItemIndex in [SHISAN, FUSAI] then
			begin
				Result := True;
			end;
		end
		else								// PL
		begin
											// 損益か製造ならOK
			if MComboBox.ItemIndex in [SONEKI, SEIZOU] then
			begin
				Result := True;
			end;
		end;
    end;
end;

//**************************************************************************
//	Proccess	:  	親会社から関連付けた科目のﾂﾘｰを作成する <063>
//	Name	  	:	K.Katou
//	Date	  	:	2007/04/24
//	Parameter 	:	iMasterKbn	ﾏｽﾀ区分
//				:	exKmkNCode	科目内部ｺｰﾄﾞ
//				:	exKmkCNCode	科目別補助内部ｺｰﾄﾞ
//				:	bGrid		T: ｸﾞﾘｯﾄﾞで追加 F: 詳細で追加
//	Retrun	  	:	True or False
//  History     :   2000/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.MakeTreeRecord(iMasterKbn: Integer; exKmkNCode: Extended;
									exKmkCNCode: Extended; bGrid: Boolean = True): Boolean;
var
	bParentNode	:	Boolean;		// 親NodeがNilかどうかの判断
	bNodeNilFlag:	Boolean;		// 親NodeがNilかどうかの判断
    iSelected	:	Integer;
	iOyaCode	:	Integer;
	iWork		:	Integer;
	iKensu		:	Integer;		//	ﾚｺｰﾄﾞ件数
	Pos			:	Integer;		//	SPASEまでの桁数
	iLoop		:	Integer;
	iCodeAttr	:	Integer;
	iCodeDigit	:	Integer;
    exNCode		:	Extended;  		// 内部ｺｰﾄﾞ
	iCode		: 	Integer;		// 外部ｺｰﾄﾞ
	strSQL		: 	String;
	sDspName	:	String;
	DmqData		: 	TMQuery;
    DmqKmk		:	TMQuery;
	wRec		:	^TaikeiRec;
	wkRec		:	^TaikeiRec;
	TNode		:	TTreeNode;
	wkNode		:	TTreeNode;
	CNode		:	TTreeNode;
begin
	Result := False;

    iCode := 0;
    iKensu := 0;

	DmqData := TMQuery.Create(Self);					    // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, DmqData);	// 自社DBとMQueryの接続

	DmqKmk := TMQuery.Create(Self);					    	// MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, DmqKmk);	// 自社DBとMQueryの接続

    with DmqKmk do   						// 登録したﾚｺｰﾄﾞを取得
    begin
    	strSQL := 'SELECT MA.*, MB.DecoKbn ' +
        		'FROM KmkMA MA, KmkMB MB ' +
                'WHERE MA.MasterKbn = MB.MasterKbn ' +
                'AND MA.NCode = MB.NCode ' +
                'AND MA.CNCode = MB.CNCode ' +
                'AND MA.MasterKbn = :parMasterKbn ' +
                'AND MA.NCode = :parNCode ' +
                'AND MA.CNCode = :parCNCode ' +
                'AND MA.RDelKbn = 0 ';
		Close;
		SQL.Clear;
		SQL.Add(strSQL);

        ParamByName('parMasterKbn').AsInteger := iMasterKbn;
        ParamByName('parNCode').AsFloat := exKmkNCode;
        ParamByName('parCNCode').AsFloat := exKmkCNCode;

		if not Open() then
        begin
        	DmqData.Close;
        	DmqData.Free;
            DmqKmk.Close;
			DmqKmk.Free;
        	Exit;
        end;

        if Eof then							// 同期を取ったはずなのでなかったらｴﾗｰ
        begin
        	DmqData.Close;
        	DmqData.Free;
            DmqKmk.Close;
			DmqKmk.Free;
        	Exit;
        end;
    end;

    if iMasterKbn = MKBN_KAMOKU then
    begin
    	if DmqKmk.GetFld('SumKbn').AsInteger = SUMKBN_JITUZAI then
        begin
        	iSelected := 0;					// 実在科目
        end
        else
        begin
        	iSelected := 2;					// 合計科目
        end;
    end
    else
    begin
       	iSelected := 1;						// 科目別補助
    end;

	{科目加算体系マスタ(KmkTree)}
	if iSelected in [0, 2] then
	begin
		with DmqData do
		begin
			//	加算体系の内部ｺｰﾄﾞの件数取得
			strSQL := 'SELECT MAX(EntNo) ' +			//	登録NOの最大値
                      'FROM KmkTree ' +
                      'WHERE MasterKbn = 1 ' +			//	科目加算体系ﾏｽﾀ
                      'AND SumNCode  = :SakiCode';		//	加算先外部ｺｰﾄﾞ
			Close;
			SQL.Clear;
			SQL.Add(strSQL);
		end;
	end;

	case iSelected of
		0:									// 実在科目
		begin
			TNode       :=  TreeView.Selected;
			wkRec       :=  TNode.Data;
			bParentNode	:=	FALSE;

			if ( wkRec.Kbn = 1 ) then		//	実在/合計区分が合計の時
				exNCode	:=	wkRec^.NCode
			else	//	実在時
			begin
				TNode   :=  TNode.Parent;
				if ( TNode = nil ) then
				begin
					exNCode     :=  0;
					bParentNode	:=  TRUE;
				end
				else
				begin
					wkRec   :=  TNode.Data;
					exNCode :=  wkRec^.NCode;

					//親のｺｰﾄﾞが0の時
					if ( exNCode = 0 ) then
						bParentNode	:= TRUE;
				end;
			end;

			with DmqData do
			begin
				ParamByName('SakiCode').AsFloat := exNCode;

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					DmqData.Close;
					DmqData.Free;
		        	DmqKmk.Close;
		        	DmqKmk.Free;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
					iWork   :=  GetFld('MAX(KmkTree.EntNo)').AsInteger;
					iKensu  :=  Trunc(iWork / 100) * 100;
					if ( iKensu = 0 ) then
						iKensu  :=  100
					else
						iKensu  :=  iKensu + 100;
				end;

				if ( bParentNode = FALSE ) then	//	実在時で親NodeがNilでなければ
				begin
					//	加算体系へのﾚｺｰﾄﾞの追加
					Close;
					SQL.Clear;
					SQL.Add('INSERT INTO KmkTree ( ' + 	//	科目加算体系ﾏｽﾀ
							'        MasterKbn     ' +	//	ﾏｽﾀ区分
							'       ,SumNCode      ' +	//	加算先外部ｺｰﾄﾞ
							'       ,EntNo         ' +	//	登録No
							'       ,BasedNCode    ' +	//	加算元外部ｺｰﾄﾞ
							'       ,AddKbn        ' +	//	加算区分
							'       ,MasterKbn2    ' +	//	ﾏｽﾀ区分
							'       ,UpdTantoNCode ' +	//  更新担当者内部ｺｰﾄﾞ<080>
							') VALUES (            ' +
							'        1             ' +	//	ﾏｽﾀ区分(1:勘定科目)
							'       ,:SakiCode     ' +	//	加算先内部ｺｰﾄﾞ
							'       ,:T_No         ' +	//	登録No
							'       ,:MotoCode     ' +	//	加算元内部ｺｰﾄﾞ
							'       ,0             ' +	//	加算区分(0:加算)
							'       ,1             ' +	//	ﾏｽﾀ区分(1:勘定科目)
							'       ,:UpdTantoNCode' +	//  更新担当者内部ｺｰﾄﾞ<080>
							')                     ');

					ParamByName('SakiCode') .AsFloat    :=  exNCode;
					ParamByName('T_No')     .AsInteger  :=  iKensu;
					ParamByName('MotoCode') .AsFloat    :=  DmqKmk.GetFld('NCode').AsFloat;
                    ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

					//	ｴﾗｰの判定
					if ( ExecSQL = FALSE ) then
					begin
						ErrorMessageDsp(DmqData);
						DmqData.Close;
						DmqData.Free;
       		        	DmqKmk.Close;
			        	DmqKmk.Free;
						Exit;
					end;

					//	ﾃｰﾌﾞﾙ更新履歴
					TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;
				end;
			end;

			Pos	:= MJSHanPos(' ', MTab_N.BorderCaption);			//	先頭からSPACEまでの桁数COUNT
			if ( Pos <> 0 ) then
			begin
                //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
				iOyaCode :=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));

				// Selectedのセット
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wRec :=	TreeView.Items[iLoop].Data;
	    			if ( wRec.GCode = iOyaCode ) then
	    	    	begin
						wkNode          :=  TreeView.Items[iLoop];

						New(wkRec);
                        wKRec.NCode     :=  DmqKmk.GetFld('NCode').AsFloat;   // 科目内部ｺｰﾄﾞ
                        wkRec.CNCode    :=  DmqKmk.GetFld('CNCode').AsFloat;  // 細目内部ｺｰﾄﾞ
						wkRec.GCode	    :=  DmqKmk.GetFld('GCode').AsInteger; // 科目外部ｺｰﾄﾞ
                        wkRec.SubCode   :=  '0';                              // 細目外部ｺｰﾄﾞ<013>
						wkRec.Kbn	    :=  0;
						wkRec.KoteiKbn  :=  0;
						wkRec.MasKbn    :=  1;
						wkRec.Name	    :=  DmqKmk.GetFld('SimpleName').AsString; //	簡略名称
						wkRec.AddKbn    :=  0;
						wkRec.ChildKbn  :=  FALSE;
						wkRec.NotAdd    :=  1;
						wkRec.Syokuchi  :=  0;
                        wkRec.CodeAttr  :=  0;
                        wkRec.CodeDigit :=  0;

						if ( m_F8CopyFlag = FALSE ) then
				           	CNode := TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,wkRec.Name),wkRec)
						else
						begin
							//	装飾区分
							if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
							begin
								sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
					           	CNode	    :=  TreeView.Items.AddChildobject(wkNode,sDspName,wkRec);
							end
							else
								CNode       :=  TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,wkRec.Name),wkRec);
						end;

			            CNode.ImageIndex    :=  2;
						Cnode.SelectedIndex :=  8;
						TreeView.Items[iLoop].Expanded := TRUE;
		    	    end;
	    		end;
			end
			//はぐれ時
			else
			begin
				New(wkRec);
                wkRec.NCode     :=  DmqKmk.GetFld('NCode').AsFloat;       // 科目内部ｺｰﾄﾞ
                wkRec.CNCode    :=  DmqKmk.GetFld('CNCode').AsFloat;      // 細目内部ｺｰﾄﾞ
				wkRec.GCode	    :=  DmqKmk.GetFld('GCode').AsInteger;     // 科目外部ｺｰﾄﾞ
                wkRec.SubCode   :=  '0';    // <013>
				wkRec.Kbn	    :=  0;
				wkRec.KoteiKbn  :=  0;
				wkRec.MasKbn    :=  1;
				wkRec.Name	    :=  DmqKmk.GetFld('SimpleName').AsString; // 簡略名称
				wkRec.AddKbn    :=  0;
				wkRec.ChildKbn  :=  FALSE;
				wkRec.NotAdd    :=  0;
                wkRec.Syokuchi  :=  0;
                wkRec.CodeAttr  :=  0;
                wkRec.CodeDigit :=  0;

				if ( m_F8CopyFlag = FALSE ) then
		           	CNode   :=  TreeView.Items.AddChildobject(nil,MakeDspString(wkRec.GCode,wkRec.Name),wkRec)
                else
				begin
					//	装飾区分
					if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
					begin
						sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
			           	CNode	    :=  TreeView.Items.AddChildobject(nil,sDspName,wkRec);
					end
					else
						CNode       :=  TreeView.Items.AddChildobject(nil,MakeDspString(wkRec.GCode,wkRec.Name),wkRec);
				end;

	            CNode.ImageIndex	:=  2;
				CNode.SelectedIndex :=  8;
			end;

			gbKmkTree2Flag := TRUE;

            if bGrid then
            begin
				// MemDataにｾｯﾄ
				gbChangeFlg := True;		// postの処理を通さないﾌﾗｸﾞ
											// 内部ｺｰﾄﾞ
				MemZitsu.FieldByName('NCode').AsFloat := exKmkNCode;
											// 外部ｺｰﾄﾞ
				MemZitsu.FieldByName('Code').AsInteger := DmqKmk.GetFld('GCode').AsInteger;
											// 連想
				MemZitsu.FieldByName('Ren').AsString := DmqKmk.GetFld('Renso').AsString;
											// 正式名称
				MemZitsu.FieldByName('LongName').AsString := DmqKmk.GetFld('LongName').AsString;
											// 簡略名称
				MemZitsu.FieldByName('SName').AsString := DmqKmk.GetFld('SimpleName').AsString;
											// 性格ｺｰﾄﾞ
				MemZitsu.FieldByName('SeikakuData').AsInteger := DmqKmk.GetFld('CharCode').AsInteger;
											// 分析ｺｰﾄﾞ
				MemZitsu.FieldByName('BunsekiNO').AsInteger := DmqKmk.GetFld('AnalyzeCode').AsInteger;
				MemZitsu.FieldByName('Bunseki').AsString := GetSKmkMA(BUNSEKI, DmqKmk.GetFld('AnalyzeCode').AsInteger,iWork);
				MemZitsu.Post;
				gbChangeFlg := False;

				SetLength(m_aCmnt_Jitsu,Length(m_aCmnt_Jitsu)+1);
				m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].NCode    :=  DmqKmk.GetFld('NCode').AsFloat;
        	    m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].SubNCode :=  DmqKmk.GetFld('CNCode').AsFloat;
				m_aCmnt_Jitsu[Length(m_aCmnt_Jitsu)-1].Cmnt     :=  '';
            end;
			m_NewFlag   :=  TRUE;			// 新規登録されたのでﾌﾗｸﾞをTRUEにする
			m_NewFlag_J :=  TRUE;			// 実在科目の新規登録ﾌﾗｸﾞ <100>ADD
		end;
		1:									// 科目別補助
		begin
			TNode   :=  TreeView.Selected;
			wkRec   :=  TNode.Data;

    	    // ------------------------
	        //	    細目科目
        	// ------------------------
			if ( wkRec.MasKbn = 2 ) then
			begin
				TNode := TNode.Parent;
        	    if ( TNode = nil ) then
				begin
					showmessage('科目別補助の親が不明･･･03');
					DmqData.Close;
					DmqData.Free;
		        	DmqKmk.Close;
		        	DmqKmk.Free;
                    Exit;
				end;
				wkRec   :=  TNode.Data;
				iCode   :=  wkRec^.GCode;
			end
    	    // ------------------------
	        //      実在/合計科目
        	// ------------------------
			else if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
	        begin
				iCode   :=  wkRec^.GCode;
	        end;

            //	先頭からSPACEまでの桁数COUNT
			Pos		 := MJSHanPos(' ', MTab_N.BorderCaption);
            //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
			iOyaCode :=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));

	        // ｺｰﾄﾞ属性・桁数の取得
            iCodeAttr := DmqKmk.GetFld('CodeAttr').AsInteger;
            iCodeDigit := DmqKmk.GetFld('CodeDigit').AsInteger;

		    // Selectedのセット
			for iLoop := 0 to TreeView.Items.Count-1 do
		    begin
				wRec :=	TreeView.Items[iLoop].Data;
	    		if ( wRec.GCode = iOyaCode ) and ( wRec.MasKbn = 1 ) and ( wRec.Kbn = 0 ) then
	    	    begin
					wkNode := TreeView.Items[iLoop];
                    New(wkRec);
                    wkRec.NCode     :=  DmqKmk.GetFld('NCode').AsFloat;
                    wkRec.CNCode    :=  DmqKmk.GetFld('CNCode').AsFloat;
					wkRec.GCode	    :=  iCode;
                    wkRec.SubCode   :=  DmqKmk.GetFld('SubCode').AsString;
					wkRec.Kbn		:=	0;
					wkRec.KoteiKbn	:=	0;
					wkRec.MasKbn	:=	2;
					wkRec.Name		:=	DmqKmk.GetFld('SimpleName').AsString;
					wkRec.AddKbn	:=  0;
        		    wkRec.ChildKbn	:=	FALSE;
					wkRec.NotAdd	:=	1;
                    wkRec.CodeAttr  :=  iCodeAttr;
                    wkRec.CodeDigit :=  iCodeDigit;

                    if ( m_SyokuchiDlg ) then
                            wkRec.Syokuchi  :=  1
                    else    wkRec.Syokuchi  :=  0;

                    fnSubNCodeCheck(iCode, DmqKmk.GetFld('SubCode').AsString,
                                    wkRec.NCode,wkRec.Syokuchi);

           			CNode :=  TreeView.Items.AddChildobject(wkNode,
                                                            MakeDspString_Sai(wkRec.SubCode,
                                                                              wkRec.Name,
                                                                              wkRec.CodeAttr,
                                                                              wkRec.CodeDigit
                                                                              ),
                                                            wkRec);
		            CNode.ImageIndex    :=  3;
					Cnode.SelectedIndex :=  10;
					TreeView.Items[iLoop].Expanded	:=	TRUE;
		        end;
    		end;

			if ( TreeView_EnsureVisible(TreeView.Handle, TreeView.Selected.ItemID) ) then
				TreeView.Invalidate;

			m_SwkInfo.MessageFlag := TRUE;

            if bGrid then
            begin
				// MemDataにｾｯﾄ
				gbChangeFlg := True;		// postの処理を通さないﾌﾗｸﾞ
				MemSai.FieldByName('NCode') .AsFloat := exKmkNCode;
				MemSai.FieldByName('CNCode').AsFloat := exKmkCNCode;
				MemSai.FieldByName('SCode').AsString := fnSaimokuSetAttr(0, //  細目ｺｰﾄﾞ(属性対応)
                                                                    DmqKmk.GetFld('SubCode').AsString,
                                                                    iCodeAttr,
                                                                    iCodeDigit);
				MemSai.FieldByName('SRen').AsString := DmqKmk.GetFld('Renso').AsString;
    	        MemSai.FieldByName('SLongName').AsString := DmqKmk.GetFld('LongName').AsString;
        	    MemSai.FieldByName('SSName').AsString := DmqKmk.GetFld('SimpleName').AsString;
				MemSai.Post;
				gbChangeFlg := False;

				SetLength(m_aCmnt_Sai,Length(m_aCmnt_Sai)+1);
        	    m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].NCode    :=  DmqKmk.GetFld('NCode').AsFloat;
				m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].SubNCode :=  DmqKmk.GetFld('CNCode').AsFloat;
				m_aCmnt_Sai[Length(m_aCmnt_Sai)-1].Cmnt     :=  '';
            end;
		end;
		2:									// 合計科目
		begin
			TNode           :=  TreeView.Selected;
			wkRec           :=  TNode.Data;
			bNodeNilFlag    :=	FALSE;

            // -----------------
            //	    実在時
            // -----------------
			if ( wkRec.MasKbn = 1 ) and ( wkRec.Kbn = 0 ) then
			begin
				TNode := TNode.Parent;
				if ( TNode = nil ) then
				begin
					exNCode         :=  0;
					bNodeNilFlag    :=	TRUE;
				end
				else
				begin
					wkRec   :=  TNode.Data;
					exNCode :=  wkRec^.NCode;
				end;
			end
			else
				exNCode :=  wkRec^.NCode;

			if ( exNCode = 0 ) then
				bNodeNilFlag    :=  TRUE;

			with DmqData do
			begin
				ParamByName('SakiCode').AsFloat   :=  exNCode;		//	加算先内部ｺｰﾄﾞ

				//	ｴﾗｰの判定
				if ( Open = FALSE ) then
				begin
					ErrorMessageDsp(DmqData);
					DmqData.Close;
					DmqData.Free;
		        	DmqKmk.Close;
		        	DmqKmk.Free;
					Exit;
				end;

				if ( EOF <> TRUE ) then
				begin
					iWork  := GetFld('MAX(KmkTree.EntNo)').AsInteger;	//	登録NOの最大値
					iKensu := Trunc(iWork / 100) * 100;
					if ( iKensu = 0 ) then
						    iKensu := 100
					else    iKensu := iKensu + 100;
				end;

				if ( bNodeNilFlag = FALSE ) then
				begin
					//	加算体系へのﾚｺｰﾄﾞの追加
					Close;
					SQL.Clear;
					SQL.Add('INSERT INTO KmkTree ( ' + 	//	加算体系ﾏｽﾀ
							'        MasterKbn     ' +	//	ﾏｽﾀ区分
							'       ,SumNCode      ' +	//	加算先外部ｺｰﾄﾞ
							'       ,EntNo         ' +	//	登録NO
							'       ,BasedNCode    ' +	//	加算元外部ｺｰﾄﾞ
							'       ,AddKbn        ' +	//	加算区分
							'       ,MasterKbn2    ' +	//	ﾏｽﾀ区分
							'       ,UpdTantoNCode ' +	//	更新担当者内部ｺｰﾄﾞ
							') VALUES (            ' +
							'        1             ' +	//	ﾏｽﾀ区分(1:勘定科目)
							'       ,:SakiCode     ' +	//	加算先外部ｺｰﾄﾞ
							'       ,:T_No         ' +	//	登録NO
							'       ,:MotoCode     ' +	//	加算元外部ｺｰﾄﾞ
							'       ,0             ' +	//	加算区分(0:加算)
							'       ,1             ' +	//	ﾏｽﾀ区分(1:勘定科目)
							'       ,:UpdTantoNCode' +	//	更新担当者内部ｺｰﾄﾞ
							')                     ');

					ParamByName('SakiCode') .AsFloat    :=  exNCode;
					ParamByName('T_No')     .AsInteger  :=  iKensu;
					ParamByName('MotoCode') .AsFloat    :=  DmqKmk.GetFld('NCode').AsFloat;
                    ParamByName('UpdTantoNCode').AsCurrency := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD; //  更新担当者内部ｺｰﾄﾞ<080>

					//	ｴﾗｰの判定
					if ( ExecSQL = FALSE ) then
					begin
						ErrorMessageDsp(DmqData);
						DmqData.Close;
						DmqData.Free;
			        	DmqKmk.Close;
			        	DmqKmk.Free;
						Exit;
					end;

					//	ﾃｰﾌﾞﾙ更新履歴
					TableHistory.KmkTree_Kan :=	TABLE_IN_UPDATE;
				end;
			end;

            //	先頭からSPACEまでの桁数COUNT
			Pos	:= MJSHanPos(' ', MTab_N.BorderCaption);
			if ( Pos <> 0 ) then
			begin
                //	上記で取得した桁数-1までの桁数をｺﾋﾟｰ
				iOyaCode :=	StrToInt(MJSHanCopy(MTab_N.BorderCaption, 1, Pos-1));

			    // Selectedのセット
				for iLoop := 0 to TreeView.Items.Count-1 do
			    begin
					wRec :=	TreeView.Items[iLoop].Data;
	    			if ( wRec.GCode = iOyaCode ) then
	    	    	begin
						wkNode := TreeView.Items[iLoop];
						New(wkRec);
						wkRec.NCode		:=	DmqKmk.GetFld('NCode') .AsFloat;
                        wkRec.CNCode    :=  DmqKmk.GetFld('CNCode').AsFloat;
						wkRec.GCode		:=	DmqKmk.GetFld('GCode') .AsInteger;
                        wkRec.SubCode   :=  '0';    // <013>
						wkRec.Kbn		:=	1;
						wkRec.KoteiKbn	:=	0;
						wkRec.MasKbn	:=	1;
						wkRec.Name		:=	DmqKmk.GetFld('SimpleName').AsString;
						wkRec.AddKbn	:=  0;
						wkRec.ChildKbn	:=	FALSE;
						wkRec.NotAdd	:=	1;
                        wkRec.Syokuchi  :=  0;
                        wkRec.CodeAttr  :=  0;
                        wkRec.CodeDigit :=  0;

						if ( m_F8CopyFlag = FALSE ) then
						begin
							sDspName    :=	GetSousyoku(wkRec.Name,(DmqKmk.GetFld('DecoKbn').AsInteger));
		    		       	CNode	    :=  TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,sDspName),wkRec);
						end
						else
						begin
							//	装飾区分
							if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
							begin
								sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
					           	CNode	    :=  TreeView.Items.AddChildobject(wkNode,sDspName,wkRec);
							end
							else
							begin
								sDspName    :=	GetSousyoku(wkRec.Name,(DmqKmk.GetFld('DecoKbn').AsInteger));
			    		       	CNode	    :=  TreeView.Items.AddChildobject(wkNode,MakeDspString(wkRec.GCode,sDspName),wkRec);
							end;
						end;

        			    CNode.ImageIndex    :=  0;
						Cnode.SelectedIndex :=  1;
						TreeView.Items[iLoop].Expanded := TRUE;
			        end;
    			end;
			end
            else
			begin
				New(wkRec);
				wkRec.NCode		:=	DmqKmk.GetFld('NCode') .AsFloat;
                wkRec.CNCode    :=  DmqKmk.GetFld('CNCode').AsFloat;
				wkRec.GCode		:=	DmqKmk.GetFld('GCode') .AsInteger;
                wkRec.SubCode   :=  '0';    // <013>
				wkRec.Kbn		:=	1;
				wkRec.KoteiKbn	:=	0;
				wkRec.MasKbn	:=	1;
				wkRec.Name		:=	DmqKmk.GetFld('SimpleName').AsString;
				wkRec.AddKbn	:=  0;
				wkRec.ChildKbn	:=	FALSE;
				wkRec.NotAdd	:=	0;
                wkRec.Syokuchi  :=  0;
                wkRec.CodeAttr  :=  0;
                wkRec.CodeDigit :=  0;

				if ( m_F8CopyFlag = FALSE ) then
				begin
					sDspName    :=	GetSousyoku(wkRec.Name,(DmqKmk.GetFld('DecoKbn').AsInteger));
   			       	CNode       :=  TreeView.Items.AddChildobject(nil,MakeDspString(wkRec.GCode,sDspName),wkRec);
				end
				else
				begin
					//	装飾区分
					if ( m_DLGCopyInfo.Choice = FALSE ) or ( m_DLGCopyInfo.OutInfo = TRUE ) then
					begin
						sDspName    :=  MakeDspString(wkRec.GCode,GetSousyoku(wkRec.Name,m_CopyInfo.Sousyoku));
			           	CNode	    :=  TreeView.Items.AddChildobject(nil,sDspName,wkRec);
					end
					else
					begin
						sDspName    :=	GetSousyoku(wkRec.Name,(DmqKmk.GetFld('DecoKbn').AsInteger));
   				       	CNode       :=  TreeView.Items.AddChildobject(Nil,MakeDspString(wkRec.GCode,sDspName),wkRec);
					end;
				end;

				CNode.ImageIndex    :=  0;
				Cnode.SelectedIndex :=  1;
			end;
			gbKmkTree2Flag  :=  TRUE;

            if bGrid then
            begin
				// MemDataにｾｯﾄ
				gbChangeFlg := True;		// postの処理を通さないﾌﾗｸﾞ
        	    MemGou.FieldByName('NCode').AsFloat :=  exKmkNCode;
				MemGou.FieldByName('GCode').AsInteger := DmqKmk.GetFld('GCode').AsInteger;
				MemGou.FieldByName('GRen').AsString := DmqKmk.GetFld('Renso').AsString;
				MemGou.FieldByName('GLongName').AsString := DmqKmk.GetFld('LongName').AsString;
				MemGou.FieldByName('GSName').AsString := DmqKmk.GetFld('SimpleName').AsString;
											// 装飾区分
				MemGou.FieldByName('SousyokuData').AsInteger := DmqKmk.GetFld('DecoKbn').AsInteger;
				MemGou.Post;
				gbChangeFlg := False;

				SetLength(m_aCmnt_Goukei,Length(m_aCmnt_Goukei)+1);
				m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].NCode      :=  DmqKmk.GetFld('NCode').AsFloat;
		        m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].SubNCode   :=  DmqKmk.GetFld('CNCode').AsFloat;
				m_aCmnt_Goukei[Length(m_aCmnt_Goukei)-1].Cmnt       :=  ' ';
            end;
			m_NewFlag   :=  TRUE;			// 新規登録されたのでﾌﾗｸﾞをTRUEにする
		end;
	end;

	gbFusenFlag	 :=	FALSE;
	m_F8CopyFlag := FALSE;

	DmqData.Close;
	DmqData.Free;
    DmqKmk.Close;
    DmqKmk.Free;
	Result := True;
end;
// <063> ADD end
// <066> ADD start
//**********************************************************************
//*		Proccess	:	ｸﾞﾙｰﾌﾟ管理時の一括配信ﾀﾞｲｱﾛｸﾞ呼出 <066>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2007/05/15
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//**********************************************************************
procedure TJNTCRP009001f.CallSyncDlg();
var
	objSync	: TJNTSyncMasterIF;				// 配信ﾀﾞｲｱﾛｸﾞIF
	aryID 	: array[0..1] of Integer;
begin
	aryID[0] := JNTSYNC_KMKMA;				// KmkMA 勘定科目
	aryID[1] := JNTSYNC_KMKMB;				// KmkMB 勘定科目詳細

	objSync := TJNTSyncMasterIF.Create(AOwner, m_pRec);

	try
		objSync.ShowDlg(aryID);
	finally
		objSync.Free;
	end;

end;
// <066> ADD end

//**********************************************************************
//	Proccess	:	ｾｯｼｮﾝ管理ｽﾄｱﾄﾞの実行	<077>
//	Name		:	T.Seki
//	Date		:	2007/12/21
//	Parameter	:	iSyori  0=設定 1=開放
//	Return		:	なし
//	History		:	9999/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**********************************************************************
procedure TJNTCRP009001f.SessionPractice(iSyori: Integer);
begin
												// 処理区分
	SPMsHist.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
	SPMsHist.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
    SPMsHist.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
												// 担当者名称
    SPMsHist.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
    SPMsHist.ParamByName('@pSysCode').AsInteger			:= m_pRec^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
    SPMsHist.ParamByName('@pOptCode').AsInteger			:= m_pRec^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
    SPMsHist.ParamByName('@pPrgCode').AsInteger			:= m_pRec^.m_iProgramCode;

// Delphi10 ST
//    SPMsHist.Prepare;							// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
    SPMsHist.FetchOptions.Items := SPMsHist.FetchOptions.Items - [fimeta];
// Delphi10 ED
    SPMsHist.ExecProc;							// ｽﾄｱﾄﾞ実行
// Delphi10 ST
//	SPMsHist.UnPrepare;							// ﾘｿｰｽを解放する
// Delphi10 ED

												// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
												// 処理区分
		SPMsHistParent.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
		SPMsHistParent.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
												// 担当者名称
    	SPMsHistParent.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pSysCode').AsInteger		:= m_pRec^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pOptCode').AsInteger		:= m_pRec^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pPrgCode').AsInteger		:= m_pRec^.m_iProgramCode;

// Delphi10 ST
//    	SPMsHistParent.Prepare;					// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
        SPMsHistParent.FetchOptions.Items := SPMsHistParent.FetchOptions.Items - [fimeta];
// Delphi10 ED
    	SPMsHistParent.ExecProc;				// ｽﾄｱﾄﾞ実行
// Delphi10 ST
//		SPMsHistParent.UnPrepare;				// ﾘｿｰｽを解放する
// Delphi10 ED
	end;
end;

//<083>↓
//**********************************************************************
//*		Proccess	:	科目の銀行補助採用Check
//*		Name		:	S.Watanabe
//*		Date		:	2008/08/04
//*		Parameter	:
//*		Return		:	TRUE/FALSE
//*		History		:
//**********************************************************************
function TJNTCRP009001f.HojBankUseCheck():Boolean;
var
	DmqData		:	TMQuery;
	bBankUse	:	Boolean;
	cNode		:	TTreeNode;		//	選択されているNode
	wkRec		:	^TaikeiRec;		//	選択されているNodeの構造体
	Bunseki		:	Integer;
begin
	//	初期処理
	bBankUse	:=	FALSE;

    //	MQueryの構築
	DmqData := TMQuery.Create( Self );
    //	DBとMQueryの接続
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

	with DmqData do
	begin
		SQL.Add('SELECT                     ');
		SQL.Add('   BankUse              	');	//	銀行ｺｰﾄﾞ
		SQL.Add('FROM KmkMA                 '); //	勘定科目基本ﾏｽﾀ
		SQL.Add('WHERE MasterKbn = :MasKbn  '); //	ﾏｽﾀ区分
		SQL.Add('  AND SumKbn    = 0        ');	//	実在/合計区分(0:実在)
        SQL.Add('  AND RDelKbn   = 0        ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ
		SQL.Add('  AND GCode     = :Code    ');	//	外部ｺｰﾄﾞ

        ParamByName('MasKbn')   .AsInteger	:=	1;						//	ﾏｽﾀ区分(1:勘定科目)
		ParamByName('Code')  .AsInteger	:=	StrToIntDef(ECode.Text,0);		//	実在ｺｰﾄﾞ

		//	ｴﾗｰの判定
		if Open = FALSE then
		begin
			ErrorMessageDsp(DmqData);
			DmqData.Close;
			DmqData.Free;
			Result	:=	FALSE;
			Exit;
		end;

        while (EOF <> TRUE) do
        begin
            if ((GetFld('BankUse').AsFloat) = 0 ) then
                bBankUse	:=	FALSE	//	ない時
            else
            begin
                bBankUse	:=	TRUE;	//	あった時
                break;
            end;
            next;
        end;
	end;
	DmqData.Close;
	DmqData.Free;

	result	:=	bBankUse;
end;

//**************************************************************************
//	Proccess	:	実績のAddKbnの更新（銀行のときのみ）
//	Name		:	S.Watanabe
//	Date		:	2008/ 08 / 01
//	Parameter	:	ParaMQuery	書き込み用TMQuery
//	Retrun		:
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP009001f.DataWrite_AddKbn_Bank(pKmkNCode : Extended; ParaMQuery: TMQuery);
begin

	with ParaMQuery do
	begin
		Close;
		SQL.Clear;
		SQL.Add(' update SumBHSM sm set DebitSum = 0, CreditSum = 0 ,AddKbn = 1 from hojyoma ma , dtmain_mas dt ');
		SQL.Add(' where sm.nmonth < ');
		SQL.Add(' ( case DT.StrMonth ');
		SQL.Add('   when NULL then 1 ');
		SQL.Add('   when 0 then 1 ');
		SQL.Add('   else DT.StrMonth ');
		SQL.Add('   end ');
		SQL.Add(' ) ');
		SQL.Add(' and sm.KmkNCode = :iNCode ');	// 当該科目コード
		SQL.Add(' and sm.hojyoKbn = 21 ');
		SQL.Add(' and sm.HojyoNCode = ma.NCode ');
		SQL.Add(' and ma.masterKbn =21 ');
		SQL.Add(' and ma.SumKbn = 0 ');
		SQL.Add(' and ma.RDelKbn = 0 ');

		// 科目コード
		SetFld('iNCode').AsFloat 	:= pKmkNCode;

		// DB更新
		if (ExecSQL = False) then
		begin
			ErrorMessageDsp(ParaMQuery);
			MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			ParaMQuery.Close;
			Exit;
		end;
	end;
end;
//<083>↑

//**************************************************************************
//	Proccess	:	名称から改行コードを削除する  <DKAI>
//	Name		:	E.Nanba
//	Date		:	2008 / 08 / 27
//	Parameter	:	sData
//	Retrun		:	String
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.fnDelCRLF(sData: String): String;
begin
	// 行区切り文字をCR/LFにしてカット
	Result := StringReplace(AdjustLineBreaks(sData), #13#10, '', [rfReplaceAll,rfIgnoreCase]);
end;

//**************************************************************************
//	Proccess	:	実在科目グリッド行変更時 ツリーノード検索  <084>
//	Name		:	E.Nanba
//	Date		:	2008 / 09 / 04
//	Parameter	:	Nothing
//	Retrun		:	Nothing
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP009001f.Search_Zitsu;
var
    wkRec   : ^TaikeiRec;
	wkCode	: Integer;
	cOyaNode: TTreeNode;
begin
	if gbChangeFlg then		// 最初の表示でｲﾍﾞﾝﾄが起こるのでその時は処理をしない
		Exit;
	if TreeView.Selected = nil then
		Exit;
	if TreeView.Selected.Data = nil then
		Exit;

	// グリッド選択行情報（実在科目）
	wkCode := DZitsuGrid.DataSource.DataSet.FieldByName('Code').AsInteger;

	if wkCode <= 0 then
		Exit;

	wkRec := TreeView.Selected.Data;

	if wkRec.Kbn = 1 then
	begin
		// 選択ノードが合計科目
		cOyaNode := TreeView.Selected;
	end
	else begin
		// 選択ノードが実在科目

		// グリッドとツリー選択が一致するときは抜ける
		if (wkRec.GCode = wkCode) and (wkRec.MasKbn = 1) then
			Exit;

		if TreeView.Selected.Parent = nil then
		begin
			fnSearch_HagureNode(wkCode);	// はぐれノード検索
			Exit;
		end
		else
			cOyaNode := TreeView.Selected.Parent;
	end;

	// 子ノード検索
	if fnSearch_ChildNode(cOyaNode, wkCode) = False then
	begin
		// 選択ノードが、検索対象ノードと同じレベルの合計科目のときは１回目の検索でヒットしない。
		// １つ上の合計科目ノードで再度検索する。
		if (wkRec.Kbn = 1) and (cOyaNode.Parent <> nil) then
		begin
			cOyaNode := cOyaNode.Parent;
			fnSearch_ChildNode(cOyaNode, wkCode);
		end;
	end;
end;

//**************************************************************************
//	Proccess	:	はぐれノード検索  <084>
//	Name		:	E.Nanba
//	Date		:	2008 / 09 / 04
//	Parameter	:	iCode		検索科目コード
//	Retrun		:	Boolean
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.fnSearch_HagureNode(iCode: Integer): Boolean;
var
	cNode	: TTreeNode;
	wkRec	: ^TaikeiRec;
begin
	Result := False;

	// ツリーの先頭ノード
	cNode := TreeView.Items[0];

	while True do
	begin
		if cNode = nil then
			Break;

		wkRec := cNode.Data;

		// 実在勘定科目を検索
		if (wkRec.GCode = iCode) and (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
		begin
			Result := True;
			Break;
		end;

		cNode := cNode.GetNextSibling;	// 同レベルの次ノード取得
	end;

	if Result then
	begin
		m_GridChgFlg   := True;

		// ノード選択 (Changeｲﾍﾞﾝﾄ発生)
		cNode.Selected := True;

		m_GridChgFlg   := False;
	end;
end;

//**************************************************************************
//	Proccess	:	子ノード検索  <084>
//	Name		:	E.Nanba
//	Date		:	2008 / 09 / 04
//	Parameter	:	cOyaNode	親ノード
//					iCode		検索科目コード
//	Retrun		:	Boolean
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP009001f.fnSearch_ChildNode(cOyaNode: TTreeNode; iCode: Integer): Boolean;
var
	cNode	: TTreeNode;
	wkRec	: ^TaikeiRec;
begin
	Result := False;

	// 親ノードの最初の子ノードから検索開始
	cNode := cOyaNode.GetNext;

	while True do
	begin
		if cNode = nil then
			Break;

		wkRec := cNode.Data;

		// 実在勘定科目を検索
		if (wkRec.GCode = iCode) and (wkRec.MasKbn = 1) and (wkRec.Kbn = 0) then
		begin
			Result := True;
			Break;
		end;

		cNode := cOyaNode.GetNextChild(cNode);	// 次の子ノード取得
	end;

	if Result then
	begin
		m_GridChgFlg   := True;

		// ノード選択 (Changeｲﾍﾞﾝﾄ発生)
		cNode.Selected := True;

		m_GridChgFlg   := False;
	end;
end;

//**************************************************************************
//	Proccess	:	科目別補助グリッドのみ再表示  <084>
//	Name		:	E.Nanba
//	Date		:	2008 / 09 / 04
//	Parameter	:	cOyaNode	親ノード
//					iCode		検索科目コード
//	Retrun		:	Boolean
//	Memo		:	<084>修正により、実在科目グリッド選択行変更すると
//					ツリービュー選択ノードも再選択されるようになった。
//					→TreeViewChangeイベントで全グリッド再表示すると時間が掛かるので
//					　科目別補助グリッドのみ再表示する。
//	History		:	2001 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP009001f.TreeViewChange_Sub;
var
	dqData	: TMQuery;
	wkRec	: ^TaikeiRec;
begin
	if TreeView.Selected = nil then
		Exit;
	if TreeView.Selected.Data = nil then
		Exit;

	gbChangeFlg := TRUE;

	wkRec := TreeView.Selected.Data;	// 選択中ノード

	LevelDspSaimoku(wkRec.NCode);

	giG_Code := IntToStr(wkRec.GCode);
	giMasKbn := wkRec.MasKbn;
//	giTaihi_OyaCode
//	giKamoku := ZITSUZAI;

	gbChangeFlg := FALSE;
end;

//-----------------------------------------------------------------------------
// fnSearchCheck2           <092> ADD
//	< 特定科目に属しているか判定する >
//      PARAM   :   OyaNCode   :   特定科目内部ｺｰﾄﾞ  NCode   :   科目内部ｺｰﾄﾞ
//      VAR     :
//      RETURN  :   TRUE:属する FALSE:属しない
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP009001f.fnSearchCheck2(Qe: TMQuery;OyaNCode,NCode: Extended): Boolean;
var
    bReturn   :	Boolean;
begin

    with Qe do
    begin
        Close();
        SQL.Clear();
        SQL.Add('Select SumNCode From KmkTree Where BasedNCode = :ExNCode');

        ParamByName('ExNCode').AsFloat  :=  NCode;

        //	ｴﾗｰの判定
        if ( Open = FALSE ) then
        begin
            ErrorMessageDsp(Qe);
            Result	:=	FALSE;
            Exit;
        end;

        if ( EOF <> TRUE ) then
        begin
            if (OyaNCode = GetFld('SumNCode').AsFloat) then
                            bReturn	:=	TRUE
            else
                bReturn := fnSearchCheck2(Qe,OyaNCode,GetFld('SumNCode').AsFloat);
        end
        else
        begin
            bReturn	:= FALSE;
        end;
    end;

    Result	:=	bReturn;

end;

// <125> Add start
//**************************************************************************
//*		Proccess    	:  	管理科目基本マスタの要約分析コードをセットする
//*  	Name        	:   T.Morie(CYB)
//*  	Date        	:	2018/04/19
//*  	Parameter   	:   MasterKbn   マスタ区分 (管理科目基本マスタ)
//*                     :   Code        分析コード値
//*                     :   YouBun      要約分析コード値
//*  	Return      	:   False   :   メッセージで「いいえ」を押下
//*                                     DBエラー
//*                         True    :   False以外の場合
//*		History			:	XXXX/XX/XX  XX修正者XX（所属）
//*                 		XXXXXXXX修正内容
//**************************************************************************
function  TJNTCRP009001f.SetYouBun(MasterKbn: Integer; Code: Integer; var YouBun: Integer): Boolean;
var
    DmqData     :   TMQuery;        //  クエリ
    iSaiKbn     :   Integer;        //  採用区分
    iSaiFlg     :   Integer;        //  採用フラグ(1:メール会計,2:部署入力,4:部署参照)
    iLoop       :   Integer;        //  ループ変数
    iDummy      :   Integer;        //  ダミー変数
    sMsg        :   String;         //  メッセージ
    iRet        :   Integer;        //  戻り値
begin
    Result      :=  True;
    iSaiFlg     :=  0;
    iRet        :=  0;

    //  MQueryの構築、DBへの接続
    DmqData := TMQuery.Create(Self);
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

    //  要約分析コード取得
    GetSKmkMA(MasterKbn,Code,YouBun);

    //  分析コード=[52:少数株主持分]、要約分析コード<>[10:剰余金] のとき
    if (Code = 52) and (YouBun <> 10) then
    begin
        //  管理科目基本マスタ(SKmkMA)更新
        YouBun := 10;
        with DmqData do
        begin
            Close;
            SQL.Clear;
            SQL.Add('UPDATE ');
            SQL.Add(    'SKmkMA ');
            SQL.Add('SET ');
            SQL.Add(    'AnalyzeCode = :BunCode ');
            SQL.Add('WHERE ');
            SQL.Add(    'MasterKbn = :MasKbn AND ');
            SQL.Add(    'SumKbn    = :JGKbn  AND ');
            SQL.Add(    'GCode     = :GCode      ');
            ParamByName('BunCode').AsInteger :=	YouBun;     //  要約分析コード
            ParamByName('MasKbn' ).AsInteger :=	MasterKbn;  //  マスタ区分
            ParamByName('JGKbn'	 ).AsInteger :=	0;		    //	実在／合計区分  (0:実在)
            ParamByName('GCode'	 ).AsInteger :=	Code;       //	分析コード
            if not ExecSQL then
            begin
                Close;
                Free;
                Result := False;
                Exit;
            end;
        end;
    end;

    //  要約分析コード修正
    if YouBun = 999 then YouBun := 0;
    
    DmqData.Close;
    DmqData.Free;
end;
// <125> Add end

// <127> Add Start
//**********************************************************************
//*		Proccess	:	未成工事支出金の範囲科目追加時メッセージ表示
//*                     未成工事支出金の範囲の科目を登録された場合、
//*                     出力順序確認画面終了時に工事合計集計科目等の見直しを促すメッセージを表示する。
//*		Name		:	J.Nakamura(LEAD)
//*		Date		:	2021.01.07
//*		Parameter	:	なし
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP009001f.fnMiseiKoujiKmkMsg;
var
    DmqMasInfo  	: TMQuery;
	sMessage		: String;		  // テンプレート
	sKoujiMessage	: String;		  // 表示メッセージ
    iLoop			: Integer;
begin
    DmqMasInfo  :=  TMQuery.Create( Self );
    MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqMasInfo );

	// テンプレートを元に表示するメッセージを作成する。
	sMessage:= '%s'
			  + #13#10 + '%sの見直しが必要と思われます。'
		      + #13#10 + '『%s』-『%s』-「%s」-「%s」-「%s」 で当該科目の登録を行ってください。';
	sKoujiMessage := '';

	// 工事・プロジェクト1～10の未成工事支出金の範囲をチェックする。
    with DmqMasInfo do
    begin
        Close();
        SQL.Clear();
        SQL.Add('SELECT MasterInfo.UseKbn,														'
            +   '		MasterInfo.KojKbn1,														'
            +   '		MasterInfo.KojUseKbn,													'
            +   '		ISNULL(KmkMA8.GCode, 0) AS KmkGCode8,									'
            +   '		ISNULL(KmkMA9.GCode, 0) AS KmkGCode9									'
            +   'FROM	MasterInfo																'
            +   '	  	LEFT OUTER JOIN KmkMA AS KmkMA8 ON MasterInfo.KmkNCode8 = KmkMA8.NCode	'
            +   '     	LEFT OUTER JOIN KmkMA AS KmkMA9 ON MasterInfo.KmkNCode9 = KmkMA9.NCode	'
            +   'WHERE  (MasterInfo.MasterKbn BETWEEN 201 AND 210)								'
            +   '		AND (MasterInfo.UseKbn > 0)												'
            +   'ORDER BY KojKbn1 DESC	');
        Open();
    end;

    While ( not DmqMasInfo.EOF ) do
    begin
        // 新しく登録された科目を確認
        for iLoop := 0 to Length(m_KmkOrder)-1 do
        begin
            // 未成工事支出金の範囲の科目が登録されたか確認
            if (m_KmkOrder[iLoop].GCode < DmqMasInfo.GetFld('KmkGCode8').AsInteger) or
               (m_KmkOrder[iLoop].GCode > DmqMasInfo.GetFld('KmkGCode9').AsInteger) then
            begin
				// 範囲外なので次の科目データへ
            	Continue;
            end;

            // 新規追加されたが、削除された
            if m_KmkOrder[iLoop].Delete = True then
            begin
				// 範囲外なので次の科目データへ
            	Continue;
            end;

			// 工事の場合
            if DmqMasInfo.GetFld('KojUseKbn').AsInteger = 1 then
            begin
                // メッセージ作成
                sKoujiMessage := Format(sMessage,
                    ['完成工事原価科目が追加されました。'
                    , '工事合計集計科目'
                    , '設定', '導入処理', '財務', '建設工事業情報', '工事合計集計科目登録']);

                // 完成工事原価自動振替区分が「1,2:あり」の場合
                if DmqMasInfo.GetFld('KojKbn1').AsInteger  > 0 then
                begin
                    // メッセージ作成
                    sKoujiMessage := sKoujiMessage + Format(sMessage,
                        [#13#10
                        , '工事完成振替科目'
                        , '設定', '導入処理', '財務', '建設工事業情報', '工事完成振替科目登録']);

                    // 処理終了
                    Break;
                end;
            end;

            // プロジェクト
            if DmqMasInfo.GetFld('KojUseKbn').AsInteger = 0 then
            begin
                // 完成工事原価自動振替区分が「1:あり」の場合
                if DmqMasInfo.GetFld('KojKbn1').AsInteger  > 0 then
                begin
                    // メッセージ作成
                    sKoujiMessage := Format(sMessage,
                        ['未成支出金科目が追加されました。'
                        , 'プロジェクト完成振替科目'
                        , '設定', '導入処理', '財務', 'プロジェクト管理情報', 'プロジェクト完成振替科目登録']);

                    // 処理終了
                    Break;
                end
            end;
        end;

		// メッセージが作成されたか確認
        if sKoujiMessage <> '' then
        begin
        	// 作成したメッセージを表示して処理終了
        	MjsMessageBoxEx(Self, sKoujiMessage, '確認', mjInformation, mjOk, mjDefOk);
			Break;
        end;

        // 次の工事・プロジェクトデータへ
        DmqMasInfo.Next;
    end;

    DmqMasInfo.Close();
    DmqMasInfo.Free();
end;
// <127> Add End

// <129> ADD ST
//**************************************************************************
//*		Proccess    	:  	fnChkBunChgMsg
//*  	Name        	:   分析コード変更時メッセージの表示チェック
//*  	Date        	:	2021/12/28
//*  	Parameter   	:   KmkGCode   科目外部コード
//*                     :   SyousaiFlg true:詳細 false:一覧
//*                     :   iAnaCode   分析コード（一覧表示の場合のみ使用）
//*  	Return      	:   False   :  分析コード変更時メッセージを表示しない
//*                         True    :  分析コード変更時メッセージを表示する
//*		History			:	XXXX/XX/XX  XX修正者XX（所属）
//*                 		XXXXXXXX修正内容
//**************************************************************************
function  TJNTCRP009001f.fnChkBunChgMsg(KmkGCode: Integer; SyosaiFlg: Boolean; iAnaCode: Integer = 9999): Boolean;
var
    DmqData			:   TMQuery;	//  クエリ

    iKmkNCode		:   Integer;	// 科目内部コード
    iDCKbn			:   Integer;	// 【変更前】正残区分
    iBPKbn			:   Integer;	// 【変更前】BS/PL区分
    iKisyuKbn   	:   Integer;	// 【変更前】期首残区分
    iTaxKbn			:   Integer;	// 【変更前】消費税区分
    iSTaxCode		:   Integer;	// 【変更前】売上消費税ｺｰﾄﾞ
    iBTaxCode		:	Integer;	// 【変更前】仕入消費税ｺｰﾄﾞ
    iChgDCKbn		:   Integer;    // 【変更後】正残区分
    iChgBPKbn		:   Integer;    // 【変更後】BS/PL区分
    iChgKisyuKbn	:   Integer;    // 【変更後】期首残区分
    iChgTaxKbn		:   Integer;    // 【変更後】消費税区分
    iChgSTaxCode	:   Integer;    // 【変更後】売上消費税ｺｰﾄﾞ
    iChgBTaxCode	:	Integer;    // 【変更後】仕入消費税ｺｰﾄﾞ
    iwkTaxCode		:   Integer;    // 【一時保持】消費税ｺｰﾄﾞ
	iwkDCSum		:   Integer;    // 【一時保持】合計期首残高

	iLoop:   Integer;
begin
	//	初期化処理
	DmqData			:= Nil;
    Result    		:= False;
	iKmkNCode		:= 0;
    iDCKbn			:= 0;
    iBPKbn			:= 0;
    iKisyuKbn   	:= 0;
    iTaxKbn			:= 0;
    iSTaxCode		:= 0;
    iBTaxCode		:= 0;
    iChgDCKbn		:= 0;
    iChgBPKbn		:= 0;
    iChgKisyuKbn	:= 0;
    iChgTaxKbn		:= 0;
    iChgSTaxCode	:= 0;
    iChgBTaxCode	:= 0;
    iwkTaxCode	    := 0;

    // 科目登録終了時に再度表示させない
	if m_bBunChgMsgFlag = False then
    	Exit;

    try
        //  MQueryの構築、DBへの接続
        DmqData := TMQuery.Create(Self);
        MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );

        // 科目の外部コードから必要な情報をを取得
        with DmqData do
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT                       ');
            SQL.Add('       NCODE                 ');	//	内部ｺｰﾄﾞ
            SQL.Add('      ,DCKbn              	  ');	//	正残区分
            SQL.Add('      ,BPKbn				  ');	//	BS/PL区分
            SQL.Add('      ,KisyuKbn           	  ');	//	期首残区分
            SQL.Add('      ,TaxKbn             	  ');	//	消費税区分
            SQL.Add('      ,STaxCode          	  ');	//	売上消費税ｺｰﾄﾞ
            SQL.Add('      ,BTaxCode              ');	//	仕入消費税ｺｰﾄﾞ
            SQL.Add('FROM  KmkMA                  '); 	//	勘定科目基本ﾏｽﾀ
            SQL.Add('WHERE MasterKbn = 1          '); 	//	ﾏｽﾀ区分(1:勘定科目)
            SQL.Add('  AND RDelKbn   = 0          ');	//	ﾚｺｰﾄﾞ区分(0:正規ﾚｺｰﾄﾞ)
            SQL.Add('  AND SumKbn    = 0          ');	//	実在/合計区分(0:実在)
            SQL.Add('  AND GCode     = :CODE      ');	//	外部ｺｰﾄﾞ
            SQL.Add('  AND CNCode    = 0          '); 	//  科目別補助内部ｺｰﾄﾞ
            ParamByName('CODE').AsInteger   :=  KmkGCode;

            if Open() = False then
                Exit;

            if not EOF then
            begin
				// 更新前の情報を保持
                iKmkNCode   :=  FieldByName('NCODE').ASInteger;
                iDCKbn		:=  FieldByName('DCKbn').ASInteger;
                iBPKbn		:=  FieldByName('BPKbn').ASInteger;
                iKisyuKbn   :=  FieldByName('KisyuKbn').ASInteger;
                iTaxKbn		:=  FieldByName('TaxKbn').ASInteger;
                iSTaxCode	:=  FieldByName('STaxCode').ASInteger;
                iBTaxCode	:=  FieldByName('BTaxCode').ASInteger;
            end;
        end;

        // 科目の内部コードから、その科目が既に仕訳で使用されているか確認
        with DmqData do
        begin
            Close;
            SQL.Clear();
            SQL.Add('SELECT TOP 1 NMonth FROM SwkDetail ');
            SQL.Add('WHERE ((DKmkNCode = :KmkNCode) OR (CKmkNCode = :KmkNCode)) AND NMonth >= 1 ');

            ParamByName('KmkNCode').AsInteger :=	iKmkNCode;     //  科目内部コード

            if Open() = False then
                Exit;

			// 既に仕訳で使用されていた場合はチェック終了
            if not EOF then
            begin
                Result := True;
				Exit;
            end;
        end;

        // 科目の内部コードから、期首残高が登録されているか確認
        with DmqData do
        begin
            Close;
            SQL.Clear();
            SQL.Add('SELECT  TOP 1 DebitSum, CreditSum ');
            SQL.Add('FROM    SumSM ');
            SQL.Add('WHERE   NMonth      = 0 ');
            SQL.Add('  AND   MasterKbn   = 0 ');
            SQL.Add('  AND   HojyoKbn    = 1 ');
            SQL.Add('  AND   KmkNCode    = :KmkNCode ');

            if iDCKbn = 0 then	// 借方
                SQL.Add('  AND   DebitSum <> 0 AND DebitSum IS NOT NULL ')
            else                // 貸方
                SQL.Add('  AND   CreditSum <> 0 AND CreditSum IS NOT NULL ');

            ParamByName('KmkNCode').AsInteger :=	iKmkNCode;     //  要約分析コード

            if Open() = False then
                Exit;

            if not EOF then
            begin
				// 取得した期首残高を設定
                if iDCKbn = 0 then	// 借方
                    iwkDCSum := FieldByName('DebitSum').ASInteger
                else                // 貸方
                    iwkDCSum :=FieldByName('CreditSum').ASInteger;

				// 期首残高が設定されていた場合はチェック終了
                if iwkDCSum <> 0 then
                begin
                    Result := True;
					Exit;
                end;
            end;
        end;

        // 分析コード変更後のデータを取得
        if SyosaiFlg then	// 詳細
        begin
            iChgDCKbn		:= Trunc(ESeiZanCode.Value);	//	正残区分
            iChgBPKbn		:= Trunc(EBPCode.Value);	 	//	BS/PL区分
            iChgKisyuKbn	:= Trunc(EKisyuCode.Value);		//	期首残
            iChgTaxKbn		:= m_TaxInfo.Kbn;	 			//	消費税区分
            iwkTaxCode		:= m_TaxInfo.Code;	 			//	消費税ｺｰﾄﾞ
        end
        else                // 一覧
        begin
            //	分析ｺｰﾄﾞのﾃﾞﾌｫﾙﾄｾｯﾄ
            for iLoop := 0 to 112 do
            begin
                if ( aDefault[iLoop].Code = iAnaCode ) then
                begin
                    iChgDCKbn	  := aDefault[iLoop].SeiZan;		//	正残区分(0:借方、1:貸方)

                    if ( aDefault[iLoop].BPKbn < 0 ) then
                    begin
                        case MComboBox.ItemIndex of
                            0,1: iChgBPKbn := 0; //B/S
                            2,3: iChgBPKbn := 1; //P/L
                        end;
                    end
                    else
                    begin
                        if ( aTokuteiKmkCode[12] = iKmkNCode ) then	//科目が特定科目の前期繰越利益と一致した時
                            iChgBPKbn := 1		//	BS/PL区分(1:P/L)
                        else
                            iChgBPKbn := aDefault[iLoop].BPKbn;			//	BS/PL区分(0:B/S、1:P/L)
                    end;

                    iChgKisyuKbn  := aDefault[iLoop].Kisyuzan;		//	期首残(0:なし、1:あり)
                    iChgTaxKbn	  := aDefault[iLoop].TaxKbn;		//	消費税科目区分(0:対象外、1:売上科目、2:仕入科目)
                    iwkTaxCode 	  := aDefault[iLoop].TaxCode;		//	消費税ｺｰﾄﾞ(0:なし、10～99)

                    break;
                end;
            end;
        end;

        // 正残区分が異なる場はチェック終了合
        if iDCKbn <> iChgDCKbn then
        begin
            Result := True;
			Exit;
        end;

        // 期首残区分が異なる場合はチェック終了
        if iKisyuKbn <> iChgKisyuKbn then
        begin
            Result := True;
			Exit;
        end;

        // BS/PLが異なる場合はチェック終了
        if iBPKbn <> iChgBPKbn then
        begin
            Result := True;
			Exit;
        end;

        // 消費税情報が異なる場合はチェック終了
        if fnTaxCodeCheck(iKmkNCode) = False then
        begin
            case iChgTaxKbn of
                0:	begin
                        iChgSTaxCode :=	0;				//	売上消費税ｺｰﾄﾞ
                        iChgBTaxCode :=	0;				//	仕入消費税ｺｰﾄﾞ
                    end;
                1:	begin
                        iChgSTaxCode :=	iwkTaxCode;		//	売上消費税ｺｰﾄﾞ
                        iChgBTaxCode :=	0;				//	仕入消費税ｺｰﾄﾞ
                    end;
                2:	begin
                        iChgSTaxCode :=	0;				//	売上消費税ｺｰﾄﾞ
                        iChgBTaxCode :=	iwkTaxCode;		//	仕入消費税ｺｰﾄﾞ
                    end;
            end;

            if (iTaxKbn   <> iChgTaxKbn)   OR
               (iSTaxCode <> iChgSTaxCode) OR
               (iBTaxCode <> iChgBTaxCode) then
            begin
                Result := True;
				Exit;
            end;
        end;
    finally
        if DmqData <> NIL then
        begin
            DmqData.Close;
    		DmqData.Free;
        end;
    end;
end;
// <129> ADD ED

end.


