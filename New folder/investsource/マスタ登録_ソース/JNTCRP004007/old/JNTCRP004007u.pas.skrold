//=============================================================================
//
//      システム名  ：Ｇａｌｉｌｅｏｐｔ
//      処理名      ：取引先登録　支払先情報(項目別)
//
//      制作・著作  ：（株）ミロク情報サービス
//      開発元      ：リード（株）Ｓプロジェクト
//
//      作成者      ：飯塚 健介(LEAD)
//      作成日      ：2005.03.23(TUE)
//
//=============================================================================
//
//  修正履歴
//  <ﾏｰｸ>   <修正者>    <修正日>        <修正内容>
//  <001>   井上 佳美   2005/03/23      親からのﾎﾞﾀﾝの継承
//  <100>   飯塚 健介   2005/04/25      FX-Style対応
//  <033>   飯塚 健介   2005/05/30      採用区分FX仕様対応
//  <050>   飯塚 健介   2005/08/09      基本情報追加/実在・合計削除
//  <101>   高橋 功二   2005/08/24(Wed) TMJSAppRecordを親から引き継ぐように修正
//  <102>   高橋 功二   2005/08/25(Thu) ﾃﾝﾌﾟﾚｰﾄ区分(TemplateKbn)の考慮
//  <103>   高橋 功二   2005/09/06(Tue) 印刷機能の正式実装まで印刷ﾎﾞﾀﾝをDiableする
//  <104>   高橋 功二   2005/09/13(Tue) 相殺情報にて第1,2補助を科目別の採用を参照するように修正
//  <105>   高橋 功二   2005/09/14(Wed) 補助で合計支払先も選択対象とする
//  <106>   高橋 功二   2005/09/14(Wed) 補助の社員を考慮
//  <107>   飯塚 健介   2005/09/23(Fri) 基本情報Grid外部ｺｰﾄﾞ属性対応
//  <108>   茂木 勇次   2005/09/28(WED) 切出/埋込ﾎﾞﾀﾝを継承し、子側で処理を行う。
//  <114>   飯塚 健介   2005/10/20(THU) ﾌﾟﾛｼﾞｪｸﾄの採用方法を変更
//  <115>   飯塚 健介   2005/10/24(MON) MasterKbn23,24を更新時に22に変換
//  <116>   PRIME加藤   2005/11/28(MON) 履歴用ｽﾄｱﾄﾞ呼び出し
//  <117>   PRIME加藤   2005/12/07(WED) 振込先銀行検索Exp呼出対応
//  <118>   広田 茂雄	2005/12/08(THU)	印刷時の範囲指定修正
//  <119>   茂木 勇次   2006/02/02(THU) 未対応の帳票の作成。
//  <120>   茂木 勇次   2006/02/02(THU) 不要な変数の削除。
//  <121>   茂木 勇次   2006/02/15(WED) 削除ﾃﾞｰﾀもｸﾞﾘｯﾄﾞ画面に表示されてしまう不具合対応。
//  <122>   川戸 仁美   2006/04/25(TUE) 進捗連動対応
//  <123>   川戸 仁美   2006/05/02(TUE) 支払通知書区分に「3:その他」を追加
//  <124>   川戸 仁美   2006/05/10(WED) ファンクションバーに画面切替を追加
//  <125>   川戸 仁美   2006/06/27(TUE) 進捗連動初期処理後、必ず終了処理を行うよう修正
//  <126>   川戸 仁美   2006/06/27(TUE) 査定方法の追加
//  <127>   川戸 仁美   2006/06/27(TUE) 相殺情報でマイナス金額の登録を不可とし、
//                                      部門・補助情報が更新されるよう修正
//  <128>   川戸 仁美   2006/06/29(THU) 振込情報に「口座自動引落区分」と「引落支払データ」を追加
//  <129>   川戸 仁美   2006/08/04(FRI) 進捗連動排他処理対応
//  <130>   川戸 仁美   2006/08/07(MON) 口座自動引落不具合修正
//  <131>   川戸 仁美   2006/08/09(WED) 進捗連動中にエラーが発生して更新が行われなかった場合、
//                                      表示データの値を元に戻す。
//  <132>   川戸 仁美   2006/08/09(WED) 進捗連動ｷｬﾝｾﾙ後、値ﾁｪｯｸ用Save領域に変更前の値を格納。
//  <133>   川戸 仁美   2006/08/10(THU) 比率タブ詳細表示の不具合修正。
//  <134>   川戸 仁美   2006/08/10(THU) 相殺情報の社員検索Expを表示。
//  <135>   川戸 仁美   2006/08/10(THU) 相殺情報の補助出力順序を修正。
//  <136>   川戸 仁美   2006/08/10(THU) 相殺情報登録リストの出力で、採用補助がNULLの場合の
//                                      エラーを修正。
//  <137>   川戸 仁美   2006/08/10(THU) 相殺情報登録リストの科目別補助を属性で編集。
//  <138>   川戸 仁美   2006/08/11(FRI) 口座自動引落対応・キー操作の修正。
//  <139>   川戸 仁美   2006/08/11(FRI) 進捗連動確認メッセージで「いいえ」が選択された場合は
//                                      フォーカス移動を行わない。
//  <140>   川戸 仁美   2006/08/11(FRI) キー操作不具合修正。
//  <141>   川戸 仁美   2006/08/17(THU) 帳票用bplが正しくunloadされずにGali終了まで掴まれた状態になる不具合を修正
//  <142>   川戸 仁美   2007/02/20(THU) プロジェクト別支払対応 → <142-2> 2007/08/23(THU) 追加修正
//  <Rel>   高橋 功二   2007/05/28(MON) ﾏｽﾀ同期対応(ｸﾞﾙｰﾌﾟ会社管理対応)
//  <143>   川戸 仁美   2007/06/08(FRI) 取引先検索Expの検索辞書に部門と社員が表示されないよう修正
//  <144>   川戸 仁美   2007/07/10(TUE) データ取得時、削除区分を参照する
//  <145>   川戸 仁美   2007/07/10(TUE) ﾌﾟﾛｼﾞｪｸﾄ別支払採用時、相殺情報の出力でｺｰﾄﾞ属性を参照するよう修正
//  <146>   川戸 仁美   2007/07/11(WED) 相殺情報不具合修正
//  <147>   川戸 仁美   2007/07/18(WED) 査定方法リスト表示の不具合修正
//  <148>   川戸 仁美   2007/07/19(THU) 帳票出力の不具合修正
//  <149>   川戸 仁美   2007/07/19(THU) HojyoMA取得SQLにてマスタ区分の参照を必須とする
//  <150>   川戸 仁美   2007/07/24(THU) 削除権限により相殺情報削除の制御を行う
//  <151>   小柴 尚子   2007/07/30(MON) 決算確定時、親でMsgが流れるのでここでは入力不可にするだけでＯＫ
//  <152>   川戸 仁美   2007/08/16(THU) 相殺情報不具合修正
//  <153>   川戸 仁美   2007/08/17(FRI) 参照権限のみの場合、Shift+Tabでフォーカスをタブに移動する
//  <154>   川戸 仁美   2007/08/22(WED) 預かり源泉税・支払調書対応
//  <155>   川戸 仁美   2007/12/25(MON) 査定金額自動計算対応
//  <156>   川戸 仁美   2008/01/15(TUE) 印刷範囲指定が反映されない不具合を修正
//  <157>   川戸 仁美   2008/01/15(TUE) 印刷データがない場合、空行が出力される不具合を修正
//  <158>   川戸 仁美   2008/01/22(TUE) 比率入力では小数点の入力が可能となるよう修正
//	<159>	PRIME関		2008/02/06(WED)	ﾏｽﾀ更新履歴対応
//	<160>	大竹 文顕	2008/03/15(SAT)	更新担当者内部ｺｰﾄﾞのｾｯﾄ
//  <161>   T.SATOH(IDC)2008/05/27(TUE) 部門適用期間用改修
//  <162>   T.SATOH(IDC)2008/05/29(THU) 相殺情報入力エラー時の修正
//  <163>   川畑@MSI	2008/06/17(TUE) 連動処理の場所移動
//	<164>	T.SATOH(IDC)2008/07/04(FRI)	部門適用期間対応の修正②(手入力時は最新を取得)
//  <163>   川畑@MSI	2008/07/14(MON) 引落し支払データの制御修正
//  <166>   T.SATOH(IDC)2008/08/04(MON) 口座前０対応(強制8桁フォーマットを廃止)
//  <167>   T.SATOH(IDC)2008/10/24(FRI) 支払項目変更とＷＦ申請状況とのチェックを追加
//  <168>   T.SATOH(IDC)2009.01.09(FRI) スポット支払対応
//  <169>   T.SATOH(IDC)2009.05.07(THU) スポット支払対応②
//  <170>   T.SATOH(IDC)2009.07.02(THU) EDI情報のセットなし区分追加
//  <171>   T.SATOH(IDC)2009.07.03(FRI) 方法(比率)で比率に記号を入れると例外が発生した(デザインのみ)
//	<172>	長沼 雄一   2009/10/06(TUE) 優先支払を手形以外を設定できるよう対応
//  <173>   T.SATOH(IDC)2009.10.07(WED) 連続して修正を行うとエラーする場合がある(RGF-0023)
//                                      クエリのクローズ漏れを修正
//                                      未使用のクエリを使用する様に変更
//                                      スポット支払高速化(取得済みは再取得しない様に修正)
//                                      重複したトランザクションを廃止
//	<174>	長沼 雄一   2009/10/23(FRI) 支払を採用していない合計取引先が表示される不具合を修正
//	<175>	T.SATOH(IDC)2009.12.07(WED) 振込/期日指定振込の新規レコードの預金種目は普通で作成
//	<176>	長沼 雄一   2009.12.25(FRI) 端数処理額がないのに端数処理方法が出力されている不具合を修正
//	<177>	長沼 雄一   2009.12.28(MON) 定額の場合に端数処理額を出力しないよう修正
//										優先支払にだけ金額に「円」が付いているので出さないよう修正
//  <178>   T.SATOH(IDC)2010/01/22(FRI) データ変更中、F8優先支払が効かなかった
//  <179>   T.SATOH(IDC)2010/02/08(MON) F8優先支払が効かない場合のメッセージを追加
//  <180>   T.SATOH(IDC)2010/02/08(MON) 比率・定額パネルで変更中の支払先の分解方法変更でエラーした
//  <181>   T.SATOH(IDC)2010.02.09(TUE) 付加情報入力ダイアログ対応
//                                      (併せて、プロジェクト別支払対応時の不具合を修正)
//  <LPH>   T.SATOH(IDC)2010.05.21(FRI) MLBplLoader対応(LoadPackageの置き換え)
//  <182>   小島(MSI)   2010.07.27(TUE) 銀行情報登録対応
//  <183>   T.SATOH(IDC)2010.08.09(MON) 付加情報入力ダイアログ対応時の不具合修正
//  <184>   小島(MSI)   2010.09.13(MON) 新規合計取引先登録時にTbl更新がされない不具合修正
//  <185>   小島(MSI)   2010.10.12(TUE) 並行支払対応(5→99、2桁表示のためedit幅調整)
//                                      (画面-Columns-MaxLengthプロパティを2に変更)
//  <186>   SATOH(GSOL) 2010.10.27(WED) プロジェクト別支払レコードが存在する場合、分解パターン修正は不可とする
//  <187>   SATOH(GSOL) 2010.10.27(WED) 以下の手順で相殺登録リストを印刷するとエラーする
//                                      ・「通知預金に銀行補助を採用」→「相殺情報を通知預金で登録」→
//                                      　「銀行補助の採用をやめ、数値型の社員補助を採用」→「印刷」
//  <188>   SATOH(GSOL) 2010.11.05(FRI) 相殺リストの連想順の第２キーが相殺NOになっていたのを修正
//                                      併せて、タブに表示されていた「支払先体系」を削除
//  <189>   小島(MSI)	2011.06.23(THU) 消費税一覧修正
//  <190>   小島(MSI)	2011.06.24(FRI) プルダウンを開いたまま他のプルダウンを開くとエラー
//  <191>   小島(MSI)	2011.06.27(MON) プロジェクト別支払レコードが存在する場合、分解パターン修正は不可になっていない件を修正
//  <KDS>   SATOH(GSOL) 2012.02.07(TUE) ShiftState対応
//  <192>   SATOH(GSOL) 2012.02.10(FRI) 起動時エラーの回避(販売:Gali2258)
//  <193>   SATOH(GSOL) 2012.02.15(WED) 相殺情報プロジェクトエラーメッセージ追加
//  <194>   SATOH(GSOL) 2012.04.24(TUE) 消費税コード自動表示(部門別科目消費税対応)
//                                      消費税コード自動変換(非課税仕入部門対応)
//                                      仕入ウィンドウパターン追加(消費税コードチェック追加)
//  <195>   SATOH(GSOL) 2012.06.07(THU) 進捗連動、ＷＦ申請ロールバック関連処理見直し
//  <AUT>   SATOH(GSOL) 2012.08.07(TUE) JNTAuthority対応
//  <196>   SATOH(GSOL) 2012.08.07(TUE) 電子債権対応
//  <197>   SATOH(GSOL) 2012.09.21(FRI) 電子債権対応時の不具合修正
//  <198>   SATOH(GSOL) 2012.10.16(TUE) 優先支払修正でエラーが発生する場合があった点を修正(デザインのみ)
//  <199>   SATOH(GSOL) 2012.10.17(WED) 仕入先採用をやめた取引先も表示・出力される点を修正
//  <200>   SATOH(GSOL) 2012.10.31(WED) 付加情報入力ダイアログ対応時の考慮不足修正
//  <201>   SATOH(GSOL) 2013.05.21(TUE) 手形支払情報新規登録時エラー修正
//  <TX26>  SATOH(GSOL) 2013/07/17(WED) H26消費税改正対応
//  <202>   SATOH(GSOL) 2013.08.09(FRI) 別銀行同一支店コード更新不具合修正
//  <BDIC>  SATOH(GSOL) 2013/11/06(WED) 銀行辞書対応
//  <GA001> T.Kobayashi 2014/01/08(TUE) 外貨基本情報登録
//  <203>   T.Kobayashi 2014/02/07(FRI) 電子記録債権の時、手形情報に手数料計算区分を追加する
//  <GA002> T.Kobayashi 2014/03/20(THU) ソースレビューの指摘
//                                      1.いらないコメント⇒削除
//                                      2.マスタ更新履歴
//                                      3.連動情報の呼び出しを債務と同じにする
//                                      4.<GA002_1> 外貨基本情報の印刷で、連想順での印刷が正しく行われていなかった（不具合）
//                                      5.可変項目の内容で、カナ入力をさせない imSKana→imDisableに修正
//                                      6.<GA002_2>可変項目で、登録されているIDを選択し、選択欄で、支払先ｺｰﾄﾞ→(そのままEnter)、
//                                        選択欄のＩＤが変わってしまう不具合
//                                      7.ダブルクリックで、選択されない不具合
//  <GA003> T.Kobayashi 2014/04/07      可変項目で、新規登録の場合は、削除不可
//  <TXNM>  SATOH(GSOL) 2014/05/29(THU) 34.有価証券売上等名称変更
//  <#C16>  H.KUMO      2014/07/03(THU) 取引先コード16桁対応（デザインのみ）
//                                      ・取引先コードを長体をかけて修正
//                                      ・各Panelごとのグリッドのカラムの幅を可変にして修正
//                                      ・MemDataの取引先コードのSizeを16に修正
//  <207>   SATOH(GSOL) 2014.07.16(WED) 外貨対応時、基本情報の分解方法の値と名称が逆になっていた(デザイン修正のみ)
//  <SCA> 	SATOH(GSOL) 2014/08/20(WED) 同一コード別支店振込先対応
//  <208>   OOTAKE(LEAD)2016/11/29(TUE) 支払情報の振込情報と期日指定振込情報において、銀行情報登録より銀行情報をセットした後
//                                      次項目へ移動すると支店名と支店名カナが消えてしまう不具合修正
//  <#NGEN> 小室(Admax) 2018/11/12(MON) 新元号対応
//  <#TAX10>小室(Admax)	2019/05/02(THU) R01消費税改正対応
//=============================================================================
{$DEFINE TaxRateInfo_JNT}	// <#TAX10>
{$DEFINE PayCommon_JNT}		// <#TAX10>

unit JNTCRP004007u;

interface

uses
  Windows, Messages, SysUtils, Classes, VCL.Graphics, VCL.Controls, VCL.Forms, VCL.Dialogs,
  Buttons, VCL.ExtCtrls,  ComCtrls, VCL.ImgList, VCL.StdCtrls, FireDAC.Comp.Client, Db, Menus, ToolWin,
  CommCtrl, ActnList, QuickRpt, Qrctrls,
  dxDBGrid, dxCntner, dxGrClms, dxTL, dxmdaset,

  MJSSPFunctionBar, MJSPageControl, MJSComboBox, MJSPanel, MJSGroupBox, MJSLabel,
  MJSEdits, MJSFunctionBar, MJSQuery, MJSTab, MJSCheckBox, MJSBitBtn, MJSMemo,
  MJSRadioButton, MJSSpeedButton, MJSTreeView, MJSToolBar,

  MJSCommonu, MjsCommon2u, MJSDBModuleu, MJSDispCtrl, MJSDateCtrl, MJSMsgStdu,
  CMNExpFuncU,
  MASPCBSwkAddDlgu,                 // <181> ADD
  MLBplLoaderU,                     // <LPH> ADD
  MJSKeyDataState,		            // <KDS> ADD
  JNTCRP004007BankU,    // <182>

  JNTSelDModul, JNTCommonu, JNTMasComu, JNTMasWndIFu, JNTSelCorpSys,JNTExPGlobal,
  JNTAuthorityu,        //  <AUT> ADD
  Inifiles,             // <196> ADD
  JNTMasDateCtrl,					// <#NGEN>
  JNTPDlg, JNTFuncU;

{$I JNTConst.inc}                   // <114>
const
	WM_DISCONTINUE				= WM_APP + 1;
	WM_CHANGESCREENCONDITION	= WM_APP + 2;

{$I JNTPayProgRendoH.inc}           // <122> Add 進捗連動対応
{$I JNTPayProgRendoGH.inc}          // <GA001>


type
{$include JNTSelPrtIF.inc}          // <PRN>
{$I PAYCommon_H.inc}                // <#TAX10> ADD

  // <PRN>
  TPrintAppEntry = function
  (AOwner       :   TComponent;
   pRec		    :   Pointer;
   Mode		    :   Integer;
   PrtParam	    :   rcPrtParam;
   var ArHdl    :   array of Pointer): Integer;

  // ﾌｧﾝｸｼｮﾝ制御用
  urFncInfo = record
    Caption         :   array[0..7] of String;
    Action          :   array[0..7] of TAction;
    Enabled         :   array[0..7] of Boolean; // <150> Add
  end;

  AdoptInfo = record
    nMasterDivision :   Integer;		// ﾏｽﾀ区分
	nAdoption		:   Integer;		// 採用区分
	nCodeDigit		:   Integer;		// ｺｰﾄﾞ桁数
	nCodeAttribute	:   Integer;		// ｺｰﾄﾞ属性
	strDescription	:   String;			// 名称
  end;

  CheckItemRec = record
    nFieldID	    :   Integer;		// ﾌｨｰﾙﾄﾞID
	fNoCheck		:   Boolean;
	fChangeData		:   Boolean;
  end;
  PCheckItemRec	= ^CheckItemRec;

  CodeAttribute	= record
    nMasterDivision	 :  Integer;
	nDigit			 :  Integer;
	nAttribute		 :  Integer;
	nClassCode		 :  Integer;	  	// 部門分類ｺｰﾄﾞ(部門時のみ)
  	nPartKbn		 :  Integer;        // 工種管理区分     <142> Add
    nPrjNCode		 :  Extended;       // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ <142> Add
    nUse             :  Integer;        // 採用区分         <142> Add
	strDescription	 :  String;
	fEnabled		 :  Boolean;
  end;

  MasterData = record
    nSumDivision	 :  Integer;		// 実在/合計区分
	strHojCode		 :  String;			// 補助外部ｺｰﾄﾞ
	strAssociation	 :  String;			// 連想
	strName			 :  String;			// 正式名称
	strNameSimple	 :  String;			// 簡略名称
	fDetails		 :  Boolean;		// 詳細更新区分
  end;

  PayInfoData = record
    nAccountCode	 :  Integer;		// 依頼口座ｺｰﾄﾞ
	nBankCode		 :  Integer;		// 全銀協銀行ｺｰﾄﾞ
	nBranchCode		 :  Integer;		// 全銀協支店ｺｰﾄﾞ
	nDepDivision	 :  Integer;		// 預金種別
	strAccountNo	 :  String;			// 口座番号
	strAccountName	 :  String;			// 依頼口座名称
	strBankName		 :  String;			// 全銀協銀行名称
	strBranchName	 :  String;			// 全銀協支店名称
	strBankNameKana	 :  String;			// 全銀協銀行名称(ｶﾅ)
	strBranchNameKana:  String;			// 全銀協支店名称(ｶﾅ)
  end;

//  PurposeFlags = record
//    fChangeDetails	 :  Boolean;		// 詳細変更
//	fHojCodeDetail	 :  Boolean;		// 取引先ｺｰﾄﾞ(詳細)
//	fOffsetSeqNo	 :  Boolean;		// 相殺情報 相殺№
//  end;

  TreeViewRec = record
    nSumKbn			 :  Byte;			// 実在/合計区分
	sHojCode		 :  String;			// 補助ｺｰﾄﾞ
	sName			 :  String;			// 名称
    eNCode           :  Extended;       // 内部ｺｰﾄﾞ
  end;
  PTreeViewRec	= ^TreeViewRec;

  PayLineInfoRec = record
    iHouHou			:   Integer;		// 支払方法
	cStdRitu		:   Currency;		// 分解基準値
	cMinKin			:   Currency;		// 支払最低額
	cHasuKin		:   Currency;		// 端数処理額
	iHasuHou		:   Integer;		// 端数処理方法
  end;

// <142> 2007/02/20 H.Kawato Add Start
  PayWayLineInfoRec = record
    PayCode         :   String;         // 支払先コード
	PrjCode		    :   String;         // プロジェクトコード
	PjSubCode	    :   String;         // プロジェクトサブコード
	BunkaiKbn	    :   Integer;		// 分解方法
	UketoriName     :   String;         // 受取人名称
  end;

  ShousaiLineInfoRec = record
    cBaseKingaku	:   Currency;		// 基準金額
	cBaseHiritu		:   Currency;		// 分解基準値
	cHasuuKingaku	:   Currency;		// 端数処理額
	iHasuuHou		:   Integer;		// 端数処理方法
	iSite           :   Integer;		// サイト
  end;
// <142> 2007/02/20 H.Kawato Add End

  AfterSaveRec	= record
    sPayCD			:   String;			// 支払先ｺｰﾄﾞ
    sOyaCD			:   String;			// 名寄せ親支払先ｺｰﾄﾞ
  end;

  LineInfoRec = record
    sBankCD			:   String;			// 銀行ｺｰﾄﾞ
	sBraCD			:   String;			// 支店ｺｰﾄﾞ
	nBunkai			:   Integer;		// 分解方法
	sIraiAccNo		:   String;			// 依頼口座ｺｰﾄﾞ
    iSateiKbn       :   Integer;        // 査定方法     <126> Add
    iCalcKbn        :   Integer;        // 繰越計算区分 <155> Add
    nCalcHiritu     :   Currency;       // 繰越計算値(比率) <155> Add
    nCalcTeigaku    :   Currency;       // 繰越計算値(定額) <155> Add
    iBunkaiPtn      :   Integer;        // 査定方法     <144> Add
  end;
//<GA001>ST
  LineInfoRecG = record
    iGaiKbn         :   Integer;        // 外貨採用区分
    strGaiKbn       :   String;         // 外貨採用名称
    iGaiPay         :   Integer;        // 外貨標準方法
  end;
//<GA001>ED

  RecInfoRec = record
    sCD				:   String;			// ｺｰﾄﾞ
	sBaseCD			:   String;			// 編集前ｺｰﾄﾞ
	sName			:   String;			// 名称
	sRen			:   String;			// 連想
    ExNCD           :   Extended;       // 内部ｺｰﾄﾞ
    PayPtnNo        :   Integer;        // 条件ﾊﾟﾀｰﾝNo  <142> Add
  end;

  FlgInfoRec = record
    bFuri			:   Boolean;		// 振込
//<GA001>ST
    bFuriGD			:   Boolean;		// 電信送金
    bFuriGT			:   Boolean;		// 為替手形
    bFuriGK			:   Boolean;		// 送金小切手
//<GA001>ED
	bFuriDate		:   Boolean;		// 期日指定振込
	bDraft			:   Boolean;		// 手形
	bCheck			:   Boolean;		// 小切手
  end;

  DataLoadFlgRec = record
    PayWay          :   Boolean;        // 支払方法 <142> Add
    Hiritsu			:   Boolean;		// 方法(比率)
	Teigaku			:   Boolean;		// 方法(定額)
	Furi			:   Boolean;		// 振込
//<GA001>ST
    FuriGD          :   Boolean;        // 電信送金
    FuriGT          :   Boolean;        // 為替手形
    FuriGK          :   Boolean;        // 送金小切手
//<GA001>ED

	DateFuri		:   Boolean;		// 期日指定振込
	Draft			:   Boolean;		// 手形
	Check			:   Boolean;		// 小切手
	Offset			:   Boolean;		// 相殺
//<GA001>ST
	KhnsetG			:   Boolean;		// 可変項目
//<GA001>ED
	Other			:   Boolean;		// その他
	Nayose			:   Boolean;		// 名寄せ
  end;

// <122> Add St
  FurikomiInfoRec = record
    IraiAccNo		:   String;         //依頼口座
    BankCode        :   String;         //銀行コード
    BkBraCode       :   String;         //支店コード
    BankKanaName    :   String;         //ｶﾅ銀行名称
    BraKanaName     :   String;         //ｶﾅ支店名称
    TransKanaName   :   String;         //ｶﾅ振込先名
    AccData	        :   Integer;        //預金種別
    AccNo	        :   String;         //口座番号
    ChargeData	    :   Integer;        //手数料負担区分
    ChargeName	    :   String;         //手数料負担区分名称
    ChargeKbnData   :   Integer;        //手数料計算区分
    TransKbnData	:   Integer;        //手数料計算区分名称
    FBSetData	    :   Integer;        //FB区分
    EDIInfo	        :   String;         //ＥＤＩ情報
    AiteNo1	        :   String;         //顧客コード１
    AiteNo2	        :   String;         //顧客コード２
    Site            :   Integer;        //サイト
    AutoKbnData     :   Integer;        // <128> Add
    AccAutoData     :   Integer;        // <128> Add
  end;
// <122> Add Ed

//<GA001>ST
  //TPayProgRendoGを実行する際に必要
  FurikomiInfoRec_G = record
    IraiAccNo		:   String;         //依頼口座
    IraiFeeAccNo    :   String;         //手数料口座
    ChargeData	    :   Integer;        //手数料負担区分
    ChargeKbnData   :   Integer;        //手数料計算区分
  end;
//<GA001>ED


// <194> ADD-STR
    // 共通部門、非課税部門
    urCommonBmn = record
        NCode   : Currency;                                                     // 内部コード
        BunCode : Integer;                                                      // 部門区分
    end;
// <194> ADD-END

{$include ActionInterface.inc}
{$include JNTMASWND_ColorDef.inc}
{$include JNTMASFUSENBIKODLGIFH.inc}
{$include MenuActionInterface.inc}
{$include JNTCRPSyncMasterH.inc}        // <Rel> ﾏｽﾀ同期共通ﾍｯﾀﾞ部
{$I MASTaxRateInfoH.inc}                // 消費税情報 <TX26> ADD

  TJNTCRP004007f = class(TForm)
    CmnStatusBar: TStatusBar;
    CmnToolBar: TMPanel;
    BEnd: TSpeedButton;
    BPrint: TSpeedButton;
    BChange: TSpeedButton;
    CmnTreeView: TMTreeView;
    CmnSplitter: TSplitter;
    PanelCmn: TMPanel;
    CmnTreeViewImage: TImageList;
    PanelReal: TMPanel;
    GridReal: TdxDBGrid;
    GridRealTag: TdxDBGridGraphicColumn;
    GridRealCode: TdxDBGridMaskColumn;
    GridRealAssociation: TdxDBGridColumn;
    GridRealName: TdxDBGridColumn;
    GridRealNameSimple: TdxDBGridColumn;
    GridRealComment: TdxDBGridColumn;
    BDelete: TSpeedButton;
    ToolBar1: TMToolBar;
    TBTag: TToolButton;
    PMToolbar: TPopupMenu;
    PMToolbarTag01: TMenuItem;
    PMToolbarTag02: TMenuItem;
    PMToolbarTag03: TMenuItem;
    PMToolbarTag04: TMenuItem;
    ToolbarImage: TImageList;
    DSReal: TDataSource;
    MemReal: TdxMemData;
    MemRealTag: TGraphicField;
    MemRealHojCode: TStringField;
    MemRealName: TStringField;
    MemRealNameSimple: TStringField;
    MemRealAssociation: TStringField;
    MemRealComment: TStringField;
    PMTreeView: TPopupMenu;
    PMTreeViewDelete: TMenuItem;
    CmnTreeViewPopupMenuBreak03: TMenuItem;
    PMTreeViewTagOff: TMenuItem;
    PMTreeViewTagComment: TMenuItem;
    N1: TMenuItem;
    PMTreeViewTag01: TMenuItem;
    PMTreeViewTagItem01: TMenuItem;
    PMTreeViewTagItem01Ex: TMenuItem;
    PMTreeViewTag02: TMenuItem;
    PMTreeViewTagItem02: TMenuItem;
    PMTreeViewTagItem02Ex: TMenuItem;
    PMTreeViewTag03: TMenuItem;
    PMTreeViewTagItem03: TMenuItem;
    PMTreeViewTagItem03Ex: TMenuItem;
    PMTreeViewTag04: TMenuItem;
    PMTreeViewTagItem04: TMenuItem;
    PMTreeViewTagItem04Ex: TMenuItem;
    DSOffset: TDataSource;
    MemOffset: TdxMemData;
    MemOffsetstrSubCode01: TStringField;
    MemOffsetstrSubDesc01: TStringField;
    MemOffsetstrKmkDesc: TStringField;
    MemOffsetstrSubCode02: TStringField;
    MemOffsetnKmkCode: TIntegerField;
    MemOffsetstrSubDesc02: TStringField;
    MemOffsetnDivision01: TIntegerField;
    MemOffsetnDivision02: TIntegerField;
    MemOffsetnDivision03: TIntegerField;
    MemOffsetstrSubCode03: TStringField;
    MemOffsetstrSubDesc03: TStringField;
    MemOffsetnTaxCode: TIntegerField;
    MemOffsetnTaxRate: TIntegerField;
    MemOffsetstrTaxRateDesc: TStringField;
    MemOffsetnOffsetPrice: TCurrencyField;
    MemOffsetnSeqNo: TIntegerField;
    Tab: TMTab;
    PanelTotal: TMPanel;
    GridTotal: TdxDBGrid;
    GridTotalTag: TdxDBGridGraphicColumn;
    GridTotalCode: TdxDBGridMaskColumn;
    GridTotalAssociation: TdxDBGridColumn;
    GridTotalName: TdxDBGridColumn;
    GridTotalNameSimple: TdxDBGridColumn;
    GridTotalComment: TdxDBGridColumn;
    DSTotal: TDataSource;
    MemTotal: TdxMemData;
    MemTotalTag: TGraphicField;
    MemTotalHojCode: TStringField;
    MemTotalName: TStringField;
    MemTotalNameSimple: TStringField;
    MemTotalAssociation: TStringField;
    MemTotalComment: TStringField;
    MPanel13: TMPanel;
    MemRealTotal: TdxMemData;
    MemRealTotalgrTag: TGraphicField;
    MemRealTotalstrHojCode: TStringField;
    MemRealTotalstrName: TStringField;
    MemRealTotalstrNameSimple: TStringField;
    MemRealTotalstrAssociation: TStringField;
    MemRealintApartNo: TIntegerField;
    MemRealstrApart: TStringField;
    GridRealApart: TdxDBGridMaskColumn;
    GridRealApartNo: TdxDBGridLookupColumn;
    MemApart: TdxMemData;
    MemApartKbn: TIntegerField;
    MemApartName: TStringField;
    MemRealApartData: TSmallintField;
    BSearch: TSpeedButton;
    ToolBar2: TMToolBar;
    TBChgColSize: TToolButton;
    MemTotalApartData: TSmallintField;
    MemTotalintApartNo: TIntegerField;
    MemTotalstrApart: TStringField;
    GridTotalApartNo: TdxDBGridLookupColumn;
    GridTotalApart: TdxDBGridMaskColumn;
    MemRealBaseHojCode: TStringField;
    MemTotalBaseHojCode: TStringField;
    PanelPayRatio: TMPanel;
    PanelPayFixed: TMPanel;
    GridPayRatio: TdxDBGrid;
    Hou_H_ShiharaiCode: TdxDBGridColumn;
    Hou_H_ShiharaiName: TdxDBGridColumn;
    Hou_H_RenChar: TdxDBGridColumn;
    Hou_H_Houhou1_Name: TdxDBGridColumn;
    Hou_H_Houhou1_Minkin: TdxDBGridColumn;
    Hou_H_Houhou1_HasuuKin: TdxDBGridColumn;
    Hou_H_Houhou1_HasuuHouMei: TdxDBGridColumn;
    Hou_H_Houhou2_Name: TdxDBGridColumn;
    Hou_H_Houhou2_Minkin: TdxDBGridColumn;
    Hou_H_Houhou2_HasuuKin: TdxDBGridColumn;
    Hou_H_Houhou2_HasuuHouMei: TdxDBGridColumn;
    Hou_H_Houhou3_Name: TdxDBGridColumn;
    Hou_H_Houhou3_MinKin: TdxDBGridColumn;
    Hou_H_Houhou3_HasuuKin: TdxDBGridColumn;
    Hou_H_Houhou3_HasuuHouMei: TdxDBGridColumn;
    Hou_H_Houhou4_Name: TdxDBGridColumn;
    Hou_H_Houhou4_MinKin: TdxDBGridColumn;
    Hou_H_Houhou4_HasuuKin: TdxDBGridColumn;
    Hou_H_Houhou4_HasuuHouMei: TdxDBGridColumn;
    Hou_H_Houhou5_Name: TdxDBGridColumn;
    Hou_H_Houhou5_MinKin: TdxDBGridColumn;
    Hou_H_Houhou5_HasuuKin: TdxDBGridColumn;
    Hou_H_Houhou5_HasuuHouMei: TdxDBGridColumn;
    GridPayFixed: TdxDBGrid;
    Hou_T_ShiharaiCode: TdxDBGridColumn;
    Hou_T_ShiharaiName: TdxDBGridColumn;
    Hou_T_RenChar: TdxDBGridColumn;
    Hou_T_Houhou1_Name: TdxDBGridColumn;
    Hou_T_Houhou1_StdRitu: TdxDBGridColumn;
    Hou_T_Houhou2_Name: TdxDBGridColumn;
    Hou_T_Houhou2_StdRitu: TdxDBGridColumn;
    Hou_T_Houhou3_Name: TdxDBGridColumn;
    Hou_T_Houhou3_StdRitu: TdxDBGridColumn;
    Hou_T_Houhou4_Name: TdxDBGridColumn;
    Hou_T_Houhou4_StdRitu: TdxDBGridColumn;
    Hou_T_Houhou5_Name: TdxDBGridColumn;
    Hou_T_Houhou5_StdRitu: TdxDBGridColumn;
    DSPayRatio: TDataSource;
    MemPayRatio: TdxMemData;
    MemPayRatioHojCode: TStringField;
    MemPayRatioSName: TStringField;
    MemPayRatioRenChar: TStringField;
    MemPayRatioHou1Data: TSmallintField;
    MemHou: TdxMemData;
    Hou_H_Houhou1_No: TdxDBGridLookupColumn;
    Hou_H_Houhou2_No: TdxDBGridLookupColumn;
    Hou_H_Houhou3_No: TdxDBGridLookupColumn;
    Hou_H_Houhou4_No: TdxDBGridLookupColumn;
    Hou_H_Houhou5_No: TdxDBGridLookupColumn;
    MemPayRatioHou1No: TIntegerField;
    MemPayRatioHou1Name: TStringField;
    MemPayRatioHou2Data: TSmallintField;
    MemPayRatioHou3Data: TSmallintField;
    MemPayRatioHou4Data: TSmallintField;
    MemPayRatioHou5Data: TSmallintField;
    MemPayRatioHou2No: TIntegerField;
    MemPayRatioHou3No: TIntegerField;
    MemPayRatioHou4No: TIntegerField;
    MemPayRatioHou5No: TIntegerField;
    MemPayRatioHou2Name: TStringField;
    MemPayRatioHou3Name: TStringField;
    MemPayRatioHou4Name: TStringField;
    MemPayRatioHou5Name: TStringField;
    MemPayRatioHou1MinKin: TCurrencyField;
    MemPayRatioHou2MinKin: TCurrencyField;
    MemPayRatioHou3MinKin: TCurrencyField;
    MemPayRatioHou4MinKin: TCurrencyField;
    MemPayRatioHou5MinKin: TCurrencyField;
    MemPayRatioHou1HasuuKin: TCurrencyField;
    MemPayRatioHou2HasuuKin: TCurrencyField;
    MemPayRatioHou3HasuuKin: TCurrencyField;
    MemPayRatioHou4HasuuKin: TCurrencyField;
    MemPayRatioHou5HasuuKin: TCurrencyField;
    MemPayRatioHou1HasuuHouData: TSmallintField;
    MemPayRatioHou2HasuuHouData: TSmallintField;
    MemPayRatioHou3HasuuHouData: TSmallintField;
    MemPayRatioHou4HasuuHouData: TSmallintField;
    MemPayRatioHou5HasuuHouData: TSmallintField;
    MemPayRatioHou1HasuuHou: TIntegerField;
    MemPayRatioHou2HasuuHou: TIntegerField;
    MemPayRatioHou3HasuuHou: TIntegerField;
    MemPayRatioHou4HasuuHou: TIntegerField;
    MemPayRatioHou5HasuuHou: TIntegerField;
    MemPayRatioHou1HasuuHouN: TStringField;
    MemPayRatioHou2HasuuHouN: TStringField;
    MemPayRatioHou3HasuuHouN: TStringField;
    MemPayRatioHou4HasuuHouN: TStringField;
    MemPayRatioHou5HasuuHouN: TStringField;
    Hou_H_Houhou1_HasuuHou: TdxDBGridLookupColumn;
    Hou_H_Houhou2_HasuuHou: TdxDBGridLookupColumn;
    Hou_H_Houhou3_HasuuHou: TdxDBGridLookupColumn;
    Hou_H_Houhou4_HasuuHou: TdxDBGridLookupColumn;
    Hou_H_Houhou5_HasuuHou: TdxDBGridLookupColumn;
    MemHasu: TdxMemData;
    MemHouKbn: TIntegerField;
    MemHouName: TStringField;
    MemHasuKbn: TIntegerField;
    MemHasuName: TStringField;
    MemPayRatioHou1StdRitsu: TCurrencyField;
    MemPayRatioHou2StdRitsu: TCurrencyField;
    MemPayRatioHou3StdRitsu: TCurrencyField;
    MemPayRatioHou4StdRitsu: TCurrencyField;
    MemPayRatioHou5StdRitsu: TCurrencyField;
    MemPayRatioBaseHojCode: TStringField;
    DSPayFixed: TDataSource;
    MemPayFixed: TdxMemData;
    StringField9: TStringField;
    StringField12: TStringField;
    StringField16: TStringField;
    StringField17: TStringField;
    SmallintField1: TSmallintField;
    StringField18: TStringField;
    IntegerField3: TIntegerField;
    IntegerField4: TIntegerField;
    IntegerField5: TIntegerField;
    IntegerField6: TIntegerField;
    IntegerField7: TIntegerField;
    SmallintField3: TSmallintField;
    StringField20: TStringField;
    SmallintField5: TSmallintField;
    StringField22: TStringField;
    SmallintField7: TSmallintField;
    StringField24: TStringField;
    SmallintField9: TSmallintField;
    StringField26: TStringField;
    CurrencyField11: TCurrencyField;
    CurrencyField12: TCurrencyField;
    CurrencyField13: TCurrencyField;
    CurrencyField14: TCurrencyField;
    CurrencyField15: TCurrencyField;
    Hou_T_Houhou1_No: TdxDBGridLookupColumn;
    Hou_T_Houhou2_No: TdxDBGridLookupColumn;
    Hou_T_Houhou3_No: TdxDBGridLookupColumn;
    Hou_T_Houhou4_No: TdxDBGridLookupColumn;
    Hou_T_Houhou5_No: TdxDBGridLookupColumn;
    PanelFurikomi: TMPanel;
    GridFurikomi: TdxDBGrid;
    Fri_ShiharaiCode: TdxDBGridColumn;
    Fri_ShiharaiName: TdxDBGridColumn;
    Fri_RecChar: TdxDBGridColumn;
    Fri_IraiBankName: TdxDBGridColumn;
    Fri_BankName: TdxDBGridColumn;
    Fri_BankKanaName: TdxDBGridColumn;
    Fri_BkBraName: TdxDBGridColumn;
    Fri_BkBraKanaName: TdxDBGridColumn;
    Fri_TransKanaName: TdxDBGridColumn;
    Fri_AccKbnName: TdxDBGridColumn;
    Fri_AccNo: TdxDBGridColumn;
    Fri_ChargeFutanName: TdxDBGridColumn;
    Fri_ChargeName: TdxDBGridColumn;
    Fri_TransName: TdxDBGridColumn;
    Fri_FBSetName: TdxDBGridColumn;
    Fri_EDIInfo: TdxDBGridColumn;
    Fri_AiteNo1: TdxDBGridColumn;
    Fri_AiteNo2: TdxDBGridColumn;
    DSFuri: TDataSource;
    MemFuri: TdxMemData;
    MemFuriHojCode: TStringField;
    MemFuriBaseHojCode: TStringField;
    MemFuriSName: TStringField;
    MemFuriRenChar: TStringField;
    MemFuriIraiAccNo: TIntegerField;
    MemFuriAccInfo: TStringField;
    MemFuriBankName: TStringField;
    MemFuriBankKanaName: TStringField;
    MemFuriBkBraName: TStringField;
    MemFuriBraKanaName: TStringField;
    MemFuriTransKanaName: TStringField;
    MemFuriAccData: TSmallintField;
    MemFuriAccKbn: TIntegerField;
    MemFuriAccName: TStringField;
    MemFuriChargeData: TSmallintField;
    MemFuriChargeFutan: TIntegerField;
    MemFuriChargeName: TStringField;
    MemFuriChargeKbnData: TSmallintField;
    MemFuriChargeKbn: TIntegerField;
    MemFuriChargeKbnName: TStringField;
    MemFuriTransKbnData: TSmallintField;
    MemFuriTransKbn: TIntegerField;
    MemFuriTransKbnName: TStringField;
    MemFuriFBSetData: TSmallintField;
    MemFuriFBSet: TIntegerField;
    MemFuriFBSetName: TStringField;
    MemFuriEDIInfo: TStringField;
    MemFuriAiteNo1: TStringField;
    MemFuriAiteNo2: TStringField;
    Fri_IraiAccCode: TdxDBGridButtonColumn;
    Fri_BankCode: TdxDBGridButtonColumn;
    Fri_BkBraCode: TdxDBGridButtonColumn;
    Fri_AccKbn: TdxDBGridLookupColumn;
    Fri_ChargeFutanKbn: TdxDBGridLookupColumn;
    Fri_ChargeKbn: TdxDBGridLookupColumn;
    Fri_TransKbn: TdxDBGridLookupColumn;
    Fri_FBSetKbn: TdxDBGridLookupColumn;
    MemAcc: TdxMemData;
    MemCharge: TdxMemData;
    MemChargeF_No: TIntegerField;
    MemChargeF_Name: TStringField;
    MemAccA_No: TIntegerField;
    MemAccA_Name: TStringField;
    MemChargeKbn: TdxMemData;
    MemChargeKbnK_No: TIntegerField;
    MemChargeKbnK_Name: TStringField;
    MemTrans: TdxMemData;
    MemTransT_No: TIntegerField;
    MemTransT_Name: TStringField;
    MemFBSet: TdxMemData;
    MemFBSetS_No: TIntegerField;
    MemFBSetS_Name: TStringField;
    PanelFuriDate: TMPanel;
    GridFuriDate: TdxDBGrid;
    KFri_ShiharaiCode: TdxDBGridColumn;
    KFri_ShiharaiName: TdxDBGridColumn;
    KFri_RecChar: TdxDBGridColumn;
    KFri_IraiAccCode: TdxDBGridButtonColumn;
    KFri_IraiBankName: TdxDBGridColumn;
    KFri_BankCode: TdxDBGridButtonColumn;
    KFri_BkBraCode: TdxDBGridButtonColumn;
    KFri_BankName: TdxDBGridColumn;
    KFri_BankKanaName: TdxDBGridColumn;
    KFri_BkBraName: TdxDBGridColumn;
    KFri_BkBraKanaName: TdxDBGridColumn;
    KFri_TransKanaName: TdxDBGridColumn;
    KFri_AccKbn: TdxDBGridLookupColumn;
    KFri_AccKbnName: TdxDBGridColumn;
    KFri_AccNo: TdxDBGridColumn;
    KFri_ChargeFutanKbn: TdxDBGridLookupColumn;
    KFri_ChargeFutanName: TdxDBGridColumn;
    KFri_ChargeKbn: TdxDBGridLookupColumn;
    KFri_ChargeName: TdxDBGridColumn;
    KFri_TransKbn: TdxDBGridLookupColumn;
    KFri_TransName: TdxDBGridColumn;
    KFri_FBSetKbn: TdxDBGridLookupColumn;
    KFri_FBSetName: TdxDBGridColumn;
    KFri_EDIInfo: TdxDBGridColumn;
    KFri_AiteNo1: TdxDBGridColumn;
    KFri_AiteNo2: TdxDBGridColumn;
    DSFuriDate: TDataSource;
    MemFuriDate: TdxMemData;
    StringField19: TStringField;
    StringField21: TStringField;
    StringField23: TStringField;
    StringField25: TStringField;
    IntegerField8: TIntegerField;
    StringField27: TStringField;
    StringField30: TStringField;
    StringField31: TStringField;
    StringField32: TStringField;
    StringField33: TStringField;
    StringField34: TStringField;
    SmallintField2: TSmallintField;
    IntegerField9: TIntegerField;
    StringField35: TStringField;
    SmallintField4: TSmallintField;
    IntegerField11: TIntegerField;
    StringField36: TStringField;
    SmallintField6: TSmallintField;
    IntegerField12: TIntegerField;
    StringField37: TStringField;
    SmallintField8: TSmallintField;
    IntegerField13: TIntegerField;
    StringField38: TStringField;
    SmallintField10: TSmallintField;
    IntegerField14: TIntegerField;
    StringField39: TStringField;
    StringField40: TStringField;
    StringField41: TStringField;
    StringField42: TStringField;
    KFri_Site: TdxDBGridMaskColumn;
    MemFuriBankCode: TIntegerField;
    MemFuriBkBraCode: TIntegerField;
    MemFuriDateBankCode: TIntegerField;
    MemFuriDateBkBraCode: TIntegerField;
    MemFuriAccNo: TStringField;
    MemFuriDateAccNo: TStringField;
    MemFuriDateSite: TIntegerField;
    PanelDraft: TMPanel;
    GridDraft: TdxDBGrid;
    Teg_ShiharaiCode: TdxDBGridColumn;
    Teg_ShiharaiName: TdxDBGridColumn;
    Teg_RenChar: TdxDBGridColumn;
    Teg_IraiBankName: TdxDBGridColumn;
    Teg_Site: TdxDBGridColumn;
    Teg_BunkatuMax: TdxDBGridColumn;
    Teg_YusouName: TdxDBGridColumn;
    Teg_ChargeFutanName: TdxDBGridColumn;
    Teg_YusouKbn: TdxDBGridLookupColumn;
    Teg_YusouFutanKbn: TdxDBGridLookupColumn;
    DSDraft: TDataSource;
    MemDraft: TdxMemData;
    MemDraftHojCode: TStringField;
    MemDraftBaseHojCode: TStringField;
    MemDraftSName: TStringField;
    MemDraftRenChar: TStringField;
    MemDraftIraiAccNo: TIntegerField;
    MemDraftAccInfo: TStringField;
    MemDraftBankCode: TIntegerField;
    MemDraftYusoData: TSmallintField;
    MemDraftYusoKbn: TIntegerField;
    MemDraftYusoKbnName: TStringField;
    MemDraftYusoFutanData: TSmallintField;
    MemDraftYusoFutan: TIntegerField;
    MemDraftYusoFutanName: TStringField;
    MemDraftSite: TIntegerField;
    MemDraftBunkatu: TIntegerField;
    MemYusoKbn: TdxMemData;
    MemYusoKbnKbn: TIntegerField;
    MemYusoKbnName: TStringField;
    MemYusoFutan: TdxMemData;
    IntegerField10: TIntegerField;
    StringField28: TStringField;
    Teg_IraiAccCode: TdxDBGridButtonColumn;
    PanelCheck: TMPanel;
    GridCheck: TdxDBGrid;
    Kog_ShiharaiCode: TdxDBGridColumn;
    Kog_ShiharaiName: TdxDBGridColumn;
    Kog_RenChar: TdxDBGridColumn;
    Kog_IraiAccCode: TdxDBGridButtonColumn;
    Kog_IraiBankName: TdxDBGridColumn;
    Kog_YusouKbn: TdxDBGridLookupColumn;
    Kog_YusouName: TdxDBGridColumn;
    Kog_YusouFutanKbn: TdxDBGridLookupColumn;
    Kog_ChargeFutanName: TdxDBGridColumn;
    DSCheck: TDataSource;
    MemCheck: TdxMemData;
    StringField29: TStringField;
    StringField43: TStringField;
    StringField44: TStringField;
    StringField45: TStringField;
    IntegerField15: TIntegerField;
    StringField46: TStringField;
    IntegerField16: TIntegerField;
    SmallintField11: TSmallintField;
    IntegerField19: TIntegerField;
    StringField47: TStringField;
    SmallintField12: TSmallintField;
    IntegerField20: TIntegerField;
    StringField48: TStringField;
    PanelOffset: TMPanel;
    PanelOffsetGrid: TMPanel;
    GridOffset: TdxDBGrid;
    GridOffsetHojName: TdxDBGridColumn;
    GridOffsetSeqNo: TdxDBGridColumn;
    GridOffsetKmk: TdxDBGridColumn;
    GridOffsetHoj01: TdxDBGridColumn;
    GridOffsetHoj02: TdxDBGridColumn;
    GridOffsetHoj03: TdxDBGridColumn;
    GridOffsetTaxRate: TdxDBGridColumn;
    GridOffsetOffsetPrice: TdxDBGridColumn;
    MemOffsetstrHojCode: TStringField;
    MemOffsetstrHojName: TStringField;
    GridOffsetTaxCode: TdxDBGridMaskColumn;
    MemOffsetstrSeqCD: TStringField;
    PanelOther: TMPanel;
    GridOther: TdxDBGrid;
    Hoka_ShiharaiCode: TdxDBGridColumn;
    Hoka_ShiharaiName: TdxDBGridColumn;
    Hoka_RenChar: TdxDBGridColumn;
    Hoka_ZipCode1: TdxDBGridColumn;
    Hoka_Address1: TdxDBGridColumn;
    Hoka_Address2: TdxDBGridColumn;
    Hoka_TelNo: TdxDBGridColumn;
    Hoka_SectionName: TdxDBGridColumn;
    Hoka_PersonName: TdxDBGridColumn;
    Hoka_TitleName: TdxDBGridColumn;
    Hoka_LetterName: TdxDBGridColumn;
    Hoka_UketoriName: TdxDBGridColumn;
    Hoka_ChangeName: TdxDBGridColumn;
    DSOther: TDataSource;
    MemOther: TdxMemData;
    StringField49: TStringField;
    StringField50: TStringField;
    StringField51: TStringField;
    StringField52: TStringField;
    MemOtherLetterData: TSmallintField;
    MemOtherLetterKbn: TIntegerField;
    MemOtherLetterName: TStringField;
    MemTitle: TdxMemData;
    IntegerField25: TIntegerField;
    StringField56: TStringField;
    MemLetter: TdxMemData;
    IntegerField26: TIntegerField;
    StringField57: TStringField;
    MemOtherTitleData: TSmallintField;
    MemOtherTitleKbn: TIntegerField;
    MemOtherTitleName: TStringField;
    Hoka_TitleKbn: TdxDBGridLookupColumn;
    Hoka_LetterKbn: TdxDBGridLookupColumn;
    MemOtherZipCode1: TIntegerField;
    MemOtherZipCode2: TIntegerField;
    MemOtherAddress1: TStringField;
    MemOtherAddress2: TStringField;
    MemOtherTelNo: TStringField;
    MemOtherSectionName: TStringField;
    MemOtherPersonName: TStringField;
    MemOtherUketoriName: TStringField;
    MemOtherChangeCode: TStringField;
    MemOtherSimpleName: TStringField;
    Hoka_ZipCode2: TdxDBGridButtonColumn;
    Hoka_ChangeCode: TdxDBGridButtonColumn;
    MemOtherSumKbn: TIntegerField;
    PanelNayose: TMPanel;
    DSNayose: TDataSource;
    MemNayose: TdxMemData;
    MemNayoseHojCode: TStringField;
    MemNayoseBaseHojCode: TStringField;
    MemNayoseSName: TStringField;
    MemNayoseOyaHojCD: TStringField;
    MemNayoseOyaBaseHojCD: TStringField;
    MemNayoseOyaName: TStringField;
    PMNayoseTree: TPopupMenu;
    PMNayoseTreeErase: TMenuItem;
    PanelNayoseTree: TMPanel;
    TreeViewNayose: TMTreeView;
    PanelNayoseLeft: TMPanel;
    PanelNayoseGrid: TMPanel;
    GridNayose: TdxDBGrid;
    GridNayoseCode: TdxDBGridButtonColumn;
    GridNayoseName: TdxDBGridColumn;
    GridNayoseOyaCode: TdxDBGridButtonColumn;
    GridNayoseOyaName: TdxDBGridColumn;
    Splitter: TSplitter;
    PanelNayoseBottom: TMPanel;
    RBNayoseGrid: TMRadioButton;
    PanelNayoseTreeTop: TMPanel;
    RBNayoseTree: TMRadioButton;
    MemPayMethods: TdxMemData;
    MemPayMethodsGCode: TStringField;
    MemPayMethodsSimpleName: TStringField;
    MemPayMethodsBunkaiName: TStringField;
    MemPayMethodsHouhouNo1: TIntegerField;
    MemPayMethodsHouhouNo2: TIntegerField;
    MemPayMethodsHouhouNo3: TIntegerField;
    MemPayMethodsHouhouNo4: TIntegerField;
    MemPayMethodsHouhouNo5: TIntegerField;
    MemPayMethodsHouhouName1: TStringField;
    MemPayMethodsHouhouName2: TStringField;
    MemPayMethodsHouhouName3: TStringField;
    MemPayMethodsHouhouName4: TStringField;
    MemPayMethodsHouhouName5: TStringField;
    MemPayMethodsHasuuHou1: TStringField;
    MemPayMethodsHasuuHou2: TStringField;
    MemPayMethodsHasuuHou3: TStringField;
    MemPayMethodsHasuuHou4: TStringField;
    MemPayMethodsHasuuHou5: TStringField;
    MemPayMethodsStdRitu1: TCurrencyField;
    MemPayMethodsStdRitu2: TCurrencyField;
    MemPayMethodsStdRitu3: TCurrencyField;
    MemPayMethodsStdRitu4: TCurrencyField;
    MemPayMethodsStdRitu5: TCurrencyField;
    MemPayMethodsMinKin1: TCurrencyField;
    MemPayMethodsMinKin2: TCurrencyField;
    MemPayMethodsMinKin3: TCurrencyField;
    MemPayMethodsMinKin4: TCurrencyField;
    MemPayMethodsMinKin5: TCurrencyField;
    MemPayMethodsHasuuKin1: TCurrencyField;
    MemPayMethodsHasuuKin2: TCurrencyField;
    MemPayMethodsHasuuKin3: TCurrencyField;
    MemPayMethodsHasuuKin4: TCurrencyField;
    MemPayMethodsHasuuKin5: TCurrencyField;
    MemPrintOther: TdxMemData;
    StringField1: TStringField;
    StringField2: TStringField;
    MemPrintOtherZipCode1: TIntegerField;
    MemPrintOtherZipCode2: TIntegerField;
    MemPrintOtherAddress1: TStringField;
    MemPrintOtherAddress2: TStringField;
    MemPrintOtherTelNo: TStringField;
    MemPrintOtherSectionName: TStringField;
    MemPrintOtherPersonName: TStringField;
    MemPrintOtherTitleName: TStringField;
    MemPrintOtherLetterName: TStringField;
    MemPrintOtherUketoriName: TStringField;
    MemPrintOtherChangeCode: TStringField;
    MemPrintOtherChangeName: TStringField;
    MemPrintOffset: TdxMemData;
    StringField3: TStringField;
    StringField5: TStringField;
    MemPrintOffsetSousaiNo: TIntegerField;
    MemPrintOffsetKmCD: TIntegerField;
    MemPrintOffsetKmCDName: TStringField;
    MemPrintOffsetHojCD01: TStringField;
    MemPrintOffsetHojCDName01: TStringField;
    MemPrintOffsetHojCD02: TStringField;
    MemPrintOffsetHojCDName02: TStringField;
    MemPrintOffsetHojCD03: TStringField;
    MemPrintOffsetHojCDName03: TStringField;
    MemPrintOffsetTaxCD: TIntegerField;
    MemPrintOffsetTaxRate: TStringField;
    MemPrintOffsetSousaiKin: TCurrencyField;
    MemPrintOffsetHojCDAttr01: TIntegerField;
    MemPrintOffsetHojCDAttr02: TIntegerField;
    MemPrintOffsetHojCDAttr03: TIntegerField;
    MemDraftCheck: TdxMemData;
    StringField4: TStringField;
    StringField6: TStringField;
    MemDraftCheckIraiAccNo: TIntegerField;
    MemDraftCheckIraiAccName: TStringField;
    MemDraftCheckAccName: TStringField;
    MemDraftCheckTegYusoName: TStringField;
    MemDraftCheckTegYusoFutanName: TStringField;
    MemDraftCheckSite: TIntegerField;
    MemDraftCheckTegBunkatuMax: TIntegerField;
    MemFurikomi: TdxMemData;
    MemFurikomiGCode: TStringField;
    MemFurikomiSimpleName: TStringField;
    MemFurikomiIraiAccNo: TIntegerField;
    MemFurikomiIraiAccName: TStringField;
    MemFurikomiShiAccKbnName: TStringField;
    MemFurikomiBankCode: TIntegerField;
    MemFurikomiBkBraCode: TIntegerField;
    MemFurikomiBankName: TStringField;
    MemFurikomiBkBraName: TStringField;
    MemFurikomiBankKanaName: TStringField;
    MemFurikomiBraKanaName: TStringField;
    MemFurikomiTransKanaName: TStringField;
    MemFurikomiHuriAccKbnName: TStringField;
    MemFurikomiChargeFutanName: TStringField;
    MemFurikomiChargeKbnName: TStringField;
    MemFurikomiTransKbn: TStringField;
    MemFurikomiFBSetName: TStringField;
    MemFurikomiEdiInfo: TStringField;
    MemFurikomiAiteNo1: TStringField;
    MemFurikomiAiteNo2: TStringField;
    MemFurikomiSite: TIntegerField;
    MemOffsetBaseHojCode: TStringField;
    MemRealExNCode: TFloatField;
    MemTotalExNCode: TFloatField;
    MemPayRatioExNCode: TFloatField;
    MemPayFixedExNCode: TFloatField;
    MemNayosePayNCode: TFloatField;
    MemNayoseOyaNCode: TFloatField;
    MemOtherExNCode: TFloatField;
    MemOtherExCngNCode: TFloatField;
    MemOffsetPayNCode: TFloatField;
    MemOffsetKmNCode: TFloatField;
    MemOffsetSbNCode: TFloatField;
    MemOffsetBmnNCode: TFloatField;
    MemOffsetSegNCode: TFloatField;
    MemOffsetHoj1NCode: TFloatField;
    MemOffsetHoj2NCode: TStringField;
    MemOffsetKojNCode: TFloatField;
    MemOffsetKsyNCode: TFloatField;
    MemFuriAccNCode: TFloatField;
    MemFuriPayNCode: TFloatField;
    MemDraftPayNCode: TFloatField;
    MemDraftAccNCode: TFloatField;
    MemFuriDatePayNCode: TFloatField;
    MemFuriDateAccNCode: TFloatField;
    MemCheckPayNCode: TFloatField;
    MemCheckAccNCode: TFloatField;
    MemFuriBankNCode: TFloatField;
    MemFuriDateBankNCode: TFloatField;
    MemFuriDateBranchNCode: TFloatField;
    MemFuriBranchNCode: TFloatField;
    MSPFunctionBar: TMSPFunctionBar;
    aclExec: TActionList;
    FreeF1: TAction;
    FreeF8: TAction;
    MPanel24: TMPanel;
    MPanel29: TMPanel;
    Edit04HojCodeFree: TMTxtEdit;
    Edit04HojCodeNum: TMNumEdit;
    Edit00PayCodeNum: TMNumEdit;
    Edit00PayCodeFree: TMTxtEdit;
    Edit05HojCodeFree: TMTxtEdit;
    Edit03HojCodeNum: TMNumEdit;
    Edit05HojCodeNum: TMNumEdit;
    Edit03HojCodeFree: TMTxtEdit;
    Edit02KmkCode: TMNumEdit;
    Edit02KmkCodeName: TMTxtEdit;
    Edit03HojCodeName: TMTxtEdit;
    Edit04HojCodeName: TMTxtEdit;
    Edit05HojCodeName: TMTxtEdit;
    Edit06TaxCode: TMNumEdit;
    Edit07TaxRate: TMNumEdit;
    Edit06TaxCodeName: TMTxtEdit;
    Edit07TaxRateName: TMTxtEdit;
    Edit08OffsetPrice: TMNumEdit;
    Edit01SeqNo: TMNumEdit;
    QRShape6: TQRShape;
    QRShape7: TQRShape;
    QRShape8: TQRShape;
    Edit00PayName: TMTxtEdit;
    PanelKihon: TMPanel;
    MemKihon: TdxMemData;
    MemKihonstrHojCode: TStringField;
    MemKihonstrNameSimple: TStringField;
    MemKihonstrAssociation: TStringField;
    SmallintField13: TSmallintField;
    IntegerField1: TIntegerField;
    StringField55: TStringField;
    MemKihonExNCode: TFloatField;
    MemKihonUketoriName: TStringField;
    DSKihon: TDataSource;
    GridKihon: TdxDBGrid;
    GridKihon_GCode: TdxDBGridMaskColumn;
    GridKihon_Renso: TdxDBGridColumn;
    GridKihon_SimpleName: TdxDBGridColumn;
    GridKihon_BunkaiNo: TdxDBGridLookupColumn;
    GridKihon_BunkaiName: TdxDBGridMaskColumn;
    GridKihon_UketoriName: TdxDBGridColumn;
    MemKihonLetterData: TSmallintField;
    MemKihonLetterKbn: TIntegerField;
    MemKihonLetterName: TStringField;
    MemKihoniSumKbn: TIntegerField;
    MLabel2: TMLabel;
    MLabel1: TMLabel;
    MLabel3: TMLabel;
    MLabel4: TMLabel;
    MLabel5: TMLabel;
    MemRealTotalApartData: TSmallintField;
    MemRealTotalintApartNo: TIntegerField;
    MemRealTotalstrApart: TStringField;
    MemRealTotalLetterData: TSmallintField;
    MemRealTotalLetterKbn: TIntegerField;
    MemRealTotalLetterName: TStringField;
    MemRealTotalUketoriName: TStringField;
    MemSatei: TdxMemData;
    MemSateiNo: TIntegerField;
    MemSateiName: TStringField;
    MemRealintSateiNo: TIntegerField;
    MemRealstrSatei: TStringField;
    MemTotalintSateiNo: TIntegerField;
    MemTotalstrSatei: TStringField;
    MemKihonintSateiNo: TIntegerField;
    MemKihonstrSatei: TStringField;
    MemRealSateiData: TSmallintField;
    MemTotalSateiData: TSmallintField;
    MemKihonSateiData: TSmallintField;
    MemRealTotalSateiData: TSmallintField;
    MemRealTotalintSateiNo: TIntegerField;
    MemRealTotalstrSatei: TStringField;
    GridKihon_SateiNo: TdxDBGridLookupColumn;
    GridKihon_SateiName: TdxDBGridMaskColumn;
    MemFuriAutoKbnData: TSmallintField;
    MemAutoKbn: TdxMemData;
    MemAutoKbnAutoKbn: TIntegerField;
    MemAutoKbnAutoKbnName: TStringField;
    MemFuriAutokbn: TIntegerField;
    MemFuriAutoKbnName: TStringField;
    MemFuriAccAutoData: TIntegerField;
    Fri_AccAutoKbnName: TdxDBGridColumn;
    Fri_AccAutoData: TdxDBGridColumn;
    Fri_AccAutoKbn: TdxDBGridLookupColumn;
    MemFurikomiAutoKbnData: TStringField;
    MemFurikomiAccAutoData: TIntegerField;
    GridKihon_BunkaiPtn: TdxDBGridLookupColumn;
    GridKihon_BunkaiPtnName: TdxDBGridMaskColumn;
    MemBunkaiPtn: TdxMemData;
    MemBunkaiPtnBunkaiPtn: TIntegerField;
    MemKihonBunkaiPtnData: TSmallintField;
    MemKihonBunkaiPtnName: TStringField;
    MemBunkaiPtnBunkaiPtnName: TStringField;
    MemKihonBunkaiPtn: TIntegerField;
    Hou_H_PrjCode: TdxDBGridColumn;
    Hou_H_PrjName: TdxDBGridColumn;
    Hou_H_PjSubCode: TdxDBGridColumn;
    Hou_H_PjSubName: TdxDBGridColumn;
    MemPayRatioPrjNCode: TFloatField;
    MemPayRatioPrjGCode: TStringField;
    MemPayRatioPrjName: TStringField;
    MemPayRatioPjSubNCode: TFloatField;
    MemPayRatioPjSubGCode: TStringField;
    MemPayRatioPjSubName: TStringField;
    MemPriPayWay: TdxMemData;
    MemPripayWayPriPayWay: TIntegerField;
    MemPriPayWayPriPayWayName: TStringField;
    Hou_H_PriPayWay: TdxDBGridLookupColumn;
    Hou_H_PriPayWayName: TdxDBGridMaskColumn;
    MemPayRatioPriPayWayData: TSmallintField;
    MemPayRatioPriPayWay: TIntegerField;
    MemPayRatioPriPayWayName: TStringField;
    Hou_T_PrjCode: TdxDBGridColumn;
    Hou_T_PrjName: TdxDBGridColumn;
    Hou_T_PjSubCode: TdxDBGridColumn;
    Hou_T_PjSubName: TdxDBGridColumn;
    Hou_T_PriPayWay: TdxDBGridLookupColumn;
    Hou_T_PriPayWayName: TdxDBGridMaskColumn;
    MemPayFixedPrjNCode: TFloatField;
    MemPayFixedPrjGCode: TStringField;
    MemPayFixedPrjName: TStringField;
    MemPayFixedPjSubNCode: TFloatField;
    MemPayFixedPjSubGCode: TStringField;
    MemPayFixedPjSubName: TStringField;
    MemPayFixedPriPayWayData: TSmallintField;
    MemPayFixedPriPayWay: TIntegerField;
    MemPayFixedPriPayWayName: TStringField;
    MemPayRatioPayPtnNo: TIntegerField;
    MemPayFixedPayPtnNo: TIntegerField;
    MemFuriPayPtnNo: TIntegerField;
    MemFuriPrjNCode: TFloatField;
    MemFuriPrjGCode: TStringField;
    MemFuriPrjName: TStringField;
    MemFuriPjSubNCode: TFloatField;
    MemFuriPjSubGCode: TStringField;
    MemFuriPjSubName: TStringField;
    MemFuriDatePayPtnNo: TIntegerField;
    MemFuriDatePrjNCode: TFloatField;
    MemFuriDatePrjGCode: TStringField;
    MemFuriDatePrjName: TStringField;
    MemFuriDatePjSubNCode: TFloatField;
    MemFuriDatePjSubGCode: TStringField;
    MemFuriDatePjSubName: TStringField;
    MemDraftPayPtnNo: TIntegerField;
    MemDraftPrjNCode: TFloatField;
    MemDraftPrjGCode: TStringField;
    MemDraftPrjName: TStringField;
    MemDraftPjSubNCode: TFloatField;
    MemDraftPjSubGCode: TStringField;
    MemDraftPjSubName: TStringField;
    MemCheckPayPtnNo: TIntegerField;
    MemCheckPrjNCode: TFloatField;
    MemCheckPrjGCode: TStringField;
    MemCheckPrjName: TStringField;
    MemCheckPjSubNCode: TFloatField;
    MemCheckPjSubGCode: TStringField;
    MemCheckPjSubName: TStringField;
    MemOffsetPayPtnNo: TIntegerField;
    MemOffsetPrjNCode: TFloatField;
    MemOffsetPrjGCode: TStringField;
    MemOffsetPrjName: TStringField;
    MemOffsetPjSubNCode: TFloatField;
    MemOffsetPjSubGCode: TStringField;
    MemOffsetPjSubName: TStringField;
    Kog_PrjCode: TdxDBGridColumn;
    Kog_PrjName: TdxDBGridColumn;
    Kog_PjSubCode: TdxDBGridColumn;
    Kog_PjSubName: TdxDBGridColumn;
    Teg_PrjCode: TdxDBGridColumn;
    Teg_PrjName: TdxDBGridColumn;
    Teg_PjSubCode: TdxDBGridColumn;
    Teg_PjSubName: TdxDBGridColumn;
    GridOffsetPrjCode: TdxDBGridColumn;
    GridOffsetPrjName: TdxDBGridColumn;
    GridOffsetPjSubCode: TdxDBGridColumn;
    GridOffsetPjSubName: TdxDBGridColumn;
    KFri_PrjCode: TdxDBGridColumn;
    KFri_PrjName: TdxDBGridColumn;
    KFri_PjSubCode: TdxDBGridColumn;
    KFri_PjSubName: TdxDBGridColumn;
    Fri_PrjCode: TdxDBGridColumn;
    Fri_PrjName: TdxDBGridColumn;
    Fri_PjSubCode: TdxDBGridColumn;
    Fri_PjSubName: TdxDBGridColumn;
    PanelPayWay: TMPanel;
    GridPayWay: TdxDBGrid;
    GridPayWay_SimpleName: TdxDBGridColumn;
    GridPayWay_BunkaiNo: TdxDBGridLookupColumn;
    GridPayWay_BunkaiName: TdxDBGridMaskColumn;
    GridPayWay_UketoriName: TdxDBGridColumn;
    MemPayWay: TdxMemData;
    MemPayWayExNCode: TFloatField;
    MemPayWaystrHojCode: TStringField;
    MemPayWayPayPtnNo: TFloatField;
    MemPayWayPrjGCode: TStringField;
    MemPayWayPrjName: TStringField;
    MemPayWayPjSubNCode: TFloatField;
    MemPayWayPjSubGCode: TStringField;
    MemPayWayPjSubName: TStringField;
    MemPayWayApartData: TSmallintField;
    MemPayWayintApartNo: TIntegerField;
    MemPayWaystrApart: TStringField;
    MemPayWayUketoriName: TStringField;
    GridPayWay_PrjName: TdxDBGridColumn;
    GridPayWay_PjSubName: TdxDBGridColumn;
    DSPayWay: TDataSource;
    GridPayWay_RenChar: TdxDBGridColumn;
    MemPayWayBaseHojCode: TStringField;
    MemPayWayPrjNCode: TFloatField;
    MemKihonPayPtnNo: TIntegerField;
    GridPayWay_GCode: TdxDBGridButtonColumn;
    GridPayWay_PrjCode: TdxDBGridButtonColumn;
    GridPayWay_PjSubCode: TdxDBGridButtonColumn;
    MemPayWayintSumKbn: TIntegerField;
    MemPayWaystrNameSimple: TStringField;
    MemPayWaystrAssociation: TStringField;
    MemPayWayPriPayWay: TIntegerField;
    MemPayWaybDisableEditor: TBooleanField;
    MLabel6: TMLabel;
    Edit09PrjCodeFree: TMTxtEdit;
    Edit09PrjCodeNum: TMNumEdit;
    Edit09PrjName: TMTxtEdit;
    MemFurikomiPayPtnNo: TIntegerField;
    MemFurikomiPrjNCode: TFloatField;
    MemFurikomiPrjGCode: TStringField;
    MemFurikomiPrjName: TStringField;
    MemFurikomiPjSubNCode: TFloatField;
    MemFurikomiPjSubGCode: TStringField;
    MemFurikomiPjSubName: TStringField;
    MemPayMethodsPayPtnNo: TIntegerField;
    MemPayMethodsPrjNCode: TFloatField;
    MemPayMethodsPrjGCode: TStringField;
    MemPayMethodsPrjName: TStringField;
    MemPayMethodsPjSubNCode: TFloatField;
    MemPayMethodsPjSubGCode: TStringField;
    MemPayMethodsPjSubName: TStringField;
    MemPayMethodsPriPayWay: TIntegerField;
    MemDraftCheckPayPtnNo: TIntegerField;
    MemDraftCheckPrjNCode: TFloatField;
    MemDraftCheckPrjGCode: TStringField;
    MemDraftCheckPrjName: TStringField;
    MemDraftCheckPjSubNCode: TFloatField;
    MemDraftCheckPjSubGCode: TStringField;
    MemDraftCheckPjSubName: TStringField;
    MemPrintOffsetPayPtnNo: TIntegerField;
    MemPrintOffsetPrjNCode: TFloatField;
    MemPrintOffsetPrjGCode: TStringField;
    MemPrintOffsetPrjName: TStringField;
    MemPrintOffsetPjSubNCode: TFloatField;
    MemPrintOffsetPjSubGCode: TStringField;
    MemPrintOffsetPjSubName: TStringField;
    MemRealTotalPayPtnNo: TIntegerField;
    MemRealTotalPrjNCode: TFloatField;
    MemRealTotalPrjGCode: TStringField;
    MemRealTotalPrjName: TStringField;
    MemRealTotalPjSubNCode: TFloatField;
    MemRealTotalPjSubGCode: TStringField;
    MemRealTotalPjSubName: TStringField;
    MemRealTotalBunkaiPtnData: TSmallintField;
    MemRealTotalBunkaiPtn: TIntegerField;
    MemRealTotalBunkaiPtnName: TStringField;
    MemRealTotalGCode: TStringField;
    MemPayMethodsPriPayWayData: TSmallintField;
    MemPayMethodsPriPayWayName: TStringField;
    MemPayMethodsPriPayWayNo1: TIntegerField;
    MemPayMethodsPriPayWayNo2: TIntegerField;
    MemPayMethodsPriPayWayNo3: TIntegerField;
    MemPayMethodsPriPayWayNo4: TIntegerField;
    MemPayMethodsPriPayWayNo5: TIntegerField;
    MemPayMethodsPriPayWayBaseKingaku1: TCurrencyField;
    MemPayMethodsPriPayWayBaseKingaku2: TCurrencyField;
    MemPayMethodsPriPayWayBaseKingaku3: TCurrencyField;
    MemPayMethodsPriPayWayBaseKingaku4: TCurrencyField;
    MemPayMethodsPriPayWayBaseKingaku5: TCurrencyField;
    MemPayMethodsPriPayWayBaseHiritu1: TCurrencyField;
    MemPayMethodsPriPayWayBaseHiritu2: TCurrencyField;
    MemPayMethodsPriPayWayBaseHiritu3: TCurrencyField;
    MemPayMethodsPriPayWayBaseHiritu4: TCurrencyField;
    MemPayMethodsPriPayWayBaseHiritu5: TCurrencyField;
    MemPayMethodsPriPayWayHasuuKin1: TCurrencyField;
    MemPayMethodsPriPayWayHasuuKin2: TCurrencyField;
    MemPayMethodsPriPayWayHasuuKin3: TCurrencyField;
    MemPayMethodsPriPayWayHasuuKin4: TCurrencyField;
    MemPayMethodsPriPayWayHasuuKin5: TCurrencyField;
    MemPayMethodsPriPayWayHasuuDesc1: TStringField;
    MemPayMethodsPriPayWayHasuuDesc2: TStringField;
    MemPayMethodsPriPayWayHasuuDesc3: TStringField;
    MemPayMethodsPriPayWayHasuuDesc4: TStringField;
    MemPayMethodsPriPayWayHasuuDesc5: TStringField;
    MemPayMethodsPriPayWaySite1: TIntegerField;
    MemPayMethodsPriPayWaySite2: TIntegerField;
    MemPayMethodsPriPayWaySite3: TIntegerField;
    MemPayMethodsPriPayWaySite4: TIntegerField;
    MemPayMethodsPriPayWaySite5: TIntegerField;
    MemPayMethodsstrPriPayWayBaseKinUnit1: TStringField;
    MemPayMethodsstrPriPayWayBaseKinUnit2: TStringField;
    MemPayMethodsstrPriPayWayBaseKinUnit3: TStringField;
    MemPayMethodsstrPriPayWayBaseKinUnit4: TStringField;
    MemPayMethodsstrPriPayWayBaseKinUnit5: TStringField;
    MemPayMethodsstrPriPayWayBaseHirituUnit1: TStringField;
    MemPayMethodsstrPriPayWayBaseHirituUnit2: TStringField;
    MemPayMethodsstrPriPayWayBaseHirituUnit3: TStringField;
    MemPayMethodsstrPriPayWayBaseHirituUnit4: TStringField;
    MemPayMethodsstrPriPayWayBaseHirituUnit5: TStringField;
    MemPayMethodsstrPriPayWaySiteUnit1: TStringField;
    MemPayMethodsstrPriPayWaySiteUnit2: TStringField;
    MemPayMethodsstrPriPayWaySiteUnit3: TStringField;
    MemPayMethodsstrPriPayWaySiteUnit4: TStringField;
    MemPayMethodsstrPriPayWaySiteUnit5: TStringField;
    MemOffsetstrPrjCD: TStringField;
    MemOffsetnTaxKbn: TIntegerField;
    MemOffsetnHojPartKbn: TIntegerField;
    MemRealTotalPrjHojyoName: TStringField;
    MemFurikomiPrjHojyoName: TStringField;
    MemPayMethodsPrjHojyoName: TStringField;
    MemDraftCheckPrjHojyoName: TStringField;
    MemPrintOffsetPrjHojyoName: TStringField;
    MemRealTotalPjSubHojyoName: TStringField;
    MemFurikomiPjSubHojyoName: TStringField;
    MemPayMethodsPjSubHojyoName: TStringField;
    MemDraftCheckPjSubHojyoName: TStringField;
    MemPrintOffsetPjSubHojyoName: TStringField;
    MemRealTotalEOF: TBooleanField;
    MemFurikomiEOF: TBooleanField;
    MemDraftCheckEOF: TBooleanField;
    MemPrintOffsetEOF: TBooleanField;
    MemPayMethodsEOF: TBooleanField;
    PanelShousai: TMPanel;
    GridShousai: TdxDBGrid;
    Shousai_GCode: TdxDBGridColumn;
    Shousai_PayName: TdxDBGridColumn;
    Shousai_Renso: TdxDBGridColumn;
    Shousai_PrjCode: TdxDBGridColumn;
    Shousai_PrjName: TdxDBGridColumn;
    Shousai_PjSubCode: TdxDBGridColumn;
    Shousai_PjSubName: TdxDBGridColumn;
    Shousai_Hou1_BaseKingaku: TdxDBGridColumn;
    Shousai_Hou1_BaseHiritu: TdxDBGridColumn;
    Shousai_Hou1_HasuuKingaku: TdxDBGridColumn;
    Shousai_Hou1_HasuuHou: TdxDBGridLookupColumn;
    Shousai_Hou1_HasuuHouN: TdxDBGridColumn;
    Shousai_Hou2_BaseKingaku: TdxDBGridColumn;
    Shousai_Hou2_BaseHiritu: TdxDBGridColumn;
    Shousai_Hou2_HasuuKingaku: TdxDBGridColumn;
    Shousai_Hou2_HasuuHou: TdxDBGridLookupColumn;
    Shousai_Hou2_HasuuHouN: TdxDBGridColumn;
    Shousai_Hou3_BaseKingaku: TdxDBGridColumn;
    Shousai_Hou3_BaseHiritu: TdxDBGridColumn;
    Shousai_Hou3_HasuuKingaku: TdxDBGridColumn;
    Shousai_Hou3_HasuuHou: TdxDBGridLookupColumn;
    Shousai_Hou3_HasuuHouN: TdxDBGridColumn;
    Shousai_Hou4_BaseKingaku: TdxDBGridColumn;
    Shousai_Hou4_BaseHiritu: TdxDBGridColumn;
    Shousai_Hou4_HasuuKingaku: TdxDBGridColumn;
    Shousai_Hou4_HasuuHou: TdxDBGridLookupColumn;
    Shousai_Hou4_HasuuHouN: TdxDBGridColumn;
    Shousai_Hou5_BaseKingaku: TdxDBGridColumn;
    Shousai_Hou5_BaseHiritu: TdxDBGridColumn;
    Shousai_Hou5_HasuuKingaku: TdxDBGridColumn;
    Shousai_Hou5_HasuuHou: TdxDBGridLookupColumn;
    Shousai_Hou5_HasuuHouN: TdxDBGridColumn;
    MemShousai: TdxMemData;
    StringField8: TStringField;
    StringField11: TStringField;
    StringField13: TStringField;
    StringField14: TStringField;
    IntegerField2: TIntegerField;
    FloatField1: TFloatField;
    StringField15: TStringField;
    StringField54: TStringField;
    FloatField2: TFloatField;
    StringField58: TStringField;
    StringField59: TStringField;
    FloatField3: TFloatField;
    MemShousaiHou1BaseKingaku: TCurrencyField;
    MemShousaiHou2BaseKingaku: TCurrencyField;
    MemShousaiHou3BaseKingaku: TCurrencyField;
    MemShousaiHou4BaseKingaku: TCurrencyField;
    MemShousaiHou5BaseKingaku: TCurrencyField;
    MemShousaiHou1BaseHiritu: TCurrencyField;
    MemShousaiHou2BaseHiritu: TCurrencyField;
    MemShousaiHou3BaseHiritu: TCurrencyField;
    MemShousaiHou4BaseHiritu: TCurrencyField;
    MemShousaiHou5BaseHiritu: TCurrencyField;
    MemShousaiHou1HasuuKingaku: TCurrencyField;
    MemShousaiHou2HasuuKingaku: TCurrencyField;
    MemShousaiHou3HasuuKingaku: TCurrencyField;
    MemShousaiHou4HasuuKingaku: TCurrencyField;
    MemShousaiHou5HasuuKingaku: TCurrencyField;
    MemShousaiHou1HasuuHouData: TSmallintField;
    MemShousaiHou2HasuuHouData: TSmallintField;
    MemShousaiHou3HasuuHouData: TSmallintField;
    MemShousaiHou4HasuuHouData: TSmallintField;
    MemShousaiHou5HasuuHouData: TSmallintField;
    MemShousaiHou1HasuuHou: TIntegerField;
    MemShousaiHou2HasuuHou: TIntegerField;
    MemShousaiHou3HasuuHou: TIntegerField;
    MemShousaiHou4HasuuHou: TIntegerField;
    MemShousaiHou5HasuuHou: TIntegerField;
    MemShousaiHou1HasuuHouN: TStringField;
    MemShousaiHou2HasuuHouN: TStringField;
    MemShousaiHou3HasuuHouN: TStringField;
    MemShousaiHou4HasuuHouN: TStringField;
    MemShousaiHou5HasuuHouN: TStringField;
    MemShousaiHou1Site: TIntegerField;
    MemShousaiHou2Site: TIntegerField;
    MemShousaiHou3Site: TIntegerField;
    MemShousaiHou4Site: TIntegerField;
    MemShousaiHou5Site: TIntegerField;
    Shousai_Hou1_Site: TdxDBGridColumn;
    Shousai_Hou2_Site: TdxDBGridColumn;
    Shousai_Hou3_Site: TdxDBGridColumn;
    Shousai_Hou4_Site: TdxDBGridColumn;
    Shousai_Hou5_Site: TdxDBGridColumn;
    DSShousai: TDataSource;
    MemShousaiAccNCode: TFloatField;
    MemShousaiUketoriName: TStringField;
    MemShousaiTegYusouKbn: TIntegerField;
    MemShousaiTegYusouFutan: TIntegerField;
    MemShousaiTegBunkatuMax: TIntegerField;
    MemOffsetExNCode: TFloatField;
    MemPayWayiPartKbn: TIntegerField;
    MemPrintOffsetPrjAttr: TIntegerField;
    MemPrintOffsetPjSubAttr: TIntegerField;
    MemKihonGensenUseKbn: TIntegerField;
    GridKihon_GensenUseKbn: TdxDBGridColumn;
    GridKihon_SateiCalc: TdxDBGridLookupColumn;
    GridKihon_SateiCalcName: TdxDBGridMaskColumn;
    GridKihon_H_SateiCalcValue: TdxDBGridColumn;
    GridKihon_T_SateiCalcValue: TdxDBGridColumn;
    MemSateiCalc: TdxMemData;
    IntegerField17: TIntegerField;
    StringField60: TStringField;
    MemKihonintSateiCalc: TIntegerField;
    MemKihonstrSateiCalcName: TStringField;
    MemKihonSateiCalcHiritu: TCurrencyField;
    MemKihonSateiCalcTeigaku: TCurrencyField;
    MemRealTotalSateiCalcData: TSmallintField;
    MemRealTotalintSateiCalcKbn: TIntegerField;
    MemRealTotalstrSateiCalc: TStringField;
    MemRealTotalSateiCalcValue: TCurrencyField;
    MemRealSateiCalcData: TSmallintField;
    MemRealintSateiCalc: TIntegerField;
    MemRealstrSateiCalc: TStringField;
    MemTotalSateiCalcData: TSmallintField;
    MemTotalintSateiCalc: TIntegerField;
    MemTotalstrSateiCalc: TStringField;
    MemRealSateiCalcHiritu: TCurrencyField;
    MemRealSateiCalcTeigaku: TCurrencyField;
    MemTotalSateiCalcHiritu: TCurrencyField;
    MemTotalSateiCalcTeigaku: TCurrencyField;
    MemRealTotalstrSateiCalcValueUnit: TStringField;
    SPMsHist: TFDStoredProc;
    SPMsHistParent: TFDStoredProc;
    MemFurikomiShiAccNo: TStringField;
    MemDraftCheckAccNo: TStringField;
    MemFurikomiHuriAccKbnNo: TStringField;
    Hou_H_Houhou1_StdRitu: TdxDBGridCurrencyColumn;
    Hou_H_Houhou2_StdRitu: TdxDBGridCurrencyColumn;
    Hou_H_Houhou3_StdRitu: TdxDBGridCurrencyColumn;
    Hou_H_Houhou4_StdRitu: TdxDBGridCurrencyColumn;
    Hou_H_Houhou5_StdRitu: TdxDBGridCurrencyColumn;
    MemShousaiPriPayWay: TIntegerField;
    Shousai_PriPayWay: TdxDBGridColumn;
    MemShousaiBkBraNCode: TFloatField;
    MemShousaiTransKanaName: TStringField;
    MemShousaiAcckbn: TIntegerField;
    MemShousaiAccNo: TStringField;
    MemShousaiChargeFutan: TIntegerField;
    MemShousaiChargeKbn: TIntegerField;
    MemShousaiTransKbn: TIntegerField;
    MemShousaiFBSet: TIntegerField;
    MemShousaiEdiInfo: TStringField;
    MemShousaiAiteNo1: TStringField;
    MemShousaiAiteNo2: TStringField;
    MemShousaiAccAutoKbn: TIntegerField;
    MemShousaiAccAutoData: TIntegerField;
    MemShousaiPriPayWayName: TStringField;
    Shousai_PriPayWayName: TdxDBGridColumn;
    FreeF6: TAction;
    MemDraftERKbn: TIntegerField;
    MemDraftERKbnName: TStringField;
    MemERKbn: TdxMemData;
    IntegerField18: TIntegerField;
    StringField61: TStringField;
    MemDraftERKbnData: TSmallintField;
    Teg_ERKbn: TdxDBGridLookupColumn;
    Teg_ERName: TdxDBGridColumn;
    MemDraftBkBraCode: TIntegerField;
    MemDraftBankName: TStringField;
    MemDraftBankKanaName: TStringField;
    MemDraftBkBraName: TStringField;
    MemDraftBraKanaName: TStringField;
    MemDraftTransKanaName: TStringField;
    MemDraftAccData: TSmallintField;
    MemDraftAccKbn: TIntegerField;
    MemDraftAccName: TStringField;
    MemDraftAccNo: TStringField;
    MemDraftChargeData: TSmallintField;
    MemDraftChargeFutan: TIntegerField;
    MemDraftChargeName: TStringField;
    MemDraftVFree1: TStringField;
    MemDraftVFree2: TStringField;
    MemDraftVFree3: TStringField;
    MemDraftVFree4: TStringField;
    MemDraftVFree5: TStringField;
    Teg_BankCode: TdxDBGridButtonColumn;
    Teg_BkBraCode: TdxDBGridButtonColumn;
    Teg_BankName: TdxDBGridColumn;
    Teg_BankKanaName: TdxDBGridColumn;
    Teg_BkBraName: TdxDBGridColumn;
    Teg_BkBraKanaName: TdxDBGridColumn;
    Teg_TransKanaName: TdxDBGridColumn;
    Teg_AccKbn: TdxDBGridLookupColumn;
    Teg_AccKbnName: TdxDBGridColumn;
    Teg_AccNo: TdxDBGridColumn;
    Teg_ChargeFutanKbn2: TdxDBGridLookupColumn;
    Teg_ChargeFutanName2: TdxDBGridColumn;
    MemCharge2: TdxMemData;
    IntegerField21: TIntegerField;
    StringField62: TStringField;
    MemDraftBankNCode: TCurrencyField;
    MemDraftBranchNCode: TCurrencyField;
    Teg_VFree1: TdxDBGridColumn;
    Teg_VFree2: TdxDBGridColumn;
    Teg_VFree3: TdxDBGridColumn;
    Teg_VFree4: TdxDBGridColumn;
    Teg_VFree5: TdxDBGridColumn;
    MemDraftLayoutInfo: TStringField;
    MemDraftCheckERKbnName: TStringField;
    MemDraftCheckBankCode: TIntegerField;
    MemDraftCheckBkBraCode: TIntegerField;
    MemDraftCheckBankName: TStringField;
    MemDraftCheckBankKanaName: TStringField;
    MemDraftCheckBkBraName: TStringField;
    MemDraftCheckBraKanaName: TStringField;
    MemDraftCheckTransKanaName: TStringField;
    MemDraftCheckHuriAccKbnName: TStringField;
    MemDraftCheckHuriAccKbnNo: TStringField;
    MemDraftCheckChargeFutanName: TStringField;
    MemDraftCheckVFree1: TStringField;
    MemDraftCheckVFree2: TStringField;
    MemDraftCheckVFree3: TStringField;
    MemDraftCheckVFree4: TStringField;
    MemDraftCheckVFree5: TStringField;
    MemKihonG: TdxMemData;
    MemKihonGExNCode: TFloatField;
    MemKihonGintSumKbn: TIntegerField;
    MemKihonGstrNameSimple: TStringField;
    MemKihonGGaiData: TSmallintField;
    MemKihonGintGaiNo: TIntegerField;
    MemKihonGstrGaiKbn: TStringField;
    MemKihonGGaiPayData: TSmallintField;
    MemKihonGintGaiPay: TIntegerField;
    MemKihonGstrGaiPayName: TStringField;
    PanelKihon_G: TMPanel;
    GridKihonG: TdxDBGrid;
    GridKihonG_GCode: TdxDBGridMaskColumn;
    GridKihonG_Renso: TdxDBGridColumn;
    GridKihonG_SimpleName: TdxDBGridColumn;
    GridKihonG_GaiNo: TdxDBGridLookupColumn;
    GridKihonG_GaiName: TdxDBGridMaskColumn;
    GridKihonG_GaiPay: TdxDBGridLookupColumn;
    GridKihonG_GaiPayName: TdxDBGridMaskColumn;
    PanelFurikomi_GD: TMPanel;
    GridFurikomiGD: TdxDBGrid;
    FriGD_ShiharaiCode: TdxDBGridColumn;
    FriGD_ShiharaiName: TdxDBGridColumn;
    FriGD_RecChar: TdxDBGridColumn;
    FriGD_IraiAccCode: TdxDBGridButtonColumn;
    FriGD_IraiAccInfo: TdxDBGridColumn;
    FriGD_ChargeFutanKbn: TdxDBGridLookupColumn;
    FriGD_ChargeFutanName: TdxDBGridColumn;
    FriGD_ChargeKbn: TdxDBGridLookupColumn;
    FriGD_ChargeName: TdxDBGridColumn;
    FriGD_EDIInfo: TdxDBGridColumn;
    PanelFurikomi_GT: TMPanel;
    GridFurikomiGT: TdxDBGrid;
    FriGT_ShiharaiCode: TdxDBGridColumn;
    FriGT_ShiharaiName: TdxDBGridColumn;
    FriGT_RecChar: TdxDBGridColumn;
    FriGT_IraiAccCode: TdxDBGridButtonColumn;
    FriGT_IraiBankName: TdxDBGridColumn;
    PanelFurikomi_GK: TMPanel;
    MemFuri_GD: TdxMemData;
    MemFuri_GDHojCode: TStringField;
    MemFuri_GDBaseHojCode: TStringField;
    MemFuri_GDSName: TStringField;
    MemFuri_GDRenChar: TStringField;
    MemFuri_GDPayPtnNo: TIntegerField;
    MemFuri_GDPrjNCode: TFloatField;
    MemFuri_GDPrjGCode: TStringField;
    MemFuri_GDPrjName: TStringField;
    MemFuri_GDPjSubNCode: TFloatField;
    MemFuri_GDPjSubGCode: TStringField;
    MemFuri_GDPjSubName: TStringField;
    MemFuri_GDIraiAccNo: TIntegerField;
    MemFuri_GDAccInfo: TStringField;
    MemFuri_GDBankCode: TIntegerField;
    MemFuri_GDBkBraCode: TIntegerField;
    MemFuri_GDBankName: TStringField;
    MemFuri_GDBankKanaName: TStringField;
    MemFuri_GDBkBraName: TStringField;
    MemFuri_GDBraKanaName: TStringField;
    MemFuri_GDTransKanaName: TStringField;
    MemFuri_GDAccData: TSmallintField;
    MemFuri_GDAccKbn: TIntegerField;
    MemFuri_GDAccName: TStringField;
    MemFuri_GDAccNo: TStringField;
    MemFuri_GDChargeData: TSmallintField;
    MemFuri_GDChargeFutan: TIntegerField;
    MemFuri_GDChargeName: TStringField;
    MemFuri_GDChargeKbnData: TSmallintField;
    MemFuri_GDChargeKbn: TIntegerField;
    MemFuri_GDChargeKbnName: TStringField;
    MemFuri_GDTransKbnData: TSmallintField;
    MemFuri_GDTransKbn: TIntegerField;
    MemFuri_GDTransKbnName: TStringField;
    MemFuri_GDFBSetData: TSmallintField;
    MemFuri_GDFBSet: TIntegerField;
    MemFuri_GDFBSetName: TStringField;
    MemFuri_GDEDiInfo: TStringField;
    MemFuri_GDAiteNo1: TStringField;
    MemFuri_GDAiteNo2: TStringField;
    MemFuri_GDAccNCode: TFloatField;
    MemFuri_GDPayNCode: TFloatField;
    MemFuri_GDBankNCode: TFloatField;
    MemFuri_GDBranchNCode: TFloatField;
    MemFuri_GDAutoKbnData: TSmallintField;
    MemFuri_GDAutokbn: TIntegerField;
    MemFuri_GDAutoKbnName: TStringField;
    MemFuri_GDAccAutoData: TIntegerField;
    DSFuri_GD: TDataSource;
    DSFuri_GT: TDataSource;
    MemFuri_GT: TdxMemData;
    MemFuri_GTHojCode: TStringField;
    MemFuri_GTBaseHojCode: TStringField;
    MemFuri_GTSName: TStringField;
    MemFuri_GTRenChar: TStringField;
    MemFuri_GTPayPtnNo: TIntegerField;
    MemFuri_GTPrjNCode: TFloatField;
    MemFuri_GTPrjGCode: TStringField;
    MemFuri_GTPrjName: TStringField;
    MemFuri_GTPjSubNCode: TFloatField;
    MemFuri_GTPjSubGCode: TStringField;
    MemFuri_GTPjSubName: TStringField;
    MemFuri_GTIraiAccNo: TIntegerField;
    MemFuri_GTAccInfo: TStringField;
    MemFuri_GTBankCode: TIntegerField;
    MemFuri_GTBkBraCode: TIntegerField;
    MemFuri_GTBankName: TStringField;
    MemFuri_GTBankKanaName: TStringField;
    MemFuri_GTBkBraName: TStringField;
    MemFuri_GTBraKanaName: TStringField;
    MemFuri_GTTransKanaName: TStringField;
    MemFuri_GTAccData: TSmallintField;
    MemFuri_GTAccKbn: TIntegerField;
    MemFuri_GTAccName: TStringField;
    MemFuri_GTAccNo: TStringField;
    MemFuri_GTChargeData: TSmallintField;
    MemFuri_GTChargeFutan: TIntegerField;
    MemFuri_GTChargeName: TStringField;
    MemFuri_GTChargeKbnData: TSmallintField;
    MemFuri_GTChargeKbn: TIntegerField;
    MemFuri_GTChargeKbnName: TStringField;
    MemFuri_GTTransKbnData: TSmallintField;
    MemFuri_GTTransKbn: TIntegerField;
    MemFuri_GTTransKbnName: TStringField;
    MemFuri_GTFBSetData: TSmallintField;
    MemFuri_GTFBSet: TIntegerField;
    MemFuri_GTFBSetName: TStringField;
    MemFuri_GTEDIInfo: TStringField;
    MemFuri_GTAiteNo1: TStringField;
    MemFuri_GTAiteNo2: TStringField;
    MemFuri_GTAccNCode: TFloatField;
    MemFuri_GTPayNCode: TFloatField;
    MemFuri_GTBankNCode: TFloatField;
    MemFuri_GTBranchNCode: TFloatField;
    MemFuri_GTAutoKbnData: TSmallintField;
    MemFuri_GTAutokbn: TIntegerField;
    MemFuri_GTAutoKbnName: TStringField;
    MemFuri_GTAccAutoData: TIntegerField;
    MemFuri_GK: TdxMemData;
    MemFuri_GKHojCode: TStringField;
    MemFuri_GKBaseHojCode: TStringField;
    MemFuri_GKSName: TStringField;
    MemFuri_GKRenChar: TStringField;
    MemFuri_GKPayPtnNo: TIntegerField;
    MemFuri_GKPrjNCode: TFloatField;
    MemFuri_GKPrjGCode: TStringField;
    MemFuri_GKPrjName: TStringField;
    MemFuri_GKPjSubNCode: TFloatField;
    MemFuri_GKPjSubGCode: TStringField;
    MemFuri_GKPjSubName: TStringField;
    MemFuri_GKIraiAccNo: TIntegerField;
    MemFuri_GKAccInfo: TStringField;
    MemFuri_GKBankCode: TIntegerField;
    MemFuri_GKBkBraCode: TIntegerField;
    MemFuri_GKBankName: TStringField;
    MemFuri_GKBankKanaName: TStringField;
    MemFuri_GKBkBraName: TStringField;
    MemFuri_GKBraKanaName: TStringField;
    MemFuri_GKTransKanaName: TStringField;
    MemFuri_GKAccData: TSmallintField;
    MemFuri_GKAccKbn: TIntegerField;
    MemFuri_GKAccName: TStringField;
    MemFuri_GKAccNo: TStringField;
    MemFuri_GKChargeData: TSmallintField;
    MemFuri_GKChargeFutan: TIntegerField;
    MemFuri_GKChargeName: TStringField;
    MemFuri_GKChargeKbnData: TSmallintField;
    MemFuri_GKChargeKbn: TIntegerField;
    MemFuri_GKChargeKbnName: TStringField;
    MemFuri_GKTransKbnData: TSmallintField;
    MemFuri_GKTransKbn: TIntegerField;
    MemFuri_GKTransKbnName: TStringField;
    MemFuri_GKFBSetData: TSmallintField;
    MemFuri_GKFBSet: TIntegerField;
    MemFuri_GKFBSetName: TStringField;
    MemFuri_GKEDiInfo: TStringField;
    MemFuri_GKAiteNo1: TStringField;
    MemFuri_GKAiteNo2: TStringField;
    MemFuri_GKAccNCode: TFloatField;
    MemFuri_GKPayNCode: TFloatField;
    MemFuri_GKBankNCode: TFloatField;
    MemFuri_GKBranchNCode: TFloatField;
    MemFuri_GKAutoKbnData: TSmallintField;
    MemFuri_GKAutokbn: TIntegerField;
    MemFuri_GKAutoKbnName: TStringField;
    MemFuri_GKAccAutoData: TIntegerField;
    DSFuri_GK: TDataSource;
    PanelKhnset_G: TMPanel;
    MPanel24G: TMPanel;
    MLabel2G: TMLabel;
    MLabel1G: TMLabel;
    MLabel3G: TMLabel;
    MPanel29G: TMPanel;
    Edit00GPayCodeFree: TMTxtEdit;
    Edit01GItemValue: TMTxtEdit;
    Edit00GPayCodeNum: TMNumEdit;
    Edit01GMaxDigit: TMNumEdit;
    Edit01GSimpleName: TMTxtEdit;
    Edit00GPayName: TMTxtEdit;
    PanelKhnset_GGrid: TMPanel;
    GridKhnsetG: TdxDBGrid;
    GridKhnsetGHojName: TdxDBGridColumn;
    GridKhnsetGItemID: TdxDBGridColumn;
    GridKhnsetGSimpleName: TdxDBGridColumn;
    DSKhnsetG: TDataSource;
    MemKhnset_G: TdxMemData;
    FloatField5: TFloatField;
    StringField72: TStringField;
    StringField73: TStringField;
    IntegerField32: TIntegerField;
    MemKhnset_GItemID: TStringField;
    MemKhnset_GIDName: TStringField;
    MemKhnset_GMaxDigit: TIntegerField;
    MemKhnset_GRemarks: TStringField;
    MemKhnset_GItemValue: TStringField;
    GridKhnsetGHojCode: TdxDBGridColumn;
    DSKihonG: TDataSource;
    MemGai: TdxMemData;
    MemGaiNo: TIntegerField;
    MemGaiName: TStringField;
    MemGaiPay: TdxMemData;
    IntegerField30: TIntegerField;
    StringField71: TStringField;
    MemKihonSateiCalcData: TSmallintField;
    MemKihonGstrAssociation: TStringField;
    MemKihonGstrHojCode: TStringField;
    MemFuri_GTGaikakbn: TIntegerField;
    MemFuri_GTGaiPayKbn: TIntegerField;
    MemFuri_GDFeeAccNCode: TFloatField;
    MemFuri_GDFeeAccInfo: TStringField;
    MemFuri_GDSendNo: TIntegerField;
    MemFuri_GDSendPos: TStringField;
    MemFuri_GDSendLNo: TStringField;
    MemFuri_GDSendDate: TDateTimeField;
    FriGD_IraiFeeAccCode: TdxDBGridButtonColumn;
    FriGD_IraiFeeAccInfo: TdxDBGridColumn;
    FriGD_SendNo: TdxDBGridColumn;
    FriGD_SendPos: TdxDBGridColumn;
    FriGD_SendLNo: TdxDBGridColumn;
    FriGD_SendDate: TdxDBGridDateColumn;
    MemFuri_GDIraiFeeAccNo: TIntegerField;
    FriGD_HHMMDD: TdxDBGridDateColumn;
    FriGD_YYMMDD: TdxDBGridDateColumn;
    GridFurikomiGK: TdxDBGrid;
    FriGK_ShiharaiCode: TdxDBGridColumn;
    FriGK_ShiharaiName: TdxDBGridColumn;
    FriGK_RecChar: TdxDBGridColumn;
    FriGK_IraiAccCode: TdxDBGridButtonColumn;
    FriGK_IraiAccInfo: TdxDBGridColumn;
    FriGK_IraiFeeAccCode: TdxDBGridButtonColumn;
    FriGK_IraiFeeAccInfo: TdxDBGridColumn;
    FriGK_SendNo: TdxDBGridColumn;
    FriGK_SendPos: TdxDBGridColumn;
    FriGK_SendLNo: TdxDBGridColumn;
    FriGK_SendDate: TdxDBGridDateColumn;
    FriGK_HHMMDD: TdxDBGridDateColumn;
    FriGK_YYMMDD: TdxDBGridDateColumn;
    MemFuri_GKIraiFeeAccNo: TIntegerField;
    MemFuri_GKFeeAccInfo: TStringField;
    MemFuri_GKSendNo: TIntegerField;
    MemFuri_GKSendPos: TStringField;
    MemFuri_GKSendLNo: TStringField;
    MemFuri_GKSendDate: TDateTimeField;
    Edit01GItemID: TMTxtEdit;
    Edit01GRemarks: TMTxtEdit;
    GridKhnsetGItemValue: TdxDBGridColumn;
    MemKhnset_GBaseHojCode: TStringField;
    MemKihonGP: TdxMemData;
    MemKihonGPExNCode: TFloatField;
    MemKihonGPintSumKbn: TIntegerField;
    MemKihonGPstrHojCode: TStringField;
    MemKihonGPstrNameSimple: TStringField;
    MemKihonGPstrAssociation: TStringField;
    MemKihonGPGaiData: TSmallintField;
    MemKihonGPintGaiNo: TIntegerField;
    MemKihonGPstrGaiKbn: TStringField;
    MemKihonGPGaiPayData: TSmallintField;
    MemKihonGPintGaiPay: TIntegerField;
    MemKihonGPstrGaiPay: TStringField;
    MemKhnset_GP: TdxMemData;
    FloatField13: TFloatField;
    StringField95: TStringField;
    StringField96: TStringField;
    IntegerField42: TIntegerField;
    StringField97: TStringField;
    StringField98: TStringField;
    IntegerField43: TIntegerField;
    StringField99: TStringField;
    StringField100: TStringField;
    StringField101: TStringField;
    MemFuri_GP: TdxMemData;
    StringField65: TStringField;
    StringField66: TStringField;
    StringField67: TStringField;
    StringField68: TStringField;
    IntegerField27: TIntegerField;
    FloatField6: TFloatField;
    StringField69: TStringField;
    StringField70: TStringField;
    FloatField7: TFloatField;
    StringField74: TStringField;
    StringField75: TStringField;
    IntegerField28: TIntegerField;
    IntegerField29: TIntegerField;
    StringField76: TStringField;
    StringField77: TStringField;
    IntegerField31: TIntegerField;
    IntegerField33: TIntegerField;
    StringField78: TStringField;
    StringField79: TStringField;
    StringField80: TStringField;
    StringField81: TStringField;
    StringField82: TStringField;
    SmallintField16: TSmallintField;
    IntegerField34: TIntegerField;
    StringField83: TStringField;
    StringField84: TStringField;
    SmallintField17: TSmallintField;
    IntegerField35: TIntegerField;
    StringField85: TStringField;
    SmallintField18: TSmallintField;
    IntegerField36: TIntegerField;
    StringField86: TStringField;
    SmallintField19: TSmallintField;
    IntegerField37: TIntegerField;
    StringField87: TStringField;
    SmallintField20: TSmallintField;
    IntegerField38: TIntegerField;
    StringField88: TStringField;
    StringField89: TStringField;
    StringField90: TStringField;
    StringField91: TStringField;
    FloatField8: TFloatField;
    FloatField9: TFloatField;
    FloatField10: TFloatField;
    FloatField11: TFloatField;
    FloatField12: TFloatField;
    SmallintField21: TSmallintField;
    IntegerField39: TIntegerField;
    StringField92: TStringField;
    IntegerField40: TIntegerField;
    IntegerField41: TIntegerField;
    StringField93: TStringField;
    StringField94: TStringField;
    MemFuri_GPSendDate: TDateTimeField;
    MemFuri_GPiraiAccName: TStringField;
    MemFuri_GPShiAccKbnName: TStringField;
    MemFuri_GPShiAccNo: TStringField;
    MemFuri_GPIraiFeeAccName: TStringField;
    MemFuri_GPShiFeeAccKbnName: TStringField;
    MemFuri_GPShiFeeAccNo: TStringField;
    MemKihonGPEOF: TBooleanField;
    MemFuri_GPEOF: TBooleanField;
    MemKhnset_GPEOF: TBooleanField;
    MemChargeG: TdxMemData;
    MemChargeFG_No: TIntegerField;
    MemChargeFG_Name: TStringField;
    MemChargeKbnG: TdxMemData;
    MemChargeKbnGK_No: TIntegerField;
    MemChargeKbnGK_Name: TStringField;
    MemFuri_GPSendDate_S: TStringField;
    MemDraftChargeKbnData: TSmallintField;
    MemDraftChargeKbn: TIntegerField;
    MemDraftChargeKbnName: TStringField;
    MemChargeKbn2: TdxMemData;
    MemChargeKbnK2_No: TIntegerField;
    MemChargeKbnK2_Name: TStringField;
    Teg_ChargeKbn2: TdxDBGridLookupColumn;
    Teg_ChargeKbnName2: TdxDBGridColumn;
    MemDraftCheckChargeKbnName: TStringField;
    GridOffsetnTaxRate: TdxDBGridColumn;
    MemOffsetstrTaxCodePrt: TStringField;
    MemPrintOffsetTaxCodePrt: TStringField;
    MemPrintOffsetTaxCodeMark: TStringField;
    MemPrintOffsetTaxRatePrt: TStringField;
    MemPrintOffsetTaxRateDesc: TStringField;

	procedure   fnDiscontinue					    (var Msg: TMessage); message WM_DISCONTINUE;
	procedure   FormCreate					        (Sender: TObject);
	procedure   FormActivate					    (Sender: TObject);
	procedure   FormCloseQuery				        (Sender: TObject; var CanClose: Boolean);
	procedure   FormClose						    (Sender: TObject; var Action: TCloseAction);
	procedure   FormShow						    (Sender: TObject);
	procedure   FormHide						    (Sender: TObject);
    procedure   BEndClick                           (Sender: TObject);
    procedure   BChangeClick                        (Sender: TObject);
    procedure   GridBeforeChangeColumn              (Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
                                                     NewColumn: Integer; var CanChange: Boolean);
    procedure   CmnGridMouseMove                    (Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure   PMGridPopup                         (Sender: TObject);
    procedure   PMTreeViewPopup                     (Sender: TObject);
    procedure   PMTreeViewTagOffClick               (Sender: TObject);
    procedure   TBTagClick                          (Sender: TObject);
    procedure   PMToolbarTagClick                   (Sender: TObject);
    procedure   DSDraftStateChange                  (Sender: TObject);
    procedure   GridChangeColumn                    (Sender: TObject; Node: TdxTreeListNode; Column: Integer);
    procedure   GridChangeNodeEx                    (Sender: TObject);
    procedure   CmnTreeViewChange                   (Sender: TObject; Node: TTreeNode);
    procedure   CmnTreeViewChanging                 (Sender: TObject; Node: TTreeNode; var AllowChange: Boolean);
    procedure   CmnTreeViewEnter                    (Sender: TObject);
    procedure   MemBeforePost                       (DataSet: TDataSet);
    procedure   BDeleteClick                        (Sender: TObject);
    procedure   CmnGridEnter                        (Sender: TObject);
    procedure   CmnGridKeyPress                     (Sender: TObject; var Key: Char);
    procedure   TabChange                           (Sender: TObject);
    procedure   TBChgColSizeClick                   (Sender: TObject);
    procedure   GridShousaiChange                   (nSelect: Integer);         // <142> Add
    procedure   SetGridShousai                      (nSelect: Integer);         // <142> Add
    procedure   CmnGridEnter2                       (Sender: TObject);
    procedure   CmnGridPayBeforeChangeColumn        (Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
                                                     NewColumn: Integer; var CanChange: Boolean);
    procedure   MemPayBeforePost                    (DataSet: TDataSet);
    procedure   CmnGridPayChangeNodeEx              (Sender: TObject);
    procedure   GridFurikomiBeforeChangeColumn      (Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
                                                     NewColumn: Integer; var CanChange: Boolean);
    procedure   CmnIraiAccCodeEditButtonClick       (Sender: TObject);
    procedure   Fri_BankCodeEditButtonClick         (Sender: TObject);
    procedure   CmnMemBeforePost                    (DataSet: TDataSet);
    procedure   GridDraftBeforeChangeColumn         (Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
                                                     NewColumn: Integer; var CanChange: Boolean);
    procedure   GridOffsetChangeNodeEx              (Sender: TObject);
    procedure   EditEnter                           (Sender: TObject);
    procedure   Edit06TaxCodeChange                 (Sender: TObject);
    procedure   Hoka_ZipCode2EditButtonClick        (Sender: TObject);
    procedure   GridOtherBeforeChangeColumn         (Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
                                                     NewColumn: Integer; var CanChange: Boolean);
    procedure   GridOtherChangeNodeEx               (Sender: TObject);
    procedure   GridOtherChangeColumn               (Sender: TObject; Node: TdxTreeListNode; Column: Integer);
    procedure   GridOtherBeforeChangeNode           (Sender: TObject; Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure   MemOtherBeforePost                  (DataSet: TDataSet);
    procedure   RBNayoseTreeClick                   (Sender: TObject);
    procedure   MemNayoseBeforePost                 (DataSet: TDataSet);
    procedure   GridNayoseBeforeChangeColumn        (Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
                                                     NewColumn: Integer; var CanChange: Boolean);
    procedure   GridNayoseChangeNodeEx              (Sender: TObject);
    procedure   DSNayoseStateChange                 (Sender: TObject);
    procedure   TreeViewDragOver                    (Sender, Source: TObject; X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure   TabEnter                            (Sender: TObject);
    procedure   TreeViewDragDrop                    (Sender, Source: TObject; X, Y: Integer);
    procedure   PMNayoseTreePopup                   (Sender: TObject);
    procedure   PMNayoseTreeEraseClick              (Sender: TObject);
    procedure   NayoseEnter                         (Sender: TObject);
    procedure   TreeViewNayoseChange                (Sender: TObject; Node: TTreeNode);
    procedure   NayoseExit                          (Sender: TObject);
    procedure   GridNayoseChangeColumn              (Sender: TObject; Node: TdxTreeListNode; Column: Integer);
    procedure   TabKeyDown                          (Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure   RBNayoseGridClick                   (Sender: TObject);
    procedure   BPrintClick                         (Sender: TObject);
    procedure   CmnGridKeyDown                      (Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure   CmnGridFurikomiKeyPress             (Sender: TObject; var Key: Char);
    procedure   CmnjGridFuriChangeNodeEx            (Sender: TObject);
    procedure   FreeF1Execute                       (Sender: TObject);
    procedure   MSPFunctionBarFunctionClick         (Sender: TObject; FuncNo: Integer);
    procedure   FreeF8Execute                       (Sender: TObject);
    procedure   ArrowClick                          (Sender: TObject);
    procedure   MemKihonBeforePost                  (DataSet: TDataSet);
    procedure   FormDestroy                         (Sender: TObject);
    procedure   GridOffsetDblClick                  (Sender: TObject);
    procedure GridPayWay_GCodeEditButtonClick(Sender: TObject);
    procedure MemPayWayBeforePost(DataSet: TDataSet);
    procedure GridPayWayCustomDrawCell(Sender: TObject; ACanvas: TCanvas;
      ARect: TRect; ANode: TdxTreeListNode; AColumn: TdxTreeListColumn;
      ASelected, AFocused, ANewItemRow: Boolean; var AText: String;
      var AColor: TColor; AFont: TFont; var AAlignment: TAlignment;
      var ADone: Boolean);
    procedure GridPayWayBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridShousaiBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridShousaiChangeNodeEx(Sender: TObject);
    procedure MemShousaiBeforePost(DataSet: TDataSet);
    procedure GridKihonBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridPayWayKeyPress(Sender: TObject; var Key: Char);
    procedure GridCheckKeyPress(Sender: TObject; var Key: Char);
    procedure GridDraftKeyPress(Sender: TObject; var Key: Char);
    procedure GridKihonBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure GridKihonCustomDrawCell(Sender: TObject; ACanvas: TCanvas;
      ARect: TRect; ANode: TdxTreeListNode; AColumn: TdxTreeListColumn;
      ASelected, AFocused, ANewItemRow: Boolean; var AText: String;
      var AColor: TColor; AFont: TFont; var AAlignment: TAlignment;
      var ADone: Boolean);
    procedure GridKihonKeyPress(Sender: TObject; var Key: Char);
    procedure GridShousaiCustomDrawCell(Sender: TObject; ACanvas: TCanvas;
      ARect: TRect; ANode: TdxTreeListNode; AColumn: TdxTreeListColumn;
      ASelected, AFocused, ANewItemRow: Boolean; var AText: String;
      var AColor: TColor; AFont: TFont; var AAlignment: TAlignment;
      var ADone: Boolean);
    procedure fnLaunchSwkAddDlg();                                  // <181> ADD
    function fnKojiInfoCheck (nKojiNCode: Extended; iMasterKbn: Integer; var iPartKbn: Integer):Boolean;
    procedure FreeF6Execute(Sender: TObject);
// <191> Del start
{
    procedure GridKihonChangeColumn(Sender: TObject; Node: TdxTreeListNode;
      Column: Integer);    // <181> ADD
}
// <191> Del end
    function fnPayPtnInfoChk (sHojCD: String; Column: Integer):	Boolean;// <191> Add
    function fnGetLayoutInfoDescription(): String;                      // <196> ADD
    procedure SetTegColumnsEnable();                                    // <196> ADD
    procedure GridDraftChangeColumn(Sender: TObject; Node: TdxTreeListNode;
      Column: Integer);
    procedure GridDraftChangeNode(Sender: TObject; OldNode,
      Node: TdxTreeListNode);
    procedure GridFurikomiGDBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridFurikomiGTBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridFurikomiGKBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridKhnsetGChangeNodeEx(Sender: TObject);
    procedure GridKhnsetGDblClick(Sender: TObject);
    procedure EditGEnter(Sender: TObject);
    procedure MemKihonGBeforePost(DataSet: TDataSet);
    procedure GridKihonGBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure GridKihonGBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure GridKihonGCustomDrawCell(Sender: TObject; ACanvas: TCanvas;
      ARect: TRect; ANode: TdxTreeListNode; AColumn: TdxTreeListColumn;
      ASelected, AFocused, ANewItemRow: Boolean; var AText: String;
      var AColor: TColor; AFont: TFont; var AAlignment: TAlignment;
      var ADone: Boolean);
    procedure GridKihonGChangeNodeEx(Sender: TObject);
    procedure GridFurikomiGDCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused,
      ANewItemRow: Boolean; var AText: String; var AColor: TColor;
      AFont: TFont; var AAlignment: TAlignment; var ADone: Boolean);
    procedure Edit01GItemValueKeyPress(Sender: TObject; var Key: Char);
    procedure Edit01GItemIDKeyPress(Sender: TObject; var Key: Char);
    procedure dxDBGridSelectCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused,
      ANewItemRow: Boolean; var AText: String; var AColor: TColor;
      AFont: TFont; var AAlignment: TAlignment; var ADone: Boolean);
    procedure Edit07TaxRateChange(Sender: TObject);

// <120>    procedure   PMGridTagOffClick                   (Sender: TObject);
// <120>    procedure   PMGridTagCommentClick               (Sender: TObject);
// <120>    procedure   PMTreeViewTagCommentClick           (Sender: TObject);
// <120>    procedure   Hoka_ChangeCodeEditButtonClick      (Sender: TObject);
// <120>    procedure   GridNayoseOyaCodeEditButtonClick    (Sender: TObject);
// <120>    procedure   GridNayoseCodeEditButtonClick       (Sender: TObject);
// <120>    procedure   BSearchClick                        (Sender: TObject);

  private
    { Private 宣言 }
    uvFncInfo               :   urFncInfo;
    uvExpOpenSW             :   Boolean;                                        // ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ(True:OPEN False:CLOSE)　
    MASTER_CONSTRUCT		:	Integer;		                                //	工事(可変)      <033>
    MASTER_CONSTKIND		:	Integer;		                                //	工種(可変)      <033>
    MASTER_HOJYO1           :   Integer;                                        //  第一補助        <033>
    MASTER_HOJYO2           :   Integer;                                        //  第二補助        <033>
	m_pRec			        :   ^TMjsAppRecord;				                    // ｾｰﾌﾞ用ﾎﾟｲﾝﾀ
	m_Base_pRec		        :   ^TMjsAppRecord;                                 // <101>
    m_cDataModule	        :   TMDataModulef;
    m_cComArea		        :   TJNTMASCom;
	m_cDBCommon			    :   TFDConnection;
    m_cDBSelect		        :   TFDConnection;
	m_cACControl	        :   TWinControl;			                        // ｱｸﾃｨﾌﾞｺﾝﾄﾛｰﾙ
	m_cErrorMsgRec		    :   TMJSMsgRec;
	MjsMsgRec 			    :   TMjsMsgRec;
    m_CmpList	            :   TList;
    m_CmpList2		        :   TList;
    B_Print 	            :   TMSpeedButton;
    B_Change                :   TMSpeedButton;                                  // 切出/埋込ﾎﾞﾀﾝ<108>
    m_bBtnChange	        :   Boolean;                                        // 切出≪=≫埋込ﾌﾗｸﾞ<108>
    m_DLKihonFlg            :   Boolean;                                        // 基本情報ﾃﾞｰﾀ取得ﾌﾗｸﾞ <155> Add
    m_DLKihonGFlg           :   Boolean;                                        // 外貨基本情報ﾃﾞｰﾀ取得ﾌﾗｸﾞ
// <142> 2007/02/20 H.Kawato Mod
//	m_arAdoptInfo	        :   array [0..35] of AdoptInfo;                     //<114>
	m_arAdoptInfo	        :   array [0..45] of AdoptInfo;
	m_arCodeAttribute	    :   array [0.. 2] of CodeAttribute;
	m_arPayLineInfo		    :   array [1.. 5] of PayLineInfoRec;
	m_arShousaiLineInfo	    :   array [1.. 5] of ShousaiLineInfoRec;            //<142> Add
	m_PayWayLineInfo	    :   PayWayLineInfoRec;                              //<142> Add
    m_iBeforePriPayWay      :   Integer;                                        //<142> Add
	m_bPriPayWayChgFlg		:	Boolean;										//<172> Add
	m_LineInfo		  	    :   LineInfoRec;
//<GA001>ST
	m_LineInfoG		  	    :   LineInfoRecG;
//<GA001>ED
	m_AfterSave			    :   AfterSaveRec;
	m_DataLoadFlg		    :   DataLoadFlgRec;
	m_cNodeRightClick	    :   TTreeNode;
	m_NayoRightClick	    :   TTreeNode;
	m_Qe				    :   TMQuery;
	m_nHintPosition		    :   Extended;
	m_nHojyoTree		    :   Byte;
	m_nDateFormatDivision   :   Integer;						                // 和暦/西暦区分
	m_nMailAdoption		    :   Integer;						                // ﾒｰﾙ会計処理区分
	m_nCompDivision		    :   Integer;						                // 公益法人区分
	m_nTaxInfoAccDivision   :   Integer;						                // 会計処理区分
	m_nReferMode		    :   Integer;						                // ﾒｰﾙ会計参照ﾌﾗｸﾞ
	m_nKmkCompound01	    :   Integer;						                // 複合科目
	m_nKmkCompound02	    :   Integer;						                // 資金複合科目
	m_nCurCodeDigit		    :   Integer;
	m_nCurCodeAttribute	    :   Integer;
	m_nCurItemDivision	    :   Integer;
	m_nColumn			    :   Integer;
	m_strValidCharacters    :   String;						                    // 使用可能ｺｰﾄﾞ
	m_strHojCodeGeneral	    :   String;						                    // 諸口
	m_strHintPosition	    :   String;
	m_Save				    :   String;
	m_bChange			    :   Boolean;						                // 切出ﾎﾞﾀﾝ押下判断ﾌﾗｸﾞ
	m_bPayRatioDetail	    :   Boolean;						                // 支払方法(比率)の詳細表示ﾌﾗｸﾞ
	m_bShousaiDetail	    :   Boolean;						                // 優先支払情報の詳細表示ﾌﾗｸﾞ   <142> Add
	m_bEndFlg			    :   Boolean;						                // 終了ﾎﾞﾀﾝ押下判断ﾌﾗｸﾞ
	m_bChangeFlag		    :   Boolean;						                // ChangeNodeEX後ChangeColumnでのﾁｪｯｸを通る為
	m_EditFlg			    :   Boolean;						                // 編集ﾌﾗｸﾞ
	m_ThroughTab		    :   Boolean;						                // TabThrough
	m_FusenFlg			    :   Boolean;
	m_ZoomRatio			    :   Integer;						                // 拡大率	//<#2>
    m_IsUpdate              :   Boolean;
    m_IsDelete              :   Boolean;                                        // <150> Add
    uvHani                  :   TJNTHani;		                                // <PRN> 範囲ﾀﾞｲｱﾛｸﾞ用ﾊﾟﾗﾒｰﾀ
    PrintAppEntry   	    :   TPrintAppEntry;                                 // <PRN>
    ArrHdl                  :   Array[0..100] of Pointer;		                // <PRN> Lのﾌｫｰﾑﾎﾟｲﾝﾀの格納配列(Lに渡す)
    PrtParam		        :   rcPrtParam;                                     // <PRN>
    DmqPrint                :   TMQuery;                                        // <PRN> 印刷用ｸｴﾘｰ
	uvSelSys                :   TJNTSelCorpSys; 	                            // <PRN> 会社ｼｽﾃﾑ情報
    MComboBox               :   TMComboBox;
    m_cJNTArea              :   TJNTCommon;                                     // <100>
    m_InsFlg                :   Boolean;                                        // Insert or Update判断FLG
    m_ExNCode               :   Extended;                                       // NCodeBackUp
    m_sUseString            :   String;                                         // 採用情報(MasterInfo)保存用文字列 <104>
    KhnKensu                :   Integer;                                        // 表示件数<GA001>
    Edit01NewKbn            :   Integer;                                        //<GA003>    


// <100>	m_cPayAccExp	    :   TPAYAccExpIF;
// <114>	m_arAdoptInfo	    :   array [0..15] of AdoptInfo;
// <120>	m_cPreview		    :   TMJSPreviewIF;
// <120>	m_cPrnSupport		:   TMjsPrnSupport;
// <120>	m_cExcept			:   TJNTMASExceptIF;				            // 排他制御

// <122> Add St ↓
    m_PayProgRendo          :   TJNTPayProgRendo;                               // 進捗連動
    m_PayProgRendoG         :   TJNTPayProgRendoG;                              // 進捗連動<GA001>
    m_ProgRendoFlg          :   Boolean;                                        // 連動処理判定フラグ
    m_ProgRendoGFlg         :   Boolean;                                        // 連動処理判定フラグ<GA001>
    m_iSateiChgKbn          :   Integer;                                        // 進捗連動 査定区分
//    m_arPayLineSave		    :   array [1.. 5] of PayLineInfoRec;            // Save用基本情報   // <139> Del
    m_FuriInfoSave          :   FurikomiInfoRec;                                    // Save用振込情報
//<GA001>ST
    m_FuriInfoSave_GD       :   FurikomiInfoRec_G;                                // Save用振込情報
    m_FuriInfoSave_GT       :   FurikomiInfoRec_G;                                // Save用振込情報
    m_FuriInfoSave_GK       :   FurikomiInfoRec_G;                                // Save用振込情報
//<GA001>ED



// <122> Add Ed ↑

    m_iHeikouData           :   Integer;                                        // <128> 平行支払採用区分
    m_iHeikouCount          :   Integer;                                    	// <128> 平行支払処理件数
    m_arPayRatioSave	    :   array [1.. 5] of PayLineInfoRec;                // <133> 2006/08/10 H.Kawato Add
    m_bChgNodeFlg           :   Boolean;                                        // <138> 2006/08/11 H.Kawato Add

    m_RepHandle		        :   THandle;                                        // <141> 2006/08/17 H.Kawato Add
    m_iGaikaKbn             : Integer;                                          // <GA001>外貨採用区分

// <142> 2007/02/20 H.Kawato Add Start
    m_iBmnAssAdopt          : Integer;                                          // 部門別査定採用区分
    m_iKmkAssAdopt          : Integer;                                          // 科目別査定採用区分
    m_iProAdoptKbn          : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄ別支払採用区分
    m_iSubAdoptKbn          : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用区分
    m_iProjectKbn           : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄ区分
    m_iProjSubKbn           : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ区分
    m_iPrjCodeAttr          : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ属性
    m_iPrjCodeDigit         : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ桁数
    m_iPjSubCodeAttr        : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ属性
    m_iPjSubCodeDigit       : Integer;                                          // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ桁数
    m_sProjectTitle         : String;                                           // ﾌﾟﾛｼﾞｪｸﾄﾀｲﾄﾙ名称
    m_sPjSubTitle           : String;                                           // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞﾀｲﾄﾙ名称
// <142> 2007/02/20 H.Kawato Add End

    m_nTantoCd              : Extended;                                         // <142> 担当者内部ｺｰﾄﾞ
    m_nPrjSubUnAdopt        : Integer;                                          // <142> 相殺情報工種情報採用ﾌﾗｸﾞ
                                                                                // (0:初期値 1:ｻﾌﾞﾌﾟﾛｼﾞｪｸﾄ変更あり 2:ｻﾌﾞﾌﾟﾛｼﾞｪｸﾄ採用無)
    m_SyncMaster            : TSyncMaster;                                      // <Rel> ﾏｽﾀ同期基本ｸﾗｽ
    m_iVerData              : Integer;                                          // <154> 債務ﾃﾞｰﾀﾊﾞｰｼﾞｮﾝ

	m_dSousaiBmnNCode		: Extended;			                                // 部門内部コード <161> ADD

    m_sSpotPayCD            : String;                                           // スポット支払支払先コード <173> ADD

    m_nHojyoNCode           : Array[1..400] of Currency;	                    // <181> ADD

    m_rCommonBmn            : array of urCommonBmn;                             // 共通部門、非課税部門 <194> ADD

    m_JNTAuthority          : TJNTAuthority;                                    // <AUT> ADD

// <196> ADD-STR
    m_iErUseKbn             : Integer;                                          // 電子記録債権採用区分
    m_sLayoutInfo           : String;                                           // レイアウト情報
    m_arFreeInfo            : array [0.. 10] of String;                         // フリー項目情報
// <196> ADD-END

	m_TaxRateInfo 	        : TMASTaxRateInfo;				                    // 消費税率情報 <TX26> ADD
// <#TAX10> MOD-STR
	m_TaxRateInfoFront		: TMASTaxRateInfo;									// 消費税率情報クラス（軽減税率含む(印刷用)）
	m_nTaxKbn				: Integer;
// <#TAX10> MOD-END

	procedure SessionPractice(iSyori: Integer);									// <159> ｾｯｼｮﾝ管理ｽﾄｱﾄﾞ
    procedure BankInfoDlg();                                                    // <182> Add

  public
    { Public 宣言 }
    constructor fnCreateForm ( pRec : Pointer);	                                // ｺﾝｽﾄﾗｸﾀ

	procedure	CMChildKey								(var Msg: TWMKey); message CM_CHILDKEY;
	procedure 	fnSetProperty							();						// ﾌﾟﾛﾊﾟﾃｨのｾｯﾄ
	procedure	fnInitializeComInformation				();						// 初期処理(必要情報取得)
	procedure 	fnSetLookUpDspInfo						();						// LookUpで表示する名称ｾｯﾄ
	procedure   fnInitializeScreen 						();						// 初期処理(画面のﾌﾟﾛﾊﾟﾃｨ)
	procedure   fnInitializePrjCode						();						// 初期処理(画面のﾌﾟﾛﾊﾟﾃｨ)  // <142> Add
	procedure   fnInitializePjSubCode					();						// 初期処理(画面のﾌﾟﾛﾊﾟﾃｨ)  // <142> Add
	procedure 	fnChangeConditionGrid					();						// Gridの状態変更
	procedure	fnChangeConditionAllControls			(fEnabled: Boolean);	// 相殺入力ﾊﾟｰﾂの状態変更
	procedure	fnMakeTree								();						// ﾂﾘｰ作成処理
	procedure 	fnMakeNayoseTree						();						// 名寄せﾂﾘｰ作成処理
	procedure 	fnMakeNayoseTreeItem					(cNode: TTreeNode);		// 名寄せﾂﾘｰ子供作成処理
	procedure 	fnMakeNayoseTreeItems					(cNode: TTreeNode; Qe: TMQuery);
	procedure	fnErrorMessageDsp						(Qe: TMQuery);			// Queryのｴﾗｰﾒｯｾｰｼﾞ表示処理
	procedure 	fnFusenDsp								(FK,Dispose: Integer);	// 付箋表示処理
																				// 付箋情報のｾｯﾄ
	procedure   fnSetTagInfoGrid						(nDivision: Integer; nTagKind: Integer);

	procedure 	fnUpdateMemDataRecord					(nDivision: Integer; strHojCode: String; nTagKind: Integer);
	procedure 	fnMoveRecSelecterGrid					(nDivision: Integer; strHojCode: String);
																				// ﾎﾞﾀﾝの状態変更
	procedure 	fnChangeConditionToolbarButtons 		(nSumDivision: Integer; strHojCode: String);
	procedure 	fnDeleteTreeViewItems					(strHojCode: String);	// TreeViewItem削除処理
	procedure 	fnInitializeOffsetJournalInfo			();
//<GA001>ST
	procedure 	fnInitializeKhnsetGJournalInfo			();
//<GA001>ED

	// 表示処理
	procedure	fnGetRealInfo							();						// 実在
	procedure 	fnGetTotalInfo							();						// 合計
	procedure 	fnGetPayWayInfo     					();						// 支払方法     <142> Add
	procedure 	fnGetPayWayRatioInfo					();						// 方法(比率)
	procedure 	fnGetPayWayFixedInfo					();						// 方法(定額)
    procedure   fnGetPayWayShousaiInfo                  ();                     // 優先支払詳細 <142> Add
	procedure 	fnGetFurikomiInfo						();						// 振込
//<GA001>ST
	procedure 	fnGetFurikomiInfoGD						();						// 電信送金
	procedure 	fnGetFurikomiInfoGT						();						// 為替手形
	procedure 	fnGetFurikomiInfoGK						();						// 送金小切手
//<GA001>ED
	procedure 	fnGetDateFurikomiInfo					();						// 期日指定振込
	procedure 	fnGetDraftInfo							();						// 手形
	procedure 	fnGetCheckInfo							();						// 小切手
	procedure	fnGetOffsetInfo							();						// 相殺
//<GA001>ST
	procedure	fnGetKhnsetGInfo		   				();						// 可変項目
//<GA001>ED
	procedure 	fnGetOtherInfo							();						// その他
	procedure 	fnGetNayoseInfo							();						// 名寄せ
    procedure   fnGetKihonInfo                          ();                     // 基本情報 <050>
//<GA001>ST
    procedure   fnGetKihonInfoG                         ();                     // 外貨基本情報 <050>
//<GA001>ED

	// 1ﾚｺｰﾄﾞ読み込み
// <142> 2007/02/20 H.Kawato Mod Start
{
	procedure 	fnGetFurikomiOneRecordInfo				(cMem: TdxMemData; sCD: String);// 振込
	procedure 	fnGetDateFurikomiOneRecordInfo			(cMem: TdxMemData; sCD: String);// 期日指定振込
	procedure	fnGetDraftOneRecordInfo					(cMem: TdxMemData; sCD: String);// 手形
	procedure 	fnGetCheckOneRecordInfo					(cMem: TdxMemData; sCD: String);// 小切手
}
	procedure 	fnGetFurikomiOneRecordInfo				(cMem: TdxMemData; sCD: String; iPN: Integer);// 振込
	procedure 	fnGetDateFurikomiOneRecordInfo			(cMem: TdxMemData; sCD: String; iPN: Integer);// 期日指定振込
	procedure	fnGetDraftOneRecordInfo					(cMem: TdxMemData; sCD: String; iPN: Integer);// 手形
	procedure 	fnGetCheckOneRecordInfo					(cMem: TdxMemData; sCD: String; iPN: Integer);// 小切手
// <142> 2007/02/20 H.Kawato Mod End

	procedure 	fnChkPayPtnInfo							();								// 支払条件ﾊﾟﾀｰﾝが存在するかﾁｪｯｸ
	procedure 	fnSetPayLineData						(Sender: TObject);				// 支払方法の行のﾃﾞｰﾀ取得
    procedure   fnSetPayWayLineData                     (Sender: TObject);              // 支払方法の行ﾃﾞｰﾀ取得     <142> Add
    procedure   fnSetShousaiLineData                    (Sender: TObject);              // 優先支払詳細の行ﾃﾞｰﾀ取得 <142> Add
	procedure 	fnSetFuriLineData						(Sender: TObject);				// 振込、期日指定振込の行のﾃﾞｰﾀ取得
																						// 手数料計算区分ｾｯﾄ
	procedure 	fnSetCalcKbn							(Sender: TObject; BankCD,BranchCD: Integer);
	procedure 	fnSetAttributeOffsetJournalInfo			(nKmkCode: Integer);
	procedure 	fnChangeConditionOffsetJournalInfo		(nFieldID: Integer);
	procedure	fnChangeConditionOffsetJournalInfoEx	(nPosition: Integer);


	procedure	fnSetTaxOffsetJournalInfo				(Qe: TMQuery);

	procedure 	fnChangeConditionOffsetTax				();

	procedure 	fnTreeAgainDspInit						();
	procedure 	fnF1DeletePayNayoseInfo					();

	// 印刷処理

    procedure	fnPrintCheckListRealTotal				(nSelect: Integer);				// 支払先登録ﾘｽﾄ
	procedure	fnPrintCheckListPayMethods				(nSelect: Integer);				// 支払方法(比率/定額)
	procedure	fnPrintCheckListFurikomi				(nSelect: Integer);				// 振込、期日指定振込
//<GA001>ST
    procedure	fnPrintCheckListkihonG  				();         				// 支払先登録ﾘｽﾄ
	procedure	fnPrintCheckListFurikomiGP				(nSelect: Integer);				// 電信送金、為替手形、送金小切手
	procedure	fnPrintCheckListKhnsetG					();	                    		// 可変項目情報
//<GA001>ED


	procedure 	fnfnPrintCheckListDraftCheck			(nSelect: Integer);				// 手形、小切手
	procedure	fnPrintCheckListOffset					();								// 相殺情報
    procedure	fnSetMemDataPrintPayDtlSyousai          (nNCode: Extended; nPayPtnNo, nPriPayWay, nSelect: Integer);
                                                                                        // 詳細情報取得 <142> Add

	procedure	fnCmnGridCheckPay						();
	procedure 	fnGridCheckFurikomi						();
	procedure 	fnGridCheckDraft						();
	procedure 	fnMemUpdate								(MODE: Integer; RecInfo: RecInfoRec; cMem: TdxMemData);
    procedure   fnGetPayPtnInfo                         (RecInfo: RecInfoRec; cMem: TdxMemData);    // 支払条件パターン情報取得 <142> Add
// <142> 2007/02/20 H.Kawato Mod
//	procedure	fnMemDelete								(sCD: String; cMem: TdxMemData);
	procedure	fnMemDelete								(sCD: String; iPayPtnNo: Integer; cMem: TdxMemData);
    procedure	fnMemDeleteNayose						(Kbn: Byte; sCD: String);
// <142> 2007/02/20 H.Kawato Mod
//	procedure 	fnMemDeleteOffset						(sCD: String);
	procedure 	fnMemDeleteOffset						(sCD: String; iPayPtnNo: Integer);
//<GA001>ST
	procedure 	fnMemDeleteKhnsetG						(sCD: String; iPayPtnNo: Integer);
//<GA001>ED
	procedure 	fnDataLoad								(nSelect: Integer);
	procedure   fnGridOptionsControl					(Dispose: Boolean; MODE: Integer; cMem: TdxMemData);

	function	fnInitializeProcedure					(): Boolean;
	function	fnSetMasterInfoData						(): Boolean;
	function 	fnInitializeScreenStandard 				(): Boolean;
// <120>	function 	fnInitializeExCodeAttribute 			(): Boolean;
																						// 採用情報取得
	function 	fnGetAdoptInformation 					(nMasterDivision: Integer; var nAdoption,nCodeDigit,nCodeAttribute: Integer; var strDescription: String): Boolean;
// <120>	function 	fnCheckRecordRequisite 					(): Integer;					// 諸口があるチェック
// <120>	function	fnExcept								(): Integer;					// 排他制御処理
																						// ｺｰﾄﾞ編集処理
	function 	fnEditCode								(MasKbn: Integer; CODE: String):String;
	function 	fnGetDivisionSelectedTag				(ExHojCode: Extended): Integer;	// 付箋区分取得
																						// Selecterの移動処理
	function 	fnMoveGridSelecter						(cMem: TdxMemData;HojoCode,FildName: String): Boolean;
//<GA001>ST
	function 	fnMoveGridSelecterGID 					(cMem: TdxMemData;HojoCode,ItemID: String): Boolean;
//<GA001>ED

																						// 付箋情報を更新
//	function 	fnUpdateMasterRecordMFusenInfo			(strHojCode: String; var nTagKind: Integer): Boolean;
	function 	fnUpdateMasterRecordMFusenInfo			(ExNCode: Extended; var nTagKind: Integer): Boolean;
	function 	fnGetBitmapSelectedTag 					(nSelectedTag: Integer): TBitmap;// 選択されたBitmap情報取得
	function 	fnCheckDeletePermitGeneralRec			(): Boolean;					// 削除可能かﾁｪｯｸ
	function 	fnCheckDeletePermitParentRec 			(strHojCode: String): Boolean;	// 削除可能かﾁｪｯｸ(合計)
	function 	fnCheckValidCodeUseCharacters			(strHojCode: String): Boolean;
	function 	fnCheckValidMasterDataRecord 			(strHojCode: String): Boolean;	// 同一ｺｰﾄﾞのﾁｪｯｸ
	function 	fnCheckPermitGeneralRecord 				(strHojCode: String): Boolean;	// 諸口の判断
	function 	fnUpdateMasterRecordStandard			(sHojCode: String): Boolean;	// 更新処理
	function 	fnUpdateMasterRecordStandardG			(sHojCode: String): Boolean;	// 更新処理<GA001>

																						// HojyoTreeの更新処理
	function 	fnUpdateMasterRecordHojyoTree			(sHojCode: String; SumKbn: Integer; Mem: TdxMemData): Boolean;
																						// 補助基本ﾏｽﾀの更新
	function 	fnUpdateMasterRecordHojyoMA 			(sHojCode: String; SumKbn: Integer; Mem: TdxMemData): Boolean;
// <142> 2007/02/20 H.Kawato Add
																						// 支払条件ﾊﾟﾀｰﾝの更新
//	function 	fnUpdateMasterRecordPayPtnInfo			(sHojCode: String; Mem: TdxMemData): Boolean;
																						// 査定方法の更新
	function 	fnUpdateMasterRecordSateiKbn            (sHojCode: String; Mem: TdxMemData): Boolean;
	function 	fnUpdateMasterRecordBunkaiKbn			(Mem: TdxMemData): Boolean;     // 分解区分の更新
//<GA001>ST
	function 	fnUpdateMasterRecordGaiKbn              (sHojCode: String; Mem: TdxMemData): Boolean;
//<GA001>ED
// <142> 2007/02/20 H.Kawato Add

	function 	fnUpdateMasterRecordPayOffsetInfo		(): Boolean;
//<GA001>ST
	function 	fnUpdateMasterRecordPayKhnsetGInfo		(): Boolean;
//<GA001>ED
	function 	fnGetEntryNumberFinal 					(strHojCode: String): Integer;	// 登録NOの取得

// <142> 2007/02/20 H.Kawato Mod
//	function 	fnDeleteMasterRecord					(strHojCode:String; ExNCode: Extended): Boolean;	// 削除処理
	function 	fnDeleteMasterRecord					(strHojCode:String; ExNCode: Extended; iPayPtnNo: Integer): Boolean;    // 削除処理
	function 	fnDeleteMasterRecordHojyoTree			(ExNCode: Extended ): Boolean;	// 補助加算体系ﾏｽﾀ削除処理
	function 	fnDeleteMasterRecordMTOKUI   			(ExNCode: Extended ): Boolean;	// 補助基本ﾏｽﾀ削除処理
	function 	fnDeleteMasterRecordPayPtnInfo			(ExNCode: Extended ): Boolean;	// 支払条件ﾊﾟﾀｰﾝ削除処理
	function	fnDeleteMasterRecordMFusenInfo			(ExNCode: Extended ): Boolean;	// ﾏｽﾀ付箋管理情報削除処理
// <142> 2007/02/20 H.Kawato Mod
//	function 	fnDeleteMasterRecordPayPtnDtl			(ExNCode: Extended ): Boolean;	// 支払条件詳細ﾏｽﾀ削除処理
	function 	fnDeleteMasterRecordPayPtnDtl			(ExNCode: Extended; iPayPtnNo: Integer): Boolean;	// 支払条件詳細ﾏｽﾀ削除処理
	function	fnDeleteMasterRecordPayDetailInfo		(ExNCode: Extended ): Boolean;	// 支払詳細情報ﾏｽﾀ削除処理
	function	fnDeleteMasterRecordPayNayoseInfo		(ExNCode: Extended ): Boolean;	// 名寄せ情報ﾏｽﾀ削除処理
	function	fnDeleteMasterRecordPayOffsetInfo		(ExNCode: Extended ): Boolean;	// 相殺情報ﾏｽﾀ削除処理

	function 	fnGetPayPtnInfoBunkai					(sHojCode: String): Integer;	// 分解方法を取得
																						// 支払条件明細ﾏｽﾀ更新処理
	function 	fnUpDatePayPtnDtl						(HC: String; NO,Sel: Integer; Mem: TdxMemData): Boolean;
    function    fnUpDatePriPayWay                       (Mem: TdxMemData): Boolean;     // 優先支払方法の更新       <142> Add
                                                                                        // 優先支払詳細情報の更新   <142> Add
    function    fnUpDatePayDetailShousai                (DataSet: TDataSet): Boolean;   // 優先支払詳細情報の更新   <142> Add
// <172> Mod
//  function    fnInsertShousai                         (DataSet: TDataSet): Boolean;   // 優先支払詳細の新規登録   <142> Add
	function    fnInsertShousai                         (DataSet: TDataSet; PriPayWay: Integer): Boolean;   // 優先支払詳細の新規登録
// <172> Mod
                                                                                        // 優先支払詳細情報の削除   <142> Add
    function    fnDeleteShousai                         (nPayNCode: Extended; nPayPtnNo: Integer): Boolean;
    function    fnUpDateShousai                         (Edaban: Integer; DataSet: TDataSet): Boolean;
																						// 支払行のﾁｪｯｸと編集処理
	function 	fnPayLineChkEdit						(Sender: TObject; Col,Int: Integer): Boolean;
	function 	fnExchangeCharacterKanaDesc 			(strDescription: String): String;// 銀行ｶﾅ名称編集
																						// 銀行ｺｰﾄﾞ情報取得
	function 	fnGetBankCodeInfo						(BC: Integer; var BankName,BankKana: String):Boolean;
																						// 支店ｺｰﾄﾞ情報取得
	function 	fnGetBranchCodeInfo						(BC,BranchCD: Integer; var BranchName,BranchKana: String):Boolean;
																						// 銀行依頼ｺｰﾄﾞ情報取得
	function 	fnGetAccCodeInfo						(AC: Integer; var iRet,BankCD,BranchCD: Integer; var Dsp: String): Boolean;
//<GA001>ST
	function 	fnGetAccCodeInfo_G						(NC: Integer; var iRet,BankCD,BranchCD,GCode: Integer; var Dsp,Dsp1,Dsp2,Dsp3: String): Boolean;
//<GA001>ED
	function 	fnGetEditedAccountNumber				(strAccountNo: String): String;	// 口座番号編集処理
                                                                                        // 支払先情報取得       <142> Add
    function    fnGetPayCodeInfo                        (nGCode: String; var nNCode: Extended; var sName,sRenso: String): Boolean;
                                                                                        // ﾌﾟﾛｼﾞｪｸﾄ情報取得     <142> Add
    function    fnGetPrjCodeInfo                        (nGCode: String; iKbn: Integer; var nNCode: Extended; var sName: String; var iPartKbn: Integer): Boolean;
                                                                                        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ情報取得
    function    fnGetPjSubCodeInfo                      (nGCode: String; iKbn, iPartKbn: Integer; nPrjNCode: Extended; var nNCode: Extended; var sName: String): Boolean;
                                                                                        // 支払条件ﾊﾟﾀｰﾝﾁｪｯｸ    <142> Add
    function    fnGetPayPtnInfoCheck                    (nPayNCode, nPrjNCode, nPjSubNCode: Extended): Boolean;
    function    fnGridPayWayCheck                       (cMem: TdxMemData): Boolean;    // 同一支払条件ﾊﾟﾀｰﾝﾁｪｯｸ<142> Add

	// 支払詳細情報ﾏｽﾀ更新処理
	function 	fnUpDatePayDetailInfoTransfer			(HC: String; Mem: TdxMemData): Boolean;	// 振込
//<GA001>SD
	function 	fnUpDatePayDetailInfoTransfer_G	        (HC: String; Mem: TdxMemData): Boolean;	// 外貨（
//<GA001>ED
	function 	fnUpDatePayDetailInfoDateTran			(HC: String; Mem: TdxMemData): Boolean;	// 期日指定振込
	function 	fnUpDatePayDetailInfoDraft				(HC: String; Mem: TdxMemData): Boolean;	// 手形
    function    fnUpDatePayDetailSyousaiInfoDraft       (HC: String; Mem: TdxMemData): Boolean; // 手形詳細
	function 	fnUpDatePayDetailInfoCheck				(HC: String; Mem: TdxMemData): Boolean;	// 小切手
	// その他情報更新処理
// <120>	function 	fnUpDateOtheInfoCSInfo					(): Boolean;							// 取引先詳細情報
//	function 	fnUpDateOtheInfoPayPtnInfo				(): Boolean;							// 支払条件ﾊﾟﾀｰﾝ    // <142> Del
	function 	fnUpDateOtheInfoPayDetailInfo			(): Boolean;							// 支払詳細情報
	function	fnUpDatePayNayoseInfo					(PayNCD,OyaNCD: Extended; KBN,MODE: Integer): Boolean;
	function 	fnDeletePayNayoseInfo					(PayNCD,OyaNCD: Extended; MODE: Integer): Boolean;
	function 	fnGetPayPtnDtlHouHou					(sHojCode: String; HouHou: Integer): Integer;
	function 	fnKmkCheck								(Kmk: Integer;          var sRet: String;  var bRet: Boolean): Boolean;
//	function 	fnKmkHojCheck							(Kmk,KmkHoj: Integer;   var sRet: String;  var bRet: Boolean): Boolean;
	function 	fnKmkHojCheck							(Kmk:Integer; KmkHoj:String;   var sRet: String;  var bRet: Boolean): Boolean;
	function 	fnHojoCheck								(MasKbn,nOption: Integer; HojCode: String; var sRet: String; var bRet: Boolean): Boolean;
	function 	fnHojoCheckEx							(HojCode: String; nPos: Integer; var sRet: String; var bRet: Boolean): Boolean;

    function 	fnSetOffsetInfo							(): Boolean;							// 相殺情報ｾｯﾄ
//<GA001>ST
    function 	fnSetKhnsetGInfo						(): Boolean;							// 可変項目情報ｾｯﾄ
    function	fnGetPayFbVariable (strID: String;
									var strSimpleName: String;
									var iDigit: Integer;
                                    var strRemarks: String): Boolean;
//<GA001>ED
	function	fnCheckEditTxtValueHojCodeEx			(nFieldID: Integer): Boolean;
	function	fnGetDescriptionSelectedItem			(cNumEdit: TMNumEdit; var sRet: String): Boolean;
	function	fnGetIndexSelectItem					(cNumEdit: TMNumEdit): Integer;
	function 	fnCheckEditNumValueKmkCode				(): Boolean;
	function 	fnPayCodeCheck							(sHojCode: String; var sRet: String; var sPayNCD:Extended; Mode: Integer): Boolean;
//<GA001>ST
	function 	fnPayCodeCheckG							(sHojCode: String; var sRet: String; var sPayNCD:Extended): Boolean;
//<GA001>ED
//<GA001>ST
	function 	fnPayIDCheck							(ID: String; var IDName:String): Boolean;
//<GA001>ED
	function 	fnMoveFocusNextControl					(LeftUpFlg: Boolean): Boolean;
//<GA001>ST
	function 	fnMoveGFocusNextControl					(LeftUpFlg: Boolean): Boolean;
//<GA001>ED


	function 	fnDeleteOffsetRecord					(): Boolean;
//<GA001>ST
	function 	fnDeleteKhnsetGRecord					(): Boolean;
//<GA001>ED
	function 	fnCheckPayNayoseInfo					(CD: String; KBN: Integer): Boolean;
	function 	fnRecordCheck							(): Boolean;
	function	fnUpdatePayPtnInfo						(PayNCD: Extended): Boolean;
	function	fnUpdateDefPayPtnInfo					(Qe: TMQuery; PayNCD: Extended): Boolean;   // <142> Add
    function	fnNayoseOyaCheck						(): Boolean;
// <142> 2007/02/20 H.Kawato Mod
//	function	fnMemRecordCheck						(cMem: TdxMemData; sPayCD: String): Boolean;
	function	fnMemRecordCheck						(cMem: TdxMemData; sPayCD: String; iPayPtnNo: Integer): Boolean;
	function 	fnFractionPriceCheck					(cPrice: Currency): Boolean;
	function	fnGetZoom								(Int: Integer): Integer;		        //<#2>
//--<001>
    procedure   fnParentBtnClick                        (Sender:TObject);


    //<100>銀行名取得
    function    fnGetBankCodeInfoFX(BC: Integer;
                                                    var BankNCD : Extended;
                                                    var BankName,BankKana: String):Boolean;
    //<100>支店名取得
    function    fnGetBranchCodeInfoFX(BC: Extended; BranchCD:integer;
                                                    var BranchNCD : Extended;
                                                    var BranchName,BranchKana: String):Boolean;
    //<100>依頼口座内部ｺｰﾄﾞ取得用
    function	fnGetIraiNCode (pIraiCD: Integer): Extended;

    //<033>
    procedure   fnGetMasterKbnFX();
    function    fnGetHojNCode   (iMstKbn:Integer;sGCode:String):Extended;
    function    fnGetHojGCode   (iMstKbn:Integer; nNCode:Extended; var strDescription: String): String;
    function	fnGetKmkNCode   (nKmkCode: Integer):Extended;
    function    fnGetKmkSubNCode(iGCode:Integer; sSubCode:String):Extended;

    procedure   fnSetFncType    (nFunc : Integer ; fEnabled : Boolean);
    procedure   fnFreeDlg       (nFunc: Integer);

// <162> MOD-STR
//  function	fnEditHojyoChk ():Boolean;
    function	fnEditHojyoChk (var nErrFieldID: Integer):Boolean;


    // <162> MOD-END
    procedure   fnGetGrants    ();

    procedure   fnGetHojyoMA(dqMasterData: TMQuery);

    //<122> 進捗連動 初期処理
    function    fnPayProgRendoInit(PayNCode: Double) :Integer;
    //<122> 進捗連動 実行終了処理
//<GA001>ST
    function    fnPayProgRendoInitG(PayNCode: Double) :Integer;
//<GA001>ED
    function    fnPayProgRendoExec(InitRet: Integer; PayNCode: Double) :Boolean;
//<GA001>ST
    function    fnPayProgRendoExecG(InitRet: Integer; PayNCode: Double) :Boolean;
//<GA001>ED
    //<122> 支払先内部コード取得関数
    function    fnGetNCode(sCode:String) :Extended;
    //<122> 手形支払・小切手支払データ取得関数
//<142>    function    fnGetDraftData(sPayCode: String; iHouHou: Integer; var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer): Boolean;
// <196> MOD-STR
//  function    fnGetDraftData(sPayCode: String; iPayPtnNo,iHouHou: Integer; var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer): Boolean;
//<203>
//    function    fnGetDraftData(sPayCode: String; iPayPtnNo,iHouHou: Integer; var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer; iERKbn: Integer = 0; iChargeFutan: Integer = 0): Boolean;
    function    fnGetDraftData(sPayCode: String; iPayPtnNo,iHouHou: Integer; var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer; iERKbn: Integer = 0; iChargeFutan: Integer = 0; iChargeKbn: Integer = 0): Boolean;
//<203>
// <196> MOD-END
    //<122> 通知書区分取得関数
//    function    fnGetKihonData(ExNCode: Extended; var iLetterKbn: Integer; var sUketoriName: String): Boolean;    <142> Del
    //<128> PayBaseInfo取得関数
    function    fnGetPayBaseInfo ():Boolean;
    //<142> PayPtnNoの最大値取得
    function    fnGetPayBaseInfoG ():Boolean;       //<GA001>

    function    fnGetMaxPayPtnNo(Qe: TMQuery; nPayNCode: Extended; var nPayPtnNo: Integer): Boolean;
    //<142> 支払方法１
    procedure   fnSetHouhou1(Sender: TObject);
    //<142> 支払方法１のEnabledの切り替え
    procedure   fnSetHouhou1Enabled(Sender: TObject; iPriPayWay: Integer);
    //<155> 基本情報 比率／定額の使用可不可の切替
    procedure   fnChangeSateiCalc(iSateiCalc: Integer);
//<GA001>ST
    procedure   fnChangeGai(iGaiNo: Integer);
//<GA001>ED
    function fnCheckIsSpot(sPayCD: String): Boolean;            // <168> ADD

//<GA001>ST
    function fnPAYDateToNum(tInDate: TDateTime; var iOutDate: Integer)	:	Boolean;	// 日付型を数値型に変換する
    function fnPAYNumToDate(iInDate: Integer; var tOutDate: TDateTime)	:	Boolean;	// 数値型を日付型に変換する
    function fnChkPayStatusData(nPayNCode: Extended): Boolean;
//<GA001>ED

// <#TAX10> ADD-STR
	// 消費税率名称取得
	function  fnGetTaxRateName(nRateCD: Integer): String;
// <#TAX10> ADD-END


  end;

function    AppEntry (pPar: Pointer) : Integer;
exports
	AppEntry;

implementation

const

    ucSSG_MKBN              =   101;     //  ｾｸﾞﾒﾝﾄ開始     <033>
    ucESG_MKBN              =   199;     //  ｾｸﾞﾒﾝﾄ終了     <033>

    ucSKO_MKBN              =   201;     //  ﾌﾟﾛｼﾞｪｸﾄ開始   <033>
    ucEKO_MKBN              =   299;     //  ﾌﾟﾛｼﾞｪｸﾄ開始   <033>

	MASTER_SUBJECT			= 1;														// 勘定科目
	MASTER_SUBJECTPLUS		= 2;														// 細目科目
	MASTER_BANK				= 21;														// 銀行
	MASTER_CUSTOMER			= 22;														// 取引先
	MASTER_CUSTOMERPLUS01	= 23;														// 得意先
	MASTER_CUSTOMERPLUS02	= 24;														// 仕入先
	MASTER_STAFF			= 25;														// 社員
	MASTER_GENERAL01		= 31;														// 汎用補助①
	MASTER_GENERAL02		= 32;														// 汎用補助②
	MASTER_GENERAL03		= 33;														// 汎用補助③
	MASTER_GENERAL04		= 34;														// 汎用補助④
	MASTER_GENERAL05		= 35;														// 汎用補助⑤

	MASTER_SECTION			= 41;														// 部門

	TABLE_MASTERINFO		= 10;
	TABLE_HOJYOMA			= 111;
	TABLE_CSINFO			= 113;
	TABLE_HOJYOTREE			= 199;
	TABLE_HOJYOTREE2		= 299;
	TABLE_PAYPTNINFO		= 1602;
	TABLE_PAYPTNDTL			= 1603;
	TABLE_PAYDETAILINFO		= 1604;
	TABLE_PAYNAYOSEINFO		= 1605;
	TABLE_PAYOFFSETINFO		= 1606;

	LENGTH_NAME_CUSTOMER	= 60;														// 取引先 (全角30文字)

	CONFIRM_INSTRUCTION		= 0;														// 指示ｺﾝﾎﾞﾎﾞｯｸｽ
	CONFIRM_CANCEL			= 1;														// 取消ﾎﾞﾀﾝ
	CONFIRM_EXIT			= 2;														// 終了ﾎﾞﾀﾝ

	CONFIRM_THROUGH			= 0;
	CONFIRM_RETFOCUSED		= 1;														// 元の位置にﾌｫｰｶｽを戻す
	CONFIRM_WRITE			= 2;														// ﾃﾞｰﾀを保存

	ITEMS_COUNT					= 113;

	TREE_CHILD					= 0;
	TREE_CHILD_INVALID			= 12;
	TREE_CHILD_SUM				= 40;
	TREE_PARENT					= 1;
	TREE_PARENT_INVALID			= 13;
	TREE_PARENT_SUM				= 41;
	TREE_SYSTEM					= 9;
	TREE_SYSTEM_SUM				= 49;
	TREE_GENERAL				= 11;

	TREE_INDEX_SYSTEM			= 0;
	TREE_INDEX_SYSTEM_SUM		= 4;
	TREE_INDEX_PARENT			= 2;
	TREE_INDEX_PARENT_INVALID	= 16;
	TREE_INDEX_PARENT_SUM		= 6;
	TREE_INDEX_CHILD			= 8;
	TREE_INDEX_CHILD_INVALID	= 12;
	TREE_INDEX_CHILD_SUM		= 14;
	TREE_INDEX_GENERAL			= 10;

	UNIT_RECORDS_GRID_E			= 50;
	UNIT_RECORDS_GRID_T			= 50;
	UNIT_RECORDS_ALLOC			= 64;

	REQUISITE_OK				= 0;
	REQUISITE_CANCEL			= 1;
	REQUISITE_EXIT				= 9;

	CHECK_ERROR					= 0;
	CHECK_OK					= 1;
	CHECK_ESCAPE				= 2;
	CHECK_THROUGH				= 3;

	OPTION_GENERAL				= 0;
	OPTION_EXISTONLY			= 1;

	NORMAL						= 1;													// 通常処理
	BASICONLY					= 2;													// 基本のみ設定可能(詳細ﾎﾞﾀﾝ使用不可)
	REFER						= 3;													// 参照
{
	DISPOSE_REAL				= 0;													// 実在
	DISPOSE_TOTAL				= 1;													// 合計
	DISPOSE_RATIO				= 2;													// 比率
	DISPOSE_FIXED				= 3;													// 定額
	DISPOSE_TRANSFER			= 4;													// 振込
	DISPOSE_DATETRAN			= 5;													// 期日指定振込
	DISPOSE_DRAFT				= 6;													// 手形
	DISPOSE_CHECK				= 7;													// 小切手
	DISPOSE_OFFSET				= 8;													// 相殺
	DISPOSE_OTHER				= 9;													// その他
	DISPOSE_NAYOSEOYA			= 10;													// 名寄せ親
	DISPOSE_ALL					= 99;													// 実在、合計
}
// <142> 2007/02/20 H.Kawato Mod
{
	DISPOSE_KIHON				= 0;													// 実在
	DISPOSE_REAL				= 1;													// 実在
	DISPOSE_TOTAL				= 2;													// 合計
	DISPOSE_RATIO				= 3;													// 比率
	DISPOSE_FIXED				= 4;													// 定額
	DISPOSE_TRANSFER			= 5;													// 振込
	DISPOSE_DATETRAN			= 6;													// 期日指定振込
	DISPOSE_DRAFT				= 7;													// 手形
	DISPOSE_CHECK				= 8;													// 小切手
	DISPOSE_OFFSET				= 9;													// 相殺
	DISPOSE_OTHER				= 10;													// その他
	DISPOSE_NAYOSEOYA			= 11;													// 名寄せ親
	DISPOSE_ALL					= 99;													// 実在、合計
}
	DISPOSE_KIHON				= 0;													// 基本情報
	DISPOSE_REAL				= 1;													// 実在
	DISPOSE_TOTAL				= 2;													// 合計
	DISPOSE_PAYWAY				= 3;													// 支払方法
	DISPOSE_RATIO				= 4;													// 比率
	DISPOSE_FIXED				= 5;													// 定額
	DISPOSE_TRANSFER			= 6;													// 振込
	DISPOSE_DATETRAN			= 7;													// 期日指定振込
	DISPOSE_DRAFT				= 8;													// 手形
	DISPOSE_CHECK				= 9;													// 小切手
	DISPOSE_OFFSET				= 10;													// 相殺
	DISPOSE_OTHER				= 11;													// その他
	DISPOSE_NAYOSEOYA			= 12;													// 名寄せ親
//<GA001>ST
//    DISPOSE_SHOUSAI             = 13;                                                  // 優先支払詳細
    DISPOSE_KIHON_G             = 13;                                                   //外貨基本
    DISPOSE_TRANSFER_GD         = 14;                                                   //電信送金
    DISPOSE_TRANSFER_GT         = 15;                                                   //為替手形
    DISPOSE_TRANSFER_GK         = 16;                                                   //送金小切手
	DISPOSE_KHNSET_G   			= 17;													//可変項目
    DISPOSE_SHOUSAI             = 18;                                                   // 優先支払詳細
//<GA001>ED

	DISPOSE_ALL					= 99;													// 実在、合計
// <142> 2007/02/20 H.Kawato Mod

	PAYTYPE_TRANSFER			= 1;													// 振込
	PAYTYPE_DATETRAN			= 2;													// 期日指定振込
	PAYTYPE_DRAFT				= 3;													// 手形
	PAYTYPE_CHECK				= 4;													// 小切手
//<GA001>ST
//支払種別
	PAYTYPE_TRANSFER_GD			= 11;													// 電信送金
	PAYTYPE_TRANSFER_GT			= 13;													// 為替手形
	PAYTYPE_TRANSFER_GK	    	= 14;													// 送金小切手
//<GA001>ED
	NAYOSE_CHILD				= 1;													// 名寄せ子
	NAYOSE_PARENT				= 2;													// 名寄せ親
	NAYOSE_ALL					= 99;													// 名寄せ親以下

	MODE_INSERT					= 1;													// 新規
	MODE_EDIT					= 2;													// 編集
	MODE_DELETE					= 3;

// <142> 2007/02/20 H.Kawato Mod Start
{
    TAB_KIHON               = 0;
	TAB_REAL				= 1;													// 実在
	TAB_TOTAL				= 2;													// 合計
	TAB_RATIO				= 3;													// 比率
	TAB_FIXED				= 4;													// 定額
	TAB_TRANSFER			= 5;													// 振込
	TAB_DATETRAN			= 6;													// 期日指定振込
	TAB_DRAFT				= 7;													// 手形
	TAB_CHECK				= 8;													// 小切手
	TAB_OFFSET				= 9;													// 相殺
	TAB_OTHER				= 10;													// その他
	TAB_NAYOSEOYA			= 11;													// 名寄せ親
}
    TAB_KIHON               = 0;
	TAB_REAL				= 1;													// 実在
	TAB_TOTAL				= 2;													// 合計
	TAB_PAYWAY				= 3;													// 支払方法
	TAB_RATIO				= 4;													// 比率
	TAB_FIXED				= 5;													// 定額
	TAB_TRANSFER			= 6;													// 振込
	TAB_DATETRAN			= 7;													// 期日指定振込
	TAB_DRAFT				= 8;													// 手形
	TAB_CHECK				= 9;													// 小切手
	TAB_OFFSET				= 10;													// 相殺
	TAB_OTHER				= 11;													// その他
	TAB_NAYOSEOYA			= 12;													// 名寄せ親
//<GA001>ST
    TAB_KIHON_G             = 13;                                                   //外貨基本
    TAB_TRANSFER_GD         = 14;                                                   //電信送金
    TAB_TRANSFER_GT         = 15;                                                   //為替手形
    TAB_TRANSFER_GK         = 16;                                                   //送金小切手
	TAB_KHNSET_G   			= 17;													//可変項目
//<GA001>ED


// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Add Start
    KIHONBANDS_PAYCODE      = 0;                                                    // 基本情報（支払先ｺｰﾄﾞ）
	KIHONBANDS_PAYNAME		= 1;                                                    // 基本情報（支払先名称）
	KIHONBANDS_RENSO  		= 2;                                                    // 基本情報（連想）
	KIHONBANDS_SATEIKBN		= 3;                                                    // 基本情報（査定方法）
// <155> 2007/12/25 H.Kawato Mod Start
//	KIHONBANDS_BUNKAIKBN	= 4;                                                    // 基本情報（分解方法）
//	KIHONBANDS_UKETORINAME	= 5;                                                    // 基本情報（受取人名称）
//	KIHONBANDS_BUNKAIPTN	= 6;                                                    // 基本情報（分解ﾊﾟﾀｰﾝ）
	KIHONBANDS_SATEICALC	= 4;                                                    // 基本情報（査定計算）
	KIHONBANDS_HIRITU   	= 5;                                                    // 基本情報（比率）
	KIHONBANDS_TEIGAKU  	= 6;                                                    // 基本情報（定額）
	KIHONBANDS_BUNKAIKBN	= 7;                                                    // 基本情報（分解方法）
	KIHONBANDS_UKETORINAME	= 8;                                                    // 基本情報（受取人名称）
	KIHONBANDS_BUNKAIPTN	= 9;                                                    // 基本情報（分解ﾊﾟﾀｰﾝ）
// <155> 2007/12/25 H.Kawato Mod End




    PAYWAYBANDS_PAYCODE     = 0;                                                    // 支払方法（支払先ｺｰﾄﾞ）
	PAYWAYBANDS_PAYNAME		= 1;                                                    // 支払方法（支払先名称）
	PAYWAYBANDS_RENSO  		= 2;                                                    // 支払方法（連想）
	PAYWAYBANDS_PRJCODE		= 3;                                                    // 支払方法（ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ）
	PAYWAYBANDS_PRJNAME		= 4;                                                    // 支払方法（ﾌﾟﾛｼﾞｪｸﾄ名称）
	PAYWAYBANDS_PJSUBCODE	= 5;                                                    // 支払方法（ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ）
	PAYWAYBANDS_PJSUBNAME	= 6;                                                    // 支払方法（ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称）
	PAYWAYBANDS_BUNKAIKBN	= 7;                                                    // 支払方法（分解方法）
	PAYWAYBANDS_UKETORINAME	= 8;                                                    // 支払方法（受取人名称）

    SOUSAIBANDS_PAYNAME     = 0;                                                    // 相殺情報（支払先ｺｰﾄﾞ／名称）
	SOUSAIBANDS_PRJNAME		= 1;                                                    // 相殺情報（ﾌﾟﾛｼﾞｪｸﾄ）
	SOUSAIBANDS_PJSUBNAME	= 2;                                                    // 相殺情報（ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ）
	SOUSAIBANDS_NO		    = 3;                                                    // 相殺情報（ＮＯ）
	SOUSAIBANDS_KAMOKU	    = 4;                                                    // 相殺情報（科目／部門／補助）
	SOUSAIBANDS_FEE	        = 5;                                                    // 相殺情報（消費税）
	SOUSAIBANDS_KINGAKU	    = 6;                                                    // 相殺情報（相殺金額）
// <142> 2007/02/20 H.Kawato Add End

	// -----<159> Add-St-----
	GRP_SYNC_CHILD	= 1;						// ｸﾞﾙｰﾌﾟ会計採用あり 子会社
	C_ST_PROCESS	= 0;						// 設定
	C_ED_PROCESS	= 1;						// 開放
	// -----<159> Add-Ed-----

var
	_TreeSystemCode: String	= '          ';

	_MessageDec01  : String	= '分解基準値の合計が１００％になるように設定して下さい。';
	_MessageDec02  : String	= '最終行の分解基準値を自動セットしてもよろしいですか？';
	_MessageDec03  : String	= '優先支払以外の支払方法を確定して下さい。';       // <179>
	_MessageDel01  : String	= 'NO %dの相殺情報を削除します。よろしいですか？';

	_PMItemTVTag: String	= 'PMTreeViewTag%.2d';
	_PMItemGSTag: String	= 'PMGridTag%.2d';

	_BunkaiItems  : array [0..1] of String   = ('比率', '定額');
	_PayWayItems  : array [0..5] of String   = ('なし',
												'振込',
												'期日',
												'手形',
												'小切手',
												'現金'
											   );
	_FractionItems: array [0..2] of String   = ('切り捨て', '切り上げ', '四捨五入');
	_AccKbnItems  : array [0..3] of String   = ('普通','当座','貯蓄','その他');
	_ChargeFItems   : array [0..2] of String	 = ('自動設定','自社負担','他社負担');
	_shortFItems    : array [0..2] of String	 = ('自動','自社','他社');      //<203>

	_ChargeFItemsG  : array [0..1] of String	 = ('自社負担','他社負担');     //<GA001>

	_ChargeKItems : array [0..2] of String   = ('他銀行','同銀行他支店','同銀行同支店');
	_ChargeKItemsD: array [0..2] of String   = ('自動設定','他行','同行');      //<203>
	_ShortKItemsD   : array [0..2] of String   = ('自動','他行','同行');        //<203>

	_ChargeKItemsG : array [0..1] of String   = ('他銀行','関係銀行');          //<GA001>
	_TransKbnItems: array [0..1] of String   = ('電信','文書');
// <170> MOD-STR
//	_FBSetItems   : array [0..1] of String   = ('ＥＤＩ情報','顧客コード１・２');
	_FBSetItems   : array [0..2] of String   = ('ＥＤＩ情報','顧客コード１・２','セットなし');
// <170> MOD-END
	_YusoKbnItems : array [0..1] of String   = ('郵送する','郵送しない');
	_YusoFutanItems:array [0..1] of String   = ('自社負担','他社負担');
	_ERKbnItems   : array [0..1] of String   = ('採用なし','採用あり');         // <196> ADD
	_TitleKbnItems :array [0..3] of String   = ('なし','様','殿','御中');
// <123> 2006/05/02 H.Kawato Mod
//	_LetterKbnItems:array [0..2] of String   = ('標準','送付用','集金用');
//	_LetterKbnItems:array [0..3] of String   = ('標準','送付用','集金用','その他'); // <142> Del
// <142> 2007/02/20 H.Kawato Add Start
	_BunkaiPtnItems:array [0..3] of String   = ('全体','プロジェクト別','プロジェクトサブ別','部門別');
	_BunkaiPtnPrjItems:array [0..1] of String   = ('全体','プロジェクト別');
	_BunkaiPtnSubItems:array [0..2] of String   = ('全体','プロジェクト別','プロジェクトサブ別');
	_BunkaiPtnBmnItems:array [0..1] of String   = ('全体','部門別');
	_BunkaiPtnPrjNo:array [0..1] of String   = ('0','1');
	_BunkaiPtnSubNo:array [0..2] of String   = ('0','1','2');
	_BunkaiPtnBmnNo:array [0..1] of String   = ('0','3');
//<172> Mod
//  _PriPayWayItems:array [0..1] of String   = ('しない','する');
    _PriPayWayItems:array [0..5] of String   = ('なし','振込','期日指定振込','手形','小切手','現金');
//<172> Mod
// <142> 2007/02/20 H.Kawato Add End
	_TaxRateItems : array [0..2] of String	 = ('標準税率', '３％', '５％');
	_TaxSalesItems: array [0..9] of String	 = (' 0: 科目設定に従う',
												'10: 課税売上(内税)',
												'12: 課税売上控除(内税)',
												'13: 課税貸倒償却(内税)',
												'15: 課税貸倒回収(内税)',
												'30: 非課税売上',
// <TXNM> MOD-STR
//												'34: 有価証券売上高(非課税)',
												'34: 有価証券売上等(非課税)',
// <TXNM> MOD-END
												'40: 不課税売上(精算取引)',
												'60: 輸出売上',
												'64: 非課税輸出売上'
											   );

// <TX26> MOD-STR
//	_TaxStockItems: array [0..15] of String	 = (' 0: 科目設定に従う',
	_TaxStockItems: array [0..17] of String	 = (' 0: 科目設定に従う',
// <TX26> MOD-END
												'10: 課税仕入(内税)',
												'11: 共通仕入(内税)',
												'12: 課税仕入控除(内税)',
												'14: 非課税売上対応仕入(内税)',
// <TX26> ADD-STR
												'15: 共通仕入控除(内税)',
												'16: 非課税売上対応仕入控除(内税)',
// <TX26> ADD-END
												'30: 非課税仕入',
												'40: 不課税仕入(精算取引)',
												'50: 棚卸調整消費税(課税)',
												'51: 棚卸調整消費税(共通)',
												'54: 棚卸調整消費税(非課税)',
												'65: 輸入仕入(地方消費税)',
												'66: 輸入共通仕入(地方消費税)',
												'69: 非課税売上対応輸入(地方)',
												'70: 輸入仕入(内税)',
												'71: 輸入共通仕入(内税)',
												'74: 非課税売上対応輸入(内税)'
											   );
// <142> 2007/02/20 H.Kawato Mod
{
	_SateiItems   : array [0..4] of String   = ('指定なし',                     // <126> Add 査定方法
												'全体',
												'部門別',
												'科目別',
												'明細'
											   );
}
	_SateiItems   : array [0..6] of String   = ('指定なし',                     // <126> Add 査定方法
												'全体',
												'部門別',
												'科目別',
												'明細',
												'プロジェクト別',
												'プロジェクトサブ別'
											   );
// <147> 2007/07/18 H.Kawato Add Start
	_SateiNonItems   : array [0..2] of String   = ('指定なし',
												   '全体',
												   '明細'
											      );
// <147> 2007/07/18 H.Kawato Add End
	_SateiBmnItems   : array [0..3] of String   = ('指定なし',
												   '全体',
												   '部門別',
												   '明細'
											      );
	_SateiKmkItems   : array [0..3] of String   = ('指定なし',
												   '全体',
												   '科目別',
												   '明細'
											      );
	_SateiPrjItems   : array [0..3] of String   = ('指定なし',
												   '全体',
												   '明細',
												   'プロジェクト別'
											      );
	_SateiSubItems   : array [0..4] of String   = ('指定なし',
												   '全体',
											       '明細',
												   'プロジェクト別',
												   'プロジェクトサブ別'
											      );

	_SateiNonNo   : array [0..2] of String   = ('0','1','4');                   // <147> Add
	_SateiBmnNo   : array [0..3] of String   = ('0','1','2','4');
	_SateiKmkNo   : array [0..3] of String   = ('0','1','3','4');
	_SateiPrjNo   : array [0..3] of String   = ('0','1','4','5');
	_SateiSubNo   : array [0..4] of String   = ('0','1','4','5','6');
// <142> 2007/02/20 H.Kawato Mod

// <155> 2007/12/25 H.Kawato Add Start
	_SateiCalcItems : array [0..2] of String    = ('なし',
                                                   '比率',
												   '定額'
											       );
// <155> 2007/12/25 H.Kawato Add End
	_AccAutoItems : array [0..1] of String   = ('しない','する');               // <128> Add 口座自動引落区分






//<GA001>ST
    _GaikaItems     : array [0..2] of String    = ('採用なし',
                                                   '採用あり',
                                                   '外貨支払のみ'
                                                  );

    _GaikaPayItems  : array [0..2] of String    = ('電信送金',
                                                   '為替手形',
                                                   '送金小切手'
                                                  );
//<GA001>ED



{$R *.DFM}
{$include JNTMASERRORCODECHECK.inc}
{$include JNTMASFUSENBIKODLGIFB.inc}
{$include JNTPayProgRendoB.inc}                                                 // <122> Add 進捗連動対応
{$include JNTPayProgRendoGB.inc}                                                // <GA001>進捗連動対応

{$include JNTCRPSyncMasterB.inc}                                                // <Rel> ﾏｽﾀ同期共通実装部
{$include JNTMTOKUI_Sync.INC}                                                   // <Rel>
{$I MASTaxRateInfoB.inc}                                                        // 消費税情報 <TX26> ADD
{$I PAYCommon_B.inc}															// <#TAX10> ADD

//************************************************************************
//*		Proccess		:	AppEntry関数
//*		Name			:	H.Endo(MJS)
//*		Date			:	2003/10/20
//*     Paqrameter      :   pPar
//*     Retrun          :   Integer
//************************************************************************
function	AppEntry (pPar: Pointer): Integer;
var
	pForm  : ^TJNTCRP004007f;
	pRecord: ^TMjsAppRecord;

begin
	Result	:= ACTID_RET_OK;
	pRecord	:= Pointer (TAppParam (pPar^).pRecord);

	case (TAppParam (pPar^).iAction) of

		ACTID_FORMCREATESTART:															// Form Create要求
			begin
				New (pForm);

				try																		// ｺﾝｽﾄﾗｸﾀのｴﾗｰは例外で拾う
					pForm^	:= TJNTCRP004007f.fnCreateForm (pPar);
					pRecord^.m_pChildForm	:= pForm;
				except
					Dispose (pForm);
					Result	:= ACTID_RET_NG;
				end;
			end;

		ACTID_FORMCREATESHOWSTART:														// Form Create&Show要求
			begin
				New (pForm);

				try																		// ｺﾝｽﾄﾗｸﾀのｴﾗｰは例外で拾う
					pForm^	:= TJNTCRP004007f.fnCreateForm (pRecord);
					pForm^.Show ();
					pRecord^.m_pChildForm	:= pForm;
				except
					Dispose (pForm);
					Result	:= ACTID_RET_NG;
				end;
			end;

		ACTID_FORMCLOSESTART:															// Form Close要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);
				pForm^.Close ();
				pForm^.Free  ();
				Dispose (pForm);
			end;

		ACTID_FORMCANCLOSESTART:														// Form CanClose要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);

				if	(pForm^.CloseQuery () = FALSE) then
					Result	:= ACTID_RET_NG;
			end;

		ACTID_SHOWSTART:																// Show要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);
				pForm^.Show ();
			end;

		ACTID_HIDESTART:																// Hide要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);

				if	(pForm^.Parent <> nil) then
	            	pForm^.Hide ();
	        end;
	end;
end;

//************************************************************************
//*		Proccess		:	CONSTRUCTOR関数
//*		Name			:	H.Endo(MJS)
//*		Date			:	2003/10/20
//*		Paqrameter		:	Nathing
//*		Retrun			:	Nathing
//************************************************************************
constructor	TJNTCRP004007f.fnCreateForm (pRec: Pointer);
begin


	m_cDBCommon	:= nil;
	m_cDBSelect	:= nil;
    m_pRec  :=  Pointer( TAppParam( pRec^ ).pRecord );          // 構造体のSave

	m_cDataModule	:= TMDataModulef (m_pRec^.m_pDBModule^  );
	m_cComArea		:= TJNTMASCom    (m_pRec^.m_pSystemArea^);

    m_CmpList       := TList(TAppParam(PRec^).pActionParam^);
	m_cDBCommon	    := m_cDataModule.CTLDBOpen ();

	m_nTantoCd      := rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD;  // 担当者内部コード <142> Add

	if	(m_cDBCommon = nil) then
	begin
		ShowMessage ('ｴﾗｰ');
		raise	EMathError.Create ('ｴﾗｰ');
	end;

	m_cDBSelect	:= m_cDataModule.COPDBOpen (1, m_cComArea.m_iCopNo);

	if	(m_cDBSelect = nil) then
	begin
		ShowMessage ('ｴﾗｰ');
		raise	EMathError.Create ('ｴﾗｰ');
	end;

{<100>
	if	(not fnInitializeProcedure ()) then
	begin
		ShowMessage ('ｴﾗｰ');
		raise	EMathError.Create ('ｴﾗｰ');
	end;
}
	fnCMNPostInit (m_pRec);

// <PRN> -----------Add↓-----------------

// <192> MOV-STR
    m_cJNTArea       := TJNTCommon   ( m_CmpList.Items[8]^ );
    m_Base_pRec      := Pointer      ( m_CmpList.Items[9]^ );
// <192> MOV-END

	m_cJNTArea.setSelAppRecord;     // <192> ADD

    // 会社別ｼｽﾃﾑ情報の初期化
    try
        uvSelSys := nil;
	    uvSelSys := TJNTSelCorpSys.Create(Self);
        if uvSelSys = nil then
            Abort;

// <192> MOD-STR
//    	if uvSelSys.CreateSysMsg(m_pRec) <> 0 then
    	if uvSelSys.CreateSysMsg(m_Base_pRec) <> 0 then
// <192> MOD-END
            Abort;
    except
		MjsMessageBox(self, 'ｼｽﾃﾑ情報の初期化に失敗です。', mjError, mjDefOk);
        raise;
    end;

  	m_cJNTArea.setMasAppRecord;     // <192> ADD

	// 051114 >>
    // 会社別ｼｽﾃﾑ情報読み込み<PRN>
    try
    	if (uvSelSys.CreateSysInfo(m_cDBSelect) <> 0) then
            Abort;
    except
        MjsMessageBox(Self,'ｼｽﾃﾑ情報が取得できませんでした。', mjError, mjDefOk);
        raise;
    end;
	// 051114 <<
// <PRN> -----------Add↑-----------------

// <122> 2006/04/25 H.Kawato Add St
    m_PayProgRendo  := TJNTPayProgRendo.Create;
    m_ProgRendoFlg  := False;
    m_iSateiChgKbn  := 0;
// <122> 2006/04/25 H.Kawato Add Ed


    SetLength(m_rCommonBmn, 1);                 // 共通部門、非課税部門 <194> ADD

inherited Create(TForm(m_pRec^.m_pOwnerForm^))

end;

//************************************************************************
//*		Component	:	TJNTCRP004007f ( TForm )
//*							Fromのｷｰｲﾍﾞﾝﾄ処理
//*		Event		:	CMChildKey
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.CMChildKey (var Msg: TWMKey);
var
	cShiftState	  	: TShiftState;
	strDescription	: String;
//	nColNo			: Integer;  // <142> 2007/02/20 H.Kawato Del

// <122> 2006/04/25 H.Kawato Add St
    iRenInitRet     : Integer;
    ExNCode         : Extended;
	sCode		    : String;
	strFormat	    : String;
// <122> 2006/04/25 H.Kawato Add Ed

    cField		    : TField;   // <142> 2007/02/20 H.Kawato Add

    nFieldID        : Integer;  // <162> ADD
begin
    cField  := Nil;             // <142> 2007/02/20 H.Kawato Add

	cShiftState	:= MJSKeyDataToShiftState(Msg.KeyData);		// <KDS> MOD
//CMN
	// TreeView
	if (Screen.ActiveControl.Name = CmnTreeView.Name) then								// ﾂﾘｰﾋﾞｭｰ
	begin
		if	((Msg.CharCode = VK_ESCAPE) and (cShiftState = [])) then					// Esc
		begin
			close();
			Abort ();
		end;

		if (Msg.CharCode = VK_RETURN) or ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
		begin
			case Tab.Items.Selected of
                TAB_KIHON       : m_cACControl := GridKihon;	    // 基本情報 <050>
				TAB_REAL        : m_cACControl := GridReal;		    // 実在情報
				TAB_TOTAL       : m_cACControl := GridTotal;		// 合計情報
				TAB_PAYWAY      : m_cACControl := GridPayWay;	    // 支払方法 <142> Add
				TAB_RATIO       : m_cACControl := GridPayRatio;	    // 支払方法(比率)
				TAB_FIXED       : m_cACControl := GridPayFixed;	    // 支払方法(定額)
				TAB_TRANSFER    : m_cACControl := GridFurikomi;	    // 振込情報
				TAB_DATETRAN    : m_cACControl := GridFuriDate;	    // 期日指定振込情報
				TAB_DRAFT       : m_cACControl := GridDraft;		// 手形情報
				TAB_CHECK       : m_cACControl := GridCheck;		// 小切手情報
				TAB_OFFSET      : m_cACControl := GridOffset;		// 相殺情報
				TAB_OTHER       : m_cACControl := GridOther;		// その他情報
				TAB_NAYOSEOYA   :									// 名寄せ情報
				begin
					if RBNayoseTree.Checked = True then
						m_cACControl := RBNayoseTree
					else
						m_cACControl := RBNayoseGrid;
				end;

//<GA001>ST
                TAB_KIHON_G             : m_cACControl := GridKihonG;	                        //外貨基本
                TAB_TRANSFER_GD         : m_cACControl := GridFurikomiGD;                       //電信送金
                TAB_TRANSFER_GT         : m_cACControl := GridFurikomiGT;                       //為替手形
                TAB_TRANSFER_GK         : m_cACControl := GridFurikomiGK;                       //送金小切手
  				TAB_KHNSET_G            : m_cACControl := GridKhnsetG;		                    //可変項目
//<GA001>ED

			end;
			m_cACControl.SetFocus ();

			Abort ();
		end;

		if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
			Abort ();
	end;

	// Tab
	if (Screen.ActiveControl.Name = Tab.Name) then
	begin
		if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
//			m_cACControl := CmnTreeView;
//			m_cACControl.SetFocus ();
// FXの仕様でﾂﾘｰがなくなったのでShift + Tabは無効とする

			Abort ();
		end;

		if ((Msg.CharCode = VK_TAB) and (cShiftState = [])) or
			(Msg.CharCode = VK_RETURN) then
		begin
			case Tab.Items.Selected of
                TAB_KIHON       : m_cACControl := GridKihon;	// 基本情報 <050>
				TAB_REAL        : m_cACControl := GridReal;		// 実在情報
				TAB_TOTAL       : m_cACControl := GridTotal;	// 合計情報
				TAB_PAYWAY      : m_cACControl := GridPayWay;	// 支払方法 <142> Add
				TAB_RATIO       : m_cACControl := GridPayRatio;	// 支払方法(比率)
				TAB_FIXED       : m_cACControl := GridPayFixed;	// 支払方法(定額)
				TAB_TRANSFER    : m_cACControl := GridFurikomi;	// 振込情報
				TAB_DATETRAN    : m_cACControl := GridFuriDate;	// 期日指定振込情報
				TAB_DRAFT       : m_cACControl := GridDraft;	// 手形情報
				TAB_CHECK       : m_cACControl := GridCheck;	// 小切手情報
				TAB_OFFSET      : m_cACControl := GridOffset;	// 相殺情報
				TAB_OTHER       : m_cACControl := GridOther;	// その他情報
				TAB_NAYOSEOYA   :								// 名寄せ情報
				begin
					if RBNayoseTree.Checked = True then
						m_cACControl := RBNayoseTree
					else
						m_cACControl := RBNayoseGrid;
				end;
//<GA001>ST
                TAB_KIHON_G             : m_cACControl := GridKihonG;	                        //外貨基本
                TAB_TRANSFER_GD         : m_cACControl := GridFurikomiGD;                       //電信送金
                TAB_TRANSFER_GT         : m_cACControl := GridFurikomiGT;                       //為替手形
                TAB_TRANSFER_GK         : m_cACControl := GridFurikomiGK;                       //送金小切手
				TAB_KHNSET_G            : m_cACControl := GridKhnsetG;	                        //可変項目
//<GA001>ED


			end;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	// GridのKey操作
	if	((Screen.ActiveControl.Name = GridReal.Name) or			// 実在情報
		 (Screen.ActiveControl.Name = GridTotal.Name) or		// 合計情報
		 (Screen.ActiveControl.Name = GridPayWay.Name) or		// 支払方法 <142> Add
         (Screen.ActiveControl.Name = GridPayRatio.Name) or		// 支払方法(比率)
		 (Screen.ActiveControl.Name = GridPayFixed.Name) or		// 支払方法(定額)
		 (Screen.ActiveControl.Name = GridShousai.Name) or		// 優先支払情報 <142> Add
         (Screen.ActiveControl.Name = GridFurikomi.Name) or		// 振込情報
		 (Screen.ActiveControl.Name = GridFuriDate.Name) or		// 期日指定振込情報
		 (Screen.ActiveControl.Name = GridDraft.Name) or 		// 手形情報
		 (Screen.ActiveControl.Name = GridCheck.Name) or		// 小切手情報
		 (Screen.ActiveControl.Name = GridKihon.Name) or		// 基本情報 <050>
//<GA001>ST
		 (Screen.ActiveControl.Name = GridKihonG.Name) or		// 外貨基本情報
         (Screen.ActiveControl.Name = GridFurikomiGD.Name) or	// 電信送金
         (Screen.ActiveControl.Name = GridFurikomiGT.Name) or	// 為替手形
         (Screen.ActiveControl.Name = GridFurikomiGK.Name) or	// 送金小切手
//<GA001>ED
		 (Screen.ActiveControl.Name = GridOther.Name)) then		// その他情報
	begin
// <142> 2007/02/20 H.Kawato Mod Start
{
    	case Tab.Items.Selected of
			TAB_REAL,TAB_TOTAL: nColNo := 1;
			else nColNo := 3;
		end;
}
    	case Tab.Items.Selected of
            TAB_KIHON     : cField := GridKihon_SateiNo.Field;  // 基本情報
            TAB_REAL      : cField := GridRealCode.Field;       // 実在情報
            TAB_TOTAL     : cField := GridTotalCode.Field;      // 合計情報
            TAB_PAYWAY    :
            begin                                               // 支払方法
                if (GridPayWay_GCode.TabStop = True) then
                    cField := GridPayWay_GCode.Field
                else
                    cField := GridPayWay_BunkaiNo.Field;
            end;
            TAB_RATIO     :                                     // 支払方法(比率)
            begin
                if (TdxDBGrid(Screen.ActiveControl).Name = GridPayRatio.Name) then
                begin
// <172> Mod
{                   // プロジェクト別支払採用あり
                    if  (m_iProAdoptKbn = 1) then
                        cField := Hou_H_PriPayWay.Field
                    // プロジェクト別支払採用なし
                    else
                        cField := Hou_H_Houhou1_No.Field;
}
					cField := Hou_H_PriPayWay.Field
// <172> Mod
                end
                else
                if (TdxDBGrid(Screen.ActiveControl).Name = GridShousai.Name) then
                    cField := Shousai_Hou1_BaseKingaku.Field;
            end;
            TAB_FIXED     :                                     // 支払方法(定額)
            begin
                if (TdxDBGrid(Screen.ActiveControl).Name = GridPayFixed.Name) then
                begin
// <172> Mod
{                   // プロジェクト別支払採用あり
                    if (m_iProAdoptKbn = 1) then
                        cField := Hou_T_PriPayWay.Field
                    // プロジェクト別支払採用なし
                    else
                        cField := Hou_T_Houhou1_No.Field;
}
					cField := Hou_T_PriPayWay.Field
// <172> Mod
                end
                else
                if (TdxDBGrid(Screen.ActiveControl).Name = GridShousai.Name) then
                    cField := Shousai_Hou1_BaseKingaku.Field;
            end;
            TAB_TRANSFER  :
// <182> 2010/10/27 G.Kojima Add Start
            begin
                if (Msg.CharCode = VK_F6) and (cShiftState = []) and (m_IsUpdate) then      // F6 + Shift無し + 更新権限あり
                begin
                    if	(uvFncInfo.Enabled[5] = true) then
                    begin
                        cField := Fri_IraiAccCode.Field;    // 振込情報
                        BankInfoDlg();
                    end;
                end;
            end;
// <182> End
            TAB_DATETRAN  :
// <182> 2010/10/27 G.Kojima Add Start
            begin
                if (Msg.CharCode = VK_F6) and (cShiftState = []) and (m_IsUpdate) then      // F6 + Shift無し + 更新権限あり
                begin
                    if	(uvFncInfo.Enabled[5] = true) then
                    begin
                        cField := KFri_IraiAccCode.Field;   // 期日指定振込情報
                        BankInfoDlg();
                    end;
                end;
            end;
// <182> End
            TAB_DRAFT     : cField := Teg_IraiAccCode.Field;    // 手形情報
            TAB_CHECK     : cField := Kog_IraiAccCode.Field;    // 小切手情報
            TAB_OTHER     : cField := Hoka_ZipCode1.Field;      // その他情報
//<GA001>ST
            TAB_KIHON_G   : cField := GridKihonG_GaiNo.Field; // 外貨基本情報
            TAB_TRANSFER_GD  :
            begin
                if (Msg.CharCode = VK_F6) and (cShiftState = []) and (m_IsUpdate) then      // F6 + Shift無し + 更新権限あり
                begin
                    if	(uvFncInfo.Enabled[5] = true) then
                    begin
                        cField := FriGD_IraiAccCode.Field;    // 振込情報
                        BankInfoDlg();
                    end;
                end;
            end;

            TAB_TRANSFER_GT  :
            begin
                if (Msg.CharCode = VK_F6) and (cShiftState = []) and (m_IsUpdate) then      // F6 + Shift無し + 更新権限あり
                begin
                    if	(uvFncInfo.Enabled[5] = true) then
                    begin
                        cField := FriGT_IraiAccCode.Field;    // 振込情報
                        BankInfoDlg();
                    end;
                end;
            end;

            TAB_TRANSFER_GK  :
            begin
                if (Msg.CharCode = VK_F6) and (cShiftState = []) and (m_IsUpdate) then      // F6 + Shift無し + 更新権限あり
                begin
                    if	(uvFncInfo.Enabled[5] = true) then
                    begin
                        cField := FriGK_IraiAccCode.Field;    // 振込情報
                        BankInfoDlg();
                    end;
                end;
            end;
//<GA001>ED
		end;
// <142> 2007/02/20 H.Kawato Mod End

		if	((Msg.CharCode = VK_HOME) and (cShiftState <> [ssCtrl])) then				// Home
		begin
			if	(TdxDBGrid (Screen.ActiveControl).EditingText = '') then
			begin
// <142> 2007/02/20 H.Kawato Mod
//				TdxDBGrid (Screen.ActiveControl).FocusedColumn := nColNo;
				TdxDBGrid (Screen.ActiveControl).FocusedField  := cField;
				Abort ();
			end;
		end;

		if	((Msg.CharCode = VK_END) and (cShiftState <> [ssCtrl])) then				// End
		begin
	 		if	(TdxDBGrid (Screen.ActiveControl).EditingText = '') then
			begin
// <140> 2006/08/11 H.Kawato Del
{
				if (TdxDBGrid (Screen.ActiveControl).FocusedColumn = nColNo) then
				begin
					m_cACControl := Tab;
					m_cACControl.SetFocus ();
					Abort ();
				end
				else
				begin
}
// <140> 2006/08/11 H.Kawato Del
// <142> 2007/02/20 H.Kawato Mod Start
{
					case Tab.Items.Selected of
						TAB_REAL,TAB_TOTAL: nColNo := 5;	// 実在情報、合計情報
						TAB_RATIO:					        // 支払方法(比率)
						begin
							if m_bPayRatioDetail = True then
								nColNo := 36
							else
								nColNo := 17;
						end;
						TAB_FIXED   : nColNo := 17;	        // 支払方法(定額)
// <140> 2006/08/11 H.Kawato Mod Start
//						TAB_TRANSFER: nColNo := 25;	        // 振込情報
                        TAB_TRANSFER:
                        begin
                            if Gridfurikomi.DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0 then
                                nColNo := 26
                            else
                                nColNo := 28;
                        end;
// <140> 2006/08/11 H.Kawato Mod End
						TAB_DATETRAN: nColNo := 26;	        // 期日指定振込情報
						TAB_DRAFT   : nColNo := 9;		    // 手形情報
						TAB_CHECK   : nColNo := 7;		    // 小切手情報
//                        TAB_KIHON   : nColNo := 7;          // 基本情報 <050> // <140> Mod
                        TAB_KIHON   : nColNo := 9;          // 基本情報         // <140> Mod
						TAB_OTHER   :					    // その他情報
						begin
							if GridOther.DataSource.DataSet.FieldByName('SumKbn').AsInteger = 0 then
								nColNo := 14
							else
								nColNo := 15;
						end;
					end;
					TdxDBGrid (Screen.ActiveControl).FocusedColumn := nColNo;
}
					case Tab.Items.Selected of
						TAB_REAL : cField := GridRealApartNo.Field;	            // 実在情報、合計情報
						TAB_TOTAL: cField := GridTotalApartNo.Field;            // 実在情報、合計情報
						TAB_PAYWAY  : cField := GridPayWay_UketoriName.Field;   // 支払方法
						TAB_RATIO:					                            // 支払方法(比率)
						begin
                            if (TdxDBGrid(Screen.ActiveControl).Name = GridPayRatio.Name) then
                            begin
							    if m_bPayRatioDetail = True then
                                	cField := Hou_H_Houhou5_HasuuHou.Field
                                else
                                	cField := Hou_H_Houhou5_StdRitu.Field;
                            end
                            else
                            begin
							    if m_bShousaiDetail = True then
//<172> Mod
//                                	cField := Shousai_Hou5_Site.Field
								begin
									if	(TdxDBGrid(Screen.ActiveControl).DataSource.DataSet.FieldByName('PriPayWay').AsInteger in [2, 3]) then
										cField := Shousai_Hou5_Site.Field
									else
										cField := Shousai_Hou5_HasuuHou.Field;
								end
//<172> Mod
                                else
                                	cField := Shousai_Hou5_BaseHiritu.Field;
                            end;
						end;
						TAB_FIXED   :
                        begin
                            if (TdxDBGrid(Screen.ActiveControl).Name = GridPayFixed.Name) then
                                cField := Hou_T_Houhou5_StdRitu.Field     // 支払方法(定額)
                            else
                                cField := Shousai_Hou5_BaseHiritu.Field;  // 優先支払情報
                        end;
                        TAB_TRANSFER:
                        begin
                            if Gridfurikomi.DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0 then
                                cField := Fri_AccAutoKbn.Field
                            else
                                cField := Fri_AccAutoData.Field;
                        end;

						TAB_DATETRAN: cField := KFri_Site.Field;                // 期日指定振込情報
// <196> MOD-STR
//						TAB_DRAFT   : cField := Teg_YusouFutanKbn.Field;	    // 手形情報
						TAB_DRAFT   :                                           // 手形情報
                        begin
                            if ((m_iErUseKbn = 0) or (GridDraft.DataSource.DataSet.FieldByName('ERKbn').AsInteger = 0)) then
                                cField := Teg_YusouFutanKbn.Field
                            else
                                cField := Teg_VFree5.Field;
                        end;
// <196> MOD-END
						TAB_CHECK   : cField := Kog_YusouFutanKbn.Field;	    // 小切手情報
                        TAB_KIHON   :                                           // 基本情報
                        begin
                            if (m_iProAdoptKbn = 1) then
                                cField := GridKihon_BunkaiPtn.Field
                            else
                                cField := GridKihon_UketoriName.Field;
                        end;

						TAB_OTHER   :					                        // その他情報
						begin
							if GridOther.DataSource.DataSet.FieldByName('SumKbn').AsInteger = 0 then
								cField := Hoka_UketoriName.Field
							else
								cField := Hoka_ChangeCode.Field;
						end;
//<GA001>ST
                        TAB_KIHON_G  :                                           // 外貨基本情報
                        begin
                                cField := GridKihonG_GaiNo.Field;
                        end;
                        TAB_TRANSFER_GD:
                        begin
                            if GridfurikomiGD.DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0 then
                                cField := FriGD_iraiAccCode.Field
                        end;
                        TAB_TRANSFER_GT:
                        begin
                            if GridfurikomiGT.DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0 then
                                cField := FriGT_iraiAccCode.Field
                        end;
                        TAB_TRANSFER_GK:
                        begin
                            if GridfurikomiGK.DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0 then
                                cField := FriGK_iraiAccCode.Field
                        end;

//<GA001>ED
					end;
					TdxDBGrid (Screen.ActiveControl).FocusedField := cField;
// <142> 2007/02/20 H.Kawato Mod End
					Abort ();
//				end;    // <140> Del
			end;
		end;

		if	((Msg.CharCode = VK_ESCAPE) and (cShiftState = [])) then					// Esc
		begin
			if	((TdxDBGrid (Screen.ActiveControl).EditingText <> '') or
				 (TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.State in [dsEdit, dsInsert])) then
				Exit;

			m_cACControl := MComboBox;
			m_cACControl.SetFocus ();
			Abort ();
		end;

		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
// <153> 2007/08/17 H.Kawato Mod Start
//// <142> 2007/02/20 H.Kawato Mod
////			if	(TdxDBGrid (Screen.ActiveControl).FocusedColumn = nColNo) then
//			if	(TdxDBGrid (Screen.ActiveControl).FocusedField = cField) then
            // 参照のみ、または先頭フィールドの場合
			if	(m_nReferMode = REFER) or
                (TdxDBGrid (Screen.ActiveControl).FocusedField = cField) then
// <153> 2007/08/17 H.Kawato Mod End
			begin
				m_cACControl := Tab;
				m_cACControl.SetFocus ();
				Abort ();
			end;
		end;

// 2006/05/10 H.Kawato Add St
	    if (Tab.Items.Selected = TAB_RATIO) and (Screen.ActiveControl.Name <> Tab.Name) then
	    begin
            if ((Msg.CharCode = VK_F1) and (cShiftState = [])) then				    // F1: 画面表示切替
            begin
                TBChgColSizeClick(nil);

                if (uvFncInfo.Caption[0] = 'F1 一覧表示') then
                    uvFncInfo.Caption[0] := 'F1 詳細表示'
                else
                    uvFncInfo.Caption[0] := 'F1 一覧表示';

                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
                Abort ();
            end;
	    end;
// 2006/05/10 H.Kawato Add Ed

// <142> 2007/02/20 H.Kawato Add Start
	    if ((Tab.Items.Selected = TAB_RATIO) or (Tab.Items.Selected = TAB_FIXED)) and
// <172> Mod
//          (Screen.ActiveControl.Name <> Tab.Name) and (m_iProAdoptKbn = 1) then
			(Screen.ActiveControl.Name <> Tab.Name) then
// <172> Mod
	    begin
            if ((Msg.CharCode = VK_F8) and (cShiftState = [])) then				    // F8: 画面表示切替
            begin
// <178> MOD-STR
//<174> Add
{				//件数がある場合使用可能
                if	((Tab.Items.Selected = TAB_RATIO) and
					 (MemPayRatio.State = dsEdit))   or
					((Tab.Items.Selected = TAB_FIXED) and
					 (MemPayFixed.State = dsEdit)) then
				begin
					Msg.CharCode := 0;
	                Abort ();
				end;}
//<174> Add
                if	((Tab.Items.Selected = TAB_RATIO) and
                     (MemPayRatio.State = dsEdit))   then
                     MemPayRatio.Post;
                if	((Tab.Items.Selected = TAB_FIXED) and
                     (MemPayFixed.State = dsEdit)) then
                     MemPayFixed.Post;
// <178> MOD-END
                GridShousaiChange(Tab.Items.Selected);

                if (Tab.Items.Selected = TAB_RATIO) then
                begin
                    if (PanelShousai.Visible = False) then
                    begin
                        if Hou_H_Houhou1_Minkin.Visible = False then
                            uvFncInfo.Caption[0] := 'F1 詳細表示'
                        else
                            uvFncInfo.Caption[0] := 'F1 一覧表示';
                    end
                    else
                    begin
                        if Shousai_Hou1_HasuuKingaku.Visible = False then
                            uvFncInfo.Caption[0] := 'F1 詳細表示'
                        else
                            uvFncInfo.Caption[0] := 'F1 一覧表示';
                    end;
                end;

                if (uvFncInfo.Caption[7] = 'F8 優先支払詳細') then
                    uvFncInfo.Caption[7] := 'F8 支払方法'
                else
//<174> Mod
//                  uvFncInfo.Caption[7] := 'F8 優先支払詳細';
				begin
					uvFncInfo.Caption[7] := 'F8 優先支払詳細';
					//件数がある場合使用可能
	                if	((Tab.Items.Selected = TAB_RATIO) and
						 (MemPayRatio.RecordCount > 0))   or
						((Tab.Items.Selected = TAB_FIXED) and
						 (MemPayFixed.RecordCount > 0)) then
	                    uvFncInfo.Enabled[7] := True
					else
	                    uvFncInfo.Enabled[7] := False;
				end;
			    MSPFunctionBar.SetFuncEnabledA(uvFncInfo.Enabled);
//<174> Mod

                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
                Abort ();
            end;
	    end;
// <142> 2007/02/20 H.Kawato Add End

		if ((Screen.ActiveControl.Name = GridReal.Name) or
		    (Screen.ActiveControl.Name = GridTotal.Name)) then
		begin
			if ((TdxDBGrid (Screen.ActiveControl).FocusedColumn = 4) and ((Msg.CharCode = VK_F8) and (cShiftState = []))) then
			begin
				strDescription := MJSKabuCut(TdxDBGrid(Screen.ActiveControl).DataSource.DataSet.FieldByName('strName').AsString, 14);

				if (strDescription <> '') then
				begin
					TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.Edit ();
					TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.FieldByName ('strNameSimple').AsString	:= strDescription;
					TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.Post ();
				end;

				Abort();
			end;
		end;

// <138> 2006/08/11 H.Kawato Add Start
		if (Screen.ActiveControl.Name = GridFurikomi.Name) then
		begin
// <142> 2007/02/20 H.Kawato Mod
//			if ((TdxDBGrid (Screen.ActiveControl).FocusedColumn = 3) and
			if ((TdxDBGrid (Screen.ActiveControl).FocusedField = Fri_IraiAccCode.Field) and
               ((Msg.CharCode = VK_LEFT) and (cShiftState = []))) then
            begin
                m_bChgNodeFlg := True;
            end;
		end;
// <138> 2006/08/11 H.Kawato Add End

//<GA001>ST

		if (Screen.ActiveControl.Name = GridFurikomiGD.Name) then
		begin
			if ((TdxDBGrid (Screen.ActiveControl).FocusedField = FriGD_IraiAccCode.Field) and
               ((Msg.CharCode = VK_LEFT) and (cShiftState = []))) then
            begin
                m_bChgNodeFlg := True;
            end;
		end;
		if (Screen.ActiveControl.Name = GridFurikomiGT.Name) then
		begin
			if ((TdxDBGrid (Screen.ActiveControl).FocusedField = FriGT_IraiAccCode.Field) and
               ((Msg.CharCode = VK_LEFT) and (cShiftState = []))) then
            begin
                m_bChgNodeFlg := True;
            end;
		end;
		if (Screen.ActiveControl.Name = GridFurikomiGK.Name) then		begin
			if ((TdxDBGrid (Screen.ActiveControl).FocusedField = FriGK_IraiAccCode.Field) and
               ((Msg.CharCode = VK_LEFT) and (cShiftState = []))) then
            begin
                m_bChgNodeFlg := True;
            end;
		end;

//<GA001>ED


		Exit;
	end;

	// 相殺情報
	if (Tab.Items.Selected = TAB_OFFSET) and (Screen.ActiveControl.Name <> Tab.Name) then
	begin
		if (Screen.ActiveControl.Name = GridOffset.Name) then
		begin
			if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
			begin
				m_cACControl := Tab;
				m_cACControl.SetFocus();
				Abort();
			end;

			if ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
			begin
				if Edit00PayCodeNum.Visible = True then
					m_cACControl := Edit00PayCodeNum
				else
					m_cACControl := Edit00PayCodeFree;
				m_cACControl.SetFocus();
				Abort();
			end;

			if (Msg.CharCode = VK_RETURN) then
			begin
				if Edit00PayCodeNum.Visible = True then
					m_cACControl := Edit00PayCodeNum
				else
					m_cACControl := Edit00PayCodeFree;
				m_cACControl.SetFocus();
				Abort();
			end;
        	exit;
		end;

		if (Msg.CharCode = VK_RETURN) or ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
		begin
			// ﾌｫｰｶｽの移動
			if fnMoveFocusNextControl(False) = False then
			begin
				m_cACControl.SetFocus();
				abort;
			end;

			// 相殺金額
			if (Screen.ActiveControl.Name = Edit08OffsetPrice.Name) then
			begin
// <162> MOD-STR
//              if fnEditHojyoChk() then
                if fnEditHojyoChk(nFieldID) then
// <162> MOD-END
                begin
// <127> 2006/06/27 H.Kawato Add0 St    // 2006/08/03 H.Kawato Del 相殺金額のNegativeをFalseに変更
{
        			if (Trunc(Edit08OffsetPrice.AsCurrency) < 0) then
        			begin
        				m_cACControl.SetFocus();
        				abort;
        			end;
}
// <127> 2006/06/27 H.Kawato Add Ed
// <122> 2006/04/25 H.Kawato Add St
	                // 支払ｺｰﾄﾞ取得
	                if Edit00PayCodeNum.Visible = True then
	                begin
		                sCode := FloatToStr(Edit00PayCodeNum.Value);

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                        begin
			                case (m_nCurCodeAttribute) of
				                0: strFormat := '%' +IntToStr(m_nCurCodeDigit)+'d';
				                1: strFormat := '%.'+IntToStr(m_nCurCodeDigit)+'d';
			                end;
		                end;
		                sCode := Format(strFormat,[StrToInt64(Trim(sCode))]);
	                end
	                else
		                sCode := Edit00PayCodeFree.Text;


                    if Edit00PayCodeNum.Visible = True then
                        sCode := Format('%.16d',[Trunc(Edit00PayCodeNum.Value)])
                    else
                        sCode := Edit00PayCodeFree.Text;

                    ExNCode     := fnGetNCode(sCode);

                    iRenInitRet := -99; // <125>

                    try                 // <125>

                        iRenInitRet := fnPayProgRendoInit(ExNCode);

                        if (iRenInitRet = 1) or (iRenInitRet = 0) then
                        begin
// <122> 2006/04/25 H.Kawato Add Ed
        				    // 登録処理
    	    			    if fnUpdateMasterRecordPayOffsetInfo() = False then abort;
// <122> 2006/04/25 H.Kawato Add St
                        end;

                    finally             // <125>
                        fnPayProgRendoExec(iRenInitRet, ExNCode);
                    end;                // <125>
// <122> 2006/04/25 H.Kawato Add Ed
			    	if Edit00PayCodeNum.Visible = True then
				    	Edit00PayCodeNum.SetFocus
    				else
	    				Edit00PayCodeFree.SetFocus;
                end
                else
                begin
// <162> MOD-STR
//			    	if Edit00PayCodeNum.Visible = True then
//				    	Edit00PayCodeNum.SetFocus
//    				else
//	    				Edit00PayCodeFree.SetFocus;

                    MJSMessageBoxEx (Self, '必須入力項目を入力して下さい。', '確認確認', mjInformation, mjOK, mjDefOK);

			    	if TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID]))).Visible = True then
				    	TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID]))).SetFocus
    				else
	    				TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[nFieldID]))).SetFocus;
// <162> MOD-END
                end;
			end
			else
				MjsDispCtrl.MjsNextCtrl(Self);
			abort;
		end;

// 2006/08/10 H.Kawato Add Start
        if (Screen.ActiveControl.Name = Edit08OffsetPrice.Name) and
           ((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) then
        begin
            abort;
        end;
// 2006/08/10 H.Kawato Add End

		if	(((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) or						// →↓
			 ((Msg.CharCode = VK_DOWN ) and (cShiftState = []))) then
		begin
			if ((GetKeyState (VK_MENU) < 0) and (Msg.CharCode = VK_DOWN)) then			// Altｷｰが押された時
				Exit;

			// ﾌｫｰｶｽの移動
			if fnMoveFocusNextControl(False) = False then
			begin
				m_cACControl.SetFocus();
				abort;
			end;
			MjsDispCtrl.MjsNextCtrl(Self);
			Abort ();
		end;

		if	(((Msg.CharCode = VK_LEFT) and (cShiftState = [])) or						// ←↑
             ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) or                 // 2006/08/09 H.Kawato Add
			 ((Msg.CharCode = VK_UP  ) and (cShiftState = []))) then
		begin
			// ﾌｫｰｶｽの移動
			if fnMoveFocusNextControl(True) = False then
			begin
				m_cACControl.SetFocus();
				abort;
			end;

			MJSDispCtrl.MjsPrevCtrl (Self);
			Abort ();
		end;

		// 相殺情報削除
		if ((Screen.ActiveControl.Name = Edit02KmkCode.Name) or					// 相殺情報: 科目ｺｰﾄﾞ
		    (Screen.ActiveControl.Name = Edit03HojCodeNum.Name) or				// 相殺情報: 補助ｺｰﾄﾞ①
		    (Screen.ActiveControl.Name = Edit03HojCodeFree.Name) or
		    (Screen.ActiveControl.Name = Edit04HojCodeNum.Name) or				// 相殺情報: 補助ｺｰﾄﾞ②
		    (Screen.ActiveControl.Name = Edit04HojCodeFree.Name) or
		    (Screen.ActiveControl.Name = Edit05HojCodeNum.Name) or				// 相殺情報: 補助ｺｰﾄﾞ③
		    (Screen.ActiveControl.Name = Edit05HojCodeFree.Name) or
		    (Screen.ActiveControl.Name = Edit06TaxCode.Name) or					// 消費税ｺｰﾄﾞ
		    (Screen.ActiveControl.Name = Edit07TaxRate.Name) or					// 消費税率ｺｰﾄﾞ
		    (Screen.ActiveControl.Name = Edit08OffsetPrice.Name)) then			// 相殺金額
		begin
// <150> 2007/07/24 H.Kawato Mod
//			if ((Msg.CharCode = VK_F1) and (cShiftState = [])) then				// F1: ﾚｺｰﾄﾞ削除
			if ((Msg.CharCode = VK_F1) and (cShiftState = [])) and (m_IsDelete) then    // F1: ﾚｺｰﾄﾞ削除
			begin
				fnDeleteOffsetRecord();
				if Edit00PayCodeNum.Visible = True then
					Edit00PayCodeNum.SetFocus
				else
					Edit00PayCodeFree.SetFocus;
				Abort ();
			end;

// <181> ADD-STR
            if	((Msg.CharCode = VK_F8) and (cShiftState = [])) then		    // F8: 付加情報
            begin
                fnLaunchSwkAddDlg ();
                Abort ();
            end;
// <181> ADD-END
		end;
	end;
//////////////////<GA001>ST
	// 可変項目
	if (Tab.Items.Selected = TAB_KHNSET_G) and (Screen.ActiveControl.Name <> Tab.Name) then
	begin
		if (Screen.ActiveControl.Name = GridKhnsetG.Name) then
		begin
			if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
			begin
				m_cACControl := Tab;
				m_cACControl.SetFocus();
				Abort();
			end;

			if ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
			begin
				if Edit00GPayCodeNum.Visible = True then
					m_cACControl := Edit00GPayCodeNum
				else
					m_cACControl := Edit00GPayCodeFree;
				m_cACControl.SetFocus();
				Abort();
			end;

			if (Msg.CharCode = VK_RETURN) then
			begin
				if Edit00GPayCodeNum.Visible = True then
					m_cACControl := Edit00GPayCodeNum
				else
					m_cACControl := Edit00GPayCodeFree;
				m_cACControl.SetFocus();
				Abort();
			end;
        	exit;
		end;



        //文字入力の中で、LEFT＆RIGHTが出来るようにしている。
        if ((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) then  Exit;

        if  ((Msg.CharCode = VK_LEFT) and (cShiftState = [])) then
        begin
            if ((Screen.ActiveControl.Name =  Edit01GItemValue.Name) and (Edit01GItemValue.SelStart <> 0)) or
               ((Screen.ActiveControl.Name =  Edit01GItemID.Name) and (Edit01GItemID.SelStart <> 0)) then
              Exit;
        end;

		if (Msg.CharCode = VK_RETURN) or ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
		begin
			// ﾌｫｰｶｽの移動
			if fnMoveGFocusNextControl(False) = False then
			begin
				m_cACControl.SetFocus();
				abort;
			end;

			// 内容
			if (Screen.ActiveControl.Name = Edit01GItemValue.Name) then
			begin
	            // 支払ｺｰﾄﾞ取得
	            if Edit00GPayCodeNum.Visible = True then
	            begin
		            sCode := FloatToStr(Edit00GPayCodeNum.Value);

                    if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                    begin
			            case (m_nCurCodeAttribute) of
				            0: strFormat := '%' +IntToStr(m_nCurCodeDigit)+'d';
				            1: strFormat := '%.'+IntToStr(m_nCurCodeDigit)+'d';
                        end;
                    end;

		            sCode := Format(strFormat,[StrToInt64(Trim(sCode))]);
                end
	            else
		            sCode := Edit00GPayCodeFree.Text;


                if Edit00GPayCodeNum.Visible = True then
                    sCode := Format('%.16d',[Trunc(Edit00GPayCodeNum.Value)])
                else
                    sCode := Edit00GPayCodeFree.Text;

                ExNCode     := fnGetNCode(sCode);

   			    // 登録処理
    			if fnUpdateMasterRecordPayKhnsetGInfo() = False then abort;

		    	if Edit00GPayCodeNum.Visible = True then
			    	Edit00GPayCodeNum.SetFocus
   				else
    				Edit00GPayCodeFree.SetFocus;
			end
			else
				MjsDispCtrl.MjsNextCtrl(Self);
			abort;

		end;

		if	(((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) or						// →↓
			 ((Msg.CharCode = VK_DOWN ) and (cShiftState = []))) then
		begin
			if ((GetKeyState (VK_MENU) < 0) and (Msg.CharCode = VK_DOWN)) then			// Altｷｰが押された時
				Exit;

			// ﾌｫｰｶｽの移動
			if fnMoveGFocusNextControl(False) = False then
			begin
				m_cACControl.SetFocus();
				abort;
			end;
			MjsDispCtrl.MjsNextCtrl(Self);
			Abort ();
		end;




		if	(((Msg.CharCode = VK_LEFT) and (cShiftState = [])) or						// ←↑
             ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) or                 //
			 ((Msg.CharCode = VK_UP  ) and (cShiftState = []))) then
		begin
			// ﾌｫｰｶｽの移動
			if fnMoveGFocusNextControl(True) = False then
			begin
				m_cACControl.SetFocus();
				abort;
			end;

			MJSDispCtrl.MjsPrevCtrl (Self);
			Abort ();
		end;

		// 可変情報の内容を削除
		if (Screen.ActiveControl.Name = Edit01GItemValue.Name) then    		//　内容
		begin
			if ((Msg.CharCode = VK_F1) and (cShiftState = [])) and (m_IsDelete) then    // F1: ﾚｺｰﾄﾞ削除
			begin
				fnDeleteKhnsetGRecord();
				if Edit00GPayCodeNum.Visible = True then
					Edit00GPayCodeNum.SetFocus
				else
					Edit00GPayCodeFree.SetFocus;
				Abort ();
			end;
		end;
	end;
//////////////////<GA001>ED


	// 名寄せ(Tree)
	if (Screen.ActiveControl.Name = TreeViewNayose.Name) then
	begin
		// 名寄せ情報から外す
		if ((Msg.CharCode = VK_F1) and (cShiftState = [])) and
		    								(RBNayoseTree.Checked = True) then	// F1: ﾚｺｰﾄﾞ削除
			fnF1DeletePayNayoseInfo();

		if ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then				// Tab
		begin
			m_cACControl := CmnTreeView;
			m_cACControl.SetFocus ();
			Abort ();
		end;
	end;

	// 名寄せ(Grid)
	if (Screen.ActiveControl.Name = GridNayose.Name) then
	begin
		// 名寄せ情報から外す
		if ((Msg.CharCode = VK_F1) and (cShiftState = [])) and
											(RBNayoseGrid.Checked = True) then	// F1: ﾚｺｰﾄﾞ削除
			fnF1DeletePayNayoseInfo();

		if ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then				// Tab
			exit;

		if	((Msg.CharCode = VK_END) and (cShiftState <> [ssCtrl])) then		// End
		begin
	 		if (TdxDBGrid(Screen.ActiveControl).EditingText = '') then
			begin
				if (TdxDBGrid(Screen.ActiveControl).FocusedColumn = 0) then
				begin
					m_cACControl := CmnTreeView;
					m_cACControl.SetFocus ();
					Abort ();
				end;
			end;
		end;

		if ((Msg.CharCode = VK_ESCAPE) and (cShiftState = [])) then				// Esc
		begin
			if ((TdxDBGrid (Screen.ActiveControl).EditingText <> '') or
			    (TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.State in [dsEdit, dsInsert])) then
				Exit;

			m_cACControl := CmnTreeView;
			m_cACControl.SetFocus ();
			Abort ();
		end;

		if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
			if (TdxDBGrid (Screen.ActiveControl).FocusedColumn = 0) then
			begin
				m_cACControl := RBNayoseGrid;
				m_cACControl.SetFocus ();
				Abort();
			end;
			exit;
		end;

		if ((Msg.CharCode = VK_RETURN) and (cShiftState = [])) then
		begin
			exit;
		end;
	end;

	// 名寄せ(RadioButtonTree)
	if (Screen.ActiveControl.Name = RBNayoseTree.Name) then
	begin
		if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
			Tab.SetFocus ();
			Abort ();
		end;

		if (Msg.CharCode = VK_RETURN) then
		begin
			RBNayoseTree.SetFocus;
			abort;
		end;

		if ((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) then				// →
		begin
			RBNayoseGrid.SetFocus;
			abort;
		end;
	end;

	// 名寄せ(RadioButtonGrid)
	if (Screen.ActiveControl.Name = RBNayoseGrid.Name) then
	begin
		if ((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
			Tab.SetFocus ();
			Abort ();
		end;

		if (Msg.CharCode = VK_RETURN) then
		begin
			RBNayoseGrid.SetFocus;
			abort;
		end;

		if ((Msg.CharCode = VK_LEFT) and (cShiftState = [])) then				// ←
		begin
			RBNayoseTree.SetFocus;
			abort;
		end;
	end;

    // *** ﾌｧﾝｸｼｮﾝ ***
    case Msg.CharCode of
    VK_F1:  MSPFunctionBarFunctionClick(MSPFunctionBar, 1);
    VK_F2:  MSPFunctionBarFunctionClick(MSPFunctionBar, 2);
    VK_F3:  MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
    VK_F4:  MSPFunctionBarFunctionClick(MSPFunctionBar, 4);
    VK_F5:  MSPFunctionBarFunctionClick(MSPFunctionBar, 5);
    VK_F6:  MSPFunctionBarFunctionClick(MSPFunctionBar, 6);
    VK_F7:  MSPFunctionBarFunctionClick(MSPFunctionBar, 7);
    VK_F8:  MSPFunctionBarFunctionClick(MSPFunctionBar, 8);
    end;


	inherited;
end;

//**********************************************************************
//*		Proccess	:
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Msg		:	TMessage
//*		Return		:
//*		History		:
//**********************************************************************
procedure	TJNTCRP004007f.fnDiscontinue (var Msg: TMessage);
var
	cMessageRec: TMJSMsgRec;
begin
	// 取引先が採用されていないのでこの処理は行えません
	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 10);

	cMessageRec.sMsg := m_cComArea.m_MsgStd.MsgChange (cMessageRec.sMsg, '@_@', '取引先');

	Beep();

	MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle,
							cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

	Close();
end;

//************************************************************************
//*		Component	:	TJNTCRP004007f ( TForm )
//*							フォーム作成
//*		Event		:	OnCreate
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.FormCreate (Sender: TObject);
var
	fDiscontinue: Boolean;
    iRet        :   Integer;                                                    // <PRN>
//    lvHandle    :   THandle;                                                  // <PRN>  // <141> 2006/08/17 H.Kawato Del

	iLoop       : Integer;                                                      // <181> ADD
	dqMasterData: TMQuery;                                                      // <194> ADD
begin

    m_bBtnChange 	:=  TRUE;   // <108>

    B_Print          := TMSpeedButton( m_CmpList.Items[0]^ );                   // 印刷
// <192> MOV-STR
//  m_cJNTArea       := TJNTCommon   ( m_CmpList.Items[8]^ );
//  m_Base_pRec      := Pointer      ( m_CmpList.Items[9]^ );                   // <101>
// <192> MOV-END
    B_Change         := TMSpeedButton( m_CmpList.Items[11]^ );                  // <108>
    MComboBox        := TMComboBox   ( m_CmpList.Items[10]^ );
	m_SyncMaster     := TSyncMaster  ( m_CmpList.Items[13]^ );                  // <Rel>
    m_JNTAuthority   := TJNTAuthority( m_CmpList.Items[16]^ );                  // <AUT> ADD

    B_Print.OnClick  := BPrintClick;
    B_Change.OnClick := BChangeClick;                                           // <108>

//    B_Print     .Enabled    :=  False;                                        // <103>

	Parent	:= TPanel (m_pRec^.m_pOwnerPanel^);
	Align	:= alClient;

	MJSColorChange (TJNTCRP004007f (Self), m_cComArea.SystemArea.SysColorB, m_cComArea.SystemArea.SysColorD,
									m_cComArea.SystemArea.SysBaseColorB, m_cComArea.SystemArea.SysBaseColorD,
															rcCOMMONAREA (m_pRec^.m_pCommonArea^).SysFocusColor);

	m_ZoomRatio := MJSFontResize (TJNTCRP004007f (Self), Pointer (m_pRec));		//<#2>(戻り値取得)

	// -----<159> Add-St-----
	SPMsHist.DatabaseName := m_cDBSelect.DatabaseName;
	SPMsHist.SessionName  := m_cDBSelect.SessionName;

												// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
		SPMsHistParent.DatabaseName	:= m_SyncMaster.m_cPDBSelect.DatabaseName;
		SPMsHistParent.SessionName	:= m_SyncMaster.m_cPDBSelect.SessionName;
	end;
	// -----<159> Add-Ed-----



//<GA001>ST
    ////////////////////
    //外貨採用区分判定//
    ////////////////////
    fnGetPayBaseInfoG();

    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
        m_PayProgRendoG  := TJNTPayProgRendoG.Create;
        m_ProgRendoGFlg  := False;
    end;
//<GA001>ED
    fnSetFncType(1,False);
    fnSetFncType(6,False);  // <182> 2010/07/27 G.Kojima Add
    fnSetFncType(7,False);
    fnSetFncType(8,False);  // <142> 2007/02/20 H.Kawato Add


//    m_cJNTArea      :=  TJNTCommon.Create(Self);
//    m_cJNTArea.Init(m_pRec);
//    m_cJNTArea.SetMasAppRecord;						                        // 販売ポインタ設定

    m_CmpList2       :=  TList.Create;

//--- <#2> St -----
	if m_ZoomRatio <= 0 then
		m_ZoomRatio := 100;

	// ToolBar2の位置
	ToolBar2.Left         := BSearch.Left+BSearch.Width;	                    // 検索ﾎﾞﾀﾝのLeft+WidthでToolBarのLeft位置取得
	MJSCompoResize(ToolBar2,1,Pointer(m_pRec));
	ToolBar2.ButtonHeight := ToolBar2.Height;

	// ToolBar1の位置
	ToolBar1.Left         := ToolBar2.Left+ToolBar2.Width;
	MJSCompoResize(ToolBar1,1,Pointer(m_pRec));
	ToolBar1.ButtonHeight := ToolBar1.Height;

	GridOffset.Bands[1].MinWidth := fnGetZoom(GridOffset.Bands[1].MinWidth);
	GridOffset.Bands[1].Width    := fnGetZoom(GridOffset.Bands[1].MinWidth);


//--- <#2> Ed -----

// <120>	m_cPreview	 := TMJSPreviewIF.Create ();
//<100>	m_cPayAccExp := TPayAccExpIF .Create ();

//	    m_cPreview  .Init (m_pRec);
//<100>	m_cPayAccExp.Init (m_pRec);

	fnSetProperty();
	fnInitializeComInformation();

// <#TAX10> ADD-STR
	// 消費税率情報
   	m_TaxRateInfo		:= nil;
   	m_TaxRateInfoFront	:= nil;
// <#TAX10> ADD-END

//↓<Rel>
	// この時点で、参照ﾓｰﾄﾞ以外のときのみ、以下の論理を行う。
	if (m_nReferMode <> REFER) then
	begin
        // 全社の過年度DBを選択している場合
        if ( m_SyncMaster.m_flgGrpCorp = 0 ) then
        begin
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                if ( MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Oya,
                                        'グループ会計', mjQuestion, mjYesNo, mjDefNO) = mrYES ) then
                begin
                    // 通常のﾏｽﾀ登録として起動する。
                    // 登録したﾏｽﾀについて_RELの作成はしない。(Triggerでﾁｪｯｸを行う)
                    // 通常ﾓｰﾄﾞ
                end
                else
                begin
                    // 更新ﾎﾞﾀﾝは、入力不可の状態で起動する。
                    // ﾏｽﾀをUpdata、Insertすることはできない。
                    m_cJNTArea.Invalidity;

                    // 参照ﾓｰﾄﾞ
                    m_nReferMode := REFER;
                end;
            end;
        end
        // 子会社(ｸﾞﾙｰﾌﾟ会計採用有)
        else if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 子会社が過年度DBの場合
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_K,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;

                // 参照ﾓｰﾄﾞ
                m_nReferMode := REFER;
            end
            // 親会社が過年度DBの場合
            else if  ( m_SyncMaster.m_PEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_O,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;

                // 参照ﾓｰﾄﾞ
                m_nReferMode := REFER;
            end;
        end;
	end;
//↑<Rel>

// <128> 2006/06/29 H.Kawato Add
    m_iHeikouData       := 0;
    m_iHeikouCount      := 0;

    m_iProAdoptKbn      := 0;   // <142> Add
    m_iSubAdoptKbn      := 0;   // <142> Add
    m_iProjectKbn       := 0;   // <142> Add
    m_iProjSubKbn       := 0;   // <142> Add

    // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ属性、ｺｰﾄﾞ桁数の初期化 <142-2> 2007/10/24 Add
    m_iPrjCodeAttr      := 0;   // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ属性
    m_iPrjCodeDigit     := 6;   // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ桁数
    m_iPjSubCodeAttr    := 0;   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ属性
    m_iPjSubCodeDigit   := 6;   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ桁数

    m_iErUseKbn         := 0;   // 電子記録債権採用区分 <196> ADD

    fnGetPayBaseInfo();


    m_iProjSubKbn   := m_iProjectKbn + 100;     // <142> ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ区分
// <128> 2006/06/29 H.Kawato Add

    m_sSpotPayCD    := '';                      // <173> スポット支払支払先コード

	m_cACControl := GridKihon;

	fDiscontinue := FALSE;

    fnGetMasterKbnFX();    // <033>

	if	(not fnSetMasterInfoData ()) then
	begin
		PostMessage (Self.Handle, WM_DISCONTINUE, 0, 0);								// 処理中止
		fDiscontinue := TRUE;
	end;

// <142> 2007/02/20 H.Kawato Add Start
    if (m_iProAdoptKbn = 1) and (m_iProjectKbn <> 0) then
    begin
        if (m_iPrjCodeAttr <= 1) then
        begin
            GridPayWay_PrjCode.Alignment := taRightJustify;
            Hou_H_PrjCode.Alignment      := taRightJustify;
            Hou_T_PrjCode.Alignment      := taRightJustify;
            Shousai_PrjCode.Alignment    := taRightJustify;
            Fri_PrjCode.Alignment        := taRightJustify;
            KFri_PrjCode.Alignment       := taRightJustify;
            Teg_PrjCode.Alignment        := taRightJustify;
            Kog_PrjCode.Alignment        := taRightJustify;
            GridOffsetPrjCode.Alignment  := taRightJustify;
        end
        else
        begin
            GridPayWay_PrjCode.Alignment := taLeftJustify;
            Hou_H_PrjCode.Alignment      := taLeftJustify;
            Hou_T_PrjCode.Alignment      := taLeftJustify;
            Shousai_PrjCode.Alignment    := taLeftJustify;
            Fri_PrjCode.Alignment        := taLeftJustify;
            KFri_PrjCode.Alignment       := taLeftJustify;
            Teg_PrjCode.Alignment        := taLeftJustify;
            Kog_PrjCode.Alignment        := taLeftJustify;
            GridOffsetPrjCode.Alignment  := taLeftJustify;
        end;

        // 基本情報
        GridKihon.Bands[KIHONBANDS_BUNKAIKBN].Visible   := False;
        GridKihon.Bands[KIHONBANDS_UKETORINAME].Visible := False;
        GridKihon.Bands[KIHONBANDS_BUNKAIPTN].Visible   := True;
        // 支払方法
        Tab.Items[TAB_PAYWAY].Visible                   := True;
        GridPayWay.Bands[PAYWAYBANDS_PRJCODE].Visible   := True;
        GridPayWay.Bands[PAYWAYBANDS_PRJNAME].Visible   := True;
        GridPayWay.Bands[PAYWAYBANDS_PRJNAME].Caption   := m_sProjectTitle;
        // 方法(比率)
        Hou_H_PrjCode.Visible   := True;
        Hou_H_PrjName.Visible   := True;
        Hou_H_PrjName.Caption   := m_sProjectTitle;
        Hou_H_PriPayWay.Visible := True;
        Hou_H_PriPayWayName.Visible := True;
        // 方法(定額)
        Hou_T_PrjCode.Visible   := True;
        Hou_T_PrjName.Visible   := True;
        Hou_T_PrjName.Caption   := m_sProjectTitle;
        Hou_T_PriPayWay.Visible := True;
        Hou_T_PriPayWayName.Visible := True;
        // 優先支払詳細
        Shousai_PrjCode.Visible := True;
        Shousai_PrjName.Visible := True;
        Shousai_PrjName.Caption := m_sProjectTitle;
        // 振込情報
        Fri_PrjCode.Visible := True;
        Fri_PrjName.Visible := True;
        Fri_PrjName.Caption := m_sProjectTitle;
        // 期日振込情報
        KFri_PrjCode.Visible := True;
        KFri_PrjName.Visible := True;
        KFri_PrjName.Caption := m_sProjectTitle;
        // 手形情報
        Teg_PrjCode.Visible := True;
        Teg_PrjName.Visible := True;
        Teg_PrjName.Caption := m_sProjectTitle;
        // 小切手情報
        Kog_PrjCode.Visible := True;
        Kog_PrjName.Visible := True;
        Kog_PrjName.Caption := m_sProjectTitle;
        // 相殺情報
        PanelOffsetGrid.Width   := 913;
        GridOffset.Bands[SOUSAIBANDS_PRJNAME].Visible   := True;
        GridOffset.Bands[SOUSAIBANDS_PRJNAME].Caption   := m_sProjectTitle;
        MPanel24.Width  := 886;
        MPanel29.Width  := 882;
        MLabel5.Left    := 763;
        MLabel4.Left    := 635;
        MLabel3.Left    := 285;
        MLabel1.Left    := 264;
        QRShape8.Left   := 654;
        QRShape7.Left   := 534;
        QRShape6.Left   := 359;
        Edit01SeqNo.Left    := 262;
        Edit06TaxCode.Left  := 633;
        Edit07TaxRate.Left  := 633;
        Edit08OffsetPrice.Left  := 761;
        Edit06TaxCodeName.Left  := 655;
        Edit07TaxRateName.Left  := 655;
        Edit04HojCodeName.Left  := 535;
        Edit05HojCodeName.Left  := 535;
        Edit04HojCodeNum.Left   := 458;
        Edit04HojCodeFree.Left  := 458;
        Edit05HojCodeNum.Left   := 458;
        Edit05HojCodeFree.Left  := 458;
        Edit02KmkCodeName.Left  := 360;
        Edit03HojCodeName.Left  := 360;
        Edit02KmkCode.Left      := 283;
        Edit03HojCodeFree.Left  := 283;
        Edit03HojCodeNum.Left   := 283;
        MLabel6.Visible         := True;
        MLabel6.Caption         := m_sProjectTitle;
        Edit09PrjName.Visible   := True;
        Edit09PrjCodeFree.Visible   := True;
        Edit09PrjCodeNum.Visible    := True;

        if (m_iSubAdoptKbn = 1) then
        begin
            if (m_iPjSubCodeAttr <= 1) then
            begin
                GridPayWay_PjSubCode.Alignment := taRightJustify;
                Hou_H_PjSubCode.Alignment      := taRightJustify;
                Hou_T_PjSubCode.Alignment      := taRightJustify;
                Shousai_PjSubCode.Alignment    := taRightJustify;
                Fri_PjSubCode.Alignment        := taRightJustify;
                KFri_PjSubCode.Alignment       := taRightJustify;
                Teg_PjSubCode.Alignment        := taRightJustify;
                Kog_PjSubCode.Alignment        := taRightJustify;
                GridOffsetPjSubCode.Alignment  := taRightJustify;
            end
            else
            begin
                GridPayWay_PjSubCode.Alignment := taLeftJustify;
                Hou_H_PjSubCode.Alignment      := taLeftJustify;
                Hou_T_PjSubCode.Alignment      := taLeftJustify;
                Shousai_PjSubCode.Alignment    := taLeftJustify;
                Fri_PjSubCode.Alignment        := taLeftJustify;
                KFri_PjSubCode.Alignment       := taLeftJustify;
                Teg_PjSubCode.Alignment        := taLeftJustify;
                Kog_PjSubCode.Alignment        := taLeftJustify;
                GridOffsetPjSubCode.Alignment  := taLeftJustify;
            end;

            // 支払方法
            GridPayWay.Bands[PAYWAYBANDS_PJSUBCODE].Visible := True;
            GridPayWay.Bands[PAYWAYBANDS_PJSUBNAME].Visible := True;
            GridPayWay.Bands[PAYWAYBANDS_PJSUBNAME].Caption := m_sPjSubTitle;
            // 方法(比率)
            Hou_H_PjSubCode.Visible := True;
            Hou_H_PjSubName.Visible := True;
            Hou_H_PjSubName.Caption := m_sPjSubTitle;
            // 方法(定額)
            Hou_T_PjSubCode.Visible := True;
            Hou_T_PjSubName.Visible := True;
            Hou_T_PjSubName.Caption := m_sPjSubTitle;
            // 優先支払詳細
            Shousai_PjSubCode.Visible := True;
            Shousai_PjSubName.Visible := True;
            Shousai_PjSubName.Caption := m_sPjSubTitle;
            // 振込情報
            Fri_PjSubCode.Visible := True;
            Fri_PjSubName.Visible := True;
            Fri_PjSubName.Caption := m_sPjSubTitle;

            // 期日振込情報
            KFri_PjSubCode.Visible := True;
            KFri_PjSubName.Visible := True;
            KFri_PjSubName.Caption := m_sPjSubTitle;
            // 手形情報
            Teg_PjSubCode.Visible := True;
            Teg_PjSubName.Visible := True;
            Teg_PjSubName.Caption := m_sPjSubTitle;
            // 小切手情報
            Kog_PjSubCode.Visible := True;
            Kog_PjSubName.Visible := True;
            Kog_PjSubName.Caption := m_sPjSubTitle;
            // 相殺情報
            GridOffset.Bands[SOUSAIBANDS_PJSUBNAME].Visible := True;
            GridOffset.Bands[SOUSAIBANDS_PJSUBNAME].Caption := m_sPjSubTitle;

        end
        else
        begin
            // 支払方法
            GridPayWay.Bands[PAYWAYBANDS_PJSUBCODE].Visible := False;
            GridPayWay.Bands[PAYWAYBANDS_PJSUBNAME].Visible := False;
            // 方法(比率)
            Hou_H_PjSubCode.Visible := False;
            Hou_H_PjSubName.Visible := False;
            // 方法(定額)
            Hou_T_PjSubCode.Visible := False;
            Hou_T_PjSubName.Visible := False;
            // 優先支払詳細
			Shousai_PjSubCode.Visible := False;
			Shousai_PjSubName.Visible := False;
            // 振込情報
            Fri_PjSubCode.Visible := False;
            Fri_PjSubName.Visible := False;

            // 期日振込情報
            KFri_PjSubCode.Visible := False;
            KFri_PjSubName.Visible := False;
            // 手形情報
            Teg_PjSubCode.Visible := False;
            Teg_PjSubName.Visible := False;
            // 小切手情報
            Kog_PjSubCode.Visible := False;
            Kog_PjSubName.Visible := False;
            // 相殺情報
            GridOffset.Bands[SOUSAIBANDS_PJSUBNAME].Visible := False;
        end;
    end
    else
    begin
        // 基本情報
        GridKihon.Bands[KIHONBANDS_BUNKAIKBN].Visible   := True;
        GridKihon.Bands[KIHONBANDS_UKETORINAME].Visible := True;
        GridKihon.Bands[KIHONBANDS_BUNKAIPTN].Visible   := False;
        // 支払方法
        Tab.Items[TAB_PAYWAY].Visible                   := False;
        GridPayWay.Bands[PAYWAYBANDS_PRJCODE].Visible   := False;
        GridPayWay.Bands[PAYWAYBANDS_PRJNAME].Visible   := False;
        GridPayWay.Bands[PAYWAYBANDS_PJSUBCODE].Visible := False;
        GridPayWay.Bands[PAYWAYBANDS_PJSUBNAME].Visible := False;
        // 方法(比率)
        Hou_H_PrjCode.Visible   := False;
        Hou_H_PrjName.Visible   := False;
        Hou_H_PjSubCode.Visible := False;
        Hou_H_PjSubName.Visible := False;
//<172> Mod
//      Hou_H_PriPayWay.Visible := False;
//      Hou_H_PriPayWayName.Visible := False;
        Hou_H_PriPayWay.Visible		:= True;
        Hou_H_PriPayWayName.Visible := True;
//<172> Mod
        // 方法(定額)
        Hou_T_PrjCode.Visible   := False;
        Hou_T_PrjName.Visible   := False;
        Hou_T_PjSubCode.Visible := False;
        Hou_T_PjSubName.Visible := False;
//<172> Mod
//      Hou_T_PriPayWay.Visible := False;
//      Hou_T_PriPayWayName.Visible := False;
		Hou_T_PriPayWay.Visible		:= True;
		Hou_T_PriPayWayName.Visible := True;
//<172> Mod
        // 優先支払詳細
        Shousai_PrjCode.Visible   := False;
        Shousai_PrjName.Visible   := False;
        Shousai_PjSubCode.Visible := False;
        Shousai_PjSubName.Visible := False;
        // 振込情報
        Fri_PrjCode.Visible   := False;
        Fri_PrjName.Visible   := False;
        Fri_PjSubCode.Visible := False;
        Fri_PjSubName.Visible := False;
        // 期日振込情報
        KFri_PrjCode.Visible   := False;
        KFri_PrjName.Visible   := False;
        KFri_PjSubCode.Visible := False;
        KFri_PjSubName.Visible := False;
        // 手形情報
        Teg_PrjCode.Visible   := False;
        Teg_PrjName.Visible   := False;
        Teg_PjSubCode.Visible := False;
        Teg_PjSubName.Visible := False;
// <196> ADD-STR
        if (m_iErUseKbn = 0) then
        begin
            // 電子記録債権採用なし
            Teg_ERKbn.DisableEditor := True;
            Teg_ERKbn.ReadOnly      := True;
            Teg_ERKbn.TabStop       := False;
        end;
// <196> ADD-END
        // 小切手情報
        Kog_PrjCode.Visible   := False;
        Kog_PrjName.Visible   := False;
        Kog_PjSubCode.Visible := False;
        Kog_PjSubName.Visible := False;
        // 相殺情報
        PanelOffsetGrid.Width := 778;
        GridOffset.Bands[SOUSAIBANDS_PRJNAME].Visible   := False;
        GridOffset.Bands[SOUSAIBANDS_PJSUBNAME].Visible := False;
        MPanel24.Width  := 755;
        MPanel29.Width  := 751;
        MLabel5.Left    := 632;
        MLabel4.Left    := 504;
        MLabel3.Left    := 154;
        MLabel1.Left    := 133;
        QRShape8.Left   := 523;
        QRShape7.Left   := 403;
        QRShape6.Left   := 228;
        Edit01SeqNo.Left    := 131;
        Edit06TaxCode.Left  := 502;
        Edit07TaxRate.Left  := 502;
        Edit08OffsetPrice.Left  := 630;
        Edit06TaxCodeName.Left  := 524;
        Edit07TaxRateName.Left  := 524;
        Edit04HojCodeName.Left  := 404;
        Edit05HojCodeName.Left  := 404;
        Edit04HojCodeNum.Left   := 327;
        Edit04HojCodeFree.Left  := 327;
        Edit05HojCodeNum.Left   := 327;
        Edit05HojCodeFree.Left  := 327;
        Edit02KmkCodeName.Left  := 229;
        Edit03HojCodeName.Left  := 229;
        Edit02KmkCode.Left      := 152;
        Edit03HojCodeFree.Left  := 152;
        Edit03HojCodeNum.Left   := 152;
        MLabel6.Visible         := False;
        Edit09PrjName.Visible   := False;
        Edit09PrjCodeFree.Visible   := False;
        Edit09PrjCodeNum.Visible    := False;
    end;
// <142> 2007/02/20 H.Kawato Add End

	m_nCurItemDivision := TREE_SYSTEM;

	m_bEndFlg	  := False;
	m_bChangeFlag := False;
	m_ThroughTab  := False;
	m_FusenFlg	  := False;

	// ﾃﾞｰﾀ読込ﾌﾗｸﾞの初期処理
	m_DataLoadFlg.Hiritsu  := False;	// 支払方法(比率)
	m_DataLoadFlg.Teigaku  := False;	// 支払方法(定額)
	m_DataLoadFlg.Furi     := False;	// 振込
//<GA001>
	m_DataLoadFlg.FuriGD   := False;	// 電信送金
	m_DataLoadFlg.FuriGT   := False;	// 為替手形
	m_DataLoadFlg.FuriGK   := False;	// 送金小切手
//<GA001>
	m_DataLoadFlg.DateFuri := False;	// 期日指定振込
	m_DataLoadFlg.Draft    := False;	// 手形
	m_DataLoadFlg.Check    := False;	// 小切手
	m_DataLoadFlg.Offset   := False;	// 相殺
	m_DataLoadFlg.Other    := False;	// その他
	m_DataLoadFlg.Nayose   := False;	// 名寄せ
//<GA001>ST
	m_DataLoadFlg.KhnsetG   := False;	// 可変項目
//<GA001>ED

	GridKihon.FocusedColumn  := 3;      // <050>
//<GA001>ST
	GridKihonG.FocusedColumn  := 3;
//<GA001>
	GridReal .FocusedColumn  := 1;
	GridTotal.FocusedColumn  := 1;
// <142> 2007/02/20 H.Kawato Add Start
    GridPayWay.FocusedField  := GridPayWay_GCode.Field;
    GridShousai.FocusedField := Shousai_Hou1_BaseKingaku.Field;
// <142> 2007/02/20 H.Kawato Add End

// <181> ADD-STR
	for iLoop := Low(m_nHojyoNCode) to High(m_nHojyoNCode) do
		m_nHojyoNCode[iLoop]	:= 0;
// <181> ADD-END

// <196> ADD-STR
	for iLoop := Low(m_arFreeInfo) to High(m_arFreeInfo) do
		m_arFreeInfo[iLoop]	:= '';
// <196> ADD-END

	if	(not fnInitializeScreenStandard ()) then
	begin
		if (not fDiscontinue) then
			PostMessage (Self.Handle, WM_DISCONTINUE, 0, 0);							// 処理中止
	end
	else
	begin
	// LookUpで表示する名称ｾｯﾄ

		fnSetLookUpDspInfo      ();

		fnInitializeScreen	    ();
// <142> 2007/02/20 H.Kawato Add
        if (m_iProAdoptKbn = 1) then
        begin
            fnInitializePrjCode	();

            if (m_iSubAdoptKbn = 1) then
                fnInitializePjSubCode ();
        end;
// <142> 2007/02/20 H.Kawato Add
		fnChangeConditionGrid   ();

	    fnChkPayPtnInfo         ();
		fnGetRealInfo           ();     // 実在情報取得
		fnGetTotalInfo          ();     // 合計情報取得
        fnGetKihonInfo          ();     // 基本情報取得 // <050>
//<GA001>ST
    ////////////////////
    //外貨基本情報取得//
    ////////////////////
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
        fnGetKihonInfoG          ();    // 外貨基本情報取得
    end;
//<GA001>ED

		MemPayRatio.Open;
		MemPayFixed.Open;
		MemFuri.Open;
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
		MemFuri_GD.Open;
		MemFuri_GT.Open;
		MemFuri_GK.Open;
    end;
//<GA001>ED

		MemFuriDate.Open;
		MemDraft.Open;
		MemCheck.Open;
		MemOffset.Open;
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
		MemKhnset_G.Open;
//<GA001>ED
		MemOther.Open;
		MemNayose.Open;
	end;

//<GA001>ST
    if m_iGaikaKbn = 0 then         //外貨採用区分
    begin
        Tab.Items[TAB_KIHON_G].Visible     := False;
        Tab.Items[TAB_TRANSFER_GD].Visible := False;
        Tab.Items[TAB_TRANSFER_GT].Visible := False;
        Tab.Items[TAB_TRANSFER_GK].Visible := False;
        Tab.Items[TAB_KHNSET_G].Visible    := False;
    end;
//<GA001>ED


    Tab.Items[TAB_REAL]     .Visible := False;  // <050>
    Tab.Items[TAB_TOTAL]    .Visible := False;  // <050>
    Tab.Items[TAB_OTHER]    .Visible := False;  // <050>
    Tab.Items[TAB_NAYOSEOYA].Visible := False;  // <050>

    // 共通ｴｸｽﾌﾟﾛｰﾗの初期化
    uvExpOpenSW := FALSE;
    if fnJNTExpInit(Self,m_pRec) = 0 then
        uvExpOpenSW := TRUE
    else
		MjsMessageBox(Self,'ｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10
					+ 'ｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);


// <PRN> -----------Add↓-----------------

    // MQueryの構築
    DmqPrint    :=  TMQuery.Create (self);
    // DBとMQueryの接続
    m_cDataModule.SetDBInfoToQuery(m_cDBSelect,DmqPrint );


    { ﾛｰﾄﾞﾊﾟｯｹｰｼﾞ処理}
	try
// <141> 2006/08/17 H.Kawato Mod
//		lvHandle    :=  LoadPackage(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004007L.BPL');
// <LPH> MOD-STR
//		m_RepHandle    :=  LoadPackage(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004007L.BPL');
		m_RepHandle    :=  LoadPackageHelper(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004007L.BPL');
// <LPH> MOD-END
// <141> 2006/08/17 H.Kawato Mod

// <141> 2006/08/17 H.Kawato Mod
//        if ( lvHandle = 0 ) then
        if ( m_RepHandle = 0 ) then
// <141> 2006/08/17 H.Kawato Mod
            Abort;
	except
		MjsMessageBox(Self, 'JNTCRP004007LのLoadPackageに失敗しました。' + #13 + '処理終了します。' , mjError, mjDefOk);
		Exit;
	end;

    // Export関数ｱﾄﾞﾚｽの取得
// <141> 2006/08/17 H.Kawato Mod
//    PrintAppEntry := GetProcAddress(lvHandle,'PrintAppEntry');
    PrintAppEntry := GetProcAddress(m_RepHandle,'PrintAppEntry');
// <141> 2006/08/17 H.Kawato Mod

    if ( @PrintAppEntry = nil ) then
    begin
	    MjsMessageBox(self, 'PrintAppEntry関数ｱﾄﾞﾚｽの取得に失敗しました。', mjError, mjDefOk);
// <141> 2006/08/17 H.Kawato Mod
//    	UnloadPackage( lvHandle );
// <LPH> MOD-STR
//    	UnloadPackage( m_RepHandle );
    	UnloadPackageHelper( m_RepHandle );
// <LPH> MOD-END
// <141> 2006/08/17 H.Kawato Mod
    end;

    { 印刷用ﾓｼﾞｭｰﾙを生成 }
    try
        with PrtParam do
		begin
            Para		    :=  uvHani;
			TargetQry	    :=  nil;
            TargetMD        :=  nil;
			CorpSys		    :=  uvSelSys;
            // *** 汎用変数 *** //
            TargetParam	    :=  nil;
	    	TargetStr	    :=  '';
    		TargetInt	    :=  0;
            // *** 汎用変数 *** //
            iAPP_HDL_REC    :=  100;
		end;
        ArrHdl[0] := @m_JNTAuthority;   // <AUT> ADD
		iRet := PrintAppEntry(Self,m_Base_pRec,0,PrtParam,ArrHdl);
		if ( iRet = 0 ) then
			Abort;
	except
		MjsMessageBox(Self,'印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙの作成に失敗しました。'#13#10#13#10
				 + '印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙは使用できません。', mjError, mjDefOk);
	end;

    // 帳票用ﾊﾟﾗﾒｰﾀ初期化
    gfnHaniInit(Self,
                m_Base_pRec,
                m_cDataModule,
                m_cComArea,
                m_cDBSelect,
                'JNTCRP004007',
                uvHani,
                uvSelSys);

// <PRN> -----------Add↑-----------------
// <194> ADD-STR
    // 共通部門、非課税部門を取得
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode, BunCode' +
                   '  FROM HojyoMA' +
		           ' WHERE MasterKbn = 41' +    // 41.部門
                   '   AND SumKbn = 0' +        // 0.実在
                   '   AND BunCode IN (1, 2)' + // 1.共通部門、2.非課税部門
                   '   AND RDelKbn = 0');       // 0.正規レコード

		Open ();

		while (not EOF) do
		begin
            iLoop := Length(m_rCommonBmn);
            SetLength(m_rCommonBmn, iLoop + 1);

            m_rCommonBmn[iLoop].NCode   := FieldByName ('NCode').AsCurrency;
            m_rCommonBmn[iLoop].BunCode := FieldByName ('BunCode').AsInteger;

			Next;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
// <194> ADD-END

// <TX26> ADD-STR
	// 消費税情報取得
    m_TaxRateInfo := TMASTaxRateInfo.Create(m_pRec, m_cDBSelect);
// <#TAX10> ADD-STR
	m_TaxRateInfo.SortType			:=	SORT_ASC;					//下位の処理で並び変えるため、昇順で取得
	m_TaxRateInfo.AddReducedExpress	:=	REDUCEDEXPRESS_REAR;
// <#TAX10> ADD-END
    m_TaxRateInfo.Initialize();

    with Edit07TaxRate.SelectItems do
    begin
        Clear;
        Add('0: 標準税率');
        for iLoop := m_TaxRateInfo.FTaxRateList_All.Count - 1 downto 1 do
        begin
            if m_TaxRateInfo.IsExistRateCD(m_TaxRateInfo.FTaxRateList_All.Objects[iLoop].RateCD) then
            begin
                Add(IntToStr(m_TaxRateInfo.FTaxRateList_All.Objects[iLoop].RateCD) + ': ' + m_TaxRateInfo.FTaxRateList_All.Objects[iLoop].TaxName);
            end;
        end;
    end;
// <TX26> ADD-END
// <#TAX10> ADD-STR
   	m_TaxRateInfoFront := TMASTaxRateInfo.Create(m_pRec, m_cDBSelect, m_cDBCommon);	// 消費税率情報（軽減税率含む）
	m_TaxRateInfoFront.SortType				:=	SORT_ASC;
	m_TaxRateInfoFront.AddReducedExpress	:=	REDUCEDEXPRESS_NONE;
	m_TaxRateInfoFront.Initialize;
// <#TAX10> ADD-END
end;

//************************************************************************
//*		Component	:	TJNTCRP004007f ( TForm )
//*
//*		Event		:	OnActivate
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.FormActivate (Sender: TObject);
var
	cAppParam: TAppParam;

begin
	cAppParam.iAction		:= ACTID_ACTIVEEND;
	cAppParam.pRecord		:= Pointer (m_pRec);
	cAppParam.pActionParam	:= nil;
	TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppParam);
end;


//************************************************************************
//*		Component	:	TJNTCRP004007f ( TForm )
//*
//*		Event		:	OnCloseQuery
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.FormCloseQuery (Sender: TObject; var CanClose: Boolean);
var
	stMessageRec: TMJSMsgRec;
begin
	m_bEndFlg := True;

    //	if	(m_cPreview.IsPreView ()) then
    if ( uvHani.mjspre.IsPreView = TRUE ) then
	begin
		m_cComArea.m_MsgStd.GetMsg (stMessageRec, 10040, 2);

		MJSMessageBoxEx (Self,stMessageRec.sMsg, stMessageRec.sTitle, stMessageRec.icontype,
												stMessageRec.btntype, stMessageRec.btndef, stMessageRec.LogType);

		CanClose	:= FALSE;
	end;

	// 名寄せ親ﾁｪｯｸ
	m_cDataModule.BeginTran (m_cDBSelect);										// ﾄﾗﾝｻﾞｸｼｮﾝの開始
	if fnNayoseOyaCheck() = False then
	begin
		m_cDataModule.Rollback(m_cDBSelect);									// ﾛｰﾙﾊﾞｯｸ(破棄)
		exit;
	end;
	m_cDataModule.Commit (m_cDBSelect);											// ｺﾐｯﾄ(反映)

//    B_Print     .Enabled    :=  True; // <103>
end;


//************************************************************************
//*		Component	:	TJNTCRP004007f ( TForm )
//*
//*		Event		:	OnClose
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.FormClose (Sender: TObject; var Action: TCloseAction);
var
	cAppPrm			:   TAppParam;
    nItems			:   Integer;
	pItemRec		:   PTreeViewRec;
// <120>	dqTreeWork		:   TMQuery;
// <120>	cMessageRec		:   TMJSMsgRec;
// <120>    cDlgMasTree2    :   TJNTMasTreee2Dlgf;
// <120>	arMasterDivision:   Array of Integer;
begin

    //--<001>
    B_Print.OnClick:=nil;
    m_CmpList2.Clear;

    // 共通ｴｸｽﾌﾟﾛｰﾗの開放
    if ( uvExpOpenSW = TRUE ) then
        fnJNTExpFree();
    // 印刷用ｸｴﾘｰの開放<PRN>
    DmqPrint.Close();
    DmqPrint.Free();

{
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_MASTERINFO   , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_HOJYOMA      , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_CSINFO       , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_HOJYOTREE    , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYPTNINFO   , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYPTNDTL    , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYDETAILINFO, MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYNAYOSEINFO, MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYOFFSETINFO, MASTER_CUSTOMER, 0, 0);

//  共通ｼｽﾃﾑ開放
    m_cJNTArea.Free;

	if ( m_nHojyoTree = 1 ) then
	begin
		MailHisUpdate(m_cDBSelect, m_cDataModule, TABLE_HOJYOTREE, MASTER_CUSTOMER, 0, 1);

		SetLength(arMasterDivision, 1);

		arMasterDivision[0]	:= MASTER_CUSTOMER;

		cDlgMasTree2 := TMasTreee2Dlgf.Create (Self);

		if (cDlgMasTree2.ExecTree2(rcCOMMONAREA(m_pRec^.m_pCommonArea^).sysRoot,
									m_cDataModule, m_cComArea.m_iCopNo, arMasterDivision, dqTreeWork) < 0) then
		begin
			if ( dqTreeWork <> nil ) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (cMessageRec, dqTreeWork);
				MJSMessageBoxEx(cMessageRec.sMsg, cMessageRec.sTitle,
											cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, FALSE);
				dqTreeWork.Free();
			end
			else
				MJSMessageBoxEx(cMessageRec.sMsg, cMessageRec.sTitle,
											cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, FALSE);
		end;
		cDlgMasTree2.Close ();
		cDlgMasTree2.Free  ();
	end;
} // <100>
	Action	:= caFree;

	fnCMNPostFree ();

//<100>	m_cPayAccExp.Term ();

	for nItems := 1 to CmnTreeView.Items.Count do
	begin
		pItemRec := CmnTreeView.Items[nItems-1].Data;
		Dispose(pItemRec);

		CmnTreeView.Items[nItems-1].Data := nil;
	end;

(*
	// 排他情報ﾘｾｯﾄ
	if ( m_cExcept <> nil ) then
	begin
		m_cExcept.ResetTerm;
		m_cExcept.Free;
	end;
*) // <120>

	m_Qe.Close;
	m_Qe.Free;


	m_cDataModule.CTLDBClose (m_cDBCommon);
	m_cDataModule.COPDBClose (m_cDBSelect);

	m_pRec^.m_iDelete		:= 1;

	cAppPrm.iAction			:= ACTID_FORMCLOSEEND;      // 呼び出し区分設定
	cAppPrm.pRecord			:= Pointer (m_pRec);		// 管理構造体ﾎﾟｲﾝﾀ設定
	cAppPrm.pActionParam	:= nil;				  		// 予備ﾎﾟｲﾝﾀ設定

	TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppPrm);

end;

//************************************************************************
//*		Component		:	TJNTCRP004007f ( TForm )
//*
//*		Event			:	OnShow
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.FormShow (Sender: TObject);
begin
	JNTMasSetCaption(m_pRec);
	MJSBtnVisible(TJNTCRP004007f(Self),TRUE);

	if ( uvHani.mjspre.IsPreView = TRUE ) then
    begin
	    uvHani.mjspre.Show;
    end
	else
    begin
        if ( m_cACControl <> CmnTreeView ) then
    		m_cACControl.SetFocus();
    end;
end;

//************************************************************************
//*		Component	:	TJNTCRP004007f ( TForm )
//*
//*		Event		:	OnHide
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure	TJNTCRP004007f.FormHide (Sender: TObject);
begin
	MJSBtnVisible (TJNTCRP004007f (Self), FALSE);

	if ( uvHani.mjspre.IsPreView = TRUE ) then
	    uvHani.mjspre.Hide();
end;

//**********************************************************************
//*		Proccess	:   初期処理(手続き)
//*		Parameter	:
//*		Return		:	なし
//*		History		:
//**********************************************************************
function	TJNTCRP004007f.fnInitializeProcedure (): Boolean;
var
    dqMasterData    :   TMQuery;
    strChargeName   :   String;
// <120>	cDBControl	    :   TDatabase;
// <120>	dqControl	    :   TMQuery;
// <120>	nChargeCode     :   Integer;
// <120>	fSelected	    :   Boolean;
begin
// <120>	nChargeCode		:=  0;
// <120>	fSelected		:= FALSE;
    strChargeName   :=	'';

// <116>↓復帰
//{<100>

	dqMasterData	:= TMQuery.Create (Application);									// MQueryの構築

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続


{	if	(rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD <> -1) then						// 共通ﾒﾓﾘﾎﾟｲﾝﾀの担当者内部ｺｰﾄﾞ
	begin
		cDBControl	:= m_cDataModule.CTLDBOpen (0);

		if	(cDBControl = nil) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;


		dqControl	:= TMQuery.Create (Application);		 							// MQueryの構築

		m_cDataModule.SetDBInfoToQuery (cDBControl, dqControl);							// DBとMQueryの接続
		with (dqControl) do
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT Name, TantoGCD FROM MOS_OFFICE_STAFF WHERE TantoNCD = :nInCode');

			ParamByName ('nInCode').AsInteger	:= rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD;

			Open ();

			if	(not EOF) then
			begin
				nChargeCode		:= FieldByName ('TantoGCD').AsInteger;
				strChargeName	:= FieldByName ('Name'    ).AsString;
			end;
		end;

		dqControl.Close ();
		dqControl.Free  ();

		fSelected	:= TRUE;

	end;
}
	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('CALL MP200010 (0');

                                            // <116>ﾊﾟﾗﾒｰﾀは内部ｺｰﾄﾞだけ
//		if	(fSelected) then
//			SQL.Add (Format (',%d,''%s''', [nChargeCode, strChargeName]));
        SQL.Add   (', :nInCode)');
		ParamByName ('nInCode').AsFloat	:= rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD;

		SQL.Add (')');

		if	(not ExecSQL ()) then
			ShowMessage ('ｴﾗｰｺｰﾄﾞ ' + IntToStr (m_cComArea.m_MsgStd.GetDBCode (dqMasterData)) +
													'　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
//}
// <116>↑
	Result	:= TRUE;
end;

//**********************************************************************
//*		Proccess	:	プロパティのセット
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetProperty();
begin
//CMN
	// 基本情報
	PanelKihon.Align 	:= alClient;
    GridKihon.Align 	:= alClient;
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	// 基本情報
    	PanelKihon_G.Align 	:= alClient;
        GridKihonG.Align 	:= alClient;
    end;
//<GA001>ED
	// 実在情報
	PanelReal.Align 	:= alClient;
	GridReal.Align 		:= alClient;
	// 合計情報
	PanelTotal.Align 	:= alClient;
	GridTotal.Align 	:= alClient;
// <142> 2007/02/20 H.Kawato Add
	// 支払方法
	PanelPayWay.Align   := alClient;
	GridPayWay.Align    := alClient;
	// 優先支払詳細
	PanelShousai.Align  := alClient;
	GridShousai.Align   := alClient;
// <142> 2007/02/20 H.Kawato Add
	// 支払方法(比率)
	PanelPayRatio.Align := alClient;
	GridPayRatio.Align  := alClient;
	// 支払方法(定額)
	PanelPayFixed.Align := alClient;
	GridPayFixed.Align  := alClient;
	// 振込情報
	PanelFurikomi.Align := alClient;
	GridFurikomi.Align  := alClient;
	// 期日指定振込情報
	PanelFuriDate.Align := alClient;
	GridFuriDate.Align  := alClient;
	// 手形情報
	PanelDraft.Align 	:= alClient;
	GridDraft.Align  	:= alClient;
	// 小切手情報
	PanelCheck.Align 	:= alClient;
	GridCheck.Align  	:= alClient;
	// 相殺情報
	PanelOffset.Align 	:= alClient;
	PanelOffsetGrid.Top := 4;
	PanelOffsetGrid.Left:= 4;
	// その他情報
	PanelOther.Align 	:= alClient;
	GridOther.Align  	:= alClient;
	// 名寄せ情報
	PanelNayoseGrid.Align:= alClient;
	PanelNayose.Align	:= alClient;
	GridNayose.Enabled  := False;

//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	// 電信送金
    	PanelFurikomi_GD.Align  := alClient;
    	GridFurikomiGD.Align    := alClient;
    	// 為替手形
    	PanelFurikomi_GT.Align  := alClient;
    	GridFurikomiGT.Align    := alClient;
    	// 送金小切手
    	PanelFurikomi_GK.Align  := alClient;
    	GridFurikomiGK.Align    := alClient;
    	// 可変項目
    	PanelKhnset_G.Align   := alClient;
    	PanelKhnset_GGrid.Top := 4;
    	PanelKhnset_GGrid.Left:= 4;
    end;
//<GA001>ED

end;

//**********************************************************************
//*		Proccess	:	初期処理(必要情報取得)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure	TJNTCRP004007f.fnInitializeComInformation ();
var
	dqMasterInfo    :   TMQuery;
// <120>	cMessageRec :   TMJSMsgRec;
begin
	m_nDateFormatDivision	:= 0;														// 和暦/西暦区分
	m_nMailAdoption			:= 0;														// ﾒｰﾙ会計処理区分
	m_nCompDivision			:= 0;														// 公益法人区分
	m_strValidCharacters	:= '';														// 使用可能ｺｰﾄﾞ
	m_nTaxInfoAccDivision	:= 0;														// 会計処理区分

	// ｸﾞﾛｰﾊﾞﾙのQuery
	m_Qe := TMQuery.Create (Self);												// MQueryの構築
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, m_Qe);									// DBとMQueryの接続


	dqMasterInfo := TMQuery.Create (Self);										// MQueryの構築
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);							// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
//<100>		SQL.Add   ('SELECT YearKbn, ComKbn3, ComKbn4, DTName7 FROM DTMAIN');
        SQL.Add('SELECT YearKbn, ComKbn3, ComKbn4, DTName7 FROM DTMAIN, DTMAIN_MAS');

		Open ();

		if	(not EOF) then
		begin
			m_nDateFormatDivision	:= FieldByName ('YearKbn').AsInteger;				// 和暦/西暦区分
			m_nMailAdoption			:= FieldByName ('ComKbn3').AsInteger;				// ﾒｰﾙ会計処理区分
			m_nCompDivision			:= FieldByName ('ComKbn4').AsInteger;				// 公益法人区分
			m_strValidCharacters	:= FieldbyName ('DTName7').AsString;				// 使用可能ｺｰﾄﾞ
		end;

		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT AccProKbn FROM TaxInfo');

		Open ();

		if	(not EOF) then
			m_nTaxInfoAccDivision	:= FieldByname ('AccProKbn').AsInteger;				// 会計処理区分

		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode FROM KmkInfo WHERE SpeCode = 10301 AND MasterKbn = 1 AND SumKbn = 0');

		Open ();

		if	(not EOF) then
			m_nKmkCompound01	:= FieldByName ('NCode').AsInteger					// 複合科目ｺｰﾄﾞ
		else
			m_nKmkCompound01	:= 0;

		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode FROM KmkInfo WHERE SpeCode = 10302 AND MasterKbn = 1 AND SumKbn = 0');

		Open ();

		if	(not EOF) then
			m_nKmkCompound02	:= FieldByName ('NCode').AsInteger					// 資金複合科目ｺｰﾄﾞ
		else
			m_nKmkCompound02	:= 0;
	end;

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

{<100>
	case (MailEntCheck (m_cDBSelect, m_cDataModule, m_cComArea, MASTER_CUSTOMER, 1)) of
		DISPOSE_SETTLE    :	m_nReferMode	:= REFER;									// 決算確定の為参照のみ
		DISPOSE_MAILNOTUSE:	m_nReferMode	:= NORMAL;									// ﾒｰﾙ未採用の為通常処理
		DISPOSE_USUALLY   :	m_nReferMode	:= NORMAL;									// 通常処理
		DISPOSE_BASIC     :	m_nReferMode	:= BASICONLY;								// 基本のみ設定可能
		DISPOSE_REFER     :	m_nReferMode	:= REFER;									// 参照のみ
	end;
}
//	m_nReferMode	:= NORMAL;      // 通常処理<100>


    fnGetGrants();


{ <100>
	// 排他制御
	if m_nReferMode <> REFER then	// 参照以外
	begin
		// 排他制御ﾁｪｯｸ
		if fnExcept = 99 then
		begin
			m_cComArea.m_MsgStd.GetMsg (cMessageRec, 10, 113);

			MJSMessageBoxEx (cMessageRec.sMsg, cMessageRec.sTitle, cMessageRec.icontype,
													cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);
			m_nReferMode := REFER
		end;
	end;
}
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
			JNTMasDateCtrl.JNTMasSetFormDateIni(TJNTCRP004007f(self), m_nDateFormatDivision);	// <#NGEN>

        	if m_nDateFormatDivision = 0 then		//和暦
    		begin
    			//和暦を設定
                //グリッド
//                FriGD_SendDate.DateEditFormat	    := FriGD_HHMMDD.DateEditFormat; 		// <#NGEN>
    	    	//MemData
                MemFuri_GDSendDate.DisplayFormat	:= 'g ee/mm/dd';

    		    //和暦を設定
                //グリッド
//                FriGK_SendDate.DateEditFormat	    := FriGK_HHMMDD.DateEditFormat; 		// <#NGEN>
    			//MemData
                MemFuri_GKSendDate.DisplayFormat	:= 'g ee/mm/dd';
    		end
    		else
    		begin
    			//西暦を設定
                //グリッド
//                FriGD_SendDate.DateEditFormat	    := FriGD_YYMMDD.DateEditFormat; 		// <#NGEN>
				//MemData
                MemFuri_GDSendDate.DisplayFormat	:= 'yyyy/mm/dd';


				//西暦を設定
                //グリッド
//                FriGK_SendDate.DateEditFormat	    := FriGK_YYMMDD.DateEditFormat; 		// <#NGEN>
				//MemData
                MemFuri_GKSendDate.DisplayFormat	:= 'yyyy/mm/dd';
			end;
        end;
//<GA001>ED

end;

//**********************************************************************
//*		Proccess	:	LookUpで表示する名称ｾｯﾄ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetLookUpDspInfo();
var
	iLoop	: Integer;
	iNo		: Integer;
begin
    iNo:=0;

	// 分解方法
	MemApart.Close;
	MemApart.Open;
	for	iLoop := 0 to Length (_BunkaiItems) - 1 do
	begin
		MemApart.Append();
// <190> Mod start
{
		MemApart.FieldByName('BunkaiNo'  ).AsInteger := iLoop;
		MemApart.FieldByName('BunkaiName').AsString  := _BunkaiItems[iLoop];
}
		MemApart.FieldByName('Kbn' ).AsInteger := iLoop;
		MemApart.FieldByName('Name').AsString  := _BunkaiItems[iLoop];
// <190>
		MemApart.Post();
	end;

	// 支払方法
	MemHou.Close;
	MemHou.Open;
	for	iLoop := 0 to Length (_PayWayItems) - 1 do
	begin
		MemHou.Append();
// <190> Mod start
{
		MemHou.FieldByName('HouNo'  ).AsInteger := iLoop;
		MemHou.FieldByName('HouName').AsString  := _PayWayItems[iLoop];
}
		MemHou.FieldByName('Kbn' ).AsInteger := iLoop;
		MemHou.FieldByName('Name').AsString  := _PayWayItems[iLoop];
// <190>
		MemHou.Post();
	end;

	// 端数処理方法
	MemHasu.Close;
	MemHasu.Open;
	for	iLoop := 0 to Length (_FractionItems) - 1 do
	begin
		MemHasu.Append();
// <190> Mod start
{
		MemHasu.FieldByName('HasuNo'  ).AsInteger := iLoop;
		MemHasu.FieldByName('HasuName').AsString  := _FractionItems[iLoop];
}
		MemHasu.FieldByName('Kbn' ).AsInteger := iLoop;
		MemHasu.FieldByName('Name').AsString  := _FractionItems[iLoop];
// <190> Mod end
		MemHasu.Post();
	end;

	// 預金種別
	MemAcc.Close;
	MemAcc.Open;
	for	iLoop := 0 to Length (_AccKbnItems) - 1 do
	begin
		case iLoop of
			0: iNo := 1;
			1: iNo := 2;
			2: iNo := 4;
			3: iNo := 9;
		end;
		MemAcc.Append();
// <190> Mod start
{
		MemAcc.FieldByName('A_No'  ).AsInteger := iNo;
		MemAcc.FieldByName('A_Name').AsString  := _AccKbnItems[iLoop];
}
		MemAcc.FieldByName('Kbn' ).AsInteger := iNo;
		MemAcc.FieldByName('Name').AsString  := _AccKbnItems[iLoop];
// <190> Mod end
		MemAcc.Post();
	end;

	// 手数料負担区分
	MemCharge.Close;
	MemCharge.Open;
	for	iLoop := 0 to Length (_ChargeFItems) - 1 do
	begin
		MemCharge.Append();
// <190> Mod start
{
		MemCharge.FieldByName('F_No'  ).AsInteger := iLoop;
		MemCharge.FieldByName('F_Name').AsString  := _ChargeFItems[iLoop];
}
		MemCharge.FieldByName('Kbn' ).AsInteger := iLoop;
		MemCharge.FieldByName('Name').AsString  := _ChargeFItems[iLoop];

// <190> Mod end
		MemCharge.Post();
	end;

//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	// 外貨手数料負担区分
    	MemChargeG.Close;
    	MemChargeG.Open;
    	for	iLoop := 0 to Length (_ChargeFItemsG) - 1 do
    	begin
    		MemChargeG.Append();
    		MemChargeG.FieldByName('Kbn' ).AsInteger := iLoop +1;
    		MemChargeG.FieldByName('Name').AsString  := _ChargeFItemsG[iLoop];
    		MemChargeG.Post();
    	end;
    end;
//<GA001>ED


	// 手数料計算区分
	MemChargeKbn.Close;
	MemChargeKbn.Open;
	for	iLoop := 0 to Length (_ChargeKItems) - 1 do
	begin
		MemChargeKbn.Append();
// <190> Mod start
{
		MemChargeKbn.FieldByName('K_No'  ).AsInteger := iLoop;
		MemChargeKbn.FieldByName('K_Name').AsString  := _ChargeKItems[iLoop];
}
		MemChargeKbn.FieldByName('Kbn' ).AsInteger := iLoop;
		MemChargeKbn.FieldByName('Name').AsString  := _ChargeKItems[iLoop];
// <190> Mod end
		MemChargeKbn.Post();
	end;
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	// 手数料計算区分
    	MemChargeKbnG.Close;
    	MemChargeKbnG.Open;
    	for	iLoop := 0 to Length (_ChargeKItemsG) - 1 do
    	begin
    		MemChargeKbnG.Append();
        	MemChargeKbnG.FieldByName('Kbn' ).AsInteger := iLoop;
    		MemChargeKbnG.FieldByName('Name').AsString  := _ChargeKItemsG[iLoop];
    		MemChargeKbnG.Post();
	    end;
    end;
//<GA001>ED



	// 振込方法
	MemTrans.Close;
	MemTrans.Open;
	for	iLoop := 0 to Length (_TransKbnItems) - 1 do
	begin
		MemTrans.Append();
// <190> Mod start
{
		MemTrans.FieldByName('T_No'  ).AsInteger := iLoop;
		MemTrans.FieldByName('T_Name').AsString  := _TransKbnItems[iLoop];
}
		MemTrans.FieldByName('Kbn' ).AsInteger := iLoop;
		MemTrans.FieldByName('Name').AsString  := _TransKbnItems[iLoop];
// <190> Mod end
		MemTrans.Post();
	end;

	// FB区分
	MemFBSet.Close;
	MemFBSet.Open;
	for	iLoop := 0 to Length (_FBSetItems) - 1 do
	begin
		MemFBSet.Append();
// <190> Mod start
{
		MemFBSet.FieldByName('S_No'  ).AsInteger := iLoop;
		MemFBSet.FieldByName('S_Name').AsString  := _FBSetItems[iLoop];
}
		MemFBSet.FieldByName('Kbn' ).AsInteger := iLoop;
		MemFBSet.FieldByName('Name').AsString  := _FBSetItems[iLoop];
// <190> Mod end
		MemFBSet.Post();
	end;

	// 郵送区分
	MemYusoKbn.Close;
	MemYusoKbn.Open;
	for	iLoop := 0 to Length (_YusoKbnItems) - 1 do
	begin
		MemYusoKbn.Append();
// <190> Mod start
{
		MemYusoKbn.FieldByName('DspNo'  ).AsInteger := iLoop;
		MemYusoKbn.FieldByName('DspName').AsString  := _YusoKbnItems[iLoop];
}
		MemYusoKbn.FieldByName('Kbn' ).AsInteger := iLoop;
		MemYusoKbn.FieldByName('Name').AsString  := _YusoKbnItems[iLoop];
// <190> Mod end
		MemYusoKbn.Post();
	end;

	// 郵送料負担区分
	MemYusoFutan.Close;
	MemYusoFutan.Open;
	for	iLoop := 0 to Length (_YusoFutanItems) - 1 do
	begin
		MemYusoFutan.Append();
// <190> Mod start
{
		MemYusoFutan.FieldByName('DspNo'  ).AsInteger := iLoop;
		MemYusoFutan.FieldByName('DspName').AsString  := _YusoFutanItems[iLoop];
}
		MemYusoFutan.FieldByName('Kbn' ).AsInteger := iLoop;
		MemYusoFutan.FieldByName('Name').AsString  := _YusoFutanItems[iLoop];
// <190> Mod end
		MemYusoFutan.Post();
	end;

// <196> ADD-STR
	// 電子債権採用区分
	MemERKbn.Close;
	MemERKbn.Open;
	for	iLoop := 0 to Length (_ERKbnItems) - 1 do
	begin
		MemERKbn.Append();
		MemERKbn.FieldByName('Kbn' ).AsInteger := iLoop;
		MemERKbn.FieldByName('Name').AsString  := _ERKbnItems[iLoop];
		MemERKbn.Post();
	end;

	// 手数料負担区分
	MemCharge2.Close;
	MemCharge2.Open;
	for	iLoop := 1 to Length (_ChargeFItems) - 1 do
	begin
		MemCharge2.Append();
		MemCharge2.FieldByName('Kbn' ).AsInteger := iLoop;
		MemCharge2.FieldByName('Name').AsString  := _ChargeFItems[iLoop];
		MemCharge2.Post();
	end;
// <196> ADD-END


//<203>ST
	// 手数料計算区分
	MemChargeKbn2.Close;
	MemChargeKbn2.Open;
	for	iLoop := 0 to Length (_ChargeKItemsD) - 1 do
	begin
		MemChargeKbn2.Append();
		MemChargeKbn2.FieldByName('Kbn' ).AsInteger := iLoop;
		MemChargeKbn2.FieldByName('Name').AsString  := _ChargeKItemsD[iLoop];
		MemChargeKbn2.Post();
	end;
//<203>ED

	// 敬称区分
	MemTitle.Close;
	MemTitle.Open;
	for	iLoop := 0 to Length (_TitleKbnItems) - 1 do
	begin
		MemTitle.Append();
// <190> Mod start
{
		MemTitle.FieldByName('DspNo'  ).AsInteger := iLoop;
		MemTitle.FieldByName('DspName').AsString  := _TitleKbnItems[iLoop];
}
		MemTitle.FieldByName('Kbn' ).AsInteger := iLoop;
		MemTitle.FieldByName('Name').AsString  := _TitleKbnItems[iLoop];
// <190> Mod end
		MemTitle.Post();
	end;

// <142> 2007/02/20 H.Kawato Del Start
{
	// 通知書
	MemLetter.Close;
	MemLetter.Open;
	for	iLoop := 0 to Length (_LetterKbnItems) - 1 do
	begin
		MemLetter.Append();
		MemLetter.FieldByName('DspNo'  ).AsInteger := iLoop;
		MemLetter.FieldByName('DspName').AsString  := _LetterKbnItems[iLoop];
		MemLetter.Post();
	end;
}
// <142> 2007/02/20 H.Kawato Del End

// <142> 2007/02/20 H.Kawato Mod Start
{
	// 分解パターン
	MemBunkaiPtn.Close;
	MemBunkaiPtn.Open;
	for	iLoop := 0 to Length (_BunkaiPtnItems) - 1 do
	begin
		MemBunkaiPtn.Append();
		MemBunkaiPtn.FieldByName('BunkaiPtn'    ).AsInteger := iLoop;
		MemBunkaiPtn.FieldByName('BunkaiPtnName').AsString  := _BunkaiPtnItems[iLoop];
		MemBunkaiPtn.Post();
	end;
}

//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	// 外貨区分
    	MemGai.Close;
    	MemGai.Open;
    	for	iLoop := 0 to Length (_GaikaItems) - 1 do
    	begin
    		MemGai.Append();
    		MemGai.FieldByName('Kbn' ).AsInteger := iLoop;
    		MemGai.FieldByName('Name').AsString  := _GaikaItems[iLoop];
    		MemGai.Post();
    	end;


	    // 外貨区分
	    MemGaiPay.Close;
	    MemGaiPay.Open;

	    for	iLoop := 0 to Length (_GaikaPayItems) - 1 do
	    begin
		    case iLoop of
			    0: iNo := 1;
			    1: iNo := 2;
			    2: iNo := 3;
		    end;

		    MemGaiPay.Append();
		    MemGaiPay.FieldByName('Kbn' ).AsInteger := iNo;
		    MemGaiPay.FieldByName('Name').AsString  := _GaikaPayItems[iLoop];
	    	MemGaiPay.Post();
        end;
	end;
//<GA001>ED


    if (m_iBmnAssAdopt = 1) then
    begin
	    // 分解パターン(部門別)
        GridKihon_BunkaiPtn.DropDownRows  := Length(_BunkaiPtnBmnItems);
        MemBunkaiPtn.Close;
        MemBunkaiPtn.Open;
        for	iLoop := 0 to Length (_BunkaiPtnBmnItems) - 1 do
        begin
        	MemBunkaiPtn.Append();
// <190> Mod start
{
        	MemBunkaiPtn.FieldByName('BunkaiPtn'    ).AsInteger := StrToInt(_BunkaiPtnBmnNo[iLoop]);
        	MemBunkaiPtn.FieldByName('BunkaiPtnName').AsString  := _BunkaiPtnBmnItems[iLoop];
}
        	MemBunkaiPtn.FieldByName('Kbn' ).AsInteger := StrToInt(_BunkaiPtnBmnNo[iLoop]);
        	MemBunkaiPtn.FieldByName('Name').AsString  := _BunkaiPtnBmnItems[iLoop];

// <190> Mod end
        	MemBunkaiPtn.Post();
        end;
    end
    else if (m_iProAdoptKbn = 1) then
    begin
        if (m_iSubAdoptKbn = 1) then
        begin
            // 分解パターン(ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別)
            GridKihon_BunkaiPtn.DropDownRows  := Length(_BunkaiPtnSubItems);
            MemBunkaiPtn.Close;
            MemBunkaiPtn.Open;
            for	iLoop := 0 to Length (_BunkaiPtnSubItems) - 1 do
            begin
            	MemBunkaiPtn.Append();
// <190> Mod start
{
            	MemBunkaiPtn.FieldByName('BunkaiPtn'    ).AsInteger := StrToInt(_BunkaiPtnSubNo[iLoop]);
            	MemBunkaiPtn.FieldByName('BunkaiPtnName').AsString  := _BunkaiPtnSubItems[iLoop];
}
            	MemBunkaiPtn.FieldByName('Kbn' ).AsInteger := StrToInt(_BunkaiPtnSubNo[iLoop]);
            	MemBunkaiPtn.FieldByName('Name').AsString  := _BunkaiPtnSubItems[iLoop];
// <190> Mod end
            	MemBunkaiPtn.Post();
            end;
        end
        else
        begin
            // 分解パターン(ﾌﾟﾛｼﾞｪｸﾄ別)
            GridKihon_BunkaiPtn.DropDownRows  := Length(_BunkaiPtnPrjItems);
            MemBunkaiPtn.Close;
            MemBunkaiPtn.Open;
            for	iLoop := 0 to Length (_BunkaiPtnPrjItems) - 1 do
            begin
            	MemBunkaiPtn.Append();
// <190> Mod start
{
            	MemBunkaiPtn.FieldByName('BunkaiPtn'    ).AsInteger := StrToInt(_BunkaiPtnPrjNo[iLoop]);
            	MemBunkaiPtn.FieldByName('BunkaiPtnName').AsString  := _BunkaiPtnPrjItems[iLoop];
}
            	MemBunkaiPtn.FieldByName('Kbn' ).AsInteger := StrToInt(_BunkaiPtnPrjNo[iLoop]);
            	MemBunkaiPtn.FieldByName('Name').AsString  := _BunkaiPtnPrjItems[iLoop];
// <190> Mod end
            	MemBunkaiPtn.Post();
            end;
        end;
    end
    else
    begin
	    // 分解パターン
        GridKihon_BunkaiPtn.DropDownRows  := Length(_SateiPrjItems);
        MemBunkaiPtn.Close;
        MemBunkaiPtn.Open;
        for	iLoop := 0 to Length (_BunkaiPtnItems) - 1 do
        begin
        	MemBunkaiPtn.Append();
// <190> Mod start
{
        	MemBunkaiPtn.FieldByName('BunkaiPtn'    ).AsInteger := iLoop;
        	MemBunkaiPtn.FieldByName('BunkaiPtnName').AsString  := _BunkaiPtnItems[iLoop];
}
        	MemBunkaiPtn.FieldByName('Kbn' ).AsInteger := iLoop;
        	MemBunkaiPtn.FieldByName('Name').AsString  := _BunkaiPtnItems[iLoop];
// <190> Mod end
        	MemBunkaiPtn.Post();
        end;
    end;

	// 優先支払名設定
	MemPriPayWay.Close;
	MemPriPayWay.Open;
	for	iLoop := 0 to Length (_PriPayWayItems) - 1 do
	begin
		MemPriPayWay.Append();
// <190> Mod start
{
		MemPriPayWay.FieldByName('PriPayWay'    ).AsInteger := iLoop;
		MemPriPayWay.FieldByName('PriPayWayName').AsString  := _PriPayWayItems[iLoop];
}
		MemPriPayWay.FieldByName('Kbn' ).AsInteger := iLoop;
		MemPriPayWay.FieldByName('Name').AsString  := _PriPayWayItems[iLoop];
// <190> Mod end
		MemPriPayWay.Post();
	end;
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod Start
{
// <126> 2006/06/27 H.Kawato Add Start
	// 査定方法
	MemSatei.Close;
	MemSatei.Open;
	for	iLoop := 0 to Length (_SateiItems) - 1 do
	begin
		MemSatei.Append();
		MemSatei.FieldByName('SateiNo'  ).AsInteger := iLoop;
		MemSatei.FieldByName('SateiName').AsString  := _SateiItems[iLoop];
		MemSatei.Post();
	end;
// <126> 2006/06/27 H.Kawato Add End
}
    if (m_iBmnAssAdopt = 1) then
    begin
	    // 査定方法(部門別)
        GridKihon_SateiNo.DropDownRows  := Length(_SateiBmnItems);
        MemSatei.Close;
        MemSatei.Open;
        for	iLoop := 0 to Length (_SateiBmnItems) - 1 do
        begin
        	MemSatei.Append();
// <190> Mod start
{
        	MemSatei.FieldByName('SateiNo'  ).AsInteger := StrToInt(_SateiBmnNo[iLoop]);
        	MemSatei.FieldByName('SateiName').AsString  := _SateiBmnItems[iLoop];
}
        	MemSatei.FieldByName('Kbn' ).AsInteger := StrToInt(_SateiBmnNo[iLoop]);
        	MemSatei.FieldByName('Name').AsString  := _SateiBmnItems[iLoop];
// <190> Mod end
        	MemSatei.Post();
        end;
    end
    else if (m_iKmkAssAdopt = 1) then
    begin
	    // 査定方法(科目別)
        GridKihon_SateiNo.DropDownRows  := Length(_SateiKmkItems);
        MemSatei.Close;
        MemSatei.Open;
        for	iLoop := 0 to Length (_SateiKmkItems) - 1 do
        begin
        	MemSatei.Append();
// <190> Mod start
{
        	MemSatei.FieldByName('SateiNo'  ).AsInteger := StrToInt(_SateiKmkNo[iLoop]);
        	MemSatei.FieldByName('SateiName').AsString  := _SateiKmkItems[iLoop];
}
        	MemSatei.FieldByName('Kbn' ).AsInteger := StrToInt(_SateiKmkNo[iLoop]);
        	MemSatei.FieldByName('Name').AsString  := _SateiKmkItems[iLoop];
// <190> Mod end
        	MemSatei.Post();
        end;
    end
    else if (m_iProAdoptKbn = 1) then
    begin
        if (m_iSubAdoptKbn = 1) then
        begin
            // 査定方法(ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別)
            GridKihon_SateiNo.DropDownRows  := Length(_SateiSubItems);
            MemSatei.Close;
            MemSatei.Open;
            for	iLoop := 0 to Length (_SateiSubItems) - 1 do
            begin
            	MemSatei.Append();
// <190> Mod start
{
            	MemSatei.FieldByName('SateiNo'  ).AsInteger := StrToInt(_SateiSubNo[iLoop]);
            	MemSatei.FieldByName('SateiName').AsString  := _SateiSubItems[iLoop];
}
            	MemSatei.FieldByName('Kbn' ).AsInteger := StrToInt(_SateiSubNo[iLoop]);
            	MemSatei.FieldByName('Name').AsString  := _SateiSubItems[iLoop];
// <190> Mod end
            	MemSatei.Post();
            end;
        end
        else
        begin
            // 査定方法(ﾌﾟﾛｼﾞｪｸﾄ別)
            GridKihon_SateiNo.DropDownRows  := Length(_SateiPrjItems);
            MemSatei.Close;
            MemSatei.Open;
            for	iLoop := 0 to Length (_SateiPrjItems) - 1 do
            begin
            	MemSatei.Append();
// <190> Mod start
{
            	MemSatei.FieldByName('SateiNo'  ).AsInteger := StrToInt(_SateiPrjNo[iLoop]);
            	MemSatei.FieldByName('SateiName').AsString  := _SateiPrjItems[iLoop];
}
            	MemSatei.FieldByName('Kbn' ).AsInteger := StrToInt(_SateiPrjNo[iLoop]);
            	MemSatei.FieldByName('Name').AsString  := _SateiPrjItems[iLoop];
// <190> Mod end
            	MemSatei.Post();
            end;
        end;
    end
    else
    begin
	    // 査定方法
// <147> 2007/07/18 H.Kawato Mod Start
{
        GridKihon_SateiNo.DropDownRows  := Length(_SateiItems);
        MemSatei.Close;
        MemSatei.Open;
        for	iLoop := 0 to Length (_SateiItems) - 1 do
        begin
        	MemSatei.Append();
        	MemSatei.FieldByName('SateiNo'  ).AsInteger := iLoop;
        	MemSatei.FieldByName('SateiName').AsString  := _SateiItems[iLoop];
        	MemSatei.Post();
        end;
}
        GridKihon_SateiNo.DropDownRows  := Length(_SateiNonItems);
        MemSatei.Close;
        MemSatei.Open;
        for	iLoop := 0 to Length (_SateiNonItems) - 1 do
        begin
        	MemSatei.Append();
// <190> Mod start
{
        	MemSatei.FieldByName('SateiNo'  ).AsInteger := StrToInt(_SateiNonNo[iLoop]);
        	MemSatei.FieldByName('SateiName').AsString  := _SateiNonItems[iLoop];
}
        	MemSatei.FieldByName('Kbn' ).AsInteger := StrToInt(_SateiNonNo[iLoop]);
        	MemSatei.FieldByName('Name').AsString  := _SateiNonItems[iLoop];
// <190> Mod end
        	MemSatei.Post();
        end;
// <147> 2007/07/18 H.Kawato Mod End
    end;
// <142> 2007/02/20 H.Kawato Mod End

// <155> 2007/12/25 H.Kawato Add Start
	// 査定金額計算区分
	MemSateiCalc.Close;
	MemSateiCalc.Open;
	for	iLoop := 0 to Length (_SateiCalcItems) - 1 do
	begin
		MemSateiCalc.Append();
// <190> Mod start
{
		MemSateiCalc.FieldByName('SateiCalc').AsInteger     := iLoop;
		MemSateiCalc.FieldByName('SateiCalcName').AsString  := _SateiCalcItems[iLoop];
}
		MemSateiCalc.FieldByName('Kbn' ).AsInteger     := iLoop;
		MemSateiCalc.FieldByName('Name').AsString  := _SateiCalcItems[iLoop];
// <190> Mod end
		MemSateiCalc.Post();
	end;
// <155> 2007/12/25 H.Kawato Add End

// <128> 2006/06/29 H.Kawato Add Start
	// 口座自動引落区分
	MemAutoKbn.Close;
	MemAutoKbn.Open;
	for	iLoop := 0 to Length (_AccAutoItems) - 1 do
	begin
		MemAutoKbn.Append();
// <190> Mod start
{
		MemAutoKbn.FieldByName('AutoKbn'    ).AsInteger := iLoop;
		MemAutoKbn.FieldByName('AutoKbnName').AsString  := _AccAutoItems[iLoop];
}
		MemAutoKbn.FieldByName('Kbn' ).AsInteger := iLoop;
		MemAutoKbn.FieldByName('Name').AsString  := _AccAutoItems[iLoop];

// <190> Mod end
		MemAutoKbn.Post();
	end;
// <128> 2006/06/29 H.Kawato Add End


end;

//**********************************************************************
//*		Proccess	:   ﾏｽﾀ基本情報から情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	なし
//*		Return		:	取引先の採用がなし(False)/あり(True)
//*		History		:
//**********************************************************************
function	TJNTCRP004007f.fnSetMasterInfoData (): Boolean;
var
	dqMasterInfo   : TMQuery;
	nItemPosition  : Integer;
    nMasterDivision: Integer;

begin
	nMasterDivision	:= 0;

//<114>	for	nItemPosition := 0 to 15 do
//<142>	for	nItemPosition := 0 to 35 do         //<114>
    for	nItemPosition := 0 to 45 do         //<142>
	begin
		case (nItemPosition) of
			 0:	nMasterDivision	:= MASTER_SUBJECT;										// 勘定科目
			 1:	nMasterDivision	:= MASTER_SUBJECTPLUS;									// 細目科目
			 2:	nMasterDivision	:= MASTER_BANK;											// 銀行
			 3:	nMasterDivision	:= MASTER_CUSTOMER;										// 取引先
			 4:	nMasterDivision	:= MASTER_STAFF;										// 社員
			 5:	nMasterDivision	:= MASTER_GENERAL01;									// 汎用補助①
			 6:	nMasterDivision	:= MASTER_GENERAL02;									// 汎用補助②
			 7:	nMasterDivision	:= MASTER_GENERAL03;									// 汎用補助③
			 8:	nMasterDivision	:= MASTER_GENERAL04;									// 汎用補助④
			 9:	nMasterDivision	:= MASTER_GENERAL05;									// 汎用補助⑤
			10:	nMasterDivision	:= MASTER_SECTION;										// 部門
//			11:	nMasterDivision	:= MASTER_SEGMENT;  									// ｾｸﾞﾒﾝﾄ
			15:	nMasterDivision	:= MASTER_CONSTRUCT;									// 工事

            16:	nMasterDivision	:= MKBN_PROJECT1;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            17:	nMasterDivision	:= MKBN_PROJECT2;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            18:	nMasterDivision	:= MKBN_PROJECT3;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            19:	nMasterDivision	:= MKBN_PROJECT4;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            20:	nMasterDivision	:= MKBN_PROJECT5;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            21:	nMasterDivision	:= MKBN_PROJECT6;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            22:	nMasterDivision	:= MKBN_PROJECT7;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            23:	nMasterDivision	:= MKBN_PROJECT8;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            24:	nMasterDivision	:= MKBN_PROJECT9;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            25:	nMasterDivision	:= MKBN_PROJECT10;										// <114>ﾌﾟﾛｼﾞｪｸﾄ

            26:	nMasterDivision	:= MKBN_SEG1;										    // <114>ｾｸﾞﾒﾝﾄ
            27:	nMasterDivision	:= MKBN_SEG2;										    // <114>ｾｸﾞﾒﾝﾄ
            28:	nMasterDivision	:= MKBN_SEG3;										    // <114>ｾｸﾞﾒﾝﾄ
            29:	nMasterDivision	:= MKBN_SEG4;										    // <114>ｾｸﾞﾒﾝﾄ
            30:	nMasterDivision	:= MKBN_SEG5;										    // <114>ｾｸﾞﾒﾝﾄ
            31:	nMasterDivision	:= MKBN_SEG6;										    // <114>ｾｸﾞﾒﾝﾄ
            32:	nMasterDivision	:= MKBN_SEG7;									    	// <114>ｾｸﾞﾒﾝﾄ
            33:	nMasterDivision	:= MKBN_SEG8;									    	// <114>ｾｸﾞﾒﾝﾄ
            34:	nMasterDivision	:= MKBN_SEG9;								    		// <114>ｾｸﾞﾒﾝﾄ
            35:	nMasterDivision	:= MKBN_SEG10;							    			// <114>ｾｸﾞﾒﾝﾄ

            36:	nMasterDivision	:= MKBN_PROSUB1;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            37:	nMasterDivision	:= MKBN_PROSUB2;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            38:	nMasterDivision	:= MKBN_PROSUB3;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            39:	nMasterDivision	:= MKBN_PROSUB4;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            40:	nMasterDivision	:= MKBN_PROSUB5;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            41:	nMasterDivision	:= MKBN_PROSUB6;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            42:	nMasterDivision	:= MKBN_PROSUB7;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            43:	nMasterDivision	:= MKBN_PROSUB8;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            44:	nMasterDivision	:= MKBN_PROSUB9;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            45:	nMasterDivision	:= MKBN_PROSUB10;										// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
		end;

		m_arAdoptInfo [nItemPosition].nMasterDivision	:= nMasterDivision;
		m_arAdoptInfo [nItemPosition].nAdoption			:= 0;
		m_arAdoptInfo [nItemPosition].nCodeDigit		:= 6;
		m_arAdoptInfo [nItemPosition].nCodeAttribute	:= 0;

		case (nItemPosition) of
			 0:	m_arAdoptInfo [nItemPosition].strDescription	:= '勘定科目';
			 1:	m_arAdoptInfo [nItemPosition].strDescription	:= '科目別補助';
			 2:	m_arAdoptInfo [nItemPosition].strDescription	:= '銀行';
			 3:	m_arAdoptInfo [nItemPosition].strDescription	:= '取引先';
			 4:	m_arAdoptInfo [nItemPosition].strDescription	:= '社員';
			 5:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助1';
			 6:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助2';
			 7:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助3';
			 8:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助4';
			 9:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助5';
			10:	m_arAdoptInfo [nItemPosition].strDescription	:= '部門';
			11:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント';
			15:	m_arAdoptInfo [nItemPosition].strDescription	:= '工事';
			16:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト１';    //<114>
			17:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト２';    //<114>
			18:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト３';    //<114>
			19:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト４';    //<114>
			20:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト５';    //<114>
			21:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト６';    //<114>
			22:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト７';    //<114>
			23:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト８';    //<114>
			24:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト９';    //<114>
			25:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト１０';  //<114>

			26:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント１';    //<114>
			27:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント２';    //<114>
			28:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント３';    //<114>
			29:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント４';    //<114>
			30:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント５';    //<114>
			31:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント６';    //<114>
			32:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント７';    //<114>
			33:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント８';    //<114>
			34:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント９';    //<114>
			35:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント１０';  //<114>

			36:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ１';    //<142>
			37:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ２';    //<142>
			38:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ３';    //<142>
			39:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ４';    //<142>
			40:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ５';    //<142>
			41:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ６';    //<142>
			42:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ７';    //<142>
			43:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ８';    //<142>
			44:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ９';    //<142>
			45:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ１０';  //<142>
		end;
	end;

	dqMasterInfo	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);							// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr FROM MasterInfo ORDER BY MasterKbn');

		Open ();

		while (not EOF) do
		begin
			nItemPosition	:= -1;

			case (FieldByName ('MasterKbn').AsInteger) of
				MASTER_SUBJECT    :	nItemPosition	:= 0;								// 勘定科目
				MASTER_SUBJECTPLUS:	nItemPosition	:= 1;								// 細目科目
				MASTER_BANK       :	nItemPosition	:= 2;								// 銀行
				MASTER_CUSTOMER	  :	nItemPosition	:= 3;								// 取引先
				MASTER_STAFF	  :	nItemPosition	:= 4;								// 社員
				MASTER_GENERAL01  :	nItemPosition	:= 5;								// 汎用補助①
				MASTER_GENERAL02  :	nItemPosition	:= 6;								// 汎用補助②
				MASTER_GENERAL03  :	nItemPosition	:= 7;								// 汎用補助③
				MASTER_GENERAL04  :	nItemPosition	:= 8;								// 汎用補助④
				MASTER_GENERAL05  :	nItemPosition	:= 9;								// 汎用補助⑤
				MASTER_SECTION	  :	nItemPosition	:= 10;								// 部門
                MKBN_PROJECT1     : nItemPosition	:= 16;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT2     : nItemPosition	:= 17;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT3     : nItemPosition	:= 18;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT4     : nItemPosition	:= 19;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT5     : nItemPosition	:= 20;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT6     : nItemPosition	:= 21;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT7     : nItemPosition	:= 22;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT8     : nItemPosition	:= 23;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT9     : nItemPosition	:= 24;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT10    : nItemPosition	:= 25;								// <114>ﾌﾟﾛｼﾞｪｸﾄ

                MKBN_SEG1     : nItemPosition	:= 26;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG2     : nItemPosition	:= 27;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG3     : nItemPosition	:= 28;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG4     : nItemPosition	:= 29;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG5     : nItemPosition	:= 30;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG6     : nItemPosition	:= 31;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG7     : nItemPosition	:= 32;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG8     : nItemPosition	:= 33;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG9     : nItemPosition	:= 34;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG10    : nItemPosition	:= 35;								// <114>ｾｸﾞﾒﾝﾄ

                MKBN_PROSUB1    : nItemPosition	:= 36;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB2    : nItemPosition	:= 37;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB3    : nItemPosition	:= 38;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB4    : nItemPosition	:= 39;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB5    : nItemPosition	:= 40;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB6    : nItemPosition	:= 41;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB7    : nItemPosition	:= 42;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB8    : nItemPosition	:= 43;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB9    : nItemPosition	:= 44;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB10   : nItemPosition	:= 45;								// <142>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
			end;

//            if FieldByName ('MasterKbn').AsInteger = MASTER_SEGMENT   then  nItemPosition := 11;
            if FieldByName ('MasterKbn').AsInteger = MASTER_CONSTRUCT then  nItemPosition := 15;


			if	(nItemPosition >= 0) then
			begin
				m_arAdoptInfo [nItemPosition].nAdoption			:= FieldByName ('UseKbn'   ).AsInteger;
				m_arAdoptInfo [nItemPosition].nCodeDigit		:= FieldByName ('CodeDigit').AsInteger;
				m_arAdoptInfo [nItemPosition].nCodeAttribute	:= FieldByName ('CodeAttr' ).AsInteger;

				if	((FieldByName ('JHojyoName').AsString <> '') and
					 (FieldByName ('MasterKbn').AsInteger <> MASTER_SUBJECTPLUS)) then
					m_arAdoptInfo [nItemPosition].strDescription	:= FieldByName ('JHojyoName').AsString;

// <142> 2007/02/20 H.Kawato Add Start
                if  (FieldByName ('MasterKbn').AsInteger = m_iProjectKbn) then  // ﾌﾟﾛｼﾞｪｸﾄ区分
                begin
                    m_iPrjCodeAttr    := m_arAdoptInfo [nItemPosition].nCodeAttribute;
                    m_iPrjCodeDigit   := m_arAdoptInfo [nItemPosition].nCodeDigit;
                    m_sProjectTitle   := m_arAdoptInfo [nItemPosition].strDescription;
                end
                else
                if  (FieldByName ('MasterKbn').AsInteger = m_iProjSubKbn) then  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ区分
                begin
                    m_iPjSubCodeAttr  := m_arAdoptInfo [nItemPosition].nCodeAttribute;
                    m_iPjSubCodeDigit := m_arAdoptInfo [nItemPosition].nCodeDigit;
                    m_sPjSubTitle     := m_arAdoptInfo [nItemPosition].strDescription;
                end;
// <142> 2007/02/20 H.Kawato Add End
			end;

			NEXT;
		end;
	end;

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

	if	(m_arAdoptInfo [3].nAdoption = 0) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	Result	:= TRUE;
end;

//**********************************************************************
//*		Proccess	:	初期処理(画面)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Notning
//*		Return		:
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnInitializeScreenStandard (): Boolean;
begin
(*
   	if (not fnInitializeExCodeAttribute ()) then
    begin
	    CmnTreeView.Enabled	:= TRUE;
   		Result	:= FALSE;
    	Exit;
   	end;

	if (fnCheckRecordRequisite () = REQUISITE_CANCEL) then
	begin
		CmnTreeView.Enabled	:= TRUE;
		Result	:= FALSE;
		Exit;
	end;
*)

	// ﾂﾘｰ作成
	fnMakeTree();

	Result := TRUE;

end;

(*
//**********************************************************************
//*		Proccess	:	初期処理(ｺｰﾄﾞ桁数)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnInitializeExCodeAttribute (): Boolean;
var
	dqMasterData	: TMQuery;
	cDialogAttribute: TJNTCRP004007_D1f;
	nAdoption		: Integer;
	strDescription	: String;

begin
	fnGetAdoptInformation(MASTER_CUSTOMER, nAdoption, m_nCurCodeDigit, m_nCurCodeAttribute, strDescription);

	if	(nAdoption = 0) then															// 採用なし
	begin
		Result	:= FALSE;
		Exit;
	end;

	dqMasterData := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT * FROM MTOKUI ');
		SQL.Add('WHERE RDelKbn = 0');
        SQL.Add('and TemplateKbn = 0');                     // <102>

		Open ();

		if	(not EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result := TRUE;
			Exit;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	cDialogAttribute := TJNTCRP004007_D1f.fnCreateDialog (Pointer (m_pRec), Self, m_cDBSelect);

	if	(cDialogAttribute.ShowModal () = mrCancel) then
	begin
		cDialogAttribute.Close ();
		cDialogAttribute.Free  ();

		Result	:= FALSE;
		Exit;
	end;

	m_arAdoptInfo[3].nAdoption		:= 1;
	m_arAdoptInfo[3].nCodeDigit		:= cDialogAttribute.m_nCodeDigit;
	m_arAdoptInfo[3].nCodeAttribute	:= cDialogAttribute.m_nCodeAttribute;
	m_nCurCodeDigit					:= cDialogAttribute.m_nCodeDigit;
	m_nCurCodeAttribute				:= cDialogAttribute.m_nCodeAttribute;

	cDialogAttribute.Close();
	cDialogAttribute.Free();

	Result := TRUE;
end;
*) // <120>

//**********************************************************************
//*		Proccess	:	採用情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	nMasterDivision	:	ﾏｽﾀ区分
//*						nAdoption		:	採用有無
//*						nCodeDigit		:	ｺｰﾄﾞ桁数
//*						nCodeAttribute	:	ｺｰﾄﾞ属性
//*						strDescription	:	名称
//*		Return		:	他で使われていない(0)/使われている(99)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetAdoptInformation (nMasterDivision: Integer;
						var nAdoption,nCodeDigit,nCodeAttribute: Integer; var strDescription: String): Boolean;
var
	nItemPosition: Integer;

begin
	// ﾏｽﾀ区分が｢23:得意先｣、｢24:仕入先｣の時
	if ((nMasterDivision = MASTER_CUSTOMERPLUS01) or
	    (nMasterDivision = MASTER_CUSTOMERPLUS02)) then
		nMasterDivision	:= MASTER_CUSTOMER;			// 取引先ｾｯﾄ

	nAdoption		:= 0;
	nCodeDigit		:= 0;
	nCodeAttribute	:= 0;
	strDescription	:= '';

//<114>	for nItemPosition := 0 to 15 do
//<142>	for nItemPosition := 0 to 35 do     //<114>
	for nItemPosition := 0 to 45 do     //<142>
	begin
		if  (m_arAdoptInfo [nItemPosition].nMasterDivision = nMasterDivision) then
		begin
			nAdoption		:= m_arAdoptInfo [nItemPosition].nAdoption;
			nCodeDigit		:= m_arAdoptInfo [nItemPosition].nCodeDigit;
			nCodeAttribute	:= m_arAdoptInfo [nItemPosition].nCodeAttribute;
			strDescription	:= m_arAdoptInfo [nItemPosition].strDescription;

			Result	:= TRUE;
			Exit;
		end;
	end;

	Result	:= FALSE;
end;

(*
//**********************************************************************
//*		Proccess	:	諸口があるチェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckRecordRequisite (): Integer;
var
	cDialogRequisite: TJNTCRP004007_D2f;
	dqMasterData	: TMQuery;
begin
	dqMasterData := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT GCode FROM MTOKUI WHERE SyokuchiKbn = 1 AND RDelKbn = 0');

		Open ();

		if	(not EOF) then
		begin
			m_strHojCodeGeneral	:= FieldByName ('GCode').AsString;						// 諸口

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result := REQUISITE_OK;
			Exit;
		end;
    end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

    //諸口の場合には諸口登録ﾀﾞｲｱﾛｸﾞ起動
	cDialogRequisite := TJNTCRP004007_D2f.fnCreateDialog (Pointer (m_pRec), Self,
										m_cDBSelect, m_nCurCodeDigit, m_nCurCodeAttribute, m_strValidCharacters);

	if	(cDialogRequisite.ShowModal () = mrCancel) then
	begin
		cDialogRequisite.Close ();
		cDialogRequisite.Free  ();

		Result	:= REQUISITE_CANCEL;
		Exit;
	end;

	m_strHojCodeGeneral	:= cDialogRequisite.m_strHojCodeGeneral;

	cDialogRequisite.Close ();
	cDialogRequisite.Free  ();

	Result	:= REQUISITE_OK;
end;
*) // <120>

//**********************************************************************
//*		Proccess	:	初期処理(画面のﾌﾟﾛﾊﾟﾃｨ)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnInitializeScreen ();
var
	nAdoption	  	: Integer;
	strDescription	: String;
	strFormat		: String;
begin
//CMN
	fnGetAdoptInformation (MASTER_CUSTOMER, nAdoption, m_nCurCodeDigit, m_nCurCodeAttribute, strDescription);

	GridRealCode.MaxLength		 := m_nCurCodeDigit;	// 実在情報
	GridTotalCode.MaxLength		 := m_nCurCodeDigit;	// 合計情報
    GridPayWay_GCode.MaxLength   := m_nCurCodeDigit;	// 支払方法     <142> Add
    Shousai_GCode.MaxLength      := m_nCurCodeDigit;	// 優先支払詳細 <142> Add
	Hou_H_ShiharaiCode.MaxLength := m_nCurCodeDigit;	// 支払方法(比率)
	Hou_T_ShiharaiCode.MaxLength := m_nCurCodeDigit;	// 支払方法(定額)
	Fri_ShiharaiCode.MaxLength   := m_nCurCodeDigit;	// 振込情報
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	FriGD_ShiharaiCode.MaxLength   := m_nCurCodeDigit;	// 電子送金
    	FriGT_ShiharaiCode.MaxLength   := m_nCurCodeDigit;	// 為替手形
    	FriGK_ShiharaiCode.MaxLength   := m_nCurCodeDigit;	// 送金小切手
    end;
//<GA001>ED

	KFri_ShiharaiCode.MaxLength  := m_nCurCodeDigit;	// 期日指定振込情報
	Teg_ShiharaiCode.MaxLength   := m_nCurCodeDigit;	// 手形情報
	Kog_ShiharaiCode.MaxLength   := m_nCurCodeDigit;	// 小切手情報
	Hoka_ShiharaiCode.MaxLength  := m_nCurCodeDigit;	// その他情報
	Hoka_ChangeCode.MaxLength    := m_nCurCodeDigit;	// その他情報
	GridNayoseCode.MaxLength     := m_nCurCodeDigit;	// 名寄せ情報
	GridNayoseOyaCode.MaxLength  := m_nCurCodeDigit;	// 名寄せ情報

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
        // 基本情報<107>
		GridKihon_GCode.Alignment	 	 := taRightJustify;
		GridKihon_GCode.EditAlignment	 := taRightjustify;
		GridKihon_GCode.MaxLength	 	 := m_nCurCodeDigit;
		GridKihon_GCode.ImeMode			 := imDisable;
		GridKihon_GCode.Hankaku			 := FALSE;
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
            // 外貨基本情報<107>
		    GridKihonG_GCode.Alignment	 	 := taRightJustify;
		    GridKihonG_GCode.EditAlignment	 := taRightjustify;
		    GridKihonG_GCode.MaxLength	 	 := m_nCurCodeDigit;
		    GridKihonG_GCode.ImeMode		 := imDisable;
		    GridKihonG_GCode.Hankaku		 := FALSE;
        end;
//<GA001>ED
		// 実在情報
		GridRealCode.Alignment			 := taRightJustify;
		GridRealCode.EditAlignment		 := taRightjustify;
		GridRealCode.MaxLength			 := m_nCurCodeDigit;
		GridRealCode.ImeMode			 := imDisable;
		GridRealCode.Hankaku			 := FALSE;
		// 合計情報
		GridTotalCode.Alignment			 := taRightJustify;
		GridTotalCode.EditAlignment		 := taRightjustify;
		GridTotalCode.MaxLength			 := m_nCurCodeDigit;
		GridTotalCode.ImeMode			 := imDisable;
		GridTotalCode.Hankaku			 := FALSE;
// <142> 2007/02/20 H.Kawato Add Start
		// 支払方法
		GridPayWay_GCode.Alignment	     := taRightJustify;
		GridPayWay_GCode.EditAlignment   := taRightjustify;
		GridPayWay_GCode.MaxLength	     := m_nCurCodeDigit;
		GridPayWay_GCode.ImeMode		 := imDisable;
		GridPayWay_GCode.Hankaku		 := FALSE;
		// 優先支払詳細
		Shousai_GCode.Alignment	         := taRightJustify;
		Shousai_GCode.EditAlignment      := taRightjustify;
		Shousai_GCode.MaxLength	         := m_nCurCodeDigit;
		Shousai_GCode.ImeMode		     := imDisable;
		Shousai_GCode.Hankaku		     := FALSE;
// <142> 2007/02/20 H.Kawato Add End
		// 支払方法(比率)
		Hou_H_ShiharaiCode.Alignment	 := taRightJustify;
		Hou_H_ShiharaiCode.EditAlignment := taRightjustify;
		Hou_H_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
		Hou_H_ShiharaiCode.ImeMode		 := imDisable;
		Hou_H_ShiharaiCode.Hankaku		 := FALSE;
		// 支払方法(定額)
		Hou_T_ShiharaiCode.Alignment	 := taRightJustify;
		Hou_T_ShiharaiCode.EditAlignment := taRightjustify;
		Hou_T_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
		Hou_T_ShiharaiCode.ImeMode		 := imDisable;
		Hou_T_ShiharaiCode.Hankaku		 := FALSE;
		// 振込情報
		Fri_ShiharaiCode.Alignment	 	 := taRightJustify;
		Fri_ShiharaiCode.EditAlignment   := taRightjustify;
		Fri_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Fri_ShiharaiCode.ImeMode		 := imDisable;
		Fri_ShiharaiCode.Hankaku		 := FALSE;
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
    		// 電信送金情報
    		FriGD_ShiharaiCode.Alignment	 := taRightJustify;
    		FriGD_ShiharaiCode.EditAlignment := taRightjustify;
    		FriGD_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
    		FriGD_ShiharaiCode.ImeMode		 := imDisable;
    		FriGD_ShiharaiCode.Hankaku		 := FALSE;
    		// 為替手形情報
    		FriGT_ShiharaiCode.Alignment	 := taRightJustify;
    		FriGT_ShiharaiCode.EditAlignment := taRightjustify;
    		FriGT_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
    		FriGT_ShiharaiCode.ImeMode		 := imDisable;
    		FriGT_ShiharaiCode.Hankaku		 := FALSE;
    		// 小切手情報
    		FriGK_ShiharaiCode.Alignment	 := taRightJustify;
    		FriGK_ShiharaiCode.EditAlignment := taRightjustify;
    		FriGK_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
    		FriGK_ShiharaiCode.ImeMode		 := imDisable;
    		FriGK_ShiharaiCode.Hankaku		 := FALSE;
        end;
//<GA001>ED

		// 期日指定振込情報
		KFri_ShiharaiCode.Alignment	 	 := taRightJustify;
		KFri_ShiharaiCode.EditAlignment  := taRightjustify;
		KFri_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		KFri_ShiharaiCode.ImeMode		 := imDisable;
		KFri_ShiharaiCode.Hankaku		 := FALSE;
		// 手形情報
		Teg_ShiharaiCode.Alignment	 	 := taRightJustify;
		Teg_ShiharaiCode.EditAlignment   := taRightjustify;
		Teg_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Teg_ShiharaiCode.ImeMode		 := imDisable;
		Teg_ShiharaiCode.Hankaku		 := FALSE;
		// 小切手情報
		Kog_ShiharaiCode.Alignment	 	 := taRightJustify;
		Kog_ShiharaiCode.EditAlignment   := taRightjustify;
		Kog_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Kog_ShiharaiCode.ImeMode		 := imDisable;
		Kog_ShiharaiCode.Hankaku		 := FALSE;
		// 相殺情報
		Edit00PayCodeNum.Visible		 := TRUE;
		Edit00PayCodeFree.Visible        := FALSE;
		Edit00PayCodeNum.DMaxLength	     := m_nCurCodeDigit;
		if (m_nCurCodeAttribute = 1) then						// ｺｰﾄﾞ属性: 1=数字(前ｾﾞﾛあり)
			strFormat := StringOfChar('0',m_nCurCodeDigit)
		else							 						// ｺｰﾄﾞ属性: 0=数字
			strFormat := '';
		Edit00PayCodeNum.FormatStr       := strFormat;
		Edit00PayCodeNum.Digits	         := m_nCurCodeDigit;
		Edit00PayCodeNum.MaxValue        := StrToInt64(StringOfChar('9',m_nCurCodeDigit));
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
            GridKhnsetGHojCode.Alignment	 := taRightJustify;
    		GridKhnsetGHojCode.EditAlignment := taRightJustify;
    		GridKhnsetGHojCode.MaxLength	 := m_nCurCodeDigit;
    		GridKhnsetGHojCode.ImeMode		 := imDisable;
    		GridKhnsetGHojCode.Hankaku		 := FALSE;
    		// 可変情報
    		Edit00GPayCodeNum.Visible		 := TRUE;
    		Edit00GPayCodeFree.Visible       := FALSE;
    		Edit00GPayCodeNum.DMaxLength	 := m_nCurCodeDigit;
    		if (m_nCurCodeAttribute = 1) then						// ｺｰﾄﾞ属性: 1=数字(前ｾﾞﾛあり)
    			strFormat := StringOfChar('0',m_nCurCodeDigit)
    		else							 						// ｺｰﾄﾞ属性: 0=数字
    			strFormat := '';
    		Edit00GPayCodeNum.FormatStr       := strFormat;
    		Edit00GPayCodeNum.Digits	      := m_nCurCodeDigit;
    		Edit00GPayCodeNum.MaxValue        := StrToInt64(StringOfChar('9',m_nCurCodeDigit));
        end;
//<GA001>ED
		// その他情報
		Hoka_ShiharaiCode.Alignment	 	 := taRightJustify;
		Hoka_ShiharaiCode.EditAlignment  := taRightjustify;
		Hoka_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Hoka_ShiharaiCode.ImeMode		 := imDisable;
		Hoka_ShiharaiCode.Hankaku		 := FALSE;
		// その他情報(代替ｺｰﾄﾞ)
		Hoka_ChangeCode.Alignment	 	 := taRightJustify;
		Hoka_ChangeCode.EditAlignment    := taRightjustify;
		Hoka_ChangeCode.MaxLength	 	 := m_nCurCodeDigit;
		Hoka_ChangeCode.ImeMode			 := imDisable;
		Hoka_ChangeCode.Hankaku			 := FALSE;
		// 名寄せ情報(ｺｰﾄﾞ)
		GridNayoseCode.Alignment	 	 := taRightJustify;
		GridNayoseCode.EditAlignment     := taRightjustify;
		GridNayoseCode.MaxLength	 	 := m_nCurCodeDigit;
		GridNayoseCode.ImeMode			 := imDisable;
		GridNayoseCode.Hankaku			 := FALSE;
		// 名寄せ情報(親ｺｰﾄﾞ)
		GridNayoseOyaCode.Alignment	 	 := taRightJustify;
		GridNayoseOyaCode.EditAlignment  := taRightjustify;
		GridNayoseOyaCode.MaxLength	 	 := m_nCurCodeDigit;
		GridNayoseOyaCode.ImeMode		 := imDisable;
		GridNayoseOyaCode.Hankaku		 := FALSE;
    end
	else
    begin
        // 基本情報<107>
		GridKihon_GCode.Alignment		 := taLeftJustify;
		GridKihon_GCode.EditAlignment	 := taLeftJustify;
		GridKihon_GCode.MaxLength		 := m_nCurCodeDigit;
		GridKihon_GCode.ImeMode			 := imClose;
		GridKihon_GCode.Hankaku			 := TRUE;
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
            // 外貨基本情報
    		GridKihonG_GCode.Alignment		 := taLeftJustify;
    		GridKihonG_GCode.EditAlignment	 := taLeftJustify;
    		GridKihonG_GCode.MaxLength		 := m_nCurCodeDigit;
    		GridKihonG_GCode.ImeMode		 := imClose;
    		GridKihonG_GCode.Hankaku		 := TRUE;
        end;
//<GA001>ED
		// 実在情報
		GridRealCode.Alignment			 := taLeftJustify;
		GridRealCode.EditAlignment		 := taLeftJustify;
		GridRealCode.MaxLength			 := m_nCurCodeDigit;
		GridRealCode.ImeMode			 := imClose;
		GridRealCode.Hankaku			 := TRUE;
		// 合計情報
		GridTotalCode.Alignment			 := taLeftJustify;
		GridTotalCode.EditAlignment		 := taLeftJustify;
		GridTotalCode.MaxLength			 := m_nCurCodeDigit;
		GridTotalCode.ImeMode			 := imClose;
		GridTotalCode.Hankaku			 := TRUE;
// <142> 2007/02/20 H.Kawato Add Start
		// 支払方法
		GridPayWay_GCode.Alignment	     := taLeftJustify;
		GridPayWay_GCode.EditAlignment   := taLeftJustify;
		GridPayWay_GCode.MaxLength	     := m_nCurCodeDigit;
		GridPayWay_GCode.ImeMode		 := imClose;
		GridPayWay_GCode.Hankaku		 := TRUE;
		// 優先支払詳細
		Shousai_GCode.Alignment	         := taLeftJustify;
		Shousai_GCode.EditAlignment      := taLeftJustify;
		Shousai_GCode.MaxLength	         := m_nCurCodeDigit;
		Shousai_GCode.ImeMode		     := imClose;
		Shousai_GCode.Hankaku		     := TRUE;
// <142> 2007/02/20 H.Kawato Add End
		// 支払方法(比率)
		Hou_H_ShiharaiCode.Alignment	 := taLeftJustify;
		Hou_H_ShiharaiCode.EditAlignment := taLeftJustify;
		Hou_H_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
		Hou_H_ShiharaiCode.ImeMode		 := imClose;
		Hou_H_ShiharaiCode.Hankaku		 := TRUE;
		// 支払方法(定額)
		Hou_T_ShiharaiCode.Alignment	 := taLeftJustify;
		Hou_T_ShiharaiCode.EditAlignment := taLeftJustify;
		Hou_T_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
		Hou_T_ShiharaiCode.ImeMode		 := imClose;
		Hou_T_ShiharaiCode.Hankaku		 := TRUE;
		// 振込情報
		Fri_ShiharaiCode.Alignment	 	 := taLeftJustify;
		Fri_ShiharaiCode.EditAlignment   := taLeftJustify;
		Fri_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Fri_ShiharaiCode.ImeMode		 := imClose;
		Fri_ShiharaiCode.Hankaku		 := TRUE;
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
    		// 電信送金情報
    		FriGD_ShiharaiCode.Alignment	 := taLeftJustify;
    		FriGD_ShiharaiCode.EditAlignment := taLeftJustify;
    		FriGD_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
    		FriGD_ShiharaiCode.ImeMode		 := imClose;
    		FriGD_ShiharaiCode.Hankaku		 := TRUE;
    		// 為替手形情報
    		FriGT_ShiharaiCode.Alignment	 := taLeftJustify;
    		FriGT_ShiharaiCode.EditAlignment := taLeftJustify;
    		FriGT_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
    		FriGT_ShiharaiCode.ImeMode		 := imClose;
    		FriGT_ShiharaiCode.Hankaku		 := TRUE;
    		// 小切手情報
    		FriGK_ShiharaiCode.Alignment	 := taLeftJustify;
    		FriGK_ShiharaiCode.EditAlignment := taLeftJustify;
    		FriGK_ShiharaiCode.MaxLength	 := m_nCurCodeDigit;
    		FriGK_ShiharaiCode.ImeMode		 := imClose;
    		FriGK_ShiharaiCode.Hankaku		 := TRUE;
        end;
//<GA001>ED

		// 期日指定振込情報
		KFri_ShiharaiCode.Alignment	 	 := taLeftJustify;
		KFri_ShiharaiCode.EditAlignment  := taLeftJustify;
		KFri_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		KFri_ShiharaiCode.ImeMode		 := imClose;
		KFri_ShiharaiCode.Hankaku		 := TRUE;
		// 手形情報
		Teg_ShiharaiCode.Alignment	 	 := taLeftJustify;
		Teg_ShiharaiCode.EditAlignment   := taLeftJustify;
		Teg_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Teg_ShiharaiCode.ImeMode		 := imClose;
		Teg_ShiharaiCode.Hankaku		 := TRUE;
		// 小切手情報
		Kog_ShiharaiCode.Alignment	 	 := taLeftJustify;
		Kog_ShiharaiCode.EditAlignment   := taLeftJustify;
		Kog_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Kog_ShiharaiCode.ImeMode		 := imClose;
		Kog_ShiharaiCode.Hankaku		 := TRUE;
		// 相殺情報
		Edit00PayCodeNum.Visible	     := FALSE;
		Edit00PayCodeFree.Visible	     := TRUE;
		Edit00PayCodeFree.TabStop		 := True;
		Edit00PayCodeFree.ReadOnly		 := False;
		Edit00PayCodeFree.MaxLength	     := m_nCurCodeDigit;
		// その他情報
		Hoka_ShiharaiCode.Alignment	 	 := taLeftJustify;
		Hoka_ShiharaiCode.EditAlignment  := taLeftJustify;
		Hoka_ShiharaiCode.MaxLength	 	 := m_nCurCodeDigit;
		Hoka_ShiharaiCode.ImeMode		 := imClose;
		Hoka_ShiharaiCode.Hankaku		 := TRUE;
		// その他情報(代替ｺｰﾄﾞ)
		Hoka_ChangeCode.Alignment	 	 := taLeftJustify;
		Hoka_ChangeCode.EditAlignment 	 := taLeftJustify;
		Hoka_ChangeCode.MaxLength	 	 := m_nCurCodeDigit;
		Hoka_ChangeCode.ImeMode			 := imClose;
		Hoka_ChangeCode.Hankaku			 := TRUE;
		// 名寄せ情報(ｺｰﾄﾞ)
		GridNayoseCode.Alignment	 	 := taLeftJustify;
		GridNayoseCode.EditAlignment 	 := taLeftJustify;
		GridNayoseCode.MaxLength	 	 := m_nCurCodeDigit;
		GridNayoseCode.ImeMode			 := imClose;
		GridNayoseCode.Hankaku			 := TRUE;
		// 名寄せ情報(親ｺｰﾄﾞ)
		GridNayoseOyaCode.Alignment	 	 := taLeftJustify;
		GridNayoseOyaCode.EditAlignment  := taLeftJustify;
		GridNayoseOyaCode.MaxLength	 	 := m_nCurCodeDigit;
		GridNayoseOyaCode.ImeMode		 := imClose;
		GridNayoseOyaCode.Hankaku		 := TRUE;

//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
            GridKhnsetGHojCode.Alignment	 := taLeftJustify;
    		GridKhnsetGHojCode.EditAlignment := taLeftJustify;
    		GridKhnsetGHojCode.MaxLength	 := m_nCurCodeDigit;
    		GridKhnsetGHojCode.ImeMode		 := imClose;
    		GridKhnsetGHojCode.Hankaku		 := TRUE;

    		// 可変情報情報
    		Edit00GPayCodeNum.Visible	     := FALSE;
    		Edit00GPayCodeFree.Visible	     := TRUE;
    		Edit00GPayCodeFree.TabStop		 := True;
    		Edit00GPayCodeFree.ReadOnly		 := False;
    		Edit00GPayCodeFree.MaxLength	 := m_nCurCodeDigit;
        end;
//<GA001>ED

	end;

	GridRealName.MaxLength    := LENGTH_NAME_CUSTOMER;
	GridTotalName.MaxLength	  := LENGTH_NAME_CUSTOMER;
	MemRealName.DisplayWidth  := LENGTH_NAME_CUSTOMER;
	MemTotalName.DisplayWidth := LENGTH_NAME_CUSTOMER;
end;

//**********************************************************************
//*		Proccess	:	初期処理(画面のﾌﾟﾛﾊﾟﾃｨ)
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnInitializePrjCode ();
var
	strFormat		: String;
begin

	GridPayWay_PrjCode.MaxLength := m_iPrjCodeDigit;	// 支払方法
    Shousai_PrjCode.MaxLength    := m_iPrjCodeDigit;	// 優先支払詳細
	Hou_H_PrjCode.MaxLength      := m_iPrjCodeDigit;	// 支払方法(比率)
	Hou_T_PrjCode.MaxLength      := m_iPrjCodeDigit;	// 支払方法(定額)
	Fri_PrjCode.MaxLength        := m_iPrjCodeDigit;	// 振込情報
	KFri_PrjCode.MaxLength       := m_iPrjCodeDigit;	// 期日指定振込情報
	Teg_PrjCode.MaxLength        := m_iPrjCodeDigit;	// 手形情報
	Kog_PrjCode.MaxLength        := m_iPrjCodeDigit;	// 小切手情報

	if	(m_iPrjCodeAttr <= 1) then												// ｺｰﾄﾞ属性: 数字
	begin
		// 支払方法
		GridPayWay_PrjCode.Alignment	 := taRightJustify;
		GridPayWay_PrjCode.EditAlignment := taRightjustify;
		GridPayWay_PrjCode.MaxLength	 := m_iPrjCodeDigit;
		GridPayWay_PrjCode.ImeMode		 := imDisable;
		GridPayWay_PrjCode.Hankaku		 := FALSE;
		// 優先支払詳細
		Shousai_PrjCode.Alignment	     := taRightJustify;
		Shousai_PrjCode.EditAlignment    := taRightjustify;
		Shousai_PrjCode.MaxLength	     := m_iPrjCodeDigit;
		Shousai_PrjCode.ImeMode		     := imDisable;
		Shousai_PrjCode.Hankaku		     := FALSE;
		// 支払方法(比率)
		Hou_H_PrjCode.Alignment	         := taRightJustify;
		Hou_H_PrjCode.EditAlignment      := taRightjustify;
		Hou_H_PrjCode.MaxLength	         := m_iPrjCodeDigit;
		Hou_H_PrjCode.ImeMode		     := imDisable;
		Hou_H_PrjCode.Hankaku		     := FALSE;
		// 支払方法(定額)
		Hou_T_PrjCode.Alignment	         := taRightJustify;
		Hou_T_PrjCode.EditAlignment      := taRightjustify;
		Hou_T_PrjCode.MaxLength	         := m_iPrjCodeDigit;
		Hou_T_PrjCode.ImeMode		     := imDisable;
		Hou_T_PrjCode.Hankaku		     := FALSE;
		// 振込情報
		Fri_PrjCode.Alignment	 	     := taRightJustify;
		Fri_PrjCode.EditAlignment        := taRightjustify;
		Fri_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		Fri_PrjCode.ImeMode		         := imDisable;
		Fri_PrjCode.Hankaku		         := FALSE;
		// 期日指定振込情報
		KFri_PrjCode.Alignment	 	     := taRightJustify;
		KFri_PrjCode.EditAlignment       := taRightjustify;
		KFri_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		KFri_PrjCode.ImeMode		     := imDisable;
		KFri_PrjCode.Hankaku		     := FALSE;
		// 手形情報
		Teg_PrjCode.Alignment	 	     := taRightJustify;
		Teg_PrjCode.EditAlignment        := taRightjustify;
		Teg_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		Teg_PrjCode.ImeMode		         := imDisable;
		Teg_PrjCode.Hankaku		         := FALSE;
		// 小切手情報
		Kog_PrjCode.Alignment	 	     := taRightJustify;
		Kog_PrjCode.EditAlignment        := taRightjustify;
		Kog_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		Kog_PrjCode.ImeMode		         := imDisable;
		Kog_PrjCode.Hankaku		         := FALSE;
		// 相殺情報
		Edit09PrjCodeNum.Visible		 := TRUE;
		Edit09PrjCodeFree.Visible        := FALSE;
		Edit09PrjCodeNum.DMaxLength	     := m_iPrjCodeDigit;
		if (m_iPrjCodeAttr = 1) then						    // ｺｰﾄﾞ属性: 1=数字(前ｾﾞﾛあり)
			strFormat := StringOfChar('0',m_iPrjCodeDigit)
		else							 						// ｺｰﾄﾞ属性: 0=数字
			strFormat := '';
		Edit09PrjCodeNum.FormatStr       := strFormat;
		Edit09PrjCodeNum.Digits	         := m_iPrjCodeDigit;
   		Edit09PrjCodeNum.MaxValue        := StrToInt64(StringOfChar('9',m_iPrjCodeDigit));

    end
	else
    begin
		// 支払方法
		GridPayWay_PrjCode.Alignment	 := taLeftJustify;
		GridPayWay_PrjCode.EditAlignment := taLeftJustify;
		GridPayWay_PrjCode.MaxLength	 := m_iPrjCodeDigit;
		GridPayWay_PrjCode.ImeMode		 := imClose;
		GridPayWay_PrjCode.Hankaku		 := TRUE;
		// 優先支払詳細
		Shousai_PrjCode.Alignment	     := taLeftJustify;
		Shousai_PrjCode.EditAlignment    := taLeftJustify;
		Shousai_PrjCode.MaxLength	     := m_iPrjCodeDigit;
		Shousai_PrjCode.ImeMode		     := imClose;
		Shousai_PrjCode.Hankaku		     := TRUE;
		// 支払方法(比率)
		Hou_H_PrjCode.Alignment	         := taLeftJustify;
		Hou_H_PrjCode.EditAlignment      := taLeftJustify;
		Hou_H_PrjCode.MaxLength	         := m_iPrjCodeDigit;
		Hou_H_PrjCode.ImeMode		     := imClose;
		Hou_H_PrjCode.Hankaku		     := TRUE;
		// 支払方法(定額)
		Hou_T_PrjCode.Alignment	         := taLeftJustify;
		Hou_T_PrjCode.EditAlignment      := taLeftJustify;
		Hou_T_PrjCode.MaxLength	         := m_iPrjCodeDigit;
		Hou_T_PrjCode.ImeMode		     := imClose;
		Hou_T_PrjCode.Hankaku		     := TRUE;
		// 振込情報
		Fri_PrjCode.Alignment	 	     := taLeftJustify;
		Fri_PrjCode.EditAlignment        := taLeftJustify;
		Fri_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		Fri_PrjCode.ImeMode              := imClose;
		Fri_PrjCode.Hankaku		         := TRUE;
		// 期日指定振込情報
		KFri_PrjCode.Alignment	 	     := taLeftJustify;
		KFri_PrjCode.EditAlignment       := taLeftJustify;
		KFri_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		KFri_PrjCode.ImeMode		     := imClose;
		KFri_PrjCode.Hankaku		     := TRUE;
		// 手形情報
		Teg_PrjCode.Alignment	 	     := taLeftJustify;
		Teg_PrjCode.EditAlignment        := taLeftJustify;
		Teg_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		Teg_PrjCode.ImeMode		         := imClose;
		Teg_PrjCode.Hankaku		         := TRUE;
		// 小切手情報
		Kog_PrjCode.Alignment	 	     := taLeftJustify;
		Kog_PrjCode.EditAlignment        := taLeftJustify;
		Kog_PrjCode.MaxLength	 	     := m_iPrjCodeDigit;
		Kog_PrjCode.ImeMode		         := imClose;
		Kog_PrjCode.Hankaku		         := TRUE;
		// 相殺情報
		Edit09PrjCodeNum.Visible	     := FALSE;
		Edit09PrjCodeFree.Visible	     := TRUE;
		Edit09PrjCodeFree.TabStop		 := True;
		Edit09PrjCodeFree.ReadOnly		 := False;
		Edit09PrjCodeFree.MaxLength	     := m_iPrjCodeDigit;
	end;
end;

//**********************************************************************
//*		Proccess	:	初期処理(画面のﾌﾟﾛﾊﾟﾃｨ)
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnInitializePjSubCode ();
begin

	GridPayWay_PjSubCode.MaxLength := m_iPjSubCodeDigit;    // 支払方法
    Shousai_PjSubCode.MaxLength    := m_iPjSubCodeDigit;	// 優先支払詳細
	Hou_H_PjSubCode.MaxLength      := m_iPjSubCodeDigit;	// 支払方法(比率)
	Hou_T_PjSubCode.MaxLength      := m_iPjSubCodeDigit;	// 支払方法(定額)
	Fri_PjSubCode.MaxLength        := m_iPjSubCodeDigit;	// 振込情報
	KFri_PjSubCode.MaxLength       := m_iPjSubCodeDigit;	// 期日指定振込情報
	Teg_PjSubCode.MaxLength        := m_iPjSubCodeDigit;	// 手形情報
	Kog_PjSubCode.MaxLength        := m_iPjSubCodeDigit;	// 小切手情報

	if	(m_iPjSubCodeAttr <= 1) then    // ｺｰﾄﾞ属性: 数字
	begin
		// 支払方法
		GridPayWay_PjSubCode.Alignment      := taRightJustify;
		GridPayWay_PjSubCode.EditAlignment  := taRightjustify;
		GridPayWay_PjSubCode.MaxLength      := m_iPrjCodeDigit;
		GridPayWay_PjSubCode.ImeMode        := imDisable;
		GridPayWay_PjSubCode.Hankaku        := FALSE;
		// 優先支払詳細
		Shousai_PjSubCode.Alignment         := taRightJustify;
		Shousai_PjSubCode.EditAlignment     := taRightjustify;
		Shousai_PjSubCode.MaxLength         := m_iPrjCodeDigit;
		Shousai_PjSubCode.ImeMode           := imDisable;
		Shousai_PjSubCode.Hankaku           := FALSE;
		// 支払方法(比率)
		Hou_H_PjSubCode.Alignment           := taRightJustify;
		Hou_H_PjSubCode.EditAlignment       := taRightjustify;
		Hou_H_PjSubCode.MaxLength           := m_iPrjCodeDigit;
		Hou_H_PjSubCode.ImeMode             := imDisable;
		Hou_H_PjSubCode.Hankaku             := FALSE;
		// 支払方法(定額)
		Hou_T_PjSubCode.Alignment           := taRightJustify;
		Hou_T_PjSubCode.EditAlignment       := taRightjustify;
		Hou_T_PjSubCode.MaxLength           := m_iPrjCodeDigit;
		Hou_T_PjSubCode.ImeMode             := imDisable;
		Hou_T_PjSubCode.Hankaku             := FALSE;
		// 振込情報
		Fri_PjSubCode.Alignment             := taRightJustify;
		Fri_PjSubCode.EditAlignment         := taRightjustify;
		Fri_PjSubCode.MaxLength             := m_iPrjCodeDigit;
		Fri_PjSubCode.ImeMode               := imDisable;
		Fri_PjSubCode.Hankaku               := FALSE;
		// 期日指定振込情報
		KFri_PjSubCode.Alignment            := taRightJustify;
		KFri_PjSubCode.EditAlignment        := taRightjustify;
		KFri_PjSubCode.MaxLength            := m_iPrjCodeDigit;
		KFri_PjSubCode.ImeMode              := imDisable;
		KFri_PjSubCode.Hankaku              := FALSE;
		// 手形情報
		Teg_PjSubCode.Alignment             := taRightJustify;
		Teg_PjSubCode.EditAlignment         := taRightjustify;
		Teg_PjSubCode.MaxLength             := m_iPrjCodeDigit;
		Teg_PjSubCode.ImeMode               := imDisable;
		Teg_PjSubCode.Hankaku               := FALSE;
		// 小切手情報
		Kog_PjSubCode.Alignment             := taRightJustify;
		Kog_PjSubCode.EditAlignment         := taRightjustify;
		Kog_PjSubCode.MaxLength             := m_iPrjCodeDigit;
		Kog_PjSubCode.ImeMode               := imDisable;
		Kog_PjSubCode.Hankaku               := FALSE;
    end
	else
    begin
		// 支払方法
		GridPayWay_PjSubCode.Alignment      := taLeftJustify;
		GridPayWay_PjSubCode.EditAlignment  := taLeftJustify;
		GridPayWay_PjSubCode.MaxLength      := m_iPrjCodeDigit;
		GridPayWay_PjSubCode.ImeMode        := imClose;
		GridPayWay_PjSubCode.Hankaku		:= TRUE;
		// 優先支払詳細
		Shousai_PjSubCode.Alignment	        := taLeftJustify;
		Shousai_PjSubCode.EditAlignment     := taLeftJustify;
		Shousai_PjSubCode.MaxLength	        := m_iPrjCodeDigit;
		Shousai_PjSubCode.ImeMode		    := imClose;
		Shousai_PjSubCode.Hankaku		    := TRUE;
		// 支払方法(比率)
		Hou_H_PjSubCode.Alignment	        := taLeftJustify;
		Hou_H_PjSubCode.EditAlignment       := taLeftJustify;
		Hou_H_PjSubCode.MaxLength	        := m_iPrjCodeDigit;
		Hou_H_PjSubCode.ImeMode		        := imClose;
		Hou_H_PjSubCode.Hankaku		        := TRUE;
		// 支払方法(定額)
		Hou_T_PjSubCode.Alignment	        := taLeftJustify;
		Hou_T_PjSubCode.EditAlignment       := taLeftJustify;
		Hou_T_PjSubCode.MaxLength	        := m_iPrjCodeDigit;
		Hou_T_PjSubCode.ImeMode		        := imClose;
		Hou_T_PjSubCode.Hankaku		        := TRUE;
		// 振込情報
		Fri_PjSubCode.Alignment	 	        := taLeftJustify;
		Fri_PjSubCode.EditAlignment         := taLeftJustify;
		Fri_PjSubCode.MaxLength	 	        := m_iPrjCodeDigit;
		Fri_PjSubCode.ImeMode               := imClose;
		Fri_PjSubCode.Hankaku		        := TRUE;
		// 期日指定振込情報
		KFri_PjSubCode.Alignment	 	    := taLeftJustify;
		KFri_PjSubCode.EditAlignment        := taLeftJustify;
		KFri_PjSubCode.MaxLength	 	    := m_iPrjCodeDigit;
		KFri_PjSubCode.ImeMode		        := imClose;
		KFri_PjSubCode.Hankaku		        := TRUE;
		// 手形情報
		Teg_PjSubCode.Alignment	 	        := taLeftJustify;
		Teg_PjSubCode.EditAlignment         := taLeftJustify;
		Teg_PjSubCode.MaxLength	 	        := m_iPrjCodeDigit;
		Teg_PjSubCode.ImeMode		        := imClose;
		Teg_PjSubCode.Hankaku		        := TRUE;
		// 小切手情報
		Kog_PjSubCode.Alignment	 	        := taLeftJustify;
		Kog_PjSubCode.EditAlignment         := taLeftJustify;
		Kog_PjSubCode.MaxLength	 	        := m_iPrjCodeDigit;
		Kog_PjSubCode.ImeMode		        := imClose;
		Kog_PjSubCode.Hankaku		        := TRUE;
	end;
end;

//**********************************************************************
//*		Proccess	:	Gridの状態変更
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeConditionGrid();
begin
	// 参照
	if	(m_nRefermode = REFER) then														// ﾒｰｲﾙ会計参照ﾌﾗｸﾞ: 参照時
	begin
		CmnTreeView.DragMode :=	dmManual;

		// 基本情報
		GridKihon.Options			  := GridKihon.Options - [egoCanAppend] + [egoRowSelect];
		// 実在情報
		GridReal.Options			  := GridReal.Options - [egoCanAppend] + [egoRowSelect];
		GridRealAssociation.ReadOnly  := TRUE;
		GridRealName.ReadOnly		  := TRUE;
		GridRealNameSimple.ReadOnly   := TRUE;
		GridReal.PopupMenu			  := nil;
		// 合計情報
		GridTotal.Options			  := GridTotal.Options - [egoCanAppend] + [egoRowSelect];
		GridTotalAssociation.ReadOnly := TRUE;
		GridTotalName.ReadOnly		  := TRUE;
		GridTotalNameSimple.ReadOnly  := TRUE;
		GridTotal.PopupMenu			  := nil;

		// 支払方法
		GridPayWay.Options            := GridPayWay.Options + [egoRowSelect];   // <142> Add
		// 優先支払詳細
		GridShousai.Options 		  := GridShousai.Options + [egoRowSelect];  // <142> Add
		// 支払方法(比率)
		GridPayRatio.Options		  := GridPayRatio.Options + [egoRowSelect];
		// 支払方法(定額)
		GridPayFixed.Options		  := GridPayFixed.Options + [egoRowSelect];
		// 振込情報
		GridFurikomi.Options		  := GridFurikomi.Options + [egoRowSelect];
		// 期日指定振込情報
		GridFuriDate.Options		  := GridFuriDate.Options + [egoRowSelect];
		// 手形情報
		GridDraft.Options		  	  := GridDraft.Options + [egoRowSelect];
		// 小切手情報
		GridCheck.Options		  	  := GridCheck.Options + [egoRowSelect];
		// 相殺情報
		fnChangeConditionAllControls(False);
		// その他情報
		GridOther.Options		  	  := GridOther.Options + [egoRowSelect];
		// 名寄せ情報
		TreeViewNayose.DragMode 	  := dmManual;
		TreeViewNayose.PopupMenu	  := nil;
		GridNayose.Options		  	  := GridNayose.Options + [egoRowSelect];
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
            // 基本情報
    		GridKihonG.Options		      := GridKihonG.Options - [egoCanAppend] + [egoRowSelect];
    		// 電信送金
    		GridFurikomiGD.Options		  := GridFurikomiGD.Options + [egoRowSelect];
            // 為替手形
    		GridFurikomiGT.Options		  := GridFurikomiGT.Options + [egoRowSelect];
            // 送金小切手
    		GridFurikomiGK.Options		  := GridFurikomiGK.Options + [egoRowSelect];
            // 可変情報
            MPanel24G.Enabled             := False;
        end;
//<GA001>ED
	end
	// 以外
	else
	begin
		// 基本情報
		GridKihon.Options			  := GridKihon.Options + [egoCanAppend] - [egoRowSelect];

		// 実在情報
		GridReal.Options			  := GridReal.Options + [egoCanAppend] - [egoRowSelect];
		GridRealAssociation.ReadOnly  := FALSE;
		GridRealName.ReadOnly		  := FALSE;
		GridRealNameSimple .ReadOnly  := FALSE;
//		GridReal.PopupMenu			  := PMGrid;
		// 合計情報
		GridTotal.Options			  := GridTotal.Options + [egoCanAppend] - [egoRowSelect];
		GridTotalAssociation.ReadOnly := FALSE;
		GridTotalName.ReadOnly		  := FALSE;
		GridTotalNameSimple.ReadOnly  := FALSE;
//		GridTotal.PopupMenu			  := PMGrid;
		// 支払方法
		GridPayWay.Options		      := GridPayWay.Options - [egoRowSelect];   // <142> Add
		// 優先支払詳細
		GridShousai.Options		      := GridShousai.Options - [egoRowSelect];  // <142> Add
		// 支払方法(比率)
		GridPayRatio.Options		  := GridPayRatio.Options - [egoRowSelect];
		// 支払方法(定額)
		GridPayFixed.Options		  := GridPayFixed.Options - [egoRowSelect];
		// 振込情報
		GridFurikomi.Options		  := GridFurikomi.Options - [egoRowSelect];
		// 期日指定振込情報
		GridFuriDate.Options		  := GridFuriDate.Options - [egoRowSelect];
		// 手形情報
		GridDraft.Options		  	  := GridDraft.Options - [egoRowSelect];
		// 小切手情報
		GridCheck.Options		  	  := GridCheck.Options - [egoRowSelect];
		// その他情報
		GridOther.Options		  	  := GridOther.Options - [egoRowSelect];
		// 名寄せ情報
		GridNayose.Options		  	  := GridNayose.Options - [egoRowSelect];
//<GA001>ST
        if m_iGaikaKbn <> 0 then        // 外貨採用区分
        begin
    		GridKihonG.Options			  := GridKihonG.Options + [egoCanAppend] - [egoRowSelect];
    		// 電信送金
    		GridFurikomiGD.Options		  := GridFurikomiGD.Options - [egoRowSelect];
            // 為替手形
    		GridFurikomiGT.Options		  := GridFurikomiGT.Options - [egoRowSelect];
            // 送金小切手
    		GridFurikomiGK.Options		  := GridFurikomiGK.Options - [egoRowSelect];
        end;
//<GA001>ED

	end;
end;

//**********************************************************************
//*		Proccess	:	相殺の入力ﾊﾟｰﾂの状態変更
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/17
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeConditionAllControls(fEnabled: Boolean);
begin
{
	Edit00PayCodeFree.Enabled := fEnabled;
	Edit00PayCodeNum.Enabled  := fEnabled;
	Edit00PayName.Enabled	  := fEnabled;
	Edit01SeqNo.Enabled		  := fEnabled;
	Edit02KmkCode.Enabled	  := fEnabled;
	Edit02KmkCodeName.Enabled := fEnabled;
	Edit03HojCodeFree.Enabled := fEnabled;
	Edit03HojCodeNum.Enabled  := fEnabled;
	Edit03HojCodeName.Enabled := fEnabled;
	Edit04HojCodeFree.Enabled := fEnabled;
	Edit04HojCodeNum.Enabled  := fEnabled;
	Edit04HojCodeName.Enabled := fEnabled;
	Edit05HojCodeFree.Enabled := fEnabled;
	Edit05HojCodeNum.Enabled  := fEnabled;
	Edit05HojCodeName.Enabled := fEnabled;
	Edit06TaxCode.Enabled	  := fEnabled;
	Edit06TaxCodeName.Enabled := fEnabled;
    Edit07TaxRate.Enabled	  := fEnabled;
	Edit07TaxRateName.Enabled := fEnabled;
	Edit08OffsetPrice.Enabled := fEnabled;
}
    MPanel24.Enabled := fEnabled;

end;

(*
//**********************************************************************
//*		Proccess	:	排他制御処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnExcept():Integer;
var
	iRet	:	Integer;
	bFlg	:	Boolean;
begin
	bFlg	  := False;
	Result    := 0;
	m_cExcept := nil;

    //<01>排他制御は現状無視
	try
		m_cExcept := TMASExceptIF.Init(m_pRec);
		// 取引先関係ﾏｽﾀの排他ﾁｪｯｸ
		iRet := m_cExcept.SetExcept(522);
		if iRet <> EXCEPT_RET_OK then
		begin
			MjsMessageBoxEx('取引先マスタの排他制御でエラーが発生しました。','排他制御',mjError,mjOK,mjDefOK);
			bFlg   := True;
			result := -1;
			exit;
		end;
		// 他で更新処理が流れていないかﾁｪｯｸ
		if (m_cExcept.Status100 = 1) or (m_cExcept.Status400 = 1) then
		begin
			bFlg   := True;
			result := 99;
			exit;
		end;
	finally
		// m_cExceptがnilではなく、他で更新処理が行われている時
		if (m_cExcept <> nil) and (bFlg = True) then
		begin
			m_cExcept.ResetTerm;
			m_cExcept.Free;
			m_cExcept := nil;
		end;
	end;
end;
*) // <120>

//************************************************************************
//*		Component	:	BEnd ( TSpeedButton )
//*
//*		Event		:	OnClick
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.BEndClick(Sender: TObject);
begin
	Close ();
end;
{
//************************************************************************
//*		Component	:	BChange ( TSpeedButton )
//*
//*		Event		:	OnClick
//*		Name		:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.BChangeClick(Sender: TObject);
var
	cAppParam	:	TAppParam;
begin
	m_bChange := TRUE;

	Hide ();

    if  (Parent = nil) then
    begin
		cAppParam.iAction		:=	ACTID_DOCKINGINEND;									// 埋込通知
		cAppParam.pRecord		:=	Pointer(m_pRec);									// 管理構造体ﾎﾟｲﾝﾀ設定
		cAppParam.pActionParam	:=	nil;												// 予備ﾎﾟｲﾝﾀ設定

		TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppParam);

		Parent      := TPanel (m_pRec^.m_pOwnerPanel^);
		Align       := alClient;
		BorderStyle := bsNone;
		Position    := poDesigned;

        BChange.Caption  := '切出(&G)';
    end
    else
    begin
		cAppParam.iAction		:=	ACTID_DOCKINGOUTEND;								// 取出通知
		cAppParam.pRecord		:=	Pointer (m_pRec);									// 管理構造体ﾎﾟｲﾝﾀ設定
		cAppParam.pActionParam	:=	nil;												// 予備ﾎﾟｲﾝﾀ設定

		TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppParam);

        Parent      := nil;
        Align       := alNone;
        BorderStyle := bsSizeable;
        Position    := poDefaultPosOnly;

        BChange.Caption  := '埋込(&G)';
    end;

	Show ();

	m_bChange := FALSE;
end;
} // <108>

//**********************************************************************
//*		Proccess	:	ツリー作成(TOP)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMakeTree();
var
	pItemRec	: PTreeViewRec;
	cNode		: TTreeNode;
	cTopNode	: TTreeNode;
	Qe			: TMQuery;
	sDspName	: String;
begin
	m_bChange := True;

	// 支払先体系
	New (pItemRec);
	pItemRec^.nSumKbn  := TREE_SYSTEM;
	pItemRec^.sHojCode := _TreeSystemCode;
	pItemRec^.sName	   := '支払先体系';
    pItemRec^.eNCode   := 0;

	cTopNode := CmnTreeView.Items.AddChildObject (nil, pItemRec^.sName, pItemRec);

	cTopNode.ImageIndex	   := TREE_INDEX_SYSTEM;
	cTopNode.SelectedIndex := cTopNode.ImageIndex + 1;

	Qe := TMQuery.Create (Self);

	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);	// DBとMQueryの接続

		with (Qe) do
		begin
			Close ();
			SQL.Clear();
			SQL.Add('SELECT NCode,SumKbn,GCode,NMK,SyokuchiKbn,PayRootKbn FROM MTOKUI ');
			SQL.Add('WHERE  RDelKbn = 0 AND SumKbn <> 9 ');
// <174> Mod
//			SQL.Add('AND ((SumKbn = 0 and HojyoKbn2 = 1) or SumKbn = 1) ');
			SQL.Add('AND ((SumKbn = 0 or SumKbn = 1) and HojyoKbn2 = 1) ');
// <174> Mod
            SQL.Add('AND TemplateKbn = 0');                 // <102>
			SQL.Add('ORDER BY SumKbn,GCode ');

			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
	            Exit;
			end;

			while (not EOF) do
			begin
				New (pItemRec);
				if GetFld('SyokuchiKbn').AsInteger = 1 then	// 諸口の時
					pItemRec^.nSumKbn := TREE_GENERAL
				else
					pItemRec^.nSumKbn := GetFld('SumKbn' ).AsInteger;			// 実在/合計区分

				pItemRec^.sHojCode := GetFld('GCode'	 ).AsString;			// 補助ｺｰﾄﾞ
				pItemRec^.sName	   := GetFld('NMK').AsString;          			// 簡略名称
                pItemRec^.eNCode   := GetFld('NCode').AsFloat;                  // 内部ｺｰﾄﾞ

				sDspName := fnEditCode(MASTER_CUSTOMER,pItemRec^.sHojCode);
				sDspName := sDspName+' '+pItemRec^.sName;
				cNode := CmnTreeView.Items.AddChildObject (cTopNode, sDspName, pItemRec);

				case pItemRec^.nSumKbn of
					0:	// 実在
					begin
						cNode.ImageIndex    := TREE_INDEX_CHILD;
						cNode.SelectedIndex := cNode.ImageIndex + 1;
					end;
					1:	// 合計
					begin
						if GetFld('PayRootKbn').AsInteger = 0 then	// 名寄せ区分
						begin
							cNode.ImageIndex	:= TREE_INDEX_PARENT_INVALID;
							cNode.SelectedIndex := cNode.ImageIndex + 1;
						end
						else
						begin
							cNode.ImageIndex	:= TREE_INDEX_PARENT;
							cNode.SelectedIndex := cNode.ImageIndex + 1;
						end;
					end;
					TREE_GENERAL:
					begin
						cNode.ImageIndex    := TREE_INDEX_GENERAL;
						cNode.SelectedIndex := cNode.ImageIndex + 1;
					end;
				end;

				Next ();
			end;
		end;

		cTopNode.Expanded := True;
		m_bChange := False;
	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	Queryｴﾗｰﾒｯｾｰｼﾞ表示処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Qe	:	ｴﾗｰになったQuery
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnErrorMessageDsp(Qe: TMQuery);
begin
	case m_cComArea.m_MsgStd.GetDBCode(Qe) of
		1:
		begin
			//	最大登録件数をｵｰﾊﾞｰしました
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 0,1);
    		MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		2:
		begin
			//	･･･のため削除できません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,5);
    		MjsMessageBoxEx(Self,'固定体系区分が固定' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		3:
		begin
			//	･･･することができません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    		MjsMessageBoxEx(Self,'子供が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		4:
		begin
			//	･･･することができません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    		MjsMessageBoxEx(Self,'仕訳が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		5:
		begin
			//	･･･することができません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    		MjsMessageBoxEx(Self,'諸口、総合計を削除する時にその他のマスタが登録済みの為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		6:
		begin
			//	･･･することができません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    		MjsMessageBoxEx(Self,'支払予定データが存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		7:
		begin
			//	･･･することができません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    		MjsMessageBoxEx(Self,'部署情報が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		8:
		begin
			//	･･･することができません
			m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
    		MjsMessageBoxEx(Self,'未連結仕訳(部署or分散)が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		else
		begin
			m_cComArea.m_MsgStd.GetMsgDB( MjsMsgRec, Qe );
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,FALSE );
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	コード編集処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	MasKbn	:	ﾏｽﾀ区分
//*						CODE	:	編集前の補助ｺｰﾄﾞ
//*		Return		:	編集後の補助ｺｰﾄﾞ
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnEditCode(MasKbn: Integer; CODE: String):String;
var
	Kbn	: Integer;
	iwk	: Int64;
begin
    Kbn:=0;

	case MasKbn of
		MASTER_SUBJECT    :	Kbn	:= 0;								// 勘定科目
		MASTER_SUBJECTPLUS:	Kbn	:= 1;								// 細目科目
		MASTER_BANK       :	Kbn	:= 2;								// 銀行
		MASTER_CUSTOMER	  :	Kbn	:= 3;								// 取引先
		MASTER_STAFF	  :	Kbn	:= 4;								// 社員
		MASTER_GENERAL01  :	Kbn	:= 5;								// 汎用補助①
		MASTER_GENERAL02  :	Kbn	:= 6;								// 汎用補助②
		MASTER_GENERAL03  :	Kbn	:= 7;								// 汎用補助③
		MASTER_GENERAL04  :	Kbn	:= 8;								// 汎用補助④
		MASTER_GENERAL05  :	Kbn	:= 9;								// 汎用補助⑤
		MASTER_SECTION	  :	Kbn	:= 10;								// 部門

        MKBN_PROJECT1     : Kbn	:= 16;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT2     : Kbn	:= 17;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT3     : Kbn	:= 18;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT4     : Kbn	:= 19;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT5     : Kbn	:= 20;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT6     : Kbn	:= 21;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT7     : Kbn	:= 22;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT8     : Kbn	:= 23;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT9     : Kbn	:= 24;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
        MKBN_PROJECT10    : Kbn	:= 25;								// <114>ﾌﾟﾛｼﾞｪｸﾄ

        MKBN_SEG1         : Kbn	:= 26;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG2         : Kbn	:= 27;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG3         : Kbn	:= 28;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG4         : Kbn	:= 29;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG5         : Kbn	:= 30;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG6         : Kbn	:= 31;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG7         : Kbn	:= 32;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG8         : Kbn	:= 33;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG9         : Kbn	:= 34;								// <114>ｾｸﾞﾒﾝﾄ
        MKBN_SEG10        : Kbn	:= 35;								// <114>ｾｸﾞﾒﾝﾄ
	end;

//    if MasKbn = MASTER_SEGMENT      then Kbn	:= 11;						// ｾｸﾞﾒﾝﾄ
    if MasKbn = MASTER_CONSTRUCT    then Kbn	:= 15;						// 工事

	// 数値
	if m_arAdoptInfo[Kbn].nCodeAttribute <> 2 then
	begin
		iwk := StrToInt64(CODE);												//<#1>(｢StrToInt｣→｢StrToInt64｣変更)
		case m_arAdoptInfo[Kbn].nCodeAttribute of
			// 数値
			0: Result := IntToStr(iwk);
			// 数値(前0あり)
			1: Result := Format('%.'+IntToStr(m_arAdoptInfo[Kbn].nCodeDigit)+'d', [iwk]);
		end;
	end
	// 文字
	else
		Result := CODE;
end;

//**********************************************************************
//*		Proccess	:	実在情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetRealInfo();
var
	strHojCode	: String;
	strFormat	: String;
	Qe			: TMQuery;
begin
	m_bChange := TRUE;

	Qe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);	// DBとMQueryの接続

	DSReal.DataSet := nil;

	MemReal.Close;
	MemReal.Open;

// <173> MOD-STR
//	with (m_Qe) do
	with (Qe) do
// <173> MOD-END
	begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT MT.NCode,MF.FusenKbn,MF.FusenCmnt,MT.GCode,MT.Renso,MT.NM,MT.NMK,PI.BunkaiKbn ');
		SQL.Add(',PI.SateiKbn ');                           // <126> Add
		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN MFusenInfo MF ON (MF.NCOde = MT.NCode and MF.MasterKbn = :MK) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY PI ON (PI.BaseNCode  = MT.NCode)   ');
		SQL.Add('WHERE  MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0 ');
        SQL.Add('   and MT.TemplateKbn = 0');               // <102>
		SQL.Add('ORDER BY MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;

		//	ｴﾗｰの判定
		if Open = False then
		begin
// <173> MOD-STR
//			fnErrorMessageDsp(m_Qe);
			fnErrorMessageDsp(Qe);
// <173> MOD-END
            Qe.Close;
			Qe.Free;
            Exit;
		end;

		while (not EOF) do
		begin
			strHojCode := FieldByName ('GCode').AsString;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemReal.Append;
			MemReal.FieldByName('grTag'			).Assign(fnGetBitmapSelectedTag(FieldByName('FusenKbn').AsInteger));
			MemReal.FieldByName('strComment'    ).AsString  := GetFld('FusenCmnt' ).AsString;	// 付箋ｺﾒﾝﾄ
			MemReal.FieldByName('ExNCode'       ).AsFloat   := GetFld('NCode'     ).AsFloat;	// 内部ｺｰﾄﾞ
			MemReal.FieldByName('strHojCode'    ).AsString  := strHojCode;						// 補助ｺｰﾄﾞ(編集後)
			MemReal.FieldByName('BaseHojCode'   ).AsString  := GetFld('GCode'     ).AsString;	// 補助ｺｰﾄﾞ(編集前)
			MemReal.FieldByName('strAssociation').AsString  := GetFld('Renso'     ).AsString;	// 連想
			MemReal.FieldByName('strName'       ).AsString  := GetFld('NM'        ).AsString;	// 正式名称
			MemReal.FieldByName('strNameSimple' ).AsString  := GetFld('NMK'       ).AsString;	// 簡略名称

// <142-2> 2007/08/23 H.Kawato Del Start 初期処理でレコードを作製、かつ次レコードの取得ができなくなる為
{
			if GetFld('BunkaiKbn').IsNull then
// <142> 2007/02/20 H.Kawato Mod Start
//				fnUpdatePayPtnInfo(Qe,GetFld('NCode').AsFloat);
            begin
				fnUpdatePayPtnInfo(GetFld('NCode').AsFloat);
				fnUpdateDefPayPtnInfo(Qe,GetFld('NCode').AsFloat);
            end;
// <142> 2007/02/20 H.Kawato Mod End
}
// <142-2> 2007/08/23 H.Kawato Del End
			MemReal.FieldByName('ApartData'     ).AsInteger := GetFld('BunkaiKbn' ).AsInteger;	// 分解方法
            MemReal.FieldByName('SateiData'     ).AsInteger := GetFld('SateiKbn'  ).AsInteger;	// 査定方法 <126>

			MemReal.Post;
			next;
		end;
	end;
    Qe.Close;
	Qe.Free;

	MemReal.First;

	DSReal.DataSet := MemReal;

	m_bChange := False;
end;

//**********************************************************************
//*		Proccess	:	合計情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetTotalInfo();
var
	strHojCode	: String;
	strFormat	: String;
	Qe			: TMQuery;
begin
	m_bChange := TRUE;

	Qe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);	// DBとMQueryの接続

	DSTotal.DataSet := nil;

	MemTotal.Close;
	MemTotal.Open;

// <173> MOD-STR
//	with (m_Qe) do
	with (Qe) do
// <173> MOD-END
	begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT MT.NCode,MF.FusenKbn,MF.FusenCmnt,MT.GCode,MT.Renso,MT.NM,MT.NMK,PI.BunkaiKbn ');
		SQL.Add(',PI.SateiKbn ');                           // <126> Add
		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN MFusenInfo MF ON (MF.NCode = MT.NCode and MF.MasterKbn = :MK) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY PI ON (PI.BaseNCode = MT.NCode) ');
		SQL.Add('WHERE  MT.RDelKbn = 0 AND MT.SumKbn = 1 ');    //採用区分に無関係に合計は全て表示？
        SQL.Add('   AND MT.TemplateKbn = 0');               // <102>        
		SQL.Add('ORDER BY MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;

		//	ｴﾗｰの判定
		if Open = False then
		begin
// <173> MOD-STR
//			fnErrorMessageDsp(m_Qe);
			fnErrorMessageDsp(Qe);
// <173> MOD-END
 	 		Qe.Close;
			Qe.Free;
            Exit;
		end;

		while (not EOF) do
		begin
			strHojCode := FieldByName ('GCode').AsString;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemTotal.Append;

			MemTotal.FieldByName('grTag'		 ).Assign(fnGetBitmapSelectedTag(FieldByName('FusenKbn').AsInteger));
			MemTotal.FieldByName('strComment'    ).AsString  := GetFld('FusenCmnt'  ).AsString;	    // 付箋ｺﾒﾝﾄ
			MemTotal.FieldByName('ExNCode'       ).AsFloat   := GetFld('NCode'      ).AsFloat;	    // 内部ｺｰﾄﾞ																								    // 付箋
			MemTotal.FieldByName('strHojCode'    ).AsString  := strHojCode;						    // 補助ｺｰﾄﾞ(編集後)
			MemTotal.FieldByName('BaseHojCode'   ).AsString  := GetFld('GCode'      ).AsString;	    // 補助ｺｰﾄﾞ(編集前)
			MemTotal.FieldByName('strAssociation').AsString  := GetFld('Renso'      ).AsString;	    // 連想
			MemTotal.FieldByName('strName'       ).AsString  := GetFld('NM'         ).AsString;	    // 正式名称
			MemTotal.FieldByName('strNameSimple' ).AsString  := GetFld('NMK'        ).AsString;	    // 簡略名称

// <142-2> 2007/08/23 H.Kawato Del Start 初期処理でレコードを作製、かつ次レコードの取得ができなくなる為
{
			if GetFld('BunkaiKbn').IsNull then
// <142> 2007/02/20 H.Kawato Mod Start
//				fnUpdatePayPtnInfo(Qe,GetFld('NCode').AsFloat);
            begin
				fnUpdatePayPtnInfo(GetFld('NCode').AsFloat);
				fnUpdateDefPayPtnInfo(Qe,GetFld('NCode').AsFloat);
            end;
// <142> 2007/02/20 H.Kawato Mod End
}
// <142-2> 2007/08/23 H.Kawato Del End
			MemTotal.FieldByName('ApartData'     ).AsInteger := GetFld('BunkaiKbn'  ).AsInteger;	// 分解方法
            MemTotal.FieldByName('SateiData'     ).AsInteger := GetFld('SateiKbn'  ).AsInteger;     // 査定方法 <126> Add

			MemTotal.Post;
			next;
		end;
	end;
    Qe.Close;
	Qe.Free;

	MemTotal.First;

	DSTotal.DataSet := MemTotal;

	m_bChange := False;
end;

//**********************************************************************
//*		Proccess	:	付箋表示処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2000/08/23
//*		Parameter	:	FK		:	付箋区分(0:なし1:赤,2:緑,3:青,4:ｵﾚﾝｼﾞ)
//*						Dispose	:	処理対象(実在:DISPOSE_REAL/合計:DISPOSE_TOTAL)
//*		Return		:	Nothing
//**********************************************************************
procedure TJNTCRP004007f.fnFusenDsp(FK,Dispose: Integer);
begin
{
	case Dispose of
		DISPOSE_REAL:	// 実在
		begin
			case FK of
				0:	TGraphicField(MemReal.FieldByName('grTag')).Clear;
				1:	TGraphicField(MemReal.FieldByName('grTag')).Assign(PMGridTag01.Bitmap);
				2:	TGraphicField(MemReal.FieldByName('grTag')).Assign(PMGridTag03.Bitmap);
				3:	TGraphicField(MemReal.FieldByName('grTag')).Assign(PMGridTag02.Bitmap);
				4:	TGraphicField(MemReal.FieldByName('grTag')).Assign(PMGridTag04.Bitmap);
			end;
		end;
		DISPOSE_TOTAL:	// 合計
		begin
			case FK of
				0:	TGraphicField(MemTotal.FieldByName('grTag')).Clear;
				1:	TGraphicField(MemTotal.FieldByName('grTag')).Assign(PMGridTag01.Bitmap);
				2:	TGraphicField(MemTotal.FieldByName('grTag')).Assign(PMGridTag03.Bitmap);
				3:	TGraphicField(MemTotal.FieldByName('grTag')).Assign(PMGridTag02.Bitmap);
				4:	TGraphicField(MemTotal.FieldByName('grTag')).Assign(PMGridTag04.Bitmap);
			end;
		end;
	end;
}
end;

//************************************************************************
//*		Component		:	CmnGrid ( TdxDBGrid )
//*							Gridの共通ｲﾍﾞﾝﾄ
//*		Event			:	OnMouseMove
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	nHojCodeSelect	: Extended;
	strHojCodeSelect: String;
begin
	inherited;

	nHojCodeSelect		:= 0;
	strHojCodeSelect	:= '';

	if	((Y <= TdxDBGrid (Sender).HeaderPanelHeight) or (X <= TdxDBGrid (Sender).GrIndicatorWidth ) or
		 (X >= (TdxDBGrid (Sender).GrIndicatorWidth + TdxDBGrid (Sender).Columns [0].Width))) then
	begin
		m_nHintPosition		:= 0;
		m_strHintPosition	:= '';

		TdxDBGrid (Sender).Hint		:= '';
		TdxDBGrid (Sender).ShowHint	:= FALSE;

		Exit;
	end;

	if	((TdxDBGrid (Sender).GetNodeAt (X, Y) <> nil) and
		 (not VarIsNull (TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [1]))) then
	begin
		if	(m_nCurCodeAttribute <= 1) then
			nHojCodeSelect		:= TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [1]
		else
			strHojCodeSelect	:= TdxTreelistNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [1];

		if	(((m_nCurCodeAttribute <= 1) and (nHojCodeSelect <> m_nHintPosition)) or
			 ((m_nCurCodeAttribute  = 2) and (CompareStr (strHojCodeSelect, m_strHintPosition) <> 0))) then
		begin
			m_nHintPosition		:= nHojCodeSelect;
			m_strHintPosition	:= strHojCodeSelect;

			TdxDBGrid (Sender).Hint		:= '';
			TdxDBGrid (Sender).ShowHint	:= FALSE;

			Exit;
		end;

		if	(TdxDBGrid (Sender).ShowHint and
			(((m_nCurCodeAttribute <= 1) and (nHojCodeSelect = m_nHintPosition)) or
			 ((m_nCurCodeAttribute  = 2) and (CompareStr (strHojCodeSelect, m_strHintPosition) = 0)))) then
			Exit;

		if	(VarIsNull (TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [5])) then
			Exit;

		if	(TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [5] <> '') then
		begin
			TdxDBGrid (Sender).Hint		:= TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [5];
			TdxDBGrid (Sender).ShowHint	:= TRUE;
		end;
	end
	else
	begin
		m_nHintPosition		:= 0;
		m_strHintPosition	:= '';

		TdxDBGrid (Sender).Hint		:= '';
		TdxDBGrid (Sender).ShowHint	:= FALSE;
	end;
end;

//************************************************************************
//*		Component		:	PMGrid(TPopupMenu)
//*							ポップアップで付箋の種類表示
//*		Event			:	OnPopup
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMGridPopup(Sender: TObject);
var
	cMemData	: TdxMemData;
	nCount		: Integer;
	nTagDivision: Integer;
	nTagWork	: Integer;
	strHojCode	: String;
    ExHojCode   : Extended;
begin
    cMemData    :=  nil;
    strHojCode  :=  '';

	if (Tab.Items.Selected = TAB_REAL) then		    // 実在情報
		cMemData := MemReal
	else if (Tab.Items.Selected = TAB_TOTAL) then	// 合計情報
		cMemData := MemTotal;

	if	((m_nCurCodeAttribute <= 1) and (cMemData.FieldByName ('strHojCode').AsString <> '')) then
		strHojCode := Format ('%.16d', [StrToInt64 (Trim (cMemData.FieldByName ('strHojCode').AsString))])
	else
		strHojCode := cMemData.FieldByName ('strHojCode').AsString;

    //内部ｺｰﾄﾞ取得
    ExHojCode :=cMemData.FieldByName ('ExNCode').AsFloat;

	if	(strHojCode = '') then
	begin
//		PMGridTagOff.Visible	 := FALSE;
//		PMGridTagComment.Visible := FALSE;

		for	nCount := 1 to 4 do
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Enabled	:= FALSE;
		Exit;
	end;

	for	nCount := 1 to 4 do
		TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Enabled	:= TRUE;

	nTagDivision := fnGetDivisionSelectedTag (ExHojCode);

	if	(nTagDivision > 0) then
	begin
//		PMGridTagOff.Visible	 := TRUE;
//		PMGridTagComment.Visible := TRUE;

		if	(nTagDivision = 2) then
			nTagWork := 3
		else if	(nTagDivision = 3) then
			nTagWork := 2
		else
			nTagWork := nTagDivision;

//		PMGridTagOff.Bitmap	:= TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nTagWork]))).Bitmap;

		for	nCount := 1 to 4 do
		begin
			if (nTagWork = nCount) then
				TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible	:= FALSE
			else
				TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible	:= TRUE;
		end;
	end
	else
	begin
//		PMGridTagOff.Visible	 := FALSE;
//		PMGridTagComment.Visible := FALSE;

		for	nCount := 1 to 4 do
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible	:= TRUE;
	end;
end;

//**********************************************************************
//*		Proccess	:	付箋区分を取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	付箋区分
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetDivisionSelectedTag(ExHojCode: Extended): Integer;
var
	nTagDivision: Integer;
begin
	nTagDivision := 0;

	with (m_Qe) do

	begin
		Close ();
		SQL.Clear();
{
		SQL.Add('SELECT FusenKbn FROM MFusenInfo ');
		SQL.Add('WHERE  MasterKbn = :MK AND HojyoCode = :HC');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('HC').AsString	 := strHojCode;
}
		SQL.Add('SELECT FusenKbn FROM MFusenInfo ');
		SQL.Add('WHERE  MasterKbn = :MK AND NCode = :HC');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('HC').AsFloat	 := ExHojCode;

		Open ();

		if (not EOF) then
			nTagDivision := FieldByName ('FusenKbn').AsInteger;
    end;

	Result := nTagDivision;
end;

(*
//************************************************************************
//*		Component		:	PMGridTagOff(TMenuItem)
//*							はがす(Grid)
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMGridTagOffClick(Sender: TObject);
var
	nTagKind    :   Integer;
begin

	if      ( TMenuItem (Sender).Name = PMGridTagOff.Name ) then
		nTagKind := 0
	else if	( TMenuItem (Sender).Name = PMGridTagItem01.Name ) then
		nTagKind := 1
	else if	( TMenuItem (Sender).Name = PMGridTagItem02.Name ) then
		nTagKind := 3
	else if	( TMenuItem (Sender).Name = PMGridTagItem03.Name ) then
		nTagKind := 2
	else if	( TMenuItem (Sender).Name = PMGridTagItem04.Name ) then
		nTagKind := 4
	else
		nTagKind := 0;

	if      ( Tab.Items.Selected = 0 ) then	// 実在情報
		fnSetTagInfoGrid(0, nTagKind)
	else if ( Tab.Items.Selected = 1 ) then // 合計情報
		fnSetTagInfoGrid(1, nTagKind);

end;
*) // <120>

//**********************************************************************
//*		Proccess	:	付箋情報をセット
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nDivision	:	実在:0/合計:1
//*						nTagKind	:	付箋区分
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetTagInfoGrid(nDivision: Integer; nTagKind: Integer);
var
	cMemData	: TdxMemData;
	nTagKindWork: Integer;
	strHojCode	: String;
    ExNCode     : Extended;
begin
	if (nDivision = 0) then	 													// 実在/合計区分: 0=実在
		cMemData := MemReal
	else					 													// 実在/合計区分: 1=合計
		cMemData := MemTotal;

	if	(Trim (cMemData.FieldByName ('strHojCode').AsString) = '') then
		Exit;

	if	(m_nCurCodeAttribute <= 1) then
		strHojCode := Format ('%.16d', [StrToInt64 (Trim (cMemData.FieldByName ('strHojCode').AsString))])
	else
		strHojCode := cMemData.FieldByName ('strHojCode').AsString;

    ExNCode := cMemData.FieldByName ('ExNCode').AsFloat;

	if	(fnUpdateMasterRecordMFusenInfo (ExNCode, nTagKind)) then
		nTagKindWork := nTagKind
	else
		nTagKindWork := 0;

	fnUpdateMemDataRecord (nDivision, strHojCode, nTagKindWork);
end;

//**********************************************************************
//*		Proccess	:	付箋情報を更新
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	strHojCode	:	補助ｺｰﾄﾞ
//*						nTagKind	:	付箋区分
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordMFusenInfo (ExNCode: Extended; var nTagKind: Integer): Boolean;
begin
	m_cDataModule.BeginTran (m_cDBSelect);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT FusenKbn FROM MFusenInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND NCode = :HC');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('HC').AsFloat	 := ExNCode;

		Open ();

		if (not EOF) then
		begin
			if ((nTagKind = 0) or (FieldByName ('FusenKbn').AsInteger = nTagKind)) then
			begin
				nTagKind := 0;

				Close();
				SQL.Clear();
				SQL.Add('DELETE FROM MFusenInfo ');
				SQl.Add('WHERE  MasterKbn = :MK AND NCode = :HC');

			end
			else
			begin
				Close();
				SQL.Clear();
				SQL.Add('UPDATE MFusenInfo SET FusenKbn = :FK, FusenCmnt = '''' ');
                //NCodeには必要ﾏｽﾀの内部ｺｰﾄﾞをｾｯﾄ
                SQL.Add(',NCode = :HC                                             ');
				SQL.Add('WHERE MasterKbn = :MK AND NCOde = :HC');

				ParamByName ('FK').AsInteger := nTagKind;
			end;

			ParamByName ('MK').AsInteger  := MASTER_CUSTOMER;
			ParamByName ('HC').AsFloat    := ExNCode;

			if	(not ExecSQL ()) then
			begin
				fnErrorMessageDsp(m_Qe);
				m_cDataModule.Rollback (m_cDBSelect);									// ﾛｰﾙﾊﾞｯｸ(破棄)
				Result := FALSE;
				Exit;
			end;

			m_cDataModule.Commit (m_cDBSelect);											// ｺﾐｯﾄ(反映)

			Result := TRUE;
			Exit;
		end;

		Close ();
	end;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();;

        //NCodeには必要ﾏｽﾀの内部ｺｰﾄﾞをｾｯﾄ
        SQL.Add('INSERT INTO MFusenInfo (MasterKbn, NCode, Subcode, NCode, FusenKbn, FusenCmnt) ');
        SQL.Add('Values(:MK,:HC,0,:HC,:FK, '''')');

		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('HC').AsFloat	 := ExNCode;
		ParamByName ('FK').AsInteger := nTagKind;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			m_cDataModule.Rollback(m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)
			Result := FALSE;
			Exit;
		end;
	end;

	m_cDataModule.Commit(m_cDBSelect);													// ｺﾐｯﾄ(反映)

	Result := TRUE;
end;

//**********************************************************************
//*		Proccess	:	MemDataの付箋情報変更
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nDivision	:	実在(0)/合計(1)
//*						strHojCode	:	補助ｺｰﾄﾞ
//*						nTagKind	:	付箋区分
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnUpdateMemDataRecord(nDivision: Integer; strHojCode: String; nTagKind: Integer);
var
	cMemData : TdxMemData;
	nRetRecNo: Integer;
	strFormat: String;
begin
	if (m_nCurCodeAttribute <= 1) then
	begin
		case (m_nCurCodeAttribute) of
			0:	strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
			1:	strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
		end;

		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
	end;

	if	(nDivision = 0) then															// 実在/合計区分: 0=実在
		cMemData := MemReal
	else																				// 実在/合計区分: 1=合計
		cmemData := MemTotal;

	nRetRecNo := cMemData.GetRecNoByFieldValue (strHojCode, 'strHojCode');

	if	(nRetRecNo > 0) then
	begin
		if (nRetRecNo = 1) then
			cMemData.First ()
		else if	(nRetRecNo = cMemData.RecordCount) then
			cMemData.Last ()
		else
			cMemData.RecNo := nRetRecNo;

		cMemData.Edit();
		cMemData.FieldByName('grTag').Assign (fnGetBitmapSelectedTag (nTagKind));

		if (nTagKind = 0) then
			cMemData.FieldByName('strComment').AsString	:= '';

		m_FusenFlg := True;
		cMemData.Post ();
		m_FusenFlg := False;
	end;
end;

//**********************************************************************
//*		Proccess	:	選択されたBitmap情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nSelectedTag	:	選択されたBitmap
//*		Return		:	TBitmap
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetBitmapSelectedTag (nSelectedTag: Integer): TBitmap;
var
	bmpTag	: TBitmap;
begin
	bmpTag := nil;

	case (nSelectedTag) of
		1: bmpTag := PMTreeViewTag01.Bitmap;
   		2: bmpTag := PMTreeViewTag03.Bitmap;
        3: bmpTag := PMTreeViewTag02.Bitmap;
		4: bmpTag := PMTreeViewTag04.Bitmap;
	end;
	Result := bmpTag;
end;

(*
//************************************************************************
//*		Component		:	PMGridTagComment(TMenuItem)
//*							備考修正(Grid)
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMGridTagCommentClick(Sender: TObject);
var
	cMemData	:   TdxMemData;
	cMasDlgParam:   TJNTMasDLGParam;
	cMasDlgIF   :   TJNTMASFUSENBIKODLGIF;
	nCount		:   Integer;
	nTagKindWork:   Integer;
	nDivision	:   Integer;
	fIgnore		:   Boolean;
begin

	nTagKindWork    :=  0;
	fIgnore		    :=  FALSE;

	if ( TMenuItem (Sender).Name = PMGridTagComment.Name ) then
	begin
		for	nCount := 1 to 4 do
		begin
			if ( not TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible ) then
			begin
				case (nCount) of
					1:  nTagKindWork	:= 1;
					2:  nTagKindWork	:= 3;
					3:  nTagKindWork	:= 2;
					4:  nTagKindWork	:= 4;
				end;
			end;
		end;

		fIgnore	:= TRUE;
	end
	else if	( TMenuItem (Sender).Name = PMGridTagItem01Ex.Name ) then
		nTagKindWork	:= 1
	else if	( TMenuItem (Sender).Name = PMGridTagItem02Ex.Name ) then
		nTagKindWork	:= 3
	else if	( TMenuItem (Sender).Name = PMGridTagItem03Ex.Name ) then
		nTagKindWork	:= 2
	else if	( TMenuItem (Sender).Name = PMGridTagItem04Ex.Name ) then
		nTagKindWork	:= 4
	else
		Exit;

	if      ( Tab.Items.Selected = 0 ) then // 実在情報
	begin
		cMemData  := MemReal;
		nDivision := 0;
	end
	else if ( Tab.Items.Selected = 1 ) then	// 合計情報
	begin
		cMemData  := MemTotal;
		nDivision := 1;
	end;

	if ( not fIgnore ) then
		fnSetTagInfoGrid(nDivision, nTagKindWork);

	cMasDlgIF := TJNTMASFUSENBIKODLGIF.Create ();
	cMasDlgIF.Init(Pointer (m_pRec));

	cMasDlgParam := TJNTMasDLGParam.CreateParam ();

	cMasDlgParam.m_iMasterkbn := MASTER_CUSTOMER;								// ﾏｽﾀ区分
	cMasDlgParam.m_iKmkCode	  := 0;												// 科目ｺｰﾄﾞ
	cMasDlgParam.m_iSubCode	  := 0;												// 科目別補助ｺｰﾄﾞ

	if	((m_nCurCodeAttribute <= 1) and (cMemData.FieldByName ('strHojCode').AsString <> '')) then
		cMasDlgParam.m_sHojyoCode := Format ('%.16d', [StrToInt64(Trim (cMemData.FieldByName ('strHojCode').AsString))])
	else
		cMasDlgParam.m_sHojyoCode := cMemData.FieldByName ('strHojCode').AsString;

	cMasDlgParam.m_iFusenKbn := nTagKindWork;									// 付箋区分
	cMasDlgParam.m_pApRec	 := Pointer (m_pRec);								// TMjsAppRecord

	if ( cMasDlgIF.DoDlg (cMasDlgParam) = mrOK ) then							// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	begin
		with (m_Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT FI.FusenCmnt FROM MFusenInfo FI          ');
            SQL.Add('Left outer Join MTOKUI MT on                    ');
            SQL.Add('FI.HojyoCode = MT.NCode                         ');
			SQL.Add('WHERE FI.MasterKbn = :MK AND MT.GCode = :HC     ');

			ParamByName ('MK').AsInteger := cMasDlgParam.m_iMasterkbn;
			ParamByName ('HC').AsString	 := cMasDlgParam.m_sHojyoCode;

			Open ();

			cMemData.Edit();

			if (not EOF) then
				cMemData.FieldByName ('strComment').AsString := FieldByName ('FusenCmnt').AsString
			else
				cMemData.FieldByName ('strComment').AsString := '';

			cMemData.Post ();
		end;
	end;

	cMasDlgParam.Free ();

	cMasDlgIF.Term ();
	cMasDlgIF.Free ();

end;
*) // <120>

//************************************************************************
//*		Component		:	PMTreeView(TPopupMenu)
//*							TreeViewのPopup
//*		Event			:	OnPopup
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMTreeViewPopup(Sender: TObject);
var
	nCount		: Integer;
	nTagDivision: Integer;
	nTagWork	: Integer;
begin
	if (CmnTreeView.Items.Count <= 0) then
	begin
		for	nCount := 0 to PMTreeView.Items.Count - 1 do
			PMTreeView.Items[nCount].Enabled := FALSE;
		Exit;
	end;

	m_cNodeRightClick			:= CmnTreeView.Selected;
	m_cNodeRightClick.Selected	:= TRUE;

	if ((PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_SYSTEM    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_SYSTEM_SUM)) then
		Abort ();

	if  ((PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_CHILD_SUM ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_PARENT_SUM)) then
		PMTreeViewDelete.Visible := FALSE
	else
	begin
		PMTreeViewDelete.Visible := TRUE;

		if (m_nReferMode <> REFER) then												// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照以外
		begin
			if (PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_GENERAL) then
			begin
				if (fnCheckDeletePermitGeneralRec ()) then
					PMTreeViewDelete.Enabled := TRUE
				else
					PMTreeViewDelete.Enabled := FALSE;
			end
			else if	(PTreeViewRec(CmnTreeView.Selected.Data)^.nSumKbn = TREE_PARENT) then
			begin
				if (fnCheckDeletePermitParentRec(PTreeViewRec (CmnTreeView.Selected.Data)^.sHojCode)) then
					PMTreeViewDelete.Enabled := TRUE
				else
					PMTreeViewDelete.Enabled := FALSE;
			end
			else
				PMTreeViewDelete.Enabled := TRUE;
		end
		else
			PMTreeViewDelete.Enabled := FALSE;
	end;

	for	nCount := 1 to 4 do
	begin
		if (m_nReferMode <> REFER) then												// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照以外
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Enabled	:= TRUE
		else
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Enabled	:= FALSE;
	end;

	nTagDivision := fnGetDivisionSelectedTag (PTreeViewRec (CmnTreeView.Selected.Data)^.eNCode);

	if (nTagDivision > 0) then
	begin
		PMTreeViewTagOff.Visible	 := TRUE;
		PMTreeViewTagComment.Visible := TRUE;

		if (nTagDivision = 2) then
			nTagWork := 3
		else if	(nTagDivision = 3) then
			nTagWork := 2
		else
			nTagWork := nTagDivision;

		PMTreeViewTagOff.Bitmap	:= TMenuItem(MJSFindCtrl(Self, Format (_PMItemTVTag, [nTagWork]))).Bitmap;

		for	nCount := 1 to 4 do
		begin
			if (nTagWork = nCount) then
				TMenuItem(MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible	:= FALSE
			else
				TMenuItem(MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible	:= TRUE;
		end;
	end
	else
	begin
		PMTreeViewTagOff.Visible	 := FALSE;
		PMTreeViewTagComment.Visible := FALSE;

		for	nCount := 1 to 4 do
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible	:= TRUE;
	end;
end;

//**********************************************************************
//*		Proccess	:	削除可能かチェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	Nothing
//*		Return		:	可能(True)/不可能(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckDeletePermitGeneralRec (): Boolean;
var
	fReturn	: Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT GCode FROM MTOKUI ');
		SQL.Add('WHERE  RDelKbn = 0 AND SyokuchiKbn = 1 ');

		Open ();

		if (not EOF) then
			fReturn	:= FALSE
		else
			fReturn	:= TRUE;
	end;
	Result	:= fReturn;
end;

//**********************************************************************
//*		Proccess	:	削除可能かチェック(合計)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	可能(True)/不可能(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckDeletePermitParentRec (strHojCode: String): Boolean;
var
	fReturn	: Boolean;
begin
	fReturn	:= TRUE;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();

		SQL.Add('SELECT HT.BasedNCode FROM HojyoTree HT, MTOKUI MT ');
		SQL.Add('WHERE  MT.GCode = :HC ');
        SQL.Add('AND HT.MasterKbn = :MK AND MT.SumKbn = 1 ');
		SQL.Add('AND MT.RDelKbn = 0 AND MT.NCode = HT.SumNCode');
		ParamByName('MK').AsInteger	:= MASTER_CUSTOMER;
		ParamByName('HC').AsString	:= strHojCode;

		Open ();

		if (not EOF) then
			fReturn	:= FALSE;
	end;

	Result	:= fReturn;
end;

//************************************************************************
//*		Component		:	PMTreeViewTagOff(TMenuItem)
//*							はがす(TreeView)
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMTreeViewTagOffClick(Sender: TObject);
var
	nTagKindWork	: Integer;
begin
	m_cNodeRightClick.Selected	:= TRUE;

	if ((Sender as TMenuItem).Name = PMTreeViewTagOff.Name) then
		nTagKindWork	:= 0
	else if	((Sender as TMenuItem).Name = PMTreeViewTagItem01.Name) then
		nTagKindWork	:= 1
	else if	((Sender as TMenuItem).Name = PMTreeViewTagItem02.Name) then
		nTagKindWork	:= 3
	else if	((Sender as TMenuItem).Name = PMTreeViewTagItem03.Name) then
		nTagKindWork	:= 2
	else if	((Sender as TMenuItem).Name = PMTreeViewTagItem04.Name) then
		nTagKindWork	:= 4
	else
		nTagKindWork	:= 0;

	fnUpdateMasterRecordMFusenInfo (PTreeViewRec (m_cNodeRightClick.Data)^.eNCode  , nTagKindWork);

	if	((PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_CHILD    ) or
		 (PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_CHILD_SUM) or
		 (PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_GENERAL  )) then
		fnUpdateMemDataRecord(0, PTreeViewRec (m_cNodeRightClick.Data)^.sHojCode, nTagKindWork)
	else
		fnUpdateMemDataRecord(1, PTreeViewRec (m_cNodeRightClick.Data)^.sHojCode, nTagKindWork);
end;

(*
//************************************************************************
//*		Component		:	PMTreeViewTagComment(TMenuItem)
//*							備考修正(TreeView)
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMTreeViewTagCommentClick(Sender: TObject);
var
	cMemData	:   TdxMemData;
	cMasDlgParam:   TJNTMasDLGParam;
	cMasDlgIF	:   TJNTMASFUSENBIKODLGIF;
	nCount		:   Integer;
	nTagKindWork:   Integer;
	fIgnore		:   Boolean;
begin
	nTagKindWork    :=  0;
	fIgnore		    :=  FALSE;

	if ( TMenuItem (Sender).Name = PMTreeViewTagComment.Name ) then
	begin
		for	nCount := 1 to 4 do
		begin
			if ( not TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible ) then
			begin
				case (nCount) of
					1: nTagKindWork	:= 1;
					2: nTagKindWork	:= 3;
					3: nTagKindWork	:= 2;
					4: nTagKindWork	:= 4;
				end;
			end;
		end;

		fIgnore	:= TRUE;
	end
	else if	( TMenuItem (Sender).Name = PMTreeViewTagItem01Ex.Name ) then
		nTagKindWork := 1
	else if	( TMenuItem (Sender).Name = PMTreeViewTagItem02Ex.Name ) then
		nTagKindWork := 3
	else if	( TMenuItem (Sender).Name = PMTreeViewTagItem03Ex.Name ) then
		nTagKindWork := 2
	else if	( TMenuItem (Sender).Name = PMTreeViewTagItem04Ex.Name ) then
		nTagKindWork := 4
	else
		Exit;

	if ( not fIgnore ) then
	begin
		fnUpdateMasterRecordMFusenInfo(PTreeViewRec (m_cNodeRightClick.Data)^.eNCode, nTagKindWork);

		if	(( PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_CHILD   ) or
			 ( PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_GENERAL )) then
			fnUpdateMemDataRecord(0, PTreeViewRec (m_cNodeRightClick.Data)^.sHojCode, nTagKindWork)
		else
			fnUpdateMemDataRecord(1, PTreeViewRec (m_cNodeRightClick.Data)^.sHojCode, nTagKindWork);
	end;

	cMasDlgIF := TJNTMASFUSENBIKODLGIF.Create ();
	cMasDlgIF.Init (Pointer (m_pRec));

	cMasDlgParam := TJNTMasDLGParam.CreateParam ();

	cMasDlgParam.m_iMasterkbn := MASTER_CUSTOMER;									// ﾏｽﾀ区分
	cMasDlgParam.m_iKmkCode	  := 0;													// 科目ｺｰﾄﾞ
	cMasDlgParam.m_iSubCode	  := 0;													// 科目別補助ｺｰﾄﾞ
	cMasDlgParam.m_sHojyoCode := PTreeViewRec (m_cNodeRightClick.Data)^.sHojCode;	// 補助ｺｰﾄﾞ
	cMasDlgParam.m_iFusenKbn  := nTagKindWork;										// 付箋区分
	cMasDlgParam.m_pApRec	  := Pointer (m_pRec);									// TMjsAppRecord

	if	(cMasDlgIF.DoDlg (cMasDlgParam) = mrOK) then									// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	begin
		with (m_Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT FI.FusenCmnt FROM MFusenInfo FI          ');
            SQL.Add('Left outer Join MTOKUI MT on                    ');
            SQL.Add('FI.HojyoCode = MT.NCode                         ');
			SQL.Add('WHERE FI.MasterKbn = :MK AND MT.GCode = :HC     ');
			ParamByName ('MK').AsInteger := cMasDlgParam.m_iMasterkbn;
			ParamByName ('HC').AsString	 := cMasDlgParam.m_sHojyoCode;

			Open ();

			if	(PanelCmn.Visible and
				((PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_CHILD   )  or
				 (PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_GENERAL))) then
				fnMoveRecSelecterGrid(PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn, cMasDlgParam.m_sHojyoCode);

			if	((PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_CHILD  )  or
				 (PTreeViewRec (m_cNodeRightClick.Data)^.nSumKbn = TREE_GENERAL)) then
				cMemData := MemReal
			else
				cMemData := MemTotal;

			cMemData.Edit();

			if ( not EOF ) then
				cMemData.FieldByName ('strComment').AsString := FieldByName ('FusenCmnt').AsString
			else
				cMemData.FieldByName ('strComment').AsString := '';

			m_FusenFlg := True;
			cMemData.Post ();
			m_FusenFlg := False;
		end;
	end;

	cMasDlgParam.Free ();

	cMasDlgIF.Term ();
	cMasDlgIF.Free ();

end;
*) // <120>

//**********************************************************************
//*		Proccess	:	GridのSelecter情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nDivision	:	実在/合計
//*						strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	可能(True)/不可能(False)
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMoveRecSelecterGrid(nDivision: Integer; strHojCode: String);
var
	strFormat	: String;
	sHojCode	: String;
begin
	if (Trim (strHojCode) = '') then
		Exit;

	if	((nDivision = TREE_SYSTEM    ) or
		 (nDivision = TREE_SYSTEM_SUM)) then
	begin
		MemReal.First ();
		MemTotal.First ();
		Exit;
	end;

	sHojCode := strHojCode;

	if ((m_nCurCodeAttribute <= 1) and (Trim (strHojCode) <> '')) then
	begin
		case (m_nCurCodeAttribute) of
			0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
			1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
		end;

		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
	end;

			// 実在選択時
	if ((nDivision = TREE_CHILD) or (nDivision = TREE_CHILD_SUM) or (nDivision = TREE_GENERAL)) then
		fnMoveGridSelecter(MemReal,strHojCode,'strHojCode')
	else	// 合計選択時
		fnMoveGridSelecter(MemTotal,strHojCode,'strHojCode');
//CMN
			// 支払方法(比率)
	if fnGetPayPtnInfoBunkai(sHojCode) = 0 then
		fnMoveGridSelecter(MemPayRatio,strHojCode,'HojCode')
	else	// 支払方法(定額)
		fnMoveGridSelecter(MemPayFixed,strHojCode,'HojCode');
	// 振込情報
	if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_TRANSFER) <> 0 then
		fnMoveGridSelecter(MemFuri,strHojCode,'HojCode');
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
    	// 電信送金
	    if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_TRANSFER_GD) <> 0 then
		    fnMoveGridSelecter(MemFuri_GD,strHojCode,'HojCode');
	    // 為替手形
	    if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_TRANSFER_GT) <> 0 then
		    fnMoveGridSelecter(MemFuri_GT,strHojCode,'HojCode');
	    // 送金小切手
	    if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_TRANSFER_GK) <> 0 then
		    fnMoveGridSelecter(MemFuri_GK,strHojCode,'HojCode');
    end;
//<GA001>ED

	// 期日指定振込情報
	if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_DATETRAN) <> 0 then
		fnMoveGridSelecter(MemFuriDate,strHojCode,'HojCode');
	// 手形情報
	if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_DRAFT) <> 0 then
		fnMoveGridSelecter(MemDraft,strHojCode,'HojCode');
	// 小切手情報
	if fnGetPayPtnDtlHouHou(sHojCode,PAYTYPE_CHECK) <> 0 then
		fnMoveGridSelecter(MemCheck,strHojCode,'HojCode');
	// 相殺情報
	fnMoveGridSelecter(MemOffset,sHojCode,'strHojCode');
	// その他情報
	fnMoveGridSelecter(MemOther,strHojCode,'HojCode');
	// 名寄せ情報(Grid)
	fnMoveGridSelecter(MemNayose,strHojCode,'HojCode');
//<GA001>ST
	// 可変項目
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    	fnMoveGridSelecter(MemKhnset_G,sHojCode,'strHojCode');
//<GA001>ED
end;

//**********************************************************************
//*		Proccess	:	GridのSelecterの移動処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nDivision	:	実在/合計
//*						strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	可能(True)/不可能(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnMoveGridSelecter(cMem: TdxMemData;HojoCode,FildName: String): Boolean;
var
	nRetRecNo	: Integer;
begin
	Result := False;
	nRetRecNo := cMem.GetRecNoByFieldValue(HojoCode,FildName);

	if (nRetRecNo > 0) then
	begin
		cMem.RecNo := 1;
		if (nRetRecNo = 1) then
			cMem.First()
		else if	(nRetRecNo = cMem.RecordCount) then
			cMem.Last()
		else
			cMem.RecNo := nRetRecNo;
		Result := True;
	end;
end;
//**********************************************************************
//*		Proccess	:	GridのSelecterGIDの移動処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nDivision	:	実在/合計
//*						strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	可能(True)/不可能(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnMoveGridSelecterGID(cMem: TdxMemData; HojoCode,ItemID: String): Boolean;
var
	nRetRecNo	: Integer;
begin
	Result := False;
    nRetRecNo   := cMem.RecNo;
	cMem.DisableControls;				// リンクはずし(DataSource=Nilの替わり)
    cMem.First;

    while cMem.EOF = False do
    begin
        if (cMem.FieldByName('BaseHojCode').AsString = HojoCode)  and
           (cMem.FieldByName('ItemID').AsString = ItemID) then
        begin
            nRetRecNo := cMem.RecNo;
            Result    := True;
        end;
        cMem.Next;
    end;

    cMem.RecNo      := nRetRecNo;
    cMem.EnableControls;	            // リンク戻し


end;

//************************************************************************
//*		Component		:	TBTag(TToolButton)
//*							付箋
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TBTagClick(Sender: TObject);
var
	nTagKindWork	: Integer;
begin
	nTagKindWork := 0;

	case (TBTag.ImageIndex) of
		0: nTagKindWork	:= 1;
		1: nTagKindWork	:= 3;
		2: nTagKindWork	:= 2;
		3: nTagKindWork	:= 4;
	end;

	if (Screen.ActiveControl.Name = GridReal.Name) then					// 取引先ｸﾞﾘｯﾄﾞ(実在)
		fnSetTagInfoGrid(0, nTagKindWork)
	else if	(Screen.ActiveControl.Name = GridTotal.Name) then				// 取引先ｸﾞﾘｯﾄﾞ(合計)
		fnSetTagInfoGrid(1, nTagKindWork)
	else if	(Screen.ActiveControl.Name = CmnTreeView.Name) then							// ﾂﾘｰﾋﾞｭｰ
	begin
		if PTreeViewRec(CmnTreeView.Selected.Data)^.sHojCode = _TreeSystemCode then exit;

		fnUpdateMasterRecordMFusenInfo(PTreeViewRec(CmnTreeView.Selected.Data)^.eNCode , nTagKindWork);

		if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_CHILD    ) or
			 (PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_CHILD_SUM) or
			 (PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn = TREE_GENERAL  )) then
			fnUpdateMemDataRecord (0, PTreeViewRec (CmnTreeView.Selected.Data)^.sHojCode, nTagKindWork)
		else
			fnUpdateMemDataRecord (1, PTreeViewRec (CmnTreeView.Selected.Data)^.sHojCode, nTagKindWork);
	end;
end;

//************************************************************************
//*		Component		:	PMToolbarTag(TMenuItem)
//*							付箋(ToolBar)
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMToolbarTagClick(Sender: TObject);
begin
	TBTag.ImageIndex := TMenuItem(Sender).ImageIndex;
end;

//************************************************************************
//*		Component		:	Gridxxx ( TdxDBGrid )
//*							ｶﾗﾑが移動する前
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	cField       	: TField;
	strHojCode	 	: String;
	strFormat	 	: String;
	strName      	: String;
	strNameSimple	: String;
begin
	if (NewColumn = 0) or (NewColumn = 6) then
	begin
        CanChange   :=  False;
		exit;   
	end;

	if (Column = 1) then																// 取引先ｺｰﾄﾞ
    begin
		cField := TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strHojCode');

		if (not fnCheckValidCodeUseCharacters(cField.AsString)) then
		begin
			Beep();
			cField.FocusControl();
			Abort();
		end;

		if (TdxDBGrid(Sender).DataSource.DataSet.State in [dsInsert]) then
		begin
			if ((Trim (cField.AsString) = '') or (Trim (cField.AsString) = '0')) then
			begin
				Beep ();
				cField.FocusControl ();
				Abort ();
			end;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				if	(StrToInt64 (Trim (cField.AsString)) = 0) then
				begin
					Beep ();
					cField.FocusControl ();
					Abort ();
				end;
			end;
		end;

		if (not TdxDBGrid (Sender).Columns [1].ReadOnly) then
		begin
			if	(not fnCheckValidMasterDataRecord (cField.AsString)) then
			begin
				Beep ();
				cField.FocusControl ();
				Abort ();
			end;

			strHojCode	:= cField.AsString;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strHojCode').AsString := strHojCode;
		end;
	end;

	if	(Column = 3) then
	begin
		strNameSimple := TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strNameSimple').AsString;

		if	(strNameSimple = '') then
		begin
			strName	:= TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strName').AsString;

			if	(strName <> '') then
			begin
				TdxDBGrid (Sender).DataLink.Edit ();

				if	(StrLen (PChar (strName)) <= 14) then
					TdxDBGrid (Sender).Columns [4].Field.AsString := Copy (strName, 1, 14)
				else
					TdxDBGrid (Sender).Columns [4].Field.AsString := MJSKabuCut (strName, 14);
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckValidCodeUseCharacters(strHojCode: String): Boolean;
begin
	if (Trim (strHojCode) = '') then
	begin
		Result := TRUE;
		Exit;
	end;

	if (m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
		Result := TRUE;
		Exit;
	end;

	if (not JNTMASERRORCODECHECK (strHojCode, m_strValidCharacters)) then
	begin
		Beep ();

		m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 21);

		MJSMessageBoxEx (Self,m_cErrorMsgRec.sMsg, m_pRec^.m_ProgramName, m_cErrorMsgRec.icontype,
										m_cErrorMsgRec.btntype, m_cErrorMsgRec.btndef, m_cErrorMsgRec.LogType);

		Result := FALSE;
		Exit;
	end;

	Result := TRUE;
end;

//**********************************************************************
//*		Proccess	:	同一ｺｰﾄﾞが存在するかﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckValidMasterDataRecord (strHojCode: String): Boolean;
begin
	if	(Trim (strHojCode) = '') then
	begin
		Result := FALSE;
		Exit;
	end;

	if (m_nCurCodeAttribute <= 1) then
		strHojCode := Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT GCode FROM MTOKUI ');
		SQL.Add('WHERE  RDelKbn = 0 AND GCode = :HC');
		ParamByName('HC').AsString	:= strHojCode;

		Open ();


		if  (not EOF) then
			Result := FALSE
		else
			Result := TRUE;
    end;
end;

//************************************************************************
//*		Component		:	DSxxx ( TDataSource )
//*
//*		Event			:	OnStateChange
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.DSDraftStateChange(Sender: TObject);
var
	cMemData: TdxMemData;
	cDBGrid	: TdxDBGrid;
begin
{<050>
	if (TDataSource (Sender).Name = DSReal.Name) then
	begin
		cMemData := MemReal;
		cDBGrid	 := GridReal;
	end
	else
	begin
		cMemData := MemTotal;
		cDBGrid	 := GridTotal;
	end;
}

	cMemData := MemKihon;       // <050> Add
	cDBGrid	 := GridKihon;      // <050> Add

	if (cMemData.State in [dsInsert]) then
		cDBGrid.Columns [1].ReadOnly := FALSE
	else
		cDBGrid.Columns [1].ReadOnly := TRUE;

	if	(cMemData.Active and (TDataSource (Sender).DataSet <> nil)) then
	begin
		if (cDBGrid.DataSource.DataSet.RecordCount = 0) then
			cDBGrid.Columns [1].ReadOnly := FALSE;
	end;

end;

//************************************************************************
//*		Component		:	Gridxxx ( TdxDBGrid )
//*							ｶﾗﾑが移動した時
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
// <120>var
// <120>	stMessageRec: TMJSMsgRec;
begin
{
	if ( Column = 4 ) then
	begin
		m_cComArea.m_MsgStd.GetMsg (stMessageRec, 30, 19);
		CmnStatusBar.SimpleText	:= stMessageRec.sMsg;
	end
	else
		CmnStatusBar.SimpleText	:= '';
}

	if ( Column = 4 ) then
            fnSetFncType(7,True)
	else    fnSetFncType(7,False);

end;
//************************************************************************
//*		Component		:	Gridxxx ( TdxDBGrid )
//*							基本情報パネル
//*		Event			:	OnBeforeChangeNode
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/08/22  <154>
//************************************************************************
procedure TJNTCRP004007f.GridKihonBeforeChangeNode(Sender: TObject; Node,
  NewNode: TdxTreeListNode; var CanChange: Boolean);
var
    nCol1   : Integer;
begin
    // 債務ﾃﾞｰﾀﾊﾞｰｼﾞｮﾝが6以上、かつ基本情報グリッド
    if (m_iVerData > 5) and (TdxDBGrid(Sender).Name = GridKihon.Name) then
    begin
        nCol1   := GridKihon.ColumnByFieldName('GensenUseKbn').Index;

        // 預かり源泉税採用ありの場合、査定方法の変更を不可とする
        if (NewNode.Values[nCol1] > 0) then
            GridKihon_SateiNo.DisableEditor := True
        else
            GridKihon_SateiNo.DisableEditor := False;

// <169> ADD-STR
        // スポット支払支払先は査定方法変更不可
        nCol1   := GridKihon.ColumnByFieldName('strHojCode').Index;
        if fnCheckIsSpot(NewNode.Values[nCol1]) then
            GridKihon_SateiNo.DisableEditor := True;
// <169> ADD-STR

// <168> ADD-STR
        if  (m_iProAdoptKbn = 1) then
        begin
            // スポット支払支払先は分解パターン選択不可
            nCol1   := GridKihon.ColumnByFieldName('strHojCode').Index;

            GridKihon_BunkaiPtn.DisableEditor := (fnCheckIsSpot(NewNode.Values[nCol1]) = True);
        end;
// <168> ADD-END
    end;

// <155> 2007/12/25 H.Kawato Add Start
    nCol1   := GridKihon.ColumnByFieldName('intSateiCalc').Index;
    fnChangeSateiCalc(NewNode.Values[nCol1]);
// <155> 2007/12/25 H.Kawato Add End
end;

//************************************************************************
//*		Component		:	Gridxxx ( TdxDBGrid )
//*							行が変った時
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridChangeNodeEx(Sender: TObject);
var
	fValueCheck : Boolean;
	iSumKbn		: Integer;
begin
    iSumKbn     :=  0;
	fValueCheck	:=  TRUE;

    // <050>  -- St
    if Tab.Items.Selected = TAB_KIHON then
    begin
		m_LineInfo.nBunkai      := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intApartNo').AsInteger;    // 分解方法
        m_LineInfo.iSateiKbn    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiNo').AsInteger;    // 査定方法 <126> Add
// <155> 2007/12/13 H.Kawato Add Start
        m_LineInfo.iCalcKbn     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiCalc'      ).AsInteger;    // 繰越計算区分
        m_LineInfo.nCalcHiritu  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SateiCalcHiritu'   ).AsCurrency;   // 繰越計算値(比率)
        m_LineInfo.nCalcTeigaku := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SateiCalcTeigaku'  ).AsCurrency;   // 繰越計算値(定額)
// <155> 2007/12/13 H.Kawato Add End
// <142> 2007/02/20 H.Kawato Add Start
        if (m_iProAdoptKbn = 1) and (TdxDBGrid(Sender).Name = GridKihon.Name) then
            m_LineInfo.iBunkaiPtn := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BunkaiPtn').AsInteger;   // 分解ﾊﾟﾀｰﾝ
// <142> 2007/02/20 H.Kawato Add End
// <191> Del start
{
// <186> ADD-STR
        if (m_iProAdoptKbn = 1) and (TdxDBGrid (Sender).FocusedColumn = 9) then
        begin
            GridKihonChangeColumn(GridKihon, GridKihon.FocusedNode, 9);
        end;
// <186> ADD-END
}
// <191> Del end
        Exit;
// <142> 2007/02/20 H.Kawato Add Start
    end
    else
    if Tab.Items.Selected = TAB_PAYWAY then
    begin
        fnSetPayWayLineData(Sender);
		m_LineInfo.nBunkai   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intApartNo').AsInteger;	    // 分解方法

        if (Trim(TdxDBGrid(Sender).DataSource.DataSet.FieldByName('strHojCode').AsString) = '') then
            GridPayWay.FocusedField := GridPayWay_GCode.Field;

        Exit;
// <142> 2007/02/20 H.Kawato Add End
    end;
    // <050>  -- Ed

	if (not fnCheckValidCodeUseCharacters (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
		fValueCheck	:= FALSE;

	if (fValueCheck and (TdxDBGrid (Sender).DataSource.DataSet.State in [dsInsert])) then
	begin
		if	((Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '' ) or
			 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '0')) then
			fValueCheck	:= FALSE
		else if	(m_nCurCodeAttribute <= 1) then
		begin
			if (StrToInt64 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1])) = 0) then
				fValueCheck	:= FALSE;
		end;
	end;

	if (fValueCheck and (not TdxDBGrid (Sender).Columns [1].ReadOnly)) then
	begin
		if (not fnCheckValidMasterDataRecord (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
			fValueCheck	:= FALSE;
	end;

	if (not fValueCheck) then
	begin
		TdxDBGrid (Sender).FocusedColumn := 1;

		TBTag.Enabled	 := FALSE;
		BSearch.Enabled	 := FALSE;
	end
	else
	begin
		if (Screen.ActiveControl.Name = TdxDBGrid (Sender).Name) then
		begin
			case Tab.Items.Selected of
				TAB_REAL : iSumKbn := 0;	// 実在
				TAB_TOTAL: iSumKbn := 1;	// 合計
			end;

			fnChangeConditionToolbarButtons(iSumKbn,TdxDBGrid (Sender).FocusedNode.Strings [1]);
		end;
//		m_LineInfo.nBunkai   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intApartNo').AsInteger;	// 分解方法 <142> Del
//        m_LineInfo.iSateiKbn := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiNo').AsInteger;	// 査定方法 <126> Add <142> Del
	end;
end;

//**********************************************************************
//*		Proccess	:	ToolBarのﾎﾞﾀﾝの状態変更
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	nSumDivision
//*						strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeConditionToolbarButtons (nSumDivision: Integer; strHojCode: String);
begin
	if	(Trim (strHojCode) = '') then
	begin
		TBTag.Enabled	:= FALSE;
		BSearch.Enabled	:= FALSE;

		Exit;   // 以下, 未処理
	end;

	if	(m_nCurCodeAttribute <= 1) then
		strHojCode := Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	// 処理ﾓｰﾄﾞが参照以外
	if (m_nReferMode <> REFER) then
	begin
		if (fnCheckPermitGeneralRecord (strHojCode)) then               // 諸口
		begin
			if (fnCheckDeletePermitGeneralRec ()) then
			begin
				case Tab.Items.Selected of
					TAB_REAL,TAB_TOTAL: BDelete.Enabled := TRUE;        // 実在、合計時
					else BDelete.Enabled := False;      // 以外
				end;
			end
			else
				BDelete.Enabled	:= FALSE;
		end
		else														    // 諸口以外
		begin
			if (nSumDivision = 1) then
			begin
				if (fnCheckDeletePermitParentRec (strHojCode)) then
				begin
					case Tab.Items.Selected of
						TAB_REAL,TAB_TOTAL: BDelete.Enabled := TRUE;    // 実在、合計時
						else BDelete.Enabled := False;  // 以外
					end;
				end
				else
					BDelete.Enabled	:= FALSE;
			end
			else
			begin
				case Tab.Items.Selected of
					TAB_REAL,TAB_TOTAL: BDelete.Enabled := TRUE;		// 実在、合計時
					else BDelete.Enabled := False;      // 以外
				end;
			end;
		end;

		// 付箋ﾎﾞﾀﾝ
		case Tab.Items.Selected of
			TAB_REAL,TAB_TOTAL: TBTag.Enabled := TRUE;  // 実在、合計時
			else TBTag.Enabled := False;	            // 以外
		end;
	end
	else
	begin
		BDelete.Enabled	:= FALSE;	// 削除ﾎﾞﾀﾝ使用不可
		TBTag.Enabled   := FALSE;	// 付箋ﾎﾞﾀﾝ使用不可
	end;

	if (m_cACControl.Name <> CmnTreeView.Name) then
		BSearch.Enabled	:= True
	else
		BSearch.Enabled	:= False;

    //<100>削除ボタン使用不可
    BDelete.Enabled := False;
end;

//**********************************************************************
//*		Proccess	:	諸口の判断
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	strHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	諸口ではない(True)/諸口(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckPermitGeneralRecord (strHojCode: String): Boolean;
var
	fReturn	: Boolean;
begin
	fReturn	:= FALSE;

	if (Trim (strHojCode) = '') then
	begin
		Result := fReturn;
		Exit;
	end;

	if (m_nCurCodeAttribute <= 1) then
		strHojCode := Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	if (m_strHojCodeGeneral <> '') then
	begin
		if (CompareStr (m_strHojCodeGeneral, strHojCode) = 0) then
			fReturn	:= TRUE
		else
			fReturn	:= FALSE;

		Result := fReturn;
		Exit;
	end;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT * FROM MTOKUI ');
		SQL.Add('WHERE RDelKbn = 0 AND GCode = :HC');
		ParamByName ('HC').AsString	 := strHojCode;

		Open ();

		if (not EOF) then
		begin
            if FieldByName('SyokuchiKbn').AsInteger = 1 then
			begin
				m_strHojCodeGeneral	:= strHojCode;

				fReturn	:= TRUE;
			end;
		end;
	end;

	Result	:= fReturn;
end;

//************************************************************************
//*		Component		:	CmnTreeViewChange ( TMTreeView )
//*
//*		Event			:	OnChange
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnTreeViewChange(Sender: TObject; Node: TTreeNode);
var
	nSumDivision	: Integer;
	strHojCodeParent: String;
	strDescription	: String;
begin
	if (m_bChange) then
		Exit;

	if (Node = nil) then
		Exit;

	if ((PTreeViewRec (Node.Data)^.nSumKbn = TREE_PARENT    ) or
	    (PTreeViewRec (Node.Data)^.nSumKbn = TREE_PARENT_SUM)) then
		nSumDivision := 1
	else
		nSumDivision := 0;

	fnChangeConditionToolbarButtons(nSumDivision, PTreeViewRec (Node.Data)^.sHojCode);

	if ((PTreeViewRec (Node.Data)^.nSumKbn = TREE_CHILD_SUM ) or
	    (PTreeViewRec (Node.Data)^.nSumKbn = TREE_PARENT_SUM)) then
		BDelete.Enabled	:= FALSE;

	if ((PTreeViewRec (Node.Data)^.nSumKbn = TREE_CHILD    ) or
	    (PTreeViewRec (Node.Data)^.nSumKbn = TREE_CHILD_SUM) or
	    (PTreeViewRec (Node.Data)^.nSumKbn = TREE_GENERAL  )) then
	begin
		strHojCodeParent := PTreeViewRec (Node.Parent.Data)^.sHojCode;
		strDescription	 := PTreeViewRec (Node.Parent.Data)^.sName;
	end
	else
	begin
		strHojCodeParent := PTreeViewRec (Node.Data)^.sHojCode;
		strDescription	 := PTreeViewRec (Node.Data)^.sName;
	end;

	fnMoveRecSelecterGrid(PTreeViewRec (Node.Data)^.nSumKbn,PTreeViewRec (Node.Data)^.sHojCode);
end;

//************************************************************************
//*		Component		:	CmnTreeViewChange ( TMTreeView )
//*
//*		Event			:	OnChanging
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnTreeViewChanging(Sender: TObject; Node: TTreeNode;
  var AllowChange: Boolean);
begin
	if (PTreeViewRec (Node.Data)^.nSumKbn = TREE_CHILD_INVALID) then
		AllowChange	:= FALSE;
end;

//************************************************************************
//*		Component		:	CmnTreeViewChange ( TMTreeView )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnTreeViewEnter(Sender: TObject);
begin
	m_cACControl := Screen.ActiveControl;

	BDelete.Enabled := True;
	CmnTreeViewChange(Sender, CmnTreeView.Selected);
end;

//************************************************************************
//*		Component		:	MemXxx ( TdxMemData )
//*                         実在・合計
//*		Event			:	OnBeforePost
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.MemBeforePost(DataSet: TDataSet);
var
	cFieldWork	: TField;
	strHojCode	: String;
	sHojCD		: String;
	cMemData	: TdxMemData;
	iBunkai		: Integer;
	RecInfo		: RecInfoRec;
	bChgFlg		: Boolean;

    ExNCode     : Extended;
    iPayPtnNo   : Integer;  // <142> Add

begin
	if ( m_bChange )  then  Exit;
	if ( m_FusenFlg ) then  Exit;

    cMemData    :=  nil;
	bChgFlg     :=  False;

	with (DataSet) do
	begin
		cFieldWork := FieldByName ('strHojCode');

		if cFieldWork.AsString = '' then
			abort;

		if	(not fnCheckValidCodeUseCharacters(cFieldWork.AsString)) then
		begin
			Beep ();
			cFieldWork.FocusControl ();
			Abort ();
		end;

		case Tab.Items.Selected of
			TAB_REAL : cMemData := MemReal;		// 実在
			TAB_TOTAL: cMemData := MemTotal;	// 合計
            TAB_KIHON: cMemData := MemKihon;    // 基本情報
		end;

		sHojCD := FieldByName('strHojCode').AsString;
		if (m_nCurCodeAttribute <= 1) then
			sHojCD := Format ('%.16d', [StrToInt64(Trim(sHojCD))]);

		if (State in [dsInsert]) then
		begin
			if (m_nCurCodeAttribute <= 1) then
			begin
				if (StrToInt64 (Trim (cFieldWork.AsString)) = 0) then
				begin
					cFieldWork.FocusControl();
					Abort();
				end;
			end;

			if (not fnCheckValidMasterDataRecord(cFieldWork.AsString)) then
			begin
				cFieldWork.FocusControl();
				Abort();
			end;

			cMemData.Edit;
			iBunkai := FieldByName ('ApartData').AsInteger;
			if iBunkai = 0 then
				cMemData.FieldByName('ApartData').AsInteger	:= 0;

			cMemData.FieldByName('BaseHojCode').AsString := sHojCD;
		end
		else if (State in [dsEdit]) then
		begin
            //Edit用内部ｺｰﾄﾞ作成
            ExNCode := cMemData.FieldByName('ExNCode').AsFloat;
// <142> 2007/02/20 H.Kawato Add
            if (Tab.Items.Selected = TAB_KIHON) then
                iPayPtnNo := cMemData.FieldByName('PayPtnNo').AsInteger
            else
                iPayPtnNo := 0; // ダミー
// <142> 2007/02/20 H.Kawato Add End

			if m_LineInfo.nBunkai <> FieldByName ('intApartNo').AsInteger then
			begin
				// 分解方法が変更された時、PayPtnDtlの該当ﾚｺｰﾄﾞを削除する
				m_cDataModule.BeginTran (m_cDBSelect);
// <142> 2007/02/20 H.Kawato Mod
//				if (not fnDeleteMasterRecordPayPtnDtl(ExNCode)) then			// 支払条件明細ﾏｽﾀ削除
				if (not fnDeleteMasterRecordPayPtnDtl(ExNCode, iPayPtnNo)) then	// 支払条件明細ﾏｽﾀ削除
				begin
					m_cDataModule.Rollback(m_cDBSelect);						// ﾛｰﾙﾊﾞｯｸ(破棄)
					abort;
				end;
				m_cDataModule.Commit(m_cDBSelect);								// ｺﾐｯﾄ(反映)
				m_LineInfo.nBunkai := FieldByName ('intApartNo').AsInteger;
				bChgFlg := True;
// <142> 2007/02/20 H.Kawato Mod
{
				fnMemDelete(sHojCD,MemFuri);		// 振込情報
				fnMemDelete(sHojCD,MemFuriDate);	// 期日指定振込情報
				fnMemDelete(sHojCD,MemDraft);		// 手形情報
				fnMemDelete(sHojCD,MemCheck);		// 小切手情報
}
				fnMemDelete(sHojCD,iPayPtnNo,MemFuri);		// 振込情報
				fnMemDelete(sHojCD,iPayPtnNo,MemFuriDate);	// 期日指定振込情報
				fnMemDelete(sHojCD,iPayPtnNo,MemDraft);		// 手形情報
				fnMemDelete(sHojCD,iPayPtnNo,MemCheck);		// 小切手情報
// <142> 2007/02/20 H.Kawato Mod End

				// GridのOptionsのｾｯﾄ
				fnGridOptionsControl(False,DISPOSE_TRANSFER,MemFuri);		// 振込情報
				fnGridOptionsControl(False,DISPOSE_DATETRAN,MemFuriDate);	// 期日指定振込情報
				fnGridOptionsControl(False,DISPOSE_DRAFT,MemDraft);			// 手形情報
				fnGridOptionsControl(False,DISPOSE_CHECK,MemCheck);			// 小切手情報
			end;
		end;

		strHojCode := FieldByName('strHojCode').AsString;

		if (m_nCurCodeAttribute <= 1) then
			strHojCode := Format ('%.16d', [StrToInt64(Trim(strHojCode))]);

		if	(not fnUpdateMasterRecordStandard(strHojCode)) then
		begin
			Cancel();

			if (Name = MemReal.Name) then
				GridReal.FocusedColumn	:= 1
			else
				GridTotal.FocusedColumn	:= 1;
			Abort();
		end;

		RecInfo.sCD      := FieldByName('strHojCode'    ).AsString;
		RecInfo.sBaseCD  := strHojCode;
		RecInfo.sName    := FieldByName('strNameSimple' ).AsString;
		RecInfo.sRen     := FieldByName('strAssociation').AsString;
        RecInfo.ExNCD    := m_ExNCode;
        RecInfo.PayPtnNo := FieldByName('PayPtnNo').AsInteger;      // <142> Add

		case FieldByName('intApartNo').AsInteger of
			0:	// 比率
			begin
				if (State in [dsInsert]) then
				begin
					fnMemUpdate(DISPOSE_RATIO,RecInfo,MemPayRatio);
//					fnMemUpdate(DISPOSE_OTHER,RecInfo,MemOther);    // <142> Del
				end
				else if (State in [dsEdit]) then
				begin
					if bChgFlg = True then
					begin
// <142> 2007/02/20 H.Kawato Mod
//						fnMemDelete(RecInfo.sBaseCD,MemPayFixed);
						fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemPayFixed);
						// GridのOptionsのｾｯﾄ
// <172> Mod
//						fnGridOptionsControl(False,DISPOSE_RATIO,MemPayFixed);		// 比率
						fnGridOptionsControl(False,DISPOSE_FIXED,MemPayFixed);		// 比率
// <172> Mod
						fnMemUpdate(DISPOSE_RATIO,RecInfo,MemPayRatio);
					end;
				end;
			end;
			1:	// 定額
			begin
				if (State in [dsInsert]) then
				begin
					fnMemUpdate(DISPOSE_FIXED,RecInfo,MemPayFixed);
//					fnMemUpdate(DISPOSE_OTHER,RecInfo,MemOther);    // <142> Del
				end
				else if (State in [dsEdit]) then
				begin
					if bChgFlg = True then
					begin
// <142> 2007/02/20 H.Kawato Mod
//						fnMemDelete(RecInfo.sBaseCD,MemPayRatio);
						fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemPayRatio);
						// GridのOptionsのｾｯﾄ
// <172> Mod
//						fnGridOptionsControl(False,DISPOSE_FIXED,MemPayRatio);		// 定額
						fnGridOptionsControl(False,DISPOSE_RATIO,MemPayRatio);		// 定額
// <172> Mod
						fnMemUpdate(DISPOSE_FIXED,RecInfo,MemPayFixed);
					end;
				end;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordStandard(sHojCode: String): Boolean;
var
	iSumKbn		: Integer;
	cMemData	: TdxMemData;
	dqMasterData : TMQuery;

begin
    m_InsFlg    :=  False;
    m_ExNCode   :=  0;
    iSumKbn     :=  0;
    cMemData    :=  nil;


	case Tab.Items.Selected of
		TAB_REAL:	// 実在
		begin
			iSumKbn  := 0;
			cMemData := MemReal;
		end;
		TAB_TOTAL:	// 合計
		begin
			iSumKbn := 1;
			cMemData := MemTotal;
		end;
        TAB_KIHON: // 基本情報
        begin
			cMemData := MemKIHON;
			iSumKbn  := cMemData.FieldByName('intSumKbn').AsInteger;
        end;

// <142> 2007/02/20 H.Kawato Add Start
        TAB_PAYWAY:  // 支払方法
        begin
			cMemData := MemPayWay;
			iSumKbn  := cMemData.FieldByName('intSumKbn').AsInteger;
        end;
// <142> 2007/02/20 H.Kawato Add End
	end;


	m_cDataModule.BeginTran (m_cDBSelect);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始
//--MTOKUI(Insert or Update判断)
	if	(not fnUpdateMasterRecordHojyoMA (sHojCode,iSumKbn,cMemData)) then				// 補助基本ﾏｽﾀ 更新
	begin
		Beep ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result	:= FALSE;
		Exit;
	end;


//--NCode取得
    dqMasterData	:= TMQuery.Create (Self);
    m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

    with (dqMasterData) do
    begin
        Close ();
	    SQL.Clear ();

        if m_InsFLg = True then
    	    SQL.Add   ('SELECT @@Identity as ExNCode from MTOKUI ')
        else
        begin
    	    SQL.Add   ('SELECT NCode as ExNCode from MTOKUI ');
    	    SQL.Add   ('Where GCode = :pGCode and RDelKbn =0  ');
            ParamByName ('pGCode').AsString := sHojCode;
        end;

        Open();

      	if	(Status <> 0) then														    // ｴﾗｰ
	    begin
    		Beep ();
		    dqMasterData.Close();   // <173> ADD
		    dqMasterData.Free ();
        	m_cDataModule.Rollback (m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)
		    Result	:= FALSE;
		    Exit;

	    end;
        //※以降の更新でNCodeはm_ExNCodeを使用する
        m_ExNCode := GetFld('ExNCode').AsFloat;
	    dqMasterData.Close();		// <173> ADD
        dqMasterData.Free ();
    end;

//--HojyoTree
	if	(not fnUpdateMasterRecordHojyoTree (sHojCode,iSumKbn,cMemData)) then			// 補助体系ﾏｽﾀ 更新
	begin
		Beep();
// <173> ADD-STR
	    dqMasterData.Close();
	    dqMasterData.Free ();
// <173> ADD-END
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

// <142> 2007/02/20 H.Kawato Mod Start
{
//--PayPtnInfo
    if (not fnUpdateMasterRecordPayPtnInfo(sHojCode,cMemData)) then					    // 支払条件ﾊﾟﾀｰﾝ 更新
    begin
    	Beep ();
    	m_cDataModule.Rollback (m_cDBSelect);					   					    // ﾛｰﾙﾊﾞｯｸ(破棄)
    	Result	:= FALSE;
    	Exit;
    end;
}
//--MTOKUI_PAY
    // 基本情報
    if (Tab.Items.Selected = TAB_KIHON) then
    begin
	    if (not fnUpdateMasterRecordSateiKbn(sHojCode,cMemData)) then                   // 査定方法 更新
        begin
        	Beep ();
        	m_cDataModule.Rollback (m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)
        	Result	:= FALSE;
        	Exit;
        end;
    end;


    // 基本情報(ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし), または支払方法
    if ((m_iProAdoptKbn = 0) and (Tab.Items.Selected = TAB_KIHON)) or
       (Tab.Items.Selected = TAB_PAYWAY) then
    begin
//--PayPtnInfo
        if (not fnUpdateMasterRecordBunkaiKbn(cMemData)) then       		            // 分解区分 更新
        begin
        	Beep ();
        	m_cDataModule.Rollback (m_cDBSelect);					   		            // ﾛｰﾙﾊﾞｯｸ(破棄)
        	Result	:= FALSE;
        	Exit;
        end;
    end;
// <142> 2007/02/20 H.Kawato Mod End

	m_cDataModule.Commit (m_cDBSelect);

	Result := TRUE;
end;
//**********************************************************************
//*		Proccess	:	外貨基本情報更新処理
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/21
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordStandardG(sHojCode: String): Boolean;
var
	cMemData	: TdxMemData;
	dqMasterData : TMQuery;

begin
    m_InsFlg    :=  False;
    m_ExNCode   :=  0;

//--NCode取得
    dqMasterData	:= TMQuery.Create (Self);
    m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

    with (dqMasterData) do
    begin
        Close ();
	    SQL.Clear ();

        if m_InsFLg = True then
    	    SQL.Add   ('SELECT @@Identity as ExNCode from MTOKUI ')
        else
        begin
    	    SQL.Add   ('SELECT NCode as ExNCode from MTOKUI ');
    	    SQL.Add   ('Where GCode = :pGCode and RDelKbn =0  ');
            ParamByName ('pGCode').AsString := sHojCode;
        end;

        Open();

      	if	(Status <> 0) then														    // ｴﾗｰ
	    begin
    		Beep ();
		    dqMasterData.Close();   // <173> ADD
		    dqMasterData.Free ();
        	m_cDataModule.Rollback (m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)
		    Result	:= FALSE;
		    Exit;

	    end;
        //※以降の更新でNCodeはm_ExNCodeを使用する
        m_ExNCode := GetFld('ExNCode').AsFloat;
	    dqMasterData.Close();		// <173> ADD
        dqMasterData.Free ();
    end;

	cMemData := MemKIHONG;

    if (not fnUpdateMasterRecordGaiKbn(sHojCode,cMemData)) then                   // 査定方法 更新
    begin
       	Beep ();
       	m_cDataModule.Rollback (m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)
       	Result	:= FALSE;
       	Exit;
    end;

	m_cDataModule.Commit (m_cDBSelect);

	Result := TRUE;
end;

//**********************************************************************
//*		Proccess	:	HojyoTreeの更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						SumKbn		:	実在/合計
//*						Mem			:	MemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordHojyoTree(sHojCode: String; SumKbn: Integer; Mem: TdxMemData): Boolean;
var
	nEntryNo	: Integer;
	cNode		: TTreeNode;
	pItemRec	: PTreeViewRec;
	sDspName	: String;
// <120>    ExNCode     : Extended;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT MasterKbn FROM HojyoTree ');
		SQL.Add('WHERE  MasterKbn = :MK AND BasedNCode = :BNC ');
		ParamByName('MK' ).AsInteger	:= MASTER_CUSTOMER;
		ParamByName('BNC').AsFloat   	:= m_ExNCode;

		if	(not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
            Exit;
        end;

		if  (not EOF) then
		begin
			Result := TRUE;
			Exit;
		end;

		nEntryNo := fnGetEntryNumberFinal(_TreeSystemCode);

		Close();
		SQL.Clear();
		SQL.Add('INSERT INTO HojyoTree (MasterKbn, PatternNo, SumNCode, EntNo, BasedNCode)');
		SQL.Add('VALUES (:MK, 0, :SC, :EN, :BNC)');

		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('SC').AsFloat	 := 0;
		ParamByName ('EN').AsInteger := nEntryNo;
		ParamByName ('BNC').AsFloat	 := m_ExNCode;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		// ﾂﾘｰﾉｰﾄﾞ作成
		New (pItemRec);

		// 実在/合計区分
		if (fnCheckPermitGeneralRecord (sHojCode)) then
			pItemRec^.nSumKbn := TREE_GENERAL
		else if	(SumKbn = TREE_CHILD) then
			pItemRec^.nSumKbn := TREE_CHILD
		else
			pItemRec^.nSumKbn := TREE_PARENT;

		pItemRec^.sHojCode := sHojCode;										    // 補助ｺｰﾄﾞ
		pItemRec^.sName	   := Mem.FieldByName('strNameSimple').AsString;	    // 簡略名称
        pItemRec^.eNCode   := m_ExNCode;

		sDspName := fnEditCode(MASTER_CUSTOMER,pItemRec^.sHojCode);
		sDspName := sDspName+' '+pItemRec^.sName;
		cNode := CmnTreeView.Items.AddChildObject (CmnTreeView.Items[0], sDspName, pItemRec);

		case (pItemRec^.nSumKbn) of
			TREE_GENERAL: cNode.ImageIndex	:= TREE_INDEX_GENERAL;
			TREE_CHILD  : cNode.ImageIndex	:= TREE_INDEX_CHILD;
			else		  cNode.ImageIndex	:= TREE_INDEX_PARENT;
		end;

		cNode.SelectedIndex	:= cNode.ImageIndex + 1;

		m_nHojyoTree := 1;
	end;

	Result := TRUE;																// 正常終了
end;

//**********************************************************************
//*		Proccess	:	登録NOの取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/21
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	登録NO
//*		History		:
//*
//*	    _TreeSystemCode: String	= '          '; でしか使用されていない
//*     ※SumNCode = 0 で対応
//*
//**********************************************************************
function TJNTCRP004007f.fnGetEntryNumberFinal (strHojCode: String): Integer;
var
	dqMasterTree: TMQuery;
	nEntryNo	: Integer;
begin
	dqMasterTree := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);					// DBとMQueryの接続

	nEntryNo := 0;

	with (dqMasterTree) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT EntNo FROM HojyoTree ');
		SQL.Add('WHERE  MasterKbn = :MK AND SumNCode = :SC ORDER BY EntNo DESC');
		ParamByName('MK').AsInteger	:= MASTER_CUSTOMER;
		ParamByName('SC').AsFloat	:= 0;

		Open ();

		if (not EOF) then
			nEntryNo := FieldByName ('EntNo').AsInteger;
    end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result := (nEntryNo + 100) div 100 * 100;
end;

//**********************************************************************
//*		Proccess	:	補助基本ﾏｽﾀの更新
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						SumKbn		:	実在/合計
//*						Mem			:	MemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordHojyoMA (sHojCode: String; SumKbn: Integer; Mem: TdxMemData): Boolean;
var
	fUpdateItems: Boolean;
	nCount		: Integer;
	sDspName	: String;
begin
// <120>	fUpdateItems := FALSE;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT NCode,GCode FROM MTOKUI ');
		SQL.Add('WHERE  SumKbn = :SK AND RDelKbn = 0 AND GCode = :HC');
		ParamByName ('SK').AsInteger := SumKbn;
		ParamByName ('HC').AsString	 := sHojCode;

		if (not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		fUpdateItems := TRUE;       // <050>

(* <050> MTOKUIに対する更新を行う必要なし。

		if (EOF) then
		begin
			// 新規
            m_InsFlg  := True;

			Close();
			SQL.Clear();
			SQL.Add('INSERT INTO MTOKUI (SumKbn,RDelKbn,PayRootKbn');
			SQL.Add(',GCode,Renso,NM,NMK,TStartDate,TEndDate');

			if SumKbn = 0 then		// 実在時
				SQL.Add(',HojyoKbn1,HojyoKbn2')
			else
				SQL.Add(',HojyoKbn1,HojyoKbn2');

			SQL.Add(') VALUES(:SK,0,:Root,:GC,:RC,:LN,:SN,:TSDATE,:TEDATE');

			if SumKbn = 0 then		// 実在時
				SQL.Add(',:HK1,:HK2')
			else
				SQL.Add(',:HK1,:HK2');

			SQL.Add(')');

			ParamByName('SK').AsInteger         := SumKbn;											// 実在/合計区分
			ParamByName('GC').AsString          := sHojCode;										// 取引先ｺｰﾄﾞ
			ParamByName('RC').AsString          := Mem.FieldByName('strAssociation').AsString;		// 連想ｼﾝﾎﾞﾙ
//			ParamByName('LN').AsString          := Mem.FieldByName('strName'       ).AsString;		// 正式名称
			ParamByName('SN').AsString          := Mem.FieldByName('strNameSimple' ).AsString;		// 簡略名称
			ParamByName('TSDATE').AsDatetime    := m_cJNTArea.getDefDate(1);		                // 適用期間（自）
			ParamByName('TEDATE').AsDatetime    := m_cJNTArea.getDefDate(2);             		// 適用期間（至）

			if SumKbn = 0 then		// 実在時
			begin
				ParamByName('Root').AsInteger := 0;		// 名寄せ区分(0:名寄せ子)   NotNull制御の為追加<02>
				ParamByName('HK1').AsInteger  := 0;		// 得意先区分(0:採用なし)
				ParamByName('HK2').AsInteger  := 1;		// 仕入先区分(1:採用あり)
			end
			else
            begin
				ParamByName('Root').AsInteger := 1;		// 名寄せ区分(1:名寄せ親)
				ParamByName('HK1').AsInteger  := 0;		// Defとして何を落とすか？
				ParamByName('HK2').AsInteger  := 0;		// Defとして何を落とすか？
            end;
		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE MTOKUI SET Renso = :RC,NM = :LN,NMK = :SN ');
			SQL.Add('WHERE RDelKbn = 0 And SumKbn = :SK AND GCode = :GC');

			ParamByName('SK').AsInteger := SumKbn;										// 実在/合計区分
			ParamByName('GC').AsString  := sHojCode;									// 取引先ｺｰﾄﾞ
			ParamByName('RC').AsString  := Mem.FieldByName('strAssociation').AsString;	// 連想ｼﾝﾎﾞﾙ
			ParamByName('LN').AsString  := Mem.FieldByName('strName'       ).AsString;	// 正式名称
			ParamByName('SN').AsString  := Mem.FieldByName('strNameSimple' ).AsString;	// 簡略名称

			fUpdateItems := TRUE;
		end;

		if (not ExecSQL()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
*)
		if (fUpdateItems) then
		begin
			for	nCount:=0 to CmnTreeView.Items.Count-1 do
			begin
				if (CompareStr(PTreeViewRec(CmnTreeView.Items[nCount].Data)^.sHojCode,sHojCode) <> 0) then
					Continue;

				PTreeViewRec(CmnTreeView.Items[nCount].Data)^.sName	:= Mem.FieldByName('strNameSimple').AsString;

				sDspName := fnEditCode(MASTER_CUSTOMER,sHojCode);
				sDspName := sDspName+' '+Mem.FieldByName('strNameSimple').AsString;
				CmnTreeView.Items [nCount].Text	:= sDspName;

				if (PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nSumKbn = TREE_PARENT_INVALID) then
				begin
					PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nSumKbn	:= TREE_PARENT;

					CmnTreeView.Items [nCount].ImageIndex	 := TREE_INDEX_PARENT;
					CmnTreeView.Items [nCount].SelectedIndex := CmnTreeView.Items [nCount].ImageIndex + 1;
				end;
			end;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	支払条件ﾊﾟﾀｰﾝの更新
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						Mem			:	MemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
//<142> function TJNTCRP004007f.fnUpdateMasterRecordPayPtnInfo(sHojCode: String; Mem: TdxMemData): Boolean;
function TJNTCRP004007f.fnUpdateMasterRecordSateiKbn(sHojCode: String; Mem: TdxMemData): Boolean;
var
	Qe : TMQuery;   // <Rel>

begin
// ↓ <Rel>
	Qe := TMQuery.Create (Self);

    try
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
            m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Qe)       // 全社DBとMQueryの接続
        else
            m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);				   	// 子社DBとMQueryの接続
// ↑ <Rel>

        with (Qe) do
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT BaseNCode FROM MTOKUI_PAY ');
            SQL.Add('WHERE  BaseNCode = :PN');
            ParamByName ('PN').AsFloat	 := m_ExNCode;

            if (not Open ()) then
            begin
                fnErrorMessageDsp(Qe);
                Result := FALSE;
                Exit;
            end;

            if (EOF) then
            begin
                // 新規
                Close();
                SQL.Clear();
// <126> 2006/06/27 H.Kawato Mod Start
//			    SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,BunkaiKbn)');
//			    SQL.Add('VALUES(:PN,:BK)');
// <142> 2007/02/20 H.Kawato Mod Start
{
                SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,BunkaiKbn,SateiKbn)');
                SQL.Add('VALUES(:PN,:BK,:SK)');

                ParamByName('PN').AsFloat  := m_ExNCode;									// 取引先ｺｰﾄﾞ
                ParamByName('BK').AsInteger := Mem.FieldByName('intApartNo').AsInteger;		// 分解方法
                ParamByName('SK').AsInteger := Mem.FieldByName('intSateiNo').AsInteger;		// 査定方法 <126> Add
}
				//プロジェクト別支払採用あり
                if (m_iProAdoptKbn = 1) then
                begin
// <155> 2007/12/25 H.Kawato Mod Start
//                    SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,SateiKbn,BunkaiPtn)');
//                    SQL.Add('VALUES(:PN,:SK,:BP)');
                    SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,SateiKbn,BunkaiPtn,SateiCalcKbn,SateiCalc)');
                    SQL.Add('VALUES(:PN,:SK,:BP,:SCK,:SC)');
// <155> 2007/12/25 H.Kawato Mod End

                    ParamByName('PN').AsFloat    := m_ExNCode;									// 取引先ｺｰﾄﾞ
                    ParamByName('SK').AsInteger  := Mem.FieldByName('intSateiNo').AsInteger;	// 査定方法
                    ParamByName('BP').AsInteger  := Mem.FieldByName('BunkaiPtn' ).AsInteger;	// 分解ﾊﾟﾀｰﾝ
// <155> 2007/12/25 H.Kawato Add Start
                    ParamByName('SCK').AsInteger := Mem.FieldByName('intSateiCalc' ).AsInteger;	// 査定金額計算

                    if  (Mem.FieldByName('intSateiCalc' ).AsInteger = 1) then       // 1:比率
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcHiritu' ).AsCurrency
                    else if (Mem.FieldByName('intSateiCalc' ).AsInteger = 2) then   // 2:定額
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcTeigaku').AsCurrency
                    else
                        ParamByName('SC').AsCurrency := 0;
// <155> 2007/12/25 H.Kawato Add End
                end
                else
                begin
// <155> 2007/12/25 H.Kawato Mod Start
//                    SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,SateiKbn)');
//                    SQL.Add('VALUES(:PN,:SK)');
                    SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,SateiKbn,SateiCalcKbn,SateiCalc)');
                    SQL.Add('VALUES(:PN,:SK,:SCK,:SC)');
// <155> 2007/12/25 H.Kawato Mod End

                    ParamByName('PN').AsFloat   := m_ExNCode;									// 取引先ｺｰﾄﾞ
                    ParamByName('SK').AsInteger := Mem.FieldByName('intSateiNo').AsInteger;		// 査定方法
// <155> 2007/12/25 H.Kawato Add Start
                    ParamByName('SCK').AsInteger := Mem.FieldByName('intSateiCalc' ).AsInteger;	// 査定金額計算

                    if  (Mem.FieldByName('intSateiCalc' ).AsInteger = 1) then       // 1:比率
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcHiritu' ).AsCurrency
                    else if (Mem.FieldByName('intSateiCalc' ).AsInteger = 2) then   // 2:定額
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcTeigaku').AsCurrency
                    else
                        ParamByName('SC').AsCurrency := 0;
// <155> 2007/12/25 H.Kawato Add End
                end;
// <142> 2007/02/20 H.Kawato Mod End
// <126> 2006/06/27 H.Kawato Mod End
            end
            else
            begin
                Close();
                SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
// <126> 2006/06/27 H.Kawato Mod Start
//			SQL.Add('UPDATE MTOKUI_PAY SET BunkaiKbn = :BK ');
                SQL.Add('UPDATE MTOKUI_PAY SET BunkaiKbn = :BK, SateiKbn = :SK ');
                SQL.Add('WHERE  BaseNCode= :PN');

                ParamByName('PN').AsFloat   := m_ExNCode;									// 取引先ｺｰﾄﾞ
                ParamByName('BK').AsInteger := Mem.FieldByName('intApartNo').AsInteger;		// 分解方法
                ParamByName('SK').AsInteger := Mem.FieldByName('intSateiNo').AsInteger;		// 査定方法 <126> Add
// <126> 2006/06/27 H.Kawato Mod End
}
                if (m_iProAdoptKbn = 1) then
                begin
                    SQL.Add('UPDATE MTOKUI_PAY SET  SateiKbn = :SK, BunkaiPtn = :BP ');
                    SQL.Add(',SateiCalcKbn = :SCK, SateiCalc = :SC ');                          // <155> 2007/12/25 H.Kawato Add
                    SQL.Add('WHERE  BaseNCode= :PN');

                    ParamByName('PN').AsFloat   := m_ExNCode;									// 取引先ｺｰﾄﾞ
                    ParamByName('SK').AsInteger := Mem.FieldByName('intSateiNo').AsInteger;		// 査定方法 <126> Add
                    ParamByName('BP').AsInteger := Mem.FieldByName('BunkaiPtn' ).AsInteger;		// 分解ﾊﾟﾀｰﾝ
// <155> 2007/12/25 H.Kawato Add Start
                    ParamByName('SCK').AsInteger := Mem.FieldByName('intSateiCalc' ).AsInteger;	// 査定金額計算

                    if  (Mem.FieldByName('intSateiCalc' ).AsInteger = 1) then       // 1:比率
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcHiritu' ).AsCurrency
                    else if (Mem.FieldByName('intSateiCalc' ).AsInteger = 2) then   // 2:定額
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcTeigaku').AsCurrency
                    else
                        ParamByName('SC').AsCurrency := 0;
// <155> 2007/12/25 H.Kawato Add End
                end
                else
                begin
                    SQL.Add('UPDATE MTOKUI_PAY SET SateiKbn = :SK ');
                    SQL.Add(',SateiCalcKbn = :SCK, SateiCalc = :SC ');                          // <155> 2007/12/25 H.Kawato Add
                    SQL.Add('WHERE  BaseNCode= :PN');

                    ParamByName('PN').AsFloat   := m_ExNCode;									// 取引先ｺｰﾄﾞ
                    ParamByName('SK').AsInteger := Mem.FieldByName('intSateiNo').AsInteger;		// 査定方法 <126> Add
// <155> 2007/12/25 H.Kawato Add Start
                    ParamByName('SCK').AsInteger := Mem.FieldByName('intSateiCalc' ).AsInteger;	// 査定金額計算

                    if  (Mem.FieldByName('intSateiCalc' ).AsInteger = 1) then       // 1:比率
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcHiritu' ).AsCurrency
                    else if (Mem.FieldByName('intSateiCalc' ).AsInteger = 2) then   // 2:定額
                        ParamByName('SC').AsCurrency := Mem.FieldByName('SateiCalcTeigaku').AsCurrency
                    else
                        ParamByName('SC').AsCurrency := 0;
// <155> 2007/12/25 H.Kawato Add End
                end;
// <142> 2007/02/20 H.Kawato Mod End
            end;

            if (not ExecSQL()) then
            begin
                fnErrorMessageDsp(Qe);
                Result := FALSE;
                Exit;
            end;

            //↓<Rel>
            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
            begin
                // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_PAY) = False ) then
                begin
                    Result := False;
                    Exit;
                end;

                // 更新されたときはSecHojyoDispInfoのﾒﾝﾃを行う。
                if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,m_ExNCode,Qe) then
                begin
                    Result := False;
                    Exit;
                end;
            end;
            //↑<Rel>
        end;
        Result := TRUE;															// 正常終了
    finally
        Qe.Close;
        Qe.Free;
    end;

end;
//**********************************************************************
//*		Proccess	:	支払条件ﾊﾟﾀｰﾝの更新
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Mem			:	MemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordBunkaiKbn(Mem: TdxMemData): Boolean;
var
    strSQL      : String;
    iPayPtnNo   : Integer;
    iPriPayWay  : Integer;
    iBunkaiKbn  : Integer;
    nPrjNCode   : Extended;
    nPjSubNCode : Extended;

begin
    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
    if (m_iProAdoptKbn = 1) then
    begin
        iPayPtnNo   := Mem.FieldByName('PayPtnNo').AsInteger;
        iPriPayWay  := 0;
        nPrjNCode   := Mem.FieldByName('PrjNCode').AsFloat;
        nPjSubNCode := Mem.FieldByName('PjSubNCode').AsFloat;
    end
    else    // 標準情報
    begin
        iPayPtnNo   := 1;
        iPriPayWay  := 0;
        nPrjNCode   := 0;
        nPjSubNCode := 0;
    end;

    iBunkaiKbn  := Mem.FieldByName('intApartNo').AsInteger;

	with (m_Qe) do

	begin
		Close();
		SQL.Clear();
		strSQL := 'SELECT PayPtnNo FROM PayPtnInfo '
                + 'WHERE  PjSubNCode = ' + FloatToStr(nPjSubNCode)
                + '  AND  PrjNCode = ' + FloatToStr(nPrjNCode)
                + '  AND  BmnNCode = 0 '
                + '  AND  PayNCode = ' + FloatToStr(m_ExNCode)
                + '  AND  RDelKbn = 0 ' // <144> Add
                + '  AND  MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);

		if (not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
            // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
            if (m_iProAdoptKbn = 1) then
            begin
                // 条件ﾊﾟﾀｰﾝNo最大値の取得
                fnGetMaxPayPtnNo(m_Qe, m_ExNCode, iPayPtnNo);

                Mem.Edit;
                Mem.FieldByName('PayPtnNo').AsInteger   := iPayPtnNo;
            end;

			// 新規
			Close();
			SQL.Clear();
			strSQL := 'INSERT INTO PayPtnInfo ('
                    + 'MasterKbn'
                    + ',PayNCode'
                    + ',PayPtnNo'
                    + ',BmnNCode'
                    + ',PrjNCode'
                    + ',PjSubNCode'
                    + ',BunkaiKbn'
                    + ',PriPayWay'
                    + ',RDelKbn'
                    + ',UpdDateTM'
                    + ',InsDateTM'
                    + ',UpdTantoNCode'
                    + ')VALUES('
                    +       IntToStr(MASTER_CUSTOMER)
                    + ',' + FloatToStr(m_ExNCode)
                    + ',' + IntToStr(iPayPtnNo)
                    + ',0'
                    + ',' + FloatToStr(nPrjNCode)
                    + ',' + FloatToStr(nPjSubNCode)
                    + ',' + IntToStr(iBunkaiKbn)
                    + ',' + IntToStr(iPriPayWay)
                    + ',0,Now(),Now()'
                    + ',' + FloatToStr(m_nTantoCd)
                    + ')';

            SQL.Add(strSQL);
		end
		else
		begin
			Close();
			SQL.Clear();
			strSQL := 'UPDATE PayPtnInfo SET '
                    + ' PriPayWay = ' + IntToStr(iPriPayWay)
                    + ',BunkaiKbn = ' + IntToStr(iBunkaiKbn)
                    + ',UpdTantoNCode = ' + FloatToStr(m_nTantoCd) // <160>
                    + 'WHERE  PayPtnNo = ' + IntToStr(iPayPtnNo)
                    + '  AND  PayNCode = ' + FloatToStr(m_ExNCode)
                    + '  AND  RDelKbn = 0 '     // <144> Add
                    + '  AND  MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

            SQL.Add(strSQL);
		end;

		if (not ExecSQL()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

    // 優先支払詳細情報のクリア
    if fnDeleteShousai(m_ExNCode, iPayPtnNo) = False then
    begin
        Result := FALSE;
        Exit;
    end;

	Result := TRUE;																	// 正常終了
end;

//************************************************************************
//*		Component		:	BDelete ( TSpeedButton )
//*
//*		Event			:	OnClick
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.BDeleteClick(Sender: TObject);
var
	cMessageRec : TMJSMsgRec;
	strHojCode  : String;
	strMessage  : String;
	sHojCD		: String;
	iSelect		: Integer;
	iLoop		: Integer;
	cNode		: TTreeNode;
	wkRec		: ^TreeViewRec;
    ExNCode     : Extended;
    iPayPtnNo   : Integer;  // <142> Add    ダミー用

begin
    iSelect     :=  0;
    ExNCode     :=  0;
    iPayPtnNo   :=  0;      // <142> Add    ダミー

	if (Screen.ActiveControl.Name = CmnTreeView.Name) then						// ﾂﾘｰ･ﾋﾞｭｰ
	begin
		strHojCode := PTreeViewRec (CmnTreeView.Selected.Data)^.sHojCode;
		strMessage := PTreeViewRec (CmnTreeView.Selected.Data)^.sName;
        ExNCode    := PTreeViewRec (CmnTreeView.Selected.Data)^.eNCode;
		iSelect	   := PTreeViewRec (CmnTreeView.Selected.Data)^.nSumKbn;
	end
	else if	(Screen.ActiveControl.Name = GridReal.Name) then					// 取引先ｸﾞﾘｯﾄﾞ(実在)
	begin
		strHojCode := GridReal.DataSource.DataSet.FieldByName('strHojCode'   ).AsString;
		strMessage := GridReal.DataSource.DataSet.FieldByName('strNameSimple').AsString;
        ExNCode    := GridReal.DataSource.DataSet.FieldByName('ExNCode'      ).AsFloat;
		iSelect	   := 0;
	end
	else if	(Screen.ActiveControl.Name = GridTotal.Name) then					// 取引先ｸﾞﾘｯﾄﾞ(合計)
	begin
		strHojCode := GridTotal.DataSource.DataSet.FieldByName('strHojCode'   ).AsString;
		strMessage := GridTotal.DataSource.DataSet.FieldByName('strNameSimple').AsString;
		ExNCode := GridTotal.DataSource.DataSet.FieldByName('ExNCode'      ).AsFloat;
		iSelect	   := 1;
	end;

	if (Trim (strHojCode) = '') then
		Exit;

	sHojCD := strHojCode;
	if (m_nCurCodeAttribute <= 1) then
		strHojCode := Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 4);

	strMessage	:= '"' + strMessage + '"のレコードを' + cMessageRec.sMsg;

	if	(MJSMessageBoxEx (Self,strMessage, cMessageRec.sTitle, cMessageRec.icontype,
									cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType) = mrYes) then
	begin
// <142> 2007/02/20 H.Kawato Mod
//		if fnDeleteMasterRecord(strHojCode,ExNCode) = False then
		if fnDeleteMasterRecord(strHojCode,ExNCode,iPayPtnNo) = False then
			exit;

// <142> 2007/02/20 H.Kawato Mod Start
{
		fnMemDelete(strHojCode,MemReal);		// 実在情報
		fnMemDelete(strHojCode,MemTotal);		// 合計情報
		fnMemDelete(strHojCode,MemPayWay);      // 支払方法 <142> Add
		fnMemDelete(strHojCode,MemPayRatio);	// 支払方法(比率)
		fnMemDelete(strHojCode,MemPayFixed);	// 支払方法(定額)
		fnMemDelete(strHojCode,MemFuri);		// 振込情報
		fnMemDelete(strHojCode,MemFuriDate);	// 期日指定振込情報
		fnMemDelete(strHojCode,MemDraft);		// 手形情報
		fnMemDelete(strHojCode,MemCheck);		// 小切手情報
		fnMemDeleteOffset(strHojCode);			// 相殺情報
		fnMemDelete(strHojCode,MemOther);       // その他情報
}
		fnMemDelete(strHojCode,iPayPtnNo,MemReal);		// 実在情報
		fnMemDelete(strHojCode,iPayPtnNo,MemTotal);		// 合計情報
		fnMemDelete(strHojCode,iPayPtnNo,MemPayWay);    // 支払方法 <142> Add
		fnMemDelete(strHojCode,iPayPtnNo,MemPayRatio);	// 支払方法(比率)
		fnMemDelete(strHojCode,iPayPtnNo,MemPayFixed);	// 支払方法(定額)
		fnMemDelete(strHojCode,iPayPtnNo,MemFuri);		// 振込情報
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
		fnMemDelete(strHojCode,iPayPtnNo,MemFuri_GD);		// 電信送金
		fnMemDelete(strHojCode,iPayPtnNo,MemFuri_GT);		// 為替手形
		fnMemDelete(strHojCode,iPayPtnNo,MemFuri_GK);		// 送金小切手
    end;
//<GA001>ED
		fnMemDelete(strHojCode,iPayPtnNo,MemFuriDate);	// 期日指定振込情報
		fnMemDelete(strHojCode,iPayPtnNo,MemDraft);		// 手形情報
		fnMemDelete(strHojCode,iPayPtnNo,MemCheck);		// 小切手情報
		fnMemDeleteOffset(strHojCode,iPayPtnNo);		// 相殺情報
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
		fnMemDeleteKhnsetG(strHojCode,iPayPtnNo);		// 可変項目情報
//<GA001>ED

		fnMemDelete(strHojCode,iPayPtnNo,MemOther);     // その他情報
// <142> 2007/02/20 H.Kawato Mod End
		fnMemDeleteNayose(iSelect,strHojCode);  // 名寄せ情報

		// GridのOptionsのｾｯﾄ
		fnGridOptionsControl(False,DISPOSE_PAYWAY,MemPayWay);		// 支払方法 <142> Add
		fnGridOptionsControl(False,DISPOSE_FIXED,MemPayRatio);		// 定額
		fnGridOptionsControl(False,DISPOSE_RATIO,MemPayFixed);		// 比率
		fnGridOptionsControl(False,DISPOSE_TRANSFER,MemFuri);		// 振込情報
//<GA001>ST
    if m_iGaikaKbn <> 0 then        // 外貨採用区分
    begin
		fnGridOptionsControl(False,DISPOSE_TRANSFER_GD,MemFuri_GD);	// 電信送金
		fnGridOptionsControl(False,DISPOSE_TRANSFER_GT,MemFuri_GT);	// 為替手形
		fnGridOptionsControl(False,DISPOSE_TRANSFER_GK,MemFuri_GK);	// 送金小切手
    end;
//<GA001>ED
		fnGridOptionsControl(False,DISPOSE_DATETRAN,MemFuriDate);	// 期日指定振込情報
		fnGridOptionsControl(False,DISPOSE_DRAFT,MemDraft);			// 手形情報
		fnGridOptionsControl(False,DISPOSE_CHECK,MemCheck);			// 小切手情報

		// 名寄せ
		for iLoop := TreeViewNayose.Items.Count-1 downto 0 do
		begin
			cNode := TreeViewNayose.Items[iLoop];
			wkRec := cNode.Data;
			if (wkRec.sHojCode = sHojCD) then
			begin
				cNode.Delete;
				exit;
			end
		end;

	end;
end;

//**********************************************************************
//*		Proccess	:	削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						Mem			:	MemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
// <142> 2007/02/20 H.Kawato Mod
////function TJNTCRP004007f.fnDeleteMasterRecord(strHojCode: String): Boolean;
//function TJNTCRP004007f.fnDeleteMasterRecord(strHojCode:String; ExNCode:Extended): Boolean;
function TJNTCRP004007f.fnDeleteMasterRecord(strHojCode:String; ExNCode:Extended; iPayPtnNo:Integer): Boolean;
begin
	m_cDataModule.BeginTran (m_cDBSelect);

	if	(not fnDeleteMasterRecordMTOKUI (ExNCode)) then     							// 補助基本ﾏｽﾀ更新
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordHojyoTree (ExNCode)) then							// 補助加算体系ﾏｽﾀ削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordMFusenInfo(ExNCode)) then							// ﾏｽﾀ付箋管理情報削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordPayPtnInfo (ExNCode)) then							// 支払条件ﾊﾟﾀｰﾝ削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

// <142> 2007/02/20 H.Kawato Mod
//	if	(not fnDeleteMasterRecordPayPtnDtl (ExNCode)) then							// 支払条件明細ﾏｽﾀ削除
	if	(not fnDeleteMasterRecordPayPtnDtl (ExNCode, iPayPtnNo)) then				// 支払条件明細ﾏｽﾀ削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordPayDetailInfo (ExNCode)) then						// 支払詳細情報ﾏｽﾀ削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordPayNayoseInfo (ExNCode)) then						// 名寄せ情報ﾏｽﾀ削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordPayOffsetInfo (ExNCode)) then						// 相殺情報ﾏｽﾀ削除
	begin
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)
		Result := FALSE;
		Exit;
	end;

	m_cDataModule.Commit(m_cDBSelect);													// ｺﾐｯﾄ(反映)

	m_nCurItemDivision	:= -1;

	fnDeleteTreeViewItems(strHojCode);

	Result	:= TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	補助加算体系ﾏｽﾀ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordHojyoTree (ExNCode: Extended): Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('DELETE FROM HojyoTree WHERE MasterKbn = :MK AND BasedNCode = :NC');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('NC').AsFloat	 := ExNCode;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
		m_nHojyoTree := 1;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	補助基本ﾏｽﾀ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordMTOKUI (ExNCode: Extended): Boolean;
{
var
	nInCode	: Integer;
begin
	nInCode	:= 0;
}
begin

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('UPDATE MTOKUI SET RDelKbn = 1 ');
		SQL.Add('WHERE  NCode = :NC');
		ParamByName ('NC').AsFloat	 := ExNCode;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	支払条件ﾊﾟﾀｰﾝ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordPayPtnInfo(ExNCode: Extended): Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('DELETE FROM MTOKUI_PAY WHERE BaseNCode = :PNC ');
		ParamByName ('PNC').AsFloat	 := ExNCode;


		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	TreeView削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnDeleteTreeViewItems (strHojCode: String);
var
	nCount	: Integer;																	// ｶｳﾝﾀｰ
begin
	for	nCount:=0 to CmnTreeView.Items.Count - 1 do
	begin
		if (CompareStr(PTreeViewRec(CmnTreeView.Items[nCount].Data)^.sHojCode, strHojCode) <> 0) then
			Continue;

		Dispose(CmnTreeView.Items [nCount].Data);

		CmnTreeView.Items [nCount].Delete();
		Break;
	end;
end;

//************************************************************************
//*		Component		:	GridEnter ( TdxDBGrid )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridEnter(Sender: TObject);
var
	fValueCheck : Boolean;
	iSumKbn		: Integer;
begin
	m_cACControl := Screen.ActiveControl;

	TBChgColSize.Enabled := False;
    iSumKbn :=  0;

	TdxDBGrid (Sender).FocusedColumn := 1;

	fValueCheck	:= TRUE;

	if (not fnCheckValidCodeUseCharacters (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
		fValueCheck	:= FALSE;

	if (fValueCheck and (TdxDBGrid (Sender).DataSource.DataSet.State in [dsInsert])) then
	begin
		if ((Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '' ) or
		    (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '0')) then
			fValueCheck	:= FALSE
		else if	(m_nCurCodeAttribute <= 1) then
		begin
			if (StrToInt64 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1])) = 0) then
				fValueCheck	:= FALSE;
		end;
	end;

	if (fValueCheck and (not TdxDBGrid (Sender).Columns [1].ReadOnly)) then
	begin
		if (not fnCheckValidMasterDataRecord (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
			fValueCheck	:= FALSE;
	end;

	if (not fValueCheck) then
	begin
		TdxDBGrid (Sender).FocusedColumn := 1;

		BDelete.Enabled	:= FALSE;
		TBTag.Enabled	:= FALSE;
		BSearch.Enabled	:= FALSE;
	end
	else
	begin
		if (Screen.ActiveControl.Name = TdxDBGrid (Sender).Name) then
		begin
			case Tab.Items.Selected of
				TAB_REAL : iSumKbn := 0;	// 実在
				TAB_TOTAL: iSumKbn := 1;	// 合計
			end;

			fnChangeConditionToolbarButtons (iSumKbn, TdxDBGrid (Sender).FocusedNode.Strings [1]);
		end;
	end;
end;

//************************************************************************
//*		Component		:	( TdxDBGrid )
//*
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
    iSateiCalc  : Integer;      // <155> 2007/12/25 H.Kawato Add
    iGaiNo      : Integer;      //<GA001>
begin
	//  ↑カーソル or PageUp

	if ( Key = VK_UP ) or ( Key = VK_PRIOR ) then
	begin
		if ( TdxDBGrid(Sender).DataLink.Bof = TRUE ) then
		begin
			beep;
			Key := 0;
		end;
	end;

	if (TdxDBGrid(Sender).Name = GridReal.Name) or
	   (TdxDBGrid(Sender).Name = GridTotal.Name) then
	begin
		//	TAB AND SHIFT	←カーソル and 編集中ではない
		if ((Key = VK_TAB) and (Shift = [ssShift])) or
							((Key = VK_LEFT) and (TdxDBGrid(Sender).State <> tsEditing))then
		begin
			if ( TdxDBGrid(Sender).FocusedColumn = 1 ) and ( TdxDBGrid(Sender).DataLink.Bof = TRUE ) then
			begin
				beep;
				Key := 0;
			end;
		end;
	end;

// <142> 2007/02/20 H.Kawato Add Start
	if (TdxDBGrid(Sender).Name = GridPayRatio.Name) or
	   (TdxDBGrid(Sender).Name = GridPayFixed.Name) then
	begin
		//	TAB AND SHIFT	←カーソル and 編集中ではない
		if ((Key = VK_TAB) and (Shift = [])) or (Key = VK_RIGHT) or (Key = VK_RETURN) then
		begin
            fnSetHouhou1(Sender);
		end;
	end;
// <142> 2007/02/20 H.Kawato Add End

    // <050>↓↓↓↓↓↓↓↓
	if (TdxDBGrid(Sender).Name = GridKihon.Name) then
	begin
// <155> 2007/12/25 H.Kawato Add Start
        // 査定金額計算区分を変更した場合の制御
        iSateiCalc  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiCalc' ).AsInteger;
        fnChangeSateiCalc(iSateiCalc);
// <155> 2007/12/25 H.Kawato Add End
		//	TAB AND SHIFT	←カーソル and 編集中ではない
		if	((Key = VK_TAB) and (Shift = [ssShift])) or
			((Key = VK_LEFT) and (TdxDBGrid(Sender).State <> tsEditing))then
		begin
// <142> 2007/02/20 H.Kawato Mod
//			if ( TdxDBGrid(Sender).FocusedColumn = 3 ) and ( TdxDBGrid(Sender).DataLink.Bof = TRUE ) then
			if ( TdxDBGrid(Sender).FocusedField = GridKihon_SateiNo.Field ) and
               ( TdxDBGrid(Sender).DataLink.Bof = TRUE ) then
			begin
				beep;
				Key := 0;
			end;
		end;
	end;
    // <050>↑↑↑↑↑↑↑↑

//<GA001>ST
	if (TdxDBGrid(Sender).Name = GridKihonG.Name) then
	begin
        // 採用区分を変更した場合の制御
        iGaiNo  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiNo' ).AsInteger;
        fnChangeGai(iGaiNo);

		//	TAB AND SHIFT	←カーソル and 編集中ではない
		if	((Key = VK_TAB) and (Shift = [ssShift])) or
			((Key = VK_LEFT) and (TdxDBGrid(Sender).State <> tsEditing))then
		begin
			if ( TdxDBGrid(Sender).FocusedField = GridKihonG_GaiNo.Field ) and
               ( TdxDBGrid(Sender).DataLink.Bof = TRUE ) then
			begin
				beep;
				Key := 0;
			end;
		end;
	end;
//<GA001>ED




// <128> 2006/06/29 H.Kawato Add Start
    if TdxDBGrid(Sender).Name = GridFurikomi.Name then
    begin
// <138> 2006/08/11 H.Kawato Mod
//        if (m_iHeikouData = 0) or (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0) then
        if (m_bChgNodeFlg) or (m_iHeikouData = 0) or
           (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0) then
// <138> 2006/08/11 H.Kawato Mod
        begin
// <142> 2007/02/20 H.Kawato Mod Start
//            TdxDBGrid(Sender).Columns [28].ReadOnly := True;
//            TdxDBGrid(Sender).Columns [28].TabStop  := False;
            Fri_AccAutoData.ReadOnly := True;
            Fri_AccAutoData.TabStop  := False;
// <142> 2007/02/20 H.Kawato Mod End
        end
        else
        begin
// <142> 2007/02/20 H.Kawato Mod Start
//            TdxDBGrid(Sender).Columns [28].ReadOnly := False;
//            TdxDBGrid(Sender).Columns [28].TabStop  := True;
            Fri_AccAutoData.ReadOnly := False;
            Fri_AccAutoData.TabStop  := True;
// <142> 2007/02/20 H.Kawato Mod End
        end;
    end;
// <128> 2006/06/29 H.Kawato Add End



	//	INSERTを押しても挿入不可にしている
	if (Key = VK_INSERT) then
		abort;
end;

//************************************************************************
//*		Component		:	CmnGridEnter ( TdxDBGrid )
//*
//*		Event			:	OnKeyPress
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridKeyPress(Sender: TObject; var Key: Char);
begin
	if ((TdxDBGrid (Sender).FocusedColumn <> 1) or (m_nCurCodeAttribute = 2)) then
		Exit;

	//* #8=BackSpace, #27=Esc, #9=Tab */
	if	(((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9)) then
	begin
		Beep  ();
		Abort ();
	end;
end;

// <155> 2007/12/25 H.Kawato Add Start
//************************************************************************
//*		Component		:	GridKihon ( TdxDBGrid )
//*
//*		Event			:	OnKeyPress
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridKihonKeyPress(Sender: TObject; var Key: Char);
begin
    // 受取人名称は数値以外も入力可
	if (TdxDBGrid (Sender).FocusedField = GridKihon_UketoriName.Field) then
		Exit;

	//* #8=BackSpace, #27=Esc, #9=Tab */    //* 比率は小数点の入力可 */
	if	(((Key < '0') or (Key > '9')) and
         ((TdxDBGrid (Sender).FocusedField <> GridKihon_H_SateiCalcValue.Field) and (Key = '.')) and
         (Key <> #8) and (Key <> #27) and (Key <> #9)) then
	begin
		Beep  ();
		Abort ();
	end;
end;
// <155> 2007/12/25 H.Kawato Add End

//************************************************************************
//*		Component		:	Tab ( TMTab )
//*
//*		Event			:	OnChange
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.TabChange(Sender: TObject);
begin
	if (m_pRec^.m_pChildForm = nil) then
		Exit;

// <142> 2007/02/20 H.Kawato Add Start
    if (PanelShousai.Visible) then
        PanelShousai.Visible := False;
// <142> 2007/02/20 H.Kawato Add End

    CmnStatusBar.SimpleText	 := '';                         // <196> ADD

    // ﾃﾞｰﾀ読込処理
	case Tab.Items.Selected of
		DISPOSE_PAYWAY:   if m_DataLoadFlg.PayWay = False then   fnDataLoad(Tab.Items.Selected);	// 支払方法 <142> Add
		DISPOSE_RATIO:    if m_DataLoadFlg.Hiritsu = False then  fnDataLoad(Tab.Items.Selected);	// 支払方法(比率)
		DISPOSE_FIXED:    if m_DataLoadFlg.Teigaku = False then  fnDataLoad(Tab.Items.Selected);	// 支払方法(定額)
		DISPOSE_TRANSFER: if m_DataLoadFlg.Furi = False then	 fnDataLoad(Tab.Items.Selected);	// 振込
		DISPOSE_DATETRAN: if m_DataLoadFlg.DateFuri = False then fnDataLoad(Tab.Items.Selected);	// 期日指定振込
		DISPOSE_DRAFT:    if m_DataLoadFlg.Draft = False then	 fnDataLoad(Tab.Items.Selected);	// 手形
		DISPOSE_CHECK:	  if m_DataLoadFlg.Check = False then	 fnDataLoad(Tab.Items.Selected);	// 小切手
		DISPOSE_OFFSET:	  if m_DataLoadFlg.Offset = False then	 fnDataLoad(Tab.Items.Selected);	// 相殺
		DISPOSE_OTHER:	  if m_DataLoadFlg.Other = False then	 fnDataLoad(Tab.Items.Selected);	// その他
		DISPOSE_NAYOSEOYA:if m_DataLoadFlg.Nayose = False then	 fnDataLoad(Tab.Items.Selected);	// 名寄せ
//<GA001>ST
		DISPOSE_KHNSET_G:    if m_DataLoadFlg.KhnsetG = False then	 fnDataLoad(Tab.Items.Selected);	// 可変項目
		DISPOSE_TRANSFER_GD: if m_DataLoadFlg.FuriGD = False then	 fnDataLoad(Tab.Items.Selected);	// 電信送金
		DISPOSE_TRANSFER_GT: if m_DataLoadFlg.FuriGT = False then	 fnDataLoad(Tab.Items.Selected);	// 為替手形　
		DISPOSE_TRANSFER_GK: if m_DataLoadFlg.FuriGK = False then	 fnDataLoad(Tab.Items.Selected);	// 送金小切手
//<GA001>ED
	end;



	if m_ThroughTab = True then
	begin
		m_ThroughTab := False;
		exit;
	end;

	// 相殺情報
	if (Tab.Items.Selected = DISPOSE_OFFSET) then
	begin
		BSearch.Enabled := False;
		if (m_nRefermode <> REFER) then														// ﾒｰｲﾙ会計参照ﾌﾗｸﾞ: 参照時
		begin
			if (m_nCurCodeAttribute <= 1) then		// ｺｰﾄﾞ属性: 数字
				m_cACControl := Edit00PayCodeNum
			else
				m_cACControl := Edit00PayCodeFree;
		end
		else
			m_cACControl := GridOffset;
		fnSetOffsetInfo();
		m_cACControl.SetFocus();
		exit;
	end;

//<GA001>ST
	// 可変項目情報
	if (Tab.Items.Selected = DISPOSE_KHNSET_G) then
	begin
		BSearch.Enabled := False;
		if (m_nRefermode <> REFER) then														// ﾒｰｲﾙ会計参照ﾌﾗｸﾞ: 参照時
		begin
			if (m_nCurCodeAttribute <= 1) then		// ｺｰﾄﾞ属性: 数字
				m_cACControl := Edit00GPayCodeNum
			else
				m_cACControl := Edit00GPayCodeFree;
		end
		else
			m_cACControl := GridKhnsetG;

		fnSetKhnsetGInfo();

		m_cACControl.SetFocus();
		exit;

	end;
//<GA001>ED

	// 名寄せ情報
	if (Tab.Items.Selected = DISPOSE_NAYOSEOYA) then
	begin
		m_EditFlg := False;
		CmnTreeView.DragMode := dmAutomatic;
	end
	else
		CmnTreeView.DragMode := dmManual;

// 2006/05/10 H.Kawato Add <124>

	// 支払方法(比率)
	if (Tab.Items.Selected = DISPOSE_RATIO) then
		fnSetFncType(1,True)
	else
		fnSetFncType(1,False);

    // <182>
	// 銀行情報登録
	if ((Tab.Items.Selected = DISPOSE_TRANSFER) or           // 振込情報タブ
       (Tab.Items.Selected = DISPOSE_DATETRAN)) and          // 期日指定振込情報タブ
       (m_IsUpdate) then
		fnSetFncType(6,True)
	else
		fnSetFncType(6,False);

// <142> 2007/02/20 H.Kawato Add Start
	// 支払方法(比率/比率)
// <172> Del
//  if (m_iProAdoptKbn = 1) then
//  begin
// <172> Del
	    if (Tab.Items.Selected = DISPOSE_RATIO) or
           (Tab.Items.Selected = DISPOSE_FIXED) then
        	fnSetFncType(8,True)
        else
        	fnSetFncType(8,False);
//  end;									// <172> Del
// <142> 2007/02/20 H.Kawato Add End

// 2006/05/10 H.Kawato Add <124>



	case Tab.Items.Selected of
        TAB_KIHON       : m_cACControl := GridKihon;	    // 実在情報
		TAB_REAL        : m_cACControl := GridReal;		    // 実在情報
		TAB_TOTAL       : m_cACControl := GridTotal;		// 合計情報
// <142> 2007/02/20 H.Kawato Add Start
		TAB_PAYWAY      :                                   // 支払方法
        begin
            m_cACControl := GridPayWay;

            if (GridPayWay.DataSource.DataSet.FieldByName('bDisableEditor').AsBoolean = False) then
                GridPayWay.FocusedField  := GridPayWay_GCode.Field
            else
                GridPayWay.FocusedField  := GridPayWay_BunkaiNo.Field;
        end;
// <142> 2007/02/20 H.Kawato Add End
		TAB_RATIO       : m_cACControl := GridPayRatio;	    // 支払方法(比率)
		TAB_FIXED       : m_cACControl := GridPayFixed;	    // 支払方法(定額)
		TAB_TRANSFER    : m_cACControl := GridFurikomi;	    // 振込情報
		TAB_DATETRAN    : m_cACControl := GridFuriDate;	    // 期日指定振込情報
		TAB_DRAFT       : m_cACControl := GridDraft;		// 手形情報
		TAB_CHECK       : m_cACControl := GridCheck;		// 小切手情報
		TAB_OTHER       : m_cACControl := GridOther;		// その他情報
		TAB_NAYOSEOYA   :									// 名寄せ情報
		begin
			if RBNayoseTree.Checked = True then
				m_cACControl := RBNayoseTree
			else
				m_cACControl := RBNayoseGrid;
			BSearch.Enabled := True;
		end;
//<GA001>ST
        TAB_KIHON_G             : m_cACControl := GridKihonG;	                        //外貨基本
        TAB_TRANSFER_GD         : m_cACControl := GridFurikomiGD;                       //電信送金
        TAB_TRANSFER_GT         : m_cACControl := GridFurikomiGT;                       //為替手形
        TAB_TRANSFER_GK         : m_cACControl := GridFurikomiGK;                       //送金小切手
//<GA001>ED
	end;
	m_cACControl.SetFocus ();
end;

//************************************************************************
//*		Component		:	TBChgColSize(TToolButton)
//*							支払予定(比率)のｶﾗﾑを表示/非表示
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TBChgColSizeClick(Sender: TObject);
var
	bDsp	: Boolean;
    i       : Integer;          // <133> 2006/08/10 H.Kawato Add
    str     : String;           // <133> 2006/08/10 H.Kawato Add
begin
// <142> 2007/02/20 H.Kawato Add Start
    // 優先支払詳細情報表示時
    if (PanelShousai.Visible = True) then
    begin
	    // 表示
        if Shousai_Hou1_HasuuKingaku.Visible = False then
        	bDsp := True
        // 非表示
        else
        	bDsp := False;

        m_bShousaiDetail := bDsp;

        Shousai_Hou1_HasuuKingaku.Visible   := bDsp;
        Shousai_Hou1_HasuuHou.Visible       := bDsp;
        Shousai_Hou1_HasuuHouN.Visible      := bDsp;
        Shousai_Hou1_Site.Visible           := bDsp;

        Shousai_Hou2_HasuuKingaku.Visible   := bDsp;
        Shousai_Hou2_HasuuHou.Visible       := bDsp;
        Shousai_Hou2_HasuuHouN.Visible      := bDsp;
        Shousai_Hou2_Site.Visible           := bDsp;

        Shousai_Hou3_HasuuKingaku.Visible   := bDsp;
        Shousai_Hou3_HasuuHou.Visible       := bDsp;
        Shousai_Hou3_HasuuHouN.Visible      := bDsp;
        Shousai_Hou3_Site.Visible           := bDsp;

        Shousai_Hou4_HasuuKingaku.Visible   := bDsp;
        Shousai_Hou4_HasuuHou.Visible       := bDsp;
        Shousai_Hou4_HasuuHouN.Visible      := bDsp;
        Shousai_Hou4_Site.Visible           := bDsp;

        Shousai_Hou5_HasuuKingaku.Visible   := bDsp;
        Shousai_Hou5_HasuuHou.Visible       := bDsp;
        Shousai_Hou5_HasuuHouN.Visible      := bDsp;
        Shousai_Hou5_Site.Visible           := bDsp;
    end
    else
    begin
// <142> 2007/02/20 H.Kawato Add End
	    // 表示
        if Hou_H_Houhou1_Minkin.Visible = False then
        	bDsp := True
        // 非表示
        else
        	bDsp := False;

// <133> 2006/08/10 H.Kawato Add Start
        for i:=1 to 5 do
        begin
        	Str := IntToStr(i);
        	m_arPayRatioSave[i].iHouHou  := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'No'      ).AsInteger;    // 支払方法
        	m_arPayRatioSave[i].cStdRitu := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency;   // 分解基準値
        	m_arPayRatioSave[i].cMinKin  := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'MinKin'  ).AsCurrency;   // 支払最低額
        	m_arPayRatioSave[i].cHasuKin := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin').AsCurrency;   // 端数処理額
        	m_arPayRatioSave[i].iHasuHou := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou').AsInteger;	// 端数処理方法
        end;
// <133> 2006/08/10 H.Kawato Add End

        m_bPayRatioDetail := bDsp;
        // 方法1
        Hou_H_Houhou1_Minkin.Visible      := bDsp;	// 支払最低額
        Hou_H_Houhou1_HasuuKin.Visible    := bDsp;	// 端数処理額
        Hou_H_Houhou1_HasuuHou.Visible    := bDsp;	// 端数処理方法(No)
        Hou_H_Houhou1_HasuuHouMei.Visible := bDsp;	// 端数処理方法(名)
        // 方法2
        Hou_H_Houhou2_Minkin.Visible      := bDsp;	// 支払最低額
        Hou_H_Houhou2_HasuuKin.Visible    := bDsp;	// 端数処理額
        Hou_H_Houhou2_HasuuHou.Visible    := bDsp;	// 端数処理方法(No)
        Hou_H_Houhou2_HasuuHouMei.Visible := bDsp;	// 端数処理方法(名)
        // 方法3
        Hou_H_Houhou3_Minkin.Visible      := bDsp;	// 支払最低額
        Hou_H_Houhou3_HasuuKin.Visible    := bDsp;	// 端数処理額
        Hou_H_Houhou3_HasuuHou.Visible    := bDsp;	// 端数処理方法(No)
        Hou_H_Houhou3_HasuuHouMei.Visible := bDsp;	// 端数処理方法(名)
        // 方法4
        Hou_H_Houhou4_Minkin.Visible      := bDsp;	// 支払最低額
        Hou_H_Houhou4_HasuuKin.Visible    := bDsp;	// 端数処理額
        Hou_H_Houhou4_HasuuHou.Visible    := bDsp;	// 端数処理方法(No)
        Hou_H_Houhou4_HasuuHouMei.Visible := bDsp;	// 端数処理方法(名)
        // 方法5
        Hou_H_Houhou5_Minkin.Visible      := bDsp;	// 支払最低額
        Hou_H_Houhou5_HasuuKin.Visible    := bDsp;	// 端数処理額
        Hou_H_Houhou5_HasuuHou.Visible    := bDsp;	// 端数処理方法(No)
        Hou_H_Houhou5_HasuuHouMei.Visible := bDsp;	// 端数処理方法(名)

//<172> Del
(*
// <133> 2006/08/10 H.Kawato Add Start
        for i:=1 to 5 do
        begin
        	Str := IntToStr(i);
// <142> 2007/02/20 H.Kawato Mod Start
{
        	GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'No'      ).AsInteger  := m_arPayRatioSave[i].iHouHou;    // 支払方法
        	GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency := m_arPayRatioSave[i].cStdRitu;   // 分解基準値
        	GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'MinKin'  ).AsCurrency := m_arPayRatioSave[i].cMinKin;	// 支払最低額
        	GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin').AsCurrency := m_arPayRatioSave[i].cHasuKin;   // 端数処理額
        	GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou').AsInteger  := m_arPayRatioSave[i].iHasuHou;   // 端数処理方法
}
            MemPayRatio.Edit;
        	MemPayRatio.FieldByName('Hou'+Str+'No'      ).AsInteger  := m_arPayRatioSave[i].iHouHou;    // 支払方法
        	MemPayRatio.FieldByName('Hou'+Str+'StdRitsu').AsCurrency := m_arPayRatioSave[i].cStdRitu;   // 分解基準値
        	MemPayRatio.FieldByName('Hou'+Str+'MinKin'  ).AsCurrency := m_arPayRatioSave[i].cMinKin;	// 支払最低額
        	MemPayRatio.FieldByName('Hou'+Str+'HasuuKin').AsCurrency := m_arPayRatioSave[i].cHasuKin;   // 端数処理額
        	MemPayRatio.FieldByName('Hou'+Str+'HasuuHou').AsInteger  := m_arPayRatioSave[i].iHasuHou;   // 端数処理方法
// <142> 2007/02/20 H.Kawato Mod End
        end;
// <133> 2006/08/10 H.Kawato Add End
*)
//<172> Del
    end;    // <142> Add

end;

//************************************************************************
//*		Component		:	GridShousaiChange
//*							優先支払詳細情報グリッドの切り替え
//*		Event			:
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20 <142>
//************************************************************************
procedure TJNTCRP004007f.GridShousaiChange(nSelect: Integer);
begin
    case nSelect of
        TAB_RATIO:   // 支払方法(比率)
        begin
            if (uvFncInfo.Caption[7] = 'F8 優先支払詳細') then
            begin
                SetGridShousai(nSelect);
                fnGetPayWayShousaiInfo();

                PanelShousai.Visible    := True;
                PanelPayRatio.Visible   := False;
                m_cACControl    := GridShousai;
            end
            else
            begin
                PanelShousai.Visible    := False;
                PanelPayRatio.Visible   := True;
                m_cACControl    := GridPayRatio;
            end;
            m_cACControl.SetFocus();
        end;

        TAB_FIXED:  // 支払方法(定額)
        begin
            if (uvFncInfo.Caption[7] = 'F8 優先支払詳細') then
            begin
                SetGridShousai(nSelect);
                fnGetPayWayShousaiInfo();

                PanelShousai.Visible    := True;
                PanelPayFixed.Visible   := False;
                m_cACControl    := GridShousai;
            end
            else
            begin
                PanelShousai.Visible    := False;
                PanelPayFixed.Visible   := True;
                m_cACControl    := GridPayFixed;
            end;
            m_cACControl.SetFocus();
        end;
    end;
end;

//************************************************************************
//*		Component		:	SetGridShousai
//*							優先支払詳細情報セット
//*		Event			:
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20 <142>
//************************************************************************
procedure TJNTCRP004007f.SetGridShousai(nSelect: Integer);
begin
    case nSelect of
        DISPOSE_RATIO:   // 支払方法(比率)
        begin
{
            Shousai_Hou1_BaseKingaku.Visible    := True;
            Shousai_Hou1_BaseHiritu.Visible     := True;
            Shousai_Hou1_HasuuKingaku.Visible   := False;
            Shousai_Hou1_HasuuHou.Visible       := False;
            Shousai_Hou1_HasuuHouN.Visible      := False;
            Shousai_Hou1_Site.Visible           := False;

            Shousai_Hou2_BaseKingaku.Visible    := True;
            Shousai_Hou2_BaseHiritu.Visible     := True;
            Shousai_Hou2_HasuuKingaku.Visible   := False;
            Shousai_Hou2_HasuuHou.Visible       := False;
            Shousai_Hou2_HasuuHouN.Visible      := False;
            Shousai_Hou2_Site.Visible           := False;

            Shousai_Hou3_BaseKingaku.Visible    := True;
            Shousai_Hou3_BaseHiritu.Visible     := True;
            Shousai_Hou3_HasuuKingaku.Visible   := False;
            Shousai_Hou3_HasuuHou.Visible       := False;
            Shousai_Hou3_HasuuHouN.Visible      := False;
            Shousai_Hou3_Site.Visible           := False;

            Shousai_Hou4_BaseKingaku.Visible    := True;
            Shousai_Hou4_BaseHiritu.Visible     := True;
            Shousai_Hou4_HasuuKingaku.Visible   := False;
            Shousai_Hou4_HasuuHou.Visible       := False;
            Shousai_Hou4_HasuuHouN.Visible      := False;
            Shousai_Hou4_Site.Visible           := False;

            Shousai_Hou5_BaseKingaku.Visible    := True;
            Shousai_Hou5_BaseHiritu.Visible     := True;
            Shousai_Hou5_HasuuKingaku.Visible   := False;
            Shousai_Hou5_HasuuHou.Visible       := False;
            Shousai_Hou5_HasuuHouN.Visible      := False;
            Shousai_Hou5_Site.Visible           := False;
}
//<172> Add
			Shousai_Hou1_Site.Visible           := False;
			Shousai_Hou2_Site.Visible           := False;
			Shousai_Hou3_Site.Visible           := False;
			Shousai_Hou4_Site.Visible           := False;
			Shousai_Hou5_Site.Visible           := False;
//<172> Add
            MemShousaiHou1BaseHiritu.DisplayFormat  := '##0.00';        // 分解基準値1
            MemShousaiHou2BaseHiritu.DisplayFormat  := '##0.00';        // 分解基準値2
            MemShousaiHou3BaseHiritu.DisplayFormat  := '##0.00';        // 分解基準値3
            MemShousaiHou4BaseHiritu.DisplayFormat  := '##0.00';        // 分解基準値4
            MemShousaiHou5BaseHiritu.DisplayFormat  := '##0.00';        // 分解基準値5
        end;

        DISPOSE_FIXED:  // 支払方法(定額)
        begin
            Shousai_Hou1_BaseKingaku.Visible    := True;
            Shousai_Hou1_BaseHiritu.Visible     := True;
            Shousai_Hou1_HasuuKingaku.Visible   := False;
            Shousai_Hou1_HasuuHou.Visible       := False;
            Shousai_Hou1_HasuuHouN.Visible      := False;
//<172> Mod
//          Shousai_Hou1_Site.Visible           := False;
			Shousai_Hou1_Site.Visible           := True;
//<172> Mod

            Shousai_Hou2_BaseKingaku.Visible    := True;
            Shousai_Hou2_BaseHiritu.Visible     := True;
            Shousai_Hou2_HasuuKingaku.Visible   := False;
            Shousai_Hou2_HasuuHou.Visible       := False;
            Shousai_Hou2_HasuuHouN.Visible      := False;
//<172> Mod
//          Shousai_Hou2_Site.Visible           := False;
			Shousai_Hou2_Site.Visible           := True;
//<172> Mod

            Shousai_Hou3_BaseKingaku.Visible    := True;
            Shousai_Hou3_BaseHiritu.Visible     := True;
            Shousai_Hou3_HasuuKingaku.Visible   := False;
            Shousai_Hou3_HasuuHou.Visible       := False;
            Shousai_Hou3_HasuuHouN.Visible      := False;
//<172> Mod
//          Shousai_Hou3_Site.Visible           := False;
			Shousai_Hou3_Site.Visible           := True;
//<172> Mod

            Shousai_Hou4_BaseKingaku.Visible    := True;
            Shousai_Hou4_BaseHiritu.Visible     := True;
            Shousai_Hou4_HasuuKingaku.Visible   := False;
            Shousai_Hou4_HasuuHou.Visible       := False;
            Shousai_Hou4_HasuuHouN.Visible      := False;
//<172> Mod
//          Shousai_Hou4_Site.Visible           := False;
			Shousai_Hou4_Site.Visible           := True;
//<172> Mod

            Shousai_Hou5_BaseKingaku.Visible    := True;
            Shousai_Hou5_BaseHiritu.Visible     := True;
            Shousai_Hou5_HasuuKingaku.Visible   := False;
            Shousai_Hou5_HasuuHou.Visible       := False;
            Shousai_Hou5_HasuuHouN.Visible      := False;
//<172> Mod
//          Shousai_Hou5_Site.Visible           := False;
			Shousai_Hou5_Site.Visible           := True;
//<172> Mod

            MemShousaiHou1BaseHiritu.DisplayFormat  := '#,###,###,##0'; // 分解基準値1
            MemShousaiHou2BaseHiritu.DisplayFormat  := '#,###,###,##0'; // 分解基準値2
            MemShousaiHou3BaseHiritu.DisplayFormat  := '#,###,###,##0'; // 分解基準値3
            MemShousaiHou4BaseHiritu.DisplayFormat  := '#,###,###,##0'; // 分解基準値4
            MemShousaiHou5BaseHiritu.DisplayFormat  := '#,###,###,##0'; // 分解基準値5
        end;
    end;
end;

// <142> 2007/02/20 H.Kawato Add Start
//**********************************************************************
//*		Proccess	:	支払方法情報取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetPayWayInfo();
var
	strHojCode	: String;
	strFormat	: String;
    strSQL      : String;
begin
	m_bChange := TRUE;

	DSPayWay.DataSet := nil;

	MemPayWay.Close;
	MemPayWay.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		strSQL := 'SELECT '
                + ' ISNULL(MT.SumKbn, 0) AS SumKbn '                    // 実在／合計区分
                + ',ISNULL(MT.NCode, 0) AS PayNCode '                   // 支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 // 支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   // 連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   // 支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                // 条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           // ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(KI.PartKbn, 0) AS PartKbn '                  // 工種管理区分
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(PT.BunkaiKbn, 0) AS BunakiKbn '              // 分解方法
                + ',ISNULL(PT.PriPayWay, 0) AS PriPayWay '              // 優先支払方法
                + ',ISNULL(DI.UketoriName, '''') AS UketoriName '       // 受取人名称
                + 'FROM MTOKUI MT '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + ' ON (DI.MasterKbn = PT.MasterKbn'
                + ' AND DI.PayNCode = MT.NCode '
                + ' AND DI.PayPtnNo = PT.PayPtnNo '
                + ' AND DI.Edaban  = 1 '
                + ' AND DI.RDelKbn = 0 ' // <144> Add
                + ' AND DI.ShiharaiSyubetu = 1) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'LEFT OUTER JOIN KojiInfo KI '
                + ' ON (KI.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND KI.NCode  = HM1.NCode) '
                + 'WHERE MT.RDelKbn = 0 AND MT.SumKbn <> 9 '
// <174> Mod
//              + ' AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) '
				+ ' AND ((MT.SumKbn = 0 or MT.SumKbn = 1) and MT.HojyoKbn2 = 1) '
// <174> Mod
                + ' AND MT.TemplateKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,PAYCode,SortPrjGCode,SortPjSubGCode ';

		SQL.Add(strSQL);

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
            MemPayWay.Append;

            strHojCode := FieldByName ('PayCode').Value;
            if (m_nCurCodeAttribute <= 1) then
            begin
            	case (m_nCurCodeAttribute) of
            		0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
            	end;

            	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;

            MemPayWay.FieldByName('ExNCode'         ).AsFloat   := FieldByName('PayNCode'   ).Value;    // 補助ｺｰﾄﾞ
			MemPayWay.FieldByName('intSumKbn'       ).AsInteger := FieldByName('SumKbn'     ).Value;    // 実在／合計区分
            MemPayWay.FieldByName('strHojCode'      ).AsString  := strHojCode;							// 補助ｺｰﾄﾞ
            MemPayWay.FieldByName('BaseHojCode'     ).AsString  := FieldByName('PayCode'    ).Value;	// 補助ｺｰﾄﾞ
            MemPayWay.FieldByName('strNameSimple'   ).AsString  := FieldByName('PayName'    ).Value;	// 補助名称
            MemPayWay.FieldByName('strAssociation'  ).AsString  := FieldByName('Renso'      ).Value;	// 連想
            MemPayWay.FieldByName('PayPtnNo'        ).AsInteger := FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

            strHojCode := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemPayWay.FieldByName('PrjNCode'    ).AsFloat   := FieldByName('PrjNCode'   ).Value;    // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            MemPayWay.FieldByName('PrjGCode'    ).AsString  := strHojCode;                          // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemPayWay.FieldByName('PrjName'   ).AsString := FieldByName('PrjName'   ).Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	MemPayWay.FieldByName('PrjName'   ).AsString := 'その他';

            MemPayWay.FieldByName('iPartKbn'   ).AsInteger  := FieldByName('PartKbn'    ).Value;    // 工種管理区分

            strHojCode := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemPayWay.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;       // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            MemPayWay.FieldByName('PjSubGCode').AsString := strHojCode;							    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemPayWay.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                MemPayWay.FieldByName('PjSubName' ).AsString := 'その他';

			MemPayWay.FieldByName('ApartData' ).AsInteger    := FieldByName('BunakiKbn'  ).Value;   // 分解区分

//<172> Mod
//          if (FieldByName('PriPayWay'  ).Value <> 0) then                                         // 手形優先
//            	MemPayWay.FieldByName('PriPayWay' ).AsInteger := 1
//          else
//            	MemPayWay.FieldByName('PriPayWay' ).AsInteger := 0;
           	MemPayWay.FieldByName('PriPayWay' ).AsInteger := FieldByName('PriPayWay'  ).Value;		//優先支払
//<172> Mod

			MemPayWay.FieldByName('UketoriName'   ).AsString := GetFld('UketoriName').Value;	    // 受取人名称
			MemPayWay.FieldByName('bDisableEditor').AsBoolean := True;                              // 登録済フラグ

			MemPayWay.Post;
			next;
		end;
	end;
	MemPayWay.First;

	DSPayWay.DataSet := MemPayWay;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_PayWay,MemPayWay);
end;
// <142> 2007/02/20 H.Kawato Add End

//**********************************************************************
//*		Proccess	:	支払方法(比率)情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetPayWayRatioInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sSaveCode	: String;
	Int,i		: Integer;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
    sSavePrjCd  : String;   // <142> 2007/02/20 H.Kawato Add
    sSvPjSubCd  : String;   // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;
	sSaveCode := '';
	Int := 6;

	DSPayRatio.DataSet := nil;

	MemPayRatio.Close;
	MemPayRatio.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT MT.NCode,MT.GCode,MT.Renso,MT.NMK,PI.BunkaiKbn');
		SQL.Add(',PD.Houhou,PD.StdRitu,PD.MinKin,PD.HasuuKin,PD.HasuuHou,PD.JoukenNo');
		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN PayPtnDtl  PD ON (PD.MasterKbn = :MK AND MT.NCode = PD.PayNCode) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY PI ON (MT.NCode = PI.BaseNCode ) ');
		SQL.Add('WHERE MT.RDelKbn = 0 AND MT.SumKbn <> 9 AND PI.BunkaiKbn <> 1');
//		SQL.Add('AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) ');
		SQL.Add('AND (MT.HojyoKbn2 = 1) ');
        SQL.Add('AND MT.TemplateKbn = 0');                  // <102>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode,PD.JoukenNo ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL := 'SELECT '
                + 'ISNULL(MT.NCode, 0) AS PayNCode '
                + ',ISNULL(MT.GCode, '''') AS PayCode '
                + ',ISNULL(MT.Renso, '''') AS Renso '
                + ',ISNULL(MT.NMK, '''') AS PayName '
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'
                + ',ISNULL(PT.BunkaiKbn, 0) AS BunakiKbn '
                + ',ISNULL(PT.PriPayWay, 0) AS PriPayWay '
                + ',ISNULL(PD.Houhou, 0) AS Houhou '
                + ',ISNULL(PD.StdRitu, 0.00) AS StdRitu '
                + ',ISNULL(PD.MinKin, 0) AS Minkin '
                + ',ISNULL(PD.HasuuKin, 0) AS HasuuKin '
                + ',ISNULL(PD.HasuuHou, 0) AS HasuuHou '
                + ',ISNULL(PD.JoukenNo, 0) AS JoukenNo '
                + 'FROM MTOKUI MT '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayPtnDtl PD '
                + ' ON (PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.NCode = PD.PayNCode '
                + ' AND PD.PayPtnNo = PT.PayPtnNo) '
                + 'LEFT OUTER JOIN MTOKUI_PAY PI '
                + ' ON (MT.NCode = PI.BaseNCode ) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE MT.RDelKbn = 0  AND MT.SumKbn <> 9  AND PT.BunkaiKbn <> 1 '
// <174> Mod
//              + ' AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) '
				+ ' AND ((MT.SumKbn = 0 or MT.SumKbn = 1) and MT.HojyoKbn2 = 1) '
// <174> Mod
                + ' AND MT.TemplateKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL := strSQL + 'ORDER BY MT.SumKbn,PAYCode,SortPrjGCode,SortPjSubGCode,JoukenNo ';

		SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
// <142> 2007/02/20 H.Kawato Mod
//			if (sSaveCode <> FieldByName('GCode').AsString) then
			if  (sSaveCode <> FieldByName('PayCode').Value) or
                (sSavePrjCd <> FieldByName('PrjGCode').Value) or
                (sSvPjSubCd <> FieldByName('PjSubGCode').Value) then
// <142> 2007/02/20 H.Kawato Mod
			begin
				if int <= 5 then
				begin
					for i:=int to 5 do
					begin
						MemPayRatio.Edit;
						MemPayRatio.FieldByName('Hou'+IntToStr(i)+'Data'        ).AsInteger  := 0;	// 支払方法
						MemPayRatio.FieldByName('Hou'+IntToStr(i)+'StdRitsu'    ).AsCurrency := 0;	// 分解基準値
						MemPayRatio.FieldByName('Hou'+IntToStr(i)+'MinKin'      ).AsCurrency := 0;	// 支払最低額
						MemPayRatio.FieldByName('Hou'+IntToStr(i)+'HasuuKin'    ).AsCurrency := 0;	// 端数処理額
						MemPayRatio.FieldByName('Hou'+IntToStr(i)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
						MemPayRatio.Post;
					end;
				end;
				MemPayRatio.Append;
// <142> 2007/02/20 H.Kawato Mod
//				sSaveCode := FieldByName('GCode').AsString;
				sSaveCode := FieldByName('PayCode').Value;
				Int		  := 1;

// <142> 2007/02/20 H.Kawato Mod
//				strHojCode := FieldByName ('GCode').AsString;
				strHojCode := FieldByName ('PayCode').Value;
				if (m_nCurCodeAttribute <= 1) then
				begin
					case (m_nCurCodeAttribute) of
						0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					end;

   					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;

// <142> 2007/02/20 H.Kawato Mod Start
{
				MemPayRatio.FieldByName('ExNCode'    ).AsFloat  := FieldByName('NCode'      ).AsFloat;	// 補助ｺｰﾄﾞ
				MemPayRatio.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
				MemPayRatio.FieldByName('BaseHojCode').AsString := FieldByName('GCode'      ).AsString;	// 補助ｺｰﾄﾞ
				MemPayRatio.FieldByName('SName'      ).AsString := FieldByName('NMK'        ).AsString;	// 補助名称
				MemPayRatio.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).AsString;	// 連想
}
				MemPayRatio.FieldByName('ExNCode'    ).AsFloat  := FieldByName('PayNCode'   ).Value;	// 補助ｺｰﾄﾞ
				MemPayRatio.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
				MemPayRatio.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;	// 補助ｺｰﾄﾞ
				MemPayRatio.FieldByName('SName'      ).AsString := FieldByName('PayName'    ).Value;	// 補助名称
				MemPayRatio.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;	// 連想

				MemPayRatio.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

				sSavePrjCd := FieldByName('PrjGCode').Value;
				strHojCode := FieldByName ('PrjGCode').Value;
				if (m_iPrjCodeAttr <= 1) then
				begin
					case (m_iPrjCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				MemPayRatio.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
				MemPayRatio.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				MemPayRatio.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
                else
                   	MemPayRatio.FieldByName('PrjName'   ).AsString := 'その他';

				sSvPjSubCd := FieldByName('PjSubGCode').Value;
				strHojCode := FieldByName ('PjSubGCode').Value;
				if (m_iPjSubCodeAttr <= 1) then
				begin
					case (m_iPjSubCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				MemPayRatio.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
				MemPayRatio.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				MemPayRatio.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                else
                    MemPayRatio.FieldByName('PjSubName' ).AsString := 'その他';

//<172> Mod
//              if (FieldByName('PriPayWay'  ).Value <> 0) then     // 手形優先
//    				MemPayRatio.FieldByName('PriPayWayData' ).AsInteger := 1
//              else
//    				MemPayRatio.FieldByName('PriPayWayData' ).AsInteger := 0;
				//優先支払
   				MemPayRatio.FieldByName('PriPayWayData' ).AsInteger := FieldByName('PriPayWay'  ).Value;
//<172> Mod
// <142> 2007/02/20 H.Kawato Mod End
			end
			else
				MemPayRatio.Edit;

			if Int = FieldByName('JoukenNo').AsInteger then
			begin
				MemPayRatio.FieldByName('Hou'+IntToStr(Int)+'Data'        ).AsInteger  := FieldByName('Houhou'  ).AsInteger;	// 支払方法
				MemPayRatio.FieldByName('Hou'+IntToStr(Int)+'StdRitsu'    ).AsCurrency := FieldByName('StdRitu' ).AsCurrency;	// 分解基準値
				MemPayRatio.FieldByName('Hou'+IntToStr(Int)+'MinKin'      ).AsCurrency := FieldByName('MinKin'  ).AsCurrency;	// 支払最低額
				MemPayRatio.FieldByName('Hou'+IntToStr(Int)+'HasuuKin'    ).AsCurrency := FieldByName('HasuuKin').AsCurrency;	// 端数処理額
				MemPayRatio.FieldByName('Hou'+IntToStr(Int)+'HasuuHouData').AsInteger  := FieldByName('HasuuHou').AsInteger;	// 端数処理方法
			end
			else if FieldByName('JoukenNo').AsInteger = 0 then
			begin
				MemPayRatio.FieldByName('Hou1Data'        ).AsInteger  := 0;	// 支払方法
				MemPayRatio.FieldByName('Hou1StdRitsu'    ).AsCurrency := 0;	// 分解基準値
				MemPayRatio.FieldByName('Hou1MinKin'      ).AsCurrency := 0;	// 支払最低額
				MemPayRatio.FieldByName('Hou1HasuuKin'    ).AsCurrency := 0;	// 端数処理額
				MemPayRatio.FieldByName('Hou1HasuuHouData').AsInteger  := 0;	// 端数処理方法
			end;

			Int := Int+1;

			MemPayRatio.Post;
			next;
		end;

		if int <= 5 then
		begin
			for i:=int to 5 do
			begin
				MemPayRatio.Edit;
				MemPayRatio.FieldByName('Hou'+IntToStr(i)+'Data'        ).AsInteger  := 0;	// 支払方法
				MemPayRatio.FieldByName('Hou'+IntToStr(i)+'StdRitsu'    ).AsCurrency := 0;	// 分解基準値
				MemPayRatio.FieldByName('Hou'+IntToStr(i)+'MinKin'      ).AsCurrency := 0;	// 支払最低額
				MemPayRatio.FieldByName('Hou'+IntToStr(i)+'HasuuKin'    ).AsCurrency := 0;	// 端数処理額
				MemPayRatio.FieldByName('Hou'+IntToStr(i)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
				MemPayRatio.Post;
			end;
		end;
	end;
    if MemPayRatio.RecordCount > 0 then					//<172> Add
		MemPayRatio.First;

	DSPayRatio.DataSet := MemPayRatio;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_RATIO,MemPayRatio);
end;

//**********************************************************************
//*		Proccess	:	優先支払詳細(比率)情報取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetPayWayShousaiInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sSaveCode	: String;
	Int,i,iCnt	: Integer;
    strSQL      : String;   
    sSavePrjCd  : String;   
    sSvPjSubCd  : String;
begin
	m_bChange := TRUE;
	sSaveCode := '';
	Int := 16;

	DSShousai.DataSet := nil;

	MemShousai.Close;
	MemShousai.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();

		strSQL := 'SELECT '
                + ' ISNULL(MT.NCode, 0) AS PayNCode '
                + ',ISNULL(MT.GCode, '''') AS PayCode '
                + ',ISNULL(MT.Renso, '''') AS Renso '
                + ',ISNULL(MT.NMK, '''') AS PayName '
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'
                + ',ISNULL(PT.BunkaiKbn, 0) AS BunakiKbn '
                + ',ISNULL(PT.PriPayWay, 0) AS PriPayWay '				//優先支払方法
                + ',ISNULL(PD2.AccNCode, 0) AS AccNCode '				//依頼先口座内部ｺｰﾄﾞ
                + ',ISNULL(PD2.UketoriName, '''') AS UketoriName '		//受取人名
// <172> Add ↓↓↓
                + ',ISNULL(PD2.BkBraNCode, 0) As BkBraNCode '			//支店内部ｺｰﾄﾞ
                + ',ISNULL(PD2.TransKanaName, '''') AS TransKanaName '	//ｶﾅ振込先名
                + ',ISNULL(PD2.Acckbn, 0) AS Acckbn '					//預金種目
                + ',ISNULL(PD2.AccNo, '''') AS AccNo '					//口座番号
                + ',ISNULL(PD2.ChargeFutan, 0) AS ChargeFutan '			//手数料負担
                + ',ISNULL(PD2.ChargeKbn, 0) AS ChargeKbn '				//手数料計算区分
                + ',ISNULL(PD2.TransKbn, 0) AS TransKbn '				//振込方法
                + ',ISNULL(PD2.FBSet, 0) AS FBSet'						//FBセット項目
                + ',ISNULL(PD2.EdiInfo, '''') AS EdiInfo '				//EDI情報
                + ',ISNULL(PD2.AiteNo1, '''') AS AiteNo1 '				//顧客ｺｰﾄﾞ1
                + ',ISNULL(PD2.AiteNo2, '''') AS AiteNo2 '				//顧客ｺｰﾄﾞ2
                + ',ISNULL(PD2.AccAutoKbn, 0) AS AccAutoKbn '			//口座自動引落区分
                + ',ISNULL(PD2.AccAutoData, 0) AS AccAutoData '			//自動引落支払ﾃﾞｰﾀ
// <172> Add ↑↑↑
                + ',ISNULL(PD2.TegYusouKbn, 0) AS TegYusouKbn '
                + ',ISNULL(PD2.TegYusouFutan, 0) AS TegYusouFutan '
                + ',ISNULL(PD2.TegBunkatuMax, 0) AS TegBunkatuMax '
                + ',ISNULL(PD.Edaban, 0) AS Edaban '
                + ',ISNULL(PD.BaseKingaku, 0) AS BaseKingaku '
                + ',ISNULL(PD.BaseHiritu, 0) AS BaseHiritu '
                + ',ISNULL(PD.HasuuKingaku, 0) AS HasuuKingaku '
                + ',ISNULL(PD.HasuuHou, 0) AS HasuuHou '
                + ',ISNULL(PD.Site, 0) AS Site '
                + 'FROM MTOKUI MT '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PriPayWay <> 0 '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayDetailInfo PD '
                + ' ON (PD.RDelKbn = 0 '
                + ' AND PD.Edaban BetWeen 11 AND 15 '
                + ' AND PD.PayPtnNo = PT.PayPtnNo '
                + ' AND PD.PayNCode = MT.NCode '
                + ' AND PD.ShiharaiSyubetu = PT.PriPayWay '		// <172> Add
                + ' AND PD.MasterKbn = PT.MasterKbn) '
                + 'LEFT OUTER JOIN PayDetailInfo PD2 '
                + ' ON (PD2.RDelKbn = 0 '
                + ' AND PD2.Edaban = 1 '
                + ' AND PD2.ShiharaiSyubetu = PD.ShiharaiSyubetu '
                + ' AND PD2.PayPtnNo = PT.PayPtnNo '
                + ' AND PD2.PayNCode = MT.NCode '
                + ' AND PD2.MasterKbn = PT.MasterKbn) '
                + 'LEFT OUTER JOIN MTOKUI_PAY PI '
                + ' ON (MT.NCode = PI.BaseNCode ) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE MT.RDelKbn = 0  AND MT.SumKbn <> 9  '
// <174> Mod
//              + ' AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) '
				+ ' AND ((MT.SumKbn = 0 or MT.SumKbn = 1) and MT.HojyoKbn2 = 1) '
// <174> Mod
                + ' AND MT.TemplateKbn = 0 ';

                if (Tab.Items.Selected = DISPOSE_RATIO) then
                    strSQL  := strSQL + ' AND PT.BunkaiKbn <> 1 '
                else
                    strSQL  := strSQL + ' AND PT.BunkaiKbn = 1 ';

        strSQL := strSQL + 'ORDER BY MT.SumKbn,PAYCode,SortPrjGCode,SortPjSubGCode,Edaban ';

		SQL.Add(strSQL);

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			if  (sSaveCode <> FieldByName('PayCode').Value) or
                (sSavePrjCd <> FieldByName('PrjGCode').Value) or
                (sSvPjSubCd <> FieldByName('PjSubGCode').Value) then
			begin
				if (int >= 11) and (int <= 15) then
				begin
					for i:=int to 15 do
					begin
                        iCnt    := i - 10;
						MemShousai.Edit;
						MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'BaseKingaku'  ).AsCurrency := 0;	// 基準金額
						MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'BaseHiritu'   ).AsCurrency := 0;	// 分解基準値
						MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'HasuuKingaku' ).AsCurrency := 0;	// 端数処理額
						MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'HasuuHouData' ).AsInteger  := 0;	// 端数処理方法
						MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'Site'         ).AsInteger  := 0;	// サイト
						MemShousai.Post;
					end;
				end;
				MemShousai.Append;
				sSaveCode := FieldByName('PayCode').Value;
				Int		  := 11;

				strHojCode := FieldByName ('PayCode').Value;
				if (m_nCurCodeAttribute <= 1) then
				begin
					case (m_nCurCodeAttribute) of
						0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					end;

   					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;

				MemShousai.FieldByName('ExNCode'    ).AsFloat  := FieldByName('PayNCode'   ).Value;	    // 補助ｺｰﾄﾞ
				MemShousai.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
				MemShousai.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;	    // 補助ｺｰﾄﾞ
				MemShousai.FieldByName('SName'      ).AsString := FieldByName('PayName'    ).Value;	    // 補助名称
				MemShousai.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;	    // 連想

				MemShousai.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	    // 条件ﾊﾟﾀｰﾝNo
				MemShousai.FieldByName('PriPayWay'  ).AsInteger:= FieldByName('PriPayWay'  ).Value;	    // 優先支払 // <172> Add

				sSavePrjCd := FieldByName('PrjGCode').Value;
				strHojCode := FieldByName ('PrjGCode').Value;
				if (m_iPrjCodeAttr <= 1) then
				begin
					case (m_iPrjCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				MemShousai.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;     // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
				MemShousai.FieldByName('PrjGCode'  ).AsString := strHojCode;						    // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				MemShousai.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value      // ﾌﾟﾛｼﾞｪｸﾄ名称
                else
                   	MemShousai.FieldByName('PrjName'   ).AsString := 'その他';

				sSvPjSubCd := FieldByName('PjSubGCode').Value;
				strHojCode := FieldByName ('PjSubGCode').Value;
				if (m_iPjSubCodeAttr <= 1) then
				begin
					case (m_iPjSubCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				MemShousai.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode'   ).Value;    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
				MemShousai.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				MemShousai.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName').Value     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                else
                    MemShousai.FieldByName('PjSubName' ).AsString := 'その他';

				MemShousai.FieldByName('AccNCode'       ).AsFloat   := FieldByName('AccNCode'       ).Value;    // 依頼口座内部ｺｰﾄﾞ
				MemShousai.FieldByName('UketoriName'    ).AsString  := FieldByName('UketoriName'    ).Value;    // 受取人名称
// <172> Add ↓↓↓
				MemShousai.FieldByName('BkBraNCode'     ).AsFloat   := FieldByName('BkBraNCode'     ).Value;	// 支店内部ｺｰﾄﾞ
				MemShousai.FieldByName('TransKanaName'  ).AsString  := FieldByName('TransKanaName'  ).Value;	// ｶﾅ振込先名
				MemShousai.FieldByName('Acckbn'         ).AsInteger := FieldByName('Acckbn'         ).Value;	// 預金種目
				MemShousai.FieldByName('AccNo'          ).AsString  := FieldByName('AccNo'          ).Value;	// 口座番号
				MemShousai.FieldByName('ChargeFutan'    ).AsInteger := FieldByName('ChargeFutan'    ).Value;	// 手数料負担
				MemShousai.FieldByName('ChargeKbn'      ).AsInteger := FieldByName('ChargeKbn'      ).Value;	// 手数料計算区分
				MemShousai.FieldByName('TransKbn'       ).AsInteger := FieldByName('TransKbn'       ).Value;	// 振込方法
				MemShousai.FieldByName('FBSet'          ).AsInteger := FieldByName('FBSet'          ).Value;	// FBセット項目
				MemShousai.FieldByName('EdiInfo'        ).AsString  := FieldByName('EdiInfo'        ).Value;	// EDI情報
				MemShousai.FieldByName('AiteNo1'        ).AsString  := FieldByName('AiteNo1'        ).Value;	// 顧客ｺｰﾄﾞ1
				MemShousai.FieldByName('AiteNo2'        ).AsString  := FieldByName('AiteNo2'        ).Value;	// 顧客ｺｰﾄﾞ2
				MemShousai.FieldByName('AccAutoKbn'     ).AsInteger := FieldByName('AccAutoKbn'     ).Value;	// 口座自動引落区分
				MemShousai.FieldByName('AccAutoData'    ).AsInteger := FieldByName('AccAutoData'    ).Value;	// 自動引落支払ﾃﾞｰﾀ
// <172> Add ↑↑↑
				MemShousai.FieldByName('TegYusouKbn'    ).AsInteger := FieldByName('TegYusouKbn'    ).Value;    // 手形郵送区分
				MemShousai.FieldByName('TegYusouFutan'  ).AsInteger := FieldByName('TegYusouFutan'  ).Value;    // 手形郵送料負担区分
				MemShousai.FieldByName('TegBunkatuMax'  ).AsInteger := FieldByName('TegBunkatuMax'  ).Value;    // 手形分割枚数
			end
			else
				MemShousai.Edit;

			if Int = FieldByName('Edaban').AsInteger then
			begin
                iCnt    := Int - 10;
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'BaseKingaku'  ).AsCurrency  := FieldByName('BaseKingaku' ).Value;	// 基準金額
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'BaseHiritu'   ).AsCurrency  := FieldByName('BaseHiritu'  ).Value;	// 分解基準値
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'HasuuKingaku' ).AsCurrency  := FieldByName('HasuuKingaku').Value;	// 端数処理額
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'HasuuHouData' ).AsInteger   := FieldByName('HasuuHou'    ).Value;	// 端数処理方法
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'Site'         ).AsInteger   := FieldByName('Site'        ).Value;	// サイト
			end;

			Int := Int+1;

			MemShousai.Post;
			next;
		end;

		if (int >= 11) and (int <= 15) then
		begin
			for i:=int to 15 do
			begin
                iCnt    := i - 10;
				MemShousai.Edit;
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'BaseKingaku'  ).AsCurrency  := 0;	// 基準金額
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'BaseHiritu'   ).AsCurrency  := 0;	// 分解基準値
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'HasuuKingaku' ).AsCurrency  := 0;	// 端数処理額
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'HasuuHouData' ).AsInteger   := 0;	// 端数処理方法
                MemShousai.FieldByName('Hou'+IntToStr(iCnt)+'Site'         ).AsInteger   := 0;	// サイト
				MemShousai.Post;
			end;
		end;
	end;
    if MemShousai.RecordCount > 0 then					//<172> Add
		MemShousai.First;

	DSShousai.DataSet := MemShousai;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_SHOUSAI,MemShousai);
end;

//**********************************************************************
//*		Proccess	:	支払方法(定額)情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetPayWayFixedInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sSaveCode	: String;
	Int,i		: Integer;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
    sSavePrjCd  : String;   // <142> 2007/02/20 H.Kawato Add
    sSvPjSubCd  : String;   // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;
	sSaveCode := '';
	Int		  := 6;

	DSPayFixed.DataSet := nil;

	MemPayFixed.Close;
	MemPayFixed.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();

// <142> 2007/02/22 H.Kawato Mod Start
{
		SQL.Add('SELECT MT.NCode,MT.GCode,MT.Renso,MT.NMK,PI.BunkaiKbn');
		SQL.Add(',PD.Houhou,PD.StdRitu,PD.MinKin,PD.HasuuKin,PD.HasuuHou,PD.JoukenNo');
		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN PayPtnDtl  PD ON (PD.MasterKbn = :MK AND MT.NCode = PD.PayNCode) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY PI ON (MT.NCode = PI.BaseNCode) ');
		SQL.Add('WHERE MT.RDelKbn = 0 AND MT.SumKbn <> 9 AND PI.BunkaiKbn = 1');
		SQL.Add('AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) ');
        SQL.Add('AND MT.TemplateKbn = 0');                  // <102>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode,PD.JoukenNo ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL := 'SELECT '
                + 'ISNULL(MT.NCode, 0) AS PayNCode '
                + ',ISNULL(MT.GCode, '''') AS PAYCode '
                + ',ISNULL(MT.Renso, '''') AS Renso '
                + ',ISNULL(MT.NMK, '''') AS PayName '
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode'
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'
                + ',ISNULL(PT.BunkaiKbn, 0) AS BunkaiKbn '
                + ',ISNULL(PT.PriPayWay, 0) AS PriPayWay '
                + ',ISNULL(PD.Houhou, 0) AS Houhou '
                + ',ISNULL(PD.StdRitu, 0.00) AS StdRitu '
                + ',ISNULL(PD.MinKin, 0) AS MinKin '
                + ',ISNULL(PD.HasuuKin, 0) AS HasuuKin '
                + ',ISNULL(PD.HasuuHou, 0) AS HasuuHou '
                + ',ISNULL(PD.JoukenNo, 0) AS JoukenNo '
                + 'FROM MTOKUI MT '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.RDelKbn = 0)'
                + 'LEFT OUTER JOIN PayPtnDtl PD '
                + ' ON (PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.NCode = PD.PayNCode '
                + ' AND PD.PayPtnNo = PT.PayPtnNo) '
                + 'LEFT OUTER JOIN MTOKUI_PAY PI '
                + ' ON (MT.NCode = PI.BaseNCode) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE MT.RDelKbn = 0 AND MT.SumKbn <> 9 AND PT.BunkaiKbn = 1 '
// <174> Mod
//              + ' AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) '
				+ ' AND ((MT.SumKbn = 0 or MT.SumKbn = 1) and MT.HojyoKbn2 = 1) '
// <174> Mod
                + ' AND MT.TemplateKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,PAYCode,SortPrjGCode,SortPjSubGCode,JoukenNo ';
                
        SQL.Add(strSQL);
// <142> 2007/02/22 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
// <142> 2007/02/20 H.Kawato Mod
//			if (sSaveCode <> FieldByName('GCode').AsString) then
			if  (sSaveCode <> FieldByName('PayCode').Value) or
                (sSavePrjCd <> FieldByName('PrjGCode').Value) or
                (sSvPjSubCd <> FieldByName('PjSubGCode').Value) then
// <142> 2007/02/20 H.Kawato Mod
			begin
				if int < 5 then
				begin
					for i:=int to 5 do
					begin
						MemPayFixed.Edit;
						MemPayFixed.FieldByName('Hou'+IntToStr(i)+'Data'    ).AsInteger  := 0;	// 支払方法
						MemPayFixed.FieldByName('Hou'+IntToStr(i)+'StdRitsu').AsCurrency := 0;	// 分解基準値
						MemPayFixed.Post;
					end;
				end;
				MemPayFixed.Append;
// <142> 2007/02/20 H.Kawato Mod
//				sSaveCode := FieldByName('GCode').AsString;
				sSaveCode := FieldByName('PayCode').Value;
				Int		  := 1;

// <142> 2007/02/20 H.Kawato Mod
//				strHojCode := FieldByName ('GCode').AsString;
				strHojCode := FieldByName ('PayCode').Value;
				if (m_nCurCodeAttribute <= 1) then
				begin
					case (m_nCurCodeAttribute) of
						0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					end;

					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;

// <142> 2007/02/20 H.Kawato Mod Start
{
				MemPayFixed.FieldByName('ExNCode'    ).AsFloat  := FieldByName('NCode'      ).AsFloat;	// 補助ｺｰﾄﾞ
				MemPayFixed.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
				MemPayFixed.FieldByName('BaseHojCode').AsString := FieldByName('GCode'      ).AsString;	// 補助ｺｰﾄﾞ
				MemPayFixed.FieldByName('SName'      ).AsString := FieldByName('NMK'        ).AsString;	// 補助名称
				MemPayFixed.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).AsString;	// 連想
}
				MemPayFixed.FieldByName('ExNCode'    ).AsFloat  := FieldByName('PAYNCode'   ).Value;    // 補助ｺｰﾄﾞ
				MemPayFixed.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
				MemPayFixed.FieldByName('BaseHojCode').AsString := FieldByName('PAYCode'    ).Value;	// 補助ｺｰﾄﾞ
				MemPayFixed.FieldByName('SName'      ).AsString := FieldByName('PAYName'    ).Value;	// 補助名称
				MemPayFixed.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;	// 連想

				MemPayFixed.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

				sSavePrjCd := FieldByName('PrjGCode').Value;
				strHojCode := FieldByName ('PrjGCode').Value;
				if (m_iPrjCodeAttr <= 1) then
				begin
					case (m_iPrjCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				MemPayFixed.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
				MemPayFixed.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				MemPayFixed.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
                else
                   	MemPayFixed.FieldByName('PrjName'   ).AsString := 'その他';

				sSvPjSubCd := FieldByName('PjSubGCode').Value;
				strHojCode := FieldByName ('PjSubGCode').Value;
				if (m_iPjSubCodeAttr <= 1) then
				begin
					case (m_iPjSubCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				MemPayFixed.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode'  ).Value;	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
				MemPayFixed.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				MemPayFixed.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'   ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                else
                    MemPayFixed.FieldByName('PjSubName' ).AsString := 'その他';

//<172> Mod
//              if (FieldByName('PriPayWay'  ).Value <> 0) then     // 手形優先
//    				MemPayFixed.FieldByName('PriPayWayData' ).AsInteger := 1
//              else
//    				MemPayFixed.FieldByName('PriPayWayData' ).AsInteger := 0;
				//優先支払
   				MemPayFixed.FieldByName('PriPayWayData' ).AsInteger := FieldByName('PriPayWay'  ).Value;
//<172> Mod
// <142> 2007/02/20 H.Kawato Mod End
			end
			else
				MemPayFixed.Edit;

			if Int = FieldByName('JoukenNo').AsInteger then
			begin
				MemPayFixed.FieldByName('Hou'+IntToStr(Int)+'Data'    ).AsInteger  := FieldByName('Houhou'  ).AsInteger;	// 支払方法
				MemPayFixed.FieldByName('Hou'+IntToStr(Int)+'StdRitsu').AsCurrency := FieldByName('StdRitu').AsCurrency;	// 分解基準値
			end
			else if FieldByName('JoukenNo').AsInteger = 0 then
			begin
				MemPayFixed.FieldByName('Hou1Data'    ).AsInteger  := 0;	// 支払方法
				MemPayFixed.FieldByName('Hou1StdRitsu').AsCurrency := 0;	// 分解基準値
			end;

			Int := Int+1;

			MemPayFixed.Post;
			next;
		end;

		if int < 5 then
		begin
			for i:=int to 5 do
			begin
				MemPayFixed.Edit;
				MemPayFixed.FieldByName('Hou'+IntToStr(i)+'Data'    ).AsInteger  := 0;	// 支払方法
				MemPayFixed.FieldByName('Hou'+IntToStr(i)+'StdRitsu').AsCurrency := 0;	// 分解基準値
				MemPayFixed.Post;
			end;
		end;
	end;
    if MemPayFixed.RecordCount > 0 then					//<172> Add
		MemPayFixed.First;

	DSPayFixed.DataSet := MemPayFixed;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_FIXED,MemPayFixed);
end;

//************************************************************************
//*		Component		:	CmnGrid ( TdxDBGrid )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridEnter2(Sender: TObject);
begin
	BDelete.Enabled := False;
	TBTag.Enabled   := False;

	if Tab.Items.Selected = TAB_OFFSET then					// 相殺情報
		BSearch.Enabled := False
	else													// 以外
		BSearch.Enabled := True;

	if (TdxDBGrid(Sender).Name = GridPayRatio.Name) then	// 支払方法(比率)
		TBChgColSize.Enabled := True
	else													// 以外
		TBChgColSize.Enabled := False;

	if (TdxDBGrid(Sender).Name = GridPayRatio.Name) or
	   (TdxDBGrid(Sender).Name = GridPayFixed.Name) then
		fnSetPayLineData(Sender);

// <142> 2007/02/20 H.Kawato Add Start
	if (TdxDBGrid(Sender).Name = GridShousai.Name) then
		fnSetShousaiLineData(Sender);
// <142> 2007/02/20 H.Kawato Add End

    CmnStatusBar.SimpleText	 := '';                         // <196> ADD

// <142> 2007/02/20 H.Kawato Mod Start
//	TdxDBGrid(Sender).FocusedColumn := 3;
    case Tab.Items.Selected of
        TAB_KIHON     : TdxDBGrid(Sender).FocusedField := GridKihon_SateiNo.Field;  // 基本情報
//<GA001>ST
        TAB_KIHON_G   : TdxDBGrid(Sender).FocusedField := GridKihonG_GaiNo.Field; // 外貨基本情報
//<GA001>ED

        TAB_PAYWAY    : TdxDBGrid(Sender).FocusedField := GridPayWay_BunkaiNo.Field;// 支払方法
        TAB_RATIO     :
        begin
            if (TdxDBGrid(Sender).Name = GridPayRatio.Name) then                    // 支払方法(比率)
            begin
// <172> Mod
//              if (m_iProAdoptKbn = 1) then
//                  TdxDBGrid(Sender).FocusedField := Hou_H_PriPayWay.Field         // 優先支払方法
//              else
//                  TdxDBGrid(Sender).FocusedField := Hou_H_Houhou1_No.Field;       // 支払方法１
				TdxDBGrid(Sender).FocusedField := Hou_H_PriPayWay.Field         // 優先支払方法
// <172> Mod
            end
            else
                TdxDBGrid(Sender).FocusedField := Shousai_Hou1_BaseKingaku.Field;   // 基準金額
        end;
        TAB_FIXED     :
        begin
            if (TdxDBGrid(Sender).Name = GridPayFixed.Name) then                    // 支払方法(定額)
            begin
// <172> Mod
//              if (m_iProAdoptKbn = 1) then
//                  TdxDBGrid(Sender).FocusedField := Hou_T_PriPayWay.Field         // 優先支払方法
//              else
//                  TdxDBGrid(Sender).FocusedField := Hou_T_Houhou1_No.Field;       // 支払方法１
				TdxDBGrid(Sender).FocusedField := Hou_T_PriPayWay.Field         // 優先支払方法
// <172> Mod
            end
            else
                TdxDBGrid(Sender).FocusedField := Shousai_Hou1_BaseKingaku.Field;   // 基準金額
        end;
        TAB_TRANSFER  : TdxDBGrid(Sender).FocusedField := Fri_IraiAccCode.Field;    // 振込情報
//<GA001>ST
        TAB_TRANSFER_GD  : TdxDBGrid(Sender).FocusedField := FriGD_IraiAccCode.Field;    // 電信送金
        TAB_TRANSFER_GT  : TdxDBGrid(Sender).FocusedField := FriGT_IraiAccCode.Field;    // 為替手形
        TAB_TRANSFER_GK  : TdxDBGrid(Sender).FocusedField := FriGK_IraiAccCode.Field;    // 送金小切手
//<GA001>ED


        TAB_DATETRAN  : TdxDBGrid(Sender).FocusedField := KFri_IraiAccCode.Field;   // 期日指定振込情報
        TAB_DRAFT     : TdxDBGrid(Sender).FocusedField := Teg_IraiAccCode.Field;    // 手形情報
        TAB_CHECK     : TdxDBGrid(Sender).FocusedField := Kog_IraiAccCode.Field;    // 小切手情報
        TAB_OTHER     : TdxDBGrid(Sender).FocusedField := Hoka_ZipCode1.Field;      // その他情報
    end;
// <142> 2007/02/20 H.Kawato Mod End
end;

//************************************************************************
//*		Component		:	GridPayRatio ( TdxDBGrid )
//*							ｶﾗﾑが移動する前
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridPayBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	aHou		: array[1..5] of Integer;
	aStdRitu	: array[1..5] of Currency;
	aMinKin		: array[1..5] of Currency;
	aHasuKin	: array[1..5] of Currency;
	aHasuHou	: array[1..5] of Integer;
	bFlg		: Boolean;
    iPriPayWay  : Integer;
begin
	bFlg  := True;

    // 優先支払方法
    iPriPayWay  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger; // <142> Add

	// 方法
	aHou[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1No').AsInteger;
	aHou[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2No').AsInteger;
	aHou[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3No').AsInteger;
	aHou[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4No').AsInteger;
	aHou[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5No').AsInteger;

	// 分解基準値
	aStdRitu[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1StdRitsu').AsCurrency;
	aStdRitu[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2StdRitsu').AsCurrency;
	aStdRitu[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3StdRitsu').AsCurrency;
	aStdRitu[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4StdRitsu').AsCurrency;
	aStdRitu[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5StdRitsu').AsCurrency;

	// 支払方法(比率)かつｶﾗﾑが非表示の時、又は支払方法(定額)の時
	if ((TdxDBGrid(Sender).Name = GridPayRatio.Name) and (m_bPayRatioDetail = False)) or
		(TdxDBGrid(Sender).Name = GridPayFixed.Name) then
	begin
// <142> 2007/02/20 H.Kawato Mod Start
{
		if NewColumn in [0,1,2,4,7,10,13,16] then
		begin
        	CanChange :=  False;
			exit;
		end;
}
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
//<172> Mod
//          // 手形優先「1:する」
//          if (iPriPayWay = 1) then
			// 優先支払≠0
			if (iPriPayWay <> 0) then
//<172> Mod
            begin
                if NewColumn in [0,1,2,3,4,5,6,8,9,10,11,13,16,19,22] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end
            else
            begin
                if NewColumn in [0,1,2,3,4,5,6,8,10,13,16,19,22] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
//<172> Mod
//          // 手形優先「1:する」
//          if (iPriPayWay = 1) then
			// 優先支払≠0
			if (iPriPayWay <> 0) then
//<172> Mod
            begin
                if NewColumn in [0,1,2,3,4,6,7,8,9,11,14,17,20] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end
            else
            begin
                if NewColumn in [0,1,2,3,4,6,8,11,14,17,20] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
//<172> Mod
//          if NewColumn in [0,1,2,4,7,10,13,16] then
			if NewColumn in [0,1,2,4,6,9,12,15,18] then
//<172> Mod
   	        begin
       	       	CanChange :=  False;
           		exit;
            end;
        end;
// <142> 2007/02/20 H.Kawato Mod End
// <142> 2007/02/20 H.Kawato Mod Start
{
		case Column of
				// 方法1
			3:  if (aHou[1] <> m_arPayLineInfo[1].iHouHou) then 	 bFlg := fnPayLineChkEdit(Sender,1,aHou[1]);
			5:	// 分解基準値
			begin
				if (aHou[1] = 0) and (aStdRitu[1] <> 0) then
					bFlg := False
				else
				begin
					// 支払方法(比率)の時
					if (100 < aStdRitu[1]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
						bFlg := False;
				end;
			end;
			6:	// 方法2
			begin
				if (aHou[1] = 0) and (aHou[2] <> 0) then			 bFlg := False
				else if (aHou[2] <> m_arPayLineInfo[2].iHouHou) then bFlg := fnPayLineChkEdit(Sender,2,aHou[2]);
			end;
			8:	// 分解基準値
			begin
				if (aHou[2] = 0) and (aStdRitu[2] <> 0) then
					bFlg := False
				else
				begin
					// 支払方法(比率)の時
					if (100 < aStdRitu[2]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
						bFlg := False;
				end;
			end;
			9:	// 方法3
			begin
				if (aHou[2] = 0) and (aHou[3] <> 0) then	 		 bFlg := False
				else if (aHou[3] <> m_arPayLineInfo[3].iHouHou) then bFlg := fnPayLineChkEdit(Sender,3,aHou[3]);
			end;
			11:	// 分解基準値
			begin
				if (aHou[3] = 0) and (aStdRitu[3] <> 0) then
					bFlg := False
				else
				begin
					// 支払方法(比率)の時
					if (100 < aStdRitu[3]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
						bFlg := False;
				end;
			end;
			12:	// 方法4
			begin
				if (aHou[3] = 0) and (aHou[4] <> 0) then 			 bFlg := False
				else if (aHou[4] <> m_arPayLineInfo[4].iHouHou) then bFlg := fnPayLineChkEdit(Sender,4,aHou[4]);
			end;
			14:	// 分解基準値
			begin
				if (aHou[4] = 0) and (aStdRitu[4] <> 0) then
					bFlg := False
				else
				begin
					// 支払方法(比率)の時
					if (100 < aStdRitu[4]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
						bFlg := False;
				end;
			end;
			15:	// 方法5
			begin
				if (aHou[4] = 0) and (aHou[5] <> 0) then 	 		 bFlg := False
				else if (aHou[5] <> m_arPayLineInfo[5].iHouHou) then bFlg := fnPayLineChkEdit(Sender,5,aHou[5]);
			end;
			17:	// 分解基準値
			begin
				// 支払方法(比率)の時
				if (aHou[5] = 0) and (aStdRitu[5] <> 0) then
					bFlg := False
				else
				begin
					if (100 < aStdRitu[5]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
						bFlg := False;
				end;
			end;
		end;
}
        fnSetHouhou1(Sender);
// <142> 2007/02/20 H.Kawato Mod End
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou1_No.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_No.Field) then
        begin
			// 方法1
			if (aHou[1] <> m_arPayLineInfo[1].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,1,aHou[1]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou1_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_StdRitu.Field) then
        begin
			// 分解基準値
            if (aHou[1] = 0) and (aStdRitu[1] <> 0) then
            	bFlg := False
            else
            begin
            	// 支払方法(比率)の時
            	if (100 < aStdRitu[1]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
            		bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou2_No.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_No.Field) then
        begin
			// 方法2
            if (aHou[1] = 0) and (aHou[2] <> 0) then
                bFlg := False
			else if (aHou[2] <> m_arPayLineInfo[2].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,2,aHou[2]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou2_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_StdRitu.Field) then
        begin
			// 分解基準値
            if (aHou[2] = 0) and (aStdRitu[2] <> 0) then
            	bFlg := False
            else
            begin
            	// 支払方法(比率)の時
            	if (100 < aStdRitu[2]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
            		bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou3_No.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_No.Field) then
        begin
			// 方法3
			if (aHou[2] = 0) and (aHou[3] <> 0) then
                bFlg := False
			else if (aHou[3] <> m_arPayLineInfo[3].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,3,aHou[3]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou3_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_StdRitu.Field) then
        begin
			// 分解基準値
            if (aHou[3] = 0) and (aStdRitu[3] <> 0) then
            	bFlg := False
            else
            begin
            	// 支払方法(比率)の時
            	if (100 < aStdRitu[3]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
            		bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou4_No.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_No.Field) then
        begin
			// 方法4
			if (aHou[3] = 0) and (aHou[4] <> 0) then
                bFlg := False
			else if (aHou[4] <> m_arPayLineInfo[4].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,4,aHou[4]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou4_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_StdRitu.Field) then
        begin
			// 分解基準値
            if (aHou[4] = 0) and (aStdRitu[4] <> 0) then
            	bFlg := False
            else
            begin
            	// 支払方法(比率)の時
            	if (100 < aStdRitu[4]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
            		bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou5_No.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_No.Field) then
        begin
			// 方法5
			if (aHou[4] = 0) and (aHou[5] <> 0) then
                bFlg := False
			else if (aHou[5] <> m_arPayLineInfo[5].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,5,aHou[5]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_T_Houhou5_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_StdRitu.Field) then
        begin
			// 分解基準値
            // 支払方法(比率)の時
            if (aHou[5] = 0) and (aStdRitu[5] <> 0) then
            	bFlg := False
            else
            begin
            	if (100 < aStdRitu[5]) and (TdxDBGrid(Sender).Name = GridPayRatio.Name) then
            		bFlg := False;
            end;
		end;
// <142> 2007/02/20 H.Kawato Mod End
	end
	// 支払方法(比率)かつｶﾗﾑが表示の時
	else if (TdxDBGrid(Sender).Name = GridPayRatio.Name) and (m_bPayRatioDetail  = True) then
	begin
// <142> 2007/02/20 H.Kawato Mod Start
{
		if NewColumn in [0,1,2,4,9,11,16,18,23,25,30,32,37] then
		begin
        	CanChange :=  False;
			exit;
		end;
}
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
//<172> Mod
//          // 手形優先「1:する」
//          if (iPriPayWay = 1) then
			// 優先支払≠0
			if (iPriPayWay <> 0) then
//<172> Mod
            begin
                if NewColumn in [0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,17,22,24,29,31,36,38,43] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end
            else
            begin
                if NewColumn in [0,1,2,3,4,5,6,8,10,15,17,22,24,29,31,36,38,43] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
//<172> Mod
//          // 手形優先「1:する」
//          if (iPriPayWay = 1) then
			// 優先支払≠0
			if (iPriPayWay <> 0) then
//<172> Mod
            begin
                if NewColumn in [0,1,2,3,4,6,7,8,9,10,11,12,13,15,20,22,27,29,34,36,41] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end
            else
            begin
                if NewColumn in [0,1,2,3,4,6,8,13,15,20,22,27,29,34,36,41] then
                begin
                   	CanChange :=  False;
                	exit;
                end;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
//<172> Mod
//			if NewColumn in [0,1,2,4,9,11,16,18,23,25,30,32,37] then
			if NewColumn in [0,1,2,4,6,11,13,18,20,25,27,32,34,39] then
//<172> Mod
			begin
				CanChange :=  False;
				exit;
			end;
        end;
// <142> 2007/02/20 H.Kawato Mod End

		// 支払最低額
		aMinKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1MinKin').AsCurrency;
		aMinKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2MinKin').AsCurrency;
		aMinKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3MinKin').AsCurrency;
		aMinKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4MinKin').AsCurrency;
		aMinKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5MinKin').AsCurrency;

		// 端数処理額
		aHasuKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuKin').AsCurrency;
		aHasuKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2HasuuKin').AsCurrency;
		aHasuKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3HasuuKin').AsCurrency;
		aHasuKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4HasuuKin').AsCurrency;
		aHasuKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuKin').AsCurrency;

		// 端数処理方法
		aHasuHou[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuHou').AsInteger;
		aHasuHou[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2HasuuHou').AsInteger;
		aHasuHou[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3HasuuHou').AsInteger;
		aHasuHou[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4HasuuHou').AsInteger;
		aHasuHou[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuHou').AsInteger;

// <142> 2007/02/20 H.Kawato Mod Start
{
		case Column of
				// 方法1
			3:	if (aHou[1] <> m_arPayLineInfo[1].iHouHou) then bFlg := fnPayLineChkEdit(Sender,1,aHou[1]);
			5..8:
			begin
				if (aHou[1] = 0) and
							((aStdRitu[1] <> 0) or (aMinKin[1] <> 0) or (aHasuKin[1] <> 0) or (aHasuHou[1] <> 0)) then
						bFlg := False
				else
				begin
					// 分解基準値が｢100｣を越えている時
					if (100 < aStdRitu[1]) then
						bFlg := False;

					// 端数処理額のチェック
					if (Column = 7) and (aHasuKin[1] <> 0) then
						if fnFractionPriceCheck(aHasuKin[1]) = False then bFlg := False;
				end;
			end;
			10:	// 方法2
			begin
				if (aHou[1] = 0) and (aHou[2] <> 0) then 			 bFlg := False
				else if (aHou[2] <> m_arPayLineInfo[2].iHouHou) then bFlg := fnPayLineChkEdit(Sender,2,aHou[2]);
			end;
			12..15:
            begin
				if (aHou[2] = 0) and
							((aStdRitu[2] <> 0) or (aMinKin[2] <> 0) or (aHasuKin[2] <> 0) or (aHasuHou[2] <> 0)) then
						bFlg := False
				else
				begin
					// 分解基準値が｢100｣を越えている時
					if (100 < aStdRitu[2]) then
						bFlg := False;

					// 端数処理額のチェック
					if (Column = 14) and (aHasuKin[2] <> 0) then
						if fnFractionPriceCheck(aHasuKin[2]) = False then bFlg := False;
				end;
			end;
			17:	// 方法3
			begin
				if (aHou[2] = 0) and (aHou[3] <> 0) then 			 bFlg := False
				else if (aHou[3] <> m_arPayLineInfo[3].iHouHou) then bFlg := fnPayLineChkEdit(Sender,3,aHou[3]);
			end;
			19..22:
			begin
				if (aHou[3] = 0) and
							((aStdRitu[3] <> 0) or (aMinKin[3] <> 0) or (aHasuKin[3] <> 0) or (aHasuHou[3] <> 0)) then
						bFlg := False
				else
				begin
					// 分解基準値が｢100｣を越えている時
					if (100 < aStdRitu[3]) then
						bFlg := False;

					// 端数処理額のチェック
					if (Column = 21) and (aHasuKin[3] <> 0) then
						if fnFractionPriceCheck(aHasuKin[3]) = False then bFlg := False;
				end;
			end;
			24:	// 方法4
			begin
				if (aHou[3] = 0) and (aHou[4] <> 0) then 			 bFlg := False
				else if (aHou[4] <> m_arPayLineInfo[4].iHouHou) then bFlg := fnPayLineChkEdit(Sender,4,aHou[4]);
			end;
			26..29:
			begin
				if (aHou[4] = 0) and
							((aStdRitu[4] <> 0) or (aMinKin[4] <> 0) or (aHasuKin[4] <> 0) or (aHasuHou[4] <> 0)) then
						bFlg := False
				else
				begin
					// 分解基準値が｢100｣を越えている時
					if (100 < aStdRitu[4]) then
						bFlg := False;

					// 端数処理額のチェック
					if (Column = 28) and (aHasuKin[4] <> 0) then
						if fnFractionPriceCheck(aHasuKin[4]) = False then bFlg := False;
				end;
			end;
			31:	// 方法5
			begin
				if (aHou[4] = 0) and (aHou[5] <> 0) then 			 bFlg := False
				else if (aHou[5] <> m_arPayLineInfo[5].iHouHou) then bFlg := fnPayLineChkEdit(Sender,5,aHou[5]);
			end;
			33..36:
			begin
				if (aHou[5] = 0) and
							((aStdRitu[5] <> 0) or (aMinKin[5] <> 0) or (aHasuKin[5] <> 0) or (aHasuHou[5] <> 0)) then
						bFlg := False
				else
				begin
					// 分解基準値が｢100｣を越えている時
					if (100 < aStdRitu[5]) then
						bFlg := False;

					// 端数処理額のチェック
					if (Column = 35) and (aHasuKin[5] <> 0) then
						if fnFractionPriceCheck(aHasuKin[5]) = False then bFlg := False;
				end;
			end;
		end;
}
        fnSetHouhou1(Sender);
// <142> 2007/02/20 H.Kawato Mod End
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_No.Field) then
        begin
			// 方法1
			if (aHou[1] <> m_arPayLineInfo[1].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,1,aHou[1]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_Minkin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_HasuuKin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_HasuuHou.Field) then
        begin
            if	(aHou[1] = 0) and
				((aStdRitu[1] <> 0) or (aMinKin[1] <> 0) or (aHasuKin[1] <> 0) or (aHasuHou[1] <> 0)) then
				bFlg := False
            else
            begin
            	// 分解基準値が｢100｣を越えている時
            	if (100 < aStdRitu[1]) then
            		bFlg := False;

            	// 端数処理額のチェック
            	if (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou1_HasuuKin.Field) and (aHasuKin[1] <> 0) then
            		if fnFractionPriceCheck(aHasuKin[1]) = False then bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_No.Field) then
        begin
			// 方法2
			if (aHou[1] = 0) and (aHou[2] <> 0) then
                bFlg := False
			else if (aHou[2] <> m_arPayLineInfo[2].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,2,aHou[2]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_Minkin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_HasuuKin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_HasuuHou.Field) then
        begin
            if	(aHou[2] = 0) and
				((aStdRitu[2] <> 0) or (aMinKin[2] <> 0) or (aHasuKin[2] <> 0) or (aHasuHou[2] <> 0)) then
				bFlg := False
            else
            begin
            	// 分解基準値が｢100｣を越えている時
            	if (100 < aStdRitu[2]) then
            		bFlg := False;

            	// 端数処理額のチェック
            	if (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou2_HasuuKin.Field) and (aHasuKin[2] <> 0) then
            		if fnFractionPriceCheck(aHasuKin[2]) = False then bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_No.Field) then
        begin
			// 方法3
            if (aHou[2] = 0) and (aHou[3] <> 0) then
                bFlg := False
			else if (aHou[3] <> m_arPayLineInfo[3].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,3,aHou[3]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_Minkin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_HasuuKin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_HasuuHou.Field) then
        begin
            if	(aHou[3] = 0) and
				((aStdRitu[3] <> 0) or (aMinKin[3] <> 0) or (aHasuKin[3] <> 0) or (aHasuHou[3] <> 0)) then
				bFlg := False
            else
            begin
            	// 分解基準値が｢100｣を越えている時
            	if (100 < aStdRitu[3]) then
            		bFlg := False;

            	// 端数処理額のチェック
            	if (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou3_HasuuKin.Field) and (aHasuKin[3] <> 0) then
            		if fnFractionPriceCheck(aHasuKin[3]) = False then bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_No.Field) then
        begin
			// 方法4
			if (aHou[3] = 0) and (aHou[4] <> 0) then
                bFlg := False
			else if (aHou[4] <> m_arPayLineInfo[4].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,4,aHou[4]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_Minkin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_HasuuKin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_HasuuHou.Field) then
        begin
            if	(aHou[4] = 0) and
				((aStdRitu[4] <> 0) or (aMinKin[4] <> 0) or (aHasuKin[4] <> 0) or (aHasuHou[4] <> 0)) then
				bFlg := False
            else
            begin
            	// 分解基準値が｢100｣を越えている時
            	if (100 < aStdRitu[4]) then
            		bFlg := False;

            	// 端数処理額のチェック
            	if (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou4_HasuuKin.Field) and (aHasuKin[4] <> 0) then
            		if fnFractionPriceCheck(aHasuKin[4]) = False then bFlg := False;
            end;
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_No.Field) then
        begin
			// 方法5
			if (aHou[4] = 0) and (aHou[5] <> 0) then
                bFlg := False
			else if (aHou[5] <> m_arPayLineInfo[5].iHouHou) then
                bFlg := fnPayLineChkEdit(Sender,5,aHou[5]);
        end
        else
        if  (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_StdRitu.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_Minkin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_HasuuKin.Field) or
            (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_HasuuHou.Field) then
        begin
            if	(aHou[5] = 0) and
				((aStdRitu[5] <> 0) or (aMinKin[5] <> 0) or (aHasuKin[5] <> 0) or (aHasuHou[5] <> 0)) then
				bFlg := False
            else
            begin
            	// 分解基準値が｢100｣を越えている時
            	if (100 < aStdRitu[5]) then
            		bFlg := False;

            	// 端数処理額のチェック
            	if (TdxDBGrid(Sender).FocusedField = Hou_H_Houhou5_HasuuKin.Field) and (aHasuKin[5] <> 0) then
            		if fnFractionPriceCheck(aHasuKin[5]) = False then bFlg := False;
            end;
        end;
// <142> 2007/02/20 H.Kawato Mod End
	end;

	if bFlg = False then
	begin
		CanChange := False;
		abort;
	end;
end;

//**********************************************************************
//*		Proccess	:	支払条件ﾊﾟﾀｰﾝが存在するかCheck
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/23
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChkPayPtnInfo();
var
	QeMA	: TMQuery;
	QePAY	: TMQuery;
	sHojCode: String;
    eHojCode: Extended;
    strSQL  : String;   // <142> Add

begin
	QeMA  := TMQuery.Create (Self);												// MQueryの構築
	QePAY := TMQuery.Create (Self);												// MQueryの構築

	SessionPractice(C_ST_PROCESS);				// <159>

	try
// <Rel>		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, QeMA);						// DBとMQueryの接続
// <Rel>		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, QePAY);						// DBとMQueryの接続

// ↓ <Rel>
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, QeMA);    // 全社DBとMQueryの接続
            m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, QePAY);   // 全社DBとMQueryの接続
        end
        else
        begin
    		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, QeMA);				   	// 子社DBとMQueryの接続
    		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, QePAY);					// 子社DBとMQueryの接続
        end;
// ↑ <Rel>

		with (QeMA) do
		begin
			Close ();
			SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
			SQL.Add('SELECT DISTINCT MT.GCode ,MT.NCode FROM MTOKUI MT ');
			SQL.ADD('INNER JOIN MTOKUI_PAY PI ON ');
			SQL.ADD('( NOT EXISTS ( SELECT * FROM MTOKUI_PAY PI WHERE ');
			SQL.ADD('( PI.BaseNCode = MT.NCode )) ) ');
			SQL.Add('WHERE MT.RDelKbn = 0 ');
			SQL.Add('AND ((MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) or MT.SumKbn = 1) ');
            SQL.Add('AND MT.TemplateKbn = 0');              // <102>
			SQL.Add('ORDER BY MT.GCode ');
}
            // MTOKUIに存在、MTOKUI_PAYに存在しない仕入ﾚｺｰﾄﾞを取得
            strSQL := 'SELECT DISTINCT MT.GCode ,MT.NCode FROM MTOKUI MT '
                    + 'INNER JOIN MTOKUI_PAY PI ON '
                    + '( NOT EXISTS ( SELECT * FROM MTOKUI_PAY PI WHERE '
                    + '( PI.BaseNCode = MT.NCode )) ) '
                    + 'WHERE MT.RDelKbn = 0 '
// <174> Mod
//                  + 'AND ((MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) or MT.SumKbn = 1) '
//					+ 'AND ((MT.HojyoKbn2 = 1 or MT.SumKbn = 1) AND MT.SumKbn = 0) '	// <184> Del 
// <174> Mod
                    + 'AND ((MT.SumKbn = 0 or MT.SumKbn = 1) AND MT.HojyoKbn2 = 1) '    // <184> Add

                    + 'AND MT.TemplateKbn = 0'              // <102>
                    + 'ORDER BY MT.GCode ';

			SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(QeMA);
            	Exit;
			end;

            // MTOKUI_PAYに存在しなかったﾚｺｰﾄﾞを追加
			while (not EOF) do
			begin
				sHojCode := FieldByName('GCode').AsString;
                eHojCode := FieldByName('NCode').AsFloat;
				with (QePAY) do
				begin
					Close();
					SQL.Clear();
// <142-2> 2007/08/23 H.Kawato Mod Start
{
// <142> 2007/02/20 H.Kawato Mod Start
//					SQL.Add('INSERT INTO MTOKUI_PAY(BaseNCode,BunkaiKbn)');
//					SQL.Add('VALUES(:PN,0)');
					SQL.Add('INSERT INTO MTOKUI_PAY(BaseNCode)');
					SQL.Add('VALUES(:PN)');
// <142> 2007/02/20 H.Kawato Mod End
					ParamByName('PN').AsFloat   := eHojCode;					// 取引先ｺｰﾄﾞ
}
        			strSQL := 'INSERT INTO MTOKUI_PAY('
                            + ' BaseNCode'      // 内部ｺｰﾄﾞ
                            + ',PostNo1'        // 郵便番号１
                            + ',PostNo2'        // 郵便番号２
                            + ',Ads1'           // 住所上段
                            + ',Ads2'           // 住所下段
                            + ',Tel1'           // 電話番号(1)
                            + ',Tel2'           // 電話番号(2)
                            + ',Fax1'           // FAX番号
                            + ',SectionName'    // 送付先部署
                            + ',TanNm'          // 担当者名
                            + ',KeisyoKbn'      // 担当者敬称
                            + ',MailAddress'    // 担当者ﾒｰﾙｱﾄﾞﾚｽ
                            + ',BunkaiKbn'      // 分解方法(※未使用)
                            + ',LetterKbn'      // 支払通知書区分
                            + ',CngNCode'       // 名寄せ親代替取引先内部ｺｰﾄﾞ
                            + ',UpdDateTM'      // 修正日付
                            + ',InsDateTM'      // 登録日付
                            + ',UpdTantoNCode'  // 処理者
                            + ',SateiKbn'       // 査定方法
                            + ',RendoNCode'     // 連動取引先内部ｺｰﾄﾞ
                            + ',BunkaiPtn'      // 分解ﾊﾟﾀｰﾝ
                            + ',UketoriName'    // 受取人名称
                            + ',SateiCalcKbn'   // 査定金額計算区分 // <155> 2007/12/25 H.Kawato Add
                            + ',SateiCalc'      // 査定金額計算値   // <155> 2007/12/25 H.Kawato Add
                            + ')VALUES('
                            + FloatToStr(eHojCode)
                            + ',0,0'
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',' + AnsiQuotedStr('', '''')
                            + ',0,0,0'
                            + ',Now(),Now()'
                            + ',' + FloatToStr(m_nTantoCd)
                            + ',0,0,0'
                            + ',' + AnsiQuotedStr('', '''')
                            + ',0,0'            // <155> 2007/12/25 H.Kawato Add
                            + ')';
					SQL.Add(strSQL);
// <142-2> 2007/08/23 H.Kawato Mod End

					if (not ExecSQL()) then
					begin
						fnErrorMessageDsp(QePAY);
						Exit;
					end;
				end;

                //↓<Rel>
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_PAY) = False ) then
                        Exit;

                    // 更新されたときはSecHojyoDispInfoのﾒﾝﾃを行う。
                    if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,eHojCode,QePAY) then
                        Exit;
                end;
                //↑<Rel>

				next;
			end;

// <142> 2007/02/20 H.Kawato Add Start
			Close ();
			SQL.Clear();
// <142-2> 2007/08/23 H.Kawato Mod Start
{
			strSQL := 'SELECT DISTINCT '
                    + 'MT.GCode ,MT.NCode '
                    + 'FROM MTOKUI MT '
                    + 'INNER JOIN PayPtnInfo PT '
                    + ' ON ( NOT EXISTS ( '
                    + ' SELECT * FROM PayPtnInfo PT '
                    + ' WHERE PT.PayPtnNo = 1 '
                    + ' AND PT.PayNCode = MT.NCode '
                    + ' AND PT.MasterKbn = 22))'
                    + 'WHERE MT.RDelKbn = 0 '
                    + ' AND MT.TemplateKbn = 0'
                    + ' AND ((MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) or MT.SumKbn = 1) '
                    + 'ORDER BY MT.GCode ';
}
			strSQL := 'SELECT DISTINCT '
                    + 'GCode ,NCode '
                    + 'FROM MTOKUI '
                    + 'WHERE RDelKbn = 0 '
                    + 'AND TemplateKbn = 0 '
// <174> Mod
//                  + 'AND ((HojyoKbn2 = 1 AND SumKbn = 0) or SumKbn = 1) '
//					+ 'AND ((HojyoKbn2 = 1 or SumKbn = 1) AND SumKbn = 0) '		// <184> Del
// <174> Mod
                    + 'AND ((SumKbn = 0 or SumKbn = 1) AND HojyoKbn2 = 1) '     // <184> Add

                    + 'AND NCode NOT IN ( '
                    + 'SELECT PayNCode FROM PayPtnInfo '
                    + 'WHERE PayPtnNo = 1 AND MasterKbn = 22 ) '
                    + 'ORDER BY GCode ';
// <142-2> 2007/08/23 H.Kawato Mod End

            SQL.Add(strSQL);

			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(QeMA);
            	Exit;
			end;

			while (not EOF) do
			begin
                eHojCode := FieldByName('NCode').AsFloat;
				with (QePAY) do
				begin
					Close();
					SQL.Clear();
        			strSQL := 'INSERT INTO PayPtnInfo('
                            + ' MasterKbn'      // マスタ区分
                            + ',PayNCode'       // 支払先内部ｺｰﾄﾞ
                            + ',PayPtnNo'       // 条件ﾊﾟﾀｰﾝNo
                            + ',BmnNCode'       // 部門内部ｺｰﾄﾞ
                            + ',PrjNCode'       // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                            + ',PjSubNCode'     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                            + ',BunkaiKbn'      // 分解区分
                            + ',PriPayWay'      // 優先支払方法
                            + ',RDelKbn'        // 削除区分
                            + ',UpdDateTM'      // 修正日付
                            + ',InsDateTM'      // 登録日付
                            + ',UpdTantoNCode'  // 処理者
                            + ')VALUES('
                            + IntToStr(MASTER_CUSTOMER)
                            + ',' + FloatToStr(eHojCode)
                            + ',1,0,0,0,0,0,0'
                            + ',Now(),Now()'
                            + ',' + FloatToStr(m_nTantoCd)
                            + ')';

					SQL.Add(strSQL);

					if (not ExecSQL()) then
					begin
						fnErrorMessageDsp(QePAY);
						Exit;
					end;
				end;
				next;
			end;
// <142> 2007/02/20 H.Kawato Add End
		end;

	finally
		SessionPractice(C_ED_PROCESS);			// <159>
		QeMA.Close;
		QeMA.Free;
		QePAY.Close;
		QePAY.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	分解方法を取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*		Return		:	分解方法
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPayPtnInfoBunkai(sHojCode: String): Integer;
var
	Qe	    : TMQuery;
begin
	Result := 0;
	Qe := TMQuery.Create (Self);												// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);						// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT PI.BunkaiKbn FROM MTOKUI_PAY PI   ');
			SQL.Add('INNER JOIN MTOKUI MT ON                  ');
			SQL.Add('PI.BaseNCode = MT.NCode                  ');
			SQL.Add('AND MT.RDelKbn =0                        ');
			SQL.Add('WHERE MT.GCode = :HC');
			ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
			ParamByName ('HC').AsString	 := sHojCode;

			if (not Open ()) then
			begin
				fnErrorMessageDsp(Qe);
				Exit;
			end;

			if EOF <> True then
			begin
				Result := FieldByName('BunkaiKbn').AsInteger;
			end;
		end;
	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	入力された内容チェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/21
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnCmnGridCheckPay();
var
	cGrid		: TdxDBGrid;
	aHou		: array[1..5] of Integer;
	aStdRitu	: array[1..5] of Currency;
	aMinKin		: array[1..5] of Currency;
	aHasuKin	: array[1..5] of Currency;
	aHasuHou	: array[1..5] of Integer;
	bFlg		: Boolean;
begin
	bFlg    :=  True;
    cGrid   :=  nil;

	case Tab.Items.Selected of
		TAB_RATIO: cGrid := GridPayRatio;
		TAB_FIXED: cGrid := GridPayFixed;
    end;

	try
		// 方法
		aHou[1] := cGrid.DataSource.DataSet.FieldByName('Hou1No').AsInteger;
		// 方法1入力ﾁｪｯｸ
		if (aHou[1] <> m_arPayLineInfo[1].iHouHou) then
		begin
			bFlg := fnPayLineChkEdit(cGrid,1,aHou[1]);
			if bFlg = False then exit;
		end;
		aHou[2] := cGrid.DataSource.DataSet.FieldByName('Hou2No').AsInteger;
		// 方法2入力ﾁｪｯｸ
		if (aHou[2] <> m_arPayLineInfo[2].iHouHou) then
		begin
			bFlg := fnPayLineChkEdit(cGrid,2,aHou[2]);
			if bFlg = False then exit;
		end;
		aHou[3] := cGrid.DataSource.DataSet.FieldByName('Hou3No').AsInteger;
		// 方法3入力ﾁｪｯｸ
		if (aHou[3] <> m_arPayLineInfo[3].iHouHou) then
		begin
			bFlg := fnPayLineChkEdit(cGrid,3,aHou[3]);
			if bFlg = False then exit;
		end;
		aHou[4] := cGrid.DataSource.DataSet.FieldByName('Hou4No').AsInteger;
		// 方法4入力ﾁｪｯｸ
		if (aHou[4] <> m_arPayLineInfo[4].iHouHou) then
		begin
			bFlg := fnPayLineChkEdit(cGrid,4,aHou[4]);
			if bFlg = False then exit;
		end;
		aHou[5] := cGrid.DataSource.DataSet.FieldByName('Hou5No').AsInteger;
		// 方法4入力ﾁｪｯｸ
		if (aHou[5] <> m_arPayLineInfo[5].iHouHou) then
		begin
			bFlg := fnPayLineChkEdit(cGrid,5,aHou[5]);
			if bFlg = False then exit;
		end;

		if (aHou[1] = 0) and ((aHou[2] <> 0) or (aHou[3] <> 0) or (aHou[4] <> 0) or (aHou[5] <> 0)) then
			bFlg := False;

		if (aHou[2] = 0) and ((aHou[3] <> 0) or (aHou[4] <> 0) or (aHou[5] <> 0)) then
			bFlg := False;

		if (aHou[3] = 0) and ((aHou[4] <> 0) or (aHou[5] <> 0)) then
			bFlg := False;

		if (aHou[4] = 0) and (aHou[5] <> 0) then
			bFlg := False;

		if bFlg = False then exit;

		// 分解基準値
		aStdRitu[1] := cGrid.DataSource.DataSet.FieldByName('Hou1StdRitsu').AsCurrency;
		aStdRitu[2] := cGrid.DataSource.DataSet.FieldByName('Hou2StdRitsu').AsCurrency;
		aStdRitu[3] := cGrid.DataSource.DataSet.FieldByName('Hou3StdRitsu').AsCurrency;
		aStdRitu[4] := cGrid.DataSource.DataSet.FieldByName('Hou4StdRitsu').AsCurrency;
		aStdRitu[5] := cGrid.DataSource.DataSet.FieldByName('Hou5StdRitsu').AsCurrency;

		if (aHou[1] = 0) and (aStdRitu[1] <> 0) then bFlg := False;
		if (aHou[2] = 0) and (aStdRitu[2] <> 0) then bFlg := False;
		if (aHou[3] = 0) and (aStdRitu[3] <> 0) then bFlg := False;
		if (aHou[4] = 0) and (aStdRitu[4] <> 0) then bFlg := False;
		if (aHou[5] = 0) and (aStdRitu[5] <> 0) then bFlg := False;
		if bFlg = False then exit;

		// 支払方法(定額)は以下の処理を行わない
		if (cGrid.Name = GridPayFixed.Name) then exit;

		// 支払最低額
		aMinKin[1] := cGrid.DataSource.DataSet.FieldByName('Hou1MinKin').AsCurrency;
		aMinKin[2] := cGrid.DataSource.DataSet.FieldByName('Hou2MinKin').AsCurrency;
		aMinKin[3] := cGrid.DataSource.DataSet.FieldByName('Hou3MinKin').AsCurrency;
		aMinKin[4] := cGrid.DataSource.DataSet.FieldByName('Hou4MinKin').AsCurrency;
		aMinKin[5] := cGrid.DataSource.DataSet.FieldByName('Hou5MinKin').AsCurrency;

		if (aHou[1] = 0) and (aMinKin[1] <> 0) then bFlg := False;
		if (aHou[2] = 0) and (aMinKin[2] <> 0) then bFlg := False;
		if (aHou[3] = 0) and (aMinKin[3] <> 0) then bFlg := False;
		if (aHou[4] = 0) and (aMinKin[4] <> 0) then bFlg := False;
		if (aHou[5] = 0) and (aMinKin[5] <> 0) then bFlg := False;
		if bFlg = False then exit;

		// 端数処理額
		aHasuKin[1] := cGrid.DataSource.DataSet.FieldByName('Hou1HasuuKin').AsCurrency;
		aHasuKin[2] := cGrid.DataSource.DataSet.FieldByName('Hou2HasuuKin').AsCurrency;
		aHasuKin[3] := cGrid.DataSource.DataSet.FieldByName('Hou3HasuuKin').AsCurrency;
		aHasuKin[4] := cGrid.DataSource.DataSet.FieldByName('Hou4HasuuKin').AsCurrency;
		aHasuKin[5] := cGrid.DataSource.DataSet.FieldByName('Hou5HasuuKin').AsCurrency;

		if (aHou[1] = 0) and (aHasuKin[1] <> 0) then bFlg := False;
		if (aHou[2] = 0) and (aHasuKin[2] <> 0) then bFlg := False;
		if (aHou[3] = 0) and (aHasuKin[3] <> 0) then bFlg := False;
		if (aHou[4] = 0) and (aHasuKin[4] <> 0) then bFlg := False;
		if (aHou[5] = 0) and (aHasuKin[5] <> 0) then bFlg := False;

		if (aHasuKin[1] <> 0) then	// 端数処理額のチェック
			if fnFractionPriceCheck(aHasuKin[1]) = False then bFlg := False;
		if (aHasuKin[2] <> 0) then	// 端数処理額のチェック
			if fnFractionPriceCheck(aHasuKin[2]) = False then bFlg := False;
		if (aHasuKin[3] <> 0) then	// 端数処理額のチェック
			if fnFractionPriceCheck(aHasuKin[3]) = False then bFlg := False;
		if (aHasuKin[4] <> 0) then	// 端数処理額のチェック
			if fnFractionPriceCheck(aHasuKin[4]) = False then bFlg := False;
		if (aHasuKin[5] <> 0) then	// 端数処理額のチェック
			if fnFractionPriceCheck(aHasuKin[5]) = False then bFlg := False;

		if bFlg = False then exit;


		// 端数処理方法
		aHasuHou[1] := cGrid.DataSource.DataSet.FieldByName('Hou1HasuuHou').AsInteger;
		aHasuHou[2] := cGrid.DataSource.DataSet.FieldByName('Hou2HasuuHou').AsInteger;
		aHasuHou[3] := cGrid.DataSource.DataSet.FieldByName('Hou3HasuuHou').AsInteger;
		aHasuHou[4] := cGrid.DataSource.DataSet.FieldByName('Hou4HasuuHou').AsInteger;
		aHasuHou[5] := cGrid.DataSource.DataSet.FieldByName('Hou5HasuuHou').AsInteger;

		if (aHou[1] = 0) and (aHasuHou[1] <> 0) then bFlg := False;
		if (aHou[2] = 0) and (aHasuHou[2] <> 0) then bFlg := False;
		if (aHou[3] = 0) and (aHasuHou[3] <> 0) then bFlg := False;
		if (aHou[4] = 0) and (aHasuHou[4] <> 0) then bFlg := False;
		if (aHou[5] = 0) and (aHasuHou[5] <> 0) then bFlg := False;
		if bFlg = False then exit;

	finally
		if bFlg = False then
			abort;
	end;
end;

//************************************************************************
//*		Component		:	MemPayXxx ( TdxMemData )
//*
//*		Event			:	OnBeforePost
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.MemPayBeforePost(DataSet: TDataSet);
var
	cRitu		: Currency;
	i,iNo		: Integer;
	iColumnNo	: Integer;
	iDetail		: Integer;
	cMem		: TdxMemData;
	iSel		: Integer;
	Flg			: FlgInfoRec;
	RecInfo		: RecInfoRec;
// <122> 2006/04/25 H.Kawato Add St
    iRenInitRet : Integer;
    ExNCode     : Extended;
//    Str	        : String;       // <139> Del
// <122> 2006/04/25 H.Kawato Add Ed

    iPriPayWay  : Integer;      // <142> Add
    cObject     : TObject;      // <142> Add
begin
	if (m_bChange) then
		Exit;

    cMem        :=  nil;
    iSel        :=  0;
    iColumnNo   :=  0;

    ExNCode     :=  0;          // <122> 2006/04/25 H.Kawato Add
    cObject     :=  nil;        // <142> Add
	m_bPriPayWayChgFlg	:= False;	// <172> Add

	// -----<159> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<159> Add-Ed-----

	with (DataSet) do
	begin
		if (State in [dsEdit]) then
		begin
// <142> 2007/02/20 H.Kawato Add Start
            // 支払方法(比率)
            if Tab.Items.Selected = TAB_RATIO then
                cObject := GridPayRatio
            else
            // 支払方法(定額)
            if Tab.Items.Selected = TAB_FIXED then
                cObject := GridPayFixed;

            // 優先支払方法
            iPriPayWay  := FieldByName('PriPayWay').AsInteger;

            fnSetHouhou1(cObject);
// <142> 2007/02/20 H.Kawato Add End

			fnCmnGridCheckPay();

			// 支払方法(比率)の時
			if Tab.Items.Selected = TAB_RATIO then
			begin
				iNo	  := 0;
				cRitu := 0;

// <122> 2006/04/28 H.Kawato Add St
                //Edit用内部ｺｰﾄﾞ作成
                cMem    := MemPayRatio;
                ExNCode := cMem.FieldByName('ExNCode').AsFloat;
// <122> 2006/04/28 H.Kawato Add Ed

                for i:=1 to 5 do
                begin
                	if FieldByName('Hou'+IntToStr(i)+'No').AsInteger <> 0 then
                		iNo := i;
                	cRitu := cRitu+FieldByName('Hou'+IntToStr(i)+'StdRitsu').AsCurrency;	// 比率の合計
                end;

						// 詳細非表示時
				if (m_bPayRatioDetail = False) then
					iDetail := 0
				else	// 詳細表示時
					iDetail := 4;

// <142> 2007/02/20 H.Kawato Mod Start
{
				// 分解基準値のｶﾗﾑ位置を取得
				case iNo of
					1: iColumnNo := 5;
					2: iColumnNo := 8 +(iDetail*1);
					3: iColumnNo := 11+(iDetail*2);
					4: iColumnNo := 14+(iDetail*3);
					5: iColumnNo := 17+(iDetail*4);
				end;
}
                if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
                begin
				    // 分解基準値のｶﾗﾑ位置を取得
                    case iNo of
                    	1: iColumnNo := 11;
                    	2: iColumnNo := 14+(iDetail*1);
                    	3: iColumnNo := 17+(iDetail*2);
                    	4: iColumnNo := 21+(iDetail*3);
                    	5: iColumnNo := 23+(iDetail*4);
                    end;
                end
                else if (m_iProAdoptKbn = 1) then
                begin
				    // 分解基準値のｶﾗﾑ位置を取得
                    case iNo of
                    	1: iColumnNo := 9;
                    	2: iColumnNo := 12+(iDetail*1);
                    	3: iColumnNo := 15+(iDetail*2);
                    	4: iColumnNo := 19+(iDetail*3);
                    	5: iColumnNo := 21+(iDetail*4);
                    end;
                end
                else
                begin
				    // 分解基準値のｶﾗﾑ位置を取得
                    case iNo of
//<172> Mod ↓↓↓
{                   case iNo of
                    	1: iColumnNo := 5;
                    	2: iColumnNo := 8 +(iDetail*1);
                    	3: iColumnNo := 11+(iDetail*2);
                    	4: iColumnNo := 14+(iDetail*3);
                    	5: iColumnNo := 17+(iDetail*4);
}
                    	1: iColumnNo := 7;
                    	2: iColumnNo := 10+(iDetail*1);
                    	3: iColumnNo := 13+(iDetail*2);
                    	4: iColumnNo := 16+(iDetail*3);
                    	5: iColumnNo := 19+(iDetail*4);
//<172> Mod ↑↑↑
                    end;
                end;
// <142> 2007/02/20 H.Kawato Mod End

				// 100%を越えている場合
				if (iNo <> 0) and (cRitu > 100.00) then
				begin
					MJSMessageBoxEx (Self,_MessageDec01, 'エラー', mjError, mjOK, mjDefOK);
					GridPayRatio.FocusedColumn := iColumnNo;
					abort;
				end;

				// 100%未満の場合
				if (iNo <> 0) and (cRitu < 100.00) then
				begin
// <142> 2007/02/20 H.Kawato Add Start
//<172> Mod ↓↓↓
//                  // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり, 手形優先「1:する」, No1
//                  if  (m_iProAdoptKbn = 1) and (iPriPayWay = 1) and (iNo = 1) then
					// ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり, 優先支払「0≠採用」, No1
					if  (m_iProAdoptKbn = 1) and (iPriPayWay <> 0) and (iNo = 1) then
//<172> Mod ↑↑↑
                    begin
    					MJSMessageBoxEx (Self,_MessageDec03, 'エラー', mjError, mjOK, mjDefOK); // <179> ADD

                        if (m_iSubAdoptKbn = 1) then
                            iColumnNo := 12+(iDetail*1)
                        else
                            iColumnNo := 10+(iDetail*1);

                        GridPayRatio.FocusedColumn := iColumnNo;
                        abort;
                    end
//<172> Add ↓↓↓
					// ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし, 優先支払「0≠採用」, No1
					else if (m_iProAdoptKbn = 0) and (iPriPayWay <> 0) and (iNo = 1) then
                    begin
    					MJSMessageBoxEx (Self,_MessageDec03, 'エラー', mjError, mjOK, mjDefOK); // <179> ADD

						iColumnNo := 8+(iDetail*1);
                        GridPayRatio.FocusedColumn := iColumnNo;
                        abort;
                    end
//<172> Add ↑↑↑
                    else
                    begin
// <142> 2007/02/20 H.Kawato Add End
					    if (MJSMessageBoxEx (Self,_MessageDec02, '分解基準値自動セット', mjQuestion, mjYesNo, mjDefYes) = mrYes) then
                        begin
                        	cRitu := 100.00-cRitu;
                        	FieldByName('Hou'+IntToStr(iNo)+'StdRitsu').AsCurrency := FieldByName('Hou'+IntToStr(iNo)+'StdRitsu').AsCurrency+cRitu;
                        end
                        else
                        begin
                        	GridPayRatio.FocusedColumn := iColumnNo;
                        	abort;
                        end;
                    end;
				end;

				cMem := MemPayRatio;
				iSel := DISPOSE_RATIO;
			end
			// 支払方法(定額)の時
			else if Tab.Items.Selected = TAB_FIXED then
			begin
// <142> 2007/02/20 H.Kawato Add Start
//<172> Mod
//              if  (m_iProAdoptKbn = 1) and (iPriPayWay = 1) then
				if  (iPriPayWay <> 0) then
//<172> Mod
                begin
					if (FieldByName('Hou2No').AsInteger = 0) then
					begin
    					MJSMessageBoxEx (Self,_MessageDec03, 'エラー', mjError, mjOK, mjDefOK); // <179> ADD

						GridPayFixed.FocusedField := Hou_T_Houhou2_No.Field;
						abort;
					end;
                end;
// <142> 2007/02/20 H.Kawato Add End
				cMem := MemPayFixed;
				iSel := DISPOSE_FIXED;
// <122> 2006/04/28 H.Kawato Add St
                //Edit用内部ｺｰﾄﾞ作成
                ExNCode := cMem.FieldByName('ExNCode').AsFloat;
// <122> 2006/04/28 H.Kawato Add Ed
			end;

// <122> 2006/04/25 H.Kawato Add St
            iRenInitRet := -99; // <125>

            try                 // <125>
                iRenInitRet := fnPayProgRendoInit(ExNCode);

                if (iRenInitRet = 1) or (iRenInitRet = 0) then
                begin
// <122> 2006/04/25 H.Kawato Add Ed
    			    m_cDataModule.BeginTran (m_cDBSelect);
// <142> 2007/02/20 H.Kawato Add Start
//<172> Del
//                  // プロジェクト別支払採用あり
//                  if (m_iProAdoptKbn = 1) then
//                  begin
//<172> Del
                        // 優先支払方法の更新
                    	if fnUpDatePriPayWay(cMem) = False then
                    	begin
                    		m_cDataModule.Rollback (m_cDBSelect);					    // ﾛｰﾙﾊﾞｯｸ(破棄)
                    		abort;
                        end
                        else
                        begin
                            // 優先支払詳細情報の更新
                            if fnUpDatePayDetailShousai(DataSet) = False then
                            begin
                        		m_cDataModule.Rollback (m_cDBSelect);                   // ﾛｰﾙﾊﾞｯｸ(破棄)
                        		abort;
                            end;
                    	end;
//                  end;							//<172> Del
// <142> 2007/02/20 H.Kawato Add End
                    for i:=1 to 5 do
                    begin
                    	if fnUpDatePayPtnDtl(FieldByName('BaseHojCode').AsString,i,iSel,cMem) = False then
                    	begin
                    		m_cDataModule.Rollback (m_cDBSelect);					    // ﾛｰﾙﾊﾞｯｸ(破棄)
                    		abort;
                    	end;
                    end;
                    m_cDataModule.Commit (m_cDBSelect);									// ｺﾐｯﾄ(反映)
// <122> 2006/04/25 H.Kawato Add St
                end
// <131> 2006/08/09 H.Kawato Mod
//                else if (iRenInitRet = 10) then
                else if (iRenInitRet = 10) or (iRenInitRet = -1) then
                begin
// <139> 2006/08/11 H.Kawato Del Start
{
    	            // 支払方法(比率)
    	            if Tab.Items.Selected = TAB_RATIO then
    	            begin
    		            for i:=1 to 5 do
    		            begin
    			            Str := IntToStr(i);
    			            GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'Data'        ).AsInteger  := m_arPayLineSave[i].iHouHou;     // 支払方法
    			            GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu'    ).AsCurrency := m_arPayLineSave[i].cStdRitu;    // 分解基準値
    			            GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'MinKin'      ).AsCurrency := m_arPayLineSave[i].cMinKin;     // 支払最低額
    			            GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin'    ).AsCurrency := m_arPayLineSave[i].cHasuKin;    // 端数処理額
    			            GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHouData').AsInteger  := m_arPayLineSave[i].iHasuHou;    // 端数処理方法
// <132> 2006/08/09 H.Kawato Add Start
                            m_arPayLineInfo[i].iHouHou  := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'No'      ).AsInteger;         // 支払方法
                            m_arPayLineInfo[i].cStdRitu := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency;        // 分解基準値
                            m_arPayLineInfo[i].cMinKin  := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'MinKin'  ).AsCurrency;        // 支払最低額
                            m_arPayLineInfo[i].cHasuKin := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin').AsCurrency;        // 端数処理額
                            m_arPayLineInfo[i].iHasuHou := GridPayRatio.DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou').AsInteger;         // 端数処理方法
// <132> 2006/08/09 H.Kawato Add End
    		            end;
    	            end
    	            // 支払方法(定額)
    	            else
    	            begin
    		            for i:=1 to 5 do
    		            begin
    			            Str := IntToStr(i);
    			            GridPayFixed.DataSource.DataSet.FieldByName('Hou'+Str+'Data'    ).AsInteger  := m_arPayLineSave[i].iHouHou;     // 支払方法
    			            GridPayFixed.DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency := m_arPayLineSave[i].cStdRitu;    // 分解基準値
// <132> 2006/08/09 H.Kawato Add Start
                        	m_arPayLineInfo[i].iHouHou  := GridPayFixed.DataSource.DataSet.FieldByName('Hou'+Str+'No'      ).AsInteger;     // 支払方法
                        	m_arPayLineInfo[i].cStdRitu := GridPayFixed.DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency;	// 分解基準値
                        	m_arPayLineInfo[i].cMinKin  := 0;	// 支払最低額
                        	m_arPayLineInfo[i].cHasuKin := 0;	// 端数処理額
                        	m_arPayLineInfo[i].iHasuHou := 0;	// 端数処理方法
// <132> 2006/08/09 H.Kawato Add End
    		            end;
    	            end;
}
// <139> 2006/08/11 H.Kawato Del End
                    abort;      // <139> Add
                end;
                
            finally             // <125>
                fnPayProgRendoExec(iRenInitRet, ExNCode);
            end;                // <125>
// <122> 2006/04/25 H.Kawato Add Ed

			Flg.bFuri        := False;
//<GA001>ST
			Flg.bFuriGD      := False;
			Flg.bFuriGT      := False;
			Flg.bFuriGK      := False;
//<GA001>ED
			Flg.bFuriDate    := False;
			Flg.bDraft       := False;
			Flg.bCheck       := False;
			RecInfo.sCD      := FieldByName('HojCode'     ).AsString;
			RecInfo.sBaseCD  := FieldByName('BaseHojCode' ).AsString;
			RecInfo.sName    := FieldByName('SName'       ).AsString;
			RecInfo.sRen     := FieldByName('RenChar'     ).AsString;
            RecInfo.ExNCD    := FieldByName('ExNCode'     ).AsFloat;
            RecInfo.PayPtnNo := FieldByName('PayPtnNo'    ).AsInteger;          // <142> Add
			for i:=1 to 5 do
			begin
				case cMem.FieldByName('Hou'+IntToStr(i)+'No').AsInteger of
					1:	// 振込
					begin
						// ﾚｺｰﾄﾞが存在するかﾁｪｯｸ
// <142> 2007/02/20 H.Kawato Mod
//						if fnMemRecordCheck(MemFuri,FieldByName('HojCode').AsString) = False then
						if fnMemRecordCheck(MemFuri,FieldByName('HojCode').AsString,
                                            FieldByName('PayPtnNo').AsInteger) = False then
							fnMemUpdate(DISPOSE_TRANSFER,RecInfo,MemFuri);
						Flg.bFuri := True;
					end;
					2:	// 期日指定振込
					begin
						// ﾚｺｰﾄﾞが存在するかﾁｪｯｸ
// <142> 2007/02/20 H.Kawato Mod
//						if fnMemRecordCheck(MemFuriDate,FieldByName('HojCode').AsString) = False then
						if fnMemRecordCheck(MemFuriDate,FieldByName('HojCode').AsString,
                                            FieldByName('PayPtnNo').AsInteger) = False then
							fnMemUpdate(DISPOSE_DATETRAN,RecInfo,MemFuriDate);
						Flg.bFuriDate := True;
					end;
					3:	// 手形
					begin
						// ﾚｺｰﾄﾞが存在するかﾁｪｯｸ
// <142> 2007/02/20 H.Kawato Mod
//						if fnMemRecordCheck(MemDraft,FieldByName('HojCode').AsString) = False then
						if fnMemRecordCheck(MemDraft,FieldByName('HojCode').AsString,
                                            FieldByName('PayPtnNo').AsInteger) = False then
							fnMemUpdate(DISPOSE_DRAFT,RecInfo,MemDraft);
						Flg.bDraft := True;
					end;
					4:	// 小切手
					begin
						// ﾚｺｰﾄﾞが存在するかﾁｪｯｸ
// <142> 2007/02/20 H.Kawato Mod
//						if fnMemRecordCheck(MemCheck,FieldByName('HojCode').AsString) = False then
						if fnMemRecordCheck(MemCheck,FieldByName('HojCode').AsString,
                                            FieldByName('PayPtnNo').AsInteger) = False then
							fnMemUpdate(DISPOSE_CHECK,RecInfo,MemCheck);
						Flg.bCheck := True;
					end;
				end;
			end;




			// 振込が存在しない時かつ振込にﾃﾞｰﾀが存在する時
// <142> 2007/02/20 H.Kawato Mod
//			if (Flg.bFuri <> True) and fnMemRecordCheck(MemFuri,FieldByName('HojCode').AsString) = True then
			if (Flg.bFuri <> True) and
                (fnMemRecordCheck(MemFuri,FieldByName('HojCode').AsString,FieldByName('PayPtnNo').AsInteger) = True) then
			begin
// <142> 2007/02/20 H.Kawato Mod
//				fnMemDelete(RecInfo.sBaseCD,MemFuri);
				fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemFuri);
				fnGridOptionsControl(False,DISPOSE_TRANSFER,MemFuri);
			end;

			// 期日指定振込が存在しない時かつ期日指定振込にﾃﾞｰﾀが存在する時
// <142> 2007/02/20 H.Kawato Mod
//			if (Flg.bFuriDate <> True) and (fnMemRecordCheck(MemFuriDate,FieldByName('HojCode').AsString) = True) then
			if (Flg.bFuriDate <> True) and
                (fnMemRecordCheck(MemFuriDate,FieldByName('HojCode').AsString,FieldByName('PayPtnNo').AsInteger) = True) then
			begin
// <142> 2007/02/20 H.Kawato Mod
//				fnMemDelete(RecInfo.sBaseCD,MemFuriDate);
				fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemFuriDate);
				fnGridOptionsControl(False,DISPOSE_DATETRAN,MemFuriDate);
            end;

			// 手形が存在しない時かつ手形にﾃﾞｰﾀが存在する時
// <142> 2007/02/20 H.Kawato Mod
//			if (Flg.bDraft <> True) and (fnMemRecordCheck(MemDraft,FieldByName('HojCode').AsString) = True) then
			if (Flg.bDraft <> True) and
                (fnMemRecordCheck(MemDraft,FieldByName('HojCode').AsString,FieldByName('PayPtnNo').AsInteger) = True) then
			begin
// <142> 2007/02/20 H.Kawato Mod
//				fnMemDelete(RecInfo.sBaseCD,MemDraft);
				fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemDraft);
				fnGridOptionsControl(False,DISPOSE_DRAFT,MemDraft);
			end;

			// 小切手が存在しない時かつ小切手にﾃﾞｰﾀが存在する時
// <142> 2007/02/20 H.Kawato Mod
//			if (Flg.bCheck <> True) and (fnMemRecordCheck(MemCheck,FieldByName('HojCode').AsString) = True) then
			if (Flg.bCheck <> True) and
                (fnMemRecordCheck(MemCheck,FieldByName('HojCode').AsString,FieldByName('PayPtnNo').AsInteger) = True) then
			begin
// <142> 2007/02/20 H.Kawato Mod
//				fnMemDelete(RecInfo.sBaseCD,MemCheck);
				fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemCheck);
				fnGridOptionsControl(False,DISPOSE_CHECK,MemCheck);
			end;
		end;
	end;

	// -----<159> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
//<174> Add
		//件数がある場合使用可能
        if	((Tab.Items.Selected = TAB_RATIO) and
			 (MemPayRatio.RecordCount > 0))   or
			((Tab.Items.Selected = TAB_FIXED) and
			 (MemPayFixed.RecordCount > 0)) then
		begin
			uvFncInfo.Enabled[7] := True;
		    MSPFunctionBar.SetFuncEnabledA(uvFncInfo.Enabled);
		end;
//<174> Add
	end;
	// -----<159> Add-Ed-----
end;

//**********************************************************************
//*		Proccess	:	支払条件明細ﾏｽﾀ更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	HC	:	補助ｺｰﾄﾞ
//*						NO	:	条件明細NO
//*						Sel	:	処理対象	比率：DISPOSE_RATIO
//*											定額：DISPOSE_FIXED
//*						Mem	:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayPtnDtl(HC: String; NO,Sel: Integer; Mem: TdxMemData): Boolean;
var
	sNo	: String;
	cMinKin	: Currency;
	cHasuKin: Currency;
	iHasuHou: Integer;
    ExNCode : Extended;

begin
	Result   := True;
	cMinKin  := 0;
	cHasuKin := 0;
	iHasuHou := 0;

	sNo := IntToStr(NO);
	// 比率
	if Sel = DISPOSE_RATIO then
    begin
		cMinKin  := Mem.FieldByName('Hou'+sNo+'MinKin'  ).AsCurrency;		// 支払最低額
		cHasuKin := Mem.FieldByName('Hou'+sNo+'HasuuKin').AsCurrency;		// 端数処理額
		iHasuHou := Mem.FieldByName('Hou'+sNo+'HasuuHou').AsInteger;		// 端数処理方法
	end;

	with (m_Qe) do
	begin
		if NO = 1 then
		begin
			Close();
			SQL.Clear();
            ExNCode := Mem.FieldByName('ExNCode').AsFloat;

			SQL.Add('DELETE FROM PayPtnDtl WHERE MasterKbn = :MK AND PayNCode = :NC');
			SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
			SQL.Add(' AND RDelKbn  = 0 ');      // <144> Add
			ParamByName('MK').AsInteger := MASTER_CUSTOMER;
			ParamByName('NC').AsFloat	:= ExNCode;
			ParamByName('PN').AsInteger := Mem.FieldByName('PayPtnNo').AsInteger;   // <142> Add


			if (not ExecSQL()) then
			begin
				fnErrorMessageDsp(m_Qe);
				Result := FALSE;
				Exit;
			end;
		end;

		if Mem.FieldByName('Hou'+sNo+'No').AsInteger <> 0 then
		begin
			// 新規
			Close();
			SQL.Clear();

			SQL.Add('INSERT INTO PayPtnDtl (MasterKbn,PayNCode,JoukenNo');
// <142> 2007/02/20 H.Kawato Mod Start
//			SQL.Add(',Houhou,StdRitu,MinKin,HasuuKin,HasuuHou)');
//			SQL.Add('VALUES(:MK,:PN,:JN,:HOU,:RITU,:MIN,:HSK,:HSH)');
			SQL.Add(',Houhou,StdRitu,MinKin,HasuuKin,HasuuHou,PayPtnNo');
			SQL.Add(',UpdTantoNCode)'); // <160>
			SQL.Add('VALUES(:MK,:PN,:JN,:HOU,:RITU,:MIN,:HSK,:HSH,:PTN');
			SQL.Add(',:UpdTantoNCode)'); // <160>
// <142> 2007/02/20 H.Kawato Mod End
			ParamByName('MK'  ).AsInteger  := MASTER_CUSTOMER;										// ﾏｽﾀ区分
			ParamByName('PN'  ).AsFloat    := Mem.FieldByName('ExNCode').AsFloat;
			ParamByName('JN'  ).AsInteger  := NO;													// 条件明細NO
			ParamByName('HOU' ).AsInteger  := Mem.FieldByName('Hou'+sNo+'No'	  ).AsInteger;		// 支払方法
			ParamByName('RITU').AsCurrency := Mem.FieldByName('Hou'+sNo+'StdRitsu').AsCurrency;		// 分解基準値
			ParamByName('MIN' ).AsCurrency := cMinKin;												// 支払最低額
			ParamByName('HSK' ).AsCurrency := cHasuKin;												// 端数処理額
			ParamByName('HSH' ).AsInteger  := iHasuHou;												// 端数処理方法
			ParamByName('PTN' ).AsInteger  := Mem.FieldByName('PayPtnNo').AsInteger;                // 支払方法 <142> Add
			ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;									// 更新担当者内部ｺｰﾄﾞ<160>

			if (not ExecSQL()) then
			begin
				fnErrorMessageDsp(m_Qe);
				Result := FALSE;
				Exit;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	優先支払方法更新処理
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	HC	:	補助ｺｰﾄﾞ
//*						NO	:	条件明細NO
//*						Sel	:	処理対象	比率：DISPOSE_RATIO
//*											定額：DISPOSE_FIXED
//*						Mem	:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePriPayWay(Mem: TdxMemData): Boolean;
var
    nExNCode    : Extended;
    iPayPtnNo   : Integer;
    iPriPayWay  : Integer;
    strSQL      : String;
begin
	Result      := True;
    nExNCode    := Mem.FieldByName('ExNCode'  ).AsFloat;
    iPayPtnNo   := Mem.FieldByName('PayPtnNo' ).AsInteger;
    iPriPayWay  := Mem.FieldByName('PriPayWay').AsInteger;

//<172> Del
//  if (iPriPayWay = 1) then
//      iPriPayWay  := 3        // 当面手形固定
//  else
//      iPriPayWay  := 0;
//<172> Del

	with (m_Qe) do
	begin
        Close();
        SQL.Clear();

        strSQL := 'UPDATE PayPtnInfo SET '
                + 'PriPayWay = ' + intToStr(iPriPayWay)
                + ',UpdTantoNCode = ' + FloatToStr(m_nTantoCd) // <160>
                + 'WHERE PayPtnNo = '  + IntToStr(iPayPtnNo)
                + '  AND PayNCode = '  + FloatToStr(nExNCode)
                + '  AND RDelKbn = 0 '  // <144> Add
                + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);

        if (not ExecSQL()) then
        begin
        	fnErrorMessageDsp(m_Qe);
        	Result := FALSE;
        	Exit;
        end;
	end;
end;

//**********************************************************************
//*		Proccess	:	優先支払詳細情報更新処理
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	DataSet	:	処理対象のTDataSet
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailShousai(DataSet: TDataSet): Boolean;
var
    nExNCode    : Extended;
    iPayPtnNo   : Integer;
    iPriPayWay  : Integer;
    strSQL      : String;
begin
	Result      := True;

//<172> Add
	//変更されていない
	if not m_bPriPayWayChgFlg then
		Exit;								//更新無し
//<172> Add

    with (DataSet) do
    begin
        nExNCode    := FieldByName('ExNCode'  ).AsFloat;
        iPayPtnNo   := FieldByName('PayPtnNo' ).AsInteger;
        iPriPayWay  := FieldByName('PriPayWay').AsInteger;
    end;

//<172> Del
//  if (iPriPayWay = 1) then
//      iPriPayWay  := 3        // 当面手形固定
//  else
//      iPriPayWay  := 0;
//<172> Del

	with (m_Qe) do
	begin
        Close();
        SQL.Clear();

        // PayDetailInfo(Edaban11～15)の存在ﾁｪｯｸ
        strSQL := 'SELECT PayNCode FROM PayDetailInfo '
                + 'WHERE Edaban Between 11 AND 15 '
                + '  AND PayPtnNo = ' + IntToStr(iPayPtnNo)
                + '  AND PayNCode = ' + FloatToStr(nExNCode)
                + '  AND RDelKbn  = 0 ' // <144> Add
                + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);

		if (not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 優先支払「0≠採用」の時、レコード作製
            if (iPriPayWay > 0) then
// <172> Mod
//              fnInsertShousai(DataSet);
				fnInsertShousai(DataSet, iPriPayWay);
// <172> Mod
		end
		else
		begin
			// 優先支払「0:なし」の時、詳細情報削除
            if (iPriPayWay = 0) then
// <172> Mod
//              fnDeleteShousai(nExNCode, iPayPtnNo);
				//全削除
				fnDeleteShousai(nExNCode, iPayPtnNo)
			else
			begin
				//全削除
				fnDeleteShousai(nExNCode, iPayPtnNo);
                //新規に追加
				fnInsertShousai(DataSet, iPriPayWay);
			end;
// <172> Mod
        end;
	end;
end;

//**********************************************************************
//*		Proccess	:	優先支払詳細情報新規登録
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	DataSet	:	処理対象のTDataSet
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
// <172> Mod
//function TJNTCRP004007f.fnInsertShousai(DataSet: TDataSet): Boolean;
function TJNTCRP004007f.fnInsertShousai(DataSet: TDataSet; PriPayWay: Integer): Boolean;
// <172> Mod
var
    nExNCode    : Extended;
    iPayPtnNo   : Integer;
    strSQL      : String;
    iEdaban     : Integer;
begin
	Result      := True;

    with (DataSet) do
    begin
        nExNCode    := FieldByName('ExNCode'  ).AsFloat;
        iPayPtnNo   := FieldByName('PayPtnNo' ).AsInteger;
    end;

	with (m_Qe) do
	begin
        for	iEdaban := 11 to 15 do
        begin
            // 新規
            Close();
            SQL.Clear();
            strSQL := 'INSERT INTO PayDetailInfo ('
                    + 'MasterKbn'
                    + ',PayNCode'
                    + ',ShiharaiSyubetu'
                    + ',Edaban'
                    + ',AccNCode'
                    + ',BkBraNCode'
                    + ',AccKbn'
                    + ',AccNo'
                    + ',AnserNo'
                    + ',UketoriName'
                    + ',TransKanaName'
                    + ',ChargeKbn'
                    + ',ChargeFutan'
                    + ',Transkbn'
                    + ',EdiInfo'
                    + ',AiteNo1'
                    + ',AiteNo2'
                    + ',FBSet'
                    + ',Site'
                    + ',TegYusouKbn'
                    + ',TegYusouFutan'
                    + ',TegBunkatuMax'
                    + ',Houhou'
                    + ',BaseKingaku'
                    + ',BaseHiritu'
                    + ',HasuuKingaku'
                    + ',HasuuHou'
                    + ',RDelKbn'
                    + ',UpdDateTM'
                    + ',InsDateTM'
                    + ',UpdTantoNCode'
                    + ',AccAutoKbn'
                    + ',AccAutoData'
                    + ',PayPtnNo'
                    + ')VALUES('
                    +       IntToStr(MASTER_CUSTOMER)
                    + ',' + FloatToStr(nExNCode)
// <172> Mod
//                  + ',3'
					+ ',' + FloatToStr(PriPayWay)
// <172> Mod
                    + ',' + IntToStr(iEdaban)
                    + ',0,0,0'
                    + ',' + AnsiQuotedStr('', '''')
                    + ',' + AnsiQuotedStr('', '''')
                    + ',' + AnsiQuotedStr('', '''')
                    + ',' + AnsiQuotedStr('', '''')
                    + ',0,0,0'
                    + ',' + AnsiQuotedStr('', '''')
                    + ',' + AnsiQuotedStr('', '''')
                    + ',' + AnsiQuotedStr('', '''')
                    + ',0,0,0,0,0,0'
                    + ',0,0,0,0,0'
                    + ',Now(),Now()'
                    + ',' + FloatToStr(m_nTantoCd)
                    + ',0,0'
                    + ',' + IntToStr(iPayPtnNo)
                    + ')';

            SQL.Add(strSQL);

            if (not ExecSQL()) then
            begin
            	fnErrorMessageDsp(m_Qe);
            	Result := FALSE;
            	Exit;
            end;
        end;
	end;
end;

//**********************************************************************
//*		Proccess	:	優先支払詳細情報削除処理
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	DataSet	:	処理対象のTDataSet
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteShousai(nPayNCode: Extended; nPayPtnNo: Integer): Boolean;
var
    strSQL      : String;
begin
	Result      := True;

	with (m_Qe) do
	begin
        Close();                
        SQL.Clear();
        strSQL := 'Delete from PayDetailInfo '
                + 'WHERE  Edaban Between 11 AND 15 '
                + '  AND  PayPtnNo = ' + IntToStr(nPayPtnNo)
                + '  AND  PayNCode = ' + FloatToStr(nPayNCode)
                + '  AND  RDelKbn = 0 ' // <144> Add
                + '  AND  MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);

        if (not ExecSQL()) then
        begin
        	fnErrorMessageDsp(m_Qe);
        	Result := FALSE;
        	Exit;
        end;
	end;
end;

//************************************************************************
//*		Component		:	CmnGridPayXxx ( TdxDBGrid )
//*
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridPayChangeNodeEx(Sender: TObject);
var
//	i	: Integer;  // <122> 2006/04/25 H.Kawato Add    // <139> Del
    iPriPayWay  : Integer;  // <142> Add
begin
	fnSetPayLineData(Sender);

// <142> 2007/02/20 H.Kawato Add Start
    // 優先支払方法
    iPriPayWay  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger;
    // 支払方法１の切り替え
    fnSetHouhou1Enabled(Sender, iPriPayWay);
// <142> 2007/02/20 H.Kawato Add End

// <139> 2006/08/11 H.Kawato Del Start
{
// <122> 2006/04/25 H.Kawato Add St
	// 支払方法(比率)
	if TdxDBGrid(Sender).Name = GridPayRatio.Name then
	begin
		for i:=1 to 5 do
		begin
			m_arPayLineSave[i].iHouHou  := m_arPayLineInfo[i].iHouHou;	// 支払方法
			m_arPayLineSave[i].cStdRitu := m_arPayLineInfo[i].cStdRitu;	// 分解基準値
			m_arPayLineSave[i].cMinKin  := m_arPayLineInfo[i].cMinKin;	// 支払最低額
			m_arPayLineSave[i].cHasuKin := m_arPayLineInfo[i].cHasuKin;	// 端数処理額
			m_arPayLineSave[i].iHasuHou := m_arPayLineInfo[i].iHasuHou;	// 端数処理方法
		end;
	end
	// 支払方法(定額)
	else
	begin
		for i:=1 to 5 do
		begin
			m_arPayLineSave[i].iHouHou  := m_arPayLineInfo[i].iHouHou;	// 支払方法
			m_arPayLineSave[i].cStdRitu := m_arPayLineInfo[i].cStdRitu;	// 分解基準値
			m_arPayLineSave[i].cMinKin  := m_arPayLineInfo[i].cMinKin;	// 支払最低額
			m_arPayLineSave[i].cHasuKin := m_arPayLineInfo[i].cHasuKin;	// 端数処理額
			m_arPayLineSave[i].iHasuHou := m_arPayLineInfo[i].iHasuHou;	// 端数処理方法
		end;
	end;
// <122> 2006/04/25 H.Kawato Add Ed
}
// <139> 2006/08/11 H.Kawato Del End
end;

//**********************************************************************
//*		Proccess	:	支払方法の行のﾃﾞｰﾀ取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/24
//*		Parameter	:	Sender
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetPayLineData(Sender: TObject);
var
	i	: Integer;
	Str	: String;
begin
	// 支払方法(比率)
	if TdxDBGrid(Sender).Name = GridPayRatio.Name then
	begin
        m_iBeforePriPayWay  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger; // 優先支払方法 <142> Add

		for i:=1 to 5 do
		begin
			Str := IntToStr(i);
			m_arPayLineInfo[i].iHouHou  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'No'      ).AsInteger;	// 支払方法
			m_arPayLineInfo[i].cStdRitu := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency;	// 分解基準値
			m_arPayLineInfo[i].cMinKin  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'MinKin'  ).AsCurrency;	// 支払最低額
			m_arPayLineInfo[i].cHasuKin := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin').AsCurrency;	// 端数処理額
			m_arPayLineInfo[i].iHasuHou := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou').AsInteger;	// 端数処理方法
		end;
	end
	// 支払方法(定額)
	else
	begin
        m_iBeforePriPayWay  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger; // 優先支払方法 <142> Add
        
		for i:=1 to 5 do
		begin
			Str := IntToStr(i);
			m_arPayLineInfo[i].iHouHou  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'No'      ).AsInteger;	// 支払方法
			m_arPayLineInfo[i].cStdRitu := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency;	// 分解基準値
			m_arPayLineInfo[i].cMinKin  := 0;	// 支払最低額
			m_arPayLineInfo[i].cHasuKin := 0;	// 端数処理額
			m_arPayLineInfo[i].iHasuHou := 0;	// 端数処理方法
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	優先支払詳細の行ﾃﾞｰﾀ取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Sender
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetShousaiLineData(Sender: TObject);
var
	i	: Integer;
	Str	: String;
begin
    for i:=1 to 5 do
    begin
    	Str := IntToStr(i);
    	m_arShousaiLineInfo[i].cBaseKingaku  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'BaseKingaku' ).AsCurrency;	// 基準金額
    	m_arShousaiLineInfo[i].cBaseHiritu   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'BaseHiritu'  ).AsCurrency;	// 分解基準値
    	m_arShousaiLineInfo[i].cHasuuKingaku := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKingaku').AsCurrency;	// 端数処理額
    	m_arShousaiLineInfo[i].iHasuuHou     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou'    ).AsInteger;	// 端数処理方法
    	m_arShousaiLineInfo[i].iSite         := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'Site'        ).AsInteger;	// サイト
    end;
end;

//**********************************************************************
//*		Proccess	:	支払方法の行ﾃﾞｰﾀ取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Sender
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetPayWayLineData(Sender: TObject);
begin
   	m_PayWayLineInfo.PayCode     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('strHojCode'   ).AsString;	    // 支払先ｺｰﾄﾞ
   	m_PayWayLineInfo.PrjCode     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PrjGCode'     ).AsString;	    // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
   	m_PayWayLineInfo.PjSubCode   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PjSubGCode'   ).AsString;	    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
   	m_PayWayLineInfo.BunkaiKbn   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intApartNo'   ).AsInteger;    // 分解方法
   	m_PayWayLineInfo.UketoriName := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('UketoriName'  ).AsString;	    // 受取人名称
end;

//**********************************************************************
//*		Proccess	:	支払行のﾁｪｯｸと編集処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/24
//*		Parameter	:	Sender
//*						Col		:	ｶﾗﾑNO
//*						Int		:	入力された支払方法
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnPayLineChkEdit(Sender: TObject; Col,Int: Integer): Boolean;
var
	i	: Integer;
	iwk	: Integer;
	Str	: String;
	Str2: String;
	cMem: TdxMemData;
begin
	Result := True;

			// 支払方法(比率)
	if TdxDBGrid(Sender).Name = GridPayRatio.Name then
		cMem := MemPayRatio
	else	// 支払方法(定額)
		cMem := MemPayFixed;

// <172> Add
	if cMem.RecordCount = 0 then
		exit;
// <172> Add

	if not(cMem.State in [dsEdit]) then
		exit;

	Str := IntToStr(Col);
	// 入力された支払方法が｢0｣の時
	if Int = 0 then
	begin
		// ｶﾗﾑNOが｢5｣の時
		if Col = 5 then
		begin
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5StdRitsu').AsCurrency     := 0;	// 分解基準値
			// 支払方法(比率)
			if TdxDBGrid(Sender).Name = GridPayRatio.Name then
			begin
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5MinKin'  ).AsCurrency := 0;	// 支払最低額
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuKin').AsCurrency := 0;	// 端数処理額
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuHou').AsInteger  := 0;	// 端数処理方法
			end;
		end
		// 次の支払方法が｢0:なし｣の時
		else if m_arPayLineInfo[Col+1].iHouHou = 0 then
		begin
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency     := 0;	// 分解基準値
			// 支払方法(比率)
			if TdxDBGrid(Sender).Name = GridPayRatio.Name then
			begin
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'MinKin'  ).AsCurrency := 0;	// 支払最低額
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin').AsCurrency := 0;	// 端数処理額
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou').AsInteger  := 0;	// 端数処理方法
			end;
		end
		// 次の支払方法が｢0:なし｣以外の時
		else
		begin
			iwk := Col;
			// 支払方法を一つずつずらす
			for i:=Col+1 to 5 do
			begin
				Str2 := IntToStr(i);
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'Data').AsInteger			// 支払方法
					:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str2+'Data').AsInteger;
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'StdRitsu').AsCurrency		// 分解基準値
					:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str2+'StdRitsu').AsCurrency;
				// 支払方法(比率)
				if TdxDBGrid(Sender).Name = GridPayRatio.Name then
				begin
					TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'MinKin').AsCurrency			// 支払最低額
						:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str2+'MinKin').AsCurrency;
					TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuKin').AsCurrency		// 端数処理額
						:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str2+'HasuuKin').AsCurrency;
					TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str+'HasuuHou').AsInteger		// 端数処理方法
						:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+Str2+'HasuuHou').AsInteger;
				end;
				iwk := iwk+1;
				Str := IntToStr(iwk);
			end;
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5Data'	   ).AsInteger  := 0;	// 支払方法
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5StdRitsu').AsCurrency := 0;	// 分解基準値
			// 支払方法(比率)
			if TdxDBGrid(Sender).Name = GridPayRatio.Name then
			begin
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5MinKin'  ).AsCurrency := 0;	// 支払最低額
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuKin').AsCurrency := 0;	// 端数処理額
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuHou').AsInteger  := 0;	// 端数処理方法
			end;
		end;
	end
	else
	begin
		// 入力ｶﾗﾑ前に存在するかﾁｪｯｸ
		for i:=1 to Col do
		begin
			if m_arPayLineInfo[i].iHouHou = Int then
			begin
				Result := False;
				exit;
			end;
		end;

		// 入力ｶﾗﾑ後に存在するかﾁｪｯｸ
		for i:=Col+1 to 5 do
		begin
			if m_arPayLineInfo[i].iHouHou = Int then
			begin
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou'+inttostr(i)+'Data').AsInteger := m_arPayLineInfo[Col].iHouHou;	// 支払方法
			end;
		end;
	end;

	fnSetPayLineData(Sender);
end;

//**********************************************************************
//*		Proccess	:	端数処理額の金額チェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/12/02
//*		Parameter	:	cPrice	:	端数所理学
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnFractionPriceCheck(cPrice: Currency): Boolean;
var
// 2006/05/08 H.Kawato Mod  12桁まで入力できるよう修正
//	nFigure	: Integer;
	nFigure	: Int64;
	nCount	: Integer;
begin
	Result := True;
	nFigure	:= 10;

	for	nCount := 2 to StrLen(PChar(CurrToStr(cPrice)))-1 do
		nFigure	:= nFigure * 10;

	if ((Trunc(cPrice) mod nFigure) <> 0) then
		Result := False;
end;

//**********************************************************************
//*		Proccess	:	振込情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/27
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetFurikomiInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;

	DSFuri.DataSet := nil;

	MemFuri.Close;
	MemFuri.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode');

// <050>        SQL.Add(',DI.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',PS.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',DI.BkBraNCode As BranchNCode'    );  //支店内部ｺｰﾄﾞ
        SQL.Add(',PF.BankCode'      );  //本店外部ｺｰﾄﾞ
        SQL.Add(',PF.BankName'      );  //本店名
        SQL.Add(',PF.BankKana'      );  //本店ｶﾅ

        SQL.Add(',PS.BranchCode'    );  //支店外部ｺｰﾄﾞ
		SQL.Add(',PS.BranchName'    );  //支店名
		SQL.Add(',PS.BranchKana'    );  //支店ｶﾅ

        SQL.Add(',DI.TransKanaName,DI.Acckbn,DI.AccNo,DI.ChargeFutan,DI.ChargeKbn');
		SQL.Add(',DI.TransKbn,DI.FBSet,DI.EdiInfo,DI.AiteNo1,DI.AiteNo2');
		SQL.Add(',DI.AccAutoKbn,DI.AccAutoData');       // <128> Add
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo ');
// <121>		SQL.Add(',MA.GCode as BANKGCode ,MA.SimpleName as BANK ');
        SQL.Add(',MA.SimpleName as BANK '); // <121>
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelKbn = 0 AND AI.NCode = MA.BankNCode) ');
        SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode =AI.BankNCode)    '); // <121>
// <050>        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (DI.BankNCode  = PF.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBS PS ON   (DI.BkBraNCode = PS.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (PS.BankNCode  = PF.NCode)');


		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 1 AND MT.RDelKbn=0 ');// <121>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL  :='SELECT '
                + 'ISNULL(PD.PayNCode, 0) AS PayNCode '                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先口座内部ｺｰﾄﾞ
                + ',ISNULL(PS.BankNCode, 0) As BankNCode '              //本店内部ｺｰﾄﾞ
                + ',ISNULL(DI.BkBraNCode, 0) As BranchNCode '           //支店内部ｺｰﾄﾞ
                + ',ISNULL(PF.BankCode, 0) AS BankCode '                //本店外部ｺｰﾄﾞ
                + ',ISNULL(PF.BankName, '''') AS BankName '             //本店名
                + ',ISNULL(PF.BankKana, '''') AS BankKana '             //本店ｶﾅ
                + ',ISNULL(PS.BranchCode, 0) AS BranchCode '            //支店外部ｺｰﾄﾞ
                + ',ISNULL(PS.BranchName, '''') AS BranchName '         //支店名
                + ',ISNULL(PS.BranchKana, '''') AS BranchKana '         //支店ｶﾅ
                + ',ISNULL(DI.TransKanaName, '''') AS TransKanaName '   //ｶﾅ振込先名
// <175> MOD-STR
//              + ',ISNULL(DI.Acckbn, 0) AS Acckbn '                    //預金種目
                + ',ISNULL(DI.Acckbn, 1) AS Acckbn '                    //預金種目
// <175> MOD-END
                + ',ISNULL(DI.AccNo, '''') AS AccNo '                   //口座番号
                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan '          //手数料負担
                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '              //手数料計算区分
                + ',ISNULL(DI.TransKbn, 0) AS TransKbn '                //振込方法
// <170> MOD-STR
//              + ',ISNULL(DI.FBSet, 0) AS FBSet'                       //FBセット項目
                + ',ISNULL(DI.FBSet, 2) AS FBSet'                       //FBセット項目
// <170> MOD-END
                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo '               //EDI情報
                + ',ISNULL(DI.AiteNo1, '''') AS AiteNo1 '               //顧客ｺｰﾄﾞ1
                + ',ISNULL(DI.AiteNo2, '''') AS AiteNo2 '               //顧客ｺｰﾄﾞ2
                + ',ISNULL(DI.AccAutoKbn, 0) AS AccAutoKbn '            //口座自動引落区分
                + ',ISNULL(DI.AccAutoData, 0) AS AccAutoData '          //自動引落支払ﾃﾞｰﾀ
                + ',ISNULL(AI.Acckbn, 0) as YOKIN '                     //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA '                    //口座番号
                + ',ISNULL(AI.GCode, 0) as IraiAccNo '                  //依頼先口座ｺｰﾄﾞ
                + ',ISNULL(BI.SimpleName, '''') as BANK '               //銀行簡略名称
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + 'ON (DI.MasterKbn = PD.MasterKbn '
                + 'AND DI.PayNCode = PD.PayNCode '
                + 'AND DI.PayPtnNo = PD.PayPtnNo '
                + 'AND DI.Edaban = 1 '
                + 'AND DI.RDelKbn = 0 ' // <144> Add
                + 'AND PD.HouHou = DI.ShiharaiSyubetu) '
// <199> MOD-STR
//              + 'LEFT OUTER JOIN MTOKUI MT '
//              + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'INNER JOIN MTOKUI MT '
                + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) '
// <199> MOD-END
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI '
                + 'ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo BI '
                + 'ON (BI.NCode =AI.BankNCode) '
                + 'LEFT OUTER JOIN HAPBS PS '
                + 'ON (DI.BkBraNCode = PS.NCode)'
                + 'LEFT OUTER JOIN HAPBF PF '
                + 'ON (PS.BankNCode  = PF.NCode)'
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PD.HouHou  = 1 '
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.RDelKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemFuri.Append;

// <142> 2007/02/20 H.Kawato Mod
//			strHojCode := FieldByName ('GCode').AsString;
			strHojCode := FieldByName ('PAYCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
	    			strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;
// <142> 2007/02/20 H.Kawato Mod Start
{
			MemFuri.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode').AsFloat;
			MemFuri.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
			MemFuri.FieldByName('BaseHojCode').AsString := FieldByName('GCode'      ).AsString; // 補助ｺｰﾄﾞ
			MemFuri.FieldByName('SName'      ).AsString := FieldByName('NMK'        ).AsString; // 補助名称
			MemFuri.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).AsString; // 連想
}
			MemFuri.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'   ).Value;
			MemFuri.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
			MemFuri.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;    // 補助ｺｰﾄﾞ
			MemFuri.FieldByName('SName'      ).AsString := FieldByName('PayName'    ).Value;    // 補助名称
			MemFuri.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;    // 連想

            MemFuri.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

            strHojCode := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemFuri.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            MemFuri.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemFuri.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	MemFuri.FieldByName('PrjName'   ).AsString := 'その他';

            strHojCode := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemFuri.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            MemFuri.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemFuri.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                MemFuri.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			// 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and
               (FieldByName('IraiAccNo').Value <> 0) then			// 依頼口座
			begin
				MemFuri.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
//				MemFuri.FieldByName('AccNCode').AsFloat := FieldByName('AccNCode').AsFloat;
				sBankName := FieldByName('BANK').AsString;	// 銀行名称
				case FieldByName('YOKIN').AsInteger of			// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				MemFuri.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				MemFuri.FieldByName('AccInfo').AsString := '';

			if FieldByName('BankCode').IsNull = False then			    // 銀行ｺｰﾄﾞ
            begin
  				MemFuri.FieldByName('BankCode'  ).AsInteger := FieldByName('BankCode'  ).AsInteger;
  				MemFuri.FieldByName('BankNCode' ).AsFloat := FieldByName('BankNCode' ).AsFLoat;
            end;
			if FieldByName('BranchCode').IsNull = False then			// 支店ｺｰﾄﾞ
            begin
				MemFuri.FieldByName('BkBraCode').AsInteger   := FieldByName('BranchCode' ).AsInteger;
				MemFuri.FieldByName('BranchNCode').AsFloat := FieldByName('BranchNCode').AsFloat;
            end;

			MemFuri.FieldByName('BankName'	   ).AsString := FieldByName('BankName'	    ).AsString;	// 銀行名称
			MemFuri.FieldByName('BankKanaName' ).AsString := FieldByName('BankKana'     ).AsString;	// ｶﾅ銀行名称
			MemFuri.FieldByName('BkBraName'	   ).AsString := FieldByName('BranchName'	).AsString;	// 支店名称
			MemFuri.FieldByName('BraKanaName'  ).AsString := FieldByName('BranchKana'   ).AsString;	// ｶﾅ支店名称
			MemFuri.FieldByName('TransKanaName').AsString := FieldByName('TransKanaName').AsString;	// ｶﾅ振込先名

			// 預金種別
			if FieldByName('Acckbn').IsNull = True then
				MemFuri.FieldByName('AccData').AsInteger := 1
			else
				MemFuri.FieldByName('AccData').AsInteger := FieldByName('Acckbn').AsInteger;
																										// 口座番号
			MemFuri.FieldByName('AccNo'		   ).AsString  := fnGetEditedAccountNumber(FieldByName('AccNo').AsString);
			MemFuri.FieldByName('ChargeData'   ).AsInteger := FieldByName('ChargeFutan'	 ).AsInteger;	// 手数料負担区分
			MemFuri.FieldByName('ChargeKbnData').AsInteger := FieldByName('ChargeKbn'	 ).AsInteger;	// 手数料計算区分
			MemFuri.FieldByName('TransKbnData' ).AsInteger := FieldByName('TransKbn'	 ).AsInteger;	// 振込方法
			MemFuri.FieldByName('FBSetData'    ).AsInteger := FieldByName('FBSet'		 ).AsInteger;	// FB区分
			MemFuri.FieldByName('EDIInfo'      ).AsString  := FieldByName('EdiInfo'		 ).AsString;	// EDI情報
			MemFuri.FieldByName('AiteNo1'      ).AsString  := FieldByName('AiteNo1'		 ).AsString;	// 顧客ｺｰﾄﾞ1
			MemFuri.FieldByName('AiteNo2'      ).AsString  := FieldByName('AiteNo2'		 ).AsString;	// 顧客ｺｰﾄﾞ2
// <128> 2006/06/29 H.Kawato Add Start
			MemFuri.FieldByName('AutoKbnData'  ).AsInteger := FieldByName('AccAutoKbn'   ).AsInteger;	// 口座自動引落区分
   			MemFuri.FieldByName('AccAutoData'  ).AsInteger := FieldByName('AccAutoData'	 ).AsInteger;	// 引落支払データ
// <128> 2006/06/29 H.Kawato Add End

			MemFuri.Post;
			next;
		end;
	end;
	MemFuri.First;

	DSFuri.DataSet := MemFuri;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_TRANSFER,MemFuri);
end;


//**********************************************************************
//*		Proccess	:	期日指定振込情報
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/27
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetDateFurikomiInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;

	DSFuriDate.DataSet := nil;

	MemFuriDate.Close;
	MemFuriDate.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode');

// <050>        SQL.Add(',DI.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',PS.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',DI.BkBraNCode As BranchNCode'    );  //支店内部ｺｰﾄﾞ
        SQL.Add(',PF.BankCode'      );  //本店外部ｺｰﾄﾞ
        SQL.Add(',PF.BankName'      );  //本店名
        SQL.Add(',PF.BankKana'      );  //本店ｶﾅ

        SQL.Add(',PS.BranchCode'    );  //支店外部ｺｰﾄﾞ
		SQL.Add(',PS.BranchName'    );  //支店名
		SQL.Add(',PS.BranchKana'    );  //支店ｶﾅ

        SQL.Add(',DI.TransKanaName,DI.Acckbn,DI.AccNo,DI.ChargeFutan,DI.ChargeKbn');

		SQL.Add(',DI.TransKbn,DI.FBSet,DI.EdiInfo,DI.AiteNo1,DI.AiteNo2,DI.Site');
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo');
		SQL.Add(',MA.SimpleName as BANK ');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelKbn = 0 AND AI.NCode = MA.BankNCode) ');
        SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '); // <121>
// <050>        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (DI.BankNCode  = PF.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBS PS ON   (DI.BkBraNCode = PS.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (PS.BankNCode  = PF.NCode)');

		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 2 AND MT.RDelKbn = 0');   // <121>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL := 'SELECT '
                + 'ISNULL(PD.PayNCode, 0) AS PayNCode '                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName'                    //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先口座内部ｺｰﾄﾞ
                + ',ISNULL(PS.BankNCode, 0) As BankNCode'               //本店内部ｺｰﾄﾞ
                + ',ISNULL(DI.BkBraNCode, 0) As BranchNCode'            //支店内部ｺｰﾄﾞ
                + ',ISNULL(PF.BankCode, 0) AS BankCode '                //本店外部ｺｰﾄﾞ
                + ',ISNULL(PF.BankName, '''') AS BankName '             //本店名
                + ',ISNULL(PF.BankKana, '''') AS BankKana '             //本店ｶﾅ
                + ',ISNULL(PS.BranchCode, 0) AS BranchCode '            //支店外部ｺｰﾄﾞ
                + ',ISNULL(PS.BranchName, '''') AS BranchName '         //支店名
                + ',ISNULL(PS.BranchKana, '''') AS BranchKana '         //支店ｶﾅ
                + ',ISNULL(DI.TransKanaName, '''') AS TransKanaName '   //ｶﾅ振込先名
// <175> MOD-STR
//              + ',ISNULL(DI.Acckbn, 0) AS Acckbn '                    //預金種目
                + ',ISNULL(DI.Acckbn, 1) AS Acckbn '                    //預金種目
// <175> MOD-END
                + ',ISNULL(DI.AccNo, '''') AS AccNo '                   //口座番号
                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan '          //手数料負担
                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '              //手数料計算区分
                + ',ISNULL(DI.TransKbn, 0) AS TransKbn '                //振込方法
// <170> MOD-STR
//              + ',ISNULL(DI.FBSet, 0) AS FBSet'                       //FBセット項目
                + ',ISNULL(DI.FBSet, 2) AS FBSet'                       //FBセット項目
// <170> MOD-END
                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo '               //EDI情報
                + ',ISNULL(DI.AiteNo1, '''') AS AiteNo1 '               //顧客ｺｰﾄﾞ1
                + ',ISNULL(DI.AiteNo2, '''') AS AiteNo2 '               //顧客ｺｰﾄﾞ2
                + ',ISNULL(DI.Site, 0) AS Site '                        //サイト
                + ',ISNULL(AI.Acckbn, 0) as YOKIN '                     //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA '                    //口座番号
                + ',ISNULL(AI.GCode, 0) as IraiAccNo '                  //依頼先口座ｺｰﾄﾞ
                + ',ISNULL(BI.SimpleName, '''') as BANK '               //銀行簡略名称
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + 'ON (DI.MasterKbn = PD.MasterKbn '
                + 'AND DI.PayNCode = PD.PayNCode '
                + 'AND DI.PayPtnNo = PD.PayPtnNo '
                + 'AND DI.Edaban = 1 '
                + 'AND DI.RDelKbn = 0 '     // <144> Add
                + 'AND PD.HouHou = DI.ShiharaiSyubetu) '
// <199> MOD-STR
//              + 'LEFT OUTER JOIN MTOKUI MT '
//              + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'INNER JOIN MTOKUI MT '
                + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) '
// <199> MOD-END
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI '
                + 'ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo BI '
                + 'ON (BI.NCode = AI.BankNCode)'
                + 'LEFT OUTER JOIN HAPBS PS '
                + 'ON (DI.BkBraNCode = PS.NCode)'
                + 'LEFT OUTER JOIN HAPBF PF '
                + 'ON (PS.BankNCode  = PF.NCode)'
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PD.HouHou  = 2 '
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.RDelKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(StrSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemFuriDate.Append;

// <142> 2007/02/20 H.Kawato Mod
//   			strHojCode := FieldByName ('GCode').AsString;
   			strHojCode := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
    	    		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);

			end;

// <142> 2007/02/20 H.Kawato Mod Start
{
			MemFuriDate.FieldByName('PayNCode'   ).AsFloat   := FieldByName('PayNCode'  ).AsFloat;
			MemFuriDate.FieldByName('HojCode'    ).AsString  := strHojCode;							// 補助ｺｰﾄﾞ
			MemFuriDate.FieldByName('BaseHojCode').AsString  := FieldByName('GCode'     ).AsString;	// 補助ｺｰﾄﾞ
			MemFuriDate.FieldByName('SName'      ).AsString  := FieldByName('NMK'       ).AsString; // 補助名称
			MemFuriDate.FieldByName('RenChar'    ).AsString  := FieldByName('Renso'     ).AsString;	// 連想
}
			MemFuriDate.FieldByName('PayNCode'   ).AsFloat   := FieldByName('PayNCode'  ).Value;
			MemFuriDate.FieldByName('HojCode'    ).AsString  := strHojCode;							// 補助ｺｰﾄﾞ
			MemFuriDate.FieldByName('BaseHojCode').AsString  := FieldByName('PayCode'   ).Value;	// 補助ｺｰﾄﾞ
			MemFuriDate.FieldByName('SName'      ).AsString  := FieldByName('PayName'   ).Value;	// 補助名称
			MemFuriDate.FieldByName('RenChar'    ).AsString  := FieldByName('Renso'     ).Value;	// 連想

            MemFuriDate.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

            strHojCode := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemFuriDate.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            MemFuriDate.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemFuriDate.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	MemFuriDate.FieldByName('PrjName'   ).AsString := 'その他';

            strHojCode := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemFuriDate.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            MemFuriDate.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemFuriDate.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                MemFuriDate.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			// 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		// 依頼口座
               (FieldByName('IraiAccNo').Value <> 0) then			// 依頼口座
			begin
				MemFuriDate.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
//				MemFuriDate.FieldByName('AccNCode').AsFloat := FieldByName('AccNCode').AsFloat;
				sBankName := FieldByName('BANK').AsString;	// 銀行名称
				case FieldByName('YOKIN').AsInteger of			// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				MemFuriDate.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				MemFuriDate.FieldByName('AccInfo').AsString := '';


			if FieldByName('BankCode').IsNull = False then			    // 銀行ｺｰﾄﾞ
            begin
  				MemFuriDate.FieldByName('BankCode'  ).AsInteger := FieldByName('BankCode'  ).AsInteger;
  				MemFuriDate.FieldByName('BankNCode' ).AsFloat := FieldByName('BankNCode' ).AsFloat;
            end;
			if FieldByName('BranchCode').IsNull = False then			// 支店ｺｰﾄﾞ
            begin
				MemFuriDate.FieldByName('BkBraCode').AsInteger   := FieldByName('BranchCode' ).AsInteger;
				MemFuriDate.FieldByName('BranchNCode').AsFloat   := FieldByName('BranchNCode').AsFloat;
            end;

			MemFuriDate.FieldByName('BankName'	   ).AsString  := FieldByName('BankName'	 ).AsString;	// 銀行名称
			MemFuriDate.FieldByName('BankKanaName' ).AsString  := FieldByName('BankKana'     ).AsString;	// ｶﾅ銀行名称
			MemFuriDate.FieldByName('BkBraName'	   ).AsString  := FieldByName('BranchName'	 ).AsString;	// 支店名称
			MemFuriDate.FieldByName('BraKanaName'  ).AsString  := FieldByName('BranchKana'   ).AsString;	// ｶﾅ支店名称
			MemFuriDate.FieldByName('TransKanaName').AsString  := FieldByName('TransKanaName').AsString;	// ｶﾅ振込先名
			// 預金種別
			if FieldByName('Acckbn').IsNull = True then
				MemFuriDate.FieldByName('AccData').AsInteger := 1
			else
				MemFuriDate.FieldByName('AccData').AsInteger := FieldByName('Acckbn').AsInteger;
																											// 口座番号
			MemFuriDate.FieldByName('AccNo'		   ).AsString  := fnGetEditedAccountNumber(FieldByName('AccNo').AsString);
		    MemFuriDate.FieldByName('ChargeData'   ).AsInteger := FieldByName('ChargeFutan'	 ).AsInteger;	// 手数料負担区分
			MemFuriDate.FieldByName('ChargeKbnData').AsInteger := FieldByName('ChargeKbn'	 ).AsInteger;	// 手数料計算区分
			MemFuriDate.FieldByName('TransKbnData' ).AsInteger := FieldByName('TransKbn'	 ).AsInteger;	// 振込方法
			MemFuriDate.FieldByName('FBSetData'    ).AsInteger := FieldByName('FBSet'		 ).AsInteger;	// FB区分
			MemFuriDate.FieldByName('EDIInfo'      ).AsString  := FieldByName('EdiInfo'		 ).AsString;	// EDI情報
			MemFuriDate.FieldByName('AiteNo1'      ).AsString  := FieldByName('AiteNo1'		 ).AsString;	// 顧客ｺｰﾄﾞ1
			MemFuriDate.FieldByName('AiteNo2'      ).AsString  := FieldByName('AiteNo2'		 ).AsString;	// 顧客ｺｰﾄﾞ2
			MemFuriDate.FieldByName('Site'         ).AsInteger := FieldByName('Site'		 ).AsInteger;	// サイト

			MemFuriDate.Post;
			next;
		end;
	end;
	MemFuriDate.First;

	DSFuriDate.DataSet := MemFuriDate;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_DATETRAN,MemFuriDate);
end;

//************************************************************************
//*		Component		:	GridFurikomi ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(振込情報/期日指定振込情報)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridFurikomiBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	cMem		: TdxMemData;
	iRet		: Integer;
	iAcc		: Integer;
	iBank,iBra	: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sName,sKana	: String;
	sAccNo		: String;
	sBank,sBra	: String;
	sNo			: String;
	sFieldName	: String;
	bFlg		: Boolean;

    exBank,exBra    : Extended;

    iNo         : Integer;  // <128> Add
    iAutoKbn    : Integer;  // <130> Add

begin
	bFlg := False;
// <128> 2006/06/29 H.Kawato Mod
//	if NewColumn in [0,1,2,4,13,16,18,20,22] then
// <142> 2007/02/20 H.Kawato Mod Start
{
	if NewColumn in [0,1,2,4,7,8,9,10,13,16,18,20,22] then                      // 銀行名称、カナ銀行名称、支店名称、カナ支店名称を追加
	begin
       	CanChange :=  False;
		exit;
	end;
}
    // プロジェクトサブ別支払採用あり
    if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
    begin
	    if NewColumn in [0,1,2,3,4,5,6,8,11,12,13,14,17,20,22,24,26] then
        begin
           	CanChange :=  False;
        	exit;
        end;
    end
    // プロジェクト別支払採用あり
    else if (m_iProAdoptKbn = 1) then
    begin
	    if NewColumn in [0,1,2,3,4,6,9,10,11,12,15,18,20,22,24] then
        begin
           	CanChange :=  False;
        	exit;
        end;
    end
    // プロジェクト別支払採用なし
    else
    begin
	    if NewColumn in [0,1,2,4,7,8,9,10,13,16,18,20,22] then
        begin
           	CanChange :=  False;
        	exit;
        end;
    end;
// <142> 2007/02/20 H.Kawato Mod End

// <128> 2006/06/29 H.Kawato Add Start
    if (TdxDBGrid(Sender).Name = GridFurikomi.Name) then                        // 振込情報の場合、口座自動引落区分と引落口座コードを追加
    begin
// <142> 2007/02/20 H.Kawato Mod Start
{
    	if (NewColumn = 27) or
           ((TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0) and (NewColumn = 28)) then
    	begin
           	CanChange :=  False;
    		exit;
    	end;
}
        // プロジェクトサブ別支払採用あり
        if  (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
    	    if (NewColumn = 31) or
               ((TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0) and (NewColumn = 32)) then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
    	    if (NewColumn = 29) or
               ((TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0) and (NewColumn = 30)) then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
    	    if (NewColumn = 27) or
               ((TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger = 0) and (NewColumn = 28)) then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;
// <142> 2007/02/20 H.Kawato Mod End
    end;
// <128> 2006/06/29 H.Kawato Add End

			// 振込情報
	if TdxDBGrid(Sender).Name = GridFurikomi.Name then
		cMem := MemFuri
	else	// 期日指定振込情報
		cMem := MemFuriDate;

	if not(cMem.State in [dsEdit]) then
		exit;

	sAccNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString;	// 依頼口座
	sBank  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankCode' ).AsString;	// 銀行ｺｰﾄﾞ
	sBra   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraCode').AsString;	// 支店ｺｰﾄﾞ

// <142> 2007/02/20 H.Kawato Mod Start
{
	case Column of
		3:	// 依頼口座ﾁｪｯｸ
		begin
			bFlg := True;
		end;
		5:	// 銀行ｺｰﾄﾞ
		begin
			if m_LineInfo.sBankCD <> sBank then
			begin
                //支店情報ｸﾘｱ
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraCode').AsString      := '';
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat     := 0;
           		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString    := '';
	            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString    := '';

				if sBank = '' then
				begin
                    exBank:= 0;
					sName := '';
					sKana := '';
				end
				else
				begin
					iBank := StrToInt(sBank);				// 銀行ｺｰﾄﾞを数値型で取得
					// 銀行ｺｰﾄﾞの名称、ｶﾅ名称取得
					if fnGetBankCodeInfoFX(iBank,exBank,sName,sKana) = False then
					begin
                        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankNCode'  ).AsFloat   := exBank;
		        		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankName'    ).AsString := sName;	// 銀行名称
				        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankKanaName').AsString := sKana;	// ｶﾅ銀行名称
						CanChange := False;
						abort;
					end;
				end;
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankNCode'  ).AsFloat   := exBank;
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankName'    ).AsString := sName;	// 銀行名称
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankKanaName').AsString := sKana;	// ｶﾅ銀行名称
            end;
			bFlg := False;
		end;
		6: // 支店ｺｰﾄﾞ
		begin
			if m_LineInfo.sBraCD <> sBra then
			begin
				if (sBra = '') then
				begin
                    exBra := 0;
					sName := '';
					sKana := '';
				end
				else
				begin
                    if sBank <>'' then
//    					iBank := StrToInt(sBank)		// 銀行ｺｰﾄﾞを数値型で取得
                    else
                    begin
                        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;
		        		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
				        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称
                                                        // 銀行ｺｰﾄﾞ未入力時に支店ｺｰﾄﾞの入力は不可<100>
		    			CanChange := False;
			    		abort;
                    end;

					iBra  := StrToInt(sBra); 			// 支店ｺｰﾄﾞを数値型で取得
                    exBank :=TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankNCode').AsFloat;

   					// 支店ｺｰﾄﾞの名称、ｶﾅ名称取得
    				if fnGetBranchCodeInfoFX(exBank,iBra,exBra,sName,sKana) = False then
	    			begin
                        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;
		        		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
				        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称

		    			CanChange := False;
			    		abort;
				    end;
				end;
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称
            end;
			bFlg := False;
		end;
		8,10,11:	// ｶﾅ銀行名,ｶﾅ支店名,ｶﾅ振込先名称
		begin
			case Column of
				8:  sFieldName := 'BankKanaName';	// カナ銀行名
				10: sFieldName := 'BraKanaName';	// カナ支店名
				11: sFieldName := 'TransKanaName';	// カナ振込先名称
			end;
			sKana := TdxDBGrid(Sender).DataSource.DataSet.FieldByName(sFieldName).AsString;
			if sKana <> '' then
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName(sFieldName).AsString := fnExchangeCharacterKanaDesc(sKana);
		end;
		14:	// 口座番号
		begin
			sNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccNo').AsString;	// 口座番号
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccNo').AsString := fnGetEditedAccountNumber(sNo);
		end;
// <128> 2006/06/29 H.Kawato Add Start
		26:	// 口座自動引落区分
		begin
            if TdxDBGrid(Sender).Name = GridFurikomi.Name then
            begin
                iNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger;
                if (m_iHeikouData = 0) or (iNo = 0) then
                begin
                    TdxDBGrid(Sender).Columns [28].ReadOnly := True;
                    TdxDBGrid(Sender).Columns [28].TabStop  := False;
                end
                else
                begin
                    if (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger = 0) then
                        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger := 1;

                    TdxDBGrid(Sender).Columns [28].ReadOnly := False;
                    TdxDBGrid(Sender).Columns [28].TabStop  := True;
                end;
            end;
		end;
		28:	// 引落支払データ
		begin
            if TdxDBGrid(Sender).Name = GridFurikomi.Name then
            begin
                iNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger;
// <130> 2006/08/07 H.Kawato Mod
//                if (m_iHeikouData = 1) and ((iNo < 1) or (iNo > m_iHeikouCount)) then
                iAutoKbn := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger;
                if (m_iHeikouData = 1) and (iAutoKbn = 1) and ((iNo < 1) or (iNo > m_iHeikouCount)) then
// <130> 2006/08/07 H.Kawato Mod
                begin
                    TdxDBGrid (Screen.ActiveControl).FocusedColumn := 28;
                    abort;
                end;
            end;
		end;
// <128> 2006/06/29 H.Kawato Add end
	end;
}
    if  (TdxDBGrid(Sender).FocusedField = Fri_IraiAccCode.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_IraiAccCode.Field) then
    begin
		// 依頼口座ﾁｪｯｸ
		bFlg := True;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Fri_BankCode.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_BankCode.Field) then
    begin
		// 銀行ｺｰﾄﾞ
        if m_LineInfo.sBankCD <> sBank then
        begin
            //支店情報ｸﾘｱ
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraCode').AsString      := '';
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat     := 0;
        	TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString    := '';
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString    := '';

        	if sBank = '' then
        	begin
                exBank:= 0;
        		sName := '';
        		sKana := '';
        	end
        	else
        	begin
        		iBank := StrToInt(sBank);				// 銀行ｺｰﾄﾞを数値型で取得
        		// 銀行ｺｰﾄﾞの名称、ｶﾅ名称取得
        		if fnGetBankCodeInfoFX(iBank,exBank,sName,sKana) = False then
        		begin
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankNCode'  ).AsFloat   := exBank;
            		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankName'    ).AsString := sName;	// 銀行名称
        	        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankKanaName').AsString := sKana;	// ｶﾅ銀行名称
        			CanChange := False;
        			abort;
        		end;
        	end;
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankNCode'  ).AsFloat   := exBank;
        	TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankName'    ).AsString := sName;	// 銀行名称
        	TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankKanaName').AsString := sKana;	// ｶﾅ銀行名称
        end;
        bFlg := False;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Fri_BkBraCode.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_BkBraCode.Field) then
    begin
		// 支店ｺｰﾄﾞ
// <202> DEL-STR
//      if m_LineInfo.sBraCD <> sBra then
//      begin
// <202> DEL-END
        	if (sBra = '') then
        	begin
                exBra := 0;
        		sName := '';
        		sKana := '';
        	end
        	else
        	begin
                if sBank <>'' then
//      			iBank := StrToInt(sBank)		// 銀行ｺｰﾄﾞを数値型で取得
                else
                begin
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;
            		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
        	        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称
                                                    // 銀行ｺｰﾄﾞ未入力時に支店ｺｰﾄﾞの入力は不可<100>
        			CanChange := False;
            		abort;
                end;

        		iBra  := StrToInt(sBra); 			// 支店ｺｰﾄﾞを数値型で取得
                exBank :=TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankNCode').AsFloat;
                exBra := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat;       // <SCA> ADD
        		// 支店ｺｰﾄﾞの名称、ｶﾅ名称取得
        		if fnGetBranchCodeInfoFX(exBank,iBra,exBra,sName,sKana) = False then
        		begin
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;
            		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
        	        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称

        			CanChange := False;
            		abort;
        	    end;
        	end;
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;
        	TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
        	TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称
// <202> DEL    end;
        bFlg := False;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Fri_BankKanaName.Field) or
        (TdxDBGrid(Sender).FocusedField = Fri_BankName.Field) or
        (TdxDBGrid(Sender).FocusedField = Fri_BankKanaName.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_BankKanaName.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_BankName.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_BankKanaName.Field) then
    begin
        // ｶﾅ銀行名,ｶﾅ支店名,ｶﾅ振込先名称
        if  (TdxDBGrid(Sender).FocusedField = Fri_BankKanaName.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_BankKanaName.Field) then
            sFieldName := 'BankKanaName'    // カナ銀行名
        else
        if  (TdxDBGrid(Sender).FocusedField = Fri_BankName.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_BankName.Field) then
            sFieldName := 'BraKanaName'     // カナ支店名
        else
        if  (TdxDBGrid(Sender).FocusedField = Fri_BankKanaName.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_BankKanaName.Field) then
            sFieldName := 'TransKanaName';	// カナ振込先名称

        sKana := TdxDBGrid(Sender).DataSource.DataSet.FieldByName(sFieldName).AsString;
        if sKana <> '' then
        	TdxDBGrid(Sender).DataSource.DataSet.FieldByName(sFieldName).AsString := fnExchangeCharacterKanaDesc(sKana);
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Fri_TransKanaName.Field) or
        (TdxDBGrid(Sender).FocusedField = KFri_TransKanaName.Field) then
    begin
		// 口座番号
		sNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccNo').AsString;	// 口座番号
		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccNo').AsString := fnGetEditedAccountNumber(sNo);
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Fri_AccAutoKbn.Field) then
    begin
		// 口座自動引落区分
        iNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger;
        if (m_iHeikouData = 0) or (iNo = 0) then
        begin
// <185> Del-start
{
// <163> Add Start
            if (m_iHeikouData = 0) and
               (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger = 0) and
               (Trim(TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbnName').AsString) <> 'しない') then
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger := 1;
// <163> Add End
}
// <185> Del-end
            Fri_AccAutoData.ReadOnly := True;
            Fri_AccAutoData.TabStop  := False;
        end
        else
        begin
//            if (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger = 0) then		// <185> Del
//                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger := 1;			// <185> Del

            Fri_AccAutoData.ReadOnly := False;
            Fri_AccAutoData.TabStop  := True;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Fri_AccAutoKbn.Field) then
    begin
		// 引落支払データ
        iNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData').AsInteger;
        iAutoKbn := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger;
        // <185> Mod start 「0」の入力もOK
        //if (m_iHeikouData = 1) and (iAutoKbn = 1) and ((iNo < 1) or (iNo > m_iHeikouCount)) then
        if (m_iHeikouData = 1) and (iAutoKbn = 1) and (iNo > m_iHeikouCount) then
        // <185> Mod end
        begin
            TdxDBGrid (Screen.ActiveControl).FocusedField := Fri_AccAutoData.Field;
            abort;
        end;
    end;
// <142> 2007/02/20 H.Kawato Mod End

	if sAccNo = '' then
		sName := ''
	else
	begin
		iAcc := StrToInt(sAccNo);
		// 依頼口座情報取得
		if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
		begin
			CanChange := False;
			abort;
		end;
		// ﾚｺｰﾄﾞが存在しない時
		if iRet = 0 then
		begin
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
			CanChange := False;
			abort;
		end;
		// 依頼口座ｺｰﾄﾞ、又は全銀ｺｰﾄﾞが変更があった時
		if (m_LineInfo.sIraiAccNo <> sAccNo) or
	   	   (m_LineInfo.sBankCD <> sBank) or (m_LineInfo.sBraCD <> sBra) then
			fnSetCalcKbn(Sender,iBankCD,iBranchCD);	// 手数料計算区分の自動ｾｯﾄ

		m_LineInfo.sIraiAccNo := sAccNo;
		m_LineInfo.sBankCD    := sBank;
		m_LineInfo.sBraCD     := sBra;
	end;

	if bFlg = True then
		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座


end;

//**********************************************************************
//*		Proccess	:	銀行ｶﾅ名称編集処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/28
//*		Parameter	:	strDescription	:	銀行ｶﾅ名称
//*		Return		:	編集後の銀行ｶﾅ名称
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnExchangeCharacterKanaDesc(strDescription: String): String;
var
	nPosition	   : Integer;
	chExchange	   : Char;
	strExchangeChar: String;

begin
	strExchangeChar	:= '';

	for	nPosition := 1 to StrLen (PChar (strDescription)) do
	begin
		chExchange	:= strDescription [nPosition];

		case (chExchange) of
			Char (VK_BACK),'0'..'9','A'..'Z','ｱ'..'ﾝ','ｦ',' ','ﾞ','ﾟ','｢','｣','\','/',',','.','-','(',')' :
					begin
						strExchangeChar	:= strExchangeChar + chExchange;
					end;
			'ｧ':		strExchangeChar	:= strExchangeChar + 'ｱ';
			'ｨ':		strExchangeChar	:= strExchangeChar + 'ｲ';
			'ｩ':		strExchangeChar	:= strExchangeChar + 'ｳ';
			'ｪ':		strExchangeChar	:= strExchangeChar + 'ｴ';
			'ｫ':		strExchangeChar	:= strExchangeChar + 'ｵ';
			'ｬ':		strExchangeChar	:= strExchangeChar + 'ﾔ';
			'ｭ':		strExchangeChar	:= strExchangeChar + 'ﾕ';
			'ｮ':		strExchangeChar	:= strExchangeChar + 'ﾖ';
			'ｯ':		strExchangeChar	:= strExchangeChar + 'ﾂ';
			'{':		strExchangeChar	:= strExchangeChar + '(';
			'[':		strExchangeChar	:= strExchangeChar + '(';
			'}':		strExchangeChar	:= strExchangeChar + ')';
			']':		strExchangeChar	:= strExchangeChar + ')';
			'ｰ':		strExchangeChar	:= strExchangeChar + '-';
			'a'..'z':	strExchangeChar	:= strExchangeChar + Chr (Ord (chExchange) - 32);
		end;
	end;

	Result	:= strExchangeChar;
end;

//**********************************************************************
//*		Proccess	:	銀行ｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/28
//*		Parameter	:	BC			:	銀行ｺｰﾄﾞ
//*						BankName	:	銀行名称
//*						BankKana	:	銀行ｶﾅ名称
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetBankCodeInfo(BC: Integer; var BankName,BankKana: String):Boolean;
var
	CmnQe	: TMQuery;
begin
	Result   := True;
	BankName := '';
	BankKana := '';

	CmnQe := TMQuery.Create (Self);												// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBCommon, CmnQe);							// DBとMQueryの接続

		with (CmnQe) do
		begin
			// 銀行ｶﾅ名称
			Close();
			SQL.Clear();
			SQL.Add('SELECT * FROM CMN_BANK WHERE BankCD = :BC');
			ParamByName('BC').AsInteger	:= BC;
			if (not Open ()) then
			begin
				fnErrorMessageDsp(CmnQe);
				Result := False;
				Exit;
			end;

			if EOF <> True then
			begin
				BankName := FieldByName ('BankName').AsString;
				BankKana := fnExchangeCharacterKanaDesc(FieldByName ('KanaBankName').AsString);
			end;
		end;

	finally
		CmnQe.Close;
		CmnQe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	支店ｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/28
//*		Parameter	:	BC			:	銀行ｺｰﾄﾞ
//*						BranchCD	:	支店ｺｰﾄﾞ
//*						BranchName	:	支店名称
//*						BranchKana	:	支店ｶﾅ名称
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetBranchCodeInfo(BC,BranchCD: Integer; var BranchName,BranchKana: String):Boolean;
var
	CmnQe	: TMQuery;
begin
	Result     := True;
	BranchName := '';
	BranchKana := '';

	CmnQe := TMQuery.Create (Self);												// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBCommon, CmnQe);							// DBとMQueryの接続

		with (CmnQe) do
		begin
			// 支店ｶﾅ名称
			Close();
			SQL.Clear();
			SQL.Add('SELECT * FROM CMN_BANK_OFFICE WHERE BankCD = :nBankCode AND BankOfficeCD = :nBranchCode');
			ParamByName ('nBankCode'  ).AsInteger := BC;
			ParamByName ('nBranchCode').AsInteger := BranchCD;
			if (not Open ()) then
			begin
				fnErrorMessageDsp(CmnQe);
				Exit;
			end;

			if EOF <> True then
			begin
				BranchName := FieldByName ('BankOffice').AsString;
				BranchKana := fnExchangeCharacterKanaDesc(FieldByName ('KanaBankOffice').AsString);
			end;
		end;

	finally
		CmnQe.Close;
		CmnQe.Free;
	end;

end;

//**********************************************************************
//*		Proccess	:	銀行依頼ｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/28
//*		Parameter	:	AC			:	銀行依頼ｺｰﾄﾞ
//*						iRet		:	ﾚｺｰﾄﾞの有無
//*						BankCD		:	銀行ｺｰﾄﾞ
//*						BranchCD	:	支店ｺｰﾄﾞ
//*						Dsp			:	表示内容
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetAccCodeInfo(AC: Integer; var iRet,BankCD,BranchCD: Integer; var Dsp: String): Boolean;
var
	Qe		: TMQuery;
	sYokin	: String;
begin
	Result := True;
	iRet   := 0;
	Dsp	   := '';

    m_sLayoutInfo := '';                    // レイアウト情報 <196> ADD

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);							// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();

    		SQL.Add   ('SELECT AI.AccKbn, AI.AccNo, BI.SimpleName, BI.AllBkCode, BI.AllBraCode, ');
	    	SQL.Add   ('       BI.BankName, BI.BkBraName, BI.BankKanaName, BI.BraKanaName ');
	    	SQL.Add   ('      ,AI.LayoutInfo ');    // レイアウト情報 <196> ADD
    		SQL.Add   ('FROM BankInfo BI ');
	    	SQL.Add   ('Inner Join AccInfo Ai On ');
		    SQL.Add   ('AI.BankNCode = BI.NCode  ');
            SQL.Add   ('Left outer join HojyoMA HM On ');
	    	SQL.Add   ('HM.BankNCode = BI.NCode and HM.RDelKbn = 0 ');
	    	SQL.Add   ('and HM.MasterKbn = BI.MasterKbn '); // <149> Add
            SQL.Add   ('Where BI.MasterKbn = :nMasterDivision And BI.RDelKbn = 0 ');
            SQL.Add   (' And AI.GCode = :nAccountCode ');


			ParamByName ('nMasterDivision').AsInteger := MASTER_BANK;
			ParamByName ('nAccountCode').AsInteger := AC;


			if (not Open ()) then
			begin
				fnErrorMessageDsp(Qe);
				Result := False;
				Exit;
			end;

			if EOF <> True then
			begin
				iRet 	 := 1;
				BankCD   := FieldByName('AllBkCode' ).AsInteger;		// 全銀協銀行ｺｰﾄﾞ
				BranchCD := FieldByName('AllBraCode').AsInteger;		// 全銀協支店ｺｰﾄﾞ

				// 預金種別
				case FieldByName('AccKbn').AsInteger of
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				Dsp := FieldByName('SimpleName').AsString+'／'+sYokin+'／'+fnGetEditedAccountNumber(FieldByName('AccNo').AsString);

                m_sLayoutInfo := FieldByName('LayoutInfo').AsString;    // レイアウト情報 <196> ADD
			end;
		end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;
//**********************************************************************
//*		Proccess	:	口座番号編集処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/28
//*		Parameter	:	strAccountNo	:	口座番号
//*		Return		:	編集後の口座番号
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetEditedAccountNumber(strAccountNo: String): String;
var
	nAccountNo	: Int64;
begin
	if (Trim (strAccountNo) = '') then
	begin
		Result := '';
		Exit;
	end;

	nAccountNo := StrToInt64(Trim(strAccountNo));								// 口座番号

	if (nAccountNo = 0) then
	begin
		Result := '';
		Exit;
	end;

// <166> MOD-STR
//	if (nAccountNo > 9999999) then												// 8桁
//		strAccountNo := IntToStr (nAccountNo)
    if (Length(Trim(strAccountNo)) > 7) then                                    // 8桁
		strAccountNo := strAccountNo
// <166> MOD-END
	else																		// 8桁未満(7桁表示)
		strAccountNo := Format('%.7d', [nAccountNo]);

	Result := strAccountNo;
end;

//**********************************************************************
//*		Proccess	:	手数料計算区分変更処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/28
//*		Parameter	:	BankCD		:	銀行ｺｰﾄﾞ
//*						BranchCD	:	支店ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetCalcKbn(Sender: TObject; BankCD,BranchCD: Integer);
var
	iBankCode	: Integer;
	iBranchCode	: Integer;
	nComCalc	  : Integer;
begin
	nComCalc := 0;

	iBankCode   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankCode' ).AsInteger;	// 銀行ｺｰﾄﾞ
	iBranchCode := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraCode').AsInteger;	// 支店ｺｰﾄﾞ

	if (BankCD = iBankCode) then			// 同銀行
	begin
		nComCalc := nComCalc + 1;

		if (BranchCD = iBranchCode) then	// 同支店
			nComCalc := nComCalc + 1;
	end;

	TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger := nComCalc;
end;

//**********************************************************************
//*		Proccess	:	入力された内容チェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGridCheckFurikomi();
var
	cMem		: TdxMemData;
	cGrid		: TdxDBGrid;
	iRet		: Integer;
	iAcc		: Integer;
	iBank,iBra	: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sName,sKana	: String;
	sAccNo		: String;
	sBank,sBra	: String;
	sNo			: String;
    iNo         : Integer;  // <128> Add
    iAutoKbn    : Integer;  // <130> 2006/08/07 H.Kawato Add

	exBank,exBra	: Extended;
begin
    cGrid   :=  nil;
    cMem    :=  nil;

    iNo     :=  0;          // <130> 2006/08/07 H.Kawato Add

	case  Tab.Items.Selected of
		TAB_TRANSFER:	    // 振込情報
		begin
			cMem  := MemFuri;
			cGrid := GridFurikomi;
		end;
		TAB_DATETRAN:	    // 期日指定振込情報
		begin
			cMem  := MemFuriDate;
			cGrid := GridFuriDate;
		end;
//<GA001>ST
		TAB_TRANSFER_GD:	    // 電信送金
		begin
			cMem  := MemFuri_GD;
			cGrid := GridFurikomiGD;
		end;
		TAB_TRANSFER_GT:	    // 為替手形
		begin
			cMem  := MemFuri_GT;
			cGrid := GridFurikomiGT;
		end;
		TAB_TRANSFER_GK:	    // 送金小切手
		begin
			cMem  := MemFuri_GK;
			cGrid := GridFurikomiGK;
		end;
//<GA001>ED
	end;

	if not(cMem.State in [dsEdit]) then
		exit;

	sAccNo := cGrid.DataSource.DataSet.FieldByName('IraiAccNo').AsString;	// 依頼口座
	sBank  := cGrid.DataSource.DataSet.FieldByName('BankCode' ).AsString;	// 銀行ｺｰﾄﾞ
	sBra   := cGrid.DataSource.DataSet.FieldByName('BkBraCode').AsString;	// 支店ｺｰﾄﾞ
	sNo	   := cGrid.DataSource.DataSet.FieldByName('AccNo'    ).AsString;	// 口座番号
    if cGrid.Name = GridFurikomi.Name then                                  // <130>  Add
        iNo    := cGrid.DataSource.DataSet.FieldByName('AccAutoData').AsInteger;
                                                                            // 口座自動引落区分 <128>
	if sAccNo = '' then
    begin
		sName := '';
        cGrid.DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
    end
	else
	begin
		iAcc := StrToInt(sAccNo);
		// 依頼口座情報取得
		if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
		begin
			abort;
		end;
		// ﾚｺｰﾄﾞが存在しない時
		if iRet = 0 then
		begin
			cGrid.DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
			abort;
		end;
		cGrid.DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
	end;

//<GA001>ST
    if (cGrid.Name = GridFurikomiGD.Name) or
       (cGrid.Name = GridFurikomiGK.Name) then
    begin
    	sAccNo := cGrid.DataSource.DataSet.FieldByName('IraiFeeAccNo').AsString;	// 依頼口座

    	if sAccNo = '' then
        begin
    		sName := '';
            cGrid.DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;	// 銀行/種別/口座
        end
    	else
    	begin
    		iAcc := StrToInt(sAccNo);
    		// 依頼口座情報取得
    		if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
    		begin
    			abort;
    		end;
    		// ﾚｺｰﾄﾞが存在しない時
    		if iRet = 0 then
    		begin
    			cGrid.DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;	// 銀行/種別/口座
    			abort;
    		end;
    		cGrid.DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;	// 銀行/種別/口座
    	end;
        Exit;
    end;
//<GA001>ED

// <122> 2006/04/25 H.Kawato Mod
//	if m_LineInfo.sBankCD <> sBank then
	if (m_LineInfo.sBankCD <> sBank) or (m_ProgRendoFlg = True) then
	begin
		if sBank = '' then
		begin
            exBank := 0;
			sName := '';
			sKana := '';
		end
		else
		begin
			iBank := StrToInt(sBank);				// 銀行ｺｰﾄﾞを数値型で取得
			// 銀行ｺｰﾄﾞの名称、ｶﾅ名称取得
			if fnGetBankCodeInfoFX(iBank,exBank,sName,sKana) = False then
				abort;
		end;

   		cGrid.DataSource.DataSet.FieldByName('BankNCode'   ).AsFloat  := exBank;// 銀行内部ｺｰﾄﾞ
		cGrid.DataSource.DataSet.FieldByName('BankName'    ).AsString := sName;	// 銀行名称
		cGrid.DataSource.DataSet.FieldByName('BankKanaName').AsString := sKana;	// ｶﾅ銀行名称
	end;

// <142> 2007/02/20 H.Kawato Mod
//// <122> 2006/04/25 H.Kawato Mod
////	if m_LineInfo.sBraCD <> sBra then
//	if (m_LineInfo.sBraCD <> sBra) or (m_ProgRendoFlg = True) then
//	if (m_LineInfo.sBankCD <> sBank) or (m_LineInfo.sBraCD <> sBra) or (m_ProgRendoFlg = True) then
	if (m_LineInfo.sBankCD <> sBank) or (m_LineInfo.sBraCD <> sBra) or (m_ProgRendoFlg = True) or
       ((sBra <> '') and (cGrid.DataSource.DataSet.FieldByName('BraKanaName').AsString = '')) then
// <142> 2007/02/20 H.Kawato Mod
	begin
		if sBra = '' then
		begin
            exBra := 0;
			sName := '';
			sKana := '';
		end
		else
		begin

            if sBank <>'' then
//        		iBank := StrToInt(sBank)		// 銀行ｺｰﾄﾞを数値型で取得
            else
            begin                               // 銀行ｺｰﾄﾞ未入力時に支店ｺｰﾄﾞの入力は不可<100>
		   		abort;
            end;

			iBra  := StrToInt(sBra); 			// 支店ｺｰﾄﾞを数値型で取得

            exBank:= cGrid.DataSource.DataSet.FieldByName('BankNCode' ).AsFloat;    // 銀行内部ｺｰﾄﾞ

            exBra := cGrid.DataSource.DataSet.FieldByName('BranchNCode').AsFloat;   // <SCA> ADD

			// 支店ｺｰﾄﾞの名称、ｶﾅ名称取得
			if fnGetBranchCodeInfoFX(exBank,iBra,exBra,sName,sKana) = False then
				abort;
		end;
   		cGrid.DataSource.DataSet.FieldByName('BranchNCode').AsFloat  := exBra;	// 支店内部ｺｰﾄﾞ
		cGrid.DataSource.DataSet.FieldByName('BkBraName'  ).AsString := sName;	// 支店名称
		cGrid.DataSource.DataSet.FieldByName('BraKanaName').AsString := sKana;	// ｶﾅ支店名称
	end;




	// 依頼口座ｺｰﾄﾞ、又は全銀ｺｰﾄﾞが変更があった時
	if (m_LineInfo.sIraiAccNo <> sAccNo) or
	   (m_LineInfo.sBankCD <> sBank) or (m_LineInfo.sBraCD <> sBra) then
    begin
		fnSetCalcKbn(cGrid,iBankCD,iBranchCD);	// 手数料計算区分の自動ｾｯﾄ
    end;
	if sNo <> '' then
		cGrid.DataSource.DataSet.FieldByName('AccNo').AsString := fnGetEditedAccountNumber(sNo);

	// ｶﾅ銀行名
	sKana := cGrid.DataSource.DataSet.FieldByName('BankKanaName').AsString;
	if sKana <> '' then
		cGrid.DataSource.DataSet.FieldByName('BankKanaName').AsString := fnExchangeCharacterKanaDesc(sKana);

	// ｶﾅ支店名
	sKana := cGrid.DataSource.DataSet.FieldByName('BraKanaName').AsString;
	if sKana <> '' then
		cGrid.DataSource.DataSet.FieldByName('BraKanaName').AsString := fnExchangeCharacterKanaDesc(sKana);

	// ｶﾅ振込先名称
	sKana := cGrid.DataSource.DataSet.FieldByName('TransKanaName').AsString;
	if sKana <> '' then
		cGrid.DataSource.DataSet.FieldByName('TransKanaName').AsString := fnExchangeCharacterKanaDesc(sKana);

// <128> 2006/06/29 H.Kawato Add Start
    if cGrid.Name = GridFurikomi.Name then
    begin
        iAutoKbn := cGrid.DataSource.DataSet.FieldByName('AutoKbn').AsInteger;

// <185> Del start 取引先登録(支払情報)に動きを合わせる（0:しない」の時は引落支払データを「0」にしない）
// 2006/08/11 H.Kawato Add   口座自動引落区分が「0:しない」の時は引落支払データに0をセット
//        if (iAutoKbn = 0) then
//            cGrid.DataSource.DataSet.FieldByName('AccAutoData').AsInteger := 0;
// 2006/08/11 H.Kawato Add
// <185> Del end

// <185> Del-start
{
// <163> Add Start
        if (m_iHeikouData = 0) and
           (cGrid.DataSource.DataSet.FieldByName('AccAutoData').AsInteger = 0) and
           (Trim(cGrid.DataSource.DataSet.FieldByName('AutoKbnName').AsString) <> 'しない') then
            cGrid.DataSource.DataSet.FieldByName('AccAutoData').AsInteger := 1;
// <163> Add End
}
// <185> Del-end
        // <185> Mod start 「0」の入力もOK
        //if (m_iHeikouData = 1) and (iAutoKbn = 1) and ((iNo < 1) or (iNo > m_iHeikouCount)) then    // <130> Mod
        if (m_iHeikouData = 1) and (iAutoKbn = 1) and (iNo > m_iHeikouCount) then
        // <185> Mod end
        begin
// <142> 2007/02/20 H.Kawato Mod
//            TdxDBGrid (Screen.ActiveControl).FocusedColumn := 28;
            TdxDBGrid (Screen.ActiveControl).FocusedField := Fri_AccAutoData.Field;
            abort;
        end;
    end;
// <128> 2006/06/29 H.Kawato Add End
end;

//************************************************************************
//*		Component		:	CmnGridFurikomi ( TdxDBGrid )
//*							振込情報/期日指定振込情報
//*		Event			:	OnKeyPress
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnGridFurikomiKeyPress(Sender: TObject; var Key: Char);
begin
// <142> 2007/02/20 H.Kawato Mod Start
//	case TdxDBGrid(Sender).FocusedColumn of
//		14,24,25:	// 口座番号(14)、顧客ｺｰﾄﾞ1(24)、顧客ｺｰﾄﾞ2(25)
        if  (TdxDBGrid(Sender).FocusedField = Fri_IraiAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = Fri_BankCode.Field) or
            (TdxDBGrid(Sender).FocusedField = Fri_BkBraCode.Field) or
            (TdxDBGrid(Sender).FocusedField = Fri_AccNo.Field) or
            (TdxDBGrid(Sender).FocusedField = Fri_AiteNo1.Field) or
            (TdxDBGrid(Sender).FocusedField = Fri_AiteNo2.Field) or
            (TdxDBGrid(Sender).FocusedField = Fri_AccAutoData.Field) or
//<GA001>ST
            (TdxDBGrid(Sender).FocusedField = FriGD_IraiAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = FriGT_IraiAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = FriGK_IraiAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = FriGD_IraiFeeAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = FriGK_IraiFeeAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = FriGK_SendNo.Field) or
            (TdxDBGrid(Sender).FocusedField = FriGD_SendNo.Field) or

//<GA001>ED
            (TdxDBGrid(Sender).FocusedField = KFri_IraiAccCode.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_BankCode.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_BkBraCode.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_AccNo.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_AiteNo1.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_AiteNo2.Field) or
            (TdxDBGrid(Sender).FocusedField = KFri_Site.Field) then
// <142> 2007/02/20 H.Kawato Mod End
		begin
			if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
			begin                          // #8=BackSpace   #27=Esc  #9=Tab
				Beep ();
				Abort;
			end;
		end;
//    end;          // <142> Del

// <142> 2007/02/20 H.Kawato Add Start
	if	(GridFurikomi.FocusedField = Fri_TransKanaName.Field) or    // ｶﾅ振込先名称(振込支払)
        (GridFurikomi.FocusedField = Fri_EDIInfo.Field) or          // EDI情報(振込支払)
//<GA001>ST
        (GridFurikomiGD.FocusedField = FriGD_EDIInfo.Field) or      // 取引先照合番号
        (GridFurikomiGD.FocusedField = FriGD_SendPos.Field) or      // 送金目的
        (GridFurikomiGD.FocusedField = FriGD_SendLNo.Field) or      // 送金許可
        (GridFurikomiGK.FocusedField = FriGK_SendPos.Field) or      // 送金目的
        (GridFurikomiGK.FocusedField = FriGK_SendLNo.Field) or      // 送金許可
//<GA001>ED
        (GridFuriDate.FocusedField = KFri_TransKanaName.Field) or   // ｶﾅ振込先名称(期日振込支払)
        (GridFuriDate.FocusedField = KFri_EDIInfo.Field) then       // EDI情報(期日振込支払)
	begin
		case (Key) of
			Char (VK_BACK),
			Char (VK_ESCAPE),
			Char (VK_RETURN),'0'..'9','A'..'Z','ｱ'..'ﾝ','ｦ',' ','ﾞ','ﾟ','｢','｣','\','/',',','.','-','(',')' :
				begin
				end;
			'ｧ':		Key	:= 'ｱ';
			'ｨ':		Key	:= 'ｲ';
			'ｩ':		Key	:= 'ｳ';
			'ｪ':		Key	:= 'ｴ';
			'ｫ':		Key	:= 'ｵ';
			'ｬ':		Key	:= 'ﾔ';
			'ｭ':		Key	:= 'ﾕ';
			'ｮ':		Key	:= 'ﾖ';
			'ｯ':		Key	:= 'ﾂ';
			'{':		Key	:= '(';
			'[':		Key	:= '(';
			'}':		Key	:= ')';
			']':		Key	:= ')';
			'ｰ':		Key	:= '-';
			'a'..'z':	Key	:= Chr (Ord (Key) - 32);
			else		Abort ();
		end;
	end;
// <142> 2007/02/20 H.Kawato Add End
end;

//************************************************************************
//*		Component		:	MemFriXxx ( TdxMemData )
//*							振込情報/期日指定振込情報/手形情報の書き込み
//*		Event			:	OnBeforePost
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnMemBeforePost(DataSet: TDataSet);
var
// <122> 2006/04/25 H.Kawato Add St
    iRenInitRet     : Integer;
    ExNCode         : Extended;
    sCode           : String;
    iIraiAccNo      : Integer;
    iTegYusouKbn    : Integer;
    iTegYusouFutan  : Integer;
	cMem            : TdxMemData;
	cGrid		    : TdxDBGrid;
    iSite           : Integer;
    iTegBunkatuMax  : Integer;
// <122> 2006/04/25 H.Kawato Add Ed
    iPayPtnNo       : Integer;  // <142> Add
    bRendoInit      : Boolean;  // <173> ADD
// <196> ADD-STR
    iTegERKbn       : Integer;
    iTegChargeFutan : Integer;
    iTegChargeKbn   : Integer;  // <203> ADD
// <196> ADD-END

// <167> ADD-STR

    iSyoriKbn       : Integer;
    function prvPayProgRendoInit(PayNCode: Double; iSyoriKbn: Integer) :Integer;
    var
        ProgRendoParam  : TJNTPAYProgRendoParam;
    begin
        // 進捗連動 初期処理
        ProgRendoParam.pAppRecord    := Pointer(m_pRec);
        ProgRendoParam.iOptCd        := 54;             // オプションコード・債務処理       //<129> 2006/08/04 H.Kawato Add
        ProgRendoParam.iPrgCd        := 210100;         // プログラムコード・支払情報登録   //<129> 2006/08/04 H.Kawato Add
        ProgRendoParam.dPAYCode      := PayNCode;
        ProgRendoParam.iSateiChgKbn  := 0;              // 変更無し
        ProgRendoParam.iNayoseChgKbn := 0;              // 変更無し
        ProgRendoParam.iSyoriKbn     := iSyoriKbn;
        ProgRendoParam.iSystemCode   := 1;    	        // 債務管理	<163>

        Result := m_PayProgRendo.Init(ProgRendoParam);

        bRendoInit  := True;    // <173> ADD
    end;
//<GA001>ST
    function prvPayProgRendoInitG(PayNCode: Double; iSyoriKbn: Integer) :Integer;
    var
        ProgRendoParamG  : TJNTPAYProgRendoParamG;
    begin
        // 進捗連動 初期処理
        ProgRendoParamG.pAppRecord    := Pointer(m_pRec);
        ProgRendoParamG.dPAYCode      := PayNCode;
        ProgRendoParamG.iNayoseChgKbn := 0;              // 変更無し
        ProgRendoParamG.iSyoriKbn     := iSyoriKbn;      // 外貨債務管理　　12: 電信送金 14:為替手形 15:送金小切手 <GA002>

        Result := m_PayProgRendoG.Init(ProgRendoParamG);
        bRendoInit  := True;
    end;
//<GA001>ED


    function prvPayProgRendoExec2(InitRet: Integer; PayNCode: Double; iSyoriKbn: Integer) :Boolean;
    begin
        // 進捗連動 実行終了処理
        if InitRet = 1 then
            m_PayProgRendo.Exec2(iSyoriKbn);

        if (InitRet <> -99) then
            m_PayProgRendo.Term;

        m_ProgRendoFlg  := False;
        m_iSateiChgKbn  := 0;

        Result := True;
    end;


//<GA001>ST
    function prvPayProgRendoExec2G(InitRet: Integer; PayNCode: Double; iSyoriKbn: Integer) :Boolean;
    begin
        // 進捗連動 実行終了処理
        if InitRet = 1 then
            m_PayProgRendoG.Exec2(iSyoriKbn);

        if (InitRet <> -99) then
            m_PayProgRendoG.Term;

        m_ProgRendoGFlg  := False;

        Result := True;
    end;
//<GA001>ED

// <167> ADD-END
begin
	if (m_bChange) then
		Exit;

// <122> 2006/04/25 H.Kawato Add St
    cMem        :=  nil;
    cGrid       :=  nil;
    ExNCode     :=  0;
    iRenInitRet :=  -99;
    iPayPtnNo   := 1;   // <142> Add
    iSyoriKbn   := 0;   // <167> ADD
    bRendoInit  := False;   // <173> ADD
    m_ProgRendoFlg  := False;   // <195> ADD
    m_ProgRendoGFlg  := False;   // <GA001>


    case Tab.Items.Selected of
        TAB_TRANSFER:                       // 振込支払
        begin
            cMem  := MemFuri;
            cGrid := GridFurikomi;
        end;
        TAB_DATETRAN:                       // 期日指定振込
        begin
            cMem  := MemFuriDate;
            cGrid := GridFuriDate;
        end;

        TAB_DRAFT:                          // 手形支払
        begin
            cMem  := MemDraft;
            cGrid := GridDraft;
        end;
        TAB_CHECK:                          // 小切手支払
        begin
            cMem  := MemCheck;
            cGrid := GridCheck;
        end;
//<GA001>ST
        TAB_TRANSFER_GD:                    // 電信送金
        begin
            cMem  := MemFuri_GD;
            cGrid := GridFurikomiGD;
        end;
        TAB_TRANSFER_GT:                    // 為替手形
        begin
            cMem  := MemFuri_GT;
            cGrid := GridFurikomiGT;
        end;
        TAB_TRANSFER_GK:                    // 送金小切手
        begin
            cMem  := MemFuri_GK;
            cGrid := GridFurikomiGK;
        end;
//<GA001>ED
    end;

    case Tab.Items.Selected of
        TAB_TRANSFER,TAB_DATETRAN:          // 振込支払・期日指定支払
        begin
            fnGridCheckFurikomi();
            iIraiAccNo      := cMem.FieldByName('IraiAccNo'    ).AsInteger;
            iPayPtnNo       := cMem.FieldByName('PayPtnNo'     ).AsInteger; // <142> Add
        end;
        TAB_DRAFT,TAB_CHECK:                // 手形支払・小切手支払
        begin
            iIraiAccNo      := cMem.FieldByName('IraiAccNo'    ).AsInteger;
            iTegYusouKbn    := cMem.FieldByName('YusoData'     ).AsInteger;
            iTegYusouFutan  := cMem.FieldByName('YusoFutanData').AsInteger;
            iPayPtnNo       := cMem.FieldByName('PayPtnNo'     ).AsInteger; // <142> Add
// <196> ADD-STR
            iTegERKbn       := 0;
            iTegChargeFutan := 0;
            iTegChargeKbn   := 0;       //<203>

            if (Tab.Items.Selected = TAB_DRAFT) then
            begin
                iTegERKbn   := cMem.FieldByName('ERKbnData'    ).AsInteger;
                iTegChargeFutan := cMem.FieldByName('ChargeFutan').AsInteger;
                iTegChargeKbn   := cMem.FieldByName('ChargeKbn').AsInteger;

            end;
// <196> ADD-END
        end;
//<GA001>ST
        TAB_TRANSFER_GD,TAB_TRANSFER_GT,TAB_TRANSFER_GK:       //電信送金・為替手形・送金小切手
        begin
            fnGridCheckFurikomi();
            iIraiAccNo      := cMem.FieldByName('IraiAccNo'    ).AsInteger;
            iPayPtnNo       := cMem.FieldByName('PayPtnNo'     ).AsInteger; // <142> Add
        end;
//<GA001>ED

    end;

    iSite           := 0;
    iTegBunkatuMax  := 0;
// <122> 2006/04/25 H.Kawato Add Ed

	// -----<159> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<159> Add-Ed-----

	with (DataSet) do
	begin
		if (State in [dsEdit]) then
		begin
            try         // <125>
    			m_cDataModule.BeginTran(m_cDBSelect);
    			case Tab.Items.Selected of
    				// 振込更新
    				TAB_TRANSFER:
    				begin
// <122> 2006/04/25 H.Kawato Mod St
{
    					fnGridCheckFurikomi();
    					if fnUpDatePayDetailInfoTransfer(FieldByName('BaseHojCode').AsString,MemFuri) = False then abort;
    					fnSetFuriLineData(GridFurikomi);
}
                        sCode       := MemFuri.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

                        if (cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  <> m_FuriInfoSave.IraiAccNo    ) or
                           (cGrid.DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger <> m_FuriInfoSave.ChargeData   ) or
                           (cGrid.DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger <> m_FuriInfoSave.ChargeKbnData) or
                           (cGrid.DataSource.DataSet.FieldByName('AutoKbnData'  ).AsInteger <> m_FuriInfoSave.AutoKbnData  ) or     // <128>
                           (cGrid.DataSource.DataSet.FieldByName('AccAutoData'  ).AsInteger <> m_FuriInfoSave.AccAutoData  ) or     // <128>
                           (cGrid.DataSource.DataSet.FieldByName('TransKbnData' ).AsInteger <> m_FuriInfoSave.TransKbnData ) then
                            m_ProgRendoFlg := True;

                        if (m_ProgRendoFlg = True) then
                        begin
                            ExNCode     := MemFuri.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInit(ExNCode);
// <167> ADD-STR
                        end
                        else
                        begin
                            ExNCode     := MemFuri.FieldByName('PayNCode').AsFloat;
                            iSyoriKbn   := 2;
                            iRenInitRet := prvPayProgRendoInit(ExNCode, iSyoriKbn);
// <167> ADD-END
                        end;
// <195> MOD-STR
//                      if (m_ProgRendoFlg = False) or
//                         (m_ProgRendoFlg = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
                        if (iRenInitRet in [0, 1]) then
// <195> MOD-END
                        begin
    					    if fnUpDatePayDetailInfoTransfer(FieldByName('BaseHojCode').AsString,MemFuri) = False then abort;
    					    fnSetFuriLineData(GridFurikomi);
                        end
// <131> 2006/08/09 H.Kawato Mod
//                        else if (m_ProgRendoFlg = True) and (iRenInitRet = 10) then
// <195> MOD-STR
//                      else if (m_ProgRendoFlg = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then
// <195> MOD-END
                        begin
// <139> 2006/08/11 H.Kawato Del Start
{
                            cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  := m_FuriInfoSave.IraiAccNo;
                            cGrid.DataSource.DataSet.FieldByName('BankCode'     ).AsString  := m_FuriInfoSave.BankCode;
                            cGrid.DataSource.DataSet.FieldByName('BkBraCode'    ).AsString  := m_FuriInfoSave.BkBraCode;
                            cGrid.DataSource.DataSet.FieldByName('BankKanaName' ).AsString  := m_FuriInfoSave.BankKanaName;
                            cGrid.DataSource.DataSet.FieldByName('TransKanaName').AsString  := m_FuriInfoSave.TransKanaName;
                            cGrid.DataSource.DataSet.FieldByName('AccData'      ).AsInteger := m_FuriInfoSave.AccData;
                            cGrid.DataSource.DataSet.FieldByName('AccNo'        ).AsString  := m_FuriInfoSave.AccNo;
                            cGrid.DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger := m_FuriInfoSave.ChargeData;
                            cGrid.DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger := m_FuriInfoSave.ChargeKbnData;
                            cGrid.DataSource.DataSet.FieldByName('TransKbnData' ).AsInteger := m_FuriInfoSave.TransKbnData;
                            cGrid.DataSource.DataSet.FieldByName('FBSetData'    ).AsInteger := m_FuriInfoSave.FBSetData;
                            cGrid.DataSource.DataSet.FieldByName('EDIInfo'      ).AsString  := m_FuriInfoSave.EDIInfo;
                            cGrid.DataSource.DataSet.FieldByName('AiteNo1'      ).AsString  := m_FuriInfoSave.AiteNo1;
                            cGrid.DataSource.DataSet.FieldByName('AiteNo2'      ).AsString  := m_FuriInfoSave.AiteNo2;
                            cGrid.DataSource.DataSet.FieldByName('AutoKbnData'  ).AsInteger := m_FuriInfoSave.AutoKbnData;  // <128> Add
                            cGrid.DataSource.DataSet.FieldByName('AccAutoData'  ).AsInteger := m_FuriInfoSave.AccAutoData;  // <128> Add
                            fnGridCheckFurikomi();
}
// <139> 2006/08/11 H.Kawato Del End
                            abort;      // <139> Add
                        end;
// <122> 2006/04/25 H.Kawato Mod Ed
				    end;
//<GA001>ST
    				TAB_TRANSFER_GD:
    				begin
                        sCode       := MemFuri_GD.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

                        if (cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  <> m_FuriInfoSave_GD.IraiAccNo    ) or
                           (cGrid.DataSource.DataSet.FieldByName('IraiFeeAccNo' ).AsString  <> m_FuriInfoSave_GD.IraiFeeAccNo ) or
                           (cGrid.DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger <> m_FuriInfoSave_GD.ChargeData   ) or
                           (cGrid.DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger <> m_FuriInfoSave_GD.ChargeKbnData) then
                            m_ProgRendoGFlg := True;

                        if (m_ProgRendoGFlg = True) then
                        begin
                            ExNCode     := MemFuri_GD.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInitG(ExNCode);
                        end
                        else
                        begin           //<GA002>ADD
                            iRenInitRet := 0;
//<GA002>ST
                            iSyoriKbn   := 12;
                            iRenInitRet := prvPayProgRendoInitG(ExNCode, iSyoriKbn);
                        end;
//<GA002>ED
                        if (iRenInitRet in [0, 1]) then //0⇒更新、終了 1:更新、進捗連動実行、終了
                        begin
    					    if fnUpDatePayDetailInfoTransfer_G(FieldByName('BaseHojCode').AsString,MemFuri_GD) = False then abort;
                        end
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then //進捗終了
                        begin
                            abort;
                        end;
				    end;
//<GA001>ED
//<GA001>ST
    				TAB_TRANSFER_GT:
    				begin
                        sCode       := MemFuri_GT.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

                        if (cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  <> m_FuriInfoSave_GT.IraiAccNo    ) then
                            m_ProgRendoGFlg := True;

                        if (m_ProgRendoGFlg = True) then
                        begin
                            ExNCode     := MemFuri_GT.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInitG(ExNCode);
                        end
                        else
                        begin           //<GA002>ADD
                            iRenInitRet := 0;
//<GA002>ST
                            iSyoriKbn   := 14;
                            iRenInitRet := prvPayProgRendoInitG(ExNCode, iSyoriKbn);
                        end;
//<GA002>ED

                        if (iRenInitRet in [0, 1]) then
                        begin
    					    if fnUpDatePayDetailInfoTransfer_G(FieldByName('BaseHojCode').AsString,MemFuri_GT) = False then abort;
                        end
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                        begin
                            abort;
                        end;
				    end;
//<GA001>ED
//<GA001>ST
    				TAB_TRANSFER_GK:
    				begin
                        sCode       := MemFuri_GK.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

                        if (cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  <> m_FuriInfoSave_GK.IraiAccNo    ) or
                           (cGrid.DataSource.DataSet.FieldByName('IraiFeeAccNo' ).AsString  <> m_FuriInfoSave_GK.IraiFeeAccNo ) then
                            m_ProgRendoGFlg := True;

                        if (m_ProgRendoGFlg = True) then
                        begin
                            ExNCode     := MemFuri_GK.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInitG(ExNCode);
                        end
                        else
                        begin           //<GA002>ADD
                            iRenInitRet := 0;
//<GA002>ST
                            iSyoriKbn   := 15;
                            iRenInitRet := prvPayProgRendoInitG(ExNCode, iSyoriKbn);
                        end;
//<GA002>ED

                        if (iRenInitRet in [0, 1]) then
                        begin
    					    if fnUpDatePayDetailInfoTransfer_G(FieldByName('BaseHojCode').AsString,MemFuri_GK) = False then abort;
                        end
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                        begin
                            abort;
                        end;
				    end;
//<GA001>ED

				    // 期日指定振込更新
				    TAB_DATETRAN:
                    begin
// <122> 2006/04/25 H.Kawato Mod St
{
					    fnGridCheckFurikomi();
					    if fnUpDatePayDetailInfoDateTran(FieldByName('BaseHojCode').AsString,MemFuriDate) = False then abort;
                        fnSetFuriLineData(GridFuriDate);
}
                        sCode       := MemFuriDate.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

                        if (cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  <> m_FuriInfoSave.IraiAccNo    ) or
                           (cGrid.DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger <> m_FuriInfoSave.ChargeData   ) or
                           (cGrid.DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger <> m_FuriInfoSave.ChargeKbnData) or
                           (cGrid.DataSource.DataSet.FieldByName('TransKbnData' ).AsInteger <> m_FuriInfoSave.TransKbnData ) then
                            m_ProgRendoFlg := True;

                        if (m_ProgRendoFlg = True) then
                        begin
                            ExNCode     := MemFuriDate.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInit(ExNCode);
// <167> ADD-STR
                        end
                        else
                        begin
                            ExNCode     := MemFuriDate.FieldByName('PayNCode').AsFloat;
                            iSyoriKbn   := 3;
                            iRenInitRet := prvPayProgRendoInit(ExNCode, iSyoriKbn);
// <167> ADD-END
                        end;

// <195> MOD-STR
//                      if (m_ProgRendoFlg = False) or
//                         (m_ProgRendoFlg = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
                        if (iRenInitRet in [0, 1]) then
// <195> MOD-END
                        begin
					        if fnUpDatePayDetailInfoDateTran(FieldByName('BaseHojCode').AsString,MemFuriDate) = False then abort;
					        fnSetFuriLineData(GridFuriDate);
                        end
// <131> 2006/08/09 H.Kawato Mod
//                        else if (m_ProgRendoFlg = True) and (iRenInitRet = 10) then
// <195> MOD-STR
//                      else if (m_ProgRendoFlg = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then
// <195> MOD-END
                        begin
// <139> 2006/08/11 H.Kawato Del Start
{
                            cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString  := m_FuriInfoSave.IraiAccNo;
                            cGrid.DataSource.DataSet.FieldByName('BankCode'     ).AsString  := m_FuriInfoSave.BankCode;
                            cGrid.DataSource.DataSet.FieldByName('BkBraCode'    ).AsString  := m_FuriInfoSave.BkBraCode;
                            cGrid.DataSource.DataSet.FieldByName('BankKanaName' ).AsString  := m_FuriInfoSave.BankKanaName;
                            cGrid.DataSource.DataSet.FieldByName('TransKanaName').AsString  := m_FuriInfoSave.TransKanaName;
                            cGrid.DataSource.DataSet.FieldByName('AccData'      ).AsInteger := m_FuriInfoSave.AccData;
                            cGrid.DataSource.DataSet.FieldByName('AccNo'        ).AsString  := m_FuriInfoSave.AccNo;
                            cGrid.DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger := m_FuriInfoSave.ChargeData;
                            cGrid.DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger := m_FuriInfoSave.ChargeKbnData;
                            cGrid.DataSource.DataSet.FieldByName('TransKbnData' ).AsInteger := m_FuriInfoSave.TransKbnData;
                            cGrid.DataSource.DataSet.FieldByName('FBSetData'    ).AsInteger := m_FuriInfoSave.FBSetData;
                            cGrid.DataSource.DataSet.FieldByName('EDIInfo'      ).AsString  := m_FuriInfoSave.EDIInfo;
                            cGrid.DataSource.DataSet.FieldByName('AiteNo1'      ).AsString  := m_FuriInfoSave.AiteNo1;
                            cGrid.DataSource.DataSet.FieldByName('AiteNo2'      ).AsString  := m_FuriInfoSave.AiteNo2;
                            cGrid.DataSource.DataSet.FieldByName('Site'         ).AsInteger := m_FuriInfoSave.Site;
                            fnGridCheckFurikomi();
}
// <139> 2006/08/11 H.Kawato Del End
                            abort;      // <139> Add
                        end;
// <122> 2006/04/25 H.Kawato Mod Ed
				    end;
                    // 手形更新
                    TAB_DRAFT:
                    begin
// <122> 2006/04/25 H.Kawato Mod St
//					    fnGridCheckDraft();
//                      if fnUpDatePayDetailInfoDraft(FieldByName('BaseHojCode').AsString,MemDraft) = False then abort;
                        sCode       := MemDraft.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

// <142> 2007/02/20 H.Kawato Mod
//                        m_ProgRendoFlg  := fnGetDraftData(sCode, 3, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan);
// <196> MOD-STR
//                      m_ProgRendoFlg  := fnGetDraftData(sCode, iPayPtnNo, 3, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan);

//<203>
//                        m_ProgRendoFlg  := fnGetDraftData(sCode, iPayPtnNo, 3, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan, iTegERKbn, iTegChargeFutan);
                        m_ProgRendoFlg  := fnGetDraftData(sCode, iPayPtnNo, 3, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan, iTegERKbn, iTegChargeFutan, iTegChargeKbn);
//<203>
// <196> MOD-END

                        if (m_ProgRendoFlg = True) then
                        begin
                            ExNCode     := MemDraft.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInit(ExNCode);
// <167> ADD-STR
                        end
                        else
                        begin
                            ExNCode     := MemDraft.FieldByName('PayNCode').AsFloat;
                            iSyoriKbn   := 4;
                            iRenInitRet := prvPayProgRendoInit(ExNCode, iSyoriKbn);
// <167> ADD-END
                        end;

// <195> MOD-STR
//                      if (m_ProgRendoFlg = False) or
//                         (m_ProgRendoFlg = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
                        if (iRenInitRet in [0, 1]) then
// <195> MOD-END
                        begin
                            fnGridCheckDraft();
                            if fnUpDatePayDetailInfoDraft(FieldByName('BaseHojCode').AsString,MemDraft) = False then abort;
                            // 詳細情報更新
                            if fnUpDatePayDetailSyousaiInfoDraft(FieldByName('BaseHojCode').AsString,MemDraft) = False then abort;
                        end
// <131> 2006/08/09 H.Kawato Mod
//                        else if (m_ProgRendoFlg = True) and (iRenInitRet = 10) then
// <195> MOD-STR
//                      else if (m_ProgRendoFlg = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then
// <195> MOD-END
                        begin
// <139> 2006/08/11 H.Kawato Del Start
{
                            if iIraiAccNo <> 0 then
                                cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString := IntToStr(iIraiAccNo)
                            else
                                cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString := '';

                            cGrid.DataSource.DataSet.FieldByName('YusoData'     ).AsInteger := iTegYusouKbn;
                            cGrid.DataSource.DataSet.FieldByName('YusoFutanData').AsInteger := iTegYusouFutan;
                            cGrid.DataSource.DataSet.FieldByName('Site'         ).AsInteger := iSite;
                            cGrid.DataSource.DataSet.FieldByName('Bunkatu'      ).AsInteger := iTegBunkatuMax;
                            fnGridCheckDraft();
}
// <139> 2006/08/11 H.Kawato Del End
                            abort;      // <139> Add
                        end;
// <122> 2006/04/25 H.Kawato Mod Ed
				    end;
                    // 小切手更新
                    TAB_CHECK:
                    begin
// <122> 2006/04/25 H.Kawato Mod St
//					    fnGridCheckDraft();
//                      if fnUpDatePayDetailInfoCheck(FieldByName('BaseHojCode').AsString,MemCheck) = False then abort;
                        sCode       := MemCheck.FieldByName('HojCode').AsString;

                        if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
                            sCode := Format('%.16d',[StrToInt64(Trim(sCode))]);

// <142> 2007/02/20 H.Kawato Mod
//                        m_ProgRendoFlg  := fnGetDraftData(sCode, 4, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan);
                        m_ProgRendoFlg  := fnGetDraftData(sCode, iPayPtnNo, 4, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan);
                        m_ProgRendoFlg  := fnGetDraftData(sCode, iPayPtnNo, 4, iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan);
                        if (m_ProgRendoFlg = True) then
                        begin
                            ExNCode     := MemCheck.FieldByName('PayNCode').AsFloat;
                            iRenInitRet := fnPayProgRendoInit(ExNCode);
// <195> ADD-STR
                        end
                        else
                        begin
                            ExNCode     := MemCheck.FieldByName('PayNCode').AsFloat;
                            iSyoriKbn   := 5;
                            iRenInitRet := prvPayProgRendoInit(ExNCode, iSyoriKbn);
// <195> ADD-END
                        end;

// <195> MOD-STR
//                      if (m_ProgRendoFlg = False) or
//                         (m_ProgRendoFlg = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
                        if (iRenInitRet in [0, 1]) then
// <195> MOD-END
                        begin
                            fnGridCheckDraft();
                            if fnUpDatePayDetailInfoCheck(FieldByName('BaseHojCode').AsString,MemCheck) = False then abort;
                        end
// <131> 2006/08/09 H.Kawato Mod
//                        else if (m_ProgRendoFlg = True) and (iRenInitRet = 10) then
// <195> MOD-STR
//                      else if (m_ProgRendoFlg = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                        else if ((iRenInitRet = 10) or (iRenInitRet = -1)) then
// <195> MOD-END
                        begin
// <139> 2006/08/11 H.Kawato Del Start
{
                            if iIraiAccNo <> 0 then
                                cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString := IntToStr(iIraiAccNo)
                            else
                                cGrid.DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString := '';

                            cGrid.DataSource.DataSet.FieldByName('YusoData'     ).AsInteger := iTegYusouKbn;
                            cGrid.DataSource.DataSet.FieldByName('YusoFutanData').AsInteger := iTegYusouFutan;
                            fnGridCheckDraft();
}
// <139> 2006/08/11 H.Kawato Del End
                            abort;      // <139> Add
                        end;
// <122> 2006/04/25 H.Kawato Mod Ed
		        	end;
                end;
                m_cDataModule.Commit(m_cDBSelect);									// ｺﾐｯﾄ(反映)

// <122> 2006/04/25 H.Kawato Add St
            finally     // <125>
//<GA001>ST
                if (Tab.Items.Selected = TAB_TRANSFER_GD) or
                   (Tab.Items.Selected = TAB_TRANSFER_GT) or
                   (Tab.Items.Selected = TAB_TRANSFER_GK) then
                begin
                    if (m_ProgRendoGFlg = True) then
                        fnPayProgRendoExecG(iRenInitRet, ExNCode);
                    if (m_ProgRendoFlg = False) and (iRenInitRet = 1) then
                        prvPayProgRendoExec2G(iRenInitRet, ExNCode, 0);
                    if (m_ProgRendoFlg = False) and (iRenInitRet <> 1) and bRendoInit then
                        m_PayProgRendoG.Term;
                end
                else
                begin
//<GA001>ED
                    if (m_ProgRendoFlg = True) then
                        fnPayProgRendoExec(iRenInitRet, ExNCode);
// <167> ADD-STR
                    if (m_ProgRendoFlg = False) and (iRenInitRet = 1) then
                        prvPayProgRendoExec2(iRenInitRet, ExNCode, iSyoriKbn);
// <167> ADD-END
// <173> ADD-STR
                    if (m_ProgRendoFlg = False) and (iRenInitRet <> 1) and bRendoInit then
                        m_PayProgRendo.Term;
                end;            //<GA001>ADD
// <173> ADD-END
            end;        // <125>
// <122> 2006/04/25 H.Kawato Add Ed


   		end;
	end;

	// -----<159> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<159> Add-Ed-----
end;

//**********************************************************************
//*		Proccess	:	支払詳細情報ﾏｽﾀ更新処理(振込)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/29
//*		Parameter	:	HC	:	補助ｺｰﾄﾞ
//*						Mem	:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailInfoTransfer(HC: String; Mem: TdxMemData): Boolean;
var
	iAccNo	: Integer;
//    iAutoKbn		: Integer;	// <163> Add
//    iAccAutoData	: Integer;	// <163> Add

begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
{
		SQL.Add('SELECT GCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND GCode = :HC AND ShiharaiSyubetu = :SS AND Edaban = 1');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('HC').AsString	:= HC;
		ParamByName('SS').AsInteger	:= PAYTYPE_TRANSFER;
}
		SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :NC AND ShiharaiSyubetu = :SS AND Edaban = 1');
        SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
        SQL.Add(' AND RDelKbn  = 0 ');      // <144> Add
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('NC').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('SS').AsInteger	:= PAYTYPE_TRANSFER;
   		ParamByName('PN').AsInteger := Mem.FieldByName('PayPtnNo').AsInteger;   // <142> Add

		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);    // ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();
{ <050>
			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu');
			SQL.Add(',Edaban,AccNCode,BankNCode,BkBraNCode,AccNo,AccKbn');
			SQL.Add(',TransKanaName,ChargeKbn');
			SQL.Add(',ChargeFutan,TransKbn,EdiInfo,FBSet,AiteNo1,AiteNo2)');
			SQL.Add('VALUES(:MasKbn,:NCode,:Syu,1');
}
			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu');
			SQL.Add(',Edaban,AccNCode,BkBraNCode,AccNo,AccKbn');
			SQL.Add(',TransKanaName,ChargeKbn');
			SQL.Add(',AccAutoKbn,AccAutoData');                 // <128> Add
// <142> 2007/02/20 H.Kawato Mod
//			SQL.Add(',ChargeFutan,TransKbn,EdiInfo,FBSet,AiteNo1,AiteNo2)');
			SQL.Add(',ChargeFutan,TransKbn,EdiInfo,FBSet,AiteNo1,AiteNo2,PayPtnNo');
			SQL.Add(',UpdTantoNCode)'); // <160>
			SQL.Add('VALUES(:MasKbn,:NCode,:Syu,1');


			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
{ <050>
			if Mem.FieldByName('BankCode').IsNull = True then	// 全銀協銀行ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:BankCD');
}

			if Mem.FieldByName('BkBraCode').IsNull = True then	// 全銀協支店ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:BraCD');

			if Mem.FieldByName('AccNo').AsString = '' then		// 口座番号
				SQL.Add(',Null')
			else
				SQL.Add(',:AccNo');

// <128> 2006/06/29 H.Kawato Mod Start
//			SQL.Add(',:AccKbn,:TranKana');
//			SQL.Add(',:ChaKbn,:ChaFutan,:TranKbn,:EDI,:FBSet');
			SQL.Add(',:AccKbn');
			SQL.Add(',:TranKana,:ChaKbn');
            SQL.Add(',:AutoKbn,:AutoData');
			SQL.Add(',:ChaFutan,:TranKbn,:EDI,:FBSet');
// <128> 2006/06/29 H.Kawato Mod End

			if Mem.FieldByName('AiteNo1').IsNull = True then	// 顧客ｺｰﾄﾞ1
				SQL.Add(',Null')
			else
				SQL.Add(',:Aite1');
			if Mem.FieldByName('AiteNo2').IsNull = True then	// 顧客ｺｰﾄﾞ2
				SQL.Add(',Null')
			else
				SQL.Add(',:Aite2');

            SQL.Add(',:PN');    // <142> Add
			SQL.Add(',:UpdTantoNCode'); // <160>
			SQL.Add(')');
		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE PayDetailInfo SET ');
			SQL.Add('AccNCode = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');

{ <050>
    		SQL.Add(',BankNCode = ');

			if Mem.FieldByName('BankCode').IsNull = True then	// 全銀協銀行ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':BankCD');
}

			SQL.Add(',BkBraNCode = ');
			if Mem.FieldByName('BkBraCode').IsNull = True then	// 全銀協支店ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':BraCD');
			SQL.Add(',AccNo = ');
			if Mem.FieldByName('AccNo').AsString = '' then	// 口座番号
				SQL.Add('Null')
			else
				SQL.Add(':AccNo');
			SQL.Add(',AccKbn = :AccKbn');
			SQL.Add(',TransKanaName = :TranKana,ChargeKbn = :ChaKbn,ChargeFutan = :ChaFutan');
			SQL.Add(',TransKbn = :TranKbn,EdiInfo = :EDI,FBSet = :FBSet');
			SQL.Add(',AccAutoKbn = :AutoKbn,AccAutoData = :AutoData');          // <128>
			SQL.Add(',AiteNo1 = ');
			if Mem.FieldByName('AiteNo1').IsNull = True then	// 顧客ｺｰﾄﾞ1
				SQL.Add('Null')
			else
				SQL.Add(':Aite1');
			SQL.Add(',AiteNo2 = ');
			if Mem.FieldByName('AiteNo2').IsNull = True then	// 顧客ｺｰﾄﾞ2
				SQL.Add('Null')
			else
				SQL.Add(':Aite2');
            SQL.Add(',UpdTantoNCode = :UpdTantoNCode '); // <160>

			SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
            SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
            SQL.Add(' AND RDelKbn = 0 ');       // <144> Add
		end;

		ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;											// ﾏｽﾀ区分
		ParamByName('NCode' ).AsFloat   := Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('Syu'   ).AsInteger := PAYTYPE_TRANSFER;										// 支払種別
   		ParamByName('PN'    ).AsInteger := Mem.FieldByName('PayPtnNo').AsInteger;                   // 条件ﾊﾟﾀｰﾝNo  <142> Add

		if Mem.FieldByName('IraiAccNo').IsNull = False then	// 依頼口座ｺｰﾄﾞ
			ParamByName('Irai').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiAccNo').AsInteger);

{ <050>
		if Mem.FieldByName('BankCode').IsNull = False then	// 全銀協銀行ｺｰﾄﾞ
			ParamByName('BankCD').AsFloat := Mem.FieldByName('BankNCode').AsFloat;
}

		if Mem.FieldByName('BkBraCode').IsNull = False then	// 全銀協支店ｺｰﾄﾞ
			ParamByName('BraCD').AsFloat := Mem.FieldByName('BranchNCode').AsFloat;

		ParamByName('AccKbn').AsInteger := Mem.FieldByName('AccKbn').AsInteger;					// 預金種別
		if Mem.FieldByName('AccNo').AsString <> '' then												// 口座番号
		begin
			iAccNo := StrToInt(Mem.FieldByName('AccNo').AsString);
// <166> MOD-STR
//			ParamByName('AccNo').AsString := Format('%.8d',[iAccNo]);
            if (Length(Trim(Mem.FieldByName('AccNo').AsString)) > 7) then
    			ParamByName('AccNo').AsString := Mem.FieldByName('AccNo').AsString
            else
    			ParamByName('AccNo').AsString := Format('%.7d',[iAccNo]);
// <166> MOD-END
		end;

		ParamByName('TranKana').AsString  := Mem.FieldByName('TransKanaName').AsString;				// ｶﾅ振込先名
		ParamByName('ChaKbn'  ).AsInteger := Mem.FieldByName('ChargeKbn'    ).AsInteger;			// 手数料計算区分
		ParamByName('ChaFutan').AsInteger := Mem.FieldByName('ChargeFutan'  ).AsInteger;			// 手数料負担区分
		ParamByName('TranKbn' ).AsInteger := Mem.FieldByName('TransKbn'     ).AsInteger;			// 振込方法
		ParamByName('EDI'     ).AsString  := Mem.FieldByName('EdiInfo'      ).AsString;				// EDI情報

// <185> Del-start
{
// <163> Add Start
		//平行支払採用なしで口座自動引落区分ありの場合引落し支払データは1にする(債務のプログラム上こうしないとまずい)
        iAutoKbn			:= Mem.FieldByName('AutoKbn'      ).AsInteger;
	    iAccAutoData		:= Mem.FieldByName('AccAutoData'  ).AsInteger;
	    if (m_iHeikouData = 0) and (iAutoKbn = 1) and (iAccAutoData = 0) then
	    	iAccAutoData	:= 1;
// <163> Add End
}
// <185> Del-end
		ParamByName('AutoKbn' ).AsInteger := Mem.FieldByName('AutoKbn'      ).AsInteger;			// <128> 口座自動引落区分
// <163> Mod Start
		ParamByName('AutoData').AsInteger := Mem.FieldByName('AccAutoData'  ).AsInteger;			// <128> 引落支払データ
//		ParamByName('AutoData').AsInteger := iAccAutoData;											// 引落支払データ		// <185> Del
// <163> Mod End

		if Mem.FieldByName('AiteNo1').IsNull = False then	// 顧客ｺｰﾄﾞ1
			ParamByName('Aite1').AsString := Mem.FieldByName('AiteNo1').AsString;

		if Mem.FieldByName('AiteNo2').IsNull = False then	// 顧客ｺｰﾄﾞ2
			ParamByName('Aite2').AsString := Mem.FieldByName('AiteNo2').AsString;

		ParamByName('FBSet').AsInteger := Mem.FieldByName('FBSet').AsInteger;	// FB区分
    	ParamByName('UpdTantoNCode' ).AsCurrency := m_nTantoCd;					// 更新担当者内部ｺｰﾄﾞ<160>

		if (not ExecSQL()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																// 正常終了
end;
//**********************************************************************
//*		Proccess	:	支払詳細情報ﾏｽﾀ更新処理(期日指定振込)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/29
//*		Parameter	:	HC		:	補助ｺｰﾄﾞ
//*						Mem		:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailInfoDateTran(HC: String; Mem: TdxMemData): Boolean;
var
	iAccNo	: Integer;
begin

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :NC AND ShiharaiSyubetu = :SS AND Edaban = 1');
		SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
		SQL.Add(' AND RDelKbn = 0 ');       // <144> Add
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('NC').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('SS').AsInteger	:= PAYTYPE_DATETRAN;
		ParamByName('PN').AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;   // <142> Add

		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();
			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu');
			SQL.Add(',Edaban,AccNCode,BkBraNCode,AccNo,AccKbn');
			SQL.Add(',TransKanaName,ChargeKbn');
// <142> 2007/02/20 H.Kawato Mod
//			SQL.Add(',ChargeFutan,TransKbn,EdiInfo,FBSet,Site,AiteNo1,AiteNo2)');
			SQL.Add(',ChargeFutan,TransKbn,EdiInfo,FBSet,Site,AiteNo1,AiteNo2,PayPtnNo');
			SQL.Add(',UpdTantoNCode)'); // <160>
			SQL.Add('VALUES(:MasKbn,:NCode,:Syu,1');


			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
{ <050>
			if Mem.FieldByName('BankCode').IsNull = True then	// 全銀協銀行ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:BankCD');
}
			if Mem.FieldByName('BkBraCode').IsNull = True then	// 全銀協支店ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:BraCD');
			if Mem.FieldByName('AccNo').AsString = '' then		// 口座番号
				SQL.Add(',Null')
			else
				SQL.Add(',:AccNo');

			SQL.Add(',:AccKbn,:TranKana');
			SQL.Add(',:ChaKbn,:ChaFutan,:TranKbn,:EDI,:FBSet,:Site');
			if Mem.FieldByName('AiteNo1').IsNull = True then	// 顧客ｺｰﾄﾞ1
				SQL.Add(',Null')
			else
				SQL.Add(',:Aite1');
			if Mem.FieldByName('AiteNo2').IsNull = True then	// 顧客ｺｰﾄﾞ2
				SQL.Add(',Null')
			else
				SQL.Add(',:Aite2');

            SQL.Add(',:PN');        // <142> Add
			SQL.Add(',:UpdTantoNCode'); // <160>
			SQL.Add(')');

		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE PayDetailInfo SET ');
			SQL.Add('AccNCode = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');

{ <050>
			SQL.Add(',BankNCode = ');
			if Mem.FieldByName('BankCode').IsNull = True then	// 全銀協銀行ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':BankCD');
}
			SQL.Add(',BkBraNCode = ');
			if Mem.FieldByName('BkBraCode').IsNull = True then	// 全銀協支店ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':BraCD');
			SQL.Add(',AccNo = ');
			if Mem.FieldByName('AccNo').AsString = '' then      // 口座番号
				SQL.Add('Null')
			else
				SQL.Add(':AccNo');
			SQL.Add(',AccKbn = :AccKbn');
			SQL.Add(',TransKanaName = :TranKana,ChargeKbn = :ChaKbn,ChargeFutan = :ChaFutan');
			SQL.Add(',TransKbn = :TranKbn,EdiInfo = :EDI,FBSet = :FBSet,Site = :Site');
			SQL.Add(',AiteNo1 = ');
			if Mem.FieldByName('AiteNo1').IsNull = True then	// 顧客ｺｰﾄﾞ1
				SQL.Add('Null')
			else
				SQL.Add(':Aite1');
			SQL.Add(',AiteNo2 = ');
			if Mem.FieldByName('AiteNo2').IsNull = True then	// 顧客ｺｰﾄﾞ2
				SQL.Add('Null')
			else
				SQL.Add(':Aite2');
            SQL.Add(',UpdTantoNCode = :UpdTantoNCode '); // <160>

			SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
    		SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
    		SQL.Add(' AND RDelKbn = 0 ');       // <144> Add
		end;


		ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;											// ﾏｽﾀ区分
		ParamByName('NCode').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;

		ParamByName('Syu'   ).AsInteger := PAYTYPE_DATETRAN;										// 支払種別
		ParamByName('PN'    ).AsInteger := Mem.FieldByName('PayPtnNo').AsInteger;                   // 条件ﾊﾟﾀｰﾝNo  <142> Add

		if Mem.FieldByName('IraiAccNo').IsNull = False then	// 依頼口座ｺｰﾄﾞ
			ParamByName('Irai').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiAccNo').AsInteger);

{ <050>
		if Mem.FieldByName('BankCode').IsNull = False then	// 全銀協銀行ｺｰﾄﾞ
			ParamByName('BankCD').AsFloat := Mem.FieldByName('BankNCode').AsFloat;
}

		if Mem.FieldByName('BkBraCode').IsNull = False then	// 全銀協支店ｺｰﾄﾞ
			ParamByName('BraCD').AsFloat := Mem.FieldByName('BranchNCode').AsFloat;

		ParamByName('AccKbn'  ).AsInteger := Mem.FieldByName('AccKbn').AsInteger;					// 預金種別
		if Mem.FieldByName('AccNo').AsString <> '' then												// 口座番号
		begin
			iAccNo := StrToInt(Mem.FieldByName('AccNo').AsString);
// <166> MOD-STR
//			ParamByName('AccNo').AsString := Format('%.8d',[iAccNo]);
            if (Length(Trim(Mem.FieldByName('AccNo').AsString)) > 7) then
    			ParamByName('AccNo').AsString := Mem.FieldByName('AccNo').AsString
            else
    			ParamByName('AccNo').AsString := Format('%.7d',[iAccNo]);
// <166> MOD-END
		end;
		ParamByName('TranKana').AsString  := Mem.FieldByName('TransKanaName').AsString;				// ｶﾅ振込先名
		ParamByName('ChaKbn'  ).AsInteger := Mem.FieldByName('ChargeKbn'    ).AsInteger;			// 手数料計算区分
		ParamByName('ChaFutan').AsInteger := Mem.FieldByName('ChargeFutan'  ).AsInteger;			// 手数料負担区分
		ParamByName('TranKbn' ).AsInteger := Mem.FieldByName('TransKbn'     ).AsInteger;			// 振込方法
		ParamByName('EDI'     ).AsString  := Mem.FieldByName('EdiInfo'      ).AsString;				// EDI情報

		if Mem.FieldByName('AiteNo1').IsNull = False then	// 顧客ｺｰﾄﾞ1
			ParamByName('Aite1').AsString := Mem.FieldByName('AiteNo1').AsString;

		if Mem.FieldByName('AiteNo2').IsNull = False then	// 顧客ｺｰﾄﾞ2
			ParamByName('Aite2').AsString := Mem.FieldByName('AiteNo2').AsString;

		ParamByName('FBSet').AsInteger := Mem.FieldByName('FBSet').AsInteger;						// FB区分
		ParamByName('Site' ).AsInteger := Mem.FieldByName('Site' ).AsInteger;						// ｻｲﾄ
    	ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;					// 更新担当者内部ｺｰﾄﾞ<160>

		if (not ExecSQL()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);									// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	支払方法の存在ﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						HouHou		: 	支払方法
//*		Return		:	方法の存在有(1)/無(0)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPayPtnDtlHouHou(sHojCode: String; HouHou: Integer): Integer;
var
	Qe	: TMQuery;
begin

	Result := 0;
	Qe := TMQuery.Create (Self);												// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);						// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT Houhou FROM PayPtnDtl PD     ');
// <144> 2007/07/10 H.Kawato Mod
//            SQL.Add('Left outer join FX_MTOKUI MT ON        ');
            SQL.Add('Left outer join MTOKUI MT ON        ');
            SQL.Add('PD.PayNCode = MT.NCode              ');
			SQL.Add('WHERE PD.MasterKbn = :MK AND MT.GCode = :HC AND PD.Houhou = :HH and MT.RDelKbn =0 ');
			SQL.Add('AND PD.RDelKbn =0 ');  // <144> Add
			ParamByName('MK').AsInteger := MASTER_CUSTOMER;
			ParamByName('HC').AsString	:= sHojCode;
			ParamByName('HH').AsInteger	:= HouHou;

			if (not Open ()) then
			begin
				fnErrorMessageDsp(Qe);
				Exit;
			end;

			if EOF <> True then
			begin
				Result := FieldByName('Houhou').AsInteger;;
			end;
		end;
	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	振込、期日指定振込の行のﾃﾞｰﾀ取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/21
//*		Parameter	:	Sender
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetFuriLineData(Sender: TObject);
begin
	m_LineInfo.sIraiAccNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString;	// 依頼口座ｺｰﾄﾞ
	m_LineInfo.sBankCD    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankCode' ).AsString;	// 銀行ｺｰﾄﾞ
	m_LineInfo.sBraCD     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraCode').AsString;	// 支店ｺｰﾄﾞ

end;

//************************************************************************
//*		Component		:	GridFurikomi ( TdxDBGrid )
//*							振込情報/期日指定振込情報
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.CmnjGridFuriChangeNodeEx(Sender: TObject);
var
    iNo : Integer;
begin
	fnSetFuriLineData(Sender);

// <122> 2006/04/25 H.Kawato Add
    m_FuriInfoSave.IraiAccNo     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString;
    m_FuriInfoSave.BankCode      := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankCode'     ).AsString;
    m_FuriInfoSave.BkBraCode     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BkBraCode'    ).AsString;
    m_FuriInfoSave.BankKanaName  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BankKanaName' ).AsString;
    m_FuriInfoSave.TransKanaName := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('TransKanaName').AsString;
    m_FuriInfoSave.AccData       := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccData'      ).AsInteger;
    m_FuriInfoSave.AccNo         := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccNo'        ).AsString;
    m_FuriInfoSave.ChargeData    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger;
    m_FuriInfoSave.ChargeName    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChargeName'   ).AsString;
    m_FuriInfoSave.ChargeKbnData := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger;
    m_FuriInfoSave.TransKbnData  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('TransKbnData' ).AsInteger;
    m_FuriInfoSave.FBSetData     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('FBSetData'    ).AsInteger;
    m_FuriInfoSave.EDIInfo       := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('EDIInfo'      ).AsString;
    m_FuriInfoSave.AiteNo1       := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AiteNo1'      ).AsString;
    m_FuriInfoSave.AiteNo2       := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AiteNo2'      ).AsString;



    if TdxDBGrid(Sender).Name = GridFuriDate.Name then
        m_FuriInfoSave.Site          := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Site'     ).AsInteger;
// <122> 2006/04/25 H.Kawato Add

// <128> 2006/06/29 H.Kawato Add
    if TdxDBGrid(Sender).Name = GridFurikomi.Name then
    begin
        m_FuriInfoSave.AutoKbnData   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbnData' ).AsInteger;
        m_FuriInfoSave.AccAutoData   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccAutoData' ).AsInteger;

        iNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AutoKbn').AsInteger;
        if (m_iHeikouData = 0) or (iNo = 0) then
        begin
// <142> 2007/02/20 H.Kawato Mod
//            TdxDBGrid(Sender).Columns [28].ReadOnly := True;
//            TdxDBGrid(Sender).Columns [28].TabStop  := False;
            Fri_AccAutoData.ReadOnly := True;
            Fri_AccAutoData.TabStop  := False;
// <142> 2007/02/20 H.Kawato Mod
        end
        else
        begin
// <142> 2007/02/20 H.Kawato Mod
//            TdxDBGrid(Sender).Columns [28].ReadOnly := False;
//            TdxDBGrid(Sender).Columns [28].TabStop  := True;
            Fri_AccAutoData.ReadOnly := False;
            Fri_AccAutoData.TabStop  := True;
// <142> 2007/02/20 H.Kawato Mod
// <142> 2007/02/20 H.Kawato Mod Start
{
// <138> 2006/08/11 H.Kawato Add
            if ((GridFurikomi.FocusedColumn = 26) and (m_bChgNodeFlg)) then
                GridFurikomi.FocusedColumn := 28;
// <138> 2006/08/11 H.Kawato Add
}
            if ((GridFurikomi.FocusedField = Fri_AccAutoKbn.Field) and (m_bChgNodeFlg)) then
                GridFurikomi.FocusedField := Fri_AccAutoData.Field;

// <142> 2007/02/20 H.Kawato Mod End
        end;
        m_bChgNodeFlg := False;     // <138> 2006/08/11 H.Kawato Add
    end;
// <128> 2006/06/29 H.Kawato Add
//<GA001>ST
    if TdxDBGrid(Sender).Name = GridFurikomiGD.Name then
    begin
        m_FuriInfoSave_GD.IraiAccNo     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString;
        m_FuriInfoSave_GD.IraiFeeAccNo  := TdxDbGrid(Sender).DataSource.dataSet.FieldByName('IraiFeeAccNo').AsString;
        m_FuriInfoSave_GD.ChargeData    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChargeData'   ).AsInteger;
        m_FuriInfoSave_GD.ChargeKbnData := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChargeKbnData').AsInteger;
        m_bChgNodeFlg := False;
    end;
    if TdxDBGrid(Sender).Name = GridFurikomiGT.Name then
    begin
        m_FuriInfoSave_GT.IraiAccNo     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString;
        m_bChgNodeFlg := False;
    end;

    if TdxDBGrid(Sender).Name = GridFurikomiGK.Name then
    begin
        m_FuriInfoSave_GK.IraiAccNo     := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo'    ).AsString;
        m_FuriInfoSave_GK.IraiFeeAccNo  := TdxDbGrid(Sender).DataSource.dataSet.FieldByName('IraiFeeAccNo').AsString;
        m_bChgNodeFlg := False;
    end;
//<GA001>ED

end;

//**********************************************************************
//*		Proccess	:	手形情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/29
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetDraftInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;

	DSDraft.DataSet := nil;

	MemDraft.Close;
	MemDraft.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode,DI.Site,DI.TegBunkatuMax,DI.TegYusouKbn,DI.TegYusouFutan');
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo');
		SQL.Add(',MA.SimpleName as BANK ');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelKbn = 0 AND AI.NCode = MA.BankNCode) ');
		SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '); // <121>
		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 3 AND MT.RDelKbn = 0');   // <121>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL := 'SELECT '
                + 'ISNULL(PD.PayNCode, 0) AS PayNCode '                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先内部ｺｰﾄﾞ
                + ',ISNULL(DI.Site, 0) AS Site '                        //サイト
                + ',ISNULL(DI.TegBunkatuMax, 0) AS TegBunkatuMax '      //手形分割枚数
                + ',ISNULL(DI.TegYusouKbn, 0) AS TegYusouKbn '          //手形郵送区分
                + ',ISNULL(DI.TegYusouFutan, 0) AS TegYusouFutan '      //手形郵送料負担区分
                + ',ISNULL(AI.Acckbn, 0) as YOKIN '                     //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA '                    //口座番号
                + ',ISNULL(AI.GCode, 0) as IraiAccNo '                  //依頼先口座ｺｰﾄﾞ
                + ',ISNULL(BI.SimpleName, '''') as BANK '               //銀行簡略名称
// <196> ADD-STR
                + ',ISNULL(AI.LayoutInfo, '''') AS LayoutInfo '         //レイアウト情報
                + ',ISNULL(DI.ERKbn, 0) as ERKbn '                      //電子債権採用区分
                + ',ISNULL(PS.BankNCode, 0) As BankNCode '              //本店内部ｺｰﾄﾞ
                + ',ISNULL(DI.BkBraNCode, 0) As BranchNCode '           //支店内部ｺｰﾄﾞ
                + ',ISNULL(PF.BankCode, 0) AS BankCode '                //本店外部ｺｰﾄﾞ
                + ',ISNULL(PF.BankName, '''') AS BankName '             //本店名
                + ',ISNULL(PF.BankKana, '''') AS BankKana '             //本店ｶﾅ
                + ',ISNULL(PS.BranchCode, 0) AS BranchCode '            //支店外部ｺｰﾄﾞ
                + ',ISNULL(PS.BranchName, '''') AS BranchName '         //支店名
                + ',ISNULL(PS.BranchKana, '''') AS BranchKana '         //支店ｶﾅ
                + ',ISNULL(DI.TransKanaName, '''') AS TransKanaName '   //ｶﾅ振込先名
                + ',ISNULL(DI.Acckbn, 1) AS Acckbn '                    //預金種目
                + ',ISNULL(DI.AccNo, '''') AS AccNo '                   //口座番号
                + ',ISNULL(DI.ChargeFutan, 1) AS ChargeFutan '          //手数料負担
                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '              //手数料計算区分<203>
                + ',ISNULL(DI.VFree1, '''') as VFree1 '                 //フリー項目
                + ',ISNULL(DI.VFree2, '''') as VFree2 '
                + ',ISNULL(DI.VFree3, '''') as VFree3 '
                + ',ISNULL(DI.VFree4, '''') as VFree4 '
                + ',ISNULL(DI.VFree5, '''') as VFree5 '
// <196> ADD-END
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + 'ON (DI.MasterKbn = PD.MasterKbn '
                + 'AND DI.PayNCode = PD.PayNCode '
                + 'AND DI.PayPtnNo = PD.PayPtnNo '
                + 'AND DI.Edaban = 1 '
                + 'AND DI.RDelKbn = 0 ' // <144> Add
                + 'AND PD.HouHou = DI.ShiharaiSyubetu) '
// <199> MOD-STR
//              + 'LEFT OUTER JOIN MTOKUI MT '
//              + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'INNER JOIN MTOKUI MT '
                + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) '
// <199> MOD-END
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI '
                + 'ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo BI '
                + 'ON (BI.NCode = AI.BankNCode) '
// <196> ADD-STR
                + 'LEFT OUTER JOIN HAPBS PS '
                + 'ON (DI.BkBraNCode = PS.NCode)'
                + 'LEFT OUTER JOIN HAPBF PF '
                + 'ON (PS.BankNCode  = PF.NCode)'
// <196> ADD-END
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + 'AND PD.HouHou = 3 '
                + 'AND PD.RDelKbn = 0 '     // <144> Add
                + 'AND MT.RDelKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemDraft.Append;

// <142> 2007/02/20 H.Kawato Mod
//			strHojCode := FieldByName ('GCode').AsString;
			strHojCode := FieldByName ('PayCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
    				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;
// <142> 2007/02/20 H.Kawato Mod Start
{
			MemDraft.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'  ).AsFloat;
			MemDraft.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
			MemDraft.FieldByName('BaseHojCode').AsString := FieldByName('GCode'     ).AsString;	// 補助ｺｰﾄﾞ
			MemDraft.FieldByName('SName'      ).AsString := FieldByName('NMK'       ).AsString;	// 補助名称
			MemDraft.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).AsString;	// 連想
}
			MemDraft.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'  ).Value;
			MemDraft.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
			MemDraft.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'   ).Value;	// 補助ｺｰﾄﾞ
			MemDraft.FieldByName('SName'      ).AsString := FieldByName('PayName'   ).Value;	// 補助名称
			MemDraft.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).Value;	// 連想

            MemDraft.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'  ).Value;	// 条件ﾊﾟﾀｰﾝNo

            strHojCode := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemDraft.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            MemDraft.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemDraft.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value    // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	MemDraft.FieldByName('PrjName'   ).AsString := 'その他';

            strHojCode := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemDraft.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            MemDraft.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemDraft.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                MemDraft.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			// 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		// 依頼口座
			   (FieldByName('IraiAccNo').Value <> 0) then			// 依頼口座
			begin
				MemDraft.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
//				MemDraft.FieldByName('AccNCode').AsFloat := FieldByName('AccNCode').AsInteger;
				sBankName := FieldByName('BANK').AsString;	// 銀行名称
				case FieldByName('YOKIN').AsInteger of		// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				MemDraft.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				MemDraft.FieldByName('AccInfo').AsString := '';

			MemDraft.FieldByName('Site'		    ).AsInteger := FieldByName('Site'         ).AsInteger;	// サイト
			MemDraft.FieldByName('Bunkatu'      ).AsInteger := FieldByName('TegBunkatuMax').AsInteger;	// 分割枚数
			MemDraft.FieldByName('YusoData'     ).AsInteger := FieldByName('TegYusouKbn'  ).AsInteger;	// 郵送区分
			MemDraft.FieldByName('YusoFutanData').AsInteger := FieldByName('TegYusouFutan').AsInteger;	// 郵送料負担区分
// <196> ADD-STR
			MemDraft.FieldByName('LayoutInfo'   ).AsString  := FieldByName('LayoutInfo'   ).AsString;   //レイアウト情報
			MemDraft.FieldByName('ERKbnData'    ).AsInteger := FieldByName('ERKbn'     ).AsInteger;     // 電子債権採用区分
			if FieldByName('BankCode').IsNull = False then			    // 銀行ｺｰﾄﾞ
            begin
  				MemDraft.FieldByName('BankCode' ).AsInteger := FieldByName('BankCode'  ).AsInteger;
  				MemDraft.FieldByName('BankNCode').AsFloat   := FieldByName('BankNCode' ).AsFLoat;
            end;
			if FieldByName('BranchCode').IsNull = False then			// 支店ｺｰﾄﾞ
            begin
				MemDraft.FieldByName('BkBraCode').AsInteger := FieldByName('BranchCode' ).AsInteger;
				MemDraft.FieldByName('BranchNCode').AsFloat := FieldByName('BranchNCode').AsFloat;
            end;

			MemDraft.FieldByName('BankName'	    ).AsString := FieldByName('BankName'     ).AsString;	// 銀行名称
			MemDraft.FieldByName('BankKanaName' ).AsString := FieldByName('BankKana'     ).AsString;	// ｶﾅ銀行名称
			MemDraft.FieldByName('BkBraName'    ).AsString := FieldByName('BranchName'	 ).AsString;    // 支店名称
			MemDraft.FieldByName('BraKanaName'  ).AsString := FieldByName('BranchKana'   ).AsString;	// ｶﾅ支店名称
			MemDraft.FieldByName('TransKanaName').AsString := FieldByName('TransKanaName').AsString;	// ｶﾅ振込先名

			if FieldByName('Acckbn').IsNull = True then			        // 預金種目
				MemDraft.FieldByName('AccData').AsInteger  := 1
			else
				MemDraft.FieldByName('AccData').AsInteger  := FieldByName('Acckbn').AsInteger;
			MemDraft.FieldByName('AccNo'	    ).AsString  := fnGetEditedAccountNumber(FieldByName('AccNo').AsString); // 口座番号
            if FieldByName('ChargeFutan').AsInteger = 0 then            // 手数料負担区分
    			MemDraft.FieldByName('ChargeData').AsInteger := 1
            else
	    		MemDraft.FieldByName('ChargeData').AsInteger := FieldByName('ChargeFutan').AsInteger;
    		MemDraft.FieldByName('ChargeKbnData').AsInteger := FieldByName('ChargeKbn').AsInteger;      //<203>手数料区分

			MemDraft.FieldByName('VFree1'	    ).AsString  := FieldByName('VFree1').AsString;          // フリー項目
			MemDraft.FieldByName('VFree2'	    ).AsString  := FieldByName('VFree2').AsString;
			MemDraft.FieldByName('VFree3'	    ).AsString  := FieldByName('VFree3').AsString;
			MemDraft.FieldByName('VFree4'	    ).AsString  := FieldByName('VFree4').AsString;
			MemDraft.FieldByName('VFree5'	    ).AsString  := FieldByName('VFree5').AsString;
// <196> ADD-END

			MemDraft.Post;
			next;
		end;
	end;
	MemDraft.First;

	DSDraft.DataSet := MemDraft;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_DRAFT,MemDraft);
end;

//************************************************************************
//*		Component		:	GridDraft/GridCheck ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(手形情報/小切手情報)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridDraftBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	cMem		: TdxMemData;
	iAcc		: Integer;
	iRet		: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sAccNo		: String;
	sName		: String;
// <196> ADD-STR
    bRet        : Boolean;
	sKana	    : String;
	sNo		    : String;
	sBank,sBra	: String;
    sDmy        : String;
    exBank,exBra: Extended;

    // NewColumn引数から実際のColumnIndexを求める
    function fnGetNativeIndex(DBGrid: TdxDBGrid; VisibleColumn: Integer): Integer;
    var
        iLoop, iVisible: Integer;
    begin
        Result := 0;
        iVisible := -1;

    	for iLoop := 0 to DBGrid.ColumnCount - 1 do
        begin
            if DBGrid.Columns[iLoop].Visible and DBGrid.Bands[DBGrid.Columns[iLoop].BandIndex].Visible then
            begin
                iVisible := iVisible + 1;

                if iVisible = VisibleColumn then
                begin
                    Result := iLoop;
                    Exit;
                end;
            end;
        end;
    end;
// <196> ADD-END
begin
    cMem    :=  nil;

	// 手形情報
	if TdxDBGrid(Sender).Name = GridDraft.Name then
	begin
// <142> 2007/02/20 H.Kawato Mod Start
{
		if NewColumn in [0,1,2,4,8,10] then
		begin
       		CanChange :=  False;
			exit;
		end;
}
// <196> MOD-STR
{        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
            if NewColumn in [0,1,2,3,4,5,6,8,12,14] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
            if NewColumn in [0,1,2,3,4,6,10,12] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
            if NewColumn in [0,1,2,4,8,10] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;}

        // フォーカス移動可否判定
        iRet := fnGetNativeIndex(TdxDBGrid(Sender), NewColumn);
        if TdxDBGrid(Sender).Columns[iRet].ReadOnly or not TdxDBGrid(Sender).Columns[iRet].TabStop then
        begin
            CanChange :=  False;
            exit;
        end;
// <196> MOD-END
// <142> 2007/02/20 H.Kawato Mod End
        cMem := MemDraft;
	end
	// 小切手情報
	else if TdxDBGrid(Sender).Name = GridCheck.Name then
	begin
// <142> 2007/02/20 H.Kawato Mod Start
{
		if NewColumn in [0,1,2,4,6,8] then
		begin
       		CanChange :=  False;
			exit;
		end;
}
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
            if NewColumn in [0,1,2,3,4,5,6,8,10,12] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
            if NewColumn in [0,1,2,3,4,6,8,10] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
            if NewColumn in [0,1,2,4,6,8] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;
// <142> 2007/02/20 H.Kawato Mod End
        cMem := MemCheck;
	end;

	if not(cMem.State in [dsEdit]) then
		exit;

// <142> 2007/02/20 H.Kawato Mod Start 
{
	case Column of
		3:	// 依頼口座ﾁｪｯｸ
		begin
			sAccNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString;	// 依頼口座
			if sAccNo = '' then
				sName := ''
			else
			begin
				iAcc := StrToInt(sAccNo);
				// 依頼口座情報取得
				if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
				begin
					CanChange := False;
					abort;
				end;
				// ﾚｺｰﾄﾞが存在しない時
				if iRet = 0 then
				begin
					TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
					CanChange := False;
					abort;
				end;
			end;
			TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
		end;
	end;
}
    if  (TdxDBGrid(Sender).FocusedField = Teg_IraiAccCode.Field) or
        (TdxDBGrid(Sender).FocusedField = Kog_IraiAccCode.Field) then
    begin
        // 依頼口座ﾁｪｯｸ
        sAccNo := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString;	// 依頼口座
        if sAccNo = '' then
        	sName := ''
        else
        begin
        	iAcc := StrToInt(sAccNo);
        	// 依頼口座情報取得
        	if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
        	begin
        		CanChange := False;
        		abort;
        	end;
        	// ﾚｺｰﾄﾞが存在しない時
        	if iRet = 0 then
        	begin
        		TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
        		CanChange := False;
        		abort;
        	end;
        end;
        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
// <196> ADD-STR
// <197> MOD-STR
//      if sName <> '' then
        if (TdxDBGrid(Sender).Name = GridDraft.Name) and (sName <> '') then
// <197> MOD-END
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('LayoutInfo').AsString := m_sLayoutInfo;   // レイアウト情報
// <196> ADD-END
    end;
// <124> 2007/02/20 H.Kawato Mod End

// <196> ADD-STR
	// 手形情報
	if TdxDBGrid(Sender).Name = GridDraft.Name then
	begin
        with TdxDBGrid(Sender).DataSource.DataSet do
        begin
            if (FieldByName('ERKbn').AsInteger = 1) then
            begin
                exBank:= 0;
                exBra := 0;
                sName := '';
                sKana := '';
                bRet  := False;

                sBank := Trim(FieldByName('BankCode').AsString);
                if (sBank = '0000') then
                    sBank := '';
                sBra  := Trim(FieldByName('BkBraCode').AsString);
                if (sBank = '') and (sBra = '000') then
                    sBra := '';

                if  (TdxDBGrid(Sender).FocusedField = Teg_BankCode.Field) then
                begin
                    // 銀行コード
                    if (sBank <> '') and (StrToInt('0' + sBank) <> 0) then
                        bRet := fnGetBankCodeInfoFX(StrToInt(sBank), exBank, sName, sKana);

                    if (not bRet) or (FieldByName('BankName').AsString <> sName) or (FieldByName('BankKanaName').AsString <> sKana) then
                    begin
                        // 銀行情報セット
                        FieldByName('BankNCode'  ).AsFloat      := exBank;
                        FieldByName('BankName'    ).AsString    := sName;	// 銀行名称
                        FieldByName('BankKanaName').AsString    := sKana;	// カナ銀行名称

                        // 支店情報クリア
                        FieldByName('BkBraCode').AsString       := '';
                        FieldByName('BranchNCode').AsFloat      := 0;
                        FieldByName('BkBraName'  ).AsString     := '';
                        FieldByName('BraKanaName').AsString     := '';

                        if (sBank <> '') and (not bRet) then
                        begin
                            CanChange := False;
                            Abort;
                        end;
                    end;
                end
                else
                if  (TdxDBGrid(Sender).FocusedField = Teg_BkBraCode.Field) then
                begin
                    // 支店コード
                    if (sBank = '') and (sBra <> '') then
                    begin
                        CanChange := False;
                        Abort;
                    end;

                    if fnGetBankCodeInfoFX(StrToInt('0' + sBank), exBank, sDmy, sDmy) then
                        FieldByName('BankNCode'  ).AsFloat      := exBank;

                    exBra := FieldByName('BranchNCode').AsFloat;            // <SCA> ADD
                    if (sBra <> '') then
                        bRet := fnGetBranchCodeInfoFX(FieldByName('BankNCode').AsFloat, StrToInt(sBra), exBra, sName, sKana);

                    if (not bRet) or (FieldByName('BkBraName').AsString <> sName) or (FieldByName('BraKanaName').AsString <> sKana) then
                    begin
                        // 支店情報セット
                        FieldByName('BranchNCode'  ).AsFloat    := exBra;
                        FieldByName('BkBraName'    ).AsString   := sName;	// 支店名称
                        FieldByName('BraKanaName').AsString     := sKana;	// カナ支店名称

                        if (sBra <> '') and (not bRet) then
                        begin
                            CanChange := False;
                            Abort;
                        end;
                    end;
                end
                else
                if  (TdxDBGrid(Sender).FocusedField = Teg_AccNo.Field) then
                begin
                    // 口座番号
                    sNo := FieldByName('AccNo').AsString;	// 口座番号
                    FieldByName('AccNo').AsString := fnGetEditedAccountNumber(sNo);
                end;
            end;
        end;
    end;
// <196> ADD-END
end;

//**********************************************************************
//*		Proccess	:	入力された内容チェック
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGridCheckDraft();
var
	cMem		: TdxMemData;
	cGrid		: TdxDBGrid;
	iRet		: Integer;
	iAcc		: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sName		: String;
	sAccNo		: String;
// <196> ADD-STR
    bRet        : Boolean;
	sKana	    : String;
	sNo		    : String;
	sBank,sBra	: String;
    exBank,exBra: Extended;
// <196> ADD-END
begin
    cGrid   :=  nil;
    cMem    :=  nil;

	case Tab.Items.Selected of
		TAB_DRAFT:	// 手形情報
		begin
			cMem  := MemDraft;
			cGrid := GridDraft;
		end;
		TAB_CHECK:	// 小切手情報
		begin
			cMem  := MemCheck;
			cGrid := GridCheck;
		end;
	end;

	if not(cMem.State in [dsEdit]) then
		exit;

	sAccNo := cGrid.DataSource.DataSet.FieldByName('IraiAccNo').AsString;	    // 依頼口座

	if sAccNo = '' then
// <122> 2006/04/25 H.Kawato Mod
//		sName := ''
    begin
        sName := '';
        cGrid.DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	    // 銀行/種別/口座
    end
// <122> 2006/04/25 H.Kawato Mod
	else
	begin
		iAcc := StrToInt(sAccNo);
		// 依頼口座情報取得
		if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
		begin
			abort;
		end;
		// ﾚｺｰﾄﾞが存在しない時
		if iRet = 0 then
		begin
			cGrid.DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	// 銀行/種別/口座
			abort;
		end;
		cGrid.DataSource.DataSet.FieldByName('AccInfo').AsString := sName;	    // 銀行/種別/口座
// <196> ADD-STR
// <197> MOD-STR
//      if sName <> '' then
        if (Tab.Items.Selected = TAB_DRAFT) and (sName <> '') then
// <197> MOD-END
            cGrid.DataSource.DataSet.FieldByName('LayoutInfo').AsString := m_sLayoutInfo;   // レイアウト情報
// <196> ADD-END
	end;

// <196> ADD-STR
	// 手形情報
	if Tab.Items.Selected = TAB_DRAFT then
	begin
        with cGrid.DataSource.DataSet do
        begin
            if (FieldByName('ERKbn').AsInteger = 1) then
            begin
                exBank:= 0;
                sName := '';
                sKana := '';
                bRet  := False;

                sBank := Trim(FieldByName('BankCode').AsString);
                if (sBank = '0000') then
                    sBank := '';
                sBra  := Trim(FieldByName('BkBraCode').AsString);
                if (sBank = '') and (sBra = '000') then
                    sBra := '';

                // 銀行コード
                if (sBank <> '') and (StrToInt('0' + sBank) <> 0) then
                    bRet := fnGetBankCodeInfoFX(StrToInt(sBank), exBank, sName, sKana);

                if (not bRet) or (FieldByName('BankName').AsString <> sName) or (FieldByName('BankKanaName').AsString <> sKana) then
                begin
                    // 銀行情報セット
                    FieldByName('BankNCode'  ).AsFloat      := exBank;
                    FieldByName('BankName'    ).AsString    := sName;	// 銀行名称
                    FieldByName('BankKanaName').AsString    := sKana;	// カナ銀行名称

                    if (sBank <> '') and (not bRet) then
                        Abort;
                end;

                // 支店コード
                if (sBank = '') and (sBra <> '') then
                    Abort;

                if (sBank <> '') and (sBra = '') then
                    Abort;

                exBra := 0;
                sName := '';
                sKana := '';
                bRet  := False;

                exBra := FieldByName('BranchNCode').AsFloat;            // <SCA> ADD
                if (sBra <> '') then
                    bRet := fnGetBranchCodeInfoFX(FieldByName('BankNCode').AsFloat, StrToInt(sBra), exBra, sName, sKana);

                if (not bRet) or (FieldByName('BkBraName').AsString <> sName) or (FieldByName('BraKanaName').AsString <> sKana) then
                begin
                    // 支店情報セット
                    FieldByName('BranchNCode'  ).AsFloat    := exBra;
                    FieldByName('BkBraName'    ).AsString   := sName;	// 支店名称
                    FieldByName('BraKanaName').AsString     := sKana;	// カナ支店名称

                    if (sBra <> '') and (not bRet) then
                        Abort;
                end;

                // 口座番号
                sNo := FieldByName('AccNo').AsString;	// 口座番号
                FieldByName('AccNo').AsString := fnGetEditedAccountNumber(sNo);
            end;
        end;
    end;
// <196> ADD-END
end;

//**********************************************************************
//*		Proccess	:	支払詳細情報ﾏｽﾀ更新処理(手形)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/29
//*		Parameter	:	HC		:	補助ｺｰﾄﾞ
//*						Mem		:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailInfoDraft(HC: String; Mem: TdxMemData): Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
{
		SQL.Add('SELECT GCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND GCode = :HC AND ShiharaiSyubetu = :SS AND Edaban = 1');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('HC').AsString	:= HC;
		ParamByName('SS').AsInteger	:= PAYTYPE_DRAFT;
}
		SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :NC AND ShiharaiSyubetu = :SS AND Edaban = 1');
		SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
		SQL.Add(' AND RDelKbn  = 0 ');      // <144> Add
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('NC').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('SS').AsInteger	:= PAYTYPE_DRAFT;
		ParamByName('PN').AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;   // <142> Add

		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();
{
			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,GCode,ShiharaiSyubetu,Edaban');
			SQL.Add(',IraiAccNo,Site,TegYusouKbn,TegYusouFutan,TegBunkatuMax)');
			SQL.Add('VALUES(:MasKbn,:GCode,:Syu,1');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
			SQL.Add(',:Site,:YusoKbn,:YusoFutan,:Bunkatu)');
}

			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu,Edaban');
// <142> 2007/02/20 H.Kawato Mod
//			SQL.Add(',AccNCode,Site,TegYusouKbn,TegYusouFutan,TegBunkatuMax)');
			SQL.Add(',AccNCode,Site,TegYusouKbn,TegYusouFutan,TegBunkatuMax,PayPtnNo');
// <196> ADD-STR
			SQL.Add(',ERKbn');
//<203>
//			SQL.Add(',BkBraNCode,AccNo,AccKbn,TransKanaName,ChargeFutan');
			SQL.Add(',BkBraNCode,AccNo,AccKbn,TransKanaName,ChargeFutan,ChargeKbn');
//<203>
			SQL.Add(',VFree1,VFree2,VFree3,VFree4,VFree5');
// <196> ADD-END
			SQL.Add(',UpdTantoNCode)'); // <160>
			SQL.Add('VALUES(:MasKbn,:NCode,:Syu,1');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
//			if Mem.FieldByName('AccNCode').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
// <142> 2007/02/20 H.Kawato Mod
//			SQL.Add(',:Site,:YusoKbn,:YusoFutan,:Bunkatu)');
			SQL.Add(',:Site,:YusoKbn,:YusoFutan,:Bunkatu,:PN');
// <196> ADD-STR
			SQL.Add(',:ERKbn');
			if Mem.FieldByName('BkBraCode').IsNull = True then	// 全銀協支店ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:BraCD');
			if Mem.FieldByName('AccNo').AsString = '' then		// 口座番号
				SQL.Add(',Null')
			else
				SQL.Add(',:AccNo');
// <201> MOD-STR
//			SQL.Add(',:AccKbn,,:TranKana,:ChaFutan');
//<203>
//			SQL.Add(',:AccKbn,:TranKana,:ChaFutan');
			SQL.Add(',:AccKbn,:TranKana,:ChaFutan,:ChaKbn');
//<203>
// <201> MOD-END
			SQL.Add(',:VFree1,:VFree2,:VFree3,:VFree4,:VFree5');
// <196> ADD-END
			SQL.Add(',:UpdTantoNCode)'); // <160>

		end
		else
		begin
			Close();
			SQL.Clear();
{
			SQL.Add('UPDATE PayDetailInfo SET ');
			SQL.Add('IraiAccNo = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');
			SQL.Add(',Site = :Site,TegYusouKbn = :YusoKbn,TegYusouFutan = :YusoFutan,TegBunkatuMax = :Bunkatu ');
			SQL.Add('WHERE MasterKbn = :MasKbn AND GCode = :GCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
}

			SQL.Add('UPDATE PayDetailInfo SET ');
			SQL.Add('AccNCode = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');
			SQL.Add(',Site = :Site,TegYusouKbn = :YusoKbn,TegYusouFutan = :YusoFutan,TegBunkatuMax = :Bunkatu ');
// <196> ADD-STR
			SQL.Add(',ERKbn = :ERKbn');
			SQL.Add(',BkBraNCode = ');
			if Mem.FieldByName('BkBraCode').IsNull = True then	// 全銀協支店ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':BraCD');
			SQL.Add(',AccNo = ');
			if Mem.FieldByName('AccNo').AsString = '' then	// 口座番号
				SQL.Add('Null')
			else
				SQL.Add(':AccNo');
			SQL.Add(',AccKbn = :AccKbn');
//<203>
//			SQL.Add(',TransKanaName = :TranKana,ChargeFutan = :ChaFutan');
			SQL.Add(',TransKanaName = :TranKana,ChargeFutan = :ChaFutan,ChargeKbn =:ChaKbn');
//<203>
			SQL.Add(',VFree1 = :VFree1,VFree2 = :VFree2,VFree3 = :VFree3,VFree4 = :VFree4,VFree5 = :VFree5');
// <196> ADD-END
			SQL.Add(',UpdTantoNCode = :UpdTantoNCode '); // <160>
			SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
    		SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
    		SQL.Add(' AND RDelKbn  = 0 ');      // <144> Add
		end;

		ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;								 		// ﾏｽﾀ区分
//		ParamByName('GCode' ).AsString  := HC;											 		// 支払先ｺｰﾄﾞ
		ParamByName('NCode' ).AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('Syu'   ).AsInteger := PAYTYPE_DRAFT;								 		// 支払種別
		ParamByName('PN'    ).AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;               // 条件ﾊﾟﾀｰﾝNo  <142> Add

		if Mem.FieldByName('IraiAccNo').IsNull = False then	// 依頼口座ｺｰﾄﾞ
			ParamByName('Irai').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiAccNo').AsInteger);

		ParamByName('Site'     ).AsInteger := Mem.FieldByName('Site'     ).AsInteger;	 		// サイト
		ParamByName('YusoKbn'  ).AsInteger := Mem.FieldByName('YusoKbn'  ).AsInteger;			// 郵送区分
		ParamByName('YusoFutan').AsInteger := Mem.FieldByName('YusoFutan').AsInteger;			// 郵送料負担区分
		ParamByName('Bunkatu'  ).AsInteger := Mem.FieldByName('Bunkatu'  ).AsInteger;			// 分割枚数
// <196> ADD-STR
		ParamByName('ERKbn'  ).AsInteger   := Mem.FieldByName('ERKbn'    ).AsInteger;			// 電子債権採用区分
		if Mem.FieldByName('BkBraCode').IsNull = False then	// 全銀協支店ｺｰﾄﾞ
			ParamByName('BraCD').AsFloat := Mem.FieldByName('BranchNCode').AsFloat;
		ParamByName('AccKbn').AsInteger := Mem.FieldByName('AccKbn').AsInteger;					// 預金種別
		if Mem.FieldByName('AccNo').AsString <> '' then											// 口座番号
		begin
            if (Length(Trim(Mem.FieldByName('AccNo').AsString)) > 7) then
    			ParamByName('AccNo').AsString := Mem.FieldByName('AccNo').AsString
            else
    			ParamByName('AccNo').AsString := Format('%.7d',[Mem.FieldByName('AccNo').AsInteger]);
		end;
		ParamByName('TranKana').AsString  := Mem.FieldByName('TransKanaName').AsString;			// ｶﾅ振込先名
		ParamByName('ChaFutan').AsInteger := Mem.FieldByName('ChargeFutan'  ).AsInteger;		// 手数料負担区
		ParamByName('ChaKbn').AsInteger   := Mem.FieldByName('ChargeKbn'  ).AsInteger;		    // 手数料計算区<203>
		ParamByName('VFree1').AsString    := Mem.FieldByName('VFree1').AsString;			    // フリー項目
		ParamByName('VFree2').AsString    := Mem.FieldByName('VFree2').AsString;
		ParamByName('VFree3').AsString    := Mem.FieldByName('VFree3').AsString;
		ParamByName('VFree4').AsString    := Mem.FieldByName('VFree4').AsString;
		ParamByName('VFree5').AsString    := Mem.FieldByName('VFree5').AsString;
// <196> ADD-END
    	ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;					// 更新担当者内部ｺｰﾄﾞ<160>


		if (not ExecSQL()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);									// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	支払詳細情報ﾏｽﾀ詳細情報更新処理(手形)
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	HC		:	補助ｺｰﾄﾞ
//*						Mem		:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailSyousaiInfoDraft(HC: String; Mem: TdxMemData): Boolean;
begin

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :NC AND ShiharaiSyubetu = :SS ');
		SQL.Add(' AND Edaban Between 11 AND 15 AND PayPtnNo = :PN ');
		SQL.Add(' AND RDelKbn = 0 ');   // <144> Add
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('NC').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('SS').AsInteger	:= PAYTYPE_DRAFT;
		ParamByName('PN').AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;

		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);        // ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (not EOF) then
		begin
			Close();
			SQL.Clear();

			SQL.Add('UPDATE PayDetailInfo SET ');
			SQL.Add('AccNCode = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	                                    // 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');
			SQL.Add(',TegYusouKbn = :YusoKbn,TegYusouFutan = :YusoFutan,TegBunkatuMax = :Bunkatu ');
			SQL.Add(',UpdTantoNCode = :UpdTantoNCode ');
			SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu ');
    		SQL.Add(' AND Edaban Between 11 AND 15  AND PayPtnNo = :PN ');
    		SQL.Add(' AND RDelKbn = 0 ');   // <144> Add

            ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;								 		// ﾏｽﾀ区分
            ParamByName('NCode' ).AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
            ParamByName('Syu'   ).AsInteger := PAYTYPE_DRAFT;								 		// 支払種別
            ParamByName('PN'    ).AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;               // 条件ﾊﾟﾀｰﾝNo

            if Mem.FieldByName('IraiAccNo').IsNull = False then	                                    // 依頼口座ｺｰﾄﾞ
            	ParamByName('Irai').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiAccNo').AsInteger);

            ParamByName('YusoKbn'  ).AsInteger := Mem.FieldByName('YusoKbn'  ).AsInteger;			// 郵送区分
            ParamByName('YusoFutan').AsInteger := Mem.FieldByName('YusoFutan').AsInteger;			// 郵送料負担区分
            ParamByName('Bunkatu'  ).AsInteger := Mem.FieldByName('Bunkatu'  ).AsInteger;			// 分割枚数
        	ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;		                			// 更新担当者内部ｺｰﾄﾞ<160>

            if (not ExecSQL()) then
            begin
            	m_cDataModule.Rollback(m_cDBSelect);    // ﾛｰﾙﾊﾞｯｸ(破棄)
            	fnErrorMessageDsp(m_Qe);
            	Result := FALSE;
            	Exit;
            end;
		end;
	end;
	Result := TRUE;                                     // 正常終了
end;

//**********************************************************************
//*		Proccess	:	小切手情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetCheckInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;

	DSCheck.DataSet := nil;

	MemCheck.Close;
	MemCheck.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode,DI.TegYusouKbn,DI.TegYusouFutan');
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo');
		SQL.Add(',MA.SimpleName as BANK ');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelkbn = 0 AND AI.NCode = MA.BankNCode) ');
		SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '); // <121>
		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 4 AND MT.RDelKbn = 0');   // <121>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL := 'SELECT '
		        + 'ISNULL(PD.PayNCode, 0) AS PayNCode '                 //支払先内部ｺｰﾄﾞ
		        + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
		        + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
		        + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
		        + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先口座内部ｺｰﾄﾞ
		        + ',ISNULL(DI.TegYusouKbn, 0) AS TegYusouKbn '          //小切手郵送区分
		        + ',ISNULL(DI.TegYusouFutan, 0) AS TegYusouFutan '      //小切手郵送料負担区分
		        + ',ISNULL(AI.Acckbn, 0) as YOKIN '                     //預金種目
		        + ',ISNULL(AI.AccNo, '''') as KOZA '                    //口座番号
		        + ',ISNULL(AI.GCode, 0) as IraiAccNo '                  //依頼先口座
		        + ',ISNULL(BI.SimpleName, '''') as BANK '
		        + 'FROM PayPtnDtl PD '
		        + 'LEFT OUTER JOIN PayDetailInfo DI '
		        + 'ON (DI.MasterKbn = PD.MasterKbn '
		        + 'AND DI.PayNCode = PD.PayNCode '
		        + 'AND DI.PayPtnNo = PD.PayPtnNo '
		        + 'AND DI.Edaban  = 1 '
		        + 'AND DI.RDelKbn = 0 ' // <144> Add
		        + 'AND PD.HouHou = DI.ShiharaiSyubetu) '
// <199> MOD-STR
//              + 'LEFT OUTER JOIN MTOKUI MT '
//              + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'INNER JOIN MTOKUI MT '
                + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) '
// <199> MOD-END
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
		        + 'LEFT OUTER JOIN AccInfo AI '
		        + 'ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
		        + 'LEFT OUTER JOIN BankInfo BI '
		        + 'ON (BI.NCode = AI.BankNCode) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
		        + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
		        + ' AND PD.HouHou  = 4 '
		        + ' AND PD.RDelKbn = 0 '    // <144> Add
		        + ' AND MT.RDelKbn = 0 ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

            strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

		SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemCheck.Append;

// <142> 2007/02/20 H.Kawato Mod
//			strHojCode := FieldByName ('GCode').AsString;
			strHojCode := FieldByName ('PayCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
			    	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);

			end;

// <142> 2007/02/20 H.Kawato Mod Start
{
            MemCheck.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode').AsFloat;
			MemCheck.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
			MemCheck.FieldByName('BaseHojCode').AsString := FieldByName('GCode'     ).AsString;	// 補助ｺｰﾄﾞ
			MemCheck.FieldByName('SName'      ).AsString := FieldByName('NMK').AsString;        // 補助名称
			MemCheck.FieldByName('RenChar'    ).AsString := FieldByName('Renso'   ).AsString;	// 連想
}
            MemCheck.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'  ).Value;
			MemCheck.FieldByName('HojCode'    ).AsString := strHojCode;							// 補助ｺｰﾄﾞ
			MemCheck.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'   ).Value;	// 補助ｺｰﾄﾞ
			MemCheck.FieldByName('SName'      ).AsString := FieldByName('PayName'   ).Value;	// 補助名称
			MemCheck.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).Value;	// 連想

            MemCheck.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'  ).Value;	// 条件ﾊﾟﾀｰﾝNo

            strHojCode := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemCheck.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            MemCheck.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemCheck.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value    // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	MemCheck.FieldByName('PrjName'   ).AsString := 'その他';

            strHojCode := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemCheck.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            MemCheck.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemCheck.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                MemCheck.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			// 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		// 依頼口座
			   (FieldByName('IraiAccNo').Value <> 0) then			// 依頼口座
			begin
				MemCheck.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
//				MemCheck.FieldByName('AccNCode').AsFloat := FieldByName('AccNCode').AsFloat;
				sBankName := FieldByName('BANK').AsString;	// 銀行名称
				case FieldByName('YOKIN').AsInteger of		// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				MemCheck.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				MemCheck.FieldByName('AccInfo').AsString := '';

			MemCheck.FieldByName('YusoData'     ).AsInteger := FieldByName('TegYusouKbn'  ).AsInteger;	// 郵送区分
			MemCheck.FieldByName('YusoFutanData').AsInteger := FieldByName('TegYusouFutan').AsInteger;	// 郵送料負担区分

			MemCheck.Post;
			next;
		end;
	end;
	MemCheck.First;

	DSCheck.DataSet := MemCheck;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_CHECK,MemCheck);
end;

//**********************************************************************
//*		Proccess	:	支払詳細情報ﾏｽﾀ更新処理(小切手)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	HC		:	補助ｺｰﾄﾞ
//*						Mem		:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailInfoCheck(HC: String; Mem: TdxMemData): Boolean;
begin

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
{
		SQL.Add('SELECT GCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND GCode = :HC AND ShiharaiSyubetu = :SS AND Edaban = 1');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('HC').AsString	:= HC;
		ParamByName('SS').AsInteger	:= PAYTYPE_CHECK;
}

		SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :NC AND ShiharaiSyubetu = :SS AND Edaban = 1');
		SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
		SQL.Add(' AND RDelKbn  = 0 ');      // <144> Add
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('NC').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('SS').AsInteger	:= PAYTYPE_CHECK;
		ParamByName('PN').AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;   // <142> Add

		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();
{
			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,GCode,ShiharaiSyubetu,Edaban');
			SQL.Add(',IraiAccNo,TegYusouKbn,TegYusouFutan)');
			SQL.Add('VALUES(:MasKbn,:GCode,:Syu,1');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
			SQL.Add(',:YusoKbn,:YusoFutan)');
}

			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu,Edaban');
// <142> 2007/02/20 H.Kawato Mod
//			SQL.Add(',AccNCode,TegYusouKbn,TegYusouFutan)');
			SQL.Add(',AccNCode,TegYusouKbn,TegYusouFutan, PayPtnNo');
			SQL.Add(',UpdTantoNCode)'); // <160>
			SQL.Add('VALUES(:MasKbn,:NCode,:Syu,1');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
// <142> 2007/02/20 H.Kawato Mod
//			SQL.Add(',:YusoKbn,:YusoFutan)');
			SQL.Add(',:YusoKbn,:YusoFutan,:PN');
			SQL.Add(',:UpdTantoNCode)'); // <160>

		end
		else
		begin
			Close();
			SQL.Clear();

			SQL.Add('UPDATE PayDetailInfo SET ');
			SQL.Add('AccNCode = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');
			SQL.Add(',TegYusouKbn = :YusoKbn,TegYusouFutan = :YusoFutan ');
			SQL.Add(',UpdTantoNCode = :UpdTantoNCode '); // <160>
			SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
    		SQL.Add(' AND PayPtnNo = :PN ');    // <142> Add
    		SQL.Add(' AND RDelKbn  = 0 ');      // <144> Add
		end;

		ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;							// ﾏｽﾀ区分
		ParamByName('NCode' ).AsFloat   := Mem.FieldByName('PayNCode').AsFloat;		// 支払先ｺｰﾄﾞ
		ParamByName('Syu'   ).AsInteger := PAYTYPE_CHECK;							// 支払種別
		ParamByName('PN'    ).AsInteger	:= Mem.FieldByName('PayPtnNo').AsInteger;   // 条件ﾊﾟﾀｰﾝNo  <142> Add

		if Mem.FieldByName('IraiAccNo').IsNull = False then	// 依頼口座ｺｰﾄﾞ
//<100>	 	ParamByName('Irai').AsInteger := Mem.FieldByName('IraiAccNo').AsInteger;
			ParamByName('Irai').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiAccNo').AsInteger);

		ParamByName('YusoKbn'  ).AsInteger := Mem.FieldByName('YusoKbn'  ).AsInteger;			// 郵送区分
		ParamByName('YusoFutan').AsInteger := Mem.FieldByName('YusoFutan').AsInteger;			// 郵送料負担区分
    	ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;					// 更新担当者内部ｺｰﾄﾞ<160>

		if (not ExecSQL()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);									// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	相殺情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetOffsetInfo();
var
	nPosition		: Integer;
	sSeqCD			: String;
    nUse            : Integer;
	nAdoption	    : Integer;
	nAttribute	    : Integer;
	nDigit		    : Integer;
	strDescription  : String;
    strGCode        : String;
    lvMasterKbn     : Integer;      //<114>
    i               : Integer;      //<114>
    fUse            : Boolean;
    strSQL          : String;       //<142> 2007/02/20 H.Kawato Add
    strHojCode      : String;       //<142> 2007/02/20 H.Kawato Add
    strFormat       : String;       //<142> 2007/02/20 H.Kawato Add
begin

	m_bChange := True;

	DSOffset.DataSet := nil;

	MemOffset.Close ();
	MemOffset.Open  ();

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PO.SousaiNo,PO.HojKbn1,PO.HojKbn2,PO.FeeTaxCd,PO.FeeTaxRt,PO.SousaiKin,');
        SQL.Add('PO.PayNCode,MT.GCode,MT.NMK,                                   ');             // 支払先（内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）
        SQL.Add('PO.KmkNCode, KA1.GCode    As KmkGCode,KA1.SimpleName As KmkNM,     ');         // 科目　（内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）

        SQL.Add('KA1.SubKmkUse,KA1.BmnUse, KA1.BPKbn,');
        SQL.Add('KA1.BankUse,KA1.ToriUse, KA1.ShainUse,');                                      // <104>
        SQL.Add('KA1.HojyoUse1, KA1.HojyoUse2, KA1.HojyoUse3, KA1.HojyoUse4, KA1.HojyoUse5,');  // <104>
        SQL.Add('KA1.SegUse1,KA1.SegUse2,KA1.SegUse3,KA1.SegUse4,KA1.SegUse5,');
        SQL.Add('KA1.SegUse6,KA1.SegUse7,KA1.SegUse8,KA1.SegUse9,KA1.SegUse10,');
        SQL.Add('KA1.PrjUse1,KA1.PrjUse2,KA1.PrjUse3,KA1.PrjUse4,KA1.PrjUse5,');
        SQL.Add('KA1.PrjUse6,KA1.PrjUse7,KA1.PrjUse8,KA1.PrjUse9,KA1.PrjUse10,');

        SQL.Add('PO.SubNCode, KA2.SubCode  As SbGCode, KA2.SImpleName As SbNM,      ');         // 科目補助（内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）
        SQL.Add('PO.BmnNCode,MA1.GCode As BmnGCode,MA1.SimpleName As BmnNM,     ');             // 部門  　（内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）
        SQL.Add('PO.SegNCode,MA2.GCode As SegGCode,MA2.SimpleName As SegNM,     ');             // ｾｸﾞﾒﾝﾄ　（内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）
        SQL.Add('PO.Hoj1NCode,PO.Hoj2NCode,');
        SQL.Add('PO.KojNCode, MA5.GCode As KojGCode, MA5.SimpleName As KojNM,  ');              // 工事    （内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）
        SQL.Add('PO.KsyNCode, MA6.GCode As KsyGCode, MA6.SimpleName As KsyNM   ');              // 工種    （内部ｺｰﾄﾞ 外部ｺｰﾄﾞ 簡略名称）
		SQL.Add('FROM PayOffsetInfo PO                                       ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT   ON (PO.PayNCode  = MT.NCode )   ');
		SQL.Add('LEFT OUTER JOIN KmkMA KA1   ON (PO.KmkNCode  = KA1.NCode And KA1.RDelKbn =0  and KA1.MasterKbn = 1) ');
		SQL.Add('LEFT OUTER JOIN KmkMA KA2   ON (PO.SubNCode  = KA2.cNCode And PO.KmkNCode = KA2.NCode and KA2.RDelKbn =0  and KA2.MasterKbn = 2) ');
		SQL.Add('LEFT OUTER JOIN HojyoMA MA1 ON (PO.BmnNCode  = MA1.NCode)   ');
		SQL.Add('LEFT OUTER JOIN HojyoMA MA2 ON (PO.SegNCode  = MA2.NCode)   ');
		SQL.Add('LEFT OUTER JOIN HojyoMA MA5 ON (PO.KojNCode  = MA5.NCode)   ');
		SQL.Add('LEFT OUTER JOIN HojyoMA MA6 ON (PO.KsyNCode  = MA6.NCode)   ');
		SQL.Add('WHERE  PO.MasterKbn = :MK AND ((PO.KmkNCode IS NOT NULL) or (PO.KmkNCode <> 0)) ');
        SQL.Add('And (KmkGCode Is Not Null)                                  ');
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode,PO.SousaiNo');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
}
		strSQL := 'SELECT '
                + 'ISNULL(PO.SousaiNo, 0) AS SousaiNo, '                // 相殺No
                + 'ISNULL(PO.HojKbn1, 0) AS HojKbn1, '                  // 第一補助区分
                + 'ISNULL(PO.HojKbn2, 0) AS HojKbn2, '                  // 第二補助区分
                + 'ISNULL(PO.FeeTaxCd, 0) AS FeeTaxCd, '                // 消費税ｺｰﾄﾞ
                + 'ISNULL(PO.FeeTaxRt, 0) AS FeeTaxRt, '                // 消費税率ｺｰﾄﾞ
                + 'ISNULL(KA1.TaxKbn, 0) AS TaxKbn, '                   // 消費税科目区分
                + 'ISNULL(PO.SousaiKin, 0) AS SousaiKin, '              // 相殺金額
                + 'ISNULL(MT.NCode, 0) AS PayNCode, '                   // 支払先（内部ｺｰﾄﾞ）
                + 'ISNULL(MT.GCode, '''') AS PayCode, '                 // 支払先（外部ｺｰﾄﾞ）
                + 'ISNULL(MT.NMK, '''') AS PayName, '                   // 支払先（簡略名称）
                + 'ISNULL(PT.PayPtnNo, 1) AS PayPtnNo, '                //条件ﾊﾟﾀｰﾝNo
                + 'ISNULL(PT.PrjNCode, 0) AS PrjNCode, '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + 'ISNULL(MA7.GCode, '''') AS PrjGCode, '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + 'ISNULL(MA7.SimpleName, '''') AS PrjName, '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + 'ISNULL(PT.PjSubNCode, 0) AS PjSubNCode, '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + 'ISNULL(MA8.GCode, '''') AS PjSubGCode, '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + 'ISNULL(MA8.SimpleName, '''') AS PjSubName, '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + 'ISNULL(MA7.GCode, ''その他'') AS SortPrjGCode, '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + 'ISNULL(MA8.GCode, ''その他'') AS SortPjSubGCode, '   //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + 'ISNULL(PO.KmkNCode, 0) AS KmkNCode, '                // 科目　（内部ｺｰﾄﾞ）
                + 'ISNULL(KA1.GCode, 0) As KmkGCode, '                  // 科目　（外部ｺｰﾄﾞ）
                + 'ISNULL(KA1.SimpleName, '''') As KmkNM, '             // 科目　（簡略名称）
                + 'ISNULL(KA1.SubKmkUse, 0) AS SubKmkUse, '             // 科目別補助採用区分
                + 'ISNULL(KA1.BmnUse, 0) AS BmnUse, '                   // 部門採用区分
                + 'ISNULL(KA1.BPKbn, 0) AS BPKbn, '                     // BS/PL区分
                + 'ISNULL(KA1.BankUse, 0) AS BankUse, '                 // 銀行採用
                + 'ISNULL(KA1.ToriUse, 0) AS ToriUse, '                 // 取引先採用
                + 'ISNULL(KA1.ShainUse, 0) AS ShainUse, '               // 社員採用
                + 'ISNULL(KA1.HojyoUse1, 0) AS HojyoUse1, '             // 汎用補助1採用
                + 'ISNULL(KA1.HojyoUse2, 0) AS HojyoUse2, '             // 汎用補助2採用
                + 'ISNULL(KA1.HojyoUse3, 0) AS HojyoUse3, '             // 汎用補助3採用
                + 'ISNULL(KA1.HojyoUse4, 0) AS HojyoUse4, '             // 汎用補助4採用
                + 'ISNULL(KA1.HojyoUse5, 0) AS HojyoUse5, '             // 汎用補助5採用
                + 'ISNULL(KA1.SegUse1, 0) AS SegUse1, '                 // セグメント 1採用区分
                + 'ISNULL(KA1.SegUse2, 0) AS SegUse2, '                 // セグメント 2採用区分
                + 'ISNULL(KA1.SegUse3, 0) AS SegUse3, '                 // セグメント 3採用区分
                + 'ISNULL(KA1.SegUse4, 0) AS SegUse4, '                 // セグメント 4採用区分
                + 'ISNULL(KA1.SegUse5, 0) AS SegUse5, '                 // セグメント 5採用区分
                + 'ISNULL(KA1.SegUse6, 0) AS SegUse6, '                 // セグメント 6採用区分
                + 'ISNULL(KA1.SegUse7, 0) AS SegUse7, '                 // セグメント 7採用区分
                + 'ISNULL(KA1.SegUse8, 0) AS SegUse8, '                 // セグメント 8採用区分
                + 'ISNULL(KA1.SegUse9, 0) AS SegUse9, '                 // セグメント 9採用区分
                + 'ISNULL(KA1.SegUse10, 0) AS SegUse10, '               // セグメント10採用区分
                + 'ISNULL(KA1.PrjUse1, 0) AS PrjUse1, '                 // プロジェクト 1採用区分
                + 'ISNULL(KA1.PrjUse2, 0) AS PrjUse2, '                 // プロジェクト 2採用区分
                + 'ISNULL(KA1.PrjUse3, 0) AS PrjUse3, '                 // プロジェクト 3採用区分
                + 'ISNULL(KA1.PrjUse4, 0) AS PrjUse4, '                 // プロジェクト 4採用区分
                + 'ISNULL(KA1.PrjUse5, 0) AS PrjUse5, '                 // プロジェクト 5採用区分
                + 'ISNULL(KA1.PrjUse6, 0) AS PrjUse6, '                 // プロジェクト 6採用区分
                + 'ISNULL(KA1.PrjUse7, 0) AS PrjUse7, '                 // プロジェクト 7採用区分
                + 'ISNULL(KA1.PrjUse8, 0) AS PrjUse8, '                 // プロジェクト 8採用区分
                + 'ISNULL(KA1.PrjUse9, 0) AS PrjUse9, '                 // プロジェクト 9採用区分
                + 'ISNULL(KA1.PrjUse10, 0) AS PrjUse10, '               // プロジェクト10採用区分
                + 'ISNULL(PO.SubNCode, 0) AS SubNCode, '                // 科目補助（内部ｺｰﾄﾞ）
                + 'ISNULL(KA2.SubCode, '''') As SbGCode, '              // 科目補助（外部ｺｰﾄﾞ）
                + 'ISNULL(KA2.SImpleName, '''') As SbNM, '              // 科目補助（簡略名称）
                + 'ISNULL(PO.BmnNCode, 0) AS BmnNCode, '                // 部門  　（内部ｺｰﾄﾞ）
                + 'ISNULL(MA1.GCode, '''') As BmnGCode, '               // 部門  　（外部ｺｰﾄﾞ）
                + 'ISNULL(MA1.SimpleName, '''') As BmnNM, '             // 部門  　（簡略名称）
                + 'ISNULL(PO.SegNCode, 0) AS SegNCode, '                // ｾｸﾞﾒﾝﾄ　（内部ｺｰﾄﾞ）
                + 'ISNULL(MA2.GCode, '''') As SegGCode, '               // ｾｸﾞﾒﾝﾄ　（外部ｺｰﾄﾞ）
                + 'ISNULL(MA2.SimpleName, '''') As SegNM, '             // ｾｸﾞﾒﾝﾄ　（簡略名称）
                + 'ISNULL(PO.Hoj1NCode, 0) AS Hoj1NCode, '              // 第一補助内部ｺｰﾄﾞ
                + 'ISNULL(PO.Hoj2NCode, 0) AS Hoj2NCode, '              // 第二補助内部ｺｰﾄﾞ
                + 'ISNULL(PO.KojNCode, 0) AS KojNCode, '                // 工事    （内部ｺｰﾄﾞ）
                + 'ISNULL(MA5.GCode, '''') As KojGCode, '               // 工事    （外部ｺｰﾄﾞ）
                + 'ISNULL(MA5.SimpleName, '''') As KojNM, '             // 工事    （簡略名称）
                + 'ISNULL(PO.KsyNCode, 0) AS KsyNCode, '                // 工種    （内部ｺｰﾄﾞ）
                + 'ISNULL(MA6.GCode, '''') As KsyGCode, '               // 工種    （外部ｺｰﾄﾞ）
                + 'ISNULL(MA6.SimpleName, '''') As KsyNM, '             // 工種    （簡略名称）
                + 'ISNULL(KI.PartKbn, 0) As HojPartKbn '                // 工種管理区分
// <181> ADD-STR
                +',PO.CKmkNCode, PO.CSubNCode, PO.CBmnNCode, '
                + 'PO.CSegNCode1, PO.CSegNCode2, PO.CSegNCode3, PO.CSegNCode4, PO.CSegNCode5, '
                + 'PO.CSegNCode6, PO.CSegNCode7, PO.CSegNCode8, PO.CSegNCode9, PO.CSegNCode10, '
                + 'PO.CBankNCode, PO.CCsNCode, PO.CEmpNCode, '
                + 'PO.CMulNCode1, PO.CMulNCode2, PO.CMulNCode3, PO.CMulNCode4, PO.CMulNCode5, '
                + 'PO.CPrjNCode1, PO.CPrjNCode2, PO.CPrjNCode3, PO.CPrjNCode4, PO.CPrjNCode5, '
                + 'PO.CPrjNCode6, PO.CPrjNCode7, PO.CPrjNCode8, PO.CPrjNCode9, PO.CPrjNCode10, '
                + 'PO.CPjSubNCode1, PO.CPjSubNCode2, PO.CPjSubNCode3, PO.CPjSubNCode4, PO.CPjSubNCode5, '
                + 'PO.CPjSubNCode6, PO.CPjSubNCode7, PO.CPjSubNCode8, PO.CPjSubNCode9, PO.CPjSubNCode10 '
// <181> ADD-END
                + 'FROM PayOffsetInfo PO '
// <199> MOD-STR
//              + 'LEFT OUTER JOIN MTOKUI MT   ON (PO.PayNCode  = MT.NCode ) '
                + 'INNER JOIN MTOKUI MT '
                + 'ON (PO.PayNCode = MT.NCode AND MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0) '
// <199> MOD-END
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PO.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN KmkMA KA1   ON (PO.KmkNCode  = KA1.NCode And KA1.RDelKbn =0  and KA1.MasterKbn = 1) '
                + 'LEFT OUTER JOIN KmkMA KA2   ON (PO.SubNCode  = KA2.cNCode And PO.KmkNCode = KA2.NCode and KA2.RDelKbn =0  and KA2.MasterKbn = 2) '
// <149> 2007/07/19 H.Kawato Mod Start
{
                + 'LEFT OUTER JOIN HojyoMA MA1 ON (PO.BmnNCode  = MA1.NCode) '
                + 'LEFT OUTER JOIN HojyoMA MA2 ON (PO.SegNCode  = MA2.NCode) '
                + 'LEFT OUTER JOIN HojyoMA MA5 ON (PO.KojNCode  = MA5.NCode) '
                + 'LEFT OUTER JOIN HojyoMA MA6 ON (PO.KsyNCode  = MA6.NCode) '
}
                + 'LEFT OUTER JOIN HojyoMA MA1 ON (PO.BmnNCode  = MA1.NCode AND MA1.MasterKbn = 41) '
                // 会社で採用している、かつ科目で採用しているｾｸﾞﾒﾝﾄの中で先頭のマスタ区分を指定する
                + 'LEFT OUTER JOIN HojyoMA MA2 ON (PO.SegNCode  = MA2.NCode AND MA2.MasterKbn = (SELECT '
                + ' (IF (ISNULL(KA1.SegUse1, 0) > 0) AND ((SELECT ISNULL(MT1.UseKbn, 0) FROM MasterInfo AS MT1 WHERE MasterKbn = 101) > 0) THEN 101 ELSE '
                + ' (IF (ISNULL(KA1.SegUse2, 0) > 0) AND ((SELECT ISNULL(MT2.UseKbn, 0) FROM MasterInfo AS MT2 WHERE MasterKbn = 102) > 0) THEN 102 ELSE '
                + ' (IF (ISNULL(KA1.SegUse3, 0) > 0) AND ((SELECT ISNULL(MT3.UseKbn, 0) FROM MasterInfo AS MT3 WHERE MasterKbn = 103) > 0) THEN 103 ELSE '
                + ' (IF (ISNULL(KA1.SegUse4, 0) > 0) AND ((SELECT ISNULL(MT4.UseKbn, 0) FROM MasterInfo AS MT4 WHERE MasterKbn = 104) > 0) THEN 104 ELSE '
                + ' (IF (ISNULL(KA1.SegUse5, 0) > 0) AND ((SELECT ISNULL(MT5.UseKbn, 0) FROM MasterInfo AS MT5 WHERE MasterKbn = 105) > 0) THEN 105 ELSE '
                + ' (IF (ISNULL(KA1.SegUse6, 0) > 0) AND ((SELECT ISNULL(MT6.UseKbn, 0) FROM MasterInfo AS MT6 WHERE MasterKbn = 106) > 0) THEN 106 ELSE '
                + ' (IF (ISNULL(KA1.SegUse7, 0) > 0) AND ((SELECT ISNULL(MT7.UseKbn, 0) FROM MasterInfo AS MT7 WHERE MasterKbn = 107) > 0) THEN 107 ELSE '
                + ' (IF (ISNULL(KA1.SegUse8, 0) > 0) AND ((SELECT ISNULL(MT8.UseKbn, 0) FROM MasterInfo AS MT8 WHERE MasterKbn = 108) > 0) THEN 108 ELSE '
                + ' (IF (ISNULL(KA1.SegUse9, 0) > 0) AND ((SELECT ISNULL(MT9.UseKbn, 0) FROM MasterInfo AS MT9 WHERE MasterKbn = 109) > 0) THEN 109 ELSE '
                + ' (IF (ISNULL(KA1.SegUse10, 0) > 0) AND ((SELECT ISNULL(MT10.UseKbn, 0) FROM MasterInfo AS MT10 WHERE MasterKbn = 110) > 0) THEN 110 ELSE '
                + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF))) '
                // 会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄの中で先頭のマスタ区分を指定する
                + 'LEFT OUTER JOIN HojyoMA MA5 ON (PO.KojNCode  = MA5.NCode AND MA5.MasterKbn = (SELECT '
                + ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) THEN 201 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) THEN 202 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) THEN 203 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) THEN 204 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) THEN 205 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) THEN 206 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) THEN 207 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) THEN 208 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) THEN 209 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) THEN 210 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) THEN 201 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) THEN 202 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) THEN 203 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) THEN 204 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) THEN 205 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) THEN 206 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) THEN 207 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) THEN 208 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) THEN 209 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) THEN 210 ELSE '
                + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF))) '
                // 会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄｻﾌﾞの中で先頭のマスタ区分を指定する
                + 'LEFT OUTER JOIN HojyoMA MA6 ON (PO.KsyNCode  = MA6.NCode) AND MA6.MasterKbn = (SELECT '
                + ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE '
                + ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE '
                + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) '
// <149> 2007/07/19 H.Kawato Mod End
                + 'LEFT OUTER JOIN HojyoMA MA7 '
                + ' ON (MA7.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND MA7.NCode = PT.PrjNCode '
                + ' AND MA7.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA MA8 '
                + ' ON (MA8.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND MA8.NCode = PT.PjSubNCode '
                + ' AND MA8.RDelKbn = 0) '
                + 'LEFT OUTER JOIN KojiInfo KI ON (PO.KojNCode  = KI.NCode) '
                + 'WHERE  PO.MasterKbn = '  + IntToStr(MASTER_CUSTOMER)
                + ' AND PO.RDelKbn = 0 '    // <144> Add
                + ' AND ((PO.KmkNCode IS NOT NULL) or (PO.KmkNCode <> 0)) '
                + ' And (KA1.GCode Is Not Null) ';

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode,PO.SousaiNo ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kwato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemOffset.Append;
// <142> 2007/02/20 H.Kawato Mod Start
{
			MemOffset.FieldByName('PayNCode'   ).AsFloat   := FieldByName('PayNCode'  ).AsFloat ;	// 支払先Nｺｰﾄﾞ
			MemOffset.FieldByName('KmNCode'    ).AsFloat   := FieldByName('KmkNCode'  ).AsFloat ;	// 科目Nｺｰﾄﾞ
			MemOffset.FieldByName('SbNCode'    ).AsFloat   := FieldByName('SubNCode'  ).AsFloat ;	// 補助Nｺｰﾄﾞ
			MemOffset.FieldByName('BmnNCode'   ).AsFloat   := FieldByName('BmnNCode'  ).AsFloat ;	// 部門Nｺｰﾄﾞ
			MemOffset.FieldByName('SegNCode'   ).AsFloat   := FieldByName('SegNCode'  ).AsFloat ;	// ｾｸﾞﾒﾝﾄNｺｰﾄﾞ
			MemOffset.FieldByName('Hoj1NCode'  ).AsFloat   := FieldByName('Hoj1NCode' ).AsFloat ;	// 補助1Nｺｰﾄﾞ
			MemOffset.FieldByName('Hoj2NCode'  ).AsFloat   := FieldByName('Hoj2NCode' ).AsFloat ;	// 補助2Nｺｰﾄﾞ

			MemOffset.FieldByName('KojNCode'  ).AsFloat    := FieldByName('KojNCode'  ).AsFloat ;	// 工事Nｺｰﾄﾞ
			MemOffset.FieldByName('KsyNCode'  ).AsFloat    := FieldByName('KsyNCode'  ).AsFloat ;	// 工種Nｺｰﾄﾞ

			MemOffset.FieldByName('strHojCode' ).AsString  := FieldByName('GCode'     ).AsString;	// 支払先ｺｰﾄﾞ
			MemOffset.FieldByName('BaseHojCode').AsString  := FieldByName('GCode'     ).AsString;	// 支払先ｺｰﾄﾞ
			MemOffset.FieldByName('strHojName' ).AsString  := FieldByName('NMK'       ).AsString;	// 支払先名称
			MemOffset.FieldByName('nSeqNo'     ).AsInteger := FieldByName('SousaiNo'  ).AsInteger;	// 相殺No
			MemOffset.FieldByName('nKmkCode'   ).AsInteger := FieldByName('KmkGCode'  ).AsInteger;	// 科目ｺｰﾄﾞ
}
			MemOffset.FieldByName('PayNCode'   ).AsFloat   := FieldByName('PayNCode'  ).Value;      // 支払先Nｺｰﾄﾞ


			MemOffset.FieldByName('KmNCode'    ).AsFloat   := FieldByName('KmkNCode'  ).Value;	    // 科目Nｺｰﾄﾞ
			MemOffset.FieldByName('SbNCode'    ).AsFloat   := FieldByName('SubNCode'  ).Value;	    // 補助Nｺｰﾄﾞ
			MemOffset.FieldByName('BmnNCode'   ).AsFloat   := FieldByName('BmnNCode'  ).Value;	    // 部門Nｺｰﾄﾞ
			MemOffset.FieldByName('SegNCode'   ).AsFloat   := FieldByName('SegNCode'  ).Value;	    // ｾｸﾞﾒﾝﾄNｺｰﾄﾞ
			MemOffset.FieldByName('Hoj1NCode'  ).AsFloat   := FieldByName('Hoj1NCode' ).Value;	    // 補助1Nｺｰﾄﾞ
			MemOffset.FieldByName('Hoj2NCode'  ).AsFloat   := FieldByName('Hoj2NCode' ).Value;	    // 補助2Nｺｰﾄﾞ

			MemOffset.FieldByName('KojNCode'  ).AsFloat    := FieldByName('KojNCode'  ).Value;	    // 工事Nｺｰﾄﾞ
			MemOffset.FieldByName('KsyNCode'  ).AsFloat    := FieldByName('KsyNCode'  ).Value;	    // 工種Nｺｰﾄﾞ

			MemOffset.FieldByName('ExNCode'    ).AsFloat   := FieldByName('PayNCode'  ).Value;	    // 支払先内部ｺｰﾄﾞ <142> Add
			MemOffset.FieldByName('strHojCode' ).AsString  := FieldByName('PayCode'   ).Value;	    // 支払先ｺｰﾄﾞ
			MemOffset.FieldByName('BaseHojCode').AsString  := FieldByName('PayCode'   ).Value;	    // 支払先ｺｰﾄﾞ
			MemOffset.FieldByName('strHojName' ).AsString  := FieldByName('PayName'   ).Value;	    // 支払先名称
			MemOffset.FieldByName('nSeqNo'     ).AsInteger := FieldByName('SousaiNo'  ).Value;	    // 相殺No
			MemOffset.FieldByName('nKmkCode'   ).AsInteger := FieldByName('KmkGCode'  ).Value;	    // 科目ｺｰﾄﾞ

            MemOffset.FieldByName('PayPtnNo'   ).AsInteger := FieldByName('PayPtnNo'   ).Value;	    // 条件ﾊﾟﾀｰﾝNo

            strHojCode := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemOffset.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;	    // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            MemOffset.FieldByName('PrjGCode'  ).AsString := strHojCode;							    // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemOffset.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value       // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	MemOffset.FieldByName('PrjName'   ).AsString := 'その他';

            strHojCode := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            MemOffset.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;       // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            MemOffset.FieldByName('PjSubGCode').AsString := strHojCode;                             // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(strHojCode) <> '') then
            	MemOffset.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                MemOffset.FieldByName('PjSubName' ).AsString := 'その他';

			sSeqCD := FieldByName('PayCode').AsString+FieldByName('PrjGCode').AsString;
			MemOffset.FieldByName('strPrjCD').AsString := sSeqCD;
// <142> 2007/02/20 H.Kawato Mod End

			// Selecter検索用ｺｰﾄﾞ(支払先ｺｰﾄﾞ(10桁)+相殺NO)
// <142> 2007/02/20 H.Kawato Mod
//			sSeqCD := FieldByName('GCode').AsString+IntToStr(FieldByName('SousaiNo').AsInteger);
   			sSeqCD := FieldByName('PayCode').AsString+FieldByName('PrjGCode').AsString+IntToStr(FieldByName('SousaiNo').AsInteger);

			MemOffset.FieldByName('strSeqCD').AsString := sSeqCD;
			MemOffset.FieldByName('strKmkDesc').AsString := FieldByName('KmkNM'       ).AsString;   // 科目名称
			nPosition	:= 1;

            // 第一第二補助の採用ﾏｽﾀを取得 <104>
            fnGetHojyoMA(m_Qe);

			// 部門
   			fnGetAdoptInformation (MASTER_SECTION, nAdoption, nDigit, nAttribute, strDescription);
  			if	(((FieldByName ('BmnUse').AsInteger <> 0) and (nAdoption <> 0)) and		// 部門採用区分: 1=あり
    			 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then

			begin
				MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := MASTER_SECTION;
				MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := FieldByName('BmnGCode').AsString;
				MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString :=
                                                             FieldByName('BmnNM'       ).AsString;	    // 部門名
				nPosition := nPosition + 1;
			end;

            fUse := False;                      // <142> Add
            lvMasterKbn := MASTER_CONSTRUCT;    // <142> Add

			// 工事 or ﾌﾟﾛｼﾞｪｸﾄ
			if (nPosition <= 3) then
			begin
       			fnGetAdoptInformation (MASTER_CONSTRUCT, nAdoption, nDigit, nAttribute, strDescription);

                nUse := MASTER_CONSTRUCT - 200;
                fUse := False;

                if (nUse >= 1) and (nUse <= 10) then
                begin
    	        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
        			begin
	        			MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := MASTER_CONSTRUCT;
		        		MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := FieldByName('KojGCode').AsString;
			        	MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString :=
                                                            FieldByName('KojNM').AsString;	    // 工事名称
        				nPosition := nPosition + 1;
                        fUse := True;
                    end;
                end;

                if fUse = False then
                begin
                    for i := 1 to 10 do
                    begin
                        lvMasterKbn := 200 + i;
                        if (lvMasterKbn <> MASTER_CONSTRUCT) then
                        begin
                            fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);
                            nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

// <142> 2007/02/20 H.Kawato Mod
//         		        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
         		        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
         			        begin
            			    	MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := lvMasterKbn;
			            	    MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := FieldByName('KojGCode').AsString;
                				MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString :=
                                                            FieldByName('KojNM').AsString;	    // ﾌﾟﾛｼﾞｪｸﾄﾄ名称
                				nPosition := nPosition + 1;
                                fUse := True;   // <142> Add
                                Break;
                            end;
                        end;
                    end;
	    		end;
            end;

// <142> 2007/02/20 H.Kawato Add Start
            MemOffset.FieldByName('nHojPartKbn').AsInteger := FieldByName('HojPartKbn').Value;

            // 工種/プロジェクトサブ
// <181> MOD-STR
//			if	(nPosition <= 2) and (FieldByName('KsyNCode').Value <> 0) then
			if	(nPosition <= 3) and (FieldByName('KsyNCode').Value <> 0) then
// <181> MOD-END
            begin
                if (fUse = True) then
                    lvMasterKbn := lvMasterKbn + 100
                else
                    lvMasterKbn := 0;

    			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                nUse := lvMasterKbn - 300;

                // 工種/プロジェクトサブの採用
                if ( nUse >= 1) and ( nUse <= 10 ) then
                begin
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
    			    begin
                        MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := lvMasterKbn;
                        MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := FieldByName('KsyGCode').AsString;
                        MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString  := FieldByName('KsyNM').AsString;

        				nPosition	:= nPosition + 1;
                    end;
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End


			// 科目別補助
   			fnGetAdoptInformation (MASTER_SUBJECTPLUS, nAdoption, nDigit, nAttribute, strDescription);
	    	if	((FieldByName ('SubKmkUse').AsInteger = 1) and (nAdoption <> 0)) then

			begin
				MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := MASTER_SUBJECTPLUS;
				MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := FieldByName('SbGCode').AsString;
				MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString :=
                                                             FieldByName('SbNM').AsString;	    // 科目別補助名称
				nPosition := nPosition + 1;
			end;

			// 第１補助
			if (nPosition <= 3) then
			begin
  				fnGetAdoptInformation (MASTER_HOJYO1,nAdoption, nDigit, nAttribute, strDescription);
   				if	(nAdoption <> 0) then
				begin
                    // <104>
                    strGCode := fnGetHojGCode(MASTER_HOJYO1, FieldByName('Hoj1NCode').AsFloat, strDescription);

					MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := FieldByName('HojKbn1').AsInteger;
					MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := strGCode;
					MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString  := strDescription;

					nPosition := nPosition + 1;
				end;
			end;

    		// 第２補助
			if (nPosition <= 3) then
			begin
  				fnGetAdoptInformation (MASTER_HOJYO2,nAdoption, nDigit, nAttribute, strDescription);
   				if	(nAdoption <> 0) then
				begin
                    // <104>
                    strGCode := fnGetHojGCode(MASTER_HOJYO2, FieldByName('Hoj2NCode').AsFloat, strDescription);

					MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := FieldByName('HojKbn2').AsInteger;
					MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := strGCode;
					MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString  := strDescription;

                    nPosition := nPosition + 1;     // <135> 2006/08/10 H.Kawato Add
				end;
			end;


   			// ｾｸﾞﾒﾝﾄ
			if (nPosition <= 3) then
            begin
                for i := 1 to 10 do
                begin
                    lvMasterKbn := 100 + i;

           			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);
                    nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

		        	if	(((FieldByName ('SegUse' + IntToStr(nUse)).AsInteger <> 0) and (nAdoption <> 0)) and
    		        	 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then

    		    	begin
    			    	MemOffset.FieldByName(Format('nDivision%.2d' ,[nPosition])).AsInteger := lvMasterKbn;
	    			    MemOffset.FieldByName(Format('strSubCode%.2d',[nPosition])).AsString  := FieldByName('SegGCode').AsString;
    	    			MemOffset.FieldByName(Format('strSubDesc%.2d',[nPosition])).AsString :=
                                                             FieldByName('SegNM').AsString;	    // ｾｸﾞﾒﾝﾄ名称
                        Break;
	    	    	end;
                end;
            end;

			MemOffset.FieldByName('nTaxKbn').AsInteger	:= FieldByName ('TaxKbn').Value;        // <142> Add

			// 消費税ｺｰﾄﾞ
			if (not FieldByName ('FeeTaxCd').IsNull) then
				MemOffset.FieldByName('nTaxCode').AsInteger	:= FieldByName ('FeeTaxCd').AsInteger;

			if ((FieldByName('FeeTaxCd').AsInteger = 30) or (FieldByName('FeeTaxCd').AsInteger = 40)) then
			begin
				MemOffset.FieldByName('nTaxRate'      ).Clear ();
				MemOffset.FieldByName('strTaxRateDesc').AsString := '';
// <#TAX10> ADD-STR
				MemOffset.FieldByName('strTaxCodePrt' ).AsString := '';
// <#TAX10> ADD-END
			end
			else
			begin
				// 消費税率ｺｰﾄﾞ
				if (not FieldByName ('FeeTaxRt').IsNull) then
				begin
					MemOffset.FieldByName('nTaxRate'      ).AsInteger := FieldByName('FeeTaxRt').AsInteger;
// <TX26> MOD-STR
//					MemOffset.FieldByName('strTaxRateDesc').AsString  := _TaxRateItems[FieldByName('FeeTaxRt').AsInteger];
// <#TAX10> MOD-STR
//					MemOffset.FieldByName('strTaxRateDesc').AsString  := m_TaxRateInfo.GetTaxNameByRateCD(FieldByName('FeeTaxRt').AsInteger);
					MemOffset.FieldByName('strTaxRateDesc').AsString  := fnGetTaxRateName(FieldByName ('FeeTaxRt').AsInteger);
					MemOffset.FieldByName('strTaxCodePrt' ).AsString  := m_TaxRateInfoFront.GetTaxNameByRateCD(m_nTaxKbn, 
																											   FieldByName('FeeTaxCd').AsInteger, 
																											   FieldByName('FeeTaxRt').AsInteger);
// <#TAX10> MOD-END
// <TX26> MOD-END
				end
				else
				begin
					MemOffset.FieldByName('nTaxRate'      ).Clear();
					MemOffset.FieldByName('strTaxRateDesc').AsString := '';
// <#TAX10> ADD-STR
					MemOffset.FieldByName('strTaxCodePrt' ).AsString := '';
// <#TAX10> ADD-END
				end;
			end;

			// 相殺金額
			if (not FieldByName('SousaiKin').IsNull) then
				MemOffset.FieldByName('nOffsetPrice').AsCurrency := FieldByName ('SousaiKin').Value;

// <181> ADD-STR
            // 内部コードエリアセット
            MemOffset.FieldByName('dCSubNCode').AsCurrency := FieldByName('CSubNCode').AsCurrency;
            MemOffset.FieldByName('dCBmnNCode').AsCurrency := FieldByName('CBmnNCode').AsCurrency;
            for i := 1 to 10 do
                MemOffset.FieldByName('dCSegNCode' + IntToStr(i)).AsCurrency := FieldByName('CSegNCode' + IntToStr(i)).AsCurrency;
            MemOffset.FieldByName('dCBankNCode').AsCurrency := FieldByName('CBankNCode').AsCurrency;
            MemOffset.FieldByName('dCCsNCode').AsCurrency := FieldByName('CCsNCode').AsCurrency;
            MemOffset.FieldByName('dCEmpNCode').AsCurrency := FieldByName('CEmpNCode').AsCurrency;
            for i := 1 to 5 do
                MemOffset.FieldByName('dCMulNCode' + IntToStr(i)).AsCurrency := FieldByName('CMulNCode' + IntToStr(i)).AsCurrency;
            for i := 1 to 10 do
                MemOffset.FieldByName('dCPrjNCode' + IntToStr(i)).AsCurrency := FieldByName('CPrjNCode' + IntToStr(i)).AsCurrency;
            for i := 1 to 10 do
                MemOffset.FieldByName('dCPjSubNCode' + IntToStr(i)).AsCurrency := FieldByName('CPjSubNCode' + IntToStr(i)).AsCurrency;
// <181> ADD-END
			MemOffset.Post();

			NEXT;
		end;
	end;

	MemOffset.First();
	DSOffset.DataSet := MemOffset;
	m_bChange := False;
end;
//**********************************************************************
//*		Proccess	:	科目ﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Kmk			:	科目ｺｰﾄﾞ
//*						(out)sRet	:	科目名称(簡略)
//*						(out)bRet	:	科目ﾁｪｯｸ結果
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnKmkCheck(Kmk: Integer; var sRet: String; var bRet: Boolean): Boolean;
var
	Qe: TMQuery;
begin
	Result := True;
	sRet   := '';

	// 複合科目又は資金複合科目の時
	if ((Kmk = m_nKmkCompound01) or (Kmk = m_nKmkCompound02)) then
	begin
		bRet := False;
		Exit;
	end;

	Qe := TMQuery.Create(Self);
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);							// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT SimpleName FROM KmkMA ');
			SQL.Add('WHERE MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND GCode = :KmkCD ');
			SQL.Add('AND SubCode = 0 AND AnalyzeCode <> 0 AND InputKbn <> 9');
			ParamByName('KmkCD').AsInteger := Kmk;

			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
				Result := False;
            	Exit;
			end;

			if (EOF) then
			begin
				bRet := False;
				Exit;
			end;

			sRet := FieldByName('SimpleName').AsString;
		end;

		bRet := True;	// ﾁｪｯｸOK
	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	科目別補助ﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Kmk			:	科目ｺｰﾄﾞ
//*						KmkHoj		:	科目別補助ｺｰﾄﾞ
//*						(out)sRet	:	科目別補助名称(簡略)
//*						(out)bRet	:	科目ﾁｪｯｸ結果
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
//function TJNTCRP004007f.fnKmkHojCheck(Kmk,KmkHoj: Integer; var sRet: String; var bRet: Boolean): Boolean;
function TJNTCRP004007f.fnKmkHojCheck(Kmk:Integer; KmkHoj:String;   var sRet: String;  var bRet: Boolean): Boolean;
var
	Qe	: TMQuery;
begin
	Result := True;
	sRet   := '';

	Qe := TMQuery.Create(Self);

	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);							// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT SimpleName FROM KmkMA ');
			SQL.Add('WHERE MasterKbn = 2 AND RDelKbn = 0 AND GCode = :KmkCD AND SubCode = :KmkHCD');
			ParamByName('KmkCD' ).AsInteger := Kmk;
			ParamByName('KmkHCD').AsString := KmkHoj;
			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
				Result := False;
            	Exit;
			end;

			if (EOF) then
			begin
				bRet := FALSE;
				Exit;
			end;

			sRet := FieldByName('SimpleName').AsString;
		end;
		bRet := TRUE;															// ﾁｪｯｸOK

	finally
		Qe.Close;
		Qe.Free;
	end;

end;

//**********************************************************************
//*		Proccess	:	補助ﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	MasKbn		:	ﾏｽﾀ区分
//*						nOption		:
//*						HojCode		:	補助ｺｰﾄﾞ
//*						(out)sRet	:	補助名称(簡略)
//*						(out)bRet	:	科目ﾁｪｯｸ結果
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnHojoCheck(MasKbn,nOption: Integer; HojCode: String;
													var sRet: String; var bRet: Boolean): Boolean;
var
	Qe	: TMQuery;
begin
	Result := True;
	sRet   := '';

	Qe := TMQuery.Create(Self);

	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);							// DBとMQueryの接続

		bRet := True;

		with (Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT SumKbn, SimpleName, HojyoKbn2 FROM HojyoMA ');
			SQL.Add('WHERE MasterKbn = :MasKbn AND RDelKbn = 0 AND GCode = :HojCD');
			ParamByName('MasKbn').AsInteger	:= MasKbn;
			ParamByName('HojCD' ).AsString	:= HojCode;
			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
				Result := False;
            	Exit;
			end;

			if (EOF) then
			begin
				bRet := False;
				Exit;
			end;

			sRet := FieldByName('SimpleName').AsString;

			if ((nOption = OPTION_EXISTONLY) and
			   ((FieldByName('SumKbn').AsInteger <> 0) or (FieldByName('HojyoKbn2').AsInteger <> 1))) then
				bRet := False;
		end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//************************************************************************
//*		Component		:	GridOffset ( TdxDBGrid )
//*							行が変った時
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridOffsetChangeNodeEx(Sender: TObject);
begin
	if m_bChange = True then exit;

	fnSetOffsetInfo();
end;

//**********************************************************************
//*		Proccess	:	相殺情報ｾｯﾄ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Nothing
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnSetOffsetInfo(): Boolean;
var
	sPayCode	: String;
	sName		: String;
	nFieldID 	: Integer;
    sPrjCode    : String;   // <142> Add
begin
    Result  :=  FALSE;

	sPayCode := MemOffset.FieldByName('strHojCode').AsString;

	if sPayCode = '' then exit;

	// 支払先ｺｰﾄﾞ
	if (m_nCurCodeAttribute <= 1) then	// 属性：数値
	begin
		Edit00PayCodeNum.InputFlag := False;
// 2006/04/25 H.Kawato Mod
//		Edit00PayCodeNum.Value     := StrToInt(sPayCode);
		Edit00PayCodeNum.Value     := StrToFloat(sPayCode);
    end
	else								// 属性：文字
        Edit00PayCodeFree.Text  := sPayCode;

	Edit00PayName.Text      := MemOffset.FieldByName('strHojName'  ).AsString;	// 支払先名称

// <142> 2007/02/20 H.Kawato Add Start
    if (m_iProAdoptKbn = 1) then
    begin
	    sPrjCode := MemOffset.FieldByName('PrjGCode').AsString;

        // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
        if (Trim(sPrjCode) <> '') then
        begin
            if (m_iPrjCodeAttr <= 1) then	// 属性：数値
            begin
            	Edit09PrjCodeNum.InputFlag := False;
            	Edit09PrjCodeNum.Value     := StrToFloat(sPrjCode);
            end
            else                            // 属性：文字
                Edit09PrjCodeFree.Text  := sPrjCode;
        end
        else
        begin
           	Edit09PrjCodeNum.InputFlag  := True;
           	Edit09PrjCodeNum.Value      := 0;
            Edit09PrjCodeFree.Text      := '';
        end;

        Edit09PrjName.Text      := MemOffset.FieldByName('PrjName'  ).AsString; // ﾌﾟﾛｼﾞｪｸﾄ名称
    end;
// <142> 2007/02/20 H.Kawato Add End

	Edit01SeqNo.InputFlag   := False;
	Edit01SeqNo.Value       := MemOffset.FieldByName('nSeqNo'      ).AsInteger;	// 相殺No
	Edit02KmkCode.Value	    := MemOffset.FieldByName('nKmkCode'    ).AsInteger;
	Edit02KmkCode.InputFlag	:= FALSE;
	Edit02KmkCodeName.Text  := MemOffset.FieldByName('strKmkDesc'  ).AsString;
	Edit08OffsetPrice.Value := MemOffset.FieldByName('nOffsetPrice').AsCurrency;

// <142> 2007/02/20 H.Kawato Add Start
    if (MemOffset.FieldByName('nHojPartKbn').AsInteger > 0) then
        m_nPrjSubUnAdopt := 1;
// <142> 2007/02/20 H.Kawato Add End

	fnSetAttributeOffsetJournalInfo(MemOffset.FieldByName('nKmkCode').AsInteger);

    m_nPrjSubUnAdopt := 0;  // <142> Add

	for	nFieldID := 3 to 5 do
	begin
		if (Trim(MemOffset.FieldByName(Format('strSubCode%.2d',[nFieldID-2])).AsString) <> '') then
		begin
// <142> 2007/02/20 H.Kawato Add Start
            if ((m_arCodeAttribute[nFieldID-3].nMasterDivision >= 201) and
                (m_arCodeAttribute[nFieldID-3].nMasterDivision <= 210)) then
            begin
                m_arCodeAttribute[nFieldID-3].nPrjNCode := MemOffset.FieldByName('KojNCode').AsFloat;
                m_arCodeAttribute[nFieldID-3].nPartKbn  := MemOffset.FieldByName('nHojPartKbn').AsInteger;
            end;
// <142> 2007/02/20 H.Kawato Add End
			if (m_arCodeAttribute[nFieldID-3].nAttribute <= 1) then					// ｺｰﾄﾞ属性: 数字
			begin
				TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID]))).Value :=
							StrToInt64(Trim(MemOffset.FieldByName(Format('strSubCode%.2d',[nFieldID-2])).AsString));

				TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID]))).InputFlag := FALSE;
			end
			else
				TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[nFieldID]))).Text :=
												MemOffset.FieldByName(Format('strSubCode%.2d',[nFieldID-2])).AsString;

			TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeName',[nFieldID]))).Text :=
												MemOffset.FieldByName(Format('strSubDesc%.2d',[nFieldID-2])).AsString;
// <146> 2007/07/11 H.Kawato Add Start
        end
        else
        begin
            if ((m_arCodeAttribute[nFieldID-3].nMasterDivision >= 201) and
                (m_arCodeAttribute[nFieldID-3].nMasterDivision <= 210)) then
            begin
                m_arCodeAttribute[nFieldID-3].nPrjNCode := 0;
                m_arCodeAttribute[nFieldID-3].nPartKbn  := 0;
            end;
			if (m_arCodeAttribute[nFieldID-3].nAttribute <= 1) then					// ｺｰﾄﾞ属性: 数字
			begin
				TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID]))).Value := 0;
				TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID]))).InputFlag := TRUE;
			end
			else
				TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[nFieldID]))).Text := '';

			TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeName',[nFieldID]))).Text := '';
// <146> 2007/07/11 H.Kawato Add End
		end;
	end;

// <142> 2007/02/20 H.Kawato Mod
//	if (MemOffset.FieldByName('nTaxCode').IsNull) then
	if (MemOffset.FieldByName('nTaxKbn').AsInteger = 0) then
	begin
		Edit06TaxCode.Value		:= 0;
		Edit06TaxCode.InputFlag	:= TRUE;
	end
	else
	begin
		Edit06TaxCode.Value		:= MemOffset.FieldByName('nTaxCode').AsInteger;
		Edit06TaxCode.InputFlag	:= FALSE;

		fnGetDescriptionSelectedItem(Edit06TaxCode, sName);

		Edit06TaxCodeName.Text := sName;
	end;

// <142> 2007/02/20 H.Kawato Mod
//	if	(MemOffset.FieldByName('nTaxRate').IsNull) then
	if	(MemOffset.FieldByName('nTaxKbn').AsInteger = 0) then
	begin
		Edit07TaxRate.Value		:= 0;
		Edit07TaxRate.InputFlag	:= TRUE;
	end
	else
	begin
		Edit07TaxRate.Value		:= MemOffset.FieldByName('nTaxRate').AsInteger;
		Edit07TaxRate.InputFlag	:= FALSE;

// <#TAX10> MOD-STR
//		fnGetDescriptionSelectedItem(Edit07TaxRate,sName);
//
//		Edit07TaxRateName.Text := sName;
		Edit07TaxRateName.Text := fnGetTaxRateName(Edit07TaxRate.AsInteger);
// <#TAX10> MOD-END
	end;

	fnChangeConditionOffsetTax();

	Edit08OffsetPrice.Value	:= MemOffset.FieldByName('nOffsetPrice').AsCurrency;

	m_dSousaiBmnNCode := MemOffset.FieldByName('BmnNCode').AsCurrency;

// <181> ADD-STR
    // 内部コードエリアセット
    m_nHojyoNCode[2] := MemOffset.FieldByName('dCSubNCode').AsCurrency;
    m_nHojyoNCode[41] := MemOffset.FieldByName('dCBmnNCode').AsCurrency;
    for nFieldID := 1 to 10 do
        m_nHojyoNCode[nFieldID + 100] := MemOffset.FieldByName('dCSegNCode' + IntToStr(nFieldID)).AsCurrency;
    m_nHojyoNCode[21] := MemOffset.FieldByName('dCBankNCode').AsCurrency;
    m_nHojyoNCode[22] := MemOffset.FieldByName('dCCsNCode').AsCurrency;
    m_nHojyoNCode[25] := MemOffset.FieldByName('dCEmpNCode').AsCurrency;
    for nFieldID := 1 to 5 do
        m_nHojyoNCode[nFieldID + 30] := MemOffset.FieldByName('dCMulNCode' + IntToStr(nFieldID)).AsCurrency;
    for nFieldID := 1 to 10 do
        m_nHojyoNCode[nFieldID + 200] := MemOffset.FieldByName('dCPrjNCode' + IntToStr(nFieldID)).AsCurrency;
    for nFieldID := 1 to 10 do
        m_nHojyoNCode[nFieldID + 300] := MemOffset.FieldByName('dCPjSubNCode' + IntToStr(nFieldID)).AsCurrency;
// <181> ADD-END

	Result := TRUE;
end;
//************************************************************************
//*		Component		:	EDITENTER ( TdxDBGrid )
//*
//*		Event			:
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.EditEnter(Sender: TObject);
// <194> ADD-STR
var
	dqMasterData: TMQuery;
    iTaxCode,
    iTaxRate    : Integer;
// <194> ADD-END
    sName       : String;       // <TXNM> ADD
begin
	m_cACControl := Screen.ActiveControl;

	// 変更前の情報取得
	if (Sender is TMNumEdit) then
	begin
		if TMNumEdit(Sender).InputFlag = True then
			m_Save := ''
		else
// <142> 2007/02/20 H.Kawato Mod
//			m_Save := IntToStr(TMNumEdit(Sender).AsInteger);
			m_Save := FloatToStr(TMNumEdit(Sender).Value);
	end
	else
		m_Save := TMTxtEdit(Sender).Text;

	if ((TWinControl(Sender).Name = Edit02KmkCode.Name) or				// 相殺情報: 科目ｺｰﾄﾞ
	    (TWinControl(Sender).Name = Edit03HojCodeNum.Name) or			// 相殺情報: 補助ｺｰﾄﾞ①
	    (TWinControl(Sender).Name = Edit03HojCodeFree.Name) or
	    (TWinControl(Sender).Name = Edit04HojCodeNum.Name) or			// 相殺情報: 補助ｺｰﾄﾞ②
	    (TWinControl(Sender).Name = Edit04HojCodeFree.Name) or
		(TWinControl(Sender).Name = Edit05HojCodeNum.Name) or			// 相殺情報: 補助ｺｰﾄﾞ③
		(TWinControl(Sender).Name = Edit05HojCodeFree.Name) or
		(TWinControl(Sender).Name = Edit06TaxCode.Name) or				// 消費税ｺｰﾄﾞ
		(TWinControl(Sender).Name = Edit07TaxRate.Name) or				// 消費税率ｺｰﾄﾞ
		(TWinControl(Sender).Name = Edit08OffsetPrice.Name)) then		// 相殺金額
    begin
        if m_nReferMode <> REFER then
            fnSetFncType (1,True)
    end
	else
    begin
        if m_nReferMode <> REFER then
// <142> 2007/02/20 H.Kawato Mod Start
//            fnSetFncType(1,False)
        begin
            fnSetFncType(1,False);
            fnSetFncType(8,False);
        end;
// <142> 2007/02/20 H.Kawato Mod End
    end;

// <181> ADD-STR
    if ((Screen.ActiveControl.Name = Edit03HojCodeNum.Name) or				// 相殺情報: 補助ｺｰﾄﾞ①
        (Screen.ActiveControl.Name = Edit03HojCodeFree.Name) or
        (Screen.ActiveControl.Name = Edit04HojCodeNum.Name) or				// 相殺情報: 補助ｺｰﾄﾞ②
        (Screen.ActiveControl.Name = Edit04HojCodeFree.Name) or
        (Screen.ActiveControl.Name = Edit05HojCodeNum.Name) or				// 相殺情報: 補助ｺｰﾄﾞ③
        (Screen.ActiveControl.Name = Edit05HojCodeFree.Name)) then
    begin
        if m_nReferMode <> REFER then
            fnSetFncType(8,True);
    end
    else
    begin
        fnSetFncType(8,False);
    end;
// <181> ADD-END

	if ((TWinControl(Sender).Name = Edit03HojCodeNum.Name) or			// 相殺情報: 補助ｺｰﾄﾞ①
	    (TWinControl(Sender).Name = Edit03HojCodeFree.Name) or
	    (TWinControl(Sender).Name = Edit04HojCodeNum.Name) or			// 相殺情報: 補助ｺｰﾄﾞ②
	    (TWinControl(Sender).Name = Edit04HojCodeFree.Name) or
		(TWinControl(Sender).Name = Edit05HojCodeNum.Name) or			// 相殺情報: 補助ｺｰﾄﾞ③
		(TWinControl(Sender).Name = Edit05HojCodeFree.Name) or
		(TWinControl(Sender).Name = Edit06TaxCode.Name) or				// 消費税ｺｰﾄﾞ
		(TWinControl(Sender).Name = Edit07TaxRate.Name) or				// 消費税率ｺｰﾄﾞ
		(TWinControl(Sender).Name = Edit08OffsetPrice.Name)) then		// 相殺金額
	begin
		// 支払先ｺｰﾄﾞ
		if Edit00PayCodeNum.Visible = True then
		begin
			if (Edit00PayCodeNum.InputFlag = True) and (Edit00PayCodeNum.AsInteger = 0) then
				Edit00PayCodeNum.SetFocus;
		end
		else
		begin
			if Edit00PayCodeFree.Text = '' then
				Edit00PayCodeFree.SetFocus;
		end;

    	// 相殺No
	    if (Edit01SeqNo.InputFlag = True) and (Edit01SeqNo.AsInteger = 0) then
		    Edit01SeqNo.SetFocus;


		// 科目ｺｰﾄﾞ
		if (Edit02KmkCode.InputFlag = True) and (Edit02KmkCode.AsInteger = 0) then
			Edit02KmkCode.SetFocus;

// <194> ADD-STR
    	if (TWinControl(Sender).Name = Edit06TaxCode.Name) then				// 消費税ｺｰﾄﾞ
	    begin
            // 消費税コードリスト再編成
            iTaxCode    := Trunc(Edit06TaxCode.Value);
            iTaxRate    := Trunc(Edit07TaxRate.Value);

            dqMasterData	:= TMQuery.Create (self);
            m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

            with (dqMasterData) do
            begin
                Close ();
                SQL.Clear ();
                SQL.Add   ('SELECT * ');
                SQL.Add   (' FROM   KmkMA ');
                SQL.Add   (' WHERE  MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND GCode = :nKmkCode');
                ParamByName ('nKmkCode').AsInteger	:= Edit02KmkCode.AsInteger;
                Open ();
            end;

            fnSetTaxOffsetJournalInfo (dqMasterData);

            dqMasterData.Close ();
            dqMasterData.Free  ();

            Edit06TaxCode.Value		:= iTaxCode;
            Edit06TaxCode.InputFlag	:= FALSE;
            Edit07TaxRate.Value		:= iTaxRate;
            Edit07TaxRate.InputFlag	:= FALSE;
// <TXNM> ADD-STR
    		fnGetDescriptionSelectedItem(Edit06TaxCode, sName);
	    	Edit06TaxCodeName.Text := sName;
// <#TAX10> MOD-STR
//    		fnGetDescriptionSelectedItem(Edit07TaxRate,sName);
//    		Edit07TaxRateName.Text := sName;
			Edit07TaxRateName.Text := fnGetTaxRateName(Edit07TaxRate.AsInteger);
// <#TAX10> MOD-END
// <TXNM> ADD-END
        end;
// <194> ADD-END
	end;


end;

//**********************************************************************
//*		Proccess	:	科目に採用されている補助情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Nothing
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetAttributeOffsetJournalInfo(nKmkCode: Integer);
var
	Qe			: TMQuery;
	nPosition	: Integer;
	nCount		: Integer;
	nAdoption	: Integer;
	nAttr		: Integer;
	nDigit		: Integer;
	sName		: String;
    nUse        : Integer;

    lvMasterKbn : Integer;
    i           : Integer;
    fUse        : Boolean;
begin

    // 初期値   <142> if文 Add
    if (m_nPrjSubUnAdopt = 0) then
    begin
        Edit03HojCodeNum.Value	   := 0;
        Edit04HojCodeNum.Value	   := 0;
        Edit05HojCodeNum.Value	   := 0;
        Edit03HojCodeNum.InputFlag := TRUE;
        Edit04HojCodeNum.InputFlag := TRUE;
        Edit05HojCodeNum.InputFlag := TRUE;
        Edit03HojCodeFree.Text	   := '';
        Edit04HojCodeFree.Text	   := '';
        Edit05HojCodeFree.Text	   := '';
		m_nTaxKbn := 0;										// <#TAX10> ADD
    end;

	for	nCount := 0 to 2 do
	begin
		m_arCodeAttribute[nCount].nMasterDivision := 0;
		m_arCodeAttribute[nCount].nDigit		  := 6;
		m_arCodeAttribute[nCount].nAttribute	  := 0;
        m_arCodeAttribute[nCount].nPrjNCode       := 0;     // <142> Add
        m_arCodeAttribute[nCount].nUse            := 0;     // <142> Add
		m_arCodeAttribute[nCount].fEnabled		  := FALSE;
	end;

	Qe := TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);							// DBとMQueryの接続

	with (Qe) do
	begin
		Close();
		SQL.Clear();

		SQL.Add('SELECT * ');
		SQL.Add('FROM   KmkMA ');
		SQL.Add('WHERE  MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND GCode = :nKmkCode');
		ParamByName ('nKmkCode').AsInteger := nKmkCode;


		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(Qe);
			Close;
			Free;
           	Exit;
		end;

		if (not EOF) then
		begin
            // 第一第二補助の採用ﾏｽﾀを取得 <104>
            fnGetHojyoMA(Qe);

			nPosition := 0;
			m_nTaxKbn := FieldByName ('TaxKbn').AsInteger;								// <#TAX10> ADD


			// 部門の採用をﾁｪｯｸ
			fnGetAdoptInformation(MASTER_SECTION,nAdoption,nDigit,nAttr,sName);

			if (((FieldByName('BmnUse').AsInteger <> 0) and (nAdoption <> 0)) and		// 部門採用区分: 1=あり
			    (not ((FieldByName('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
			begin
				m_arCodeAttribute[nPosition].nMasterDivision := MASTER_SECTION;			// 部門
				m_arCodeAttribute[nPosition].nDigit			 := nDigit;
				m_arCodeAttribute[nPosition].nAttribute		 := nAttr;
				m_arCodeAttribute[nPosition].fEnabled		 := TRUE;
			    m_arCodeAttribute[nPosition].nUse            := FieldByName ('BmnUse').AsInteger;   // <142> Add

				if (nAdoption = 1) then													// P/Lのみ採用
				begin
					if (FieldByName('BmnUse').AsInteger = 1) then
						m_arCodeAttribute[nPosition].nClassCode	:= 0
					else
						m_arCodeAttribute[nPosition].nClassCode	:= 3;
				end
				else																	// B/S&P/L採用
				begin
					if (FieldByName ('BPKbn').AsInteger = 0) then						// B/S科目
					begin
						if (FieldByName ('BmnUse').AsInteger = 1) then
							m_arCodeAttribute[nPosition].nClassCode	:= 2
						else
							m_arCodeAttribute[nPosition].nClassCode	:= 1;
					end
					else
					begin
						if (FieldByName ('BmnUse').AsInteger = 1) then
							m_arCodeAttribute[nPosition].nClassCode	:= 0
						else
							m_arCodeAttribute[nPosition].nClassCode	:= 3;
					end;
				end;

				nPosition := nPosition + 1;
			end;

            fUse := False;                      // <142> Add
            lvMasterKbn := MASTER_CONSTRUCT;    // <142> Add

            // 工事/ﾌﾟﾛｼﾞｪｸﾄ
			if	(nPosition <= 2) then
            begin
    			fnGetAdoptInformation (MASTER_CONSTRUCT, nAdoption, nDigit, nAttr, sName);

                nUse := MASTER_CONSTRUCT - 200;
//                fUse := False;                // <142> Del

                if (nUse >= 1) and (nUse <= 10) then
                begin
// <142> 2007/02/20 H.Kawato Mod
//    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
	    		    begin
    	    			m_arCodeAttribute [nPosition].nMasterDivision	:= MASTER_CONSTRUCT;
	    	    		m_arCodeAttribute [nPosition].nDigit			:= nDigit;
		    	    	m_arCodeAttribute [nPosition].nAttribute		:= nAttr;
			    	    m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
    			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add

          				nPosition	:= nPosition + 1;
                        fUse := True;
                    end;
                end;

                if fUse = False then
                begin
                    for i := 1 to 10 do
                    begin
                        lvMasterKbn := 200 + i;
                        if (lvMasterKbn <> MASTER_CONSTRUCT) then
                        begin
                            fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttr, sName);

                            nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

// <142> 2007/02/20 H.Kawato Mod
//            		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
            		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
            			    begin
                				m_arCodeAttribute [nPosition].nMasterDivision	:= lvMasterKbn;
            	    			m_arCodeAttribute [nPosition].nDigit			:= nDigit;
            		    		m_arCodeAttribute [nPosition].nAttribute		:= nAttr;
            			    	m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
            			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add

                				nPosition	:= nPosition + 1;
                                fUse := True;                                   // <142> Add
                                Break;
                            end;
                        end;
                    end;
	    		end;
            end;

// <142> 2007/02/20 H.Kawato Add Start
            // 工種/プロジェクトサブ
			if	(nPosition <= 2) and (m_nPrjSubUnAdopt = 1) then
            begin
                if (fUse = True) then
                    lvMasterKbn := lvMasterKbn + 100
                else
                    lvMasterKbn := 0;

    			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttr, sName);

                nUse := lvMasterKbn - 300;

                // 工種/プロジェクトサブの採用
                if ( nUse >= 1) and ( nUse <= 10 ) then
                begin
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
    			    begin
        				m_arCodeAttribute [nPosition].nMasterDivision	:= lvMasterKbn;
    	    			m_arCodeAttribute [nPosition].nDigit			:= nDigit;
    		    		m_arCodeAttribute [nPosition].nAttribute		:= nAttr;
    			    	m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
    			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;

        				nPosition	:= nPosition + 1;
                    end;
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End

  			// 科目別補助の採用をﾁｪｯｸ
			if	(nPosition <= 2) then
            begin
	    		fnGetAdoptInformation (MASTER_SUBJECTPLUS,nAdoption,nDigit,nAttr,sName);

    			if ((FieldByName('SubKmkUse').AsInteger = 1) and (nAdoption <> 0)) then		// 科目別補助採用区分: 1=あり
	    		begin
		    		m_arCodeAttribute[nPosition].nMasterDivision := MASTER_SUBJECTPLUS;		// 科目別補助
			    	m_arCodeAttribute[nPosition].nDigit			 := FieldByName('CodeDigit').AsInteger;
				    m_arCodeAttribute[nPosition].nAttribute		 := FieldByName('CodeAttr' ).AsInteger;
    				m_arCodeAttribute[nPosition].fEnabled		 := TRUE;
			    	m_arCodeAttribute[nPosition].nUse            := FieldByName ('SubKmkUse').AsInteger;    // <142> Add

		    		nPosition := nPosition + 1;
			    end;
            end;

			// 第１補助の採用ﾁｪｯｸ
			if	(nPosition <= 2) then
			begin
				fnGetAdoptInformation(MASTER_HOJYO1,nAdoption,nDigit,nAttr,sName);
// <104>				if	(nAdoption <> 0) then
                if (MASTER_HOJYO1 <> 0) then
				begin
					m_arCodeAttribute[nPosition].nMasterDivision := MASTER_HOJYO1;
					m_arCodeAttribute[nPosition].nDigit			 := nDigit;
					m_arCodeAttribute[nPosition].nAttribute		 := nAttr;
					m_arCodeAttribute[nPosition].fEnabled		 := TRUE;
                    m_arCodeAttribute[nPosition].nUse            := MASTER_HOJYO1;          // <142> Add

					nPosition := nPosition + 1;
				end;
			end;

			// 第２補助の採用ﾁｪｯｸ
			if (nPosition <= 2) then
			begin
				fnGetAdoptInformation(MASTER_HOJYO2,nAdoption,nDigit,nAttr,sName);
// <104>				if	(nAdoption <> 0) then
                if (MASTER_HOJYO2 <> 0) then
				begin
					m_arCodeAttribute[nPosition].nMasterDivision := MASTER_HOJYO2;
					m_arCodeAttribute[nPosition].nDigit			 := nDigit;
					m_arCodeAttribute[nPosition].nAttribute		 := nAttr;
					m_arCodeAttribute[nPosition].fEnabled		 := TRUE;
                    m_arCodeAttribute[nPosition].nUse            := MASTER_HOJYO2;          // <142> Add

                    nPosition := nPosition + 1;     // <135> 2006/08/10 H.Kawato Add
				end;
			end;
            // ｾｸﾞﾒﾝﾄ
			if (nPosition <= 2) then
			begin
                for i := 1 to 10 do
                begin
                    lvMasterKbn := 100 + i;

        			fnGetAdoptInformation(lvMasterKbn,nAdoption,nDigit,nAttr,sName);

                    nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

        			if (((FIeldByName('SegUse'+ IntToStr(nUse)).AsInteger <> 0) and (nAdoption <> 0)) and		// ｾｸﾞﾒﾝﾄ1採用区分: 1=あり
	        			(not ((FieldByName('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
		        	begin
    		    		m_arCodeAttribute[nPosition].nMasterDivision := lvMasterKbn;		    // ｾｸﾞﾒﾝﾄ
	    		    	m_arCodeAttribute[nPosition].nDigit			 := nDigit;
		    		    m_arCodeAttribute[nPosition].nAttribute		 := nAttr;
    			    	m_arCodeAttribute[nPosition].fEnabled		 := TRUE;
			    	    m_arCodeAttribute[nPosition].nUse            := FIeldByName ('SegUse'+IntToStr(nUse)).AsInteger; // <142> Add

        				if (nAdoption = 1) then													// P/Lのみ採用
	        			begin
		        			if (FieldByName('SegUse'+ IntToStr(nUse)).AsInteger = 1) then
			        			m_arCodeAttribute[nPosition].nClassCode	:= 0
				        	else
					        	m_arCodeAttribute[nPosition].nClassCode	:= 3;
        				end
	        			else																	// B/S&P/L採用
		        		begin
			        		if (FieldByName ('BPKbn').AsInteger = 0) then						// B/S科目
				        	begin
					        	if (FieldByName ('SegUse'+ IntToStr(nUse)).AsInteger = 1) then
						        	m_arCodeAttribute[nPosition].nClassCode	:= 2
    						    else
	    						    m_arCodeAttribute[nPosition].nClassCode	:= 1;
    		    			end
	    		    		else
		    		    	begin
			    		    	if (FieldByName ('SegUse'+ IntToStr(nUse)).AsInteger = 1) then
				    		    	m_arCodeAttribute[nPosition].nClassCode	:= 0
    				    		else
	    				    		m_arCodeAttribute[nPosition].nClassCode	:= 3;
	    	    			end;
    			    	end;

                        Break;
    		    	end;
                end;
            end;

			fnSetTaxOffsetJournalInfo(Qe);
		end;
	end;

	Qe.Close;
	Qe.Free;

	for	nCount := 3 to 5 do
	begin
		fnChangeConditionOffsetJournalInfo(nCount);

		if	((m_arCodeAttribute[nCount - 3].nMasterDivision = MASTER_SECTION  ) or
			 ((m_arCodeAttribute [nCount - 3].nMasterDivision >= 101) and
              (m_arCodeAttribute [nCount - 3].nMasterDivision <= 110))) then

        fnChangeConditionOffsetJournalInfoEx(nCount - 3);


	end;
end;
//**********************************************************************
//*		Proccess	:	採用情報によってパーツの制御
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	nFieldID	:	ﾌｨｰﾙﾄﾞ番号
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeConditionOffsetJournalInfo(nFieldID: Integer);
var
	cNumEdit 	: TMNumEdit;
	cTxtEdit 	: TMTxtEdit;
	strFormat	: String;
begin
	if (not ((nFieldID >= 3) and (nFieldID <= 5))) then
		Exit;

	cNumEdit := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID])));
	cTxtEdit := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[nFieldID])));

	if (m_arCodeAttribute[nFieldID-3].nAttribute <= 1) then								// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit.Visible := TRUE;
		cTxtEdit.Visible := FALSE;

		cNumEdit.DMaxLength	:= m_arCodeAttribute[nFieldID-3].nDigit;

		if (m_arCodeAttribute[nFieldID-3].nAttribute = 1) then							// ｺｰﾄﾞ属性: 1=数字(前ｾﾞﾛあり)
			strFormat := StringOfChar('0',m_arCodeAttribute[nFieldID-3].nDigit)
		else																			// ｺｰﾄﾞ属性: 0=数字
			strFormat := '';

		cNumEdit.FormatStr := strFormat;
		cNumEdit.Digits	   := m_arCodeAttribute[nFieldID-3].nDigit;
		cNumEdit.MaxValue  := StrToInt64(StringOfChar('9',m_arCodeAttribute[nFieldID-3].nDigit));

// <142> 2007/02/20 H.Kawato Mod Start
{
		if (m_arCodeAttribute[nFieldID-3].nMasterDivision = 0) then
			cNumEdit.Enabled := FALSE
}
		if	(m_arCodeAttribute[nFieldID-3].nMasterDivision = 0) then
        begin
            cNumEdit.Value      := 0;
            cNumEdit.InputFlag  := TRUE;
			cNumEdit.Enabled	:= FALSE;
        end
// <142> 2007/02/20 H.Kawato Mod End
		else
		begin
			cNumEdit.Enabled := TRUE;
			cNumEdit.Static	 := FALSE;
		end;
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cNumEdit.Visible   := FALSE;
		cTxtEdit.Visible   := TRUE;
		cTxtEdit.MaxLength := m_arCodeAttribute[nFieldID-3].nDigit;

// <142> 2007/02/20 H.Kawato Mod Start
{
		if (m_arCodeAttribute[nFieldID-3].nMasterDivision = 0) then
			cTxtEdit.Enabled := FALSE
}
		if	(m_arCodeAttribute[nFieldID-3].nMasterDivision = 0) then
        begin
            cTxtEdit.Text       := '';
			cTxtEdit.Enabled	:= FALSE;
        end
// <142> 2007/02/20 H.Kawato Mod End
		else
		begin
			cTxtEdit.Enabled := TRUE;
			cTxtEdit.Static	 := FALSE;
		end;
	end;

// <146> 2007/07/11 H.Kawato Mod Start
{
// <142> 2007/02/20 H.Kawato Mod Start
//	TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeName',[nFieldID]))).Text := '';
    if  (m_nPrjSubUnAdopt <> 1) or
        (m_arCodeAttribute[nFieldID-3].nMasterDivision < 201) or
        (m_arCodeAttribute[nFieldID-3].nMasterDivision > 310) then
    	TMTxtEdit (MJSFindCtrl (Self, Format ('Edit%.2dHojCodeName',[nFieldID]))).Text  := '';
// <142> 2007/02/20 H.Kawato Mod End
}
    if  ((m_nPrjSubUnAdopt <> 1) and
         (m_arCodeAttribute[nFieldID-3].nMasterDivision >= 301) and
         (m_arCodeAttribute[nFieldID-3].nMasterDivision <= 310)) or
        (m_arCodeAttribute[nFieldID-3].nMasterDivision = 0) then
    	TMTxtEdit (MJSFindCtrl (Self, Format ('Edit%.2dHojCodeName',[nFieldID]))).Text  := '';
// <146> 2007/07/11 H.Kawato Mod End
end;

//**********************************************************************
//*		Proccess	:	採用情報によってパーツの制御
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	nPosition	:
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeConditionOffsetJournalInfoEx(nPosition: Integer);
var
	Qe			: TMQuery;
	cNumEdit	: TMNumEdit;
	cTxtEdit	: TMTxtEdit;
	strHojCode	: String;
    ExHojCode   : Extended;
begin

	if (not ((nPosition >= 0) and (nPosition <= 2))) then
		Exit;

	if (not m_arCodeAttribute[nPosition].fEnabled) then
		Exit;

	if ((m_arCodeAttribute[nPosition].nClassCode <> 1) and (m_arCodeAttribute[nPosition].nClassCode <> 3)) then
		Exit;

	cNumEdit := TMNumEdit(MJSFindCtrl(Self, Format('Edit%.2dHojCodeNum',[nPosition + 3])));
	cTxtEdit := TMTxtEdit(MJSFindCtrl(Self, Format('Edit%.2dHojCodeFree',[nPosition + 3])));

	if (m_arCodeAttribute[nPosition].nAttribute <= 1) then								// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit.Static	 := TRUE;
		cNumEdit.TabStop := FALSE;
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cTxtEdit.Static	 := TRUE;
		cTxtEdit.TabStop := FALSE;
	end;

	Qe := TMQuery.Create (Self);

	Try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);									// DBとMQueryの接続

        ExHojCode := 0;

		with (Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT SpHojyoNCd1, SpHojyoNCd2 FROM MasterInfo WHERE MasterKbn = :MasKbn');
			ParamByName('MasKbn').AsInteger	:= m_arCodeAttribute[nPosition].nMasterDivision;

			// ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
    	       	Exit;
			end;

			if (not EOF) then
			begin
				if (m_arCodeAttribute[nPosition].nClassCode = 1) then
                    ExHojCode  := FieldByName('SpHojyoNCd1').AsFloat						// B/S共通部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
				else
                    ExHojCode  := FieldByName('SpHojyoNCd2').AsFloat;						// P/L共通部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
			end;

			if ExHojCode = 0 then
			begin
				Close();
				SQL.Clear();
				SQL.Add('SELECT GCode FROM HojyoMA ');
				SQL.Add('WHERE  MasterKbn = :MasKbn AND RDelKbn = 0 AND SyokuchiKbn = 1');

				ParamByName('MasKbn').AsInteger	:= m_arCodeAttribute[nPosition].nMasterDivision;

				// ｴﾗｰの判定
				if Open = False then
				begin
					fnErrorMessageDsp(Qe);
        	   		Exit;
				end;

				if (not EOF) then
					strHojCode := FieldByName('GCode').AsString;							// 諸口部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
// <142> 2007/02/20 H.Kawato Add Start
            end
            else
            begin
				Close();
				SQL.Clear();
				SQL.Add('SELECT GCode FROM HojyoMA ');
				SQL.Add('WHERE  MasterKbn = :MasKbn AND NCode = :NCode AND RDelKbn = 0');

				ParamByName('MasKbn').AsInteger	:= m_arCodeAttribute[nPosition].nMasterDivision;
				ParamByName('NCode' ).AsFloat	:= ExHojCode;

				// ｴﾗｰの判定
				if Open = False then
				begin
					fnErrorMessageDsp(Qe);
        	   		Exit;
				end;

				if (not EOF) then
					strHojCode := FieldByName('GCode').AsString;							// 諸口部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
// <142> 2007/02/20 H.Kawato Add End
			end;
		end;

		if (m_arCodeAttribute[nPosition].nAttribute <= 1) then								// ｺｰﾄﾞ属性: 数字
		begin
			if (Trim(strHojCode) = '') then
			begin
				cNumEdit.Value	   := 0;
				cNumEdit.InputFlag := TRUE;
			end
			else
			begin
				cNumEdit.Value	   := StrToInt64(Trim (strHojCode));
				cNumEdit.InputFlag := FALSE;
			end;
		end
		else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
			cTxtEdit.Text := strHojCode;



		fnCheckEditTxtValueHojCodeEx(nPosition + 3);

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	nFieldID	:
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckEditTxtValueHojCodeEx(nFieldID: Integer): Boolean;
var
	cNumEdit	: TMNumEdit;
	cTxtEdit	: TMTxtEdit;
	strHojCode	: String;
	sName		: String;
	fReturn		: Boolean;
    nCountLoop  : Integer;  // <142> Add
    nPrjNCode   : Extended; // <142> Add
begin
	cNumEdit := nil;
	cTxtEdit := nil;

    nPrjNCode := 0;         // <142> Add

	if (m_arCodeAttribute[nFieldID-3].nAttribute <= 1) then								// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID])));

		if (cNumEdit.InputFlag) then
			strHojCode := ''
		else
			strHojCode := Format('%.16d',[Trunc (cNumEdit.Value)]);
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cTxtEdit   := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[nFieldID])));
		strHojCode := cTxtEdit.Text;
	end;

	if (not fnCheckValidCodeUseCharacters(strHojCode)) then
	begin
		if (m_arCodeAttribute[nFieldID-3].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
			m_cACControl := cNumEdit
		else																			// ｺｰﾄﾞ属性: ﾌﾘｰ
			m_cACControl := cTxtEdit;

		Result := FALSE;
		Exit;
	end;

	sName := '';

	if (strHojCode <> '') then
	begin
// <142> 2007/02/20 H.Kawato Add Start
        if  ((m_arCodeAttribute[nFieldID - 3].nMasterDivision >= MKBN_PROJECT1) and
             (m_arCodeAttribute[nFieldID - 3].nMasterDivision <= MKBN_PROJECT10)) then
        begin
            nPrjNCode   := m_arCodeAttribute[nFieldID - 3].nPrjNCode;
        end;
// <142> 2007/02/20 H.Kawato Add End
		if (m_arCodeAttribute[nFieldID-3].nMasterDivision = MASTER_SUBJECTPLUS) then
			fnKmkHojCheck(Edit02KmkCode.AsInteger,strHojCode,sName,fReturn)
		else
			fnHojoCheckEx(strHojCode,nFieldID-3,sName,fReturn);
	end
	else
	begin
// <142> 2007/02/20 H.Kawato Mod Start
////		fReturn	:= TRUE;													// 未入力を認める。
//		fReturn	:= False;																// 未入力を認めない。
        if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision >= MKBN_PROJECT1) and     // 採用「2: 任意」のプロジェクト
            (m_arCodeAttribute [nFieldID - 3].nMasterDivision <= MKBN_PROJECT10) and
            (m_arCodeAttribute [nFieldID - 3].nUse = 2) then
// <146> 2007/07/11 H.Kawato Mod Start
//        	fReturn	:= TRUE  													// 未入力を認める
        begin
        	fReturn	:= TRUE;  													// 未入力を認める
            m_arCodeAttribute[nFieldID - 3].nPartKbn    := 0;
        end
// <146> 2007/07/11 H.Kawato Mod End
        else if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision <> 0) then
        	fReturn	:= FALSE  													// 未入力は認めない
        else
        	fReturn	:= TRUE;
// <142> 2007/02/20 H.Kawato Mod End
	end;

	TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeName',[nFieldID]))).Text := sName;

	if (not fReturn) then
	begin
		if (m_arCodeAttribute[nFieldID-3].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
			m_cACControl := cNumEdit
		else																			// ｺｰﾄﾞ属性: ﾌﾘｰ
			m_cACControl := cTxtEdit;

		Result := FALSE;
		Exit;
// <142> 2007/02/20 H.Kawato Add Start
    end
    else
    begin
// <146> 2007/07/11 H.Kawato Mod Start
//        if  ((m_arCodeAttribute[nFieldID - 3].nMasterDivision >= MKBN_PROJECT1) and
//             (m_arCodeAttribute[nFieldID - 3].nMasterDivision <= MKBN_PROJECT10)) then
        if  (Screen.ActiveControl.Name <> Edit08OffsetPrice.Name) and
            ((m_arCodeAttribute[nFieldID - 3].nMasterDivision >= MKBN_PROJECT1) and
             (m_arCodeAttribute[nFieldID - 3].nMasterDivision <= MKBN_PROJECT10)) then
// <146> 2007/07/11 H.Kawato Mod End
        begin
            if (m_arCodeAttribute[nFieldID - 3].nPartKbn > 0) then
                m_nPrjSubUnAdopt    := 1
            else
                m_nPrjSubUnAdopt    := 2;

		    // 相殺補助のプロジェクトが変更された場合、プロジェクト以降の入力項目をクリアする
            if (nPrjNCode <> m_arCodeAttribute[nFieldID - 3].nPrjNCode) then
            begin
                for nCountLoop := nFieldID + 1 to 5 do
                begin
                    TMNumEdit (MJSFindCtrl (Self, Format ('Edit%.2dHojCodeNum', [nCountLoop]))).Value		:= 0;
                    TMNumEdit (MJSFindCtrl (Self, Format ('Edit%.2dHojCodeNum', [nCountLoop]))).InputFlag	:= TRUE;
                    TMTxtEdit (MJSFindCtrl (Self, Format ('Edit%.2dHojCodeFree', [nCountLoop]))).Text       := '';
                    TMTxtEdit (MJSFindCtrl (Self, Format ('Edit%.2dHojCodeName', [nCountLoop]))).Text       := '';
                end;
                nPrjNCode   := m_arCodeAttribute[nFieldID - 3].nPrjNCode;
                fnSetAttributeOffsetJournalInfo(Edit02KmkCode.AsInteger);
                if (nPrjNCode <> 0) then    // <146> Add
                    m_arCodeAttribute[nFieldID - 3].nPrjNCode   := nPrjNCode;
            end;

            m_nPrjSubUnAdopt    := 0;
        end;
// <142> 2007/02/20 H.Kawato Add End
	end;

	Result	:= TRUE;
end;

//**********************************************************************
//*		Proccess	:	補助ﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	HojCode		:	補助ｺｰﾄﾞ
//*						nPos		:
//*						(out)sRet	:	補助名称(簡略)
//*						(out)bRet	:	科目ﾁｪｯｸ結果
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnHojoCheckEx(HojCode: String;	nPos: Integer; var sRet: String; var bRet: Boolean): Boolean;
var
	Qe		: TMQuery;
	nMasKbn : Integer;
    strSQL  : String;   // <142> Add

begin

	Result := True;
	sRet   := '';

	// ﾏｽﾀ区分が｢23:得意先｣、｢24:仕入先｣の時
	if ((m_arCodeAttribute[nPos].nMasterDivision = MASTER_CUSTOMERPLUS01) or
	    (m_arCodeAttribute[nPos].nMasterDivision = MASTER_CUSTOMERPLUS02)) then
		nMasKbn	:= MASTER_CUSTOMER			                // 取引先ｾｯﾄ
    else
    	nMasKbn	:= m_arCodeAttribute[nPos].nMasterDivision;

	Qe := TMQuery.Create (Self);

	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

		bRet := True;

		with (Qe) do
		begin
			Close();
			SQL.Clear();
            if      nMasKbn = MASTER_CUSTOMER then          // 取引先
            begin
    			SQL.Add('select NMK as SimpleName from MTOKUI ');
	    		SQL.Add('WHERE  SumKbn = 0 And RDelKbn = 0 AND GCode = :HojCD');
            end
            else if nMasKbn = MASTER_STAFF then             // 社員 <106>
            begin
    			SQL.Add('select SimpleName from HAPSC ');
    			SQL.Add('join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode) ');
	    		SQL.Add('where  RDelKbn = 0 and GCode = :HojCD');
            end
// <142> 2007/02/20 H.Kawato Add Start
            else if ((nMasKbn >= MKBN_PROJECT1) and (nMasKbn <= MKBN_PROJECT10)) then    // ﾌﾟﾛｼﾞｪｸﾄ
            begin
    			strSQL := 'select '
    			        + 'HM.NCode AS NCode, '
    			        + 'HM.SimpleName AS SimpleName, '
    			        + 'KI.PartKbn AS PartKbn '
                        + 'from HojyoMA AS HM '
                        + 'LEFT OUTER JOIN KojiInfo AS KI '
                        + 'ON KI.NCode = HM.NCode '
                        + 'AND KI.MasterKbn = HM.MasterKbn ';

                SQL.Add(strSQL);
	    		SQL.Add('where HM.MasterKbn = :MasKbn and HM.RDelKbn = 0 and HM.SumKbn = 0 and HM.GCode = :HojCD');
            end
// <142> 2007/02/20 H.Kawato Add End
            else
            begin                                           // 銀行、汎用補助、ｾｸﾞﾒﾝﾄ
// <161> MOD-STR
//    			SQL.Add('select SimpleName from HojyoMA ');
    			SQL.Add('select SimpleName, NCode from HojyoMA ');
// <161> MOD-END
	    		SQL.Add('where  MasterKbn = :MasKbn and RDelKbn = 0 and SumKbn = 0 and GCode = :HojCD');

                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ、かつﾌﾟﾛｼﾞｪｸﾄの工種管理区分が「あり(ﾊﾟﾀｰﾝ指定)」の場合
                if ((nMasKbn >= MKBN_PROSUB1) and (nMasKbn <= MKBN_PROSUB10)) and
                   ((m_arCodeAttribute[nPos - 1].nMasterDivision >= MKBN_PROJECT1) and
                    (m_arCodeAttribute[nPos - 1].nMasterDivision <= MKBN_PROJECT10)) and
                   (m_arCodeAttribute[nPos - 1].nPartKbn = 2) then
                begin
                    strSQL  := strSQL + ' AND HojyoMA.NCode in ( '
                                      + ' SELECT KsyNCode FROM KousyuPtn '
                                      + ' INNER JOIN  KojiInfo '
                                      + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode '
                                      + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_arCodeAttribute[nPos-1].nMasterDivision)
                                      + ' AND KojiInfo.NCode = ' + FloatToStr(m_arCodeAttribute[nPos-1].nPrjNCode)
                                      + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_arCodeAttribute[nPos].nMasterDivision) + ' )';
                    SQL.Add(strSQL);
                end;
            end;

			if ((m_arCodeAttribute[nPos].nMasterDivision = MASTER_SECTION  ) or
    			 ((m_arCodeAttribute [nPos - 3].nMasterDivision >= 101) and
                  (m_arCodeAttribute [nPos - 3].nMasterDivision <= 110))) then

			begin
                // 部門採用条件
				case (m_arCodeAttribute[nPos].nClassCode) of
					0:	SQL.Add(' and HojyoKbn2 <> 2');
					2:	SQL.Add(' and HojyoKbn2 <> 0');
				end;

// <161> ADD-STR
                if (m_dSousaiBmnNCode <> 0) then
                    SQL.Add(' and NCode = ' + FloatToStr(m_dSousaiBmnNCode));
// <161> ADD-END
			end
			else if	(m_arCodeAttribute[nPos].nMasterDivision = MASTER_CUSTOMERPLUS01) then
				SQL.Add (' and HojyoKbn1 = 1')
			else if	(m_arCodeAttribute[nPos].nMasterDivision = MASTER_CUSTOMERPLUS02) then
				SQL.Add (' and HojyoKbn2 = 1');

            if (nMasKbn <> MASTER_CUSTOMER) and
               (nMasKbn <> MASTER_STAFF)   then
    	        ParamByName('MasKbn').AsInteger	:= nMasKbn;

   			ParamByName('HojCD' ).AsString	:= HojCode;

//<178> ADD-STR
            if (nMasKbn =  MASTER_SECTION) then
            begin
                SQL.Add(' ORDER BY TEndDate DESC')
            end;
//<178> ADD-END

			// ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
				Result := False;
    	       	Exit;
			end;

			if (EOF) then
			begin
                m_dSousaiBmnNCode := 0;         // <161> ADD
				bRet := FALSE;
				Exit;
			end;

			sRet := FieldByName('SimpleName').AsString;

// <142> 2007/02/20 H.Kawato Add Start
            if ((nMasKbn >= MKBN_PROJECT1) and (nMasKbn <= MKBN_PROJECT10)) then    // ﾌﾟﾛｼﾞｪｸﾄ
            begin
                m_arCodeAttribute[nPos].nPrjNCode   := FieldByName('NCode'  ).AsFloat;
                m_arCodeAttribute[nPos].nPartKbn    := FieldByName('PartKbn').AsInteger;
            end;
// <142> 2007/02/20 H.Kawato Add End

// <161> ADD-STR
			if ((m_arCodeAttribute[nPos].nMasterDivision = MASTER_SECTION  ) or
    			 ((m_arCodeAttribute [nPos - 3].nMasterDivision >= 101) and
                  (m_arCodeAttribute [nPos - 3].nMasterDivision <= 110))) then
			begin
                m_dSousaiBmnNCode := FieldByName('NCode'  ).AsFloat;
			end;
// <161> ADD-END
		end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	消費税ﾘｽﾄ内容作成
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Qe	:	接続済みのQuery
//*		Return		:	Notning
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetTaxOffsetJournalInfo(Qe: TMQuery);
var
	nCount		: Integer;
	nCharPos	: Integer;
	nPickNo		: Integer;
	sName		: String;
// <194> ADD-STR
    nBmnNCode   : Currency;
    iLoop       : Integer;
    bContinue   : Boolean;
// <194> ADD-END
begin
	if (m_nTaxInfoAccDivision = 0) then												// 会計処理区分: 0=免税業者
	begin
		Edit06TaxCode.Value		:= 0;
		Edit07TaxRate.Value		:= 0;
		Edit06TaxCode.InputFlag	:= TRUE;
		Edit07TaxRate.InputFlag	:= TRUE;
		Edit06TaxCode.Enabled	:= FALSE;
		Edit07TaxRate.Enabled	:= FALSE;
		Edit06TaxCodeName.Text	:= '';
		Edit07TaxRateName.Text	:= '';

		Exit;
	end
	else
	begin
		Edit06TaxCode.Enabled	:= TRUE;
		Edit07TaxRate.Enabled	:= TRUE;
	end;

	with (Qe) do
	begin
		Edit06TaxCode.SelectItems.Clear();

		// 消費税科目区分: 1=売上科目
		if (FieldByName('TaxKbn').AsInteger = 1) then
		begin
			for	nCount := 0 to Length (_TaxSalesItems) - 1 do
			begin
				//* 公益法人区分: 1=公益法人(消費税ｺｰﾄﾞ80番台は除く) */
				if ((m_nCompDivision <> 1) and ((nCount >= 14) and (nCount <= 17))) then
					Continue;

				nPickNo	:= -1;

				for	nCharPos := 1 to StrLen(PChar(_TaxSalesItems [nCount])) do
				begin
					if (Copy(_TaxSalesItems[nCount],nCharPos,1) = ':') then
					begin
						nPickNo	:= StrToInt(Trim(Copy(_TaxSalesItems[nCount],1,nCharPos-1)));
						Break;
					end;
				end;
// <189> Mod start
{
				if ((nPickNo <>  0) and (nPickNo <> 10) and
				    (nPickNo <> 11) and (nPickNo <> 30) and (nPickNo <> 40)) then
					Continue;
}
// <189> Mod end

				Edit06TaxCode.SelectItems.Add(_TaxSalesItems[nCount]);
			end;

			Edit06TaxCode.Value		:= FieldByName ('STaxCode').AsInteger;		// 売上消費税ｺｰﾄﾞ
			Edit06TaxCode.InputFlag	:= FALSE;
			Edit07TaxRate.Value		:= FieldByName ('STaxRate').AsInteger;		// 売上消費税率
			Edit07TaxRate.InputFlag	:= FALSE;
		end
		// 消費税科目区分: 2=仕入科目
		else if	(FieldByName ('TaxKbn').AsInteger = 2) then
		begin
			for	nCount := 0 to Length (_TaxStockItems) - 1 do
			begin
				nPickNo	:= -1;

				for	nCharPos := 1 to StrLen (PChar (_TaxStockItems [nCount])) do
				begin
					if (Copy (_TaxStockItems [nCount], nCharPos, 1) = ':') then
					begin
						nPickNo	:= StrToInt (Trim (Copy (_TaxStockItems [nCount], 1, nCharPos - 1)));
						Break;
					end;
				end;
// <194> ADD-STR
                // 部門内部コードを取得
                if (m_arCodeAttribute[0].nMasterDivision = MASTER_SECTION) then
                begin
        			if m_arCodeAttribute[0].nAttribute <= 1 then
                    begin
                        if (Trim(Edit03HojCodeNum.Text) = '') then
                            nBmnNCode := 0
                        else
                            nBmnNCode := fnGetHojNCode(MASTER_SECTION, Format('%.16d',[StrToInt64(Edit03HojCodeNum.Text)]));
                    end
			        else
                        nBmnNCode := fnGetHojNCode(MASTER_SECTION, Edit03HojCodeFree.Text);

                    if (nBmnNCode <> 0) then
                    begin
                        bContinue := False;

            			for	iLoop := 1 to Length(m_rCommonBmn) - 1 do
                        begin
                            if (nBmnNCode = m_rCommonBmn[iLoop].NCode) then
                            begin
                                // 共通部門、非課税部門発見
// <TX26> MOD
{                               if ((m_rCommonBmn[iLoop].BunCode = 1) and not (nPickNo in [0, 11, 30, 40])) then
                                begin
                                    // 共通部門で11、30、40以外は除外
					                bContinue := True;
                                end
                                else if ((m_rCommonBmn[iLoop].BunCode = 2) and not (nPickNo in [0, 14, 30, 40])) then
                                begin
                                    // 非課税部門で14、30、40は除外
					                bContinue := True;
                                end;}
                                if ((m_rCommonBmn[iLoop].BunCode = 1) and not (nPickNo in [0, 11, 15, 30, 40])) or  // 共通部門で11、15、30、40以外は除外
                                   ((m_rCommonBmn[iLoop].BunCode = 2) and not (nPickNo in [0, 14, 16, 30, 40])) then// 非課税部門で14、16、30、40は除外
					                bContinue := True;
// <TX26> MOD
                            end;
                        end;

                        if bContinue then
        					Continue;
                    end;
                end;
// <194> ADD-END
// <189> Mod start
{
				if	((nPickNo <>  0) and (nPickNo <> 10) and
					 (nPickNo <> 11) and (nPickNo <> 30) and (nPickNo <> 40)) then
}
				if	((nPickNo <>  0) and (nPickNo <> 10) and (nPickNo <> 11) and
                     (nPickNo <> 15) and (nPickNo <> 16) and                    // <TX26> ADD 
					 (nPickNo <> 12) and (nPickNo <> 14) and (nPickNo <> 30) and (nPickNo <> 40)) then
// <189> Mod end
					Continue;

				Edit06TaxCode.SelectItems.Add(_TaxStockItems [nCount]);
			end;

			Edit06TaxCode.Value		:= FieldByName ('BTaxCode').AsInteger;		// 仕入消費税ｺｰﾄﾞ
			Edit06TaxCode.InputFlag	:= FALSE;
			Edit07TaxRate.Value		:= FieldByName ('BTaxRate').AsInteger;		// 仕入消費税率
			Edit07TaxRate.InputFlag	:= FALSE;
		end
		else																			// 消費税科目区分: 対象外
		begin
			Edit06TaxCode.Value		:= 0;
			Edit07TaxRate.Value		:= 0;
			Edit06TaxCode.InputFlag	:= TRUE;
			Edit07TaxRate.InputFlag	:= TRUE;
			Edit06TaxCode.Enabled	:= FALSE;
			Edit07TaxRate.Enabled	:= FALSE;

			Edit06TaxCodeName.Text	:= '';
			Edit07TaxRateName.Text	:= '';
		end;
	end;

	if (not Edit06TaxCode.InputFlag) then
	begin
		fnGetDescriptionSelectedItem(Edit06TaxCode, sName);
		Edit06TaxCodeName.Text := sName;
	end;

	fnChangeConditionOffsetTax();

	if (not Edit07TaxRate.InputFlag) then
	begin
// <#TAX10> MOD-STR
//		fnGetDescriptionSelectedItem(Edit07TaxRate, sName);
//		Edit07TaxRateName.Text := sName;
		Edit07TaxRateName.Text := fnGetTaxRateName(Edit07TaxRate.AsInteger);
// <#TAX10> MOD-END
	end;
end;

//**********************************************************************
//*		Proccess	:	消費税名称取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	cNumEdit
//*		Return		:	Notning
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetDescriptionSelectedItem(cNumEdit: TMNumEdit; var sRet: String): Boolean;
var
	nPos	: Integer;
begin
	sRet := '';

	nPos := fnGetIndexSelectItem(cNumEdit);

	if (nPos = -1) then
	begin
		Result := FALSE;
		Exit;
	end;

	sRet := cNumEdit.SelectItems.Strings[nPos];

	for	nPos := 1 to StrLen (PChar(sRet)) do
	begin
		if (Copy(sRet, nPos, 1) = ':') then
		begin
			sRet := Copy(sRet, nPos + 2, 256);
			Break;
		end;
	end;

	Result	:= TRUE;
end;

//**********************************************************************
//*		Proccess	:	選択されている消費税ｺｰﾄﾞのﾘｽﾄNOを取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	cNumEdit
//*		Return		:	ﾘｽﾄNO
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetIndexSelectItem(cNumEdit: TMNumEdit): Integer;
var
	nPickNo	 : Integer;
	nCount	 : Integer;
	nPosition: Integer;
begin
	for	nPosition := 0 to cNumEdit.SelectItems.Count - 1 do
	begin
		nPickNo	:= -1;

		for	nCount := 1 to StrLen (PChar (cNumEdit.SelectItems.Strings [nPosition])) do
		begin
			if	(Copy (cNumEdit.SelectItems.Strings [nPosition], nCount, 1) = ':') then
			begin
				nPickNo	:= StrToInt (Trim (Copy (cNumEdit.SelectItems.Strings [nPosition], 1, nCount - 1)));
				Break;
			end;
		end;

		if	(cNumEdit.AsInteger = nPickNo) then
		begin
			Result	:= nPosition;
			Exit;
		end;
	end;

	Result	:= -1;
end;

//**********************************************************************
//*		Proccess	:	消費税の状態変更
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/30
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeConditionOffsetTax ();
var
	sName	: String;
begin
	if (not Edit06TaxCode.Enabled) then
		Exit;

	if ((Edit06TaxCode.AsInteger =  0) or
		(Edit06TaxCode.AsInteger = 30) or (Edit06TaxCode.AsInteger = 40)) then
	begin
		Edit07TaxRate.Value		:= 0;
		Edit07TaxRate.InputFlag	:= TRUE;
		Edit07TaxRate.Enabled	:= FALSE;
		Edit07TaxRateName.Text	:= '';
// <#TAX10> ADD-STR
		Edit07TaxRateName.Color	:= clWindow;
// <#TAX10> ADD-END
	end
	else
	begin
		Edit07TaxRate.Enabled	:= TRUE;
		Edit07TaxRate.InputFlag	:= FALSE;

// <#TAX10> MOD-STR
//		fnGetDescriptionSelectedItem(Edit07TaxRate,sName);
//
//		Edit07TaxRateName.Text	:= sName;
		Edit07TaxRateName.Text := fnGetTaxRateName(Edit07TaxRate.AsInteger);
// <#TAX10> MOD-END
	end;
end;
//**********************************************************************
//*		Proccess	:
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/31
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckEditNumValueKmkCode(): Boolean;
var
	sName	: String;
	fReturn	: Boolean;
    i       : Integer;  // <181> ADD
begin
	fnKmkCheck(Edit02KmkCode.AsInteger,sName,fReturn);

	Edit02KmkCodeName.Text := sName;

	if (not fReturn) then
	begin
		m_cACControl := Edit02KmkCode;

		Result := FALSE;
		Exit;
	end;

	fnSetAttributeOffsetJournalInfo(Edit02KmkCode.AsInteger);

// <181> ADD-STR
    if (Screen.ActiveControl.Name = Edit02KmkCode.Name) then
    begin
    	m_dSousaiBmnNCode := 0;			                            // 部門内部コード <183> ADD

        // 内部コードエリアをクリア
    	for i := Low(m_nHojyoNCode) to High(m_nHojyoNCode) do
	    	m_nHojyoNCode[i]	:= 0;
    end;
// <181> ADD-END

	Result := TRUE;
end;

//**********************************************************************
//*		Proccess	:	支払ｺｰﾄﾞﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/31
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						(out)sRet	:	名称(簡略)
//*						Mode		:	処理ﾓｰﾄﾞ	実在	 :DISPOSE_REAL
//*													実在/合計:DISPOSE_ALL
//*													名寄せ親 :DISPOSE_NAYOSEOYA
//*		Return		:	存在(True)/存在しない(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnPayCodeCheck(sHojCode: String; var sRet: String; var sPayNCD: Extended; Mode: Integer): Boolean;
begin
	sRet := '';
	if (Trim(sHojCode) = '') then
	begin
		Result := FALSE;
		Exit;
	end;

	if (m_nCurCodeAttribute <= 1) then
		sHojCode := Format ('%.16d',[StrToInt64(Trim(sHojCode))]);

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();

		SQL.Add('SELECT NCode,GCode,NMK FROM MTOKUI ');
		SQL.Add('WHERE RDelKbn = 0 AND GCode = :HC AND SumKbn <> 9 ');
		case Mode of
// <174> Mod
//			DISPOSE_ALL		 : SQL.Add('AND ((SumKbn = 0 and HojyoKbn2 = 1) or SumKbn = 1) ');	// 合計/実在
			DISPOSE_ALL		 : SQL.Add('AND ((SumKbn = 0 or SumKbn = 1) and HojyoKbn2 = 1) ');	// 合計/実在
// <174> Mod
			DISPOSE_REAL	 : SQL.Add('AND (SumKbn = 0 and HojyoKbn2 = 1) ');					// 実在
// <174> Mod
//			DISPOSE_NAYOSEOYA: SQL.Add('AND SumKbn = 1 AND PayRootKbn = 1 ');					// 名寄せ親
			DISPOSE_NAYOSEOYA: SQL.Add('AND SumKbn = 1 AND HojyoKbn2 = 1 AND PayRootKbn = 1 ');	// 名寄せ親
// <174> Mod

		end;
		ParamByName('HC').AsString	:= sHojCode;

		Open ();

		if EOF <> True then
		begin
			sRet := FieldByName('NMK').AsString;
            sPayNCD := FieldByName('NCODE').AsFloat;
			Result := True;
		end
		else
			Result := False;
    end;
end;

//**********************************************************************
//*		Proccess	:	ﾌｫｰｶｽ移動時のﾁｪｯｸ処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/31
//*		Parameter	:	LeftUpFlg   :   ←↑が押下時(True)/以外(False)
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnMoveFocusNextControl(LeftUpFlg: Boolean): Boolean;
var
	swk			: String;
	sName		: String;
    sPayNCode   : Extended;
	strHojCode	: String;
	bChgFlg		: Boolean;
    nPrjNCode   : Extended; // <142> Add
    iPartKbn    : Integer;  // <142> Add
begin
	Result  := True;
	bChgFlg := False;
	swk     := '';

	// 支払先
	if (Screen.ActiveControl.Name = Edit00PayCodeNum.Name) or
	   (Screen.ActiveControl.Name = Edit00PayCodeFree.Name) then
	begin
		if (Screen.ActiveControl.Name = Edit00PayCodeNum.Name) then
		begin
			if Edit00PayCodeNum.InputFlag = False then
// <142> 2007/02/20 H.Kawato Mod
//				swk := IntToStr(Edit00PayCodeNum.AsInteger);
				swk := FloatToStr(Edit00PayCodeNum.Value);
		end
		else
			swk := Edit00PayCodeFree.Text;

// <146> 2007/07/11 H.Kawato Add Start
        // 支払先コードが空の場合
        if (swk = '') then
        begin
            Result  := False;
            Edit00PayName.Text  := '';
        end;
// <146> 2007/07/11 H.Kawato Add End

// <146> 2007/07/11 H.Kawto Mod
//		if m_Save <> swk then	// 内容が変更されていた時
		if (m_Save <> swk) and (swk <> '') then // 内容が変更されていた時かつ入力値が空でない時
		begin
			Result := fnPayCodeCheck(swk,sName,sPayNCode,DISPOSE_ALL);
			Edit00PayName.Text := sName;

			bChgFlg := True;
			if (swk <> '') and (m_nCurCodeAttribute <= 1) then
				swk := Format('%.16d',[Trunc(Edit00PayCodeNum.Value)]);			//<#1>(｢Edit00PayCodeNum.AsInteger｣→｢Trunc(Edit00PayCodeNum.Value)変更｣)
			// 支払ｺｰﾄﾞが存在してかつ、Selecterで存在するｺｰﾄﾞがなかった時
			if (fnMoveGridSelecter(MemOffset,swk,'strHojCode') = False) and (Result = True) then
			begin
				if (m_nCurCodeAttribute <= 1) then	// 数値
				begin
					Edit00PayCodeNum.InputFlag := False;
// <142> 2007/02/20 H.Kawato Mod
//					Edit00PayCodeNum.Value     := StrToInt(swk);	// 支払先ｺｰﾄﾞ
					Edit00PayCodeNum.Value     := StrToFloat(swk);	// 支払先ｺｰﾄﾞ
				end
				else								// 文字
					Edit00PayCodeFree.Text := swk;
				Edit00PayName.Text		   := sName;
// <146> 2007/07/11 H.Kawato Add Start
                Edit09PrjCodeNum.Value      := 0;
                Edit09PrjCodeNum.InputFlag  := True;
                Edit09PrjCodeFree.Text      := '';
                Edit09PrjName.Text          := '';
// <146> 2007/07/11 H.Kawato Add End
				fnInitializeOffsetJournalInfo();
			end;
		end;

		// 支払ｺｰﾄﾞが存在しない時
// <146> 2007/07/11 H.Kawato Mod Start
//		if Result = False then
//			fnInitializeOffsetJournalInfo();
		if Result = False then
        begin
            m_Save  := '';  // 入力値エラー後に入力された取引先の名称を表示する為
			fnInitializeOffsetJournalInfo();
        end;
// <146> 2007/07/11 H.Kawato Mod End
	end;

// <142> 2007/02/20 H.Kawato Add Start
	// ﾌﾟﾛｼﾞｪｸﾄ
    if (m_iProAdoptKbn = 1) then
    begin
	    if (Screen.ActiveControl.Name = Edit09PrjCodeNum.Name) or
           (Screen.ActiveControl.Name = Edit09PrjCodeFree.Name) then
        begin
			// 支払先ｺｰﾄﾞ取得
			if Edit00PayCodeNum.Visible = True then
				strHojCode := Format('%.16d',[Trunc(Edit00PayCodeNum.Value)])
			else
				strHojCode := Edit00PayCodeFree.Text;

            // 支払先内部ｺｰﾄﾞの取得
			fnPayCodeCheck(strHojCode,sName,sPayNCode,DISPOSE_ALL);

        	if (Screen.ActiveControl.Name = Edit09PrjCodeNum.Name) then
        	begin
        		if Edit09PrjCodeNum.InputFlag = False then
                begin
    				swk := FloatToStr(Edit09PrjCodeNum.Value);
                    strHojCode  := strHojCode + Format('%.16d',[Trunc(Edit09PrjCodeNum.Value)]);
                end;
        	end
        	else
            begin
        		swk := Edit09PrjCodeFree.Text;
                strHojCode  := strHojCode + swk;
            end;

            sName   := '';  // <146> Add

// <146> 2007/07/11 H.Kawato Mod
//        	if m_Save <> swk then	// 内容が変更されていた時
        	if (m_Save <> swk) or ((m_Save = '') and (swk = '')) then           // 内容が変更されていた時、または初回が空の時
        	begin
                if (Trim(swk) <> '') then
                begin
                    if fnGetPrjCodeInfo(swk,m_iProjectKbn,nPrjNCode,sName,iPartKbn) then
                    begin
                		Edit09PrjName.Text := sName;
                		Result := not (fnGetPayPtnInfoCheck(sPayNCode, nPrjNCode, 0));
// <193> ADD-STR
                        if not Result then
                        begin
                            Beep;
                            MJSMessageBoxEx (Self, '該当プロジェクトの支払情報がありません。', '確認', mjInformation, mjOK, mjDefOK);
                        end;
// <193> ADD-END
// <146> 2007/07/11 H.Kawato Add Start
                    end
                    else
                    begin
                        Result  := False;
                        Exit;
// <146> 2007/07/11 H.Kawato Add End
                    end;
                end
                else
                    Edit09PrjName.Text := 'その他';

        		bChgFlg := True;
        		if (swk <> '') and (m_iPrjCodeAttr <= 1) then
        			swk := Format('%.16d',[Trunc(Edit09PrjCodeNum.Value)]);

        		// ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞが存在してかつ、Selecterで存在するｺｰﾄﾞがなかった時
        		if (fnMoveGridSelecter(MemOffset,strHojCode,'strPrjCD') = False) and (Result = True) then
        		begin
                    if (Trim(swk) <> '') then
                    begin
                        if (m_iPrjCodeAttr <= 1) then	// 数値
                        begin
                        	Edit09PrjCodeNum.InputFlag := False;
                        	Edit09PrjCodeNum.Value     := StrToFloat(swk);  // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                        end
                        else							// 文字
                        	Edit09PrjCodeFree.Text := swk;
                        Edit09PrjName.Text		   := sName;
                    end
                    else
                        Edit09PrjName.Text		   := 'その他';
        			fnInitializeOffsetJournalInfo();
        		end;
        	end;

        	// ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞが存在しない時
        	if Result = False then
        		fnInitializeOffsetJournalInfo();
        end;
    end;
// <142> 2007/02/20 H.Kawato Add End

	// No
	if (Screen.ActiveControl.Name = Edit01SeqNo.Name) then
	begin
		if (not (Edit01SeqNo.AsInteger >=1)) or (not(Edit01SeqNo.AsInteger <= 10)) then
			Result := False
		else
		begin
			// 支払先ｺｰﾄﾞ取得
			if Edit00PayCodeNum.Visible = True then
				strHojCode := Format('%.16d',[Trunc(Edit00PayCodeNum.Value)])	//<#1>(｢Edit00PayCodeNum.AsInteger｣→｢Trunc(Edit00PayCodeNum.Value)変更｣)
			else
				strHojCode := Edit00PayCodeFree.Text;
// <142> 2007/02/20 H.Kawato Add Start
            if (m_iProAdoptKbn = 1) then
            begin
			    // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ取得
                if Edit09PrjCodeNum.Visible = True then
                begin
                    if (Edit09PrjCodeNum.InputFlag = False) then
                    	strHojCode := strHojCode + Format('%.16d',[Trunc(Edit09PrjCodeNum.Value)])
                    else
                        strHojCode := strHojCode + '';
                end
                else
                	strHojCode := strHojCode + Edit09PrjCodeFree.Text;
            end;
// <142> 2007/02/20 H.Kawato Add End
			// Enter時の科目ｺｰﾄﾞを文字型で取得
			swk := IntToStr(Edit01SeqNo.AsInteger);
			if (bChgFlg = True) or (m_Save <> swk) then	// 内容が変更されていた時
			begin
				strHojCode := strHojCode+swk;
				// 相殺NOが存在しない時
				if (fnMoveGridSelecter(MemOffset,strHojCode,'strSeqCD') = False) then
				begin
					Edit01SeqNo.InputFlag := False;
					Edit01SeqNo.Value     := StrToInt(swk);	// 相殺No
					fnInitializeOffsetJournalInfo();
				end;
			end;
		end;
	end;
	// 科目
	if (Screen.ActiveControl.Name = Edit02KmkCode.Name) then
	begin
		// Enter時の科目ｺｰﾄﾞを文字型で取得
		if Edit02KmkCode.InputFlag = False then
		begin
			swk := IntToStr(Edit02KmkCode.AsInteger);
			if m_Save <> swk then	// 内容が変更されていた時
				Result := fnCheckEditNumValueKmkCode();
		end
		else if (Edit02KmkCode.InputFlag = True) and (Edit02KmkCode.AsInteger = 0) then
		begin
			if LeftUpFlg <> True then
				Result := False;
		end;
	end;

	// 補助1
	if (Screen.ActiveControl.Name = Edit03HojCodeFree.Name) or
	   (Screen.ActiveControl.Name = Edit03HojCodeNum.Name) then
	begin
		if (Screen.ActiveControl.Name = Edit03HojCodeFree.Name) then
			swk := Edit03HojCodeFree.Text
		else
		begin
			if Edit03HojCodeNum.InputFlag = False then
// <142> 2007/02/20 H.Kawato Mod
//				swk := IntToStr(Edit03HojCodeNum.AsInteger);
				swk := FloatToStr(Edit03HojCodeNum.Value);
		end;

		if m_Save <> swk then
			Result := fnCheckEditTxtValueHojCodeEx(3);
	end;

	// 補助2
	if (Screen.ActiveControl.Name = Edit04HojCodeFree.Name) or
	   (Screen.ActiveControl.Name = Edit04HojCodeNum.Name) then
	begin
		if (Screen.ActiveControl.Name = Edit04HojCodeFree.Name) then
			swk := Edit04HojCodeFree.Text
		else
		begin
			if Edit04HojCodeNum.InputFlag = False then
// <142> 2007/02/20 H.Kawato Mod
//				swk := IntToStr(Edit04HojCodeNum.AsInteger);
				swk := FloatToStr(Edit04HojCodeNum.Value);
		end;

		if m_Save <> swk then
			Result := fnCheckEditTxtValueHojCodeEx(4);
	end;

	// 補助3
	if (Screen.ActiveControl.Name = Edit05HojCodeFree.Name) or
	   (Screen.ActiveControl.Name = Edit05HojCodeNum.Name) then
	begin
		if (Screen.ActiveControl.Name = Edit05HojCodeFree.Name) then
			swk := Edit05HojCodeFree.Text
		else
		begin
			if Edit05HojCodeNum.InputFlag = False then
// <142> 2007/02/20 H.Kawato Mod
//				swk := IntToStr(Edit05HojCodeNum.AsInteger);
				swk := FloatToStr(Edit05HojCodeNum.Value);
		end;

		if m_Save <> swk then
			Result := fnCheckEditTxtValueHojCodeEx(5);
	end;

	// 消費税ｺｰﾄﾞ
	if (Screen.ActiveControl.Name = Edit06TaxCode.Name) then
	begin
		swk := IntToStr(Edit06TaxCode.AsInteger);
//		if m_Save <> swk then   // <142> Del
//		begin
			Result := fnGetDescriptionSelectedItem(Edit06TaxCode, sName);
			Edit06TaxCodeName.Text := sName;
//		end;
	end;

	// 消費税率ｺｰﾄﾞ
	if (Screen.ActiveControl.Name = Edit07TaxRate.Name) then
	begin
		swk := IntToStr(Edit07TaxRate.AsInteger);
//		if m_Save <> swk then   // <142> Del 
//		begin
			Result := fnGetDescriptionSelectedItem(Edit07TaxRate, sName);
// <#TAX10> MOD-STR
//			Edit07TaxRateName.Text := sName;
			Edit07TaxRateName.Text := fnGetTaxRateName(Edit07TaxRate.AsInteger);
// <#TAX10> MOD-END
//		end;
	end;
end;

//************************************************************************
//*		Component		:	Edit06TaxCode ( TMNumEdit )
//*							消費税ｺｰﾄﾞの変更時
//*		Event			:	OnChange
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.Edit06TaxCodeChange(Sender: TObject);
begin
	fnChangeConditionOffsetTax();
end;

//**********************************************************************
//*		Proccess	:	相殺仕訳情報ｸﾘｱ処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/05
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnInitializeOffsetJournalInfo();

begin
	Edit02KmkCode.Value		   := 0;											// 科目ｺｰﾄﾞ
	Edit02KmkCode.InputFlag	   := TRUE;
	Edit02KmkCodeName.Text	   := '';
	Edit03HojCodeFree.Visible  := FALSE;										// 科目別補助･部門･補助ｺｰﾄﾞ
	Edit03HojCodeNum.Visible   := TRUE;
	Edit03HojCodeNum.Value	   := 0;
	Edit03HojCodeNum.InputFlag := TRUE;
	Edit03HojCodeName.Text	   := '';
	Edit04HojCodeFree.Visible  := FALSE;										// 科目別補助･部門･補助ｺｰﾄﾞ
	Edit04HojCodeNum.Visible   := TRUE;
	Edit04HojCodeNum.Value	   := 0;
	Edit04HojCodeNum.InputFlag := TRUE;
	Edit04HojCodeName.Text	   := '';
	Edit05HojCodeFree.Visible  := FALSE;										// 科目別補助･部門･補助ｺｰﾄﾞ
	Edit05HojCodeNum.Visible   := TRUE;
	Edit05HojCodeNum.Value	   := 0;
	Edit05HojCodeNum.InputFlag := TRUE;
	Edit05HojCodeName.Text	   := '';
	Edit06TaxCode.Value		   := 0;											// 消費税ｺｰﾄﾞ
	Edit06TaxCode.InputFlag	   := TRUE;
	Edit06TaxCodeName.Text	   := '';
	Edit07TaxRate.Value		   := 0;											// 消費税率ｺｰﾄﾞ
	Edit07TaxRate.InputFlag	   := TRUE;
	Edit07TaxRateName.Text	   := '';
	Edit08OffsetPrice.Value	   := 0;											// 相殺金額


end;

//**********************************************************************
//*		Proccess	:	相殺仕訳削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/05
//*		Parameter	:	Nothing
//*		Return		:	True/False
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteOffsetRecord(): Boolean;
var
	sCode		: String;
	sName		: String;
	sSeqNo		: String;
	strFormat	: String;
	sMsgName	: String;
    ExNCode     : Extended;
    iRenInitRet : Integer;      // <122> 2006/04/25 H.Kawato Add
    strSQL      : String;       // <142> 2007/02/20 H.Kawato Add
    iPayPtnNo   : Integer;      // <142> 2007/02/20 H.Kawato Add
    sPrjCode    : String;       // <142> 2007/02/20 H.Kawato Add
    sPrjName    : String;       // <142> 2007/02/20 H.Kawato Add
begin
    Result  :=  FALSE;

    iPayPtnNo   := 1;           // <142> Add

	// 支払ｺｰﾄﾞ取得
	if Edit00PayCodeNum.Visible = True then
	begin
// <122> 2006/04/25 H.Kawato Mod
//		sCode := IntToStr(Edit00PayCodeNum.AsInteger);
		sCode := FloatToStr(Edit00PayCodeNum.Value);

		if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
		begin
			case (m_nCurCodeAttribute) of
				0: strFormat := '%' +IntToStr(m_nCurCodeDigit)+'d';
				1: strFormat := '%.'+IntToStr(m_nCurCodeDigit)+'d';
			end;
		end;
		sCode := Format(strFormat,[StrToInt64(Trim(sCode))]);
	end
	else
		sCode := Edit00PayCodeFree.Text;
	// 支払名称取得
	sName := Edit00PayName.Text;

// <142> 2007/02/20 H.Kawato Add Start
    if (m_iProAdoptKbn = 1) then
    begin
        iPayPtnNo   := MemOffset.FieldByName('PayPtnNo').AsInteger;
	    // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ取得
        if (Edit09PrjCodeNum.Visible = True) then
        begin
            if (Edit09PrjCodeNum.InputFlag = False) then
            begin
                sPrjCode := FloatToStr(Edit09PrjCodeNum.Value);

                if ((m_iPrjCodeAttr <= 1) and (Trim(sPrjCode) <> '')) then
                begin
                	case (m_nCurCodeAttribute) of
                		0: strFormat := '%' +IntToStr(m_iPrjCodeDigit)+'d';
                		1: strFormat := '%.'+IntToStr(m_iPrjCodeDigit)+'d';
                	end;
                end;
                sPrjCode := Format(strFormat,[StrToInt64(Trim(sPrjCode))]);
            end
            else
                sPrjCode    := '';
        end
        else
        	sPrjCode := Edit09PrjCodeFree.Text;
        // 支払名称取得
        sPrjName := Edit09PrjName.Text;
    end;
// <142> 2007/02/20 H.Kawato Add End

	// 相殺NO取得
	sSeqNo := IntToStr(Edit01SeqNo.AsInteger);

	// 削除対象名称作成
// <142> 2007/02/20 H.Kawato Mod Start
//	sMsgName := sCode+' '+sName+' No '+sSeqNo;
    if (m_iProAdoptKbn = 1) then
    	sMsgName := sCode+' '+sName+' '+sPrjCode+' '+sPrjName+' No '+sSeqNo
    else
        sMsgName := sCode+' '+sName+' No '+sSeqNo;
// <142> 2007/02/20 H.Kawato Mod End
	// 削除メッセージ表示('xxx'を削除します。よろしいですか？)
	m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
	if (MjsMessageBoxEx(Self,''''+sMsgName+'''を'+MjsMsgRec.sMsg, MjsMsgRec.sTitle,
						MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, MJsMsgRec.LogType) = mrYes) then

	begin
		// -----<159> Add-St-----
		SessionPractice(C_ST_PROCESS);

		try
		// -----<159> Add-Ed-----

		if Edit00PayCodeNum.Visible = True then
			sCode := Format('%.16d',[Trunc(Edit00PayCodeNum.Value)])			//<#1>(｢Edit00PayCodeNum.AsInteger｣→｢Trunc(Edit00PayCodeNum.Value)変更｣)
		else
			sCode := Edit00PayCodeFree.Text;

		with (m_Qe) do
		begin
			Close();
			SQL.Clear();

            //NCode取得
            SQL.Add('SELECT NCode From MTOKUI                            ');
            SQL.Add('Where GCode = :GC and RDelKbn =0 And HojyoKbn2 = 1    ');

			ParamByName('GC' ).AsString  := sCode;

			if	(not Open) then
			begin
				fnErrorMessageDsp(m_Qe);
				Exit;
			end;

            ExNCode := GetFld('NCode').AsFloat;

// <122> 2006/04/25 H.Kawato Add St
            iRenInitRet := -99; // <125>

            try                 // <125>

                iRenInitRet := fnPayProgRendoInit(ExNCode);

                if (iRenInitRet = 1) or (iRenInitRet = 0) then
                begin
// <122> 2006/04/25 H.Kawato Add Ed
			        Close();
                    SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start 
{
                    SQL.Add('DELETE FROM PayOffsetInfo WHERE MasterKbn = :MK AND PayNCode = :NCD AND SousaiNo = :SNO');
                    ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;
                    ParamByName('NCD').AsFloat   := ExNCode;
                    ParamByName('SNO').AsInteger := Edit01SeqNo.AsInteger;
}
                    strSQL := 'DELETE FROM PayOffsetInfo '
                            + 'WHERE MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                            + '  AND RDelKbn = 0 '  // <144> Add
                            + '  AND PayNCode = ' + FloatToStr(ExNCode)
                            + '  AND PayPtnNo = ' + IntToStr(iPayPtnNo)
                            + '  AND SousaiNo = ' + IntToStr(Edit01SeqNo.AsInteger);

                    SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

                    if	(not ExecSQL ()) then
                    begin
                    	fnErrorMessageDsp(m_Qe);
                    	Exit;
                    end;
// <122> 2006/04/25 H.Kawato Add St
                end;

            finally             // <125>
                fnPayProgRendoExec(iRenInitRet, ExNCode);
            end;                // <125>
// <122> 2006/04/25 H.Kawato Add Ed
		end;
		// 相殺情報再表示
		fnGetOffsetInfo();
		// 支払ｺｰﾄﾞ
		if Edit00PayCodeNum.Visible = True then
		begin
			Edit00PayCodeNum.Value     := 0;
			Edit00PayCodeNum.InputFlag := True;
		end
		else
			Edit00PayCodeFree.Text := '';
		Edit00PayName.Text := '';
// <142> 2007/02/20 H.Kawato Add Start 
        // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
        if (m_iProAdoptKbn = 1) then
        begin
            // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
            if Edit09PrjCodeNum.Visible = True then
            begin
            	Edit09PrjCodeNum.Value     := 0;
            	Edit09PrjCodeNum.InputFlag := True;
            end
            else
            	Edit09PrjCodeFree.Text := '';
            Edit09PrjName.Text := '';
        end;
// <142> 2007/02/20 H.Kawato Add End
		// 相殺NO
		Edit01SeqNo.Value     := 0;
		Edit01SeqNo.InputFlag := True;

		fnInitializeOffsetJournalInfo();

		// -----<159> Add-St-----
		finally
			SessionPractice(C_ED_PROCESS);
		end;
		// -----<159> Add-Ed-----
	end;

	Result	:= TRUE;
end;
//**********************************************************************
//*		Proccess	:	相殺情報ﾏｽﾀの更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/05
//*		Parameter	:	Nothing
//*		Return		:	True/False
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordPayOffsetInfo(): Boolean;
var
	sPayCD	: String;
	sPrjCD	: String;       // <142> Add
	nSeqNO	: Integer;
	nKmCD	: Integer;
	sKmHCD	: String;
	sBmnCD	: String;
	sSegCD	: String;
	nHojKbn1: Integer;
	sHojCD1	: String;
	nHojKbn2: Integer;
	sHojCD2	: String;
	sKojCD	: String;
	sKsyCD	: String;
	i		: Integer;
// <127> 2006/06/27 H.Kawato Mod
//	nwk		: Int64;
	nwk		: String;
// <127> 2006/06/27 H.Kawato Mod
	nKbn	: Integer;
	sSQL	: String;

    NewRecFlg  : Boolean;

    exPayN      :Extended;
    exPrjN      :Extended;  // <142> Add
    exKmkN      :Extended;
    exSubN      :Extended;
    exBmnN      :Extended;
    exSegN      :Extended;
    exHoj1N     :Extended;
    exHoj2N     :Extended;
    exKojN      :Extended;
    exKsyN      :Extended;

    iPayPtnNo   : Integer;
    strSQL      : String;   // <142> Add

begin
	Result := TRUE;
	// 初期処理
//<033>	nKmHCD   := -1;	// 科目別補助ｺｰﾄﾞ
	sBmnCD	 := '';	// 部門ｺｰﾄﾞ
	sSegCD	 := '';	// ｾｸﾞﾒﾝﾄｺｰﾄﾞ
	nHojKbn1 := -1;	// 補助区分1
	sHojCD1	 := '';	// 補助ｺｰﾄﾞ1
	nHojKbn2 := -1;	// 補助区分2
	sHojCD2	 := '';	// 補助ｺｰﾄﾞ2
	sKojCD	 := '';	// 工事ｺｰﾄﾞ
	sKsyCD	 := '';	// 工種ｺｰﾄﾞ
	sSQL	 := '';

    exPrjN   := 0;  // <142> Add
    exSegN   := 0;
    exKojN   := 0;  // <114>
    exKsyN   := 0;  // <142> Add

    iPayPtnNo   := 1;   // <142> Add    

	// 支払ｺｰﾄﾞ
	if Edit00PayCodeNum.Visible = True then
		sPayCD := Format('%.16d',[Trunc(Edit00PayCodeNum.Value)])				//<#1>(｢Edit00PayCodeNum.AsInteger｣→｢Trunc(Edit00PayCodeNum.Value)変更｣)
	else
		sPayCD := Edit00PayCodeFree.Text;

// <142> 2007/02/20 H.Kawato Add Start 
	// ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
    if (m_iProAdoptKbn = 1) then
    begin
	    if Edit09PrjCodeNum.Visible = True then
        begin
            if (Edit09PrjCodeNum.InputFlag = False) then
            	sPrjCD := Format('%.16d',[Trunc(Edit09PrjCodeNum.Value)])
            else
            	sPrjCD := '';
        end
        else
        	sPrjCD := Edit09PrjCodeFree.Text;
    end;
// <142> 2007/02/20 H.Kawato Add End

	// 相殺No
	nSeqNO := Edit01SeqNo.AsInteger;
	// 科目ｺｰﾄﾞ
	nKmCD := Edit02KmkCode.AsInteger;

	nKbn := 1;
	for	i := 0 to 2 do
	begin
		case m_arCodeAttribute[i].nMasterDivision of
			MASTER_SUBJECTPLUS:	// 科目別補助
			begin
    			if m_arCodeAttribute[i].nAttribute <= 1 then
				begin
// <127> 2006/06/27 H.Kawato Mod
//					nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).AsInteger;
//					sKmHCD	:= Format('%.16d',[nwk]);
					nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;
					sKmHCD	:= Format('%.16d',[StrToInt64(nwk)]);
// <127> 2006/06/27 H.Kawato Mod
				end
				else
					sKmHCD  := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;

			end;
			// 銀行/取引先/得意先/仕入先/社員/汎用補助①②③④⑤
			MASTER_BANK,MASTER_CUSTOMER,MASTER_CUSTOMERPLUS01,MASTER_CUSTOMERPLUS02,
			MASTER_STAFF,MASTER_GENERAL01..MASTER_GENERAL05:
			begin
				if nKbn = 1 then
				begin
					nHojKbn1 := m_arCodeAttribute[i].nMasterDivision;			// 補助区分1

                    if (nHojKbn1 = MASTER_CUSTOMERPLUS01) or (nHojKbn1 = MASTER_CUSTOMERPLUS02) then    //<115>
                        nHojKbn1 := MASTER_CUSTOMER;                                                    //<115>

					// 補助ｺｰﾄﾞ1
					if m_arCodeAttribute[i].nAttribute <= 1 then
					begin
// <127> 2006/06/27 H.Kawato Mod
//						nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).AsInteger;
//						sHojCD1	:= Format('%.16d',[nwk]);
						nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;
						sHojCD1	:= Format('%.16d',[StrToInt64(nwk)]);
// <127> 2006/06/27 H.Kawato Mod
					end
					else
						sHojCD1 := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;
					nKbn := 2;
				end
				else
				begin
					nHojKbn2 := m_arCodeAttribute[i].nMasterDivision;			// 補助区分2

                    if (nHojKbn2 = MASTER_CUSTOMERPLUS01) or (nHojKbn2 = MASTER_CUSTOMERPLUS02) then    //<115>
                        nHojKbn2 := MASTER_CUSTOMER;                                                    //<115>

                    // 補助ｺｰﾄﾞ2
					if m_arCodeAttribute[i].nAttribute <= 1 then
					begin
// <127> 2006/06/27 H.Kawato Mod
//						nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).AsInteger;
//						sHojCD2	:= Format('%.16d',[nwk]);
						nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;
						sHojCD2	:= Format('%.16d',[StrToInt64(nwk)]);
// <127> 2006/06/27 H.Kawato Mod
					end
					else
						sHojCD2 := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;
				end;
			end;
			MASTER_SECTION:		// 部門
			begin
		   		if m_arCodeAttribute[i].nAttribute <= 1 then
				begin
// <127> 2006/06/27 H.Kawato Mod
//					nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).AsInteger;
//					sBmnCD	:= Format('%.16d',[nwk]);
					nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;
					sBmnCD	:= Format('%.16d',[StrToInt64(nwk)]);
// <127> 2006/06/27 H.Kawato Mod
				end
				else
					sBmnCD := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;
            end;
		end;

        // ｾｸﾞﾒﾝﾄ
		if ((m_arCodeAttribute [i].nMasterDivision >= 101)  and
            (m_arCodeAttribute [i].nMasterDivision <= 110)) then
		begin
			if m_arCodeAttribute[i].nAttribute <= 1 then
			begin
// <127> 2006/06/27 H.Kawato Mod
//				nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).AsInteger;
//				sSegCD	:= Format('%.16d',[nwk]);
				nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;
				sSegCD	:= Format('%.16d',[StrToInt64(nwk)]);
// <127> 2006/06/27 H.Kawato Mod
			end
			else
				sSegCD := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;

            exSegN  := fnGetHojNCode(m_arCodeAttribute[i].nMasterDivision,sSegCD);
        end;

    	// 工事
		if ((m_arCodeAttribute[i].nMasterDivision >= 201)  and
            (m_arCodeAttribute[i].nMasterDivision <= 210)) then
		begin
			if m_arCodeAttribute[i].nAttribute <= 1 then
			begin
// <127> 2006/06/27 H.Kawato Mod
//				nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).AsInteger;
//				sKojCD	:= Format('%.16d',[nwk]);
				nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;

                if (nwk <> '') then
    				sKojCD	:= Format('%.16d',[StrToInt64(nwk)])
                else
                    sKojCD	:= '';
// <127> 2006/06/27 H.Kawato Mod
			end
			else
				sKojCD := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;

            exKojN  := fnGetHojNCode(m_arCodeAttribute[i].nMasterDivision,sKojCD);  //<114>
        end;

// <142> 2007/02/20 H.Kawato Add Start
    	// 工種
		if ((m_arCodeAttribute[i].nMasterDivision >= 301)  and
            (m_arCodeAttribute[i].nMasterDivision <= 310)) then
		begin
			if m_arCodeAttribute[i].nAttribute <= 1 then
			begin
				nwk     := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[i+3]))).Text;
				sKsyCD	:= Format('%.16d',[StrToInt64(nwk)]);
			end
			else
				sKsyCD := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[i+3]))).Text;

            exKsyN  := fnGetHojNCode(m_arCodeAttribute[i].nMasterDivision,sKsyCD);
        end;
// <142> 2007/02/20 H.Kawato Add End

	end;

    exPayN  := fnGetHojNCode(MASTER_CUSTOMER,sPayCD);
    if (m_iProAdoptKbn = 1) then
        exPrjN  := fnGetHojNCode(m_iProjectKbn,sPrjCD);
    exKmkN  := fnGetKmkNCode(nKmCD);
    exSubN  := fnGetKmkSubNCode(nKmCD,sKmHCD);
// <161> MOD-STR
//  exBmnN  := fnGetHojNCode(MASTER_SECTION,sBmnCD);
    exBmnN  := m_dSousaiBmnNCode;
// <161> MOD-END
    exHoj1N := fnGetHojNCode(MASTER_HOJYO1,sHojCD1);
    exHoj2N := fnGetHojNCode(MASTER_HOJYO2,sHojCD2);
//    exKsyN  := fnGetHojNCode(MASTER_CONSTKIND,sKsyCD);    // <142> Del

	with (m_Qe) do
	begin
// <142> 2007/02/20 H.Kawato Add Start
		SQL.Clear();

		strSQL := 'SELECT PayPtnNo FROM PayPtnInfo '
                + 'WHERE RDelKbn = 0 '
                + '  AND PjSubNCode = 0 '
                + '  AND PrjNCode = ' + FloatToStr(exPrjN)
                + '  AND BmnNCode = 0 '
                + '  AND PayNCode = ' + FloatToStr(exPayN)
                + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);

		// ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := False;
   	       	Exit;
		end;

		if not (EOF) then
            iPayPtnNo   := FieldByName('PayPtnNo').AsInteger;
// <142> 2007/02/20 H.Kawato Add End
		SQL.Clear();

// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PayNCode FROM PayOffsetInfo ');
		SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :HojCD AND SousaiNo = :SeqNo');
		SQL.Add('  AND PayPtnNo = :PtnNo ');
		ParamByName('MasKbn').AsInteger	:= MASTER_CUSTOMER;
		ParamByName('HojCD' ).AsFloat	:= exPayN;
		ParamByName('SeqNo' ).AsInteger	:= nSeqNO;
		ParamByName('PtnNo' ).AsInteger	:= iPayPtnNo;
}
		strSQL := 'SELECT PayNCode FROM PayOffsetInfo '
                + 'WHERE SousaiNo = ' + IntToStr(nSeqNO)
                + '  AND PayPtnNo = ' + IntToStr(iPayPtnNo)
                + '  AND PayNCode = ' + FloatToStr(exPayN)
                + '  AND RDelKbn  = 0 ' // <144> Add
                + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		// ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := False;
   	       	Exit;
		end;

        //新規・更新判断
        NewRecFlg := False;
		if (EOF) then
            NewRecFlg := True;

		Close();
		SQL.Clear();

		if NewRecFlg = True then
		begin
        //新規
            SQL.Add('Insert Into PayOffsetInfo                                              ');
            SQL.Add('(MasterKbn,PayNCode,SousaiNo,                                          ');
            SQL.Add('KmkNCode,SubNCode,BmnNCode,SegNCode,HojKbn1,Hoj1NCode,HojKbn2,Hoj2NCode,   ');
// <142> 2007/02/20 H.Kawato Mod
//            SQL.Add('KojNCode,KsyNCode,FeeTaxCd,FeeTaxRt,SousaiKin,ZeiKin)                  ');
            SQL.Add('KojNCode,KsyNCode,FeeTaxCd,FeeTaxRt,SousaiKin,ZeiKin,PayPtnNo,         ');
// <181> ADD-STR
            SQL.Add('CKmkNCode, CSubNCode, CBmnNCode, ');
            SQL.Add('CSegNCode1, CSegNCode2, CSegNCode3, CSegNCode4, CSegNCode5, ');
            SQL.Add('CSegNCode6, CSegNCode7, CSegNCode8, CSegNCode9, CSegNCode10, ');
            SQL.Add('CBankNCode, CCsNCode, CEmpNCode, ');
            SQL.Add('CMulNCode1, CMulNCode2, CMulNCode3, CMulNCode4, CMulNCode5, ');
            SQL.Add('CPrjNCode1, CPrjNCode2, CPrjNCode3, CPrjNCode4, CPrjNCode5, ');
            SQL.Add('CPrjNCode6, CPrjNCode7, CPrjNCode8, CPrjNCode9, CPrjNCode10, ');
            SQL.Add('CPjSubNCode1, CPjSubNCode2, CPjSubNCode3, CPjSubNCode4, CPjSubNCode5, ');
            SQL.Add('CPjSubNCode6, CPjSubNCode7, CPjSubNCode8, CPjSubNCode9, CPjSubNCode10, ');
// <181> ADD-END
            SQL.Add('UpdTantoNCode)         '); // <160>
            SQL.Add('Values(:MK,:PayN,:SousaiNo,                                            ');
            SQL.Add(':KmkN,:SubN,:BmnN,:SegN,:HoKbn1,:Hoj1N,:HoKbn2,:Hoj2N,                 ');
// <142> 2007/02/20 H.Kawato Mod
//            SQL.Add(':KojN,:KsyN,:FeeTaxCd,:FeeTaxRt,:SousaiKin,:ZeiKin)                    ');
            SQL.Add(':KojN,:KsyN,:FeeTaxCd,:FeeTaxRt,:SousaiKin,:ZeiKin,:PtnNo,             ');
// <181> ADD-STR
            SQL.Add(':CKmkNCode, :CSubNCode, :CBmnNCode, ');
            SQL.Add(':CSegNCode1, :CSegNCode2, :CSegNCode3, :CSegNCode4, :CSegNCode5, ');
            SQL.Add(':CSegNCode6, :CSegNCode7, :CSegNCode8, :CSegNCode9, :CSegNCode10, ');
            SQL.Add(':CBankNCode, :CCsNCode, :CEmpNCode, ');
            SQL.Add(':CMulNCode1, :CMulNCode2, :CMulNCode3, :CMulNCode4, :CMulNCode5, ');
            SQL.Add(':CPrjNCode1, :CPrjNCode2, :CPrjNCode3, :CPrjNCode4, :CPrjNCode5, ');
            SQL.Add(':CPrjNCode6, :CPrjNCode7, :CPrjNCode8, :CPrjNCode9, :CPrjNCode10, ');
            SQL.Add(':CPjSubNCode1, :CPjSubNCode2, :CPjSubNCode3, :CPjSubNCode4, :CPjSubNCode5, ');
            SQL.Add(':CPjSubNCode6, :CPjSubNCode7, :CPjSubNCode8, :CPjSubNCode9, :CPjSubNCode10, ');
// <181> ADD-END
            SQL.Add(':UpdTantoNCode)         '); // <160>
        end
        else
        begin
        //更新
            SQL.Add('Update PayOffsetInfo Set       ');
            SQL.Add('MasterKbn = :MK,               ');
            SQL.Add('PayNCode  = :PayN,             ');
            SQL.Add('SousaiNo  = :SousaiNo,         ');
            SQL.Add('KmkNCode  = :KmkN,             ');
            SQL.Add('SubNCode  = :SubN,             ');
            SQL.Add('BmnNCode  = :BmnN,             ');
            SQL.Add('SegNCode  = :SegN,             ');
            SQL.Add('HojKbn1   = :HoKbn1,           ');
            SQL.Add('Hoj1NCode = :Hoj1N,            ');
            SQL.Add('HojKbn2   = :HoKbn2,           ');
            SQL.Add('Hoj2NCode = :Hoj2N,            ');
            SQL.Add('KojNCode  = :KojN,             ');
            SQL.Add('KsyNCode  = :KsyN,             ');
            SQL.Add('FeeTaxCd  = :FeeTaxCd,         ');
            SQL.Add('FeeTaxRT  = :FeeTaxRT,         ');
            SQL.Add('SousaiKin = :SousaiKin,        ');
            SQL.Add('ZeiKin = :ZeiKin,              ');
// <181> ADD-STR
            SQL.Add('CKmkNCode = :CKmkNCode,		');
            SQL.Add('CSubNCode = :CSubNCode,		');
            SQL.Add('CBmnNCode = :CBmnNCode,		');
            SQL.Add('CSegNCode1 = :CSegNCode1,		');
            SQL.Add('CSegNCode2 = :CSegNCode2,		');
            SQL.Add('CSegNCode3 = :CSegNCode3,		');
            SQL.Add('CSegNCode4 = :CSegNCode4,		');
            SQL.Add('CSegNCode5 = :CSegNCode5,		');
            SQL.Add('CSegNCode6 = :CSegNCode6,		');
            SQL.Add('CSegNCode7 = :CSegNCode7,		');
            SQL.Add('CSegNCode8 = :CSegNCode8,		');
            SQL.Add('CSegNCode9 = :CSegNCode9,		');
            SQL.Add('CSegNCode10 = :CSegNCode10,	');
            SQL.Add('CBankNCode = :CBankNCode,		');
            SQL.Add('CCsNCode = :CCsNCode,			');
            SQL.Add('CEmpNCode = :CEmpNCode,		');
            SQL.Add('CMulNCode1 = :CMulNCode1,		');
            SQL.Add('CMulNCode2 = :CMulNCode2,		');
            SQL.Add('CMulNCode3 = :CMulNCode3,		');
            SQL.Add('CMulNCode4 = :CMulNCode4,		');
            SQL.Add('CMulNCode5 = :CMulNCode5,		');
            SQL.Add('CPrjNCode1 = :CPrjNCode1,		');
            SQL.Add('CPrjNCode2 = :CPrjNCode2,		');
            SQL.Add('CPrjNCode3 = :CPrjNCode3,		');
            SQL.Add('CPrjNCode4 = :CPrjNCode4,		');
            SQL.Add('CPrjNCode5 = :CPrjNCode5,		');
            SQL.Add('CPrjNCode6 = :CPrjNCode6,		');
            SQL.Add('CPrjNCode7 = :CPrjNCode7,		');
            SQL.Add('CPrjNCode8 = :CPrjNCode8,		');
            SQL.Add('CPrjNCode9 = :CPrjNCode9,		');
            SQL.Add('CPrjNCode10 = :CPrjNCode10,	');
            SQL.Add('CPjSubNCode1 = :CPjSubNCode1,	');
            SQL.Add('CPjSubNCode2 = :CPjSubNCode2,	');
            SQL.Add('CPjSubNCode3 = :CPjSubNCode3,	');
            SQL.Add('CPjSubNCode4 = :CPjSubNCode4,	');
            SQL.Add('CPjSubNCode5 = :CPjSubNCode5,	');
            SQL.Add('CPjSubNCode6 = :CPjSubNCode6,	');
            SQL.Add('CPjSubNCode7 = :CPjSubNCode7,	');
            SQL.Add('CPjSubNCode8 = :CPjSubNCode8,	');
            SQL.Add('CPjSubNCode9 = :CPjSubNCode9,	');
            SQL.Add('CPjSubNCode10 = :CPjSubNCode10,');
// <181> ADD-END
            SQL.Add('UpdTantoNCode = :UpdTantoNCode '); // <160>
            SQL.Add('Where  MasterKbn = :MK         ');
            SQL.Add('and    PayNCode  = :PayN       ');
            SQL.Add('and    SousaiNo  = :SousaiNo   ');
            SQL.Add('and    PayPtnNo  = :PtnNo      '); // <142> Add
            SQL.Add('and    RDelKbn  = 0            '); // <144> Add
        end;


        SetFld('MK'         ).AsInteger := MASTER_CUSTOMER;
        SetFld('PayN'       ).AsFloat   := exPayN;
        SetFld('PtnNo'      ).AsInteger  :=iPayPtnNo;   // <142> Add
        SetFld('SousaiNo'   ).AsInteger := nSeqNO;
        SetFld('KmkN'       ).AsFloat   := exKmkN;
    	// 科目別補助ｺｰﾄﾞ----------------------------------------
//<033>		if nKmHCD = -1 then
		if sKmHCD = '' then
            SetFld('SubN'       ).AsFloat   := 0
        else
            SetFld('SubN'       ).AsFloat   := exSubN;
		// 部門ｺｰﾄﾞ----------------------------------------------
		if sBmnCD = '' then
            SetFld('BmnN'       ).AsFloat   := 0
        else
            SetFld('BmnN'       ).AsFloat   := exBmnN;

		// ｾｸﾞﾒﾝﾄｺｰﾄﾞ--------------------------------------------
		if sSegCD = '' then
            SetFld('SegN'       ).AsFloat   := 0
        else
            SetFld('SegN'       ).AsFloat   := exSegN;

		// 補助区分1---------------------------------------------
		if nHojKbn1 = -1 then
            SetFld('HoKbn1'     ).AsInteger := 0
        else
            SetFld('HoKbn1'     ).AsInteger := nHojKbn1;

		// 補助ｺｰﾄﾞ1---------------------------------------------
		if sHojCD1 = '' then
            SetFld('Hoj1N'      ).AsFloat   := 0
        else
            SetFld('Hoj1N'      ).AsFloat   := exHoj1N;

		// 補助区分2---------------------------------------------
		if nHojKbn2 = -1 then
            SetFld('HoKbn2'     ).AsInteger := 0
        else
            SetFld('HoKbn2'     ).AsInteger := nhojKbn2;

		// 補助ｺｰﾄﾞ2---------------------------------------------
		if sHojCD2 = '' then
            SetFld('Hoj2N'      ).AsFloat   := 0
        else
            SetFld('Hoj2N'      ).AsFloat   := exHoj2N;

		// 工事ｺｰﾄﾞ----------------------------------------------
		if sKojCD = '' then
            SetFld('KojN'       ).AsFloat   := 0
        else
            SetFld('KojN'       ).AsFloat   := exKojN;

		// 工種ｺｰﾄﾞ----------------------------------------------
		if sKsyCD = '' then
            SetFld('KsyN'       ).AsFloat   := 0
        else
            SetFld('KsyN'       ).AsFloat   := exKsyN;

		// 消費税ｺｰﾄﾞ、消費税率ｺｰﾄﾞ------------------------------
    	if (Edit06TaxCode.InputFlag = True) and (Edit06TaxCode.AsInteger = 0) then
        begin
            SetFld('FeeTaxCd'   ).AsInteger := 0;
            SetFld('FeeTaxRT'   ).AsInteger := 0;
        end
        else
        begin
            SetFld('FeeTaxCd'   ).AsInteger := Edit06TaxCode.AsInteger;
            SetFld('FeeTaxRT'   ).AsInteger := Edit07TaxRate.AsInteger;
        end;

        //相殺金額・税
        SetFld('SousaiKin'  ).AsCurrency :=Trunc(Edit08OffsetPrice.AsCurrency);
        SetFld('ZeiKin'     ).AsCurrency :=0;
    	SetFld('UpdTantoNCode').AsCurrency := m_nTantoCd;    					// 更新担当者内部ｺｰﾄﾞ<160>

// <181> ADD-STR
        // 内部コードエリアセット
        SetFld('CKmkNCode'  ).AsCurrency := exKmkN;
        SetFld('CSubNCode'  ).AsCurrency := m_nHojyoNCode[2];
        SetFld('CBmnNCode'  ).AsCurrency := m_nHojyoNCode[41];
        for i := 1 to 10 do
            SetFld('CSegNCode' + IntToStr(i)).AsCurrency := m_nHojyoNCode[i + 100];
        SetFld('CBankNCode' ).AsCurrency := m_nHojyoNCode[21];
        SetFld('CCsNCode'   ).AsCurrency := m_nHojyoNCode[22];
        SetFld('CEmpNCode'  ).AsCurrency := m_nHojyoNCode[25];
        for i := 1 to 5 do
            SetFld('CMulNCode' + IntToStr(i)).AsCurrency := m_nHojyoNCode[i + 30];
        for i := 1 to 10 do
            SetFld('CPrjNCode' + IntToStr(i)).AsCurrency := m_nHojyoNCode[i + 200];
        for i := 1 to 10 do
            SetFld('CPjSubNCode' + IntToStr(i)).AsCurrency := m_nHojyoNCode[i + 300];
// <181> ADD-END

// <200> ADD-STR
        // 優先３補助の値を全補助エリアにコピーする
		if (sKmHCD <> '') then
            SetFld('CSubNCode'  ).AsCurrency := exSubN;
		if (sBmnCD <> '') then
            SetFld('CBmnNCode'  ).AsCurrency := exBmnN;
		if (sSegCD <> '') then
        	for	i := 0 to 2 do
        		if ((101 <= m_arCodeAttribute[i].nMasterDivision) and (m_arCodeAttribute[i].nMasterDivision <= 110)) then
                    SetFld('CSegNCode' + IntToStr(m_arCodeAttribute[i].nMasterDivision - 100)).AsCurrency := exSegN;
		if (nHojKbn1 = MASTER_BANK) then
            SetFld('CBankNCode' ).AsCurrency := exHoj1N;
		if (nHojKbn1 = MASTER_CUSTOMER) then
            SetFld('CCsNCode'   ).AsCurrency := exHoj1N;
		if (nHojKbn1 = MASTER_STAFF) then
            SetFld('CEmpNCode'  ).AsCurrency := exHoj1N;
		if ((MASTER_GENERAL01 <= nHojKbn1) and (nHojKbn1 <= MASTER_GENERAL05)) then
            SetFld('CMulNCode' + IntToStr(nHojKbn1 - MASTER_GENERAL01 + 1)).AsCurrency := exHoj1N;
		if (nHojKbn2 = MASTER_BANK) then
            SetFld('CBankNCode' ).AsCurrency := exHoj2N;
		if (nHojKbn2 = MASTER_CUSTOMER) then
            SetFld('CCsNCode'   ).AsCurrency := exHoj2N;
		if (nHojKbn2 = MASTER_STAFF) then
            SetFld('CEmpNCode'  ).AsCurrency := exHoj2N;
		if ((MASTER_GENERAL01 <= nHojKbn2) and (nHojKbn2 <= MASTER_GENERAL05)) then
            SetFld('CMulNCode' + IntToStr(nHojKbn2 - MASTER_GENERAL01 + 1)).AsCurrency := exHoj2N;
		if (sKojCD <> '') then
        	for	i := 0 to 2 do
        		if ((201 <= m_arCodeAttribute[i].nMasterDivision) and (m_arCodeAttribute[i].nMasterDivision <= 210)) then
                    SetFld('CSegNCode' + IntToStr(m_arCodeAttribute[i].nMasterDivision - 200)).AsCurrency := exKojN;
		if (sKsyCD <> '') then
        	for	i := 0 to 2 do
        		if ((301 <= m_arCodeAttribute[i].nMasterDivision) and (m_arCodeAttribute[i].nMasterDivision <= 310)) then
                    SetFld('CSegNCode' + IntToStr(m_arCodeAttribute[i].nMasterDivision - 300)).AsCurrency := exKsyN;
// <200> ADD-STR

		// -----<159> Add-St-----
		SessionPractice(C_ST_PROCESS);

		try
		// -----<159> Add-Ed-----

		m_cDataModule.BeginTran (m_cDBSelect);									// ﾄﾗﾝｻﾞｸｼｮﾝの開始

		if (not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			m_cDataModule.Rollback (m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			Result := FALSE;
			Exit;
		end;
		m_cDataModule.Commit (m_cDBSelect);										// ｺﾐｯﾄ(反映)

		// -----<159> Add-St-----
		finally
			SessionPractice(C_ED_PROCESS);
		end;
		// -----<159> Add-Ed-----

		// 相殺情報再表示
		fnGetOffsetInfo();
// <142> 2007/02/20 H.Kawato Mod
//		sPayCD := sPayCD+IntToStr(nSeqNO);
		sPayCD := sPayCD+sPrjCD+IntToStr(nSeqNO);
		fnMoveGridSelecter(MemOffset,sPayCD,'strSeqCD');

	end;
end;
//**********************************************************************
//*		Proccess	:	その他情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/06
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetOtherInfo();
var
	strHojCode	: String;
	strFormat	: String;
	sChgCD		: String;
begin
	m_bChange := TRUE;

	DSOther.DataSet := nil;

	MemOther.Close;
	MemOther.Open;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();

		SQL.Add('SELECT MT.NCode,MT.GCode,MT.Renso,MT.NMK,MT.SumKbn');
		SQL.Add(',PI.PostNo1,PI.PostNo2,PI.Ads1,PI.Ads2,PI.Tel1');
		SQL.Add(',PI.SectionName,PI.TanNM,PI.KeisyoKbn');
// <142> 2007/02/20 H.Kawato Mod
//		SQL.Add(',PI.LetterKbn,PI.CngNCode');
		SQL.Add(',PI.CngNCode');
		SQL.Add(',DI.UketoriName');
		SQL.Add(',MTK.GCode as SGCODE ');
		SQL.Add(',MTK.NMK as SNAME ');
		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY PI ON (PI.BaseNCode = MT.NCode) ');
// <144> 2007/07/10 H.Kawato Mod
//		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = :MK AND DI.PayNCode = MT.NCode AND DI.ShiharaiSyubetu = 1) ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ');
		SQL.Add('ON (DI.MasterKbn = :MK AND DI.PayNCode = MT.NCode AND DI.ShiharaiSyubetu = 1 AND DI.RDelKbn = 0) ');
// <144> 2007/07/10 H.Kawato Mod
		SQL.Add('LEFT OUTER JOIN MTOKUI MTK ON (MTK.RDelKbn = 0 AND PI.CngNCode = MTK.NCode) ');
		SQL.Add('WHERE MT.RDelKbn = 0 AND MT.SumKbn <> 9 ');
// <174> Mod
//		SQL.Add('AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) ');
		SQL.Add('AND ((MT.SumKbn = 0 or MT.SumKbn = 1) and MT.HojyoKbn2 = 1) ');
// <174> Mod
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');

		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemOther.Append;

			strHojCode := FieldByName ('GCode').AsString;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemOther.FieldByName('ExNCode'    ).AsFloat   := FieldByName('NCode'      ).AsFloat;    // 補助Nｺｰﾄﾞ
			MemOther.FieldByName('HojCode'    ).AsString  := strHojCode;							// 補助ｺｰﾄﾞ
			MemOther.FieldByName('BaseHojCode').AsString  := FieldByName('GCode'      ).AsString;	// 補助ｺｰﾄﾞ
			MemOther.FieldByName('SName'      ).AsString  := FieldByName('NMK'        ).AsString;	// 補助名称
			MemOther.FieldByName('RenChar'    ).AsString  := FieldByName('Renso'      ).AsString;	// 連想
			MemOther.FieldByName('SumKbn'     ).AsInteger := FieldByName('SumKbn'     ).AsInteger;	// 実在/合計区分
			if (not FieldByName ('PostNo1').IsNull) then
				MemOther.FieldByName('ZipCode1').AsInteger := FieldByName('PostNo1'   ).AsInteger;	// 郵便番号
			if (not FieldByName ('PostNo2').IsNull) then
				MemOther.FieldByName('ZipCode2').AsInteger := FieldByName('PostNo2'   ).AsInteger;	// 郵便番号
			MemOther.FieldByName('Address1'	  ).AsString  := FieldByName('Ads1'       ).AsString;	// 住所1
			MemOther.FieldByName('Address2'	  ).AsString  := FieldByName('Ads2'       ).AsString;	// 住所2
			MemOther.FieldByName('TelNo'	  ).AsString  := FieldByName('Tel1'  	  ).AsString;	// 電話番号
			MemOther.FieldByName('SectionName').AsString  := FieldByName('SectionName').AsString;	// 送付先部署
			MemOther.FieldByName('PersonName' ).AsString  := FieldByName('TanNM'      ).AsString;	// 担当者
//<敬称の型が違うのでとりあえず外す>
//			MemOther.FieldByName('TitleData'  ).AsInteger := FieldByName('TitleKbn'   ).AsInteger;	// 敬称
//			MemOther.FieldByName('LetterData' ).AsInteger := FieldByName('LetterKbn'  ).AsInteger;	// 通知書   // <142> Del
			MemOther.FieldByName('UketoriName').AsString  := FieldByName('UketoriName').AsString;	// 受取人名称
			// 代替ｺｰﾄﾞ
			sChgCD := FieldByName('SGCODE').AsString;
			if sChgCD <> '' then
			begin
				if (m_nCurCodeAttribute <= 1) then
				begin
					case (m_nCurCodeAttribute) of
						0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					end;

					sChgCD := Format(strFormat,[StrToInt64(Trim (sChgCD))]);
				end;
			end;
			MemOther.FieldByName('ExCngNCode').AsFloat  := FieldByName('CngNCode').AsFloat;
			MemOther.FieldByName('ChangeCode').AsString := sChgCD;
			MemOther.FieldByName('SimpleName').AsString := FieldByName('SNAME').AsString;	// 代替取引先名称

			MemOther.Post;
			next;
		end;
	end;
	MemOther.First;

	DSOther.DataSet := MemOther;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_OTHER,MemOther);
end;

//************************************************************************
//*		Component		:	Hoka_ZipCode2 ( TdxDBGridButtonColumn )
//*							...を押されたら郵便番号検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.Hoka_ZipCode2EditButtonClick(Sender: TObject);
var

	cMessageRec: TMJSMsgRec;
	strMessage : String;

	sSearchCode : String;															// 検索郵便番号
	sAddressUp	: String;															// 住所(上段)
	sAddressLow	: String;															// 住所(下段)
	sAddress	: String;
	nZipCD1		: Integer;
	nZipCD2		: Integer;
begin

	nZipCD1  := MemOther.FieldByName('ZipCode1').AsInteger;	// 郵便番号
	nZipCD2  := MemOther.FieldByName('ZipCode2').AsInteger;	// 郵便番号
	sAddress := MemOther.FieldByName('Address1').AsString;	// 住所1

	sSearchCode	:= Format('%.3d',[nZipCD1]) + '-' + Format('%.4d',[nZipCD2]);

	sAddressUp	:= '';
	sAddressLow	:= '';

	if (fnCMNPostShow(sSearchCode,sAddressUp, sAddressLow,0) = 1) then
	begin
		MemOther.Edit;
		MemOther.FieldByName('ZipCode1').AsInteger := StrToInt(Copy(sSearchCode,1,3));	// 郵便番号
		MemOther.FieldByName('ZipCode2').AsInteger := StrToInt(Copy(sSearchCode,5,4));	// 郵便番号

		if (sAddress <> '') then
		begin
//			if (Application.MessageBox('住所を上書きしてもよろしいですか？',
//										 '上書きの確認!?', MB_ICONWARNING + MB_OKCANCEL) = IDOK) then

        	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 4);
        	strMessage := '住所を上書きしてもよろしいですか？';
    	    if	(MJSMessageBoxEx (Self,strMessage, cMessageRec.sTitle, cMessageRec.icontype,
									cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType) = mrYes) then

			begin
				MemOther.FieldByName('Address1').AsString := sAddressUp;	// 住所1
				MemOther.FieldByName('Address2').AsString := sAddressLow;	// 住所2
			end;
		end
		else
		begin
			MemOther.FieldByName('Address1').AsString := sAddressUp;		// 住所1
			MemOther.FieldByName('Address2').AsString := sAddressLow;		// 住所2
		end;
	end;
end;

(*
//************************************************************************
//*		Component		:	Hoka_ChangeCode ( TdxDBGridButtonColumn )
//*							...を押されたら支払先(実在)の検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.Hoka_ChangeCodeEditButtonClick(Sender: TObject);
var
	cMasWndParam: TJNTMasWndParam;
	cMasWndIF	: TJNTMasWndIF;
	sChgCD		: String;
	strFormat	: String;
begin
	cMasWndIF := TJNTMasWndIF.Create();
	cMasWndIF.Init (Pointer(m_pRec));

	cMasWndParam := TJNTMasWndParam.CreateParam();

	cMasWndParam.m_GCodeFD		:= 'GCode';										// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'Renso';										// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'NMK';										// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'MTOKUI';									// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);							// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= m_nCurCodeDigit;								// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= m_nCurCodeAttribute;							// ｺｰﾄﾞ属性
	cMasWndParam.m_SQL_Where	:= 'RDelKbn = 0 AND SumKbn <> 9 AND '
                                +  '(SumKbn = 0 and HojyoKbn2 = 1) ';

	if (cMasWndIF.DoDlg(cMasWndParam) = mrOK) then
	begin
		// 代替ｺｰﾄﾞ
		sChgCD := cMasWndParam.m_ExpRetCode;
		if (m_nCurCodeAttribute <= 1) then
		begin
			case (m_nCurCodeAttribute) of
				0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
				1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
			end;

			sChgCD := Format(strFormat,[StrToInt64(Trim(sChgCD))]);
		end;

    	MemOther.Edit;
		MemOther.FieldByName('ChangeCode').AsString := sChgCD;
		MemOther.FieldByName('SimpleName').AsString := cMasWndParam.m_ExpRetText;	// 代替取引先名称
	end;

	cMasWndParam.Free();
	cMasWndIF.Term();
	cMasWndIF.Free();

end;
*) // <120>

//************************************************************************
//*		Component		:	GridOther ( TdxDBGrid )
//*							ｶﾗﾑが移動する前
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridOtherBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	sChgCD		: String;
	sName		: String;
	strFormat	: String;
	sZipCD		: String;
	sAddressUp	: String;
    sAddressLow	: String;
	sAddUp		: String;
	sAddLow		: String;
    sPayNCode   : Extended;
	nZipCD1		: Integer;
	nZipCD2		: Integer;
begin

	if TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SumKbn').AsInteger = 0 then
	begin
		if NewColumn in [0,1,2,11,13,15,16] then
		begin
   			CanChange :=  False;
			exit;
		end;
	end
	else
	begin
		if NewColumn in [0,1,2,11,13,16] then
		begin
   			CanChange :=  False;
			exit;
		end;
	end;

	sChgCD := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChangeCode').AsString;	// 代替ｺｰﾄﾞ
	case Column of
		4:	// 郵便番号(枝番)
		begin
			nZipCD1 := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ZipCode1').AsInteger;	// 郵便番号(基番)
			nZipCD2 := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ZipCode2').AsInteger;	// 郵便番号(枝番)
			sAddUp	:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Address1').AsString;	// 住所(上段)
			sAddLow	:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Address2').AsString;	// 住所(下段)

			sZipCD	:= Format('%.3d-%.4d',[nZipCD1,nZipCD2]);

			if (fnCMNPostGet(sZipCD,sAddressUp,sAddressLow,0) = 1) then
			begin
				if ((sAddUp = '') and (sAddLow = '')) then
				begin
					MemOther.Edit;
					MemOther.FieldByName('Address1').AsString := sAddressUp;	// 住所(上段)
					MemOther.FieldByName('Address2').AsString := sAddressLow;	// 住所(下段)
				end;
			end;
		end;
		15:	// 代替ｺｰﾄﾞ
		begin
			if sChgCD <> '' then
			begin
				if fnPayCodeCheck(sChgCD,sName,sPayNCode,DISPOSE_REAL) = False then
				begin
					CanChange := False;
					abort;
				end
				else
				begin
					MemOther.Edit;
					MemOther.FieldByName('SimpleName').AsString := sName;		// 代替取引先名称
					// 数値(前0あり)
					if (m_nCurCodeAttribute = 1) then
					begin
						strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
						sChgCD    := Format(strFormat,[StrToInt64(Trim(sChgCD))]);
						MemOther.FieldByName('ChangeCode').AsString := sChgCD;	// 代替取引先ｺｰﾄﾞ
					end;
				end;
			end;
		end;
	end;
end;

//************************************************************************
//*		Component		:	GridOther ( TdxDBGrid )
//*
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridOtherChangeNodeEx(Sender: TObject);
begin
	// 実在
	if TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SumKbn').AsInteger = 0 then
	begin
		if m_nColumn = 15 then
			GridOther.FocusedColumn := 14;
		Hoka_ChangeCode.ReadOnly := True;
		Hoka_ChangeCode.TabStop  := False;
	end
	// 合計
	else
	begin
		Hoka_ChangeCode.ReadOnly := False;
		Hoka_ChangeCode.TabStop  := True;
	end;
end;

//************************************************************************
//*		Component		:	GridOther ( TdxDBGrid )
//*
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridOtherChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
begin
	m_nColumn := Column;
end;

//************************************************************************
//*		Component		:	GridOther ( TdxDBGrid )
//*
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridOtherBeforeChangeNode(Sender: TObject; Node,
  NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	sChgCD		: String;
	sName		: String;
	strFormat	: String;
	sZipCD		: String;
	sAddressUp	: String;
    sAddressLow	: String;
	sAddUp		: String;
	sAddLow		: String;
    sPayNCode   : Extended;
	nZipCD1		: Integer;
	nZipCD2		: Integer;
begin
	// 郵便番号
	nZipCD1 := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ZipCode1').AsInteger;	// 郵便番号(基番)
	nZipCD2 := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ZipCode2').AsInteger;	// 郵便番号(枝番)
	sAddUp	:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Address1').AsString;	// 住所(上段)
	sAddLow	:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Address2').AsString;	// 住所(下段)

	sZipCD	:= Format('%.3d-%.4d',[nZipCD1,nZipCD2]);

	if (fnCMNPostGet(sZipCD,sAddressUp,sAddressLow,0) = 1) then
	begin
		if ((sAddUp = '') and (sAddLow = '')) then
		begin
			MemOther.Edit;
			MemOther.FieldByName('Address1').AsString := sAddressUp;	// 住所(上段)
			MemOther.FieldByName('Address2').AsString := sAddressLow;	// 住所(下段)
		end;
	end;

	// 代替ｺｰﾄﾞ
	sChgCD := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('ChangeCode').AsString;	// 代替ｺｰﾄﾞ
	if sChgCD <> '' then
	begin
		if fnPayCodeCheck(sChgCD,sName,sPayNCode,DISPOSE_REAL) = False then
		begin
			CanChange := False;
			abort;
		end
		else
		begin
			MemOther.Edit;
			MemOther.FieldByName('SimpleName').AsString := sName;		// 代替取引先名称
			// 数値(前0あり)
			if (m_nCurCodeAttribute = 1) then
			begin
				strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				sChgCD    := Format(strFormat,[StrToInt64(Trim(sChgCD))]);
				MemOther.FieldByName('ChangeCode').AsString := sChgCD;	// 代替取引先ｺｰﾄﾞ
			end;
		end;
	end;
end;

//************************************************************************
//*		Component		:	MemOther ( TdxMemData )
//*							その他情報
//*		Event			:	OnBeforePost
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.MemOtherBeforePost(DataSet: TDataSet);
begin
	if (m_bChange) then
		Exit;

(*
	with (DataSet) do
	begin
		if (State in [dsEdit]) then
		begin
			m_cDataModule.BeginTran(m_cDBSelect);

			// 取引先詳細情報
			if fnUpDateOtheInfoCSInfo() = False then abort;


			// 支払条件ﾊﾟﾀｰﾝ
			if fnUpDateOtheInfoPayPtnInfo() = False then abort;         // 通知書区分
			// 支払詳細情報ﾏｽﾀ
			if fnUpDateOtheInfoPayDetailInfo() = False then abort;      // 受取人名

			m_cDataModule.Commit(m_cDBSelect);									// ｺﾐｯﾄ(反映)
		end;
	end;
*)
end;

(*
//**********************************************************************
//*		Proccess	:	その他情報(取引先詳細情報)更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/07
//*		Parameter	:	Nothing
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDateOtheInfoCSInfo(): Boolean;
var
	sPayCD	:   String;
    exPayCD :   Extended;

begin
	Result := True;

	sPayCD  := MemOther.FieldByName('BaseHojCode').AsString;		// 支払先ｺｰﾄﾞ
    exPayCD := MemOther.FieldByName('ExNCode'    ).AsFloat;	     	// 支払先Nｺｰﾄﾞ

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
//		SQL.Add('SELECT NCode FROM MTOKUI_CRD ');
		SQL.Add('SELECT BaseNCode FROM MTOKUI_PAY ');
		SQL.Add('WHERE BaseNCode = :HC ');
		ParamByName('HC').AsFloat	:= exPayCD;

		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規

			Close();
			SQL.Clear();
			SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,PostNo1,PostNo2');
			SQL.Add(',Ads1,Ads2,Tel1,SectionName,TanNM,KeisyoKbn) ');
			SQL.Add('VALUES (:NCode,0,0');
			if MemOther.FieldByName('ZipCode1').IsNull = True then		// 郵便番号(基番)
				SQL.Add(',Null,Null')
			else
				SQL.Add(',:ZipCD1,:ZipCD2');
			if MemOther.FieldByName('Address1').AsString = '' then		// 住所1
				SQL.Add(',Null')
			else
				SQL.Add(',:Address1');
			if MemOther.FieldByName('Address2').AsString = '' then		// 住所2
				SQL.Add(',Null')
			else
				SQL.Add(',:Address2');
			if MemOther.FieldByName('TelNo').AsString = '' then			// 電話番号
				SQL.Add(',Null')
			else
				SQL.Add(',:TelNo');
			if MemOther.FieldByName('SectionName').AsString = '' then	// 送付先部署名
				SQL.Add(',Null')
			else
				SQL.Add(',:Section');
			if MemOther.FieldByName('PersonName').AsString = '' then	// 担当者
				SQL.Add(',Null')
			else
				SQL.Add(',:Person');

			if MemOther.FieldByName('TitleName').AsString = '' then	// 敬称区分
				SQL.Add(',Null')
			else
				SQL.Add(',:Title');

            SQL.Add(')')

		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE MTOKUI_PAY SET ');
			// 郵便番号(基番)
			if MemOther.FieldByName('ZipCode1').IsNull = True then
				SQL.Add('PostNo1 = Null,PostNo2 = Null')
			else
				SQL.Add('PostNo1 = :ZipCD1,PostNo2 = :ZipCD2');
			// 住所1
			if MemOther.FieldByName('Address1').AsString = '' then
				SQL.Add(',Ads1 = Null')
			else
				SQL.Add(',Ads1 = :Address1');
			// 住所2
			if MemOther.FieldByName('Address2').AsString = '' then
				SQL.Add(',Ads2 = Null')
			else
				SQL.Add(',Ads2 = :Address2');
			// 電話番号
			if MemOther.FieldByName('TelNo').AsString = '' then
				SQL.Add(',Tel1 = Null')
			else
				SQL.Add(',Tel1 = :TelNo');
			// 送付先部署名
			if MemOther.FieldByName('SectionName').AsString = '' then
				SQL.Add(',SectionName = Null')
			else
				SQL.Add(',SectionName = :Section');

			// 担当者
			if MemOther.FieldByName('PersonName').AsString = '' then
				SQL.Add(',TanNM = Null')
			else
				SQL.Add(',TanNM = :Person');

			// 敬称区分
            if MemOther.FieldByName('TitleName').AsString = '' then
                SQL.Add(',KeisyoKbn = Null')
            else
                SQL.Add(',KeisyoKbn = :Title');

			SQL.Add(' WHERE BaseNCode = :NCode ');

		end;

		ParamByName('NCode' ).AsFloat  := exPayCD;											// 支払先ｺｰﾄﾞ


		if MemOther.FieldByName('ZipCode1').IsNull = False then
		begin
			ParamByName('ZipCD1').AsInteger := MemOther.FieldByName('ZipCode1').AsInteger;	// 郵便番号(基番)
			ParamByName('ZipCD2').AsInteger := MemOther.FieldByName('ZipCode2').AsInteger;	// 郵便番号(枝番)
		end;

		if MemOther.FieldByName('Address1').AsString <> '' then
			ParamByName('Address1').AsString := MemOther.FieldByName('Address1').AsString;	// 住所1

		if MemOther.FieldByName('Address2').AsString <> '' then
			ParamByName('Address2').AsString := MemOther.FieldByName('Address2').AsString;	// 住所2

		if MemOther.FieldByName('TelNo').AsString <> '' then
			ParamByName('TelNo').AsString := MemOther.FieldByName('TelNo').AsString;		// 電話番号

		if MemOther.FieldByName('SectionName').AsString <> '' then
			ParamByName('Section').AsString := MemOther.FieldByName('SectionName').AsString;// 送付先部署名

		if MemOther.FieldByName('PersonName').AsString <> '' then
			ParamByName('Person').AsString := MemOther.FieldByName('PersonName').AsString;	// 担当者

        if MemOther.FieldByName('TitleName').AsString <>'' then
            ParamByName('Title').AsString := MemOther.FieldByName('TitleName').AsString;	// 敬称区分


		if (not ExecSQL()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																// 正常終了

end;
*) // <120>

// <142> 2007/02/20 H.Kawato Del Start
{
//**********************************************************************
//*		Proccess	:	基本情報の更新処理(通知書区分)
//*		Parameter	:	Notning
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDateOtheInfoPayPtnInfo(): Boolean;
var
    exPayCD  : Extended;
// <120>    exBaseCD : Extended;

begin

    exPayCD  := MemKihon.FieldByName('ExNCode').AsFloat;   // 支払先内部ｺｰﾄﾞ

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT BaseNCode FROM MTOKUI_PAY ');
		SQL.Add('WHERE BaseNCode = :HC');

		ParamByName('HC').AsFloat	:= exPayCD;

		if (not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();
			SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,LetterKbn) ');
			SQL.Add('VALUES(:GC,:LK)');
		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE MTOKUI_PAY SET LetterKbn = :LK ');

			SQL.Add('WHERE BaseNCode = :GC');
		end;

		ParamByName('GC').AsFloat   := exPayCD;										// 取引先ｺｰﾄﾞ
		ParamByName('LK').AsInteger := MemKihon.FieldByName('LetterKbn').AsInteger;	// 支払通知書区分

		if (not ExecSQL()) then
		begin
			fnErrorMessageDsp(m_Qe);
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																// 正常終了
end;
}
// <142> 2007/02/20 H.Kawato Del End
//**********************************************************************
//*		Proccess	:	基本情報の更新処理(受取人名称)
//*		Date		:	2003/11/07
//*		Parameter	:	Notning
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDateOtheInfoPayDetailInfo(): Boolean;
var
    exPayCD     : Extended;
	nClass	    : Integer;
    iPayPtnNo   : Integer;      // <142> Add
	cMemData	: TdxMemData;   // <142> Add

begin
// <142> 2007/02/20 H.Kawato Mod Start
//	exPayCD := MemKihon.FieldByName('ExNCode').AsFloat;         // 支払先ｺｰﾄﾞ
//<GA001>ST
    if (Tab.Items.Selected = TAB_KIHON_G) then
    begin
		cMemData := MemKihonG;
    	exPayCD   := cMemData.FieldByName('ExNCode').AsFloat;       // 支払先ｺｰﾄﾞ
    	for nClass:=11 to 14 do
	    begin
            if nClass = 12 then continue;

		    with (m_Qe) do
		    begin
			    Close();
			    SQL.Clear();
			    SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
			    SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :HC AND ShiharaiSyubetu = :SS AND Edaban = 1 ');
			    SQL.Add('AND PayPtnNo = :PT ');                        // 条件ﾊﾟﾀｰﾝNo(標準)
			    SQL.Add('AND RDelKbn  = 0 ');                       // 削除区分
			    ParamByName('MK').AsInteger := MASTER_CUSTOMER;		// ﾏｽﾀ区分
			    ParamByName('HC').AsFloat	:= exPayCD;				// 支払先ｺｰﾄﾞ
			    ParamByName('SS').AsInteger	:= nClass;				// 支払種別
			    ParamByName('PT').AsInteger	:= 1;			        // 条件ﾊﾟﾀｰﾝNo
			    if (not Open ()) then
			    begin
				    m_cDataModule.Rollback(m_cDBSelect);			// ﾛｰﾙﾊﾞｯｸ(破棄)
				    fnErrorMessageDsp(m_Qe);
				    Result := FALSE;
				    Exit;
			    end;

			    if (EOF) then
			    begin
				    // 新規
				    Close();
				    SQL.Clear();
				    SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,PayPtnNo,ShiharaiSyubetu,Edaban,');
				    SQL.Add('UpdTantoNCode) '); // <160>
				    SQL.Add('VALUES (:MasKbn,:NCode,:PtnNo,:Syu,1,');
				    SQL.Add(':UpdTantoNCode) '); // <160>
			    end
			    else
			    begin
				    // 更新
				    Close();
				    SQL.Clear();
				    SQL.Add('UPDATE PayDetailInfo SET ');
				    SQL.Add('UpdTantoNCode = :UpdTantoNCode '); // <160>
				    SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban=1 ');
				    SQL.Add('  AND PayPtnNo = :PtnNo ');
				    SQL.Add('  AND RDelKbn  = 0 ');
			    end;
			    ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;					// ﾏｽﾀ区分
			    ParamByName('NCode' ).AsFloat   := exPayCD;							// 支払先ｺｰﾄﾞ
			    ParamByName('Syu'   ).AsInteger := nClass;							// 支払種別
			    ParamByName('PtnNo' ).AsInteger := 1;						// 条件ﾊﾟﾀｰﾝNo  <142> Add
        	    ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;    			// 更新担当者内部ｺｰﾄﾞ<160>

			    if (not ExecSQL()) then
			    begin
				    m_cDataModule.Rollback(m_cDBSelect);			// ﾛｰﾙﾊﾞｯｸ(破棄)
				    fnErrorMessageDsp(m_Qe);
				    Result := FALSE;
				    Exit;
			    end;

		    end;
	    end;
    	Result := TRUE;
        Exit;																// 正常終了
    end;
//<GA001>ED

    cMemData  := nil;

	if (Tab.Items.Selected = TAB_KIHON) then	                // 基本情報
		cMemData := MemKihon
	else if (Tab.Items.Selected = TAB_PAYWAY) then	            // 支払方法
		cMemData := MemPayWay;

	exPayCD   := cMemData.FieldByName('ExNCode').AsFloat;       // 支払先ｺｰﾄﾞ
	iPayPtnNo := cMemData.FieldByName('PayPtnNo').AsInteger;    // 条件ﾊﾟﾀｰﾝNo
// <142> 2007/02/20 H.Kawato Mod End

	for nClass:=1 to 4 do
	begin
		with (m_Qe) do
		begin
			Close();
			SQL.Clear();
			SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
			SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :HC AND ShiharaiSyubetu = :SS AND Edaban = 1 ');
			SQL.Add('AND PayPtnNo = :PT ');                     // 条件ﾊﾟﾀｰﾝNo(標準)    <142> Add
			SQL.Add('AND RDelKbn  = 0 ');                       // 削除区分             <144> Add
			ParamByName('MK').AsInteger := MASTER_CUSTOMER;		// ﾏｽﾀ区分
			ParamByName('HC').AsFloat	:= exPayCD;				// 支払先ｺｰﾄﾞ
			ParamByName('SS').AsInteger	:= nClass;				// 支払種別
			ParamByName('PT').AsInteger	:= iPayPtnNo;			// 条件ﾊﾟﾀｰﾝNo          <142> Add

			if (not Open ()) then
			begin
				m_cDataModule.Rollback(m_cDBSelect);			// ﾛｰﾙﾊﾞｯｸ(破棄)
				fnErrorMessageDsp(m_Qe);
				Result := FALSE;
				Exit;
			end;

			if (EOF) then
			begin
				// 新規
				Close();
				SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
//				SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu,Edaban,UketoriName) ');
//				SQL.Add('VALUES (:MasKbn,:NCode,:Syu,1');
				SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,PayPtnNo,ShiharaiSyubetu,Edaban,UketoriName, ');
				SQL.Add('UpdTantoNCode) '); // <160>
				SQL.Add('VALUES (:MasKbn,:NCode,:PtnNo,:Syu,1');
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//				if MemKihon.FieldByName('UketoriName').AsString = '' then		// 受取人名
//					SQL.Add(',Null)')
				if cMemData.FieldByName('UketoriName').AsString = '' then		// 受取人名
					SQL.Add(','''',')
// <142> 2007/02/20 H.Kawato Mod
				else
					SQL.Add(',:Uke,');
				SQL.Add(':UpdTantoNCode) '); // <160>
			end
			else
			begin
				// 更新
				Close();
				SQL.Clear();
				SQL.Add('UPDATE PayDetailInfo SET ');

// <142> 2007/02/20 H.Kawato Mod
//				if MemKihon.FieldByName('UketoriName').AsString = '' then		// 受取人名
				if cMemData.FieldByName('UketoriName').AsString = '' then		// 受取人名
					SQL.Add('UketoriName = Null ')
				else
					SQL.Add('UketoriName = :Uke ');
// <142> 2007/02/20 H.Kawato Mod
//				SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
				SQL.Add(',UpdTantoNCode = :UpdTantoNCode '); // <160>
				SQL.Add('WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu ');
				SQL.Add('  AND PayPtnNo = :PtnNo ');            // <142> Add
				SQL.Add('  AND RDelKbn  = 0 ');                 // <144> Add
			end;

			ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;					// ﾏｽﾀ区分
			ParamByName('NCode' ).AsFloat   := exPayCD;							// 支払先ｺｰﾄﾞ
			ParamByName('Syu'   ).AsInteger := nClass;							// 支払種別
			ParamByName('PtnNo' ).AsInteger := iPayPtnNo;						// 条件ﾊﾟﾀｰﾝNo  <142> Add

// <142> 2007/02/20 H.Kawato Mod Start
//			if MemKihon.FieldByName('UketoriName').AsString <> '' then
//				ParamByName('Uke').AsString := MemKihon.FieldByName('UketoriName').AsString;	// 受取人名
			if cMemData.FieldByName('UketoriName').AsString <> '' then
				ParamByName('Uke').AsString := cMemData.FieldByName('UketoriName').AsString;	// 受取人名
// <142> 2007/02/20 H.Kawato Mod End
        	ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;    			// 更新担当者内部ｺｰﾄﾞ<160>

			if (not ExecSQL()) then
			begin
				m_cDataModule.Rollback(m_cDBSelect);			// ﾛｰﾙﾊﾞｯｸ(破棄)
				fnErrorMessageDsp(m_Qe);
				Result := FALSE;
				Exit;
			end;
		end;
	end;
	Result := TRUE;																// 正常終了
end;


//************************************************************************
//*		Component		:	RBNayoseTree ( TMRadioButton )
//*
//*		Event			:	OnClick
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.RBNayoseTreeClick(Sender: TObject);
begin
	// Gridで編集されていた時
	if m_EditFlg = True then
	begin
		fnTreeAgainDspInit();
		fnMakeNayoseTree();
		m_EditFlg := False;
	end;

	// Gridの制御
	GridNayose.Enabled   := False;
	RBNayoseGrid.Checked := False;
	// Treeの制御
	if (m_nRefermode <> REFER) then														// ﾒｰｲﾙ会計参照ﾌﾗｸﾞ: 参照時
	begin
		CmnTreeView.DragMode     := dmAutomatic;
		TreeViewNayose.DragMode  := dmAutomatic;
		TreeViewNayose.PopupMenu := PMNayoseTree;
	end;
end;

//************************************************************************
//*		Component		:	RBNayoseGrid ( TMRadioButton )
//*
//*		Event			:	OnClick
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.RBNayoseGridClick(Sender: TObject);
begin
	// Treeで編集されていた時
	if m_EditFlg = True then
	begin
		fnGetNayoseInfo();
		m_EditFlg := False;
	end;
	// Gridの制御
	GridNayose.Enabled := True;
	// Treeの制御
	RBNayoseTree.Checked	 := False;
	if (m_nRefermode <> REFER) then														// ﾒｰｲﾙ会計参照ﾌﾗｸﾞ: 参照時
	begin
		CmnTreeView.DragMode     := dmManual;
		TreeViewNayose.DragMode  := dmManual;
		TreeViewNayose.PopupMenu := nil;
	end;
end;


//**********************************************************************
//*		Proccess	:	名寄せツリー作成(TOP)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/11
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMakeNayoseTree();
var
	pItemRec	: PTreeViewRec;
	cTopNode	: TTreeNode;
begin
	m_bChange := True;

	// 支払先体系
	New (pItemRec);
	pItemRec^.nSumKbn  := TREE_SYSTEM_SUM;
	pItemRec^.sHojCode := _TreeSystemCode;
	pItemRec^.sName	   := '名寄せ体系';
    pItemRec^.eNCode   := 0;

	cTopNode := TreeViewNayose.Items.AddChildObject (nil, pItemRec^.sName, pItemRec);

	cTopNode.ImageIndex	   := TREE_INDEX_SYSTEM_SUM;
	cTopNode.SelectedIndex := cTopNode.ImageIndex + 1;

	fnMakeNayoseTreeItem(cTopNode);

	TreeViewNayose.FullExpand;
	m_bChange := False;
end;

//**********************************************************************
//*		Proccess	:	名寄せﾂﾘｰの子供作成
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/11
//*		Parameter	:	cNode
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMakeNayoseTreeItem(cNode: TTreeNode);
var
	pItemRec	: PTreeViewRec;
	Qe			: TMQuery;
	cNodeWork	: TTreeNode;
	sDspName	: String;
begin
	Qe := TMQuery.Create (Self);

	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);	// DBとMQueryの接続

		with (Qe) do
		begin
			Close ();
			SQL.Clear();

			SQL.Add('SELECT MT.NCode,MT.GCode, MT.NMK, MT.SumKbn FROM MTOKUI MT, PayNayoseInfo NI ');
			SQL.Add('WHERE  NI.MasterKbn = :MasKbn AND ');
			SQL.Add('MT.RDelKbn = 0 AND NI.NayoseSyu = 1 AND NI.NayoseKbn = 2 AND MT.NCode = NI.PayNCode ');
			SQL.Add('ORDER BY MT.GCode');
			ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;

			//	ｴﾗｰの判定
			if Open = False then
			begin
				fnErrorMessageDsp(Qe);
	            Exit;
			end;

			while (not EOF) do
			begin
				New (pItemRec);
				pItemRec^.nSumKbn  := TREE_PARENT_SUM;
                pItemRec^.eNCode   := GetFld('NCode').AsFloat;
				pItemRec^.sHojCode := GetFld('GCode'	 ).AsString;			// 補助ｺｰﾄﾞ
				pItemRec^.sName	   := GetFld('NMK'       ).AsString;			// 簡略名称

				sDspName := fnEditCode(MASTER_CUSTOMER,pItemRec^.sHojCode);
				sDspName := sDspName+' '+pItemRec^.sName;
				cNodeWork:= TreeViewNayose.Items.AddChildObject (cNode, sDspName, pItemRec);

				cNodeWork.ImageIndex	:= TREE_INDEX_PARENT_SUM;
				cNodeWork.SelectedIndex := cNodeWork.ImageIndex + 1;

				fnMakeNayoseTreeItems(cNodeWork,Qe);

				Next ();
			end;
		end;
	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	名寄せﾂﾘｰの子供作成
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/11
//*		Parameter	:	cNode	:	親Node
//*						Qe		:	接続済みQuery
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMakeNayoseTreeItems(cNode: TTreeNode; Qe: TMQuery);
var
	QeChild		: TMQuery;
	pItemRec	: PTreeViewRec;
	cNodeWork	: TTreeNode;
	sDspName	: String;
begin
	QeChild := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, QeChild);	// DBとMQueryの接続

	with (QeChild) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT MT.NCode,MT.GCode,MT.NMK FROM MTOKUI MT, PayNayoseInfo NI    ');
		SQL.Add('WHERE NI.MasterKbn = :MK and                                              ');
		SQL.Add('MT.RDelKbn = 0 AND NI.NayoseSyu = 1 AND                                    ');
		SQL.Add('NI.NayoseKbn = 1 AND MT.NCode = NI.PayNCode AND NI.NayoseOyaNCode = :HojCD ');
		SQL.Add('ORDER BY MT.GCode');
		ParamByName('MK'   ).AsInteger := MASTER_CUSTOMER;
		ParamByName('HojCD').AsFloat   := Qe.FieldByName('NCode').AsFloat;

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(QeChild);
			Close;
			Free;
            Exit;
		end;

		while (not EOF) do
		begin
			New (pItemRec);
			pItemRec^.nSumKbn  := TREE_CHILD_SUM;
			pItemRec^.sHojCode := GetFld('GCode'	 ).AsString;			// 補助ｺｰﾄﾞ
			pItemRec^.sName	   := GetFld('NMK'       ).AsString;			// 簡略名称
            pItemRec^.eNCode   := GetFld('NCode'     ).AsFloat;

			sDspName  := fnEditCode(MASTER_CUSTOMER,pItemRec^.sHojCode);
			sDspName  := sDspName+' '+pItemRec^.sName;
			cNodeWork := TreeViewNayose.Items.AddChildObject (cNode, sDspName, pItemRec);

			cNodeWork.ImageIndex	:= TREE_INDEX_CHILD_SUM;
			cNodeWork.SelectedIndex := cNodeWork.ImageIndex + 1;

			Next ();
		end;
	end;

	QeChild.Close;
	QeChild.Free;
end;

//**********************************************************************
//*		Proccess	:	名寄せ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/11
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetNayoseInfo();
var
	sHojCD		: String;
	sOyaCD		: String;
	strFormat	: String;
begin
	m_bChange := TRUE;

	DSNayose.DataSet := nil;

	MemNayose.Close;
	MemNayose.Open;

	with (m_Qe) do
	begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT NI.PayNCode,NI.NayoseOyaNCode,MT.GCode As SGCode, MTO.GCode As OYAGCode');
		SQL.Add(',MT.NMK  as SNAME');
		SQL.Add(',MTO.NMK as OYANAME ');
		SQL.Add('FROM PayNayoseInfo NI ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT  ON (NI.PayNCode = MT.NCode) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MTO ON (NI.NayoseOyaNCode = MTO.NCode)        ');
		SQL.Add('WHERE NI.MasterKbn = :MK AND NI.NayoseSyu = 1 AND NI.NayoseKbn = 1 ');
		SQL.Add('ORDER BY MT.GCode ');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;


		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			// 名寄せ子
    		sHojCD := FieldByName('SGCode').AsString;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				sHojCD := Format(strFormat,[StrToInt64(Trim(sHojCD))]);
			end;

			// 名寄せ親
			sOyaCD := FieldByName('OyaGCode').AsString;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				sOyaCD := Format(strFormat,[StrToInt64(Trim(sOyaCD))]);
			end;

			MemNayose.Append;
			MemNayose.FieldByName('HojCode'     ).AsString := sHojCD;
			MemNayose.FieldByName('BaseHojCode' ).AsString := GetFld('SGCode'   ).AsString;	// 名寄せ子ｺｰﾄﾞ
			MemNayose.FieldByName('SName'       ).AsString := GetFld('SNAME'    ).AsString;	// 名寄せ子名称
			MemNayose.FieldByName('OyaHojCD'    ).AsString := sOyaCD;
			MemNayose.FieldByName('OyaBaseHojCD').AsString := GetFld('OyaGCode' ).AsString;	// 名寄せ親ｺｰﾄﾞ
			MemNayose.FieldByName('OyaName'     ).AsString := GetFld('OYANAME'  ).AsString;	// 名寄せ親名称
			MemNayose.FieldByName('PayNCode'    ).AsFloat  := GetFld('PayNCode' ).AsFloat;
			MemNayose.FieldByName('OyaNCode'    ).AsFloat  := GetFld('NayoseOyaNCode').AsFloat;

			MemNayose.Post;
			next;
		end;
	end;
	MemNayose.First;

	DSNayose.DataSet := MemNayose;

	m_bChange := False;
end;

(*
//************************************************************************
//*		Component		:	GridNayoseCode ( TdxDBGridButtonColumn )
//*							...を押されたら支払先(実在)の検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.GridNayoseCodeEditButtonClick(Sender: TObject);
var
	cMasWndParam: TJNTMasWndParam;
	cMasWndIF	: TJNTMasWndIF;
	sHojCD		: String;
	strFormat	: String;
begin

	cMasWndIF := TJNTMasWndIF.Create();
	cMasWndIF.Init (Pointer(m_pRec));

	cMasWndParam := TJNTMasWndParam.CreateParam();

	cMasWndParam.m_GCodeFD		:= 'GCode';												// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'RenChar';											// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'SimpleName';										// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'HojyoMA';											// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);									// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= m_nCurCodeDigit;										// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= m_nCurCodeAttribute;									// ｺｰﾄﾞ属性
	cMasWndParam.m_SQL_Where	:= 'MasterKbn = ' + IntToStr (MASTER_CUSTOMER) +
								   ' AND RecordKbn = 0 AND SumKbn <> 9 AND (SumKbn = 0 and HojyoKbn2 = 1) ';

	if (cMasWndIF.DoDlg(cMasWndParam) = mrOK) then
	begin
		// 支払先ｺｰﾄﾞ(実在)
		sHojCD := cMasWndParam.m_ExpRetCode;
		if (m_nCurCodeAttribute <= 1) then
		begin
			case (m_nCurCodeAttribute) of
				0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
				1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
			end;

			sHojCD := Format(strFormat,[StrToInt64(Trim(sHojCD))]);
		end;

    	MemNayose.Edit;
		MemNayose.FieldByName('HojCode'     ).AsString := sHojCD;
		MemNayose.FieldByName('BaseHojCode' ).AsString := cMasWndParam.m_ExpRetCode;	// 名寄せ子ｺｰﾄﾞ
		MemNayose.FieldByName('SName'       ).AsString := cMasWndParam.m_ExpRetText;	// 名寄せ子名称
	end;

	cMasWndParam.Free();
	cMasWndIF.Term();
	cMasWndIF.Free();

end;
*) // <120>
(*
//************************************************************************
//*		Component		:	GridNayoseOyaCode ( TdxDBGridButtonColumn )
//*							...を押されたら支払先(合計)の検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.GridNayoseOyaCodeEditButtonClick(Sender: TObject);
var
	cMasWndParam: TJNTMasWndParam;
	cMasWndIF	: TJNTMasWndIF;
	sHojCD		: String;
	strFormat	: String;
begin

	cMasWndIF := TJNTMasWndIF.Create();
	cMasWndIF.Init (Pointer(m_pRec));

	cMasWndParam := TJNTMasWndParam.CreateParam();

	cMasWndParam.m_GCodeFD		:= 'GCode';												// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'Renso';											// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'NMK';										// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'MTOKUI';											// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);									// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= m_nCurCodeDigit;										// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= m_nCurCodeAttribute;									// ｺｰﾄﾞ属性
	cMasWndParam.m_SQL_Where	:= 'RDelKbn = 0 AND SumKbn <> 9 AND SumKbn = 1 and PayRootKbn = 1 ';


	if (cMasWndIF.DoDlg(cMasWndParam) = mrOK) then
	begin
		// 支払先ｺｰﾄﾞ(合計)
		sHojCD := cMasWndParam.m_ExpRetCode;
		if (m_nCurCodeAttribute <= 1) then
		begin
			case (m_nCurCodeAttribute) of
				0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
				1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
			end;

			sHojCD := Format(strFormat,[StrToInt64(Trim(sHojCD))]);
		end;

    	MemNayose.Edit;
		MemNayose.FieldByName('OyaHojCD'    ).AsString := sHojCD;
		MemNayose.FieldByName('OyaBaseHojCD').AsString := cMasWndParam.m_ExpRetCode;	// 名寄せ親ｺｰﾄﾞ
		MemNayose.FieldByName('OyaName'     ).AsString := cMasWndParam.m_ExpRetText;	// 名寄せ親名称
	end;

	cMasWndParam.Free();
	cMasWndIF.Term();
	cMasWndIF.Free();

end;
*) // <120>

//**********************************************************************
//*		Proccess	:	名寄せ情報検索
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/12
//*		Parameter	:	CD	:	名寄せ支払先ｺｰﾄﾞ
//*						KBN	:	子(NAYOSE_CHILD)/親(NAYOSE_PARENT)
//*		Return		:	存在の有(True)無(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnCheckPayNayoseInfo(CD: String; KBN: Integer): Boolean;
begin
	if (m_nCurCodeAttribute <= 1) then
		CD := Format ('%.16d',[StrToInt64(Trim(CD))]);
	Result := FALSE;
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT MT.GCode FROM PayNayoseInfo PI '    );
        SQL.Add('LEFT OUTER JOIN MTOKUI MT ON '          );
        SQL.Add('MT.NCode = PI.PayNCode And MT.RDelKbn = 0 ');
		SQL.Add('WHERE MasterKbn = :MK AND NayoseSyu = 1 AND GCode = :CD AND NayoseKbn = :KBN');
		ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;	// ﾏｽﾀ区分
		ParamByName('CD' ).AsString	 := CD;					// 名寄せ親支払先ｺｰﾄﾞ
		ParamByName('KBN').AsInteger := KBN;				// 名寄せ区分

		if (not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if EOF <> True then
		begin
			Result := True;
		end;
	end;
end;

//************************************************************************
//*		Component		:	MemOther ( TdxMemData )
//*							その他情報
//*		Event			:	OnBeforePost
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.MemNayoseBeforePost(DataSet: TDataSet);
var
	sPayCD	: String;
	sOyaCD	: String;
    nPayCD  : Extended;
    nOyaCD  : Extended;

begin
	if (m_bChange) then
		Exit;

	if (DataSet.FieldByName('HojCode').IsNull) or
	   (DataSet.FieldByName('HojCode').AsString = '') or
	   (DataSet.FieldByName('OyaHojCD').IsNull) or
	   (DataSet.FieldByName('OyaHojCD').AsString = '') then
	begin
		if (m_bEndFlg = True) then exit;
		abort;
	end;

	if fnRecordCheck() = False then
	begin
		abort;
	end;

	with (DataSet) do
	begin
		sPayCD := FieldByName('HojCode' ).AsString;	// 支払先ｺｰﾄﾞ
		sOyaCD := FieldByName('OyaHojCD').AsString;	// 名寄せ親支払先ｺｰﾄﾞ
		nPayCD := FieldByName('PayNCode').AsFloat;	// 支払先ｺｰﾄﾞ
		nOyaCD := FieldByName('OyaNCOde').AsFloat;	// 名寄せ親支払先ｺｰﾄﾞ

		if (State in [dsInsert]) then		// 新規登録時
		begin

			// 名寄せ親支払先ｺｰﾄﾞが存在するかCheck
			if fnCheckPayNayoseInfo(sOyaCD,NAYOSE_PARENT) = False then			// 名寄せ親が存在しない時
			begin
				// 名寄せ親情報追加
				if fnUpDatePayNayoseInfo(nOyaCD,0,NAYOSE_PARENT,MODE_INSERT) = False then
					abort;
			end;

			// 名寄せ情報を追加
			if fnUpDatePayNayoseInfo(nPayCD,nOyaCD,NAYOSE_CHILD,MODE_INSERT) = False then
				abort;

			m_EditFlg := True;
		end;

		if (State in [dsEdit]) then			// 更新処理時
		begin
			if m_AfterSave.sOyaCD <> sOyaCD then
			begin
				// 名寄せ親支払先ｺｰﾄﾞが存在するかCheck
				if fnCheckPayNayoseInfo(sOyaCD,NAYOSE_PARENT) = False then			// 名寄せ親が存在しない時
				begin
					// 名寄せ親情報追加
					if fnUpDatePayNayoseInfo(nPayCD,0,NAYOSE_PARENT,MODE_INSERT) = False then
						abort;
				end;

				// 名寄せ情報を更新
				if fnUpDatePayNayoseInfo(nPayCD,nOyaCD,NAYOSE_CHILD,MODE_EDIT) = False then
					abort;

				m_EditFlg := True;
			end;
		end;
	end;
end;

//************************************************************************
//*		Component		:	GridNayose ( TdxDBGrid )
//*							ｶﾗﾑが移動する前
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridNayoseBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	sPayCD		: String;
	sName		: String;
	strFormat	: String;
    sPayNCode   : Extended;
begin
	if NewColumn in [1,3] then
	begin
       	CanChange :=  False;
		exit;
	end;

	case Column of
		0:	// 支払先ｺｰﾄﾞ
		begin
			sPayCD := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('HojCode').AsString;	// 支払先ｺｰﾄﾞ

			if sPayCD = '' then
			begin
				CanChange := FALSE;
				Exit;
			end
			else
			begin
				if not(MemNayose.State in [dsInsert]) then exit;

				// 支払先ｺｰﾄﾞの存在Check
				if fnPayCodeCheck(sPayCD,sName,sPayNCode,DISPOSE_REAL) = False then
				begin
					CanChange := False;
					abort;
				end
				else
				begin
					// 名寄せ子の存在Check
					if fnCheckPayNayoseInfo(sPayCD,NAYOSE_CHILD) = True then
					begin
						CanChange := False;
						abort;
					end
					else
					begin
						MemNayose.Edit;
						MemNayose.FieldByName('PayNCode').AsFloat   := sPayNCode;
						MemNayose.FieldByName('SName').AsString     := sName;		// 支払先名称
						if (m_nCurCodeAttribute <= 1) then
							sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);
						MemNayose.FieldByName('BaseHojCode').AsString := sPayCD;	// 支払先ｺｰﾄﾞ(編集前)
						// 数値(前0あり)
						if (m_nCurCodeAttribute = 1) then
						begin
							strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
							sPayCD    := Format(strFormat,[StrToInt64(Trim(sPayCD))]);
							MemNayose.FieldByName('HojCode').AsString := sPayCD;	// 支払先ｺｰﾄﾞ(前0あり)
						end;
					end;
				end;
			end;
		end;
		2:	// 名寄せ親支払先ｺｰﾄﾞ
		begin
			sPayCD := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('OyaHojCD').AsString;	// 名寄せ親支払先ｺｰﾄﾞ
			if (sPayCD <> '')  then
			begin
				// 名寄せ親支払先ｺｰﾄﾞの存在Check
				if fnPayCodeCheck(sPayCD,sName,sPayNCode,DISPOSE_NAYOSEOYA) = False then
				begin
					CanChange := False;
					abort;
				end
				else
				begin
					MemNayose.Edit;
					MemNayose.FieldByName('OyaNCode').AsFloat := sPayNCode;
					MemNayose.FieldByName('OyaName').AsString := sName;			// 名寄せ親支払先名称
					if (m_nCurCodeAttribute <= 1) then
						sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);
					MemNayose.FieldByName('OyaBaseHojCD').AsString := sPayCD;	// 名寄せ親支払先ｺｰﾄﾞ(編集前)
					// 数値(前0あり)
					if (m_nCurCodeAttribute = 1) then
					begin
						strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
						sPayCD    := Format(strFormat,[StrToInt64(Trim(sPayCD))]);
						MemNayose.FieldByName('OyaHojCD').AsString := sPayCD;	// 名寄せ親支払先ｺｰﾄﾞ(前0あり)
					end;
				end;
			end;
		end;
	end;
end;

//************************************************************************
//*		Component		:	GridNayose ( TdxDBGrid )
//*							行が変った時
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.GridNayoseChangeNodeEx(Sender: TObject);
begin
	// 支払先ｺｰﾄﾞがNullの時
	if (GridNayose.DataSource.DataSet.FieldByName('HojCode').IsNull) then
	begin
		CmnStatusBar.SimpleText	 := '';
		GridNayose.FocusedColumn :=	0;			//	ﾌｫｰｶｽのｶﾗﾑ位置を指定
		exit;
	end;

	if m_cACControl = GridNayose then
		CmnStatusBar.SimpleText	:= 'F1 名寄せ情報から外す'
	else
		CmnStatusBar.SimpleText := '';
	m_AfterSave.sOyaCD := GridNayose.DataSource.DataSet.FieldByName('OyaHojCD').AsString;
end;

//**********************************************************************
//*		Proccess	:	名寄せ情報検索
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/12
//*		Parameter	:	Nothing
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnRecordCheck(): Boolean;
var
	sPayCD		: String;
	sName		: String;
	strFormat	: String;
// <120>    ExPayNCD    : Extended;
// <120>    ExOyaNCD    : Extended;
    sPayNCode   : Extended;
begin

	Result := True;
	if (MemNayose.State in [dsInsert]) then
	begin
		// 支払先ｺｰﾄﾞ
		sPayCD := GridNayose.DataSource.DataSet.FieldByName('HojCode').AsString;	// 支払先ｺｰﾄﾞ

		// 支払先ｺｰﾄﾞの存在Check
		if fnPayCodeCheck(sPayCD,sName,sPayNCode,DISPOSE_REAL) = False then
		begin
			Result := False;
			exit;
		end
		else
		begin
			// 名寄せ子の存在Check
			if fnCheckPayNayoseInfo(sPayCD,NAYOSE_CHILD) = True then
			begin
				Result := False;
				exit;
			end
			else
			begin
				MemNayose.Edit;
				MemNayose.FieldByName('PayNCode').AsFloat := sPayNCode;     // 支払先内部ｺｰﾄﾞ
				MemNayose.FieldByName('SName').AsString := sName;			// 支払先名称
				if (m_nCurCodeAttribute <= 1) then
					sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);
				MemNayose.FieldByName('BaseHojCode').AsString := sPayCD;	// 支払先ｺｰﾄﾞ(編集前)
				// 数値(前0あり)
				if (m_nCurCodeAttribute = 1) then
				begin
					strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					sPayCD    := Format(strFormat,[StrToInt64(Trim(sPayCD))]);
					MemNayose.FieldByName('HojCode').AsString := sPayCD;	// 支払先ｺｰﾄﾞ(前0あり)
				end;
			end;
		end;
	end;

	// 名寄せ親支払先ｺｰﾄﾞ
	sPayCD := GridNayose.DataSource.DataSet.FieldByName('OyaHojCD').AsString;	// 名寄せ親支払先ｺｰﾄﾞ
	if sPayCD <> '' then
	begin
		// 名寄せ親支払先ｺｰﾄﾞの存在Check
		if fnPayCodeCheck(sPayCD,sName,sPayNCode,DISPOSE_NAYOSEOYA) = False then
		begin
			Result := False;
			exit;
		end
		else
		begin
			MemNayose.Edit;
			MemNayose.FieldByName('OyaNCode').AsFloat := sPayNCode;     // 支払先内部ｺｰﾄﾞ
			MemNayose.FieldByName('OyaName').AsString := sName;			// 名寄せ親支払先名称
			if (m_nCurCodeAttribute <= 1) then
				sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);
			MemNayose.FieldByName('OyaBaseHojCD').AsString := sPayCD;	// 名寄せ親支払先ｺｰﾄﾞ(編集前)
			// 数値(前0あり)
			if (m_nCurCodeAttribute = 1) then
			begin
				strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				sPayCD    := Format(strFormat,[StrToInt64(Trim(sPayCD))]);
				MemNayose.FieldByName('OyaHojCD').AsString := sPayCD;	// 名寄せ親支払先ｺｰﾄﾞ(前0あり)
			end;
		end;
	end;
end;

//************************************************************************
//*		Component		:	DSNayose ( TDataSource )
//*							ｺｰﾄﾞ入力可・不可
//*		Event			:	OnStateChange
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.DSNayoseStateChange(Sender: TObject);
begin
	if (MemNayose.State in [dsInsert]) then
		MemNayoseHojCode.ReadOnly := False
	else
		MemNayoseHojCode.ReadOnly := True;

	if (MemNayose.Active) then
	begin
		if (MemNayose.RecordCount = 0) then
			MemNayoseHojCode.ReadOnly := False;
	end;
end;

//**********************************************************************
//*		Proccess	:	名寄せ情報ﾏｽﾀの更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/12
//*		Parameter	:	PayCD	:	支払先ｺｰﾄﾞ
//*						OyaCD	:	名寄せ親支払先ｺｰﾄﾞ
//*						KBN		:	名寄せ区分	子:	NAYOSE_CHILD
//*												親:	NAYOSE_PARENT
//*						MODE	:	処理ﾓｰﾄﾞ	新規: MODE_INSERT
//*												編集: MODE_EDIT
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayNayoseInfo(PayNCD,OyaNCD:Extended; KBN,MODE: Integer): Boolean;
begin
	m_cDataModule.BeginTran (m_cDBSelect);										// ﾄﾗﾝｻﾞｸｼｮﾝの開始
	with (m_Qe) do
	begin
		// 新規
		if MODE = MODE_INSERT then
		begin
			Close();
			SQL.Clear();
			SQL.Add('INSERT INTO PayNayoseInfo (MasterKbn,NayoseSyu,PayNCode,NayoseKbn,NayoseOyaNCode, ');
			SQL.Add('UpdTantoNCode) '); // <160>
			SQL.Add('VALUES(:MK,1,:PNC,:NK');


			if KBN = NAYOSE_CHILD then
				SQL.Add(',:NO,')
			else
				SQL.Add(',0,');
			SQL.Add(':UpdTantoNCode) '); // <160>
		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE PayNayoseInfo SET NayoseOyaNCode = :NO ');
			SQL.Add(',UpdTantoNCode = :UpdTantoNCode ');  // <160>
			SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :PNC AND NayoseKbn = :NK AND NayoseSyu = 1');

		end;
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;		// ﾏｽﾀ区分
		ParamByName('PNC').AsFloat   := PayNCD;				// 支払先ｺｰﾄﾞ
		ParamByName('NK').AsInteger := KBN;					// 名寄せ区分
		if KBN = NAYOSE_CHILD then
			ParamByName('NO').AsFloat := OyaNCD;			// 名寄せ親支払先ｺｰﾄﾞ
       	ParamByName('UpdTantoNCode').AsCurrency := m_nTantoCd;                  // 更新担当者内部ｺｰﾄﾞ<160>

		if (not ExecSQL()) then
		begin
			fnErrorMessageDsp(m_Qe);
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			Result := FALSE;
			Exit;
		end;
	end;
	m_cDataModule.Commit (m_cDBSelect);											// ｺﾐｯﾄ(反映)
	Result := TRUE;																// 正常終了
end;

//************************************************************************
//*		Component		:	Tab( TMTab )
//*
//*		Event			:	OnEnter
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TabEnter(Sender: TObject);
begin
	m_cACControl := Screen.ActiveControl;
	BDelete.Enabled		 := False;	// 削除ﾎﾞﾀﾝ使用不可
	TBChgColSize.Enabled := False;	// widthﾎﾞﾀﾝ使用不可
	BSearch.Enabled		 := False;	// 検索ﾎﾞﾀﾝ使用不可
	TBTag.Enabled		 := False;	// 付箋ﾎﾞﾀﾝ使用不可
end;

//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							オブジェクトをドラッグしたとき
//*		Event			:	OnDragOver
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TreeViewDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
var
	cDragNode	:	TTreeNode;
	cDropNode	:	TTreeNode;
	rDrag		:	^TreeViewRec;
	rDrop		:	^TreeViewRec;
begin
    rDrag   :=  nil;

	if CmnTreeView.Focused then
	begin
		cDragNode := CmnTreeView.Selected;
		if cDragNode <> nil then
			rDrag := cDragNode.Data;

		// Topの｢支払先体系｣の移動は不可
		if (rDrag.nSumKbn = TREE_SYSTEM) then
		begin
			Accept := False;
			exit;
		end;

		// 合計で名寄せ親採用区分がなしの時
		if (rDrag.nSumKbn = 1) and
			((cDragNode.ImageIndex = TREE_INDEX_PARENT_INVALID) or
			 (cDragNode.SelectedIndex = TREE_INDEX_PARENT_INVALID+1)) then
		begin
			Accept := False;
			exit;
		end;
	end
	else
	begin
		cDragNode := TreeViewNayose.Selected;
		if cDragNode <> nil then
			rDrag := cDragNode.Data;

		// Topの｢名寄せ体系｣の移動は不可
		if (rDrag.nSumKbn = TREE_SYSTEM_SUM) then
		begin
			Accept := False;
			exit;
		end;
	end;

	cDropNode := (TMTreeView(Sender).GetNodeAt(X,Y));

	if (cDropNode = nil) then					// Nil時
	begin
		Accept := False;
		exit;
	end;

	rDrop := cDropNode.Data;					// Drop先のData取得

	// 実在をDragした時｢名寄せ体系｣でDropはできない
	if (rDrag.nSumKbn = 0) and (rDrop.nSumKbn = TREE_SYSTEM_SUM) then
	begin
		Accept := False;
		exit;
	end;

	// 合計をDragした時｢名寄せ体系｣でDropはできない
	if (rDrag.nSumKbn = 1) and (rDrop.nSumKbn = TREE_CHILD_SUM) then
	begin
		Accept := False;
		exit;
	end;

	// 名寄せの実在、合計Dragに名寄せ体系にDorpはできない
	if ((rDrag.nSumKbn = TREE_CHILD_SUM) or
		(rDrag.nSumKbn = TREE_PARENT_SUM)) and
		(rDrop.nSumKbn = TREE_SYSTEM_SUM) then
	begin
		Accept := False;
		exit;
	end;

	// 名寄せの実在、合計は実在、合計Dorpはできない
	case rDrag.nSumKbn of
		TREE_CHILD_SUM,TREE_PARENT_SUM:	// 名寄せ実在、合計
		begin
			case rDrop.nSumKbn of
				TREE_SYSTEM,TREE_CHILD,TREE_PARENT:
				begin
					Accept := False;
					exit;
				end;
			end;
		end;
	end;
end;

//************************************************************************
//*		Component		:	TreeView ( TMTreeView )
//*							ドラッグ＆ドロップ
//*		Event			:	OnDragDrop
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TreeViewDragDrop(Sender, Source: TObject; X,
  Y: Integer);
var
	cNode			: TTreeNode;
	wkNode			: TTreeNode;
	cDragNode		: TTreeNode;
	cDropNode		: TTreeNode;
	cDragNodeParent	: TTreeNode;
	cDropNodeParent	: TTreeNode;
	wkRec			: ^TreeViewRec;
	rDrag			: ^TreeViewRec;
	rDrop			: ^TreeViewRec;
	rDragParent		: ^TreeViewRec;
	rDropParent		: ^TreeViewRec;
	iLoop			: Integer;
	sDspName		: String;

    PayNCD        : Extended;
    OyaNCD        : Extended;

begin
	// 参照時
	if m_nReferMode	= REFER then exit;

	if CmnTreeView.Focused then
	begin
		cDragNode := CmnTreeView.Selected;
		cDropNode := TreeViewNayose.DropTarget;
		if cDropNode = nil then exit;
	end
	else
	begin
		cDragNode := TreeViewNayose.Selected;
		cDropNode := TreeViewNayose.DropTarget;
	end;

	cDragNodeParent	:= cDragNode.Parent;
	cDropNodeParent := cDropNode.Parent;

	if (cDragNodeParent <> Nil) then
		rDragParent	 :=	cDragNodeParent.Data
	else
		rDragParent	 :=	Nil;

	if (cDropNodeParent <> Nil) then
		rDropParent	:= cDropNodeParent.Data
	else
		rDropParent	:= Nil;

	rDrag := cDragNode.Data;
	rDrop := cDropNode.Data;

// CmnTree→NoyoseTree
	// 合計を名寄せ親として移動
	if (rDrag.nSumKbn = TREE_PARENT) and
	  ((rDrop.nSumKbn = TREE_SYSTEM_SUM) or (rDrop.nSumKbn = TREE_PARENT_SUM)) then
	begin
		// 同一ｺｰﾄﾞがあるかﾁｪｯｸ
		for iLoop := TreeViewNayose.Items.Count-1 downto 0 do
		begin
			cNode := TreeViewNayose.Items[iLoop];
			wkRec := cNode.Data;
			if (wkRec.sHojCode = rDrag.sHojCode) then
				exit;
		end;

        PayNCD := rDrag.eNCode;

		// 名寄せ親情報追加
		if fnUpDatePayNayoseInfo(PayNCD,0,NAYOSE_PARENT,MODE_INSERT) = False then
			abort;

		// Drop先が名寄せ親の時
		if (rDrop.nSumKbn = TREE_PARENT_SUM) then
			cNode := cDropNodeParent				// 名寄せ親の親Node
		else
			cNode := cDropNode;

		New(wkRec);
        wkRec.eNCode   := rDrag.eNCode;
		wkRec.nSumKbn  := TREE_PARENT_SUM;
		wkRec.sHojCode := rDrag.sHojCode;
		wkRec.SName    := rDrag.sName;
		sDspName	   := fnEditCode(MASTER_CUSTOMER,rDrag.sHojCode);
		sDspName 	   := sDspName+' '+rDrag.sName;
		wkNode := TreeViewNayose.Items.AddChildobject(cNode,sDspName,wkRec);
		wkNode.ImageIndex	 := TREE_INDEX_PARENT_SUM;
		wkNode.SelectedIndex := wkNode.ImageIndex+1;
		cNode.Expanded := True;
		m_EditFlg := True;
	end;

	// 実在を名寄せの子として移動
	if (rDrag.nSumKbn = TREE_CHILD) and
	  ((rDrop.nSumKbn = TREE_CHILD_SUM) or (rDrop.nSumKbn = TREE_PARENT_SUM)) then
	begin

		// 同一ｺｰﾄﾞがあるかﾁｪｯｸ
		for iLoop := TreeViewNayose.Items.Count-1 downto 0 do
		begin
			cNode := TreeViewNayose.Items[iLoop];
			wkRec := cNode.Data;
			if (wkRec.sHojCode = rDrag.sHojCode) then
				exit;
		end;

		// Drop先が名寄せ子の時
		if (rDrop.nSumKbn = TREE_CHILD_SUM) then
			cNode := cDropNodeParent				// 名寄せ子の親Node
		else
			cNode := cDropNode;

		// 名寄せ情報を追加
   		wkRec := cNode.Data;

        PayNCD := rDrag.eNCode;
        OyaNCD := wkRec.eNCode;

		if fnUpDatePayNayoseInfo(PayNCD,OyaNCD,NAYOSE_CHILD,MODE_INSERT) = False then
			abort;

		New(wkRec);
        wkRec.eNCode   := rDrag.eNCode;
		wkRec.nSumKbn  := TREE_CHILD_SUM;
		wkRec.sHojCode := rDrag.sHojCode;
		wkRec.SName    := rDrag.sName;
		sDspName	   := fnEditCode(MASTER_CUSTOMER,rDrag.sHojCode);
		sDspName 	   := sDspName+' '+rDrag.sName;
		wkNode := TreeViewNayose.Items.AddChildobject(cNode,sDspName,wkRec);
		wkNode.ImageIndex	 := TREE_INDEX_CHILD_SUM;
		wkNode.SelectedIndex := wkNode.ImageIndex+1;
		cNode.Expanded := True;
		m_EditFlg := True;
	end;

// NayoseTreeView内の移動
	// 名寄せ子の移動
	if (rDrag.nSumKbn = TREE_CHILD_SUM) and
	  ((rDrop.nSumKbn = TREE_CHILD_SUM) or (rDrop.nSumKbn = TREE_PARENT_SUM)) then
	begin
		// Drag親とDrop親が一緒の時
		if rDragParent.sHojCode = rDropParent.sHojCode then
			exit;

		// Drop先が名寄せ子の時
		if (rDrop.nSumKbn = TREE_CHILD_SUM) then
			cNode := cDropNodeParent				// 名寄せ子の親Node
		else
			cNode := cDropNode;

		// 名寄せ情報を更新
		wkRec := cNode.Data;
        PayNCD := rDrag.eNCode;
        OyaNCD := wkRec.eNCode;

		if fnUpDatePayNayoseInfo(PayNCD,OyaNCD,NAYOSE_CHILD,MODE_EDIT) = False then
			abort;

		New(wkRec);
        wkRec.eNCode   := rDrag.eNCode;
		wkRec.nSumKbn  := TREE_CHILD_SUM;
		wkRec.sHojCode := rDrag.sHojCode;
		wkRec.SName    := rDrag.sName;
		sDspName	   := fnEditCode(MASTER_CUSTOMER,rDrag.sHojCode);
		sDspName 	   := sDspName+' '+rDrag.sName;
		wkNode := TreeViewNayose.Items.AddChildobject(cNode,sDspName,wkRec);
		wkNode.ImageIndex	 := TREE_INDEX_CHILD_SUM;
		wkNode.SelectedIndex := wkNode.ImageIndex+1;
		wkNode.Selected := True;

		cDragNode.Delete;
		m_EditFlg := True;
	end;
end;

//************************************************************************
//*		Component		:	PMNayoseTree(TPopupMenu)
//*							TreeViewNayoseのPopup
//*		Event			:	OnPopup
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMNayoseTreePopup(Sender: TObject);
var
	wkRec			: ^TreeViewRec;
begin
	m_NayoRightClick		  := TreeViewNayose.Selected;
	m_NayoRightClick.Selected := TRUE;

	wkRec := m_NayoRightClick.Data;
	if wkRec.nSumKbn = TREE_SYSTEM_SUM then abort;
end;

//************************************************************************
//*		Component		:	PMNayoseTreeErase(TMenuItem)
//*							名寄せ情報から外す
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.PMNayoseTreeEraseClick(Sender: TObject);
var
	cNodeOya	: TTreeNode;
	wkRec		: ^TreeViewRec;
	rOya		: ^TreeViewRec;
begin
	wkRec := m_NayoRightClick.Data;

	// 名寄せ子の時
    if wkRec.nSumKbn = TREE_CHILD_SUM then
	begin
		cNodeOya := m_NayoRightClick.Parent;
		rOya	 := cNodeOya.Data;
		// 名寄せ子削除
		if fnDeletePayNayoseInfo(wkRec.eNCode ,rOya.eNCode,NAYOSE_CHILD) = False then abort;

	end
	// 名寄せ親の時
	else
	begin
		// 名寄せ親削除
		if fnDeletePayNayoseInfo(wkRec.eNCode,0,NAYOSE_PARENT) = False then abort;

		// 親に付いていた子も全て削除
		if fnDeletePayNayoseInfo(0,wkRec.eNCode,NAYOSE_ALL) = False then abort;

	end;

	m_EditFlg := True;
	m_NayoRightClick.Delete;
end;

//**********************************************************************
//*		Proccess	:	名寄せ情報ﾏｽﾀの削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/12
//*		Parameter	:	PayCD	:	支払先ｺｰﾄﾞ
//*						OyaCD	:	名寄せ親支払先ｺｰﾄﾞ
//*						MODE	:	名寄せ区分	子			: NAYOSE_CHILD
//*												親			: NAYOSE_PARENT
//*												親以下全部	: NAYOSE_ALL
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeletePayNayoseInfo(PayNCD,OyaNCD:Extended; MODE: Integer): Boolean;
var
	nNayoKbn: Integer;
begin
    nNayoKbn    :=  0;

	case MODE of
		NAYOSE_CHILD:  nNayoKbn := 1;
		NAYOSE_PARENT: nNayoKbn := 2;
		NAYOSE_ALL:	   nNayoKbn := 1;
	end;

	m_cDataModule.BeginTran (m_cDBSelect);										// ﾄﾗﾝｻﾞｸｼｮﾝの開始
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('DELETE FROM PayNayoseInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND NayoseSyu = 1 AND NayoseKbn = :NK ');
		if MODE <> NAYOSE_ALL then
			SQL.Add('AND PayNCode = :GC ');
		if MODE <> NAYOSE_PARENT then
			SQL.Add('AND NayoseOyaNCode = :NO');


		ParamByName('MK').AsInteger := MASTER_CUSTOMER;		// ﾏｽﾀ区分
		ParamByName('NK').AsInteger := nNayoKbn;			// 名寄せ区分
		if MODE <> NAYOSE_ALL then
			ParamByName('GC').AsFloat := PayNCD;			// 支払先ｺｰﾄﾞ
		if MODE <> NAYOSE_PARENT then
			ParamByName('NO').AsFloat := OyaNCD;			// 名寄せ親支払先ｺｰﾄﾞ

		if (not ExecSQL()) then
		begin
			fnErrorMessageDsp(m_Qe);
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			Result := FALSE;
			Exit;
		end;
	end;
	m_cDataModule.Commit (m_cDBSelect);											// ｺﾐｯﾄ(反映)
	Result := TRUE;																// 正常終了
end;

//**********************************************************************
//*		Proccess	:	名寄せTree再表示の初期処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/13
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnTreeAgainDspInit();
var
	iLoop	: Integer;
	wkRec	: ^TreeViewRec;
	cNode	: TTreeNode;
begin
	if TreeViewNayose.Items.Count <> 0 then
	begin
		for iLoop := 1 to TreeViewNayose.Items.Count do
		begin
			wkRec := TreeViewNayose.Items[iLoop-1].Data;
			if (wkRec = nil) then
				continue;
			Dispose(wkRec);
			TreeViewNayose.Items[iLoop-1].Data := nil;
		end;

		while True do
		begin
			if TreeViewNayose.Items.Count > 0 then
			begin
				cNode := TreeViewNayose.Items[0];
				cNode.Delete;							//	ﾂﾘｰの消去
			end;
			if TreeViewNayose.Items.Count = 0 then
				break;
		end;
	end;
end;

//************************************************************************
//*		Component		:	NayoseEnter ( TMTreeView/TdxDBGrid)
//*							名寄せ共通Enterｲﾍﾞﾝﾄ
//*		Event			:	OnEnter
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004007f.NayoseEnter(Sender: TObject);
begin
	BSearch.Enabled	:= True;
	TBTag.Enabled   := False;
    m_cACControl := Screen.ActiveControl;

	// 名寄せ一覧
	if m_cACControl = GridNayose then
	begin
		if MemNayose.RecordCount <> 0 then
			CmnStatusBar.SimpleText	:= 'F1 名寄せ情報から外す';
	end
	// 名寄せTree
	else if m_cACControl = TreeViewNayose then
		TreeViewNayoseChange(Sender, TreeViewNayose.Selected);
end;

//************************************************************************
//*		Component		:	TreeViewNayose ( TMTreeView )
//*							変わった時
//*		Event			:	OnChange
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TreeViewNayoseChange(Sender: TObject;
  Node: TTreeNode);
var
	wkRec	: ^TreeViewRec;
begin
	if Node = nil then exit;

	wkRec := Node.Data;
	if (wkRec.nSumKbn <> TREE_SYSTEM_SUM) and (RBNayoseTree.Checked = True) then
		CmnStatusBar.SimpleText	:= 'F1 名寄せ情報から外す'
	else
		CmnStatusBar.SimpleText	:= '';
end;

//************************************************************************
//*		Component		:	NayoseExit ( TMTreeView/TdxDBGrid )
//*							名寄せの共通Exitｲﾍﾞﾝﾄ
//*		Event			:	OnExit
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.NayoseExit(Sender: TObject);
begin
	CmnStatusBar.SimpleText	:= '';
end;

//************************************************************************
//*		Component		:	GridNayose ( TdxDBGrid )
//*
//*		Event			:	OnChangeColumn
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.GridNayoseChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
begin
	CmnStatusBar.SimpleText	:= '';
end;

//************************************************************************
//*		Component		:	Tab ( TMTab )
//*							Tabでｷｰが押された時
//*		Event			:	OnKeyDown
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.TabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if (m_pRec^.m_pChildForm = nil) then
		Exit;

	if (((Key = VK_LEFT) and (Shift = [])) or ((Key = VK_RIGHT) and (Shift = []))) then
		m_ThroughTab := True;
end;

//**********************************************************************
//*		Proccess	:	F1名寄せ情報ﾏｽﾀの削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/14
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnF1DeletePayNayoseInfo();
var
	wkRec		: ^TreeViewRec;
	sMsgName	: String;
	sPayCD		: String;
	sOyaCD		: String;
	sName		: String;
	ePayCD		: Extended;
	eOyaCD		: Extended;
begin
	// 名寄せ(Tree)
	if (m_cACControl.Name = TreeViewNayose.Name) then
	begin
		m_NayoRightClick := TreeViewNayose.Selected;
		wkRec := m_NayoRightClick.Data;

		// 削除対象名称作成
		sMsgName := wkRec.sHojCode+' '+wkRec.sName;
		// 削除メッセージ表示('xxx'の名寄せ情報を削除します。よろしいですか？)
		m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
		if (MjsMessageBoxEx(Self,''''+sMsgName+'''の名寄せ情報を'+MjsMsgRec.sMsg, MjsMsgRec.sTitle,
				MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, MJsMsgRec.LogType) = mrYes) then
		begin
			PMNayoseTreeEraseClick(self);
		end;
	end
	else	// 名寄せ(Grid)
	if (m_cACControl.Name = GridNayose.Name) then
	begin
		// 名寄せ情報から外す
		sPayCD := GridNayose.DataSource.DataSet.FieldByName('HojCode' ).AsString;	// 支払先ｺｰﾄﾞ
		sName  := GridNayose.DataSource.DataSet.FieldByName('SName'   ).AsString;	// 支払先名称
		sOyaCD := GridNayose.DataSource.DataSet.FieldByName('OyaHojCD').AsString;	// 名寄せ親支払先ｺｰﾄﾞ
    	ePayCD := GridNayose.DataSource.DataSet.FieldByName('PayNCode').AsFloat;	// 名寄せ親支払先ｺｰﾄﾞ
	    eOyaCD := GridNayose.DataSource.DataSet.FieldByName('OyaNCode').AsFloat;	// 名寄せ親支払先ｺｰﾄﾞ

		// 削除対象名称作成
		sMsgName := sPayCD+' '+sName;
		// 削除メッセージ表示('xxx'の名寄せ情報を削除します。よろしいですか？)
		m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
		if (MjsMessageBoxEx(Self,''''+sMsgName+'''の名寄せ情報を'+MjsMsgRec.sMsg, MjsMsgRec.sTitle,
				MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, MJsMsgRec.LogType) = mrYes) then
		begin
			// 名寄せ子削除
			if fnDeletePayNayoseInfo(ePayCD,eOyaCD,NAYOSE_CHILD) = False then abort;
			m_EditFlg := True;
			MemNayose.Delete;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	支払条件ﾊﾟﾀｰﾝの更新
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/14
//*		Parameter	:	Qe	 	:	接続済みQuery
//*						PayCD	:	支払先ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdatePayPtnInfo(PayNCD: Extended): Boolean;
var
	Qe : TMQuery;   // <Rel>

begin

// ↓ <Rel>
	Qe := TMQuery.Create (Self);

    try
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
            m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Qe)       // 全社DBとMQueryの接続
        else
            m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);				   	// 子社DBとMQueryの接続
// ↑ <Rel>

        with (Qe) do
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT * FROM MTOKUI_PAY ');
            SQL.Add('WHERE BaseNCode = :NC');

            ParamByName ('NC').AsFloat	 := PayNCD;

            if (not Open ()) then
            begin
                fnErrorMessageDsp(Qe);
                Result := FALSE;
                Exit;
            end;

            if (EOF) then
            begin
                // 新規
                Close();
                SQL.Clear();
                SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,BunkaiKbn)');
                SQL.Add('VALUES(:NC,0)');

                ParamByName('NC').AsFloat := PayNCD;					        // 取引先ｺｰﾄﾞ


                if (not ExecSQL()) then
                begin
                    fnErrorMessageDsp(Qe);
                    Result := FALSE;
                    Exit;
                end;

                //↓<Rel>
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_PAY) = False ) then
                    begin
                        Result := FALSE;
                        Exit;
                    end;

                    // 更新されたときはSecHojyoDispInfoのﾒﾝﾃを行う。
                    if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,PayNCD,Qe) then
                    begin
                        Result := FALSE;
                        Exit;
                    end;
                end;
                //↑<Rel>
            end;
        end;
        Result := TRUE;													        // 正常終了
    finally
        Qe.Close;
        Qe.Free;
    end;

end;

//**********************************************************************
//*		Proccess	:	支払条件ﾊﾟﾀｰﾝの更新
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	Qe	 	:	接続済みQuery
//*						PayCD	:	支払先ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateDefPayPtnInfo(Qe: TMQuery; PayNCD: Extended): Boolean;
var
    strSQL  : String;
begin
	with (Qe) do
	begin
		Close();
		SQL.Clear();

        strSQL := 'SELECT * FROM PayPtnInfo '
                + 'WHERE PayPtnNo = 1 '
                + '  AND RDelKbn  = 0 ' // <144> Add
                + '  AND PayNCode = ' + FloatToStr(PayNCD);

		SQL.Add(strSQL);

		if (not Open ()) then
		begin
			fnErrorMessageDsp(Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();

            strSQL := 'INSERT INTO PayPtnInfo('
                    + ' MasterKbn'      // マスタ区分
                    + ',PayNCode'       // 支払先内部ｺｰﾄﾞ
                    + ',PayPtnNo'       // 条件ﾊﾟﾀｰﾝNo
                    + ',BmnNCode'       // 部門内部ｺｰﾄﾞ
                    + ',PrjNCode'       // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    + ',PjSubNCode'     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                    + ',BunkaiKbn'      // 分解区分
                    + ',PriPayWay'      // 優先支払方法
                    + ',RDelKbn'        // 削除区分
                    + ',UpdDateTM'      // 修正日付
                    + ',InsDateTM'      // 登録日付
                    + ',UpdTantoNCode'  // 処理者
                    + ')VALUES('
                    + IntToStr(MASTER_CUSTOMER)
                    + ',' + FloatToStr(PayNCD)
                    + ',1,0,0,0,0,0,0'
                    + ',Now(),Now()'
                    + ',' + FloatToStr(m_nTantoCd)
                    + ')';

            SQL.Add(strSQL);

			if (not ExecSQL()) then
			begin
				fnErrorMessageDsp(Qe);
				Result := FALSE;
				Exit;
			end;
		end;
	end;
	Result := TRUE;													// 正常終了
end;

(*
//************************************************************************
//*		Component		:	BSearch ( TSpeedButton )
//*							検索処理
//*		Event			:	OnClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.BSearchClick(Sender: TObject);
var
	cMem		: TdxMemData;
	cMasWndParam: TJNTMasWndParam;
	cMasWndIF	: TJNTMasWndIF;
	cNode		: TTreeNode;
	wkRec		: ^TreeViewRec;
	sSQLConst	: String;
	bTreeFlg	: Boolean;
	nLoop		: Integer;
	sExpCD		: String;
begin
	bTreeFlg  := False;

	sSQLConst := 'MasterKbn = 22 AND RDelKbn = 0 ';
	case (Tab.Items.Selected) of
		0:  sSQLConst := sSQLConst + 'AND SumKbn = 0 AND HojyoKbn2 = 1';						    		// 実在情報
		1:  sSQLConst := sSQLConst + 'AND SumKbn <> 0';	    												// 合計情報
		2:  sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM MTOKUI_PAY WHERE BunkaiKbn = 0)';	// 支払方法(比率)
		3:  sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM MTOKUI_PAY WHERE BunkaiKbn = 1)';	// 支払方法(定額)
		4:  sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM PayPtnDtl WHERE Houhou = 1)';		// 振込情報
		5:  sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM PayPtnDtl WHERE Houhou = 2)';		// 期日指定振込情報
		6:  sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM PayPtnDtl WHERE Houhou = 3)';		// 手形情報
		7:  sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM PayPtnDtl WHERE Houhou = 4)';		// 小切手情報
		9:	sSQLConst := sSQLConst + 'AND ((SumKbn = 0 and HojyoKbn2 = 1) or SumKbn = 1) ';			    	// その他情報
		10:																								    // 名寄せ情報
		begin
			if RBNayoseTree.Checked = True then
			begin
				sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM PayNayoseInfo)';
				bTreeFlg  := True;
			end
			else
				sSQLConst := sSQLConst + 'AND GCode in (SELECT PayNCode FROM PayNayoseInfo WHERE NayoseKbn = 1)';
		end;
	end;


	cMasWndIF := TJNTMasWndIF.Create ();
	cMasWndIF.Init(Pointer (m_pRec));

	cMasWndParam := TJNTMasWndParam.CreateParam ();

	cMasWndParam.m_GCodeFD		:= 'GCode';									// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'Renso';								    // 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'SimpleName';							// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'HojyoMA';							// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_SQL_Where	:= sSQLConst;								// Where句の条件
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);						// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= m_nCurCodeDigit;							// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= m_nCurCodeAttribute;						// ｺｰﾄﾞ属性
	cMasWndParam.m_SQL_Order	:= 'SumKbn';

	if (cMasWndIF.DoDlg(cMasWndParam) = mrOK) then
	begin
		sExpCD := cMasWndParam.m_ExpRetCode;
		if (m_nCurCodeAttribute <= 1) then
//			sExpCD := Format('%.10d',[StrToInt64(Trim(sExpCD))]);
			sExpCD := Format('%.16d',[StrToInt64(Trim(sExpCD))]);

		if bTreeFlg = True then
		begin
			// 同一ｺｰﾄﾞがあるかﾁｪｯｸ
			for nLoop := TreeViewNayose.Items.Count-1 downto 0 do
			begin
				cNode := TreeViewNayose.Items[nLoop];
				wkRec := cNode.Data;
				if (wkRec.sHojCode = sExpCD) then
				begin
					cNode.Selected := True;
					break;
				end;
			end;
		end
		else
		begin

			case (Tab.Items.Selected) of
				0:  cMem := MemReal;		// 実在情報
				1:  cMem := MemTotal;		// 合計情報
				2:  cMem := MemPayRatio;	// 支払方法(比率)
				3:  cMem := MemPayFixed;	// 支払方法(定額)
				4:  cMem := MemFuri;		// 振込情報
				5:  cMem := MemFuriDate;	// 期日指定振込情報
				6:  cMem := MemDraft;		// 手形情報
				7:  cMem := MemCheck;		// 小切手情報
				9:	cMem := MemOther; 		// その他情報
				10:	cMem := MemNayose;		// 名寄せ情報
			end;

			fnMoveGridSelecter(cMem,sExpCD,'BaseHojCode');
		end;
	end;

	cMasWndParam.Free();
	cMasWndIF.Term();
	cMasWndIF.Free();

end;
*) // <120>

//**********************************************************************
//*		Proccess	:	子がいない名寄せ親を削除
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/25
//*		Parameter	:	Nothing
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnNayoseOyaCheck(): Boolean;
var
	ParentQe	: TMQuery;
	ChildQe		: TMQuery;
	sOyaCD		: Extended;
begin
	Result := True;

	ParentQe := TMQuery.Create (Self);
	ChildQe  := TMQuery.Create (Self);

	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, ParentQe);						// DBとMQueryの接続
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, ChildQe);						// DBとMQueryの接続

		with (ParentQe) do
		begin
			// 名寄せ親を取得
			Close();
			SQL.Clear();
			SQL.Add('SELECT PayNCode FROM PayNayoseInfo ');
			SQL.Add('WHERE MasterKbn = :MK AND NayoseSyu = 1 AND NayoseKbn = 2');
			ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;	// ﾏｽﾀ区分

			if (not Open ()) then
			begin
				fnErrorMessageDsp(ParentQe);
				Result := FALSE;
				Exit;
			end;

			while (not EOF) do
			begin
				sOyaCD := GetFld('PayNCode').AsFloat;	// 名寄せ親ｺｰﾄﾞ
				with (ChildQe) do
				begin
					// 名寄せ親を取得
					Close();
					SQL.Clear();
					SQL.Add('SELECT PayNCode FROM PayNayoseInfo ');
					SQL.Add('WHERE MasterKbn = :MK AND NayoseSyu = 1 AND NayoseKbn = 1 AND NayoseOyaNCode = :Oya');
					ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;	// ﾏｽﾀ区分
					ParamByName('Oya').AsFloat	 := sOyaCD;				// 名寄せ親支払先ｺｰﾄﾞ

					if (not Open ()) then
					begin
						fnErrorMessageDsp(ChildQe);
						Result := FALSE;
						Exit;
					end;

					if (EOF) then
					begin
						// 名寄せ親削除
						if fnDeletePayNayoseInfo(sOyaCD,0,NAYOSE_PARENT) = False then
						begin
							Result := FALSE;
							exit;
						end;
					end;
				end;
				next;
			end;
		end;

	finally
		ParentQe.Close;
		ParentQe.Free;
		ChildQe.Close;
		ChildQe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	ﾚｺｰﾄﾞをMemDataに追加
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	MODE	:	DISPOSE_RATIO   (比率)
//*									DISPOSE_FIXED   (定額)
//*									DISPOSE_TRANSFER(振込)
//*									DISPOSE_DATETRAN(期日指定振込)
//*									DISPOSE_DRAFT   (手形)
//*									DISPOSE_CHECK   (小切手)
//*									DISPOSE_OTHER   (その他)
//*						RecInfo	:	追加する基本ﾃﾞｰﾀ
//*						cMem	:	追加するMemData
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMemUpdate(MODE: Integer; RecInfo: RecInfoRec; cMem: TdxMemData);
var
	i	: Integer;
begin
// <172> Add
	//MemDataが閉じられている？
	if cMem.RecordCount = 0 then
		cMem.Open;
// <172> Add

	case MODE of
		// 支払方法(比率)、支払方法(定額)、その他情報
		DISPOSE_RATIO,DISPOSE_FIXED,DISPOSE_OTHER:
		begin
			cMem.Append;
			cMem.FieldByName('HojCode'    ).AsString := RecInfo.sCD;		// 支払先ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString := RecInfo.sBaseCD;	// 支払先ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString := RecInfo.sName;		// 簡略名称
			cMem.FieldByName('RenChar'    ).AsString := RecInfo.sRen;		// 連想
            cMem.FieldByName('ExNCode'    ).AsFloat  := RecInfo.ExNCD;      // 内部ｺｰﾄﾞ
            cMem.FieldByName('PayPtnNo'   ).AsInteger:= RecInfo.PayPtnNo;   // 条件ﾊﾟﾀｰﾝNo  <142> Add

            fnGetPayPtnInfo(RecInfo, cMem); // <142> Add

			case MODE of
				DISPOSE_RATIO:	// 支払方法(比率)
				begin
					for i:=1 to 5 do
					begin
   						cMem.FieldByName('Hou'+IntToStr(i)+'Data'        ).AsInteger  := 0;	// 支払方法
						cMem.FieldByName('Hou'+IntToStr(i)+'StdRitsu'    ).AsCurrency := 0;	// 分解基準値
						cMem.FieldByName('Hou'+IntToStr(i)+'MinKin'      ).AsCurrency := 0;	// 支払最低額
						cMem.FieldByName('Hou'+IntToStr(i)+'HasuuKin'    ).AsCurrency := 0;	// 端数処理額
						cMem.FieldByName('Hou'+IntToStr(i)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
					end;
				end;
				DISPOSE_FIXED:	// 支払方法(定額)
				begin
					for i:=1 to 5 do
					begin
   						MemPayFixed.FieldByName('Hou'+IntToStr(i)+'Data'    ).AsInteger  := 0;	// 支払方法
						MemPayFixed.FieldByName('Hou'+IntToStr(i)+'StdRitsu').AsCurrency := 0;	// 分解基準値
					end;
				end;
				DISPOSE_OTHER:	// その他情報
				begin
					cMem.FieldByName('TitleData'  ).AsInteger := 0;	// 敬称
					cMem.FieldByName('LetterData' ).AsInteger := 0;	// 通知書
				end;
			end;
			cMem.Post;

// <172> Add
			cMem.SortedField := 'HojCode';
			cMem.First;
// <172> Add
		end;

		//↓内部ｺｰﾄﾞ対応済み
// <142> 2007/02/20 H.Kawato Mod Start
{
		DISPOSE_TRANSFER: fnGetFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD);		// 振込情報
		DISPOSE_DATETRAN: fnGetDateFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD);	// 期日指定振込情報
		DISPOSE_DRAFT:    fnGetDraftOneRecordInfo(cMem,RecInfo.sBaseCD);		// 手形情報
		DISPOSE_CHECK:	  fnGetCheckOneRecordInfo(cMem,RecInfo.sBaseCD);		// 小切手情報
}
		DISPOSE_TRANSFER: fnGetFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);    // 振込情報
//<GA001>ST
		DISPOSE_TRANSFER_GD: fnGetFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);    // 電信送金
		DISPOSE_TRANSFER_GT: fnGetFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);    // 為替手形
		DISPOSE_TRANSFER_GK: fnGetFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);    // 送金小切手
//<GA001>ED

		DISPOSE_DATETRAN: fnGetDateFurikomiOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);// 期日指定振込情報
		DISPOSE_DRAFT:    fnGetDraftOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);		// 手形情報
		DISPOSE_CHECK:	  fnGetCheckOneRecordInfo(cMem,RecInfo.sBaseCD,RecInfo.PayPtnNo);		// 小切手情報
// <142> 2007/02/20 H.Kawato Mod End
	end;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,MODE,cMem);
end;

//**********************************************************************
//*		Proccess	:	支払条件パターン情報の取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20 <142>
//*		Parameter	:	RecInfo : RecInfoRec
//*                     cMem    : TdxMemData
//*		Return		:   Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetPayPtnInfo(RecInfo: RecInfoRec; cMem: TdxMemData);
var
	Qe	        : TMQuery;
    strSQL      : String;
    strHojCode  : String;
    strFormat   : String;
begin
	Qe := TMQuery.Create (Self);												// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);						// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();

		    strSQL := 'SELECT '
                    + ' ISNULL(PT.PrjNCode, 0) AS PrjNCode '
                    + ',ISNULL(HM1.GCode, '''') AS PrjGCode '
                    + ',ISNULL(HM1.SimpleName, '''') AS PrjName '
                    + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
                    + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '
                    + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '
                    + ',ISNULL(PT.PriPayWay, 0) AS PriPayWay '
                    + 'FROM PayPtnInfo PT '
                    + 'LEFT OUTER JOIN HojyoMA HM1 '
                    + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                    + ' AND HM1.NCode = PT.PrjNCode '
                    + ' AND HM1.RDelKbn = 0) '
                    + 'LEFT OUTER JOIN HojyoMA HM2 '
                    + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                    + ' AND HM2.NCode = PT.PjSubNCode '
                    + ' AND HM2.RDelKbn = 0) '
                    + 'WHERE PT.RDelKbn = 0 '
                    + ' AND PT.PayPtnNo = '+ FloatToStr(RecInfo.PayPtnNo)
                    + ' AND PT.PayNCode = '+ FloatToStr(RecInfo.ExNCD)
                    + ' AND PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

			SQL.Add(strSQL);

			if (not Open ()) then
			begin
				fnErrorMessageDsp(Qe);
				Exit;
			end;

			if (not EOF) then
            begin
				strHojCode := FieldByName ('PrjGCode').Value;
				if (m_iPrjCodeAttr <= 1) then
				begin
					case (m_iPrjCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				cMem.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'    ).Value;   // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
				cMem.FieldByName('PrjGCode'  ).AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				cMem.FieldByName('PrjName'   ).AsString := FieldByName('PrjName' ).Value    // ﾌﾟﾛｼﾞｪｸﾄ名称
                else
                   	cMem.FieldByName('PrjName'   ).AsString := 'その他';

				strHojCode := FieldByName ('PjSubGCode').Value;
				if (m_iPjSubCodeAttr <= 1) then
				begin
					case (m_iPjSubCodeAttr) of
						0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
						1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
					end;

                    if (Trim(strHojCode) <> '') then
    					strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;
				cMem.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
				cMem.FieldByName('PjSubGCode').AsString := strHojCode;							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

                if (Trim(strHojCode) <> '') then
    				cMem.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                else
                    cMem.FieldByName('PjSubName' ).AsString := 'その他';

   				cMem.FieldByName('PriPayWayData' ).AsInteger := 0;  // 優先支払
            end;
		end;
	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	MemDataからﾚｺｰﾄﾞ削除
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sCD		:	削除対象ｺｰﾄﾞ
//*						cMem	:	削除対象のMemData
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
//<142> procedure TJNTCRP004007f.fnMemDelete(sCD: String; cMem: TdxMemData);
procedure TJNTCRP004007f.fnMemDelete(sCD: String; iPayPtnNo:Integer; cMem: TdxMemData);
begin
// <180> ADD-STR
    if not cMem.Active then
        cMem.Open;
// <180> ADD-END

	if cMem.RecordCount = 0 then
    	exit;

// <180> ADD-STR
    if (cMem.State in [dsEdit]) then
        cMem.Cancel;
// <180> ADD-END

	cMem.First;
	while Not(cMem.Eof) do
	begin
// <142> 2007/02/20 H.Kawato Mod
//		if cMem.FieldByName('BaseHojCode').AsString = sCD then
		if (cMem.FieldByName('BaseHojCode').AsString = sCD) and
           (cMem.FieldByName('PayPtnNo').AsInteger = iPayPtnNo) then
		begin
			cMem.Delete;
			break;
		end;
		cMem.Next;
	end;

// <172> Mod
//	if cMem.RecordCount <> 0 then
//		cMem.First;
	if cMem.RecordCount > 0 then
		cMem.First
	else if cMem.RecordCount = 0 then
	begin
		cMem.Cancel;
		cMem.Close;
	end;
// <172> Add
end;

//**********************************************************************
//*		Proccess	:	名寄せ情報のMemDataからﾚｺｰﾄﾞ削除
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/27
//*		Parameter	:	Kbn		:	実在/合計
//*						sCD		:	削除対象ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMemDeleteNayose(Kbn: Byte; sCD: String);
var
	bFlg	: Boolean;
begin
	if MemNayose.RecordCount = 0 then exit;

	bFlg := False;
	MemNayose.First;
	while Not(MemNayose.Eof) do
	begin
		if Kbn = DISPOSE_REAL then	// 実在
		begin
			if MemNayose.FieldByName('BaseHojCode').AsString = sCD then
			begin
				MemNayose.Delete;
				break;
			end;
		end
		else						// 合計
		begin
			if MemNayose.FieldByName('OyaBaseHojCD').AsString = sCD then
			begin
				MemNayose.Delete;
				bFlg := True;
				break;
			end;
		end;
		MemNayose.Next;
	end;

	if bFlg = True then
		fnMemDeleteNayose(Kbn,sCD);

	if MemOffset.RecordCount <> 0 then
		MemOffset.First;
end;

//**********************************************************************
//*		Proccess	:	相殺情報のMemDataからﾚｺｰﾄﾞ削除
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sCD		:	削除対象ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
//<142> procedure TJNTCRP004007f.fnMemDeleteOffset(sCD: String);
procedure TJNTCRP004007f.fnMemDeleteOffset(sCD: String; iPayPtnNo: Integer);
var
	bFlg	: Boolean;
begin
	if MemOffset.RecordCount = 0 then exit;

	bFlg := False;
	MemOffset.First;
	while Not(MemOffset.Eof) do
	begin
// <142> 2007/02/20 H.Kawato Mod
//		if MemOffset.FieldByName('BaseHojCode').AsString = sCD then
		if (MemOffset.FieldByName('BaseHojCode').AsString = sCD) and
           (MemOffset.FieldByName('PayPtnNo').AsInteger = iPayPtnNo) then
		begin
			MemOffset.Delete;
			bFlg := True;
			break;
		end;
		MemOffset.Next;
	end;

	if bFlg = True then
// <142> 2007/02/20 H.Kawato Mod
//		fnMemDeleteOffset(sCD);
		fnMemDeleteOffset(sCD, iPayPtnNo);

	if MemOffset.RecordCount = 0 then
    begin
		Edit00PayCodeNum.InputFlag := True;
		Edit00PayCodeNum.Value     := 0;	// 支払先ｺｰﾄﾞ
		Edit00PayCodeFree.Text     := '';
		Edit00PayName.Text		   := '';

		fnInitializeOffsetJournalInfo();
	end
	else
		MemOffset.First;
end;
//**********************************************************************
//*		Proccess	:	GridOptionsの操作
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/12/03
//*		Parameter	:	Dispose	:	採用(True)/未採用(False)
//*						MODE	:	DISPOSE_RATIO   (比率)
//*									DISPOSE_FIXED   (定額)
//*									DISPOSE_TRANSFER(振込)
//*									DISPOSE_DATETRAN(期日指定振込)
//*									DISPOSE_DRAFT   (手形)
//*									DISPOSE_CHECK   (小切手)
//*									DISPOSE_OTHER   (その他)
//*						cMem	:	処理対象のMemData
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGridOptionsControl(Dispose: Boolean; MODE: Integer; cMem: TdxMemData);
// <172> Add
var
	cOpeGrid	: TdxDBGrid;
// <172> Add

begin
// <172> Mod
{	if Dispose = True then
	begin
		if cMem.RecordCount <> 0 then
		begin
			case MODE of
				DISPOSE_PAYWAY:   GridPayWay.Options   := GridPayWay.Options   + [egoEditing];	// 支払方法 <142> Add
				DISPOSE_RATIO:    GridPayRatio.Options := GridPayRatio.Options + [egoEditing];	// 支払方法(比率)
				DISPOSE_FIXED:    GridPayFixed.Options := GridPayFixed.Options + [egoEditing];	// 支払方法(定額)
				DISPOSE_TRANSFER: GridFurikomi.Options := GridFurikomi.Options + [egoEditing];	// 振込情報
				DISPOSE_DATETRAN: GridFuriDate.Options := GridFuriDate.Options + [egoEditing];	// 期日指定振込情報
				DISPOSE_DRAFT:    GridDraft.Options    := GridDraft.Options    + [egoEditing];	// 手形情報
				DISPOSE_CHECK:    GridCheck.Options    := GridCheck.Options    + [egoEditing];	// 小切手情報
				DISPOSE_OTHER:    GridOther.Options    := GridOther.Options    + [egoEditing];	// その他情報
				DISPOSE_SHOUSAI:  GridShousai.Options  := GridShousai.Options  + [egoEditing];	// 優先支払詳細 <142> Add
			end;
    	end;
	end
	else
	begin
		if cMem.RecordCount = 0 then
		begin
			case MODE of
				DISPOSE_PAYWAY:   GridPayWay.Options   := GridPayWay.Options   - [egoEditing];	// 支払方法 <142> Add
				DISPOSE_RATIO:    GridPayRatio.Options := GridPayRatio.Options - [egoEditing];	// 支払方法(比率)
				DISPOSE_FIXED:    GridPayFixed.Options := GridPayFixed.Options - [egoEditing];	// 支払方法(定額)
				DISPOSE_TRANSFER: GridFurikomi.Options := GridFurikomi.Options - [egoEditing];	// 振込情報
				DISPOSE_DATETRAN: GridFuriDate.Options := GridFuriDate.Options - [egoEditing];	// 期日指定振込情報
				DISPOSE_DRAFT:    GridDraft.Options    := GridDraft.Options    - [egoEditing];	// 手形情報
				DISPOSE_CHECK:    GridCheck.Options    := GridCheck.Options    - [egoEditing];	// 小切手情報
				DISPOSE_OTHER:    GridOther.Options    := GridOther.Options    - [egoEditing];	// その他情報
				DISPOSE_SHOUSAI:  GridShousai.Options  := GridShousai.Options  - [egoEditing];	// 優先支払詳細 <142> Add
			end;
    	end;
	end;
}
// <180> ADD-STR
    if not cMem.Active then
        cMem.Open;
// <180> ADD-END

	case MODE of
		DISPOSE_PAYWAY:   cOpeGrid	:= GridPayWay;		// 支払方法
		DISPOSE_RATIO:    cOpeGrid	:= GridPayRatio;	// 支払方法(比率)
		DISPOSE_FIXED:    cOpeGrid	:= GridPayFixed;	// 支払方法(定額)
		DISPOSE_TRANSFER: cOpeGrid	:= GridFurikomi;	// 振込情報
//<GA001>ST
		DISPOSE_TRANSFER_GD: cOpeGrid	:= GridFurikomiGD;	// 電信送金
		DISPOSE_TRANSFER_GT: cOpeGrid	:= GridFurikomiGT;	// 為替手形
		DISPOSE_TRANSFER_GK: cOpeGrid	:= GridFurikomiGK;	// 送金小切手
//<GA001>ED
		DISPOSE_DATETRAN: cOpeGrid	:= GridFuriDate;	// 期日指定振込情報
		DISPOSE_DRAFT:    cOpeGrid	:= GridDraft;		// 手形情報
		DISPOSE_CHECK:    cOpeGrid	:= GridCheck;		// 小切手情報
		DISPOSE_OTHER:    cOpeGrid	:= GridOther;		// その他情報
		DISPOSE_SHOUSAI:  cOpeGrid	:= GridShousai;		// 優先支払詳細
	end;
	if Dispose = True then
	begin
		if cMem.RecordCount <> 0 then
			cOpeGrid.Options   := cOpeGrid.Options   + [egoEditing];	//編集可
	end
    else
	begin
		if cMem.RecordCount = 0 then
		begin
			cOpeGrid.Options   := cOpeGrid.Options   - [egoEditing];	//編集不可
			cOpeGrid.RefreshBookmarks;
		end;
    end;
	cOpeGrid.Refresh;
	cOpeGrid.RePaint;
// <172> Mod
end;

//**********************************************************************
//*		Proccess	:	ﾚｺｰﾄﾞ存在ﾁｪｯｸ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	cMem	:	検索対象MemData
//*						sCD		:	検索対象ｺｰﾄﾞ
//*		Return		:	存在(True)/存在しない(False)
//*		History		:
//**********************************************************************
//<142> function TJNTCRP004007f.fnMemRecordCheck(cMem: TdxMemData; sPayCD: String): Boolean;
function TJNTCRP004007f.fnMemRecordCheck(cMem: TdxMemData; sPayCD: String; iPayPtnNo: Integer): Boolean;
begin
	Result := False;
	if cMem.RecordCount = 0 then exit;

	cMem.First;
	while Not(cMem.Eof) do
	begin
// <142> 2007/02/20 H.Kawato Mod
//		if cMem.FieldByName('HojCode').AsString = sPayCD then
		if (cMem.FieldByName('HojCode').AsString = sPayCD) and
           (cMem.FieldByName('PayPtnNo').ASInteger = iPayPtnNo) then
		begin
			Result := True;
			break;
		end;
		cMem.Next;
	end;
	cMem.First;
end;

//**********************************************************************
//*		Proccess	:	振込1ﾚｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/12/04
//*		Parameter	:	cMem	:	処理対象MemData
//*						sCD		:	支払先ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
//<142> procedure TJNTCRP004007f.fnGetFurikomiOneRecordInfo(cMem: TdxMemData; sCD: String);
procedure TJNTCRP004007f.fnGetFurikomiOneRecordInfo(cMem: TdxMemData; sCD: String; iPN: Integer);
var
	sHojCD		: String;
	sFormat		: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode');

// <050>        SQL.Add(',DI.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',PS.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',DI.BkBraNCode As BranchNCode'    );  //支店内部ｺｰﾄﾞ
        SQL.Add(',PF.BankCode'      );  //本店外部ｺｰﾄﾞ
        SQL.Add(',PF.BankName'      );  //本店名
        SQL.Add(',PF.BankKana'      );  //本店ｶﾅ

        SQL.Add(',PS.BranchCode'    );  //支店外部ｺｰﾄﾞ
		SQL.Add(',PS.BranchName'    );  //支店名
		SQL.Add(',PS.BranchKana'    );  //支店ｶﾅ

        SQL.Add(',DI.TransKanaName,DI.Acckbn,DI.AccNo,DI.ChargeFutan,DI.ChargeKbn');

		SQL.Add(',DI.TransKbn,DI.FBSet,DI.EdiInfo,DI.AiteNo1,DI.AiteNo2');
		SQL.Add(',DI.AccAutoKbn,DI.AccAutoData');   // <128> Add
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo ');
// <121>		SQL.Add(',MA.GCode as BANKGCode ,MA.SimpleName as BANK ');
		SQL.Add(',MA.SimpleName as BANK ');         // <121>
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.PayPtnNo = DI.PayPtnNo ');  // <142> Add
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelKbn = 0 AND AI.NCode = MA.BankNCode) ');
		SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '); // <121>
// <050>        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (DI.BankNCode  = PF.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBS PS ON   (DI.BkBraNCode = PS.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (PS.BankNCode  = PF.NCode)');

		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 1 AND MT.GCode = :GC AND MT.RDelKbn = 0');    // <121>
		SQL.Add('  AND PD.PayPtnNo  = :PN ');       // <142> Add
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('GC').AsString  := sCD;
		ParamByName('PN').AsInteger := iPN;         // <142> Add
}
		strSQL := 'SELECT '
                + ' ISNULL(PD.PayNCode, 0) AS PayNCode'                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode'                  //支払先ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso'                    //連想
                + ',ISNULL(MT.NMK, '''') AS PayName'                    //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode'                 //依頼先口座内部ｺｰﾄﾞ
                + ',ISNULL(PS.BankNCode, 0) AS BankNCode'               //本店内部ｺｰﾄﾞ
                + ',ISNULL(DI.BkBraNCode, 0) AS BranchNCode'            //支店内部ｺｰﾄﾞ
                + ',ISNULL(PF.BankCode, 0) AS BankCode'                 //本店外部ｺｰﾄﾞ
                + ',ISNULL(PF.BankName, '''') AS BankName'              //本店名
                + ',ISNULL(PF.BankKana, '''') AS BankKana'              //本店ｶﾅ
                + ',ISNULL(PS.BranchCode, 0) AS BranchCode'             //支店外部ｺｰﾄﾞ
                + ',ISNULL(PS.BranchName, '''') AS BranchName'          //支店名
                + ',ISNULL(PS.BranchKana, '''') AS BranchKana'          //支店ｶﾅ
                + ',ISNULL(DI.TransKanaName, '''') AS TransKanaName'    //ｶﾅ振込先名称
// <175> MOD-STR
//              + ',ISNULL(DI.Acckbn, 0) AS Acckbn'                     //預金種目
                + ',ISNULL(DI.Acckbn, 1) AS Acckbn'                     //預金種目
// <175> MOD-END
                + ',ISNULL(DI.AccNo, '''') AS AccNo'                    //口座番号
                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan'           //手数料負担
                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn'               //手数料計算区分
                + ',ISNULL(DI.TransKbn, 0) AS TransKbn'                 //振込方法
// <170> MOD-STR
//              + ',ISNULL(DI.FBSet, 0) AS FBSet'                       //FBセット項目
                + ',ISNULL(DI.FBSet, 2) AS FBSet'                       //FBセット項目
// <170> MOD-END
                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo'                //EDI情報
                + ',ISNULL(DI.AiteNo1, '''') AS AiteNo1'                //顧客ｺｰﾄﾞ1
                + ',ISNULL(DI.AiteNo2, '''') AS AiteNo2'                //顧客ｺｰﾄﾞ2
                + ',ISNULL(DI.AccAutoKbn, 0) AS AccAutoKbn'             //自動口座引落区分
                + ',ISNULL(DI.AccAutoData, 0) AS AccAutoData'           //口座自動引落区分
                + ',ISNULL(AI.Acckbn, 0) as YOKIN'                      //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA'                     //口座番号
                + ',ISNULL(AI.GCode, 0) as IraiAccNo'                   //依頼先口座ｺｰﾄﾞ
                + ',ISNULL(MA.SimpleName, '''') as BANK '               //銀行名称
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + ' ON (DI.MasterKbn = PD.MasterKbn '
                + ' AND DI.PayNCode = PD.PayNCode '
                + ' AND PD.PayPtnNo = DI.PayPtnNo '
                + ' AND DI.Edaban = 1 '
                + ' AND DI.RDelKbn = 0 '    // <144> Add
                + ' AND PD.HouHou = DI.ShiharaiSyubetu) '
                + 'LEFT OUTER JOIN MTOKUI MT '
                + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI '
                + 'ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode) '
                + 'LEFT OUTER JOIN HAPBS PS ON (DI.BkBraNCode = PS.NCode)'
                + 'LEFT OUTER JOIN HAPBF PF ON (PS.BankNCode  = PF.NCode)'
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND MT.GCode = ' + AnsiQuotedStr(sCD, '''')
                + ' AND PD.PayPtnNo  = ' + IntToStr(iPN)
                + ' AND PD.HouHou = 1 '
                + ' AND PD.RDelKbn = 0'     // <144> Add
                + ' AND MT.RDelKbn = 0'
                + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		if (EOF <> True) then
		begin
			cMem.Append;

// <142> 2007/02/20 H.Kawato Mod
//			sHojCD := FieldByName ('GCode').AsString;
			sHojCD := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: sFormat := '%'  + IntToStr(m_nCurCodeDigit) + 'd';
					1: sFormat := '%.' + IntToStr(m_nCurCodeDigit) + 'd';
				end;

				sHojCD := Format(sFormat,[StrToInt64(Trim(sHojCD))]);
			end;
// <142> 2007/02/20 H.Kawato Mod Start
{
            cMem.FieldByName('PayNCode'   ).AsFloat     := FieldByName('PayNCode'   ).AsFloat;
			cMem.FieldByName('HojCode'    ).AsString    := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString    := FieldByName('GCode'      ).AsString;	// 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString    := FieldByName('NMK'        ).AsString;	// 補助名称
			cMem.FieldByName('RenChar'    ).AsString    := FieldByName('Renso'      ).AsString;	// 連想
}
            cMem.FieldByName('PayNCode'   ).AsFloat     := FieldByName('PayNCode'   ).Value;    // 支払先内部ｺｰﾄﾞ
			cMem.FieldByName('HojCode'    ).AsString    := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString    := FieldByName('PayCode'    ).Value;	// 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString    := FieldByName('PayName'    ).Value;    // 補助名称
			cMem.FieldByName('RenChar'    ).AsString    := FieldByName('Renso'      ).Value;	// 連想

            cMem.FieldByName('PayPtnNo'   ).AsInteger   := FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

            sHojCD  := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD  := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'   ).Value;        // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            cMem.FieldByName('PrjGCode'  ).AsString := sHojCD;                                  // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PrjName'   ).AsString := FieldByName('PrjName').Value         // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	cMem.FieldByName('PrjName'   ).AsString := 'その他';

            sHojCD  := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            cMem.FieldByName('PjSubGCode').AsString := sHojCD;                                  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                cMem.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			                            // 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		                            // 依頼口座
               (FieldByName('IraiAccNo').Value <> 0) then			                            // 依頼口座
			begin
				cMem.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
//				cMem.FieldByName('IraiAccNo').AsInteger := FieldByName('AccNo').AsInteger;
				sBankName := FieldByName('BANK').AsString;	    // 銀行名称
				case FieldByName('YOKIN').AsInteger of			// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				cMem.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				cMem.FieldByName('AccInfo').AsString := '';
{
			if FieldByName('BankCode').IsNull = False then			// 銀行ｺｰﾄﾞ
				cMem.FieldByName('BankCode' ).AsInteger := FieldByName('BankCode' ).AsInteger;
			if FieldByName('BkBraCode').IsNull = False then			// 支店ｺｰﾄﾞ
				cMem.FieldByName('BkBraCode').AsInteger := FieldByName('BkBraCode').AsInteger;
}
			if FieldByName('BankCode').IsNull = False then			    // 銀行ｺｰﾄﾞ
            begin
  				cMem.FieldByName('BankCode'  ).AsInteger := FieldByName('BankCode'  ).AsInteger;
  				cMem.FieldByName('BankNCode' ).AsFloat := FieldByName('BankNCode' ).AsFloat;
            end;
			if FieldByName('BranchCode').IsNull = False then			// 支店ｺｰﾄﾞ
            begin
				cMem.FieldByName('BkBraCode').AsInteger   := FieldByName('BranchCode' ).AsInteger;
				cMem.FieldByName('BranchNCode').AsFloat := FieldByName('BranchNCode').AsFloat;
            end;

			cMem.FieldByName('BankName'	    ).AsString := FieldByName('BankName'	    ).AsString;	// 銀行名称
			cMem.FieldByName('BankKanaName' ).AsString := FieldByName('BankKana'        ).AsString;	// ｶﾅ銀行名称
			cMem.FieldByName('BkBraName'    ).AsString := FieldByName('BranchName'	    ).AsString;	// 支店名称
			cMem.FieldByName('BraKanaName'  ).AsString := FieldByName('BranchKana'      ).AsString;	// ｶﾅ支店名称
			cMem.FieldByName('TransKanaName').AsString := FieldByName('TransKanaName'   ).AsString;	// ｶﾅ振込先名
			// 預金種別
			if FieldByName('Acckbn').IsNull = True then
				cMem.FieldByName('AccData').AsInteger := 1
			else
				cMem.FieldByName('AccData').AsInteger := FieldByName('Acckbn').AsInteger;
																									// 口座番号
			cMem.FieldByName('AccNo'		).AsString  := fnGetEditedAccountNumber(FieldByName('AccNo').AsString);
			cMem.FieldByName('ChargeData'   ).AsInteger := FieldByName('ChargeFutan').AsInteger;	// 手数料負担区分
			cMem.FieldByName('ChargeKbnData').AsInteger := FieldByName('ChargeKbn'	).AsInteger;	// 手数料計算区分
			cMem.FieldByName('TransKbnData' ).AsInteger := FieldByName('TransKbn'	).AsInteger;	// 振込方法
			cMem.FieldByName('FBSetData'    ).AsInteger := FieldByName('FBSet'		).AsInteger;	// FB区分
			cMem.FieldByName('EDIInfo'      ).AsString  := FieldByName('EdiInfo'	).AsString;		// EDI情報
			cMem.FieldByName('AiteNo1'      ).AsString  := FieldByName('AiteNo1'	).AsString;		// 顧客ｺｰﾄﾞ1
			cMem.FieldByName('AiteNo2'      ).AsString  := FieldByName('AiteNo2'	).AsString;		// 顧客ｺｰﾄﾞ2
			cMem.FieldByName('AutoKbnData'  ).AsInteger := FieldByName('AccAutoKbn' ).AsInteger;	// <128> 口座自動引落区分
			cMem.FieldByName('AccAutoData'  ).AsInteger := FieldByName('AccAutoData').AsInteger;	// <128> 引落支払データ
			cMem.Post;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	期日指定振込1ﾚｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/12/04
//*		Parameter	:	cMem	:	処理対象MemData
//*						sCD		:	支払先ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
//<142> procedure TJNTCRP004007f.fnGetDateFurikomiOneRecordInfo(cMem: TdxMemData; sCD: String);
procedure TJNTCRP004007f.fnGetDateFurikomiOneRecordInfo(cMem: TdxMemData; sCD: String; iPN: Integer);
var
	sHojCD		: String;
	sFormat		: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode');

// <050>        SQL.Add(',DI.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',PS.BankNCode  As BankNCode'      );  //本店内部ｺｰﾄﾞ
        SQL.Add(',DI.BkBraNCode As BranchNCode'    );  //支店内部ｺｰﾄﾞ
        SQL.Add(',PF.BankCode'      );  //本店外部ｺｰﾄﾞ
        SQL.Add(',PF.BankName'      );  //本店名
        SQL.Add(',PF.BankKana'      );  //本店ｶﾅ

        SQL.Add(',PS.BranchCode'    );  //支店外部ｺｰﾄﾞ
		SQL.Add(',PS.BranchName'    );  //支店名
		SQL.Add(',PS.BranchKana'    );  //支店ｶﾅ

        SQL.Add(',DI.TransKanaName,DI.Acckbn,DI.AccNo,DI.ChargeFutan,DI.ChargeKbn');

		SQL.Add(',DI.TransKbn,DI.FBSet,DI.EdiInfo,DI.AiteNo1,DI.AiteNo2,DI.Site');
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo');
		SQL.Add(',MA.SimpleName as BANK ');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.PayPtnNo = DI.PayPtnNo ');  // <142> Add
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelKbn = 0 AND AI.NCode = MA.BankNCode) ');
		SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '); // <121>
// <050>        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (DI.BankNCode  = PF.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBS PS ON   (DI.BkBraNCode = PS.NCode)');
        SQL.Add('LEFT OUTER JOIN HAPBF PF ON   (PS.BankNCode  = PF.NCode)');

		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 2 AND MT.GCode = :GC  ');
		SQL.Add('  AND PD.PayPtnNo  = :PN ');       // <142> Add
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('GC').AsString  := sCD;
		ParamByName('PN').AsInteger := iPN;         // <142> Add
}
		strSQL := 'SELECT '                                             
                + ' ISNULL(PD.PayNCode, 0) AS PayNCode'                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode'                  //支払先ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso'                    //連想
                + ',ISNULL(MT.NMK, '''') AS PayName'                    //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode'                 //依頼先内部ｺｰﾄﾞ
                + ',ISNULL(PS.BankNCode, 0) As BankNCode'               //本店内部ｺｰﾄﾞ
                + ',ISNULL(DI.BkBraNCode, 0) As BranchNCode'            //支店内部ｺｰﾄﾞ
                + ',ISNULL(PF.BankCode, 0) AS BankCode'                 //本店外部ｺｰﾄﾞ
                + ',ISNULL(PF.BankName, '''') AS BankName'              //本店名
                + ',ISNULL(PF.BankKana, '''') AS BankKana'              //本店ｶﾅ
                + ',ISNULL(PS.BranchCode, 0) AS BranchCode'             //支店外部ｺｰﾄﾞ
                + ',ISNULL(PS.BranchName, '''') AS BranchName'          //支店名
                + ',ISNULL(PS.BranchKana, '''') AS BranchKana'          //支店ｶﾅ
                + ',ISNULL(DI.TransKanaName, '''') AS TransKanaName'    //ｶﾅ振込先名
// <175> MOD-STR
//              + ',ISNULL(DI.Acckbn, 0) AS AccKbn'                     //預金種目
                + ',ISNULL(DI.Acckbn, 1) AS AccKbn'                     //預金種目
// <175> MOD-END
                + ',ISNULL(DI.AccNo, '''') AS AccNo'                    //口座番号
                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan'           //手数料負担
                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn'               //手数料計算区分
                + ',ISNULL(DI.TransKbn, 0) AS TransKbn'                 //振込方法
// <170> MOD-STR
//              + ',ISNULL(DI.FBSet, 0) AS FBSet'                       //FBセット項目
                + ',ISNULL(DI.FBSet, 2) AS FBSet'                       //FBセット項目
// <170> MOD-END
                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo'                //EDI情報
                + ',ISNULL(DI.AiteNo1, '''') AS AiteNo1'                //顧客ｺｰﾄﾞ1
                + ',ISNULL(DI.AiteNo2, '''') AS AiteNo2'                //顧客ｺｰﾄﾞ2
                + ',ISNULL(DI.Site, 0) AS Site'                         //サイト
                + ',ISNULL(AI.Acckbn, 0) as YOKIN'                      //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA'                     //口座番号
                + ',ISNULL(AI.GCode, 0) as IraiAccNo'                   //依頼先口座ｺｰﾄﾞ
                + ',ISNULL(MA.SimpleName, '''') as BANK '               //銀行名称
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + 'ON (DI.MasterKbn = PD.MasterKbn '
                + 'AND DI.PayNCode = PD.PayNCode '
                + 'AND PD.PayPtnNo = DI.PayPtnNo '
                + 'AND DI.PayPtnNo = 1 '
                + 'AND DI.RDelKbn  = 0 '    // <144> Add
                + 'AND PD.HouHou = DI.ShiharaiSyubetu) '
                + 'LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '
                + 'LEFT OUTER JOIN HAPBS PS ON (DI.BkBraNCode = PS.NCode)'
                + 'LEFT OUTER JOIN HAPBF PF ON (PS.BankNCode  = PF.NCode)'
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND MT.GCode = ' + AnsiQuotedStr(sCD, '''')
                + ' AND PD.PayPtnNo  = ' +  IntToStr(iPN)
                + ' AND PD.HouHou = 2 '
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.RDelKbn = 0 '
                + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		if (EOF <> True) then
		begin
			cMem.Append;

// <142> 2007/02/20 H.Kawato Mod
//			sHojCD := FieldByName ('GCode').AsString;
			sHojCD := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: sFormat := '%'  + IntToStr(m_nCurCodeDigit) + 'd';
					1: sFormat := '%.' + IntToStr(m_nCurCodeDigit) + 'd';
				end;

				sHojCD := Format (sFormat,[StrToInt64(Trim(sHojCD))]);
			end;
// <142> 2007/02/20 H.Kawato Mod Start
{
			cMem.FieldByName('PayNCode'   ).AsFloat   := FieldByName('PayNCode' ).AsFloat;		// 補助ｺｰﾄﾞ
			cMem.FieldByName('HojCode'    ).AsString  := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString  := FieldByName('GCode'    ).AsString;	    // 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString  := FieldByName('NMK'      ).AsString;	    // 補助名称
			cMem.FieldByName('RenChar'    ).AsString  := FieldByName('Renso'    ).AsString;	    // 連想
}
			cMem.FieldByName('PayNCode'   ).AsFloat   := FieldByName('PayNCode' ).Value;		// 補助ｺｰﾄﾞ
			cMem.FieldByName('HojCode'    ).AsString  := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString  := FieldByName('PayCode'  ).Value;        // 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString  := FieldByName('PayName'  ).Value;        // 補助名称
			cMem.FieldByName('RenChar'    ).AsString  := FieldByName('Renso'    ).Value;	    // 連想

            cMem.FieldByName('PayPtnNo'   ).AsInteger := FieldByName('PayPtnNo' ).Value;        // 条件ﾊﾟﾀｰﾝNo

            sHojCD := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PrjNCode'  ).AsFloat  := FieldByName('PrjNCode'   ).Value;        // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            cMem.FieldByName('PrjGCode'  ).AsString := sHojCD;                                  // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PrjName'   ).AsString := FieldByName('PrjName').Value         // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	cMem.FieldByName('PrjName'   ).AsString := 'その他';

            sHojCD := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            cMem.FieldByName('PjSubGCode').AsString := sHojCD;                                  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                cMem.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			                            // 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		                            // 依頼口座
			   (FieldByName('IraiAccNo').Value <> 0) then   		                            // 依頼口座
			begin
				cMem.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
				sBankName := FieldByName('BANK').AsString;	    // 銀行名称
				case FieldByName('YOKIN').AsInteger of			// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				cMem.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				cMem.FieldByName('AccInfo').AsString := '';
{
			if FieldByName('BankCode').IsNull = False then			// 銀行ｺｰﾄﾞ
				cMem.FieldByName('BankCode' ).AsInteger := FieldByName('BankCode' ).AsInteger;
			if FieldByName('BkBraCode').IsNull = False then			// 支店ｺｰﾄﾞ
				cMem.FieldByName('BkBraCode').AsInteger := FieldByName('BkBraCode').AsInteger;
}
			if FieldByName('BankCode').IsNull = False then			    // 銀行ｺｰﾄﾞ
            begin
  				cMem.FieldByName('BankCode'  ).AsInteger := FieldByName('BankCode'  ).AsInteger;
  				cMem.FieldByName('BankNCode' ).AsFloat   := FieldByName('BankNCode' ).AsFLoat;
            end;
			if FieldByName('BranchCode').IsNull = False then			// 支店ｺｰﾄﾞ
            begin
				cMem.FieldByName('BkBraCode').AsInteger := FieldByName('BranchCode' ).AsInteger;
				cMem.FieldByName('BranchNCode').AsFloat := FieldByName('BranchNCode').AsFloat;
            end;

			cMem.FieldByName('BankName'	    ).AsString  := FieldByName('BankName'	    ).AsString;	// 銀行名称
			cMem.FieldByName('BankKanaName' ).AsString  := FieldByName('BankKana'       ).AsString;	// ｶﾅ銀行名称
			cMem.FieldByName('BkBraName'	).AsString  := FieldByName('BranchName'	    ).AsString;	// 支店名称
			cMem.FieldByName('BraKanaName'  ).AsString  := FieldByName('BranchKana'     ).AsString;	// ｶﾅ支店名称
			cMem.FieldByName('TransKanaName').AsString  := FieldByName('TransKanaName'  ).AsString;	// ｶﾅ振込先名
			// 預金種別
			if FieldByName('Acckbn').IsNull = True then
				cMem.FieldByName('AccData').AsInteger := 1
			else
				cMem.FieldByName('AccData').AsInteger := FieldByName('Acckbn').AsInteger;
																									// 口座番号
			cMem.FieldByName('AccNo'		).AsString  := fnGetEditedAccountNumber(FieldByName('AccNo').AsString);
			cMem.FieldByName('ChargeData'   ).AsInteger := FieldByName('ChargeFutan').AsInteger;	// 手数料負担区分
			cMem.FieldByName('ChargeKbnData').AsInteger := FieldByName('ChargeKbn'	).AsInteger;	// 手数料計算区分
			cMem.FieldByName('TransKbnData' ).AsInteger := FieldByName('TransKbn'	).AsInteger;	// 振込方法
			cMem.FieldByName('FBSetData'    ).AsInteger := FieldByName('FBSet'		).AsInteger;	// FB区分
			cMem.FieldByName('EDIInfo'      ).AsString  := FieldByName('EdiInfo'	).AsString;		// EDI情報
			cMem.FieldByName('AiteNo1'      ).AsString  := FieldByName('AiteNo1'	).AsString;		// 顧客ｺｰﾄﾞ1
			cMem.FieldByName('AiteNo2'      ).AsString  := FieldByName('AiteNo2'	).AsString;		// 顧客ｺｰﾄﾞ2
			cMem.FieldByName('Site'         ).AsInteger := FieldByName('Site'		).AsInteger;	// サイト

			cMem.Post;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	手形1ﾚｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/12/04
//*		Parameter	:	cMem	:	処理対象MemData
//*						sCD		:	支払先ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
//<142> procedure TJNTCRP004007f.fnGetDraftOneRecordInfo(cMem: TdxMemData; sCD: String);
procedure TJNTCRP004007f.fnGetDraftOneRecordInfo(cMem: TdxMemData; sCD: String; iPN: Integer);
var
	sHojCD	    : String;
	sFormat	    : String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode,DI.Site,DI.TegBunkatuMax,DI.TegYusouKbn,DI.TegYusouFutan');
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo');
		SQL.Add(',MA.SimpleName as BANK ');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.PayPtnNo = DI.PayPtnNo ');  // <142> Add
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelKbn = 0 AND AI.NCode = MA.BankNCode) ');
		SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode)   '); // <121>
		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 3 AND MT.GCode = :GC  ');
		SQL.Add('  AND PD.PayPtnNo  = :PN ');       // <142> Add
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');

		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('GC').AsString  := sCD;
		ParamByName('PN').AsInteger := iPN;         // <142> Add
}
        strSQL := 'SELECT '
                + ' ISNULL(PD.PayNCode, 0) AS PayNCode'                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode'                  //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso'                    //連想
                + ',ISNULL(MT.NMK, '''') AS PayName'                    //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode'                 //依頼先内部ｺｰﾄﾞ
                + ',ISNULL(DI.Site, 0) AS Site'                         //サイト
                + ',ISNULL(DI.TegBunkatuMax, 0) AS TegBunkatuMax'       //手形分割枚数
                + ',ISNULL(DI.TegYusouKbn, 0) AS TegYusouKbn'           //手形郵送区分
                + ',ISNULL(DI.TegYusouFutan, 0) AS TegYusouFutan'       //手形郵送料負担区分
                + ',ISNULL(AI.Acckbn, 0) as YOKIN'                      //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA'                     //口座番号
                + ',ISNULL(AI.GCode, 0) as IraiAccNo'                   //依頼先内部ｺｰﾄﾞ
                + ',ISNULL(MA.SimpleName, '''') as BANK '               //銀行名称
// <196> ADD-STR
                + ',ISNULL(AI.LayoutInfo, '''') AS LayoutInfo '         //レイアウト情報
                + ',ISNULL(DI.ERKbn, '''') as TegERKbn '                // 電子債権採用区分
                + ',ISNULL(PS.BankNCode, 0) As BankNCode '              //本店内部ｺｰﾄﾞ
                + ',ISNULL(DI.BkBraNCode, 0) As BranchNCode '           //支店内部ｺｰﾄﾞ
                + ',ISNULL(PF.BankCode, 0) AS BankCode '                //本店外部ｺｰﾄﾞ
                + ',ISNULL(PF.BankName, '''') AS BankName '             //本店名
                + ',ISNULL(PF.BankKana, '''') AS BankKana '             //本店ｶﾅ
                + ',ISNULL(PS.BranchCode, 0) AS BranchCode '            //支店外部ｺｰﾄﾞ
                + ',ISNULL(PS.BranchName, '''') AS BranchName '         //支店名
                + ',ISNULL(PS.BranchKana, '''') AS BranchKana '         //支店ｶﾅ
                + ',ISNULL(DI.TransKanaName, '''') AS TransKanaName '   //ｶﾅ振込先名
                + ',ISNULL(DI.Acckbn, 1) AS Acckbn '                    //預金種目
                + ',ISNULL(DI.AccNo, '''') AS AccNo '                   //口座番号
                + ',ISNULL(DI.ChargeFutan, 1) AS ChargeFutan '          //手数料負担
                + ',ISNULL(DI.VFree1, '''') as VFree1 '                 //フリー項目
                + ',ISNULL(DI.VFree2, '''') as VFree2 '
                + ',ISNULL(DI.VFree3, '''') as VFree3 '
                + ',ISNULL(DI.VFree4, '''') as VFree4 '
                + ',ISNULL(DI.VFree5, '''') as VFree5 '
// <196> ADD-END
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + ' ON (DI.MasterKbn = PD.MasterKbn '
                + ' AND DI.PayNCode = PD.PayNCode '
                + ' AND PD.PayPtnNo = DI.PayPtnNo '
                + ' AND DI.Edaban = 1 '
                + ' AND DI.RDelKbn = 0 '    // <144> Add
                + ' AND PD.HouHou = DI.ShiharaiSyubetu) '
                + 'LEFT OUTER JOIN MTOKUI MT '
                + ' ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI '
                + ' ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo MA '
                + ' ON (MA.NCode = AI.BankNCode) '
// <196> ADD-STR
                + 'LEFT OUTER JOIN HAPBS PS '
                + 'ON (DI.BkBraNCode = PS.NCode)'
                + 'LEFT OUTER JOIN HAPBF PF '
                + 'ON (PS.BankNCode  = PF.NCode)'
// <196> ADD-END
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND MT.GCode = ' + AnsiQuotedStr(sCD, '''')
                + ' AND PD.PayPtnNo = ' + IntToStr(iPN)
                + ' AND PD.HouHou = 3 '
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.RDelKbn = 0 '    // <144> Add
                + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End
		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		if (EOF <> True) then
		begin
			cMem.Append;

// <142> 2007/02/20 H.Kawato Mod
//			sHojCD := FieldByName ('GCode').AsString;
			sHojCD := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: sFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: sFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				sHojCD := Format(sFormat,[StrToInt64(Trim(sHojCD))]);
			end;

// <142> 2007/02/20 H.Kawato Mod Start
{
			cMem.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'  ).AsFloat;
			cMem.FieldByName('HojCode'    ).AsString := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString := FieldByName('GCode'     ).AsString;	// 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString := FieldByName('NMK'       ).AsString;	// 補助名称
			cMem.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).AsString;	// 連想
}
			cMem.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'  ).Value;
			cMem.FieldByName('HojCode'    ).AsString := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'   ).Value;	// 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString := FieldByName('PayName'   ).Value;	// 補助名称
			cMem.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).Value;	// 連想

            cMem.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	// 条件ﾊﾟﾀｰﾝNo

            sHojCD := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PrjNCode' ).AsFloat   := FieldByName('PrjNCode'   ).Value;    // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            cMem.FieldByName('PrjGCode' ).AsString  := sHojCD;  							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PrjName'  ).AsString  := FieldByName('PrjName').Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	cMem.FieldByName('PrjName'  ).AsString  := 'その他';

            sHojCD := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            cMem.FieldByName('PjSubGCode').AsString := sHojCD;  							// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                cMem.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			// 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		// 依頼口座
			   (FieldByName('IraiAccNo').Value <> 0) then			// 依頼口座
			begin
				cMem.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
				sBankName := FieldByName('BANK').AsString;	// 銀行名称
				case FieldByName('YOKIN').AsInteger of		// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				cMem.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				cMem.FieldByName('AccInfo').AsString := '';

			cMem.FieldByName('Site'		    ).AsInteger := FieldByName('Site'         ).AsInteger;	// サイト
			cMem.FieldByName('Bunkatu'      ).AsInteger := FieldByName('TegBunkatuMax').AsInteger;	// 分割枚数
			cMem.FieldByName('YusoData'     ).AsInteger := FieldByName('TegYusouKbn'  ).AsInteger;	// 郵送区分
			cMem.FieldByName('YusoFutanData').AsInteger := FieldByName('TegYusouFutan').AsInteger;	// 郵送料負担区分
// <196> ADD-STR
			cMem.FieldByName('LayoutInfo'   ).AsString  := FieldByName('LayoutInfo'   ).AsString;   //レイアウト情報
// <201> MOD-STR
//			cMem.FieldByName('ERKbnData'    ).AsInteger := FieldByName('ERKbn'     ).AsInteger;     // 電子債権採用区分
			cMem.FieldByName('ERKbnData'    ).AsInteger := FieldByName('TegERKbn'     ).AsInteger;  // 電子債権採用区分
// <201> MOD-END
			if FieldByName('BankCode').IsNull = False then			    // 銀行ｺｰﾄﾞ
            begin
  				cMem.FieldByName('BankCode' ).AsInteger := FieldByName('BankCode'  ).AsInteger;
  				cMem.FieldByName('BankNCode').AsFloat   := FieldByName('BankNCode' ).AsFLoat;
            end;
			if FieldByName('BranchCode').IsNull = False then			// 支店ｺｰﾄﾞ
            begin
				cMem.FieldByName('BkBraCode').AsInteger := FieldByName('BranchCode' ).AsInteger;
				cMem.FieldByName('BranchNCode').AsFloat := FieldByName('BranchNCode').AsFloat;
            end;

			cMem.FieldByName('BankName'	    ).AsString := FieldByName('BankName'     ).AsString;	// 銀行名称
			cMem.FieldByName('BankKanaName' ).AsString := FieldByName('BankKana'     ).AsString;	// ｶﾅ銀行名称
			cMem.FieldByName('BkBraName'    ).AsString := FieldByName('BranchName'	 ).AsString;    // 支店名称
			cMem.FieldByName('BraKanaName'  ).AsString := FieldByName('BranchKana'   ).AsString;	// ｶﾅ支店名称
			cMem.FieldByName('TransKanaName').AsString := FieldByName('TransKanaName').AsString;	// ｶﾅ振込先名

			if FieldByName('Acckbn').IsNull = True then			        // 預金種目
				cMem.FieldByName('AccData').AsInteger  := 1
			else
				cMem.FieldByName('AccData').AsInteger  := FieldByName('Acckbn').AsInteger;
			cMem.FieldByName('AccNo'	    ).AsString  := fnGetEditedAccountNumber(FieldByName('AccNo').AsString); // 口座番号
            if FieldByName('ChargeFutan').AsInteger = 0 then            // 手数料負担区分
    			cMem.FieldByName('ChargeData').AsInteger := 1
            else
	    		cMem.FieldByName('ChargeData').AsInteger := FieldByName('ChargeFutan').AsInteger;

			cMem.FieldByName('VFree1'	    ).AsString  := FieldByName('VFree1').AsString;          // フリー項目
			cMem.FieldByName('VFree2'	    ).AsString  := FieldByName('VFree2').AsString;
			cMem.FieldByName('VFree3'	    ).AsString  := FieldByName('VFree3').AsString;
			cMem.FieldByName('VFree4'	    ).AsString  := FieldByName('VFree4').AsString;
			cMem.FieldByName('VFree5'	    ).AsString  := FieldByName('VFree5').AsString;
// <196> ADD-END
			cMem.Post;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	小切手1ﾚｺｰﾄﾞ情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/12/04
//*		Parameter	:	cMem	:	処理対象MemData
//*						sCD		:	支払先ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
//<142> procedure TJNTCRP004007f.fnGetCheckOneRecordInfo(cMem: TdxMemData; sCD: String);
procedure TJNTCRP004007f.fnGetCheckOneRecordInfo(cMem: TdxMemData; sCD: String; iPN: Integer);
var
	sHojCD		: String;
	sFormat		: String;
	sBankName	: String;
    sYokin		: String;
	sKoza		: String;
    strSQL      : String;   // <142> 2007/02/20 H.Kawato Add
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT PD.PayNCode,MT.GCode,MT.Renso,MT.NMK');
		SQL.Add(',DI.AccNCode,DI.TegYusouKbn,DI.TegYusouFutan');
		SQL.Add(',AI.Acckbn as YOKIN,AI.AccNo as KOZA,AI.GCode as IraiAccNo');
		SQL.Add(',MA.SimpleName as BANK ');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.PayPtnNo = DI.PayPtnNo ');  // <142> Add
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
// <121>		SQL.Add('LEFT OUTER JOIN HojyoMA MA ON (MA.MasterKbn = 21 AND MA.RDelkbn = 0 AND AI.NCode = MA.BankNCode) ');
		SQL.Add('LEFT OUTER JOIN BankInfo MA ON (MA.NCode = AI.BankNCode) ');   // <121>
		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = 4 AND MT.GCode = :GC   ');
		SQL.Add('  AND PD.PayPtnNo  = :PN ');       // <142> Add
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');

		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('GC').AsString  := sCD;
		ParamByName('PN').AsInteger := iPN;         // <142> Add
}
		strSQL := 'SELECT '
                + ' ISNULL(PD.PayNCode, 0) AS PayNCode'                 //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode'                  //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso'                    //連想
                + ',ISNULL(MT.NMK, '''') AS PayName'                    //支払先名称
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '                //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '               //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '           //ﾌﾟﾛｼﾞｪｸﾄ名称
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '             //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '         //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '     //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'    //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode'                 //依頼先内部ｺｰﾄﾞ
                + ',ISNULL(DI.TegYusouKbn, 0) AS TegYusouKbn'           //小切手郵送区分
                + ',ISNULL(DI.TegYusouFutan, 0) AS TegYusouFutan'       //小切手郵送料負担区分
                + ',ISNULL(AI.Acckbn, 0) as YOKIN'                      //預金種目
                + ',ISNULL(AI.AccNo, '''') as KOZA'                     //口座番号
                + ',ISNULL(AI.GCode, '''') as IraiAccNo'                //依頼先口座ｺｰﾄﾞ
                + ',ISNULL(MA.SimpleName, '''') as BANK '               //銀行名称
                + 'FROM PayPtnDtl PD '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + 'ON (DI.MasterKbn = PD.MasterKbn '
                + 'AND DI.PayNCode = PD.PayNCode '
                + 'AND PD.PayPtnNo = DI.PayPtnNo '
                + 'AND DI.Edaban  = 1 '
                + 'AND DI.RDelKbn = 0 ' // <144> Add
                + 'AND PD.HouHou = DI.ShiharaiSyubetu) '
                + 'LEFT OUTER JOIN MTOKUI MT '
                + 'ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.PayPtnNo = PD.PayPtnNo '
                + ' AND PT.RDelKbn = 0) '
                + 'LEFT OUTER JOIN AccInfo AI '
                + 'ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) '
                + 'LEFT OUTER JOIN BankInfo MA '
                + 'ON (MA.NCode = AI.BankNCode) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE PD.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND MT.GCode = ' + AnsiQuotedStr(sCD, '''')
                + ' AND PD.PayPtnNo = ' + IntToStr(iPN)
                + ' AND PD.HouHou = 4 '
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.RDelKbn = 0 '    // <144> Add
                + 'ORDER BY MT.SumKbn,MT.GCode,SortPrjGCode,SortPjSubGCode ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		if (EOF <> True) then
		begin
			cMem.Append;

// <142> 2007/02/20 H.Kawato Mod
//			sHojCD := FieldByName ('GCode').AsString;
			sHojCD := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: sFormat := '%'  + IntToStr(m_nCurCodeDigit) + 'd';
					1: sFormat := '%.' + IntToStr(m_nCurCodeDigit) + 'd';
				end;

				sHojCD := Format(sFormat,[StrToInt64(Trim(sHojCD))]);
			end;

// <142> 2007/02/20 H.Kawato Mod Start
{
            cMem.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'  ).AsFloat;
			cMem.FieldByName('HojCode'    ).AsString := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString := FieldByName('GCode'     ).AsString;	// 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString := FieldByName('NMK'       ).AsString;	// 補助名称
			cMem.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).AsString;	// 連想
}
            cMem.FieldByName('PayNCode')   .AsFloat  := FieldByName('PayNCode'  ).AsFloat;  // 支払先内部ｺｰﾄﾞ
			cMem.FieldByName('HojCode'    ).AsString := sHojCD;								// 補助ｺｰﾄﾞ
			cMem.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'   ).AsString;	// 補助ｺｰﾄﾞ
			cMem.FieldByName('SName'      ).AsString := FieldByName('PayName'   ).AsString;	// 補助名称
			cMem.FieldByName('RenChar'    ).AsString := FieldByName('Renso'     ).AsString;	// 連想

            cMem.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'  ).Value;	// 条件ﾊﾟﾀｰﾝNo

            sHojCD  := FieldByName ('PrjGCode').Value;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PrjNCode' ).AsFloat   := FieldByName('PrjNCode'   ).Value;	// ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            cMem.FieldByName('PrjGCode' ).AsString  := sHojCD;  							// ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PrjName'  ).AsString  := FieldByName('PrjName').Value     // ﾌﾟﾛｼﾞｪｸﾄ名称
            else
               	cMem.FieldByName('PrjName'  ).AsString  := 'その他';

            sHojCD := FieldByName ('PjSubGCode').Value;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: sFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: sFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(sHojCD) <> '') then
            		sHojCD := Format (sFormat, [StrToInt64 (Trim (sHojCD))]);
            end;
            cMem.FieldByName('PjSubNCode').AsFloat  := FieldByName('PjSubNCode' ).Value;    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            cMem.FieldByName('PjSubGCode').AsString := sHojCD;  				            // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ

            if (Trim(sHojCD) <> '') then
            	cMem.FieldByName('PjSubName' ).AsString := FieldByName('PjSubName'  ).Value	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            else
                cMem.FieldByName('PjSubName' ).AsString := 'その他';
// <142> 2007/02/20 H.Kawato Mod End

// <142> 2007/02/20 H.Kawato Mod
//			if FieldByName('IraiAccNo').IsNull = False then			// 依頼口座
			if (FieldByName('IraiAccNo').IsNull = False) and		// 依頼口座
			   (FieldByName('IraiAccNo').Value <> 0) then			// 依頼口座
			begin
				cMem.FieldByName('IraiAccNo').AsInteger := FieldByName('IraiAccNo').AsInteger;
				sBankName := FieldByName('BANK').AsString;	// 銀行名称
				case FieldByName('YOKIN').AsInteger of		// 預金種別
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				sKoza := fnGetEditedAccountNumber(FieldByName('KOZA').AsString);	// 口座番号
				cMem.FieldByName('AccInfo').AsString := sBankName+'／'+sYokin+'／'+sKoza;
			end
			else
				cMem.FieldByName('AccInfo').AsString := '';

			cMem.FieldByName('YusoData'     ).AsInteger := FieldByName('TegYusouKbn'  ).AsInteger;	// 郵送区分
			cMem.FieldByName('YusoFutanData').AsInteger := FieldByName('TegYusouFutan').AsInteger;	// 郵送料負担区分

			cMem.Post;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	ﾏｽﾀ付箋管理情報削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sHojCD	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordMFusenInfo(ExNCode: Extended): Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('DELETE FROM MFusenInfo WHERE MasterKbn = :MK AND NCode = :HNC');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('HNC').AsFloat	 := ExNCode;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	支払条件詳細ﾏｽﾀ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sHojCD	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
// <142> 2007/02/20 H.Kawato Mod
//function TJNTCRP004007f.fnDeleteMasterRecordPayPtnDtl(ExNCode: Extended): Boolean;
function TJNTCRP004007f.fnDeleteMasterRecordPayPtnDtl(ExNCode: Extended; iPayPtnNo: Integer): Boolean;
var
    strSQL  : String;   // <142> Add
begin

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('DELETE FROM PayPtnDtl WHERE MasterKbn = :MK AND PayNCode = :NC ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('NC').AsFloat	 := ExNCode;
}
        strSQL := 'DELETE FROM PayPtnDtl '
                + 'WHERE PayPtnNo = ' + IntToStr(iPayPtnNo)
                + '  AND PayNCode = ' + FloatToStr(ExNCode)
                + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	支払詳細情報ﾏｽﾀ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sHojCD	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordPayDetailInfo(ExNCode: Extended): Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('DELETE FROM PayDetailInfo WHERE MasterKbn = :MK AND PayNCode = :PNC ');
		ParamByName ('MK' ).AsInteger := MASTER_CUSTOMER;
		ParamByName ('PNC').AsFloat	  := ExNCode;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	名寄せ情報ﾏｽﾀ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sHojCD	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordPayNayoseInfo(ExNCode: Extended): Boolean;
var
	nKbn	: Integer;

// <120>    sHojCD :String;

begin
    Result  :=  FALSE;
    nKbn    :=  0;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT NayoseKbn FROM PayNayoseInfo WHERE MasterKbn = :MK AND NayoseSyu = 1 AND PayNCode = :HC');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName ('HC').AsFloat	 := ExNCode;

		if (not Open ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if EOF <> True then
		begin
			nKbn := FieldByName('NayoseKbn').AsInteger;
		end;

		if nKbn = 1 then
		begin
			Close();
			SQL.Clear();
			SQL.Add('DELETE FROM PayNayoseInfo WHERE MasterKbn = :MK AND NayoseSyu = 1 AND PayNCode = :HC');
			ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
			ParamByName ('HC').AsFloat	 := ExNCode;

			if	(not ExecSQL ()) then
			begin
				fnErrorMessageDsp(m_Qe);
				Result := FALSE;
				Exit;
			end;
		end;
	end;

	// 名寄せ親の時
	if nKbn = 2 then
	begin
		// 名寄せ親削除
		if fnDeletePayNayoseInfo(ExNCode,0,NAYOSE_PARENT) = False then exit;
		// 親に付いていた子も全て削除
		if fnDeletePayNayoseInfo(0,ExNCode,NAYOSE_ALL) = False then exit;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	相殺情報ﾏｽﾀ削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sHojCD	:	補助ｺｰﾄﾞ
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteMasterRecordPayOffsetInfo(ExNCode: Extended): Boolean;
begin
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('DELETE FROM PayOffsetInfo WHERE MasterKbn = :MK AND PayNCode = :PNC');
		ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;
		ParamByName('PNC').AsFloat   := ExNCode;

		if	(not ExecSQL ()) then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;

	Result := TRUE;																	// 正常終了
end;

//**********************************************************************
//*		Proccess	:	ﾃﾞｰﾀﾛｰﾄﾞ処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/28
//*		Parameter	:	nSelect	:	ﾛｰﾄﾞ対象NO
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnDataLoad(nSelect: Integer);
begin
	case nSelect of
// <142> 2007/02/20 H.Kawato Add Start
		DISPOSE_PAYWAY:		// 支払方法
		begin
			fnGetPayWayInfo();			// 支払方法情報取得
			m_DataLoadFlg.PayWay := True;
		end;
// <142> 2007/02/20 H.Kawato Add End
		DISPOSE_RATIO:		// 方法(比率)
		begin
			fnGetPayWayRatioInfo();			// 方法(比率)情報取得
			m_DataLoadFlg.Hiritsu := True;
// <142> 2007/02/20 H.Kawato Add Start
//<172> Del
//          if (m_iProAdoptKbn = 1) then
//          begin
//<172> Del
                SetGridShousai(nSelect);
                fnGetPayWayShousaiInfo();
//          end;							//<172> Del
// <142> 2007/02/20 H.Kawato Add End
		end;
		DISPOSE_FIXED:		// 方法(定額)
		begin
        	fnGetPayWayFixedInfo();			// 方法(定額)情報取得
			m_DataLoadFlg.Teigaku := True;
// <142> 2007/02/20 H.Kawato Add Start
//<172> Del
//          if (m_iProAdoptKbn = 1) then
//          begin
//<172> Del
                SetGridShousai(nSelect);
                fnGetPayWayShousaiInfo();
//          end;							//<172> Del
// <142> 2007/02/20 H.Kawato Add End
        end;
		DISPOSE_TRANSFER:	// 振込
		begin
			fnGetFurikomiInfo();			// 振込情報取得
			m_DataLoadFlg.Furi := True;
		end;
//<GA001>ST
    	DISPOSE_TRANSFER_GD:
		begin
			fnGetFurikomiInfoGD();			// 電信送金取得
			m_DataLoadFlg.FuriGD := True;
		end;
		DISPOSE_TRANSFER_GT:
		begin
			fnGetFurikomiInfoGT();			// 為替手形取得
			m_DataLoadFlg.FuriGT := True;
		end;
        DISPOSE_TRANSFER_GK:
		begin
			fnGetFurikomiInfoGK();			// 送金小切手取得
			m_DataLoadFlg.FuriGK := True;
		end;
//<GA001>ED

		DISPOSE_DATETRAN:	// 期日指定振込
		begin
			fnGetDateFurikomiInfo();		// 期日指定振込情報取得
			m_DataLoadFlg.DateFuri := True;
		end;
		DISPOSE_DRAFT:		// 手形
		begin
			fnGetDraftInfo();				// 手形情報取得
			m_DataLoadFlg.Draft := True;
		end;
		DISPOSE_CHECK:		// 小切手
		begin
			fnGetCheckInfo();				// 小切手情報取得
			m_DataLoadFlg.Check := True;
		end;
		DISPOSE_OFFSET:		// 相殺
		begin
			fnGetOffsetInfo();				// 相殺情報
			m_DataLoadFlg.Offset := True;
		end;
		DISPOSE_OTHER:		// その他
		begin
			fnGetOtherInfo();				// その他情報
			m_DataLoadFlg.Other := True;
		end;
		DISPOSE_NAYOSEOYA:	// 名寄せ
		begin
			fnMakeNayoseTree();				// 名寄せ情報(Tree)
			fnGetNayoseInfo();				// 名寄せ情報(Grid)
			m_DataLoadFlg.Nayose := True;
		end;
//<GA001>
		DISPOSE_KHNSET_G:		            // 可変項目
		begin
			fnGetKhnsetGInfo();				// 可変項目情報
			m_DataLoadFlg.KhnsetG := True;
		end;
//<GA001>


	end;
end;


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
//									印刷処理
//
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//-----------------------------------------------------------------------------
// BPrintClick()
//	< 印刷処理 >
//      PARAM   : Sender: TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.BPrintClick(Sender: TObject);
var
    lvRet           :   Integer;
    JNTPDlg         :   TFrmJNTPDialog;
begin

    // 販売ｼｽﾃﾑｴﾘｱﾎﾟｲﾝﾀの設定
    m_cJNTArea.SetSelAppRecord;

    // 範囲ﾀﾞｲｱﾛｸﾞを表示する
    JNTPDlg := TFrmJNTPDialog.Create(Self, @uvHani);
    lvRet   := JNTPDlg.ShowModal;
    JNTPDlg.Free();
    //結果を判断する
    case lvRet of
     0: //ｷｬﾝｾﾙ
     	begin
	     	Exit;
        end;
     1:	//通常
     	begin
            //////////////////////////////////
            //
            // uvHani.pvrPattern は、JNTCRP004007Dlg.Iniファイルの登録の順番
            // JNTCRP004007Lに引き渡すパラメータとは異なるので注意が必要！！！！
            //
            //      ＜JNTCRP004007Dlg.Ini>              <JNTCRP004007L>
            //      0=支払先登録リスト                  0=支払先登録リスト
            //      1=支払方法登録リスト(比率)          1=支払方法登録リスト(比率)
            //      2=支払方法登録リスト(定額)          2=支払方法登録リスト(定額)
            //      3=振込支払情報登録リスト            3=振込支払情報登録リスト
            //      4=期日指定振込支払情報登録リスト    4=期日指定振込支払情報登録リスト
            //      5=手形情報登録リスト                5=手形情報登録リスト
            //      6=小切手情報登録リスト              6=小切手情報登録リスト
            //      7=相殺情報登録リスト                7=相殺情報登録リスト
            //      8=外貨基本情報登録リスト            8=支払先登録リスト（プロジェクト用）
            //      9=電信送金情報登録リスト            9=支払方法登録リスト(比率)（プロジェクト用）
            //      10=為替手形情報登録リスト           10=支払方法登録リスト(定額)（プロジェクト用）
            //      11=送金小切手情報登録リスト         11=振込支払情報登録リスト（プロジェクト用）
            //      12=可変項目情報登録リスト           12=期日指定振込支払情報登録リスト（プロジェクト用）
            //                                          13=手形情報登録リスト（プロジェクト用）
            //                                          14=小切手情報登録リスト（プロジェクト用）
            //                                          15=相殺情報登録リスト（プロジェクト用）
            //                                          16=外貨基本情報登録リスト
            //                                          17=電信送金情報登録リスト
            //                                          18=為替手形情報登録リスト
            //                                          19=送金小切手情報登録リスト
            //                                          20=可変項目情報登録リスト
            //
            //////////////////////////////////




            // ↓↓↓<119>
            case uvHani.pvrPattern of
                // 支払先登録ﾘｽﾄ
                0:  begin
                        fnPrintCheckListRealTotal(Tab.Items.Selected);  // 引き数未使用（広田）
                        PrtParam.TargetMD   :=  MemRealTotal;
                    end;
                // 支払先方法ﾘｽﾄ(比率／定額)
                1,2:begin
                        fnPrintCheckListPayMethods(uvHani.pvrPattern);
        				PrtParam.TargetMD   :=  MemPayMethods;
                    end;
                // 振込支払情報登録ﾘｽﾄ／期日指定振込支払情報登録ﾘｽﾄ
                3,4:begin
                        fnPrintCheckListFurikomi(uvHani.pvrPattern);
				        PrtParam.TargetMD   :=  MemFurikomi;
                    end;
                // 手形情報登録ﾘｽﾄ／小切手情報登録ﾘｽﾄ
                5,6:begin
                        fnfnPrintCheckListDraftCheck(uvHani.pvrPattern);
        				PrtParam.TargetMD   :=  MemDraftCheck;
                    end;
                // 相殺情報登録ﾘｽﾄ
                7:  begin
                        fnPrintCheckListOffset();
        				PrtParam.TargetMD   :=  MemPrintOffset;
                    end;

//<GA001>ST
                // 外貨基本情報登録ﾘｽﾄ
                8: begin
                        fnPrintCheckListKihonG();
                        PrtParam.TargetMD   :=  MemKihonGP;
                    end;
                // 電信送金、為替手形、送金小切手登録ﾘｽﾄ
                9,10,11: begin
                        fnPrintCheckListFurikomiGP(uvHani.pvrPattern);
				        PrtParam.TargetMD   :=  MemFuri_GP;
                    end;
                // 可変項目登録ﾘｽﾄ
                12: begin
                        fnPrintCheckListKhnsetG();
				        PrtParam.TargetMD   :=  MemKhnset_GP;
                    end;
//<GA001>ED
		    end;
            // ↑↑↑<119>

// <142> 2007/02/20 H.Kawato Add Start
//<GA001>ST
//外貨対応で、パラメータを調整し直す
            if (uvHani.pvrPattern >= 8) and (uvHani.pvrPattern <= 12) then
            begin
                uvHani.pvrPattern := uvHani.pvrPattern + 8;
            end;
//<GA001>ED


            if (uvHani.pvrPattern >= 0) and (uvHani.pvrPattern <= 7) then
            begin
                if (m_iProAdoptKbn = 1) then
                    uvHani.pvrPattern   := uvHani.pvrPattern + 8;
            end;    //<GA001>ADD
// <142> 2007/02/20 H.Kawato Add End

            // <PRN>
            with PrtParam do
			begin
				Para		:=  uvHani;
				TargetQry	:=  DmqPrint;
				CorpSys		:=  uvSelSys;
                JNTArea     :=  m_cJNTArea;
                TargetParam	:=  nil;
	    	    TargetStr	:=  '';
    		    TargetInt	:=  0;
			end;

            //印刷する<PRN>
            PrintAppEntry(nil,nil,1,PrtParam,ArrHdl);

        end;
    end;

    // 財務ｼｽﾃﾑｴﾘｱﾎﾟｲﾝﾀへ戻す
    m_cJNTArea.SetMasAppRecord;
end;

//-----------------------------------------------------------------------------
// fnPrintCheckListRealTotal()
//	< 支払先登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :   nSelect     0:実在 1:合計 … FXでは使用しません
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListRealTotal(nSelect: Integer);
var
	strHojCode  :   String;
	strFormat	:   String;
	Qry			:   TMQuery;
begin
	Qry :=   TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemRealTotal.Close();
	MemRealTotal.Open();

	with Qry do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
        SQL.Add('SELECT MT.NCode,MT.GCode,MT.Renso,MT.NM,MT.NMK,MF.FusenKbn,    '
            +   '       MF.FusenCmnt,PI.BunkaiKbn, PI.LetterKbn,DI.UketoriName  '
            +   '       ,PI.SateiKbn                                            '   // <126> Add
            +   'FROM MTOKUI MT                                                 '
            +   'LEFT OUTER JOIN MFusenInfo MF ON                               '
            +   '   (MF.NCOde = MT.NCode AND MF.MasterKbn=:MK)                  '
            +   'LEFT OUTER JOIN MTOKUI_PAY PI ON                               '
            +   '   (PI.BaseNCode=MT.NCode)                                     '
            +   'LEFT OUTER JOIN PayDetailInfo DI ON                            '
            +   '   (DI.MasterKbn=:MK AND DI.PayNCode=MT.NCode AND              '
            +   '    DI.ShiharaiSyubetu=1)                                      '
            +   'WHERE MT.RDelKbn=0 AND MT.HojyoKbn2=1 AND MT.TemplateKbn=0     '); // <102>
}
        SQL.Add('SELECT '
            +   ' ISNULL(MT.NCode, 0) As PayNCode '
            +   ',ISNULL(MT.GCode, '''') As GCode '
            +   ',ISNULL(MT.Renso, '''') As Renso '
            +   ',ISNULL(MT.NM, '''') As NM '
            +   ',ISNULL(MT.NMK, '''') As NMK '
            +   ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '
            +   ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '
            +   ',ISNULL(HM1.GCode, '''') AS PrjGCode '
            +   ',ISNULL(HM1.SimpleName, '''') AS PrjName '
            +   ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
            +   ',ISNULL(HM2.GCode, '''') AS PjSubGCode '
            +   ',ISNULL(HM2.SimpleName, '''') AS PjSubName '
            +   ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '
            +   ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode '
            +   ',ISNULL(MF.FusenKbn, 0) As FusenKbn '
            +   ',ISNULL(MF.FusenCmnt, '''') As FusenCmnt '
// <142> 2007/02/20 H.Kawato Mod
            +   ',ISNULL(PT.BunkaiKbn, 0) As BunkaiKbn '
//            +   ',PT.BunkaiKbn '  // <142-2> ReMod
            +   ',ISNULL(PI.BunkaiPtn, 0) As BunkaiPtn '
            +   ',ISNULL(DI.UketoriName, '''') As UketoriName'
            +   ',ISNULL(PI.SateiKbn, 0) As SateiKbn '
            +   ',ISNULL(PI.SateiCalcKbn, 0) As SateiCalcKbn '  // <155> 2007/12/25 H.Kawato Add
            +   ',ISNULL(PI.SateiCalc, 0) As SateiCalc '        // <155> 2007/12/25 H.Kawato Add
            +   'FROM MTOKUI MT '
            +   'LEFT OUTER JOIN PayPtnInfo PT '
            +   ' ON (PT.MasterKbn = :MK '
            +   ' AND PT.PayNCode = MT.NCode '
            +   ' AND PT.RDelKbn = 0) '
            +   'LEFT OUTER JOIN MFusenInfo MF ON '
            +   '(MF.NCOde = MT.NCode AND MF.MasterKbn=22) '
            +   'LEFT OUTER JOIN MTOKUI_PAY PI ON '
            +   '   (PI.BaseNCode=MT.NCode) '
            +   'LEFT OUTER JOIN PayDetailInfo DI ON '
            +   '   (DI.MasterKbn=22 AND '
            +   '    DI.PayNCode=MT.NCode AND '
            +   '    DI.PayPtnNo = PT.PayPtnNo AND '
            +   '    DI.Edaban  = 1 AND '
            +   '    DI.RDelKbn = 0 AND '                       // <144> Add
            +   '    DI.ShiharaiSyubetu=1)  '
            +   'LEFT OUTER JOIN HojyoMA HM1 '
            +   ' ON (HM1.MasterKbn = :PK '
            +   ' AND HM1.NCode = PT.PrjNCode '
            +   ' AND HM1.RDelKbn = 0) '
            +   'LEFT OUTER JOIN HojyoMA HM2 '
            +   ' ON (HM2.MasterKbn = :PSK '
            +   ' AND HM2.NCode = PT.PjSubNCode '
            +   ' AND HM2.RDelKbn = 0) '
            +   'WHERE MT.RDelKbn=0 '
            +   '  AND MT.HojyoKbn2=1 '
            +   '  AND MT.TemplateKbn=0 ');

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            SQL.Add(' AND PT.PayPtnNo = 1 ');
// <142> 2007/02/20 H.Kawato Mod End

		ParamByName('MK' ).AsInteger :=  MASTER_CUSTOMER;
		ParamByName('PK' ).AsInteger :=  m_iProjectKbn;         // <142> Add
		ParamByName('PSK').AsInteger :=  m_iProjSubKbn;         // <142> Add

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin

(*  <118>
            if ( uvHani.pvrStCode[0] <> '' ) and
               ( uvHani.pvrEdCode[0] =  '' ) then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExCode)   ');
                if ( m_nCurCodeAttribute <= 1 ) then
    			        ParamByName('ExCode').AsString  :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrStCode[0]))])
                else    ParamByName('ExCode').AsString  :=  uvHani.pvrStCode[0];
            end
            else if ( uvHani.pvrStCode[0] =  '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (MT.GCode <= :ExCode)   ');
                if ( m_nCurCodeAttribute <= 1 ) then
        			    ParamByName('ExCode').AsString :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrEdCode[0]))])
                else    ParamByName('ExCode').AsString :=  uvHani.pvrEdCode[0];
            end
            else if ( uvHani.pvrStCode[0] <> '' ) and
                    ( uvHani.pvrEdCode[0] <> '' ) then
            begin
                SQL.Add('  AND  (mt.GCode >= :ExStCode)     ');
			    SQL.Add('  AND  (mt.GCode <= :ExEdCode)     ');
                if ( m_nCurCodeAttribute <= 1 ) then
                begin
        			ParamByName('ExStCode').AsString   :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrStCode[0]))]);
        			ParamByName('ExEdCode').AsString   :=  Format('%.16d', [StrToInt64(Trim(uvHani.pvrEdCode[0]))]);
                end
                else
                begin
                    ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
        			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
                end;
            end;
*) // <118>

// <156> 2008/01/15 H.Kawato Mod Start
{
			// ↓↓↓<118>
            SQL.Add('  AND  (mt.GCode >= :ExStCode)     ');
		    SQL.Add('  AND  (mt.GCode <= :ExEdCode)     ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
			// ↑↑↑<118>
}
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (mt.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (mt.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
// <156> 2008/01/15 H.Kawato Mod End
        end;

        // 出力順序
// <142> 2007/02/20 H.Kawato Mod Start
{
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY MT.GCode ')
        else    SQL.Add('ORDER BY MT.Renso, MT.GCode ');
}
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY GCode, SortPrjGCode, SortPjSubGCode ')
        else    SQL.Add('ORDER BY Renso, GCode, SortPrjGCode, SortPjSubGCode ');
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			fnErrorMessageDsp(Qry);
			Qry.Close();
			Qry.Free();
            Exit;
		end;

		while (not EOF) do
		begin
			strHojCode  :=  FieldByName ('GCode').AsString;
			if ( m_nCurCodeAttribute <= 1 ) then
			begin
				case (m_nCurCodeAttribute) of
					0:  strFormat   :=  '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:  strFormat   :=  '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;
				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemRealTotal.Append;
//			MemRealTotal.FieldByName('grTag').Assign(fnGetBitmapSelectedTag(GetFld('FusenKbn').AsInteger)); // <142> Del

			MemRealTotal.FieldByName('GCode')           .AsString  := strHojCode;						// 支払先ｺｰﾄﾞ   <142> Add
			MemRealTotal.FieldByName('strHojCode')      .AsString  := strHojCode;						// 支払先ｺｰﾄﾞ
			MemRealTotal.FieldByName('strAssociation')  .AsString  := GetFld('Renso')       .AsString;	// 連想
			MemRealTotal.FieldByName('strName')         .AsString  := GetFld('NM')          .AsString;	// 正式名称
			MemRealTotal.FieldByName('strNameSimple')   .AsString  := GetFld('NMK')         .AsString;	// 簡略名称

// <142> 2007/02/20 H.Kawato Add Start
            MemRealTotal.FieldByName('PayPtnNo').AsInteger  := GetFld('PayPtnNo').Value;        // 条件ﾊﾟﾀｰﾝNo

            // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
            if (m_iProAdoptKbn = 1) then
            begin
    			MemRealTotal.FieldByName('PrjHojyoName').AsString  := m_sProjectTitle;          // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add
                
			    strHojCode  :=  FieldByName ('PrjGCode').Value;
                if ( m_iPrjCodeAttr <= 1 ) and (Trim(strHojCode) <> '') then
                begin
                	case (m_iPrjCodeAttr) of
                		0:  strFormat   :=  '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
                		1:  strFormat   :=  '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
                	end;
                	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                end;

                MemRealTotal.FieldByName('PrjNCode').AsFloat   := GetFld('PrjNCode').Value;     // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                MemRealTotal.FieldByName('PrjGCode').AsString  := strHojCode;				    // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                
                if (Trim(strHojCode) <> '') then
                    MemRealTotal.FieldByName('PrjName' ).AsString  := GetFld('PrjName').Value   // ﾌﾟﾛｼﾞｪｸﾄ名称
                else
                    MemRealTotal.FieldByName('PrjName' ).AsString  := 'その他';                 // ﾌﾟﾛｼﾞｪｸﾄ名称

                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用あり
                if (m_iProAdoptKbn = 1) then
                begin
        			MemRealTotal.FieldByName('PjSubHojyoName').AsString  := m_sPjSubTitle;      // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ補助名称 <142> Add

                    strHojCode  :=  FieldByName ('PjSubGCode').Value;
                    if ( m_iPjSubCodeAttr <= 1 ) and (Trim(strHojCode) <> '') then
                    begin
                    	case (m_iPjSubCodeAttr) of
                    		0:  strFormat   :=  '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
                    		1:  strFormat   :=  '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
                    	end;
                    	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                    end;

                    MemRealTotal.FieldByName('PjSubNCode').AsFloat   := GetFld('PjSubNCode').Value;     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                    MemRealTotal.FieldByName('PjSubGCode').AsString  := strHojCode;                     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ

                    if (Trim(strHojCode) <> '') then
                        MemRealTotal.FieldByName('PjSubName' ).AsString  := GetFld('PjSubName').Value   // ﾌﾟﾛｼﾞｪｸﾄ名称
                    else
                        MemRealTotal.FieldByName('PjSubName' ).AsString  := 'その他';                   // ﾌﾟﾛｼﾞｪｸﾄ名称
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End

// <142-2> 2007/08/23 H.Kawato Del Start 初期処理でレコードを作製、かつ次レコードの取得ができなくなる為
{
			if ( GetFld('BunkaiKbn').IsNull ) then
// <142> 2007/02/20 H.Kawato Mod Start
//				fnUpdatePayPtnInfo(Qry,GetFld('NCode').AsFloat);
            begin
				fnUpdatePayPtnInfo(GetFld('NCode').AsFloat);
				fnUpdateDefPayPtnInfo(Qry,GetFld('NCode').AsFloat);
            end;
// <142> 2007/02/20 H.Kawato Mod End
}
// <142-2> 2007/08/23 H.Kawato Del End

			MemRealTotal.FieldByName('ApartData')       .AsInteger  := GetFld('BunkaiKbn')   .AsInteger;    // 分解方法
//			MemRealTotal.FieldByName('LetterData')      .AsInteger  := GetFld('LetterKbn')   .AsInteger;    // 通知書   <142> Del
			MemRealTotal.FieldByName('UketoriName')     .AsString   := GetFld('UketoriName') .AsString;	    // 受取人名称
			MemRealTotal.FieldByName('SateiData')       .AsInteger  := GetFld('SateiKbn')    .AsInteger;    // 査定方法 <126> Add
// <155> 2007/12/25 H.Kawato Add Start
			MemRealTotal.FieldByName('SateiCalcData')   .AsInteger  := GetFld('SateiCalcKbn').AsInteger;    // 査定金額計算区分
   			MemRealTotal.FieldByName('SateiCalcValue')  .AsCurrency := GetFld('SateiCalc')   .AsCurrency;   // 査定金額計算値

			case (GetFld('SateiCalcKbn').AsInteger) of
				1:      MemRealTotal.FieldByName ('strSateiCalcValueUnit').AsString    := '％';
				2:      MemRealTotal.FieldByName ('strSateiCalcValueUnit').AsString    := '円';
				else    MemRealTotal.FieldByName ('strSateiCalcValueUnit').AsString    := '';
			end;
// <155> 2007/12/25 H.Kawato Add End
			MemRealTotal.FieldByName('BunkaiPtnData')   .AsInteger  := GetFld('BunkaiPtn')   .AsInteger;    // 査定方法 <142> Add
            MemRealTotal.FieldByName('EOF').AsBoolean   := False;                                           // 最終行判定フラグ <142> Add

			MemRealTotal.Post;
			Next;
		end;
	end;

// <157> 2008/01/15 H.Kawato Add
    if (MemRealTotal.RecordCount > 0) then
    begin
// <157> 2008/01/15 H.Kawato Add

// <142> 2007/02/20 H.Kawato Add Start
        MemRealTotal.Last;
        MemRealTotal.Edit;
        MemRealTotal.FieldByName('EOF').AsBoolean   := True;
// <142> 2007/02/20 H.Kawato Add End

    	MemRealTotal.First;
    end;    // <157> Add

    Qry.Close();
    Qry.Free();

end;

//-----------------------------------------------------------------------------
// fnPrintCheckListPayMethods() <119>
//	< 支払先方法登録ﾘｽﾄ(比率/定額) 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :   nSelect     1:支払方法(比率) 2:支払方法(定額)
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListPayMethods(nSelect: Integer);
var
	strHojCode	    :   String;
	strFormat	    :   String;
	sSaveCode	    :   String;
	sSavePrjCode	:   String;     // <142> Add
	sSavePjSubCode	:   String;     // <142> Add
	sBunName	    :   String;
	Int,i		    :   Integer;
    Qry			    :   TMQuery;
    strSQL          :   String;     // <142> 2007/02/20 H.Kawato Add
begin

    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	sSaveCode   :=  '';
	Int         :=  6;

	case nSelect of
		1: sBunName :=  '比率';
		2: sBunName :=  '定額';
	end;

	MemPayMethods.Close();
	MemPayMethods.Open();

	with Qry do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
        SQL.Add('SELECT MT.GCode,MT.Nmk,MT.Renso,PI.BunkaiKbn,PD.Houhou,            '
            +   '       PD.StdRitu,PD.MinKin,PD.HasuuKin,PD.HasuuHou,PD.JoukenNo    '
            +   'FROM MTOKUI MT                                                     '
            +   'LEFT OUTER JOIN PayPtnDtl  PD ON                                   '
            +   '   (PD.MasterKbn=:MK AND MT.NCode=PD.PayNCode)                     '
            +   'LEFT OUTER JOIN MTOKUI_PAY PI ON                                   '
            +   '   (MT.NCode=PI.BaseNCode)                                         '
            +   'WHERE  (MT.RDelKbn=0) AND (MT.SumKbn<>9) AND                       '
            +   '       (MT.HojyoKbn2=1) AND (MT.TemplateKbn=0)                     ');

		case nSelect of
			1:  SQL.Add('   AND (PI.BunkaiKbn<>1)   ');     // 比率
			2:  SQL.Add('   AND (PI.BunkaiKbn=1)    ');     // 定額
		end;

        ParamByName('MK').AsInteger :=  MASTER_CUSTOMER;    // ﾏｽﾀ区分
}
        strSQL := 'SELECT '
                + ' ISNULL(MT.NCode, 0) AS PayNCode '
                + ',ISNULL(MT.GCode, '''') AS GCode '
                + ',ISNULL(MT.Nmk, '''') AS Nmk '
                + ',ISNULL(MT.Renso, '''') AS Renso '
                + ',ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '
                + ',ISNULL(PT.PrjNCode, 0) AS PrjNCode '
                + ',ISNULL(HM1.GCode, '''') AS PrjGCode '
                + ',ISNULL(HM1.SimpleName, '''') AS PrjName '
                + ',ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
                + ',ISNULL(HM2.GCode, '''') AS PjSubGCode '
                + ',ISNULL(HM2.SimpleName, '''') AS PjSubName '
                + ',ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode'
                + ',ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'
                + ',ISNULL(PT.PriPayWay, 0) AS PriPayWay '
                + ',ISNULL(PI.BunkaiKbn, 0) AS BunkaiKbn '
                + ',ISNULL(PD.Houhou, 0) AS Houhou '
                + ',ISNULL(PD.StdRitu, 0) AS StdRitu '
                + ',ISNULL(PD.MinKin, 0) AS MinKin '
                + ',ISNULL(PD.HasuuKin, 0) AS HasuuKin '
                + ',ISNULL(PD.HasuuHou, 0) AS HasuuHou '
                + ',ISNULL(PD.JoukenNo, 0) AS JoukenNo '
                + 'FROM MTOKUI MT '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.RDelKbn = 0)'
                + 'LEFT OUTER JOIN PayPtnDtl PD '
                + ' ON (PD.MasterKbn= ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PD.RDelKbn = 0 '    // <144> Add
                + ' AND MT.NCode = PD.PayNCode '
                + ' AND PD.PayPtnNo = PT.PayPtnNo) '
                + 'LEFT OUTER JOIN MTOKUI_PAY PI '
                + ' ON (MT.NCode=PI.BaseNCode) '
                + 'LEFT OUTER JOIN HojyoMA HM1 '
                + ' ON (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn)
                + ' AND HM1.NCode = PT.PrjNCode '
                + ' AND HM1.RDelKbn = 0) '
                + 'LEFT OUTER JOIN HojyoMA HM2 '
                + ' ON (HM2.MasterKbn = ' + IntToStr(m_iProjSubKbn)
                + ' AND HM2.NCode = PT.PjSubNCode '
                + ' AND HM2.RDelKbn = 0) '
                + 'WHERE (MT.RDelKbn=0) '
                + ' AND (MT.SumKbn<>9) '
                + ' AND (MT.HojyoKbn2=1) '
                + ' AND (MT.TemplateKbn=0) ';

		case nSelect of
			1:  strSQL := strSQL + 'AND (PT.BunkaiKbn<>1) ';    // 比率
			2:  strSQL := strSQL + 'AND (PT.BunkaiKbn=1) ';     // 定額
		end;

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            strSQL  := strSQL + ' AND PT.PayPtnNo = 1 ';

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

        // ｺｰﾄﾞの範囲指定
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
// <156> 2008/01/15 H.Kawato Mod Start
{
            SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
}

            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
// <156> 2008/01/15 H.Kawato Mod End
        end;

        // 出力順序
// <142> 2007/02/20 H.Kawato Mod Start
{
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY MT.GCode, PD.JoukenNo ')
        else    SQL.Add('ORDER BY MT.Renso, MT.GCode, PD.JoukenNo ');
}
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY GCode,SortPrjGCode,SortPjSubGCode,JoukenNo  ')
        else    SQL.Add('ORDER BY Renso, GCode,SortPrjGCode,SortPjSubGCode,JoukenNo ');
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			fnErrorMessageDsp(Qry);
			Qry.Close();
			Qry.Free();
            Exit;
		end;

		while (not EOF) do
		begin
// <142> 2007/02/20 H.Kawato Mod
//			if (sSaveCode <> FieldByName('GCode').AsString) then
			if  (sSaveCode <> FieldByName('GCode').Value) or
                (sSavePrjCode <> FieldByName('PrjGCode').Value) or
                (sSavePjSubCode <> FieldByName('PjSubGCode').Value) then
// <142> 2007/02/20 H.Kawato Mod
			begin
				if int <= 5 then
				begin
					for i:=int to 5 do
					begin
						MemPayMethods.Edit();
                        // 支払方法
						MemPayMethods.FieldByName('HouhouNo'  +IntToStr(i)).AsInteger  := i;
                        // 支払方法名称
						MemPayMethods.FieldByName('HouhouName'+IntToStr(i)).AsString   := _PayWayItems[0];
// <176> Mod ↓↓↓
{                       // 分解基準値
						MemPayMethods.FieldByName('StdRitu'   +IntToStr(i)).AsCurrency := 0;
                        // 支払最低額
						MemPayMethods.FieldByName('MinKin'    +IntToStr(i)).AsCurrency := 0;
                        // 端数処理額
						MemPayMethods.FieldByName('HasuuKin'  +IntToStr(i)).AsCurrency := 0;
                        // 端数処理方法
						MemPayMethods.FieldByName('HasuuHou'  +IntToStr(i)).AsString   := _FractionItems[0];
}
						// 分解基準値
						MemPayMethods.FieldByName('StdRitu'   +IntToStr(i)).AsString   := '';
						// 支払最低額
						MemPayMethods.FieldByName('MinKin'    +IntToStr(i)).AsString   := '';
						// 端数処理額
						MemPayMethods.FieldByName('HasuuKin'  +IntToStr(i)).AsString   := '';
                        // 端数処理方法
						MemPayMethods.FieldByName('HasuuHou'  +IntToStr(i)).AsString   := '';
// <176> Mod ↑↑↑
						MemPayMethods.Post();
					end;
				end;

				MemPayMethods.Append();
				sSaveCode   :=  FieldByName('GCode').AsString;
				Int		    :=  1;

                strHojCode  :=  FieldByName ('GCode').AsString;
    			if ( m_nCurCodeAttribute <= 1 ) then
    			begin
    				case (m_nCurCodeAttribute) of
    					0:  strFormat   :=  '%'  + IntToStr (m_nCurCodeDigit) + 'd';
    					1:  strFormat   :=  '%.' + IntToStr (m_nCurCodeDigit) + 'd';
    				end;
    				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
    			end;

                // 支払先ｺｰﾄﾞ
				MemPayMethods.FieldByName('GCode')      .AsString   :=  strHojCode;
                // 簡略名称
				MemPayMethods.FieldByName('SimpleName') .AsString   :=  FieldByName('NMK').AsString;

// <142> 2007/02/20 H.Kawato Add Start
                // 条件ﾊﾟﾀｰﾝNo
                MemPayMethods.FieldByName('PayPtnNo' ).AsInteger    :=  FieldByName('PayPtnNo' ).Value;

//<172> Mov ↓↓↓
				// 優先支払方法
				if (FieldByName('PriPayWay').Value <> 0) then
				begin
					MemPayMethods.FieldByName('PriPayWayData').AsInteger :=  FieldByName('PriPayWay').Value;
					fnSetMemDataPrintPayDtlSyousai( FieldByName('PayNCode').Value,
													FieldByName('PayPtnNo').Value, FieldByName('PriPayWay').Value, nSelect);
				end
				else
					MemPayMethods.FieldByName('PriPayWayData').AsInteger :=  0;
//<172> Mov ↑↑↑

                // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
                if (m_iProAdoptKbn = 1) then
                begin
                    MemPayMethods.FieldByName('PrjHojyoName').AsString  := m_sProjectTitle;     // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add

//<172> Mov ↓↓↓
{                   // 優先支払方法
                    if (FieldByName('PriPayWay').Value <> 0) then
                    begin
                        MemPayMethods.FieldByName('PriPayWayData').AsInteger :=  1;
                        fnSetMemDataPrintPayDtlSyousai(FieldByName('PayNCode').Value,
                            FieldByName('PayPtnNo').Value, FieldByName('PriPayWay').Value, nSelect);
                    end
                    else
                        MemPayMethods.FieldByName('PriPayWayData').AsInteger :=  0;
}
//<172> Mov ↑↑↑

				    sSavePrjCode    :=  FieldByName('PrjGCode').Value;

                    strHojCode  :=  FieldByName ('PrjGCode').Value;
                    if ( m_iPrjCodeAttr <= 1 ) and (Trim(strHojCode) <> '') then
                    begin
                    	case (m_iPrjCodeAttr) of
                    		0:  strFormat   :=  '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
                    		1:  strFormat   :=  '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
                    	end;
                    	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                    end;

                    // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    MemPayMethods.FieldByName('PrjNCode').AsFloat    :=  FieldByName('PrjNCode').Value;
                    // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                    MemPayMethods.FieldByName('PrjGCode').AsString   :=  strHojCode;
                    // ﾌﾟﾛｼﾞｪｸﾄ名称
                    if (Trim(strHojCode) <> '') then
                        MemPayMethods.FieldByName('PrjName' ).AsString   :=  FieldByName('PrjName').Value
                    else
                        MemPayMethods.FieldByName('PrjName' ).AsString   :=  'その他';

                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用あり
                    if (m_iSubAdoptKbn = 1) then
                    begin
                        MemPayMethods.FieldByName('PjSubHojyoName').AsString := m_sPjSubTitle;   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ補助名称 <142> Add

                        sSavePjSubCode  :=  FieldByName('PjSubGCode').Value;

                        strHojCode  :=  FieldByName ('PjSubGCode').Value;
                        if ( m_iPjSubCodeAttr <= 1 ) and (Trim(strHojCode) <> '') then
                        begin
                        	case (m_iPjSubCodeAttr) of
                        		0:  strFormat   :=  '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
                        		1:  strFormat   :=  '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
                        	end;
                        	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                        end;

                        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                        MemPayMethods.FieldByName('PjSubNCode').AsFloat    :=  FieldByName('PjSubNCode').Value;
                        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
                        MemPayMethods.FieldByName('PjSubGCode').AsString   :=  strHojCode;
                        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                        if (Trim(strHojCode) <> '') then
                            MemPayMethods.FieldByName('PjSubName' ).AsString   :=  FieldByName('PjSubName' ).Value
                        else
                            MemPayMethods.FieldByName('PjSubName' ).AsString   :=  'その他';
                    end;
                end;

                // 最終行判定フラグ
                MemPayMethods.FieldByName('EOF').AsBoolean  := False;
// <142> 2007/02/20 H.Kawato Add End

                // 分解方法
				MemPayMethods.FieldByName('BunkaiName') .AsString   :=  sBunName;
			end
			else
				MemPayMethods.Edit();

			if ( Int = FieldByName('JoukenNo').AsInteger ) then
			begin
                // 支払方法
				MemPayMethods.FieldByName('HouhouNo'  +IntToStr(Int)).AsInteger  := FieldByName('JoukenNo').AsInteger;
                // 支払方法名称
				MemPayMethods.FieldByName('HouhouName'+IntToStr(Int)).AsString   := _PayWayItems[FieldByName('Houhou').AsInteger];
// <176> Mod ↓↓↓
{               // 分解基準値
				MemPayMethods.FieldByName('StdRitu'   +IntToStr(Int)).AsCurrency := FieldByName('StdRitu' ).AsCurrency;
                // 支払最低額
				MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsCurrency := FieldByName('MinKin'  ).AsCurrency;
                // 端数処理額
				MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsCurrency := FieldByName('HasuuKin').AsCurrency;
                // 端数処理方法
				MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := _FractionItems[FieldByName('HasuuHou').AsInteger];
}
				if FieldByName('Houhou').AsInteger <> 0 then		//なし以外
				begin
					// 分解基準値
					MemPayMethods.FieldByName('StdRitu'   +IntToStr(Int)).AsCurrency := FieldByName('StdRitu' ).AsCurrency;
// <177> Mod ↓↓↓
{					// 支払最低額
					MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsCurrency := FieldByName('MinKin'  ).AsCurrency;
					// 端数処理額
					MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsCurrency := FieldByName('HasuuKin').AsCurrency;
					//端数処理額が入力されている場合
					if FieldByName('HasuuKin').AsCurrency > 0 then
						//端数方法を設定
						MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := _FractionItems[FieldByName('HasuuHou').AsInteger]
					else
						MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := '';
}
					if nSelect = 1 then								//比率
					begin
						// 支払最低額
						MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsCurrency := FieldByName('MinKin'  ).AsCurrency;
						// 端数処理額
						MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsCurrency := FieldByName('HasuuKin').AsCurrency;
						//端数処理額が入力されている場合
						if FieldByName('HasuuKin').AsCurrency > 0 then
							//端数処理方法を設定
							MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := _FractionItems[FieldByName('HasuuHou').AsInteger]
						else
							MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := '';
					end
					else											//定額
					begin
						// 支払最低額
						MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsString	 := '';
						// 端数処理額
						MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsString	 := '';
						// 端数処理方法
						MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := '';
					end;
// <177> Mod ↑↑↑
				end
				else
				begin
					// 分解基準値
					MemPayMethods.FieldByName('StdRitu'   +IntToStr(Int)).AsString := '';
					// 支払最低額
					MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsString := '';
					// 端数処理額
					MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsString := '';
					//端数方法を設定
					MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString := '';
				end;
// <176> Mod ↑↑↑
			end
			else if ( FieldByName('JoukenNo').AsInteger = 0 ) then
			begin
                // 支払方法
				MemPayMethods.FieldByName('HouhouNo'  +IntToStr(Int)).AsInteger  := Int;
                // 支払方法名称
				MemPayMethods.FieldByName('HouhouName'+IntToStr(Int)).AsString   := _PayWayItems[0];
// <176> Mod ↓↓↓
{	            // 分解基準値
				MemPayMethods.FieldByName('StdRitu'   +IntToStr(Int)).AsCurrency := 0;
                // 支払最低額
				MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsCurrency := 0;
                // 端数処理額
				MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsCurrency := 0;
                // 端数処理方法
				MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := _FractionItems[0];
}
				// 分解基準値
				MemPayMethods.FieldByName('StdRitu'   +IntToStr(Int)).AsString   := '';
				// 支払最低額
				MemPayMethods.FieldByName('MinKin'    +IntToStr(Int)).AsString   := '';
				// 端数処理額
				MemPayMethods.FieldByName('HasuuKin'  +IntToStr(Int)).AsString   := '';
                // 端数処理方法
				MemPayMethods.FieldByName('HasuuHou'  +IntToStr(Int)).AsString   := '';
// <176> Mod ↑↑↑
			end;

			Int :=  Int+1;
			MemPayMethods.Post();
			Next;
		end;

		if ( Int <= 5 ) then
		begin
			for i := Int to 5 do
			begin
				MemPayMethods.Edit();
                // 支払方法
				MemPayMethods.FieldByName('HouhouNo'  +IntToStr(i)).AsInteger  := i;
                // 支払方法名称
				MemPayMethods.FieldByName('HouhouName'+IntToStr(i)).AsString   := _PayWayItems[0];
// <176> Mod ↓↓↓
{               // 分解基準値
				MemPayMethods.FieldByName('StdRitu'   +IntToStr(i)).AsCurrency := 0;
                // 支払最低額
				MemPayMethods.FieldByName('MinKin'    +IntToStr(i)).AsCurrency := 0;
                // 端数処理額
				MemPayMethods.FieldByName('HasuuKin'  +IntToStr(i)).AsCurrency := 0;
                // 端数処理方法
				MemPayMethods.FieldByName('HasuuHou'  +IntToStr(i)).AsString   := _FractionItems[0];
}
				// 分解基準値
				MemPayMethods.FieldByName('StdRitu'   +IntToStr(i)).AsString   := '';
				// 支払最低額
				MemPayMethods.FieldByName('MinKin'    +IntToStr(i)).AsString   := '';
				// 端数処理額
				MemPayMethods.FieldByName('HasuuKin'  +IntToStr(i)).AsString   := '';
				// 端数処理方法
				MemPayMethods.FieldByName('HasuuHou'  +IntToStr(i)).AsString   := '';
// <176> Mod ↑↑↑
				MemPayMethods.Post();
			end;
		end;
	end;

// <157> 2008/01/15 H.Kawato Add
    if (MemPayMethods.RecordCount > 0) then
    begin
// <157> 2008/01/15 H.Kawato Add

// <142> 2007/02/20 H.Kawato Add Start
        MemPayMethods.Last;
        MemPayMethods.Edit;
        MemPayMethods.FieldByName('EOF').AsBoolean   := True;
// <142> 2007/02/20 H.Kawato Add End

    	MemPayMethods.First;

// <173> DEL    Qry.Close();
// <173> DEL    Qry.Free();
    end;    // <157> Add

    Qry.Close();    // <173> ADD
    Qry.Free();     // <173> ADD
end;

// <142> 2007/02/20 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004007f.fnSetMemDataPrintPayDtlSyousai (nNCode: Extended;
                                nPayPtnNo, nPriPayWay, nSelect: Integer);
var
	dqMasterData: TMQuery;
	nRow		: Integer;
    strSQL      : String;

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		strSQL := 'SELECT Edaban, BaseKingaku, BaseHiritu, HasuuKingaku, HasuuHou, Site FROM PayDetailInfo '
                + 'WHERE Edaban BETWEEN 11 AND 15'
                + '  AND ShiharaiSyubetu = ' + IntToStr(nPriPayWay)
		        + '  AND PayPtnNo  = ' + FloatToStr(nPayPtnNo)
		        + '  AND PayNCode  = ' + FloatToStr(nNCode)
   		        + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
   		        + '  AND RDelKbn = 0 '
   		        + 'ORDER BY Edaban ';

        SQL.Add(strSQL);

		Open ();

		while (not EOF) do
		begin
			if	((FieldByName ('Edaban').AsInteger >= 11) and (FieldByName ('Edaban').AsInteger <= 15)) then
			begin
				nRow	:= FieldByName ('Edaban').AsInteger - 10;				// 行

				//先頭行 or 基準金額設定行
                if  (nRow = 1) or
                    ((nRow <> 1) and (MemPayMethods.FieldByName (Format ('PriPayWayBaseKingaku%.1d', [nRow])).AsCurrency <> 0)) then
                begin
					//優先支払方法
    				MemPayMethods.FieldByName (Format ('PriPayWayNo%.1d', [nRow])).AsInteger   := nRow;

                    if (nRow = 1) then											//先頭行
                    begin
                        MemPayMethods.FieldByName (Format ('PriPayWayBaseKingaku%.1d' , [nRow])).AsCurrency     := 0;
                        MemPayMethods.FieldByName (Format ('strPriPayWayBaseKinUnit%.1d' , [nRow])).AsString    := '～';
                        if (FieldByName ('BaseKingaku').AsCurrency > 0) then
                        begin
                        	MemPayMethods.FieldByName (Format ('PriPayWayBaseKingaku%.1d' , [nRow + 1])).AsCurrency  := FieldByName ('BaseKingaku').AsCurrency;
                        	MemPayMethods.FieldByName (Format ('strPriPayWayBaseKinUnit%.1d' , [nRow + 1])).AsString := '～';
                        end;
                    end
                    else if (nRow > 1) and (nRow < 5) and (FieldByName ('BaseKingaku').AsCurrency > 0) then
                    begin
        				MemPayMethods.FieldByName (Format ('PriPayWayBaseKingaku%.1d' , [nRow + 1])).AsCurrency  := FieldByName ('BaseKingaku').AsCurrency;
           				MemPayMethods.FieldByName (Format ('strPriPayWayBaseKinUnit%.1d' , [nRow + 1])).AsString := '～';
                    end;

                    MemPayMethods.FieldByName (Format ('PriPayWayBaseHiritu%.1d' , [nRow])).AsCurrency	:= FieldByName ('BaseHiritu'  ).AsCurrency;
//                  MemPayMethods.FieldByName (Format ('PriPayWayHasuuKin%.1d' , [nRow])).AsCurrency	:= FieldByName ('HasuuKingaku').AsCurrency;	// <177> Mov

// <172> Add ↓↓↓
                    if (nSelect = 1) then   // 比率
					begin
// <172> Add ↑↑↑
// <177> Mov ↓↓↓
						//端数金額
						MemPayMethods.FieldByName (Format ('PriPayWayHasuuKin%.1d' , [nRow])).AsCurrency	:= FieldByName ('HasuuKingaku').AsCurrency;
// <177> Mov ↑↑↑
// <176> Add ↓↓↓
						//端数処理額が入力されている場合
						if FieldByName ('HasuuKingaku').AsCurrency > 0 then
                        begin
							//端数方法を設定
// <176> Add ↑↑↑
		                    case (FieldByName ('HasuuHou').AsInteger) of
    		                	0:		MemPayMethods.FieldByName (Format ('PriPayWayHasuuDesc%.1d', [nRow])).AsString	:= '切り捨て';
        		            	1:		MemPayMethods.FieldByName (Format ('PriPayWayHasuuDesc%.1d', [nRow])).AsString	:= '切り上げ';
            		        	2:		MemPayMethods.FieldByName (Format ('PriPayWayHasuuDesc%.1d', [nRow])).AsString	:= '四捨五入';
                		    	else	MemPayMethods.FieldByName (Format ('PriPayWayHasuuDesc%.1d', [nRow])).AsString	:= '';
                    		end;
// <176> Add ↓↓↓
						end
						else
							//端数方法は空とする
							MemPayMethods.FieldByName (Format ('PriPayWayHasuuDesc%.1d', [nRow])).AsString	:= '';
// <176> Add ↑↑↑
// <172> Add ↓↓↓
					end
					else
					begin
// <177> Add ↓↓↓
						//端数金額
						MemPayMethods.FieldByName (Format ('PriPayWayHasuuKin%.1d' , [nRow])).AsString	:= '';
// <177> Add ↑↑↑
						//端数処理方法
						MemPayMethods.FieldByName (Format ('PriPayWayHasuuDesc%.1d', [nRow])).AsString	:= '';
					end;
// <172> Add ↑↑↑
// <177> Del ↓↓↓
//					if (nSelect = 1) then   // 比率
//						MemPayMethods.FieldByName (Format ('strPriPayWayBaseHirituUnit%.1d', [nRow])).AsString  := '％'
//					else					// 定額
//						MemPayMethods.FieldByName (Format ('strPriPayWayBaseHirituUnit%.1d', [nRow])).AsString  := '円';
// <177> Del ↑↑↑
// <172> Mod ↓↓↓
//                  MemPayMethods.FieldByName (Format ('PriPayWaySite%.1d', [nRow])).AsCurrency := FieldByName ('Site').AsInteger;
//                  MemPayMethods.FieldByName (Format ('strPriPayWaySiteUnit%.1d', [nRow])).AsString    := '日';
					case (nPriPayWay) of
						2, 3:
						begin
							MemPayMethods.FieldByName (Format ('PriPayWaySite%.1d',        [nRow])).AsCurrency	:= FieldByName ('Site').AsInteger;
							MemPayMethods.FieldByName (Format ('strPriPayWaySiteUnit%.1d', [nRow])).AsString	:= '日';
						end;
						else
						begin
							MemPayMethods.FieldByName (Format ('PriPayWaySite%.1d',        [nRow])).AsString	:= '';
							MemPayMethods.FieldByName (Format ('strPriPayWaySiteUnit%.1d', [nRow])).AsString    := '';
						end;
					end;
// <172> Mod ↑↑↑
                end;
			end;

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;
// <142> 2007/02/20 H.Kawato Add End

//-----------------------------------------------------------------------------
// fnPrintCheckListFurikomi() <119>
//	< 振込情報登録／期日指定振込情報登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :   nSelect     3:振込情報登録 4:期日指定振込情報登録
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListFurikomi(nSelect: Integer);
var
	sHojCD		:   String;
	sFormat		:   String;
    sYokin		:   String;
    Qry         :   TMQuery;
begin

    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemFurikomi.Close();
	MemFurikomi.Open();

	with Qry do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
        SQL.Add('SELECT                                     '
            +   '    MT.GCode         As GCode              '
            +   '   ,MT.Renso         As Renso              '
            +   '   ,MT.Nmk           As Nmk                '
            +   '   ,PS.BankNCode     As BankNCode          '
            +   '   ,DI.BkBraNCode    As BkBraNCode         '
            +   '   ,PF.BankCode      As BankCode           '
            +   '   ,PF.BankName      As BankName           '
            +   '   ,PF.BankKana      As BankKanaName       '
            +   '   ,PS.BranchCode    As BranchCode         '
            +   '   ,PS.BranchName    As BkBraName          '
            +   '   ,PS.BranchKana    As BraKanaName        '
            +   '   ,DI.TransKanaName As TransKanaName      '
            +   '   ,DI.Acckbn        As Acckbn             '
            +   '   ,DI.AccNo         As AccNo              '
            +   '   ,DI.ChargeFutan   As ChargeFutan        '
            +   '   ,DI.ChargeKbn     As ChargeKbn          '
            +   '   ,DI.TransKbn      As TransKbn           '
            +   '   ,DI.FBSet         As FBSet              '
            +   '   ,DI.EdiInfo       As EdiInfo            '
            +   '   ,DI.AiteNo1       As AiteNo1            '
            +   '   ,DI.AiteNo2       As AiteNo2            '
            +   '   ,DI.Site          As Site               '
            +   '   ,DI.AccAutoKbn    As AccAutoKbn         '   // <128> Add
            +   '   ,DI.AccAutoData   As AccAutoData        '   // <128> Add
            +   '   ,AI.Acckbn        As YOKIN              '
            +   '   ,AI.AccNo         As KOZA               '
            +   '   ,AI.GCode         As IraiAccNo          '
            +   '   ,Bk.SimpleName    As BANK               '
            +   'FROM PayPtnDtl PD                          '
            +   'LEFT OUTER JOIN PayDetailInfo DI ON        '
            +   '       (DI.MasterKbn=PD.MasterKbn)         '
            +   '   AND (DI.PayNCode=PD.PayNCode)           '
            +   '   AND (PD.HouHou=DI.ShiharaiSyubetu)      '
            +   'LEFT OUTER JOIN MTOKUI MT ON               '
            +   '       (PD.PayNCode=MT.NCode)              '
            +   '   AND (MT.RDelKbn=0)                      '
            +   'LEFT OUTER JOIN AccInfo AI ON              '
            +   '       (DI.AccNCode=AI.NCode)              '
            +   '   AND (AI.RDelKbn=0)                      '
            +   'LEFT OUTER JOIN BankInfo Bk ON             '
            +   '       (Bk.Ncode=AI.BankNCode)             '
            +   'LEFT OUTER JOIN HAPBS PS ON                '
            +   '       (DI.BkBraNCode=PS.NCode)            '
            +   'LEFT OUTER JOIN HAPBF PF ON                '
            +   '       (PS.BankNCode=PF.NCode)             '
            +   'WHERE  (PD.MasterKbn=:MK)                  '
            +   '   AND (PD.HouHou=:HH)                     '
            +   '   AND (MT.RDelKbn=0)                      ');
}
        SQL.Add('SELECT '
            +   '    ISNULL(PD.PayNCode, 0) AS PayNCode '               //支払先内部ｺｰﾄﾞ
            +   '   ,ISNULL(MT.GCode, '''') As GCode '                  //支払先外部ｺｰﾄﾞ
            +   '   ,ISNULL(MT.Renso, '''') As Renso '                  //連想
            +   '   ,ISNULL(MT.Nmk, '''') As Nmk '                      //支払先名称
            +   '   ,ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '               //条件ﾊﾟﾀｰﾝNo
            +   '   ,ISNULL(PT.PrjNCode, 0) AS PrjNCode '               //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            +   '   ,ISNULL(HM1.GCode, '''') AS PrjGCode '              //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
            +   '   ,ISNULL(HM1.SimpleName, '''') AS PrjName '          //ﾌﾟﾛｼﾞｪｸﾄ名称
            +   '   ,ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '           //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            +   '   ,ISNULL(HM2.GCode, '''') AS PjSubGCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
            +   '   ,ISNULL(HM2.SimpleName, '''') AS PjSubName '        //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            +   '   ,ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '    //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
            +   '   ,ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'   //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
            +   '   ,ISNULL(DI.AccNCode, 0) AS AccNCode '               //依頼先口座内部ｺｰﾄﾞ
            +   '   ,ISNULL(PS.BankNCode, 0) As BankNCode '             //本店内部ｺｰﾄﾞ
            +   '   ,ISNULL(DI.BkBraNCode, 0) As BkBraNCode '           //支店内部ｺｰﾄﾞ
            +   '   ,PF.BankCode As BankCode '                          //本店外部ｺｰﾄﾞ
            +   '   ,ISNULL(PF.BankName, '''') As BankName '            //本店名
            +   '   ,ISNULL(PF.BankKana, '''') As BankKanaName '        //本店ｶﾅ
            +   '   ,PS.BranchCode As BranchCode '                      //支店外部ｺｰﾄﾞ
            +   '   ,ISNULL(PS.BranchName, '''') As BkBraName '         //支店名
            +   '   ,ISNULL(PS.BranchKana, '''') As BraKanaName '       //支店ｶﾅ
            +   '   ,ISNULL(DI.TransKanaName, '''') As TransKanaName '  //ｶﾅ振込先名
            +   '   ,ISNULL(DI.Acckbn, 0) As Acckbn '                   //預金種目
            +   '   ,ISNULL(DI.AccNo, '''') As AccNo '                  //口座番号
            +   '   ,ISNULL(DI.ChargeFutan, 0) As ChargeFutan '         //手数料負担
            +   '   ,ISNULL(DI.ChargeKbn, 0) As ChargeKbn '             //手数料計算区分
            +   '   ,ISNULL(DI.TransKbn, 0) As TransKbn '               //振込方法
// <170> MOD-STR
//          +   '   ,ISNULL(DI.FBSet,0) AS FBSet'                       //FBセット項目
            +   '   ,ISNULL(DI.FBSet,2) AS FBSet'                       //FBセット項目
// <170> MOD-END
            +   '   ,ISNULL(DI.EdiInfo, '''') As EdiInfo '              //EDI情報
            +   '   ,ISNULL(DI.AiteNo1, '''') As AiteNo1 '              //顧客ｺｰﾄﾞ1
            +   '   ,ISNULL(DI.AiteNo2, '''') As AiteNo2 '              //顧客ｺｰﾄﾞ2
            +   '   ,ISNULL(DI.Site, 0) As Site '                       //サイト
            +   '   ,ISNULL(DI.AccAutoKbn, 0) As AccAutoKbn '           //口座自動引落区分
            +   '   ,ISNULL(DI.AccAutoData, 0) As AccAutoData '         //自動引落支払ﾃﾞｰﾀ
            +   '   ,ISNULL(AI.Acckbn, 0) As YOKIN '                    //預金種目
            +   '   ,ISNULL(AI.AccNo, '''') As KOZA '                   //口座番号
            +   '   ,AI.GCode As IraiAccNo '                            //依頼先口座ｺｰﾄﾞ
            +   '   ,ISNULL(Bk.SimpleName, '''') As BANK '              //銀行簡略名称
            +   'FROM PayPtnDtl PD '
            +   'LEFT OUTER JOIN PayDetailInfo DI ON '
            +   '      (DI.MasterKbn=PD.MasterKbn '
            +   '   AND DI.PayNCode=PD.PayNCode '
            +   '   AND DI.PayPtnNo = PD.PayPtnNo '
            +   '   AND DI.Edaban  = 1 '
            +   '   AND DI.RDelKbn = 0 '    // <144> Add
            +   '   AND PD.HouHou=DI.ShiharaiSyubetu) '
// <199> MOD-STR
//          +   'LEFT OUTER JOIN MTOKUI MT ON '
//          +   '      (PD.PayNCode=MT.NCode '
//          +   '   AND MT.RDelKbn=0) '
            +   'INNER JOIN MTOKUI MT ON '
            +   '      (PD.PayNCode=MT.NCode '
            +   '   AND MT.RDelKbn=0 '
            +   '   AND MT.HojyoKbn2=1 '
            +   '   AND MT.SumKbn=0) '
// <199> MOD-END
            +   'LEFT OUTER JOIN PayPtnInfo PT '
            +   '   ON (PT.MasterKbn = :MK '
            +   '   AND PT.PayNCode = MT.NCode '
            +   '   AND PT.PayPtnNo = PD.PayPtnNo '
            +   '   AND PT.RDelKbn = 0) '
            +   'LEFT OUTER JOIN AccInfo AI ON '
            +   '       (DI.AccNCode=AI.NCode) '
            +   '   AND (AI.RDelKbn=0) '
            +   'LEFT OUTER JOIN BankInfo Bk ON '
            +   '       (Bk.Ncode=AI.BankNCode) '
            +   'LEFT OUTER JOIN HAPBS PS ON '
            +   '       (DI.BkBraNCode=PS.NCode) '
            +   'LEFT OUTER JOIN HAPBF PF ON '
            +   '       (PS.BankNCode=PF.NCode) '
            +   'LEFT OUTER JOIN HojyoMA HM1 '
            +   '   ON (HM1.MasterKbn = :PK '
            +   '   AND HM1.NCode = PT.PrjNCode '
            +   '   AND HM1.RDelKbn = 0) '
            +   'LEFT OUTER JOIN HojyoMA HM2 '
            +   '   ON (HM2.MasterKbn = :PSK '
            +   '   AND HM2.NCode = PT.PjSubNCode '
            +   '   AND HM2.RDelKbn = 0) '
            +   'WHERE  PD.MasterKbn = :MK '
            +   '   AND PD.HouHou=:HH '
            +   '   AND PD.RDelKbn = 0 '    // <144> Add
            +   '   AND MT.RDelKbn=0 ');

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            SQL.Add(' AND PT.PayPtnNo = 1 ');
// <142> 2007/02/20 H.Kawato Mod End

        // ｺｰﾄﾞの範囲指定
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
// <156> 2008/01/15 H.Kawato Mod Start
{
            SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
}
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
// <156> 2008/01/15 H.Kawato Mod End
        end;

        // 出力順序
// <142> 2007/02/20 H.Kawato Mod Start
{
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY MT.GCode          ')
        else    SQL.Add('ORDER BY MT.Renso,MT.GCode ');
}
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY GCode,SortPrjGCode,SortPjSubGCode       ')
        else    SQL.Add('ORDER BY Renso,GCode,SortPrjGCode,SortPjSubGCode ');
// <142> 2007/02/20 H.Kawato Mod End

        ParamByName('MK' ).AsInteger := MASTER_CUSTOMER; // ﾏｽﾀ区分
        ParamByName('PK' ).AsInteger := m_iProjectKbn;   // ﾏｽﾀ区分 // <142> Add
        ParamByName('PSK').AsInteger := m_iProjSubKbn;   // ﾏｽﾀ区分 // <142> Add
		case nSelect of
			3: ParamByName('HH').AsInteger := 1;	    // 振込情報登録
			4: ParamByName('HH').AsInteger := 2;	    // 期日指定振込情報登録
		end;

        //	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			fnErrorMessageDsp(Qry);
			Qry.Close();
			Qry.Free();
            Exit;
		end;

		while (not EOF) do
		begin
			MemFurikomi.Append();

			sHojCD  :=  FieldByName('GCode').AsString;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0:  sFormat := '%'  + IntToStr(m_nCurCodeDigit) + 'd';
					1:  sFormat := '%.' + IntToStr(m_nCurCodeDigit) + 'd';
				end;

				sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
			end;

            // 支払先ｺｰﾄﾞ
			MemFurikomi.FieldByName('GCode')     .AsString  :=  sHojCD;
            // 簡略名称
			MemFurikomi.FieldByName('SimpleName').AsString  :=  FieldByName('Nmk').AsString;

// <142> 2007/02/20 H.Kawato Add Start
            // 条件ﾊﾟﾀｰﾝNo
            MemFurikomi.FieldByName('PayPtnNo').AsInteger   :=  FieldByName('PayPtnNo').Value;

            // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
            if (m_iProAdoptKbn = 1) then
            begin
                MemFurikomi.FieldByName('PrjHojyoName').AsString    := m_sProjectTitle;     // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add

			    sHojCD  :=  FieldByName('PrjGCode').Value;
                if (m_iPrjCodeAttr <= 1) and (Trim(sHojCD) <> '') then
                begin
                	case (m_iPrjCodeAttr) of
                		0:  sFormat := '%'  + IntToStr(m_iPrjCodeDigit) + 'd';
                		1:  sFormat := '%.' + IntToStr(m_iPrjCodeDigit) + 'd';
                	end;

                	sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
                end;

                // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                MemFurikomi.FieldByName('PrjNCode').AsFloat    :=  FieldByName('PrjNCode').Value;
                // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                MemFurikomi.FieldByName('PrjGCode').AsString   :=  sHojCD;
                // ﾌﾟﾛｼﾞｪｸﾄ名称
                if (Trim(sHojCD) <> '') then
                    MemFurikomi.FieldByName('PrjName' ).AsString   :=  FieldByName('PrjName' ).Value
                else
                    MemFurikomi.FieldByName('PrjName' ).AsString   :=  'その他';

                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用あり
                if (m_iSubAdoptKbn = 1) then
                begin
                    MemFurikomi.FieldByName('PjSubHojyoName').AsString  := m_sPjSubTitle;   // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add

                    sHojCD  :=  FieldByName('PjSubGCode').Value;
                    if (m_iPjSubCodeAttr <= 1) and (Trim(sHojCD) <> '') then
                    begin
                    	case (m_iPjSubCodeAttr) of
                    		0:  sFormat := '%'  + IntToStr(m_iPjSubCodeDigit) + 'd';
                    		1:  sFormat := '%.' + IntToStr(m_iPjSubCodeDigit) + 'd';
                    	end;

                    	sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
                    end;

                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                    MemFurikomi.FieldByName('PjSubNCode').AsFloat   :=  FieldByName('PjSubNCode').Value;
                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
                    MemFurikomi.FieldByName('PjSubGCode').AsString  :=  sHojCD;
                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                    if (Trim(sHojCD) <> '') then
                        MemFurikomi.FieldByName('PjSubName' ).AsString  :=  FieldByName('PjSubName' ).Value
                    else
                        MemFurikomi.FieldByName('PjSubName' ).AsString  :=  'その他';
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End

            // 依頼口座
			if ( FieldByName('IraiAccNo').IsNull = FALSE ) then
			begin
                // 依頼口座
				MemFurikomi.FieldByName('IraiAccNo')    .AsInteger  :=  FieldByName('IraiAccNo').AsInteger;
                // 銀行名称
				MemFurikomi.FieldByName('IraiAccName')  .AsString   :=  FieldByName('BANK')     .AsString;
                // 預金種別
				case FieldByName('YOKIN').AsInteger of
					1:  sYokin := '普通';
					2:  sYokin := '当座';
					4:  sYokin := '貯蓄';
					9:  sYokin := 'その他';
				end;

                // 預金種別
				MemFurikomi.FieldByName('ShiAccKbnName').AsString   :=  sYokin;
                // 口座番号
				MemFurikomi.FieldByName('ShiAccNo')     .AsString   :=  fnGetEditedAccountNumber(FieldByName('KOZA').AsString);
			end;

            // 銀行ｺｰﾄﾞ
			if ( FieldByName('BankCode').IsNull = FALSE ) then
				MemFurikomi.FieldByName('BankCode') .AsInteger  :=  FieldByName('BankCode')     .AsInteger;
            // 支店ｺｰﾄﾞ
			if ( FieldByName('BranchCode').IsNull = FALSE ) then
				MemFurikomi.FieldByName('BkBraCode').AsInteger  :=  FieldByName('BranchCode')   .AsInteger;

            // 銀行名称
			MemFurikomi.FieldByName('BankName')     .AsString   :=  FieldByName('BankName')     .AsString;
            // ｶﾅ銀行名称
			MemFurikomi.FieldByName('BankKanaName') .AsString   :=  FieldByName('BankKanaName') .AsString;
            // 支店名称
			MemFurikomi.FieldByName('BkBraName')    .AsString   :=  FieldByName('BkBraName')    .AsString;
            // ｶﾅ支店名称
			MemFurikomi.FieldByName('BraKanaName')  .AsString   :=  FieldByName('BraKanaName')  .AsString;
            // ｶﾅ振込先名
			MemFurikomi.FieldByName('TransKanaName').AsString   :=  FieldByName('TransKanaName').AsString;
            // 預金種別
			case FieldByName('Acckbn').AsInteger of
				1:  sYokin := '普通';
				2:  sYokin := '当座';
				4:  sYokin := '貯蓄';
				9:  sYokin := 'その他';
			end;

            // 預金種別
			MemFurikomi.FieldByName('HuriAccKbnName')   .AsString   := sYokin;
            // 口座番号
			MemFurikomi.FieldByName('HuriAccKbnNo')     .AsString   :=  fnGetEditedAccountNumber(FieldByName('AccNo').AsString);
            // 手数料負担区分
			MemFurikomi.FieldByName('ChargeFutanName')  .AsString   :=  _ChargeFItems[FieldByName('ChargeFutan').AsInteger];
            // 手数料計算区分
			MemFurikomi.FieldByName('ChargeKbnName')    .AsString   :=  _ChargeKItems[FieldByName('ChargeKbn').AsInteger];
            // 振込方法
			MemFurikomi.FieldByName('TransKbn')         .AsString   :=  _TransKbnItems[FieldByName('TransKbn').AsInteger];
            // FB区分
			MemFurikomi.FieldByName('FBSetName')        .AsString   :=  _FBSetItems[FieldByName('FBSet').AsInteger];
            // EDI情報
			MemFurikomi.FieldByName('EDIInfo')          .AsString   :=  FieldByName('EdiInfo')  .AsString;
            // 顧客ｺｰﾄﾞ1
			MemFurikomi.FieldByName('AiteNo1')          .AsString   :=  FieldByName('AiteNo1')  .AsString;
            // 顧客ｺｰﾄﾞ2
			MemFurikomi.FieldByName('AiteNo2')          .AsString   :=  FieldByName('AiteNo2')  .AsString;
            // ｻｲﾄ
			MemFurikomi.FieldByName('Site')             .AsInteger  :=  FieldByName('Site')     .AsInteger;
// <128> 2006/06/29 H.Kawato Add Start
            // 口座自動引落区分
            MemFurikomi.FieldByName('AutoKbnData')      .AsString   :=  _AccAutoItems[FieldByName('AccAutoKbn').AsInteger];
            // 引落支払データ
			MemFurikomi.FieldByName('AccAutoData')      .AsInteger  :=  FieldByName('AccAutoData').AsInteger;
// <128> 2006/06/29 H.Kawato Add End
            // 最終行判定フラグ
            MemFurikomi.FieldByName('EOF').AsBoolean   := False;    // <142> Add

			MemFurikomi.Post();
			Next;
		end;
	end;

// <157> 2008/01/15 H.Kawato Add
    if (MemFurikomi.RecordCount > 0) then
    begin
// <157> 2008/01/15 H.Kawato Add

// <142> 2007/02/20 H.Kawato Add Start
        MemFurikomi.Last;
        MemFurikomi.Edit;
        MemFurikomi.FieldByName('EOF').AsBoolean   := True;
// <142> 2007/02/20 H.Kawato Add End

    	MemFurikomi.First;
    end;    // <157> Add

    Qry.Close();
    Qry.Free();

end;
//-----------------------------------------------------------------------------
// fnfnPrintCheckListDraftCheck() <119>
//	< 手形情報登録／小切手情報登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :   nSelect     5:手形情報登録 6:小切手情報登録
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnfnPrintCheckListDraftCheck(nSelect: Integer);
var
	sHojCD		:   String;
	sFormat		:   String;
    sYokin		:   String;
    Qry         :   TMQuery;
    nPayCnt     :   Integer;    // <142> Add
    nDataCnt    :   Integer;    // <142> Add
    sSaveCode   :   String;     // <142> Add
begin
    nPayCnt     := 0;   // <142> Add
    nDataCnt    := 0;   // <142> Add
    sSaveCode   := '';  // <142> Add

    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemDraftCheck.Close();
	MemDraftCheck.Open();

	with Qry do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
        SQL.Add('SELECT                                 '
            +   '    MT.GCode                           '
            +   '   ,MT.Renso                           '
            +   '   ,MT.Nmk                             '
            +   '   ,AI.GCode As IraiAccNo              '
            +   '   ,DI.Site                            '
            +   '   ,DI.TegBunkatuMax                   '
            +   '   ,DI.TegYusouKbn                     '
            +   '   ,DI.TegYusouFutan                   '
            +   '   ,AI.Acckbn As YOKIN                 '
            +   '   ,AI.AccNo As KOZA                   '
            +   '   ,Bk.SimpleName As BANK              '
            +   'FROM PayPtnDtl PD                      '
            +   'LEFT OUTER JOIN PayDetailInfo DI ON    '
            +   '       (DI.MasterKbn=PD.MasterKbn)     '
            +   '   AND (DI.PayNCode=PD.PayNCode)       '
            +   '   AND (PD.HouHou=DI.ShiharaiSyubetu)  '
            +   'LEFT OUTER JOIN MTOKUI MT ON           '
            +   '       (PD.PayNCode=MT.NCode)          '
            +   '   AND (MT.RDelKbn=0)                  '
            +   'LEFT OUTER JOIN AccInfo AI ON          '
            +   '       (DI.AccNCode=AI.NCode)          '
            +   '   AND (AI.RDelKbn=0)                  '
            +   'LEFT OUTER JOIN BankInfo Bk ON         '
            +   '       (Bk.Ncode=AI.BankNCode)         '
            +   'WHERE  (PD.MasterKbn=:MK)              '
            +   '   AND (PD.HouHou=:HH)                 '
            +   '   AND (MT.RDelKbn=0)                  ');
}
        SQL.Add('SELECT '
            +   '    ISNULL(PD.PayNCode, 0) AS PayNCode '
            +   '   ,ISNULL(MT.GCode, '''') AS GCode '
            +   '   ,ISNULL(MT.Renso, '''') AS Renso '
            +   '   ,ISNULL(MT.Nmk, '''') AS Nmk '
            +   '   ,ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '
            +   '   ,ISNULL(PT.PrjNCode, 0) AS PrjNCode '
            +   '   ,ISNULL(HM1.GCode, '''') AS PrjGCode '
            +   '   ,ISNULL(HM1.SimpleName, '''') AS PrjName '
            +   '   ,ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '
            +   '   ,ISNULL(HM2.GCode, '''') AS PjSubGCode '
            +   '   ,ISNULL(HM2.SimpleName, '''') AS PjSubName '
            +   '   ,ISNULL(HM1.GCode, ''その他'') AS SortPrjGCode '
            +   '   ,ISNULL(HM2.GCode, ''その他'') AS SortPjSubGCode'
            +   '   ,ISNULL(DI.AccNCode, 0) AS AccNCode '
            +   '   ,AI.GCode As IraiAccNo '
            +   '   ,ISNULL(DI.Site, 0) AS Site '
            +   '   ,ISNULL(DI.TegBunkatuMax, 0) AS TegBunkatuMax '
            +   '   ,ISNULL(DI.TegYusouKbn, 0) AS TegYusouKbn '
            +   '   ,ISNULL(DI.TegYusouFutan, 0) AS TegYusouFutan '
            +   '   ,ISNULL(AI.Acckbn, 0) As YOKIN '
            +   '   ,ISNULL(AI.AccNo, '''') As KOZA '
            +   '   ,ISNULL(Bk.SimpleName, '''') As BANK '
// <196> ADD-STR
            +   '   ,ISNULL(DI.ERKbn, '''') as ERKbn '                  //電子債権採用区分
            +   '   ,ISNULL(PS.BankNCode, 0) As BankNCode '             //本店内部ｺｰﾄﾞ
            +   '   ,ISNULL(DI.BkBraNCode, 0) As BranchNCode '          //支店内部ｺｰﾄﾞ
            +   '   ,ISNULL(PF.BankCode, 0) AS BankCode '               //本店外部ｺｰﾄﾞ
            +   '   ,ISNULL(PF.BankName, '''') AS BankName '            //本店名
            +   '   ,ISNULL(PF.BankKana, '''') AS BankKana '            //本店ｶﾅ
            +   '   ,ISNULL(PS.BranchCode, 0) AS BranchCode '           //支店外部ｺｰﾄﾞ
            +   '   ,ISNULL(PS.BranchName, '''') AS BranchName '        //支店名
            +   '   ,ISNULL(PS.BranchKana, '''') AS BranchKana '        //支店ｶﾅ
            +   '   ,ISNULL(DI.TransKanaName, '''') AS TransKanaName '  //ｶﾅ振込先名
            +   '   ,ISNULL(DI.Acckbn, 1) AS Acckbn '                   //預金種目
            +   '   ,ISNULL(DI.AccNo, '''') AS AccNo '                  //口座番号
            +   '   ,ISNULL(DI.ChargeFutan, 1) AS ChargeFutan '         //手数料負担
//<203>ST
            +   '   ,ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '             //手数料計算区分
//<203>ED
            +   '   ,ISNULL(DI.VFree1, '''') as VFree1 '                //フリー項目
            +   '   ,ISNULL(DI.VFree2, '''') as VFree2 '
            +   '   ,ISNULL(DI.VFree3, '''') as VFree3 '
            +   '   ,ISNULL(DI.VFree4, '''') as VFree4 '
            +   '   ,ISNULL(DI.VFree5, '''') as VFree5 '
// <196> ADD-END
            +   'FROM PayPtnDtl PD '
            +   'LEFT OUTER JOIN PayDetailInfo DI ON '
            +   '       (DI.MasterKbn=PD.MasterKbn) '
            +   '   AND (DI.PayNCode=PD.PayNCode) '
            +   '   AND (DI.PayPtnNo = PD.PayPtnNo) '
            +   '   AND (DI.Edaban  = 1) '
            +   '   AND (DI.RDelKbn = 0) '  // <144> Add
            +   '   AND (PD.HouHou=DI.ShiharaiSyubetu) '
// <199> MOD-STR
//          +   'LEFT OUTER JOIN MTOKUI MT ON '
//          +   '      (PD.PayNCode=MT.NCode '
//          +   '   AND MT.RDelKbn=0) '
            +   'INNER JOIN MTOKUI MT ON '
            +   '      (PD.PayNCode=MT.NCode '
            +   '   AND MT.RDelKbn=0 '
            +   '   AND MT.HojyoKbn2=1 '
            +   '   AND MT.SumKbn=0) '
// <199> MOD-END
            +   'LEFT OUTER JOIN PayPtnInfo PT ON '
            +   '       (PT.MasterKbn = :MK) '
            +   '   AND (PT.PayNCode = MT.NCode) '
            +   '   AND (PT.PayPtnNo = PD.PayPtnNo) '
            +   '   AND (PT.RDelKbn = 0) '
            +   'LEFT OUTER JOIN AccInfo AI ON '
            +   '       (DI.AccNCode=AI.NCode) '
            +   '   AND (AI.RDelKbn=0) '
            +   'LEFT OUTER JOIN BankInfo Bk ON '
            +   '       (Bk.Ncode=AI.BankNCode) '
// <196> ADD-STR
            +   'LEFT OUTER JOIN HAPBS PS ON '
            +   '       (DI.BkBraNCode = PS.NCode) '
            +   'LEFT OUTER JOIN HAPBF PF ON '
            +   '       (PS.BankNCode  = PF.NCode) '
// <196> ADD-END
            +   'LEFT OUTER JOIN HojyoMA HM1 ON '
            +   '       (HM1.MasterKbn = :PK) '
            +   '   AND (HM1.NCode = PT.PrjNCode) '
            +   '   AND (HM1.RDelKbn = 0) '
            +   'LEFT OUTER JOIN HojyoMA HM2 ON '
            +   '       (HM2.MasterKbn = :PSK) '
            +   '   AND (HM2.NCode = PT.PjSubNCode) '
            +   '   AND (HM2.RDelKbn = 0) '
            +   'WHERE  (PD.MasterKbn=:MK) '
            +   '   AND (PD.HouHou=:HH) '
            +   '   AND (PD.RDelKbn=0) '    // <144> Add
            +   '   AND (MT.RDelKbn=0) ');

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            SQL.Add(' AND PT.PayPtnNo = 1 ');
// <142> 2007/02/20 H.Kawato Mod End

        // ｺｰﾄﾞの範囲指定
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
// <156> 2008/01/15 H.Kawato Mod Start
{
            SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
}
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
// <156> 2008/01/15 H.Kawato Mod End
        end;

        // 出力順序
// <142> 2007/02/20 H.Kawato Mod Start
{
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY MT.GCode          ')  // ｺｰﾄﾞ順
        else    SQL.Add('ORDER BY MT.Renso,MT.GCode '); // 連想順
}
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY GCode,SortPrjGCode,SortPjSubGCode       ')    // ｺｰﾄﾞ順
        else    SQL.Add('ORDER BY Renso,GCode,SortPrjGCode,SortPjSubGCode ');   // 連想順
// <142> 2007/02/20 H.Kawato Mod End

        ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;// ﾏｽﾀ区分
        ParamByName('PK' ).AsInteger := m_iProjectKbn;  // ﾏｽﾀ区分  // <142> Add
        ParamByName('PSK').AsInteger := m_iProjSubKbn;  // ﾏｽﾀ区分  // <142> Add
		case nSelect of
			5: ParamByName('HH').AsInteger := 3;	    // 手形情報登録
			6: ParamByName('HH').AsInteger := 4;	    // 小切手情報登録
		end;

        //	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			fnErrorMessageDsp(Qry);
			Qry.Close();
			Qry.Free();
            Exit;
		end;

		while not EOF do
		begin
// <142> 2007/02/20 H.Kawato Add Start
            if (m_iProAdoptKbn = 1) then
            begin
                if (sSaveCode <> FieldByName ('GCode').AsString) then
                begin
                    sSaveCode   := FieldByName ('GCode').AsString;
                    nPayCnt := nPayCnt + 1;

                    if ((nPayCnt + nDataCnt) mod 52 = 0) then
                    begin
			            MemDraftCheck.Append();
                        MemDraftCheck.FieldByName('GCode').AsString :=  '';     // ダミー用
                        MemDraftCheck.Post();
                        nDataCnt := nDataCnt + 1;
                    end;
                end;
                nDataCnt := nDataCnt + 1;
            end;
// <142> 2007/02/20 H.Kawato Add End

			MemDraftCheck.Append();

			sHojCD  :=  FieldByName ('GCode').AsString;
			if ( m_nCurCodeAttribute <= 1 ) then
			begin
				case (m_nCurCodeAttribute) of
					0:  sFormat :=  '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:  sFormat :=  '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;
				sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
			end;

            // 支払先ｺｰﾄﾞ
			MemDraftCheck.FieldByName('GCode')      .AsString   :=  sHojCD;
            // 簡略名称
			MemDraftCheck.FieldByName('SimpleName') .AsString   :=  FieldByName('Nmk').AsString;

// <142> 2007/02/20 H.Kawato Add Start
            // 条件ﾊﾟﾀｰﾝNo
            MemDraftCheck.FieldByName('PayPtnNo').AsInteger :=  FieldByName('PayPtnNo').Value;

            // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
            if (m_iProAdoptKbn = 1) then
            begin
                MemDraftCheck.FieldByName('PrjHojyoName').AsString  := m_sProjectTitle;     // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add

                sHojCD  :=  FieldByName ('PrjGCode').AsString;
                if ( m_iPrjCodeAttr <= 1 ) and (Trim(sHojCD) <> '') then
                begin
                	case (m_iPrjCodeAttr) of
                		0:  sFormat :=  '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
                		1:  sFormat :=  '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
                	end;
                	sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
                end;

                // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                MemDraftCheck.FieldByName('PrjNCode').AsFloat    :=  FieldByName('PrjNCode').Value;
                // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                MemDraftCheck.FieldByName('PrjGCode').AsString   :=  sHojCD;
                // ﾌﾟﾛｼﾞｪｸﾄ名称
                if (Trim(sHojCD) <> '') then
                    MemDraftCheck.FieldByName('PrjName' ).AsString   :=  FieldByName('PrjName').Value
                else
                    MemDraftCheck.FieldByName('PrjName' ).AsString   :=  'その他';

                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用あり
                if (m_iSubAdoptKbn = 1) then
                begin
                    MemDraftCheck.FieldByName('PjSubHojyoName').AsString  := m_sPjSubTitle; // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add

                    sHojCD  :=  FieldByName ('PjSubGCode').AsString;
                    if ( m_iPjSubCodeAttr <= 1 ) and (Trim(sHojCD) <> '') then
                    begin
                    	case (m_iPjSubCodeAttr) of
                    		0:  sFormat :=  '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
                    		1:  sFormat :=  '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
                    	end;
                    	sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
                    end;

                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                    MemDraftCheck.FieldByName('PjSubNCode').AsFloat  :=  FieldByName('PjSubNCode').Value;
                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
                    MemDraftCheck.FieldByName('PjSubGCode').AsString :=  sHojCD;
                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                    if (Trim(sHojCD) <> '') then
                        MemDraftCheck.FieldByName('PjSubName' ).AsString :=  FieldByName('PjSubName').Value
                    else
                        MemDraftCheck.FieldByName('PjSubName' ).AsString :=  'その他';
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End

            // 依頼口座
			if ( FieldByName('IraiAccNo').IsNull = FALSE ) then
			begin
                // 依頼口座
				MemDraftCheck.FieldByName('IraiAccNo')  .AsInteger  :=  FieldByName('IraiAccNo').AsInteger;
                // 銀行名称
				MemDraftCheck.FieldByName('IraiAccName').AsString   :=  FieldByName('BANK')     .AsString;
                // 預金種別
				case FieldByName('YOKIN').AsInteger of
					1:  sYokin := '普通';
					2:  sYokin := '当座';
					4:  sYokin := '貯蓄';
					9:  sYokin := 'その他';
				end;
                // 預金種別
				MemDraftCheck.FieldByName('AccName')    .AsString   :=  sYokin;
                // 口座番号
				MemDraftCheck.FieldByName('AccNo')      .AsString   :=  fnGetEditedAccountNumber(FieldByName('KOZA').AsString);
			end;

			// 手形情報登録の場合
			if ( nSelect = 5 ) then
			begin
                // ｻｲﾄ
				MemDraftCheck.FieldByName('Site')           .AsInteger  :=  FieldByName('Site')         .AsInteger;
                // 分割枚数
                if ((m_iErUseKbn = 0) or (FieldByName('ERKbn').AsInteger = 0)) then     // <196> ADD
    				MemDraftCheck.FieldByName('TegBunkatuMax')  .AsInteger  :=  FieldByName('TegBunkatuMax').AsInteger;
			end;

// <196> ADD-STR
			if ((nSelect = 5) and ((m_iErUseKbn = 0) or (FieldByName('ERKbn').AsInteger = 0))) or (nSelect <> 5) then
            begin
// <196> ADD-END
                // 郵送区分
                MemDraftCheck.FieldByName('TegYusoName')        .AsString   :=  _YusoKbnItems[FieldByName('TegYusouKbn').AsInteger];
                // 郵送料負担区分
                MemDraftCheck.FieldByName('TegYusoFutanName')   .AsString   :=  _YusoFutanItems[FieldByName('TegYusouFutan').AsInteger];
            end;    // <196> ADD

// <196> ADD-STR
            if (m_iErUseKbn = 1) and (nSelect = 5) then // 電子債権採用ありで手形
            begin
                // 電子債権採用区分
                MemDraftCheck.FieldByName('ERKbnName'    ).AsString     := _ERKbnItems[FieldByName('ERKbn') .AsInteger];

                if (FieldByName('ERKbn').AsInteger = 1) then
                begin
                    // 銀行ｺｰﾄﾞ
                    if ( FieldByName('BankCode').IsNull = FALSE ) then
                        MemDraftCheck.FieldByName('BankCode') .AsInteger  :=  FieldByName('BankCode')       .AsInteger;
                    // 支店ｺｰﾄﾞ
                    if ( FieldByName('BranchCode').IsNull = FALSE ) then
                        MemDraftCheck.FieldByName('BkBraCode').AsInteger  :=  FieldByName('BranchCode')     .AsInteger;

                    // 銀行名称
                    MemDraftCheck.FieldByName('BankName')     .AsString   :=  FieldByName('BankName')       .AsString;
                    // ｶﾅ銀行名称
                    MemDraftCheck.FieldByName('BankKanaName') .AsString   :=  FieldByName('BankKana')       .AsString;
                    // 支店名称
                    MemDraftCheck.FieldByName('BkBraName')    .AsString   :=  FieldByName('BranchName')     .AsString;
                    // ｶﾅ支店名称
                    MemDraftCheck.FieldByName('BraKanaName')  .AsString   :=  FieldByName('BranchKana')     .AsString;
                    // ｶﾅ振込先名
                    MemDraftCheck.FieldByName('TransKanaName').AsString   :=  FieldByName('TransKanaName')  .AsString;
                    // 預金種別
                    case FieldByName('Acckbn').AsInteger of
                        1:  sYokin := '普通';
                        2:  sYokin := '当座';
                        4:  sYokin := '貯蓄';
                        9:  sYokin := 'その他';
                    end;

                    // 預金種別
                    MemDraftCheck.FieldByName('HuriAccKbnName')   .AsString   := sYokin;
                    // 口座番号
                    MemDraftCheck.FieldByName('HuriAccKbnNo')     .AsString   :=  fnGetEditedAccountNumber(FieldByName('AccNo').AsString);
                    // 手数料負担区分
                    if (FieldByName('ChargeFutan').AsInteger = 0) then
//<203>ST
//                        MemDraftCheck.FieldByName('ChargeFutanName')  .AsString   :=  _ChargeFItems[1]
                        MemDraftCheck.FieldByName('ChargeFutanName')  .AsString   :=  _ShortFItems[1]
//<203>ED
                    else
//<203>ST
//                        MemDraftCheck.FieldByName('ChargeFutanName')  .AsString   :=  _ChargeFItems[FieldByName('ChargeFutan').AsInteger];
                        MemDraftCheck.FieldByName('ChargeFutanName')  .AsString   :=  _ShortFItems[FieldByName('ChargeFutan').AsInteger];
//<203>ED

//<203>ST
                    // 手数料計算区分
                    MemDraftCheck.FieldByName('ChargeKbnName').AsString     :=  _ShortKItemsD[FieldByName('ChargeKbn').AsInteger];
//<203>ED

                    MemDraftCheck.FieldByName('VFree1'	    ).AsString      := FieldByName('VFree1').AsString;          // フリー項目
                    MemDraftCheck.FieldByName('VFree2'	    ).AsString      := FieldByName('VFree2').AsString;
                    MemDraftCheck.FieldByName('VFree3'	    ).AsString      := FieldByName('VFree3').AsString;
                    MemDraftCheck.FieldByName('VFree4'	    ).AsString      := FieldByName('VFree4').AsString;
                    MemDraftCheck.FieldByName('VFree5'	    ).AsString      := FieldByName('VFree5').AsString;
                end;
            end;
// <196> ADD-END
            // 最終行判定フラグ
            MemDraftCheck.FieldByName('EOF').AsBoolean   := False;  // <142> Add

			MemDraftCheck.Post();
			Next;
		end;
	end;

// <157> 2008/01/15 H.Kawato Add
    if (MemDraftCheck.RecordCount > 0) then
    begin
// <157> 2008/01/15 H.Kawato Add

// <142> 2007/02/20 H.Kawato Add Start
        MemDraftCheck.Last;
        MemDraftCheck.Edit;
        MemDraftCheck.FieldByName('EOF').AsBoolean   := True;
// <142> 2007/02/20 H.Kawato Add End

    	MemDraftCheck.First;
    end;    // <157> Add

    Qry.Close();
    Qry.Free();

end;

//-----------------------------------------------------------------------------
// fnPrintCheckListOffset() <119>
//	< 相殺情報登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListOffset();
var
	fUse		    :   Boolean;
    Qry             :   TMQuery;
    nPosition,
    nAdoption,
    nDigit,
    nAttribute,
    nUse,i,
    lvMasterKbn     :   Integer;
    sFormat,
	sHojCD,
    sEditCD,
    strDescription  :   String;
    iSbDigit        :   Integer;    // <137> Add
    iSbAttr         :   Integer;    // <137> Add
    nPjSubKbn       :   Integer;    // <142> Add
begin

    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemPrintOffset.Close();
	MemPrintOffset.Open();

	with Qry do
	begin
		Close();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
        SQL.Add('SELECT                                 '
            +   '    MT.GCode       As GCode            '       // 支払先外部ｺｰﾄﾞ
            +   '   ,MT.Nmk         As Nmk              '       // 支払先簡略名称
            +   '   ,MT.Renso       As Renso            '       // 支払先連想
            +   '   ,PO.SousaiNo    As SousaiNo         '       // 相殺No.
            +   '   ,PO.HojKbn1     As HoKbn1           '       // 第１補助区分
            +   '   ,PO.HojKbn2     As HoKbn2           '       // 第２補助区分
            +   '   ,PO.FeeTaxCd    As FeeTaxCd         '       // 消費税ｺｰﾄﾞ
            +   '   ,PO.FeeTaxRt    As FeeTaxRt         '       // 消費税率ｺｰﾄﾞ
            +   '   ,PO.SousaiKin   As SousaiKin        '       // 相殺金額
            +   '   ,PO.KmkNCode    As KmNCd            '       // 科目内部ｺｰﾄﾞ
            +   '   ,KA1.GCode      As KmCd             '       // 科目外部ｺｰﾄﾞ
            +   '   ,KA1.SimpleName As KmNM             '       // 科目簡略名称
            +   '   ,KA1.SubKmkUse  As SubKmkUse        '       // 科目別補助採用区分
            +   '   ,KA1.BmnUse     As BmnUse           '       // 部門採用区分
            +   '   ,KA1.BPKbn      As BPKbn            '       // ＢＳ／ＰＬ区分
            +   '   ,KA1.BankUse    As BankUse          '       // 銀行採用区分
            +   '   ,KA1.ToriUse    As ToriUse          '       // 取引先採用区分
            +   '   ,KA1.ShainUse   As ShainUse         '       // 社員採用区分
            +   '   ,KA1.HojyoUse1  As HojyoUse1        '       // 汎用補助１採用区分
            +   '   ,KA1.HojyoUse2  As HojyoUse2        '       // 汎用補助２採用区分
            +   '   ,KA1.HojyoUse3  As HojyoUse3        '       // 汎用補助３採用区分
            +   '   ,KA1.HojyoUse4  As HojyoUse4        '       // 汎用補助４採用区分
            +   '   ,KA1.HojyoUse5  As HojyoUse5        '       // 汎用補助５採用区分
            +   '   ,KA1.SegUse1    As SegUse1          '       // ｾｸﾞﾒﾝﾄ１採用区分
            +   '   ,KA1.SegUse2    As SegUse2          '       // ｾｸﾞﾒﾝﾄ２採用区分
            +   '   ,KA1.SegUse3    As SegUse3          '       // ｾｸﾞﾒﾝﾄ３採用区分
            +   '   ,KA1.SegUse4    As SegUse4          '       // ｾｸﾞﾒﾝﾄ４採用区分
            +   '   ,KA1.SegUse5    As SegUse5          '       // ｾｸﾞﾒﾝﾄ５採用区分
            +   '   ,KA1.SegUse6    As SegUse6          '       // ｾｸﾞﾒﾝﾄ６採用区分
            +   '   ,KA1.SegUse7    As SegUse7          '       // ｾｸﾞﾒﾝﾄ７採用区分
            +   '   ,KA1.SegUse8    As SegUse8          '       // ｾｸﾞﾒﾝﾄ８採用区分
            +   '   ,KA1.SegUse9    As SegUse9          '       // ｾｸﾞﾒﾝﾄ９採用区分
            +   '   ,KA1.SegUse10   As SegUse10         '       // ｾｸﾞﾒﾝﾄ１０採用区分
            +   '   ,KA1.PrjUse1    As PrjUse1          '       // ﾌﾟﾛｼﾞｪｸﾄ１採用区分
            +   '   ,KA1.PrjUse2    As PrjUse2          '       // ﾌﾟﾛｼﾞｪｸﾄ２採用区分
            +   '   ,KA1.PrjUse3    As PrjUse3          '       // ﾌﾟﾛｼﾞｪｸﾄ３採用区分
            +   '   ,KA1.PrjUse4    As PrjUse4          '       // ﾌﾟﾛｼﾞｪｸﾄ４採用区分
            +   '   ,KA1.PrjUse5    As PrjUse5          '       // ﾌﾟﾛｼﾞｪｸﾄ５採用区分
            +   '   ,KA1.PrjUse6    As PrjUse6          '       // ﾌﾟﾛｼﾞｪｸﾄ６採用区分
            +   '   ,KA1.PrjUse7    As PrjUse7          '       // ﾌﾟﾛｼﾞｪｸﾄ７採用区分
            +   '   ,KA1.PrjUse8    As PrjUse8          '       // ﾌﾟﾛｼﾞｪｸﾄ８採用区分
            +   '   ,KA1.PrjUse9    As PrjUse9          '       // ﾌﾟﾛｼﾞｪｸﾄ９採用区分
            +   '   ,KA1.PrjUse10   As PrjUse10         '       // ﾌﾟﾛｼﾞｪｸﾄ１０採用区分
            +   '   ,PO.SubNCode    As SubNCode         '       // 科目別補助内部ｺｰﾄﾞ
            +   '   ,KA2.SubCode    As SbCd             '       // 科目別補助外部ｺｰﾄﾞ
            +   '   ,KA2.SimpleName As SbNM             '       // 科目別補助簡略名称
// <137> 2006/08/10 H.Kawato Add Start
            +   '   ,KA2.CodeDigit  As SbDigit          '       // 科目別補助ｺｰﾄﾞ桁数
            +   '   ,KA2.CodeAttr   As SbAttr           '       // 科目別補助ｺｰﾄﾞ属性
// <137> 2006/08/10 H.Kawato Add End
            +   '   ,PO.BmnNCode    As BmnNCd           '       // 部門内部ｺｰﾄﾞ
            +   '   ,MA1.GCode      As BmnCd            '       // 部門外部ｺｰﾄﾞ
            +   '   ,MA1.SimpleName As BmnNM            '       // 部門簡略名称
            +   '   ,PO.SegNCode    As SegNCd           '       // ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
            +   '   ,MA2.GCode      As SegCd            '       // ｾｸﾞﾒﾝﾄ外部ｺｰﾄﾞ
            +   '   ,MA2.SimpleName As SegNM            '       // ｾｸﾞﾒﾝﾄ簡略名称
            +   '   ,PO.Hoj1NCode   As Hoj1NCd          '       // 第１補助内部ｺｰﾄﾞ
            +   '   ,PO.Hoj2NCode   As Hoj2NCd          '       // 第２補助内部ｺｰﾄﾞ
            +   '   ,PO.KojNCode    As KojNCd           '       // 工事内部ｺｰﾄﾞ
            +   '   ,MA5.GCode      As KojCd            '       // 工事外部ｺｰﾄﾞ
            +   '   ,MA5.SimpleName As KojNM            '       // 工事簡略名称
            +   '   ,PO.KsyNCode    As KsyNCd           '       // 工種内部ｺｰﾄﾞ
            +   '   ,MA6.GCode      As KsyCd            '       // 工種外部ｺｰﾄﾞ
            +   '   ,MA6.SimpleName As KsyNM            '       // 工種簡略名称
            +   'FROM PayOffsetInfo PO                  '
            +   'LEFT OUTER JOIN MTOKUI MT ON           '
            +   '   (PO.PayNCode=MT.NCode)              '
            +   'LEFT OUTER JOIN KmkMA KA1 ON           '
            +   '       (PO.KmkNCode=KA1.NCode)         '
            +   '   AND (KA1.RDelKbn=0)                 '
            +   '   AND (KA1.MasterKbn=1)               '
            +   'LEFT OUTER JOIN KmkMA KA2 ON           '
            +   '       (PO.SubNCode=KA2.CNCode)        '
            +   '   AND (PO.KmkNCode=KA2.NCode)         '
            +   '   AND (KA2.RDelKbn=0)                 '
            +   '   AND (KA2.MasterKbn=2)               '
            +   'LEFT OUTER JOIN HojyoMA MA1 ON         '
            +   '   (PO.BmnNCode=MA1.NCode)             '
            +   'LEFT OUTER JOIN HojyoMA MA2 ON         '
            +   '   (PO.SegNCode=MA2.NCode)             '
            +   'LEFT OUTER JOIN HojyoMA MA5 ON         '
            +   '   (PO.KojNCode=MA5.NCode)             '
            +   'LEFT OUTER JOIN HojyoMA MA6 ON         '
            +   '   (PO.KsyNCode=MA6.NCode)             '
            +   'WHERE  (PO.MasterKbn=:MK)              '
            +   '   AND ((PO.KmkNCode IS NOT NULL)      '
            +   '   OR   (PO.KmkNCode <> 0))            '
            +   '   AND (KmCd Is Not Null)              ');
}
        SQL.Add('SELECT '
            +   '    ISNULL(MT.NCode, 0) AS PayNCode '                  // 支払先（内部ｺｰﾄﾞ）
            +   '   ,ISNULL(MT.GCode, '''') As GCode '                  // 支払先外部ｺｰﾄﾞ
            +   '   ,ISNULL(MT.Nmk, '''') As Nmk '                      // 支払先簡略名称
            +   '   ,ISNULL(MT.Renso, '''') As Renso '                  // 支払先連想
            +   '   ,ISNULL(PT.PayPtnNo, 1) AS PayPtnNo '               //条件ﾊﾟﾀｰﾝNo
            +   '   ,ISNULL(PT.PrjNCode, 0) AS PrjNCode '               //ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            +   '   ,ISNULL(MA7.GCode, '''') AS PrjGCode '              //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
            +   '   ,ISNULL(MA7.SimpleName, '''') AS PrjName '          //ﾌﾟﾛｼﾞｪｸﾄ名称
            +   '   ,ISNULL(PT.PjSubNCode, 0) AS PjSubNCode '           //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            +   '   ,ISNULL(MA8.GCode, '''') AS PjSubGCode '            //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
            +   '   ,ISNULL(MA8.SimpleName, '''') AS PjSubName '        //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
            +   '   ,ISNULL(MA7.GCode, ''その他'') AS SortPrjGCode '    //ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ(ｿｰﾄ用)
            +   '   ,ISNULL(MA8.GCode, ''その他'') AS SortPjSubGCode '  //ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ(ｿｰﾄ用)
            +   '   ,ISNULL(PO.SousaiNo, 0) As SousaiNo '               // 相殺No.
            +   '   ,ISNULL(PO.HojKbn1, 0) As HoKbn1 '                  // 第１補助区分
            +   '   ,ISNULL(PO.HojKbn2, 0) As HoKbn2 '                  // 第２補助区分
            +   '   ,PO.FeeTaxCd As FeeTaxCd '                          // 消費税ｺｰﾄﾞ
            +   '   ,PO.FeeTaxRt As FeeTaxRt '                          // 消費税率ｺｰﾄﾞ
            +   '   ,PO.SousaiKin As SousaiKin '                        // 相殺金額
            +   '   ,ISNULL(PO.KmkNCode, 0) As KmNCd '                  // 科目内部ｺｰﾄﾞ
            +   '   ,ISNULL(KA1.GCode, 0) As KmCd '                     // 科目外部ｺｰﾄﾞ
            +   '   ,ISNULL(KA1.SimpleName, '''') As KmNM '             // 科目簡略名称
            +   '   ,ISNULL(KA1.SubKmkUse, 0) As SubKmkUse '            // 科目別補助採用区分
            +   '   ,ISNULL(KA1.BmnUse, 0) As BmnUse '                  // 部門採用区分
            +   '   ,ISNULL(KA1.BPKbn, 0) As BPKbn '                    // ＢＳ／ＰＬ区分
            +   '   ,ISNULL(KA1.BankUse, 0) As BankUse '                // 銀行採用区分
            +   '   ,ISNULL(KA1.ToriUse, 0) As ToriUse '                // 取引先採用区分
            +   '   ,ISNULL(KA1.ShainUse, 0) As ShainUse '              // 社員採用区分
            +   '   ,ISNULL(KA1.HojyoUse1, 0) As HojyoUse1 '            // 汎用補助１採用区分
            +   '   ,ISNULL(KA1.HojyoUse2, 0) As HojyoUse2 '            // 汎用補助２採用区分
            +   '   ,ISNULL(KA1.HojyoUse3, 0) As HojyoUse3 '            // 汎用補助３採用区分
            +   '   ,ISNULL(KA1.HojyoUse4, 0) As HojyoUse4 '            // 汎用補助４採用区分
            +   '   ,ISNULL(KA1.HojyoUse5, 0) As HojyoUse5 '            // 汎用補助５採用区分
            +   '   ,ISNULL(KA1.SegUse1, 0) As SegUse1 '                // ｾｸﾞﾒﾝﾄ１採用区分
            +   '   ,ISNULL(KA1.SegUse2, 0) As SegUse2 '                // ｾｸﾞﾒﾝﾄ２採用区分
            +   '   ,ISNULL(KA1.SegUse3, 0) As SegUse3 '                // ｾｸﾞﾒﾝﾄ３採用区分
            +   '   ,ISNULL(KA1.SegUse4, 0) As SegUse4 '                // ｾｸﾞﾒﾝﾄ４採用区分
            +   '   ,ISNULL(KA1.SegUse5, 0) As SegUse5 '                // ｾｸﾞﾒﾝﾄ５採用区分
            +   '   ,ISNULL(KA1.SegUse6, 0) As SegUse6 '                // ｾｸﾞﾒﾝﾄ６採用区分
            +   '   ,ISNULL(KA1.SegUse7, 0) As SegUse7 '                // ｾｸﾞﾒﾝﾄ７採用区分
            +   '   ,ISNULL(KA1.SegUse8, 0) As SegUse8 '                // ｾｸﾞﾒﾝﾄ８採用区分
            +   '   ,ISNULL(KA1.SegUse9, 0) As SegUse9 '                // ｾｸﾞﾒﾝﾄ９採用区分
            +   '   ,ISNULL(KA1.SegUse10, 0) As SegUse10 '              // ｾｸﾞﾒﾝﾄ１０採用区分
            +   '   ,ISNULL(KA1.PrjUse1, 0) As PrjUse1 '                // ﾌﾟﾛｼﾞｪｸﾄ１採用区分
            +   '   ,ISNULL(KA1.PrjUse2, 0) As PrjUse2 '                // ﾌﾟﾛｼﾞｪｸﾄ２採用区分
            +   '   ,ISNULL(KA1.PrjUse3, 0) As PrjUse3 '                // ﾌﾟﾛｼﾞｪｸﾄ３採用区分
            +   '   ,ISNULL(KA1.PrjUse4, 0) As PrjUse4 '                // ﾌﾟﾛｼﾞｪｸﾄ４採用区分
            +   '   ,ISNULL(KA1.PrjUse5, 0) As PrjUse5 '                // ﾌﾟﾛｼﾞｪｸﾄ５採用区分
            +   '   ,ISNULL(KA1.PrjUse6, 0) As PrjUse6 '                // ﾌﾟﾛｼﾞｪｸﾄ６採用区分
            +   '   ,ISNULL(KA1.PrjUse7, 0) As PrjUse7 '                // ﾌﾟﾛｼﾞｪｸﾄ７採用区分
            +   '   ,ISNULL(KA1.PrjUse8, 0) As PrjUse8 '                // ﾌﾟﾛｼﾞｪｸﾄ８採用区分
            +   '   ,ISNULL(KA1.PrjUse9, 0) As PrjUse9 '                // ﾌﾟﾛｼﾞｪｸﾄ９採用区分
            +   '   ,ISNULL(KA1.PrjUse10, 0) As PrjUse10 '              // ﾌﾟﾛｼﾞｪｸﾄ１０採用区分
            +   '   ,ISNULL(PO.SubNCode, 0) As SubNCode '               // 科目別補助内部ｺｰﾄﾞ
            +   '   ,ISNULL(KA2.SubCode, '''') As SbCd '                // 科目別補助外部ｺｰﾄﾞ
            +   '   ,ISNULL(KA2.SimpleName, '''') As SbNM '             // 科目別補助簡略名称
            +   '   ,ISNULL(KA2.CodeDigit, 0) As SbDigit '              // 科目別補助ｺｰﾄﾞ桁数
            +   '   ,ISNULL(KA2.CodeAttr, 0) As SbAttr '                // 科目別補助ｺｰﾄﾞ属性
            +   '   ,ISNULL(PO.BmnNCode, 0) As BmnNCd '                 // 部門内部ｺｰﾄﾞ
            +   '   ,ISNULL(MA1.GCode, '''') As BmnCd '                 // 部門外部ｺｰﾄﾞ
            +   '   ,ISNULL(MA1.SimpleName, '''') As BmnNM '            // 部門簡略名称
            +   '   ,ISNULL(PO.SegNCode, 0) As SegNCd '                 // ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
            +   '   ,ISNULL(MA2.GCode, '''') As SegCd '                 // ｾｸﾞﾒﾝﾄ外部ｺｰﾄﾞ
            +   '   ,ISNULL(MA2.SimpleName, '''') As SegNM '            // ｾｸﾞﾒﾝﾄ簡略名称
            +   '   ,ISNULL(PO.Hoj1NCode, 0) As Hoj1NCd '               // 第１補助内部ｺｰﾄﾞ
            +   '   ,ISNULL(PO.Hoj2NCode, 0) As Hoj2NCd '               // 第２補助内部ｺｰﾄﾞ
            +   '   ,ISNULL(PO.KojNCode, 0) As KojNCd '                 // 工事内部ｺｰﾄﾞ
            +   '   ,ISNULL(MA5.GCode, '''') As KojCd '                 // 工事外部ｺｰﾄﾞ
            +   '   ,ISNULL(MA5.SimpleName, '''') As KojNM '            // 工事簡略名称
            +   '   ,ISNULL(PO.KsyNCode, 0) As KsyNCd '                 // 工種内部ｺｰﾄﾞ
            +   '   ,ISNULL(MA6.GCode, '''') As KsyCd '                 // 工種外部ｺｰﾄﾞ
            +   '   ,ISNULL(MA6.SimpleName, '''') As KsyNM '            // 工種簡略名称
            +   '   ,ISNULL(KI.PartKbn, 0) As PartKbn  '                // 工種管理区分
            +   'FROM PayOffsetInfo PO '
// <199> MOD-STR
//          +   'LEFT OUTER JOIN MTOKUI MT ON '
//          +   '   (PO.PayNCode=MT.NCode) '
            +   'INNER JOIN MTOKUI MT ON '
            +   '      (PO.PayNCode=MT.NCode '
            +   '   AND MT.RDelKbn=0 '
            +   '   AND MT.HojyoKbn2=1 '
            +   '   AND MT.SumKbn=0) '
// <199> MOD-END
            +   'LEFT OUTER JOIN PayPtnInfo PT ON '
            +   '       (PT.MasterKbn = :MK)'
            +   '   AND (PT.PayNCode = MT.NCode) '
            +   '   AND (PT.PayPtnNo = PO.PayPtnNo) '
            +   '   AND (PT.RDelKbn = 0) '
            +   'LEFT OUTER JOIN KmkMA KA1 ON '
            +   '       (PO.KmkNCode=KA1.NCode) '
            +   '   AND (KA1.RDelKbn=0) '
            +   '   AND (KA1.MasterKbn=1) '
            +   'LEFT OUTER JOIN KmkMA KA2 ON '
            +   '       (PO.SubNCode=KA2.CNCode) '
            +   '   AND (PO.KmkNCode=KA2.NCode) '
            +   '   AND (KA2.RDelKbn=0) '
            +   '   AND (KA2.MasterKbn=2) '
// <149> 2007/07/19 H.Kawato Mod Start
{
            +   'LEFT OUTER JOIN HojyoMA MA1 ON '
            +   '   (PO.BmnNCode=MA1.NCode) '
            +   'LEFT OUTER JOIN HojyoMA MA2 ON '
            +   '   (PO.SegNCode=MA2.NCode) '
            +   'LEFT OUTER JOIN HojyoMA MA5 ON '
            +   '   (PO.KojNCode=MA5.NCode) '
            +   'LEFT OUTER JOIN HojyoMA MA6 ON '
            +   '   (PO.KsyNCode=MA6.NCode) '
}
            +   'LEFT OUTER JOIN HojyoMA MA1 ON '
            +   '   (PO.BmnNCode=MA1.NCode AND MA1.MasterKbn = 41) '
            // 会社で採用している、かつ科目で採用しているｾｸﾞﾒﾝﾄの中で先頭のマスタ区分を指定する
            +   'LEFT OUTER JOIN HojyoMA MA2 ON (PO.SegNCode=MA2.NCode AND MA2.MasterKbn = (SELECT '
            +   ' (IF (ISNULL(KA1.SegUse1, 0) > 0) AND ((SELECT ISNULL(MT1.UseKbn, 0) FROM MasterInfo AS MT1 WHERE MasterKbn = 101) > 0) THEN 101 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse2, 0) > 0) AND ((SELECT ISNULL(MT2.UseKbn, 0) FROM MasterInfo AS MT2 WHERE MasterKbn = 102) > 0) THEN 102 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse3, 0) > 0) AND ((SELECT ISNULL(MT3.UseKbn, 0) FROM MasterInfo AS MT3 WHERE MasterKbn = 103) > 0) THEN 103 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse4, 0) > 0) AND ((SELECT ISNULL(MT4.UseKbn, 0) FROM MasterInfo AS MT4 WHERE MasterKbn = 104) > 0) THEN 104 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse5, 0) > 0) AND ((SELECT ISNULL(MT5.UseKbn, 0) FROM MasterInfo AS MT5 WHERE MasterKbn = 105) > 0) THEN 105 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse6, 0) > 0) AND ((SELECT ISNULL(MT6.UseKbn, 0) FROM MasterInfo AS MT6 WHERE MasterKbn = 106) > 0) THEN 106 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse7, 0) > 0) AND ((SELECT ISNULL(MT7.UseKbn, 0) FROM MasterInfo AS MT7 WHERE MasterKbn = 107) > 0) THEN 107 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse8, 0) > 0) AND ((SELECT ISNULL(MT8.UseKbn, 0) FROM MasterInfo AS MT8 WHERE MasterKbn = 108) > 0) THEN 108 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse9, 0) > 0) AND ((SELECT ISNULL(MT9.UseKbn, 0) FROM MasterInfo AS MT9 WHERE MasterKbn = 109) > 0) THEN 109 ELSE '
            +   ' (IF (ISNULL(KA1.SegUse10, 0) > 0) AND ((SELECT ISNULL(MT10.UseKbn, 0) FROM MasterInfo AS MT10 WHERE MasterKbn = 110) > 0) THEN 110 ELSE '
            +   ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF))) '
            // 会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄの中で先頭のマスタ区分を指定する
            +   'LEFT OUTER JOIN HojyoMA MA5 ON (PO.KojNCode=MA5.NCode AND MA5.MasterKbn = (SELECT '
            +   ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) THEN 201 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) THEN 202 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) THEN 203 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) THEN 204 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) THEN 205 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) THEN 206 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) THEN 207 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) THEN 208 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) THEN 209 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) THEN 210 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) THEN 201 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) THEN 202 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) THEN 203 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) THEN 204 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) THEN 205 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) THEN 206 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) THEN 207 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) THEN 208 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) THEN 209 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) THEN 210 ELSE '
            +   ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF))) '
            // 会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄｻﾌﾞの中で先頭のマスタ区分を指定する
            +   'LEFT OUTER JOIN HojyoMA MA6 ON (PO.KsyNCode=MA6.NCode AND MA6.MasterKbn = (SELECT '
            +   ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE '
            +   ' (IF (ISNULL(KA1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE '
            +   ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF))) '
// <149> 2007/07/19 H.Kawato Mod End
            +   'LEFT OUTER JOIN HojyoMA MA7 ON '
            +   '       (MA7.MasterKbn = :PK) '
            +   '   AND (MA7.NCode = PT.PrjNCode) '
            +   '   AND (MA7.RDelKbn = 0) '
            +   'LEFT OUTER JOIN HojyoMA MA8 ON '
            +   '       (MA8.MasterKbn = :PSK) '
            +   '   AND (MA8.NCode = PT.PjSubNCode) '
            +   '   AND (MA8.RDelKbn = 0) '
            +   'LEFT OUTER JOIN KojiInfo KI ON '
            +   '       (KI.NCode = PO.KojNCode) '
            +   'WHERE  (PO.MasterKbn=:MK) '
            +   '   AND (PO.RDelKbn = 0) '  // <144> Add
            +   '   AND ((PO.KmkNCode IS NOT NULL) '
            +   '   OR   (PO.KmkNCode <> 0)) '
            +   '   AND (KA1.GCode Is Not Null) ');

        if (m_iProAdoptKbn = 0) then    // ﾌﾟﾛｼﾞｪｸﾄ別支払採用なし
            SQL.Add(' AND PT.PayPtnNo = 1 ');
// <142> 2007/02/20 H.Kawato Mod End

        // ｺｰﾄﾞの範囲指定
        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
// <156> 2008/01/15 H.Kawato Mod Start
{
            SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
}
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
// <156> 2008/01/15 H.Kawato Mod End
        end;

        // 出力順序
// <142> 2007/02/20 H.Kawato Mod Start
{
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY MT.GCode,PO.SousaiNo  ')  // ｺｰﾄﾞ順
        else    SQL.Add('ORDER BY MT.Renso,PO.SousaiNo  '); // 連想順
}
        if ( uvHani.pvrOrder = 0 ) then
// <188> MOD-STR
//      else    SQL.Add('ORDER BY Renso,SortPrjGCode,SortPjSubGCode,SousaiNo  ');   // 連想順
        else    SQL.Add('ORDER BY Renso,GCode,SortPrjGCode,SortPjSubGCode,SousaiNo  ');   // 連想順
// <188> MOD-END
// <142> 2007/02/20 H.Kawato Mod End

        ParamByName('MK' ).AsInteger := MASTER_CUSTOMER;    // ﾏｽﾀ区分
        ParamByName('PK' ).AsInteger := m_iProjectKbn;      // ﾏｽﾀ区分 <142> Add
        ParamByName('PSK').AsInteger := m_iProjSubKbn;      // ﾏｽﾀ区分 <142> Add

        //	ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			fnErrorMessageDsp(Qry);
			Qry.Close();
			Qry.Free();
            Exit;
		end;

		while not EOF do
		begin
			MemPrintOffset.Append();

			sHojCD  :=  FieldByName('GCode').AsString;
			if ( m_nCurCodeAttribute <= 1 ) then
			begin
				case (m_nCurCodeAttribute) of
					0:  sFormat :=  '%'  + IntToStr(m_nCurCodeDigit) + 'd';
					1:  sFormat :=  '%.' + IntToStr(m_nCurCodeDigit) + 'd';
				end;
				sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
			end;

            // 支払先ｺｰﾄﾞ
			MemPrintOffset.FieldByName('GCode')     .AsString   :=  sHojCD;
            // 支払先簡略名称
			MemPrintOffset.FieldByName('SimpleName').AsString   :=  FieldByName('Nmk')      .AsString;

// <142> 2007/02/20 H.Kawato Add Start
            // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
            if (m_iProAdoptKbn = 1) then
            begin
                MemPrintOffset.FieldByName('PrjHojyoName').AsString  := m_sProjectTitle;        // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add
                
                sHojCD  :=  FieldByName('PrjGCode').Value;
                if ( m_iPrjCodeAttr <= 1 ) and (Trim(sHojCD) <> '') then
                begin
                	case (m_iPrjCodeAttr) of
                		0:  sFormat :=  '%'  + IntToStr(m_iPrjCodeDigit) + 'd';
                		1:  sFormat :=  '%.' + IntToStr(m_iPrjCodeDigit) + 'd';
                	end;
                	sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
                end;

                // ﾌﾟﾛｼﾞｪｸﾄ簡略名称
                MemPrintOffset.FieldByName('PrjNCode').AsFloat    :=  FieldByName('PrjNCode').Value;
                // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                MemPrintOffset.FieldByName('PrjGCode').AsString   :=  sHojCD;
                // ﾌﾟﾛｼﾞｪｸﾄ簡略名称
                if (Trim(sHojCD) <> '') then
                    MemPrintOffset.FieldByName('PrjName' ).AsString   :=  FieldByName('PrjName').Value
                else
                    MemPrintOffset.FieldByName('PrjName' ).AsString   :=  'その他';

                MemPrintOffset.FieldByName('PrjAttr').AsInteger   :=  m_iPrjCodeAttr;           // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ属性 <145> Add

                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用あり
                if (m_iSubAdoptKbn = 1) then
                begin
                    MemPrintOffset.FieldByName('PjSubHojyoName').AsString  := m_sPjSubTitle;    // ﾌﾟﾛｼﾞｪｸﾄ補助名称 <142> Add

                    sHojCD  :=  FieldByName('PjSubGCode').Value;
                    if ( m_iPrjCodeAttr <= 1 ) and (Trim(sHojCD) <> '') then
                    begin
                    	case (m_iPrjCodeAttr) of
                    		0:  sFormat :=  '%'  + IntToStr(m_iPrjCodeDigit) + 'd';
                    		1:  sFormat :=  '%.' + IntToStr(m_iPrjCodeDigit) + 'd';
                    	end;
                        if (sHojCD <> '') then  // <187> ADD
                    	    sHojCD  :=  Format(sFormat,[StrToInt64(Trim(sHojCD))]);
                    end;

                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ簡略名称
                    MemPrintOffset.FieldByName('PjSubNCode').AsFloat    :=  FieldByName('PjSubNCode').Value;
                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
                    MemPrintOffset.FieldByName('PjSubGCode').AsString   :=  sHojCD;
                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ簡略名称
                    if (Trim(sHojCD) <> '') then
                        MemPrintOffset.FieldByName('PjSubName' ).AsString   :=  FieldByName('PjSubName').Value
                    else
                        MemPrintOffset.FieldByName('PjSubName' ).AsString   :=  'その他';

                    MemPrintOffset.FieldByName('PjSubAttr').AsInteger   :=  m_iPrjCodeAttr;     // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ属性 <145> Add
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End

            // 相殺No
			MemPrintOffset.FieldByName('SousaiNo')  .AsInteger  :=  FieldByName('SousaiNo') .AsInteger;
            // 科目ｺｰﾄﾞ
			MemPrintOffset.FieldByName('KmCD')      .AsInteger  :=  FieldByName('KmCd')     .AsInteger;
            // 科目簡略名称
			MemPrintOffset.FieldByName('KmCDName')  .AsString   :=  FieldByName('KmNM')     .AsString;

            nPosition   :=  1;

            // 第一第二補助の採用ﾏｽﾀを取得
            fnGetHojyoMA(Qry);

            // -----------------
            //      部門
            // -----------------
   			fnGetAdoptInformation(MASTER_SECTION,nAdoption,nDigit,nAttribute,strDescription);

  			if (((FieldByName('BmnUse').AsInteger <> 0) and (nAdoption <> 0)) and
                 (not ((FieldByName('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
			begin
// <136> 2006/08/10 H.Kawato Add Start
                if (FieldByName('BmnNCd').AsFloat = 0) then
                begin
                    // 部門属性
                    MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                    // 部門ｺｰﾄﾞ
                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).Clear();
                    // 部門簡略名称
                    MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                end
                else
                begin
// <136> 2006/08/10 H.Kawato Add End
                    sEditCD :=  FieldByName('BmnCd').AsString;
                    if ( nAttribute <= 1 ) then
                    begin
                        case nAttribute of
                            0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                            1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                        end;
                        if (sEditCD <> '') then  // <187> ADD
                            sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                    end;

                    // 部門属性
                    MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                    // 部門ｺｰﾄﾞ
                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  sEditCD;
                    // 部門簡略名称
                    MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  FieldByName('BmnNM').AsString;
                end;    // <136>

				nPosition   :=  nPosition + 1;
			end;

            fUse        := False;   // <142> Add
            nPjSubKbn   := 0;       // <142> Add

            // ----------------------------
            //      工事・ﾌﾟﾛｼﾞｪｸﾄ
            // ----------------------------
			if ( nPosition <= 3 ) then
			begin
       			fnGetAdoptInformation(MASTER_CONSTRUCT,nAdoption,nDigit,nAttribute,strDescription);

                nUse    :=  MASTER_CONSTRUCT - 200;
                fUse    :=  FALSE;

                if ( nUse >= 1 ) and ( nUse <= 10 ) then
                begin
// <142> 2007/02/20 H.Kawato Mod
//    	        	if (( FieldByName('PrjUse'+IntToStr(nUse)).AsInteger = 1 ) and ( nAdoption <> 0 )) then
    	        	if (( FieldByName('PrjUse'+IntToStr(nUse)).AsInteger >= 1 ) and ( nAdoption <> 0 )) then
        			begin
// <136> 2006/08/10 H.Kawato Add Start
                        if (FieldByName('KojNCd').AsFloat = 0) then
                        begin
                            // 工事・ﾌﾟﾛｼﾞｪｸﾄ属性
                            MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                            // 工事・ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                            MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).Clear();
                            // 工事・ﾌﾟﾛｼﾞｪｸﾄ簡略名称
                            MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                        end
                        else
                        begin
// <136> 2006/08/10 H.Kawato Add End
                            sEditCD :=  FieldByName('KojCd').AsString;

                            if ( nAttribute <= 1 ) then
                            begin
                                case nAttribute of
                                    0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                                    1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                                end;
                                if (sEditCD <> '') then  // <187> ADD
                                    sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                            end;

                            // 工事・ﾌﾟﾛｼﾞｪｸﾄ属性
                            MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                            // 工事・ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                            MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  sEditCD;
                            // 工事・ﾌﾟﾛｼﾞｪｸﾄ簡略名称
                            MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  FieldByName('KojNM').AsString;
                        end;    // <136>

        				nPosition   :=  nPosition + 1;
                        fUse        :=  TRUE;
                        nPjSubKbn   :=  MASTER_CONSTRUCT + 100;     // <142> Add
                    end;
                end;

                if ( fUse = FALSE ) then
                begin
                    for i := 1 to 10 do
                    begin
                        lvMasterKbn :=  200 + i;

                        if ( lvMasterKbn <> MASTER_CONSTRUCT ) then
                        begin
                            fnGetAdoptInformation(lvMasterKbn,nAdoption,nDigit,nAttribute,strDescription);
                            nUse    :=  StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

// <142> 2007/04/16 H.Kawato Mod
//         		        	if (( FieldByName('PrjUse'+IntToStr(nUse)).AsInteger = 1 ) and ( nAdoption <> 0 )) then
         		        	if (( FieldByName('PrjUse'+IntToStr(nUse)).AsInteger >= 1 ) and ( nAdoption <> 0 )) then
         			        begin
// <136> 2006/08/10 H.Kawato Add Start
                                if (FieldByName('KojNCd').AsFloat = 0) then
                                begin
                                    // 工事・ﾌﾟﾛｼﾞｪｸﾄ属性
                                    MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                                    // 工事・ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).Clear();
                                    // 工事・ﾌﾟﾛｼﾞｪｸﾄ簡略名称
                                    MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                                end
                                else
                                begin
// <136> 2006/08/10 H.Kawato Add End
                                    sEditCD :=  FieldByName('KojCd').AsString;

                                    if ( nAttribute <= 1 ) then
                                    begin
                                        case nAttribute of
                                            0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                                            1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                                        end;
                                        if (sEditCD <> '') then  // <187> ADD
                                            sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                                    end;

                                    // 工事・ﾌﾟﾛｼﾞｪｸﾄ属性
                                    MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                                    // 工事・ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  sEditCD;
                                    // 工事・ﾌﾟﾛｼﾞｪｸﾄ簡略名称
                                    MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  FieldByName('KojNM').AsString;
                                end;    // <136>

                				nPosition   :=  nPosition + 1;
                                fUse        :=  TRUE;               // <148> Add
                                nPjSubKbn   :=  lvMasterKbn + 100;  // <142> Add
                                break;
                            end;
                        end;
                    end;
	    		end;
            end;

// <142> 2007/02/20 H.Kawato Add Start
            // ----------------------------
            //      工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            // ----------------------------
			if ( nPosition <= 3 ) and (fUse = True) then
			begin
       			fnGetAdoptInformation(nPjSubKbn,nAdoption,nDigit,nAttribute,strDescription);

                nUse    :=  nPjSubKbn - 300;

                if ( nUse >= 1 ) and ( nUse <= 10 ) then
                begin
    	        	if (( FieldByName('PrjUse'+IntToStr(nUse)).Value >= 1 ) and
                        ( FieldByName('PartKbn').Value > 0 ) and ( nAdoption <> 0 )) then
        			begin
                        if (FieldByName('KsyNCd').AsFloat = 0) then
                        begin
                            // 工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ属性
                            MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                            // 工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
                            MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).Clear();
                            // 工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ簡略名称
                            MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                        end
                        else
                        begin
                            sEditCD :=  FieldByName('KsyCd').AsString;

                            if ( nAttribute <= 1 ) then
                            begin
                                case nAttribute of
                                    0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                                    1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                                end;
                                if (sEditCD <> '') then  // <187> ADD
                                    sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                            end;

                            // 工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ属性
                            MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                            // 工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
                            MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  sEditCD;
                            // 工種・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ簡略名称
                            MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  FieldByName('KsyNM').AsString;
                        end;    // <136>

        				nPosition   :=  nPosition + 1;
                    end;
                end;
            end;
// <142> 2007/02/20 H.Kawato Add End

            // ----------------------
            //      科目別補助
            // ----------------------
            fnGetAdoptInformation(MASTER_SUBJECTPLUS,nAdoption,nDigit,nAttribute,strDescription);
	    	if	(( FieldByName ('SubKmkUse').AsInteger = 1 ) and ( nAdoption <> 0 )) then
			begin
// <137> 2006/08/10 H.Kawato Add Start
                if (FieldByName('SubNCode').AsFloat = 0) then
                begin
                    // 科目別補助属性
                    MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                    // 科目別補助ｺｰﾄﾞ
                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).Clear();
                    // 科目別補助簡略名称
                    MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                end
                else
                begin
                    // 外部ｺｰﾄﾞの取得
                    sEditCD :=  FieldByName('SbCd').AsString;
                    // 科目別補助ｺｰﾄﾞ桁数
                    iSbDigit := FieldByName('SbDigit').AsInteger;
                    // 科目別補助ｺｰﾄﾞ属性
                    iSbAttr := FieldByName('SbAttr').AsInteger;

                    if ( iSbAttr <= 1 ) then
                    begin
                        case iSbAttr of
                            0:  sFormat :=  '%'  + IntToStr(iSbDigit) + 'd';
                            1:  sFormat :=  '%.' + IntToStr(iSbDigit) + 'd';
                        end;
                        if (sEditCD <> '') then  // <187> ADD
                            sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                    end;
// <137> 2006/08/10 H.Kawato Add End
                    // 科目別補助属性
                    MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                    // 科目別補助ｺｰﾄﾞ
// <136> 2006/08/10 H.Kawato Mod
//                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  FieldByName('SbCd').AsString;
                    MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  sEditCD;
                    // 科目別補助簡略名称
                    MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  FieldByName('SbNM').AsString;
                end;    // <137>

				nPosition   :=  nPosition + 1;
			end;

            // ----------------------
            //      第１補助
            // ----------------------
			if (nPosition <= 3) then
			begin
  				fnGetAdoptInformation(MASTER_HOJYO1,nAdoption,nDigit,nAttribute,strDescription);
   				if (( nAdoption <> 0 ) and ( FieldByName('Hoj1NCd').AsFloat <> 0 ))then
				begin
// <136> 2006/08/10 H.Kawato Add Start
                    if (FieldByName('Hoj1NCd').AsFloat = 0) then
                    begin
                        // 第１補助属性
                        MemPrintOffset.FieldByName(Format('HojCDAttr%.2d' ,[nPosition])).AsInteger  :=  nAttribute;
                        // 第１補助ｺｰﾄﾞ
                        MemPrintOffset.FieldByName(Format('HojCD%.2d',     [nPosition])).Clear();
                        // 第１補助簡略名称
                        MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                    end
                    else
                    begin
// <136> 2006/08/10 H.Kawato Add End
                        // 外部ｺｰﾄﾞの取得
                        sEditCD :=  fnGetHojGCode(MASTER_HOJYO1,FieldByName('Hoj1NCd').AsFloat,strDescription);

                        if ( nAttribute <= 1 ) then
                        begin
                            case nAttribute of
                                0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                                1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                            end;
                            if (sEditCD <> '') then  // <187> ADD
                                sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                        end;

                        // 第１補助属性
                        MemPrintOffset.FieldByName(Format('HojCDAttr%.2d' ,[nPosition])).AsInteger  :=  nAttribute;
                        // 第１補助ｺｰﾄﾞ
                        MemPrintOffset.FieldByName(Format('HojCD%.2d',     [nPosition])).AsString   :=  sEditCD;
                        // 第１補助簡略名称
                        MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  strDescription;
                    end;    // <136>

					nPosition   :=  nPosition + 1;
				end;
			end;

            // ----------------------
            //      第２補助
            // ----------------------
			if ( nPosition <= 3 ) then
			begin
  				fnGetAdoptInformation(MASTER_HOJYO2,nAdoption,nDigit,nAttribute,strDescription);
   				if (( nAdoption <> 0 ) and ( FieldByName('Hoj2NCd').AsFloat <> 0)) then
				begin
// <136> 2006/08/10 H.Kawato Add Start
                    if (FieldByName('Hoj2NCd').AsFloat = 0) then
                    begin
                        // 第２補助属性
                        MemPrintOffset.FieldByName(Format('HojCDAttr%.2d' ,[nPosition])).AsInteger  :=  nAttribute;
                        // 第２補助ｺｰﾄﾞ
                        MemPrintOffset.FieldByName(Format('HojCD%.2d',     [nPosition])).Clear();
                        // 第２補助簡略名称
                        MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                    end
                    else
                    begin
// <136> 2006/08/10 H.Kawato Add End
                        // 外部ｺｰﾄﾞの取得
                        sEditCD :=  fnGetHojGCode(MASTER_HOJYO2,FieldByName('Hoj2NCd').AsFloat,strDescription);

                        if ( nAttribute <= 1 ) then
                        begin
                            case nAttribute of
                                0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                                1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                            end;
                            if (sEditCD <> '') then  // <187> ADD
                                sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                        end;

                        // 第２補助属性
                        MemPrintOffset.FieldByName(Format('HojCDAttr%.2d' ,[nPosition])).AsInteger  :=  nAttribute;
                        // 第２補助ｺｰﾄﾞ
                        MemPrintOffset.FieldByName(Format('HojCD%.2d',     [nPosition])).AsString   :=  sEditCD;
                        // 第２補助簡略名称
                        MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  strDescription;
                    end;    // <136>

                    nPosition := nPosition + 1;
				end;
			end;

            // ----------------------
            //      ｾｸﾞﾒﾝﾄ
            // ----------------------
            if ( nPosition <= 3 ) then
            begin
                for i := 1 to 10 do
                begin
                    lvMasterKbn :=  100 + i;

           			fnGetAdoptInformation(lvMasterKbn,nAdoption,nDigit,nAttribute,strDescription);
                    nUse    :=  StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

		        	if	(((FieldByName ('SegUse'+IntToStr(nUse)).AsInteger <> 0) and (nAdoption <> 0)) and
    		        	 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
    		    	begin
// <136> 2006/08/10 H.Kawato Add Start
                        if (FieldByName('SegNCd').AsFloat = 0) then
                        begin
                            // ｾｸﾞﾒﾝﾄ属性
                            MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                            // ｾｸﾞﾒﾝﾄｺｰﾄﾞ
                            MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).Clear();
                            // ｾｸﾞﾒﾝﾄ簡略名称
                            MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).Clear();
                        end
                        else
                        begin
// <136> 2006/08/10 H.Kawato Add End
                            sEditCD :=  FieldByName('SegCd').AsString;

                            if ( nAttribute <= 1 ) then
                            begin
                                case nAttribute of
                                    0:  sFormat :=  '%'  + IntToStr(nDigit) + 'd';
                                    1:  sFormat :=  '%.' + IntToStr(nDigit) + 'd';
                                end;
                                if (sEditCD <> '') then  // <187> ADD
                                    sEditCD :=  Format(sFormat,[StrToInt64(Trim(sEditCD))]);
                            end;

                            // ｾｸﾞﾒﾝﾄ属性
                            MemPrintOffset.FieldByName(Format('HojCDAttr%.2d',[nPosition])).AsInteger   :=  nAttribute;
                            // ｾｸﾞﾒﾝﾄｺｰﾄﾞ
                            MemPrintOffset.FieldByName(Format('HojCD%.2d',    [nPosition])).AsString    :=  sEditCD;
                            // ｾｸﾞﾒﾝﾄ簡略名称
                            MemPrintOffset.FieldByName(Format('HojCDName%.2d',[nPosition])).AsString    :=  FieldByName('SegNM').AsString;
                        end;    // <136>
                        break;
	    	    	end;
                end;
            end;

// <#TAX10> ADD-STR
			MemPrintOffset.FieldByName('TaxCodePrt').Clear;
			MemPrintOffset.FieldByName('TaxRateDesc').Clear;
			MemPrintOffset.FieldByName('TaxRatePrt').Clear;
			MemPrintOffset.FieldByName('TaxCodeMark').Clear;
// <#TAX10> ADD-END

            // 消費税ｺｰﾄﾞ
			if ( not FieldByName ('FeeTaxCd').IsNull ) then
// <#TAX10> MOD-STR
//				MemPrintOffset.FieldByName('TaxCD').AsInteger   :=  FieldByName ('FeeTaxCd').AsInteger;
			begin
				MemPrintOffset.FieldByName('TaxCD').AsInteger   :=  FieldByName ('FeeTaxCd').AsInteger;
				MemPrintOffset.FieldByName('TaxCodePrt').AsString := IntToStr(FieldByName('FeeTaxCd').AsInteger);
			end;
// <#TAX10> MOD-END


			if (( FieldByName('FeeTaxCd').AsInteger = 30 )  or
                ( FieldByName('FeeTaxCd').AsInteger = 40 )) then
			begin
				MemPrintOffset.FieldByName('TaxRate').AsString  :=  '';
			end
			else
			begin
				// 消費税率ｺｰﾄﾞ
				if ( not FieldByName ('FeeTaxRt').IsNull ) then
				begin
// <TX26> MOD-STR
//					MemPrintOffset.FieldByName('TaxRate').AsString  :=  _TaxRateItems[FieldByName('FeeTaxRt').AsInteger];
// <#TAX10> MOD-STR
//					MemPrintOffset.FieldByName('TaxRate').AsString  :=  m_TaxRateInfo.GetTaxNameByRateCD(FieldByName('FeeTaxRt').AsInteger);
					MemPrintOffset.FieldByName('TaxRate').AsString		:= fnGetTaxRateName(FieldByName('FeeTaxRt').AsInteger);

					//CSV出力用
					MemPrintOffset.FieldByName('TaxRateDesc').AsString	:= m_TaxRateInfoFront.GetTaxNameByRateCD(m_nTaxKbn, 
																												 FieldbyName ('FeeTaxCd').AsInteger, 
																												 FieldByName ('FeeTaxRt').AsInteger);

					//CSV出力用
					MemPrintOffset.FieldByName('TaxCodeMark').AsString	:= GetCsvTaxCodeMark(False, 
																							 m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(FieldByName('FeeTaxRt').AsInteger)), 
																							 m_TaxRateInfo.Mark);

					//印刷用
					MemPrintOffset.FieldByName('TaxCodePrt').AsString	:= GetPrintTaxCode(False,
																						   m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(FieldByName('FeeTaxRt').AsInteger)), 
																						   FieldByName('FeeTaxCd').AsInteger,
																						   m_TaxRateInfo.Mark);

					//印刷用
					MemPrintOffset.FieldByName('TaxRatePrt').AsString	:= GetPrintTaxRate(FieldByName('FeeTaxCd').AsInteger,
																						   MemPrintOffset.FieldByName('TaxRateDesc').AsString,
																						   m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(FieldByName ('FeeTaxRt').AsInteger)),
																						   MemPrintOffset.FieldByName('TaxRateDesc').AsString);
// <#TAX10> MOD-END
// <TX26> MOD-END
				end
				else
				begin
					MemPrintOffset.FieldByName('TaxRate').AsString  :=  '';
				end;
			end;

            // 相殺金額
			if ( not FieldByName('SousaiKin').IsNull ) then
				MemPrintOffset.FieldByName('SousaiKin').AsCurrency  :=  FieldByName('SousaiKin').Value;

            // 最終行判定フラグ
            MemPrintOffset.FieldByName('EOF').AsBoolean   := False; // <142> Add

			MemPrintOffset.Post();
			Next;
		end;
	end;

// <157> 2008/01/15 H.Kawato Add
    if (MemPrintOffset.RecordCount > 0) then
    begin
// <157> 2008/01/15 H.Kawato Add

// <142> 2007/02/20 H.Kawato Add Start
        MemPrintOffset.Last;
        MemPrintOffset.Edit;
        MemPrintOffset.FieldByName('EOF').AsBoolean   := True;
// <142> 2007/02/20 H.Kawato Add End

    	MemPrintOffset.First();
    end;    // <157> Add

    Qry.Close();
    Qry.Free();

end;


//--- <#2> St -----
//**********************************************************************
//*		Proccess	:	拡大率を掛けた値を取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2005/01/18
//*		Parameter	:	Int		:	拡大率をかける元の値
//*		Return		:	拡大率を掛けた値
//**********************************************************************
function TJNTCRP004007f.fnGetZoom(Int: Integer): Integer;
begin
	Result := Trunc(Int*m_ZoomRatio/100);
end;
//--- <#2> Ed -----

//-----------------------------------------------------------------------------
// fnParentBtnClick()
//	< 親からのボタンの継承･･・詳細・削除 >
//      PARAM   : Sender
//      RETURN  :
//      MEMO    : <001>
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnParentBtnClick(Sender:TObject);
begin

{
    if Sender = BSyousai then
//        fnSyousaiClick
    else if Sender = BDelete then
        BDeleteClick(self);
}
end;


//**********************************************************************
//*		Proccess	:	銀行ｺｰﾄﾞ情報取得
//*		Parameter	:	BC			:	銀行ｺｰﾄﾞ
//*                     BankNCD     :   HAPBF内部ｺｰﾄﾞ
//*						BankName	:	銀行名称
//*						BankKana	:	銀行ｶﾅ名称
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetBankCodeInfoFX(BC: Integer;
                                        var BankNCD : Extended;
                                        var BankName,BankKana: String):Boolean;
var
	Qe	: TMQuery;
begin
	Result   := True;
    BankNCD  := 0;
	BankName := '';
	BankKana := '';

	Qe := TMQuery.Create (Self);												// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);							// DBとMQueryの接続

		with (Qe) do
		begin
			// 銀行ｶﾅ名称
			Close();
			SQL.Clear();
			SQL.Add('SELECT * FROM HAPBF WHERE BankCode = :BC');
			ParamByName('BC').AsInteger	:= BC;
			if (not Open ()) then
			begin
				fnErrorMessageDsp(Qe);
				Result := False;
				Exit;
			end;

			if EOF <> True then
			begin
                BankNCD  := FieldByName ('NCode').AsFloat;
				BankName := FieldByName ('BankName').AsString;
				BankKana := fnExchangeCharacterKanaDesc(FieldByName ('BankKana').AsString);
			end
            else
                Result := False;

		end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	支店ｺｰﾄﾞ情報取得
//*		Parameter	:	BC			:	銀行内部ｺｰﾄﾞ
//*						BranchCD	:	支店外部ｺｰﾄﾞ
//*                     BranchNCD
//*						BranchName	:	支店名称
//*						BranchKana	:	支店ｶﾅ名称
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetBranchCodeInfoFX(BC: Extended; BranchCD:integer;
                                    var BranchNCD : Extended;
                                    var BranchName,BranchKana: String):Boolean;
var
	Qe	: TMQuery;
begin
	Result     := True;
// <SCA> DEL	BranchNCD  := 0;
	BranchName := '';
	BranchKana := '';


	Qe := TMQuery.Create (Self);											// MQueryの構築
	try
		m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);							// DBとMQueryの接続

		with (Qe) do
		begin
			// 支店ｶﾅ名称
// <SCA> ADD-STR
            // 内部コードが指定されている場合、内部外部コードでヒットするかチェック
            if (BranchNCD <> 0) then
            begin
    			Close();
	    		SQL.Clear();
		    	SQL.Add('SELECT * FROM HAPBS WHERE BankNCode = :nBankCode AND BranchCode = :nBranchCode');
    			SQL.Add('AND NCode = ' + FloatToStr(BranchNCD));
                ParamByName ('nBankCode'  ).AsFloat     := BC;
                ParamByName ('nBranchCode').AsInteger   := BranchCD;
                if (not Open ()) then
                begin
                    fnErrorMessageDsp(Qe);
                    Exit;
                end;
                if EOF then
                    BranchNCD := 0;     // ヒットしなければ内部コードクリアして外部コードのみとする
            end;
// <SCA> ADD-END
			Close();
			SQL.Clear();
			SQL.Add('SELECT * FROM HAPBS WHERE BankNCode = :nBankCode AND BranchCode = :nBranchCode');
// <SCA> ADD-STR
            // 内部コードが指定されていればそれを、指定がない場合は最小のものを
            if (BranchNCD <> 0) then
    			SQL.Add('AND NCode = ' + FloatToStr(BranchNCD))
            else
    			SQL.Add('ORDER BY NCode');
// <SCA> ADD-END
			ParamByName ('nBankCode'  ).AsFloat     := BC;
			ParamByName ('nBranchCode').AsInteger   := BranchCD;
			if (not Open ()) then
			begin
				fnErrorMessageDsp(Qe);
				Exit;
			end;

			if EOF <> True then
			begin
                BranchNCD  := FieldByName ('NCode').AsFloat;
				BranchName := FieldByName ('BranchName').AsString;
				BranchKana := fnExchangeCharacterKanaDesc(FieldByName ('BranchKana').AsString);
			end
            else
                Result := False;

		end;

	finally
		Qe.Close;
		Qe.Free;
	end;

end;

//**********************************************************************
//*		Proccess	: 依頼口座内部ｺｰﾄﾞ取得
//*		Parameter	:
//*		Return		:
//**********************************************************************
function	TJNTCRP004007f.fnGetIraiNCode (pIraiCD: Integer): Extended;
var
	dqMasterData: TMQuery;
begin

	Result	:= -1;

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
{
		SQL.Add   ('SELECT ai.NCode,ai.AccKbn, ai.AccNo, hm.SimpleName, bi.AllBkCode, bi.AllBraCode, ');
		SQL.Add   ('       bi.BankName, bi.BkBraName, bi.BankKanaName, bi.BraKanaName ');
		SQL.Add   ('FROM   AccInfo ai, HojyoMA hm ');
		SQL.Add   ('LEFT OUTER JOIN BankInfo bi ON bi.MasterKbn = hm.MasterKbn AND bi.NCode = hm.BankNCode ');
		SQL.Add   ('WHERE  hm.MasterKbn = :nMasterDivision AND hm.RDelKbn = 0 AND ');
		SQL.Add   ('       hm.BankNCode = ai.NCode AND ai.RDelKbn = 0 AND ai.GCode = :nAccountCode');
}

		SQL.Add   ('SELECT AI.NCode,AI.AccKbn, AI.AccNo, HM.SimpleName, BI.AllBkCode, BI.AllBraCode, ');
		SQL.Add   ('       BI.BankName, BI.BkBraName, BI.BankKanaName, BI.BraKanaName ');
		SQL.Add   ('FROM BankInfo BI ');
		SQL.Add   ('Inner Join AccInfo Ai On ');
		SQL.Add   ('AI.BankNCode = BI.NCode  ');
        SQL.Add   ('Left outer join HojyoMA HM On ');
		SQL.Add   ('HM.BankNCode = BI.NCode and HM.RDelKbn = 0 ');
		SQL.Add   ('and HM.MasterKbn = BI.MasterKbn '); // <149> Add
        SQL.Add   ('Where BI.MasterKbn = :nMasterDivision And BI.RDelKbn = 0 ');
        SQL.Add   (' And AI.GCode = :nAccountCode ');


		ParamByName ('nMasterDivision').AsInteger	:= MASTER_BANK;
		ParamByName ('nAccountCode'   ).AsInteger	:= pIraiCD;

        if Not Open then
        begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
            ShowMessage('Not Open!');
			Exit;
        end;

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Exit;
		end;
        Result := GetFld('NCode').AsFloat;
	end;


	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

//-----------------------------------------------------------------------------
//
//     ﾌﾟﾛｼﾞｪｸﾄ・工種・セグメントMasterKbn取得
//
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnGetMasterKbnFX();
var
    Qe          : TMQuery;
    lvKousyuKbn : Integer;
    lvKMasteKbn : Integer;
//    lvSMasteKbn : Integer;

begin

    lvKMasteKbn := 0;

	Qe	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

    //////////////////////////////////////////////////
    //  工事・工種
    //////////////////////////////////////////////////
   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
        SQL.add(' Select MasterKbn From MasterInfo '+
               ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
               ' and (KojUseKBN <> 0 )' +
               ' Order by MasterKbn ');

        ParamByName('pSMKBN').asFloat := ucSKO_MKBN;
        ParamByName('pEMKBN').asFloat := ucEKO_MKBN;
        Open;

        if not Eof then
        begin
        // 工事採用有り
            lvKMasteKbn := Qe.GetFLD('MasterKbn').AsInteger;
(* <114>
        end
        else
        begin
        // 工事採用無し

        // 工事採用がなければプロジェクト採用ありのもののうち //
        // 先頭のものを工事へセット                           //
    	    Close ();
   	    	SQL.Clear ();
            SQL.add(' Select Min(MasterKbn) As PrjMstKbn From MasterInfo '+
                   ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                   ' and (UseKBN <> 0)' );


            ParamByName('pSMKBN').asFloat := ucSKO_MKBN;
            ParamByName('pEMKBN').asFloat := ucEKO_MKBN;
            Open;

            if not Eof then
                lvKMasteKbn     := Qe.GetFLD('PrjMstKbn').AsInteger
            else
                lvkMasteKbn    := ucSKO_MKBN;    //既存ﾙｰﾁﾝで採用無しになる
*)
        end;
    end;

    //工種MasterKbn取得
    lvKousyuKbn :=
        (lvKMasteKbn
            - (StrToInt(Copy(IntToStr(ucSKO_MKBN),1,1)) * 100)
            + (StrToInt(Copy(IntToStr(lvKMasteKbn + 100),1,1)) * 100));


    //////////////////////////////////////////////////
    //  ｾｸﾞﾒﾝﾄ
    //////////////////////////////////////////////////
{
   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
        SQL.add(' Select MasterKbn From MasterInfo '+
               ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
               ' and (UseKBN = 1)');

        ParamByName('pSMKBN').asFloat := ucSSG_MKBN;
        ParamByName('pEMKBN').asFloat := ucESG_MKBN;
        Open;

        if not Eof then
            lvSMasteKbn     := Qe.GetFLD('MasterKbn').AsInteger
        else
            lvSMasteKbn     := ucSKO_MKBN;      //既存ﾙｰﾁﾝで採用無しになる

    end;
}


    //////////////////////////////////////////////////
    //  第一補助・第二補助取得
    //////////////////////////////////////////////////
   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
        SQL.add(' Select MasterKbn From MasterInfo '+
               ' Where (MasterKBN Between 21 and 35)'+
               ' and (UseKBN = 1)'                  +
               ' Order by MasterKbn');
        Open;

        //　--参照順序--
        //  取引先      22      :MASTER_CUSTOMER
        //  社員        25      :MASTER_STAFF
        //  銀行        21      :MASTER_BANK
        //  汎用補助    31-35   :MASTER_GENERAL01   -   MASTER_GENERAL05

        // <104>
        m_sUseString := '';

        while not Eof do
        begin
            //採用MASTERKBN取得
            m_sUseString := m_sUseString + IntToStr(GetFld('MasterKbn').AsInteger) + '|';
            next;
        end;

{ <104>
        lvCount     := 0;
        lvString    := '';

        while not Eof do
        begin
            //採用MASTERKBN取得
            lvString := lvString + IntToStr(GetFld('MasterKbn').AsInteger) + '|';
            next;
        end;

        //取引先ﾁｪｯｸ
        lvMstKbn := MASTER_CUSTOMER;
        if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
        begin
            lvCount := lvCount + 1;
            case lvCount of
                1:MASTER_HOJYO1 := lvMstKbn;
                2:MASTER_HOJYO2 := lvMstKbn;
            end;
        end;

        //社員ﾁｪｯｸ
        lvMstKbn := MASTER_STAFF;
        if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
        begin
            lvCount := lvCount + 1;
            case lvCount of
                1:MASTER_HOJYO1 := lvMstKbn;
                2:MASTER_HOJYO2 := lvMstKbn;
            end;
        end;

        //銀行ﾁｪｯｸ
        lvMstKbn := MASTER_BANK;
        if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
        begin
            lvCount := lvCount + 1;
            case lvCount of
                1:MASTER_HOJYO1 := lvMstKbn;
                2:MASTER_HOJYO2 := lvMstKbn;
            end;
        end;

        //汎用補助①～⑤
        for i := MASTER_GENERAL01 to MASTER_GENERAL05 do
        begin
            lvMstKbn := i;
            if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
            begin
                lvCount := lvCount + 1;
                case lvCount of
                    1:MASTER_HOJYO1 := lvMstKbn;
                    2:MASTER_HOJYO2 := lvMstKbn;
                end;
            end;
        end;
}
    end;

    Qe.Close;
    Qe.Free;

//	MASTER_SEGMENT  		:=	lvSMasteKbn;		//	ｾｸﾞﾒﾝﾄ(可変)
    MASTER_CONSTRUCT		:=	lvKMasteKbn;		//	工事(可変)
    MASTER_CONSTKIND		:=	lvKousyuKbn;		//	工種(可変)

end;
////////////////////////////////////////////////////////////////////////////////
//	fnGetHojNCode
////////////////////////////////////////////////////////////////////////////////
function TJNTCRP004007f.fnGetHojNCode(iMstKbn:Integer;sGCode:String):Extended;
var
    Qe      : TMQuery;
    StrTbl  : String;

begin

    Result := 0;

	// ﾏｽﾀ区分が｢23:得意先｣、｢24:仕入先｣の時
	if ((iMstKbn = MASTER_CUSTOMERPLUS01) or
	    (iMstKbn = MASTER_CUSTOMERPLUS02)) then
		iMstKbn	:= MASTER_CUSTOMER;			                // 取引先ｾｯﾄ

    case iMstKbn of
        MASTER_CUSTOMER:
            StrTbl := 'MTokui';
        MASTER_STAFF:                                       // <106>
            StrTbl := 'HAPSC join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode)';
        else
            StrTbl := 'HojyoMA';
    end;

    // Queryの構築
	Qe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

   	with Qe do
    begin
	    Close;
   		SQL.Clear;
        if iMstKbn = MASTER_STAFF then
        	SQL.Add('select HAPSC.NCode as NCode from ' + StrTbl)
        else
        	SQL.Add('select NCode from ' + StrTbl );
        SQL.Add(' where GCode = :pGCode      ');
        SQL.Add(' and RDelKbn = 0            ');

        if (iMstKbn <> MASTER_CUSTOMER) and
           (iMstKbn <> MASTER_STAFF)    then
        begin
            SQL.Add(' and MasterKbn = :pMstKbn');
            ParamByName('pMstKbn').AsInteger := iMstKbn;
        end;

        ParamByName('pGCode').AsString := sGCode;

        Open;
        if not Eof then
            Result := FieldByName('NCode').AsFloat;
  	end;

    Qe.Close;
    Qe.Free;

end;

////////////////////////////////////////////////////////////////////////////////
//	fnGetHojGCode <104>
////////////////////////////////////////////////////////////////////////////////
function TJNTCRP004007f.fnGetHojGCode(iMstKbn:Integer; nNCode:Extended; var strDescription: String): String;
var
    Qe          : TMQuery;
    strGCode    : String;

begin

    Result := '';

	if	((iMstKbn = MASTER_CUSTOMERPLUS01) or
		 (iMstKbn = MASTER_CUSTOMERPLUS02)) then
		iMstKbn	:= MASTER_CUSTOMER;

    strGCode        := '';
	strDescription	:= '';

	Qe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

   	with Qe do
    begin
        if      iMstKbn = MASTER_CUSTOMER then
        begin
    		SQL.Add   ('select GCode, NMK from MTOKUI ');
//	    	SQL.Add   ('where  RDelKbn = 0 and NCode = :nHojCode and SumKbn = 0');
	    	SQL.Add   ('where  RDelKbn = 0 and NCode = :nHojCode ');
		    ParamByName ('nHojCode').AsFloat := nNCode;
        end
        else if iMstKbn = MASTER_STAFF then
        begin
    		SQL.Add   ('select HAPSC.GCode, MOS_OFFICE_STAFF.SimpleName as NMK');
    		SQL.Add   ('from HAPSC join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode)');
	    	SQL.Add   ('where  RDelKbn = 0 AND HAPSC.NCode = :nHojCode');
		    ParamByName ('nHojCode').AsFloat := nNCode;
        end
        else
        begin
    		SQL.Add   ('select GCode, SimpleName as NMK from HojyoMA ');
	    	SQL.Add   ('where  MasterKbn = :MstKbn ');
//            SQL.Add   ('AND SumKbn  = 0 ');
            SQL.Add   ('AND RDelKbn = 0 ');
            SQL.Add   ('AND NCode = :nHojCode ');

		    ParamByName ('MstKbn').AsInteger := iMstKbn;
		    ParamByName ('nHojCode').AsFloat := nNCode;
        end;

		Open ();

		if	(EOF) then
		begin
			Qe.Close ();
			Qe.Free  ();
			Exit;
		end;

		strDescription := FieldByName ('NMK').AsString;
		strGCode	   := FieldByName ('GCode').AsString;
    end;

    Qe.Close;
    Qe.Free;

    Result := strGCode;

end;

////////////////////////////////////////////////////////////////////////////////
//	fnGetKmkSubNCode
////////////////////////////////////////////////////////////////////////////////
function TJNTCRP004007f.fnGetKmkSubNCode(iGCode:Integer; sSubCode:String):Extended;
var
    Qe      : TMQuery;
begin

    Result := 0;

	Qe	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
    	SQL.Add('SELECT cNCode from KmkMA    ');
        SQL.Add(' Where GCode   = :pGCode   ');
        SQL.Add(' and   MasterKbn = 2       ');
        SQL.Add(' and   SubCode = :pSubCode ');
        SQL.Add(' and   SumKbn  = 0         ');
        SQL.Add(' and   RDelKbn = 0         ');

        ParamByName('pGCode'    ).AsInteger  := iGCode;
        ParamByName('pSubCode'  ).AsString   := sSubCode;

        Open;

        if not Eof then
            Result := FieldByName('cNCode').AsFloat

  	end;

    Qe.Close;
    Qe.Free;

end;
//**********************************************************************
//*		Proccess	:   科目外部ｺｰﾄﾞより存在ﾁｪｯｸを行い名称を取得する
//*		Parameter	:   外部ｺｰﾄﾞ
//*		Return		:	Boolean,科目名称
//**********************************************************************
function	TJNTCRP004007f.fnGetKmkNCode (nKmkCode: Integer):Extended;
var
	dqMasterData: TMQuery;
begin

    Result := 0;

	if	((nKmkCode = m_nKmkCompound01) or (nKmkCode = m_nKmkCompound02)) then
	begin
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode,SimpleName FROM KmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 1 AND SumKbn = 0 AND ');
		SQL.Add   ('       RDelKbn = 0 AND GCode = :nKmkCode AND SubCode = 0 AND AnalyzeCode <> 0');
		SQL.Add   (' and InputKbn <> 9 ');

		ParamByName ('nKmkCode').AsInteger	:= nKmkCode;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
			Exit;
		end;
        Result  := FieldByName ('NCode').AsFloat;
	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

end;
//-----------------------------------------------------------------------------
// fnSetFncType
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnSetFncType(nFunc : Integer ; fEnabled : Boolean);
var

	stMessageRec: TMJSMsgRec;

begin

    case nFunc of

        1:
        begin



            if fEnabled = True then
            begin
// 2006/05/10 H.Kawato Mod <124>
//                uvFncInfo.Caption[0] := 'F1 相殺情報削除';
//                uvFncInfo.Action[0]  := FreeF1;

                case Tab.Items.Selected of
                    TAB_OFFSET:             // 相殺情報
                    begin
                        uvFncInfo.Caption[0] := 'F1 相殺情報削除';
                        uvFncInfo.Action[0]  := FreeF1;
                        uvFncInfo.Enabled[0] := m_IsDelete;     // <150> 削除権限(True:権限あり, False:権限なし)
                    end;
                    TAB_RATIO:              // 支払方法(比率)
                    begin
                        uvFncInfo.Caption[0] := 'F1 詳細表示';
                        uvFncInfo.Action[0]  := FreeF1;
                        uvFncInfo.Enabled[0] := True;           // <150> Add
                    end;

//<GA001>ST
                    TAB_KHNSET_G:            // 可変情報
                    begin
                        uvFncInfo.Caption[0] := 'F1 項目情報削除';
                        uvFncInfo.Action[0]  := FreeF1;
                        uvFncInfo.Enabled[0] := m_IsDelete;     // <150> 削除権限(True:権限あり, False:権限なし)
                    end;
//<GA001>ED
                end;

// 2006/05/10 H.Kawato Mod <124>
            end
            else
            begin
                uvFncInfo.Caption[0] := '';
                uvFncInfo.Action[0]  := nil;
                uvFncInfo.Enabled[0] := False;                  // <150> Add
            end;

        end;


// <182> 2010/07/27 G.Kojima Add

        6:
        begin
            if fEnabled = True then
            begin
                uvFncInfo.Caption[5] := 'F6 銀行情報登録';
                uvFncInfo.Enabled[5] := m_IsUpdate; // 更新権限(True:権限あり, False:権限なし)
                uvFncInfo.Action[5]  := FreeF6;
            end
            else
            begin
                uvFncInfo.Caption[5] := '';
                uvFncInfo.Action[5]  := nil;
                uvFncInfo.Enabled[5] := False;
            end;
        end;
// <182> End


        7:
        begin
            if fEnabled = True then
            begin
    		    m_cComArea.m_MsgStd.GetMsg (stMessageRec, 30, 19);

                uvFncInfo.Caption[7] := stMessageRec.sMsg;
                uvFncInfo.Action[7]  := FreeF8;
                uvFncInfo.Enabled[7] := True;                   // <150> Add
            end
            else
            begin
                uvFncInfo.Caption[7] := '';
                uvFncInfo.Action[7]  := nil;
                uvFncInfo.Enabled[7] := False;                  // <150> Add
            end;
        end;

// <142> 2007/02/20 H.Kaawato Add Start
        8:
        begin
//<172> Del
//          if (m_iProAdoptKbn = 1) then
//          begin
//<172> Del
                if fEnabled = True then
                begin
                    case Tab.Items.Selected of
                        TAB_RATIO, TAB_FIXED:   // 支払方法(比率/定額)
                        begin
                            if (Tab.Items.Selected = TAB_RATIO) then
                            begin
                                if (PanelShousai.Visible = False) then
                                begin
                                    if Hou_H_Houhou1_Minkin.Visible = False then
                                        uvFncInfo.Caption[0] := 'F1 詳細表示'
                                    else
                                        uvFncInfo.Caption[0] := 'F1 一覧表示';
                                end
                                else
                                begin
                                    if Shousai_Hou1_HasuuKingaku.Visible = False then
                                        uvFncInfo.Caption[0] := 'F1 詳細表示'
                                    else
                                        uvFncInfo.Caption[0] := 'F1 一覧表示';
                                end;
                                uvFncInfo.Enabled[0] := True;   // <150> Add
                            end;

                            uvFncInfo.Caption[7] := 'F8 優先支払詳細';
                            uvFncInfo.Action[7]  := FreeF8;
//<174> Mod
//                          uvFncInfo.Enabled[7] := True;       // <150> Add
							//件数がある場合使用可能
	    		            if	((Tab.Items.Selected = TAB_RATIO) and
								 (MemPayRatio.RecordCount > 0))   or
								((Tab.Items.Selected = TAB_FIXED) and
								 (MemPayFixed.RecordCount > 0)) then
	    		                uvFncInfo.Enabled[7] := True
							else
	                    		uvFncInfo.Enabled[7] := False;
//<174> Mod
                        end;
// <181> ADD-STR
                        TAB_OFFSET:             // 相殺情報
                        begin
                            uvFncInfo.Caption[7] := 'F8 付加情報';
                            uvFncInfo.Action[7]  := FreeF8;
                            uvFncInfo.Enabled[7] := True;
                        end;
// <181> ADD-END
                    end;
                end
                else
                begin
                    uvFncInfo.Caption[7] := '';
                    uvFncInfo.Action[7]  := nil;
                    uvFncInfo.Enabled[7] := False;              // <150> Add
                end;
//          end;												//<172> Del
        end;
// <142> 2007/02/20 H.Kawato Add End
    end;

    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
    MSPFunctionBar.SetFuncEnabledA(uvFncInfo.Enabled);          // <150> Add
end;
//-----------------------------------------------------------------------------
// fnFrrDlg
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnFreeDlg(nFunc: Integer);
//var
//    strDescription : String;  // <142> Del

begin
    try
        Case nFunc of
            0:
            // 相殺情報削除
            begin
// 2006/05/10 H.Kawato Mod <124>
{
				fnDeleteOffsetRecord();
				if Edit00PayCodeNum.Visible = True then
					Edit00PayCodeNum.SetFocus
				else
					Edit00PayCodeFree.SetFocus;
}
                case Tab.Items.Selected of
                    TAB_OFFSET:             // 相殺情報
                    begin
                        if (m_IsDelete) then    // <150> Add ※if文の追加
                        begin
				            fnDeleteOffsetRecord();
				            if Edit00PayCodeNum.Visible = True then
					            Edit00PayCodeNum.SetFocus
				            else
					            Edit00PayCodeFree.SetFocus;
                        end;                    // <150> Add
                    end;
//<GA001>ST

                    TAB_KHNSET_G:             // 可変情報
                    begin
                        if (m_IsDelete) then    // <150> Add ※if文の追加
                        begin
				            fnDeleteKhnsetGRecord();
				            if Edit00GPayCodeNum.Visible = True then
					            Edit00GPayCodeNum.SetFocus
				            else
					            Edit00GPayCodeFree.SetFocus;
                        end;                    // <150> Add
                    end;
//<GA001>ED



                    TAB_RATIO:              // 支払方法(比率)
                    begin
                        TBChgColSizeClick(nil);

                        if (uvFncInfo.Caption[0] = 'F1 一覧表示') then
                            uvFncInfo.Caption[0] := 'F1 詳細表示'
                        else
                            uvFncInfo.Caption[0] := 'F1 一覧表示';

                        MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
                    end;




                end;
// 2006/05/10 H.Kawato Mod <124>
            end;

// <182> 2010/07/27 G.Kojima Add
            5:
            // 銀行情報登録ダイアログを起動
            begin
                   BankInfoDlg()
            end;
// <182> End

            // 正式名称ｺﾋﾟｰ
            7:
            begin
// <142> 2007/02/20 H.Kawato Del Start
{
				strDescription := MJSKabuCut(TdxDBGrid(Screen.ActiveControl).DataSource.DataSet.FieldByName('strName').AsString, 14);

				if (strDescription <> '') then
				begin
					TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.Edit ();
					TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.FieldByName ('strNameSimple').AsString	:= strDescription;
					TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.Post ();
				end;
}
// <142> 2007/02/20 H.Kawato Del End
// <142> 2007/02/20 H.Kawato Add Start
//<172> Del
//              if (m_iProAdoptKbn = 1) then
//              begin
//<172> Del
                    case Tab.Items.Selected of
                        TAB_RATIO, TAB_FIXED:   // 支払方法(比率/定額)
                        begin
// <178> MOD-STR
//<174> Add
{							//件数がある場合使用可能
        		        	if	((Tab.Items.Selected = TAB_RATIO) and
								 (MemPayRatio.State = dsEdit))   or
								((Tab.Items.Selected = TAB_FIXED) and
								 (MemPayFixed.State = dsEdit)) then
				                Abort ();}
//<174> Add
        		        	if	((Tab.Items.Selected = TAB_RATIO) and
								 (MemPayRatio.State = dsEdit))   then
                                 MemPayRatio.Post;
							if	((Tab.Items.Selected = TAB_FIXED) and
								 (MemPayFixed.State = dsEdit)) then
                                 MemPayFixed.Post;
// <178> MOD-END
                            GridShousaiChange(Tab.Items.Selected);

                            if (Tab.Items.Selected = TAB_RATIO) then
                            begin
                                if (PanelShousai.Visible = False) then
                                begin
                                    if Hou_H_Houhou1_Minkin.Visible = False then
                                        uvFncInfo.Caption[0] := 'F1 詳細表示'
                                    else
                                        uvFncInfo.Caption[0] := 'F1 一覧表示';
                                end
                                else
                                begin
                                    if Shousai_Hou1_HasuuKingaku.Visible = False then
                                        uvFncInfo.Caption[0] := 'F1 詳細表示'
                                    else
                                        uvFncInfo.Caption[0] := 'F1 一覧表示';
                                end;
                            end;

                            if (uvFncInfo.Caption[7] = 'F8 優先支払詳細') then
                                uvFncInfo.Caption[7] := 'F8 支払方法'
                            else
								uvFncInfo.Caption[7] := 'F8 優先支払詳細';

                            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
                        end;
// <181> ADD-STR
                        TAB_OFFSET:             // 相殺情報
                        begin
                            // 付加情報ダイアログ表示
                            fnLaunchSwkAddDlg();
                        end;
// <181> ADD-END
                    end;
//              end;											//<172> Del
// <142> 2007/02/20 H.Kawato Add End
            end;
        end;

    except
    end;
end;

procedure TJNTCRP004007f.FreeF1Execute(Sender: TObject);
begin
    fnFreeDlg(0);
end;

procedure TJNTCRP004007f.FreeF6Execute(Sender: TObject);
begin
    fnFreeDlg(5);
end;

procedure TJNTCRP004007f.FreeF8Execute(Sender: TObject);
begin
    fnFreeDlg(7);
end;

procedure TJNTCRP004007f.MSPFunctionBarFunctionClick(Sender: TObject;
  FuncNo: Integer);
begin
    if MSPFunctionBar.GetFuncCaption(FuncNo) <> '' then
        uvFncInfo.Action[FuncNo-1].Execute;

end;
//**********************************************************************
//*		Proccess	:   fnEditHojyoChk
//*		Return		:	Boolean
//**********************************************************************
// <162> MOD-STR
//function	TJNTCRP004007f.fnEditHojyoChk ():Boolean;
function	TJNTCRP004007f.fnEditHojyoChk (var nErrFieldID: Integer):Boolean;
// <162> MOD-END
var
    cNumEdit    : TMNumEdit;
    cTxtEdit    : TMTxtEdit;
    nFieldID    : Integer;
    swk         : String;
begin
    Result := True;

    for nFieldID := 3 to 5 do
    begin
    	cNumEdit := TMNumEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeNum',[nFieldID])));
	    cTxtEdit := TMTxtEdit(MJSFindCtrl(Self,Format('Edit%.2dHojCodeFree',[nFieldID])));

    	if ((cNumEdit.Visible = True) and (cNumEdit.Enabled = False)) or
    	    ((cTxtEdit.Visible = True) and (cTxtEdit.Enabled = False)) then
            // 採用無し
        else
	    begin
    		if (cTxtEdit.Visible = True) then
	    		swk := Edit03HojCodeFree.Text
		    else
    		begin
	    		if cNumEdit.InputFlag = False then
		    		swk := IntToStr(Edit03HojCodeNum.AsInteger);
    		end;

	    	if not fnCheckEditTxtValueHojCodeEx(nFieldID) then
// <162> MOD-STR
//              Result := False;
            begin
                nErrFieldID := nFieldID;
                Result := False;
                Exit;
            end;
// <162> MOD-END
        end;
    end;
end;
//***********************************************************************************************************/
//*																											*/
//*	関数	: ArrowClick(Sender: TObject);
//*																											*/
//***********************************************************************************************************/
procedure TJNTCRP004007f.ArrowClick(Sender: TObject);
var
    lvExpSend       : rcJNTExpSend;
    lvExpRecv       : rcJNTExpRecv;
    iExpRtn         : Integer;
    CompName        : String;
    lvModulKbn      : Integer;
    lvPatternNo     : Integer;
	nMasterDivision : Integer;
	nPosition	    : Integer;
	strWherePhase   : String;
    nKmkNCode       : Extended;
    nSumKbn         : Integer;                              // <105>
    cTxtEdit        : TMTxtEdit;

    cNumEdit        : TMNumEdit;
    cTxtEditDsp     : TMTxtEdit;
//<GA001>ST
    strSimpleName	: String;
    strRemarks		: String;
    iDigit			: Integer;
    swk             : String;
    ID              : String;
//<GA001>ED

begin
    nSumKbn     :=  0;
    nKmkNCode   :=  0;
    cTxtEdit    :=  nil;
    cNumEdit    :=  nil;
    cTxtEditDsp :=  nil;

    CompName    := TComponent(Sender).name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec := m_pRec;                         // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     := @m_cDBSelect;                   // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     := m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := m_cComArea.SystemArea.SysColorD;

    // *********** 取引先ｺｰﾄﾞ(仕入採用限定) ***********
    if (Copy(CompName,1,13) = 'Edit00PayCode') then
    begin
        cNumEdit := Edit00PayCodeNum;
        cTxtEdit := Edit00PayCodeFree;

        lvExpSend.MasterKbn := MASTER_CUSTOMERPLUS02;       // ﾏｽﾀ区分
        lvExpSend.ModulKbn  := 0;                           // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo := 1;                           // ﾏｽﾀ区分
        nSumKbn     := -1;                                                // <105>
        strWherePhase := ' MTOKUI.RDelKbn = 0 and MTOKUI.TemplateKbn = 0';// <102>;
        lvExpSend.WhereStr := strWherePhase;
    end;
//<GA001>ST
    if (Copy(CompName,1,14) = 'Edit00GPayCode') then
    begin
        cNumEdit := Edit00GPayCodeNum;
        cTxtEdit := Edit00GPayCodeFree;

        lvExpSend.MasterKbn := MASTER_CUSTOMERPLUS02;       // ﾏｽﾀ区分
        lvExpSend.ModulKbn  := 0;                           // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo := 1;                           // ﾏｽﾀ区分
        nSumKbn     := -1;
        strWherePhase   := ' MTOKUI.RDelKbn = 0 and MTOKUI.TemplateKbn = 0 ';
        strWherePhase   := strWherePhase + ' AND MTOKUI.NCode in ('
                            + ' SELECT BaseNCode FROM MTOKUI_PAY'
                            + ' WHERE MTOKUI_PAY.GaiKaKbn > 0)';
        lvExpSend.WhereStr := strWherePhase;
    end;
//<GA001>ED
// <142> 2007/02/20 H.Kawato Add Start
    // *********** ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ(ﾌﾟﾛｼﾞｪｸﾄ別支払採用) ***********
    if (Copy(CompName,1,13) = 'Edit09PrjCode') then
    begin
        cNumEdit := Edit09PrjCodeNum;
        cTxtEdit := Edit09PrjCodeFree;

        lvExpSend.MasterKbn     := m_iProjectKbn;           // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        strWherePhase           := ' HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0';
        lvExpSend.WhereStr := strWherePhase;
    end;
// <142> 2007/02/20 H.Kawato Add End

    // *********** 相殺：科目ｺｰﾄﾞ ***********
    if (CompName = 'Edit02KmkCode') then
    begin
        lvExpSend.MasterKbn     :=  MASTER_SUBJECT;         // ﾏｽﾀ区分
        lvExpSend.ModulKbn      :=  0;                      // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     :=  1;                      // ﾏｽﾀ区分

        strWherePhase := 'Masterkbn = ' + IntToStr(MASTER_SUBJECT) + ' And RDelKbn = 0' +
//	             ' AND SumKbn = 0 AND RDelKbn = 0 AND AnalyzeCode <> 0 '        +
	             ' AND RDelKbn = 0 AND AnalyzeCode <> 0 '        +
       		     ' AND SubCode = 0 AND GCode <> ' + IntToStr (m_nKmkCompound01)     +
                 ' AND GCode <> ' + IntToStr (m_nKmkCompound02) +
                                               ' and InputKbn <> 9 ';
        lvExpSend.WhereStr := strWherePhase;

    end;

//<GA001>ST
    // *********** 可変項目：科目ｺｰﾄﾞ ***********
    if (Copy(CompName,1,13) = 'Edit01GItemID') then
    begin
        cTxtEdit := Edit01GItemID;

        lvExpSend.MasterKbn     := 9260;                        	// マスタ区分
        lvExpSend.ModulKbn      := 0;                           	// モジュール区分
        lvExpSend.PatternNo     := 1;                           	// パターンNO
        lvExpSend.TBarNM        := '可変項目' +  '検索ｴｸｽﾌﾟﾛｰﾗ';
        lvExpSend.TrRootCaption := '可変項目';
        lvExpSend.SortStr       := 'ORDER BY (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE OrderNo ENDIF),ID'
    end;
//<GA001>ED

    // *********** 相殺：汎用ｺｰﾄﾞ1～3 ***********
    if (CompName = 'Edit03HojCodeFree')
                 or (CompName = 'Edit03HojCodeNum')
                or (CompName = 'Edit04HojCodeFree')
                or (CompName = 'Edit04HojCodeNum')
                or (CompName = 'Edit05HojCodeFree')
                or (CompName = 'Edit05HojCodeNum') then
    begin

        cNumEdit := TMNumEdit (MJSFindCtrl (Self,  Copy(CompName,1,13) + 'Num'));
        cTxtEdit := TMTxtEdit (MJSFindCtrl (Self,  Copy(CompName,1,13) + 'Free'));
        cTxtEditDsp := TMTxtEdit (MJSFindCtrl (Self, Copy(CompName,1,13) + 'Name'));

    	nPosition	:= StrToInt (Copy (TComponent(Sender).name, 5, 2)) - 3;

    	if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_SUBJECTPLUS) then
	    begin
   			nMasterDivision	:= MASTER_SUBJECTPLUS;
       		strWherePhase	:= 'KmkMA.MasterKbn = 2 AND KmkMA.RDelKbn = 0';
            lvModulKbn      := 0;
            lvPatternNo     := 1;
            nKmkNCode       := fnGetKmkNCode(Edit02KmkCode.AsInteger);
	    end
    	else
	    begin
            // 取引先(得意先及び仕入先)
		    if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMER) or
                 (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01) or
			     (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02)) then
            begin
       			nMasterDivision	:= MASTER_CUSTOMER;
    	    	strWherePhase	:= 'MTOKUI.RDelKbn = 0 and MTOKUI.TemplateKbn = 0';       // <102>
                lvModulKbn  := 0;
                lvPatternNo := 1;
                nSumKbn     := 0;                                                         // <105>

                // 得意先
	        	if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01) then
           			nMasterDivision	:= MASTER_CUSTOMERPLUS01;

                // 仕入先
                if (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02) then
           			nMasterDivision	:= MASTER_CUSTOMERPLUS02;
            end
	    	else
            begin
		    	nMasterDivision	:= m_arCodeAttribute [nPosition].nMasterDivision;
                strWherePhase   := 'HojyoMA.RDelKbn = 0 and HojyoMA.MasterKbn = ' + IntToStr(nMasterDivision);
                lvModulKbn      := 0;
                lvPatternNo     := 1;
                nSumKbn         := 0;

// <134> 2006/08/10 H.Kawato Add Start
                if (nMasterDivision = 25) then
                    strWherePhase   := 'MOS_OFFICE_STAFF.RDelKbn = 0';
// <134> 2006/08/10 H.Kawato Add End
            end;

    		if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_SECTION  ) or
    			 ((m_arCodeAttribute [nPosition].nMasterDivision >= 101) and
                  (m_arCodeAttribute [nPosition].nMasterDivision <= 110))) then
		    begin
    			case (m_arCodeAttribute [nPosition].nClassCode) of
	    			0:	strWherePhase	:= strWherePhase + ' AND HojyoKbn2 <> 2';
		    		2:	strWherePhase	:= strWherePhase + ' AND HojyoKbn2 <> 0';
			    end;

                lvModulKbn      := 0;
                lvPatternNo     := 1;
    		end;

// <150> 2006/11/02 H.Kawato Add Start
            if (m_arCodeAttribute [nPosition].nMasterDivision >= 301) and
               (m_arCodeAttribute [nPosition].nMasterDivision <= 310) then
            begin
                if (m_arCodeAttribute [nPosition - 1].nMasterDivision >= 201) and
                   (m_arCodeAttribute [nPosition - 1].nMasterDivision <= 210) and
                   (m_arCodeAttribute [nPosition - 1].nPartKbn = 2) then
                begin
                    strWherePhase  := strWherePhase + ' AND HojyoMA.NCode in ('
                            + ' SELECT KsyNCode FROM KousyuPtn'
                            + ' INNER JOIN  KojiInfo'
                            + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode'
                            + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_arCodeAttribute [nPosition - 1].nMasterDivision)
                            + ' AND KojiInfo.NCode = ' + FloatToStr(m_arCodeAttribute [nPosition - 1].nPrjNCode)
                            + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_arCodeAttribute [nPosition].nMasterDivision) + ' )';
                end;
            end;
// <150> 2006/11/02 H.Kawato Add End
    	end;

        lvExpSend.MasterKbn     := nMasterDivision;         // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := lvModulKbn;              // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := lvPatternNo;             // ﾏｽﾀ区分
        lvExpSend.SumKbn        := nSumKbn;                 // 実在/合計区分
        lvExpSend.KmkNCode      := nKmkNcode;               // 科目内部ｺｰﾄﾞ
        lvExpSend.WhereStr      := strWherePhase;           // Where句
    end;



    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    if iExpRtn <>1 then
        Exit;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode))>0 then
    begin
        // *********** 取引先ｺｰﾄﾞ ***********
        if (Copy(CompName,1,13) = 'Edit00PayCode') then
        begin
            if cNumEdit.Visible  then
// <152> 2007/08/16 H.Kawato Mod Start
//                cNumEdit.Value := StrToFloat(lvExpRecv.GCode)
            begin
                cNumEdit.Value := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag  := False;
            end
// <152> 2007/08/16 H.Kawato Mod End
            else
                cTxtEdit.Text  := lvExpRecv.GCode;

// <142> 2007/02/20 H.Kawato Mod
//            Edit00PayName.Text := lvExpRecv.Nm;
            Edit00PayName.Text := lvExpRecv.NmK;
        end;

//<GA001>ST
        if (Copy(CompName,1,14) = 'Edit00GPayCode') then
        begin
            if cNumEdit.Visible  then
            begin
                cNumEdit.Value := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag  := False;
            end
            else
                cTxtEdit.Text  := lvExpRecv.GCode;


            Edit00GPayName.Text := lvExpRecv.NmK;
        end;
//<GA001>ED

//<GA001>ST
        if (Copy(CompName,1,13) = 'Edit01GItemID') then
        begin
            Edit01GItemID.Text  := lvExpRecv.GCode;
            Edit01GSimpleName.Text := lvExpRecv.NmK;

			if Edit00GPayCodeNum.InputFlag = False then
				swk := FloatToStr(Edit00GPayCodeNum.Value)
    		else
    			swk := Edit00GPayCodeFree.Text;

  			if (swk <> '') and (m_nCurCodeAttribute <= 1) then
				swk := Format('%.16d',[Trunc(Edit00GPayCodeNum.Value)]);

			ID := Edit01GItemID.Text;

			// ItemIDが存在する場合は、表示して

			if (fnMoveGridSelecterGID(MemKhnset_G,swk,ID) = True) then
			begin
               	Edit01GSimpleName.Text	   := MemKhnset_G.FieldByName('IDName'      ).AsString; // 項目名
                Edit01GMaxDigit.Value      := MemKhnset_G.FieldByName('MaxDigit'    ).AsInteger;// 桁数
                Edit01GRemarks.Text        := MemKhnset_G.FieldByName('Remarks'   ).AsString;
              	Edit01GItemValue.Text      := MemKhnset_G.FieldByName('ItemValue'  ).AsString;
//<GA003>ST
                Edit01NewKbn               := 0;
//<GA003>ED
            end
            else
            begin
                if fnGetPayFbVariable(ID, strSimpleName, iDigit, strRemarks) then
                begin
                    Edit01GItemID.Text       := ID;
                    Edit01GSimpleName.Text   := strSimpleName;
                    Edit01GMaxDigit.Value    := iDigit;
                    Edit01GRemarks.Text      := strRemarks;
                end
                else
                begin
                    Edit01GSimpleName.Text   := '';
                    Edit01GMaxDigit.Value    := 0;
                    Edit01GRemarks.Text      := '';
                end;


                Edit01GItemValue.Text        := '';
//<GA003>ST
                Edit01NewKbn                 := 1;
//<GA003>ED
                MjsSetFocus(Self,Edit01GItemValue.Name);
                abort;
            end;
        end;




// <142> 2007/02/20 H.Kawato Add Start
        // *********** ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ ***********
        if (Copy(CompName,1,13) = 'Edit09PrjCode') then
        begin
            if cNumEdit.Visible  then
                cNumEdit.Value := StrToFloat(lvExpRecv.GCode)
            else
                cTxtEdit.Text  := lvExpRecv.GCode;

            Edit09PrjName.Text := lvExpRecv.NmK;
        end;
// <142> 2007/02/20 H.Kawato Add End

        // *********** 依頼口座ｺｰﾄﾞ ***********
        if (Copy(CompName,13,11) = 'AccountCode') then
            cNumEdit.Value := StrToFloat(lvExpRecv.GCode);

        // *********** 相殺：科目ｺｰﾄﾞ ***********
        if (CompName = 'Edit02KmkCode') then
        begin
            Edit02KmkCode.Value     := StrToFloat(lvExpRecv.GCode);
            Edit02KmkCode.InputFlag := False;
            Edit02KmkCodeName.Text  := lvExpRecv.Nmk;
        end;


        // *********** 相殺：汎用ｺｰﾄﾞ1～3 ***********
        if (CompName = 'Edit03HojCodeFree')
                or (CompName = 'Edit03HojCodeNum')
                or (CompName = 'Edit04HojCodeFree')
                or (CompName = 'Edit04HojCodeNum')
                or (CompName = 'Edit05HojCodeFree')
                or (CompName = 'Edit05HojCodeNum') then
        begin

            if cNumEdit.Visible  then
            begin
                cNumEdit.Value := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag := False;
            end
            else
                cTxtEdit.Text  := lvExpRecv.GCode;

// <161> ADD-STR
    		if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_SECTION  ) or
    			 ((m_arCodeAttribute [nPosition].nMasterDivision >= 101) and
                  (m_arCodeAttribute [nPosition].nMasterDivision <= 110))) then
		    begin
                m_dSousaiBmnNCode := lvExpRecv.NCode;
            end;
// <161> ADD-END

// <142> 2007/02/20 H.Kawato Mod
//            cTxtEditDsp.Text := lvExpRecv.Nm;
            cTxtEditDsp.Text := lvExpRecv.Nmk;
        end;


        Keybd_Event(VK_RETURN, 0, 0, 0);            //Enter ｷｰのｴﾐｭﾚｲﾄ
		Abort;
    end;

end;

//************************************************************************
//*		Component		:	Fri_IraiAccCode ( TdxDBGridButtonColumn )
//*							▼を押されたら依頼口座ｺｰﾄﾞの検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.CmnIraiAccCodeEditButtonClick(Sender: TObject);

var
	cMem		: TdxMemData;

    lvExpSend   : rcJNTExpSend;
    lvExpRecv   : rcJNTExpRecv;
    iExpRtn     : Integer;



    iRet        : Integer;
    iBankCD     : Integer;
    iBranchCD   : Integer;
    sName       : String;

begin
    cMem    :=  nil;

    // 振込情報
	if TdxDBGrid(Sender).Name = Fri_IraiAccCode.Name then
		cMem := MemFuri

//<GA001>ST
	else if TdxDBGrid(Sender).Name = FriGD_IraiAccCode.Name then
		cMem := MemFuri_GD
	else if TdxDBGrid(Sender).Name = FriGD_IraiFeeAccCode.Name then
		cMem := MemFuri_GD
	else if TdxDBGrid(Sender).Name = FriGT_IraiAccCode.Name then
		cMem := MemFuri_GT
	else if TdxDBGrid(Sender).Name = FriGK_IraiAccCode.Name then
		cMem := MemFuri_GK
    else if TdxDBGrid(Sender).Name = FriGK_IraiFeeAccCode.Name then
        cMem := MEmFuri_GK
//<GA001>ED

    // 期日指定振込情報
	else if TdxDBGrid(Sender).Name = KFri_IraiAccCode.Name then
		cMem := MemFuriDate
    // 手形情報
	else if TdxDBGrid(Sender).Name = Teg_IraiAccCode.Name then
		cMem := MemDraft
    // 小切手情報
	else if TdxDBGrid(Sender).Name = Kog_IraiAccCode.Name then
		cMem := MemCheck;


    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    := m_pRec;                      // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        := @m_cDBSelect;                // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        := m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        := m_cComArea.SystemArea.SysColorD;

    lvExpSend.MasterKbn     :=  9120;                       // ﾏｽﾀタ区分
    lvExpSend.ModulKbn      :=  0;                          // ﾓｼﾞｭｰﾙ区分
    lvExpSend.PatternNo     :=  1;                          // ﾊﾟﾀｰﾝNO
    lvExpSend.WhereStr      :=  'BankInfo.RDelKbn = 0 and AccInfo.RDelKbn = 0';

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    // ｷｬﾝｾﾙ
    if iExpRtn <> 1 then
        Exit;
    // 中身あり?
    if Length(Trim(lvExpRecv.GCode)) > 0 then
    begin
		if fnGetAccCodeInfo(StrToInt(lvExpRecv.GCode),iRet,iBankCD,iBranchCD,sName) = False then
            Exit;

		cMem.Edit;

//<GA001>ST
	    if (TdxDBGrid(Sender).Name = FriGD_IraiFeeAccCode.Name) or
	       (TdxDBGrid(Sender).Name = FriGK_IraiFeeAccCode.Name) then
        begin
    		// 銀行名／種別／口座
    		cMem.FieldByName('IraiFeeAccNo').AsInteger := StrToInt(lvExpRecv.GCode);
    		cMem.FieldByName('FeeAccInfo').AsString := sName;
        end
        else
        begin
//<GA001>ED
    		cMem.FieldByName('IraiAccNo' ).AsInteger := StrToInt(lvExpRecv.GCode);
		    cMem.FieldByName('AccInfo').AsString := sName;
        end;                    //<GA001>ADD

        // <196> ADD-STR
        if (TdxDBGrid(Sender).Name = Teg_IraiAccCode.Name) and (sName <> '') then
            cMem.FieldByName('LayoutInfo').AsString := m_sLayoutInfo;   // レイアウト情報
// <196> ADD-END
    end;

    // Enter ｷｰのｴﾐｭﾚｲﾄ
    Keybd_Event(VK_RETURN, 0, 0, 0);

    Abort;
end;

//************************************************************************
//*		Component		:	Fri_BankCode ( TdxDBGridButtonColumn )
//*							▼を押されたら銀行ｺｰﾄﾞの検索ｴｸｽﾌﾟﾛｰﾗを表示
//*		Event			:	OnEditButtonClick
//*		Name			:	H.Endo
//************************************************************************
procedure TJNTCRP004007f.Fri_BankCodeEditButtonClick(Sender: TObject);
var
	cMem		: TdxMemData;
    lvExpSend   : rcJNTExpSend;
    lvExpRecv   : rcJNTExpRecv;
    iExpRtn     : Integer;
    lvBankCode  : Integer;
    lvNCode     : Extended;
    lvName      : String;
    lvKana      : String;
	sKana		: String;
    CompName    : String;

begin
			// 振込情報
	if (TdxDBGrid(Sender).Name = Fri_BankCode.Name) or (TdxDBGrid(Sender).Name = Fri_BkBraCode.Name) then
		cMem := MemFuri
// <196> ADD-STR
    else if (TdxDBGrid(Sender).Name = Teg_BankCode.Name) or (TdxDBGrid(Sender).Name = Teg_BkBraCode.Name) then
		cMem := MemDraft
// <196> ADD-END
	else	// 期日指定振込情報
		cMem := MemFuriDate;


    //////////////////////////////////////////////////////////////////////////
    //
    //      HAPBF or HAPBSより取得      Start
    //
    //////////////////////////////////////////////////////////////////////////
    CompName    :=  TComponent(Sender).name;

    fnJNTExpMakeParam(@lvExpSend);   //ﾊﾟﾗﾒｰﾀ初期設定
    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pRec;       //MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @m_cDBSelect;           //TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  m_cComArea.SystemArea.SysColorD;

    // 本店
// <196> MOD-STR
//  if (CompName = 'Fri_BankCode') or (CompName = 'KFri_BankCode') then
    if (Pos('_BankCode', CompName) <> 0) then
// <196> MOD-END
    begin
//        lvExpSend.MasterKbn     :=  MASTER_BANK;        //マスタ区分＝
        lvExpSend.MasterKbn     :=  9090;               // ﾏｽﾀ区分＝ <117>
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
//        lvExpSend.PatternNo     :=  2;                  //マスタ区分＝
        lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNO<117>
        lvExpSend.TBarNM        :=  '銀行' +  '検索ｴｸｽﾌﾟﾛｰﾗ';
        lvExpSend.TableName     :=  'HAPBF';
        lvExpSend.TrRootCaption :=  '銀行';
        lvExpSend.SortStr       :=  'Order by BankCode'

    end
    // 支店
// <196> MOD-STR
//  else if (CompName = 'Fri_BkBraCode') or (CompName = 'KFri_BkBraCode') then
    else if (Pos('_BkBraCode', CompName) <> 0) then
// <196> MOD-END
    begin

       if fnGetBankCodeInfoFX(cMem.FieldByName('BankCode' ).AsInteger,lvNCode,lvName,lvKana) = False then Exit;

//        lvExpSend.MasterKbn     :=  MASTER_BANK;        //マスタ区分＝
        lvExpSend.MasterKbn     :=  9100;               // ﾏｽﾀ区分  <117>
        lvExpSend.ModulKbn      :=  0;                  //モジュール区分
//        lvExpSend.PatternNo     :=  3;                  //マスタ区分＝
        lvExpSend.PatternNo     :=  1;                  // ﾊﾟﾀｰﾝNO  <117>
        lvExpSend.TBarNM        :=  '支店' +  '検索ｴｸｽﾌﾟﾛｰﾗ';
        lvExpSend.TableName     :=  'HAPBS';
        lvExpSend.TrRootCaption :=  '支店';
        lvExpSend.WhereStr      := 'BankNCode = ' + FloatToStr(lvNCode);
        lvExpSend.SortStr       :=  'Order by BranchCode'
    end;


    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;


    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
        // 本店
// <196> MOD-STR
//      if (CompName = 'Fri_BankCode') or (CompName = 'KFri_BankCode') then
        if (Pos('_BankCode', CompName) <> 0) then
// <196> MOD-END
        begin
    		cMem.Edit;
    		cMem.FieldByName('BankCode' ).AsInteger := StrToInt(lvExpRecv.GCode);       // 銀行ｺｰﾄﾞ
    		cMem.FieldByName('BankName' ).AsString  := MJSKabuCut(lvExpRecv.Nmk ,30);	// 銀行名称

            if fnGetBankCodeInfoFX(StrToInt(lvExpRecv.GCode),lvNCode,lvName,lvKana) = False then Exit;
        	cMem.FieldByName('BankKanaName').AsString := lvKana;
        end

        // 支店
// <196> MOD-STR
//      else if (CompName = 'Fri_BkBraCode') or (CompName = 'KFri_BkBraCode') then
        else if (Pos('_BkBraCode', CompName) <> 0) then
// <196> MOD-END
        begin
            lvBankCode := cMem.FieldByName('BankCode' ).AsInteger;

    		cMem.Edit;
    		cMem.FieldByName('BkBraCode' ).AsInteger := StrToInt(lvExpRecv.GCode);       // 銀行ｺｰﾄﾞ
    		cMem.FieldByName('BkBraName' ).AsString  := MJSKabuCut(lvExpRecv.Nmk ,30);	 // 銀行名称
// <SCA> MOD-STR
//        	if fnGetBranchCodeInfoFX(lvBankCode,StrToInt(lvExpRecv.GCode),lvNCode,lvName,lvKana) = False then
        	cMem.FieldByName('BranchNCode').AsFloat := lvExpRecv.NCode;                  // 内部コード保持
        	if fnGetBranchCodeInfoFX(lvNCode, StrToInt(lvExpRecv.GCode), lvExpRecv.NCode, lvName, lvKana) = False then
// <SCA> MOD-END
                exit;
// <SCA> MOD-STR
//        	cMem.FieldByName('BraKanaName').AsString := sKana;
        	cMem.FieldByName('BraKanaName').AsString := lvKana;
// <SCA> MOD-END
        end;
    end;

    Keybd_Event(VK_RETURN, 0, 0, 0);            //Enter ｷｰのｴﾐｭﾚｲﾄ

    abort;

    //////////////////////////////////////////////////////////////////////////
    //
    //      HAPBF or HAPBSより取得      End
    //
    //////////////////////////////////////////////////////////////////////////


{// 全銀協より取得 --St

	fnCMNBankInit(m_pRec);

	nBankCode	:= cMem.FieldByName('BankCode' ).AsInteger;
	nBranchCode	:= cMem.FieldByName('BkBraCode').AsInteger;

	iRet := fnCMNBankShow(nBankCode, nBranchCode, strBankName, strBranchName);

	if iRet = 1 then
	begin
		cMem.Edit;
		cMem.FieldByName('BankCode' ).AsInteger := nBankCode;						// 銀行ｺｰﾄﾞ
		cMem.FieldByName('BkBraCode').AsInteger := nBranchCode;						// 支店ｺｰﾄﾞ
		cMem.FieldByName('BankName' ).AsString  := MJSKabuCut(strBankName  ,30);	// 銀行名称
		cMem.FieldByName('BkBraName').AsString  := MJSKabuCut(strBranchName,30);	// 支店名称
	end
	else
		exit;

	// 銀行ｶﾅ名称
	if fnGetBankCodeInfo(nBankCode,sName,sKana) = False then exit;
	cMem.FieldByName('BankKanaName').AsString := sKana;

	// 支店ｶﾅ名称
	if fnGetBranchCodeInfo(nBankCode,nBranchCode,sName,sKana) = False then exit;
	cMem.FieldByName('BraKanaName').AsString := sKana;
// 全銀協より取得 --ED}

end;
//**********************************************************************
//*		Proccess	:	基本情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetKihonInfo();
var
	strHojCode	: String;
	strFormat	: String;
	Qe			: TMQuery;
    strSQL      : String;       // <142> 2007/02/20 H.Kawato Add
begin
	m_bChange := TRUE;

	Qe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);	// DBとMQueryの接続

	DSKihon.DataSet := nil;

	MemKihon.Close;
	MemKihon.Open;

	with (m_Qe) do
	begin
		Close ();
		SQL.Clear();
// <142> 2007/02/20 H.Kawato Mod Start
{
		SQL.Add('SELECT MT.SumKbn,MT.NCode,MT.GCode,MT.Renso,MT.NM,MT.NMK,');

        SQL.Add('MP.BunkaiKbn,');                           // 分解区分
        SQL.Add('MP.SateiKbn,');                            // 査定区分  <126> Add
        SQL.Add('MP.LetterKbn,');                           // 通知書区分
        SQL.Add('DI.UketoriName ');                         // 受取人名称

		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY MP ON (MP.BaseNCode  = MT.NCode)   ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = :MK AND DI.PayNCode = MT.NCode AND DI.ShiharaiSyubetu = 1) ');
		SQL.Add('WHERE  MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 ');
        SQL.Add('   and MT.TemplateKbn = 0');               // <102>
		SQL.Add('ORDER BY MT.SumKbn,MT.GCode ');
		ParamByName ('MK').AsInteger := MASTER_CUSTOMER;
}
// <154> 2007/08/22 H.Kawato Mod Start
{
		strSQL := 'SELECT '
                + ' ISNULL(MT.SumKbn, 0) AS SumKbn'                             // 実在／合計区分
                + ',ISNULL(MT.NCode, 0) AS PayNCode'                            // 支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode'                          // 支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso'                            // 連想
                + ',ISNULL(MT.NM, '''') AS LongName'                            // 支払先正式名称
                + ',ISNULL(MT.NMK, '''') AS SimpleName'                         // 支払先簡略名称
                + ',ISNULL(DI.PayPtnNo, 1) AS PayPtnNo'                         // 条件パターンNo
                + ',ISNULL(PT.BunkaiKbn, 0) AS BunkaiKbn'                       // 分解区分
                + ',ISNULL(MP.SateiKbn, 0) AS SateiKbn'                         // 査定区分  <126> Add
                + ',ISNULL(MP.BunkaiPtn, 0) AS BunkaiPtn'                       // 分解パターン
                + ',ISNULL(DI.UketoriName, '''') AS UketoriName '               // 受取人名称
                + 'FROM MTOKUI MT '
                + 'LEFT OUTER JOIN MTOKUI_PAY MP '
                + ' ON (MP.BaseNCode  = MT.NCode) '
                + 'LEFT OUTER JOIN PayPtnInfo PT '
                + ' ON (PT.RDelKbn  = 0 '
                + ' AND PT.payptnNo = 1 '
                + ' AND PT.PayNCode = MT.NCode '
                + ' AND PT.MasterKbn = 22) '
                + 'LEFT OUTER JOIN PayDetailInfo DI '
                + ' ON (DI.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND DI.ShiharaiSyubetu = 1 '
                + ' AND DI.Edaban = 1 '
                + ' AND DI.RDelKbn = 0 '    // <144> Add
                + ' AND DI.PayPtnNo = PT.PayPtnNo '
                + ' AND DI.PayNCode = MT.NCode) '
                + 'WHERE  MT.RDelKbn = 0 '
                + ' AND MT.HojyoKbn2 = 1 '
                + ' and MT.TemplateKbn = 0' // <102>
                + 'ORDER BY SumKbn, PayCode ';
}
		strSQL := 'SELECT ';
		strSQL := strSQL + ' ISNULL(MT.SumKbn, 0) AS SumKbn';                   // 実在／合計区分
		strSQL := strSQL + ',ISNULL(MT.NCode, 0) AS PayNCode';                  // 支払先内部ｺｰﾄﾞ
		strSQL := strSQL + ',ISNULL(MT.GCode, '''') AS PayCode';                // 支払先外部ｺｰﾄﾞ
		strSQL := strSQL + ',ISNULL(MT.Renso, '''') AS Renso';                  // 連想
		strSQL := strSQL + ',ISNULL(MT.NM, '''') AS LongName';                  // 支払先正式名称
		strSQL := strSQL + ',ISNULL(MT.NMK, '''') AS SimpleName';               // 支払先簡略名称
		strSQL := strSQL + ',ISNULL(DI.PayPtnNo, 1) AS PayPtnNo';               // 条件パターンNo
		strSQL := strSQL + ',ISNULL(PT.BunkaiKbn, 0) AS BunkaiKbn';             // 分解区分
		strSQL := strSQL + ',ISNULL(MP.SateiKbn, 0) AS SateiKbn';               // 査定区分  <126> Add
		strSQL := strSQL + ',ISNULL(MP.SateiCalcKbn, 0) AS SateiCalcKbn';       // 査定金額計算区分 <155> 2007/12/25 H.Kawato Add
		strSQL := strSQL + ',ISNULL(MP.SateiCalc, 0) AS SateiCalc';             // 査定金額計算値   <155> 2007/12/25 H.Kawato Add
		strSQL := strSQL + ',ISNULL(MP.BunkaiPtn, 0) AS BunkaiPtn';             // 分解パターン

        // ﾊﾞｰｼﾞｮﾝ5以下は預かり源泉税の該当ﾚｺｰﾄﾞが存在しない
        if (m_iVerData > 5) then
    		strSQL := strSQL + ',ISNULL(MP.GensenUseKbn, 0) AS GensenUseKbn';   // 預かり源泉税採用区分

		strSQL := strSQL + ',ISNULL(DI.UketoriName, '''') AS UketoriName ';     // 受取人名称
		strSQL := strSQL + 'FROM MTOKUI MT ';
		strSQL := strSQL + 'LEFT OUTER JOIN MTOKUI_PAY MP ';
		strSQL := strSQL + ' ON (MP.BaseNCode  = MT.NCode) ';
		strSQL := strSQL + 'LEFT OUTER JOIN PayPtnInfo PT ';
		strSQL := strSQL + ' ON (PT.RDelKbn  = 0 ';
		strSQL := strSQL + ' AND PT.payptnNo = 1 ';
		strSQL := strSQL + ' AND PT.PayNCode = MT.NCode ';
		strSQL := strSQL + ' AND PT.MasterKbn = 22) ';
		strSQL := strSQL + 'LEFT OUTER JOIN PayDetailInfo DI ';
		strSQL := strSQL + ' ON (DI.MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
		strSQL := strSQL + ' AND DI.ShiharaiSyubetu = 1 ';
		strSQL := strSQL + ' AND DI.Edaban = 1 ';
		strSQL := strSQL + ' AND DI.RDelKbn = 0 ';                              // <144> Add
		strSQL := strSQL + ' AND DI.PayPtnNo = PT.PayPtnNo ';
		strSQL := strSQL + ' AND DI.PayNCode = MT.NCode) ';
		strSQL := strSQL + 'WHERE  MT.RDelKbn = 0 ';
		strSQL := strSQL + ' AND MT.HojyoKbn2 = 1 ';
		strSQL := strSQL + ' and MT.TemplateKbn = 0';                           // <102>
		strSQL := strSQL + 'ORDER BY SumKbn, PayCode ';
// <154> 2007/08/22 H.Kawato Mod End

        SQL.Add(strSQL);
// <142> 2007/02/20 H.Kawato Mod End

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Qe.Close;
			Qe.Free;
            Exit;
		end;

		while (not EOF) do
		begin
// <142> 2007/02/20 H.Kawato Mod
//			strHojCode := FieldByName ('GCode').AsString;
			strHojCode := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemKihon.Append;
// <142> 2007/02/20 H.Kawato Mod Start
{
			MemKihon.FieldByName('ExNCode'       ).AsFloat   := GetFld('NCode'      ).AsFloat;	// 内部ｺｰﾄﾞ
			MemKihon.FieldByName('intSumKbn'     ).AsInteger := GetFld('SumKbn'     ).AsInteger;
			MemKihon.FieldByName('strHojCode'    ).AsString  := strHojCode;						// 補助ｺｰﾄﾞ(編集後)
			MemKihon.FieldByName('strAssociation').AsString  := GetFld('Renso'      ).AsString;	// 連想
			MemKihon.FieldByName('strNameSimple' ).AsString  := GetFld('NMK'        ).AsString;	// 簡略名称
//			MemKihon.FieldByName('LetterData'    ).AsInteger := GetFld('LetterKbn'  ).AsInteger;// 通知書       <142> Del
			MemKihon.FieldByName('UketoriName'   ).AsString  := GetFld('UketoriName').AsString;	// 受取人名称
			MemKihon.FieldByName('BunkaiPtnData' ).AsInteger := GetFld('BunkaiPtn'  ).AsInteger;// 分解パターン <142> Add

			if GetFld('BunkaiKbn').IsNull then
				fnUpdatePayPtnInfo(Qe,GetFld('NCode').AsFloat);
			MemKihon.FieldByName('ApartData'     ).AsInteger := GetFld('BunkaiKbn' ).AsInteger;	// 分解方法
			MemKihon.FieldByName('SateiData'     ).AsInteger := GetFld('SateiKbn'  ).AsInteger;	// 査定方法     <126> Add
}
			MemKihon.FieldByName('ExNCode'       ).AsFloat   := GetFld('PayNCode'   ).Value;	// 内部ｺｰﾄﾞ
			MemKihon.FieldByName('intSumKbn'     ).AsInteger := GetFld('SumKbn'     ).Value;
			MemKihon.FieldByName('strHojCode'    ).AsString  := strHojCode;						// 補助ｺｰﾄﾞ(編集後)
			MemKihon.FieldByName('strAssociation').AsString  := GetFld('Renso'      ).Value;	// 連想
			MemKihon.FieldByName('strNameSimple' ).AsString  := GetFld('SimpleName' ).Value;	// 簡略名称

			MemKihon.FieldByName('UketoriName'   ).AsString  := GetFld('UketoriName').Value;	// 受取人名称
			MemKihon.FieldByName('PayPtnNo'      ).AsInteger := GetFld('PayPtnNo'   ).Value;    // 条件パターンNo   <142> Add
			MemKihon.FieldByName('BunkaiPtnData' ).AsInteger := GetFld('BunkaiPtn'  ).Value;    // 分解パターン <142> Add

// <142-2> 2007/08/23 H.Kawato Del Start 初期処理でレコードを作製、かつ次レコードの取得ができなくなる為
{
			if GetFld('BunkaiKbn').IsNull then
// <142> 2007/02/20 H.Kawato Mod Start
//				fnUpdatePayPtnInfo(Qe,GetFld('NCode').AsFloat);
            begin
				fnUpdatePayPtnInfo(GetFld('NCode').AsFloat);
				fnUpdateDefPayPtnInfo(Qe,GetFld('NCode').AsFloat);
            end;
// <142> 2007/02/20 H.Kawato Mod End
}
// <142-2> 2007/08/23 H.Kawato Del End
			MemKihon.FieldByName('ApartData'     ).AsInteger := GetFld('BunkaiKbn'  ).Value;    // 分解方法
//			MemKihon.FieldByName('SateiData'     ).AsInteger := GetFld('SateiKbn'   ).Value;    // 査定方法 <126> Add <154> Del
// <142> 2007/02/20 H.Kawato Mod End

// <154> 2007/08/22 H.Kawato Add Start
            // ﾊﾞｰｼﾞｮﾝ5以下は預かり源泉税の該当ﾚｺｰﾄﾞが存在しない
            if (m_iVerData > 5) then
            begin
                // 預かり源泉採用区分
                if (GetFld('GensenUseKbn').Value > 0) then
                	MemKihon.FieldByName('SateiData').AsInteger := 4                                // 査定方法：明細査定固定
                else
                	MemKihon.FieldByName('SateiData').AsInteger := GetFld('SateiKbn'   ).Value;     // 査定方法

                MemKihon.FieldByName('GensenUseKbn' ).AsInteger := GetFld('GensenUseKbn').Value;    // 預かり源泉税採用区分
            end else
    			MemKihon.FieldByName('SateiData'    ).AsInteger := GetFld('SateiKbn'   ).Value;     // 査定方法
// <154> 2007/08/22 H.Kawato Add End

// <155> 2007/12/25 H.Kawato Add Start
			MemKihon.FieldByName('SateiCalcData'    ).AsInteger := GetFld('SateiCalcKbn').Value;    // 査定金額計算

            if (GetFld('SateiCalcKbn').Value = 1) then      // 0:なし, 1:比率, 2:定額
    			MemKihon.FieldByName('SateiCalcHiritu'  ).AsCurrency := GetFld('SateiCalc'   ).Value
            else if (GetFld('SateiCalcKbn').Value = 2) then
    			MemKihon.FieldByName('SateiCalcTeigaku' ).AsCurrency := GetFld('SateiCalc'   ).Value;
// <155> 2007/12/25 H.Kawato Add End

			MemKihon.Post;
			next;
		end;
	end;
    Qe.Close;
	Qe.Free;

	MemKihon.First;

	DSKihon.DataSet := MemKihon;

    m_DLKihonFlg    := True;    // <155> 2007/12/25 H.Kawato Add

	m_bChange       := False;

end;
//<GA001>ST
//**********************************************************************
//*		Proccess	:	外貨基本情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/20
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetKihonInfoG();
var
	strHojCode	: String;
	strFormat	: String;
	GQe			: TMQuery;
    strSQL      : String;       
begin
	m_bChange := TRUE;

	GQe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, GQe);	// DBとMQueryの接続

	DSKihonG.DataSet := nil;

	MemKihonG.Close;
	MemKihonG.Open;

	with (GQe) do
	begin
		Close ();
		SQL.Clear();
		strSQL := 'SELECT ';
		strSQL := strSQL + ' ISNULL(MT.SumKbn, 0) AS SumKbn';                   // 実在／合計区分
		strSQL := strSQL + ',ISNULL(MT.NCode, 0) AS PayNCode';                  // 支払先内部ｺｰﾄﾞ
		strSQL := strSQL + ',ISNULL(MT.GCode, '''') AS PayCode';                // 支払先外部ｺｰﾄﾞ
		strSQL := strSQL + ',ISNULL(MT.Renso, '''') AS Renso';                  // 連想
		strSQL := strSQL + ',ISNULL(MT.NM, '''') AS LongName';                  // 支払先正式名称
		strSQL := strSQL + ',ISNULL(MT.NMK, '''') AS SimpleName';               // 支払先簡略名称
        strSQL := strSQL + ',ISNULL(MP.GaikaKbn,0) As GaikaKbn';                // 外貨採用区分
        strSQL := strSQL + ',ISNULL(MP.GaiPayKbn,0) As GaiPaykbn ';             // 外貨標準支払方法
		strSQL := strSQL + 'FROM MTOKUI MT ';
		strSQL := strSQL + 'LEFT OUTER JOIN MTOKUI_PAY MP ';
		strSQL := strSQL + ' ON (MP.BaseNCode  = MT.NCode) ';
		strSQL := strSQL + 'WHERE  MT.RDelKbn = 0 ';
		strSQL := strSQL + ' AND MT.HojyoKbn2 = 1 ';
		strSQL := strSQL + ' and MT.TemplateKbn = 0';
		strSQL := strSQL + 'ORDER BY SumKbn, PayCode ';
        SQL.Add(strSQL);
		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(GQe);
            GQe.Close;
			GQe.Free;
            Exit;
		end;

		while (not EOF) do
		begin
			strHojCode := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemKihonG.Append;
			MemKihonG.FieldByName('ExNCode'       ).AsFloat   := GetFld('PayNCode'   ).Value;	  // 内部ｺｰﾄﾞ
			MemKihonG.FieldByName('intSumKbn'     ).AsInteger := GetFld('SumKbn'     ).Value;
			MemKihonG.FieldByName('strHojCode'    ).AsString  := strHojCode;					  // 補助ｺｰﾄﾞ(編集後)
			MemKihonG.FieldByName('strAssociation').AsString  := GetFld('Renso'      ).Value;	  // 連想
			MemKihonG.FieldByName('strNameSimple' ).AsString  := GetFld('SimpleName' ).Value;	  // 簡略名称
   			MemKihonG.FieldByName('GaiData'    ).AsInteger    := GetFld('GaiKaKbn'  ).Value;       // 外貨採用区分
			// 外貨区分　　DB 1,3,4 →画面 1,2,3
			MemKihonG.FieldByName('GaiPayData' ).AsInteger    := GetFld('GaiPayKbn').Value;       // 外貨標準支払方法
	        if GetFld('GaiPayKbn').AsInteger =  0 then
	    		MemKihonG.FieldByName('GaiPayData').AsInteger := 1
	        else if GetFld('GaiPayKbn').AsInteger =  3 then
                MemKihonG.FieldByName('GaiPayData').AsInteger := 2
	        else if GetFld('GaiPaykbn').AsInteger = 4 then
				MemKihonG.FieldByName('GaiPayData').AsInteger := 3;
			MemKihonG.Post;
            next;
        end;
	end;
    GQe.Close;
	GQe.Free;

	MemKihonG.First;

	DSKihonG.DataSet := MemKihonG;

    m_DLKihonGFlg    := True;


	m_bChange       := False;
end;


//************************************************************************
//*		Component		:	MemKihon ( TdxMemData )
//*							基本情報
//*		Event			:	OnBeforePost
//************************************************************************
procedure TJNTCRP004007f.MemKihonBeforePost(DataSet: TDataSet);
var
	cFieldWork	: TField;
	strHojCode	: String;
	sHojCD		: String;
	cMemData	: TdxMemData;

	RecInfo		: RecInfoRec;
	bChgFlg		: Boolean;

    ExNCode     : Extended;
    iPayPtnNo   : Integer;      // <142> Add
    iSateiKbn   : Integer;      // <142> Add
    iBunkaiPtn  : Integer;      // <142> Add

// <122> 2006/04/25 H.Kawato Add
    iRenInitRet : Integer;
    bRendoChk   : Boolean;
//    iLetterKbn  : Integer;    // <139> Del
//    sUketoriName: String;     // <139> Del
// <122> 2006/04/25 H.Kawato Add
begin
	if (m_bChange) then
		Exit;

	if m_FusenFlg then exit;

	bChgFlg     := False;
// <122> 2006/04/25 H.Kawato Add St
    bRendoChk   := False;
    iRenInitRet := -99;
    ExNCode     := 0;
// <122> 2006/04/25 H.Kawato Add Ed

	// -----<159> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<159> Add-Ed-----

	with (DataSet) do
	begin
		cFieldWork := FieldByName ('strHojCode');

		if cFieldWork.AsString = '' then
			abort;

		if	(not fnCheckValidCodeUseCharacters(cFieldWork.AsString)) then
		begin
			Beep ();
			cFieldWork.FocusControl ();
			Abort ();
		end;

// <142> 2007/02/20 H.Kawato Add Start
        if (m_iProAdoptKbn = 1) and (Tab.Items.Selected = TAB_KIHON) then
        begin
            iSateiKbn   := FieldByName('intSateiNo').AsInteger;
            iBunkaiPtn  := FieldByName('BunkaiPtn' ).AsInteger;

            // 査定方法「1:全体」「2:部門別」「3:科目別」
            // 分解パターン「1:ﾌﾟﾛｼﾞｪｸﾄ別」「2:ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別」
            if  ((iSateiKbn = 1) or (iSateiKbn = 2) or (iSateiKbn = 3)) and
                ((iBunkaiPtn = 1) or (iBunkaiPtn = 2)) then
            begin
                Beep ();
                cFieldWork.FocusControl ();
                Abort ();
            end;
        end;
// <142> 2007/02/20 H.Kawato Add End

        cMemData := MemKihon;    // 基本情報

		sHojCD := FieldByName('strHojCode').AsString;
		if (m_nCurCodeAttribute <= 1) then
			sHojCD := Format ('%.16d', [StrToInt64(Trim(sHojCD))]);

        try         // <125>

		    if (State in [dsEdit]) then
            begin
                //Edit用内部ｺｰﾄﾞ作成
                ExNCode   := cMemData.FieldByName('ExNCode' ).AsFloat;
                iPayPtnNo := cMemData.FieldByName('PayPtnNo').AsInteger;        // <142> Add

// <191> Add start
				if(m_LineInfo.iBunkaiPtn <> iBunkaiPtn) then
                begin
                    if(not fnPayPtnInfoChk (sHojCD, 9)) then
                    begin
                        MjsMessageBox (Self, 'プロジェクト別支払情報が登録済みです。', mjWarning, mjDefOK);
                        FieldByName('BunkaiPtn' ).FocusControl ();
                        Abort;
                    end;
                end;
// <191> Add end

// <126> 2006/06/27 H.Kawato Add Start
// <155> 2007/12/13 H.Kawato Add Start
//                if (m_LineInfo.iSateiKbn <> FieldByName ('intSateiNo').AsInteger) then
                if (m_LineInfo.iSateiKbn    <> FieldByName ('intSateiNo').AsInteger) or             // 査定方法
                   (m_LineInfo.iCalcKbn     <> FieldByName ('intSateiCalc').AsInteger) or           // 繰越計算区分
                   (m_LineInfo.nCalcHiritu  <> FieldByName ('SateiCalcHiritu').AsCurrency) or       // 繰越計算値(比率)
                   (m_LineInfo.nCalcTeigaku <> FieldByName ('SateiCalcTeigaku').AsCurrency) then    // 繰越計算値(定額)
// <155> 2007/12/13 H.Kawato Add End
                    m_iSateiChgKbn  := 1;

// <142> 2007/02/20 H.Kawato Mod Start
//                if (m_LineInfo.nBunkai <> FieldByName ('intApartNo').AsInteger) or
//                   (m_LineInfo.iSateiKbn <> FieldByName ('intSateiNo').AsInteger) then
                if (m_LineInfo.nBunkai      <> FieldByName ('intApartNo').AsInteger) or         // 分解方法
                   (m_LineInfo.iSateiKbn    <> FieldByName ('intSateiNo').AsInteger) or         // 査定方法
                   (m_LineInfo.iCalcKbn     <> FieldByName ('intSateiCalc').AsInteger) or       // 繰越計算 <155> Add
                   (m_LineInfo.nCalcHiritu  <> FieldByName ('SateiCalcHiritu').AsInteger) or    // 繰越計算値(比率) <155> Add
                   (m_LineInfo.nCalcTeigaku <> FieldByName ('SateiCalcTeigaku').AsInteger) or   // 繰越計算値(定額) <155> Add
                   ((m_iProAdoptKbn = 1) and (Tab.Items.Selected = TAB_KIHON) and
                    (m_LineInfo.iBunkaiPtn <> FieldByName ('BunkaiPtn').AsInteger)) then
// <142> 2007/02/20 H.Kawato Mod ENd
                begin
                    bRendoChk   := True;
                    iRenInitRet := fnPayProgRendoInit(ExNCode);
                end;
// <126> 2006/06/27 H.Kawato Add End

            	if m_LineInfo.nBunkai <> FieldByName ('intApartNo').AsInteger then
            	begin
// <122> 2006/04/25 H.Kawato Add St
//                    bRendoChk   := True;
//                    iRenInitRet := fnPayProgRendoInit(ExNCode);

                    if (iRenInitRet = 1) or (iRenInitRet = 0) then
                    begin
// <122> 2006/04/25 H.Kawato Add Ed
                        // 分解方法が変更された時、PayPtnDtlの該当ﾚｺｰﾄﾞを削除する
                        m_cDataModule.BeginTran (m_cDBSelect);
// <142> 2007/02/20 H.Kawato Mod
//                        if (not fnDeleteMasterRecordPayPtnDtl(ExNCode)) then			// 支払条件明細ﾏｽﾀ削除
                        if (not fnDeleteMasterRecordPayPtnDtl(ExNCode, iPayPtnNo)) then	// 支払条件明細ﾏｽﾀ削除
                        begin
                        	m_cDataModule.Rollback(m_cDBSelect);						// ﾛｰﾙﾊﾞｯｸ(破棄)
                        	abort;
                        end;
                        m_cDataModule.Commit(m_cDBSelect);								// ｺﾐｯﾄ(反映)

                        m_LineInfo.nBunkai := FieldByName ('intApartNo').AsInteger;
                        bChgFlg := True;
// <142> 2007/02/20 H.Kawato Mod Start
{
                        fnMemDelete(sHojCD,MemFuri);		// 振込情報
                        fnMemDelete(sHojCD,MemFuriDate);	// 期日指定振込情報
                        fnMemDelete(sHojCD,MemDraft);		// 手形情報
                        fnMemDelete(sHojCD,MemCheck);		// 小切手情報
}
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuri);		// 振込情報
//<GA001>
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuri_GD);		// 電信送金
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuri_GT);		// 為替手形
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuri_GK);		// 送金小切手
//<GA001>
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuriDate);	// 期日指定振込情報
                        fnMemDelete(sHojCD,iPayPtnNo,MemDraft);		// 手形情報
                        fnMemDelete(sHojCD,iPayPtnNo,MemCheck);		// 小切手情報
// <142> 2007/02/20 H.Kawato Mod End

                        // GridのOptionsのｾｯﾄ
                        fnGridOptionsControl(False,DISPOSE_TRANSFER,MemFuri);		// 振込情報
                        fnGridOptionsControl(False,DISPOSE_DATETRAN,MemFuriDate);	// 期日指定振込情報
                        fnGridOptionsControl(False,DISPOSE_DRAFT,MemDraft);			// 手形情報
                        fnGridOptionsControl(False,DISPOSE_CHECK,MemCheck);			// 小切手情報

                    end;    // <122> 2006/04/25 H.Kawato Add
            	end;
            end;

            strHojCode := FieldByName('strHojCode').AsString;

            if (m_nCurCodeAttribute <= 1) then
            	strHojCode := Format ('%.16d', [StrToInt64(Trim(strHojCode))]);

            if (State in [dsEdit]) then
            begin
// <122> 2006/04/25 H.Kawato Add St
                if (bRendoChk = False) or
                   (bRendoChk = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
                begin
// <122> 2006/04/25 H.Kawato Add Ed
// <173> DEL        m_cDataModule.BeginTran(m_cDBSelect);
                    if fnUpdateMasterRecordStandard(strHojCode) = False then abort;
                    // 支払条件ﾊﾟﾀｰﾝ
//                    if fnUpDateOtheInfoPayPtnInfo() = False then abort;       // 通知書区分 // <142> Del
                    // 支払詳細情報ﾏｽﾀ
                    if fnUpDateOtheInfoPayDetailInfo() = False then abort;      // 受取人名

// <173> DEL        m_cDataModule.Commit(m_cDBSelect);							// ｺﾐｯﾄ(反映)

// <122> 2006/04/25 H.Kawato Add St
                end
// <131> 2006/08/09 H.Kawato Mod
//                else if (bRendoChk = True) and (iRenInitRet = 10) then
                else if (bRendoChk = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                begin
// <139> 2006/08/11 H.Kawato Del Start
{
                    GridKihon.DataSource.DataSet.FieldByName('ApartData' ).AsInteger := m_LineInfo.nBunkai;
                    GridKihon.DataSource.DataSet.FieldByName('SateiData' ).AsInteger := m_LineInfo.iSateiKbn;   // <126> Add

                    ExNCode      := cMemData.FieldByName('ExNCode'    ).AsFloat;
                    iLetterKbn   := cMemData.FieldByName('LetterKbn'  ).AsInteger;
                    sUketoriName := cMemData.FieldByName('UketoriName').AsString;

                    if fnGetKihonData(ExNCode, iLetterKbn, sUketoriName) then
                        GridKihon.DataSource.DataSet.FieldByName('LetterData' ).AsInteger := iLetterKbn;
}
// <139> 2006/08/11 H.Kawato Del End
                    abort;      // <139> Add
                end;
// <122> 2006/04/25 H.Kawato Add Ed
    	    end;

// <122> 2006/04/25 H.Kawato Add
        finally     // <125>
            fnPayProgRendoExec(iRenInitRet, ExNCode);
        end;        // <125>

		RecInfo.sCD      := FieldByName('strHojCode'    ).AsString;
		RecInfo.sBaseCD  := strHojCode;
		RecInfo.sName    := FieldByName('strNameSimple' ).AsString;
		RecInfo.sRen     := FieldByName('strAssociation').AsString;
        RecInfo.ExNCD    := m_ExNCode;
		RecInfo.PayPtnNo := FieldByName('PayPtnNo'      ).AsInteger;    // <142> Add

		case FieldByName('intApartNo').AsInteger of
			0:	// 比率
			begin
				if (State in [dsEdit]) then
				begin
					if bChgFlg = True then
					begin
// <142> 2007/02/20 H.Kawato Mod
//						fnMemDelete(RecInfo.sBaseCD,MemPayFixed);
						fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemPayFixed);
						// GridのOptionsのｾｯﾄ
						fnGridOptionsControl(False,DISPOSE_RATIO,MemPayFixed);		// 比率
						fnMemUpdate(DISPOSE_RATIO,RecInfo,MemPayRatio);
					end;
				end;
			end;
			1:	// 定額
			begin
				if (State in [dsEdit]) then
				begin
					if bChgFlg = True then
					begin
// <142> 2007/02/20 H.Kawato Mod
//						fnMemDelete(RecInfo.sBaseCD,MemPayRatio);
						fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemPayRatio);
						// GridのOptionsのｾｯﾄ
						fnGridOptionsControl(False,DISPOSE_FIXED,MemPayRatio);		// 定額
						fnMemUpdate(DISPOSE_FIXED,RecInfo,MemPayFixed);
					end;
				end;
			end;
		end;
	end;

	// -----<159> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<159> Add-Ed-----
end;


//**********************************************************************
//*		Proccess	:	権限取得
//**********************************************************************
procedure TJNTCRP004007f.fnGetGrants();
begin

//    m_cJNTArea.FxPermission;						    // 権限取得

// <103>	B_Print.Enabled := m_cJNTArea.IsPrint;			// 印刷権限
	B_Print.Enabled := m_JNTAuthority.IsPrint; 	        // 印刷権限 <AUT> ADD

// <166> コメント↓↓↓
//	if ( m_cJNTArea.IsKessan(TRUE) = 1 ) then		    // 決算確定MSG
//	begin
//		m_nReferMode	:= REFER;						// 決算確定の為参照のみ
//		m_IsUpdate  := False;
//	end
//	else
//	begin
// <166> コメント↑↑↑
// <AUT> MOD-STR
//		if m_cJNTArea.IsAppend and m_cJNTArea.IsModify then
		if m_JNTAuthority.IsAppend and m_JNTAuthority.IsModify then
// <AUT> MOD-END
			m_IsUpdate := True
		else
			m_IsUpdate := False;


		if ( m_IsUpdate ) then
			m_nReferMode	:= NORMAL					// 通常処理
		else
			m_nReferMode	:= REFER;					// 更新権限無し

// <150> 2007/07/24 H.Kawato Add Start
// <AUT> MOD-STR
//		if m_cJNTArea.IsDelete then                     // 削除権限
		if m_JNTAuthority.IsDelete then                 // 削除権限
// <AUT> MOD-END
			m_IsDelete   := True
		else
			m_IsDelete   := False;
// <150> 2007/07/24 H.Kawato Add End
//	end;

end;

procedure TJNTCRP004007f.FormDestroy(Sender: TObject);
begin
// <122> 2006/04/25 H.Kawato Add 進捗連動
	if m_PayProgRendo <> nil then
	begin
		m_PayProgRendo.Free;
		m_PayProgRendo := nil;
	end;
// <122> 2006/04/25 H.Kawato Add

// <TX26> ADD-STR
	// 消費税情報破棄
	if Assigned(m_TaxRateInfo) then
    begin
        m_TaxRateInfo.Free;
        m_TaxRateInfo := Nil;
    end;
// <TX26> ADD-END

// <#TAX10> ADD-STR
	if Assigned(m_TaxRateInfoFront) then
	begin
		m_TaxRateInfoFront.Free;
		m_TaxRateInfoFront := nil;
	end;
// <#TAX10> ADD-END

    // 終了処理<PRN>
	gfnHaniTerm(uvHani);

    // <PRN>
    with PrtParam do
	begin
		Para		:=  uvHani;
		TargetQry   :=  nil;
		CorpSys		:=  uvSelSys;
	end;

    // 開放<PRN>
    PrintAppEntry(nil,nil,3,PrtParam,ArrHdl);
// <141> 2006/08/17 H.Kawato Add Start
	if ( m_RepHandle <> 0 ) then
	begin
// <LPH> MOD-STR
//    	UnloadPackage( m_RepHandle );
    	UnloadPackageHelper( m_RepHandle );
// <LPH> MOD-END
	end;
// <141> 2006/08/17 H.Kawato Add End
end;

procedure TJNTCRP004007f.fnGetHojyoMA(dqMasterData: TMQuery);
var
    i       : Integer;
    nCount  : Integer;
    nMstKbn : Integer;

begin

    // 科目別の第一、第二補助を取得 <104>
    nCount        := 0;
    MASTER_HOJYO1 := 0;
    MASTER_HOJYO2 := 0;

	with (dqMasterData) do
	begin
        // 銀行ﾁｪｯｸ
        nMstKbn := MASTER_BANK;
        if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
           (FieldByName ('BankUse').AsInteger = 1)                                 then
        begin
            nCount := nCount + 1;
            case nCount of
                1:MASTER_HOJYO1 := nMstKbn;
                2:MASTER_HOJYO2 := nMstKbn;
            end;
        end;

        // 取引先ﾁｪｯｸ
        nMstKbn := MASTER_CUSTOMER;
        if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
           (FieldByName ('ToriUse').AsInteger <> 0)                                then
        begin
            nCount := nCount + 1;
            case nCount of
                1:MASTER_HOJYO1 := FieldByName ('ToriUse').AsInteger;
                2:MASTER_HOJYO2 := FieldByName ('ToriUse').AsInteger;
            end;
        end;

        // 社員ﾁｪｯｸ
        nMstKbn := MASTER_STAFF;
        if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
           (FieldByName ('ShainUse').AsInteger = 1)                                then
        begin
            nCount := nCount + 1;
            case nCount of
                1:MASTER_HOJYO1 := nMstKbn;
                2:MASTER_HOJYO2 := nMstKbn;
            end;
        end;

        // 汎用補助1～5
        for i := MASTER_GENERAL01 to MASTER_GENERAL05 do
        begin
            nMstKbn := i;
            if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
               (FieldByName ('HojyoUse' + IntToStr(i - 30)).AsInteger = 1)             then
            begin
                nCount := nCount + 1;
                case nCount of
                    1:MASTER_HOJYO1 := nMstKbn;
                    2:MASTER_HOJYO2 := nMstKbn;
                end;
            end;
        end;
    end;

end;

//-----------------------------------------------------------------------------
// BChangeClick()   <108>
//  < 切出・埋込処理 >
//      PARAM   : Sender : TObject
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.BChangeClick(Sender: TObject);
var
	wkParam : TAppParam;
    lvRect  : TRect;
    lvWidth,
    lvHeight: Integer;
begin

    // ここでActiveControlをｾｯﾄする。
    m_cACControl    :=  Screen.ActiveControl;

    m_bBtnChange := FALSE;

    if ( B_Change.Caption = '埋込(&G)' ) then
    begin
        // 親画面への設定
        wkParam.iAction     :=  ACTID_DOCKINGINEND;         // 格納通知
        B_Change.Caption    := '切出(&G)';                  // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end
    else
    begin
		Visible             :=	FALSE;
        // 現在のｸﾗｲｱﾝﾄ領域を取得し幅と高さを取得
        lvRect              :=  Self.ClientRect;
        lvWidth             :=  lvRect.Right - lvRect.Left;
        lvHeight            :=  lvRect.Bottom - lvRect.Top;

        ClientWidth         :=  lvWidth;
        ClientHeight        :=  lvHeight;
		Visible		        :=	TRUE;

        // 親画面への設定
        wkParam.iAction     :=  ACTID_DOCKINGOUTEND;        // 取出通知
        B_Change.Caption    :=  '埋込(&G)';                 // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end;

    wkParam.pRecord         :=  Pointer(m_Base_pRec);       // 管理構造体ﾎﾟｲﾝﾀ設定
    wkParam.pActionParam    :=  nil;                        // 予備ﾎﾟｲﾝﾀ設定
    TMjsAppRecord(m_Base_pRec^).m_pOwnerEntry(@wkParam);

    m_bBtnChange := TRUE;

end;

procedure TJNTCRP004007f.GridOffsetDblClick(Sender: TObject);
begin
// <152> 2007/08/24 H.Kawato Add
    // 登録・修正権限がない時はﾌｫｰｶｽｾｯﾄしない
    if m_nReferMode = REFER then
        Exit;
// <152> 2007/08/24 H.Kawato Add

    if m_nCurCodeAttribute <= 1 then
        m_cACControl :=Edit00PayCodeNum
    else
        m_cACControl :=Edit00PayCodeFree;

    m_cACControl.SetFocus;

end;

// <122> 2006/04/25 H.Kawato Add St
function TJNTCRP004007f.fnPayProgRendoInit(PayNCode: Double) :Integer;
var
    ProgRendoParam  : TJNTPAYProgRendoParam;
    i   : Integer;
begin
    // 進捗連動 初期処理
    ProgRendoParam.pAppRecord    := Pointer(m_pRec);
    ProgRendoParam.iOptCd        := 54;             // オプションコード・債務処理       //<129> 2006/08/04 H.Kawato Add
    ProgRendoParam.iPrgCd        := 210100;         // プログラムコード・支払情報登録   //<129> 2006/08/04 H.Kawato Add
    ProgRendoParam.dPAYCode      := PayNCode;
    ProgRendoParam.iSateiChgKbn  := m_iSateiChgKbn; // 変更無し
    ProgRendoParam.iNayoseChgKbn := 0;              // 変更あり
    ProgRendoParam.iSyoriKbn     := 0;              // 支払情報登録系処理
   	ProgRendoParam.iSystemCode   := 1;    	        // 債務管理	<163>

    i := m_PayProgRendo.Init(ProgRendoParam);
    Result := i;

end;

function TJNTCRP004007f.fnPayProgRendoExec(InitRet: Integer; PayNCode: Double) :Boolean;
begin
    // 進捗連動 実行終了処理
    if InitRet = 1 then
        m_PayProgRendo.Exec;

    if (InitRet <> -99) then
        m_PayProgRendo.Term;

    m_ProgRendoFlg  := False;
    m_iSateiChgKbn  := 0;

    Result := True;
end;

//<GA001>
function TJNTCRP004007f.fnPayProgRendoExecG(InitRet: Integer; PayNCode: Double) :Boolean;
begin
    // 進捗連動 実行終了処理
    if InitRet = 1 then
        m_PayProgRendoG.Exec;

    if (InitRet <> -99) then
        m_PayProgRendoG.Term;

    m_ProgRendoGFlg  := False;
    Result := True;
end;
//<GA001>ED




function TJNTCRP004007f.fnGetNCode(sCode: String) :Extended;
var
    ExNCode     : Extended;
begin
    Result  :=  0;

    with (m_Qe) do
    begin
        Close();
        SQL.Clear();

        //NCode取得
        SQL.Add('SELECT NCode From MTOKUI                            ');
        SQL.Add('Where GCode = :GC and RDelKbn =0 And HojyoKbn2 = 1  ');

        ParamByName('GC' ).AsString  := sCode;

        if	(not Open) then
        begin
				fnErrorMessageDsp(m_Qe);
				Exit;
        end;

        ExNCode := GetFld('NCode').AsFloat;
    end;

	Result	:= ExNCode;
end;

// <142> 2007/02/20 H.Kawato Mod
//function TJNTCRP004007f.fnGetDraftData(sPayCode: String;
//            iHouHou: Integer; var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer): Boolean;
function TJNTCRP004007f.fnGetDraftData(sPayCode: String; iPayPtnNo, iHouHou: Integer;
// <196> MOD-STR
//              var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer): Boolean;
//<203>
//                var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer;
//                iERKbn: Integer = 0; iChargeFutan: Integer = 0): Boolean;
                var iSite, iTegBunkatuMax, iIraiAccNo, iTegYusouKbn, iTegYusouFutan: Integer;
                iERKbn: Integer = 0; iChargeFutan: Integer = 0; iChargeKbn: Integer = 0): Boolean;
//<203>


// <196> MOD-END
begin
    Result  := False;

	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		SQL.Add('SELECT PD.PayNCode');
		SQL.Add(',DI.Site,DI.TegBunkatuMax,DI.TegYusouKbn,DI.TegYusouFutan');
		SQL.Add(',DI.ERKbn,DI.ChargeFutan');            // <196> ADD
		SQL.Add(',DI.Chargekbn');            // <203> ADD
		SQL.Add(',AI.GCode as IraiAccNo');
		SQL.Add('FROM PayPtnDtl PD ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = PD.MasterKbn AND DI.PayNCode = PD.PayNCode ');
		SQL.Add('AND PD.PayPtnNo = DI.PayPtnNo AND DI.Edaban = 1 ');    // <142> Add
		SQL.Add('AND DI.RDelKbn = 0 ');                 // <144> Add
		SQL.Add('AND PD.HouHou = DI.ShiharaiSyubetu) ');
		SQL.Add('LEFT OUTER JOIN MTOKUI MT ON (PD.PayNCode = MT.NCode AND MT.RDelKbn = 0) ');
		SQL.Add('LEFT OUTER JOIN AccInfo AI ON (DI.AccNCode = AI.NCode AND AI.RDelKbn = 0) ');
		SQL.Add('WHERE PD.MasterKbn = :MK AND PD.HouHou = :iHouHou AND MT.RDelKbn = 0');
        SQL.Add('AND MT.GCode = :PAYCODE ');
        SQL.Add('AND PD.PayPtnNo = :PTNNO ');           // <142> Add
        SQL.Add('AND PD.RDelKbn  = 0 ');                // <144> Add

		ParamByName ('MK').AsInteger      := MASTER_CUSTOMER;
        ParamByName ('PAYCODE').AsString  := sPayCode;
        ParamByName ('iHouHou').AsInteger := iHouHou;
        ParamByName ('PTNNO'  ).AsInteger := iPayPtnNo; // <142> Add

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		if (not EOF) then
		begin
// <196> MOD-STR
//          if (iIraiAccNo     <> FieldByName('IraiAccNo'    ).AsInteger) or
//             (iTegYusouKbn   <> FieldByName('TegYusouKbn'  ).AsInteger) or
//             (iTegYusouFutan <> FieldByName('TegYusouFutan').AsInteger) then
            if (iERKbn          <> FieldByName('ERKbn'        ).AsInteger) or   // 電子債権採用が変更された
               (iIraiAccNo      <> FieldByName('IraiAccNo'    ).AsInteger) or   // 依頼口座が変更された
               ((iERKbn = 0) and
                ((iTegYusouKbn  <> FieldByName('TegYusouKbn'  ).AsInteger) or
                 (iTegYusouFutan<> FieldByName('TegYusouFutan').AsInteger))) or // 手形で郵送料関連が変更された
               ((iERKbn <> 0) and
//<203>
//                (iChargeFutan   <> FieldByName('ChargeFutan').AsInteger)) then	// 電子債権で手数料負担が変更された
                 ((iChargeFutan   <> FieldByName('ChargeFutan').AsInteger) or	// 電子債権で手数料負担が変更された
                  (iChargeKbn     <> FieldByName('ChargeKbn').AsInteger))) then// 電子債権で手数料負担が変更された


// <196> MOD-END
            begin
                iIraiAccNo     := FieldByName('IraiAccNo'    ).AsInteger;
                iTegYusouKbn   := FieldByName('TegYusouKbn'  ).AsInteger;
                iTegYusouFutan := FieldByName('TegYusouFutan').AsInteger;
                iSite          := FieldByName('Site'         ).AsInteger;
                iTegBunkatuMax := FieldByName('TegBunkatuMax').AsInteger;
                Result  := True;
            end;
		end;
	end;
end;

// <142> 2007/02/20 H.Kawato Del Start
{
function TJNTCRP004007f.fnGetKihonData(ExNCode: Extended; var iLetterKbn: Integer; var sUketoriName: String): Boolean;
begin
	Result := False;

	with (m_Qe) do
	begin
		Close ();
		SQL.Clear();
		SQL.Add('SELECT ');
//        SQL.Add('MP.LetterKbn,');                           // 通知書区分 <142> Del
        SQL.Add('DI.UketoriName ');                         // 受取人名称

		SQL.Add('FROM MTOKUI MT ');
		SQL.Add('LEFT OUTER JOIN MTOKUI_PAY MP ON (MP.BaseNCode  = MT.NCode)   ');
		SQL.Add('LEFT OUTER JOIN PayDetailInfo DI ON (DI.MasterKbn = :MK AND DI.PayNCode = MT.NCode AND DI.ShiharaiSyubetu = 1) ');
		SQL.Add('WHERE  MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 ');
        SQL.Add('   AND MT.TemplateKbn = 0 AND MT.NCode = :PAYNCODE');

		ParamByName ('MK').AsInteger     := MASTER_CUSTOMER;
        ParamByName ('PAYNCODE').AsFloat := ExNCode;

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		if (not EOF) then
		begin
//			iLetterKbn   := GetFld('LetterKbn'  ).AsInteger;// 通知書   <142> Del
			sUketoriName := GetFld('UketoriName').AsString;	// 受取人名称
		end;
	end;

    Result := True;
end;
}
// <142> 2007/02/20 H.Kawato Del End
// <122> 2006/04/25 H.Kawato Add Ed

// <128> 2006/06/29 H.Kawato Add Start
//**********************************************************************
//*		Proccess	:	PayBaseInfo取得関数
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2006/06/29
//*		Parameter	:	なし
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPayBaseInfo ():Boolean;
var
	dqMasterInfo: TMQuery;

begin
	dqMasterInfo	:= TMQuery.Create (Self);									// MQueryの構築
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);					// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT ItemID, DataNum FROM PayBaseInfo ');
// <142> 2007/02/20 H.Kawato Mod
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (4004, 4005) ');
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (1103, 1104, 4004, 4005, 4021, 4022, 4023) ');
// <196> MOD-STR
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (1103, 1104, 4002, 4004, 4005, 4021, 4022, 4023) ');     // <154> Mod
		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (1103, 1104, 4002, 4004, 4005, 4021, 4022, 4023' +
                                                     ', 2801' +     // 電子記録債権採用区分
                                                       ') ');
// <196> MOD-END

		Open ();

		while (not EOF) do
		begin
            case (FieldByName ('ItemID').AsInteger) of
                1103 : m_iBmnAssAdopt	:= FieldByName ('DataNum').AsInteger;	// 部門別査定採用区分           // <142> Add
                1104 : m_iKmkAssAdopt	:= FieldByName ('DataNum').AsInteger;	// 科目別査定採用区分           // <142> Add
                4002 : m_iVerData   	:= FieldByName ('DataNum').AsInteger;	// 債務データバージョン         // <154> Add
                4004 : m_iHeikouData	:= FieldByName ('DataNum').AsInteger;	// 平行支払採用区分
			    4005 : m_iHeikouCount	:= FieldbyName ('DataNum').AsInteger;	// 平行支払処理件数
			    4021 : m_iProAdoptKbn	:= FieldbyName ('DataNum').AsInteger;	// ﾌﾟﾛｼﾞｪｸﾄ別支払採用区分       // <142> Add
			    4022 : m_iProjectKbn	:= FieldbyName ('DataNum').AsInteger;	// ﾌﾟﾛｼﾞｪｸﾄ区分                 // <142> Add
			    4023 : m_iSubAdoptKbn	:= FieldbyName ('DataNum').AsInteger;	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用区分    // <142> Add
                2801 : m_iErUseKbn      := FieldbyName ('DataNum').AsInteger;   // 電子記録債権採用区分 <196> ADD
            end;
            next;
		end;
	end;

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

    Result := True;
end;
// <128> 2006/06/29 H.Kawato Add End
//<GA001>ST
//**********************************************************************
//*		Proccess	:	PayBaseInfo取得関数
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2006/06/29
//*		Parameter	:	なし
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPayBaseInfoG ():Boolean;
var
	dqMasterInfo: TMQuery;

begin
    m_iGaiKakbn     := 0;
	dqMasterInfo	:= TMQuery.Create (Self);									// MQueryの構築
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);					// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT ItemID, DataNum FROM PayBaseInfo ');
		SQL.Add	  ('WHERE SystemCode = 3 AND ItemID = 4101  ');
		Open ();

		//	ｴﾗｰの判定
		if Open = False then
		begin
            Result := False;
            Exit;
		end;

		if (not EOF) then
		begin
			m_iGaikaKbn := GetFld('DataNum').AsInteger;	                // 外貨採用区分
		end;
	end;

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

    Result := True;
end;
// <GA001>ED


//**********************************************************************
//*		Proccess	:	PayBaseInfo取得関数
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:   Sender: TObject
//*		Return		:
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.GridPayWay_GCodeEditButtonClick(Sender: TObject);
var
    lvExpSend       : rcJNTExpSend;
    lvExpRecv       : rcJNTExpRecv;
    iExpRtn         : Integer;
	strWherePhase   : String;
    nPrjNCode       : Extended;
    iPartKbn        : Integer;
	cMem		    : TdxMemData;
    strHojCode      : String;
    strFormat       : String;
    nNCode          : Extended;
    sName,sRenso    : String;
    
begin
	cMem        := MemPayWay;
    sRenso      := '';
    nPrjNCode   := 0;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec :=  m_pRec;                        // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     :=  @m_cDBSelect;                  // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     :=  m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     :=  m_cComArea.SystemArea.SysColorD;

    // *********** 取引先ｺｰﾄﾞ(仕入採用限定) ***********
    if (TdxDBGrid (Screen.ActiveControl).FocusedField = GridPayWay_GCode.Field) then
    begin
// <143> 2007/06/08 H.Kawato Mod
//        lvExpSend.MasterKbn     := MASTER_CUSTOMERPLUS02;   // ﾏｽﾀ区分
        lvExpSend.MasterKbn     := MASTER_CUSTOMER;         // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
// <143> 2007/06/08 H.Kawato Mod
//        strWherePhase           := ' MTOKUI.RDelKbn = 0 and MTOKUI.TemplateKbn = 0';   // <102>;
        strWherePhase           := ' MTOKUI.RDelKbn = 0 and MTOKUI.Hojyokbn2 = 1 and MTOKUI.TemplateKbn = 0';
        lvExpSend.WhereStr := strWherePhase;
    end;

    // *********** ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ(ﾌﾟﾛｼﾞｪｸﾄ別支払採用) ***********
    if (TdxDBGrid (Screen.ActiveControl).FocusedField = GridPayWay_PrjCode.Field) then
    begin
        lvExpSend.MasterKbn     := m_iProjectKbn;           // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        strWherePhase           := ' HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0';
        lvExpSend.WhereStr      := strWherePhase;
    end;

    // *********** ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ(ﾌﾟﾛｼﾞｪｸﾄ別支払採用) ***********
    if (TdxDBGrid (Screen.ActiveControl).FocusedField = GridPayWay_PjSubCode.Field) then
    begin
        iPartKbn    := cMem.FieldByName('iPartKbn').AsInteger;
        nPrjNCode   := cMem.FieldByName('PrjNCode').AsFloat;

        lvExpSend.MasterKbn     := m_iProjSubKbn;           // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        strWherePhase           := ' HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0';

        if (iPartKbn = 2) then
        begin
            strWherePhase  := strWherePhase + ' AND HojyoMA.NCode in ('
                    + ' SELECT KsyNCode FROM KousyuPtn'
                    + ' INNER JOIN  KojiInfo'
                    + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode'
                    + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_iProjectKbn)
                    + ' AND KojiInfo.NCode = ' + FloatToStr(nPrjNCode)
                    + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_iProjSubKbn) + ' )';
        end;
        lvExpSend.WhereStr := strWherePhase;
    end;

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;

    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
        // *********** 取引先ｺｰﾄﾞ ***********
        if (TdxDBGrid (Screen.ActiveControl).FocusedField = GridPayWay_GCode.Field) then
        begin
		    if fnGetPayCodeInfo(lvExpRecv.GCode, nNCode, sName, sRenso) = False then
                Exit;

            cMem.Edit;
            strHojCode := lvExpRecv.GCode;
            if (m_nCurCodeAttribute <= 1) then
            begin
            	case (m_nCurCodeAttribute) of
            		0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
            	end;

            	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;

            cMem.FieldByName('ExNCode'          ).AsFloat  := lvExpRecv.NCode;  // 支払先内部ｺｰﾄﾞ
            cMem.FieldByName('strHojCode'       ).AsString := strHojCode;       // 支払先外部ｺｰﾄﾞ
            cMem.FieldByName('BaseHojCode'      ).AsString := lvExpRecv.GCode;  // 支払先外部ｺｰﾄﾞ
            cMem.FieldByName('strNameSimple'    ).AsString := lvExpRecv.NmK;    // 支払先名称
            cMem.FieldByName('strAssociation'   ).AsString := sRenso;           // 連想
        end;

        // *********** ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ ***********
        if (TdxDBGrid (Screen.ActiveControl).FocusedField = GridPayWay_PrjCode.Field) then
        begin
		    if fnGetPayPtnInfoCheck(cMem.FieldByName('ExNCode').AsFloat, lvExpRecv.NCode, 0) = False then
                Exit;

            cMem.Edit;
            strHojCode := lvExpRecv.GCode;
            if (m_iPrjCodeAttr <= 1) then
            begin
            	case (m_iPrjCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            cMem.FieldByName('PrjNCode'  ).AsFloat  := lvExpRecv.NCode;         // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            cMem.FieldByName('PrjGCode'  ).AsString := strHojCode;              // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
           	cMem.FieldByName('PrjName'   ).AsString := lvExpRecv.NmK;           // ﾌﾟﾛｼﾞｪｸﾄ名称
        end;

        // *********** ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ ***********
        if (TdxDBGrid (Screen.ActiveControl).FocusedField = GridPayWay_PjSubCode.Field) then
        begin
		    if fnGetPayPtnInfoCheck(cMem.FieldByName('ExNCode').AsFloat, nPrjNCode, lvExpRecv.NCode) = False then
                Exit;

            cMem.Edit;
            strHojCode := lvExpRecv.GCode;
            if (m_iPjSubCodeAttr <= 1) then
            begin
            	case (m_iPjSubCodeAttr) of
            		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
            	end;

                if (Trim(strHojCode) <> '') then
            		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            cMem.FieldByName('PjSubNCode').AsFloat  := lvExpRecv.NCode;         // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            cMem.FieldByName('PjSubGCode').AsString := strHojCode;              // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
           	cMem.FieldByName('PjSubName' ).AsString := lvExpRecv.NmK;           // ﾌﾟﾛｼﾞｪｸﾄ名称
        end;

        Keybd_Event(VK_RETURN, 0, 0, 0);            //Enter ｷｰのｴﾐｭﾚｲﾄ
		abort;
    end;
end;

//**********************************************************************
//*		Proccess	:	支払先情報取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	nGCode      :   外部ｺｰﾄﾞ
//*                     nNCode		:	内部ｺｰﾄﾞ
//*						sName		:	簡略名称
//*                     sRenso      :   連想
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPayCodeInfo(nGCode: String; var nNCode: Extended;
                                        var sName,sRenso: String): Boolean;
var
	Qe		    : TMQuery;
	strSQL	    : String;
begin
	Result := True;

    if (m_nCurCodeAttribute <= 1) then
		nGCode := Format ('%.16d', [StrToInt64 (Trim (nGCode))]);

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);   // DBとMQueryの接続

        with (Qe) do
        begin
        	Close();
        	SQL.Clear();
        	strSQL := 'SELECT '
                    + ' ISNULL(MT.NCode, 0) AS PayNCode '   // 支払先内部ｺｰﾄﾞ
                    + ',ISNULL(MT.GCode, '''') AS PayCode ' // 支払先外部ｺｰﾄﾞ
                    + ',ISNULL(MT.Renso, '''') AS Renso '   // 連想
                    + ',ISNULL(MT.NMK, '''') AS PayName '   // 支払先名称
                    + 'FROM MTOKUI MT '
                    + 'WHERE MT.RDelKbn = 0  AND MT.SumKbn <> 9 '
// <174> Mod
//                  + ' AND ((MT.SumKbn = 0 and MT.HojyoKbn2 = 1) or MT.SumKbn = 1) '
					+ ' AND ((MT.SumKbn = 0 or MT.SumKbn = 1) and MT.HojyoKbn2 = 1) '
// <174> Mod
                    + ' AND MT.TemplateKbn = 0 '
                    + ' AND MT.GCode = ' + AnsiQuotedStr(nGCode, '''');

        	SQL.Add(strSQL);

        	//	ｴﾗｰの判定
        	if Open = False then
        	begin
        		fnErrorMessageDsp(m_Qe);
                Result := False;
                Exit;
        	end;

			if EOF then
                Result := False
            else
            begin
				nNCode   := FieldByName('PayNCode'  ).Value;    // 支払先内部ｺｰﾄﾞ
				sName    := FieldByName('PayName'   ).Value;    // 支払先名称
				sRenso   := FieldByName('Renso'     ).Value;    // 連想
            end;
        end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	ﾌﾟﾛｼﾞｪｸﾄ情報取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	nGCode      :   外部ｺｰﾄﾞ
//*                     nNCode		:	内部ｺｰﾄﾞ
//*						sName		:	簡略名称
//*                     iPartKbn    :   工種管理区分
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPrjCodeInfo(nGCode: String; iKbn: Integer;
                    var nNCode: Extended; var sName: String; var iPartKbn: Integer): Boolean;
var
	Qe		    : TMQuery;
	strSQL	    : String;
begin
	Result := True;

    if (m_iPrjCodeAttr <= 1) then
		nGCode := Format ('%.16d', [StrToInt64 (Trim (nGCode))]);

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);   // DBとMQueryの接続

        with (Qe) do
        begin
        	Close();
        	SQL.Clear();
        	strSQL := 'SELECT '
                    + ' ISNULL(HM.NCode, 0) AS NCode '              // 内部ｺｰﾄﾞ
                    + ',ISNULL(HM.GCode, '''') AS GCode '           // 外部ｺｰﾄﾞ
                    + ',ISNULL(HM.SimpleName, '''') AS SimpleName ' // 簡略名称
                    + ',ISNULL(KI.PartKbn, 0) AS PartKbn '          // 工種管理区分
                    + 'FROM HojyoMA HM '
                    + 'LEFT OUTER JOIN KojiInfo KI '
                    + 'ON  KI.MasterKbn = HM.MasterKbn '
                    + 'AND KI.NCode = HM.NCode '
                    + 'WHERE HM.RDelKbn = 0 '
                    + ' AND HM.GCode = ' + AnsiQuotedStr(nGCode, '''')
                    + ' AND HM.MasterKbn = ' + IntToStr(iKbn);      // ﾏｽﾀ区分

        	SQL.Add(strSQL);

        	//	ｴﾗｰの判定
        	if Open = False then
        	begin
        		fnErrorMessageDsp(m_Qe);
                Result := False;
                Exit;
        	end;

			if EOF then
            begin
                Result := False;
                Exit;
            end
            else
            begin
				nNCode   := FieldByName('NCode'  ).Value;           // 内部ｺｰﾄﾞ
				sName    := FieldByName('SimpleName').Value;        // 名称
                iPartKbn := FieldByName('PartKbn').Value;           // 工種管理区分
            end;
        end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ情報取得
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	nGCode      :   外部ｺｰﾄﾞ
//*                     nNCode		:	内部ｺｰﾄﾞ
//*						sName		:	簡略名称
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPjSubCodeInfo(nGCode: String; iKbn, iPartKbn: Integer;
                    nPrjNCode: Extended; var nNCode: Extended; var sName: String): Boolean;
var
	Qe		    : TMQuery;
	strSQL	    : String;
begin
	Result := True;

    if (m_iPjSubCodeAttr <= 1) then
		nGCode := Format ('%.16d', [StrToInt64 (Trim (nGCode))]);

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);   // DBとMQueryの接続

        with (Qe) do
        begin
        	Close();
        	SQL.Clear();
        	strSQL := 'SELECT '
                    + ' ISNULL(HM.NCode, 0) AS NCode '              // 内部ｺｰﾄﾞ
                    + ',ISNULL(HM.GCode, '''') AS GCode '           // 外部ｺｰﾄﾞ
                    + ',ISNULL(HM.SimpleName, '''') AS SimpleName ' // 簡略名称
                    + 'FROM HojyoMA HM '
                    + 'WHERE HM.RDelKbn = 0 '
                    + ' AND HM.GCode = ' + AnsiQuotedStr(nGCode, '''')
                    + ' AND HM.MasterKbn = ' + IntToStr(iKbn);      // ﾏｽﾀ区分

            if (iPartKbn = 2) then
            begin
                strSQL  := strSQL + ' AND HM.NCode in ('
                        + ' SELECT KsyNCode FROM KousyuPtn KP '
                        + ' INNER JOIN  KojiInfo KI '
                        + ' ON KP.PtnNCode = KI.PtnNCode'
                        + ' AND KI.MasterKbn = ' + IntToStr(iKbn - 100)
                        + ' AND KI.NCode = ' + FloatToStr(nPrjNCode)
                        + ' WHERE KP.MasterKbn = ' + IntToStr(iKbn) + ' )';
            end;

        	SQL.Add(strSQL);

        	//	ｴﾗｰの判定
        	if Open = False then
        	begin
        		fnErrorMessageDsp(m_Qe);
                Result := False;
                Exit;
        	end;

			if EOF then
            begin
                Result := False;
                Exit;
            end
            else
            begin
				nNCode   := FieldByName('NCode'  ).Value;           // 内部ｺｰﾄﾞ
				sName    := FieldByName('SimpleName').Value;        // 名称
            end;
        end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//**********************************************************************
//*		Proccess	:	支払条件パターンチェック
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	nNCode		:	内部ｺｰﾄﾞ
//*		Return		:	データなし(True)/データあり(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetPayPtnInfoCheck(nPayNCode, nPrjNCode, nPjSubNCode: Extended): Boolean;
var
	Qe		    : TMQuery;
	strSQL	    : String;
begin
	Result      := True;

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);   // DBとMQueryの接続

        with (Qe) do
        begin
        	Close();
        	SQL.Clear();
        	strSQL := 'SELECT '
                    + ' ISNULL(PayPtnNo, 0) AS PayPtnNo '   // 支払条件ﾊﾟﾀｰﾝNo
                    + 'FROM PayPtnInfo '
                    + 'WHERE RDelKbn = 0 '
                    + ' AND PjSubNCode = ' + FloatToStr(nPjSubNCode)
                    + ' AND PrjNCode = ' + FloatToStr(nPrjNCode)
                    + ' AND BmnNCode = 0 '
                    + ' AND PayNCode = ' + FloatToStr(nPayNCode)
                    + ' AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        	SQL.Add(strSQL);

        	//	ｴﾗｰの判定
        	if Open = False then
        	begin
        		fnErrorMessageDsp(m_Qe);
                Result := False;
                Exit;
        	end;

			if not EOF then
                Result := False;  // 登録済み
        end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//************************************************************************
//*		Component   :	MemPayWay ( TdxMemData )
//*						支払方法
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Event       :	OnBeforePost
//************************************************************************
procedure TJNTCRP004007f.MemPayWayBeforePost(DataSet: TDataSet);
var
	cFieldWork	        : TField;
	strHojCode,sHojCD   : String;
	cMemData	        : TdxMemData;
	RecInfo		        : RecInfoRec;
	bChgFlg,bRendoChk   : Boolean;
    ExNCode             : Extended;
    nNCode,nPrjNCode    : Extended;
    iPayPtnNo,iPartKbn  : Integer;
    iRenInitRet         : Integer;
    sName,sRenso        : String;
    strFormat           : String;
begin
	if (m_bChange) then
		Exit;

	if m_FusenFlg then exit;

	bChgFlg     := False;
    bRendoChk   := False;
    iRenInitRet := -99;

	// -----<159> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<159> Add-Ed-----

	with (DataSet) do
	begin
		cFieldWork := FieldByName ('strHojCode');

		if cFieldWork.AsString = '' then
			abort;

		if	(not fnCheckValidCodeUseCharacters(cFieldWork.AsString)) then
		begin
			Beep ();
			cFieldWork.FocusControl ();
			Abort ();
		end;

        Edit;    		

        // 取引先ｺｰﾄﾞ
        strHojCode := FieldByName('strHojCode').AsString;

        if  (Trim(m_PayWayLineInfo.PayCode) = '') or
            (Trim(m_PayWayLineInfo.PayCode) <> Trim(strHojCode)) then
        begin
            FieldByName('BaseHojCode'  ).AsString := strHojCode;           // 支払先外部ｺｰﾄﾞ

            if fnGetPayCodeInfo(strHojCode, nNCode, sName, sRenso) = False then
            begin
                Beep;
            	abort;
            end;

            if (m_nCurCodeAttribute <= 1) then
            begin
            	case (m_nCurCodeAttribute) of
            		0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
            		1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
            	end;

            	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
            end;
            FieldByName('ExNCode'          ).AsFloat  := nNCode;           // 支払先内部ｺｰﾄﾞ
            FieldByName('strHojCode'       ).AsString := strHojCode;       // 支払先外部ｺｰﾄﾞ
            FieldByName('strNameSimple'    ).AsString := sName;            // 支払先名称
            FieldByName('strAssociation'   ).AsString := sRenso;           // 連想
        end;

        // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
        strHojCode := FieldByName('PrjGCode').AsString;

        if  (Trim(m_PayWayLineInfo.PrjCode) = '') or
            (Trim(m_PayWayLineInfo.PrjCode) <> Trim(strHojCode)) then
        begin
            FieldByName('PjSubNCode'   ).AsFloat   := 0;                   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            FieldByName('PjSubGCode'   ).AsString  := '';                  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
            FieldByName('PjSubName'    ).AsString  := '';                  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称

            if (Trim(FieldByName('strHojCode').AsString) <> '') and (Trim(strHojCode) = '') Then
            begin
                FieldByName('PrjNCode'  ).AsFloat  := 0;                   // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                FieldByName('PrjGCode'  ).AsString := '';                  // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                FieldByName('PrjName'   ).AsString := 'その他';            // ﾌﾟﾛｼﾞｪｸﾄ名称
                GridPayWay_PjSubCode.DisableEditor  := True;
                GridPayWay_PjSubCode.ReadOnly       := True;
                GridPayWay_PjSubCode.TabStop        := False;
            end
            else if (Trim(strHojCode) <> '') then
            begin
                if fnGetPrjCodeInfo(strHojCode, m_iProjectKbn, nNCode, sName, iPartKbn) = False then
                begin
                    Beep;
                	abort;
                end;

                if (m_iPrjCodeAttr <= 1) then
                begin
                	case (m_iPrjCodeAttr) of
                		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
                		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
                	end;

                    if (Trim(strHojCode) <> '') then
                		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                end;

                FieldByName('PrjNCode' ).AsFloat   := nNCode;              // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                FieldByName('PrjGCode' ).AsString  := strHojCode;          // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                FieldByName('PrjName'  ).AsString  := sName;               // ﾌﾟﾛｼﾞｪｸﾄ名称
                FieldByName('iPartKbn' ).AsInteger := iPartKbn;            // 工種管理区分

                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ採用なし
                if (iPartKbn = 0) then
                begin
                    GridPayWay_PjSubCode.DisableEditor  := True;
                    GridPayWay_PjSubCode.ReadOnly       := True;
                    GridPayWay_PjSubCode.TabStop        := False;
                end
                else
                begin
                    GridPayWay_PjSubCode.DisableEditor  := False;
                    GridPayWay_PjSubCode.ReadOnly       := False;
                    GridPayWay_PjSubCode.TabStop        := True;
                end;
            end;
        end;

        if (m_iSubAdoptKbn = 1) then
        begin
            // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
            strHojCode := FieldByName('PjSubGCode').AsString;

            if  (Trim(m_PayWayLineInfo.PjSubCode) = '') or
                (Trim(m_PayWayLineInfo.PjSubCode) <> Trim(strHojCode)) then
            begin
                if (Trim(FieldByName('strHojCode').AsString) <> '') and (Trim(strHojCode) = '') Then
                begin
                    FieldByName('PjSubNCode'   ).AsFloat  := 0;                 // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    FieldByName('PjSubGCode'   ).AsString := '';                // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                    FieldByName('PjSubName'    ).AsString := 'その他';          // ﾌﾟﾛｼﾞｪｸﾄ名称
                end
                else if (Trim(strHojCode) <> '') then
                begin
                    iPartKbn    := FieldByName('iPartKbn' ).AsInteger;
                    nPrjNCode   := FieldByName('PrjNCode' ).AsFloat;

                    if fnGetPjSubCodeInfo(strHojCode, m_iProjSubKbn, iPartKbn, nPrjNCode, nNCode, sName) = False then
                    begin
                        Beep;
                    	abort;
                    end;

                    if (m_iPjSubCodeAttr <= 1) then
                    begin
                    	case (m_iPjSubCodeAttr) of
                    		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
                    		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
                    	end;

                        if (Trim(strHojCode) <> '') then
                    		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                    end;

                    FieldByName('PjSubNCode'   ).AsFloat  := nNCode;            // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    FieldByName('PjSubGCode'   ).AsString := strHojCode;        // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                    FieldByName('PjSubName'    ).AsString := sName;             // ﾌﾟﾛｼﾞｪｸﾄ名称
                end;
            end;
        end;

        // 分解区分            
        if  (Trim(FieldByName('strHojCode').AsString) <> '') and
            ((Trim(FieldByName('strApart').AsString) = '') or
             (m_PayWayLineInfo.BunkaiKbn <> FieldByName('intApartNo').AsInteger)) then
        begin
            if (FieldByName('intApartNo').AsInteger = 1) then
                FieldByName('ApartData'   ).AsInteger := 1
            else
                FieldByName('ApartData'   ).AsInteger := 0;
        end;

        cMemData := MemPayWay;    // 支払方法

        // 入力値ﾁｪｯｸ
        if (State in [dsInsert]) then
        begin
            if not fnGridPayWayCheck(cMemData) then
            begin
                Beep;
                MJSMessageBoxEx (Self,'同一情報が登録済です', '登録', mjError, mjOK, mjDefOK);
                abort;
            end;
        end;

		sHojCD := FieldByName('strHojCode').AsString;
		if (m_nCurCodeAttribute <= 1) then
			sHojCD := Format ('%.16d', [StrToInt64(Trim(sHojCD))]);

        //Edit用内部ｺｰﾄﾞ作成
        ExNCode   := cMemData.FieldByName('ExNCode' ).AsFloat;
        iPayPtnNo := cMemData.FieldByName('PayPtnNo').AsInteger;

        try
            // PayPtnDtlの削除
		    if (State in [dsEdit]) or (State in [dsInsert]) then
            begin
                if  (State in [dsInsert]) or
                    (m_LineInfo.nBunkai <> FieldByName ('intApartNo').AsInteger) then
                begin
                    bRendoChk   := True;
                    iRenInitRet := fnPayProgRendoInit(ExNCode);

                    if (iRenInitRet = 1) or (iRenInitRet = 0) then
                    begin
                        // 分解方法が変更された時、PayPtnDtlの該当ﾚｺｰﾄﾞを削除する
                        m_cDataModule.BeginTran (m_cDBSelect);
                        if (not fnDeleteMasterRecordPayPtnDtl(ExNCode, iPayPtnNo)) then	// 支払条件明細ﾏｽﾀ削除
                        begin
                        	m_cDataModule.Rollback(m_cDBSelect);						// ﾛｰﾙﾊﾞｯｸ(破棄)
                        	abort;
                        end;
                        m_cDataModule.Commit(m_cDBSelect);								// ｺﾐｯﾄ(反映)

                        bChgFlg := True;
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuri);		// 振込情報
                        fnMemDelete(sHojCD,iPayPtnNo,MemFuriDate);	// 期日指定振込情報
                        fnMemDelete(sHojCD,iPayPtnNo,MemDraft);		// 手形情報
                        fnMemDelete(sHojCD,iPayPtnNo,MemCheck);		// 小切手情報

                        // GridのOptionsのｾｯﾄ
                        fnGridOptionsControl(False,DISPOSE_TRANSFER,MemFuri);		// 振込情報
                        fnGridOptionsControl(False,DISPOSE_DATETRAN,MemFuriDate);	// 期日指定振込情報
                        fnGridOptionsControl(False,DISPOSE_DRAFT,MemDraft);			// 手形情報
                        fnGridOptionsControl(False,DISPOSE_CHECK,MemCheck);			// 小切手情報
                    end;
            	end;
            end;

            strHojCode := FieldByName('strHojCode').AsString;

            if (m_nCurCodeAttribute <= 1) then
            	strHojCode := Format ('%.16d', [StrToInt64(Trim(strHojCode))]);

            // PayPtnInfo, UketoriNameの更新
            if (State in [dsEdit]) or (State in [dsInsert]) then
            begin
                if (bRendoChk = False) or
                   (bRendoChk = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
                begin
// <173> DEL        m_cDataModule.BeginTran(m_cDBSelect);

                    // 分解方法変更あり
                    if ((bChgFlg = True) and (State in [dsEdit])) or (State in [dsInsert]) then
                    begin
                        // 分解方法の更新
                        if fnUpdateMasterRecordStandard(strHojCode) = False then abort;
                    end;

                    // 支払詳細情報ﾏｽﾀ
                    if fnUpDateOtheInfoPayDetailInfo() = False then abort;      // 受取人名

// <173> DEL        m_cDataModule.Commit(m_cDBSelect);							// ｺﾐｯﾄ(反映)

                    // 登録済判定ﾌﾗｸﾞのｾｯﾄ
                    MemPayWay.Edit;
        			MemPayWay.FieldByName('bDisableEditor').AsBoolean := True;  // 登録済フラグ
                end
                else if (bRendoChk = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                begin
                    abort;
                end;
    	    end;

        finally
            fnPayProgRendoExec(iRenInitRet, ExNCode);
        end;

		RecInfo.sCD      := FieldByName('strHojCode'    ).AsString;
		RecInfo.sBaseCD  := strHojCode;
		RecInfo.sName    := FieldByName('strNameSimple' ).AsString;
		RecInfo.sRen     := FieldByName('strAssociation').AsString;
        RecInfo.ExNCD    := m_ExNCode;
		RecInfo.PayPtnNo := FieldByName('PayPtnNo'      ).AsInteger;

		case FieldByName('intApartNo').AsInteger of
			0:	// 比率
			begin
				if (State in [dsEdit]) then
				begin
					if bChgFlg = True then
					begin
						fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemPayFixed);
						// GridのOptionsのｾｯﾄ
						fnGridOptionsControl(False,DISPOSE_RATIO,MemPayFixed);		// 比率
						fnMemUpdate(DISPOSE_RATIO,RecInfo,MemPayRatio);
					end;
                end
                else if (State in [dsInsert]) then
                begin
           			fnMemUpdate(DISPOSE_RATIO,RecInfo,MemPayRatio);
				end;
			end;
			1:	// 定額
			begin
				if (State in [dsEdit]) then
				begin
					if bChgFlg = True then
					begin
						fnMemDelete(RecInfo.sBaseCD,RecInfo.PayPtnNo,MemPayRatio);
						// GridのOptionsのｾｯﾄ
						fnGridOptionsControl(False,DISPOSE_FIXED,MemPayRatio);		// 定額
						fnMemUpdate(DISPOSE_FIXED,RecInfo,MemPayFixed);
					end;
                end
                else if (State in [dsInsert]) then
                begin
					fnMemUpdate(DISPOSE_FIXED,RecInfo,MemPayFixed);
				end;
			end;
		end;
	end;
    fnSetPayWayLineData(GridPayWay);

	// -----<159> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<159> Add-Ed-----
end;

//************************************************************************
//*		Component   :	GridPayWay ( TdxDBGrid )
//*						支払方法
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Event       :	GridPayWayCustomDrawCell
//************************************************************************
procedure TJNTCRP004007f.GridPayWayCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
	bEditor   : Boolean;
begin
	// 登録済の支払先、ﾌﾟﾛｼﾞｪｸﾄ、ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞは変更不可
	if (Sender = GridPayWay) and
	   ((AColumn.Name = 'GridPayWay_GCode') or
        (AColumn.Name = 'GridPayWay_PrjCode') or
        (AColumn.Name = 'GridPayWay_PjSubCode')) then
	begin
        bEditor := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('bDisableEditor').AsBoolean;
		AColumn.DisableEditor   := bEditor;
        AColumn.TabStop         := not bEditor;
	end;
end;

//************************************************************************
//*		Component   :	GridPayWay ( TdxDBGrid )
//*						支払方法
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Event       :	GridPayWayBeforeChangeColumn
//************************************************************************
procedure TJNTCRP004007f.GridPayWayBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
    nNCode      : Extended;
    strHojCode  : String;
    strFormat   : String;
    sName,sRenso: String;
    iPartKbn    : Integer;
    nPrjNCode   : Extended;
begin
	if Node <> NewNode then
		Exit;

    if (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('bDisableEditor').AsBoolean) then
    begin
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
            if NewColumn in [0,1,2,3,4,5,6,8] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
            if NewColumn in [0,1,2,3,4,6] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;
    end
    else
    begin
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
            if NewColumn in [1,2,4,6,8] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
            if NewColumn in [1,2,4,6] then
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;
    end;

	With DSPayWay.DataSet do
	begin
		Edit;

        // 取引先ｺｰﾄﾞ
        if (TdxDBGrid (Sender).FocusedField = GridPayWay_GCode.Field) then
        begin
            strHojCode := FieldByName('strHojCode').AsString;

            if  (State in [dsInsert]) or (Trim(m_PayWayLineInfo.PayCode) = '') or
                (Trim(m_PayWayLineInfo.PayCode) <> Trim(strHojCode)) then
            begin
                if Trim(strHojCode) = '' Then
                begin
                    Beep;
                    CanChange := False;
                	GridPayWay.ShowEditor;
                	abort;
                end;

                FieldByName('BaseHojCode'  ).AsString := strHojCode;           // 支払先外部ｺｰﾄﾞ

                if fnGetPayCodeInfo(strHojCode, nNCode, sName, sRenso) = False then
                begin
                    Beep;
                    CanChange := False;
                	GridPayWay.ShowEditor;
                	abort;
                end;

                if (m_nCurCodeAttribute <= 1) then
                begin
                	case (m_nCurCodeAttribute) of
                		0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
                		1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
                	end;

                	strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                end;
                FieldByName('ExNCode'          ).AsFloat  := nNCode;           // 支払先内部ｺｰﾄﾞ
                FieldByName('strHojCode'       ).AsString := strHojCode;       // 支払先外部ｺｰﾄﾞ
                FieldByName('strNameSimple'    ).AsString := sName;            // 支払先名称
                FieldByName('strAssociation'   ).AsString := sRenso;           // 連想
            end;
        end
        else
        // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
        if (TdxDBGrid (Sender).FocusedField = GridPayWay_PrjCode.Field) then
        begin
            strHojCode := FieldByName('PrjGCode').AsString;

            if  (Trim(m_PayWayLineInfo.PrjCode) = '') or
                (Trim(m_PayWayLineInfo.PrjCode) <> Trim(strHojCode)) then
            begin
                FieldByName('PjSubNCode'   ).AsFloat   := 0;                   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
                FieldByName('PjSubGCode'   ).AsString  := '';                  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ外部ｺｰﾄﾞ
                FieldByName('PjSubName'    ).AsString  := '';                  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称

                if (Trim(FieldByName('strHojCode').AsString) <> '') and (Trim(strHojCode) = '') Then
                begin
                    FieldByName('PrjNCode'  ).AsFloat  := 0;                   // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    FieldByName('PrjGCode'  ).AsString := '';                  // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                    FieldByName('PrjName'   ).AsString := 'その他';            // ﾌﾟﾛｼﾞｪｸﾄ名称
                    GridPayWay_PjSubCode.DisableEditor  := True;
                    GridPayWay_PjSubCode.ReadOnly       := True;
                    GridPayWay_PjSubCode.TabStop        := False;
                end
                else if (Trim(strHojCode) <> '') then
                begin
                    if fnGetPrjCodeInfo(strHojCode, m_iProjectKbn, nNCode, sName, iPartKbn) = False then
                    begin
                        Beep;
                        CanChange := False;
                    	GridPayWay.ShowEditor;
                    	abort;
                    end;

                    if (m_iPrjCodeAttr <= 1) then
                    begin
                    	case (m_iPrjCodeAttr) of
                    		0: strFormat := '%'  + IntToStr (m_iPrjCodeDigit) + 'd';
                    		1: strFormat := '%.' + IntToStr (m_iPrjCodeDigit) + 'd';
                    	end;

                        if (Trim(strHojCode) <> '') then
                    		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                    end;

                    FieldByName('PrjNCode' ).AsFloat   := nNCode;              // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    FieldByName('PrjGCode' ).AsString  := strHojCode;          // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                    FieldByName('PrjName'  ).AsString  := sName;               // ﾌﾟﾛｼﾞｪｸﾄ名称
                    FieldByName('iPartKbn' ).AsInteger := iPartKbn;            // 工種管理区分

                    // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ採用なし
                    if (iPartKbn = 0) then
                    begin
                        GridPayWay_PjSubCode.DisableEditor  := True;
                        GridPayWay_PjSubCode.ReadOnly       := True;
                        GridPayWay_PjSubCode.TabStop        := False;
                    end
                    else
                    begin
                        GridPayWay_PjSubCode.DisableEditor  := False;
                        GridPayWay_PjSubCode.ReadOnly       := False;
                        GridPayWay_PjSubCode.TabStop        := True;
                    end;
                end;
            end;
        end
        else
        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ
        if (TdxDBGrid (Sender).FocusedField = GridPayWay_PjSubCode.Field) then
        begin
            strHojCode := FieldByName('PjSubGCode').AsString;

            if  (Trim(m_PayWayLineInfo.PjSubCode) = '') or
                (Trim(m_PayWayLineInfo.PjSubCode) <> Trim(strHojCode)) then
            begin
                if (Trim(FieldByName('strHojCode').AsString) <> '') and (Trim(strHojCode) = '') Then
                begin
                    FieldByName('PjSubNCode'   ).AsFloat  := 0;                // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    FieldByName('PjSubGCode'   ).AsString := '';               // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                    FieldByName('PjSubName'    ).AsString := 'その他';         // ﾌﾟﾛｼﾞｪｸﾄ名称
                end
                else if (Trim(strHojCode) <> '') then
                begin
                    iPartKbn    := FieldByName('iPartKbn' ).AsInteger;
                    nPrjNCode   := FieldByName('PrjNCode' ).AsFloat;

                    if fnGetPjSubCodeInfo(strHojCode, m_iProjSubKbn, iPartKbn, nPrjNCode, nNCode, sName) = False then
                    begin
                        Beep;
                        CanChange := False;
                    	GridPayWay.ShowEditor;
                    	abort;
                    end;

                    if (m_iPjSubCodeAttr <= 1) then
                    begin
                    	case (m_iPjSubCodeAttr) of
                    		0: strFormat := '%'  + IntToStr (m_iPjSubCodeDigit) + 'd';
                    		1: strFormat := '%.' + IntToStr (m_iPjSubCodeDigit) + 'd';
                    	end;

                        if (Trim(strHojCode) <> '') then
                    		strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                    end;

                    FieldByName('PjSubNCode'   ).AsFloat  := nNCode;           // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
                    FieldByName('PjSubGCode'   ).AsString := strHojCode;       // ﾌﾟﾛｼﾞｪｸﾄ外部ｺｰﾄﾞ
                    FieldByName('PjSubName'    ).AsString := sName;            // ﾌﾟﾛｼﾞｪｸﾄ名称
                end;
            end;
        end
        else
        // 分解区分
        if (TdxDBGrid (Sender).FocusedField = GridPayWay_BunkaiNo.Field) then
        begin
            if  (Trim(FieldByName('strHojCode').AsString) <> '') and
                ((Trim(FieldByName('strApart').AsString) = '') or
                 (m_PayWayLineInfo.BunkaiKbn <> FieldByName('intApartNo').AsInteger)) then
            begin
                if (FieldByName('intApartNo').AsInteger = 1) then
                    FieldByName('ApartData'   ).AsInteger := 1
                else
                    FieldByName('ApartData'   ).AsInteger := 0;
            end;
		end;
	end;
    fnSetPayWayLineData(Sender);
end;

//**********************************************************************
//*		Proccess	:	支払条件パターンチェック
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	cMem: TdxMemData
//*		Return		:	同一データなし(True)/同一データあり(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGridPayWayCheck(cMem: TdxMemData): Boolean;
var
	Qe		    : TMQuery;
	strSQL	    : String;
    nPayNCode   : Extended;
    nPrjNCode   : Extended;
    nPjSubNCode : Extended;
    iPayPtnNo   : Integer;
begin
	Result      := True;

    nPayNCode   := cMem.FieldByName('ExNCode'	).AsFloat;  // 取引先内部ｺｰﾄﾞ
    nPrjNCode   := cMem.FieldByName('PrjNCode'	).AsFloat;  // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
    nPjSubNCode := cMem.FieldByName('PjSubNCode').AsFloat;  // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
    iPayPtnNo   := 1;                                       // 条件ﾊﾟﾀｰﾝNo

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);   // DBとMQueryの接続

        with (Qe) do
        begin
        	Close();
        	SQL.Clear();
        	strSQL := 'SELECT '
                    + ' ISNULL(PayPtnNo, 0) AS PayPtnNo '   // 支払条件ﾊﾟﾀｰﾝNo
                    + 'FROM PayPtnInfo '
                    + 'WHERE RDelKbn = 0 '
                    + ' AND PjSubNCode = ' + FloatToStr(nPjSubNCode)
                    + ' AND PrjNCode = ' + FloatToStr(nPrjNCode)
                    + ' AND BmnNCode = 0 '
                    + ' AND PayNCode = ' + FloatToStr(nPayNCode)
                    + ' AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);

        	SQL.Add(strSQL);

        	//	ｴﾗｰの判定
        	if Open = False then
        	begin
        		fnErrorMessageDsp(m_Qe);
                Result := False;
                Exit;
        	end;

            if (EOF) then
            begin
                cMem.Edit;

                // 標準情報
                if (nPrjNCode = 0) and (nPjSubNCode = 0) then
                begin
                    cMem.FieldByName('PayPtnNo').AsInteger   := iPayPtnNo;
                end
                // ﾌﾟﾛｼﾞｪｸﾄ別支払採用あり
                else if (m_iProAdoptKbn = 1) then
                begin
                    // 条件ﾊﾟﾀｰﾝNo最大値の取得
                    fnGetMaxPayPtnNo(Qe, nPayNCode, iPayPtnNo);

                    cMem.FieldByName('PayPtnNo').AsInteger   := iPayPtnNo;
                end;
            end
            else
                Result := False;  // 登録済み
        end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;

//************************************************************************
//*		Component		:	GridShousai ( TdxDBGrid )
//*							ｶﾗﾑが移動する前
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.GridShousaiBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	aBaseKin	: array[1..5] of Currency;
	aHiritu     : array[1..5] of Currency;
	aHasuuKin	: array[1..5] of Currency;
	aHasuuHou	: array[1..5] of Integer;
	aSite       : array[1..5] of Integer;
	bFlg		: Boolean;
    nCount      : Integer;
    nFigure     : Integer;
	iPriPayWay	: Integer;						//<172> Add
begin
    if (Node <> NewNode) then  Exit;

    bFlg  := True;

	// 支払方法(比率)かつｶﾗﾑが非表示の時、又は支払方法(定額)の時
	if ((Tab.Items.Selected = TAB_RATIO) and (m_bShousaiDetail = False)) or
		(Tab.Items.Selected = TAB_FIXED) then
	begin
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
//<172> Mod
//          if NewColumn in [0,1,2,3,4,5,6] then
            if NewColumn in [0,1,2,3,4,5,6,7] then
//<172> Mod
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
//<172> Mod
//          if NewColumn in [0,1,2,3,4] then
			if NewColumn in [0,1,2,3,4,5] then
//<172> Mod
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
//<172> Mod
//          if NewColumn in [0,1,2] then
			if NewColumn in [0,1,2,3] then
//<172> Mod
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;

        // 基準金額
        aBaseKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1BaseKingaku').AsCurrency;
        aBaseKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2BaseKingaku').AsCurrency;
        aBaseKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3BaseKingaku').AsCurrency;
        aBaseKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4BaseKingaku').AsCurrency;
        aBaseKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5BaseKingaku').AsCurrency;

        // 分解基準値
        aHiritu[1]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1BaseHiritu').AsCurrency;
        aHiritu[2]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2BaseHiritu').AsCurrency;
        aHiritu[3]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3BaseHiritu').AsCurrency;
        aHiritu[4]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4BaseHiritu').AsCurrency;
        aHiritu[5]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5BaseHiritu').AsCurrency;
//<172> Add
		//優先支払
		iPriPayWay := 0;
//<172> Add
    end
	// 支払方法(比率)かつｶﾗﾑが表示の時
	else if (Tab.Items.Selected = TAB_RATIO) and (m_bShousaiDetail = True) then
	begin
        // プロジェクトサブ別支払採用あり
        if (m_iProAdoptKbn = 1) and (m_iSubAdoptKbn = 1) then
        begin
//<172> Mod
//          if NewColumn in [0,1,2,3,4,5,6,11,17,23,29,35] then
			if NewColumn in [0,1,2,3,4,5,6,7,12,18,24,30,36] then
//<172> Mod
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用あり
        else if (m_iProAdoptKbn = 1) then
        begin
//<172> Mod
//          if NewColumn in [0,1,2,3,4,9,15,21,27,33] then
			if NewColumn in [0,1,2,3,4,5,10,16,22,28,34] then
//<172> Mod
            begin
               	CanChange :=  False;
            	exit;
            end;
        end
        // プロジェクト別支払採用なし
        else
        begin
//<172> Mod
//          if NewColumn in [0,1,2,7,13,19,25,31] then
			if NewColumn in [0,1,2,3,8,14,20,26,32] then
//<172> Mod
            begin
               	CanChange :=  False;
            	exit;
            end;
        end;

        // 基準金額
        aBaseKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1BaseKingaku').AsCurrency;
        aBaseKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2BaseKingaku').AsCurrency;
        aBaseKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3BaseKingaku').AsCurrency;
        aBaseKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4BaseKingaku').AsCurrency;
        aBaseKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5BaseKingaku').AsCurrency;

        // 分解基準値
        aHiritu[1]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1BaseHiritu').AsCurrency;
        aHiritu[2]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2BaseHiritu').AsCurrency;
        aHiritu[3]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3BaseHiritu').AsCurrency;
        aHiritu[4]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4BaseHiritu').AsCurrency;
        aHiritu[5]  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5BaseHiritu').AsCurrency;

        // 端数処理額
        aHasuuKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuKingaku').AsCurrency;
        aHasuuKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2HasuuKingaku').AsCurrency;
        aHasuuKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3HasuuKingaku').AsCurrency;
        aHasuuKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4HasuuKingaku').AsCurrency;
        aHasuuKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuKingaku').AsCurrency;

        // 端数処理方法
        aHasuuHou[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuHou').AsInteger;
        aHasuuHou[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2HasuuHou').AsInteger;
        aHasuuHou[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3HasuuHou').AsInteger;
        aHasuuHou[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4HasuuHou').AsInteger;
        aHasuuHou[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuHou').AsInteger;

        // サイト
        aSite[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1Site').AsInteger;
        aSite[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2Site').AsInteger;
        aSite[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3Site').AsInteger;
        aSite[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4Site').AsInteger;
        aSite[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5Site').AsInteger;
//<172> Add
		//優先支払
		iPriPayWay := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger;
//<172> Add
    end;

    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou1_BaseKingaku.Field) then
    begin
        if (aBaseKin[1] <> m_arShousaiLineInfo[1].cBaseKingaku) then
        begin
            if (aBaseKin[1] < 0) then
            begin
                bFlg := False;
            end
            else
            if (aBaseKin[1] = 0) then
            begin
                Shousai_Hou2_BaseKingaku.ReadOnly   := True;
                Shousai_Hou2_BaseHiritu.ReadOnly    := True;
                Shousai_Hou2_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou2_HasuuHou.ReadOnly      := True;
                Shousai_Hou2_Site.ReadOnly          := True;
                Shousai_Hou3_BaseKingaku.ReadOnly   := True;
                Shousai_Hou3_BaseHiritu.ReadOnly    := True;
                Shousai_Hou3_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou3_HasuuHou.ReadOnly      := True;
                Shousai_Hou3_Site.ReadOnly          := True;
                Shousai_Hou4_BaseKingaku.ReadOnly   := True;
                Shousai_Hou4_BaseHiritu.ReadOnly    := True;
                Shousai_Hou4_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou4_HasuuHou.ReadOnly      := True;
                Shousai_Hou4_Site.ReadOnly          := True;
                Shousai_Hou5_BaseKingaku.ReadOnly   := True;
                Shousai_Hou5_BaseHiritu.ReadOnly    := True;
                Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou5_HasuuHou.ReadOnly      := True;
                Shousai_Hou5_Site.ReadOnly          := True;

               	MemShousai.Edit;
                for nCount :=2 to 5 do
                begin
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku'  ).AsCurrency := 0;	// 基準金額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'   ).AsCurrency := 0;	// 分解基準値
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku' ).AsCurrency := 0;	// 端数処理額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData' ).AsInteger  := 0;	// 端数処理方法
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'Site'         ).AsInteger  := 0;	// サイト
                end;
            end
            else
            if (aBaseKin[1] > 0) then
            begin
                Shousai_Hou2_BaseKingaku.ReadOnly   := False;
                Shousai_Hou2_BaseHiritu.ReadOnly    := False;
                Shousai_Hou2_HasuuKingaku.ReadOnly  := False;
                Shousai_Hou2_HasuuHou.ReadOnly      := False;
//<172> Add
				//2:期日指定振込、3:手形以外の場合
				if	not (iPriPayWay in [2, 3]) then
					Shousai_Hou2_Site.ReadOnly      := True
				else
//<172> Add
					Shousai_Hou2_Site.ReadOnly      := False;
            end;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou2_BaseKingaku.Field) then
    begin
        if (aBaseKin[2] <> m_arShousaiLineInfo[2].cBaseKingaku) then
        begin
            if (aBaseKin[2] <> 0) and (aBaseKin[2] <= aBaseKin[1]) then
            begin
                bFlg := False;
            end
            else
            if (aBaseKin[2] = 0) then
            begin
                Shousai_Hou3_BaseKingaku.ReadOnly   := True;
                Shousai_Hou3_BaseHiritu.ReadOnly    := True;
                Shousai_Hou3_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou3_HasuuHou.ReadOnly      := True;
                Shousai_Hou3_Site.ReadOnly          := True;
                Shousai_Hou4_BaseKingaku.ReadOnly   := True;
                Shousai_Hou4_BaseHiritu.ReadOnly    := True;
                Shousai_Hou4_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou4_HasuuHou.ReadOnly      := True;
                Shousai_Hou4_Site.ReadOnly          := True;
                Shousai_Hou5_BaseKingaku.ReadOnly   := True;
                Shousai_Hou5_BaseHiritu.ReadOnly    := True;
                Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou5_HasuuHou.ReadOnly      := True;
                Shousai_Hou5_Site.ReadOnly          := True;

               	MemShousai.Edit;
                for nCount := 3 to 5 do
                begin
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku'  ).AsCurrency := 0;	// 基準金額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'   ).AsCurrency := 0;	// 分解基準値
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku' ).AsCurrency := 0;	// 端数処理額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData' ).AsInteger  := 0;	// 端数処理方法
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'Site'         ).AsInteger  := 0;	// サイト
                end;
            end
            else
            if (aBaseKin[2] > 0) then
            begin
                Shousai_Hou3_BaseKingaku.ReadOnly   := False;
                Shousai_Hou3_BaseHiritu.ReadOnly    := False;
                Shousai_Hou3_HasuuKingaku.ReadOnly  := False;
                Shousai_Hou3_HasuuHou.ReadOnly      := False;
//<172> Add
				//2:期日指定振込、3:手形以外の場合
				if	not (iPriPayWay in [2, 3]) then
					Shousai_Hou3_Site.ReadOnly      := True
				else
//<172> Add
	                Shousai_Hou3_Site.ReadOnly      := False;
            end;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou3_BaseKingaku.Field) then
    begin
        if (aBaseKin[3] <> m_arShousaiLineInfo[3].cBaseKingaku) then
        begin
            if (aBaseKin[3] <> 0) and (aBaseKin[3] <= aBaseKin[2]) then
            begin
                bFlg := False;
            end
            else
            if (aBaseKin[3] = 0) then
            begin
                Shousai_Hou4_BaseKingaku.ReadOnly   := True;
                Shousai_Hou4_BaseHiritu.ReadOnly    := True;
                Shousai_Hou4_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou4_HasuuHou.ReadOnly      := True;
                Shousai_Hou4_Site.ReadOnly          := True;
                Shousai_Hou5_BaseKingaku.ReadOnly   := True;
                Shousai_Hou5_BaseHiritu.ReadOnly    := True;
                Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou5_HasuuHou.ReadOnly      := True;
                Shousai_Hou5_Site.ReadOnly          := True;

               	MemShousai.Edit;
                for nCount := 4 to 5 do
                begin
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku'  ).AsCurrency := 0;	// 基準金額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'   ).AsCurrency := 0;	// 分解基準値
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku' ).AsCurrency := 0;	// 端数処理額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData' ).AsInteger  := 0;	// 端数処理方法
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'Site'         ).AsInteger  := 0;	// サイト
                end;
            end
            else
            if (aBaseKin[3] > 0) then
            begin
                Shousai_Hou4_BaseKingaku.ReadOnly   := False;
                Shousai_Hou4_BaseHiritu.ReadOnly    := False;
                Shousai_Hou4_HasuuKingaku.ReadOnly  := False;
                Shousai_Hou4_HasuuHou.ReadOnly      := False;
//<172> Add
				//2:期日指定振込、3:手形以外の場合
				if	not (iPriPayWay in [2, 3]) then
					Shousai_Hou4_Site.ReadOnly      := True
				else
//<172> Add
	                Shousai_Hou4_Site.ReadOnly      := False;
            end;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou4_BaseKingaku.Field) then
    begin
        if (aBaseKin[4] <> m_arShousaiLineInfo[4].cBaseKingaku) then
        begin
            if (aBaseKin[4] <> 0) and (aBaseKin[4] <= aBaseKin[3]) then
            begin
                bFlg := False;
            end
            else
            if (aBaseKin[4] = 0) then
            begin
                Shousai_Hou5_BaseKingaku.ReadOnly   := True;
                Shousai_Hou5_BaseHiritu.ReadOnly    := True;
                Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
                Shousai_Hou5_HasuuHou.ReadOnly      := True;
                Shousai_Hou5_Site.ReadOnly          := True;

               	MemShousai.Edit;
                for nCount := 5 to 5 do
                begin
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku'  ).AsCurrency := 0;	// 基準金額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'   ).AsCurrency := 0;	// 分解基準値
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku' ).AsCurrency := 0;	// 端数処理額
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData' ).AsInteger  := 0;	// 端数処理方法
                	MemShousai.FieldByName('Hou'+IntToStr(nCount)+'Site'         ).AsInteger  := 0;	// サイト
                end;
            end
            else
            if (aBaseKin[4] > 0) then
            begin
                Shousai_Hou5_BaseHiritu.ReadOnly    := False;
                Shousai_Hou5_HasuuKingaku.ReadOnly  := False;
                Shousai_Hou5_HasuuHou.ReadOnly      := False;
//<172> Add
				//2:期日指定振込、3:手形以外の場合
				if	not (iPriPayWay in [2, 3]) then
					Shousai_Hou5_Site.ReadOnly      := True
				else
//<172> Add
	                Shousai_Hou5_Site.ReadOnly      := False;
            end;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou5_BaseKingaku.Field) then
    begin
        if (aBaseKin[5] <> m_arShousaiLineInfo[5].cBaseKingaku) then
        begin
            if (aBaseKin[5] <> 0) and (aBaseKin[5] <= aBaseKin[4]) then
            begin
                bFlg := False;
            end;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou1_BaseHiritu.Field) then
    begin
        if (aHiritu[1] <> m_arShousaiLineInfo[1].cBaseHiritu) then
        begin
            // 支払方法(比率)の時
            if (100 < aHiritu[1]) and (Tab.Items.Selected = TAB_RATIO) then
            	bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou2_BaseHiritu.Field) then
    begin
        if (aHiritu[2] <> m_arShousaiLineInfo[2].cBaseHiritu) then
        begin
            // 支払方法(比率)の時
            if (100 < aHiritu[2]) and (Tab.Items.Selected = TAB_RATIO) then
            	bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou3_BaseHiritu.Field) then
    begin
        if (aHiritu[3] <> m_arShousaiLineInfo[3].cBaseHiritu) then
        begin
            // 支払方法(比率)の時
            if (100 < aHiritu[3]) and (Tab.Items.Selected = TAB_RATIO) then
            	bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou4_BaseHiritu.Field) then
    begin
        if (aHiritu[4] <> m_arShousaiLineInfo[4].cBaseHiritu) then
        begin
            // 支払方法(比率)の時
            if (100 < aHiritu[4]) and (Tab.Items.Selected = TAB_RATIO) then
            	bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou5_BaseHiritu.Field) then
    begin
        if (aHiritu[5] <> m_arShousaiLineInfo[5].cBaseHiritu) then
        begin
            // 支払方法(比率)の時
            if (100 < aHiritu[5]) and (Tab.Items.Selected = TAB_RATIO) then
            	bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou1_HasuuKingaku.Field) then
    begin
        if (aHasuuKin[1] <> m_arShousaiLineInfo[1].cHasuuKingaku) then
        begin
            nFigure := 10;
            for	nCount := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[1])))) - 1 do
            	nFigure	:= nFigure * 10;

            if	((Trunc(aHasuuKin[1]) mod nFigure) <> 0) then
                bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou2_HasuuKingaku.Field) then
    begin
        if (aHasuuKin[2] <> m_arShousaiLineInfo[2].cHasuuKingaku) then
        begin
            nFigure := 10;
            for	nCount := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[2])))) - 1 do
            	nFigure	:= nFigure * 10;

            if	((Trunc(aHasuuKin[2]) mod nFigure) <> 0) then
                bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou3_HasuuKingaku.Field) then
    begin
        if (aHasuuKin[3] <> m_arShousaiLineInfo[3].cHasuuKingaku) then
        begin
            nFigure := 10;
            for	nCount := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[3])))) - 1 do
            	nFigure	:= nFigure * 10;

            if	((Trunc(aHasuuKin[3]) mod nFigure) <> 0) then
                bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou4_HasuuKingaku.Field) then
    begin
        if (aHasuuKin[4] <> m_arShousaiLineInfo[4].cHasuuKingaku) then
        begin
            nFigure := 10;
            for	nCount := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[4])))) - 1 do
            	nFigure	:= nFigure * 10;

            if	((Trunc(aHasuuKin[4]) mod nFigure) <> 0) then
                bFlg := False;
        end;
    end
    else
    if  (TdxDBGrid(Sender).FocusedField = Shousai_Hou5_HasuuKingaku.Field) then
    begin
        if (aHasuuKin[5] <> m_arShousaiLineInfo[5].cHasuuKingaku) then
        begin
            nFigure := 10;
            for	nCount := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[5])))) - 1 do
            	nFigure	:= nFigure * 10;

            if	((Trunc(aHasuuKin[5]) mod nFigure) <> 0) then
                bFlg := False;
        end;
    end;
//<172> Add
	if (TdxDBGrid(Sender).FocusedField = Shousai_Hou1_HasuuKingaku.Field) then
	begin
		if aHasuuKin[1] > 0 then
			Shousai_Hou1_HasuuHou.ReadOnly  := False
		else
			Shousai_Hou1_HasuuHou.ReadOnly  := True;
	end
	else
	if (TdxDBGrid(Sender).FocusedField = Shousai_Hou2_HasuuKingaku.Field) then
	begin
		if aHasuuKin[2] > 0 then
			Shousai_Hou2_HasuuHou.ReadOnly  := False
		else
			Shousai_Hou2_HasuuHou.ReadOnly  := True;
	end
	else
	if (TdxDBGrid(Sender).FocusedField = Shousai_Hou3_HasuuKingaku.Field) then
	begin
		if aHasuuKin[3] > 0 then
			Shousai_Hou3_HasuuHou.ReadOnly  := False
		else
			Shousai_Hou3_HasuuHou.ReadOnly  := True;
	end
	else
	if (TdxDBGrid(Sender).FocusedField = Shousai_Hou4_HasuuKingaku.Field) then
	begin
		if aHasuuKin[4] > 0 then
			Shousai_Hou4_HasuuHou.ReadOnly  := False
		else
			Shousai_Hou4_HasuuHou.ReadOnly  := True;
	end
	else
	if (TdxDBGrid(Sender).FocusedField = Shousai_Hou5_HasuuKingaku.Field) then
	begin
		if aHasuuKin[5] > 0 then
			Shousai_Hou5_HasuuHou.ReadOnly  := False
		else
			Shousai_Hou5_HasuuHou.ReadOnly  := True;
	end;
//<172> Add

	if bFlg = False then
	begin
		CanChange := False;
		abort;
	end;

//	fnSetShousaiLineData(Sender);					//<172> Del
end;

//************************************************************************
//*		Component		:	GridShousai ( TdxDBGrid )
//*
//*		Event			:	OnChangeNodeEx
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.GridShousaiChangeNodeEx(Sender: TObject);
var
	aBaseKin	: array[1..5] of Currency;
//<172> Add
	aHasuKin	: array[1..5] of Currency;
	iPriPayWay	: Integer;
	bReadFlg	: Boolean;
//<172> Add
begin
	fnSetShousaiLineData(Sender);

    // 基準金額
    aBaseKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1BaseKingaku').AsCurrency;
    aBaseKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2BaseKingaku').AsCurrency;
    aBaseKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3BaseKingaku').AsCurrency;
    aBaseKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4BaseKingaku').AsCurrency;
    aBaseKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5BaseKingaku').AsCurrency;

//<172> Mod
	iPriPayWay	:= TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger;

	if (iPriPayWay in [2, 3]) then
		bReadFlg := False
    else
		bReadFlg := True;

	Shousai_Hou1_Site.ReadOnly				:= bReadFlg;

    // 端数金額
    aHasuKin[1] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuKingaku').AsCurrency;
    aHasuKin[2] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou2HasuuKingaku').AsCurrency;
    aHasuKin[3] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou3HasuuKingaku').AsCurrency;
    aHasuKin[4] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou4HasuuKingaku').AsCurrency;
    aHasuKin[5] := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou5HasuuKingaku').AsCurrency;
//<172> Mod
    if (aBaseKin[1] = 0) then
    begin
        Shousai_Hou2_BaseKingaku.ReadOnly   := True;
        Shousai_Hou2_BaseHiritu.ReadOnly    := True;
        Shousai_Hou2_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou2_HasuuHou.ReadOnly      := True;
        Shousai_Hou2_Site.ReadOnly          := True;
        Shousai_Hou3_BaseKingaku.ReadOnly   := True;
        Shousai_Hou3_BaseHiritu.ReadOnly    := True;
        Shousai_Hou3_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou3_HasuuHou.ReadOnly      := True;
        Shousai_Hou3_Site.ReadOnly          := True;
        Shousai_Hou4_BaseKingaku.ReadOnly   := True;
        Shousai_Hou4_BaseHiritu.ReadOnly    := True;
        Shousai_Hou4_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou4_HasuuHou.ReadOnly      := True;
        Shousai_Hou4_Site.ReadOnly          := True;
        Shousai_Hou5_BaseKingaku.ReadOnly   := True;
        Shousai_Hou5_BaseHiritu.ReadOnly    := True;
        Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou5_HasuuHou.ReadOnly      := True;
		Shousai_Hou5_Site.ReadOnly          := True;
    end
    else
    if (aBaseKin[2] = 0) then
    begin
        Shousai_Hou3_BaseKingaku.ReadOnly   := True;
        Shousai_Hou3_BaseHiritu.ReadOnly    := True;
        Shousai_Hou3_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou3_HasuuHou.ReadOnly      := True;
        Shousai_Hou3_Site.ReadOnly          := True;
        Shousai_Hou4_BaseKingaku.ReadOnly   := True;
        Shousai_Hou4_BaseHiritu.ReadOnly    := True;
        Shousai_Hou4_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou4_HasuuHou.ReadOnly      := True;
        Shousai_Hou4_Site.ReadOnly          := True;
        Shousai_Hou5_BaseKingaku.ReadOnly   := True;
        Shousai_Hou5_BaseHiritu.ReadOnly    := True;
        Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou5_HasuuHou.ReadOnly      := True;
        Shousai_Hou5_Site.ReadOnly          := True;
    end
    else
    if (aBaseKin[3] = 0) then
    begin
        Shousai_Hou4_BaseKingaku.ReadOnly   := True;
        Shousai_Hou4_BaseHiritu.ReadOnly    := True;
        Shousai_Hou4_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou4_HasuuHou.ReadOnly      := True;
        Shousai_Hou4_Site.ReadOnly          := True;
        Shousai_Hou5_BaseKingaku.ReadOnly   := True;
        Shousai_Hou5_BaseHiritu.ReadOnly    := True;
        Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou5_HasuuHou.ReadOnly      := True;
        Shousai_Hou5_Site.ReadOnly          := True;
    end
    else
    if (aBaseKin[4] = 0) then
    begin
        Shousai_Hou5_BaseKingaku.ReadOnly   := True;
        Shousai_Hou5_BaseHiritu.ReadOnly    := True;
        Shousai_Hou5_HasuuKingaku.ReadOnly  := True;
        Shousai_Hou5_HasuuHou.ReadOnly      := True;
        Shousai_Hou5_Site.ReadOnly          := True;
    end;

    if (aBaseKin[1] > 0) then
    begin
        Shousai_Hou2_BaseKingaku.ReadOnly   := False;
        Shousai_Hou2_BaseHiritu.ReadOnly    := False;
        Shousai_Hou2_HasuuKingaku.ReadOnly  := False;
        Shousai_Hou2_HasuuHou.ReadOnly      := False;
//<172> Mod
//      Shousai_Hou2_Site.ReadOnly          := False;
		Shousai_Hou2_Site.ReadOnly          := bReadFlg;
//<172> Mod
    end;

    if (aBaseKin[2] > 0) then
    begin
        Shousai_Hou3_BaseKingaku.ReadOnly   := False;
        Shousai_Hou3_BaseHiritu.ReadOnly    := False;
        Shousai_Hou3_HasuuKingaku.ReadOnly  := False;
        Shousai_Hou3_HasuuHou.ReadOnly      := False;
//<172> Mod
//      Shousai_Hou3_Site.ReadOnly          := False;
		Shousai_Hou3_Site.ReadOnly          := bReadFlg;
//<172> Mod
    end;

    if (aBaseKin[3] > 0) then
    begin
        Shousai_Hou4_BaseKingaku.ReadOnly   := False;
        Shousai_Hou4_BaseHiritu.ReadOnly    := False;
        Shousai_Hou4_HasuuKingaku.ReadOnly  := False;
        Shousai_Hou4_HasuuHou.ReadOnly      := False;
//<172> Mod
//      Shousai_Hou4_Site.ReadOnly          := False;
		Shousai_Hou4_Site.ReadOnly          := bReadFlg;
//<172> Mod
    end;

    if (aBaseKin[4] > 0) then
    begin
        Shousai_Hou5_BaseHiritu.ReadOnly    := False;
        Shousai_Hou5_HasuuKingaku.ReadOnly  := False;
        Shousai_Hou5_HasuuHou.ReadOnly      := False;
//<172> Mod
//      Shousai_Hou5_Site.ReadOnly          := False;
		Shousai_Hou5_Site.ReadOnly          := bReadFlg;
//<172> Mod
    end;

//<172> Add
    // 端数金額判定
    if aHasuKin[1] > 0 then
        Shousai_Hou1_HasuuHou.ReadOnly      := False
	else
        Shousai_Hou1_HasuuHou.ReadOnly      := True;
    if aHasuKin[2] > 0 then
        Shousai_Hou2_HasuuHou.ReadOnly      := False
	else
        Shousai_Hou2_HasuuHou.ReadOnly      := True;
    if aHasuKin[3] > 0 then
        Shousai_Hou3_HasuuHou.ReadOnly      := False
	else
        Shousai_Hou3_HasuuHou.ReadOnly      := True;
    if aHasuKin[4] > 0 then
        Shousai_Hou4_HasuuHou.ReadOnly      := False
	else
        Shousai_Hou4_HasuuHou.ReadOnly      := True;
    if aHasuKin[5] > 0 then
        Shousai_Hou5_HasuuHou.ReadOnly      := False
	else
        Shousai_Hou5_HasuuHou.ReadOnly      := True;
//<172> Add
end;

//************************************************************************
//*		Component		:	MemShousai ( TdxMemData )
//*
//*		Event			:	OnBeforePost
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.MemShousaiBeforePost(DataSet: TDataSet);
var
	iEdaban     : Integer;
	cMem		: TdxMemData;
    iRenInitRet : Integer;
    bRendoChk   : Boolean;
    ExNCode     : Extended;
    cBeforeBase : Currency;
    sNo         : String;

	aBaseKin	: array[1..5] of Currency;
	aHiritu     : array[1..5] of Currency;
	aHasuuKin	: array[1..5] of Currency;
	aHasuuHou	: array[1..5] of Integer;
	aSite       : array[1..5] of Integer;
	bFlg		: Boolean;
    nCount      : Integer;
    nFigure     : Integer;
    cField      : TField;
begin
	if (m_bChange) then
		Exit;

    cMem        := MemShousai;
    ExNCode     := cMem.FieldByName('ExNCode').AsFloat;
    cBeforeBase := 0;
    cField      := nil;
    bFlg        := True;
    bRendoChk   := False;

	// -----<159> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<159> Add-Ed-----

	with (DataSet) do
	begin
		if (State in [dsEdit]) then
		begin
            // 支払方法(比率)かつｶﾗﾑが非表示の時、又は支払方法(定額)の時
            if (Tab.Items.Selected = TAB_RATIO) or (Tab.Items.Selected = TAB_FIXED) then
            begin
                // 基準金額
                aBaseKin[1] := FieldByName('Hou1BaseKingaku').AsCurrency;
                aBaseKin[2] := FieldByName('Hou2BaseKingaku').AsCurrency;
                aBaseKin[3] := FieldByName('Hou3BaseKingaku').AsCurrency;
                aBaseKin[4] := FieldByName('Hou4BaseKingaku').AsCurrency;
                aBaseKin[5] := FieldByName('Hou5BaseKingaku').AsCurrency;
                // 分解基準値
                aHiritu[1]  := FieldByName('Hou1BaseHiritu').AsCurrency;
                aHiritu[2]  := FieldByName('Hou2BaseHiritu').AsCurrency;
                aHiritu[3]  := FieldByName('Hou3BaseHiritu').AsCurrency;
                aHiritu[4]  := FieldByName('Hou4BaseHiritu').AsCurrency;
                aHiritu[5]  := FieldByName('Hou5BaseHiritu').AsCurrency;
            end;

	        // 支払方法(比率)かつｶﾗﾑが表示の時
            if (Tab.Items.Selected = TAB_RATIO) and (m_bShousaiDetail = True) then
            begin
                // 端数処理額
                aHasuuKin[1] := FieldByName('Hou1HasuuKingaku').AsCurrency;
                aHasuuKin[2] := FieldByName('Hou2HasuuKingaku').AsCurrency;
                aHasuuKin[3] := FieldByName('Hou3HasuuKingaku').AsCurrency;
                aHasuuKin[4] := FieldByName('Hou4HasuuKingaku').AsCurrency;
                aHasuuKin[5] := FieldByName('Hou5HasuuKingaku').AsCurrency;

                // 端数処理方法
                aHasuuHou[1] := FieldByName('Hou1HasuuHou').AsInteger;
                aHasuuHou[2] := FieldByName('Hou2HasuuHou').AsInteger;
                aHasuuHou[3] := FieldByName('Hou3HasuuHou').AsInteger;
                aHasuuHou[4] := FieldByName('Hou4HasuuHou').AsInteger;
                aHasuuHou[5] := FieldByName('Hou5HasuuHou').AsInteger;

                // サイト
                aSite[1] := FieldByName('Hou1Site').AsInteger;
                aSite[2] := FieldByName('Hou2Site').AsInteger;
                aSite[3] := FieldByName('Hou3Site').AsInteger;
                aSite[4] := FieldByName('Hou4Site').AsInteger;
                aSite[5] := FieldByName('Hou5Site').AsInteger;
            end;

            if  (aBaseKin[1] <> m_arShousaiLineInfo[1].cBaseKingaku) or
                (aBaseKin[2] <> m_arShousaiLineInfo[2].cBaseKingaku) or
                (aBaseKin[3] <> m_arShousaiLineInfo[3].cBaseKingaku) or
                (aBaseKin[4] <> m_arShousaiLineInfo[4].cBaseKingaku) or
                (aBaseKin[5] <> m_arShousaiLineInfo[5].cBaseKingaku) then
            begin
                bRendoChk   := True;

                if (aBaseKin[1] = 0) then
                begin
                    for nCount :=2 to 5 do
                    begin
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku' ).AsCurrency := 0;	// 基準金額
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'  ).AsCurrency := 0;	// 分解基準値
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku').AsCurrency := 0;	// 端数処理額
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
                    	FieldByName('Hou'+IntToStr(nCount)+'Site'        ).AsInteger  := 0;	// サイト
                    end;
                end
                else
                if (aBaseKin[2] = 0) then
                begin
                    for nCount := 3 to 5 do
                    begin
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku' ).AsCurrency := 0;	// 基準金額
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'  ).AsCurrency := 0;	// 分解基準値
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku').AsCurrency := 0;	// 端数処理額
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
                    	FieldByName('Hou'+IntToStr(nCount)+'Site'        ).AsInteger  := 0;	// サイト
                    end;
                end
                else
                if (aBaseKin[3] = 0) then
                begin
                    for nCount := 4 to 5 do
                    begin
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku' ).AsCurrency := 0;	// 基準金額
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'  ).AsCurrency := 0;	// 分解基準値
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku').AsCurrency := 0;	// 端数処理額
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
                    	FieldByName('Hou'+IntToStr(nCount)+'Site'        ).AsInteger  := 0;	// サイト
                    end;
                end
                else
                if (aBaseKin[4] = 0) then
                begin
                    for nCount := 5 to 5 do
                    begin
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseKingaku' ).AsCurrency := 0;	// 基準金額
                    	FieldByName('Hou'+IntToStr(nCount)+'BaseHiritu'  ).AsCurrency := 0;	// 分解基準値
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku').AsCurrency := 0;	// 端数処理額
                    	FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
                    	FieldByName('Hou'+IntToStr(nCount)+'Site'        ).AsInteger  := 0;	// サイト
                    end;
//<172> Mov ↓↓↓
{               end
                else
                if (aBaseKin[1] < 0) then
                begin
                    cField  := Shousai_Hou1_BaseKingaku.Field;
                    bFlg    := False;
                end
                else
                if (aBaseKin[2] <> 0) and (aBaseKin[2] <= aBaseKin[1]) then
                begin
                    cField  := Shousai_Hou2_BaseKingaku.Field;
                    bFlg    := False;
                end
                else
                if (aBaseKin[3] <> 0) and (aBaseKin[3] <= aBaseKin[2]) then
                begin
                    cField  := Shousai_Hou3_BaseKingaku.Field;
                    bFlg    := False;
                end
                else
                if (aBaseKin[4] <> 0) and (aBaseKin[4] <= aBaseKin[3]) then
                begin
                    cField  := Shousai_Hou4_BaseKingaku.Field;
                    bFlg    := False;
                end
                else
                if (aBaseKin[5] <> 0) and (aBaseKin[5] <= aBaseKin[4]) then
                begin
                    cField  := Shousai_Hou5_BaseKingaku.Field;
                    bFlg := False;
}
//<172> Mov ↑↑↑
                end;
            end;

//<172> Mov ↓↓↓
            if (aBaseKin[1] < 0) then
            begin
                cField  := Shousai_Hou1_BaseKingaku.Field;
                bFlg    := False;
            end
            else
            if (aBaseKin[2] <> 0) and (aBaseKin[2] <= aBaseKin[1]) then
            begin
                cField  := Shousai_Hou2_BaseKingaku.Field;
                bFlg    := False;
            end
            else
            if (aBaseKin[3] <> 0) and (aBaseKin[3] <= aBaseKin[2]) then
            begin
                cField  := Shousai_Hou3_BaseKingaku.Field;
                bFlg    := False;
            end
            else
            if (aBaseKin[4] <> 0) and (aBaseKin[4] <= aBaseKin[3]) then
            begin
                cField  := Shousai_Hou4_BaseKingaku.Field;
                bFlg    := False;
            end
            else
            if (aBaseKin[5] <> 0) and (aBaseKin[5] <= aBaseKin[4]) then
            begin
                cField  := Shousai_Hou5_BaseKingaku.Field;
                bFlg := False;
            end;
//<172> Mov ↑↑↑

            if  (aHiritu[1] <> m_arShousaiLineInfo[1].cBaseHiritu) then
            begin
                bRendoChk   := True;
                // 支払方法(比率)の時
                if (100 < aHiritu[1]) and (Tab.Items.Selected = TAB_RATIO) then
                begin
                    cField  := Shousai_Hou1_BaseHiritu.Field;
                	bFlg    := False;
                end;
            end;

            if  (aHiritu[2] <> m_arShousaiLineInfo[2].cBaseHiritu) then
            begin
                bRendoChk   := True;
                // 支払方法(比率)の時
                if (100 < aHiritu[2]) and (Tab.Items.Selected = TAB_RATIO) then
                begin
                    cField  := Shousai_Hou2_BaseHiritu.Field;
                	bFlg    := False;
                end;
            end;

            if  (aHiritu[3] <> m_arShousaiLineInfo[3].cBaseHiritu) then
            begin
                bRendoChk   := True;
                // 支払方法(比率)の時
                if (100 < aHiritu[3]) and (Tab.Items.Selected = TAB_RATIO) then
                begin
                    cField  := Shousai_Hou3_BaseHiritu.Field;
                	bFlg    := False;
                end;
            end;

            if  (aHiritu[4] <> m_arShousaiLineInfo[4].cBaseHiritu) then
            begin
                bRendoChk   := True;
                // 支払方法(比率)の時
                if (100 < aHiritu[4]) and (Tab.Items.Selected = TAB_RATIO) then
                begin
                    cField  := Shousai_Hou4_BaseHiritu.Field;
                	bFlg    := False;
                end;
            end;

            if  (aHiritu[5] <> m_arShousaiLineInfo[5].cBaseHiritu) then
            begin
                bRendoChk   := True;
                // 支払方法(比率)の時
                if (100 < aHiritu[5]) and (Tab.Items.Selected = TAB_RATIO) then
                begin
                    cField  := Shousai_Hou5_BaseHiritu.Field;
                	bFlg    := False;
                end;
            end;
//<172> Add ↓↓↓
			//端数処理方法をクリア
			for nCount := 1 to 5 do
			begin
				if	(FieldByName('Hou'+IntToStr(nCount)+'HasuuKingaku').AsCurrency =  0) and	// 端数処理額=0かつ
					(FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData').AsInteger  <> 0) then	// 端数処理方法が0以外
				begin
					FieldByName('Hou'+IntToStr(nCount)+'HasuuHouData').AsInteger  := 0;	// 端数処理方法
                    bRendoChk   := True;
				end;
			end;
//<172> Add ↑↑↑
	        // 支払方法(比率)かつｶﾗﾑが表示の時
            if (Tab.Items.Selected = TAB_RATIO) and (m_bShousaiDetail = True) then
            begin
                if  (aHasuuKin[1] <> m_arShousaiLineInfo[1].cHasuuKingaku) then
                begin
                    bRendoChk   := True;
                    nFigure     := 10;
                    for	nCount  := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[1])))) - 1 do
                    	nFigure	:= nFigure * 10;

                    if	((Trunc(aHasuuKin[1]) mod nFigure) <> 0) then
                    begin
                        cField  := Shousai_Hou1_HasuuKingaku.Field;
                        bFlg    := False;
                    end;
                end;

                if  (aHasuuKin[2] <> m_arShousaiLineInfo[2].cHasuuKingaku) then
                begin
                    bRendoChk   := True;
                    nFigure     := 10;
                    for	nCount  := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[2])))) - 1 do
                    	nFigure	:= nFigure * 10;

                    if	((Trunc(aHasuuKin[2]) mod nFigure) <> 0) then
                    begin
                        cField  := Shousai_Hou2_HasuuKingaku.Field;
                        bFlg    := False;
                    end;
                end;

                if  (aHasuuKin[3] <> m_arShousaiLineInfo[3].cHasuuKingaku) then
                begin
                    bRendoChk   := True;
                    nFigure     := 10;
                    for	nCount  := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[3])))) - 1 do
                    	nFigure	:= nFigure * 10;

                    if	((Trunc(aHasuuKin[3]) mod nFigure) <> 0) then
                    begin
                        cField  := Shousai_Hou3_HasuuKingaku.Field;
                        bFlg    := False;
                    end;
                end;

                if  (aHasuuKin[4] <> m_arShousaiLineInfo[4].cHasuuKingaku) then
                begin
                    bRendoChk   := True;
                    nFigure     := 10;
                    for	nCount  := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[4])))) - 1 do
                    	nFigure	:= nFigure * 10;

                    if	((Trunc(aHasuuKin[4]) mod nFigure) <> 0) then
                    begin
                        cField  := Shousai_Hou4_HasuuKingaku.Field;
                        bFlg    := False;
                    end;
                end;

                if  (aHasuuKin[5] <> m_arShousaiLineInfo[5].cHasuuKingaku) then
                begin
                    bRendoChk   := True;
                    nFigure     := 10;
                    for	nCount  := 2 to StrLen (PChar(IntToStr(Trunc(aHasuuKin[5])))) - 1 do
                    	nFigure	:= nFigure * 10;

                    if	((Trunc(aHasuuKin[5]) mod nFigure) <> 0) then
                    begin
                        cField  := Shousai_Hou5_HasuuKingaku.Field;
                        bFlg    := False;
                    end;
                end;
            end;

            if  (aHasuuHou[1] <> m_arShousaiLineInfo[1].iHasuuHou) or
                (aHasuuHou[2] <> m_arShousaiLineInfo[2].iHasuuHou) or
                (aHasuuHou[3] <> m_arShousaiLineInfo[3].iHasuuHou) or
                (aHasuuHou[4] <> m_arShousaiLineInfo[4].iHasuuHou) or
                (aHasuuHou[5] <> m_arShousaiLineInfo[5].iHasuuHou) then
            begin
                bRendoChk   := True;
			end;

            if bFlg = False then
            begin
            	GridShousai.FocusedField    := cField;
            	abort;
            end;

//          fnSetShousaiLineData(GridShousai);		//<172> Mov

            iRenInitRet := -99;

            try
                if (bRendoChk = True) then
                    iRenInitRet := fnPayProgRendoInit(ExNCode);
//<172> Mod
//              if (bRendoChk = False) or
//                 (bRendoChk = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
				if (bRendoChk = True) and ((iRenInitRet = 1) or (iRenInitRet = 0)) then
//<172> Mod
                begin
    			    m_cDataModule.BeginTran (m_cDBSelect);

                    for iEdaban := 11 to 15 do
                    begin
                        // (n - 1)の基準金額が0でない場合更新
                        if (iEdaban = 11) or (cBeforeBase <> 0) then
                        begin
                    	    if fnUpDateShousai(iEdaban, DataSet) = False then
                            begin
                            	m_cDataModule.Rollback (m_cDBSelect);   // ﾛｰﾙﾊﾞｯｸ(破棄)
                            	abort;
                            end;
                        end;
                    	sNo := IntToStr(iEdaban - 10);
                    	cBeforeBase := cMem.FieldByName('Hou'+sNo+'BaseKingaku').AsCurrency;
                    end;
                    m_cDataModule.Commit (m_cDBSelect);                 // ｺﾐｯﾄ(反映)
					fnSetShousaiLineData(GridShousai);					//<172> Mov
                end
                else if (bRendoChk = True) and ((iRenInitRet = 10) or (iRenInitRet = -1)) then
                begin
                    abort;
                end;

            finally
                fnPayProgRendoExec(iRenInitRet, ExNCode);
            end;
		end;
	end;

	// -----<159> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<159> Add-Ed-----
end;

//**********************************************************************
//*		Proccess	:	支払条件明細ﾏｽﾀ更新処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/22
//*		Parameter	:	HC	:	補助ｺｰﾄﾞ
//*						NO	:	条件明細NO
//*						Sel	:	処理対象	比率：DISPOSE_RATIO
//*											定額：DISPOSE_FIXED
//*						Mem	:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDateShousai(Edaban: Integer; DataSet: TDataSet): Boolean;
var
	sNo	        : String;
    strSQL      : String;
	cBaseKin    : Currency;
	cHiritu     : Currency;
	cHasuuKin   : Currency;
    iHasuuHou   : Integer;
    iSite       : Integer;
    ExNCode     : Extended;
    iPayPtnNo   : Integer;
    nAccNCode   : Extended;
    sUketoriName: String;
    iYusouKbn   : Integer;
    iYusouFutan : Integer;
    iBunkatuMax : Integer;
//<172> Add ↓↓↓
	iPryPayWay		: Integer;		// 優先支払方法
	dBkBraNCode		: Double;		// 支店内部ｺｰﾄﾞ
	sTransKanaName	: String;		// ｶﾅ振込先名
	iAcckbn			: Integer;		// 預金種目
	sAccNo			: String;		// 口座番号
	iChargeFutan	: Integer;		// 手数料負担
	iChargeKbn		: Integer;		// 手数料計算区分
	iTransKbn		: Integer;		// 振込方法
	iFBSet			: Integer;		// FBセット項目
	sEdiInfo		: String;		// EDI情報
	sAiteNo1		: String;		// 顧客ｺｰﾄﾞ1
	sAiteNo2		: String;		// 顧客ｺｰﾄﾞ2
	iAccAutoKbn		: Integer;		// 口座自動引落区分
	iAccAutoData	: Integer;		// 自動引落支払ﾃﾞｰﾀ
//<172> Add ↑↑↑
begin
	Result   := True;

	sNo := IntToStr(Edaban - 10);

    with (DataSet) do
    begin
        cBaseKin    := FieldByName('Hou'+sNo+'BaseKingaku' ).AsCurrency;
        cHiritu     := FieldByName('Hou'+sNo+'BaseHiritu'  ).AsCurrency;
        cHasuuKin   := FieldByName('Hou'+sNo+'HasuuKingaku').AsCurrency;
        iHasuuHou   := FieldByName('Hou'+sNo+'HasuuHouData').AsInteger;
        iSite       := FieldByName('Hou'+sNo+'Site'        ).AsInteger;
        ExNCode     := FieldByName('ExNCode'   ).AsFloat;
        iPayPtnNo   := FieldByName('PayPtnNo'  ).AsInteger;
        nAccNCode   := FieldByName('AccNCode'       ).AsFloat;
        sUketoriName:= FieldByName('UketoriName'    ).AsString;
        iYusouKbn   := FieldByName('TegYusouKbn'    ).AsInteger;
        iYusouFutan := FieldByName('TegYusouFutan'  ).AsInteger;
        iBunkatuMax := FieldByName('TegBunkatuMax'  ).AsInteger;
//<172> Add ↓↓↓
		iPryPayWay		:= FieldByName('PriPayWay'      ).AsInteger;	// 優先支払方法
		dBkBraNCode		:= FieldByName('BkBraNCode'     ).AsFloat;		// 支店内部ｺｰﾄﾞ
		sTransKanaName	:= FieldByName('TransKanaName'  ).AsString;		// ｶﾅ振込先名
		iAcckbn			:= FieldByName('Acckbn'         ).AsInteger;	// 預金種目
		sAccNo			:= FieldByName('AccNo'          ).AsString;		// 口座番号
		iChargeFutan	:= FieldByName('ChargeFutan'    ).AsInteger;	// 手数料負担
		iChargeKbn		:= FieldByName('ChargeKbn'      ).AsInteger;	// 手数料計算区分
		iTransKbn		:= FieldByName('TransKbn'       ).AsInteger;	// 振込方法
		iFBSet			:= FieldByName('FBSet'          ).AsInteger;	// FBセット項目
		sEdiInfo		:= FieldByName('EdiInfo'        ).AsString;		// EDI情報
		sAiteNo1		:= FieldByName('AiteNo1'        ).AsString;		// 顧客ｺｰﾄﾞ1
		sAiteNo2		:= FieldByName('AiteNo2'        ).AsString;		// 顧客ｺｰﾄﾞ2
		iAccAutoKbn		:= FieldByName('AccAutoKbn'     ).AsInteger;	// 口座自動引落区分
		iAccAutoData	:= FieldByName('AccAutoData'    ).AsInteger;	// 自動引落支払ﾃﾞｰﾀ
//<172> Add ↑↑↑
    end;

	with (m_Qe) do
	begin
		if Edaban = 11 then
            fnDeleteShousai(ExNCode, iPayPtnNo);

        // 新規
        Close();
        SQL.Clear();

        strSQL := 'INSERT INTO PayDetailInfo ('
                + 'MasterKbn'
                + ',PayNCode'
                + ',ShiharaiSyubetu'
                + ',Edaban'
                + ',AccNCode'
                + ',BkBraNCode'
                + ',AccKbn'
                + ',AccNo'
                + ',AnserNo'
                + ',UketoriName'
                + ',TransKanaName'
                + ',ChargeKbn'
                + ',ChargeFutan'
                + ',Transkbn'
                + ',EdiInfo'
                + ',AiteNo1'
                + ',AiteNo2'
                + ',FBSet'
                + ',Site'
                + ',TegYusouKbn'
                + ',TegYusouFutan'
                + ',TegBunkatuMax'
                + ',Houhou'
                + ',BaseKingaku'
                + ',BaseHiritu'
                + ',HasuuKingaku'
                + ',HasuuHou'
                + ',RDelKbn'
                + ',UpdDateTM'
                + ',InsDateTM'
                + ',UpdTantoNCode'
                + ',AccAutoKbn'
                + ',AccAutoData'
                + ',PayPtnNo'
                + ')VALUES('
                +       IntToStr(MASTER_CUSTOMER)
                + ',' + FloatToStr(ExNCode)
//<172> Mod ↓↓↓
{               + ',3'
                + ',' + IntToStr(Edaban)
                + ',' + FloatToStr(nAccNCode)
                + ',0,0'
                + ',' + AnsiQuotedStr('', '''')
                + ',' + AnsiQuotedStr('', '''')
                + ',' + AnsiQuotedStr(sUketoriName, '''')
                + ',' + AnsiQuotedStr('', '''')
                + ',0,0,0'
                + ',' + AnsiQuotedStr('', '''')
                + ',' + AnsiQuotedStr('', '''')
                + ',' + AnsiQuotedStr('', '''')
                + ',0'
}
				+ ',' + IntToStr(iPryPayWay)
                + ',' + IntToStr(Edaban)
                + ',' + FloatToStr(nAccNCode)
                + ',' + FloatToStr(dBkBraNCode)
                + ',' + IntToStr(iAcckbn)
                + ',' + AnsiQuotedStr(sAccNo, '''')
                + ',' + AnsiQuotedStr('', '''')
                + ',' + AnsiQuotedStr(sUketoriName, '''')
                + ',' + AnsiQuotedStr(sTransKanaName, '''')
                + ',' + IntToStr(iChargeFutan)
                + ',' + IntToStr(iChargeKbn)
                + ',' + IntToStr(iTransKbn)
                + ',' + AnsiQuotedStr(sEdiInfo, '''')
                + ',' + AnsiQuotedStr(sAiteNo1, '''')
                + ',' + AnsiQuotedStr(sAiteNo2, '''')
                + ',' + IntToStr(iFBSet)
//<172> Mod ↑↑↑
                + ',' + IntToStr(iSite)
                + ',' + IntToStr(iYusouKbn)
                + ',' + IntToStr(iYusouFutan)
                + ',' + IntToStr(iBunkatuMax)
                + ',0'
                + ',' + FloatToStr(cBaseKin)
                + ',' + FloatToStr(cHiritu)
                + ',' + FloatToStr(cHasuuKin)
                + ',' + IntToStr(iHasuuHou)
                + ',0,Now(),Now()'
                + ',' + FloatToStr(m_nTantoCd)
//<172> Mod ↓↓↓
//              + ',0,0'
                + ',' + IntToStr(iAccAutoKbn)
                + ',' + IntToStr(iAccAutoData)
//<172> Mod ↑↑↑

                + ',' + IntToStr(iPayPtnNo)
                + ')';

        SQL.Add(strSQL);

        if (not ExecSQL()) then
        begin
        	fnErrorMessageDsp(m_Qe);
        	Result := FALSE;
        	Exit;
        end;
	end;
end;

//************************************************************************
//*		Component		:	GridKihon ( TdxDBGrid )
//*							ｶﾗﾑが移動する前
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.GridKihonBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	bFlg		: Boolean;
    iSateiKbn   : Integer;
    iBunkaiPtn  : Integer;
    iSateiCalc  : Integer;  // <155> 2007/12/25 H.Kawato Add
begin
// <155> 2007/12/25 H.Kawato Add Start
    if  (TdxDBGrid(Sender).FocusedField = GridKihon_H_SateiCalcValue.Field) then
    begin
       	// 比率が100％を超える場合エラー
       	if (100 < TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SateiCalcHiritu').AsCurrency) then
        begin
    		CanChange := False;
    		abort;
        end;
    end;

    iSateiCalc  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiCalc' ).AsInteger;
    fnChangeSateiCalc(iSateiCalc);

    if (m_DLKihonFlg) then
    begin
        if  (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiCalc').AsInteger = 1) then
        begin
            MemKihon.Edit;
            MemKihon.FieldByName('SateiCalcTeigaku').AsCurrency := 0;
//            MemKihon.FieldByName('SateiCalcTeigaku').Clear;
        end
        else if  (TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiCalc').AsInteger = 2) then
        begin
            MemKihon.Edit;
            MemKihon.FieldByName('SateiCalcHiritu').AsCurrency  := 0;
//            MemKihon.FieldByName('SateiCalcHiritu').AsCurrency  := 0;
        end
        else
        begin
            MemKihon.Edit;
            MemKihon.FieldByName('SateiCalcHiritu').AsCurrency  := 0;
            MemKihon.FieldByName('SateiCalcTeigaku').AsCurrency := 0;
//            MemKihon.FieldByName('SateiCalcHiritu').Clear;
//            MemKihon.FieldByName('SateiCalcTeigaku').Clear;
        end;
    end;
// <155> 2007/12/25 H.Kawato Add End

    // プロジェクト別支払を採用していない場合は処理を抜ける
    if (m_iProAdoptKbn = 0) then  Exit;

    bFlg  := True;

    iSateiKbn   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intSateiNo').AsInteger;
    iBunkaiPtn  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('BunkaiPtn' ).AsInteger;

    if  (TdxDBGrid(Sender).FocusedField = GridKihon_SateiNo.Field) or           // 査定方法
        (TdxDBGrid(Sender).FocusedField = GridKihon_BunkaiPtn.Field) then       // 分解パターン
    begin
        // 査定方法「1:全体」「2:部門別」「3:科目別」
        // 分解パターン「1:ﾌﾟﾛｼﾞｪｸﾄ別」「2:ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別」
        if  ((iSateiKbn = 1) or (iSateiKbn = 2) or (iSateiKbn = 3)) and
            ((iBunkaiPtn = 1) or (iBunkaiPtn = 2)) then
            bFlg := False;
    end;

	if bFlg = False then
	begin
		CanChange := False;
		abort;
	end;
end;

//**********************************************************************
//*		Proccess	:	PayPtnNo最大値取得関数
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	cMem: TdxMemData
//*		Return		:	PayPtnNo + 1
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetMaxPayPtnNo(Qe: TMQuery; nPayNCode: Extended; var nPayPtnNo: Integer): Boolean;
var
	strSQL  : String;
begin
    Result  := True;

    with (Qe) do
    begin
        Close ();
        SQL.Clear ();

        // 条件ﾊﾟﾀｰﾝNo最大値の取得
        strSQL := 'SELECT ISNULL(MAX(PayPtnNo), 1) AS MaxNo FROM PayPtnInfo '
                + ' WHERE PayNCode   = ' + FloatToStr(nPayNCode)
                + '   AND MasterKbn  = ' + IntToStr(MASTER_CUSTOMER);

        SQL.Add   (strSQL);

        if (not Open ()) then
        begin
            fnErrorMessageDsp(m_Qe);
            Result := FALSE;
            Exit;
        end;

        if (not EOF) then
            nPayPtnNo := FieldByName ('MaxNo').AsInteger + 1;
    end;
end;

//**********************************************************************
//*		Proccess	:   支払方法１の切り替え
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	Sender: TObject
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetHouhou1(Sender: TObject);
var
    iPriPayWay  : Integer;
begin
    if  (TdxDBGrid(Sender).FocusedField = Hou_T_PriPayWay.Field) or
        (TdxDBGrid(Sender).FocusedField = Hou_H_PriPayWay.Field) then
    begin
        // 優先支払方法
        iPriPayWay  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('PriPayWay').AsInteger;

        if (iPriPayWay <> m_iBeforePriPayWay) then
        begin
            m_iBeforePriPayWay  := iPriPayWay;

//<172> Mod
//          if (m_iProAdoptKbn = 1) and (iPriPayWay = 1) then
//          begin
//              TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1Data').AsCurrency     := 3;       // 手形支払
			m_bPriPayWayChgFlg	:= True;
			if (iPriPayWay <> 0) and (TdxDBGrid(Sender).DataSource.DataSet.State in [dsEdit, dsInsert]) then
			begin
				TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1Data').AsCurrency     := iPriPayWay;	// 優先支払
//<172> Mod
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1StdRitsu').AsCurrency := 0;	    // 分解基準値
                // 支払方法(比率)
                if TdxDBGrid(Sender).Name = GridPayRatio.Name then
                begin
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1MinKin'  ).AsCurrency := 0;	// 支払最低額
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuKin').AsCurrency := 0;	// 端数処理額
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('Hou1HasuuHou').AsInteger  := 0;	// 端数処理方法
                end;
                fnCmnGridCheckPay();
            end;
        end;
        // Enabledの切り替え
        fnSetHouhou1Enabled(Sender, iPriPayWay);
    end;
end;

//**********************************************************************
//*		Proccess	:   支払方法１のEnabled切り替え
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/02/20  <142>
//*		Parameter	:	Sender    : TObject
//*                     iPriPayWay: Integer 優先支払
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnSetHouhou1Enabled(Sender: TObject; iPriPayWay: Integer);
begin
//<172> Mod
//  if (m_iProAdoptKbn = 1) and (iPriPayWay = 1) then
    if (iPriPayWay <> 0) then
//<172> Mod
    begin
        // 支払方法(比率)
        if TdxDBGrid(Sender).Name = GridPayRatio.Name then
        begin
            Hou_H_Houhou1_No.ReadOnly       := True;
            Hou_H_Houhou1_StdRitu.ReadOnly  := True;
            Hou_H_Houhou1_Minkin.ReadOnly   := True;
            Hou_H_Houhou1_HasuuKin.ReadOnly := True;
            Hou_H_Houhou1_HasuuHou.ReadOnly := True;
            Hou_H_Houhou1_No.TabStop        := False;
            Hou_H_Houhou1_StdRitu.TabStop   := False;
            Hou_H_Houhou1_Minkin.TabStop    := False;
            Hou_H_Houhou1_HasuuKin.TabStop  := False;
            Hou_H_Houhou1_HasuuHou.TabStop  := False;
        end
        else
        // 支払方法(定額)
        if TdxDBGrid(Sender).Name = GridPayFixed.Name then
        begin
            Hou_T_Houhou1_No.ReadOnly       := True;
            Hou_T_Houhou1_StdRitu.ReadOnly  := True;
            Hou_T_Houhou1_No.TabStop        := False;
            Hou_T_Houhou1_StdRitu.TabStop   := False;
        end;
    end
    else
    begin
        // 支払方法(比率)
        if TdxDBGrid(Sender).Name = GridPayRatio.Name then
        begin
            Hou_H_Houhou1_No.ReadOnly       := False;
            Hou_H_Houhou1_StdRitu.ReadOnly  := False;
            Hou_H_Houhou1_Minkin.ReadOnly   := False;
            Hou_H_Houhou1_HasuuKin.ReadOnly := False;
            Hou_H_Houhou1_HasuuHou.ReadOnly := False;
            Hou_H_Houhou1_No.TabStop        := True;
            Hou_H_Houhou1_StdRitu.TabStop   := True;
            Hou_H_Houhou1_Minkin.TabStop    := True;
            Hou_H_Houhou1_HasuuKin.TabStop  := True;
            Hou_H_Houhou1_HasuuHou.TabStop  := True;
        end
        else
        // 支払方法(定額)
        if TdxDBGrid(Sender).Name = GridPayFixed.Name then
        begin
            Hou_T_Houhou1_No.ReadOnly       := False;
            Hou_T_Houhou1_StdRitu.ReadOnly  := False;
            Hou_T_Houhou1_No.TabStop        := True;
            Hou_T_Houhou1_StdRitu.TabStop   := True;
        end;
    end;
end;

//************************************************************************
//*		Component		:	GridPayRatio ( TdxDBGrid )
//*							支払方法(比率・定額)/優先支払詳細
//*		Event			:	OnKeyPress
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.GridPayWayKeyPress(Sender: TObject;
  var Key: Char);
begin
// <158> 2008/01/22 H.Kawato Mod Start
//    if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
    if  ((Key < '0') or (Key > '9')) and
        (Key <> #8) and (Key <> #27) and (Key <> #9) and    // #8=BackSpace   #27=Esc  #9=Tab
        (((TdxDBGrid (Sender).FocusedField <> Shousai_Hou1_BaseHiritu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Shousai_Hou2_BaseHiritu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Shousai_Hou3_BaseHiritu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Shousai_Hou4_BaseHiritu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Shousai_Hou5_BaseHiritu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Hou_H_Houhou1_StdRitu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Hou_H_Houhou2_StdRitu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Hou_H_Houhou3_StdRitu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Hou_H_Houhou4_StdRitu.Field) and
          (TdxDBGrid (Sender).FocusedField <> Hou_H_Houhou5_StdRitu.Field)) and
         (Key = '.')) then
// <158> 2008/01/22 H.Kawato ModEnd
    begin
    	Beep ();
    	Abort;
    end;
// <172> Add ↓↓↓
	if (Key = '-') then
    begin
    	Beep ();
    	Abort;
    end;

	//期日指定振込、手形以外
	if  not (MemShousai.FieldByName('PriPayWay').AsInteger in [2, 3]) and
		((TdxDBGrid (Sender).FocusedField = Shousai_Hou1_Site.Field) or
		 (TdxDBGrid (Sender).FocusedField = Shousai_Hou2_Site.Field) or
		 (TdxDBGrid (Sender).FocusedField = Shousai_Hou3_Site.Field) or
		 (TdxDBGrid (Sender).FocusedField = Shousai_Hou4_Site.Field) or
		 (TdxDBGrid (Sender).FocusedField = Shousai_Hou5_Site.Field)) then
    begin
   		Beep ();
   		Abort;
	end;
// <172> Add ↑↑↑
end;

//************************************************************************
//*		Component		:	GridDraft ( TdxDBGrid )
//*							手形支払
//*		Event			:	OnKeyPress
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.GridDraftKeyPress(Sender: TObject; var Key: Char);
begin
    if  (TdxDBGrid(Sender).FocusedField = Teg_IraiAccCode.Field) or
        (TdxDBGrid(Sender).FocusedField = Teg_Site.Field) or
        (TdxDBGrid(Sender).FocusedField = Teg_BunkatuMax.Field) then
    begin
    	if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
    	begin                          // #8=BackSpace   #27=Esc  #9=Tab
    		Beep ();
    		Abort;
    	end;
    end;
end;

//************************************************************************
//*		Component		:	GridCheck ( TdxDBGrid )
//*							小切手支払
//*		Event			:	OnKeyPress
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/02/20  <142>
//************************************************************************
procedure TJNTCRP004007f.GridCheckKeyPress(Sender: TObject; var Key: Char);
begin
    if  (TdxDBGrid(Sender).FocusedField = Kog_IraiAccCode.Field) then
    begin
    	if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
    	begin                          // #8=BackSpace   #27=Esc  #9=Tab
    		Beep ();
    		Abort;
    	end;
    end;
end;

//**********************************************************************
//*		Proccess	:   基本情報 比率／定額の使用可不可
//*		Name		:	H.Kawato(MSI)
//*		Date		:	2007/12/25  <155>
//*		Parameter	:	iSateiCalc: Integer (査定金額計算区分)
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeSateiCalc(iSateiCalc: Integer);
begin
    if m_DLKihonFlg = False then Exit;

    case iSateiCalc of      // 0:なし, 1:比率, 2:定額
        1:
        begin
            GridKihon_H_SateiCalcValue.ReadOnly         := False;
            GridKihon_T_SateiCalcValue.ReadOnly         := True;
            GridKihon_H_SateiCalcValue.TabStop          := True;
            GridKihon_T_SateiCalcValue.TabStop          := False;
            GridKihon_H_SateiCalcValue.DisableEditor    := False;
            GridKihon_T_SateiCalcValue.DisableEditor    := True;
        end;
        2:
        begin
            GridKihon_H_SateiCalcValue.ReadOnly         := True;
            GridKihon_T_SateiCalcValue.ReadOnly         := False;
            GridKihon_H_SateiCalcValue.TabStop          := False;
            GridKihon_T_SateiCalcValue.TabStop          := True;
            GridKihon_H_SateiCalcValue.DisableEditor    := True;
            GridKihon_T_SateiCalcValue.DisableEditor    := False;
        end;
        else
        begin
            GridKihon_H_SateiCalcValue.ReadOnly         := True;
            GridKihon_T_SateiCalcValue.ReadOnly         := True;
            GridKihon_H_SateiCalcValue.TabStop          := False;
            GridKihon_T_SateiCalcValue.TabStop          := False;
            GridKihon_H_SateiCalcValue.DisableEditor    := True;
            GridKihon_T_SateiCalcValue.DisableEditor    := True;
        end;
    end;
end;
//<GA001>ST
//**********************************************************************
//*		Proccess	:   基本情報 標準方法の使用可不可
//*		Name		:	T.Kobayashi
//*		Date		:	2007/12/25  <155>
//*		Parameter	:	iSateiCalc: Integer (査定金額計算区分)
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnChangeGai(iGaiNo: Integer);
begin
    if m_DLKihonGFlg = False then Exit;

    case iGaiNo of      // 0:なし, 1:比率, 2:定額
        1,2 :
        begin
            GridKihonG_GaiPay.ReadOnly         := False;
            GridKihonG_GaiPay.TabStop          := True;
            GridKihonG_GaiPay.DisableEditor    := False;
        end
        else
        begin
            GridKihonG_GaiPay.ReadOnly         := True;
            GridKihonG_GaiPay.TabStop          := False;
            GridKihonG_GaiPay.DisableEditor    := True;
        end;
    end;
end;
//<GA001>ED
//************************************************************************
//*		Component		:	GridKihon ( TdxDBGrid )
//*							基本情報
//*		Event			:	OnCustomDrawCell
//*		Name			:	H.Kawato(MSI)
//*		Date		    :	2007/12/25  <155>
//************************************************************************
procedure TJNTCRP004007f.GridKihonCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
    nCol1   : Integer;
begin

	if (Sender = GridKihon) then
	begin
        nCol1 := GridKihon.ColumnByFieldName('intSateiCalc').Index;

        if (AColumn.Name = 'GridKihon_H_SateiCalcValue') then
        begin
            if (ANode.Values[nCol1] <> 1) then
    			AText	:= '';
        end
        else if (AColumn.Name = 'GridKihon_T_SateiCalcValue') then
        begin
            if (ANode.Values[nCol1] <> 2) then
    			AText	:= '';
        end;
	end;

end;

//**********************************************************************
//	Proccess	:	ｾｯｼｮﾝ管理ｽﾄｱﾄﾞの実行	<159>
//	Name		:	T.Seki
//	Date		:	2008/02/06
//	Parameter	:	iSyori  0=設定 1=開放
//	Return		:	なし
//	History		:	9999/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**********************************************************************
procedure TJNTCRP004007f.SessionPractice(iSyori: Integer);
begin
												// 処理区分
	SPMsHist.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
	SPMsHist.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
	SPMsHist.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
												// 担当者名称
	SPMsHist.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
	SPMsHist.ParamByName('@pSysCode').AsInteger			:= m_pRec^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
	SPMsHist.ParamByName('@pOptCode').AsInteger			:= m_pRec^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
	SPMsHist.ParamByName('@pPrgCode').AsInteger			:= m_pRec^.m_iProgramCode;

	SPMsHist.Prepare;							// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
	SPMsHist.ExecProc;							// ｽﾄｱﾄﾞ実行
	SPMsHist.UnPrepare;							// ﾘｿｰｽを解放する

												// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
												// 処理区分
		SPMsHistParent.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
		SPMsHistParent.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
												// 担当者名称
		SPMsHistParent.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pSysCode').AsInteger		:= m_pRec^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pOptCode').AsInteger		:= m_pRec^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pPrgCode').AsInteger		:= m_pRec^.m_iProgramCode;

		SPMsHistParent.Prepare;					// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
		SPMsHistParent.ExecProc;				// ｽﾄｱﾄﾞ実行
		SPMsHistParent.UnPrepare;				// ﾘｿｰｽを解放する
	end;
end;

// <168> ADD-STR
//-----------------------------------------------------------------------------
// fnCheckIsSpot()
//      PARAM   : CD    名寄せ外部ｺｰﾄﾞ
//      VAR     :
//      RETURN  : T : 存在する F: 存在しない
//      MEMO    : 名寄せ更新前処理
//-----------------------------------------------------------------------------
function TJNTCRP004007f.fnCheckIsSpot(sPayCD: String): Boolean;
var
    DmqData :   TMQuery;
    strSQL  :   String;
begin
	Result := FALSE;

	if ( m_nCurCodeAttribute <= 1 ) then
		sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);

// <173> ADD-STR
    if (m_sSpotPayCD = sPayCD) then
    begin
        Result := True;
		Exit;
    end;
// <173> ADD-END

    // スポット支払支払先として設定された支払先は名寄せ選択不可
    strSQL  := 'SELECT MT.NCode '
             + '  FROM PayBaseInfo PBI '
             + '  LEFT OUTER JOIN PayBaseInfo PBI2 '
             + '    ON PBI.SystemCode = PBI2.SystemCode '
             + '   AND PBI.ItemID + 1 = PBI2.ItemID '
             + '  LEFT OUTER JOIN MTOKUI MT '
             + '    ON MT.NCode = PBI2.DataNum '
             + '   AND MT.RDelKbn = 0 '
             + ' WHERE PBI.SystemCode = 1 '
             + '   AND PBI.ItemID = 4031 '
             + '   AND PBI.DataNum = 1 '
             + '   AND MT.GCode = ' + AnsiQuotedStr(sPayCD, '''') + ' ';

    // MQueryの構築
    DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

    try
    	with ( DmqData ) do
    	begin
    		Close();
    		SQL.Clear();
    		SQL.Add(strSQL);

    		if ( not Open () ) then
    		begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                //m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (DmqData);

                DmqData.Close();
                DmqData.Free();

    			Result := FALSE;
    			Exit;
    		end;

    		if ( EOF <> True ) then
    		begin
                m_sSpotPayCD := sPayCD;     // スポット支払支払先コード <173> ADD
    			Result := True;
    		end;
    	end;
    finally
        DmqData.Close();    // <173> ADD
        DmqData.Free();
    end;
end;
// <168> ADD-END

// <172> Add ↓↓↓
procedure TJNTCRP004007f.GridShousaiCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
	iCol	: Integer;
begin
	//期日指定振込、手形以外
	if	((AColumn.Name = 'Shousai_Hou1_Site') or
		 (AColumn.Name = 'Shousai_Hou2_Site') or
		 (AColumn.Name = 'Shousai_Hou3_Site') or
		 (AColumn.Name = 'Shousai_Hou4_Site') or
		 (AColumn.Name = 'Shousai_Hou5_Site')) then
	begin
        iCol := GridShousai.ColumnByFieldName('PriPayWay').Index;
		//期日指定振込、手形以外
		if	not ((ANode.Values[iCol] = 2)  or
				 (ANode.Values[iCol] = 3)) then
			AText	:= '';
	end;
end;
// <172> Add ↑↑↑

// <182>
//*****************************************************************************
//	Process			:	銀行情報登録
//	Name			:   G.Kojima
//	Date			:	2010/07/27
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure TJNTCRP004007f.BankInfoDlg();

var
    fBank		: TJNTCRP004007BankF;
    BankData	: TBankData;
	cMem		: TdxMemData;   // <BDIC> ADD
    // <208> ADD-STR
    exBank      : Extended;
    sName, sKana: String;
    exBra       : Extended;
    // <208> ADD-END
begin
    BankData.sBankCode := '' ;
    if (Tab.Items.Selected = DISPOSE_TRANSFER) then         // 振込情報タブ
        BankData.sBankCode := Trim(Gridfurikomi.DataSource.DataSet.FieldByName('BankCode').AsString) ;

    if (Tab.Items.Selected = DISPOSE_DATETRAN) then         // 期日指定振込情報タブ
        BankData.sBankCode := Trim(GridFuriDate.DataSource.DataSet.FieldByName('BankCode').AsString) ;

// <BDIC> MOD-STR
//  fBank:=TJNTCRP004007BankF.CreateForm(Self,m_pRec);
    fBank:=TJNTCRP004007BankF.CreateForm(Self,m_pRec,m_Base_pRec,m_cJNTArea);
// <BDIC> MOD-END
    try
        fBank.fnShowInpBank(BankData,True);

// <BDIC> ADD-STR
        if (BankData.sBankCode <> '') then
        begin
            if (Tab.Items.Selected = DISPOSE_TRANSFER) then         // 振込情報タブ
                cMem := MemFuri
            else
            if (Tab.Items.Selected = DISPOSE_DATETRAN) then         // 期日指定振込情報タブ
                cMem := MemFuriDate
            else
                Exit;

    		cMem.Edit;
    		cMem.FieldByName('BankCode' ).AsInteger  := StrToInt(BankData.sBankCode);
    		cMem.FieldByName('BankName' ).AsString   := BankData.sBankName;
        	cMem.FieldByName('BankKanaName').AsString:= BankData.sBankKana;

// <SCA> ADD-STR
            if (BankData.sBranchCode = '') then
                cMem.FieldByName('BkBraCode' ).AsString := ''
            else
// <SCA> ADD-END
        		cMem.FieldByName('BkBraCode' ).AsInteger := StrToInt(BankData.sBranchCode);
    		cMem.FieldByName('BkBraName' ).AsString  := BankData.sBranchName;
        	cMem.FieldByName('BraKanaName').AsString := BankData.sBranchKana;
// <208> ADD-STR
            //構造体データ取得
            if (Tab.Items.Selected = DISPOSE_TRANSFER) then         // 振込情報タブ
                fnSetFuriLineData(GridFurikomi)
            else
            if (Tab.Items.Selected = DISPOSE_DATETRAN) then         // 期日指定振込情報タブ
                fnSetFuriLineData(GridFuriDate);

            // 銀行内部コード取得
            if fnGetBankCodeInfoFX(cMem.FieldByName('BankCode' ).AsInteger,exBank,sName,sKana) then
            begin
                cMem.FieldByName('BankNCode'  ).AsFloat   := exBank;
            end;
            // 支店内部コード取得
            exBra := cMem.FieldByName('BranchNCode').AsFloat;
            if fnGetBranchCodeInfoFX(cMem.FieldByName('BankNCode').AsFloat,
                                     cMem.FieldByName('BkBraCode').AsInteger,
                                     exBra,sName,sKana) then
            begin
                cMem.FieldByName('BranchNCode'  ).AsFloat   := exBra;
            end;
// <208> ADD-END
        end;
// <BDIC> ADD-END
    finally
        fBank.Free;
    end;
end;

// <181> ADD-STR
procedure TJNTCRP004007f.fnLaunchSwkAddDlg();
var
	cSender 	: TControl;
    cSwkAddDlg      : TMASPCBSwkAddDlgf;        // 付加情報入力ダイアログ
    rSwkAddDlgParam : TMASPCBSwkAddDlgParam;    // ダイアログパラメータ
    iLoop       : Integer;
	Dmq			: TMQuery;
    iSaiyo      : Integer;
    iCodeAttr   : Integer;
    iCodeDigit  : Integer;
    sCode       : String;
    sTargetEdit : String;
    sDispGCode  : String;
    iPartKbn    : Integer;

	function fnGetNCodeFromEdit(iMasterKbn: Integer = 0): Currency;
	begin
        if (m_arCodeAttribute[iSaiyo].nAttribute <= 1) then
		begin
	        sCode := TMNumEdit(MJSFindCtrl(Self, Format('Edit%.2dHojCodeNum' , [iSaiyo + 3]))).Text;

            if (sCode <> '') then
  				sCode	:= Format('%.16d',[StrToInt64(sCode)])
		end
        else
		begin
	        sCode := TMTxtEdit(MJSFindCtrl(Self, Format('Edit%.2dHojCodeFree', [iSaiyo + 3]))).Text;
		end;

        if (iMasterKbn = MASTER_SUBJECTPLUS) then
            Result := fnGetKmkSubNCode(StrToInt(Edit02KmkCode.Text), sCode)
        else
            Result := fnGetHojNCode(m_arCodeAttribute[iSaiyo].nMasterDivision, sCode);
	end;

    function GetMaster(iMasterKbn: Integer; nNCode: Currency; nCNCode: Currency = 0): Boolean;
    begin
        Result := False;

        sDispGCode := '';

        with Dmq do
        begin
            Close;
            SQL.Clear;
            ParamCheck := False;
            if (iMasterKbn = 2) then
            begin
                // 科目別補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM KmkMA' +
                        ' WHERE MasterKbn = 1' +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode) +
                        '   AND CNCode = 0');
            end
            else
            begin
                // その他補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM MasterInfo' +
                        ' WHERE MasterKbn = ' + IntToStr(iMasterKbn));
            end;
            Prepare;
            if Open then
            begin
                if (not Eof) then
                begin
                    iCodeAttr := FieldByName('CodeAttr').AsInteger;
                    iCodeDigit := FieldByName('CodeDigit').AsInteger;
                end
                else
                    Exit;
            end;

            Close;
            SQL.Clear;
            ParamCheck := False;
            if (iMasterKbn = 2) then
            begin
                // 科目別補助
// <183> MOD-STR
//              SQL.ADD('SELECT SubCode GCode, LongName, SimpleName' +
                SQL.ADD('SELECT 2 MasterKbn, SubCode GCode, LongName, SimpleName' +
// <183> MOD-END
                        '  FROM KmkMA' +
                        ' WHERE MasterKbn = 2' +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode) +
                        '   AND CNCode = ' + FloatToStr(nCNCode));
            end
            else
            begin
                // その他補助
// <183> MOD-STR
//              SQL.ADD('SELECT GCode, LongName, SimpleName' +
                SQL.ADD('SELECT MasterKbn, GCode, LongName, SimpleName' +
// <183> MOD-END
                        '  FROM MV_MAS_HojyoMA' +
                        ' WHERE MasterKbn = ' + IntToStr(iMasterKbn) +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode));
            end;
            Prepare;
            if Open then
            begin
                Result := (not Eof);

                if Result then
                begin
                    if (iCodeAttr = 0) then         // 数値
                        sDispGCode := FloatToStr(FieldByName('GCode').AsCurrency)
                    else if (iCodeAttr = 1) then    // 前０あり
                        sDispGCode := FormatCurr(StringOfChar('0', iCodeDigit), FieldByName('GCode').AsCurrency)
                    else
                        sDispGCode := FieldByName('GCode').AsString;
                end;
            end;
        end;
    end;

    function GetMasterInfo(iMasterKbn: Integer; nNCode: Currency = 0): Boolean;
    begin
        Result := False;

        with Dmq do
        begin
            Close;
            SQL.Clear;
            ParamCheck := False;
            if (iMasterKbn = 2) then
            begin
                // 科目別補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM KmkMA' +
                        ' WHERE MasterKbn = 1' +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode) +
                        '   AND CNCode = 0');
            end
            else
            begin
                // その他補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM MasterInfo' +
                        ' WHERE MasterKbn = ' + IntToStr(iMasterKbn));
            end;
            Prepare;
            if Open then
            begin
                Result := (not Eof);
            end;
        end;
    end;

    procedure SetNumEditProperty();
    begin
        if (Screen.ActiveControl is TMNumEdit) then
        begin
            with TMNumEdit(Screen.ActiveControl) do
            begin
                if (Value = 0) then
                begin
                    InputFlagenabled := True;
                    InputFlag := False;
                    Zero := True;
                end;
            end;
        end;
    end;

    function GetMasterDivision(): Integer;
    begin
        Result := -1;

        if (iSaiyo <= High(m_arCodeAttribute)) then
            Result := m_arCodeAttribute[iSaiyo].nMasterDivision;
    end;

    procedure SetNextFocus();
    begin
        if (m_arCodeAttribute[iSaiyo - 1].nAttribute <= 1) then
	        sTargetEdit := Format('Edit%.2dHojCodeNum' , [iSaiyo + 2])
        else
	        sTargetEdit := Format('Edit%.2dHojCodeFree', [iSaiyo + 2]);

        Keybd_Event(VK_RETURN, 0, 0, 0);            //Enter ｷｰのｴﾐｭﾚｲﾄ

        try
            if (Screen.ActiveControl.Name <> sTargetEdit) then
                MjsNextCtrl(Self);
            if (Screen.ActiveControl.Name <> sTargetEdit) then
                MjsSetFocus(Self, sTargetEdit);
        except
//          on E: Exception do Application.Messagebox(PChar(IntToStr(m_arCodeAttribute[iSaiyo - 1].nMasterDivision) + '-' +
//                                                          IntToStr(m_arCodeAttribute[iSaiyo - 1].nAttribute) + '-' +
//                                                          sTargetEdit + '-' + Screen.ActiveControl.Name),'Message',MB_OK);
        end;
    end;

// <183> MOD-STR
//  procedure SetEditValue();
    procedure SetEditValue(iMasterKbn: Integer);
    var
        wMasterKbn  :   Integer;
        wName       :   String;
// <183> MOD-END
    begin
        if (Pos(UpperCase(sTargetEdit), UpperCase(Screen.ActiveControl.Name)) <> 0) then
        begin
// <183> ADD-STR
            wMasterKbn := 0;
            try
                wMasterKbn := Dmq.FieldByName('MasterKbn').AsInteger;
            except
            end;

            wName := '';
            if (wMasterKbn = iMasterKbn) then
            begin
                try
                    wName := Dmq.FieldByName('SimpleName').AsString;
                except
                end;
            end
            else
            begin
                sDispGCode := '';
            end;
// <183> ADD-END

            if (sDispGCode <> '') then
            begin
                if (Screen.ActiveControl is TMTxtEdit) then
                    TMTxtEdit(Screen.ActiveControl).Text := sDispGCode
                else if (Screen.ActiveControl is TMNumEdit) then
                    TMNumEdit(Screen.ActiveControl).Value := StrToFloat(sDispGCode);

                SetNumEditProperty();
            end
            else
            begin
                if (Screen.ActiveControl is TMTxtEdit) then
                    TMTxtEdit(Screen.ActiveControl).Text := ''
                else if (Screen.ActiveControl is TMNumEdit) then
                begin
                    with TMNumEdit(Screen.ActiveControl) do
                    begin
                        Value := 0;
                        Clear();
                        InputFlag := True;
                    end;
                end;
            end;

            Application.ProcessMessages;
// <183> MOD-STR
//          TMTxtEdit(MJSFindCtrl(Self, Format('Edit%.2dHojCodeName', [iSaiyo + 2]))).Text := Dmq.FieldByName('SimpleName').AsString;
            TMTxtEdit(MJSFindCtrl(Self, Format('Edit%.2dHojCodeName', [iSaiyo + 2]))).Text := wName;
// <183> MOD-END
        end;
    end;
begin
    if MSPFunctionBar.GetFuncEnabled(8) then
    begin
        // 付加情報入力
        cSwkAddDlg := TMASPCBSwkAddDlgf.Create(Self);
        cSwkAddDlg.InitJ(pointer(m_pRec), rSwkAddDlgParam);

        cSender := Screen.ActiveControl;

        sDispGCode := '';

        with rSwkAddDlgParam do
        begin
            iSaiyo := 0;

            // ダイアログパラメータ設定
            DCKbn := 1;

            // 科目内部コードは科目外部コードから取得
            KmkNCode := fnGetKmkNCode(Edit02KmkCode.AsInteger);

            // 部門内部コードは補助内部コードから取得
            if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_SECTION) then
            begin
                BmnNCode := m_dSousaiBmnNCode;
                if (m_arCodeAttribute[iSaiyo].nUse <> 0) then
                    iSaiyo := iSaiyo + 1;
            end;

            // プロジェクト内部コードはプロジェクト内部コードから取得
            for iLoop := 1 to 10 do
            begin
                PrjNCode[iLoop] := m_nHojyoNCode[iLoop + 200];
            end;
            if (m_arCodeAttribute[iSaiyo].nMasterDivision in [201..210]) then
            begin
                // 但し、優先３項目に存在する場合は画面入力コードから取得
                PrjNCode[m_arCodeAttribute[iSaiyo].nMasterDivision - 200] := fnGetNCodeFromEdit;
                iSaiyo := iSaiyo + 1;
            end;

            // プロジェクトサブ内部コードはプロジェクトサブ内部コードから取得
            for iLoop := 1 to 10 do
                PjSubNCode[iLoop] := m_nHojyoNCode[iLoop + 300];
            if (301 <= m_arCodeAttribute[iSaiyo].nMasterDivision) and (m_arCodeAttribute[iSaiyo].nMasterDivision <= 310) then
            begin
                // 但し、優先３項目に存在する場合は画面入力コードから取得
                PjSubNCode[m_arCodeAttribute[iSaiyo].nMasterDivision - 300] := fnGetNCodeFromEdit;
                iSaiyo := iSaiyo + 1;
            end;

            // 科目別補助内部コードは科目別補助内部コードから取得
            SubNCode    := m_nHojyoNCode[2];
            if (iSaiyo <= 2) and (GetMasterDivision() = MASTER_SUBJECTPLUS) then
            begin
                // 但し、優先３項目に存在する場合は画面入力コードから取得
                SubNCode    := fnGetNCodeFromEdit(MASTER_SUBJECTPLUS);
                iSaiyo := iSaiyo + 1;
            end;

            // 銀行内部コードは採用を判断して画面入力コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() = MASTER_BANK) then
            begin
                BankNCode   := fnGetNCodeFromEdit;
                iSaiyo := iSaiyo + 1;
            end;
            if (BankNCode = 0) then
                BankNCode   := m_nHojyoNCode[21];

            // 取引先内部コードは採用を判断して画面入力コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() in [MASTER_CUSTOMER..MASTER_CUSTOMERPLUS02]) then
            begin
                CsNCode := fnGetNCodeFromEdit;
                iSaiyo := iSaiyo + 1;
            end;
            if (CsNCode = 0) then
                CsNCode := m_nHojyoNCode[22];

            // 社員内部コードは採用を判断して画面入力コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() = MASTER_STAFF) then
            begin
                EmpNCode   := fnGetNCodeFromEdit;
                iSaiyo := iSaiyo + 1;
            end;
            if (EmpNCode = 0) then
                EmpNCode   := m_nHojyoNCode[25];

            // 汎用補助内部コードは補助内部コードから取得
            for iLoop := 1 to 5 do
            begin
                MulNCode[iLoop] := m_nHojyoNCode[iLoop + 30];
            end;
            // 但し、優先３項目に存在する場合は採用を判断して画面入力コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() in [MASTER_GENERAL01..MASTER_GENERAL05]) then
            begin
                MulNCode[GetMasterDivision() - 30] := fnGetNCodeFromEdit;
                iSaiyo := iSaiyo + 1;
            end;

            // セグメント内部コードはセグメント内部コードから取得
            for iLoop := 1 to 10 do
            begin
                SegNCode[iLoop] := m_nHojyoNCode[iLoop + 100];
            end;
            if (iSaiyo <= 2) and (GetMasterDivision() in [101..110]) then
            begin
                // 但し、優先３項目に存在する場合は補助内部コードから取得
                SegNCode[GetMasterDivision() - 100] := fnGetNCodeFromEdit;
            end;
        end;

        if (cSwkAddDlg.DoDLG(rSwkAddDlgParam) = mrOk) then
        begin
            MjsSetFocus(Self, 'Edit02KmkCode');

            // ダイアログからの情報をMemDataへ優先順位を考慮してセット
            iSaiyo := 0;
            iCodeAttr := 0;
            iCodeDigit := 0;

            Dmq := TMQuery.Create( Self );							//	MQueryの構築
            try
                m_cDataModule.SetDBInfoToQuery( m_cDBSelect, Dmq );	//	DBとMQueryの接続

                with rSwkAddDlgParam do
                begin
                    try
                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_SECTION) then
                        begin
                            // 部門採用あり
                            iSaiyo := iSaiyo + 1;

                            if (m_arCodeAttribute[iSaiyo - 1].nUse = 1) then
                            begin
                                SetNextFocus();

                                // 共通部門以外の場合
                                if (m_dSousaiBmnNCode <> BmnNCode) or
                                   (m_nHojyoNCode[41] <> BmnNCode) then
                                begin
                                    // 変更あり
                                    if (BmnNCode <> 0) then
                                    begin
                                        // 変更入力あり
                                        GetMaster(41, BmnNCode);
                                    end;

// <183> MOD-STR
//                                  SetEditValue();
                                    SetEditValue(41);
// <183> MOD-END

                                end;

        						m_dSousaiBmnNCode := BmnNCode;
                                m_nHojyoNCode[41] := BmnNCode;
                            end;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [201..210]) then
                        begin
                            // プロジェクト(工事)採用あり
                            iSaiyo := iSaiyo + 1;

                            for iLoop := 1 to 10 do
                            begin
                                if (m_arCodeAttribute[iSaiyo - 1].nUse <> 0) then
                                begin
                                    // 採用ありの場合のみ更新
                                    if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision = (iLoop + 200)) then
                                    begin
                                        // 優先３項目
                                        SetNextFocus();

                                        if (PrjNCode[iLoop] <> 0) then
                                        begin
                                            // 入力あり
                                            GetMaster((iLoop + 200), PrjNCode[iLoop]);
                                        end;

// <183> MOD-STR
//                                      SetEditValue();
                                        SetEditValue(iLoop + 200);
// <183> MOD-END

                                        // プロジェクトサブ(工種)
                                        fnKojiInfoCheck(PrjNCode[iLoop], m_arCodeAttribute[iSaiyo - 1].nMasterDivision, iPartKbn);   // 工種管理区分チェック

                                        if (iPartKbn <> 0) then
                                        begin
                                            // 採用あり
                                            iSaiyo := iSaiyo + 1;

                                            if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision <> (iLoop + 300)) then
                                            begin
                                                // 補助採用の順序に変更があった場合の処理
                                                m_arCodeAttribute[iSaiyo - 1].nMasterDivision := (iLoop + 300);
                                                if GetMasterInfo(iLoop + 300) then
                                                begin
								                    m_arCodeAttribute[iSaiyo - 1].nAttribute := Dmq.FieldByName('CodeAttr').AsInteger;
								                    m_arCodeAttribute[iSaiyo - 1].nDigit	 := Dmq.FieldByName('CodeDigit').AsInteger;
                                                end;
                                            end;

                                            SetNextFocus();

                                            if (PjSubNCode[iLoop] <> 0) then
                                            begin
                                                // 入力あり
                                                GetMaster((iLoop + 300), PjSubNCode[iLoop]);
                                            end;

// <183> MOD-STR
//                                          SetEditValue();
                                            SetEditValue(iLoop + 300);
// <183> MOD-END
                                        end;
                                    end;

                                    m_nHojyoNCode[iLoop + 200] := PrjNCode[iLoop];
                                    m_nHojyoNCode[iLoop + 300] := PjSubNCode[iLoop];
                                end;
                            end;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_SUBJECTPLUS) then
                        begin
                            // 科目別補助採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (SubNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(2, rSwkAddDlgParam.KmkNCode, SubNCode);
                                end;

// <183> MOD-STR
//                              SetEditValue();
                                SetEditValue(2);
// <183> MOD-END
                            end;
                        end;
                        m_nHojyoNCode[2] := SubNCode;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_BANK) then
                        begin
                            // 銀行採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (BankNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(21, BankNCode);
                                end;

// <183> MOD-STR
//                              SetEditValue();
                                SetEditValue(21);
// <183> MOD-END
                            end;
                        end;
                        m_nHojyoNCode[21] := BankNCode;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [MASTER_CUSTOMER, MASTER_CUSTOMERPLUS01, MASTER_CUSTOMERPLUS02]) then
                        begin
                            // 取引先採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (CsNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(22, CsNCode);
                                end;

// <183> MOD-STR
//                              SetEditValue();
                                SetEditValue(22);
// <183> MOD-END
                            end;
                        end;
                        m_nHojyoNCode[22] := CsNCode;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_STAFF) then
                        begin
                            // 社員採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (EmpNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(25, EmpNCode);
                                end;

// <183> MOD-STR
//                              SetEditValue();
                                SetEditValue(25);
// <183> MOD-END
                            end;
                        end;
                        m_nHojyoNCode[25] := EmpNCode;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [MASTER_GENERAL01..MASTER_GENERAL05]) then
                        begin
                            // 汎用補助採用あり
                            iSaiyo := iSaiyo + 1;

                            for iLoop := 1 to 5 do
                            begin
                                if (m_arCodeAttribute[iSaiyo - 1].nUse <> 0) then
                                begin
                                    // 採用ありの場合のみ更新
                                    if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision = (iLoop + 30)) then
                                    begin
                                        if (iSaiyo <= 3) then
                                        begin
                                            // 優先３項目
                                            SetNextFocus();

                                            if (MulNCode[iLoop] <> 0) then
                                            begin
                                                // 入力あり
                                                GetMaster((iLoop + 30), MulNCode[iLoop]);
                                            end;

// <183> MOD-STR
//                                          SetEditValue();
                                            SetEditValue(iLoop + 30);
// <183> MOD-END

                                            if (iSaiyo <= 2) then
                                            begin
                                                // 汎用補助の場合、２つ目までチェック
                                                if (m_arCodeAttribute[iSaiyo].nMasterDivision in [MASTER_GENERAL01..MASTER_GENERAL05]) then
                                                begin
                                                    iSaiyo := iSaiyo + 1;
                                                end;
                                            end;
                                        end;
                                    end;
                                end;
                            end;
                        end;
                        for iLoop := 1 to 5 do
                        begin
                            m_nHojyoNCode[iLoop + 30] := MulNCode[iLoop];
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [101..110]) then
                        begin
                            // セグメント採用あり
                            iSaiyo := iSaiyo + 1;

                            for iLoop := 1 to 10 do
                            begin
                                if (m_arCodeAttribute[iSaiyo - 1].nUse <> 0) then
                                begin
                                    // 採用ありの場合のみ更新
                                    if (iSaiyo <= 3) then
                                    begin
                                        if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision = (iLoop + 100)) then
                                        begin
                                            // 優先３項目
                                            if (m_arCodeAttribute[iSaiyo - 1].nUse = 1) then
                                            begin
                                                SetNextFocus();

                                                if (SegNCode[iLoop] <> 0) then
                                                begin
                                                    // 入力あり
                                                    GetMaster((iLoop + 100), SegNCode[iLoop]);
                                                end;

// <183> MOD-STR
//                                              SetEditValue();
                                                SetEditValue(iLoop + 100);
// <183> MOD-END
                                            end;
                                        end;
                                    end;
                                end;
                            end;
                        end;
                        for iLoop := 1 to 10 do
                        begin
                            m_nHojyoNCode[iLoop + 100] := SegNCode[iLoop];
                        end;

                        //相殺登録では消費税制御なし
                    except
                      on E: Exception do Application.Messagebox(PChar(E.Message),'Message',MB_OK);
                    end;
                end;
            finally
                Dmq.Close;
                Dmq.Free;
            end;
        end
        else
        begin
            if (cSender is TMTxtEdit) then
                TMTxtEdit(cSender).SetFocus
            else if (cSender is TMNumEdit) then
                TMNumEdit(cSender).SetFocus;
        end;

        if Assigned(cSwkAddDlg) then
        begin
            cSwkAddDlg.Free;
            //cSwkAddDlg := nil;
        end;
    end;
end;

function TJNTCRP004007f.fnKojiInfoCheck (nKojiNCode: Extended; iMasterKbn: Integer; var iPartKbn: Integer):Boolean;
var
   	dqMasterData    : TMQuery;
    strSQL          : String;

begin
    Result  := False;

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

    strSQL  := '';
    strSQL  := strSQL + 'SELECT PartKbn FROM KojiInfo ';
    strSQL  := strSQL + 'WHERE MasterKbn = ' + IntToStr(iMasterKbn) + ' ';
    strSQL  := strSQL + 'AND NCode = ' + FloatToStr(nKojiNCode);

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   (strSQL);
		Open ();

		if (not EOF) then
        begin
            iPartKbn := FieldByName('PartKbn').AsInteger;

            if (iPartKbn <> 0) then
                Result   := True;
        end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;
// <181> ADD-END

// <191> Del start
{
// <186> ADD-STR
procedure TJNTCRP004007f.GridKihonChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
var
    bEnable :   Boolean;
    sPayCD  :   String;
    DmqData :   TMQuery;
    strSQL  :   String;
begin
    if (m_iProAdoptKbn = 1) and (Column = 9) then
    begin
        CmnStatusBar.SimpleText	:= '';
        bEnable := True;

        sPayCD := Node.Values[GridKihon.ColumnByFieldName('strHojCode').Index];

        if ( m_nCurCodeAttribute <= 1 ) then
            sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);

        // プロジェクト別支払情報が設定された支払先は分解パターン変更不可
        strSQL  := 'SELECT MT.NCode '
                 + '  FROM PayPtnInfo PPI '
                 + ' INNER JOIN MTOKUI MT '
                 + '    ON MT.NCode = PPI.PayNCode '
                 + '   AND MT.RDelKbn = 0 '
                 + ' WHERE PPI.MasterKbn = 22 '
                 + '   AND PPI.PayPtnNo <> 1 '
                 + '   AND MT.GCode = ' + AnsiQuotedStr(sPayCD, '''') + ' '
                 + '   AND PPI.RDelKbn = 0 ';

        // MQueryの構築
        DmqData := TMQuery.Create( Self );
        // DBとMQueryの接続
        m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

        try
            with ( DmqData ) do
            begin
                Close();
                SQL.Clear();
                SQL.Add(strSQL);

                if ( not Open () ) then
                begin
                    m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                    DmqData.Close();
                    DmqData.Free();

                    Exit;
                end;

                if ( EOF <> True ) then
                begin
                	CmnStatusBar.SimpleText	:= 'プロジェクト別支払情報が登録済みです。';
                    bEnable := False;
                end;
            end;
        finally
            DmqData.Close();
            DmqData.Free();
        end;

        GridKihon_BunkaiPtn.DisableEditor := (not bEnable);
    end;
end;
// <186> ADD-END
}
// <191> Del end

// <191> Add start
function TJNTCRP004007f.fnPayPtnInfoChk (sHojCD: String; Column: Integer):Boolean;
var
    bEnable :   Boolean;
    //sPayCD  :   String;
    DmqData :   TMQuery;
    strSQL  :   String;
begin
    Result := True;

    if (m_iProAdoptKbn = 1) and (Column = 9) then
    begin
        //CmnStatusBar.SimpleText	:= '';
        bEnable := True;

        if ( m_nCurCodeAttribute <= 1 ) then
            sHojCD := Format ('%.16d',[StrToInt64(Trim(sHojCD))]);

        // プロジェクト別支払情報が設定された支払先は分解パターン変更不可
        strSQL  := 'SELECT MT.NCode '
                 + '  FROM PayPtnInfo PPI '
                 + ' INNER JOIN MTOKUI MT '
                 + '    ON MT.NCode = PPI.PayNCode '
                 + '   AND MT.RDelKbn = 0 '
                 + ' WHERE PPI.MasterKbn = 22 '
                 + '   AND PPI.PayPtnNo <> 1 '
                 + '   AND MT.GCode = ' + AnsiQuotedStr(sHojCD, '''') + ' '
                 + '   AND PPI.RDelKbn = 0 ';

        // MQueryの構築
        DmqData := TMQuery.Create( Self );
        // DBとMQueryの接続
        m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

        try
            with ( DmqData ) do
            begin
                Close();
                SQL.Clear();
                SQL.Add(strSQL);

                if ( not Open () ) then
                begin
                    m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                    DmqData.Close();
                    DmqData.Free();

                    Exit;
                end;

                if ( EOF <> True ) then
                begin
                    bEnable := False;
                end;
            end;
        finally
            DmqData.Close();
            DmqData.Free();
        end;

        Result := bEnable;
    end;
end;
// <191> Add end

// <196> ADD-STR
// フリー項目説明文字列取得
function TJNTCRP004007f.fnGetLayoutInfoDescription(): String;
var
    sRet        : String;
    iLoop       : Integer;
    DmqData     : TMQuery;
	_pRec       : ^TMjsAppRecord;
	cComArea    : rcCOMMONAREA;
	sPath       : String;
	sFile       : String;
    oIniFile    : TIniFile;
    sData       : String;
    slData      : TStringList;
    iPos        : Integer;

    function TWO_ONE(Str : String) : String;
    var
        Buf : array [0 .. 1023] of Char;
    begin
        LCMapString(GetUserDefaultLCID, LCMAP_HALFWIDTH, PChar(Str), Length(Str)+1, Buf, 1024);
        Result := String(Buf);
    end;
begin
    sRet := '';

    if (m_iErUseKbn = 1) and (Tab.Items.Selected = TAB_DRAFT) and (Pos('MemDraftVFree', GridDraft.FocusedField.Name) <> 0) then
    begin   // 基本電子債権採用あり、且つ手形情報、フリー項目フォーカス
        with GridDraft.DataSource.DataSet do
        begin
            if (FieldByName('ERKbn').AsInteger = 1) and (FieldByName('AccInfo').AsString <> '') and (FieldByName('LayoutInfo').AsString <> '') then
            begin   // 支払先電子債権採用あり、且つ依頼口座入力済み、レイアウト情報設定あり
                if (m_arFreeInfo[0] <> FieldByName('LayoutInfo').AsString) then
                begin   // レイアウト情報未取得、または前回取得レイアウトと異なる場合は取得
                    m_arFreeInfo[0] := FieldByName('LayoutInfo').AsString;

                    // 配列初期化
                    for iLoop := 1 to High(m_arFreeInfo) do
                        m_arFreeInfo[iLoop]	:= '';

                    // MQueryの構築
                    DmqData := TMQuery.Create( Self );
                    // DBとMQueryの接続
                    m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

                    try
                        with ( DmqData ) do
                        begin
                            Close();
                            SQL.Clear();
                            SQL.Add('SELECT 1, LayoutInfo' +
                                    '  FROM AccInfo' +
                                    ' WHERE GCode = ' + GridDraft.DataSource.DataSet.FieldByName('IraiAccNo' ).AsString +   // 手形情報の依頼口座
                                    ' UNION ' +
                                    'SELECT 2, LayoutInfo' +
                                    '  FROM AccInfo' +
                                    ' WHERE NCode = (SELECT DataNum' +
                                                    '  FROM PayBaseInfo' +
                                                    ' WHERE SystemCode = 1' +
                                                    '   AND ItemID = 2841)' +                   // または電子債権のデフォルト口座
                                    ' ORDER BY 1');                                             // の順でレイアウト情報を取得

                            if ( not Open () ) then
                            begin
                                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                                DmqData.Close();
                                DmqData.Free();

                                Exit;
                            end;

                            if not EOF then
                            begin
                                if (FieldByName ('LayoutInfo').AsString <> '') then
                                begin
                                    // レイアウト情報が設定されている場合、そのファイルを読み込む
                                    _pRec := pointer(m_pRec);
                                    cComArea := rcCOMMONAREA(_pRec^.m_pCommonArea^);

                                    sPath := cComArea.SysRoot;
                                    if not IsPathDelimiter(sPath, Length(sPath)) then sPath := sPath + '\';

                                    sFile := sPath + 'MAS\PRG\' + FieldByName ('LayoutInfo').AsString;

                                    if FileExists(sFile) then
                                    begin
                                        oIniFile := Nil;
                                        slData := TStringList.Create;
                                        try
                                            oIniFile := TIniFile.Create(sFile);
                                            for iLoop := 1 to 100 do
                                            begin
                                                sData := oIniFile.ReadString('Data', 'D_Komoku' + IntToStr(iLoop), '');
                                                if (sData <> '') then
                                                begin
                                                    // カンマ区切りで設定内容を分解してガイド表示文字列を生成
                                                    slData.commaText:= sData;

                                                    if (4 <= slData.Count) and (Copy(slData.Strings[3], 1, 10) = 'フリー項目') then
                                                    begin
                                                        iPos := StrToInt(TWO_ONE(Copy(slData.Strings[3], 11, 4)));
                                                        m_arFreeInfo[iPos]	:= slData.Strings[0] + '（';
                                                        if (slData.Strings[2] = 'N') then
                                                            m_arFreeInfo[iPos] := m_arFreeInfo[iPos] + '数値'
                                                        else
                                                            m_arFreeInfo[iPos] := m_arFreeInfo[iPos] + '文字';
                                                        m_arFreeInfo[iPos] := m_arFreeInfo[iPos] + ' ' + slData.Strings[1] + '桁）';
                                                    end;
                                                end
                                                else
                                                    Break;
                                            end;
                                        finally
                                            if Assigned(oIniFile) then oIniFile.Free;
                                            if Assigned(slData) then slData.Free;
                                        end;
                                    end;
                                end;
                            end;
                        end;
                    finally
                        DmqData.Close();
                        DmqData.Free();
                    end;
                end;

                // 現在フォーカスのあるフリー項目に対応する説明を返す
                sRet := m_arFreeInfo[StrToInt(Copy(GridDraft.FocusedField.Name, 14, 1))];
            end;
        end;
    end;

    Result := sRet;
end;

// 手形グリッドカラム使用可否制御
procedure TJNTCRP004007f.SetTegColumnsEnable();
var
    bIsTegata   : Boolean;

    // カラムの使用可否制御を行う
    procedure SetColumnEnable(Sender: TObject; bEnable: Boolean);
    begin
        TdxDBGridColumn(Sender).DisableEditor := not bEnable;
        TdxDBGridColumn(Sender).ReadOnly      := not bEnable;
        TdxDBGridColumn(Sender).TabStop       := bEnable;
    end;
begin
    // 編集不可カラムの制御
    bIsTegata := ((m_iErUseKbn = 0) or (GridDraft.DataSource.DataSet.FieldByName('ERKbn').AsInteger = 0));

    SetColumnEnable(Teg_BunkatuMax,     bIsTegata);
    SetColumnEnable(Teg_YusouKbn,       bIsTegata);
    SetColumnEnable(Teg_YusouFutanKbn,  bIsTegata);

    SetColumnEnable(Teg_BankCode,       not bIsTegata);
    SetColumnEnable(Teg_BkBraCode,      not bIsTegata);
    SetColumnEnable(Teg_TransKanaName,  not bIsTegata);
    SetColumnEnable(Teg_AccKbn,         not bIsTegata);
    SetColumnEnable(Teg_AccNo,          not bIsTegata);
    SetColumnEnable(Teg_ChargeFutanKbn2,not bIsTegata);
    SetColumnEnable(Teg_ChargeKbn2     ,not bIsTegata);     //<203>

    SetColumnEnable(Teg_VFree1,         not bIsTegata);
    SetColumnEnable(Teg_VFree2,         not bIsTegata);
    SetColumnEnable(Teg_VFree3,         not bIsTegata);
    SetColumnEnable(Teg_VFree4,         not bIsTegata);
    SetColumnEnable(Teg_VFree5,         not bIsTegata);
end;

procedure TJNTCRP004007f.GridDraftChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
begin
    // 手形グリッドカラム使用可否制御
    SetTegColumnsEnable;
    // フリー項目ガイド表示
    CmnStatusBar.SimpleText	:= fnGetLayoutInfoDescription;
end;

procedure TJNTCRP004007f.GridDraftChangeNode(Sender: TObject; OldNode,
  Node: TdxTreeListNode);
begin
    // 手形グリッドカラム使用可否制御
    SetTegColumnsEnable;
    // フリー項目ガイド表示
    CmnStatusBar.SimpleText	:= fnGetLayoutInfoDescription;
end;
// <196> ADD-END

//************************************************************************
//
//              <<<<<<<<<外貨債務対応>>>>>>>>>>
//
//************************************************************************
//**********************************************************************
//*		Proccess	:	可変項目情報取得
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/21
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetKhnsetGInfo();
var
    strHojCode      : String;
    strFormat       : String;
    strSQL          : String;
    Qe              : TMQuery;
begin
	Qe := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);	// DBとMQueryの接続

	m_bChange := True;
    KhnKensu        := 0;

	DSKhnsetG.DataSet := nil;
	MemKhnset_G.Close ();
	MemKhnset_G.Open  ();

	with (m_Qe) do

	begin

		Close();
		SQL.Clear();
		strSQL := 'SELECT'
                + ' ISNULL(MT.NCode, 0) AS PayNCode,'                    // 支払先（内部ｺｰﾄﾞ）
                + ' ISNULL(MT.GCode, '''') AS PayCode,'                  // 支払先（外部ｺｰﾄﾞ）
                + ' ISNULL(MT.NMK, '''') AS PayName,'                    // 支払先（簡略名称）
                + ' ISNULL(PT.PayPtnNo, 1) AS PayPtnNo,'                 // 条件ﾊﾟﾀｰﾝNo
                + ' ISNULL(PV.ItemID, '''') As ItemID,'                  // 項目ID
                + ' ISNULL(PV.ItemValue, '''') As ItemValue,'            // 項目内容
                + ' ISNULL(PF.OrderNo, 0) As OrderNo,'                   // 順序
                + ' ISNULL(PF.MaxDigit, 0) As MaxDigit,'                 // 桁数
                + ' ISNULL(PF.Remarks, '''') As Remarks,'                // 備考
                + ' ISNULL(PF.SimpleName, '''') As IDNM'                 // 項目名称
                + ' FROM PayVariableItem PV'
                + ' LEFT OUTER JOIN MTOKUI MT'
                + ' ON (PV.PayNCode = MT.NCode)'
                + ' LEFT OUTER JOIN MTOKUI_PAY MP'
                + ' ON (MP.BaseNCode = MT.NCode)'
                + ' LEFT OUTER JOIN PayPtnInfo PT'
                + ' ON (PV.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode'
                + ' AND PT.PayPtnNo = PV.PayPtnNo'
                + ' AND PT.RDelKbn = 0)'
                + ' LEFT OUTER JOIN PayFBVariableItem PF'
                + ' ON (PV.ItemID = PF.ID)'
                + ' WHERE MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0 AND MP.GaiKaKbn > 0';

        strSQL  := strSQL +' ORDER BY MT.GCode,(IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE PF.OrderNo ENDIF), ID';
        SQL.Add(strSQL);
		//	ｴﾗｰの判定
		if Open = False then
		begin

			fnErrorMessageDsp(m_Qe);
            Exit;
		end;


		while (not EOF) do
		begin
			MemKhnset_G.Append;

			strHojCode := FieldByName ('PayCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
    				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemKhnset_G.FieldByName('ExNCode'    ).AsFloat   := FieldByName('PayNCode'  ).Value;	    // 支払先内部ｺｰﾄﾞ
            MemKhnset_G.FieldByName('BaseHojCode').AsString  := FieldByName('PayCode').AsString;        //　補助コード編集前
            MemKhnset_G.FieldByName('strHojCode' ).AsString  := strHojCode;	                            // 支払先ｺｰﾄﾞ（編集後)
			MemKhnset_G.FieldByName('strHojName' ).AsString  := FieldByName('PayName'   ).Value;	    // 支払先名称
			MemKhnset_G.FieldByName('ItemID'     ).AsString  := FieldByName('ItemID'  ).Value;	        // 項目ID
			MemKhnset_G.FieldByName('IDName'     ).AsString  := FieldByName('IDNM'  ).Value;	    // 項目名称
			MemKhnset_G.FieldByName('MaxDigit'   ).AsInteger := FieldByName('MaxDigit'  ).Value;	    // 桁数
			MemKhnset_G.FieldByName('Remarks'   ).AsString   := FieldByName('Remarks'  ).Value;	        // 備考
            MemKhnset_G.FieldByName('ItemValue'  ).AsString := FieldByName('ItemValue'   ).Value;	    // 内容
			MemKhnset_G.Post();

			NEXT;

		end;
	end;


    KhnKensu    := MemKhnset_G.RecordCount;
	MemKhnset_G.First();


   	DSKhnsetG.DataSet := MemKhnset_G;

	m_bChange := False;
end;
//**********************************************************************
//*		Proccess	:	外貨基本情報の更新
//*		Name		:	T.Kobayashi(MJS)
//*		Date		:	2014/1/22
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						Mem			:	MemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordGaiKbn(sHojCode: String; Mem: TdxMemData): Boolean;
var
	Qe : TMQuery;

begin
 	Qe := TMQuery.Create (Self);
    try
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
            m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, Qe)       // 全社DBとMQueryの接続
        else
            m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);				   	// 子社DBとMQueryの接続

        with (Qe) do
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT BaseNCode FROM MTOKUI_PAY ');
            SQL.Add('WHERE  BaseNCode = :PN');
            ParamByName ('PN').AsFloat	 := m_ExNCode;

            if (not Open ()) then
            begin
                fnErrorMessageDsp(Qe);
                Result := FALSE;
                Exit;
            end;


            if (EOF) then
            begin
                // 新規
                Close();
                SQL.Clear();
                SQL.Add('INSERT INTO MTOKUI_PAY (BaseNCode,GaiKaKbn,GaiPayKbn)');
                SQL.Add('VALUES(:PN,:GaiKakbn,:GaiPayKbn)');
            end
            else
            begin
                Close();
                SQL.Clear();
                SQL.Add('UPDATE MTOKUI_PAY SET GaiKaKbn = :GaikaKbn ');
                SQL.Add(',GaiPayKbn = :GaiPayKbn ');
                SQL.Add('WHERE  BaseNCode= :PN');
            end;

            ParamByName('PN').AsFloat   := m_ExNCode;									    // 取引先ｺｰﾄﾞ
            ParamByName('GaiKaKbn').AsInteger := Mem.FieldByName('intGaiNo').AsInteger;		// 採用区分
            ParamByName('GaiPayKbn').AsInteger := Mem.FieldByName('intGaiPay' ).AsInteger;	// 標準支払区分
    		// 標準支払区分　　画面 1,2,3 →DB 1,3,4
            if Mem.FieldByName('intGaiPay').AsInteger = 2 then
                ParamByName('GaiPayKbn').AsInteger := 3
            else if Mem.FieldByName('intGaiPay').AsInteger = 3 then
                ParamByName('GaiPayKbn').AsInteger := 4;

            if (not ExecSQL()) then
            begin
                fnErrorMessageDsp(Qe);
                Result := FALSE;
                Exit;
            end;

        end;
        Result := TRUE;															// 正常終了
    finally
        Qe.Close;
        Qe.Free;
    end;
end;
//**********************************************************************
//*		Proccess	:	外貨（電信送金、為替手形、送金小切手）ﾏｽﾀ更新処理(振込)
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/16
//*		Parameter	:	HC	:	補助ｺｰﾄﾞ
//*						Mem	:	処理対象のMemData
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpDatePayDetailInfoTransfer_G(HC: String; Mem: TdxMemData): Boolean;
var
    iInDate : Integer;
begin
	with (m_Qe) do
	begin
		Close();
        SQL.Clear;
		SQL.Add('SELECT PayNCode FROM PayDetailInfo ');
		SQL.Add('WHERE MasterKbn = :MK AND PayNCode = :NC AND ShiharaiSyubetu = :SS AND Edaban = 1');
        SQL.Add(' AND PayPtnNo = 1 ');
        SQL.Add(' AND RDelKbn  = 0 ');
		ParamByName('MK').AsInteger := MASTER_CUSTOMER;
		ParamByName('NC').AsFloat	:= Mem.FieldByName('PayNCode').AsFloat;
        if Mem = MemFuri_GD then
    		ParamByName('SS').AsInteger	:= PAYTYPE_TRANSFER_GD;
        if Mem = MemFuri_GT then
    		ParamByName('SS').AsInteger	:= PAYTYPE_TRANSFER_GT;
        if Mem = MemFuri_GK then
    		ParamByName('SS').AsInteger	:= PAYTYPE_TRANSFER_GK;
		if (not Open ()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);    // ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			// 新規
			Close();
			SQL.Clear();
			SQL.Add('INSERT INTO PayDetailInfo (MasterKbn,PayNCode,ShiharaiSyubetu');
   			SQL.Add(',Edaban,AccNCode');
            if (Mem = MemFuri_GD)  or (Mem = MemFuri_GK) then
                SQL.Add(',FeeAccNCode,PayHeadingNo,SendPurPose,PermLicenceNo,PermDate');
            if (Mem = MemFuri_GD)  then
                SQL.Add(',ChargeKbn,ChargeFutan,EdiInfo');
			SQL.Add(',UpdTantoNCode)');
			SQL.Add('VALUES(:MasKbn,:NCode,:Syu,1');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add(',Null')
			else
				SQL.Add(',:Irai');
            if (Mem = MemFuri_GD) or (Mem = MemFuri_GK) then
            begin
    			if Mem.FieldByName('IraiFeeAccNo').IsNull = True then	// 手数料口座ｺｰﾄﾞ
    				SQL.Add(',Null')
    			else
    				SQL.Add(',:IraiFee');

    			SQL.Add(',:PayHeadingNo,:SendPurpose,:PermLicenceNo,:permDate');
            end;
            if (Mem = MemFuri_GD)  then
    			SQL.Add(',:ChaKbn,:ChaFutan,:EdiInfo');
			SQL.Add(',:UpdTantoNCode'); // <160>
			SQL.Add(')');
		end
		else
		begin
			Close();
			SQL.Clear();
			SQL.Add('UPDATE PayDetailInfo SET ');

			SQL.Add('AccNCode = ');
			if Mem.FieldByName('IraiAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
				SQL.Add('Null')
			else
				SQL.Add(':Irai');

            if (Mem = MemFuri_GD)  or (Mem = MemFuri_GK) then
            begin
    			SQL.Add(',FeeAccNCode = ');
    			if Mem.FieldByName('IraiFeeAccNo').IsNull = True then	// 依頼口座ｺｰﾄﾞ
    				SQL.Add('Null')
    			else
    				SQL.Add(':IraiFee');

                SQL.Add(',PayHeadingNo  = :PayHeadingNo'    );

                SQL.Add(',SendPurPose   = :SendPurPose '    );
                SQL.Add(',PermLicenceNo = :PermLicenceNo'   );
                SQL.Add(',PermDate      = :PermDate'        );
            end;
            if (Mem = MemFuri_GD)  then
            begin
    			SQL.Add(',ChargeKbn     = :ChaKbn'          );
                SQL.Add(',ChargeFutan   = :ChaFutan'        );
                SQL.Add(',EdiInfo       = :EdiInfo'         );
            end;
            SQL.Add(',UpdTantoNCode = :UpdTantoNCode ');
			SQL.Add('  WHERE MasterKbn = :MasKbn AND PayNCode = :NCode AND ShiharaiSyubetu = :Syu AND Edaban = 1');
            SQL.Add(' AND PayPtnNo = 1 ');
            SQL.Add(' AND RDelKbn = 0 ');
		end;

		ParamByName('MasKbn').AsInteger := MASTER_CUSTOMER;											// ﾏｽﾀ区分
		ParamByName('NCode' ).AsFloat   := Mem.FieldByName('PayNCode').AsFloat;
		ParamByName('Syu'   ).AsInteger := PAYTYPE_TRANSFER;										// 支払種別
        if Mem = MemFuri_GD then
    		ParamByName('Syu').AsInteger	:= PAYTYPE_TRANSFER_GD;
        if Mem = MemFuri_GT then
		    ParamByName('Syu').AsInteger	:= PAYTYPE_TRANSFER_GT;
        if Mem = MemFuri_GK then
		    ParamByName('Syu').AsInteger	:= PAYTYPE_TRANSFER_GK;
		if Mem.FieldByName('IraiAccNo').IsNull = False then	// 依頼口座ｺｰﾄﾞ
			ParamByName('Irai').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiAccNo').AsInteger);
        if (Mem = MemFuri_GD)  or (Mem = MemFuri_GK) then
        begin
         	if Mem.FieldByName('IraiFeeAccNo').IsNull = False then	// 依頼口座ｺｰﾄﾞ
    			ParamByName('IraiFee').AsFloat := fnGetIraiNCode(Mem.FieldByName('IraiFeeAccNo').AsInteger);
            ParamByName('PayHeadingNo').AsInteger := Mem.FieldByName('SendNo').AsInteger;
            ParamByName('SendPurPose').AsString  := Mem.FieldByName('SendPos').AsString;
            ParamByName('PermLicenceNo').AsString := Mem.FieldByName('SendLNo').AsString;

            if Mem.FieldByName('SendDate').IsNull = True then
                ParamByName('PermDate').AsInteger   	:= 0
            else if fnPAYDateToNum( Mem.FieldByName('SendDate').AsDateTime, iInDate) = True then
                ParamByName('PermDate').AsInteger   	:= iInDate
            else
                ParamByName('PermDate').AsInteger   	:= 0;
        end;

        if (Mem = MemFuri_GD)  then
        begin
    		ParamByName('ChaKbn'  ).AsInteger := Mem.FieldByName('ChargeKbn'    ).AsInteger;			// 手数料計算区分
    		ParamByName('ChaFutan').AsInteger := Mem.FieldByName('ChargeFutan'  ).AsInteger;			// 手数料負担区分
    		ParamByName('EdiInfo').AsString   := Mem.FieldByName('EdiInfo'  ).AsString;
        end;
    	ParamByName('UpdTantoNCode' ).AsCurrency := m_nTantoCd;					// 更新担当者内部ｺｰﾄﾞ<160>

		if (not ExecSQL()) then
		begin
			m_cDataModule.Rollback(m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			fnErrorMessageDsp(m_Qe);
			Result := FALSE;
			Exit;
		end;
	end;
	Result := TRUE;																// 正常終了
end;
//**********************************************************************
//*		Proccess	:	電信送金情報取得
//*		Name		:	T.Kobayashi(MJS)
//*		Date		:	2014/01/16
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetFurikomiInfoGD();
var
	strHojCode	: String;
	strFormat	: String;
    strSQL      : String;
    iNcc        : Integer;
    iRet        : Integer;
    iBanKCD     : Integer;
    iBranchCD   : Integer;
    iGCode      : Integer;
    sName       : String;
    sName1      : String;
    sName2      : String;
    sName3      : String;
  	tWorkDate   :	TDateTime;					                        // TDateTime型

begin
	m_bChange := TRUE;

	DSFuri_GD.DataSet := nil;

	MemFuri_GD.Close;
	MemFuri_GD.Open;


	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		strSQL  :='SELECT '
                + 'ISNULL(MT.NCode, 0) AS PayNCode '                    //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(MP.GaikaKbn,0) As GaikaKbn'                  //外貨採用区分
                + ',ISNULL(MP.GaiPayKbn,0) As GaiPaykbn '               //外貨標準支払方法
                + ',ISNULL(DI.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先口座内部ｺｰﾄﾞ
                + ',ISNULL(DI.FeeAccNCode, 0) AS FeeAccNCode '          //手数料口座内部ｺｰﾄﾞ
                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan '          //手数料負担
                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '              //手数料計算区分
                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo '               //EDI情報
                + ',ISNULL(DI.PayHeadingNo, 0) AS SendNo '              //送金目的(No)
                + ',ISNULL(DI.SendPurpose, '''') AS SendPos '           //送金目的(名)
                + ',ISNULL(DI.PermLicenceNo, '''') AS SendLNo '         //送金許可(No)
                + ',DI.PermDate As SendDate'                            //外貨採用区分
                + ' FROM MTOKUI MT '
                + ' LEFT OUTER JOIN MTOKUI_PAY MP'
                + ' ON (MP.BaseNCode = MT.NCode)'
                + ' INNER JOIN PayDetailInfo DI'
                + ' ON (DI.PayNCode = MT.NCode)'
                + ' WHERE DI.PayPtnNo= 1 AND DI.RDelKbn= 0 AND DI.Shiharaisyubetu = 11 AND DI.Edaban=1 AND MP.GaiKaKbn > 0 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode';

        SQL.Add(strSQL);

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;


		while (not EOF) do
		begin
			MemFuri_GD.Append;

			strHojCode := FieldByName ('PAYCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
	    			strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;
			MemFuri_GD.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'   ).Value;
			MemFuri_GD.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
			MemFuri_GD.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;    // 補助ｺｰﾄﾞ
			MemFuri_GD.FieldByName('SName'      ).AsString := FieldByName('PayName'    ).Value;    // 補助名称
			MemFuri_GD.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;    // 連想
            MemFuri_GD.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	   // 条件ﾊﾟﾀｰﾝNo


            iNcc  := FieldByName('AccNCode').AsInteger;                             // 内部コード
            sName := '';
   			MemFuri_GD.FieldByName('IraiAccNo').AsString := '';
            if iNcc <> 0  then
            begin
		        // 依頼口座情報取得
    		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) = False then abort;
           			MemFuri_GD.FieldByName('IraiAccNo').AsInteger := iGCode;
            end;
            MemFuri_GD.FieldByName('AccInfo').AsString := sName;	                // 銀行/種別/口座



            iNcc  := FieldByName('FeeAccNCode'   ).AsInteger;
            sName := '';
   			MemFuri_GD.FieldByName('IraiFeeAccNo').AsString := '';
            if iNcc <> 0 then
            begin
      		    // 依頼口座情報取得
    		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) = False then abort;
           			MemFuri_GD.FieldByName('IraiFeeAccNo').AsInteger := iGCode;
            end;
            MemFuri_GD.FieldByName('FeeAccInfo').AsString := sName;	                                            // 銀行/種別/口座
            if FieldByName('ChargeFutan').AsInteger <> 0 then
			    MemFuri_GD.FieldByName('ChargeData'   ).AsInteger := FieldByName('ChargeFutan'	 ).AsInteger;	// 手数料負担区分
   			MemFuri_GD.FieldByName('ChargeKbnData').AsInteger := FieldByName('ChargeKbn'	 ).AsInteger;	    // 手数料計算区分
			MemFuri_GD.FieldByName('EDIInfo'      ).AsString  := FieldByName('EdIInfo'		 ).Value;	        // EDI情報
            if FieldByName('SendNo').AsInteger <> 0 then
                MemFuri_GD.FieldByName('SendNo').AsInteger        := FieldByName('SendNo'       ).Value;
            MemFuri_GD.FieldByName('SendPos').AsString        := FieldByName('SendPos'       ).Value;
            MemFuri_GD.FieldByName('SendLNo').AsString        := FieldByName('SendLNo'       ).Value;

            // 送付日 //
            if not ((FieldByName('SendDate').Value = NULL) or (FieldByName('SendDate').Value = 0)) then
            begin
                if not fnPAYNumToDate(FieldByName('SendDate').Value, tWorkDate) = False then
                    MemFuri_GD.FieldByName('SendDate').AsDateTime   := tWorkDate;
            end;

			MemFuri_GD.Post;
			next;
		end;
	end;
	MemFuri_GD.First;

	DSFuri_GD.DataSet := MemFuri_GD;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_TRANSFER_GD,MemFuri_GD);
end;
//**********************************************************************
//*		Proccess	:	為替手形情報取得
//*		Name		:	T.Kobayashi(MJS)
//*		Date		:	2014/01/16
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetFurikomiInfoGT();
var

	strHojCode	: String;
	strFormat	: String;
    strSQL      : String;
    iNcc        : Integer;
    iRet        : Integer;
    iBanKCD     : Integer;
    iBranchCD   : Integer;
    iGCode      : Integer;
    sName       : String;
    sName1      : String;
    sName2      : String;
    sName3      : String;
begin
	m_bChange := TRUE;

	DSFuri_GT.DataSet := nil;

	MemFuri_GT.Close;
	MemFuri_GT.Open;


	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		strSQL  :='SELECT '
                + 'ISNULL(MT.NCode, 0) AS PayNCode '                    //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(MP.GaikaKbn,0) As GaikaKbn'                  //外貨採用区分
                + ',ISNULL(MP.GaiPayKbn,0) As GaiPaykbn '               //外貨標準支払方法
                + ',ISNULL(DI.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先口座内部ｺｰﾄﾞ
//<GA002>                + ',ISNULL(DI.FeeAccNCode, 0) AS FeeAccNCode '          //手数料口座内部ｺｰﾄﾞ
//<GA002>                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan '          //手数料負担
//<GA002>                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '              //手数料計算区分
//<GA002>                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo '               //EDI情報
//<GA002>                + ',ISNULL(DI.PayHeadingNo, 0) AS SendNo '              //送金目的(No)
//<GA002>                + ',ISNULL(DI.SendPurpose, '''') AS SendPos '           //送金目的(名)
//<GA002>                + ',ISNULL(DI.PermLicenceNo, '''') AS SendLNo '         //送金許可(No)
//<GA002>                + ',DI.PermDate As SendDate'
                + ' FROM MTOKUI MT '
                + ' LEFT OUTER JOIN MTOKUI_PAY MP'
                + ' ON (MP.BaseNCode = MT.NCode)'
                + ' INNER JOIN PayDetailInfo DI'
                + ' ON (DI.PayNCode = MT.NCode)'
                + ' WHERE DI.PayPtnNo= 1 AND DI.RDelKbn= 0 AND DI.Shiharaisyubetu = 13 AND DI.Edaban=1 AND MP.GaiKaKbn > 0 ';


        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode';

        SQL.Add(strSQL);
		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;

		while (not EOF) do
		begin
			MemFuri_GT.Append;

			strHojCode := FieldByName ('PAYCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
	    			strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemFuri_GT.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'   ).Value;
			MemFuri_GT.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
			MemFuri_GT.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;    // 補助ｺｰﾄﾞ
			MemFuri_GT.FieldByName('SName').AsString       := FieldByName('PayName'    ).Value;    // 補助名称
			MemFuri_GT.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;    // 連想
            MemFuri_GT.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	   // 条件ﾊﾟﾀｰﾝNo

            iNcc  := FieldByName('AccNCode').AsInteger;                             // 内部コード
            sName := '';
   			MemFuri_GT.FieldByName('IraiAccNo').AsString := '';
            if iNcc <> 0  then
            begin
		        // 依頼口座情報取得
    		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) = False then abort;
           			MemFuri_GT.FieldByName('IraiAccNo').AsInteger := iGCode;
            end;
            MemFuri_GT.FieldByName('AccInfo').AsString := sName;	                // 銀行/種別/口座

    		MemFuri_GT.Post;
			next;
		end;
	end;




	MemFuri_GT.First;

	DSFuri_GT.DataSet := MemFuri_GT;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_TRANSFER_GT,MemFuri_GT);
end;
//**********************************************************************
//*		Proccess	:	送金手形情報取得
//*		Name		:	T.Kobayashi(MJS)
//*		Date		:	2003/10/27
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnGetFurikomiInfoGK();
var
	strHojCode	: String;
	strFormat	: String;
    strSQL      : String;
    iNcc        : Integer;
    iRet        : Integer;
    iBanKCD     : Integer;
    iBranchCD   : Integer;
    iGCode      : Integer;
    sName       : String;
    sName1      : String;
    sName2      : String;
    sName3      : String;
   	tWorkDate   : TDateTime;					// TDateTime型
begin
	m_bChange := TRUE;

	DSFuri_GK.DataSet := nil;

	MemFuri_GK.Close;
	MemFuri_GK.Open;


	with (m_Qe) do
	begin
		Close();
		SQL.Clear();
		strSQL  :='SELECT '
                + 'ISNULL(MT.NCode, 0) AS PayNCode '                    //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(MP.GaikaKbn,0) As GaikaKbn'                  //外貨採用区分
                + ',ISNULL(MP.GaiPayKbn,0) As GaiPaykbn '               //外貨標準支払方法
                + ',ISNULL(DI.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode '                //依頼先口座内部ｺｰﾄﾞ
                + ',ISNULL(DI.FeeAccNCode, 0) AS FeeAccNCode '          //手数料口座内部ｺｰﾄﾞ
//<GA002>                + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan '          //手数料負担
//<GA002>                + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn '              //手数料計算区分
//<GA002>                + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo '               //EDI情報
                + ',ISNULL(DI.PayHeadingNo, 0) AS SendNo '              //送金目的(No)
                + ',ISNULL(DI.SendPurpose, '''') AS SendPos '           //送金目的(名)
                + ',ISNULL(DI.PermLicenceNo, '''') AS SendLNo '         //送金許可(No)
                + ',DI.PermDate As SendDate'                            //外貨採用区分
                + ' FROM MTOKUI MT '
                + ' LEFT OUTER JOIN MTOKUI_PAY MP'
                + ' ON (MP.BaseNCode = MT.NCode)'
                + ' INNER JOIN PayDetailInfo DI'
                + ' ON (DI.PayNCode = MT.NCode)'
                + ' WHERE DI.PayPtnNo= 1 AND DI.RDelKbn= 0 AND DI.Shiharaisyubetu = 14 AND DI.Edaban=1 AND MP.GaiKaKbn > 0 ';

        strSQL  := strSQL + 'ORDER BY MT.SumKbn,MT.GCode';

        SQL.Add(strSQL);

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
            Exit;
		end;


		while (not EOF) do
		begin
			MemFuri_GK.Append;

			strHojCode := FieldByName ('PAYCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
	    			strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;
			MemFuri_GK.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'   ).Value;
			MemFuri_GK.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
			MemFuri_GK.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;    // 補助ｺｰﾄﾞ
			MemFuri_GK.FieldByName('SName'      ).AsString := FieldByName('PayName'    ).Value;    // 補助名称
			MemFuri_GK.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;    // 連想
            MemFuri_GK.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	   // 条件ﾊﾟﾀｰﾝNo


            iNcc  := FieldByName('AccNCode').AsInteger;                             // 内部コード
            sName := '';
   			MemFuri_GK.FieldByName('IraiAccNo').AsString := '';
            if iNcc <> 0  then
            begin
		        // 依頼口座情報取得
    		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) = False then abort;
           			MemFuri_GK.FieldByName('IraiAccNo').AsInteger := iGCode;
            end;
            MemFuri_GK.FieldByName('AccInfo').AsString := sName;	                // 銀行/種別/口座


            iNcc  := FieldByName('FeeAccNCode'   ).AsInteger;
            sName := '';
   			MemFuri_GK.FieldByName('IraiFeeAccNo').AsString := '';
            if iNcc <> 0 then
            begin
      		    // 依頼口座情報取得
    		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) = False then abort;
           			MemFuri_GK.FieldByName('IraiFeeAccNo').AsInteger := iGCode;
            end;

            MemFuri_GK.FieldByName('FeeAccInfo').AsString := sName;	                                        // 銀行/種別/口座
            if FieldByName('SendNo').AsInteger <> 0 then
                MemFuri_GK.FieldByName('SendNo').AsInteger        := FieldByName('SendNo'       ).Value;
            MemFuri_GK.FieldByName('SendPos').AsString        := FieldByName('SendPos'       ).Value;
            MemFuri_GK.FieldByName('SendLNo').AsString        := FieldByName('SendLNo'       ).Value;
            // 送付日 //
            if not ((FieldByName('SendDate').Value = NULL) or (FieldByName('SendDate').Value = 0)) then
            begin
                if not fnPAYNumToDate(FieldByName('SendDate').Value, tWorkDate) = False then
                    MemFuri_GK.FieldByName('SendDate').AsDateTime   := tWorkDate;
            end;
			MemFuri_GK.Post;
			next;
		end;
	end;
	MemFuri_GK.First;

	DSFuri_GK.DataSet := MemFuri_GK;

	m_bChange := False;

	// GridのOptionsのｾｯﾄ
	fnGridOptionsControl(True,DISPOSE_TRANSFER_GK,MemFuri_GK);
end;
//************************************************************************
//*		Component		:	GridFurikomiGD ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(電信送金)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	T.Kobayashi
//************************************************************************
procedure TJNTCRP004007f.GridFurikomiGDBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	cMem		: TdxMemData;
	iRet		: Integer;
	iAcc		: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sName   	: String;
	sAccNo		: String;

begin

    if NewColumn in [0,1,2,4,6,8,10] then
    begin
       	CanChange :=  False;
      	exit;
    end;

	cMem := MemFuri_GD;
    if not(cMem.State in [dsEdit]) then
		exit;




    if  (TdxDBGrid(Sender).FocusedField = FriGD_IraiAccCode.Field) or
        (TdxDBGrid(Sender).FocusedField = FriGD_IraiFeeAccCode.Field) then
    begin
        if  (TdxDBGrid(Sender).FocusedField = FriGD_IraiAccCode.Field) then
            sAccNo   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString	    // 依頼口座
        else
            sAccNo   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiFeeAccNo').AsString;	// 依頼口座

        if sAccNo = '' then
        	sName := ''
        else
        begin
        	iAcc := StrToInt(sAccNo);
        	// 依頼口座情報取得
        	if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
        	begin
        		CanChange := False;
        		abort;
        	end;
        	// ﾚｺｰﾄﾞが存在しない時
        	if iRet = 0 then
        	begin
                //銀行／種別／口座
                if  (TdxDBGrid(Sender).FocusedField = FriGD_IraiAccCode.Field) then
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName
                else
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;
        		CanChange := False;
        		abort;
        	end;
        end;


        if  (TdxDBGrid(Sender).FocusedField = FriGD_IraiAccCode.Field) then
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString    := sName
        else
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;
    end;
end;
//************************************************************************
//*		Component		:	GridFurikomiGTBeforeChangeColumn
//*							ｶﾗﾑが移動する前(為替手形)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	T.Kobayashi
//************************************************************************
procedure TJNTCRP004007f.GridFurikomiGTBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	cMem		: TdxMemData;
	iRet		: Integer;
	iAcc		: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sAccNo		: String;
    sName       : String;

begin
    if NewColumn in [0,1,2,4] then
    begin
      	CanChange :=  False;
       	exit;
    end;

	cMem := MemFuri_GT;
    if not(cMem.State in [dsEdit]) then
		exit;

    if  (TdxDBGrid(Sender).FocusedField = FriGT_IraiAccCode.Field) then
    begin
        sAccNo   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString;	    // 依頼口座

        if sAccNo = '' then
        	sName := ''
        else
        begin
        	iAcc := StrToInt(sAccNo);
        	// 依頼口座情報取得
        	if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
        	begin
        		CanChange := False;
        		abort;
        	end;
        	// ﾚｺｰﾄﾞが存在しない時
        	if iRet = 0 then
        	begin
                //銀行／種別／口座
                TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName;
        		CanChange := False;
        		abort;
        	end;
        end;

        TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString    := sName;
    end;
end;



//************************************************************************
//*		Component		:	GridFurikomiGK ( TdxDBGrid )
//*							ｶﾗﾑが移動する前(送金小切手)
//*		Event			:	OnBeforeChangeColumn
//*		Name			:	T.Kobayashi
//************************************************************************
procedure TJNTCRP004007f.GridFurikomiGKBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	cMem		: TdxMemData;
	iRet		: Integer;
	iAcc		: Integer;
	iBankCD		: Integer;
	iBranchCD	: Integer;
	sAccNo		: String;
    sName       : String;
begin

    if NewColumn in [0,1,2,4,6] then
    begin
       	CanChange :=  False;
      	exit;
    end;

	cMem := MemFuri_GK;
    if not(cMem.State in [dsEdit]) then
		exit;

    if  (TdxDBGrid(Sender).FocusedField = FriGK_IraiAccCode.Field) or
        (TdxDBGrid(Sender).FocusedField = FriGK_IraiFeeAccCode.Field) then
    begin
        if  (TdxDBGrid(Sender).FocusedField = FriGK_IraiAccCode.Field) then
            sAccNo   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiAccNo').AsString	    // 依頼口座
        else
            sAccNo   := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('IraiFeeAccNo').AsString;	// 依頼口座

        if sAccNo = '' then
        	sName := ''
        else
        begin
        	iAcc := StrToInt(sAccNo);
        	// 依頼口座情報取得
        	if fnGetAccCodeInfo(iAcc,iRet,iBankCD,iBranchCD,sName) = False then
        	begin
        		CanChange := False;
        		abort;
        	end;
        	// ﾚｺｰﾄﾞが存在しない時
        	if iRet = 0 then
        	begin
                //銀行／種別／口座
                if  (TdxDBGrid(Sender).FocusedField = FriGK_IraiAccCode.Field) then
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString := sName
                else
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;
        		CanChange := False;
        		abort;
        	end;
        end;


        if  (TdxDBGrid(Sender).FocusedField = FriGK_IraiAccCode.Field) then
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('AccInfo').AsString    := sName
        else
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('FeeAccInfo').AsString := sName;
    end;

end;
//**********************************************************************
//*		Proccess	:	可変項目情報ｾｯﾄ
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/21
//*		Parameter	:	Nothing
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnSetKhnsetGInfo(): Boolean;
var
	sPayCode	: String;
begin
    Result  :=  FALSE;

	sPayCode := MemKhnset_G.FieldByName('strHojCode').AsString;

	if sPayCode = '' then
    begin
        exit;
    end;
	// 支払先ｺｰﾄﾞ
	if (m_nCurCodeAttribute <= 1) then	// 属性：数値
	begin
		Edit00GPayCodeNum.InputFlag := False;
		Edit00GPayCodeNum.Value     := StrToFloat(sPayCode);
    end
	else								// 属性：文字
        Edit00GPayCodeFree.Text     := sPayCode;

	Edit00GPayName.Text        := MemKhnset_G.FieldByName('strHojName'  ).AsString;	// 支払先名称
	Edit01GItemID.Text         := MemKhnset_G.FieldByName('ItemID'      ).AsString;	// IDNo
	Edit01GSimpleName.Text	   := MemKhnset_G.FieldByName('IDName'      ).AsString; // 項目名
    Edit01GMaxDigit.Value      := MemKhnset_G.FieldByName('MaxDigit'    ).AsInteger;// 桁数
    Edit01GRemarks.Text        := MemKhnset_G.FieldByName('Remarks'   ).AsString;
	Edit01GItemValue.Text      := MemKhnset_G.FieldByName('ItemValue'  ).AsString;
	Result := TRUE;
end;
//**********************************************************************
//*		Proccess	:	銀行依頼ｺｰﾄﾞ情報取得
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/21
//*		Parameter	:	NC			:	依頼銀行内部ｺｰﾄﾞ
//*						iRet		:	ﾚｺｰﾄﾞの有無
//*						BankCD		:	銀行ｺｰﾄﾞ
//*						BranchCD	:	支店ｺｰﾄﾞ
//*                     GCode       :   外部コード

//*						Dsp			:	表示内容
//*		Return		:	正常(True)/異常(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnGetAccCodeInfo_G(NC: Integer; var iRet,BankCD,BranchCD,GCode: Integer; var Dsp,Dsp1,Dsp2,Dsp3: String): Boolean;
var
	Qe		: TMQuery;
	sYokin	: String;
begin
	Result := True;
	iRet   := 0;
	Dsp	   := '';

    m_sLayoutInfo := '';                                        // レイアウト情報 <196> ADD

	Qe := TMQuery.Create (Self);
	try
		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);							// DBとMQueryの接続

		with (Qe) do
		begin
			Close();
			SQL.Clear();

    		SQL.Add   ('SELECT AI.GCode, AI.AccKbn, AI.AccNo, BI.SimpleName, BI.AllBkCode, BI.AllBraCode, ');
	    	SQL.Add   ('       BI.BankName, BI.BkBraName, BI.BankKanaName, BI.BraKanaName ');
	    	SQL.Add   ('      ,AI.LayoutInfo ');
    		SQL.Add   ('FROM BankInfo BI ');
	    	SQL.Add   ('Inner Join AccInfo Ai On ');
		    SQL.Add   ('AI.BankNCode = BI.NCode  ');
            SQL.Add   ('Left outer join HojyoMA HM On ');
	    	SQL.Add   ('HM.BankNCode = BI.NCode and HM.RDelKbn = 0 ');
	    	SQL.Add   ('and HM.MasterKbn = BI.MasterKbn ');
            SQL.Add   ('Where BI.MasterKbn = :nMasterDivision And BI.RDelKbn = 0 ');
            SQL.Add   (' And AI.NCode = :nCode ');


			ParamByName ('nMasterDivision').AsInteger := MASTER_BANK;
			ParamByName ('nCode').AsInteger := NC;


			if (not Open ()) then
			begin
    			fnErrorMessageDsp(Qe);
				Result := False;
				Exit;
			end;

			if EOF <> True then
			begin
				iRet 	 := 1;
				BankCD   := FieldByName('AllBkCode' ).AsInteger;		// 全銀協銀行ｺｰﾄﾞ
				BranchCD := FieldByName('AllBraCode').AsInteger;		// 全銀協支店ｺｰﾄﾞ
                GCode    := FieldByName('GCode').AsInteger;             // 外部コード

				// 預金種別
				case FieldByName('AccKbn').AsInteger of
					1: sYokin := '普通';
					2: sYokin := '当座';
					4: sYokin := '貯蓄';
					9: sYokin := 'その他';
				end;
				Dsp := FieldByName('SimpleName').AsString+'／'+sYokin+'／'+fnGetEditedAccountNumber(FieldByName('AccNo').AsString);

                Dsp1:= FieldByName('SimpleName').AsString;                      //銀行名
                Dsp2:= sYokin;                                                  //預金種目
                Dsp3:= fnGetEditedAccountNumber(FieldByName('AccNo').AsString); //口座番号

                m_sLayoutInfo := FieldByName('LayoutInfo').AsString;   
			end;
		end;

	finally
		Qe.Close;
		Qe.Free;
	end;
end;
//************************************************************************
//*		Component		:	Gridkhnset ( TdxDBGrid )
//*							行が変った時
//*		Event			:	OnChangeColumn
//*		Name			:	T.Kobayashi
//************************************************************************
procedure TJNTCRP004007f.GridKhnsetGChangeNodeEx(Sender: TObject);
begin
	if m_bChange = True then exit;

    	fnSetKhnsetGInfo();
end;
//************************************************************************
//*		Component		:	GridKhnsetGDblClick
//*		Event			:
//*		Name			:	T.Kobayashi
//************************************************************************
procedure TJNTCRP004007f.GridKhnsetGDblClick(Sender: TObject);
begin
    // 登録・修正権限がない時はﾌｫｰｶｽｾｯﾄしない
    if m_nReferMode = REFER then
        Exit;

    if m_nCurCodeAttribute <= 1 then
        m_cACControl :=Edit00GPayCodeNum
    else
        m_cACControl :=Edit00GPayCodeFree;

    m_cACControl.SetFocus;

end;

//************************************************************************
//*		Component		:	EDITGENTER ( TdxDBGrid )
//*
//*		Event			:
//*		Name			:	T.Kobayashi
//************************************************************************
procedure TJNTCRP004007f.EditGEnter(Sender: TObject);
begin
	m_cACControl := Screen.ActiveControl;


    if (Screen.ActiveControl.Name = Edit01GItemValue.Name) then            // 内容
    begin
//<GA003>ST
//        if (m_nReferMode <> REFER)  then
        if (m_nReferMode <> REFER)  and (Edit01NewKbn=0) then
//<GA003>ED
            fnSetFncType(1,True);
    end
    else
    begin
        fnSetFncType(1,False);
    end;


	// 変更前の情報取得
	if (Sender is TMNumEdit) then
	begin
		if TMNumEdit(Sender).InputFlag = True then
			m_Save := ''
		else
			m_Save := FloatToStr(TMNumEdit(Sender).Value);
	end
	else
		m_Save := TMTxtEdit(Sender).Text;

	if (TWinControl(Sender).Name = Edit01GItemValue.Name) then			// 内容
	begin
		// 支払先ｺｰﾄﾞ
		if Edit00PayCodeNum.Visible = True then
		begin
			if (Edit00PayCodeNum.InputFlag = True) and (Edit00PayCodeNum.AsInteger = 0) then
				Edit00PayCodeNum.SetFocus;
		end
		else
		begin
			if Edit00PayCodeFree.Text = '' then
				Edit00PayCodeFree.SetFocus;
		end;


    	// ＩＤ＿ＮＯ
	    if (Edit01GItemID.InputFlag = True) and (Edit01GItemID.Text = '') then
		    Edit01GItemID.SetFocus;
    end;




end;
//************************************************************************
//*		Component		:	MemKihonG ( TdxMemData )
//*							外貨基本情報
//*		Event			:	OnBeforePost
//************************************************************************
procedure TJNTCRP004007f.MemKihonGBeforePost(DataSet: TDataSet);
var
	strHojCode	: String;
	sHojCD		: String;
begin
	if (m_bChange) then
		Exit;

	if m_FusenFlg then exit;

	// -----<GA002> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<GA002> Add-Ed-----


	with (DataSet) do
	begin
		sHojCD := FieldByName('strHojCode').AsString;
		if (m_nCurCodeAttribute <= 1) then
			sHojCD := Format ('%.16d', [StrToInt64(Trim(sHojCD))]);

            strHojCode := FieldByName('strHojCode').AsString;

        if (m_nCurCodeAttribute <= 1) then
           	strHojCode := Format ('%.16d', [StrToInt64(Trim(strHojCode))]);

        if (State in [dsEdit]) then
        begin
            if fnUpdateMasterRecordStandardG(strHojCode) = False then abort;

    	    m_DataLoadFlg.FuriGD := False;
   			m_DataLoadFlg.FuriGT := False;
   			m_DataLoadFlg.FuriGK := False;
           	m_DataLoadFlg.KhnsetG:= False;
            // 支払条件ﾊﾟﾀｰﾝ
            if fnUpDateOtheInfoPayDetailInfo() = False then abort;
        end;
    end;


	// -----<GA002> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<GA002> Add-Ed-----


end;

//<GA001>ED
//<GA001>ST
//**********************************************************************
//*		Proccess	:	支払ｺｰﾄﾞﾁｪｯｸ（外貨用）
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/21
//*		Parameter	:	sHojCode	:	補助ｺｰﾄﾞ
//*						(out)sRet	:	名称(簡略)
//*		Return		:	存在(True)/存在しない(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnPayCodeCheckG(sHojCode: String; var sRet: String; var sPayNCD: Extended): Boolean;
begin
	sRet := '';
	if (Trim(sHojCode) = '') then
	begin
		Result := FALSE;
		Exit;
	end;

	if (m_nCurCodeAttribute <= 1) then
		sHojCode := Format ('%.16d',[StrToInt64(Trim(sHojCode))]);
	with (m_Qe) do
	begin
		Close();
		SQL.Clear();

		SQL.Add('SELECT NCode,GCode,NMK FROM MTOKUI MT');
        SQL.Add(' LEFT OUTER JOIN MTOKUI_PAY MP ');
        SQL.Add(' ON (MP.BaseNCode = MT.NCode)  ');
		SQL.Add(' WHERE RDelKbn = 0 AND GCode = :HC AND SumKbn <> 9 AND GaiKakbn > 0');
		ParamByName('HC').AsString	:= sHojCode;

		Open ();

		if EOF <> True then
		begin
			sRet := FieldByName('NMK').AsString;
            sPayNCD := FieldByName('NCODE').AsFloat;
			Result := True;
		end
		else
			Result := False;
    end;
end;

//**********************************************************************
//*		Proccess	:   IDﾁｪｯｸ
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/15
//*		Parameter	:	ID	        :	項目ｺｰﾄﾞ
//*						IDName	    :	名称(簡略)
//*		Return		:	存在(True)/存在しない(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnPayIDCheck(ID: String; var IDName:String): Boolean;
begin
	if (Trim(ID) = '') then
	begin
		Result := FALSE;
		Exit;
	end;


    with (m_Qe) do
	begin
		Close();
		SQL.Clear();

		SQL.Add('SELECT ID,ItemName FROM PayFbVariableItem ');
		SQL.Add('WHERE ID = :ID ');
		ParamByName('ID').AsString	:= ID;

		Open ();

		if EOF <> True then
		begin
			IDName  := FieldByName('itemName').AsString;
			Result := True;
		end
		else
			Result := False;
    end;
end;

//<GA001>ST
//*****************************************************************************
//	Process			:	可変項目情報取得 IDから1件取得
//	Name			:	T.Kobayashi
//	Date			:	2014/01/21
//	Parameter		:	strID			: 項目ID
//					:	strSimpleName	: 簡略名格納域
//					:	iDigit			: 桁数
//					:	strRemarks		: 備考
//	Return			:	True: 正常
//					:	False: 異常
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004007f.fnGetPayFbVariable (strID: String;
									var strSimpleName: String;
									var iDigit: Integer;
                                    var strRemarks: String): Boolean;
var
	dmQuery		: TMQuery;
	strSQL		: String;
begin
	Result := False;
    strSimpleName := '';
    iDigit := 0;
    strRemarks := '';

	dmQuery	:= TMQuery.Create(self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dmQuery);	// DBとMQueryの接続
    
	with dmQuery do
    begin
    	try
            Close ();
            SQL.Clear ();

            // 支払可変情報マスタ
            strSQL  := 'SELECT SimpleName, MaxDigit, Remarks '
                    + ' FROM PayFbVariableItem '
                    + ' WHERE ID = :parID ';

            SQl.Add   (strSQL);

            ParamByName('parID').AsString := strID;

            if not Open () then
            begin
                Exit;
            end;

            if not Eof then
            begin
            	strSimpleName 	:= FieldByName('SimpleName').AsString;
                iDigit 			:= FieldByName('MaxDigit').AsInteger;
                strRemarks 		:= FieldByName('Remarks').AsString;
                Result := True;
                Exit;
            end;

		finally
            Close();
			Free();
		end;
	end;
end;
//<GA001>ED
//<GA001>ST
// 日付情報変換処理
//************************************************************************
//* 	Proccess	:	fnPAY4DateToNum関数
//* 					日付型を数値型に変換する
//* 					（ex. 2002/01/24 → 20020124）
//* 	Event		:	－
//* 	Name		:	T.Kobayashi
//* 	Date		:	2014/01/21
//* 	Paqrameter	:		tInDate:	TDateTime	// 変換前日付（日付型）
//* 					var iOutDate:	Integer 	// 変換後日付（数値型）
//* 	Return		:	Boolean // (True:変換成功, False:変換失敗)
//************************************************************************
function TJNTCRP004007f.fnPAYDateToNum(tInDate: TDateTime; var iOutDate: Integer)	:	Boolean;	// 日付型を数値型に変換する
var
	sDate		:	String; 	// 日付情報文字列

begin
	Result	:= False;

	// 初期化
	iOutDate	:= 0;			// 変換後日付（数値型）

	// 日付型→数値型 変換
	try
		// 文字列に変換
		sDate		:= FormatDateTime('yyyymmdd', tInDate);
		// 数値型に変換
		iOutDate	:= StrToInt(sDate);
	except
		// 日付変換失敗の場合は関数をエラーで抜ける
//		on EConvertError do exit;
		exit;
	end;

	// 日付８桁の判定
	if Length(IntToStr(iOutDate)) < 8 then
	begin
		Exit;
	end;

	Result	:= True;

end;
//<GA001>ED
//<GA001>ST
//************************************************************************
//* 	Proccess	:	fnPAY4NumToDate関数
//* 					数値型を日付型に変換する
//* 					（ex. 20020124 → 2002/01/24）
//* 	Event		:	－
//* 	Name		:	T.Kobayashi
//* 	Date		:	2012/01/21
//* 	Paqrameter	:		iInDate:	Integer 	// 変換前日付（数値型）
//* 					var tOutDate:	TDateTime	// 変換後日付（日付型）
//* 	Return		:	Boolean // (True:変換成功, False:変換失敗)
//************************************************************************
function TJNTCRP004007f.fnPAYNumToDate(iInDate: Integer; var tOutDate: TDateTime)	:	Boolean;	// 数値型を日付型に変換する
var
	sDate				:	String; 	// 日付情報文字列

begin
	Result	:= False;
	// 未設定の場合
	if (iInDate <= 0) then
	begin
		// 関数をエラーで抜ける
		exit;
	end;

	// 初期化
	tOutDate	:= Now();		// 変換後日付（日付型）
    sDate	:= FormatCurr('00000000', iInDate); // yyyymmdd に変換
	if Length(sDate) = 8 then
	begin
		Insert(FormatSettings.DateSeparator, sDate, 7);			// yyyymm/dd に変換
		Insert(FormatSettings.DateSeparator, sDate, 5);			// yyyy/mm/dd に変換
	end
	else
	begin
		// 日付変換前の桁数が「８桁以外」の場合は関数をエラーで抜ける
		exit;
	end;

	try
		// 日付型に変換
		tOutDate	:= StrToDate(sDate);
	except
		// 日付変換失敗の場合は関数をエラーで抜ける
		exit;
	end;

	Result	:= True;

end;
//<GA001>ED
//<GA001>ST
//*****************************************************************************
//	Process			:	GridKihonGBeforeChangeColumn
//	Name			:	T.Kobayashi
//	Date			:	2014/01/21
//*****************************************************************************
procedure TJNTCRP004007f.GridKihonGBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
Var
    iGaiNo  : Integer;
    ExNCode : Extended;
begin
    iGaiNo  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiNo' ).AsInteger;

    if (MemKihonG.State in [dsEdit]) then
    begin
        //変更後

        if (Column = 3) then																//採用区分
        begin
            if(m_LineInfoG.iGaiKbn <> iGaiNo) then
            begin
                ExNCode   := memKihonG.FieldByName('ExNCode' ).AsFloat;
                if(not fnChkPayStatusData(ExNCode)) then
                begin
                    MjsMessageBox (Self, 'この支払先は支払処理中のため、変更できません。', mjWarning, mjDefOK);
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiNo').AsInteger  := m_LineInfoG.iGaiKbn;    // 外貨採用区分
                    TdxDBGrid(Sender).DataSource.DataSet.FieldByName('strGaiKbn').AsString  := m_LineInfoG.strGaiKbn; // 外貨名称
                    canChange := False;
                    abort;
                    Exit;
                end;
            end;
        end;
    end;
    fnChangeGai(iGaiNo);
end;
//**********************************************************************
//*		Proccess	:	可変項目情報のMemDataからﾚｺｰﾄﾞ削除
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/26
//*		Parameter	:	sCD		:	削除対象ｺｰﾄﾞ
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnMemDeleteKhnsetG(sCD: String; iPayPtnNo: Integer);
var
	bFlg	: Boolean;
begin
	if MemKhnset_G.RecordCount = 0 then exit;

	bFlg := False;
	MemKhnset_G.First;
	while Not(MemKhnset_G.Eof) do
	begin
		if (MemKhnset_G.FieldByName('BaseHojCode').AsString = sCD) and
           (MemKhnset_G.FieldByName('PayPtnNo').AsInteger = iPayPtnNo) then
		begin
			MemKhnset_G.Delete;
			bFlg := True;
			break;
		end;
		MemKhnset_G.Next;
	end;

	if bFlg = True then
		fnMemDeleteKhnsetG(sCD, iPayPtnNo);

	if MemKhnset_G.RecordCount = 0 then
    begin
		if Edit00GPayCodeNum.Visible = True then
		begin
			Edit00GPayCodeNum.Value     := 0;
			Edit00GPayCodeNum.InputFlag := True;
		end
		else
			Edit00GPayCodeFree.Text := '';

		Edit00GPayName.Text := '';

		fnInitializeOffsetJournalInfo();
	end
	else
		MemKhnset_G.First;
end;
//**********************************************************************
//*		Proccess	:	可変項目　ﾌｫｰｶｽ移動時のﾁｪｯｸ処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/10/31
//*		Parameter	:	LeftUpFlg   :   ←↑が押下時(True)/以外(False)
//*		Return		:	(True)/(False)
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnMoveGFocusNextControl(LeftUpFlg: Boolean): Boolean;
var
	swk			: String;
    ID          : String;
    IDName      : String;
	sName		: String;
    sPayNCode   : Extended;
    strSimpleName   : String;
    iDigit      : Integer;
    strRemarks  : String;
begin
	Result  := True;
	swk     := '';

	// 支払先
	if (Screen.ActiveControl.Name = Edit00GPayCodeNum.Name) or
	   (Screen.ActiveControl.Name = Edit00GPayCodeFree.Name) then
	begin
		if (Screen.ActiveControl.Name = Edit00GPayCodeNum.Name) then
		begin
			if Edit00GPayCodeNum.InputFlag = False then
				swk := FloatToStr(Edit00GPayCodeNum.Value);
		end
		else
			swk := Edit00GPayCodeFree.Text;

        // 支払先コードが空の場合
        if (swk = '') then
        begin
            Result  := False;
            Edit00GPayName.Text  := '';
        end;

		Result := fnPayCodeCheckG(swk,sName,sPayNCode);
		Edit00GPayName.Text := sName;

		if (swk <> '') and (m_nCurCodeAttribute <= 1) then
			swk := Format('%.16d',[Trunc(Edit00GPayCodeNum.Value)]);
		// 支払ｺｰﾄﾞが存在してかつ、Selecterで存在するｺｰﾄﾞがなかった時

        m_bChange  := True;                //<GA002_2>

		if (fnMoveGridSelecter(MemKhnset_G,swk,'BaseHojCode') = False) and (Result = True) then
		begin
			if (m_nCurCodeAttribute <= 1) then	// 数値
			begin
				Edit00GPayCodeNum.InputFlag := False;
				Edit00GPayCodeNum.Value     := StrToFloat(swk);	// 支払先ｺｰﾄﾞ
			end
			else								// 文字
				Edit00GPayCodeFree.Text := swk;

            Edit00GPayName.Text		   := sName;
		   	fnInitializeKhnsetGJournalInfo();
        end;

        m_bChange  := False;                //<GA002_2>

    	if Result = False then
        begin
            m_Save  := '';  // 入力値エラー後に入力された取引先の名称を表示する為
    		fnInitializeKhnsetGJournalInfo();
        end;
    end;

	// ItemID
	if (Screen.ActiveControl.Name = Edit01GItemID.Name) then
	begin

        if (LeftUpFlg = True) then
        begin
         Exit;
        end
		else
		begin
			if Edit00GPayCodeNum.InputFlag = False then
				swk := FloatToStr(Edit00GPayCodeNum.Value)
    		else
    			swk := Edit00GPayCodeFree.Text;

  			if (swk <> '') and (m_nCurCodeAttribute <= 1) then
				swk := Format('%.16d',[Trunc(Edit00GPayCodeNum.Value)]);

			ID := Edit01GItemID.Text;

			Result := fnPayIDCheck(ID,IDName);
			Edit01GSimpleName.Text := IDName;

			// ItemIDが存在する場合は、表示して
			if (fnMoveGridSelecterGID(MemKhnset_G,swk,ID) = True) then
			begin
               	Edit01GSimpleName.Text	   := MemKhnset_G.FieldByName('IDName'      ).AsString; // 項目名
                Edit01GMaxDigit.Value      := MemKhnset_G.FieldByName('MaxDigit'    ).AsInteger;// 桁数
                Edit01GRemarks.Text        := MemKhnset_G.FieldByName('Remarks'   ).AsString;
              	Edit01GItemValue.Text      := MemKhnset_G.FieldByName('ItemValue'  ).AsString;
//<GA003>ST
                Edit01NewKbn               := 0;
//<GA003>ED
			end
            else
            begin
                if fnGetPayFbVariable(Edit01GItemID.Text, strSimpleName, iDigit, strRemarks) then
                begin
                    Edit01GSimpleName.Text   := strSimpleName;
                    Edit01GMaxDigit.Value    := iDigit;
                    Edit01GRemarks.Text      := strRemarks;
                end
                else
                begin
                    Edit01GSimpleName.Text   := '';
                    Edit01GMaxDigit.Value    := 0;
                    Edit01GRemarks.Text      := '';
                end;

                Edit01GItemValue.Text        := '';
//<GA003>ST
                Edit01NewKbn               := 1;
//<GA003>ED
            end;
		end;
	end;
end;
//*****************************************************************************
//	Process			:	GridKihonGBeforeChangeNode
//	Name			:	T.Kobayashi
//	Date			:	2014/01/21
//*****************************************************************************

procedure TJNTCRP004007f.GridKihonGBeforeChangeNode(Sender: TObject; Node,
  NewNode: TdxTreeListNode; var CanChange: Boolean);
Var
    iGaiNo  : Integer;
    ExNCode : Extended;
begin
    iGaiNo  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiNo' ).AsInteger;

    if(m_LineInfoG.iGaiKbn <> iGaiNo) then
    begin
        ExNCode   := memKihonG.FieldByName('ExNCode' ).AsFloat;
        if(not fnChkPayStatusData(ExNCode)) then
        begin
            MjsMessageBox (Self, 'この支払先は支払処理中のため、変更できません。', mjWarning, mjDefOK);
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiNo').AsInteger  := m_LineInfoG.iGaiKbn;    // 外貨採用区分
            TdxDBGrid(Sender).DataSource.DataSet.FieldByName('strGaiKbn').AsString  := m_LineInfoG.strGaiKbn; // 外貨名称い
            canChange := False;
            abort;
            Exit;
        end;
    end;

    fnChangeGai(iGaiNo);
end;
//<GA001>ED
//<GA001>ST
//*****************************************************************************
//	Process			:	GridKihonGCustomDrawCell
//	Name			:	T.Kobayashi
//	Date			:	2014/01/21
//*****************************************************************************

procedure TJNTCRP004007f.GridKihonGCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
begin
	if (Sender = GridKihonG) then
	begin
        if (AColumn.Name = 'GridKihonG_GaiPay') then
        begin
            if (ANode.Values[3]= 0) then
    			AText	:= '';
        end;
        if (AColumn.Name = 'GridKihonG_GaiPayName') then
        begin
            if (ANode.Values[3]= 0) then
    			AText	:= '';
        end;
	end;

end;
//<GA001>ED
//<GA001>ST
//*****************************************************************************
//	Process			:	PayStatusDataの支払状況チェック
//	Name			:	T.Kobayashi
//	Date			:	2014/01/21
//	Parameter		:	nPayNCode	: 選択した支払先内部コード
//	Return			:	True: 支払処理中でない(入力可)
//					:	False: 支払処理中orエラー(入力不可)
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004007f.fnChkPayStatusData (nPayNCode: Extended): Boolean;
var
	dqQuery	: TMQuery;
    strSQL  : String;
begin
	Result := False;
	dqQuery	:= TMQuery.Create(self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dqQuery);	// DBとMQueryの接続

    try
        with (dqQuery) do
        begin
            strSQL  := 'SELECT PayNCode FROM PayStatusData '
            		+ 'INNER JOIN PayActionInfo '
                    + 'ON PayStatusData.SystemCode = PayActionInfo.SystemCode '
                    + 'AND PayStatusData.FuncNo = PayActionInfo.FuncNo '
            		+ 'WHERE PayActionInfo.SyoriKbn = 1 '	// 通常支払
                    + 'AND PayActionInfo.Condition = 0 '  	// 支払処理中
                    + 'AND PayStatusData.SystemCode in (1, 3) ' // 1: 債務管理, 3: 外貨債務管理
                    + 'AND PayStatusData.PayNCode = :parPayNCode ';

            Close();
            SQL.Clear();
            SQL.Add(strSQL);
            								// 支払先内部コード
            ParamByName('parPayNCode').AsFloat := nPayNCode;

            if not Open() then
            begin
     			Exit;
            end;

            if EOF then						// レコードなし=支払処理中でない
            begin
            	Result := True;
            	Exit;
            end;
		end;
	finally
        dqQuery.Close ();
        dqQuery.Free  ();
    end;
end;
//<GA001>ED
//<GA001>ST
//*****************************************************************************
//	Process			:	GridKihonGChanageNodeEx
//	Name			:	T.Kobayashi
//	Date			:	2014/01/21
//	Parameter		:	Sender
//*****************************************************************************

procedure TJNTCRP004007f.GridKihonGChangeNodeEx(Sender: TObject);
begin
	m_LineInfoG.iGaiKbn    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiNo').AsInteger;    // 外貨採用区分
    m_LineInfoG.strGaiKbn  := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('strGaiKbn').AsString;    // 外貨採用名称
    m_LineInfoG.iGaiPay    := TdxDBGrid(Sender).DataSource.DataSet.FieldByName('intGaiPay').AsInteger;   // 外貨標準支払方法
end;

//<GA001>ST
//**********************************************************************
//*		Proccess	:	可変項目ﾏｽﾀの更新処理
//*		Name		:	T.Kobayashi
//*		Date		:	2003/11/05
//*		Parameter	:	Nothing
//*		Return		:	True/False
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnUpdateMasterRecordPayKhnsetGInfo(): Boolean;
var
	sPayCD	    : String;
	nItemID	    : String;
    exPayN      : Extended;
    NewRecFlg   : Boolean;
    strSQL      : String;

begin
	Result := TRUE;
	// 初期処理

	// 支払ｺｰﾄﾞ
	if Edit00GPayCodeNum.Visible = True then
		sPayCD := Format('%.16d',[Trunc(Edit00GPayCodeNum.Value)])				//<#1>(｢Edit00PayCodeNum.AsInteger｣→｢Trunc(Edit00PayCodeNum.Value)変更｣)
	else
		sPayCD := Edit00GPayCodeFree.Text;

    exPayN  := fnGetHojNCode(MASTER_CUSTOMER,sPayCD);
	// ItemID
	nItemID := Edit01GItemID.Text;

	with (m_Qe) do
	begin
		SQL.Clear();

		strSQL := 'SELECT PayNCode FROM PayVariableItem '
                + 'WHERE ItemID = :ItemID '
                + '  AND PayPtnNo = 1'
                + '  AND PayNCode = ' + FloatToStr(exPayN)
                + '  AND RecSyubetu  = 11'
                + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
        SQL.Add(strSQL);
        SetFld('ItemID'     ).AsString  := nItemID;

		// ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(m_Qe);
			Result := False;
   	       	Exit;
		end;

        NewRecFlg := False;
		if (EOF) then
            NewRecFlg := True;

		Close();
		SQL.Clear();
		if NewRecFlg = True then
		begin
        //新規
            SQL.Add('Insert Into PayVariableItem     ');
            SQL.Add('(MasterKbn,PayNCode,PayPtnNo,   ');
            SQL.Add('RecSyubetu,ItemID,ItemValue,    ');
            SQL.Add('UpdTantoNCode)                  ');
            SQL.Add('Values(:MK,:PayN,:PtnNo,        ');
            SQL.Add(':RecSyu, :ItemID, :ItemValue,   ');
            SQL.Add(':UpdTantoNCode)                 ');

            SetFld('MK'         ).AsInteger := MASTER_CUSTOMER;
            SetFld('PayN'       ).AsFloat   := exPayN;
            SetFld('PtnNo'      ).AsInteger :=1;
            SetFld('RecSyu'     ).AsInteger :=11;
            SetFld('ItemID'     ).AsString  := nItemID;
            SetFld('ItemValue' ).AsString   := Edit01GItemValue.Text;
          	SetFld('UpdTantoNCode').AsCurrency := m_nTantoCd;
        end
        else
        begin
        //更新
            SQL.Add('Update PayVariableItem Set         ');
            SQL.Add(' ItemValue = :ItemValue,    	    ');
            SQL.Add(' UpdTantoNCode = :UpdTantoNCode    ');
            SQL.Add('Where  MasterKbn = :MK         ');
            SQL.Add('and    PayNCode  = :PayN       ');
            SQL.Add('and    PayPtnNo  = :PtnNo      ');
            SQL.Add('and    RecSyubetu= :RecSyu     ');
            SQL.Add('and    ItemID    = :ItemID     ');

            SetFld('MK'         ).AsInteger := MASTER_CUSTOMER;
            SetFld('PayN'       ).AsFloat   := exPayN;
            SetFld('PtnNo'      ).AsInteger := 1;
            SetFld('RecSyu'     ).AsInteger := 11;
            SetFld('ItemID'     ).AsString  := nItemID;
            SetFld('ItemValue' ).AsString   := Edit01GItemValue.Text;
          	SetFld('UpdTantoNCode').AsCurrency := m_nTantoCd;
        end;


		SessionPractice(C_ST_PROCESS);

		try
		    m_cDataModule.BeginTran (m_cDBSelect);									// ﾄﾗﾝｻﾞｸｼｮﾝの開始

		    if (not ExecSQL ()) then
		    begin
			    fnErrorMessageDsp(m_Qe);
			    m_cDataModule.Rollback (m_cDBSelect);								// ﾛｰﾙﾊﾞｯｸ(破棄)
			    Result := FALSE;
			    Exit;
		    end;

		    m_cDataModule.Commit (m_cDBSelect);										// ｺﾐｯﾄ(反映)

		finally
			SessionPractice(C_ED_PROCESS);
		end;

    	// 可変情報再表示
		fnGetKhnsetGInfo();
	end;
end;
//**********************************************************************
//*		Proccess	:	可変項目情報ｸﾘｱ処理
//*		Name		:	T.Kobayashi
//*		Date		:	2014/01/21
//*		Parameter	:	Nothing
//*		Return		:	Nothing
//*		History		:
//**********************************************************************
procedure TJNTCRP004007f.fnInitializeKhnsetGJournalInfo();
begin
    Edit01GItemID.Text      := '';
    Edit01GSimpleName.Text  := '';
    Edit01GMaxDigit.Value   := 0;
    Edit01GRemarks.Text     := '';
    Edit01GItemValue.Text   := '';
end;
//<GA001>ST
//**********************************************************************
//*		Proccess	:	可変項目削除処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2003/11/05
//*		Parameter	:	Nothing
//*		Return		:	True/False
//*		History		:
//**********************************************************************
function TJNTCRP004007f.fnDeleteKhnsetGRecord(): Boolean;
var
	sCode		: String;
	sName		: String;
	sItemID		: String;
	strFormat	: String;
	sMsgName	: String;
    ExNCode     : Extended;
    strSQL      : String;
begin
    Result  :=  FALSE;

	// 支払ｺｰﾄﾞ取得
	if Edit00GPayCodeNum.Visible = True then
	begin
    	sCode := FloatToStr(Edit00GPayCodeNum.Value);
		if ((m_nCurCodeAttribute <= 1) and (Trim(sCode) <> '')) then
		begin
			case (m_nCurCodeAttribute) of
				0: strFormat := '%' +IntToStr(m_nCurCodeDigit)+'d';
				1: strFormat := '%.'+IntToStr(m_nCurCodeDigit)+'d';
			end;
		end;
		sCode := Format(strFormat,[StrToInt64(Trim(sCode))]);
	end
	else
		sCode := Edit00GPayCodeFree.Text;
	// 支払名称取得
	sName := Edit00GPayName.Text;
	// ItemID取得
	sItemID := Edit01GItemID.Text;

    sMsgName := sCode+' '+sName+' '+sItemID;
    	// 削除メッセージ表示('xxx'を削除します。よろしいですか？)
	m_cComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,4);
	if (MjsMessageBoxEx(Self,''''+sMsgName+'''を'+MjsMsgRec.sMsg, MjsMsgRec.sTitle,
						MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, MJsMsgRec.LogType) = mrYes) then

	begin
		SessionPractice(C_ST_PROCESS);

		try

		    if Edit00GPayCodeNum.Visible = True then
			    sCode := Format('%.16d',[Trunc(Edit00GPayCodeNum.Value)])
		    else
			    sCode := Edit00GPayCodeFree.Text;

		    with (m_Qe) do
		    begin
			    Close();
			    SQL.Clear();

                //NCode取得
                SQL.Add('SELECT NCode From MTOKUI'                               );
                SQL.Add('  Where GCode = :GC and RDelKbn =0 ');

			    ParamByName('GC' ).AsString  := sCode;

			    if	(not Open) then
			    begin
				    fnErrorMessageDsp(m_Qe);
				    Exit;
			    end;

                ExNCode := GetFld('NCode').AsFloat;

                Close();
                SQL.Clear();
                SQL.ADD('DELETE FROM PayVariableItem '
                    + 'WHERE MasterKbn = 22'
                    + '  AND PayNCode = ' + FloatToStr(ExNCode)
                    + '  AND ItemID = :ID  ');
                ParamByName('ID').AsString := sItemID;

                SQL.Add(strSQL);

                if	(not ExecSQL ()) then
                begin
                    fnErrorMessageDsp(m_Qe);
                    Exit;
                end;
		    end;
		    // 可変項目再表示
		    fnGetKhnsetGInfo();

            if  KhnKensu > 0 then
        	    fnSetKhnsetGInfo()
            else
            begin
    		    // 支払ｺｰﾄﾞ
    		    if Edit00GPayCodeNum.Visible = True then
    	    	begin
       		    	Edit00GPayCodeNum.Value     := 0;
    			    Edit00GPayCodeNum.InputFlag := True;
    		    end
    		    else
    			    Edit00GPayCodeFree.Text := '';

    		    Edit00GPayName.Text := '';
    		    Edit01GItemID.Text  := '';

    		    fnInitializeKhnsetGJournalInfo();
            end;

		finally
			SessionPractice(C_ED_PROCESS);
		end;
	end;

	Result	:= TRUE;
end;
//<GA001>ST
//-----------------------------------------------------------------------------
// fnPrintCheckListKihonG()
//	< 可変項目情報登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListKihonG();
var
    Qry             :   TMQuery;
    strHojCode      : String;
    strFormat       : String;
    strSQL          : String;

begin
    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemKihonGP.Close;
	MemKihonGP.Open;

    if m_iGaikaKbn =  0 then    Exit;       //印刷ダイアログには出てしまうので、必要！

    with (Qry) do
    begin
   		Close ();
   		SQL.Clear();
		strSQL := 'SELECT ';
		strSQL := strSQL + ' ISNULL(MT.SumKbn, 0) AS SumKbn';                   // 実在／合計区分
		strSQL := strSQL + ',ISNULL(MT.NCode, 0) AS PayNCode';                  // 支払先内部ｺｰﾄﾞ
		strSQL := strSQL + ',ISNULL(MT.GCode, '''') AS PayCode';                // 支払先外部ｺｰﾄﾞ
		strSQL := strSQL + ',ISNULL(MT.Renso, '''') AS Renso';                  // 連想
		strSQL := strSQL + ',ISNULL(MT.NM, '''') AS LongName';                  // 支払先正式名称
		strSQL := strSQL + ',ISNULL(MT.NMK, '''') AS SimpleName';               // 支払先簡略名称
        strSQL := strSQL + ',ISNULL(MP.GaikaKbn,0) As GaikaKbn';                // 外貨採用区分
        strSQL := strSQL + ',ISNULL(MP.GaiPayKbn,0) As GaiPaykbn ';             // 外貨標準支払方法
		strSQL := strSQL + 'FROM MTOKUI MT ';
		strSQL := strSQL + 'LEFT OUTER JOIN MTOKUI_PAY MP ';
		strSQL := strSQL + ' ON (MP.BaseNCode  = MT.NCode) ';
		strSQL := strSQL + 'WHERE  MT.RDelKbn = 0 ';
		strSQL := strSQL + ' AND MT.HojyoKbn2 = 1 ';
		strSQL := strSQL + ' AND MT.TemplateKbn = 0 ';

        SQL.Add(strSQL);

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
        end;

//<GA002_1>
//		SQL.Add('ORDER BY SumKbn, MT.GCode ');
        if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
            SQL.Add('ORDER BY MT.GCode' )
        else																			// 範囲指定: 1=連想順
            SQL.Add('ORDER BY MT.Renso, MT.GCode ' );
//<GA002_1>

		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(Qry);
            Qry.Close;
			Qry.Free;
            Exit;
		end;

		while (not EOF) do
		begin
			strHojCode := FieldByName ('PayCode').Value;

			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemKihonGP.Append;
			MemKihonGP.FieldByName('ExNCode'       ).AsFloat   := GetFld('PayNCode'   ).Value;	  // 内部ｺｰﾄﾞ
			MemKihonGP.FieldByName('intSumKbn'     ).AsInteger := GetFld('SumKbn'     ).Value;
			MemKihonGP.FieldByName('strHojCode'    ).AsString  := strHojCode;					  // 補助ｺｰﾄﾞ(編集後)
			MemKihonGP.FieldByName('strAssociation').AsString  := GetFld('Renso'      ).Value;	  // 連想
			MemKihonGP.FieldByName('strNameSimple' ).AsString  := GetFld('SimpleName' ).Value;	  // 簡略名称
   			MemKihonGP.FieldByName('GaiData'    ).AsInteger    := GetFld('GaiKaKbn'  ).Value;       // 外貨採用区分
			// 外貨区分　　DB 1,3,4 →画面 1,2,3
	        if GetFld('GaiKaKbn').AsInteger <>  0 then
            begin
    			MemKihonGP.FieldByName('GaiPayData' ).AsInteger    := GetFld('GaiPayKbn').Value;       // 外貨標準支払方法
    	        if GetFld('GaiPayKbn').AsInteger =  3 then
		    		MemKihonGP.FieldByName('GaiPayData').AsInteger := 2
    	        else if GetFld('GaiPaykbn').AsInteger = 4 then
    				MemKihonGP.FieldByName('GaiPayData').AsInteger := 3;
            end;
            MemKihonGP.FieldByName('EOF').AsBoolean   := False;                                     // 最終行判定フラグ
			MemKihonGP.Post;
            next;
        end;
	end;
    if (MemKihonGP.RecordCount > 0) then
    begin
        MemKihonGP.Last;
        MemKihonGP.Edit;
        MemKihonGP.FieldByName('EOF').AsBoolean   := True;
    	MemKihonGP.First();
    end;

    Qry.Close();
    Qry.Free();

end;
//-----------------------------------------------------------------------------
// fnPrintCheckListKhnsetG()
//	< 可変項目情報登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListKhnsetG();
var
    Qry             :   TMQuery;
    strHojCode      : String;
    strFormat       : String;
    strSQL          : String;

begin

    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemKhnset_GP.Close ();
	MemKhnset_GP.Open  ();

    if m_iGaikaKbn =  0 then    Exit;     //印刷ダイアログには出てしまうので、必要！

	with (Qry) do

	begin
		Close();
		SQL.Clear();
		strSQL := 'SELECT'
                + ' ISNULL(MT.NCode, 0) AS PayNCode,'                    // 支払先（内部ｺｰﾄﾞ）
                + ' ISNULL(MT.GCode, '''') AS PayCode,'                  // 支払先（外部ｺｰﾄﾞ）
                + ' ISNULL(MT.NMK, '''') AS PayName,'                    // 支払先（簡略名称）
                + ' ISNULL(PT.PayPtnNo, 1) AS PayPtnNo,'                 // 条件ﾊﾟﾀｰﾝNo
                + ' ISNULL(PV.ItemID, '''') As ItemID,'                  // 項目ID
                + ' ISNULL(PV.ItemValue, '''') As ItemValue,'            // 項目内容
                + ' ISNULL(PF.OrderNo, 0) As OrderNo,'                   // 順序
                + ' ISNULL(PF.MaxDigit, 0) As MaxDigit,'                 // 桁数
                + ' ISNULL(PF.Remarks, '''') As Remarks,'                // 備考
                + ' ISNULL(PF.SimpleName, '''') As IDNM'                 // 項目名称
                + ' FROM PayVariableItem PV'
                + ' LEFT OUTER JOIN MTOKUI MT'
                + ' ON (PV.PayNCode = MT.NCode)'
                + ' LEFT OUTER JOIN MTOKUI_PAY MP'
                + ' ON (MP.BaseNCode = MT.NCode)'
                + ' LEFT OUTER JOIN PayPtnInfo PT'
                + ' ON (PV.MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                + ' AND PT.PayNCode = MT.NCode'
                + ' AND PT.PayPtnNo = PV.PayPtnNo'
                + ' AND PT.RDelKbn = 0)'
                + ' LEFT OUTER JOIN PayFBVariableItem PF'
                + ' ON (PV.ItemID = PF.ID)'
                + ' WHERE MT.RDelKbn = 0 AND MT.HojyoKbn2 = 1 AND MT.SumKbn = 0 AND MP.GaiKaKbn > 0';

        SQL.Add(strSQL);

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  AND  (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
        end;

        if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
            SQL.Add('ORDER BY MT.GCode, (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE PF.OrderNo ENDIF), ID ' )
        else																			// 範囲指定: 1=連想順
            SQL.Add('ORDER BY MT.Renso, MT.GCode, (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE PF.OrderNo ENDIF), ID ' );


		//	ｴﾗｰの判定
		if Open = False then
		begin

			fnErrorMessageDsp(Qry);
            Exit;
		end;

		while (not EOF) do
		begin
			MemKhnset_GP.Append;

			strHojCode := FieldByName ('PayCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
    				strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			MemKhnset_GP.FieldByName('ExNCode'    ).AsFloat   := FieldByName('PayNCode'  ).Value;	     // 支払先内部ｺｰﾄﾞ
            MemKhnset_GP.FieldByName('BaseHojCode').AsString  := FieldByName('PayCode').AsString;        //　補助コード編集前
            MemKhnset_GP.FieldByName('strHojCode' ).AsString  := strHojCode;	                         // 支払先ｺｰﾄﾞ（編集後)
			MemKhnset_GP.FieldByName('strHojName' ).AsString  := FieldByName('PayName'   ).Value;	     // 支払先名称
			MemKhnset_GP.FieldByName('ItemID'     ).AsString  := FieldByName('ItemID'  ).Value;	         // 項目ID
			MemKhnset_GP.FieldByName('IDName'     ).AsString  := FieldByName('IDNM'  ).Value;	         // 項目名称
            if FieldByName('MaxDigit').AsInteger <> 0 then
			    MemKhnset_GP.FieldByName('MaxDigit'   ).AsInteger := FieldByName('MaxDigit'  ).Value;	 // 桁数
			MemKhnset_GP.FieldByName('Remarks'   ).AsString   := FieldByName('Remarks'  ).Value;	     // 備考
            MemKhnset_GP.FieldByName('ItemValue'  ).AsString := FieldByName('ItemValue'   ).Value;	     // 内容
            MemKhnset_GP.FieldByName('EOF').AsBoolean   := False;
			MemKhnset_GP.Post();

			NEXT;

		end;
	end;



    if (MemKhnset_GP.RecordCount > 0) then
    begin
        MemKhnset_GP.Last;
        MemKhnset_GP.Edit;
        MemKhnset_GP.FieldByName('EOF').AsBoolean   := True;
    	MemKhnset_GP.First();
    end;

    Qry.Close();
    Qry.Free();

end;
//<GA001>ST
//-----------------------------------------------------------------------------
// fnPrintCheckListFurikomiGP()
//	< 振込情報登録／期日指定振込情報登録ﾘｽﾄ 印刷ﾃﾞｰﾀ取得処理 >
//      PARAM   :   nSelect     11:振込情報登録 14:期日指定振込情報登録 15:
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.fnPrintCheckListFurikomiGP(nSelect: Integer);
var

	strHojCode	: String;
	strFormat	: String;
    Qry         : TMQuery;
    strSQL      : String;
    iNcc        : Integer;
    iRet        : Integer;
    iBanKCD     : Integer;
    iBranchCD   : Integer;
    iGCode      : Integer;
    sName       : String;
    sName1      : String;
    sName2      : String;
    sName3      : String;
  	tWorkDate   : TDateTime;					// TDateTime型
begin
    Qry :=  TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qry);

	MemFuri_GP.Close;
	MemFuri_GP.Open;

    if m_iGaikaKbn =  0 then    Exit;     //印刷ダイアログには出てしまうので、必要！

	with (Qry) do
	begin
		Close();
		SQL.Clear();
		strSQL  :='SELECT '
                + 'ISNULL(MT.NCode, 0) AS PayNCode '                    //支払先内部ｺｰﾄﾞ
                + ',ISNULL(MT.GCode, '''') AS PayCode '                 //支払先外部ｺｰﾄﾞ
                + ',ISNULL(MT.Renso, '''') AS Renso '                   //連想
                + ',ISNULL(MT.NMK, '''') AS PayName '                   //支払先名称
                + ',ISNULL(MP.GaikaKbn,0) As GaikaKbn'                  //外貨採用区分
                + ',ISNULL(MP.GaiPayKbn,0) As GaiPaykbn '               //外貨標準支払方法
                + ',ISNULL(DI.PayPtnNo, 1) AS PayPtnNo '                //条件ﾊﾟﾀｰﾝNo
                + ',ISNULL(DI.AccNCode, 0) AS AccNCode ';               //依頼先口座内部ｺｰﾄﾞ

                if (nSelect = 9) or (nSelect = 11) then                    //9:電信送金 もしくは　11:送金小切手
                begin
                    strSQL  := strSQL + ',ISNULL(DI.FeeAccNCode, 0) AS FeeAccNCode ';          //手数料口座内部ｺｰﾄﾞ
                    if (nSelect = 9) then
                    begin
                        strSQL  := strSQL + ',ISNULL(DI.ChargeFutan, 0) AS ChargeFutan ';          //手数料負担
                        strSQL  := strSQL + ',ISNULL(DI.ChargeKbn, 0) AS ChargeKbn ';              //手数料計算区分
                        strSQL  := strSQL + ',ISNULL(DI.EdiInfo, '''') AS EdiInfo ';               //EDI情報
                    end;
                    strSQL  := strSQL + ',ISNULL(DI.PayHeadingNo, 0) AS SendNo ';              //送金目的(No)
                    strSQL  := strSQL + ',ISNULL(DI.SendPurpose, '''') AS SendPos ';           //送金目的(名)
                    strSQL  := strSQL + ',ISNULL(DI.PermLicenceNo, '''') AS SendLNo ';         //送金許可(No)
                    strSQL  := strSQL + ',DI.PermDate As SendDate';                            //外貨採用区分
                end;


                strSQL  := strSQL + ' FROM MTOKUI MT';
                strSQL  := strSQL + ' LEFT OUTER JOIN MTOKUI_PAY MP';
                strSQL  := strSQL + ' ON (MP.BaseNCode = MT.NCode)';
                strSQL  := strSQL + ' INNER JOIN PayDetailInfo DI';

                case nSelect of
                     9: strSQL  := strSQL + ' ON (DI.PayNCode = MT.NCode AND DI.PayPtnNo= 1 AND DI.RDelKbn= 0 AND DI.Shiharaisyubetu = 11 AND DI.Edaban=1 AND MP.GaiKaKbn > 0)';
                    10: strSQL  := strSQL + ' ON (DI.PayNCode = MT.NCode AND DI.PayPtnNo= 1 AND DI.RDelKbn= 0 AND DI.Shiharaisyubetu = 13 AND DI.Edaban=1 AND MP.GaiKaKbn > 0)';
                    11: strSQL  := strSQL + ' ON (DI.PayNCode = MT.NCode AND DI.PayPtnNo= 1 AND DI.RDelKbn= 0 AND DI.Shiharaisyubetu = 14 AND DI.Edaban=1 AND MP.GaiKaKbn > 0)';
                end;


        SQL.Add(strSQL);


        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            if (uvHani.pvrStCode[0] <> '') then
            begin
                SQL.Add('  WHERE   (MT.GCode >= :ExStCode)     ');
                ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
            end;

            if (uvHani.pvrEdCode[0] <> '') then
            begin
    		    SQL.Add('  AND  (MT.GCode <= :ExEdCode)     ');
       			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
            end;
        end;

//<GA002>ST
//        if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
//            SQL.Add('ORDER BY SumKbn,MT.GCode ' )
//        else																			// 範囲指定: 1=連想順
//            SQL.Add('ORDER BY SumKbn,MT.Renso, MT.GCode' );
        if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
            SQL.Add('ORDER BY MT.GCode ' )
        else																			// 範囲指定: 1=連想順
            SQL.Add('ORDER BY MT.Renso, MT.GCode' );
//<GA002>ED




		//	ｴﾗｰの判定
		if Open = False then
		begin
			fnErrorMessageDsp(Qry);
            Exit;
		end;


		while (not EOF) do
		begin
			MemFuri_GP.Append;

			strHojCode := FieldByName ('PAYCode').Value;
			if (m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0: strFormat := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1: strFormat := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                if strHojCode <>'' then
	    			strHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;
			MemFuri_GP.FieldByName('PayNCode'   ).AsFloat  := FieldByName('PayNCode'   ).Value;
			MemFuri_GP.FieldByName('HojCode'    ).AsString := strHojCode;                          // 補助ｺｰﾄﾞ
			MemFuri_GP.FieldByName('BaseHojCode').AsString := FieldByName('PayCode'    ).Value;    // 補助ｺｰﾄﾞ
			MemFuri_GP.FieldByName('SName'      ).AsString := FieldByName('PayName'    ).Value;    // 補助名称
			MemFuri_GP.FieldByName('RenChar'    ).AsString := FieldByName('Renso'      ).Value;    // 連想
            MemFuri_GP.FieldByName('PayPtnNo'   ).AsInteger:= FieldByName('PayPtnNo'   ).Value;	   // 条件ﾊﾟﾀｰﾝNo


            iNcc  := FieldByName('AccNCode').AsInteger;                             // 内部コード
            sName := '';
   			MemFuri_GP.FieldByName('IraiAccNo').AsString := '';
            if iNcc <> 0  then
            begin
		        // 依頼口座情報取得
    		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) = False then abort;
                begin
           			MemFuri_GP.FieldByName('IraiAccNo').AsInteger := iGCode;
                    MemFuri_GP.FieldByName('IraiAccName').AsString:= sName1;    //印刷のみ必要
                    MemFuri_GP.FieldByName('ShiAccKbnName').AsString:= sName2;  //印刷のみ必要
                    MemFuri_GP.FieldByName('ShiAccNo').AsString     := sName3;  //印刷のみ必要
                end;
            end;
            MemFuri_GP.FieldByName('AccInfo').AsString := sName;	                // 銀行/種別/口座


            if (nSelect = 9) or (nSelect = 11) then                    //9:電信送金 もしくは　11:送金小切手
            begin
                iNcc  := FieldByName('FeeAccNCode'   ).AsInteger;
                sName := '';
       			MemFuri_GP.FieldByName('IraiFeeAccNo').AsString := '';
                if iNcc <> 0 then
                begin
          		    // 手数料口座情報取得
        		    if fnGetAccCodeInfo_G(iNcc,iRet,iBankCD,iBranchCD,iGCode,sName,sName1,sName2,sName3) =  False then abort;
                    begin
               			MemFuri_GP.FieldByName('IraiFeeAccNo').AsInteger := iGCode;
                        MemFuri_GP.FieldByName('IraiFeeAccName').AsString:= sName1;    //印刷のみ必要
                        MemFuri_GP.FieldByName('ShiFeeAccKbnName').AsString:= sName2;  //印刷のみ必要
                        MemFuri_GP.FieldByName('ShiFeeAccNo').AsString     := sName3;  //印刷のみ必要
                    end;
                end;
                MemFuri_GP.FieldByName('FeeAccInfo').AsString := sName;	                                        // 銀行/種別/口座


                if (nSelect = 9) then
                begin
                    if FieldByName('chargeFutan').AsInteger <> 0 then
    		            MemFuri_GP.FieldByName('ChargeData').AsInteger   := FieldByName('ChargeFutan'	 ).AsInteger;	// 手数料負担区分

			        MemFuri_GP.FieldByName('ChargeKbnData').AsInteger         := FieldByName('ChargeKbn'	 ).AsInteger;	// 手数料計算区分
        			MemFuri_GP.FieldByName('ChargeKbnName').AsString          := _ChargeKItemsG[FieldByName('ChargeKbn').AsInteger];

			        MemFuri_GP.FieldByName('EDIInfo'      ).AsString  := FieldByName('EdIInfo'		 ).Value;	    // EDI情報
                end;
                if  FieldByName('SendNo').AsInteger <> 0 then
                    MemFuri_GP.FieldByName('SendNo').AsInteger        := FieldByName('SendNo'       ).Value;
                MemFuri_GP.FieldByName('SendPos').AsString        := FieldByName('SendPos'       ).Value;
                MemFuri_GP.FieldByName('SendLNo').AsString        := FieldByName('SendLNo'       ).Value;


    			if	(m_nDateFormatDivision = 0) then										// 和暦/西暦区分: 0=和暦
    				strFormat	:= 'ee/mm/dd'
    			else																		// 和暦/西暦区分: 1=西暦
    				strFormat	:= 'yyyy/mm/dd';

                // 送付日 //
                if not ((FieldByName('SendDate').Value = NULL) or (FieldByName('SendDate').Value = 0)) then
                begin
                    if not fnPayNumToDate(FieldByname('SendDate').Value,tWorkDate) = False then
                    begin
            			if	(m_nDateFormatDivision = 0) then										// 和暦/西暦区分: 0=和暦
                            MemFuri_GP.FieldByName('SendDate_S').AsString := MjsGetGengou( tworkDate,mdtCMP_YMD) + FormatDateTime (strFormat, tworkDate)
                        else
                            MemFuri_GP.FieldByName('SendDate_S').AsString := FormatDateTime (strFormat, tworkDate);
                    end;
                end;
            end;

            MemFuri_GP.FieldByName('EOF').AsBoolean   := False;
			MemFuri_GP.Post;
			next;
		end;
	end;


    if (MemFuri_GP.RecordCount > 0) then
    begin
        MemFuri_GP.Last;
        MemFuri_GP.Edit;
        MemFuri_GP.FieldByName('EOF').AsBoolean   := True;

    	MemFuri_GP.First;
    end;

    Qry.Close();
    Qry.Free();

end;
//-----------------------------------------------------------------------------
// fnPayProgRendoInitG
//      PARAM   :   PayNCode
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
function TJNTCRP004007f.fnPayProgRendoInitG(PayNCode: Double) :Integer;
var
    ProgRendoParamG  : TJNTPAYProgRendoParamG;
        i   : Integer;

begin
    // 進捗連動 初期処理
    ProgRendoParamG.pAppRecord    := Pointer(m_pRec);
    ProgRendoParamG.dPAYCode      := PayNCode;
    ProgRendoParamG.iNayoseChgKbn := 0;              // 変更なし
    ProgRendoParamG.iSyoriKbn     := 0;              // 支払情報登録系処理

    i := m_PayProgRendoG.Init(ProgRendoParamG);

    Result := i;
end;
//-----------------------------------------------------------------------------
// GridFurikomiGDCustomDrawCell
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.GridFurikomiGDCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
begin
	if (Sender = GridFurikomiGD) then
	begin
        if (AColumn.Name = 'FriGD_ChargeFutanKbn') then
        begin
            if (ANode.Values[7]= 0) then
    			AText	:= '';
        end;
    end;
end;
//-----------------------------------------------------------------------------
// Edit01GItemValueKeyPress
//      PARAM   :
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------

Procedure TJNTCRP004007f.Edit01GItemValueKeyPress(Sender: TObject;
  var Key: Char);
begin
	case (Key) of
		Char (VK_BACK),
//<GA004>ST
//        Char (VK_RETURN),'0'..'9','A'..'Z','ｱ'..'ﾝ','ｦ',' ','ﾞ','ﾟ','｢','｣','\','/',',','.','-','(',')' :
        Char (VK_RETURN),'0'..'9','A'..'Z',' ','/','-','?',':','(',')','.',',','''','+' :
//<GA004>ED
			begin
			end;
//<GA004>ST
//		'ｧ':		Key	:= 'ｱ';
//		'ｨ':		Key	:= 'ｲ';
//		'ｩ':		Key	:= 'ｳ';
//		'ｪ':		Key	:= 'ｴ';
//		'ｫ':		Key	:= 'ｵ';
//		'ｬ':		Key	:= 'ﾔ';
//		'ｭ':		Key	:= 'ﾕ';
//		'ｮ':		Key	:= 'ﾖ';
//		'ｯ':		Key	:= 'ﾂ';
//<GA004>ED
		'{':		Key	:= '(';
		'[':		Key	:= '(';
		'}':		Key	:= ')';
		']':		Key	:= ')';
		'ｰ':		Key	:= '-';
		'a'..'z':	Key	:= Chr (Ord (Key) - 32);
		else		Abort ();
	end;
end;

//-----------------------------------------------------------------------------
// fnCmnEditKanaDescOnKeyPress()
//      PARAM   : Sender    TObjectｵﾌﾞｼﾞｪｸﾄ
//      VAR     : Key       Char
//      RETUEN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004007f.Edit01GItemIDKeyPress(Sender: TObject;
  var Key: Char);
begin
	case ( Key ) of
		Char (VK_BACK),
		Char (VK_ESCAPE),
		Char (VK_RETURN),'0'..'9','A'..'Z':
			begin
			end;
		'ｧ':		Key	:= 'ｱ';
		'ｨ':		Key	:= 'ｲ';
		'ｩ':		Key	:= 'ｳ';
		'ｪ':		Key	:= 'ｴ';
		'ｫ':		Key	:= 'ｵ';
		'ｬ':		Key	:= 'ﾔ';
		'ｭ':		Key	:= 'ﾕ';
		'ｮ':		Key	:= 'ﾖ';
		'ｯ':		Key	:= 'ﾂ';
		'{':		Key	:= '(';
		'[':		Key	:= '(';
		'}':		Key	:= ')';
		']':		Key	:= ')';
		'ｰ':		Key	:= '-';
		'a'..'z':	Key	:= Chr (Ord (Key) - 32);
		else Key	:= #0;
	end;

end;

//<#TAX10> ADD-STR
procedure TJNTCRP004007f.dxDBGridSelectCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
begin
    if MemOffset.RecordCount = 0 then Exit;

    if AColumn =GridOffsetTaxRate then
    begin
		// 軽減税率の背景色をセット
		SetTaxCodeBackColor(AColor,
							m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(ANode.Values[GridOffsetnTaxRate.Index])),
							m_TaxRateInfo.BGColor);
    end;
end;

//******************************************************************************
//* Process	: 消費税率名称取得
//******************************************************************************
function  TJNTCRP004007f.fnGetTaxRateName(nRateCD: Integer): String;
begin
	Result := '';

    if m_TaxRateInfo.GetTaxRateByRateCD(nRateCD) <> 0 then
    begin
		Result  :=  FormatCurr('0.#0', m_TaxRateInfo.GetTaxRateByRateCD(nRateCD)) + '%';
    end;
end;
//<#TAX10> ADD-END

procedure TJNTCRP004007f.Edit07TaxRateChange(Sender: TObject);
begin
//<#TAX10> ADD-STR
	// 軽減税率の背景色をセット
	if m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(Edit07TaxRate.AsInteger)) then
	begin
		Edit07TaxRateName.Color	:= m_TaxRateInfo.BGColor;
	end
	else
	begin
		Edit07TaxRateName.Color	:= clWindow;
	end;
//<#TAX10> ADD-END
end;

end.
//***********************************************************************************************************/
//*																											*/
//* End of Specifications																					*/
//*																											*/
//***********************************************************************************************************/


