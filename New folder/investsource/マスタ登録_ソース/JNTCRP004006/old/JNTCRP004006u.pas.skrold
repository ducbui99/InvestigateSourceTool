//=============================================================================
//
//      システム名  ：Ｇａｌｉｌｅｏｐｔ
//      処理名      ：取引先登録　支払先情報
//
//      制作・著作  ：（株）ミロク情報サービス
//      開発元      ：リード（株）Ｓプロジェクト
//
//      作成者      ：井上 佳美(LEAD)
//      作成日      ：
//
//=============================================================================
//
//  修正履歴
//  <ﾏｰｸ>   <修正者>    <修正日>        <修正内容>
//  <101>   井上 佳美   2005/08/12(FRI) JNTCommonを親から引き継ぐように修正。
//  <102>   高橋 功二   2005/08/25(Thu) ﾃﾝﾌﾟﾚｰﾄ区分(TemplateKbn)の考慮。
//  <103>   高橋 功二   2005/08/25(Thu) 不明な部分をｺﾒﾝﾄ。
//  <104>   高橋 功二   2005/08/28(Sun) 検索EXPのﾊﾟﾗﾒｰﾀ仕様変更対応。
//  <105>   高橋 功二   2005/08/30(Tue) 検索EXPのﾊﾟﾗﾒｰﾀ仕様変更対応、EXP処理修正。
//  <106>   高橋 功二   2005/09/06(Tue) 処理終了時の保存時にｴﾗｰが発生する不具合修正。
//  <107>   高橋 功二   2005/09/12(Mon) 相殺情報にて第1,2補助を科目別の採用を参照するように修正。
//  <108>   高橋 功二   2005/09/14(Wed) 補助で合計支払先も選択対象とする。
//  <109>   高橋 功二   2005/09/14(Wed) 補助の社員を考慮。
//  <110>   高橋 功二   2005/09/14(Wed) 受取人名称、支払通知書区分のﾌｨｰﾙﾄﾞ制御を修正。
//  <111>   茂木 勇次   2005/09/28(WED) 切出/埋込ﾎﾞﾀﾝを継承し、子側で処理を行う。
//  <112>   飯塚 健介   2005/10/12(WED) 更新ﾎﾞﾀﾝ押時に入力中の相殺ﾁｪｯｸを行う。
//  <113>   飯塚 健介   2005/10/18(WED) TABｷｰｲﾍﾞﾝﾄ制御(情報区分ｺﾝﾎﾞにﾌｫｰｶｽが移動してしまう)。
//  <114>   飯塚 健介   2005/10/20(THU) ﾌﾟﾛｼﾞｪｸﾄの採用方法を変更。
//  <115>   飯塚 健介   2005/10/24(THU) 相殺情報合計(取引先等)対応。
//  <116>   飯塚 健介   2005/10/28(FRI) 工事採用が無い場合に科目選択でｴﾗｰが発生するのを回避。
//  <117>   PRIME加藤   2005/11/28(MON) 履歴用ｽﾄｱﾄﾞ呼び出し。
//  <118>   PRIME加藤   2005/11/29(TUE) 共通部門が採用されている科目が選択できない不具合修正。
//  <119>   PRIME広田   2005/12/05(MON) 会社ｺｰﾄﾞ・会社名出力のため会社情報取得追加。
//  <120>   PRIME広田   2005/12/05(MON) 帳票の詳細のﾌﾟﾛｼﾞｪｸﾄが表示されないため修正。
//  <121>   PRIME広田   2005/12/06(TUE) 帳票の支払い口座・種別・口座番号表示されないため修正。
//  <122>   PRIME広田   2005/12/06(TUE) 帳票の相殺情報にﾌﾟﾛｼﾞｪｸﾄが非表示のため修正。
//  <123>   PRIME加藤   2005/12/07(WED) 相殺情報の不具合修正。
//  <124>   PRIME広田   2005/12/12(MON) 印刷ﾌﾟﾚﾋﾞｭｰ中の終了対応。
//  <125>   PRIME加藤   2005/12/26(MON) 登録・修正権限がない時の不具合修正。
//  <126>   茂木 勇次   2006/02/06(MON) 未対応帳票の作成。
//  <127>   飯塚 健介   2006/02/06(MON) 銀行本店及び支店の入力ﾁｪｯｸ処理を修正
//  <128>   川戸 仁美   2006/04/20(THU) 進捗連動対応
//  <129>   川戸 仁美   2006/05/02(TUE) 支払通知書区分に「3:その他」を追加
//  <130>   川戸 仁美   2006/06/14(WED) 修正内容取消後に進捗連動情報を初期化するよう修正。
//  <131>   川戸 仁美   2006/06/14(WED) 相殺情報の必須入力科目が空で更新ボタンを押した時のエラーを修正。
//  <132>   川戸 仁美   2006/06/15(THU) 支払方法変更時に、期日指定振込満期の未処理データをチェック。
//  <133>   川戸 仁美   2006/06/19(MON) 査定方法の追加
//  <134>   川戸 仁美   2006/06/21(WED) 振込先支店コードが「000」の場合も登録できるよう修正。
//  <135>   川戸 仁美   2006/06/21(WED) 相殺金額にマイナスの値が登録できないよう修正。
//  <136>   川戸 仁美   2006/06/21(WED) 進捗連動の初期処理後、終了処理が必須で行われるよう修正。
//  <137>   川戸 仁美   2006/06/28(WED) 振込情報に「口座自動引落区分」と「引落支払データ」を追加。
//  <138>   川戸 仁美   2006/08/02(WED) 支払先登録リストの印刷で科目別補助が正しく出力されるよう修正。
//  <139>   川戸 仁美   2006/08/03(THU) 相殺情報の補助の入出力順序を修正。
//  <140>   川戸 仁美   2006/08/03(THU) 相殺情報必須入力科目が空の時はタブ移動不可。<131>を再修正。
//  <141>   川戸 仁美   2006/08/03(THU) 相殺情報の科目に社員を採用している場合、支払先登録リストに
//                                      社員名称が出力されない不具合を修正。
//  <142>   川戸 仁美   2006/08/04(FRI) 進捗連動排他処理対応
//  <143>   川戸 仁美   2006/08/04(FRI) Screen.ActiveControlがNilの場合、fnShowScreenInformationsで
//                                      発生するエラーを回避。
//  <144>   川戸 仁美   2006/08/08(TUE) 支払先登録リストに査定区分と口座自動引落区分を追加
//  <145>   川戸 仁美   2006/08/10(THU) 支払先登録リストで数値型の科目別補助を出力できるよう修正。
//  <146>   川戸 仁美   2006/08/17(THU) 帳票用bplが正しくunloadされずにGali終了まで掴まれた状態になる不具合を修正
//  <147>   川戸 仁美   2006/08/17(THU) タブ選択のみでデータの変更フラグが立つ不具合を修正
//  <148>   川戸 仁美   2006/10/06(FRI) 手形・小切手情報の依頼口座内部コードが外部コードで登録される不具合を修正
//  <149>   川戸 仁美   2006/10/11(WED) プロジェクト別支払対応
//  <150>   川戸 仁美   2006/11/02(THU) プロジェクト別支払対応・相殺情報ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞの表示
//  <151>   川戸 仁美   2006/12/15(FRI) 相殺No変更後、ｷｬﾝｾﾙﾎﾞﾀﾝを押した時のエラーを修正
//  <152>   川戸 仁美   2006/12/18(MON) 相殺情報不具合修正
//  <153>   川戸 仁美   2006/12/19(TUE) ファンクションバー押下で標準情報をコピー
//  <154>   川戸 仁美   2007/02/01(THU) 不具合修正
//  <155>   川戸 仁美   2007/02/07(WED) 分解基準値が200%になる不具合を修正
//  <156>   川戸 仁美   2007/02/09(FRI) 基本情報の採用により査定方法と分解パターンの入力制御を行う
//  <157>   川戸 仁美   2007/02/13(TUE) 詳細ダイアログ分解方法対応
//  <158>   川戸 仁美   2007/02/13(TUE) プロジェクトの採用が「2: 任意」の場合も相殺情報のプロジェクトを入力可とする
//  <Rel>   高橋 功二   2007/05/24(THU) ﾏｽﾀ同期対応(ｸﾞﾙｰﾌﾟ会社管理対応)
//  <159>   川戸 仁美   2007/06/04(TUE) 印刷処理で、相殺科目に採用されている銀行補助名称が出力されない不具合を修正
//  <160>   川戸 仁美   2007/06/08(FRI) 取引先検索Expの検索辞書に部門と社員が表示されないよう修正
//  <161>   川戸 仁美   2007/07/06(FRI) プロジェクト別支払削除対応
//  <162>   川戸 仁美   2007/07/12(THU) 標準情報コピー時、進捗連動処理を行う
//  <163>   川戸 仁美   2007/07/19(THU) HojyoMA取得SQLにてマスタ区分の参照を必須とする
//  <164>   川戸 仁美   2007/07/19(THU) ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ欄にフォーカスがある時は、支払情報の入力、更新を不可とする
//  <165>   川戸 仁美   2007/07/24(THU) 更新権限がない場合、標準情報ｺﾋﾟｰとﾌﾟﾛｼﾞｪｸﾄ別情報削除を使用不可とする
//                                      削除権限がない場合、ﾌﾟﾛｼﾞｪｸﾄ別支払情報削除と相殺情報削除を使用不可とする
//  <166>   小柴 尚子   2007/07/30(MON) 決算確定時、親でMsgが流れるのでここでは入力不可にするだけでＯＫ
//  <167>   川戸 仁美   2007/08/16(THU) 決算確定時、査定方法・分解パターンは入力不可
//  <168>   川戸 仁美   2007/08/17(FRI) 帳票出力不具合修正
//  <169>   川戸 仁美   2007/08/21(TUE) 預かり源泉税・支払調書対応
//  <170>   川戸 仁美   2007/12/13(THU) 査定金額自動計算対応
//  <171>   川戸 仁美   2008/01/15(THU) 印刷範囲指定が反映されない不具合を修正
//	<172>	PRIME関		2008/02/01(FRI)	ﾏｽﾀ更新履歴対応
//	<173>	大竹 文顕	2008/03/15(SAT)	更新担当者内部ｺｰﾄﾞのｾｯﾄ
//	<174>	ラボ難波	2008/03/25(TUE)	相殺情報で、部門、プロジェクト、プロジェクトサブ、科目別補助の採用ありの科目を登録するとエラーになる不具合を修正
//  <175>   長沼 雄一   2008/04/03(THU) 検索Expから取得する補助情報の内部コードでの取得対応
//  <176>   T.SATOH(IDC)2008/05/29(THU) <175>改修時の不具合修正
//  <177>   川畑@MSI	2008/06/17(TUE) 連動処理の場所移動
//	<178>	T.SATOH(IDC)2008/07/04(FRI)	部門適用期間対応の修正②(手入力時は最新を取得)
//	<179>	川畑@MSI	2008/07/14(MON)	引落し支払データの制御修正
//  <180>   T.Ogawa(RIT)2008/08/06(WED) 口座番号をDB格納値のまま表示する
//  <181>   T.SATOH(IDC)2008/09/05(FRI) <175>改修時の不具合修正②
//  <182>   T.SATOH(IDC)2008/10/24(FRI) 支払項目変更とＷＦ申請状況とのチェックを追加
//  <183>   T.SATOH(IDC)2008/12/02(TUE) 科目の下に部門コードを入力すると、補助欄に入力されることがある(RGC-0029)
//                                      ※現象再現手順
//                                      　・コード入力後、タブクリックではなく「次へ」ボタンで相殺パネルへ進む
//                                      　・部門と科目別補助が採用されている科目を入力
//                                      　・空Enterで相殺金額まで進む
//                                      　・取り消しボタンを押下して修正内容破棄
//                                      　・再度コード入力し、タブクリックではなく「次へ」ボタンで相殺パネルへ進む
//                                      　・部門と科目別補助が採用されている科目を入力
//                                      　・部門がアクティブに見えるが、コード入力すると補助にコードが表示される
//  <184>   T.SATOH(IDC)2009.01.09(FRI) スポット支払対応
//  <185>   T.SATOH(IDC)2009.05.07(THU) スポット支払対応②
//  <186>   T.SATOH(IDC)2009/06/10(WED) <182>改修時の不具合修正
//  <187>   T.SATOH(IDC)2009.07.02(THU) EDI情報のセットなし区分追加
//  <188>   T.SATOH(IDC)2009.07.29(WED) 相殺情報で社員が入力できなかった
//	<189>	長沼 雄一   2009.09.18(FRI) 優先支払を手形以外を設定できるよう対応
//	<190>	長沼 雄一   2009.12.25(FRI) 優先支払で端数処理額がないのに端数処理方法が出力されている不具合を修正
//	<191>	長沼 雄一   2009.12.28(MON) 優先支払で定額の場合に端数処理額を出力しないよう修正
//	<192>	長沼 雄一   2010.01.13(WED) 優先支払の設定が５行ある場合に印刷でエラーとなる不具合を修正
//  <193>   T.SATOH(IDC)2010.01.21(THU) 優先支払枝番０レコード作成不具合修正
//  <194>   T.SATOH(IDC)2010.01.21(THU) 付加情報入力ダイアログ対応
//  <195>   T.SATOH(IDC)2010.02.05(FRI) プロジェクト支払情報削除後の戻りを分解パターンに変更
//  <196>   T.SATOH(IDC)2010.02.05(FRI) 使用していないツリービュー作成を廃止
//  <197>   T.SATOH(IDC)2010.03.09(TUE) 利息額計算項目追加(個別対応)
//  <LPH>   T.SATOH(IDC)2010.05.21(FRI) MLBplLoader対応(LoadPackageの置き換え)
//  <198>   小島(MSI)   2010.07.27(TUE) 銀行情報登録対応
//  <199>   T.SATOH(IDC)2010.08.18(WED) 付加情報入力ダイアログ対応時の不具合修正
//  <200>   MSI小島     2010.10.12(TUE) 並行支払対応(5→99、2桁表示のためedit幅調整)
//  <201>   SATOH(GSOL) 2010.10.26(TUE) 優先支払ENTERでのBEEPを廃止
//  <202>   SATOH(GSOL) 2010.10.27(WED) プロジェクト別支払レコードが存在する場合、分解パターン修正は不可とする
//  <203>   SATOH(GSOL) 2010.10.27(WED) 登録リストで、各支払方法の依頼口座名が出力されていなかった
//  <204>   小島(MSI)	2011.06.22(WED) 振込情報タブの情報をF1:振込情報コピーにてコピーする
//  <205>   小島(MSI)	2011.06.23(THU) 消費税一覧修正
//  <206>   小島(MSI)	2011.06.23(THU) 「切出」ボタン押下でフォーカスエラーになる不具合を修正
//  <207>   小島(MSI)	2011.06.28(TUE) 取引先にプロジェクト別支払情報がない場合は「F6 情報削除」を使用不可とする
//  <KDS>   SATOH(GSOL) 2012.02.07(TUE) ShiftState対応
//  <208>   SATOH(GSOL) 2012.02.10(FRI) 起動時エラーの回避(販売:Gali2258)
//  <209>   SATOH(GSOL) 2012.03.26(MON) 依頼口座名に銀行補助名称が表示されている点を修正
//  <210>   SATOH(GSOL) 2012.04.24(TUE) 消費税コード自動表示(部門別科目消費税対応)
//                                      消費税コード自動変換(非課税仕入部門対応)
//                                      仕入ウィンドウパターン追加(消費税コードチェック追加)
//  <211>   SATOH(GSOL) 2012.05.02(WED) 電子債権対応
//  <212>   T.Ogawa(LEAD) 2012.05.28(MON) 手形／電子債権情報タブ内のフリー項目５または『採用区分「0：なし」』でEnterキー押下した場合は、
//                                       『次へ』ボタンへフォーカス遷移する対応
//  <213>   T.Ogawa(LEAD) 2012.05.28(MON) 電子記録債権情報の採用区分が「0：なし」の場合でも、登録できてしまう場合がある不具合対応
//  <214>   SATOH(GSOL) 2012.06.04(MON) 電子債権採用区分は会社基本で採用されている場合のみ使用可能とする
//  <215>   SATOH(GSOL) 2012.06.07(THU) 進捗連動、ＷＦ申請ロールバック関連処理見直し
//  <216>   SATOH(GSOL) 2012.07.04(WED) 電子債権追加対応①(項目配置変更)
//  <217>   SATOH(GSOL) 2012.07.04(WED) 電子債権追加対応②(APGファイル項目情報ガイド表示)
//  <218>   SATOH(GSOL) 2012.07.04(WED) 電子債権追加対応③(登録リスト対応)
//  <AUT>   SATOH(GSOL) 2012.08.07(TUE) JNTAuthority対応
//  <219>   SATOH(GSOL) 2012.10.31(WED) 付加情報入力ダイアログ対応時の考慮不足修正
//  <220> 	SATOH(GSOL) 2013.05.01(WED) 期日指定振込科目切替対応
//  <221> 	SATOH(GSOL) 2013.05.10(FRI) 電子記録債権手数料改良
//  <TX26>  SATOH(GSOL) 2013/07/17(WED) H26消費税改正対応
//  <BDIC>  SATOH(GSOL) 2013/11/06(WED) 銀行辞書対応
//  <222>   PRIME加藤   2013/12/04(WED)	外貨債務管理対応
//	<222-1>	PRIME加藤   2013/12/17(TUE)	支払先登録リストのプロジェクトコードがプロジェクトサブの桁数でフォーマットされる
//	<222-2>	PRIME加藤   2013/12/18(WED)	登録修正権限がないときにタブにフォーカス時にEnter、Tabキーを押すと入力できるようになる
//	<222-3> PRIME加藤   2013/12/25(WED)	未使用の変数削除
//  <222-4> PRIME加藤   2013/12/06(MON)	・可変項目の出力順０は999ではなく1000に読み替える
//										・確定した可変項目IDはDBに書いていなくても変更不可とする
//										・項目IDの重複メッセージに「。」がなかった
//  <222-5> PRIME加藤   2014/01/09(THU)	・可変項目に引用符で囲んだ文字を登録するとSQLエラー
//	<222-6>	Y.Kuroda	2014/01/27(MON)	電信送金情報ﾀﾌﾞ、為替手形／送金小切手情報ﾀﾌﾞはﾌﾟﾛｼﾞｪｸﾄ別の場合は使用不可にする
//	<222-7>	Y.Kuroda	2014/01/27(MON)	電信送金情報の可変項目情報削除時にﾒｯｾｰｼﾞを表示する、項目削除を行えるのはﾃﾞﾌｫﾙﾄ項目のみとする
//	<222-8>	Y.Kuroda	2014/01/27(MON)	電信送金情報に取引先照会番号、送金目的、送金許可を追加
//										為替手形／送金小切手情報に送金目的、送金許可を追加
//	<222-9>	Y.Kuroda	2014/02/06(THU)	不正ｺｰﾄﾞでﾌｫｰｶｽを止めているとき、電信送金情報ﾀﾌﾞと為替手形／送金小切手情報ﾀﾌﾞをｸﾘｯｸすると、
//										ﾀﾌﾞが選択状態で残ってしまう点を修正
//  <GAI-2> H.KUMO      2014/04/02(WED) 外貨二次対応
//                                      ・支払可変情報マスタが未登録（データなし）、海外送金可変項目のレコードの内、初期表示の場合
//                                        ①支払先単位の可変項目情報を取得し、レコードがあればそれを表示する
//                                        ②上記①でレコードが1件も存在しなかった場合、基本項目（初期表示あり）について、項目情報を取得して表示
//                                        ③初期表示ありの可変項目は、ＩＤ・項目名・桁数の文字色を青
//                                      ・「F1 項目情報削除」は、初期表示の有無に関係なく、IDにフォーカスがある時に使用
//                                      ・印刷処理で、可変項目情報の出力される条件を、取引先マスタのデータで内容があるもののみ→内容の有無に関わらず全てのもの、に修正
//  <TXNM>  SATOH(GSOL) 2014/05/29(THU) 34.有価証券売上等名称変更
//  <#C16>  KUMO        2014/06/30(MON) 取引先コード16桁対応（デザインのみ）
//                                      ・支払先コード選択は、167に幅を広げ、長体をかけて修正
//                                      また、それにともない、右のコンポーネントも右に移動
//                                      ・MemDataの取引先コードのSizeを10→16に変更
//  <223> 	SATOH(GSOL) 2014/07/14(MON) <221>対応時の不具合修正
//  <224> 	SATOH(GSOL) 2014/07/15(TUE) 相殺情報の取引先補助が得意先/仕入先採用の場合に印刷されなかった点を修正
//  <SCA> 	SATOH(GSOL) 2014/08/20(WED) 同一コード別支店振込先対応
//  <225>   H.OKAWA     2016/10/04(TUE) 支払情報ファイル出力不具合対応
//                                      相殺情報補助名称のSizeを14から20に修正(デザインのみ修正)
//  <226>   OOTAKE(LEAD)2016/11/28(MON) 支払情報の振込情報と期日指定振込情報において、銀行情報登録より銀行情報をセットした後
//                                      次項目へ移動すると支店名と支店名カナが消えてしまう不具合修正
//  <227>   OOTAKE(LEAD)2017/02/10(FRI) 大量の名寄せのデータが存在する場合に終了時に時間がかかる不具合修正
//  <#NGEN>	S.Komuro(Admax)	2019/01/16(FRI) 新元号対応
//  <#TAX10>S.Komuro(Admax)	2019/04/22(MON) R01消費税改正対応
//=============================================================================
{$DEFINE TaxRateInfo_JNT}	// <#TAX10>
{$DEFINE PayCommon_JNT}		// <#TAX10>
unit JNTCRP004006u;

interface

uses
  Windows, Messages, SysUtils, Classes, VCL.Graphics, VCL.Controls, VCL.Forms, VCL.Dialogs,
  Buttons, VCL.ExtCtrls, MJSSPFunctionBar, ComCtrls,
  MJSPageControl, VCL.ImgList, VCL.StdCtrls, MJSComboBox, MJSPanel, dxGrClms, dxTL,
  dxDBGrid, dxCntner, MJSGroupBox, MJSLabel, MJSEdits, MJSFunctionBar, MJSMsgStdu,
  MJSDBModuleu, FireDAC.Comp.Client, MJSQuery, MJSDispCtrl, MJSDateCtrl, MJSPreviewIFu,
  MJSTab, Db, dxmdaset, Menus, MJSCheckBox, MJSBitBtn, ppPrnabl, ppClass, CMNExpFuncU,
  ppCtrls, ppModule, daDatMod, ppDB, ppBands, ppCache, ppDBPipe, ppComm, MJSCommonu, CommCtrl,
  ppRelatv, ppProd, ppReport, MjsPrnDlgu, MjsPrnSupportu, ppVar, ToolWin,
  MjsCommon2u,
  MASPCBSwkAddDlgu,                             // <194> ADD
  Inifiles,                                     // <197> ADD
  MLBplLoaderU,                                 // <LPH> ADD
  MJSKeyDataState,		                        // <KDS> ADD
  SeriesCheckU,                                 // <211> ADD
  JNTSelCorpSys,JNTExPGlobal, JNTPDlg,{<PRN>}

    JNTCRP0040061u,
    JNTCRP0040062u,
    JNTCRP0040063u,
    JNTCRP0040064u,                                                             // <149> 2006/10/11 H.Kawato Add 詳細情報設定
    JNTCRP0040069u,
    JNTCRP004006BankU,   // <198>
//    MasMailEntu,
    QuickRpt, Qrctrls,
    JNTCommonu,
    JNTAuthorityu,       // <AUT> ADD
    JNTMasComu,
    JNTMasWndIFu,
    JNTMasTreee2Dlgu,

    MasDateCtrl,		 // <#NGEN>
    MJSMemo, ActnList,
    MJSSpeedButton,JNTFuncU, MJSScrollBox;

{$include JNTConst.inc}
const
	WM_DISCONTINUE				= WM_APP + 1;
	WM_CHANGESCREENCONDITION	= WM_APP + 2;

{$include JNTPayProgRendoH.inc}                                                 // <128> 2006/04/20 H.Kawato Add 進捗連動対応
{$include JNTPayProgRendoGH.inc}												// <222> ADD

type
{$include JNTSelPrtIF.inc}                                                      // <PRN>
{$I PAYCommon_H.inc}                                                            // <#TAX10> ADD

  // <PRN>
  TPrintAppEntry = function
  (AOwner       :   TComponent;
   pRec		    :   Pointer;
   Mode		    :   Integer;
   PrtParam	    :   rcPrtParam;
   var ArHdl    :   array of Pointer): Integer;


	AdoptInfo		= Record	nMasterDivision	 : Integer;                     // ﾏｽﾀ区分
								nAdoption		 : Integer;                     // 採用区分
								nCodeDigit		 : Integer;                     // ｺｰﾄﾞ桁数
								nCodeAttribute	 : Integer;                     // ｺｰﾄﾞ属性
								strDescription	 : String;                      // 名称
	end;

	CheckItemRec	= Record	nFieldID		 : Integer;                     // ﾌｨｰﾙﾄﾞID
								fNoCheck		 : Boolean;
								fChangeData		 : Boolean;
	end;

	PCheckItemRec	= ^CheckItemRec;

	CodeAttribute	= Record	nMasterDivision	 : Integer;
								nDigit			 : Integer;
								nAttribute		 : Integer;
								nClassCode		 : Integer;                     // 部門分類ｺｰﾄﾞ(部門時のみ)
  								nPartKbn		 : Integer;                     // 工種管理区分         // <150> 2006/11/02 H.Kawato Add
                                nPrjNCode		 : Extended;                    // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ     // <150> 2006/11/02 H.Kawato Add
                                nUse             : Integer;                     // 採用区分             // <158> 2007/02/13 H.Kawato Add
								strDescription	 : String;
								fEnabled		 : Boolean;
	end;

	MasterData		= Record	nSumDivision	 : Integer;                     // 実在/合計区分
								strHojCode		 : String;                      // 補助外部ｺｰﾄﾞ
								nNCODE  		 : Extended;                    // 内部ｺｰﾄﾞ
								strAssociation	 : String;                      // 連想
								strName			 : String;                      // 正式名称
								strNameSimple	 : String;                      // 簡略名称
								fDetails		 : Boolean;                     // 詳細更新区分
	end;

	PayInfoData		= Record	nAccountCode	 : Integer;                     // 依頼口座ｺｰﾄﾞ
								nBankCode		 : Integer;                     // 全銀協銀行ｺｰﾄﾞ
								nBranchCode		 : Integer;                     // 全銀協支店ｺｰﾄﾞ
								nDepDivision	 : Integer;                     // 預金種別
								strAccountNo	 : String;                      // 口座番号
								strAccountName	 : String;                      // 依頼口座名称
								strBankName		 : String;                      // 全銀協銀行名称
								strBranchName	 : String;                      // 全銀協支店名称
								strBankNameKana	 : String;                      // 全銀協銀行名称(ｶﾅ)
								strBranchNameKana: String;                      // 全銀協支店名称(ｶﾅ)
	end;

	PurposeFlags	= Record	fChangeDetails	 : Boolean;                     // 詳細変更
								fHojCodeDetail	 : Boolean;                     // 取引先ｺｰﾄﾞ(詳細)
								fOffsetSeqNo	 : Boolean;                     // 相殺情報 相殺№
	end;

	TreeViewRec		= Record	nItemDivision	 : Byte;
								strHojCode		 : String;
								nNCODE		     : Extended;
								strDescription	 : String;
	end;

	PTreeViewRec	= ^TreeViewRec;

    // ﾌｧﾝｸｼｮﾝ制御用
    urFncInfo = record
        Caption: array[0..7] of String;						                    //社員Noﾌｧﾝｸｼｮﾝ
        Action:  array[0..7] of TAction;
        Enabled: array[0..7] of Boolean;                                        // <165> Add
    end;

// <210> ADD-STR
    // 共通部門、非課税部門
    urCommonBmn = record
        NCode   : Currency;                                                     // 内部コード
        BunCode : Integer;                                                      // 部門区分
    end;
// <210> ADD-END

// <222> ADD start
	TGaiPayKbn = record		// 外貨の標準支払方法Item
    	iKbn	: Integer;	// DB上の区分
        iDspKbn	: Integer;	// 画面に表示する区分
        strDsp	: String;	// 表示名称
    end;
// <222> ADD end

{$include ActionInterface.inc}                                                  // ｱｸｼｮﾝｲﾝﾀｰﾌｪｲｽの追加
{$include JNTMASWND_ColorDef.inc}
{$include JNTMASFUSENBIKODLGIFH.inc}
{$include JNTMasExceptIFI.inc}			                                        // 排他制御		//<#3>
{$include JNTMasExceptIFH.inc}			                                        // 排他制御		//<#3>
{$include JNTCRPSyncMasterH.inc}                                                // <Rel> ﾏｽﾀ同期共通ﾍｯﾀﾞ部
{$I MASTaxRateInfoH.inc}                                                        // 消費税情報 <TX26> ADD

  TJNTCRP004006f = class(TForm)
    CmnStatusBar: TStatusBar;
    CmnTreeView: TTreeView;
    CmnSplitter: TSplitter;
    CmnPanelClientStandard: TMPanel;
    CmnTreeViewImage: TImageList;
    CmnPanelClientDetail: TMPanel;
    CmnScrollBoxInformation: TScrollBox;
    CmnPanelButtons: TMPanel;
    CmnPanelInformations: TMPanel;
    CmnTabInformations: TMTab;
    CmnPanelInformation06: TMPanel;
    CmnLabelAddressGroupTitle: TMLabel;
    CmnLabelZipCode: TMLabel;
    CmnEdit06006Address: TMTxtEdit;
    CmnEdit06007Address: TMTxtEdit;
    CmnEdit06008TelephoneNo: TMTxtEdit;
    CmnEdit06009PostName: TMTxtEdit;
    CmnEdit06010ChargeName: TMTxtEdit;
    CmnLabelTelephoneNo: TMLabel;
    CmnLabelPostName: TMLabel;
    CmnLabelClassCode: TMLabel;
    CmnLabelChargeName: TMLabel;
    CmnPanelInformation01: TMPanel;
    CmnLabelDecDivision: TMLabel;
    CmnPanelInformation07: TMPanel;
    CmnEdit01001DecDivision: TMNumEdit;
    CmnLabel01001DecDivisionDesc: TMPanel;
    CmnLabelFundCodeDeb: TMLabel;
    CmnLabelFundCodeCre: TMLabel;
    CmnEdit07001FundCode: TMNumEdit;
    CmnEdit07002FundCode: TMNumEdit;
    CmnEdit06004ZipCodeUpper: TMNumEdit;
    MLabel37: TMLabel;
    MLabel38: TMLabel;
    CmnEdit07003ClosingDay: TMNumEdit;
    CmnEdit07007ClosingDay: TMNumEdit;
    MLabel39: TMLabel;
    MLabel40: TMLabel;
    CmnEdit07011ClosingDay: TMNumEdit;
    CmnLabel07012ExpectMonth: TMLabel;
    CmnComboBox07012ExpectMonth: TMComboBox;
    CmnComboBox07008ExpectMonth: TMComboBox;
    CmnComboBox07004ExpectMonth: TMComboBox;
    CmnLabel07004ExpectMonth: TMLabel;
    CmnLabel07008ExpectMonth: TMLabel;
    CmnLabel07013ExpectDay: TMLabel;
    CmnLabel07009ExpectDay: TMLabel;
    CmnLabel07005ExpectDay: TMLabel;
    CmnEdit07005ExpectDay: TMNumEdit;
    CmnEdit07009ExpectDay: TMNumEdit;
    CmnEdit07013ExpectDay: TMNumEdit;
    CmnLabel07014HolDivision: TMLabel;
    CmnLabel07010HolDivision: TMLabel;
    CmnLabel07006HolDivision: TMLabel;
    CmnComboBox07006HolDivision: TMComboBox;
    CmnComboBox07010HolDivision: TMComboBox;
    CmnComboBox07014HolDivision: TMComboBox;
    CmnButtonUpdate: TMBitBtn;
    CmnButtonCancel: TMBitBtn;
    DtlCs1LabelZipCodeTitleAddition: TMLabel;
    CmnEdit06005ZipCodeLower: TMNumEdit;
    CmnEdit06001ClassCode: TMNumEdit;
    CmnLabel06001ClassCodeDesc: TMLabel;
    CmnLabelAddress: TMLabel;
    CmnLabel06013TaxGroupTitle: TMLabel;
    CmnLabel06013TaxCode: TMLabel;
    CmnEdit06013TaxCode: TMNumEdit;
    CmnLabel06014TaxRateDesc: TMLabel;
    CmnEdit06014TaxRate: TMNumEdit;
    CmnLabel06014TaxRate: TMLabel;
    CmnLabel06015TaxGroupTitle: TMLabel;
    CmnLabel06015TaxCode: TMLabel;
    CmnEdit06015TaxCode: TMNumEdit;
    CmnLabel06016TaxRateDesc: TMLabel;
    CmnEdit06016TaxRate: TMNumEdit;
    CmnLabel06016TaxRate: TMLabel;
    CmnPanelInformation03: TMPanel;
    MLabel3: TMLabel;
    CmnLabelBankCode: TMLabel;
    CmnLabelTranslationName02: TMLabel;
    CmnLabelDepDivision02: TMLabel;
    CmnLabelAccountCode02: TMLabel;
    CmnLabel03001AccountCodeDesc: TMLabel;
    CmnLabel03009DepDivisionDesc: TMLabel;
    CmnLabelBankName02: TMLabel;
    CmnLabelAccountNo02: TMLabel;
    CmnEdit03002BankCode: TMNumEdit;
    CmnEdit03003BranchCode: TMNumEdit;
    CmnEdit03001AccountCode: TMNumEdit;
    CmnEdit03009DepDivision: TMNumEdit;
    CmnLabelBranchName02: TMLabel;
    CmnEdit03008TranslationName: TMTxtEdit;
    CmnEdit03010AccountNo: TMTxtEdit;
    CmnEdit03012VisitorCode: TMTxtEdit;
    CmnEdit03013VisitorCode: TMTxtEdit;
    CmnLabelVisitorCode02: TMLabel;
    CmnEdit03014EDIInfo: TMTxtEdit;
    CmnLabelEDIInfo02: TMLabel;
    CmnLabelComDivision02: TMLabel;
    CmnEdit03015ComDivision: TMNumEdit;
    CmnLabel03015ComDivisionDesc: TMLabel;
    CmnLabelComCalculation02: TMLabel;
    CmnEdit03016ComCalculation: TMNumEdit;
    CmnLabel03016ComCalculationDesc: TMLabel;
    CmnLabelPayDivision02: TMLabel;
    CmnEdit03017PayDivision: TMNumEdit;
    CmnLabel03017PayDivisionDesc: TMLabel;
    CmnLabelPaySight02: TMLabel;
    CmnEdit03018PaySight: TMNumEdit;
    CmnLabelPaySight02Unit: TMLabel;
    CmnPanelInformation04: TMPanel;
    MLabel23: TMLabel;
    CmnLabelAccountCode03: TMLabel;
    CmnLabelPosDivision03: TMLabel;
    CmnLabel04001AccountCodeDesc: TMLabel;
    CmnLabel04004PosDivisionDesc: TMLabel;
    CmnEdit04001AccountCode: TMNumEdit;
    CmnEdit04004PosDivision: TMNumEdit;
    CmnLabelPaySight03: TMLabel;
    CmnEdit04002PaySight: TMNumEdit;
    CmnLabelPaySight03Unit: TMLabel;
    CmnLabelDivSheets03: TMLabel;
    CmnEdit04003DivSheets: TMNumEdit;
    CmnLabelDivSheets03Unit: TMLabel;
    CmnLabelBurDivision03: TMLabel;
    CmnEdit04005BurDivision: TMNumEdit;
    CmnLabel04005BurDivisionDesc: TMLabel;
    CmnPanelInformation05: TMPanel;
    MPanel7: TMPanel;
    CmnGridOffset: TdxDBGrid;
    CmnGridOffsetColumnSeqNo: TdxDBGridColumn;
    CmnGridOffsetColumnKmkDesc: TdxDBGridColumn;
    CmnGridOffsetColumnTaxRateDesc: TdxDBGridColumn;
    CmnGridOffsetColumnSubDesc01: TdxDBGridColumn;
    CmnGridOffsetColumnSubDesc02: TdxDBGridColumn;
    CmnGridOffsetColumnSubDesc03: TdxDBGridColumn;
    CmnGridOffsetColumnTaxCode: TdxDBGridLookupColumn;
    CmnGridOffsetColumnOffsetPrice: TdxDBGridColumn;
    CmnPanelInformation02: TMPanel;
    MLabel42: TMLabel;
    CmnLabelBankCode01: TMLabel;
    CmnLabelTranslationName01: TMLabel;
    CmnLabelDepDivision01: TMLabel;
    CmnLabelAccountCode01: TMLabel;
    CmnLabel02001AccountCodeDesc: TMLabel;
    CmnLabel02009DepDivisionDesc: TMLabel;
    CmnLabelBankName01: TMLabel;
    CmnLabelAccountNo01: TMLabel;
    CmnLabelBranchName01: TMLabel;
    CmnLabelVisitorCode01: TMLabel;
    CmnLabelEDIInfo01: TMLabel;
    CmnLabelComDivision01: TMLabel;
    CmnLabel02015ComDivisionDesc: TMLabel;
    CmnLabelComCalculation01: TMLabel;
    CmnLabel02016ComCalculationDesc: TMLabel;
    CmnLabelPayDivision01: TMLabel;
    CmnLabel02017PayDivisionDesc: TMLabel;
    CmnEdit02010AccountNo: TMTxtEdit;
    CmnEdit02002BankCode: TMNumEdit;
    CmnEdit02003BranchCode: TMNumEdit;
    CmnEdit02001AccountCode: TMNumEdit;
    CmnEdit02009DepDivision: TMNumEdit;
    CmnEdit02008TranslationName: TMTxtEdit;
    CmnEdit02012VisitorCode: TMTxtEdit;
    CmnEdit02013VisitorCode: TMTxtEdit;
    CmnEdit02014EDIInfo: TMTxtEdit;
    CmnEdit02015ComDivision: TMNumEdit;
    CmnEdit02016ComCalculation: TMNumEdit;
    CmnEdit02017PayDivision: TMNumEdit;
    CmnButtonPagePrevious: TMBitBtn;
    CmnButtonPageNext: TMBitBtn;
    CmnPanelGridStandardExist: TMPanel;
    CmnGridStandardExist: TdxDBGrid;
    CmnGridStandardExistTag: TdxDBGridGraphicColumn;
    CmnGridStandardExistCode: TdxDBGridMaskColumn;
    CmnGridStandardExistAssociation: TdxDBGridColumn;
    CmnGridStandardExistName: TdxDBGridColumn;
    CmnGridStandardExistNameSimple: TdxDBGridColumn;
    CmnGridStandardExistComment: TdxDBGridColumn;
    CmnPopupMenuMenuToolbar: TPopupMenu;
    CmnPopupMenuToolbarTag01: TMenuItem;
    CmnPopupMenuToolbarTag02: TMenuItem;
    CmnPopupMenuToolbarTag03: TMenuItem;
    CmnPopupMenuToolbarTag04: TMenuItem;
    CmnToolbarImage: TImageList;
    CmnDataSourceStandardExist: TDataSource;
    CmnMemDataStandardExist: TdxMemData;
    CmnMemDataStandardExistTag: TGraphicField;
    CmnMemDataStandardExistHojCode: TStringField;
    CmnMemDataStandardExistName: TStringField;
    CmnMemDataStandardExistNameSimple: TStringField;
    CmnMemDataStandardExistAssociation: TStringField;
    CmnMemDataStandardExistComment: TStringField;
    CmnPopupMenuTreeView: TPopupMenu;
    CmnPopupMenuTreeViewDetail: TMenuItem;
    CmnTreeViewPopupMenuBreak01: TMenuItem;
    CmnPopupMenuTreeViewDelete: TMenuItem;
    CmnTreeViewPopupMenuBreak03: TMenuItem;
    CmnPopupMenuTreeViewTagOff: TMenuItem;
    CmnPopupMenuTreeViewTagComment: TMenuItem;
    N1: TMenuItem;
    CmnPopupMenuTreeViewTag01: TMenuItem;
    CmnPopupMenuTreeViewTagItem01: TMenuItem;
    CmnPopupMenuTreeViewTagItem01Ex: TMenuItem;
    CmnPopupMenuTreeViewTag02: TMenuItem;
    CmnPopupMenuTreeViewTagItem02: TMenuItem;
    CmnPopupMenuTreeViewTagItem02Ex: TMenuItem;
    CmnPopupMenuTreeViewTag03: TMenuItem;
    CmnPopupMenuTreeViewTagItem03: TMenuItem;
    CmnPopupMenuTreeViewTagItem03Ex: TMenuItem;
    CmnPopupMenuTreeViewTag04: TMenuItem;
    CmnPopupMenuTreeViewTagItem04: TMenuItem;
    CmnPopupMenuTreeViewTagItem04Ex: TMenuItem;
    CmnPopupMenuGridStandard: TPopupMenu;
    CmnPopupMenuGridStandardTagOff: TMenuItem;
    CmnPopupMenuGridStandardTagComment: TMenuItem;
    N2: TMenuItem;
    CmnPopupMenuGridStandardTag01: TMenuItem;
    CmnPopupMenuGridStandardTagItem01: TMenuItem;
    CmnPopupMenuGridStandardTagItem01Ex: TMenuItem;
    CmnPopupMenuGridStandardTag02: TMenuItem;
    CmnPopupMenuGridStandardTagItem02: TMenuItem;
    CmnPopupMenuGridStandardTagItem02Ex: TMenuItem;
    CmnPopupMenuGridStandardTag03: TMenuItem;
    CmnPopupMenuGridStandardTagItem03: TMenuItem;
    CmnPopupMenuGridStandardTagItem03Ex: TMenuItem;
    CmnPopupMenuGridStandardTag04: TMenuItem;
    CmnPopupMenuGridStandardTagItem04: TMenuItem;
    CmnPopupMenuGridStandardTagItem04Ex: TMenuItem;
    CmnLabel06013TaxCodeDesc: TMLabel;
    CmnLabel06015TaxCodeDesc: TMLabel;
    CmnLabel07001FundCodeDesc: TMLabel;
    CmnLabel07002FundCodeDesc: TMLabel;
    CmnDataSourceOffset: TDataSource;
    CmnMemDataOffset: TdxMemData;
    CmnMemDataOffsetstrSubCode01: TStringField;
    CmnMemDataOffsetstrSubDesc01: TStringField;
    CmnMemDataOffsetstrKmkDesc: TStringField;
    CmnMemDataOffsetstrSubCode02: TStringField;
    CmnMemDataOffsetstrSubDesc02: TStringField;
    CmnMemDataOffsetnDivision01: TIntegerField;
    CmnMemDataOffsetnDivision02: TIntegerField;
    CmnMemDataOffsetnDivision03: TIntegerField;
    CmnMemDataOffsetstrSubCode03: TStringField;
    CmnMemDataOffsetstrSubDesc03: TStringField;
    CmnMemDataOffsetnTaxCode: TIntegerField;
    CmnMemDataOffsetnTaxRate: TIntegerField;
    CmnMemDataOffsetstrTaxRateDesc: TStringField;
    CmnMemDataOffsetnOffsetPrice: TCurrencyField;
    MPanel12: TMPanel;
    MPanel5: TMPanel;
    MPanel9: TMPanel;
    MPanel10: TMPanel;
    MPanel11: TMPanel;
    MPanel2: TMPanel;
    CmnEdit05002KmkCode: TMNumEdit;
    CmnEdit05003HojCodeNumeric: TMNumEdit;
    CmnEdit05004HojCodeNumeric: TMNumEdit;
    CmnEdit05005HojCodeNumeric: TMNumEdit;
    CmnEdit05002KmkCodeDesc: TMTxtEdit;
    CmnEdit05003HojCodeDesc: TMTxtEdit;
    CmnEdit05004HojCodeDesc: TMTxtEdit;
    CmnEdit05005HojCodeDesc: TMTxtEdit;
    CmnEdit05006TaxCode: TMNumEdit;
    CmnEdit05007TaxRate: TMNumEdit;
    CmnEdit05006TaxCodeDesc: TMTxtEdit;
    CmnEdit05007TaxRateDesc: TMTxtEdit;
    CmnEdit05008OffsetPrice: TMNumEdit;
    CmnEdit05001SeqNo: TMNumEdit;
    CmnEdit05003HojCodeFree: TMTxtEdit;
    CmnEdit05004HojCodeFree: TMTxtEdit;
    CmnEdit05005HojCodeFree: TMTxtEdit;
    CmnMemDataOffsetnSeqNo: TIntegerField;
    CmnTabDetail: TMTab;
    CmnTabStandard: TMTab;
    CmnPanelGridStandardTotal: TMPanel;
    CmnGridStandardTotal: TdxDBGrid;
    CmnGridStandardTotalTag: TdxDBGridGraphicColumn;
    CmnGridStandardTotalCode: TdxDBGridMaskColumn;
    CmnGridStandardTotalAssociation: TdxDBGridColumn;
    CmnGridStandardTotalName: TdxDBGridColumn;
    CmnGridStandardTotalNameSimple: TdxDBGridColumn;
    CmnGridStandardTotalComment: TdxDBGridColumn;
    CmnDataSourceStandardTotal: TDataSource;
    CmnMemDataStandardTotal: TdxMemData;
    CmnMemDataStandardTotalTag: TGraphicField;
    CmnMemDataStandardTotalHojCode: TStringField;
    CmnMemDataStandardTotalName: TStringField;
    CmnMemDataStandardTotalNameSimple: TStringField;
    CmnMemDataStandardTotalAssociation: TStringField;
    CmnMemDataStandardTotalComment: TStringField;
    MPanel13: TMPanel;
    CmnPopupMenuTreeViewErase: TMenuItem;
    CmnPanelPaymentBase: TMPanel;
    CmnPanelPayment: TMPanel;
    CmnLabel01002PaymentColumnDivisionDesc: TMLabel;
    CmnLabel01007PaymentColumnDivisionDesc: TMLabel;
    CmnLabel01012PaymentColumnDivisionDesc: TMLabel;
    CmnLabel01017PaymentColumnDivisionDesc: TMLabel;
    CmnLabel01022PaymentColumnDivisionDesc: TMLabel;
    QRShape2: TQRShape;
    MPanel55: TMPanel;
    MPanel33: TMPanel;
    MPanel34: TMPanel;
    MPanel35: TMPanel;
    MPanel36: TMPanel;
    CmnEdit01002PaymentColumnDivision: TMNumEdit;
    CmnEdit01007PaymentColumnDivision: TMNumEdit;
    CmnEdit01012PaymentColumnDivision: TMNumEdit;
    CmnEdit01017PaymentColumnDivision: TMNumEdit;
    CmnEdit01022PaymentColumnDivision: TMNumEdit;
    MPanel63: TMPanel;
    CmnEdit01003PaymentColumnBasedValue: TMNumEdit;
    CmnEdit01008PaymentColumnBasedValue: TMNumEdit;
    CmnEdit01013PaymentColumnBasedValue: TMNumEdit;
    CmnEdit01018PaymentColumnBasedValue: TMNumEdit;
    CmnEdit01023PaymentColumnBasedValue: TMNumEdit;
    MPanel15: TMPanel;
    CmnLabelPaymentColumnBasedValue01Unit: TMLabel;
    CmnLabelPaymentColumnBasedValue02Unit: TMLabel;
    CmnLabelPaymentColumnBasedValue03Unit: TMLabel;
    CmnLabelPaymentColumnBasedValue04Unit: TMLabel;
    CmnLabelPaymentColumnBasedValue05Unit: TMLabel;
    CmnEdit01004PaymentColumnMinimumPrice: TMNumEdit;
    CmnEdit01009PaymentColumnMinimumPrice: TMNumEdit;
    CmnEdit01014PaymentColumnMinimumPrice: TMNumEdit;
    CmnEdit01019PaymentColumnMinimumPrice: TMNumEdit;
    CmnEdit01024PaymentColumnMinimumPrice: TMNumEdit;
    MPanel17: TMPanel;
    CmnEdit01005PaymentColumnFractionPrice: TMNumEdit;
    CmnEdit01010PaymentColumnFractionPrice: TMNumEdit;
    CmnEdit01015PaymentColumnFractionPrice: TMNumEdit;
    CmnEdit01020PaymentColumnFractionPrice: TMNumEdit;
    CmnEdit01025PaymentColumnFractionPrice: TMNumEdit;
    MPanel19: TMPanel;
    CmnEdit01006PaymentColumnFraction: TMNumEdit;
    CmnLabel01006PaymentColumnFractionDesc: TMLabel;
    CmnEdit01011PaymentColumnFraction: TMNumEdit;
    CmnLabel01011PaymentColumnFractionDesc: TMLabel;
    CmnEdit01016PaymentColumnFraction: TMNumEdit;
    CmnLabel01016PaymentColumnFractionDesc: TMLabel;
    CmnEdit01021PaymentColumnFraction: TMNumEdit;
    CmnLabel01021PaymentColumnFractionDesc: TMLabel;
    CmnEdit01026PaymentColumnFraction: TMNumEdit;
    CmnLabel01026PaymentColumnFractionDesc: TMLabel;
    QRShape1: TQRShape;
    QRShape3: TQRShape;
    QRShape4: TQRShape;
    QRShape5: TQRShape;
    CmnLabelFBDivision01: TMLabel;
    CmnEdit02011FBDivision: TMNumEdit;
    CmnLabel02011FBDivisionDesc: TMLabel;
    CmnLabelFBDivision02: TMLabel;
    CmnEdit03011FBDivision: TMNumEdit;
    CmnLabel03011FBDivisionDesc: TMLabel;
    CmnEdit06002HojCodeFree: TMTxtEdit;
    CmnLabel06002HojCode: TMLabel;
    CmnEdit06002HojCodeNumeric: TMNumEdit;
    CmnLabel06002HojCodeDesc: TMLabel;
    CmnDataSourcePrintExtStandard: TDataSource;
    CmnMemDataPrintExtStandard: TdxMemData;
    CmnMemDataPrintExtStandardgrTag: TGraphicField;
    CmnMemDataPrintExtStandardHojCode: TStringField;
    CmnMemDataPrintExtStandardstrName: TStringField;
    CmnMemDataPrintExtStandardstrNameSimple: TStringField;
    CmnMemDataPrintExtStandardstrAssociation: TStringField;
    CmnMemDataPrintExtStandardstrCustomerDesc: TStringField;
    CmnMemDataPrintExtStandardstrSupplierDesc: TStringField;
    CmnMemDataPrintExtStandardstrClassDesc: TStringField;
    CmnMemDataPrintExtStandardFundCodeCustDeb: TIntegerField;
    CmnMemDataPrintExtStandardFundCodeCustCre: TIntegerField;
    CmnMemDataPrintExtStandardFundCodeCustDebDesc: TStringField;
    CmnMemDataPrintExtStandardFundCodeCustCreDesc: TStringField;
    CmnMemDataPrintExtStandardFundCodeSuppDeb: TIntegerField;
    CmnMemDataPrintExtStandardFundCodeSuppCre: TIntegerField;
    CmnMemDataPrintExtStandardFundCodeSuppDebDesc: TStringField;
    CmnMemDataPrintExtStandardFundCodeSuppCreDesc: TStringField;
    CmnMemDataPrintExtStandardnTaxCodeSales: TIntegerField;
    CmnMemDataPrintExtStandardnTaxCodeStock: TIntegerField;
    CmnMemDataPrintExtStandardTaxCodeSalesDesc: TStringField;
    CmnMemDataPrintExtStandardTaxCodeStockDesc: TStringField;
    CmnMemDataPrintExtStandarddtAppDateStart: TDateField;
    CmnMemDataPrintExtStandarddtAppDateEnd: TDateField;
    CmnMemDataPrintExtStandarddtUpdateDate: TDateTimeField;
    CmnPipelinePrintExtStandard: TppDBPipeline;
    CmnDataSourcePrintTtlStandard: TDataSource;
    CmnMemDataPrintTtlStandard: TdxMemData;
    GraphicField1: TGraphicField;
    StringField5: TStringField;
    StringField6: TStringField;
    StringField7: TStringField;
    StringField8: TStringField;
    CmnMemDataPrintTtlStandardstrAdoptDesc: TStringField;
    CmnMemDataPrintTtlStandardstrAddressUpper: TStringField;
    CmnMemDataPrintTtlStandardnZipCodeUpper: TIntegerField;
    CmnMemDataPrintTtlStandardnZipCodeLower: TIntegerField;
    DateTimeField1: TDateTimeField;
    CmnPipelinePrintTtlStandard: TppDBPipeline;
    CmnReportExtStandard: TppReport;
    ppHeaderBand3: TppHeaderBand;
    ppLine50: TppLine;
    ppLine52: TppLine;
    ppLabel52: TppLabel;
    ppLabel53: TppLabel;
    ppLabel54: TppLabel;
    ppLabel55: TppLabel;
    ppLabel56: TppLabel;
    ppLabel57: TppLabel;
    CmnReportExtStandardLabelCorpCode: TppLabel;
    CmnReportExtStandardLabelCorpName: TppLabel;
    CmnReportExtStandardLabelTitle: TppLabel;
    CmnReportExtStandardLineTitle: TppLine;
    CmnReportExtStandardSysVarDate: TppSystemVariable;
    ppLabel62: TppLabel;
    ppLabel63: TppLabel;
    ppLabel64: TppLabel;
    ppLabel87: TppLabel;
    ppLine49: TppLine;
    ppLine51: TppLine;
    ppLine53: TppLine;
    ppLine137: TppLine;
    ppLine54: TppLine;
    ppLine55: TppLine;
    ppLine68: TppLine;
    ppLabel50: TppLabel;
    ppLine69: TppLine;
    ppLabel51: TppLabel;
    ppLabel88: TppLabel;
    ppLine24: TppLine;
    ppLine124: TppLine;
    ppLine125: TppLine;
    ppLine126: TppLine;
    ppLine127: TppLine;
    CmnDetailBandExtStandard: TppDetailBand;
    ppLine57: TppLine;
    CmnReportExtStandardDBTextHojCode: TppDBText;
    ppDBText95: TppDBText;
    ppDBText96: TppDBText;
    ppDBText97: TppDBText;
    ppDBText98: TppDBText;
    ppDBText99: TppDBText;
    ppLine58: TppLine;
    ppLine59: TppLine;
    ppLine60: TppLine;
    ppLine61: TppLine;
    ppLine62: TppLine;
    ppLine63: TppLine;
    ppLine64: TppLine;
    ppDBText102: TppDBText;
    ppDBText103: TppDBText;
    ppDBText104: TppDBText;
    ppDBText106: TppDBText;
    ppDBText107: TppDBText;
    ppLine67: TppLine;
    ppLine70: TppLine;
    ppLine72: TppLine;
    CmnLineReportExtStandardDetailBand: TppLine;
    ppDBText93: TppDBText;
    ppDBText100: TppDBText;
    ppDBText101: TppDBText;
    ppDBText130: TppDBText;
    ppDBText131: TppDBText;
    ppDBText132: TppDBText;
    ppLine65: TppLine;
    ppLine66: TppLine;
    ppDBText105: TppDBText;
    ppDBText133: TppDBText;
    ppDBImage1: TppDBImage;
    ppFooterBand3: TppFooterBand;
    CmnReportExtStandardSysVarPage: TppSystemVariable;
    CmnReportExtStandardAccOffice: TppLabel;
    CmnReportTtlStandard: TppReport;
    ppHeaderBand7: TppHeaderBand;
    ppLine71: TppLine;
    ppLine138: TppLine;
    ppLabel89: TppLabel;
    ppLabel90: TppLabel;
    ppLabel95: TppLabel;
    ppLabel96: TppLabel;
    ppLabel97: TppLabel;
    CmnReportTtlStandardLabelCorpCode: TppLabel;
    CmnReportTtlStandardLabelCorpName: TppLabel;
    CmnReportTtlStandardLineTitle: TppLine;
    CmnReportTtlStandardSysVarDate: TppSystemVariable;
    ppLabel103: TppLabel;
    ppLine141: TppLine;
    ppLine142: TppLine;
    ppLine144: TppLine;
    ppLine148: TppLine;
    ppLabel108: TppLabel;
    CmnReportTtlStandardLabelTitle: TppLabel;
    ppLine120: TppLine;
    ppLine121: TppLine;
    ppLine122: TppLine;
    ppLine123: TppLine;
    CmnDetailBandTtlStandard: TppDetailBand;
    ppLine149: TppLine;
    CmnReportTtlStandardDBTextHojCode: TppDBText;
    ppDBText139: TppDBText;
    ppDBText140: TppDBText;
    ppDBText141: TppDBText;
    ppDBText142: TppDBText;
    ppLine150: TppLine;
    ppLine151: TppLine;
    ppLine152: TppLine;
    ppLine153: TppLine;
    ppLine154: TppLine;
    ppLine156: TppLine;
    ppDBText146: TppDBText;
    ppLine157: TppLine;
    ppDBText150: TppDBText;
    ppDBText151: TppDBText;
    ppLine161: TppLine;
    CmnReportTtlStandardDBTextUpdateDate: TppDBText;
    ppLabel98: TppLabel;
    ppLabel109: TppLabel;
    CmnLineReportTtlStandardDetailBand: TppLine;
    ppFooterBand7: TppFooterBand;
    CmnReportTtlStandardSysVarPage: TppSystemVariable;
    CmnReportTtlStandardAccOffice: TppLabel;
    CmnDataSourcePrintDetail: TDataSource;
    CmnMemDataPrintDetail: TdxMemData;
    GraphicField2: TGraphicField;
    StringField1: TStringField;
    StringField2: TStringField;
    StringField3: TStringField;
    StringField4: TStringField;
    CmnPipelinePrintDetail: TppDBPipeline;
    CmnReportDetail: TppReport;
    CmnDataSourcePrintSystem: TDataSource;
    CmnMemDataPrintSystem: TdxMemData;
    StringField11: TStringField;
    StringField13: TStringField;
    StringField14: TStringField;
    StringField15: TStringField;
    CmnPipelinePrintSystem: TppDBPipeline;
    CmnReportSystem: TppReport;
    ppTitleBand4: TppTitleBand;
    ppHeaderBand4: TppHeaderBand;
    CmnReportSystemSysVarDate: TppSystemVariable;
    CmnReportSystemLabelCorpCode: TppLabel;
    CmnReportSystemLabelCorpName: TppLabel;
    ppColumnHeaderBand1: TppColumnHeaderBand;
    ppLineT_Top: TppLine;
    ppLineT_Bottom: TppLine;
    ppLine26: TppLine;
    ppLine27: TppLine;
    ppLabel102: TppLabel;
    ppLabel85: TppLabel;
    ppLineT_Right: TppLine;
    CmnDetailBandSystem: TppDetailBand;
    CmnLineReportSystemDetailBandParent: TppLine;
    ppLine28: TppLine;
    CmnReportSystemDBTextHojCode: TppDBText;
    ppLine77: TppLine;
    CmnReportSystemDBTextHojCodeDesc: TppDBText;
    ppLine84: TppLine;
    CmnReportSystemDBTextHojCodeParent: TppDBText;
    ppLine29: TppLine;
    ppDBText85: TppDBText;
    ppLine30: TppLine;
    ppColumnFooterBand1: TppColumnFooterBand;
    ppFooterBand4: TppFooterBand;
    CmnReportSystemSysVarPage: TppSystemVariable;
    ppGroup4: TppGroup;
    ppGroupHeaderBand4: TppGroupHeaderBand;
    ppGroupFooterBand4: TppGroupFooterBand;
    ppLabel1: TppLabel;
    ppLine23: TppLine;
    CmnMemDataPrintDetailstrDecDivisionDesc: TStringField;
    CmnMemDataPrintDetailnPaymentNo01: TIntegerField;
    CmnMemDataPrintDetailnPaymentNo02: TIntegerField;
    CmnMemDataPrintDetailnPaymentNo03: TIntegerField;
    CmnMemDataPrintDetailnPaymentNo04: TIntegerField;
    CmnMemDataPrintDetailnPaymentNo05: TIntegerField;
    CmnMemDataPrintDetailstrPaymentDesc01: TStringField;
    CmnMemDataPrintDetailstrPaymentDesc02: TStringField;
    CmnMemDataPrintDetailstrPaymentDesc03: TStringField;
    CmnMemDataPrintDetailstrPaymentDesc04: TStringField;
    CmnMemDataPrintDetailstrPaymentDesc05: TStringField;
    CmnMemDataPrintDetailPaymentBasedValue01: TCurrencyField;
    CmnMemDataPrintDetailPaymentBasedValue02: TCurrencyField;
    CmnMemDataPrintDetailPaymentBasedValue03: TCurrencyField;
    CmnMemDataPrintDetailPaymentBasedValue04: TCurrencyField;
    CmnMemDataPrintDetailPaymentBasedValue05: TCurrencyField;
    CmnMemDataPrintDetailnPaymentMinimumPrice01: TCurrencyField;
    CmnMemDataPrintDetailnPaymentMinimumPrice02: TCurrencyField;
    CmnMemDataPrintDetailnPaymentMinimumPrice03: TCurrencyField;
    CmnMemDataPrintDetailnPaymentMinimumPrice04: TCurrencyField;
    CmnMemDataPrintDetailnPaymentMinimumPrice05: TCurrencyField;
    CmnMemDataPrintDetailnPaymentFractionPrice01: TCurrencyField;
    CmnMemDataPrintDetailnPaymentFractionPrice02: TCurrencyField;
    CmnMemDataPrintDetailnPaymentFractionPrice03: TCurrencyField;
    CmnMemDataPrintDetailnPaymentFractionPrice04: TCurrencyField;
    CmnMemDataPrintDetailnPaymentFractionPrice05: TCurrencyField;
    CmnMemDataPrintDetailstrPaymentFractionDesc01: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionDesc02: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionDesc03: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionDesc04: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionDesc05: TStringField;
    CmnMemDataPrintDetailInfo01AccountCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo01AccountCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01DepositDesc01: TStringField;
    CmnMemDataPrintDetailsrInfo01AccountNo01: TStringField;
    CmnMemDataPrintDetailnInfo02AccountCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo02AccountCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo02DepositDesc01: TStringField;
    CmnMemDataPrintDetailstrInfo02AccountNo01: TStringField;
    CmnMemDataPrintDetailnInfo03AccountCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo03AccountCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo03DepositDesc: TStringField;
    CmnMemDataPrintDetailstrInfo03AccountNo: TStringField;
    CmnMemDataPrintDetailnInfo04AccountCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo04AccountCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo04DepositDesc: TStringField;
    CmnMemDataPrintDetailstrInfo04AccountNo: TStringField;
    CmnMemDataPrintDetailnInfo01BankCode: TIntegerField;
    CmnMemDataPrintDetailnInfo01BranchCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo01BankCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01BranchCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01BankCodeDescKana: TStringField;
    CmnMemDataPrintDetailstrInfo01BranchCodeDescKana: TStringField;
    CmnMemDataPrintDetailstrInfo01TranslationName: TStringField;
    CmnMemDataPrintDetailstrInfo01DepositDesc02: TStringField;
    CmnMemDataPrintDetailstrInfo01AccountNo02: TStringField;
    CmnMemDataPrintDetailstrInfo01ComDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01ComCalculationDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01PayDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01FBDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo01VisitorCode01: TStringField;
    CmnMemDataPrintDetailstrInfo01VisitorCode02: TStringField;
    CmnMemDataPrintDetailstrInfo01EDIInfo: TStringField;
    CmnMemDataPrintDetailnInfo02BankCode: TIntegerField;
    CmnMemDataPrintDetailnInfo02BranchCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo02BankCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo02BranchCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo02BankCodeDescKana: TStringField;
    CmnMemDataPrintDetailstrInfo02BranchCodeDescKana: TStringField;
    CmnMemDataPrintDetailstrInfo02TranslationName: TStringField;
    CmnMemDataPrintDetailstrInfo02DepositDesc02: TStringField;
    CmnMemDataPrintDetailstrinfo02AccountNo02: TStringField;
    CmnMemDataPrintDetailstrInfo02ComDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo02ComCalculationDesc: TStringField;
    CmnMemDataPrintDetailstrInfo02PayDivisionDesc: TStringField;
    CmnMemDataPrintDetailnInfo02PaySight: TIntegerField;
    CmnMemDataPrintDetailstrInfo02FBDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo02VisitorCode01: TStringField;
    CmnMemDataPrintDetailstrInfo02VisitorCode02: TStringField;
    CmnMemDataPrintDetailstrInfo02EDIInfo: TStringField;
    CmnMemDataPrintDetailstrInfo03PosDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo03BurDivisionDesc: TStringField;
    CmnMemDataPrintDetailnInfo03PaySight: TIntegerField;
    CmnMemDataPrintDetailnInfo03DivSheets: TIntegerField;
    CmnMemDataPrintDetailstrInfo04PosDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrInfo04BurDivisionDesc: TStringField;
    CmnMemDataPrintDetailnOffsetNo01: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo02: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo03: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo04: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo05: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo06: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo07: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo08: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo09: TSmallintField;
    CmnMemDataPrintDetailnOffsetNo10: TSmallintField;
    CmnMemDataPrintDetailnOffsetKmkCode01: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode02: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode03: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode04: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode05: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode06: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode07: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode08: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode09: TIntegerField;
    CmnMemDataPrintDetailnOffsetKmkCode10: TIntegerField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc01: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc02: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc03: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc04: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc05: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc06: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc07: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc08: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc09: TStringField;
    CmnMemDataPrintDetailstrOffsetKmkCodeDesc10: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0101: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0102: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0103: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0104: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0105: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0106: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0107: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0108: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0109: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0110: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0101: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0102: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0103: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0104: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0105: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0106: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0107: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0108: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0109: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0110: TStringField;
    CmnMemDataPrintDetailstrRecordClassDesc: TStringField;
    CmnMemDataPrintDetailstrPaymentBasedValueUnit01: TStringField;
    CmnMemDataPrintDetailstrPaymentBasedValueUnit02: TStringField;
    CmnMemDataPrintDetailstrPaymentBasedValueUnit03: TStringField;
    CmnMemDataPrintDetailstrPaymentBasedValueUnit04: TStringField;
    CmnMemDataPrintDetailstrPaymentBasedValueUnit05: TStringField;
    CmnMemDataPrintDetailstrPaymentMinimumPriceUnit01: TStringField;
    CmnMemDataPrintDetailstrPaymentMinimumPriceUnit02: TStringField;
    CmnMemDataPrintDetailstrPaymentMinimumPriceUnit03: TStringField;
    CmnMemDataPrintDetailstrPaymentMinimumPriceUnit04: TStringField;
    CmnMemDataPrintDetailstrPaymentMinimumPriceUnit05: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionPriceUnit01: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionPriceUnit02: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionPriceUnit03: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionPriceUnit04: TStringField;
    CmnMemDataPrintDetailstrPaymentFractionPriceUnit05: TStringField;
    CmnMemDataPrintDetailnDecDivision: TIntegerField;
    CmnMemDataPrintDetailstrReceiverName: TStringField;
    CmnMemDataPrintDetailnOffsetAttribute0101: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0102: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0103: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0104: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0105: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0106: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0107: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0108: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0109: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0110: TSmallintField;
    CmnMemDataPrintDetailstrOffsetHojCode0201: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0202: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0203: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0204: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0205: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0206: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0207: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0208: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0209: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0210: TStringField;
    CmnMemDataPrintDetailnOffsetAttribute0201: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0202: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0203: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0204: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0205: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0206: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0207: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0208: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0209: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0210: TSmallintField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0201: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0202: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0203: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0204: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0205: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0206: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0207: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0208: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0209: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0210: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0301: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0302: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0303: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0304: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0305: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0306: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0307: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0308: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0309: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCode0310: TStringField;
    CmnMemDataPrintDetailstrOffAttribute0301: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0302: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0303: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0304: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0305: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0306: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0307: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0308: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0309: TSmallintField;
    CmnMemDataPrintDetailnOffsetAttribute0310: TSmallintField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0301: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0302: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0303: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0304: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0305: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0306: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0307: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0308: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0309: TStringField;
    CmnMemDataPrintDetailstrOffsetHojCodeDesc0310: TStringField;
    CmnMemDataPrintDetailnOffsetTaxCode01: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode02: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode03: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode04: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode05: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode06: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode07: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode08: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode09: TIntegerField;
    CmnMemDataPrintDetailnOffsetTaxCode10: TIntegerField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc01: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc02: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc03: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc04: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc05: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc06: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc07: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc08: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc09: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRateDesc10: TStringField;
    CmnMemDataPrintDetailnOffsetPrice01: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice02: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice03: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice04: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice05: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice06: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice07: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice08: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice09: TCurrencyField;
    CmnMemDataPrintDetailnOffsetPrice10: TCurrencyField;
    ppDBText7: TppDBText;
    CmnMemDataPrintTtlStandardstrAddressLower: TStringField;
    CmnMemDataPrintDetailstrAppDate: TStringField;
    CmnLineReportSystemDetailBandChild: TppLine;
    CmnMemDataPrintSystemnLineDivision: TSmallintField;
    MLabel1: TMLabel;
    N3: TMenuItem;
    CmnPopupMenuTreeViewAllOpen: TMenuItem;
    CmnPopupMenuTreeViewAllClose: TMenuItem;
    CmnMemDataOffsetnKMKCODE: TFloatField;
    CmnEdit06011ResDivision: TMTxtEdit;
    MPanel22: TMPanel;
    CmnEdit00001HojCodeNumeric: TMNumEdit;
    CmnLabelExCode: TMLabel;
    CmnEdit00001HojCodeFree: TMTxtEdit;
    MLabel2: TMLabel;
    MLabel4: TMLabel;
    MLabel5: TMLabel;
    MLabel6: TMLabel;
    MLabel8: TMLabel;
    MLabel7: TMLabel;
    MLabel9: TMLabel;
    MLabel10: TMLabel;
    MLabel11: TMLabel;
    MLabel12: TMLabel;
    MLabel13: TMLabel;
    MLabel14: TMLabel;
    MLabel15: TMLabel;
    MLabel16: TMLabel;
    MLabel17: TMLabel;
    MLabel18: TMLabel;
    MLabel19: TMLabel;
    MLabel20: TMLabel;
    MLabel21: TMLabel;
    MLabel22: TMLabel;
    MLabel24: TMLabel;
    MLabel25: TMLabel;
    CmnPanel06013TaxSeparator: TMLabel;
    CmnPanel06015TaxSeparator: TMLabel;
    MLabel28: TMLabel;
    MLabel29: TMLabel;
    MLabel30: TMLabel;
    MLabel31: TMLabel;
    MPanel1: TMPanel;
    MSPFunctionBar: TMSPFunctionBar;
    aclExec: TActionList;
    FreeF1: TAction;
    FreeF8: TAction;
    MPanel3: TMPanel;
    CmnEdit00003Name: TMTxtEdit;
    MPanel4: TMPanel;
    CmnEdit03004BankName: TMTxtEdit;
    CmnEdit03006BranchName: TMTxtEdit;
    CmnEdit03005BankNameKana: TMTxtEdit;
    CmnEdit03007BranchNameKana: TMTxtEdit;
    MPanel6: TMPanel;
    CmnEdit02004BankName: TMTxtEdit;
    CmnEdit02005BankNameKana: TMTxtEdit;
    CmnEdit02006BranchName: TMTxtEdit;
    CmnEdit02007BranchNameKana: TMTxtEdit;
    PnlHeader: TMPanel;
    CmnLabelAppDateAddtion: TMLabel;
    CmnLabelNameSimple: TMLabel;
    CmnLabelAssociation: TMLabel;
    CmnLabelAppDate: TMLabel;
    CmnEdit00004NameSimple: TMTxtEdit;
    CmnEdit00002Association: TMTxtEdit;
    CmnEdit00006AppDateEnd: TMDateEdit;
    CmnEdit00005AppDateStart: TMDateEdit;
    CmnLabelReceiverName: TMLabel;
    CmnEdit01027ReceiverName: TMTxtEdit;
    CmnLabelPasDivision: TMLabel;
    CmnEdit01028PasDivision: TMNumEdit;
    CmnLabel01028PasDivisionDesc: TMLabel;
    MLabel26: TMLabel;
    MLabel27: TMLabel;
    MLabel33: TMLabel;
    MLabel34: TMLabel;
    Image_Fusen_Red: TImage;
    Image_Fusen_Blue: TImage;
    Image_Fusen_Green: TImage;
    Image_Fusen_Orange: TImage;
    Image_Fusen_Glay: TImage;
    CmnMemDataPrintDetailnSumKbn: TStringField;
    CmnLabelDebitDivision01: TMLabel;
    CmnEdit02018DebitDivision: TMNumEdit;
    CmnLabel02018DebitDivisionDesc: TMLabel;
    CmnLabelDebitData01: TMLabel;
    CmnEdit02019DebitData: TMNumEdit;
    CmnLabelDebitDataDesc: TMLabel;
    CmnMemDataPrintDetailnSateiDivision: TIntegerField;
    CmnMemDataPrintDetailstrSateiDivisionDesc: TStringField;
    CmnMemDataPrintDetailnAccAutoKbn: TIntegerField;
    CmnMemDataPrintDetailnAccAutoData: TIntegerField;
    CmnMemDataPrintDetailstrAccAutoDesc: TStringField;
    CmnMemDataPrintDetailstrAutoKbnDesc: TStringField;
    CmnLabelDetail: TMLabel;
    MLabel35: TMLabel;
    MLabel36: TMLabel;
    MLabel41: TMLabel;
    CmnLabelAssDivision: TMLabel;
    CmnEdit00011AssDivision: TMNumEdit;
    CmnLabel00011AssDivisionDesc: TMLabel;
    CmnPanelProjectInfo: TMPanel;
    CmnLabelKojiCode: TMLabel;
    CmnLabel00015KojiCodeDesc: TMLabel;
    CmnLabelKosyuCode: TMLabel;
    CmnLabel00017KosyuCodeDesc: TMLabel;
    CmnEdit00014KojiCodeFree: TMTxtEdit;
    CmnEdit00014KojiCodeNumeric: TMNumEdit;
    CmnEdit00016KosyuCodeFree: TMTxtEdit;
    CmnEdit00016KosyuCodeNumeric: TMNumEdit;
    CmnPanelPirPayWay: TMPanel;
    CmnLabelPriPayWayDivision: TMLabel;
    CmnEdit01030PriPayWayDivision: TMNumEdit;
    CmnLabel01030PriPayWayDivisionDesc: TMLabel;
    CmnLabelDecPtnDivision: TMLabel;
    CmnEdit00012DecPtnDivision: TMNumEdit;
    CmnLabel00012DecPtnDivisionDesc: TMLabel;
    FreeF6: TAction;
    CmnLabelPrjDetail: TMLabel;
    CmnMemDataPrintDetailstrDecPtnDivisionDesc: TStringField;
    CmnMemDataPrintDetailstrPrjHojyoName: TStringField;
    CmnMemDataPrintDetailstrPrjSubHojyoName: TStringField;
    CmnMemDataPrintDetailstrProjectCode: TStringField;
    CmnMemDataPrintDetailstrProjectCodeDesc: TStringField;
    CmnMemDataPrintDetailstrProjectSubCode: TStringField;
    CmnMemDataPrintDetailstrProjectSubCodeDesc: TStringField;
    CmnMemDataPrintDetailnPriPayWay: TIntegerField;
    CmnMemDataPrintDetailstrPriPayWayDesc: TStringField;
    CmnMemDataPrintDetailnPriPayWayNo01: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayNo02: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayNo03: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayNo04: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayNo05: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayBaseKingaku01: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseKingaku02: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseKingaku03: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseKingaku04: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseKingaku05: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseHiritu01: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseHiritu02: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseHiritu03: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseHiritu04: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayBaseHiritu05: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayHasuuKingaku01: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayHasuuKingaku02: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayHasuuKingaku03: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayHasuuKingaku04: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayHasuuKingaku05: TCurrencyField;
    CmnMemDataPrintDetailnPriPayWayHasuuHou01: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayHasuuHou02: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayHasuuHou03: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayHasuuHou04: TIntegerField;
    CmnMemDataPrintDetailnPriPayWayHasuuHou05: TIntegerField;
    CmnMemDataPrintDetailstrPriPayWayHasuuDesc01: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuDesc02: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuDesc03: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuDesc04: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuDesc05: TStringField;
    CmnMemDataPrintDetailnPriPayWaySite01: TIntegerField;
    CmnMemDataPrintDetailnPriPayWaySite02: TIntegerField;
    CmnMemDataPrintDetailnPriPayWaySite03: TIntegerField;
    CmnMemDataPrintDetailnPriPayWaySite04: TIntegerField;
    CmnMemDataPrintDetailnPriPayWaySite05: TIntegerField;
    CmnMemDataPrintDetailstrPriPayWayBaseKingakuUnit01: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKingakuUnit02: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKingakuUnit03: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKingakuUnit04: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKingakuUnit05: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseHirituUnit01: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseHirituUnit02: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseHirituUnit03: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseHirituUnit04: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseHirituUnit05: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuKingakuUnit01: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuKingakuUnit02: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuKingakuUnit03: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuKingakuUnit04: TStringField;
    CmnMemDataPrintDetailstrPriPayWayHasuuKingakuUnit05: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKinFromUnit01: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKinFromUnit02: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKinFromUnit03: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKinFromUnit04: TStringField;
    CmnMemDataPrintDetailstrPriPayWayBaseKinFromUnit05: TStringField;
    CmnMemDataPrintDetailnDecPtnDivision: TIntegerField;
    ppTitleBand3: TppTitleBand;
    ppHeaderBand1: TppHeaderBand;
    CmnReportDetailSysVarDate: TppSystemVariable;
    CmnReportDetailLabelCorpCode: TppLabel;
    CmnReportDetailLabelCorpName: TppLabel;
    CmnReportDetailLabelTitle: TppLabel;
    CmnReportDetailLineTitle: TppLine;
    ppColumnHeaderBand3: TppColumnHeaderBand;
    ppDetailBand3: TppDetailBand;
    ppLine82: TppLine;
    ppLine78: TppLine;
    ppLine3: TppLine;
    ppLine4: TppLine;
    ppLine45: TppLine;
    ppLine5: TppLine;
    ppLine86: TppLine;
    ppLine6: TppLine;
    ppLine85: TppLine;
    ppLine46: TppLine;
    ppDBText43: TppDBText;
    ppDBText46: TppDBText;
    ppDBText49: TppDBText;
    CmnReportDetailDBTextHojCode: TppDBText;
    ppLine47: TppLine;
    ppLine48: TppLine;
    ppLine7: TppLine;
    ppLine8: TppLine;
    ppLine9: TppLine;
    ppLine10: TppLine;
    ppLine11: TppLine;
    ppLabel114: TppLabel;
    ppLabel115: TppLabel;
    ppLabel116: TppLabel;
    ppDBText2: TppDBText;
    ppDBText3: TppDBText;
    ppDBText4: TppDBText;
    ppDBText5: TppDBText;
    ppLabel118: TppLabel;
    ppLabel119: TppLabel;
    ppLabel120: TppLabel;
    ppLabel121: TppLabel;
    ppLabel122: TppLabel;
    ppLabel124: TppLabel;
    ppLabel125: TppLabel;
    ppLabel126: TppLabel;
    ppLabel127: TppLabel;
    ppLabel128: TppLabel;
    ppLabel129: TppLabel;
    ppLabel130: TppLabel;
    ppLabel131: TppLabel;
    ppLabel132: TppLabel;
    ppLabel133: TppLabel;
    ppLabel134: TppLabel;
    ppLabel135: TppLabel;
    ppLabel136: TppLabel;
    ppDBText6: TppDBText;
    ppLabel137: TppLabel;
    ppLabel139: TppLabel;
    ppLabel140: TppLabel;
    ppLabel123: TppLabel;
    ppLabel202: TppLabel;
    ppLabel204: TppLabel;
    ppLabel205: TppLabel;
    ppLabel206: TppLabel;
    ppLabel207: TppLabel;
    ppLabel208: TppLabel;
    ppLabel209: TppLabel;
    ppLabel210: TppLabel;
    ppLabel211: TppLabel;
    ppLabel221: TppLabel;
    ppLabel222: TppLabel;
    ppLabel223: TppLabel;
    ppLabel224: TppLabel;
    CmnReportDetailDBTextPaymentBasedValue01: TppDBText;
    CmnReportDetailDBTextPaymentBasedValue02: TppDBText;
    CmnReportDetailDBTextPaymentBasedValue03: TppDBText;
    CmnReportDetailDBTextPaymentBasedValue04: TppDBText;
    CmnReportDetailDBTextPaymentBasedValue05: TppDBText;
    ppDBText166: TppDBText;
    ppDBText167: TppDBText;
    ppDBText168: TppDBText;
    ppDBText169: TppDBText;
    ppDBText170: TppDBText;
    ppDBText171: TppDBText;
    ppDBText172: TppDBText;
    ppDBText173: TppDBText;
    ppDBText174: TppDBText;
    ppDBText175: TppDBText;
    ppLine87: TppLine;
    ppLine93: TppLine;
    ppLine94: TppLine;
    ppDBText9: TppDBText;
    ppDBText10: TppDBText;
    ppDBText176: TppDBText;
    ppDBText177: TppDBText;
    ppDBText178: TppDBText;
    ppLabel245: TppLabel;
    ppLabel141: TppLabel;
    ppLine12: TppLine;
    ppLine13: TppLine;
    ppLine56: TppLine;
    ppLabel142: TppLabel;
    ppLabel143: TppLabel;
    ppLabel144: TppLabel;
    ppLabel145: TppLabel;
    ppLabel146: TppLabel;
    ppLabel147: TppLabel;
    ppLabel148: TppLabel;
    ppLabel149: TppLabel;
    ppLabel150: TppLabel;
    ppLabel151: TppLabel;
    ppLabel152: TppLabel;
    ppLabel153: TppLabel;
    ppLabel154: TppLabel;
    ppLabel155: TppLabel;
    ppLabel156: TppLabel;
    ppLabel157: TppLabel;
    ppLabel158: TppLabel;
    ppDBText11: TppDBText;
    ppDBText12: TppDBText;
    ppDBText110: TppDBText;
    ppDBText111: TppDBText;
    ppDBText112: TppDBText;
    ppDBText113: TppDBText;
    ppDBText114: TppDBText;
    ppDBText115: TppDBText;
    ppDBText116: TppDBText;
    ppDBText117: TppDBText;
    ppDBText118: TppDBText;
    ppDBText119: TppDBText;
    ppDBText120: TppDBText;
    ppDBText121: TppDBText;
    ppDBText122: TppDBText;
    ppDBText123: TppDBText;
    ppDBText124: TppDBText;
    ppDBText125: TppDBText;
    ppDBText127: TppDBText;
    ppDBText128: TppDBText;
    ppDBText13: TppDBText;
    ppDBText14: TppDBText;
    ppDBText15: TppDBText;
    ppDBText134: TppDBText;
    ppDBText135: TppDBText;
    ppDBText136: TppDBText;
    ppDBText137: TppDBText;
    ppDBText138: TppDBText;
    ppLabel159: TppLabel;
    ppLabel160: TppLabel;
    ppLabel161: TppLabel;
    ppLabel162: TppLabel;
    ppLabel163: TppLabel;
    ppLabel164: TppLabel;
    ppDBText16: TppDBText;
    ppDBText17: TppDBText;
    ppDBText18: TppDBText;
    ppDBText143: TppDBText;
    ppLabel165: TppLabel;
    ppLabel166: TppLabel;
    ppDBText144: TppDBText;
    ppDBText145: TppDBText;
    ppDBText19: TppDBText;
    ppDBText147: TppDBText;
    ppDBText148: TppDBText;
    ppDBText149: TppDBText;
    ppLabel167: TppLabel;
    ppLabel168: TppLabel;
    ppDBText20: TppDBText;
    ppDBText21: TppDBText;
    ppDBText152: TppDBText;
    ppLine14: TppLine;
    ppLine73: TppLine;
    ppDBText153: TppDBText;
    ppDBText154: TppDBText;
    ppDBText155: TppDBText;
    ppDBText156: TppDBText;
    ppDBText157: TppDBText;
    ppLabel169: TppLabel;
    ppDBText158: TppDBText;
    ppDBText159: TppDBText;
    ppLabel170: TppLabel;
    ppDBText160: TppDBText;
    ppDBText161: TppDBText;
    ppLabel171: TppLabel;
    ppDBText162: TppDBText;
    ppDBText163: TppDBText;
    ppLabel172: TppLabel;
    ppDBText164: TppDBText;
    ppDBText179: TppDBText;
    ppDBText181: TppDBText;
    ppLabel173: TppLabel;
    ppLabel174: TppLabel;
    ppLabel175: TppLabel;
    ppLine80: TppLine;
    ppLine81: TppLine;
    ppLine83: TppLine;
    ppLine100: TppLine;
    ppLine101: TppLine;
    ppLine103: TppLine;
    ppLine104: TppLine;
    ppLine105: TppLine;
    ppLine112: TppLine;
    ppLine113: TppLine;
    ppLine115: TppLine;
    ppLine116: TppLine;
    ppLine117: TppLine;
    ppLine118: TppLine;
    ppLine119: TppLine;
    ppLine15: TppLine;
    ppDBText180: TppDBText;
    ppDBText182: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0101: TppDBText;
    ppDBText184: TppDBText;
    ppDBText185: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0201: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0301: TppDBText;
    ppDBText188: TppDBText;
    ppDBText189: TppDBText;
    ppDBText190: TppDBText;
    ppDBText191: TppDBText;
    ppLabel176: TppLabel;
    ppDBText192: TppDBText;
    ppDBText193: TppDBText;
    ppDBText194: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0110: TppDBText;
    ppDBText196: TppDBText;
    ppDBText197: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0210: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0310: TppDBText;
    ppDBText200: TppDBText;
    ppDBText201: TppDBText;
    ppDBText202: TppDBText;
    ppDBText203: TppDBText;
    ppDBText204: TppDBText;
    ppLabel177: TppLabel;
    ppDBText205: TppDBText;
    ppDBText206: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0109: TppDBText;
    ppDBText208: TppDBText;
    ppDBText209: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0209: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0309: TppDBText;
    ppDBText212: TppDBText;
    ppDBText213: TppDBText;
    ppDBText214: TppDBText;
    ppDBText215: TppDBText;
    ppDBText216: TppDBText;
    ppLabel178: TppLabel;
    ppDBText217: TppDBText;
    ppDBText218: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0102: TppDBText;
    ppDBText220: TppDBText;
    ppDBText221: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0202: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0302: TppDBText;
    ppDBText224: TppDBText;
    ppDBText225: TppDBText;
    ppDBText226: TppDBText;
    ppDBText227: TppDBText;
    ppDBText228: TppDBText;
    ppLabel179: TppLabel;
    ppDBText229: TppDBText;
    ppDBText230: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0108: TppDBText;
    ppDBText232: TppDBText;
    ppDBText233: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0208: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0308: TppDBText;
    ppDBText236: TppDBText;
    ppDBText237: TppDBText;
    ppDBText238: TppDBText;
    ppDBText239: TppDBText;
    ppDBText240: TppDBText;
    ppLabel180: TppLabel;
    ppDBText241: TppDBText;
    ppDBText242: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0107: TppDBText;
    ppDBText244: TppDBText;
    ppDBText245: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0207: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0307: TppDBText;
    ppDBText248: TppDBText;
    ppDBText249: TppDBText;
    ppDBText250: TppDBText;
    ppDBText251: TppDBText;
    ppDBText252: TppDBText;
    ppLabel181: TppLabel;
    ppDBText253: TppDBText;
    ppDBText254: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0103: TppDBText;
    ppDBText256: TppDBText;
    ppDBText257: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0203: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0303: TppDBText;
    ppDBText260: TppDBText;
    ppDBText261: TppDBText;
    ppDBText262: TppDBText;
    ppDBText263: TppDBText;
    ppDBText264: TppDBText;
    ppLabel182: TppLabel;
    ppDBText265: TppDBText;
    ppDBText266: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0104: TppDBText;
    ppDBText268: TppDBText;
    ppDBText269: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0204: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0304: TppDBText;
    ppDBText272: TppDBText;
    ppDBText273: TppDBText;
    ppDBText274: TppDBText;
    ppDBText275: TppDBText;
    ppDBText276: TppDBText;
    ppLabel183: TppLabel;
    ppDBText277: TppDBText;
    ppDBText278: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0105: TppDBText;
    ppDBText280: TppDBText;
    ppDBText281: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0205: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0305: TppDBText;
    ppDBText284: TppDBText;
    ppDBText285: TppDBText;
    ppDBText286: TppDBText;
    ppDBText287: TppDBText;
    ppDBText288: TppDBText;
    ppLabel184: TppLabel;
    ppDBText289: TppDBText;
    ppDBText290: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0106: TppDBText;
    ppDBText292: TppDBText;
    ppDBText293: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0206: TppDBText;
    CmnReportDetailDBTextOffsetHojCode0306: TppDBText;
    ppDBText296: TppDBText;
    ppDBText297: TppDBText;
    ppDBText298: TppDBText;
    ppDBText299: TppDBText;
    ppDBText300: TppDBText;
    ppLabel185: TppLabel;
    ppDBText24: TppDBText;
    ppDBText1: TppDBText;
    ppDBText30: TppDBText;
    ppDBText31: TppDBText;
    ppDBText32: TppDBText;
    ppDBText33: TppDBText;
    ppDBText34: TppDBText;
    ppDBText35: TppDBText;
    ppDBText36: TppDBText;
    ppDBText37: TppDBText;
    ppDBText38: TppDBText;
    ppDBText39: TppDBText;
    ppDBText40: TppDBText;
    ppDBText41: TppDBText;
    ppDBText42: TppDBText;
    ppDBText44: TppDBText;
    ppDBText45: TppDBText;
    ppDBText47: TppDBText;
    ppDBText48: TppDBText;
    ppDBText50: TppDBText;
    ppDBText51: TppDBText;
    ppDBText52: TppDBText;
    ppDBText8: TppDBText;
    ppLine1: TppLine;
    ppLine2: TppLine;
    ppLine16: TppLine;
    ppLine17: TppLine;
    ppLine18: TppLine;
    ppLine19: TppLine;
    ppLine20: TppLine;
    ppLine21: TppLine;
    ppLabel2: TppLabel;
    ppLabel3: TppLabel;
    ppLabel4: TppLabel;
    ppLabel5: TppLabel;
    ppLine22: TppLine;
    ppLabel6: TppLabel;
    ppLabel7: TppLabel;
    ppLabel8: TppLabel;
    ppDBText22: TppDBText;
    ppLabel9: TppLabel;
    ppDBText23: TppDBText;
    ppDBText25: TppDBText;
    ppDBText26: TppDBText;
    ppDBText27: TppDBText;
    ppDBText28: TppDBText;
    ppDBText29: TppDBText;
    ppDBText53: TppDBText;
    ppDBText54: TppDBText;
    ppDBText55: TppDBText;
    ppDBText56: TppDBText;
    ppDBText57: TppDBText;
    ppDBText58: TppDBText;
    ppDBText59: TppDBText;
    ppDBText60: TppDBText;
    ppDBText61: TppDBText;
    ppDBText62: TppDBText;
    ppDBText63: TppDBText;
    ppDBText64: TppDBText;
    ppDBText65: TppDBText;
    ppDBText66: TppDBText;
    ppDBText67: TppDBText;
    ppLine25: TppLine;
    ppLine31: TppLine;
    ppLabel10: TppLabel;
    ppLabel11: TppLabel;
    ppLine32: TppLine;
    ppLabel12: TppLabel;
    ppDBText68: TppDBText;
    ppDBText69: TppDBText;
    ppDBText70: TppDBText;
    ppDBText71: TppDBText;
    ppDBText72: TppDBText;
    ppDBText73: TppDBText;
    ppDBText74: TppDBText;
    ppDBText75: TppDBText;
    ppDBText76: TppDBText;
    ppDBText77: TppDBText;
    ppLine33: TppLine;
    ppLabel13: TppLabel;
    ppDBText78: TppDBText;
    ppDBText79: TppDBText;
    ppDBText80: TppDBText;
    ppDBText81: TppDBText;
    ppDBText82: TppDBText;
    ppLine34: TppLine;
    ppLabel14: TppLabel;
    ppLine35: TppLine;
    ppDBText83: TppDBText;
    ppDBText84: TppDBText;
    ppDBText86: TppDBText;
    ppDBText87: TppDBText;
    ppDBText88: TppDBText;
    ppDBText89: TppDBText;
    ppDBText90: TppDBText;
    ppDBText91: TppDBText;
    ppDBText92: TppDBText;
    ppDBText94: TppDBText;
    ppDBText108: TppDBText;
    ppDBText109: TppDBText;
    ppDBText126: TppDBText;
    ppDBText129: TppDBText;
    ppDBText165: TppDBText;
    ppDBText183: TppDBText;
    ppDBText186: TppDBText;
    ppLine36: TppLine;
    ppDBText187: TppDBText;
    ppDBText195: TppDBText;
    ppLine37: TppLine;
    ppDBText198: TppDBText;
    ppDBText199: TppDBText;
    CmnReportDetailDBTextPrjCode: TppDBText;
    CmnReportDetailDBTextPrjSubCode: TppDBText;
    ppColumnFooterBand3: TppColumnFooterBand;
    ppFooterBand1: TppFooterBand;
    CmnReportDetailSysVarPage: TppSystemVariable;
    ppGroup3: TppGroup;
    ppGroupHeaderBand3: TppGroupHeaderBand;
    ppGroupFooterBand3: TppGroupFooterBand;
    ppDBText207: TppDBText;
    CmnMemDataOffsetnPrjNCode: TFloatField;
    CmnMemDataPrintDetailnPrjAdoptKbn: TIntegerField;
    CmnMemDataPrintDetailnPjSubAdoptKbn: TIntegerField;
    CmnMemDataOffsetnPrjMasterKbn: TIntegerField;
    CmnMemDataOffsetnPartKbn: TIntegerField;
    MainMenu1: TMainMenu;
    CmnPanelSateiCalc: TMPanel;
    CmnLabelSateiCalcKbn: TMLabel;
    CmnEdit00017SateiCalcKbn: TMNumEdit;
    CmnLabel00017SateiCalcKbnDesc: TMPanel;
    CmnMemDataPrintDetailnSateiCalcKbn: TIntegerField;
    CmnMemDataPrintDetailstrSateiCalcKbnDesc: TStringField;
    CmnMemDataPrintDetailnSateiCalcValue: TCurrencyField;
    CmnMemDataPrintDetailstrSateiCalcValueUnit: TStringField;
    CmnLabelSateiCalcValueUnit: TMLabel;
    CmnEdit00018SateiCalcValue: TMNumEdit;
    SPMsHist: TFDStoredProc;
    SPMsHistParent: TFDStoredProc;
    CmnMemDataOffsetdKmkNCode: TFloatField;
    CmnMemDataOffsetdSubNCode01: TFloatField;
    CmnMemDataOffsetdSubNCode02: TFloatField;
    CmnMemDataOffsetdSubNCode03: TFloatField;
    CmnMemDataPrintDetailstrPriPayWaySite01: TStringField;
    CmnMemDataPrintDetailstrPriPayWaySite02: TStringField;
    CmnMemDataPrintDetailstrPriPayWaySite03: TStringField;
    CmnMemDataPrintDetailstrPriPayWaySite04: TStringField;
    CmnMemDataPrintDetailstrPriPayWaySite05: TStringField;
    MPanelKijitsuMae: TMPanel;
    CmnLabelBeforeLimit: TMLabel;
    CmnEdit03020BeforeLimit: TMNumEdit;
    CmnLabel03020BeforeLimitDesc: TMLabel;
    CmnPanelInformation08: TMPanel;
    MLabel32: TMLabel;
    CmnLabelAccountCode04: TMLabel;
    CmnLabel08001AccountCodeDesc: TMLabel;
    CmnLabelPosDivision04: TMLabel;
    CmnLabel08002PosDivisionDesc: TMLabel;
    CmnLabel08003BurDivisionDesc: TMLabel;
    CmnLabelBurDivision04: TMLabel;
    MLabel43: TMLabel;
    MLabel44: TMLabel;
    CmnEdit08001AccountCode: TMNumEdit;
    CmnEdit08002PosDivision: TMNumEdit;
    CmnEdit08003BurDivision: TMNumEdit;
    CmnLabelErBank1: TMLabel;
    CmnEdit04007BankCode: TMNumEdit;
    CmnEdit04008BranchCode: TMNumEdit;
    CmnLabelErBank2: TMLabel;
    CmnLabelErBank3: TMLabel;
    MPanelBankNames: TMPanel;
    CmnEdit04009BankName: TMTxtEdit;
    CmnEdit04010BankNameKana: TMTxtEdit;
    CmnEdit04011BranchName: TMTxtEdit;
    CmnEdit04012BranchNameKana: TMTxtEdit;
    CmnEdit04013TranslationName: TMTxtEdit;
    CmnLabelErSyumoku: TMLabel;
    CmnEdit04014DepDivision: TMNumEdit;
    CmnLabel04014DepDivisionDesc: TMLabel;
    CmnLabelErAccNo: TMLabel;
    CmnEdit04015AccountNo: TMTxtEdit;
    CmnLabelErCom: TMLabel;
    CmnEdit04016ComDivision: TMNumEdit;
    CmnLabel04016ComDivisionDesc: TMLabel;
    CmnLabelErComCalc: TMLabel;
    CmnEdit04017ComCalculation: TMNumEdit;
    CmnLabel04017ComCalculationDesc: TMLabel;
    MLabel54: TMLabel;
    MLabel55: TMLabel;
    MPanelFrees: TMPanel;
    MScrollBoxFrees: TMScrollBox;
    CmnEdit04018Free1: TMTxtEdit;
    CmnLabelErKana: TMLabel;
    CmnLabelErFree1: TMLabel;
    CmnLabelErFree2: TMLabel;
    CmnEdit04019Free2: TMTxtEdit;
    CmnLabelErFree3: TMLabel;
    CmnEdit04020Free3: TMTxtEdit;
    CmnLabelErFree4: TMLabel;
    CmnEdit04021Free4: TMTxtEdit;
    CmnLabelErFree5: TMLabel;
    CmnEdit04022Free5: TMTxtEdit;
    CmnLabelErKbn: TMLabel;
    CmnEdit04006ERKbn: TMNumEdit;
    CmnLabel04006ERKbnDesc: TMLabel;
    CmnMemDataPrintDetailstrERKbnDesc: TStringField;
    CmnMemDataPrintDetailstrVFree1: TStringField;
    CmnMemDataPrintDetailstrVFree2: TStringField;
    CmnMemDataPrintDetailstrVFree3: TStringField;
    CmnMemDataPrintDetailstrVFree4: TStringField;
    CmnMemDataPrintDetailstrVFree5: TStringField;
    CmnMemDataPrintDetailnInfo03BankCode: TIntegerField;
    CmnMemDataPrintDetailnInfo03BranchCode: TIntegerField;
    CmnMemDataPrintDetailstrInfo03ERKbn: TStringField;
    CmnMemDataPrintDetailstrInfo03BankCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo03BranchCodeDesc: TStringField;
    CmnMemDataPrintDetailstrInfo03BankCodeDescKana: TStringField;
    CmnMemDataPrintDetailstrInfo03BranchCodeDescKana: TStringField;
    CmnMemDataPrintDetailstrInfo03TranslationName: TStringField;
    CmnMemDataPrintDetailstrInfo03DepositDesc02: TStringField;
    CmnMemDataPrintDetailstrInfo03AccountNo02: TStringField;
    CmnMemDataPrintDetailstrInfo03ComDivisionDesc: TStringField;
    MPanelKFuriBankCode: TMPanel;
    CmnLabelAccountCode022: TMLabel;
    CmnEdit03021AccountCode: TMNumEdit;
    CmnLabel03021AccountCodeDesc: TMLabel;
    CmnPanelGaikaInfo: TMPanel;
    MLabel45: TMLabel;
    CmnLabelGaikaUse: TMLabel;
    CmnEdit00019GaikaUse: TMNumEdit;
    CmnLabel00019GaikaUseDesc: TMLabel;
    CmnLabelBasePayment: TMLabel;
    CmnEdit00020BasePayment: TMNumEdit;
    CmnLabel00020BasePaymentDesc: TMLabel;
    MLabel50: TMLabel;
    CmnPanelInformation09: TMPanel;
    MLabel51: TMLabel;
    CmnLabelAccountCode0901: TMLabel;
    CmnLabel09001AccountCodeDesc: TMLabel;
    CmnLabelErCom0903: TMLabel;
    CmnLabel09003ComDivisionDesc: TMLabel;
    CmnLabel09004ComCalculationDesc: TMLabel;
    CmnLabelErComCalc0904: TMLabel;
    MLabel60: TMLabel;
    CmnEdit09001AccountCode: TMNumEdit;
    CmnEdit09003ComDivision: TMNumEdit;
    CmnEdit09004ComCalculation: TMNumEdit;
    CmnLabelAccountCode0902: TMLabel;
    CmnEdit09002AccountCode: TMNumEdit;
    CmnLabel09002AccountCodeDesc: TMLabel;
    CmnPanelInformation10: TMPanel;
    CmnLabelAccountCode1001: TMLabel;
    CmnLabel10001AccountCodeDesc: TMLabel;
    MLabel160: TMLabel;
    CmnEdit10001AccountCode: TMNumEdit;
    CmnLabelAccountCode1003: TMLabel;
    CmnEdit10003AccountCode: TMNumEdit;
    CmnLabel10003AccountCodeDesc: TMLabel;
    MLabel46: TMLabel;
    MLabel47: TMLabel;
    MLabel48: TMLabel;
    CmnLabelAccountCode1002: TMLabel;
    CmnEdit10002AccountCode: TMNumEdit;
    CmnLabel10002AccountCodeDesc: TMLabel;
    CmnMemDataVar: TdxMemData;
    CmnMemDataVarSimpleName: TStringField;
    CmnMemDataVarDigit: TIntegerField;
    CmnMemDataVarItemValue: TStringField;
    CmnDataSourceVar: TDataSource;
    MPnl_U_Frame: TMPanel;
    DBGridVar: TdxDBGrid;
    DBGridVar_SimpleName: TdxDBGridColumn;
    DBGridVar_ItemValue: TdxDBGridColumn;
    CmnMemDataVarID: TStringField;
    DBGridVar_Digit: TdxDBGridColumn;
    DBGridVar_ID: TdxDBGridButtonColumn;
    CmnMemDataVarRemarks: TStringField;
    CmnMemDataVarCanChange: TBooleanField;
    CmnDataSourcePrintGaika: TDataSource;
    CmnMemDataPrintGaika: TdxMemData;
    StringField10: TStringField;
    StringField12: TStringField;
    IntegerField8: TIntegerField;
    StringField47: TStringField;
    IntegerField11: TIntegerField;
    StringField64: TStringField;
    StringField74: TStringField;
    StringField75: TStringField;
    StringField76: TStringField;
    IntegerField14: TIntegerField;
    IntegerField15: TIntegerField;
    StringField81: TStringField;
    IntegerField18: TIntegerField;
    StringField86: TStringField;
    StringField87: TStringField;
    StringField88: TStringField;
    StringField172: TStringField;
    IntegerField40: TIntegerField;
    StringField177: TStringField;
    CmnPipelinePrintGaika: TppDBPipeline;
    CmnReportGaika: TppReport;
    ppTitleBand1: TppTitleBand;
    ppHeaderBand2: TppHeaderBand;
    ppSystemVariable1: TppSystemVariable;
    ppLabel15: TppLabel;
    ppLabel16: TppLabel;
    ppLabel17: TppLabel;
    ppLine38: TppLine;
    ppColumnHeaderBand2: TppColumnHeaderBand;
    CmnDetailBandGaika: TppDetailBand;
    ppLine76: TppLine;
    ppDBTextLongName: TppDBText;
    ppLine92: TppLine;
    ppLabel18: TppLabel;
    ppLabel19: TppLabel;
    ppLabel26: TppLabel;
    ppLabel69: TppLabel;
    ppDBText335: TppDBText;
    ppLine160: TppLine;
    ppLabel196: TppLabel;
    ppLabel197: TppLabel;
    ppLabel198: TppLabel;
    ppLine164: TppLine;
    ppLabel200: TppLabel;
    ppDBText511: TppDBText;
    ppDBText557: TppDBText;
    ppDBText558: TppDBText;
    ppLine171: TppLine;
    ppLine172: TppLine;
    ppDBText562: TppDBText;
    ppColumnFooterBand2: TppColumnFooterBand;
    ppFooterBand2: TppFooterBand;
    ppSystemVariable2: TppSystemVariable;
    ppGroup1: TppGroup;
    ppGroupHeaderBand1: TppGroupHeaderBand;
    ppGroupFooterBand1: TppGroupFooterBand;
    CmnMemDataPrintGaikaItemID: TStringField;
    CmnMemDataPrintGaikaSimpleName: TStringField;
    CmnMemDataPrintGaikaItemValue: TStringField;
    ppDBText222: TppDBText;
    ppLabel20: TppLabel;
    ppLabel24: TppLabel;
    ppLabel21: TppLabel;
    ppLabel22: TppLabel;
    ppLabel25: TppLabel;
    ppLine41: TppLine;
    ppLine42: TppLine;
    ppDBText211: TppDBText;
    CmnLineReportGaikaDetailBand: TppLine;
    ppLine44: TppLine;
    ppLabel23: TppLabel;
    ppDBText219: TppDBText;
    ppLabel27: TppLabel;
    ppDBText223: TppDBText;
    ppLabel28: TppLabel;
    ppDBText231: TppDBText;
    ppLabel29: TppLabel;
    ppDBText234: TppDBText;
    ppLabel30: TppLabel;
    ppDBText235: TppDBText;
    ppLabel31: TppLabel;
    ppDBText243: TppDBText;
    ppLine74: TppLine;
    ppLine79: TppLine;
    ppLine88: TppLine;
    ppLine89: TppLine;
    ppLine90: TppLine;
    ppLine91: TppLine;
    ppLine95: TppLine;
    ppLine96: TppLine;
    ppLine97: TppLine;
    ppLine98: TppLine;
    ppLine39: TppLine;
    ppLine75: TppLine;
    ppLine99: TppLine;
    ppLine102: TppLine;
    ppLine106: TppLine;
    ppLine107: TppLine;
    ppLine108: TppLine;
    ppLine109: TppLine;
    ppLine110: TppLine;
    ppLine111: TppLine;
    ppLine114: TppLine;
    ppLine128: TppLine;
    ppLine40: TppLine;
    CmnMemDataVarID_Save: TStringField;
    CmnMemDataPrintGaikanInfo09Kbn03: TIntegerField;
    CmnMemDataPrintGaikanInfo09Kbn04: TIntegerField;
    CmnMemDataPrintGaikastrGroup: TStringField;
    CmnMemDataPrintGaikaPayRec: TIntegerField;
    CmnMemDataPrintGaikastrPrjMasterName: TStringField;
    CmnMemDataPrintGaikastrPrjHojyoCode: TStringField;
    CmnMemDataPrintGaikastrCodeName: TStringField;
    CmnMemDataPrintGaikanInfo09AccountKbn01: TStringField;
    CmnMemDataPrintGaikanInfo09AccountKbn02: TStringField;
    CmnMemDataPrintGaikanInfo10AccountKbn01: TStringField;
    CmnMemDataPrintGaikanInfo10AccountKbn02: TStringField;
    CmnMemDataPrintGaikanInfo10AccountKbn03: TStringField;
    CmnMemDataPrintGaikanInfo09AccountBank01: TStringField;
    CmnMemDataPrintGaikanInfo09AccountBank02: TStringField;
    CmnMemDataPrintGaikanInfo10AccountBank01: TStringField;
    CmnMemDataPrintGaikanInfo10AccountBank02: TStringField;
    CmnMemDataPrintGaikanInfo10AccountBank03: TStringField;
    CmnMemDataPrintGaikastrInfo09AccountBankName01: TStringField;
    CmnMemDataPrintGaikastrInfo09AccountBankName02: TStringField;
    CmnMemDataPrintGaikastrInfo10AccountBankName01: TStringField;
    CmnMemDataPrintGaikastrInfo10AccountBankName02: TStringField;
    CmnMemDataPrintGaikastrInfo10AccountBankName03: TStringField;
    CmnMemDataPrintGaikastrCode: TStringField;
    CmnMemDataPrintGaikastrPrjHojyoCodeName: TStringField;
    CmnLabelCustomerInquiryNo0905: TMLabel;
    CmnEdit09006CustomerInquiryNo: TMTxtEdit;
    CmnLabelPurposeOfSendingMoney0906: TMLabel;
    CmnEdit09007PayHeadingNo: TMNumEdit;
    CmnEdit09008SendPurpose: TMTxtEdit;
    CmnLabelPermissionOfSendingMoney0906: TMLabel;
    CmnEdit09009PermLicenceNo: TMTxtEdit;
    CmnEdit09010PermDate: TMDateEdit;
    CmnLabelPurposeOfSendingMoney1004: TMLabel;
    CmnEdit10004PayHeadingNo: TMNumEdit;
    CmnEdit10005SendPurpose: TMTxtEdit;
    CmnLabelPermissionOfSendingMoney1005: TMLabel;
    CmnEdit10006PermLicenceNo: TMTxtEdit;
    CmnEdit10007PermDate: TMDateEdit;
    CmnMemDataVarIsDefault: TBooleanField;
    ppLine43: TppLine;
    ppLabel32: TppLabel;
    ppDBText210: TppDBText;
    ppLine129: TppLine;
    ppLabel33: TppLabel;
    ppLine130: TppLine;
    ppLabel34: TppLabel;
    ppLine131: TppLine;
    ppLine132: TppLine;
    ppLine133: TppLine;
    ppDBText246: TppDBText;
    ppDBText247: TppDBText;
    ppDBText255: TppDBText;
    ppDBText258: TppDBText;
    ppLine134: TppLine;
    ppLine135: TppLine;
    ppLabel35: TppLabel;
    ppDBText259: TppDBText;
    ppLine136: TppLine;
    ppDBText267: TppDBText;
    ppLine139: TppLine;
    ppLabel36: TppLabel;
    ppLine140: TppLine;
    ppDBText270: TppDBText;
    ppLine143: TppLine;
    ppDBText271: TppDBText;
    CmnMemDataPrintGaikastrInfo09strInfo09CustomerInquiryNo06: TStringField;
    CmnMemDataPrintGaikastrInfo09SendPurpose08: TStringField;
    CmnMemDataPrintGaikastrInfo09PermLicenceNo09: TStringField;
    CmnMemDataPrintGaikastrInfo10SendPurpose05: TStringField;
    CmnMemDataPrintGaikastrInfo10PermLicenceNo06: TStringField;
    CmnMemDataPrintGaikastrInfo09PayHeadingNo07: TStringField;
    CmnMemDataPrintGaikastrInfo10PayHeadingNo04: TStringField;
    CmnMemDataPrintGaikastrInfo09PermDate10: TStringField;
    CmnMemDataPrintGaikastrInfo10PermDate07: TStringField;
    CmnMemDataPrintDetailstrInfo03ComCalculationDesc: TStringField;
    CmnGridOffsetColumnTaxRate: TdxDBGridColumn;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt01: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt02: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt03: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt04: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt05: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt06: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt07: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt08: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt09: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxCodePrt10: TStringField;
    CmnMemDataOffsetstrTaxRateCSV: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt01: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt02: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt03: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt04: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt05: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt06: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt07: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt08: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt09: TStringField;
    CmnMemDataPrintDetailstrOffsetTaxRatePrt10: TStringField;


	procedure fnJNTCRP004006fOnDiscontinue					(var Msg: TMessage); message WM_DISCONTINUE;
	procedure fnJNTCRP004006fOnChangeScreenCondition		(var Msg: TMessage); message WM_CHANGESCREENCONDITION;

	procedure fnJNTCRP004006fOnCreate						(Sender: TObject);
	procedure fnJNTCRP004006fOnActivate					(Sender: TObject);
	procedure fnJNTCRP004006fOnCloseQuery					(Sender: TObject; var CanClose: Boolean);
	procedure fnJNTCRP004006fOnClose						(Sender: TObject; var Action: TCloseAction);
	procedure fnJNTCRP004006fOnShow						(Sender: TObject);
	procedure fnJNTCRP004006fOnHide						(Sender: TObject);
	procedure fnJNTCRP004006fOnPaint						(Sender: TObject);
	procedure fnCmnFunctionOnEnter						(Sender: TObject);
    procedure fnCmnFunctionOnKeyDown					(Sender: TObject; var Key: Word; Shift: TShiftState);
	procedure fnCmnFunctionNumEditOnChange				(Sender: TObject);
    procedure fnCmnFunctionNumEditArrowDispOnKeyDown	(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure fnCmnFunctionDateEditOnExit				(Sender: TObject);//<222-8>ADD
    procedure fnCmnButtonToolbarExitOnClick				(Sender: TObject);
	procedure fnCmnButtonToolbarDetailOnClick			(Sender: TObject);
	procedure fnCmnButtonToolbarDeleteOnClick			(Sender: TObject);
    procedure fnCmnButtonToolbarTagOnClick				(Sender: TObject);
    procedure fnCmnTreeViewOnChange						(Sender: TObject; Node: TTreeNode);
    procedure fnCmnTreeViewOnEnter						(Sender: TObject);
    procedure fnCmnPopupMenuToolbarTagOnClick			(Sender: TObject);
    procedure fnCmnPopupMenuTreeViewDetailOnClick		(Sender: TObject);
    procedure fnCmnPopupMenuTreeViewDeleteOnClick		(Sender: TObject);
    procedure fnCmnPopupMenuTreeViewTagOnClick			(Sender: TObject);
    procedure fnCmnPopupMenuTreeViewTagOnClickEx		(Sender: TObject);
    procedure fnCmnPopupMenuGridStandardOnPopup			(Sender: TObject);
    procedure fnCmnPopupMenuGridStandardTagOnClick		(Sender: TObject);
    procedure fnCmnPopupMenuGridStandardTagOnClickEx	(Sender: TObject);
	procedure fnCmnGridStandardOnBeforeChangeColumn		(Sender: TObject; Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
	procedure fnCmnGridStandardOnChangeColumn			(Sender: TObject; Node: TdxTreeListNode; Column: Integer);
	procedure fnCmnGridStandardOnChangeNode				(Sender: TObject; OldNode, Node: TdxTreeListNode);
	procedure fnCmnGridStandardOnChangeNodeEx			(Sender: TObject);
//	procedure fnCmnEditDecDivisionOnChange(Sender: TObject);
    procedure fnCmnPanelButtonsOnResize(Sender: TObject);
    procedure fnCmnTabInformationsOnChange(Sender: TObject);
    procedure fnCmnButtonPageOnClick(Sender: TObject);
    procedure fnCmnButtonUpdateOnClick(Sender: TObject);
    procedure fnCmnPopupMenuTreeViewOnPopup(Sender: TObject);
    procedure fnCmnGridStandardOnEnter(Sender: TObject);
    procedure fnCmnGridStandardOnKeyPress(Sender: TObject; var Key: Char);
    procedure fnCmnGridStandardOnMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure fnCmnGridStandardOnMouseMove(Sender: TObject; Shift: TShiftState;
      X, Y: Integer);
    procedure fnCmnDataSourceStandardOnStateChange(Sender: TObject);
    procedure fnCmnMemDataStandardBeforePost(DataSet: TDataSet);
    procedure fnCmnFunctionOnChange(Sender: TObject);
    procedure fnCmnEditNameSimpleOnExit(Sender: TObject);
    procedure fnCmnEditNameOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnEditZipCodeOnArrowClick(Sender: TObject);
    procedure fnCmnEditAccountNoOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnFunctionTxtEditOnKeyPress(Sender: TObject; var Key: Char);
    procedure fnCmnEditFundCodeOnArrowClick(Sender: TObject);
    procedure fnCmnEditTaxCodeOnChange(Sender: TObject);
    procedure fnCmnEditBankCodeOnArrowClick(Sender: TObject);
    procedure fnCmnEditNameKanaOnKeyPress(Sender: TObject;
      var Key: Char);
    procedure fnCmnEditAccountCodeOnArrowClick(Sender: TObject);
    procedure fnCmnTabInformationsOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnEditKmkCodeOnArrowClick(Sender: TObject);
    procedure fnCmnEditTaxCodeOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnFunctionNumEditOnChangeEx(Sender: TObject);
    procedure fnCmnEditOffsetPriceOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnTreeViewOnDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure fnCmnTreeViewOnDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure fnCmnPopupMenuTreeViewEraseOnClick(Sender: TObject);
    procedure fnCmnTabDetailOnChange(Sender: TObject);
    procedure fnCmnEditPaymentColumnOnChange(Sender: TObject);
    procedure fnCmnComboBoxOnKeyDown(Sender: TObject;
      var Key: Word; Shift: TShiftState);
    procedure fnCmnEditPaymentColumnOnEnter(Sender: TObject);
    procedure fnCmnEditPaymentColumnDivisionOnKeyDown(Sender: TObject;
      var Key: Word; Shift: TShiftState);
    procedure fnCmnTreeViewOnChanging(Sender: TObject; Node: TTreeNode;
      var AllowChange: Boolean);
    procedure fnCmnButtonCancelOnClick(Sender: TObject);
    procedure fnCmnFunctionOnEnterException(Sender: TObject);
    procedure fnCmnGridOffsetOnChangeNodeEx(Sender: TObject);
    procedure fnCmnGridOffsetOnDblClick(Sender: TObject);
    procedure fnCmnToolbarButtonChangeOnClick(Sender: TObject);
    procedure fnCmnButtonToolbarPrintOnClick(Sender: TObject);
    procedure ppDetailBand3BeforePrint(Sender: TObject);
    procedure fnCmnReportDetailDBTextOffsetHojCodeOnPrint(Sender: TObject);
    procedure fnCmnEditHojCodeOnArrowClick(Sender: TObject);
    procedure fnCmnTabStandardOnEnter(Sender: TObject);
    procedure fnCmnEdit05002KmkCodeOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnReportBeforePrint(Sender: TObject);
    procedure fnCmnReportDetailBandBeforeGenerate(Sender: TObject);
    procedure fnCmnTabStandardOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnTabStandardOnChange(Sender: TObject);
    procedure fnCmnEdit05006TaxCodeOnChange(Sender: TObject);
    procedure fnCmnReportSystemOnEndPage(Sender: TObject);
    procedure fnCmnReportSystemDBTextHojCodeOnPrint(Sender: TObject);
    procedure fnCmnTabDetailOnKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure fnCmnEdit01001DecDivisionOnChange(Sender: TObject);
    procedure fnCmnButtonPageOnEnter(Sender: TObject);
    procedure fnCmnEditListDispOnChange(Sender: TObject);
    procedure fnCmnEditPaymentColumnDivisionOnChange(Sender: TObject);
    procedure CmnEdit00001HojCodeArrowClick(Sender: TObject);
    procedure CmnPopupMenuTreeViewAllOpenClick(Sender: TObject);
    procedure CmnPopupMenuTreeViewAllCloseClick(Sender: TObject);

    procedure MSPFunctionBarFunctionClick(Sender: TObject; FuncNo: Integer);

    procedure FreeF1Execute(Sender: TObject);
    procedure FreeF6Execute(Sender: TObject);   // <149>
    procedure FreeF8Execute(Sender: TObject);
    procedure ArrowClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure BChangeClick(Sender: TObject);    // <111>

	procedure SessionPractice(iSyori: Integer);
    procedure fnCmnEdit05000KmkCodeKeyPress(Sender: TObject; var Key: Char);
    procedure fnCmnFunctionOnKeyPress(Sender: TObject;
      var Key: Char);
    procedure CmnEdit01030PriPayWayDivisionKeyPress(Sender: TObject;
      var Key: Char);	// <172> ｾｯｼｮﾝ管理ｽﾄｱﾄﾞ
    procedure fnLaunchSwkAddDlg();                                  // <194> ADD
    procedure CmnLabelPrjDetailClick(Sender: TObject);
    procedure fnCmnEdit00019GaikaUseChange(Sender: TObject);
    procedure fnDBGridVar_IDEditButtonClick(Sender: TObject);
    procedure fnDBGridVarExit(Sender: TObject);
    procedure fnDBGridVarMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure fnDBGridVarKeyPress(Sender: TObject; var Key: Char);
    procedure fnCmnMemDataVarBeforePost(DataSet: TDataSet);
    procedure fnDBGridVarEnter(Sender: TObject);
    procedure fnDBGridVarChangeNodeEx(Sender: TObject);
    procedure fnDBGridVarChangeColumn(Sender: TObject; Node: TdxTreeListNode;
      Column: Integer);
    procedure fnDBGridVarEditing(Sender: TObject; Node: TdxTreeListNode;
      var Allow: Boolean);
    procedure fnCmnMemDataVarAfterPost(DataSet: TDataSet);
    procedure fnDBGridVarBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);              // <194> ADD
    procedure DBGridVarCustomDrawCell(Sender: TObject; ACanvas: TCanvas;
      ARect: TRect; ANode: TdxTreeListNode; AColumn: TdxTreeListColumn;
      ASelected, AFocused, ANewItemRow: Boolean; var AText: String;
      var AColor: TColor; AFont: TFont; var AAlignment: TAlignment;
      var ADone: Boolean);
    procedure dxDBGridSelectCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused,
      ANewItemRow: Boolean; var AText: String; var AColor: TColor;
      AFont: TFont; var AAlignment: TAlignment; var ADone: Boolean);


  private

    { Private 宣言 }

    uvExpOpenSW:        Boolean;                                // ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ(True:OPEN False:CLOSE)　
//    uvPostExpOpenSW:    Boolean;                              // ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ(True:OPEN False:CLOSE)

    uvFncInfo               :   urFncInfo;
//	MASTER_SEGMENT  		:	Integer;		                //	ｾｸﾞﾒﾝﾄ(可変)
    MASTER_CONSTRUCT		:	Integer;		                //	工事(可変)
    MASTER_CONSTKIND		:	Integer;		                //	工種(可変)

    MASTER_HOJYO1           :   Integer;                        //  第一補助
    MASTER_HOJYO2           :   Integer;                        //  第二補助

    m_sKmk                  :   Integer;

	m_pRec                  : ^TMjsAppRecord;                   // ｾｰﾌﾞ用ﾎﾟｲﾝﾀ
	m_Base_pRec             : ^TMjsAppRecord;

    m_cDataModule           : TMDataModulef;
    m_cComArea              : TJNTMASCom;
	m_cDBCommon             : TFDConnection;
    m_cDBSelect             : TFDConnection;
	m_cACControl            : TWinControl;                      // ｱｸﾃｨﾌﾞｺﾝﾄﾛｰﾙ
	m_cPreview              : TMJSPreviewIF;
	m_cPrnSupport           : TMjsPrnSupport;
	m_cErrorMsgRec          : TMJSMsgRec;
//<100>	m_cPayAccExp		  : TPAYAccExpIF;
	m_cCheckItems           : TList;

    m_PayProgRendo          : TJNTPayProgRendo;                 // <128> 2006/04/20 H.Kawato Add
    m_PayProgRendoG			: TJNTPayProgRendoG;				// <222> ADD

//<114>	m_arAdoptInfo	      : array [0..15] of AdoptInfo;
//<149>	m_arAdoptInfo	      : array [0..35] of AdoptInfo;     // <114>
	m_arAdoptInfo           : array [0..47] of AdoptInfo;       // <149>

	m_arCodeAttribute       : array [0.. 2] of CodeAttribute;
	m_arCodeAttributePrint  : array [0.. 2] of CodeAttribute;
	m_arDecListRec          : array [1.. 5] of Integer;

	m_arSyousaiData         : array [1..5] of SyousaiData;      // <149> 2006/10/11 H.Kawato Add 詳細ﾃﾞｰﾀ 格納配列

	m_cNodeRightClick       : TTreeNode;
//	m_cNodePrevSelect       : TTreeNode;                        // <149> 2006/10/11 H.Kawato Del
	m_cNodeSumSystem        : TTreeNode;

	m_nProcDivision         : Integer;
	m_nHojyoTree            : Byte;
	m_nPayNayoseInfo        : Byte;
	m_nHintPosition         : Extended;
	m_nDateFormatDivision   : Integer;                          // 和暦/西暦区分
	m_nMailAdoption         : Integer;                          // ﾒｰﾙ会計処理区分
	m_nCompDivision         : Integer;                          // 公益法人区分
	m_nTaxInfoAccDivision   : Integer;                          // 会計処理区分
	m_nCurCodeDigit         : Integer;
	m_nCurCodeAttribute     : Integer;
	m_nDBErrorCode          : Integer;
	m_nCurItemDivision      : Integer;
//	m_nPrintOrder           : Integer;                          // 範囲指定: 0=ｺｰﾄﾞ順, 1=連想順
	m_nReferMode            : Integer;                          // ﾒｰﾙ会計参照ﾌﾗｸﾞ
	m_nKmkCompound01        : Integer;                          // 複合科目
	m_nKmkCompound02        : Integer;                          // 資金複合科目
	m_strHojCodeGeneral     : String;                           // 諸口
	m_strPrintHojCode       : String;
	m_strPrintHojCodeStr    : String;                           // 出力範囲: 支払先ｺｰﾄﾞ(開始)
	m_strPrintHojCodeEnd    : String;                           // 出力範囲: 支払先ｺｰﾄﾞ(終了)
	m_strHintPosition       : String;
	m_strValidCharacters    : String;                           // 使用可能ｺｰﾄﾞ
	m_strCurHojCode         : String;
	m_nCurNCode             : Extended;
	m_fUnderConstruction    : Boolean;
	m_fSetOffsetJournal     : Boolean;
	m_fReadInformations     : Boolean;
	m_fThroughTab           : Boolean;
	m_fThroughTabStandard   : Boolean;
	m_fIgnoreProc           : Boolean;
	m_fPrintBottom          : Boolean;
	m_cExcept               : TJNTMASExceptIF;                  // 排他制御	<#3>
	m_ZoomRatio             : Integer;                          // 拡大率	//<#8>

    m_cJNTArea              : TJNTCommon; // <100>
    m_CmpList               : TList;

    B_Print                 : TMSpeedButton;
//    B_End                 : TMSpeedButton;
    B_Change                : TMSpeedButton;
    B_Syousai               : TMSpeedButton;
    B_Delete                : TMSpeedButton;
//    B_Fusen               : TMSpeedButton;
    m_bBtnChange            : Boolean;                          // 切出≪=≫埋込ﾌﾗｸﾞ<111>

    m_NCode                 : Extended;
	m_dSousaiNCode			: Array[0..3] of Extended;			// <相殺>科目／補助内部コード <175> Add

    //--<106>権限St
    m_IsUpdate              : Boolean;
    m_IsDelete              : Boolean;                          // <165> Add
    //--<106>権限Ed

    uvHani                  : TJNTHani;                         // <PRN> 範囲ﾀﾞｲｱﾛｸﾞ用ﾊﾟﾗﾒｰﾀ
    PrintAppEntry           : TPrintAppEntry;                   // <PRN>
    ArrHdl                  : Array[0..100] of Pointer;         // <PRN> Lのﾌｫｰﾑﾎﾟｲﾝﾀの格納配列(Lに渡す)
    PrtParam                : rcPrtParam;                       // <PRN>
    DmqPrint                : TMQuery;                          // <PRN> 印刷用ｸｴﾘｰ
	uvSelSys                : TJNTSelCorpSys;                   // <PRN> 会社ｼｽﾃﾑ情報

    m_sUseString            : String;                           // 採用情報(MasterInfo)保存用文字列 <107>
    m_BtnClick              : Boolean;                          // 更新ﾎﾞﾀﾝｸﾘｯｸｲﾍﾞﾝﾄ中 <112>
    m_TabClick              : Boolean;                          // タブ変更フラグ <140> 2006/08/03 H.Kawato Add
    MComboBox               : TMComboBox;

    m_BankErrFlag           : Boolean;                          // <127>

// <128> 2006/04/20 H.Kawato Add
    m_ProgRendoFlg          : Boolean;
    m_ProgRendoGFlg			: Boolean;							// 外貨用進捗連動フラグ <222> ADD
    m_iSateiChgKbn          : Integer;                          // 進捗連動 査定区分
// <128> 2006/04/20 H.Kawato Add

    m_bSousaiChgFlg         : Boolean;                          // <136> 相殺情報変更フラグ

    m_bKijituMankiFlg       : Boolean;                          // <132> 期日指定振込採用フラグ
    m_iKijituUpdateFlg      : Integer;                          // <132> 期日指定振込更新フラグ(0:初期値 1:画面切替 2:更新了承 3:更新不承)
    m_bBunkaiChgFlg         : Boolean;                          // <132> 分解方法変更フラグ

	m_iHeikouData           : Integer;                          // <137> 平行支払採用区分
	m_iHeikouCount          : Integer;                          // <137> 平行支払処理件数
    m_iProAdoptKbn          : Integer;                          // <149> ﾌﾟﾛｼﾞｪｸﾄ別支払採用区分             2006/10/11 H.Kawato Add
    m_iSubAdoptKbn          : Integer;                          // <149> ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用区分          2006/10/11 H.Kawato Add
    m_iProjectKbn           : Integer;                          // <149> ﾌﾟﾛｼﾞｪｸﾄ区分                       2006/10/11 H.Kawato Add
    m_iSubProjKbn           : Integer;                          // <149> ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ区分                    2006/10/11 H.Kawato Add
    m_nPayPtnNo             : Extended;                         // <149> 条件ﾊﾟﾀｰﾝNo(更新用)                2006/10/11 H.Kawato Add
    m_nPayPtnNo2            : Extended;                         // <149> 条件ﾊﾟﾀｰﾝNo(表示用)                2006/10/11 H.Kawato Add
                                                                // (-1:登録のないﾌﾟﾛｼﾞｪｸﾄ別支払 0:標準情報登録なし 1:標準情報 2>:ﾌﾟﾛｼﾞｪｸﾄ別支払)
    m_nTantoNCd             : Extended;                         // <149> 処理者 内部ｺｰﾄﾞ                    2006/10/11 H.Kawato Add
    m_nPriPayWay            : Extended;                         // <149> 優先支払方法                       2006/10/11 H.Kawato Add
    m_bShowPrjInfo          : Boolean;                          // <149> ﾌﾟﾛｼﾞｪｸﾄ情報表示ﾌﾗｸﾞ               2006/10/11 H.Kawato Add
    m_bStandardInfo         : Boolean;                          // <153> 標準情報コピー用ﾌﾗｸﾞ               2006/12/19 H.Kawato Add
    m_bYusenChange          : Boolean;                          // <149> 優先支払方法変更ﾌﾗｸﾞ               2006/10/11 H.Kawato Add
    m_nPrjSubUnAdopt        : Integer;                          // <150> 相殺情報工種情報採用ﾌﾗｸﾞ(0:初期値 1:ｻﾌﾞﾌﾟﾛｼﾞｪｸﾄ変更あり 2:ｻﾌﾞﾌﾟﾛｼﾞｪｸﾄ採用無)
    m_bDecPtnChange         : Boolean;                          // <149> 分解ﾊﾟﾀｰﾝ変更ﾌﾗｸﾞ                  2006/12/14 H.Kawato Add
    m_bSousaiChange         : Boolean;                          // <152> ﾌﾟﾛｼﾞｪｸﾄ別支払・相殺採用変更フラグ 2006/12/18 H.Kawato Add

    m_iBmnAssAdopt          : Integer;                          // <156> 部門別査定採用区分  Add
    m_iKmkAssAdopt          : Integer;                          // <156> 科目別査定採用区分  Add

    m_iGaikaUseKbn			: Integer;							// <222> 外貨債務管理採用区分 ADD
    m_lstVariable			: TStringList;						// <222> 可変項目リスト ADD
    m_RepHandle             : THandle;                          // <146> 2006/08/17 H.Kawato Add
    m_iPrintPartKbn         : Integer;                          // <158> 2007/02/13 H.Kawato Add

    m_SyncMaster            : TSyncMaster;                      // <Rel> ﾏｽﾀ同期基本ｸﾗｽ

    m_iVerData              : Integer;                          // <169> 債務ﾃﾞｰﾀﾊﾞｰｼﾞｮﾝ

// <211> MOD-STR
//  m_arModifyFlg           : array [1.. 4] of Boolean;         // <182> ADD
    m_arModifyFlg           : array [1.. 5] of Boolean;         // <182> ADD
// <211> MOD-END
	m_bModifyGaikaFlg		: Boolean;							// <222> ADD
    m_bExistProjRecord      : Boolean;							// <207> Add

    m_rCommonBmn            : array of urCommonBmn;             // 共通部門、非課税部門 <210> ADD

    m_iErUseKbn             : Integer;                          // 電子記録債権採用区分 <214> ADD

    m_arFreeInfo            : array [1.. 10] of String;         // フリー項目情報 <217> ADD

    m_JNTAuthority          : TJNTAuthority;                    // <AUT> ADD

	m_TaxRateInfo 	        : TMASTaxRateInfo;				    // 消費税率情報 <TX26> ADD
// <#TAX10> ADD-STR
	m_TaxRateInfoFront		: TMASTaxRateInfo;					// 消費税率情報クラス（軽減税率含む(印刷用)）
	m_nTaxKbn				: Integer;
// <#TAX10> ADD-END

    m_anBrachNCode          : array [1.. 3] of Extended;        // 振込先支店内部コード <SCA> ADD


    Function fnGetNCODE(StrHojyoCode: String):Extended;
    function fnPayProgRendoCheck:Boolean;                                               // <128> 2006/04/20 H.Kawato Add
// <222> ADD start
    function fnPayProgRendoCheckG(): Boolean;
    function fnSetRendoInitG(exNCode: Extended;
							ProgRendoParamG: TJNTPAYProgRendoParamG; var bRendoInitG: Boolean): Integer;
// <222> ADD end

    function fnGetPayBaseInfo ():Boolean;                                               // <137> 2006/06/28 H.Kawato Add

// <149> 2006/10/11 H.Kawato Add
    function fnProjectChangeOver(cControl: TObject): Boolean;                           // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ入力可不可制御
    function fnChkProjectEnabled(bChecked: Boolean):Boolean;                            // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ入力可不可制御
    function fnHojyMAInputCheck (strHojCode: String; iMasterKbn: Integer; var nNCode: Extended; var sSimpleName: String):Boolean;
                                                                                        // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ 入力値ﾁｪｯｸと内部ｺｰﾄﾞの取得
    function fnChkSubProjectEnabled(bChecked: Boolean; nKojiNCode: Extended):Boolean;   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ入力可不可制御
    function fnKojiInfoCheck (nKojiNCode: Extended; iMasterKbn: Integer; var iPartKbn: Integer):Boolean;
                                                                                        // 工種管理区分チェック
    function fnKosyuCodeInputCheck (strHojCode: String):Boolean;                        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ 入力値ﾁｪｯｸ
    function fnGetPayPtnNo (nNCode: Extended):Extended;                                 // 条件ﾊﾟﾀｰﾝNo ﾁｪｯｸ
    function fnGetPrjNCode (var lvKojiNCD, lvKosyuNCD: Extended):Boolean;               // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得
    function fnBunkaiPtnChange(): Boolean;                                              // 分解ﾊﾟﾀｰﾝ入力値変更処理
// <149> 2006/10/11 H.Kawato Add

    function bIsModify(pAreaNo	: Integer) :Boolean;            // <182> ADD

    function fnCheckIsSpot(sPayCD: String): Boolean;            // <184> ADD

    function GetPayCommonValue(sSection, sKey: String): String; // <197> ADD

    procedure BankInfoDlg();                            // <198> Add

    function fnExistProjRecord(sPayCD: String): Boolean;        // <202> ADD
// <204> Add start
    procedure fnCopyFuriInfo();
// <204> Add end

    procedure fnGetFreeInfoFromApgFile();                       // フリー項目情報取得 <217> ADD
    procedure fnInitGaikaDsp();	// <222> ADD

  public
    { Public 宣言 }
    constructor fnCreateForm ( pRec : Pointer);	// ｺﾝｽﾄﾗｸﾀ

	procedure	CMChildKey								(var Msg: TWMKey); message CM_CHILDKEY;

	procedure	fnAddTreeViewItem						(nSumDivision: Integer; strHojCode: String; strDescription: String);
	procedure	fnAddTreeViewItemsSumChild				(cNode: TTreeNode; dqMasterData: TMQuery);
    procedure	fnAddTreeViewItemsSumChildren           (nNCODE: Extended; cNode: TTreeNode);
	procedure	fnAddTreeViewItemSumChild				(nNCodeParent: Extended; pRecord: Pointer);
	procedure	fnAddTreeViewItemSumParent				(pRecord: Pointer);
	procedure	fnAddTreeViewItemSumSystem				(nNCODE:Extended;strHojCode: String; nNCodeParent: Extended; strDescription: String);

	procedure	fnChangeConditionAllControls			(fEnabled: Boolean);
	procedure	fnChangeConditionAllControlsDetail		(fEnabled: Boolean);
	procedure	fnChangeConditionGrid					();
	procedure	fnChangeConditionOffsetJournalInfo		(nFieldID: Integer);
	procedure	fnChangeConditionOffsetJournalInfoEx	(nPosition: Integer);
	procedure	fnChangeConditionOffsetTax				();
	procedure	fnChangeConditionPageButtons			(fVisible: Boolean);
	procedure	fnChangeConditionPayExpect				(nFieldID: Integer);
    procedure	fnChangeConditionGaikaUse				(bEnabled: Boolean);			// <222> ADD
  //procedure	fnChangeConditionGaikaParts				();								// <222> ADD <222-6> DEL
    procedure	fnChangeConditionGaikaParts				(IsEachProject: Boolean = false);// <222-6> ADD
	procedure	fnChangeConditionSateiCalc				();                             // <170> 2007/12/14 H.Kawato Add
	procedure	fnChangeConditionPayment				();
	procedure	fnChangeConditionPostage				(nFieldID: Integer);
	procedure	fnChangeConditionPostage8				(nFieldID: Integer);            // <211> ADD
	procedure	fnChangeConditionScreenDetails			(fVisible: Boolean);
	function	fnChangeConditionTabInformations		(nIndexSelected: Integer): Boolean;
	procedure	fnChangeConditionTabStandard			(nDivision: Integer);
	procedure	fnChangeConditionTaxRelated				(nFieldID: Integer);
	procedure	fnChangeConditionTaxRelatedEx			(fExist: Boolean);
	procedure	fnChangeConditionToolbarButtons			(nSumDivision: Integer; strHojCode: String);
	procedure	fnChangeConditionERKbn				    ();                             // <211> ADD
	function	fnCheckComboBoxValue					(nFieldID: Integer): Boolean;
	function	fnCheckDecomposeListBasedValue			(): Boolean;
	function	fnCheckDecomposeListRecord				(cNumEdit: TMNumEdit): Integer;
	function	fnCheckDecomposeListRecords				(): Boolean;
	function	fnCheckDeletePermitGeneralRec			(): Boolean;
	function	fnCheckDeletePermitParentRec			(nNCode: Extended): Boolean;
	function	fnCheckEditItemsValue					(cControl: TObject; nPosition: Integer): Boolean;
	function	fnCheckEditItemsValue00					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue01					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue02					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue03					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue04					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue05					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue06					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue07					(nFieldID: Integer): Boolean;
	function	fnCheckEditItemsValue08					(nFieldID: Integer): Boolean;   // <211> ADD
    function	fnCheckEditItemsValue09					(nFieldID: Integer): Boolean;   // <222> ADD
    function	fnCheckEditItemsValue10					(nFieldID: Integer): Boolean;   // <222> ADD
	function	fnCheckEditItemsValues					(cControl: TObject): Boolean;
	function	fnCheckEditNumValue						(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueAccountCode			(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueAppDate				(nFieldID: Integer): Boolean;
    function	fnCheckEditNumValueSateiCalcValue       (nFieldID: Integer): Boolean;   // <170> Add
	function	fnCheckEditNumValueBasedValue			(nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueBankCode				(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueBranchCode			(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueClosingDay			(nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueDivideSheets			(): Boolean;
	function	fnCheckEditNumValueExpectDay			(nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueFractionPrice		(nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueFundCode				(nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueKmkCode				(): Boolean;
	function	fnCheckEditNumValueSelect				(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueSelectEx				(nFieldID: Integer): Boolean;
	function	fnCheckEditNumValueSeqNo				(): Boolean;
	function	fnCheckEditNumValueZipCode				(): Boolean;
	function	fnCheckEditTxtValue						(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditTxtValueAccountNo			(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditTxtValueDescription			(): Boolean;
	function	fnCheckEditTxtValueHojCode				(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditTxtValueHojCodeEx			(nFieldID: Integer): Boolean;
	function	fnCheckEditTxtValueKanaDesc				(nAreaNo: Integer; nFieldID: Integer): Boolean;
	function	fnCheckEditTxtValueVisitorCode			(nAreaNo: Integer; nFieldID: Integer): Boolean;
    function	fnCheckEditDateValue					(nAreaNo: Integer; nFieldID: Integer): Boolean;//<222-8>ADD
	function	fnCheckPermitGeneralRecord				(strHojCode: String): Boolean;
	function	fnCheckRecordRequisite					(): Integer;
	function	fnCheckValidAccountCode					(pRecord: Pointer): Boolean;
	function	fnCheckValidBankCode					(nBankCode: Integer; var strDescription: String; var strKanaDesc: String): Boolean;
// <SCA> MOD-STR
//	function	fnCheckValidBranchCode					(nBankCode: Integer; nBranchCode: Integer; var strDescription: String; var strKanaDesc: String): Boolean;
	function	fnCheckValidBranchCode					(nBankCode: Integer; nBranchCode: Integer; var strDescription: String; var strKanaDesc: String; nAreaNo: Integer): Boolean;
// <SCA> MOD-END
	function	fnCheckValidFundCode					(cNumEdit: TMNumEdit; var strDescription: String): Boolean;
	function	fnCheckValidFundCodeEx					(nFundCode: Integer; var strDescription: String): Boolean;
	function	fnCheckValidCodeUseCharacters			(strHojCode: String): Boolean;
	function	fnCheckValidHojCode						(nMasterDivision: Integer; nNCode:Extended ; var strDescription: String; nOption: Integer): Boolean;
	function	fnCheckValidHojCode2					(nMasterDivision: Integer; nNCode:Extended ; var strDescription: String; var strGCode: String): Boolean;
//<175> Mod
//	function	fnCheckValidHojCodeEx					(strHojCode: String; nPosition: Integer; var strDescription: String): Boolean;
 	function	fnCheckValidHojCodeEx					(strHojCode: String; nPosition: Integer; var strDescription: String; var nNCode:Extended): Boolean;
//<175> Mod
	function	fnCheckValidKanaDesc					(strDescription: String): Boolean;

    //KmkMA IN(NCode)   Out(GCode,SimpleName)   Result:Boolean
	function	fnCheckValidKmkCode						(nKmkCode: Extended;
                                                                    var iGCode : Integer;
                                                                    var strDescription: String): Boolean;
    //KmkMA IN(GCode)   Out(SimpleName)         Result:Boolean
    function	fnCheckValidKmkCodeG (nKmkCode: Integer;
                                                                    var nCode   :Extended;
                                                                    var strDescription: String): Boolean;

// <138> 2006/07/28 H.Kawato Mod
{
	function	fnCheckValidKmsCode						(nKmkCode: Extended; nKmsCode: Extended;
                                                            var iGCode : Integer;
                                                            var strDescription: String): Boolean;
}
	function	fnCheckValidKmsCode						(nKmkCode: Extended; nKmsCode: Extended;
                                                            var sGCode, strDescription: String): Boolean;
// <138> 2006/07/28 H.Kawato Mod

    function	fnCheckValidKmsCodeEx                   (nKmkCode: Integer; nKmsCode: String;
//<175> Mod
//                                                            var strDescription : String): Boolean;
                                                            var strDescription : String;
															nKmkNCode:Extended;
															var nKmsNCode:Extended): Boolean;
//<175> Mod

	function	fnCheckValidOffsetRecord				(): Boolean;
	function	fnCheckValidMasterDataRecord			(strHojCode: String): Boolean;
	function	fnConvertStringFieldValue				(strDescription: String): String;
	procedure	fnCreateTreeViewItem					(cNode: TTreeNode; dqMasterData: TMQuery);
	procedure	fnCreateTreeViewItemEx					(cNode: TTreeNode; dqMasterData: TMQuery);
	procedure	fnCreateTreeViewItems					(cNode: TTreeNode);
	procedure	fnCreateTreeViewItemsEx					(cNode: TTreeNode);

	function	fnDeleteMasterRecord					(nNCODE: Extended): Boolean;
	function	fnDeleteMasterRecordHojyoMA				(nNCODE: Extended): Boolean;
	function	fnDeleteMasterRecordHojyoTree			(nNCODE: Extended): Boolean;
	function	fnDeleteMasterRecordSumSystem			(nNCODE: Extended): Boolean;
	function	fnDeleteOffsetRecord					(): Boolean;
    function	fnCopyStandardInfomation                (): Boolean;            // <153> 2006/12/19 H.Kawato Add
    function	fnDelPrjInfo                            (): Boolean;                                            // <161> Add
    function	fnChkPayKijituMankiData                 (nPayNCode, nPrjNCode, nPjSubNCode: Extended): Boolean; // <161> Add
    function	fnChkPayWayData                         (nPayNCode, nPrjNCode, nPjSubNCode: Extended): Boolean; // <161> Add
    function	fnChkPayStatusData 						(nPayNCode: Extended): Boolean;	// <222> ADD
    function	fnDeletePayOffsetInfo                   (nPayNCode, nPayPtnNo: Extended): Boolean;              // <161> Add
    function	fnDeletePayDetailInfo                   (nPayNCode, nPayPtnNo: Extended): Boolean;              // <161> Add
    function	fnDeletePayPtnDtl                       (nPayNCode, nPayPtnNo: Extended): Boolean;              // <161> Add
    function	fnDeletePayPtnInfo                      (nPayNCode, nPayPtnNo: Extended): Boolean;              // <161> Add
    function	fnDeletePayVariableItem					(nPayNCode, nPayPtnNo: Extended): Boolean;              // <222> ADD
	procedure	fnDeleteTreeViewItems					(nNCODE: Extended);
	procedure	fnDeleteTreeViewItemsSumSystem			(nNCODE: Extended);

	function	fnExchangeCharacterKanaDesc				(strDescription: String): String;
	function	fnEraseMasterRecordPayNayoseInfo		(nSumDivision: Integer; nNCODE: Extended): Boolean;
	function	fnEraseMasterRecordSumSystem			(nSumDivision: Integer; nNCODE: Extended): Boolean;
	procedure	fnEraseTreeViewItems					(nSumDivision: Integer; nNCODE: Extended);
	procedure	fnEraseTreeViewItemSumSystem			(nNCODE:Extended);

	function	fnGetAdoptInformation					(nMasterDivision: Integer; var nAdoption: Integer; var nCodeDigit: Integer; var nCodeAttribute: Integer; var strDescription: String): Boolean;
	function	fnGetBaseInfoValueDivideSheets			(): Integer;
	function	fnGetBitmapSelectedTag					(nSelectedTag: Integer): TBitmap;
	function	fnGetDescriptionSelectedItem			(cNumEdit: TMNumEdit; var strDescription: String): Boolean;
	function	fnGetDivisionSelectedTag				(strHojCode: String): Integer;
	function	fnGetEditedAccountNumber				(strAccountNo: String): String;
	function	fnGetEditedVisitorCode					(strVisitorCode: String): String;
    function	fnGetEntryNumberFinal (strHojCode: Extended): Integer;
	procedure	fnGetEntryOrderClosingDays				(var arEntryOrder: array of Integer);
	function	fnGetGuideComment						(nFieldID: Integer): String;
	function	fnGetIndexSelectItem					(cNumEdit: TMNumEdit): Integer;
// <222> ADD start
    function	fnGetPayVariable 						(dqQuery: TMQuery): Boolean;
    function	fnGetPayFbVariable (strID: String;
									var strSimpleName: String;
									var iDigit: Integer;
                                    var strRemarks: String): Boolean;
// <222> ADD end
	procedure	fnInitializeCheckItems					();
	procedure	fnInitializeComInformation				();
	function	fnInitializeExCodeAttribute				(): Boolean;
	procedure	fnInitializeOffsetJournalInfo			();
	function	fnInitializeProcedure					(): Boolean;
	procedure	fnInitializeScreen						();
	procedure	fnInitializeScreenDetails				();
	procedure	fnInitializeScreenDetailInfo			();
	procedure	fnInitializeScreenDetailInfo00			();                     // <149> 2006/10/11 H.Kawato Add    // 基本情報
	procedure	fnInitializeScreenDetailInfo01			();
	procedure	fnInitializeScreenDetailInfo02			();
	procedure	fnInitializeScreenDetailInfo03			();
// <211> MOD-STR
//	procedure	fnInitializeScreenDetailInfo04			(nDivision: Integer);
	procedure	fnInitializeScreenDetailInfo04			();
// <211> MOD-END
	procedure	fnInitializeScreenDetailInfo06			();
	procedure	fnInitializeScreenDetailInfo07			();
	procedure	fnInitializeScreenDetailInfo08			();                             // <211> ADD
	procedure	fnInitializeScreenDetailInfo09			();                             // <222> ADD
	procedure	fnInitializeScreenDetailInfo10			();                             // <222> ADD
	function	fnInitializeScreenStandard				(): Boolean;

	function	fnMakeSQLConstCSInfoInsert				(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstCSInfoUpdate				(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstHojyoMAInsert				(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstHojyoMAUpdate				(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo01Insert		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo01Update		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo02Insert		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo02Update		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo03Insert		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo03Update		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo04Insert		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo04Update		(pUpdateRecord: Pointer): String;
//<189> Add ↓↓↓
	function	fnMakeSQLConstPayDetailInfo05Insert		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayDetailInfo05Update		(pUpdateRecord: Pointer): String;
//<189> Add ↑↑↑
// <222> ADD start
	function	fnMakeSQLConstPayDetailInfo09Insert		(pUpdateRecord: Pointer): String;
    function	fnMakeSQLConstPayDetailInfo09Update 	(pUpdateRecord: Pointer): String;
    function	fnMakeSQLConstPayDetailInfo10Insert 	(pUpdateRecord: Pointer; nClass: Integer): String;
    function	fnMakeSQLConstPayDetailInfo10Update 	(pUpdateRecord: Pointer; nClass: Integer): String;
// <222> ADD end
	function	fnMakeSQLConstPayOffsetInfoInsert		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayOffsetInfoUpdate		(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayPtnDtlInsert			(pUpdateRecord: Pointer; nRow: Integer): String;
	function	fnMakeSQLConstPayDtlSyousaiInsert       (pUpdateRecord: Pointer; nRow: Integer): String;    // <149> 2006/10/11 H.Kawato Add
// <149> 2006/10/11 H.Kawato Mod Start
//	function	fnMakeSQLConstPayPtnInfoInsert			(pUpdateRecord: Pointer): String;
//	function	fnMakeSQLConstPayPtnInfoUpdate			(pUpdateRecord: Pointer): String;
	function	fnMakeSQLConstPayPtnInfoInsert			(pUpdateRecord: Pointer; lvKojiNCD, lvKosyuNCD: Extended): String;
	function	fnMakeSQLConstPayPtnInfoUpdate			(pUpdateRecord: Pointer; lvKojiNCD, lvKosyuNCD: Extended): String;
// <149> 2006/10/11 H.Kawato Mod End
// <222> ADD start
	function	fnMakeSQLConstPayVariableItemInsert		(pUpdateRecord: Pointer; strID: String; strValue: String): String;
	function	fnMakeSQLConstPayVariableItemUpdate		(pUpdateRecord: Pointer; strID: String; strValue: String): String;
// <222> ADD end
	function	fnMoveFocusNextControl					(cControl: TObject): Boolean;
	procedure	fnMoveRecSelecterGridStandard			(nDivision: Integer; strHojCode: String);
	procedure	fnMoveTreeViewItemSumSystem				(nNCODE:Extended;strHojCode: String; nNCodeParent: Extended; nNCodePrevious: Extended);

	function	fnOutputConfirmationMessage				(nDivision: Integer): Integer;
	procedure	fnOutputDBErrorMessage					();

	procedure	fnPrintCheckListDetail					();
	procedure	fnPrintCheckListExtStandard				();
	procedure	fnPrintCheckListSystem					();
	procedure	fnPrintCheckListTtlStandard				();
    procedure	fnPrintCheckListGaika					();		// <222> ADD

	procedure	fnRebuildTreeViewItems					();
	procedure	fnResetChangeDataFlagOffsetRecords		();
	procedure	fnResetChangeFlagCheckItems				();
	procedure	fnResetParentItemsInfo					();

	procedure	fnSaveDecomposeListRecords				();
	function	fnSearchRecordOffsetJournalInfo			(): Boolean;
	procedure	fnSelectTreeViewItem					(strHojCode: String);
	procedure	fnSetAttributeOffsetJournalInfo			(nKmkCode: Integer);
	procedure	fnSetAttributeOffsetJournalInfoPrint	(nKmkNCode: Extended);
	procedure	fnSetChangeDataFlagCheckItems			(Sender: TObject; fChangeFlag: Boolean);
	procedure	fnSetChangeFlagCheckItems				(Sender: TObject; fChangeFlag: Boolean);
	procedure	fnSetCommissionCalculateDivision		(nAreaNo: Integer; pRecord: Pointer);
	function	fnSetMasterInfoData						(): Boolean;
	procedure	fnSetMemDataOffsetRecord				();
	procedure	fnSetMemDataOffsetRecords				(nNCode: Extended);
	procedure	fnSetMemDataPrintAccountInfo			(nAccountCode: Integer; nClass: Integer);
    procedure	fnSetPrintGaikaAccountInfo				(exNCode: Extended; iAreaNo: Integer; iFieldID: Integer);	// <222> ADD
// <149> 2006/10/11 H.Kawato Mod Starat
//	procedure	fnSetMemDataPrintPayDetailInfo			(nNCode: Extended);
//	procedure	fnSetMemDataPrintPayOffsetInfo			(nNCode: Extended);
//	procedure	fnSetMemDataPrintPayPtnDtl				(pNCode: Extended; nDecDivision: Integer);
	procedure	fnSetMemDataPrintPayDetailInfo			(nNCode, nPayPtnNo: Extended);
	procedure	fnSetMemDataPrintPayOffsetInfo			(nNCode, nPayPtnNo: Extended);
	procedure	fnSetMemDataPrintPayPtnDtl				(pNCode, nPayPtnNo: Extended; nDecDivision: Integer);
	procedure	fnSetMemDataPrintPayDtlSyousai			(nNCode, nPayPtnNo: Extended; nPriPayWay, iBunkaiKbn: Integer);         // <149> Add
// <149> 2006/10/11 H.Kawato Mod End
	procedure	fnSetMemDataStandard					(dqMasterData: TMQuery);
	procedure	fnSetMemDataStandardRecords				(dqMasterData: TMQuery);
	procedure	fnSetMemDataSum							(dqMasterData: TMQuery);
	procedure	fnSetParentItemsInfo					(nDivision: Integer; strHojCode: String; nDivisionParent: Integer; nNCodeParent: Extended; strDescription: String);
	procedure	fnSetPaymentRecords						(nNCode: Extended; nDecDivision: Integer);
	function	fnSetRecordOffsetJournalInfo			(): Boolean;
	procedure	fnSetReportTitleField					(nSelected: Integer; var cTitleField: TStringList; var cMemDataField: TStringList);
	function	fnSetScreenDetails						(nNCode: Extended): Boolean;
	procedure	fnSetScreenDetailInformation00			(dqMasterData: TMQuery);            // <149> 2006/10/11 H.Kawato Add    // 基本情報
	procedure	fnSetScreenDetailInformation01			(dqMasterData: TMQuery);
	procedure	fnSetScreenDetailInformation02			(dqMasterData: TMQuery);
	procedure	fnSetScreenDetailInformation03			(dqMasterData: TMQuery);
// <211> MOD-STR
//	procedure	fnSetScreenDetailInformation04			(dqMasterData: TMQuery; nDivision: Integer);
	procedure	fnSetScreenDetailInformation04			(dqMasterData: TMQuery);
// <211> MOD-END
	procedure	fnSetScreenDetailInformation05			(dqMasterData: TMQuery);
	procedure	fnSetScreenDetailInformation06			(dqMasterData: TMQuery);
	procedure	fnSetScreenDetailInformation07			(dqMasterData: TMQuery);
	procedure	fnSetScreenDetailInformation08			(dqMasterData: TMQuery);            // <211> ADD
	procedure	fnSetScreenDetailInformation09			(dqMasterData: TMQuery);            // <222> ADD
    procedure	fnSetScreenDetailInformation09_2		(dqMasterData: TMQuery);            // <222> ADD
	procedure	fnSetScreenDetailInformation10			(dqMasterData: TMQuery; nClass: Integer);	// <222> ADD        
	procedure	fnSetScreenDetailInformations			(nNCODE: Extended);
	procedure	fnSetTagInfoGridStandard				(nDivision: Integer; nTagKind: Integer);
	procedure	fnSetTaxOffsetJournalInfo				(dqMasterData: TMQuery);
	function	fnShowScreenInformations				(): Boolean;

	procedure	fnTerminateCheckItems					();
	function	fnTerminateTreeViewItems				(): Boolean;

	function	fnUpdateMasterRecordCSInfo				(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordDetail				(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordHojyoMA				(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordHojyoTree			(pUpdateRecord: Pointer;PFlg:Integer): Boolean;
	function	fnUpdateMasterRecordMFusenInfo			(strHojCode: String; var nTagKind: Integer): Boolean;
	function	fnUpdateMasterRecordPayDetailInfo		(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordPayDtlSyousai		(pUpdateRecord: Pointer): Boolean;  // <149> 2006/10/11 H.Kawato Add
	function	fnUpdateMasterRecordPayNayoseInfo		(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordPayNayoseInfoEx		(strHojCodeParent: String; nNCODE: Extended): Boolean;
	function	fnUpdateMasterRecordPayOffsetInfo		(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordPayPtnDtl			(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordPayPtnInfo			(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordStandard			(pUpdateRecord: Pointer): Boolean;
	function	fnUpdateMasterRecordSumSystem			(cNodeSrc: TTreeNode; cNodeDst: TTreeNode): Boolean;
	procedure	fnUpdateMemDataStandardRecord			(nDivision: Integer; strHojCode: String; nTagKind: Integer);
	procedure	fnUpdateTreeViewItems					(strHojCode: String; strDescription: String);
	function	fnUpdateMasterRecordPayVariableItem		(pUpdateRecord: Pointer): Boolean;	// <222> ADD

	function	fnExcept								():Integer;						    // 排他制御処理
	function	fnGetZoom								(Int: Integer): Integer;		    //
// <222> ADD start
    function	fnGaiPayKbn								(iDspPayKbn: Integer): Integer;
    function	fnDspGaiPayKbn							(iPayKbn: Integer): Integer;
    function	fnGetPayNCode							(): Extended;
	function	fnFormatDspCode							(strGCode: String; iAttr: Integer; iDigit: Integer): String;
    procedure	fnDeleteMemVar							();
    procedure	fnSetStatusBarTxtVar					();
    procedure	fnSetFuncDelVar							();
    function	fnExistVarItem							(strItemID: String): Boolean;
    procedure	fnCallVariableExp						();
// <222> ADD end

    // 内部ｺｰﾄﾞ取得用
    function	fnGetBankNCode      (pCode: Integer): Extended;
    function	fnGetBranchNCode    (pBankCD: Extended;pBrCD: Integer): Extended;
    function    fnGetIraiNCode      (pIraiCD: Integer): Extended;
    function    fnGetKmkSubNCode    (iGCode:Integer; sSubCode:String):Extended;
    function    fnGetHojNCode       (iMstKbn:Integer;sGCode:String):Extended;


    procedure   fnGetMasterKbnFX();
    Procedure   fnFirstDetailDsp();
    procedure   fnCheckTekiDate(nDmqDataQry: TMQuery);

    procedure   fnSetFncType    (nFunc : Integer ; fEnabled : Boolean);
    procedure   fnFreeDlg       (nFunc: Integer);

    procedure   fnGetGrants     ();

    procedure   fnGetHojyoMA(dqMasterData: TMQuery);

    // 期日満期データチェック関数
    function	fnCheckPayKijituMankiData(): Boolean;                           // <132> 2006/06/15 H.Kawato Add

    // 詳細情報ダイアログの起動
    function    fnLaunchDlgSyousai(): Boolean;                                  // <149> 2006/10/11 H.Kawato Add

// <#TAX10> ADD-STR
	// 消費税率名称取得
	function  fnGetTaxRateName(nRateCD: Integer): String;
// <#TAX10> ADD-END

  end;

function    AppEntry (pPar: Pointer) : Integer;
exports
	AppEntry;

implementation

const

    ucSSG_MKBN              = 101;                                                      // ｾｸﾞﾒﾝﾄ開始
    ucESG_MKBN              = 199;                                                      // ｾｸﾞﾒﾝﾄ終了

    ucSKO_MKBN              = 201;                                                      // ﾌﾟﾛｼﾞｪｸﾄ開始
    ucEKO_MKBN              = 299;                                                      // ﾌﾟﾛｼﾞｪｸﾄ開始

	MASTER_SUBJECT			= 1;														// 勘定科目
	MASTER_SUBJECTPLUS		= 2;														// 細目科目
	MASTER_BANK				= 21;														// 銀行
	MASTER_CUSTOMER			= 22;														// 取引先
	MASTER_CUSTOMERPLUS01	= 23;														// 得意先
	MASTER_CUSTOMERPLUS02	= 24;														// 仕入先
	MASTER_STAFF			= 25;														// 社員
	MASTER_GENERAL01		= 31;														// 汎用補助①
	MASTER_GENERAL02		= 32;														// 汎用補助②
	MASTER_GENERAL03		= 33;														// 汎用補助③
	MASTER_GENERAL04		= 34;														// 汎用補助④
	MASTER_GENERAL05		= 35;														// 汎用補助⑤
	MASTER_SECTION			= 41;														// 部門
//	MASTER_SEGMENT01		= 42;														// ｾｸﾞﾒﾝﾄ①
//	MASTER_SEGMENT02		= 43;														// ｾｸﾞﾒﾝﾄ②
//	MASTER_SEGMENT03		= 44;														// ｾｸﾞﾒﾝﾄ③
//	MASTER_SEGMENT04		= 45;														// ｾｸﾞﾒﾝﾄ④

	TABLE_MASTERINFO		= 10;
	TABLE_HOJYOMA			= 111;
	TABLE_CSINFO			= 113;
	TABLE_HOJYOTREE			= 199;
	TABLE_HOJYOTREE2		= 299;
	TABLE_PAYPTNINFO		= 1602;
	TABLE_PAYPTNDTL			= 1603;
	TABLE_PAYDETAILINFO		= 1604;
	TABLE_PAYNAYOSEINFO		= 1605;
	TABLE_PAYOFFSETINFO		= 1606;

	LENGTH_NAME_CUSTOMER	= 60;														// 取引先 (全角30文字)

	CONFIRM_INSTRUCTION		= 0;														// 指示ｺﾝﾎﾞﾎﾞｯｸｽ
	CONFIRM_CANCEL			= 1;														// 取消ﾎﾞﾀﾝ
	CONFIRM_EXIT			= 2;														// 終了ﾎﾞﾀﾝ

	CONFIRM_THROUGH			= 0;
	CONFIRM_RETFOCUSED		= 1;														// 元の位置にﾌｫｰｶｽを戻す
	CONFIRM_WRITE			= 2;														// ﾃﾞｰﾀを保存

// <133> 2006/06/19 H.Kawato Mod
//	ITEMS_COUNT					= 113;
//	ITEMS_COUNT					= 114;
//	ITEMS_COUNT					= 116;  // <137> Mod
//	ITEMS_COUNT					= 88;   // <149> Mod
//	ITEMS_COUNT					= 90;   // <170> Mod
//	ITEMS_COUNT					= 91;   // <197> MOD
//	ITEMS_COUNT					= 108;  // <211> MOD
//	ITEMS_COUNT					= 109;  // <220> MOD
//	ITEMS_COUNT					= 119;  // <222> MOD
	ITEMS_COUNT					= 128;	// <222-8> MOD
// <133> 2006/06/19 H.Kawato Mod

	TREE_CHILD					= 0;
	TREE_CHILD_INVALID			= 12;
	TREE_CHILD_SUM				= 40;
	TREE_PARENT					= 1;
	TREE_PARENT_INVALID			= 13;
	TREE_PARENT_SUM				= 41;
	TREE_SYSTEM					= 9;
	TREE_SYSTEM_SUM				= 49;
	TREE_GENERAL				= 11;

	TREE_INDEX_SYSTEM			= 0;
	TREE_INDEX_SYSTEM_SUM		= 4;
	TREE_INDEX_PARENT			= 2;
	TREE_INDEX_PARENT_INVALID	= 16;
	TREE_INDEX_PARENT_SUM		= 6;
	TREE_INDEX_CHILD			= 8;
	TREE_INDEX_CHILD_INVALID	= 12;
	TREE_INDEX_CHILD_SUM		= 14;
	TREE_INDEX_GENERAL			= 10;

	UNIT_RECORDS_GRID_E			= 50;
	UNIT_RECORDS_GRID_T			= 50;
	UNIT_RECORDS_ALLOC			= 64;

	REQUISITE_OK				= 0;
	REQUISITE_CANCEL			= 1;
	REQUISITE_EXIT				= 9;

	CHECK_ERROR					= 0;
	CHECK_OK					= 1;
	CHECK_ESCAPE				= 2;
	CHECK_THROUGH				= 3;

	OPTION_GENERAL				= 0;
	OPTION_EXISTONLY			= 1;
    OPTION_FROM_BANKNCODE       = 2;            // <203> ADD

	NORMAL						= 1;													// 通常処理
	BASICONLY					= 2;													// 基本のみ設定可能(詳細ﾎﾞﾀﾝ使用不可)
	REFER						= 3;													// 参照

    TR_INS                      = 1;
    TR_UPD                      = 2;
    TR_NON                      = 0;

	// -----<172> Add-St-----
	GRP_SYNC_CHILD	= 1;						// ｸﾞﾙｰﾌﾟ会計採用あり 子会社
	C_ST_PROCESS	= 0;						// 設定
	C_ED_PROCESS	= 1;						// 開放
	// -----<172> Add-Ed-----

// <211> ADD-STR
    TI_PAYWAY                   = 0;            // 支払方法
	TI_FURIKOMI                 = 1;            // 振込情報
	TI_KFURIKOMI                = 2;            // 期日指定振込情報
	TI_BILL                     = 3;            // 手形／電子債権情報
	TI_CHECK                    = 4;            // 小切手情報
	TI_OFFSET                   = 5;            // 相殺情報
	TI_OTHERS1                  = 6;            // その他情報
	TI_OTHERS2                  = 7;            // その他情報２
    TI_WIRE						= 8;			// 電信送金情報  			<222> ADD
    TI_EXCHANGE					= 9;			// 為替手形／送金小切手情報	<222> ADD
// <211> ADD-END

// <222> ADD start
	// 可変項目情報のグリッド列index
	GRIDVAR_CLM_ID       		= 0;			// ID
    GRIDVAR_CLM_NAME			= 1;			// 簡略名
    GRIDVAR_CLM_DIGIT			= 2;			// 桁数
    GRIDVAR_CLM_ITEMVALUE		= 3;			// 内容

	MSG_CAP_INSERT				= '登録';
// <222-4> MOD start
//	MSG_VAR_DUPLICATE			= '同一項目IDが登録済みです';
	MSG_VAR_DUPLICATE			= '同一項目IDが登録済みです。';
// <222-4> MOD end
// <222> ADD end

var
	_TreeSystemCode: String	= '          ';
	_TreeSystemNCode: Extended	= 0;

	_MessageDec01  : String	= '分解基準値の合計が１００％になるように設定して下さい。';
	_MessageDec02  : String	= '最終行の分解基準値を自動セットしてもよろしいですか？';
	_MessageDec03  : String	= '未処理の期日指定振込満期データがありますが、よろしいですか？';   // <132> Add
	_MessageDel01  : String	= 'NO %dの相殺情報を削除します。よろしいですか？';

	_PMItemTVTag: String	= 'CmnPopupMenuTreeViewTag%.2d';
	_PMItemGSTag: String	= 'CmnPopupMenuGridStandardTag%.2d';
	_ETaxR		: String	= 'CmnEditTaxRate';
	_LTaxR		: String	= 'CmnLabelTaxRate';
	_ClsDay		: String	= 'CmnEdit07%.3dClosingDay';
	_ExpDay		: String	= 'CmnEdit07%.3dExpectDay';
	_ExpMon		: String	= 'CmnComboBox07%.3dExpectMonth';
	_HolDiv		: String	= 'CmnComboBox07%.3dHolDivision';
	_LExpDay	: String	= 'CmnLabel07%.3dExpectDay';
	_LExpMon	: String	= 'CmnLabel07%.3dExpectMonth';
	_LHolDiv	: String	= 'CmnLabel07%.3dHolDivision';

	_PayCol		: array [1..5] of String	 = ('CmnEdit01%.3dPaymentColumnDivision',
												'CmnEdit01%.3dPaymentColumnBasedValue',
												'CmnEdit01%.3dPaymentColumnMinimumPrice',
												'CmnEdit01%.3dPaymentColumnFractionPrice',
												'CmnEdit01%.3dPaymentColumnFraction'
											   );

    _TaxRateItems : array [0..2] of String	 = ('標準税率', '３％', '５％');
	_StandardItems: array [0..1] of String	 = ('なし', '採用');

// <222> ADD start
	// 外貨支払情報の標準支払方法
	_GaiPayKbn: array [0..2] of TGaiPayKbn = (
		(iKbn: 1; iDspKbn: 1; strDsp: '電信送金'),
        (iKbn: 3; iDspKbn: 2; strDsp: '為替手形'),
        (iKbn: 4; iDspKbn: 3; strDsp: '送金小切手')
        );
// <222> ADD end
	_PayMethod	  :	array [0.. 5] of String	 = ('0: なし',
												'1: 振込',
												'2: 期日指定振込',
												'3: 手形',
												'4: 小切手',
												'5: 現金'
											   );

	_TaxSalesItems: array [0.. 9] of String	 = (' 0: 科目設定に従う',
												'10: 課税売上(内税)',
												'12: 課税売上控除(内税)',
												'13: 課税貸倒償却(内税)',
												'15: 課税貸倒回収(内税)',
												'30: 非課税売上',
// <TXNM> MOD-STR
//												'34: 有価証券売上高(非課税)',
												'34: 有価証券売上等(非課税)',
// <TXNM> MOD-END
												'40: 不課税売上(精算取引)',
												'60: 輸出売上',
												'64: 非課税輸出売上'
											   );

// <TX26> MOD-STR
//	_TaxStockItems: array [0..15] of String	 = (' 0: 科目設定に従う',
	_TaxStockItems: array [0..17] of String	 = (' 0: 科目設定に従う',
// <TX26> MOD-END
												'10: 課税仕入(内税)',
												'11: 共通仕入(内税)',
												'12: 課税仕入控除(内税)',
												'14: 非課税売上対応仕入(内税)',
// <TX26> ADD-STR
												'15: 共通仕入控除(内税)',
												'16: 非課税売上対応仕入控除(内税)',
// <TX26> ADD-END
												'30: 非課税仕入',
												'40: 不課税仕入(精算取引)',
												'50: 棚卸調整消費税(課税)',
												'51: 棚卸調整消費税(共通)',
												'54: 棚卸調整消費税(非課税)',
												'65: 輸入仕入(地方消費税)',
												'66: 輸入共通仕入(地方消費税)',
												'69: 非課税売上対応輸入(地方)',
												'70: 輸入仕入(内税)',
												'71: 輸入共通仕入(内税)',
												'74: 非課税売上対応輸入(内税)'
											   );

	_TaxSalesOrigin: array [0..18] of String = (
												' 0: 科目設定に従う',
												'10: 課税売上(内税)',
												'12: 課税売上控除(内税)',
												'13: 課税貸倒償却(内税)',
												'15: 課税貸倒回収(内税)',
												'20: 課税売上(外税)',
												'22: 課税売上控除(外税)',
												'23: 課税貸倒償却(外税)',
												'25: 課税貸倒回収(外税)',
												'30: 非課税売上',
// <TXNM> MOD-STR
//												'34: 有価証券売上高(非課税)',
												'34: 有価証券売上等(非課税)',
// <TXNM> MOD-END
												'40: 不課税売上(精算取引)',
												'60: 輸出売上',
												'64: 非課税輸出売上',
												'80: 課税仕入対応特定収入',
												'81: 共通仕入対応特定収入',
												'84: 非課税仕入対応特定収入',
												'89: 使途不特定の特定収入',
												'99: 不明'
											   );

// <TX26> MOD-STR
//	_TaxStockOrigin: array [0..23] of String = (
	_TaxStockOrigin: array [0..25] of String = (
// <TX26> MOD-END
												' 0: 科目設定に従う',
												'10: 課税仕入(内税)',
												'11: 共通仕入(内税)',
												'12: 課税仕入控除(内税)',
												'14: 非課税売上対応仕入(内税)',
// <TX26> ADD-STR
												'15: 共通仕入控除(内税)',
												'16: 非課税売上対応仕入控除(内税)',
// <TX26> ADD-END
												'20: 課税仕入(外税)',
												'21: 共通仕入(外税)',
												'22: 課税仕入控除(外税)',
												'24: 非課税売上対応仕入(外税)',
												'30: 非課税仕入',
												'40: 不課税仕入(精算取引)',
												'50: 棚卸調整消費税(課税)',
												'51: 棚卸調整消費税(共通)',
												'54: 棚卸調整消費税(非課税)',
												'60: 輸入仕入(外税)',
												'61: 輸入共通仕入(外税)',
												'64: 非課税売上対応輸入(外税)',
												'65: 輸入仕入(地方消費税)',
												'66: 輸入共通仕入(地方消費税)',
												'69: 非課税売上対応輸入(地方)',
												'70: 輸入仕入(内税)',
												'71: 輸入共通仕入(内税)',
												'74: 非課税売上対応輸入(内税)',
												'99: 不明'
											   );

	_ExpectItems : array [0..9] of String	= ('当月', '翌月', '翌々月',
											   '3ヶ月後', '4ヶ月後', '5ヶ月後',
											   '6ヶ月後', '7ヶ月後', '8ヶ月後', '9ヶ月後');

	_HolidayItems: array [0..2] of String	= ('翌営業日', '前営業日', '当日');

	_CheckItems: array [0..ITEMS_COUNT - 1] of Integer	 = (
															00001,						// 00.取引先ｺｰﾄﾞ
//															00002,						// 00.連想                  // <149> 2006/10/11 H.Kawato Del
															00003,						// 00.正式名称
															00004,						// 00.簡略名称
//															00005,						// 00.適用期間(開始)        // <149> 2006/10/11 H.Kawato Del
//															00006,						// 00.適用期間(終了)        // <149> 2006/10/11 H.Kawato Del
															00011,						// 00.査定方法              // <149> 2006/10/11 H.Kawato Add
															00012,						// 00.分解パターン          // <149> 2006/10/11 H.Kawato Add
															00014,						// 00.工事ｺｰﾄﾞ              // <149> 2006/10/11 H.Kawato Add
															00016,						// 00.工種ｺｰﾄﾞ              // <149> 2006/10/11 H.Kawato Add
															00017,						// 00.査定金額計算区分      // <170> 2007/12/13 H.Kawato Add
															00018,						// 00.査定金額計算値        // <170> 2007/12/13 H.Kawato Add
                                                            00019,						// 00.外貨採用区分			// <222> ADD
                                                            00020,						// 00.標準支払方法			// <222> ADD
															01001,						// 01.分解方法
															01002,						// 01.① 支払方法
															01003,						// 01.① 分解基準値
															01004,						// 01.① 支払最低額
															01005,						// 01.① 端数処理額
															01006,						// 01.① 端数処理方法
															01007,						// 01.② 支払方法
															01008,						// 01.② 分解基準値
															01009,						// 01.② 支払最低額
															01010,						// 01.② 端数処理額
															01011,						// 01.② 端数処理方法
															01012,						// 01.③ 支払方法
															01013,						// 01.③ 分解基準値
															01014,						// 01.③ 支払最低額
															01015,						// 01.③ 端数処理額
															01016,						// 01.③ 端数処理方法
															01017,						// 01.④ 支払方法
															01018,						// 01.④ 分解基準値
															01019,						// 01.④ 支払最低額
															01020,						// 01.④ 端数処理額
															01021,						// 01.④ 端数処理方法
															01022,						// 01.⑤ 支払方法
															01023,						// 01.⑤ 分解基準値
															01024,						// 01.⑤ 支払最低額
															01025,						// 01.⑤ 端数処理額
															01026,						// 01.⑤ 端数処理方法
															01027,						// 01.受取人名称    <110>
//															01028,						// 01.支払通知書区分<110>   // <149> 2006/10/11 H.Kawato Del
//															01029,						// 01.査定方法      <133>   // <149> 2006/10/11 H.Kawato Del
															01030,						// 01.優先支払方法  <133>   // <149> 2006/10/11 H.Kawato Add
															02001,						// 02.振込依頼口座ｺｰﾄﾞ
															02002,						// 02.全銀協銀行ｺｰﾄﾞ
															02003,						// 02.全銀協支店ｺｰﾄﾞ
															02004,						// 02.銀行名称
															02005,						// 02.ｶﾅ銀行名称
															02006,						// 02.支店名称
															02007,						// 02.ｶﾅ支店名称
															02008,						// 02.ｶﾅ振込先名称
															02009,						// 02.預金種別
															02010,						// 02.口座番号
															02011,						// 02.FBｾｯﾄ区分
															02014,						// 02.EDI情報
															02012,						// 02.顧客ｺｰﾄﾞ1
															02013,						// 02.顧客ｺｰﾄﾞ2
															02015,						// 02.手数料負担
															02016,						// 02.手数料計算区分
															02017,						// 02.振込方法
															02018,						// 02.口座自動引落区分  <137>
															02019,						// 02.自動引落支払ﾃﾞｰﾀ  <137>
															03001,						// 03.振込依頼口座ｺｰﾄﾞ
															03002,						// 03.全銀協銀行ｺｰﾄﾞ
															03003,						// 03.全銀協支店ｺｰﾄﾞ
															03004,						// 03.銀行名称
															03005,						// 03.ｶﾅ銀行名称
															03006,						// 03.支店名称
															03007,						// 03.ｶﾅ支店名称
															03008,						// 03.ｶﾅ振込先名称
															03009,						// 03.預金種別
															03010,						// 03.口座番号
															03011,						// 03.FBｾｯﾄ区分
															03014,						// 03.EDI情報
															03012,						// 03.顧客ｺｰﾄﾞ1
															03013,						// 03.顧客ｺｰﾄﾞ2
															03015,						// 03.手数料負担
															03016,						// 03.手数料計算区分
															03017,						// 03.振込方法
															03018,						// 03.振込ｻｲﾄ
															03020,						// 03.期日前支払    <197> ADD
															03021,						// 02.期日指定振込依頼口座ｺｰﾄﾞ  <220>
															04001,						// 04.依頼口座ｺｰﾄﾞ
															04002,						// 04.手形ｻｲﾄ
															04003,						// 04.手形分割枚数
															04004,						// 04.手形郵送区分
															04005,						// 04.郵送料負担区分
// <211> MOD-STR
//															04006,						// 04.依頼口座ｺｰﾄﾞ
//															04007,						// 04.小切手郵送区分
//															04008,						// 04.郵送料負担区分
															04006,						// 04.電子債権採用区分
															04007,						// 04.全銀協銀行ｺｰﾄﾞ
															04008,						// 04.全銀協支店ｺｰﾄﾞ
															04019,						// 04.銀行名称
															04010,						// 04.ｶﾅ銀行名称
															04011,						// 04.支店名称
															04012,						// 04.ｶﾅ支店名称
															04013,						// 04.ｶﾅ振込先名称
															04014,						// 04.預金種別
															04015,						// 04.口座番号
															04016,						// 04.手数料負担
															04017,						// 04.手数料計算区分
                                                            04018,                      // 04.フリー項目１
                                                            04019,                      // 04.フリー項目２
                                                            04020,                      // 04.フリー項目３
                                                            04021,                      // 04.フリー項目４
                                                            04022,                      // 04.フリー項目５
// <211> MOD-END
															05001,						// 05.相殺№
															05002,						// 05.勘定科目ｺｰﾄﾞ
															05003,						// 05.補助ｺｰﾄﾞ1
															05004,						// 05.補助ｺｰﾄﾞ2
															05005,						// 05.補助ｺｰﾄﾞ3
															05006,						// 05.消費税ｺｰﾄﾞ
															05007,						// 05.消費税率ｺｰﾄﾞ
															05008						// 05.相殺金額
// <211> ADD-STR
														   ,08001						// 08.依頼口座ｺｰﾄﾞ
                                                           ,08002						// 08.小切手郵送区分
                                                           ,08003						// 08.郵送料負担区分
// <211> ADD-END
// <149> 2006/10/11 H.Kawato Del Start
{
															06001,						// 06.取引先分類
															06002,						// 06.名寄せ親代替取引先
// <110>															06003,						// 06.受取人名称
															06004,						// 06.郵便番号(基番)
															06005,						// 06.郵便番号(枝番)
															06006,						// 06.住所(上段)
															06007,						// 06.住所(下段)
															06008,						// 06.電話番号
															06009,						// 06.送付先部署
															06010,						// 06.担当者
															06011,						// 06.敬称区分
// <110>															06012,						// 06.支払通知書区分
															06013,						// 06.売上消費税ｺｰﾄﾞ
															06014,						// 06.売上消費税率ｺｰﾄﾞ
															06015,						// 06.仕入消費税ｺｰﾄﾞ
															06016,						// 06.仕入消費税率ｺｰﾄﾞ
															07001,						// 07.借方資金繰ｺｰﾄﾞ
															07002,						// 07.貸方資金繰ｺｰﾄﾞ
															07003,						// 07.支払予定日: ① 締日
															07004,						// 07.支払予定日: ① 予定月
															07005,						// 07.支払予定日: ① 予定日
															07006,						// 07.支払予定日: ① 休日
															07007,						// 07.支払予定日: ② 締日
															07008,						// 07.支払予定日: ② 予定月
															07009,						// 07.支払予定日: ② 予定日
															07010,						// 07.支払予定日: ② 休日
															07011,						// 07.支払予定日: ③ 締日
															07012,						// 07.支払予定日: ③ 予定月
															07013,						// 07.支払予定日: ③ 予定日
															07014						// 07.支払予定日: ③ 休日
}
// <149> 2006/10/11 H.Kawato Del End
// <222> ADD start
														   ,09001						// 09.依頼口座ｺｰﾄﾞ
														   ,09002						// 09.手数料口座ｺｰﾄﾞ
                                                           ,09003						// 09.手数料負担
                                                           ,09004						// 09.手数料計算区分
                                                           ,09005						// 09.可変項目情報(Grid)
                                                           ,09006						// 09.取引先照会番号		<222-8>ADD
                                                           ,09007						// 09.送金目的NO			<222-8>ADD
                                                           ,09008						// 09.送金目的内容			<222-8>ADD
                                                           ,09009						// 09.送金許可NO			<222-8>ADD
                                                           ,09010						// 09.送金許可日付			<222-8>ADD

                                                           ,10001						// 10.支払口座ｺｰﾄﾞ
                                                           ,10002						// 10.依頼口座ｺｰﾄﾞ
                                                           ,10003						// 10.手数料口座ｺｰﾄﾞ
                                                           ,10004						// 10.送金目的NO			<222-8>ADD
                                                           ,10005						// 10.送金目的内容			<222-8>ADD
                                                           ,10006						// 10.送金許可NO			<222-8>ADD
                                                           ,10007						// 10.送金許可日付			<222-8>ADD
// <222> ADD end
														   );

{$R *.DFM}
{$include JNTMASERRORCODECHECK.inc}
{$include JNTMASFUSENBIKODLGIFB.inc}
{$include JNTMasExceptIFB.inc}				                // 排他制御		//<#3>
{$include JNTPayProgRendoB.inc}                             // 2006/04/20 H.Kawato Add 進捗連動対応 <128>
{$include JNTPayProgRendoGB.inc}							// <222> ADD
{$include JNTCRPSyncMasterB.inc}                            // <Rel> ﾏｽﾀ同期共通実装部
{$include JNTMTOKUI_Sync.INC}                               // <Rel>
{$I MASTaxRateInfoB.inc}                                    // 消費税情報 <TX26> ADD
{$I PAYCommon_B.inc}                                        // <#TAX10> ADD

//***********************************************************************************************************/
//***********************************************************************************************************/
function	AppEntry (pPar: Pointer): Integer;
var
	pForm  : ^TJNTCRP004006f;
	pRecord: ^TMjsAppRecord;

begin
	Result	:= ACTID_RET_OK;
	pRecord	:= Pointer (TAppParam (pPar^).pRecord);

	case (TAppParam (pPar^).iAction) of

		ACTID_FORMCREATESTART:															// Form Create要求
			begin
				New (pForm);

				try																		// ｺﾝｽﾄﾗｸﾀのｴﾗｰは例外で拾う
					pForm^	:= TJNTCRP004006f.fnCreateForm (pPar);
					pRecord^.m_pChildForm	:= pForm;
				except
					Dispose (pForm);
					Result	:= ACTID_RET_NG;
				end;
			end;

		ACTID_FORMCREATESHOWSTART:														// Form Create&Show要求
			begin
				New (pForm);

				try																		// ｺﾝｽﾄﾗｸﾀのｴﾗｰは例外で拾う
					pForm^	:= TJNTCRP004006f.fnCreateForm (pRecord);
					pForm^.Show ();
					pRecord^.m_pChildForm	:= pForm;
				except
					Dispose (pForm);
					Result	:= ACTID_RET_NG;
				end;
			end;

		ACTID_FORMCLOSESTART:															// Form Close要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);
				pForm^.Close ();
				pForm^.Free  ();
				Dispose (pForm);
			end;

		ACTID_FORMCANCLOSESTART:														// Form CanClose要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);

				if	(pForm^.CloseQuery () = FALSE) then
					Result	:= ACTID_RET_NG;
			end;

		ACTID_SHOWSTART:																// Show要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);
				pForm^.Show ();
			end;

		ACTID_HIDESTART:																// Hide要求
			begin
				pForm	:= Pointer (pRecord^.m_pChildForm);

				if	(pForm^.Parent <> nil) then
	            	pForm^.Hide ();
	        end;
	end;
end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnCreateForm (Pointer)															*/
//*																											*/
//*	目的	: 支払情報登録処理 ｺﾝｽﾄﾗｸﾀ																		*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
constructor	TJNTCRP004006f.fnCreateForm (pRec: Pointer);
begin
	m_cDBCommon	:= nil;
	m_cDBSelect	:= nil;

    m_pRec          :=  Pointer( TAppParam( pRec^ ).pRecord );                  // 構造体のSave
	m_cDataModule	:= TMDataModulef    (m_pRec^.m_pDBModule^  );
	m_cComArea		:= TJNTMASCom       (m_pRec^.m_pSystemArea^);

    m_CmpList       := TList(TAppParam(pRec^).pActionParam^);

    m_nTantoNCd     := rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;           // <149> 2006/10/11 H.Kawato Add

	m_cDBCommon	:= m_cDataModule.CTLDBOpen ();

	if	(m_cDBCommon = nil) then
	begin
		ShowMessage ('ｴﾗｰ');
		raise	EMathError.Create ('ｴﾗｰ');
	end;

	m_cDBSelect	:= m_cDataModule.COPDBOpen (1, m_cComArea.m_iCopNo);

	if	(m_cDBSelect = nil) then
	begin
		ShowMessage ('ｴﾗｰ');
		raise	EMathError.Create ('ｴﾗｰ');
	end;

// <117>↓復帰 履歴用ｽﾄｱﾄﾞ呼び出し
//{<100>
	if	(not fnInitializeProcedure ()) then
	begin
		ShowMessage ('ｴﾗｰ');
		raise	EMathError.Create ('ｴﾗｰ');
	end;
//}
// <117>↑

	fnCMNPostInit (m_pRec);

    // 共通ｴｸｽﾌﾟﾛｰﾗの初期化
    uvExpOpenSW := FALSE;
    if fnJNTExpInit(Self,m_pRec) = 0 then
        uvExpOpenSW := TRUE
    else
		MjsMessageBox(Self,'ｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10
					+ 'ｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);

// <PRN> -----------Add↓-----------------

// <208> MOV-STR
    m_cJNTArea      :=  TJNTCommon   ( m_CmpList.Items[8]^ );
    m_Base_pRec     :=  Pointer      ( m_CmpList.Items[9]^ );
// <208> MOV-END

	m_cJNTArea.setSelAppRecord;     // <208> ADD

    // 会社別ｼｽﾃﾑ情報の初期化
    try
        uvSelSys := nil;
	    uvSelSys := TJNTSelCorpSys.Create(Self);
        if uvSelSys = nil then
            Abort;

// <208> MOD-STR
//    	if uvSelSys.CreateSysMsg(m_pRec) <> 0 then
    	if uvSelSys.CreateSysMsg(m_Base_pRec) <> 0 then
// <208> MOD-END
            Abort;
    except
		MjsMessageBox(self, 'ｼｽﾃﾑ情報の初期化に失敗です。', mjError, mjDefOk);
        raise;
    end;

  	m_cJNTArea.setMasAppRecord;     // <208> ADD

    //<119> add-start
    // 会社別ｼｽﾃﾑ情報読み込み
    try
    	if (uvSelSys.CreateSysInfo(m_cDBSelect) <> 0) then
            Abort;
    except
        MjsMessageBox(Self,'ｼｽﾃﾑ情報が取得できませんでした。', mjError, mjDefOk);
        raise;
    end;
    //<119> add-end

// <PRN> -----------Add↑-----------------

    m_PayProgRendo  := TJNTPayProgRendo.Create; // <128> 2006/04/20 H.Kawato Add
    m_ProgRendoFlg  := False;                   // <128> 2006/04/20 H.Kawato Add
    m_iSateiChgKbn  := 0;                       // <128> 2006/04/20 H.Kawato Add
    m_bSousaiChgFlg := False;                   // <136> 2006/06/21 H.Kawoat Add

    m_PayProgRendoG  := TJNTPayProgRendoG.Create; // <222> ADD
    m_ProgRendoGFlg  := False;                  // <222> ADD

    m_bKijituMankiFlg  := False;                // <132> 2006/06/15 H.Kawato Add
    m_iKijituUpdateFlg := 0;                    // <132> 2006/06/15 H.Kawato Add
    m_bBunkaiChgFlg    := False;                // <132> 2006/06/15 H.Kawato Add
    m_bExistProjRecord := False;				// <207> Add
    m_lstVariable 	:= TStringList.Create;		// <222> ADD

    SetLength(m_rCommonBmn, 1);                 // 共通部門、非課税部門 <210> ADD

inherited Create(TForm(m_pRec^.m_pOwnerForm^))

end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.CMChildKey (TWMKey)															*/
//*																											*/
//*	目的	: 支払情報登録処理 CM_CHILDKEY ﾒｯｾｰｼﾞ処理														*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.CMChildKey (var Msg: TWMKey);
var
	cShiftState	  : TShiftState;
	cTabOrderList : TList;
	strDescription: String;

    strFriEdCtlNm : String;         // <137> Add
    nReturn       : Integer;        // <149> Add
begin
	cShiftState	:= MJSKeyDataToShiftState(Msg.KeyData);		// <KDS> MOD

// <189> Add ↓↓↓
	//Alt + ↓ でコンボボックスの中を表示
	// Alt対応 （検索EXPも同様）
	if (GetKeyState( VK_MENU ) < 0) and (Msg.CharCode = VK_DOWN) then	//	AltKeyが押された時
		exit;
// <189> Add ↑↑↑
	if	(Screen.ActiveControl.Name = CmnTreeView.Name) then								// ﾂﾘｰﾋﾞｭｰ
	begin
		if	(Msg.CharCode = VK_RETURN) then
		begin
			if	(CmnPanelClientDetail.Visible) then
			begin
				if	(m_nCurCodeAttribute <= 1) then
					m_cACControl	:= CmnEdit00001HojCodeNumeric
				else
					m_cACControl	:= CmnEdit00001HojCodeFree;
			end
			else
			begin
				if	(CmnTabStandard.Items.Selected = 0) then
					m_cACControl	:= CmnGridStandardExist
				else
					m_cACControl	:= CmnGridStandardTotal;
			end;

			m_cACControl.SetFocus ();

			Abort ();
		end;

		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
			Abort ();
	end;

	if	(Screen.ActiveControl.Name = CmnTabStandard.Name) then
	begin
		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
			m_cACControl	:= CmnTreeView;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	if	((Screen.ActiveControl.Name = CmnGridStandardExist.Name) or
		 (Screen.ActiveControl.Name = CmnGridStandardTotal.Name)) then
	begin
		if	((Msg.CharCode = VK_HOME) and (cShiftState <> [ssCtrl])) then				// Home
		begin
			if	(TdxDBGrid (Screen.ActiveControl).EditingText = '') then
			begin
				TdxDBGrid (Screen.ActiveControl).FocusedColumn	:= 1;
				Abort ();
			end;
		end;

		if	((Msg.CharCode = VK_END) and (cShiftState <> [ssCtrl])) then				// End
		begin
	 		if	(TdxDBGrid (Screen.ActiveControl).EditingText = '') then
			begin
				if	(TdxDBGrid (Screen.ActiveControl).FocusedColumn = 1) then
				begin
					m_cACControl	:= CmnTreeView;
					m_cACControl.SetFocus ();
					Abort ();
				end
				else
				begin
					TdxDBGrid (Screen.ActiveControl).FocusedColumn	:= 4;
					Abort ();
				end;
			end;
		end;

		if	((Msg.CharCode = VK_ESCAPE) and (cShiftState = [])) then					// Esc
		begin
			if	((TdxDBGrid (Screen.ActiveControl).EditingText <> '') or
				 (TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.State in [dsEdit, dsInsert])) then
				Exit;

			m_cACControl	:= CmnTreeView;
			m_cACControl.SetFocus ();
			Abort ();
		end;

		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
			if	(TdxDBGrid (Screen.ActiveControl).FocusedColumn = 1) then
			begin
				m_cACControl	:= CmnTabStandard;
				m_cACControl.SetFocus ();
				Abort ();
			end;
		end;

		if	((TdxDBGrid (Screen.ActiveControl).FocusedColumn = 4) and ((Msg.CharCode = VK_F8) and (cShiftState = []))) then
		begin
			strDescription	:= MJSKabuCut (TdxDBGrid (
								Screen.ActiveControl).DataSource.DataSet.FieldByName ('strName').AsString, 14);

			if	(strDescription <> '') then
			begin
				TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.Edit ();
				TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.FieldByName ('strNameSimple').AsString	:= strDescription;
				TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.Post ();
			end;

			Abort ();
		end;

		Exit;
	end;

	if	(Screen.ActiveControl.Name = CmnEdit00004NameSimple.Name) then					// 詳細: 簡略名称
	begin
		if	((Msg.CharCode = VK_F8) and (cShiftState = [])) then						// F8
		begin
			strDescription	:= CmnEdit00003Name.Text;									// 正式名称

			if	(strDescription <> '') then
				CmnEdit00004NameSimple.Text	:= MJSKabuCut (strDescription, 14);

			Abort ();
		end;
	end;

	if	((Screen.ActiveControl.Name = CmnEdit00001HojCodeNumeric.Name) or
		 (Screen.ActiveControl.Name = CmnEdit00001HojCodeFree   .Name)) then
	begin
		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
// <125>↓
//			m_cACControl	:= CmnTabDetail;
			m_cACControl	:= MComboBox;   // 情報区分ｺﾝﾎﾞ
// <125>↑
			m_cACControl.SetFocus ();

			Abort ();
		end;

    	if	((Msg.CharCode = VK_ESCAPE) or (Msg.CharCode = VK_END)) then
        begin
			m_cACControl	:= MComboBox;
			m_cACControl.SetFocus ();

			Abort ();
        end;
	end;

// <153> 2006/12/19 H.Kawato Add Start
	if	(Screen.ActiveControl.Name = CmnEdit01001DecDivision.Name) then                 // 分解方法
	begin
        if  (Trim(CmnLabelPrjDetail.Caption) <> '【標準】') and                         // <165> Add
            (m_nReferMode <> REFER) then
        begin
		    if	((Msg.CharCode = VK_F1) and (cShiftState = [])) then                    // F1: 標準情報ｺﾋﾟｰ
            begin
            	fnCopyStandardInfomation ();
            	Abort ();
            end;
// <161> 2007/07/06 H.Kawato Add Start
//		    if	((Msg.CharCode = VK_F6) and (cShiftState = [])) then                    // F6: ﾌﾟﾛｼﾞｪｸﾄ別情報削除
// <207> Mod start
//		    if	((Msg.CharCode = VK_F6) and (cShiftState = [])) and (m_IsDelete) then   // F6: ﾌﾟﾛｼﾞｪｸﾄ別情報削除   <165> Mod
		    if	((Msg.CharCode = VK_F6) and (cShiftState = []))
            	 		and (m_IsDelete and m_bExistProjRecord) then					// F6: ﾌﾟﾛｼﾞｪｸﾄ別情報削除
// <207> Mod end
            begin
            	fnDelPrjInfo ();
            	Abort ();
            end;
        end;                                                                            // <165> Add
// <161> 2007/07/06 H.Kawato Add End
	end;
// <153> 2006/12/19 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Add Start
	if	(Screen.ActiveControl.Name = CmnEdit01030PriPayWayDivision.Name) then           // 優先支払方法
	begin
// <189> Mod
//      if (CmnEdit01030PriPayWayDivision.Value = 1) and
		if (CmnEdit01030PriPayWayDivision.Value <> 0) and				//優先支払方法が設定
// <189> Mod
           ((Msg.CharCode = VK_F6) and (cShiftState = [])) then                         // F6
        begin
            // 詳細情報設定ダイアログを起動
            fnLaunchDlgSyousai();
            Abort ();
        end;
		if	(CmnEdit01030PriPayWayDivision.AsInteger <> 0) and
			(CmnEdit01030PriPayWayDivision.Value     <> m_nPriPayWay) then
			// 詳細情報設定ダイアログを起動
			fnLaunchDlgSyousai();
	end;
// <149> 2006/10/11 H.Kawato Add End


// <198> 2010/10/27 G.Kojima Add Start
	if	(Screen.ActiveControl.Name = CmnEdit02002BankCode.Name) or                      // 振込情報タブ　銀行本店コード
        (Screen.ActiveControl.Name = CmnEdit02003BranchCode.Name) or                    // 振込情報タブ　銀行支店コード
        (Screen.ActiveControl.Name = CmnEdit03002BankCode.Name) or                      // 期日振込情報タブ　銀行本店コード
        (Screen.ActiveControl.Name = CmnEdit03003BranchCode.Name) then                  // 期日振込情報タブ　銀行支店コード
        begin
            if (Msg.CharCode = VK_F6) and (cShiftState = []) and (m_IsUpdate) then      // F6 + Shift無し + 更新権限あり
                BankInfoDlg();
        end;
// <198> End

// <204> Add start
	if (Screen.ActiveControl.Name = CmnEdit03001AccountCode.Name) then
    begin
        if	((Msg.CharCode = VK_F1) and (cShiftState = [])) then                    	// F1: 振込情報ｺﾋﾟｰ
        begin
            fnCopyFuriInfo ();
        end;
    end;
// <204> Add end

// <222> ADD start
	// 可変項目情報
	if (Screen.ActiveControl.Name = DBGridVar.Name) then
    begin
    	if ((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) or						// →、↓、↑、←、Enter、Tab
        	((Msg.CharCode = VK_DOWN) and (cShiftState = [])) or
            ((Msg.CharCode = VK_UP) and (cShiftState = [])) or
            ((Msg.CharCode = VK_LEFT) and (cShiftState = [])) or
            ((Msg.CharCode = VK_RETURN) and (cShiftState = [])) or
        	((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
        begin
        	Exit;							// グリッドにまかせる
        end;

		if	((Msg.CharCode = VK_ESCAPE) and (cShiftState = [])) then					// Esc
		begin
			if	((TdxDBGrid (Screen.ActiveControl).EditingText <> '') or
				 (TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.State in [dsEdit, dsInsert])) then
				Exit;

            if CmnButtonUpdate.CanFocus then
            begin
				m_cACControl	:= CmnButtonUpdate;  									// 更新ボタンへ
				m_cACControl.SetFocus ();
				Abort ();
            end;
		end;

		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then				// Shift + Tab
		begin
        	if (TdxDBGrid (Screen.ActiveControl).DataSource.DataSet.RecNo = 1) then		// 1行目の場合
			begin
                MJSDispCtrl.MjsPrevCtrl(Self);	// 前のパーツへ
                Abort ();
			end;
            Exit;
		end;

        if	((Msg.CharCode = VK_F1) and (cShiftState = [])) then                    	// F1: 項目情報削除
        begin
            fnDeleteMemVar ();				// 選択中の項目情報を削除
        end;
    end;
// <222> ADD end


// <149> 2006/10/11 H.Kawato ReMod
// 2006/08/02 H.Kawato Mod 査定方法の位置を変更
	if	((Screen.ActiveControl.Name = CmnEdit01001DecDivision.Name) or					// 詳細: (支払情報        ) 分解方法
//	if	((Screen.ActiveControl.Name = CmnEdit01029AssDivision.Name) or					// 詳細: (支払情報        ) 査定方法
// <149> 2006/10/11 H.Kawato ReMod
		 (Screen.ActiveControl.Name = CmnEdit02001AccountCode.Name) or					// 詳細: (振込情報        ) 振込依頼口座ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit03001AccountCode.Name) or					// 詳細: (期日指定振込情報) 振込依頼口座ｺｰﾄﾞ
// <211> MOD-STR
//		 (Screen.ActiveControl.Name = CmnEdit04001AccountCode.Name) or					// 詳細: (手形／小切手情報) 振込依頼口座ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit04001AccountCode.Name) or					// 詳細: (手形／電子債権情報) 振込依頼口座ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit08001AccountCode.Name) or					// 詳細: (小切手情報) 振込依頼口座ｺｰﾄﾞ
// <211> MOD-END
		 (Screen.ActiveControl.Name = CmnGridOffset          .Name) or					// 詳細: (相殺情報        )
		 (Screen.ActiveControl.Name = CmnEdit09001AccountCode.Name) or					// 詳細: (電信送金情報    ) 依頼口座ｺｰﾄﾞ		<222> ADD
         (Screen.ActiveControl.Name = CmnEdit10001AccountCode.Name) or					// 詳細: (為替手形/送金小切手情報) 支払口座ｺｰﾄﾞ	<222> ADD
		 (Screen.ActiveControl.Name = CmnEdit06001ClassCode  .Name) or					// 詳細: (その他情報１    ) 取引先分類ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit07001FundCode   .Name)) then				// 詳細: (その他情報２    ) 借方資金繰ｺｰﾄﾞ
	begin
		if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
		begin
			m_cACControl	:= CmnTabInformations;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	if	(Screen.ActiveControl.Name = CmnGridOffset.Name) then							// 相殺情報 ｸﾞﾘｯﾄﾞ
	begin
		if	(Msg.CharCode = VK_RETURN) then
		begin
// <AUT> MOD-STR
//          if m_cJNTArea.IsModify then     // <125>if追加
            if m_JNTAuthority.IsModify then     
// <AUT> MOD-END
            begin
    			m_cACControl	:= CmnEdit05002KmkCode;
	    		m_cACControl.SetFocus ();
            end;

			Abort ();
		end;

		if	((Msg.CharCode = VK_END   ) and (cShiftState = []) or						// End
			 (Msg.CharCode = VK_ESCAPE) and (cShiftState = [])) then					// Esc
		begin
			m_cACControl	:= CmnButtonUpdate;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	if	(Screen.ActiveControl.Name = CmnEdit05001SeqNo.Name) then						// 詳細: 相殺№
	begin
		if	((Msg.CharCode = VK_ESCAPE) or (Msg.CharCode = VK_END)) then
		begin
			m_cACControl	:= CmnButtonUpdate;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	if	((Screen.ActiveControl.Name = CmnEdit05002KmkCode       .Name) or				// 相殺情報: 科目ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit05003HojCodeNumeric.Name) or				// 相殺情報: 補助ｺｰﾄﾞ①
		 (Screen.ActiveControl.Name = CmnEdit05003HojCodeFree   .Name) or
		 (Screen.ActiveControl.Name = CmnEdit05004HojCodeNumeric.Name) or				// 相殺情報: 補助ｺｰﾄﾞ②
		 (Screen.ActiveControl.Name = CmnEdit05004HojCodeFree   .Name) or
		 (Screen.ActiveControl.Name = CmnEdit05005HojCodeNumeric.Name) or				// 相殺情報: 補助ｺｰﾄﾞ③
		 (Screen.ActiveControl.Name = CmnEdit05005HojCodeFree   .Name) or
		 (Screen.ActiveControl.Name = CmnEdit05006TaxCode       .Name) or				// 消費税ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit05007TaxRate       .Name) or				// 消費税率ｺｰﾄﾞ
		 (Screen.ActiveControl.Name = CmnEdit05008OffsetPrice   .Name)) then			// 相殺金額
	begin
// <165> 2007/07/24 H.Kawato Mod
//		if	((Msg.CharCode = VK_F1) and (cShiftState = [])) then						// F1: ﾚｺｰﾄﾞ削除
		if	((Msg.CharCode = VK_F1) and (cShiftState = [])) and (m_IsDelete) then		// F1: ﾚｺｰﾄﾞ削除
		begin
			fnDeleteOffsetRecord ();
			Abort ();
		end;

// <194> ADD-STR
		if	((Msg.CharCode = VK_F8) and (cShiftState = [])) then		                // F8: 付加情報
		begin
			fnLaunchSwkAddDlg ();
			Abort ();
		end;
// <194> ADD-END

        // CmnEdit0500Xにｶｰｿﾙが当てられないため金額にﾌｫｰｶｽが飛んでしまう現象を回避
    	if 	((Msg.CharCode = VK_RETURN) or
                (Msg.CharCode = VK_RIGHT) or
                (Msg.CharCode = VK_DOWN)  or
                ((Msg.CharCode = VK_TAB) and (cShiftState = []))) then
        begin
            if ((Screen.ActiveControl.Name = CmnEdit05002KmkCode.Name)
                        and (CmnEdit05002KmkCode.AsInteger <> m_sKmk ))  then
           	    fnSetAttributeOffsetJournalInfo (CmnEdit05002KmkCode.AsInteger);

        end;
	end;

	if	(Screen.ActiveControl.Name = CmnEdit05008OffsetPrice.Name) then					// 相殺金額
	begin
		if	((Msg.CharCode = VK_TAB) and (cShiftState = [])) then						// Tab
		begin
			if	(not fnCheckValidOffsetRecord ()) then
			begin
				Beep ();
				m_cACControl.SetFocus ();
				Abort ();
			end;

			fnSetMemDataOffsetRecord ();

			m_cACControl	:= CmnEdit05001SeqNo;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	if	((Screen.ActiveControl.Name = CmnButtonPageNext.Name) or						// [次頁]ﾎﾞﾀﾝ
		 (Screen.ActiveControl.Name = CmnButtonUpdate  .Name) or						// [更新]ﾎﾞﾀﾝ
		 (Screen.ActiveControl.Name = CmnButtonCancel  .Name)) then						// [取消]ﾎﾞﾀﾝ
	begin
		if	(((Msg.CharCode = VK_TAB)  and (cShiftState = [ssShift])) or	    		// ←
             ((Msg.CharCode = VK_LEFT) and (cShiftState = []))        or
			 ((Msg.CharCode = VK_UP  ) and (cShiftState = [])))       then
		begin
			MJSDispCtrl.MjsPrevCtrl (Self);
			Abort;
		end;

		if	(((Msg.CharCode = VK_RIGHT) and (cShiftState = []))       or                // →
			 ((Msg.CharCode = VK_DOWN ) and (cShiftState = [])))      then
		begin
            if (Screen.ActiveControl.Name <> CmnButtonCancel.Name) then
    			MJSDispCtrl.MjsNextCtrl (Self);
			Abort;
		end;
	end;

	if	(Screen.ActiveControl.Name = CmnButtonPagePrevious.Name) then					// [前頁]ﾎﾞﾀﾝ
	begin
		if	(((Msg.CharCode = VK_LEFT) and (cShiftState = [])) or						// ←
			 ((Msg.CharCode = VK_UP  ) and (cShiftState = []))) then
		begin
// <211> MOD-STR
//			if	(CmnTabInformations.Items.Selected = 4) then							// 詳細: (相殺情報)
			if	(CmnTabInformations.Items.Selected = TI_OFFSET) then 					// 詳細: (相殺情報)
// <211> MOD-END
			begin
// <125>↓
//				m_cACControl	:= CmnEdit05001SeqNo;									// 詳細: 相殺№
//				m_cACControl.SetFocus;
// <AUT> MOD-STR
//              if (m_cJNTArea.IsModify) then
                if (m_JNTAuthority.IsModify) then
// <AUT> MOD-END
                begin
    				m_cACControl	:= CmnEdit05001SeqNo;                               // 詳細: 相殺№
	    			m_cACControl.SetFocus ();
                end
                else
                begin
                    MJSDispCtrl.MjsPrevCtrl(Self);
                end;
// <125>↑
    			Abort;
			end
			else
            begin
				MJSDispCtrl.MjsPrevCtrl (Self);
    			Abort;
            end;
		end;

		if	(((Msg.CharCode = VK_RIGHT) and (cShiftState = []))       or                // →
			 ((Msg.CharCode = VK_DOWN ) and (cShiftState = [])))      then
		begin
  			MJSDispCtrl.MjsNextCtrl (Self);
			Abort;
		end;

// <211> MOD-STR
//		if	(CmnTabInformations.Items.Selected = 4) then								// 詳細: (相殺情報)
		if	(CmnTabInformations.Items.Selected = TI_OFFSET) then 						// 詳細: (相殺情報)
// <211> MOD-END
		begin

			if	((Msg.CharCode = VK_TAB) and (cShiftState = [ssShift])) then
            begin
// <125>↓
//				m_cACControl	:= CmnEdit05001SeqNo;									// 詳細: 相殺№
//				m_cACControl.SetFocus ();
// <AUT> MOD-STR
//              if (m_cJNTArea.IsModify) then
                if (m_JNTAuthority.IsModify) then
// <AUT> MOD-END
                begin
    				m_cACControl	:= CmnEdit05001SeqNo;									// 詳細: 相殺№
	    			m_cACControl.SetFocus ();
                end
                else
                begin
                    MJSDispCtrl.MjsPrevCtrl(Self);
                end;
// <125>↑
				Abort ();
			end;
		end;
	end;

	if	(Screen.ActiveControl.Name = CmnButtonCancel.Name) then							// [取消]ﾎﾞﾀﾝ
	begin
		if	((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
		begin
// <211> MOD-STR
//			if	(CmnTabInformations.Items.Selected = 4) then
			if	(CmnTabInformations.Items.Selected = TI_OFFSET) then
// <211> MOD-END
			begin
				m_cACControl	:= CmnEdit05001SeqNo;
				m_cACControl.SetFocus ();
			end
			else
			begin
				cTabOrderList	:= TList.Create ();

				TMPanel (CmnTabInformations.Items [CmnTabInformations.Items.Selected].SyncControl).GetTabOrderList (cTabOrderList);

				m_cACControl	:= cTabOrderList.First ();

				while (TRUE) do
				begin
					if	((m_cACControl is TMNumEdit) or (m_cACControl is TMTxtEdit)) then
						Break;

					cTabOrderList.Clear ();

					m_cACControl.GetTabOrderList (cTabOrderList);
					m_cACControl	:= cTabOrderList.First ();
				end;

                if m_cACControl.Name = CmnEdit06001ClassCode.Name then
// <110>                    CmnEdit06003ReceiverName.Setfocus
                    CmnEdit01027ReceiverName.Setfocus
                else
                    m_cACControl.SetFocus ();

				cTabOrderList.Free ();
			end;

			Abort ();
		end;
	end;


    // ﾎﾞﾀﾝ押し時
	if	((Screen.ActiveControl.Name = CmnButtonPagePrevious.Name) or					// [前頁]ﾎﾞﾀﾝ
         (Screen.ActiveControl.Name = CmnButtonPageNext.Name) or						// [次頁]ﾎﾞﾀﾝ
		 (Screen.ActiveControl.Name = CmnButtonUpdate  .Name) or						// [更新]ﾎﾞﾀﾝ
		 (Screen.ActiveControl.Name = CmnButtonCancel  .Name)) then						// [取消]ﾎﾞﾀﾝ
	begin
		if	(Msg.CharCode = VK_RETURN) then
        begin
// <125>↓
{            if Screen.ActiveControl = CmnButtonPagePrevious then
                fnCmnButtonPageOnClick(CmnButtonPagePrevious);
            if Screen.ActiveControl = CmnButtonPageNext     then
                fnCmnButtonPageOnClick(CmnButtonPageNext);
            if Screen.ActiveControl = CmnButtonUpdate       then
                fnCmnButtonUpdateOnClick(CmnButtonUpdate);
            if Screen.ActiveControl = CmnButtonCancel       then
                fnCmnButtonCancelOnClick(CmnButtonCancel);
}
            if Screen.ActiveControl = CmnButtonPagePrevious then
                fnCmnButtonPageOnClick(CmnButtonPagePrevious)
            else if Screen.ActiveControl = CmnButtonPageNext then
                fnCmnButtonPageOnClick(CmnButtonPageNext)
            else if Screen.ActiveControl = CmnButtonUpdate then
                fnCmnButtonUpdateOnClick(CmnButtonUpdate)
            else if Screen.ActiveControl = CmnButtonCancel then
                fnCmnButtonCancelOnClick(CmnButtonCancel);
// <125>↑
            Abort;
        end;
	end;

// <137> 2006/06/28 H.Kawato Add Start
    if (CmnEdit02018DebitDivision.Value = 0) then
        strFriEdCtlNm := CmnEdit02018DebitDivision.Name
    else
        strFriEdCtlNm := CmnEdit02019DebitData.Name;
// <137> 2006/06/28 H.Kawato Add End

    //　Tab内最終フィールド制御
// <149> 2006/10/11 H.Kawato Mod
//    if	( (Screen.ActiveControl.Name = CmnEdit01028PasDivision.Name)     or
    if	( (Screen.ActiveControl.Name = CmnEdit01027ReceiverName.Name)     or
// <137> 2006/06/28 H.Kawato Mod
//        (Screen.ActiveControl.Name = CmnEdit02017PayDivision.Name)     or
          (Screen.ActiveControl.Name = strFriEdCtlNm)                    or
// <197> MOD-STR
//    	  (Screen.ActiveControl.Name = CmnEdit03018PaySight.Name)        or
// <220> MOD-STR
//        ((Screen.ActiveControl.Name = CmnEdit03018PaySight.Name) and (MPanelKijitsuMae.Visible = False)) or
          ((Screen.ActiveControl.Name = CmnEdit03018PaySight.Name) and (MPanelKijitsuMae.Visible = False) and (MPanelKFuriBankCode.Visible = False)) or
          (Screen.ActiveControl.Name = CmnEdit03021AccountCode.Name) or
// <220> MOD-END
          (Screen.ActiveControl.Name = CmnEdit03020BeforeLimit.Name) or
// <197> MOD-END
// <211> MOD-STR
//    	  (Screen.ActiveControl.Name = CmnEdit04008BurDivision.Name)     or
    	  (Screen.ActiveControl.Name = CmnEdit08003BurDivision.Name)     or
// <211> MOD-END
    	  (Screen.ActiveControl.Name = CmnEdit06016TaxRate.Name)         or
    	  (Screen.ActiveControl.Name = CmnComboBox07014HolDivision.Name) or
{
    	 ((Screen.ActiveControl.Name = CmnEdit04007PosDivision.Name) and
          (not CmnEdit04008BurDivision.Enabled))                         or
}
// <211> MOD-STR
//    	 ((Screen.ActiveControl.Name = CmnEdit04007PosDivision.Name) and
//        (CmnEdit04007PosDivision.Value = 1))                           or
    	 ((Screen.ActiveControl.Name = CmnEdit08002PosDivision.Name) and
          (CmnEdit08002PosDivision.Value = 1))                           or
// <211> MOD-END
         ((Screen.ActiveControl.Name = CmnEdit07011ClosingDay .Name) and
    	  (CmnEdit07011ClosingDay.InputFlag)))                           or
// <222> ADD start
		(Screen.ActiveControl.Name = DBGridVar.Name) or					// 電信送金情報
        (Screen.ActiveControl.Name = CmnEdit10003AccountCode.Name) or	// 為替手形／送金小切手情報
// <222> ADD end
//<212> ADD St
         (Screen.ActiveControl.Name = CmnEdit04022Free5.Name) or
// <216> MOD-STR
//       ((Screen.ActiveControl.Name = CmnEdit04006ERKbn.Name) and
//        (CmnEdit04006ERKbn.Value = 0)) then
         ((Screen.ActiveControl.Name = CmnEdit04004PosDivision.Name) and
          (CmnEdit04004PosDivision.Value = 1)) or
         ((Screen.ActiveControl.Name = CmnEdit04005BurDivision.Name) and
          ((m_iErUseKbn = 0) or (CmnEdit04006ERKbn.Value = 0))) then
// <216> MOD-END
//<212> ADD Ed
    begin
        if (Msg.CharCode = VK_RETURN) or
//<212> ADD St
           ((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) or
           ((Msg.CharCode = VK_DOWN) and (cShiftState = [])) or
//<212> ADD Ed
           ((Msg.CharCode = VK_TAB) and (cShiftState = [])) then
        begin
//<212> ADD St
            if (Screen.ActiveControl is TMTxtEdit) and
               (((Msg.CharCode = VK_RIGHT) and (cShiftState = [])) or
                ((Msg.CharCode = VK_DOWN) and (cShiftState = []))) then
            begin
                // キャレットが終了に達していない場合は抜ける
                if not MjsChkCurEnd(Screen.ActiveControl) then
                    Exit;
            end;
//<212> ADD Ed
    		if	(CmnButtonPageNext.Enabled) then
        	begin
    			m_cACControl	:= CmnButtonPageNext;
        		m_cACControl.SetFocus ();

    			Abort;
        	end;
    	end;
    end;

    // ｷｰｲﾍﾞﾝﾄをinheritedするとOnKeyDownが発生しなくなる為Exitする
//    if ((Screen.ActiveControl = CmnEdit00001HojCodeFree)    or
//        (Screen.ActiveControl = CmnEdit00001HojCodeNumeric) or
//        (Screen.ActiveControl = CmnEdit05008OffsetPrice))   then
//        Exit;


    //<113> St------------------------------------------
    if (Msg.CharCode = VK_TAB) and (cShiftState = []) then
    begin
// <149> 2006/10/11 H.Kawato Add Start  支払方法「0:なし」でTabｷｰが押された時、受取人名称にﾌｫｰｶｽを移動する
        if (Copy (Screen.ActiveControl.Name, 13, 21) = 'PaymentColumnDivision') then
        begin
			nReturn	:= fnCheckDecomposeListRecord (TMNumEdit(m_cACControl));

			if	(nReturn = CHECK_ERROR) then
			begin
				Beep ();
				m_cACControl.SetFocus ();
				Abort ();
			end
			else if	(nReturn = CHECK_ESCAPE) then
			begin
                m_cACControl	:= CmnEdit01027ReceiverName;
                m_cACControl.SetFocus ();
                abort;
            end
            else
            begin
                fnMoveFocusNextControl (Screen.ActiveControl);
                abort;
			end;

            Exit;
        end;
// <149> 2006/10/11 H.Kawato Add End
        fnMoveFocusNextControl (Screen.ActiveControl);
        abort;
    end;

    if (Msg.CharCode = VK_TAB) and (cShiftState = [ssShift]) then
    begin
		MJSDispCtrl.MjsPrevCtrl (Self);
		Abort ();
    end;
    //<113> Ed------------------------------------------

	inherited;

end;
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnDiscontinue (var Msg: TMessage);
var
	cMessageRec: TMJSMsgRec;

begin
	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 10);

	cMessageRec.sMsg	:= m_cComArea.m_MsgStd.MsgChange (cMessageRec.sMsg, '@_@', '取引先');

	Beep ();

	MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle,
							cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

	Close ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnChangeScreenCondition (var Msg: TMessage);
begin
	CmnPanelInformations.Visible	:= FALSE;
	CmnPanelInformations.Visible	:= TRUE;
	CmnPanelInformations.Visible	:= FALSE;
end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnCreate (TObject)												*/
//*																											*/
//*	目的	: 基本情報登録処理 ﾌｫｰﾑ OnCreate ｲﾍﾞﾝﾄ															*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnCreate (Sender: TObject);
var
	fDiscontinue: Boolean;

//	i:integer;
    iRet        :   Integer;        // <PRN>
//  lvHandle    :   THandle;        // <PRN>  // <146> 2006/08/17 H.Kawato Del
	iLoop		:	Integer;		// <175> Add
// <210> ADD-STR
	dqMasterData:   TMQuery;
    i           :   Integer;
// <210> ADD-END
begin

//<101>
//    m_cJNTArea      :=  TJNTCommon.Create(Self);
//    m_cJNTArea.Init(m_pRec);

    // 親BPLにあるﾎﾞﾀﾝのﾎﾟｲﾝﾀを取得<100>

    m_bBtnChange 	:=  TRUE;   // <111>

    B_Print 	    :=  TMSpeedButton( m_CmpList.Items[0]^ );       // 印刷
    B_Syousai       :=  TMSpeedButton( m_CmpList.Items[1]^ );
    B_Delete        :=  TMSpeedButton( m_CmpList.Items[2]^ );
// <208> MOV-STR
//  m_cJNTArea      :=  TJNTCommon   ( m_CmpList.Items[8]^ );
//  m_Base_pRec     :=  Pointer      ( m_CmpList.Items[9]^ );
// <208> MOV-END
    MComboBox       :=  TMComboBox   ( m_CmpList.Items[10]^ );
    B_Change        :=  TMSpeedButton( m_CmpList.Items[11]^ );      // <111>
	m_SyncMaster    :=  TSyncMaster  ( m_CmpList.Items[13]^ );      // <Rel>
    m_JNTAuthority  := TJNTAuthority ( m_CmpList.Items[16]^ );      // <AUT> ADD

    B_Print.OnClick     :=  fnCmnButtonToolbarPrintOnClick;
    B_Change.OnClick    :=  BChangeClick;                           // <111>

	m_cJNTArea.setMasAppRecord;                                     // 販売ポインタ設定

	Parent	:= TPanel (m_pRec^.m_pOwnerPanel^);
//	Align	:= alClient;    // 2006/08/18 H.Kawato Del フォーム表示位置の調整

	MJSColorChange (TJNTCRP004006f (Self), m_cComArea.SystemArea.SysColorB, m_cComArea.SystemArea.SysColorD,
									m_cComArea.SystemArea.SysBaseColorB, m_cComArea.SystemArea.SysBaseColorD,
															rcCOMMONAREA (m_pRec^.m_pCommonArea^).SysFocusColor);

	m_ZoomRatio := MJSFontResize (TJNTCRP004006f (Self), Pointer (m_pRec));		//<#8>(戻り値取得)

	// -----<172> Add-St-----
	SPMsHist.DatabaseName := m_cDBSelect.DatabaseName;
	SPMsHist.SessionName  := m_cDBSelect.SessionName;

												// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
		SPMsHistParent.DatabaseName	:= m_SyncMaster.m_cPDBSelect.DatabaseName;
		SPMsHistParent.SessionName	:= m_SyncMaster.m_cPDBSelect.SessionName;
	end;
	// -----<172> Add-Ed-----

    // ファンクション設定
    fnSetFncType(1,False);
    fnSetFncType(6,False);          // <149> 2006/10/11 H.Kawato Add
    fnSetFncType(8,False);

//--- <#8> St -----
	if m_ZoomRatio <= 0 then
		m_ZoomRatio := 100;

	// ToolBarの位置
//	ToolBar1.Left         := CmnButtonToolbarDelete.Left+CmnButtonToolbarDelete.Width;
//	MJSCompoResize(ToolBar1,1,Pointer(m_pRec));
//	ToolBar1.ButtonHeight := ToolBar1.Height;
//--- <#8> Ed -----

	m_cPreview		:= TMJSPreviewIF.Create ();
//<100>	m_cPayAccExp	:= TPayAccExpIF .Create ();

	m_cPreview  .Init (m_pRec);
//<100>	m_cPayAccExp.Init (m_pRec);

    fnGetMasterKbnFX;    // 採用区分取得

	fnInitializeComInformation ();
	fnInitializeCheckItems	   ();

	fDiscontinue	:= FALSE;

// <#TAX10> ADD-STR
	// 消費税率情報
   	m_TaxRateInfo		:= nil;
   	m_TaxRateInfoFront	:= nil;
// <#TAX10> ADD-END

//↓<Rel>
	// この時点で、参照ﾓｰﾄﾞ以外のときのみ、以下の論理を行う。
	if (m_nReferMode <> REFER) then
	begin
        // 全社の過年度DBを選択している場合
        if ( m_SyncMaster.m_flgGrpCorp = 0 ) then
        begin
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                if ( MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Oya,
                                        'グループ会計', mjQuestion, mjYesNo, mjDefNO) = mrYES ) then
                begin
                    // 通常のﾏｽﾀ登録として起動する。
                    // 登録したﾏｽﾀについて_RELの作成はしない。(Triggerでﾁｪｯｸを行う)
                    // 通常ﾓｰﾄﾞ
                end
                else
                begin
                    // 更新ﾎﾞﾀﾝは、入力不可の状態で起動する。
                    // ﾏｽﾀをUpdata、Insertすることはできない。
                    m_cJNTArea.Invalidity;

                    // 参照ﾓｰﾄﾞ
                    m_nReferMode := REFER;
                end;
            end;
        end
        // 子会社(ｸﾞﾙｰﾌﾟ会計採用有)
        else if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 子会社が過年度DBの場合
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_K,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;

                // 参照ﾓｰﾄﾞ
                m_nReferMode := REFER;
            end
            // 親会社が過年度DBの場合
            else if  ( m_SyncMaster.m_PEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_O,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;

                // 参照ﾓｰﾄﾞ
                m_nReferMode := REFER;
            end;
        end;
	end;
//↑<Rel>

// <175> Add
	//<相殺>補助内部コード
	for iLoop := Low(m_dSousaiNCode) to High(m_dSousaiNCode) do
		m_dSousaiNCode[iLoop]	:= 0;
// <175> Add

// <137> 2006/06/28 H.Kawato Add Start
    m_bShowPrjInfo      := False;                                               // ﾌﾟﾛｼﾞｪｸﾄ情報表示ﾌﾗｸﾞ     <149>
    m_bStandardInfo     := False;                                               // 標準情報コピー用ﾌﾗｸﾞ     <153>
	m_iHeikouData	    := 0;												    // 平行支払採用区分
	m_iHeikouCount      := 0;												    // 平行支払処理件数
    m_iProAdoptKbn      := 0;                                                   // ﾌﾟﾛｼﾞｪｸﾄ別支払採用区分   <149>
    m_iSubAdoptKbn      := 0;                                                   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用区分<149>
    m_iProjectKbn       := 0;                                                   // ﾌﾟﾛｼﾞｪｸﾄ区分             <149>
    m_iGaikaUseKbn		:= 0;													// 外貨債務管理採用区分 	<222>

    fnGetPayBaseInfo();

    m_iSubProjKbn   := m_iProjectKbn + 100;                                     // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ区分

    if (m_iSubAdoptKbn = 0) then
    begin
//        CmnEdit00011AssDivision.SelectItems.Delete(6);    // <156> Del
        CmnEdit00012DecPtnDivision.SelectItems.Delete(2);
    end;

    if (m_iProAdoptKbn = 0) then
    begin
//        CmnEdit00011AssDivision.SelectItems.Delete(5);    // <156> Del
        CmnEdit00012DecPtnDivision.SelectItems.Delete(1);
    end;

// <156> 2007/02/08 H.Kawato Add Start
    CmnEdit00011AssDivision.SelectItems.Add('0: 指定なし');
    CmnEdit00011AssDivision.SelectItems.Add('1: 全体');

    if (m_iBmnAssAdopt = 1) then
    begin
        CmnEdit00011AssDivision.SelectItems.Add('2: 部門別');
        CmnEdit00011AssDivision.SelectItems.Add('4: 明細');
    end
    else if (m_iKmkAssAdopt = 1) then
    begin
        CmnEdit00011AssDivision.SelectItems.Add('3: 科目別');
        CmnEdit00011AssDivision.SelectItems.Add('4: 明細');
    end
    else
    begin
        CmnEdit00011AssDivision.SelectItems.Add('4: 明細');

        if (m_iProAdoptKbn = 1) then
        begin
            CmnEdit00011AssDivision.SelectItems.Add('5: プロジェクト別');

            if (m_iSubAdoptKbn = 1) then
                CmnEdit00011AssDivision.SelectItems.Add('6: プロジェクトサブ別');
        end;
    end;
// <156> 2007/02/08 H.Kawato Add End
// <137> 2006/06/25 H.Kawato Add End

	if	(not fnSetMasterInfoData ()) then
	begin
		PostMessage (Self.Handle, WM_DISCONTINUE, 0, 0);								// 処理中止

		fDiscontinue	:= TRUE;
	end;

	m_nCurItemDivision		:= TREE_SYSTEM;
	m_strCurHojCode			:= '';
	m_nCurNCode	    		:= 0;
	m_strHojCodeGeneral		:= '';
	m_fSetOffsetJournal		:= FALSE;
	m_fThroughTab			:= FALSE;
	m_fThroughTabStandard	:= FALSE;
	m_fIgnoreProc			:= FALSE;
	m_nHojyoTree			:= 0;
	m_nPayNayoseInfo		:= 0;
    m_BtnClick              := False;   //<112>
    m_TabClick              := False;   //<140>

	CmnGridStandardExist.FocusedColumn	:= 1;
	CmnGridStandardTotal.FocusedColumn	:= 1;

	CmnTreeView           .Enabled	:= FALSE;
	CmnSplitter           .Enabled	:= FALSE;

	if	(not fnInitializeScreenStandard ()) then
	begin
		if	(not fDiscontinue) then
			PostMessage (Self.Handle, WM_DISCONTINUE, 0, 0);							// 処理中止

		fDiscontinue	:= TRUE;
	end
	else
	begin
		fnInitializeScreen	  ();
		fnChangeConditionGrid ();
	end;

// <222> ADD start
	if not TMSeries.IsGalileopt then
    begin
    	// 新Gali
        if m_iGaikaUseKbn = 1 then			// 外貨債務管理の採用ありのとき
        begin
			fnInitGaikaDsp();				// 外貨債務パーツ表示
        end;
    end;
// <222> ADD end

    fnFirstDetailDsp();

	if	(fDiscontinue) then
	begin
		CmnPanelClientStandard.Enabled	:= TRUE;
		m_cACControl	:= CmnGridStandardExist;
	end
	else
    begin
    	if	(m_nCurCodeAttribute <= 1) then
	    	m_cACControl	:= CmnEdit00001HojCodeNumeric
		else
			m_cACControl	:= CmnEdit00001HojCodeFree;
    end;


    // コード未確定時使用不可
    CmnScrollBoxInformation.Enabled := false;
    CmnPanelButtons.Enabled := false;

// <197> ADD-STR
	// 期日前支払区分
    if (StrToInt('0' + GetPayCommonValue('Shiharai', 'RISOKU_CALC')) <> 0) then
    begin
        MPanelKijitsuMae.Visible := True;
    end;
// <197> ADD-END

// <220> ADD-STR
	// 期日指定振込科目切替
    if (StrToInt('0' + GetPayCommonValue('Shiharai', 'PAYSWK_KFURI_KMK')) <> 0) then
    begin
        MPanelKFuriBankCode.Visible := True;
    end;
// <220> ADD-END

// <PRN> -----------Add↓-----------------

    // MQueryの構築
    DmqPrint    :=  TMQuery.Create (self);
    // DBとMQueryの接続
    m_cDataModule.SetDBInfoToQuery(m_cDBSelect,DmqPrint );


    { ﾛｰﾄﾞﾊﾟｯｹｰｼﾞ処理}
//    lvHandle := 0;    // <146> 2006/08/17 H.Kawato Del
	try
// <146> 2006/08/17 H.Kawato Mod
//		lvHandle    :=  LoadPackage(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004006L.BPL');
// <LPH> MOD-STR
//		m_RepHandle    :=  LoadPackage(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004006L.BPL');
		m_RepHandle    :=  LoadPackageHelper(rcCOMMONAREA(m_pRec^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP004006L.BPL');
// <LPH> MOD-END
// <146> 2006/08/17 H.Kawato Mod

// <146> 2006/08/17 H.Kawato Mod
//        if ( lvHandle = 0 ) then
        if ( m_RepHandle = 0 ) then
// <146> 2006/08/17 H.Kawato Mod
            Abort;
	except
		MjsMessageBox(Self, 'JNTCRP004006LのLoadPackageに失敗しました。' + #13 + '処理終了します。' , mjError, mjDefOk);
		Exit;
	end;

    // Export関数ｱﾄﾞﾚｽの取得
// <146> 2006/08/17 H.Kawato Mod
//    PrintAppEntry := GetProcAddress(lvHandle,'PrintAppEntry');
    PrintAppEntry := GetProcAddress(m_RepHandle,'PrintAppEntry');
// <146> 2006/08/17 H.Kawato

    if ( @PrintAppEntry = nil ) then
    begin
	    MjsMessageBox(self, 'PrintAppEntry関数ｱﾄﾞﾚｽの取得に失敗しました。', mjError, mjDefOk);
// <146> 2006/08/17 H.Kawato Mod
//    	UnloadPackage( lvHandle );
// <LPH> MOD-STR
//    	UnloadPackage( m_RepHandle );
    	UnloadPackageHelper( m_RepHandle );
// <LPH> MOD-END
// <146> 2006/08/17 H.Kawato Mod
    end;

    { 印刷用ﾓｼﾞｭｰﾙを生成 }
    try
        with PrtParam do
		begin
            Para		    :=  uvHani;
			TargetQry	    :=  nil;
            TargetMD        :=  nil;
			CorpSys		    :=  uvSelSys;
            // *** 汎用変数 *** //
            TargetParam	    :=  nil;
	    	TargetStr	    :=  '';
    		TargetInt	    :=  0;
            // *** 汎用変数 *** //
            iAPP_HDL_REC    :=  100;
		end;
        ArrHdl[0] := @m_JNTAuthority;   // <AUT> ADD
		iRet := PrintAppEntry(Self,m_Base_pRec,0,PrtParam,ArrHdl);
		if ( iRet = 0 ) then
			Abort;
	except
		MjsMessageBox(Self,'印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙの作成に失敗しました。'#13#10#13#10
				 + '印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙは使用できません。', mjError, mjDefOk);
	end;

    // 帳票用ﾊﾟﾗﾒｰﾀ初期化
    gfnHaniInit(Self,
                m_Base_pRec,
                m_cDataModule,
                m_cComArea,
                m_cDBSelect,
                'JNTCRP004006',
                uvHani,
                uvSelSys);

// <PRN> -----------Add↑-----------------
// <210> ADD-STR
    // 共通部門、非課税部門を取得
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode, BunCode' +
                   '  FROM HojyoMA' +
		           ' WHERE MasterKbn = 41' +    // 41.部門
                   '   AND SumKbn = 0' +        // 0.実在
                   '   AND BunCode IN (1, 2)' + // 1.共通部門、2.非課税部門
                   '   AND RDelKbn = 0');       // 0.正規レコード

		Open ();

		while (not EOF) do
		begin
            i := Length(m_rCommonBmn);
            SetLength(m_rCommonBmn, i + 1);

            m_rCommonBmn[i].NCode   := FieldByName ('NCode').AsCurrency;
            m_rCommonBmn[i].BunCode := FieldByName ('BunCode').AsInteger;

			Next;
		end;
// <221> ADD-STR
        Close ();
        SQL.Clear ();
        SQL.Add   ('SELECT DataVer FROM DTMAIN');
        Open ();
        if (FieldByName('DataVer').AsInteger < 45) then
        begin
            // H26消費税改正対応版では銀行別電債手数料対応はなし
            CmnLabelErComCalc.Visible := False;
            CmnEdit04017ComCalculation.Visible := False;
            CmnLabel04017ComCalculationDesc.Visible := False;
        end;
// <221> ADD-END
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
// <210> ADD-END
// <211> ADD-STR
    if TMSeries.IsGalileopt then
    begin
        // 旧Galileoptの場合は高さが足りないのでフリー項目を調整
        MPanelFrees.Height := (115 - 22 * 2 - 5);
        CmnPanelInformation04.Height := (342 - 22 * 2 - 20);
        CmnPanelInformations.Height := (381 - 22 * 2 - 20);
    end;
// <211> ADD-END

// <TX26> ADD-STR
	// 消費税情報取得
    m_TaxRateInfo := TMASTaxRateInfo.Create(m_pRec, m_cDBSelect);
// <#TAX10> ADD-STR
	m_TaxRateInfo.SortType			:=	SORT_ASC;					//下位の処理で並び変えるため、昇順で取得
	m_TaxRateInfo.AddReducedExpress	:=	REDUCEDEXPRESS_REAR;
// <#TAX10> ADD-END
    m_TaxRateInfo.Initialize();

    with CmnEdit05007TaxRate.SelectItems do
    begin
        Clear;
        Add('0: 標準税率');
        for iLoop := m_TaxRateInfo.FTaxRateList_All.Count - 1 downto 1 do
        begin
            if m_TaxRateInfo.IsExistRateCD(m_TaxRateInfo.FTaxRateList_All.Objects[iLoop].RateCD) then
            begin
                Add(IntToStr(m_TaxRateInfo.FTaxRateList_All.Objects[iLoop].RateCD) + ': ' + m_TaxRateInfo.FTaxRateList_All.Objects[iLoop].TaxName);
            end;
        end;
    end;
// <TX26> ADD-END
// <#TAX10> ADD-STR
   	m_TaxRateInfoFront := TMASTaxRateInfo.Create(m_pRec, m_cDBSelect, m_cDBCommon);	// 消費税率情報（軽減税率含む（印刷用））
	m_TaxRateInfoFront.SortType				:=	SORT_ASC;
	m_TaxRateInfoFront.AddReducedExpress	:=	REDUCEDEXPRESS_NONE;
	m_TaxRateInfoFront.Initialize;
// <#TAX10> ADD-END
end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnActivate (TObject)											*/
//*																											*/
//*	目的	: 支払情報登録処理 ﾌｫｰﾑ OnActivate ｲﾍﾞﾝﾄ														*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnActivate (Sender: TObject);
var
	cAppParam: TAppParam;

begin
	cAppParam.iAction		:= ACTID_ACTIVEEND;
	cAppParam.pRecord		:= Pointer (m_pRec);
	cAppParam.pActionParam	:= nil;

	TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppParam);
end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnCloseQuery (TObject)											*/
//*																											*/
//*	目的	: 支払情報登録処理 ﾌｫｰﾑ OnCloseQuery ｲﾍﾞﾝﾄ														*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnCloseQuery (Sender: TObject; var CanClose: Boolean);
var
//	stMessageRec: TMJSMsgRec;
	pMasterData	: ^MasterData;
	nReturn		: Integer;
	fReturn		: Boolean;

    RendoInitRet    : Integer;                  // <128> 2006/04/20 H.Kawato Add
    ProgRendoParam  : TJNTPAYProgRendoParam;    // <128> 2006/04/20 H.Kawato Add

    RendoInitRetG   : Integer;                  // <222> ADD
    bRendoInitG		: Boolean;					// <222> ADD
    ProgRendoParamG : TJNTPAYProgRendoParamG;   // <222> ADD

    iLoop       : Integer;                      // <182> ADD
    bRendoInit  : Boolean;                      // <186> ADD
begin
    fReturn := False;

	// <124> >>
    if ( uvHani.mjspre.IsPreView = True ) then
    begin
		uvSelSys.MsgDlg(10040,2);
        CanClose := False;
        Exit;
    end;
	{
	if	(m_cPreview.IsPreView ()) then
	begin
		m_cComArea.m_MsgStd.GetMsg (stMessageRec, 10040, 2);

		MJSMessageBoxEx (Self,stMessageRec.sMsg, stMessageRec.sTitle, stMessageRec.icontype,
												stMessageRec.btntype, stMessageRec.btndef, stMessageRec.LogType);

		CanClose	:= FALSE;
	end;
	}
	// <124> <<

// <222> ADD start
	// 可変項目グリッド表示中
	if DBGridVar.Visible then
    begin
    	// 入力中の場合はPostする
        if CmnMemDataVar.State in [dsEdit, dsInsert] then
        begin
            CmnMemDataVar.Post;
        end;
    end;
// <222> ADD end

	nReturn	:= fnOutputConfirmationMessage (CONFIRM_EXIT);

	if	(nReturn = CONFIRM_RETFOCUSED) then
	begin
		CanClose	:= FALSE;
		Exit;
	end
	else if	(nReturn = CONFIRM_WRITE) then
	begin
// <149> 2006/12/13 H.Kawato Add Start  ※優先支払方法がある場合、優先支払方法以外の支払方法を設定する
        if (CmnEdit01030PriPayWayDivision.Value <> 0) then
        begin
            if	(CmnEdit01007PaymentColumnDivision.Value = 0) then
            begin
    			CanClose	:= FALSE;
// <211> MOD-STR
//              CmnTabInformations.Items.Selected := 0;
                CmnTabInformations.Items.Selected := TI_PAYWAY;
// <211> MOD-END
                CmnEdit01007PaymentColumnDivision.SetFocus;
                abort;
            end;
        end;

        if	(not fnCheckDecomposeListBasedValue ()) then
        begin
        	m_cACControl.SetFocus ();

        	TEdit (m_cACControl).SelectAll ();
        	Beep  ();
        	Abort ();
        end;
// <149> 2006/12/13 H.Kawato Add End

		New (pMasterData);

		if	(m_nCurCodeAttribute <= 1) then
			pMasterData^.strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
		else
			pMasterData^.strHojCode	:= CmnEdit00001HojCodeFree.Text;

// <149> 2006/10/11 H.Kawato Mod Start  実在・合計情報タブ
//		pMasterData^.nSumDivision	:= CmnTabDetail.Items.Selected;
        if (Trim(CmnLabelDetail.Caption) = '【合計】') then
            pMasterData^.nSumDivision	:= 1
        else
            pMasterData^.nSumDivision	:= 0;
// <149> 2006/10/11 H.Kawato Mod End
		pMasterData^.strAssociation	:= CmnEdit00002Association.Text;
		pMasterData^.strName		:= CmnEdit00003Name       .Text;
		pMasterData^.strNameSimple	:= CmnEdit00004NameSimple .Text;
		pMasterData^.fDetails		:= TRUE;
// <106>        pMasterData^.nNCODE         := fnGetHojNCode(MASTER_CUSTOMER,pMasterData^.strHojCode);
        pMasterData^.nNCODE         := fnGetNCODE(pMasterData^.strHojCode);

// <128> 2006/04/20 H.Kawato Add
        RendoInitRet := -1;
        RendoInitRetG := -1;	 						// <222> ADD
        bRendoInit := False;                            // <186> ADD

        fnPayProgRendoCheck;
	    fnPayProgRendoCheckG;							// <222> ADD

        try     // <136> 2006/06/21 H.Kawato Add

            if m_ProgRendoFlg = True then
            begin
                // 進捗連動 初期処理
                ProgRendoParam.pAppRecord    := Pointer(m_pRec);
                ProgRendoParam.iOptCd        := 54;             // オプションコード・債務処理       //<142> 2006/08/04 H.Kawato Add
                ProgRendoParam.iPrgCd        := 210100;         // プログラムコード・支払情報登録   //<142> 2006/08/04 H.Kawato Add
                ProgRendoParam.dPAYCode      := pMasterData^.nNCode;
                ProgRendoParam.iSateiChgKbn  := m_iSateiChgKbn; // 変更無し
                ProgRendoParam.iNayoseChgKbn := 0;              // 変更あり
                ProgRendoParam.iSyoriKbn     := 0;              // 支払情報登録系処理
            	ProgRendoParam.iSystemCode   := 1;              // 債務管理	<177>

                RendoInitRet := m_PayProgRendo.Init(ProgRendoParam);
                bRendoInit := True;                             // <186> ADD
// <182> ADD-STR
            end
            else
            begin
                RendoInitRet := 0;

// <211> MOD-STR
//              for	iLoop := 1 to 4 do
                for iLoop := Low(m_arModifyFlg) to High(m_arModifyFlg) do
// <211> MOD-END
                begin
                    if (m_arModifyFlg[iLoop]) then
                    begin
                        ProgRendoParam.pAppRecord    := Pointer(m_pRec);
                        ProgRendoParam.iOptCd        := 54;             // オプションコード・債務処理
                        ProgRendoParam.iPrgCd        := 210100;         // プログラムコード・支払情報登録
                        ProgRendoParam.dPAYCode      := pMasterData^.nNCode;
                        ProgRendoParam.iSateiChgKbn  := 0;              // 変更無し
                        ProgRendoParam.iNayoseChgKbn := 0;              // 変更無し
                        ProgRendoParam.iSyoriKbn     := (iLoop + 1);
                        ProgRendoParam.iSystemCode   := 1;              // 債務管理

// <215> MOD-STR
//                      if (m_PayProgRendo.Init(ProgRendoParam) = 1) then
//                      begin
//                          RendoInitRet := 1;
//                          bRendoInit := True;                             // <186> ADD
//                      end
//                      else
//                      begin
//                          m_arModifyFlg[iLoop] := False;
//                      end;

                        case m_PayProgRendo.Init(ProgRendoParam) of
                            0:  m_arModifyFlg[iLoop] := False;          // 申請ロールバックの必要なし
                            1:  begin                                   // 要ロールバック
                                    RendoInitRet := 1;
                                    bRendoInit := True;
                                end;
                        else
                            RendoInitRet := 10;                         // 上記以外はエラー
                        end;
// <215> MOD-END
                    end;
                end;
// <182> ADD-END
            end;

// <222> ADD start
            { 外貨債務進捗連動 初期処理 }
            RendoInitRetG := fnSetRendoInitG(pMasterData^.nNCode, ProgRendoParamG, bRendoInitG);
// <222> ADD end

// <215> MOD-STR
//          if (m_ProgRendoFlg = False) or
//             (m_ProgRendoFlg = True) and ((RendoInitRet = 1) or (RendoInitRet = 0)) then
// <222> MOD start
//            if (RendoInitRet in [0, 1]) then
            if (RendoInitRet in [0, 1]) and
            	(RendoInitRetG in [0,1]) then
// <222> MOD end
// <215> MOD-END
            begin
// <128> 2006/04/20 H.Kawato Add
                fReturn	:= fnUpdateMasterRecordDetail (pMasterData);
// <128> 2006/04/20 H.Kawato Add
            end;

// <136> 2006/06/21 H.Kawato Mod Start
{
        if m_ProgRendoFlg = True then
        begin
            // 進捗連動 実行終了処理
            if RendoInitRet = 1 then
            begin
                m_PayProgRendo.Exec;
                m_ProgRendoFlg  := False;
                m_iSateiChgKbn  := 0;
            end;

            m_PayProgRendo.Term;
        end;
}
            if (m_ProgRendoFlg = True) and (RendoInitRet = 1) then
            begin
                // 進捗連動 実行終了処理
                m_PayProgRendo.Exec;
                m_iSateiChgKbn  := 0;
                m_bSousaiChgFlg := False;
            end;

// <182> ADD-STR
            if (m_ProgRendoFlg = False) and (RendoInitRet = 1) then
            begin
// <211> MOD-STR
//              for	iLoop := 1 to 4 do
                for iLoop := Low(m_arModifyFlg) to High(m_arModifyFlg) do
// <211> MOD-END
                begin
                    if (m_arModifyFlg[iLoop]) then
                    begin
                        m_PayProgRendo.Exec2(iLoop + 1);
                        m_arModifyFlg[iLoop] := False;
                    end;
                end;
            end;
// <182> ADD-END
// <222> ADD start
            { 外貨債務進捗連動 }
            if (m_ProgRendoGFlg = True) and (RendoInitRetG = 1) then
            begin
                // 進捗連動 実行終了処理
                m_PayProgRendoG.Exec;
            end;

            if (m_ProgRendoGFlg = False) and (RendoInitRetG = 1) then
            begin
                if m_bModifyGaikaFlg then
                begin
                    m_PayProgRendoG.Exec2(0);
                    m_bModifyGaikaFlg := False;
                end;
            end;
// <222> ADD end

        finally
// <182> MOD-STR
//          if m_ProgRendoFlg = True then
//          begin
//              if RendoInitRet = 1 then
//                  m_ProgRendoFlg  := False;
//
//               m_PayProgRendo.Term;
//          end;
// <186> MOD-STR
//          if RendoInitRet = 1 then
//          begin
//              m_ProgRendoFlg  := False;
//              m_PayProgRendo.Term;
//          end;
            if bRendoInit = True then
            begin
                if RendoInitRet = 1 then
                    m_ProgRendoFlg  := False;

                m_PayProgRendo.Term;
            end;
// <186> MOD-END
// <182> MOD-END
// <222> ADD start
		{ 外貨債務進捗連動 破棄 }
        if bRendoInitG = True then
        begin
            if RendoInitRetG = 1 then
                m_ProgRendoGFlg  := False;

            m_PayProgRendoG.Term;
        end;
// <222> ADD end
        end;
// <136> 2006/06/21 H.Kawato Mod End
// <128> 2006/04/20 H.Kawato Add

		Dispose (pMasterData);

		if	(not fReturn) then
		begin
			CanClose	:= FALSE;
			Exit;
		end;
	end;

	fnResetChangeFlagCheckItems ();
end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnClose (TObject; var TCloseAction)								*/
//*																											*/
//*	目的	: 支払情報登録処理 ﾌｫｰﾑ OnClose ｲﾍﾞﾝﾄ															*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnClose (Sender: TObject; var Action: TCloseAction);
var
//	dqTreeWork		: TMQuery;
	cAppPrm			: TAppParam;
//	cMessageRec		: TMJSMsgRec;
//	cDlgMasTree2	: TJNTMasTreee2Dlgf;
//	arMasterDivision: Array of Integer;

begin
    //<100>
    B_Syousai   :=nil;
    B_Print 	:=nil;
    B_Delete    :=nil;


	//fnTerminateTreeViewItems (); <227>del

{<100>
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_MASTERINFO   , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_HOJYOMA      , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_CSINFO       , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_HOJYOTREE    , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYPTNINFO   , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYPTNDTL    , MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYDETAILINFO, MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYNAYOSEINFO, MASTER_CUSTOMER, 0, 0);
	MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYOFFSETINFO, MASTER_CUSTOMER, 0, 0);
}

{	if	(m_nPayNayoseInfo = 1) then
		MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_PAYNAYOSEINFO, MASTER_CUSTOMER, 0, 1);

	if	(m_nHojyoTree = 1) then
	begin
		MailHisUpdate (m_cDBSelect, m_cDataModule, TABLE_HOJYOTREE, MASTER_CUSTOMER, 0, 1);

		SetLength (arMasterDivision, 1);

		arMasterDivision [0]	:= MASTER_CUSTOMER;

		cDlgMasTree2	:= TMasTreee2Dlgf.Create (Self);

		if	(cDlgMasTree2.ExecTree2 (rcCOMMONAREA (m_pRec^.m_pCommonArea^).sysRoot,
									m_cDataModule, m_cComArea.m_iCopNo, arMasterDivision, dqTreeWork) < 0) then
		begin
			if	(dqTreeWork <> nil) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (cMessageRec, dqTreeWork);
				MJSMessageBoxEx (Self, cMessageRec.sMsg, cMessageRec.sTitle,
											cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, FALSE);
				dqTreeWork.Free ();
			end
			else
				MJSMessageBoxEx (Self, cMessageRec.sMsg, cMessageRec.sTitle,
											cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, FALSE);
		end;

		cDlgMasTree2.Close ();
		cDlgMasTree2.Free  ();
	end;
}
	Action	:= caFree;

	fnCMNPostFree ();

//<100>	m_cPayAccExp.Term ();

	fnTerminateCheckItems ();

//<101>
//    m_cJNTArea.Free;

    // 印刷用ｸｴﾘｰの開放<PRN>
    DmqPrint.Close();
    DmqPrint.Free();


    // 共通ｴｸｽﾌﾟﾛｰﾗの開放
    if uvExpOpenSW = TRUE then
        fnJNTExpFree;

//--- <#3> St -----
	// 排他情報ﾘｾｯﾄ
	if m_cExcept <> nil then
	begin
		m_cExcept.ResetTerm;
		m_cExcept.Free;
	end;
//--- <#3> Ed -----

	m_cDataModule.CTLDBClose (m_cDBCommon);
	m_cDataModule.COPDBClose (m_cDBSelect);

	m_pRec^.m_iDelete		:= 1;

	cAppPrm.iAction			:= ACTID_FORMCLOSEEND;										// 呼び出し区分設定
	cAppPrm.pRecord			:= Pointer (m_pRec);										// 管理構造体ﾎﾟｲﾝﾀ設定
	cAppPrm.pActionParam	:= nil;				  										// 予備ﾎﾟｲﾝﾀ設定

	TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppPrm);

    Action := caFree;

end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnShow (TObject)												*/
//*																											*/
//*	目的	: 支払情報登録処理 ﾌｫｰﾑ OnShow ｲﾍﾞﾝﾄ															*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnShow (Sender: TObject);
var
    bProjectKbn :   Boolean;                    // <149> 2006/10/11 H.Kawato Add

begin
	JNTMasSetCaption (m_pRec);
	MJSBtnVisible (TJNTCRP004006f (Self), TRUE);

// <149> 2006/10/11 H.Kawato Mod Start  実在・合計情報タブ
{
	if	(CmnTabDetail.Items.Selected = 0) then
		fnChangeConditionScreenDetails (TRUE)
	else
		fnChangeConditionScreenDetails (FALSE);
}
	if	(Trim(CmnLabelDetail.Caption) = '【合計】') then
		fnChangeConditionScreenDetails (FALSE)
	else
		fnChangeConditionScreenDetails (TRUE);
// <149> 2006/10/11 H.Kawato Mod End

	fnChangeConditionTaxRelated (13);           // 売上消費税
	fnChangeConditionTaxRelated (15);           // 仕入消費税

// <149> 2006/10/11 H.Kawato Add Start
    if (m_iProAdoptKbn = 0) then                // プロジェクト別支払　採用なし
        bProjectKbn := False
    else                                        // プロジェクト別支払　採用あり
        bProjectKbn := True;

    CmnLabelDecPtnDivision.Enabled              := bProjectKbn;                 // 分解ﾊﾟﾀｰﾝﾗﾍﾞﾙ
    CmnEdit00012DecPtnDivision.Enabled          := bProjectKbn;                 // 分解ﾊﾟﾀｰﾝ区分
    CmnLabel00012DecPtnDivisionDesc.Enabled     := bProjectKbn;                 // 分解ﾊﾟﾀｰﾝ名称
// <189> Mod
//  CmnLabelPriPayWayDivision.Enabled           := bProjectKbn;                 // 優先支払方法ﾗﾍﾞﾙ
//  CmnEdit01030PriPayWayDivision.Enabled       := bProjectKbn;                 // 優先支払方法区分
//  CmnLabel01030PriPayWayDivisionDesc.Enabled  := bProjectKbn;                 // 優先支払方法名称
	CmnLabelPriPayWayDivision.Enabled           := True;						// 優先支払方法ﾗﾍﾞﾙ
	CmnEdit01030PriPayWayDivision.Enabled       := True;						// 優先支払方法区分
	CmnLabel01030PriPayWayDivisionDesc.Enabled  := True;						// 優先支払方法名称
// <189> Mod

//    fnChkProjectEnabled(bProjectKbn);                                           // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ 入力可不可制御 <206> Del
// <149> 2006/10/11 H.Kawato Add End

	if	(m_cPreview.IsPreView ()) then
		m_cPreview.Show ()
	else
		m_cACControl.SetFocus ();

end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnHide (TObject)												*/
//*																											*/
//*	目的	: 支払情報登録処理 ﾌｫｰﾑ OnHide ｲﾍﾞﾝﾄ															*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnHide (Sender: TObject);
begin
	MJSBtnVisible (TJNTCRP004006f (Self), FALSE);

	if	(m_cPreview.IsPreView ()) then
		m_cPreview.Hide ();
end;


//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnJNTCRP004006fOnPaint (TObject)												*/
//*																											*/
//*	目的	: 支払情報登録処理 ﾌｫｰﾑ OnPaint ｲﾍﾞﾝﾄ															*/
//*																											*/
//*	戻り値	: なし,                                     		                                            */
//*																											*/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnJNTCRP004006fOnPaint (Sender: TObject);
begin
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionOnEnter (Sender: TObject);
var
	cMessageRec : TMJSMsgRec;
	strComment  : String;
//    iLoop		: Integer;					// <222-3> DEL 未使用
// <210> ADD-STR
	dqMasterData: TMQuery;
    iTaxCode,
    iTaxRate    : Integer;
// <210> ADD-END
begin
// <217> ADD-STR
    if (TWinControl(Sender).Name = CmnEdit04018Free1.Name) or
       (TWinControl(Sender).Name = CmnEdit04019Free2.Name) or
       (TWinControl(Sender).Name = CmnEdit04020Free3.Name) or
       (TWinControl(Sender).Name = CmnEdit04021Free4.Name) or
       (TWinControl(Sender).Name = CmnEdit04022Free5.Name) then
    begin
        CmnStatusBar.SimpleText := m_arFreeInfo[StrToInt(Copy(TWinControl(Sender).Name, 17, 1))];
    end
    else
        CmnStatusBar.SimpleText := '';
// <217> ADD-END
// <149> 2006/10/11 H.Kawato Add Start
    if  ((m_bDecPtnChange = True) and
         (TWinControl (m_cACControl).Name = 'CmnEdit00012DecPtnDivision' )) then
        fnBunkaiPtnChange();

    if  ((PCheckItemRec (m_cCheckItems.Items [5])^.fChangeData = True) and
         (Copy(TWinControl (m_cACControl).Name,1,20) = 'CmnEdit00014KojiCode' )) or
        ((PCheckItemRec (m_cCheckItems.Items [6])^.fChangeData = True) and
         (Copy(TWinControl (m_cACControl).Name,1,21) = 'CmnEdit00016KosyuCode')) then
    begin
        if  (not fnProjectChangeOver(m_cACControl)) then
        begin
            m_cACControl.SetFocus();
            Beep;
        end
        else
           	fnSetChangeDataFlagCheckItems (m_cACControl, FALSE);

        abort;
    end;
// <149> 2006/10/11 H.Kawato Add End

	m_fIgnoreProc	:= FALSE;

	m_cACControl	:= Screen.ActiveControl;

// <164> 2007/07/19 H.Kawato Add Start
    // プロジェクト別支払採用あり
    if  (m_iProAdoptKbn > 0) then
    begin
        if (CmnEdit00012DecPtnDivision.Value > 0) and (m_nPayPtnNo2 <> 0) and               // 分解ﾊﾟﾀｰﾝがﾌﾟﾛｼﾞｪｸﾄ別、かつ標準情報の登録あり
           ((TWinControl (Sender).Name = CmnEdit00011AssDivision.Name) or                   // 査定方法
            (TWinControl (Sender).Name = CmnEdit00012DecPtnDivision.Name) or                // 分解パターン
            (Copy(TWinControl (m_cACControl).Name,1,20) = 'CmnEdit00014KojiCode') or        // プロジェクトコード
            (Copy(TWinControl (m_cACControl).Name,1,21) = 'CmnEdit00016KosyuCode')) then    // プロジェクトサブコード
        begin
            // コード未確定時使用不可
            CmnPanelInformations.Enabled    := False;
            CmnPanelButtons.Enabled         := False;
        end;
    end;
// <164> 2007/07/19 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Add Start
    if (Copy(TWinControl (m_cACControl).Name,1,20) = 'CmnEdit00014KojiCode') then
    begin
        if ( m_arAdoptInfo[36].nAdoption <> 2 ) then
            CmnEdit00014KojiCodeNumeric.Zero    := TRUE
        else
            CmnEdit00014KojiCodeFree.Zero       := TRUE;
    end;

    if (Copy(TWinControl (m_cACControl).Name,1,21) = 'CmnEdit00016KosyuCode') then
    begin
        if ( m_arAdoptInfo[37].nAdoption <> 2 ) then
            CmnEdit00016KosyuCodeNumeric.Zero   := TRUE
        else
            CmnEdit00016KosyuCodeFree.Zero      := TRUE;
    end;
// <149> 2006/10/11 H.Kawato Add End

	if	((Sender is TMNumEdit) or
		 (Sender is TMTxtEdit)) then
		strComment	:= fnGetGuideComment (StrToInt (Copy (TWinControl (Sender).Name, 8, 5)))
	else
		strComment	:= '';

//	CmnMemoFieldComment.Lines.Text	:= strComment;

//	if	(CmnMemoFieldComment.Lines.Count > 4) then
//		CmnMemoFieldComment.ScrollBars	:= ssVertical
//	else
//		CmnMemoFieldComment.ScrollBars	:= ssNone;
    if (TWinControl (Sender).Name = CmnEdit05002KmkCode.Name) then
        m_sKmk := CmnEdit05002KmkCode.AsInteger;    // 科目ｺｰﾄﾞ入力値ｾｰﾌﾞ

	if	(TWinControl (Sender).Name = CmnEdit00004NameSimple.Name) then
	begin
		m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 19);
        fnSetFncType(8,True);
	end
	else if	((TWinControl (Sender).Name = CmnEdit05002KmkCode       .Name) or			// 相殺情報: 科目ｺｰﾄﾞ
			 (TWinControl (Sender).Name = CmnEdit05003HojCodeNumeric.Name) or			// 相殺情報: 補助ｺｰﾄﾞ①
			 (TWinControl (Sender).Name = CmnEdit05003HojCodeFree   .Name) or
			 (TWinControl (Sender).Name = CmnEdit05004HojCodeNumeric.Name) or			// 相殺情報: 補助ｺｰﾄﾞ②
			 (TWinControl (Sender).Name = CmnEdit05004HojCodeFree   .Name) or
			 (TWinControl (Sender).Name = CmnEdit05005HojCodeNumeric.Name) or			// 相殺情報: 補助ｺｰﾄﾞ③
			 (TWinControl (Sender).Name = CmnEdit05005HojCodeFree   .Name) or
			 (TWinControl (Sender).Name = CmnEdit05006TaxCode       .Name) or			// 消費税ｺｰﾄﾞ
			 (TWinControl (Sender).Name = CmnEdit05007TaxRate       .Name) or			// 消費税率ｺｰﾄﾞ
			 (TWinControl (Sender).Name = CmnEdit05008OffsetPrice   .Name)) then		// 相殺金額
        fnSetFncType(1,True)

// <198> 2010/07/27 G.Kojima Mod
    else if (TWinControl (Sender).Name = CmnEdit02002BankCode.Name) or
            (TWinControl (Sender).Name = CmnEdit02003BranchCode.Name) or
            (TWinControl (Sender).Name = CmnEdit03002BankCode.Name) or
            (TWinControl (Sender).Name = CmnEdit03003BranchCode.Name) then
// <204> Mod start
//           fnSetFncType(6,True)
	begin
    	fnSetFncType(1,False);
        fnSetFncType(6,True);
    end
// <204> Mod end
// <198>

// <204> Add start
    else if (TWinControl (Sender).Name = CmnEdit03001AccountCode.Name) then
    begin
        fnSetFncType(1,True);
        fnSetFncType(6,False);
    end
// <204> Add end

// <149> 2006/10/11 H.Kawato Add Start
    else if (TWinControl (Sender).Name = CmnEdit01030PriPayWayDivision.Name) then
    begin
// <189> Mod
//      if (CmnEdit01030PriPayWayDivision.Value = 1) then
		if (CmnEdit01030PriPayWayDivision.Value <> 0) then

// <189> Mod
            fnSetFncType(6,True)
        else
            fnSetFncType(6,False);

        fnSetFncType(1,False);
        fnSetFncType(8,False);
    end
// <149> 2006/10/11 H.Kawato Add End
// <161> 2007/07/06 H.Kawato Mod Start
{
// <153> 2006/12/19 H.Kawato Add Start
    else if (TWinControl (Sender).Name = CmnEdit01001DecDivision.Name) then
    begin
        if (Trim(CmnLabelPrjDetail.Caption) <> '【標準】') then
            fnSetFncType(1,True)
        else
            fnSetFncType(1,False);

        fnSetFncType(6,False);
        fnSetFncType(8,False);
    end
// <153> 2006/12/19 H.Kawato Add End
}
    else if (TWinControl (Sender).Name = CmnEdit01001DecDivision.Name) then
    begin
        if (Trim(CmnLabelPrjDetail.Caption) <> '【標準】') then
        begin
            fnSetFncType(1,True);
            fnSetFncType(6,True);
        end
        else
        begin
            fnSetFncType(1,False);
            fnSetFncType(6,False);
        end;
        fnSetFncType(8,False);
    end
// <161> 2007/07/06 H.Kawato Mod End
	else
    begin
        fnSetFncType(1,False);
        fnSetFncType(6,False);  // <149> 2006/10/11 H.Kawato Add
        fnSetFncType(8,False);
  end;

// <194> ADD-STR
	if ((TWinControl (Sender).Name = CmnEdit05003HojCodeNumeric.Name) or			// 相殺情報: 補助ｺｰﾄﾞ①
		(TWinControl (Sender).Name = CmnEdit05003HojCodeFree   .Name) or
		(TWinControl (Sender).Name = CmnEdit05004HojCodeNumeric.Name) or			// 相殺情報: 補助ｺｰﾄﾞ②
		(TWinControl (Sender).Name = CmnEdit05004HojCodeFree   .Name) or
		(TWinControl (Sender).Name = CmnEdit05005HojCodeNumeric.Name) or			// 相殺情報: 補助ｺｰﾄﾞ③
		(TWinControl (Sender).Name = CmnEdit05005HojCodeFree   .Name)) then
        fnSetFncType(8, True)
    else
        fnSetFncType(8, False);
// <194> ADD-END

// <210> ADD-STR
    if (TWinControl (Sender).Name = CmnEdit05006TaxCode.Name) then
    begin
        // 消費税コードリスト再編成
        iTaxCode    := Trunc(CmnEdit05006TaxCode.Value);
        iTaxRate    := Trunc(CmnEdit05007TaxRate.Value);

        dqMasterData	:= TMQuery.Create (self);
        m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

        with (dqMasterData) do
        begin
            Close ();
            SQL.Clear ();
            SQL.Add   ('SELECT * ');
            SQL.Add   (' FROM   KmkMA ');
            SQL.Add   (' WHERE  MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND GCode = :nKmkCode');
            ParamByName ('nKmkCode').AsInteger	:= CmnEdit05002KmkCode.AsInteger;
            Open ();
        end;

        fnSetTaxOffsetJournalInfo (dqMasterData);

        dqMasterData.Close ();
        dqMasterData.Free  ();

        CmnEdit05006TaxCode.Value		:= iTaxCode;
        CmnEdit05006TaxCode.InputFlag	:= FALSE;
        CmnEdit05007TaxRate.Value		:= iTaxRate;
        CmnEdit05007TaxRate.InputFlag	:= FALSE;
    end;
// <210> ADD-END

	if	(not fnCheckEditItemsValues (Sender)) then
	begin
		if	((m_cACControl is TMNumEdit ) or
			 (m_cACControl is TMTxtEdit ) or
			 (m_cACControl is TMDateEdit)) then
		begin
			if	(m_cACControl.Enabled) then
			begin
				m_cACControl.SetFocus ();

				TEdit (m_cACControl).SelectAll ();
				Beep  ();
				Abort ();
			end;
		end;
	end;

	if	(m_cACControl is TMNumEdit) then												// ※個別処理
	begin
		if	(StrToInt (Copy (TWinControl (m_cACControl).Name, 8, 5)) = 6005) then		// 郵便番号(枝番)
		begin
			if	(CmnEdit06006Address.Text = '') then									// 住所(上段)
				fnSetChangeFlagCheckItems (m_cACControl, TRUE);
		end;
	end;

	if	(CmnPanelClientDetail.Visible) then												// ※個別処理
	begin
		if	((m_cACControl.Name <> CmnEdit01002PaymentColumnDivision     .Name) and
			 (m_cACControl.Name <> CmnEdit01003PaymentColumnBasedValue   .Name) and
			 (m_cACControl.Name <> CmnEdit01004PaymentColumnMinimumPrice .Name) and
			 (m_cACControl.Name <> CmnEdit01005PaymentColumnFractionPrice.Name) and
			 (m_cACControl.Name <> CmnEdit01006PaymentColumnFraction     .Name) and
			 (m_cACControl.Name <> CmnEdit01007PaymentColumnDivision     .Name) and
			 (m_cACControl.Name <> CmnEdit01008PaymentColumnBasedValue   .Name) and
			 (m_cACControl.Name <> CmnEdit01009PaymentColumnMinimumPrice .Name) and
			 (m_cACControl.Name <> CmnEdit01010PaymentColumnFractionPrice.Name) and
			 (m_cACControl.Name <> CmnEdit01011PaymentColumnFraction     .Name) and
			 (m_cACControl.Name <> CmnEdit01012PaymentColumnDivision     .Name) and
			 (m_cACControl.Name <> CmnEdit01013PaymentColumnBasedValue   .Name) and
			 (m_cACControl.Name <> CmnEdit01014PaymentColumnMinimumPrice .Name) and
			 (m_cACControl.Name <> CmnEdit01015PaymentColumnFractionPrice.Name) and
			 (m_cACControl.Name <> CmnEdit01016PaymentColumnFraction     .Name) and
			 (m_cACControl.Name <> CmnEdit01017PaymentColumnDivision     .Name) and
			 (m_cACControl.Name <> CmnEdit01018PaymentColumnBasedValue   .Name) and
			 (m_cACControl.Name <> CmnEdit01019PaymentColumnMinimumPrice .Name) and
			 (m_cACControl.Name <> CmnEdit01020PaymentColumnFractionPrice.Name) and
			 (m_cACControl.Name <> CmnEdit01021PaymentColumnFraction     .Name) and
			 (m_cACControl.Name <> CmnEdit01022PaymentColumnDivision     .Name) and
			 (m_cACControl.Name <> CmnEdit01023PaymentColumnBasedValue   .Name) and
			 (m_cACControl.Name <> CmnEdit01024PaymentColumnMinimumPrice .Name) and
			 (m_cACControl.Name <> CmnEdit01025PaymentColumnFractionPrice.Name) and
			 (m_cACControl.Name <> CmnEdit01026PaymentColumnFraction     .Name)) then
		begin
			if	(not fnChangeConditionTabInformations (CmnTabInformations.Items.Selected)) then
// <211> MOD-STR
//				CmnTabInformations.Items.Selected	:= 0;
				CmnTabInformations.Items.Selected	:= TI_PAYWAY;
// <211> MOD-END

			if	(not fnCheckDecomposeListBasedValue ()) then
			begin
				m_cACControl.SetFocus ();

				TEdit (m_cACControl).SelectAll ();
				Abort ();
			end;

// <132> 2006/06/15 H.Kawato Add Start
			if	(not fnCheckPayKijituMankiData ()) then
			begin
// <149> 2006/10/11 H.Kawato Add Start
				if (CmnEdit01030PriPayWayDivision.Value = 0) then
                    m_cACControl := CmnEdit01002PaymentColumnDivision
                else
                    m_cACControl := CmnEdit01007PaymentColumnDivision;
// <149> 2006/10/11 H.Kawato Add End

                m_cACControl.SetFocus ();

                TEdit (m_cACControl).SelectAll ();
                Abort ();
			end;
// <132> 2006/06/15 H.Kawato Add End
		end;
	end;

// <137> 2006/06/28 H.Kawato Add Start
	if (m_iHeikouData = 0) or (Trim(CmnLabel02018DebitDivisionDesc.Caption) = 'しない') then
    begin
        CmnLabelDebitData01  .Enabled := False;
        CmnEdit02019DebitData.Enabled := False;
        CmnLabelDebitDataDesc.Enabled := False;
    end
    else
    begin
        if (CmnEdit02019DebitData.Value = 0) then
            // <200> Mod start
            //CmnEdit02019DebitData.Value := 1;
            CmnLabelDebitDataDesc.Caption := '指定なし'
        else
            CmnLabelDebitDataDesc.Caption := 'を使用';
            // <200> Mod end

        CmnLabelDebitData01  .Enabled := True;
        CmnEdit02019DebitData.Enabled := True;
        CmnLabelDebitDataDesc.Enabled := True;
    end;
// <137> 2006/06/28 H.Kawato Add End

	if	(m_cACControl.Name = CmnEdit05002KmkCode.Name) then
	begin
		if	(CmnEdit05002KmkCode.AsInteger = 0) then
			fnSetChangeFlagCheckItems (m_cACControl, TRUE);
	end;

// <211> MOD-STR
{	if	(m_cACControl.Name = CmnEdit04005BurDivision.Name) then
    begin
        if (CmnEdit04004PosDivision.AsInteger = 1) then
        	m_cACControl	:= CmnEdit04006AccountCode
        else
        	m_cACControl	:= CmnEdit04005BurDivision;

        m_cACControl.SetFocus;
    end
    else if (m_cACControl.Name = CmnEdit04008BurDivision.Name) then
    begin
        if (CmnEdit04007PosDivision.AsInteger = 1) then
        	m_cACControl	:= CmnButtonPageNext
        else
        	m_cACControl	:= CmnEdit04008BurDivision;

        m_cACControl.SetFocus;}
	if	(m_cACControl.Name = CmnEdit04005BurDivision.Name) then
    begin
        if (CmnEdit04004PosDivision.AsInteger = 1) then
        	m_cACControl	:= CmnButtonPageNext
        else
        	m_cACControl	:= CmnEdit04005BurDivision;

        m_cACControl.SetFocus;
    end
    else if (m_cACControl.Name = CmnEdit08003BurDivision.Name) then
    begin
        if (CmnEdit08002PosDivision.AsInteger = 1) then
        	m_cACControl	:= CmnButtonPageNext
        else
        	m_cACControl	:= CmnEdit08003BurDivision;

        m_cACControl.SetFocus;
// <211> MOD-END
    end
    else
    	m_cACControl	:= Screen.ActiveControl;

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionOnEnterException (Sender: TObject);
begin
	m_fIgnoreProc	:= FALSE;
	m_cACControl	:= Screen.ActiveControl;

    fnSetFncType(1,False);
    fnSetFncType(6,False);          // <149> 2006/10/11 H.Kawato Add
    fnSetFncType(8,False);
	CmnStatusBar.SimpleText	:= '';
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionNumEditOnChange (Sender: TObject);
var
	cNumEdit	  : TMNumEdit;
	strDescription: String;

begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	cNumEdit	:= Sender as TMNumEdit;

	fnGetDescriptionSelectedItem (cNumEdit, strDescription);

	TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= strDescription;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionNumEditOnChangeEx (Sender: TObject);
var
	strDescription: String;

begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	fnGetDescriptionSelectedItem (TMNumEdit (Sender), strDescription);

	TMTxtEdit (MJSFindCtrl (Self, TWinControl (Sender).Name + 'Desc')).Text	:= strDescription;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
var
    nRow    : Integer;          // <149> 2006/10/11 H.Kawato Add
	sPayWay	: String;			// <189> Add
begin
	if	(Key = VK_RETURN) then
	begin
		if	(not fnMoveFocusNextControl (Sender)) then
			Abort ();
	end
	else if	((Key = VK_ESCAPE) or (Key = VK_END)) then
	begin

        if CmnPanelButtons.Enabled = True then
        begin
    		m_cACControl	:= CmnButtonUpdate;
	    	m_cACControl.SetFocus ();
        end;
		Abort ();
	end
	else if	((Key = VK_LEFT) or (Key = VK_UP)) then
	begin
		if	(TWinControl (Sender).Name = CmnEdit00001HojCodeNumeric.Name) then
			Abort ();

// <189> Add ↓↓↓
	    if (TWinControl (Sender).Name = CmnEdit01030PriPayWayDivision.Name) then
    	begin
			//Alt + ↓ でコンボボックスの中を表示
			// Alt対応 （検索EXPも同様）
			if (GetKeyState( VK_MENU ) < 0) and (Key = VK_DOWN) then	//AltKeyが押された時
				abort;
		end;
// <189> Add ↑↑↑

		if	(Sender is TMTxtEdit) then
		begin
			if	(MJSChkCurTop (Sender as TComponent)) then
			begin
				if	(TWinControl (Sender).Name = CmnEdit00001HojCodeFree.Name) then
					Abort ();

				MJSDispCtrl.MjsPrevCtrl (Self);
			end;
		end
		else
			MJSDispCtrl.MjsPrevCtrl (Self);
	end
	else if	((Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	((GetKeyState (VK_MENU) < 0) and (Key = VK_DOWN)) then						// Altｷｰが押された時
			Exit;

// <189> Add ↓↓↓
	    if (TWinControl (Sender).Name = CmnEdit01030PriPayWayDivision.Name) then
    	begin
			if	(CmnEdit01030PriPayWayDivision.AsInteger <> 0) and
				(CmnEdit01030PriPayWayDivision.Value     <> m_nPriPayWay) then
				// 詳細情報設定ダイアログを起動
				fnLaunchDlgSyousai();
		end;
// <189> Add ↑↑↑

		if	(Sender is TMTxtEdit) then
		begin
			if	(MJSChkCurEnd (Sender as TComponent)) then
			begin
				if	(not fnMoveFocusNextControl (Sender)) then
					Abort ();
			end;
		end
		else
		begin
			if	(not fnMoveFocusNextControl (Sender)) then
				Abort ();
		end;
	end;
// <149> 2006/10/11 H.Kawato Add Start
    if (TWinControl (Sender).Name = CmnEdit01030PriPayWayDivision.Name) then
    begin
// <189> Add ↓↓↓
		//Alt + ↓ でコンボボックスの中を表示
		// Alt対応 （検索EXPも同様）
		if (GetKeyState( VK_MENU ) < 0) and (Key = VK_DOWN) then	//AltKeyが押された時
			exit;

		//リストが出ていたら
		if CmnEdit01030PriPayWayDivision.ListDisp then
			exit;
// <189> Add ↑↑↑

        if (Key = 96) or (Key = 48) then                    // 0が押された時
        begin
// <189> Mod
//          CmnLabel01030PriPayWayDivisionDesc.Caption      := 'しない';
			CmnLabel01030PriPayWayDivisionDesc.Caption      := 'なし';
// <189> Mod
            CmnEdit01002PaymentColumnDivision.ArrowDisp     := adFocused;
            CmnEdit01002PaymentColumnDivision.ReadOnly      := FALSE;
            CmnEdit01003PaymentColumnBasedValue.ReadOnly    := FALSE;
            CmnEdit01002PaymentColumnDivision.TabStop       := TRUE;
            CmnEdit01003PaymentColumnBasedValue.TabStop     := TRUE;

            if (CmnEdit01001DecDivision.AsInteger = 0) then // 分解方法: 0=比率
            begin
                CmnEdit01004PaymentColumnMinimumPrice.ReadOnly  := FALSE;
                CmnEdit01005PaymentColumnFractionPrice.ReadOnly := FALSE;
                CmnEdit01006PaymentColumnFraction.ReadOnly      := FALSE;
                CmnEdit01004PaymentColumnMinimumPrice.TabStop   := TRUE;
                CmnEdit01005PaymentColumnFractionPrice.TabStop  := TRUE;
                CmnEdit01006PaymentColumnFraction.TabStop       := TRUE;
            end;

            m_nPriPayWay    := 0;

            // 詳細データ格納用配列の初期化
            for	nRow := 1 to 5 do
            begin
                m_arSyousaiData[nRow].nEdaban       := 0;
                m_arSyousaiData[nRow].nBaseKingaku  := 0;
                m_arSyousaiData[nRow].nBaseHiritu   := 0;
                m_arSyousaiData[nRow].nHasuuKingaku := 0;
                m_arSyousaiData[nRow].nHasuuHou     := 0;
                m_arSyousaiData[nRow].nSite         := 0;
            end;
        end
// <189> Mod
//      else if (Key = 97) or (Key = 49) then               // 1が押された時
//      begin
//          CmnLabel01030PriPayWayDivisionDesc.Caption      := 'する';
		else if ((Key =  97) or (Key = 49)) or				// 1が押された時
				((Key =  98) or (Key = 50)) or				// 2が押された時
				((Key =  99) or (Key = 51)) or				// 3が押された時
				((Key = 100) or (Key = 52)) or				// 4が押された時
				((Key = 101) or (Key = 53)) then			// 5が押された時
        begin
			case Key of
				97,  49:
				begin
                	nRow := 1;
                    sPayWay := '振込';
				end;
				98,  50:
				begin
					nRow := 2;
					sPayWay := '期日指定振込';
				end;
				99,  51:
				begin
					nRow := 3;
					sPayWay := '手形';
				end;
				100, 52:
				begin
					nRow := 4;
					sPayWay := '小切手';
				end;
				101, 53:
				begin
					nRow := 5;
					sPayWay := '現金';
				end;
			end;
            CmnLabel01030PriPayWayDivisionDesc.Caption	:= sPayWay;
			CmnEdit01030PriPayWayDivision.Value			:= nRow;
// <189> Mod
			// 詳細情報設定ダイアログを起動
			fnLaunchDlgSyousai();
        end;
    end;
// <149> 2006/10/11 H.Kawato Add End
end;

// <189> Add
procedure TJNTCRP004006f.fnCmnFunctionOnKeyPress(
  Sender: TObject; var Key: Char);
begin
	if Sender is TMNumEdit then
	begin
		//基本数値以外は不可
		if (Key = ',') or (Key = '.') or (Key = '-') then
		begin
			Beep;
			Abort;
		end;

		if ((Key < '0') or (Key > '9')) and
		   (Key <> Chr(vk_Back)) and
		   (Key <> Chr(VK_RETURN)) and
		   (Key <> Chr(VK_DELETE)) and
		   (key <> #9) then
		begin
			Beep;
			Abort;
		end;
	end;
end;

procedure TJNTCRP004006f.CmnEdit01030PriPayWayDivisionKeyPress(
  Sender: TObject; var Key: Char);
begin
	if (Key = Chr(VK_F4)) then
		exit;

// <201> MOD-STR
//	if ((Key < '0') or (Key > '5')) then
	if (('6' <= Key) and (Key <= '9')) then
// <201> MOD-END
	begin
		Beep;
		Abort;
	end;
	fnCmnFunctionOnKeyPress(Sender, Key);
end;
// <189> Add

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnComboBoxOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if	(Key = VK_RETURN) then
	begin
		if	(not fnMoveFocusNextControl (Sender)) then
			Abort ();
	end
	else if	((Key = VK_ESCAPE) or (Key = VK_END)) then
	begin

        if CmnPanelButtons.Enabled = True then
        begin
    		m_cACControl	:= CmnButtonUpdate;
	    	m_cACControl.SetFocus ();
        end;


		Abort ();
	end
	else if	((Key = VK_RIGHT) or ((Key = VK_DOWN) and (Shift <> [ssAlt]))) then
	begin
		if	(TMComboBox (Sender).ItemIndex = TMComboBox (Sender).Items.Count - 1) then
		begin
			if	(not fnMoveFocusNextControl (Sender)) then
				Abort ();
		end;

        Exit;
	end
	else if	((Key = VK_LEFT) or (Key = VK_UP)) then
	begin
		if	(TMComboBox (Sender).ItemIndex = 0) then
		begin
			MJSDispCtrl.MjsPrevCtrl (Self);
			Abort ();
		end;

        Exit;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabStandardOnEnter (Sender: TObject);
begin
//	CmnButtonToolbarDetail.Enabled	:= FALSE;
//	CmnButtonToolbarDelete.Enabled	:= FALSE;
//	CmnButtonToolbarTag   .Enabled	:= FALSE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionNumEditArrowDispOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if	((Key = VK_RETURN) or (Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	(not ((GetKeyState (VK_MENU) < 0) and (Key = VK_DOWN))) then				// Altｷｰが押された時以外
		begin
			if	(fnGetIndexSelectItem (TMNumEdit (Sender)) = -1) then
			begin
				Beep ();
				TMNumEdit (Sender).SelectAll ();
				Abort ();
			end;
		end;
	end;

	fnCmnFunctionOnKeyDown (Sender, Key, Shift);
end;

//***********************************************************************************************************/
//	Component	:	TMDateEdit										<222-8>ADD
//	Event		:	OnExit
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnCmnFunctionDateEditOnExit(Sender: TObject);
begin
	if not (Sender is TMDateEdit) then Exit;

    if TMDateEdit(Sender).InputFlag then Exit;

    if not (MjsDateCtrl.MjsIntYMDChk(TMDateEdit(Sender).AsIntYM)) then
    begin
    	if (TMDateEdit(Sender).CanFocus) then
        	TMDateEdit(Sender).SetFocus;
    end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionTxtEditOnKeyPress (Sender: TObject; var Key: Char);
begin
	if	(((Key < '0') or (Key > '9')) and
		  (Key <> #8) and (Key <> #9) and (Key <> #13) and (Key <> #27)) then
	begin
		Beep  ();
		Abort ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonToolbarExitOnClick (Sender: TObject);
begin
//	Close ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonToolbarPrintOnClick (Sender: TObject);
var
//	dqPrintData      : TMQuery;
//	cDlgCondition    : TJNTCRP0040063f;
//	cDlgPrint	     : TMJSPrnDlgf;
//	cMemData		 : TdxMemData;
//	cMessageRec		 : TMJSMsgRec;
//	cTitleField		 : TStringList;
//	cMemDataField	 : TStringList;
//	strTmpFileName   : String;
//	strFormatDateTime: String;

    lvRet       :   Integer;
    JNTPDlg     :   TFrmJNTPDialog;

begin
{
	cMemData	:= nil;

	cDlgCondition	:= TJNTCRP0040063f.fnCreateDialog (Pointer (m_pRec), Self, m_cDBSelect, m_nCurCodeDigit, m_nCurCodeAttribute);

	if	(cDlgCondition.ShowModal () = mrCancel) then
		Exit;

	cTitleField		:= TStringList.Create ();
	cMemDataField	:= TStringList.Create ();

	m_nPrintOrder			:= cDlgCondition.m_nOrderDivision;							// 範囲指定: 0=ｺｰﾄﾞ順, 1=連想順
	m_strPrintHojCodeStr	:= cDlgCondition.m_strHojCodeStr;							// 出力範囲: 支払先ｺｰﾄﾞ(開始)
	m_strPrintHojCodeEnd	:= cDlgCondition.m_strHojCodeEnd;							// 出力範囲: 支払先ｺｰﾄﾞ(終了)

	dqPrintData	:= TMQuery.Create (Self);										// MQueryの構築

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqPrintData);							// DBとMQueryの接続

	cDlgPrint		:= TMJSPrnDlgf   .Create (Self);
	m_cPrnSupport	:= TMjsPrnSupport.Create ();

	gfnJNTMasSetPrnInfo (m_cPrnSupport, dqPrintData);

	case (cDlgCondition.m_nSelected) of
		0:	begin																		// 実在支払先登録ﾘｽﾄ(簡略)
				m_cPrnSupport.strDocName		:= '実在支払先登録リスト';
				m_cPrnSupport.ApRB				:= CmnReportExtStandard;
				m_cPrnSupport.pPage				:= CmnReportExtStandardSysVarPage;		// 頁
				m_cPrnSupport.pDate				:= CmnReportExtStandardSysVarDate;		// 日付
				m_cPrnSupport.pCorpCode			:= CmnReportExtStandardLabelCorpCode;	// 会社ｺｰﾄﾞ
				m_cPrnSupport.pCorpName			:= CmnReportExtStandardLabelCorpName;	// 会社名称
				m_cPrnSupport.pAccountOffice	:= CmnReportExtStandardAccOffice;		// 会計事務所名称

				strTmpFileName	:= '\tmp\実在支払先登録リスト(簡略).csv';
			end;

		1:	begin																		// 合計支払先登録ﾘｽﾄ(簡略)
				m_cPrnSupport.strDocName		:= '合計支払先登録リスト';
				m_cPrnSupport.ApRB				:= CmnReportTtlStandard;
				m_cPrnSupport.pPage				:= CmnReportTtlStandardSysVarPage;		// 頁
				m_cPrnSupport.pDate				:= CmnReportTtlStandardSysVarDate;		// 日付
				m_cPrnSupport.pCorpCode			:= CmnReportTtlStandardLabelCorpCode;	// 会社ｺｰﾄﾞ
				m_cPrnSupport.pCorpName			:= CmnReportTtlStandardLabelCorpName;	// 会社名称
				m_cPrnSupport.pAccountOffice	:= CmnReportTtlStandardAccOffice;		// 会計事務所名称

				strTmpFileName	:= '\tmp\合計支払先登録リスト(簡略).csv';
			end;

		2:	begin																		// 支払先登録ﾘｽﾄ(詳細)
				m_cPrnSupport.strDocName	:= '支払先登録リスト';
				m_cPrnSupport.ApRB			:= CmnReportDetail;
				m_cPrnSupport.pPage			:= CmnReportDetailSysVarPage;				// 頁
				m_cPrnSupport.pDate			:= CmnReportDetailSysVarDate;				// 日付
				m_cPrnSupport.pCorpCode		:= CmnReportDetailLabelCorpCode;			// 会社ｺｰﾄﾞ
				m_cPrnSupport.pCorpName		:= CmnReportDetailLabelCorpName;			// 会社名称

				strTmpFileName	:= '\tmp\支払先登録リスト(詳細).csv';
			end;

		3:	begin																		// 名寄せ登録ﾘｽﾄ
				m_cPrnSupport.strDocName	:= '名寄せ登録リスト';
				m_cPrnSupport.ApRB			:= CmnReportSystem;
				m_cPrnSupport.pPage			:= CmnReportSystemSysVarPage;				// 頁
				m_cPrnSupport.pDate			:= CmnReportSystemSysVarDate;				// 日付
				m_cPrnSupport.pCorpCode		:= CmnReportSystemLabelCorpCode;			// 会社ｺｰﾄﾞ
				m_cPrnSupport.pCorpName		:= CmnReportSystemLabelCorpName;			// 会社名称

				strTmpFileName	:= '\tmp\名寄せ登録リスト.csv';
			end;

		else
			begin
				dqPrintData.Free ();
				cDlgPrint  .Free ();

				Exit;
			end;
	end;

	m_cPrnSupport.strFileName	:= rcCOMMONAREA (m_pRec^.m_pCommonArea^).SysCliRoot + strTmpFileName;
	m_cPrnSupport.pComArea 		:= m_pRec^.m_pCommonArea;

	m_cPrnSupport.iDspFileBtn	:= 1; 													// ﾌｧｲﾙ出力表示
	m_cPrnSupport.iSysCode		:= m_pRec^.m_iSystemCode;								// ｼｽﾃﾑｺｰﾄﾞ
	m_cPrnSupport.iReportID		:= 990100;												// 帳票ｸﾞﾙｰﾌﾟ№
	m_cPrnSupport.MdataModule	:= m_cDataModule;
	m_cPrnSupport.iCalendarKbn	:= m_nDateFormatDivision + 1;

	if	(cDlgPrint.DoDLG (m_cPrnSupport) > 0) then
	begin
		if	((m_cPreview.IsExistPreview ()) and (m_cPrnSupport.iCommand = PDLG_PREVIEW)) then
		begin
			m_cComArea.m_MsgStd.GetMsg (cMessageRec, 10040, 1);

			MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle, cMessageRec.icontype,
												cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

			cDlgPrint  .Free ();
			dqPrintData.Free ();

			Exit;
		end;

		if	(m_nDateFormatDivision = 0) then											// 和暦/西暦区分: 0=和暦
			strFormatDateTime	:= 'ee/mm/dd hh:mm:ss'
		else																			// 和暦/西暦区分: 1=西暦
			strFormatDateTime	:= 'yy/mm/dd hh:mm:ss';

		case (cDlgCondition.m_nSelected) of
			0:	begin																	// 実在支払先登録ﾘｽﾄ(簡略)
					CmnReportExtStandardLabelTitle.Caption	:= '実在支払先登録リスト';

					CmnReportExtStandardLineTitle.Left	:= CmnReportExtStandardLabelTitle.Left;
					CmnReportExtStandardLineTitle.Width	:= CmnReportExtStandardLabelTitle.Width;

					fnPrintCheckListExtStandard ();

					cMemData	:= CmnMemDataPrintExtStandard;
				end;

			1:	begin																	// 合計支払先登録ﾘｽﾄ(簡略)
					CmnReportTtlStandardLabelTitle.Caption	:= '合計支払先登録リスト';

					CmnReportTtlStandardDBTextUpdateDate.DisplayFormat	:= strFormatDateTime;

					CmnReportTtlStandardLineTitle.Left	:= CmnReportTtlStandardLabelTitle.Left;
					CmnReportTtlStandardLineTitle.Width	:= CmnReportTtlStandardLabelTitle.Width;

					fnPrintCheckListTtlStandard ();

					cMemData	:= CmnMemDataPrintTtlStandard;
				end;

			2:	begin																		// 支払先登録ﾘｽﾄ(詳細)
					CmnReportDetailLabelTitle.Caption	:= '支払先登録リスト';

					CmnReportDetailLineTitle.Left	:= CmnReportDetailLabelTitle.Left;
					CmnReportDetailLineTitle.Width	:= CmnReportDetailLabelTitle.Width;

					fnPrintCheckListDetail ();

					cMemData	:= CmnMemDataPrintDetail;
				end;

			3:	begin																		// 名寄せ登録ﾘｽﾄ
					m_strPrintHojCode	:= '';
					m_fPrintBottom		:= FALSE;

					fnPrintCheckListSystem ();

					cMemData	:= CmnMemDataPrintSystem;
				end;
		end;

		if	((m_cPrnSupport.iCommand <> PDLG_CANCEL) and (cMemData.RecordCount = 0)) then
		begin
			m_cComArea.m_MsgStd.GetMsg (cMessageRec, 40, 3);

			MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle, cMessageRec.icontype,
													cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

			cDlgPrint  .Free ();
			dqPrintData.Free ();

			Exit;
		end;

		if	((m_cPrnSupport.iCommand = PDLG_PRINT) or (m_cPrnSupport.iCommand = PDLG_PREVIEW)) then
			m_cPreview.Exec (m_cPrnSupport, cDlgPrint, nil)
		else if	(m_cPrnSupport.iCommand = PDLG_FILE) then
		begin
			fnSetReportTitleField (cDlgCondition.m_nSelected, cTitleField, cMemDataField);

			if	(MJSFileOut (cMemData, cMemDataField, cTitleField, m_cPrnSupport, m_pRec) = -1) then
			begin
				m_cComArea.m_MsgStd.GetMsg (cMessageRec, 10040, 3);

				MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle, cMessageRec.icontype,
													cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);
			end;
		end;
	end;

	cDlgPrint  .Free ();
	dqPrintData.Free ();
}

    // 販売ﾎﾟｲﾝﾀに設定する
    m_cJNTArea.SetSelAppRecord;

    // 範囲ﾀﾞｲｱﾛｸﾞを表示する<PRN>
    JNTPDlg := TFrmJNTPDialog.Create(Self, @uvHani);
    lvRet   := JNTPDlg.ShowModal;
    JNTPDlg.Free;

    //結果を判断する
    case lvRet of
     0: //ｷｬﾝｾﾙ
     	begin
	     	Exit;
        end;
     1:	//通常
     	begin
            case  uvHani.pvrPattern of  // <126>
                0:  begin
                        fnPrintCheckListDetail();
                        PrtParam.TargetMD   :=  CmnMemDataPrintDetail;
                    end;
// <222> ADD start
				1:	begin				// 外貨情報
                		fnPrintCheckListGaika();
                		PrtParam.TargetMD	:=	CmnMemDataPrintGaika;
                	end;
// <222> ADD end
(*
                0:  begin
                        fnPrintCheckListExtStandard();
					    PrtParam.TargetMD	:=  CmnMemDataPrintExtStandard;
                    end;
                1:  begin
                        fnPrintCheckListTtlStandard ();
					    PrtParam.TargetMD	:=  CmnMemDataPrintTtlStandard;
                    end;
                2:  begin
                        fnPrintCheckListDetail();
                        PrtParam.TargetMD   :=  CmnMemDataPrintDetail;
                    end;
*)
            end;

            // <PRN>
            with PrtParam do
			begin
                Para		:=  uvHani;
				TargetQry	:=  DmqPrint;
				CorpSys		:=  uvSelSys;
                JNTArea     :=  m_cJNTArea;
                TargetParam	:=  nil;
	    	    TargetStr	:=  '';
    		    TargetInt	:=  0;
			end;

            //印刷する<PRN>
            PrintAppEntry(nil,nil,1,PrtParam,ArrHdl);

        end;
    end;

    // 財務ﾎﾟｲﾝﾀに戻す
    m_cJNTArea.SetMasAppRecord;

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnToolbarButtonChangeOnClick (Sender: TObject);
var
	cAppParam: TAppParam;

begin
	m_fUnderConstruction	:= TRUE;

	Hide ();

    if  (Parent = nil) then
    begin
		cAppParam.iAction		:=	ACTID_DOCKINGINEND;									// 埋込通知
		cAppParam.pRecord		:=	Pointer(m_pRec);									// 管理構造体ﾎﾟｲﾝﾀ設定
		cAppParam.pActionParam	:=	nil;												// 予備ﾎﾟｲﾝﾀ設定

		TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppParam);

		Parent      := TPanel (m_pRec^.m_pOwnerPanel^);
		Align       := alClient;
		BorderStyle := bsNone;
		Position    := poDesigned;

//        CmnToolbarButtonChange.Caption  := '切出(&G)';
    end
    else
    begin
		cAppParam.iAction		:=	ACTID_DOCKINGOUTEND;								// 取出通知
		cAppParam.pRecord		:=	Pointer (m_pRec);									// 管理構造体ﾎﾟｲﾝﾀ設定
		cAppParam.pActionParam	:=	nil;												// 予備ﾎﾟｲﾝﾀ設定

		TMjsAppRecord (m_pRec^).m_pOwnerEntry (@cAppParam);

        Parent      := nil;
        Align       := alNone;
        BorderStyle := bsSizeable;
        Position    := poDefaultPosOnly;

//        CmnToolbarButtonChange.Caption  := '埋込(&G)';
    end;

	Show ();

	m_fUnderConstruction	:= FALSE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonToolbarDetailOnClick (Sender: TObject);
var
	strHojCode: String;

begin
	if	(CmnPanelClientDetail.Visible) then
	begin
		CmnPanelClientDetail  .Visible	:= FALSE;
		CmnPanelClientStandard.Visible	:= TRUE;

		fnMoveRecSelecterGridStandard (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision,
															PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode);

		m_cACControl	:= CmnTreeView;
        B_Syousai.Caption	:= '詳細(&T)';
	end
	else
	begin
		fnShowScreenInformations ();

		if	(m_nCurCodeAttribute <= 1) then
		begin
			strHojCode		:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)]);
			m_cACControl	:= CmnEdit00001HojCodeNumeric
		end
		else
		begin
			strHojCode		:= CmnEdit00001HojCodeFree.Text;
			m_cACControl	:= CmnEdit00001HojCodeFree;
		end;

		fnChangeConditionToolbarButtons (-1, strHojCode);
		fnChangeConditionPageButtons	(CmnTabInformations.Visible);

		if	(m_nReferMode = REFER) then													// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照の時
		begin
			CmnButtonUpdate.Enabled	:= FALSE;
			CmnButtonCancel.Enabled	:= FALSE;

			m_cACControl	:= CmnTreeView;
		end
		else
		begin
			CmnButtonUpdate.Enabled	:= TRUE;
			CmnButtonCancel.Enabled	:= TRUE;
		end;

        B_Syousai.Caption	:= '一覧(&T)';
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonToolbarDeleteOnClick (Sender: TObject);
var
	cMessageRec: TMJSMsgRec;
	strHojCode : String;
	strMessage : String;
    nNCODE     : Extended;
begin

    nNCODE     := 0;

	if	(Screen.ActiveControl.Name = CmnTreeView.Name) then								// ﾂﾘｰ･ﾋﾞｭｰ
	begin
		strHojCode	:= PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode;
		strMessage	:= PTreeViewRec (CmnTreeView.Selected.Data)^.strDescription;
		nNCODE  	:= PTreeViewRec (CmnTreeView.Selected.Data)^.nNCODE;
	end
	else if	(Screen.ActiveControl.Name = CmnGridStandardExist.Name) then				// 取引先ｸﾞﾘｯﾄﾞ(実在)
	begin
		nNCODE  	:= CmnGridStandardExist.DataSource.DataSet.FieldByName ('nNCODE'   ).AsFloat;
		strHojCode	:= CmnGridStandardExist.DataSource.DataSet.FieldByName ('strHojCode'   ).AsString;
		strMessage	:= CmnGridStandardExist.DataSource.DataSet.FieldByName ('strNameSimple').AsString;
	end
	else if	(Screen.ActiveControl.Name = CmnGridStandardTotal.Name) then				// 取引先ｸﾞﾘｯﾄﾞ(合計)
	begin
		nNCODE  	:= CmnGridStandardTotal.DataSource.DataSet.FieldByName ('nNCode'   ).AsFloat;
		strHojCode	:= CmnGridStandardTotal.DataSource.DataSet.FieldByName ('strHojCode'   ).AsString;
		strMessage	:= CmnGridStandardTotal.DataSource.DataSet.FieldByName ('strNameSimple').AsString;
	end
	else																				// 詳細
	begin
		if	(m_nCurCodeAttribute <= 1) then
			strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
		else
			strHojCode	:= CmnEdit00001HojCodeFree.Text;

		strMessage	:= CmnEdit00004NameSimple.Text;
	end;

//	if	(Trim (strHojCode) = '') then
//		Exit;

	if	nNCODE = 0 then
		Exit;

	if	(m_nCurCodeAttribute <= 1) then
//		strHojCode   := Format ('%.10d', [StrToInt64 (Trim (strHojCode))]);
		strHojCode   := Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 4);

	strMessage	:= '"' + strMessage + '"のレコードを' + cMessageRec.sMsg;

	if	(MJSMessageBoxEx (Self,strMessage, cMessageRec.sTitle, cMessageRec.icontype,
									cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType) = mrYes) then
	begin
		fnDeleteMasterRecord (nNCODE);

		fnResetParentItemsInfo ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonToolbarTagOnClick (Sender: TObject);
var
	nTagKindWork: Integer;

begin
	nTagKindWork	:= 0;

{	case (CmnButtonToolbarTag.ImageIndex) of
		0:	nTagKindWork	:= 1;
		1:	nTagKindWork	:= 3;
		2:	nTagKindWork	:= 2;
		3:	nTagKindWork	:= 4;
	end;
}
	if	(Screen.ActiveControl.Name = CmnGridStandardExist.Name) then					// 取引先ｸﾞﾘｯﾄﾞ(実在)
		fnSetTagInfoGridStandard (0, nTagKindWork)
	else if	(Screen.ActiveControl.Name = CmnGridStandardTotal.Name) then				// 取引先ｸﾞﾘｯﾄﾞ(合計)
		fnSetTagInfoGridStandard (1, nTagKindWork)
	else if	(Screen.ActiveControl.Name = CmnTreeView.Name) then							// ﾂﾘｰﾋﾞｭｰ
	begin
		fnUpdateMasterRecordMFusenInfo (PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode, nTagKindWork);

		if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD    ) or
			 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD_SUM) or
			 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_GENERAL  )) then
			fnUpdateMemDataStandardRecord (0, PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode, nTagKindWork)
		else
			fnUpdateMemDataStandardRecord (1, PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode, nTagKindWork);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTreeViewOnChange (Sender: TObject; Node: TTreeNode);
var
	nDivisionParent : Integer;
	nSumDivision	: Integer;
	nNCodeParent    : Extended;
	strDescription	: String;

begin
	if	(m_fUnderConstruction) then
		Exit;

	if	(Node = nil) then
		Exit;

    nDivisionParent := 0;   // <149> Add
    nNCodeParent    := 0;

	if	((PTreeViewRec (Node.Data)^.nItemDivision = TREE_PARENT    ) or
		 (PTreeViewRec (Node.Data)^.nItemDivision = TREE_PARENT_SUM)) then
		nSumDivision	:= 1
	else
		nSumDivision	:= 0;

	fnChangeConditionToolbarButtons (nSumDivision, PTreeViewRec (Node.Data)^.strHojCode);
//	fnChangeConditionToolbarButtons (PTreeViewRec (Node.Data)^.strHojCode);				// ﾂｰﾙﾊﾞｰ･ﾎﾞﾀﾝ状態変更

	//////////////////////////////////////////////////////////////////////////////
	if	((PTreeViewRec (Node.Data)^.nItemDivision = TREE_CHILD_SUM ) or
		 (PTreeViewRec (Node.Data)^.nItemDivision = TREE_PARENT_SUM)) then
//		CmnButtonToolbarDelete.Enabled	:= FALSE;
	//////////////////////////////////////////////////////////////////////////////

	if	((PTreeViewRec (Node.Data)^.nItemDivision = TREE_CHILD    ) or
		 (PTreeViewRec (Node.Data)^.nItemDivision = TREE_CHILD_SUM) or
		 (PTreeViewRec (Node.Data)^.nItemDivision = TREE_GENERAL  )) then
	begin
		nDivisionParent		:= PtreeViewRec (Node.Parent.Data)^.nItemDivision;
		nNCodeParent	    := PTreeViewRec (Node.Parent.Data)^.nNCode;
		strDescription		:= PTreeViewRec (Node.Parent.Data)^.strDescription;
	end
	else
	begin
		nDivisionParent		:= PTreeViewRec (Node.Data)^.nItemDivision;
		nNCodeParent     	:= PTreeViewRec (Node.Data)^.nNCode;
		strDescription		:= PTreeViewRec (Node.Data)^.strDescription;
	end;

	////////////////////////////////////////////////////////////////////////
	if	((m_nCurItemDivision <> nDivisionParent) or (CompareStr (m_strCurHojCode, FloatToStr(nNCodeParent)) <> 0)) then
		fnSetParentItemsInfo (PTreeViewRec (Node.Data)^.nItemDivision,
						PTreeViewRec (Node.Data)^.strHojCode, nDivisionParent, nNCodeParent, strDescription);

	if	(CmnPanelClientDetail.Visible) then
	begin
		if	(PTreeViewRec (Node.Data)^.nNCode = _TreeSystemNCode) then
		begin
			CmnPanelClientDetail  .Visible	:= FALSE;
			CmnPanelClientStandard.Visible	:= TRUE;

//			CmnButtonToolbarDetail.Caption	:= '詳細(&T)';

			fnChangeConditionTabStandard  (PTreeViewRec (Node.Data)^.nItemDivision);
			fnMoveRecSelecterGridStandard (PTreeViewRec (Node.Data)^.nItemDivision,
																		PTreeViewRec (Node.Data)^.strHojCode);
		end
		else
			fnShowScreenInformations ();
	end
	else
	begin
		fnChangeConditionTabStandard  (PTreeViewRec (Node.Data)^.nItemDivision);
		fnMoveRecSelecterGridStandard (PTreeViewRec (Node.Data)^.nItemDivision,
																		PTreeViewRec (Node.Data)^.strHojCode);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTreeViewOnChanging (Sender: TObject; Node: TTreeNode; var AllowChange: Boolean);
begin
	if	(PTreeViewRec (Node.Data)^.nItemDivision = TREE_CHILD_INVALID) then
		AllowChange	:= FALSE;
end;


//***********************************************************************************************************/
//   ツリーのドラッグ＆ドロップ処理
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTreeViewOnDragDrop (Sender, Source: TObject; X, Y: Integer);
begin
	fnUpdateMasterRecordSumSystem (CmnTreeView.Selected, CmnTreeView.DropTarget);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTreeViewOnDragOver (Sender, Source: TObject; X, Y: Integer; State: TDragState; var Accept: Boolean);
var
	cNodeDst     : TTreeNode;
	cNodeTop	 : TTreeNode;
	cNodeTopNext : TTreeNode;
	cNodeLast	 : TTreeNode;
	cNodeLastPrev: TTreeNode;
	cNodeWork	 : TTreeNode;
	cNodeScroll	 : TTreeNode;
	hNodeID		 : HTreeItem;
	nCountVisible: Integer;
	nCountLoop	 : Integer;

begin
	cNodeDst		:= CmnTreeView.GetNodeAt (X, Y);									// ﾄﾞﾛｯﾌﾟ先ﾉｰﾄﾞ
	cNodeTop		:= CmnTreeView.TopItem;												// 一番上のﾉｰﾄﾞ
	cNodeTopNext	:= CmnTreeView.Items.GetNode (TreeView_GetNextVisible (CmnTreeView.Handle, cNodeTop.ItemId));
	cNodeLast		:= cNodeTop;
	cNodeLastPrev	:= nil;

	nCountVisible	:= TreeView_GetVisibleCount (CmnTreeView.Handle);					// 表示されているﾉｰﾄﾞ数

	for nCountLoop := 1 to nCountVisible do
	begin
		hNodeID	:= TreeView_GetNextVisible (CmnTreeView.Handle, cNodeLast.ItemId);

		if	(hNodeID = nil) then
			Break;

		if	(nCountLoop <= nCountVisible - 1) then
			cNodeLastPrev	:= CmnTreeView.Items.GetNode (hNodeID);

		cNodeLast	:= CmnTreeView.Items.GetNode (hNodeID);
	end;

	if	((cNodeDst = cNodeTop) or (cNodeDst = cNodeTopNext)) then
	begin
		cNodeWork	:= CmnTreeView.Items.GetNode (TreeView_GetPrevVisible (CmnTreeView.Handle, cNodeTop.ItemId));

		if	((cNodeWork <> nil) and (cNodeWork <> CmnTreeView.TopItem)) then
		begin
			CmnTreeView.TopItem	:= cNodeWork;
			CmnTreeView.Invalidate ();
		end;
	end
	else if	((cNodeDst = cNodeLast) or (cNodeDst = cNodeLastPrev)) then
	begin
		cNodeScroll	:= CmnTreeView.Items.GetNode (
										TreeView_GetNextVisible (CmnTreeView.Handle, CmnTreeView.TopItem.ItemId));

		if	(cNodeScroll <> nil) then
		begin
			cNodeWork			:= CmnTreeView.TopItem;
			CmnTreeView.TopItem	:= cNodeScroll;

			if	(cNodeWork <> CmnTreeView.TopItem) then
				CmnTreeView.Invalidate ();
		end;
	end;

	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM        ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM_SUM    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_PARENT_INVALID)) then
	begin
		Accept	:= FALSE;
		Exit;
	end;

	if	(cNodeDst = nil) then
	begin
		Accept	:= FALSE;
		Exit;
	end;

	if	((PTreeViewRec (cNodeDst.Data)^.nItemDivision <> TREE_CHILD_SUM ) and
		 (PTreeViewRec (cNodeDst.Data)^.nItemDivision <> TREE_PARENT_SUM) and
		 (PTreeViewRec (cNodeDst.Data)^.nItemDivision <> TREE_SYSTEM_SUM)) then
	begin
		Accept	:= FALSE;
		Exit;
	end;

	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD_SUM) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_GENERAL  )) then
	begin
		if	(PTreeViewRec (cNodeDst.Data)^.nItemDivision = TREE_SYSTEM_SUM) then
		begin
			Accept	:= FALSE;
			Exit;
		end;
	end;

	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_PARENT    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_PARENT_SUM)) then
	begin
		if	(PTreeViewRec (cNodeDst.Data)^.nItemDivision = TREE_CHILD_SUM) then
		begin
			Accept	:= FALSE;
			Exit;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTreeViewOnEnter (Sender: TObject);
begin
	m_cACControl	:= Screen.ActiveControl;

	fnCmnTreeViewOnChange (Sender, CmnTreeView.Selected);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuTreeViewOnPopup (Sender: TObject);
var
	nCount		: Integer;
	nTagDivision: Integer;
	nTagWork	: Integer;

begin
	if	(CmnTreeView.Items.Count <= 0) then
	begin
		for	nCount := 0 to CmnPopupMenuTreeView.Items.Count - 1 do
			CmnPopupMenuTreeView.Items [nCount].Enabled	:= FALSE;

		Exit;
	end;

	m_cNodeRightClick			:= CmnTreeView.Selected;
	m_cNodeRightClick.Selected	:= TRUE;

//--- <#7> St -----
{原型
	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM_SUM)) then
		Abort ();
}
	// ｢支払先体系｣｢名寄せ体系｣の時
	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM_SUM)) then
	begin
		CmnPopupMenuTreeViewDetail.Enabled := False;		// 詳細
															// ｢支払先体系｣の時
		if (PTreeViewRec(CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM) then
		begin
			CmnPopupMenuTreeViewErase.Visible  := False;	// 名寄せ情報から外す
			CmnPopupMenuTreeViewDelete.Visible := True;		// 削除
			CmnPopupMenuTreeViewDelete.Enabled := False;	// 削除
		end
															// ｢名寄せ体系｣の時
		else if (PTreeViewRec(CmnTreeView.Selected.Data)^.nItemDivision = TREE_SYSTEM_SUM) then
		begin
			CmnPopupMenuTreeViewDelete.Visible := False;	// 削除
			CmnPopupMenuTreeViewErase.Visible  := True;		// 名寄せ情報から外す
			CmnPopupMenuTreeViewErase.Enabled  := False;	// 名寄せ情報から外す
		end;

		CmnPopupMenuTreeViewTagOff.Visible     := False;	// はがす
		CmnPopupMenuTreeViewTagComment.Visible := False;	// 備考修正
		N3.Visible 							   := False;	// 備考修正
		CmnPopupMenuTreeViewTag01.Enabled      := False;	// 付箋｢赤｣
		CmnPopupMenuTreeViewTag02.Enabled      := False;	// 付箋｢青｣
		CmnPopupMenuTreeViewTag03.Enabled      := False;	// 付箋｢緑｣
		CmnPopupMenuTreeViewTag04.Enabled      := False;	// 付箋｢橙｣
    	exit;
	end;
//--- <#7> Ed -----

	CmnPopupMenuTreeViewDetail.Enabled	:= TRUE;

	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD_SUM ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_PARENT_SUM)) then
	begin
		CmnPopupMenuTreeViewErase .Visible	:= TRUE;
		CmnpopupMenuTreeViewDelete.Visible	:= FALSE;

		if	(m_nReferMode <> REFER) then												// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照以外
			CmnPopupMenuTreeViewErase.Enabled	:= TRUE
		else
			CmnPopupMenuTreeViewErase.Enabled	:= FALSE;
	end
	else
	begin
		CmnPopupMenuTreeViewErase .Visible	:= FALSE;
		CmnPopupMenuTreeViewDelete.Visible	:= TRUE;

		if	(m_nReferMode <> REFER) then												// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照以外
		begin
			if	(PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_GENERAL) then
			begin
				if	(fnCheckDeletePermitGeneralRec ()) then
					CmnPopupMenuTreeViewDelete.Enabled	:= TRUE
				else
					CmnPopupMenuTreeViewDelete.Enabled	:= FALSE;
			end
			else if	(PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_PARENT) then
			begin
				if	(fnCheckDeletePermitParentRec (PTreeViewRec (CmnTreeView.Selected.Data)^.nNCode)) then
					CmnPopupMenuTreeViewDelete.Enabled	:= TRUE
				else
					CmnPopupMenuTreeViewDelete.Enabled	:= FALSE;
			end
			else
				CmnPopupMenuTreeViewDelete.Enabled	:= TRUE;
		end
		else
			CmnPopupMenuTreeViewDelete.Enabled	:= FALSE;
	end;

	for	nCount := 1 to 4 do
	begin
		if	(m_nReferMode <> REFER) then												// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照以外
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Enabled	:= TRUE
		else
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Enabled	:= FALSE;
	end;

	nTagDivision	:= fnGetDivisionSelectedTag (PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode);

	if	(nTagDivision > 0) then
	begin
		CmnPopupMenuTreeViewTagOff    .Visible	:= TRUE;
		CmnPopupMenuTreeViewTagComment.Visible	:= TRUE;

		if	(nTagDivision = 2) then
			nTagWork	:= 3
		else if	(nTagDivision = 3) then
			nTagWork	:= 2
		else
			nTagWork	:= nTagDivision;

		CmnPopupMenuTreeViewTagOff.Bitmap	:=
									TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nTagWork]))).Bitmap;

		for	nCount := 1 to 4 do
		begin
			if	(nTagWork = nCount) then
				TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible	:= FALSE
			else
				TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible	:= TRUE;
		end;
	end
	else
	begin
		CmnPopupMenuTreeViewTagOff    .Visible	:= FALSE;
		CmnPopupMenuTreeViewTagComment.Visible	:= FALSE;

		for	nCount := 1 to 4 do
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible	:= TRUE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuTreeViewDetailOnClick (Sender: TObject);
begin
	m_cNodeRightClick.Selected	:= TRUE;

	fnShowScreenInformations ();

	fnChangeConditionToolbarButtons (-1, PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode);
	fnChangeConditionPageButtons	(CmnTabInformations.Visible);

	if	(m_nCurCodeAttribute <= 1) then
		m_cACControl	:= CmnEdit00001HojCodeNumeric
	else
		m_cACControl	:= CmnEdit00001HojCodeFree;

	if	(m_nReferMode = REFER) then													// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照の時
	begin
		CmnButtonUpdate.Enabled	:= FALSE;
		CmnButtonCancel.Enabled	:= FALSE;

		m_cACControl	:= CmnTreeView;
	end
	else
	begin
		CmnButtonUpdate.Enabled	:= TRUE;
		CmnButtonCancel.Enabled	:= TRUE;
	end;

//	CmnButtonToolbarDetail.Caption	:= '一覧(&T)';

	m_cACControl.SetFocus ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuTreeViewEraseOnClick (Sender: TObject);
begin
	fnEraseMasterRecordSumSystem (PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision,
															PTreeViewRec (m_cNodeRightClick.Data)^.nNCODE);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuTreeViewDeleteOnClick (Sender: TObject);
var
	cMessageRec: TMJSMsgRec;
	strMessage : String;

begin
	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 4);

	strMessage	:= '"' + PTreeViewRec (m_cNodeRightClick.Data)^.strDescription +
																	'"のレコードを' +  cMessageRec.sMsg;

	if	(MJSMessageBoxEx (Self,strMessage, cMessageRec.sTitle, cMessageRec.icontype,
									cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType) = mrYes) then
		fnDeleteMasterRecord (PTreeViewRec (m_cNodeRightClick.Data)^.nNCode);
//		fnDeleteMasterRecord (PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuTreeViewTagOnClick (Sender: TObject);
var
	nTagKindWork: Integer;

begin
	m_cNodeRightClick.Selected	:= TRUE;

	if	((Sender as TMenuItem).Name = CmnPopupMenuTreeViewTagOff.Name) then
		nTagKindWork	:= 0
	else if	((Sender as TMenuItem).Name = CmnPopupMenuTreeViewTagItem01.Name) then
		nTagKindWork	:= 1
	else if	((Sender as TMenuItem).Name = CmnPopupMenuTreeViewTagItem02.Name) then
		nTagKindWork	:= 3
	else if	((Sender as TMenuItem).Name = CmnPopupMenuTreeViewTagItem03.Name) then
		nTagKindWork	:= 2
	else if	((Sender as TMenuItem).Name = CmnPopupMenuTreeViewTagItem04.Name) then
		nTagKindWork	:= 4
	else
		nTagKindWork	:= 0;

	fnUpdateMasterRecordMFusenInfo (PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode, nTagKindWork);

	if	((PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_CHILD    ) or
		 (PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_CHILD_SUM) or
		 (PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_GENERAL  )) then
		fnUpdateMemDataStandardRecord  (0, PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode, nTagKindWork)
	else
		fnUpdateMemDataStandardRecord  (1, PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode, nTagKindWork);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuTreeViewTagOnClickEx (Sender: TObject);
//var
//	dqMasterData: TMQuery;
//	cMemData	: TdxMemData;
//	cMasDlgParam: TJNTMasDLGParam;
//	cMasDlgIF	: TJNTMASFUSENBIKODLGIF;
//	nCount		: Integer;
//	nTagKindWork: Integer;
//	fIgnore		: Boolean;

begin
{
	nTagKindWork	:= 0;
	fIgnore			:= FALSE;

	if	(TMenuItem (Sender).Name = CmnPopupMenuTreeViewTagComment.Name) then
	begin
		for	nCount := 1 to 4 do
		begin
			if	(not TMenuItem (MJSFindCtrl (Self, Format (_PMItemTVTag, [nCount]))).Visible) then
			begin
				case (nCount) of
					1:	nTagKindWork	:= 1;
					2:	nTagKindWork	:= 3;
					3:	nTagKindWork	:= 2;
					4:	nTagKindWork	:= 4;
				end;
			end;
		end;

		fIgnore	:= TRUE;
	end
	else if	(TMenuItem (Sender).Name = CmnPopupMenuTreeViewTagItem01Ex.Name) then
		nTagKindWork	:= 1
	else if	(TMenuItem (Sender).Name = CmnPopupMenuTreeViewTagItem02Ex.Name) then
		nTagKindWork	:= 3
	else if	(TMenuItem (Sender).Name = CmnPopupMenuTreeViewTagItem03Ex.Name) then
		nTagKindWork	:= 2
	else if	(TMenuItem (Sender).Name = CmnPopupMenuTreeViewTagItem04Ex.Name) then
		nTagKindWork	:= 4
	else
		Exit;

	if	(not fIgnore) then
	begin
		fnUpdateMasterRecordMFusenInfo (PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode, nTagKindWork);

		if	((PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_CHILD  ) or
			 (PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_GENERAL)) then
			fnUpdateMemDataStandardRecord (0, PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode, nTagKindWork)
		else
			fnUpdateMemDataStandardRecord (1, PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode, nTagKindWork);
	end;

	cMasDlgIF	:= TJNTMASFUSENBIKODLGIF.Create ();
	cMasDlgIF.Init (Pointer (m_pRec));

	cMasDlgParam	:= TJNTMasDLGParam.CreateParam ();

	cMasDlgParam.m_iMasterkbn	:= MASTER_CUSTOMER;										// ﾏｽﾀ区分
	cMasDlgParam.m_iKmkCode		:= 0;													// 科目ｺｰﾄﾞ
	cMasDlgParam.m_iSubCode		:= 0;													// 科目別補助ｺｰﾄﾞ
	cMasDlgParam.m_sHojyoCode	:= PTreeViewRec (m_cNodeRightClick.Data)^.strHojCode;	// 補助ｺｰﾄﾞ
	cMasDlgParam.m_iFusenKbn	:= nTagKindWork;										// 付箋区分
	cMasDlgParam.m_pApRec		:= Pointer (m_pRec);									// TMjsAppRecord

	if	(cMasDlgIF.DoDlg (cMasDlgParam) = mrOK) then									// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	begin
		dqMasterData	:= TMQuery.Create (Self);

		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);						// DBとMQueryの接続

		with (dqMasterData) do
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT FusenCmnt FROM MFusenInfo ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND HojyoCode = :strHojCode');

			ParamByName ('nMasterDivision').AsInteger	:= cMasDlgParam.m_iMasterkbn;
			ParamByName ('strHojCode'     ).AsString	:= cMasDlgParam.m_sHojyoCode;

			Open ();

			if	(CmnPanelClientStandard.Visible and
				((PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_CHILD  ) or
				 (PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_GENERAL))) then
				fnMoveRecSelecterGridStandard (
								PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision, cMasDlgParam.m_sHojyoCode);

			if	((PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_CHILD  ) or
				 (PTreeViewRec (m_cNodeRightClick.Data)^.nItemDivision = TREE_GENERAL)) then
				cMemData	:= CmnMemDataStandardExist
			else
				cMemData	:= CmnMemDataStandardTotal;

			cMemData.Edit ();

			if	(not EOF) then
				cMemData.FieldByName ('strComment').AsString	:= FieldByName ('FusenCmnt').AsString
			else
				cMemData.FieldByName ('strComment').AsString	:= '';

			cMemData.Post ();
		end;

		dqMasterData.Close ();
		dqMasterData.Free  ();
	end;

	cMasDlgParam.Free ();

	cMasDlgIF.Term ();
	cMasDlgIF.Free ();
}
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuGridStandardOnPopup (Sender: TObject);
//var
//	cMemData	: TdxMemData;
//	nCount		: Integer;
//	nTagDivision: Integer;
//	nTagWork	: Integer;
//	strHojCode	: String;

begin
{
	if	(CmnTabStandard.Items.Selected = 0) then
		cMemData	:= CmnMemDataStandardExist
	else
		cMemData	:= CmnMemDataStandardTotal;

	strHojCode	:= '';

	if	((m_nCurCodeAttribute <= 1) and (cMemData.FieldByName ('strHojCode').AsString <> '')) then
//		strHojCode	:= Format ('%.10d', [StrToInt64 (Trim (cMemData.FieldByName ('strHojCode').AsString))])
		strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (cMemData.FieldByName ('strHojCode').AsString))])
	else
		strHojCode	:= cMemData.FieldByName ('strHojCode').AsString;

	if	(strHojCode = '') then
	begin
		CmnPopupMenuGridStandardTagOff    .Visible	:= FALSE;
		CmnPopupMenuGridStandardTagComment.Visible	:= FALSE;

		for	nCount := 1 to 4 do
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Enabled	:= FALSE;

		Exit;
	end;

	for	nCount := 1 to 4 do
		TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Enabled	:= TRUE;

	nTagDivision	:= fnGetDivisionSelectedTag (strHojCode);

	if	(nTagDivision > 0) then
	begin
		CmnPopupMenuGridStandardTagOff    .Visible	:= TRUE;
		CmnPopupMenuGridStandardTagComment.Visible	:= TRUE;

		if	(nTagDivision = 2) then
			nTagWork	:= 3
		else if	(nTagDivision = 3) then
			nTagWork	:= 2
		else
			nTagWork	:= nTagDivision;

		CmnPopupMenuGridStandardTagOff.Bitmap	:=
									TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nTagWork]))).Bitmap;

		for	nCount := 1 to 4 do
		begin
			if	(nTagWork = nCount) then
				TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible	:= FALSE
			else
				TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible	:= TRUE;
		end;
	end
	else
	begin
		CmnPopupMenuGridStandardTagOff    .Visible	:= FALSE;
		CmnPopupMenuGridStandardTagComment.Visible	:= FALSE;

		for	nCount := 1 to 4 do
			TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible	:= TRUE;
	end;
}
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuGridStandardTagOnClick (Sender: TObject);
var
	nTagKind: Integer;

begin
	if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagOff.Name) then
		nTagKind	:= 0
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem01.Name) then
		nTagKind	:= 1
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem02.Name) then
		nTagKind	:= 3
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem03.Name) then
		nTagKind	:= 2
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem04.Name) then
		nTagKind	:= 4
	else
		nTagKind	:= 0;

	if	(CmnTabStandard.Items.Selected = 0) then
		fnSetTagInfoGridStandard (0, nTagKind)
	else
		fnSetTagInfoGridStandard (1, nTagKind);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuGridStandardTagOnClickEx (Sender: TObject);
//var
//	dqMasterData: TMQuery;
//	cMemData	: TdxMemData;
//	cMasDlgParam: TJNTMasDLGParam;
//	cMasDlgIF	: TJNTMASFUSENBIKODLGIF;
//	nCount		: Integer;
//	nTagKindWork: Integer;
//	nDivision	: Integer;
//	fIgnore		: Boolean;

begin
{
	nTagKindWork	:= 0;
	fIgnore			:= FALSE;

	if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagComment.Name) then
	begin
		for	nCount := 1 to 4 do
		begin
			if	(not TMenuItem (MJSFindCtrl (Self, Format (_PMItemGSTag, [nCount]))).Visible) then
			begin
				case (nCount) of
					1:	nTagKindWork	:= 1;
					2:	nTagKindWork	:= 3;
					3:	nTagKindWork	:= 2;
					4:	nTagKindWork	:= 4;
				end;
			end;
		end;

		fIgnore	:= TRUE;
	end
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem01Ex.Name) then
		nTagKindWork	:= 1
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem02Ex.Name) then
		nTagKindWork	:= 3
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem03Ex.Name) then
		nTagKindWork	:= 2
	else if	(TMenuItem (Sender).Name = CmnPopupMenuGridStandardTagItem04Ex.Name) then
		nTagKindWork	:= 4
	else
		Exit;

	if	(CmnTabStandard.Items.Selected = 0) then
	begin
		cMemData	:= CmnMemDataStandardExist;
		nDivision	:= 0;
	end
	else
	begin
		cMemData	:= CmnMemDataStandardTotal;
		nDivision	:= 1;
	end;

	if	(not fIgnore) then
		fnSetTagInfoGridStandard (nDivision, nTagKindWork);

	cMasDlgIF	:= TJNTMASFUSENBIKODLGIF.Create ();
	cMasDlgIF.Init (Pointer (m_pRec));

	cMasDlgParam	:= TJNTMasDLGParam.CreateParam ();

	cMasDlgParam.m_iMasterkbn	:= MASTER_CUSTOMER;										// ﾏｽﾀ区分
	cMasDlgParam.m_iKmkCode		:= 0;													// 科目ｺｰﾄﾞ
	cMasDlgParam.m_iSubCode		:= 0;													// 科目別補助ｺｰﾄﾞ

	if	((m_nCurCodeAttribute <= 1) and (cMemData.FieldByName ('strHojCode').AsString <> '')) then
		cMasDlgParam.m_sHojyoCode	:= Format ('%.16d', [StrToInt64 (
															Trim (cMemData.FieldByName ('strHojCode').AsString))])


	else
		cMasDlgParam.m_sHojyoCode	:= cMemData.FieldByName ('strHojCode').AsString;

	cMasDlgParam.m_iFusenKbn	:= nTagKindWork;										// 付箋区分
	cMasDlgParam.m_pApRec		:= Pointer (m_pRec);									// TMjsAppRecord

	if	(cMasDlgIF.DoDlg (cMasDlgParam) = mrOK) then									// 付箋備考ﾀﾞｲｱﾛｸﾞ表示
	begin
		dqMasterData	:= TMQuery.Create (Self);

		m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);						// DBとMQueryの接続

		with (dqMasterData) do
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT FusenCmnt FROM MFusenInfo ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND HojyoCode = :strHojCode');

			ParamByName ('nMasterDivision').AsInteger	:= cMasDlgParam.m_iMasterkbn;
			ParamByName ('strHojCode'     ).AsString	:= cMasDlgParam.m_sHojyoCode;

			Open ();

			cMemData.Edit ();

			if	(not EOF) then
				cMemData.FieldByName ('strComment').AsString	:= FieldByName ('FusenCmnt').AsString
			else
				cMemData.FieldByName ('strComment').AsString	:= '';

			cMemData.Post ();
		end;

		dqMasterData.Close ();
		dqMasterData.Free  ();
	end;

	cMasDlgParam.Free ();

	cMasDlgIF.Term ();
	cMasDlgIF.Free ();
}
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPopupMenuToolbarTagOnClick (Sender: TObject);
begin
//	CmnButtonToolbarTag.ImageIndex	:= TMenuItem (Sender).ImageIndex;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnDataSourceStandardOnStateChange (Sender: TObject);
var
	cMemData: TdxMemData;
	cDBGrid	: TdxDBGrid;

begin
	if	(TDataSource (Sender).Name = CmnDataSourceStandardExist.Name) then
	begin
		cMemData	:= CmnMemDataStandardExist;
		cDBGrid		:= CmnGridStandardExist;
	end
	else
	begin
		cMemData	:= CmnMemDataStandardTotal;
		cDBGrid		:= CmnGridStandardTotal;
	end;

	if	(cMemData.State in [dsInsert]) then
		cDBGrid.Columns [1].ReadOnly	:= FALSE
	else
		cDBGrid.Columns [1].ReadOnly	:= TRUE;

	if	(cMemData.Active and (TDataSource (Sender).DataSet <> nil)) then
	begin
		if	(cDBGrid.DataSource.DataSet.RecordCount = 0) then
			cDBGrid.Columns [1].ReadOnly	:= FALSE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnMemDataStandardBeforePost (DataSet: TDataSet);
var
	cFieldWork : TField;
	pMasterData: ^MasterData;
	strHojCode : String;
//    lvNCODE    : Extended;

begin
	if	(m_fUnderConstruction) then
		Exit;

	with (DataSet) do
	begin
		cFieldWork	:= FieldByName ('strHojCode');

		if	(not fnCheckValidCodeUseCharacters (cFieldWork.AsString)) then
		begin
			Beep ();

			cFieldWork.FocusControl ();
			Abort ();
		end;

		if	(State in [dsInsert]) then
		begin
			if	(m_nCurCodeAttribute <= 1) then
			begin
				if	(StrToInt64 (Trim (cFieldWork.AsString)) = 0) then
				begin
					cFieldWork.FocusControl ();
					Abort ();
				end;
			end;

			if	(not fnCheckValidMasterDataRecord (cFieldWork.AsString)) then
			begin
				cFieldWork.FocusControl ();
				Abort ();
			end;
		end;

		New (pMasterData);

		strHojCode	:= FieldByName ('strHojCode').AsString;

		if  (m_nCurCodeAttribute <= 1) then
			strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

		pMasterData^.strHojCode		:= strHojCode;
		pMasterData^.strAssociation	:= FieldByName ('strAssociation').AsString;
		pMasterData^.strName		:= FieldByName ('strName'       ).AsString;
		pMasterData^.strNameSimple	:= FieldByName ('strNameSimple' ).AsString;

		if	(Name = CmnMemDataStandardExist.Name) then
			pMasterData^.nSumDivision	:= 0
		else
			pMasterData^.nSumDivision	:= 1;

		pMasterData^.fDetails	:= FALSE;

		if	(not fnUpdateMasterRecordStandard (pMasterData)) then
		begin
			Dispose (pMasterData);

			Cancel ();

			if	(Name = CmnMemDataStandardExist.Name) then
				CmnGridStandardExist.FocusedColumn	:= 1
			else
				CmnGridStandardTotal.FocusedColumn	:= 1;

			Abort ();
		end;

		Dispose (pMasterData);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnBeforeChangeColumn (Sender: TObject; Node: TdxTreeListNode;
							Column: Integer; NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
var
	cField       : TField;
	strHojCode	 : String;
	strFormat	 : String;
	strName      : String;
	strNameSimple: String;

begin
	if	(Column = 1) then																// 取引先ｺｰﾄﾞ
    begin
		cField	:= TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strHojCode');

		if	(not fnCheckValidCodeUseCharacters (cField.AsString)) then
		begin
			Beep ();

			cField.FocusControl ();
			Abort ();
		end;

		if	(TdxDBGrid (Sender).DataSource.DataSet.State in [dsInsert]) then
		begin
			if  ((Trim (cField.AsString) = '') or (Trim (cField.AsString) = '0')) then
			begin
				Beep ();

				cField.FocusControl ();
				Abort ();
			end;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				if	(StrToInt64 (Trim (cField.AsString)) = 0) then
				begin
					Beep ();

					cField.FocusControl ();
					Abort ();
				end;
			end;
		end;

		if	(not TdxDBGrid (Sender).Columns [1].ReadOnly) then
		begin
			if	(not fnCheckValidMasterDataRecord (cField.AsString)) then
			begin
				Beep ();

				cField.FocusControl ();
				Abort ();
			end;

			strHojCode	:= cField.AsString;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strHojCode').AsString	:= strHojCode;
		end;
	end;

	if	(Column = 3) then
	begin
		strNameSimple	:= TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strNameSimple').AsString;

		if	(strNameSimple = '') then
		begin
			strName	:= TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strName').AsString;

			if	(strName <> '') then
			begin
				TdxDBGrid (Sender).DataLink.Edit ();

				if	(StrLen (PChar (strName)) <= 14) then
					TdxDBGrid (Sender).Columns [4].Field.AsString	:= Copy (strName, 1, 14)
				else
					TdxDBGrid (Sender).Columns [4].Field.AsString	:= MJSKabuCut (strName, 14);
			end;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnChangeColumn (Sender: TObject; Node: TdxTreeListNode; Column: Integer);
var
	stMessageRec: TMJSMsgRec;

begin
	if	(Column = 4) then
	begin
		m_cComArea.m_MsgStd.GetMsg (stMessageRec, 30, 19);

		CmnStatusBar.SimpleText	:= stMessageRec.sMsg;
	end
	else
		CmnStatusBar.SimpleText	:= '';
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnChangeNode (Sender: TObject; OldNode, Node: TdxTreeListNode);
var
	fValueCheck: Boolean;

begin
	fValueCheck	:= TRUE;

	if	((m_nCurCodeAttribute <= 1) and (TdxDBGrid (Sender).FocusedNode.Strings [1] <> '')) then
	begin
		if	((TdxDBGrid (Sender).DataSource.DataSet.State in [dsInsert]) and
			 (StrToInt64 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1])) = 0)) then
			fValueCheck := FALSE;
	end;

	if	((TdxDBGrid (Sender).FocusedNode.Strings [1] = '') or (not fValueCheck)) then
	begin
		TdxDBGrid (Sender).FocusedColumn	:= 1;

//		CmnButtonToolbarDetail.Enabled	:= FALSE;
//		CmnButtonToolbarDelete.Enabled	:= FALSE;
//		CmnButtonToolbarTag   .Enabled	:= FALSE;
	end
	else
	begin
		if	(Screen.ActiveControl.Name = TdxDBGrid (Sender).Name) then
			fnChangeConditionToolbarButtons (-1, TdxDBGrid (Sender).FocusedNode.Strings [1]);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnChangeNodeEx (Sender: TObject);
var
	fValueCheck: Boolean;

begin
	fValueCheck	:= TRUE;

	if	(not fnCheckValidCodeUseCharacters (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
		fValueCheck	:= FALSE;

	if	(fValueCheck and (TdxDBGrid (Sender).DataSource.DataSet.State in [dsInsert])) then
	begin
		if	((Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '' ) or
			 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '0')) then
			fValueCheck	:= FALSE
		else if	(m_nCurCodeAttribute <= 1) then
		begin
			if	(StrToInt64 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1])) = 0) then
				fValueCheck	:= FALSE;
		end;
	end;

	if	(fValueCheck and (not TdxDBGrid (Sender).Columns [1].ReadOnly)) then
	begin
		if	(not fnCheckValidMasterDataRecord (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
			fValueCheck	:= FALSE;
	end;

	if	(not fValueCheck) then
	begin
		TdxDBGrid (Sender).FocusedColumn	:= 1;

//		CmnButtonToolbarDetail.Enabled	:= FALSE;
//		CmnButtonToolbarDelete.Enabled	:= FALSE;
//		CmnButtonToolbarTag   .Enabled	:= FALSE;
	end
	else
	begin
		if	(Screen.ActiveControl.Name = TdxDBGrid (Sender).Name) then
			fnChangeConditionToolbarButtons (-1, TdxDBGrid (Sender).FocusedNode.Strings [1]);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnEnter (Sender: TObject);
var
	fValueCheck: Boolean;

begin
	fnCmnFunctionOnEnter (Sender);

	TdxDBGrid (Sender).FocusedColumn	:= 1;

	fValueCheck	:= TRUE;

	if	(not fnCheckValidCodeUseCharacters (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
		fValueCheck	:= FALSE;

	if	(fValueCheck and (TdxDBGrid (Sender).DataSource.DataSet.State in [dsInsert])) then
	begin
		if	((Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '' ) or
			 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1]) = '0')) then
			fValueCheck	:= FALSE
		else if	(m_nCurCodeAttribute <= 1) then
		begin
			if	(StrToInt64 (Trim (TdxDBGrid (Sender).FocusedNode.Strings [1])) = 0) then
				fValueCheck	:= FALSE;
		end;
	end;

	if	(fValueCheck and (not TdxDBGrid (Sender).Columns [1].ReadOnly)) then
	begin
		if	(not fnCheckValidMasterDataRecord (TdxDBGrid (Sender).FocusedNode.Strings [1])) then
			fValueCheck	:= FALSE;
	end;

	if	(not fValueCheck) then
	begin
		TdxDBGrid (Sender).FocusedColumn	:= 1;

//		CmnButtonToolbarDetail.Enabled	:= FALSE;
//		CmnButtonToolbarDelete.Enabled	:= FALSE;
//		CmnButtonToolbarTag   .Enabled	:= FALSE;
	end
	else
	begin
		if	(Screen.ActiveControl.Name = TdxDBGrid (Sender).Name) then
			fnChangeConditionToolbarButtons (-1, TdxDBGrid (Sender).FocusedNode.Strings [1]);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnKeyPress (Sender: TObject; var Key: Char);
begin
	if	((TdxDBGrid (Sender).FocusedColumn <> 1) or (m_nCurCodeAttribute = 2)) then
		Exit;

	//* #8=BackSpace, #27=Esc, #9=Tab */
	if	(((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9)) then
	begin
		Beep  ();
		Abort ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnMouseDown (Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	if	((TdxDBGrid (Sender).FocusedColumn = 0) or										// ﾌｫｰｶｽ位置: 0=付箋
		 (TdxDBGrid (Sender).FocusedColumn = 6) or										// ﾌｫｰｶｽ位置: 6=得意先採用記述
    	 (TdxDBGrid (Sender).FocusedColumn = 8)) then									// ﾌｫｰｶｽ位置: 8=仕入先採用記述
	begin
		TField (TdxDBGrid (Sender).DataSource.DataSet.FieldByName ('strHojCode')).FocusControl ();

		Abort ();
		Exit;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridStandardOnMouseMove (Sender: TObject; Shift: TShiftState; X, Y: Integer);
var
	nHojCodeSelect	: Extended;
	strHojCodeSelect: String;

begin
	inherited;

	nHojCodeSelect		:= 0;
	strHojCodeSelect	:= '';

	if	((Y <= TdxDBGrid (Sender).HeaderPanelHeight) or (X <= TdxDBGrid (Sender).GrIndicatorWidth ) or
		 (X >= (TdxDBGrid (Sender).GrIndicatorWidth + TdxDBGrid (Sender).Columns [0].Width))) then
	begin
		m_nHintPosition		:= 0;
		m_strHintPosition	:= '';

		TdxDBGrid (Sender).Hint		:= '';
		TdxDBGrid (Sender).ShowHint	:= FALSE;

		Exit;
	end;

	if	((TdxDBGrid (Sender).GetNodeAt (X, Y) <> nil) and
		 (not VarIsNull (TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [1]))) then
	begin
		if	(m_nCurCodeAttribute <= 1) then
			nHojCodeSelect		:= TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [1]
		else
			strHojCodeSelect	:= TdxTreelistNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [1];

		if	(((m_nCurCodeAttribute <= 1) and (nHojCodeSelect <> m_nHintPosition)) or
			 ((m_nCurCodeAttribute  = 2) and (CompareStr (strHojCodeSelect, m_strHintPosition) <> 0))) then
		begin
			m_nHintPosition		:= nHojCodeSelect;
			m_strHintPosition	:= strHojCodeSelect;

			TdxDBGrid (Sender).Hint		:= '';
			TdxDBGrid (Sender).ShowHint	:= FALSE;

			Exit;
		end;

		if	(TdxDBGrid (Sender).ShowHint and
			(((m_nCurCodeAttribute <= 1) and (nHojCodeSelect = m_nHintPosition)) or
			 ((m_nCurCodeAttribute  = 2) and (CompareStr (strHojCodeSelect, m_strHintPosition) = 0)))) then
			Exit;

		if	(VarIsNull (TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [5])) then
			Exit;

		if	(TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [5] <> '') then
		begin
			TdxDBGrid (Sender).Hint		:= TdxTreeListNode (TdxDBGrid (Sender).GetNodeAt (X, Y)).Values [5];
			TdxDBGrid (Sender).ShowHint	:= TRUE;
		end;
	end
	else
	begin
		m_nHintPosition		:= 0;
		m_strHintPosition	:= '';

		TdxDBGrid (Sender).Hint		:= '';
		TdxDBGrid (Sender).ShowHint	:= FALSE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabDetailOnChange (Sender: TObject);
// <149> 2006/10/11 H.Kawato Del        実在・合計情報タブ
//var
//	nSumDivision: Integer;
// <149> 2006/10/11 H.Kawato Del
begin
// <149> 2006/10/11 H.Kawato Del Start  実在・合計情報タブ
{
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD_SUM) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_GENERAL  )) then
		nSumDivision	:= 1															// 実在/合計区分: 1=合計
	else
		nSumDivision	:= 0;															// 実在/合計区分: 0=実在

	if	((TMTabItems (Sender)) [nSumDivision].Selected) then
	begin
		m_cNodePrevSelect	:= CmnTreeView.Selected;

		CmnEdit00001HojCodeNumeric.Value		:= 0;
		CmnEdit00001HojCodeNumeric.InputFlag	:= TRUE;
		CmnEdit00001HojCodeFree   .Text			:= '';

		if	(nSumDivision = 0) then
			fnChangeConditionScreenDetails (TRUE)
		else
			fnChangeConditionScreenDetails (FALSE);

		fnInitializeScreenDetails	 ();
		fnInitializeScreenDetailInfo ();
	end
	else																				// 以前の状態に戻す
	begin
		if	(m_cNodePrevSelect <> nil) then
		begin
			m_cNodePrevSelect.Selected	:= TRUE;

			if	(m_nCurCodeAttribute <= 1) then
			begin
//				CmnEdit00001HojCodeNumeric.Value		:= StrToInt64 (PTreeViewRec (m_cNodePrevSelect.Data)^.strHojCode);
				CmnEdit00001HojCodeNumeric.InputFlag	:= FALSE;
			end
			else
				CmnEdit00001HojCodeFree.Text	:= PTreeViewRec (m_cNodePrevSelect.Data)^.strHojCode;

			fnShowScreenInformations ();
		end;
	end;
}
// <149> 2006/10/11 H.Kawato Del End
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnFunctionOnChange (Sender: TObject);
begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

// <SCA> ADD-STR
    if (Pos('BranchCode', TWinControl(Sender).Name) <> 0) then
        m_anBrachNCode[StrToInt(Copy(TWinControl(Sender).Name, 8, 2)) - 1] := 0;    // 振込先支店内部コードクリア
// <SCA> ADD-END

// <149> 2006/12/14 H.Kawato Add Start
    if ((Sender as TComponent).Name = CmnEdit00012DecPtnDivision.Name) then
        m_bDecPtnChange := True;
// <149> 2006/12/14 H.Kawato Add End

	if	(m_nReferMode = NORMAL) then
		fnSetChangeFlagCheckItems (Sender, TRUE);

//<#TAX10> ADD-STR
    if (TWinControl(Sender).Name = CmnEdit05007TaxRate.Name) then
    begin
		// 軽減税率の背景色をセット
		if m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(CmnEdit05007TaxRate.AsInteger)) then
		begin
			CmnEdit05007TaxRateDesc.Color	:= m_TaxRateInfo.BGColor;
		end
		else
		begin
			CmnEdit05007TaxRateDesc.Color	:= clWindow;
		end;
    end;
//<#TAX10> ADD-END
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditNameOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
var
	strDescription: String;

begin
	fnCmnFunctionOnKeyDown (Sender, Key, Shift);

	if	((Key <> VK_RETURN) and (Key <> VK_RIGHT) and (Key <> VK_DOWN)) then
		Exit;

	strDescription	:= '';

	if	(CmnEdit00004NameSimple.Text = '') then
	begin
		if	(StrLen (PChar (TMTxtEdit (Sender).Text)) <= 14) then
			strDescription	:= TMTxtEdit (Sender).Text
		else
			strDescription	:= MJSKabuCut (TMTxtEdit (Sender).Text, 14);
	end;

	if	(Key = VK_RETURN) then
	begin
		if	(strDescription <> '') then
			CmnEdit00004NameSimple.Text	:= strDescription;
	end
	else if	((Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	(Sender is TMTxtEdit) then
		begin
			if	(MJSChkCurEnd (Sender as TComponent)) then
			begin
				if	(strDescription <> '') then
					CmnEdit00004NameSimple.Text	:= strDescription;
			end;
		end
		else
		begin
			if	(strDescription <> '') then
				CmnEdit00004NameSimple.Text	:= strDescription;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditNameSimpleOnExit (Sender: TObject);
begin
	CmnStatusBar.SimpleText	:= '';
    fnSetFncType(8,false);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabInformationsOnChange (Sender: TObject);
var
	cTabOrderList: TList;
	nIndex		 : Integer;
    iFldID       : Integer;     // <140> 2006/08/03 H.Kawato Add
    fRetuen      : Boolean;     // <140> 2006/08/03 H.Kawato Add

begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

    m_TabClick := True;

	fnChangeConditionPageButtons (CmnTabInformations.Visible);

	if	(m_fThroughTab and (Screen.ActiveControl.Name = CmnTabInformations.Name)) then
	begin
		m_fThroughTab	:= FALSE;
		Exit;
	end;

	if	(m_fUnderConstruction) then
		Exit;

	if	(m_nReferMode = REFER) then														// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照の時
		Exit;

// <140> 2006/08/03 H.Kawato Add Start
    for iFldID := 3 to 5 do
    begin
        fRetuen := fnCheckEditTxtValueHojCodeEx(iFldID);
        if fRetuen = False then
            Break;
    end;

    if fRetuen = False then
    begin
        m_TabClick := False;
// <211> MOD-STR
//      CmnTabInformations.Items.Selected := 4;
        CmnTabInformations.Items.Selected := TI_OFFSET;
// <211> MOD-END
        m_cACControl.SetFocus;
        Exit;
    end;

    m_TabClick := False;
// <140> 2006/08/03 H.Kawato Add End

	nIndex	:= CmnTabInformations.Items.Selected;

// <211> MOD-STR
//	if	(nIndex = 4) then
	if	(nIndex = TI_OFFSET) then
// <211> MOD-END
	begin
// <222-2> ADD start
		if CmnEdit05001SeqNo.CanFocus then
        begin
// <222-2> ADD end
            m_cACControl	:= CmnEdit05001SeqNo;
            m_cACControl.SetFocus ();
        end;								// <222-2> ADD
	end
    //↓HIS0034 Add
// <211> MOD-STR
//  else if (nIndex = 5) then
    else if (nIndex = TI_OTHERS1) then
// <211> MOD-END
	begin
// <110>		m_cACControl	:= CmnEdit06003ReceiverName;
// <222-2> ADD start
		if CmnEdit01027ReceiverName.CanFocus then
        begin
// <222-2> ADD end
			m_cACControl	:= CmnEdit01027ReceiverName;
			m_cACControl.SetFocus ();
		end;								// <222-2> ADD
	end
    //↑HIS0034 Add
	else
	begin
		cTabOrderList	:= TList.Create ();

		TMPanel (CmnTabInformations.Items [nIndex].SyncControl).GetTabOrderList (cTabOrderList);

		m_cACControl	:= cTabOrderList.First ();

		while (TRUE) do
		begin
			if	((m_cACControl is TMNumEdit) or (m_cACControl is TMTxtEdit)) then
				Break;

			cTabOrderList.Clear ();

			m_cACControl.GetTabOrderList (cTabOrderList);
			m_cACControl	:= cTabOrderList.First ();
		end;

// <222-2> ADD start
        if (m_cACControl.CanFocus) and
                                                // NuMEditでStaticでない
            (((m_cACControl is TMNumEdit) and (not TMNumEdit(m_cACControl).Static)) or
                                                // またはNumEditでない
              (not (m_cACControl is TMNumEdit))) then
        begin
// <222-2> ADD end
			m_cACControl.SetFocus ();
        end;								// <222-2> ADD

		cTabOrderList.Free ();
	end;

// <222-2> ADD start
	if (not m_cACControl.CanFocus) or
    	((m_cACControl is TMNumEdit) and (TMNumEdit(m_cACControl).Static)) then
    begin
    	if CmnButtonPageNext.CanFocus then
        begin
        	m_cACControl := CmnButtonPageNext;
        end
        else if CmnButtonPagePrevious.CanFocus then
        begin
        	m_cACControl := CmnButtonPageNext;
        end;
        if m_cACControl.CanFocus then
        begin
	        m_cACControl.SetFocus;
        end;
    end;
// <222-2> ADD end
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabDetailOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
// <149> 2006/10/11 H.Kawato Del Start  実在・合計情報タブ
{
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	if	(m_nReferMode = REFER) then														// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照の時
		Exit;

	if	((Key = VK_RETURN) or (Key = VK_DOWN)) then
	begin
		if	(m_nCurCodeAttribute <= 1) then
			m_cACControl	:= CmnEdit00001HojCodeNumeric
		else
			m_cACControl	:= CmnEdit00001HojCodeFree;

		m_cACControl.SetFocus ();
	end;
}
// <149> 2006/10/11 H.Kawato Del End
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabInformationsOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
var
	cTabOrderList: TList;
	nIndex		 : Integer;

begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	if	(m_nReferMode = REFER) then														// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照の時
		Exit;

	if	((Key = VK_RETURN) or (Key = VK_DOWN)) then
	begin
		nIndex	:= CmnTabInformations.Items.Selected;

// <211> MOD-STR
//		if	(nIndex = 4) then
		if	(nIndex = TI_OFFSET) then
// <211> MOD-END
		begin
// <222-2> ADD start
			if CmnEdit05001SeqNo.CanFocus then
            begin
// <222-2> ADD end
                m_cACControl	:= CmnEdit05001SeqNo;
                m_cACControl.SetFocus ();
			end;							// <222-2> ADD
		end
		else
		begin
			cTabOrderList	:= TList.Create ();

			TMPanel (CmnTabInformations.Items [nIndex].SyncControl).GetTabOrderList (cTabOrderList);

			m_cACControl	:= cTabOrderList.First ();

			while (TRUE) do
			begin
				if	((m_cACControl is TMNumEdit) or (m_cACControl is TMTxtEdit)) then
					Break;

				cTabOrderList.Clear ();

				m_cACControl.GetTabOrderList (cTabOrderList);
				m_cACControl	:= cTabOrderList.First ();
			end;

// <222-2> ADD start
			if m_cACControl.CanFocus then
            begin
// <222-2> ADD end
				m_cACControl.SetFocus ();
            end;							// <222-2> ADD

			cTabOrderList.Free ();
		end;
	end;

	if	(((Key = VK_LEFT) and (Shift = [])) or ((Key = VK_RIGHT) and (Shift = []))) then
		m_fThroughTab	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
//procedure	TJNTCRP004006f.fnCmnEditDecDivisionOnChange (Sender: TObject);
//var
//	strHojCode: String;

//begin
//	if	(m_pRec^.m_pChildForm = nil) then
//		Exit;

//	fnCmnFunctionNumEditOnChange (Sender);

//	if	(m_nCurCodeAttribute <= 1) then
//		strHojCode	:= Format ('%.10d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
//	else
//		strHojCode	:= CmnEdit00001HojCodeFree.Text;

//	fnSetPaymentRecords (strHojCode, (Sender as TMNumEdit).AsInteger);
//end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditPaymentColumnOnChange (Sender: TObject);
var
	strDescription: String;

begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	fnGetDescriptionSelectedItem (TMNumEdit (Sender), strDescription);

	TMLabel (MJSFindCtrl (Self, 'CmnLabelPaymentColumn' +
								Copy (TMNumEdit (Sender).Name, 21, 10) + 'Desc')).Caption	:= strDescription;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditPaymentColumnOnEnter (Sender: TObject);
var
	nFieldID: Integer;

begin
	fnCmnFunctionOnEnter (Sender);

	nFieldID	:= 2 + 5 * Trunc ((StrToInt (Copy (TMNumEdit (Sender).Name, 10, 3)) - 2) / 5);

	if	(TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID]))).AsInteger = 0) then
	begin
		while (TRUE) do
		begin
			if	(nFieldID - 5 < 2) then
				Break;

			if	(TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID - 5]))).AsInteger <> 0) then
				Break;

			nFieldID	:= nFieldID - 5;
		end;

		m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID])));
		m_cACControl.SetFocus ();

		Exit;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditPaymentColumnDivisionOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
var
	nFieldID: Integer;
	nReturn	: Integer;

begin
	if	((Key = VK_RETURN) or (Key = VK_LEFT) or (Key = VK_UP) or (Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		nFieldID	:= StrToInt (Copy (TMNumEdit (Sender).Name, 10, 3));

		if	(not ((GetKeyState (VK_MENU) < 0) and (Key = VK_DOWN))) then				// Altｷｰが押された時以外
		begin
			nReturn	:= fnCheckDecomposeListRecord (TMNumEdit (Sender));

			if	(nReturn = CHECK_ERROR) then
			begin
				Beep ();

				TMNumEdit (Sender).SelectAll ();
				Abort ();
			end
			else if	(nReturn = CHECK_ESCAPE) then
			begin
				if	((Key <> VK_LEFT) and (Key <> VK_UP)) then
				begin
//					m_cACControl	:= CmnButtonPageNext;
// <110>					m_cACControl	:= CmnEdit06003ReceiverName;
					m_cACControl	:= CmnEdit01027ReceiverName;
					m_cACControl.SetFocus ();
					Exit;
				end;
			end
			else if	(nReturn = CHECK_THROUGH) then
				Exit;
		end;

		if	(((Key = VK_LEFT) or (Key = VK_UP)) and (nFieldID <> 2)) then
		begin
// <149> 2006/10/11 H.Kawato Mod Start
//			m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID - 5])));
            if (CmnEdit01030PriPayWayDivision.Value <> 0) and
               ((Sender as TComponent).Name = CmnEdit01007PaymentColumnDivision.Name) then
                m_cACControl	:= CmnEdit01030PriPayWayDivision
            else
                m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID - 5])));
// <149> 2006/10/11 H.kawato Mod End
			m_cACControl.SetFocus ();
			Exit;
		end
		else if	((Key = VK_DOWN) and (nFieldID <> 22)) then
		begin
			m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID + 5])));
			m_cACControl.SetFocus ();
			Exit;
		end;
	end;

	fnCmnFunctionOnKeyDown (Sender, Key, Shift);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditAccountCodeOnArrowClick (Sender: TObject);
begin

{<100>

var
	cPayAccExpParam: TPayAccExpParam;

begin
	cPayAccExpParam	:= TPayAccExpParam.CreateParam ();

	if	(m_cPayAccExp.DoDlg (cPayAccExpParam) = mrOK) then
	begin
		TMNumEdit (Sender).Value		:= cPayAccExpParam.m_iAccCode;					// 依頼口座ｺｰﾄﾞ
		TMNumEdit (Sender).InputFlag	:= FALSE;

		fnCheckEditNumValueAccountCode (StrToInt (Copy (TMNumEdit (Sender).Name, 8, 2)),
																StrToInt (Copy (TMNumEdit (Sender).Name, 10, 3)));
	end;

	cPayAccExpParam.Free ();
}
end;


//***********************************************************************************************************/
//*                                                                                                         */
//*	関数	: fnCmnEditBankCodeOnArrowClick(Sender: TObject); <105>                                         */
//*                                                                                                         */
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditBankCodeOnArrowClick (Sender: TObject);
var
	dqCommonData    : TMQuery;
	cNumEdit	    : TMNumEdit;
	pPayInfoData    : ^PayInfoData;
	nBankCode	    : Integer;
	nBranchCode	    : Integer;
	nAreaNo		    : Integer;
//	nReturn		    : Integer;
//	strBankName	    : String;
//	strBranchName   : String;

    BankNCD         : Extended;

    lvExpSend       : rcJNTExpSend;
    lvExpRecv       : rcJNTExpRecv;
    iExpRtn         : Integer;
    CompName        : String;

	iBaseIndex      : Integer;		// <211> ADD

begin
	nAreaNo	:= StrToInt (Copy (TWinControl (Sender).Name,  8, 2));

// <211> MOD-STR
//	if	((nAreaNo <> 2) and (nAreaNo <> 3)) then
	if not (nAreaNo in [2, 3, 4]) then
// <211> MOD-END
		Exit;

    BankNCD := 0;

//	fnCMNBankInit (m_pRec);

// <211> ADD-STR
    // 銀行コードを基準とした位置を取得
    if (nAreaNo in [2, 3]) then
    	iBaseIndex := 0
    else
    	iBaseIndex := 5;
// <211> ADD-END

// <211> MOD-STR
//	nBankCode	:= Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))).Value);
//	nBranchCode	:= Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Value);
	nBankCode	:= Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2]))).Value);
	nBranchCode	:= Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).Value);
// <211> MOD-END

//	nReturn	:= fnCMNBankShow (nBankCode, nBranchCode, strBankName, strBranchName);

//	fnCMNBankFree ();

//	if	(nReturn = 1) then

    CompName    :=  TComponent(Sender).name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec := m_pRec;                             // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     := @m_cDBSelect;                       // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     := m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := m_cComArea.SystemArea.SysColorD;

    // 本店
// <211> MOD-STR
//  if (CompName = Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2])) then
    if (CompName = Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2])) then
// <211> MOD-END
    begin
        lvExpSend.MasterKbn     := 9090;                        // ﾏｽﾀ区分 <104>
        lvExpSend.ModulKbn      := 0;                           // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                           // ﾊﾟﾀｰﾝNO
        lvExpSend.TBarNM        := '銀行' +  '検索ｴｸｽﾌﾟﾛｰﾗ';
        lvExpSend.TrRootCaption := '銀行';
        lvExpSend.SortStr       := 'Order by BankCode';
        lvExpSend.GroupStr      := 'HAPBF.BankCode,HAPBF.BankName,HAPBF.BankKana,HAPBF.NCode';
    end
    // 支店
// <211> MOD-STR
//  else if (CompName = Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3])) then
    else if (CompName = Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3])) then
// <211> MOD-END
    begin
      	nBankCode	            :=
// <211> MOD-STR
//          Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))).Value);
            Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2]))).Value);
// <211> MOD-END
        lvExpSend.MasterKbn     := 9100;                        // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                           // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                           // ﾊﾟﾀｰﾝNO
        lvExpSend.TBarNM        := '支店' +  '検索ｴｸｽﾌﾟﾛｰﾗ';
        lvExpSend.TrRootCaption := '支店';
        lvExpSend.WhereStr      := 'BankNCode = ' + FloatToStr(fnGetBankNCode(nBankCode));
        lvExpSend.SortStr       := 'Order by BranchCode';
    end;

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    //ｷｬﾝｾﾙ
    if iExpRtn <>1 then
        Exit;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode))>0 then
    begin
        // 本店
// <211> MOD-STR
{        if (CompName = Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2])) then
        begin
            nBankCode := StrToInt(lvExpRecv.GCode);
	    	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))).Value := StrToFloat(lvExpRecv.GCode);
		    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))).InputFlag	:= FALSE;
    		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d004BankName'  , [nAreaNo]))).Text	:= MJSKabuCut (lvExpRecv.Nmk, 30);

            //<127>支店ｺｰﾄﾞ初期化
            TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Value := 0;
            TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Clear;
            TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, 6]))).Clear;
        	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, 7]))).Clear;
        end
        // 支店
        else if (CompName = Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3])) then
        begin
            nBranchCode := StrToInt(lvExpRecv.GCode);
    		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Value := StrToFloat(lvExpRecv.GCode);
	    	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).InputFlag	:= FALSE;
    		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d006BranchName', [nAreaNo]))).Text	:= MJSKabuCut (lvExpRecv.Nmk, 30);
        end;}
        if (CompName = Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2])) then
        begin
            nBankCode := StrToInt(lvExpRecv.GCode);
	    	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2]))).Value := StrToFloat(lvExpRecv.GCode);
		    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2]))).InputFlag	:= FALSE;
    		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankName'  , [nAreaNo, iBaseIndex + 4]))).Text	:= MJSKabuCut (lvExpRecv.Nmk, 30);

            //<127>支店ｺｰﾄﾞ初期化
            TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).Value := 0;
            TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).Clear;
            TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, iBaseIndex + 6]))).Clear;
        	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, iBaseIndex + 7]))).Clear;
            m_anBrachNCode[nAreaNo - 1] := 0;                   // 振込先支店内部コード <SCA> ADD
        end
        // 支店
        else if (CompName = Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3])) then
        begin
            nBranchCode := StrToInt(lvExpRecv.GCode);
    		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).Value := StrToFloat(lvExpRecv.GCode);
	    	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).InputFlag	:= FALSE;
    		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName', [nAreaNo, iBaseIndex + 6]))).Text	:= MJSKabuCut (lvExpRecv.Nmk, 30);
            m_anBrachNCode[nAreaNo - 1] := lvExpRecv.NCode;     // 振込先支店内部コード <SCA> ADD
        end;
// <211> MOD-END
    end;
{
	if	(fReturn) then
	begin
		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))).Value		:= nBankCode;
		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))).InputFlag	:= FALSE;
		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Value		:= nBranchCode;
		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).InputFlag	:= FALSE;


		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d004BankName'  , [nAreaNo]))).Text	:= MJSKabuCut (strBankName  , 30);
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d006BranchName', [nAreaNo]))).Text	:= MJSKabuCut (strBranchName, 30);
	end
	else
		Exit;
}

    // ｶﾅの取得
	dqCommonData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqCommonData); // DBとMQueryの接続

	with (dqCommonData) do
	begin
		Close;
		SQL.Clear;

        // 本店 or 支店
// <211> MOD-STR
//      if (CompName = Format('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2])) or
//         (CompName = Format('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3])) then
        if (CompName = Format('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, iBaseIndex + 2])) or
           (CompName = Format('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3])) then
// <211> MOD-END
        begin
            SQL.Add('SELECT * FROM HAPBF WHERE BankCode = ' + IntToStr (nBankCode));

            if	(not Open) then
            begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqCommonData);
                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqCommonData);

                dqCommonData.Close;
                dqCommonData.Free;

                Exit;
            end;

            if (EOF) then
            begin
                BankNCD := 0;
// <211> MOD-STR
//              TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d005BankNameKana', [nAreaNo]))).Text	:= ''
                TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana', [nAreaNo, iBaseIndex + 5]))).Text	:= ''
// <211> MOD-END
            end
            else
            begin
                BankNCD := FieldByName ('NCode').AsFloat;
// <211> MOD-STR
//              TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d005BankNameKana', [nAreaNo]))).Text	:=
                TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana', [nAreaNo, iBaseIndex + 5]))).Text	:=
// <211> MOD-END
                                                fnExchangeCharacterKanaDesc (FieldByName ('BankKana').AsString);
            end;
            Close;
        end;

        // 支店
// <211> MOD-STR
//      if (CompName = Format('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3])) then
        if (CompName = Format('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3])) then
// <211> MOD-END
        begin
            Close;
		    SQL.Clear;
		    SQL.Add('SELECT * FROM HAPBS WHERE BankNCode = :nBankCode AND BranchCode = :nBranchCode');
// <SCA> ADD-STR
            // 検索エクスプローラで選択された場合は内部コードも条件に追加
            if Length(Trim(lvExpRecv.GCode))>0 then
    		    SQL.Add('AND NCode = ' + FormatFloat('0', m_anBrachNCode[nAreaNo - 1]));
// <SCA> ADD-END

            ParamByName('nBankCode'  ).AsFloat   := BankNCD;
            ParamByName('nBranchCode').AsInteger := nBranchCode;

            if	(not Open) then
            begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqCommonData);
                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqCommonData);

                dqCommonData.Close;
                dqCommonData.Free;

                Exit;
            end;

// <211> MOD-STR
{            if (EOF) then
                TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d007BranchNameKana', [nAreaNo]))).Text	:= ''
            else
                TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d007BranchNameKana', [nAreaNo]))).Text	:=
                                                fnExchangeCharacterKanaDesc (FieldByName ('BranchKana').AsString);}
            if (EOF) then
                TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, iBaseIndex + 7]))).Text	:= ''
            else
                TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, iBaseIndex + 7]))).Text	:=
                                                fnExchangeCharacterKanaDesc (FieldByName ('BranchKana').AsString);
// <211> MOD-END
        end;
	end;

// <211> ADD-STR
    if (nAreaNo = 4) then
    begin
        // 手形(電子債権)の場合、手数料計算区分のセットは不要なので抜ける
        Keybd_Event(VK_RETURN, 0, 0, 0);                        // Enter ｷｰのｴﾐｭﾚｲﾄ
        Exit;
    end;
// <211> ADD-END

	cNumEdit := TMNumEdit(MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dAccountCode', [nAreaNo, 1])));

	New (pPayInfoData);

	if	(cNumEdit.InputFlag) then
		pPayInfoData^.nAccountCode	:= -1
	else
		pPayInfoData^.nAccountCode	:= cNumEdit.AsInteger;

	fnCheckValidAccountCode (pPayInfoData);

	fnSetCommissionCalculateDivision (nAreaNo, pPayInfoData);

	Dispose (pPayInfoData);

	fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode'  , [nAreaNo, 2]))), FALSE);

	fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))), FALSE);

	TWinControl (Sender).SetFocus;

    Keybd_Event(VK_RETURN, 0, 0, 0);                        // Enter ｷｰのｴﾐｭﾚｲﾄ

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditNameKanaOnKeyPress (Sender: TObject; var Key: Char);
begin
	case (Key) of
		Char (VK_BACK),
		Char (VK_RETURN),'0'..'9','A'..'Z','ｱ'..'ﾝ','ｦ',' ','ﾞ','ﾟ','｢','｣','\','/',',','.','-','(',')' :
			begin
			end;
		'ｧ':		Key	:= 'ｱ';
		'ｨ':		Key	:= 'ｲ';
		'ｩ':		Key	:= 'ｳ';
		'ｪ':		Key	:= 'ｴ';
		'ｫ':		Key	:= 'ｵ';
		'ｬ':		Key	:= 'ﾔ';
		'ｭ':		Key	:= 'ﾕ';
		'ｮ':		Key	:= 'ﾖ';
		'ｯ':		Key	:= 'ﾂ';
		'{':		Key	:= '(';
		'[':		Key	:= '(';
		'}':		Key	:= ')';
		']':		Key	:= ')';
		'ｰ':		Key	:= '-';
		'a'..'z':	Key	:= Chr (Ord (Key) - 32);
		else		Abort ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditAccountNoOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if	((Key = VK_RETURN) or (Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	(not ((GetKeyState (VK_MENU) < 0) and (Key = VK_DOWN))) then				// Altｷｰが押された時以外
			TMTxtEdit (Sender).Text	:= fnGetEditedAccountNumber (TMTxtEdit (Sender).Text);
	end;

	fnCmnFunctionOnKeyDown (Sender, Key, Shift);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditKmkCodeOnArrowClick (Sender: TObject);
//var
//	cMasWndParam: TJNTMasWndParam;
//	cMasWndIF	: TJNTMasWndIF;

begin


{
	cMasWndIF	:= TJNTMasWndIF.Create ();
	cMasWndIF.Init (Pointer (m_pRec));

	cMasWndParam	:= TJNTMasWndParam.CreateParam ();

	cMasWndParam.m_GCodeFD		:= 'GCode';											// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'RenSO';											// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'SimpleName';									// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'KmkMA';											// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);								// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= 6;												// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= 0;												// ｺｰﾄﾞ属性
	cMasWndParam.m_ColorCASE	:= JNTMASWND_COLOR_KAMOK_SEIZOU_BLUE;

// <#1-DEL-STR>
//	cMasWndParam.m_SQL_Where	:= 'MasterKbn = 1 AND SumKbn = 0 AND RecordKbn = 0 AND AnalyzeCode <> 0 AND ' +
//								   'SubCode = 0 AND GCode <> ' + IntToStr (m_nKmkCompound01) +
//											  ' AND GCode <> ' + IntToStr (m_nKmkCompound02);
// <#1-DEL-END>

// <#1-ADD-STR>
	cMasWndParam.m_SQL_Where	:= 'MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND AnalyzeCode <> 0 AND ' +
								   'SubCode = 0 AND GCode <> ' + IntToStr (m_nKmkCompound01) +
											  ' AND GCode <> ' + IntToStr (m_nKmkCompound02) +
                        ' and InputKbn <> 9 ';
// <#1-ADD-END>


	if	(cMasWndIF.DoDlg (cMasWndParam) = mrOK) then
	begin
		TMNumEdit (Sender).Value		:= StrToInt (cMasWndParam.m_ExpRetCode);
		TMNumEdit (Sender).InputFlag	:= FALSE;

		fnCheckEditNumValueKmkCode ();
	end;

	cMasWndParam.Free ();
	cMasWndIF   .Term ();
	cMasWndIF   .Free ();
}
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditHojCodeOnArrowClick (Sender: TObject);
//var
//	cMasWndParam: TJNTMasWndParam;
//	cMasWndIF	: TJNTMasWndIF;

begin
{
	cMasWndIF	:= TJNTMasWndIF.Create ();
	cMasWndIF.Init (Pointer (m_pRec));

	cMasWndParam	:= TJNTMasWndParam.CreateParam ();

	cMasWndParam.m_GCodeFD		:= 'GCode';												// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'RenSo';	    										// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'NMK';										// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'MTOKUI';											// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);									// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= m_nCurCodeDigit;										// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= m_nCurCodeAttribute;									// ｺｰﾄﾞ属性
	cMasWndParam.m_SQL_Where	:= ' RDelKbn = 0 AND HojyoKbn2 = 1';

	if	(cMasWndIF.DoDlg (cMasWndParam) = mrOK) then
	begin
		if	(Sender is TMNumEdit) then
		begin
			TMNumEdit (Sender).Value		:= StrToInt64 (cMasWndParam.m_ExpRetCode);
			TMNumEdit (Sender).InputFlag	:= FALSE;
		end
		else
			TMTxtEdit (Sender).Text	:= cMasWndParam.m_ExpRetCode;

		fnCheckEditTxtValueHojCode (6, 2);
	end;

	cMasWndParam.Free ();
	cMasWndIF   .Term ();
	cMasWndIF   .Free ();
}
end;



//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditTaxCodeOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
var
	strDescription: String;

begin
	if	((Key = VK_RETURN) or (Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	(not ((GetKeyState (VK_MENU) < 0) and (Key = VK_DOWN))) then				// Altｷｰが押された時以外
		begin
			if	(not fnGetDescriptionSelectedItem (TMNumEdit (Sender), strDescription)) then
			begin
				Beep ();
				TMNumEdit (Sender).SelectAll ();
				Abort ();
			end;
		end;
	end;

	fnCmnFunctionOnKeyDown (Sender, Key, Shift);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridOffsetOnChangeNodeEx (Sender: TObject);
begin
	if	(m_fUnderConstruction) then
		Exit;

	CmnEdit05001SeqNo.Value	:= Trunc (CmnMemDataOffset.FieldValues ['nSeqNo']);			// 相殺№

	m_fSetOffsetJournal	:= TRUE;

	fnSetRecordOffsetJournalInfo ();

	fnResetChangeDataFlagOffsetRecords ();

	m_fSetOffsetJournal	:= FALSE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnGridOffsetOnDblClick (Sender: TObject);
begin
// <AUT> MOD-STR
//  if m_cJNTArea.IsModify then             // <125>if追加
    if m_JNTAuthority.IsModify then
// <AUT> MOD-END
    begin
    	m_cACControl	:= CmnEdit05002KmkCode;
	    m_cACControl.SetFocus ();
    end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditOffsetPriceOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if	((Key = VK_RETURN) or (Key = VK_RIGHT) or (Key = VK_DOWN)) then
	begin
		if	(not ((GetKeyState (VK_MENU) < 0) and (Key = VK_DOWN))) then				// Altｷｰが押された時以外
		begin
			if	(not fnCheckValidOffsetRecord ()) then
			begin
				Beep ();
				m_cACControl.SetFocus ();
				Abort ();
			end;

			fnSetMemDataOffsetRecord ();

// <136> 2006/06/21 H.Kawato Mod
//            m_ProgRendoFlg  := True;            // <128> 2006/04/20 H.Kawato Add
            m_bSousaiChgFlg := True;
// <136> 2006/06/21 H.Kawato Mod

			m_cACControl	:= CmnEdit05001SeqNo;
			m_cACControl.SetFocus ();

			Abort ();
		end;
	end;

	fnCmnFunctionOnKeyDown (Sender, Key, Shift);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditZipCodeOnArrowClick (Sender: TObject);
var
	cMessageRec: TMJSMsgRec;

	strSearchCode  : String;															// 検索郵便番号
	strAddressUpper: String;															// 住所(上段)
	strAddressLower: String;															// 住所(下段)

	strMessage : String;
begin
	strSearchCode	:= Format ('%.3d', [Trunc (CmnEdit06004ZipCodeUpper.Value)]) + '-' +
					   Format ('%.4d', [Trunc (CmnEdit06005ZipCodeLower.Value)]);

	strAddressUpper	:= '';
	strAddressLower	:= '';

	if	(fnCMNPostShow (strSearchCode, strAddressUpper, strAddressLower, 0) = 1) then
	begin
		CmnEdit06004ZipCodeUpper.Value	:= StrToInt (Copy (strSearchCode, 1, 3));
		CmnEdit06005ZipCodeLower.Value	:= StrToInt (Copy (strSearchCode, 5, 4));

		if	(CmnEdit06006Address.Text <> '') then
		begin
//Application			if	(Application.MessageBox ('住所を上書きしてもよろしいですか？',
//										 '上書きの確認!?', MB_ICONWARNING + MB_OKCANCEL) = IDOK) then


    	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 4);
    	strMessage := '住所を上書きしてもよろしいですか？';
    	if	(MJSMessageBoxEx (Self,strMessage, cMessageRec.sTitle, cMessageRec.icontype,
									cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType) = mrYes) then
			begin
				CmnEdit06006Address.Text	:= strAddressUpper;
				CmnEdit06007Address.Text	:= strAddressLower;
			end;
		end
		else
		begin
			CmnEdit06006Address.Text	:= strAddressUpper;
			CmnEdit06007Address.Text	:= strAddressLower;
		end;

		m_cACControl	:= CmnEdit06006Address;
		m_cACControl.SetFocus ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditTaxCodeOnChange (Sender: TObject);
begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	fnCmnFunctionNumEditOnChange (Sender);

	if	(TMNumEdit (Sender).AsInteger = 0) then											// 消費税ｺｰﾄﾞ=0: 科目に従う
	begin
		TMNumEdit (MJSFindCtrl (Self, _ETaxR + Copy (TMNumEdit (Sender).Name, 15, 5)         )).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, _LTaxR + Copy (TMNumEdit (Sender).Name, 15, 5)         )).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, _LTaxR + Copy (TMNumEdit (Sender).Name, 15, 5) + 'Desc')).Visible	:= FALSE;
	end
	else
	begin
		if	(m_nTaxInfoAccDivision <> 0) then
		begin
			TMNumEdit (MJSFindCtrl (Self, _ETaxR + Copy (TMNumEdit (Sender).Name, 15, 5)         )).Visible	:= TRUE;
			TMLabel   (MJSFindCtrl (Self, _LTaxR + Copy (TMNumEdit (Sender).Name, 15, 5)         )).Visible	:= TRUE;
			TMLabel   (MJSFindCtrl (Self, _LTaxR + Copy (TMNumEdit (Sender).Name, 15, 5) + 'Desc')).Visible	:= TRUE;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditFundCodeOnArrowClick (Sender: TObject);
//var
//	cMasWndParam: TJNTMasWndParam;
//	cMasWndIF	: TJNTMasWndIF;

begin
{
	cMasWndIF	:= TJNTMasWndIF.Create ();
	cMasWndIF.Init (Pointer (m_pRec));

	cMasWndParam	:= TJNTMasWndParam.CreateParam ();

	cMasWndParam.m_GCodeFD		:= 'GCode';												// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'RenSO';											// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'SimpleName';										// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'SkmkMA';											// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_SQL_Where	:= 'MasterKbn = 3 AND RDelKbn = 0 AND SumKbn = 0';	// Where句の条件
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);									// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= 2;													// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= 0;													// ｺｰﾄﾞ属性

	if	(cMasWndIF.DoDlg (cMasWndParam) = mrOK) then
	begin
		TMNumEdit (Sender).Value	:= StrToInt64 (Trim (cMasWndParam.m_ExpRetCode));

		TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (
								TMNumEdit (Sender).Name, 8, 64) + 'Desc')).Caption	:= cMasWndParam.m_ExpRetText;
	end;

	cMasWndParam.Free ();
	cMasWndIF   .Term ();
	cMasWndIF   .Free ();
}
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnPanelButtonsOnResize (Sender: TObject);
begin
	CmnButtonPagePrevious.Left	:= TMPanel (Sender).Width - fnGetZoom((15 + (80 * 4) + (4 * 3)));	//<#8>（関数｢fnGetZoom｣を追加）
	CmnButtonPageNext    .Left	:= TMPanel (Sender).Width - fnGetZoom((15 + (80 * 3) + (4 * 2)));	//<#8>（関数｢fnGetZoom｣を追加）
	CmnButtonUpdate      .Left	:= TMPanel (Sender).Width - fnGetZoom((15 + (80 * 2) + (4 * 1)));   //<#8>（関数｢fnGetZoom｣を追加）
	CmnButtonCancel      .Left	:= TMPanel (Sender).Width - fnGetZoom((15 + (80 * 1) + (4 * 0)));	//<#8>（関数｢fnGetZoom｣を追加）
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonPageOnClick (Sender: TObject);
var
	cTabOrderList : TList;
	nIndexPrevious: Integer;
	nIndexNew	  : Integer;

begin
	nIndexPrevious	:= CmnTabInformations.Items.Selected;
	nIndexNew		:= nIndexPrevious;

	while (TRUE) do
	begin
		if	(TMBitBtn (Sender).Name = CmnButtonPagePrevious.Name) then
			nIndexNew	:= nIndexNew - 1
		else
			nIndexNew	:= nIndexNew + 1;

//		if	((nIndexNew < 0) or (nIndexNew > 6)) then
// <211> MOD-STR
//		if	((nIndexNew < 0) or (nIndexNew > 5)) then
// <222> MOD start
//		if	((nIndexNew < TI_PAYWAY) or (nIndexNew > TI_OTHERS1)) then
		if	((nIndexNew < TI_PAYWAY) or (nIndexNew > TI_EXCHANGE)) then
// <222> MOD end
// <211> MOD-END
		begin
			nIndexNew	:= nIndexPrevious;
			Break;
		end;

// <222> MOD start
//		if	(CmnTabInformations.Items [nIndexNew].Enabled) then
		if	(CmnTabInformations.Items [nIndexNew].Enabled) and
        	(CmnTabInformations.Items [nIndexNew].Visible) then
// <222> MOD end
			Break;
	end;

	CmnTabInformations.Items [nIndexPrevious].Selected	:= FALSE;
	CmnTabInformations.Items [nIndexNew     ].Selected	:= TRUE;

	if	(m_nReferMode = REFER) then														// ﾒｰﾙ会計参照区分: 参照のみ
	begin
		fnChangeConditionPageButtons (TRUE);
		Exit;
	end;

// <211> MOD-STR
//	if	(nIndexNew = 4) then
	if	(nIndexNew = TI_OFFSET) then
// <211> MOD-END
		m_cACControl	:= CmnEdit05001SeqNo

// <211> MOD-STR
//	else if	(nIndexNew = 5) then
	else if	(nIndexNew = TI_OTHERS1) then
// <211> MOD-END
// <110>		m_cACControl	:= CmnEdit06003ReceiverName
		m_cACControl	:= CmnEdit01027ReceiverName
// <222> ADD start
	else if	(nIndexNew = TI_WIRE) then		// 電信送金情報
    begin
    	m_cACControl	:= CmnEdit09001AccountCode;
    end
    else if (nIndexNew = TI_EXCHANGE) then	// 為替/小切手情報
    begin
		m_cACControl	:= CmnEdit10001AccountCode;
    end
// <222> ADD end
	else
	begin
		cTabOrderList	:= TList.Create ();

		TMPanel (CmnTabInformations.Items [nIndexNew].SyncControl).GetTabOrderList (cTabOrderList);

		m_cACControl	:= cTabOrderList.First ();

		if	(m_cACControl is TMGroupBox) then
		begin
			cTabOrderList.Clear ();

			TMGroupBox (m_cACControl).GetTabOrderList (cTabOrderList);

			m_cACControl	:= cTabOrderList.First ();
		end;

		cTabOrderList.Free ();
	end;

// <222-2> ADD start
	if (m_cACControl.CanFocus) and
    										// NuMEditでStaticでない
    	(((m_cACControl is TMNumEdit) and (not TMNumEdit(m_cACControl).Static)) or
        									// またはNumEditでない
          (not (m_cACControl is TMNumEdit))) then
    begin
// <222-2> ADD end
		m_cACControl.SetFocus ();
    end;									// <222> ADD

    m_TabClick := True;                         // <183> ADD
	fnChangeConditionPageButtons (TRUE);
    m_TabClick := False;                        // <183> ADD
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonUpdateOnClick (Sender: TObject);
var
	pMasterData : ^MasterData;
    iFldID      : Integer;
    fRetuen     : Boolean;

    RendoInitRet    : Integer;                  // <128> 2006/04/20 H.Kawato Add
    ProgRendoParam  : TJNTPAYProgRendoParam;    // <128> 2006/04/20 H.Kawato Add

    bRendoInitG  	: Boolean;                  // <222> ADD
    RendoInitRetG   : Integer;                  // <222> ADD
    ProgRendoParamG : TJNTPAYProgRendoParamG;   // <222> ADD

// 2006/06/20 H.Kawato Add Start
//	nBankCode	  : Integer;
//	nBranchCode	  : Integer;
//	strDescription: String;
//	strKanaDesc	  : String;
// 2006/06/20 H.Kawato Add End

    iLoop       : Integer;                      // <182> ADD
    bRendoInit  : Boolean;                      // <186> ADD
begin
	New (pMasterData);

    m_BtnClick := True; //<112>

    //取引先ｺｰﾄﾞﾁｪｯｸ
  	if	(m_nCurCodeAttribute <= 1) then
  	begin
		if	(CmnEdit00001HojCodeNumeric.InputFlag) then
    		pMasterData^.strHojCode	:= ''
	    else
		    pMasterData^.strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)]);

        m_cACControl	:= CmnEdit00001HojCodeNumeric;
   	end
   	else
   	begin
   		pMasterData^.strHojCode		:= CmnEdit00001HojCodeFree.Text;
   		m_cACControl	:= CmnEdit00001HojCodeFree;
   	end;

    // ''時
    if  pMasterData^.strHojCode = '' then
    begin
        m_BtnClick := False; //<112>
        fnFirstDetailDsp;
        m_cACControl.SetFocus();
        Exit;
    end;
// <200> Add start
// 引落支払データチェック(並行支払件数を超える番号または0未満は指定できない)
    if  (CmnEdit02019DebitData.Value > m_iHeikouCount) or ( 0 > CmnEdit02019DebitData.Value) then
    begin
        m_cACControl := CmnEdit02019DebitData;
        m_cACControl.SetFocus();
        Exit;
    end;
// <200> Add end

//<112>Add--------------------------------------------------------
    for iFldID := 3 to 5 do
    begin
        fRetuen := fnCheckEditTxtValueHojCodeEx(iFldID);
        if fRetuen = False then
            Break;
    end;

    if fRetuen = False then
    begin
        m_BtnClick := False;
// <131> 2006/06/14 H.Kawato Mod
//        m_cACControl.SetFocus;
// <211> MOD-STR
//      if (CmnTabInformations.Items.Selected = 4) then     // 相殺情報
        if (CmnTabInformations.Items.Selected = TI_OFFSET) then     // 相殺情報
// <211> MOD-END
            m_cACControl.SetFocus;
        Exit;
    end;
//<112>Add--------------------------------------------------------

//<127>Add--------------------------------------------------------

// <134> 2006/06/21 H.Kawato Mod
//    if (CmnEdit02002BankCode.Value <> 0) and (CmnEdit02003BranchCode.Value = 0) then
    if (CmnEdit02002BankCode.Text <> '') and (CmnEdit02003BranchCode.Text = '') then
    begin
// <211> MOD-STR
//      CmnTabInformations.Items.Selected := 1;
        CmnTabInformations.Items.Selected := TI_FURIKOMI;
// <211> MOD-END
        m_BtnClick := False;
        CmnEdit02003BranchCode.SetFocus;
        Exit;
    end;

// <134> 2006/06/21 H.Kawato Mod
//    if (CmnEdit03002BankCode.Value <> 0) and (CmnEdit03003BranchCode.Value = 0) then
    if (CmnEdit03002BankCode.Text <> '') and (CmnEdit03003BranchCode.Text = '') then
    begin
// <211> MOD-STR
//      CmnTabInformations.Items.Selected := 2;
        CmnTabInformations.Items.Selected := TI_KFURIKOMI;
// <211> MOD-END
        m_BtnClick := False;
        CmnEdit03003BranchCode.SetFocus;
        Exit;
    end;
//<127>Add--------------------------------------------------------

// <211> ADD-STR
    if ((CmnEdit04006ERKbn.Value = 1) and (CmnEdit04007BankCode.Text <> '') and (CmnEdit04008BranchCode.Text = '')) then
    begin
        // 電子債権の採用がある場合、銀行コードのみの入力は不可
        CmnTabInformations.Items.Selected := TI_BILL;
        m_BtnClick := False;
        CmnEdit04008BranchCode.SetFocus;
        Exit;
    end;
// <211> ADD-END

// <149> 2006/12/13 H.Kawato Add Start  ※優先支払方法がある場合、優先支払方法以外の支払方法を設定する
    if (CmnEdit01030PriPayWayDivision.Value <> 0) then
    begin
        if	(CmnEdit01007PaymentColumnDivision.Value = 0) then
        begin
// <211> MOD-STR
//          CmnTabInformations.Items.Selected := 0;
            CmnTabInformations.Items.Selected := TI_PAYWAY;
// <211> MOD-END
            m_BtnClick := False;
            CmnEdit01007PaymentColumnDivision.SetFocus;
            Exit;
        end;
    end;
// <149> 2006/12/13 H.Kawato Add End

	pMasterData^.nNCode	        := fnGetNCODE(pMasterData^.strHojCode);
// <149> 2006/10/11 H.Kawato Mod Start  実在・合計情報タブ
//	pMasterData^.nSumDivision	:= CmnTabDetail.Items.Selected;
    if (Trim(CmnLabelDetail.Caption) = '【合計】') then
        pMasterData^.nSumDivision	:= 1
    else
        pMasterData^.nSumDivision	:= 0;
// <149> 2006/10/11 H.Kawato Mod End
	pMasterData^.strAssociation	:= CmnEdit00002Association.Text;
	pMasterData^.strName		:= CmnEdit00003Name       .Text;
	pMasterData^.strNameSimple	:= CmnEdit00004NameSimple .Text;
	pMasterData^.fDetails		:= TRUE;

// <128> 2006/04/20 H.Kawato Add Start
    RendoInitRet := -1;
    RendoInitRetG := -1;  							// <222> ADD

    bRendoInit := False;                            // <186> ADD

    fnPayProgRendoCheck;
    fnPayProgRendoCheckG;							// <222> ADD

    try     // <136> 2006/06/21 H.Kawato Add
        if m_ProgRendoFlg = True then
        begin
            // 進捗連動 初期処理
            ProgRendoParam.pAppRecord    := Pointer(m_pRec);
            ProgRendoParam.iOptCd        := 54;             // オプションコード・債務処理       //<142> 2006/08/04 H.Kawato Add
            ProgRendoParam.iPrgCd        := 210100;         // プログラムコード・支払情報登録   //<142> 2006/08/04 H.Kawato Add
            ProgRendoParam.dPAYCode      := pMasterData^.nNCode;
            ProgRendoParam.iSateiChgKbn  := m_iSateiChgKbn; // 変更無し
            ProgRendoParam.iNayoseChgKbn := 0;              // 変更あり
            ProgRendoParam.iSyoriKbn     := 0;              // 支払情報登録系処理
           	ProgRendoParam.iSystemCode   := 1;              // 債務管理	<177>

            RendoInitRet := m_PayProgRendo.Init(ProgRendoParam);
            bRendoInit := True;                             // <186> ADD
// <182> ADD-STR
        end
        else
        begin
            RendoInitRet := 0;

// <211> MOD-STR
//          for	iLoop := 1 to 4 do
            for iLoop := Low(m_arModifyFlg) to High(m_arModifyFlg) do
// <211> MOD-END
            begin
                if (m_arModifyFlg[iLoop]) then
                begin
                    ProgRendoParam.pAppRecord    := Pointer(m_pRec);
                    ProgRendoParam.iOptCd        := 54;             // オプションコード・債務処理
                    ProgRendoParam.iPrgCd        := 210100;         // プログラムコード・支払情報登録
                    ProgRendoParam.dPAYCode      := pMasterData^.nNCode;
                    ProgRendoParam.iSateiChgKbn  := 0;              // 変更無し
                    ProgRendoParam.iNayoseChgKbn := 0;              // 変更無し
                    ProgRendoParam.iSyoriKbn     := (iLoop + 1);
                    ProgRendoParam.iSystemCode   := 1;              // 債務管理
// <215> MOD-STR
//                  if (m_PayProgRendo.Init(ProgRendoParam) = 1) then
//                  begin
//                      RendoInitRet := 1;
//                      bRendoInit := True;                             // <186> ADD
//                  end
//                  else
//                  begin
//                      m_arModifyFlg[iLoop] := False;
//                  end;

                    case m_PayProgRendo.Init(ProgRendoParam) of
                        0:  m_arModifyFlg[iLoop] := False;          // 申請ロールバックの必要なし
                        1:  begin                                   // 要ロールバック
                                RendoInitRet := 1;
                                bRendoInit := True;
                            end;
                    else
                        RendoInitRet := 10;                         // 上記以外はエラー
                    end;
// <215> MOD-END
                end;
            end;
// <182> ADD-END
        end;

// <222> ADD start
		{ 外貨債務進捗連動 初期処理 }
		RendoInitRetG := fnSetRendoInitG(pMasterData^.nNCode, ProgRendoParamG, bRendoInitG);
// <222> ADD end

// <215> MOD-STR
//      if (m_ProgRendoFlg = False) or
//         (m_ProgRendoFlg = True) and ((RendoInitRet = 1) or (RendoInitRet = 0)) then
// <222> MOD start
//        if (RendoInitRet in [0, 1]) then
        if (RendoInitRet in [0, 1]) and
        	(RendoInitRetG in [0, 1]) then
// <222> MOD end
// <215> MOD-END
        begin
// <128> 2006/04/20 H.Kawato Add End

            //データ更新
            if	(not fnUpdateMasterRecordDetail (pMasterData)) then
            begin
                m_BtnClick := False;    //<112>
                Dispose (pMasterData);
                Exit;
            end;

            fnSelectTreeViewItem (pMasterData^.strHojCode);

            Dispose (pMasterData);

// <143> 2006/08/04 H.Kawato Add
            if Screen.ActiveControl = nil then
                CmnButtonUpdate.SetFocus;
// <143> 2006/08/04 H.Kawato Add

            fnShowScreenInformations ();

            if	(m_nCurCodeAttribute <= 1) then
                m_cACControl	:= CmnEdit00001HojCodeNumeric
            else
                m_cACControl	:= CmnEdit00001HojCodeFree;

            m_cACControl.SetFocus ();

            // コード未確定時使用不可
            CmnScrollBoxInformation.Enabled := false;
            CmnPanelButtons.Enabled := false;
            m_BtnClick := False; //<112>

            m_bKijituMankiFlg := False;     // <132> 2006/06/15 H.Kawato Add
// <128> 2006/04/20 H.Kawato Add Start
        end;

// <136> 2006/06/21 H.Kawato Mod Start
{
    if m_ProgRendoFlg = True then
    begin
        // 進捗連動 実行終了処理
        if RendoInitRet = 1 then
        begin
            m_PayProgRendo.Exec;
            m_ProgRendoFlg  := False;
            m_iSateiChgKbn  := 0;
        end;

        m_PayProgRendo.Term;
    end;
}
        if (m_ProgRendoFlg = True) and (RendoInitRet = 1) then
        begin
            // 進捗連動 実行終了処理
            m_PayProgRendo.Exec;
            m_iSateiChgKbn  := 0;
            m_bSousaiChgFlg := False;
        end;

// <182> ADD-STR
            if (m_ProgRendoFlg = False) and (RendoInitRet = 1) then
            begin
// <211> MOD-STR
//              for	iLoop := 1 to 4 do
                for iLoop := Low(m_arModifyFlg) to High(m_arModifyFlg) do
// <211> MOD-END
                begin
                    if (m_arModifyFlg[iLoop]) then
                    begin
                        m_PayProgRendo.Exec2(iLoop + 1);
                        m_arModifyFlg[iLoop] := False;
                    end;
                end;
            end;
// <182> ADD-END
// <222> ADD start
		{ 外貨債務進捗連動 }
        if (m_ProgRendoGFlg = True) and (RendoInitRetG = 1) then
        begin
            // 進捗連動 実行終了処理
            m_PayProgRendoG.Exec;
        end;

        if (m_ProgRendoGFlg = False) and (RendoInitRetG = 1) then
        begin
        	if m_bModifyGaikaFlg then
            begin
                m_PayProgRendoG.Exec2(0);
                m_bModifyGaikaFlg := False;
            end;
        end;
// <222> ADD end
    finally
// <182> MOD-STR
//      if m_ProgRendoFlg = True then
//      begin
//          if RendoInitRet = 1 then
//              m_ProgRendoFlg  := False;
//
//           m_PayProgRendo.Term;
//      end;
// <186> MOD-STR
//      if RendoInitRet = 1 then
//      begin
//          m_ProgRendoFlg  := False;
//          m_PayProgRendo.Term;
//      end;
        if bRendoInit = True then
        begin
            if RendoInitRet = 1 then
                m_ProgRendoFlg  := False;

            m_PayProgRendo.Term;
        end;

// <222> ADD start
		{ 外貨債務進捗連動 破棄 }
        if bRendoInitG = True then
        begin
            if RendoInitRetG = 1 then
                m_ProgRendoGFlg  := False;

            m_PayProgRendoG.Term;
        end;
// <222> ADD end
// <186> MOD-END
// <182> MOD-END
    end;
// <136> 2006/06/21 H.Kawato Mod End
// <128> 2006/04/20 H.Kawato Add End
end;
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonCancelOnClick (Sender: TObject);
var
	cMessageRec: TMJSMsgRec;
	cWinControl: TWinControl;
	nItems	   : Integer;

begin
	if	(m_nCurCodeAttribute <= 1) then
		cWinControl	:= CmnEdit00001HojCodeNumeric
	else
		cWinControl	:= CmnEdit00001HojCodeFree;

	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
			Break;
	end;

// <170> 2007/12/13 H.Kawato Mod Start
{
// <151> 2006/12/15 H.Kawto Mod
//	if	(nItems >= m_cCheckItems.Count) then
	if	(nItems >= m_cCheckItems.Count) and
        (PCheckItemRec (m_cCheckItems.Items [80])^.fNoCheck = False) then       // 相殺No
// <151> 2006/12/15 H.Kawato Mod
	begin
		m_cACControl	:= cWinControl;
		m_cACControl.SetFocus ();

        // コード未確定時使用不可
        CmnScrollBoxInformation.Enabled := false;
        CmnPanelButtons.Enabled := false;
		Exit;
	end;

// <151> 2006/12/15 H.Kawato Add Start
	if	(nItems >= m_cCheckItems.Count) and
        (PCheckItemRec (m_cCheckItems.Items [80])^.fNoCheck = True) then        // 相殺No
    begin
        m_BtnClick := False;    // <130> 2006/06/14 H.Kawato Add

		fnShowScreenInformations ();

		m_cACControl	:= cWinControl;
		m_cACControl.SetFocus ();

        // コード未確定時使用不可
        CmnScrollBoxInformation.Enabled := false;
        CmnPanelButtons.Enabled := false;
        Exit;
    end;
// <151> 2006/12/15 H.Kawato Add End
}
    if  (nItems >= m_cCheckItems.Count) then    // データを編集していない場合
    begin
	    for	nItems := 0 to m_cCheckItems.Count - 1 do
        begin
        	if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID = 5001) then    // 相殺No
            begin
                // 相殺No入力あり
                if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck = True) then
                begin
                    m_BtnClick := False;
                	fnShowScreenInformations ();
                end;
               	m_cACControl	:= cWinControl;
               	m_cACControl.SetFocus ();

                // コード未確定時使用不可
                CmnScrollBoxInformation.Enabled := false;
                CmnPanelButtons.Enabled := false;
                Exit;
            end;
        end;
    end;
// <170> 2007/12/13 H.Kawato Mod End

	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 10020, 1);

	if	(MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle, cMessageRec.icontype,
									cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType) = mrYes) then
	begin
        m_BtnClick := False;                        // <130> 2006/06/14 H.Kawato Add

// <169> 2007/08/21 H.Kawato Add Start
        // Screen.ActiveControlが参照できない場合がある為
		m_cACControl	:= CmnButtonCancel;
		m_cACControl.SetFocus ();
// <169> 2007/08/21 H.Kawato Add End

		fnShowScreenInformations ();

		m_cACControl	:= cWinControl;
		m_cACControl.SetFocus ();

        // コード未確定時使用不可
        CmnScrollBoxInformation.Enabled := false;
        CmnPanelButtons.Enabled := false;
	end;

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnAddTreeViewItem (nSumDivision: Integer; strHojCode: String; strDescription: String);
var
	cNode	: TTreeNode;
	pItemRec: PTreeViewRec;

begin
	New (pItemRec);

	if	(fnCheckPermitGeneralRecord (strHojCode)) then
		pItemRec^.nItemDivision	:= TREE_GENERAL
	else if	(nSumDivision = TREE_CHILD) then
		pItemRec^.nItemDivision	:= TREE_CHILD
	else
		pItemRec^.nItemDivision	:= TREE_PARENT;

	pItemRec^.strHojCode		:= strHojCode;
	pItemRec^.strDescription	:= strDescription;

	cNode	:= CmnTreeView.Items.AddChildObject (CmnTreeView.Items [0], pItemRec^.strDescription, pItemRec);

	case (pItemRec^.nItemDivision) of
		TREE_GENERAL:	cNode.ImageIndex	:= TREE_INDEX_GENERAL;
		TREE_CHILD  :	cNode.ImageIndex	:= TREE_INDEX_CHILD;
		else			cNode.ImageIndex	:= TREE_INDEX_PARENT;
	end;

	cNode.SelectedIndex	:= cNode.ImageIndex + 1;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnAddTreeViewItemsSumChild (cNode: TTreeNode; dqMasterData: TMQuery);
var
	cNodeWork : TTreeNode;
	pItemRec  : PTreeViewRec;
	strHojCode: String;
	nNCODE,nSumNCODE  : Extended;

begin
	with (dqMasterData) do
	begin
		if	((FieldByName ('SumKbn'   ).AsInteger =  0) and
			 (FieldByName ('HojyoKbn2').AsInteger <> 1)) then
			Exit;																		// 対象外

		strHojCode	:= FieldByName ('GCode').AsString;
		nNCODE   	:= FieldByName ('BasedNCode').AsFloat;
		nSumNCODE  	:= FieldByName ('SumNCode').AsFloat;

		if	(m_nCurCodeAttribute <= 1) then
			strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

		if	(FieldByName ('SumKbn').AsInteger <> 0) then
		begin
			fnAddTreeViewItemsSumChildren (nSumNCODE, cNode);
			Exit;
		end;

		if	(fnUpdateMasterRecordPayNayoseInfoEx (PTreeViewRec (cNode.Data)^.strHojCode, nNCODE)) then
		begin
			New (pItemRec);

			pItemRec^.nItemDivision		:= TREE_CHILD_SUM;
			pItemRec^.strHojCode		:= strHojCode;
			pItemRec^.strDescription	:= FieldByName ('NMK').AsString;

			cNodeWork	:= cNode.GetFirstChild ();

			while (TRUE) do
			begin
				if	(cNodeWork = nil) then
				begin
					cNodeWork	:= CmnTreeView.Items.AddChildObject (cNode, pItemRec^.strDescription, pItemRec);
					Break;
				end;

				if	(CompareStr (PTreeViewRec (cNodeWork.Data)^.strHojCode, strHojCode) > 0) then
				begin
					cNodeWork	:= CmnTreeView.Items.InsertObject (cNodeWork, pItemRec^.strDescription, pItemRec);
					Break;
				end;

				cNodeWork	:= cNodeWork.GetNextSibling ();
			end;

			cNodeWork.ImageIndex	:= TREE_INDEX_CHILD_SUM;
			cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnAddTreeViewItemsSumChildren (nNCODE: Extended; cNode: TTreeNode);
var
	dqMasterData: TMQuery;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT ht.SumNCode, ht.BasedNCode, hm.GCODE,');
		SQL.Add   ('       hm.SumKbn, hm.NMK, hm.HojyoKbn2 FROM HojyoTree ht, MTOKUI hm ');
		SQL.Add   ('WHERE  ht.MasterKbn = :nMasterDivision AND ht.SumNCode = :strSumCode AND ');
// <103>		SQL.Add   ('WHERE  ht.MasterKbn = :nMasterDivision  AND ');
		SQL.Add   ('       hm.RDelKbn = 0 AND hm.NCode = ht.BasedNCode ');
        SQL.Add   ('       and hm.TemplateKbn=0');          // <102>
		SQL.Add   ('ORDER BY EntNo DESC');

		ParamByName ('nMasterDIvision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strSumCode'     ).AsFloat 	:= nNCODE;

		Open ();

		while (not EOF) do
		begin
			fnAddTreeViewItemsSumChild (cNode, dqMasterData);
			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnAddTreeViewItemSumChild (nNCodeParent: Extended; pRecord: Pointer);
var
	cNodeParent: TTreeNode;
	cNode	   : TTreeNode;

begin
	cNodeParent	:= m_cNodeSumSystem.GetFirstChild ();									// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNodeParent = nil) then
			Break;

		if	(CompareStr (FloatToStr(nNCodeParent), FloatToStr(PTreeViewRec (cNodeParent.Data)^.nNCode)) = 0) then
			Break;

		cNodeParent	:= cNodeParent.GetNextSibling ();									// 次の子ﾉｰﾄﾞ取得
	end;

	if	(cNodeParent = nil) then
		Exit;

	cNode	:= cNodeParent.GetFirstChild ();											// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNode = nil) then
		begin
			cNode	:= CmnTreeView.Items.AddChildObject (
												cNodeParent, PTreeViewRec (pRecord)^.strDescription, pRecord);
			Break;
		end;

		if	(CompareStr (PTreeViewRec (cNode.Data)^.strHojCode, PTreeViewRec (pRecord)^.strHojCode) > 0) then
		begin
			cNode	:= CmnTreeView.Items.InsertObject (cNode, PTreeViewRec (pRecord)^.strDescription, pRecord);
			Break;
		end;

		cNode	:= cNode.GetNextSibling ();												// 次の子ﾉｰﾄﾞ取得
	end;

	cNode.ImageIndex	:= TREE_INDEX_CHILD_SUM;
	cNode.SelectedIndex	:= cNode.ImageIndex + 1;

	cNodeParent.Expand (TRUE);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnAddTreeViewItemSumParent (pRecord: Pointer);
var
	cNode: TTreeNode;

begin
	cNode	:= m_cNodeSumSystem.GetFirstChild ();										// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNode = nil) then
		begin
			cNode	:= CmnTreeView.Items.AddChildObject (
											m_cNodeSumSystem, PTreeViewRec (pRecord)^.strDescription, pRecord);
			Break;
		end;

		if	(CompareStr (PTreeViewRec (cNode.Data)^.strHojCode, PTreeViewRec (pRecord)^.strHojCode) > 0) then
		begin
			cNode	:= CmnTreeView.Items.InsertObject (cNode, PTreeViewRec (pRecord)^.strDescription, pRecord);
			Break;
		end;

		cNode	:= cNode.GetNextSibling ();												// 次の子ﾉｰﾄﾞ取得
	end;

	cNode.ImageIndex	:= TREE_INDEX_PARENT_SUM;
	cNode.SelectedIndex	:= cNode.ImageIndex + 1;

	fnAddTreeViewItemsSumChildren (PTreeViewRec (pRecord)^.nNCode, cNode);

	cNode.Expand (TRUE);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnAddTreeViewItemSumSystem (nNCode:Extended;strHojCode: String; nNCodeParent: Extended; strDescription: String);
var
	pItemRec: PTreeViewRec;

begin
	New (pItemRec);

	if	(nNCODEParent <> 0) then
		pItemRec^.nItemDivision	:= TREE_CHILD_SUM
	else
		pItemRec^.nItemDivision	:= TREE_PARENT_SUM;

	pItemRec^.nNCode	    	:= nNCode;
	pItemRec^.strHojCode		:= strHojCode;
	pItemRec^.strDescription	:= strDescription;

	if	(pItemRec^.nItemDivision = TREE_PARENT_SUM) then
		fnAddTreeViewItemSumParent (pItemRec)
	else
		fnAddTreeViewItemSumChild (nNCODEParent, pItemRec);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionAllControls (fEnabled: Boolean);
var
	cColorBackground: TColor;

begin
	if	(fEnabled) then
		cColorBackground	:= clWindow
	else
		cColorBackground	:= TJNTCRP004006f (Self).Color;

	CmnLabelExCode        .Enabled	:= fEnabled;
	CmnLabelAssociation   .Enabled	:= fEnabled;
//	CmnLabelName          .Enabled	:= fEnabled;
	CmnLabelNameSimple    .Enabled	:= fEnabled;
	CmnLabelAppDate       .Enabled	:= fEnabled;
	CmnLabelAppDateAddtion.Enabled	:= fEnabled;

	if	(m_nCurCodeAttribute <= 1) then
	begin
		CmnEdit00001HojCodeNumeric.Static	:= not fEnabled;
		CmnEdit00001HojCodeNumeric.Color	:= cColorBackground;
	end
	else
	begin
		CmnEdit00001HojCodeFree.Static	:= not fEnabled;
		CmnEdit00001HojCodeFree.Color	:= cColorBackground;
	end;

	CmnEdit00002Association .Static	:= not fEnabled;
	CmnEdit00003Name        .Static	:= not fEnabled;
	CmnEdit00004NameSimple  .Static	:= not fEnabled;
	CmnEdit00005AppDateStart.Static	:= not fEnabled;
	CmnEdit00006AppDateEnd  .Static	:= not fEnabled;

	CmnEdit00002Association .Color	:= cColorBackground;
	CmnEdit00003Name        .Color	:= cColorBackground;
	CmnEdit00004NameSimple  .Color	:= cColorBackground;
	CmnEdit00005AppDateStart.Color	:= cColorBackground;
	CmnEdit00006AppDateEnd  .Color	:= cColorBackground;

	CmnButtonUpdate.Enabled	:= fEnabled;
	CmnButtonCancel.Enabled	:= fEnabled;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionAllControlsDetail (fEnabled: Boolean);
begin
//	CmnEdit00001HojCodeNumeric.Enabled	:= fEnabled;
//	CmnEdit00001HojCodeFree   .Enabled	:= fEnabled;

    PnlHeader.Enabled := fEnabled;
    CmnPanelInformation01.Enabled := fEnabled;
    CmnPanelInformation02.Enabled := fEnabled;
    CmnPanelInformation03.Enabled := fEnabled;
    CmnPanelInformation04.Enabled := fEnabled;
    MPanel12.Enabled              := fEnabled;
    CmnPanelInformation06.Enabled := fEnabled;
    CmnPanelInformation10.Enabled := fEnabled;				// <222> ADD

    CmnEdit00011AssDivision.Static      := not fEnabled;    // <167> Add
    CmnEdit00012DecPtnDivision.Static   := not fEnabled;    // <167> Add
    CmnEdit00017SateiCalcKbn.Static     := not fEnabled;    // <170> Add
    CmnEdit00018SateiCalcValue.Static   := not fEnabled;    // <170> Add
    CmnEdit00019GaikaUse.Static			:= not fEnabled;    // <222> ADD
    CmnEdit00020BasePayment.Static		:= not fEnabled;    // <222> ADD

// <222> ADD start
    // 電信送金情報はグリッドがあるので個別に制御
    CmnEdit09001AccountCode.Static		:= not fEnabled;
    CmnEdit09002AccountCode.Static		:= not fEnabled;
    CmnEdit09003ComDivision.Static		:= not fEnabled;
    CmnEdit09004ComCalculation.Static	:= not fEnabled;
    CmnEdit09006CustomerInquiryNo.Static:= not fEnabled;	// <222-8>ADD
    CmnEdit09007PayHeadingNo.Static		:= not fEnabled;	// <222-8>ADD
    CmnEdit09008SendPurpose.Static		:= not fEnabled;	// <222-8>ADD
    CmnEdit09009PermLicenceNo.Static	:= not fEnabled;	// <222-8>ADD
    CmnEdit09010PermDate.Static			:= not fEnabled;	// <222-8>ADD
    if fEnabled then
    begin
	    DBGridVar.Options := DBGridVar.Options - [egoRowSelect];
    end
    else
    begin
    	DBGridVar.Options := DBGridVar.Options + [egoRowSelect];
    end;
// <222> ADD end

{
	CmnEdit00002Association   .Enabled	:= fEnabled;
	CmnEdit00003Name          .Enabled	:= fEnabled;
	CmnEdit00004NameSimple    .Enabled	:= fEnabled;
	CmnEdit00005AppDateStart  .Enabled	:= fEnabled;
	CmnEdit00006AppDateEnd    .Enabled	:= fEnabled;

	CmnEdit01001DecDivision               .Enabled	:= fEnabled;
	CmnEdit01002PaymentColumnDivision     .Enabled	:= fEnabled;
	CmnEdit01007PaymentColumnDivision     .Enabled	:= fEnabled;
	CmnEdit01012PaymentColumnDivision     .Enabled	:= fEnabled;
	CmnEdit01017PaymentColumnDivision     .Enabled	:= fEnabled;
	CmnEdit01022PaymentColumnDivision     .Enabled	:= fEnabled;
	CmnEdit01003PaymentColumnBasedValue   .Enabled	:= fEnabled;
	CmnEdit01008PaymentColumnBasedValue   .Enabled	:= fEnabled;
	CmnEdit01013PaymentColumnBasedValue   .Enabled	:= fEnabled;
	CmnEdit01018PaymentColumnBasedValue   .Enabled	:= fEnabled;
	CmnEdit01023PaymentColumnBasedValue   .Enabled	:= fEnabled;
	CmnEdit01004PaymentColumnMinimumPrice .Enabled	:= fEnabled;
	CmnEdit01009PaymentColumnMinimumPrice .Enabled	:= fEnabled;
	CmnEdit01014PaymentColumnMinimumPrice .Enabled	:= fEnabled;
	CmnEdit01019PaymentColumnMinimumPrice .Enabled	:= fEnabled;
	CmnEdit01024PaymentColumnMinimumPrice .Enabled	:= fEnabled;
	CmnEdit01005PaymentColumnFractionPrice.Enabled	:= fEnabled;
	CmnEdit01010PaymentColumnFractionPrice.Enabled	:= fEnabled;
	CmnEdit01015PaymentColumnFractionPrice.Enabled	:= fEnabled;
	CmnEdit01020PaymentColumnFractionPrice.Enabled	:= fEnabled;
	CmnEdit01025PaymentColumnFractionPrice.Enabled	:= fEnabled;
	CmnEdit01006PaymentColumnFraction     .Enabled	:= fEnabled;
	CmnEdit01011PaymentColumnFraction     .Enabled	:= fEnabled;
	CmnEdit01016PaymentColumnFraction     .Enabled	:= fEnabled;
	CmnEdit01021PaymentColumnFraction     .Enabled	:= fEnabled;
	CmnEdit01026PaymentColumnFraction     .Enabled	:= fEnabled;

	CmnEdit02001AccountCode    .Enabled	:= fEnabled;
	CmnEdit02002BankCode       .Enabled	:= fEnabled;
	CmnEdit02003BranchCode     .Enabled	:= fEnabled;
	CmnEdit02004BankName       .Enabled	:= fEnabled;
	CmnEdit02005BankNameKana   .Enabled	:= fEnabled;
	CmnEdit02006BranchName     .Enabled	:= fEnabled;
	CmnEdit02007BranchNameKana .Enabled	:= fEnabled;
	CmnEdit02008TranslationName.Enabled	:= fEnabled;
	CmnEdit02009DepDivision    .Enabled	:= fEnabled;
	CmnEdit02010AccountNo      .Enabled	:= fEnabled;
	CmnEdit02011FBDivision     .Enabled	:= fEnabled;
	CmnEdit02012VisitorCode    .Enabled	:= fEnabled;
	CmnEdit02013VisitorCode    .Enabled	:= fEnabled;
	CmnEdit02014EDIInfo        .Enabled	:= fEnabled;
	CmnEdit02015ComDivision    .Enabled	:= fEnabled;
	CmnEdit02016ComCalculation .Enabled	:= fEnabled;
	CmnEdit02017PayDivision    .Enabled	:= fEnabled;

	CmnEdit03001AccountCode    .Enabled	:= fEnabled;
	CmnEdit03002BankCode       .Enabled	:= fEnabled;
	CmnEdit03003BranchCode     .Enabled	:= fEnabled;
	CmnEdit03004BankName       .Enabled	:= fEnabled;
	CmnEdit03005BankNameKana   .Enabled	:= fEnabled;
	CmnEdit03006BranchName     .Enabled	:= fEnabled;
	CmnEdit03007BranchNameKana .Enabled	:= fEnabled;
	CmnEdit03008TranslationName.Enabled	:= fEnabled;
	CmnEdit03009DepDivision    .Enabled	:= fEnabled;
	CmnEdit03010AccountNo      .Enabled	:= fEnabled;
	CmnEdit03011FBDivision     .Enabled	:= fEnabled;
	CmnEdit03012VisitorCode    .Enabled	:= fEnabled;
	CmnEdit03013VisitorCode    .Enabled	:= fEnabled;
	CmnEdit03014EDIInfo        .Enabled	:= fEnabled;
	CmnEdit03015ComDivision    .Enabled	:= fEnabled;
	CmnEdit03016ComCalculation .Enabled	:= fEnabled;
	CmnEdit03017PayDivision    .Enabled	:= fEnabled;
	CmnEdit03018PaySight       .Enabled	:= fEnabled;

	CmnEdit04001AccountCode    .Enabled	:= fEnabled;
	CmnEdit04002PaySight       .Enabled	:= fEnabled;
	CmnEdit04003DivSheets      .Enabled	:= fEnabled;
	CmnEdit04004PosDivision    .Enabled	:= fEnabled;
	CmnEdit04005BurDivision    .Enabled	:= fEnabled;
	CmnEdit04006AccountCode    .Enabled	:= fEnabled;
	CmnEdit04007PosDivision    .Enabled	:= fEnabled;
	CmnEdit04008BurDivision    .Enabled	:= fEnabled;

	CmnEdit05001SeqNo          .Enabled	:= fEnabled;
	CmnEdit05002KmkCode        .Enabled	:= fEnabled;
	CmnEdit05003HojCodeNumeric .Enabled	:= fEnabled;
	CmnEdit05003HojCodeFree    .Enabled	:= fEnabled;
	CmnEdit05004HojCodeNumeric .Enabled	:= fEnabled;
	CmnEdit05004HojCodeFree    .Enabled	:= fEnabled;
	CmnEdit05005HojCodeNumeric .Enabled	:= fEnabled;
	CmnEdit05005HojCodeFree    .Enabled	:= fEnabled;
	CmnEdit05006TaxCode        .Enabled	:= fEnabled;
	CmnEdit05007TaxRate        .Enabled	:= fEnabled;
	CmnEdit05008OffsetPrice    .Enabled	:= fEnabled;

	CmnEdit06001ClassCode      .Enabled	:= fEnabled;
	CmnEdit06002HojCodeNumeric .Enabled	:= fEnabled;
	CmnEdit06002HojCodeFree    .Enabled	:= fEnabled;
	CmnEdit06003ReceiverName   .Enabled	:= fEnabled;
	CmnEdit06004ZipCodeUpper   .Enabled	:= fEnabled;
	CmnEdit06005ZipCodeLower   .Enabled	:= fEnabled;
	CmnEdit06006Address        .Enabled	:= fEnabled;
	CmnEdit06007Address        .Enabled	:= fEnabled;
	CmnEdit06008TelephoneNo    .Enabled	:= fEnabled;
	CmnEdit06009PostName       .Enabled	:= fEnabled;
	CmnEdit06010ChargeName     .Enabled	:= fEnabled;
	CmnEdit06011ResDivision    .Enabled	:= fEnabled;
	CmnEdit06012PasDivision    .Enabled	:= fEnabled;
	CmnEdit06013TaxCode        .Enabled	:= fEnabled;
	CmnEdit06014TaxRate        .Enabled	:= fEnabled;
	CmnEdit06015TaxCode        .Enabled	:= fEnabled;
	CmnEdit06016TaxRate        .Enabled	:= fEnabled;

	CmnEdit07001FundCode       .Enabled	:= fEnabled;
	CmnEdit07002FundCode       .Enabled	:= fEnabled;
	CmnEdit07003ClosingDay     .Enabled	:= fEnabled;
	CmnEdit07007ClosingDay     .Enabled	:= fEnabled;
	CmnEdit07011ClosingDay     .Enabled	:= fEnabled;
	CmnComboBox07004ExpectMonth.Enabled	:= fEnabled;
	CmnComboBox07008ExpectMonth.Enabled	:= fEnabled;
	CmnComboBox07012ExpectMonth.Enabled	:= fEnabled;
	CmnEdit07005ExpectDay      .Enabled	:= fEnabled;
	CmnEdit07009ExpectDay      .Enabled	:= fEnabled;
	CmnEdit07013ExpectDay      .Enabled	:= fEnabled;
	CmnComboBox07006HolDivision.Enabled	:= fEnabled;
	CmnComboBox07010HolDivision.Enabled	:= fEnabled;
	CmnComboBox07014HolDivision.Enabled	:= fEnabled;
}
	CmnButtonUpdate.Enabled	:= fEnabled;
	CmnButtonCancel.Enabled	:= fEnabled;
end;

// <170> 2007/12/14 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionSateiCalc ();
begin
    CmnEdit00018SateiCalcValue.Value    := 0;

	if	(CmnEdit00017SateiCalcKbn.AsInteger = 0) then                           // 査定金額計算区分: 0=なし
	begin
        CmnEdit00018SateiCalcValue.InputFlag    := True;
        CmnEdit00018SateiCalcValue.Enabled      := False;

		CmnEdit00018SateiCalcValue.FormatStr	:= '#,##0';
		CmnEdit00018SateiCalcValue.Digits		:= 11;
		CmnEdit00018SateiCalcValue.Decimals	    := 0;
        CmnLabelSateiCalcValueUnit.Visible      := False;
	end
    else
    begin
        CmnEdit00018SateiCalcValue.InputFlag        := False;
        CmnEdit00018SateiCalcValue.Enabled          := True;

        if	(CmnEdit00017SateiCalcKbn.AsInteger = 1) then                       // 査定金額計算区分: 1=比率
    	begin
    		CmnEdit00018SateiCalcValue.FormatStr	:= '##0.00';
    		CmnEdit00018SateiCalcValue.Digits		:= 5;
    		CmnEdit00018SateiCalcValue.Decimals	    := 2;
            CmnLabelSateiCalcValueUnit.Visible      := True;
    	end
    	else if	(CmnEdit00017SateiCalcKbn.AsInteger = 2) then                   // 査定金額計算区分: 2=定額
    	begin
    		CmnEdit00018SateiCalcValue.FormatStr	:= '#,##0';
    		CmnEdit00018SateiCalcValue.Digits		:= 11;
    		CmnEdit00018SateiCalcValue.Decimals	    := 0;
            CmnLabelSateiCalcValueUnit.Visible      := False;
    	end;
    end;
end;
// <170> 2007/12/14 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionPayment ();
var
	cNumEdit	  : TMNumEdit;
	nRow		  : Integer;
	nColumn		  : Integer;
	strDescription: String;
	fStatic		  : Boolean;

begin
	if	(CmnEdit01001DecDivision.AsInteger = 0) then									// 分解方法: 0=比率
	begin
		CmnPanelPaymentBase.Width	:= fnGetZoom(580);							//<#8>（関数｢fnGetZoom｣を追加）

		for	nRow := 1 to 5 do
		begin
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).FormatStr	:= '##0.00';
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Width		:= fnGetZoom(98);	//<#8>（関数｢fnGetZoom｣を追加）
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Digits		:= 5;
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Decimals	:= 2;
		end;

		fStatic	:= FALSE;
	end
	else if	(CmnEdit01001DecDivision.AsInteger = 1) then								// 分解方法: 1=定額
	begin
		CmnPanelPaymentBase.Width	:= fnGetZoom(260);							//<#8>（関数｢fnGetZoom｣を追加）

		for	nRow := 1 to 5 do
		begin
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).FormatStr	:= '#,##0';
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Width		:= fnGetZoom(110);	//<#8>（関数｢fnGetZoom｣を追加）
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Digits		:= 11;
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Decimals	:= 0;
		end;

		fStatic	:= TRUE;
	end
	else
		Exit;

	for	nRow := 1 to 5 do
	begin
		for	nColumn := 1 to 5 do
		begin
			cNumEdit		:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nColumn + 1 + ((nRow - 1) * 5)])));
			cNumEdit.Value	:= 0;

			if	(nColumn <> 1) then
				cNumEdit.InputFlag	:= TRUE;

			if	(nColumn = 1) then
			begin
				fnGetDescriptionSelectedItem (cNumEdit, strDescription);

				TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= strDescription;
			end
			else if	(nColumn = 5) then
				TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= '';

			if	((nColumn >= 3) and (nColumn <= 5) and (nRow <> 5)) then
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nColumn + 1 + ((nRow - 1) * 5)]))).Static	:= fStatic;
		end;

		TMLabel (MJSFindCtrl (Self, Format ('CmnLabelPaymentColumnBasedValue%.2dUnit', [nRow]))).Caption	:= '';
	end;

// <149> 2006/10/11 H.Kawato Add Start
    if (CmnEdit01030PriPayWayDivision.Value <> 0) then
    begin
        CmnEdit01002PaymentColumnDivision.ArrowDisp     := adNone;
//<189> Mod
//		CmnEdit01002PaymentColumnDivision.Value         := 3;
        CmnEdit01002PaymentColumnDivision.Value         := CmnEdit01030PriPayWayDivision.Value;
		case (CmnEdit01002PaymentColumnDivision.AsInteger) of
			1:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '振込';
			2:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '期日指定振込';
			3:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '手形';
			4:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '小切手';
			5:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '現金';
			else	CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '';
		end;
//<189> Mod

        CmnEdit01002PaymentColumnDivision.ReadOnly      := TRUE;
        CmnEdit01003PaymentColumnBasedValue.ReadOnly    := TRUE;
        CmnEdit01004PaymentColumnMinimumPrice.ReadOnly  := TRUE;
        CmnEdit01005PaymentColumnFractionPrice.ReadOnly := TRUE;
        CmnEdit01006PaymentColumnFraction.ReadOnly      := TRUE;
        CmnEdit01002PaymentColumnDivision.TabStop       := FALSE;
        CmnEdit01003PaymentColumnBasedValue.TabStop     := FALSE;
        CmnEdit01004PaymentColumnMinimumPrice.TabStop   := FALSE;
        CmnEdit01005PaymentColumnFractionPrice.TabStop  := FALSE;
        CmnEdit01006PaymentColumnFraction.TabStop       := FALSE;
    end;
// <149> 2006/10/11 H.Kawato Add End

// <157> 2007/02/13 H.Kawato Add Start
    // 詳細データ格納用配列の初期化            
    for	nRow := 1 to 5 do
    begin
        m_arSyousaiData[nRow].nEdaban       := 0;
        m_arSyousaiData[nRow].nBaseKingaku  := 0;
        m_arSyousaiData[nRow].nBaseHiritu   := 0;
        m_arSyousaiData[nRow].nHasuuKingaku := 0;
        m_arSyousaiData[nRow].nHasuuHou     := 0;
        m_arSyousaiData[nRow].nSite         := 0;
    end;
// <157> 2007/02/13 H.Kawato Add End

// <211> MOD-STR
//	CmnTabInformations.Items [1].Enabled	:= FALSE;									// 振込情報
//	CmnTabInformations.Items [2].Enabled	:= FALSE;									// 期日指定振込情報
///	CmnTabInformations.Items [3].Enabled	:= FALSE;									// 手形/小切手情報
	CmnTabInformations.Items [TI_FURIKOMI].Enabled  := FALSE;			  				// 振込情報
	CmnTabInformations.Items [TI_KFURIKOMI].Enabled	:= FALSE;			  				// 期日指定振込情報
	CmnTabInformations.Items [TI_BILL].Enabled	    := FALSE;			  				// 手形/電子債権情報
	CmnTabInformations.Items [TI_CHECK].Enabled	    := FALSE;			  				// 小切手情報
// <211> MOD-END
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionPostage (nFieldID: Integer);
var
	cNumEdit   : TMNumEdit;
	cBackground: TColor;
	fEnabled   : Boolean;

begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit04%.3dPosDivision', [nFieldID])));

	if	(cNumEdit.AsInteger = 0) then													// 手形/小切手郵送区分: 0=郵送する
		fEnabled	:= TRUE
	else if	(cNumEdit.AsInteger = 1) then												// 手形/小切手郵送区分: 1=郵送しない
		fEnabled	:= FALSE
	else
		Exit;

	if	(fEnabled) then
		cBackground	:= clWindow
	else
		cBackground	:= TJNTCRP004006f (Self).Color;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelBurDivision03'))                                 .Enabled	:= fEnabled;    // <216> ADD
	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit04%.3dBurDivision'     , [nFieldID + 1]))).Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit04%.3dBurDivision'     , [nFieldID + 1]))).Color		:= cBackground;
	TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel04%.3dBurDivisionDesc', [nFieldID + 1]))).Enabled	:= fEnabled;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionGrid ();
begin
	if	(m_nRefermode = REFER) then														// ﾒｰｲﾙ会計参照ﾌﾗｸﾞ: 参照時
	begin
		CmnTreeView.DragMode	:=	dmManual;

		CmnGridStandardExist           .Options		:= CmnGridStandardExist.Options - [egoCanAppend] + [egoRowSelect];
		CmnGridStandardExistAssociation.ReadOnly	:= TRUE;
		CmnGridStandardExistName       .ReadOnly	:= TRUE;
		CmnGridStandardExistNameSimple .ReadOnly	:= TRUE;

		CmnGridStandardTotal           .Options		:= CmnGridStandardTotal.Options - [egoCanAppend] + [egoRowSelect];
		CmnGridStandardTotalAssociation.ReadOnly	:= TRUE;
		CmnGridStandardTotalName       .ReadOnly	:= TRUE;
		CmnGridStandardTotalNameSimple .ReadOnly	:= TRUE;

		CmnGridStandardExist.PopupMenu	:= nil;
		CmnGridStandardTotal.PopupMenu	:= nil;
	end
	else
	begin
		CmnTreeView.DragMode	:=	dmAutomatic;

		CmnGridStandardExist           .Options		:= CmnGridStandardExist.Options + [egoCanAppend] - [egoRowSelect];
		CmnGridStandardExistAssociation.ReadOnly	:= FALSE;
		CmnGridStandardExistName       .ReadOnly	:= FALSE;
		CmnGridStandardExistNameSimple .ReadOnly	:= FALSE;

		CmnGridStandardTotal           .Options		:= CmnGridStandardTotal.Options + [egoCanAppend] - [egoRowSelect];
		CmnGridStandardTotalAssociation.ReadOnly	:= FALSE;
		CmnGridStandardTotalName       .ReadOnly	:= FALSE;
		CmnGridStandardTotalNameSimple .ReadOnly	:= FALSE;

		CmnGridStandardExist.PopupMenu	:= CmnPopupMenuGridStandard;
		CmnGridStandardTotal.PopupMenu	:= CmnPopupMenuGridStandard;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionOffsetJournalInfo (nFieldID: Integer);
var
	cNumEdit : TMNumEdit;
	cTxtEdit : TMTxtEdit;
	strFormat: String;

begin
	if	(not ((nFieldID >= 3) and (nFieldID <= 5))) then
		Exit;

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID])));
	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree'   , [nFieldID])));

	if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit.Visible	:= TRUE;
		cTxtEdit.Visible	:= FALSE;

		cNumEdit.DMaxLength	:= m_arCodeAttribute [nFieldID - 3].nDigit;

		if	(m_arCodeAttribute [nFieldID - 3].nAttribute = 1) then						// ｺｰﾄﾞ属性: 1=数字(前ｾﾞﾛあり)
			strFormat	:= StringOfChar ('0', m_arCodeAttribute [nFieldID - 3].nDigit)
		else																			// ｺｰﾄﾞ属性: 0=数字
			strFormat	:= '';

		cNumEdit.FormatStr	:= strFormat;
		cNumEdit.Digits		:= m_arCodeAttribute [nFieldID - 3].nDigit;
		cNumEdit.MaxValue	:= StrToInt64 (StringOfChar ('9', m_arCodeAttribute [nFieldID - 3].nDigit));

// <150> 2006/11/02 H.Kawato Mod Start
{
		if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = 0) then
			cNumEdit.Enabled	:= FALSE
}
		if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = 0) then
        begin
            cNumEdit.Value      := 0;
            cNumEdit.InputFlag  := TRUE;
			cNumEdit.Enabled	:= FALSE;
        end
// <150> 2006/11/02 H.Kawato Mod End
		else
		begin
			cNumEdit.Enabled	:= TRUE;
			cNumEdit.Static		:= FALSE;
		end;
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cNumEdit.Visible	:= FALSE;
		cTxtEdit.Visible	:= TRUE;
		cTxtEdit.MaxLength	:= m_arCodeAttribute [nFieldID - 3].nDigit;

// <150> 2006/11/02 H.Kawato Mod Start
{
		if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = 0) then
			cTxtEdit.Enabled	:= FALSE
}
		if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = 0) then
        begin
            cTxtEdit.Text       := '';
			cTxtEdit.Enabled	:= FALSE;
        end
// <150> 2006/11/02 H.Kawato Mod End
		else
		begin
			cTxtEdit.Enabled	:= TRUE;
			cTxtEdit.Static		:= FALSE;
		end;
	end;

// <150> 2006/11/02 H.Kawato Mod Start 
// 	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text	:= '';
    if  (m_nPrjSubUnAdopt <> 1) or
        (m_arCodeAttribute [nFieldID - 3].nMasterDivision < 301) or
        (m_arCodeAttribute [nFieldID - 3].nMasterDivision > 310) then
    	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text    := '';
// <150> 2006/11/02 H.Kawato Mod End
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionOffsetJournalInfoEx (nPosition: Integer);
var
	dqMasterData: TMQuery;
	cNumEdit	: TMNumEdit;
	cTxtEdit	: TMTxtEdit;
	strHojCode	: String;
    exNCode     : Extended;                 // <118>
begin
    exNCode := 0;

	if	(not ((nPosition >= 0) and (nPosition <= 2))) then
		Exit;

	if	(not m_arCodeAttribute [nPosition].fEnabled) then
		Exit;

	if	((m_arCodeAttribute [nPosition].nClassCode <> 1) and (m_arCodeAttribute [nPosition].nClassCode <> 3)) then
		Exit;

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nPosition + 3])));
	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree'   , [nPosition + 3])));

	if	(m_arCodeAttribute [nPosition].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit.Static		:= TRUE;
		cNumEdit.TabStop	:= FALSE;
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cTxtEdit.Static		:= TRUE;
		cTxtEdit.TabStop	:= FALSE;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	strHojCode	:= '';

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT SpHojyoNCd1, SpHojyoNCd2 FROM MasterInfo WHERE MasterKbn = :nMasterDivision');

		ParamByName ('nMasterDivision').AsInteger	:= m_arCodeAttribute [nPosition].nMasterDivision;

		Open ();

		if	(not EOF) then
		begin
			if	(m_arCodeAttribute [nPosition].nClassCode = 1) then
// <118>内部ｺｰﾄﾞ化
//				strHojCode	:= FieldByName ('SpHojyoCd1').AsString						// B/S共通部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
				exNCode	:= FieldByName ('SpHojyoNCd1').AsFloat						// B/S共通部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
			else
// <118>内部ｺｰﾄﾞ化
//				strHojCode	:= FieldByName ('SpHojyoCd2').AsString;						// P/L共通部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
				exNCode	:= FieldByName ('SpHojyoNCd2').AsFloat;						// P/L共通部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
		end;
// <118>↓
{		if	(Trim (strHojCode) = '') then
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT GCode FROM MTOKUI ');
			SQL.Add   ('WHERE  RDelKbn = 0 AND (SyokuchiKbn = 1 AND NCode <> NULL)');

			ParamByName ('nMasterDivision').AsInteger	:= m_arCodeAttribute [nPosition].nMasterDivision;

			if	(not EOF) then
				strHojCode	:= FieldByName ('GCode').AsString;							// 諸口部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
		end;
}
        if exNCode = 0 then                 // 共通部門が登録されていなかったら諸口
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT GCode FROM HojyoMA ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND RDelKbn = 0 AND (SyokuchiKbn = 1)');

			ParamByName ('nMasterDivision').AsInteger	:= m_arCodeAttribute [nPosition].nMasterDivision;
    		Open ();
			if	(not EOF) then              // 外部ｺｰﾄﾞ取得
				strHojCode	:= FieldByName ('GCode').AsString;							// 諸口部門(ｾｸﾞﾒﾝﾄ)ｺｰﾄﾞ
		end
        else                                // 共通部門が登録されている場合
        begin
            Close();
            SQL.Clear();
            SQL.Add('SELECT GCode FROM HojyoMA ');
            SQL.Add('WHERE NCode = :parNCode AND RDelKbn = 0 ');
			SQL.Add('AND  MasterKbn = :nMasterDivision ');                                                  // <163> Add
            ParamByName('parNCode').AsFloat := exNCode;
			ParamByName ('nMasterDivision').AsInteger	:= m_arCodeAttribute [nPosition].nMasterDivision;   // <163> Add
    		Open ();
            if (not EOF) then               // 外部ｺｰﾄﾞ取得
                strHojCode := FieldByName('GCode').AsString;
        end;
// <118>↑
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	if	(m_arCodeAttribute [nPosition].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
	begin
		if	(Trim (strHojCode) = '') then
		begin
			cNumEdit.Value		:= 0;
			cNumEdit.InputFlag	:= TRUE;
		end
		else
		begin
			cNumEdit.Value		:= StrToInt64 (Trim (strHojCode));
			cNumEdit.InputFlag	:= FALSE;
		end;
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
		cTxtEdit.Text	:= strHojCode;

	fnCheckEditTxtValueHojCodeEx (nPosition + 3);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionOffsetTax ();
var
	strDescription: String;

begin
	if	(not CmnEdit05006TaxCode.Enabled) then
		Exit;

//	if	((CmnEdit05006TaxCode.AsInteger =  0) or
//		 (CmnEdit05006TaxCode.AsInteger = 30) or (CmnEdit05006TaxCode.AsInteger = 40)) then
	if	 (CmnEdit05006TaxCode.AsInteger = 30) or (CmnEdit05006TaxCode.AsInteger = 40) then
	begin
		CmnEdit05007TaxRate.Value		:= 0;
		CmnEdit05007TaxRate.InputFlag	:= TRUE;
		CmnEdit05007TaxRate.Enabled		:= FALSE;

		CmnEdit05007TaxRateDesc.Text	:= '';
	end
	else
	begin
		CmnEdit05007TaxRate.Enabled		:= TRUE;
		CmnEdit05007TaxRate.InputFlag	:= FALSE;

// <#TAX10> MOD-STR
//		fnGetDescriptionSelectedItem (CmnEdit05007TaxRate, strDescription);
//
//		CmnEdit05007TaxRateDesc.Text	:= strDescription;
		CmnEdit05007TaxRateDesc.Text  := fnGetTaxRateName(CmnEdit05007TaxRate.AsInteger);
// <#TAX10> ADD-END
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionPageButtons (fVisible: Boolean);
var
	arPageButton: array [0..1] of TMBitBtn;
	bBtnChange	: Boolean;					// <222> ADD
begin
	CmnButtonPagePrevious.Visible	:= fVisible;
	CmnButtonPageNext    .Visible	:= fVisible;

	if	(not fVisible) then
		Exit;

// <211> MOD-STR
//	if	((CmnTabInformations.Items.Selected = 0) or
//		 (CmnTabInformations.Items.Selected = 4) or
//		((CmnTabInformations.Items.Selected = 3) and (not CmnTabInformations.Items [4].Enabled))) then
// <222> MOD start
(*
	if	((CmnTabInformations.Items.Selected = TI_PAYWAY) or
		 (CmnTabInformations.Items.Selected = TI_OFFSET) or
		((CmnTabInformations.Items.Selected = TI_CHECK) and (not CmnTabInformations.Items [TI_OFFSET].Enabled))) then
*)
	bBtnChange := False;
											// 為替手形/送金小切手情報タブが非表示または入力不可(外貨債務採用なし)
	if (not CmnTabInformations.Items[TI_EXCHANGE].Visible) or (not CmnTabInformations.Items[TI_EXCHANGE].Enabled) then
    begin
    										// 支払方法と相殺情報(または小切手情報)が端
		if	((CmnTabInformations.Items.Selected = TI_PAYWAY) or
			 (CmnTabInformations.Items.Selected = TI_OFFSET) or
			((CmnTabInformations.Items.Selected = TI_CHECK) and (not CmnTabInformations.Items [TI_OFFSET].Enabled))) then
        begin
        	bBtnChange := True;
        end;
    end
    else    								// 為替手形/送金小切手情報タブ選択可(外貨債務採用あり)
    begin
    										// 支払方法と為替手形/送金小切手情報が端
		if	((CmnTabInformations.Items.Selected = TI_PAYWAY) or
			 (CmnTabInformations.Items.Selected = TI_EXCHANGE)) then
        begin
        	bBtnChange := True;
        end;
    end;

    if bBtnChange then  					// 有効なタブの左端/右端タブを選択中の場合
// <222> MOD end
// <211> MOD-END
//		 (CmnTabInformations.Items.Selected = 5) or
//		((CmnTabInformations.Items.Selected = 4) and (not CmnTabInformations.Items [5].Enabled))) then

//		 (CmnTabInformations.Items.Selected = 6) or
//		((CmnTabInformations.Items.Selected = 5) and (not CmnTabInformations.Items [6].Enabled))) then
	begin
// <211> MOD-STR
//		if	(CmnTabInformations.Items.Selected = 0) then
		if	(CmnTabInformations.Items.Selected = TI_PAYWAY) then
// <211> MOD-END
		begin
			arPageButton [1]	:= CmnButtonPagePrevious;
			arPageButton [0]	:= CmnButtonPageNext;
		end
		else
		begin
			arPageButton [0]	:= CmnButtonPagePrevious;
			arPageButton [1]	:= CmnButtonPageNext;
		end;

		arPageButton [0].Enabled	:= TRUE;

		if	(arPageButton [1].Focused) then
		begin
			m_cACControl	:= arPageButton [0];
			m_cACControl.SetFocus ();
		end;

		arPageButton [1].Enabled	:= FALSE;
	end
	else
	begin
		CmnButtonPagePrevious.Enabled	:= TRUE;
		CmnButtonPageNext    .Enabled	:= TRUE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionPayExpect (nFieldID: Integer);
var
	nCount: Integer;
begin
	if	(TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [nFieldID]))).InputFlag or
		(TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [nFieldID]))).Value = 0)) then
	begin
		TMNumEdit  (MJSFindCtrl (Self, Format (_ClsDay, [nFieldID    ]))).Value		:= 0;
		TMNumEdit  (MJSFindCtrl (Self, Format (_ClsDay, [nFieldID    ]))).InputFlag	:= TRUE;
		TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay, [nFieldID + 2]))).Value		:= 0;
		TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay, [nFieldID + 2]))).InputFlag	:= TRUE;

		TMComboBox (MJSFindCtrl (Self, Format (_ExpMon , [nFieldID + 1]))).Items.Clear ();
		TMComboBox (MJSFindCtrl (Self, Format (_HolDiv , [nFieldID + 3]))).Items.Clear ();
		TMComboBox (MJSFindCtrl (Self, Format (_ExpMon , [nFieldID + 1]))).Enabled	:= FALSE;
		TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay , [nFieldID + 2]))).Enabled	:= FALSE;
		TMComboBox (MJSFindCtrl (Self, Format (_HolDiv , [nFieldID + 3]))).Enabled	:= FALSE;
		TMLabel    (MJSFindCtrl (Self, Format (_LExpMon, [nFieldID + 1]))).Enabled	:= FALSE;
		TMLabel    (MJSFindCtrl (Self, Format (_LExpDay, [nFieldID + 2]))).Enabled	:= FALSE;
		TMLabel    (MJSFindCtrl (Self, Format (_LHolDiv, [nFieldID + 3]))).Enabled	:= FALSE;
		TMComboBox (MJSFindCtrl (Self, Format (_ExpMon , [nFieldID + 1]))).Color	:= TJNTCRP004006f (Self).Color;
		TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay , [nFieldID + 2]))).Color	:= TJNTCRP004006f (Self).Color;
		TMComboBox (MJSFindCtrl (Self, Format (_HolDiv , [nFieldID + 3]))).Color	:= TJNTCRP004006f (Self).Color;

		fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, Format (_ExpDay, [nFieldID + 2]))), FALSE);

		Exit;
	end;

	if	(TMComboBox (MJSFindCtrl (Self, Format (_ExpMon, [nFieldID + 1]))).Items.Count = 0) then
	begin
		for	nCount := 0 to Length (_ExpectItems) - 1 do
			TMComboBox (MJSFindCtrl (Self, Format (_ExpMon, [nFieldID + 1]))).Items.Add (_ExpectItems [nCount]);

		TMComboBox (MJSFindCtrl (Self, Format (_ExpMon, [nFieldID + 1]))).ItemIndex	:= 0;
	end;

	if	(TMComboBox (MJSFindCtrl (Self, Format (_HolDiv, [nFieldID + 3]))).Items.Count = 0) then
	begin
		for	nCount := 0 to Length (_HolidayItems) - 1 do
			TMComboBox (MJSFindCtrl (Self, Format (_HolDiv, [nFieldID + 3]))).Items.Add (_HolidayItems [nCount]);

		TMComboBox (MJSFindCtrl (Self, Format (_HolDiv, [nFieldID + 3]))).ItemIndex	:= 0;
	end;

	TMComboBox (MJSFindCtrl (Self, Format (_ExpMon , [nFieldID + 1]))).Enabled	:= TRUE;
	TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay , [nFieldID + 2]))).Enabled	:= TRUE;
	TMComboBox (MJSFindCtrl (Self, Format (_HolDiv , [nFieldID + 3]))).Enabled	:= TRUE;
	TMLabel    (MJSFindCtrl (Self, Format (_LExpMon, [nFieldID + 1]))).Enabled	:= TRUE;
	TMLabel    (MJSFindCtrl (Self, Format (_LExpDay, [nFieldID + 2]))).Enabled	:= TRUE;
	TMLabel    (MJSFindCtrl (Self, Format (_LHolDiv, [nFieldID + 3]))).Enabled	:= TRUE;
	TMComboBox (MJSFindCtrl (Self, Format (_ExpMon , [nFieldID + 1]))).Color	:= clWindow;
	TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay , [nFieldID + 2]))).Color	:= clWindow;
	TMComboBox (MJSFindCtrl (Self, Format (_HolDiv , [nFieldID + 3]))).Color	:= clWindow;
end;

// <222> ADD start
//*****************************************************************************
//	Process			:	外貨債務採用区分の入力可/不可制御
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/19
//	Parameter		:	bEnabled	: True: 有効/ False: 無効
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnChangeConditionGaikaUse (bEnabled: Boolean);
begin

	if (bEnabled) and (m_nReferMode <> REFER) then
    begin
		CmnEdit00019GaikaUse.Enabled := True;
    end
    else
    begin
    	CmnEdit00019GaikaUse.Enabled := False;
    end;
end;

//*****************************************************************************
//	Process			:	外貨関係パーツの入力可/不可制御
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	IsEachProject: Boolean(True=ﾌﾟﾛｼﾞｪｸﾄ別 False=標準)
//	Return			:	Nothing
//	History			:	2014/01/27 <222-6>IsEachProject追加
//*****************************************************************************
//procedure	TJNTCRP004006f.fnChangeConditionGaikaParts ();//<222-6>DEL
procedure	TJNTCRP004006f.fnChangeConditionGaikaParts (IsEachProject: Boolean = false);//<222-6>ADD
var
	bEnabled	: Boolean;
begin
    CmnEdit00020BasePayment.Value    := 1;	// 標準支払方法は先頭の項目に

    { 外貨支払採用区分: 0=採用なし }
	if	CmnEdit00019GaikaUse.Value = 0 then
	begin
    	bEnabled := False;					// 入力不可
	end
    { 外貨支払採用区分: 1= 採用あり 2= 外貨支払のみ }
    else
    begin
    	bEnabled := True;					// 入力可
    end;

    // 標準支払方法の有効/無効
    CmnLabelBasePayment.Enabled					:= bEnabled;		// 見出し
    CmnEdit00020BasePayment.InputFlag        	:= not bEnabled;
    CmnEdit00020BasePayment.Enabled      		:= bEnabled;
    CmnLabel00020BasePaymentDesc.Enabled		:= bEnabled;		// 名称

    // タブの有効/無効
    //CmnTabInformations.Items [TI_WIRE].Enabled 		:= bEnabled; 	// 電信送金情報				<222-6>DEL
    //CmnTabInformations.Items [TI_EXCHANGE].Enabled 	:= bEnabled;	// 為替手形／送金小切手情報 <222-6>DEL
    CmnTabInformations.Items [TI_WIRE].Enabled 		:= bEnabled and (not IsEachProject); 	// 電信送金情報 			<222-6>ADD
    CmnTabInformations.Items [TI_EXCHANGE].Enabled 	:= bEnabled and (not IsEachProject);	// 為替手形／送金小切手情報 <222-6>ADD
end;
// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionScreenDetails (fVisible: Boolean);
begin
	CmnLabelAppDate         .Visible	:= fVisible;
	CmnLabelAppDateAddtion  .Visible	:= fVisible;
	CmnEdit00005AppDateStart.Visible	:= fVisible;
	CmnEdit00006AppDateEnd  .Visible	:= fVisible;

	// 以下, 詳細画面用

	if	(not fVisible) then
	begin
// <211> MOD-STR
//		if	(CmnTabInformations.Items.Selected = 6) then
//			CmnTabInformations.Items.Selected	:= 0;
		if	(CmnTabInformations.Items.Selected = TI_OTHERS2) then
			CmnTabInformations.Items.Selected	:= TI_PAYWAY;
// <211> MOD-END
	end;

// <211> MOD-STR
//	CmnTabInformations.Items [6].Enabled	:= fVisible;
	CmnTabInformations.Items [TI_OTHERS2].Enabled	:= fVisible;
// <211> MOD-END

	CmnLabel06002HojCode      .Enabled	:= not fVisible;
	CmnEdit06002HojCodeNumeric.Enabled	:= not fVisible;
	CmnEdit06002HojCodeFree   .Enabled	:= not fVisible;

	if	(fVisible) then																	// 実在ﾚｺｰﾄﾞ
	begin
		CmnEdit06002HojCodeNumeric.Color	:= TJNTCRP004006f (Self).Color;
		CmnEdit06002HojCodeFree   .Color	:= TJNTCRP004006f (Self).Color;
	end
	else																				// 合計ﾚｺｰﾄﾞ
	begin
		CmnEdit06002HojCodeNumeric.Color	:= clWindow;
		CmnEdit06002HojCodeFree   .Color	:= clWindow;
	end;

	fnChangeConditionTaxRelatedEx (fVisible);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnChangeConditionTabInformations (nIndexSelected: Integer): Boolean;
var
	nRow: Integer;
    iSyu: Integer;      // <211> ADD
begin
// <211> MOD-STR
{	CmnTabInformations.Items [1].Enabled	:= FALSE;
	CmnTabInformations.Items [2].Enabled	:= FALSE;
	CmnTabInformations.Items [3].Enabled	:= FALSE;

	for	nRow := 1 to 5 do
	begin
		case (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger) of
			1:		CmnTabInformations.Items [1].Enabled	:= TRUE;					// 振込情報
			2:		CmnTabInformations.Items [2].Enabled	:= TRUE;					// 期日指定振込情報
			3, 4:	CmnTabInformations.Items [3].Enabled	:= TRUE;					// 手形/小切手情報
		end;
	end;}

	CmnTabInformations.Items [TI_FURIKOMI].Enabled  := FALSE;			  				// 振込情報
	CmnTabInformations.Items [TI_KFURIKOMI].Enabled	:= FALSE;			  				// 期日指定振込情報
	CmnTabInformations.Items [TI_BILL].Enabled	    := FALSE;			  				// 手形/電子債権情報
	CmnTabInformations.Items [TI_CHECK].Enabled	    := FALSE;			  				// 小切手情報

	for	nRow := 1 to 5 do
	begin
        iSyu := TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger;

		if (iSyu in [TI_FURIKOMI, TI_KFURIKOMI, TI_BILL, TI_CHECK]) then
        begin
			CmnTabInformations.Items [iSyu].Enabled	:= TRUE;
		end;
	end;
// <211> MOD-END

	if	(not CmnTabInformations.Items [nIndexSelected].Enabled) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionTabStandard (nDivision: Integer);
begin
	CmnTabStandard.Items [0].Enabled	:= TRUE;
	CmnTabStandard.Items [1].Enabled	:= TRUE;

	if	(nDivision = TREE_SYSTEM_SUM) then												// 名寄せ体系
	begin
		CmnTabStandard.Items [1].Selected	:= TRUE;
		CmnTabStandard.Items [0].Selected	:= FALSE;

		CmnTabStandard.Items [0].Enabled	:= FALSE;
	end
	else if	((nDivision = TREE_CHILD_SUM) or (nDivision = TREE_PARENT_SUM)) then		// 名寄せ親･子
	begin
		CmnTabStandard.Items [0].Selected	:= TRUE;
		CmnTabStandard.Items [1].Selected	:= FALSE;

		CmnTabStandard.Items [1].Enabled	:= FALSE;
	end
	else
	begin
		CmnTabStandard.Items [0].Selected	:= TRUE;
		CmnTabStandard.Items [1].Selected	:= FALSE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionTaxRelated (nFieldID: Integer);
var
	cNumEdit: TMNumEdit;
	fVisible: Boolean;

begin
	if	(m_nTaxInfoAccDivision = 0) then												// 会計処理区分: 0=免税業者
	begin
		TMPanel   (MJSFindCtrl (Self, Format ('CmnPanel06%.3dTaxSeparator' , [nFieldID    ]))).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxGroupTitle', [nFieldID    ]))).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxCode'      , [nFieldID    ]))).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxRate'      , [nFieldID + 1]))).Visible	:= FALSE;
		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit06%.3dTaxCode'       , [nFieldID    ]))).Visible	:= FALSE;
		TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit06%.3dTaxRate'       , [nFieldID + 1]))).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxCodeDesc'  , [nFieldID    ]))).Visible	:= FALSE;
		TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxRateDesc'  , [nFieldID + 1]))).Visible	:= FALSE;

		Exit;																			// 以下, 未処理
	end;

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit06%.3dTaxCode', [nFieldID])));

	if	(cNumEdit.AsInteger = 0) then													// 消費税ｺｰﾄﾞ: 0=科目に従う
		fVisible	:= FALSE
	else
	begin
		if	(((nFieldID = 13) and
			 ((cNumEdit.AsInteger = 30) or (cNumEdit.AsInteger = 34) or
			  (cNumEdit.AsInteger = 40) or (cNumEdit.AsInteger = 60) or (cNumEdit.AsInteger = 64))) or
			 ((nFieldID = 15) and
			 ((cNumEdit.AsInteger = 30) or (cNumEdit.AsInteger = 40) or
			  (cNumEdit.AsInteger = 50) or (cNumEdit.AsInteger = 51) or (cNumEdit.AsInteger = 54)))) then
			fVisible	:= FALSE
		else
			fVisible	:= TRUE;
	end;

	TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxRate'    , [nFieldID + 1]))).Visible	:= fVisible;
	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit06%.3dTaxRate'     , [nFieldID + 1]))).Visible	:= fVisible;
	TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel06%.3dTaxRateDesc', [nFieldID + 1]))).Visible	:= fVisible;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionTaxRelatedEx (fExist: Boolean);
begin
{HIS0034 消費税情報不可視
	if	(m_nTaxInfoAccDivision = 0) then												// 会計処理区分: 0=免税業者
		Exit;

	if	(not fExist) then																// 合計支払先
	begin
		CmnEdit06013TaxCode.Value	:= 0;
		CmnEdit06015TaxCode.Value	:= 0;
		CmnEdit06014TaxRate.Value	:= 0;
		CmnEdit06016TaxRate.Value	:= 0;

		CmnPanel06013TaxSeparator .Visible	:= FALSE;
		CmnPanel06015TaxSeparator .Visible	:= FALSE;
		CmnLabel06013TaxGroupTitle.Visible	:= FALSE;
		CmnLabel06015TaxGroupTitle.Visible	:= FALSE;
		CmnLabel06013TaxCode      .Visible	:= FALSE;
		CmnLabel06015TaxCode      .Visible	:= FALSE;
		CmnLabel06014TaxRate      .Visible	:= FALSE;
		CmnLabel06016TaxRate      .Visible	:= FALSE;
		CmnEdit06013TaxCode       .Visible	:= FALSE;
		CmnEdit06015TaxCode       .Visible	:= FALSE;
		CmnEdit06014TaxRate       .Visible	:= FALSE;
		CmnEdit06016TaxRate       .Visible	:= FALSE;
		CmnLabel06013TaxCodeDesc  .Visible	:= FALSE;
		CmnLabel06015TaxCodeDesc  .Visible	:= FALSE;
		CmnLabel06014TaxRateDesc  .Visible	:= FALSE;
		CmnLabel06016TaxRateDesc  .Visible	:= FALSE;

		Exit;																			// 以下, 未処理
	end;


	CmnPanel06013TaxSeparator .Visible	:= TRUE;
	CmnPanel06015TaxSeparator .Visible	:= TRUE;
	CmnLabel06013TaxGroupTitle.Visible	:= TRUE;
	CmnLabel06015TaxGroupTitle.Visible	:= TRUE;
	CmnLabel06013TaxCode      .Visible	:= TRUE;
	CmnLabel06015TaxCode      .Visible	:= TRUE;
	CmnEdit06013TaxCode       .Visible	:= TRUE;
	CmnEdit06015TaxCode       .Visible	:= TRUE;
	CmnLabel06013TaxCodeDesc  .Visible	:= TRUE;
	CmnLabel06015TaxCodeDesc  .Visible	:= TRUE;

	fnChangeConditionTaxRelated (13);
	fnChangeConditionTaxRelated (15);
}


		CmnEdit06013TaxCode.Value	:= 0;
		CmnEdit06015TaxCode.Value	:= 0;
		CmnEdit06014TaxRate.Value	:= 0;
		CmnEdit06016TaxRate.Value	:= 0;

		CmnPanel06013TaxSeparator .Visible	:= FALSE;
		CmnPanel06015TaxSeparator .Visible	:= FALSE;
		CmnLabel06013TaxGroupTitle.Visible	:= FALSE;
		CmnLabel06015TaxGroupTitle.Visible	:= FALSE;
		CmnLabel06013TaxCode      .Visible	:= FALSE;
		CmnLabel06015TaxCode      .Visible	:= FALSE;
		CmnLabel06014TaxRate      .Visible	:= FALSE;
		CmnLabel06016TaxRate      .Visible	:= FALSE;
		CmnEdit06013TaxCode       .Visible	:= FALSE;
		CmnEdit06015TaxCode       .Visible	:= FALSE;
		CmnEdit06014TaxRate       .Visible	:= FALSE;
		CmnEdit06016TaxRate       .Visible	:= FALSE;
		CmnLabel06013TaxCodeDesc  .Visible	:= FALSE;
		CmnLabel06015TaxCodeDesc  .Visible	:= FALSE;
		CmnLabel06014TaxRateDesc  .Visible	:= FALSE;
		CmnLabel06016TaxRateDesc  .Visible	:= FALSE;



end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnChangeConditionToolbarButtons (nSumDivision: Integer; strHojCode: String);
var
    nNCODE : Extended;
begin
	if	(Trim (strHojCode) = '') then
	begin
//		CmnButtonToolbarDetail.Enabled	:= FALSE;
//		CmnButtonToolbarDelete.Enabled	:= FALSE;
//		CmnButtonToolbarTag   .Enabled	:= FALSE;

		Exit;																			// 以下, 未処理
	end;

	if	(m_nCurCodeAttribute <= 1) then
//		strHojCode	:= Format ('%.10d', [StrToInt64 (Trim (strHojCode))]);
		strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

//    nNCODE := 0;
    nNCODE := fnGetNCODE(strHojCode);
	if	(m_nReferMode <> REFER) then													// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照以外
	begin
		if	(fnCheckPermitGeneralRecord (strHojCode)) then								// 諸口
		begin
			if	(fnCheckDeletePermitGeneralRec ()) then
//				CmnButtonToolbarDelete.Enabled	:= TRUE
			else
//				CmnButtonToolbarDelete.Enabled	:= FALSE;
		end
		else																			// 諸口以外
		begin
			if	(nSumDivision = 1) then
			begin
				if	(fnCheckDeletePermitParentRec (nNCode)) then
//					CmnButtonToolbarDelete.Enabled	:= TRUE
				else
//					CmnButtonToolbarDelete.Enabled	:= FALSE;
			end
			else
//				CmnButtonToolbarDelete.Enabled	:= TRUE;
		end;
	end
	else
//		CmnButtonToolbarDelete.Enabled	:= FALSE;

//	if	(fAllowDetail) then
//	begin
//		if	(m_nReferMode <> BASICONLY) then											// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 基本のみ以外
//			CmnButtonToolbarDetail.Enabled	:= TRUE
//		else
//			CmnButtonToolbarDetail.Enabled	:= FALSE;
//	end
//	else
//		CmnButtonToolbarDetail.Enabled	:= FALSE;

	if	(m_nReferMode <> BASICONLY) then												// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 基本のみ以外
//		CmnButtonToolbarDetail.Enabled	:= TRUE
	else
//		CmnButtonToolbarDetail.Enabled	:= FALSE;

	if	(CmnPanelClientDetail.Visible) then
//		CmnButtonToolbarTag.Enabled	:= FALSE
	else
	begin
		if	(m_nReferMode <> REFER) then
//			CmnButtonToolbarTag.Enabled	:= TRUE
		else
//			CmnButtonToolbarTag.Enabled	:= FALSE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckComboBoxValue (nFieldID: Integer): Boolean;
var
	cComboBox: TMComboBox;

begin
	case (Trunc ((nFieldID - 2) mod 4)) of
		0:	cComboBox	:= TMComboBox (MJSFindCtrl (Self, Format (_HolDiv, [nFieldID])));
		2:	cComboBox	:= TMComboBox (MJSFindCtrl (Self, Format (_ExpMon, [nFieldID])));
		else
		begin
			Result	:= TRUE;
			Exit;
		end;
	end;

	fnSetChangeFlagCheckItems (cComboBox, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckDecomposeListBasedValue (): Boolean;
var
	nBasedValue	: Currency;
	nRow		: Integer;
	nRowTarget01: Integer;
	nRowTarget02: Integer;
	nDecompose	: Integer;
	fCheckObject: Boolean;
    nCheckRow   : Integer;      // <149> 2006/10/11 H.Kawato Add

begin
	if	(CmnEdit01001DecDivision.AsInteger <> 0) then									// 分解方法: 0=比率の時のみ
	begin
		Result	:= TRUE;
		Exit;																			// 以下, 未処理
	end;

// <149> 2006/10/11 H.Kawato Add Start
	if	(m_bYusenChange = TRUE) then                    // 優先支払方法変更直後
	begin
        m_bYusenChange  := FALSE;
		Result	:= TRUE;
		Exit;                                           // 以下, 未処理
	end;
// <149> 2006/10/11 H.Kawato Add End

	nRowTarget01	:= 0;
	nRowTarget02	:= 0;
	nDecompose		:= 0;
	nBasedValue		:= 0.00;

	fCheckObject	:= FALSE;

// <149> 2006/10/11 H.Kawato Add Start
    if (CmnEdit01030PriPayWayDivision.Value = 0) then
            nCheckRow   := 1                            // 優先支払方法「なし」の場合
    else    nCheckRow   := 2;                           // 優先支払方法「あり」の場合
// <149> 2006/10/11 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Mod
//	for	nRow := 1 to 5 do
	for	nRow := nCheckRow to 5 do                       // 優先支払方法がある場合、2行目からﾁｪｯｸ
	begin
		if	(TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger <> 0) then
		begin
			nRowTarget02	:= nRow;

			if	(not fCheckObject) then
				fCheckObject	:= TRUE;
		end;

		nDecompose	:= nDecompose  + TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger;
		nBasedValue	:= nBasedValue + TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Value;

		if	((nRowTarget01 = 0) and (nBasedValue > 100.00)) then
			nRowTarget01	:= nRow;
	end;

	if	(not fCheckObject) then															// 支払方法が全てなしの場合
	begin
		Result	:= TRUE;
		Exit;																			// 以下, 未処理
	end;

	if	(nBasedValue > 100.00) then														// 100%を越えている場合ｴﾗｰ
	begin
// <211> MOD-STR
//		CmnTabInformations.Items.Selected	:= 0;
		CmnTabInformations.Items.Selected	:= TI_PAYWAY;
// <211> MOD-END

		Beep ();

		MJSMessageBoxEx (Self,_MessageDec01, 'ｴﾗｰ', mjError, mjOK, mjDefOK);

		m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRowTarget01 - 1) * 5)])));

		Result	:= FALSE;
		Exit;																			// 以下, 未処理
	end;

	if	((nDecompose > 0) and (nBasedValue < 100.00)) then
	begin
// <211> MOD-STR
{// <155> 2007/02/07 H.Kawato Add Start
        if (CmnTabInformations.Items.Selected <> 0) then
        begin
// <155> 2007/02/07 H.Kawato Add End
    		CmnTabInformations.Items.Selected	:= 0;
// <155> 2007/02/07 H.Kawato Add Start}
        if (CmnTabInformations.Items.Selected <> TI_PAYWAY) then
        begin
    		CmnTabInformations.Items.Selected	:= TI_PAYWAY;
// <211> MOD-END
        end
        else
        begin
// <155> 2007/02/07 H.Kawato Add End
    		Beep ();

    		if	(MJSMessageBoxEx (Self,_MessageDec02, '分解基準値自動ｾｯﾄ', mjQuestion, mjYesNo, mjDefYes) = mrYes) then
    		begin
// <149> 2006/10/11 H.Kawato Add Start
//  			if	(nBasedValue = 0.00) then
//  				nRowTarget02	:= 1;
    			if	(nBasedValue = 0.00) then
                begin
                    if (CmnEdit01030PriPayWayDivision.Value = 0) then                       // 優先支払方法なし
        				 nRowTarget02   := 1
                    else nRowTarget02	:= 2;
                end;
// <149> 2006/10/11 H.Kawato Add End

    			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRowTarget02 - 1) * 5)]))).Value	:=
    			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRowTarget02 - 1) * 5)]))).Value + 100.00 - nBasedValue;

    			Result	:= TRUE;
    			Exit;																		// 以下, 未処理
    		end;
        end;    // <155> Add

   		m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRowTarget02 - 1) * 5)])));

		Result	:= FALSE;
		Exit;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckDecomposeListRecord (cNumEdit: TMNumEdit): Integer;
var
	nFieldID	  : Integer;
	nRow		  : Integer;
	nColumn		  : Integer;
	strDescription: String;
	fReturn		  : Boolean;

begin
	fReturn	:= fnGetDescriptionSelectedItem (cNumEdit, strDescription);

	TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= strDescription;

	if	(not fReturn) then
	begin
		m_cACControl	:= cNumEdit;

		Result	:= CHECK_ERROR;
		Exit;
	end;

	nFieldID	:= StrToInt (Copy (cNumEdit.Name, 10, 3));

	if	(cNumEdit.AsInteger = 0) then													// 支払方法: 0=なし
	begin
		if	(nFieldID = 22) then
		begin
			for	nColumn := 2 to 5 do
			begin
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nColumn + 21]))).Value		:= 0;
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nColumn + 21]))).InputFlag	:= TRUE;
			end;

			CmnLabel01026PaymentColumnFractionDesc.Caption	:= '';
			CmnLabelPaymentColumnBasedValue05Unit .Caption	:= '';

			fnSetChangeFlagCheckItems (cNumEdit, FALSE);

			Result	:= CHECK_ESCAPE;
			Exit;
		end;

		if	(TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID + 5]))).AsInteger = 0) then
		begin
			for nColumn := 1 to 4 do
			begin
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn + 1], [nFieldID + nColumn]))).Value		:= 0;
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn + 1], [nFieldID + nColumn]))).InputFlag	:= TRUE;
			end;

			TMLabel (MJSFindCtrl (Self, Format ('CmnLabel01%.3dPaymentColumnFractionDesc', [nFieldID + 4              ]))).Caption	:= '';
			TMLabel (MJSFindCtrl (Self, Format ('CmnLabelPaymentColumnBasedValue%.2dUnit', [Trunc ((nFieldID + 3) / 5)]))).Caption	:= '';

			fnSetChangeFlagCheckItems (cNumEdit, FALSE);

			Result	:= CHECK_ESCAPE;
			Exit;
		end;

		nFieldID	:= nFieldID + 5;													// 次行

		while (TRUE) do
		begin
			if	(nFieldID > 22) then													// 最終行
			begin
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [22]))).Value	:= 0;

				fnGetDescriptionSelectedItem (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [22]))), strDescription);

				CmnLabel01022PaymentColumnDivisionDesc.Caption	:= strDescription;

				for	nColumn := 2 to 5 do
				begin
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nColumn + 21]))).Value		:= 0;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nColumn + 21]))).InputFlag	:= TRUE;
				end;

				CmnLabel01026PaymentColumnFractionDesc.Caption	:= '';
				CmnLabelPaymentColumnBasedValue05Unit .Caption	:= '';

				Break;
			end;

			for	nColumn := 1 to 5 do
			begin
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [(nFieldID + (nColumn - 1)) - 5]))).Value	:=
						TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nFieldID + (nColumn - 1)]))).Value;

				if	((nColumn = 1) or (nColumn = 5)) then								// 支払方法/端数処理方法
				begin
					TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (TMNumEdit (MJSFindCtrl (Self, Format (
						_PayCol [nColumn], [(nFieldID + (nColumn - 1)) - 5]))).Name, 8, 64) + 'Desc')).Caption	:=
								TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (TMNumEdit (MJSFindCtrl (Self, Format (
									_PayCol [nColumn], [nFieldID + (nColumn - 1)]))).Name, 8, 64) + 'Desc')).Caption;
				end;
			end;

			if	(TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [nFieldID - 5]))).Value = 0) then
			begin
				for	nColumn := 2 to 5 do
					TMNumEdit (MJSFindCtrl (Self, Format (
									_PayCol [nColumn], [(nFieldID + (nColumn - 1)) - 5]))).InputFlag	:= TRUE;

				TMLabel (MJSFindCtrl (Self, Format (
						'CmnLabelPaymentColumnBasedValue%.2dUnit', [(nFieldID - 2) div 5]))).Caption	:= '';
			end;

			nFieldID	:= nFieldID + 5;												// 次行
		end;

		if	(Screen.ActiveControl.Name = cNumEdit.Name) then
			cNumEdit.SelectAll ();

		fnSetChangeFlagCheckItems (cNumEdit, FALSE);

		Result	:= CHECK_THROUGH;
		Exit;
	end
	else																				// 支払方法: 0≠なし以外
	begin
		for nRow := 1 to 5 do															// 以前の行に同一の支払方法が有ったらNG
		begin
			if	(((nFieldID + 3) div 5) = nRow) then									// 現在行以前が対象
				Break;

			if	(cNumEdit.Value = TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).Value) then
			begin
				m_cACControl	:= cNumEdit;

				Result	:= CHECK_ERROR;
				Exit;
			end;
		end;

		TMLabel (MJSFindCtrl (Self, Format (
						'CmnLabelPaymentColumnBasedValue%.2dUnit', [(nFieldID + 3) div 5]))).Caption	:= '%';

		for	nColumn := 2 to 4 do
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [nColumn], [nFieldID + (nColumn - 1)]))).InputFlag	:= FALSE;

		if	(TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [nFieldID + 3]))).Value = 0) then
		begin
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 4]))).InputFlag	:= TRUE;

			strDescription	:= '';
		end
		else
		begin
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 4]))).InputFlag	:= FALSE;

			fnGetDescriptionSelectedItem (TMNumEdit (MJSFindCtrl (
													Self, Format (_PayCol [5], [nFieldID + 4]))), strDescription);
		end;

		TMLabel (MJSFindCtrl (Self, Format (
						'CmnLabel01%.3dPaymentColumnFractionDesc', [nFieldID + 4]))).Caption	:= strDescription;

		for	nRow := Trunc ((nFIeldID + 3) div 5) + 1 to 5 do							// 以降の行に同一の支払方法が有ったら入れ換え
		begin
			if	(cNumEdit.Value = TMNumEdit (MJSFindCtrl (
												Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).Value) then
				TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1],
								[2 + ((nRow - 1) * 5)]))).Value	:= m_arDecListRec [Trunc ((nFieldID + 3) div 5)];
		end;
	end;

	fnSaveDecomposeListRecords ();														// 分解方法ｸﾞﾘｯﾄﾞ状態保存

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= CHECK_OK;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckDecomposeListRecords (): Boolean;
var
	nReturn: Integer;
	nRow   : Integer;

begin
	for	nRow := 1 to 5 do
	begin
		nReturn	:= fnCheckDecomposeListRecord (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))));

		if	(nReturn = CHECK_ERROR) then
		begin
			Result	:= FALSE;
			Exit;
		end;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckDeletePermitGeneralRec (): Boolean;
var
	dqMasterData: TMQuery;
	fReturn		: Boolean;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT GCode FROM MTOKUI ');
		SQL.Add   ('WHERE  RDelKbn = 0 AND (SyokuchiKbn = 0 OR NCode IS NULL)');

		Open ();

		if  (not EOF) then
			fReturn	:= FALSE
		else
			fReturn	:= TRUE;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckDeletePermitParentRec (nNCode: Extended): Boolean;
var
	dqMasterData: TMQuery;
	fReturn		: Boolean;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	fReturn	:= TRUE;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT ht.BasedNCode FROM HojyoTree ht, MTOKUI hm ');
		SQL.Add   ('WHERE  ht.MasterKbn = :nMasterDivision AND ');
		SQL.Add   ('       ht.SumNCode = :strHojCode AND  ');
		SQL.Add   ('       hm.SumKbn = 1 and hm.RDelKbn = 0 AND hm.NCode = ht.SumNCode');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat	    := nNCODE;

		Open ();

		if  (not EOF) then
			fReturn	:= FALSE;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue (cControl: TObject; nPosition: Integer): Boolean;
var
//	nItems	: Integer;
	nAreaNo	: Integer;
	nFieldID: Integer;
	nScreen	: Integer;
	nCompID	: Integer;
	fReturn	: Boolean;

begin

	fReturn	:= TRUE;

	if	((cControl <> nil) and ((cControl is TMNumEdit) or (cControl is TMTxtEdit) or (cControl is TMDateEdit))) then
		nCompID	:= Trunc (StrToInt (Copy (TWinControl (cControl).Name, 8, 5)))
	else
		nCompID	:= 0;

	nAreaNo		:= Trunc (PCheckItemRec (m_cCheckItems.Items [nPosition])^.nFieldID / 1000);
	nFieldID	:= Trunc (PCheckItemRec (m_cCheckItems.Items [nPosition])^.nFieldID mod 1000);

	if	((nAreaNo * 1000 + nFieldID) = nCompID) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	case (nAreaNo) of
		0:	fReturn	:= fnCheckEditItemsValue00 (nFieldID);
		1:	fReturn	:= fnCheckEditItemsValue01 (nFieldID);
		2:	fReturn	:= fnCheckEditItemsValue02 (nFieldID);
		3:	fReturn	:= fnCheckEditItemsValue03 (nFieldID);
		4:	fReturn	:= fnCheckEditItemsValue04 (nFieldID);
		5:	fReturn	:= fnCheckEditItemsValue05 (nFieldID);
		6:	fReturn	:= fnCheckEditItemsValue06 (nFieldID);
		7:	fReturn	:= fnCheckEditItemsValue07 (nFieldID);
		8:	fReturn	:= fnCheckEditItemsValue08 (nFieldID);      // <211> ADD
        9:	fReturn	:= fnCheckEditItemsValue09 (nFieldID);      // <222> ADD
    	10:	fReturn	:= fnCheckEditItemsValue10 (nFieldID);      // <222> ADD        
	end;

	if	(not fReturn) then
	begin
		if	(nAreaNo <> 0) then
		begin
// <211> MOD-STR
//			for	nScreen := 0 to 6 do
//			begin
//				if	(nScreen = nAreaNo - 1) then
//					CmnTabInformations.Items [nScreen].Selected	:= TRUE
//				else
//					CmnTabInformations.Items [nScreen].Selected	:= FALSE;
//			end;

            if (nAreaNo = 8) then
                nAreaNo := 4
            else if (nAreaNo = 5) then
            else
                nAreaNo := nAreaNo - 1;

		// <222-9>MOD↓
        //  for	nScreen := TI_PAYWAY to TI_OFFSET do
        //      CmnTabInformations.Items [nScreen].Selected	:= (nScreen = nAreaNo);
        	for nScreen := TI_PAYWAY to CmnTabInformations.Items.Count - 1 do
            begin
            	CmnTabInformations.Items[nScreen].Selected := (CmnTabInformations.Items[nScreen].Visible) and
                                                              (CmnTabInformations.Items[nScreen].Enabled) and
                                                              (nScreen = nAreaNo);
            end;
        // <222-9>MOD↑
// <211> MOD-END
		end;
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue00 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		1:	fReturn	:= fnCheckEditTxtValueHojCode	  (0, nFieldID);					// 取引先ｺｰﾄﾞ
		2:	fReturn	:= fnCheckEditTxtValue			  (0, nFieldID);					// 連想
		3:	fReturn	:= fnCheckEditTxtValueDescription ();								// 正式名称
		4:	fReturn	:= fnCheckEditTxtValue			  (0, nFieldID);					// 簡略名称
		5:	fReturn	:= fnCheckEditNumValueAppDate	  (nFieldID);						// 適用期間(開始)
		6:	fReturn	:= fnCheckEditNumValueAppDate	  (nFieldID);						// 適用期間(終了)
		11:	fReturn	:= fnCheckEditNumValueSelect      (0, nFieldID);					// 査定方法         // <149> 2006/10/11 H.Kawato Add
		12:	fReturn	:= fnCheckEditNumValueSelect      (0, nFieldID);					// 分解パターン     // <149> 2006/10/11 H.Kawato Add
		17:	fReturn	:= fnCheckEditNumValueSelect      (0, nFieldID);					// 査定金額計算区分 // <170> 2007/12/13 H.Kawato Add
        18:	fReturn	:= fnCheckEditNumValueSateiCalcValue    (nFieldID);					// 査定金額計算値   // <170> 2007/12/13 H.Kawato Add
        19: fReturn := fnCheckEditNumValueSelect	  (0, nFieldID);					// 外貨採用区分		// <222> ADD
        20: fReturn := fnCheckEditNumValueSelect	  (0, nFieldID);					// 標準支払方法		// <222> ADD
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue01 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		 1:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// 分解方法
		 2:	fReturn	:= fnCheckDecomposeListRecords		();								// ① 支払方法
		 3:	fReturn	:= fnCheckEditNumValueBasedValue	(nFieldID);						// ① 分解基準値
		 4:	fReturn	:= fnCheckEditNumValue				(1, nFieldID);					// ① 支払最低額
		 5:	fReturn	:= fnCheckEditNumValueFractionPrice	(nFieldID);						// ① 端数処理額
		 6:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// ① 端数処理方法
		 7:	fReturn	:= fnCheckDecomposeListRecords		();								// ② 支払方法
		 8:	fReturn	:= fnCheckEditNumValueBasedValue	(nFieldID);						// ② 分解基準値
		 9:	fReturn	:= fnCheckEditNumValue				(1, nFieldID);					// ② 支払最低額
		10:	fReturn	:= fnCheckEditNumValueFractionPrice	(nFieldID);						// ② 端数処理額
		11:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// ② 端数処理方法
		12:	fReturn	:= fnCheckDecomposeListRecords		();								// ③ 支払方法
		13:	fReturn	:= fnCheckEditNumValueBasedValue	(nFieldID);						// ③ 分解基準値
		14:	fReturn	:= fnCheckEditNumValue				(1, nFieldID);					// ③ 支払最低額
		15:	fReturn	:= fnCheckEditNumValueFractionPrice	(nFieldID);						// ③ 端数処理額
		16:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// ③ 端数処理方法
		17:	fReturn	:= fnCheckDecomposeListRecords		();								// ④ 支払方法
		18:	fReturn	:= fnCheckEditNumValueBasedValue	(nFieldID);						// ④ 分解基準値
		19:	fReturn	:= fnCheckEditNumValue				(1, nFieldID);					// ④ 支払最低額
		20:	fReturn	:= fnCheckEditNumValueFractionPrice	(nFieldID);						// ④ 端数処理額
		21:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// ④ 端数処理方法
		22:	fReturn	:= fnCheckDecomposeListRecords		();								// ⑤ 支払方法
		23:	fReturn	:= fnCheckEditNumValueBasedValue	(nFieldID);						// ⑤ 分解基準値
		24:	fReturn	:= fnCheckEditNumValue				(1, nFieldID);					// ⑤ 支払最低額
		25:	fReturn	:= fnCheckEditNumValueFractionPrice	(nFieldID);						// ⑤ 端数処理額
		26:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// ⑤ 端数処理方法
		27:	fReturn	:= fnCheckEditTxtValue		        (1, nFieldID);					// 受取人名称       <110>
//		28:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// 支払通知書区分   <110>   // <149> 2006/10/11 H.Kawato Del
//		29:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// 査定方法         <133>   // <149> 2006/10/11 H.Kawato Del
		30:	fReturn	:= fnCheckEditNumValueSelect		(1, nFieldID);					// 優先支払方法             // <149> 2006/10/11 H.Kawato Add
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue02 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		 1:	fReturn	:= fnCheckEditNumValueAccountCode (2, nFieldID);					// 振込依頼口座ｺｰﾄﾞ
		 2:	fReturn	:= fnCheckEditNumValueBankCode	  (2, nFieldID);					// 全銀協銀行ｺｰﾄﾞ
		 3:	fReturn	:= fnCheckEditNumValueBranchCode  (2, nFieldID);					// 全銀協支店ｺｰﾄﾞ
		 4:	fReturn	:= fnCheckEditTxtValue			  (2, nFieldID);					// 銀行名称
		 5:	fReturn	:= fnCheckEditTxtValueKanaDesc	  (2, nFieldID);					// ｶﾅ銀行名称
		 6:	fReturn	:= fnCheckEditTxtValue			  (2, nFieldID);					// 支店名称
		 7:	fReturn	:= fnCheckEditTxtValueKanaDesc	  (2, nFieldID);					// ｶﾅ支店名称
		 8:	fReturn	:= fnCheckEditTxtValueKanaDesc	  (2, nFieldID);					// ｶﾅ振込先名称
		 9:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// 預金種別
		10:	fReturn	:= fnCheckEditTxtValueAccountNo	  (2, nFieldID);					// 口座番号
		11:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// FBｾｯﾄ区分
		12:	fReturn	:= fnCheckEditTxtValueVisitorCode (2, nFieldID);					// 顧客ｺｰﾄﾞ1
		13:	fReturn	:= fnCheckEditTxtValueVisitorCode (2, nFieldID);					// 顧客ｺｰﾄﾞ2
		14:	fReturn	:= fnCheckEditTxtValue			  (2, nFieldID);					// EDI情報
		15:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// 手数料負担
		16:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// 手数料計算区分
		17:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// 振込方法
		18:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// 口座自動引落区分   <137> Add
		19:	fReturn	:= fnCheckEditNumValueSelect	  (2, nFieldID);					// 自動引落支払データ <137> Add
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue03 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		 1:	fReturn	:= fnCheckEditNumValueAccountCode (3, nFieldID);					// 振込依頼口座ｺｰﾄﾞ
		 2:	fReturn	:= fnCheckEditNumValueBankCode	  (3, nFieldID);					// 全銀協銀行ｺｰﾄﾞ
		 3:	fReturn	:= fnCheckEditNumValueBranchCode  (3, nFieldID);					// 全銀協支店ｺｰﾄﾞ
		 4:	fReturn	:= fnCheckEditTxtValue			  (3, nFieldID);					// 銀行名称
		 5:	fReturn	:= fnCheckEditTxtValueKanaDesc	  (3, nFieldID);					// ｶﾅ銀行名称
		 6:	fReturn	:= fnCheckEditTxtValue			  (3, nFieldID);					// 支店名称
		 7:	fReturn	:= fnCheckEditTxtValueKanaDesc	  (3, nFieldID);					// ｶﾅ支店名称
		 8:	fReturn	:= fnCheckEditTxtValueKanaDesc	  (3, nFieldID);					// ｶﾅ振込先名称
		 9:	fReturn	:= fnCheckEditNumValueSelect	  (3, nFieldID);					// 預金種別
		10:	fReturn	:= fnCheckEditTxtValueAccountNo	  (3, nFieldID);					// 口座番号
		11:	fReturn	:= fnCheckEditNumValueSelect	  (3, nFieldID);					// FBｾｯﾄ区分
		12:	fReturn	:= fnCheckEditTxtValueVisitorCode (3, nFieldID);					// 顧客ｺｰﾄﾞ1
		13:	fReturn	:= fnCheckEditTxtValueVisitorCode (3, nFieldID);					// 顧客ｺｰﾄﾞ2
		14:	fReturn	:= fnCheckEditTxtValue			  (3, nFieldID);					// EDI情報
		15:	fReturn	:= fnCheckEditNumValueSelect	  (3, nFieldID);					// 手数料負担
		16:	fReturn	:= fnCheckEditNumValueSelect	  (3, nFieldID);					// 手数料計算区分
		17:	fReturn	:= fnCheckEditNumValueSelect	  (3, nFieldID);					// 振込方法
		18:	fReturn	:= fnCheckEditNumValue			  (3, nFieldID);					// 振込ｻｲﾄ
		20:	fReturn	:= fnCheckEditNumValueSelect	  (3, nFieldID);					// 期日前支払区分 <197> ADD
		21:	fReturn	:= fnCheckEditNumValueAccountCode (3, nFieldID);					// 期日振込依頼口座ｺｰﾄﾞ <220> ADD
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue04 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		1:	fReturn	:= fnCheckEditNumValueAccountCode  (4, nFieldID);					// 依頼口座ｺｰﾄﾞ
		2:	fReturn	:= fnCheckEditNumValue			   (4, nFieldID);					// 手形ｻｲﾄ
		3:	fReturn	:= fnCheckEditNumValueDivideSheets ();								// 手形分割枚数
		4:	fReturn	:= fnCheckEditNumValueSelect	   (4, nFieldID);					// 手形郵送区分
		5:	fReturn	:= fnCheckEditNumValueSelect	   (4, nFieldID);					// 郵送料負担区分
        // 電子記録債権情報
		6:	fReturn	:= fnCheckEditNumValueSelect	   (4, nFieldID);					// 採用区分区分
		7:	fReturn	:= fnCheckEditNumValueBankCode	   (4, nFieldID);					// 全銀協銀行ｺｰﾄﾞ
		8:	fReturn	:= fnCheckEditNumValueBranchCode   (4, nFieldID);					// 全銀協支店ｺｰﾄﾞ
		9:	fReturn	:= fnCheckEditTxtValue			   (4, nFieldID);					// 銀行名称
	   10:	fReturn	:= fnCheckEditTxtValueKanaDesc	   (4, nFieldID);					// ｶﾅ銀行名称
	   11:	fReturn	:= fnCheckEditTxtValue			   (4, nFieldID);					// 支店名称
	   12:	fReturn	:= fnCheckEditTxtValueKanaDesc	   (4, nFieldID);					// ｶﾅ支店名称
	   13:	fReturn	:= fnCheckEditTxtValueKanaDesc	   (4, nFieldID);					// ｶﾅ振込先名称
	   14:	fReturn	:= fnCheckEditNumValueSelect	   (4, nFieldID);					// 預金種別
	   15:	fReturn	:= fnCheckEditTxtValueAccountNo	   (4, nFieldID);					// 口座番号
	   16:	fReturn	:= fnCheckEditNumValueSelect	   (4, nFieldID);					// 手数料負担
	   17:	fReturn	:= fnCheckEditNumValueSelect	   (4, nFieldID);					// 手数料計算区分
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue05 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

    m_bSousaiChange := TRUE;    // <152> 2006/12/18 H.Kawato Add

	case (nFieldID) of
		1:	fReturn	:= fnCheckEditNumValueSeqNo		();									// 相殺№
		2:	fReturn	:= fnCheckEditNumValueKmkCode	();									// 勘定科目ｺｰﾄﾞ
		3:	fReturn	:= fnCheckEditTxtValueHojCodeEx	(nFieldID);							// 補助ｺｰﾄﾞ1
		4:	fReturn	:= fnCheckEditTxtValueHojCodeEx	(nFieldID);							// 補助ｺｰﾄﾞ2
		5:	fReturn	:= fnCheckEditTxtValueHojCodeEx	(nFieldID);							// 補助ｺｰﾄﾞ3
		6:	fReturn	:= fnCheckEditNumValueSelect	(5, nFieldID);						// 消費税ｺｰﾄﾞ
		7:	fReturn	:= fnCheckEditNumValueSelect	(5, nFieldID);						// 消費税率ｺｰﾄﾞ
		8:	fReturn	:= fnCheckEditNumValue			(5, nFieldID);						// 相殺金額
	end;

    m_bSousaiChange := FALSE;   // <152> 2006/12/18 H.Kawato Add

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue06 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		 1:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 取引先分類
		 2:	fReturn	:= fnCheckEditTxtValueHojCode (6, nFieldID);						// 名寄せ親代替取引先
		 3:	fReturn	:= fnCheckEditTxtValue		  (6, nFieldID);						// 受取人名称
		 4:	fReturn	:= fnCheckEditNumValue		  (6, nFieldID);						// 郵便番号(基番)
		 5:	fReturn	:= fnCheckEditNumValueZipCode ();									// 郵便番号(枝番)
		 6:	fReturn	:= fnCheckEditTxtValue		  (6, nFieldID);						// 住所(上段)
		 7:	fReturn	:= fnCheckEditTxtValue		  (6, nFieldID);						// 住所(下段)
		 8:	fReturn	:= fnCheckEditTxtValue		  (6, nFieldID);						// 電話番号
		 9:	fReturn	:= fnCheckEditTxtValue		  (6, nFieldID);						// 送付先部署
		10:	fReturn	:= fnCheckEditTxtValue		  (6, nFieldID);						// 担当者
		11:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 敬称区分
		12:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 支払通知書区分
		13:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 売上消費税ｺｰﾄﾞ
		14:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 売上消費税率ｺｰﾄﾞ
		15:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 仕入消費税ｺｰﾄﾞ
		16:	fReturn	:= fnCheckEditNumValueSelect  (6, nFieldID);						// 仕入消費税率ｺｰﾄﾞ
	end;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValue07 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		 1:	fReturn	:= fnCheckEditNumValueFundCode	 (nFieldID);						// 借方資金繰ｺｰﾄﾞ
		 2:	fReturn	:= fnCheckEditNumValueFundCode	 (nFieldID);						// 貸方資金繰ｺｰﾄﾞ
		 3:	fReturn	:= fnCheckEditNumValueClosingDay (nFieldID);						// 支払予定日: ① 締日
		 4:	fReturn	:= fnCheckComboBoxValue			 (nFieldID);						// 支払予定日: ① 予定月
		 5:	fReturn	:= fnCheckEditnumValueExpectDay	 (nFieldID);						// 支払予定日: ① 予定日
		 6:	fReturn	:= fnCheckComboBoxValue			 (nFieldID);						// 支払予定日: ① 休日
		 7:	fReturn	:= fnCheckEditNumValueClosingDay (nFieldID);						// 支払予定日: ② 締日
		 8:	fReturn	:= fnCheckComboBoxValue			 (nFieldID);						// 支払予定日: ② 予定月
		 9:	fReturn	:= fnCheckEditNumValueExpectDay	 (nFieldID);						// 支払予定日: ② 予定日
		10:	fReturn	:= fnCheckComboBoxValue			 (nFieldID);						// 支払予定日: ② 休日
		11:	fReturn	:= fnCheckEditNumValueClosingDay (nFieldID);						// 支払予定日: ③ 締日
		12:	fReturn	:= fnCheckComboBoxValue			 (nFieldID);						// 支払予定日: ③ 予定月
		13:	fReturn	:= fnCheckEditNumValueExpectDay	 (nFieldID);						// 支払予定日: ③ 予定日
		14:	fReturn	:= fnCheckComboBoxValue			 (nFieldID);						// 支払予定日: ③ 休日
	end;

	Result	:= fReturn;
end;

// <222> ADD start
//*****************************************************************************
//	Process			:	電信送金情報タブの入力チェック
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	nFieldID	: パーツのID
//	Return			:	Boolean		: チェックOK/NG
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnCheckEditItemsValue09 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		1:	fReturn	:= fnCheckEditNumValueAccountCode  (9, nFieldID);					// 依頼口座ｺｰﾄﾞ
		2:	fReturn	:= fnCheckEditNumValueAccountCode  (9, nFieldID);					// 手数料口座ｺｰﾄﾞ
		3:	fReturn	:= fnCheckEditNumValueSelect	   (9, nFieldID);					// 手数料負担区分
		4:	fReturn	:= fnCheckEditNumValueSelect	   (9, nFieldID);					// 手数料計算区分
        6:	fReturn := fnCheckEditTxtValue			   (9, nFieldID);					// 取引先照会番号<222-8>ADD
        7:	fReturn	:= fnCheckEditNumValue			   (9, nFieldID);					// 送金目的NO	 <222-8>ADD
		8:	fReturn := fnCheckEditTxtValue			   (9, nFieldID);					// 送金目的内容	 <222-8>ADD
		9:	fReturn := fnCheckEditTxtValue			   (9, nFieldID);					// 送金許可NO	 <222-8>ADD
       10:	fReturn	:= fnCheckEditDateValue			   (9, nFieldID);					// 送金許可日付	 <222-8>ADD	
	end;

	Result	:= fReturn;
end;

//*****************************************************************************
//	Process			:	為替手形／送金小切手情報タブの入力チェック
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	nFieldID	: パーツのID
//	Return			:	Boolean		: チェックOK/NG
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnCheckEditItemsValue10 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		1:	fReturn	:= fnCheckEditNumValueAccountCode  (10, nFieldID);					// 支払口座ｺｰﾄﾞ
		2:	fReturn	:= fnCheckEditNumValueAccountCode  (10, nFieldID);					// 依頼口座ｺｰﾄﾞ
		3:	fReturn	:= fnCheckEditNumValueAccountCode  (10, nFieldID);					// 手数料口座ｺｰﾄﾞ
        4:	fReturn	:= fnCheckEditNumValue			   (10, nFieldID);					// 送金目的NO	 <222-8>ADD
		5:	fReturn := fnCheckEditTxtValue			   (10, nFieldID);					// 送金目的内容	 <222-8>ADD
		6:	fReturn := fnCheckEditTxtValue			   (10, nFieldID);					// 送金許可NO	 <222-8>ADD
        7:	fReturn	:= fnCheckEditDateValue			   (10, nFieldID);					// 送金許可日付	 <222-8>ADD
	end;

	Result	:= fReturn;
end;
// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditItemsValues (cControl: TObject): Boolean;
var
	nItems	: Integer;

begin
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		if	(not PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck) then
			Continue;

		if	(not fnCheckEditItemsValue (cControl, nItems)) then
		begin
			Result	:= FALSE;
			Exit;
		end;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValue (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cNumEdit: TMNumEdit;

begin
	cNumEdit	:= nil;

	case (nAreaNo) of
		1:	begin
				case (nFieldID) of
					4, 9, 14, 19, 24:													// 支払最低額
						cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [3], [nFieldID])));
				end;
			end;
		3:	begin																		// 期日指定振込情報
				case (nFieldID) of
					18:	cNumEdit	:= CmnEdit03018PaySight;							// 振込ｻｲﾄ
				end;
			end;
		4:	begin																		// 手形/小切手情報
				case (nFieldID) of
					2:	cNumEdit	:= CmnEdit04002PaySight;							// 手形ｻｲﾄ
				end;
			end;
		5:	begin																		// 相殺情報
				case (nFieldID) of
					8:	cNumEdit	:= CmnEdit05008OffsetPrice;							// 相殺金額
				end;
			end;
		6:	begin																		// その他情報1
				case (nFieldID) of
					4:	cNumEdit	:= CmnEdit06004ZipCodeUpper;						// 郵便番号(基番)
					5:	cNumEdit	:= CmnEdit06005ZipCodeLower;						// 郵便番号(枝番)
				end;
			end;
	end;

	if	(cNumEdit = nil) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueAccountCode (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cNumEdit	: TMNumEdit;
	pPayInfoData: ^PayInfoData;
	fReturn		: Boolean;
begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dAccountCode', [nAreaNo, nFieldID])));

	New (pPayInfoData);

	if	(cNumEdit.InputFlag) then
		pPayInfoData^.nAccountCode	:= -1
	else
		pPayInfoData^.nAccountCode	:= cNumEdit.AsInteger;

	fReturn	:= fnCheckValidAccountCode (pPayInfoData);

	TMLabel (MJSFindCtrl (Self, Format (
			'CmnLabel%.2d%.3dAccountCodeDesc', [nAreaNo, nFieldID]))).Caption	:= pPayInfoData^.strAccountName;

    if not ((nAreaNo = 3) and (nFieldID = 21)) then     // 期日振込依頼口座以外 <220> ADD
    	fnSetCommissionCalculateDivision (nAreaNo, pPayInfoData);

	Dispose (pPayInfoData);

    fnGetFreeInfoFromApgFile();                             // フリー項目情報取得 <217> ADD

	if	(not fReturn) then
	begin
		m_cACControl	:= cNumEdit;

		Result	:= FALSE;
		Exit;
	end;

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueAppDate (nFieldID: Integer): Boolean;
var
	cDateEdit  : TMDateEdit;
//	cMessageRec: TMJSMsgRec;

begin
	case (nFieldID) of
		5:	cDateEdit	:= CmnEdit00005AppDateStart;									// 適用期間(開始)
		6:	cDateEdit	:= CmnEdit00006AppDateEnd;										// 適用期間(終了)
		else
		begin
			Result	:= TRUE;
			Exit;
		end;
	end;

	if	(cDateEdit.Value > 0) then
	begin
// <#NGEN> Mod St
//		if	(not MJSDateCtrl.MjsIntYMDChk (cDateEdit.Value)) then
		if	(not MJSDateCtrl.MjsIntYMDChk (cDateEdit.AsIntYM)) then
// <#NGEN> Mod Ed
		begin
//			m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 15);

//			MJSMessageBoxEx ('日付' + cMessageRec.sMsg, cMessageRec.sTitle,
//							cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

			m_cACControl	:= cDateEdit;

			Result	:= FALSE;
			Exit;
		end;
	end;

	if	(nFieldID = 6) then																// 適用期間(終了)
	begin
// <#NGEN> Mod St
//		if	(CmnEdit00005AppDateStart.Value > cDateEdit.Value) then
		if	(CmnEdit00005AppDateStart.AsIntYM > cDateEdit.AsIntYM) then
// <#NGEN> Mod Ed
		begin
//			m_cComArea.m_MsgStd.GetMsg (cMessageRec, 30, 15);

//			MJSMessageBoxEx ('日付' + cMessageRec.sMsg, cMessageRec.sTitle,
//							cMessageRec.icontype, cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

			m_cACControl	:= cDateEdit;

			Result	:= FALSE;
			Exit;
		end;
	end;

	fnSetChangeFlagCheckItems (cDateEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueBankCode (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	pPayInfoData  : ^PayInfoData;
	nBankCode	  : Integer;
	strDescription: String;
	strKanaDesc	  : String;
	fReturn		  : Boolean;

	iBaseIndex    : Integer;		// <211> ADD

begin
    m_BankErrFlag   := False;   //<127>
	strDescription	:= '';
	strKanaDesc		:= '';

// <211> ADD-STR
    // 銀行コードを基準とした位置を取得
    if (nAreaNo in [2, 3]) then
    	iBaseIndex := 0
    else
    	iBaseIndex := 5;
// <211> ADD-END

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode', [nAreaNo, nFieldID])));

	if	(cNumEdit.InputFlag) then
		nBankCode	:= -1
	else
		nBankCode	:= cNumEdit.AsInteger;

// <211> MOD-STR
{   if nBankCode = -1 then
        TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).InputFlag := True;

	fReturn	:= fnCheckValidBankCode (nBankCode, strDescription, strKanaDesc);

    //<127>名称及びｶﾅ名称の初期化
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankName'    , [nAreaNo, 4]))).Clear;
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana', [nAreaNo, 5]))).Clear;
    TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, 6]))).Clear;
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, 7]))).Clear;

    //<127>支店ｺｰﾄﾞ初期化
    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Value := 0;
    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3]))).Clear;

	if	(fReturn) then
	begin
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankName'    , [nAreaNo, 4]))).Text	:= strDescription;
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana', [nAreaNo, 5]))).Text	:= strKanaDesc;
	end;}
    if nBankCode = -1 then
        TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).InputFlag := True;

	fReturn	:= fnCheckValidBankCode (nBankCode, strDescription, strKanaDesc);

    //<127>名称及びｶﾅ名称の初期化
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankName'    , [nAreaNo, iBaseIndex + 4]))).Clear;
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana', [nAreaNo, iBaseIndex + 5]))).Clear;
    TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, iBaseIndex + 6]))).Clear;
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, iBaseIndex + 7]))).Clear;

    //<127>支店ｺｰﾄﾞ初期化
    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).Value := 0;
    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, iBaseIndex + 3]))).Clear;

	if	(fReturn) then
	begin
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankName'    , [nAreaNo, iBaseIndex + 4]))).Text	:= strDescription;
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana', [nAreaNo, iBaseIndex + 5]))).Text	:= strKanaDesc;
	end;
// <211> MOD-END

    //<127> Add--St
	if	(not fReturn) then
	begin
		m_cACControl	:= cNumEdit;
        m_BankErrFlag   := True;
		Result	:= FALSE;
		Exit;
	end;
    //<127> Add--Ed

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

// <211> ADD-STR
    if (nAreaNo = 4) then
    begin
        // 手形(電子債権)の場合、手数料計算区分のセットは不要なので抜ける
    	Result	:= TRUE;
        Exit;
    end;
// <211> ADD-END

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dAccountCode', [nAreaNo, 1])));

	New (pPayInfoData);

	if	(cNumEdit.InputFlag) then
		pPayInfoData^.nAccountCode	:= -1
	else
		pPayInfoData^.nAccountCode	:= cNumEdit.AsInteger;

	fnCheckValidAccountCode (pPayInfoData);

	fnSetCommissionCalculateDivision (nAreaNo, pPayInfoData);

	Dispose (pPayInfoData);

    m_BankErrFlag   := False;   //<127>

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueBranchCode (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	pPayInfoData  : ^PayInfoData;
	nBankCode	  : Integer;
	nBranchCode	  : Integer;
	strDescription: String;
	strKanaDesc	  : String;
	fReturn		  : Boolean;

	iBaseIndex    : Integer;		// <211> ADD

begin
	strDescription	:= '';
	strKanaDesc		:= '';

    //<127>
    if (m_BankErrFlag) then
    begin
        Result := True;
        Exit;
    end;

// <211> ADD-STR
    // 銀行コードを基準とした位置を取得
    if (nAreaNo in [2, 3]) then
    	iBaseIndex := 0
    else
    	iBaseIndex := 5;
// <211> ADD-END

// <211> MOD-STR
//	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode', [nAreaNo, 2])));
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode', [nAreaNo, iBaseIndex + 2])));
// <211> MOD-END

	if	(cNumEdit.InputFlag) then
		nBankCode	:= -1
	else
		nBankCode	:= cNumEdit.AsInteger;

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, nFieldID])));

	if	(cNumEdit.InputFlag) then
		nBranchCode	:= -1
	else
		nBranchCode	:= cNumEdit.AsInteger;


// <SCA> MOD-STR
//	fReturn	:= fnCheckValidBranchCode (nBankCode, nBranchCode, strDescription, strKanaDesc);
	fReturn	:= fnCheckValidBranchCode (nBankCode, nBranchCode, strDescription, strKanaDesc, nAreaNo);
// <SCA> MOD-END

// <211> MOD-STR
{   //<127>名称及びｶﾅ名称の初期化
    TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, 6]))).Clear;
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, 7]))).Clear;

	if	(fReturn) then
	begin
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, 6]))).Text	:= strDescription;
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, 7]))).Text	:= strKanaDesc;
	end;}
    // 名称及びｶﾅ名称の初期化
    TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, iBaseIndex + 6]))).Clear;
	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, iBaseIndex + 7]))).Clear;

	if	(fReturn) then
	begin
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName'    , [nAreaNo, iBaseIndex + 6]))).Text	:= strDescription;
		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana', [nAreaNo, iBaseIndex + 7]))).Text	:= strKanaDesc;
	end;
// <211> MOD-END

    //<127> Add--St
	if	(not fReturn) then
	begin
		m_cACControl	:= cNumEdit;

		Result	:= FALSE;
		Exit;
	end;
    //<127> Add--Ed

  	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

// <211> ADD-STR
    if (nAreaNo = 4) then
    begin
        // 手形(電子債権)の場合、手数料計算区分のセットは不要なので抜ける
    	Result	:= TRUE;
        Exit;
    end;
// <211> ADD-END

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dAccountCode', [nAreaNo, 1])));

	New (pPayInfoData);

	if	(cNumEdit.InputFlag) then
		pPayInfoData^.nAccountCode	:= -1
	else
		pPayInfoData^.nAccountCode	:= cNumEdit.AsInteger;

	fnCheckValidAccountCode (pPayInfoData);

	fnSetCommissionCalculateDivision (nAreaNo, pPayInfoData);

	Dispose (pPayInfoData);

	Result	:= TRUE;
end;

// <170> 2007/12/13 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueSateiCalcValue (nFieldID: Integer): Boolean;
begin
	if	(CmnEdit00017SateiCalcKbn.AsInteger = 1) then                                   // 査定金額計算: 1=比率
	begin
		if	(CmnEdit00018SateiCalcValue.Value > 100) then                               // 100%を越えている場合ｴﾗｰ
		begin
			Beep ();
			m_cACControl	:= CmnEdit00018SateiCalcValue;
			Result	:= FALSE;
			Exit;
		end;
	end;

	fnSetChangeFlagCheckItems (CmnEdit00018SateiCalcValue, FALSE);

	Result	:= TRUE;
end;
// <170> 2007/12/13 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueBasedValue (nFieldID: Integer): Boolean;
var
	nBasedValue: Extended;

begin
	if	(CmnEdit01001DecDivision.AsInteger = 0) then									// 分解方法: 0=比率
	begin
		nBasedValue	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [nFieldID]))).Value;

		if	(nBasedValue > 100) then													// 100%を越えている場合ｴﾗｰ
		begin
			Beep ();

			MJSMessageBoxEx (Self,_MessageDec01, 'ｴﾗｰ', mjError, mjOK, mjDefOK);

			m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [nFieldID])));

			Result	:= FALSE;
			Exit;
		end;
	end;

	fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [nFieldID]))), FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueClosingDay (nFieldID: Integer): Boolean;
var
	cNumEdit: TMNumEdit;

begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [nFieldID])));

	if	(cNumEdit.AsInteger > 31) then
	begin
		m_cACControl	:= cNumEdit;

		Result	:= FALSE;
		Exit;
	end;

	fnChangeConditionPayExpect (nFieldID);

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueDivideSheets (): Boolean;
begin
//	if	(CmnEdit04003DivSheets.AsInteger > fnGetBaseInfoValueDivideSheets ()) then
//	begin
//		MJSMessageBoxEx ('基本情報登録で設定した枚数を超えています。', 'ｴﾗｰ', mjError, mjOK, mjDefOK);

//		m_cACControl	:= CmnEdit04003DivSheets;

//		Result	:= FALSE;
//		Exit;
//	end;

	fnSetChangeFlagCheckItems (CmnEdit04003DivSheets, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueExpectDay (nFieldID: Integer): Boolean;
var
	cNumEdit: TMNumEdit;

begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format (_ExpDay, [nFieldID])));

	if	((cNumEdit.AsInteger < 1) or (cNumEdit.AsInteger > 31)) then
	begin
		m_cACControl	:= cNumEdit;

		Result	:= FALSE;
		Exit;
	end;

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueFractionPrice (nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	nFigure		  : Int64;
	nCount		  : Integer;
	strDescription: String;

begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [nFieldID])));

	if	(cNumEdit.Value = 0) then														// 端数処理額=0円
	begin
		TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).Value		:= 0;
		TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).InputFlag	:= TRUE;
		TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).Enabled	:= FALSE;

		TMLabel (MJSFindCtrl (Self, Format ('CmnLabel01%.3dPaymentColumnFractionDesc', [nFieldID + 1]))).Caption	:= '';
	end
	else
	begin
		TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).Enabled	:= TRUE;

		if	(not ((TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).Value >= 0) and
				  (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).Value <= 2))) then
			TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).Value	:= 0;

		TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))).InputFlag	:= FALSE;

		fnGetDescriptionSelectedItem (TMNumEdit (
									MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID + 1]))), strDescription);

		TMLabel (MJSFindCtrl (Self, Format (
						'CmnLabel01%.3dPaymentColumnFractionDesc', [nFieldID + 1]))).Caption	:= strDescription;

		nFigure	:= 10;

		for	nCount := 2 to StrLen (PChar (IntToStr (Trunc (cNumEdit.Value)))) - 1 do
			nFigure	:= nFigure * 10;

		if	((Trunc (cNumEdit.Value) mod nFigure) <> 0) then
		begin
			m_cACControl	:= cNumEdit;

			Result	:= FALSE;
			Exit;
		end;
	end;

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueFundCode (nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	strDescription: String;
	fReturn		  : Boolean;

begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit07%.3dFundCode', [nFieldID])));

	if	(cNumEdit.Value = 0) then
	begin
		fReturn	:= TRUE;

		strDescription	:= '科目に従う';
	end
	else
		fReturn	:= fnCheckValidFundCode (cNumEdit, strDescription);

	TMLabel (MJSFindCtrl (Self, Format ('CmnLabel07%.3dFundCodeDesc', [nFieldID]))).Caption	:= strDescription;

	if	(not fReturn) then
	begin
		m_cACControl	:= cNumEdit;

		Result	:= FALSE;
		Exit;
	end;

	fnSetChangeFlagCheckItems (cNumEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueKmkCode (): Boolean;
var
	strDescription: String;
	fReturn		  : Boolean;
    nCode         : Extended;
begin

//  0入力許可
    if CmnEdit05002KmkCode.Value = 0 then
//<175> Mod
//        fReturn := True
	begin
		fReturn := True;
		nCode	:= 0;        
	end
//<175> Mod
    else
    	fReturn	:= fnCheckValidKmkCodeG (CmnEdit05002KmkCode.AsInteger, nCode,strDescription);

	m_dSousaiNCode[0]				:= nCode;				//<175> Add
	CmnEdit05002KmkCodeDesc.Text	:= strDescription;

	if	(not fReturn) then
	begin
		m_cACControl	:= CmnEdit05002KmkCode;

		Result	:= FALSE;
		Exit;
	end;

	fnSetAttributeOffsetJournalInfo (CmnEdit05002KmkCode.AsInteger);

	fnSetChangeFlagCheckItems (CmnEdit05002KmkCode, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueSelect (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	strDescription: String;
	fReturn		  : Boolean;

begin
	cNumEdit	:= nil;

	case (nAreaNo) of
// <149> 2006/10/11 H.Kawato Add Start
		0:	begin																		// 支払情報
				case (nFieldID) of
                    11:	cNumEdit	:= CmnEdit00011AssDivision;                         // 査定方法
					12:	cNumEdit	:= CmnEdit00012DecPtnDivision;                      // 分解パターン
                    17:	cNumEdit	:= CmnEdit00017SateiCalcKbn;                        // 査定金額計算 <170> Add
                    19:	cNumEdit	:= CmnEdit00019GaikaUse;							// 外貨採用区分 <222> ADD
                    20:	cNumEdit	:= CmnEdit00020BasePayment;							// 標準支払方法 <222> ADD                    
				end;
			end;
// <149> 2006/10/11 H.Kawato Add End
		1:	begin																		// 支払情報
				case (nFieldID) of
					 1:	cNumEdit	:= CmnEdit01001DecDivision;
					 6, 11, 16, 21, 26:													// ① 端数処理方法
						cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [nFieldID])));
//					28:	cNumEdit	:= CmnEdit01028PasDivision;							// 支払通知書区分 <110> // <149> 2006/10/11 H.Kawato Del
//					29:	cNumEdit	:= CmnEdit01029AssDivision;							// 査定方法       <133> // <149> 2006/10/11 H.Kawato Del
					30:	cNumEdit	:= CmnEdit01030PriPayWayDivision;					// 優先支払方法   <133> // <149> 2006/10/11 H.Kawato Add
				end;
			end;
		2, 3:																			// 振込情報･期日指定振込情報
			begin
				case (nFieldID) of
					 9:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dDepDivision'   , [nAreaNo, nFieldID])));
					11:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dFBDivision'    , [nAreaNo, nFieldID])));
					15:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dComDivision'   , [nAreaNo, nFieldID])));
					16:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dComCalculation', [nAreaNo, nFieldID])));
					17:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dPayDivision'   , [nAreaNo, nFieldID])));
// <137> 2006/06/28 H.Kawato Add Start
					18:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dDebitDivision' , [nAreaNo, nFieldID])));
                    19:
                    begin
                        cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dDebitData'     , [nAreaNo, nFieldID])));

// <179> Mod Start
//                        if  (CmnEdit02019DebitData.Value < 1) or
//                            (CmnEdit02019DebitData.Value > m_iHeikouCount) then
//                        begin
//                            m_cACControl := cNumEdit;
//                            Result       := False;
//                        end
//                        else
//                            Result       := True;
                        if m_iHeikouData = 0 then
                        begin
                            Result       := True;
                        end
                        else
                        begin
                            // <200> Mod start
                            //if  (CmnEdit02019DebitData.Value < 1) or
                            //    (CmnEdit02019DebitData.Value > m_iHeikouCount) then
                            if (CmnEdit02019DebitData.Value > m_iHeikouCount) or  ( 0 > CmnEdit02019DebitData.Value) then
                            // <200> Mod end
                            begin
                                m_cACControl := cNumEdit;
                                Result       := False;
                            end
                            else
                                Result       := True;
                        end;
// <179> Mod End

                        Exit;
                    end;
// <137> 2006/06/28 H.Kawato Add End
					20:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBeforeLimit' , [nAreaNo, nFieldID]))); // <197> ADD
				end;
			end;
		4:	begin																		// 手形/小切手情報
				case (nFieldID) of
// <211> MOD-STR
//					4, 7:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dPosDivision', [nAreaNo, nFieldID])));
//					5, 8:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBurDivision', [nAreaNo, nFieldID])));
					 4:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dPosDivision'   , [nAreaNo, nFieldID])));
					 5:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBurDivision'   , [nAreaNo, nFieldID])));
					 6:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dERKbn'         , [nAreaNo, nFieldID])));
					14:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dDepDivision'   , [nAreaNo, nFieldID])));
					15:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dFBDivision'    , [nAreaNo, nFieldID])));
					16:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dComDivision'   , [nAreaNo, nFieldID])));
					17:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dComCalculation', [nAreaNo, nFieldID])));
// <211> MOD-END
				end;
			end;
		5:	begin																		// 相殺情報
				case (nFieldID) of
					 6:	cNumEdit	:= CmnEdit05006TaxCode;								// 消費税ｺｰﾄﾞ
					 7:	cNumEdit	:= CmnEdit05007TaxRate;								// 消費税率ｺｰﾄﾞ
				end;
			end;
		6:	begin																		// その他情報1
				case (nFieldID) of
					 1:	cNumEdit	:= CmnEdit06001ClassCode;							// 取引先分類
//					11:	cNumEdit	:= CmnEdit06011ResDivision;							// 敬称区分
// <110>					12:	cNumEdit	:= CmnEdit06012PasDivision;							// 支払通知書区分
					13:	cNumEdit	:= CmnEdit06013TaxCode;								// 売上消費税ｺｰﾄﾞ
					14:	cNumEdit	:= CmnEdit06014TaxRate;								// 売上消費税率ｺｰﾄﾞ
					15:	cNumEdit	:= CmnEdit06015TaxCode;								// 仕入消費税ｺｰﾄﾞ
					16:	cNumEdit	:= CmnEdit06016TaxRate;								// 仕入消費税率ｺｰﾄﾞ
				end;
			end;
// <211> ADD-STR
		8:	begin																		// 手形/小切手情報
				case (nFieldID) of
					2:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dPosDivision', [nAreaNo, nFieldID])));
					3:	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBurDivision', [nAreaNo, nFieldID])));
				end;
			end;
// <211> ADD-END
// <222> ADD start
		9:	begin																		// 電信送金情報
				case (nFieldID) of
					 3:	cNumEdit	:= CmnEdit09003ComDivision;							// 手数料負担
					 4:	cNumEdit	:= CmnEdit09004ComCalculation;						// 手数料計算区分
                     7: cNumEdit	:= CmnEdit09007PayHeadingNo;						// 送金目的NO<222-8>ADD
				end;
			end;
// <222> ADD end
	end;

	if	(cNumEdit = nil) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	fReturn	:= fnGetDescriptionSelectedItem (cNumEdit, strDescription);

// <#TAX10> MOD-STR
//	if	((nAreaNo * 1000 + nFieldID = 5006) or (nAreaNo * 1000 + nFieldID = 5007)) then
	if      (nAreaNo * 1000 + nFieldID = 5006) then
// <#TAX10> MOD-END
	begin
		if	(not cNumEdit.InputFlag) then
			TMTxtEdit (MJSFindCtrl (Self, Copy (cNumEdit.Name, 1, 64) + 'Desc')).Text	:= strDescription;
	end
// <#TAX10> ADD-STR
	else if (nAreaNo * 1000 + nFieldID = 5007) then
	begin
		if (not cNumEdit.InputFlag) then
		begin
			TMTxtEdit(MJSFindCtrl(Self, Copy(cNumEdit.Name, 1, 64) + 'Desc')).Text := fnGetTaxRateName(CmnEdit05007TaxRate.AsInteger);
		end;
	end
// <#TAX10> ADD-END
	else
	begin
		if	((nAreaNo * 1000 + nFieldID = 1006) or										// 端数処理方法: 1行目
			 (nAreaNo * 1000 + nFieldID = 1011) or										// 端数処理方法: 2行目
			 (nAreaNo * 1000 + nFieldID = 1016) or										// 端数処理方法: 3行目
			 (nAreaNo * 1000 + nFieldID = 1021) or										// 端数処理方法: 4行目
			 (nAreaNo * 1000 + nFieldID = 1026)) then									// 端数処理方法: 5行目
		begin
			if	(cNumEdit.Enabled and (not cNumEdit.InputFlag)) then
				TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= strDescription;
		end
		else
			TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= strDescription;

// <156> 2007/02/09 H.Kawato Add Start
        if (m_iProAdoptKbn > 1) then                                                    // プロジェクト別支払採用あり
        begin
            if  (nAreaNo * 1000 + nFieldID = 0011) or                                   // 査定方法
                (nAreaNo * 1000 + nFieldID = 0012) then                                 // 分解パターン
            begin
                if  (CmnEdit00011AssDivision.Text = '1') and                            // 査定方法 「1:全体」
                    ((CmnEdit00012DecPtnDivision.Text = '1') or                         // 分解ﾊﾟﾀｰﾝ「1:プロジェクト別」
                     (CmnEdit00012DecPtnDivision.Text = '2')) then                      // 分解ﾊﾟﾀｰﾝ「1:プロジェクトサブ別」
                    fReturn := False;
            end;
        end;
// <156> 2007/02/09 H.Kawato Add End
	end;

	case (nAreaNo * 1000 + nFieldID) of
		  17:	fnChangeConditionSateiCalc  ();											// 査定金額計算区分 <170>
		1001:	fnChangeConditionPayment	();											// 分解方法
		4004:	fnChangeConditionPostage	(nFieldID);									// 手形郵送区分
        4006:   fnChangeConditionERKbn      ();									        // 電子債権採用区分 <211> ADD
// <211> MOD-STR
//		4007:	fnChangeConditionPostage	(nFieldID);									// 小切手郵送区分
		8002:	fnChangeConditionPostage8	(nFieldID);									// 小切手郵送区分
// <211> MOD-END
		5006:	fnChangeConditionOffsetTax	();											// 相殺消費税
		6013:	fnChangeConditionTaxRelated	(nFieldID);									// 売上消費税関係
		6015:	fnChangeConditionTaxRelated	(nFieldID);									// 仕入消費税関係
	end;

	if	(fReturn) then
		fnSetChangeFlagCheckItems (cNumEdit, FALSE)
	else
		m_cACControl	:= cNumEdit;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueSelectEx (nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	strDescription: String;
	fReturn		  : Boolean;

begin
	cNumEdit	:= nil;

	case (nFieldID) of
		6:	cNumEdit	:= CmnEdit05006TaxCode;											// 消費税ｺｰﾄﾞ
		7:	cNumEdit	:= CmnEdit05007TaxRate;											// 消費税率ｺｰﾄﾞ
	end;

	if	(cNumEdit = nil) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	fReturn	:= fnGetDescriptionSelectedItem (cNumEdit, strDescription);

	TMTxtEdit (MJSFindCtrl (Self, cNumEdit.Name + 'Desc')).Text	:= strDescription;

	if	(fReturn) then
		fnSetChangeFlagCheckItems (cNumEdit, FALSE)
	else
		m_cACControl	:= cNumEdit;

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueSeqNo (): Boolean;
begin
	m_fSetOffsetJournal	:= TRUE;

	if	(not fnSearchRecordOffsetJournalInfo ()) then
	begin
		m_fSetOffsetJournal	:= FALSE;
		m_cACControl		:= CmnEdit05001SeqNo;

		Result	:= FALSE;
		Exit;
	end;

	fnResetChangeDataFlagOffsetRecords ();

	m_fSetOffsetJournal	:= FALSE;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditNumValueZipCode (): Boolean;
var
	strZipCode	   : String;
	strAddressUpper: String;
	strAddressLower: String;

begin
	strZipCode	:= Format ('%.3d-%.4d', [CmnEdit06004ZipCodeUpper.AsInteger, CmnEdit06005ZipCodeLower.AsInteger]);

	if	(fnCMNPostGet (strZipCode, strAddressUpper, strAddressLower, 0) = 1) then
	begin
		if	((CmnEdit06006Address.Text = '') and (CmnEdit06007Address.Text = '')) then
		begin
			CmnEdit06006Address.Text	:= strAddressUpper;
			CmnEdit06007Address.Text	:= strAddressLower;
		end;
	end;

	fnSetChangeFlagCheckItems (CmnEdit06005ZipCodeLower, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValue (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cTxtEdit: TMTxtEdit;

begin
	cTxtEdit	:= nil;

	case (nAreaNo) of
		0:	begin
				case (nFieldID) of
					 2:	cTxtEdit	:= CmnEdit00002Association;							// 連想
					 4:	cTxtEdit	:= CmnEdit00004NameSimple;							// 簡略名称
				end;
			end;
// <110> ↓
		1:	begin
				case (nFieldID) of
				     3:	cTxtEdit	:= CmnEdit01027ReceiverName;						// 受取人名称
                end;
            end;
// <110> ↑
		2, 3:
			begin
				case (nFieldID) of
					 4:	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankName'  , [nAreaNo, nFieldID])));
					 6:	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchName', [nAreaNo, nFieldID])));
					14:	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dEDIInfo'   , [nAreaNo, nFieldID])));
				end;
			end;
		6:	begin																		// その他情報1
				case (nFieldID) of
// <110>					 3:	cTxtEdit	:= CmnEdit06003ReceiverName;						// 受取人名称
					 6:	cTxtEdit	:= CmnEdit06006Address;								// 住所(上段)
					 7:	cTxtEdit	:= CmnEdit06007Address;								// 住所(下段)
					 8:	cTxtEdit	:= CmnEDit06008TelephoneNo;							// 電話番号
					 9:	cTxtEdit	:= CmnEdit06009PostName;							// 送付先部署
					10:	cTxtEdit	:= CmnEdit06010ChargeName;							// 担当者
				end;
			end;
// <222-8>ADD↓
		9:	begin
        		case (nFieldID) of
                	 6: cTxtEdit	:= CmnEdit09006CustomerInquiryNo;					// 取引先照会番号
                     8: cTxtEdit	:= CmnEdit09008SendPurpose;							// 送金目的内容
                     9: cTxtEdit	:= CmnEdit09009PermLicenceNo;						// 送金許可NO
                end;
        	end;
// <222-8>ADD↑
	end;

	if	(cTxtEdit = nil) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	fnSetChangeFlagCheckItems (cTxtEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValueAccountNo (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cTxtEdit: TMTxtEdit;

begin
	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dAccountNo', [nAreaNo, nFieldID])));

	cTxtEdit.Text	:= fnGetEditedAccountNumber (cTxtEdit.Text);

	fnSetChangeFlagCheckItems (cTxtEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValueDescription (): Boolean;
var
	strDescription: String;

begin
	strDescription	:= '';

	if	(CmnEdit00004NameSimple.Text = '') then
	begin
		if	(StrLen (PChar (CmnEdit00003Name.Text)) <= 14) then
			strDescription	:= CmnEdit00003Name.Text
		else
			strDescription	:= MJSKabuCut (CmnEdit00003Name.Text, 14);
	end;

	if	(strDescription <> '') then
		CmnEdit00004NameSimple.Text	:= strDescription;

	fnSetChangeFlagCheckItems (CmnEdit00003Name, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValueHojCode (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cNumEdit	  : TMNumEdit;
	cTxtEdit	  : TMTxtEdit;
	strHojCode	  : String;
	strDescription: String;
	fReturn		  : Boolean;
    nNCODE        : Extended;
begin
	cNumEdit	:= nil;
	cTxtEdit	:= nil;

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dHojCodeNumeric', [nAreaNo, nFieldID])));

		if	(cNumEdit.InputFlag) then
			strHojCode	:= ''
		else
			strHojCode	:= Format ('%.16d', [Trunc (cNumEdit.Value)]);
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dHojCodeFree', [nAreaNo, nFieldID])));
		strHojCode	:= cTxtEdit.Text;
	end;

	if	(not fnCheckValidCodeUseCharacters (strHojCode)) then
	begin
		if	(m_nCurCodeAttribute <= 1) then												// ｺｰﾄﾞ属性: 数字
			m_cACControl	:= cNumEdit
		else																			// ｺｰﾄﾞ属性: ﾌﾘｰ
			m_cACControl	:= cTxtEdit;

		Result	:= FALSE;
		Exit;
	end;

	if	(nAreaNo = 0) then
	begin
		if	(Trim (strHojCode) = '') then
		begin
			if	(m_nCurCodeAttribute <= 1) then											// ｺｰﾄﾞ属性: 数字
				m_cACControl	:= cNumEdit
			else																		// ｺｰﾄﾞ属性: ﾌﾘｰ
				m_cACControl	:= cTxtEdit;

			Result	:= FALSE;
			Exit;
		end;

		if	(fnShowScreenInformations ()) then
			fnSelectTreeViewItem (strHojCode);
	end
	else if	(nAreaNo = 6) then															// 名寄せ親代替取引先
	begin
		strDescription	:= '';


//        nNCODE := 0;
        nNCODE := fnGetNCODE(strHojCode);
		if	(strHojCode <> '') then
			fReturn	:= fnCheckValidHojCode (MASTER_CUSTOMER, nNCODE, strDescription, OPTION_EXISTONLY)
		else
			fReturn	:= TRUE;

		TMLabel (MJSFindCtrl (Self, Format ('CmnLabel%.2d%.3dHojCodeDesc', [nAreaNo, nFieldID]))).Caption	:= strDescription;

		if	(not fReturn) then
		begin
			if	(m_nCurCodeAttribute <= 1) then											// ｺｰﾄﾞ属性: 数字
				m_cACControl	:= cNumEdit
			else																		// ｺｰﾄﾞ属性: ﾌﾘｰ
				m_cACControl	:= cTxtEdit;

			Result	:= FALSE;
			Exit;
		end;
	end;

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
		fnSetChangeFlagCheckItems (cNumEdit, FALSE)
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
		fnSetChangeFlagCheckItems (cTxtEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValueHojCodeEx (nFieldID: Integer): Boolean;
var
	cNumEdit        : TMNumEdit;
	cTxtEdit        : TMTxtEdit;
	strHojCode      : String;
	strDescription  : String;
	fReturn         : Boolean;
//    iGCode        : Integer;

    nKojiNCode      : Extended;         // <150> 2006/11/02 H.Kawato Add
    iPartKbn        : Integer;          // <150> 2006/11/02 H.Kawato Add
    sKojiName       : String;           // <150> 2006/11/02 H.Kawato Add
    nCountLoop      : Integer;          // <152> 2006/12/18 H.Kawato Add

begin
	cNumEdit	:= nil;
	cTxtEdit	:= nil;

	if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
	begin
		cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID])));

		if	(cNumEdit.InputFlag) then
			strHojCode	:= ''
		else
			strHojCode	:= Format ('%.16d', [Trunc (cNumEdit.Value)]);
	end
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
	begin
		cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree', [nFieldID])));
		strHojCode	:= cTxtEdit.Text;
	end;

	if	(not fnCheckValidCodeUseCharacters (strHojCode)) then
	begin
		if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then						// ｺｰﾄﾞ属性: 数字
			m_cACControl	:= cNumEdit
		else																			// ｺｰﾄﾞ属性: ﾌﾘｰ
			m_cACControl	:= cTxtEdit;

		Result	:= FALSE;
		Exit;
	end;

	strDescription	:= '';

	if	(strHojCode <> '') then
	begin
// <175> Mod
//		if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = MASTER_SUBJECTPLUS) then
//			fReturn	:= fnCheckValidKmsCodeEx (CmnEdit05002KmkCode.AsInteger, strHojCode, strDescription)
//		else
//			fReturn	:= fnCheckValidHojCodeEx (strHojCode, nFieldID - 3, strDescription);
		if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = MASTER_SUBJECTPLUS) then
			fReturn	:= fnCheckValidKmsCodeEx (CmnEdit05002KmkCode.AsInteger, strHojCode, strDescription, m_dSousaiNCode[0], m_dSousaiNCode[nFieldID - 2])
		else
	    	fReturn	:= fnCheckValidHojCodeEx (strHojCode, nFieldID - 3, strDescription, m_dSousaiNCode[nFieldID - 2]);
// <175> Mod
	end
	else
	begin
//		fReturn	:= FALSE;																// 未入力は認めない。
//<112>	fReturn	:= TRUE;																// 未入力を認める。

//<112>Add --------------------------------------------------------------------------------------
// <140> 2006/08/03 H.Kawato Mod
//        if m_BtnClick = False then                  //通常入力時には未入力を認める
        if (m_BtnClick = False) and (m_TabClick = False) then
            fReturn := True
        else                                        //---↓以下更新ﾎﾞﾀﾝ押時↓---
// <158> 2007/02/13 H.Kawato Add
        if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision >= 201) and       // 採用「2: 任意」のプロジェクト
            (m_arCodeAttribute [nFieldID - 3].nMasterDivision <= 210) and
            (m_arCodeAttribute [nFieldID - 3].nUse = 2) then
        	fReturn	:= TRUE  													// 未入力を認める
        else
// <158> 2007/02/13 H.Kawato Add
        begin
            if CmnEdit05002KmkCode.Value = 0 then
                fReturn := True                     //科目ｺｰﾄﾞ未入力時には未入力を認める
            else
            begin
                if cNumEdit <> nil then
                begin
                    if cNumEdit.Enabled then
                        fReturn := False            // 入力可能で未入力はｴﾗｰ(TMNumEdit)
                    else
                        fReturn := True;
                end
                else
                begin
                    if cTxtEdit.Enabled then
                        fReturn := False            // 入力可能で未入力はｴﾗｰ(TMTxtEdit)
                    else
                        fReturn := True;
                end;
            end;
        end;
	end;
//<112>Add --------------------------------------------------------------------------------------

// <150> 2006/11/02 H.Kawato Add Start
    if  (m_arCodeAttribute [nFieldID - 3].nMasterDivision >= 201) and
        (m_arCodeAttribute [nFieldID - 3].nMasterDivision <= 210) then
    begin
        iPartKbn    := 0;
        nKojiNCode  := 0;
        sKojiName   := '';

        fnHojyMAInputCheck(strHojCode, m_arCodeAttribute [nFieldID - 3].nMasterDivision, nKojiNCode, sKojiName);
                                                                                        // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞの取得                        
        fnKojiInfoCheck(nKojiNCode, m_arCodeAttribute [nFieldID - 3].nMasterDivision, iPartKbn);
                                                                                        // 工種管理区分チェック
        if  (iPartKbn < 1) then
            m_nPrjSubUnAdopt    := 2
        else
            m_nPrjSubUnAdopt    := 1;

// <152> 2006/12/18 H.Kawato Add Start  相殺補助のプロジェクトが変更された場合、プロジェクト以降の入力項目をクリアする
        if (m_bSousaiChange = TRUE) then
        begin
// <158> 2007/02/13 H.Kawato Mod Start
            if (m_arCodeAttribute [nFieldID - 3].nPrjNCode <> nKojiNCode) then
////            if (m_arCodeAttribute [nFieldID - 3].nPartKbn <> iPartKbn) then
//            if  (m_arCodeAttribute [nFieldID - 3].nPrjNCode <> nKojiNCode) or           // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ変更あり
//                ((m_arCodeAttribute [nFieldID - 3].nUse = 2) and                        // ﾌﾟﾛｼﾞｪｸﾄの採用が任意で、ｺｰﾄﾞ欄が空
//                 (m_arCodeAttribute [nFieldID - 3].nPrjNCode = 0) and (Trim(strHojCode) = '')) then
// <158> 2007/02/13 H.Kawato Mod End
            begin
                for nCountLoop := nFieldID + 1 to 5 do
                begin
                    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nCountLoop]))).Value		:= 0;
                    TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nCountLoop]))).InputFlag	:= TRUE;
                    TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree'   , [nCountLoop]))).Text       := '';
                    TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc'   , [nCountLoop]))).Text       := '';
                end;
              	fnSetAttributeOffsetJournalInfo (CmnEdit05002KmkCode.AsInteger);
            end;
        end;
// <152> 2006/12/18 H.Kawato Add End

        m_nPrjSubUnAdopt    := 0;

        m_arCodeAttribute [nFieldID - 3].nPartKbn   := iPartKbn;                        // 工種管理区分を保持
        m_arCodeAttribute [nFieldID - 3].nPrjNCode  := nKojiNCode;                      // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞを保持
    end;
// <150> 2006/11/02 H.Kawato Add End

	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text	:= strDescription;

	if	(not fReturn) then
	begin
		if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then						// ｺｰﾄﾞ属性: 数字
			m_cACControl	:= cNumEdit
		else																			// ｺｰﾄﾞ属性: ﾌﾘｰ
			m_cACControl	:= cTxtEdit;

		Result	:= FALSE;
		Exit;
	end;

	if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then							// ｺｰﾄﾞ属性: 数字
		fnSetChangeFlagCheckItems (cNumEdit, FALSE)
	else																				// ｺｰﾄﾞ属性: ﾌﾘｰ
		fnSetChangeFlagCheckItems (cTxtEdit, FALSE);

	Result		:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValueKanaDesc (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cTxtEdit: TMTxtEdit;

begin
	cTxtEdit	:= nil;

	case (nFieldID) of
		5:	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankNameKana'   , [nAreaNo, nFieldID])));
		7:	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchNameKana' , [nAreaNo, nFieldID])));
		8:	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dTranslationName', [nAreaNo, nFieldID])));
	end;

	if	(cTxtEdit = nil) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	if	(not fnCheckValidKanaDesc (cTxtEdit.Text)) then
	begin
		m_cACControl	:= cTxtEdit;

		Result	:= FALSE;
		Exit;
	end;

	fnSetChangeFlagCheckItems (cTxtEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckEditTxtValueVisitorCode (nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cTxtEdit: TMTxtEdit;

begin
	cTxtEdit	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dVisitorCode', [nAreaNo, nFieldID])));

	if	(cTxtEdit = nil) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	cTxtEdit.Text	:= fnGetEditedVisitorCode (cTxtEdit.Text);

	fnSetChangeFlagCheckItems (cTxtEdit, FALSE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
//<222-8>ADD↓
function TJNTCRP004006f.fnCheckEditDateValue(nAreaNo: Integer; nFieldID: Integer): Boolean;
var
	cDateEdit: TMDateEdit;
begin
	case nAreano of
    	 9:	//電信送金情報
        case nFieldID of
        	10:	cDateEdit := CmnEdit09010PermDate;	//送金許可日付
        end;
        10: //送金小切手情報
        case nFieldID of
        	 7:	cDateEdit := CmnEdit10007PermDate;	//送金許可日付
        end;
    end;

    fnSetChangeFlagCheckItems (cDateEdit, FALSE);

    Result := TRUE;
end;
//<222-8>ADD↑

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckPermitGeneralRecord (strHojCode: String): Boolean;
var
	dqMasterData: TMQuery;
	fReturn		: Boolean;

begin
	fReturn	:= FALSE;

	if	(Trim (strHojCode) = '') then
	begin
		Result	:= fReturn;
		Exit;
	end;

	if  (m_nCurCodeAttribute <= 1) then
		strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	if	(m_strHojCodeGeneral <> '') then
	begin
		if	(CompareStr (m_strHojCodeGeneral, strHojCode) = 0) then
			fReturn	:= TRUE
		else
			fReturn	:= FALSE;

		Result	:= fReturn;
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT * FROM MTOKUI ');
		SQL.Add   ('WHERE  RDelKbn = 0 AND GCode = :strHojCode');

		ParamByName ('strHojCode'     ).AsString	:= strHojCode;

		Open ();

		if  (not EOF) then
		begin
//			if	((not FieldByName ('NCode').IsNull) and (FieldByName ('NCode').AsInteger = 0)) then
			if	(not FieldByName ('SyokuchiKbn').AsInteger = 0) then
			begin
				m_strHojCodeGeneral	:= strHojCode;

				fReturn	:= TRUE;
			end;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckRecordRequisite (): Integer;
var
	cDialogRequisite: TJNTCRP0040062f;
	dqMasterData	: TMQuery;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT GCode FROM MTOKUI WHERE SyokuchiKbn = 1 AND RDelKbn = 0');

		Open ();

		if	(not EOF) then
		begin
			m_strHojCodeGeneral	:= FieldByName ('GCode').AsString;						// 諸口

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= REQUISITE_OK;
			Exit;
		end;
    end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	cDialogRequisite	:= TJNTCRP0040062f.fnCreateDialog (Pointer (m_pRec), Self,
										m_cDBSelect, m_nCurCodeDigit, m_nCurCodeAttribute, m_strValidCharacters);

	if	(cDialogRequisite.ShowModal () = mrCancel) then
	begin
		cDialogRequisite.Close ();
		cDialogRequisite.Free  ();

		Result	:= REQUISITE_CANCEL;
		Exit;
	end;

	m_strHojCodeGeneral	:= cDialogRequisite.m_strHojCodeGeneral;
	m_nHojyoTree		:= 1;

	cDialogRequisite.Close ();
	cDialogRequisite.Free  ();

	Result	:= REQUISITE_OK;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidAccountCode (pRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pPayInfoData: ^PayInfoData;

begin
	pPayInfoData	:= pRecord;

	pPayInfoData^.nBankCode			:= -1;												// 全銀協銀行ｺｰﾄﾞ
	pPayInfoData^.nBranchCode		:= -1;												// 全銀協支店ｺｰﾄﾞ
	pPayInfoData^.nDepDivision		:= 1;												// 預金種別
	pPayInfoData^.strAccountNo		:= '';												// 口座番号
	pPayInfoData^.strAccountName	:= '';												// 依頼口座名称
	pPayInfoData^.strBankName		:= '';												// 全銀協銀行名称
	pPayInfoData^.strBranchName		:= '';												// 全銀協支店名称
	pPayInfoData^.strBankNameKana	:= '';												// 全銀協銀行名称(ｶﾅ)
	pPayInfoData^.strBranchNameKana	:= '';												// 全銀協支店名称(ｶﾅ)

	if	(pPayInfoData^.nAccountCode = -1) then											// 口座ｺｰﾄﾞ=空
	begin
		Result	:= TRUE;
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();

		SQL.Add   ('SELECT AI.AccKbn, AI.AccNo, HM.SimpleName, BI.AllBkCode, BI.AllBraCode, ');
		SQL.Add   ('       BI.BankName, BI.BkBraName, BI.BankKanaName, BI.BraKanaName ');
		SQL.Add   ('     , BI.SimpleName BankSimpleName ');     // <209> ADD
		SQL.Add   ('FROM BankInfo BI ');
		SQL.Add   ('Inner Join AccInfo Ai On ');
		SQL.Add   ('AI.BankNCode = BI.NCode  ');
        SQL.Add   ('Left outer join HojyoMA HM On ');
		SQL.Add   ('HM.BankNCode = BI.NCode and HM.RDelKbn = 0 ');
		SQL.Add   ('and HM.MasterKbn = BI.MasterKbn '); // <163> Add
        SQL.Add   ('Where BI.MasterKbn = :nMasterDivision And BI.RDelKbn = 0 ');
        SQL.Add   (' And AI.GCode = :nAccountCode ');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_BANK;
		ParamByName ('nAccountCode'   ).AsInteger	:= pPayInfoData^.nAccountCode;


        if Not Open then
            ShowMessage('Not Open!');

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		pPayInfoData^.nBankCode			:= FieldByName ('AllBkCode' ).AsInteger;		// 全銀協銀行ｺｰﾄﾞ
		pPayInfoData^.nBranchCode		:= FieldByName ('AllBraCode').AsInteger;		// 全銀協支店ｺｰﾄﾞ
		pPayInfoData^.nDepDivision		:= FieldByName ('AccKbn'    ).AsInteger;		// 預金種別
		pPayInfoData^.strBankName		:= FieldByName ('BankName'  ).AsString;			// 全銀協銀行名称
		pPayInfoData^.strBranchName		:= FieldByName ('BkBraName' ).AsString;			// 全銀協支店名称

		pPayInfoData^.strAccountNo		:= fnGetEditedAccountNumber	   (FieldByName ('AccNo'       ).AsString);
		pPayInfoData^.strBankNameKana	:= fnExchangeCharacterKanaDesc (FieldByName ('BankKanaName').AsString);
		pPayInfoData^.strBranchNameKana	:= fnExchangeCharacterKanaDesc (FieldByName ('BraKanaName' ).AsString);

// <209> MOD-STR
//		pPayInfoData^.strAccountName	:= FieldByName ('SimpleName').AsString + '  預金種目：';
		pPayInfoData^.strAccountName	:= FieldByName ('BankSimpleName').AsString + '  預金種目：';
// <209> MOD-END

		case (pPayInfoData^.nDepDivision) of
			1:		pPayInfoData^.strAccountName	:= pPayInfoData^.strAccountName + '普通  口座番号：';
			2:		pPayInfoData^.strAccountName	:= pPayInfoData^.strAccountName + '当座  口座番号：';
			4:		pPayInfoData^.strAccountName	:= pPayInfoData^.strAccountName + '貯蓄  口座番号：';
			9:		pPayInfoData^.strAccountName	:= pPayInfoData^.strAccountName + 'その他  口座番号：';
			else	pPayInfoData^.strAccountName	:= pPayInfoData^.strAccountName + 'なし  口座番号：'
		end;

		pPayInfoData^.strAccountName	:= pPayInfoData^.strAccountName + pPayInfoData^.strAccountNo;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidBankCode (nBankCode: Integer; var strDescription: String; var strKanaDesc: String): Boolean;
var
	dqCommonData: TMQuery;

begin
	strDescription	:= '';
	strKanaDesc		:= '';

	if	(nBankCode = -1) then															// 全銀協ｺｰﾄﾞ=空
	begin
		Result	:= TRUE;
		Exit;
	end;

	dqCommonData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqCommonData);							// DBとMQueryの接続

	with (dqCommonData) do
	begin
		Close ();
		SQL.Clear ();
//<100>	SQL.Add   ('SELECT * FROM CMN_BANK WHERE BankCD = :nBankCode');
		SQL.Add   ('SELECT * FROM HAPBF WHERE BankCode = :nBankCode');

		ParamByName ('nBankCode').AsInteger	:= nBankCode;

		if not Open then
            ShowMessage('Not Open!');

		if	(EOF) then
		begin
			dqCommonData.Close ();
			dqCommonData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		strDescription	:= FieldByName ('BankName').AsString;
//<100>	strKanaDesc		:= fnExchangeCharacterKanaDesc (FieldByName ('KanaBankName').AsString);
		strKanaDesc		:= fnExchangeCharacterKanaDesc (FieldByName ('BankKana').AsString);
	end;

	dqCommonData.Close ();
	dqCommonData.Free  ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidBranchCode (nBankCode: Integer; nBranchCode: Integer;
// <SCA> MOD-STR
//													var strDescription: String; var strKanaDesc: String): Boolean;
													var strDescription: String; var strKanaDesc: String; nAreaNo: Integer): Boolean;
// <SCA> MOD-END
var
	dqCommonData: TMQuery;
    nNCode      : Extended;
begin
	strDescription	:= '';
	strKanaDesc		:= '';

	if	(nBranchCode = -1) then															// 全銀協支店ｺｰﾄﾞ=空
	begin
		Result	:= TRUE;
		Exit;
	end;

	dqCommonData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqCommonData);							// DBとMQueryの接続

	with (dqCommonData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   ('SELECT * FROM HAPBF WHERE BankCode = :nBankCode');
		ParamByName ('nBankCode').AsInteger	:= nBankCode;

        if not Open () then
            ShowMessage('Not Open!');

        if not Eof then
            nNCode := GetFld('NCode').AsFloat
        else
            nNCode := 0;

		Close ();
		SQL.Clear ();
		SQL.Add   ('SELECT * FROM HAPBS WHERE BankNCode = :nBankCode AND BranchCode = :nBranchCode');
		SQL.Add   ('ORDER BY NCode');           // 登録順に取得 <SCA> ADD
		ParamByName ('nBankCode'  ).AsFloat 	:= nNCode;
		ParamByName ('nBranchCode').AsInteger	:= nBranchCode;

		if not Open then
            ShowMessage('Not Open!');

		if	(EOF) then
		begin
			dqCommonData.Close ();
			dqCommonData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		strDescription	:= FieldByName ('BranchName').AsString;
		strKanaDesc		:= fnExchangeCharacterKanaDesc (FieldByName ('BranchKana').AsString);

        m_anBrachNCode[nAreaNo - 1] := FieldByName ('NCode').AsCurrency;    // 振込先支店内部コード保存 <SCA> ADD
	end;

	dqCommonData.Close ();
	dqCommonData.Free  ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidFundCode (cNumEdit: TMNumEdit; var strDescription: String): Boolean;
var
	dqMasterData: TMQuery;

begin
	strDescription	:= '';

	if	(cNumEdit.AsInteger = 0) then
	begin
		Result	:= TRUE;
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT SimpleName FROM SKmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 3 AND RDelKbn = 0 AND SumKbn = 0 AND GCode = :nFundCode');

		ParamByName ('nFundCode').AsInteger	:= cNumEdit.AsInteger;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		strDescription	:= FieldByName ('SimpleName').AsString;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidFundCodeEx (nFundCode: Integer; var strDescription: String): Boolean;
var
	dqMasterData: TMQuery;

begin
	strDescription	:= '';

	if	(nFundCode = 0) then															// 資金繰ｺｰﾄﾞ
	begin
		strDescription	:= '科目に従う';

		Result	:= TRUE;
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT SimpleName FROM SKmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 3 AND RDeldKbn = 0 AND SumKbn = 0 AND GCode = :nFundCode');

		ParamByName ('nFundCode').AsInteger	:= nFundCode;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		strDescription	:= FieldByName ('SimpleName').AsString;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidCodeUseCharacters (strHojCode: String): Boolean;
begin
	if	(Trim (strHojCode) = '') then
	begin
		Result	:= TRUE;
		Exit;
	end;

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
		Result	:= TRUE;
		Exit;
	end;

	if	(not JNTMASERRORCODECHECK (strHojCode, m_strValidCharacters)) then
	begin
		Beep ();

		m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 21);

		MJSMessageBoxEx (Self,m_cErrorMsgRec.sMsg, m_pRec^.m_ProgramName, m_cErrorMsgRec.icontype,
										m_cErrorMsgRec.btntype, m_cErrorMsgRec.btndef, m_cErrorMsgRec.LogType);

		Result	:= FALSE;
		Exit;
	end;

	Result  := TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidHojCode (nMasterDivision: Integer; nNCode: Extended;
						var strDescription: String; nOption: Integer): Boolean;
var
	dqMasterData: TMQuery;
	fReturn		: Boolean;

begin

	if	((nMasterDivision = MASTER_CUSTOMERPLUS01) or
		 (nMasterDivision = MASTER_CUSTOMERPLUS02)) then
		nMasterDivision	:= MASTER_CUSTOMER;

	strDescription	:= '';

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	fReturn	:= TRUE;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();

        if nMasterDivision = MASTER_CUSTOMER then
        begin
    		SQL.Add   ('SELECT NMK, HojyoKbn2 FROM MTOKUI ');
//<115>	    	SQL.Add   ('WHERE  RDelKbn = 0 AND NCode = :strHojCode And SumKbn = 0');
	    	SQL.Add   ('WHERE  RDelKbn = 0 AND NCode = :strHojCode');
		    ParamByName ('strHojCode'     ).AsFloat	:= nNCode;
        end
// <141> 2006/08/03 H.Kawato Add Start 社員名称の出力
        else if nMasterDivision = MASTER_STAFF then
        begin
    		SQL.Add   ('SELECT SimpleName as NMK FROM ');
            SQL.Add   ('HAPSC join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode) ');
            SQL.Add   ('WHERE RDelKbn = 0 and HAPSC.NCode = :strHojCode');
            ParamByName ('strHojCode'     ).AsFloat	:= nNCode;
        end
// <141> 2006/08/03 H.Kawato Add End
// <150> 2006/11/02 H.Kawato Add Start
        else if nMasterDivision = MASTER_BANK then
        begin
// <209> ADD-STR
            if (nOption = OPTION_FROM_BANKNCODE) then
        		SQL.Add   ('SELECT SimpleName as NMK FROM BankInfo')
            else
// <209> ADD-END
        		SQL.Add   ('SELECT SimpleName as NMK FROM HojyoMA');
	    	SQL.Add   ('WHERE  MasterKbn = :MstKbn ');
            SQL.Add   ('AND RDelKbn = 0 ');
// <159> 2007/06/04 H.Kawato Mod
//            SQL.Add   ('AND BankNCode = :nNCode ');
// <209> DEL-STR
{// <203> ADD-STR
            if (nOption = OPTION_FROM_BANKNCODE) then
                SQL.Add   ('AND BankNCode = :nNCode ')
            else
// <203> ADD-END}
// <209> DEL-END
            SQL.Add   ('AND NCode = :nNCode ');

		    ParamByName ('MstKbn' ).AsInteger   := nMasterDivision;
            ParamByName ('nNCode' ).AsFloat     := nNCode;
        end
// <150> 2006/11/02 H.Kawato Add End
        else
        begin
    		SQL.Add   ('SELECT SimpleName as NMK, HojyoKbn2 FROM HojyoMA ');
	    	SQL.Add   ('WHERE  MasterKbn = :MstKbn ');
//<115>            SQL.Add   ('AND SumKbn  = 0 ');
            SQL.Add   ('AND RDelKbn = 0 ');
            SQL.Add   ('AND NCode = :strHojCode ');

		    ParamByName ('MstKbn'         ).AsInteger	:= nMasterDivision;
		    ParamByName ('strHojCode'     ).AsFloat	    := nNCode;
        end;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		strDescription	:= FieldByName ('NMK').AsString;

		if	((nOption = OPTION_EXISTONLY) and
			(FieldByName ('HojyoKbn2').AsInteger <> 1)) then
//		if	((nOption = OPTION_EXISTONLY) and
//			((FieldByName ('SumKbn').AsInteger <> 0) or (FieldByName ('HojyoKbn2').AsInteger <> 1))) then
			fReturn	:= FALSE;
	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

	Result	:= fReturn;
end;


//***********************************************************************************************************/
// fnCheckValidHojCodeを内部ｺｰﾄﾞから外部ｺｰﾄﾞを取得するように拡張 <107>
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidHojCode2 (nMasterDivision: Integer; nNCode: Extended;
						var strDescription: String; var strGCode: String): Boolean;
var
	dqMasterData : TMQuery;

begin

	if	((nMasterDivision = MASTER_CUSTOMERPLUS01) or
		 (nMasterDivision = MASTER_CUSTOMERPLUS02)) then
		nMasterDivision	:= MASTER_CUSTOMER;

	strDescription	:= '';

    // Queryの構築
	dqMasterData := TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dqMasterData);

	Result := True;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();

        if      nMasterDivision = MASTER_CUSTOMER then
        begin
    		SQL.Add   ('select GCode, NMK, HojyoKbn2 from MTOKUI');
//<115>	    	SQL.Add   ('where  RDelKbn = 0 and NCode = :strHojCode and SumKbn = 0');
	    	SQL.Add   ('where  RDelKbn = 0 and NCode = :strHojCode');

        end
        else if nMasterDivision = MASTER_STAFF then
        begin
    		SQL.Add   ('select GCode, SimpleName as NMK from ');
            SQL.Add   ('HAPSC join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode) ');
            SQL.Add   ('where RDelKbn = 0 and HAPSC.NCode = :strHojCode');
        end
        else
        begin
    		SQL.Add   ('select GCode, SimpleName as NMK, HojyoKbn2 from HojyoMA ');
	    	SQL.Add   ('where  MasterKbn = :MstKbn ');
//<115>            SQL.Add   ('and SumKbn  = 0 ');
            SQL.Add   ('and RDelKbn = 0 ');
            SQL.Add   ('and NCode = :strHojCode ');
		    ParamByName ('MstKbn').AsInteger := nMasterDivision;
        end;
        ParamByName ('strHojCode').AsFloat := nNCode;

		Open;

		if	(EOF) then
		begin
			dqMasterData.Close;
			dqMasterData.Free;

			Result := False;
			Exit;
		end;

		strDescription := FieldByName ('NMK').AsString;
		strGCode	   := FieldByName ('GCode').AsString;
	end;

	dqMasterData.Close;
	dqMasterData.Free;

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidHojCodeEx (strHojCode: String;
//<175> Mod
//													nPosition: Integer; var strDescription: String): Boolean;
													nPosition: Integer; var strDescription: String;
													var nNCode	:Extended): Boolean;
//<175> Mod
var
	dqMasterData   : TMQuery;
	nMasterDivision: Integer;
	fReturn		   : Boolean;
    strSQL         : String;        // <150> 2006/11/02 H.Kawato Add

begin
	strDescription	:= '';

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);

	fReturn	:= TRUE;

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();

        // 取引先
        if      ((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMER)        or
                 (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01)  or
                 (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02)) then
        begin
// <175> Mod
//			SQL.Add   ('select NMK from MTOKUI ');
//			SQL.Add   ('WHERE  RDelKbn = 0 AND SumKbn =0 and GCode = :strHojCode');
			SQL.Add   ('select NCode, NMK from MTOKUI ');
			if nNCode <> 0 then
	    		SQL.Add   ('WHERE  RDelKbn = 0 AND SumKbn =0 and NCode = :dNCode')
			else
	    		SQL.Add   ('WHERE  RDelKbn = 0 AND SumKbn =0 and GCode = :strHojCode');
// <175> Mod
        end
        // 社員 <109>
        else if ( m_arCodeAttribute [nPosition].nMasterDivision = MASTER_STAFF) then
        begin
// <175> Mod
//          SQL.Add('select SimpleName as NMK from HAPSC ');
// <188> MOD-STR
//			SQL.Add('select NCode, SimpleName as NMK from HAPSC ');
			SQL.Add('select HAPSC.NCode, SimpleName as NMK from HAPSC ');
// <188> MOD-END
// <175> Mod
            SQL.Add('join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode) ');
// <175> Mod
//          SQL.Add('where  RDelKbn = 0 and GCode = :strHojCode');
			if nNCode <> 0 then
// <188> MOD-STR
//				SQL.Add('where  RDelKbn = 0 and NCode = :dNCode')
				SQL.Add('where  RDelKbn = 0 and HAPSC.NCode = :dNCode')
// <188> MOD-END
			else
				SQL.Add('where  RDelKbn = 0 and GCode = :strHojCode');
// <175> Mod
        end
        // 銀行、汎用補助、ｾｸﾞﾒﾝﾄ、ﾌﾟﾛｼﾞｪｸﾄ
        else
        begin
// <175> Mod
//         	SQL.Add   ('select SimpleName as NMK from HojyoMA ');
//    		SQL.Add   ('where  MasterKbn = :nMasterDivision and RDelKbn = 0 AND SumKbn =0 and GCode = :strHojCode');
			SQL.Add   ('select NCode, SimpleName as NMK from HojyoMA ');
			if nNCode <> 0 then
	    		SQL.Add   ('where  MasterKbn = :nMasterDivision and RDelKbn = 0 AND SumKbn =0 and NCode = :dNCode')
			else
	    		SQL.Add   ('where  MasterKbn = :nMasterDivision and RDelKbn = 0 AND SumKbn =0 and GCode = :strHojCode');
// <175> Mod
        end;


        // Where句の追加

        // 部門、ｾｸﾞﾒﾝﾄ
		if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_SECTION  ) or
			 ((m_arCodeAttribute [nPosition].nMasterDivision >= 101) and
              (m_arCodeAttribute [nPosition].nMasterDivision <= 110))) then

		begin
			case (m_arCodeAttribute [nPosition].nClassCode) of
				0:	SQL.Add (' AND HojyoKbn2 <> 2');
				2:	SQL.Add (' AND HojyoKbn2 <> 0');
			end;
		end
        // 得意先
		else if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01) then
			SQL.Add (' AND HojyoKbn1 = 1')
        // 仕入先
		else if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02) then
			SQL.Add (' AND HojyoKbn2 = 1');

// <150> 2006/11/02 H.Kawato Add Start
        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ、かつﾌﾟﾛｼﾞｪｸﾄの工種管理区分が「あり(ﾊﾟﾀｰﾝ指定)」の場合
        if  (m_arCodeAttribute [nPosition].nMasterDivision >= 301) and
            (m_arCodeAttribute [nPosition].nMasterDivision <= 310) and
            (m_arCodeAttribute [nPosition - 1].nMasterDivision >= 201) and
            (m_arCodeAttribute [nPosition - 1].nMasterDivision <= 210) and
            (m_arCodeAttribute [nPosition - 1].nPartKbn = 2) then
        begin
            strSQL  := '';
            strSQL  := strSQL + ' AND HojyoMA.NCode in ( ';
            strSQL  := strSQL + ' SELECT KsyNCode FROM KousyuPtn ';
            strSQL  := strSQL + ' INNER JOIN  KojiInfo ';
            strSQL  := strSQL + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode ';
            strSQL  := strSQL + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_arCodeAttribute [nPosition - 1].nMasterDivision);
            strSQL  := strSQL + ' AND KojiInfo.NCode = ' + FloatToStr(m_arCodeAttribute [nPosition - 1].nPrjNCode);
            strSQL  := strSQL + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_arCodeAttribute [nPosition].nMasterDivision) + ' )';

            SQL.Add (strSQL);
        end;
// <150> 2006/11/0 H.Kawato Add End

		if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01) or
			 (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02)) then
			nMasterDivision	:= MASTER_CUSTOMER
		else
			nMasterDivision	:= m_arCodeAttribute [nPosition].nMasterDivision;

        if (nMasterDivision <> MASTER_CUSTOMER) and
           (nMasterDivision <> MASTER_STAFF)    then
    		ParamByName ('nMasterDivision').AsInteger := nMasterDivision;

// <175> Mod
//		ParamByName ('strHojCode').AsString	:= strHojCode;
		if nNCode <> 0 then
			ParamByName ('dNCode').AsFloat	:= nNCode
		else
			ParamByName ('strHojCode').AsString	:= strHojCode;
// <175> Mod

//<178> ADD-STR
        if (nMasterDivision =  MASTER_SECTION) then
        begin
            SQL.Add(' ORDER BY TEndDate DESC')
        end;
//<178> ADD-END

		Open;

		if	(EOF) then
		begin
			dqMasterData.Close;
			dqMasterData.Free;

			Result := FALSE;
			Exit;
		end;

		strDescription	:= FieldByName ('NMK').AsString;
// <175> Add
		if	nNCode = 0 then
			nNCode := FieldByName ('NCode').AsFloat;
// <175> Add
	end;

	dqMasterData.Close;
	dqMasterData.Free;

	Result := fReturn;

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidKanaDesc (strDescription: String): Boolean;
var
	nPosition	: Integer;
	chComparison: Char;

begin
	for	nPosition := 1 to StrLen (PChar (strDescription)) do
	begin
		chComparison	:= strDescription [nPosition];

		case (chComparison) of
			'0'..'9','A'..'Z','ｱ'..'ﾝ','ｦ',' ','ﾞ','ﾟ','｢','｣','\','/',',','.','-','(',')':
				begin
				end;
			else
				begin
					Result	:= FALSE;
					Exit;
				end;
		end;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidKmkCode (nKmkCode: Extended;
                                            var iGCode        : Integer;
                                            var strDescription: String): Boolean;
var
	dqMasterData: TMQuery;

begin
    iGCode := -1;
	strDescription	:= '';

	if	((nKmkCode = m_nKmkCompound01) or (nKmkCode = m_nKmkCompound02)) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT GCode,SimpleName FROM KmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 1 AND SumKbn = 0 AND ');
		SQL.Add   ('       RDelKbn = 0 AND NCode = :nKmkCode AND SubCode = 0 AND AnalyzeCode <> 0');
		SQL.Add   (' and InputKbn <> 9 ');                                    // <#1-ADD>

		ParamByName ('nKmkCode').AsFloat	:= nKmkCode;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

        iGCode          := FieldByName ('GCode').AsInteger;
		strDescription	:= FieldByName ('SimpleName').AsString;

	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

	Result	:= TRUE;																	// ﾁｪｯｸOK
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
// <138> 2006/08/02 H.Kawato Mod
{
function	TJNTCRP004006f.fnCheckValidKmsCode (nKmkCode: Extended; nKmsCode: Extended;
                                                var iGCode         : Integer;
                                                var strDescription : String): Boolean;
}
function	TJNTCRP004006f.fnCheckValidKmsCode (nKmkCode: Extended; nKmsCode: Extended;
                                                var sGCode, strDescription : String): Boolean;
// <138> 2006/08/02 H.Kawato Mod
var
	dqMasterData: TMQuery;
//    exNCode :   Extended;
//    StrDsp  :   String;


begin
// <138> 2006/08/02 H.Kawato Mod
//    iGCode          := -1;
    sGCode          := '';
	strDescription	:= '';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
// <138> 2006/08/02 H.Kawato Mod 内部コードを元に科目別補助を取得する
//		SQL.Add   ('SELECT GCode,SimpleName FROM KmkMA ');
//		SQL.Add   ('WHERE  MasterKbn = 2 AND RDelKbn = 0 AND NCode = :nKmkCode AND SubCode = :nKmsCode');
		SQL.Add   ('SELECT SubCode, SimpleName FROM KmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 2 AND RDelKbn = 0 AND NCode = :nKmkCode AND CNCode = :nKmsCode');
// <138> 2006/08/02 H.Kawato Mod

		ParamByName ('nKmkCode').AsFloat	:= nKmkCode;
		ParamByName ('nKmsCode').AsFloat	:= nKmsCode;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;
// <138> 2006/08/02 H.Kawato Mod
//        iGCode          := FieldByName ('GCode').AsInteger;
        sGCode          := FieldByName ('SubCode').AsString;
		strDescription	:= FieldByName ('SimpleName').AsString;
	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

	Result	:= TRUE;																	// ﾁｪｯｸOK
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidOffsetRecord (): Boolean;
var
	nFieldID	  : Integer;
	strHojCode	  : String;
	strDescription: String;
	fReturn		  : Boolean;
//    nNCODE        : Extended;
//    iGCode        : Integer;
    nCode         : Extended;
begin

	if	((CmnEdit05001SeqNo.AsInteger <  1) or											// 相殺№
		 (CmnEdit05001SeqNo.AsInteger > 10)) then
	begin
		m_cACControl	:= CmnEdit05001SeqNo;

		Result	:= FALSE;																// ｴﾗｰ
		Exit;
	end;

	if	(CmnEdit05002KmkCode.InputFlag) then
	begin
		Result	:= TRUE;
		Exit;
	end;

//	fReturn	:= fnCheckValidKmkCode (CmnEdit05002KmkCode.value,iGCode, strDescription);		// 科目ｺｰﾄﾞ
	fReturn	:= fnCheckValidKmkCodeG (CmnEdit05002KmkCode.AsInteger,nCode, strDescription);		// 科目ｺｰﾄﾞ
	CmnEdit05002KmkCodeDesc.Text	:= strDescription;

	if	(not fReturn) then
	begin
		m_cACControl	:= CmnEdit05002KmkCode;

		Result	:= FALSE;																// ｴﾗｰ
		Exit;
	end;

	for	nFieldID := 3 to 5 do
	begin
        strDescription := '';

		if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then						// ｺｰﾄﾞ属性: 数字
		begin
			if	(TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).InputFlag) then
				strHojCode	:= ''
			else
				strHojCode	:= Format ('%.16d', [Trunc (TMNumEdit (MJSFindCtrl (
											Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).Value)]);
		end
		else
			strHojCode	:= TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree', [nFieldID]))).Text;

		if	(strHojCode <> '') then
		begin
// <175> Mod
// 			if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = MASTER_SUBJECTPLUS) then
//    			fReturn	:= fnCheckValidKmsCodeEx (CmnEdit05002KmkCode.AsInteger, strHojCode,strDescription)
//	    	else
//		    	fReturn	:= fnCheckValidHojCodeEx (strHojCode, nFieldID - 3, strDescription);
			if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision = MASTER_SUBJECTPLUS) then
				fReturn	:= fnCheckValidKmsCodeEx (CmnEdit05002KmkCode.AsInteger, strHojCode,strDescription, m_dSousaiNCode[0], m_dSousaiNCode[nFieldID - 2])
	    	else
		    	fReturn	:= fnCheckValidHojCodeEx (strHojCode, nFieldID - 3, strDescription, m_dSousaiNCode[nFieldID - 2]);
// <175> Mod
		end
		else
		begin
// <158> 2007/02/13 H.Kawato Add
			if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision >= 201) and       // 採用「2: 任意」のプロジェクト
                (m_arCodeAttribute [nFieldID - 3].nMasterDivision <= 210) and
                (m_arCodeAttribute [nFieldID - 3].nUse = 2) then
				fReturn	:= TRUE  													// 未入力を認める
            else
// <158> 2007/02/13 H.Kawato Add
			if	(m_arCodeAttribute [nFieldID - 3].nMasterDivision <> 0) then
				fReturn	:= FALSE  													// 未入力は認めない
//				fReturn	:= TRUE														// 未入力を認める
			else
				fReturn	:= TRUE;
		end;


		TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text	:= strDescription;


		if	(not fReturn) then
		begin
			if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then					// ｺｰﾄﾞ属性: 数字
				m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID])))
			else
				m_cACControl	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree'   , [nFieldID])));

			Result	:= FALSE;															// ｴﾗｰ
			Exit;
		end;
	end;

	if	(CmnEdit05006TaxCode.InputFlag) then											// 消費税ｺｰﾄﾞ
		CmnEdit05006TaxCodeDesc.Text	:= ''
	else
	begin
		fReturn	:= fnGetDescriptionSelectedItem (CmnEdit05006TaxCode, strDescription);

		CmnEdit05006TaxCodeDesc.Text	:= strDescription;

		if	(not fReturn) then
		begin
			m_cACControl	:= CmnEdit05006TaxCode;

			Result	:= FALSE;															// ｴﾗｰ
			Exit;
		end;
	end;

	if	(CmnEdit05007TaxRate.InputFlag) then											// 消費税率ｺｰﾄﾞ
		CmnEdit05007TaxRateDesc.Text	:= ''
	else
	begin
		fReturn	:= fnGetDescriptionSelectedItem (CmnEdit05007TaxRate, strDescription);

// <#TAX10> MOD-STR
//		CmnEdit05007TaxRateDesc.Text	:= strDescription;
		CmnEdit05007TaxRateDesc.Text	:= fnGetTaxRateName(CmnEdit05007TaxRate.AsInteger);
// <#TAX10> MOD-END

		if	(not fReturn) then
		begin
			m_cACControl	:= CmnEdit05007TaxRate;

			Result	:= FALSE;															// ｴﾗｰ
			Exit;
		end;
	end;

// <135> 2006/06/21 H.Kawato Add Start  // 2006/08/03 H.Kawato Del 相殺金額のNegativeをFalseに変更
{
	if	(CmnEdit05008OffsetPrice.Value <  0) then                                       // 相殺金額
	begin
		m_cACControl	:= CmnEdit05008OffsetPrice;

		Result	:= FALSE;																// ｴﾗｰ
		Exit;
	end;
}
// <135> 2006/06/21 H.Kawato Add End

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidMasterDataRecord (strHojCode: String): Boolean;
var
	dqMasterData: TMQuery;

begin
	if	(Trim (strHojCode) = '') then
	begin
		Result	:= FALSE;
		Exit;
	end;

	if	(m_nCurCodeAttribute <= 1) then
		strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT GCode FROM MTOKUI ');
		SQL.Add   ('WHERE  RDelKbn = 0 AND GCode = :strHojCode');

		ParamByName ('strHojCode'     ).AsString	:= strHojCode;

		Open ();

		if  (not EOF) then
			Result	:= FALSE
		else
			Result	:= TRUE;
    end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnConvertStringFieldValue (strDescription: String): String;
var
	nPosition	 : Integer;
	strConvString: String;

begin
	strConvString	:= strDescription;

	for	nPosition := 1 to StrLen (PChar (strDescription)) do
	begin
		if	(Copy (strDescription, nPosition, 1) = '''') then
		begin
			strConvString	:= Copy (strDescription, 1, nPosition);
			strConvString	:= strConvString + Copy (strDescription, nPosition, 256);
			Break;
		end;
	end;

	Result	:= strConvString;
end;


//***********************************************************************************************************/
//     ツリー生成処理
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCreateTreeViewItem (cNode: TTreeNode; dqMasterData: TMQuery);
var
	cNodeWork :	TTreeNode;
	pItemRec  : PTreeViewRec;
	strHojCode: String;
	nNCODE    : Extended;

begin
	with (dqMasterData) do
	begin
		nNCode	    := FieldByName ('BasedNCode').AsFloat;
		strHojCode	:= FieldByName ('GCode').AsString;

		if	(m_nCurCodeAttribute <= 1) then
			strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

		if	((FieldByName ('SumKbn'   ).AsInteger =  0) and
			 (FieldByName ('HojyoKbn2').AsInteger <> 1)) then
			Exit;

		New (pItemRec);

		if	(FieldByName ('SumKbn').AsInteger = 0) then
			pItemRec^.nItemDivision	:= FieldByName ('SumKbn').AsInteger
		else
		begin
			if	(FieldByName ('PayRootKbn').AsInteger = 0) then
				pItemRec^.nItemDivision	:= TREE_PARENT_INVALID
			else
				pItemRec^.nItemDivision	:= FieldbyName ('SumKbn').AsInteger;
		end;

		pItemRec^.strHojCode		:= strHojCode;
		pItemRec^.nNCODE    		:= nNCODE;
		pItemRec^.strDescription	:= FieldByName ('NMK').AsString;

		if	((not (FieldByName ('NCode').IsNull)) and (FieldByName ('NCode').AsInteger = 0)) then
			pItemRec^.nItemDivision	:= TREE_GENERAL;

		cNodeWork	:= CmnTreeView.Items.AddChildObjectFirst (cNode, pItemRec^.strDescription, pItemRec);

//		if	(pItemRec^.nItemDivision = TREE_CHILD) then
//		begin
//			cNodeWork.ImageIndex	:= TREE_INDEX_CHILD;
//			cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;
//		end
//		else if	(pItemRec^.nItemDivision = TREE_CHILD_INVALID) then
//		begin
//			cNodeWork.ImageIndex	:= TREE_INDEX_CHILD_INVALID;
//			cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;
//		end
//		else if	(pItemRec^.nItemDivision = TREE_GENERAL) then
//		begin
//			cNodeWork.ImageIndex	:= TREE_INDEX_GENERAL;
//			cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;
//		end
//		else
//		begin
//			if	(pItemRec^.nItemDivision = TREE_PARENT) then
//				cNodeWork.ImageIndex	:= TREE_INDEX_PARENT
//			else
//				cNodeWork.ImageIndex	:= TREE_INDEX_PARENT_INVALID;

//			cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;

//			fnCreateTreeViewItems (cNodeWork);
//		end;

		case (pItemRec^.nItemDivision) of
			TREE_CHILD		  :	cNodeWork.ImageIndex	:= TREE_INDEX_CHILD;
			TREE_CHILD_INVALID:	cNodeWork.ImageIndex	:= TREE_INDEX_CHILD_INVALID;
			TREE_GENERAL	  :	cNodeWork.ImageIndex	:= TREE_INDEX_GENERAL;
			TREE_PARENT		  :	cNodeWork.ImageIndex	:= TREE_INDEX_PARENT;
			else				cNodeWork.ImageIndex	:= TREE_INDEX_PARENT_INVALID;
		end;

		cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;

		if	((pItemRec^.nItemDivision <> TREE_CHILD        ) and
			 (pItemRec^.nItemDivision <> TREE_CHILD_INVALID) and
			 (pItemRec^.nItemDivision <> TREE_GENERAL      )) then
			fnCreateTreeViewItems (cNodeWork);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCreateTreeViewItemEx (cNode: TTreeNode; dqMasterData: TMQuery);
var
	dqMasterChild: TMQuery;
	cNodeWork	 : TTreeNode;
	pItemRec	 : PTreeViewRec;
	strHojCode	 : String;
    nNCODE       : Extended;
begin
	dqMasterChild	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterChild);						// DBとMQueryの接続

	with (dqMasterChild) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT hm.GCODE,ni.PayNCode, hm.NMK FROM MTOKUI hm, PayNayoseInfo ni ');
		SQL.Add   ('WHERE  hm.RDelKbn = 0 AND ni.NayoseSyu = 1 AND ');
		SQL.Add   ('       ni.NayoseKbn = 1 AND hm.NCode = ni.PayNCode AND ni.NayoseOyaNCode = :strHojCode ');
		SQL.Add   ('ORDER BY hm.GCode');

		ParamByName ('strHojCode'     ).AsFloat	:= dqMasterData.FieldByName ('PayNCODE').AsFloat;

		Open ();

		while (not EOF) do
		begin
			New (pItemRec);

			strHojCode	:= FieldByName ('GCode').AsString;
			nNCode	    := FieldByName ('PayNCODE').AsFloat;

			if	(m_nCurCodeAttribute <= 1) then
				strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

			pItemRec^.nItemDivision		:= TREE_CHILD_SUM;
			pItemRec^.strHojCode		:= strHojCode;
			pItemRec^.nNCODE     		:= nNCode;
			pItemRec^.strDescription	:= FieldByName ('NMK').AsString;

			cNodeWork	:= CmnTreeView.Items.AddChildObject (cNode, pItemRec^.strDescription, pItemRec);

			cNodeWork.ImageIndex	:= TREE_INDEX_CHILD_SUM;
			cNodeWork.SelectedIndex	:=cNodeWork.ImageIndex + 1;

			Next ();
		end;
	end;

	dqMasterChild.Close ();
	dqMasterChild.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCreateTreeViewItems (cNode: TTreeNode);
var
	dqMasterData: TMQuery;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT ht.SumNCode, ht.BasedNCode, hm.SumKbn, ');
		SQL.Add   ('       hm.NMK, hm.HojyoKbn2, hm.PayRootKbn, hm.NCode,hm.GCode FROM HojyoTree ht, MTOKUI hm ');
		SQL.Add   ('WHERE  ht.MasterKbn = :nMasterDivision AND ht.SumNCode = :strSumCode AND ');
		SQL.Add   ('       hm.RDelKbn = 0 AND hm.NCode = ht.BasedNCode ');
        SQL.Add   (' and   hm.TemplateKbn=0');              // <102>
		SQL.Add   ('ORDER BY EntNo DESC');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strSumCode'     ).AsFloat 	:= PTreeViewRec (cNode.Data)^.nNCODE;

		//Open ();

        if not Open then
            ShowMessage('Not Open!');

		while (not EOF) do
		begin
			fnCreateTreeViewItem (cNode, dqMasterData);

			Next ();
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCreateTreeViewItemsEx (cNode: TTreeNode);
var
	dqMasterData: TMQuery;
	cNodeWork	: TTreeNode;
	pItemRec	: PTreeViewRec;
	strHojCode	: String;
    nNCODE      : Extended;
begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT hm.GCODE,ni.PayNCode, hm.NMK FROM MTOKUI hm, PayNayoseInfo ni ');
		SQL.Add   ('WHERE  hm.RDelKbn = 0 AND ni.NayoseSyu = 1 AND ni.NayoseKbn = 2 AND hm.NCode = ni.PayNCode ');
        SQL.Add   (' and   hm.TemplateKbn=0');              // <102>
		SQL.Add   ('ORDER BY hm.GCode');

		Open ();

		while (not EOF) do
		begin
			New (pItemRec);

			strHojCode	:= FieldByName ('GCode').AsString;
			nNCODE  	:= FieldByName ('PayNCode').AsFloat;

			if	(m_nCurCodeAttribute <= 1) then
				strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (strHojCode))]);

			pItemRec^.nItemDivision		:= TREE_PARENT_SUM;
			pItemRec^.strHojCode		:= strHojCode;
			pItemRec^.nNCODE    		:= nNCODE;
			pItemRec^.strDescription	:= FieldByName ('NMK').AsString;

			cNodeWork	:= CmnTreeView.Items.AddChildObject (cNode, pItemRec^.strDescription, pItemRec);

			cNodeWork.ImageIndex	:= TREE_INDEX_PARENT_SUM;
			cNodeWork.SelectedIndex	:= cNodeWork.ImageIndex + 1;

			fnCreateTreeViewItemEx (cNodeWork, dqMasterData);

			Next ();
		end;
    end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeleteMasterRecord (nNCODE: Extended): Boolean;
begin
	m_cDataModule.BeginTran (m_cDBSelect);

	if	(not fnDeleteMasterRecordHojyoTree (nNCODE)) then							// 補助加算体系ﾏｽﾀ更新
	begin
		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordHojyoMA (nNCODE)) then 							// 補助基本ﾏｽﾀ更新
	begin
		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	if	(not fnDeleteMasterRecordSumSystem (nNCODE)) then
	begin
		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	m_cDataModule.Commit (m_cDBSelect);													// ｺﾐｯﾄ(反映)

	m_nCurItemDivision	:= -1;

	fnDeleteTreeViewItems          (nNCODE);
	fnDeleteTreeViewItemsSumSystem (nNCODE);

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeleteMasterRecordHojyoMA (nNCODE: Extended): Boolean;
var
	dqMasterData: TMQuery;
//	nInCode		: Integer;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

//	nInCode	:= 0;

	with (dqMasterData) do
	begin
{
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode FROM MTOKUI ');
		SQL.Add   ('WHERE  NCode = :strHojCode');

		ParamByName ('strHojCode'     ).AsFloat	:= nNCODE;

		Open ();

		if	(not EOF) then
			nInCode	:= FieldByName ('NCode').AsInteger;
}

		Close ();

		SQL.Clear ();
		SQL.Add   ('UPDATE MTOKUI SET RDelKbn = 1 ');
		SQL.Add   ('WHERE  NCode = :strHojCode');

//		ParamByName ('nInCode'        ).AsInteger	:= nInCode;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeleteMasterRecordHojyoTree (nNCODE: Extended): Boolean;
var
	dqMasterTree: TMQuery;

begin
	dqMasterTree	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);							// DBとMQueryの接続

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('DELETE FROM HojyoTree WHERE MasterKbn = :nMasterDivision AND BasedNCode = :strHojCode');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat	:= nNCODE;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		m_nHojyoTree	:= 1;
	end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeleteMasterRecordSumSystem (nNCODE: Extended): Boolean;
var
	dqMasterTree: TMQuery;
	fParent		: Boolean;

begin
	dqMasterTree	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);							// DBとMQueryの接続

	fParent	:= FALSE;

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT PayNCode FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
		SQL.Add   ('       NayoseSyu = 1 AND PayNCode = :strHojCode AND NayoseKbn = 2');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCode;

		Open ();

		if	(not EOF) then
			fParent	:= TRUE;

		Close ();

		SQL.Clear ();
		SQL.Add   ('DELETE FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND NayoseSyu = 1 AND PayNCode = :strHojCode');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		if	(fParent) then
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('DELETE FROM PayNayoseInfo ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
			SQL.Add   ('       NayoseSyu = 1 AND NayoseKbn = 1 AND NayoseOyaNCode = :strHojCode');

			ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
			ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;

			if	(not ExecSQL ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

				dqMasterTree.Close ();
				dqMasterTree.Free  ();

				Result	:= FALSE;
				Exit;
			end;
		end;

		m_nPayNayoseInfo	:= 1;
	end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeleteOffsetRecord (): Boolean;
begin
	if	(MJSMessageBoxEX (Self,Format (_MessageDel01, [CmnEdit05001SeqNo.AsInteger]),
													'相殺情報削除', mjQuestion, mjYesNo, mjDefNo) = mrYes) then
	begin
// <136> 2006/06/21 H.Kawato Mod
//        m_ProgRendoFlg  := True;        // <128> 2006/04/20 H.Kawato Add
        m_bSousaiChgFlg := True;
// <136> 2006/06/21 H.Kawato Mod

		CmnEdit05002KmkCode.Value		:= 0;
		CmnEdit05002KmkCode.InputFlag	:= TRUE;

		fnInitializeOffsetJournalInfo ();

		fnSetChangeFlagCheckItems (CmnEdit05002KmkCode       , FALSE);
		fnSetChangeFlagCheckItems (CmnEdit05003HojCodeNumeric, FALSE);
		fnSetChangeFlagCheckItems (CmnEdit05004HojCodeNumeric, FALSE);
		fnSetChangeFlagCheckItems (CmnEdit05005HojCodeNumeric, FALSE);
		fnSetChangeFlagCheckItems (CmnEdit05006TaxCode       , FALSE);
		fnSetChangeFlagCheckItems (CmnEdit05007TaxRate       , FALSE);
		fnSetChangeFlagCheckItems (CmnEdit05008OffsetPrice   , FALSE);

		fnSetMemDataOffsetRecord ();

		m_cACControl	:= CmnEdit05001SeqNo;
		m_cACControl.SetFocus ();
	end;

	Result	:= TRUE;
end;

// <153> 2006/12/19 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCopyStandardInfomation (): Boolean;
begin
    Result  := True;

    // 該当情報をセット
    m_bShowPrjInfo  := True;
    m_bStandardInfo := True;

    fnShowScreenInformations;                   // データ表示

    m_bShowPrjInfo  := False;
    m_bStandardInfo := False;

    m_ProgRendoFlg  := TRUE;                    // 進捗連動処理フラグ <162> Add
end;
// <153> 2006/12/19 H.Kawato Add End


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnDeleteTreeViewItems (nNCODE: Extended);
var
	nCount: Integer;																	// ｶｳﾝﾀｰ

begin
	for	nCount := 0 to CmnTreeView.Items.Count - 1 do
	begin
		if	(CompareStr (FloatToStr(PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nNCODE), FloatToStr(nNCODE)) <> 0) then
			Continue;

		Dispose (CmnTreeView.Items [nCount].Data);

		CmnTreeView.Items [nCount].Delete ();
		Break;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnDeleteTreeViewItemsSumSystem (nNCODE: Extended);
var
	nCount		: Integer;																// ｶｳﾝﾀｰ
	nSumDivision: Integer;

begin
	nSumDivision	:= 0;

	for	nCount := 0 to CmnTreeView.Items.Count - 1 do
	begin
		if	(((PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision = TREE_CHILD_SUM ) or
			  (PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision = TREE_PARENT_SUM)) and
			  (CompareStr (FloatToStr(PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nNCode), FloatToStr(nNCODE)) = 0)) then
		begin
			nSumDivision	:= PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision;
			Break;
		end;
	end;

	if	(nSumDivision = 0) then
		Exit;

	fnEraseTreeViewItems (nSumDivision, nNCODE);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnExchangeCharacterKanaDesc (strDescription: String): String;
var
	nPosition	   : Integer;
	chExchange	   : Char;
	strExchangeChar: String;

begin
	strExchangeChar	:= '';

	for	nPosition := 1 to StrLen (PChar (strDescription)) do
	begin
		chExchange	:= strDescription [nPosition];

		case (chExchange) of
			Char (VK_BACK),'0'..'9','A'..'Z','ｱ'..'ﾝ','ｦ',' ','ﾞ','ﾟ','｢','｣','\','/',',','.','-','(',')' :
					begin
						strExchangeChar	:= strExchangeChar + chExchange;
					end;
			'ｧ':		strExchangeChar	:= strExchangeChar + 'ｱ';
			'ｨ':		strExchangeChar	:= strExchangeChar + 'ｲ';
			'ｩ':		strExchangeChar	:= strExchangeChar + 'ｳ';
			'ｪ':		strExchangeChar	:= strExchangeChar + 'ｴ';
			'ｫ':		strExchangeChar	:= strExchangeChar + 'ｵ';
			'ｬ':		strExchangeChar	:= strExchangeChar + 'ﾔ';
			'ｭ':		strExchangeChar	:= strExchangeChar + 'ﾕ';
			'ｮ':		strExchangeChar	:= strExchangeChar + 'ﾖ';
			'ｯ':		strExchangeChar	:= strExchangeChar + 'ﾂ';
			'{':		strExchangeChar	:= strExchangeChar + '(';
			'[':		strExchangeChar	:= strExchangeChar + '(';
			'}':		strExchangeChar	:= strExchangeChar + ')';
			']':		strExchangeChar	:= strExchangeChar + ')';
			'ｰ':		strExchangeChar	:= strExchangeChar + '-';
			'a'..'z':	strExchangeChar	:= strExchangeChar + Chr (Ord (chExchange) - 32);
		end;
	end;

	Result	:= strExchangeChar;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnEraseMasterRecordPayNayoseInfo (nSumDivision: Integer; nNCode:Extended): Boolean;
var
	dqMasterTree: TMQuery;

begin
	dqMasterTree	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);							// DBとMQueryの接続

	if	(nSumDivision = TREE_PARENT_SUM) then
		nSumDivision	:= 2															// 名寄せ区分: 2=名寄せ親
	else
		nSumDivision	:= 1;															// 名寄せ区分: 1=名寄せ子

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('DELETE FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
		SQL.Add   ('       NayoseSyu = 1 AND PayNCode = :strHojCode AND NayoseKbn = :nProcDivision');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;
		ParamByName ('nProcDivision'  ).AsInteger	:= nSumDivision;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		if	(nSumDivision = 2) then														// 名寄せ区分: 2=名寄せ親
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('DELETE FROM PayNayoseInfo ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
			SQL.Add   ('       NayoseSyu = 1 AND NayoseKbn = 1 AND NayoseOyaNCode = :strHojCodeParent');

			ParamByName ('nMasterDivision' ).AsInteger	:= MASTER_CUSTOMER;
			ParamByName ('strHojCodeParent').AsFloat 	:= nNCODE;

			if	(not ExecSQL ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

				dqMasterTree.Close ();
				dqMasterTree.Free  ();

				Result	:= FALSE;
				Exit;
			end;
		end;

		m_nPayNayoseInfo	:= 1;
	end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnEraseMasterRecordSumSystem (nSumDivision: Integer; nNCODE: Extended): Boolean;
begin
	m_cDataModule.BeginTran (m_cDBSelect);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始

	if	(not fnEraseMasterRecordPayNayoseInfo (nSumDivision, nNCODE)) then			// 名寄せ情報ﾏｽﾀ ﾚｺｰﾄﾞ消去
	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	m_cDataModule.Commit (m_cDBSelect);

	fnEraseTreeViewItemSumSystem (nNCODE);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnEraseTreeViewItems (nSumDivision: Integer; nNCODE: Extended);
var
	cNode	   : TTreeNode;
	cNodeBase  : TTreeNode;
	cNodeDelete: TTreeNode;
	nCount	   : Integer;

begin
	cNodeBase	:= nil;

	for	nCount := 0 to CmnTreeView.Items.Count - 1 do
	begin
		if	(((PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision = TREE_CHILD_SUM ) or
			  (PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision = TREE_PARENT_SUM)) and
			 (CompareStr (FloatToStr(PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nNCode), FloatToStr(nNCode)) = 0)) then
		begin
			cNodeBase	:= CmnTreeView.Items [nCount];
			Break;
		end;
	end;

	if	(cNodeBase = nil) then
		Exit;

	if	(nSumDivision = TREE_PARENT_SUM) then											// 名寄せ親
	begin
		cNode	:= cNodeBase.GetFirstChild ();											// 先頭の子ﾉｰﾄﾞ取得

		while (TRUE) do
		begin
			if	(cNode = nil) then
				Break;

			cNodeDelete	:= cNode;
			cNode		:= cNode.GetNextSibling ();										// 次の子ﾉｰﾄﾞ取得

			Dispose (cNodeDelete.Data);

			cNodeDelete.Delete ();
		end;
	end;

	Dispose (cNodeBase.Data);

	cNodeBase.Delete ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnEraseTreeViewItemSumSystem (nNCODE: Extended);
var
	cNodeParent: TTreeNode;
	cNode	   : TTreeNode;

begin
	cNodeParent	:= m_cNodeSumSystem.GetFirstChild ();									// 先頭の名寄せ親ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNodeParent = nil) then
			Break;

		if	(CompareStr (FloatToStr(PTreeViewRec (cNodeParent.Data)^.nNCode), FloatToStr(nNCODE)) = 0) then
		begin
			Dispose (cNodeParent.Data);
			cNodeParent.Delete ();
			Exit;
		end;

		cNode	:= cNodeParent.GetFirstChild ();										// 先頭の名寄せ子ﾉｰﾄﾞ取得

		while (TRUE) do
		begin
			if	(cNode = nil) then
				Break;

			if	(CompareStr (FloatToStr(PTreeViewRec (cNode.Data)^.nNCode), FloatToStr(nNCODE)) = 0) then
			begin
				Dispose (cNode.Data);
				cNode.Delete ();
				Exit;
			end;

			cNode	:= cNode.GetNextSibling ();											// 次の名寄せ子ﾉｰﾄﾞ取得
		end;

		cNodeParent	:= cNodeParent.GetNextSibling ();									// 次の名寄せ親ﾉｰﾄﾞ取得
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetAdoptInformation (nMasterDivision: Integer; var nAdoption: Integer;
						var nCodeDigit: Integer; var nCodeAttribute: Integer; var strDescription: String): Boolean;
var
	nItemPosition: Integer;

begin
	if	((nMasterDivision = MASTER_CUSTOMERPLUS01) or
		 (nMasterDivision = MASTER_CUSTOMERPLUS02)) then
		nMasterDivision	:= MASTER_CUSTOMER;

	nAdoption		:= 0;
	nCodeDigit		:= 0;
	nCodeAttribute	:= 0;
	strDescription	:= '';

//<114>	for nItemPosition := 0 to 15 do
//<149>	for nItemPosition := 0 to 35 do
	for nItemPosition := 0 to 47 do
	begin
		if  (m_arAdoptInfo [nItemPosition].nMasterDivision = nMasterDivision) then
		begin
			nAdoption		:= m_arAdoptInfo [nItemPosition].nAdoption;
			nCodeDigit		:= m_arAdoptInfo [nItemPosition].nCodeDigit;
			nCodeAttribute	:= m_arAdoptInfo [nItemPosition].nCodeAttribute;
			strDescription	:= m_arAdoptInfo [nItemPosition].strDescription;

			Result	:= TRUE;
			Exit;
		end;
	end;

	Result	:= FALSE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetBaseInfoValueDivideSheets (): Integer;
var
	dqMasterData  : TMQuery;
	nBaseInfoValue: Integer;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	nBaseInfoValue	:= 1;

	with (dqMasterData) do																// ﾚｺｰﾄﾞ存在ﾁｪｯｸ
	begin
		Close ();

		SQL.Clear ();
		SQL.Add	  ('SELECT DataNum FROM PayBaseInfo WHERE SystemCode = 1 AND ItemID = 2303');

		Open ();

		if	(not EOF) then
			nBaseInfoValue	:= FieldByName ('DataNum').AsInteger;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= nBaseInfoValue;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetBitmapSelectedTag (nSelectedTag: Integer): TBitmap;
var
	bmpTag: TBitmap;

begin
	bmpTag	:= nil;

	case (nSelectedTag) of
		1:	bmpTag	:= CmnPopupMenuTreeViewTag01.Bitmap;
		2:	bmpTag	:= CmnPopupMenuTreeViewTag03.Bitmap;
        3:	bmpTag	:= CmnPopupMenuTreeViewTag02.Bitmap;
		4:	bmpTag	:= CmnPopupMenuTreeViewTag04.Bitmap;
	end;

	Result	:= bmpTag;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetDescriptionSelectedItem (cNumEdit: TMNumEdit; var strDescription: String): Boolean;
var
	nPosition: Integer;

begin
	strDescription	:= '';

	nPosition	:= fnGetIndexSelectItem (cNumEdit);

	if	(nPosition = -1) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	strDescription	:= cNumEdit.SelectItems.Strings [nPosition];

	for	nPosition := 1 to StrLen (PChar (strDescription)) do
	begin
		if	(Copy (strDescription, nPosition, 1) = ':') then
		begin
			strDescription	:= Copy (strDescription, nPosition + 2, 256);
			Break;
		end;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetDivisionSelectedTag (strHojCode: String): Integer;
var
	dqMasterData: TMQuery;
	nTagDivision: Integer;

begin
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	nTagDivision	:= 0;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT FusenKbn FROM MFusenInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND HojyoCode = :strHojCode');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsString	:= strHojCode;

		Open ();

		if	(not EOF) then
			nTagDivision	:= FieldByName ('FusenKbn').AsInteger;
    end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= nTagDivision;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetEditedAccountNumber (strAccountNo: String): String;
var
	nAccountNo: Int64;

begin
	if	(Trim (strAccountNo) = '') then
	begin
		Result	:= '';
		Exit;
	end;

	nAccountNo	:= StrToInt64 (Trim (strAccountNo));									// 口座番号
{ <180> ↓
	if	(nAccountNo = 0) then
	begin
		Result	:= '';
		Exit;
	end;

	if	(nAccountNo > 9999999) then														// 8桁
		strAccountNo	:= IntToStr (nAccountNo)
	else																				// 8桁未満(7桁表示)
		strAccountNo	:= Format ('%.7d', [nAccountNo]);
<180> ↑} // <180> ↓
	if	Length(Trim (strAccountNo)) < 8 then
		strAccountNo	:= Format ('%.7d', [nAccountNo]);
    // <180> ↑

	Result	:= strAccountNo;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetEditedVisitorCode (strVisitorCode: String): String;
begin
	if	(Trim (strVisitorCode) = '') then
	begin
		Result	:= '';
		Exit;
	end;

	Result	:= Format ('%.10d', [StrToInt64 (Trim (strVisitorCode))]);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetEntryNumberFinal (strHojCode: Extended): Integer;
var
	dqMasterTree: TMQuery;
	nEntryNo	: Integer;

begin
	dqMasterTree	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);							// DBとMQueryの接続

	nEntryNo	:= 0;

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT EntNo FROM HojyoTree ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND SumNCode = :strDstExCode ORDER BY EntNo DESC');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strDstExCode'   ).AsFloat  	:= strHojCode;

		Open ();

		if  (not EOF) then
			nEntryNo	:= FieldByName ('EntNo').AsInteger;
    end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= (nEntryNo + 100) div 100 * 100;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnGetEntryOrderClosingDays (var arEntryOrder: array of Integer);
var
	arValues   : array [0..2] of Integer;
	nCountPlus : Integer;
	nCountMinus: Integer;

begin
	for	nCountPlus := 0 to 2 do
	begin
		arEntryOrder [nCountPlus]	:= 0;
		arValues     [nCountPlus]	:= Trunc (TMNumEdit (
											MJSFindCtrl (Self, Format (_ClsDay, [3 + nCountPlus * 4]))).Value);

		if	(arValues [nCountPlus] = 0) then
			arValues [nCountPlus]	:= 999;
	end;

	if	(arValues [0] <= arValues [1]) then
	begin
		arEntryOrder [0]	:= 1;
		arEntryOrder [1]	:= 2;
	end
	else
	begin
		arEntryOrder [0]	:= 2;
		arEntryOrder [1]	:= 1;
	end;

	for	nCountPlus := 0 to 1 do
	begin
		if	(arValues [2] <= arValues [arEntryOrder [nCountPlus] - 1]) then
		begin
			for	nCountMinus := 2 downto nCountPlus + 1 do
				arEntryOrder [nCountMinus]	:= arEntryOrder [nCountMinus - 1];

			arEntryOrder [nCountPlus]	:= 3;
			Break;
		end;
	end;

	if	(arEntryOrder [2] = 0) then
		arEntryOrder [2]	:= 3;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetGuideComment (nFieldID: Integer): String;
var
	strComment: String;

begin
	strComment	:= '';

	case (nFieldID) of
		1001:		strComment	:= '＜0：比率 1：定額＞' +
								   #13#10'　支払予定額の分解方法を選択します。';
		1002, 1007, 1012, 1017, 1022:
			begin
				if	(m_nProcDivision = 0) then
					strComment	:= '＜0：なし 1：振込 2：期日指定振込 3：手形 4：小切手 5：現金＞'
				else
					strComment	:= '＜0：なし 1：振込 3：手形 4：小切手 5：現金＞';

				strComment	:= strComment + #13#10'　支払方法を選択します。';
			end;
		1003, 1008, 1013, 1018, 1023:
			begin
				if	(CmnEdit01001DecDivision.AsInteger = 0) then
					strComment	:= '　各支払方法での支払比率を登録します。'
				else
					strComment	:= '　各支払方法での支払額を入力します。条件を満たさない場合は、その支払方法には分解されません。';
			end;
		1004, 1009, 1014, 1019, 1024:
					strComment	:= '　支払最低金額を登録します。分解時にこの金額に満たなかった場合、最後の支払方法に振り替えます。' +
								   #13#10'　また最終行の登録は無効になります。';
		1005, 1010, 1015, 1020, 1025:
					strComment	:= '　ｍ×（10のｎ乗）の範囲で入力して下さい。（ｍは1～9まで、ｎは任意の値とする。）' +
								   #13#10'　また最終行の登録は無効になります。';
		1006, 1011, 1016, 1021, 1026:
					strComment	:= '＜0：切り捨て 1：切り上げ 2：四捨五入＞' +
								   #13#10'  分解基準値より金額を計算する時、端数が生じた場合の処理方法を選択します。' +
								   #13#10'  なお、最終行の登録は無効になります。';
		2009, 3009:	strComment	:= '＜1：普通 2：当座 4：貯蓄 9：その他＞';
		2011, 3011:	strComment	:= '＜0：EDI情報 1：顧客コード１･２＞' +
								   #13#10'　ファームバンキングファイル作成時にどちらを使用するかを選択します。';
		2012..2013, 3012..3013:
					strComment	:= '　10桁以内で入力します。';
		2014, 3014:	strComment	:= '　半角20文字以内で入力します。';
		2015, 3015:	strComment	:= '＜0：自動設定 1：自社負担 2：他社負担＞' +
								   #13#10'　自動設定の場合は、基本情報登録の区分に従います。';
		2016, 3016:	strComment	:= '＜0：他銀行 1：同銀行他支店 2：同銀行同支店＞' +
								   #13#10'　手数料計算の時に使用する振込元銀行と振込先銀行の関係を選択します。';
		2017, 3017:	strComment	:= '＜0：電信 1：文書＞';
		2018:       strComment	:= '＜0：しない 1：する＞';                     // <137> Add
		3018:		strComment	:= '　振込のサイト日数を0～9999の範囲で入力します。サイトは、支払日の翌日から入力された日数を加算して' +
								   #13#10'　満期日となります。';
		4002:		strComment	:= '　手形のサイト日数を0～9999の範囲で入力します。サイトは、支払日の翌日から入力された日数を加算して' +
								   #13#10'　満期日となります。';
		4003:		strComment	:= '　手形を分割して発行する場合の限度枚数を入力します。';
		4004, 4007:	strComment	:= '＜0：郵送する 1：郵送しない＞';
		4005, 4008:	strComment	:= '＜0：自社負担 1：他社負担＞';
		5007, 6014, 6016:
					strComment	:= '＜0：標準税率 1：３％ 2：５％＞';
		6001:		strComment	:= '＜0：その他一般 1：連結子（親）会社 2：非連結子会社 3：関連会社＞';
		6002:		strComment	:= '　自動仕訳作成時に代替してセットする支払先を登録します。';
		6003:		strComment	:= '　受取人名を入力します。';
		6004..6005:	strComment	:= '　支払先の郵便番号を入力します。';
		6006..6007:	strComment	:= '　支払先の住所を入力します。';
		6008:		strComment	:= '　支払先の電話番号を入力します。';
		6009:		strComment	:= '　支払通知書に印刷する送付先部署名を入力します。';
		6010:		strComment	:= '　支払通知書に印刷する担当者を入力します。';
		6011:		strComment	:= '＜0：なし 1：様 2：殿 3：御中＞' +
								   #13#10'　敬称を選択します。';
// <129> 2006/05/02 H.Kawato Mod
//		6012:		strComment	:= '＜0：標準 1：送付用 2：集金用＞';
		6012:		strComment	:= '＜0：標準 1：送付用 2：集金用 3:その他＞';
		6013:		strComment	:= '＜0：科目に従う 10～99：消費税コード＞' +
								   #13#10'　売上消費税コードを選択します。';
		6015:		strComment	:= '＜0：科目に従う 10～99：消費税コード＞' +
								   #13#10'　仕入消費税コードを選択します。';
		7001, 7002:
			begin
				strComment	:= '＜0：科目に従う 10～99＞';

				if	(nFieldID = 7001) then
					strComment	:= strComment + #13#10'　借方'
				else
					strComment	:= strComment + #13#10'　貸方';

				strComment	:= strComment + '資金繰コードを選択します。';
			end;
	end;

	Result	:= strComment;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnGetIndexSelectItem (cNumEdit: TMNumEdit): Integer;
var
	nPickNo	 : Integer;
	nCount	 : Integer;
	nPosition: Integer;

begin
	for	nPosition := 0 to cNumEdit.SelectItems.Count - 1 do
	begin
		nPickNo	:= -1;

		for	nCount := 1 to StrLen (PChar (cNumEdit.SelectItems.Strings [nPosition])) do
		begin
			if	(Copy (cNumEdit.SelectItems.Strings [nPosition], nCount, 1) = ':') then
			begin
				nPickNo	:= StrToInt (Trim (Copy (cNumEdit.SelectItems.Strings [nPosition], 1, nCount - 1)));
				Break;
			end;
		end;

		if	(cNumEdit.AsInteger = nPickNo) then
		begin
			Result	:= nPosition;
			Exit;
		end;
	end;

	Result	:= -1;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeCheckItems ();
var
	pCheckItem: PCheckItemRec;
	nItems	  : Integer;

begin
	m_cCheckItems	:= TList.Create ();

	for nItems := 0 to ITEMS_COUNT - 1 do
	begin
		New (pCheckItem);

		pCheckItem^.nFieldID	:= _CheckItems [nItems];
		pCheckItem^.fNoCheck	:= FALSE;
		pCheckItem^.fChangeData	:= FALSE;

		m_cCheckItems.Add (pCheckItem);
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeComInformation ();
var
	dqMasterInfo: TMQuery;
	cMessageRec : TMJSMsgRec;
begin
	m_nDateFormatDivision	:= 0;														// 和暦/西暦区分
	m_nMailAdoption			:= 0;														// ﾒｰﾙ会計処理区分
	m_nCompDivision			:= 0;														// 公益法人区分
	m_strValidCharacters	:= '';														// 使用可能ｺｰﾄﾞ
	m_nTaxInfoAccDivision	:= 0;														// 会計処理区分

	dqMasterInfo	:= TMQuery.Create (Self);									        // MQueryの構築

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);							// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT YearKbn,  DTName7 FROM DTMAIN');

		Open ();

		if	(not EOF) then
		begin
			m_nDateFormatDivision	:= FieldByName ('YearKbn').AsInteger;				// 和暦/西暦区分
			m_strValidCharacters	:= FieldbyName ('DTName7').AsString;				// 使用可能ｺｰﾄﾞ
		end;

		Close ();
		SQL.Clear ();
		SQL.Add   ('SELECT ComKbn3, ComKbn4 FROM DTMAIN_MAS');

		Open ();

		if	(not EOF) then
		begin
			m_nMailAdoption			:= FieldByName ('ComKbn3').AsInteger;				// ﾒｰﾙ会計処理区分
			m_nCompDivision			:= FieldByName ('ComKbn4').AsInteger;				// 公益法人区分
		end;

		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT AccProKbn FROM TaxInfo');

		Open ();

		if	(not EOF) then
			m_nTaxInfoAccDivision	:= FieldByname ('AccProKbn').AsInteger;				// 会計処理区分

		Close ();

		SQL.Clear ();
// <101>		SQL.Add   ('SELECT KmkNCode FROM KmkInfo WHERE SpeCode = 10301 AND MasterKbn = 1 AND SumKbn = 0');
		SQL.Add   ('SELECT NCode FROM KmkInfo WHERE SpeCode = 10301 AND MasterKbn = 1 AND SumKbn = 0');

		Open ();

		if	(not EOF) then
// <101>			m_nKmkCompound01	:= FieldByName ('KmkNCode').AsInteger					// 複合科目ｺｰﾄﾞ
			m_nKmkCompound01	:= FieldByName ('NCode').AsInteger					// 複合科目ｺｰﾄﾞ
		else
			m_nKmkCompound01	:= 0;

		Close ();

		SQL.Clear ();
// <101>		SQL.Add   ('SELECT KmkNCode FROM KmkInfo WHERE SpeCode = 10302 AND MasterKbn = 1 AND SumKbn = 0');
		SQL.Add   ('SELECT NCode FROM KmkInfo WHERE SpeCode = 10302 AND MasterKbn = 1 AND SumKbn = 0');

		Open ();

		if	(not EOF) then
// <101>		m_nKmkCompound02	:= FieldByName ('KmkNCode').AsInteger					// 資金複合科目ｺｰﾄﾞ
			m_nKmkCompound02	:= FieldByName ('NCode').AsInteger					// 資金複合科目ｺｰﾄﾞ
		else
			m_nKmkCompound02	:= 0;
	end;

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

	if	(m_nDateFormatDivision = 0) then												// 和暦/西暦区分: 0=和暦
	begin
		CmnEdit00005AppDateStart.DateFormat	:=	dfEMD;
		CmnEdit00006AppDateEnd  .DateFormat	:=	dfEMD;
// <#NGEN> Mod St
//		CmnEdit00005AppDateStart.Gengou		:=	MdtCurGen;//'H'							// <222-8>MOD
//		CmnEdit00006AppDateEnd  .Gengou		:=	MdtCurGen;//'H'                         // <222-8>MOD
		CmnEdit00005AppDateStart.Gengou		:=	MasDateCtrl.MasGetNowGengo();
		CmnEdit00006AppDateEnd  .Gengou		:=	MasDateCtrl.MasGetNowGengo();
// <#NGEN> Mod Ed
	end
	else																				// 和暦/西暦区分: 1=西暦
	begin
		CmnEdit00005AppDateStart.DateFormat	:=	dfYMD;
		CmnEdit00006AppDateEnd  .DateFormat	:=	dfYMD;
		CmnEdit00005AppDateStart.Gengou		:=	#0;
		CmnEdit00006AppDateEnd  .Gengou		:=	#0;
	end;

{<100>
	case (MailEntCheck (m_cDBSelect, m_cDataModule, m_cComArea, MASTER_CUSTOMER, 1)) of
		DISPOSE_SETTLE    :	m_nReferMode	:= REFER;									// 決算確定の為参照のみ
		DISPOSE_MAILNOTUSE:	m_nReferMode	:= NORMAL;									// ﾒｰﾙ未採用の為通常処理
		DISPOSE_USUALLY   :	m_nReferMode	:= NORMAL;									// 通常処理
		DISPOSE_BASIC     :	m_nReferMode	:= BASICONLY;								// 基本のみ設定可能
		DISPOSE_REFER     :	m_nReferMode	:= REFER;									// 参照のみ
	end;
}
//    m_nReferMode	:= NORMAL;

	// 決算確定 権限取得
    fnGetGrants();

//--- <#3> St -----
	// 排他制御
	if m_nReferMode <> REFER then	// 参照以外
	begin
		// 排他制御ﾁｪｯｸ
		if fnExcept = 99 then
		begin
			m_cComArea.m_MsgStd.GetMsg (cMessageRec, 10, 113);

			MJSMessageBoxEx (Self,cMessageRec.sMsg, cMessageRec.sTitle, cMessageRec.icontype,
													cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);
			m_nReferMode := REFER
		end;
	end;
//--- <#3> Ed -----

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnInitializeExCodeAttribute (): Boolean;
var
//	dqMasterData	: TMQuery;
//	cDialogAttribute: TJNTCRP0040061f;
	nAdoption		: Integer;
	strDescription	: String;

begin
	fnGetAdoptInformation (MASTER_CUSTOMER, nAdoption, m_nCurCodeDigit, m_nCurCodeAttribute, strDescription);

	if	(nAdoption = 0) then															// 採用なし
	begin
		Result	:= FALSE;
		Exit;
	end;

{
	dqMasterData	:= TMQuery.Create (Self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT GCODE FROM MTOKUI ');
		SQL.Add   ('WHERE  RDelKbn = 0');

		Open ();

		if	(not EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= TRUE;
			Exit;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	cDialogAttribute	:= TJNTCRP0040061f.fnCreateDialog (Pointer (m_pRec), Self, m_cDBSelect);

	if	(cDialogAttribute.ShowModal () = mrCancel) then
	begin
		cDialogAttribute.Close ();
		cDialogAttribute.Free  ();

		Result	:= FALSE;
		Exit;
	end;

	m_arAdoptInfo [3].nAdoption			:= 1;
	m_arAdoptInfo [3].nCodeDigit		:= cDialogAttribute.m_nCodeDigit;
	m_arAdoptInfo [3].nCodeAttribute	:= cDialogAttribute.m_nCodeAttribute;
	m_nCurCodeDigit						:= cDialogAttribute.m_nCodeDigit;
	m_nCurCodeAttribute					:= cDialogAttribute.m_nCodeAttribute;

	cDialogAttribute.Close ();
	cDialogAttribute.Free  ();
}
	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreen ();
var
	nAdoption	  : Integer;
	nCount		  : Integer;
	strDescription: String;
	strFormat	  : String;

begin
	fnGetAdoptInformation (MASTER_CUSTOMER, nAdoption, m_nCurCodeDigit, m_nCurCodeAttribute, strDescription);

	CmnGridStandardExistCode.MaxLength	:= m_nCurCodeDigit;
	CmnGridStandardTotalCode.MaxLength	:= m_nCurCodeDigit;

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
		CmnGridStandardExistCode.Alignment		:= taRightJustify;
		CmnGridStandardTotalCode.Alignment		:= taRightJustify;
		CmnGridStandardExistCode.EditAlignment	:= taRightjustify;
		CmnGridStandardTotalCode.EditAlignment	:= taRightjustify;
		CmnGridStandardExistCode.MaxLength		:= m_nCurCodeDigit;
		CmnGridStandardTotalCode.MaxLength		:= m_nCurCodeDigit;
		CmnGridStandardExistCode.ImeMode		:= imDisable;
		CmnGridStandardTotalCode.ImeMode		:= imDisable;
		CmnGridStandardExistCode.Hankaku		:= FALSE;
		CmnGridStandardTotalCode.Hankaku		:= FALSE;

		CmnEdit00001HojCodeFree   .Visible	:= FALSE;
		CmnEdit06002HojCodeFree   .Visible	:= FALSE;
		CmnEdit00001HojCodeNumeric.Visible	:= TRUE;
		CmnEdit06002HojCodenumeric.Visible	:= TRUE;

		if	(m_nCurCodeAttribute = 1) then
			strFormat	:= StringOfChar ('0', m_nCurCodeDigit)
		else
			strFormat	:= '';

		CmnEdit00001HojCodeNumeric.FormatStr	:= strFormat;
		CmnEdit06002HojCodeNumeric.FormatStr	:= strFormat;

		CmnEdit00001HojCodeNumeric.Digits	:= m_nCurCodeDigit;
		CmnEdit06002HojCodeNumeric.Digits	:= m_nCurCodeDigit;
		CmnEdit00001HojCodeNumeric.MaxValue	:= StrToInt64 (StringOfChar ('9', m_nCurCodeDigit));
		CmnEdit06002HojCodeNumeric.MaxValue	:= StrToInt64 (StringOfChar ('9', m_nCurCodeDigit));
    end
	else
    begin
		CmnGridStandardExistCode.Alignment		:= taLeftJustify;
		CmnGridStandardTotalCode.Alignment		:= taLeftJustify;
		CmnGridStandardExistCode.EditAlignment	:= taLeftJustify;
		CmnGridStandardTotalCode.EditAlignment	:= taLeftJustify;
		CmnGridStandardExistCode.MaxLength		:= m_nCurCodeDigit;
		CmnGridStandardTotalCode.MaxLength		:= m_nCurCodeDigit;
		CmnGridStandardExistCode.ImeMode		:= imClose;
		CmnGridStandardTotalCode.ImeMode		:= imClose;
		CmnGridStandardExistCode.Hankaku		:= TRUE;
		CmnGridStandardTotalCode.Hankaku		:= TRUE;

		CmnEdit00001HojCodeNumeric.Visible		:= FALSE;
		CmnEdit06002HojCodenumeric.Visible		:= FALSE;
		CmnEdit00001HojCodeFree   .Visible		:= TRUE;
		CmnEdit06002HojCodeFree   .Visible		:= TRUE;
		CmnEdit00001HojCodeFree   .MaxLength	:= m_nCurCodeDigit;
		CmnEdit06002HojCodeFree   .MaxLength	:= m_nCurCodeDigit;
	end;

	CmnGridStandardExistName   .MaxLength		:= LENGTH_NAME_CUSTOMER;
	CmnGridStandardTotalName   .MaxLength		:= LENGTH_NAME_CUSTOMER;
	CmnEdit00003Name           .MaxLength		:= LENGTH_NAME_CUSTOMER;
	CmnMemDataStandardExistName.DisplayWidth	:= LENGTH_NAME_CUSTOMER;
	CmnMemDataStandardTotalName.DisplayWidth	:= LENGTH_NAME_CUSTOMER;

//	CmnLabelExCode           .Caption	:= strDescription + 'コード';
	CmnLabelClassCode        .Caption	:= strDescription + '分類';
	CmnLabelAddressGroupTitle.Caption	:= strDescription + '住所';

	for	nCount := 0 to Length (_PayMethod) - 1 do
	begin
		if	((m_nProcDivision = 1) and (nCount = 2)) then
			Continue;

		CmnEdit01002PaymentColumnDivision.SelectItems.Add (_PayMethod [nCount]);
		CmnEdit01007PaymentColumnDivision.SelectItems.Add (_PayMethod [nCount]);
		CmnEdit01012PaymentColumnDivision.SelectItems.Add (_PayMethod [nCount]);
		CmnEdit01017PaymentColumnDivision.SelectItems.Add (_PayMethod [nCount]);
		CmnEdit01022PaymentColumnDivision.SelectItems.Add (_PayMethod [nCount]);
	end;

	for	nCount := 0 to Length (_TaxSalesOrigin) - 1 do
	begin
		if	((m_nCompDivision <> 1) and ((nCount >= 14) and (nCount <= 17))) then		// 公益法人区分: 1=公益法人(消費税ｺｰﾄﾞ80番台は除く)
			Continue;

		CmnEdit06013TaxCode.SelectItems.Add (_TaxSalesOrigin [nCount]);
	end;

	for	nCount := 0 to Length (_TaxStockOrigin) - 1 do
		CmnEdit06015TaxCode.SelectItems.Add (_TaxStockOrigin [nCount]);

	fnChangeConditionTaxRelated (13);
	fnChangeConditionTaxRelated (15);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeOffsetJournalInfo ();
// <175> Add
var
	iLoop	: Integer;
// <175> Add
begin
	CmnEdit05002KmkCode       .Value		:= 0;										// 科目ｺｰﾄﾞ
	CmnEdit05002KmkCode       .InputFlag	:= TRUE;
	CmnEdit05002KmkCodeDesc   .Text			:= '';
	CmnEdit05003HojCodeFree   .Visible		:= FALSE;									// 科目別補助･部門･補助ｺｰﾄﾞ
	CmnEdit05003HojCodeNumeric.Visible		:= TRUE;
	CmnEdit05003HojCodeNumeric.Value		:= 0;
	CmnEdit05003HojCodeNumeric.InputFlag	:= TRUE;
	CmnEdit05003HojCodeDesc   .Text			:= '';
	CmnEdit05004HojCodeFree   .Visible		:= FALSE;									// 科目別補助･部門･補助ｺｰﾄﾞ
	CmnEdit05004HojCodeNumeric.Visible		:= TRUE;
	CmnEdit05004HojCodeNumeric.Value		:= 0;
	CmnEdit05004HojCodeNumeric.InputFlag	:= TRUE;
	CmnEdit05004HojCodeDesc   .Text			:= '';
	CmnEdit05005HojCodeFree   .Visible		:= FALSE;									// 科目別補助･部門･補助ｺｰﾄﾞ
	CmnEdit05005HojCodeNumeric.Visible		:= TRUE;
	CmnEdit05005HojCodeNumeric.Value		:= 0;
	CmnEdit05005HojCodeNumeric.InputFlag	:= TRUE;
	CmnEdit05005HojCodeDesc   .Text			:= '';
	CmnEdit05006TaxCode       .Value		:= 0;										// 消費税ｺｰﾄﾞ
	CmnEdit05006TaxCode       .InputFlag	:= TRUE;
	CmnEdit05006TaxCodeDesc   .Text			:= '';
	CmnEdit05007TaxRate       .Value		:= 0;										// 消費税率ｺｰﾄﾞ
	CmnEdit05007TaxRate       .InputFlag	:= TRUE;
	CmnEdit05007TaxRateDesc   .Text			:= '';
	CmnEdit05008OffsetPrice   .Value		:= 0;										// 相殺金額
// <175> Add
	//<相殺>補助内部コード
	for iLoop := Low(m_dSousaiNCode) to High(m_dSousaiNCode) do
		m_dSousaiNCode[iLoop]	:= 0;
// <175> Add
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnInitializeProcedure (): Boolean;
var
//	cDBControl	 : TDatabase;
	dqMasterData : TMQuery;
//	dqControl	 : TMQuery;
//	nChargeCode  : Integer;
	strChargeName: String;
//	fSelected	 : Boolean;

begin
//	nChargeCode		:= 0;
	strChargeName	:=	'';
//	fSelected		:= FALSE;

	dqMasterData	:= TMQuery.Create (Self);									// MQueryの構築

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続
// <117>↓ｺﾒﾝﾄｱｳﾄ
{	if	(rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD <> -1) then				// 共通ﾒﾓﾘﾎﾟｲﾝﾀの担当者内部ｺｰﾄﾞ
	begin
		cDBControl	:= m_cDataModule.CTLDBOpen (0);

		if	(cDBControl = nil) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		dqControl	:= TMQuery.Create (Self);		 							// MQueryの構築

		m_cDataModule.SetDBInfoToQuery (cDBControl, dqControl);					// DBとMQueryの接続

		with (dqControl) do
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT Name, TantoGCD FROM MOS_OFFICE_STAFF WHERE TantoNCD = :nInCode');

			ParamByName ('nInCode').AsInteger	:= rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD;

			Open ();

			if	(not EOF) then
			begin
				nChargeCode		:= FieldByName ('TantoGCD').AsInteger;
				strChargeName	:= FieldByName ('Name'    ).AsString;
			end;
		end;

		dqControl.Close ();
		dqControl.Free  ();

		fSelected	:= TRUE;
	end;
}
	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('CALL MP200010 (0');
// <117>↓
//		if	(fSelected) then
//			SQL.Add (Format (',%d,''%s''', [nChargeCode, strChargeName]));
        SQL.Add     (', :nInCode');
        ParamByName ('nInCode').AsFloat	:= rcCOMMONAREA (m_pRec^.m_pCommonArea^).TantoNCD;
// <117>↑
		SQL.Add (')');

		if	(not ExecSQL ()) then
			ShowMessage ('ｴﾗｰｺｰﾄﾞ ' + IntToStr (m_cComArea.m_MsgStd.GetDBCode (dqMasterData)) +
													'　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetails ();
begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	CmnEdit00002Association .Text	:= '';
	CmnEdit00003Name        .Text	:= '';
	CmnEdit00004NameSimple  .Text	:= '';
	CmnEdit00005AppDateStart.Value	:= 0;
	CmnEdit00006AppDateEnd  .Value	:= 0;
	CmnEdit00005AppDateStart.Clear ();
	CmnEdit00006AppDateEnd  .Clear ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo ();
begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

// <149> 2006/10/11 H.Kawato Add
    if (m_bShowPrjInfo = False) then
    	fnInitializeScreenDetailInfo00 ();                                              // 基本情報
// <149> 2006/10/11 H.Kawato Add

	fnInitializeScreenDetailInfo01 ();
	fnInitializeScreenDetailInfo02 ();
	fnInitializeScreenDetailInfo03 ();
// <211> MOD-STR
//	fnInitializeScreenDetailInfo04 (0);
//	fnInitializeScreenDetailInfo04 (1);
	fnInitializeScreenDetailInfo04 ();
// <211> MOD-END
	fnInitializeScreenDetailInfo06 ();
	fnInitializeScreenDetailInfo07 ();
	fnInitializeScreenDetailInfo08 ();      // <211> ADD
    fnInitializeScreenDetailInfo09 ();      // <222> ADD
    fnInitializeScreenDetailInfo10 ();      // <222> ADD

end;

// <149> 2006/10/11 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo00 ();
var
	strDescription: String;

begin
	CmnEdit00011AssDivision.Value	    := 0;									        // 査定方法
	fnGetDescriptionSelectedItem (CmnEdit00011AssDivision, strDescription);
	CmnLabel00011AssDivisionDesc.Caption	:= strDescription;

	CmnEdit00012DecPtnDivision.Value	:= 0;                                           // 分解パターン
	fnGetDescriptionSelectedItem (CmnEdit00012DecPtnDivision, strDescription);
	CmnLabel00012DecPtnDivisionDesc.Caption	:= strDescription;

// <170> 2007/12/13 H.Kawato Add Start
	CmnEdit00017SateiCalcKbn.Value	:= 0;                                               // 査定金額計算区分
	fnGetDescriptionSelectedItem (CmnEdit00017SateiCalcKbn, strDescription);
	CmnLabel00017SateiCalcKbnDesc.Caption	:= strDescription;

	fnChangeConditionSateiCalc  ();                                                     // 査定金額計算値
// <170> 2007/12/13 H.Kawato Add End

    if (m_iProAdoptKbn = 0) then                // プロジェクト別支払　採用なし
        fnChkProjectEnabled(False)
    else                                        // プロジェクト別支払　採用あり
        fnChkProjectEnabled(True);

// <222> ADD start
	// 外貨債務管理
	CmnEdit00019GaikaUse.Value	:= 0;													// 採用区分
	fnGetDescriptionSelectedItem (CmnEdit00019GaikaUse, strDescription);
	CmnLabel00019GaikaUseDesc.Caption		:= strDescription;

	fnChangeConditionGaikaParts();                                                     	// 外貨関係の制御

	CmnEdit00020BasePayment.Value := 1;													// 標準支払方法
	fnGetDescriptionSelectedItem (CmnEdit00020BasePayment, strDescription);
	CmnLabel00020BasePaymentDesc.Caption	:= strDescription;
// <222> ADD end
end;
// <149> 2006/10/11 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo01 ();
var
	strDescription: String;

begin
	CmnEdit01001DecDivision.Value	:= 0;												// 分解方法

	fnGetDescriptionSelectedItem (CmnEdit01001DecDivision, strDescription);
	CmnLabel01001DecDivisionDesc.Caption	:= strDescription;

	CmnEdit01027ReceiverName.Text	:= '';												// 受取人名称       <110>

// <149> 2006/10/11 H.Kawato Del Start
{
	CmnEdit01028PasDivision.Value	:= 0;												// 支払通知書区分   <110>
	fnGetDescriptionSelectedItem (CmnEdit01028PasDivision, strDescription);
	CmnLabel01028PasDivisionDesc.Caption	:= strDescription;

// <133> 2006/06/19 H.Kawato Add Start
	CmnEdit01029AssDivision.Value	:= 0;												// 査定方法         <133>
	fnGetDescriptionSelectedItem (CmnEdit01029AssDivision, strDescription);
	CmnLabel01029AssDivisionDesc.Caption	:= strDescription;
// <133> 2006/06/19 H.Kawato Add End
}
// <149> 2006/10/11 H.Kawato Del End

// <149> 2006/10/11 H.Kawato Add Start
	CmnEdit01030PriPayWayDivision.Value := 0;                                           // 優先支払方法
	fnGetDescriptionSelectedItem (CmnEdit01030PriPayWayDivision, strDescription);
	CmnLabel01030PriPayWayDivisionDesc.Caption	:= strDescription;
	m_nPriPayWay    := CmnEdit01030PriPayWayDivision.Value;
// <149> 2006/10/11 H.Kawato Add End

	fnChangeConditionPayment  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo02 ();
var
	strDescription: String;

begin
	CmnEdit02001AccountCode.Value		:= 0;											// 振込依頼口座ｺｰﾄﾞ
	CmnEdit02001AccountCode.InputFlag	:= TRUE;

	CmnLabel02001AccountCodeDesc.Caption	:= '';

	CmnEdit02002BankCode       .Value	    := 0;		 								// 全銀協銀行ｺｰﾄﾞ
	CmnEdit02002BankCode       .InputFlag	:= TRUE;
	CmnEdit02003BranchCode     .Value	    := 0;		 								// 全銀協支店ｺｰﾄﾞ
	CmnEdit02003BranchCode     .InputFlag	:= TRUE;
	CmnEdit02004BankName       .Text		:= '';										// 銀行名称
	CmnEdit02005BankNameKana   .Text		:= '';										// 銀行名称(ｶﾅ)
	CmnEdit02006BranchName     .Text		:= '';										// 支店名称
	CmnEdit02007BranchNameKana .Text		:= '';										// 支店名称(ｶﾅ)
	CmnEdit02008TranslationName.Text		:= '';										// ｶﾅ振込先名称

	CmnEdit02009DepDivision.Value	:= 1;												// 預金種別

	fnGetDescriptionSelectedItem (CmnEdit02009DepDivision, strDescription);
	CmnLabel02009DepDivisionDesc.Caption	:= strDescription;

	CmnEdit02010AccountNo .Text		:= '';												// 口座番号
// <187> MOD-STR
//	CmnEdit02011FBDivision.Value	:= 0;												// FBｾｯﾄ区分
	CmnEdit02011FBDivision.Value	:= 2;												// FBｾｯﾄ区分
// <187> MOD-END

	fnGetDescriptionSelectedItem (CmnEdit02011FBDivision, strDescription);
	CmnLabel02011FBDivisionDesc.Caption	:= strDescription;

	CmnEdit02012VisitorCode.Text	:= '';												// 顧客ｺｰﾄﾞ1
	CmnEdit02013VisitorCode.Text	:= '';												// 顧客ｺｰﾄﾞ2
	CmnEdit02014EDIInfo    .Text	:= '';												// EDI情報

	CmnEdit02015ComDivision.Value	:= 0;												// 手数料負担区分

	fnGetDescriptionSelectedItem (CmnEdit02015ComDivision, strDescription);
	CmnLabel02015ComDivisionDesc.Caption	:= strDescription;

	CmnEdit02016ComCalculation.Value	:= 0;			  								// 手数料計算区分

	fnGetDescriptionSelectedItem (CmnEdit02016ComCalculation, strDescription);
	CmnLabel02016ComCalculationDesc.Caption	:= strDescription;

	CmnEdit02017PayDivision.Value	:= 0;												// 振込方法

	fnGetDescriptionSelectedItem (CmnEdit02017PayDivision, strDescription);
	CmnLabel02017PayDivisionDesc.Caption	:= strDescription;

// <137> 2006/06/28 H.Kawato Add Start
    CmnEdit02018DebitDivision.Value := 0;                                               // 口座自動引落区分
	fnGetDescriptionSelectedItem (CmnEdit02018DebitDivision, strDescription);
	CmnLabel02018DebitDivisionDesc.Caption	:= strDescription;

    CmnEdit02019DebitData.Value     := 0;                                               // 自動引落支払データ

    if m_iHeikouData = 0 then
    begin
        CmnLabelDebitData01  .Enabled := False;
        CmnEdit02019DebitData.Enabled := False;
        CmnLabelDebitDataDesc.Enabled := False;
    end;
// <137> 2006/06/28 H.Kawato Add End

// <110>	CmnEdit06003ReceiverName.Text	:= '';										// ※特殊
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo03 ();
var
	strDescription: String;

begin
	CmnEdit03001AccountCode.Value		:= 0;											// 振込依頼口座ｺｰﾄﾞ
	CmnEdit03001AccountCode.InputFlag	:= TRUE;

	CmnLabel03001AccountCodeDesc.Caption	:= '';

	CmnEdit03002BankCode       .Value	    := 0;		 								// 全銀協銀行ｺｰﾄﾞ
	CmnEdit03002BankCode       .InputFlag	:= TRUE;
	CmnEdit03003BranchCode     .Value	    := 0;	 									// 全銀協支店ｺｰﾄﾞ
	CmnEdit03003BranchCode     .InputFlag	:= TRUE;
	CmnEdit03004BankName       .Text		:= '';										// 銀行名称
	CmnEdit03005BankNameKana   .Text		:= '';										// 銀行名称(ｶﾅ)
	CmnEdit03006BranchName     .Text		:= '';										// 支店名称
	CmnEdit03007BranchNameKana .Text		:= '';										// 支店名称(ｶﾅ)
	CmnEdit03008TranslationName.Text		:= '';										// ｶﾅ振込名称

	CmnEdit03009DepDivision.Value	:= 1;												// 預金種別

	fnGetDescriptionSelectedItem (CmnEdit03009DepDivision, strDescription);
	CmnLabel03009DepDivisionDesc.Caption	:= strDescription;

	CmnEdit03010AccountNo .Text		:= '';												// 口座番号
// <187> MOD-STR
//	CmnEdit03011FBDivision.Value	:= 0;												// FBｾｯﾄ区分
	CmnEdit03011FBDivision.Value	:= 2;												// FBｾｯﾄ区分
// <187> MOD-END

	fnGetDescriptionSelectedItem (CmnEdit03011FBDivision, strDescription);
	CmnLabel03011FBDivisionDesc.Caption	:= strDescription;

	CmnEdit03012VisitorCode.Text	:= '';												// 顧客ｺｰﾄﾞ1
	CmnEdit03013VisitorCode.Text	:= '';												// 顧客ｺｰﾄﾞ2
	CmnEdit03014EDIInfo    .Text	:= '';												// EDI情報

	CmnEdit03015ComDivision.Value	:= 0;												// 手数料負担区分

	fnGetDescriptionSelectedItem (CmnEdit03015ComDivision, strDescription);
	CmnLabel03015ComDivisionDesc.Caption	:= strDescription;

	CmnEdit03016ComCalculation.Value	:= 0;											// 手数料計算区分

	fnGetDescriptionSelectedItem (CmnEdit03016ComCalculation, strDescription);
	CmnLabel03016ComCalculationDesc.Caption	:= strDescription;

	CmnEdit03017PayDivision.Value	:= 0;												// 振込方法

	fnGetDescriptionSelectedItem (CmnEdit03017PayDivision, strDescription);
	CmnLabel03017PayDivisionDesc.Caption	:= strDescription;

	CmnEdit03018PaySight.Value	:= 0;													// 振込ｻｲﾄ

// <197> ADD-STR
	CmnEdit03020BeforeLimit.Value	:= 0;												// 期日前支払区分

	fnGetDescriptionSelectedItem (CmnEdit03020BeforeLimit, strDescription);
	CmnLabel03020BeforeLimitDesc.Caption	:= strDescription;
// <197> ADD-END

// <220> ADD-STR
	CmnEdit03021AccountCode.Value		:= 0;											// 期日振込依頼口座ｺｰﾄﾞ
	CmnEdit03021AccountCode.InputFlag	:= TRUE;

	CmnLabel03021AccountCodeDesc.Caption	:= '';
// <220> ADD-END
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
// <211> MOD-STR
{procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo04 (nDivision: Integer);
var
	strDescription: String;

begin
	if	(nDivision = 0) then															// 手形情報
	begin
		CmnEdit04001AccountCode.Value		:= 0;										// 振込依頼口座ｺｰﾄﾞ
		CmnEdit04001AccountCode.InputFlag	:= TRUE;

		CmnLabel04001AccountCodeDesc.Caption	:= '';

		CmnEdit04002PaySight .Value	:= 0;												// 手形ｻｲﾄ
		CmnEdit04003DivSheets.Value	:= 0;												// 分割枚数

		CmnEdit04004PosDivision.Value	:= 0;											// 手形郵送区分

		fnGetDescriptionSelectedItem (CmnEdit04004PosDivision, strDescription);
		CmnLabel04004PosDivisionDesc.Caption	:= strDescription;

		CmnEdit04005BurDivision.Value	:= 0;											// 手形郵送料負担区分

		fnGetDescriptionSelectedItem (CmnEdit04005BurDivision, strDescription);
		CmnLabel04005BurDivisionDesc.Caption	:= strDescription;
	end
	else																				// 小切手情報
	begin
		CmnEdit04006AccountCode.Value		:= 0;										// 振込依頼口座ｺｰﾄﾞ
		CmnEdit04006AccountCode.InputFlag	:= TRUE;

		CmnLabel04006AccountCodeDesc.Caption	:= '';

		CmnEdit04007PosDivision.Value	:= 0;											// 小切手郵送区分

		fnGetDescriptionSelectedItem (CmnEdit04007PosDivision, strDescription);
		CmnLabel04007PosDivisionDesc.Caption	:= strDescription;

		CmnEdit04008BurDivision.Value	:= 0;											// 小切手郵送料負担区分

		fnGetDescriptionSelectedItem (CmnEdit04008BurDivision, strDescription);
		CmnLabel04008BurDivisionDesc.Caption	:= strDescription;
	end;
end;}
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo04 ();
var
	strDescription: String;

begin
    CmnEdit04001AccountCode.Value		:= 0;										// 振込依頼口座ｺｰﾄﾞ
    CmnEdit04001AccountCode.InputFlag	:= TRUE;

    CmnLabel04001AccountCodeDesc.Caption	:= '';

    CmnEdit04002PaySight .Value	:= 0;												// 手形ｻｲﾄ
    CmnEdit04003DivSheets.Value	:= 0;												// 分割枚数

    CmnEdit04004PosDivision.Value	:= 0;											// 手形郵送区分

    fnGetDescriptionSelectedItem (CmnEdit04004PosDivision, strDescription);
    CmnLabel04004PosDivisionDesc.Caption	:= strDescription;

    CmnEdit04005BurDivision.Value	:= 0;											// 手形郵送料負担区分

    fnGetDescriptionSelectedItem (CmnEdit04005BurDivision, strDescription);
    CmnLabel04005BurDivisionDesc.Caption	:= strDescription;

    // 電子記録債権情報
	CmnEdit04006ERKbn.Value	:= 0;			  							            // 採用区分

	fnGetDescriptionSelectedItem (CmnEdit04006ERKbn, strDescription);
	CmnLabel04006ERKbnDesc.Caption	:= strDescription;

	CmnEdit04007BankCode       .Value	    := 0;		 						   	// 全銀協銀行ｺｰﾄﾞ
	CmnEdit04007BankCode       .InputFlag	:= TRUE;
	CmnEdit04008BranchCode     .Value	    := 0;		 							// 全銀協支店ｺｰﾄﾞ
	CmnEdit04008BranchCode     .InputFlag	:= TRUE;
	CmnEdit04009BankName       .Text		:= '';									// 銀行名称
	CmnEdit04010BankNameKana   .Text		:= '';									// 銀行名称(ｶﾅ)
	CmnEdit04011BranchName     .Text		:= '';									// 支店名称
	CmnEdit04012BranchNameKana .Text		:= '';									// 支店名称(ｶﾅ)
	CmnEdit04013TranslationName.Text		:= '';									// ｶﾅ振込先名称

	CmnEdit04014DepDivision.Value	:= 1;											// 預金種別

	fnGetDescriptionSelectedItem (CmnEdit04014DepDivision, strDescription);
	CmnLabel04014DepDivisionDesc.Caption	:= strDescription;

	CmnEdit04015AccountNo .Text		:= '';											// 口座番号

	CmnEdit04016ComDivision.Value	:= 1;											// 手数料負担区分

	fnGetDescriptionSelectedItem (CmnEdit04016ComDivision, strDescription);
	CmnLabel04016ComDivisionDesc.Caption	:= strDescription;

	CmnEdit04017ComCalculation.Value	:= 0;			  							// 手数料計算区分

	fnGetDescriptionSelectedItem (CmnEdit04017ComCalculation, strDescription);
	CmnLabel04017ComCalculationDesc.Caption	:= strDescription;

    CmnEdit04018Free1.Text		:= '';									            // フリー項目１
    CmnEdit04019Free2.Text		:= '';									            // フリー項目２
    CmnEdit04020Free3.Text		:= '';									            // フリー項目３
    CmnEdit04021Free4.Text		:= '';									            // フリー項目４
    CmnEdit04022Free5.Text		:= '';									            // フリー項目５

    fnChangeConditionERKbn ();                                                      // 電子債権採用区分  <213> ADD

    fnGetFreeInfoFromApgFile();                                                     // フリー項目情報取得 <217> ADD
end;
// <211> MOD-END

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo06 ();
var
	strDescription: String;

begin
	CmnEdit06001ClassCode.Value	:= 0;													// 取引先分類

	fnGetDescriptionSelectedItem (CmnEdit06001ClassCode, strDescription);
	CmnLabel06001ClassCodeDesc.Caption	:= strDescription;

	CmnEdit06002HojCodeNumeric.Value		:= 0;										// 名寄せ親代替取引先
	CmnEdit06002HojCodeNumeric.InputFlag	:= TRUE;
	CmnEdit06002HojCodeFree   .Text			:= '';

// <110>	CmnEdit06003ReceiverName.Text		:= '';											// 受取人名称
	CmnEdit06004ZipCodeUpper.Value		:= 0;											// 郵便番号(基番)
	CmnEdit06005ZipCodeLower.Value		:= 0;											// 郵便番号(枝番)
	CmnEdit06005ZipCodeLower.InputFlag	:= TRUE;
	CmnEdit06006Address     .Text		:= '';											// 住所(上段)
	CmnEdit06007Address     .Text		:= '';											// 住所(下段)
	CmnEdit06008TelephoneNo .Text		:= '';											// 電話番号
	CmnEdit06009PostName    .Text		:= '';											// 送付先部署名称
	CmnEdit06010ChargeName  .Text		:= '';											// 担当者名称
	CmnEdit06011ResDivision .Text		:= '';											// 敬称区分

//	fnGetDescriptionSelectedItem (CmnEdit06011ResDivision, strDescription);
//	CmnLabel06011ResDivisionDesc.Caption	:= strDescription;

// <110>	CmnEdit06012PasDivision.Value	:= 0;												// 支払通知書区分
// <110>	fnGetDescriptionSelectedItem (CmnEdit06012PasDivision, strDescription);
// <110>	CmnLabel06012PasDivisionDesc.Caption	:= strDescription;


	CmnEdit06013TaxCode.Value	:= 0;													// 売上消費税ｺｰﾄﾞ

	fnGetDescriptionSelectedItem (CmnEdit06013TaxCode, strDescription);
	CmnLabel06013TaxCodeDesc.Caption	:= strDescription;

	CmnEdit06015TaxCode.Value	:= 0;													// 仕入消費税ｺｰﾄﾞ

	fnGetDescriptionSelectedItem (CmnEdit06015TaxCode, strDescription);
	CmnLabel06015TaxCodeDesc.Caption	:= strDescription;

	CmnEdit06014TaxRate     .Value		:= 0;											// 売上消費税率ｺｰﾄﾞ
	CmnLabel06014TaxRateDesc.Caption	:= '';

	CmnEdit06016TaxRate     .Value		:= 0;											// 仕入消費税率ｺｰﾄﾞ
	CmnLabel06016TaxRateDesc.Caption	:= '';

	fnChangeConditionTaxRelated (13);
	fnChangeConditionTaxRelated (15);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo07 ();
var
	nRow: Integer;

begin
	CmnEdit07001FundCode.Value	:= 0;													// 借方資金繰ｺｰﾄﾞ
	CmnEdit07002FundCode.Value	:= 0;													// 貸方資金繰ｺｰﾄﾞ

	CmnLabel07001FundCodeDesc.Caption	:= '科目に従う';
	CmnLabel07002FundCodeDesc.Caption	:= '科目に従う';

	for	nRow := 1 to 3 do
	begin
		TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).Value		:= 0;
		TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).InputFlag	:= TRUE;

		fnChangeConditionPayExpect (3 + (nRow - 1) * 4);
	end;
end;

// <222> ADD start
//*****************************************************************************
//	Process			:	電信送金情報タブの表示内容クリア
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo09 ();
var
	strDescription: String;
begin
	// 依頼口座コード
    CmnEdit09001AccountCode.Value		:= 0;
    CmnEdit09001AccountCode.InputFlag	:= TRUE;

    CmnLabel09001AccountCodeDesc.Caption	:= '';

	// 手数料口座コード
    CmnEdit09002AccountCode.Value		:= 0;
    CmnEdit09002AccountCode.InputFlag	:= TRUE;

    CmnLabel09002AccountCodeDesc.Caption	:= '';

    // 手数料負担
	CmnEdit09003ComDivision.Value	:= 1;

	fnGetDescriptionSelectedItem (CmnEdit09003ComDivision, strDescription);
	CmnLabel09003ComDivisionDesc.Caption	:= strDescription;

    // 手数料計算区分
	CmnEdit09004ComCalculation.Value	:= 0;

	fnGetDescriptionSelectedItem (CmnEdit09004ComCalculation, strDescription);
	CmnLabel09004ComCalculationDesc.Caption	:= strDescription;

    // 可変項目情報
    CmnMemDataVar.Active := False;
    CmnMemDataVar.Active := True;
    m_lstVariable.Clear;

    //<222-8>ADD↓
    // 取引先照会番号
    CmnEdit09006CustomerInquiryNo.Text	:= '';

    // 送金目的No
    CmnEdit09007PayHeadingNo.Value		:= 0;
	CmnEdit09007PayHeadingNo.InputFlag	:= TRUE;

    // 送金目的内容
    CmnEdit09008SendPurpose.Text		:= '';

    // 送金許可No
    CmnEdit09009PermLicenceNo.Text		:= '';

    // 送金許可日付
	CmnEdit09010PermDate.Value			:= 0;
    CmnEdit09010PermDate.InputFlag		:= TRUE;

    // 和暦/西暦区分
    if	(m_nDateFormatDivision = 0) then
    begin
    	//和暦
        CmnEdit09010PermDate.DateFormat	:= dfEMD;
// <#NGEN> Mod St
//        CmnEdit09010PermDate.Gengou		:= MdtCurGen;
        CmnEdit09010PermDate.Gengou		:= MasDateCtrl.MasGetNowGengo();
// <#NGEN> Mod Ed
    end
    else
    begin
    	//西暦
        CmnEdit09010PermDate.DateFormat	:= dfYMD;
        CmnEdit09010PermDate.Gengou		:= #0;
    end;
    //<222-8>ADD↑
end;

//*****************************************************************************
//	Process			:	為替手形／送金小切手情報タブの表示内容クリア
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo10 ();
begin
	// 支払口座コード
    CmnEdit10001AccountCode.Value		:= 0;
    CmnEdit10001AccountCode.InputFlag	:= TRUE;

    CmnLabel10001AccountCodeDesc.Caption	:= '';

	// 依頼口座コード
    CmnEdit10002AccountCode.Value		:= 0;
    CmnEdit10002AccountCode.InputFlag	:= TRUE;

    CmnLabel10002AccountCodeDesc.Caption	:= '';

	// 手数料口座コード
    CmnEdit10003AccountCode.Value		:= 0;
    CmnEdit10003AccountCode.InputFlag	:= TRUE;

    CmnLabel10003AccountCodeDesc.Caption	:= '';

	//<222-8>ADD↓
    // 送金目的No
    CmnEdit10004PayHeadingNo.Value		:= 0;
    CmnEdit10004PayHeadingNo.InputFlag	:= TRUE;

    // 送金目的内容
    CmnEdit10005SendPurpose.Text		:= '';

    // 送金許可No
    CmnEdit10006PermLicenceNo.Text		:= '';

    // 送金許可日付
    CmnEdit10007PermDate.Value			:= 0;
    CmnEdit10007PermDate.InputFlag		:= TRUE;

    // 和暦/西暦区分
    if	(m_nDateFormatDivision = 0) then
    begin
    	//和暦
        CmnEdit10007PermDate.DateFormat	:= dfEMD;
// <#NGEN> Mod St
//        CmnEdit10007PermDate.Gengou		:= MdtCurGen;
        CmnEdit10007PermDate.Gengou		:= MasDateCtrl.MasGetNowGengo();
// <#NGEN> Mod Ed
    end
    else
    begin
    	//西暦
        CmnEdit10007PermDate.DateFormat	:= dfYMD;
        CmnEdit10007PermDate.Gengou		:= #0;
    end;
    //<222-8>ADD↑
end;
// <222> ADD end
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnInitializeScreenStandard (): Boolean;
begin



	if	(not fnInitializeExCodeAttribute ()) then
	begin
		CmnTreeView.Enabled	:= TRUE;

		Result	:= FALSE;
		Exit;
	end;

{
	if	(fnCheckRecordRequisite () = REQUISITE_CANCEL) then
	begin
		CmnTreeView.Enabled	:= TRUE;

		Result	:= FALSE;
		Exit;
	end;
}

// <196> DEL    fnRebuildTreeViewItems ();

	CmnTreeView           .Enabled	:= TRUE;
	CmnSplitter           .Enabled	:= TRUE;
//	CmnButtonToolbarPrint .Enabled	:= TRUE;
//	CmnPanelClientStandard.Enabled	:= TRUE;
//	CmnPanelClientDetail  .Enabled	:= TRUE;

//	CmnButtonToolbarDetail.Caption	:= '詳細(&T)';

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstCSInfoInsert (pUpdateRecord: Pointer): String;
var
	pRecord		  : ^MasterData;
	arEntryOrder  : array [0..2] of Integer;
//	nCount		  : Integer;
	strSQLConst	  : String;
	strDescription: String;
    nCalcValue	  : Extended;   // <170> 2007/12/14 H.Kawato Add

begin
	fnGetEntryOrderClosingDays (arEntryOrder);

//	strSQLConst	:= 'INSERT INTO CSInfo ('
//HIS0034	strSQLConst	:= 'INSERT INTO NYK_CSInfo (TesuryoFutan,Ku,'
	strSQLConst	:= 'INSERT INTO MTOKUI_PAY ('
									 + 'BaseNCode   ,'                                  // 取引先ｺｰﾄﾞ
// <149> 2006/10/11 H.Kawato Mod Start
(*

									 + 'PostNo1     ,'									// 郵便番号(基番)
									 + 'PostNo2     ,'									// 郵便番号(枝番)
									 + 'Ads1        ,'									// 住所(上段)
									 + 'Ads2        ,'									// 住所(下段)
									 + 'Tel1        ,'									// 電話番号
									 + 'SectionName ,'									// 送付先部署名称
									 + 'TanNm       ,'									// 担当者
{
									 + 'PCloseDay1  ,'									// 締日      (1)
									 + 'PayDay1     ,'									// 支払予定日(1)
									 + 'PayMonth1   ,'									// 支払予定月(1)
									 + 'PHolidayKbn1,'									// 休日区分  (1)
									 + 'PCloseDay2  ,'									// 締日      (2)
									 + 'PayDay2     ,'									// 支払予定日(2)
									 + 'PayMonth2   ,'									// 支払予定月(2)
									 + 'PHolidayKbn2,'									// 休日区分  (2)
									 + 'PCloseDay3  ,'									// 締日      (3)
									 + 'PayDay3     ,'									// 支払予定日(3)
									 + 'PayMonth3   ,'									// 支払予定月(3)
									 + 'PHolidayKbn3,'									// 休日区分  (3)
									 + 'TitleKbn) VALUES (';							// 敬称区分
}
									 + 'SateiKbn    ,'									// 査定区分
                                     + 'KeisyoKbn) VALUES (';
*)
									 + 'SateiKbn,'                                      // 査定区分
									 + 'SateiCalcKbn,'                                  // 査定金額計算区分 <170>
									 + 'SateiCalc,'                                     // 査定金額計算値   <170>
                                     + 'PayKbn1,'                                       // 期日前支払区分 <197> ADD
                                     + 'GaikaKbn,'										// 外貨支払 採用区分 <222> ADD
                                     + 'GaiPayKbn,'										// 標準支払方法	<222> ADD					
                                     + 'BunkaiPtn) VALUES (';                           // 分解パターン
// <149> 2006/10/11 H.Kawato Mod End

	pRecord	:= pUpdateRecord;

	strSQLConst	:= strSQLConst + FloatToStr(pRecord^.nNCode) + ',';				// 取引先ｺｰﾄﾞ (内部ｺｰﾄﾞ)
// <149> 2006/10/11 H.Kawato Del Start
{

	if	(CmnEdit06004ZipCodeUpper.AsInteger = 0) then
		strSQLConst	:= strSQLConst + 'NULL, NULL,'
	else
		strSQLConst	:= strSQLConst
								+ Format ('%d,', [CmnEdit06004ZipCodeUpper.AsInteger])	// 郵便番号(基番)
								+ Format ('%d,', [CmnEdit06005ZipCodeLower.AsInteger]);	// 郵便番号(枝番)

	strDescription	:= fnConvertStringFieldValue (CmnEdit06006Address.Text);			// 住所(上段)
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06007Address.Text);			// 住所(下段)
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06008TelephoneNo.Text);		// 電話番号
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06009PostName.Text);			// 送付先部署名称
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06010ChargeName.Text);			// 担当者
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);
}
// <149> 2006/10/11 H.Kawato Del End
{
	for	nCount := 0 to 2 do
	begin
		strSQLConst	:= strSQLConst + Format ('%d,', [TMNumEdit (MJSFindCtrl (Self,
									 Format (_ClsDay, [3 + (arEntryOrder [nCount] - 1) * 4]))).AsInteger])
								   + Format ('%d,', [TMNumEdit (MJSFindCtrl (Self,
									 Format (_ExpDay, [5 + (arEntryOrder [nCount] - 1) * 4]))).AsInteger]);

		if	(TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (arEntryOrder [nCount] - 1) * 4]))).AsInteger = 0) then
			strSQLConst	:= strSQLConst + 'NULL, NULL,'
		else
			strSQLConst	:= strSQLConst + Format ('%d,', [TMComboBox (MJSFindCtrl (Self,
										 Format (_ExpMon, [4 + (arEntryOrder [nCount] - 1) * 4]))).ItemIndex])
									   + Format ('%d,', [TMComboBox (MJSFindCtrl (Self,
										 Format (_HolDiv, [6 + (arEntryOrder [nCount] - 1) * 4]))).ItemIndex]);
	end;

	strSQLConst	:= strSQLConst + CmnEdit06011ResDivision .Text + ')';	// 敬称区分
}
//	strSQLConst	:= strSQLConst + CmnEdit06011ResDivision .Text + ')';	// 敬称区分

// <133> 2006/06/19 H.Kawato Add Start
// <149> 2006/10/11 H.Kawato Mod
//	strDescription	:= fnConvertStringFieldValue (CmnEdit01029AssDivision .Text);			// 査定方法
	strDescription	:= fnConvertStringFieldValue (CmnEdit00011AssDivision .Text);			// 査定方法 コンポーネント名称の変更
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);
// <133> 2006/06/19 H.Kawato Add End

// <170> 2007/12/14 H.Kawato Add Start
	strDescription	:= fnConvertStringFieldValue (CmnEdit00017SateiCalcKbn.Text);           // 査定金額計算区分
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

    nCalcValue	    := CmnEdit00018SateiCalcValue.Value;                                    // 査定金額計算値
	strSQLConst		:= strSQLConst + Format ('%e,'    , [nCalcValue    ]);
// <170> 2007/12/14 H.Kawato Add End
// <197> ADD-STR
	strDescription	:= fnConvertStringFieldValue (CmnEdit03020BeforeLimit.Text);            // 期日前支払区分
	strSQLConst		:= strSQLConst + Format ('%e,'    , [nCalcValue    ]);
// <197> ADD-END
// <222> ADD start
	nCalcValue	    := CmnEdit00019GaikaUse.Value;                                          // 外貨 採用区分
	strSQLConst		:= strSQLConst + Format ('%e,'    , [nCalcValue    ]);

    if CmnEdit00019GaikaUse.Value = 0 then	// 外貨の採用がない場合
    begin
    	strSQLConst := strSQLConst + 'null,';
    end
    else
    begin
    										// DB上の区分に変換する
		nCalcValue	:= fnGaiPayKbn(Trunc(CmnEdit00020BasePayment.Value));     				// 標準支払方法
		strSQLConst	:= strSQLConst + Format ('%e,'    , [nCalcValue    ]);
    end;
// <222> ADD end
// <149> 2006/10/11 H.Kawato Add Start
	strDescription	:= fnConvertStringFieldValue (CmnEdit00012DecPtnDivision .Text);		// 分解パターン
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);
// <149> 2006/10/11 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Del
//	strDescription	:= fnConvertStringFieldValue (CmnEdit06011ResDivision .Text);			// 担当者
//	strSQLConst		:= strSQLConst + Format ('''%s''', [strDescription]);
// <149> 2006/10/11 H.Kawato Del

    strSQLConst		:= strSQLConst + ')';

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstCSInfoUpdate (pUpdateRecord: Pointer): String;
var
	pRecord		  : ^MasterData;
	arEntryOrder  : array [0..2] of Integer;
//	nCount		  : Integer;
	strSQLConst	  : String;
	strDescription: String;
    nCalcValue    : Extended;   // <170> 2007/12/14 H.Kawato Add

begin
	fnGetEntryOrderClosingDays (arEntryOrder);

{
	strSQLConst	:= 'UPDATE CSInfo SET ';

	if	(CmnEdit06004ZipCodeUpper.AsInteger = 0) then
		strSQLConst	:= strSQLConst + 'ZipCode1 = NULL, ZipCode2 = NULL,'
	else

		strSQLConst	:= strSQLConst + Format ('ZipCode1 = %d,', [CmnEdit06004ZipCodeUpper.AsInteger])
								   + Format ('ZipCode2 = %d,', [CmnEdit06005ZipCodeLower.AsInteger]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06006Address.Text);
	strSQLConst		:= strSQLConst + Format ('Address1    = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06007Address.Text);
	strSQLConst		:= strSQLConst + Format ('Address2    = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06008TelephoneNo.Text);
	strSQLConst		:= strSQLConst + Format ('TelNo       = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06009PostName.Text);
	strSQLConst		:= strSQLConst + Format ('SectionName = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06010ChargeName.Text);
	strSQLConst		:= strSQLConst + Format ('PersonName  = ''%s'',', [strDescription]);

	for	nCount := 0 to 2 do
	begin
		strSQLConst	:= strSQLConst + Format ('PCloseDay%d = %d,', [nCount + 1, TMNumEdit (MJSFindCtrl (
									 Self, Format (_ClsDay, [3 + (arEntryOrder [nCount] - 1) * 4]))).AsInteger])
								   + Format ('PayDay%d    = %d,', [nCount + 1, TMNumEdit (MJSFindCtrl (
									 Self, Format (_ExpDay, [5 + (arEntryOrder [nCount] - 1) * 4]))).AsInteger]);

		if	(TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (arEntryOrder [nCount] - 1) * 4]))).AsInteger = 0) then
			strSQLConst	:= strSQLConst + Format ('PayMonth%d    = NULL,', [nCount + 1])
									   + Format ('PHolidayKbn%d = NULL,', [nCount + 1])
		else
			strSQLConst	:= strSQLConst + Format ('PayMonth%d    = %d,', [nCount + 1, TMComboBox (MJSFindCtrl (
										 Self, Format (_ExpMon, [4 + (arEntryOrder [nCount] - 1) * 4]))).ItemIndex])
									   + Format ('PHolidayKbn%d = %d,', [nCount + 1, TMComboBox (MJSFindCtrl (
										 Self, Format (_HolDiv, [6 + (arEntryOrder [nCount] - 1) * 4]))).ItemIndex]);
	end;

//	strSQLConst	:= strSQLConst + Format ('TitleKbn = %d', [CmnEdit06011ResDivision.AsInteger]);
	strSQLConst	:= strSQLConst + 'TitleKbn = ' + CmnEdit06011ResDivision.Text;

	pRecord	:= pUpdateRecord;

	strSQLConst	:= strSQLConst + 'WHERE '
						+ Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ])			// ﾏｽﾀ区分
						+ Format ('GCode     = ''%s'' ', [pRecord^.strHojCode]);		// 外部ｺｰﾄﾞ
}

{HIS0034
	strSQLConst	:= 'UPDATE NYK_CSInfo SET ';
	if	(CmnEdit06004ZipCodeUpper.AsInteger = 0) then
		strSQLConst	:= strSQLConst + 'PostNo1 = NULL, PostNo2 = NULL,'
	else

		strSQLConst	:= strSQLConst + Format ('PostNo1 = %d,', [CmnEdit06004ZipCodeUpper.AsInteger])
								   + Format ('PostNo2 = %d,', [CmnEdit06005ZipCodeLower.AsInteger]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06006Address.Text);
	strSQLConst		:= strSQLConst + Format ('ADS1    = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06007Address.Text);
	strSQLConst		:= strSQLConst + Format ('ADS2    = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06008TelephoneNo.Text);
	strSQLConst		:= strSQLConst + Format ('Tel1       = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06009PostName.Text);
	strSQLConst		:= strSQLConst + Format ('SectionName = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06010ChargeName.Text);
	strSQLConst		:= strSQLConst + Format ('TanNM  = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06011ResDivision.Text);
	strSQLConst		:= strSQLConst + Format ('KeisyoKbn  = ''%s''', [strDescription]);
}

	strSQLConst	:= 'UPDATE MTOKUI_PAY SET ';
// <149> 2006/10/11 H.Kawato Del Start
{
	if	(CmnEdit06004ZipCodeUpper.AsInteger = 0) then
		strSQLConst	:= strSQLConst + 'PostNo1 = NULL, PostNo2 = NULL,'
	else

		strSQLConst	:= strSQLConst + Format ('PostNo1 = %d,', [CmnEdit06004ZipCodeUpper.AsInteger])
								   + Format ('PostNo2 = %d,', [CmnEdit06005ZipCodeLower.AsInteger]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06006Address.Text);
	strSQLConst		:= strSQLConst + Format ('ADS1    = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06007Address.Text);
	strSQLConst		:= strSQLConst + Format ('ADS2    = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06008TelephoneNo.Text);
	strSQLConst		:= strSQLConst + Format ('Tel1       = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06009PostName.Text);
	strSQLConst		:= strSQLConst + Format ('SectionName = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (CmnEdit06010ChargeName.Text);
	strSQLConst		:= strSQLConst + Format ('TanNM  = ''%s'',', [strDescription]);
}
// <149> 2006/10/11 H.Kawato Del End

// <133> 2006/06/19 H.Kawato Add Start
// <149> 2006/10/11 H.Kawato Mod    // 査定方法 コンポーネント名称の変更
//	strDescription	:= fnConvertStringFieldValue (CmnEdit01029AssDivision.Text);
	strDescription	:= fnConvertStringFieldValue (CmnEdit00011AssDivision.Text);            // 査定区分
	strSQLConst		:= strSQLConst + Format ('SateiKbn  = ''%s'',', [strDescription]);
// <133> 2006/06/19 H.Kawato Add End

// <170> 2007/12/14 H.Kawato Add Start
	strDescription	:= fnConvertStringFieldValue (CmnEdit00017SateiCalcKbn.Text);           // 査定金額計算区分
	strSQLConst		:= strSQLConst + Format ('SateiCalcKbn  = ''%s'',', [strDescription]);

    nCalcValue      := CmnEdit00018SateiCalcValue.Value;                                    // 査定金額計算値
	strSQLConst		:= strSQLConst + 'SateiCalc = ' + Format ('%e,', [nCalcValue]);
// <170> 2007/12/14 H.Kawato Add End
// <197> ADD-STR
	strDescription	:= fnConvertStringFieldValue (CmnEdit03020BeforeLimit.Text);            // 期日前支払区分
	strSQLConst		:= strSQLConst + Format ('PayKbn1  = ''%s'',', [strDescription]);
// <197> ADD-END
// <222> ADD start
	nCalcValue	    := CmnEdit00019GaikaUse.Value;                                          // 外貨 採用区分
	strSQLConst		:= strSQLConst + 'GaikaKbn = ' + Format ('%e,'    , [nCalcValue    ]);

    if CmnEdit00019GaikaUse.Value > 0 then	// 外貨の採用がある場合
    begin
    										// DB上の区分に変換する
		nCalcValue		:= fnGaiPayKbn(Trunc(CmnEdit00020BasePayment.Value)); 	   			// 標準支払方法
		strSQLConst		:= strSQLConst + 'GaiPayKbn = ' + Format ('%e,'    , [nCalcValue    ]);
    end;
// <222> ADD end
// <149> 2006/10/11 H.Kawato Add Start
	strDescription	:= fnConvertStringFieldValue (CmnEdit00012DecPtnDivision.Text);         // 分解パターン
	strSQLConst		:= strSQLConst + Format ('BunkaiPtn  = ''%s''', [strDescription]);
// <149> 2006/10/11 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Del
//	strDescription	:= fnConvertStringFieldValue (CmnEdit06011ResDivision.Text);
//	strSQLConst		:= strSQLConst + Format ('KeisyoKbn  = ''%s''', [strDescription]);
// <149> 2006/10/11 H.Kawato Del

	pRecord	:= pUpdateRecord;

	strSQLConst	:= strSQLConst + ' WHERE BaseNCode = '
						+ FloatToStr(pRecord^.nNCode);		// 外部ｺｰﾄﾞ

	Result	:= strSQLConst;

end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstHojyoMAInsert (pUpdateRecord: Pointer): String;
var
	pRecord		   : ^MasterData;
//	nAppDateStart  : Integer;
//	nAppDateEnd	   : Integer;
	strSQLConst	   : String;
	strDescription : String;
	strAppDateStart: String;
	strAppDateEnd  : String;

begin
	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'INSERT INTO MTOKUI ('+ 'SumKbn    ,'								// 実在/合計区分
										   + 'PayRootKbn ,'								// ﾚｺｰﾄﾞ区分
										   + 'RDelKbn ,'								// ﾚｺｰﾄﾞ区分
										   + 'GCode     ,'								// 取引先ｺｰﾄﾞ
										   + 'RenSo   ,'								// 連想ｼﾝﾎﾞﾙ
										   + 'NM  ,'			     					// 正式名称
										   + 'NMK,'					        			// 簡略名称
										   + 'HojyoKbn1 ,'								// 得意先区分
										   + 'HojyoKbn2  ';								// 仕入先区分

//	if	(pRecord^.fDetails) then
//	begin
		strSQLConst	:= strSQLConst + ', '  + 'TStartDate  ,'								// 適用開始年月日
										   + 'TEndDate    ';								// 適用終了年月日
//										   + 'BunCode    ,'								// 取引先分類
//										   + 'STaxCode   ,'								// 売上消費税ｺｰﾄﾞ
//										   + 'STaxRate   ,'								// 売上消費税率
//										   + 'BTaxCode   ,'								// 仕入消費税ｺｰﾄﾞ
//										   + 'BTaxRate   ,'								// 仕入消費税率
//										   + 'SDebitCash ,'								// 借方資金繰ｺｰﾄﾞ
//										   + 'SCreditCash ';							// 貸方資金繰ｺｰﾄﾞ
//	end;

	strSQLConst	:= strSQLConst + ') VALUES ('
							   + Format ('%d,'    , [pRecord^.nSumDivision])			// 実在/合計区分
							   + Format ('%d,'    , [0                    ])			// ﾚｺｰﾄﾞ区分
                               + '0,'                                                   // 削除区分
							   + Format ('''%s'',', [pRecord^.strHojCode  ]);			// 取引先ｺｰﾄﾞ

	strDescription	:= fnConvertStringFieldValue (pRecord^.strAssociation);				// 連想ｼﾝﾎﾞﾙ
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (pRecord^.strName);					// 正式名称
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (pRecord^.strNameSimple);				// 簡略名称
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

 	strSQLConst	:= strSQLConst + Format ('%d,', [0])								// 得意先区分
 							   + Format ('%d ', [1]);								// 仕入先区分

{	if	(pRecord^.nSumDivision = 0) then												// 実在/合計区分: 0＝実在
		strSQLConst	:= strSQLConst + Format ('%d,', [0])								// 得意先区分
								   + Format ('%d ', [1])								// 仕入先区分
	else																				// 実在/合計区分: 0≠合計
		strSQLConst	:= strSQLConst + 'NULL, NULL';
}

{tes
	if	(pRecord^.nSumDivision = 1) then
		strSQLConst	:= strSQLConst + Format (', %d', [1])								// 名寄せ区分: 1=名寄せ親
    else
		strSQLConst	:= strSQLConst + Format (', %d', [0]);								// 名寄せ区分: 1=名寄せ親
}

{	if	(pRecord^.fDetails) then
	begin
		if	(pRecord^.nSumDivision = 0) then											// 実在/合計区分: 0＝実在
		begin
			nAppDateStart	:= MJSDateCtrl.MJSDateToInt8 (CmnEdit00005AppDateStart.AsDateTime);
			nAppDateEnd		:= MJSDateCtrl.MJSDateToInt8 (CmnEdit00006AppDateEnd  .AsDateTime);
		end
		else																			// 実在/合計区分: 0≠合計
		begin
			nAppDateStart	:= 0;
			nAppDateEnd		:= 0;
		end;
}
{		if	(nAppDateStart <= 0) then
			strAppDateStart	:= 'NULL'
		else
			strAppDateStart	:= Format ('''%04d-%02d-%02d''', [Trunc (nAppDateStart / 10000),
										Trunc ((nAppDateStart mod 10000) / 100), Trunc (nAppDateStart mod 100)]);

		if	(nAppDateEnd <= 0) then
			strAppDateEnd	:= 'NULL'
		else
			strAppDateEnd	:= Format ('''%04d-%02d-%02d''', [Trunc (nAppDateEnd / 10000),
											Trunc ((nAppDateEnd mod 10000) / 100), Trunc (nAppDateEnd mod 100)]);
}
         strAppDateStart := Formatdatetime('yyyy/mm/dd',m_cJNTArea.getDefDate(1));
         strAppDateEnd   := Formatdatetime('yyyy/mm/dd',m_cJNTArea.getDefDate(2));

		strSQLConst	:= strSQLConst
								+ ',''' + Format ('%s', [strAppDateStart]) + ''''					// 適用開始年月日
								+  ','''+ Format (' %s', [strAppDateEnd  ]) + '''';					// 適用終了年月日
//								+ Format ('%d,' , [CmnEdit06001ClassCode.AsInteger])	// 取引先分類
//								+ Format ('%d,' , [CmnEdit06013TaxCode  .AsInteger])	// 売上消費税ｺｰﾄﾞ
//								+ Format ('%d,' , [CmnEdit06014TaxRate  .AsInteger])	// 売上消費税率
//								+ Format ('%d,' , [CmnEdit06015TaxCode  .AsInteger])	// 仕入消費税ｺｰﾄﾞ
//								+ Format ('%d,' , [CmnEdit06016TaxRate  .AsInteger]);	// 仕入消費税率

//		strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit07001FundCode.AsInteger]);
//		strSQLConst	:= strSQLConst + Format ('%d ', [CmnEdit07002FundCode.AsInteger]);
//	end;

	Result	:= strSQLConst + ')';
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstHojyoMAUpdate (pUpdateRecord: Pointer): String;
var
	pRecord		   : ^MasterData;
	nAppDateStart  : Integer;
	nAppDateEnd	   : Integer;
	strDescription : String;
	strSQLConst	   : String;
	strAppDateStart: String;
	strAppDateEnd  : String;

begin
	pRecord	:= pUpdateRecord;

	strDescription	:= fnConvertStringFieldValue (pRecord^.strAssociation);				// 連想ｼﾝﾎﾞﾙ
	strSQLConst		:= 'UPDATE MTOKUI SET ' + Format ('RenSO = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (pRecord^.strName);					// 正式名称
	strSQLConst		:= strSQLConst + Format ('NM = ''%s'',', [strDescription]);

	strDescription	:= fnConvertStringFieldValue (pRecord^.strNameSimple);				// 簡略名称
	strSQLConst		:= strSQLConst + Format ('NMK = ''%s'' ', [strDescription]);

	if	(pRecord^.nSumDivision = 1) then
		strSQLConst	:= strSQLConst + Format (', PayRootKbn = %d', [1]);					// 名寄せ区分: 1=名寄せ親

	if	(pRecord^.fDetails) then
	begin
		if	(pRecord^.nSumDivision = 0) then											// 実在/合計区分: 0＝実在
		begin
			nAppDateStart	:= MJSDateCtrl.MJSDateToInt8 (CmnEdit00005AppDateStart.AsDateTime);
			nAppDateEnd		:= MJSDateCtrl.MJSDateToInt8 (CmnEdit00006AppDateEnd  .AsDateTime);
		end
		else																			// 実在/合計区分: 0≠合計
		begin
			nAppDateStart	:= 0;
			nAppDateEnd		:= 0;
		end;

		if	(nAppDateStart <= 0) then
			strAppDateStart	:= '''' + FormatDateTime('yyyy/mm/dd',m_cJNTArea.getDefDate(1)) + ''''
		else
			strAppDateStart	:= Format ('''%04d-%02d-%02d''', [Trunc (nAppDateStart / 10000),
										Trunc ((nAppDateStart mod 10000) / 100), Trunc (nAppDateStart mod 100)]);

		if	(nAppDateEnd <= 0) then
			strAppDateEnd	:= '''' + FormatDateTime('yyyy/mm/dd',m_cJNTArea.getDefDate(2)) + ''''
		else
			strAppDateEnd	:= Format ('''%04d-%02d-%02d''', [Trunc (nAppDateEnd / 10000),
											Trunc ((nAppDateEnd mod 10000) / 100), Trunc (nAppDateEnd mod 100)]);

		strSQLConst	:= strSQLConst + Format (',TStartDate = %s,', [strAppDateStart])		// 適用開始年月日
								   + Format (' TEndDate   = %s', [strAppDateEnd  ]);	// 適用終了年月日

{		strSQLConst	:= strSQLConst
						+ Format ('BunCode  = %d,', [CmnEdit06001ClassCode.AsInteger])	// 取引先分類
						+ Format ('STaxCode = %d,', [CmnEdit06013TaxCode  .AsInteger])	// 売上消費税ｺｰﾄﾞ
						+ Format ('STaxRate = %d,', [CmnEdit06014TaxRate  .AsInteger])	// 売上消費税率
						+ Format ('BTaxCode = %d,', [CmnEdit06015TaxCode  .AsInteger])	// 仕入消費税ｺｰﾄﾞ
						+ Format ('BTaxRate = %d,', [CmnEdit06016TaxRate  .AsInteger]);	// 仕入消費税率

		strSQLConst	:= strSQLConst + Format ('SDebitCash  = %d,', [CmnEdit07001FundCode.AsInteger]);
		strSQLConst	:= strSQLConst + Format ('SCreditCash = %d ', [CmnEdit07002FundCode.AsInteger]);
}	end;

	strSQLConst	:= strSQLConst + ' WHERE RDelKbn = 0 AND '
							+ Format ('SumKbn    = %d AND ', [pRecord^.nSumDivision])	// ﾏｽﾀ区分
							+ Format ('GCode     = ''%s'' ', [pRecord^.strHojCode  ]);	// 外部ｺｰﾄﾞ

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo01Insert (pUpdateRecord: Pointer): String;
var
	pRecord		  : ^MasterData;
	strSQLConst	  : String;
	strDescription: String;
    lvIraiNCD     : Extended;
    lvBankNCD     : Extended;
    lvBrNCD       : Extended;
    iDebitData	  : Integer;	// <179> Add
begin
	pRecord	:= pUpdateRecord;
    lvIraiNCD   := fnGetIraiNCode(CmnEdit02001AccountCode.AsInteger);
    lvBankNCD   := fnGetBankNCode(CmnEdit02002BankCode.AsInteger);
// <SCA> MOD-STR
//  lvBrNCD     := fnGetBranchNCode(lvBankNCD,CmnEdit02003BranchCode.AsInteger);
    lvBrNCD     := m_anBrachNCode[1];       // 振込先支店内部コード
// <SCA> MOD-END

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ<173>
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode       ,'					// 依頼口座ｺｰﾄﾞ
//HIS0050										 + 'BankNCode      ,'					// 全銀協銀行ｺｰﾄﾞ
												 + 'BkBraNCode     ,'					// 全銀協支店ｺｰﾄﾞ

												 + 'AccKbn         ,'					// 預金種別
												 + 'AccNo          ,'					// 口座番号
												 + 'FBSet          ,'					// FBｾｯﾄ区分
												 + 'UketoriName    ,'					// 受取人名称
												 + 'TransKanaName  ,'					// ｶﾅ振込先名称
												 + 'ChargeKbn      ,'					// 手数料計算区分
												 + 'ChargeFutan    ,'					// 手数料負担
												 + 'TransKbn       ,'					// 振込方法
												 + 'AccAutoKbn     ,'					// 口座自動引落区分   <137> Add
												 + 'AccAutoData    ,'					// 自動引落支払データ <137> Add
												 + 'EdiInfo        ,'					// EDI情報
												 + 'AiteNo1        ,'					// 顧客ｺｰﾄﾞ1
												 + 'AiteNo2       ) '					// 顧客ｺｰﾄﾞ2

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd)  + ','                  			// 更新担当者内部ｺｰﾄﾞ<173>
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','		        		    // 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
							 + Format ('%d,'    , [1                  ])				// 支払種別
							 + Format ('%d,'    , [1                  ]);				// 枝番

    //----------------------------------------------------------
    // 依頼口座ｺｰﾄﾞ
	if	(CmnEdit02001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        if lvIraiNCD = -1 then
            strSQLConst	:= strSQLConst + 'NULL,'
        else
    		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';
    end;

{//HIS0050
    // 銀行ｺｰﾄﾞ
	if	(CmnEdit02002BankCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        strSQLConst	:= strSQLConst + FormatFloat('#',lvBankNCD) + ',';

    end;
}

    // 支店ｺｰﾄﾞ
	if	(CmnEdit02003BranchCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        if lvBrNCD = -1 then
            strSQLConst	:= strSQLConst + 'NULL,'
        else
        	strSQLConst	:= strSQLConst + FormatFloat ('#',lvBrNCD) + ',';

    end;
    //------------------------------------------------------------

	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit02009DepDivision.AsInteger]);	// 預金種別

	if	(CmnEdit02010AccountNo.Text = '') then											// 口座番号
		strSQLConst	:= strSQLConst + 'NULL,'
	else
	   //<180>	strSQLConst	:= strSQLConst + Format ('''%.8d'',', [StrToInt64 (CmnEdit02010AccountNo.Text)]);
        strSQLConst	:= strSQLConst + QuotedStr(Trim (CmnEdit02010AccountNo.Text)) + ',';      //<180>

	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit02011FBDivision.AsInteger]);	// FBｾｯﾄ区分

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02004BankName.Text);			// 銀行名称
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02006BranchName.Text);			// 支店名称
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02005BankNameKana.Text);		// 銀行名称(ｶﾅ)
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02007BranchNameKana.Text);		// 支店名称(ｶﾅ)
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

// <110>	strDescription	:= fnConvertStringFieldValue (CmnEdit06003ReceiverName.Text);		// 受取人名称
// <154> 2007/02/01 H.Kawato Mod
//	strDescription	:= fnConvertStringFieldValue (CmnEdit01027ReceiverName.Text);		// 受取人名称
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [CmnEdit01027ReceiverName.Text]);
	strSQLConst		:= strSQLConst + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ',';

	strDescription	:= fnConvertStringFieldValue (CmnEdit02008TranslationName.Text);	// 振込先名称(ｶﾅ)
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

// <179> Add Start
	//平行支払採用なしで口座自動引落区分ありの場合引落し支払データは1にする(債務のプログラム上こうしないとまずい)
    iDebitData		:= CmnEdit02019DebitData.AsInteger;
//    if (m_iHeikouData = 0) and (CmnEdit02018DebitDivision.AsInteger = 1) and (iDebitData = 0) then	// <200> Del
//    	iDebitData	:= 1;																				// <200> Del
// <179> Add End

	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit02016ComCalculation.AsInteger])	// 手数料計算区分
							   + Format ('%d,', [CmnEdit02015ComDivision   .AsInteger])	// 手数料負担
							   + Format ('%d,', [CmnEdit02017PayDivision   .AsInteger]);

// <137> 2006/06/28 H.Kawato Add Start
	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit02018DebitDivision.AsInteger])	// 口座自動引落区分   <137> Add
// <179> Mod Start
//							   + Format ('%d,', [CmnEdit02019DebitData    .AsInteger]); // 自動引落支払データ <137> Add
							   + Format ('%d,', [iDebitData]); 							// 自動引落支払データ <137> Add
// <179> Mod End
// <137> 2006/06/28 H.Kawato Add End

	strDescription	:= fnConvertStringFieldValue (CmnEdit02014EDIInfo.Text);			// EDI情報
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	if	(CmnEdit02012VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ1
		strSQLConst	:= strSQLConst + 'NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('''%.10d'',', [StrToInt64 (CmnEdit02012VisitorCode.Text)]);

	if	(CmnEdit02013VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ2
		strSQLConst	:= strSQLConst + 'NULL)'
	else
		strSQLConst	:= strSQLConst + Format ('''%.10d'')', [StrToInt64 (CmnEdit02013VisitorCode.Text)]);

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo01Update (pUpdateRecord: Pointer): String;
var
	pRecord		  : ^MasterData;
	strSQLConst	  : String;
	strDescription: String;

    lvBankNCD     : Extended;
    lvBrNCD       : Extended;
    lvIraiNCD     : Extended;
    iDebitData	  : Integer;	// <179> Add

begin
	pRecord	:= pUpdateRecord;

    lvIraiNCD   := fnGetIraiNCode(CmnEdit02001AccountCode.AsInteger);
    lvBankNCD   := fnGetBankNCode(CmnEdit02002BankCode.AsInteger);
// <SCA> MOD-STR
//  lvBrNCD     := fnGetBranchNCode(lvBankNCD,CmnEdit02003BranchCode.AsInteger);
    lvBrNCD     := m_anBrachNCode[1];       // 振込先支店内部コード
// <SCA> MOD-END

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>

    //-------------------------------------------------------------------
    // 依頼口座ｺｰﾄﾞ
	if	(CmnEdit02001AccountCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'AccNCode = NULL,'
	else
    begin
        if lvIraiNCD = -1 then
            strSQLConst	:= strSQLConst + 'AccNCode = NULL,'
        else
    		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD) + ',';
    end;

{//HIS0050
    // 銀行ｺｰﾄﾞ
	if	(CmnEdit02002BankCode.InputFlag) then
	strSQLConst	:= strSQLConst + 'BankNCode = NULL,'
	else
    begin
        if lvBankNCD = -1 then
          	strSQLConst	:= strSQLConst + 'BankNCode = NULL,'
        else
            strSQLConst	:= strSQLConst + 'BankNCode = ' + FormatFloat('#', lvBankNCD) + ',';
    end;
}

    // 支店ｺｰﾄﾞ
	if	(CmnEdit02003BranchCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'BkBraNCode = NULL,'
	else
    begin
        if lvBankNCD = -1 then
    		strSQLConst	:= strSQLConst + 'BkBraNCode = NULL,'
        else
            strSQLConst	:= strSQLConst + 'BkBraNCode = ' + FormatFloat('#', lvBrNCD) + ',';
    end;
    //-------------------------------------------------------------------

	strSQLConst	:= strSQLConst + Format ('AccKbn = %d,', [CmnEdit02009DepDivision.AsInteger]);

	if	(CmnEdit02010AccountNo.Text = '') then											// 口座番号
		strSQLConst	:= strSQLConst + 'AccNo = NULL,'
	else
	   //<180>	strSQLConst	:= strSQLConst + Format ('AccNo = ''%.8d'',', [StrToInt64 (CmnEdit02010AccountNo.Text)]);
        strSQLConst	:= strSQLConst + 'AccNo = ' + QuotedStr(Trim (CmnEdit02010AccountNo.Text)) + ',';   //<180>

	strSQLConst	:= strSQLConst + Format ('FBSet = %d,', [CmnEdit02011FBDivision.AsInteger]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02004BankName.Text);			// 銀行名称
//	strSQLConst		:= strSQLConst + Format ('BankName      = ''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02006BranchName.Text);			// 支店名称
//	strSQLConst		:= strSQLConst + Format ('BkBraName     = ''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02005BankNameKana.Text);		// 銀行名称(ｶﾅ)
//	strSQLConst		:= strSQLConst + Format ('BankKanaName  = ''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit02007BranchNameKana.Text);		// 支店名称(ｶﾅ)
//	strSQLConst		:= strSQLConst + Format ('BraKanaName   = ''%s'',', [strDescription]);

// <110>	strDescription	:= fnConvertStringFieldValue (CmnEdit06003ReceiverName.Text);		// 受取人名称
// <154> 2007/02/01 H.Kawato Mod
//	strDescription	:= fnConvertStringFieldValue (CmnEdit01027ReceiverName.Text);		// 受取人名称
//	strSQLConst		:= strSQLConst + Format ('UketoriName   = ''%s'',', [strDescription]);
	strSQLConst		:= strSQLConst + 'UketoriName   = ' + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ',';

	strDescription	:= fnConvertStringFieldValue (CmnEdit02008TranslationName.Text);	// 振込先名称(ｶﾅ)
	strSQLConst		:= strSQLConst + Format ('TransKanaName = ''%s'',', [strDescription]);

	strSQLConst	:= strSQLConst
				+ Format ('ChargeKbn   = %d,', [CmnEdit02016ComCalculation.AsInteger])	// 手数料計算区分
				+ Format ('ChargeFutan = %d,', [CmnEdit02015ComDivision   .AsInteger])	// 手数料負担
				+ Format ('TransKbn    = %d,', [CmnEdit02017PayDivision   .AsInteger]);	// 振込方法

// <179> Add Start
	//平行支払採用なしで口座自動引落区分ありの場合引落し支払データは1にする(債務のプログラム上こうしないとまずい)
    iDebitData		:= CmnEdit02019DebitData.AsInteger;
//    if (m_iHeikouData = 0) and (CmnEdit02018DebitDivision.AsInteger = 1) and (iDebitData = 0) then	// <200> Del
//    	iDebitData	:= 1;																				// <200> Del
// <179> Add End

// <137> 2006/06/28 H.Kawato Add Start
	strSQLConst	:= strSQLConst
				+ Format ('AccAutoKbn  = %d,', [CmnEdit02018DebitDivision.AsInteger])	// 口座自動引落区分
// <179> Mod Start
//				+ Format ('AccAutoData = %d,', [CmnEdit02019DebitData    .AsInteger]);	// 自動引落支払データ
				+ Format ('AccAutoData = %d,', [iDebitData]);							// 自動引落支払データ
// <179> Mod End
// <137> 2006/06/28 H.Kawato Add End

	strDescription	:= fnConvertStringFieldValue (CmnEdit02014EDIInfo.Text);			// EDI情報
	strSQLConst		:= strSQLConst + Format ('EdiInfo = ''%s'',', [strDescription]);

	if	(CmnEdit02012VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ1
		strSQLConst	:= strSQLConst + 'AiteNo1 = NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('AiteNo1 = ''%.10d'',', [StrToInt64 (CmnEdit02012VisitorCode.Text)]);

	if	(CmnEdit02013VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ2
		strSQLConst	:= strSQLConst + 'AiteNo2 = NULL'
	else
		strSQLConst	:= strSQLConst + Format ('AiteNo2 = ''%.10d'' ', [StrToInt64 (CmnEdit02013VisitorCode.Text)]);

	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = 1 AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分

// <149> 2006/10/11 H.Kawato Mod Start
//	strSQLConst	:= strSQLConst + 'PayNCode = ' + FloatToStr(pRecord^.nNCode);	        // 外部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + 'PayNCode = ' + FloatToStr(pRecord^.nNCode) + ' ';     // 内部ｺｰﾄﾞ

	strSQLConst	:= strSQLConst + 'AND PayPtnNo = ' + FloatToStr(m_nPayPtnNo) + ' ';     // 条件ﾊﾟﾀｰﾝNo
// <149> 2006/10/11 H.Kawato Mod End
	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分 <161> Add

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo02Insert (pUpdateRecord: Pointer): String;
var
	pRecord		  : ^MasterData;
	strSQLConst	  : String;
	strDescription: String;

    lvIraiNCD     : Extended;
    lvBankNCD     : Extended;
    lvBrNCD       : Extended;

begin

    lvIraiNCD   := fnGetIraiNCode(CmnEdit03001AccountCode.AsInteger);
    lvBankNCD   := fnGetBankNCode(CmnEdit03002BankCode.AsInteger);
// <SCA> MOD-STR
//  lvBrNCD     := fnGetBranchNCode(lvBankNCD,CmnEdit03003BranchCode.AsInteger);
    lvBrNCD     := m_anBrachNCode[2];       // 振込先支店内部コード
// <SCA> MOD-END

	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ<173>
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode      ,'					// 依頼口座ｺｰﾄﾞ
//HIS0050												 + 'BankNCode       ,'					// 全銀協銀行ｺｰﾄﾞ
												 + 'BkBraNCode      ,'					// 全銀協支店ｺｰﾄﾞ
												 + 'AccKbn         ,'					// 預金種別
												 + 'AccNo          ,'					// 口座番号
												 + 'FBSet          ,'					// FBｾｯﾄ区分
												 + 'UketoriName    ,'					// 受取人名称
												 + 'TransKanaName  ,'					// ｶﾅ振込先名称
												 + 'ChargeKbn      ,'					// 手数料計算区分
												 + 'ChargeFutan    ,'					// 手数料負担
												 + 'TransKbn       ,'					// 振込方法
												 + 'EdiInfo        ,'					// EDI情報
												 + 'AiteNo1        ,'					// 顧客ｺｰﾄﾞ1
												 + 'AiteNo2        ,'					// 顧客ｺｰﾄﾞ2
// <220> MOD-STR
//												 + 'Site           )'					// ｻｲﾄ
												 + 'Site           ,'					// ｻｲﾄ
												 + 'BaseKingaku    )'					// 期日依頼口座ｺｰﾄﾞ
// <220> MOD-END

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                    		// 更新担当者内部ｺｰﾄﾞ<173>
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','                            // 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
							 + Format ('%d,'    , [2                  ])				// 支払種別
							 + Format ('%d,'    , [1                  ]);				// 枝番

{
	if	(CmnEdit03001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else

		strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit03001AccountCode.AsInteger]);


	if	(CmnEdit03002BankCode.InputFlag) then											// 全銀協銀行ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit03002BankCode.AsInteger]);

	if	(CmnEdit03003BranchCode.InputFlag) then											// 全銀協支店ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit03003BranchCode.AsInteger]);
}
    //----------------------------------------------------------
    // 依頼口座ｺｰﾄﾞ
	if	(CmnEdit03001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        if lvIraiNCD = -1 then
            strSQLConst	:= strSQLConst + 'NULL,'
        else
    		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';
    end;

{HIS0050
     // 銀行ｺｰﾄﾞ
	if	(CmnEdit03002BankCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        strSQLConst	:= strSQLConst + FormatFloat('#',lvBankNCD) + ',';
    end;
}
    // 支店ｺｰﾄﾞ
	if	(CmnEdit03003BranchCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        if lvBrNCD = -1 then
            strSQLConst	:= strSQLConst + 'NULL,'
        else
        	strSQLConst	:= strSQLConst + FormatFloat ('#',lvBrNCD) + ',';
    end;
    //------------------------------------------------------------


	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit03009DepDivision.AsInteger]);	// 預金種別

	if	(CmnEdit03010AccountNo.Text = '') then											// 口座番号
		strSQLConst	:= strSQLConst + 'NULL,'
	else
	//<180>	strSQLConst	:= strSQLConst + Format ('''%.8d'',', [StrToInt64 (CmnEdit03010AccountNo.Text)]);
    	strSQLConst	:= strSQLConst + QuotedStr(Trim (CmnEdit03010AccountNo.Text)) + ',';  //<180>

	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit03011FBDivision.AsInteger]);	// FBｾｯﾄ区分

//  strDescription  := fnConvertStringFieldValue (CmnEdit03004BankName.Text);			// 銀行名称
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit03006BranchName.Text);			// 支店名称
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit03005BankNameKana.Text);		// 銀行名称(ｶﾅ)
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

//	strDescription	:= fnConvertStringFieldValue (CmnEdit03007BranchNameKana.Text);		// 支店名称(ｶﾅ)
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

// <110>	strDescription	:= fnConvertStringFieldValue (CmnEdit06003ReceiverName.Text);		// 受取人名称
// <154> 2007/02/01 H.Kawato Mod
//	strDescription	:= fnConvertStringFieldValue (CmnEdit01027ReceiverName.Text);		// 受取人名称
//	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);
	strSQLConst		:= strSQLConst + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ',';

	strDescription	:= fnConvertStringFieldValue (CmnEdit03008TranslationName.Text);	// 振込先名称(ｶﾅ)
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strSQLConst	:= strSQLConst
							+ Format ('%d,', [CmnEdit03016ComCalculation.AsInteger])	// 手数料計算区分
							+ Format ('%d,', [CmnEdit03015ComDivision   .AsInteger])	// 手数料負担
							+ Format ('%d,', [CmnEdit03017PayDivision   .AsInteger]);	// 振込方法

	strDescription	:= fnConvertStringFieldValue (CmnEdit03014EDIInfo.Text);			// EDI情報
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	if	(CmnEdit03012VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ1
		strSQLConst	:= strSQLConst + 'NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('''%.10d'',', [StrToInt64 (CmnEdit03012VisitorCode.Text)]);

	if	(CmnEdit03013VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ2
		strSQLConst	:= strSQLConst + 'NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('''%.10d'',', [StrToInt64 (CmnEdit03013VisitorCode.Text)]);

// <220> MOD-STR
//	strSQLConst	:= strSQLConst + Format ('%d)', [CmnEdit03018PaySight.AsInteger]);		// ｻｲﾄ
	strSQLConst	:= strSQLConst + Format ('%d', [CmnEdit03018PaySight.AsInteger]);		// ｻｲﾄ

    // 期日依頼口座ｺｰﾄﾞ
    lvIraiNCD   := fnGetIraiNCode(CmnEdit03021AccountCode.AsInteger);

	if	(CmnEdit03021AccountCode.InputFlag) then
		strSQLConst	:= strSQLConst + ',NULL'
	else
    begin
        if lvIraiNCD = -1 then
            strSQLConst	:= strSQLConst + ',NULL'
        else
    		strSQLConst	:= strSQLConst + ',' + FormatFloat ('#',lvIraiNCD);
    end;

	strSQLConst	:= strSQLConst + ')';
// <220> MOD-END

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo02Update (pUpdateRecord: Pointer): String;
var
	pRecord		  : ^MasterData;
	strSQLConst	  : String;
	strDescription: String;

    lvIraiNCD     : Extended;
    lvBankNCD     : Extended;
    lvBrNCD       : Extended;

begin

    lvIraiNCD   := fnGetIraiNCode(CmnEdit03001AccountCode.AsInteger);
    lvBankNCD   := fnGetBankNCode(CmnEdit03002BankCode.AsInteger);
// <SCA> MOD-STR
//  lvBrNCD     := fnGetBranchNCode(lvBankNCD,CmnEdit03003BranchCode.AsInteger);
    lvBrNCD     := m_anBrachNCode[2];       // 振込先支店内部コード
// <SCA> MOD-END

	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>

    //-------------------------------------------------------------------
    // 依頼口座ｺｰﾄﾞ
	if	(CmnEdit03001AccountCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'AccNCode = NULL,'
	else
    begin
        if lvIraiNCD = -1 then
            strSQLConst	:= strSQLConst + 'AccNCode = NULL,'
        else
    		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD) + ',';
    end;

{HIS0050
    // 銀行ｺｰﾄﾞ
	if	(CmnEdit03002BankCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'BankNCode = NULL,'
	else
    begin
        if lvBankNCD = -1 then
    		strSQLConst	:= strSQLConst + 'BankNCode = NULL,'
        else
            strSQLConst	:= strSQLConst + 'BankNCode = ' + FormatFloat('#', lvBankNCD) + ',';
    end;
}

    // 支店ｺｰﾄﾞ
	if	(CmnEdit03003BranchCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'BkBraNCode = NULL,'
	else
    begin
        if lvBankNCD = -1 then
    		strSQLConst	:= strSQLConst + 'BkBraNCode = NULL,'
        else
            strSQLConst	:= strSQLConst + 'BkBraNCode = ' + FormatFloat('#', lvBrNCD) + ',';
    end;
    //-------------------------------------------------------------------


	strSQLConst	:= strSQLConst + Format ('AccKbn = %d,', [CmnEdit03009DepDivision.AsInteger]);

	if	(CmnEdit03010AccountNo.Text = '') then											// 口座番号
		strSQLConst	:= strSQLConst + 'AccNo = NULL,'
	else
	   //<180>	strSQLConst	:= strSQLConst + Format ('AccNo = ''%.8d'',', [StrToInt64 (CmnEdit03010AccountNo.Text)]);
        strSQLConst	:= strSQLConst + 'AccNo = ' + QuotedStr(Trim (CmnEdit03010AccountNo.Text)) + ',';   //<180>

	strSQLConst	:= strSQLConst + Format ('FBSet = %d,', [CmnEdit03011FBDivision.AsInteger]);


// <110>	strDescription	:= fnConvertStringFieldValue (CmnEdit06003ReceiverName.Text);		// 受取人名称
// <154> 2007/02/01 H.Kawato Mod
//	strDescription	:= fnConvertStringFieldValue (CmnEdit01027ReceiverName.Text);		// 受取人名称
//	strSQLConst		:= strSQLConst + Format ('UketoriName   = ''%s'',', [strDescription]);
	strSQLConst		:= strSQLConst + 'UketoriName   = ' + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ',';

	strDescription	:= fnConvertStringFieldValue (CmnEdit03008TranslationName.Text);	// 振込先名称(ｶﾅ)
	strSQLConst		:= strSQLConst + Format ('TransKanaName = ''%s'',', [strDescription]);

	strSQLConst	:= strSQLConst
				+ Format ('ChargeKbn   = %d,', [CmnEdit03016ComCalculation.AsInteger])	// 手数料計算区分
				+ Format ('ChargeFutan = %d,', [CmnEdit03015ComDivision   .AsInteger])	// 手数料負担
				+ Format ('TransKbn    = %d,', [CmnEdit03017PayDivision   .AsInteger]);	// 振込方法

	strDescription	:= fnConvertStringFieldValue (CmnEdit03014EDIInfo.Text);			// EDI情報
	strSQLConst		:= strSQLConst + Format ('EdiInfo = ''%s'',', [strDescription]);

	if	(CmnEdit03012VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ1
		strSQLConst	:= strSQLConst + 'AiteNo1 = NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('AiteNo1 = ''%.10d'',', [StrToInt64 (CmnEdit03012VisitorCode.Text)]);

	if	(CmnEdit03013VisitorCode.Text = '') then										// 顧客ｺｰﾄﾞ2
		strSQLConst	:= strSQLConst + 'AiteNo2 = NULL,'
	else
		strSQLConst	:= strSQLConst + Format ('AiteNo2 = ''%.10d'',', [StrToInt64 (CmnEdit03013VisitorCode.Text)]);

	strSQLConst	:= strSQLConst + Format ('Site = %d', [CmnEdit03018PaySight.AsInteger]);

// <220> ADD-STR
    // 期日依頼口座ｺｰﾄﾞ
    lvIraiNCD   := fnGetIraiNCode(CmnEdit03021AccountCode.AsInteger);

	if	(CmnEdit03021AccountCode.InputFlag) then
		strSQLConst	:= strSQLConst + ',BaseKingaku = NULL'
	else
    begin
        if lvIraiNCD = -1 then
            strSQLConst	:= strSQLConst + ',BaseKingaku = NULL'
        else
    		strSQLConst	:= strSQLConst + ',BaseKingaku = ' + FormatFloat ('#',lvIraiNCD);
    end;
// <220> ADD-END

	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = 2 AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分
// <149> 2006/10/11 H.Kawato Mod Start
//	strSQLConst	:= strSQLConst + 'PayNCode = '  +  FloatToStr(pRecord^.nNCode);	        // 外部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + 'PayNCode = '  +  FloatToStr(pRecord^.nNCode) + ' ';   // 内部ｺｰﾄﾞ

	strSQLConst	:= strSQLConst + 'AND PayPtnNo = '  +  FloatToStr(m_nPayPtnNo) + ' ';   // 条件ﾊﾟﾀｰﾝNo
// <149> 2006/10/11 H.Kawato Mod End
	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分 <161> Add

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo03Insert (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	strSQLConst: String;
    lvIraiNCD   : Extended;     // <148> 2006/10/06 H.Kawato Add
// <211> ADD-STR
    lvBankNCD       : Extended;
    lvBrNCD         : Extended;

	strDescription  : String;
// <211> ADD-END

begin
	pRecord	:= pUpdateRecord;

    lvIraiNCD   := fnGetIraiNCode(CmnEdit04001AccountCode.AsInteger);                   // <148> 2006/10/06 H.Kawato Add
// <211> ADD-STR
    lvBankNCD   := fnGetBankNCode(CmnEdit04007BankCode.AsInteger);
// <SCA> MOD-STR
//  lvBrNCD     := fnGetBranchNCode(lvBankNCD,CmnEdit04008BranchCode.AsInteger);
    lvBrNCD     := m_anBrachNCode[3];       // 振込先支店内部コード
// <SCA> MOD-END
// <211> ADD-END

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ<173>
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode       ,'					// 依頼口座ｺｰﾄﾞ
												 + 'UketoriName    ,'					// 受取人名称
												 + 'Site           ,'					// ｻｲﾄ
												 + 'TegYusouKbn    ,'					// 手形郵送区分
												 + 'TegYusouFutan  ,'					// 手形郵送料負担区分
// <211> MOD-STR
//												 + 'TegBunkatuMax  )'					// 手形分割枚数
												 + 'TegBunkatuMax  ,'					// 手形分割枚数
												 + 'ERKbn          ,'					// 電子債権採用区分
												 + 'BkBraNCode     ,'					// 全銀協支店ｺｰﾄﾞ
												 + 'TransKanaName  ,'					// ｶﾅ振込先名称
												 + 'AccKbn         ,'					// 預金種別
												 + 'AccNo          ,'					// 口座番号
												 + 'ChargeFutan    ,'					// 手数料負担
												 + 'ChargeKbn      ,'					// 手数料計算区分
												 + 'VFree1         ,'					// 文字フリー項目１
												 + 'VFree2         ,'					// 文字フリー項目２
												 + 'VFree3         ,'					// 文字フリー項目３
												 + 'VFree4         ,'					// 文字フリー項目４
												 + 'VFree5          '					// 文字フリー項目５
                                                 + ')'
// <211> MOD-END
				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                     		// 更新担当者内部ｺｰﾄﾞ<173>
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','		        		    // 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
							 + Format ('%d,'    , [3                  ])				// 支払種別
							 + Format ('%d,'    , [1                  ]);				// 枝番

	if	(CmnEdit04001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
// <148> 2006/10/06 H.Kawato Mod
//		strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit04001AccountCode.AsInteger]);
		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';

// <110>	strSQLConst	:= strSQLConst + Format ('''%s'',', [CmnEdit06003ReceiverName.Text])	// 受取人名称
// <154> 2007/02/01 H.Kawato Mod
//	strSQLConst	:= strSQLConst + Format ('''%s'',', [CmnEdit01027ReceiverName.Text])	// 受取人名称
	strSQLConst	:= strSQLConst + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ','	// 受取人名称
							   + Format ('%d,', [CmnEdit04002PaySight   .AsInteger])	// ｻｲﾄ
							   + Format ('%d,', [CmnEdit04004PosDivision.AsInteger])	// 手形郵送区分
							   + Format ('%d,', [CmnEdit04005BurDivision.AsInteger])	// 手形郵送料負担区分
// <211> MOD-STR
//							   + Format ('%d)', [CmnEdit04003DivSheets  .AsInteger]);	// 手形分割枚数
							   + Format ('%d,', [CmnEdit04003DivSheets  .AsInteger]);	// 手形分割枚数

	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit04006ERKbn.AsInteger]);	        // 電子債権採用区分

    // 支店ｺｰﾄﾞ
	if	(CmnEdit04008BranchCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        if lvBrNCD = -1 then
            strSQLConst	:= strSQLConst + 'NULL,'
        else
        	strSQLConst	:= strSQLConst + FormatFloat ('#',lvBrNCD) + ',';
    end;

	strDescription	:= fnConvertStringFieldValue (CmnEdit04013TranslationName.Text);	// 振込先名称(ｶﾅ)
	strSQLConst		:= strSQLConst + Format ('''%s'',', [strDescription]);

	strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit04014DepDivision.AsInteger]);	// 預金種別

	if	(CmnEdit04015AccountNo.Text = '') then											// 口座番号
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    	strSQLConst	:= strSQLConst + QuotedStr(Trim (CmnEdit04015AccountNo.Text)) + ',';

	strSQLConst	:= strSQLConst
							+ Format ('%d,', [CmnEdit04016ComDivision   .AsInteger])	// 手数料負担
							+ Format ('%d,', [CmnEdit04017ComCalculation.AsInteger])	// 手数料計算区分
							+ QuotedStr(Trim (CmnEdit04018Free1.Text)) + ','			// 文字フリー項目１
							+ QuotedStr(Trim (CmnEdit04019Free2.Text)) + ','			// 文字フリー項目２
							+ QuotedStr(Trim (CmnEdit04020Free3.Text)) + ','			// 文字フリー項目３
							+ QuotedStr(Trim (CmnEdit04021Free4.Text)) + ','			// 文字フリー項目４
							+ QuotedStr(Trim (CmnEdit04022Free5.Text)) + ')';			// 文字フリー項目５
// <211> MOD-END

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo03Update (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	strSQLConst: String;
    lvIraiNCD   : Extended;
// <211> ADD-STR
    lvBankNCD       : Extended;
    lvBrNCD         : Extended;

	strDescription  : String;
// <211> ADD-END
begin
	pRecord	:= pUpdateRecord;

    lvIraiNCD   := fnGetIraiNCode(CmnEdit04001AccountCode.AsInteger);

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>

	if	(CmnEdit04001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'AccNCode = NULL,'
	else
  		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD) + ',';

	strSQLConst	:= strSQLConst
// <110>				+ Format ('UketoriName   = ''%s'',', [CmnEdit06003ReceiverName.Text])	// 受取人名称
// <154>				+ Format ('UketoriName   = ''%s'',', [CmnEdit01027ReceiverName.Text])	// 受取人名称
				+ 'UketoriName   = ' + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ','	// 受取人名称
				+ Format ('Site          = %d,', [CmnEdit04002PaySight   .AsInteger])	// ｻｲﾄ
				+ Format ('TegYusouKbn   = %d,', [CmnEdit04004PosDivision.AsInteger])	// 手形郵送区分
				+ Format ('TegYusouFutan = %d,', [CmnEdit04005BurDivision.AsInteger])	// 手形郵送料負担区分
				+ Format ('TegBunkatuMax = %d ', [CmnEdit04003DivSheets  .AsInteger]);	// 手形分割枚数
// <211> ADD-STR
	strSQLConst	:= strSQLConst + ','
                + Format ('ERKbn = %d,', [CmnEdit04006ERKbn.AsInteger])                 // 電子債権採用区分
                +  'BkBraNCode = ';

    // 支店ｺｰﾄﾞ
	if	(CmnEdit04008BranchCode.InputFlag) then
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    begin
        lvBankNCD   := fnGetBankNCode(CmnEdit04007BankCode.AsInteger);
// <SCA> MOD-STR
//      lvBrNCD     := fnGetBranchNCode(lvBankNCD,CmnEdit04008BranchCode.AsInteger);
        lvBrNCD     := m_anBrachNCode[3];       // 振込先支店内部コード
// <SCA> MOD-END

        if lvBrNCD = -1 then
            strSQLConst	:= strSQLConst + 'NULL,'
        else
        	strSQLConst	:= strSQLConst + FormatFloat ('#',lvBrNCD) + ',';
    end;

	strDescription	:= fnConvertStringFieldValue (CmnEdit04013TranslationName.Text);	// 振込先名称(ｶﾅ)
	strSQLConst		:= strSQLConst
                + 'TransKanaName = ' + Format ('''%s'',', [strDescription])
                + 'Acckbn = ' + Format ('%d,', [CmnEdit04014DepDivision.AsInteger])	    // 預金種別
                + 'AccNo = ';

	if	(CmnEdit04015AccountNo.Text = '') then											// 口座番号
		strSQLConst	:= strSQLConst + 'NULL,'
	else
    	strSQLConst	:= strSQLConst + QuotedStr(Trim (CmnEdit04015AccountNo.Text)) + ',';

	strSQLConst	:= strSQLConst
                + 'ChargeFutan = ' + Format ('%d,', [CmnEdit04016ComDivision.AsInteger])	// 手数料負担
				+ 'ChargeKbn = ' + Format ('%d,', [CmnEdit04017ComCalculation.AsInteger])	// 手数料計算区分
				+ 'VFree1 = ' + QuotedStr(Trim (CmnEdit04018Free1.Text)) + ','			// 文字フリー項目１
				+ 'VFree2 = ' + QuotedStr(Trim (CmnEdit04019Free2.Text)) + ','			// 文字フリー項目２
				+ 'VFree3 = ' + QuotedStr(Trim (CmnEdit04020Free3.Text)) + ','			// 文字フリー項目３
				+ 'VFree4 = ' + QuotedStr(Trim (CmnEdit04021Free4.Text)) + ','			// 文字フリー項目４
				+ 'VFree5 = ' + QuotedStr(Trim (CmnEdit04022Free5.Text));				// 文字フリー項目５

// <211> ADD-END

	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = 3 AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分
// <149> 2006/10/11 H.Kawato Mod Start
//	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode);	        // 外部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode) + ' ';	// 内部ｺｰﾄﾞ

	strSQLConst	:= strSQLConst + 'AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo) + ' ';    // 条件ﾊﾟﾀｰﾝNo
// <149> 2006/10/11 H.Kawato Mod End
	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分 <161>

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo04Insert (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	strSQLConst: String;
    lvIraiNCD   : Extended;     // <148> 2006/10/06 H.Kawato Add

begin
	pRecord	:= pUpdateRecord;

// <211> MOD-STR
//  lvIraiNCD   := fnGetIraiNCode(CmnEdit04006AccountCode.AsInteger);                   // <148> 2006/10/06 H.Kawato Add
    lvIraiNCD   := fnGetIraiNCode(CmnEdit08001AccountCode.AsInteger);
// <211> MOD-END

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ<173>
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode       ,'					// 依頼口座ｺｰﾄﾞ
												 + 'UketoriName    ,'					// 受取人名称
												 + 'TegYusouKbn    ,'					// 手形郵送区分
												 + 'TegYusouFutan  )'					// 手形郵送料負担区分

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                     		// 更新担当者内部ｺｰﾄﾞ<173>
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','		        		    // 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
							 + Format ('%d,'    , [4                  ])				// 支払種別
							 + Format ('%d,'    , [1                  ]);				// 枝番

// <211> MOD-STR
//	if	(CmnEdit04006AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
	if	(CmnEdit08001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
// <211> MOD-END
		strSQLConst	:= strSQLConst + 'NULL,'
	else
// <148> 2006/10/06 H.Kawato Mod
//		strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit04006AccountCode.AsInteger]);
		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';

// <110>	strSQLConst	:= strSQLConst + Format ('''%s'',', [CmnEdit06003ReceiverName.Text])	// 受取人名称
// <154>	strSQLConst	:= strSQLConst + Format ('''%s'',', [CmnEdit01027ReceiverName.Text])	// 受取人名称
	strSQLConst	:= strSQLConst + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ','       // 受取人名称
// <211> MOD-STR
//							   + Format ('%d,', [CmnEdit04007PosDivision.AsInteger])	// 手形郵送区分
//							   + Format ('%d)', [CmnEdit04008BurDivision.AsInteger]);	// 手形郵送料負担区分
							   + Format ('%d,', [CmnEdit08002PosDivision.AsInteger])	// 小切手郵送区分
							   + Format ('%d)', [CmnEdit08003BurDivision.AsInteger]);	// 小切手郵送料負担区分
// <211> MOD-END

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo04Update (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	strSQLConst: String;

    lvIraiNCD   : Extended;

begin
	pRecord	:= pUpdateRecord;

// <211> MOD-STR
//  lvIraiNCD   := fnGetIraiNCode(CmnEdit04006AccountCode.AsInteger);
    lvIraiNCD   := fnGetIraiNCode(CmnEdit08001AccountCode.AsInteger);
// <211> MOD-END

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>

// <211> MOD-STR
//	if	(CmnEdit04006AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
	if	(CmnEdit08001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
// <211> MOD-END
		strSQLConst	:= strSQLConst + 'AccNCode  = NULL,'
	else
  		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD) + ',';

	strSQLConst	:= strSQLConst
// <110>				+ Format ('UketoriName   = ''%s'',', [CmnEdit06003ReceiverName.Text])	// 受取人名称
// <154>				+ Format ('UketoriName   = ''%s'',', [CmnEdit01027ReceiverName.Text])	// 受取人名称
				+ 'UketoriName   = ' + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ',' // 受取人名称
// <211> MOD-STR
//				+ Format ('TegYusouKbn   = %d,', [CmnEdit04007PosDivision.AsInteger])	// 手形郵送区分
//				+ Format ('TegYusouFutan = %d ', [CmnEdit04008BurDivision.AsInteger]);	// 手形郵送料負担区分
				+ Format ('TegYusouKbn   = %d,', [CmnEdit08002PosDivision.AsInteger])	// 小切手郵送区分
				+ Format ('TegYusouFutan = %d ', [CmnEdit08003BurDivision.AsInteger]);	// 小切手郵送料負担区分
// <211> MOD-END

	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = 4 AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分
// <149> 2006/10/11 H.Kawato Mod Start
//	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode);	        // 外部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode) + ' ';	// 内部ｺｰﾄﾞ

	strSQLConst	:= strSQLConst + 'AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo) + ' ';    // 条件ﾊﾟﾀｰﾝNo
// <149> 2006/10/11 H.Kawato Mod End
	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分 <161> Add

	Result	:= strSQLConst;
end;

//<189> Add ↓↓↓
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo05Insert (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	strSQLConst: String;

begin
	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         )'					// 枝番

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                     		// 更新担当者内部ｺｰﾄﾞ
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','		        		    // 条件ﾊﾟﾀｰﾝNo
							 + Format ('%d,'    , [5                  ])				// 支払種別
							 + Format ('%d '    , [1                  ])				// 枝番
							 + ')';

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo05Update (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	strSQLConst: String;

begin
	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';
	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd);
	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = 5 AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分
	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode) + ' ';	// 内部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + 'AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo) + ' ';    // 条件ﾊﾟﾀｰﾝNo
	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分 <161> Add

	Result	:= strSQLConst;
end;
//<189> Add ↑↑↑

// <222> ADD start
//*****************************************************************************
//	Process			:	電信送金タブのPayDetailInfo用SQL(insert)
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	pUpdateRecord	: 更新条件パラメータ
//	Return			:	String			: SQL
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo09Insert (pUpdateRecord: Pointer): String;
var
	pRecord		: ^MasterData;
	strSQLConst	: String;
    lvIraiNCD   : Extended;
	lvFeeNCD	: Extended;
begin
	pRecord	:= pUpdateRecord;
											// 振込依頼口座コード
    lvIraiNCD   := fnGetIraiNCode(CmnEdit09001AccountCode.AsInteger);
											// 手数料口座コード
    lvFeeNCD   	:= fnGetIraiNCode(CmnEdit09002AccountCode.AsInteger);


	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode       ,'					// 依頼口座ｺｰﾄﾞ
												 + 'FeeAccNCode    ,'					// 手数料口座ｺｰﾄﾞ
												 + 'ChargeFutan    ,'					// 手数料負担
												 + 'ChargeKbn      ,'					// 手数料計算区分	<222-8>MOD
                                                 + 'EdiInfo        ,'					// 取引先照会番号	<222-8>ADD
                                                 + 'PayHeadingNo   ,'					// 送金目的No		<222-8>ADD
                                                 + 'SendPurpose    ,'					// 送金目的内容		<222-8>ADD
                                                 + 'PermLicenceNo  ,'					// 送金許可No		<222-8>ADD
                                                 + 'PermDate       )'					// 送金許可日付		<222-8>ADD

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                     		// 更新担当者内部ｺｰﾄﾞ
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','		        		    // 条件ﾊﾟﾀｰﾝNo
							 + Format ('%d,'    , [11                  ])				// 支払種別
							 + Format ('%d,'    , [1                  ]);				// 枝番

	if	(CmnEdit09001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
  		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';

	if	(CmnEdit09002AccountCode.InputFlag) then										// 手数料口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
  		strSQLConst	:= strSQLConst + FormatFloat ('#',lvFeeNCD) + ',';

	strSQLConst	:= strSQLConst
                + Format ('%d,', [CmnEdit09003ComDivision.AsInteger])					// 手数料負担
				+ Format ('%d', [CmnEdit09004ComCalculation.AsInteger]);				// 手数料計算区分	<222-8>MOD
			 //	+ ')';		<222-8>DEL
    //<222-8>ADD↓
    // 取引先照会番号
    strSQLConst	:= strSQLConst + Format(',''%s''',[CmnEdit09006CustomerInquiryNo.Text]);

    // 送金目的No
    if (CmnEdit09007PayHeadingNo.InputFlag) then
    	strSQLConst	:= strSQLConst + ',NULL'
    else
    	strSQLConst	:= strSQLConst + Format(',%d',[CmnEdit09007PayHeadingNo.AsInteger]);

    // 送金目的内容
    strSQLConst	:= strSQLConst + Format(',''%s''',[CmnEdit09008SendPurpose.Text]);

    // 送金許可No
   	strSQLConst	:= strSQLConst + Format(',''%s''',[CmnEdit09009PermLicenceNo.Text]);

	// 送金許可日付
    if (CmnEdit09010PermDate.InputFlag) then
    	strSQLConst	:= strSQLConst + ',NULL'
    else
        strSQLConst	:= strSQLConst + Format(',%d',[CmnEdit09010PermDate.AsIntYM]);

	strSQLConst	:= strSQLConst + ')';
    //<222-8>ADD↑

	Result	:= strSQLConst;
end;

//*****************************************************************************
//	Process			:	電信送金タブのPayDetailInfo用SQL(update)
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	pUpdateRecord	: 更新条件パラメータ
//	Return			:	String			: SQL
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo09Update (pUpdateRecord: Pointer): String;
var
	pRecord		: ^MasterData;
	strSQLConst	: String;
    lvIraiNCD   : Extended;
	lvFeeNCD	: Extended;
begin
	pRecord	:= pUpdateRecord;
											// 振込依頼口座コード
    lvIraiNCD   := fnGetIraiNCode(CmnEdit09001AccountCode.AsInteger);
											// 手数料口座コード
    lvFeeNCD   	:= fnGetIraiNCode(CmnEdit09002AccountCode.AsInteger);

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; 

	if	(CmnEdit09001AccountCode.InputFlag) then										// 振込依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'AccNCode  = NULL,'
	else
  		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD) + ',';

	if	(CmnEdit09002AccountCode.InputFlag) then										// 手数料口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'FeeAccNCode  = NULL,'
	else
  		strSQLConst	:= strSQLConst + 'FeeAccNCode = ' + FormatFloat ('#',lvFeeNCD) + ',';


	strSQLConst	:= strSQLConst
                + 'ChargeFutan = ' + Format ('%d,', [CmnEdit09003ComDivision.AsInteger])	// 手数料負担
				+ 'ChargeKbn = ' + Format ('%d', [CmnEdit09004ComCalculation.AsInteger]);	// 手数料計算区分

    //<222-8>ADD↓
    // 取引先照会番号
    strSQLConst := strSQLConst + Format(',EdiInfo = ''%s''',[CmnEdit09006CustomerInquiryNo.Text]);

    // 送金目的No
    if (CmnEdit09007PayHeadingNo.InputFlag) then
    	strSQLConst := strSQLConst + ',PayHeadingNo = NULL'
    else
    	strSQLConst := strSQLConst + Format(',PayHeadingNo = %d',[CmnEdit09007PayHeadingNo.AsInteger]);

    // 送金目的内容
    strSQLConst := strSQLConst + Format(',SendPurpose = ''%s''',[CmnEdit09008SendPurpose.Text]);

    // 送金許可No
    strSQLConst := strSQLConst + Format(',PermLicenceNo = ''%s''',[CmnEdit09009PermLicenceNo.Text]);

    // 送金許可日付
    if (CmnEdit09010PermDate.InputFlag) then
    	strSQLConst := strSQLConst + ',PermDate = NULL'
    else
    	strSQLConst := strSQLConst + Format(',PermDate = %d',[CmnEdit09010PermDate.AsIntYM]);
    //<222-8>ADD↑

	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = 11 AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分

	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode) + ' ';	// 内部ｺｰﾄﾞ

	strSQLConst	:= strSQLConst + 'AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo) + ' ';    // 条件ﾊﾟﾀｰﾝNo

	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分

	Result	:= strSQLConst;
end;

//*****************************************************************************
//	Process			:	為替手形／送金小切手タブのPayDetailInfo用SQL(insert)
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	pUpdateRecord	: 更新条件パラメータ
//					:	nClass			: 支払種別(13: 為替手形か14: 送金小切手)
//	Return			:	String			: SQL
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo10Insert (pUpdateRecord: Pointer; nClass: Integer): String;
var
	pRecord		: ^MasterData;
	strSQLConst	: String;
    lvIraiNCD   : Extended;
	lvFeeNCD	: Extended;
begin
	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
												 + 'UpdTantoNCode  ,'					// 更新担当者内部ｺｰﾄﾞ
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode       ,'					// 振込依頼口座ｺｰﾄﾞ
												 + 'FeeAccNCode    ,'					// 手数料口座ｺｰﾄﾞ	<222-8>MOD
                                                 + 'PayHeadingNo   ,'					// 送金目的No		<222-8>ADD
                                                 + 'SendPurpose    ,'					// 送金目的内容		<222-8>ADD
                                                 + 'PermLicenceNo  ,'					// 送金許可No		<222-8>ADD
                                                 + 'PermDate       )'					// 送金許可日付		<222-8>ADD

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                     		// 更新担当者内部ｺｰﾄﾞ
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ','		        		    // 条件ﾊﾟﾀｰﾝNo 
							 + Format ('%d,'    , [nClass              ])				// 支払種別
							 + Format ('%d,'    , [1                  ]);				// 枝番

	{ 為替手形 }
	if nClass = 13 then
	begin
											// 支払口座コード
	    lvIraiNCD   := fnGetIraiNCode(CmnEdit10001AccountCode.AsInteger);

		if	(CmnEdit10001AccountCode.InputFlag) then									// 支払口座ｺｰﾄﾞ
			strSQLConst	:= strSQLConst + 'NULL,'
		else
	  		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';

		strSQLConst	:= strSQLConst + 'NULL';

        //<222-8>ADD↓
        // 送金目的No
        strSQLConst	:= strSQLConst + ',NULL';

        // 送金目的内容
        strSQLConst	:= strSQLConst + ',NULL';

        // 送金許可No
        strSQLConst	:= strSQLConst + ',NULL';

        // 送金許可日付
        strSQLConst	:= strSQLConst + ',NULL';
        //<222-8>ADD↑
	end
	{ 送金小切手 }
	else if nClass = 14 then
	begin
											// 依頼口座ｺｰﾄﾞ
	    lvIraiNCD   := fnGetIraiNCode(CmnEdit10002AccountCode.AsInteger);
											// 手数料口座ｺｰﾄﾞ
    	lvFeeNCD   	:= fnGetIraiNCode(CmnEdit10003AccountCode.AsInteger);

		if	(CmnEdit10002AccountCode.InputFlag) then									// 依頼口座ｺｰﾄﾞ
			strSQLConst	:= strSQLConst + 'NULL,'
		else
	  		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';


		if	(CmnEdit10003AccountCode.InputFlag) then									// 手数料口座ｺｰﾄﾞ
			strSQLConst	:= strSQLConst + 'NULL'
		else
	  		strSQLConst	:= strSQLConst + FormatFloat ('#',lvFeeNCD);

        //<222-8>ADD↓
        // 送金目的No
        if (CmnEdit10004PayHeadingNo.InputFlag) then
            strSQLConst	:= strSQLConst + ',NULL'
        else
            strSQLConst	:= strSQLConst + Format(',%d',[CmnEdit10004PayHeadingNo.AsInteger]);

        // 送金目的内容
        strSQLConst	:= strSQLConst + Format(',''%s''',[CmnEdit10005SendPurpose.Text]);

        // 送金許可No
        strSQLConst	:= strSQLConst + Format(',''%s''',[CmnEdit10006PermLicenceNo.Text]);

        // 送金許可日付
        if (CmnEdit10007PermDate.InputFlag) then
            strSQLConst	:= strSQLConst + ',NULL'
        else
            strSQLConst	:= strSQLConst + Format(',%d',[CmnEdit10007PermDate.AsIntYM]);
        //<222-8>ADD↑
	end;

	strSQLConst := strSQLConst + ')';

	Result	:= strSQLConst;
end;

//*****************************************************************************
//	Process			:	為替手形／送金小切手タブのPayDetailInfo用SQL(update)
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	pUpdateRecord	: 更新条件パラメータ
//	Return			:	String			: SQL
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnMakeSQLConstPayDetailInfo10Update (pUpdateRecord: Pointer; nClass: Integer): String;
var
	pRecord		: ^MasterData;
	strSQLConst	: String;
    lvIraiNCD   : Extended;
	lvFeeNCD	: Extended;
begin
	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'UPDATE PayDetailInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; 


	{ 為替手形 }
	if nClass = 13 then
	begin
											// 支払口座コード
	    lvIraiNCD   := fnGetIraiNCode(CmnEdit10001AccountCode.AsInteger);

		if	(CmnEdit10001AccountCode.InputFlag) then										// 支払口座ｺｰﾄﾞ
			strSQLConst	:= strSQLConst + 'AccNCode  = NULL'
		else
	  		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD);
	end
	{ 送金小切手 }
	else if nClass = 14 then
	begin

											// 振込依頼口座コード
	    lvIraiNCD   := fnGetIraiNCode(CmnEdit10002AccountCode.AsInteger);
											// 手数料口座コード
    	lvFeeNCD   	:= fnGetIraiNCode(CmnEdit10003AccountCode.AsInteger);

		if	(CmnEdit10002AccountCode.InputFlag) then										// 振込依頼口座ｺｰﾄﾞ
			strSQLConst	:= strSQLConst + 'AccNCode  = NULL,'
		else
	  		strSQLConst	:= strSQLConst + 'AccNCode = ' + FormatFloat ('#',lvIraiNCD) + ',';

		if	(CmnEdit10003AccountCode.InputFlag) then										// 手数料口座ｺｰﾄﾞ
			strSQLConst	:= strSQLConst + 'FeeAccNCode  = NULL'
		else
	  		strSQLConst	:= strSQLConst + 'FeeAccNCode = ' + FormatFloat ('#',lvFeeNCD);

        //<222-8>ADD↓
        // 送金目的No
        if (CmnEdit10004PayHeadingNo.InputFlag) then
            strSQLConst := strSQLConst + ',PayHeadingNo = NULL'
        else
            strSQLConst := strSQLConst + Format(',PayHeadingNo = %d',[CmnEdit10004PayHeadingNo.AsInteger]);

        // 送金目的内容
        strSQLConst := strSQLConst + Format(',SendPurpose = ''%s''',[CmnEdit10005SendPurpose.Text]);

        // 送金許可No
        strSQLConst := strSQLConst + Format(',PermLicenceNo = ''%s''',[CmnEdit10006PermLicenceNo.Text]);

        // 送金許可日付
        if (CmnEdit10007PermDate.InputFlag) then
            strSQLConst := strSQLConst + ',PermDate = NULL'
        else
            strSQLConst := strSQLConst + Format(',PermDate = %d',[CmnEdit10007PermDate.AsIntYM]);
        //<222-8>ADD↑
	end;

	strSQLConst	:= strSQLConst + ' WHERE ShiharaiSyubetu = ' + IntToStr(nClass)
    							+ ' AND Edaban = 1 AND '
							   + Format ('MasterKbn = %d AND ', [MASTER_CUSTOMER    ]);	// ﾏｽﾀ区分

	strSQLConst	:= strSQLConst + 'PayNCode = ' +  FloatToStr(pRecord^.nNCode) + ' ';	// 内部ｺｰﾄﾞ

	strSQLConst	:= strSQLConst + 'AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo) + ' ';    // 条件ﾊﾟﾀｰﾝNo

	strSQLConst	:= strSQLConst + 'AND RDelKbn = 0 ';                                    // 削除区分

	Result	:= strSQLConst;
end;
// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
(*
function	TJNTCRP004006f.fnMakeSQLConstPayOffsetInfoInsert (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	nPosition  : Integer;
	nCount	   : Integer;
	nCountStart: Integer;
	nDivision  : Integer;
	strSQLConst: String;

    nCode      : Extended;
    nDsp       : String;

begin
	pRecord	:= pUpdateRecord;

	with (CmnMemDataOffset) do
	begin
		strSQLConst	:= 'INSERT INTO PayOffsetInfo (' + 'MasterKbn,'						// ﾏｽﾀ区分
													 + 'PayNCode    ,'						// 取引先ｺｰﾄﾞ
													 + 'SousaiNo ,'						// 相殺№
													 + 'KmkNCode     ,'						// 科目ｺｰﾄﾞ
													 + 'SubNCode     ,'						// 科目別補助ｺｰﾄﾞ
													 + 'BmnNCode    ,'						// 部門ｺｰﾄﾞ
													 + 'SegNCode    ,'						// ｾｸﾞﾒﾝﾄ1ｺｰﾄﾞ
													 + 'HojKbn1   ,'						// 第1補助区分
													 + 'Hoj1NCode   ,'						// 第1補助ｺｰﾄﾞ
													 + 'HojKbn2   ,'						// 第2補助区分
													 + 'Hoj2NCode   ,'						// 第2補助ｺｰﾄﾞ
													 + 'FeeTaxCd ,'						// 消費税ｺｰﾄﾞ
													 + 'FeeTaxRt ,'						// 消費税率ｺｰﾄﾞ
													 + 'SousaiKin,'						// 相殺金額
													 + 'ZeiKin)'						// 消費税額

			+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER                 ])		// ﾏｽﾀ区分
						 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
						 + Format ('%d,'    , [FieldByName ('nSeqNo').AsInteger]);		// 相殺№

		if	(FieldByName ('nKmkCode').AsInteger = 0) then
			strSQLConst	:= strSQLConst + '0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,'
		else
		begin

            fnCheckValidKmkCodeG(FieldByName ('nKmkCode').AsInteger,nCode,nDsp);

			strSQLConst	:= strSQLConst + FormatFloat ('#', nCode) + ',';

 //<部門/ﾌﾟﾛｼﾞｪｸﾄ/科目別補助/第1補助/第2補助/ｾｸﾞﾒﾝﾄ>

			nPosition	:= 0;
			nCountStart	:= 1;

            // 科目別補助
			for	nCount := nCountStart to 3 do
			begin
				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SUBJECTPLUS) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + 'NULL,'
			else
			begin
				if	(Trim (FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString) = '') then
					strSQLConst	:= strSQLConst + 'NULL,'
				else
					strSQLConst	:= strSQLConst + Format ('%d,', [StrToInt (Trim (
												FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString))]);

				nCountStart	:= nCountStart + 1;
			end;


            // 部門
			nPosition	:= 0;
			for	nCount := nCountStart to 3 do
			begin
				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SECTION) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + 'NULL,'
			else
			begin
				strSQLConst	:= strSQLConst + Format ('''%s'',', [FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString]);
				nCountStart	:= nCountStart + 1;
			end;

            // ｾｸﾞﾒﾝﾄ
			nPosition	:= 0;
			for	nCount := nCountStart to 3 do
			begin

				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SEGMENT) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + 'NULL,'
			else
			begin
				strSQLConst	:= strSQLConst + Format ('''%s'',', [FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString]);
				nCountStart	:= nCountStart + 1;
			end;

			if	(nCountStart > 3) then
				strSQLConst	:= strSQLConst + 'NULL, NULL, NULL, NULL,'
			else
			begin
				nPosition	:= 0;

				for	nCount := nCountStart to 3 do
				begin
					if	((FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= MASTER_BANK     ) and
						 (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= MASTER_GENERAL05)) then
					begin
						nPosition	:= nCount;
						Break;
					end;
				end;

				if	(nPosition = 0) then
				begin
					strSQLConst	:= strSQLConst + 'NULL, NULL,';
					nCountStart	:= 4;
				end
				else
				begin
					if	((FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS01) or
						 (FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS02)) then
						nDivision	:= MASTER_CUSTOMER
					else
						nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;

					strSQLConst	:= strSQLConst + Format ('%d,'    , [nDivision])
											   + Format ('''%s'',', [FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString ]);

					nCountStart	:= nCountStart + 1;
				end;

				if	(nCountStart <= 3) then
				begin
					nPosition	:= 0;

					for	nCount := nCountStart to 3 do
					begin
						if	((FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= MASTER_BANK     ) and
							 (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= MASTER_GENERAL05)) then
						begin
							nPosition	:= nCount;
							Break;
						end;
					end;

					if	(nPosition = 0) then
						strSQLConst	:= strSQLConst + 'NULL, NULL,'
					else
					begin
						strSQLConst	:= strSQLConst + Format ('%d,'    , [FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger])
												   + Format ('''%s'',', [FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString ]);
					end;
				end
				else
					strSQLConst	:= strSQLConst + 'NULL, NULL,';
			end;

			if	(FieldByName ('nTaxCode').IsNull) then
				strSQLConst	:= strSQLConst + 'NULL, NULL,'
			else
			begin
				strSQLConst	:= strSQLConst + Format ('%d,', [FieldByName ('nTaxCode').AsInteger])
										   + Format ('%d,', [FieldByName ('nTaxRate').AsInteger]);
			end;
		end;

		if	(FieldByName ('nOffsetPrice').IsNull) then
			strSQLConst	:= strSQLConst + '0, 0)'
		else
			strSQLConst	:= strSQLConst + Format ('%d, 0)', [Trunc (FieldByName ('nOffsetPrice').AsCurrency)]);
	end;

	Result	:= strSQLConst;
end;
*)
function	TJNTCRP004006f.fnMakeSQLConstPayOffsetInfoInsert (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	nPosition  : Integer;
	nCount	   : Integer;
	nCountStart: Integer;
	nDivision  : Integer;
	strSQLConst: String;

    nCode      : Extended;
//<175> Del
//  nDsp       : String;
//	strHojCode : String;
//<175> Del
//    iKmkCode   : Integer;					// <222-3> DEL

begin
	pRecord	:= pUpdateRecord;

	with (CmnMemDataOffset) do
	begin
		strSQLConst	:= 'INSERT INTO PayOffsetInfo (' + 'MasterKbn,'						// ﾏｽﾀ区分
    												 + 'UpdTantoNCode  ,'				// 更新担当者内部ｺｰﾄﾞ<173>
													 + 'PayNCode,'						// 取引先ｺｰﾄﾞ
													 + 'PayPtnNo,'						// 条件ﾊﾟﾀｰﾝNo      <149> 2006/10/11 H.Kawato Add
													 + 'SousaiNo,'						// 相殺№
													 + 'KmkNCode,'						// 科目ｺｰﾄﾞ
													 + 'BmnNCode,'						// 部門ｺｰﾄﾞ
                                                     + 'KojNCode,'                      // ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ
                                                     + 'KsyNCode,'                      // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ  <150> 2006/11/02 H.Kawato Add
													 + 'SubNCode,'						// 科目別補助ｺｰﾄﾞ
													 + 'HojKbn1,'						// 第1補助区分
													 + 'Hoj1NCode,'						// 第1補助ｺｰﾄﾞ
													 + 'HojKbn2,'						// 第2補助区分
													 + 'Hoj2NCode,'						// 第2補助ｺｰﾄﾞ
													 + 'SegNCode,'						// ｾｸﾞﾒﾝﾄ1ｺｰﾄﾞ
//                                                     + 'KsyNCode,'                      // 工種ｺｰﾄﾞ       <150> 2006/11/02 H.Kawato Del
													 + 'FeeTaxCd,'						// 消費税ｺｰﾄﾞ
													 + 'FeeTaxRt,'						// 消費税率ｺｰﾄﾞ
// <194> ADD-STR
													 + 'CKmkNCode,'
													 + 'CSubNCode,'
													 + 'CBmnNCode,'
													 + 'CSegNCode1,'
													 + 'CSegNCode2,'
													 + 'CSegNCode3,'
													 + 'CSegNCode4,'
													 + 'CSegNCode5,'
													 + 'CSegNCode6,'
													 + 'CSegNCode7,'
													 + 'CSegNCode8,'
													 + 'CSegNCode9,'
													 + 'CSegNCode10,'
													 + 'CBankNCode,'
													 + 'CCsNCode,'
													 + 'CEmpNCode,'
													 + 'CMulNCode1,'
													 + 'CMulNCode2,'
													 + 'CMulNCode3,'
													 + 'CMulNCode4,'
													 + 'CMulNCode5,'
													 + 'CPrjNCode1,'
													 + 'CPrjNCode2,'
													 + 'CPrjNCode3,'
													 + 'CPrjNCode4,'
													 + 'CPrjNCode5,'
													 + 'CPrjNCode6,'
													 + 'CPrjNCode7,'
													 + 'CPrjNCode8,'
													 + 'CPrjNCode9,'
													 + 'CPrjNCode10,'
													 + 'CPjSubNCode1,'
													 + 'CPjSubNCode2,'
													 + 'CPjSubNCode3,'
													 + 'CPjSubNCode4,'
													 + 'CPjSubNCode5,'
													 + 'CPjSubNCode6,'
													 + 'CPjSubNCode7,'
													 + 'CPjSubNCode8,'
													 + 'CPjSubNCode9,'
													 + 'CPjSubNCode10,'
// <194> ADD-END
													 + 'SousaiKin,'						// 相殺金額
													 + 'ZeiKin)'						// 消費税額
			+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER                 ])		// ﾏｽﾀ区分
						 + FloatToStr(m_nTantoNCd) + ','                          		// 更新担当者内部ｺｰﾄﾞ<173>
						 + FloatToStr(pRecord^.nNCode) + ','    		        		// 取引先ｺｰﾄﾞ
						 + FloatToStr(m_nPayPtnNo) + ','    		        		    // 条件ﾊﾟﾀｰﾝNo      <149> 2006/10/11 H.Kawato Add
						 + Format ('%d,'    , [FieldByName ('nSeqNo').AsInteger]);		// 相殺№

		if	(FieldByName ('nKmkCode').AsInteger = 0) then
			strSQLConst	:= strSQLConst + '0, 0, 0, 0, NULL, 0, NULL, 0, 0, 0 , NULL,NULL,'
		else
		begin
//<175> Mod
//          fnCheckValidKmkCodeG(FieldByName ('nKmkCode').AsInteger,nCode,nDsp);
//			strSQLConst	:= strSQLConst + FormatFloat ('#', nCode) + ',';
			strSQLConst	:= strSQLConst + FormatFloat ('#', FieldByName ('dKmkNCode').AsFloat) + ',';
//<175> Mod

			nCountStart	:= 1;

            // ***** 採用順序 *****
            // 科目別補助→部門→ｾｸﾞﾒﾝﾄ→第一補助→第二補助→工事 ×
            // 部門→工事→科目別補助→第一補助→第二補助→ｾｸﾞﾒﾝﾄ ○

            // 部門
			nPosition	:= 0;
			for	nCount := nCountStart to 3 do
			begin
				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SECTION) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + '0,'
			else
			begin
//<175> Mod
//              strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//              if strHojCode = '' then
				nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                if nCode = 0 then
//<175> Mod
			    	strSQLConst	:= strSQLConst + '0,'
                else
//<175> Mod
//			    	strSQLConst	:= strSQLConst +  FloatToStr(fnGetHojNCode(MASTER_SECTION,strHojCode)) + ',';
			    	strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod
				nCountStart	:= nCountStart + 1;
			end;

            // ﾌﾟﾛｼﾞｪｸﾄ
            if nCountStart <=3 then
            begin
    			nPosition	:= 0;
	    		for	nCount := nCountStart to 3 do
		    	begin
			    	if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= 201) and
                            (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= 210) then
    				begin
		    			nPosition	:= nCount;
		    			Break;
	    			end;
    			end;

	    		if	(nPosition = 0) then
		    		strSQLConst	:= strSQLConst + '0,'
    			else
	    		begin
//<175> Mod
//    	    		nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;
//                  strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                  if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                    if nCode = 0 then
//<175> Mod
	    		    	strSQLConst	:= strSQLConst + '0,'
                    else
//<175> Mod
//			        	strSQLConst	:= strSQLConst +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
				    	strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
	    		end;
            end
            else
  		    	strSQLConst	:= strSQLConst + '0,';

// <150> 2006/11/02 H.Kawato Add Start
            // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            if nCountStart <=3 then
            begin
    			nPosition  := 0;
	    		for	nCount := nCountStart to 3 do
		    	begin
			    	if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= 301) and
                        (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= 310) then
    				begin
		    			nPosition	:= nCount;
		    			Break;
	    			end;
    			end;

	    		if	(nPosition = 0) then
		    		strSQLConst	:= strSQLConst + '0,'
    			else
	    		begin
//<175> Mod
//    	    		nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;
//                  strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                  if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                    if nCode = 0 then
//<175> Mod
	    		    	strSQLConst	:= strSQLConst + '0,'
                    else
//<175> Mod
//			        	strSQLConst	:= strSQLConst +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
				    	strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
	    		end;
            end
            else
  		    	strSQLConst	:= strSQLConst + '0,';
// <150> 2006/11/02 H.Kawato Add End

            // 科目別補助
			nPosition	:= 0;
			for	nCount := nCountStart to 3 do
			begin
				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SUBJECTPLUS) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + '0,'
			else
			begin
				if	(Trim (FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString) = '') then
					strSQLConst	:= strSQLConst + '0,'
				else
                begin
//<175> Mod
//                    iKmkCode    := FieldByName ('nKmkCode').AsInteger;
//                    strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                    strSQLConst := strSQLConst + FloatToStr(fnGetKmkSubNCode(iKmkCode,StrHojCode)) + ',';
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
			    	strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod
                end;

				nCountStart	:= nCountStart + 1;
			end;

            // 第一補助
            if nCountStart <=3 then
            begin
	    		nPosition	:= 0;
		    	for	nCount := nCountStart to 3 do
			    begin
				    if	((FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= MASTER_BANK     ) and
    					 (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= MASTER_GENERAL05)) then
	    			begin
		    			nPosition	:= nCount;
			    		Break;
				    end;
    			end;

	    		if	(nPosition = 0) then
		    	begin
			    	strSQLConst	:= strSQLConst + 'NULL,0,'
   				end
	    		else
		    	begin
			    	if	((FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS01) or
				    	 (FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS02)) then
    					nDivision	:= MASTER_CUSTOMER
	    			else
    	    			nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;

//<175> Mod
//                  strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                  if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                    if nCode =0 then
//<175> Mod
        		    	strSQLConst	:= strSQLConst  + Format ('%d,', [nDivision]) + '0,'
                    else
//<175> Mod
//   	    	        	strSQLConst	:= strSQLConst + Format ('%d,', [nDivision])
//                                                   + FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
                        strSQLConst	:= strSQLConst + Format ('%d,', [nDivision]);   // <176> ADD
						strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
                end;
            end
            else
    	    	strSQLConst	:= strSQLConst + 'NULL,0,';



            // 第二補助
            if nCountStart <=3 then
            begin
	    		nPosition	:= 0;
		    	for	nCount := nCountStart to 3 do
			    begin
				    if	((FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= MASTER_BANK     ) and
    					 (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= MASTER_GENERAL05)) then
	    			begin
		    			nPosition	:= nCount;
			    		Break;
				    end;
    			end;

	    		if	(nPosition = 0) then
		    	begin
			    	strSQLConst	:= strSQLConst + 'NULL,0,'
   				end
	    		else
		    	begin
			    	if	((FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS01) or
				    	 (FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS02)) then
    					nDivision	:= MASTER_CUSTOMER
	    			else
            			nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;

//<175> Mod
//                  strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                  if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                    if nCode =0 then
//<175> Mod
        		    	strSQLConst	:= strSQLConst  + Format ('%d,', [nDivision]) + '0,'
                    else
//<175> Mod
// 	    	        	strSQLConst	:= strSQLConst + Format ('%d,', [nDivision])
//                                                   +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
                        strSQLConst	:= strSQLConst + Format ('%d,', [nDivision]);   // <176> ADD
						strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
                end;
            end
            else
    	    	strSQLConst	:= strSQLConst + 'NULL,0,';


            // ｾｸﾞﾒﾝﾄ
            if nCountStart <=3 then
            begin
	    		nPosition	:= 0;
		    	for	nCount := nCountStart to 3 do
			    begin
//<116      	    if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SEGMENT) then
			    	if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= 101) and
                        (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= 110) then

    				begin
	    				nPosition	:= nCount;
		    			Break;
			    	end;
    			end;

    			if	(nPosition = 0) then
	    			strSQLConst	:= strSQLConst + '0,'
		    	else
			    begin
//<175> Mod
//     	    		nDivision	:= FieldByName (Format ('nDivision%.2d',  [nPosition])).AsInteger;
//                  strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                  if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                    if nCode = 0 then
//<175> Mod
		    	    	strSQLConst	:= strSQLConst + '0,'
                    else
//<175> Mod
//			        	strSQLConst	:= strSQLConst +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
						strSQLConst	:= strSQLConst +  FloatToStr(nCode) + ',';
//<175> Mod
//    				nCountStart	:= nCountStart + 1;
	    		end;
            end
            else
       	    	strSQLConst	:= strSQLConst + '0,';


            // 工種・作業内訳
//	    	strSQLConst	:= strSQLConst + '0,';                                  // <150> 2006/11/02 H.Kawato Del


			if	(FieldByName ('nTaxCode').IsNull) then
				strSQLConst	:= strSQLConst + 'NULL, NULL,'
			else
			begin
				strSQLConst	:= strSQLConst + Format ('%d,', [FieldByName ('nTaxCode').AsInteger])
										   + Format ('%d,', [FieldByName ('nTaxRate').AsInteger]);
			end;
		end;

// <194> ADD-STR
        // 内部コードエリアセット
        strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dKmkNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCSubNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCBmnNCode').AsCurrency) + ',';
        for nCount := 1 to 10 do
            strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCSegNCode' + IntToStr(nCount)).AsCurrency) + ',';
        strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCBankNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCCsNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCEmpNCode').AsCurrency) + ',';
        for nCount := 1 to 5 do
            strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCMulNCode' + IntToStr(nCount)).AsCurrency) + ',';
        for nCount := 1 to 10 do
            strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCPrjNCode' + IntToStr(nCount)).AsCurrency) + ',';
        for nCount := 1 to 10 do
            strSQLConst	:= strSQLConst + FloatToStr(FieldByName('dCPjSubNCode' + IntToStr(nCount)).AsCurrency) + ',';
// <194> ADD-END

		if	(FieldByName ('nOffsetPrice').IsNull) then
			strSQLConst	:= strSQLConst + '0, 0)'
		else
			strSQLConst	:= strSQLConst + Format ('%d, 0)', [Trunc (FieldByName ('nOffsetPrice').AsCurrency)]);
	end;

	Result	:= strSQLConst;
end;
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayOffsetInfoUpdate (pUpdateRecord: Pointer): String;
var
	pRecord	   : ^MasterData;
	nPosition  : Integer;
	nCount	   : Integer;
	nCountStart: Integer;
	nDivision  : Integer;
	strSQLConst: String;

    nCode      : Extended;
//	nDsp       : String;				//<175> Del

//    iKmkCode   : Integer;				// <222-3> DEL
//  strHojCode : String;				//<175> Del

begin
	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'UPDATE PayOffsetInfo SET ';

	strSQLConst	:= strSQLConst + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>

	with (CmnMemDataOffset) do
	begin
		if	(FieldByName ('nKmkCode').AsInteger = 0) then
			strSQLConst	:= strSQLConst + 'KmkNCode    = 0,'
									   + 'SubNCode    = 0,'
									   + 'BmnNCode    = 0,'
									   + 'SegNCode    = 0,'
									   + 'HojKbn1     = 0,'
									   + 'Hoj1NCode   = 0,'
									   + 'HojKbn2     = 0,'
									   + 'Hoj2NCode   = 0,'
									   + 'FeeTaxCd    = 0,'
									   + 'FeeTaxRt    = 0,'
		else

		begin
//<175> Mod
//			fnCheckValidKmkCodeG(FieldByName ('nKmkCode').AsInteger,nCode,nDsp);
//			strSQLConst	:= strSQLConst + 'KmkNCode = ' + FloatToStr (nCode) + ',';
			strSQLConst	:= strSQLConst + 'KmkNCode = ' + FloatToStr (FieldByName ('dKmkNCode').AsFloat) + ',';
//<175> Mod

			nCountStart	:= 1;

            // ***** 採用順序 *****
            // 科目別補助→部門→ｾｸﾞﾒﾝﾄ→第一補助→第二補助→工事 ×
            // 部門→工事→科目別補助→第一補助→第二補助→ｾｸﾞﾒﾝﾄ ○

            // 部門
			nPosition	:= 0;
			for	nCount := nCountStart to 3 do
			begin
				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SECTION) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + 'BmnNCode = 0,'
			else
			begin
//<175> Mod
//                strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                if strHojCode = '' then
				nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                if nCode = 0 then
//<175> Mod
			    	strSQLConst	:= strSQLConst + 'BmnNCode = 0,'
                else
			    	strSQLConst	:= strSQLConst + 'BmnNCode = '
//<175> Mod
//                                   +  FloatToStr(fnGetHojNCode(MASTER_SECTION,strHojCode)) + ',';
									+  FloatToStr(nCode) + ',';
//<175> Mod
				nCountStart	:= nCountStart + 1;
			end;

            // ﾌﾟﾛｼﾞｪｸﾄ
            if nCountStart <=3 then
            begin

    			nPosition	:= 0;
	    		for	nCount := nCountStart to 3 do
		    	begin
	    			if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= 201) and
                        (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= 210) then
			    	begin
				    	nPosition	:= nCount;
					    Break;
    				end;
	    		end;

			    if	(nPosition = 0) then
				    strSQLConst	:= strSQLConst + 'KojNCode = 0,'
    			else
	    		begin
//<175> Mod
//    		    	nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;
//                    strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                    if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
	                if nCode = 0 then
//<175> Mod
	    		    	strSQLConst	:= strSQLConst + 'KojNCode = 0,'
                    else
			        	strSQLConst	:= strSQLConst + 'KojNCode = '
//<175> Mod
//                                          +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
										+  FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
	    		end;
            end
            else
    	    	strSQLConst	:= strSQLConst + 'KojNCode = 0,';

// <150> 2006/11/02 H.Kawato Add Start
            // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            if nCountStart <=3 then
            begin
    			nPosition  := 0;
	    		for	nCount := nCountStart to 3 do
		    	begin
	    			if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= 301) and
                        (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= 310) then
			    	begin
				    	nPosition	:= nCount;
					    Break;
    				end;
	    		end;

			    if	(nPosition = 0) then
				    strSQLConst	:= strSQLConst + 'KsyNCode = 0,'
    			else
	    		begin
//<175> Mod
//    		    	nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;
//                  strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                  if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
	                if nCode = 0 then
//<175> Mod
	    		    	strSQLConst	:= strSQLConst + 'KsyNCode = 0,'
                    else
			        	strSQLConst	:= strSQLConst + 'KsyNCode = '
//<175> Mod
//                                            +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
											+  FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
	    		end;
            end
            else
    	    	strSQLConst	:= strSQLConst + 'KsyNCode = 0,';
// <150> 2006/11/02 H.Kawato Add End

            // 科目別補助
			nPosition	:= 0;
			for	nCount := nCountStart to 3 do
			begin
				if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger = MASTER_SUBJECTPLUS) then
				begin
					nPosition	:= nCount;
					Break;
				end;
			end;

			if	(nPosition = 0) then
				strSQLConst	:= strSQLConst + 'SubNCode = 0,'
			else
			begin
				if	(Trim (FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString) = '') then
					strSQLConst	:= strSQLConst + 'SubNCode = 0,'
				else
                begin
//<175> Mod
//                    iKmkCode    := FieldByName ('nKmkCode').AsInteger;
//                    strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                    strSQLConst := strSQLConst + 'SubNCode = ' + FloatToStr(fnGetKmkSubNCode(iKmkCode,StrHojCode)) + ',';
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
                    strSQLConst := strSQLConst + 'SubNCode = ' + FloatToStr(nCode) + ',';
//<175> Mod
                end;

				nCountStart	:= nCountStart + 1;
			end;


            // 第一補助
            if nCountStart <=3 then
            begin
	    		nPosition	:= 0;
		    	for	nCount := nCountStart to 3 do
			    begin
				    if	((FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= MASTER_BANK     ) and
    					 (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= MASTER_GENERAL05)) then
	    			begin
		    			nPosition	:= nCount;
			    		Break;
				    end;
    			end;

	    		if	(nPosition = 0) then
		    	begin
			    	strSQLConst	:= strSQLConst  + 'HojKbn1   = NULL,'
										        + 'Hoj1NCode = 0,';
    				end
	    		else
		    	begin
			    	if	((FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS01) or
				    	 (FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS02)) then
    					nDivision	:= MASTER_CUSTOMER
	    			else
    	    			nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;

//<175> Mod
//					strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//					if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
	                if nCode = 0 then
//<175> Mod
        		    	strSQLConst	:= strSQLConst  + Format ('HojKbn1 = %d,', [nDivision])
		    									        + 'Hoj1NCode = 0,'
                    else
   	    	        	strSQLConst	:= strSQLConst + Format ('HojKbn1 = %d,', [nDivision])
		    									   + 'Hoj1NCode = '
//<175> Mod
//                                                   +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
													+ FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
                end;
            end
            else
            begin
    	    	strSQLConst	:= strSQLConst + 'HojKbn1   = NULL,'
										   + 'Hoj1NCode = 0,';
            end;

            // 第二補助
            if nCountStart <=3 then
            begin
	    		nPosition	:= 0;
		    	for	nCount := nCountStart to 3 do
			    begin
				    if	((FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= MASTER_BANK     ) and
    					 (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= MASTER_GENERAL05)) then
	    			begin
		    			nPosition	:= nCount;
			    		Break;
				    end;
    			end;

	    		if	(nPosition = 0) then
		    	begin
			    	strSQLConst	:= strSQLConst  + 'HojKbn2   = NULL,'
										        + 'Hoj2NCode = 0,';
    				end
	    		else
		    	begin
			    	if	((FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS01) or
				    	 (FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger = MASTER_CUSTOMERPLUS02)) then
    					nDivision	:= MASTER_CUSTOMER
	    			else
            			nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;
//<175> Mod
//                    strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                    if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
	                if nCode = 0 then
//<175> Mod
        		    	strSQLConst	:= strSQLConst  + Format ('HojKbn2 = %d,', [nDivision])
                                                    + 'Hoj2NCode = 0,'
                    else
   	    	        	strSQLConst	:= strSQLConst + Format ('HojKbn2 = %d,', [nDivision])
		    									   + 'Hoj2NCode = '
//<175> Mod
//                                                   +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
													+ FloatToStr(nCode) + ',';
//<175> Mod

    				nCountStart	:= nCountStart + 1;
                end;
            end
            else
            begin
    	    	strSQLConst	:= strSQLConst + 'HojKbn2   = NULL,'
										   + 'Hoj2NCode = 0,';
            end;


            // ｾｸﾞﾒﾝﾄ
            if nCountStart <=3 then
            begin
	    		nPosition	:= 0;
		    	for	nCount := nCountStart to 3 do
			    begin
	    			if	(FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger >= 101) and
                        (FieldByName (Format ('nDivision%.2d', [nCount])).AsInteger <= 110) then
    				begin
	    				nPosition	:= nCount;
		    			Break;
			    	end;
    			end;

    			if	(nPosition = 0) then
	    			strSQLConst	:= strSQLConst + 'SegNCode = 0,'
		    	else
			    begin
//<175> Mod
//    		    	nDivision	:= FieldByName (Format ('nDivision%.2d', [nPosition])).AsInteger;
//                    strHojCode  := FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString;
//                    if strHojCode = '' then
					nCode  := FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat;
	                if nCode = 0 then
//<175> Mod
		    	    	strSQLConst	:= strSQLConst + 'SegNCode = 0,'
                    else
			        	strSQLConst	:= strSQLConst + 'SegNCode = '
//<175> Mod
//                                       +  FloatToStr(fnGetHojNCode(nDivision,strHojCode)) + ',';
													+ FloatToStr(nCode) + ',';
//<175> Mod

//    				nCountStart	:= nCountStart + 1;
	    		end;
            end
            else
      			strSQLConst	:= strSQLConst + 'SegNCode = 0,';


            // 税
    		if	(FieldByName ('nTaxCode').IsNull) then
	    		strSQLConst	:= strSQLConst + 'FeeTaxCd = NULL,'
		    							   + 'FeeTaxRt = NULL,'
   			else
    		begin
	    		strSQLConst	:= strSQLConst + Format ('FeeTaxCd = %d,', [FieldByName ('nTaxCode').AsInteger])
		    							   + Format ('FeeTaxRt = %d,', [FieldByName ('nTaxRate').AsInteger]);
   			end;

	    end;

// <194> ADD-STR
        // 内部コードエリアセット
        strSQLConst	:= strSQLConst + 'CKmkNCode = ' + FloatToStr(FieldByName('dKmkNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + 'CSubNCode = ' + FloatToStr(FieldByName('dCSubNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + 'CBmnNCode = ' + FloatToStr(FieldByName('dCBmnNCode').AsCurrency) + ',';
        for nCount := 1 to 10 do
            strSQLConst	:= strSQLConst + 'CSegNCode' + IntToStr(nCount) +  ' = ' + FloatToStr(FieldByName('dCSegNCode' + IntToStr(nCount)).AsCurrency) + ',';
        strSQLConst	:= strSQLConst + 'CBankNCode = ' + FloatToStr(FieldByName('dCBankNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + 'CCsNCode = ' + FloatToStr(FieldByName('dCCsNCode').AsCurrency) + ',';
        strSQLConst	:= strSQLConst + 'CEmpNCode = ' + FloatToStr(FieldByName('dCEmpNCode').AsCurrency) + ',';
        for nCount := 1 to 5 do
            strSQLConst	:= strSQLConst + 'CMulNCode' + IntToStr(nCount) +  ' = ' + FloatToStr(FieldByName('dCMulNCode' + IntToStr(nCount)).AsCurrency) + ',';
        for nCount := 1 to 10 do
            strSQLConst	:= strSQLConst + 'CPrjNCode' + IntToStr(nCount) +  ' = ' + FloatToStr(FieldByName('dCPrjNCode' + IntToStr(nCount)).AsCurrency) + ',';
        for nCount := 1 to 10 do
            strSQLConst	:= strSQLConst + 'CPjSubNCode' + IntToStr(nCount) +  ' = ' + FloatToStr(FieldByName('dCPjSubNCode' + IntToStr(nCount)).AsCurrency) + ',';
// <194> ADD-END

		if	(FieldByName ('nOffsetPrice').IsNull) then
			strSQLConst	:= strSQLConst + 'SousaiKin = 0, ZeiKin = 0'
		else
			strSQLConst	:= strSQLConst + Format (
								'SousaiKin = %d, ZeiKin = 0', [Trunc (FieldByName ('nOffsetPrice').AsCurrency)]);

		strSQLConst	:= strSQLConst + ' WHERE '
								   + Format ('MasterKbn = %d     AND ', [MASTER_CUSTOMER                 ])
								   + Format ('SousaiNo  = %d     AND'         , [FieldByName ('nSeqNo').AsInteger]);
    	strSQLConst	:= strSQLConst + ' PayNCode = ' +  FloatToStr(pRecord^.nNCode);     // 外部ｺｰﾄﾞ
    	strSQLConst	:= strSQLConst + ' AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo);     // 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
    	strSQLConst	:= strSQLConst + ' AND RDelKbn = 0 ';                               // 削除区分     <161> Add
	end;

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayPtnDtlInsert (pUpdateRecord: Pointer; nRow: Integer): String;
var
	pRecord		  : ^MasterData;
	nDivision	  : Integer;
	nSeqNo		  : Integer;
	nFraction	  : Integer;
	nBasedValue	  : Extended;
	nMinimumPrice : Extended;
	nFractionPrice: Extended;
	strSQLConst	  : String;

begin
	nSeqNo			:= nRow;
	nDivision		:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger;
	nBasedValue		:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Value;
	nMinimumPrice	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [3], [4 + ((nRow - 1) * 5)]))).Value;
	nFractionPrice	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [5 + ((nRow - 1) * 5)]))).Value;
	nFraction		:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [6 + ((nRow - 1) * 5)]))).AsInteger;

	pRecord	:= pUpdateRecord;

	strSQLConst	:= 'INSERT INTO PayPtnDtl ('
										 + 'MasterKbn  ,'								// ﾏｽﾀ区分
										 + 'UpdTantoNCode  ,'		        			// 更新担当者内部ｺｰﾄﾞ<173>
										 + 'PayNCode   ,'								// 取引先ｺｰﾄﾞ
										 + 'PayPtnNo   ,'								// 条件ﾊﾟﾀｰﾝ№  // <149> 2006/10/11 H.Kawato Add
										 + 'JoukenNo   ,'								// 条件明細№
//										 + 'JoukenPtnNo,'								// 支払条件ﾊﾟﾀｰﾝ№
										 + 'Houhou     ,'								// 支払方法
										 + 'StdRitu    ,'								// 分解基準値
										 + 'MinKin     ,'								// 支払最低額
										 + 'HasuuKin   ,'								// 端数処理額
										 + 'HasuuHou) VALUES ('							// 端数処理方法

										 + Format ('%d,'    , [MASTER_CUSTOMER    ])	// ﾏｽﾀ区分
            							 + FloatToStr(m_nTantoNCd) + ','                // 更新担当者内部ｺｰﾄﾞ<173>
            							 + FloatToStr(pRecord^.nNCode) + ','            // 取引先ｺｰﾄﾞ
										 + FloatToStr(m_nPayPtnNo) + ','                // 条件ﾊﾟﾀｰﾝ№  // <149> 2006/10/11 H.Kawato Add
										 + Format ('%d,'    , [nSeqNo             ])	// 条件明細№
//										 + Format ('%d,'    , [1                  ])	// 支払条件ﾊﾟﾀｰﾝ№
										 + Format ('%d,'    , [nDivision          ])	// 支払方法
										 + Format ('%e,'    , [nBasedValue        ]);	// 分解基準値

	if	(CmnEdit01001DecDivision.AsInteger = 0) then									// 分解方法: 0=比率
		strSQLConst	:= strSQLConst + Format ('%e,', [nMinimumPrice ])					// 支払最低額
								   + Format ('%e,', [nFractionPrice])					// 端数処理額
								   + Format ('%d)', [nFraction     ])					// 端数処理方法
	else
		strSQLConst	:= strSQLConst + 'NULL, NULL, NULL)';

	Result	:= strSQLConst;
end;

// <149> 2006/10/11 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMakeSQLConstPayDtlSyousaiInsert (pUpdateRecord: Pointer; nRow: Integer): String;
var
	pRecord		  : ^MasterData;
	strSQLConst	  : String;
    lvIraiNCD     : Extended;

begin
	pRecord	:= pUpdateRecord;

    lvIraiNCD   := fnGetIraiNCode(CmnEdit04001AccountCode.AsInteger);                   // <148> 2006/10/06 H.Kawato Add

	strSQLConst	:= 'INSERT INTO PayDetailInfo (' + 'MasterKbn      ,'					// ﾏｽﾀ区分
        										 + 'UpdTantoNCode  ,'		    		// 更新担当者内部ｺｰﾄﾞ<173>
												 + 'PayNCode       ,'					// 取引先ｺｰﾄﾞ
												 + 'PayPtnNo       ,'					// 条件ﾊﾟﾀｰﾝNo  <149> 2006/10/11 H.Kawato Add
												 + 'ShiharaiSyubetu,'					// 支払種別
												 + 'Edaban         ,'					// 枝番
												 + 'AccNCode       ,'					// 依頼口座ｺｰﾄﾞ
												 + 'UketoriName    ,'					// 受取人名称
												 + 'Site           ,'					// ｻｲﾄ
												 + 'TegYusouKbn    ,'					// 手形郵送区分
												 + 'TegYusouFutan  ,'					// 手形郵送料負担区分
												 + 'TegBunkatuMax  ,'					// 手形分割枚数
												 + 'BaseKingaku    ,'					// 基準金額
												 + 'BaseHiritu     ,'					// 基準比率
												 + 'HasuuKingaku   ,'					// 端数処理額
												 + 'HasuuHou       )'					// 端数処理方法

				+ ' VALUES ('+ Format ('%d,'    , [MASTER_CUSTOMER    ])				// ﾏｽﾀ区分
							 + FloatToStr(m_nTantoNCd) + ','                      		// 更新担当者内部ｺｰﾄﾞ<173>
							 + FloatToStr(pRecord^.nNCode) + ','		        		// 取引先ｺｰﾄﾞ
							 + FloatToStr(m_nPayPtnNo) + ',';		        		    // 条件ﾊﾟﾀｰﾝNo

    case (CmnEdit01030PriPayWayDivision.AsInteger) of                                   // 優先支払方法
        0:   strSQLConst    := strSQLConst + Format ('%d,', [0]);                       // なし
// <189> Mod ↓↓↓
//      1:   strSQLConst    := strSQLConst + Format ('%d,', [3]);                       // 手形
//      else strSQLConst    := strSQLConst + Format ('%d,', [0]);                       // なし
        else strSQLConst    := strSQLConst + Format ('%d,', [CmnEdit01030PriPayWayDivision.AsInteger]);	// 支払方法
// <189> Mod ↑↑↑
    end;

// <193> ADD-STR
    if (m_arSyousaiData[nRow].nEdaban = 0) then
        m_arSyousaiData[nRow].nEdaban := (nRow + 10);
// <193> ADD-END

	strSQLConst	:= strSQLConst + IntToStr (m_arSyousaiData[nRow].nEdaban) + ',';        // 枝番

	if	(CmnEdit04001AccountCode.InputFlag) then										// 依頼口座ｺｰﾄﾞ
		strSQLConst	:= strSQLConst + 'NULL,'
	else
		strSQLConst	:= strSQLConst + FormatFloat ('#',lvIraiNCD) + ',';

// <154> 2007/02/01 H.Kawato Mod
//	strSQLConst	:= strSQLConst + Format ('''%s'',', [CmnEdit01027ReceiverName.Text])	// 受取人名称
	strSQLConst	:= strSQLConst + AnsiQuotedStr(CmnEdit01027ReceiverName.Text, '''') + ','   // 受取人名称
//							   + Format ('%d,', [CmnEdit04002PaySight   .AsInteger])	// ｻｲﾄ
							   + FloatToStr (m_arSyousaiData[nRow].nSite) + ','         // ｻｲﾄ
							   + Format ('%d,', [CmnEdit04004PosDivision.AsInteger])	// 手形郵送区分
							   + Format ('%d,', [CmnEdit04005BurDivision.AsInteger])	// 手形郵送料負担区分
							   + Format ('%d,', [CmnEdit04003DivSheets  .AsInteger]);	// 手形分割枚数

	strSQLConst	:= strSQLConst + FloatToStr (m_arSyousaiData[nRow].nBaseKingaku  ) + ','    // 基準金額
							   + FloatToStr (m_arSyousaiData[nRow].nBaseHiritu   ) + ','    // 基準比率
							   + FloatToStr (m_arSyousaiData[nRow].nHasuuKingaku ) + ','    // 端数処理額
							   + FloatToStr (m_arSyousaiData[nRow].nHasuuHou) + ')';        // 端数処理方法

	Result	:= strSQLConst;
end;
// <149> 2006/10/11 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
// <149> 2006/10/11 H.Kawato Mod
//function	TJNTCRP004006f.fnMakeSQLConstPayPtnInfoInsert (pUpdateRecord: Pointer): String;
function	TJNTCRP004006f.fnMakeSQLConstPayPtnInfoInsert (pUpdateRecord: Pointer; lvKojiNCD, lvKosyuNCD: Extended): String;
var
	pRecord     : ^MasterData;
//  strHojCode  : String;                       // <149> 2006/10/11 H.Kawato Del
	strSQLConst : String;
//  lvOyaNCODE  : Extended;                     // <149> 2006/10/11 H.Kawato Del
    iPriPayWay  : Integer;                      // <149> 2006/10/11 H.Kawato Add

begin
// <149> 2006/10/11 H.Kawato Del Start
{
	if	(m_nCurCodeAttribute <= 1) then
	begin
		if	(CmnEdit06002HojCodeNumeric.InputFlag) then
			strHojCode	:= ''
		else
			strHojCode	:= Format ('%.16d', [Trunc (CmnEdit06002HojCodeNumeric.Value)]);
	end
	else
		strHojCode	:= CmnEdit06002HojCodeFree.Text;
}
// <149> 2006/10/11 H.Kawato Del End

	pRecord	:= pUpdateRecord;
// <149> 2006/10/11 H.Kawato Mod Start
(*
    lvOyaNCODE := 0;
    lvOyaNCODE := fnGetNCODE(strHojCode);

	strSQLConst	:= 'INSERT INTO MTOKUI_PAY ('
								+ 'BaseNCode      ,'									// 取引先ｺｰﾄﾞ
								+ 'BunkaiKbn  ,'										// 分解方法
								+ 'LetterKbn  ,'										// 支払通知書区分
								+ 'CngNCode) VALUES ('							    	// 名寄せ親代替取引先

							+ FloatToStr(pRecord^.nNCode) + ','                         // 取引先ｺｰﾄﾞ
							+ Format ('%d,'    , [CmnEdit01001DecDivision.AsInteger])	// 分解方法
// <110>							+ Format ('%d,'    , [CmnEdit06012PasDivision.AsInteger]);	// 支払通知書区分
							+ Format ('%d,'    , [CmnEdit01028PasDivision.AsInteger]);	// 支払通知書区分

	if	(lvOyaNCODE = 0) then
		strSQLConst	:= strSQLConst + 'NULL)'
	else
		strSQLConst	:= strSQLConst + FloatToStr(lvOyaNCODE) + ')';					    // 名寄せ親代替取引先
*)

	strSQLConst	:= 'INSERT INTO PayPtnInfo ('
								+ 'MasterKbn, '									        // マスタ区分
								+ 'PayNCode, '									        // 取引先内部ｺｰﾄﾞ
								+ 'PayPtnNo, '									        // 条件ﾊﾟﾀｰﾝNo
								+ 'BmnNCode, '									        // 部門内部ｺｰﾄﾞ
								+ 'PrjNCode, '									        // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
								+ 'PjSubNCode, '								        // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
								+ 'BunkaiKbn, '										    // 分解方法
								+ 'PriPayWay, '     							    	// 優先支払方法
								+ 'UpdDateTM, '     							    	// 修正日付
								+ 'InsDateTM, '     							    	// 登録日付
   								+ 'UpdTantoNCode) VALUES ('						    	// 処理者

							+ IntToStr(MASTER_CUSTOMER) + ','                           // マスタ区分
   							+ FloatToStr(pRecord^.nNCode) + ',';                        // 取引先内部ｺｰﾄﾞ


    strSQLConst	:= strSQLConst + FloatToStr(m_nPayPtnNo) + ',';                         // 条件ﾊﾟﾀｰﾝNo
    strSQLConst	:= strSQLConst + '0,';                                                  // 部門内部ｺｰﾄ

    if (CmnEdit00014KojiCodeFree.Text = '') and (CmnEdit00014KojiCodeNumeric.Text = '') then
    	strSQLConst	:= strSQLConst + '0,'
    else
    	strSQLConst	:= strSQLConst + FloatToStr(lvKojiNCD) + ',';                       // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ

    if (CmnEdit00016KosyuCodeFree.Text = '') and (CmnEdit00016KosyuCodeNumeric.Text = '') then
    	strSQLConst	:= strSQLConst + '0,'
    else
    	strSQLConst	:= strSQLConst + FloatToStr(lvKosyuNCD) + ',';                      // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ


    strSQLConst	:= strSQLConst + Format ('%d,', [CmnEdit01001DecDivision.AsInteger]);   // 分解方法

    case (CmnEdit01030PriPayWayDivision.AsInteger) of
        0:   iPriPayWay  := 0;
// <189> Mod ↓↓↓
//      1:   iPriPayWay  := 3;
//      else iPriPayWay  := 0;
		else iPriPayWay  := CmnEdit01030PriPayWayDivision.AsInteger;
// <189> Mod ↑↑↑
    end;

    strSQLConst	:= strSQLConst + Format ('%d,', [iPriPayWay])                           // 優先支払方法
                            + 'Now(),'                                                  // 修正日付
                            + 'Now(),'                                                  // 登録日付
                            + FloatToStr(m_nTantoNCd) + ')';                            // 処理者
// <149> 2006/10/11 H.Kawato Mod End

	Result	:= strSQLConst;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
// <149> 2006/10/11 H.Kawato Mod
//function	TJNTCRP004006f.fnMakeSQLConstPayPtnInfoUpdate (pUpdateRecord: Pointer): String;
function	TJNTCRP004006f.fnMakeSQLConstPayPtnInfoUpdate (pUpdateRecord: Pointer; lvKojiNCD, lvKosyuNCD: Extended): String;
var
	pRecord     : ^MasterData;
//	strHojCode  : String;           // <149> 2006/10/11 H.Kawato Del
	strSQLConst : String;
//    nNCODE    : Extended;
    iPriPayWay  : Integer;          // <149> 2006/10/11 H.Kawato Add

begin
// <149> 2006/10/11 H.Kawato Del Start
{
	if	(m_nCurCodeAttribute <= 1) then
	begin
		if	(CmnEdit06002HojCodeNumeric.InputFlag) then
			strHojCode	:= ''
		else
			strHojCode	:= Format ('%.16d', [Trunc (CmnEdit06002HojCodeNumeric.Value)]);
	end
	else
		strHojCode	:= CmnEdit06002HojCodeFree.Text;
}
// <149> 2006/10/11 H.Kawato Del End

	pRecord	:= pUpdateRecord;

// <149> 2006/10/11 H.Kawato Mod Start
(*
	strSQLConst	:= 'UPDATE MTOKUI_PAY SET '
				+ Format ('BunkaiKbn = %d,', [CmnEdit01001DecDivision.AsInteger])		// 分解方法
// <110>				+ Format ('LetterKbn = %d,', [CmnEdit06012PasDivision.AsInteger]);		// 支払通知書区分
				+ Format ('LetterKbn = %d,', [CmnEdit01028PasDivision.AsInteger]);		// 支払通知書区分

//    nNCODE :=  0;
//    nNCODE :=  fnGetNCODE(strHojCode);

	if	(strHojCode = '') then
		strSQLConst	:= strSQLConst + 'CngNCode = NULL'
	else
		strSQLConst	:= strSQLConst + Format ('CngNCode = ''%s''', [strHojCode]);		// 名寄せ親代替取引先

	strSQLConst	:= strSQLConst + ' WHERE ' ;
	strSQLConst	:= strSQLConst + ' BaseNCode = ' +  FloatToStr(pRecord^.nNCode);        // 外部ｺｰﾄﾞ
*)
    case (CmnEdit01030PriPayWayDivision.AsInteger) of                                   // 優先支払方法区分
        0:   iPriPayWay  := 0;
// <189> Mod ↓↓↓
//      1:   iPriPayWay  := 3;
//      else iPriPayWay  := 0;
		else iPriPayWay  := CmnEdit01030PriPayWayDivision.AsInteger;
// <189> Mod ↑↑↑
    end;

	strSQLConst	:= 'UPDATE PayPtnInfo SET '
				+ Format ('BunkaiKbn = %d, ', [CmnEdit01001DecDivision.AsInteger])		// 分解方法
                + Format ('PriPayWay = %d, ', [iPriPayWay])                             // 優先支払方法区分
                + 'UpdDateTM = Now(), '                                                 // 修正日付
                + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd);                         // 処理者

	strSQLConst	:= strSQLConst + ' WHERE ' ;
	strSQLConst	:= strSQLConst + ' PjSubNCode = ' +  FloatToStr(lvKosyuNCD);            // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + ' AND PrjNCode = ' +  FloatToStr(lvKojiNCD);           // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + ' AND BmnNCode = 0';                                   // 部門内部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + ' AND PayPtnNo = ' +  FloatToStr(m_nPayPtnNo);         // 条件ﾊﾟﾀｰﾝNo
	strSQLConst	:= strSQLConst + ' AND PayNCode = ' +  FloatToStr(pRecord^.nNCode);     // 取引先内部ｺｰﾄﾞ
	strSQLConst	:= strSQLConst + ' AND MasterKbn = 22 ';                                // マスタ区分
	strSQLConst	:= strSQLConst + ' AND RDelKbn = 0 ';                                   // 削除区分 <161> Add
// <149> 2006/10/11 H.Kawato Mod End

	Result	:= strSQLConst;
end;

// <222> ADD start
//*****************************************************************************
//	Process			:	支払可変情報マスタのinsert文作成
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	pUpdateRecord	パラメータ
//					:	strID			項目ID
//					:	strValue		内容
//	Return			:	String			SQL
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnMakeSQLConstPayVariableItemInsert (pUpdateRecord: Pointer; strID: String; strValue: String): String;
var
	pRecord     : ^MasterData;
	strSQLConst : String;
begin
// <222-5> ADD start
	strID := StringReplace(strID, '''', '''''', [rfReplaceAll]);
	strValue := StringReplace(strValue, '''', '''''', [rfReplaceAll]);
// <222-5> ADD end
	pRecord	:= pUpdateRecord;
	strSQLConst	:= 'INSERT INTO PayVariableItem ('
								+ 'MasterKbn, '									        // マスタ区分
								+ 'PayNCode, '									        // 取引先内部ｺｰﾄﾞ
								+ 'PayPtnNo, '									        // 条件ﾊﾟﾀｰﾝNo
								+ 'RecSyubetu, ' 								        // レコード種別
								+ 'ItemID, '									        // 項目ID
								+ 'ItemValue, '								        	// 内容
								+ 'UpdDateTM, '     							    	// 修正日付
								+ 'InsDateTM, '     							    	// 登録日付
   								+ 'UpdTantoNCode) VALUES ('						    	// 処理者

							+ IntToStr(MASTER_CUSTOMER) + ','                           // マスタ区分
   							+ FloatToStr(pRecord^.nNCode) + ','                        	// 取引先内部ｺｰﾄﾞ
                            + FloatToStr(m_nPayPtnNo) + ','                         	// 条件ﾊﾟﾀｰﾝNo
 							+ '11,'														// 電信送金
						 	+ '''' + strID + ''','  									// 項目ID
 							+ '''' + strValue + ''','									// 内容
                            + 'Now(),'                                                  // 修正日付
                            + 'Now(),'                                                  // 登録日付
                            + FloatToStr(m_nTantoNCd) + ')';                            // 処理者

	Result	:= strSQLConst;
end;

//*****************************************************************************
//	Process			:	支払可変情報マスタのupdate文作成
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	pUpdateRecord	パラメータ
//					:	strID			項目ID
//					:	strValue		内容
//	Return			:	String			SQL
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnMakeSQLConstPayVariableItemUpdate (pUpdateRecord: Pointer; strID: String; strValue: String): String;
var
	pRecord     : ^MasterData;
	strSQLConst : String;
begin
// <222-5> ADD start
	strID := StringReplace(strID, '''', '''''', [rfReplaceAll]);
	strValue := StringReplace(strValue, '''', '''''', [rfReplaceAll]);
// <222-5> ADD end

	pRecord	:= pUpdateRecord;
	strSQLConst	:= 'UPDATE PayVariableItem SET '
                            + ' ItemValue = ''' + strValue + ''','						// 内容
                            + ' UpdDateTM = Now(), '     							    // 修正日付
                            + ' UpdTantoNCode = ' + FloatToStr(m_nTantoNCd)             // 処理者
                            + ' WHERE MasterKbn = ' + IntToStr(MASTER_CUSTOMER)     	// マスタ区分
                            + ' AND PayNCode = '	+ FloatToStr(pRecord^.nNCode)      	// 取引先内部ｺｰﾄﾞ
                            + ' AND PayPtnNo = ' + FloatToStr(m_nPayPtnNo)              // 条件ﾊﾟﾀｰﾝNo
                            + ' AND RecSyubetu = 11 '							        // レコード種別
                            + ' AND ItemID = ''' + strID + '''';						// 項目ID

	Result	:= strSQLConst;
end;

// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnMoveFocusNextControl (cControl: TObject): Boolean;
var
    Qe          : TMQuery;
    lvTRMstKbn  : Integer;
    strHojCode  : String;
    sKojiName   : String;                                   // <149> 2006/10/11 H.Kawato Add
//    nKojiNCode  : Extended;                               // <149> 2006/10/11 H.Kawato Add
    fChangeFlag : Boolean;                                  // <154> 2007/02/06 H.Kawato Add
//↓<Rel>
	PQe         : TMQuery;                                  // 全社DB用ｸｴﾘ
	strNmk      : string;
	nPNCode     : Extended;
    iErrCode    : Integer;
//↑<Rel>
    nItems      : Integer;                                  // <170> 2007/12/13 H.Kawato Add

begin
    lvTRMstKbn  := TR_NON;
    sKojiName   := '';                                      // <149> 2006/10/11 H.Kawato Add
//    nKojiNCode  := 0;                                     // <149> 2006/10/11 H.Kawato Add

    iErrCode    := 0;                                       // <Rel>

    fChangeFlag := False;                                   // <170> 2007/12/13 H.Kawato Add

	if	((TWinControl (m_cACControl).Name = CmnEdit00001HojCodeNumeric.Name) or
            (TWinControl (m_cACControl).Name = CmnEdit00001HojCodeFree.Name)) then
    begin

        // 取引先ｺｰﾄﾞﾁｪｯｸ
    	if	(m_nCurCodeAttribute <= 1) then
    	begin
    		if	(CmnEdit00001HojCodeNumeric.InputFlag) then
	    		strHojCode	:= ''
		    else
			    strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)]);

    		m_cACControl	:= CmnEdit00001HojCodeNumeric
    	end
    	else
    	begin
    		strHojCode		:= CmnEdit00001HojCodeFree.Text;
    		m_cACControl	:= CmnEdit00001HojCodeFree;
    	end;

        // ''時
        if  strHojCode = '' then
        begin
            fnFirstDetailDsp;
            m_cACControl.SetFocus();
            Result := False;
            // コード未確定時使用不可
            CmnScrollBoxInformation.Enabled := False;
            CmnPanelButtons.Enabled := False;

            Exit;
        end;

        //↓<Rel>
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 親会社用ｸｴﾘの作成
            PQe := TMQuery.Create(Self);
            m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, PQe);

            // 子会社用ｸｴﾘの作成
            Qe  := TMQuery.Create(Self);
            m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);

            try
                // 子社DBにあるか？
                Qe.Close;
                Qe.SQL.Clear;
                Qe.SQL.Add('select NCODE from MTOKUI '
                    +   ' where (GCODE = :pCODE) and (RDelKbn = 0)');

                Qe.ParamByName('pCODE').asString := strHojCode;

                if not Qe.Open then
                begin
                    iErrCode := -99;
//                    Exit;         // 2007/07/06 H.Kawato Del
                end;

                if Qe.EOF then
                begin
                    // 子社DBに存在しないときは全社DBにあるか？
                    PQe.Close;
                    PQe.SQL.Clear;
                    PQe.SQL.Add('select NCODE,NMK from MTOKUI '
                        +   ' where (GCODE = :pCODE) and (RDelKbn = 0)');

                    PQe.ParamByName('pCODE').asString := strHojCode;

                    if not PQe.Open then
                    begin
                        iErrCode := -99;
//                        Exit;     // 2007/07/06 H.Kawato del
                    end;

                    if not PQe.EOF then
                    begin
                        // 親に存在した。
                        strNmk  := PQe.FieldByName('NMK').AsString;
                        nPNCode := PQe.FieldByName('NCODE').AsFloat;

                        if ( MjsMessageBoxEx(Self, JNTSYNC_MSG_CHK_SYNC + #13#10#13#10
                                           + strNmk,
                                             '確認', mjQuestion, mjYESNO, mjDefNO) = mrYES ) then
                        begin
                            // 同期確認ﾀﾞｲｱﾛｸﾞの結果→「同期する」論理

                            // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                            m_cDataModule.BeginTran( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                            m_cDataModule.BeginTran( m_cDBSelect );

                            try
                                if not fnMTOKUI_Sync(m_SyncMaster,nPNCode,PQe) then
                                begin
                                    MjsMessageBoxEx (Self,
                                                         '自社への関連付けに失敗しました。',
                                                         'マスタ同期', mjError, mjOk, mjDefOk);
                                    // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                    m_cDataModule.Rollback( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                    m_cDataModule.Rollback( m_cDBSelect );
                                    iErrCode := -99;
//                                    Exit;     // 2007/07/06 H.Kawato Del
                                end;

                                // 更新されたときはSecHojyoDispInfoのﾒﾝﾃを行う。
                                if not fnUpdSecHojyoDispInfo(1,Self,m_SyncMaster,nPNCode,PQe) then
                                begin
                                    iErrCode := -99;
//                                    Exit;     // 2007/07/06 H.Kawato Del
                                end;

                            except
                                // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                m_cDataModule.Rollback( m_SyncMaster.m_cPDBSelect );
                                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                m_cDataModule.Rollback( m_cDBSelect );
                                iErrCode := -99;
//                                Exit;         // 2007/07/06 H.Kawato Del
                            end;

                            // 親会社DBに対してｺﾐｯﾄを実行する
                            m_cDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してｺﾐｯﾄを実行する
                            m_cDataModule.Commit( m_cDBSelect );
                        end
                        else
                        begin
                            // 同期確認ﾀﾞｲｱﾛｸﾞの結果→「同期ｷｬﾝｾﾙ」論理
                            iErrCode := -98;
//                            Exit;             // 2007/07/06 H.Kawato Del
                        end;
                    end;
                end;
            finally
                PQe.Close;
                PQe.Free;
                Qe.Close;
                Qe.Free;
            end;

            if iErrCode <> 0 then
            begin
                case iErrCode of
                    -1:
                    begin
                        uvSelSys.MsgDlg(1010,50);
                    end;
                    -98:
                    begin
                        // 親に存在(同期ｷｬﾝｾﾙ) は何もしない。
                    end;
                    -99:
                    begin
                        MjsMessageBoxEx (Self,'登録が異常終了しました。', 'マスタ同期', mjError, mjOk, mjDefOk);
                    end;
                end;

                fnFirstDetailDsp;
                m_cACControl.SetFocus();
                Result := False;
                // コード未確定時使用不可
                CmnScrollBoxInformation.Enabled := False;
                CmnPanelButtons.Enabled := False;
                Exit;
            end;
        end;
        //↑<Rel>

    	Qe	:= TMQuery.Create (Self);
    	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

       	with  Qe do
        begin
	        Close ();
    		SQL.Clear ();
            SQL.Add('Select * from MTOKUI       ');
            SQL.Add(' Where GCode   = :pGCode   ');
            SQL.Add(' and RDelKbn   = 0         ');
            SQL.Add(' and HojyoKbn2 = 1         ');

            ParamByName('pGCode' ).AsString  := strHojCode;

            Open;

            if Eof then
                lvTRMstKbn := TR_INS
            else
                lvTRMstKbn := TR_UPD;
      	end;

        Qe.Close;
        Qe.Free;

        // 新規は無効
        if  lvTRMstKbn = TR_INS then
        begin
            MjsMessageBox(Self, '基本情報が登録されていません。', mjWarning, mjDefOk);
            fnFirstDetailDsp;
            m_cACControl.SetFocus();
            Result := False;

            // コード未確定時使用不可
            CmnScrollBoxInformation.Enabled := false;
            CmnPanelButtons.Enabled := false;

            Exit;
        end;
    end;

    // コード確定時使用可能
    CmnScrollBoxInformation.Enabled := True;

// <222> ADD start
   	nPNCode := fnGetPayNCode();

	if fnChkPayStatusData(nPNCode) then		// 外貨債務支払状況チェック
	begin
		fnChangeConditionGaikaUse(True);  	// 採用区分変更可
	end
	else
	begin
		fnChangeConditionGaikaUse(False);	// 採用区分変更不可
	end;
// <222> ADD end

    if (m_iProAdoptKbn = 0) or                                                  // <164> Add プロジェクト別支払採用なし
       (CmnEdit00012DecPtnDivision.Value = 0) or (m_nPayPtnNo2 = 0) then        // <164> Add 分解ﾊﾟﾀｰﾝが標準、または標準情報の登録がない
        CmnPanelButtons.Enabled := True;

// <149> 2006/12/14 H.Kawato Add Start
    if  ((m_bDecPtnChange = True) and
         (TWinControl (cControl).Name = 'CmnEdit00012DecPtnDivision' )) then
        fnBunkaiPtnChange();
// <149> 2006/12/14 H.Kawato Add End

	if	(TWinControl (cControl).Name = CmnEdit05002KmkCode.Name) then
		cControl	:= CmnEdit05003HojCodeNumeric
	else if	(CompareStr (Copy (TWinControl (cControl).Name, 1, 19), 'CmnEdit05003HojCode') = 0) then
		cControl	:= CmnEdit05004HojCodeNumeric
	else if	(CompareStr (Copy (TWinControl (cControl).Name, 1, 19), 'CmnEdit05004HojCode') = 0) then
		cControl	:= CmnEdit05005HojCodeNumeric
	else
		cControl	:= nil;

// <150> 2006/11/02 H.Kawato Add Start
    if  (CompareStr (Copy (TWinControl (m_cACControl).Name, 1, 19), 'CmnEdit05003HojCode') = 0) or
        (CompareStr (Copy (TWinControl (m_cACControl).Name, 1, 19), 'CmnEdit05004HojCode') = 0) then
        fnSetChangeDataFlagCheckItems (m_cACControl, TRUE);
// <150> 2006/11/02 H.Kawato Add End

// <154> 2007/02/06 H.Kawato Add Start
// <170> 2007/12/13 H.Kawato Mod Start
    // 査定方法のチェンジフラグの値を保持
//    fChangeFlag := PCheckItemRec (m_cCheckItems.Items [3])^.fChangeData;
    for	nItems := 0 to m_cCheckItems.Count - 1 do
    begin
    	if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID = 11) then  // 査定方法
        begin
            fChangeFlag := PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData;
            Break;
        end;
    end;
// <170> 2007/12/13 H.Kawato Mod End

	if	(TWinControl (m_cACControl).Name = CmnEdit00011AssDivision.Name) then
    begin
        // 一時的に査定方法のチェンジフラグをTrueにする
        fnSetChangeDataFlagCheckItems (CmnEdit00011AssDivision, TRUE);
    end;
// <154> 2007/02/06 H.Kawato Add End

	if	(not fnCheckEditItemsValues (cControl)) then
	begin
// <154> 2007/02/06 H.Kawato Add Start
	    if	(TWinControl (m_cACControl).Name = CmnEdit00011AssDivision.Name) then
        begin
            // チェックが終わったら査定方法のチェンジフラグを元に戻す
            fnSetChangeDataFlagCheckItems (CmnEdit00011AssDivision, fChangeFlag);
        end;
// <154> 2007/02/06 H.Kawato Add End
		if	((m_cACControl is TMNumEdit ) or
			 (m_cACControl is TMTxtEdit ) or
			 (m_cACControl is TMDateEdit)) then
		begin
			if	(m_cACControl.Enabled) then
			begin
				m_cACControl.SetFocus ();

				TEdit (m_cACControl).SelectAll ();
				Beep  ();

				Result	:= FALSE;
				Exit;
			end;
		end;
	end;

// <154> 2007/02/06 H.Kawato Add Start
	if	(TWinControl (m_cACControl).Name = CmnEdit00011AssDivision.Name) then
    begin
        // チェックが終わったら査定方法のチェンジフラグを元に戻す
        fnSetChangeDataFlagCheckItems (CmnEdit00011AssDivision, fChangeFlag);
    end;
// <154> 2007/02/06 H.Kawato Add End

// <211> MOD-STR
//	if	((CmnTabInformations.Items.Selected = 4) and
	if	((CmnTabInformations.Items.Selected = TI_OFFSET) and
// <211> MOD-END
		 (TWinControl (m_cACControl).Name = CmnEdit00006AppDateEnd.Name)) then
	begin
		m_cACControl	:= CmnEdit05001SeqNo;
		m_cACControl.SetFocus ();

		Result	:= TRUE;
		Exit;
	end;
{
	if	((CmnTabDetail.Items.Selected = 1) and (TWinControl (m_cACControl).Name = CmnEdit06012PasDivision.Name)) then
	begin
		if	(CmnButtonUpdate.Enabled) then
		begin
			m_cACControl	:= CmnButtonUpdate;
			m_cACControl.SetFocus ();

			Result	:= TRUE;
			Exit;
		end;
	end;
}

	if	((TWinControl (m_cACControl).Name = CmnComboBox07014HolDivision.Name) or
		((TWinControl (m_cACControl).Name = CmnEdit07011ClosingDay.Name) and (CmnEdit07011ClosingDay.InputFlag))) then
	begin
		if	(CmnButtonUpdate.Enabled) then
		begin
			m_cACControl	:= CmnButtonUpdate;
			m_cACControl.SetFocus ();

			Result	:= TRUE;
			Exit;
		end;
	end;

// <149> 2006/10/11 H.Kawato Add Start
    if  (Copy(TWinControl (m_cACControl).Name,1,20) = 'CmnEdit00014KojiCode' ) or
        (Copy(TWinControl (m_cACControl).Name,1,21) = 'CmnEdit00016KosyuCode') then
    begin
        if  (not fnProjectChangeOver(m_cACControl)) then
        begin
        	fnSetChangeDataFlagCheckItems (m_cACControl, FALSE);
            Result := False;
            m_cACControl.SetFocus();
            Beep;
            Exit;
        end
        else
        begin
            CmnPanelInformations.Enabled    := True;    // <164> Add
            CmnPanelButtons.Enabled         := True;    // <164> Add
        	fnSetChangeDataFlagCheckItems (m_cACControl, FALSE);
            MjsDispCtrl.MjsNextCtrl (Self);
            Result	:= TRUE;
            Exit;
        end;
    end;
// <149> 2006/10/11 H.Kawato Add End

    if (lvTRMstKbn = TR_UPD) then
    begin
        fnShowScreenInformations;                       // データ表示 <125>追加
// <169> 2007/08/21 H.Kawato Mod Start
{
        if m_nReferMode = REFER then
            MjsDispCtrl.MjsNextCtrl (Self)
        else
// <149> 2006/10/11 H.Kawato Mod
//// 2006/08/02 H.Kawato Mod 査定方法の位置を変更
////    		m_cACControl	:= CmnEdit01001DecDivision;
//    		m_cACControl	:= CmnEdit01029AssDivision;
    		m_cACControl	:= CmnEdit00011AssDivision;
// <149> 2006/10/11 H.Kawato Mod
}
        MjsDispCtrl.MjsNextCtrl (Self);
// <169> 2007/08/21 H.Kawato Mod End

//        fnShowScreenInformations;                     // データ表示<125>削除

    	CmnButtonPagePrevious.TabStop   := FALSE;
        CmnButtonPagePrevious.Enabled   := False;
		m_cACControl.SetFocus ();

		Result	:= TRUE;
		Exit;
    end;

// <137> 2006/06/28 H.Kawato Add Start
    if (m_iHeikouData = 0) or (Trim(CmnLabel02018DebitDivisionDesc.Caption) = 'しない') then
    begin
// <200> Del-start
{
// <179> Add Start
        if (m_iHeikouData = 0) and
           (CmnEdit02019DebitData.Value = 0) and
           (Trim(CmnLabel02018DebitDivisionDesc.Caption) <> 'しない') then
            CmnEdit02019DebitData.Value := 1;
// <179> Add End
}
// <200> Del-end
        CmnLabelDebitData01  .Enabled := False;
        CmnEdit02019DebitData.Enabled := False;
        CmnLabelDebitDataDesc.Enabled := False;
    end
    else
    begin
//            if (CmnEdit02019DebitData.Value = 0) then		// <200> Del
//                CmnEdit02019DebitData.Value := 1;			// <200> Del

        CmnLabelDebitData01  .Enabled := True;
        CmnEdit02019DebitData.Enabled := True;
        CmnLabelDebitDataDesc.Enabled := True;
    end;
// <137> 2006/06/28 H.Kawato Add End

	MjsDispCtrl.MjsNextCtrl (Self);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnMoveRecSelecterGridStandard (nDivision: Integer; strHojCode: String);
var
	cMemData : TdxMemData;
	nRetRecNo: Integer;
	strFormat: String;

begin
	if	(Trim (strHojCode) = '') then
		Exit;

	if	((nDivision = TREE_SYSTEM    ) or
		 (nDivision = TREE_SYSTEM_SUM)) then
	begin
		CmnMemDataStandardExist.First ();
		CMnMemDataStandardTotal.First ();
		Exit;
	end;

	if	((nDivision = TREE_CHILD) or (nDivision = TREE_CHILD_SUM) or (nDivision = TREE_GENERAL)) then
		cMemData	:= CmnMemDataStandardExist
	else
		cMemData	:= CmnMemDataStandardTotal;

	if	((m_nCurCodeAttribute <= 1) and (Trim (strHojCode) <> '')) then
	begin
		case (m_nCurCodeAttribute) of
			0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
			1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
		end;

		strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
	end;

	nRetRecNo	:= cMemData.GetRecNoByFieldValue (strHojCode, 'strHojCode');

	if	(nRetRecNo > 0) then
	begin
		if	(nRetRecNo = 1) then
			cMemData.First ()
		else if	(nRetRecNo = cMemData.RecordCount) then
			cMemData.Last ()
		else
			cMemData.RecNo	:= nRetRecNo;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnMoveTreeViewItemSumSystem (nNCODE:Extended;strHojCode: String; nNCodeParent: Extended; nNCodePrevious: Extended);
var
	cNodeTarget: TTreeNode;
	cNodeParent: TTreeNode;
	cNode	   : TTreeNode;

begin
	cNodeTarget	:= nil;
	cNode		:= m_cNodeSumSystem.GetFirstChild ();									// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNode = nil) then
			Break;

		if	(CompareStr (FloatToStr(nNCodePrevious), FloatToStr(PTreeViewRec (cNode.Data)^.nNCode)) = 0) then
			Break;

		cNode	:= cNode.GetNextSibling ();												// 次の子ﾉｰﾄﾞ取得
	end;

	if	(cNode = nil) then
		Exit;

	cNode	:= cNode.GetFirstChild ();													// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNode = nil) then
			Break;

		if	(CompareStr (FloatToStr(nNCode), FloatToStr(PTreeViewRec (cNode.Data)^.nNCode)) = 0) then
		begin
			cNodeTarget	:= cNode;
			Break;
		end;

		cNode	:= cNode.GetNextSibling ();												// 次の子ﾉｰﾄﾞ取得
	end;

	if	(cNodeTarget = nil) then
		Exit;

	cNodeParent	:= m_cNodeSumSystem.GetFirstChild ();									// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNodeParent = nil) then
			Break;

		if	(CompareStr (FloatToStr(nNCodeParent), FloatToStr(PTreeViewRec (cNodeParent.Data)^.nNCode)) = 0) then
			Break;

		cNodeParent	:= cNodeParent.GetNextSibling ();									// 次の子ﾉｰﾄﾞ取得
	end;

	if	(cNodeParent = nil) then
		Exit;

	cNode	:= cNodeParent.GetFirstChild ();											// 先頭の子ﾉｰﾄﾞ取得

	while (TRUE) do
	begin
		if	(cNode = nil) then
		begin
			cNodeTarget.MoveTo (cNodeParent, naAddChild);
			Break;
		end;

		if	(CompareStr (FloatToStr(PTreeViewRec (cNode.Data)^.nNCode), FloatToStr(nNCode)) > 0) then
		begin
			cNodeTarget.MoveTo (cNode, naInsert);
			Break;
		end;

		cNode	:= cNode.GetNextSibling ();												// 次の子ﾉｰﾄﾞ取得
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnOutputConfirmationMessage (nDivision: Integer): Integer;
var
	cMessageRec: TMJSMsgRec;
	nMessageID : Integer;
	nReturn	   : Integer;
	nItems	   : Integer;
	strMessage : String;
	strFormat  : String;

begin
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
			Break;
	end;

	if	(nItems >= m_cCheckItems.Count) then
	begin
		Result	:= CONFIRM_THROUGH;
		Exit;
	end;

	case (nDivision) of
		CONFIRM_INSTRUCTION:	nMessageID	:= 3;
		CONFIRM_CANCEL     :	nMessageID	:= 1;
		CONFIRM_EXIT       :	nMessageID	:= 2;
		else
		begin
			Result	:= CONFIRM_THROUGH;
			Exit;
		end;
	end;

	m_cComArea.m_MsgStd.GetMsg (cMessageRec, 10020, nMessageID);

	if	(nMessageID = 3) then
	begin
		if	(m_nCurCodeAttribute <= 1) then
		begin
			case (m_nCurCodeAttribute) of
				0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
				1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
			end;

			strMessage	:= Format (strFormat, [Trunc (CmnEdit00001HojCodeNumeric.Value)]);
		end
		else
			strMessage	:= CmnEdit00001HojCodeFree.Text;

		strMessage			:= strMessage + ' ' + CmnEdit00004NameSimple.Text;
		cMessageRec.sMsg	:= '『' + strMessage + '』  ' + cMessageRec.sMsg;
	end;

	nReturn	:= MJSMessageBoxEx (Self,cMessageRec.sMsg, m_pRec^.m_ProgramName, cMessageRec.icontype,
													cMessageRec.btntype, cMessageRec.btndef, cMessageRec.LogType);

	if	(nReturn = mrYes) then
	begin
		case (nDivision) of
			CONFIRM_INSTRUCTION:	nReturn	:= CONFIRM_WRITE;
			CONFIRM_CANCEL     :	nReturn	:= CONFIRM_THROUGH;
			CONFIRM_EXIT       :	nReturn	:= CONFIRM_WRITE;
		end;
	end
	else if	(nReturn = mrNo) then
	begin
		case (nDivision) of
			CONFIRM_INSTRUCTION:	nReturn	:= CONFIRM_THROUGH;
			CONFIRM_CANCEL     :	nReturn	:= CONFIRM_RETFOCUSED;
			CONFIRM_EXIT       :	nReturn	:= CONFIRM_THROUGH;
		end;
	end
	else if	(nReturn = mrCancel) then
		nReturn	:= CONFIRM_RETFOCUSED
	else
		nReturn	:= CONFIRM_THROUGH;

	Result	:= nReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnOutputDBErrorMessage ();
begin
	if	(m_nDBErrorCode <> 0) then
	begin
		case (m_nDBErrorCode) of
			1:	m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 0, 1);
			2:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 5);
					m_cErrorMsgRec.sMsg	:= '固定体系区分が固定' + m_cErrorMsgRec.sMsg;
				end;
			3:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 18);
					m_cErrorMsgRec.sMsg	:= '子供が存在するため削除' + m_cErrorMsgRec.sMsg;
				end;
			4:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 18);
					m_cErrorMsgRec.sMsg	:= '仕訳入力済みのため削除' + m_cErrorMsgRec.sMsg;
				end;
			5:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 18);
					m_cErrorMsgRec.sMsg	:= '総合計又は諸口以外のレコードが存在するため削除' + m_cErrorMsgRec.sMsg;
				end;
			6:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 18);
					m_cErrorMsgRec.sMsg	:= '支払予定データが存在するため削除' + m_cErrorMsgRec.sMsg;
				end;
			7:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 18);
					m_cErrorMsgRec.sMsg	:= '部署情報が存在するため削除' + m_cErrorMsgRec.sMsg;
				end;
		//--- <#6> St -----
			8:	begin
					m_cComArea.m_MsgStd.GetMsg (m_cErrorMsgRec, 30, 18);
					m_cErrorMsgRec.sMsg	:= '未連結仕訳(部署or分散)が存在する為削除' + m_cErrorMsgRec.sMsg;
				end;
		//--- <#6> Ed -----
		end;
	end;

	MJSMessageBoxEx (Self,m_cErrorMsgRec.sMsg, m_pRec^.m_ProgramName, m_cErrorMsgRec.icontype,
										m_cErrorMsgRec.btntype, m_cErrorMsgRec.btndef, m_cErrorMsgRec.LogType);

	m_nDBErrorCode	:= 0;
end;

// -----------------------------------------------------------------------------
//  実在支払先登録リスト(簡略)　印刷処理 <126>--->この帳票は不要
// -----------------------------------------------------------------------------
procedure	TJNTCRP004006f.fnPrintCheckListExtStandard ();
var
	dqMasterData    :   TMQuery;
	strFormat	    :   String;
	strHojCode	    :   String;
//	strDescription  :   String;
begin

	dqMasterData	:= TMQuery.Create(Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);

	with dqMasterData do
	begin
		Close ();
		SQL.Clear();
        SQL.Add('SELECT m.GCode,m.Nm,m.Nmk,m.Renso,m.HojyoKbn1,m.HojyoKbn2, '
            +   '       m.SisanHojyoKbn1,m.SisanHojyoKbn2,f.FusenKbn        '
            +   'FROM MTOKUI m                                              '
            +   'LEFT OUTER JOIN MFusenInfo f on                            '
            +   '       (f.NCode = m.NCode) AND (f.MasterKbn = 22)          '
            +   'WHERE  (m.SumKbn=0) AND (m.HojyoKbn2=1) AND (RDelKbn=0)    '
            +   '   AND (TemplateKbn = 0)                                   ');

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            SQL.Add('  AND  (m.GCode >= :ExStCode)      ');
		    SQL.Add('  AND  (m.GCode <= :ExEdCode)      ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
        end;

        // 出力順序
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY m.GCode           ')
        else    SQL.Add('ORDER BY m.Renso, m.GCode  ');

        // ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			dqMasterData.Close();
			dqMasterData.Free();
			Exit;
		end;

		CmnMemDataPrintExtStandard.Active	:= FALSE;
		CmnMemDataPrintExtStandard.Active	:= TRUE;

		while (not EOF) do
		begin
			CmnMemDataPrintExtStandard.Append();

			strHojCode	:= FieldByName ('GCode').AsString;

			if ( m_nCurCodeAttribute <= 1 ) then
			begin
				case (m_nCurCodeAttribute) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;
				strHojCode	:=  Format(strFormat,[StrToInt64(Trim(strHojCode))]);
			end;

            // 付箋区分
            case FieldByName('FusenKbn').AsInteger of
        		1: CmnMemDataPrintExtStandard.FieldByName('grTag').Assign(Image_Fusen_Red.Picture.Bitmap);      // 赤
           		2: CmnMemDataPrintExtStandard.FieldByName('grTag').Assign(Image_Fusen_Green.Picture.Bitmap);    // 緑
                3: CmnMemDataPrintExtStandard.FieldByName('grTag').Assign(Image_Fusen_Blue.Picture.Bitmap);     // 青
        		4: CmnMemDataPrintExtStandard.FieldByName('grTag').Assign(Image_Fusen_Orange.Picture.Bitmap);   // 橙
        	end;

            // 支払先ｺｰﾄﾞ
			CmnMemDataPrintExtStandard.FieldByName('strHojCode')    .AsString	:=  strHojCode;
            // 連想
			CmnMemDataPrintExtStandard.FieldByName('strAssociation').AsString	:=  FieldByName('Renso').AsString;
            // 正式名称
			CmnMemDataPrintExtStandard.FieldByName('strName')       .AsString	:=  FieldByName('NM')   .AsString;
            // 簡略名称
			CmnMemDataPrintExtStandard.FieldByName('strNameSimple') .AsString	:=  FieldByName('NMK')  .AsString;

            // 得意先区分
			if ( FieldByName('HojyoKbn1').AsInteger = 0 ) then
    				CmnMemDataPrintExtStandard.FieldByName('strCustomerDesc').Clear()
			else    CmnMemDataPrintExtStandard.FieldByName('strCustomerDesc').AsString	:= '○';

            // 仕入先区分
			if ( FieldByName ('HojyoKbn2').AsInteger = 0 ) then
				    CmnMemDataPrintExtStandard.FieldByName('strSupplierDesc').Clear()
			else    CmnMemDataPrintExtStandard.FieldByName('strSupplierDesc').AsString	:= '○';


			CmnMemDataPrintExtStandard.Post();

			Next;
		end;
	end;

    CmnMemDataPrintExtStandard.First();

	dqMasterData.Close();
	dqMasterData.Free();

end;

// -----------------------------------------------------------------------------
//  合計支払先登録リスト(簡略)　印刷処理 <126>--->この帳票は不要
// -----------------------------------------------------------------------------
procedure	TJNTCRP004006f.fnPrintCheckListTtlStandard ();
var
	dqMasterData    :   TMQuery;
	strFormat	    :   String;
	strHojCode	    :   String;
begin

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dqMasterData);

	with dqMasterData do
	begin
		Close();
		SQL.Clear();
        SQL.Add('SELECT m.GCode,m.Nm,m.Nmk,m.Renso,m.HojyoKbn1,m.HojyoKbn2,     '
            +   '       m.SisanHojyoKbn1,m.SisanHojyoKbn2,ci.PostNo1,           '
            +   '       ci.PostNo2,ci.Ads1,ci.Ads2,f.FusenKbn                   '
            +   'FROM MTOKUI m                                                  '
            +   'LEFT OUTER JOIN MTOKUI_PAY ci ON                               '
            +   '       (ci.BaseNCode = m.NCode)                                '
            +   'LEFT OUTER JOIN MFusenInfo f  ON                               '
            +   '       (f.NCode = m.NCode) AND (f.MasterKbn = 22)              '
            +   'WHERE  (m.SumKbn = 1) AND (RDelKbn = 0) AND (TemplateKbn = 0)  ');

        if ( uvHani.pvrRgType[0] = 1 ) then
        begin
            SQL.Add('  AND  (m.GCode >= :ExStCode)      ');
		    SQL.Add('  AND  (m.GCode <= :ExEdCode)      ');
            ParamByName('ExStCode').AsString   :=  uvHani.pvrStCode[0];
   			ParamByName('ExEdCode').AsString   :=  uvHani.pvrEdCode[0];
        end;

        // 出力順序
        if ( uvHani.pvrOrder = 0 ) then
                SQL.Add('ORDER BY m.GCode           ')
        else    SQL.Add('ORDER BY m.Renso, m.GCode  ');

        // ｴﾗｰの判定
		if ( Open = FALSE ) then
		begin
			dqMasterData.Close();
			dqMasterData.Free();
			Exit;
		end;

		CmnMemDataPrintTtlStandard.Active	:= FALSE;
		CmnMemDataPrintTtlStandard.Active	:= TRUE;

		while (not EOF) do
		begin
			CmnMemDataPrintTtlStandard.Append();

			strHojCode	:= FieldByName('GCode').AsString;

			if ( m_nCurCodeAttribute <= 1 ) then
			begin
				case (m_nCurCodeAttribute) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;
				strHojCode	:=  Format(strFormat,[StrToInt64(Trim(strHojCode))]);
			end;

            // 付箋区分
            case FieldByName('FusenKbn').AsInteger of
        		1: CmnMemDataPrintTtlStandard.FieldByName('grTag').Assign(Image_Fusen_Red.Picture.Bitmap);      // 赤
           		2: CmnMemDataPrintTtlStandard.FieldByName('grTag').Assign(Image_Fusen_Green.Picture.Bitmap);    // 緑
                3: CmnMemDataPrintTtlStandard.FieldByName('grTag').Assign(Image_Fusen_Blue.Picture.Bitmap);     // 青
        		4: CmnMemDataPrintTtlStandard.FieldByName('grTag').Assign(Image_Fusen_Orange.Picture.Bitmap);   // 橙
        	end;

            // 支払先ｺｰﾄﾞ
			CmnMemDataPrintTtlStandard.FieldByName('strHojCode')        .AsString	:= strHojCode;
            // 連想
			CmnMemDataPrintTtlStandard.FieldByName('strAssociation')    .AsString	:= FieldByName('Renso')     .AsString;
            // 正式名称
			CmnMemDataPrintTtlStandard.FieldByName('strName')           .AsString	:= FieldByName('Nm')        .AsString;
            // 簡略名称
			CmnMemDataPrintTtlStandard.FieldByName('strNameSimple'  )   .AsString	:= FieldByName('Nmk')       .AsString;
            // 住所(上段)
			CmnMemDataPrintTtlStandard.FieldByName('strAddressUpper')   .AsString	:= FieldByName('Ads1')      .AsString;
            // 住所(下段)
			CmnMemDataPrintTtlStandard.FieldByName('strAddressLower')   .AsString	:= FieldbyName('Ads2')      .AsString;

            // 郵便番号(基番・枝番)
			if (( FieldByName('PostNo1').AsInteger = 0 )  and
                ( FieldByName('PostNo2').AsInteger = 0 )) then
			begin
				CmnMemDataPrintTtlStandard.FieldByName('nZipCodeUpper').Clear ();
				CmnMemDataPrintTtlStandard.FieldByName('nZipCodeLower').Clear ();
			end
			else
			begin
				CmnMemDataPrintTtlStandard.FieldByName('nZipCodeUpper').AsInteger   :=  FieldByName('PostNo1').AsInteger;
				CmnMemDataPrintTtlStandard.FieldByName('nZipCodeLower').AsInteger	:=  FieldByName('PostNo2').AsInteger;
			end;

//			if	(not FieldByName ('UpdateTime').IsNull) then
//				CmnMemDataPrintTtlStandard.FieldByName ('dtUpdateDate').AsDateTime	:= FieldByName ('UpdateTime').AsDateTime
//			else
//				CmnMemDataPrintTtlStandard.FieldByName ('dtUpdateDate').Clear ();

			CmnMemDataPrintTtlStandard.Post();
			Next;
		end;
	end;

    CmnMemDataPrintTtlStandard.First();

	dqMasterData.Close();
	dqMasterData.Free();

end;

// -----------------------------------------------------------------------------
//  合計支払先登録リスト(簡略)　印刷処理
// -----------------------------------------------------------------------------
procedure	TJNTCRP004006f.fnPrintCheckListDetail ();
var
	dqMasterData  : TMQuery;
	nRow		  : Integer;
	strFormat	  : String;
	strHojCode	  : String;
//	strDescription: String;
	strAppDate	  : String;
    strDspHojCode : String;
    strSQL        : String;     // <149> 2006/10/11 H.Kawato Add

begin

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
		CmnReportDetailDBTextHojCode   .Alignment	:= taRightJustify;
//		CmnReportDetailDBTextParentCode.Alignment	:= taRightJustify;                  // <149> 2006/10/11 H.Kawato Del
//		CmnReportDetailDBTextSubstCode .Alignment	:= taRightJustify;                  // <149> 2006/10/11 H.Kawato Del
	end
	else																				// ｺｰﾄﾞ属性: 文字
	begin
		CmnReportDetailDBTextHojCode   .Alignment	:= taLeftJustify;
//		CmnReportDetailDBTextParentCode.Alignment	:= taLeftJustify;                   // <149> 2006/10/11 H.Kawato Del
//		CmnReportDetailDBTextSubstCode .Alignment	:= taLeftJustify;                   // <149> 2006/10/11 H.Kawato Del
	end;

// <149> 2006/10/11 H.Kawato Add Start
	if	(m_arAdoptInfo[36].nAdoption <= 1) then                                         // ｺｰﾄﾞ属性: 数字 (ﾌﾟﾛｼﾞｪｸﾄ)
		CmnReportDetailDBTextPrjCode   .Alignment	:= taRightJustify
	else																				// ｺｰﾄﾞ属性: 文字 (ﾌﾟﾛｼﾞｪｸﾄ)
		CmnReportDetailDBTextPrjCode   .Alignment	:= taLeftJustify;

	if	(m_arAdoptInfo[37].nAdoption <= 1) then                                         // ｺｰﾄﾞ属性: 数字 (ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ)
		CmnReportDetailDBTextPrjSubCode.Alignment	:= taRightJustify
	else																				// ｺｰﾄﾞ属性: 文字 (ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ)
		CmnReportDetailDBTextPrjSubCode.Alignment	:= taLeftJustify;
// <149> 2006/10/11 H.Kawato Add End

	dqMasterData	:= TMQuery.Create (Application);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

{
		SQL.Clear ();
		SQL.Add   ('SELECT hm.GCode, hm.RenChar, hm.LongName, hm.SimpleName, hm.StartDate, hm.EndDate, ');
		SQL.Add   ('       hm.STaxCode, hm.STaxRate, hm.BTaxCode, hm.BTaxRate, hm.SDebitCash, hm.SCreditCash, ');
		SQL.Add   ('       hm.BunCode, hm.RootKbn, ');
		SQL.Add   ('       fi.FusenKbn, ');
		SQL.Add   ('       ci.ZipCode1, ci.ZipCode2, ci.Address1, ci.Address2, ci.TelNo, ci.SectionName, ');
		SQL.Add   ('       ci.PersonName, ci.TitleKbn, ci.PCloseDay1, ci.PayMonth1, ci.PayDay1, ');
		SQL.Add   ('       ci.PHolidayKbn1, ci.PCloseDay2, ci.PayMonth2, ci.PayDay2, ci.PHolidayKbn2, ');
		SQL.Add   ('       ci.PCloseDay3, ci.PayMonth3, ci.PayDay3, ci.PHolidayKbn3, ');
		SQL.Add   ('       pp.BunkaiKbn, pp.LetterKbn, pp.ChangeCode, ');
		SQL.Add   ('       pn.NayoseKbn, pn.NayoseOya ');
		SQL.Add   ('FROM   FX_HojyoMA hm ');
		SQL.Add   ('LEFT OUTER JOIN FX_MFusenInfo fi ');
		SQL.Add   ('ON     hm.MasterKbn = fi.MasterKbn AND hm.GCode = fi.HojyoCode ');
		SQL.Add   ('LEFT OUTER JOIN CSInfo ci ');
		SQL.Add   ('ON     hm.MasterKbn = ci.MasterKbn AND hm.GCode = ci.GCode ');
		SQL.Add   ('LEFT OUTER JOIN PayPtnInfo pp ');
		SQL.Add   ('ON     hm.MasterKbn = pp.MasterKbn AND hm.GCode = pp.GCode ');
		SQL.Add   ('LEFT OUTER JOIN PayNayoseInfo pn ');
		SQL.Add   ('ON     hm.MasterKbn = pn.MasterKbn AND hm.GCode = pn.GCode AND pn.NayoseSyu = 1 ');
		SQL.Add   ('WHERE  hm.MasterKbn = 22 AND hm.RDelKbn = 0 AND ');
		SQL.Add   ('      (hm.SumKbn <> 0 OR (hm.SumKbn = 0 AND hm.HojyoKbn2 = 1)) AND ');
		SQL.Add   ('       hm.GCode >= :strHojCodeStr and hm.GCode <= :strHojCodeEnd ');

		if	(m_nPrintOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
			SQL.Add ('ORDER BY hm.GCode')
		else																			// 範囲指定: 1=連想順
			SQL.Add ('ORDER BY hm.RenChar, hm.GCode');

		ParamByName ('strHojCodeStr').AsString	:= m_strPrintHojCodeStr;				// 出力範囲: 支払先ｺｰﾄﾞ(開始)
		ParamByName ('strHojCodeEnd').AsString	:= m_strPrintHojCodeEnd;				// 出力範囲: 支払先ｺｰﾄﾞ(終了)
}
		SQL.Clear();
// <149> 2006/10/11 H.Kawato Mod Start
{
		SQL.Add('SELECT MT.NCode,MT.GCode,MT.Renso,MT.NM,MT.NMK,MT.TStartDate,  '
            +   '       MT.TEndDate,MT.PayRootKbn,MT.SumKbn,FI.FusenKbn,        '
//          +   '       hm.STaxCode,hm.STaxRate,hm.BTaxCode,hm.BTaxRate,        '
//          +   '       hm.SDebitCash,hm.SCreditCash,hm.BunCode,hm.RootKbn,     '
            +   '       isnull(MP.PostNo1,0) as PostNo1,                        '
            +   '       isnull(MP.PostNo2,0) as PostNo2,                        '
            +   '       MP.Ads1,MP.Ads2,MP.Tel1,MP.SectionName,MP.TanNM,        '
            +   '       MP.KeisyoKbn,MT.PCloseDay1,MT.PayMonth1,MT.PayDay1,     '
		    +   '       MT.PHolidayKbn1,MT.PCloseDay2,MT.PayMonth2,MT.PayDay2,  '
            +   '       MT.PHolidayKbn2,MT.PCloseDay3,MT.PayMonth3,MT.PayDay3,  '
            +   '       MT.PHolidayKbn3,MP.BunkaiKbn,MP.LetterKbn,MP.CngNCode,  '
            +   '       MP.SateiKbn,                                            '       // <144> 2006/08/08 H.Kawato Add
		    +   '       PN.NayoseKbn, PN.NayoseOyaNCode                         '
		    +   'FROM MTOKUI MT                                                 '
		    +   'LEFT OUTER JOIN MFusenInfo FI                                  '
		    +   '           ON (FI.MasterKbn=22) AND (MT.NCode=FI.NCode)        '
		    +   'LEFT OUTER JOIN MTOKUI_PAY MP                                  '
		    +   '           ON (MT.NCode=MP.BaseNCode)                          '
		    +   'LEFT OUTER JOIN PayNayoseInfo PN                               '
		    +   '           ON (PN.Masterkbn=22) AND (MT.NCode=PN.PayNCode)     '
            +   '          AND (PN.NayoseSyu=1)                                 '
		    +   'WHERE  (MT.RDelKbn=0) AND (MT.TemplateKbn=0)                   '       // <102>
		    +   '   AND (MT.SumKbn<>0 OR (MT.SumKbn=0 AND MT.HojyoKbn2=1))      ');

        if uvHani.pvrRgType[0] = 1 then
    		SQL.Add   ('and  MT.GCode >= :strHojCodeStr and MT.GCode <= :strHojCodeEnd ');

		if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
			SQL.Add ('ORDER BY MT.GCode')
		else																			// 範囲指定: 1=連想順
			SQL.Add ('ORDER BY MT.Renso, MT.GCode');

        if uvHani.pvrRgType[0] = 1 then
        begin
    		ParamByName ('strHojCodeStr').AsString	:= uvHani.pvrStCode[0];				// 出力範囲: 支払先ｺｰﾄﾞ(開始)
	    	ParamByName ('strHojCodeEnd').AsString	:= uvHani.pvrEdCode[0];				// 出力範囲: 支払先ｺｰﾄﾞ(終了)
        end;
}
        strSQL  := '';
        strSQL  := strSQL + 'SELECT ';
        strSQL  := strSQL + ' MT.NCode, MT.GCode,';
        strSQL  := strSQL + ' MT.Renso, MT.NM, MT.NMK,';
        strSQL  := strSQL + ' MT.TStartDate, MT.TEndDate,';
        strSQL  := strSQL + ' MT.PayRootKbn, MT.SumKbn,';
        strSQL  := strSQL + ' FI.FusenKbn,';
        strSQL  := strSQL + ' MP.SateiKbn, MP.BunkaiPtn, PT.BunkaiKbn,';
        strSQL  := strSQL + ' MP.SateiCalcKbn, MP.SateiCalc, ';                         // 査定金額計算区分、査定金額計算値 <170> Add
        strSQL  := strSQL + ' MP.PayKbn1, ';                                            // 期日前支払区分 <197> ADD
        strSQL  := strSQL + ' PT.PayPtnNo, PT.PriPayWay,';
        strSQL  := strSQL + ' HM1.NCode AS PrjNCode,';
        strSQL  := strSQL + ' HM1.GCode AS PrjGCode,';
        strSQL  := strSQL + ' HM1.SimpleName AS PrjName,';
        strSQL  := strSQL + ' HM2.NCode AS PrjSubNCode,';
        strSQL  := strSQL + ' HM2.GCode AS PrjSubGCode,';
        strSQL  := strSQL + ' HM2.SimpleName AS PrjSubName,';
        strSQL  := strSQL + ' PN.NayoseKbn, PN.NayoseOyaNCode ';
        strSQL  := strSQL + 'FROM MTOKUI MT ';
        strSQL  := strSQL + 'LEFT OUTER JOIN MFusenInfo FI ';
        strSQL  := strSQL + '  ON (FI.MasterKbn=22) AND (MT.NCode=FI.NCode) ';
        strSQL  := strSQL + 'LEFT OUTER JOIN MTOKUI_PAY MP ';
        strSQL  := strSQL + '  ON (MT.NCode=MP.BaseNCode) ';
        strSQL  := strSQL + 'LEFT OUTER JOIN PayPtnInfo PT ';
        strSQL  := strSQL + '  ON (PT.Masterkbn=22) ';
        strSQL  := strSQL + ' AND (MT.NCode=PT.PayNCode) ';
        strSQL  := strSQL + ' AND (PT.RDelKbn = 0) ';   // <161> Add

// <168> 2007/08/17 H.Kawato Add Start
        // プロジェクト別支払採用なしの場合は標準情報のみ出力
        if (m_iProAdoptKbn = 0) then
            strSQL  := strSQL + ' AND (PT.PayPtnNo = 1) ';
// <168> 2007/08/17 H.Kawato Add End

        strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA HM1 ';
        strSQL  := strSQL + '  ON (HM1.RDelKbn = 0) ';
        strSQL  := strSQL + ' AND (HM1.SumKbn = 0) ';
        strSQL  := strSQL + ' AND (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn) + ')';
        strSQL  := strSQL + ' AND (HM1.NCode = PT.PrjNCode) ';
        strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA HM2 ';
        strSQL  := strSQL + '  ON (HM2.RDelKbn = 0) ';
        strSQL  := strSQL + ' AND (HM2.SumKbn = 0) ';
        strSQL  := strSQL + ' AND (HM2.MasterKbn = ' + IntToStr(m_iSubProjKbn) + ')';
        strSQL  := strSQL + ' AND (HM2.NCode = PT.PjSubNCode) ';
        strSQL  := strSQL + 'LEFT OUTER JOIN PayNayoseInfo PN ';
        strSQL  := strSQL + '  ON (PN.Masterkbn=22) ';
        strSQL  := strSQL + ' AND (MT.NCode=PN.PayNCode) ';
        strSQL  := strSQL + ' AND (PN.NayoseSyu=1) ';
        strSQL  := strSQL + ' AND (PN.RDelKbn = 0) ';   // <161> Add
        strSQL  := strSQL + 'WHERE  (MT.RDelKbn=0) ';
        strSQL  := strSQL + ' AND (MT.TemplateKbn=0) ';
        strSQL  := strSQL + ' AND (MT.SumKbn<>0 OR (MT.SumKbn=0 AND MT.HojyoKbn2=1)) ';
        strSQL  := strSQL + ' AND (ISNULL(MP.GaikaKbn, 0) <> 2) ';	// 外貨支払が外貨のみのデータを除く <222> ADD

        if uvHani.pvrRgType[0] = 1 then
        begin
// <171> 2008/01/15 H.Kawato Mod Start
//    		strSQL  := strSQL + 'AND MT.GCode >= ' + AnsiQuotedStr(uvHani.pvrStCode[0], '''');
//    		strSQL  := strSQL + 'AND MT.GCode <= ' + AnsiQuotedStr(uvHani.pvrEdCode[0], '''');
            if (uvHani.pvrStCode[0] <> '') then
        		strSQL  := strSQL + 'AND MT.GCode >= ' + AnsiQuotedStr(uvHani.pvrStCode[0], '''');
            if (uvHani.pvrEdCode[0] <> '') then
        		strSQL  := strSQL + 'AND MT.GCode <= ' + AnsiQuotedStr(uvHani.pvrEdCode[0], '''');
// <171> 2008/01/15 H.Kawato Mod End
        end;

// <161> 2007/07/06 H.Kawato Mod
{
		if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
			strSQL  := strSQL + 'ORDER BY MT.GCode, PT.PayPtnNo'
		else																			// 範囲指定: 1=連想順
			strSQL  := strSQL + 'ORDER BY MT.Renso, MT.GCode, PT.PayPtnNo';
}
		if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
			strSQL  := strSQL + 'ORDER BY MT.GCode, PrjGCode, PrjSubGCode '
		else																			// 範囲指定: 1=連想順
			strSQL  := strSQL + 'ORDER BY MT.Renso, MT.GCode, PrjGCode, PrjSubGCode ';
// <161> 2007/07/06 H.Kawato Mod

        SQL.Add(strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();

		CmnMemDataPrintDetail.Active	:= FALSE;
		CmnMemDataPrintDetail.Active	:= TRUE;

		while (not EOF) do
		begin
			CmnMemDataPrintDetail.Append ();

// <149> 2006/12/13 H.Kawato Add Start
            CmnMemDataPrintDetail.FieldByName ('nPrjAdoptKbn').AsInteger    := m_iProAdoptKbn;
            CmnMemDataPrintDetail.FieldByName ('nPjSubAdoptKbn').AsInteger  := m_iSubAdoptKbn;
// <149> 2006/12/13 H.Kawato Add End

			if	(FieldByName ('NayoseKbn').IsNull) then
				CmnMemDataPrintDetail.FieldByName ('strRecordClassDesc').Clear ()
			else
			begin
				case (FieldByName ('NayoseKbn').AsInteger) of
					1:		CmnMemDataPrintDetail.FieldByName ('strRecordClassDesc').AsString	:= '【名寄せ子】';
					2:		CmnMemDataPrintDetail.FieldByName ('strRecordClassDesc').AsString	:= '【名寄せ親】';
					else	CmnMemDataPrintDetail.FieldByName ('strRecordClassDesc').AsString	:= '';
				end;
			end;

   			strHojCode	  := FieldByName ('GCode').AsString;
            strDspHojCode := strHojCode;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

                strDspHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				strHojCode	  := Format ('%.16d',   [StrToInt64 (Trim (strHojCode))]);
			end;


			CmnMemDataPrintDetail.FieldByName ('grTag'         ).Assign (fnGetBitmapSelectedTag (FieldByName ('FusenKbn').AsInteger));
			CmnMemDataPrintDetail.FieldByName ('strHojCode'    ).AsString	:= strDspHojCode;
			CmnMemDataPrintDetail.FieldByName ('strAssociation').AsString	:= FieldByName ('Renso').AsString;
			CmnMemDataPrintDetail.FieldByName ('strName'       ).AsString	:= FieldByName ('NM' ).AsString;
			CmnMemDataPrintDetail.FieldByName ('strNameSimple' ).AsString	:= FieldByName ('NMK').AsString;

            if ( FieldByName ('SumKbn').AsInteger = 0 ) then
                    CmnMemDataPrintDetail.FieldByName ('nSumKbn' ).AsString	:=  '実在'
            else    CmnMemDataPrintDetail.FieldByName ('nSumKbn' ).AsString	:=  '合計';

			if	(m_nDateFormatDivision = 0) then										// 和暦/西暦区分: 0=和暦
				strFormat	:= 'ee/mm/dd'
			else																		// 和暦/西暦区分: 1=西暦
				strFormat	:= 'yyyy/mm/dd';

			if	(not FieldByName ('TStartDate').IsNull) then
				strAppDate	:= FormatDateTime (strFormat, FieldByName ('TStartDate').AsDateTime) + ' ～ '
			else
			begin
				if	(m_nDateFormatDivision = 0) then									// 和暦/西暦区分: 0=和暦
					strAppDate	:= '        '
				else
					strAppDate	:= '          ';

				strAppDate	:= strAppDate + ' ～';
			end;

			if	(not FieldByName ('TEndDate').IsNull) then
				strAppDate	:= strAppDate + FormatDateTime (strFormat, FieldByName ('TEndDate').AsDateTime);

			CmnMemDataPrintDetail.FieldByName ('strAppDate'  ).AsString		:= strAppDate;

// <144> 2006/08/08 H.Kawato Add Start
			CmnMemDataPrintDetail.FieldByName ('nSateiDivision').AsInteger	:= FieldByName ('SateiKbn').AsInteger;

			case (FieldByName ('SateiKbn').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '指定なし';              // <154> Add
				1:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '全体';
// <149> 2006/10/11 H.Kawato Mod
//				2:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '部門';
//				3:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '科目';
				2:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '部門別';
				3:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '科目別';
// <149> 2006/10/11 H.Kawato Mod
				4:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '明細';
				5:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= 'プロジェクト別';        // <149> Add
				6:		CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= 'プロジェクトサブ別';    // <149> Add
				else	CmnMemDataPrintDetail.FieldByName ('strSateiDivisionDesc').AsString	:= '';
			end;
// <144> 2006/08/08 H.Kawato Add End

// <170> 2007/12/13 H.Kawato Add Start
			CmnMemDataPrintDetail.FieldByName ('nSateiCalcKbn').AsInteger	:= FieldByName ('SateiCalcKbn').AsInteger;
   			CmnMemDataPrintDetail.FieldByName ('nSateiCalcValue').Clear;

			case (FieldByName ('SateiCalcKbn').AsInteger) of
				0:
                begin
                    CmnMemDataPrintDetail.FieldByName ('strSateiCalcKbnDesc'  ).AsString    := 'なし';
                    CmnMemDataPrintDetail.FieldByName ('strSateiCalcValueUnit').AsString    := '';
                end;
				1:
                begin
                	CmnMemDataPrintDetail.FieldByName ('strSateiCalcKbnDesc'  ).AsString    := '比率';
                    CmnMemDataPrintDetail.FieldByName ('strSateiCalcValueUnit').AsString    := '％';
        			CmnMemDataPrintDetail.FieldByName ('nSateiCalcValue'      ).AsCurrency  := FieldByName ('SateiCalc').AsCurrency;
                end;
				2:
                begin
                    CmnMemDataPrintDetail.FieldByName ('strSateiCalcKbnDesc').AsString	    := '定額';
                    CmnMemDataPrintDetail.FieldByName ('strSateiCalcValueUnit').AsString    := '円';
        			CmnMemDataPrintDetail.FieldByName ('nSateiCalcValue'      ).AsCurrency  := FieldByName ('SateiCalc').AsCurrency;
                end;
				else
                begin
                	CmnMemDataPrintDetail.FieldByName ('strSateiCalcKbnDesc').AsString	    := '';
                    CmnMemDataPrintDetail.FieldByName ('strSateiCalcValueUnit').AsString    := '';
                end;
			end;

//			CmnMemDataPrintDetail.FieldByName ('nSateiCalcValue').AsFloat	:= FieldByName ('SateiCalc').AsFloat;
// <170> 2007/12/13 H.Kawato Add End

			CmnMemDataPrintDetail.FieldByName ('nDecDivision').AsInteger	:= FieldByName ('BunkaiKbn').AsInteger;

			case (FieldByName ('BunkaiKbn').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldByName ('strDecDivisionDesc').AsString	:= '比率';
				1:		CmnMemDataPrintDetail.FieldByName ('strDecDivisionDesc').AsString	:= '定額';
				else	CmnMemDataPrintDetail.FieldByName ('strDecDivisionDesc').AsString	:= '';
			end;

// <149> 2006/10/11 H.Kawato Add Start
			CmnMemDataPrintDetail.FieldByName ('nDecPtnDivision').AsInteger	:= FieldByName ('BunkaiPtn').AsInteger;

			case (FieldByName ('BunkaiPtn').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldByName ('strDecPtnDivisionDesc').AsString := '標準';
				1:		CmnMemDataPrintDetail.FieldByName ('strDecPtnDivisionDesc').AsString := 'プロジェクト別';
				2:		CmnMemDataPrintDetail.FieldByName ('strDecPtnDivisionDesc').AsString := 'プロジェクトサブ別';
				3:		CmnMemDataPrintDetail.FieldByName ('strDecPtnDivisionDesc').AsString := '部門別';
				else	CmnMemDataPrintDetail.FieldByName ('strDecPtnDivisionDesc').AsString := '';
			end;

//			CmnMemDataPrintDetail.FieldByName ('strPrjHojyoName').AsString      := m_arAdoptInfo [36].strDescription;   // <154> Del
//			CmnMemDataPrintDetail.FieldByName ('strPrjSubHojyoName').AsString   := m_arAdoptInfo [37].strDescription;   // <154> Del

// <168> 2007/08/17 H.Kawato Add Start
            // プロジェクト別支払採用あり
            if (m_iProAdoptKbn > 0) then
            begin
    			CmnMemDataPrintDetail.FieldByName ('strPrjHojyoName').AsString  := m_arAdoptInfo [36].strDescription;

                // プロジェクトサブ別支払採用あり
                if (m_iSubAdoptKbn > 0) then
        			CmnMemDataPrintDetail.FieldByName ('strPrjSubHojyoName').AsString   := m_arAdoptInfo [37].strDescription
                else
        			CmnMemDataPrintDetail.FieldByName ('strPrjSubHojyoName').AsString   := '';
            end
            else
            begin
    			CmnMemDataPrintDetail.FieldByName ('strPrjHojyoName').AsString      := '';
    			CmnMemDataPrintDetail.FieldByName ('strPrjSubHojyoName').AsString   := '';
            end;
// <168> 2007/08/17 H.Kawato Add End

			if	(FieldByName ('PrjNCode').AsFloat = 0) then                     // ﾌﾟﾛｼﾞｪｸﾄ別支払 ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
			begin
				CmnMemDataPrintDetail.FieldByName ('strProjectCode'    ).Clear ();
				CmnMemDataPrintDetail.FieldbyName ('strProjectCodeDesc').Clear ();
//    			CmnMemDataPrintDetail.FieldByName ('strPrjHojyoName').AsString  := '標準';  // <154> Add    // <168> Del
			end
			else
			begin
//    			CmnMemDataPrintDetail.FieldByName ('strPrjHojyoName').AsString  := m_arAdoptInfo [36].strDescription;   // <154> Add    // <168> Del

                strHojCode	  := FieldByName ('PrjGCode').AsString;
                strDspHojCode := strHojCode;

                if	(m_arAdoptInfo [36].nCodeAttribute <= 1) then
                begin
                	case (m_arAdoptInfo [36].nCodeAttribute) of
// <222-1> MOD start
(*
                		0:	strFormat	:= '%'  + IntToStr (m_arAdoptInfo [37].nCodeDigit) + 'd';
                		1:	strFormat	:= '%.' + IntToStr (m_arAdoptInfo [37].nCodeDigit) + 'd';
*)
                		0:	strFormat	:= '%'  + IntToStr (m_arAdoptInfo [36].nCodeDigit) + 'd';
                		1:	strFormat	:= '%.' + IntToStr (m_arAdoptInfo [36].nCodeDigit) + 'd';
// <222-1> MOD end
                	end;

                    strDspHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                	strHojCode	  := Format ('%.16d',   [StrToInt64 (Trim (strHojCode))]);
                end;

				CmnMemDataPrintDetail.FieldByName ('strProjectCode'    ).AsString   := strDspHojCode;
				CmnMemDataPrintDetail.FieldbyName ('strProjectCodeDesc').AsString	:= FieldByName ('PrjName').AsString;
			end;

//			CmnMemDataPrintDetail.FieldByName ('strPrjSubHojyoName').AsString   := m_arAdoptInfo [37].strDescription;   // <154> Add    // <168> Del

			if	(FieldByName ('PrjSubNCode').AsFloat = 0) then                  // ﾌﾟﾛｼﾞｪｸﾄ別支払 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
			begin
				CmnMemDataPrintDetail.FieldByName ('strProjectSubCode'    ).Clear ();
				CmnMemDataPrintDetail.FieldbyName ('strProjectSubCodeDesc').Clear ();
			end
			else
			begin
                strHojCode	  := FieldByName ('PrjSubGCode').AsString;
                strDspHojCode := strHojCode;

                if	(m_arAdoptInfo [37].nCodeAttribute <= 1) then
                begin
                	case (m_nCurCodeAttribute) of
                		0:	strFormat	:= '%'  + IntToStr (m_arAdoptInfo [37].nCodeDigit) + 'd';
                		1:	strFormat	:= '%.' + IntToStr (m_arAdoptInfo [37].nCodeDigit) + 'd';
                	end;

                    strDspHojCode := Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
                	strHojCode	  := Format ('%.16d',   [StrToInt64 (Trim (strHojCode))]);
                end;

				CmnMemDataPrintDetail.FieldByName ('strProjectSubCode'    ).AsString    := strDspHojCode;
				CmnMemDataPrintDetail.FieldbyName ('strProjectSubCodeDesc').AsString	:= FieldByName ('PrjSubName').AsString;
			end;

			CmnMemDataPrintDetail.FieldByName ('nPriPayWay').AsInteger	:= FieldByName ('PriPayWay').AsInteger;

			case (FieldByName ('PriPayWay').AsInteger) of
// <189> Mod ↓↓↓
//				0:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= 'しない';
//				3:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= 'する';
				0:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= 'なし';
				1:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= '振込';
				2:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= '期日指定振込';
				3:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= '手形';
				4:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= '小切手';
				5:		CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= '現金';
				else	CmnMemDataPrintDetail.FieldByName ('strPriPayWayDesc').AsString	:= '';
// <189> Mod ↑↑↑
			end;
// <149> 2006/10/11 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Mod Start
//    		fnSetMemDataPrintPayPtnDtl	   (FieldByName ('NCode').AsFloat, FieldByName ('BunkaiKbn').AsInteger);
//    		fnSetMemDataPrintPayDetailInfo (FieldByName ('NCode').AsFloat);
    		fnSetMemDataPrintPayPtnDtl	   (FieldByName ('NCode').AsFloat, FieldByName ('PayPtnNo').AsFloat, FieldByName ('BunkaiKbn').AsInteger);

            for	nRow := 1 to 5 do
            begin
                CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseKingaku%.2d' , [nRow])).Clear ();
                CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseHiritu%.2d'  , [nRow])).Clear ();
                CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayHasuuKingaku%.2d', [nRow])).Clear ();
                CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayHasuuHou%.2d'    , [nRow])).Clear ();
                CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuDesc%.2d' , [nRow])).Clear ();
                CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWaySite%.2d'        , [nRow])).Clear ();
            end;

            if (FieldByName ('PriPayWay').AsInteger <> 0) then                  // 優先支払方法を採用している場合
                fnSetMemDataPrintPayDtlSyousai(FieldByName ('NCode').AsFloat, FieldByName ('PayPtnNo').AsFloat,
                                                FieldByName ('PriPayWay').AsInteger, FieldByName ('BunkaiKbn').AsInteger);

    		fnSetMemDataPrintPayDetailInfo (FieldByName ('NCode').AsFloat, FieldByName ('PayPtnNo').AsFloat);
// <149> 2006/10/11 H.Kawato Mod End

{// 保留
			case (FieldByName ('BunCode').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldbyName ('strClassCodeDesc').AsString	:= 'その他一般';
				1:		CmnMemDataPrintDetail.FieldbyName ('strClassCodeDesc').AsString	:= '連結子(親)会社';
				2:		CmnMemDataPrintDetail.FieldbyName ('strClassCodeDesc').AsString	:= '非連結子会社';
				3:		CmnMemDataPrintDetail.FieldbyName ('strClassCodeDesc').AsString	:= '関連会社';
				else	CmnMemDataPrintDetail.FieldbyName ('strClassCodeDesc').AsString	:= '';
			end;
}
// <149> 2006/10/11 H.Kawato Mod
//			fnSetMemDataPrintPayOffsetInfo (FieldByName ('NCode').AsFloat); // <107>
			fnSetMemDataPrintPayOffsetInfo (FieldByName ('NCode').AsFloat, FieldByName ('PayPtnNo').AsFloat);
// <149> 2006/10/11 H.Kawato Mod

// <149> 2006/10/11 H.Kawato Del Start
(*
			if	((FieldByName ('PostNo1').AsInteger = 0) and (FieldByName ('PostNo2').AsInteger = 0)) then
			begin
				CmnMemDataPrintDetail.FieldByName ('nZipCodeUpper').Clear ();
				CmnMemDataPrintDetail.FieldbyName ('nZipCodeLower').Clear ();
			end
			else
			begin
				CmnMemDataPrintDetail.FieldByName ('nZipCodeUpper').AsInteger	:= FieldByName ('PostNo1').AsInteger;
				CmnMemDataPrintDetail.FieldbyName ('nZipCodeLower').AsInteger	:= FieldByName ('PostNo2').AsInteger;
			end;

			CmnMemDataPrintDetail.FieldByName ('strAddressUpper').AsString	:= FieldbyName ('Ads1'   ).AsString;
			CmnMemDataPrintDetail.FieldByName ('strAddressLower').AsString	:= FieldbyName ('Ads2'   ).AsString;
			CmnMemDataPrintDetail.FieldByName ('strTelephoneNo' ).AsString	:= FieldbyName ('Tel1'   ).AsString;
			CmnMemDataPrintDetail.FieldByName ('strPostName'    ).AsString	:= FieldbyName ('SectionName').AsString;
			CmnMemDataPrintDetail.FieldByName ('strChargeName'  ).AsString	:= FieldbyName ('TanNM' ).AsString;

			case (FieldByName ('LetterKbn').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldByName ('strPasDivisionDesc').AsString	:= '標準';
				1:		CmnMemDataPrintDetail.FieldByName ('strPasDivisionDesc').AsString	:= '送付用';
				2:		CmnMemDataPrintDetail.FieldByName ('strPasDivisionDesc').AsString	:= '集金用';
                3:		CmnMemDataPrintDetail.FieldByName ('strPasDivisionDesc').AsString	:= 'その他';    // <129> 2006/05/02 H.Kawato Add
				else	CmnMemDataPrintDetail.FieldByName ('strPasDivisionDesc').AsString	:= '';
			end;

			if	(Trim (FieldByName ('TanNM').AsString) <> '') then
			begin

                CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').AsString
                            := FieldByName ('KeisyoKbn').AsString;
{
				case (FieldByName ('TitleKbn').AsInteger) of
					0:		CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').AsString	:= 'なし';
					1:		CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').AsString	:= '様';
					2:		CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').AsString	:= '殿';
					3:		CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').AsString	:= '御中';
					else	CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').AsString	:= '';
				end;
}
			end
			else
				CmnMemDataPrintDetail.FieldByName ('strResDivisionDesc').Clear ();
*)
// <149> 2006/10/11 H.Kawato Del End

{ 保留
			CmnMemDataPrintDetail.FieldByName ('nTaxCodeSales').AsInteger	:= FieldbyName ('STaxCode').AsInteger;

			case (FieldByName ('STaxRate').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldByName ('strTaxRateSalesDesc').AsString	:= '標準税率';
				1:		CmnMemDataPrintDetail.FieldByName ('strTaxRateSalesDesc').AsString	:= '３．０％';
				2:		CmnMemDataPrintDetail.FieldByName ('strTaxRateSalesDesc').AsString	:= '５．０％';
				else	CmnMemDataPrintDetail.FieldByName ('strTaxRateSalesDesc').AsString	:= '';
			end;

			CmnMemDataPrintDetail.FieldByName ('nTaxCodeStock').AsInteger	:= FieldbyName ('BTaxCode').AsInteger;

			case (FieldByName ('BTaxRate').AsInteger) of
				0:		CmnMemDataPrintDetail.FieldByName ('strTaxRateStockDesc').AsString	:= '標準税率';
				1:		CmnMemDataPrintDetail.FieldByName ('strTaxRateStockDesc').AsString	:= '３．０％';
				2:		CmnMemDataPrintDetail.FieldByName ('strTaxRateStockDesc').AsString	:= '５．０％';
				else	CmnMemDataPrintDetail.FieldByName ('strTaxRateStockDesc').AsString	:= '';
			end;

			fnCheckValidFundCodeEx (FieldByName ('SDebitCash').AsInteger, strDescription);

			CmnMemDataPrintDetail.FieldByName ('nFundCodeDeb'      ).AsInteger	:= FieldByName ('SDebitCash').AsInteger;
			CmnMemDataPrintDetail.FieldByName ('strFundCodeDebDesc').AsString	:= strDescription;

			fnCheckValidFundCodeEx (FieldByName ('SCreditCash').AsInteger, strDescription);

			CmnMemDataPrintDetail.FieldByName ('nFundCodeCre'      ).AsInteger	:= FieldByName ('SCreditCash').AsInteger;
			CmnMemDataPrintDetail.FieldByName ('strFundCodeCreDesc').AsString	:= strDescription;
}

{保留
			if	(FieldByName ('NayoseKbn').IsNull or (FieldByName ('NayoseKbn').AsInteger <> 1)) then
			begin
				CmnMemDataPrintDetail.FieldByName ('strParentCode'    ).Clear ();
				CmnMemDataPrintDetail.FieldByName ('strParentCodeDesc').Clear ();
			end
			else
			begin
				fnCheckValidHojCode (MASTER_CUSTOMER,
											FieldByName ('NayoseOya').AsString, strDescription, OPTION_GENERAL);

				strHojCode	:= FieldByName ('NayoseOya').AsString;

				if	(m_nCurCodeAttribute <= 1) then
				begin
					case (m_nCurCodeAttribute) of
						0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
						1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					end;

					strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;

				CmnMemDataPrintDetail.FieldByName ('strParentCode'    ).AsString	:= strHojCode;
				CmnMemDataPrintDetail.FieldByName ('strParentCodeDesc').AsString	:= strDescription;
			end;

			if	(Trim (FieldByName ('ChangeCode').AsString) = '') then
			begin
				CmnMemDataPrintDetail.FieldByName ('strSubstCode'    ).Clear ();
				CmnMemDataPrintDetail.FieldByName ('strSubstCodeDesc').Clear ();
			end
			else
			begin
				fnCheckValidHojCode (MASTER_CUSTOMER,
											FieldByName ('ChangeCode').AsString, strDescription, OPTION_GENERAL);

				strHojCode	:= FieldByName ('ChangeCode').AsString;

				if	(m_nCurCodeAttribute <= 1) then
				begin
					case (m_nCurCodeAttribute) of
						0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
						1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
					end;

					strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
				end;

				CmnMemDataPrintDetail.FieldByName ('strSubstCode'    ).AsString	:= strHojCode;
				CmnMemDataPrintDetail.FieldByName ('strSubstCodeDesc').AsString	:= strDescription;
			end;
}

// <149> 2006/10/11 H.Kawato Del Start
{
			for	nRow := 1 to 3 do
			begin
				if	(FieldByName ('PCloseDay' + IntToStr (nRow)).AsInteger = 0) then
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('nPlanClosingDay%.2d'       , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('nPlanExpectDay%.2d'        , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strPlanHolDivisionDesc%.2d', [nRow])).Clear ();
				end
				else
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('nPlanClosingDay%.2d', [nRow])).AsInteger	:=
															FieldByName ('PCloseDay' + IntToStr (nRow)).AsInteger;
					CmnMemDataPrintDetail.FieldByName (Format ('nPlanExpectDay%.2d' , [nRow])).AsInteger	:=
															FieldByName ('PayDay'    + IntToStr (nRow)).AsInteger;

					case (FieldByName ('PayMonth' + IntToStr (nRow)).AsInteger) of
						0:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '当月';
						1:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '翌月';
						2:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '翌々月';
						3:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '3ヶ月後';
						4:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '4ヶ月後';
						5:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '5ヶ月後';
						6:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '6ヶ月後';
						7:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '7ヶ月後';
						8:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '8ヶ月後';
						9:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '9ヶ月後';
						else	CmnMemDataPrintDetail.FieldByName (Format ('strPlanExpectMonthDesc%.2d', [nRow])).AsString	:= '';
					end;

					case (FieldByName ('PHolidayKbn' + IntToStr (nRow)).AsInteger) of
						0:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanHolDivisionDesc%.2d', [nRow])).AsString	:= '翌営業日';
						1:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanHolDivisionDesc%.2d', [nRow])).AsString	:= '前営業日';
						2:		CmnMemDataPrintDetail.FieldByName (Format ('strPlanHolDivisionDesc%.2d', [nRow])).AsString	:= '当日';
						else	CmnMemDataPrintDetail.FieldByName (Format ('strPlanHolDivisionDesc%.2d', [nRow])).AsString	:= '';
					end;
				end;
			end;
}
// <149> 2006/10/11 H.Kawato Del End

			CmnMemDataPrintDetail.Post ();

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();


end;

// <222> ADD start
//*****************************************************************************
//	Process			:	外貨情報の印刷データ作成
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnPrintCheckListGaika ();
var
	iKbn		  : Integer;
	iPayKbn		  : Integer;
	dqMasterData  : TMQuery;
	strHojCode	  : String;
    strDspHojCode : String;
    strSQL        : String;
    strBk		  : String;
    strGroup	  : String;
begin
	strGroup := '';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

    try
        with (dqMasterData) do
        begin
            Close ();

            strSQL  := strSQL + 'SELECT ';
            strSQL  := strSQL + ' MT.NCode, MT.GCode, MT.NM, ';	// 支払先
            strSQL  := strSQL + ' MP.GaikaKbn, GaiPayKbn, ';	// 外貨採用区分, 標準支払方法
            strSQL  := strSQL + ' PT.PayPtnNo, ';
            strSQL  := strSQL + ' HM1.NCode AS PrjNCode,';
            strSQL  := strSQL + ' HM1.GCode AS PrjGCode, ';		// プロジェクト
            strSQL  := strSQL + ' HM1.LongName AS PrjName, ';
			// 電信送金情報
            strSQL  := strSQL + ' PD11.AccNCode AS AccNCode11,';
            strSQL  := strSQL + ' PD11.FeeAccNCode AS FeeAccNCode11,';
            strSQL  := strSQL + ' PD11.ChargeFutan AS ChargeFutan11,';
            strSQL  := strSQL + ' PD11.ChargeKbn AS ChargeKbn11,';
            strSQL  := strSQL + ' PD11.EdiInfo AS EdiInfo11,';				// <222-8>ADD
            strSQL  := strSQL + ' PD11.PayHeadingNo AS PayHeadingNo11,';	// <222-8>ADD
            strSQL  := strSQL + ' PD11.SendPurpose AS SendPurpose11,';		// <222-8>ADD
            strSQL  := strSQL + ' PD11.PermLicenceNo AS PermLicenceNo11,';	// <222-8>ADD
            strSQL  := strSQL + ' PD11.PermDate AS PermDate11,';			// <222-8>ADD
			// 為替手形情報
            strSQL  := strSQL + ' PD13.AccNCode AS AccNCode13,';
			// 送金小切手情報
            strSQL  := strSQL + ' PD14.AccNCode AS AccNCode14,';
            strSQL  := strSQL + ' PD14.FeeAccNCode AS FeeAccNCode14,';
            strSQL  := strSQL + ' PD14.PayHeadingNo AS PayHeadingNo14,'; 	// <222-8>ADD
            strSQL  := strSQL + ' PD14.SendPurpose AS SendPurpose14,';		// <222-8>ADD
            strSQL  := strSQL + ' PD14.PermLicenceNo AS PermLicenceNo14,';	// <222-8>ADD
            strSQL  := strSQL + ' PD14.PermDate AS PermDate14,';			// <222-8>ADD
			// 可変項目情報
            strSQL  := strSQL + ' PV.ItemID,';
            strSQL  := strSQL + ' PVFB.SimpleName,';
            strSQL  := strSQL + ' PV.ItemValue ';

            strSQL  := strSQL + ' FROM MTOKUI MT ';
            strSQL  := strSQL + 'INNER JOIN MTOKUI_PAY MP ';
            strSQL  := strSQL + '  ON (MT.NCode=MP.BaseNCode) ';
            strSQL  := strSQL + 'LEFT OUTER JOIN PayPtnInfo PT ';
            strSQL  := strSQL + '  ON (PT.Masterkbn=22) ';
            strSQL  := strSQL + ' AND (MT.NCode=PT.PayNCode) ';
            strSQL  := strSQL + ' AND (PT.RDelKbn = 0) ';

            // プロジェクト別支払採用なしの場合は標準情報のみ出力
            if (m_iProAdoptKbn = 0) then
                strSQL  := strSQL + ' AND (PT.PayPtnNo = 1) ';

            strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA HM1 ';
            strSQL  := strSQL + '  ON (HM1.RDelKbn = 0) ';
            strSQL  := strSQL + ' AND (HM1.SumKbn = 0) ';
            strSQL  := strSQL + ' AND (HM1.MasterKbn = ' + IntToStr(m_iProjectKbn) + ')';
            strSQL  := strSQL + ' AND (HM1.NCode = PT.PrjNCode) ';
			// 支払詳細情報マスタ(電信送金情報)
            strSQL  := strSQL + 'LEFT OUTER JOIN PayDetailInfo PD11 ';
            strSQL  := strSQL + '  ON (MT.NCode = PD11.PayNCode) ';
            strSQL  := strSQL + ' AND (PT.PayPtnNo = PD11.PayPtnNo) ';
            strSQL  := strSQL + ' AND (PD11.MasterKbn = 22) ';
            strSQL  := strSQL + ' AND (PD11.ShiharaiSyubetu = 11) ';
            strSQL  := strSQL + ' AND (PD11.Edaban = 1) ';	// 1: 標準

			// 支払詳細情報マスタ(為替手形情報)
            strSQL  := strSQL + 'LEFT OUTER JOIN PayDetailInfo PD13 ';
            strSQL  := strSQL + '  ON (MT.NCode = PD13.PayNCode) ';
            strSQL  := strSQL + ' AND (PT.PayPtnNo = PD13.PayPtnNo) ';
            strSQL  := strSQL + ' AND (PD13.MasterKbn = 22) ';
            strSQL  := strSQL + ' AND (PD13.ShiharaiSyubetu = 13) ';
            strSQL  := strSQL + ' AND (PD13.Edaban = 1) ';	// 1: 標準

			// 支払詳細情報マスタ(為替手形情報)
            strSQL  := strSQL + 'LEFT OUTER JOIN PayDetailInfo PD14 ';
            strSQL  := strSQL + '  ON (MT.NCode = PD14.PayNCode) ';
            strSQL  := strSQL + ' AND (PT.PayPtnNo = PD14.PayPtnNo) ';
            strSQL  := strSQL + ' AND (PD14.MasterKbn = 22) ';
            strSQL  := strSQL + ' AND (PD14.ShiharaiSyubetu = 14) ';
            strSQL  := strSQL + ' AND (PD14.Edaban = 1) ';	// 1: 標準

			// 支払可変情報マスタ
            strSQL  := strSQL + 'LEFT OUTER JOIN PayVariableItem PV ';
            strSQL  := strSQL + '  ON (MT.NCode = PV.PayNCode) ';
            strSQL  := strSQL + ' AND (PT.PayPtnNo = PV.PayPtnNo) ';
            strSQL  := strSQL + ' AND (PV.MasterKbn = 22) ';
            strSQL  := strSQL + ' AND (PV.RecSyubetu = 11) ';
											// 内容が入力済みのレコードだけ
//            strSQL  := strSQL + ' AND ((PV.ItemValue IS NOT NULL) and (PV.ItemValue <> '''')) '; // <GAI-2> DEL
			// 海外送金可変項目
            strSQL  := strSQL + 'LEFT OUTER JOIN PayFbVariableItem PVFB ';
            strSQL  := strSQL + '  ON (PV.ItemID = PVFB.ID) ';

            strSQL  := strSQL + 'WHERE  (MT.RDelKbn=0) ';
            strSQL  := strSQL + ' AND (MT.TemplateKbn=0) ';
            strSQL  := strSQL + ' AND (MT.HojyoKbn2=1) ';
            strSQL  := strSQL + ' AND (ISNULL(MP.GaikaKbn, 0) <> 0) ';

            if uvHani.pvrRgType[0] = 1 then
            begin
                if (uvHani.pvrStCode[0] <> '') then
                    strSQL  := strSQL + 'AND MT.GCode >= ' + AnsiQuotedStr(uvHani.pvrStCode[0], '''');
                if (uvHani.pvrEdCode[0] <> '') then
                    strSQL  := strSQL + 'AND MT.GCode <= ' + AnsiQuotedStr(uvHani.pvrEdCode[0], '''');
            end;

// <222-4> MOD start
(*
            if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
                strSQL  := strSQL + 'ORDER BY MT.GCode, PrjGCode, PVFB.OrderNo, (IF (ISNULL(OrderNo, 0) = 0) THEN 999 ELSE PVFB.OrderNo ENDIF), PVFB.ID '
            else																			// 範囲指定: 1=連想順
                strSQL  := strSQL + 'ORDER BY MT.Renso, MT.GCode, PrjGCode, (IF (ISNULL(OrderNo, 0) = 0) THEN 999 ELSE PVFB.OrderNo ENDIF), PVFB.ID ';
*)
            if	(uvHani.pvrOrder = 0) then													// 範囲指定: 0=ｺｰﾄﾞ順
// <GAI-2> MOD-STR
//                strSQL  := strSQL + 'ORDER BY MT.GCode, PrjGCode, PVFB.OrderNo, (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE PVFB.OrderNo ENDIF), PVFB.ID '
                strSQL  := strSQL + 'ORDER BY MT.GCode, PrjGCode, (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE PVFB.OrderNo ENDIF), PVFB.ID '
// <GAI-2> MOD-END
            else																			// 範囲指定: 1=連想順
                strSQL  := strSQL + 'ORDER BY MT.Renso, MT.GCode, PrjGCode, (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE PVFB.OrderNo ENDIF), PVFB.ID ';
// <222-4> MOD end

            SQL.Add(strSQL);

            Open ();

            CmnMemDataPrintGaika.Active	:= FALSE;
            CmnMemDataPrintGaika.Active	:= TRUE;

            while (not EOF) do
            begin
                CmnMemDataPrintGaika.Append ();

                // プロジェクトマスタ名
                if (m_iProAdoptKbn > 0) then
                begin
                    CmnMemDataPrintGaika.FieldByName ('strPrjMasterName').AsString := m_arAdoptInfo [36].strDescription;
                end
                else
                begin
                	CmnMemDataPrintGaika.FieldByName ('strPrjMasterName').AsString := '';
                end;

				// 支払先
                strHojCode	  := FieldByName ('GCode').AsString;
                strDspHojCode := fnFormatDspCode(strHojCode, m_nCurCodeAttribute, m_nCurCodeDigit);

                CmnMemDataPrintGaika.FieldByName ('strCode').AsString	:= strDspHojCode;
                CmnMemDataPrintGaika.FieldByName ('strName').AsString	:= FieldByName ('NM' ).AsString;
                CmnMemDataPrintGaika.FieldByName ('strCodeName').AsString	:= strDspHojCode + ' ' + FieldByName ('NM' ).AsString;

				// プロジェクト
				if	(FieldByName ('PrjNCode').AsFloat = 0) then
				begin
					CmnMemDataPrintGaika.FieldbyName ('strPrjHojyoName').Clear ();
				end
				else
				begin
	                strHojCode	  := FieldByName ('PrjGCode').AsString;
	                strDspHojCode := fnFormatDspCode(strHojCode, m_arAdoptInfo [36].nCodeAttribute, m_arAdoptInfo [36].nCodeDigit);
                    CmnMemDataPrintGaika.FieldbyName ('strPrjHojyoCode').AsString := strDspHojCode;
					CmnMemDataPrintGaika.FieldbyName ('strPrjHojyoName').AsString := FieldByName ('PrjName').AsString;
                    CmnMemDataPrintGaika.FieldbyName ('strPrjHojyoCodeName').AsString	:= strDspHojCode + ' ' + FieldByName ('PrjName').AsString;
                end;

                // グループ用フィールド
                CmnMemDataPrintGaika.FieldByName ('strGroup').AsString :=
                		CmnMemDataPrintGaika.FieldByName ('strName'       ).AsString
                        + CmnMemDataPrintGaika.FieldbyName ('strPrjHojyoName').AsString;

                // < 可変項目情報 > 支払先(＋プロジェクト)がかわるまでは可変項目だけつめる
                // ID
                CmnMemDataPrintGaika.FieldByName ('ItemID').AsString := FieldByName('ItemID').AsString;
                // 項目名
                CmnMemDataPrintGaika.FieldByName ('SimpleName').AsString := FieldByName('SimpleName').AsString;
                // 内容
                CmnMemDataPrintGaika.FieldByName ('ItemValue').AsString := FieldByName('ItemValue').AsString;

                // カラムヘッダが変わったフラグセット
                if strGroup <> CmnMemDataPrintGaika.FieldByName ('strGroup').AsString then
                begin
                	CmnMemDataPrintGaika.FieldByName ('PayRec').AsInteger := 1;
                end
                else
                begin
                    CmnMemDataPrintGaika.FieldbyName ('strName').AsString := '';
                    CmnMemDataPrintGaika.FieldbyName ('strPrjHojyoName').AsString := '';
                	CmnMemDataPrintGaika.FieldByName ('PayRec').AsInteger := 0;

                    CmnMemDataPrintGaika.Post;
                    Next();
                    continue;
                end;

                strGroup := CmnMemDataPrintGaika.FieldByName ('strGroup').AsString;

				// 外貨採用区分
                iKbn	:= FieldByName ('GaikaKbn').AsInteger;
                case iKbn of
                    0:		strBk	:= '採用なし';
                    1:		strBk	:= '採用あり';
					2:		strBk	:= '外貨支払のみ';
                    else	strBk	:= '';
                end;
                CmnMemDataPrintGaika.FieldByName ('strInfo00GaikaUseDesc').AsString := IntToStr(iKbn) + ' ' + strBk;

				// 標準支払方法
                iPayKbn := FieldByName ('GaiPayKbn').AsInteger;
                case iPayKbn of
                    1:		strBk	:= '電信送金';
                    2:		strBk	:= '為替手形';
					4:		strBk	:= '送金小切手';
                    else	strBk	:= '';
                end;
                CmnMemDataPrintGaika.FieldByName ('strInfo00BasePaymentDesc').AsString := IntToStr(iPayKbn) + ' ' + strBk;

                // < 電信送金情報 >
                // 振込依頼口座コード
                fnSetPrintGaikaAccountInfo(FieldByName('AccNCode11').AsFloat, 9, 1);

                // 手数料口座コード
                fnSetPrintGaikaAccountInfo(FieldByName('FeeAccNCode11').AsFloat, 9, 2);


				// 手数料負担
                iKbn	:= FieldByName ('ChargeFutan11').AsInteger;
                case iKbn of
                    1:		strBk	:= '自社負担';
					2:		strBk	:= '他社負担';
                    else	strBk	:= '';
                end;
                CmnMemDataPrintGaika.FieldByName ('strInfo09ComDivisionDesc03').AsString := IntToStr(iKbn) + ' ' + strBk;

				// 手数料計算区分
                iKbn	:= FieldByName ('ChargeKbn11').AsInteger;

                case iKbn of
                    0:		strBk	:= '他銀行';
					1:		strBk	:= '関係銀行';
                    else	strBk	:= '';
                end;
                CmnMemDataPrintGaika.FieldByName ('strInfo09ComCalculationDesc04').AsString	:= IntToStr(iKbn) + ' ' + strBk;

                // <222-8>ADD↓
                // 取引先照会番号
                CmnMemDataPrintGaika.FieldByName ('strInfo09CustomerInquiryNo06').AsString	:= FieldByName ('EdiInfo11').AsString;

                // 送金目的-No
                if not FieldByName ('PayHeadingNo11').IsNull then
                	CmnMemDataPrintGaika.FieldByName ('strInfo09PayHeadingNo07').AsString	:= Format('%.4d',[FieldByName ('PayHeadingNo11').AsInteger]);

                // 送金目的-内容
                CmnMemDataPrintGaika.FieldByName ('strInfo09SendPurpose08').AsString		:= FieldByName ('SendPurpose11').AsString;

                // 送金許可-NO
                CmnMemDataPrintGaika.FieldByName ('strInfo09PermLicenceNo09').AsString		:= FieldByName ('PermLicenceNo11').AsString;

                // 送金許可-日付
                if (not FieldByName('PermDate11').IsNull) then
                begin
                    if m_nDateFormatDivision = 0 then	//和暦
                    begin
                        CmnMemDataPrintGaika.FieldByName ('strInfo09PermDate10').AsString :=
                            MjsDateCtrl.MjsGetGengou(MjsDateCtrl.MjsIntToDate(FieldByName('PermDate11').AsInteger,#0),MdtCMP_YMD)
                            + ' '
                            + FormatDateTime('ee/mm/dd',MjsDateCtrl.MjsIntToDate(FieldByName('PermDate11').AsInteger,#0));
                    end
                    else								//西暦
                    begin
                        CmnMemDataPrintGaika.FieldByName ('strInfo09PermDate10').AsString :=
                            FormatDateTime('yyyy/mm/dd',MjsDateCtrl.MjsIntToDate(FieldByName('PermDate11').AsInteger,#0));
                    end;
                end
                else
                begin
                	CmnMemDataPrintGaika.FieldByName ('strInfo09PermDate10').AsString := '';
                end;
                // <222-8>ADD↑

                // < 為替手形情報 >
				// 支払口座コード
                fnSetPrintGaikaAccountInfo(FieldByName('AccNCode13').AsFloat, 10, 1);

                // < 送金小切手情報 >
                // 依頼口座コード
                fnSetPrintGaikaAccountInfo(FieldByName('AccNCode14').AsFloat, 10, 2);
                // 手数料口座コード
                fnSetPrintGaikaAccountInfo(FieldByName('FeeAccNCode14').AsFloat, 10, 3);

                // <222-8>ADD↓
                // 送金目的-No
                if not FieldByName ('PayHeadingNo14').IsNull then
                	CmnMemDataPrintGaika.FieldByName ('strInfo10PayHeadingNo04').AsString	:= Format('%.4d',[FieldByName ('PayHeadingNo14').AsInteger]);

                // 送金目的-内容
                CmnMemDataPrintGaika.FieldByName ('strInfo10SendPurpose05').AsString		:= FieldByName ('SendPurpose14').AsString;

                // 送金許可-NO
                CmnMemDataPrintGaika.FieldByName ('strInfo10PermLicenceNo06').AsString		:= FieldByName ('PermLicenceNo14').AsString;

                // 送金許可-日付
                if (not FieldByName('PermDate14').IsNull) then
                begin
                    if m_nDateFormatDivision = 0 then	//和暦
                    begin
                        CmnMemDataPrintGaika.FieldByName ('strInfo10PermDate07').AsString :=
                            MjsDateCtrl.MjsGetGengou(MjsDateCtrl.MjsIntToDate(FieldByName('PermDate14').AsInteger,#0),MdtCMP_YMD)
                            + ' '
                            + FormatDateTime('ee/mm/dd',MjsDateCtrl.MjsIntToDate(FieldByName('PermDate14').AsInteger,#0));
                    end
                    else								//西暦
                    begin
                        CmnMemDataPrintGaika.FieldByName ('strInfo10PermDate07').AsString :=
                            FormatDateTime('yyyy/mm/dd',MjsDateCtrl.MjsIntToDate(FieldByName('PermDate14').AsInteger,#0));
                    end;
                end
                else
                begin
                	CmnMemDataPrintGaika.FieldByName ('strInfo10PermDate07').AsString := '';
                end;
                // <222-8>ADD↑

                CmnMemDataPrintGaika.Post ();

                NEXT;
            end;
        end;

    finally
        dqMasterData.Close ();
        dqMasterData.Free  ();
    end;
end;

//*****************************************************************************
//	Process			:	外貨情報の印刷データ作成
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	exNCode		: 口座内部コード
//					:   iAreaNo		: タブの番号
//					:	iFieldID	: タブ内のID
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnSetPrintGaikaAccountInfo (exNCode: Extended; iAreaNo: Integer; iFieldID: Integer);
var
	dqMasterData  	: TMQuery;
	strDescription	: String;
	strBk		  	: String;
    strFldCode		: String;
    strAccountKbn 	: String;
    strBankCode		: String;
    strBankName	  	: String;
    strDesc			: String;
begin
	{ MemDataのフィールド名 }
    strAccountKbn := Format('nInfo%.2dAccountKbn%.2d', [iAreaNo, iFieldID]);
    strBankCode := Format('nInfo%.2dAccountBank%.2d', [iAreaNo, iFieldID]);
    strFldCode := Format('nInfo%.2dAccountCode%.2d', [iAreaNo, iFieldID]);
    strBankName := Format('strInfo%.2dAccountBankName%.2d', [iAreaNo, iFieldID]);
    strDesc		:= Format('strInfo%.2dAccountCodeDesc%.2d', [iAreaNo, iFieldID]);

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	try
		with (dqMasterData) do
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('SELECT BankNCode, GCode, AccKbn, AccNo FROM AccInfo WHERE NCode = :nAccountCode AND RDelKbn = 0');

			ParamByName ('nAccountCode').AsFloat	:= exNCode;

			Open ();

			if	(not EOF) then
			begin
				strDescription := Format('%.4d', [FieldByName('GCode').AsInteger]);
				CmnMemDataPrintGaika.FieldByName(strBankCode).AsString := strDescription;

				fnCheckValidHojCode (MASTER_BANK, FieldByName ('BankNCode').AsFloat, strBk, OPTION_FROM_BANKNCODE);
                CmnMemDataPrintGaika.FieldByName(strBankName).AsString := strBk;

				strDescription := strDescription + ' ' + strBk;

	            case (FieldByName ('AccKbn').AsInteger) of
	                1:		strBk	:= '普通';
	                2:		strBk	:= '当座';
	                4:		strBk	:= '貯蓄';
	                9:		strBk	:= 'その他';
	                else	strBk	:= '';
	            end;
                CmnMemDataPrintGaika.FieldByName(strAccountKbn).AsString := strBk;

				strDescription := strDescription + ' ' + strBk;

				strBk := fnGetEditedAccountNumber (FieldByName ('AccNo').AsString);
				CmnMemDataPrintGaika.FieldByName(strFldCode).AsString := strBk;

				strDescription := strDescription + ' ' + strBk;
			end
			else
			begin
				strDescription := '';
			end;

			CmnMemDataPrintGaika.FieldByName(strDesc).AsString := strDescription;
		end;
	finally
		dqMasterData.Close ();
		dqMasterData.Free  ();
	end;
end;
// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnPrintCheckListSystem ();
var
	dqMasterData  : TMQuery;
	strFormat	  : String;
	strHojCode	  : String;
	strHojCodeSave: String;
	strDescription: String;

begin
	if	((m_cPrnSupport.iCommand <> PDLG_PRINT  ) and
		 (m_cPrnSupport.iCommand <> PDLG_PREVIEW) and (m_cPrnSupport.iCommand <> PDLG_FILE)) then
		Exit;

	if	(m_nCurCodeAttribute <= 1) then													// ｺｰﾄﾞ属性: 数字
	begin
		CmnReportSystemDBTextHojCode      .Alignment	:= taRightJustify;
		CmnReportSystemDBTextHojCodeParent.Alignment	:= taRightJustify;
	end
	else																				// ｺｰﾄﾞ属性: 文字
	begin
		CmnReportSystemDBTextHojCode      .Alignment	:= taLeftJustify;
		CmnReportSystemDBTextHojCodeParent.Alignment	:= taLeftJustify;
	end;

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	strHojCodeSave	:= '';

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT PayNCode, NayoseOyaNCode FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = 22 AND NayoseSyu = 1 AND NayoseKbn = 1 AND ');
		SQL.Add   ('       NayoseOyaNCode >= :strHojCodeStr AND NayoseOyaNCode <= :strHojCodeEnd ');
		SQL.Add   ('ORDER BY NayoseOyaNCode, PayNCode');

		ParamByName ('strHojCodeStr').AsString	:= m_strPrintHojCodeStr;				// 出力範囲: 支払先ｺｰﾄﾞ(開始)
		ParamByName ('strHojCodeEnd').AsString	:= m_strPrintHojCodeEnd;				// 出力範囲: 支払先ｺｰﾄﾞ(終了)

		Open ();

		CmnMemDataPrintSystem.Active	:= FALSE;
		CmnMemDataPrintSystem.Active	:= TRUE;

		while (not EOF) do
		begin
			if	((strHojCodeSave <> '') and
				 (CompareStr (FieldByName ('NayoseOyaNCode').AsString, strHojCodeSave) <> 0)) then
			begin
				CmnMemDataPrintSystem.Edit ();
				CmnMemDataPrintSystem.FieldByName ('nLineDivision').AsInteger	:= 1;
				CmnMemDataPrintSystem.Post ();

				strHojCodeSave	:= FieldByName ('NayoseOyaNCode').AsString;
			end
			else if	(strHojCodeSave = '') then
				strHojCodeSave	:= FieldByName ('NayoseOyaNCode').AsString;

			CmnMemDataPrintSystem.Append ();

			strHojCode	:= FieldByName ('GCode').AsString;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			fnCheckValidHojCode (MASTER_CUSTOMER, FieldByName ('PayNCode').AsFloat, strDescription, OPTION_GENERAL);

			CmnMemDataPrintSystem.FieldByName ('strHojCode'    ).AsString	:= strHojCode;
			CmnMemDataPrintSystem.FieldByName ('strHojCodeDesc').AsString	:= strDescription;

			strHojCode	:= FieldByName ('NayoseOyaNCode').AsString;

			if	(m_nCurCodeAttribute <= 1) then
			begin
				case (m_nCurCodeAttribute) of
					0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
					1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
				end;

				strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
			end;

			fnCheckValidHojCode (MASTER_CUSTOMER, FieldByName ('NayoseOyaNCode').AsFloat, strDescription, OPTION_GENERAL);

			CmnMemDataPrintSystem.FieldByName ('strHojCodeParent'    ).AsString	:= strHojCode;
			CmnMemDataPrintSystem.FieldByName ('strHojCodeParentDesc').AsString	:= strDescription;

			CmnMemDataPrintSystem.FieldByName ('nLineDivision').AsInteger	:= 0;

			CmnMemDataPrintSystem.Post ();

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnRebuildTreeViewItems ();
var
	pItemRec: PTreeViewRec;
	cNode	: TTreeNode;
	nCount	: Integer;

begin
	m_fUnderConstruction	:= TRUE;

	for	nCount := 1 to CmnTreeView.Items.Count do
		Dispose (CmnTreeView.Items [nCount - 1].Data);

	if	(CmnTreeView.Items.Count > 0) then
		CmnTreeView.Items [0].Delete ();

	New (pItemRec);

	pItemRec^.nItemDivision		:= TREE_SYSTEM;											// 支払先体系
	pItemRec^.strHojCode		:= _TreeSystemCode;
	pItemRec^.nNCODE    		:= _TreeSystemNCode;
	pItemRec^.strDescription	:= '支払先体系';

	cNode	:= CmnTreeView.Items.AddChildObject (nil, pItemRec^.strDescription, pItemRec);

	cNode.ImageIndex	:= TREE_INDEX_SYSTEM;
	cNode.SelectedIndex	:= cNode.ImageIndex + 1;

	fnCreateTreeViewItems (cNode);

	New (pItemRec);

	pItemRec^.nItemDivision		:= TREE_SYSTEM_SUM;										// 名寄せ体系
	pItemRec^.strHojCode		:= _TreeSystemCode;
	pItemRec^.nNCODE     		:= _TreeSystemNCode;
	pItemRec^.strDescription	:= '名寄せ体系';

	m_cNodeSumSystem	:= CmnTreeView.Items.AddChildObject (nil, pItemRec^.strDescription, pItemRec);

	m_cNodeSumSystem.ImageIndex		:= TREE_INDEX_SYSTEM_SUM;
	m_cNodeSumSystem.SelectedIndex	:= m_cNodeSumSystem.ImageIndex + 1;

	fnCreateTreeViewItemsEx (m_cNodeSumSystem);

	m_fUnderConstruction	:= FALSE;

//	cNode.Selected	:= TRUE;

	cNode           .Expand (TRUE);
	m_cNodeSumSystem.Expand (TRUE);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnResetChangeDataFlagOffsetRecords ();
begin
	fnSetChangeDataFlagCheckItems (CmnEdit05001SeqNo         , FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05002KmkCode       , FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05003HojCodeNumeric, FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05004HojCodeNumeric, FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05005HojCodeNumeric, FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05006TaxCode       , FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05007TaxRate       , FALSE);
	fnSetChangeDataFlagCheckItems (CmnEdit05008OffsetPrice   , FALSE);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnResetChangeFlagCheckItems ();
var
	nItems: Integer;

begin
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck		:= FALSE;
		PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData	:= FALSE;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnResetParentItemsInfo ();
var
	nDivision	  : Integer;
	nNCode  	  : Extended;
	strDescription: String;

begin
	if	((PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD    ) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_CHILD_SUM) or
		 (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision = TREE_GENERAL  )) then
	begin
		nDivision		:= PtreeViewRec (CmnTreeView.Selected.Parent.Data)^.nItemDivision;
		nNCode	    	:= PTreeViewRec (CmnTreeView.Selected.Parent.Data)^.nNCode;
		strDescription	:= PTreeViewRec (CmnTreeView.Selected.Parent.Data)^.strDescription;
	end
	else
	begin
		nDivision		:= PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision;
		nNCode	    	:= PTreeViewRec (CmnTreeView.Selected.Data)^.nNCode;
		strDescription	:= PTreeViewRec (CmnTreeView.Selected.Data)^.strDescription;
	end;

	fnSetParentItemsInfo (PTreeViewRec (CmnTreeView.Selected.Data)^.nItemDivision,
					PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode, nDivision, nNCode, strDescription);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSaveDecomposeListRecords ();
var
	nRow: Integer;

begin
	for	nRow := 1 to 5 do
		m_arDecListRec [nRow]	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnSearchRecordOffsetJournalInfo (): Boolean;
begin
	if	((CmnEdit05001SeqNo.AsInteger < 1) or (CmnEdit05001SeqNo.AsInteger > 10)) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	if	(CmnEdit05001SeqNo.AsInteger = 1) then
		CmnMemDataOffset.First ()
	else if (CmnEdit05001SeqNo.AsInteger = 10) then
		CmnMemDataOffset.Last ()
	else
		CmnMemDataOffset.RecNo	:= CmnEdit05001SeqNo.AsInteger;

	if	(not fnSetRecordOffsetJournalInfo ()) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSelectTreeViewItem (strHojCode: String);
var
	nCount: Integer;

begin
	for nCount := 0 to CmnTreeView.Items.Count - 1 do
	begin
		if	(CompareStr (PTreeViewRec (CmnTreeView.Items [nCount].Data)^.strHojCode, strHojCode) = 0) then
		begin
			CmnTreeView.Items [nCount].Selected	:= TRUE;
			Break;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetAttributeOffsetJournalInfo (nKmkCode: Integer);
var
	dqMasterData  : TMQuery;
	nPosition	  : Integer;
	nCount		  : Integer;
	nAdoption	  : Integer;
	nAttribute	  : Integer;
	nDigit		  : Integer;
	strDescription: String;
    nUse          : Integer;
    i             : Integer;
    lvMasterKbn   : Integer;
    fUse          : Boolean;
begin
    if (m_nPrjSubUnAdopt = 0) then                                                      // <150> 2006/11/02 H.Kawato Add    // if文の追加
    begin
        CmnEdit05003HojCodeNumeric.Value		:= 0;
        CmnEdit05004HojCodeNumeric.Value		:= 0;
        CmnEdit05005HojCodeNumeric.Value		:= 0;
        CmnEdit05003HojCodeNumeric.InputFlag	:= TRUE;
        CmnEdit05004HojCodeNumeric.InputFlag	:= TRUE;
        CmnEdit05005HojCodeNumeric.InputFlag	:= TRUE;
        CmnEdit05003HojCodeFree   .Text			:= '';
        CmnEdit05004HojCodeFree   .Text			:= '';
        CmnEdit05005HojCodeFree   .Text			:= '';
		m_nTaxKbn := 0;																	// <#TAX10> ADD
    end;                                                                                // <150> 2006/11/02 H.Kawato Add

	for	nCount := 0 to 2 do
	begin
		m_arCodeAttribute [nCount].nMasterDivision	:= 0;
		m_arCodeAttribute [nCount].nDigit			:= 6;
		m_arCodeAttribute [nCount].nAttribute		:= 0;
        m_arCodeAttribute [nCount].nPrjNCode        := 0;                               // <150> 2006/11/02 H.Kawato Add
        m_arCodeAttribute [nCount].nUse             := 0;                               // <158> 2007/02/13 H.Kawato Add
		m_arCodeAttribute [nCount].fEnabled			:= FALSE;
	end;

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
        SQL.Add   ('SELECT * ');
		SQL.Add   (' FROM   KmkMA ');
		SQL.Add   (' WHERE  MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND GCode = :nKmkCode');

		ParamByName ('nKmkCode').AsInteger	:= nKmkCode;

		Open ();

		if	(not EOF) then
		begin
            // 第一第二補助の採用ﾏｽﾀを取得 <107>
            fnGetHojyoMA(dqMasterData);

            // ***** 採用順序 *****
            // 科目別補助→部門→ｾｸﾞﾒﾝﾄ→第一補助→第二補助→工事 ×
            // 部門→工事→科目別補助→第一補助→第二補助→ｾｸﾞﾒﾝﾄ ○

			nPosition	:= 0;
			m_nTaxKbn := FieldByName ('TaxKbn').AsInteger;								// <#TAX10> ADD

            // 部門
			if	(nPosition <= 2) then
            begin
	    		fnGetAdoptInformation (MASTER_SECTION, nAdoption, nDigit, nAttribute, strDescription);

		    	if	(((FieldByName ('BmnUse').AsInteger <> 0) and (nAdoption <> 0)) and		// 部門採用区分: 1=あり
			    	 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
    			begin
	    			m_arCodeAttribute [nPosition].nMasterDivision	:= MASTER_SECTION;		// 部門
		    		m_arCodeAttribute [nPosition].nDigit			:= nDigit;
			    	m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
				    m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
				    m_arCodeAttribute [nPosition].nUse              := FieldByName ('BmnUse').AsInteger;    // <158> Add

    				if	(nAdoption = 1) then												// P/Lのみ採用
	    			begin
		    			if	(FieldByName ('BmnUse').AsInteger = 1) then
			    			m_arCodeAttribute [nPosition].nClassCode	:= 0
				    	else
					    	m_arCodeAttribute [nPosition].nClassCode	:= 3;
    				end
	    			else																	// B/S&P/L採用
		    		begin
			    		if	(FieldByName ('BPKbn').AsInteger = 0) then						// B/S科目
				    	begin
					    	if	(FieldByName ('BmnUse').AsInteger = 1) then
						    	m_arCodeAttribute [nPosition].nClassCode	:= 2
    						else
	    						m_arCodeAttribute [nPosition].nClassCode	:= 1;
		    			end
			    		else
				    	begin
					    	if	(FieldByName ('BmnUse').AsInteger = 1) then
        					    m_arCodeAttribute [nPosition].nClassCode	:= 0
						    else
		    					m_arCodeAttribute [nPosition].nClassCode	:= 3;
			    		end;
				    end;

	    			nPosition	:= nPosition + 1;
		    	end;
            end;

            fUse := False;                                                      // <150> 2006/11/02 H.Kawato Add
            lvMasterKbn := MASTER_CONSTRUCT;                                    // <150> 2006/11/02 H.Kawato Add

            // 工事/プロジェクト
			if	(nPosition <= 2) then
            begin
    			fnGetAdoptInformation (MASTER_CONSTRUCT, nAdoption, nDigit, nAttribute, strDescription);

                nUse := MASTER_CONSTRUCT - 200;
//                fUse := False;                                                // <150> 2006/11/02 H.Kawato Del

                // 工事採用
                if ( nUse >= 1) and ( nUse <= 10 ) then
                begin
// <158> 2007/02/13 H.Kawato Mod
//    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
    			    begin
        				m_arCodeAttribute [nPosition].nMasterDivision	:= MASTER_CONSTRUCT;
    	    			m_arCodeAttribute [nPosition].nDigit			:= nDigit;
    		    		m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
    			    	m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
    			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add

        				nPosition	:= nPosition + 1;
                        fUse := True;
                    end;
                end;

                // ﾌﾟﾛｼﾞｪｸﾄの先頭
                if fUse = False then
                begin
                    for i := 1 to 10 do
                    begin
                        lvMasterKbn := 200 + i;
                        if (lvMasterKbn <> MASTER_CONSTRUCT) then
                        begin
                            fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                            nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

// <158> 2007/02/13 H.Kawato Mod
//            		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
            		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
            			    begin
                				m_arCodeAttribute [nPosition].nMasterDivision	:= lvMasterKbn;
            	    			m_arCodeAttribute [nPosition].nDigit			:= nDigit;
            		    		m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
            			    	m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
            			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add

                				nPosition	:= nPosition + 1;
                                fUse := True;                                   // <150> 2006/11/02 H.Kawato Add
                                Break;
                            end;
                        end;
                    end;
                end;
            end;

// <150> 2006/11/02 H.Kawato Add Start
            // 工種/プロジェクトサブ
// <158> 2007/02/13 H.Kawato Mod    
//			if	(nPosition <= 2) and (m_nPrjSubUnAdopt < 2) then
			if	(nPosition <= 2) and (m_nPrjSubUnAdopt = 1) then
            begin
                if (fUse = True) then
                    lvMasterKbn := lvMasterKbn + 100
                else
                    lvMasterKbn := 0;

    			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                nUse := lvMasterKbn - 300;

                // 工種/プロジェクトサブの採用
                if ( nUse >= 1) and ( nUse <= 10 ) then
                begin
// <158> 2007/02/13 H.Kawato Mod
//    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
    			    begin
        				m_arCodeAttribute [nPosition].nMasterDivision	:= lvMasterKbn;
    	    			m_arCodeAttribute [nPosition].nDigit			:= nDigit;
    		    		m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
    			    	m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
    			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add

        				nPosition	:= nPosition + 1;
                    end;
                end;
            end;
// <150> 2006/11/02 H.Kawato Add End

            // 科目別補助
			if	(nPosition <= 2) then
            begin
    			fnGetAdoptInformation (MASTER_SUBJECTPLUS, nAdoption, nDigit, nAttribute, strDescription);

		    	if	((FieldByName ('SubKmkUse').AsInteger = 1) and (nAdoption <> 0)) then	// 科目別補助採用区分: 1=あり
			    begin
    				m_arCodeAttribute [nPosition].nMasterDivision	:= MASTER_SUBJECTPLUS;	// 科目別補助
	    			m_arCodeAttribute [nPosition].nDigit			:= FieldByName ('CodeDigit').AsInteger;
		    		m_arCodeAttribute [nPosition].nAttribute		:= FieldByName ('CodeAttr').AsInteger;
			    	m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
			    	m_arCodeAttribute [nPosition].nUse              := FieldByName ('SubKmkUse').AsInteger; // <158> Add

    				nPosition	:= nPosition + 1;
	    		end;
            end;

            // 第一補助
			if	(nPosition <= 2) then
			begin
    			fnGetAdoptInformation (MASTER_HOJYO1,nAdoption, nDigit, nAttribute, strDescription);
                if (MASTER_HOJYO1 <> 0) then
				begin
                    m_arCodeAttribute [nPosition].nMasterDivision	:= MASTER_HOJYO1;
                    m_arCodeAttribute [nPosition].nDigit			:= nDigit;
                    m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
                    m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
                    m_arCodeAttribute [nPosition].nUse              := MASTER_HOJYO1;   // <158> Add

                    nPosition	:= nPosition + 1;
				end;
			end;

            // 第二補助
			if	(nPosition <= 2) then
			begin
				fnGetAdoptInformation (MASTER_HOJYO2,nAdoption, nDigit, nAttribute, strDescription);
                if (MASTER_HOJYO2 <> 0) then
				begin
                    m_arCodeAttribute [nPosition].nMasterDivision	:= MASTER_HOJYO2;
                    m_arCodeAttribute [nPosition].nDigit			:= nDigit;
                    m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
                    m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
                    m_arCodeAttribute [nPosition].nUse              := MASTER_HOJYO2;   // <158> Add

                    nPosition	:= nPosition + 1;       // <139> 2006/08/03 H.Kawato Add
				end;
			end;

            // セグメント
			if	(nPosition <= 2) then
            begin
                for i := 1 to 10 do
                begin
                    lvMasterKbn := 100 + i;

    	    		fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                    nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

    		    	if	(((FIeldByName ('SegUse'+IntToStr(nUse)).AsInteger <> 0) and (nAdoption <> 0)) and	// ｾｸﾞﾒﾝﾄ採用区分: 1=あり
	    		    	 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
    	    		begin
    	    			m_arCodeAttribute [nPosition].nMasterDivision	:= lvMasterKbn;	        // ｾｸﾞﾒﾝﾄ
	    	    		m_arCodeAttribute [nPosition].nDigit			:= nDigit;
		    	    	m_arCodeAttribute [nPosition].nAttribute		:= nAttribute;
			    	    m_arCodeAttribute [nPosition].fEnabled			:= TRUE;
			    	    m_arCodeAttribute [nPosition].nUse              := FIeldByName ('SegUse'+IntToStr(nUse)).AsInteger; // <158> Add

        				if	(nAdoption = 1) then												// P/Lのみ採用
	        			begin
		        			if	(FieldByName ('SegUse'+IntToStr(nUse)).AsInteger = 1) then
			        			m_arCodeAttribute [nPosition].nClassCode	:= 0
				        	else
					        	m_arCodeAttribute [nPosition].nClassCode	:= 3;
        				end
	        			else																	// B/S&P/L採用
		        		begin
			        		if	(FieldByName ('BPKbn').AsInteger = 0) then						// B/S科目
				        	begin
					        	if	(FieldByName ('SegUse'+IntToStr(nUse)).AsInteger = 1) then
						        	m_arCodeAttribute [nPosition].nClassCode	:= 2
    						    else
    	    						m_arCodeAttribute [nPosition].nClassCode	:= 1;
	    	    			end
		    	    		else
			    	    	begin
				    	    	if	(FieldByName ('SegUse'+IntToStr(nUse)).AsInteger = 1) then
    				    			m_arCodeAttribute [nPosition].nClassCode	:= 0
	    				    	else
		    				    	m_arCodeAttribute [nPosition].nClassCode	:= 3;
    			    		end;
	    			    end;

//    			    	nPosition	:= nPosition + 1;
                        Break;
	    	    	end;
                end;
            end;

//			fnSetTaxOffsetJournalInfo (dqMasterData);   // <149> 2006/12/14 H.Kawato Del
		end;
		fnSetTaxOffsetJournalInfo (dqMasterData);       // <149> 2006/12/14 H.Kawato Add 科目が空の時消費税欄をクリアする
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	for	nCount := 3 to 5 do
	begin
		fnChangeConditionOffsetJournalInfo (nCount);

		if	((m_arCodeAttribute [nCount - 3].nMasterDivision = MASTER_SECTION  ) or
			 ((m_arCodeAttribute [nCount - 3].nMasterDivision >= 101) and
              (m_arCodeAttribute [nCount - 3].nMasterDivision <= 110))) then

			fnChangeConditionOffsetJournalInfoEx (nCount - 3);

		if	(m_arCodeAttribute [nCount - 3].nMasterDivision <> 0) then
			fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (
												Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nCount]))), TRUE);
	end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetAttributeOffsetJournalInfoPrint (nKmkNCode: Extended);
var
	dqMasterData  : TMQuery;
	nPosition	  : Integer;
	nCount		  : Integer;
	nAdoption	  : Integer;
	nAttribute	  : Integer;
	nDigit		  : Integer;
	strDescription: String;

    nUse          : Integer;
    i             : Integer;
    lvMasterKbn   : Integer;
    fUse          : Boolean;
begin
	for	nCount := 0 to 2 do
	begin
		m_arCodeAttributePrint [nCount].nMasterDivision	:= 0;
		m_arCodeAttributePrint [nCount].nDigit			:= 6;
		m_arCodeAttributePrint [nCount].nAttribute		:= 0;
        m_arCodeAttributePrint [nCount].nPrjNCode       := 0;                           // <158> 2007/02/13 H.Kawato Add
        m_arCodeAttributePrint [nCount].nUse            := 0;                           // <158> 2007/02/13 H.Kawato Add
		m_arCodeAttributePrint [nCount].fEnabled		:= FALSE;
	end;

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT * FROM KmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 1 AND SumKbn = 0 AND RDelKbn = 0 AND NCode = :nKmkNCode');

		ParamByName ('nKmkNCode').AsFloat	:= nKmkNCode;

		Open ();

		if	(not EOF) then
		begin
            // 第一第二補助の採用ﾏｽﾀを取得 <107>
            fnGetHojyoMA(dqMasterData);

			nPosition	:= 0;
			m_nTaxKbn := FieldByName ('TaxKbn').AsInteger;								// <#TAX10> ADD

            // ***** 採用順序 *****
            // 科目別補助→部門→ｾｸﾞﾒﾝﾄ→第一補助→第二補助→工事 ×
            // 部門→工事→科目別補助→第一補助→第二補助→ｾｸﾞﾒﾝﾄ ○


            // 部門採用区分
			fnGetAdoptInformation (MASTER_SECTION, nAdoption, nDigit, nAttribute, strDescription);
			if	(((FieldByName ('BmnUse').AsInteger <> 0) and (nAdoption <> 0)) and
				 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
			begin
				m_arCodeAttributePrint [nPosition].nMasterDivision	:= MASTER_SECTION;	// 部門
				m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
				m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
				m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
				m_arCodeAttributePrint [nPosition].nUse             := FieldByName ('BmnUse').AsInteger;    // <158> Add

				nPosition	:= nPosition + 1;
			end;

            fUse := False;                                                      // <150> 2006/11/02 H.Kawato Add
            lvMasterKbn := MASTER_CONSTRUCT;                                    // <150> 2006/11/02 H.Kawato Add

            // 工事プロジェクト
			if	(nPosition <= 2) then
            begin
    			fnGetAdoptInformation (MASTER_CONSTRUCT, nAdoption, nDigit, nAttribute, strDescription);

                nUse := MASTER_CONSTRUCT - 200;
//                fUse := False;                                                // <150> 2006/11/02 H.Kawato Del

                if ( nUse >= 1) and ( nUse <= 10 ) then
                begin
// <158> 2007/02/13 H.Kawato Mod
//    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
	    		    begin

                    //<122>  mod-start
    	    			m_arCodeAttributePrint [nPosition].nMasterDivision	:= MASTER_CONSTRUCT;
	    	    		m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
		    	    	m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
			    	    m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
			    	    m_arCodeAttributePrint [nPosition].nUse             := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add
                    //<122>  mod-end
        				nPosition	:= nPosition + 1;
                        fUse := True;
                    end;
                end;

                if fUse = False then
                begin
                    for i := 1 to 10 do
                    begin
                        lvMasterKbn := 200 + i;
                        if (lvMasterKbn <> MASTER_CONSTRUCT) then
                        begin
                            fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                            nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

// <158> 2007/02/13 H.Kawato Mod
//            		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
            		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
            			    begin

                            //<122> mod-start
                				m_arCodeAttributePrint [nPosition].nMasterDivision	:= lvMasterKbn;
            	    			m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
            		    		m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
            			    	m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
            			    	m_arCodeAttributePrint [nPosition].nUse             := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add
                            //<122>  mod-end
                				nPosition	:= nPosition + 1;
                                fUse := True;                                   // <150> 2006/11/02 H.Kawato Add
                                Break;
                            end;
                        end;
                    end;
                end;
            end;

// <150> 2006/11/02 H.Kawato Add Start
            // 工種プロジェクトサブ
// <158> 2007/02/13 H.Kawato Mod
//			if	(nPosition <= 2) then
			if	(nPosition <= 2) and (m_iPrintPartKbn >= 1) then                // 工種管理区分が採用ありの場合
            begin
                if (fUse = True) then
                    lvMasterKbn := lvMasterKbn + 100
                else
                    lvMasterKbn := 0;

    			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                nUse := lvMasterKbn - 300;

                if ( nUse >= 1) and ( nUse <= 10 ) then
                begin
// <158> 2007/02/13 H.Kawato Mod
//    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
    		    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
	    		    begin
    	    			m_arCodeAttributePrint [nPosition].nMasterDivision	:= lvMasterKbn;
	    	    		m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
		    	    	m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
			    	    m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
			    	    m_arCodeAttributePrint [nPosition].nUse             := FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger;   // <158> Add

        				nPosition	:= nPosition + 1;
                    end;
                end;
            end;
// <150> 2006/11/02 H.Kawato Add End

			if	(nPosition <= 2) then
            begin
                // 科目別補助採用区分
	    		fnGetAdoptInformation (MASTER_SUBJECTPLUS, nAdoption, nDigit, nAttribute, strDescription);

		    	if	((FieldByName ('SubKmkUse').AsInteger = 1) and (nAdoption <> 0)) then
			    begin
				    m_arCodeAttributePrint [nPosition].nMasterDivision	:= MASTER_SUBJECTPLUS;
	    			m_arCodeAttributePrint [nPosition].nDigit			:= FieldByName ('CodeDigit').AsInteger;
		    		m_arCodeAttributePrint [nPosition].nAttribute		:= FieldByName ('CodeAttr').AsInteger;
		    		m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
		    		m_arCodeAttributePrint [nPosition].nUse             := FieldByName ('SubKmkUse').AsInteger; // <158> Add

			    	nPosition	:= nPosition + 1;
    			end;
            end;


            // 補助1採用
			if	(nPosition <= 2) then
			begin
				fnGetAdoptInformation (MASTER_HOJYO1, nAdoption, nDigit, nAttribute, strDescription);
// <107>				if	(nAdoption <> 0) then
                if MASTER_HOJYO1 <> 0 then
				begin
					m_arCodeAttributePrint [nPosition].nMasterDivision	:= MASTER_HOJYO1;
					m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
					m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
					m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
					m_arCodeAttributePrint [nPosition].nUse             := MASTER_HOJYO1;   // <158> Add

					nPosition	:= nPosition + 1;
				end;
			end;

            // 補助2採用
			if	(nPosition <= 2) then
			begin
				fnGetAdoptInformation (MASTER_HOJYO2, nAdoption, nDigit, nAttribute, strDescription);
// <107>				if	(nAdoption <> 0) then
                if MASTER_HOJYO2 <> 0 then
				begin
					m_arCodeAttributePrint [nPosition].nMasterDivision	:= MASTER_HOJYO2;
					m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
					m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
					m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
					m_arCodeAttributePrint [nPosition].nUse             := MASTER_HOJYO2;   // <158> Add

                    nPosition	:= nPosition + 1;       // <139> 2006/08/03 H.Kawato Add
				end;
			end;

        	// ｾｸﾞﾒﾝﾄ採用区分
			if	(nPosition <= 2) then
			begin
                for i := 1 to 10 do
                begin
                    lvMasterKbn := 100 + i;

            		fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                    nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

		        	if	(((FIeldByName ('SegUse'+IntToStr(nUse)).AsInteger <> 0) and (nAdoption <> 0)) and
    			    	 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then
	    	    	begin
		    	    	m_arCodeAttributePrint [nPosition].nMasterDivision	:= lvMasterKbn;// ｾｸﾞﾒﾝﾄ
			    	    m_arCodeAttributePrint [nPosition].nDigit			:= nDigit;
    			    	m_arCodeAttributePrint [nPosition].nAttribute		:= nAttribute;
	    			    m_arCodeAttributePrint [nPosition].fEnabled			:= TRUE;
	    			    m_arCodeAttributePrint [nPosition].nUse             := FIeldByName ('SegUse'+IntToStr(nUse)).AsInteger; // <158> Add

//	    		    	nPosition	:= nPosition + 1;
                        Break;
     	    		end;
                end;
            end;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetChangeDataFlagCheckItems (Sender: TObject; fChangeFlag: Boolean);
var
	nFieldID: Integer;
	nItems	: Integer;

begin
	if	(Sender is TMComboBox) then
		nFieldID	:= StrToInt (Copy (TWinControl (Sender).Name, 12, 5))
	else
		nFieldID	:= StrToInt (Copy (TWinControl (Sender).Name,  8, 5));

	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID = nFieldID) then
		begin
			PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck		:= fChangeFlag;
			PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData	:= fChangeFlag;

			Break;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetChangeFlagCheckItems (Sender: TObject; fChangeFlag: Boolean);
var
	nFieldID: Integer;
	nItems	: Integer;

begin
	if	(Sender is TMComboBox) then
		nFieldID	:= StrToInt (Copy (TWinControl (Sender).Name, 12, 5))
	else
		nFieldID	:= StrToInt (Copy (TWinControl (Sender).Name,  8, 5));

	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID = nFieldID) then
		begin
			PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck	:= fChangeFlag;

			if	(fChangeFlag and (nFieldID <> 5001)) then
				PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData	:= fChangeFlag;

// <170> 2007/12/13 H.Kawato Mod Start
{
// <133> 2006/06/19 H.Kawato Add Start
// <149> 2006/10/11 H.Kawato Mod
//			if	(fChangeFlag and (nFieldID = 1029)) then                                // 査定方法
			if	(fChangeFlag and (nFieldID = 0011)) then                                // 査定方法
				m_iSateiChgKbn := 1;
// <133> 2006/06/19 H.Kawato Add End
}
			if	(fChangeFlag) and
                ((nFieldID = 0011) or       // 査定方法
                 (nFieldID = 0017) or       // 次回繰越額計算
                 (nFieldID = 0018)) then    // 次回繰越額計算値
				m_iSateiChgKbn := 1;
// <170> 2007/12/13 H.Kawto Mod End
			Break;
		end;
	end;

// <147> 2006/08/17 H.Kawato Del  //CmnEdit00002Association は不使用の為コメントとする
//	if	((not m_fSetOffsetJournal) and ((nFieldID >= 5002) and (nFieldID <= 5008))) then
//		fnSetChangeFlagCheckItems (CmnEdit00002Association, TRUE);						// 連想 (仮)
// <147> 2006/08/17 H.Kawato Del
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetCommissionCalculateDivision (nAreaNo: Integer; pRecord: Pointer);
var
	cNumEdit	  : TMNumEdit;
	pPayInfoData  : ^PayInfoData;
	nComCalc	  : Integer;
	strDescription: String;

begin
	if	(m_fReadInformations) then
		Exit;

// <211> MOD-STR
//	if	(nAreaNo = 4) then
// <222> MOD start
//	if	(nAreaNo in [4, 8]) then
	if	(nAreaNo in [4, 8, 9, 10]) then
    // <222> MOD end
// <211> MOD-END
		Exit;

	pPayInfoData	:= pRecord;

	nComCalc	:= 0;

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBankCode', [nAreaNo, 2])));

	if	(pPayInfoData^.nBankCode = cNumEdit.AsInteger) then								// 同銀行
	begin
		nComCalc	:= nComCalc + 1;
		cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dBranchCode', [nAreaNo, 3])));

		if	(pPayInfoData^.nBranchCode = cNumEdit.AsInteger) then						// 同支店
			nComCalc	:= nComCalc + 1;
	end;

	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit%.2d%.3dComCalculation', [nAreaNo, 16])));

	cNumEdit.Value	:= nComCalc;														// 手数料計算区分

	fnGetDescriptionSelectedItem (cNumEdit, strDescription);

	TMLabel (MJSFindCtrl (Self, Format ('CmnLabel%.2d%.3dComCalculationDesc', [nAreaNo, 16]))).Caption	:= strDescription;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnSetMasterInfoData (): Boolean;
var
	dqMasterInfo   : TMQuery;
	nItemPosition  : Integer;
    nMasterDivision: Integer;

begin
	nMasterDivision	:= 0;

//<114>	for	nItemPosition := 0 to 15 do
//<149>	for	nItemPosition := 0 to 35 do
	for	nItemPosition := 0 to 47 do
	begin
		case (nItemPosition) of
			 0:	nMasterDivision	:= MASTER_SUBJECT;										// 勘定科目
			 1:	nMasterDivision	:= MASTER_SUBJECTPLUS;									// 細目科目
			 2:	nMasterDivision	:= MASTER_BANK;											// 銀行
			 3:	nMasterDivision	:= MASTER_CUSTOMER;										// 取引先
			 4:	nMasterDivision	:= MASTER_STAFF;										// 社員
			 5:	nMasterDivision	:= MASTER_GENERAL01;									// 汎用補助①
			 6:	nMasterDivision	:= MASTER_GENERAL02;									// 汎用補助②
			 7:	nMasterDivision	:= MASTER_GENERAL03;									// 汎用補助③
			 8:	nMasterDivision	:= MASTER_GENERAL04;									// 汎用補助④
			 9:	nMasterDivision	:= MASTER_GENERAL05;									// 汎用補助⑤
			10:	nMasterDivision	:= MASTER_SECTION;										// 部門
            16:	nMasterDivision	:= MKBN_PROJECT1;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            17:	nMasterDivision	:= MKBN_PROJECT2;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            18:	nMasterDivision	:= MKBN_PROJECT3;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            19:	nMasterDivision	:= MKBN_PROJECT4;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            20:	nMasterDivision	:= MKBN_PROJECT5;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            21:	nMasterDivision	:= MKBN_PROJECT6;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            22:	nMasterDivision	:= MKBN_PROJECT7;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            23:	nMasterDivision	:= MKBN_PROJECT8;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            24:	nMasterDivision	:= MKBN_PROJECT9;										// <114>ﾌﾟﾛｼﾞｪｸﾄ
            25:	nMasterDivision	:= MKBN_PROJECT10;										// <114>ﾌﾟﾛｼﾞｪｸﾄ

            26:	nMasterDivision	:= MKBN_SEG1;										    // <114>ｾｸﾞﾒﾝﾄ
            27:	nMasterDivision	:= MKBN_SEG2;										    // <114>ｾｸﾞﾒﾝﾄ
            28:	nMasterDivision	:= MKBN_SEG3;										    // <114>ｾｸﾞﾒﾝﾄ
            29:	nMasterDivision	:= MKBN_SEG4;										    // <114>ｾｸﾞﾒﾝﾄ
            30:	nMasterDivision	:= MKBN_SEG5;										    // <114>ｾｸﾞﾒﾝﾄ
            31:	nMasterDivision	:= MKBN_SEG6;										    // <114>ｾｸﾞﾒﾝﾄ
            32:	nMasterDivision	:= MKBN_SEG7;									    	// <114>ｾｸﾞﾒﾝﾄ
            33:	nMasterDivision	:= MKBN_SEG8;									    	// <114>ｾｸﾞﾒﾝﾄ
            34:	nMasterDivision	:= MKBN_SEG9;								    		// <114>ｾｸﾞﾒﾝﾄ
            35:	nMasterDivision	:= MKBN_SEG10;							    			// <114>ｾｸﾞﾒﾝﾄ

            36:	nMasterDivision	:= m_iProjectKbn;						    			// <149>ﾌﾟﾛｼﾞｪｸﾄ別支払 ﾌﾟﾛｼﾞｪｸﾄ区分
            37:	nMasterDivision	:= m_iSubProjKbn;						    			// <149>ﾌﾟﾛｼﾞｪｸﾄ別支払 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ

            38:	nMasterDivision	:= MKBN_PROSUB1;									    // <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            39:	nMasterDivision	:= MKBN_PROSUB2;									    // <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            40:	nMasterDivision	:= MKBN_PROSUB3;									    // <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            41:	nMasterDivision	:= MKBN_PROSUB4;									    // <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            42:	nMasterDivision	:= MKBN_PROSUB5;									    // <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            43:	nMasterDivision	:= MKBN_PROSUB6;									    // <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            44:	nMasterDivision	:= MKBN_PROSUB7;								    	// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            45:	nMasterDivision	:= MKBN_PROSUB8;								    	// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            46:	nMasterDivision	:= MKBN_PROSUB9;							    		// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
            47:	nMasterDivision	:= MKBN_PROSUB10;						    			// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
		end;

//        if nItemPosition = 11  then  nMasterDivision	:= MASTER_SEGMENT;              // ｾｸﾞﾒﾝﾄ
        if nItemPosition = 15  then  nMasterDivision	:= MASTER_CONSTRUCT;            // 工事

		m_arAdoptInfo [nItemPosition].nMasterDivision	:= nMasterDivision;
		m_arAdoptInfo [nItemPosition].nAdoption			:= 0;
		m_arAdoptInfo [nItemPosition].nCodeDigit		:= 6;
		m_arAdoptInfo [nItemPosition].nCodeAttribute	:= 0;

		case (nItemPosition) of
			 0:	m_arAdoptInfo [nItemPosition].strDescription	:= '勘定科目';
			 1:	m_arAdoptInfo [nItemPosition].strDescription	:= '科目別補助';
			 2:	m_arAdoptInfo [nItemPosition].strDescription	:= '銀行';
			 3:	m_arAdoptInfo [nItemPosition].strDescription	:= '取引先';
			 4:	m_arAdoptInfo [nItemPosition].strDescription	:= '社員';
			 5:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助1';
			 6:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助2';
			 7:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助3';
			 8:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助4';
			 9:	m_arAdoptInfo [nItemPosition].strDescription	:= '汎用補助5';
			10:	m_arAdoptInfo [nItemPosition].strDescription	:= '部門';
			11:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント';
			15:	m_arAdoptInfo [nItemPosition].strDescription	:= '工事';

			16:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト１';    //<114>
			17:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト２';    //<114>
			18:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト３';    //<114>
			19:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト４';    //<114>
			20:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト５';    //<114>
			21:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト６';    //<114>
			22:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト７';    //<114>
			23:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト８';    //<114>
			24:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト９';    //<114>
			25:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト１０';  //<114>

			26:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント１';      //<114>
			27:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント２';      //<114>
			28:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント３';      //<114>
			29:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント４';      //<114>
			30:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント５';      //<114>
			31:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント６';      //<114>
			32:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント７';      //<114>
			33:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント８';      //<114>
			34:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント９';      //<114>
			35:	m_arAdoptInfo [nItemPosition].strDescription	:= 'セグメント１０';    //<114>

			36:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクト区分';      //<149>
			37:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ区分';  //<149>

			38:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ１';    //<150>
			39:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ２';    //<150>
			40:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ３';    //<150>
			41:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ４';    //<150>
			42:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ５';    //<150>
			43:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ６';    //<150>
			44:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ７';    //<150>
			45:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ８';    //<150>
			46:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ９';    //<150>
			47:	m_arAdoptInfo [nItemPosition].strDescription	:= 'プロジェクトサブ１０';  //<150>
		end;
	end;

	dqMasterInfo	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);							// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr FROM MasterInfo ORDER BY MasterKbn');

		Open ();

		while (not EOF) do
		begin
			nItemPosition	:= -1;

			case (FieldByName ('MasterKbn').AsInteger) of
				MASTER_SUBJECT      : nItemPosition	:= 0;                               // 勘定科目
				MASTER_SUBJECTPLUS  : nItemPosition	:= 1;								// 細目科目
				MASTER_BANK         : nItemPosition	:= 2;								// 銀行
				MASTER_CUSTOMER     : nItemPosition	:= 3;								// 取引先
				MASTER_STAFF        : nItemPosition	:= 4;								// 社員
				MASTER_GENERAL01    : nItemPosition	:= 5;								// 汎用補助①
				MASTER_GENERAL02    : nItemPosition	:= 6;								// 汎用補助②
				MASTER_GENERAL03    : nItemPosition	:= 7;								// 汎用補助③
				MASTER_GENERAL04    : nItemPosition	:= 8;								// 汎用補助④
				MASTER_GENERAL05    : nItemPosition	:= 9;								// 汎用補助⑤
				MASTER_SECTION      : nItemPosition	:= 10;								// 部門
                MKBN_PROJECT1       : nItemPosition	:= 16;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT2       : nItemPosition	:= 17;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT3       : nItemPosition	:= 18;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT4       : nItemPosition	:= 19;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT5       : nItemPosition	:= 20;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT6       : nItemPosition	:= 21;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT7       : nItemPosition	:= 22;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT8       : nItemPosition	:= 23;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT9       : nItemPosition	:= 24;								// <114>ﾌﾟﾛｼﾞｪｸﾄ
                MKBN_PROJECT10      : nItemPosition	:= 25;								// <114>ﾌﾟﾛｼﾞｪｸﾄ

                MKBN_SEG1           : nItemPosition	:= 26;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG2           : nItemPosition	:= 27;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG3           : nItemPosition	:= 28;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG4           : nItemPosition	:= 29;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG5           : nItemPosition	:= 30;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG6           : nItemPosition	:= 31;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG7           : nItemPosition	:= 32;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG8           : nItemPosition	:= 33;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG9           : nItemPosition	:= 34;								// <114>ｾｸﾞﾒﾝﾄ
                MKBN_SEG10          : nItemPosition	:= 35;								// <114>ｾｸﾞﾒﾝﾄ

                MKBN_PROSUB1        : nItemPosition	:= 38;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB2        : nItemPosition	:= 39;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB3        : nItemPosition	:= 40;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB4        : nItemPosition	:= 41;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB5        : nItemPosition	:= 42;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB6        : nItemPosition	:= 43;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB7        : nItemPosition	:= 44;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB8        : nItemPosition	:= 45;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB9        : nItemPosition	:= 46;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                MKBN_PROSUB10       : nItemPosition	:= 47;								// <150>ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ

			end;

//            if (GetFld ('MasterKbn').AsInteger) = MASTER_SEGMENT    then  nItemPosition	:= 11; // ｾｸﾞﾒﾝﾄ
            if (GetFld ('MasterKbn').AsInteger) = MASTER_CONSTRUCT  then  nItemPosition	:= 15;  // 工事

            if (GetFld ('MasterKbn').AsInteger) = m_iProjectKbn  then  nItemPosition	:= 36;  // <149>ﾌﾟﾛｼﾞｪｸﾄ別支払 ﾌﾟﾛｼﾞｪｸﾄ区分

            if (GetFld ('MasterKbn').AsInteger) = m_iSubProjKbn  then  nItemPosition	:= 37;  // <149>ﾌﾟﾛｼﾞｪｸﾄ別支払 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ

			if	(nItemPosition >= 0) then
			begin
				m_arAdoptInfo [nItemPosition].nAdoption			:= FieldByName ('UseKbn'   ).AsInteger;
				m_arAdoptInfo [nItemPosition].nCodeDigit		:= FieldByName ('CodeDigit').AsInteger;
				m_arAdoptInfo [nItemPosition].nCodeAttribute	:= FieldByName ('CodeAttr' ).AsInteger;

				if	((FieldByName ('JHojyoName').AsString <> '') and
					 (FieldByName ('MasterKbn').AsInteger <> MASTER_SUBJECTPLUS)) then
					m_arAdoptInfo [nItemPosition].strDescription	:= FieldByName ('JHojyoName').AsString;
			end;

			NEXT;
		end;
	end;

// <149> 2006/10/11 H.Kawato Add Start
    if (m_arAdoptInfo [15].nAdoption <> 0) then
    begin
        for	nItemPosition := 16 to 25 do
        begin
            if (m_arAdoptInfo [nItemPosition].nMasterDivision = m_arAdoptInfo [15].nMasterDivision) then
            begin
                m_arAdoptInfo [nItemPosition].nAdoption			:= m_arAdoptInfo [15].nAdoption;
                m_arAdoptInfo [nItemPosition].nCodeDigit		:= m_arAdoptInfo [15].nCodeDigit;
                m_arAdoptInfo [nItemPosition].nCodeAttribute	:= m_arAdoptInfo [15].nCodeAttribute;
                m_arAdoptInfo [nItemPosition].strDescription	:= m_arAdoptInfo [15].strDescription;
                break;
            end;
        end;
    end;

    if (m_arAdoptInfo [36].nAdoption <> 0) then
    begin
        for	nItemPosition := 15 to 25 do
        begin
            if (m_arAdoptInfo [nItemPosition].nMasterDivision = m_arAdoptInfo [36].nMasterDivision) then
            begin
                m_arAdoptInfo [nItemPosition].nAdoption			:= m_arAdoptInfo [36].nAdoption;
                m_arAdoptInfo [nItemPosition].nCodeDigit		:= m_arAdoptInfo [36].nCodeDigit;
                m_arAdoptInfo [nItemPosition].nCodeAttribute	:= m_arAdoptInfo [36].nCodeAttribute;
                m_arAdoptInfo [nItemPosition].strDescription	:= m_arAdoptInfo [36].strDescription;
            end;
        end;
    end;

    if (m_arAdoptInfo [37].nAdoption <> 0) then 
    begin
        for	nItemPosition := 38 to 47 do
        begin
            if (m_arAdoptInfo [nItemPosition].nMasterDivision = m_arAdoptInfo [37].nMasterDivision) then
            begin
                m_arAdoptInfo [nItemPosition].nAdoption			:= m_arAdoptInfo [37].nAdoption;
                m_arAdoptInfo [nItemPosition].nCodeDigit		:= m_arAdoptInfo [37].nCodeDigit;
                m_arAdoptInfo [nItemPosition].nCodeAttribute	:= m_arAdoptInfo [37].nCodeAttribute;
                m_arAdoptInfo [nItemPosition].strDescription	:= m_arAdoptInfo [37].strDescription;
                break;
            end;
        end;
    end;
// <149> 2006/10/11 H.Kawato Add End

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

    // 取引先採用ﾁｪｯｸ
	if	(m_arAdoptInfo [3].nAdoption = 0) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataOffsetRecord ();
var
	nFieldID: Integer;
    strHojCode : String;
begin
	if	((CmnEdit05001SeqNo.AsInteger < 1) or (CmnEdit05001SeqNo.AsInteger > 10)) then
		Exit;

//    if CmnEdit05002KmkCode.value = 0 then
//        Exit;

//	CmnMemDataOffset.First ();

//	while (not CmnMemDataOffset.Eof) do
//	begin
//		if	(not VarIsNull (CmnMemDataOffset.FieldValues ['nSeqNo'])) then
//		begin
//			if	(Trunc (CmnMemDataOffset.FieldValues ['nSeqNo']) = CmnEdit05001SeqNo.AsInteger) then
//				Break;
//		end;

//		CmnMemDataOffset.Next ();
//	end;

	CmnMemDataOffset.Edit ();

	if	(CmnEdit05002KmkCode.InputFlag) then
		CmnMemDataOffset.FieldByName ('nKmkCode').Clear ()
	else
		CmnMemDataOffset.FieldByName ('nKmkCode').AsInteger	:= CmnEdit05002KmkCode.AsInteger;

	CmnMemDataOffset.FieldByName ('dKmkNCode').AsFloat	:= m_dSousaiNCode[0];	// <175> Add
	CmnMemDataOffset.FieldByName ('strKmkDesc').AsString	:= CmnEdit05002KmkCodeDesc.Text;

	for	nFieldID := 3 to 5 do
	begin
		CmnMemDataOffset.FieldByName (Format ('nDivision%.2d', [nFieldID - 2])).AsInteger	:=
																m_arCodeAttribute [nFieldID - 3].nMasterDivision;
// <175> Add
		CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nFieldID - 2])).AsFloat	:=
																m_dSousaiNCode [nFieldID - 2];
// <175> Add

{
		if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then						// ｺｰﾄﾞ属性: 数字
		begin
			if	(TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).InputFlag) then
				CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString	:= ''
			else
    			CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString	:=
					Format ('%.16d', [Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).Value)]);

		end
		else
			CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString	:=
							TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree', [nFieldID]))).Text;

		CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nFieldID - 2])).AsString	:=
							TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text;
}


		if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then						// ｺｰﾄﾞ属性: 数字
		begin
			if	(TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).InputFlag) then
				StrHojCode	:= ''
			else
    			StrHojCode	:= 	Format ('%.16d', [Trunc (TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).Value)]);

		end
		else
			StrHojCode	:=	TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree', [nFieldID]))).Text;


        CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString   := StrHojCode;

        if StrHojCode = '' then
    		CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nFieldID - 2])).AsString	:=''
        else
    		CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nFieldID - 2])).AsString	:=
	    						TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text;

// <150> 2006/11/02 H.Kawato Add Start 
        if  (m_arCodeAttribute [nFieldID - 3].nMasterDivision >= 201) and
            (m_arCodeAttribute [nFieldID - 3].nMasterDivision <= 210) then
        begin
            CmnMemDataOffset.FieldByName ('nPrjNCode').AsFloat       := m_arCodeAttribute [nFieldID - 3].nPrjNCode;
            CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger := m_arCodeAttribute [nFieldID - 3].nMasterDivision;   // <152> Add
            CmnMemDataOffset.FieldByName ('nPartKbn').AsInteger      := m_arCodeAttribute [nFieldID - 3].nPartKbn;          // <152> Add
        end;
// <150> 2006/11/02 H.Kawato Add End
	end;

	if	(CmnEdit05006TaxCode.InputFlag) then
		CmnMemDataOffset.FieldByName ('nTaxCode').Clear
	else
		CmnMemDataOffset.FieldByName ('nTaxCode').AsInteger	:= CmnEdit05006TaxCode.AsInteger;

	if	(CmnEdit05007TaxRate.InputFlag) then
	begin
		CmnMemDataOffset.FieldByName ('nTaxRate'      ).Clear ();
		CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= '';
// <#TAX10> MOD-STR
		CmnMemDataOffset.FieldByName ('strTaxRateCSV' ).AsString	:= '';
// <#TAX10> MOD-END
	end
	else
	begin
		CmnMemDataOffset.FieldByName ('nTaxRate'      ).AsInteger	:= CmnEdit05007TaxRate    .AsInteger;
		CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= CmnEdit05007TaxRateDesc.Text;
// <#TAX10> MOD-STR
		CmnMemDataOffset.FieldByName ('strTaxRateCSV' ).AsString	:= m_TaxRateInfoFront.GetTaxNameByRateCD(m_nTaxKbn, 
																											 CmnEdit05006TaxCode.AsInteger, 
																											 CmnEdit05007TaxRate.AsInteger);
// <#TAX10> MOD-END
	end;

	if	(CmnEdit05002KmkCode.InputFlag) then
		CmnMemDataOffset.FieldByName ('nOffsetPrice').Clear ()
	else
		CmnMemDataOffset.FieldByName ('nOffsetPrice').AsCurrency	:= CmnEdit05008OffsetPrice.Value;

// <219> ADD-STR
    // 優先３補助の値を全補助エリアにコピーする
    with CmnMemDataOffset do
    begin
    	for	nFieldID := 1 to 3 do
        begin
            case (FieldByName(Format('nDivision%.2d', [nFieldID])).AsInteger) of
                MASTER_SECTION:         FieldByName('dCBmnNCode').AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                MASTER_SUBJECTPLUS:     FieldByName('dCSubNCode').AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                ucSSG_MKBN..
                ucSSG_MKBN + 9:         FieldByName('dCSegNCode' + IntToStr(FieldByName(Format('nDivision%.2d', [nFieldID])).AsInteger - ucSSG_MKBN + 1)).AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                MASTER_BANK:            FieldByName('dCBankNCode').AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                MASTER_CUSTOMER..
                MASTER_CUSTOMERPLUS02:  FieldByName('dCCsNCode').AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                MASTER_STAFF:           FieldByName('dCEmpNCode').AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                MASTER_GENERAL01..
                MASTER_GENERAL05:       FieldByName('dCMulNCode' + IntToStr(FieldByName(Format('nDivision%.2d', [nFieldID])).AsInteger - MASTER_GENERAL01 + 1)).AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                ucSKO_MKBN..
                ucSKO_MKBN + 9:         FieldByName('dCPrjNCode' + IntToStr(FieldByName(Format('nDivision%.2d', [nFieldID])).AsInteger - ucSKO_MKBN + 1)).AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
                ucSKO_MKBN + 100..
                ucSKO_MKBN + 109:       FieldByName('dCPjSubNCode' + IntToStr(FieldByName(Format('nDivision%.2d', [nFieldID])).AsInteger - ucSKO_MKBN - 100 + 1)).AsCurrency := FieldByName(Format('dSubNCode%.2d', [nFieldID])).AsFloat;
            end;
        end;
    end;
// <219> ADD-END

	CmnMemDataOffset.Post ();

	if	(CmnMemDataOffset.RecNo < CmnMemDataOffset.RecordCount) then
		CmnMemDataOffset.RecNo	:= CmnMemDataOffset.RecNo + 1;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataOffsetRecords (nNCode: Extended);
var
	dqMasterData    : TMQuery;
	nRow		    : Integer;
	nPosition	    : Integer;
	strDescription  : String;
    iGCode          : Integer;

	nAdoption	    : Integer;
	nAttribute	    : Integer;
	nDigit		    : Integer;
    nUse            : Integer;
    strGCode        : String;

    i               : Integer;
    lvMasterKbn     : Integer;
    fUse            : Boolean;

    strSQL          : String;       // <149> 2006/10/11 H.Kawato Add
// <175> Add
	dKmkNCode		: Extended;
	dHojNCode		: Extended;
// <175> Add
begin

	m_fUnderConstruction := TRUE;

    // Queryの構築
	dqMasterData := TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);

	CmnMemDataOffset.Close ();
	CmnMemDataOffset.Open  ();

	for	nRow := 1 to 10 do
	begin
		CmnMemDataOffset.Append ();
		CmnMemDataOffset.FieldByName ('nSeqNo').AsInteger	:= nRow;
		CmnMemDataOffset.Post   ();
	end;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
(*
{HIS0033
		SQL.Add   ('SELECT SousaiNo, KmkNCode, SubNCode, BmnNCode, SegNCode, ');
		SQL.Add   ('       HojKbn1, Hoj1NCode, HojKbn2, Hoj2NCode, FeeTaxCd, FeeTaxRt, SousaiKin ');
		SQL.Add   ('FROM   PayOffsetInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND PayNCode = :strHojCode ORDER BY SousaiNo');
}
		SQL.Add   ('SELECT PO.SousaiNo, PO.KmkNCode, PO.SubNCode, PO.BmnNCode, PO.SegNCode,KojNCode, ');
		SQL.Add   ('       PO.HojKbn1, PO.Hoj1NCode, PO.HojKbn2, PO.Hoj2NCode, PO.FeeTaxCd, PO.FeeTaxRt, PO.SousaiKin, ');
        SQL.Add   ('       KM1.GCode as KmkGCode,       ');
        SQL.Add   ('       KM2.SubCode as SubGCode,     ');
        SQL.Add   ('       MA1.GCode as BmnGCode,       ');
        SQL.Add   ('       MA2.GCode as SegGCode,       ');
        SQL.Add   ('       MA3.GCode as KojGCode,       ');
// <107>        SQL.Add   ('       Hoj1.GCode as Hoj1GCode,     ');
// <107>        SQL.Add   ('       Hoj2.GCode as Hoj2GCode,     ');
        SQL.Add   ('KM1.SubKmkUse,KM1.BmnUse, KM1.BPKbn,');
        SQL.Add   ('KM1.BankUse,KM1.ToriUse, KM1.ShainUse,');                                       // <107>
        SQL.Add   ('KM1.HojyoUse1, KM1.HojyoUse2, KM1.HojyoUse3, KM1.HojyoUse4, KM1.HojyoUse5,');   // <107>
        SQL.Add   ('KM1.SegUse1,KM1.SegUse2,KM1.SegUse3,KM1.SegUse4,KM1.SegUse5,');
        SQL.Add   ('KM1.SegUse6,KM1.SegUse7,KM1.SegUse8,KM1.SegUse9,KM1.SegUse10,');
        SQL.Add   ('KM1.PrjUse1,KM1.PrjUse2,KM1.PrjUse3,KM1.PrjUse4,KM1.PrjUse5,');
        SQL.Add   ('KM1.PrjUse6,KM1.PrjUse7,KM1.PrjUse8,KM1.PrjUse9,KM1.PrjUse10');

		SQL.Add   ('FROM   PayOffsetInfo PO ');
        SQL.Add   ('LEFT OUTER JOIN KmkMA   KM1 ON PO.KmkNCode = KM1.NCode  ');
        SQL.Add   ('LEFT OUTER JOIN KmkMA   KM2 ON PO.SubNCode = KM2.cNCode and PO.KmkNCode = KM2.NCode ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA MA1 ON PO.BmnNCode = MA1.NCode  ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA MA2 ON PO.SegNCode = MA2.NCode  ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA MA3 ON PO.KojNCode = MA3.NCode  ');
{ <107>
        if MASTER_HOJYO1 = MASTER_CUSTOMER then
            SQL.Add   ('LEFT OUTER JOIN MTOKUI  Hoj1 ON PO.Hoj1NCode = Hoj1.NCode  ')
        else
            SQL.Add   ('LEFT OUTER JOIN HojyoMA Hoj1 ON PO.Hoj1NCode = Hoj1.NCode  ');


        if MASTER_HOJYO2 = MASTER_CUSTOMER then
            SQL.Add   ('LEFT OUTER JOIN MTOKUI  Hoj2 ON PO.Hoj2NCode = Hoj2.NCode  ')
        else
            SQL.Add   ('LEFT OUTER JOIN HojyoMA Hoj2 ON PO.Hoj2NCode = Hoj2.NCode  ');
<107> }
		SQL.Add   ('WHERE  PO.MasterKbn = :nMasterDivision AND PO.PayNCode = :strHojCode ORDER BY PO.SousaiNo');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;
*)
        strSQL  := '';
        strSQL  := strSQL + 'SELECT ';
// <158> 2007/02/13 H.Kawato Mod
//        strSQL  := strSQL + ' KI.PartKbn, MA3.MasterKbn AS KojMasterKbn, ';     // <152> 2006/12/18 H.Kawato Add
        strSQL  := strSQL + ' KI.PartKbn, ';
        strSQL  := strSQL + ' PO.SousaiNo, PO.KmkNCode, PO.SubNCode, PO.BmnNCode, PO.SegNCode, PO.KojNCode, PO.KsyNCode, ';
        strSQL  := strSQL + ' PO.HojKbn1, PO.Hoj1NCode, PO.HojKbn2, PO.Hoj2NCode, PO.FeeTaxCd, PO.FeeTaxRt, PO.SousaiKin, ';
// <194> ADD-STR
        strSQL  := strSQL + ' PO.CKmkNCode, PO.CSubNCode, PO.CBmnNCode, ';
        strSQL  := strSQL + ' PO.CSegNCode1, PO.CSegNCode2, PO.CSegNCode3, PO.CSegNCode4, PO.CSegNCode5, ';
        strSQL  := strSQL + ' PO.CSegNCode6, PO.CSegNCode7, PO.CSegNCode8, PO.CSegNCode9, PO.CSegNCode10, ';
        strSQL  := strSQL + ' PO.CBankNCode, PO.CCsNCode, PO.CEmpNCode, ';
        strSQL  := strSQL + ' PO.CMulNCode1, PO.CMulNCode2, PO.CMulNCode3, PO.CMulNCode4, PO.CMulNCode5, ';
        strSQL  := strSQL + ' PO.CPrjNCode1, PO.CPrjNCode2, PO.CPrjNCode3, PO.CPrjNCode4, PO.CPrjNCode5, ';
        strSQL  := strSQL + ' PO.CPrjNCode6, PO.CPrjNCode7, PO.CPrjNCode8, PO.CPrjNCode9, PO.CPrjNCode10, ';
        strSQL  := strSQL + ' PO.CPjSubNCode1, PO.CPjSubNCode2, PO.CPjSubNCode3, PO.CPjSubNCode4, PO.CPjSubNCode5, ';
        strSQL  := strSQL + ' PO.CPjSubNCode6, PO.CPjSubNCode7, PO.CPjSubNCode8, PO.CPjSubNCode9, PO.CPjSubNCode10, ';
// <194> ADD-END
        strSQL  := strSQL + ' KM1.GCode as KmkGCode, ';
        strSQL  := strSQL + ' KM2.SubCode as SubGCode, ';
        strSQL  := strSQL + ' MA1.GCode as BmnGCode, ';
        strSQL  := strSQL + ' MA2.GCode as SegGCode, ';
        strSQL  := strSQL + ' MA3.GCode as KojGCode, ';
        strSQL  := strSQL + ' MA4.GCode as KsyGCode, ';                         // <150> Add
        strSQL  := strSQL + ' KM1.SubKmkUse, KM1.BmnUse, KM1.BPKbn, ';
        strSQL  := strSQL + ' KM1.BankUse, KM1.ToriUse, KM1.ShainUse, ';
        strSQL  := strSQL + ' KM1.HojyoUse1, KM1.HojyoUse2, KM1.HojyoUse3, KM1.HojyoUse4, KM1.HojyoUse5, ';
        strSQL  := strSQL + ' KM1.SegUse1, KM1.SegUse2, KM1.SegUse3, KM1.SegUse4, KM1.SegUse5, ';
        strSQL  := strSQL + ' KM1.SegUse6, KM1.SegUse7, KM1.SegUse8, KM1.SegUse9, KM1.SegUse10, ';
        strSQL  := strSQL + ' KM1.PrjUse1, KM1.PrjUse2, KM1.PrjUse3, KM1.PrjUse4, KM1.PrjUse5, ';
        strSQL  := strSQL + ' KM1.PrjUse6, KM1.PrjUse7, KM1.PrjUse8, KM1.PrjUse9, KM1.PrjUse10 ';
        strSQL  := strSQL + 'FROM PayOffsetInfo PO ';
        strSQL  := strSQL + ' LEFT OUTER JOIN KmkMA KM1 ON PO.KmkNCode = KM1.NCode ';
        strSQL  := strSQL + ' AND KM1.MasterKbn = 1 AND KM1.RDelKbn = 0 ';      // <158> Add
        strSQL  := strSQL + ' LEFT OUTER JOIN KmkMA KM2 ON PO.SubNCode = KM2.cNCode and PO.KmkNCode = KM2.NCode ';
        strSQL  := strSQL + ' AND KM2.MasterKbn = 2 AND KM2.RDelKbn = 0 ';      // <158> Add
        strSQL  := strSQL + ' LEFT OUTER JOIN HojyoMA MA1 ON PO.BmnNCode = MA1.NCode ';
        strSQL  := strSQL + ' AND MA1.MasterKbn = 41 ';                         // <163> Add 
        strSQL  := strSQL + ' LEFT OUTER JOIN HojyoMA MA2 ON PO.SegNCode = MA2.NCode ';
// <163> 2007/07/19 H.Kawato Add Start  会社で採用している、かつ科目で採用しているｾｸﾞﾒﾝﾄの中で先頭のマスタ区分を指定する
        strSQL  := strSQL + ' AND MA2.MasterKbn = (SELECT ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse1, 0) > 0) AND ((SELECT ISNULL(MT1.UseKbn, 0) FROM MasterInfo AS MT1 WHERE MasterKbn = 101) > 0) THEN 101 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse2, 0) > 0) AND ((SELECT ISNULL(MT2.UseKbn, 0) FROM MasterInfo AS MT2 WHERE MasterKbn = 102) > 0) THEN 102 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse3, 0) > 0) AND ((SELECT ISNULL(MT3.UseKbn, 0) FROM MasterInfo AS MT3 WHERE MasterKbn = 103) > 0) THEN 103 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse4, 0) > 0) AND ((SELECT ISNULL(MT4.UseKbn, 0) FROM MasterInfo AS MT4 WHERE MasterKbn = 104) > 0) THEN 104 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse5, 0) > 0) AND ((SELECT ISNULL(MT5.UseKbn, 0) FROM MasterInfo AS MT5 WHERE MasterKbn = 105) > 0) THEN 105 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse6, 0) > 0) AND ((SELECT ISNULL(MT6.UseKbn, 0) FROM MasterInfo AS MT6 WHERE MasterKbn = 106) > 0) THEN 106 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse7, 0) > 0) AND ((SELECT ISNULL(MT7.UseKbn, 0) FROM MasterInfo AS MT7 WHERE MasterKbn = 107) > 0) THEN 107 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse8, 0) > 0) AND ((SELECT ISNULL(MT8.UseKbn, 0) FROM MasterInfo AS MT8 WHERE MasterKbn = 108) > 0) THEN 108 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse9, 0) > 0) AND ((SELECT ISNULL(MT9.UseKbn, 0) FROM MasterInfo AS MT9 WHERE MasterKbn = 109) > 0) THEN 109 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.SegUse10, 0) > 0) AND ((SELECT ISNULL(MT10.UseKbn, 0) FROM MasterInfo AS MT10 WHERE MasterKbn = 110) > 0) THEN 110 ELSE ';
        strSQL  := strSQL + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) ';
// <163> 2007/07/19 H.Kawato Add End
        strSQL  := strSQL + ' LEFT OUTER JOIN HojyoMA MA3 ON PO.KojNCode = MA3.NCode ';
// <163> 2007/07/19 H.Kawato Add Start  会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄの中で先頭のマスタ区分を指定する
        strSQL  := strSQL + ' AND MA3.MasterKbn = (SELECT ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) THEN 201 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) THEN 202 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) THEN 203 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) THEN 204 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) THEN 205 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) THEN 206 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) THEN 207 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) THEN 208 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) THEN 209 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) THEN 210 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) THEN 201 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) THEN 202 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) THEN 203 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) THEN 204 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) THEN 205 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) THEN 206 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) THEN 207 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) THEN 208 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) THEN 209 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) THEN 210 ELSE ';
        strSQL  := strSQL + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) ';
// <163> 2007/07/19 H.Kawato Add End
        strSQL  := strSQL + ' LEFT OUTER JOIN HojyoMA MA4 ON PO.KsyNCode = MA4.NCode ';     // <150> Add
// <163> 2007/07/19 H.Kawato Add Start  会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄｻﾌﾞの中で先頭のマスタ区分を指定する
        strSQL  := strSQL + ' AND MA4.MasterKbn = (SELECT ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE ';
        strSQL  := strSQL + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) ';
// <163> 2007/07/19 H.Kawato Add End
        strSQL  := strSQL + ' LEFT OUTER JOIN KojiInfo KI ON KI.MasterKbn = MA3.MasterKbn AND KI.NCode = PO.KojNCode ';     // <152> Add
        strSQL  := strSQL + 'WHERE PO.PayPtnNo  = ' + FloatToStr(m_nPayPtnNo2);
        strSQL  := strSQL + '  AND PO.PayNCode  = ' + FloatToStr(nNCODE);
        strSQL  := strSQL + '  AND PO.MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
        strSQL  := strSQL + '  AND PO.RDelKbn = 0 ';                            // <161> Add
        strSQL  := strSQL + 'ORDER BY PO.SousaiNo ';

        SQL.Add (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();

		while (not EOF) do
		begin
			nRow	:= CmnMemDataOffset.GetRecNoByFieldValue (FieldByName ('SousaiNo').AsInteger, 'nSeqNo');

			if	(nRow = 1) then
				CmnMemDataOffset.First ()
			else if	(nRow = 10) then
				CmnMemDataOffset.Last ()
			else
				CmnMemDataOffset.RecNo	:= nRow;

			CmnMemDataOffset.Edit ();

            // 第一第二補助の採用ﾏｽﾀを取得 <107>
            fnGetHojyoMA(dqMasterData);

			if	((not FieldByName ('KmkNCode').IsNull) and (FieldByName ('KmkNCode').AsFloat <> 0)) then
			begin
				fnCheckValidKmkCode (FieldByName ('KmkNCode').AsFloat, iGCode,strDescription);
				CmnMemDataOffset.FieldByName ('nKmkCode').AsFloat	    := iGCode;
				CmnMemDataOffset.FieldByName ('strKmkDesc').AsString	:= strDescription;
				CmnMemDataOffset.FieldByName ('dKmkNCode').AsFloat	:= FieldByName ('KmkNCode').AsFloat;	// <175> Add

				nPosition	:= 1;

                // 部門
       			fnGetAdoptInformation (MASTER_SECTION, nAdoption, nDigit, nAttribute, strDescription);
    			if	(((FieldByName ('BmnUse').AsInteger <> 0) and (nAdoption <> 0)) and		// 部門採用区分: 1=あり
	    			 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then

				begin
					CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= MASTER_SECTION;
					CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= FieldByName ('BmnGCode').AsString;
					CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('BmnNCode').AsFloat;	// <175> Add

					fnCheckValidHojCode (MASTER_SECTION, FieldByName ('BmnNCode').AsFloat, strDescription, OPTION_GENERAL);
					CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;
					nPosition	:= nPosition + 1;
				end;

                fUse := False;                                                  // <150> 2006/11/02 H.Kawato Add
                lvMasterKbn := MASTER_CONSTRUCT;                                // <150> 2006/11/02 H.Kawato Add

                // ﾌﾟﾛｼﾞｪｸﾄ
				if	(nPosition <= 3) then
                begin
           			fnGetAdoptInformation (MASTER_CONSTRUCT, nAdoption, nDigit, nAttribute, strDescription);

                    nUse := MASTER_CONSTRUCT - 200;
//                    fUse := False;                                            // <150> 2006/11/02 H.Kawato Del

                    if (nUse >= 1) and (nUse <= 10) then
                    begin
// <158> 2007/02/13 H.Kawato Mod
//   	    	        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
   	    	        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
                        begin
           	    			CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= MASTER_CONSTRUCT;
	        	    		CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= FieldByName ('KojGCode').AsString;
							CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('KojNCode').AsFloat;	// <175> Add
	        	    		CmnMemDataOffset.FieldByName ('nPrjNCode').AsFloat       := FieldByName ('KojNCode').AsFloat;       // <150> 2006/11/02 H.Kawato Add
// <158> 2007/02/13 H.Kawato Mod
//	        	    		CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger := FieldByName ('KojMasterKbn').AsInteger; // <152> 2006/12/18 H.Kawato Add
	        	    		CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger := lvMasterKbn;
	        	    		CmnMemDataOffset.FieldByName ('nPartKbn').AsInteger      := FieldByName ('PartKbn').AsInteger;      // <152> 2006/12/18 H.Kawato Add

		        	    	fnCheckValidHojCode (MASTER_CONSTRUCT, FieldByName ('KojNCode').AsFloat, strDescription, OPTION_GENERAL);
			        	    CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;
    				        nPosition	:= nPosition + 1;
                            fUse := True;
                        end;
                    end;

                    if fUse = False then
                    begin
                        for i := 1 to 10 do
                        begin
                            lvMasterKbn := 200 + i;
                            if (lvMasterKbn <> MASTER_CONSTRUCT) then
                            begin
                                fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                                nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

// <158> 2007/02/13 H.Kawato Mod
//            	    	    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
            	    	    	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
            		    	    begin
                   		    		CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= lvMasterKbn;
            	    		    	CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= FieldByName ('KojGCode').AsString;

                		    		fnCheckValidHojCode (lvMasterKbn, FieldByName ('KojNCode').AsFloat, strDescription, OPTION_GENERAL);
                			    	CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;
									CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('KojNCode').AsFloat;	// <175> Add
        	        	    		CmnMemDataOffset.FieldByName ('nPrjNCode').AsFloat  := FieldByName ('KojNCode').AsFloat;
// <158> 2007/02/13 H.Kawato Mod
//        	        	    		CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger := FieldByName ('KojMasterKbn').AsInteger; // <152> 2006/12/18 H.Kawato Add
        	        	    		CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger := lvMasterKbn;
        	        	    		CmnMemDataOffset.FieldByName ('nPartKbn').AsInteger      := FieldByName ('PartKbn').AsInteger;      // <152> 2006/12/18 H.Kawato Add
                                                                                // <150> 2006/11/02 H.Kawato Add
                				    nPosition	:= nPosition + 1;
                                    fUse := True;                               // <150> 2006/11/02 H.Kawato Add
                                    Break;
                                end;
                            end;
                        end;
                    end;
                end;

// <150> 2006/11/02 H.Kawato Add Start
                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
// <152> 2006/12/18 H.Kawato Mod
//				if	(nPosition <= 3) then
				if	(nPosition <= 3) and (FieldByName('PartKbn').AsInteger <> 0) then
                begin
                    if (fUse = True) then
                        lvMasterKbn := lvMasterKbn + 100
                    else
                        lvMasterKbn := 0;

           			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);

                    nUse := lvMasterKbn - 300;

                    if (nUse >= 1) and (nUse <= 10) then
                    begin
// <158> 2007/02/13 H.Kawato Mod
//   	    	        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger = 1) and (nAdoption <> 0)) then
   	    	        	if	((FieldByName ('PrjUse' + IntToStr(nUse)).AsInteger >= 1) and (nAdoption <> 0)) then
                        begin
           	    			CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= lvMasterKbn;
	        	    		CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= FieldByName ('KsyGCode').AsString;
							CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('KsyNCode').AsFloat;	// <175> Add

		        	    	fnCheckValidHojCode (lvMasterKbn, FieldByName ('KsyNCode').AsFloat, strDescription, OPTION_GENERAL);
			        	    CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;
    				        nPosition	:= nPosition + 1;
                        end;
                    end;
                end;
// <150> 2006/11/02 H.Kawato Add End

                // 科目補助
				if	(nPosition <= 3) then //<174> ADD 科目別補助でも補助数チェックを行う
				begin
					fnGetAdoptInformation (MASTER_SUBJECTPLUS, nAdoption, nDigit, nAttribute, strDescription);
					if	((FieldByName ('SubKmkUse').AsInteger = 1) and (nAdoption <> 0)) then
					begin
// <175> Mod
//						CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= MASTER_SUBJECTPLUS;
//						if fnCheckValidKmsCodeEx (FieldByName ('KmkGCode').AsInteger, FieldByName ('SubGCode').AsString,strDescription)=True then
						CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= MASTER_SUBJECTPLUS;	// <181> ADD
						dKmkNCode	:= FieldByName ('KmkNCode').AsFloat;
						dHojNCode	:= FieldByName ('SubNCode').AsFloat;
						if	fnCheckValidKmsCodeEx (	FieldByName ('KmkGCode').AsInteger, FieldByName ('SubGCode').AsString, strDescription,
													dKmkNCode, dHojNCode) = True then
// <175> Mod
						begin
							CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= FieldByName ('SubGCode').AsString;
							CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;
							CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= dHojNCode;		// <175> Add
						end;
						nPosition	:= nPosition + 1;
					end;
				end;

                // 第一補助
				if	(nPosition <= 3) then
				begin
    				fnGetAdoptInformation (MASTER_HOJYO1,nAdoption, nDigit, nAttribute, strDescription);
    				if	(nAdoption <> 0) then
					begin
						fnCheckValidHojCode2 (FieldByName ('HojKbn1').AsInteger, FieldByName ('Hoj1NCode').AsFloat, strDescription, strGCode);

						CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= FieldByName ('HojKbn1').AsInteger;
						CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= strGCode;
						CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('Hoj1NCode').AsFloat;	// <175> Add
						CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;

						nPosition	:= nPosition + 1;
					end;
				end;

                // 第二補助
				if	(nPosition <= 3) then
				begin
    				fnGetAdoptInformation (MASTER_HOJYO2,nAdoption, nDigit, nAttribute, strDescription);
    				if	(nAdoption <> 0) then
					begin
						fnCheckValidHojCode2 (FieldByName ('HojKbn2').AsInteger, FieldByName ('Hoj2NCode').AsFloat, strDescription, strGCode);

						CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= FieldByName ('HojKbn2').AsInteger;
        				CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= strGCode;
						CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('Hoj2NCode').AsFloat;	// <175> Add
						CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;

						nPosition	:= nPosition + 1;       // <139> 2006/08/03 H.Kawato Add
					end;
				end;


                // セグメント
				if	(nPosition <= 3) then
                begin
                    for i := 1 to 10 do
                    begin
                        lvMasterKbn := 100 + i;
               			fnGetAdoptInformation (lvMasterKbn, nAdoption, nDigit, nAttribute, strDescription);
                        nUse := StrToInt(Copy(IntToStr(lvMasterKbn),2,2));

    		        	if	(((FieldByName ('SegUse' + IntToStr(nUse)).AsInteger <> 0) and (nAdoption <> 0)) and
	    		        	 (not ((FieldByName ('BPKbn').AsInteger = 0) and (nAdoption = 1)))) then

        		    	begin
		    	    		CmnMemDataOffset.FieldByName (Format ('nDivision%.2d' , [nPosition])).AsInteger	:= lvMasterKbn;
				        	CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nPosition])).AsString	:= FieldByName ('SegGCode').AsString;
							CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nPosition])).AsFloat	:= FieldByName ('SegNCode').AsFloat;	// <175> Add

    				    	fnCheckValidHojCode (lvMasterKbn, FieldByName ('SegnCode').AsFloat, strDescription, OPTION_GENERAL);
	    				    CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nPosition])).AsString	:= strDescription;

//    			    		nPosition	:= nPosition + 1;
                            break;          // <123>
	    			    end;

                    end;
                end;

				if	(not FieldByName ('FeeTaxCd').IsNull) then
					CmnMemDataOffset.FieldByName ('nTaxCode').AsInteger	:= FieldByName ('FeeTaxCd').AsInteger;

				if	((FieldByName ('FeeTaxCd').AsInteger = 30) or (FieldByName ('FeeTaxCd').AsInteger = 40)) then
				begin
					CmnMemDataOffset.FieldByName ('nTaxRate'      ).Clear ();
					CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= '';
// <#TAX10> ADD-STR
					CmnMemDataOffset.FieldByName ('strTaxRateCSV' ).AsString	:= '';
// <#TAX10> ADD-END
				end
				else
				begin
					if	(not FieldByName ('FeeTaxRt').IsNull) then
					begin
						CmnMemDataOffset.FieldByName ('nTaxRate'      ).AsInteger	:= FieldByName ('FeeTaxRt').AsInteger;
// <TX26> MOD-STR
//						CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= _TaxRateItems [FieldByName ('FeeTaxRt').AsInteger];
// <#TAX10> MOD-STR
//						CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= m_TaxRateInfo.GetTaxNameByRateCD(FieldByName ('FeeTaxRt').AsInteger);
						CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= fnGetTaxRateName(FieldByName ('FeeTaxRt').AsInteger);
						CmnMemDataOffset.FieldByName ('strTaxRateCSV' ).AsString	:= m_TaxRateInfoFront.GetTaxNameByRateCD(m_nTaxKbn, 
																															 CmnEdit05006TaxCode.AsInteger, 
																															 CmnEdit05007TaxRate.AsInteger);
// <#TAX10> MOD-END
// <TX26> MOD-END
					end
					else
					begin
						CmnMemDataOffset.FieldByName ('nTaxRate'      ).Clear ();
						CmnMemDataOffset.FieldByName ('strTaxRateDesc').AsString	:= '';
// <#TAX10> ADD-STR
						CmnMemDataOffset.FieldByName ('strTaxRateCSV' ).AsString	:= '';
// <#TAX10> ADD-END
					end;
				end;

				if	(not FieldByName ('SousaiKin').IsNull) then
					CmnMemDataOffset.FieldByName ('nOffsetPrice').AsCurrency	:= FieldByName ('SousaiKin').Value;

// <194> ADD-STR
                // 内部コードエリアセット
                CmnMemDataOffset.FieldByName('dCSubNCode').AsCurrency := FieldByName('CSubNCode').AsCurrency;
                CmnMemDataOffset.FieldByName('dCBmnNCode').AsCurrency := FieldByName('CBmnNCode').AsCurrency;
                for i := 1 to 10 do
                    CmnMemDataOffset.FieldByName('dCSegNCode' + IntToStr(i)).AsCurrency := FieldByName('CSegNCode' + IntToStr(i)).AsCurrency;
                CmnMemDataOffset.FieldByName('dCBankNCode').AsCurrency := FieldByName('CBankNCode').AsCurrency;
                CmnMemDataOffset.FieldByName('dCCsNCode').AsCurrency := FieldByName('CCsNCode').AsCurrency;
                CmnMemDataOffset.FieldByName('dCEmpNCode').AsCurrency := FieldByName('CEmpNCode').AsCurrency;
                for i := 1 to 5 do
                    CmnMemDataOffset.FieldByName('dCMulNCode' + IntToStr(i)).AsCurrency := FieldByName('CMulNCode' + IntToStr(i)).AsCurrency;
                for i := 1 to 10 do
                    CmnMemDataOffset.FieldByName('dCPrjNCode' + IntToStr(i)).AsCurrency := FieldByName('CPrjNCode' + IntToStr(i)).AsCurrency;
                for i := 1 to 10 do
                    CmnMemDataOffset.FieldByName('dCPjSubNCode' + IntToStr(i)).AsCurrency := FieldByName('CPjSubNCode' + IntToStr(i)).AsCurrency;
// <194> ADD-END

				CmnMemDataOffset.Post ();
			end;

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	CmnMemDataOffset.First ();

	m_fUnderConstruction	:= FALSE;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetPaymentRecords (nNCode: Extended; nDecDivision: Integer);
var
	dqMasterData  : TMQuery;
	cNumEdit	  : TMNumEdit;
	nRow		  : Integer;
	strDescription: String;
    strSQL        : String;         // <149> 2006/10/11 H.Kawato Add

begin
	fnChangeConditionPayment ();

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();

// <149> 2006/10/11 H.Kawato Mod Start
{
		SQL.Add   ('SELECT JoukenNo, Houhou, StdRitu, MinKin, HasuuKin, HasuuHou FROM PayPtnDtl ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND PayNCode = :strHojCode  ');
		SQL.Add   ('ORDER BY JoukenNo');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCode;
}
        strSQL  := '';
        strSQL  := strSQL + 'SELECT JoukenNo, Houhou, StdRitu, MinKin, HasuuKin, HasuuHou FROM PayPtnDtl ';
        strSQL  := strSQL + 'WHERE  PayPtnNo  = ' + FloatToStr(m_nPayPtnNo2);
        strSQL  := strSQL + '  AND  PayNCode  = ' + FloatToStr(nNCode);
        strSQL  := strSQL + '  AND  MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
        strSQL  := strSQL + '  AND  RDelKbn = 0 ';  // <161> Add
        strSQL  := strSQL + 'ORDER BY JoukenNo ';

		SQL.Add   (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();

		while (not EOF) do
		begin
			nRow	:= FieldByName ('JoukenNo').AsInteger;

			if	(nRow > 0) then
			begin
				cNumEdit		:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)])));
				cNumEdit.Value	:= FieldByName ('Houhou').AsInteger;

				fnGetDescriptionSelectedItem (cNumEdit, strDescription);

				TMLabel (MJSFindCtrl (Self, 'CmnLabel' + Copy (cNumEdit.Name, 8, 64) + 'Desc')).Caption	:= strDescription;

				if	(FieldByName ('Houhou').AsInteger = 0) then							// 支払方法: 0=なし
				begin
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Value		:= 0;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [3], [4 + ((nRow - 1) * 5)]))).Value		:= 0;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [5 + ((nRow - 1) * 5)]))).Value		:= 0;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [6 + ((nRow - 1) * 5)]))).Enabled	:= TRUE;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [6 + ((nRow - 1) * 5)]))).Value		:= 0;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).InputFlag	:= TRUE;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [3], [4 + ((nRow - 1) * 5)]))).InputFlag	:= TRUE;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [5 + ((nRow - 1) * 5)]))).InputFlag	:= TRUE;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [6 + ((nRow - 1) * 5)]))).InputFlag	:= TRUE;

					TMLabel (MJSFindCtrl (Self, Format ('CmnLabel01%.3dPaymentColumnFractionDesc',
																		[6 + ((nRow - 1) * 5)]))).Caption	:= '';
					TMLabel (MJSFindCtrl (Self, Format (
											'CmnLabelPaymentColumnBasedValue%.2dUnit', [nRow]))).Caption	:= '';
				end
				else
				begin
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).Value		:= FieldByName ('StdRitu').AsCurrency;
					TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [2], [3 + ((nRow - 1) * 5)]))).InputFlag	:= FALSE;

					if	(nDecDivision = 0) then											// 分解方法: 0=比率
					begin
						TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [3], [4 + ((nRow - 1) * 5)]))).Value		:= FieldByName ('MinKin'  ).AsCurrency;
						TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [3], [4 + ((nRow - 1) * 5)]))).InputFlag	:= FALSE;
						TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [5 + ((nRow - 1) * 5)]))).Value		:= FieldByName ('HasuuKin').AsCurrency;
						TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [4], [5 + ((nRow - 1) * 5)]))).InputFlag	:= FALSE;

						cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [5], [6 + ((nRow - 1) * 5)])));

						if	(FieldByName ('HasuuKin').AsCurrency <> 0) then
						begin
							cNumEdit.Enabled	:= TRUE;
							cNumEdit.Value		:= FieldByName ('HasuuHou').AsInteger;
							cNumEdit.InputFlag	:= FALSE;

							fnGetDescriptionSelectedItem (cNumEdit, strDescription);
						end
						else
						begin
							cNumEdit.Value		:= 0;
							cNumEdit.InputFlag	:= TRUE;
							cNumEdit.Enabled	:= FALSE;

							strDescription	:= '';
						end;

						TMLabel (MJSFindCtrl (Self, Format ('CmnLabel01%.3dPaymentColumnFractionDesc',
															[6 + ((nRow - 1) * 5)]))).Caption	:= strDescription;
						TMLabel (MJSFindCtrl (Self, Format (
											'CmnLabelPaymentColumnBasedValue%.2dUnit', [nRow]))).Caption	:= '%';
					end;

// <211> MOD-STR
{					case (FieldByName ('Houhou').AsInteger) of
						1:		CmnTabInformations.Items [1].Enabled	:= TRUE;		// 振込情報
// <132> 2006/06/15 H.Kawato Mod Start
//						2:		CmnTabInformations.Items [2].Enabled	:= TRUE;		// 期日指定振込情報
						2:
                        begin
                            CmnTabInformations.Items [2].Enabled    := TRUE;		    // 期日指定振込情報
                            m_bKijituMankiFlg := True;
                        end;
// <132> 2006/06/15 H.Kawato Mod end
						3, 4:	CmnTabInformations.Items [3].Enabled	:= TRUE;		// 手形/小切手情報
					end;}

		            if (FieldByName ('Houhou').AsInteger in [TI_FURIKOMI, TI_KFURIKOMI, TI_BILL, TI_CHECK]) then
                    begin
                        CmnTabInformations.Items [FieldByName ('Houhou').AsInteger].Enabled    := TRUE;
                        if (FieldByName ('Houhou').AsInteger = 2) then
                            m_bKijituMankiFlg := True;
                    end;
// <211> MOD-END
				end;
			end;

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataStandardRecords (dqMasterData: TMQuery);
var
	cMemData  : TdxMemData;
	strHojCode: String;
	strFormat : String;

begin
	with (dqMasterData) do
	begin
		strHojCode	:= FieldByName ('GCode').AsString;

		if	(m_nCurCodeAttribute <= 1) then
		begin
			case (m_nCurCodeAttribute) of
				0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
				1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
			end;

			strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
		end;

		if  (FieldByName ('SumKbn').AsInteger = 0) then
			cMemData	:= CmnMemDataStandardExist
		else
			cMemData	:= CmnMemDataStandardTotal;

		cMemData.Append ();

		cMemData.FieldByName ('grTag').Assign (fnGetBitmapSelectedTag (FieldByName ('FusenKbn').AsInteger));

		cMemData.FieldByName ('strHojCode'    ).AsString	:= strHojCode;
		cMemData.FieldByName ('strAssociation').AsString	:= FieldByName ('RenSO'   ).AsString;
		cMemData.FieldByName ('strName'       ).AsString	:= FieldByName ('NM'  ).AsString;
		cMemData.FieldByName ('strNameSimple' ).AsString	:= FieldByName ('NMK').AsString;
		cMemData.FieldByName ('strComment'    ).AsString	:= FieldByName ('FusenCmnt' ).AsString;

		cMemData.Post ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetParentItemsInfo (nDivision: Integer; strHojCode: String;
									nDivisionParent: Integer; nNCodeParent: Extended; strDescription: String);
var
	dqMasterData: TMQuery;
	strCaption	: String;
	strFormat	: String;

begin
	m_nCurItemDivision	:= nDivisionParent;
	m_nCurNCode	    	:= nNCodeParent;

	strCaption	:= '';

	if	(m_nCurNCode <> _TreeSystemNCode) then
	begin
		if  (m_nCurCodeAttribute <= 1) then
		begin
        	case (m_nCurCodeAttribute) of
            	0:  strFormat   := '%'  + IntToStr (m_nCurCodeDigit) + 'd';
            	1:  strFormat   := '%.' + IntToStr (m_nCurCodeDigit) + 'd';
        	end;

//            if m_nCurNCode <> 0 then
//        			strCaption	:= Format (strFormat, [StrToInt64 (Trim (m_strCurHojCode))]);
			strCaption	:= strCaption + ' ';
		end
		else
			strCaption	:= m_strCurHojCode + ' ';
	end;

	CmnTabStandard.BorderCaption	:= strCaption + strDescription;
//	CmnTabDetail  .BorderCaption	:= strCaption + strDescription;             // <149> 2006/10/11 H.Kawato Del 実在・情報合計タブ

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	m_fUnderConstruction	:= TRUE;

	CmnMemDataStandardExist.Active	:= FALSE;
	CmnMemDataStandardTotal.Active	:= FALSE;
	CmnMemDataStandardExist.Active	:= TRUE;
	CmnMemDataStandardTotal.Active	:= TRUE;

	CmnDataSourceStandardExist.DataSet	:= nil;
	CmnDataSourceStandardTotal.DataSet	:= nil;

	if	((nDivision = TREE_CHILD_SUM) or (nDivision = TREE_PARENT_SUM) or (nDivision = TREE_SYSTEM_SUM)) then
		fnSetMemDataSum		 (dqMasterData)
	else
		fnSetMemDataStandard (dqMasterData);

	CmnDataSourceStandardExist.DataSet	:= CmnMemDataStandardExist;
	CmnDataSourceStandardTotal.DataSet	:= CmnMemDataStandardTotal;

	CmnMemDataStandardExist.First ();
	CmnMemDataStandardTotal.First ();

	m_fUnderConstruction	:= FALSE;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataStandard (dqMasterData: TMQuery);
begin
	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT hm.SumKbn, hm.GCode, hm.RenSo,');
		SQL.Add   ('       hm.NM, hm.NMK, hm.HojyoKbn2, fi.FusenKbn, fi.FusenCmnt ');
		SQL.Add   ('FROM   HojyoTree ht, MTOKUI hm LEFT OUTER JOIN MFusenInfo fi ');
		SQL.Add   ('ON     fi.NCode = hm.NCode ');
		SQL.Add   ('WHERE  ht.MasterKbn = :nMasterDivision AND ht.SumNCode = :strHojCode AND ');
		SQL.Add   ('       hm.RDelKbn = 0 AND ht.BasedNCode = hm.NCode ');
        SQL.Add   (' and   hm.TemplateKbn=0');              // <102>        
		SQL.Add   ('ORDER BY ht.EntNo');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= m_nCurNCODE;
		Open ();

		while (not EOF) do
		begin
			if	((FieldByName ('SumKbn').AsInteger <> 0) or (FieldByName ('HojyoKbn2').AsInteger = 1)) then
				fnSetMemDataStandardRecords (dqMasterData);

			Next ();
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataSum (dqMasterData: TMQuery);
begin
    with (dqMasterData) do
    begin
		Close ();

		SQL.Clear ();

		if	(m_nCurNCode = _TreeSystemNCode) then
		begin
			SQL.Add ('SELECT hm.SumKbn,hm.GCode, ');
			SQL.Add ('       hm.RenSo, hm.NM, hm.NMK, fi.FusenKbn, fi.FusenCmnt ');
			SQL.Add ('FROM   MTOKUI hm, PayNayoseInfo ni LEFT OUTER JOIN MFusenInfo fi ');
			SQL.Add ('ON     fi.MasterKbn = 22 AND fi.HojyoCode = hm.NCode ');
			SQL.Add ('WHERE  hm.RDelKbn = 0 AND ni.NayoseSyu = 1 AND ni.NayoseKbn = 2 AND hm.NCode = ni.PayNCode ');
            SQL.Add (' and   hm.TemplateKbn=0');            // <102>
			SQL.Add ('ORDER BY hm.GCode');

		end
		else
		begin
			SQL.Add ('SELECT hm.SumKbn,hm.GCode, ');
			SQL.Add ('       hm.RenSo, hm.NM, hm.NMK, fi.FusenKbn, fi.FusenCmnt ');
			SQL.Add ('FROM   MTOKUI hm, PayNayoseInfo ni LEFT OUTER JOIN MFusenInfo fi ');
			SQL.Add ('ON     fi.MasterKbn = 22 AND fi.HojyoCode = hm.NCode ');
			SQL.Add ('WHERE  hm.RDelKbn = 0 AND ni.NayoseSyu = 1 AND ');
			SQL.Add ('       ni.NayoseKbn = 1 AND hm.NCode = ni.PayNCode AND ni.NayoseOyaNCode = :strHojCode ');
            SQL.Add (' and   hm.TemplateKbn=0');            // <102>
			SQL.Add ('ORDER BY hm.GCode');

			ParamByName ('strHojCode'     ).AsFloat	:= m_nCurNCode;
		end;

		Open ();

		while (not EOF) do
		begin
			fnSetMemDataStandardRecords (dqMasterData);
			NEXT;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnSetRecordOffsetJournalInfo (): Boolean;
var
	nFieldID 	    : Integer;
	strDescription  : String;

begin
	if	(CmnMemDataOffset.FieldByName ('nKmkCode').AsInteger <> 0) then
	begin
		CmnEdit05002KmkCode    .Value		:= CmnMemDataOffset.FieldByName ('nKmkCode').AsInteger;
		CmnEdit05002KmkCode    .InputFlag	:= FALSE;
		CmnEdit05002KmkCodeDesc.Text		:= CmnMemDataOffset.FieldByName ('strKmkDesc'  ).AsString;
		CmnEdit05008OffsetPrice.Value		:= CmnMemDataOffset.FieldByName ('nOffsetPrice').AsCurrency;
// <152> 2006/12/18 H.Kawato Add Start
        if  (CmnMemDataOffset.FieldByName ('nPartKbn').AsInteger < 1) then
            m_nPrjSubUnAdopt    := 2
        else
            m_nPrjSubUnAdopt    := 1;
// <152> 2006/12/18 H.Kawato Add End
		m_dSousaiNCode[0]	:= CmnMemDataOffset.FieldByName ('dKmkNCode').AsFloat;		// <175> Add
	end
	else
	begin
		CmnEdit05002KmkCode    .Value		:= 0;
		CmnEdit05002KmkCode    .InputFlag	:= TRUE;
		CmnEdit05002KmkCodeDesc.Text		:= '';
		CmnEdit05008OffsetPrice.Value		:= 0;
	end;

	fnSetAttributeOffsetJournalInfo (CmnEdit05002KmkCode.AsInteger);

    m_nPrjSubUnAdopt    := 0;   // <152> 2006/12/18 H.Kawato Add

	if	(CmnMemDataOffset.FieldByName ('nKmkCode').AsInteger = 0) then
	begin
		fnInitializeOffsetJournalInfo ();

		Result	:= TRUE;
		Exit;
	end;

	for	nFieldID := 3 to 5 do
	begin
// <158> 2007/02/13 H.Kawato Add Start
		if	((m_arCodeAttribute [nFieldID - 3].nMasterDivision >= 201) and
             (m_arCodeAttribute [nFieldID - 3].nMasterDivision <= 210) and
             (m_arCodeAttribute [nFieldID - 3].nUse = 2) and
             (Trim (CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString) = '')) then
        begin
			if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then					// ｺｰﾄﾞ属性: 数字
			begin
				TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).Value	    := 0;
				TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).InputFlag	:= TRUE;
			end
			else
				TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree', [nFieldID]))).Text	:= '';

			TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text	:= '';
			m_dSousaiNCode[nFieldID - 2]	:= CmnMemDataOffset.FieldByName ('nPrjNCode').AsFloat;		// <175> Add

            m_arCodeAttribute [nFieldID - 3].nPrjNCode       := CmnMemDataOffset.FieldByName ('nPrjNCode').AsFloat;
            m_arCodeAttribute [nFieldID - 3].nMasterDivision := CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger;
            m_arCodeAttribute [nFieldID - 3].nPartKbn        := CmnMemDataOffset.FieldByName ('nPartKbn').AsInteger;
        end
        else
// <158> 2007/02/13 H.Kawato Add End
		if	(Trim (CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString) <> '') then
		begin
			if	(m_arCodeAttribute [nFieldID - 3].nAttribute <= 1) then					// ｺｰﾄﾞ属性: 数字
			begin
				TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).Value	:=
					StrToInt64 (Trim (CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString));

				TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeNumeric', [nFieldID]))).InputFlag	:= FALSE;
			end
			else
				TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeFree', [nFieldID]))).Text	:=
									CmnMemDataOffset.FieldByName (Format ('strSubCode%.2d', [nFieldID - 2])).AsString;

			TMTxtEdit (MJSFindCtrl (Self, Format ('CmnEdit05%.3dHojCodeDesc', [nFieldID]))).Text	:=
									CmnMemDataOffset.FieldByName (Format ('strSubDesc%.2d', [nFieldID - 2])).AsString;
			m_dSousaiNCode[nFieldID - 2]	:= CmnMemDataOffset.FieldByName (Format ('dSubNCode%.2d', [nFieldID - 2])).AsFloat;	// <175> Add

// <150> 2006/11/02 H.Kawato Add Start
            if  (CmnMemDataOffset.FieldByName (Format ('nDivision%.2d', [nFieldID - 2])).AsInteger >= 201) and
                (CmnMemDataOffset.FieldByName (Format ('nDivision%.2d', [nFieldID - 2])).AsInteger <= 210) then
            begin
                m_arCodeAttribute [nFieldID - 3].nPrjNCode       := CmnMemDataOffset.FieldByName ('nPrjNCode').AsFloat;
                m_arCodeAttribute [nFieldID - 3].nMasterDivision := CmnMemDataOffset.FieldByName ('nPrjMasterKbn').AsInteger;
                m_arCodeAttribute [nFieldID - 3].nPartKbn        := CmnMemDataOffset.FieldByName ('nPartKbn').AsInteger;
            end;
// <150> 2006/11/02 H.Kawato Add End
		end;
	end;


	if	(CmnMemDataOffset.FieldByName ('nTaxCode').IsNull)
                or (CmnMemDataOffset.FieldByName ('nTaxCode').AsInteger = 0 ) then
	begin
		CmnEdit05006TaxCode.Value		:= 0;
//		CmnEdit05006TaxCode.InputFlag	:= TRUE;
	end
	else
	begin
		CmnEdit05006TaxCode.Value		:= CmnMemDataOffset.FieldByName ('nTaxCode').AsInteger;
		CmnEdit05006TaxCode.InputFlag	:= FALSE;

		fnGetDescriptionSelectedItem (CmnEdit05006TaxCode, strDescription);

		CmnEdit05006TaxCodeDesc.Text	:= strDescription;
	end;

	if	(CmnMemDataOffset.FieldByName ('nTaxRate').IsNull)
                or (CmnMemDataOffset.FieldByName ('nTaxRate').AsInteger = 0 )then

	begin
		CmnEdit05007TaxRate.Value		:= 0;
		CmnEdit05007TaxRate.InputFlag	:= TRUE;
	end
	else
	begin
		CmnEdit05007TaxRate.Value		:= CmnMemDataOffset.FieldByName ('nTaxRate').AsInteger;
		CmnEdit05007TaxRate.InputFlag	:= FALSE;

// <#TAX10> MOD-STR
//		fnGetDescriptionSelectedItem (CmnEdit05007TaxRate, strDescription);
//
//		CmnEdit05007TaxRateDesc.Text	:= strDescription;
		CmnEdit05007TaxRateDesc.Text  := fnGetTaxRateName(CmnEdit05007TaxRate.AsInteger);
// <#TAX10> MOD-END
	end;

	fnChangeConditionOffsetTax ();

	CmnEdit05008OffsetPrice.Value	:= CmnMemDataOffset.FieldByName ('nOffsetPrice').AsCurrency;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetReportTitleField (nSelected: Integer; var cTitleField: TStringList; var cMemDataField: TStringList);
begin
	case (nSelected) of
		0:	begin																		// 実在支払先登録ﾘｽﾄ(簡略)
				cTitleField.Add	('支払先ｺｰﾄﾞ'	 );
				cTitleField.Add	('支払先正式名称');
				cTitleField.Add	('支払先簡略名称');
				cTitleField.Add ('連想'			 );
				cTitleField.Add	('最終更新日時'	 );

				cMemDataField.Add ('strHojCode'    );
				cMemDataField.Add ('strName'	   );
				cMemDataField.Add ('strNameSimple' );
				cMemDataField.Add ('strAssociation');
				cMemDataField.Add ('dtUpdateDate'  );
			end;
		1:	begin																		// 合計支払先登録ﾘｽﾄ(簡略)
				cTitleField.Add	('支払先ｺｰﾄﾞ'	 );
				cTitleField.Add	('支払先正式名称');
				cTitleField.Add	('支払先簡略名称');
				cTitleField.Add ('連想'			 );
				cTitleField.Add	('名寄せ'	     );
				cTitleField.Add	('郵便番号(基番)');
				cTitleField.Add	('郵便番号(枝番)');
				cTitleField.Add	('住所１'	     );
				cTitleField.Add	('住所２'	     );
				cTitleField.Add	('最終更新日時'	 );

				cMemDataField.Add ('strHojCode'     );
				cMemDataField.Add ('strName'	    );
				cMemDataField.Add ('strNameSimple'  );
				cMemDataField.Add ('strAssociation' );
				cMemDataField.Add ('strAdoptDesc'   );
				cMemDataField.Add ('nZipCodeUpper'  );
				cMemDataField.Add ('nZipCodeLower'  );
				cMemDataField.Add ('strAddressUpper');
				cMemDataField.Add ('strAddressLower');
				cMemDataField.Add ('dtUpdateDate'   );
			end;

		2:	begin																		// 支払先登録ﾘｽﾄ(詳細)
				cTitleField.Add	('支払先ｺｰﾄﾞ'	                     );
				cTitleField.Add	('支払先正式名称'                    );
				cTitleField.Add	('支払先簡略名称'                    );
				cTitleField.Add ('連想'			                     );
				cTitleField.Add	('名寄せ'	                         );
				cTitleField.Add	('適用期間'	                         );
				cTitleField.Add	('支払方法'                          );
				cTitleField.Add	('№'                                );
				cTitleField.Add	('支払方法'	                         );
				cTitleField.Add	('分解基準値'                        );
				cTitleField.Add	('支払最低額'	                     );
				cTitleField.Add ('端数処理額'                        );
				cTitleField.Add ('端数処理方法'                      );
				cTitleField.Add	('№'                                );
				cTitleField.Add	('支払方法'	                         );
				cTitleField.Add	('分解基準値'                        );
				cTitleField.Add	('支払最低額'	                     );
				cTitleField.Add ('端数処理額'                        );
				cTitleField.Add ('端数処理方法'                      );
				cTitleField.Add	('№'                                );
				cTitleField.Add	('支払方法'	                         );
				cTitleField.Add	('分解基準値'                        );
				cTitleField.Add	('支払最低額'	                     );
				cTitleField.Add ('端数処理額'                        );
				cTitleField.Add ('端数処理方法'                      );
				cTitleField.Add	('№'                                );
				cTitleField.Add	('支払方法'	                         );
				cTitleField.Add	('分解基準値'                        );
				cTitleField.Add	('支払最低額'	                     );
				cTitleField.Add ('端数処理額'                        );
				cTitleField.Add ('端数処理方法'                      );
				cTitleField.Add	('№'                                );
				cTitleField.Add	('支払方法'	                         );
				cTitleField.Add	('分解基準値'                        );
				cTitleField.Add	('支払最低額'	                     );
				cTitleField.Add ('端数処理額'                        );
				cTitleField.Add ('端数処理方法'                      );
				cTitleField.Add	('振込情報: 支払口座ｺｰﾄﾞ'            );
				cTitleField.Add	('振込情報: 支払口座名称'            );
				cTitleField.Add	('振込情報: 預金種目'                );
				cTitleField.Add	('振込情報: 口座番号'			     );
				cTitleField.Add	('振込情報: 全銀協ｺｰﾄﾞ'              );
				cTitleField.Add	('振込情報: 支店ｺｰﾄﾞ'                );
				cTitleField.Add	('振込情報: 銀行名称'                );
				cTitleField.Add	('振込情報: 支店名称'                );
				cTitleField.Add	('振込情報: 銀行名(ｶﾅ)'              );
				cTitleField.Add	('振込情報: 支店名(ｶﾅ)'              );
				cTitleField.Add	('振込情報: 振込先(ｶﾅ)'              );
				cTitleField.Add	('振込情報: 預金種目'                );
				cTitleField.Add	('振込情報: 口座番号'                );
				cTitleField.Add	('振込情報: 手数料負担区分'          );
				cTitleField.Add	('振込情報: 手数料計算区分'          );
				cTitleField.Add	('振込情報: 振込方法'                );
				cTitleField.Add	('振込情報: FBｾｯﾄ区分'               );
				cTitleField.Add	('振込情報: 顧客ｺｰﾄﾞA'               );
				cTitleField.Add	('振込情報: 顧客ｺｰﾄﾞB'               );
				cTitleField.Add	('振込情報: EDI情報'                 );
				cTitleField.Add	('期日指定振込情報: 支払口座ｺｰﾄﾞ'    );
				cTitleField.Add	('期日指定振込情報: 支払口座名称'    );
				cTitleField.Add	('期日指定振込情報: 預金種目'        );
				cTitleField.Add	('期日指定振込情報: 口座番号'        );
				cTitleField.Add	('期日指定振込情報: 全銀協ｺｰﾄﾞ'      );
				cTitleField.Add	('期日指定振込情報: 支店ｺｰﾄﾞ'        );
				cTitleField.Add	('期日指定振込情報: 銀行名称'        );
				cTitleField.Add	('期日指定振込情報: 支店名称'        );
				cTitleField.Add	('期日指定振込情報: 銀行名(ｶﾅ)'      );
				cTitleField.Add	('期日指定振込情報: 支店名(ｶﾅ)'      );
				cTitleField.Add	('期日指定振込情報: 振込先(ｶﾅ)'      );
				cTitleField.Add	('期日指定振込情報: 預金種目'        );
				cTitleField.Add	('期日指定振込情報: 口座番号'        );
				cTitleField.Add	('期日指定振込情報: 手数料負担区分'  );
				cTitleField.Add	('期日指定振込情報: 手数料計算区分'  );
				cTitleField.Add	('期日指定振込情報: 振込方法'        );
				cTitleField.Add	('期日指定振込情報: FBｾｯﾄ区分'       );
				cTitleField.Add	('期日指定振込情報: 顧客ｺｰﾄﾞA'       );
				cTitleField.Add	('期日指定振込情報: 顧客ｺｰﾄﾞB'       );
				cTitleField.Add	('期日指定振込情報: EDI情報'         );
				cTitleField.Add ('期日指定振込情報: 振込ｻｲﾄ'         );
				cTitleField.Add	('手形情報: 支払口座ｺｰﾄﾞ'            );
				cTitleField.Add	('手形情報: 支払口座名称'            );
				cTitleField.Add	('手形情報: 預金種目'                );
				cTitleField.Add	('手形情報: 口座番号'                );
				cTitleField.Add	('手形情報: 手形郵送区分'            );
				cTitleField.Add	('手形情報: 郵送料負担区分'          );
				cTitleField.Add	('手形情報: 手形ｻｲﾄ'                 );
				cTitleField.Add	('手形情報: 手形分割枚数'            );
				cTitleField.Add	('小切手情報: 支払口座ｺｰﾄﾞ'          );
				cTitleField.Add	('小切手情報: 支払口座名称'          );
				cTitleField.Add	('小切手情報: 預金種目'              );
				cTitleField.Add	('小切手情報: 口座番号'              );
				cTitleField.Add	('小切手情報: 小切手郵送区分'        );
				cTitleField.Add	('小切手情報: 郵送料負担区分'        );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
				cTitleField.Add	('相殺情報: №'                      );
				cTitleField.Add	('相殺情報: 科目ｺｰﾄﾞ'                );
				cTitleField.Add	('相殺情報: 科目名称'                );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ1'               );
				cTitleField.Add	('相殺情報: 補助名称1'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ2'               );
				cTitleField.Add	('相殺情報: 補助名称2'               );
				cTitleField.Add	('相殺情報: 補助ｺｰﾄﾞ3'               );
				cTitleField.Add	('相殺情報: 補助名称3'               );
				cTitleField.Add	('相殺情報: 消費税ｺｰﾄﾞ'              );
				cTitleField.Add	('相殺情報: 消費税率'                );
				cTitleField.Add	('相殺情報: 相殺金額'                );
//				cTitleField.Add	('その他情報: 取引先分類'            );         // <149> Del
// <149> 2006/10/11 H.Kawato Mod
//				cTitleField.Add	('その他情報: 受取人名称'            );
				cTitleField.Add	('共通情報: 受取人名称'              );
//				cTitleField.Add	('その他情報: 郵便番号(基番)'        );         // <149> Del
//				cTitleField.Add	('その他情報: 郵便番号(枝番)'        );         // <149> Del
//				cTitleField.Add	('その他情報: 電話番号'              );         // <149> Del
//				cTitleField.Add	('その他情報: 住所１'                );         // <149> Del
//				cTitleField.Add	('その他情報: 住所２'                );         // <149> Del
//				cTitleField.Add	('その他情報: 送付先部署'            );         // <149> Del
//				cTitleField.Add	('その他情報: 担当者'                );         // <149> Del
//				cTitleField.Add	('その他情報: 敬称区分'              );         // <149> Del
//				cTitleField.Add	('その他情報: 支払通知書区分'        );         // <149> Del
//				cTitleField.Add	('その他情報: 名寄せ支払先(親)ｺｰﾄﾞ'  );         // <149> Del
//				cTitleField.Add	('その他情報: 名寄せ支払先(親)名称'  );         // <149> Del
//				cTitleField.Add	('その他情報: 名寄せ親代替支払先ｺｰﾄﾞ');         // <149> Del
//				cTitleField.Add	('その他情報: 名寄せ親代替支払先名称');         // <149> Del
//				cTitleField.Add	('その他情報: 売上消費税ｺｰﾄﾞ'        );         // <149> Del
//				cTitleField.Add	('その他情報: 売上消費税率'          );         // <149> Del
//				cTitleField.Add	('その他情報: 仕入消費税ｺｰﾄﾞ'        );         // <149> Del
//				cTitleField.Add	('その他情報: 仕入消費税率'          );         // <149> Del
//				cTitleField.Add	('その他情報: 借方資金繰'            );         // <149> Del
//				cTitleField.Add	('その他情報: 貸方資金繰'            );         // <149> Del
//				cTitleField.Add ('締日'                              );         // <149> Del
//				cTitleField.Add ('予定月'                            );         // <149> Del
//				cTitleField.Add ('予定日'                            );         // <149> Del
//				cTitleField.Add ('休日'                              );         // <149> Del
//				cTitleField.Add ('締日'                              );         // <149> Del
//				cTitleField.Add ('予定月'                            );         // <149> Del
//				cTitleField.Add ('予定日'                            );         // <149> Del
//				cTitleField.Add ('休日'                              );         // <149> Del
//				cTitleField.Add ('締日'                              );         // <149> Del
//				cTitleField.Add ('予定月'                            );         // <149> Del
//				cTitleField.Add ('予定日'                            );         // <149> Del
//				cTitleField.Add ('休日'                              );         // <149> Del

				cMemDataField.Add ('strHojCode'                 );
				cMemDataField.Add ('strName'	                );
				cMemDataField.Add ('strNameSimple'              );
				cMemDataField.Add ('strAssociation'             );
				cMemDataField.Add ('strRecordClassDesc'         );
				cMemDataField.Add ('strAppDate'                 );
				cMemDataField.Add ('strDecDivisionDesc'         );
				cMemDataField.Add ('nPaymentNo01'               );
				cMemDataField.Add ('strPaymentDesc01'           );
				cMemDataField.Add ('nPaymentBasedValue01'       );
				cMemDataField.Add ('nPaymentMinimumPrice01'     );
				cMemDataField.Add ('nPaymentFractionPrice01'    );
				cMemDataField.Add ('strPaymentFractionDesc01'   );
				cMemDataField.Add ('nPaymentNo02'               );
				cMemDataField.Add ('strPaymentDesc02'           );
				cMemDataField.Add ('nPaymentBasedValue02'       );
				cMemDataField.Add ('nPaymentMinimumPrice02'     );
				cMemDataField.Add ('nPaymentFractionPrice02'    );
				cMemDataField.Add ('strPaymentFractionDesc02'   );
				cMemDataField.Add ('nPaymentNo03'               );
				cMemDataField.Add ('strPaymentDesc03'           );
				cMemDataField.Add ('nPaymentBasedValue03'       );
				cMemDataField.Add ('nPaymentMinimumPrice03'     );
				cMemDataField.Add ('nPaymentFractionPrice03'    );
				cMemDataField.Add ('strPaymentFractionDesc03'   );
				cMemDataField.Add ('nPaymentNo04'               );
				cMemDataField.Add ('strPaymentDesc04'           );
				cMemDataField.Add ('nPaymentBasedValue04'       );
				cMemDataField.Add ('nPaymentMinimumPrice04'     );
				cMemDataField.Add ('nPaymentFractionPrice04'    );
				cMemDataField.Add ('strPaymentFractionDesc04'   );
				cMemDataField.Add ('nPaymentNo05'               );
				cMemDataField.Add ('strPaymentDesc05'           );
				cMemDataField.Add ('nPaymentBasedValue05'       );
				cMemDataField.Add ('nPaymentMinimumPrice05'     );
				cMemDataField.Add ('nPaymentFractionPrice05'    );
				cMemDataField.Add ('strPaymentFractionDesc05'   );
				cMemDataField.Add ('nInfo01AccountCode'         );
				cMemDataField.Add ('strInfo01AccountCodeDesc'   );
				cMemDataField.Add ('strInfo01DepositDesc01'     );
				cMemDataField.Add ('strInfo01AccountNo01'       );
				cMemDataField.Add ('nInfo01BankCode'            );
				cMemDataField.Add ('nInfo01BranchCode'          );
				cMemDataField.Add ('strInfo01BankCodeDesc'      );
				cMemDataField.Add ('strInfo01BranchCodeDesc'    );
				cMemDataField.Add ('strInfo01BankCodeDescKana'  );
				cMemDataField.Add ('strInfo01BranchCodeDescKana');
				cMemDataField.Add ('strInfo01TranslationName'   );
				cMemDataField.Add ('strInfo01DepositDesc02'     );
				cMemDataField.Add ('strInfo01AccountNo02'       );
				cMemDataField.Add ('strInfo01ComDivisionDesc'   );
				cMemDataField.Add ('strInfo01ComCalculationDesc');
				cMemDataField.Add ('strInfo01PayDivisionDesc'   );
				cMemDataField.Add ('strInfo01FBDivisionDesc'    );
				cMemDataField.Add ('strInfo01VisitorCode01'     );
				cMemDataField.Add ('strInfo01VisitorCode02'     );
				cMemDataField.Add ('strInfo01EDIInfo'           );
				cMemDataField.Add ('nInfo02AccountCode'         );
				cMemDataField.Add ('strInfo02AccountCodeDesc'   );
				cMemDataField.Add ('strInfo02DepositDesc01'     );
				cMemDataField.Add ('strInfo02AccountNo01'       );
				cMemDataField.Add ('nInfo02BankCode'            );
				cMemDataField.Add ('nInfo02BranchCode'          );
				cMemDataField.Add ('strInfo02BankCodeDesc'      );
				cMemDataField.Add ('strInfo02BranchCodeDesc'    );
				cMemDataField.Add ('strInfo02BankCodeDescKana'  );
				cMemDataField.Add ('strInfo02BranchCodeDescKana');
				cMemDataField.Add ('strInfo02TranslationName'   );
				cMemDataField.Add ('strInfo02DepositDesc02'     );
				cMemDataField.Add ('strInfo02AccountNo02'       );
				cMemDataField.Add ('strInfo02ComDivisionDesc'   );
				cMemDataField.Add ('strInfo02ComCalculationDesc');
				cMemDataField.Add ('strInfo02PayDivisionDesc'   );
				cMemDataField.Add ('strInfo02FBDivisionDesc'    );
				cMemDataField.Add ('strInfo02VisitorCode01'     );
				cMemDataField.Add ('strInfo02VisitorCode02'     );
				cMemDataField.Add ('strInfo02EDIInfo'           );
				cMemDataField.Add ('nInfo02PaySight'            );
				cMemDataField.Add ('nInfo03AccountCode'         );
				cMemDataField.Add ('strInfo03AccountCodeDesc'   );
				cMemDataField.Add ('strInfo03DepositDesc'       );
				cMemDataField.Add ('strInfo03AccountNo'         );
				cMemDataField.Add ('strInfo03PosDivisionDesc'   );
				cMemDataField.Add ('strInfo03BurDivisionDesc'   );
				cMemDataField.Add ('nInfo03PaySight'            );
				cMemDataField.Add ('nInfo03DivSheets'           );
				cMemDataField.Add ('nInfo04AccountCode'         );
				cMemDataField.Add ('strInfo04AccountCodeDesc'   );
				cMemDataField.Add ('strInfo04DepositDesc'       );
				cMemDataField.Add ('strInfo04AccountNo'         );
				cMemDataField.Add ('strInfo04PosDivisionDesc'   );
				cMemDataField.Add ('strInfo04BurDivisionDesc'   );
				cMemDataField.Add ('nOffsetNo01'                );
				cMemDataField.Add ('nOffsetKmkCode01'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc01'     );
				cMemDataField.Add ('strOffsetHojCode0101'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0101'   );
				cMemDataField.Add ('strOffsetHojCode0201'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0201'   );
				cMemDataField.Add ('strOffsetHojCode0301'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0301'   );
				cMemDataField.Add ('nOffsetTaxCode01'           );
				cMemDataField.Add ('strOffsetTaxRateDesc01'     );
				cMemDataField.Add ('nOffsetPrice01'             );
				cMemDataField.Add ('nOffsetNo02'                );
				cMemDataField.Add ('nOffsetKmkCode02'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc02'     );
				cMemDataField.Add ('strOffsetHojCode0102'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0102'   );
				cMemDataField.Add ('strOffsetHojCode0202'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0202'   );
				cMemDataField.Add ('strOffsetHojCode0302'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0302'   );
				cMemDataField.Add ('nOffsetTaxCode02'           );
				cMemDataField.Add ('strOffsetTaxRateDesc02'     );
				cMemDataField.Add ('nOffsetPrice02'             );
				cMemDataField.Add ('nOffsetNo03'                );
				cMemDataField.Add ('nOffsetKmkCode03'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc03'     );
				cMemDataField.Add ('strOffsetHojCode0103'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0103'   );
				cMemDataField.Add ('strOffsetHojCode0203'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0203'   );
				cMemDataField.Add ('strOffsetHojCode0303'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0303'   );
				cMemDataField.Add ('nOffsetTaxCode03'           );
				cMemDataField.Add ('strOffsetTaxRateDesc03'     );
				cMemDataField.Add ('nOffsetPrice03'             );
				cMemDataField.Add ('nOffsetNo04'                );
				cMemDataField.Add ('nOffsetKmkCode04'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc04'     );
				cMemDataField.Add ('strOffsetHojCode0104'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0104'   );
				cMemDataField.Add ('strOffsetHojCode0204'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0204'   );
				cMemDataField.Add ('strOffsetHojCode0304'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0304'   );
				cMemDataField.Add ('nOffsetTaxCode04'           );
				cMemDataField.Add ('strOffsetTaxRateDesc04'     );
				cMemDataField.Add ('nOffsetPrice04'             );
				cMemDataField.Add ('nOffsetNo05'                );
				cMemDataField.Add ('nOffsetKmkCode05'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc05'     );
				cMemDataField.Add ('strOffsetHojCode0105'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0105'   );
				cMemDataField.Add ('strOffsetHojCode0205'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0205'   );
				cMemDataField.Add ('strOffsetHojCode0305'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0305'   );
				cMemDataField.Add ('nOffsetTaxCode05'           );
				cMemDataField.Add ('strOffsetTaxRateDesc05'     );
				cMemDataField.Add ('nOffsetPrice05'             );
				cMemDataField.Add ('nOffsetNo06'                );
				cMemDataField.Add ('nOffsetKmkCode06'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc06'     );
				cMemDataField.Add ('strOffsetHojCode0106'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0106'   );
				cMemDataField.Add ('strOffsetHojCode0206'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0206'   );
				cMemDataField.Add ('strOffsetHojCode0306'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0306'   );
				cMemDataField.Add ('nOffsetTaxCode06'           );
				cMemDataField.Add ('strOffsetTaxRateDesc06'     );
				cMemDataField.Add ('nOffsetPrice06'             );
				cMemDataField.Add ('nOffsetNo07'                );
				cMemDataField.Add ('nOffsetKmkCode07'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc07'     );
				cMemDataField.Add ('strOffsetHojCode0107'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0107'   );
				cMemDataField.Add ('strOffsetHojCode0207'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0207'   );
				cMemDataField.Add ('strOffsetHojCode0307'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0307'   );
				cMemDataField.Add ('nOffsetTaxCode07'           );
				cMemDataField.Add ('strOffsetTaxRateDesc07'     );
				cMemDataField.Add ('nOffsetPrice07'             );
				cMemDataField.Add ('nOffsetNo08'                );
				cMemDataField.Add ('nOffsetKmkCode08'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc08'     );
				cMemDataField.Add ('strOffsetHojCode0108'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0108'   );
				cMemDataField.Add ('strOffsetHojCode0208'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0208'   );
				cMemDataField.Add ('strOffsetHojCode0308'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0308'   );
				cMemDataField.Add ('nOffsetTaxCode08'           );
				cMemDataField.Add ('strOffsetTaxRateDesc08'     );
				cMemDataField.Add ('nOffsetPrice08'             );
				cMemDataField.Add ('nOffsetNo09'                );
				cMemDataField.Add ('nOffsetKmkCode09'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc09'     );
				cMemDataField.Add ('strOffsetHojCode0109'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0109'   );
				cMemDataField.Add ('strOffsetHojCode0209'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0209'   );
				cMemDataField.Add ('strOffsetHojCode0309'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0309'   );
				cMemDataField.Add ('nOffsetTaxCode09'           );
				cMemDataField.Add ('strOffsetTaxRateDesc09'     );
				cMemDataField.Add ('nOffsetPrice09'             );
				cMemDataField.Add ('nOffsetNo10'                );
				cMemDataField.Add ('nOffsetKmkCode10'           );
				cMemDataField.Add ('strOffsetKmkCodeDesc10'     );
				cMemDataField.Add ('strOffsetHojCode0110'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0110'   );
				cMemDataField.Add ('strOffsetHojCode0210'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0210'   );
				cMemDataField.Add ('strOffsetHojCode0310'       );
				cMemDataField.Add ('strOffsetHojCodeDesc0310'   );
				cMemDataField.Add ('nOffsetTaxCode10'           );
				cMemDataField.Add ('strOffsetTaxRateDesc10'     );
				cMemDataField.Add ('nOffsetPrice10'             );
//				cMemDataField.Add ('strClassCodeDesc'           );              // <149> Del
				cMemDataField.Add ('strReceiverName'            );
//				cMemDataField.Add ('nZipCodeUpper'              );              // <149> Del
//				cMemDataField.Add ('nZipCodeLower'              );              // <149> Del
//				cMemDataField.Add ('strTelephoneNo'             );              // <149> Del
//				cMemDataField.Add ('strAddressUpper'            );              // <149> Del
//				cMemDataField.Add ('strAddressLower'            );              // <149> Del
//				cMemDataField.Add ('strPostName'                );              // <149> Del
//				cMemDataField.Add ('strChargeName'              );              // <149> Del
//				cMemDataField.Add ('strResDivisionDesc'         );              // <149> Del
//				cMemDataField.Add ('strPasDivisionDesc'         );              // <149> Del
//				cMemDataField.Add ('strParentCode'              );              // <149> Del
//				cMemDataField.Add ('strParentCodeDesc'          );              // <149> Del
//				cMemDataField.Add ('strSubstCode'               );              // <149> Del
//				cMemDataField.Add ('strSubstCodeDesc'           );              // <149> Del
//				cMemDataField.Add ('nTaxCodeSales'              );              // <149> Del
//				cMemDataField.Add ('strTaxRateSalesDesc'        );              // <149> Del
//				cMemDataField.Add ('nTaxCodeStock'              );              // <149> Del
//				cMemDataField.Add ('strTaxRateStockDesc'        );              // <149> Del
//				cMemDataField.Add ('strFundCodeDebDesc'         );              // <149> Del
//				cMemDataField.Add ('strFundCodeCreDesc'         );              // <149> Del
//				cMemDataField.Add ('nPlanClosingDay01'          );              // <149> Del
//				cMemDataField.Add ('strPlanExpectMonthDesc01'   );              // <149> Del
//				cMemDataField.Add ('nPlanExpectDay01'           );              // <149> Del
//				cMemDataField.Add ('strPlanHolDivisionDesc01'   );              // <149> Del
//				cMemDataField.Add ('nPlanClosingDay02'          );              // <149> Del
//				cMemDataField.Add ('strPlanExpectMonthDesc02'   );              // <149> Del
//				cMemDataField.Add ('nPlanExpectDay02'           );              // <149> Del
//				cMemDataField.Add ('strPlanHolDivisionDesc02'   );              // <149> Del
//				cMemDataField.Add ('nPlanClosingDay03'          );              // <149> Del
//				cMemDataField.Add ('strPlanExpectMonthDesc03'   );              // <149> Del
//				cMemDataField.Add ('nPlanExpectDay03'           );              // <149> Del
//				cMemDataField.Add ('strPlanHolDivisionDesc03'   );              // <149> Del
			end;

		3:	begin																		// 名寄せ登録ﾘｽﾄ
				cTitleField.Add ('名寄せ支払先(親)ｺｰﾄﾞ');
				cTitleField.Add ('名寄せ支払先(親)名称');
				cTitleField.Add ('支払先ｺｰﾄﾞ'          );
				cTitleField.Add ('支払先名称'          );

				cMemDataField.Add ('strHojCodeParent'    );
				cMemDataField.Add ('strHojCodeParentDesc');
				cMemDataField.Add ('strHojCode'          );
				cMemDataField.Add ('strHojCodeDesc'      );
			end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnSetScreenDetails (nNCode: Extended): Boolean;
var
	dqMasterData: TMQuery;
    strSQL      : String;       // <149> 2006/10/11 H.Kawato Add

begin
	if	(m_pRec^.m_pChildForm = nil) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	m_fReadInformations	:= TRUE;

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
{
		SQL.Add   ('SELECT SUMKBN, GCode, RenSo, NM, NMK,TStartDate, TEndDate, PayRootKbn  ');
		SQL.Add   ('FROM   MTOKUI ');
		SQL.Add   ('WHERE  NCode = :strHojCode');

		ParamByName ('strHojCode'     ).asFloat	:= nNCode;
}
        strSQL  := '';
        strSQL  := strSQL + 'SELECT SUMKBN, GCode, RenSo, NM, NMK,TStartDate, TEndDate, PayRootKbn  ';
        strSQL  := strSQL + 'FROM   MTOKUI ';
        strSQL  := strSQL + 'WHERE  NCode = ' + FloatToStr(nNCode);

		SQL.Add   (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();


		if	(EOF) then
        begin
			fnInitializeScreenDetails ();

			fnSetScreenDetailInformations (nNCODE);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			m_fReadInformations	:= FALSE;

			Result	:= FALSE;
			Exit;
		end;

		if	(m_nCurCodeAttribute <= 1) then
		begin
			CmnEdit00001HojCodeNumeric.Value		:= StrToInt64 (FieldByName('GCODE').AsString);
			CmnEdit00001HojCodeNumeric.InputFlag	:= FALSE;
		end
		else
			CmnEdit00001HojCodeFree.Text	:= FieldByName('GCODE').AsString;


		if	(FieldByName ('SumKbn').AsInteger = 0) then									// 実在/合計区分: 0＝実在
		begin
// <149> 2006/10/11 H.Kawato Mod Start  実在・合計情報タブ
//			CmnTabDetail.Items [0].Selected	:= TRUE;
//			CmnTabDetail.Items [1].Selected	:= FALSE;
            CmnLabelDetail.Visible  := True;
			CmnLabelDetail.Caption  := '【実在】';
// <149> 2006/10/11 H.Kawato Mod End

			fnChangeConditionScreenDetails (TRUE);

            fnCheckTekiDate(dqMasterData);

//			CmnEdit00005AppDateStart.AsDateTime	:= FieldByName ('TStartDate').AsDateTime;
//			CmnEdit00006AppDateEnd  .AsDateTime	:= FieldByName ('TEndDate'  ).AsDateTime;
		end
		else																			// 実在/合計区分: 0≠合計
		begin
// <149> 2006/10/11 H.Kawato Mod Start  実在・合計情報タブ
//			CmnTabDetail.Items [1].Selected	:= TRUE;
//			CmnTabDetail.Items [0].Selected	:= FALSE;
            CmnLabelDetail.Visible  := True;
			CmnLabelDetail.Caption  := '【合計】';
// <149> 2006/10/11 H.Kawato Mod End

			fnChangeConditionScreenDetails (FALSE);
		end;

		CmnEdit00002Association.Text	:= FieldByName ('RenSo'   ).AsString;
		CmnEdit00003Name       .Text	:= FieldByName ('NM'  ).AsString;
		CmnEdit00004NameSimple .Text	:= FieldByName ('NMK').AsString;

		fnSetScreenDetailInformations (nNCODE);
    end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	m_fReadInformations	:= FALSE;

	Result	:= TRUE;
end;

// <149> 2006/10/11 H.Kawato Add Start 
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation00 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
        CmnEdit00011AssDivision.Value	    := FieldByName ('SateiKbn'  ).AsInteger;    // 査定方法
// <169> 2007/08/21 H.Kawato Add Start
        // ﾊﾞｰｼﾞｮﾝ5以下は預かり源泉税の該当ﾚｺｰﾄﾞが存在しない
        if (m_iVerData > 5) then
        begin
            // 預かり源泉税採用あり
            if (FieldByName ('GensenUseKbn').AsInteger > 0) then
            begin
                CmnLabelAssDivision.Enabled          := False;
                CmnEdit00011AssDivision.Enabled      := False;
                CmnLabel00011AssDivisionDesc.Enabled := False;

                // 預かり源泉税採用ありの場合は明細査定固定
                if (FieldByName ('SateiKbn').AsInteger <> 4) then
                    CmnEdit00011AssDivision.Value   := 4;
            end
            else
            begin
                CmnLabelAssDivision.Enabled          := True;
                CmnEdit00011AssDivision.Enabled      := True;
                CmnLabel00011AssDivisionDesc.Enabled := True;
            end;
        end;
// <169> 2007/08/21 H.Kawato Add End
// <185> ADD-STR
        if (fnCheckIsSpot(FieldByName('GCode').AsString) = True) then
        begin
            // スポット支払支払先は明細査定固定
            CmnLabelAssDivision.Enabled          := False;
            CmnEdit00011AssDivision.Enabled      := False;
            CmnLabel00011AssDivisionDesc.Enabled := False;

            if (FieldByName ('SateiKbn').AsInteger <> 4) then
                CmnEdit00011AssDivision.Value   := 4;
        end;
// <185> ADD-END
        fnGetDescriptionSelectedItem (CmnEdit00011AssDivision, strDescription);
        CmnLabel00011AssDivisionDesc.Caption	:= strDescription;

        CmnEdit00012DecPtnDivision.Value	:= FieldByName ('BunkaiPtn'  ).AsInteger;   // 分解パターン
        fnGetDescriptionSelectedItem (CmnEdit00012DecPtnDivision, strDescription);
        CmnLabel00012DecPtnDivisionDesc.Caption	:= strDescription;

// <184> ADD-STR
        if (m_iProAdoptKbn = 1) then
        begin
            if (fnCheckIsSpot(FieldByName('GCode').AsString) = True) then
            begin
                // スポット支払支払先は分解パターン選択不可
                CmnLabelDecPtnDivision.Enabled := False;
                CmnEdit00012DecPtnDivision.Enabled := False;
                CmnLabel00012DecPtnDivisionDesc.Enabled := False;
            end
// <202> ADD-STR
            else
            if (fnExistProjRecord(FieldByName('GCode').AsString) = True) then
            begin
                // プロジェクト別登録されている場合も分解パターン選択不可
                CmnLabelDecPtnDivision.Enabled := False;
                CmnEdit00012DecPtnDivision.Enabled := False;
                CmnLabel00012DecPtnDivisionDesc.Enabled := False;
            end
// <202> ADD-END
            else
            begin
                CmnLabelDecPtnDivision.Enabled := True;
                CmnEdit00012DecPtnDivision.Enabled := True;
                CmnLabel00012DecPtnDivisionDesc.Enabled := True;
            end;
        end;
// <184> ADD-END

// <170> 2007/12/13 H.Kawato Add Start
        CmnEdit00017SateiCalcKbn.Value  := FieldByName ('SateiCalcKbn'  ).AsInteger;    // 査定金額計算区分
        fnGetDescriptionSelectedItem (CmnEdit00017SateiCalcKbn, strDescription);
        CmnLabel00017SateiCalcKbnDesc.Caption   := strDescription;

    	fnChangeConditionSateiCalc  ();                                                 // 査定金額計算値
        CmnEdit00018SateiCalcValue.Value := FieldByName ('SateiCalc'    ).AsFloat;
// <170> 2007/12/13 H.Kawato Add End
// <222> ADD start
        // 外貨債務管理
        CmnEdit00019GaikaUse.Value	:= FieldByName ('GaikaKbn'  ).AsInteger;			// 採用区分
        fnGetDescriptionSelectedItem (CmnEdit00019GaikaUse, strDescription);
        CmnLabel00019GaikaUseDesc.Caption		:= strDescription;

        fnChangeConditionGaikaParts();                                                  // 外貨関係の制御
                                                                                        // 標準支払方法
        CmnEdit00020BasePayment.Value := fnDspGaiPayKbn(FieldByName ('GaiPayKbn').AsInteger);
        fnGetDescriptionSelectedItem (CmnEdit00020BasePayment, strDescription);
        CmnLabel00020BasePaymentDesc.Caption	:= strDescription;
// <222> ADD end
    end;


// <149> 2006/12/14 H.Kawato Add Start  // 分解パターンによりプロジェクトの使用可不可を切り替える
    if (m_iProAdoptKbn = 1) then
        fnBunkaiPtnChange();
// <149> 2006/12/14 H.Kawato Add End
end;
// <149> 2006/10/11 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation01 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
		CmnEdit01001DecDivision.Value	:= FieldByName ('BunkaiKbn').AsInteger;

// <149> 2006/10/11 H.Kawato Add Start
// <189> Mod ↓↓↓
//		if (FieldByName ('PriPayWay').AsInteger = 3) then                           // 優先支払方法
//			CmnEdit01030PriPayWayDivision.Value	:= 1
//		else
//			CmnEdit01030PriPayWayDivision.Value	:= 0;
   		CmnEdit01030PriPayWayDivision.Value	:= FieldByName ('PriPayWay').AsInteger;	// 優先支払方法
// <189> Mod ↑↑↑

    	m_nPriPayWay    := CmnEdit01030PriPayWayDivision.Value;
// <149> 2006/10/11 H.Kawato Add End

		fnSetPaymentRecords (FieldByName ('NCode').AsFloat, FieldByName ('BunkaiKbn').AsInteger);
// <149> 2006/10/11 H.Kawato Del Start
{
// <110> ↓
        CmnEdit01028PasDivision.Value	:= FieldByName ('LetterKbn'  ).AsInteger;	// 支払通知書区分
        fnGetDescriptionSelectedItem (CmnEdit01028PasDivision, strDescription);
        CmnLabel01028PasDivisionDesc.Caption	:= strDescription;
// <110> ↑

// <133> ↓
        CmnEdit01029AssDivision.Value	:= FieldByName ('SateiKbn'  ).AsInteger;	// 査定方法
        fnGetDescriptionSelectedItem (CmnEdit01029AssDivision, strDescription);
        CmnLabel01029AssDivisionDesc.Caption	:= strDescription;
// <133> ↑
}
// <149> 2006/10/11 H.Kawato Del End
    end;

	fnGetDescriptionSelectedItem (CmnEdit01001DecDivision, strDescription);
	CmnLabel01001DecDivisionDesc.Caption	:= strDescription;

// <149> 2006/10/11 H.Kawato Add Start
	fnGetDescriptionSelectedItem (CmnEdit01030PriPayWayDivision, strDescription);   // 優先支払方法
	CmnLabel01030PriPayWayDivisionDesc.Caption	:= strDescription;

    if (CmnEdit01030PriPayWayDivision.Value = 0) then           // 優先支払方法：なし
    begin
        CmnEdit01002PaymentColumnDivision.ArrowDisp     := adFocused;

        CmnEdit01002PaymentColumnDivision.ReadOnly      := FALSE;
        CmnEdit01003PaymentColumnBasedValue.ReadOnly    := FALSE;
        CmnEdit01002PaymentColumnDivision.TabStop       := TRUE;
        CmnEdit01003PaymentColumnBasedValue.TabStop     := TRUE;

        if (CmnEdit01001DecDivision.AsInteger = 0) then         // 分解方法: 0=比率
        begin
            CmnEdit01004PaymentColumnMinimumPrice.ReadOnly  := FALSE;
            CmnEdit01005PaymentColumnFractionPrice.ReadOnly := FALSE;
            CmnEdit01006PaymentColumnFraction.ReadOnly      := FALSE;
            CmnEdit01004PaymentColumnMinimumPrice.TabStop   := TRUE;
            CmnEdit01005PaymentColumnFractionPrice.TabStop  := TRUE;
            CmnEdit01006PaymentColumnFraction.TabStop       := TRUE;
        end;
    end
    else                                                        // 優先支払方法：あり
    begin
        CmnEdit01002PaymentColumnDivision.ArrowDisp     := adNone;

        CmnEdit01002PaymentColumnDivision.ReadOnly      := TRUE;
        CmnEdit01003PaymentColumnBasedValue.ReadOnly    := TRUE;
        CmnEdit01004PaymentColumnMinimumPrice.ReadOnly  := TRUE;
        CmnEdit01005PaymentColumnFractionPrice.ReadOnly := TRUE;
        CmnEdit01006PaymentColumnFraction.ReadOnly      := TRUE;
        CmnEdit01002PaymentColumnDivision.TabStop       := FALSE;
        CmnEdit01003PaymentColumnBasedValue.TabStop     := FALSE;
        CmnEdit01004PaymentColumnMinimumPrice.TabStop   := FALSE;
        CmnEdit01005PaymentColumnFractionPrice.TabStop  := FALSE;
        CmnEdit01006PaymentColumnFraction.TabStop       := FALSE;
    end;
// <149> 2006/10/11 H.Kawato Add End

	fnSaveDecomposeListRecords ();												    // 分解方法ｸﾞﾘｯﾄﾞ状態保存
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation02 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
//<100>		if	(FieldByName ('AccNo').IsNull) then										// 振込依頼口座ｺｰﾄﾞ
		if	(FieldByName ('GCode').IsNull) then
		begin
			CmnEdit02001AccountCode.Value		:= 0;
			CmnEdit02001AccountCode.InputFlag	:= TRUE;
		end
		else
		begin
//<100>			CmnEdit02001AccountCode.Value		:= FieldByName ('AccNo').AsInteger;
			CmnEdit02001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
			CmnEdit02001AccountCode.InputFlag	:= FALSE;
		end;

		if	(FieldByName ('BankCode').IsNull) then
		begin
			CmnEdit02002BankCode.Value	    := 0;										// 全銀協銀行ｺｰﾄﾞ
			CmnEdit02002BankCode.InputFlag	:= TRUE;
		end
		else
		begin
			CmnEdit02002BankCode.Value	    := FieldByName ('BankCode').AsInteger;		// 全銀協銀行ｺｰﾄﾞ
			CmnEdit02002BankCode.InputFlag	:= FALSE;
		end;

//<100>		if	(FieldByName ('BkBraCode').IsNull) then
		if	(FieldByName ('BranchCode').IsNull) then
		begin
			CmnEdit02003BranchCode.Value	    := 0;	 								// 全銀協支店ｺｰﾄﾞ
			CmnEdit02003BranchCode.InputFlag	:= TRUE;
		end
		else
		begin
//<100>		CmnEdit02003BranchCode.Value		:= FieldByName ('BkBraCode').AsInteger;	// 全銀協支店ｺｰﾄﾞ
			CmnEdit02003BranchCode.Value		:= FieldByName ('BranchCode').AsInteger;	// 全銀協支店ｺｰﾄﾞ
			CmnEdit02003BranchCode.InputFlag	:= FALSE;
		end;

		CmnEdit02004BankName       .Text	:= FieldByName ('BankName'     ).AsString;	// 銀行名称
//<100>	CmnEdit02005BankNameKana   .Text	:= FieldByName ('BankKanaName' ).AsString;	// 銀行名称(ｶﾅ)
//<100>	CmnEdit02006BranchName     .Text	:= FieldByName ('BkBraName'    ).AsString;	// 支店名称
//<100>	CmnEdit02007BranchNameKana .Text	:= FieldByName ('BraKanaName'  ).AsString;	// 支店名称(ｶﾅ)
    	CmnEdit02005BankNameKana   .Text	:= FieldByName ('BankKana'      ).AsString;	// 銀行名称(ｶﾅ)
		CmnEdit02006BranchName     .Text	:= FieldByName ('BranchName'    ).AsString;	// 支店名称
		CmnEdit02007BranchNameKana .Text	:= FieldByName ('BranchKana'    ).AsString;	// 支店名称(ｶﾅ)

		CmnEdit02008TranslationName.Text	:= FieldByName ('TransKanaName').AsString;	// ｶﾅ振込先名称
		CmnEdit02009DepDivision    .Value	:= FieldByName ('AccKbn'       ).AsInteger;	// 預金種別
		CmnEdit02011FBDivision     .Value	:= FieldByName ('FBSet'        ).AsInteger;	// FBｾｯﾄ区分

		CmnEdit02010AccountNo.Text	:= fnGetEditedAccountNumber (FieldByName ('AccNo').AsString);

		if	(Trim (FieldByName ('AiteNo1').AsString) = '') then							// 顧客ｺｰﾄﾞ1
			CmnEdit02012VisitorCode.Text	:= ''
		else
			CmnEdit02012VisitorCode.Text	:= fnGetEditedVisitorCode (FieldByName ('AiteNo1').AsString);

		if	(Trim (FieldByName ('AiteNo2').AsString) = '') then							// 顧客ｺｰﾄﾞ2
			CmnEdit02013VisitorCode.Text	:= ''
		else
			CmnEdit02013VisitorCode.Text	:= fnGetEditedVisitorCode (FieldByName ('AiteNo2').AsString);

		CmnEdit02014EDIInfo       .Text		:= FieldByName ('EDIInfo'    ).AsString; 	// EDI情報
		CmnEdit02015ComDivision   .Value	:= FieldByName ('ChargeFutan').AsInteger;	// 手数料負担区分
		CmnEdit02016ComCalculation.Value	:= FieldByName ('ChargeKbn'  ).AsInteger;	// 手数料計算区分
		CmnEdit02017PayDivision   .Value	:= FieldByName ('TransKbn'   ).AsINteger;	// 振込方法

// <137> 2006/06/28 H.Kawato Add Start
		CmnEdit02018DebitDivision .Value	:= FieldByName ('AccAutoKbn' ).AsInteger;	// 口座自動引落区分
		CmnEdit02019DebitData     .Value	:= FieldByName ('AccAutoData').AsInteger;	// 自動引落支払データ
// <137> 2006/06/28 H.Kawato Add End

// <110>		CmnEdit06003ReceiverName.Text	:= FieldByName ('UketoriName').AsString;		// ※特殊
        CmnEdit01027ReceiverName.Text	    := FieldByName ('UketoriName').AsString;    // 受取人名称 <110>
	end;

	fnCheckEditNumValueAccountCode (2, 1);

	fnGetDescriptionSelectedItem (CmnEdit02009DepDivision   , strDescription);
	CmnLabel02009DepDivisionDesc   .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit02011FBDivision    , strDescription);
	CmnLabel02011FBDivisionDesc    .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit02015ComDivision   , strDescription);
	CmnLabel02015ComDivisionDesc   .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit02016ComCalculation, strDescription);
	CmnLabel02016ComCalculationDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit02017PayDivision   , strDescription);
	CmnLabel02017PayDivisionDesc   .Caption	:= strDescription;

// <137> 2006/06/28 H.Kawato Add Start
	fnGetDescriptionSelectedItem (CmnEdit02018DebitDivision , strDescription);
	CmnLabel02018DebitDivisionDesc .Caption	:= strDescription;
// <137> 2006/06/28 H.Kawato Add End
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation03 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
//<100>	if	(FieldByName ('AccNo').IsNull) then										// 振込依頼口座ｺｰﾄﾞ
		if	(FieldByName ('GCode').IsNull) then										// 振込依頼口座ｺｰﾄﾞ
		begin
			CmnEdit03001AccountCode.Value		:= 0;
			CmnEdit03001AccountCode.InputFlag	:= TRUE;
		end
		else
		begin
//			CmnEdit03001AccountCode.Value		:= FieldByName ('AccNo').AsInteger;
			CmnEdit03001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
			CmnEdit03001AccountCode.InputFlag	:= FALSE;
		end;

		if	(FieldByName ('BankCode').IsNull) then
		begin
			CmnEdit03002BankCode.Value	    := 0;										// 全銀協銀行ｺｰﾄﾞ
			CmnEdit03002BankCode.InputFlag	:= TRUE;
		end
		else
		begin
			CmnEdit03002BankCode.Value	    := FieldByName ('BankCode').AsInteger;		// 全銀協銀行ｺｰﾄﾞ
			CmnEdit03002BankCode.InputFlag	:= FALSE;
		end;

//		if	(FieldByName ('BkBraCode').IsNull) then
		if	(FieldByName ('BranchCode').IsNull) then
		begin
			CmnEdit03003BranchCode.Value		:= 0;									// 全銀協支店ｺｰﾄﾞ
			CmnEdit03003BranchCode.InputFlag	:= TRUE;
		end
		else
		begin
//			CmnEdit03003BranchCode.Value		:= FieldByName ('BkBraCode').AsInteger;	// 全銀協支店ｺｰﾄﾞ
			CmnEdit03003BranchCode.Value		:= FieldByName ('BranchCode').AsInteger;	// 全銀協支店ｺｰﾄﾞ
			CmnEdit03003BranchCode.InputFlag	:= FALSE;
		end;

		CmnEdit03004BankName       .Text	:= FieldByName ('BankName'     ).AsString;	// 銀行名称
//		CmnEdit03005BankNameKana   .Text	:= FieldByName ('BankKanaName' ).AsString;	// 銀行名称(ｶﾅ)
//		CmnEdit03006BranchName     .Text	:= FieldByName ('BkBraName'    ).AsString;	// 支店名称
//		CmnEdit03007BranchNameKana .Text	:= FieldByName ('BraKanaName'  ).AsString;	// 支店名称(ｶﾅ)
		CmnEdit03005BankNameKana   .Text	:= FieldByName ('BankKana' ).AsString;	// 銀行名称(ｶﾅ)
		CmnEdit03006BranchName     .Text	:= FieldByName ('BranchName'  ).AsString;	// 支店名称
		CmnEdit03007BranchNameKana .Text	:= FieldByName ('BranchKana'  ).AsString;	// 支店名称(ｶﾅ)


		CmnEdit03008TranslationName.Text	:= FieldByName ('TransKanaName').AsString;	// ｶﾅ振込先名称
		CmnEdit03009DepDivision    .Value	:= FieldByName ('AccKbn'       ).AsInteger;	// 預金種別
		CmnEdit03011FBDivision     .Value	:= FieldByName ('FBSet'        ).AsInteger;	// FBｾｯﾄ区分

		CmnEdit03010AccountNo.Text	:= fnGetEditedAccountNumber (FieldByName ('AccNo').AsString);

		if	(Trim (FieldByName ('AiteNo1').AsString) = '') then							// 顧客ｺｰﾄﾞ1
			CmnEdit03012VisitorCode.Text	:= ''
		else
			CmnEdit03012VisitorCode.Text	:= fnGetEditedVisitorCode (FieldByName ('AiteNo1').AsString);

		if	(Trim (FieldByName ('AiteNo2').AsString) = '') then							// 顧客ｺｰﾄﾞ2
			CmnEdit03013VisitorCode.Text	:= ''
		else
			CmnEdit03013VisitorCode.Text	:= fnGetEditedVisitorCode (FieldByName ('AiteNo2').AsString);

		CmnEdit03014EDIInfo       .Text		:= FieldByName ('EDIInfo'    ).AsString; 	// EDI情報
		CmnEdit03015ComDivision   .Value	:= FieldByName ('ChargeFutan').AsInteger;	// 手数料負担区分
		CmnEdit03016ComCalculation.Value	:= FieldByName ('ChargeKbn'  ).AsInteger;	// 手数料計算区分
		CmnEdit03017PayDivision   .Value	:= FieldByName ('TransKbn'   ).AsInteger;	// 振込方法
		CmnEdit03018PaySight      .Value	:= FieldByName ('Site'       ).AsInteger;	// 振込ｻｲﾄ
		CmnEdit03020BeforeLimit   .Value	:= FieldByName ('PayKbn1'    ).AsInteger;	// 期日前支払区分 <197> ADD
// <220> ADD-STR
		if	(FieldByName ('KFuriGCode').IsNull) then										// 振込依頼口座ｺｰﾄﾞ
		begin
			CmnEdit03021AccountCode.Value		:= 0;
			CmnEdit03021AccountCode.InputFlag	:= TRUE;
		end
		else
		begin
			CmnEdit03021AccountCode.Value		:= FieldByName ('KFuriGCode').AsInteger;
			CmnEdit03021AccountCode.InputFlag	:= FALSE;
		end;
// <220> ADD-END
	end;

	fnCheckEditNumValueAccountCode (3, 1);

	fnGetDescriptionSelectedItem (CmnEdit03009DepDivision   , strDescription);
	CmnLabel03009DepDivisionDesc   .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit03011FBDivision    , strDescription);
	CmnLabel03011FBDivisionDesc    .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit03015ComDivision   , strDescription);
	CmnLabel03015ComDivisionDesc   .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit03016ComCalculation, strDescription);
	CmnLabel03016ComCalculationDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit03017PayDivision   , strDescription);
	CmnLabel03017PayDivisionDesc   .Caption	:= strDescription;

// <197> ADD-STR
	fnGetDescriptionSelectedItem (CmnEdit03020BeforeLimit   , strDescription);
	CmnLabel03020BeforeLimitDesc   .Caption	:= strDescription;
// <197> ADD-END

	fnCheckEditNumValueAccountCode (3, 21);     // <220> ADD
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
// <211> MOD-STR
{procedure	TJNTCRP004006f.fnSetScreenDetailInformation04 (dqMasterData: TMQuery; nDivision: Integer);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
		if	(nDivision = 0) then														// 手形情報
		begin
//HIS0037			if	(FieldByName ('AccNo').IsNull) then									// 振込依頼口座ｺｰﾄﾞ
			if	(FieldByName ('GCode').IsNull) then									// 振込依頼口座ｺｰﾄﾞ
			begin
				CmnEdit04001AccountCode.Value		:= 0;
				CmnEdit04001AccountCode.InputFlag	:= TRUE;
			end
			else
			begin
//HIS0037				CmnEdit04001AccountCode.Value		:= FieldByName ('AccNo').AsInteger;
				CmnEdit04001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
				CmnEdit04001AccountCode.InputFlag	:= FALSE;
			end;

			CmnEdit04002PaySight   .Value	:= FieldByName ('Site'         ).AsInteger;	// 手形ｻｲﾄ
			CmnEdit04003DivSheets  .Value	:= FieldByName ('TegBunkatuMax').AsInteger;	// 手形分割枚数
			CmnEdit04004PosDivision.Value	:= FieldByName ('TegYusouKbn'  ).AsInteger;	// 手形郵送区分
			CmnEdit04005BurDivision.Value	:= FieldByName ('TegYusouFutan').AsInteger;	// 手形郵送料負担区分
		end
		else																			// 小切手情報
		begin
//HIS0037			if	(FieldByName ('AccNo').IsNull) then									// 振込依頼口座ｺｰﾄﾞ
			if	(FieldByName ('GCode').IsNull) then									// 振込依頼口座ｺｰﾄﾞ
			begin
				CmnEdit04006AccountCode.Value		:= 0;
				CmnEdit04006AccountCode.InputFlag	:= TRUE;
			end
			else
			begin
//HIS0037				CmnEdit04006AccountCode.Value		:= FieldByName ('AccNo').AsInteger;
				CmnEdit04006AccountCode.Value		:= FieldByName ('GCode').AsInteger;
				CmnEdit04006AccountCode.InputFlag	:= FALSE;
			end;

			CmnEdit04007PosDivision.Value	:= FieldByName ('TegYusouKbn'  ).AsInteger;	// 小切手郵送区分
			CmnEdit04008BurDivision.Value	:= FieldByName ('TegYusouFutan').AsInteger;	// 小切手郵送料負担区分
		end;
	end;

	if	(nDivision = 0) then															// 手形情報
	begin
		fnCheckEditNumValueAccountCode (4, 1);											// 依頼口座ｺｰﾄﾞ

		fnGetDescriptionSelectedItem (CmnEdit04004PosDivision, strDescription);
		CmnLabel04004PosDivisionDesc.Caption	:= strDescription;

		fnGetDescriptionSelectedItem (CmnEdit04005BurDivision, strDescription);
		CmnLabel04005BurDivisionDesc.Caption	:= strDescription;

		fnChangeConditionPostage (4);													// 手形郵送区分
	end
	else																				// 小切手情報
	begin
		fnCheckEditNumValueAccountCode (4, 6);											// 依頼口座ｺｰﾄﾞ

		fnGetDescriptionSelectedItem (CmnEdit04007PosDivision, strDescription);
		CmnLabel04007PosDivisionDesc.Caption	:= strDescription;

		fnGetDescriptionSelectedItem (CmnEdit04008BurDivision, strDescription);
		CmnLabel04008BurDivisionDesc.Caption	:= strDescription;

		fnChangeConditionPostage (7);													// 小切手郵送区分
	end;
end;}
procedure	TJNTCRP004006f.fnSetScreenDetailInformation04 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
        if	(FieldByName ('GCode').IsNull) then									// 振込依頼口座ｺｰﾄﾞ
        begin
            CmnEdit04001AccountCode.Value		:= 0;
            CmnEdit04001AccountCode.InputFlag	:= TRUE;
        end
        else
        begin
            CmnEdit04001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
            CmnEdit04001AccountCode.InputFlag	:= FALSE;
        end;

        CmnEdit04002PaySight   .Value	:= FieldByName ('Site'         ).AsInteger;	// 手形ｻｲﾄ
        CmnEdit04003DivSheets  .Value	:= FieldByName ('TegBunkatuMax').AsInteger;	// 手形分割枚数
        CmnEdit04004PosDivision.Value	:= FieldByName ('TegYusouKbn'  ).AsInteger;	// 手形郵送区分
        CmnEdit04005BurDivision.Value	:= FieldByName ('TegYusouFutan').AsInteger;	// 手形郵送料負担区分

		// 電子記録債権
		CmnEdit04006ERKbn .Value	:= FieldByName ('ERKbn' ).AsInteger;	// 採用区分

		if	(FieldByName ('BankCode').IsNull) then
		begin
			CmnEdit04007BankCode.Value	    := 0;										// 全銀協銀行ｺｰﾄﾞ
			CmnEdit04007BankCode.InputFlag	:= TRUE;
		end
		else
		begin
			CmnEdit04007BankCode.Value	    := FieldByName ('BankCode').AsInteger;		// 全銀協銀行ｺｰﾄﾞ
			CmnEdit04007BankCode.InputFlag	:= FALSE;
		end;

		if	(FieldByName ('BranchCode').IsNull) then
		begin
			CmnEdit04008BranchCode.Value	    := 0;	 								// 全銀協支店ｺｰﾄﾞ
			CmnEdit04008BranchCode.InputFlag	:= TRUE;
		end
		else
		begin
			CmnEdit04008BranchCode.Value		:= FieldByName ('BranchCode').AsInteger;	// 全銀協支店ｺｰﾄﾞ
			CmnEdit04008BranchCode.InputFlag	:= FALSE;
		end;

		CmnEdit04009BankName       .Text	:= FieldByName ('BankName'     ).AsString;	// 銀行名称
    	CmnEdit04010BankNameKana   .Text	:= FieldByName ('BankKana'      ).AsString;	// 銀行名称(ｶﾅ)
		CmnEdit04011BranchName     .Text	:= FieldByName ('BranchName'    ).AsString;	// 支店名称
		CmnEdit04012BranchNameKana .Text	:= FieldByName ('BranchKana'    ).AsString;	// 支店名称(ｶﾅ)

		CmnEdit04013TranslationName.Text	:= FieldByName ('TransKanaName').AsString;	// ｶﾅ振込先名称
		CmnEdit04014DepDivision    .Value	:= FieldByName ('AccKbn'       ).AsInteger;	// 預金種別
        if (CmnEdit04014DepDivision    .Value = 0) then
            CmnEdit04014DepDivision    .Value := 1;

		CmnEdit04015AccountNo.Text	:= fnGetEditedAccountNumber (FieldByName ('AccNo').AsString);

		CmnEdit04016ComDivision   .Value	:= FieldByName ('ChargeFutan').AsInteger;	// 手数料負担区分
        if (CmnEdit04016ComDivision    .Value = 0) then
            CmnEdit04016ComDivision    .Value := 1;
		CmnEdit04017ComCalculation.Value	:= FieldByName ('ChargeKbn'  ).AsInteger;	// 手数料計算区分

        CmnEdit04018Free1           .Text	:= FieldByName ('VFree1'     ).AsString;	// フリー項目１
        CmnEdit04019Free2           .Text	:= FieldByName ('VFree2'     ).AsString;	// フリー項目２
        CmnEdit04020Free3           .Text	:= FieldByName ('VFree3'     ).AsString;	// フリー項目３
        CmnEdit04021Free4           .Text	:= FieldByName ('VFree4'     ).AsString;	// フリー項目４
        CmnEdit04022Free5           .Text	:= FieldByName ('VFree5'     ).AsString;	// フリー項目５
	end;

// <216> DEL    fnChangeConditionERKbn ();                                                  // 電子債権採用区分

    fnCheckEditNumValueAccountCode (4, 1);										// 依頼口座ｺｰﾄﾞ

    fnGetDescriptionSelectedItem (CmnEdit04004PosDivision, strDescription);
    CmnLabel04004PosDivisionDesc.Caption	:= strDescription;

    fnGetDescriptionSelectedItem (CmnEdit04005BurDivision, strDescription);
    CmnLabel04005BurDivisionDesc.Caption	:= strDescription;

    fnChangeConditionPostage (4);												// 手形郵送区分

	// 電子記録債権
	fnGetDescriptionSelectedItem (CmnEdit04006ERKbn   , strDescription);
	CmnLabel04006ERKbnDesc         .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit04014DepDivision   , strDescription);
	CmnLabel04014DepDivisionDesc   .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit04016ComDivision   , strDescription);
	CmnLabel04016ComDivisionDesc   .Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit04017ComCalculation, strDescription);
	CmnLabel04017ComCalculationDesc.Caption	:= strDescription;

// <216> ADD-STR
    // 電子債権採用区分による項目使用可否制御は最後に行う
    fnChangeConditionERKbn ();                                                  // 電子債権採用区分
// <216> ADD-END

    fnGetFreeInfoFromApgFile();                                                 // フリー項目情報取得 <217> ADD
end;
// <211> MOD-END

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation05 (dqMasterData: TMQuery);
begin
	fnSetMemDataOffsetRecords (dqMasterData.FieldByName ('NCode').AsFloat);

	CmnEdit05001SeqNo.Value	:= 1;														// 相殺№

	fnSetRecordOffsetJournalInfo ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation06 (dqMasterData: TMQuery);
// <149> 2006/10/11 H.Kawato Del
{
var
	strDescription: String;
    nNCODE        : Extended;
}
// <149> 2006/10/11 H.Kawato Del
begin
// <149> 2006/10/11 H.Kawato Del Start
{
	with (dqMasterData) do
	begin
//		CmnEdit06001ClassCode.Value	:= FieldByName ('BunCode').AsInteger;				// 取引先分類

		if	(m_nCurCodeAttribute <= 1) then
		begin
			if	((not CmnEdit06002HojCodeNumeric.Enabled) or
				 (FieldByName ('CngNCode').AsFloat = 0)) then
			begin
                nNCODE      := 0;

				CmnEdit06002HojCodeNumeric.Value		:= 0;
				CmnEdit06002HojCodeNumeric.InputFlag	:= TRUE;
			end
			else
			begin
                nNCODE      := FieldbyName ('CngNCode').AsFloat;

				CmnEdit06002HojCodeNumeric.Value		:= nNCode;
				CmnEdit06002HojCodeNumeric.InputFlag	:= FALSE;
			end;
		end
		else
		begin
			if	(CmnEdit06002HojCodeFree.Enabled) then
			begin
                nNCODE      := FieldbyName ('CngNCode').AsFloat;
				CmnEdit06002HojCodeFree.Text	:= FloatToStr(nNCode);
			end
			else
			begin
                nNCODE      := 0;
				CmnEdit06002HojCodeFree.Text	:= '';
			end;
		end;

		strDescription	:= '';

		if	nNCode <> 0 then
			fnCheckValidHojCode (MASTER_CUSTOMER, nNCode, strDescription, OPTION_GENERAL);

		CmnLabel06002HojCodeDesc.Caption	:= strDescription;

		CmnEdit06004ZipCodeUpper.Value	:= FieldByName ('PostNo1').AsInteger;           // 郵便番号(基番)

		if	(FieldByName ('PostNo2').IsNull) then										// 郵便番号(枝番)
		begin
			CmnEdit06005ZipCodeLower.Value		:= 0;
			CmnEdit06005ZipCodeLower.InputFlag	:= TRUE;
		end
		else
		begin
			CmnEdit06005ZipCodeLower.Value		:= FieldByName ('PostNo2').AsInteger;
			CmnEdit06005ZipCodeLower.InputFlag	:= FALSE;
		end;

		CmnEdit06006Address    .Text	:= FieldByName ('Ads1'   ).AsString;		    // 住所(上段)
		CmnEdit06007Address    .Text	:= FieldByName ('Ads2'   ).AsString;		    // 住所(下段)
		CmnEdit06008TelephoneNo.Text	:= FieldByName ('Tel1'   ).AsString;		    // 電話番号
		CmnEdit06009PostName   .Text	:= FieldByName ('SectionName').AsString;		// 送付先部署名称

		CmnEdit06010ChargeName .Text	:= FieldByName ('TanNm' ).AsString;		        // 担当者名称
		CmnEdit06011ResDivision.Text	:= FieldByName ('KeisyoKbn'   ).AsString;		// 敬称区分
// <110>		CmnEdit06012PasDivision.Value	:= FieldByName ('LetterKbn'  ).AsInteger;		// 支払通知書区分
//		CmnEdit06013TaxCode    .Value	:= FieldByName ('STaxCode'   ).AsInteger;		// 売上消費税ｺｰﾄﾞ
//		CmnEdit06015TaxCode    .Value	:= FieldByName ('BTaxCode'   ).AsInteger;		// 仕入消費税ｺｰﾄﾞ
//		CmnEdit06014TaxRate    .Value	:= FieldByName ('STaxRate'   ).AsInteger;		// 売上消費税率ｺｰﾄﾞ
//		CmnEdit06016TaxRate    .Value	:= FieldByName ('BTaxRate'   ).AsInteger;		// 仕入消費税率ｺｰﾄﾞ
	end;

	fnGetDescriptionSelectedItem (CmnEdit06001ClassCode  , strDescription);
	CmnLabel06001ClassCodeDesc  .Caption	:= strDescription;

//	fnGetDescriptionSelectedItem (CmnEdit06011ResDivision, strDescription);
//	CmnLabel06011ResDivisionDesc.Caption	:= strDescription;

// <110>	fnGetDescriptionSelectedItem (CmnEdit06012PasDivision, strDescription);
// <110>	CmnLabel06012PasDivisionDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit06013TaxCode, strDescription);
	CmnLabel06013TaxCodeDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit06014TaxRate, strDescription);
	CmnLabel06014TaxRateDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit06015TaxCode, strDescription);
	CmnLabel06015TaxCodeDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit06016TaxRate, strDescription);
	CmnLabel06016TaxRateDesc.Caption	:= strDescription;

	fnChangeConditionTaxRelated (13);
	fnChangeConditionTaxRelated (15);
}
// <149> 2006/10/11 H.Kawato Del
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformation07 (dqMasterData: TMQuery);
// <149> 2006/10/11 H.Kawato Del Start
{
var
	nRow		  : Integer;
	strDescription: String;
}
// <149> 2006/10/11 H.Kawato Del End
begin
// <149> 2006/10/11 H.Kawato Del Start
{
	with (dqMasterData) do
	begin
//		CmnEdit07001FundCode.Value	:= FieldByName ('SDebitCash' ).AsInteger;			// 借方資金繰ｺｰﾄﾞ
//		CmnEdit07002FundCode.Value	:= FieldByName ('SCreditCash').AsInteger;			// 貸方資金繰ｺｰﾄﾞ

		for	nRow := 1 to 3 do
		begin
			if	((FieldByName ('PCloseDay' + IntToStr (nRow)).IsNull) or
				 (FieldByName ('PCloseDay' + IntToStr (nRow)).AsInteger = 0)) then
			begin
				TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).Value		:= 0;
				TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).InputFlag	:= TRUE;
			end
			else
			begin
				TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).Value	:=
															FieldByName ('PCloseDay' + IntToStr (nRow)).AsInteger;
				TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).InputFlag	:= FALSE;
			end;

			fnChangeConditionPayExpect (3 + (nRow - 1) * 4);					//<#5>

			if	(TMNumEdit (MJSFindCtrl (Self, Format (_ClsDay, [3 + (nRow - 1) * 4]))).AsInteger <> 0) then
			begin
				TMComboBox (MJSFindCtrl (Self, Format (_ExpMon, [4 + (nRow - 1) * 4]))).ItemIndex	:=
														FieldByName ('PayMonth'    + IntToStr (nRow)).AsInteger;
				TMNumEdit  (MJSFindCtrl (Self, Format (_ExpDay, [5 + (nRow - 1) * 4]))).Value		:=
														FieldByName ('PayDay'      + IntToStr (nRow)).AsInteger;
				TMComboBox (MJSFindCtrl (Self, Format (_HolDiv, [6 + (nRow - 1) * 4]))).ItemIndex	:=
														FieldByName ('PHolidayKbn' + IntToStr (nRow)).AsInteger;
			end;

//			fnChangeConditionPayExpect (3 + (nRow - 1) * 4);					//<#5>(上記に移動)
		end;
	end;

	if	(CmnEdit07001FundCode.Value = 0) then
		strDescription	:= '科目に従う'
	else
		fnCheckValidFundCode (CmnEdit07001FundCode, strDescription);

	CmnLabel07001FundCodeDesc.Caption	:= strDescription;

	if	(CmnEdit07002FundCode.Value = 0) then
		strDescription	:= '科目に従う'
	else
		fnCheckValidFundCode (CmnEdit07002FundCode, strDescription);

	CmnLabel07002FundCodeDesc.Caption	:= strDescription;
}
// <149> 2006/10/11 H.Kawato Del End
end;

// <222> ADD start
//*****************************************************************************
//	Process			:	電信送金情報タブの内容表示
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	dqMasterData	: データ取得済みクエリ
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnSetScreenDetailInformation09 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
    	// 依頼口座ｺｰﾄﾞ
        if	(FieldByName ('GCode').IsNull) then
        begin
            CmnEdit09001AccountCode.Value		:= 0;
            CmnEdit09001AccountCode.InputFlag	:= TRUE;
        end
        else
        begin
            CmnEdit09001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
            CmnEdit09001AccountCode.InputFlag	:= FALSE;
        end;

        // 手数料口座ｺｰﾄﾞ
        if	(FieldByName ('GaiGCode').IsNull) then
        begin
            CmnEdit09002AccountCode.Value		:= 0;
            CmnEdit09002AccountCode.InputFlag	:= TRUE;
        end
        else
        begin
            CmnEdit09002AccountCode.Value		:= FieldByName ('GaiGCode').AsInteger;
            CmnEdit09002AccountCode.InputFlag	:= FALSE;
        end;

		// 手数料負担
		CmnEdit09003ComDivision.Value			:= FieldByName ('ChargeFutan').AsInteger;

		// 手数料計算区分
		CmnEdit09004ComCalculation.Value		:= FieldByName ('ChargeKbn'  ).AsInteger;

        //<222-8>ADD↓
        // 取引先照会番号
        CmnEdit09006CustomerInquiryNo.Text		:= FieldByName ('EdiInfo').AsString;

        // 送金目的No
        if	(FieldByName ('PayHeadingNo').IsNull) then
        begin
            CmnEdit09007PayHeadingNo.Value		:= 0;
            CmnEdit09007PayHeadingNo.InputFlag	:= TRUE;
        end
        else
        begin
        	CmnEdit09007PayHeadingNo.Value		:= FieldByName ('PayHeadingNo').AsInteger;
			CmnEdit09007PayHeadingNo.InputFlag	:= FALSE;
        end;

        // 送金目的内容
        CmnEdit09008SendPurpose.Text			:= FieldByName ('SendPurpose').AsString;

        // 送金許可No
        CmnEdit09009PermLicenceNo.Text			:= FieldByName ('PermLicenceNo').AsString;

        // 送金許可日付
        if	(FieldByName ('PermDate').IsNull) then
        begin
    		CmnEdit09010PermDate.Value			:= 0;
    		CmnEdit09010PermDate.InputFlag		:= TRUE;
        end
        else
        begin
            CmnEdit09010PermDate.AsDateTime		:= MjsDateCtrl.MjsIntToDate(FieldByName ('PermDate').AsInteger,#0);
            CmnEdit09010PermDate.InputFlag		:= FALSE;
        end;
        //<222-8>ADD↑
	end;

    fnCheckEditNumValueAccountCode(9, 1);	// 振込依頼口座ｺｰﾄﾞ
    fnCheckEditNumValueAccountCode(9, 2);	// 手数料依頼口座ｺｰﾄﾞ

	fnGetDescriptionSelectedItem (CmnEdit09003ComDivision,		strDescription);
	CmnLabel09003ComDivisionDesc.Caption	:= strDescription;

	fnGetDescriptionSelectedItem (CmnEdit09004ComCalculation,	strDescription);
	CmnLabel09004ComCalculationDesc.Caption	:= strDescription;
end;

//*****************************************************************************
//	Process			:	電信送金情報タブの内容表示(可変項目情報)
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	dqMasterData	: データ取得済みクエリ
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnSetScreenDetailInformation09_2 (dqMasterData: TMQuery);
var
	strID			: String;
	objEvtBefore	: TDataSetNotifyEvent;
	objEvtAfter		: TDataSetNotifyEvent;
// <GAI-2> ADD-STR
    IsDefault       : boolean;

    // 取引先マスタにレコードが存在するか
    function    IsExistPayVariableItem:Boolean;
    begin
        result := False;
        dqMasterData.first;                         // データセット内の最初のレコードにカーソルを移動
        while dqMasterData.Eof = False do           // データが無いと、False
        begin
            if (dqMasterData.FieldByName('ItemExistKbn').AsInteger = 1) then        // 取引先の支払可変情報マスタに登録がある場合
            begin
                result := True;
                break;
            end;
            dqMasterData.Next;
        end;
        dqMasterData.first;                         // データセット内の最初のレコードにカーソルを移動
    end;
// <GAI-2> ADD-END
begin
    objEvtBefore := CmnMemDataVar.BeforePost;
    objEvtAfter := CmnMemDataVar.AfterPost;
    IsDefault   := not IsExistPayVariableItem;        // <GAI-2> ADD

	try
		CmnMemDataVar.BeforePost := nil;
		CmnMemDataVar.AfterPost := nil;
        with dqMasterData do
        begin
            while not Eof do
            begin
// <GAI-2> ADD-STR
                if (IsDefault = True) then // データがない→マスタの初期表示あり(DefaultKbn=1)のみ表示
                begin
                    if (FieldByName('DefaultKbn').AsInteger = 0) then
                    begin
                        Next;
                        Continue;
                    end;
                end
                else //データあり→マスタに初期表示に関係なく存在するデータ(ItemExistKbn=1)を全て表示
                begin
                    if (FieldByName('ItemExistKbn').AsInteger = 0) then
                    begin
                        Next;
                        Continue;
                    end;
                end;
// <GAI-2> ADD-END

                CmnMemDataVar.Append;
                strID := FieldByName('ItemID').AsString;
                CmnMemDataVar.FieldByName('ID').AsString 			:= strID;
                CmnMemDataVar.FieldByName('SimpleName').AsString 	:= FieldByName('SimpleName').AsString;
                CmnMemDataVar.FieldByName('Digit').AsInteger 		:= FieldByName('MaxDigit').AsInteger;
                CmnMemDataVar.FieldByName('ItemValue').AsString 	:= FieldByName('ItemValue').AsString;
                CmnMemDataVar.FieldByName('Remarks').AsString 		:= FieldByName('Remarks').AsString;
// <GAI-2> MOD-STR
//                CmnMemDataVar.FieldByName('IsDefault').AsBoolean	:= (FieldByName('DefaultKbn').AsInteger = 1);	//<222-7>ADD
                // データが存在していないかどうか、判定するためのもの
                CmnMemDataVar.FieldByName('IsDefault').AsBoolean	:= IsDefault;
// <GAI-2> MOD-END
                // 入力時のチェック用
				CmnMemDataVar.FieldByName('ID_Save').AsString 		:= strID;

                // ID変更可/不可 最初から表示している行のIDは変更不可
//                CmnMemDataVar.FieldByName('CantChange').AsBoolean 	:= True;	// <222-4> DEL
                CmnMemDataVar.Post;

                m_lstVariable.Add(strID);

                Next;
            end;
           	CmnMemDataVar.First;
        end;
    finally
    	CmnMemDataVar.BeforePost := objEvtBefore;
    	CmnMemDataVar.AfterPost := objEvtAfter;
    end;
end;

//*****************************************************************************
//	Process			:	為替手形／送金小切手情報タブの内容表示
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/05
//	Parameter		:	dqMasterData	: データ取得済みクエリ
//					:	nClass			: 支払種別(13: 為替手形か14:送金小切手)
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnSetScreenDetailInformation10 (dqMasterData: TMQuery; nClass: Integer);
begin
	with (dqMasterData) do
	begin
    	{ 為替手形 }
    	if nClass = 13 then
        begin
            // 支払口座ｺｰﾄﾞ
            if	(FieldByName ('GCode').IsNull) then
            begin
                CmnEdit10001AccountCode.Value		:= 0;
                CmnEdit10001AccountCode.InputFlag	:= TRUE;
            end
            else
            begin
                CmnEdit10001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
                CmnEdit10001AccountCode.InputFlag	:= FALSE;
            end;

            fnCheckEditNumValueAccountCode(10, 1);	// 支払口座ｺｰﾄﾞ
        end
        { 送金小切手 }
        else if nClass = 14 then
        begin
            // 依頼口座ｺｰﾄﾞ
            if	(FieldByName ('GCode').IsNull) then
            begin
                CmnEdit10002AccountCode.Value		:= 0;
                CmnEdit10002AccountCode.InputFlag	:= TRUE;
            end
            else
            begin
                CmnEdit10002AccountCode.Value		:= FieldByName ('GCode').AsInteger;
                CmnEdit10002AccountCode.InputFlag	:= FALSE;
            end;

            // 手数料口座ｺｰﾄﾞ
            if	(FieldByName ('GaiGCode').IsNull) then
            begin
                CmnEdit10003AccountCode.Value		:= 0;
                CmnEdit10003AccountCode.InputFlag	:= TRUE;
            end
            else
            begin
                CmnEdit10003AccountCode.Value		:= FieldByName ('GaiGCode').AsInteger;
                CmnEdit10003AccountCode.InputFlag	:= FALSE;
            end;

            //<222-8>ADD↓
            // 送金目的No
            if	(FieldByName ('PayHeadingNo').IsNull) then
            begin
                CmnEdit10004PayHeadingNo.Value		:= 0;
                CmnEdit10004PayHeadingNo.InputFlag	:= TRUE;
        	end
            else
            begin
                CmnEdit10004PayHeadingNo.Value		:= FieldByName ('PayHeadingNo').AsInteger;
                CmnEdit10004PayHeadingNo.InputFlag	:= FALSE;
            end;

            // 送金目的内容
            CmnEdit10005SendPurpose.Text			:= FieldByName ('SendPurpose').AsString;

            // 送金許可No
            CmnEdit10006PermLicenceNo.Text			:= FieldByName ('PermLicenceNo').AsString;

            // 送金許可日付
            if	(FieldByName ('PermDate').IsNull) then
            begin
                CmnEdit10007PermDate.Value			:= 0;
                CmnEdit10007PermDate.InputFlag		:= TRUE;
            end
            else
            begin
                CmnEdit10007PermDate.AsDateTime		:= MjsDateCtrl.MjsIntToDate(FieldByName ('PermDate').AsInteger,#0);
                CmnEdit10007PermDate.InputFlag		:= FALSE;
            end;
            //<222-8>ADD↑

            fnCheckEditNumValueAccountCode(10, 2);	// 依頼口座ｺｰﾄﾞ
            fnCheckEditNumValueAccountCode(10, 3);	// 手数料口座ｺｰﾄﾞ
		end;
    end;
end;
// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetScreenDetailInformations (nNCode: Extended);
var
	dqMasterData: TMQuery;
	nClass		: Integer;
    strSQL      : String;                                                       // <149> 2006/10/11 H.Kawato Add
    nRow        : Integer;

begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

    m_bKijituMankiFlg   := False;                                               // <132> 2006/06/15 H.Kawato Add
    m_iKijituUpdateFlg  := 1;                                                   // <132> 2006/06/15 H.Kawato Add

// <149> 2006/10/11 H.Kawato Add Start
    m_bYusenChange      := False;
    m_nPrjSubUnAdopt    := 0;

    CmnLabelPrjDetail.Visible   := True;

    // 詳細データ格納用配列の初期化
	for	nRow := 1 to 5 do
    begin
        m_arSyousaiData[nRow].nEdaban       := 0;
        m_arSyousaiData[nRow].nBaseKingaku  := 0;
        m_arSyousaiData[nRow].nBaseHiritu   := 0;
        m_arSyousaiData[nRow].nHasuuKingaku := 0;
        m_arSyousaiData[nRow].nHasuuHou     := 0;
        m_arSyousaiData[nRow].nSite         := 0;
    end;
// <149> 2006/10/11 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Add
    if (m_bShowPrjInfo = True) then         // ﾌﾟﾛｼﾞｪｸﾄ別支払情報表示
    begin
        if (m_bStandardInfo = True) then    // <153> 2006/12/19 H.Kawato Add
            m_nPayPtnNo2    := 1
        else
            m_nPayPtnNo2    := fnGetPayPtnNo(nNCode);
    end;
// <149> 2006/10/11 H.Kawato Add
    m_bExistProjRecord := (1 < m_nPayPtnNo2);	// <207> Add
	fnInitializeScreenDetailInfo ();

// <149> 2006/10/11 H.Kawato Add
    if (m_bShowPrjInfo = False) then        // 取引先情報初期表示
    begin
        CmnLabelPrjDetail.Caption   := '【標準】';                              // ﾗﾍﾞﾙ名称のセット
        m_nPayPtnNo2    := fnGetPayPtnNo(nNCode);
    end;
// <149> 2006/10/11 H.Kawato Add

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
(*
		SQL.Add   ('SELECT hm.GCode,hm.NCODE,  ');
		SQL.Add   ('       hm.PCloseDay1, hm.PayMonth1, hm.PayDay1, hm.PHolidayKbn1, ');
		SQL.Add   ('       hm.PCloseDay2, hm.PayMonth2, hm.PayDay2, hm.PHolidayKbn2, ');
		SQL.Add   ('       hm.PCloseDay3, hm.PayMonth3, hm.PayDay3, hm.PHolidayKbn3, ');
		SQL.Add   ('       pp.BunkaiKbn, pp.LetterKbn, pp.CngNCode, ');
		SQL.Add   ('       pp.PostNo1,pp.PostNo2,pp.Ads1,pp.Ads2, ');
		SQL.Add   ('       pp.SateiKbn, ' );                            // <133> 2006/06/19 H.Kawato Add
//		SQL.Add   ('       py.Tel1,py.Tel2,py.Fax1,py.SectionName,py.TanNm,py.KeisyoKbn,py.LetterKbn ');
		SQL.Add   ('       pp.Tel1,pp.Tel2,pp.Fax1,pp.SectionName,pp.TanNm,pp.KeisyoKbn ');
		SQL.Add   ('FROM   MTOKUI hm ');
		SQL.Add   ('LEFT OUTER JOIN MTOKUI_PAY pp ON pp.BaseNCode = hm.NCode ');
//		SQL.Add   ('LEFT OUTER JOIN MTOKUI_PAY py ON py.NCode = hm.NCode ');
		SQL.Add   ('WHERE  hm.NCode = :strHojCode'); // 正規レコードのみ　<#2 ADD>
{		SQL.Add   ('SELECT hm.GCode, hm.BunNCode, hm.STaxCode, hm.STaxRate, ');
		SQL.Add   ('       hm.BTaxCode, hm.BTaxRate, hm.SDebitCash, hm.SCreditCash, ');
		SQL.Add   ('       ci.ZipCode1, ci.ZipCode2, ci.Address1, ci.Address2, ci.TelNo, ');
		SQL.Add   ('       ci.SectionName, ci.PersonName, ci.TitleKbn, ');
		SQL.Add   ('       ci.PCloseDay1, ci.PayMonth1, ci.PayDay1, ci.PHolidayKbn1, ');
		SQL.Add   ('       ci.PCloseDay2, ci.PayMonth2, ci.PayDay2, ci.PHolidayKbn2, ');
		SQL.Add   ('       ci.PCloseDay3, ci.PayMonth3, ci.PayDay3, ci.PHolidayKbn3, ');
		SQL.Add   ('       pp.BunkaiKbn, pp.LetterKbn, pp.ChangeCode ');
		SQL.Add   ('FROM   FX_MTOKUI hm ');
		SQL.Add   ('LEFT OUTER JOIN CSInfo     ci ON ci.MasterKbn = :nMasterDivision AND ci.GCode = hm.GCode ');
		SQL.Add   ('LEFT OUTER JOIN FX_PayPtnInfo pp ON pp.MasterKbn = :nMasterDivision AND pp.GCode = hm.GCode AND pp.JoukenPtnNo = 1 ');
		SQL.Add   ('WHERE  hm.GCode = :strHojCode AND hm.RDelKbn = 0'); // 正規レコードのみ　<#2 ADD>
}
//		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;
*)
        strSQL  := '';
        strSQL  := strSQL + 'SELECT ';
        strSQL  := strSQL + 'hm.GCode, hm.NCODE, ';                                         // 取引先外部ｺｰﾄﾞ, 取引先内部ｺｰﾄﾞ
        strSQL  := strSQL + 'pp.SateiKbn, pp.BunkaiPtn, ';                                  // 査定区分, 分解ﾊﾟﾀｰﾝ
        strSQL  := strSQL + 'pp.SateiCalcKbn, pp.SateiCalc, ';                              // 査定金額計算区分, 査定金額計算値 <170> Add
// <169> 2007/08/21 H.Kawato Add
        // ﾊﾞｰｼﾞｮﾝ5以下は預かり源泉税の該当ﾚｺｰﾄﾞが存在しない
        if (m_iVerData > 5) then
            strSQL  := strSQL + 'pp.GensenUseKbn, ';                                        // 預かり源泉税採用区分
// <169> 2007/08/21 H.Kawato Add
        strSQL  := strSQL + 'pp.GaikaKbn, pp.GaiPayKbn, ';                                 	// 外貨採用区分, 標準支払方法<222> ADD
        strSQL  := strSQL + 'pt.BunkaiKbn, pt.PriPayWay ';                                  // 分解方法, 優先支払方法
        strSQL  := strSQL + 'FROM MTOKUI hm ';
        strSQL  := strSQL + 'LEFT OUTER JOIN MTOKUI_PAY pp ON pp.BaseNCode = hm.NCode ';
        strSQL  := strSQL + 'LEFT OUTER JOIN PayPtnInfo pt ON pt.PayNCode = hm.NCode ';
        strSQL  := strSQL + 'AND pt.MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
        strSQL  := strSQL + 'AND pt.PayPtnNo  = ' + FloatToStr(m_nPayPtnNo2) + ' ';
        strSQL  := strSQL + 'AND pt.RDelKbn   = 0 ';                                        // <161> Add
        strSQL  := strSQL + 'WHERE  hm.NCode  = ' + FloatToStr(nNCODE);
        strSQL  := strSQL + '  AND  hm.RDelKbn = 0 ';                                       // <161> Add

		SQL.Add (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();

		if	(EOF) then
        begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Exit;
		end;

// <149> 2006/10/11 H.Kawato Add
        if (m_bShowPrjInfo = False) then    // 取引先情報初期表示
    		fnSetScreenDetailInformation00 (dqMasterData);
// <149> 2006/10/11 H.Kawato Add
		fnSetScreenDetailInformation01 (dqMasterData);
		fnSetScreenDetailInformation05 (dqMasterData);
//		fnSetScreenDetailInformation06 (dqMasterData);                          // <149> 2006/10/11 H.Kawato Del
//		fnSetScreenDetailInformation07 (dqMasterData);                          // <149> 2006/10/11 H.Kawato Del

// <189> Mod ↓↓↓
//		for	nClass := 1 to 4 do
// <222> MOD start
//		for	nClass := 1 to 5 do
		for	nClass := 1 to 14 do
// <222> MOD end
// <189> Mod ↑↑↑
		begin
// <222> ADD start
			if nClass in [6, 7, 8, 9, 10, 12] then	// 支払種別に存在しない番号
            begin
            	Continue;
            end;
// <222> ADD end
			Close ();

			SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
{
			SQL.Add   ('SELECT ');
            SQL.Add   (' DI.AccNCode,AI.GCode,                                  ');
//<HIS0050>            SQL.Add   (' DI.BankNCode  As BankNCode,BF.BankCode,BF.BankName,BF.BankKana,       ');
            SQL.Add   (' BS.BankNCode  As BankNCode,BF.BankCode,BF.BankName,BF.BankKana,       ');
            SQL.Add   (' DI.BkBraNCode As BranchNCode,BS.BranchCode,BS.BranchName,BS.BranchKana,');
            SQL.Add   (' DI.AccKbn, DI.AccNo, DI.FBSet,             ');
			SQL.Add   (' DI.UketoriName, DI.TransKanaName,          ');
			SQL.Add   (' DI.ChargeKbn, DI.ChargeFutan, DI.TransKbn, DI.EdiInfo, DI.AiteNo1, DI.AiteNo2, Site, ');
            SQL.Add   (' DI.AccAutoKbn, DI.AccAutoData,             ');         // <137> Add
			SQL.Add   (' TegYusouKbn, TegYusouFutan, TegBunkatuMax  ');
			SQL.Add   (' FROM   PayDetailInfo DI                    ');
            SQL.Add   (' Left Outer Join AccInfo AI  on DI.AccNCode  = AI.NCode     ');
//<HIS0050>            SQL.Add   (' Left Outer Join HAPBF BF    on DI.BankNCode  = BF.NCode     ');
//<HIS0050>            SQL.Add   (' Left Outer Join HAPBS BS    on DI.BkBraNCode = BS.NCode     ');
            SQL.Add   (' Left Outer Join HAPBS BS    on DI.BkBraNCode = BS.NCode     ');
            SQL.Add   (' Left Outer Join HAPBF BF    on BS.BankNCode  = BF.NCode     ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
			SQL.Add   ('       PayNCode = :strHojCode AND ShiharaiSyubetu = :nClass AND Edaban = 1');

			ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
			ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;
			ParamByName ('nClass'         ).AsInteger	:= nClass;
}
            strSQL  := '';
            strSQL  := strSQL + 'SELECT ';
            strSQL  := strSQL + 'DI.AccNCode, AI.GCode, ';                                  // 依頼口座内部ｺｰﾄﾞ
            strSQL  := strSQL + 'BS.BankNCode As BankNCode, ';                              // 振込銀行内部ｺｰﾄﾞ
            strSQL  := strSQL + 'BF.BankCode, BF.BankName, BF.BankKana, ';                  // 振込銀行ｺｰﾄﾞ, 振込銀行名, 振込銀行名ｶﾅ
            strSQL  := strSQL + 'DI.BkBraNCode As BranchNCode, ';                           // 振込先支店内部ｺｰﾄﾞ
            strSQL  := strSQL + 'BS.BranchCode, BS.BranchName, BS.BranchKana, ';            // 振込支店ｺｰﾄﾞ, 振込支店名, 振込支店名ｶﾅ
            strSQL  := strSQL + 'DI.AccKbn, DI.AccNo, DI.FBSet, ';                          // 預金種目, 口座番号, FBセット項目
            strSQL  := strSQL + 'DI.UketoriName, DI.TransKanaName, ';                       // 受取人名, ｶﾅ振込先名
            strSQL  := strSQL + 'DI.ChargeKbn, DI.ChargeFutan, DI.TransKbn, ';              // 手数料計算区分, 手数料負担, 振込方法
            strSQL  := strSQL + 'DI.EdiInfo, DI.AiteNo1, DI.AiteNo2, DI.Site, ';            // EDI情報, 顧客ｺｰﾄﾞ1, 顧客ｺｰﾄﾞ2, ｻｲﾄ
            strSQL  := strSQL + 'DI.AccAutoKbn, DI.AccAutoData, ';                          // 口座自動引落区分, 自動引落支払ﾃﾞｰﾀ
            strSQL  := strSQL + 'DI.TegYusouKbn, DI.TegYusouFutan, DI.TegBunkatuMax ';      // 手形・小切手郵送区分, 手形・小切手郵送料負担区分, 手形分割枚数
            strSQL  := strSQL +',MP.PayKbn1 ';                                              // 期日前支払区分 <197> ADD
// <220> ADD-STR
            if (nClass = 2) then
            begin							// <222> ADD
                strSQL  := strSQL + ',DI.BaseKingaku, AI2.GCode KFuriGCode ';               // 期日依頼口座内部ｺｰﾄﾞ
// <222> ADD start
			end
            else if (nClass in [11, 14]) then	// 電信送金・送金小切手
            begin
				strSQL  := strSQL + ',AI2.GCode GaiGCode ';               					// 外貨手数料口座コード
            end;
// <222> ADD end
// <220> ADD-END
// <211> ADD-STR
            strSQL  := strSQL +',DI.ERKbn ';                                                // 電子記録債権採用区分
            strSQL  := strSQL +',DI.VFree1 ,DI.VFree2 ,DI.VFree3 ,DI.VFree4 ,DI.VFree5 ';   // 文字フリー項目１～５
// <211> ADD-END
			strSQL	:= strSQL + ',DI.PayHeadingNo, DI.SendPurpose, DI.PermLicenceNo, DI.PermDate ';	//国際収支項目番号,送金目的,ﾗｲｾﾝｽNo,ﾗｲｾﾝｽ日付 <222-8>ADD

            strSQL  := strSQL + 'FROM PayDetailInfo DI ';
            strSQL  := strSQL + 'Left Outer Join AccInfo AI on DI.AccNCode = AI.NCode ';
            strSQL  := strSQL + 'Left Outer Join HAPBS BS on DI.BkBraNCode = BS.NCode ';
            strSQL  := strSQL + 'Left Outer Join HAPBF BF on BS.BankNCode  = BF.NCode ';
            strSQL  := strSQL + 'LEFT OUTER JOIN MTOKUI_PAY MP ON MP.BaseNCode = DI.PayNCode '; // <197> ADD
// <220> ADD-STR
            if (nClass = 2) then
            begin							// <222> ADD
                strSQL  := strSQL + 'Left Outer Join AccInfo AI2 on DI.BaseKingaku = AI2.NCode ';
// <222> ADD start
			end
            else if (nClass in [11, 14]) then	// 電信送金・送金小切手
            begin
                strSQL  := strSQL + 'Left Outer Join AccInfo AI2 on DI.FeeAccNCode = AI2.NCode ';
            end;
// <222> ADD end
// <220> ADD-END
            strSQL  := strSQL + 'WHERE DI.Edaban = 1 ';
            strSQL  := strSQL + 'AND DI.ShiharaiSyubetu = ' + IntToStr(nClass) + ' ';
            strSQL  := strSQL + 'AND DI.PayPtnNo  = ' + FloatToStr(m_nPayPtnNo2) + ' ';
            strSQL  := strSQL + 'AND DI.PayNCode  = ' + FloatToStr(nNCODE) + ' ';
            strSQL  := strSQL + 'AND DI.MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
            strSQL  := strSQL + 'AND DI.RDelKbn = 0 ';  // <161> Add

			SQL.Add (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

            if Not Open then
                ShowMessage('Not Open!');

			if	(EOF) then
			begin
				case (nClass) of
					1:	fnInitializeScreenDetailInfo02 ();
					2:	fnInitializeScreenDetailInfo03 ();
// <211> MOD-STR
//					3:	fnInitializeScreenDetailInfo04 (0);
//					4:	fnInitializeScreenDetailInfo04 (1);
					3:	fnInitializeScreenDetailInfo04 ();
					4:	fnInitializeScreenDetailInfo08 ();
// <211> MOD-END
// <222> ADD start
					11: fnInitializeScreenDetailInfo09 ();	// 電信送金情報
                    13,                                     // 為替手形／送金小切手情報
                    14: fnInitializeScreenDetailInfo10 ();
// <222> ADD end
				end;
// <SCA> ADD-STR
                if (nClass in [1..3]) then
                    // 振込先支店内部コードクリア
                    m_anBrachNCode[nClass] := 0;
// <SCA> ADD-END
			end
			else
			begin
				case (nClass) of
					1:	fnSetScreenDetailInformation02 (dqMasterData);
					2:	fnSetScreenDetailInformation03 (dqMasterData);
					3:	fnSetScreenDetailInformation04 (dqMasterData);
					4:	fnSetScreenDetailInformation08 (dqMasterData);      // <211> ADD
// <222> ADD start
					11: fnSetScreenDetailInformation09 (dqMasterData);	// 電信送金情報
                    13,                                                 // 為替手形／送金小切手情報
                    14: fnSetScreenDetailInformation10 (dqMasterData, nClass);
// <222> ADD end
				end;
// <SCA> ADD-STR
                if (nClass in [1..3]) then
                    // 振込先支店内部コード保存
                    m_anBrachNCode[nClass] := FieldByName ('BranchNCode').AsCurrency;
// <SCA> ADD-END
			end;
		end;

// <149> 2006/10/11 H.Kawato Add Start
// <154> 2007/02/06 H.Kawato Mod
//        if (m_iProAdoptKbn = 1) and (CmnEdit01030PriPayWayDivision.Value = 1) then
// <189> Mod ↓↓↓
//      if (CmnEdit01030PriPayWayDivision.Value = 1) then
		if (CmnEdit01030PriPayWayDivision.Value <> 0) then
// <189> Mod ↑↑↑
        begin
            Close ();
            SQL.Clear ();

            strSQL  := '';
            strSQL  := strSQL + 'SELECT ';
            strSQL  := strSQL + 'ISNULL(BaseKingaku, 0) AS BaseKingaku, ';              // 基準金額
            strSQL  := strSQL + 'ISNULL(BaseHiritu, 0) AS BaseHiritu, ';                // 基準比率
            strSQL  := strSQL + 'ISNULL(HasuuKingaku, 0) AS HasuuKingaku, ';            // 端数処理額
            strSQL  := strSQL + 'ISNULL(HasuuHou, 0) AS HasuuHou, ';                    // 端数処理方法
            strSQL  := strSQL + 'ISNULL(Site, 0) AS Site, ';                            // サイト
            strSQL  := strSQL + 'ISNULL(Edaban, 0) AS Edaban ';                         // 枝番
            strSQL  := strSQL + 'FROM PayDetailInfo ';
            strSQL  := strSQL + 'WHERE Edaban Between 11 AND 15 ';                      // 枝番(詳細設定)
// <189> Mod ↓↓↓
//          strSQL  := strSQL + 'AND ShiharaiSyubetu = 3 ';                             // 優先支払方法※
																						// 優先支払方法※
			strSQL  := strSQL + 'AND ShiharaiSyubetu = ' + IntToStr(CmnEdit01030PriPayWayDivision.AsInteger) + ' ';
// <189> Mod ↑↑↑
            strSQL  := strSQL + 'AND PayPtnNo  = ' + FloatToStr(m_nPayPtnNo2) + ' ';    // 条件ﾊﾟﾀｰﾝNo
            strSQL  := strSQL + 'AND PayNCode  = ' + FloatToStr(nNCODE) + ' ';          // 取引先内部ｺｰﾄﾞ
            strSQL  := strSQL + 'AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';   // ﾏｽﾀ区分
            strSQL  := strSQL + 'AND RDelKbn = 0 ';                                     // 削除区分 <161> Add
            strSQL  := strSQL + 'ORDER BY Edaban';

            SQl.Add   (strSQL);
            Open ();

            while (not EOF) do
            begin
            	nRow    := FieldByName ('Edaban').AsInteger - 10;

                m_arSyousaiData[nRow].nEdaban       := FieldByName ('Edaban').Value;
                m_arSyousaiData[nRow].nBaseKingaku  := FieldByName ('BaseKingaku').Value;
                m_arSyousaiData[nRow].nBaseHiritu   := FieldByName ('BaseHiritu').Value;
                m_arSyousaiData[nRow].nHasuuKingaku := FieldByName ('HasuuKingaku').Value;
                m_arSyousaiData[nRow].nHasuuHou     := FieldByName ('HasuuHou').Value;
                m_arSyousaiData[nRow].nSite         := FieldByName ('Site').Value;

                NEXT;
            end;
        end;
// <149> 2006/10/11 H.Kawato Add End

// <222> ADD start
		// 外貨債務の採用がある場合は可変項目情報取得
		if m_iGaikaUseKbn = 1 then
        begin
        									// 可変項目情報取得
        	if not fnGetPayVariable(dqMasterData) then
            begin
                dqMasterData.Close ();
                dqMasterData.Free  ();
                Exit;
            end;
            								// 可変項目情報を画面に表示
            fnSetScreenDetailInformation09_2(dqMasterData);
        end;
// <222> ADD end
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetTagInfoGridStandard (nDivision: Integer; nTagKind: Integer);
var
	cMemData	: TdxMemData;
	nTagKindWork: Integer;
	strHojCode	: String;

begin
	if	(nDivision = 0) then															// 実在/合計区分: 0=実在
		cMemData	:= CmnMemDataStandardExist
	else																				// 実在/合計区分: 1=合計
		cMemData	:= CmnMemDataStandardTotal;

	if	(Trim (cMemData.FieldByName ('strHojCode').AsString) = '') then
		Exit;

	if	(m_nCurCodeAttribute <= 1) then
		strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (cMemData.FieldByName ('strHojCode').AsString))])
	else
		strHojCode	:= cMemData.FieldByName ('strHojCode').AsString;

	if	(fnUpdateMasterRecordMFusenInfo (strHojCode, nTagKind)) then
		nTagKindWork	:= nTagKind
	else
		nTagKindWork	:= 0;

	fnUpdateMemDataStandardRecord (nDivision, strHojCode, nTagKindWork);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetTaxOffsetJournalInfo (dqMasterData: TMQuery);
var
	nCount		  : Integer;
	nCharPos	  : Integer;
	nPickNo		  : Integer;
	strDescription: String;
// <210> ADD-STR
    nBmnNCode     : Currency;
    iLoop         : Integer;
    bContinue     : Boolean;
// <210> ADD-END
begin
	if	(m_nTaxInfoAccDivision = 0) then												// 会計処理区分: 0=免税業者
	begin
		CmnEdit05006TaxCode.Value		:= 0;
		CmnEdit05007TaxRate.Value		:= 0;
		CmnEdit05006TaxCode.InputFlag	:= TRUE;
		CmnEdit05007TaxRate.InputFlag	:= TRUE;
		CmnEdit05006TaxCode.Enabled		:= FALSE;
		CmnEdit05007TaxRate.Enabled		:= FALSE;

		CmnEdit05006TaxCodeDesc.Text	:= '';
		CmnEdit05007TaxRateDesc.Text	:= '';

		Exit;
	end
	else
	begin
		CmnEdit05006TaxCode.Enabled	:= TRUE;
		CmnEdit05007TaxRate.Enabled	:= TRUE;
	end;

	with (dqMasterData) do
	begin
		CmnEdit05006TaxCode.SelectItems.Clear ();
		m_nTaxKbn := FieldByName ('TaxKbn').AsInteger;									// <#TAX10> ADD

		if	(FieldByName ('TaxKbn').AsInteger = 1) then									// 消費税科目区分: 1=売上科目
		begin
			for	nCount := 0 to Length (_TaxSalesItems) - 1 do
			begin
					//* 公益法人区分: 1=公益法人(消費税ｺｰﾄﾞ80番台は除く) */
				if	((m_nCompDivision <> 1) and ((nCount >= 14) and (nCount <= 17))) then
					Continue;

				nPickNo	:= -1;

				for	nCharPos := 1 to StrLen (PChar (_TaxSalesItems [nCount])) do
				begin
					if	(Copy (_TaxSalesItems [nCount], nCharPos, 1) = ':') then
					begin
						nPickNo	:= StrToInt (Trim (Copy (_TaxSalesItems [nCount], 1, nCharPos - 1)));
						Break;
					end;
				end;
// <205> Del start
{
				if	((nPickNo <>  0) and (nPickNo <> 10) and
					 (nPickNo <> 11) and (nPickNo <> 30) and (nPickNo <> 40)) then
					Continue;
}
// <205> Del end

				CmnEdit05006TaxCode.SelectItems.Add (_TaxSalesItems [nCount]);
			end;

//			CmnEdit05006TaxCode.Value		:= FieldByName ('STaxCode').AsInteger;		    // 売上消費税ｺｰﾄﾞ
			CmnEdit05006TaxCode.InputFlag	:= FALSE;
//			CmnEdit05007TaxRate.Value		:= FieldByName ('STaxRate   ').AsInteger;		// 売上消費税率
			CmnEdit05007TaxRate.InputFlag	:= FALSE;
		end
		else if	(FieldByName ('TaxKbn').AsInteger = 2) then								// 消費税科目区分: 2=仕入科目
		begin
			for	nCount := 0 to Length (_TaxStockItems) - 1 do
			begin
				nPickNo	:= -1;

				for	nCharPos := 1 to StrLen (PChar (_TaxStockItems [nCount])) do
				begin
					if	(Copy (_TaxStockItems [nCount], nCharPos, 1) = ':') then
					begin
						nPickNo	:= StrToInt (Trim (Copy (_TaxStockItems [nCount], 1, nCharPos - 1)));
						Break;
					end;
				end;
// <210> ADD-STR
                // 部門内部コードを取得
                if (m_arCodeAttribute[0].nMasterDivision = MASTER_SECTION) then
                begin
                    nBmnNCode := m_dSousaiNCode[1];
                    
                    if (nBmnNCode <> 0) then
                    begin
                        bContinue := False;

            			for	iLoop := 1 to Length(m_rCommonBmn) - 1 do
                        begin
                            if (nBmnNCode = m_rCommonBmn[iLoop].NCode) then
                            begin
                                // 共通部門、非課税部門発見
// <TX26> MOD
{                               if ((m_rCommonBmn[iLoop].BunCode = 1) and not (nPickNo in [0, 11, 30, 40])) then
                                begin
                                    // 共通部門で11、30、40以外は除外
					                bContinue := True;
                                end
                                else if ((m_rCommonBmn[iLoop].BunCode = 2) and not (nPickNo in [0, 14, 30, 40])) then
                                begin
                                    // 非課税部門で14、30、40は除外
					                bContinue := True;
                                end;}
                                if ((m_rCommonBmn[iLoop].BunCode = 1) and not (nPickNo in [0, 11, 15, 30, 40])) or  // 共通部門で11、15、30、40以外は除外
                                   ((m_rCommonBmn[iLoop].BunCode = 2) and not (nPickNo in [0, 14, 16, 30, 40])) then// 非課税部門で14、16、30、40は除外
					                bContinue := True;
// <TX26> MOD
                            end;
                        end;

                        if bContinue then
        					Continue;
                    end;
                end;
// <210> ADD-END
// <205> Mod start
{
				if	((nPickNo <>  0) and (nPickNo <> 10) and
					 (nPickNo <> 11) and (nPickNo <> 30) and (nPickNo <> 40)) then
}
				if	((nPickNo <>  0) and (nPickNo <> 10) and (nPickNo <> 11) and
                     (nPickNo <> 15) and (nPickNo <> 16) and                    // <TX26> ADD 
					 (nPickNo <> 12) and (nPickNo <> 14) and (nPickNo <> 30) and (nPickNo <> 40)) then
// <205> Mod end
					Continue;
				CmnEdit05006TaxCode.SelectItems.Add (_TaxStockItems [nCount]);
			end;

			CmnEdit05006TaxCode.Value		:= FieldByName ('BTaxCode').AsInteger;		// 仕入消費税ｺｰﾄﾞ
			CmnEdit05006TaxCode.InputFlag	:= FALSE;
			CmnEdit05007TaxRate.Value		:= FieldByName ('BTaxRate').AsInteger;		// 仕入消費税率
			CmnEdit05007TaxRate.InputFlag	:= FALSE;
		end
		else																			// 消費税科目区分: 対象外
		begin
			CmnEdit05006TaxCode.Value		:= 0;
			CmnEdit05007TaxRate.Value		:= 0;
			CmnEdit05006TaxCode.InputFlag	:= TRUE;
			CmnEdit05007TaxRate.InputFlag	:= TRUE;
			CmnEdit05006TaxCode.Enabled		:= FALSE;
			CmnEdit05007TaxRate.Enabled		:= FALSE;

			CmnEdit05006TaxCodeDesc.Text	:= '';
			CmnEdit05007TaxRateDesc.Text	:= '';
		end;
	end;

	if	(not CmnEdit05006TaxCode.InputFlag) then
	begin
		fnGetDescriptionSelectedItem (CmnEdit05006TaxCode, strDescription);
		CmnEdit05006TaxCodeDesc.Text	:= strDescription;
	end;

	fnChangeConditionOffsetTax ();

	if	(not CmnEdit05007TaxRate.InputFlag) then
	begin
// <#TAX10> MOD-STR
//		fnGetDescriptionSelectedItem (CmnEdit05007TaxRate, strDescription);
//		CmnEdit05007TaxRateDesc.Text	:= strDescription;
		CmnEdit05007TaxRateDesc.Text  := fnGetTaxRateName(CmnEdit05007TaxRate.AsInteger);
// <#TAX10> MOD-END
	end;
end;


//***********************************************************************************************************/
//  ツリーでプロパティを表示時
//***********************************************************************************************************/
function	TJNTCRP004006f.fnShowScreenInformations (): Boolean;
var
	strHojCode: String;
	fReturn	  : Boolean;
    nNCODE    : Extended;
begin
//	nNCode   	:= 0;

	if	(Screen.ActiveControl.Name = CmnTreeView.Name) then								// ﾂﾘｰﾋﾞｭｰ
    begin
		strHojCode	:= PTreeViewRec (CmnTreeView.Selected.Data)^.strHojCode;
		nNCode   	:= PTreeViewRec (CmnTreeView.Selected.Data)^.nNCode;
    end
	else if	(Screen.ActiveControl.Name = CmnGridStandardExist.Name) then				// 取引先ｸﾞﾘｯﾄﾞ(実在)
	begin

		if	(m_nCurCodeAttribute <= 1) then
			strHojCode	:= Format ('%.16d', [StrToInt64 (
											Trim (CmnMemDataStandardExist.FieldByName ('strHojCode').AsString))])

		else
			strHojCode	:= CmnMemDataStandardExist.FieldByName ('strHojCode').AsString;

        nNCode     := fnGetNCODE(strHojCode);
	end
	else if	(Screen.ActiveControl.Name = CmnGridStandardTotal.Name) then				// 取引先ｸﾞﾘｯﾄﾞ(合計)
	begin
		if	(m_nCurCodeAttribute <= 1) then

			strHojCode	:= Format ('%.16d', [StrToInt64 (
											Trim (CmnMemDataStandardTotal.FieldByName ('strHojCode').AsString))])

		else
			strHojCode	:= CmnMemDataStandardTotal.FieldByName ('strHojCode').AsString;

        nNCode     := fnGetNCODE(strHojCode);

	end
	else
	begin
		if	(CmnPanelClientDetail.Visible) then											// 詳細
		begin
			if	(m_nCurCodeAttribute <= 1) then
				strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
			else
				strHojCode	:= CmnEdit00001HojCodeFree.Text;
		end
		else
		begin
			Result	:= FALSE;
			Exit;
		end;

        nNCode     := fnGetNCODE(strHojCode);

	end;

	fReturn	:= fnSetScreenDetails (nNCode);

	if	(fReturn) then
		fnSelectTreeViewItem (strHojCode);

	CmnPanelClientStandard.Visible	:= FALSE;
	CmnPanelClientDetail  .Visible	:= TRUE;

	m_fUnderConstruction	:= TRUE;

// <211> MOD-STR
// 	CmnTabInformations.Items.Selected	:= 0;
   	CmnTabInformations.Items.Selected	:= TI_PAYWAY;
// <211> MOD-END

	m_fUnderConstruction	:= FALSE;

	fnResetChangeFlagCheckItems	();

// <128> 2006/04/20 H.Kawato Add
    if (m_BtnClick = False) then
    begin
        m_bSousaiChgFlg := False;   // <136> 2006/06/21 H.Kawato Add
        m_ProgRendoFlg  := False;
        m_ProgRendoGFlg := False;	// <222> ADD
        m_iSateiChgKbn  := 0;
    end;
// <128> 2006/04/20 H.Kawato Add

	if	(m_nReferMode = REFER) then														// ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照時
		fnChangeConditionAllControlsDetail (FALSE);

	Result	:= fReturn;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnTerminateCheckItems ();
var
	nItems: Integer;

begin
	for nItems := 0 to m_cCheckItems.Count - 1 do
		Dispose (PCheckItemRec (m_cCheckItems.Items [nItems]));

	m_cCheckItems.Free ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnTerminateTreeViewItems (): Boolean;
var
	dqDataParent   : TMQuery;
	dqDataChild	   : TMQuery;
	arHojCodeDelete: array of String;
	nItems		   : Integer;

begin
	dqDataParent	:= TMQuery.Create (self);
	dqDataChild		:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqDataParent);							// DBとMQueryの接続
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqDataChild );							// DBとMQueryの接続

	with (dqDataParent) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT PayNCode FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND NayoseSyu = 1 AND NayoseKbn = 2');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;

		Open ();

		while (not EOF) do
		begin
			with (dqDataChild) do
			begin
				Close ();

				SQL.Clear ();
				SQL.Add   ('SELECT PayNCode FROM PayNayoseInfo ');
				SQL.Add	  ('WHERE  MasterKbn = :nMasterDivision AND ');
				SQL.Add   ('       NayoseSyu = 1 AND NayoseKbn = 1 AND NayoseOyaNCode = :strHojCodeParent');

				ParamByName ('nMasterDivision' ).AsInteger	:= MASTER_CUSTOMER;
				ParamByName ('strHojCodeParent').AsFloat	:= dqDataParent.FieldByName ('PayNCode').AsFloat;

				Open ();

				if	(EOF) then
				begin
					SetLength (arHojCodeDelete, Length (arHojCodeDelete) + 1);

					arHojCodeDelete [Length (arHojCodeDelete) - 1]	:= FloatToStr(dqDataParent.FieldByName ('PayNCode').AsFloat);
				end;
			end;

			NEXT;
		end;

		if	(Length (arHojCodeDelete) > 0) then
		begin
			for nItems := 0 to Length (arHojCodeDelete) - 1 do
			begin
				Close ();

				SQL.Clear ();
				SQL.Add   ('DELETE FROM PayNayoseInfo ');
				SQL.Add   ('WHERE  Masterkbn = :nMasterDivision AND ');
				SQL.Add   ('       NayoseSyu = 1 AND NayoseKbn = 2 AND PayNCode = :strHojCode');

				ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
				ParamByName ('strHojCode'     ).AsFloat 	:= StrToFloat(arHojCodeDelete [nItems]);

				if	(not ExecSQL ()) then
				begin
					m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqDataParent);
					m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqDataParent);

					dqDataParent.Close ();
					dqDataChild .Close ();
					dqDataParent.Free  ();
					dqDataChild .Free  ();

					Result  := FALSE;
					Exit;
				end;

				m_nPayNayoseInfo	:= 1;
			end;
		end;
	end;

	dqDataParent.Close ();
	dqDataChild .Close ();
	dqDataParent.Free  ();
	dqDataChild .Free  ();

	m_fUnderConstruction	:= TRUE;

	for nItems := 1 to CmnTreeView.Items.Count do
		Dispose (CmnTreeView.Items [nItems - 1].Data);

	m_fUnderConstruction	:= TRUE;

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordCSInfo (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;

begin
	dqMasterData	:= TMQuery.Create (self);

// <Rel>	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);						// DBとMQueryの接続

//↓<Rel>
    // -------------------------------------------------------------------------
    //  子会社(ｸﾞﾙｰﾌﾟ会計採用有)は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        // 親会社DBとTStoredProcの接続
    	m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, dqMasterData)	// DBとの接続
    else
    	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dqMasterData);				// DBとの接続
//↑<Rel>

	pRecord	:= pUpdateRecord;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT * FROM MTOKUI_PAY WHERE BaseNCode = :strHojNCode');
		ParamByName ('strHojNCode').AsFloat	:= pRecord^.nNCode;

		if	(not Open ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		if  (EOF) then
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstCSInfoInsert (pUpdateRecord));
		end
		else
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstCSInfoUpdate (pUpdateRecord));
		end;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result  := FALSE;
			Exit;
		end;

//↓<Rel>
        // ﾄﾘｶﾞで子取引先ﾚｺｰﾄﾞの_Relが更新されるので、同期ﾌﾟﾛｼｼﾞｬを実行して配信してあげる。
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
            if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI_PAY) = False ) then
            begin
                Result := False;
                Exit;
            end;
        end;
//↑<Rel>
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordDetail (pUpdateRecord: Pointer): Boolean;
begin
	if	(not fnCheckEditItemsValues (nil)) then
	begin
		if	((m_cACControl is TMNumEdit ) or
			 (m_cACControl is TMTxtEdit ) or
			 (m_cACControl is TMDateEdit)) then
		begin
			m_cACControl.SetFocus ();

			TEdit (m_cACControl).SelectAll ();
			Beep  ();
		end;

		Result	:= FALSE;
		Exit;
	end;

	if	(not fnCheckDecomposeListBasedValue ()) then
	begin
		m_cACControl.SetFocus ();

		TEdit (m_cACControl).SelectAll ();
		Beep  ();
		Abort ();
	end;

	// -----<172> Add-St-----
	SessionPractice(C_ST_PROCESS);

	try
	// -----<172> Add-Ed-----

	m_cDataModule.BeginTran (m_cDBSelect);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始

	if	(not fnUpdateMasterRecordHojyoTree (pUpdateRecord,1)) then						// 補助体系ﾏｽﾀ 更新
	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	if	(not fnUpdateMasterRecordHojyoMA (pUpdateRecord)) then							// 補助基本ﾏｽﾀ 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;


	if	(not fnUpdateMasterRecordCSInfo (pUpdateRecord)) then							// 取引先詳細情報 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;

	if	(not fnUpdateMasterRecordPayPtnInfo (pUpdateRecord)) then						// 支払条件ﾊﾟﾀｰﾝ 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;

	if	(not fnUpdateMasterRecordPayPtnDtl (pUpdateRecord)) then						// 支払条件明細ﾏｽﾀ 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;

	if	(not (fnUpdateMasterRecordPayDetailInfo (pUpdateRecord))) then					// 支払詳細情報ﾏｽﾀ 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;

// <149> 2006/10/11 H.Kawato Add Start
	if	(not (fnUpdateMasterRecordPayDtlSyousai (pUpdateRecord))) then					// 支払詳細情報ﾏｽﾀ(優先支払情報) 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;
// <149> 2006/10/11 H.Kawato Add End

	if	(not (fnUpdateMasterRecordPayOffsetInfo (pUpdateRecord))) then					// 相殺情報ﾏｽﾀ 更新
   	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);											// ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
   	end;

// <222> ADD start
	if  (CmnTabInformations.Items [TI_WIRE].Visible) and								// 電信送金情報タブが選択できるときだけ
    	(CmnTabInformations.Items [TI_WIRE].Enabled) then
    begin
        if	(not (fnUpdateMasterRecordPayVariableItem (pUpdateRecord))) then			// 支払可変情報ﾏｽﾀ 更新
        begin
            Beep ();

            fnOutputDBErrorMessage ();
            m_cDataModule.Rollback (m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)

            Result	:= FALSE;
            Exit;
        end;
    end;
// <222> ADD end


	m_cDataModule.Commit (m_cDBSelect);

	// -----<172> Add-St-----
	finally
		SessionPractice(C_ED_PROCESS);
	end;
	// -----<172> Add-Ed-----

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordHojyoMA (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
	fUpdateItems: Boolean;
    lvNCODE     : Extended;
    lvInsFlg    : Boolean;

begin
	dqMasterData	:= TMQuery.Create (self);

// <Rel>	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続


//↓<Rel>
    // -------------------------------------------------------------------------
    //  子会社(ｸﾞﾙｰﾌﾟ会計採用有)は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        // 親会社DBとTStoredProcの接続
    	m_cDataModule.SetDBInfoToQuery(m_SyncMaster.m_cPDBSelect, dqMasterData)	// DBとの接続
    else
    	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dqMasterData);				// DBとの接続
//↑<Rel>

	pRecord			:= pUpdateRecord;
//	fUpdateItems	:= FALSE;

//    lvInsFlg := False;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode,GCode FROM MTOKUI ');
		SQL.Add   ('WHERE  SumKbn = :nSumDivision and RDelKbn = 0 AND GCode = :strHojCode');

  		ParamByName ('nSumDivision'   ).AsInteger	:= pRecord^.nSumDivision;
		ParamByName ('strHojCode'     ).AsString	:= pRecord^.strHojCode;

		if	(not Open ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		if	(EOF) then
		begin
			Close ();
            //新規はない
			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstHojyoMAInsert (pUpdateRecord));
			fUpdateItems	:= TRUE;
            lvInsFlg := True;
		end
		else
		begin
            m_NCode := GetFld('NCode').AsFloat;
			Close ();

			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstHojyoMAUpdate (pUpdateRecord));

			fUpdateItems	:= TRUE;
            lvInsFlg := False;
		end;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result  := FALSE;
			Exit;
		end;

//↓<Rel>
        // ﾄﾘｶﾞで子取引先ﾚｺｰﾄﾞの_Relが更新されるので、同期ﾌﾟﾛｼｼﾞｬを実行して配信してあげる。
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
            if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_MTOKUI) = False ) then
            begin
                Result := False;
                Exit;
            end;
        end;
//↑<Rel>

        if lvInsFlg then
        begin
//            lvNCODE := 0;
            //内部ｺｰﾄﾞを取得
            Close;
            Sql.Clear;
            Sql.Add('select @@identity NCODE from MTOKUI');
            Open;
            lvNCODE := FieldByName('NCODE').asFloat;
            pRecord^.nNCODE := lvNCODE;
        end;

		if	(fUpdateItems) then
			fnUpdateTreeViewItems (pRecord^.strHojCode, pRecord^.strNameSimple);
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordHojyoTree (pUpdateRecord: Pointer;PFlg:Integer): Boolean;
var
	dqMasterTree: TMQuery;
	pRecord		: ^MasterData;
	nEntryNo	: Integer;

begin
	dqMasterTree	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);							// DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT MasterKbn FROM HojyoTree ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND BasedNCode = :strHojCode');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;

        if pFlg = 1 then
    		ParamByName ('strHojCode'     ).AsFloat  	:= pRecord^.nNCODE
        else
    		ParamByName ('strHojCode'     ).AsFloat  	:= m_NCode;

		if	(not Open ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
            Exit;
        end;

		if  (not EOF) then
		begin
			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= TRUE;
			Exit;
		end;

		nEntryNo	:= fnGetEntryNumberFinal (_TreeSystemNCode);

		Close ();

		SQL.Clear ();
		SQL.Add   ('INSERT INTO HojyoTree (MasterKbn, PatternNo, SumNCode, EntNo, BasedNCode) ');
		SQL.Add   ('VALUES (:nMasterDivision, 0, :strSumCode, :nEntryNo, :strBasedCode)');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strSumCode'     ).AsFloat 	:= 0;
		ParamByName ('nEntryNo'       ).AsInteger	:= nEntryNo;
		ParamByName ('strBasedCode'   ).AsFloat 	:= pRecord^.nNCODE;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		fnAddTreeViewItem (pRecord^.nSumDivision, pRecord^.strHojCode, pRecord^.strNameSimple);

		m_nHojyoTree	:= 1;
	end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= TRUE;																	// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordMFusenInfo (strHojCode: String; var nTagKind: Integer): Boolean;
var
	dqMasterData: TMQuery;

begin
	m_cDataModule.BeginTran (m_cDBSelect);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);							// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT FusenKbn FROM MFusenInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND HojyoCode = :strHojCode');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsString	:= strHojCode;

		Open ();

		if  (not EOF) then
		begin
			if	((nTagKind = 0) or (FieldByName ('FusenKbn').AsInteger = nTagKind)) then
			begin
				nTagKind	:= 0;

				Close ();

				SQL.Clear ();
				SQL.Add   ('DELETE FROM MFusenInfo ');
				SQl.Add   ('WHERE  MasterKbn = :nMasterDivision AND HojyoCode = :strHojCode');
			end
			else
			begin
				Close ();

				SQL.Clear ();
				SQL.Add   ('UPDATE MFusenInfo SET FusenKbn = :nTagDivision, FusenCmnt = '''' ');
				SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND HojyoCode = :strHojCode');

				ParamByName ('nTagDivision').AsInteger	:= nTagKind;
			end;

			ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
			ParamByName ('strHojCode'     ).AsString	:= strHojCode;

			if	(not ExecSQL ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

				fnOutputDBErrorMessage ();

				m_cDataModule.Rollback (m_cDBSelect);									// ﾛｰﾙﾊﾞｯｸ(破棄)
				dqMasterData .Close	   ();
				dqMasterData .Free     ();

				Result	:= FALSE;
				Exit;
			end;

			m_cDataModule.Commit (m_cDBSelect);											// ｺﾐｯﾄ(反映)

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= TRUE;
			Exit;
		end;

		Close ();
	end;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();;
		SQL.Add   ('INSERT INTO MFusenInfo (MasterKbn, NCode, Subcode, HojyoCode, FusenKbn, FusenCmnt) ');
		SQL.Add   ('VALUES (:nMasterDivision, 0, 0, :strHojCode, :nTagDivision, '''')');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsString	:= strHojCode;
		ParamByName ('nTagDivision'   ).AsInteger	:= nTagKind;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			fnOutputDBErrorMessage ();

			m_cDataModule.Rollback (m_cDBSelect);										// ﾛｰﾙﾊﾞｯｸ(破棄)
			dqMasterData .Close    ();
			dqMasterData .Free	   ();

			Result	:= FALSE;
			Exit;
		end;
	end;

	m_cDataModule.Commit (m_cDBSelect);													// ｺﾐｯﾄ(反映)
	dqMasterData .Close  ();
	dqMasterData .Free   ();

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayDetailInfo (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
	nClass		: Integer;
    strSQL      : String;           // <149> 2006/10/11 H.Kawato Add

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	with (dqMasterData) do
	begin
// <189> Mod
//		for	nClass := 1 to 4 do
// <222> MOD start
//		for	nClass := 1 to 5 do
		for	nClass := 1 to 14 do
// <222> MOD end
// <189> Mod
		begin
// <222> ADD start
			if nClass in [6, 7, 8, 9, 10, 12] then	// 支払種別に存在しない番号
            begin
            	Continue;
            end;
// <222> ADD end
			// <222-6>ADD↓
            // 電信送金情報と為替手形／送金小切手情報は標準ﾊﾟﾀｰﾝのみ更新
			if (m_nPayPtnNo <> 1) and (nClass in [11,13,14]) then
            begin
            	Continue;
            end;
			// <222-6>ADD↑
			Close ();

			SQL.Clear ();

// <149> 2006/10/11 H.Kawato Mod Start
{
			SQL.Add   ('SELECT PayNCode  FROM PayDetailInfo ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
			SQL.Add   ('       PayNCode  = :strHojCode AND ShiharaiSyubetu = :nClass AND Edaban = 1');

			ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
			ParamByName ('strHojCode'     ).AsFloat 	:= pRecord^.nNCODE;
			ParamByName ('nClass'         ).AsInteger	:= nClass;
}
            strSQL  := '';
            strSQL  := strSQL + 'SELECT PayNCode  FROM PayDetailInfo ';
            strSQL  := strSQL + 'WHERE Edaban    = 1';
            strSQL  := strSQL + '  AND ShiharaiSyubetu = ' + IntToStr(nClass);
            strSQL  := strSQL + '  AND PayPtnNo  = ' + FloatToStr(m_nPayPtnNo);
            strSQL  := strSQL + '  AND PayNCode  = ' + FloatToStr(pRecord^.nNCODE);
            strSQL  := strSQL + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
            strSQL  := strSQL + '  AND RDelKbn = 0 ';   // <161> Add

			SQL.Add   (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

			if	(not Open ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

				dqMasterData.Close ();
				dqMasterData.Free  ();

				Result	:= FALSE;
				Exit;
			end;

			if  (EOF) then
			begin
				Close ();

				SQL.Clear ();

				case (nClass) of
					1:	SQL.Add (fnMakeSQLConstPayDetailInfo01Insert (pUpdateRecord));
					2:	SQL.Add (fnMakeSQLConstPayDetailInfo02Insert (pUpdateRecord));
					3:	SQL.Add (fnMakeSQLConstPayDetailInfo03Insert (pUpdateRecord));
					4:	SQL.Add (fnMakeSQLConstPayDetailInfo04Insert (pUpdateRecord));
					5:	SQL.Add (fnMakeSQLConstPayDetailInfo05Insert (pUpdateRecord));	// <189> Add
// <222> ADD start
					11: SQL.Add (fnMakeSQLConstPayDetailInfo09Insert (pUpdateRecord));	// 電信送金情報
                    13,
                    14: SQL.Add (fnMakeSQLConstPayDetailInfo10Insert (pUpdateRecord, nClass));	// 為替手形／送金小切手情報
// <222> ADD end
				end;
			end
			else
			begin
				Close ();

				SQL.Clear ();

				case (nClass) of
					1:	SQL.Add (fnMakeSQLConstPayDetailInfo01Update (pUpdateRecord));
					2:	SQL.Add (fnMakeSQLConstPayDetailInfo02Update (pUpdateRecord));
					3:	SQL.Add (fnMakeSQLConstPayDetailInfo03Update (pUpdateRecord));
					4:	SQL.Add (fnMakeSQLConstPayDetailInfo04Update (pUpdateRecord));
					5:	SQL.Add (fnMakeSQLConstPayDetailInfo05Update (pUpdateRecord));	// <189> Add
// <222> ADD start
					11:	SQL.Add (fnMakeSQLConstPayDetailInfo09Update (pUpdateRecord));	// 電信送金情報
                    13,
                    14: SQL.Add (fnMakeSQLConstPayDetailInfo10Update (pUpdateRecord, nClass));	// 為替手形／送金小切手情報
// <222> ADD end
				end;
			end;

			if	(not ExecSQL ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

				dqMasterData.Close ();
				dqMasterData.Free  ();

				Result  := FALSE;
				Exit;
			end;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;															// 正常終了
end;

// <149> 2006/10/11 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayDtlSyousai (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
	nRow		: Integer;
    nRowMax     : Integer;
    strSQL      : String;
	nClass		: Integer;														// <189> Add

begin
// <154> 2007/02/06 H.Kawato Mod
//    nRowMax := 0;
    nRowMax := 1;

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();

// <189> Add
// <222> MOD start
//		for	nClass := 1 to 5 do
		for	nClass := 1 to 14 do
// <222> MOD end
		begin
// <222> ADD start
			if nClass in [6, 7, 8, 9, 10, 12] then	// 支払種別に存在しない番号
            begin
            	Continue;
            end;
// <222> ADD end

// <189> Add
	        strSQL  := '';
    	    strSQL  := strSQL + 'DELETE FROM PayDetailInfo ';
        	strSQL  := strSQL + 'WHERE Edaban Between 11 AND 15 ';                  // 枝番(詳細設定)
// <189> Mod
//			strSQL  := strSQL + '  AND ShiharaiSyubetu = 3 ';                       // 優先支払方法※
			strSQL  := strSQL + '  AND ShiharaiSyubetu = ' + IntToStr(nClass);		// 優先支払方法※
// <189> Mod
            strSQL  := strSQL + '  AND PayPtnNo  = ' + FloatToStr(m_nPayPtnNo);     // 条件ﾊﾟﾀｰﾝNo
            strSQL  := strSQL + '  AND PayNCode  = ' + FloatToStr(pRecord^.nNCODE); // 取引先内部ｺｰﾄﾞ
            strSQL  := strSQL + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);   // ﾏｽﾀ区分
            strSQL  := strSQL + '  AND RDelKbn = 0 ';                               // 削除区分 <161> Add

            SQL.Add   (strSQL);

            if	(not ExecSQL ()) then
            begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

                dqMasterData.Close ();
                dqMasterData.Free  ();

                Result  := FALSE;
                Exit;
            end;
		end;															// <189> Add

        for	nRow := 1 to 5 do
        begin
            if (m_arSyousaiData[nRow].nBaseKingaku = 0) then
            begin
                nRowMax := nRow;
                break;
            end;
        end;

// <189> Mod ↓↓↓
//     	if (CmnEdit01030PriPayWayDivision.Value = 1) then
		if (CmnEdit01030PriPayWayDivision.Value <> 0) then
// <189> Mod ↑↑↑
        begin
            for	nRow := 1 to nRowMax do
            begin
                Close ();

                SQL.Clear ();
                SQL.Add   (fnMakeSQLConstPayDtlSyousaiInsert (pUpdateRecord, nRow));

                if	(not ExecSQL ()) then
                begin
                    m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
                    m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

                    dqMasterData.Close ();
                    dqMasterData.Free  ();

                    Result  := FALSE;
                    Exit;
                end;
            end;
        end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;															// 正常終了
end;
// <149> 2006/10/11 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayNayoseInfo (pUpdateRecord: Pointer): Boolean;
var
	dqMasterTree	  : TMQuery;
	pRecord			  : ^MasterData;
	nProcDivision	  : Integer;
	nNCodeParent      : Extended;
	nNCodePrevious    : Extended;
	fNewRecord		  : Boolean;

begin
	dqMasterTree	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);					// DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	if	(m_nCurNCode = _TreeSystemNCode) then
	begin
		nProcDivision		:= 2;												// 名寄せ区分: 2=名寄せ親
		nNCodeParent     	:= 0;
	end
	else
	begin
		nProcDivision		:= 1;												// 名寄せ区分: 1=名寄せ子
		nNCodeParent    	:= m_nCurNCode;
	end;

	nNCodePrevious      := 0;

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NayoseOyaNCode FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
		SQL.Add   ('       NayoseSyu = 1 AND PayNCode = :strHojCode AND NayoseKbn = :nProcDivision');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= pRecord^.nNCODE;
		ParamByName ('nProcDivision'  ).AsInteger	:= nProcDivision;

		if	(not Open ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
            Exit;
        end;

		fNewRecord	:= TRUE;

		if  (not EOF) then
		begin
			if	(CompareStr (FieldByName ('NayoseOyaNCode').AsString, FloatToStr(nNCodeParent)) = 0) then
			begin
				dqMasterTree.Close ();
				dqMasterTree.Free  ();

				Result	:= TRUE;
				Exit;															// 以下, 未処理
			end;

			nNCodePrevious	:= FieldByName ('NayoseOyaNCode').AsFloat;

			fNewRecord	:= FALSE;

			Close ();

			SQL.Clear ();
			SQL.Add   ('UPDATE PayNayoseInfo SET NayoseOyaNCode = :strHojCodeParent ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND ');
			SQL.Add   ('       NayoseSyu = 1 AND PayNCode = :strHojCode AND NayoseKbn = :nProcDivision');
		end
		else
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   ('INSERT INTO PayNayoseInfo (MasterKbn, NayoseSyu, PayNCode, NayoseKbn, NayoseOyaNCode)');
			SQL.Add   ('VALUES (:nMasterDivision, 1, :strHojCode, :nProcDivision, :strHojCodeParent)');
		end;

		ParamByName ('nMasterDivision' ).AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'      ).AsFloat	:= pRecord^.nNCODE;
		ParamByName ('nProcDivision'   ).AsInteger	:= nProcDivision;
		ParamByName ('strHojCodeParent').AsFloat	:= nNCodeParent;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		m_nPayNayoseInfo	:= 1;

		if	(fNewRecord) then
			fnAddTreeViewItemSumSystem (pRecord^.nNCode,pRecord^.strHojCode, nNCodeParent, pRecord^.strNameSimple)
		else
			fnMoveTreeViewItemSumSystem (pRecord^.nNCODE,pRecord^.strHojCode, nNCodeParent, nNCodePrevious);
	end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= TRUE;															// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayNayoseInfoEx (strHojCodeParent: String; nNCODE: Extended): Boolean;
var
	dqMasterTree: TMQuery;

begin
	dqMasterTree	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterTree);					// DBとMQueryの接続

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NayoseOyaNCode FROM PayNayoseInfo ');
		SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND NayoseSyu = 1 AND PayNCode = :strHojCode AND NayoseKbn = 1');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'     ).AsFloat 	:= nNCODE;

		if	(not Open ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		if	(not EOF) then
		begin
			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;													// 既存ﾚｺｰﾄﾞあり
			Exit;
		end;

		Close ();

		SQL.Clear ();
		SQL.Add   ('INSERT INTO PayNayoseInfo (MasterKbn, NayoseSyu, PayNCode, NayoseKbn, NayoseOyaNCode)');
		SQL.Add   ('VALUES (:nMasterDivision, 1, :strHojCode, 1, :strHojCodeParent)');

		ParamByName ('nMasterDivision' ).AsInteger	:= MASTER_CUSTOMER;
		ParamByName ('strHojCode'      ).AsFloat 	:= nNCODE;
		ParamByName ('strHojCodeParent').AsString	:= strHojCodeParent;

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterTree);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterTree);

			dqMasterTree.Close ();
			dqMasterTree.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		m_nPayNayoseInfo	:= 1;
	end;

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

	Result	:= TRUE;															// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayOffsetInfo (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
	nCount		: Integer;
    strSQL      : String;           // <149> 2006/10/11 H.Kawato Add

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	with (dqMasterData) do
	begin
		CmnMemDataOffset.First ();

		for	nCount := 1 to CmnMemDataOffset.RecordCount do
		begin
            Close ();               // <149> 2006/10/11 H.Kawato Add

			SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
{
			SQL.Add   ('SELECT PaynCode FROM PayOffsetInfo ');
			SQL.Add   ('WHERE  MasterKbn = :nMasterDivision AND PayNCode = :strHojCode AND SousaiNo = :nSeqNo');

			ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
			ParamByName ('strHojCode'     ).AsFloat 	:= pRecord^.nNCode;
			ParamByName ('nSeqNo'         ).AsInteger	:= CmnMemDataOffset.FieldByName ('nSeqNo').AsInteger;
}
            strSQL  := '';
            strSQL  := strSQL + 'SELECT PayNCode FROM PayOffsetInfo ';
            strSQL  := strSQL + 'WHERE SousaiNo  = ' + IntToStr(CmnMemDataOffset.FieldByName ('nSeqNo').AsInteger);
            strSQL  := strSQL + '  AND PayPtnNo  = ' + FloatToStr(m_nPayPtnNo);
            strSQL  := strSQL + '  AND PayNCode  = ' + FloatToStr(pRecord^.nNCODE);
            strSQL  := strSQL + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
            strSQL  := strSQL + '  AND RDelKbn = 0 ';   // <161> Add

			SQL.Add   (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

			if	(not Open ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

				dqMasterData.Close ();
				dqMasterData.Free  ();

				Result	:= FALSE;
				Exit;
			end;

			if  (EOF) then
			begin
				Close ();

				SQL.Clear ();
				SQL.Add   (fnMakeSQLConstPayOffsetInfoInsert (pUpdateRecord));
			end
			else
			begin
				Close ();

				SQL.Clear ();
				SQL.Add   (fnMakeSQLConstPayOffsetInfoUpdate (pUpdateRecord));
			end;

			if	(not ExecSQL ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

				dqMasterData.Close ();
				dqMasterData.Free  ();

				Result  := FALSE;
				Exit;
			end;

			CmnMemDataOffset.Next ();
		end;

		CmnMemDataOffset.First ();
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;															// 正常終了
end;

// <222> ADD start
//*****************************************************************************
//	Process			:	支払可変情報マスタ(PayVariableItem)の更新
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	pUpdateRecord	: パラメータ
//	Return			:	Boolean			: 正常 or 異常
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnUpdateMasterRecordPayVariableItem (pUpdateRecord: Pointer): Boolean;
var
	bExist		: Boolean;
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
    strSQL      : String;
    strIDList	: String;
    strID		: String;
    strValue	: String;
// <GAI-2> ADD-STR
    function    IsAllDefaultPayVariableItem(CmnMemDataVar:TdxMemData):Boolean;
    begin
        result := True;
        CmnMemDataVar.first;

		//　データが無い場合、更新処理(fnUpdateMasterRecordPayVariableItem)へ
        if (CmnMemDataVar.RecordCount = 0) then // 画面上で、可変項目のデータがないか
        begin
            result := False;
            Exit;
        end;

        while CmnMemDataVar.Eof = False do
        begin
            // 可変項目情報マスタにレコードなしの場合
            if (CmnMemDataVarIsDefault.AsBoolean = True) then
            begin
                // 画面の可変項目の内容が空の場合、更新処理なし
                if (CmnMemDataVarItemValue.AsString = '') then
                begin
                end
                else
                begin
                    result  := False;
                    break;
                end;
            end
            else
            begin
                result  := False;
                break;
           end;
            CmnMemDataVar.Next;
        end;
        CmnMemDataVar.first;
    end;
// <GAI-2> ADD-END
begin
// <GAI-2> ADD-STR
    // 可変項目情報マスタにレコードなし（画面の可変項目が全て青）で、内容が空の場合、更新処理は行わない
    if (IsAllDefaultPayVariableItem(CmnMemDataVar) = True) then
    begin
        result := True;     // (正常に更新されなかった。FalseだとエラーになるのでTrue)
        Exit;
    end;
// <GAI-2> ADD-END

	strIDList := '';
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

	pRecord	:= pUpdateRecord;

    try
        with (dqMasterData) do
        begin
        	{ 画面上になくてDBにあるレコードは消しておく }
            Close ();
            SQL.Clear ();
            CmnMemDataVar.First();

            while not CmnMemDataVar.Eof do	// 'AAA', 'BBB', ...
            begin
                strValue := CmnMemDataVar.FieldByName('ItemValue').AsString;
				strValue := Trim(strValue);
                strID := CmnMemDataVar.FieldByName('ID').AsString;
                strID := Trim(strID);

// <GAI-2> DEL-STR
//                if strValue <> '' then		// 内容が入っているもの = 今回DBに書くレコード
//                begin
// <GAI-2> DEL-END
                if strIDList <> '' then
                begin
                	strIDList := strIDList + ',';
                end;

                strIDList := strIDList + '''' + strID + '''';
//                end;			// <GAI-2> DEL
				CmnMemDataVar.Next();
            end;

            strSQL  := 'DELETE PayVariableItem '
                      +	'WHERE MasterKbn = ' + IntToStr(MASTER_CUSTOMER)        // 22:取引先（仕入先）
                      +	'  AND PayNCode  = ' + FloatToStr(pRecord^.nNCODE)      // 支払先内部コード
                      +	'  AND PayPtnNo  = ' + FloatToStr(m_nPayPtnNo)          // 1:標準
                      +	'  AND RecSyubetu = 11 ';                               // 11:電信送金

            if strIDList <> '' then
            begin
        		strSQL := strSQL + ' AND ItemID not in (' + strIDList + ')';
            end;

            SQL.Add(strSQL);

            if	(not ExecSQL ()) then		// 削除
            begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

                Result  := FALSE;
                Exit;
            end;


            { 画面上の可変項目情報を更新 }
            CmnMemDataVar.First ();

            // 画面上で可変項目が登録されている場合         // <GAI-2> ADD
            while not CmnMemDataVar.Eof do 	// MemDataのレコードを1行ずつ更新
            begin
            	strID := CmnMemDataVar.FieldByName('ID').AsString;
                strValue := CmnMemDataVar.FieldByName('ItemValue').AsString;

// <GAI-2> DEL-STR
//				if Trim(strValue) = '' then	// 内容が未入力のデータは更新しない
//				begin
//  					CmnMemDataVar.Next;
//					Continue;
//				end;
// <GAI-2> DEL-END

                Close ();
                SQL.Clear ();
                strSQL  := 'SELECT PayNCode FROM PayVariableItem '
                          +	'WHERE MasterKbn = ' + IntToStr(MASTER_CUSTOMER)
                          +	'  AND PayNCode  = ' + FloatToStr(pRecord^.nNCODE)
                          +	'  AND PayPtnNo  = ' + FloatToStr(m_nPayPtnNo)
                          +	'  AND RecSyubetu = 11 '
                          +	'  AND ItemID = :parItemID';

                SQL.Add   (strSQL);
                ParamByName('parItemID').AsString := strID;

                if	(not Open ()) then
                begin
                    m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
                    m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

                    Result	:= FALSE;
                    Exit;
                end;

                if  (EOF) then
                begin
	                bExist := False;		// レコードなし
                end
                else
                begin
                	bExist := True;			// レコードあり
                end;

                Close ();
                SQL.Clear ();

                if not bExist then			// レコードがない場合
                begin
                    SQL.Add   (fnMakeSQLConstPayVariableItemInsert (pUpdateRecord, strID, strValue));
                end
                else                        // レコードがある場合
                begin
                    SQL.Add   (fnMakeSQLConstPayVariableItemUpdate (pUpdateRecord, strID, strValue));
                end;

                if	(not ExecSQL ()) then
                begin
                    m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
                    m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

                    Result  := FALSE;
                    Exit;
                end;

                CmnMemDataVar.Next ();
            end;

            CmnMemDataVar.First ();
        end;
	finally
        dqMasterData.Close ();
        dqMasterData.Free  ();
    end;

	Result	:= TRUE;															// 正常終了
end;
// <222> ADD end

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayPtnDtl (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
	nRow		: Integer;
    strSQL      : String;           // <149> 2006/10/11 H.Kawato Add

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	with (dqMasterData) do
	begin
		Close ();
        
		SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
//		SQL.Add   ('DELETE FROM PayPtnDtl WHERE MasterKbn = :nMasterDivision AND PayNCode = :strHojCode');

//		ParamByName ('nMasterDivision').AsInteger	:= MASTER_CUSTOMER;
//		ParamByName ('strHojCode'     ).AsFloat 	:= pRecord^.nNCODE;

        strSQL  := '';
        strSQL  := strSQL + 'DELETE FROM PayPtnDtl ';
        strSQL  := strSQL + 'WHERE PayPtnNo  = ' + FloatToStr(m_nPayPtnNo);
        strSQL  := strSQL + '  AND PayNCode  = ' + FloatToStr(pRecord^.nNCODE);
        strSQL  := strSQL + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
        strSQL  := strSQL + '  AND RDelKbn = 0 ';   // <161> Add

		SQL.Add   (strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		if	(not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result  := FALSE;
			Exit;
		end;

		for	nRow := 1 to 5 do
		begin
			if	((TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger < 1) or
				 (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger > 5)) then
				Continue;

			Close ();

			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstPayPtnDtlInsert (pUpdateRecord, nRow));

			if	(not ExecSQL ()) then
			begin
				m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
				m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

				dqMasterData.Close ();
				dqMasterData.Free  ();

				Result  := FALSE;
				Exit;
			end;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;															// 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordPayPtnInfo (pUpdateRecord: Pointer): Boolean;
var
	dqMasterData: TMQuery;
	pRecord		: ^MasterData;
    strSQL      : String;               // <149> 2006/10/11 H.Kawato Add
    lvKojiNCD   : Extended;             // <149> 2006/10/11 H.Kawato Add
    lvKosyuNCD  : Extended;             // <149> 2006/10/11 H.Kawato Add
    lvTRMstKbn  : Integer;              // <149> 2006/10/11 H.Kawato Add

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);						// DBとMQueryの接続

	pRecord	:= pUpdateRecord;

	with (dqMasterData) do
	begin
// <149> 2006/10/11 H.Kawato Mod Start
{
		Close ();
		SQL.Clear ();

		SQL.Add   ('SELECT BaseNCode FROM MTOKUI_PAY ');
		SQL.Add   ('WHERE  BaseNCode = :strHojCode');

		ParamByName ('strHojCode'     ).AsFloat 	:= pRecord^.nNCODE;

		if (not Open ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

		if (EOF) then
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstPayPtnInfoInsert (pUpdateRecord));
		end
		else
		begin
			Close ();

			SQL.Clear ();
			SQL.Add   (fnMakeSQLConstPayPtnInfoUpdate (pUpdateRecord));
		end;
}
        lvKojiNCD   := 0;
        lvKosyuNCD  := 0;

        if (CmnEdit00014KojiCodeNumeric.Text = '') and (CmnEdit00014KojiCodeFree.Text = '') then
        begin                                                                   // 標準情報の更新
            m_nPayPtnNo := 1;

            Close ();
            SQL.Clear ();

            strSQL  := '';
            strSQL  := strSQL + 'SELECT PayNCode FROM PayPtnInfo ';
            strSQL  := strSQL + 'WHERE  PayPtnNo  = 1 ';
            strSQL  := strSQL + '  AND  PayNCode  = ' + FloatToStr(pRecord^.nNCODE);
            strSQL  := strSQL + '  AND  MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
            strSQL  := strSQL + '  AND  RDelKbn = 0 ';  // <161> Add

            SQL.Add   (strSQL);

            if (not Open ()) then
            begin
            	m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
            	m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

            	dqMasterData.Close ();
            	dqMasterData.Free  ();

            	Result	:= FALSE;
            	Exit;
            end;

            if (not EOF) then           // ﾚｺｰﾄﾞが存在する
                lvTRMstKbn  := TR_UPD
            else                        // ﾚｺｰﾄﾞが存在しない
                lvTRMstKbn  := TR_INS;
        end
        else                                                                    // ﾌﾟﾛｼﾞｪｸﾄ別支払の更新
        begin
            fnGetPrjNCode (lvKojiNCD, lvKosyuNCD);                              // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得

			Close ();
			SQL.Clear ();

            strSQL  := '';
            strSQL  := strSQL + 'SELECT PayPtnNo FROM PayPtnInfo ';
            strSQL  := strSQL + 'WHERE  BmnNCode   = 0';
            strSQL  := strSQL + '  AND  PjSubNCode = ' + FloatToStr(lvKosyuNCD);
            strSQL  := strSQL + '  AND  PrjNCode   = ' + FloatToStr(lvKojiNCD);
            strSQL  := strSQL + '  AND  PayNCode   = ' + FloatToStr(pRecord^.nNCODE);
            strSQL  := strSQL + '  AND  MasterKbn  = ' + IntToStr(MASTER_CUSTOMER) + ' ';
            strSQL  := strSQL + '  AND  RDelKbn    = 0 ';   // <161> Add
            strSQL  := strSQL + 'GROUP BY PayPtnNo ';

			SQL.Add   (strSQL);

            if (not Open ()) then
            begin
            	m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
            	m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

            	dqMasterData.Close ();
            	dqMasterData.Free  ();

            	Result	:= FALSE;
            	Exit;
            end;

            if (not EOF) then           // ﾚｺｰﾄﾞが存在する
            begin
                m_nPayPtnNo := FieldByName ('PayPtnNo').AsFloat;
                lvTRMstKbn  := TR_UPD;
            end
            else                        // ﾚｺｰﾄﾞが存在しない
            begin
                Close ();
                SQL.Clear ();

                strSQL  := '';          // 条件ﾊﾟﾀｰﾝNo最大値の取得
                strSQL  := strSQL + 'SELECT ISNULL(MAX(PayPtnNo),0) AS MaxNo FROM PayPtnInfo ';
                strSQL  := strSQL + 'WHERE  PayNCode   = ' + FloatToStr(pRecord^.nNCODE);
                strSQL  := strSQL + '  AND  MasterKbn  = ' + IntToStr(MASTER_CUSTOMER);

                SQL.Add   (strSQL);

                if (not Open ()) then
                begin
                	m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
                	m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

                	dqMasterData.Close ();
                	dqMasterData.Free  ();

                	Result	:= FALSE;
                	Exit;
                end;

                if (not EOF) then
                begin
                    if (FieldByName ('MaxNo').AsFloat > 1) then
                        m_nPayPtnNo := FieldByName ('MaxNo').AsFloat + 1
                    else
                        m_nPayPtnNo := 2;
                end
                else    m_nPayPtnNo := 2;

                lvTRMstKbn  := TR_INS;
            end;
        end;

        Close ();
        SQL.Clear ();

		if (lvTRMstKbn = TR_INS) then
			SQL.Add   (fnMakeSQLConstPayPtnInfoInsert (pUpdateRecord, lvKojiNCD, lvKosyuNCD))
		else if (lvTRMstKbn = TR_UPD) then
			SQL.Add   (fnMakeSQLConstPayPtnInfoUpdate (pUpdateRecord, lvKojiNCD, lvKosyuNCD));
// <149> 2006/10/11 H.Kawato Mod End

		if (not ExecSQL ()) then
		begin
			m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
			m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);

			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result  := FALSE;
			Exit;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

	Result	:= TRUE;															    // 正常終了
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordStandard (pUpdateRecord: Pointer): Boolean;
begin
	m_cDataModule.BeginTran (m_cDBSelect);										    // ﾄﾗﾝｻﾞｸｼｮﾝの開始

	if	(not fnUpdateMasterRecordHojyoMA (pUpdateRecord)) then					    // 補助基本ﾏｽﾀ 更新
	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);									    // ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	if	(not fnUpdateMasterRecordHojyoTree (pUpdateRecord,2)) then				    // 補助体系ﾏｽﾀ 更新
	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);									    // ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	if	((m_nCurItemDivision = TREE_SYSTEM_SUM) or (m_nCurItemDivision = TREE_PARENT_SUM)) then
	begin
		if	(not fnUpdateMasterRecordPayNayoseInfo (pUpdateRecord)) then		    // 名寄せ情報ﾏｽﾀ 更新
		begin
			Beep ();

			fnOutputDBErrorMessage ();
			m_cDataModule.Rollback (m_cDBSelect);								    // ﾛｰﾙﾊﾞｯｸ(破棄)

			Result	:= FALSE;
			Exit;
		end;
	end;


	m_cDataModule.Commit (m_cDBSelect);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnUpdateMasterRecordSumSystem (cNodeSrc: TTreeNode; cNodeDst: TTreeNode): Boolean;
var
	pItemRec   : PTreeViewRec;
	pMasterData: ^MasterData;

begin
	New (pMasterData);

	if	((PTreeViewRec (cNodeSrc.Data)^.nItemDivision = TREE_PARENT    ) or		    // 合計取引先
		 (PTreeViewRec (cNodeSrc.Data)^.nItemDivision = TREE_PARENT_SUM)) then	    // 名寄せ親
		pMasterData^.nSumDivision	:= 1
	else
		pMasterData^.nSumDivision	:= 0;

	pMasterData^.strHojCode		:= PTreeViewRec (cNodeSrc.Data)^.strHojCode;
	pMasterData^.nNCode	    	:= PTreeViewRec (cNodeSrc.Data)^.nNCode;
	pMasterData^.strNameSimple	:= PTreeViewRec (cNodeSrc.Data)^.strDescription;

	if	((PTreeViewRec (cNodeSrc.Data)^.nItemDivision = TREE_PARENT    ) or		    // 合計取引先
		 (PTreeViewRec (cNodeSrc.Data)^.nItemDivision = TREE_PARENT_SUM)) then	    // 名寄せ親
	begin
		m_strCurHojCode		:= _TreeSystemCode;
		m_nCurNCode	     	:= _TreeSystemNCode;
		m_nCurItemDivision	:= TREE_SYSTEM_SUM;									    // 名寄せ体系
	end
	else
	begin
		if	(PTreeViewRec (cNodeDst.Data)^.nItemDivision = TREE_PARENT_SUM) then    // 名寄せ親
			pItemRec	:= cNodeDst.Data
		else
			pItemRec	:= cNodeDst.Parent.Data;

		m_strCurHojCode		:= pItemRec^.strHojCode;
		m_nCurNCode  		:= pItemRec^.nNCode;
		m_nCurItemDivision	:= pItemRec^.nItemDivision;
	end;

	m_cDataModule.BeginTran (m_cDBSelect);										    // ﾄﾗﾝｻﾞｸｼｮﾝの開始

	if	(not fnUpdateMasterRecordPayNayoseInfo (pMasterData)) then				    // 名寄せ情報ﾏｽﾀ 更新
	begin
		Beep ();

		fnOutputDBErrorMessage ();
		m_cDataModule.Rollback (m_cDBSelect);									    // ﾛｰﾙﾊﾞｯｸ(破棄)

		Result	:= FALSE;
		Exit;
	end;

	m_cDataModule.Commit (m_cDBSelect);

	Dispose (pMasterData);

	Result	:= TRUE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnUpdateMemDataStandardRecord (nDivision: Integer; strHojCode: String; nTagKind: Integer);
var
	cMemData : TdxMemData;
	nRetRecNo: Integer;
	strFormat: String;

begin
	if	(m_nCurCodeAttribute <= 1) then
	begin
		case (m_nCurCodeAttribute) of
			0:	strFormat	:= '%'  + IntToStr (m_nCurCodeDigit) + 'd';
			1:	strFormat	:= '%.' + IntToStr (m_nCurCodeDigit) + 'd';
		end;

		strHojCode	:= Format (strFormat, [StrToInt64 (Trim (strHojCode))]);
	end;

	if	(nDivision = 0) then													    // 実在/合計区分: 0=実在
		cMemData	:= CmnMemDataStandardExist
	else																		    // 実在/合計区分: 1=合計
		cMemData	:= CmnMemDataStandardTotal;

	nRetRecNo	:= cMemData.GetRecNoByFieldValue (strHojCode, 'strHojCode');

	if	(nRetRecNo > 0) then
	begin
		if	(nRetRecNo = 1) then
			cMemData.First ()
		else if	(nRetRecNo = cMemData.RecordCount) then
			cMemData.Last ()
		else
			cMemData.RecNo	:= nRetRecNo;

		cMemData.Edit ();
		cMemData.FieldByName ('grTag').Assign (fnGetBitmapSelectedTag (nTagKind));

		if	(nTagKind = 0) then
			cMemData.FieldByName ('strComment').AsString	:= '';

		cMemData.Post ();
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnUpdateTreeViewItems (strHojCode: String; strDescription: String);
var
	nCount: Integer;

begin
	for	nCount := 0 to CmnTreeView.Items.Count - 1 do
	begin
		if	(CompareStr (PTreeViewRec (CmnTreeView.Items [nCount].Data)^.strHojCode, strHojCode) <> 0) then
			Continue;

		PTreeViewRec (CmnTreeView.Items [nCount].Data)^.strDescription	:= strDescription;

		CmnTreeView.Items [nCount].Text	:= strDescription;

		if	(PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision = TREE_PARENT_INVALID) then
		begin
			PTreeViewRec (CmnTreeView.Items [nCount].Data)^.nItemDivision	:= TREE_PARENT;

			CmnTreeView.Items [nCount].ImageIndex		:= TREE_INDEX_PARENT;
			CmnTreeView.Items [nCount].SelectedIndex	:= CmnTreeView.Items [nCount].ImageIndex + 1;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure TJNTCRP004006f.ppDetailBand3BeforePrint(Sender: TObject);
begin
	if	(CmnMemDataPrintDetail.FieldByName ('nDecDivision').AsInteger = 0) then	    // 分解方法: 0=比率
	begin 
		CmnReportDetailDBTextPaymentBasedValue01.DisplayFormat	:= '##0.00';
		CmnReportDetailDBTextPaymentBasedValue02.DisplayFormat	:= '##0.00';
		CmnReportDetailDBTextPaymentBasedValue03.DisplayFormat	:= '##0.00';
		CmnReportDetailDBTextPaymentBasedValue04.DisplayFormat	:= '##0.00';
		CmnReportDetailDBTextPaymentBasedValue05.DisplayFormat	:= '##0.00';

    end
	else																		    // 分解方法: 1=定額
	begin
		CmnReportDetailDBTextPaymentBasedValue01.DisplayFormat	:= '#,##0';
		CmnReportDetailDBTextPaymentBasedValue02.DisplayFormat	:= '#,##0';
		CmnReportDetailDBTextPaymentBasedValue03.DisplayFormat	:= '#,##0';
		CmnReportDetailDBTextPaymentBasedValue04.DisplayFormat	:= '#,##0';
		CmnReportDetailDBTextPaymentBasedValue05.DisplayFormat	:= '#,##0';
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnReportDetailDBTextOffsetHojCodeOnPrint (Sender: TObject);
var
	nRow	 : Integer;
	nPosition: Integer;

begin
	nPosition	:= StrToInt (Copy (TppDBText (Sender).Name, 35, 2));
	nRow		:= StrToInt (Copy (TppDBText (Sender).Name, 37, 2));

	if	(CmnMemDataPrintDetail.FieldByName (
								Format ('nOffsetAttribute%.2d%.2d', [nPosition, nRow])).AsInteger <= 1) then
		TppDBText (Sender).Alignment	:= taRightJustify
	else
		TppDBText (Sender).Alignment	:= taLeftJustify;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEdit05002KmkCodeOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if	((Key = VK_LEFT) or (Key = VK_UP)) then
	begin
		if	(TMNumEdit (Sender).InputFlag) then
			fnSetChangeFlagCheckItems (TMNumEdit (Sender), FALSE);
	end;

	fnCmnFunctiononKeyDown (Sender, Key, Shift);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnReportBeforePrint (Sender: TObject);
begin
	m_cPrnSupport.BeforePrint (Sender);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnReportDetailBandBeforeGenerate (Sender: TObject);
var
	cUnderLine: TppLine;

begin
	if	(TppDetailBand (Sender).Name = CmnDetailBandExtStandard.Name) then
		cUnderLine	:= CmnLineReportExtStandardDetailBand
	else if	(TppDetailBand (Sender).Name = CmnDetailBandTtlStandard.Name) then
		cUnderLine	:= CmnLineReportTtlStandardDetailBand
	else if	(TppDetailBand (Sender).Name = CmnDetailBandSystem.Name) then
	begin
		cUnderLine	:= CmnLineReportSystemDetailBandChild;

		if	(m_fPrintBottom) then
		begin
			m_strPrintHojCode	:= '';
			m_fPrintBottom		:= FALSE;
		end;
	end
// <222> ADD start
	else if	(TppDetailBand (Sender).Name = CmnDetailBandGaika.Name) then	// 外貨情報
    begin
   		cUnderLine := CmnLineReportGaikaDetailBand;
    end
// <222> ADD end
	else
		Exit;

	if	(TppDetailBand (Sender).LastRecord or TppDetailBand (Sender).PageOutOfSpace) then
	begin
		if	(not TppDetailBand (Sender).OverFlow) then
			TppDetailBand (Sender).OverFlow	:= TRUE;

		if	(not cUnderLine.ReprintOnOverFlow) then
		begin
			cUnderLine.ReprintOnOverFlow	:= TRUE;

			if	(TppDetailBand (Sender).Name = CmnDetailBandSystem.Name) then
				CmnLineReportSystemDetailBandParent.ReprintOnOverFlow	:= TRUE;
		end;

		cUnderLine.Weight	:= 0.75;

		if	(TppDetailBand (Sender).Name = CmnDetailBandSystem.Name) then
		begin
			CmnLineReportSystemDetailBandParent.Visible	:= TRUE;
			CmnLineReportSystemDetailBandParent.Weight	:= 0.75;

			m_fPrintBottom	:= TRUE;
		end;
	end
	else
	begin
		cUnderLine.Weight	:= 0.25;

		if	(TppDetailBand (Sender).Name = CmnDetailBandSystem.Name) then
		begin
			if	(CmnMemDataPrintSystem.FieldByName ('nLineDivision').AsInteger = 0) then
				CmnLineReportSystemDetailBandParent.Visible	:= FALSE
			else
			begin
				cUnderLine.Weight	:= 0.75;

				CmnLineReportSystemDetailBandParent.Visible	:= TRUE;
				CmnLineReportSystemDetailBandParent.Weight	:= 0.75;
			end;
		end;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabStandardOnChange (Sender: TObject);
begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	if	(m_fThroughTabStandard and (Screen.ActiveControl.Name = CmnTabStandard.Name)) then
	begin
		m_fThroughTabStandard	:= FALSE;
		Exit;
	end;

	if	(m_fUnderConstruction) then
		Exit;

	if	(m_nReferMode = REFER) then												    // ﾒｰﾙ会計参照区分: 参照のみ
		Exit;

	if	(CmnTabStandard.Items.Selected = 0) then
		m_cACControl	:= CmnGridStandardExist
	else
		m_cACControl	:= CmnGridStandardTotal;

	m_cACControl.SetFocus ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnTabStandardOnKeyDown (Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if	(m_pRec^.m_pChildForm = nil) then
		Exit;

	if	(m_nReferMode = REFER) then												    // ﾒｰﾙ会計参照区分: 参照のみ
		Exit;

	if	((Key = VK_RETURN) or (Key = VK_DOWN)) then
	begin
		if	(TMTab (Sender).Items [0].Selected) then							    // 実在
			m_cACControl	:= CmnGridStandardExist
		else if (TMTab (Sender).Items [1].Selected) then						    // 合計
			m_cACControl	:= CmnGridStandardTotal
		else
			Exit;

		m_cACControl.SetFocus ();
	end;

	if	(((Key = VK_LEFT) and (Shift = [])) or ((Key = VK_RIGHT) and (Shift = []))) then
		m_fThroughTabStandard	:= TRUE;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEdit01001DecDivisionOnChange (Sender: TObject);
var
//    strDescription : String;
    nRow    : Integer;              // <149> 2006/10/11 H.Kawato Add
	sPayWay	: String;				// <189> Add
begin
 	fnCmnFunctionOnChange (Sender);

	if	(not TMNumEdit (Sender).ListDisp) then
		Exit;

// <170> 2007/12/14 H.Kawato Add Start
    if (TWinControl(Sender).Name = CmnEdit00017SateiCalcKbn.Name) then
    begin
    	fnChangeConditionSateiCalc ();
    end;
// <170> 2007/12/14 H.Kawato Add End

    if (TWinControl(Sender).Name = CmnEdit01001DecDivision.Name) then           // <149> 2006/10/11 H.Kawato Add
    begin
    	fnChangeConditionPayment ();
        m_bBunkaiChgFlg := True;    // <132> 2006/06/15 H.Kawato Add
    end;                            // <149> 2006/10/11 H.Kawato Add

// <149> 2006/10/11 H.Kawato Add Start
    if (TWinControl (Sender).Name = CmnEdit01030PriPayWayDivision.Name) then
    begin
        m_bYusenChange  := True;
        
        if (CmnEdit01030PriPayWayDivision.Value = 0) then
        begin
// <189> Mod
//          CmnLabel01030PriPayWayDivisionDesc.Caption      := 'しない';
			CmnLabel01030PriPayWayDivisionDesc.Caption      := 'なし';
// <189> Mod
            CmnEdit01002PaymentColumnDivision.ArrowDisp     := adFocused;
            CmnEdit01002PaymentColumnDivision.ReadOnly      := FALSE;
            CmnEdit01003PaymentColumnBasedValue.ReadOnly    := FALSE;
            CmnEdit01002PaymentColumnDivision.TabStop       := TRUE;
            CmnEdit01003PaymentColumnBasedValue.TabStop     := TRUE;

            if (CmnEdit01001DecDivision.AsInteger = 0) then     // 分解方法: 0=比率
            begin
                CmnEdit01004PaymentColumnMinimumPrice.ReadOnly  := FALSE;
                CmnEdit01005PaymentColumnFractionPrice.ReadOnly := FALSE;
                CmnEdit01006PaymentColumnFraction.ReadOnly      := FALSE;
                CmnEdit01004PaymentColumnMinimumPrice.TabStop   := TRUE;
                CmnEdit01005PaymentColumnFractionPrice.TabStop  := TRUE;
                CmnEdit01006PaymentColumnFraction.TabStop       := TRUE;
            end;

            m_nPriPayWay    := CmnEdit01030PriPayWayDivision.Value;

            // 詳細データ格納用配列の初期化
            for	nRow := 1 to 5 do
            begin
                m_arSyousaiData[nRow].nEdaban       := 0;
                m_arSyousaiData[nRow].nBaseKingaku  := 0;
                m_arSyousaiData[nRow].nBaseHiritu   := 0;
                m_arSyousaiData[nRow].nHasuuKingaku := 0;
                m_arSyousaiData[nRow].nHasuuHou     := 0;
                m_arSyousaiData[nRow].nSite         := 0;
            end;
			fnSetFncType(6, False);								// <189> Add
        end
// <189> Mod ↓↓↓
//      else if (CmnEdit01030PriPayWayDivision.Value = 1) then
//      begin
//          CmnLabel01030PriPayWayDivisionDesc.Caption  := 'する';
//          // 詳細情報設定ダイアログを起動
//          fnLaunchDlgSyousai();
        else if (CmnEdit01030PriPayWayDivision.Value <> 0) then
		begin
			case CmnEdit01030PriPayWayDivision.AsInteger of
				1:	sPayWay := '振込';
				2:	sPayWay := '期日指定振込';
				3:	sPayWay := '手形';
				4:	sPayWay := '小切手';
				5:	sPayWay := '現金';
			end;
            CmnLabel01030PriPayWayDivisionDesc.Caption	:= sPayWay;
			fnSetFncType(6, True);
// <189> Mod ↑↑↑
        end;
    end;
// <149> 2006/10/11 H.Kawato Add End
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditListDispOnChange (Sender: TObject);
begin
	fnCmnFunctionOnChange (Sender);

	if	(not TMNumEdit (Sender).ListDisp) then
		Exit;

	CmnButtonPagePrevious.TabStop	:= FALSE;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEdit05006TaxCodeOnChange (Sender: TObject);
begin
	fnCmnFunctionOnChange (Sender);

	if	(not TMNumEdit (Sender).ListDisp) then
		Exit;

	fnChangeConditionOffsetTax ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnReportSystemOnEndPage (Sender: TObject);
begin
	m_strPrintHojCode	:= '';
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnReportSystemDBTextHojCodeOnPrint (Sender: TObject);
begin
	if	(CompareStr (CmnReportSystemDBTextHojCode.Text, m_strPrintHojCode) = 0) then
	begin
		CmnReportSystemDBTextHojCode    .Visible	:= FALSE;
		CmnReportSystemDBTextHojCodeDesc.Visible	:= FALSE;
	end
	else
    begin
		CmnReportSystemDBTextHojCode    .Visible	:= TRUE;
		CmnReportSystemDBTextHojCodeDesc.Visible	:= TRUE;

		m_strPrintHojCode	:= CmnReportSystemDBTextHojCode.Text;
	end;
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnButtonPageOnEnter (Sender: TObject);
begin
	CmnButtonPagePrevious.TabStop	:= TRUE;

	fnCmnFunctionOnEnter (Sender);
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnCmnEditPaymentColumnDivisionOnChange (Sender: TObject);
begin
	fnCmnFunctionOnChange (Sender);

	if	(not TMNumEdit (Sender).ListDisp) then
		Exit;

	fnCheckDecomposeListRecord (TMNumEdit (Sender));
end;

//--- <#3> St -----
//**********************************************************************
//*		Proccess	:	排他制御処理
//*		Name		:	H.Endo
//*		Date		:	2003/06/30
//*		Parameter	:	なし
//*		Return		:	他で使われていない(0)/使われている(99)
//*		History		:
//**********************************************************************
function TJNTCRP004006f.fnExcept():Integer;
//var
//	iRet	:	Integer;
//	bFlg	:	Boolean;
begin
//	bFlg	  := False;
	result    := 0;
	m_cExcept := nil;

{<100>
	try
		m_cExcept := TJNTMASExceptIF.Init(m_pRec);
		// 取引先関係ﾏｽﾀの排他ﾁｪｯｸ
		iRet := m_cExcept.SetExcept(522);
		if iRet <> EXCEPT_RET_OK then
		begin
			MjsMessageBoxEx('取引先マスタの排他制御でエラーが発生しました。','排他制御',mjError,mjOK,mjDefOK);
			bFlg   := True;
			result := -1;
			exit;
		end;
		// 他で更新処理が流れていないかﾁｪｯｸ
		if (m_cExcept.Status100 = 1) or (m_cExcept.Status400 = 1) then
		begin
			bFlg   := True;
			result := 99;
			exit;
		end;
	finally
		// m_cExceptがnilではなく、他で更新処理が行われている時
		if (m_cExcept <> nil) and (bFlg = True) then
		begin
			m_cExcept.ResetTerm;
			m_cExcept.Free;
			m_cExcept := nil;
		end;
	end;
}
end;
//--- <#3> Ed -----

//--- <#4> St -----
//************************************************************************
//*		Component		:	CmnEdit00001HojCode ( TMTxtEdit/TMNumEdit )
//*							支払先の検索EXP表示処理
//*		Event			:	OnArrowClick
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004006f.CmnEdit00001HojCodeArrowClick(Sender: TObject);
//var
//	cMasWndParam: TJNTMasWndParam;
//	cMasWndIF	: TJNTMasWndIF;
//	sSQL_Whewe	: String;
begin


{<100>
	cMasWndIF := TJNTMasWndIF.Create();
	cMasWndIF.Init (Pointer(m_pRec));

	cMasWndParam := TJNTMasWndParam.CreateParam();

	cMasWndParam.m_GCodeFD		:= 'GCode';										// ｺｰﾄﾞ      ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_RenCharFD	:= 'RenSO';										// 連想ｼﾝﾎﾞﾙ ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_SimpleNameFD	:= 'NMK';										// 簡略名称  ﾌｨｰﾙﾄﾞ名
	cMasWndParam.m_TableName	:= 'MTOKUI';									// ﾃｰﾌﾞﾙ名
	cMasWndParam.m_pApRec		:= Pointer (m_pRec);							// ApRecのﾎﾟｲﾝﾀ
	cMasWndParam.m_iCodeLength	:= m_nCurCodeDigit;								// ｺｰﾄﾞ桁数
	cMasWndParam.m_iCodeAttr	:= m_nCurCodeAttribute;							// ｺｰﾄﾞ属性
	sSQL_Whewe := ' RDelKbn = 0 AND ';
	case CmnTabDetail.Items.Selected of
		0: sSQL_Whewe := sSQL_Whewe+' SumKbn = 0 and HojyoKbn2 = 1 ';			// 実在
		1: sSQL_Whewe := sSQL_Whewe+' SumKbn = 1 ';								// 合計
	end;
	cMasWndParam.m_SQL_Where	:= sSQL_Whewe;


	if (cMasWndIF.DoDlg(cMasWndParam) = mrOK) then
	begin
		if (Sender is TMNumEdit) then
		begin
			TMNumEdit(Sender).Value		:= StrToInt64(cMasWndParam.m_ExpRetCode);
			TMNumEdit(Sender).InputFlag	:= FALSE;
		end
		else
			TMTxtEdit(Sender).Text := cMasWndParam.m_ExpRetCode;

		fnCheckEditTxtValueHojCode(0,1);	// 取引先ｺｰﾄﾞ
	end;

	cMasWndParam.Free();
	cMasWndIF.Term();
	cMasWndIF.Free();
}
end;
//--- <#4> Ed -----

//--- <#7> St -----
//************************************************************************
//*		Component		:	CmnPopupMenuTreeViewAllOpen ( TPopupMenu )
//*							全て展開
//*		Event			:	OnClick
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004006f.CmnPopupMenuTreeViewAllOpenClick(Sender: TObject);
begin
	CmnTreeView.FullExpand;
end;

//************************************************************************
//*		Component		:	CmnPopupMenuTreeViewAllClose ( TPopupMenu )
//*							全て閉じる
//*		Event			:	OnClick
//*		Name			:	H.Endo(MJS)
//************************************************************************
procedure TJNTCRP004006f.CmnPopupMenuTreeViewAllCloseClick(Sender: TObject);
begin
	CmnTreeView.FullCollapse;
end;
//--- <#7> Ed -----

//--- <#8> St -----
//**********************************************************************
//*		Proccess	:	拡大率を掛けた値を取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2005/01/17
//*		Parameter	:	Int		:	拡大率をかける元の値
//*		Return		:	拡大率を掛けた値
//**********************************************************************
function TJNTCRP004006f.fnGetZoom(Int: Integer): Integer;
begin
	Result := Trunc(Int*m_ZoomRatio/100);
end;
//**********************************************************************
//*		Proccess	:
//*		Name		:
//*		Date		:
//*		Parameter	:
//*		Return		:	内部コード
//**********************************************************************
Function TJNTCRP004006f.fnGetNCODE(StrHojyoCODE: String):Extended;
var
	Qry: TMQuery;
begin

    Result := 0;
	Qry	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qry);						    // DBとMQueryの接続

    with Qry do
    begin
        Close;
        Sql.Clear;
        Sql.Add('Select NCODE from MTOKUI ' +
                ' Where (GCODE = :pCODE) and (RDelKbn = 0) ' +
                ' and TemplateKbn = 0 ');   // <102>
        ParamByName('pCODE').asString := strHojyoCode;
        Open;
        if not Eof then
            Result := FieldByName('NCODE').asFloat;

    end;
    Qry.Close ();
    Qry.Free  ();

end;
//--- <#8> Ed -----

//**********************************************************************
//*		Proccess	:   科目外部ｺｰﾄﾞより存在ﾁｪｯｸを行い名称を取得する
//*		Parameter	:   外部ｺｰﾄﾞ
//*		Return		:	Boolean,科目名称
//**********************************************************************
function	TJNTCRP004006f.fnCheckValidKmkCodeG (nKmkCode: Integer;
                                            var nCode   :Extended;
                                            var strDescription: String): Boolean;
var
	dqMasterData: TMQuery;
    i           : Integer;  // <194> ADD
begin
	strDescription	:= '';

	if	((nKmkCode = m_nKmkCompound01) or (nKmkCode = m_nKmkCompound02)) then
	begin
		Result	:= FALSE;
		Exit;
	end;

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT NCode,SimpleName FROM KmkMA ');
		SQL.Add   ('WHERE  MasterKbn = 1 AND SumKbn = 0 AND ');
		SQL.Add   ('       RDelKbn = 0 AND GCode = :nKmkCode AND SubCode = 0 AND AnalyzeCode <> 0');
		SQL.Add   (' and InputKbn <> 9 ');                                      // <#1-ADD>

		ParamByName ('nKmkCode').AsInteger	:= nKmkCode;

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;

        nCode           := FieldByName ('NCode').AsFloat;
		strDescription	:= FieldByName ('SimpleName').AsString;

	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

// <194> ADD-STR
    if (Screen.ActiveControl.Name = CmnEdit05002KmkCode.Name) then
    begin
        //<相殺>補助内部コードクリア
        for i := (Low(m_dSousaiNCode) + 1) to High(m_dSousaiNCode) do
            m_dSousaiNCode[i]	:= 0;

        // 内部コードエリアをクリア
        with CmnMemDataOffset do
        begin
            Edit;

            FieldByName('dCSubNCode').AsCurrency := 0;
            FieldByName('dCBmnNCode').AsCurrency := 0;
            for i := 1 to 10 do
                FieldByName('dCSegNCode' + IntToStr(i)).AsCurrency := 0;
            FieldByName('dCBankNCode').AsCurrency := 0;
            FieldByName('dCCsNCode').AsCurrency := 0;
            FieldByName('dCEmpNCode').AsCurrency := 0;
            for i := 1 to 5 do
                FieldByName('dCMulNCode' + IntToStr(i)).AsCurrency := 0;
            for i := 1 to 10 do
                FieldByName('dCPrjNCode' + IntToStr(i)).AsCurrency := 0;
            for i := 1 to 10 do
                FieldByName('dCPjSubNCode' + IntToStr(i)).AsCurrency := 0;

            Post;
        end;
    end;
// <194> ADD-END

	Result	:= TRUE;															// ﾁｪｯｸOK
end;

//**********************************************************************
//*		Proccess	: 銀行内部ｺｰﾄﾞ取得
//*		Parameter	:
//*		Return		:
//**********************************************************************
function	TJNTCRP004006f.fnGetBankNCode  (pCode: Integer): Extended;
var
	dqMasterData: TMQuery;
begin
    Result	:= -1;

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   ('SELECT NCode FROM HAPBF WHERE  BankCode = :nGCode');
		ParamByName ('nGCode').AsInteger	:= pCode;
		if not Open then
        begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
            ShowMessage('Not Open!');
			Exit;
        end;

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
			Exit;
		end;

        Result := FieldByName ('NCode').AsFloat;

	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

end;

//**********************************************************************
//*		Proccess	: 支店内部ｺｰﾄﾞ取得
//*		Parameter	:
//*		Return		:
//**********************************************************************
function	TJNTCRP004006f.fnGetBranchNCode  (pBankCD: Extended;pBrCD: Integer): Extended;
var
	dqMasterData: TMQuery;
begin
    Result	:= -1;

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   ('SELECT NCode FROM HAPBS ');
        SQL.Add   ('WHERE  BankNCode = :BankCD and BranchCode = :BrCD   ');
		ParamByName ('BankCD').AsFloat	:= pBankCD;
		ParamByName ('BrCD')  .AsInteger:= pBrCD;

		if not Open then
        begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
            ShowMessage('Not Open!');
			Exit;
        end;

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
			Exit;
		end;

        Result := FieldByName ('NCode').AsFloat;
	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

end;

//**********************************************************************
//*		Proccess	: 依頼口座内部ｺｰﾄﾞ取得
//*		Parameter	:
//*		Return		:
//**********************************************************************
function	TJNTCRP004006f.fnGetIraiNCode (pIraiCD: Integer): Extended;
var
	dqMasterData: TMQuery;
begin

	Result	:= -1;

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

{
		SQL.Clear ();
		SQL.Add   ('SELECT ai.NCode,ai.AccKbn, ai.AccNo, hm.SimpleName, bi.AllBkCode, bi.AllBraCode, ');
		SQL.Add   ('       bi.BankName, bi.BkBraName, bi.BankKanaName, bi.BraKanaName ');
		SQL.Add   ('FROM   AccInfo ai, HojyoMA hm ');
		SQL.Add   ('LEFT OUTER JOIN BankInfo bi ON bi.MasterKbn = hm.MasterKbn AND bi.NCode = hm.BankNCode ');
		SQL.Add   ('WHERE  hm.MasterKbn = :nMasterDivision AND hm.RDelKbn = 0 AND ');
		SQL.Add   ('       hm.BankNCode = Bi.NCode AND ai.RDelKbn = 0 AND ai.GCode = :nAccountCode');
}

		SQL.Add   ('SELECT AI.NCode,AI.AccKbn, AI.AccNo, HM.SimpleName, BI.AllBkCode, BI.AllBraCode, ');
		SQL.Add   ('       BI.BankName, BI.BkBraName, BI.BankKanaName, BI.BraKanaName ');
		SQL.Add   ('FROM BankInfo BI ');
		SQL.Add   ('Inner Join AccInfo Ai On ');
		SQL.Add   ('AI.BankNCode = BI.NCode  ');
        SQL.Add   ('Left outer join HojyoMA HM On ');
		SQL.Add   ('HM.BankNCode = BI.NCode and HM.RDelKbn = 0 ');
		SQL.Add   ('and HM.MasterKbn = BI.MasterKbn '); // <163> Add
        SQL.Add   ('Where BI.MasterKbn = :nMasterDivision And BI.RDelKbn = 0 ');
        SQL.Add   ('and AI.GCode = :nAccountCode ');

		ParamByName ('nMasterDivision').AsInteger	:= MASTER_BANK;
		ParamByName ('nAccountCode'   ).AsInteger	:= pIraiCD;

        if Not Open then
        begin
			dqMasterData.Close ();
			dqMasterData.Free  ();
            ShowMessage('Not Open!');
			Exit;
        end;

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Exit;
		end;
        Result := GetFld('NCode').AsFloat;
	end;


	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

//-----------------------------------------------------------------------------
//
//     ﾌﾟﾛｼﾞｪｸﾄ・工種・セグメントMasterKbn取得
//
//-----------------------------------------------------------------------------
procedure TJNTCRP004006f.fnGetMasterKbnFX();
var
    Qe          : TMQuery;
    lvKousyuKbn : Integer;
    lvKMasteKbn : Integer;
//    lvSMasteKbn : Integer;
//    lvString    : String;
//    lvCount     : Integer;

//    lvMstKbn    : Integer;
//    i           : Integer;

begin

    lvKMasteKbn := 0;
//    lvKousyuKbn := 0;
//    lvSMasteKbn := 0;

	Qe	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

    //////////////////////////////////////////////////
    //  工事・工種
    //////////////////////////////////////////////////
   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
        SQL.add(' Select MasterKbn From MasterInfo '+
               ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
               ' and (KojUseKBN <> 0 )' +
               ' Order by MasterKbn ');

        ParamByName('pSMKBN').asFloat := ucSKO_MKBN;
        ParamByName('pEMKBN').asFloat := ucEKO_MKBN;
        Open;

        if not Eof then
            lvKMasteKbn := Qe.GetFLD('MasterKbn').AsInteger;                    // 工事採用有り

(* <114>
        if not Eof then
        begin
        // 工事採用有り
            lvKMasteKbn := Qe.GetFLD('MasterKbn').AsInteger;

        end
        else
        begin
        // 工事採用無し

        // 工事採用がなければプロジェクト採用ありのもののうち //
        // 先頭のものを工事へセット                           //
    	    Close ();
   	    	SQL.Clear ();
            SQL.add(' Select Min(MasterKbn) As PrjMstKbn From MasterInfo '+
                   ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                   ' and (UseKBN <> 0)' );


            ParamByName('pSMKBN').asFloat := ucSKO_MKBN;
            ParamByName('pEMKBN').asFloat := ucEKO_MKBN;
            Open;

            if not Eof then
                lvKMasteKbn     := Qe.GetFLD('PrjMstKbn').AsInteger
            else
                lvkMasteKbn    := ucSKO_MKBN;    //既存ﾙｰﾁﾝで採用無しになる
        end;
*)

    end;

    //工種MasterKbn取得
    lvKousyuKbn :=
        (lvKMasteKbn
            - (StrToInt(Copy(IntToStr(ucSKO_MKBN),1,1)) * 100)
            + (StrToInt(Copy(IntToStr(lvKMasteKbn + 100),1,1)) * 100));

{
    //////////////////////////////////////////////////
    //  ｾｸﾞﾒﾝﾄ
    //////////////////////////////////////////////////
   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
        SQL.add(' Select MasterKbn From MasterInfo '+
               ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
               ' and (UseKBN = 1)');

        ParamByName('pSMKBN').asFloat := ucSSG_MKBN;
        ParamByName('pEMKBN').asFloat := ucESG_MKBN;
        Open;

        if not Eof then
            lvSMasteKbn     := Qe.GetFLD('MasterKbn').AsInteger
        else
            lvSMasteKbn     := ucSKO_MKBN;      //既存ﾙｰﾁﾝで採用無しになる

    end;
}

    //////////////////////////////////////////////////
    //  第一補助・第二補助取得
    //////////////////////////////////////////////////
   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
        SQL.add(' Select MasterKbn From MasterInfo '+
               ' Where (MasterKBN Between 21 and 35)'+
               ' and (UseKBN = 1)'                  +
               ' Order by MasterKbn');
        Open;

        //　--参照順序--
        //  取引先      22      :MASTER_CUSTOMER
        //  社員        25      :MASTER_STAFF
        //  銀行        21      :MASTER_BANK
        //  汎用補助    31-35   :MASTER_GENERAL01   -   MASTER_GENERAL05


        // <107>
//        lvCount      := 0;
        m_sUseString := '';

        while not Eof do
        begin
            //採用MASTERKBN取得
            m_sUseString := m_sUseString + IntToStr(GetFld('MasterKbn').AsInteger) + '|';
            next;
        end;


{ <107>
        lvCount     := 0;
        lvString    := '';

        while not Eof do
        begin
            //採用MASTERKBN取得
            lvString := lvString + IntToStr(GetFld('MasterKbn').AsInteger) + '|';
            next;
        end;

        //取引先ﾁｪｯｸ
        lvMstKbn := MASTER_CUSTOMER;
        if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
        begin
            lvCount := lvCount + 1;
            case lvCount of
                1:MASTER_HOJYO1 := lvMstKbn;
                2:MASTER_HOJYO2 := lvMstKbn;
            end;
        end;

        //社員ﾁｪｯｸ
        lvMstKbn := MASTER_STAFF;
        if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
        begin
            lvCount := lvCount + 1;
            case lvCount of
                1:MASTER_HOJYO1 := lvMstKbn;
                2:MASTER_HOJYO2 := lvMstKbn;
            end;
        end;

        //銀行ﾁｪｯｸ
        lvMstKbn := MASTER_BANK;
        if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
        begin
            lvCount := lvCount + 1;
            case lvCount of
                1:MASTER_HOJYO1 := lvMstKbn;
                2:MASTER_HOJYO2 := lvMstKbn;
            end;
        end;

        //汎用補助①～⑤
        for i := MASTER_GENERAL01 to MASTER_GENERAL05 do
        begin
            lvMstKbn := i;
            if (AnsiPos(IntToStr(lvMstKbn) + '|',lvString)<>0) and (lvCount <=2) then
            begin
                lvCount := lvCount + 1;
                case lvCount of
                    1:MASTER_HOJYO1 := lvMstKbn;
                    2:MASTER_HOJYO2 := lvMstKbn;
                end;
            end;
        end;
}
    end;

    Qe.Close;
    Qe.Free;

//MASTER_SEGMENT  		:=	lvSMasteKbn;		//	ｾｸﾞﾒﾝﾄ(可変)
    MASTER_CONSTRUCT		:=	lvKMasteKbn;		//	工事(可変)
    MASTER_CONSTKIND		:=	lvKousyuKbn;		//	工種(可変)

end;
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnCheckValidKmsCodeEx (nKmkCode: Integer; nKmsCode: String;
// <175> Mod
//                                                var strDescription : String): Boolean;
												var strDescription : String;
												nKmkNCode:Extended;  var nKmsNCode:Extended): Boolean;
// <175> Mod
var
	dqMasterData: TMQuery;
//    exNkmkCd    : Extended;
begin

	strDescription	:= '';

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();
    	SQL.Clear ();
// <175> Mod
//		SQL.Add   ('SELECT GCode,SimpleName FROM KmkMA ');
//		SQL.Add   ('WHERE  MasterKbn = 2 And SumKbn = 0 AND RDelKbn = 0 AND GCode = :nKmkCode AND SubCode = :nKmsCode');
//
//		ParamByName ('nKmkCode').AsInteger	:= nKmkCode;
//		ParamByName ('nKmsCode').AsString	:= nKmsCode;
		SQL.Add   ('SELECT GCode, CNCode, SimpleName FROM KmkMA ');
		if	(nKmkNCode <> 0) and (nKmsNCode <> 0) then
		begin
			SQL.Add   ('WHERE  MasterKbn = 2 And SumKbn = 0 AND RDelKbn = 0 AND NCode = :nKmkNCode AND CNCode = :nKmsNCode');
			ParamByName ('nKmkNCode').AsFloat	:= nKmkNCode;
			ParamByName ('nKmsNCode').AsFloat	:= nKmsNCode;
		end
        else
		begin
			SQL.Add   ('WHERE  MasterKbn = 2 And SumKbn = 0 AND RDelKbn = 0 AND GCode = :nKmkCode AND SubCode = :nKmsCode');
			ParamByName ('nKmkCode').AsInteger	:= nKmkCode;
			ParamByName ('nKmsCode').AsString	:= nKmsCode;
		end;
// <175> Mod

		Open ();

		if	(EOF) then
		begin
			dqMasterData.Close ();
			dqMasterData.Free  ();

			Result	:= FALSE;
			Exit;
		end;
		strDescription	:= FieldByName ('SimpleName').AsString;
// <175> Add
		if	nKmsNCode = 0 then
			nKmsNCode := FieldByName ('CNCode').AsFloat;
// <175> Add
	end;

	dqMasterData.Close  ();
	dqMasterData.Free	();

	Result	:= TRUE;															// ﾁｪｯｸOK
end;

////////////////////////////////////////////////////////////////////////////////
//	fnGetKmkSubNCode
////////////////////////////////////////////////////////////////////////////////
function TJNTCRP004006f.fnGetKmkSubNCode(iGCode:Integer; sSubCode:String):Extended;
var
    Qe      : TMQuery;
begin

    Result := 0;

	Qe	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, Qe);

   	with  Qe do
    begin
	    Close ();
   		SQL.Clear ();
    	SQL.Add('SELECT cNCode from KmkMA    ');
        SQL.Add(' Where GCode   = :pGCode   ');
        SQL.Add(' and   SubCode = :pSubCode ');
        SQL.Add(' and   SumKbn  = 0         ');
        SQL.Add(' and   RDelKbn = 0         ');

        ParamByName('pGCode'    ).AsInteger  := iGCode;
        ParamByName('pSubCode'  ).AsString   := sSubCode;

        Open;

        if not Eof then
            Result := FieldByName('cNCode').AsFloat

  	end;

    Qe.Close;
    Qe.Free;

end;

////////////////////////////////////////////////////////////////////////////////
//	fnGetHojNCode
////////////////////////////////////////////////////////////////////////////////
function TJNTCRP004006f.fnGetHojNCode(iMstKbn:Integer;sGCode:String):Extended;
var
    Qe      : TMQuery;
    StrTbl  : String;

begin

    Result := 0;

	// ﾏｽﾀ区分が｢23:得意先｣、｢24:仕入先｣の時
	if ((iMstKbn = MASTER_CUSTOMERPLUS01) or
	    (iMstKbn = MASTER_CUSTOMERPLUS02)) then
		iMstKbn	:= MASTER_CUSTOMER;			                // 取引先ｾｯﾄ

    case iMstKbn of
        MASTER_CUSTOMER:
            StrTbl := 'MTokui';
        MASTER_STAFF:                                       // <109>
            StrTbl := 'HAPSC join MOS_OFFICE_STAFF on (HAPSC.NCode = MOS_OFFICE_STAFF.NCode)';
        else
            StrTbl := 'HojyoMA';
    end;

    // Queryの構築
	Qe := TMQuery.Create(self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, Qe);

   	with Qe do
    begin
	    Close ();
   		SQL.Clear ();
        if iMstKbn = MASTER_STAFF then
        	SQL.Add('select HAPSC.NCode as NCode from ' + StrTbl)
        else
        	SQL.Add('select NCode from ' + StrTbl );
        SQL.Add(' where GCode = :pGCode      ');
//<115>        SQL.Add(' and RDelKbn = 0 and SumKbn = 0');
        SQL.Add(' and RDelKbn = 0 ');   //<115>


        // 取引先の場合はTemplateKbnを考慮する <102>
        if iMstKbn = MASTER_CUSTOMER then
            SQL.Add(' and TemplateKbn = 0 ');

        if (iMstKbn <> MASTER_CUSTOMER) and
           (iMstKbn <> MASTER_STAFF)    then
        begin
            SQL.Add(' and MasterKbn = :pMstKbn ');
            ParamByName('pMstKbn').AsInteger := iMstKbn;
        end;

        ParamByName('pGCode' ).AsString := sGCode;

        Open;

        if not Eof then
            Result := FieldByName('NCode').AsFloat;

  	end;

    Qe.Close;
    Qe.Free;

end;

////////////////////////////////////////////////////////////////////////////////
//	起動時にGlidを立ち上げない。
////////////////////////////////////////////////////////////////////////////////
Procedure TJNTCRP004006f.fnFirstDetailDsp();
begin
    //FormClear Start
	CmnEdit00002Association .Text	:= '';
	CmnEdit00003Name        .Text	:= '';
	CmnEdit00004NameSimple  .Text	:= '';
	CmnEdit00005AppDateStart.Value	:= 0;
	CmnEdit00006AppDateEnd  .Value	:= 0;
	CmnEdit00005AppDateStart.Clear ();
	CmnEdit00006AppDateEnd  .Clear ();
	fnInitializeScreenDetailInfo00 ();      // <149> 2006/10/11 H.Kawato Add    // 基本情報
	fnInitializeScreenDetailInfo01 ();
	fnInitializeScreenDetailInfo02 ();
	fnInitializeScreenDetailInfo03 ();
// <211> MOD-STR
//	fnInitializeScreenDetailInfo04 (0);
//	fnInitializeScreenDetailInfo04 (1);
	fnInitializeScreenDetailInfo04 ();
// <211> MOD-END
	fnInitializeScreenDetailInfo06 ();
	fnInitializeScreenDetailInfo07 ();
	fnInitializeScreenDetailInfo08 ();      // <211> ADD
    //FormClear End

   	fnSelectTreeViewItem ('');
    CmnPanelClientStandard.Visible	:= FALSE;
	CmnPanelClientDetail  .Visible	:= TRUE;
	m_fUnderConstruction	:= TRUE;
// <211> MOD-STR
//	CmnTabInformations.Items.Selected	:= 0;
	CmnTabInformations.Items.Selected	:= TI_PAYWAY;
// <211> MOD-END
	m_fUnderConstruction	:= FALSE;
	fnResetChangeFlagCheckItems	();

    // ﾒｰﾙ会計参照ﾌﾗｸﾞ: 参照時
	if	(m_nReferMode = REFER) then
		fnChangeConditionAllControlsDetail (FALSE);
end;

// =============================================================================
// 適用期間の開始・終了の判定処理(デフォルト値の場合はブランクとする)
// =============================================================================
procedure TJNTCRP004006f.fnCheckTekiDate(nDmqDataQry: TMQuery);
var
    sDate   :   Integer;
begin

//    sDate   :=  0;
    //	適用開始年月日
    sDate   :=  StrToInt(FormatDateTime('yyyymmdd',nDmqDataQry.GetFLD('TStartDate'	).AsDateTime));
    if ( sDate = DEFDATE_START ) then
        CmnEdit00005AppDateStart.AsDateTime   :=  0
    else
        CmnEdit00005AppDateStart.AsDateTime	:=	nDmqDataQry.GetFLD('TStartDate'	).AsDateTime;

    //	適用終了年月日
    sDate   :=  StrToInt(FormatDateTime('yyyymmdd',nDmqDataQry.GetFLD('TEndDate'	).AsDateTime));
    if ( sDate = DEFDATE_END ) then
        CmnEdit00006AppDateEnd.AsDateTime		:=  0
    else
    	CmnEdit00006AppDateEnd.AsDateTime		:=	nDmqDataQry.GetFLD('TEndDate'	).AsDateTime;

end;
//-----------------------------------------------------------------------------
// fnSetFncType
//-----------------------------------------------------------------------------
procedure TJNTCRP004006f.fnSetFncType(nFunc : Integer ; fEnabled : Boolean);
var

	stMessageRec: TMJSMsgRec;
begin
    case nFunc of

        1:
        begin
            if fEnabled = True then
            begin
// <165> 2007/07/24 H.Kawato Mod Start
{
// <153> 2006/12/19 H.Kawato Mod
//                uvFncInfo.Caption[0] := 'F1 相殺情報削除';
                if m_cACControl.Name = CmnEdit01001DecDivision.Name then
                    uvFncInfo.Caption[0] := 'F1 標準情報ｺﾋﾟｰ'
                else
                    uvFncInfo.Caption[0] := 'F1 相殺情報削除';
// <153> 2006/12/19 H.Kawato Mod
}
               if m_cACControl.Name = CmnEdit01001DecDivision.Name then
                begin
                    uvFncInfo.Caption[0] := 'F1 標準情報ｺﾋﾟｰ';

                    if (m_nReferMode = REFER) then      // 追加・修正権限がない時
                        uvFncInfo.Enabled[0] := False
                    else
                        uvFncInfo.Enabled[0] := True;
                end
// <204> Add start
				else if (m_cACControl.Name = CmnEdit03001AccountCode.Name) then
                begin
                    uvFncInfo.Caption[0] := 'F1 振込情報ｺﾋﾟｰ';

                    if (m_nReferMode = REFER) then      // 追加・修正権限がない時
                        uvFncInfo.Enabled[0] := False
                    else
                        uvFncInfo.Enabled[0] := True;
                end
// <204> Add end
// <222> ADD start
											// 可変項目情報グリッド
				else if (m_cACControl.Name = DBGridVar.Name) then
                begin
                    uvFncInfo.Caption[0] := 'F1 項目情報削除';

                    if (m_nReferMode = REFER) or
                    	(egoRowSelect in DBGridVar.Options) then	// 追加・修正権限がない時
                        uvFncInfo.Enabled[0] := False
                    else
                        uvFncInfo.Enabled[0] := True;
                end
// <222> ADD end
                else
                begin
                    uvFncInfo.Caption[0] := 'F1 相殺情報削除';
                    uvFncInfo.Enabled[0] := m_IsDelete; // 削除権限(True:権限あり, False:権限なし)
                end;
// <165> 2007/07/24 H.Kawato Mod End
                uvFncInfo.Action[0]  := FreeF1;
            end
            else
            begin
                uvFncInfo.Caption[0] := '';
                uvFncInfo.Action[0]  := nil;
                uvFncInfo.Enabled[0] := False;          // <165> Add
            end;
        end;
// <149> 2006/10/11 H.Kawato Add Start

        6:
        begin
            if fEnabled = True then
            begin
// <165> 2007/07/24 H.Kawato Mod Start
{
// <161> 2007/07/06 H.Kawato Mod
//                uvFncInfo.Caption[5] := 'F6 詳細情報変更';
                if m_cACControl.Name = CmnEdit01001DecDivision.Name then
                    uvFncInfo.Caption[5] := 'F6 情報削除'
                else
                    uvFncInfo.Caption[5] := 'F6 詳細情報変更';
// <161> 2007/07/06 H.Kawato Mod
}
                if m_cACControl.Name = CmnEdit01001DecDivision.Name then
                begin
                    uvFncInfo.Caption[5] := 'F6 情報削除';
// <207> Mod start
//                    uvFncInfo.Enabled[5] := m_IsDelete; // 削除権限(True:権限あり, False:権限なし)
                    uvFncInfo.Enabled[5] := m_IsDelete and m_bExistProjRecord; // 削除権限(True:権限あり, False:権限なし)
// <207> Mod end
                end

// <198> 2010/07/27 G.Kojima Add

                else if (m_cACControl.Name = CmnEdit02002BankCode.Name) or
                       (m_cACControl.Name = CmnEdit02003BranchCode.Name) or
                       (m_cACControl.Name = CmnEdit03002BankCode.Name) or
                       (m_cACControl.Name = CmnEdit03003BranchCode.Name) then
                begin
                    uvFncInfo.Caption[5] := 'F6 銀行情報登録';
                    uvFncInfo.Enabled[5] := m_IsUpdate; // 更新権限(True:権限あり, False:権限なし)
				end
// <198> End

                else
// <189> Mod ↓↓↓
//                  uvFncInfo.Caption[5] := 'F6 詳細情報変更';
				begin
                    uvFncInfo.Caption[5] := 'F6 詳細情報変更';
					if CmnEdit01030PriPayWayDivision.AsInteger = 0 then
						uvFncInfo.Enabled[5] := False
					else
	                    uvFncInfo.Enabled[5] := m_IsUpdate; // 更新権限(True:権限あり, False:権限なし)
				end;
// <189> Mod ↑↑↑
// <165> 2007/07/24 H.Kawato Mod End
                uvFncInfo.Action[5]  := FreeF6;
            end
            else
            begin
                uvFncInfo.Caption[5] := '';
                uvFncInfo.Action[5]  := nil;
                uvFncInfo.Enabled[5] := False;          // <165> Add
            end;
        end;
// <149> 2006/10/11 H.Kawato Add End

        8:
        begin
            if fEnabled = True then
            begin
    		    m_cComArea.m_MsgStd.GetMsg (stMessageRec, 30, 19);

// <194> MOD-STR
//              uvFncInfo.Caption[7] := stMessageRec.sMsg;
                uvFncInfo.Caption[7] := 'F8 付加情報';
// <194> MOD-END
                uvFncInfo.Action[7]  := FreeF8;
                uvFncInfo.Enabled[7] := True;           // <165> Add
            end
            else
            begin
                uvFncInfo.Caption[7] := '';
                uvFncInfo.Action[7]  := nil;
                uvFncInfo.Enabled[7] := False;          // <165> Add
            end;
        end;

    end;

    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
    MSPFunctionBar.SetFuncEnabledA(uvFncInfo.Enabled);  // <165> Add
end;
//-----------------------------------------------------------------------------
// fnFrrDlg
//-----------------------------------------------------------------------------
procedure TJNTCRP004006f.fnFreeDlg(nFunc: Integer);
//var
//    strDescription : String;				// <222-3> DEL

begin
    try
        Case nFunc of
            0:
            // 相殺情報削除
            begin
// <153> 2006/12/19 H.Kawato Mod
//				fnDeleteOffsetRecord();
                if m_cACControl.Name = CmnEdit01001DecDivision.Name then
                    fnCopyStandardInfomation()
// <204> Add start
				else if (m_cACControl.Name = CmnEdit03001AccountCode.Name) then
                begin
                	fnCopyFuriInfo();
                end
// <204> Add end
// <222> ADD start
				// 可変項目情報
				else if (m_cACControl.Name = DBGridVar.Name) then
                begin
                	fnDeleteMemVar();		// F1: 項目情報削除
                end
// <222> ADD end
                else
                    fnDeleteOffsetRecord();
            end;

// <149> 2006/10/11 H.Kawato Add Start
            5:
            // 詳細情報設定ダイアログを起動
            begin
// <161> 2007/07/06 H.Kawato Mod Start
//                fnLaunchDlgSyousai();
                if m_cACControl.Name = CmnEdit01001DecDivision.Name then
                    fnDelPrjInfo()
// <198> 2010/07/27 G.Kojima Add
                else if (m_cACControl.Name = CmnEdit02002BankCode.Name) or
                        (m_cACControl.Name = CmnEdit02003BranchCode.Name) or
                        (m_cACControl.Name = CmnEdit03002BankCode.Name) or
                        (m_cACControl.Name = CmnEdit03003BranchCode.Name) then
                    BankInfoDlg()
// <198> End
                else
                    fnLaunchDlgSyousai();
// <161> 2007/07/06 H.Kawato Mod End
            end;
// <149> 2006/10/11 H.Kawato Add End

            7:
// <194> MOD-STR
{            // 正式名称ｺﾋﾟｰ
            begin
				strDescription := MJSKabuCut(CmnEdit00003Name.Text, 14);

				if (strDescription <> '') then
					CmnEdit00004NameSimple.Text	:= strDescription;}
            begin
                // 付加情報ダイアログ表示
                fnLaunchSwkAddDlg();
// <194> MOD-END
            end;

        end;

    except
    end;
end;

procedure TJNTCRP004006f.FreeF1Execute(Sender: TObject);
begin
    fnFreeDlg(0);
end;

// <149> 2006/10/11 H.Kawato Add Start
procedure TJNTCRP004006f.FreeF6Execute(Sender: TObject);
begin
    fnFreeDlg(5);
end;
// <149> 2006/10/11 H.Kawato Add End

procedure TJNTCRP004006f.FreeF8Execute(Sender: TObject);
begin
    fnFreeDlg(7);
end;

procedure TJNTCRP004006f.MSPFunctionBarFunctionClick(Sender: TObject;
  FuncNo: Integer);
begin
    if MSPFunctionBar.GetFuncCaption(FuncNo) <> '' then
        uvFncInfo.Action[FuncNo-1].Execute;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: ArrowClick(Sender: TObject); <105>                                                            */
//*																											*/
//***********************************************************************************************************/
procedure TJNTCRP004006f.ArrowClick(Sender: TObject);
var
    lvExpSend       : rcJNTExpSend;
    lvExpRecv       : rcJNTExpRecv;
    iExpRtn         : Integer;
    CompName        : String;
//    i               : Integer;
//    iMasterkbn      : Integer;

    lvModulKbn      : Integer;
    lvPatternNo     : Integer;

	nMasterDivision : Integer;
	nPosition	    : Integer;
//	strTableName    : String;
	strWherePhase   : String;
    nKmkNCode       : Extended;
    nSumKbn         : Integer;                              // <108>

    cTxtEdit        : TMTxtEdit;
    cNumEdit        : TMNumEdit;
    cTxtEditDsp     : TMTxtEdit;
    nCode           : Extended;
    strDescription  : String;

    iPartKbn        : Integer;                              // <149> 2006/10/11 H.Kawato Add
    nKojiNCode      : Extended;                             // <149> 2006/10/11 H.Kawato Add
    nKosyuNCode     : Extended;                             // <149> 2006/10/11 H.Kawato Add

begin
    cTxtEdit    := Nil;                                     // <149> Add
    cNumEdit    := Nil;                                     // <149> Add
    cTxtEditDsp := Nil;                                     // <149> Add

//    lvModulKbn  := 0;
//    lvPatternNo := 0;
    nKmkNCode   := -1;
    nSumKbn     := 0;

    CompName    :=  TComponent(Sender).name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec :=  m_pRec;                        // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     :=  @m_cDBSelect;                  // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     :=  m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     :=  m_cComArea.SystemArea.SysColorD;

    // *********** 取引先ｺｰﾄﾞ(仕入採用限定) ***********
    if (Copy(CompName,1,19) = 'CmnEdit00001HojCode') then
    begin
        cNumEdit := CmnEdit00001HojCodeNumeric;
        cTxtEdit := CmnEdit00001HojCodeFree;

// <160> 2007/06/08 H.Kawato Mod
//        lvExpSend.MasterKbn     := MASTER_CUSTOMERPLUS02;   // ﾏｽﾀ区分
        lvExpSend.MasterKbn     := MASTER_CUSTOMER;         // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
// <160> 2007/06/08 H.Kawato Mod
//        strWherePhase           := ' MTOKUI.RDelKbn = 0 and MTOKUI.TemplateKbn = 0';   // <102>;
        strWherePhase           := ' MTOKUI.RDelKbn = 0 and MTOKUI.Hojyokbn2 = 1 and MTOKUI.TemplateKbn = 0';   // <102>;
        lvExpSend.WhereStr := strWherePhase;
    end;

// <149> 2006/10/11 H.Kawato Add Start
    // *********** ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ(ﾌﾟﾛｼﾞｪｸﾄ別支払採用) ***********
    if (Copy(CompName,1,20) = 'CmnEdit00014KojiCode') then
    begin
        cNumEdit := CmnEdit00014KojiCodeNumeric;
        cTxtEdit := CmnEdit00014KojiCodeFree;

        lvExpSend.MasterKbn     := m_iProjectKbn;           // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        strWherePhase           := ' HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0';
        lvExpSend.WhereStr := strWherePhase;
    end;

    // *********** ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ(ﾌﾟﾛｼﾞｪｸﾄ別支払採用) ***********
    if (Copy(CompName,1,21) = 'CmnEdit00016KosyuCode') then 
    begin
        cNumEdit := CmnEdit00016KosyuCodeNumeric;
        cTxtEdit := CmnEdit00016KosyuCodeFree;

        iPartKbn    := 0;
        nKojiNCode  := 0;
        nKosyuNCode := 0;

        if (CmnEdit00014KojiCodeNumeric.Text <> '') or (CmnEdit00014KojiCodeFree.Text <> '') then
            fnGetPrjNCode (nKojiNCode, nKosyuNCode);            // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得

        fnKojiInfoCheck(nKojiNCode, m_iProjectKbn, iPartKbn);   // 工種管理区分チェック

        lvExpSend.MasterKbn     := m_iSubProjKbn;           // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        strWherePhase           := ' HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0';

        if (iPartKbn = 2) then
        begin
            strWherePhase  := strWherePhase + ' AND HojyoMA.NCode in ('
                    + ' SELECT KsyNCode FROM KousyuPtn'
                    + ' INNER JOIN  KojiInfo'
                    + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode'
                    + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_iProjectKbn)
                    + ' AND KojiInfo.NCode = ' + FloatToStr(nKojiNCode)
                    + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_iSubProjKbn) + ' )';
        end;

        lvExpSend.WhereStr := strWherePhase;
    end;
// <149> 2006/10/11 H.Kawato Add End

    // *********** 依頼口座ｺｰﾄﾞ ***********
    if (Copy(CompName,13,11) = 'AccountCode') then
    begin
        cNumEdit := TMNumEdit (MJSFindCtrl (Self, CompName));

        lvExpSend.MasterKbn     := 9120;                    // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        strWherePhase           := 'BankInfo.RDelKbn = 0 and AccInfo.RDelKbn = 0';
        lvExpSend.WhereStr := strWherePhase;
    end;

    // *********** 相殺：科目ｺｰﾄﾞ ***********
    if (CompName = 'CmnEdit05002KmkCode') then
    begin
        lvExpSend.MasterKbn     := MASTER_SUBJECT;          // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        lvExpSend.TBarNM        := '検索ｴｸｽﾌﾟﾛｰﾗ';
        lvExpSend.TableName     := 'KmkMA';
        lvExpSend.TrRootCaption := '科目';

        strWherePhase := 'Masterkbn = ' + IntToStr(MASTER_SUBJECT) + ' And RDelKbn = 0' +
	             ' AND SumKbn = 0 AND RDelKbn = 0 AND AnalyzeCode <> 0 '        +
//	             ' AND RDelKbn = 0 AND AnalyzeCode <> 0 '        +
       		     ' AND SubCode = 0 AND GCode <> ' + IntToStr (m_nKmkCompound01)     +
                 ' AND GCode <> ' + IntToStr (m_nKmkCompound02) +
                                               ' and InputKbn <> 9 ';
        lvExpSend.WhereStr := strWherePhase;
    end;

    // ********************** 相殺：汎用ｺｰﾄﾞ1～3 ST  **********************
    if (CompName = 'CmnEdit05003HojCodeFree')
            or (CompName = 'CmnEdit05004HojCodeFree')
            or (CompName = 'CmnEdit05005HojCodeFree')
            or (CompName = 'CmnEdit05003HojCodeNumeric')
            or (CompName = 'CmnEdit05004HojCodeNumeric')
            or (CompName = 'CmnEdit05005HojCodeNumeric') then

    begin

        cNumEdit := TMNumEdit (MJSFindCtrl (Self, Copy(CompName,1,19) + 'Numeric'));
        cTxtEdit := TMTxtEdit (MJSFindCtrl (Self, Copy(CompName,1,19) + 'Free'));

        cTxtEditDsp := TMTxtEdit (MJSFindCtrl (Self, Copy(CompName,1,19) + 'Desc'));

    	nPosition	:= StrToInt (Copy (TComponent(Sender).name, 10, 3)) - 3;

    	if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_SUBJECTPLUS) then
	    begin
        	fnCheckValidKmkCodeG (CmnEdit05002KmkCode.AsInteger, nCode, strDescription);
   			nMasterDivision	:= MASTER_SUBJECTPLUS;
       		strWherePhase	:= 'KmkMA.MasterKbn = 2 AND KmkMA.RDelKbn = 0';
            lvModulKbn      := 0;
            lvPatternNo     := 1;
            nKmkNCode       := nCode;
	    end
    	else
	    begin
            // 取引先関連
		    if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMER) or
                 (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01) or
			     (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02)) then

            begin
       			nMasterDivision	:= MASTER_CUSTOMER;
    	    	strWherePhase	:= 'MTOKUI.RDelKbn = 0 and MTOKUI.TemplateKbn = 0';     // <102>
                lvModulKbn  := 0;
                lvPatternNo := 1;
                nSumKbn     := 0;                                                       // <108>

                // 得意先
                if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS01) then
       			    nMasterDivision	:= MASTER_CUSTOMERPLUS01;

                // 仕入先
        		if	(m_arCodeAttribute [nPosition].nMasterDivision = MASTER_CUSTOMERPLUS02) then
       			    nMasterDivision	:= MASTER_CUSTOMERPLUS02;
            end

            // 社員
            else if (m_arCodeAttribute [nPosition].nMasterDivision = MASTER_STAFF) then
            begin
		    	nMasterDivision	:= m_arCodeAttribute [nPosition].nMasterDivision;
                lvModulKbn  := 0;
                lvPatternNo := 1;
            end
	    	else
            begin
                //　その他HojyoMAより取得できるﾏｽﾀ
		    	nMasterDivision	:= m_arCodeAttribute [nPosition].nMasterDivision;
	        	strWherePhase	:= 'HojyoMA.RDelKbn = 0 and HojyoMA.MasterKbn = ' + IntToStr(nMasterDivision);
                lvModulKbn  := 0;
                lvPatternNo := 1;
                nSumKbn     := 0;

            end;


            // Where句補足追加
    		if	((m_arCodeAttribute [nPosition].nMasterDivision = MASTER_SECTION  ) or
    			 ((m_arCodeAttribute [nPosition].nMasterDivision >= 101) and
                  (m_arCodeAttribute [nPosition].nMasterDivision <= 110))) then

		    begin
    			case (m_arCodeAttribute [nPosition].nClassCode) of
	    			0:	strWherePhase	:= strWherePhase + ' AND HojyoMA.HojyoKbn2 <> 2';
		    		2:	strWherePhase	:= strWherePhase + ' AND HojyoMA.HojyoKbn2 <> 0';
			    end;
                lvModulKbn  := 0;
                lvPatternNo := 1;
    		end;

// <150> 2006/11/02 H.Kawato Add Start
            if (m_arCodeAttribute [nPosition].nMasterDivision >= 301) and
               (m_arCodeAttribute [nPosition].nMasterDivision <= 310) then
            begin
                if (m_arCodeAttribute [nPosition - 1].nMasterDivision >= 201) and
                   (m_arCodeAttribute [nPosition - 1].nMasterDivision <= 210) and
                   (m_arCodeAttribute [nPosition - 1].nPartKbn = 2) then
                begin
                    strWherePhase  := strWherePhase + ' AND HojyoMA.NCode in ('
                            + ' SELECT KsyNCode FROM KousyuPtn'
                            + ' INNER JOIN  KojiInfo'
                            + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode'
//                            + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_iProjectKbn)
                            + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_arCodeAttribute [nPosition - 1].nMasterDivision)        // <150> Mod
                            + ' AND KojiInfo.NCode = ' + FloatToStr(m_arCodeAttribute [nPosition - 1].nPrjNCode)
//                            + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_iSubProjKbn) + ' )';
                            + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_arCodeAttribute [nPosition].nMasterDivision) + ' )'; // <150> Mod
                end;
            end;
// <150> 2006/11/02 H.Kawato Add End
    	end;

        lvExpSend.MasterKbn     := nMasterDivision;         // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := lvModulKbn;              // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := lvPatternNo;             // ﾏｽﾀ区分
        lvExpSend.SumKbn        := nSumKbn;                 // 実在/合計区分
        lvExpSend.KmkNCode      := nKmkNcode;               // 科目内部ｺｰﾄﾞ
        lvExpSend.WhereStr      := strWherePhase;           // Where句
    end;
    // ********************** 相殺：汎用ｺｰﾄﾞ1～3 ED  **********************

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;

    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
        // *********** 取引先ｺｰﾄﾞ ***********
        if (Copy(CompName,1,19) = 'CmnEdit00001HojCode') then
        begin
            if cNumEdit.Visible  then
            begin
                cNumEdit.Value     := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag := False;
            end
            else begin
                cTxtEdit.Text      := lvExpRecv.GCode;
            end;

            CmnEdit00003Name.Text := lvExpRecv.Nm;
        end;

// <149> 2006/10/11 H.Kawato Add Start
        // *********** ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ ***********
        if (Copy(CompName,1,20) = 'CmnEdit00014KojiCode') then
        begin
            if cNumEdit.Visible  then
            begin
                cNumEdit.Value     := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag := False;
            end
            else begin
                cTxtEdit.Text      := lvExpRecv.GCode;
            end;

            CmnLabel00015KojiCodeDesc.Caption := lvExpRecv.Nmk;
        end;

        // *********** ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ ***********
        if (Copy(CompName,1,21) = 'CmnEdit00016KosyuCode') then
        begin
            if cNumEdit.Visible  then
            begin
                cNumEdit.Value     := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag := False;
            end
            else begin
                cTxtEdit.Text      := lvExpRecv.GCode;
            end;

            CmnLabel00017KosyuCodeDesc.Caption := lvExpRecv.Nmk;
        end;
// <149> 2006/10/11 H.Kawato Add End

        // *********** 依頼口座ｺｰﾄﾞ ***********
        if (Copy(CompName,13,11) = 'AccountCode') then
        begin
            cNumEdit.Value  := StrToFloat(lvExpRecv.GCode);
            cNumEdit.InputFlag := False;
        end;

        // *********** 相殺：科目ｺｰﾄﾞ ***********
        if (CompName = 'CmnEdit05002KmkCode') then
        begin
            CmnEdit05002KmkCode.Value  := StrToFloat(lvExpRecv.GCode);
            CmnEdit05002KmkCodeDesc.Text := lvExpRecv.Nmk;
			m_dSousaiNCode[0]	:= lvExpRecv.NCode;	//<175> Add
        end;

        // *********** 相殺：汎用ｺｰﾄﾞ1～3 ***********
        if (CompName = 'CmnEdit05003HojCodeFree')    or
           (CompName = 'CmnEdit05004HojCodeFree')    or
           (CompName = 'CmnEdit05005HojCodeFree')    or
           (CompName = 'CmnEdit05003HojCodeNumeric') or
           (CompName = 'CmnEdit05004HojCodeNumeric') or
           (CompName = 'CmnEdit05005HojCodeNumeric') then
        begin
            if cNumEdit.Visible  then
            begin
                cNumEdit.Value := StrToFloat(lvExpRecv.GCode);
                cNumEdit.InputFlag := False;
            end
            else
                cTxtEdit.Text  := lvExpRecv.GCode;

// <150> 2006/11/02 H.Kawato Mod
//            cTxtEditDsp.Text := lvExpRecv.Nm;
            cTxtEditDsp.Text := lvExpRecv.Nmk;
// <175> Add
			//内部コード
			if	(CompName = 'CmnEdit05003HojCodeFree')    or
				(CompName = 'CmnEdit05003HojCodeNumeric')    then
				m_dSousaiNCode[1]	:= lvExpRecv.NCode
			else if	(CompName = 'CmnEdit05004HojCodeFree')    or
					(CompName = 'CmnEdit05004HojCodeNumeric') then
				m_dSousaiNCode[2]	:= lvExpRecv.NCode
			else if	(CompName = 'CmnEdit05005HojCodeFree') or
					(CompName = 'CmnEdit05005HojCodeNumeric') then
				m_dSousaiNCode[3]	:= lvExpRecv.NCode;
// <175> Add
        end;

        Keybd_Event(VK_RETURN, 0, 0, 0);            //Enter ｷｰのｴﾐｭﾚｲﾄ

		abort;
    end;

end;

// <175> Add
procedure TJNTCRP004006f.fnCmnEdit05000KmkCodeKeyPress(Sender: TObject;
  var Key: Char);
begin
	//内部コード
	if	(Sender = CmnEdit05002KmkCode)    then
	begin
		if	((Key >= '0') and (Key <= '9')) or
			(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[0]	:= 0;
	end
	else if	(Sender = CmnEdit05003HojCodeFree)    then
	begin
		if	(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[1]	:= 0;
	end
	else if	(Sender = CmnEdit05003HojCodeNumeric) then
	begin
		if	((Key >= '0') and (Key <= '9')) or
			(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[1]	:= 0;
	end
	else if	(Sender = CmnEdit05004HojCodeFree)    then
	begin
		if	(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[2]	:= 0;
	end
	else if (Sender = CmnEdit05004HojCodeNumeric) then
	begin
		if	((Key >= '0') and (Key <= '9')) or
			(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[2]	:= 0;
	end
	else if	(Sender = CmnEdit05005HojCodeFree) then
	begin
		if	(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[3]	:= 0;
	end
	else if (Sender = CmnEdit05005HojCodeNumeric) then
	begin
		if	((Key >= '0') and (Key <= '9')) or
			(Key = Chr(VK_DELETE)) or (Key = Chr(VK_BACK)) Then
			m_dSousaiNCode[3]	:= 0;
	end;
end;
// <175> Add


//**********************************************************************
//*		Proccess	:	権限取得
//**********************************************************************
procedure TJNTCRP004006f.fnGetGrants();
begin

//<101>
//    m_cJNTArea.FxPermission;						// 権限取得

// <AUT> MOD-STR
//	B_Print.Enabled := m_cJNTArea.IsPrint;			// 印刷権限
	B_Print.Enabled := m_JNTAuthority.IsPrint; 	    // 印刷権限
// <AUT> MOD-END

// <166> コメント↓↓↓
//	if ( m_cJNTArea.IsKessan(TRUE) = 1 ) then		// 決算確定MSG
//	begin
//		m_nReferMode	 := REFER;					// 決算確定の為参照のみ
//		m_IsUpdate       := False;
//	end
//	else
//	begin
// <166> コメント↑↑↑
// <AUT> MOD-STR
//		if m_cJNTArea.IsAppend and m_cJNTArea.IsModify then
		if m_JNTAuthority.IsAppend and m_JNTAuthority.IsModify then
// <AUT> MOD-END
			m_IsUpdate   := True
		else
			m_IsUpdate   := False;


		if ( m_IsUpdate ) then
			m_nReferMode := NORMAL					// 通常処理
		else
			m_nReferMode := REFER;					// 更新権限無し

// <165> 2007/07/24 H.Kawato Add Start
// <AUT> MOD-STR
//		if m_cJNTArea.IsDelete then                 // 削除権限
		if m_JNTAuthority.IsDelete then             // 削除権限
// <AUT> MOD-END
			m_IsDelete   := True
		else
			m_IsDelete   := False;
// <165> 2007/07/24 H.Kawato Add End
//	end;

end;

procedure TJNTCRP004006f.FormDestroy(Sender: TObject);
begin
// <128> 2006/04/20 H.Kawato Add 進捗連動
	if m_PayProgRendo <> nil then
	begin
		m_PayProgRendo.Free;
		m_PayProgRendo := nil;
	end;
// <128> 2006/04/20 H.Kawato Add

// <TX26> ADD-STR
	// 消費税情報破棄
	if Assigned(m_TaxRateInfo) then
    begin
        m_TaxRateInfo.Free;
        m_TaxRateInfo := Nil;
    end;
// <TX26> ADD-END

// <#TAX10> ADD-STR
	if Assigned(m_TaxRateInfoFront) then
	begin
		m_TaxRateInfoFront.Free;
		m_TaxRateInfoFront := nil;
	end;
// <#TAX10> ADD-END

	m_lstVariable.Free;						// <222> ADD

    // 終了処理<PRN>
	gfnHaniTerm(uvHani);

    // <PRN>
    with PrtParam do
	begin
		Para		:=  uvHani;
		TargetQry   :=  nil;
		CorpSys		:=  uvSelSys;
	end;

    // 開放<PRN>
    PrintAppEntry(nil,nil,3,PrtParam,ArrHdl);
// <146> 2006/08/17 H.Kawato Add Start
	if ( m_RepHandle <> 0 ) then
	begin
// <LPH> MOD-STR
//    	UnloadPackage( m_RepHandle );
    	UnloadPackageHelper( m_RepHandle );
// <LPH> MOD-END
	end;
// <146> 2006/08/17 H.Kawato Add End
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
// <149> 2006/10/11 H.Kawato Mod
//procedure	TJNTCRP004006f.fnSetMemDataPrintPayPtnDtl (pNCode: Extended; nDecDivision: Integer);
procedure	TJNTCRP004006f.fnSetMemDataPrintPayPtnDtl (pNCode, nPayPtnNo: Extended; nDecDivision: Integer);
var
	dqMasterData: TMQuery;
	nRow		: Integer;
    strSQL      : String;       // <149> 2006/10/11 H.Kawato Add

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
{
		SQL.Add   ('SELECT JoukenNo, Houhou, StdRitu, MinKin, HasuuKin, HasuuHou FROM PayPtnDtl ');
		SQL.Add   ('WHERE  MasterKbn = 22 AND PayNCode = :pNCode ORDER BY JoukenNo');

		ParamByName ('pNCode').AsFloat	:= pNCode;
}
        strSQL  := '';
		strSQL  := strSQL + 'SELECT JoukenNo, Houhou, StdRitu, MinKin, HasuuKin, HasuuHou FROM PayPtnDtl ';
		strSQL  := strSQL + 'WHERE  PayPtnNo  = ' + FloatToStr(nPayPtnNo);
		strSQL  := strSQL + '  AND  PayNCode  = ' + FloatToStr(pNCode);
		strSQL  := strSQL + '  AND  MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
		strSQL  := strSQL + '  AND  RDelKbn = 0 ';  // <161> Add
		strSQL  := strSQL + 'ORDER BY JoukenNo ';

        SQL.Add(strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();

		while (not EOF) do
		begin
			if	((FieldByName ('JoukenNo').AsInteger >= 1) and (FieldByName ('JoukenNo').AsInteger <= 5)) then
			begin
				nRow	:= FieldByName ('JoukenNo').AsInteger;					// 行

				CmnMemDataPrintDetail.FieldByName (Format ('nPaymentNo%.2d', [nRow])).AsInteger	:= nRow;

				case (FieldByName ('Houhou').AsInteger) of
					0:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= 'なし';
					1:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= '振込';
					2:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= '期日指定振込';
					3:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= '手形';
					4:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= '小切手';
					5:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= '現金';
					else	CmnMemDataPrintDetail.FieldByName (Format ('strPaymentDesc%.2d', [nRow])).AsString	:= '';
				end;

				if	(FieldByName ('Houhou').AsInteger = 0) then					// 支払方法: 0=なし
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('nPaymentBasedValue%.2d'    , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('nPaymentMinimumPrice%.2d'  , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('nPaymentFractionPrice%.2d' , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).Clear ();

					CmnMemDataPrintDetail.FieldByName (Format ('strPaymentBasedValueUnit%.2d'   , [nRow])).AsString	:= '';
					CmnMemDataPrintDetail.FieldByName (Format ('strPaymentMinimumPriceUnit%.2d' , [nRow])).AsString	:= '';
					CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionPriceUnit%.2d', [nRow])).AsString	:= '';
				end
				else
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('nPaymentBasedValue%.2d', [nRow])).AsCurrency	:= FieldByName ('StdRitu').AsCurrency;

					if	(nDecDivision = 0) then									// 分解方法: 0=比率
					begin
						CmnMemDataPrintDetail.FieldByName (Format ('nPaymentMinimumPrice%.2d' , [nRow])).AsCurrency	:= FieldByName ('MinKin'  ).AsCurrency;
						CmnMemDataPrintDetail.FieldByName (Format ('nPaymentFractionPrice%.2d', [nRow])).AsCurrency	:= FieldByName ('HasuuKin').AsCurrency;

						if	(FieldByName ('HasuuKin').AsCurrency = 0) then
							CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).AsString	:= ''
						else
						begin
							case (FieldByName ('HasuuHou').AsInteger) of
								0:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).AsString	:= '切り捨て';
								1:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).AsString	:= '切り上げ';
								2:		CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).AsString	:= '四捨五入';
								else	CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).AsString	:= '';
							end;
						end;

						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentBasedValueUnit%.2d'   , [nRow])).AsString	:= '％';
						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentMinimumPriceUnit%.2d' , [nRow])).AsString	:= '円';
						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionPriceUnit%.2d', [nRow])).AsString	:= '円';
					end
					else														// 分解方法: 1=定額
					begin
						CmnMemDataPrintDetail.FieldByName (Format ('nPaymentMinimumPrice%.2d'  , [nRow])).Clear ();
						CmnMemDataPrintDetail.FieldByName (Format ('nPaymentFractionPrice%.2d' , [nRow])).Clear ();
						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionDesc%.2d', [nRow])).Clear ();


						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentBasedValueUnit%.2d'   , [nRow])).AsString	:= '円';
						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentMinimumPriceUnit%.2d' , [nRow])).AsString	:= '';
						CmnMemDataPrintDetail.FieldByName (Format ('strPaymentFractionPriceUnit%.2d', [nRow])).AsString	:= '';
					end;
				end;
			end;

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

// <149> 2006/10/11 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataPrintPayDtlSyousai (nNCode, nPayPtnNo: Extended; nPriPayWay, iBunkaiKbn: Integer);
var
	dqMasterData: TMQuery;
	nRow		: Integer;
    strSQL      : String;

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
        strSQL  := '';
		strSQL  := strSQL + 'SELECT Edaban, BaseKingaku, BaseHiritu, HasuuKingaku, HasuuHou, Site FROM PayDetailInfo ';
		strSQL  := strSQL + 'WHERE Edaban BETWEEN 11 AND 15';
        strSQL  := strSQL + '  AND ShiharaiSyubetu = ' + IntToStr(nPriPayWay);
		strSQL  := strSQL + '  AND PayPtnNo  = ' + FloatToStr(nPayPtnNo);
		strSQL  := strSQL + '  AND PayNCode  = ' + FloatToStr(nNCode);
   		strSQL  := strSQL + '  AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
   		strSQL  := strSQL + '  AND RDelKbn = 0 ';   // <161> Add
   		strSQL  := strSQL + 'ORDER BY Edaban ';

        SQL.Add(strSQL);

		Open ();

		while (not EOF) do
		begin
			if	((FieldByName ('Edaban').AsInteger >= 11) and (FieldByName ('Edaban').AsInteger <= 15)) then
			begin
				nRow	:= FieldByName ('Edaban').AsInteger - 10;				// 行

				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayNo%.2d', [nRow])).AsInteger   := nRow;

                if (nRow = 1) then
                begin
    				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseKingaku%.2d' , [nRow])).AsCurrency     := 0;
    				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseKingaku%.2d' , [nRow + 1])).AsCurrency := FieldByName ('BaseKingaku').AsCurrency;
                end
                else if (nRow > 1) and (nRow < 5) and (FieldByName ('BaseKingaku').AsCurrency > 0) then
    				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseKingaku%.2d' , [nRow + 1])).AsCurrency := FieldByName ('BaseKingaku').AsCurrency;
// <189> Add ↓↓↓
				//0円の場合は基準金額を出さない
// <192> Mod
//				if FieldByName ('BaseKingaku').AsCurrency = 0 then
				if (nRow > 1) and (nRow < 5) and (FieldByName ('BaseKingaku').AsCurrency = 0) then
// <192> Mod
    				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseKingaku%.2d' , [nRow + 1])).AsString := '';
// <189> Add ↑↑↑

				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayBaseHiritu%.2d'  , [nRow])).AsCurrency	:= FieldByName ('BaseHiritu'  ).AsCurrency;
				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayHasuuKingaku%.2d', [nRow])).AsCurrency	:= FieldByName ('HasuuKingaku').AsCurrency;
				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayHasuuHou%.2d'    , [nRow])).AsCurrency	:= FieldByName ('HasuuHou'    ).AsInteger;
// <190> Add ↓↓↓
				//端数金額が0円の場合
				if FieldByName ('HasuuKingaku').AsCurrency = 0 then
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuDesc%.2d', [nRow])).AsString	:= '';
					CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWaySite%.2d',        [nRow])).AsString	:= '';
					CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWaySite%.2d',      [nRow])).AsString	:= '';
				end
				else
				begin
// <190> Add ↑↑↑
    	            case (FieldByName ('HasuuHou').AsInteger) of
        	        	0:		CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuDesc%.2d', [nRow])).AsString	:= '切り捨て';
            	    	1:		CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuDesc%.2d', [nRow])).AsString	:= '切り上げ';
                		2:		CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuDesc%.2d', [nRow])).AsString	:= '四捨五入';
                		else	CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuDesc%.2d', [nRow])).AsString	:= '';
	                end;
				end;												// <190> Add
// <189> Mod ↓↓↓
//				CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWaySite%.2d', [nRow])).AsCurrency	:= FieldByName ('Site').AsInteger;
				case (nPriPayWay) of
					2, 3:	CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWaySite%.2d', [nRow])).AsCurrency	:= FieldByName ('Site').AsInteger;
					else	CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWaySite%.2d', [nRow])).AsString		:= '';
				end;
// <189> Mod ↑↑↑
// <190> Add ↓↓↓
				//サイト（文字）
				case (nPriPayWay) of
					2, 3:	CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWaySite%.2d', [nRow])).AsString	:= FieldByName ('Site').AsString + '日';
					else	CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWaySite%.2d', [nRow])).AsString	:= '';
				end;
// <190> Add ↑↑↑

				CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayBaseKingakuUnit%.2d' , [nRow])).AsString	:= '円';
				CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayBaseKinFromUnit%.2d' , [nRow])).AsString	:= '～';

                if (iBunkaiKbn = 0) then
    				CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayBaseHirituUnit%.2d'  , [nRow])).AsString	:= '％'
                else
    				CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayBaseHirituUnit%.2d'  , [nRow])).AsString	:= '円';

// <191> Add ↓↓↓
//				CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuKingakuUnit%.2d', [nRow])).AsString	:= '円';
				if (iBunkaiKbn = 0) then								//比率
					CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuKingakuUnit%.2d', [nRow])).AsString	:= '円'
                else
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('strPriPayWayHasuuKingakuUnit%.2d', [nRow])).AsString	:= '';
					CmnMemDataPrintDetail.FieldByName (Format ('nPriPayWayHasuuKingaku%.2d', [nRow])).AsString			:= '';
				end;
// <191> Add ↑↑↑
			end;

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;
// <149> 2006/10/11 H.Kawato Add End

//***********************************************************************************************************/
//***********************************************************************************************************/
procedure	TJNTCRP004006f.fnSetMemDataPrintAccountInfo (nAccountCode: Integer; nClass: Integer);
var
	dqMasterData  : TMQuery;
	strFieldName  : String;
	strDescription: String;

begin
	if	(nAccountCode > 0) then
		CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dAccountCode', [nClass])).AsInteger	:= nAccountCode
	else
		CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dAccountCode', [nClass])).Clear ();

	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT BankNCode, AccKbn, AccNo FROM AccInfo WHERE GCode = :nAccountCode AND RDelKbn = 0');

		ParamByName ('nAccountCode').AsInteger	:= nAccountCode;

		Open ();

		if	(not EOF) then
		begin
// <203> MOD-STR
//			fnCheckValidHojCode (MASTER_BANK, FieldByName ('BankNCode').AsFloat, strDescription, OPTION_GENERAL);
			fnCheckValidHojCode (MASTER_BANK, FieldByName ('BankNCode').AsFloat, strDescription, OPTION_FROM_BANKNCODE);
// <203> MOD-END

			CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountCodeDesc', [nClass])).AsString	:= strDescription;

			if	((nClass = 1) or (nClass = 2)) then
				strFieldName	:= 'strInfo%.2dDepositDesc01'
			else
				strFieldName	:= 'strInfo%.2dDepositDesc';

            case (FieldByName ('AccKbn').AsInteger) of
                1:		CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).AsString	:= '普通';
                2:		CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).AsString	:= '当座';
                4:		CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).AsString	:= '貯蓄';
                9:		CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).AsString	:= 'その他';
                else	CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).AsString	:= '';
            end;

			if	((nClass = 1) or (nClass = 2)) then
				strFieldName	:= 'strInfo%.2dAccountNo01'
			else
				strFieldName	:= 'strInfo%.2dAccountNo';

			CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).AsString	:= fnGetEditedAccountNumber (FieldByName ('AccNo').AsString);
		end
		else
		begin
			CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountCodeDesc', [nClass])).Clear ();

			if	((nClass = 1) or (nClass = 2)) then
				strFieldName	:= 'strInfo%.2dDepositDesc01'
			else
				strFieldName	:= 'strInfo%.2dDepositDesc';

			CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).Clear ();

			if	((nClass = 1) or (nClass = 2)) then
				strFieldName	:= 'strInfo%.2dAccountNo01'
			else
				strFieldName	:= 'strInfo%.2dAccountNo';

			CmnMemDataPrintDetail.FieldByName (Format (strFieldName, [nClass])).Clear ();
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;


//***********************************************************************************************************/
//***********************************************************************************************************/
// <149> 2006/10/11 H.Kawato Mod
//procedure	TJNTCRP004006f.fnSetMemDataPrintPayDetailInfo (nNCode: Extended);
procedure	TJNTCRP004006f.fnSetMemDataPrintPayDetailInfo (nNCode, nPayPtnNo: Extended);
var
	dqMasterData   : TMQuery;
	nClass		   : Integer;
	strReceiverName: String;
    iAccAutoData   : Integer;   // <144> 2006/08/08 H.Kawato Add
    strSQL         : String;    // <149> 2006/10/11 H.Kawato Add

begin
	dqMasterData	:= TMQuery.Create (self);

	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

	strReceiverName	:= '';

	with (dqMasterData) do
	begin
		for	nClass := 1 to 4 do
		begin
			Close ();

			SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
{
			SQL.Add   ('SELECT ');
            SQL.Add   (' DI.AccNCode,AI.GCode,                                  ');
            SQL.Add   (' BS.BankNCode  As BankNCode,BF.BankCode,BF.BankName,BF.BankKana,       ');
            SQL.Add   (' DI.BkBraNCode As BranchNCode,BS.BranchCode,BS.BranchName,BS.BranchKana,');
            SQL.Add   (' DI.AccKbn, isnull(DI.AccNo,0) as AccNo, DI.FBSet,      ');
			SQL.Add   (' DI.UketoriName, DI.TransKanaName,          ');
			SQL.Add   (' DI.AccAutoKbn, DI.AccAutoData,             ');         // <144> 2006/08/08 H.Kawato Add
			SQL.Add   (' DI.ChargeKbn, DI.ChargeFutan, DI.TransKbn, DI.EdiInfo, DI.AiteNo1, DI.AiteNo2, Site, ');
			SQL.Add   (' TegYusouKbn, TegYusouFutan, TegBunkatuMax  ');
			SQL.Add   (' FROM   PayDetailInfo DI                    ');
            SQL.Add   (' Left Outer Join AccInfo AI  on DI.AccNCode  = AI.NCode      ');
            SQL.Add   (' Left Outer Join HAPBS BS    on DI.BkBraNCode = BS.NCode     ');
            SQL.Add   (' Left Outer Join HAPBF BF    on BS.BankNCode  = BF.NCode     ');

			SQL.Add   ('WHERE  DI.MasterKbn = 22 AND DI.PayNCode  = :pNCode AND DI.ShiharaiSyubetu = :nClass');

			ParamByName ('pNCode').AsFloat		    := nNCode;
			ParamByName ('nClass'    ).AsInteger	:= nClass;
}
            strSQL  := '';
            strSQL  := strSQL + 'SELECT ';
            strSQL  := strSQL + ' DI.AccNCode, AI.GCode,';
            strSQL  := strSQL + ' BS.BankNCode  As BankNCode, BF.BankCode, BF.BankName, BF.BankKana,';
            strSQL  := strSQL + ' DI.BkBraNCode As BranchNCode, BS.BranchCode, BS.BranchName, BS.BranchKana,';
// <180>            strSQL  := strSQL + ' DI.AccKbn, isnull(DI.AccNo,0) as AccNo, DI.FBSet,';
			strSQL  := strSQL + ' DI.AccKbn, isnull(DI.AccNo,:strAccNo) as AccNo, DI.FBSet,';   // <180>
            strSQL  := strSQL + ' DI.UketoriName, DI.TransKanaName,';
            strSQL  := strSQL + ' DI.AccAutoKbn, DI.AccAutoData,';
            strSQL  := strSQL + ' DI.ChargeKbn, DI.ChargeFutan, DI.TransKbn, DI.EdiInfo, DI.AiteNo1, DI.AiteNo2, DI.Site,';
            strSQL  := strSQL + ' TegYusouKbn, TegYusouFutan, TegBunkatuMax ';
// <218> ADD-STR
            strSQL  := strSQL + ',ERKbn';
            strSQL  := strSQL + ',VFree1,VFree2,VFree3,VFree4,VFree5';
// <218> ADD-END
            strSQL  := strSQL + ' FROM PayDetailInfo DI ';
            strSQL  := strSQL + ' Left Outer Join AccInfo AI  on DI.AccNCode   = AI.NCode ';
            strSQL  := strSQL + ' Left Outer Join HAPBS BS    on DI.BkBraNCode = BS.NCode ';
            strSQL  := strSQL + ' Left Outer Join HAPBF BF    on BS.BankNCode  = BF.NCode ';
            strSQL  := strSQL + 'WHERE DI.ShiharaiSyubetu = ' + IntToStr(nClass);
            strSQL  := strSQL + '  AND DI.PayPtnNo  = ' + FloatToStr(nPayPtnNo);
            strSQL  := strSQL + '  AND DI.PayNCode  = ' + FloatToStr(nNCode);
            strSQL  := strSQL + '  AND DI.MasterKbn = ' + IntToStr(MASTER_CUSTOMER);
            strSQL  := strSQL + '  AND DI.RDelKbn = 0 ';    // <161> Add

            SQL.Add(strSQL);
            SetFld('strAccNo').AsString := '';  // <180>
// <149> 2006/10/11 H.Kawato Mod End

			Open ();

			if	(not EOF) then
			begin

                //<121> mod-start
			    //	fnSetMemDataPrintAccountInfo (FieldByName ('AccNo').AsInteger, nClass);
               	fnSetMemDataPrintAccountInfo (FieldByName ('GCode').AsInteger, nClass);
                //<121> mod-end

// <218> MOD-STR
//				if	((nClass = 1) or (nClass = 2)) then							// 支払種別: 1=振込/2=期日指定振込
                // 支払種別: 1=振込/2=期日指定振込、3=手形且つ電子債権採用あり
				if ((nClass in [1, 2]) or ((nClass = 3) and (m_iErUseKbn = 1) and (FieldByName ('ERKbn').AsInteger = 1))) then
// <218> MOD-STR
				begin
					if	(FieldByName ('BankCode').IsNull) then
						CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dBankCode', [nClass])).Clear ()
					else
						CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dBankCode', [nClass])).AsInteger	:= FieldByName ('BankCode').AsInteger;

					if	(FieldByName ('BranchCode').IsNull) then
						CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dBranchCode', [nClass])).Clear ()
					else
						CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dBranchCode', [nClass])).AsInteger	:= FieldByName ('BranchCode').AsInteger;

					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBankCodeDesc'      , [nClass])).AsString	:= FieldByName ('BankName'     ).AsString;
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBranchCodeDesc'    , [nClass])).AsString	:= FieldByName ('BranchName'   ).AsString;
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBankCodeDescKana'  , [nClass])).AsString	:= FieldByName ('BankKana'     ).AsString;
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBranchCodeDescKana', [nClass])).AsString	:= FieldByName ('BranchKana'   ).AsString;
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBranchCodeDescKana', [nClass])).AsString	:= FieldByName ('BranchKana'   ).AsString;
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dTranslationName'   , [nClass])).AsString	:= FieldByName ('TransKanaName').AsString;

					case (FieldByName ('AccKbn').AsInteger) of
						1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc02', [nClass])).AsString	:= '普通';
						2:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc02', [nClass])).AsString	:= '当座';
						4:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc02', [nClass])).AsString	:= '貯蓄';
						9:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc02', [nClass])).AsString	:= 'その他';
						else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc02', [nClass])).AsString	:= '';
					end;

					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountNo02', [nClass])).AsString	:= fnGetEditedAccountNumber (FieldByName ('AccNo').AsString);

					case (FieldByName ('ChargeFutan').AsInteger) of
						0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComDivisionDesc', [nClass])).AsString	:= '自動設定';
						1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComDivisionDesc', [nClass])).AsString	:= '自社負担';
						2:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComDivisionDesc', [nClass])).AsString	:= '他社負担';
						else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComDivisionDesc', [nClass])).AsString	:= '';
					end;
// <218> ADD-STR
                    if (nClass = 3) and (FieldByName ('ChargeFutan').AsInteger = 0) then
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComDivisionDesc', [nClass])).AsString	:= '自社負担';

				    if	(nClass in [1, 2]) then							        // 支払種別: 1=振込/2=期日指定振込
                    begin
// <218> ADD-END
                        case (FieldByName ('ChargeKbn').AsInteger) of
                            0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '他銀行';
                            1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '同銀行他支店';
                            2:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '同銀行同支店';
                            else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '';
                        end;

                        case (FieldByName ('TransKbn').AsInteger) of
                            0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPayDivisionDesc', [nClass])).AsString	:= '電信';
                            1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPayDivisionDesc', [nClass])).AsString	:= '文書';
                            else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPayDivisionDesc', [nClass])).AsString	:= '';
                        end;

// <144> 2006/08/08 H.Kawato Add Start
                        if (nClass = 1) then    // 振込支払
                        begin
                            CmnMemDataPrintDetail.FieldByName ('nAccAutoKbn' ).AsInteger	:= FieldByName ('AccAutoKbn' ).AsInteger;
                            CmnMemDataPrintDetail.FieldByName ('nAccAutoData').AsInteger	:= FieldByName ('AccAutoData').AsInteger;

                            case (FieldByName ('AccAutoKbn').AsInteger) of
                                0:		CmnMemDataPrintDetail.FieldByName ('strAutoKbnDesc').AsString	:= 'しない';
                                1:		CmnMemDataPrintDetail.FieldByName ('strAutoKbnDesc').AsString	:= 'する';
                                else	CmnMemDataPrintDetail.FieldByName ('strAutoKbnDesc').AsString	:= '';
                            end;
                            case (FieldByName ('AccAutoKbn').AsInteger) of
                                0:		CmnMemDataPrintDetail.FieldByName ('strAccAutoDesc').AsString	:= 'しない';
                                1:
                                begin
                                    iAccAutoData := FieldByName ('AccAutoData').AsInteger;
                                    CmnMemDataPrintDetail.FieldByName ('strAccAutoDesc').AsString	:= 'する　NO ' + IntToStr(iAccAutoData);
                                end;
                                else	CmnMemDataPrintDetail.FieldByName ('strAccAutoDesc').AsString	:= '';
                            end;
                        end;
// <144> 2006/08/08 H.Kawato Add End

                        case (FieldByName ('FBSet').AsInteger) of
                            0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dFBDivisionDesc', [nClass])).AsString	:= 'EDI情報';
                            1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dFBDivisionDesc', [nClass])).AsString	:= '顧客コード1･2';
                            2:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dFBDivisionDesc', [nClass])).AsString	:= 'セットなし';    // <187> ADD
                            else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dFBDivisionDesc', [nClass])).AsString	:= '';
                        end;

                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dVisitorCode01', [nClass])).AsString	:= fnGetEditedVisitorCode (FieldByName ('AiteNo1').AsString);
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dVisitorCode02', [nClass])).AsString	:= fnGetEditedVisitorCode (FieldByName ('AiteNo2').AsString);
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dEDIInfo'      , [nClass])).AsString	:= FieldByName ('EdiInfo').AsString;
                    end;        // <218> ADD
// <218> MOD-STR
//				end
//				else
                end;
				if	(nClass in [3, 4]) then							            // 支払種別: 3=手形/4=小切手
// <218> MOD-END
				begin
// <218> ADD-STR
                    // 支払種別:3=手形且つ電子債権採用なし、4:小切手
	    			if (((nClass = 3) and ((m_iErUseKbn = 0) or (FieldByName ('ERKbn').AsInteger = 0))) or (nClass = 4)) then
                    begin
// <218> ADD-END
                        case (FieldByName ('TegYusouKbn').AsInteger) of
                            0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPosDivisionDesc', [nClass])).AsString	:= '郵送する';
                            1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPosDivisionDesc', [nClass])).AsString	:= '郵送しない';
                            else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPosDivisionDesc', [nClass])).AsString	:= '';
                        end;

                        case (FieldByName ('TegYusouFutan').AsInteger) of
                            0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBurDivisionDesc', [nClass])).AsString	:= '自社負担';
                            1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBurDivisionDesc', [nClass])).AsString	:= '他社負担';
                            else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBurDivisionDesc', [nClass])).AsString	:= '';
                        end;

                        if	(nClass = 3) then									// 支払種別: 3=手形
                            CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dDivSheets', [nClass])).AsInteger	:= FieldByName ('TegBunkatuMax').AsInteger;
// <218> ADD-STR
                    end;

					if	((nClass = 3) and (m_iErUseKbn = 1)) then				// 支払種別: 3=手形
                    begin
                        // 電子債権採用区分
                        case (FieldByName ('ERKbn').AsInteger) of
                            0:		CmnMemDataPrintDetail.FieldByName ('strERKbnDesc').AsString	:= '採用なし';
                            1:      CmnMemDataPrintDetail.FieldByName ('strERKbnDesc').AsString	:= '採用あり';
                            else	CmnMemDataPrintDetail.FieldByName ('strERKbnDesc').AsString	:= '';
                        end;
                        if (FieldByName ('ERKbn').AsInteger = 1) then
                        begin
                            // フリー項目
                            CmnMemDataPrintDetail.FieldByName ('strVFree1').AsString := FieldByName ('VFree1').AsString;
                            CmnMemDataPrintDetail.FieldByName ('strVFree2').AsString := FieldByName ('VFree2').AsString;
                            CmnMemDataPrintDetail.FieldByName ('strVFree3').AsString := FieldByName ('VFree3').AsString;
                            CmnMemDataPrintDetail.FieldByName ('strVFree4').AsString := FieldByName ('VFree4').AsString;
                            CmnMemDataPrintDetail.FieldByName ('strVFree5').AsString := FieldByName ('VFree5').AsString;
// <223> ADD-STR
                            // 手数料計算区分
                            case (FieldByName ('ChargeKbn').AsInteger) of
                                0:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '自動設定';
                                1:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '他行';
                                2:		CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '同行';
                                else	CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).AsString	:= '';
                            end;
// <223> ADD-END
                        end;
                    end;
// <218> ADD-END
				end;

				if	((nClass = 2) or (nClass = 3)) then							// 支払種別: 2=期日指定振込/3=手形
					CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dPaySight', [nClass])).AsInteger	:= FieldByName ('Site').AsInteger;

				if	(strReceiverName = '') then
					strReceiverName	:= FieldByName ('UketoriName').AsString;
			end
			else
			begin
				CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dAccountCode'      , [nClass])).Clear ();
				CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountCodeDesc', [nClass])).Clear ();

// <218> MOD-STR
//				if	((nClass = 1) or (nClass = 2)) then							// 支払種別: 1=振込/2=期日指定振込
				if	(nClass in [1, 2, 3]) then							        // 支払種別: 1=振込/2=期日指定振込/3=手形
// <218> MOD-STR
				begin
// <218> ADD-STR
				    if	(nClass in [1, 2]) then							        // 支払種別: 1=振込/2=期日指定振込
                    begin
// <218> ADD-STR
    					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc01'     , [nClass])).Clear ();
	    				CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountNo01'       , [nClass])).Clear ();
                    end;        // <218> ADD
					CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dBankCode'            , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dBranchCode'          , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBankCodeDesc'      , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBranchCodeDesc'    , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBankCodeDescKana'  , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBranchCodeDescKana', [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dTranslationName'   , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc02'     , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountNo02'       , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComDivisionDesc'   , [nClass])).Clear ();
// <218> ADD-STR
				    if	(nClass in [1, 2]) then							        // 支払種別: 1=振込/2=期日指定振込
                    begin
// <218> ADD-STR
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dComCalculationDesc', [nClass])).Clear ();
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPayDivisionDesc'   , [nClass])).Clear ();
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dFBDivisionDesc'    , [nClass])).Clear ();
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dVisitorCode01'     , [nClass])).Clear ();
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dVisitorCode02'     , [nClass])).Clear ();
                        CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dEDIInfo'           , [nClass])).Clear ();
                    end;        // <218> ADD
// <218> MOD-STR
//				end
//				else
                end;
				if	(nClass in [3, 4]) then							            // 支払種別: 3=手形/4=小切手
// <218> MOD-END
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dDepositDesc'    , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dAccountNo'      , [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dPosDivisionDesc', [nClass])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strInfo%.2dBurDivisionDesc', [nClass])).Clear ();

					if	(nClass = 3) then										// 支払種別: 3=手形
						CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dDivSheets', [nClass])).Clear ();
// <218> ADD-STR
					if	(nClass = 3) then										// 支払種別: 3=手形
                    begin
                        // 電子債権採用区分
                        CmnMemDataPrintDetail.FieldByName ('strERKbnDesc').Clear ();
                        // フリー項目
                        CmnMemDataPrintDetail.FieldByName ('strVFree1').Clear ();
                        CmnMemDataPrintDetail.FieldByName ('strVFree2').Clear ();
                        CmnMemDataPrintDetail.FieldByName ('strVFree3').Clear ();
                        CmnMemDataPrintDetail.FieldByName ('strVFree4').Clear ();
                        CmnMemDataPrintDetail.FieldByName ('strVFree5').Clear ();
                    end;
// <218> ADD-END
				end;

				if	((nClass = 2) or (nClass = 3)) then							// 支払種別: 2=期日指定振込/3=手形
					CmnMemDataPrintDetail.FieldByName (Format ('nInfo%.2dPaySight', [nClass])).Clear ();
			end;
		end;
	end;

	CmnMemDataPrintDetail.FieldByName ('strReceiverName').AsString	:= strReceiverName;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;
//***********************************************************************************************************/
//***********************************************************************************************************/
// <149> 2006/10/11 H.Kawato Mod
//procedure	TJNTCRP004006f.fnSetMemDataPrintPayOffsetInfo (nNCode: Extended);
procedure	TJNTCRP004006f.fnSetMemDataPrintPayOffsetInfo (nNCode, nPayPtnNo: Extended);
var
	dqMasterData    : TMQuery;
	nRow		    : Integer;
	nPosition	    : Integer;
	strHojCodeWork  : String;
	strFormat	    : String;
	strDescription  : String;
    iGCode          : Integer;    
    NCodeWork       : Extended;
    strGCode        : String;
    sGCode          : String;       // <138> 2006/08/02 H.Kawato Add
    strSQL          : String;       // <149> 2006/10/11 H.Kawato Add

begin

    // Queryの構築
	dqMasterData := TMQuery.Create (Application);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
// <149> 2006/10/11 H.Kawato Mod Start
(*
{
		SQL.Add   ('SELECT SousaiNo, KmkNCode,SubNCode, BmnNCode, SegNCode,  HojKbn1, Hoj1NCode, ');
		SQL.Add   ('       HojKbn2, Hoj2NCode, FeeTaxCd, FeeTaxRt, SousaiKin FROM PayOffsetInfo ');
		SQL.Add   ('WHERE  PayNCode = :pNCode ORDER BY SousaiNo');
}
		SQL.Add   ('SELECT PO.SousaiNo, PO.KmkNCode, PO.SubNCode, PO.BmnNCode, PO.SegNCode,KojNCode, ');
		SQL.Add   ('       PO.HojKbn1, PO.Hoj1NCode, PO.HojKbn2, PO.Hoj2NCode, PO.FeeTaxCd, PO.FeeTaxRt, PO.SousaiKin, ');
        SQL.Add   ('       KM1.GCode as KmkGCode,       ');
        SQL.Add   ('       KM2.SubCode as SubGCode,     ');
        SQL.Add   ('       MA1.GCode as BmnGCode,       ');
        SQL.Add   ('       MA2.GCode as SegGCode,       ');
        SQL.Add   ('       MA3.GCode as KojGCode,       ');
// <107>        SQL.Add   ('       Hoj1.GCode as Hoj1GCode,     ');
// <107>        SQL.Add   ('       Hoj2.GCode as Hoj2GCode,     ');
        SQL.Add   ('KM1.SubKmkUse,KM1.BmnUse, KM1.BPKbn,');
        SQL.Add   ('KM1.BankUse,KM1.ToriUse, KM1.ShainUse,');                                       // <107>
        SQL.Add   ('KM1.HojyoUse1, KM1.HojyoUse2, KM1.HojyoUse3, KM1.HojyoUse4, KM1.HojyoUse5,');   // <107>
        SQL.Add   ('KM1.SegUse1,KM1.SegUse2,KM1.SegUse3,KM1.SegUse4,KM1.SegUse5,');
        SQL.Add   ('KM1.SegUse6,KM1.SegUse7,KM1.SegUse8,KM1.SegUse9,KM1.SegUse10,');
        SQL.Add   ('KM1.PrjUse1,KM1.PrjUse2,KM1.PrjUse3,KM1.PrjUse4,KM1.PrjUse5,');
        SQL.Add   ('KM1.PrjUse6,KM1.PrjUse7,KM1.PrjUse8,KM1.PrjUse9,KM1.PrjUse10');

		SQL.Add   ('FROM   PayOffsetInfo PO ');
        SQL.Add   ('LEFT OUTER JOIN KmkMA   KM1 ON PO.KmkNCode = KM1.NCode  ');
        SQL.Add   ('LEFT OUTER JOIN KmkMA   KM2 ON PO.SubNCode = KM2.cNCode and  KM2.NCode = PO.KmkNCode ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA MA1 ON PO.BmnNCode = MA1.NCode  ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA MA2 ON PO.SegNCode = MA2.NCode  ');
        SQL.Add   ('LEFT OUTER JOIN HojyoMA MA3 ON PO.KojNCode = MA3.NCode  ');
{ <107>
        if MASTER_HOJYO1 = MASTER_CUSTOMER then
            SQL.Add   ('LEFT OUTER JOIN MTOKUI  Hoj1 ON PO.Hoj1NCode = Hoj1.NCode  ')
        else
            SQL.Add   ('LEFT OUTER JOIN HojyoMA Hoj1 ON PO.Hoj1NCode = Hoj1.NCode  ');


        if MASTER_HOJYO2 = MASTER_CUSTOMER then
            SQL.Add   ('LEFT OUTER JOIN MTOKUI  Hoj2 ON PO.Hoj2NCode = Hoj2.NCode  ')
        else
            SQL.Add   ('LEFT OUTER JOIN HojyoMA Hoj2 ON PO.Hoj2NCode = Hoj2.NCode  ');
  <107> }

		SQL.Add   ('WHERE  PO.MasterKbn = :nMasterDivision AND PO.PayNCode = :pNCode ORDER BY PO.SousaiNo');

		ParamByName ('nMasterDivision').AsInteger := MASTER_CUSTOMER;
		ParamByName ('pNCode').AsFloat            := nNCode;
*)
        strSQL  := '';
        strSQL  := strSQL + 'SELECT PO.SousaiNo, PO.KmkNCode, PO.SubNCode, PO.BmnNCode, PO.SegNCode, KojNCode, KsyNCode,';
        strSQL  := strSQL + '       PO.HojKbn1, PO.Hoj1NCode, PO.HojKbn2, PO.Hoj2NCode, PO.FeeTaxCd, PO.FeeTaxRt, PO.SousaiKin,';
        strSQL  := strSQL + '       KM1.GCode as KmkGCode, ';
        strSQL  := strSQL + '       KM2.SubCode as SubGCode, ';
        strSQL  := strSQL + '       MA1.GCode as BmnGCode, ';
        strSQL  := strSQL + '       MA2.GCode as SegGCode, ';
        strSQL  := strSQL + '       MA3.GCode as KojGCode, ';
        strSQL  := strSQL + '       MA4.GCode as KsyGCode, ';
        strSQL  := strSQL + '       ISNULL(KI.PartKbn, 0) AS PartKbn, ';        // <158> Add
        strSQL  := strSQL + '       KM1.SubKmkUse, KM1.BmnUse, KM1.BPKbn, ';
        strSQL  := strSQL + '       KM1.BankUse, KM1.ToriUse, KM1.ShainUse,';
        strSQL  := strSQL + '       KM1.HojyoUse1, KM1.HojyoUse2, KM1.HojyoUse3, KM1.HojyoUse4, KM1.HojyoUse5,';
        strSQL  := strSQL + '       KM1.SegUse1, KM1.SegUse2, KM1.SegUse3, KM1.SegUse4, KM1.SegUse5, ';
        strSQL  := strSQL + '       KM1.SegUse6, KM1.SegUse7, KM1.SegUse8, KM1.SegUse9, KM1.SegUse10, ';
        strSQL  := strSQL + '       KM1.PrjUse1, KM1.PrjUse2, KM1.PrjUse3, KM1.PrjUse4, KM1.PrjUse5, ';
        strSQL  := strSQL + '       KM1.PrjUse6, KM1.PrjUse7, KM1.PrjUse8, KM1.PrjUse9, KM1.PrjUse10 ';
        strSQL  := strSQL + 'FROM   PayOffsetInfo PO ';
        strSQL  := strSQL + 'LEFT OUTER JOIN KmkMA   KM1 ON PO.KmkNCode = KM1.NCode ';
        strSQL  := strSQL + 'AND KM1.MasterKbn = 1 AND KM1.RDelKbn = 0 ';       // <158> Add
        strSQL  := strSQL + 'LEFT OUTER JOIN KmkMA   KM2 ON PO.SubNCode = KM2.cNCode and  KM2.NCode = PO.KmkNCode ';
        strSQL  := strSQL + 'AND KM2.MasterKbn = 2 AND KM2.RDelKbn = 0 ';       // <158> Add
        strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA MA1 ON PO.BmnNCode = MA1.NCode ';
        strSQL  := strSQL + 'AND MA1.MasterKbn = 41 ';                          // <163> Add
        strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA MA2 ON PO.SegNCode = MA2.NCode ';
// <163> 2007/07/19 H.Kawato Add Start  会社で採用している、かつ科目で採用しているｾｸﾞﾒﾝﾄの中で先頭のマスタ区分を指定する
        strSQL  := strSQL + 'AND MA2.MasterKbn = (SELECT ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 101) > 0) THEN 101 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 102) > 0) THEN 102 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 103) > 0) THEN 103 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 104) > 0) THEN 104 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 105) > 0) THEN 105 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 106) > 0) THEN 106 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 107) > 0) THEN 107 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 108) > 0) THEN 108 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 109) > 0) THEN 109 ELSE ';
        strSQL  := strSQL + '(IF (ISNULL(KM1.SegUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 110) > 0) THEN 110 ELSE ';
        strSQL  := strSQL + '0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) ';
// <163> 2007/07/19 H.Kawato Add End
        strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA MA3 ON PO.KojNCode = MA3.NCode ';
// <163> 2007/07/19 H.Kawato Add Start  会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄの中で先頭のマスタ区分を指定する(工事優先)
        strSQL  := strSQL + ' AND MA3.MasterKbn = (SELECT ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) THEN 201 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) THEN 202 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) THEN 203 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) THEN 204 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) THEN 205 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) THEN 206 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) THEN 207 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) THEN 208 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) THEN 209 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) THEN 210 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) THEN 201 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) THEN 202 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) THEN 203 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) THEN 204 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) THEN 205 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) THEN 206 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) THEN 207 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) THEN 208 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) THEN 209 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) THEN 210 ELSE ';
        strSQL  := strSQL + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) ';
// <163> 2007/07/19 H.Kawato Add End
        strSQL  := strSQL + 'LEFT OUTER JOIN HojyoMA MA4 ON PO.KsyNCode = MA4.NCode ';
// <163> 2007/07/19 H.Kawato Add Start  会社で採用している、かつ科目で採用しているﾌﾟﾛｼﾞｪｸﾄｻﾌﾞの中で先頭のマスタ区分を指定する(工事優先)
        strSQL  := strSQL + ' AND MA4.MasterKbn = (SELECT ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(KojUseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210 AND UseKbn > 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse1, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 201) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 301) > 0) THEN 301 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse2, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 202) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 302) > 0) THEN 302 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse3, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 203) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 303) > 0) THEN 303 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse4, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 204) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 304) > 0) THEN 304 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse5, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 205) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 305) > 0) THEN 305 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse6, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 206) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 306) > 0) THEN 306 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse7, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 207) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 307) > 0) THEN 307 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse8, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 208) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 308) > 0) THEN 308 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse9, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 209) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 309) > 0) THEN 309 ELSE ';
        strSQL  := strSQL + ' (IF (ISNULL(KM1.PrjUse10, 0) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 210) > 0) AND ((SELECT ISNULL(UseKbn, 0) FROM MasterInfo WHERE MasterKbn = 310) > 0) THEN 310 ELSE ';
        strSQL  := strSQL + ' 0 ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF) ENDIF)) ';
// <163> 2007/07/19 H.Kawato Add End
        strSQL  := strSQL + 'LEFT OUTER JOIN KojiInfo KI ON KI.MasterKbn = MA3.MasterKbn AND KI.NCode = PO.KojNCode ';  // <158> Add
        strSQL  := strSQL + 'WHERE PO.PayPtnNo  = ' + FloatToStr(nPayPtnNo);
        strSQL  := strSQL + '  AND PO.PayNCode  = ' + FloatToStr(nNCode);
        strSQL  := strSQL + '  AND PO.MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';
        strSQL  := strSQL + '  AND PO.RDelKbn = 0 ';                            // <161> Add
        strSQL  := strSQL + 'ORDER BY PO.SousaiNo ';

        SQL.Add(strSQL);
// <149> 2006/10/11 H.Kawato Mod End

		Open ();

		while (not EOF) do
		begin
            // 第一第二補助の採用ﾏｽﾀを取得 <107>
            fnGetHojyoMA(dqMasterData);

			if	((FieldByName ('SousaiNo').AsInteger >= 1) and (FieldByName ('SousaiNo').AsInteger <= 10)) then
			begin
				nRow	:= FieldByName ('SousaiNo').AsInteger;							// 行

				CmnMemDataPrintDetail.FieldByName (Format ('nOffsetNo%.2d', [nRow])).AsInteger	:= nRow;

				if	(FieldByName ('KmkNCode').AsFloat = 0) then
				begin
					CmnMemDataPrintDetail.FieldByName (Format ('nOffsetKmkCode%.2d'      , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strOffsetKmkCodeDesc%.2d', [nRow])).Clear ();

					for	nPosition := 0 to 2 do
					begin
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCode%.2d%.2d'    , [nPosition + 1, nRow])).Clear ();
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCodeDesc%.2d%.2d', [nPosition + 1, nRow])).Clear ();
					end;

					CmnMemDataPrintDetail.FieldByName (Format ('nOffsetTaxCode%.2d'      , [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('nOffsetPrice%.2d'        , [nRow])).Clear ();
// <#TAX10> ADD-STR
					CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxCodePrt%.2d',  [nRow])).Clear ();
					CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRatePrt%.2d',  [nRow])).Clear ();
// <#TAX10> ADD-END
				end
				else
				begin
					fnCheckValidKmkCode (FieldByName ('KmkNCode').AsFloat,iGCode, strDescription);

					CmnMemDataPrintDetail.FieldByName (Format ('nOffsetKmkCode%.2d'      , [nRow])).AsInteger	:= iGCode;
					CmnMemDataPrintDetail.FieldByName (Format ('strOffsetKmkCodeDesc%.2d', [nRow])).AsString	:= strDescription;

                    m_iPrintPartKbn := FieldByName ('PartKbn').AsInteger;       // <158> 2007/02/13 H.Kawato Add
					fnSetAttributeOffsetJournalInfoPrint (FieldByName ('KmkNCode').AsFloat);

					for	nPosition := 0 to 2 do
					begin
						CmnMemDataPrintDetail.FieldByName (Format ('nOffsetAttribute%.2d%.2d',
												[nPosition + 1, nRow])).AsInteger	:= m_arCodeAttributePrint [nPosition].nAttribute;

						if	(not m_arCodeAttributePrint [nPosition].fEnabled) then
						begin
							CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCode%.2d%.2d'    , [nPosition + 1, nRow])).Clear ();
							CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCodeDesc%.2d%.2d', [nPosition + 1, nRow])).Clear ();

							Continue;
						end;

                        // 科目別補助
						if	(m_arCodeAttributePrint [nPosition].nMasterDivision = MASTER_SUBJECTPLUS) then
						begin
							if	(FieldByName ('SubNCode').IsNull) then
							begin
								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCode%.2d%.2d'    , [nPosition + 1, nRow])).Clear ();
								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCodeDesc%.2d%.2d', [nPosition + 1, nRow])).Clear ();
							end
							else
							begin
// <138> 2006/08/02 H.Kawato Mod
{
								fnCheckValidKmsCode (FieldByName ('KmkNCode').AsFloat,
																FieldByName ('SubNCode').AsFloat,iGCode, strDescription);

								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCode%.2d%.2d'    ,
															[nPosition + 1, nRow])).AsString	:= IntToStr (iGCode);
}
								fnCheckValidKmsCode (FieldByName ('KmkNCode').AsFloat,
																FieldByName ('SubNCode').AsFloat,sGCode, strDescription);

// <145> 2006/08/10 H.Kawato Add Start
								if	(m_arCodeAttributePrint [nPosition].nAttribute <= 1) then
								begin
									case (m_arCodeAttributePrint [nPosition].nAttribute) of
										0:	strFormat	:= '%'  + IntToStr (m_arCodeAttributePrint [nPosition].nDigit) + 'd';
										1:	strFormat	:= '%.' + IntToStr (m_arCodeAttributePrint [nPosition].nDigit) + 'd';
									end;

									sGCode	:= Format (strFormat, [StrToInt64 (Trim (sGCode))]);
								end;
// <145> 2006/08/10 H.Kawato Add End

								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCode%.2d%.2d'    ,
															[nPosition + 1, nRow])).AsString	:= sGCode;
// <138> 2006/08/02 H.Kawato Mod

								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCodeDesc%.2d%.2d',
															[nPosition + 1, nRow])).AsString	:= strDescription;
							end;
						end
						else
						begin
							NCodeWork	:= 0;
                            strHojCodeWork := '';

							case (m_arCodeAttributePrint [nPosition].nMasterDivision) of
								MASTER_SECTION	:
                                begin
                                    // 部門
                                    NCodeWork	   := FieldByName ('BmnNCode').AsFloat;
                                    strHojCodeWork := FieldByName ('BmnGCode').AsString;
                                end;
								else
								begin
                                    // ｾｸﾞﾒﾝﾄ
                        			if ((m_arCodeAttributePrint [nPosition].nMasterDivision >= 101)  and
                                        (m_arCodeAttributePrint [nPosition].nMasterDivision <= 110)) then

                                    begin
                                        NCodeWork	   := FieldByName ('SegNCode').AsFloat;
                                        strHojCodeWork := FieldByName ('SegGCode').AsString;
                                    end;

                                    // 第一補助
// <224> MOD-STR
//									if	(m_arCodeAttributePrint [nPosition].nMasterDivision = FieldByName ('HojKbn1').AsInteger) then
									if	(m_arCodeAttributePrint [nPosition].nMasterDivision = FieldByName ('HojKbn1').AsInteger) or
										((m_arCodeAttributePrint [nPosition].nMasterDivision in [22..24]) and (FieldByName ('HojKbn1').AsInteger = 22)) then
// <224> MOD-END
                                    begin
                						fnCheckValidHojCode2 (FieldByName ('HojKbn1').AsInteger, FieldByName ('Hoj1NCode').AsFloat, strDescription, strGCode); // <107>
										NCodeWork	   := FieldByName ('Hoj1NCode').AsFloat;
                                        strHojCodeWork := strGCode;
                                    end;

                                    // 第二補助
// <224> MOD-STR
//									if  (m_arCodeAttributePrint [nPosition].nMasterDivision = FieldByName ('HojKbn2').AsInteger) then
									if  (m_arCodeAttributePrint [nPosition].nMasterDivision = FieldByName ('HojKbn2').AsInteger) or
										((m_arCodeAttributePrint [nPosition].nMasterDivision in [22..24]) and (FieldByName ('HojKbn2').AsInteger = 22)) then
// <224> MOD-END
                                    begin
                						fnCheckValidHojCode2 (FieldByName ('HojKbn2').AsInteger, FieldByName ('Hoj2NCode').AsFloat, strDescription, strGCode); // <107>
										NCodeWork	   := FieldByName ('Hoj2NCode').AsFloat;
                                        strHojCodeWork := strGCode;
                                    end;

                                    // <120>
                                    // 工事/ﾌﾟﾛｼﾞｪｸﾄ
                        			if ((m_arCodeAttributePrint [nPosition].nMasterDivision >= 201)  and
                                        (m_arCodeAttributePrint [nPosition].nMasterDivision <= 210)) then

                                    begin
                                        NCodeWork	   := FieldByName ('KojNCode').AsFloat;
                                        strHojCodeWork := FieldByName ('KojGCode').AsString;
                                    end;

// <150> 2006/11/02 H.Kawato Add Start
                                    // 工種/ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
                        			if ((m_arCodeAttributePrint [nPosition].nMasterDivision >= 301)  and
                                        (m_arCodeAttributePrint [nPosition].nMasterDivision <= 310)) then
                                    begin
                                        NCodeWork	   := FieldByName ('KsyNCode').AsFloat;
                                        strHojCodeWork := FieldByName ('KsyGCode').AsString;
                                    end;
// <150> 2006/11/02 H.Kawato Add End

								end;
							end;

							if	( NCodeWork = 0 ) then
							begin
								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCode%.2d%.2d'    , [nPosition + 1, nRow])).Clear ();
								CmnMemDataPrintDetail.FieldByName (Format ('strOffsetHojCodeDesc%.2d%.2d', [nPosition + 1, nRow])).Clear ();
							end
							else
							begin

								fnCheckValidHojCode (m_arCodeAttributePrint [nPosition].nMasterDivision,
																NCodeWork, strDescription, OPTION_GENERAL);

								if	(m_arCodeAttributePrint [nPosition].nAttribute <= 1) then
								begin
									case (m_arCodeAttributePrint [nPosition].nAttribute) of
										0:	strFormat	:= '%'  + IntToStr (m_arCodeAttributePrint [nPosition].nDigit) + 'd';
										1:	strFormat	:= '%.' + IntToStr (m_arCodeAttributePrint [nPosition].nDigit) + 'd';
									end;

									strHojCodeWork	:= Format (strFormat, [StrToInt64 (Trim (strHojCodeWork))]);
								end;

								CmnMemDataPrintDetail.FieldByName (Format (
										'strOffsetHojCode%.2d%.2d'    , [nPosition + 1, nRow])).AsString	:= strHojCodeWork;
								CmnMemDataPrintDetail.FieldByName (Format (
										'strOffsetHojCodeDesc%.2d%.2d', [nPosition + 1, nRow])).AsString	:= strDescription;
							end;
						end;
					end;

					if	(FieldByName ('FeeTaxCd').IsNull) then
						CmnMemDataPrintDetail.FieldByName (Format ('nOffsetTaxCode%.2d', [nRow])).Clear ()
					else
						CmnMemDataPrintDetail.FieldByName (Format ('nOffsetTaxCode%.2d', [nRow])).AsInteger	:= FieldByName ('FeeTaxCd').AsInteger;

// <#TAX10> ADD-STR
					if	(FieldByName ('FeeTaxCd').IsNull) then
                    begin
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxCodePrt%.2d', [nRow])).Clear;
                    end
                    else
					begin
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxCodePrt%.2d', [nRow])).AsString := 
							GetPrintTaxCode(False, m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(FieldByName('FeeTaxRt').AsInteger)), FieldByName('FeeTaxCd').AsInteger, m_TaxRateInfo.Mark);
					end;
// <#TAX10> ADD-END

					if	(FieldByName ('FeeTaxRt').IsNull) then
// <#TAX10> MOD-STR
//						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).Clear ()
                    begin
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).Clear ();
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRatePrt%.2d',  [nRow])).Clear ();
                    end
// <#TAX10> MOD-END
// <TX26> ADD-STR
        			else if ((FieldByName('FeeTaxCd').AsInteger = 30) or (FieldByName('FeeTaxCd').AsInteger = 40)) then
// <TX26> ADD-END
					else
					begin
// <TX26> MOD-STR
//						case (FieldByName ('FeeTaxRt').AsInteger) of
//							0:		CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString	:= '標準税率';
//							1:		CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString	:= '３．０％';
//							2:		CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString	:= '５．０％';
//							else	CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString	:= '';
//						end;
// <#TAX10> MOD-STR
//                        CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString := m_TaxRateInfo.GetTaxNameByRateCD(FieldByName ('FeeTaxRt').AsInteger);
						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString := m_TaxRateInfoFront.GetTaxNameByRateCD(m_nTaxKbn, 
																																						  FieldbyName ('FeeTaxCd').AsInteger, 
																																						  FieldByName ('FeeTaxRt').AsInteger);

						CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRatePrt%.2d' , [nRow])).AsString := GetPrintTaxRate(FieldByName ('FeeTaxCd').AsInteger,
																																	CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString,
																																	m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(FieldByName ('FeeTaxRt').AsInteger)),
																																	CmnMemDataPrintDetail.FieldByName (Format ('strOffsetTaxRateDesc%.2d', [nRow])).AsString);
// <#TAX10> MOD-END
// <TX26> MOD-END
					end;

					CmnMemDataPrintDetail.FieldByName (Format ('nOffsetPrice%.2d', [nRow])).AsCurrency	:= FieldByName ('SousaiKin').AsCurrency;
				end;
			end;

			NEXT;
		end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

end;

procedure TJNTCRP004006f.fnGetHojyoMA(dqMasterData: TMQuery);
var
    i       : Integer;
    nCount  : Integer;
    nMstKbn : Integer;

begin

    // 科目別の第一、第二補助を取得 <107>
    nCount        := 0;
    MASTER_HOJYO1 := 0;
    MASTER_HOJYO2 := 0;

	with (dqMasterData) do
	begin
        // 銀行ﾁｪｯｸ
        nMstKbn := MASTER_BANK;
        if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
           (FieldByName ('BankUse').AsInteger = 1)                                 then
        begin
            nCount := nCount + 1;
            case nCount of
                1:MASTER_HOJYO1 := nMstKbn;
                2:MASTER_HOJYO2 := nMstKbn;
            end;
        end;

        // 取引先ﾁｪｯｸ
        nMstKbn := MASTER_CUSTOMER;
        if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
           (FieldByName ('ToriUse').AsInteger <> 0)                                then
        begin
            nCount := nCount + 1;
            case nCount of
                1:MASTER_HOJYO1 := FieldByName ('ToriUse').AsInteger;
                2:MASTER_HOJYO2 := FieldByName ('ToriUse').AsInteger;
            end;
        end;

        // 社員ﾁｪｯｸ
        nMstKbn := MASTER_STAFF;
        if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
           (FieldByName ('ShainUse').AsInteger = 1)                                then
        begin
            nCount := nCount + 1;
            case nCount of
                1:MASTER_HOJYO1 := nMstKbn;
                2:MASTER_HOJYO2 := nMstKbn;
            end;
        end;

        // 汎用補助1～5
        for i := MASTER_GENERAL01 to MASTER_GENERAL05 do
        begin
            nMstKbn := i;
            if (AnsiPos(IntToStr(nMstKbn) + '|', m_sUseString) <> 0) and (nCount <= 2) and
               (FieldByName ('HojyoUse' + IntToStr(i - 30)).AsInteger = 1)             then
            begin
                nCount := nCount + 1;
                case nCount of
                    1:MASTER_HOJYO1 := nMstKbn;
                    2:MASTER_HOJYO2 := nMstKbn;
                end;
            end;
        end;
    end;

end;

//-----------------------------------------------------------------------------
// BChangeClick()   <111>
//  < 切出・埋込処理 >
//      PARAM   : Sender : TObject
//      VAR     :
//      RETURN  :
//      MEMO    :
//-----------------------------------------------------------------------------
procedure TJNTCRP004006f.BChangeClick(Sender: TObject);
var
	wkParam : TAppParam;
    lvRect  : TRect;
    lvWidth,
    lvHeight: Integer;
begin

    // ここでActiveControlをｾｯﾄする。
    m_cACControl    :=  Screen.ActiveControl;

    m_bBtnChange := FALSE;

    if ( B_Change.Caption = '埋込(&G)' ) then
    begin
        // 親画面への設定
        wkParam.iAction     :=  ACTID_DOCKINGINEND;         // 格納通知
        B_Change.Caption    := '切出(&G)';                  // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end
    else
    begin
		Visible             :=	FALSE;
        // 現在のｸﾗｲｱﾝﾄ領域を取得し幅と高さを取得
        lvRect              :=  Self.ClientRect;
        lvWidth             :=  lvRect.Right - lvRect.Left;
        lvHeight            :=  lvRect.Bottom - lvRect.Top;

        ClientWidth         :=  lvWidth;
        ClientHeight        :=  lvHeight;
		Visible		        :=	TRUE;

        // 親画面への設定
        wkParam.iAction     :=  ACTID_DOCKINGOUTEND;        // 取出通知
        B_Change.Caption    :=  '埋込(&G)';                 // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end;

    wkParam.pRecord         :=  Pointer(m_Base_pRec);       // 管理構造体ﾎﾟｲﾝﾀ設定
    wkParam.pActionParam    :=  nil;                        // 予備ﾎﾟｲﾝﾀ設定
    TMjsAppRecord(m_Base_pRec^).m_pOwnerEntry(@wkParam);

    m_bBtnChange := TRUE;

end;

// <128> 2006/04/20 H.Kawato Add
//******************************************************************************
//*		Proccess	:	進捗連動 変更項目チェック関数
//*		Name		:	H.Kawato(MSI)
//*		Date		:	20036/04/20
//*		Parameter	:	なし
//*		Return		:
//*		History		:
//******************************************************************************
function TJNTCRP004006f.fnPayProgRendoCheck :Boolean;
var
    nItems  : Integer;  // <170> 2007/12/13 H.Kawato Add
	nAreaNo	: Integer;  // <170> 2007/12/13 H.Kawato Add
	nFieldID: Integer;  // <170> 2007/12/13 H.Kawato Add
begin
// <170> 2007/12/13 H.Kawato Mod Start
{
    if PCheckItemRec (m_cCheckItems.Items [3])^.fChangeData or          // 査定方法
       PCheckItemRec (m_cCheckItems.Items [4])^.fChangeData or          // 分解ﾊﾟﾀｰﾝ
       PCheckItemRec (m_cCheckItems.Items [7])^.fChangeData or          // 分解方法
       PCheckItemRec (m_cCheckItems.Items [8])^.fChangeData or          // ① 支払方法
       PCheckItemRec (m_cCheckItems.Items [9])^.fChangeData or          // ① 分解基準値
       PCheckItemRec (m_cCheckItems.Items [10])^.fChangeData or         // ① 支払最低額
       PCheckItemRec (m_cCheckItems.Items [11])^.fChangeData or         // ① 端数処理額
       PCheckItemRec (m_cCheckItems.Items [12])^.fChangeData or         // ① 端数処理方法
       PCheckItemRec (m_cCheckItems.Items [13])^.fChangeData or         // ② 支払方法
       PCheckItemRec (m_cCheckItems.Items [14])^.fChangeData or         // ② 分解基準値
       PCheckItemRec (m_cCheckItems.Items [15])^.fChangeData or         // ② 支払最低額
       PCheckItemRec (m_cCheckItems.Items [16])^.fChangeData or         // ② 端数処理額
       PCheckItemRec (m_cCheckItems.Items [17])^.fChangeData or         // ② 端数処理方法
       PCheckItemRec (m_cCheckItems.Items [18])^.fChangeData or         // ③ 支払方法
       PCheckItemRec (m_cCheckItems.Items [19])^.fChangeData or         // ③ 分解基準値
       PCheckItemRec (m_cCheckItems.Items [20])^.fChangeData or         // ③ 支払最低額
       PCheckItemRec (m_cCheckItems.Items [21])^.fChangeData or         // ③ 端数処理額
       PCheckItemRec (m_cCheckItems.Items [22])^.fChangeData or         // ③ 端数処理方法
       PCheckItemRec (m_cCheckItems.Items [23])^.fChangeData or         // ④ 支払方法
       PCheckItemRec (m_cCheckItems.Items [24])^.fChangeData or         // ④ 分解基準値
       PCheckItemRec (m_cCheckItems.Items [25])^.fChangeData or         // ④ 支払最低額
       PCheckItemRec (m_cCheckItems.Items [26])^.fChangeData or         // ④ 端数処理額
       PCheckItemRec (m_cCheckItems.Items [27])^.fChangeData or         // ④ 端数処理方法
       PCheckItemRec (m_cCheckItems.Items [28])^.fChangeData or         // ⑤ 支払方法
       PCheckItemRec (m_cCheckItems.Items [29])^.fChangeData or         // ⑤ 分解基準値
       PCheckItemRec (m_cCheckItems.Items [30])^.fChangeData or         // ⑤ 支払最低額
       PCheckItemRec (m_cCheckItems.Items [31])^.fChangeData or         // ⑤ 端数処理額
       PCheckItemRec (m_cCheckItems.Items [32])^.fChangeData or         // ⑤ 端数処理方法
       PCheckItemRec (m_cCheckItems.Items [34])^.fChangeData or         // 優先支払方法
       PCheckItemRec (m_cCheckItems.Items [35])^.fChangeData or         // 振込依頼口座ｺｰﾄﾞ
       PCheckItemRec (m_cCheckItems.Items [49])^.fChangeData or         // 手数料負担
       PCheckItemRec (m_cCheckItems.Items [50])^.fChangeData or         // 手数料計算区分
       PCheckItemRec (m_cCheckItems.Items [51])^.fChangeData or         // 振込方法
       PCheckItemRec (m_cCheckItems.Items [52])^.fChangeData or         // 口座自動引落区分
       PCheckItemRec (m_cCheckItems.Items [53])^.fChangeData or         // 自動引落支払ﾃﾞｰﾀ
       PCheckItemRec (m_cCheckItems.Items [54])^.fChangeData or         // 期日指定振込依頼口座ｺｰﾄﾞ
       PCheckItemRec (m_cCheckItems.Items [68])^.fChangeData or         // 手数料負担
       PCheckItemRec (m_cCheckItems.Items [69])^.fChangeData or         // 手数料計算区分
       PCheckItemRec (m_cCheckItems.Items [70])^.fChangeData or         // 振込方法
       PCheckItemRec (m_cCheckItems.Items [72])^.fChangeData or         // 手形依頼口座ｺｰﾄﾞ
       PCheckItemRec (m_cCheckItems.Items [75])^.fChangeData or         // 手形郵送区分
       PCheckItemRec (m_cCheckItems.Items [76])^.fChangeData or         // 郵送料負担区分
       PCheckItemRec (m_cCheckItems.Items [77])^.fChangeData or         // 小切手依頼口座ｺｰﾄﾞ
       PCheckItemRec (m_cCheckItems.Items [78])^.fChangeData or         // 小切手郵送区分
       PCheckItemRec (m_cCheckItems.Items [79])^.fChangeData then       // 郵送料負担区分
    begin
        m_ProgRendoFlg := True;
    end;
}
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
	    nAreaNo		:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID / 1000);
        nFieldID	:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID mod 1000);

        if	(nAreaNo = 0) then
        begin
            if	(nFieldID in [
                                  11,           // 査定方法
                                  17,           // 次回繰越額計算区分
                                  18,           // 次回繰越額計算値
                                  12])  then    // 分解ﾊﾟﾀｰﾝ
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
                	Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 1) then
        begin
            if	(nFieldID in [
                                   1,           // 分解方法
                                   2,           // ① 支払方法
                                   3,           // ① 分解基準値
                                   4,           // ① 支払最低額
                                   5,           // ① 端数処理額
                                   6,           // ① 端数処理方法
                                   7,           // ② 支払方法
                                   8,           // ② 分解基準値
                                   9,           // ② 支払最低額
                                  10,           // ② 端数処理額
                                  11,           // ② 端数処理方法
                                  12,           // ③ 支払方法
                                  13,           // ③ 分解基準値
                                  14,           // ③ 支払最低額
                                  15,           // ③ 端数処理額
                                  16,           // ③ 端数処理方法
                                  17,           // ④ 支払方法
                                  18,           // ④ 分解基準値
                                  19,           // ④ 支払最低額
                                  20,           // ④ 端数処理額
                                  21,           // ④ 端数処理方法
                                  22,           // ⑤ 支払方法
                                  23,           // ⑤ 分解基準値
                                  24,           // ⑤ 支払最低額
                                  25,           // ⑤ 端数処理額
                                  26,           // ⑤ 端数処理方法
                                  30])  then    // 優先支払方法
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
            	    Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 2) then
        begin
		    if	(nFieldID in [
                                   1,           // 振込依頼口座ｺｰﾄﾞ
                                  15,           // 手数料負担
                                  16,           // 手数料計算区分
                                  17,           // 振込方法
                                  18,           // 口座自動引落区分
                                  19])  then    // 自動引落支払ﾃﾞｰﾀ
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
                	Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 3) then
        begin
		    if	(nFieldID in [
                                   1,           // 期日指定振込依頼口座ｺｰﾄﾞ
                                  15,           // 手数料負担
                                  16,           // 手数料計算区分
                                  17])  then    // 振込方法
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
                	Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 4) then
        begin
// <211> MOD-STR
{		    if	(nFieldID in [
                                   1,           // 手形依頼口座ｺｰﾄﾞ
                                   4,           // 手形郵送区分
                                   5,           // 郵送料負担区分
                                   6,           // 小切手依頼口座ｺｰﾄﾞ
                                   7,           // 小切手郵送区分
                                   8])  then    // 郵送料負担区分
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
                	Break;
                end;
            end;}
		    if	(nFieldID in [
                                   1,           // 手形依頼口座ｺｰﾄﾞ
                                   4,           // 手形郵送区分
                                   5,           // 手形郵送料負担区分
                                   6,           // 電子債権採用区分
                                  16,           // 電債手数料負担
                                  17])  then    // 電債手数料計算区分
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
                	Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 8) then
        begin
		    if	(nFieldID in [
                                   1,           // 小切手依頼口座ｺｰﾄﾞ
                                   2,           // 小切手郵送区分
                                   3])  then    // 小切手郵送料負担区分
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoFlg := True;
                	Break;
                end;
            end;
// <211> MOD-END
        end;
	end;
// <170> 2007/12/13 H.Kawato Mod End

// <136> 2006/06/21 H.Kawato Add Start
    if (m_bSousaiChgFlg = True) then
        m_ProgRendoFlg := True;
// <136> 2006/06/21 H.Kawato Add End

// <182> ADD-STR
// <211> MOD-STR
//	for	nItems := 1 to 4 do
    for nItems := Low(m_arModifyFlg) to High(m_arModifyFlg) do
// <211> MOD-END
	begin
        m_arModifyFlg[nItems] := False;
    end;

    if (m_ProgRendoFlg = False) then
    begin
// <211> MOD-STR
//      for	nItems := 1 to 4 do
        for nItems := Low(m_arModifyFlg) to High(m_arModifyFlg) do
// <211> MOD-END
        begin
            m_arModifyFlg[nItems] := bIsModify(nItems);
        end;
    end;
// <182> ADD-END

    Result := m_ProgRendoFlg;
end;
// <128> 2006/04/20 H.Kawato Add
// <222> ADD start
//******************************************************************************
//*		Proccess	:	外貨債務進捗連動 変更項目チェック関数
//*		Name		:	K.Kato(PRIME)
//*		Date		:	2013/12/10
//*		Parameter	:	なし
//*		Return		:	True: 連動する/False: 連動しない
//*		History		:
//******************************************************************************
function TJNTCRP004006f.fnPayProgRendoCheckG() :Boolean;
var
    nItems  : Integer;
	nAreaNo	: Integer;
	nFieldID: Integer;
begin
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
	    nAreaNo		:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID / 1000);
        nFieldID	:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID mod 1000);

        if	(nAreaNo = 9) then				// 電信送金情報
        begin
            if	(nFieldID in [
                                   1,           // 依頼口座コード
                                   2,           // 手数料口座コード
                                   3,           // 手数料負担
                                   4])  then    // 手数料計算区分
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoGFlg := True;
                	Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 10) then				// 為替手形／送金小切手情報
        begin
            if	(nFieldID in [
                                   1,           // 支払口座コード
                                   2,           // 依頼口座コード
                                   3])  then    // 手数料口座コード
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    m_ProgRendoGFlg := True;
            	    Break;
                end;
            end;
        end;
	end;

    m_bModifyGaikaFlg := False;

    if (m_ProgRendoGFlg = False) then
    begin
    	if bIsModify(9) or bIsModify(10) then
        begin
	        m_bModifyGaikaFlg := True;
        end
        else
        begin
			m_bModifyGaikaFlg := False;
        end;
    end;

    Result := m_ProgRendoGFlg;
end;
// <222> ADD end
// <132> 2006/06/15 H.Kawato Add
//******************************************************************************
//*		Proccess	:	期日満期データチェック関数
//*		Name		:	H.Kawato(MSI)
//*		Date		:	20036/06/15
//*		Parameter	:	なし
//*		Return		:   True : 更新する
//*                     False: 更新しない
//*		History		:
//******************************************************************************
function TJNTCRP004006f.fnCheckPayKijituMankiData ():Boolean;
var
//    dqMasterData    : TMQuery;    // <161> Del
    fReturn         : Boolean;
    strHojCode      : String;
    nNCode          : Extended;
    nRow            : Integer;
    lvKojiNCD       : Extended;     // <149> Add
    lvKosyuNCD      : Extended;     // <149> Add
	nItems          : Integer;      // <170> 2007/12/13 H.Kawato Add
	nAreaNo	        : Integer;      // <170> 2007/12/13 H.Kawato Add
	nFieldID        : Integer;      // <170> 2007/12/13 H.Kawato Add
    fChangeData     : Boolean;      // <170> 2007/12/13 H.Kawato Add 支払方法編集ﾌﾗｸﾞ

begin
    Result := True;

    fChangeData := False;           // <170> 2007/12/13 H.Kawato Add

//    if (CmnTabInformations.Items.Selected <> 0) then  // 基本情報タブが選択されていなければチェックしない
//        Exit;

    if (m_bBunkaiChgFlg = True) then                    // 分解方法が変更された時
    begin
        m_bBunkaiChgFlg := False;
        Exit;
    end;

// <170> 2007/12/13 H.Kawato Mod Start
(*
// <149> 2006/10/11 H.Kawato Mod Start
{
    if not (PCheckItemRec (m_cCheckItems.Items [7])^.fChangeData or             // ① 支払方法
            PCheckItemRec (m_cCheckItems.Items [12])^.fChangeData or            // ② 支払方法
            PCheckItemRec (m_cCheckItems.Items [17])^.fChangeData or            // ③ 支払方法
            PCheckItemRec (m_cCheckItems.Items [22])^.fChangeData or            // ④ 支払方法
            PCheckItemRec (m_cCheckItems.Items [27])^.fChangeData) then         // ⑤ 支払方法
}
    if not (PCheckItemRec (m_cCheckItems.Items [8])^.fChangeData or             // ① 支払方法
            PCheckItemRec (m_cCheckItems.Items [13])^.fChangeData or            // ② 支払方法
            PCheckItemRec (m_cCheckItems.Items [18])^.fChangeData or            // ③ 支払方法
            PCheckItemRec (m_cCheckItems.Items [23])^.fChangeData or            // ④ 支払方法
            PCheckItemRec (m_cCheckItems.Items [28])^.fChangeData) then         // ⑤ 支払方法 
// <149> 2006/10/11 H.Kawato Mod End
       Exit;
*)
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		nAreaNo		:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID / 1000);
		nFieldID	:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID mod 1000);

        if	(nAreaNo = 1) then
        begin
            if	(nFieldID in [ 2, 7, 12, 17, 22]) then  // ①②③④⑤ 支払方法
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    fChangeData := True;                // 支払方法変更あり
                    Break;
                end;
            end;
        end;
	end;

    if  (fChangeData = False) then                      // 支払方法に変更なし
        Exit;
// <170> 2007/12/13 H.Kawato Mod End

    if (m_iKijituUpdateFlg = 2) then                    // 期日指定振込不採用了承済みの時
        Exit;

    if (m_bKijituMankiFlg = False) then                 // 変更前に期日指定振込を採用していない時
        Exit;

    for	nRow := 1 to 5 do                               // 変更後に期日指定振込を採用している時
    begin
        if (TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2 + ((nRow - 1) * 5)]))).AsInteger = 2) then
            Exit;
    end;

    if	(m_nCurCodeAttribute <= 1) then
        strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
    else
        strHojCode	:= CmnEdit00001HojCodeFree.Text;

    nNCode	        := fnGetNCODE(strHojCode);                                  // 取引先内部コード

// <149> 2006/10/11 H.Kawato Add Start
    lvKojiNCD   := 0;
    lvKosyuNCD  := 0;

    if (CmnEdit00014KojiCodeNumeric.Text <> '') or (CmnEdit00014KojiCodeFree.Text <> '') then
        fnGetPrjNCode (lvKojiNCD, lvKosyuNCD);                                  // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得
// <149> 2006/10/11 H.Kawato Add End

// <161> 2007/07/06 H.Kawato Mod Start
{
	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

    fReturn	:= True;

	with (dqMasterData) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('SELECT * FROM PayKijituMankiData ');
		SQL.Add   ('WHERE SystemCode = 1 '            );
		SQL.Add   ('AND MankiSyoKbn  = 0 '            );
        SQL.Add   ('AND PayNCode     = :PayNCode '    );
// <149> 2006/10/11 H.Kawato Add Start
		SQL.Add   ('AND PrjNCode     = :PrjNCode '    );
        SQL.Add   ('AND PjSubNCode   = :PjSubNCode '  );
// <149> 2006/10/11 H.Kawato Add End

		ParamByName ('PayNCode'  ).Value	:= nNCODE;
// <149> 2006/10/11 H.Kawato Add Start
		ParamByName ('PrjNCode'  ).Value	:= lvKojiNCD;
        ParamByName ('PjSubNCode').Value	:= lvKosyuNCD;
// <149> 2006/10/11 H.Kawato Add End

		Open ();

		if (not EOF) then
            fReturn	:= False;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
}
    fReturn := fnChkPayKijituMankiData(nNCODE, lvKojiNCD, lvKosyuNCD);
// <161> 2007/07/06 H.Kawato Mod End

    if (fReturn = False) then                               // 未処理の期日満期データがある時
    begin
        fReturn	:= True;

// <211> MOD-STR
//      if (CmnTabInformations.Items.Selected <> 0) then    // 基本情報タブが選択されていない時
//          CmnTabInformations.Items.Selected := 0;
        if (CmnTabInformations.Items.Selected <> TI_PAYWAY) then    // 基本情報タブが選択されていない時
            CmnTabInformations.Items.Selected := TI_PAYWAY;
// <211> MOD-END

        if	(MJSMessageBoxEx (Self,_MessageDec03, '確認', mjWarning, mjYesNo, mjDefNo) = mrNo) then
        begin
            m_cACControl        := TMNumEdit (MJSFindCtrl (Self, Format (_PayCol [1], [2])));
            m_iKijituUpdateFlg  := 3;
            fReturn := False;
        end
        else
            m_iKijituUpdateFlg  := 2;
    end;

    Result	:= fReturn;
end;
// <132> 2006/06/15 H.Kawato Add

// <137> 2006/06/28 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
function TJNTCRP004006f.fnGetPayBaseInfo ():Boolean;
var
	dqMasterInfo: TMQuery;

begin
	dqMasterInfo	:= TMQuery.Create (Self);									// MQueryの構築
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterInfo);					// DBとMQueryの接続

	with (dqMasterInfo) do
	begin
		Close ();

		SQL.Clear ();
// <222> MOD start
//		SQL.Add   ('SELECT ItemID, DataNum FROM PayBaseInfo ');
		SQL.Add   ('SELECT SystemCode, ItemID, DataNum FROM PayBaseInfo ');
// <222> MOD end
// <149> 2006/10/11 H.Kawato Mod
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (4004, 4005) ');
// <156> 2007/02/08 H.Kawato Mod
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (4004, 4005, 4021, 4022, 4023) ');
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (1103, 1104, 4004, 4005, 4021, 4022, 4023) ');
// <214> MOD-STR
//		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (1103, 1104, 4002, 4004, 4005, 4021, 4022, 4023) ');     // <169> Mod
// <222> MOD start
(*
		SQL.Add	  ('WHERE SystemCode = 1 AND ItemID IN (1103, 1104, 4002, 4004, 4005, 4021, 4022, 4023' +
                                                     ', 2801' +     // 電子記録債権採用区分
                                                       ') ');
*)
		SQL.Add	  ('WHERE (SystemCode = 1 AND ItemID IN (1103, 1104, 4002, 4004, 4005, 4021, 4022, 4023' +
                                                     ', 2801' +     // 電子記録債権採用区分
                                                       ')) or ' +
						'(SystemCode = 3 AND ItemID = 4101)' +     // 外貨債務管理採用区分
                                                       ' ');
// <222> MOD end
// <214> MOD-END

        m_iErUseKbn := 0;                   // 電子記録債権採用区分 <214> ADD

		Open ();

		while (not EOF) do
		begin
// <222> ADD start
			// 外貨債務管理
		  	if FieldByName ('SystemCode').AsInteger = 3 then
            begin
                m_iGaikaUseKbn := FieldByName ('DataNum').AsInteger;	// 外貨債務管理採用区分
            end
            // 債務管理
            else
            begin
// <222> ADD end
                case (FieldByName ('ItemID').AsInteger) of
                    1103 : m_iBmnAssAdopt	:= FieldByName ('DataNum').AsInteger;	// 部門別査定採用区分           // <156> Add
                    1104 : m_iKmkAssAdopt	:= FieldByName ('DataNum').AsInteger;	// 科目別査定採用区分           // <156> Add
                    4002 : m_iVerData       := FieldByName ('DataNum').AsInteger;	// 債務データバージョン         // <169> Add
                    4004 : m_iHeikouData	:= FieldByName ('DataNum').AsInteger;	// 平行支払採用区分
                    4005 : m_iHeikouCount	:= FieldbyName ('DataNum').AsInteger;	// 平行支払処理件数
                    4021 : m_iProAdoptKbn	:= FieldbyName ('DataNum').AsInteger;	// ﾌﾟﾛｼﾞｪｸﾄ別支払採用区分       // <149> Add
                    4022 : m_iProjectKbn	:= FieldbyName ('DataNum').AsInteger;	// ﾌﾟﾛｼﾞｪｸﾄ区分                 // <149> Add
                    4023 : m_iSubAdoptKbn	:= FieldbyName ('DataNum').AsInteger;	// ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ別支払採用区分    // <149> Add
                    2801 : m_iErUseKbn      := FieldbyName ('DataNum').AsInteger;   // 電子記録債権採用区分 <214> ADD
                end;
// <222> ADD start
            end;
// <222> ADD end
            next;
		end;
	end;

	dqMasterInfo.Close ();
	dqMasterInfo.Free  ();

    Result := True;
end;
// <137> 2006/06/28 H.Kawato Add End

// <149> 2006/10/11 H.Kawato Add Start
//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnProjectChangeOver                                                            */
//*																											*/
//*	目的	: 支払情報登録処理 ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ入力可不可制御                                          */
//*																											*/
//*	戻り値	: Boolean                                                                                       */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnProjectChangeOver(cControl: TObject): Boolean;
var
    strHojCode  : String;
    sKojiName   : String;
    nKojiNCode  : Extended;

begin
    Result          := TRUE;
    strHojCode      := '';
    sKojiName       := '';
    nKojiNCode      := 0;
    
    m_ProgRendoFlg  := False;
    m_ProgRendoGFlg	:= False;				// <222> ADD

    if (Copy(TWinControl (cControl).Name,1,20) = 'CmnEdit00014KojiCode') then
    begin
        if (CmnEdit00014KojiCodeNumeric.Text <> '') or (CmnEdit00014KojiCodeFree.Text <> '') then
        begin
            if	(CmnEdit00014KojiCodeNumeric.Visible = True) then
            	strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (FloatToStr(CmnEdit00014KojiCodeNumeric.Value)))])
            else
            	strHojCode	:= Trim(CmnEdit00014KojiCodeFree.Text);

            // プロジェクトコード手入力チェック
            if (not fnHojyMAInputCheck(strHojCode, m_iProjectKbn, nKojiNCode, sKojiName)) then
            begin
                CmnLabel00015KojiCodeDesc.Caption   := sKojiName;               // 工事名称のセット

                Result := False;
                Exit;
            end
            else
            begin
                CmnLabel00015KojiCodeDesc.Caption   := sKojiName;               // 工事名称のセット
                CmnLabelPrjDetail.Caption   := '【プロジェクト別】';            // ﾗﾍﾞﾙ名称のセット
                fnChkSubProjectEnabled (True, nKojiNCode);

                //外貨関係ﾊﾟｰﾂEnable制御(電信送金、為替手形／送金小切手ﾀﾌﾞ無効)
                fnChangeConditionGaikaParts({IsEachProject}True);	//<222-6>ADD
            end;
        end
        else
        begin
            CmnLabelPrjDetail.Caption   := '【標準】';                          // ﾗﾍﾞﾙ名称のセット
            CmnLabel00015KojiCodeDesc.Caption   := '';                          // 工事名称のクリア
            fnChkSubProjectEnabled (False, 0);                                  // 工種情報のクリア

            //外貨関係ﾊﾟｰﾂEnable制御(電信送金、為替手形／送金小切手ﾀﾌﾞ有効)
            fnChangeConditionGaikaParts({IsEachProject}False);	//<222-6>ADD
        end;

        // 該当情報をセット
        m_bShowPrjInfo  := True;
        fnShowScreenInformations;                   // データ表示
        m_bShowPrjInfo  := False;

        fnSetChangeFlagCheckItems (cControl, TRUE);

// <197> ADD-STR
        // 期日前支払区分
        if (StrToInt('0' + GetPayCommonValue('Shiharai', 'RISOKU_CALC')) <> 0) then
        begin
            if (CmnLabelPrjDetail.Caption = '【標準】') then
                MPanelKijitsuMae.Visible := True
            else
                MPanelKijitsuMae.Visible := False;
        end;
// <197> ADD-END
        
        Exit;
    end;

    if (Copy(TWinControl (cControl).Name,1,21) = 'CmnEdit00016KosyuCode') then
    begin
        if (CmnEdit00016KosyuCodeNumeric.Text <> '') or (CmnEdit00016KosyuCodeFree.Text <> '') then
        begin
            if	(CmnEdit00016KosyuCodeNumeric.Visible = True) then
            	strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (FloatToStr(CmnEdit00016KosyuCodeNumeric.Value)))])
            else
            	strHojCode	:= Trim(CmnEdit00016KosyuCodeFree.Text);

            // プロジェクトサブコード手入力チェック
            if (not fnKosyuCodeInputCheck(strHojCode)) then
            begin
                Result := False;
                Exit;
            end
            else
                CmnLabelPrjDetail.Caption   := '【プロジェクトサブ別】';        // ﾗﾍﾞﾙ名称のセット
        end
        else
        begin
            // 入力値のクリア
            CmnEdit00016KosyuCodeFree.Text          := '';                      // 工種コード(文字)
            CmnEdit00016KosyuCodeNumeric.Value      := 0;                       // 工種コード(数値)
            CmnLabel00017KosyuCodeDesc.Caption      := '';                      // 工種名称
            CmnLabelPrjDetail.Caption   := '【プロジェクト別】';                // ﾗﾍﾞﾙ名称のセット
        end;

        // 該当情報をセット
        m_bShowPrjInfo  := True;
        fnShowScreenInformations;                       // データ表示
        m_bShowPrjInfo  := False;

        fnSetChangeFlagCheckItems (cControl, TRUE);

// <197> ADD-STR
        // 期日前支払区分
        if (StrToInt('0' + GetPayCommonValue('Shiharai', 'RISOKU_CALC')) <> 0) then
        begin
            if (CmnLabelPrjDetail.Caption = '【標準】') then
                MPanelKijitsuMae.Visible := True
            else
                MPanelKijitsuMae.Visible := False;
        end;
// <197> ADD-END

        Exit;
    end;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnChkProjectEnabled (bChecked: Boolean)                                        */
//*																											*/
//*	目的	: 支払情報登録処理 ﾌﾟﾛｼﾞｪｸﾄ別支払   ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ 入力可不可制御                                 */
//*																											*/
//*	戻り値	: Boolean                                      		                                            */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnChkProjectEnabled (bChecked: Boolean):Boolean;
var
    strFormat   : String;

begin
    Result  := False;

    // 入力値のクリア
    CmnLabelKojiCode.Caption                := '';                              // 工事 ﾌﾟﾛｼﾞｪｸﾄ名称
    CmnEdit00014KojiCodeFree.Text           := '';                              // 工事コード(文字)
    CmnEdit00014KojiCodeNumeric.Value       := 0;                               // 工事コード(数値)
    CmnLabel00015KojiCodeDesc.Caption       := '';                              // 工事名称
    CmnLabelKosyuCode.Caption               := '';                              // 工種 ﾌﾟﾛｼﾞｪｸﾄ名称
    CmnEdit00016KosyuCodeFree.Text          := '';                              // 工種コード(文字)
    CmnEdit00016KosyuCodeNumeric.Value      := 0;                               // 工種コード(数値)
    CmnLabel00017KosyuCodeDesc.Caption      := '';                              // 工種名称

    // Enabledの初期化
    CmnLabelKojiCode.Enabled                := False;                           // 工事 ﾌﾟﾛｼﾞｪｸﾄ名称
    CmnEdit00014KojiCodeFree.Enabled        := False;                           // 工事コード(文字)
    CmnEdit00014KojiCodeNumeric.Enabled     := False;                           // 工事コード(数値)
    CmnLabel00015KojiCodeDesc.Enabled       := False;                           // 工事名称
    CmnLabelKosyuCode.Enabled               := False;                           // 工種 ﾌﾟﾛｼﾞｪｸﾄ名称
    CmnEdit00016KosyuCodeFree.Enabled       := False;                           // 工種コード(文字)
    CmnEdit00016KosyuCodeNumeric.Enabled    := False;                           // 工種コード(数値)
    CmnLabel00017KosyuCodeDesc.Enabled      := False;                           // 工種名称

    CmnLabelKosyuCode.Visible               := False;                           // 工種 ﾌﾟﾛｼﾞｪｸﾄ名称※プロジェクトサブ未対応の為、VisibleにFalseを設定
    CmnEdit00016KosyuCodeFree.Visible       := False;                           // 工種コード(文字) ※プロジェクトサブ未対応の為、VisibleにFalseを設定
    CmnEdit00016KosyuCodeNumeric.Visible    := False;                           // 工種コード(数値) ※プロジェクトサブ未対応の為、VisibleにFalseを設定
    CmnLabel00017KosyuCodeDesc.Visible      := False;                           // 工種名称         ※プロジェクトサブ未対応の為、VisibleにFalseを設定

    CmnPanelInformations.Enabled            := True;                            // 支払情報パネル使用可能 <164> Add
    CmnPanelButtons.Enabled                 := True;                            // 更新ボタン使用可能     <164> Add

    // プロジェクトコードの入力可不可チェック
    if (bChecked = True) then
    begin
        CmnPanelInformations.Enabled        := False;                           // 支払情報パネル使用不可 <164> Add
        CmnPanelButtons.Enabled             := False;                           // 更新ボタン使用不可     <164> Add
//        if (m_arAdoptInfo[36].nAdoption = 1) then
//        begin
            if (m_arAdoptInfo [36].nCodeAttribute <= 1) then
            begin
                CmnEdit00014KojiCodeFree.Enabled    := False;                   // 工事コード(文字)
                CmnEdit00014KojiCodeFree.Visible    := False;
                CmnEdit00014KojiCodeNumeric.Enabled := True;                    // 工事コード(数値)
                CmnEdit00014KojiCodeNumeric.Visible := True;

                if	(m_arAdoptInfo [36].nCodeAttribute = 1) then
                	strFormat	:= StringOfChar ('0', m_arAdoptInfo [36].nCodeDigit)
                else
                	strFormat	:= '';

                CmnEdit00014KojiCodeNumeric.FormatStr	:= strFormat;

                CmnEdit00014KojiCodeNumeric.Digits      := m_arAdoptInfo [36].nCodeDigit;
                CmnEdit00014KojiCodeNumeric.MaxValue	:= StrToInt64 (StringOfChar ('9', m_arAdoptInfo [36].nCodeDigit));
            end
            else
            begin
                CmnEdit00014KojiCodeFree.Enabled    := True;                    // 工事コード(文字)
                CmnEdit00014KojiCodeFree.Visible    := True;
                CmnEdit00014KojiCodeNumeric.Enabled := False;                   // 工事コード(数値)
                CmnEdit00014KojiCodeNumeric.Visible := False;

        		CmnEdit00014KojiCodeFree.MaxLength	:= m_arAdoptInfo[36].nCodeDigit;
            end;

            CmnLabelKojiCode.Caption    := m_arAdoptInfo[36].strDescription;    // 工事 ﾌﾟﾛｼﾞｪｸﾄ名称
            CmnLabelKojiCode.Enabled    := True;                                // 使用可

            if (m_iSubAdoptKbn = 1) then
            begin
                CmnLabelKosyuCode.Caption   := m_arAdoptInfo[37].strDescription;// 工種 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
                CmnLabelKosyuCode.Enabled   := True;                            // 使用可
// 2006/12/13 H.Kawato Add  ※プロジェクトサブ未対応の為、仮設定
                CmnLabelKosyuCode.Visible               := True;                // 工種 ﾌﾟﾛｼﾞｪｸﾄ名称
                CmnEdit00016KosyuCodeFree.Visible       := True;                // 工種コード(文字)
                CmnEdit00016KosyuCodeNumeric.Visible    := True;                // 工種コード(数値)
                CmnLabel00017KosyuCodeDesc.Visible      := True;                // 工種名称
            end
            else
            begin
                CmnLabelKosyuCode.Visible               := False;               // 工種 ﾌﾟﾛｼﾞｪｸﾄ名称
                CmnEdit00016KosyuCodeFree.Visible       := False;               // 工種コード(文字)
                CmnEdit00016KosyuCodeNumeric.Visible    := False;               // 工種コード(数値)
                CmnLabel00017KosyuCodeDesc.Visible      := False;               // 工種名称
// 2006/12/13 H.Kawato Add
            end;

            CmnLabel00015KojiCodeDesc.Enabled   := True;                        // 工事名称

            Result  := True;
//        end;
    end;

    // ゼロ入力制御
    if ( m_arAdoptInfo[36].nAdoption <> 2 ) then                                // ﾌﾟﾛｼﾞｪｸﾄ
    begin
        if ( CmnEdit00014KojiCodeNumeric.InputFlag = FALSE ) then
            CmnEdit00014KojiCodeNumeric.Zero    :=  TRUE
        else
            CmnEdit00014KojiCodeNumeric.Zero    :=  FALSE;
    end
    else
    begin
        CmnEdit00014KojiCodeFree.Zero   := FALSE;
    end;

    if ( m_arAdoptInfo[37].nAdoption <> 2 ) then                                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
    begin
        if ( CmnEdit00016KosyuCodeNumeric.InputFlag = FALSE ) then
            CmnEdit00016KosyuCodeNumeric.Zero   :=  TRUE
        else
            CmnEdit00016KosyuCodeNumeric.Zero   :=  FALSE;
    end
    else
    begin
        CmnEdit00016KosyuCodeFree.Zero  := FALSE;
    end;

    CmnEdit00014KojiCodeNumeric.InputFlag   := True;
    CmnEdit00016KosyuCodeNumeric.InputFlag  := True;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnHojyMAInputCheck                                                             */
//*           (strHojCode: String; iMasterKbn: Integer; var nNCode: Extended; var sSimpleName: String)      */
//*																											*/
//*	目的	: 支払情報登録処理 ﾌﾟﾛｼﾞｪｸﾄｺｰﾄﾞ   入力値ﾁｪｯｸ                                                    */
//*																											*/
//*	戻り値	: Boolean (TRUE:入力可 FALSE:入力不可)         		                                            */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnHojyMAInputCheck (strHojCode: String; iMasterKbn: Integer;
                                                var nNCode: Extended; var sSimpleName: String):Boolean;
var
   	dqMasterData    : TMQuery;
    strSQL          : String;

begin
    Result  := False;

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

    strSQL  := '';
    strSQL  := strSQL + 'SELECT SimpleName, NCode FROM HojyoMA ';
    strSQL  := strSQL + 'WHERE RDelKbn = 0 ';
    strSQL  := strSQL + 'AND SumKbn = 0 ';
    strSQL  := strSQL + 'AND MasterKbn = ' + IntToStr(iMasterKbn) + ' ';
    strSQL  := strSQL + 'AND GCode = ' + AnsiQuotedStr(strHojCode, '''');

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   (strSQL);
		Open ();

		if (not EOF) then
        begin
            sSimpleName := FieldByName('SimpleName').AsString;
            nNCode      := FieldByName('NCode').AsFloat;
            Result      := True;
        end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnChkSubProjectEnabled (bChecked: Boolean; nKojiNCode: Extended)               */
//*																											*/
//*	目的	: 支払情報登録処理 ﾌﾟﾛｼﾞｪｸﾄ別支払   ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ入力可不可制御                               */
//*																											*/
//*	戻り値	: Boolean                                      		                                            */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnChkSubProjectEnabled (bChecked: Boolean; nKojiNCode: Extended):Boolean;
var
    strFormat   : String;
    iPartKbn    : Integer;

begin
    Result      := False;

    iPartKbn    := 0;

    // 入力値のクリア
//    CmnLabelKosyuCode.Caption               := '';                              // 工種 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
    CmnEdit00016KosyuCodeFree.Text          := '';                              // 工種コード(文字)
    CmnEdit00016KosyuCodeNumeric.Value      := 0;                               // 工種コード(数値)
    CmnLabel00017KosyuCodeDesc.Caption      := '';                              // 工種名称

    // Enabledの初期化
//    CmnLabelKosyuCode.Enabled               := False;                           // 工種 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
    CmnEdit00016KosyuCodeFree.Enabled       := False;                           // 工種コード(文字)
    CmnEdit00016KosyuCodeNumeric.Enabled    := False;                           // 工種コード(数値)
    CmnLabel00017KosyuCodeDesc.Enabled      := False;                           // 工種名称

    CmnEdit00016KosyuCodeFree.Visible       := False;                           // 工種コード(文字) ※プロジェクトサブ未対応の為、VisibleにFalseを設定
    CmnEdit00016KosyuCodeNumeric.Visible    := False;                           // 工種コード(数値) ※プロジェクトサブ未対応の為、VisibleにFalseを設定
    CmnLabel00017KosyuCodeDesc.Visible      := False;                           // 工種名称         ※プロジェクトサブ未対応の為、VisibleにFalseを設定

    // 入力可不可チェック
//    if (bChecked = True) and (m_arAdoptInfo[37].nAdoption = 1) then
    if (bChecked = True) and (m_iSubAdoptKbn = 1) then
    begin
        if (fnKojiInfoCheck(nKojiNCode, m_iProjectKbn, iPartKbn)) then
        begin
            if (m_arAdoptInfo[37].nCodeAttribute <= 1) then
            begin
                CmnEdit00016KosyuCodeFree.Enabled    := False;                  // 工種コード(文字)
                CmnEdit00016KosyuCodeFree.Visible    := False;
                CmnEdit00016KosyuCodeNumeric.Enabled := True;                   // 工種コード(数値)
                CmnEdit00016KosyuCodeNumeric.Visible := True;

                if	(m_arAdoptInfo[37].nCodeAttribute = 1) then
                	strFormat	:= StringOfChar ('0', m_arAdoptInfo[37].nCodeDigit)
                else
                	strFormat	:= '';

                CmnEdit00016KosyuCodeNumeric.FormatStr	:= strFormat;

                CmnEdit00016KosyuCodeNumeric.Digits     := m_arAdoptInfo[37].nCodeDigit;
                CmnEdit00016KosyuCodeNumeric.MaxValue	:= StrToInt64 (StringOfChar ('9', m_arAdoptInfo [37].nCodeDigit));
            end
            else
            begin
                CmnEdit00016KosyuCodeFree.Enabled    := True;                   // 工種コード(文字)
                CmnEdit00016KosyuCodeFree.Visible    := True;
                CmnEdit00016KosyuCodeNumeric.Enabled := False;                  // 工種コード(数値)
                CmnEdit00016KosyuCodeNumeric.Visible := False;

            	CmnEdit00016KosyuCodeFree.MaxLength	:= m_arAdoptInfo[37].nCodeDigit;
            end;

//            CmnLabelKosyuCode.Caption   := m_arAdoptInfo[37].strDescription;    // 工種 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ名称
//            CmnLabelKosyuCode.Enabled   := True;                                // 使用可

            CmnLabel00017KosyuCodeDesc.Enabled   := True;                       // 工種名称
            CmnLabel00017KosyuCodeDesc.Visible   := True;                       // 工種名称 ※プロジェクトサブ未対応の為、仮設定
            Result  := True;
        end;
    end;

    // ゼロ入力制御
    if ( m_arAdoptInfo[37].nAdoption <> 2 ) then                                // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ
    begin
        if ( CmnEdit00016KosyuCodeNumeric.InputFlag = FALSE ) then
            CmnEdit00016KosyuCodeNumeric.Zero   :=  TRUE
        else
            CmnEdit00016KosyuCodeNumeric.Zero   :=  FALSE;
    end
    else
    begin
        CmnEdit00016KosyuCodeFree.Zero      := FALSE;
    end;

    CmnEdit00016KosyuCodeNumeric.InputFlag  := True;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnKojiInfoCheck                                                                */
//*	          (nKojiNCode: Extended; iMasterKbn: Integer; var iPartKbn: Integer)                            */
//*																											*/
//*	目的	: 支払情報登録処理 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ KojiInfoﾁｪｯｸ                                                 */
//*																											*/
//*	戻り値	: Boolean (TRUE:入力可 FALSE:入力不可)         		                                            */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnKojiInfoCheck (nKojiNCode: Extended; iMasterKbn: Integer; var iPartKbn: Integer):Boolean;
var
   	dqMasterData    : TMQuery;
    strSQL          : String;

begin
    Result  := False;

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					// DBとMQueryの接続

    strSQL  := '';
    strSQL  := strSQL + 'SELECT PartKbn FROM KojiInfo ';
    strSQL  := strSQL + 'WHERE MasterKbn = ' + IntToStr(iMasterKbn) + ' ';
    strSQL  := strSQL + 'AND NCode = ' + FloatToStr(nKojiNCode);

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   (strSQL);
		Open ();

		if (not EOF) then
        begin
            iPartKbn := FieldByName('PartKbn').AsInteger;

            if (iPartKbn <> 0) then
                Result   := True;
        end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnGetPayPtnNo (nNCode: Extended)                                               */
//*																											*/
//*	目的	: 支払情報ﾃﾞｰﾀ表示 条件ﾊﾟﾀｰﾝNo  ﾁｪｯｸ                                                            */
//*																											*/
//*	戻り値	: nPayPtnNo (ﾃﾞｰﾀ検索用条件ﾊﾟﾀｰﾝNo)         		                                            */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnGetPayPtnNo (nNCode: Extended):Extended;
var
	dqMasterData: TMQuery;
    lvKojiNCD   : Extended;
    lvKosyuNCD  : Extended;
    strSQL      : String;
    nPayPtnNo   : Extended;

begin
    nPayPtnNo   := 0;

	dqMasterData	:= TMQuery.Create (self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);					        // DBとMQueryの接続

	with (dqMasterData) do
	begin
        if (CmnEdit00014KojiCodeNumeric.Text <> '') or (CmnEdit00014KojiCodeFree.Text <> '') then
        begin
            lvKojiNCD   := 0;
            lvKosyuNCD  := 0;

            fnGetPrjNCode (lvKojiNCD, lvKosyuNCD);                                      // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得

            strSQL  := '';
            strSQL  := strSQL + 'SELECT PayPtnNo FROM PayPtnInfo ';
            strSQL	:= strSQL + 'WHERE PjSubNCode = ' + FloatToStr(lvKosyuNCD) + ' ';   // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞ
            strSQL	:= strSQL + 'AND PrjNCode = ' +  FloatToStr(lvKojiNCD) + ' ';       // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ
            strSQL	:= strSQL + 'AND BmnNCode = 0 ';                                    // 部門内部ｺｰﾄﾞ
            strSQL	:= strSQL + 'AND PayNCode = ' +  FloatToStr(nNCODE) + ' ';          // 取引先内部ｺｰﾄﾞ
            strSQL	:= strSQL + 'AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';   // マスタ区分
            strSQL	:= strSQL + 'AND RDelKbn = 0 ';                                     // 削除区分 <161> Add

            Close ();
            SQL.Clear ();
            SQL.Add   (strSQL);
            Open ();

            if (not EOF) then
            begin
                if (FieldByName ('PayPtnNo').AsFloat > 1) then
                    nPayPtnNo   := FieldByName ('PayPtnNo').AsFloat
                else
                    nPayPtnNo   := -1;
            end
            else    nPayPtnNo   := -1;                                                  // 新規追加
        end
        else
        begin
            strSQL  := '';
            strSQL  := strSQL + 'SELECT PayPtnNo FROM PayPtnInfo ';
            strSQL	:= strSQL + 'WHERE PayPtnNo = 1 ';                                  // 条件ﾊﾟﾀｰﾝNo
            strSQL	:= strSQL + 'AND PayNCode = ' +  FloatToStr(nNCODE) + ' ';          // 取引先内部ｺｰﾄﾞ
            strSQL	:= strSQL + 'AND MasterKbn = ' + IntToStr(MASTER_CUSTOMER) + ' ';   // マスタ区分
            strSQL	:= strSQL + 'AND RDelKbn = 0 ';                                     // 削除区分 <161> Add

            Close ();
            SQL.Clear ();
            SQL.Add   (strSQL);
            Open ();

            if (not EOF) then   nPayPtnNo   := 1;                                       // 標準情報登録あり
        end;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();

    Result  := nPayPtnNo;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnGetPrjNCode (var lvKojiNCD, lvKosyuNCD: Extended)                            */
//*																											*/
//*	目的	: 支払情報  ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得                                         */
//*																											*/
//*	戻り値	: Boolean                                                                                       */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnGetPrjNCode (var lvKojiNCD, lvKosyuNCD: Extended):Boolean;
var
    strHojCode  : String;
    sKojiName   : String;
    sKosyuName  : String;

begin
    sKojiName   := '';
    sKosyuName  := '';

    if	(CmnEdit00014KojiCodeNumeric.Visible = True) then
    	strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (FloatToStr(CmnEdit00014KojiCodeNumeric.Value)))])
    else
    	strHojCode	:= Trim(CmnEdit00014KojiCodeFree.Text);

    fnHojyMAInputCheck(strHojCode, m_iProjectKbn, lvKojiNCD, sKojiName);        // ﾌﾟﾛｼﾞｪｸﾄ内部ｺｰﾄﾞの取得

    if	(CmnEdit00016KosyuCodeNumeric.Visible = True) then
    begin
        if (CmnEdit00016KosyuCodeNumeric.Text <> '') then
        	strHojCode	:= Format ('%.16d', [StrToInt64 (Trim (FloatToStr(CmnEdit00016KosyuCodeNumeric.Value)))])
        else
            strHojCode  := '0';
    end
    else
    	strHojCode	:= Trim(CmnEdit00016KosyuCodeFree.Text);

    fnHojyMAInputCheck(strHojCode, m_iSubProjKbn, lvKosyuNCD, sKosyuName);      // ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得

    Result  := True;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnKosyuCodeInputCheck (strHojCode: String)                                     */
//*																											*/
//*	目的	: 支払情報登録処理 ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞｺｰﾄﾞ   入力値ﾁｪｯｸ                                                 */
//*																											*/
//*	戻り値	: Boolean (TRUE:入力可 FALSE:入力不可)         		                                            */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnKosyuCodeInputCheck (strHojCode: String):Boolean;
var
   	dqMasterData    : TMQuery;
    strSQL          : String;
    iPartKbn        : Integer;
    nKojiNCode      : Extended;
    nKosyuNCode     : Extended;

begin
    Result      := False;

    iPartKbn    := 0;
    nKojiNCode  := 0;
    nKosyuNCode := 0;

    if (CmnEdit00014KojiCodeNumeric.Text <> '') or (CmnEdit00014KojiCodeFree.Text <> '') then
        fnGetPrjNCode (nKojiNCode, nKosyuNCode);                                // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得

    if (fnKojiInfoCheck(nKojiNCode, m_iProjectKbn, iPartKbn)) then              // 工種管理区分チェック
    begin
	    dqMasterData	:= TMQuery.Create (Self);
        m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);				// DBとMQueryの接続

        strSQL  := '';
        strSQL  := strSQL + 'SELECT SimpleName FROM HojyoMA ';
        strSQL  := strSQL + 'WHERE RDelKbn = 0 ';
        strSQL  := strSQL + 'AND SumKbn = 0 ';
        strSQL  := strSQL + 'AND MasterKbn = ' + IntToStr(m_iSubProjKbn) + ' ';
        strSQL  := strSQL + 'AND GCode = ' + AnsiQuotedStr(strHojCode, '''') + ' ';

        if (iPartKbn = 2) then
        begin
            strSQL  := strSQL + 'AND NCode in (';
            strSQL  := strSQL + ' SELECT KsyNCode FROM KousyuPtn';
            strSQL  := strSQL + ' INNER JOIN  KojiInfo';
            strSQL  := strSQL + ' ON KousyuPtn.PtnNCode = KojiInfo.PtnNCode';               // 工種パターンマスタ内部コード
            strSQL  := strSQL + ' AND KojiInfo.MasterKbn = ' + IntToStr(m_iProjectKbn);     // 工事マスタ区分
            strSQL  := strSQL + ' AND KojiInfo.NCode = ' + FloatToStr(nKojiNCode);          // 工事内部コード
            strSQL  := strSQL + ' WHERE KousyuPtn.MasterKbn = ' + IntToStr(m_iSubProjKbn);  // 工種マスタ区分
            strSQL  := strSQL + ' )';
        end;

        with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);
        	Open ();

        	if (not EOF) then
            begin
                CmnLabel00017KosyuCodeDesc.Caption   := FieldByName('SimpleName').AsString;
                Result      := True;
            end;
        end;

        dqMasterData.Close ();
        dqMasterData.Free  ();
    end;
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnLaunchDlgSyousai                                                             */
//*																											*/
//*	目的	: 支払情報登録処理 優先支払方法  詳細情報設定ダイアログ起動                                     */
//*																											*/
//*	戻り値	: Boolean                                                                                       */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnLaunchDlgSyousai(): Boolean;
var
	cDialogSyousai  : TJNTCRP0040064f;
    nRow            : Integer;
	sPayWay			: String;						// <189> Add
begin
	Result := True;

	// 詳細情報設定 ダイアログ起動
	try
		// ダイアログ 生成
		cDialogSyousai := TJNTCRP0040064f.fnCreateDialog(Pointer (m_pRec), Self, m_cDBSelect);
	except
		// ダイアログ 生成失敗
		Result := False;
		Exit;
	end;

// <157> 2007/02/13 H.Kawato Add Start
    if (CmnEdit01001DecDivision.Value = 1) then     // 分解方法「1: 定額」
        cDialogSyousai.Width    := 463
    else                                            // 分解方法「0: 比率」
        cDialogSyousai.Width    := 720;
// <157> 2007/02/13 H.Kawato Add End

// <189> Add ↓↓↓
	//格納した値と入力が違っている
	if (CmnEdit01030PriPayWayDivision.Value = m_nPriPayWay) then
	begin
// <189> Add ↑↑↑
    	// 詳細ダイアログの初期設定
	    for	nRow := 1 to 5 do
    	begin
	        cDialogSyousai.m_arSyousaiData[nRow].nEdaban        := m_arSyousaiData[nRow].nEdaban;
        	cDialogSyousai.m_arSyousaiData[nRow].nBaseKingaku   := m_arSyousaiData[nRow].nBaseKingaku;
    	    cDialogSyousai.m_arSyousaiData[nRow].nBaseHiritu    := m_arSyousaiData[nRow].nBaseHiritu;
	        cDialogSyousai.m_arSyousaiData[nRow].nHasuuKingaku  := m_arSyousaiData[nRow].nHasuuKingaku;
        	cDialogSyousai.m_arSyousaiData[nRow].nHasuuHou      := m_arSyousaiData[nRow].nHasuuHou;
    	    cDialogSyousai.m_arSyousaiData[nRow].nSite          := m_arSyousaiData[nRow].nSite;
	    end;
	end;													// <189> Add

    cDialogSyousai.m_cDecDivision   := CmnEdit01001DecDivision.Value;   // <157> 2007/02/13 H.Kawato Add
    cDialogSyousai.m_ZoomRatio      := m_ZoomRatio;                     // <157> 2007/02/13 H.Kawato Add
    cDialogSyousai.m_iPayWayLow		:= CmnEdit01030PriPayWayDivision.AsInteger;	// <189> Add

	// ダイアログをモーダル表示
	if	(cDialogSyousai.ShowModal () = mrCancel) then
	begin
    	CmnEdit01030PriPayWayDivision.Value     := m_nPriPayWay;

// <189> Add ↓↓↓
		case CmnEdit01030PriPayWayDivision.AsInteger of
			1:		sPayWay := '振込';
			2:		sPayWay := '期日指定振込';
			3:		sPayWay := '手形';
			4:		sPayWay := '小切手';
			5:		sPayWay := '現金';
			else	sPayWay := 'なし';
		end;
		CmnLabel01030PriPayWayDivisionDesc.Caption	:= sPayWay;
		if CmnEdit01030PriPayWayDivision.AsInteger = 0 then
			fnSetFncType(6, False)
		else
			fnSetFncType(6, True);
// <189> Add ↑↑↑

        if (m_nPriPayWay = 0) then
        begin
            // 詳細データ格納用配列の初期化
            for	nRow := 1 to 5 do
            begin
                m_arSyousaiData[nRow].nEdaban       := 0;
                m_arSyousaiData[nRow].nBaseKingaku  := 0;
                m_arSyousaiData[nRow].nBaseHiritu   := 0;
                m_arSyousaiData[nRow].nHasuuKingaku := 0;
                m_arSyousaiData[nRow].nHasuuHou     := 0;
                m_arSyousaiData[nRow].nSite         := 0;
            end;
        end;

		cDialogSyousai.Close ();
		cDialogSyousai.Free  ();
		Result	:= FALSE;
		MjsSetFocus(Self, CmnEdit01030PriPayWayDivision.Name);		// <189> Add
		Exit;
    end
    else
    begin
        // 詳細データ格納
        for	nRow := 1 to 5 do
        begin
            m_arSyousaiData[nRow].nEdaban       := cDialogSyousai.m_arSyousaiData[nRow].nEdaban;
            m_arSyousaiData[nRow].nBaseKingaku  := cDialogSyousai.m_arSyousaiData[nRow].nBaseKingaku;
            m_arSyousaiData[nRow].nBaseHiritu   := cDialogSyousai.m_arSyousaiData[nRow].nBaseHiritu;
            m_arSyousaiData[nRow].nHasuuKingaku := cDialogSyousai.m_arSyousaiData[nRow].nHasuuKingaku;
            m_arSyousaiData[nRow].nHasuuHou     := cDialogSyousai.m_arSyousaiData[nRow].nHasuuHou;
            m_arSyousaiData[nRow].nSite         := cDialogSyousai.m_arSyousaiData[nRow].nSite;
        end;

        if (cDialogSyousai.m_bProgRendoFlg = TRUE) then
            m_ProgRendoFlg  := TRUE;

        fnSetFncType(6,True);   // <154> 2007/02/06 H.Kawato Add

        CmnEdit01002PaymentColumnDivision.ArrowDisp     := adNone;

// <189> Mod ↓↓↓
//      CmnEdit01002PaymentColumnDivision.Value         := 3;
		CmnEdit01002PaymentColumnDivision.Value         := CmnEdit01030PriPayWayDivision.Value;
		case (CmnEdit01002PaymentColumnDivision.AsInteger) of
			1:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '振込';
			2:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '期日指定振込';
			3:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '手形';
			4:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '小切手';
			5:		CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '現金';
			else	CmnLabel01002PaymentColumnDivisionDesc.Caption	:= '';
		end;
// <189> Mod ↑↑↑
        CmnEdit01003PaymentColumnBasedValue.Value       := 0;
        CmnEdit01004PaymentColumnMinimumPrice.Value     := 0;
        CmnEdit01005PaymentColumnFractionPrice.Value    := 0;
        CmnEdit01006PaymentColumnFraction.Value         := 0;

        CmnEdit01002PaymentColumnDivision.ReadOnly      := TRUE;
        CmnEdit01003PaymentColumnBasedValue.ReadOnly    := TRUE;
        CmnEdit01004PaymentColumnMinimumPrice.ReadOnly  := TRUE;
        CmnEdit01005PaymentColumnFractionPrice.ReadOnly := TRUE;
        CmnEdit01006PaymentColumnFraction.ReadOnly      := TRUE;

        CmnEdit01002PaymentColumnDivision.TabStop       := FALSE;
        CmnEdit01003PaymentColumnBasedValue.TabStop     := FALSE;
        CmnEdit01004PaymentColumnMinimumPrice.TabStop   := FALSE;
        CmnEdit01005PaymentColumnFractionPrice.TabStop  := FALSE;
        CmnEdit01006PaymentColumnFraction.TabStop       := FALSE;

        m_nPriPayWay    := CmnEdit01030PriPayWayDivision.Value;
	end;

	cDialogSyousai.Close ();
	cDialogSyousai.Free  ();

// <189> Mod ↓↓↓
//	MjsSetFocus(Self, CmnEdit01030PriPayWayDivision.Name);		// <189> Add
	if CmnEdit01007PaymentColumnDivision.Enabled = False then
		CmnEdit01007PaymentColumnDivision.Enabled := True;    
	MjsSetFocus(Self, CmnEdit01007PaymentColumnDivision.Name);	// 支払方法へ
// <189> Mod ↑↑↑
end;

//***********************************************************************************************************/
//*																											*/
//*	関数	: TJNTCRP004006f.fnBunkaiPtnChange                                                              */
//*																											*/
//*	目的	: 支払情報登録処理 分解パターン 入力値変更処理                                                  */
//*																											*/
//*	戻り値	: Boolean                                                                                       */
//*																											*/
//***********************************************************************************************************/
function TJNTCRP004006f.fnBunkaiPtnChange(): Boolean;
var
    strDescription  : String;
begin
    Result  := True;

	fnGetDescriptionSelectedItem (CmnEdit00012DecPtnDivision, strDescription);
	CmnLabel00012DecPtnDivisionDesc.Caption	:= strDescription;
    
    if (m_iProAdoptKbn = 1) then        
    begin
        if (CmnEdit00012DecPtnDivision.Value = 0) or (m_nPayPtnNo2 = 0) then    // 分解ﾊﾟﾀｰﾝが標準、または標準情報の登録がない
        begin
            fnChkProjectEnabled(False);

            if (Trim(CmnLabelPrjDetail.Caption) <> '【標準】') then
            begin
                CmnLabelPrjDetail.Caption   := '【標準】';

                // 標準情報をセット
                m_bShowPrjInfo  := True;
                fnShowScreenInformations;   // データ表示
                m_bShowPrjInfo  := False;

                if (m_arAdoptInfo [36].nCodeAttribute <= 1) then
                    fnSetChangeFlagCheckItems (CmnEdit00014KojiCodeNumeric, TRUE)
                else
                    fnSetChangeFlagCheckItems (CmnEdit00014KojiCodeFree, TRUE);
            end;
        end
        else
            fnChkProjectEnabled(True);

        CmnLabelKojiCode.Caption    := m_arAdoptInfo[36].strDescription;
        CmnLabelKojiCode.Enabled                := True;
        CmnLabel00015KojiCodeDesc.Enabled       := True;
    end;

    m_bDecPtnChange := False;
end;
// <149> 2006/10/11 H.Kawato Add End

// <161> 2007/07/06 H.Kawato Add Start
//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDelPrjInfo (): Boolean;
var
    sPayName    : String;
    sPrjName    : String;
    strHojCode  : String;
    nPayNCode   : Extended;
    nPayPtnNo   : Extended;
    nPrjNCode   : Extended;
    nPjSubNCode : Extended;
begin
    Result      := True;

    nPrjNCode   := 0;
    nPjSubNCode := 0;

    if	(CmnPanelClientDetail.Visible) then
    begin
    	if	(m_nCurCodeAttribute <= 1) then
    		strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
    	else
    		strHojCode	:= CmnEdit00001HojCodeFree.Text;
    end
    else
    begin
    	Result	:= FALSE;
    	Exit;
    end;

    nPayNCode   := fnGetNCODE(strHojCode);  // 支払先内部コード
    nPayPtnNo   := m_nPayPtnNo2;            // 条件パターンNo

    if (CmnEdit00014KojiCodeNumeric.Text <> '') or (CmnEdit00014KojiCodeFree.Text <> '') then
        fnGetPrjNCode (nPrjNCode, nPjSubNCode);                                 // ﾌﾟﾛｼﾞｪｸﾄ・ﾌﾟﾛｼﾞｪｸﾄｻﾌﾞ内部ｺｰﾄﾞの取得

	if  MJSMessageBoxEx (Self,'プロジェクト別の支払情報を削除します。' + #13#10 + 'よろしいですか？',
                            '確認', mjWarning, mjYesNo, mjDefNo) = mrYes then
    begin
        // 支払データチェック
        if not fnChkPayWayData (nPayNCode, nPrjNCode, nPjSubNCode) then
        begin
            sPayName := CmnEdit00003Name.Text;
            sPrjName := CmnLabel00015KojiCodeDesc.Caption;
            MjsMessageBox(Self,sPayName + 'の' + sPrjName + 'は支払処理中のため削除できません。', mjWarning, mjDefOk);
        end
        else
        begin
            if not fnChkPayKijituMankiData(nPayNCode, nPrjNCode, nPjSubNCode) then  // 未処理の期日満期データがある時
            begin
                if	(MJSMessageBoxEx (Self,_MessageDec03, '確認', mjWarning, mjYesNo, mjDefNo) = mrNo) then
                begin
                    Result  := False;
                    Exit;
                end;
            end;

            // PayOffsetInfoの削除
            if not fnDeletePayOffsetInfo(nPayNCode, nPayPtnNo) then
            begin
                Result  := False;
                Exit;
            end;
            // PayDetailInfoの削除
            if not fnDeletePayDetailInfo(nPayNCode, nPayPtnNo) then
            begin
                Result  := False;
                Exit;
            end;
            // PayPtnDtlの削除
            if not fnDeletePayPtnDtl(nPayNCode, nPayPtnNo) then
            begin
                Result  := False;
                Exit;
            end;
            // PayPtnInfoの削除
            if not fnDeletePayPtnInfo(nPayNCode, nPayPtnNo) then
            begin
                Result  := False;
                Exit;
            end;
// <222> ADD start
            // PayVariableItemの削除
            if not fnDeletePayVariableItem(nPayNCode, nPayPtnNo) then
            begin
                Result  := False;
                Exit;
            end;
// <222> ADD end
            fnShowScreenInformations ();

// <202> ADD-STR
	        if (fnExistProjRecord(strHojCode) = False) then
    	    begin
        	    // プロジェクト別登録されていない場合は分解パターン選択可
	            CmnLabelDecPtnDivision.Enabled := True;
    	        CmnEdit00012DecPtnDivision.Enabled := True;
        	    CmnLabel00012DecPtnDivisionDesc.Enabled := True;
	        end;
// <202> ADD-END

            if	(m_arAdoptInfo [36].nCodeAttribute <= 1) then
                m_cACControl	:= CmnEdit00014KojiCodeNumeric
            else
                m_cACControl	:= CmnEdit00014KojiCodeFree;

// <195> ADD-STR
            if (CmnEdit00012DecPtnDivision.Value = 0) then
                m_cACControl	:= CmnEdit00012DecPtnDivision;
// <195> ADD-END

            m_cACControl.SetFocus ();
        end;
    end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnChkPayKijituMankiData (nPayNCode, nPrjNCode, nPjSubNCode: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'SELECT * FROM PayKijituMankiData ';
    strSQL  := strSQL + 'WHERE SystemCode = 1 ';
    strSQL  := strSQL + 'AND MankiSyoKbn  = 0 ';
    strSQL  := strSQL + 'AND PayNCode     = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND PrjNCode     = ' + FloatToStr(nPrjNCode) + ' ';
    strSQL  := strSQL + 'AND PjSubNCode   = ' + FloatToStr(nPjSubNCode) + ' ';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData);                 // DBとMQueryの接続

    try
	    with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);
        	Open ();

        	if (not EOF) then
                Result	:= False;
        end;
    finally
	    dqMasterData.Close ();
	    dqMasterData.Free  ();
    end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnChkPayWayData (nPayNCode, nPrjNCode, nPjSubNCode: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'SELECT 1 FROM PayWayData ';
    strSQL  := strSQL + 'WHERE PjSubNCode = ' + FloatToStr(nPjSubNCode) + ' ';
    strSQL  := strSQL + 'AND PrjNCode = ' + FloatToStr(nPrjNCode) + ' ';
    strSQL  := strSQL + 'AND BmnNCode = 0 ';
    strSQL  := strSQL + 'AND PayNCode = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND SystemCode = 1 ';
    strSQL  := strSQL + 'AND FuncNo in ( ';
    strSQL  := strSQL + ' SELECT FuncNo FROM PayActionInfo ';
    strSQL  := strSQL + ' WHERE SystemCode = 1 ';
    strSQL  := strSQL + ' AND Condition = 0)';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

	with (dqMasterData) do
	begin
		Close ();
		SQL.Clear ();
		SQL.Add   (strSQL);
		Open ();

        if (not EOF) then
            Result := False;
	end;

	dqMasterData.Close ();
	dqMasterData.Free  ();
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeletePayOffsetInfo (nPayNCode, nPayPtnNo: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'UPDATE PayOffsetInfo SET ';
	strSQL	:= strSQL + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>
    strSQL  := strSQL + 'RDelKbn = 1 ';
    strSQL  := strSQL + 'WHERE PayPtnNo = ' + FloatToStr(nPayPtnNo) + ' ';
    strSQL  := strSQL + 'AND PayNCode = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND MasterKbn = 22 ';
    strSQL  := strSQL + 'AND RDelKbn = 0 ';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

    try
	    with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);

        	if	(not ExecSQL ()) then
        	begin
        		m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
        		m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);
        		Result  := FALSE;
        		Exit;
        	end;
        end;
    finally
    	dqMasterData.Close ();
    	dqMasterData.Free  ();
    end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeletePayDetailInfo (nPayNCode, nPayPtnNo: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'UPDATE PayDetailInfo SET ';
	strSQL	:= strSQL + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>
    strSQL  := strSQL + 'RDelKbn = 1 ';
    strSQL  := strSQL + 'WHERE PayPtnNo = ' + FloatToStr(nPayPtnNo) + ' ';
    strSQL  := strSQL + 'AND PayNCode = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND MasterKbn = 22 ';
    strSQL  := strSQL + 'AND RDelKbn = 0 ';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

    try
	    with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);

        	if	(not ExecSQL ()) then
        	begin
        		m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
        		m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);
        		Result  := FALSE;
        		Exit;
        	end;
        end;
    finally
    	dqMasterData.Close ();
    	dqMasterData.Free  ();
    end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeletePayPtnDtl (nPayNCode, nPayPtnNo: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'UPDATE PayPtnDtl SET ';
	strSQL	:= strSQL + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>
    strSQL  := strSQL + 'RDelKbn = 1 ';
    strSQL  := strSQL + 'WHERE PayPtnNo = ' + FloatToStr(nPayPtnNo) + ' ';
    strSQL  := strSQL + 'AND PayNCode = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND MasterKbn = 22 ';
    strSQL  := strSQL + 'AND RDelKbn = 0 ';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

    try
	    with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);

        	if	(not ExecSQL ()) then
        	begin
        		m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
        		m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);
        		Result  := FALSE;
        		Exit;
        	end;
        end;
    finally
    	dqMasterData.Close ();
    	dqMasterData.Free  ();
    end;
end;

//***********************************************************************************************************/
//***********************************************************************************************************/
function	TJNTCRP004006f.fnDeletePayPtnInfo (nPayNCode, nPayPtnNo: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'UPDATE PayPtnInfo SET ';
	strSQL	:= strSQL + 'UpdTantoNCode = ' + FloatToStr(m_nTantoNCd) + ','; // <173>
    strSQL  := strSQL + 'RDelKbn = 1 ';
    strSQL  := strSQL + 'WHERE PayPtnNo = ' + FloatToStr(nPayPtnNo) + ' ';
    strSQL  := strSQL + 'AND PayNCode = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND MasterKbn = 22 ';
    strSQL  := strSQL + 'AND RDelKbn = 0 ';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

    try
	    with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);

        	if	(not ExecSQL ()) then
        	begin
        		m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
        		m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);
        		Result  := FALSE;
        		Exit;
        	end;
        end;
    finally
    	dqMasterData.Close ();
    	dqMasterData.Free  ();
    end;
end;
// <161> 2007/07/06 H.Kawato Add End
// <222> ADD start
//*****************************************************************************
//	Process			:	支払可変情報マスタの削除(指定した支払先・PayPtnNoに紐づくレコード全て)
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	nPayNCode	: 支払先内部コード
//					:	nPayPtnNo	: 条件パターンNo
//	Return			:	Boolean		: 正常 or 異常
//	History			:	YYYY/MM/DD
//*****************************************************************************
function	TJNTCRP004006f.fnDeletePayVariableItem (nPayNCode, nPayPtnNo: Extended): Boolean;
var
	dqMasterData : TMQuery;
    strSQL       : String;
begin
    Result  := True;

    strSQL  := '';
    strSQL  := strSQL + 'DELETE PayVariableItem ';
    strSQL  := strSQL + 'WHERE PayPtnNo = ' + FloatToStr(nPayPtnNo) + ' ';
    strSQL  := strSQL + 'AND PayNCode = ' + FloatToStr(nPayNCode) + ' ';
    strSQL  := strSQL + 'AND MasterKbn = 22 ';
    strSQL  := strSQL + 'AND RecSyubetu = 11 ';

	dqMasterData	:= TMQuery.Create (Self);
	m_cDataModule.SetDBInfoToQuery (m_cDBSelect, dqMasterData); // DBとMQueryの接続

    try
	    with (dqMasterData) do
        begin
        	Close ();
        	SQL.Clear ();
        	SQL.Add   (strSQL);

        	if	(not ExecSQL ()) then
        	begin
        		m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, dqMasterData);
        		m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (dqMasterData);
        		Result  := FALSE;
        		Exit;
        	end;
        end;
    finally
    	dqMasterData.Close ();
    	dqMasterData.Free  ();
    end;
end;
// <222> ADD end

//**********************************************************************
//	Proccess	:	ｾｯｼｮﾝ管理ｽﾄｱﾄﾞの実行	<172>
//	Name		:	T.Seki
//	Date		:	2008/02/01
//	Parameter	:	iSyori  0=設定 1=開放
//	Return		:	なし
//	History		:	9999/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**********************************************************************
procedure TJNTCRP004006f.SessionPractice(iSyori: Integer);
begin
												// 処理区分
	SPMsHist.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
	SPMsHist.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
	SPMsHist.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
												// 担当者名称
	SPMsHist.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
	SPMsHist.ParamByName('@pSysCode').AsInteger			:= m_pRec^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
	SPMsHist.ParamByName('@pOptCode').AsInteger			:= m_pRec^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
	SPMsHist.ParamByName('@pPrgCode').AsInteger			:= m_pRec^.m_iProgramCode;

	SPMsHist.Prepare;							// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
	SPMsHist.ExecProc;							// ｽﾄｱﾄﾞ実行
	SPMsHist.UnPrepare;							// ﾘｿｰｽを解放する

												// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	if	m_SyncMaster.m_flgGrpCorp = GRP_SYNC_CHILD then
	begin
												// 処理区分
		SPMsHistParent.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
		SPMsHistParent.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoNCD;
												// 担当者名称
		SPMsHistParent.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pRec^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pSysCode').AsInteger		:= m_pRec^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pOptCode').AsInteger		:= m_pRec^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
		SPMsHistParent.ParamByName('@pPrgCode').AsInteger		:= m_pRec^.m_iProgramCode;

		SPMsHistParent.Prepare;					// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
		SPMsHistParent.ExecProc;				// ｽﾄｱﾄﾞ実行
		SPMsHistParent.UnPrepare;				// ﾘｿｰｽを解放する
	end;
end;

// <182> ADD-STR
//******************************************************************************
//*		Proccess	:	支払項目変更チェック関数
//*		Name		:	T.SATOH(IDC)
//*		Date		:	2008/10/24
//*		Parameter	:	pAreaNo	    :   Integer
//*                                     1.振込、2.期日指定振込、3.手形、4.小切手
//*		Return		:
//*		History		:
//******************************************************************************
function TJNTCRP004006f.bIsModify(pAreaNo	: Integer) :Boolean;
var
    nItems  : Integer;
	nAreaNo	: Integer;
	nFieldID: Integer;
begin
    Result := False;

	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
	    nAreaNo		:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID / 1000);
        nFieldID	:= Trunc (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID mod 1000);

        if	(nAreaNo = 2) and (pAreaNo = 1) then    // 振込
        begin
            if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
            begin
                Result := True;
                Break;
            end;
        end
        else
        if	(nAreaNo = 3) and (pAreaNo = 2) then    // 期日指定振込
        begin
            if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
            begin
                Result := True;
                Break;
            end;
        end
        else
// <211> MOD-STR
{       if	(nAreaNo = 4) and (pAreaNo = 3) then    // 手形
        begin
		    if	(nFieldID in [     1,           // 手形依頼口座ｺｰﾄﾞ
                                   2,           // 手形サイト
                                   3,           // 手形分割枚数
                                   4,           // 手形郵送区分
                                   5])  then    // 郵送料負担区分
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    Result := True;
                	Break;
                end;
            end;
        end
        else
        if	(nAreaNo = 4) and (pAreaNo = 4) then    // 小切手
        begin
		    if	(nFieldID in [     6,           // 小切手依頼口座ｺｰﾄﾞ
                                   7,           // 小切手郵送区分
                                   8])  then    // 郵送料負担区分
            begin
                if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
                begin
                    Result := True;
                	Break;
                end;
            end;}
        if	(nAreaNo = 4) and ((pAreaNo = 3) or (pAreaNo = 5)) then // 手形・電子債権
        begin
            if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
            begin
                Result := True;
                Break;
            end;
        end
        else
        if	(nAreaNo = 5) and (pAreaNo = 4) then    // 小切手
        begin
            if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
            begin
                Result := True;
                Break;
            end;
// <211> MOD-END
// <222> ADD start
		end
        else if (nAreaNo = 9) and (pAreaNo = 9) then 	// 電信送金情報
        begin
        	if nFieldID = 5 then			// 可変項目情報はチェックしない
            begin
            	Continue;
            end;
            if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
            begin
                Result := True;
                Break;
            end;
        end
        else if (nAreaNo = 10) and (pAreaNo = 10) then	// 為替/小切手情報
        begin
            if  (PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData) then
            begin
                Result := True;
                Break;
            end;
// <222> ADD end
        end;
	end;
end;
// <182> ADD-END

// <184> ADD-STR
//-----------------------------------------------------------------------------
// fnCheckIsSpot()
//      PARAM   : CD    名寄せ外部ｺｰﾄﾞ
//      VAR     :
//      RETURN  : T : 存在する F: 存在しない
//      MEMO    : 名寄せ更新前処理
//-----------------------------------------------------------------------------
function TJNTCRP004006f.fnCheckIsSpot(sPayCD: String): Boolean;
var
    DmqData :   TMQuery;
    strSQL  :   String;
begin
	Result := FALSE;

	if ( m_nCurCodeAttribute <= 1 ) then
		sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);

    // スポット支払支払先として設定された支払先は名寄せ選択不可
    strSQL  := 'SELECT MT.NCode '
             + '  FROM PayBaseInfo PBI '
             + '  LEFT OUTER JOIN PayBaseInfo PBI2 '
             + '    ON PBI.SystemCode = PBI2.SystemCode '
             + '   AND PBI.ItemID + 1 = PBI2.ItemID '
             + '  LEFT OUTER JOIN MTOKUI MT '
             + '    ON MT.NCode = PBI2.DataNum '
             + '   AND MT.RDelKbn = 0 '
             + ' WHERE PBI.SystemCode = 1 '
             + '   AND PBI.ItemID = 4031 '
             + '   AND PBI.DataNum = 1 '
             + '   AND MT.GCode = ' + AnsiQuotedStr(sPayCD, '''') + ' ';

    // MQueryの構築
    DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

    try
    	with ( DmqData ) do
    	begin
    		Close();
    		SQL.Clear();
    		SQL.Add(strSQL);

    		if ( not Open () ) then
    		begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (DmqData);

                DmqData.Close();
                DmqData.Free();

    			Result := FALSE;
    			Exit;
    		end;

    		if ( EOF <> True ) then
    		begin
    			Result := True;
    		end;
    	end;
    finally
        DmqData.Free();
    end;
end;
// <184> ADD-END

// <194> ADD-STR
procedure TJNTCRP004006f.fnLaunchSwkAddDlg();
var
	cSender 	: TControl;
    cSwkAddDlg      : TMASPCBSwkAddDlgf;        // 付加情報入力ダイアログ
    rSwkAddDlgParam : TMASPCBSwkAddDlgParam;    // ダイアログパラメータ
    iLoop       : Integer;
	Dmq			: TMQuery;
    iSaiyo      : Integer;
    iCodeAttr   : Integer;
    iCodeDigit  : Integer;
//    sCode       : String;						// <222-3> DEL
    sTargetEdit : String;
    sDispGCode  : String;
    iPartKbn    : Integer;

    function GetMaster(iMasterKbn: Integer; nNCode: Currency; nCNCode: Currency = 0): Boolean;
    begin
        Result := False;

        sDispGCode := '';

        with Dmq do
        begin
            Close;
            SQL.Clear;
            ParamCheck := False;
            if (iMasterKbn = 2) then
            begin
                // 科目別補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM KmkMA' +
                        ' WHERE MasterKbn = 1' +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode) +
                        '   AND CNCode = 0');
            end
            else
            begin
                // その他補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM MasterInfo' +
                        ' WHERE MasterKbn = ' + IntToStr(iMasterKbn));
            end;
            Prepare;
            if Open then
            begin
                if (not Eof) then
                begin
                    iCodeAttr := FieldByName('CodeAttr').AsInteger;
                    iCodeDigit := FieldByName('CodeDigit').AsInteger;
                end
                else
                    Exit;
            end;

            Close;
            SQL.Clear;
            ParamCheck := False;
            if (iMasterKbn = 2) then
            begin
                // 科目別補助
                SQL.ADD('SELECT 2 MasterKbn, SubCode GCode, LongName, SimpleName' +
                        '  FROM KmkMA' +
                        ' WHERE MasterKbn = 2' +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode) +
                        '   AND CNCode = ' + FloatToStr(nCNCode));
            end
            else
            begin
                // その他補助
                SQL.ADD('SELECT MasterKbn, GCode, LongName, SimpleName' +
                        '  FROM MV_MAS_HojyoMA' +
                        ' WHERE MasterKbn = ' + IntToStr(iMasterKbn) +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode));
            end;
            Prepare;
            if Open then
            begin
                Result := (not Eof);

                if Result then
                begin
                    if (iCodeAttr = 0) then         // 数値
                        sDispGCode := FloatToStr(FieldByName('GCode').AsCurrency)
                    else if (iCodeAttr = 1) then    // 前０あり
                        sDispGCode := FormatCurr(StringOfChar('0', iCodeDigit), FieldByName('GCode').AsCurrency)
                    else
                        sDispGCode := FieldByName('GCode').AsString;
                end;
            end;
        end;
    end;

    function GetMasterInfo(iMasterKbn: Integer; nNCode: Currency = 0): Boolean;
    begin
        Result := False;

        with Dmq do
        begin
            Close;
            SQL.Clear;
            ParamCheck := False;
            if (iMasterKbn = 2) then
            begin
                // 科目別補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM KmkMA' +
                        ' WHERE MasterKbn = 1' +
                        '   AND SumKbn = 0' +
                        '   AND NCode = ' + FloatToStr(nNCode) +
                        '   AND CNCode = 0');
            end
            else
            begin
                // その他補助
                SQL.ADD('SELECT CodeDigit, CodeAttr' +
                        '  FROM MasterInfo' +
                        ' WHERE MasterKbn = ' + IntToStr(iMasterKbn));
            end;
            Prepare;
            if Open then
            begin
                Result := (not Eof);
            end;
        end;
    end;

    procedure SetNumEditProperty();
    begin
        if (Screen.ActiveControl is TMNumEdit) then
        begin
            with TMNumEdit(Screen.ActiveControl) do
            begin
                if (Value = 0) then
                begin
                    InputFlagenabled := True;
                    InputFlag := False;
                    Zero := True;
                end;
            end;
        end;
    end;

    function GetMasterDivision(): Integer;
    begin
        Result := -1;

        if (iSaiyo <= High(m_arCodeAttribute)) then
            Result := m_arCodeAttribute[iSaiyo].nMasterDivision;
    end;

    procedure SetNextFocus();
    begin
        if (m_arCodeAttribute[iSaiyo - 1].nAttribute <= 1) then
	        sTargetEdit := Format('CmnEdit05%.3dHojCodeNumeric', [iSaiyo + 2])
        else
	        sTargetEdit := Format('CmnEdit05%.3dHojCodeFree'   , [iSaiyo + 2]);

        Keybd_Event(VK_RETURN, 0, 0, 0);            //Enter ｷｰのｴﾐｭﾚｲﾄ

        try
            if (Screen.ActiveControl.Name <> sTargetEdit) then
                MjsNextCtrl(Self);
            if (Screen.ActiveControl.Name <> sTargetEdit) then
                MjsSetFocus(Self, sTargetEdit);
        except
//          on E: Exception do Application.Messagebox(PChar(IntToStr(m_arCodeAttribute[iSaiyo - 1].nMasterDivision) + '-' +
//                                                          IntToStr(m_arCodeAttribute[iSaiyo - 1].nAttribute) + '-' +
//                                                          sTargetEdit + '-' + Screen.ActiveControl.Name),'Message',MB_OK);
        end;
    end;

// <199> MOD-STR
//  procedure SetEditValue();
    procedure SetEditValue(iMasterKbn: Integer);
// <199> MOD-END
    var
        wMasterKbn  :   Integer;
        wName       :   String;
    begin
        if (Pos(UpperCase(sTargetEdit), UpperCase(Screen.ActiveControl.Name)) <> 0) then
        begin
// <199> ADD-STR
            wMasterKbn := 0;
            try
                wMasterKbn := Dmq.FieldByName('MasterKbn').AsInteger;
            except
            end;

            wName := '';
            if (wMasterKbn = iMasterKbn) then
            begin
                try
                    wName := Dmq.FieldByName('SimpleName').AsString;
                except
                end;
            end
            else
            begin
                sDispGCode := '';
            end;
// <199> ADD-END

            if (sDispGCode <> '') then
            begin
                if (Screen.ActiveControl is TMTxtEdit) then
                    TMTxtEdit(Screen.ActiveControl).Text := sDispGCode
                else if (Screen.ActiveControl is TMNumEdit) then
                    TMNumEdit(Screen.ActiveControl).Value := StrToFloat(sDispGCode);

                SetNumEditProperty();
            end
            else
            begin
                if (Screen.ActiveControl is TMTxtEdit) then
                    TMTxtEdit(Screen.ActiveControl).Text := ''
                else if (Screen.ActiveControl is TMNumEdit) then
                begin
                    with TMNumEdit(Screen.ActiveControl) do
                    begin
                        Value := 0;
                        Clear();
                        InputFlag := True;
                    end;
                end;
            end;

// <199> MOV-STR
{            wMasterKbn := 0;
            try
                wMasterKbn := Dmq.FieldByName('MasterKbn').AsInteger;
            except
            end;

            wName := '';
            if (wMasterKbn <> 0) then
            begin
                try
                    wName := Dmq.FieldByName('SimpleName').AsString;
                except
                end;
            end;}
// <199> MOV-END

            Application.ProcessMessages;
            TMTxtEdit(MJSFindCtrl(Self, Format('CmnEdit05%.3dHojCodeDesc', [iSaiyo + 2]))).Text := wName;
        end;
    end;
begin
    if MSPFunctionBar.GetFuncEnabled(8) then
    begin
        // 付加情報入力
        cSwkAddDlg := TMASPCBSwkAddDlgf.Create(Self);
        cSwkAddDlg.InitJ(pointer(m_pRec), rSwkAddDlgParam);

        cSender := Screen.ActiveControl;

        sDispGCode := '';

        with rSwkAddDlgParam, CmnMemDataOffset do
        begin
            iSaiyo := 0;

            // ダイアログパラメータ設定
            DCKbn := 1;

            // 科目内部コードは科目内部コードから取得
            KmkNCode := m_dSousaiNCode[0];

            // 部門内部コードは補助内部コードから取得
            if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_SECTION) then
            begin
                BmnNCode := m_dSousaiNCode[iSaiyo + 1];
                if (m_arCodeAttribute[iSaiyo].nUse <> 0) then
                    iSaiyo := iSaiyo + 1;
            end;

            // プロジェクト内部コードはプロジェクト内部コードから取得
            for iLoop := 1 to 10 do
            begin
                PrjNCode[iLoop] := FieldByName('dCPrjNCode' + IntToStr(iLoop)).AsCurrency;
            end;
            if (m_arCodeAttribute[iSaiyo].nMasterDivision in [201..210]) then
            begin
                // 但し、優先３項目に存在する場合は補助内部コードから取得
                PrjNCode[m_arCodeAttribute[iSaiyo].nMasterDivision - 200] := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;

            // プロジェクトサブ内部コードはプロジェクトサブ内部コードから取得
            for iLoop := 1 to 10 do
                PjSubNCode[iLoop] := FieldByName('dCPjSubNCode' + IntToStr(iLoop)).AsCurrency;
            if (301 <= m_arCodeAttribute[iSaiyo].nMasterDivision) and (m_arCodeAttribute[iSaiyo].nMasterDivision <= 310) then
            begin
                // 但し、優先３項目に存在する場合は補助内部コードから取得
                PjSubNCode[m_arCodeAttribute[iSaiyo].nMasterDivision - 300] := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;

            // 科目別補助内部コードは科目別補助内部コードから取得
            SubNCode    := FieldByName('dCSubNCode').AsCurrency;
            if (iSaiyo <= 2) and (GetMasterDivision() = MASTER_SUBJECTPLUS) then
            begin
                // 但し、優先３項目に存在する場合は補助内部コードから取得
                SubNCode    := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;

            // 銀行内部コードは採用を判断して補助内部コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() = MASTER_BANK) then
            begin
                BankNCode   := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;
            if (BankNCode = 0) then
                BankNCode   := FieldByName('dCBankNCode').AsCurrency;

            // 取引先内部コードは採用を判断して補助内部コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() in [MASTER_CUSTOMER..MASTER_CUSTOMERPLUS02]) then
            begin
                CsNCode := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;
            if (CsNCode = 0) then
                CsNCode := FieldByName('dCCsNCode').AsCurrency;

            // 社員内部コードは採用を判断して補助内部コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() = MASTER_STAFF) then
            begin
                EmpNCode   := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;
            if (EmpNCode = 0) then
                EmpNCode   := FieldByName('dCEmpNCode').AsCurrency;

            // 汎用補助内部コードは補助内部コードから取得
            for iLoop := 1 to 5 do
            begin
                MulNCode[iLoop] := FieldByName('dCMulNCode' + IntToStr(iLoop)).AsCurrency;
            end;
            // 但し、優先３項目に存在する場合は採用を判断して補助内部コードから取得
            if (iSaiyo <= 2) and (GetMasterDivision() in [MASTER_GENERAL01..MASTER_GENERAL05]) then
            begin
                MulNCode[GetMasterDivision() - 30] := m_dSousaiNCode[iSaiyo + 1];
                iSaiyo := iSaiyo + 1;
            end;

            // セグメント内部コードはセグメント内部コードから取得
            for iLoop := 1 to 10 do
            begin
                SegNCode[iLoop] := FieldByName('dCSegNCode' + IntToStr(iLoop)).AsCurrency;
            end;
            if (iSaiyo <= 2) and (GetMasterDivision() in [101..110]) then
            begin
                // 但し、優先３項目に存在する場合は補助内部コードから取得
                SegNCode[GetMasterDivision() - 100] := m_dSousaiNCode[iSaiyo + 1];
            end;
        end;

        if (cSwkAddDlg.DoDLG(rSwkAddDlgParam) = mrOk) then
        begin
            MjsSetFocus(Self, 'CmnEdit05002KmkCode');

            // ダイアログからの情報をMemDataへ優先順位を考慮してセット
            iSaiyo := 0;
            iCodeAttr := 0;
            iCodeDigit := 0;

            Dmq := TMQuery.Create( Self );							//	MQueryの構築
            try
                m_cDataModule.SetDBInfoToQuery( m_cDBSelect, Dmq );	//	DBとMQueryの接続

                with rSwkAddDlgParam, CmnMemDataOffset do
                begin
                    try
                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_SECTION) then
                        begin
                            // 部門採用あり
                            iSaiyo := iSaiyo + 1;

                            if (m_arCodeAttribute[iSaiyo - 1].nUse = 1) then
                            begin
                                SetNextFocus();
                                
                                // 共通部門以外の場合
                                if (m_dSousaiNCode[iSaiyo] <> BmnNCode) then
                                begin
                                    // 変更あり
                                    if (BmnNCode <> 0) then
                                    begin
                                        // 変更入力あり
                                        GetMaster(41, BmnNCode);
                                    end;

// <199> MOD-STR
//                                  SetEditValue();
                                    SetEditValue(41);
// <199> MOD-END

                                    m_dSousaiNCode[iSaiyo] := BmnNCode;

                                    Edit;
                                    FieldByName('dCBmnNCode').AsCurrency := BmnNCode;
                                    Post;
                                end;
                            end;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [201..210]) then
                        begin
                            // プロジェクト(工事)採用あり
                            iSaiyo := iSaiyo + 1;

                            for iLoop := 1 to 10 do
                            begin
                                if (m_arCodeAttribute[iSaiyo - 1].nUse <> 0) then
                                begin
                                    // 採用ありの場合のみ更新
                                    if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision = (iLoop + 200)) then
                                    begin
                                        // 優先３項目
                                        SetNextFocus();

                                        if (PrjNCode[iLoop] <> 0) then
                                        begin
                                            // 入力あり
                                            GetMaster((iLoop + 200), PrjNCode[iLoop]);
                                        end;

// <199> MOD-STR
//                                      SetEditValue();
                                        SetEditValue(iLoop + 200);
// <199> MOD-END

                                        m_dSousaiNCode[iSaiyo] := PrjNCode[iLoop];

                                        // プロジェクトサブ(工種)
                                        fnKojiInfoCheck(PrjNCode[iLoop], m_arCodeAttribute[iSaiyo - 1].nMasterDivision, iPartKbn);   // 工種管理区分チェック

                                        if (iPartKbn <> 0) then
                                        begin
                                            // 採用あり
                                            iSaiyo := iSaiyo + 1;

                                            if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision <> (iLoop + 300)) then
                                            begin
                                                // 補助採用の順序に変更があった場合の処理
                                                m_arCodeAttribute[iSaiyo - 1].nMasterDivision := (iLoop + 300);
                                                if GetMasterInfo(iLoop + 300) then
                                                begin
								                    m_arCodeAttribute[iSaiyo - 1].nAttribute := Dmq.FieldByName('CodeAttr').AsInteger;
								                    m_arCodeAttribute[iSaiyo - 1].nDigit	 := Dmq.FieldByName('CodeDigit').AsInteger;
                                                end;
                                            end;

                                            SetNextFocus();

                                            if (PjSubNCode[iLoop] <> 0) then
                                            begin
                                                // 入力あり
                                                GetMaster((iLoop + 300), PjSubNCode[iLoop]);
                                            end;

// <199> MOD-STR
//                                          SetEditValue();
                                            SetEditValue(iLoop + 300);
// <199> MOD-END

                                            m_dSousaiNCode[iSaiyo] := PjSubNCode[iLoop];
                                        end;
                                    end;

                                    Edit;
                                    FieldByName('dCPrjNCode' + IntToStr(iLoop)).AsCurrency := PrjNCode[iLoop];
                                    FieldByName('dCPjSubNCode' + IntToStr(iLoop)).AsCurrency := PjSubNCode[iLoop];
                                    Post;
                                end;
                            end;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_SUBJECTPLUS) then
                        begin
                            // 科目別補助採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (SubNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(2, rSwkAddDlgParam.KmkNCode, SubNCode);
                                end;

// <199> MOD-STR
//                              SetEditValue();
                                SetEditValue(2);
// <199> MOD-END

                                m_dSousaiNCode[iSaiyo] := SubNCode;
                            end;

                            Edit;
                            FieldByName('dCSubNCode').AsCurrency := SubNCode;
                            Post;
                        end
                        else if (FieldByName('dCSubNCode').AsCurrency <> SubNCode) then
                        begin
                            Edit;
                            FieldByName('dCSubNCode').AsCurrency := SubNCode;
                            Post;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_BANK) then
                        begin
                            // 銀行採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (BankNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(21, BankNCode);
                                end;

// <199> MOD-STR
//                              SetEditValue();
                                SetEditValue(21);
// <199> MOD-END

                                m_dSousaiNCode[iSaiyo] := BankNCode;
                            end;

                            Edit;
                            FieldByName('dCBankNCode').AsCurrency := BankNCode;
                            Post;
                        end
                        else if (FieldByName('dCBankNCode').AsCurrency <> BankNCode) then
                        begin
                            Edit;
                            FieldByName('dCBankNCode').AsCurrency := BankNCode;
                            Post;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [MASTER_CUSTOMER, MASTER_CUSTOMERPLUS01, MASTER_CUSTOMERPLUS02]) then
                        begin
                            // 取引先採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (CsNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(22, CsNCode);
                                end;

// <199> MOD-STR
//                              SetEditValue();
                                SetEditValue(22);
// <199> MOD-END

                                m_dSousaiNCode[iSaiyo] := CsNCode;
                            end;

                            Edit;
                            FieldByName('dCCsNCode').AsCurrency := CsNCode;
                            Post;
                        end
                        else if (FieldByName('dCCsNCode').AsCurrency <> CsNCode) then
                        begin
                            Edit;
                            FieldByName('dCCsNCode').AsCurrency := CsNCode;
                            Post;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision = MASTER_STAFF) then
                        begin
                            // 社員採用あり
                            iSaiyo := iSaiyo + 1;

                            if (iSaiyo <= 3) then
                            begin
                                // 優先３項目
                                SetNextFocus();

                                if (EmpNCode <> 0) then
                                begin
                                    // 入力あり
                                    GetMaster(25, EmpNCode);
                                end;

// <199> MOD-STR
//                              SetEditValue();
                                SetEditValue(25);
// <199> MOD-END

                                m_dSousaiNCode[iSaiyo] := EmpNCode;
                            end;

                            Edit;
                            FieldByName('dCEmpNCode').AsCurrency := EmpNCode;
                            Post;
                        end
                        else if (FieldByName('dCEmpNCode').AsCurrency <> EmpNCode) then
                        begin
                            Edit;
                            FieldByName('dCEmpNCode').AsCurrency := EmpNCode;
                            Post;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [MASTER_GENERAL01..MASTER_GENERAL05]) then
                        begin
                            // 汎用補助採用あり
                            iSaiyo := iSaiyo + 1;

                            for iLoop := 1 to 5 do
                            begin
                                if (m_arCodeAttribute[iSaiyo - 1].nUse <> 0) then
                                begin
                                    // 採用ありの場合のみ更新
                                    if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision = (iLoop + 30)) then
                                    begin
                                        if (iSaiyo <= 3) then
                                        begin
                                            // 優先３項目
                                            SetNextFocus();

                                            if (MulNCode[iLoop] <> 0) then
                                            begin
                                                // 入力あり
                                                GetMaster((iLoop + 30), MulNCode[iLoop]);
                                            end;

// <199> MOD-STR
//                                          SetEditValue();
                                            SetEditValue(iLoop + 30);
// <199> MOD-END

                                            m_dSousaiNCode[iSaiyo] := MulNCode[iLoop];

                                            if (iSaiyo <= 2) then
                                            begin
                                                // 汎用補助の場合、２つ目までチェック
                                                if (m_arCodeAttribute[iSaiyo].nMasterDivision in [MASTER_GENERAL01..MASTER_GENERAL05]) then
                                                begin
                                                    iSaiyo := iSaiyo + 1;
                                                end;
                                            end;
                                        end;
                                    end;

                                    Edit;
                                    FieldByName('dCMulNCode' + IntToStr(iLoop)).AsCurrency := MulNCode[iLoop];
                                    Post;
                                end;
                            end;
                        end
                        else
                        begin
                            for iLoop := 1 to 5 do
                            begin
                                if (FieldByName('dCMulNCode' + IntToStr(iLoop)).AsCurrency <> MulNCode[iLoop]) then
                                begin
                                    Edit;
                                    FieldByName('dCMulNCode' + IntToStr(iLoop)).AsCurrency := MulNCode[iLoop];
                                    Post;
                                end;
                            end;
                        end;

                        if (m_arCodeAttribute[iSaiyo].nMasterDivision in [101..110]) then
                        begin
                            // セグメント採用あり
                            iSaiyo := iSaiyo + 1;

                            for iLoop := 1 to 10 do
                            begin
                                if (m_arCodeAttribute[iSaiyo - 1].nUse <> 0) then
                                begin
                                    // 採用ありの場合のみ更新
                                    if (iSaiyo <= 3) then
                                    begin
                                        if (m_arCodeAttribute[iSaiyo - 1].nMasterDivision = (iLoop + 100)) then
                                        begin
                                            // 優先３項目
                                            if (m_arCodeAttribute[iSaiyo - 1].nUse = 1) then
                                            begin
                                                SetNextFocus();

                                                if (SegNCode[iLoop] <> 0) then
                                                begin
                                                    // 入力あり
                                                    GetMaster((iLoop + 100), SegNCode[iLoop]);
                                                end;

// <199> MOD-STR
//                                              SetEditValue();
                                                SetEditValue(iLoop + 100);
// <199> MOD-END

                                                m_dSousaiNCode[iSaiyo] := SegNCode[iLoop];
                                            end;
                                        end;
                                    end;

                                    Edit;
                                    FieldByName('dCSegNCode' + IntToStr(iLoop)).AsCurrency := SegNCode[iLoop];
                                    Post;
                                end;
                            end;
                        end
                        else
                        begin
                            for iLoop := 1 to 10 do
                            begin
                                if (FieldByName('dCSegNCode' + IntToStr(iLoop)).AsCurrency <> SegNCode[iLoop]) then
                                begin
                                    Edit;
                                    FieldByName('dCSegNCode' + IntToStr(iLoop)).AsCurrency := SegNCode[iLoop];
                                    Post;
                                end;
                            end;
                        end;

                        //相殺登録では消費税制御なし
                    except
                      on E: Exception do Application.Messagebox(PChar(E.Message),'Message',MB_OK);
                    end;
                end;
            finally
                Dmq.Close;
                Dmq.Free;
            end;
        end
        else
        begin
            if (cSender is TMTxtEdit) then
                TMTxtEdit(cSender).SetFocus
            else if (cSender is TMNumEdit) then
                TMNumEdit(cSender).SetFocus;
        end;

        if Assigned(cSwkAddDlg) then
        begin
            cSwkAddDlg.Free;
            //cSwkAddDlg := nil;
        end;
    end;
end;
// <194> ADD-END

// <198>
//*****************************************************************************
//	Process			:	銀行情報登録
//	Name			:   G.Kojima
//	Date			:	2010/07/27
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure TJNTCRP004006f.BankInfoDlg();

var
    fBank		: TJNTCRP004006BankF;
    BankData	: TBankData;
	strDescription: String; // <226> ADD
	strKanaDesc	  : String; // <226> ADD

begin
    BankData.sBankCode := '' ;

    // 振込情報タブ
    if (m_cACControl=CmnEdit02003BranchCode) then
    begin
      	BankData.sBankCode := Trim(CmnEdit02002BankCode.Text) ;
    end;
    // 期日指定振込情報タブ
    if (m_cACControl=CmnEdit03003BranchCode) then
    begin
       	BankData.sBankCode := Trim(CmnEdit03002BankCode.Text) ;
    end;

// <BDIC> MOD-STR
//  fBank:=TJNTCRP004006BankF.CreateForm(Self,m_pRec);
    fBank:=TJNTCRP004006BankF.CreateForm(Self,m_pRec,m_Base_pRec,m_cJNTArea);
// <BDIC> MOD-END
    try
        fBank.fnShowInpBank(BankData,True);
// <BDIC> ADD-STR
        if (BankData.sBankCode <> '') then
        begin
            if (CmnTabInformations.Items.Selected = TI_FURIKOMI) then
            begin
                // 振込情報
                CmnEdit02002BankCode.Value := StrToInt(BankData.sBankCode);
                CmnEdit02002BankCode.InPutFlag := False; // <226> ADD
                CmnEdit02004BankName.Text := BankData.sBankName;
                CmnEdit02005BankNameKana.Text := BankData.sBankKana;
                CmnEdit02003BranchCode.Setfocus;
// <SCA> ADD-STR
                if (BankData.sBranchCode = '') then
                    CmnEdit02003BranchCode.Clear
                else
// <SCA> ADD-END
// <226> MOD-STR
                //    CmnEdit02003BranchCode.Value := StrToInt(BankData.sBranchCode);
                begin
                    CmnEdit02003BranchCode.Value     := StrToInt(BankData.sBranchCode);
                    CmnEdit02003BranchCode.InPutFlag := False;
                    fnCheckValidBranchCode (CmnEdit02002BankCode.AsInteger, CmnEdit02003BranchCode.AsInteger, strDescription, strKanaDesc, 2);
                end;
// <226> MOD-END
                CmnEdit02006BranchName.Text := BankData.sBranchName;
                CmnEdit02007BranchNameKana.Text := BankData.sBranchKana;
// <226> ADD-STR
        	    fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, CmnEdit02002BankCode.Name)), FALSE);
	            fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, CmnEdit02003BranchCode.Name)), FALSE);
// <226> ADD-END
            end
            else if (CmnTabInformations.Items.Selected = TI_KFURIKOMI) then
            begin
                // 期日指定振込情報
                CmnEdit03002BankCode.Value := StrToInt(BankData.sBankCode);
                CmnEdit03002BankCode.InPutFlag := False; // <226> ADD
                CmnEdit03004BankName.Text := BankData.sBankName;
                CmnEdit03005BankNameKana.Text := BankData.sBankKana;
                CmnEdit03003BranchCode.Setfocus;
// <SCA> ADD-STR
                if (BankData.sBranchCode = '') then
                    CmnEdit03003BranchCode.Clear
                else
// <SCA> ADD-END
// <226> MOD-STR
                //    CmnEdit03003BranchCode.Value := StrToInt(BankData.sBranchCode);
                begin
                    CmnEdit03003BranchCode.Value     := StrToInt(BankData.sBranchCode);
                    CmnEdit03003BranchCode.InputFlag := False;
                    fnCheckValidBranchCode (CmnEdit03002BankCode.AsInteger, CmnEdit03003BranchCode.AsInteger, strDescription, strKanaDesc, 3);
                end;
// <226> MOD-END
                CmnEdit03006BranchName.Text := BankData.sBranchName;
                CmnEdit03007BranchNameKana.Text := BankData.sBranchKana;
// <226> ADD-STR
        	    fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, CmnEdit03002BankCode.Name)), FALSE);
	            fnSetChangeFlagCheckItems (TMNumEdit (MJSFindCtrl (Self, CmnEdit03003BranchCode.Name)), FALSE);
// <226> ADD-END
            end;
        end;
// <BDIC> ADD-END
    finally
       	fBank.Free;
    end;
end;

procedure TJNTCRP004006f.CmnLabelPrjDetailClick(Sender: TObject);
var
    ss : String;
begin
ss:=
'm_dSousaiNCode[1]='+FLOATTOSTR(m_dSousaiNCode[1])+#13#10+
'm_dSousaiNCode[2]='+FLOATTOSTR(m_dSousaiNCode[2])+#13#10+
'm_dSousaiNCode[3]='+FLOATTOSTR(m_dSousaiNCode[3])+#13#10+
'm_arCodeAttribute[0].nMasterDivision='+INTTOSTR(m_arCodeAttribute[0].nMasterDivision)+#13#10+
'm_arCodeAttribute[1].nMasterDivision='+INTTOSTR(m_arCodeAttribute[1].nMasterDivision)+#13#10+
'm_arCodeAttribute[2].nMasterDivision='+INTTOSTR(m_arCodeAttribute[2].nMasterDivision)
;
//Application.Messagebox(PChar(ss),'Message',MB_OK);
end;

// <197> ADD-STR
//*****************************************************************************
//	Process			:	債務共通INIファイルから設定値を取得する
//	Name			:	T.SATOH(IDC)
//	Date			:	2010/03/09
//	Parameter		:	sSection 	: String
//						sKey 		: String
//	Return			:	設定値
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.GetPayCommonValue(sSection, sKey: String): String;
const
    APG_FILE = 'MAS\PRG\PayControl.APG';
var
	_pRec       : ^TMjsAppRecord;
	cComArea    : rcCOMMONAREA;
	sPath       : String;
	sFile       : String;
    oIniFile    : TIniFile;
begin
    Result := '';

	_pRec := pointer(m_pRec);
	cComArea := rcCOMMONAREA(_pRec^.m_pCommonArea^);

	sPath := cComArea.SysRoot;
    if not IsPathDelimiter(sPath, Length(sPath)) then sPath := sPath + '\';

    sFile := sPath + APG_FILE;

    if FileExists(sFile) then
    begin
        oIniFile := Nil;
        try
            oIniFile := TIniFile.Create(sFile);
            Result := oIniFile.ReadString(sSection, sKey, '');
        finally
            if Assigned(oIniFile) then oIniFile.Free;
        end;
    end;
end;
// <197> ADD-END

// <202> ADD-STR
//-----------------------------------------------------------------------------
// fnExistProjRecord()
//      PARAM   : CD    外部コード
//      VAR     :
//      RETURN  : T : 存在する F: 存在しない
//      MEMO    : プロジェクト別支払情報の存在チェック
//-----------------------------------------------------------------------------
function TJNTCRP004006f.fnExistProjRecord(sPayCD: String): Boolean;
var
    DmqData :   TMQuery;
    strSQL  :   String;
begin
	Result := FALSE;

	if ( m_nCurCodeAttribute <= 1 ) then
		sPayCD := Format ('%.16d',[StrToInt64(Trim(sPayCD))]);

    // プロジェクト別支払情報が設定された支払先は分解パターン変更不可
    strSQL  := 'SELECT MT.NCode '
             + '  FROM PayPtnInfo PPI '
             + ' INNER JOIN MTOKUI MT '
             + '    ON MT.NCode = PPI.PayNCode '
             + '   AND MT.RDelKbn = 0 '
             + ' WHERE PPI.MasterKbn = 22 '
             + '   AND PPI.PayPtnNo <> 1 '
             + '   AND MT.GCode = ' + AnsiQuotedStr(sPayCD, '''') + ' '
             + '   AND PPI.RDelKbn = 0 ';

    // MQueryの構築
    DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

    try
    	with ( DmqData ) do
    	begin
    		Close();
    		SQL.Clear();
    		SQL.Add(strSQL);

    		if ( not Open () ) then
    		begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (DmqData);

                DmqData.Close();
                DmqData.Free();

    			Result := FALSE;
    			Exit;
    		end;

    		if ( EOF <> True ) then
    		begin
    			Result := True;
    		end;
    	end;
    finally
        DmqData.Close();
        DmqData.Free();
    end;
end;
// <202> ADD-END

// <204> Add start
//*****************************************************************************
//	Process			:	債務振込情報タブから値を取得し期日指定振込情報タブにセットする
//	Name			:	G.KOJIMA(MSI)
//	Date			:	2011/06/22
//	Parameter		:
//	Return			:
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure TJNTCRP004006f.fnCopyFuriInfo();
var
	strDescription	: String;
	nItems			: Integer;
begin
	// 振込依頼口座コード
    CmnEdit03001AccountCode.Value			:= CmnEdit02001AccountCode.Value;
	// 振込依頼名称
    CmnLabel03001AccountCodeDesc.Caption	:= CmnLabel02001AccountCodeDesc.Caption;
    // 振込先銀行コード
    CmnEdit03002BankCode.Value				:= CmnEdit02002BankCode.Value;
	// 振込先支店コード
    CmnEdit03003BranchCode.Value			:= CmnEdit02003BranchCode.Value;
    m_anBrachNCode[2]                       := m_anBrachNCode[1];   // 振込先支店内部コードコピー <SCA> ADD
	// 振込先銀行名称
    CmnEdit03004BankName.Text				:= CmnEdit02004BankName.Text;
    // 振込先銀行名称カナ
    CmnEdit03005BankNameKana.Text			:= CmnEdit02005BankNameKana.Text;
    // 振込先銀行支店名称
    CmnEdit03006BranchName.Text				:= CmnEdit02006BranchName.Text;
    // 振込先銀行支店名称カナ
    CmnEdit03007BranchNameKana.Text			:= CmnEdit02007BranchNameKana.Text;
    // カナ振込先名称
    CmnEdit03008TranslationName.Text		:= CmnEdit02008TranslationName.Text;
    // 預金種目
    CmnEdit03009DepDivision.Value			:= CmnEdit02009DepDivision.Value;
	fnGetDescriptionSelectedItem (CmnEdit03009DepDivision, strDescription);
	CmnLabel03009DepDivisionDesc.Caption	:= strDescription;
    // 口座番号
    CmnEdit03010AccountNo.Text				:= CmnEdit02010AccountNo.Text;
    // FBセット区分
    CmnEdit03011FBDivision.Value			:= CmnEdit02011FBDivision.Value;
	fnGetDescriptionSelectedItem (CmnEdit03011FBDivision, strDescription);
	CmnLabel03011FBDivisionDesc.Caption		:= strDescription;
    // EDI情報
    CmnEdit03014EDIInfo.Text				:= CmnEdit02014EDIInfo.Text;
    // 顧客コード1
    CmnEdit03012VisitorCode.Text			:= CmnEdit02012VisitorCode.Text;
    // 顧客コード2
    CmnEdit03013VisitorCode.Text			:= CmnEdit02013VisitorCode.Text;
    // 手数料負担
    CmnEdit03015ComDivision.Value			:= CmnEdit02015ComDivision.Value;
	fnGetDescriptionSelectedItem (CmnEdit03015ComDivision, strDescription);
	CmnLabel03015ComDivisionDesc.Caption	:= strDescription;
    // 手数料計算区分
    CmnEdit03016ComCalculation.Value		:= CmnEdit02016ComCalculation.Value;
	fnGetDescriptionSelectedItem (CmnEdit03016ComCalculation, strDescription);
	CmnLabel03016ComCalculationDesc.Caption	:= strDescription;
    // 振込方法
    CmnEdit03017PayDivision.Value			:= CmnEdit02017PayDivision.Value;
	fnGetDescriptionSelectedItem (CmnEdit03017PayDivision, strDescription);
	CmnLabel03017PayDivisionDesc.Caption	:= strDescription;

    CmnEdit03001AccountCode.InputFlag	:= False;
    CmnEdit03002BankCode.InputFlag		:= False;
    CmnEdit03003BranchCode.InputFlag	:= False;

    for	nItems := 0 to m_cCheckItems.Count - 1 do
    begin
    	if (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID >= 3001)
        	and (PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID <= 3017) then
        begin
            PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck := False;
        end;
    end;

    MjsSetFocus(self, CmnEdit03001AccountCode.Name);
end;
// <204> Add end

// <211> ADD-STR
procedure	TJNTCRP004006f.fnInitializeScreenDetailInfo08 ();
var
	strDescription: String;

begin
    CmnEdit08001AccountCode.Value		:= 0;										// 振込依頼口座ｺｰﾄﾞ
    CmnEdit08001AccountCode.InputFlag	:= TRUE;

    CmnLabel08001AccountCodeDesc.Caption	:= '';

    CmnEdit08002PosDivision.Value	:= 0;											// 小切手郵送区分

    fnGetDescriptionSelectedItem (CmnEdit08002PosDivision, strDescription);
    CmnLabel08002PosDivisionDesc.Caption	:= strDescription;

    CmnEdit08003BurDivision.Value	:= 0;											// 小切手郵送料負担区分

    fnGetDescriptionSelectedItem (CmnEdit08003BurDivision, strDescription);
    CmnLabel08003BurDivisionDesc.Caption	:= strDescription;
end;

function	TJNTCRP004006f.fnCheckEditItemsValue08 (nFieldID: Integer): Boolean;
var
	fReturn: Boolean;

begin
	fReturn	:= TRUE;

	case (nFieldID) of
		1:	fReturn	:= fnCheckEditNumValueAccountCode  (8, nFieldID);					// 依頼口座ｺｰﾄﾞ
		2:	fReturn	:= fnCheckEditNumValueSelect	   (8, nFieldID);					// 小切手郵送区分
		3:	fReturn	:= fnCheckEditNumValueSelect	   (8, nFieldID);					// 郵送料負担区分
	end;

	Result	:= fReturn;
end;

procedure	TJNTCRP004006f.fnSetScreenDetailInformation08 (dqMasterData: TMQuery);
var
	strDescription: String;

begin
	with (dqMasterData) do
	begin
        if	(FieldByName ('GCode').IsNull) then									// 振込依頼口座ｺｰﾄﾞ
        begin
            CmnEdit08001AccountCode.Value		:= 0;
            CmnEdit08001AccountCode.InputFlag	:= TRUE;
        end
        else
        begin
            CmnEdit08001AccountCode.Value		:= FieldByName ('GCode').AsInteger;
            CmnEdit08001AccountCode.InputFlag	:= FALSE;
        end;

        CmnEdit08002PosDivision.Value	:= FieldByName ('TegYusouKbn'  ).AsInteger;	// 小切手郵送区分
        CmnEdit08003BurDivision.Value	:= FieldByName ('TegYusouFutan').AsInteger;	// 小切手郵送料負担区分
	end;

    fnCheckEditNumValueAccountCode (8, 1);											// 依頼口座ｺｰﾄﾞ

    fnGetDescriptionSelectedItem (CmnEdit08002PosDivision, strDescription);
    CmnLabel08002PosDivisionDesc.Caption	:= strDescription;

    fnGetDescriptionSelectedItem (CmnEdit08003BurDivision, strDescription);
    CmnLabel08003BurDivisionDesc.Caption	:= strDescription;

    fnChangeConditionPostage8 (2);													// 小切手郵送区分
end;

procedure	TJNTCRP004006f.fnChangeConditionPostage8 (nFieldID: Integer);
var
	cNumEdit   : TMNumEdit;
	cBackground: TColor;
	fEnabled   : Boolean;

begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit08%.3dPosDivision', [nFieldID])));

	if	(cNumEdit.AsInteger = 0) then													// 手形/小切手郵送区分: 0=郵送する
		fEnabled	:= TRUE
	else if	(cNumEdit.AsInteger = 1) then												// 手形/小切手郵送区分: 1=郵送しない
		fEnabled	:= FALSE
	else
		Exit;

	if	(fEnabled) then
		cBackground	:= clWindow
	else
		cBackground	:= TJNTCRP004006f (Self).Color;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelBurDivision04'))                                 .Enabled	:= fEnabled;    // <216> ADD
	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit08%.3dBurDivision'     , [nFieldID + 1]))).Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, Format ('CmnEdit08%.3dBurDivision'     , [nFieldID + 1]))).Color		:= cBackground;
	TMLabel   (MJSFindCtrl (Self, Format ('CmnLabel08%.3dBurDivisionDesc', [nFieldID + 1]))).Enabled	:= fEnabled;
end;

procedure	TJNTCRP004006f.fnChangeConditionERKbn ();
var
	cNumEdit   : TMNumEdit;
	cBackground: TColor;
	fEnabled   : Boolean;
    iLoop      : Integer;
    sFiledName : String;
begin
	cNumEdit	:= TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04006ERKbn'));

	if	(cNumEdit.AsInteger = 1) then
		fEnabled	:= TRUE
	else if	(cNumEdit.AsInteger = 0) then
		fEnabled	:= FALSE
	else
		Exit;

// <214> ADD-STR
    // 会社基本で採用がない場合は使用不可
    if (m_iErUseKbn = 0) then
		fEnabled	:= FALSE;
// <214> ADD-END

	if	(fEnabled) then
		cBackground	:= clWindow
	else
		cBackground	:= TJNTCRP004006f (Self).Color;

// <214> ADD-STR
    // 会社基本で採用がない場合は採用区分も使用不可
    if (m_iErUseKbn = 0) then
	begin
    	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErKbn'))             .Enabled	:= fEnabled;
	    TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04006ERKbn'))         .Color		:= cBackground;
    	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04006ERKbn'))         .Enabled	:= fEnabled;
	    TMLabel   (MJSFindCtrl (Self, 'CmnLabel04006ERKbnDesc'))    .Enabled	:= fEnabled;
    end;
// <214> ADD-END

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErBank1'))               .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04007BankCode'))          .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04007BankCode'))          .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04008BranchCode'))        .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04008BranchCode'))        .Enabled	:= fEnabled;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErBank2'))               .Enabled	:= fEnabled;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04009BankName'))          .Color		:= cBackground;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04009BankName'))          .Enabled	:= fEnabled;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04010BankNameKana'))      .Color		:= cBackground;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04010BankNameKana'))      .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErBank3'))               .Enabled	:= fEnabled;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04011BranchName'))        .Color		:= cBackground;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04011BranchName'))        .Enabled	:= fEnabled;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04012BranchNameKana'))    .Color		:= cBackground;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04012BranchNameKana'))    .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErKana'))                .Enabled	:= fEnabled;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04013TranslationName'))   .Color		:= cBackground;
	TMTxtEdit (MJSFindCtrl (Self, 'CmnEdit04013TranslationName'))   .Enabled	:= fEnabled;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErSyumoku'))             .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04014DepDivision'))       .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04014DepDivision'))       .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabel04014DepDivisionDesc'))  .Enabled	:= fEnabled;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErAccNo'))               .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04015AccountNo'))         .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04015AccountNo'))         .Enabled	:= fEnabled;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErCom'))                 .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04016ComDivision'))       .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04016ComDivision'))       .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabel04016ComDivisionDesc'))  .Enabled	:= fEnabled;

// <221> ADD-STR
	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErComCalc'))             .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04017ComCalculation'))    .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04017ComCalculation'))    .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabel04017ComCalculationDesc')).Enabled	:= fEnabled;
// <221> ADD-END

	for iLoop := 1 to 5 do
    begin
    	TMLabel   (MJSFindCtrl (Self, 'CmnLabelErFree' + IntToStr(iLoop)))  .Enabled	:= fEnabled;
        sFiledName := Format ('CmnEdit04%.3dFree', [iLoop + 17]) + IntToStr(iLoop);
    	TMTxtEdit (MJSFindCtrl (Self, sFiledName))                          .Enabled	:= fEnabled;
	    TMTxtEdit (MJSFindCtrl (Self, sFiledName))                          .Color		:= cBackground;
    end;

// <216> ADD-STR
    // 手形項目の使用可否制御も行う
    fEnabled	:= not fEnabled;

	if	(fEnabled) then
		cBackground	:= clWindow
	else
		cBackground	:= TJNTCRP004006f (Self).Color;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelDivSheets03'))           .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04003DivSheets'))         .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04003DivSheets'))         .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabelDivSheets03Unit'))       .Enabled	:= fEnabled;

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelPosDivision03'))         .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04004PosDivision'))       .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04004PosDivision'))       .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabel04004PosDivisionDesc'))  .Enabled	:= fEnabled;

    fEnabled	:= fEnabled and (TMNumEdit(MJSFindCtrl(Self,'CmnEdit04004PosDivision')).Value = 0);

	TMLabel   (MJSFindCtrl (Self, 'CmnLabelBurDivision03'))         .Enabled	:= fEnabled;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04005BurDivision'))       .Color		:= cBackground;
	TMNumEdit (MJSFindCtrl (Self, 'CmnEdit04005BurDivision'))       .Enabled	:= fEnabled;
	TMLabel   (MJSFindCtrl (Self, 'CmnLabel04005BurDivisionDesc'))  .Enabled	:= fEnabled;
// <216> ADD-END
end;
// <211> ADD-END

// <217> ADD-STR
// フリー項目情報取得
procedure TJNTCRP004006f.fnGetFreeInfoFromApgFile();
var
    iLoop       : Integer;
    DmqData     : TMQuery;
	_pRec       : ^TMjsAppRecord;
	cComArea    : rcCOMMONAREA;
	sPath       : String;
	sFile       : String;
    oIniFile    : TIniFile;
    sData       : String;
    slData      : TStringList;
    iPos        : Integer;

    function TWO_ONE(Str : String) : String;
    var
        Buf : array [0 .. 1023] of Char;
    begin
        LCMapString(GetUserDefaultLCID, LCMAP_HALFWIDTH, PChar(Str), Length(Str)+1, Buf, 1024);
        Result := String(Buf);
    end;
begin
    // 配列初期化
	for iLoop := Low(m_arFreeInfo) to High(m_arFreeInfo) do
		m_arFreeInfo[iLoop]	:= '';

    // MQueryの構築
    DmqData := TMQuery.Create( Self );
    // DBとMQueryの接続
    m_cDataModule.SetDBInfoToQuery( m_cDBSelect, DmqData );

    try
    	with ( DmqData ) do
    	begin
    		Close();
    		SQL.Clear();
    		SQL.Add('SELECT 1, LayoutInfo' +
                    '  FROM AccInfo' +
                    ' WHERE GCode = ' + FloatToStr(CmnEdit04001AccountCode.Value) + // 手形情報の依頼口座
                    ' UNION ' +
                    'SELECT 2, LayoutInfo' +
                    '  FROM AccInfo' +
                    ' WHERE NCode = (SELECT DataNum' +
                                    '  FROM PayBaseInfo' +
                                    ' WHERE SystemCode = 1' +
                                    '   AND ItemID = 2841)' +                       // または電子債権のデフォルト口座
                    ' ORDER BY 1');                                                 // の順でレイアウト情報を取得

    		if ( not Open () ) then
    		begin
                m_cComArea.m_MsgStd.GetMsgDB (m_cErrorMsgRec, DmqData);

                m_nDBErrorCode	:= m_cComArea.m_MsgStd.GetDBCode (DmqData);

                DmqData.Close();
                DmqData.Free();

    			Exit;
    		end;

    		if not EOF then
    		begin
    			if (FieldByName ('LayoutInfo').AsString <> '') then
                begin
                    // レイアウト情報が設定されている場合、そのファイルを読み込む
                    _pRec := pointer(m_pRec);
                    cComArea := rcCOMMONAREA(_pRec^.m_pCommonArea^);

                    sPath := cComArea.SysRoot;
                    if not IsPathDelimiter(sPath, Length(sPath)) then sPath := sPath + '\';

                    sFile := sPath + 'MAS\PRG\' + FieldByName ('LayoutInfo').AsString;

                    if FileExists(sFile) then
                    begin
                        oIniFile := Nil;
                        slData := TStringList.Create;
                        try
                            oIniFile := TIniFile.Create(sFile);
                        	for iLoop := 1 to 100 do
                            begin
                                sData := oIniFile.ReadString('Data', 'D_Komoku' + IntToStr(iLoop), '');
                                if (sData <> '') then
                                begin
                                    // カンマ区切りで設定内容を分解してガイド表示文字列を生成
                                    slData.commaText:= sData;

                                    if (4 <= slData.Count) and (Copy(slData.Strings[3], 1, 10) = 'フリー項目') then
                                    begin
                                        iPos := StrToInt(TWO_ONE(Copy(slData.Strings[3], 11, 4)));
                                        m_arFreeInfo[iPos]	:= slData.Strings[0] + '（';
                                        if (slData.Strings[2] = 'N') then
                                            m_arFreeInfo[iPos] := m_arFreeInfo[iPos] + '数値'
                                        else
                                            m_arFreeInfo[iPos] := m_arFreeInfo[iPos] + '文字';
                                        m_arFreeInfo[iPos] := m_arFreeInfo[iPos] + ' ' + slData.Strings[1] + '桁）';
                                    end;
                                end
                                else
                                    Break;
                            end;
                        finally
                            if Assigned(oIniFile) then oIniFile.Free;
                            if Assigned(slData) then slData.Free;
                        end;
                    end;
                end;
    		end;
    	end;
    finally
        DmqData.Close();
        DmqData.Free();
    end;
end;
// <217> ADD-END

// <222> ADD start
//*****************************************************************************
//	Process			:	外貨債務パーツの表示
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/04
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnInitGaikaDsp();
var
	iCnt	: Integer;
begin
	// 外貨支払情報パネル
    CmnPanelGaikaInfo.Left := 0;
    CmnPanelGaikaInfo.Top := 75;
    CmnPanelGaikaInfo.Visible := True;
    // プロジェクトパネル
    CmnPanelProjectInfo.Top := 127;
    CmnPanelProjectInfo.Height := 30;
    // タブとタブの表示内容が全部載ったパネル
    CmnPanelInformations.Top := 157;

    // タブ表示
    CmnTabInformations.Items [TI_WIRE].Visible := True;		// 電信送金情報
    CmnTabInformations.Items [TI_EXCHANGE].Visible := True;	// 為替手形／送金小切手情報

    // 標準支払方法のリスト作成
    CmnEdit00020BasePayment.SelectItems.Clear;
    for iCnt := Low(_GaiPayKbn) to High(_GaiPayKbn) do
    begin
	    CmnEdit00020BasePayment.SelectItems.Add(IntToStr(_GaiPayKbn[iCnt].iDspKbn) + ': ' + _GaiPayKbn[iCnt].strDsp);
    end;
end;

//*****************************************************************************
//	Process			:	PayStatusDataの支払状況チェック
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/04
//	Parameter		:	nPayNCode	: 選択した支払先内部コード
//	Return			:	True: 支払処理中でない(入力可)
//					:	False: 支払処理中orエラー(入力不可)
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnChkPayStatusData (nPayNCode: Extended): Boolean;
var
	dqQuery	: TMQuery;
    strSQL  : String;
begin
	Result := False;
	dqQuery	:= TMQuery.Create(self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dqQuery);	// DBとMQueryの接続

    try
        with (dqQuery) do
        begin
            strSQL  := 'SELECT PayNCode FROM PayStatusData '
            		+ 'INNER JOIN PayActionInfo '
                    + 'ON PayStatusData.SystemCode = PayActionInfo.SystemCode '
                    + 'AND PayStatusData.FuncNo = PayActionInfo.FuncNo '
            		+ 'WHERE PayActionInfo.SyoriKbn = 1 '	// 通常支払
                    + 'AND PayActionInfo.Condition = 0 '  	// 支払処理中
                    + 'AND PayStatusData.SystemCode in (1, 3) ' // 1: 債務管理, 3: 外貨債務管理
                    + 'AND PayStatusData.PayNCode = :parPayNCode ';

            Close();
            SQL.Clear();
            SQL.Add(strSQL);
            								// 支払先内部コード
            ParamByName('parPayNCode').AsFloat := nPayNCode;

            if not Open() then
            begin
     			Exit;
            end;

            if EOF then						// レコードなし=支払処理中でない
            begin
            	Result := True;
            	Exit;
            end;
		end;
	finally
        dqQuery.Close ();
        dqQuery.Free  ();
    end;
end;

//*****************************************************************************
//	Process			:	可変項目情報取得
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	dqQuery	: 接続済みクエリ
//	Return			:	True: 正常
//					:	False: 異常
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnGetPayVariable (dqQuery: TMQuery): Boolean;
var
	strSQL		: String;
    strHojCode	: String;
    nPayNCode	: Extended;
begin
	Result := False;

    // 支払先内部コード取得
    if	(m_nCurCodeAttribute <= 1) then
        strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)])
    else
        strHojCode	:= CmnEdit00001HojCodeFree.Text;

    nPayNCode   := fnGetNCODE(strHojCode);  // 支払先内部コード

	with dqQuery do
    begin
        Close ();
        SQL.Clear ();

        // 支払可変情報マスタ＋海外送金可変項目
        strSQL  := 'SELECT FB.ID as ItemID, ITM.ItemValue, '
                + ' FB.SimpleName, FB.MaxDigit, FB.Remarks, FB.OrderNo '                // 簡略名、最大桁数、備考、表示順序
                + ' ,ISNULL(FB.DefaultKbn,0) AS DefaultKbn '							//<222-7>ADD
// <GAI-2> ADD-STR
                + ' ,CASE WHEN (ITM.ItemID IS NULL) '                                   // 可変項目のIDが空の場合
                + ' THEN 0 '
                + ' ELSE 1 '
                + ' END AS ItemExistKbn '
// <GAI-2> ADD-END
                + ' FROM PayFbVariableItem FB '
                + ' LEFT OUTER JOIN PayVariableItem ITM '
                + ' ON ITM.ItemID = FB.ID '
                + ' AND ITM.MasterKbn = 22 '                                            // 22:取引先（仕入先）
                + ' AND ITM.PayNCode = :parPayNCode '                                   // 仕入先内部コード
                + ' AND ITM.PayPtnNo = :parPayPtnNo '                                   // 1:標準
                + ' AND ITM.RecSyubetu = 11 '                                           // 11:電信送金
                // 登録済みの可変項目
				+ ' WHERE (ITM.ItemID is not null) '
                // または初期表示区分、採用あり                                         // <GAI-2> MOD コメント 初期表示あり→修正
                + ' OR (FB.DefaultKbn = 1) '
// <222-4> MOD start
//                + ' ORDER BY (IF (ISNULL(OrderNo, 0) = 0) THEN 999 ELSE FB.OrderNo ENDIF), FB.ID ';
                + ' ORDER BY (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE FB.OrderNo ENDIF), FB.ID ';
// <222-4> MOD end

        SQl.Add   (strSQL);

        ParamByName('parPayNCode').AsFloat := nPayNCode;
        ParamByName('parPayPtnNo').AsFloat := m_nPayPtnNo2;

        if not Open () then
        begin
            Exit;
        end;

        if not Eof then
        begin
            Result := True;
            Exit;
        end;
	end;
end;

//*****************************************************************************
//	Process			:	可変項目情報取得 IDから1件取得
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/10
//	Parameter		:	strID			: 項目ID
//					:	strSimpleName	: 簡略名格納域
//					:	iDigit			: 桁数
//					:	strRemarks		: 備考
//	Return			:	True: 正常
//					:	False: 異常
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnGetPayFbVariable (strID: String;
									var strSimpleName: String;
									var iDigit: Integer;
                                    var strRemarks: String): Boolean;
var
	dmQuery		: TMQuery;
	strSQL		: String;
begin
	Result := False;
    strSimpleName := '';
    iDigit := 0;
    strRemarks := '';

	dmQuery	:= TMQuery.Create(self);
	m_cDataModule.SetDBInfoToQuery(m_cDBSelect, dmQuery);	// DBとMQueryの接続
    
	with dmQuery do
    begin
    	try
            Close ();
            SQL.Clear ();

            // 支払可変情報マスタ
            strSQL  := 'SELECT SimpleName, MaxDigit, Remarks '
                    + ' FROM PayFbVariableItem '
                    + ' WHERE ID = :parID ';

            SQl.Add   (strSQL);

            ParamByName('parID').AsString := strID;

            if not Open () then
            begin
                Exit;
            end;

            if not Eof then
            begin
            	strSimpleName 	:= FieldByName('SimpleName').AsString;
                iDigit 			:= FieldByName('MaxDigit').AsInteger;
                strRemarks 		:= FieldByName('Remarks').AsString;

                Result := True;
                Exit;
            end;

		finally
            Close();
			Free();
		end;
	end;
end;

//*****************************************************************************
//	Process			:	可変項目情報の検索Exp呼出
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/06
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure	TJNTCRP004006f.fnCallVariableExp();
var
    lvExpSend       : rcJNTExpSend;
    lvExpRecv       : rcJNTExpRecv;
    iExpRtn         : Integer;
begin

    // パラメータ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通エクスプローラのデータセット
    lvExpSend.pMjsAppRec := m_pRec;                             // MJS共通 Bpl管理構造ポインタ
    lvExpSend.pCopDB     := @m_cDBSelect;                       // TDatabaseポインタ
    lvExpSend.ColorB     := m_cComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := m_cComArea.SystemArea.SysColorD;

    lvExpSend.MasterKbn     := 9260;                        	// マスタ区分
    lvExpSend.ModulKbn      := 0;                           	// モジュール区分
    lvExpSend.PatternNo     := 1;                           	// パターンNO
    lvExpSend.TBarNM        := '可変項目' +  '検索ｴｸｽﾌﾟﾛｰﾗ';
    lvExpSend.TrRootCaption := '可変項目';
    lvExpSend.SortStr       := 'ORDER BY (IF (ISNULL(OrderNo, 0) = 0) THEN 1000 ELSE OrderNo ENDIF),ID';
    lvExpSend.GroupStr      := '';


    // 共通エクスプローラのデータセット
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    // キャンセル
    if iExpRtn <>1 then
        Exit;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode)) > 0 then
    begin
    	CmnMemDataVar.Edit;
        CmnMemDataVar.FieldByName('ID').AsString := lvExpRecv.GCode;
        CmnMemDataVar.FieldByName('SimpleName').AsString := lvExpRecv.Nmk;
    end;

	DBGridVar.SetFocus;

    Keybd_Event(VK_RETURN, 0, 0, 0);                        
end;

//*****************************************************************************
//	Process			:	F1 項目情報削除
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure TJNTCRP004006f.fnDeleteMemVar();
var
	//iIndex	: Integer;		//<222-7>DEL
    sVariableItemID	: String;	//<222-7>ADD
begin
 // <222-7>DEL↓
 //	iIndex := m_lstVariable.IndexOf(CmnMemDataVar.FieldByName('ID').AsString);
 //	m_lstVariable.Delete(iIndex);
 //	CmnMemDataVar.Delete;					// MemDataから削除する
 // <222-7>DEL↑
 // <222-7>ADD↓
    //TMSPFunctionBar.GetFuncCaptionやGetFuncEnabledでは現在の状態が取得できないのでuvFncInfoで確認する
 	if uvFncInfo.Caption[0] <> 'F1 項目情報削除' then Exit;
    if uvFncInfo.Enabled[0] =  False             then Exit;

	sVariableItemID := CmnMemDataVar.FieldByName('ID').AsString;

    if (MjsMessageBoxEx(Self,
    					'ID '+ sVariableItemID + 'の項目情報を削除します。よろしいですか？',
                        '項目情報削除',
                        mjQuestion,
                        mjYesNo,
                        mjDefNo) = mrYes) then
	begin
    	//重複ﾁｪｯｸ用ﾘｽﾄから削除
        m_lstVariable.Delete(m_lstVariable.IndexOf(sVariableItemID));

        // MemDataから削除する
        CmnMemDataVar.Delete;
    end;
 // <222-7>ADD↑
end;

//*****************************************************************************
//	Process			:	可変項目情報グリッドフォーカス時のステータスバーメッセージ
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure TJNTCRP004006f.fnSetStatusBarTxtVar();
begin
											// 内容
	if DBGridVar.FocusedColumn = GRIDVAR_CLM_ITEMVALUE then
    begin                                   // 備考をステータスバーに表示
    	CmnStatusBar.SimpleText := CmnMemDataVar.FieldByName('Remarks').AsString;
    end
    else                              		// その他のカラムではクリア
    begin
    	CmnStatusBar.SimpleText := '';
    end;
end;

//*****************************************************************************
//	Process			:	可変項目情報グリッドのF1:項目情報削除切り替え
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/20
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
procedure TJNTCRP004006f.fnSetFuncDelVar();
var
	bVisible	: Boolean;
begin
	bVisible := False;
	if m_cACControl = DBGridVar then
    begin
    	if CmnMemDataVar.RecordCount > 0 then
        begin
        	//if Trim(CmnMemDataVar.FieldByName('ID').AsString) <> '' then      //<222-7>DEL
// <GAI-2> MOD-STR
//            if (Trim(CmnMemDataVar.FieldByName('ID').AsString) <> '') and
//　　　　　   (not CmnMemDataVar.FieldByName('IsDefault').AsBoolean) then		//<222-7>ADD
            // 可変項目を初期表示設定関係なく削除
            // 可変項目のIDが空で、IDにフォーカスがあたっている時、F1表示
            if (Trim(CmnMemDataVar.FieldByName('ID').AsString) <> '') and
               (DBGridVar.FocusedColumn = GRIDVAR_CLM_ID) then
// <GAI-2> MOD-END
            begin
            	bVisible := True;
            end;
        end;
    end;

	fnSetFncType(1, bVisible);				// F1の切替
end;

//*****************************************************************************
//	Process			:	可変項目情報グリッド入力時の重複チェック
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	Nothing
//	Return			:	Nothing
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnExistVarItem(strItemID: String): Boolean;
begin
	Result := False;

    if m_lstVariable.IndexOf(strItemID) >= 0 then
    begin
    	Result := True;
    end;
end;

//*****************************************************************************
//	Process			:	標準支払方法を表示用区分→DB上の区分に変換
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	iDspPayKbn	: 表示用区分
//	Return			:	Integer		: DB上の区分
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnGaiPayKbn(iDspPayKbn: Integer): Integer;
var
	iCnt	: Integer;
begin
	Result := 0;
	for iCnt := Low(_GaiPayKbn) to High(_GaiPayKbn) do
    begin
    	if _GaiPayKbn[iCnt].iDspKbn = iDspPayKbn then
        begin
        	Result := _GaiPayKbn[iCnt].iKbn;
        	break;
        end;
    end;
end;

//*****************************************************************************
//	Process			:	標準支払方法をDB上の区分→表示用区分に変換
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/09
//	Parameter		:	iPayKbn		: DB上の区分
//	Return			:	Integer		: 表示用区分
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnDspGaiPayKbn(iPayKbn: Integer): Integer;
var
	iCnt	: Integer;
begin
	Result := 1;							// 1: 電信送金で初期化
	for iCnt := Low(_GaiPayKbn) to High(_GaiPayKbn) do
    begin
    	if _GaiPayKbn[iCnt].iKbn = iPayKbn then
        begin
        	Result := _GaiPayKbn[iCnt].iDspKbn;
        	break;
        end;
    end;
end;

//*****************************************************************************
//	Process			:	外部コードを表示用にフォーマット
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/11
//	Parameter		:	strGCode	: DBから取得した外部コード
//					:	iAttr		: 属性
//					:	iDigit		: 桁数
//	Return			:	String		: 表示用にフォーマットした外部コード
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnFormatDspCode(strGCode: String; iAttr: Integer; iDigit: Integer): String;
var
	strFormat	: String;
begin
	Result := strGCode;

    if iAttr <= 1 then						// 数字の場合
    begin
        case iAttr of
            0:	strFormat	:= '%'  + IntToStr (iDigit) + 'd';	// 0なし
            1:	strFormat	:= '%.' + IntToStr (iDigit) + 'd';	// 0つき
        end;

        Result := Format (strFormat, [StrToInt64 (Trim (strGCode))]);
	end;
end;

//***********************************************************************************************************/
//   外貨支払情報-採用区分のOnChangeイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnCmnEdit00019GaikaUseChange(Sender: TObject);
begin
 	fnCmnFunctionOnChange (Sender);

	fnChangeConditionGaikaParts();		   	// 外貨関係パーツの制御
end;

//***********************************************************************************************************/
//   可変項目情報グリッド IDのOnEditButtonClickイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVar_IDEditButtonClick(Sender: TObject);
begin
	fnCallVariableExp();
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnExitイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarExit(Sender: TObject);
begin
	if CmnMemDataVar.State in [dsEdit, dsInsert] then
    begin
    	CmnMemDataVar.Post;
    end;

	fnSetFncType(1, False);
    CmnStatusBar.SimpleText := '';			// ステータスバーの文言クリア
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnMouseDownイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	// 入力不可カラムをマウスクリックしたら近い入力カラムに移動
	case DBGridVar.FocusedColumn of
    	GRIDVAR_CLM_NAME:					// 項目名
        begin
        									// IDへ
			DBGridVar.FocusedColumn := GRIDVAR_CLM_ID;
        end;
        GRIDVAR_CLM_DIGIT:					// 桁数
        begin
        									// 内容へ
			DBGridVar.FocusedColumn := GRIDVAR_CLM_ITEMVALUE;
        end;
	end;
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnKeyPressイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarKeyPress(Sender: TObject; var Key: Char);
begin
	case DBGridVar.FocusedColumn of
    	GRIDVAR_CLM_ID,						// ID
        GRIDVAR_CLM_ITEMVALUE:				// 内容
        begin
            case (Key) of
                Char (VK_BACK),
                Char (VK_RETURN),'0'..'9','A'..'Z',' ','/','-','?',':','(',')','.',',','''','+' :
                begin
                	// OK
                end;
                // 小文字は大文字に
                '{':		Key	:= '(';
                '[':		Key	:= '(';
                '}':		Key	:= ')';
                ']':		Key	:= ')';
                'ｰ':		Key	:= '-';
                'a'..'z':	Key	:= Chr (Ord (Key) - 32);
                // それ以外はNG
                else
                begin
                    Beep;
	                Abort ();
                end;
            end;
        end;
    end;
// <222-4> ADD start
	{ 新規行を追加してEnterで送り、空行のID列で↑キーを押すと直前の行のIDが入力できるのを防ぐ対応 }
											// ID
	if DBGridVar.FocusedColumn = GRIDVAR_CLM_ID then
	begin
    										// 新規行でなければ入力不可
        if not CmnMemDataVar.FieldByName('RecId').IsNull then
        begin
        	Abort();
        end;
    end;
// <222-4> ADD end
end;

//***********************************************************************************************************/
//   可変項目情報MemDataのBeforePostイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnCmnMemDataVarBeforePost(DataSet: TDataSet);
var
	iDigit			: Integer;
	strID			: String;
    strSimpleName	: String;
    strRemarks		: String;
begin
	strID := Trim(CmnMemDataVar.FieldByName('ID').AsString);

	// IDが空はNG
	if strID = '' then
    begin
    	Beep;
        Abort;
    end;

    // 登録されている海外送金可変項目かチェック
    if not fnGetPayFbVariable(strID, strSimpleName, iDigit, strRemarks) then
    begin
        Abort;
        Exit;
    end;

    // IDの重複チェック
    										// 新規 or ID変更
    if (CmnMemDataVar.FieldByName('ID_Save').AsString = '') or
		(strID <> CmnMemDataVar.FieldByName('ID_Save').AsString) then
    begin
        if fnExistVarItem(strID) then
        begin
            Beep;
            MjsMessageBoxEx(Self, MSG_VAR_DUPLICATE, MSG_CAP_INSERT, mjInformation,mjOk, mjDefOk);
            Abort;
        end
        else
        begin
											// IDを保存
            CmnMemDataVar.Edit;
            CmnMemDataVar.FieldByName('ID_Save').AsString := strID;
        end;
	end;
end;

//***********************************************************************************************************/
//   可変項目情報MemDataのAfterPostイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnCmnMemDataVarAfterPost(DataSet: TDataSet);
var
	iIndex	: Integer;
	nItems	: Integer;
    objEvt	: TDataSetNotifyEvent;
begin
	objEvt := nil;

    iIndex := m_lstVariable.IndexOf(CmnMemDataVar.FieldByName('ID_Save').AsString);

	// 既存の行を編集した場合
    if iIndex >= 0 then
    begin
		m_lstVariable[iIndex] := CmnMemDataVar.FieldByName('ID').AsString;
    end
    // 新規に追加した場合
    else
    begin
		m_lstVariable.Add(CmnMemDataVar.FieldByName('ID').AsString);
    end;

	// 変更フラグON
	for	nItems := 0 to m_cCheckItems.Count - 1 do
	begin
		if	(PCheckItemRec (m_cCheckItems.Items [nItems])^.nFieldID = 9005) then	// 可変項目情報Grid
		begin
			PCheckItemRec (m_cCheckItems.Items [nItems])^.fNoCheck		:= True;
			PCheckItemRec (m_cCheckItems.Items [nItems])^.fChangeData	:= True;

			Break;
		end;
	end;

end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnEnterイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarEnter(Sender: TObject);
begin
	m_cACControl := DBGridVar;
	fnSetFuncDelVar();
	fnSetStatusBarTxtVar();
                                          	// 入力できる最大文字数を項目ごとにかえる
    DBGridVar_ItemValue.MaxLength := CmnMemDataVar.FieldByName('Digit').AsInteger;
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnChangeColumnイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
begin
    fnSetFuncDelVar();          // <GAI-2> ADD
	fnSetStatusBarTxtVar();
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnChangeNodeExイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarChangeNodeEx(Sender: TObject);
begin
	fnSetStatusBarTxtVar();					// 行が変わったら表示内容をかえる
    fnSetFuncDelVar();						// F1:項目情報削除の表示切替
                                          	// 入力できる最大文字数を項目ごとにかえる
    DBGridVar_ItemValue.MaxLength := CmnMemDataVar.FieldByName('Digit').AsInteger;
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnEditingイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarEditing(Sender: TObject;
  Node: TdxTreeListNode; var Allow: Boolean);
begin
	// ID
	if DBGridVar.FocusedColumn = GRIDVAR_CLM_ID then
    begin
// <222-4> MOD start
    										// 最初から表示している行のIDは変更不可
//        if CmnMemDataVar.FieldByName('CantChange').AsBoolean then
											// 新規行以外のIDは変更不可
		if not CmnMemDataVar.FieldByName('RecId').IsNull then
// <222-4> MOD end
        begin
        	Allow := False;
        end;
    end;
end;

//***********************************************************************************************************/
//   可変項目情報グリッドのOnBeforeChangeColumnイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.fnDBGridVarBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	strID			: String;
    strSimpleName	: String;
    strRemarks		: String;
    iDigit			: Integer;
begin

    // 空行の場合は抜ける
	if CmnMemDataVar.IsEmpty then
    begin
		Exit;
    end;

    case Column of						// 移動前のカラム
        GRIDVAR_CLM_ID:    				// ID
        begin
        	strID := CmnMemDataVar.FieldByName('ID').AsString;
            // IDが空はNG
            if strID = '' then
            begin
                Beep;
                CanChange := FALSE;
                Exit;
            end
			else
            begin
            	// 変更されていない場合は抜ける
                if strID = CmnMemDataVar.FieldByName('ID_Save').AsString then
                begin
                    Exit;
                end;

                // IDの重複チェック
                if fnExistVarItem(strID) then
                begin
                	Beep;
                    CanChange := FALSE;
                    Exit;
                end;
            end;

            // 可変項目情報取得
            if not fnGetPayFbVariable(strID, strSimpleName, iDigit, strRemarks) then
            begin
                Beep;
                CanChange := FALSE;
                Abort;
                Exit;
            end;

            if strSimpleName = '' then
            begin
                Beep;
                CanChange := FALSE;
                Exit;
			end;

            CmnMemDataVar.Edit;
            CmnMemDataVar.FieldByName('SimpleName').AsString := strSimpleName;
            CmnMemDataVar.FieldByName('Digit').AsInteger := iDigit;
            CmnMemDataVar.FieldByName('Remarks').AsString := strRemarks;
			CmnMemDataVar.FieldByName('ItemValue').AsString := '';
//            CmnMemDataVar.FieldByName('CantChange').AsBoolean 	:= False;	// <222-4> DEL

            DBGridVar_ItemValue.MaxLength := iDigit;	// 最大文字数
        end;
    end;
end;

//*****************************************************************************
//	Process			:	外貨債務連動パラメータセット
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/16
//	Parameter		:	exNCode	: 支払先内部コード
//					:	ProgRendoParamG	: パラメータ
//					:	bRendoInitG		: 処理結果(終了処理判定用)
//	Return			:   Integer			: 処理結果
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnSetRendoInitG(exNCode: Extended;
							ProgRendoParamG: TJNTPAYProgRendoParamG; var bRendoInitG: Boolean): Integer;
begin
    bRendoInitG := False;

    if m_ProgRendoGFlg then
    begin
        // 進捗連動 初期処理
        ProgRendoParamG.pAppRecord    := Pointer(m_pRec);
        ProgRendoParamG.dPAYCode      := exNCode;
        ProgRendoParamG.iNayoseChgKbn := 0;              // 変更無し
        ProgRendoParamG.iSyoriKbn     := 0;              // 支払情報登録系処理

        Result := m_PayProgRendoG.Init(ProgRendoParamG);
        bRendoInitG := True;
    end
    else
    begin
        Result := 0;

        if m_bModifyGaikaFlg then
        begin
            ProgRendoParamG.pAppRecord    := Pointer(m_pRec);
            ProgRendoParamG.dPAYCode      := exNCode;
            ProgRendoParamG.iNayoseChgKbn := 0;       	// 変更無し
            ProgRendoParamG.iSyoriKbn     := 0;

            case m_PayProgRendoG.Init(ProgRendoParamG) of
                0:  m_bModifyGaikaFlg := False;         // 申請ロールバックの必要なし
                1:  begin                               // 要ロールバック
                        Result := 1;
                        bRendoInitG := True;
                    end;
            	else
                	Result := 10;                    	// 上記以外はエラー
            end;
        end;
    end;
end;

//*****************************************************************************
//	Process			:	画面の取引先外部コードから内部コードを返却
//	Name			:	K.Kato(PRIME)
//	Date			:	2013/12/20
//	Parameter		:	Nothing
//	Return			:   Extended	: 支払先内部コード -1: エラー
//	History			:	YYYY/MM/DD
//*****************************************************************************
function TJNTCRP004006f.fnGetPayNCode(): Extended;
var
	strHojCode	: String;
begin
    // 取引先ｺｰﾄﾞﾁｪｯｸ
    if	(m_nCurCodeAttribute <= 1) then
    begin
        if	(CmnEdit00001HojCodeNumeric.InputFlag) then
        begin
            strHojCode	:= ''
        end
        else
        begin
            strHojCode	:= Format ('%.16d', [Trunc (CmnEdit00001HojCodeNumeric.Value)]);
        end;
    end
    else
    begin
        strHojCode		:= CmnEdit00001HojCodeFree.Text;
    end;

    // ''時
    if  strHojCode = '' then
    begin
        Result := 0;
        Exit;
    end;

    Result := fnGetNCODE(strHojCode);
end;
// <222> ADD end

// <GAI-2> ADD-STR
//***********************************************************************************************************/
//   可変項目情報グリッドのOnCustomDrawCellイベント
//***********************************************************************************************************/
procedure TJNTCRP004006f.DBGridVarCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);

begin
    // 青色の列はID、簡略名、最大桁数
    if ((AColumn.Index in [0,1,2]) = True) then
    begin
        if (CmnMemDataVarIsDefault.AsBoolean = True) then
        begin
            AFont.Color := clBlue;
        end
        else
        begin
            AFont.Color := clWindowText;
        end;
    end
    else
    begin
    end;
end;
// <GAI-2> ADD-END

//<#TAX10> ADD-STR
procedure TJNTCRP004006f.dxDBGridSelectCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
begin
    if CmnMemDataOffset.RecordCount = 0 then Exit;

    if AColumn = CmnGridOffsetColumnTaxRateDesc then
    begin
		// 軽減税率の背景色をセット
		SetTaxCodeBackColor(AColor,
							m_TaxRateInfo.IsReducedTaxRate(IsNullCheckInteger(ANode.Values[CmnGridOffsetColumnTaxRate.Index])),
							m_TaxRateInfo.BGColor);
    end;
end;

//******************************************************************************
//* Process	: 消費税率名称取得
//******************************************************************************
function  TJNTCRP004006f.fnGetTaxRateName(nRateCD: Integer): String;
begin
	Result := '';

    if m_TaxRateInfo.GetTaxRateByRateCD(nRateCD) <> 0 then
    begin
		Result  :=  FormatCurr('0.#0', m_TaxRateInfo.GetTaxRateByRateCD(nRateCD)) + '%';
    end;
end;
//<#TAX10> ADD-END

end.
//***********************************************************************************************************/
//*																											*/
//* End of Specifications																					*/
//*																											*/
//***********************************************************************************************************/


