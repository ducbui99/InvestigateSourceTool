//*****************************************************************************************************
//*
//*		Systeme			:   ＦＸ共通マスター
//*		Program			:   工事/プロジェクト登録
//*		ProgramID		:	JNTCRP018001
//*		Name			:	井上 佳美(LEAD)
//*		Create			:
//*		Comment			:	XXXXXXXXXXXXXXXXXXXXXX
//*
//*     History
//*     <ﾏｰｸ>   <修正者>        <修正日>        <修正内容>
//*     <100>   井上佳美(LEAD)  2005/06/24(Fri) ﾌﾘｰ項目ﾀﾞｲｱﾛｸﾞ対応
//*     <101>   井上佳美(LEAD)  2005/06/29(Wed) ｶｰﾄﾞ型画面に付箋追加
//*     <102>   井上佳美(LEAD)  2005/07/11(Mon) ﾌﾘｰ項目ﾀﾞｲｱﾛｸﾞ最新版対応（新規のも登録可能に）
//*     <103>   井上佳美(LEAD)  2005/07/27(Wed) 権限機能を追加（印刷）
//*     <104>   井上佳美(LEAD)  2005/08/01(Mon) 権限機能を追加（新規・更新）
//*     <105>   高橋功二(LEAD)  2005/08/31(Wed) 検索EXPの仕様変更対応
//*     <   >   高橋功二(LEAD)  2005/09/06(Tue) Jituzai_ChkBox_Tokusyuはﾌﾟﾛｼﾞｪｸﾄのとき非表示
//*     <106>   高橋功二(LEAD)  2005/09/07(Wed) 画面ﾚｲｱｳﾄの変更
//*     <   >   高橋功二(LEAD)  2005/09/07(Wed) ｷｰ動作を全体的に修正
//*     <107>   高橋功二(LEAD)  2005/09/07(Wed) ｺﾝﾎﾞ(ECombo_Header)変更時にｺｰﾄﾞの属性が違って
//*                                             いるとｴﾗｰが発生する不具合修正
//*                                             (VTreeViewChangeが発生しないように修正)
//*     <108>   高橋功二(LEAD)  2005/09/07(Wed) 工事完成振替登録のﾌﾟﾛｼﾞｪｸﾄ一覧に工事ﾏｽﾀは表示しない
//*     <109>   高橋功二(LEAD)  2005/09/07(Wed) 不明な処理をｺﾒﾝﾄ
//*     <110>   高橋功二(LEAD)  2005/09/08(Thu) OnPaintの処理を別関数(fnInitialize)へ変更
//*                                             初期ﾌｫｰｶｽを以下のように修正
//*                                             工事    :ｺﾝﾎﾞを入力不可にしてｸﾞﾘｯﾄﾞへ
//*                                             ﾌﾟﾛｼﾞｪｸﾄ:ｺﾝﾎﾞを入力可にしてｺﾝﾎﾞへ
//*     <111>   高橋功二(LEAD)  2005/09/08(Thu) 加算体系 不正ﾚｺｰﾄﾞ復旧処理の追加
//*     <112>   飯塚健介(LEAD)  2005/09/21(Wed) 並べ替え対応
//*     <113>   飯塚健介(LEAD)  2005/09/21(Wed) ﾌｧﾝｸｼｮﾝ機能対応(F1ﾌﾘｰ項目/F8正式名称ｺﾋﾟｰ)
//*     <114>   飯塚健介(LEAD)  2005/09/21(Wed) 検索機能実装
//*     <115>   飯塚健介(LEAD)  2005/09/21(Wed) 予定工期と実績工期の大小判定
//*     <116>   飯塚健介(LEAD)  2005/09/23(Fri) KojiInfo.SaleBaseに常に0をｾｯﾄ(2次対応で修正予定)
//*     <117>   飯塚健介(LEAD)  2005/09/27(Fri) ｾｸﾞﾒﾝﾄに記号が入力出来ないのを修正
//*     <118>   茂木勇次(LEAD)  2005/10/12(WED) 契約・入金情報ﾀﾌﾞで税率が[0:標準税率]の時に消費税額が計算されない不具合対応。
//*     <119>   茂木勇次(LEAD)  2005/10/14(FRI) ﾌﾟﾛｼﾞｪｸﾄｺﾝﾎﾞで↓Enterｷｰで処理が起動しない不具合対応。
//*     <120>   茂木勇次(LEAD)  2005/10/14(FRI) 初回の諸口ﾀﾞｲｱﾛｸﾞでｷｬﾝｾﾙ指定したのにｸﾞﾘｯﾄﾞで入力できてしまう不具合対応。
//*     <   >   茂木勇次(LEAD)  2005/10/18(TUE) DESIGNの修正。
//*     <121>   茂木勇次(LEAD)  2005/10/18(TUE) 工事完成振替ﾀﾌﾞのｸﾞﾘｯﾄﾞｺｰﾄﾞに検索ｴｸｽﾌﾟﾛｰﾗ機能の追加。
//*     <122>   茂木勇次(LEAD)  2005/10/18(TUE) 工事完成振替ﾀﾌﾞでｾｸﾞﾒﾝﾄ時の名称の取得に関する不具合対応。
//*     <123>   茂木勇次(LEAD)  2005/10/18(TUE) 属性:ﾌﾘｰ時に「特殊工事として使用」にﾁｪｯｸを付加するとSQLｴﾗｰとなる不具合対応。
//*     <124>   茂木勇次(LEAD)  2005/10/18(TUE) 変数をｸﾗｽ内定義していないので、該当の変数を工事/ﾌﾟﾛｼﾞｪｸﾄの中で共通のｱﾄﾞﾚｽに対してｱｸｾｽ
//*                                             し変数を書換えてしまう為、ｸﾗｽ内に移動しました。
//*     <125>   茂木勇次(LEAD)  2005/10/18(TUE) TMTreeViewのTopNode時にPopupMenuで詳細が使用できてしまう不具合対応。
//*     <   >   茂木勇次(LEAD)  2005/10/19(WED) 詳細画面の基本情報ﾀﾌﾞ-配賦区分,xxx管理区分で存在しないｺｰﾄﾞを選択すると
//*                                             工事ﾀﾌﾞへ移動してしまう。⇒Validateをfalse⇒trueへ変更。
//*     <   >   茂木勇次(LEAD)  2005/10/19(WED) 実在/合計ｸﾞﾘｯﾄﾞの連想を12ﾊﾞｲﾄ⇒10ﾊﾞｲﾄへ変更。
//*                                             TdxDBGrid及びTdxMemdataのSizeを変更。
//*     <126>   加藤(PRIME)     2005/10/27(THU) 終了確認機能追加
//*     <127>   加藤(PRIME)     2005/10/27(THU) 削除ﾒｯｾｰｼﾞ修正
//*     <128>   加藤(PRIME)     2005/11/17(THU) ML時の印刷条件ﾀﾞｲｱﾛｸﾞをﾌﾟﾛｼﾞｪｸﾄから削除
//*     <129>   加藤(PRIME)     2005/11/21(MON) ｷｰ動作修正
//*     <130>   加藤(PRIME)     2005/11/21(MON) 工事BSでも完成振替部門が登録できるように変更
//*     <131>   加藤(PRIME)     2005/11/28(MON) 履歴用ｽﾄｱﾄﾞ呼び出し
//*     <132>   加藤(PRIME)     2005/11/28(MON) 工事登録の場合のｷｰ動作修正
//*     <133>   加藤(PRIME)     2005/12/05(MON) ﾌﾘｰ項目Dlg呼出の引数修正
//*     <134>   加藤(PRIME)     2005/12/09(FRI) 工種ﾊﾟﾀｰﾝNOが登録されていると印刷時にｴﾗｰ
//*     <135>   広田(PRIME)     2005/12/13(TUE) 帳票に完成振り替え部門名が出ない対応
//*     <136>   加藤(PRIME)     2005/12/27(TUE) ﾌﾟﾛｼﾞｪｸﾄ登録の初期表示時にｸﾞﾘｯﾄﾞの付箋ｶﾗﾑが灰色になるのを修正
//*     <137>   加藤(PRIME)     2005/12/27(TUE) 工事登録の一覧ｸﾞﾘｯﾄﾞで削除ﾎﾞﾀﾝが有効にならない不具合修正
//*     <138>   加藤(PRIME)     2006/01/12(THU) 予定工期・実績工期がﾃﾞﾌｫﾙﾄ日付のときの帳票・ﾌｧｲﾙ出力修正
//*     <139>   加藤(PRIME)     2006/01/12(THU) 帳票・ﾌｧｲﾙ出力の出力項目修正
//*     <140>   加藤(PRIME)     2006/01/12(THU) 計上基準区分は画面を有効にするまで保留とする（帳票・ﾌｧｲﾙ）
//*     <141>   加藤(PRIME)     2006/01/12(THU) 一覧で登録すると予定工期・実績工期が1899/12/31になる不具合修正
//*     <142>   加藤(PRIME)     2006/01/17(TUE) 実在簡略・合計簡略・合計詳細を出力
//*     <CHK>   加藤(PRIME)     2006/02/15(WED) 削除ﾁｪｯｸ対応
//*     <143>   加藤(PRIME)     2006/03/06(MON) ｽﾃｰﾀｽﾊﾞｰにﾒｯｾｰｼﾞが残る不具合修正
//*     <144>   加藤(PRIME)     2006/03/07(TUE) 受注先名対応 名称入力ｺﾝﾄﾛｰﾙ追加
//*     <145>   加藤(PRIME)     2006/03/08(WED) 詳細型帳票に備考追加
//*     <146>   飯塚健介(LEAD)  2006/03/28(TUE) 法人区分関係なしに採用区分で採用が無い場合には処理を終了させる(MJS金子様確認)
//*     <147>   飯塚健介(LEAD)  2006/03/28(TUE) ﾌﾟﾛｼﾞｪｸﾄで採用区分が無い場合に「工事採用が無い為」と表示されるのを修正
//*     <148>   飯塚健介(LEAD)  2006/03/28(TUE) 諸口ﾀﾞｲｱﾛｸﾞｷｬﾝｾﾙ後、処理終了する際に、更新要求が出てしまい、更新すると不要なﾚｺｰﾄﾞが作成されてしまう不具合対応
//*     <149>   飯塚健介(LEAD)  2006/03/28(TUE) 不要なﾊﾟﾗﾒｰﾀを削除
//*     <150>   飯塚健介(LEAD)  2006/03/28(TUE) HojyoMAを削除(RDelKbn=1)するﾀｲﾐﾝｸﾞでHojyoTreeが削除されない不具合を修正
//*     <151>   茂木勇次(LEAD)  2006/04/03(MON) 会計評価No.239 詳細画面時にﾂﾘｰﾌｫｰｶｽ時にF1ｷｰでﾌﾘｰ項目ﾀﾞｲｱﾛｸﾞが起動するように修正。
//*     <152>   茂木勇次(LEAD)  2006/04/03(MON) 会計評価No.469 ﾌﾟﾛｼﾞｪｸﾄ指示ｺﾝﾎﾞにﾌｫｰｶｽがある状態でﾌｧﾝｸｼｮﾝF1:ﾌﾘｰ項目機能が使用可状態になっている。
//*     <153>   茂木勇次(LEAD)  2006/04/03(MON) 会計評価No.472 詳細ﾊﾟﾈﾙにおいて、正式名称から←ｷｰでｺｰﾄﾞ欄にﾌｫｰｶｽが移動しない不具合修正。
//*     <154>   茂木勇次(LEAD)  2006/04/03(MON) 会計評価No.33  F2:入力ﾓｰﾄﾞ切替機能でﾌｧﾝｸｼｮﾝﾊﾞｰから実行できない不具合対応。
//*     <155>   H.Endo(MJS)     2006/06/20		申請書対応
//*     <156>   H.Endo(MJS)     2006/06/21		SHK05-006 統合工事名称が正しくない
//*     <157>   H.Endo(MJS)     2006/06/23		ﾌﾟﾛｼﾞｪｸﾄ登録の合計の詳細に｢契約･入金情報｣のﾀﾌﾞを表示させる
//*     <158>   H.Endo(MJS)     2006/06/26		分類帳票追加
//*     <159>   H.Endo(MJS)     2006/06/27		集計部門ｺｰﾄﾞで検索EXP表示時に部門の属性が文字の時ｴﾗｰが表示される
//*	    <160>   H.Endo(MJS)     2006/07/25		申請書対応で詳細の項目のTABを2度押すと申請書内容が消えてしまう
//*	    <161>   H.Endo(MJS)     2006/08/28		Key操作の修正
//*											    ①備考でのKey操作
//*												    Enter		→	更新ﾎﾞﾀﾝへ移動
//*												    Enter+Ctrl	→	備考の改行
//*												    Enter+Shift	→	何もしない
//*											    ②工事完成振替で最終行でのEnterは更新ﾎﾞﾀﾝへ移動
//*	    <162>   H.Endo(MJS)     2006/08/29		工事完成振替の表示方法修正
//*	    <163>   H.Endo(MJS)     2006/09/14		契約情報の(内)消費税への入力が出来てしまう
//*	    <164>   H.Endo(MJS)     2006/10/30		①担当者名称が…ボタンに掛かかるのでLeft値を変更<T0023>
//*										        ②詳細画面で日付フィールドのカレンダー呼び出しボタンが…となっている。▼が正しい。<T0024>
//*										　        [ArrowType] atOmission → atArrow に変更
//*										        ③KEY操作の修正　TreeView　SHFT+TAB→選択Comboに移動(ﾌﾟﾛｼﾞｪｸﾄ登録の時のみ)
//*										        ④KEY操作の修正　取消ﾎﾞﾀﾝ　TAB,RIGHT,DOWN→ｺｰﾄﾞ入力に移動
//*     <165>   鈴木(PRIME)     2006/12/18(MON) ｺｰﾄﾞ16桁入力時に数字が化けないよう修正
//*     <166>   高橋功二(LEAD)  2007/01/25(THU) ﾏｽﾀ重複対応(ﾒｯｾｰｼﾞの統一) Ver1.07正式版(2007/2)にてﾘﾘｰｽ
//*     <167>   高橋功二(LEAD)  2007/01/26(FRI) 売上計上区分を入力可能とする(Ver1.07正式版では非表示とします)
//*                                             ※ 上記<116>、<140>を解除
//*     <168>   茂木勇次(LEAD)  2007/03/12(MON) 契約情報／入金情報の順序を保持し、再表示時に前回登録順序で表示する。
//*     <169>   茂木勇次(LEAD)  2007/03/14(WED) 工事進行基準採用工事の場合、契約情報で異なる税率が指定できないようにｶﾞｰﾄﾞを掛ける。
//*                                             売上計上基準の表示。
//*     <170>   茂木勇次(LEAD)  2007/03/14(WED) 契約・入金情報ﾀﾌﾞで同一日付ｴﾗｰ状態で更新ﾎﾞﾀﾝを押下し、各種ｸﾞﾘｯﾄﾞへﾌｫｰｶｽを移動すると
//*                                             TMQuery「Syokuchikbnが見つかりません」のｴﾗｰが発生する不具合対応。
//*     <171>   茂木勇次(LEAD)  2007/03/15(THU) 契約・入金情報ﾀﾌﾞの各種入力ｸﾞﾘｯﾄﾞでﾛｰ編集状態時に別ﾀﾌﾞへ移動させると、仮にｴﾗｰ状態でも
//*                                             postされてしまい、同一の日付等が登録できてしまう不具合対応。
//*     <172>   茂木勇次(LEAD)  2007/03/26(MON) ﾏｽﾀ同期対応(ｸﾞﾙｰﾌﾟ会社管理対応)
//*                                             ﾏｽﾀ同期対応に伴い、契約・入金予定の更新方法を洗替から通常更新に変更。
//*     <173>   茂木勇次(LEAD)  2007/04/04(WED) 特殊工事ﾁｪｯｸが付加されない不具合対応(内部ｺｰﾄﾞ未対応の為)
//*     <174>   茂木勇次(LEAD)  2007/04/04(WED) 参照ﾓｰﾄﾞの時、ﾂｰﾙﾊﾞｰ上の付箋ﾎﾞﾀﾝが使用可能な為、押下するとｱﾄﾞﾚｽ違反が発生する。
//*                                             参照ﾓｰﾄﾞの場合は付箋は使用不可とする。
//*     <175>   茂木勇次(LEAD)  2007/04/04(WED) 参照ﾓｰﾄﾞの場合に、切出&埋込を行うと、[並び替え]ﾎﾞﾀﾝが非表示となる。
//*                                             非表示→使用不可へ変更。
//*     <176>   茂木勇次(LEAD)  2007/04/04(WED) 参照ﾓｰﾄﾞの時、ﾂﾘｰﾋﾞｭｰでﾏｳｽ右ｸﾘｯｸ(ﾎﾟｯﾌﾟｱｯﾌﾟ)でｱﾄﾞﾚｽ違反が発生する。
//*                                             現状、参照ﾓｰﾄﾞの場合にｲﾍﾞﾝﾄを抑止するようにしましたが、最終的には他のﾏｽﾀと動作を合わせる必要有。
//*     <177>   茂木勇次(LEAD)  2007/04/06(FRI) 契約情報ｸﾞﾘｯﾄﾞで、和暦西暦区分を西暦設定すると、契約NOに英数字が入力できなくなる不具合対応。
//*     <178>   茂木勇次(LEAD)  2007/04/10(TUE) 画面起動時の描画問題対応。ﾌﾟﾛｼﾞｪｸﾄが複数ある場合は、ComboBoxのDroppedDownを起動させる。
//*     <179>   茂木勇次(LEAD)  2007/04/10(TUE) 契約年月日及び入金予定日の同一日ﾁｪｯｸを外す。
//*     <180>   茂木勇次(LEAD)  2007/04/10(TUE) 詳細画面で並替処理を行った後、更新(新規)を行うと、fnHojyoTreeWriteのstWorkRec^iNCodeでｱﾄﾞﾚｽ違反が発生する不具合対応。
//*     <181>   茂木勇次(LEAD)  2007/04/17(TUE) 付箋の使用可・不可制御の不具合対応。
//*     <182>   茂木勇次(LEAD)  2007/04/17(TUE) ﾌﾟﾛｼﾞｪｸﾄの場合に処理ｺﾝﾎﾞにﾌｫｰｶｽを移動した時、DroppedDownを起動させる。
//*     <183>   茂木勇次(LEAD)  2007/05/06(SUN) 処理終了時に、ｸﾞﾙｰﾌﾟ会計を行っている場合は、一括配信DLGを呼出。
//*     <184>   茂木勇次(LEAD)  2007/05/06(SUN) ｸﾞﾙｰﾌﾟ会計採用時に、追加・更新・削除を行った後、SecHojyoDispInfoのﾒﾝﾃを行う。
//*     <185>   茂木勇次(LEAD)  2007/05/17(THU) 完成振替部門で検索Expから0ｺｰﾄﾞを選択するとｺｰﾄﾞ、名称がｺﾝﾄﾛｰﾙに反映されない不具合対応。
//*     <186>   茂木勇次(LEAD)  2007/06/07(THU) 諸口登録時の場合に、SecHojyoDispInfoのﾒﾝﾃを行うように修正。
//*     <187>   茂木勇次(LEAD)  2007/06/07(THU) 全社でも一括配信DLGを呼出。
//*     <188>   茂木勇次(LEAD)  2007/06/07(THU) 子社で契約・入金情報を削除した場合全社の契約・入金情報(KojiInfo2)も削除を行う。
//*     <189>   茂木勇次(LEAD)  2007/06/12(TUE) 契約・入金情報削除時の不具合対応。
//*     <190>   茂木勇次(LEAD)  2007/06/13(WED) 契約情報で取消ｱｸｼｮﾝまたは、ﾂﾘｰでﾌﾟﾛｼﾞｪｸﾄを変更した場合に、情報がｸﾞﾘｯﾄﾞ上に残ってしまう不具合対応。
//*     <191>   鈴木(PRIME)     2007/07/09(MON) 売上計上科目ｺｰﾄﾞを内部ｺｰﾄﾞで更新するように修正
//*		<   >   鈴木(PRIME)     2007/07/09(MON) 売上計上科目ｺｰﾄﾞ8桁対応
//*		<   >   鈴木(PRIME)     2007/07/10(TUE) ｺｰﾄﾞ16桁対応
//*		<192>   鈴木(PRIME)     2007/07/18(WED) 切出するとｴﾗｰﾒｯｾｰｼﾞが表示されてしまう不具合を修正
//*     <193>   鈴木(PRIME)     2007/07/20(FRI) 決算確定時にﾂﾘｰのﾎﾟｯﾌﾟｱｯﾌﾟの付箋、ﾂｰﾙﾊﾞｰの付箋ﾎﾞﾀﾝを有効にするように修正
//*     <194>   鈴木(PRIME)     2007/07/27(FRI) 工事が採用されていない場合は配信ﾀﾞｲｱﾛｸﾞを動作しないように修正
//*     <195>   鈴木(PRIME)     2007/07/27(FRI) 工事進行基準を採用していない場合でも売上計上基準のﾗﾍﾞﾙはｸﾞﾚｰにしないように修正
//*		<196>   鈴木(PRIME)     2007/08/06(MON) ﾌﾘｰ項目ﾀﾞｲｱﾛｸﾞでｺｰﾄﾞが指数表示されてしまう不具合を修正
//*     <197>   鈴木(PRIME)     2007/08/09(THU) 配信ﾀﾞｲｱﾛｸﾞの呼び出し条件の修正
//*		<198>   鈴木(PRIME)     2007/08/21(TUE) 追加権限または修正権限がなしの場合、削除ができない不具合を修正
//*		<199>   鈴木(PRIME)     2007/08/22(WED) 追加権限および修正権限がなしの場合、ﾃﾞｰﾀが表示されない不具合を修正
//*		<200>   鈴木(PRIME)     2007/09/05(WED) 作業内訳(工種)がなしの場合、管理区分に「2」を入力できないように修正
//*	    <201>   小柴尚子(MJS)	2007/11/22(THU)	消費税率に不課税を追加。（海外での工事は不課税に該当！？）
//*		<201>   鈴木(PRIME)     2008/02/19(TUE) ｸﾞﾘｯﾄﾞにﾃﾞｰﾀが正しく表示されない不具合を修正
//*     <202>   大竹文顕(LEAD)  2008/03/14(FRI) 更新担当者内部ｺｰﾄﾞのｾｯﾄ
//*		<203> 	鈴木(PRIME)		2008/05/13(TUE) J-SOXﾏｽﾀ更新履歴対応
//*		<204>   鈴木(PRIME)     2008/05/14(WED) 同一部門ｺｰﾄﾞ対応
//*     <205>   T.Miyagi(RIT)   2008/06/25(THU) 323027建設工事業改良　2-3　工事マスターと受注マスター連携に伴う改良
//*     <206>   T.Miyagi(RIT)   2008/08/29(FRI) 契約情報の税率クリック時の表示不具合修正
//*     <207>   T.Ogawa(RIT)    2008/09/01(MON) DB更新時、名称に改行が入るのを防ぐ対応
//*     <208>   T.Miyagi(RIT)   2008/09/05(FRI) 323027建設工事業改良　2-3　工事マスターと受注マスター連携に伴う改良
//*                                              ・新規連動申請書式「4101：工事登録申請書（建設工事業オプション用申請書）」取込対応
//*     <209>   T.Miyagi(RIT)   2008/09/26(FRI) 「備考・概要」の表示順を「概要・備考」に変更
//*     <210>   T.Miyagi(RIT)   2008/10/03(FRI) 特殊工事チェックボタンをONで更新するとエラーが発生する不具合を修正
//*     <211>   T.Miyagi(RIT)   2008/10/21(TUE) 売上高自動振替区分の追加
//*     <212>   T.Miyagi(RIT)   2008/10/21(TUE) 契約情報MAX件数8件→999件に変更、取引先の追加...契約情報、入金情報タブを分ける
//*     <213>   T.Miyagi(RIT)   2008/10/22(WED) 連続50件登録するとエラーが発生する不具合を修正。
//*     <214>   T.Miyagi(RIT)   2008/11/26(WED) 申請書取込処理変更に伴う修正(SwkForm→SinFormに変更)
//*     <215>   T.Miyagi(RIT)   2008/12/11(TUE) 999件登録処理不具合対応
//*     <216>   T.Miyagi(RIT)   2008/12/12(FRI) 売上高自動振替区分のフォーカス遷移不具合修正
//*     <217>   E.Nanba(Lab)    2009/01/15(THU) グループ別セキュリティボタン追加
//*     <218>   T.Miyagi(RIT)   2009/01/26(MON) 施主コード不具合修正
//*     <219>   T.Miyagi(RIT)   2009/01/30(FRI) 一覧画面にて更新時の売上高自動振替区分のデフォルト値変更
//*     <220>   T.Miyagi(RIT)   2009/01/30(FRI) 不具合対応
//*     <221>   T.Miyagi(RIT)   2009/02/03(WED) 売上自動振替区分の変更時のチェック処理を追加
//*     <222>   T.Miyagi(RIT)   2009/02/26(TUE) プロジェクト登録工事大将対応
//*     <223>   T.Miyagi(RIT)   2009/03/27(FRI) 担当者コードの表示不具合対応
//*     <224>   T.Miyagi(RIT)   2009/04/10(FRI) 施主に簡略名称を表示する（検索Expは正式名称表示）
//*     <225>   T.Miyagi(RIT)   2009/07/21(TUE) 申請書取込機能追加対応（サンライズ様個別）
//*     <226>   T.Miyagi(RIT)   2009/08/04(TUE) 入金情報の10件目が削除されない不具合対応
//*     <227>   T.Ogawa(RIT)    2009/11/18(WED) 工事内容変更届け取り込み対応
//*     <228>   T.Ogawa(RIT)    2010/01/13(WED) 施工/製造部門はBS部門も選択できるように修正
//*		<229>   T.Ogawa(RIT)	2010/01/13(WED) 科目別補助でフリー属性を採用している場合にエラーが発生する不具合を修正
//*     <230>   T.Ogawa(RIT)    2010/01/28(THU) 申請書連動IFのマスター区分にはHojyoMAのマスター区分をセットするように変更
//*     <231>   T.Miyagi(RIT)   2010/01/28(TUE) ツリーで実在工事を選択した場合に、合計工事にぶら下がる実在工事の分類情報が表示されない件を修正
//*
//****** Ver4.00 **************************************************************************************
//*     <232>   T.Miyagi(RIT)   2010/03/25(THU) ツリーにて合計工事に加算されている実在工事から単独工事を選択した場合の画面表示が遅い件を修正
//*     <233>   T.Miyagi(RIT)   2010/03/25(THU) 合計の集計部門が実在の完成振替部門で更新されてしまう件を修正
//*     <234>   T.Miyagi(RIT)   2010/03/25(THU) 申請書情報にセグメント情報１～１０を追加
//*     <235>   T.Miyagi(RIT)   2010/03/25(THU) 契約年月日の変更時にメッセージを表示する対応
//*     <236>   T.Miyagi(RIT)   2010/05/19(WED) 印刷・出力権限の場合に、「F1 フリー」ファンクションが押せない
//*     <237>   T.Miyagi(RIT)   2010/05/24(MON) 不要なメッセージを削除
//******************
//*     <238>   T.Miyagi(RIT)   2010/05/27(THU) 同一部門ｺｰﾄﾞの対応漏れの修正
//*     <239>   T.Miyagi(RIT)   2010/05/27(THE) 集計部門に「0:諸口」が更新されない件を修正
//*     <LPH>   T.Ogawa(RIT)    2010/06/02(WED) MLBplLoader対応(LoadPackageの置き換え)
//****** Ver4.01 **************************************************************************************
//*     <240>   T.Ogawa(RIT)    2010/06/24(THU) 印刷スピードアップ対応
//*                                             PrnSetメソッドのリフレッシュ
//*     <241>   T.Ogawa(RIT)    2010/06/24(THU) プログレスバーの表示位置がおかしいのを修正
//*     <242>   T.Ogawa(RIT)    2010/06/24(THU) 取引先に手入力で合計取引先が登録出来てしまう不具合修正
//*     <243>   T.Ogawa(RIT)    2010/07/30(FRI) <242>の追加。得意先採用していない取引先も入力出来てしまう不具合修正
//*     <244>   T.Ogawa(RIT)    2010/08/17(TUE) 印刷時に売上高自動振替区分が正しく出力されない不具合修正
//*     <245>   T.Ogawa(RIT)    2010/08/17(TUE) fnSetGCode関数の整形は前ゼロなしの場合でも行うように修正
//****** Ver4.02 **************************************************************************************
//*     <246>   T.Ogawa(RIT)    2010/09/15(WED) プロジェクトコンボボックスを何度も切り替えていくと、「prepared statementsのリソース・ガバナーが制限を越えています」のエラー
//                                              ソース内でCreateしたクエリコンポーネントを破棄していなかったため、connection_propertyの
//                                             「Cursor」「CursorOpen」「PrepStmt」がどんどん増えていき、制限値50を超えるときにエラーになっていた。
//*     <247>   T.Ogawa(RIT)    2010/09/30(THU) プロジェクト登録の初回起動時、コンボボックスが開いている状態でマウス移動を行おうとすると、エラーメッセージが表示される不具合対応
//*     <248>   T.Ogawa(RIT)    2010/09/30(THU) プロジェクトコンボボックスのOnExitイベントにEnterEventが割り当てられているため、不要と判断し解除。
//                                              OnExitイベントにはECombo_HeaderExitを割り当てる
//*     <249>   T.Ogawa(RIT)    2010/10/06(WED) <240>の対応にて入金情報が出力されなくなってしまったため、その対応
//*     <250>   T.Ogawa(RIT)    2010/10/13(WED) 契約情報グリッドのOnKeyPressイベントに下記の考慮が漏れているのを修正
//                                              ・合計契約グリッドの考慮漏れ
//                                              ・実在・入金情報グリッドの考慮漏れ
//*     <251>   T.Ogawa(RIT)    2010/10/13(WED) 合計契約情報及び合計入金グリッドに不正な取引先コードを入力したまま、
//                                              実在タブに切り替えるとフォーカスエラーのメッセージが表示される不具合対応
//*     <252>   T.Ogawa(RIT)    2010/10/14(THU) 契約情報グリッド及び入金情報グリッドの取引先コードに得意先を採用していない取引先、
//                                              または合計取引先も手入力出来てしまう不具合対応(合計取引先に関しては検索EXPも)
//****** Ver4.03 **************************************************************************************
//*     <253>   T.Ogawa(RIT)    2010/11/26(FRI) <234>にてセグメントへの赤字セットをする判定方法の誤りを修正
//*     <254>   Y.Kuroda        2010/11/29(MON) 詳細の実在・合計NnmEditから空白でExitしたときはﾌｫｰｶｽは止めるよう修正。
//
//****** Ver4.04 **************************************************************************************
//*     <255>   T.Ogawa(RIT)    2010/12/21(TUE) 速度改善対応
//                                              ■Where区のパラメーターでAsFloatを指定しているところをAsStringに変更
//                                              ■Select * From は 必要なカラムだけ指定するように変更
//                                              ■Select Count(*) は Count(カラム名)に変更
//                                              ■詳細画面のときはグリッドは作成しないように修正
//*     <256>   T.Ogawa(RIT)    2010/12/24(FRI) 詳細画面で外部ｺｰﾄﾞ決定時に該当するﾂﾘｰにｶｰｿﾙを当てる。
//*     <257>   T.Ogawa(RIT)    2010/12/24(FRI) 売上高自動振替区分のチェックは新規登録時は行わない。
//*     <258>   T.Ogawa(RIT)    2010/12/27(MON) 詳細画面で新規外部コードEnter後、フォーカスを外部コードに戻して、再入力しても前の外部コードが上書きされない不具合対応
//*     <259>   T.Ogawa(RIT)    2011/02/07(MON) KojiInfoの更新時に工事分類情報を消してしまっている不具合対応
//
//****** Ver4.05 **************************************************************************************
//*     <>      T.Ogawa(LEAD)   2011/03/29(TUE) 部門の属性がﾌﾘｰのとき、手入力で部門コードの登録が出来ない不具合対応。(OnChangeイベントの割り当てのみ)
//*     <260>   T.Ogawa(LEAD)   2011/03/29(TUE) TreeViewのOnChangeイベントでTreeViewにフォーカスされていないときはgbTreeClickをOFFにする
//*     <261>   T.Ogawa(LEAD)   2011/04/26(TUE) 下記の条件でその他タブをクリックするとフォーカスエラーになる不具合対応
//                                              ■プロジェクト分類の採用が一つもない
//                                              ■セグメントマスターの採用はある(MasterInfo)
//                                              ■工事へのセグメントの採用は一つもない(SegMA)
//      <262>   T.Ogawa(LEAD)   2011/05/02(MON) 一覧から名称変更して更新したとき、KojiInfo Write Error が発生する不具合対応
//****** Ver4.05(個別) ********************************************************************************
//*     <263>   加藤(PRIME)     2011/06/14(TUE)	加算登録リスト追加
//*     <264>   加藤(PRIME)     2011/06/21(WED)	契約情報連動区分採用なしから採用ありのプロジェクトに変えると入金情報の取引先名が表示されない
//*												ついでに既存部分の解像度対応
//*												実在入金情報のwidthを合計に合わせる
//****** Ver4.06 **************************************************************************************
//*     <265>   S.Otahara(MSI)  2011/06/27(MON) APGﾌｧｲﾙの設定に従って、桁数指定で工事情報の並び替えができるように改良
//*     <266>   T.Ogawa(LEAD)   2011/06/29(WED) 工事／プロジェクトのコード属性がフリーのとき、工事／プロジェクトコードに半角かなが入力できない不具合対応
//*     <267>   T.Ogawa(LEAD)   2011/06/29(WED) 手入力で合計セグメントが入力できてしまう不具合対応
//****** Ver4.07 **************************************************************************************
//      <SZERO> T.Ogawa(LEAD)   2011/09/06(TUE) セグメントの「0」諸口が登録できない対応
//                                              (取引先登録の<SZERO>対応の取り込み)
//      <268>   T.Ogawa(LEAD)   2011/09/07(WED) TreeViewポップアップの詳細を押下しても詳細画面に選択対象となる工事が反映されない不具合対応
//      <269>   T.Ogawa(LEAD)   2011/10/18(THU) デバッグ用コメントの削除時に誤ってOpenメソッドも削除したため、詳細印刷が出なくなった。
//****** Ver4.08 **************************************************************************************
//		<270>	Y.Kuroda		2012/02/13(MON)	ShiftState対応
//****** Ver4.09 / NX-Ⅰ1.02 *****************************************************************************
//      <KSN>   T.Ogawa(LEAD)   2012/06/05(TUE) 速度改良に伴う加算体系タブの新規対応。
//      <271>   T.Ogawa(LEAD)   2012/06/21(THU) 大量データだと起動時にメモリエラーになるための対策。
//                                              また、付箋コメントも正しく表示されていなかったため、その対策も合わせて行う。
//		<272>	M.Makino(MJS)	2012/07/04(WED)	工事大将ライセンスありの場合以外、詳細画面の「施主」を非表示するよう修正。
//      <273>   A.Chou(MJS)     2012/07/13(FRI) プロジェクト完成振替対応
//      <274>   A.Chou(MJS)     2012/07/27(FRI) 完成振替タブ:新規プロジェクト追加する時、完成振替タブの情報正しく取得されない点を修正
//      <275>   A.Chou(MJS)     2012/08/16(THU) 売上高自動振替区分,完成売上高相手勘定区分が使用可能にも関わらず、入力ラベルの背景色が「グレー」となっている点を修正した。
//      <KSN@>  T.Ogawa(LEAD)   2012/08/20(MON) <KSN>の対応漏れ。
//      <KSN2>  T.Ogawa(LEAD)   2012/08/22(WED) 挿入⇒登録を繰り返した場合、並び順が変わってしまう不具合対応
//                                              挿入⇒登録を繰り返した場合、登録したものが反映されない場合がある不具合対応
//      <KSN3>  T.Ogawa(LEAD)   2012/08/23(THU) 加算体系登録グリッドで数字属性の時、文字の入力が出来てしまう不具合対応
//                                              合わせて申請書ボタンも押下出来ないようにする。
//		<276>	M.Makino(MJS)	2012/09/20(THU) 「施主」項目を非表示時、ﾌｫｰｶｽが移ってしまう点とキー制御が正しくなかった点を修正。
//****** Ver NX-Ⅰ1.03 *****************************************************************************
//      <277>	M.Makino(MJS)   2012/09/20(THU) 「施主」項目の非表示について、工事ライセンスに加え、新たにAPGファイルによる判断もするよう修正。
//****** Ver MLX **************************************************************************************
//      <MLXDEP>K.Iwata(NTC)    2013/01/11(FRI) MLX固定資産・リース資産対応
//      <MLXDEP-2>K.Yoshida(MJS)2013/01/28(MON) ・エラーになるfnJNTWFExpInitを通さないように対応
//												・資産に不要な削除ﾁｪｯｸｽﾄｱﾄﾞが流れないように修正
//												・MLXは諸口の登録をさせないように対応
//		<>		M.Sawamura(MJS)	2013/02/08(FRI) LblRecCntのBorderLineを3DDown→Single に変更 MLXで青色表示されるため。
//
//****** Ver NX-Ⅰ1.04 / 4.11 *****************************************************************************
//      <>      T.Ogawa(LEAD)   2013/06/26(WED) MLX対応の<MLXDEP>と<MLXDEP-2>は2014/01リリースまでコメントアウト
//      <FREE>  T.Ogawa(LEAD)   2013/04/03(WED) 申請書取り込みにおいて、フリー項目と実績工期も取り込む対応。(ユーザーへは先行リリース)
//      <FREE_1>                                ついでに合計工事の申請書取込時に外部コード入力してEnterキーを押下しても次の項目にフォーカス遷移しない不具合対応
//      <FREE_2>                                ついでにフリー項目の日付を削除して更新しても削除されていない不具合対応
//		<278>	Y.Kuroda		2013/05/01(WED) 詳細表示でﾌﾘｰ属性の場合、終了ボタン押下時に工事コードが空白状態でも”編集中データを保存しますか？”のﾁｪｯｸﾌﾗｸﾞが立つ場合があり、
//												そのまま「はい」を選択すると外部コードが空白のﾏｽﾀが登録されてしまう点を修正。
//      <SEI>   T.Ogawa(LEAD)   2013/07/02(TUE) 請求予定情報対応(スギモト個別をマージ)
//      <TAX>   T.Ogawa(LEAD)   2013/07/04(THU) 消費税(経過措置)対応
//                                              合わせて一部の定数やクラスは共通定義用ユニット(JNTCRP018001Commonu)に移動。(履歴なし)
//                                              合わせてヒント・警告メッセージのコメント対応(履歴なし)
//                                              印刷ダイアログも工事専用で使用するため当プロジェクトに統合
//      <>      T.Ogawa(LEAD)   2013/07/29(MON) MLX対応のコメントアウトを解除
//      <279>   T.Ogawa(LEAD)   2013/08/07(WED) 契約情報の契約NOに文字が入力出来ない場合がある件を修正。
//      <280>   T.Ogawa(LEAD)   2013/08/14(WED) 免税業者の場合でも、税率と消費税額が登録出来てしまう不具合対応
//      <281>   T.Ogawa(LEAD)   2013/09/24(TUE) <SEI>の影響で内容変更届を取り込んでも、「概要・備考」「その他」タブが赤字にならない不具合対応。
//
//****** Ver NX-Ⅰ1.05 / 4.12 *****************************************************************************
//      <TAX_1> T.Ogawa(LEAD)   2013/10/01(TUE) 契約別工事残高を考慮する対応
//      <KSN4>  T.Ogawa(LEAD)   2013/10/04(FRI) 加算体系更新方法変更対応。
//                                              合わせて既に登録済みの行を空行にしたとき、削除ボタンが押せてしまい、例外が発生する不具合対応。
//      <EXP>   T.Ogawa(LEAD)   2012/02/01(FRI) 部門・担当者の検索EXPの絞込み対応。(シティアスコム個別)
//      <TAX_2> T.Ogawa(LEAD)   2013/12/06(FRI) 契約金額がマイナスのときは税率チェックは行わないように修正。
//
//****** Ver NX-Ⅰ1.06 *****************************************************************************
//      <ConInfo> T.Ogawa(LEAD) 2014/03/25(TUE) 税率エラーでも登録可能とする個別対応(YEY-0011)。
//      <282>   T.Ogawa(LEAD)   2014/04/21(MON) 詳細画面で新規登録時に前に表示されていた契約情報が残ったままになっていた点を修正しました。
//
//****** Ver NX-Ⅰ1.07 *****************************************************************************
//      <283>   A.Chou(MJS)     2014/07/07(MON) 工事登録申請書からの取り込みで、売上計上科目コード、完成売上高相手勘定区分の初期値が使用不可になってしまった点を修正しました。
//      <284>   T.Ogawa(LEAD)   2014/07/15(TUE) 日付コンポーネントのグローバル変数廃止に伴う修正
//      <285>   T.Ogawa(LEAD)   2014/09/12(FRI) 印刷モジュールの開放漏れの対応
//      <286>   T.Ogawa(LEAD)   2014/12/24(WED) 一覧から更新したとき、分類情報が消えてしまう不具合対応(GPF-0003)
//
//****** Ver NX-Ⅰ1.08 / 4.13 *****************************************************************************
//      <KSN5>  T.Ogawa(LEAD)   2015/09/07(MON) <KSN4>の影響でHojyoTree2の更新が行われていなかった不具合対応。
//      <KSN6>  T.Ogawa(LEAD)   2015/09/08(Tue) 加算体系タブ選択時に終了した場合は、編集中フラグをOFFにする対応。
//
//****** Ver NX-Ⅰ1.10 / 4.14 *****************************************************************************
//      <287>   T.Ogawa(LEAD)   2015/10/14(WED) 完成振替のマスターをコード属性に従って表示する対応
//      <FREEINIT>   T.Ogawa(LEAD)   2016.01.18(MON) 複数画面起動時にフリー項目ダイアログの起動制御が正しく行われていない不具合対応
//      <288>   T.Ogawa(LEAD)   2016/02/19(FRI) 連想に全角文字が登録できないようにする(プロパティ修正)
//                                              また、下記のコンポーネントには更新時に全角文字が含まれているかどうかチェックする。
//                                              【チェック対象】連想、電話番号、FAX番号
//****** Ver NX-Ⅰ1.11 / 4.15 *****************************************************************************
//      <289>   F.Oda           2016/11/09(WED) 不具合対応 SRB-NO：XZF-0428(MLⅡ),OAF-0093(MLX)
//          <289-1>                             コピー先の統合工事Aを[削除]して終了しても、更新がされない
//                                                  発生手順
//                                                  1.統合工事「A」「B」がある状態で統合工事「A」を右クリックからのコピーで統合工事「B」にコピーする。
//                                                  2.その後、統合工事「B」にコピーした統合工事「A」を削除しても工事登録を再起動すると復活している。
//          <289-2>                             コピー先の統合工事にぶら下がっている実在工事を削除した場合に、コピー元や他のコピー先の統合工事の加算設定について、表示更新されない
//          <289-3>                             コピー後、他のコピー先の同一統合工事の加算設定が、表示更新されない
//          <289-4>                             加算しないを選択後他の同一統合工事の加算設定が、表示更新されない
//          <289-5>                             ドラッグドロップで統合工事に実在工事を追加後、他の同一統合工事の加算設定が表示更新されない
//          <289-6>                             グリッドで工事を追加後、他の同一統合工事の加算設定が表示更新されない
//
//          <290>             2018/09/11(THU) Edgetracker対応
//                                              Edgetracker連携を行っている場合、コードが削除されたらマスターを見直すメッセージ出力対応
//
//		<#NGEN>	S.Komuro(Admax)	2018/11/13(TUE) 新元号対応
//      <291>   S.Sawanobori(Impress) 2020/12/01 収益認識基準対応、長音表記の対応
//		<292>	S.Sawanobori(Impress) 2021/10/18 福山コンサル対応。契約情報税率登録区分(MstrKbn12)をキーにして税率が混在しても登録可能にする。
//      <293>   I.Syudo(Impress) 2021/10/19 特殊工事更新時の確認メッセージ対応(更新ボタン押下時、特殊工事として使用がチェックされていたら、メッセージを表示
//*****************************************************************************************************
unit JNTCRP018001u;

interface

{$include JNTMasCommonFuncH.inc}

uses
  Windows, Messages, SysUtils, Classes, VCL.Graphics, VCL.Controls, VCL.Forms, VCL.Dialogs, MJSCommonDialogs,
  ComCtrls, MJSStatusBar, MJSTab, VCL.ExtCtrls, MJSPanel, VCL.StdCtrls, MJSEdits,
  MJSLabel, dxCntner, dxTL, dxDBGrid, Buttons, MJSSpeedButton, MJSComboBox,
  JNTMasComu, MjsDBModuleu, Db, FireDAC.Comp.Client, MJSBitBtn, MJSQuery, MjsDispCtrl,
  dxmdaset, dxGrClms, VCL.ImgList, MJSCommonu, CMNExpFuncU, MjsStrCtrl, MjsDateCtrl,
  Menus, {<128>JNTCRP018001PrnDlgu, }MjsPrnDlgU ,MjsPrnSupportU, ppCache, ppDB,
  ppDBPipe,
  //ppDBBDE,
  ppComm, ppRelatv, ppProd, ppClass, ppReport, ppBands,
  ppCtrls, ppVar, ppPrnabl, JNTMasWndIFu,MJSCheckBox,
  JNTCRP018001SyokuchiDlgu, MjsPreviewIFu, MJSMsgStdu, dxExEdtr, JNTMasTreee2Dlgu,
  ActnList,
  JNTCommonU, JNTSelGlobal,
  MJSDBNavigator,JNTFuncU, // <100>

  JNTSelCorpSys,JNTExPGlobalPrj,JNTPDlgPrj,{ユニット名をリネーム <TAX>}
  JNTMasMonth, // <235>
  Commctrl,Math, ToolWin, MjsExceptU, MJSMemo, MJSTreeView,
  MJSFunctionBar, MJSSPFunctionBar, MJSToolBar
  ,IniFiles     //<265>Add
  {<LPH> ADD St},MLBplLoaderU{<LPH> ADD Ed}
  ,MJSKeyDataState	// <270>ADD
  ,JNTCRP018001MsgDLGu,JNTCRP018001SetUpDLGu,JNTCRP018001APGu,MetaSpt  //<KSN> ADD
  ,FXLicense	// <272> ADD
  ,SeriesCheckU //<273> Add
  ,JNTMasDateCtrl		// <#NGEN>
  ,JNTCRP018001Commonu, MJSRadioButton,Contnrs, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  ppDesignLayer, ppParameter, System.Actions, FireDAC.Comp.DataSet,
  System.ImageList,{<TAX> ADD}
  Variants, System.AnsiStrings;

type
  // TreeView.Data定義 //
  TreeViewRec  = record
  	nDivision       : Integer;          // 実在合計区分
  	iNCode	        : Extended;         // 内部ｺｰﾄﾞ
  	strExCode       : string;           // 外部ｺｰﾄﾞ
  	strName         : string;           // 正式名称
  	iSyokuti        : Integer;          // 諸口区分
    bComp           : Boolean;  //<KSN> ADD
  end;

  // ﾌｧﾝｸｼｮﾝ制御用<100> //
  urFncInfo = record
    Caption         : array[0..7] of String;
    Action          : array[0..7] of TAction;
  end;

  // 検索情報 //
  SearchInfoRec = record
  	sKojCD	        : String;		    // 検索科目
  	iItem	        : Integer;          // 検索するItemの位置
  	bFstFlg	        : Boolean;          // 初回判定ﾌﾗｸﾞ
  end;

  AdoptInfo = record
    nMasterDivision : Integer;	        // ﾏｽﾀ区分
	nAdoption	    : Integer;	        // 採用区分
	nCodeDigit	    : Integer;	        // ｺｰﾄﾞ桁数
	nCodeAttribute  : Integer;	        // ｺｰﾄﾞ属性
	strDescription  : String;	        // 名称
  end;

  //<155> - ST
  // 申請書情報から取り込む別ﾓｼﾞｭｰﾙの情報<WF>
  TWFOtherInfo = record
    CanInsert       : Boolean;          // 登録可否
    TrihikiKbn      : Integer;          // 取引区分
    TrihikiKbnFlg   : Boolean;          // 取引区分ｾｯﾄ有無
    TnNCode         : Extended;         // 担当者ｺｰﾄﾞ
    TnNCodeFlg      : Boolean;          // 担当者ｺｰﾄﾞｾｯﾄ有無
    BmNCode         : Extended;         // 部門
    BmNCodeFlg      : Boolean;          // 部門ｺｰﾄﾞｾｯﾄ有無
    YsGKin          : Extended;         // 与信限度額
    YsGKinFlg       : Boolean;          // 与信限度額ｾｯﾄ有無
  end;
  //<155> - ED

  //<162> - ST
  KanseiFuriInfoRec = record
  	MasterKbn		: Integer;			// ﾏｽﾀ区分
  	JHojyoName		: String;			// 名称
  	CodeAttr		: Integer;			// 属性
  	CodeDigit		: Integer;			// 桁数
  	NCode			: Extended;			// 内部ｺｰﾄﾞ
  	UseKbn			: Integer;			// 採用区分
  end;
  //<162> - ED

  // <172> - ST
  SyncKey = record
    nDivision       : Integer;          // 実在合計区分
    strExCode       : string;           // 外部ｺｰﾄﾞ
    nNCode          : Extended;         // 内部ｺｰﾄﾞ
  end;
  // <172> - ED

//<265>↓↓
  // ｿｰﾄ情報
  SortInfo = record
    iSortOrder      : Integer;          // ｿｰﾄ順[0:昇順，1:降順]
    iKetaStart      : Integer;          // ｺｰﾄﾞ桁数の先頭からの開始位置
    iKetaEnd        : Integer;          // ｺｰﾄﾞ桁数の先頭からの終了位置
  end;
  TArySortInfo = array[0..2] of SortInfo;
//<265>↑↑
const
    // OnPaint時の処理起動ﾒｯｾｰｼﾞ用
	WM_ONPAINT = WM_APP + 1;

//<KSN> ADD St
    ORDER_ASC = 0;
    ORDER_DESC = 1;
//<KSN> ADD Ed

type
{$include JNTMASFUSENBIKODLGIFH.inc}
{$include JNTMASSEARCHDLGIFH.inc}
{$include JNTSelPrtIF.inc}              // <PRN>
{$include ETYMasterSinseiExgIFI.inc}    // <WF><155>
{$include ETYMasterSinseiExgIFH.inc}    // <WF><155>
{$include JNTCRPSyncMasterH.inc}        // <172> ﾏｽﾀ同期共通ﾍｯﾀﾞ部
{$include JNTSyncMAsterIFH.inc}         // <183> ﾏｽﾀ同期一括配信DLGﾍｯﾀﾞ部
{$include JNTCRP004010IFH.inc}          // <217>
{$include FLWMasterSinseiExgIFI.inc}    // <225>
{$include FLWMasterSinseiExgIFH.inc}    // <225>
//<FREE> ADD St
  {$include JNTCRPFreeChg.inc}
  {$include JNTCRPFreeDlgH.inc}
//<FREE> ADD Ed

  // <PRN>
  TPrintAppEntry = function
  (AOwner       :   TComponent;
   pRec		    :   Pointer;
   Mode		    :   Integer;
   PrtParam	    :   rcPrtParam;
   var ArHdl    :   array of Pointer): Integer;

//<KSN> ADD St
  TSend_Exp = record
      TableName : String;
      Where : String;
  end;

  TRcv_Exp = record
      GCode : String;
      LongName : String;
      SimpleName : String;
  end;

  TDragData = record
      DspNo : Integer;
      HojyoMA : THojyoMA;
      HojyoTree : THojyoTree;
  end;
//<KSN> ADD Ed

  TJNTCRP018001f = class(TForm)
	PPanelSpeed: TMPanel;
	PPanelBase: TMPanel;
	Root_PMTab: TMTab;
	BSpeedButtonEnd: TMSpeedButton;
	BSpeedButtonPrn: TMSpeedButton;
	BSpeedButtonChg: TMSpeedButton;
	BSpeedButtonIS: TMSpeedButton;
	Jituzai_PPanel_Grid: TMPanel;
	Jituzai_DdxDBGrid: TdxDBGrid;
	Goukei_PPanel_Grid: TMPanel;
	Jituzai_PPanel_Card: TMPanel;
	Jituzai_PScrollBox_Card: TScrollBox;
	Jituzai_PPanel_Card_1: TMPanel;
	Jituzai_LLabel_RenChar: TMLabel;
	Jituzai_LLabel_LongName: TMLabel;
	Jituzai_LLabel_SimpleName: TMLabel;
	Jituzai_ETEdit_RenChar: TMTxtEdit;
	Jituzai_ETEdit_LongName: TMTxtEdit;
	Jituzai_ETEdit_SimpleName: TMTxtEdit;
	Jituzai_PMTab: TMTab;
	Jituzai_PPanel_Kihon: TMPanel;
	Jituzai_PPanel_KeNyukin: TMPanel;
	Jituzai_LLabel_HaifuKbn: TMLabel;
	Jituzai_LLabel_StartDate: TMLabel;
	Jituzai_EDEdit_StartDate: TMDateEdit;
	Jituzai_PPanel_Card_2: TMPanel;
	Jituzai_BBitBtn_Ok: TMBitBtn;
	Jituzai_BBitBtn_Cancel: TMBitBtn;
	JHojyoMA_DMemData: TdxMemData;
	JHojyoMA_DMemDataMasterKbn: TIntegerField;
	JHojyoMA_DMemDataSumKbn: TIntegerField;
	JHojyoMA_DMemDataRecordKbn: TIntegerField;
	JHojyoMA_DMemDataGCode: TStringField;
	JHojyoMA_DMemDataRenChar: TStringField;
	JHojyoMA_DMemDataLongName: TStringField;
	JHojyoMA_DMemDataSimpleName: TStringField;
	JHojyoMA_DMemDataZipCode1: TIntegerField;
	JHojyoMA_DMemDataZipCode2: TIntegerField;
	JHojyoMA_DMemDataAddress1: TStringField;
	JHojyoMA_DMemDataAddress2: TStringField;
	JHojyoMA_DMemDataTelNo: TStringField;
	JHojyoMA_DMemDataPersonCode: TStringField;
	JHojyoMA_DMemDataCostomerCode: TStringField;
	JHojyoMA_DMemDataBmnCode: TStringField;
	JHojyoMA_DMemDataSalesBase: TIntegerField;
	JHojyoMA_DMemDataHaifuKbn: TIntegerField;
	JHojyoMA_DMemDataRootKbn: TIntegerField;
	JHojyoMA_DDataSource: TDataSource;
	Jituzai_DdxDBGridRecId: TdxDBGridColumn;
	Jituzai_DdxDBGridGCode: TdxDBGridMaskColumn;
	Jituzai_DdxDBGridRenChar: TdxDBGridMaskColumn;
	Jituzai_DdxDBGridLongName: TdxDBGridMaskColumn;
	Jituzai_DdxDBGridSimpleName: TdxDBGridMaskColumn;
	JKeiyaku_DDataSource: TDataSource;
	JKeiyaku_DMemData: TdxMemData;
	JKeiyaku_DMemDataInfoKbn: TIntegerField;
	JKeiyaku_DMemDataUpdateTime: TDateField;
	JKeiyaku_DMemDataContNo: TStringField;
	JKeiyaku_DMemDataTax_Rate: TIntegerField;
	JKeiyaku_DMemDataContDate: TDateTimeField;
	JKeiyaku_DMemDataCheck: TIntegerField;
	JKeiyaku_DMemDataContMoney: TCurrencyField;
	JKeiyaku_DMemDataSales_Tax: TCurrencyField;
	JNyukin_DDataSource: TDataSource;
	JNyukin_DMemData: TdxMemData;
	JNyukin_DMemDataInfoKbn: TIntegerField;
	JNyukin_DMemDataUpdateTime: TDateField;
	JNyukin_DMemDataContDate: TDateField;
	JNyukin_DMemDataContNo: TStringField;
	JNyukin_DMemDataSales_Tax: TIntegerField;
	JNyukin_DMemDataTax_Rate: TIntegerField;
	JNyukin_DMemDataCheck: TIntegerField;
	JNyukin_DMemDataContMoney: TCurrencyField;
	TreeView_VImageList: TImageList;
	HojyoMA_DMQuery: TMQuery;
	KojiInfo_DMQuery: TMQuery;
	Goukei_DdxDBGrid: TdxDBGrid;
	Goukei_DdxDBGridRecId: TdxDBGridColumn;
	Goukei_DdxDBGridGCode: TdxDBGridMaskColumn;
	Goukei_DdxDBGridRenChar: TdxDBGridMaskColumn;
	Goukei_DdxDBGridLongName: TdxDBGridMaskColumn;
	Goukei_DdxDBGridSimpleName: TdxDBGridMaskColumn;
	GHojyoMA_DMemData: TdxMemData;
	GHojyoMA_DDataSource: TDataSource;
	GHojyoMA_DMemDataMasterKbn: TIntegerField;
	GHojyoMA_DMemDataSumKbn: TIntegerField;
	GHojyoMA_DMemDataRecordKbn: TIntegerField;
	GHojyoMA_DMemDataGCode: TStringField;
	GHojyoMA_DMemDataRenChar: TStringField;
	GHojyoMA_DMemDataLongName: TStringField;
	GHojyoMA_DMemDataSimpleName: TStringField;
	GHojyoMA_DMemDataRootKbn: TIntegerField;
	GHojyoMA_DMemDataZipCode1: TIntegerField;
	GHojyoMA_DMemDataZipCode2: TIntegerField;
	GHojyoMA_DMemDataAddress1: TStringField;
	GHojyoMA_DMemDataAddress2: TStringField;
	GHojyoMA_DMemDataTelNo: TStringField;
	GHojyoMA_DMemDataPersonCode: TStringField;
	GHojyoMA_DMemDataCostomerCode: TStringField;
	GHojyoMA_DMemDataBmnCode: TStringField;
	GHojyoMA_DMemDataSalesBase: TIntegerField;
	GHojyoMA_DMemDataHaifuKbn: TIntegerField;
	Goukei_PPanel_Card: TMPanel;
	Goukei_PMTab: TMTab;
	Goukei_PPanel_Card_2: TMPanel;
	Goukei_BBitBtn_Ok: TMBitBtn;
	Goukei_BBitBtn_Cancel: TMBitBtn;
	Goukei_PPanel_Card_1: TMPanel;
	Goukei_ETEdit_LongName: TMTxtEdit;
	Goukei_ETEdit_SimpleName: TMTxtEdit;
	Goukei_PPanel_KeNyukin: TMPanel;
	Goukei_DdxDBGrid_Nyu: TdxDBGrid;
	Goukei_PPanel_Kihon: TMPanel;
	ScrollBox2: TScrollBox;
	MLabel3: TMLabel;
	MLabel4: TMLabel;
	Goukei_LLabel_PersonCode: TMLabel;
	Goukei_LLabel_PersonName: TMLabel;
    Goukei_LLabel_CostomerCode: TMLabel;
	Goukei_LLabel_CustomerName: TMLabel;
	MLabel21: TMLabel;
	MLabel23: TMLabel;
	Goukei_ETEdit_PersonCode: TMTxtEdit;
	Goukei_ETEdit_CustomerCode: TMTxtEdit;
	Goukei_EDEdit_StartDate: TMDateEdit;
    Goukei_EDEdit_EndDate: TMDateEdit;
	MLabel24: TMLabel;
	Goukei_DdxDBGrid_NyuRecId: TdxDBGridColumn;
	Goukei_DdxDBGrid_NyuContDate: TdxDBGridDateColumn;
	Goukei_DdxDBGrid_NyuContMoney: TdxDBGridCurrencyColumn;
	GKeiyaku_DMemData: TdxMemData;
	GNyukin_DMemData: TdxMemData;
	GKeiyaku_DDataSource: TDataSource;
	GNyukin_DDataSource: TDataSource;
	GKeiyaku_DMemDataInfoKbn: TIntegerField;
	GKeiyaku_DMemDataUpDateTime: TDateTimeField;
	GKeiyaku_DMemDataContDate: TDateTimeField;
	GKeiyaku_DMemDataContNo: TStringField;
	GKeiyaku_DMemDataContMoney: TCurrencyField;
	GKeiyaku_DMemDataSales_Tax: TCurrencyField;
	GKeiyaku_DMemDataTax_Rate: TIntegerField;
	GNyukin_DMemDataInfoKbn: TIntegerField;
	GNyukin_DMemDataUpdateTime: TDateTimeField;
	GNyukin_DMemDataContDate: TDateTimeField;
	GNyukin_DMemDataContMoney: TCurrencyField;
	GNyukin_DMemDataContNo: TStringField;
	GNyukin_DMemDataSales_Tax: TCurrencyField;
	GNyukin_DMemDataTax_Rate: TIntegerField;
	GKeiyaku_DMemDataCheck: TIntegerField;
	GNyukin_DMemDataCheck: TIntegerField;
	JHojyoMA_DMemDataStartDate: TDateField;
	JHojyoMA_DMemDataScheduleDate: TDateField;
	GHojyoMA_DMemDataStartDate: TDateField;
	Jituzai_ENEdit_HaifuKbn: TMNumEdit;
	Jituzai_LLabel_HaifuKbnDsp: TMLabel;
	Goukei_ENEdit_RootKbn: TMNumEdit;
	Goukei_LLabel_RootKbnDsp: TMLabel;
	Jituzai_LLabel_FinishDate: TMLabel;
	Jituzai_EDEdit_FinishDate: TMDateEdit;
	JHojyoMA_DMemDataFinishDate: TDateField;
	MLabel15: TMLabel;
	Goukei_EDEdit_FinishDate: TMDateEdit;
	GHojyoMA_DMemDataFinishDate: TDateField;
	BSpeedButtonDel: TMSpeedButton;
	Jituzai_LLabel_MoveKbn: TMLabel;
	Jituzai_ENEdit_MoveKbn: TMNumEdit;
	JHojyoMA_DMemDataBunCode: TIntegerField;
	JHojyoMA_DMemDataMoveKbn: TIntegerField;
	GHojyoMA_DMemDataMoveKbn: TIntegerField;
	PMKasantaikei: TPopupMenu;
	TPCopy: TMenuItem;
	TPPaste: TMenuItem;
	N1: TMenuItem;
	TPDelete: TMenuItem;
	TPAllDel: TMenuItem;
	N3: TMenuItem;
	TFBlue: TMenuItem;
	TFGreen: TMenuItem;
	TFOrange: TMenuItem;
	TFRed: TMenuItem;
	ImageList2: TImageList;
	ImageList3: TImageList;
	PMKouji: TPopupMenu;
	GFBlue: TMenuItem;
	GFGreen: TMenuItem;
	GFOrange: TMenuItem;
	GFRed: TMenuItem;
	JHojyoMA_DMemDataFusen: TGraphicField;
	GHojyoMA_DMemDataFusen: TGraphicField;
	Goukei_DdxDBGridFusen: TdxDBGridGraphicColumn;
	Jituzai_DdxDBGridFusen: TdxDBGridGraphicColumn;
	Jituzai_LLabel_Fusen: TMLabel;
	Jituzai_ImageRaised_FusenRed: TImage;
	Jituzai_ImageRaised_FusenGreen: TImage;
	Jituzai_ImageRaised_FusenBlue: TImage;
	Jituzai_ImageRaised_FusenOrange: TImage;
	Jituzai_ImageLowered_FusenRed: TImage;
	Jituzai_ImageLowered_FusenGreen: TImage;
	Jituzai_ImageLowered_FusenBlue: TImage;
	Jituzai_ImageLowered_FusenOrange: TImage;
	Jituzai_ETEdit_Fusen: TMTxtEdit;
	MLabel18: TMLabel;
	Goukei_ImageRaised_FusenRed: TImage;
	Goukei_ImageRaised_FusenGreen: TImage;
	Goukei_ImageRaised_FusenBlue: TImage;
	Goukei_ImageRaised_FusenOrange: TImage;
	Goukei_ImageLowered_FusenRed: TImage;
	Goukei_ImageLowered_FusenGreen: TImage;
	Goukei_ImageLowered_FusenBlue: TImage;
	Goukei_ImageLowered_FusenOrange: TImage;
	Goukei_ETEdit_Fusen: TMTxtEdit;
	DataSourceKaniJ: TDataSource;
	ppReportKaniJ: TppReport;
	ppBDEPipelineKaniJ: TppDBPipeline;
	ppReportKaniG: TppReport;
	ppBDEPipelineKaniG: TppDBPipeline;
	DataSourceKaniG: TDataSource;
	DataSourceShosaiJ: TDataSource;
	ppReportShosaiJ: TppReport;
	ppBDEPipelineShosaiJ: TppDBPipeline;
	ppBDEPipelineShosaiG: TppDBPipeline;
	ppReportShosaiG: TppReport;
	DataSourceShosaiG: TDataSource;
	ppTitleBand5: TppTitleBand;
	ppHeaderBand5: TppHeaderBand;
	ppLine88: TppLine;
	RSV_JituzaiKoujiK_Date: TppSystemVariable;
	JituzaiKoujiK_CorpCode: TppLabel;
	JituzaiKoujiK_CorpName: TppLabel;
	ppShape4: TppShape;
	ppLabel58: TppLabel;
	ppLabel60: TppLabel;
	ppLine89: TppLine;
	ppLine90: TppLine;
	ppLine91: TppLine;
	ppLabel61: TppLabel;
	ppLabel86: TppLabel;
	ppDetailBand5: TppDetailBand;
	ppLine94: TppLine;
	ppDBText14: TppDBText;
	ppDBText16: TppDBText;
	ppDBText52: TppDBText;
	ppDBText53: TppDBText;
	ppLine95: TppLine;
	ppLine96: TppLine;
	ppLine97: TppLine;
	ppLine98: TppLine;
	ppLine108: TppLine;
	RImageJitsuFusen: TppDBImage;
	ppFooterBand5: TppFooterBand;
	RSV_JituzaiKoujiK_Page: TppSystemVariable;
	RL_JituzaiKoujiK_Kaikei: TppLabel;
	ppGroup5: TppGroup;
	ppGroupHeaderBand5: TppGroupHeaderBand;
	ppGroupFooterBand5: TppGroupFooterBand;
	LJitsu_Kensu: TppLabel;
	ppLabel150: TppLabel;
	ppLabel151: TppLabel;
	ppTitleBand1: TppTitleBand;
	ppHeaderBand1: TppHeaderBand;
	ppLine1: TppLine;
	RSV_GoukeiKoujiK_Date: TppSystemVariable;
	GoukeiKoujiK_CorpCode: TppLabel;
	GoukeiKoujiK_CorpName: TppLabel;
	ppShape1: TppShape;
	ppLabel4: TppLabel;
	ppLabel5: TppLabel;
	ppLine2: TppLine;
	ppLine3: TppLine;
	ppLine4: TppLine;
	ppLabel6: TppLabel;
	ppLabel8: TppLabel;
	ppColumnHeaderBand2: TppColumnHeaderBand;
	ppDetailBand1: TppDetailBand;
	ppLine5: TppLine;
	ppDBText1: TppDBText;
	ppDBText2: TppDBText;
	ppLine6: TppLine;
	ppLine7: TppLine;
	ppLine8: TppLine;
	ppLine9: TppLine;
	ppLine10: TppLine;
	ppDBImage1: TppDBImage;
	ppDBText3: TppDBText;
	ppDBText4: TppDBText;
	ppColumnFooterBand2: TppColumnFooterBand;
	ppFooterBand1: TppFooterBand;
	RSV_GoukeiKoujiK_Page: TppSystemVariable;
	RL_GoukeiKoujiK_Kaikei: TppLabel;
	ppGroup1: TppGroup;
	ppGroupHeaderBand1: TppGroupHeaderBand;
	ppGroupFooterBand1: TppGroupFooterBand;
	LGou_Kensu: TppLabel;
	ppLabel11: TppLabel;
	ppLabel12: TppLabel;
	ppColumnHeaderBand1: TppColumnHeaderBand;
	ppColumnFooterBand1: TppColumnFooterBand;
	Jituzai_ChkBox_Tokusyu: TMCheckBox;
	MasterInfo_DMemData: TdxMemData;
	MasterInfo_DMemDataJHojyoName: TStringField;
	MasterInfo_DMemDataGHojyoName: TStringField;
    MasterInfo_DMemDataSpHojyoNCd1: TFloatField;
	MasterInfo_DMemDataMstrKbn6: TIntegerField;
	MasterInfo_DMemDataMstrKbn7: TIntegerField;
	MasterInfo_DMemDataMstrKbn8: TIntegerField;
	MasterInfo_DMemDataMstrKbn9: TIntegerField;
	MasterInfo_DMemDataMstrKbn10: TIntegerField;
	JKeiyaku_DMemDataPrevContDate: TDateTimeField;
	JNyukin_DMemDataPrevContDate: TDateTimeField;
	GKeiyaku_DMemDataPrevContDate: TDateTimeField;
	GNyukin_DMemDataPrevContDate: TDateTimeField;
	MasterInfo_DMemDataCodeDigit: TIntegerField;
	MasterInfo_DMemDataCodeAttr: TIntegerField;
	TPDetail: TMenuItem;
	N2: TMenuItem;
	ppListNameKaniJ: TppLabel;
	ppListNameKaniG: TppLabel;
	MasterInfo_DMemDataBumonName: TStringField;
	MasterInfo_DMemDataShainName: TStringField;
	MasterInfo_DMemDataTorihikiName: TStringField;
	MasterInfo_DMemDataCodeDigitBmn: TIntegerField;
	MasterInfo_DMemDataCodeAttrBmn: TIntegerField;
	MasterInfo_DMemDataCodeDigitShain: TIntegerField;
	MasterInfo_DMemDataCodeAttrShain: TIntegerField;
	MasterInfo_DMemDataCodeDigitTorihiki: TIntegerField;
	MasterInfo_DMemDataCodeAttrTorihiki: TIntegerField;
	Goukei_ENEdit_PersonCode: TMNumEdit;
	Goukei_ENEdit_CustomerCode: TMNumEdit;
	Splitter1: TSplitter;
	ListMemTax_Rate: TdxMemData;
	ListMemTax_RateiCode: TIntegerField;
	ListMemTax_RateiName: TStringField;
	JKeiyaku_DMemDataDummyTax_Rate: TIntegerField;
	JKeiyaku_DMemDataTax_RateName: TStringField;
	GKeiyaku_DMemDataDummyTax_Rate: TIntegerField;
	GKeiyaku_DMemDataTax_RateName: TStringField;
	MemDIC_COTXRATE: TdxMemData;
	MemDIC_COTXRATEStartYMD: TDateField;
	MemDIC_COTXRATETaxRate: TCurrencyField;
	JHojyoMA_DMemDataCostomerName: TStringField;
	GHojyoMA_DMemDataCostomerName: TStringField;
	GFDel: TMenuItem;
	GFSep: TMenuItem;
	TFDel: TMenuItem;
	TFSep: TMenuItem;
	GFRe: TMenuItem;
	GFRedOff: TMenuItem;
	GFRedOn: TMenuItem;
	GFBlueOff: TMenuItem;
	GFBlueOn: TMenuItem;
	GFGreenOff: TMenuItem;
	GFGreenOn: TMenuItem;
	GFOrangeOff: TMenuItem;
	GFOrangeOn: TMenuItem;
	TFRe: TMenuItem;
	TFRedOff: TMenuItem;
	TFRedOn: TMenuItem;
	TFBlueOff: TMenuItem;
	TFBlueOn: TMenuItem;
	TFGreenOff: TMenuItem;
	TFGreenOn: TMenuItem;
	TFOrangeOff: TMenuItem;
	TFOrangeOn: TMenuItem;
	JHojyoMA_DMemDataFusenIndex: TIntegerField;
	GHojyoMA_DMemDataFusenIndex: TIntegerField;
	LVStyleBar: TMToolBar;
	btnFusenCtl: TToolButton;
	imgFusen: TImageList;
	imgFusenD: TImageList;
	PMFusen: TPopupMenu;
	MenuItem1: TMenuItem;
	B1: TMenuItem;
	G1: TMenuItem;
	O1: TMenuItem;
	Goukei_LLabel_BmnName: TMLabel;
	BSpeedButtonSort: TMSpeedButton;
	ProgressBar1: TProgressBar;
	JHojyoMA_Print: TdxMemData;
	JHojyoMA_PrintFusen: TGraphicField;
	JHojyoMA_PrintGCode: TStringField;
	JHojyoMA_PrintRenChar: TStringField;
	JHojyoMA_PrintLongName: TStringField;
	JHojyoMA_PrintSimpleName: TStringField;
	JHojyoMA_PrintZipCode1: TIntegerField;
	JHojyoMA_PrintZipCode2: TIntegerField;
	JHojyoMA_PrintAddress1: TStringField;
	JHojyoMA_PrintAddress2: TStringField;
	JHojyoMA_PrintTelNo: TStringField;
	JHojyoMA_PrintPersonCode: TStringField;
	JHojyoMA_PrintCostomerCode: TStringField;
	JHojyoMA_PrintBmnCode: TStringField;
	JHojyoMA_PrintSalesBase: TIntegerField;
	JHojyoMA_PrintHaifuKbn: TIntegerField;
	JHojyoMA_PrintBunCode: TIntegerField;
	JHojyoMA_PrintMoveKbn: TIntegerField;
	JHojyoMA_PrintPersonCodeName: TStringField;
	JHojyoMA_PrintCostomerCodeName: TStringField;
	JHojyoMA_PrintBmnCodeName: TStringField;
	JHojyoMA_PrintSalesBaseName: TStringField;
	JHojyoMA_PrintHaifuKbnName: TStringField;
	JHojyoMA_PrintBunCodeName: TStringField;
	JHojyoMA_PrintMoveKbnName: TStringField;
	JHojyoMA_PrintKeiyakuG: TCurrencyField;
	JHojyoMA_PrintShohiG: TCurrencyField;
	JHojyoMA_PrintNyukinG: TCurrencyField;
	JHojyoMA_PrintFusenCmt: TStringField;
	JHojyoMA_PrintListName: TStringField;
	JHojyoMA_PrintTokCaption: TStringField;
	JHojyoMA_PrintCostomerName: TStringField;
	JHojyoMA_PrintStartDate: TStringField;
	JHojyoMA_PrintScheduleDate: TStringField;
	JHojyoMA_PrintFinishDate: TStringField;
	JHojyoMA_PrintUpDateTime: TStringField;
	JHojyoMA_PrintContDateK1: TStringField;
	JHojyoMA_PrintContNoK1: TStringField;
	JHojyoMA_PrintContMoneyK1: TCurrencyField;
	JHojyoMA_PrintTax_RateK1: TIntegerField;
	JHojyoMA_PrintTax_RateK1Name: TStringField;
	JHojyoMA_PrintSales_TaxK1: TCurrencyField;
	JHojyoMA_PrintContDateK2: TStringField;
	JHojyoMA_PrintContNoK2: TStringField;
	JHojyoMA_PrintContMoneyK2: TCurrencyField;
	JHojyoMA_PrintTax_RateK2: TIntegerField;
	JHojyoMA_PrintTax_RateK2Name: TStringField;
	JHojyoMA_PrintSales_TaxK2: TCurrencyField;
	JHojyoMA_PrintContDateK3: TStringField;
	JHojyoMA_PrintContNoK3: TStringField;
	JHojyoMA_PrintContMoneyK3: TCurrencyField;
	JHojyoMA_PrintTax_RateK3: TIntegerField;
	JHojyoMA_PrintTax_RateK3Name: TStringField;
	JHojyoMA_PrintSales_TaxK3: TCurrencyField;
	JHojyoMA_PrintContDateK4: TStringField;
	JHojyoMA_PrintContNoK4: TStringField;
	JHojyoMA_PrintContMoneyK4: TCurrencyField;
	JHojyoMA_PrintTax_RateK4: TIntegerField;
	JHojyoMA_PrintTax_RateK4Name: TStringField;
	JHojyoMA_PrintSales_TaxK4: TCurrencyField;
	JHojyoMA_PrintContDateK5: TStringField;
	JHojyoMA_PrintContMoneyK5: TCurrencyField;
	JHojyoMA_PrintContNoK5: TStringField;
	JHojyoMA_PrintTax_RateK5: TIntegerField;
	JHojyoMA_PrintTax_RateK5Name: TStringField;
	JHojyoMA_PrintSales_TaxK5: TCurrencyField;
	JHojyoMA_PrintContDateK6: TStringField;
	JHojyoMA_PrintContNoK6: TStringField;
	JHojyoMA_PrintContMoneyK6: TCurrencyField;
	JHojyoMA_PrintTax_RateK6: TIntegerField;
	JHojyoMA_PrintTax_RateK6Name: TStringField;
	JHojyoMA_PrintSales_TaxK6: TCurrencyField;
	JHojyoMA_PrintContDateK7: TStringField;
	JHojyoMA_PrintContNoK7: TStringField;
	JHojyoMA_PrintContMoneyK7: TCurrencyField;
	JHojyoMA_PrintTax_RateK7: TIntegerField;
	JHojyoMA_PrintTax_RateK7Name: TStringField;
	JHojyoMA_PrintSales_TaxK7: TCurrencyField;
	JHojyoMA_PrintContDateK8: TStringField;
	JHojyoMA_PrintContNoK8: TStringField;
	JHojyoMA_PrintContMoneyK8: TCurrencyField;
	JHojyoMA_PrintTax_RateK8: TIntegerField;
	JHojyoMA_PrintTax_RateK8Name: TStringField;
	JHojyoMA_PrintSales_TaxK8: TCurrencyField;
	JHojyoMA_PrintContDateN1: TStringField;
	JHojyoMA_PrintContDateN2: TStringField;
	JHojyoMA_PrintContDateN3: TStringField;
	JHojyoMA_PrintContDateN4: TStringField;
	JHojyoMA_PrintContDateN5: TStringField;
	JHojyoMA_PrintContDateN6: TStringField;
	JHojyoMA_PrintContDateN7: TStringField;
	JHojyoMA_PrintContDateN8: TStringField;
	JHojyoMA_PrintContDateN9: TStringField;
	JHojyoMA_PrintContDateN10: TStringField;
	JHojyoMA_PrintContMoneyN1: TCurrencyField;
	JHojyoMA_PrintContMoneyN2: TCurrencyField;
	JHojyoMA_PrintContMoneyN3: TCurrencyField;
	JHojyoMA_PrintContMoneyN4: TCurrencyField;
	JHojyoMA_PrintContMoneyN5: TCurrencyField;
	JHojyoMA_PrintContMoneyN6: TCurrencyField;
	JHojyoMA_PrintContMoneyN7: TCurrencyField;
	JHojyoMA_PrintContMoneyN8: TCurrencyField;
	JHojyoMA_PrintContMoneyN9: TCurrencyField;
	JHojyoMA_PrintContMoneyN10: TCurrencyField;
	GHojyoMA_Print: TdxMemData;
	GHojyoMA_PrintFusen: TGraphicField;
	GHojyoMA_PrintGCode: TStringField;
	GHojyoMA_PrintRenChar: TStringField;
	GHojyoMA_PrintLongName: TStringField;
	GHojyoMA_PrintSimpleName: TStringField;
	GHojyoMA_PrintRootKbn: TIntegerField;
	GHojyoMA_PrintZipCode1: TIntegerField;
	GHojyoMA_PrintZipCode2: TIntegerField;
	GHojyoMA_PrintAddress1: TStringField;
	GHojyoMA_PrintAddress2: TStringField;
	GHojyoMA_PrintTelNo: TStringField;
	GHojyoMA_PrintPersonCode: TStringField;
	GHojyoMA_PrintCostomerCode: TStringField;
	GHojyoMA_PrintBmnCode: TStringField;
	GHojyoMA_PrintSalesBase: TIntegerField;
	GHojyoMA_PrintHaifuKbn: TIntegerField;
	GHojyoMA_PrintMoveKbn: TIntegerField;
	GHojyoMA_PrintRootKbnName: TStringField;
	GHojyoMA_PrintPersonCodeName: TStringField;
	GHojyoMA_PrintCostomerCodeName: TStringField;
	GHojyoMA_PrintBmnCodeName: TStringField;
	GHojyoMA_PrintSalesBaseName: TStringField;
	GHojyoMA_PrintHaifuKbnName: TStringField;
	GHojyoMA_PrintMoveKbnName: TStringField;
	GHojyoMA_PrintKeiyakuG: TCurrencyField;
	GHojyoMA_PrintShohiG: TCurrencyField;
	GHojyoMA_PrintNyukinG: TCurrencyField;
	GHojyoMA_PrintFusenCmt: TStringField;
	GHojyoMA_PrintListName: TStringField;
	GHojyoMA_PrintCostomerName: TStringField;
	GHojyoMA_PrintStartDate: TStringField;
	GHojyoMA_PrintScheduleDate: TStringField;
	GHojyoMA_PrintFinishDate: TStringField;
	GHojyoMA_PrintUpDateTime: TStringField;
	GHojyoMA_PrintContDateK1: TStringField;
	GHojyoMA_PrintContNoK1: TStringField;
	GHojyoMA_PrintContMoneyK1: TCurrencyField;
	GHojyoMA_PrintTax_RateK1: TIntegerField;
	GHojyoMA_PrintTax_RateK1Name: TStringField;
	GHojyoMA_PrintSales_TaxK1: TCurrencyField;
	GHojyoMA_PrintContDateK2: TStringField;
	GHojyoMA_PrintContNoK2: TStringField;
	GHojyoMA_PrintContMoneyK2: TCurrencyField;
	GHojyoMA_PrintTax_RateK2: TIntegerField;
	GHojyoMA_PrintTax_RateK2Name: TStringField;
	GHojyoMA_PrintSales_TaxK2: TCurrencyField;
	GHojyoMA_PrintContDateK3: TStringField;
	GHojyoMA_PrintContNoK3: TStringField;
	GHojyoMA_PrintContMoneyK3: TCurrencyField;
	GHojyoMA_PrintTax_RAteK3: TIntegerField;
	GHojyoMA_PrintTax_RateK3Name: TStringField;
	GHojyoMA_PrintSales_TaxK3: TCurrencyField;
	GHojyoMA_PrintContDateK4: TStringField;
	GHojyoMA_PrintContNoK4: TStringField;
	GHojyoMA_PrintContMoneyK4: TCurrencyField;
	GHojyoMA_PrintTax_RateK4: TIntegerField;
	GHojyoMA_PrintTax_RateK4Name: TStringField;
	GHojyoMA_PrintSales_TaxK4: TCurrencyField;
	GHojyoMA_PrintContDateK5: TStringField;
	GHojyoMA_PrintContNoK5: TStringField;
	GHojyoMA_PrintContMoneyK5: TCurrencyField;
	GHojyoMA_PrintTax_RateK5: TIntegerField;
	GHojyoMA_PrintTax_RateK5Name: TStringField;
	GHojyoMA_PrintSales_TaxK5: TCurrencyField;
	GHojyoMA_PrintContDateK6: TStringField;
	GHojyoMA_PrintContNoK6: TStringField;
	GHojyoMA_PrintContMoneyK6: TCurrencyField;
	GHojyoMA_PrintTax_RateK6: TIntegerField;
	GHojyoMA_PrintTax_RateK6Name: TStringField;
	GHojyoMA_PrintSales_TaxK6: TCurrencyField;
	GHojyoMA_PrintContDateK7: TStringField;
	GHojyoMA_PrintContNoK7: TStringField;
	GHojyoMA_PrintContMoneyK7: TCurrencyField;
	GHojyoMA_PrintTax_RateK7: TIntegerField;
	GHojyoMA_PrintTax_RateK7Name: TStringField;
	GHojyoMA_PrintSales_TaxK7: TCurrencyField;
	GHojyoMA_PrintContDateK8: TStringField;
	GHojyoMA_PrintContNoK8: TStringField;
	GHojyoMA_PrintContMoneyK8: TCurrencyField;
	GHojyoMA_PrintTax_RateK8: TIntegerField;
	GHojyoMA_PrintTax_RateK8Name: TStringField;
	GHojyoMA_PrintSales_TaxK8: TCurrencyField;
	GHojyoMA_PrintContDateN1: TStringField;
	GHojyoMA_PrintContDateN2: TStringField;
	GHojyoMA_PrintContDateN3: TStringField;
	GHojyoMA_PrintContDateN4: TStringField;
	GHojyoMA_PrintContDateN5: TStringField;
	GHojyoMA_PrintContDateN6: TStringField;
	GHojyoMA_PrintContDateN7: TStringField;
	GHojyoMA_PrintContDateN8: TStringField;
	GHojyoMA_PrintContDateN9: TStringField;
	GHojyoMA_PrintContDateN10: TStringField;
	GHojyoMA_PrintContMoneyN1: TCurrencyField;
	GHojyoMA_PrintContMoneyN2: TCurrencyField;
	GHojyoMA_PrintContMoneyN3: TCurrencyField;
	GHojyoMA_PrintContMoneyN4: TCurrencyField;
	GHojyoMA_PrintContMoneyN5: TCurrencyField;
	GHojyoMA_PrintContMoneyN6: TCurrencyField;
	GHojyoMA_PrintContMoneyN7: TCurrencyField;
	GHojyoMA_PrintContMoneyN8: TCurrencyField;
	GHojyoMA_PrintContMoneyN9: TCurrencyField;
	GHojyoMA_PrintContMoneyN10: TCurrencyField;
	ppTitleBand2: TppTitleBand;
	ppHeaderBand2: TppHeaderBand;
	ppLine11: TppLine;
	SVppDate: TppSystemVariable;
	LppCorpCode: TppLabel;
	LppCorpName: TppLabel;
	ppListNameShosaiJ: TppLabel;
	ppColumnHeaderBand3: TppColumnHeaderBand;
	ppDetailBand2: TppDetailBand;
	ppShape2: TppShape;
	pDT_Code: TppDBText;
	pDT_Seishiki: TppDBText;
	pDT_Kanryaku: TppDBText;
	pDT_Renso: TppDBText;
	RImageZitsuSFusen: TppDBImage;
	R_JS_LastUpDate: TppDBText;
	ppDBText5: TppDBText;
	ppDBText6: TppDBText;
	ppDBText7: TppDBText;
	ppLabel15: TppLabel;
	ppDBText8: TppDBText;
	ppDBText9: TppDBText;
	ppDBText10: TppDBText;
	ppDBText11: TppDBText;
	ppDBText12: TppDBText;
	ppDBText13: TppDBText;
	ppDBText15: TppDBText;
	ppDBText17: TppDBText;
	ppDBText18: TppDBText;
	ppDBText19: TppDBText;
	ppDBText20: TppDBText;
	ppDBText23: TppDBText;
	ppDBText24: TppDBText;
	ppDBText25: TppDBText;
	ppDBText26: TppDBText;
	ppDBText27: TppDBText;
	ppDBText28: TppDBText;
	ppLabel3: TppLabel;
	ppLine12: TppLine;
	ppLabel9: TppLabel;
	ppLabel33: TppLabel;
	ppLabel42: TppLabel;
	ppLabel10: TppLabel;
	ppLabel13: TppLabel;
	ppLabel16: TppLabel;
	ppKanFuriBmnJ: TppLabel;
	ppTantoJ: TppLabel;
	ppLabel19: TppLabel;
	ppLabel20: TppLabel;
	ppLabel21: TppLabel;
	ppLabel22: TppLabel;
	ppLabel24: TppLabel;
	ppLabel25: TppLabel;
	ppLabel26: TppLabel;
	ppLabel27: TppLabel;
	ppLabel28: TppLabel;
	ppLabel29: TppLabel;
	ppLine14: TppLine;
	ppLine22: TppLine;
	ppLine23: TppLine;
	ppLine25: TppLine;
	ppLine26: TppLine;
	ppLine27: TppLine;
	ppLine28: TppLine;
	ppLine29: TppLine;
	ppLine30: TppLine;
	ppLine31: TppLine;
	ppLine32: TppLine;
	ppLine33: TppLine;
	ppLine34: TppLine;
	ppLine35: TppLine;
	ppLine36: TppLine;
	ppLine37: TppLine;
	ppLine38: TppLine;
	ppLine39: TppLine;
	ppLine40: TppLine;
	ppLine41: TppLine;
	ppLine42: TppLine;
	ppLine43: TppLine;
	ppDBText29: TppDBText;
	ppDBText30: TppDBText;
	ppLine13: TppLine;
	ppLabel35: TppLabel;
	ppLabel36: TppLabel;
	ppLine16: TppLine;
	ppLabel37: TppLabel;
	ppLine17: TppLine;
	ppLine18: TppLine;
	ppLabel38: TppLabel;
	ppLine19: TppLine;
	ppLine20: TppLine;
	ppLabel39: TppLabel;
	ppLine21: TppLine;
	ppLabel40: TppLabel;
	ppLine24: TppLine;
	ppLabel41: TppLabel;
	ppLine44: TppLine;
	ppLabel43: TppLabel;
	ppLine45: TppLine;
	ppLine46: TppLine;
	ppLine47: TppLine;
	ppLine48: TppLine;
	ppLine49: TppLine;
	ppLine50: TppLine;
	ppLine51: TppLine;
	ppLine52: TppLine;
	ppLine53: TppLine;
	ppLine54: TppLine;
	ppLabel68: TppLabel;
	ppLabel55: TppLabel;
	ppLabel56: TppLabel;
	ppLabel57: TppLabel;
	ppLine58: TppLine;
	ppDBText31: TppDBText;
	ppDBText42: TppDBText;
	ppDBText43: TppDBText;
	ppDBText44: TppDBText;
	ppDBText45: TppDBText;
	ppDBText46: TppDBText;
	ppDBText47: TppDBText;
	ppDBText48: TppDBText;
	ppDBText49: TppDBText;
	ppDBText50: TppDBText;
	ppDBText51: TppDBText;
	ppDBText54: TppDBText;
	ppDBText55: TppDBText;
	ppDBText56: TppDBText;
	ppDBText57: TppDBText;
	ppDBText58: TppDBText;
	ppDBText59: TppDBText;
	ppDBText60: TppDBText;
	ppDBText61: TppDBText;
	ppDBText62: TppDBText;
	ppDBText63: TppDBText;
	ppDBText64: TppDBText;
	ppDBText65: TppDBText;
	ppDBText66: TppDBText;
	ppDBText67: TppDBText;
	ppLabel74: TppLabel;
	ppDBText68: TppDBText;
	ppDBText69: TppDBText;
	ppDBText70: TppDBText;
	ppLabelTokusyu: TppDBText;
	ppDBText81: TppDBText;
	ppDBText84: TppDBText;
	ppDBText90: TppDBText;
	ppDBText21: TppDBText;
	ppLabel1: TppLabel;
	ppLabel2: TppLabel;
	ppLabel7: TppLabel;
	ppLabel14: TppLabel;
	ppLabel17: TppLabel;
	ppLabel18: TppLabel;
	ppLabel23: TppLabel;
	ppLabel30: TppLabel;
	ppLabel31: TppLabel;
	ppLabel32: TppLabel;
	ppLabel34: TppLabel;
	ppLabel44: TppLabel;
	ppLabel45: TppLabel;
	ppLabel46: TppLabel;
	ppLabel47: TppLabel;
	ppLine100: TppLine;
	ppLine101: TppLine;
	ppLine102: TppLine;
	ppLine139: TppLine;
	ppLabel48: TppLabel;
	ppLine140: TppLine;
	ppLabel49: TppLabel;
	ppLine141: TppLine;
	ppLine55: TppLine;
	ppLine56: TppLine;
	ppLine57: TppLine;
	ppDBText138: TppDBText;
	ppDBText139: TppDBText;
	ppDBText140: TppDBText;
	ppDBText141: TppDBText;
	ppDBText142: TppDBText;
	ppDBText143: TppDBText;
	ppDBText144: TppDBText;
	ppDBText145: TppDBText;
	ppDBText146: TppDBText;
	ppDBText147: TppDBText;
	ppDBText148: TppDBText;
	ppDBText149: TppDBText;
	ppDBText150: TppDBText;
	ppDBText151: TppDBText;
	ppDBText152: TppDBText;
	ppDBText153: TppDBText;
	ppDBText154: TppDBText;
	ppDBText155: TppDBText;
	ppDBText156: TppDBText;
	ppDBText157: TppDBText;
	ppDBText158: TppDBText;
	ppDBText159: TppDBText;
	ppDBText160: TppDBText;
	ppDBText161: TppDBText;
	ppDBText162: TppDBText;
	ppDBText163: TppDBText;
	ppDBText164: TppDBText;
	ppDBText165: TppDBText;
	ppDBText166: TppDBText;
	ppDBText167: TppDBText;
	ppDBText168: TppDBText;
	ppDBText169: TppDBText;
	ppDBText170: TppDBText;
	ppDBText171: TppDBText;
	ppDBText172: TppDBText;
	ppDBText173: TppDBText;
	ppDBText174: TppDBText;
	ppDBText175: TppDBText;
	ppDBText176: TppDBText;
	ppDBText177: TppDBText;
	ppLine62: TppLine;
	ppLine59: TppLine;
	ppLabel50: TppLabel;
	ppColumnFooterBand3: TppColumnFooterBand;
	ppFooterBand2: TppFooterBand;
	SVppPage: TppSystemVariable;
	LppAccOffice: TppLabel;
	ppTitleBand3: TppTitleBand;
	ppHeaderBand3: TppHeaderBand;
	ppLine70: TppLine;
	ppSystemVariable1: TppSystemVariable;
	ppLabel79: TppLabel;
	ppLabel80: TppLabel;
	ppListNameShosaiG: TppLabel;
	ppColumnHeaderBand4: TppColumnHeaderBand;
	ppDetailBand3: TppDetailBand;
	ppShape3: TppShape;
	ppDBText71: TppDBText;
	ppDBText72: TppDBText;
	ppDBText73: TppDBText;
	ppDBText74: TppDBText;
	ppDBImage2: TppDBImage;
	ppDBText75: TppDBText;
	ppDBText76: TppDBText;
	ppDBText77: TppDBText;
	ppDBText78: TppDBText;
	ppLabel81: TppLabel;
	ppDBText79: TppDBText;
	ppDBText80: TppDBText;
	ppDBText82: TppDBText;
	ppDBText83: TppDBText;
	ppDBText85: TppDBText;
	ppDBText86: TppDBText;
	ppDBText87: TppDBText;
	ppDBText88: TppDBText;
	ppDBText89: TppDBText;
	ppDBText94: TppDBText;
	ppDBText95: TppDBText;
	ppLabel82: TppLabel;
	ppLine71: TppLine;
	ppLabel83: TppLabel;
	ppLabel84: TppLabel;
	ppLabel85: TppLabel;
	ppLabel87: TppLabel;
	ppLabel88: TppLabel;
	ppLabel89: TppLabel;
	ppTantoG: TppLabel;
	ppLabel92: TppLabel;
	ppLabel93: TppLabel;
	ppLabel94: TppLabel;
	ppLabel95: TppLabel;
	ppLabel98: TppLabel;
	ppLabel100: TppLabel;
	ppLabel101: TppLabel;
	ppLabel102: TppLabel;
	ppLine72: TppLine;
	ppLine73: TppLine;
	ppLine74: TppLine;
	ppLine75: TppLine;
	ppLine76: TppLine;
	ppLine77: TppLine;
	ppLine78: TppLine;
	ppLine79: TppLine;
	ppLine80: TppLine;
	ppLine81: TppLine;
	ppLine82: TppLine;
	ppLine83: TppLine;
	ppLine84: TppLine;
	ppLine85: TppLine;
	ppLine86: TppLine;
	ppLine87: TppLine;
	ppLine92: TppLine;
	ppDBText98: TppDBText;
	ppDBText99: TppDBText;
	ppLine103: TppLine;
	ppLabel108: TppLabel;
	ppLine104: TppLine;
	ppLabel109: TppLabel;
	ppLine105: TppLine;
	ppLabel110: TppLabel;
	ppLine106: TppLine;
	ppLine107: TppLine;
	ppLabel111: TppLabel;
	ppLine109: TppLine;
	ppLine110: TppLine;
	ppLabel112: TppLabel;
	ppLine111: TppLine;
	ppLabel113: TppLabel;
	ppLine112: TppLine;
	ppLabel114: TppLabel;
	ppLine113: TppLine;
	ppLabel115: TppLabel;
	ppLine114: TppLine;
	ppLine115: TppLine;
	ppLine116: TppLine;
	ppLine117: TppLine;
	ppLine118: TppLine;
	ppLine119: TppLine;
	ppLine120: TppLine;
	ppLine121: TppLine;
	ppLine122: TppLine;
	ppLine123: TppLine;
	ppLabel129: TppLabel;
	ppLine127: TppLine;
	ppDBText110: TppDBText;
	ppDBText111: TppDBText;
	ppDBText112: TppDBText;
	ppDBText113: TppDBText;
	ppDBText114: TppDBText;
	ppDBText115: TppDBText;
	ppDBText116: TppDBText;
	ppDBText117: TppDBText;
	ppDBText118: TppDBText;
	ppDBText119: TppDBText;
	ppDBText120: TppDBText;
	ppDBText121: TppDBText;
	ppDBText122: TppDBText;
	ppDBText123: TppDBText;
	ppDBText124: TppDBText;
	ppDBText125: TppDBText;
	ppDBText126: TppDBText;
	ppDBText127: TppDBText;
	ppDBText128: TppDBText;
	ppDBText129: TppDBText;
	ppDBText130: TppDBText;
	ppDBText131: TppDBText;
	ppDBText132: TppDBText;
	ppDBText133: TppDBText;
	ppDBText134: TppDBText;
	ppDBText135: TppDBText;
	ppDBText136: TppDBText;
	ppDBText137: TppDBText;
	ppLine99: TppLine;
	ppDBText22: TppDBText;
	ppDBText91: TppDBText;
	ppDBText92: TppDBText;
	ppDBText93: TppDBText;
	ppLine15: TppLine;
	ppBmnG: TppLabel;
	ppDBText96: TppDBText;
	ppDBText97: TppDBText;
	ppLine60: TppLine;
	ppDBText178: TppDBText;
	ppDBText179: TppDBText;
	ppDBText180: TppDBText;
	ppDBText181: TppDBText;
	ppDBText182: TppDBText;
	ppDBText183: TppDBText;
	ppDBText184: TppDBText;
	ppDBText185: TppDBText;
	ppDBText186: TppDBText;
	ppDBText187: TppDBText;
	ppLabel51: TppLabel;
	ppLabel52: TppLabel;
	ppLabel53: TppLabel;
	ppLabel54: TppLabel;
	ppLabel59: TppLabel;
	ppLabel62: TppLabel;
	ppLabel63: TppLabel;
	ppLabel64: TppLabel;
	ppLabel65: TppLabel;
	ppLabel66: TppLabel;
	ppLabel67: TppLabel;
	ppLabel69: TppLabel;
	ppLabel70: TppLabel;
	ppLabel71: TppLabel;
	ppLabel72: TppLabel;
	ppLabel73: TppLabel;
	ppLabel75: TppLabel;
	ppLabel76: TppLabel;
	ppLabel77: TppLabel;
	ppLabel78: TppLabel;
	ppLabel90: TppLabel;
	ppLine61: TppLine;
	ppLine63: TppLine;
	ppLine64: TppLine;
	ppLine65: TppLine;
	ppLine66: TppLine;
	ppLine67: TppLine;
	ppLine68: TppLine;
	ppLine69: TppLine;
	ppLine142: TppLine;
	ppLine143: TppLine;
	ppLine144: TppLine;
	ppLine145: TppLine;
	ppLine146: TppLine;
	ppLine147: TppLine;
	ppLine148: TppLine;
	ppLabel91: TppLabel;
	ppDBText188: TppDBText;
	ppDBText189: TppDBText;
	ppDBText190: TppDBText;
	ppDBText191: TppDBText;
	ppDBText192: TppDBText;
	ppDBText193: TppDBText;
	ppDBText194: TppDBText;
	ppDBText195: TppDBText;
	ppDBText196: TppDBText;
	ppDBText197: TppDBText;
	ppDBText198: TppDBText;
	ppDBText199: TppDBText;
	ppDBText200: TppDBText;
	ppDBText201: TppDBText;
	ppDBText202: TppDBText;
	ppDBText203: TppDBText;
	ppDBText204: TppDBText;
	ppDBText205: TppDBText;
	ppDBText206: TppDBText;
	ppDBText207: TppDBText;
	ppDBText208: TppDBText;
	ppDBText209: TppDBText;
	ppDBText210: TppDBText;
	ppDBText211: TppDBText;
	ppDBText212: TppDBText;
	ppDBText213: TppDBText;
	ppDBText214: TppDBText;
	ppDBText215: TppDBText;
	ppDBText216: TppDBText;
	ppDBText217: TppDBText;
	ppColumnFooterBand4: TppColumnFooterBand;
	ppFooterBand3: TppFooterBand;
	ppSystemVariable2: TppSystemVariable;
	ppLabel147: TppLabel;
	ppLine93: TppLine;
	ppLine124: TppLine;
	BSpeedButtonFind: TMSpeedButton;
	JHojyoMA_DMemDataPartKbn: TIntegerField;
	JHojyoMA_DMemDataDetailKbn1: TIntegerField;
	JHojyoMA_DMemDataDetailKbn2: TIntegerField;
	JHojyoMA_DMemDataSalesKmkCd: TIntegerField;
	JHojyoMA_DMemDataPatternNo: TIntegerField;
	GHojyoMA_DMemDataPartKbn: TIntegerField;
	GHojyoMA_DMemDataDetailKbn1: TIntegerField;
	GHojyoMA_DMemDataDetailKbn2: TIntegerField;
	GHojyoMA_DMemDataSalesKmkCd: TIntegerField;
	GHojyoMA_DMemDataPatternNo: TIntegerField;
	Jituzai_LLabel_PartKbn: TMLabel;
	Jituzai_ENEdit_PartKbn: TMNumEdit;
	Jituzai_LLabel_PartKbnDsp: TMLabel;
	Jituzai_LLabel_PatternNo: TMLabel;
	Jituzai_ENEdit_PatternNo: TMNumEdit;
	Jituzai_LLabel_PatternNoDsp: TMLabel;
	MasterInfo_DMemDataKosyuName: TStringField;
	MasterInfo_DMemDataKojKbn2: TIntegerField;
	MasterInfo_DMemDataMstrKbn5: TIntegerField;
	MasterInfo_DMemDataKsyUse: TIntegerField;
	MasterInfo_DMemDataKmkCode3: TIntegerField;
	MasterInfo_DMemDataKmkCode4: TIntegerField;
	ppLabel96: TppLabel;
	ppLabel97: TppLabel;
	ppLabel99: TppLabel;
	ppLabel103: TppLabel;
	ppLabel104: TppLabel;
	ppDBText32: TppDBText;
	ppDBText33: TppDBText;
	ppDBText34: TppDBText;
	ppDBText35: TppDBText;
	ppDBText36: TppDBText;
	ppDBText37: TppDBText;
	ppDBText38: TppDBText;
	ppDBText39: TppDBText;
	ppDBText40: TppDBText;
	ppDBText41: TppDBText;
	JHojyoMA_PrintDetailKbn1: TIntegerField;
	JHojyoMA_PrintDetailKbn1Name: TStringField;
	JHojyoMA_PrintSalesKmkCd: TIntegerField;
	JHojyoMA_PrintSalesKmkCdName: TStringField;
	JHojyoMA_PrintDetailKbn2: TIntegerField;
	JHojyoMA_PrintDetailKbn2Name: TStringField;
	JHojyoMA_PrintPartKbn: TIntegerField;
	JHojyoMA_PrintPartKbnName: TStringField;
	JHojyoMA_PrintPatternNo: TIntegerField;
	JHojyoMA_PrintPatternNoName: TStringField;
	MasterInfo_DMemDataKmkCode6: TIntegerField;
	N4: TMenuItem;
	TPOpen: TMenuItem;
	TPClose: TMenuItem;
	MasterInfo_DMemDataTorihikiUse: TIntegerField;
    JHojyoMA_DMemDataNCode: TFloatField;
    GHojyoMA_DMemDataNCode: TFloatField;
    JKeiyaku_DMemDataNCode: TFloatField;
    GKeiyaku_DMemDataNCode: TFloatField;
    JNyukin_DMemDataNCODE: TFloatField;
    GNyukin_DMemDataNCode: TFloatField;
    Jituzai_PPanel_Koji: TMPanel;
    Jituzai_LLabel_ZipCode1: TMLabel;
    Jituzai_LLabel_Address: TMLabel;
    Jituzai_ENEdit_ZipCode1: TMNumEdit;
    Jituzai_LLabel_ZipCode2: TMLabel;
    Jituzai_ENEdit_ZipCode2: TMNumEdit;
    Jituzai_ETEdit_Address1: TMTxtEdit;
    Jituzai_ETEdit_Address2: TMTxtEdit;
    Jituzai_LLabel_TelNo: TMLabel;
    Jituzai_ETEdit_TelNo: TMTxtEdit;
    Jituzai_LLabel_BmnCode: TMLabel;
    Jituzai_LLabel_DetailKbn1: TMLabel;
    Jituzai_ENEdit_DetailKbn1: TMNumEdit;
    Jituzai_LLabel_DetailKbn1Dsp: TMLabel;
    Jituzai_LLabel_SalesKmkCd: TMLabel;
    Jituzai_ENEdit_SalesKmkCd: TMNumEdit;
    Jituzai_LLabel_SalesKmkCdDsp: TMLabel;
    Jituzai_LLabel_DetailKbn2: TMLabel;
    Jituzai_ENEdit_DetailKbn2: TMNumEdit;
    Jituzai_LLabel_DetailKbn2Dsp: TMLabel;
    Jituzai_ETEdit_BmnCode: TMTxtEdit;
    Jituzai_LLabel_BmnName: TMLabel;
    MLabel12: TMLabel;
    Jituzai_EDEdit_JStartDate: TMDateEdit;
    MLabel14: TMLabel;
    MNumEdit1: TMNumEdit;
    MLabel20: TMLabel;
    Jituzai_EDEdit_EndDate: TMDateEdit;
    MLabel22: TMLabel;
    Jituzai_EDEdit_JEndDate: TMDateEdit;
    JHojyoMA_DMemDataEndDate: TDateField;
    JHojyoMA_DMemDataJStartDate: TDateField;
    JHojyoMA_DMemDataJEndDate: TDateField;
    GHojyoMA_DMemDataEndDate: TDateField;
    GHojyoMA_DMemDataJStartDate: TDateField;
    GHojyoMA_DMemDataJEndDate: TDateField;
    Jituzai_LLabel_SalesBase: TMLabel;
    Jituzai_LLabel_MoveKbnDsp: TMLabel;
    Jituzai_ENEdit_SalesBase: TMNumEdit;
    Jituzai_LLabel_SalesBaseDsp: TMLabel;
    MLabel26: TMLabel;
    JHojyoMA_DMemDataBIKO: TStringField;
    Jituzai_LLabel_PersonCode: TMLabel;
    Jituzai_LLabel_CostomerCode: TMLabel;
    Jituzai_LLabel_PersonName: TMLabel;
    Jituzai_LLabel_CustomerName: TMLabel;
    Jituzai_ETEdit_PersonCode: TMTxtEdit;
    Jituzai_ENEdit_PersonCode: TMNumEdit;
    Jituzai_PPanel_Kansei: TMPanel;
    dxKanseiGid: TdxDBGrid;
    dxKanseiGidNM: TdxDBGridMaskColumn;
    dxKanseiGidTaitol: TdxDBGridMaskColumn;
    JKanseiDataSource: TDataSource;
    JKansei: TdxMemData;
    JKanseiTitol: TStringField;
    JKanseiGCODE: TStringField;
    Goukei_PPanel_Koji: TMPanel;
    MLabel9: TMLabel;
    Goukei_ENEdit_ZipCode1: TMNumEdit;
    MLabel10: TMLabel;
    Goukei_ENEdit_ZipCode2: TMNumEdit;
    MLabel11: TMLabel;
    Goukei_ETEdit_Address1: TMTxtEdit;
    Goukei_ETEdit_Address2: TMTxtEdit;
    MLabel13: TMLabel;
    Goukei_ETEdit_TelNo: TMTxtEdit;
    MLabel8: TMLabel;
    Goukei_EDEdit_JStartDate: TMDateEdit;
    MLabel30: TMLabel;
    Goukei_EDEdit_JEndDate: TMDateEdit;
    Jituzai_ETEdit_CustomerCode: TMTxtEdit;
    Jituzai_ENEdit_CustomerCode: TMNumEdit;
    Jituzai_ENEdit_BmnCode: TMNumEdit;
    MMasterKBN: TMComboBox;
    MLabel32: TMLabel;
    JKanseiMasterKbn: TIntegerField;
    JKanseiNAME: TStringField;
    JKanseiNCODE: TFloatField;
    JKanseiCodeAttr: TIntegerField;
    JKanseiCodeDigit: TIntegerField;
    Goukei_ETEdit_BmnCode: TMTxtEdit;
    Goukei_LLabel_BmnCode: TMLabel;
    Goukei_ENEdit_BmnCode: TMNumEdit;
    Jituzai_PPanel_Sonota: TMPanel;
    MLabel49: TMLabel;
    Jituzai_LLabel_SegTitl1: TMLabel;
    Jituzai_LLabel_SegTitl2: TMLabel;
    Jituzai_LLabel_SegTitl3: TMLabel;
    Jituzai_LLabel_SegTitl4: TMLabel;
    Jituzai_LLabel_SegTitl5: TMLabel;
    Jituzai_LLabel_SegTitl6: TMLabel;
    Jituzai_LLabel_SegTitl7: TMLabel;
    Jituzai_LLabel_SegTitl8: TMLabel;
    Jituzai_LLabel_SegTitl9: TMLabel;
    Jituzai_LLabel_SegTitl10: TMLabel;
    Jituzai_LLabel_SegNm1: TMLabel;
    Jituzai_LLabel_SegNm2: TMLabel;
    Jituzai_LLabel_SegNm3: TMLabel;
    Jituzai_LLabel_SegNm4: TMLabel;
    Jituzai_LLabel_SegNm5: TMLabel;
    Jituzai_LLabel_SegNm6: TMLabel;
    Jituzai_LLabel_SegNm7: TMLabel;
    Jituzai_LLabel_SegNm8: TMLabel;
    Jituzai_LLabel_SegNm9: TMLabel;
    Jituzai_LLabel_SegNm10: TMLabel;
    MLabel35: TMLabel;
    MLabel33: TMLabel;
    MLabel37: TMLabel;
    Jituzai_ETEdit_SegCd1: TMTxtEdit;
    Jituzai_ETEdit_SegCd2: TMTxtEdit;
    Jituzai_ETEdit_SegCd3: TMTxtEdit;
    Jituzai_ETEdit_SegCd4: TMTxtEdit;
    Jituzai_ETEdit_SegCd5: TMTxtEdit;
    Jituzai_ETEdit_SegCd6: TMTxtEdit;
    Jituzai_ETEdit_SegCd7: TMTxtEdit;
    Jituzai_ETEdit_SegCd8: TMTxtEdit;
    Jituzai_ETEdit_SegCd9: TMTxtEdit;
    Jituzai_ETEdit_SegCd10: TMTxtEdit;
    MLabel34: TMLabel;
    MLabel53: TMLabel;
    Jituzai_LLabel_BunTitl1: TMLabel;
    Jituzai_LLabel_BunTitl2: TMLabel;
    Jituzai_LLabel_BunTitl3: TMLabel;
    Jituzai_LLabel_BunTitl4: TMLabel;
    Jituzai_LLabel_BunTitl5: TMLabel;
    Jituzai_LLabel_BunTitl6: TMLabel;
    Jituzai_LLabel_BunTitl7: TMLabel;
    Jituzai_LLabel_BunTitl8: TMLabel;
    Jituzai_LLabel_BunTitl9: TMLabel;
    Jituzai_LLabel_BunTitl10: TMLabel;
    Jituzai_LLabel_BunNm1: TMLabel;
    Jituzai_LLabel_BunNm2: TMLabel;
    Jituzai_LLabel_BunNm3: TMLabel;
    Jituzai_LLabel_BunNm4: TMLabel;
    Jituzai_LLabel_BunNm5: TMLabel;
    Jituzai_LLabel_BunNm6: TMLabel;
    Jituzai_LLabel_BunNm7: TMLabel;
    Jituzai_LLabel_BunNm8: TMLabel;
    Jituzai_LLabel_BunNm9: TMLabel;
    Jituzai_LLabel_BunNm10: TMLabel;
    Jituzai_ETEdit_BunCd1: TMTxtEdit;
    Jituzai_ETEdit_BunCd2: TMTxtEdit;
    Jituzai_ETEdit_BunCd3: TMTxtEdit;
    Jituzai_ETEdit_BunCd4: TMTxtEdit;
    Jituzai_ETEdit_BunCd5: TMTxtEdit;
    Jituzai_ETEdit_BunCd6: TMTxtEdit;
    Jituzai_ETEdit_BunCd7: TMTxtEdit;
    Jituzai_ETEdit_BunCd8: TMTxtEdit;
    Jituzai_ETEdit_BunCd9: TMTxtEdit;
    Jituzai_ETEdit_BunCd10: TMTxtEdit;
    MLabel39: TMLabel;
    LLabel_ECombo_Header: TMLabel;
    MLabel16: TMLabel;
    LblRecCnt: TMLabel;
    MLabel17: TMLabel;
    MPanel3: TMPanel;
    SStatusBar: TMStatusBar;
    MSPFunctionBar: TMSPFunctionBar;
    aclExec: TActionList;
    FreeSeTMtokui: TAction;
    JHojyoMA_DMemDataSegCode1: TStringField;
    JHojyoMA_DMemDataSegCode2: TStringField;
    JHojyoMA_DMemDataSegCode3: TStringField;
    JHojyoMA_DMemDataSegCode4: TStringField;
    JHojyoMA_DMemDataSegCode5: TStringField;
    JHojyoMA_DMemDataSegCode6: TStringField;
    JHojyoMA_DMemDataSegCode7: TStringField;
    JHojyoMA_DMemDataSegCode8: TStringField;
    JHojyoMA_DMemDataSegCode9: TStringField;
    JHojyoMA_DMemDataSegCode10: TStringField;
    JHojyoMA_DMemDataBunruiCode1: TStringField;
    JHojyoMA_DMemDataBunruiCode2: TStringField;
    JHojyoMA_DMemDataBunruiCode3: TStringField;
    JHojyoMA_DMemDataBunruiCode4: TStringField;
    JHojyoMA_DMemDataBunruiCode5: TStringField;
    JHojyoMA_DMemDataBunruiCode6: TStringField;
    JHojyoMA_DMemDataBunruiCode7: TStringField;
    JHojyoMA_DMemDataBunruiCode8: TStringField;
    JHojyoMA_DMemDataBunruiCode9: TStringField;
    JHojyoMA_DMemDataBunruiCode10: TStringField;
    PPanelTree: TMPanel;
    VTreeView: TMTreeView;
    GHojyoMA_DMemDataSyokuchikbn: TIntegerField;
    JHojyoMA_DMemDataSyokuchikbn: TIntegerField;
    MPnlTop: TMPanel;
    Jituzai_LLabel_GCode: TMLabel;
    Jituzai_Fusen1: TImage;
    Jituzai_Fusen2: TImage;
    Jituzai_Fusen3: TImage;
    Jituzai_Fusen4: TImage;
    Jituzai_ETEdit_GCode: TMTxtEdit;
    Jituzai_ENEdit_GCode: TMNumEdit;
    MLabel2: TMLabel;
    Goukei_ETEdit_RenChar: TMTxtEdit;
    MPanel1: TMPanel;
    MLabel1: TMLabel;
    Goukei_Fusen1: TImage;
    Goukei_Fusen3: TImage;
    Goukei_Fusen2: TImage;
    Goukei_Fusen4: TImage;
    Goukei_ETEdit_GCode: TMTxtEdit;
    Goukei_ENEdit_GCode: TMNumEdit;
    Jituzai_LLabel_BunCode: TMLabel;
    Jituzai_ENEdit_BunCode: TMNumEdit;
    Jituzai_LLabel_BunCodeDsp: TMLabel;
    MLabel42: TMLabel;
    PPanel_ECombo: TMPanel;
    ECombo_Header: TMComboBox;
    GFRed2: TMenuItem;
    GFBlue2: TMenuItem;
    GFGreen2: TMenuItem;
    GFOrange2: TMenuItem;
    dxKanseiGidCODE: TdxDBGridButtonColumn;
    JHojyoMA_PrintEndDate: TStringField;
    JHojyoMA_PrintScheduleDateS: TStringField;
    JHojyoMA_PrintKanseiCd1: TStringField;
    JHojyoMA_PrintKanseiCd2: TStringField;
    JHojyoMA_PrintKanseiCd3: TStringField;
    JHojyoMA_PrintKanseiCd4: TStringField;
    JHojyoMA_PrintKanseiCd5: TStringField;
    JHojyoMA_PrintKanseiCd6: TStringField;
    JHojyoMA_PrintKanseiCd7: TStringField;
    JHojyoMA_PrintKanseiCd8: TStringField;
    JHojyoMA_PrintKanseiCd9: TStringField;
    JHojyoMA_PrintKanseiCd10: TStringField;
    JHojyoMA_PrintKanseiCd11: TStringField;
    JHojyoMA_PrintKanseiCd12: TStringField;
    JHojyoMA_PrintKanseiCd13: TStringField;
    JHojyoMA_PrintKanseiCd14: TStringField;
    JHojyoMA_PrintKanseiCd15: TStringField;
    JHojyoMA_PrintKanseiCd16: TStringField;
    JHojyoMA_PrintKanseiCd17: TStringField;
    JHojyoMA_PrintKanseiCd18: TStringField;
    JHojyoMA_PrintKanseiCd19: TStringField;
    JHojyoMA_PrintKanseiCd20: TStringField;
    JHojyoMA_PrintKanseiCd21: TStringField;
    JHojyoMA_PrintKanseiCd22: TStringField;
    JHojyoMA_PrintKanseiCd23: TStringField;
    JHojyoMA_PrintKanseiCd24: TStringField;
    JHojyoMA_PrintKanseiCd25: TStringField;
    JHojyoMA_PrintKanseiNm1: TStringField;
    JHojyoMA_PrintKanseiNm2: TStringField;
    JHojyoMA_PrintKanseiNm3: TStringField;
    JHojyoMA_PrintKanseiNm4: TStringField;
    JHojyoMA_PrintKanseiNm5: TStringField;
    JHojyoMA_PrintKanseiNm6: TStringField;
    JHojyoMA_PrintKanseiNm7: TStringField;
    JHojyoMA_PrintKanseiNm8: TStringField;
    JHojyoMA_PrintKanseiNm9: TStringField;
    JHojyoMA_PrintKanseiNm10: TStringField;
    JHojyoMA_PrintKanseiNm11: TStringField;
    JHojyoMA_PrintKanseiNm12: TStringField;
    JHojyoMA_PrintKanseiNm13: TStringField;
    JHojyoMA_PrintKanseiNm14: TStringField;
    JHojyoMA_PrintKanseiNm15: TStringField;
    JHojyoMA_PrintKanseiNm16: TStringField;
    JHojyoMA_PrintKanseiNm17: TStringField;
    JHojyoMA_PrintKanseiNm18: TStringField;
    JHojyoMA_PrintKanseiNm19: TStringField;
    JHojyoMA_PrintKanseiNm20: TStringField;
    JHojyoMA_PrintKanseiNm21: TStringField;
    JHojyoMA_PrintKanseiNm22: TStringField;
    JHojyoMA_PrintKanseiNm23: TStringField;
    JHojyoMA_PrintKanseiNm24: TStringField;
    JHojyoMA_PrintKanseiNm25: TStringField;
    JHojyoMA_PrintMasKbn1: TIntegerField;
    JHojyoMA_PrintMasKbn2: TIntegerField;
    JHojyoMA_PrintMasKbn3: TIntegerField;
    JHojyoMA_PrintMasKbn4: TIntegerField;
    JHojyoMA_PrintMasKbn5: TIntegerField;
    JHojyoMA_PrintMasKbn6: TIntegerField;
    JHojyoMA_PrintMasKbn7: TIntegerField;
    JHojyoMA_PrintMasKbn8: TIntegerField;
    JHojyoMA_PrintMasKbn9: TIntegerField;
    JHojyoMA_PrintMasKbn10: TIntegerField;
    JHojyoMA_PrintMasKbn11: TIntegerField;
    JHojyoMA_PrintMasKbn12: TIntegerField;
    JHojyoMA_PrintMasKbn13: TIntegerField;
    JHojyoMA_PrintMasKbn14: TIntegerField;
    JHojyoMA_PrintMasKbn15: TIntegerField;
    JHojyoMA_PrintMasKbn16: TIntegerField;
    JHojyoMA_PrintMasKbn17: TIntegerField;
    JHojyoMA_PrintMasKbn18: TIntegerField;
    JHojyoMA_PrintMasKbn19: TIntegerField;
    JHojyoMA_PrintMasKbn20: TIntegerField;
    JHojyoMA_PrintMasKbn21: TIntegerField;
    JHojyoMA_PrintMasKbn22: TIntegerField;
    JHojyoMA_PrintMasKbn23: TIntegerField;
    JHojyoMA_PrintMasKbn24: TIntegerField;
    JHojyoMA_PrintMasKbn25: TIntegerField;
    JHojyoMA_PrintMasNm1: TStringField;
    JHojyoMA_PrintMasNm2: TStringField;
    JHojyoMA_PrintMasNm3: TStringField;
    JHojyoMA_PrintMasNm4: TStringField;
    JHojyoMA_PrintMasNm5: TStringField;
    JHojyoMA_PrintMasNm6: TStringField;
    JHojyoMA_PrintMasNm7: TStringField;
    JHojyoMA_PrintMasNm8: TStringField;
    JHojyoMA_PrintMasNm9: TStringField;
    JHojyoMA_PrintMasNm10: TStringField;
    JHojyoMA_PrintMasNm11: TStringField;
    JHojyoMA_PrintMasNm12: TStringField;
    JHojyoMA_PrintMasNm13: TStringField;
    JHojyoMA_PrintMasNm14: TStringField;
    JHojyoMA_PrintMasNm15: TStringField;
    JHojyoMA_PrintMasNm16: TStringField;
    JHojyoMA_PrintMasNm17: TStringField;
    JHojyoMA_PrintMasNm18: TStringField;
    JHojyoMA_PrintMasNm19: TStringField;
    JHojyoMA_PrintMasNm20: TStringField;
    JHojyoMA_PrintMasNm21: TStringField;
    JHojyoMA_PrintMasNm22: TStringField;
    JHojyoMA_PrintMasNm23: TStringField;
    JHojyoMA_PrintMasNm24: TStringField;
    JHojyoMA_PrintMasNm25: TStringField;
    GHojyoMA_PrintScheduleDateS: TStringField;
    GHojyoMA_PrintEndDate: TStringField;
    GHojyoMA_PrintstrZipCode1: TStringField;
    GHojyoMA_PrintstrZipCode2: TStringField;
    SPMasHoj: TFDStoredProc;
    SPPayHoj: TFDStoredProc;
    SPSelHoj: TFDStoredProc;
    SPDepHoj: TFDStoredProc;
    Jituzai_ETEdit_CustomerName: TMTxtEdit;
    Goukei_ETEdit_CustomerName: TMTxtEdit;
    JHojyoMA_PrintBIKO: TStringField;
    GHojyoMA_PrintBIKO: TStringField;
    InpModeChange: TAction;
    B_ImportWF: TMSpeedButton;
    MemPtnSegBun: TdxMemData;
    CmnMemDataPrintSystemstrExCode: TStringField;
    CmnMemDataPrintSystemstrName: TStringField;
    CmnMemDataPrintSystemdtStart: TDateTimeField;
    CmnMemDataPrintSystemdtEnd: TDateTimeField;
    CmnMemDataPrintSystemstrSeg01Code: TStringField;
    CmnMemDataPrintSystemstrSeg02Code: TStringField;
    CmnMemDataPrintSystemstrSeg03Code: TStringField;
    CmnMemDataPrintSystemstrSeg04Code: TStringField;
    CmnMemDataPrintSystemstrSeg05Code: TStringField;
    CmnMemDataPrintSystemstrSeg01Name: TStringField;
    CmnMemDataPrintSystemstrSeg02Name: TStringField;
    CmnMemDataPrintSystemstrSeg03Name: TStringField;
    CmnMemDataPrintSystemstrSeg04Name: TStringField;
    CmnMemDataPrintSystemstrSeg05Name: TStringField;
    CmnMemDataPrintSystemstrBun01Code: TStringField;
    CmnMemDataPrintSystemstrBun02Code: TStringField;
    CmnMemDataPrintSystemstrBun03Code: TStringField;
    CmnMemDataPrintSystemstrBun04Code: TStringField;
    CmnMemDataPrintSystemstrBun05Code: TStringField;
    CmnMemDataPrintSystemstrBun01Name: TStringField;
    CmnMemDataPrintSystemstrBun02Name: TStringField;
    CmnMemDataPrintSystemstrBun03Name: TStringField;
    CmnMemDataPrintSystemstrBun04Name: TStringField;
    CmnMemDataPrintSystemstrBun05Name: TStringField;
    MemPtnSegBunstrSeg06Code: TStringField;
    MemPtnSegBunstrSeg07Code: TStringField;
    MemPtnSegBunstrSeg08Code: TStringField;
    MemPtnSegBunstrSeg09Code: TStringField;
    MemPtnSegBunstrSeg10Code: TStringField;
    MemPtnSegBunstrSeg06Name: TStringField;
    MemPtnSegBunstrSeg07Name: TStringField;
    MemPtnSegBunstrSeg08Name: TStringField;
    MemPtnSegBunstrSeg09Name: TStringField;
    MemPtnSegBunstrSeg10Name: TStringField;
    MemPtnSegBunstrBun06Code: TStringField;
    MemPtnSegBunstrBun07Code: TStringField;
    MemPtnSegBunstrBun08Code: TStringField;
    MemPtnSegBunstrBun09Code: TStringField;
    MemPtnSegBunstrBun10Code: TStringField;
    MemPtnSegBunstrBun06Name: TStringField;
    MemPtnSegBunstrBun07Name: TStringField;
    MemPtnSegBunstrBun08Name: TStringField;
    MemPtnSegBunstrBun09Name: TStringField;
    MemPtnSegBunstrBun10Name: TStringField;
    LSinsei: TMPanel;
    MemDIC_COTXRATERateCD: TSmallintField;
    JKeiyaku_DMemDataKojiInfo2NCode: TFloatField;
    JKeiyaku_DMemDataDspOrder: TIntegerField;
    GKeiyaku_DMemDataKojiInfo2NCode: TFloatField;
    GKeiyaku_DMemDataDspOrder: TIntegerField;
    JNyukin_DMemDataKojiInfo2NCode: TFloatField;
    JNyukin_DMemDataDspOrder: TIntegerField;
    GNyukin_DMemDataKojiInfo2NCode: TFloatField;
    GNyukin_DMemDataDspOrder: TIntegerField;
    ppLabel105: TppLabel;
    ppLabel106: TppLabel;
    SPMsHist: TFDStoredProc;
    SPMsHistParent: TFDStoredProc;
    Jituzai_LLabel_SeshuCode: TMLabel;
    Jituzai_ENEdit_SeshuCode: TMNumEdit;
    Jituzai_ETEdit_SeshuCode: TMTxtEdit;
    Jituzai_LLabel_SeshuName: TMLabel;
    Jituzai_PPanel_Bikou: TMPanel;
    MLabel54: TMLabel;
    MLabel38: TMLabel;
    Jituzai_ETEdit_BIKO: TMMemo;
    Jituzai_ETEdit_Gaiyou: TMMemo;
    MasterInfo_DMemDataKojKbn17: TIntegerField;
    MasterInfo_DMemDataKojKbn18: TIntegerField;
    MasterInfo_DMemDataCodeDigitSeshu: TIntegerField;
    MasterInfo_DMemDataCodeAttrSeshu: TIntegerField;
    MasterInfo_DMemDataSeshuName: TStringField;
    JHojyoMA_DMemDatagaiyou: TStringField;
    JHojyoMA_DMemDataUkeoiKbn: TIntegerField;
    JHojyoMA_DMemDataFAXNo: TStringField;
    MLabel40: TMLabel;
    Jituzai_LLabel_FaxNo: TMLabel;
    Jituzai_ETEdit_FaxNo: TMTxtEdit;
    JHojyoMA_DMemDataJHojyoMA_DMemDataSeiBmnNCode: TStringField;
    JHojyoMA_DMemDataSesNCode: TStringField;
    JHojyoMA_PrintGaiyou: TStringField;
    JHojyoMA_PrintFAXNo: TStringField;
    JHojyoMA_PrintUkeoiKbn: TIntegerField;
    JHojyoMA_PrintUkeoiKbnName: TStringField;
    JHojyoMA_PrintSeshuCode: TStringField;
    JHojyoMA_PrintSeshuCodeName: TStringField;
    MLabel19: TMLabel;
    Goukei_ETEdit_FAXNo: TMTxtEdit;
    Goukei_ENEdit_SeshuCode: TMNumEdit;
    Goukei_ETEdit_SeshuCode: TMTxtEdit;
    Goukei_LLabel_SeshuName: TMLabel;
    Goukei_LLabel_SeshuCode: TMLabel;
    MLabel44: TMLabel;
    GHojyoMA_DMemDataFAXNo: TStringField;
    GHojyoMA_DMemDataUkeoiKbn: TIntegerField;
    GHojyoMA_DMemDataSesNCode: TStringField;
    GHojyoMA_PrintFAXNo: TStringField;
    GHojyoMA_PrintUkeoiKbn: TIntegerField;
    GHojyoMA_PrintUkeoiKbnName: TStringField;
    GHojyoMA_PrintSeshuCode: TStringField;
    GHojyoMA_PrintSeshuCodeName: TStringField;
    GHojyoMA_DMemDatagaiyou: TStringField;
    GHojyoMA_DMemDataBIKO: TStringField;
    Goukei_PPanel_Bikou: TMPanel;
    MLabel41: TMLabel;
    MLabel43: TMLabel;
    Goukei_ETEdit_BIKO: TMMemo;
    Goukei_ETEdit_Gaiyou: TMMemo;
    GHojyoMA_PrintGaiyou: TStringField;
    JHojyoMA_DMemDataSekouPersonCode: TStringField;
    GHojyoMA_DMemDataSekouPersonCode: TStringField;
    JHojyoMA_PrintSekouPersonCode: TStringField;
    JHojyoMA_PrintSekouPersonCodeName: TStringField;
    GHojyoMA_PrintSekouPersonCode: TStringField;
    GHojyoMA_PrintSekouPersonCodeName: TStringField;
    JHojyoMA_DMemDataSekouBmnCode: TStringField;
    GHojyoMA_DMemDataSekouBmnCode: TStringField;
    JHojyoMA_PrintSekouBmnCodeName: TStringField;
    JHojyoMA_PrintSekouBmnCode: TStringField;
    GHojyoMA_PrintSekouBmnCode: TStringField;
    GHojyoMA_PrintSekouBmnCodeName: TStringField;
    JKeiyaku_DMemDataOrgNo: TFloatField;
    JKeiyaku_DMemDataInpType: TIntegerField;
    GKeiyaku_DMemDataOrgNo: TFloatField;
    GKeiyaku_DMemDataInpType: TIntegerField;
    MLabel25: TMLabel;
    Jituzai_ENEdit_KojKbn2: TMNumEdit;
    Jituzai_LLabel_KojKbn2Dsp: TMLabel;
    Jituzai_PPanel_Keiyaku: TMPanel;
    Jituzai_DdxDBGrid_Kei: TdxDBGrid;
    Jituzai_DdxDBGrid_KeiRecId: TdxDBGridColumn;
    Jituzai_DdxDBGrid_KeiContDate: TdxDBGridDateColumn;
    Jituzai_DdxDBGrid_KeiContNo: TdxDBGridMaskColumn;
    Jituzai_DdxDBGrid_KeiContMoney: TdxDBGridCurrencyColumn;
    Jituzai_DdxDBGrid_KeiDummyTax_Rate: TdxDBGridMaskColumn;
    Jituzai_DdxDBGrid_KeiTax_Rate: TdxDBGridLookupColumn;
    Jituzai_DdxDBGrid_KeiTax_RateName: TdxDBGridLookupColumn;
    Jituzai_DdxDBGrid_KeiSales_Tax: TdxDBGridCurrencyColumn;
    Jituzai_DdxDBGrid_Nyu: TdxDBGrid;
    Jituzai_DdxDBGrid_NyuRecId: TdxDBGridColumn;
    Jituzai_DdxDBGrid_NyuContDate: TdxDBGridDateColumn;
    Jituzai_DdxDBGrid_NyuContMoney: TdxDBGridCurrencyColumn;
    Goukei_PPanel_Keiyaku: TMPanel;
    Goukei_DdxDBGrid_Kei: TdxDBGrid;
    Goukei_DdxDBGrid_KeiRecId: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiContDate: TdxDBGridDateColumn;
    Goukei_DdxDBGrid_KeiContNo: TdxDBGridMaskColumn;
    Goukei_DdxDBGrid_KeiContMoney: TdxDBGridCurrencyColumn;
    Goukei_DdxDBGrid_KeiDummyTax_Rate: TdxDBGridMaskColumn;
    Goukei_DdxDBGrid_KeiTax_Rate: TdxDBGridLookupColumn;
    Goukei_DdxDBGrid_KeiTax_RateName: TdxDBGridLookupColumn;
    Goukei_DdxDBGrid_KeiSales_Tax: TdxDBGridCurrencyColumn;
    dMemData_KeiyakuPrint: TdxMemData;
    dMemData_KeiyakuPrintGCode: TStringField;
    dMemData_KeiyakuPrintLongName: TStringField;
    dMemData_KeiyakuPrintSimpleName: TStringField;
    dMemData_KeiyakuPrintCostomerCode: TStringField;
    dMemData_KeiyakuPrintCostomerName: TStringField;
    dMemData_KeiyakuPrintContDate: TStringField;
    dMemData_KeiyakuPrintContNo: TStringField;
    dMemData_KeiyakuPrintContMoney: TCurrencyField;
    dMemData_KeiyakuPrintTaxRate: TIntegerField;
    dMemData_KeiyakuPrintTax_RateName: TStringField;
    dMemData_KeiyakuPrintSales_Tax: TCurrencyField;
    dMemData_KeiyakuPrintNCode: TFloatField;
    dMemData_KeiyakuPrintNo: TIntegerField;
    dMemData_KeiyakuPrintKeiyakuG: TCurrencyField;
    dMemData_KeiyakuPrintShohiG: TCurrencyField;
    Jituzai_DdxDBGrid_KeiCostomerCode: TdxDBGridButtonColumn;
    Jituzai_DdxDBGrid_KeiCostomerName: TdxDBGridMaskColumn;
    JKeiyaku_DMemDataCostomerGCode: TStringField;
    JKeiyaku_DMemDataCostomerName: TStringField;
    JKeiyaku_DMemDataCostomerNCode: TFloatField;
    GKeiyaku_DMemDataCostomerGCode: TStringField;
    GKeiyaku_DMemDataCostomerName: TStringField;
    GKeiyaku_DMemDataCostomerNCode: TFloatField;
    Goukei_DdxDBGrid_KeiCostomerCode: TdxDBGridButtonColumn;
    Goukei_DdxDBGrid_KeiCostomerName: TdxDBGridMaskColumn;
    JHojyoMA_PrintKojKbn2: TIntegerField;
    JHojyoMA_PrintKojKbn2Name: TStringField;
    JHojyoMA_PrintCostomerCode1: TStringField;
    JHojyoMA_PrintCostomerCode2: TStringField;
    JHojyoMA_PrintCostomerCode3: TStringField;
    JHojyoMA_PrintCostomerCode4: TStringField;
    JHojyoMA_PrintCostomerCode5: TStringField;
    JHojyoMA_PrintCostomerCode6: TStringField;
    JHojyoMA_PrintCostomerCode7: TStringField;
    JHojyoMA_PrintCostomerCode8: TStringField;
    JHojyoMA_PrintCostomerCode9: TStringField;
    JHojyoMA_PrintCostomerCode10: TStringField;
    JHojyoMA_PrintCostomerName1: TStringField;
    JHojyoMA_PrintCostomerName2: TStringField;
    JHojyoMA_PrintCostomerName3: TStringField;
    JHojyoMA_PrintCostomerName4: TStringField;
    JHojyoMA_PrintCostomerName5: TStringField;
    JHojyoMA_PrintCostomerName6: TStringField;
    JHojyoMA_PrintCostomerName7: TStringField;
    JHojyoMA_PrintCostomerName8: TStringField;
    JHojyoMA_PrintCostomerName9: TStringField;
    JHojyoMA_PrintCostomerName10: TStringField;
    GHojyoMA_PrintCostomerName1: TStringField;
    GHojyoMA_PrintCostomerName2: TStringField;
    GHojyoMA_PrintCostomerName3: TStringField;
    GHojyoMA_PrintCostomerName4: TStringField;
    GHojyoMA_PrintCostomerName5: TStringField;
    GHojyoMA_PrintCostomerName6: TStringField;
    GHojyoMA_PrintCostomerName7: TStringField;
    GHojyoMA_PrintCostomerName8: TStringField;
    GHojyoMA_PrintCostomerName9: TStringField;
    GHojyoMA_PrintCostomerName10: TStringField;
    GHojyoMA_PrintCostomerCode1: TStringField;
    GHojyoMA_PrintCostomerCode2: TStringField;
    GHojyoMA_PrintCostomerCode3: TStringField;
    GHojyoMA_PrintCostomerCode4: TStringField;
    GHojyoMA_PrintCostomerCode5: TStringField;
    GHojyoMA_PrintCostomerCode6: TStringField;
    GHojyoMA_PrintCostomerCode7: TStringField;
    GHojyoMA_PrintCostomerCode8: TStringField;
    GHojyoMA_PrintCostomerCode9: TStringField;
    GHojyoMA_PrintCostomerCode10: TStringField;
    Jituzai_DdxDBGrid_NyuCostomerCode: TdxDBGridButtonColumn;
    Jituzai_DdxDBGrid_NyuCostomerName: TdxDBGridMaskColumn;
    JNyukin_DMemDataCostomerGCode: TStringField;
    JNyukin_DMemDataCostomerName: TStringField;
    JNyukin_DMemDataCostomerNCode: TFloatField;
    GNyukin_DMemDataCostomerGCode: TStringField;
    GNyukin_DMemDataCostomerName: TStringField;
    GNyukin_DMemDataCostomerNCode: TFloatField;
    Goukei_DdxDBGrid_NyuCostomerGCode: TdxDBGridButtonColumn;
    Goukei_DdxDBGrid_NyuCostomerName: TdxDBGridMaskColumn;
    JNyukin_DMemDataOrgNo: TFloatField;
    JNyukin_DMemDataInpType: TIntegerField;
    GNyukin_DMemDataOrgNo: TFloatField;
    GNyukin_DMemDataInpType: TIntegerField;
    B_GrpSec: TMSpeedButton;
    SPMP_KJURDATA: TFDStoredProc;
    JNyukin_DMemDataFontColorDate: TIntegerField;
    Jituzai_DdxDBGrid_NyuFontColorDate: TdxDBGridColumn;
    JNyukin_DMemDataFontColorMony: TIntegerField;
    Jituzai_DdxDBGrid_NyuFontColorMony: TdxDBGridColumn;
    JKeiyaku_DMemDataFontColorDate: TIntegerField;
    JKeiyaku_DMemDataFontColorNo: TIntegerField;
    JKeiyaku_DMemDataFontColorMoney: TIntegerField;
    JKeiyaku_DMemDataFontColorTax: TIntegerField;
    JKeiyaku_DMemDataFontColorTaxRete: TIntegerField;
    Jituzai_DdxDBGrid_KeiFontColorDate: TdxDBGridColumn;
    Jituzai_DdxDBGrid_KeiFontColorNo: TdxDBGridColumn;
    Jituzai_DdxDBGrid_KeiFontColorMoney: TdxDBGridColumn;
    Jituzai_DdxDBGrid_KeiFontColorTax: TdxDBGridColumn;
    Jituzai_DdxDBGrid_KeiFontColorTaxRete: TdxDBGridColumn;
    JKeiyaku_DMemDataFontColorTaxReteName: TIntegerField;
    Jituzai_DdxDBGrid_KeiFontColorTaxReteName: TdxDBGridColumn;
    dMemData_KasanPrint: TdxMemData;
    dMemData_KasanPrintGCodeDst: TStringField;
    dMemData_KasanPrintGCodeSrc: TStringField;
    dMemData_KasanPrintSimpleNameDst: TStringField;
    dMemData_KasanPrintSimpleNameSrc: TStringField;
    PPanelKasan: TMPanel;
    ScrollBox1: TScrollBox;
    Kasan_Parent_Panel: TMPanel;
    Lbl_KasanParent: TMLabel;
    Kasan_Parent_DBGrid: TdxDBGrid;
    Kasan_Parent_DBGridRecId: TdxDBGridColumn;
    Kasan_Parent_DBGridFusen: TdxDBGridGraphicColumn;
    Kasan_Parent_DBGridGCode: TdxDBGridMaskColumn;
    Kasan_Parent_DBGridLongName: TdxDBGridMaskColumn;
    Kasan_Parent_DBGridSimpleName: TdxDBGridMaskColumn;
    Kasan_Child_Panel: TMPanel;
    Lbl_KasanChild: TMLabel;
    Kasan_Child_DBGrid: TdxDBGrid;
    Kasan_Child_DBGridRecId: TdxDBGridColumn;
    Kasan_Child_DBGridDspNO: TdxDBGridMaskColumn;
    Kasan_Child_DBGridFusen: TdxDBGridGraphicColumn;
    Kasan_Child_DBGridGCode: TdxDBGridButtonColumn;
    Kasan_Child_DBGridLongName: TdxDBGridMaskColumn;
    Kasan_Child_DBGridSimpleName: TdxDBGridMaskColumn;
    PPanelTree_Kasan: TMPanel;
    Lbl_KasanTaikei: TMLabel;
    VTreeView_Kasan: TMTreeView;
    B_SetUp: TMSpeedButton;
    dsKasanParent: TDataSource;
    MemKasanParent: TdxMemData;
    MemKasanParentFusen: TGraphicField;
    MemKasanParentFusenIndex: TIntegerField;
    MemKasanParentSumKbn: TIntegerField;
    MemKasanParentGCode: TStringField;
    MemKasanParentLongName: TStringField;
    MemKasanSimpleName: TStringField;
    MemKasanNCode: TFloatField;
    dsKasanChild: TDataSource;
    MemKasanChild: TdxMemData;
    MemKasanChildEntNoSumKbn: TIntegerField;
    MemKasanChildFusen: TGraphicField;
    MemKasanChildGCode: TStringField;
    MemKasanChildEntNoLongName: TStringField;
    MemKasanChildSimpleName: TStringField;
    MemKasanChildNewData: TBooleanField;
    MemKasanChildPatternNo: TIntegerField;
    MemKasanChildSumNCode: TFloatField;
    MemKasanChildEntNo: TIntegerField;
    MemKasanChildBasedNCode: TFloatField;
    MemKasanChildAddKbn: TIntegerField;
    MemKasanChildSaveGCode: TStringField;
    MemKasanChildUpdDateTM: TDateTimeField;
    MemKasanChildInsDateTM: TDateTimeField;
    MemKasanChildDspNo: TIntegerField;
    PMChild: TPopupMenu;
    TPInsert: TMenuItem;
    TPDelChild: TMenuItem;
    Image_Jitsuzai: TImage;
    Image_Goukei: TImage;
    Jituzai_PPanel_Move: TMPanel;
    Jituzai_LLabel_UkeoiCode: TMLabel;
    Jituzai_ENEdit_UkeoiKbn: TMNumEdit;
    Jituzai_LLabel_UkeoiKbnDsp: TMLabel;
    Jituzai_LLabel_SekouBmnCode: TMLabel;
    Jituzai_ETEdit_SekouBmnCode: TMTxtEdit;
    Jituzai_LLabel_SekouBmnName: TMLabel;
    Jituzai_LLabel_SekouPersonCode: TMLabel;
    Jituzai_ETEdit_SekouPersonCode: TMTxtEdit;
    Jituzai_LLabel_SekouPersonName: TMLabel;
    Jituzai_ENEdit_SekouBmnCode: TMNumEdit;
    Jituzai_ENEdit_SekouPersonCode: TMNumEdit;
    Goukei_PPanel_Move: TMPanel;
    Goukei_LLabel_UkeoiKbn: TMLabel;
    Goukei_ENEdit_UkeoiKbn: TMNumEdit;
    Goukei_LLabel_UkeoiKbnDsp: TMLabel;
    Goukei_LLabel_SekouBmnCode: TMLabel;
    Goukei_ETEdit_SekouBmnCode: TMTxtEdit;
    Goukei_ENEdit_SekouBmnCode: TMNumEdit;
    Goukei_LLabel_SekouBmnName: TMLabel;
    Goukei_LLabel_SekouPersonCode: TMLabel;
    Goukei_ENEdit_SekouPersonCode: TMNumEdit;
    Goukei_ETEdit_SekouPersonCode: TMTxtEdit;
    Goukei_LLabel_SekouPersonName: TMLabel;
    MasterInfo_DMemDataKojKbn1: TIntegerField;
    MasterInfo_DMemDataMstrKbn4: TIntegerField;
    Goukei_PPanel_Seikyu: TMPanel;
    Goukei_LLabel_SeikyusakiCd: TMLabel;
    Goukei_LLabel_SeikyuKoujiCd: TMLabel;
    Goukei_LLabel_SeikyusakiNm: TMLabel;
    Goukei_LLabel_SeikyuKoujiNm: TMLabel;
    Goukei_DdxDBGrid_Seikyu: TdxDBGrid;
    Goukei_DdxDBGrid_SeikyuRecId: TdxDBGridColumn;
    Goukei_DdxDBGrid_SeikyuNo: TdxDBGridMaskColumn;
    Goukei_DdxDBGrid_SeikyuContMoney: TdxDBGridCurrencyColumn;
    Goukei_DdxDBGrid_SeikyuDummyTax_Rate: TdxDBGridMaskColumn;
    Goukei_DdxDBGrid_SeikyuTax_Rate: TdxDBGridLookupColumn;
    Goukei_DdxDBGrid_SeikyuTax_RateName: TdxDBGridLookupColumn;
    Goukei_DdxDBGrid_SeikyuSales_Tax: TdxDBGridCurrencyColumn;
    Goukei_DdxDBGrid_SeikyuCostomerGCode: TdxDBGridButtonColumn;
    Goukei_DdxDBGrid_SeikyuCostomerName: TdxDBGridMaskColumn;
    Goukei_DdxDBGrid_SeikyuContDate: TdxDBGridDateColumn;
    Goukei_DdxDBGrid_SeikyuSeikyuYoteiDate: TdxDBGridDateColumn;
    Goukei_DdxDBGrid_SeikyuSeikyuOutputDate: TdxDBGridDateColumn;
    Goukei_DdxDBGrid_SeikyuSeikyuDate: TdxDBGridDateColumn;
    Goukei_DdxDBGrid_SeikyuSeikyuMeimoku: TdxDBGridMaskColumn;
    Goukei_ENEdit_SeikyuKoujiCd: TMNumEdit;
    Goukei_ETEdit_SeikyuKoujiCd: TMTxtEdit;
    Goukei_ENEdit_SeikyusakiCd: TMNumEdit;
    Goukei_ETEdit_SeikyusakiCd: TMTxtEdit;
    Jituzai_PPanel_Seikyu: TMPanel;
    Jituzai_LLabel_SeikyusakiCd: TMLabel;
    Jituzai_LLabel_SeikyuKoujiCd: TMLabel;
    Jituzai_LLabel_SeikyusakiNm: TMLabel;
    Jituzai_LLabel_SeikyuKoujiNm: TMLabel;
    Jituzai_DdxDBGrid_Seikyu: TdxDBGrid;
    Jituzai_DdxDBGrid_SeikyuRecId: TdxDBGridColumn;
    Jituzai_DdxDBGrid_SeikyuNO: TdxDBGridMaskColumn;
    Jituzai_DdxDBGrid_SeikyuContMoney: TdxDBGridCurrencyColumn;
    Jituzai_DdxDBGrid_SeikyuDummyTax_Rate: TdxDBGridMaskColumn;
    Jituzai_DdxDBGrid_SeikyuTax_Rate: TdxDBGridLookupColumn;
    Jituzai_DdxDBGrid_SeikyuTax_RateName: TdxDBGridLookupColumn;
    Jituzai_DdxDBGrid_SeikyuSales_Tax: TdxDBGridCurrencyColumn;
    Jituzai_DdxDBGrid_SeikyuCostomerGCode: TdxDBGridButtonColumn;
    Jituzai_DdxDBGrid_SeikyuCostomerName: TdxDBGridMaskColumn;
    Jituzai_DdxDBGrid_SeikyuContDate: TdxDBGridDateColumn;
    Jituzai_DdxDBGrid_SeikyuSeikyuYoteiDate: TdxDBGridDateColumn;
    Jituzai_DdxDBGrid_SeikyuSeikyuOutputDate: TdxDBGridDateColumn;
    Jituzai_DdxDBGrid_SeikyuSeikyuDate: TdxDBGridDateColumn;
    Jituzai_DdxDBGrid_SeikyuSeikyuMeimoku: TdxDBGridMaskColumn;
    Jituzai_ENEdit_SeikyuKoujiCd: TMNumEdit;
    Jituzai_ETEdit_SeikyuKoujiCd: TMTxtEdit;
    Jituzai_ENEdit_SeikyusakiCd: TMNumEdit;
    Jituzai_ETEdit_SeikyusakiCd: TMTxtEdit;
    JSeikyu_DMemData: TdxMemData;
    JSeikyu_DMemDataInfoKbn: TIntegerField;
    JSeikyu_DMemDataNCode: TFloatField;
    JSeikyu_DMemDataUpdateTime: TDateField;
    JSeikyu_DMemDataContDate: TDateTimeField;
    JSeikyu_DMemDataContMoney: TCurrencyField;
    JSeikyu_DMemDataDummyTax_Rate: TIntegerField;
    JSeikyu_DMemDataTax_Rate: TIntegerField;
    JSeikyu_DMemDataTax_RateName: TStringField;
    JSeikyu_DMemDataSales_Tax: TCurrencyField;
    JSeikyu_DMemDataKojiInfo2NCode: TFloatField;
    JSeikyu_DMemDataDspOrder: TIntegerField;
    JSeikyu_DMemDataCheck: TIntegerField;
    JSeikyu_DMemDataPrevContDate: TDateTimeField;
    JSeikyu_DMemDataOrgNo: TFloatField;
    JSeikyu_DMemDataInpType: TIntegerField;
    JSeikyu_DMemDataCostomerGCode: TStringField;
    JSeikyu_DMemDataCostomerName: TStringField;
    JSeikyu_DMemDataCostomerNCode: TFloatField;
    JSeikyu_DMemDataNO: TIntegerField;
    JSeikyu_DMemDataSeikyuYoteiDate: TDateField;
    JSeikyu_DMemDataSeikyuOutputDate: TDateField;
    JSeikyu_DMemDataSeikyuDate: TDateField;
    JSeikyu_DMemDataSeikyuMeimoku: TStringField;
    GSeikyu_DMemData: TdxMemData;
    GSeikyu_DMemDataInfoKbn: TIntegerField;
    GSeikyu_DMemDataNCode: TFloatField;
    GSeikyu_DMemDataUpdateTime: TDateField;
    GSeikyu_DMemDataContDate: TDateTimeField;
    GSeikyu_DMemDataContMoney: TCurrencyField;
    GSeikyu_DMemDataDummyTax_Rate: TIntegerField;
    GSeikyu_DMemDataTax_Rate: TIntegerField;
    GSeikyu_DMemDataTax_RateName: TStringField;
    GSeikyu_DMemDataSales_Tax: TCurrencyField;
    GSeikyu_DMemDataKojiInfo2NCode: TFloatField;
    GSeikyu_DMemDataDspOrder: TIntegerField;
    GSeikyu_DMemDataCheck: TIntegerField;
    GSeikyu_DMemDataPrevContDate: TDateTimeField;
    GSeikyu_DMemDataOrgNo: TFloatField;
    GSeikyu_DMemDataInpType: TIntegerField;
    GSeikyu_DMemDataCostomerGCode: TStringField;
    GSeikyu_DMemDataCostomerName: TStringField;
    GSeikyu_DMemDataCostomerNCode: TFloatField;
    GSeikyu_DMemDataNO: TIntegerField;
    GSeikyu_DMemDataSeikyuYoteiDate: TDateField;
    GSeikyu_DMemDataSeikyuOutputDate: TDateField;
    GSeikyu_DMemDataSeikyuDate: TDateField;
    GSeikyu_DMemDataSeikyuMeimoku: TStringField;
    JSeikyu_DDataSource: TDataSource;
    GSeikyu_DDataSource: TDataSource;
    JHojyoMA_DMemDataSeikyuKoujiGCode: TStringField;
    JHojyoMA_DMemDataSeikyusakiGCode: TStringField;
    GHojyoMA_DMemDataSeikyusakiGCode: TStringField;
    GHojyoMA_DMemDataSeikyuKoujiGCode: TStringField;
    FindHojyoMA: TAction;
    DeleteSeikyuOutputDate: TAction;
    DeleteSeikyuInfo: TAction;
    pnlJTax: TMPanel;
    lblJTax: TMLabel;
    rdJTaxIn: TMRadioButton;
    rdJTaxOut: TMRadioButton;
    JHojyoMA_DMemDataTaxType: TIntegerField;
    JKeiyaku_DMemDataTax_RateName2: TStringField;
    Jituzai_DdxDBGrid_KeiTax_RateName2: TdxDBGridColumn;
    GKeiyaku_DMemDataTax_RateName2: TStringField;
    Goukei_DdxDBGrid_KeiTax_RateName2: TdxDBGridColumn;
    GKeiyaku_DMemDataFontColorDate: TIntegerField;
    GKeiyaku_DMemDataFontColorNo: TIntegerField;
    GKeiyaku_DMemDataFontColorMoney: TIntegerField;
    GKeiyaku_DMemDataFontColorTax: TIntegerField;
    GKeiyaku_DMemDataFontColorTaxRete: TIntegerField;
    GKeiyaku_DMemDataFontColorTaxReteName: TIntegerField;
    Goukei_DdxDBGrid_KeiFontColorDate: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiFontColorNo: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiFontColorMoney: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiFontColorTax: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiFontColorTaxRete: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiFontColorTaxReteName: TdxDBGridColumn;
    UpperCopy: TAction;
    JHojyoMA_PrintPartPattern: TIntegerField;
    JHojyoMA_PrintPartPatternName: TStringField;
    dMemData_KeiyakuPrintPartPattern: TIntegerField;
    dMemData_KeiyakuPrintPartPatternName: TStringField;
    JKeiyaku_DMemDataFontColorTaxRateName2: TIntegerField;
    GKeiyaku_DMemDataFontColorTaxRateName2: TIntegerField;
    Jituzai_DdxDBGrid_KeiFontColorTaxRateName2: TdxDBGridColumn;
    Goukei_DdxDBGrid_KeiFontColorTaxRateName2: TdxDBGridColumn;
    ActionTaxCalc: TAction;
    ExpChange: TAction;
    chb_KasanUpdate: TMCheckBox;
    MasterInfo_DMemDataMstrKbn20: TIntegerField;

	procedure   FormCreate                          (Sender: TObject);
	procedure   FormActivate                        (Sender: TObject);
    procedure   FormShow                            (Sender: TObject);
    procedure   FormHide                            (Sender: TObject);
    procedure   FormCloseQuery                      (Sender: TObject; var CanClose: Boolean);
	procedure   FormClose                           (Sender: TObject; var Action: TCloseAction);
    procedure   FormDestroy                         (Sender: TObject);
    procedure   FormPaint                           (Sender: TObject);      // <178>
	procedure   BSpeedButtonEndClick                (Sender: TObject);
    procedure   BSpeedButtonPrnClick                (Sender: TObject);
    procedure   BSpeedButtonChgClick                (Sender: TObject);
    procedure   BSpeedButtonISClick                 (Sender: TObject);
    procedure   BSpeedButtonDelClick                (Sender: TObject);
    procedure   BSpeedButtonSortClick               (Sender: TObject);
	procedure   BSpeedButtonFindClick               (Sender: TObject);
    procedure   B_ImportWFClick                     (Sender: TObject);
    procedure   EnterEvent                          (Sender: TObject);
	procedure   VTreeViewClick                      (Sender: TObject);
    procedure   VTreeViewChange                     (Sender: TObject; Node: TTreeNode);
	procedure   VTreeViewEnter                      (Sender: TObject);
    procedure   VTreeViewExit                       (Sender: TObject);
	procedure   VTreeViewDragDrop                   (Sender, Source: TObject; X, Y: Integer);
	procedure   VTreeViewDragOver                   (Sender, Source: TObject; X, Y: Integer;
	                                                 State: TDragState; var Accept: Boolean);
    procedure   Root_PMTabChange                    (Sender: TObject);
	procedure   JHojyoMA_DMemDataAfterPost          (DataSet: TDataSet);
    procedure   JHojyoMA_DDataSourceStateChange     (Sender: TObject);
    procedure   JHojyoMA_DMemDataBeforePost         (DataSet: TDataSet);
    procedure   Jituzai_PMTabChange                 (Sender: TObject);
	procedure   Jituzai_DdxDBGridExit               (Sender: TObject);
    procedure   Jituzai_DdxDBGridKeyDown            (Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure   Jituzai_DdxDBGridKeyUp              (Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure   Jituzai_DdxDBGridMouseDown          (Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure   Jituzai_DdxDBGridBeforeChangeColumn (Sender: TObject; Node: TdxTreeListNode; Column: Integer;
                                                     NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
    procedure   Jituzai_BBitBtn_OkClick             (Sender: TObject);
	procedure   Jituzai_BBitBtn_CancelClick         (Sender: TObject);

	procedure   GHojyoMA_DMemDataAfterPost          (DataSet: TDataSet);
    procedure   GHojyoMA_DDataSourceStateChange     (Sender: TObject);
    procedure   GHojyoMA_DMemDataBeforePost         (DataSet: TDataSet);
    procedure   Goukei_PMTabChange                  (Sender: TObject);
    procedure   Goukei_DdxDBGridExit                (Sender: TObject);
    procedure   Goukei_DdxDBGridKeyDown             (Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure   Goukei_DdxDBGridKeyUp               (Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure   Goukei_DdxDBGridMouseDown           (Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure   Goukei_DdxDBGridBeforeChangeColumn  (Sender: TObject; Node: TdxTreeListNode; Column: Integer;
                                                     NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
	procedure   Goukei_BBitBtn_OkClick              (Sender: TObject);
	procedure   Goukei_BBitBtn_CancelClick          (Sender: TObject);

    procedure   fnInitialize                        ();
    procedure   fnMasterInfoRead                    ();
//	function    MakeSQL                             (TAN_CD: Integer; TAN_NAME: String; FLAG: Boolean; Proc : Integer ):String;
// <172>	function  MakeSQL                       (TAN_CD: Extended; FLAG: Boolean; Proc : Integer ):String;    // <131>
//    function	fnMakeSQL						    (nType: Integer): String;   // <172>
    procedure   fnCreateAll                         ();
	procedure   fnCreateTreeViewItems               (cSrcNode: TTreeNode);
	procedure   fnCreateTreeViewItem                (dqMasterTree: TMQuery; cSrcNode: TTreeNode);
	procedure   fnRebuildTreeViewItems              ();
    function    fnDropCheck                         (nDragNode: TTreeNode; nDropNode: TTreeNode) : Integer;
    procedure   fnCreateGrid                        (WkTreeNode: TTreeNode; iSumKbn: Integer);
    procedure   fnClearCard                         (iSumKbn: Integer);
	procedure   fnCreateCard                        (iSumKbn: Integer);
    function    fnDataRead                          (strGCode: String; iSumKbn: Integer; iChk: Integer): Integer;
	function    fnDataWrite                         (strGCode: String; iSumKbn: Integer; bSw: Boolean): Boolean;
	function    fnDataDelete                        (strGCode: String; iSumKbn: Integer): Boolean;
	procedure   fnMemSet                            (iSumKbn: Integer; bSw: Boolean);
	procedure   fnJEntrySet                         ();
	procedure   fnGEntrySet                         ();
	procedure   fnKeiyakuRead                       (strNCode: Extended; iSumKbn: Integer);
    function    fnKeiyakuCheck                      (strNCode: Extended; iSumKbn: Integer): Boolean;
	function    fnKeiyakuWrite                      (strNCode: Extended; iSumKbn: Integer): Boolean;
// <172>	function  fnKeiyakuDelete               (strNCode: Extended): Boolean;
	procedure   fnNyukinRead                        (strNCode: Extended; iSumKbn: Integer);
    function    fnNyukinCheck                       (strNCode: Extended; iSumKbn: Integer): Boolean;
	function    fnNyukinWrite                       (strNCode: Extended; iSumKbn: Integer): Boolean;
// <172>	function  fnNyukinDelete                (strNCode: Extended): Boolean;
    function    fnHojyoTreeWrite                    (strGCode: String): Boolean;
    procedure   fnTreeUpdate                        (strGCode: String; iSumKbn: Integer);
    procedure   fnHojyoTreeRestore                  ();
    procedure   CmnPostShow                         (Sender: TObject);

	procedure JituzaiEditExit(Sender: TObject);
	procedure GoukeiEditExit(Sender: TObject);
	procedure JituzaiEditCheck(Sender: TObject);
	procedure GoukeiEditCheck(Sender: TObject);
	procedure PMKasantaikeiPopup(Sender: TObject);
	procedure CutClick(Sender: TObject);
	procedure CopyClick(Sender: TObject);
	procedure PasteClick(Sender: TObject);
	procedure DeleteClick(Sender: TObject);
	procedure AllDelClick(Sender: TObject);
	procedure DelKoujiClick(Sender: TObject);

	procedure FusenDsp(iPage : Integer; stCode : String; iFlg : Integer);
	function  FusenInfoWrite(iColor : Integer; stCode : String; stCmt : String; bSw: Boolean): Boolean;
	function  FusenInfaDelete(stCode : String): Boolean;

	procedure GFBlueOffClick(Sender: TObject);
	procedure GFGreenOffClick(Sender: TObject);
	procedure GFOrangeOffClick(Sender: TObject);
	procedure GFRedOffClick(Sender: TObject);

	procedure GFBlueOnClick(Sender: TObject);
	procedure GFGreenOnClick(Sender: TObject);
	procedure GFOrangeOnClick(Sender: TObject);
	procedure GFRedOnClick(Sender: TObject);

	procedure TFBlueOffClick(Sender: TObject);
	procedure TFGreenOffClick(Sender: TObject);
	procedure TFOrangeOffClick(Sender: TObject);
	procedure TFRedOffClick(Sender: TObject);

	procedure TFBlueOnClick(Sender: TObject);
	procedure TFGreenOnClick(Sender: TObject);
	procedure TFOrangeOnClick(Sender: TObject);
	procedure TFRedOnClick(Sender: TObject);

	procedure PMKoujiPopup(Sender: TObject);
	function  WriteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode; NodeTarget : TTreeNode): Boolean;
	function  DeleteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode): Boolean;
	function  NodeSearch(stWorkRecSearch : TreeViewRec; stWorkRecOya : TreeViewRec): Integer;
	procedure TaikeiDelete(NodeOya : TTreeNode; NodeKo : TTreeNode);

	function  fnDeleteCheck(strGCode: String): Boolean;

	procedure FusenInitialize();
	procedure FusenImageRedClick(Sender: TObject);
	procedure FusenImageGreenClick(Sender: TObject);
	procedure FusenImageBlueClick(Sender: TObject);
	procedure FusenImageOrangeClick(Sender: TObject);
	procedure SelectFusenColor(SelectFusen: Integer);

	procedure ArrowClick(Sender: TObject);
	procedure ppReportKaniJBeforePrint(Sender: TObject);
	procedure ppReportKaniGBeforePrint(Sender: TObject);
	procedure ppReportShosaiJBeforePrint(Sender: TObject);
	procedure ppReportShosaiGBeforePrint(Sender: TObject);
//<TAX> DEL	procedure PrnSet(iSelect : Integer; iOrder : Integer; stStart : String; stEnd : String);
	procedure PrnSet(iSelect : Integer; iOrder : Integer; param: TJNTHani);  //<TAX> ADD
	function  AgainEntNoSet(ParentCode: Extended): Boolean;
	procedure Jituzai_DdxDBGrid_KeiBeforeChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
	  NewColumn: Integer; var CanChange: Boolean);
	procedure Jituzai_DdxDBGrid_NyuBeforeChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
	  NewColumn: Integer; var CanChange: Boolean);
	procedure Goukei_DdxDBGrid_KeiBeforeChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
	  NewColumn: Integer; var CanChange: Boolean);
	procedure Goukei_DdxDBGrid_NyuBeforeChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
	  NewColumn: Integer; var CanChange: Boolean);
	procedure JKeiyaku_DMemDataBeforePost(DataSet: TDataSet);
	procedure JNyukin_DMemDataBeforePost(DataSet: TDataSet);
	procedure GKeiyaku_DMemDataBeforePost(DataSet: TDataSet);
	procedure GNyukin_DMemDataBeforePost(DataSet: TDataSet);
	procedure Goukei_DdxDBGrid_KeiExit(Sender: TObject);
	procedure Goukei_DdxDBGrid_NyuExit(Sender: TObject);
	procedure Jituzai_DdxDBGrid_KeiExit(Sender: TObject);
	procedure Jituzai_DdxDBGrid_NyuExit(Sender: TObject);
	procedure FusenClick(Sender: TObject);

	function  fnCreateTreeViewItemsHagure(cSrcNode: TTreeNode; iFlg : Integer): Boolean;
	function  fnCreateTreeViewItemHagure(dqMasterTree: TMQuery; cSrcNode: TTreeNode; iFlg : Integer): Boolean;
	function  fnRebuildTreeViewItemsHagure(): Boolean;
	procedure TPDetailClick(Sender: TObject);
	procedure Goukei_DdxDBGridKeyPress(Sender: TObject; var Key: Char);
	procedure Jituzai_DdxDBGridKeyPress(Sender: TObject; var Key: Char);
	procedure Jituzai_DdxDBGridGCodeGetText(Sender: TObject;
	  ANode: TdxTreeListNode; var AText: String);
	procedure Goukei_DdxDBGridGCodeGetText(Sender: TObject;
	  ANode: TdxTreeListNode; var AText: String);

	procedure SetFileOut(iSelect : Integer; var sTitle: TStringList; var sMemFld: TStringList);
	procedure WMOnPaint(var Msg: TMessage); message WM_ONPAINT;
	procedure ErrorMessageDsp(DmQuery: TMQuery);
	procedure Jituzai_ChkBox_TokusyuClick(Sender: TObject);
	procedure LookUpDataSet();
	procedure Jituzai_DdxDBGrid_KeiMouseDown(Sender: TObject;
	  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
	procedure Goukei_DdxDBGrid_KeiMouseDown(Sender: TObject;
	  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
	procedure DisplayControl(Select: Integer);
	procedure SyosaiControl();
	procedure Jituzai_DdxDBGridChangeNodeEx(Sender: TObject);
	procedure Goukei_DdxDBGridChangeNodeEx(Sender: TObject);
	function  fnRecordCount():Boolean;
	function  fnUpdateCheck(iSumKbn : Integer):Boolean;
	procedure Jituzai_DdxDBGrid_KeiContDateDateValidateInput(
	  Sender: TObject; const AText: String; var ADate: TDateTime;
	  var AMessage: String; var AError: Boolean);
	procedure Jituzai_DdxDBGrid_KeiChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer);
	procedure Jituzai_DdxDBGrid_NyuChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer);
	procedure Goukei_DdxDBGrid_KeiChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer);
	procedure Goukei_DdxDBGrid_NyuChangeColumn(Sender: TObject;
	  Node: TdxTreeListNode; Column: Integer);
	procedure GFDelClick(Sender: TObject);
	procedure TFDelClick(Sender: TObject);
	function  BtnClkWriteJ():Boolean;
	function  BtnClkWriteG():Boolean;
	procedure btnFusenCtlClick(Sender: TObject);
	procedure FusenListClick(Sender: TObject);
	procedure GFReClick(Sender: TObject);
	procedure TFReClick(Sender: TObject);
//<271> DEL	procedure Goukei_DdxDBGridMouseMove(Sender: TObject;
//<271> DEL	  Shift: TShiftState; X, Y: Integer);
	procedure Jituzai_DdxDBGridMouseMove(Sender: TObject;
	  Shift: TShiftState; X, Y: Integer);
	procedure Goukei_ENEdit_RootKbnChange(Sender: TObject);
	procedure Jituzai_PMTabKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Root_PMTabKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure Goukei_PMTabKeyDown(Sender: TObject; var Key: Word;
	  Shift: TShiftState);
	procedure DdxDBGrid_KeiKeyPress(Sender: TObject; var Key: Char);
	procedure Goukei_DdxDBGrid_KeiContDateDateValidateInput(
	  Sender: TObject; const AText: String; var ADate: TDateTime;
	  var AMessage: String; var AError: Boolean);
	procedure FieldRestor(Sender: TObject; SumKbn: Integer);
	procedure ppDetailBand5BeforeGenerate(Sender: TObject);
	procedure ppDetailBand1BeforeGenerate(Sender: TObject);
	procedure fnSearch		();
	function  fnDownSearch	():Boolean;
	procedure BSpeedButtonDelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
	function  fnClearAllSystems(): Boolean;
	procedure fnSetLabel(Sender: TObject);
	procedure Jituzai_ENEdit_PartKbnChange(Sender: TObject);
	function  fnDataCheck(iSumKbn : Integer):Boolean;
	procedure TPOpenClick(Sender: TObject);
	procedure TPCloseClick(Sender: TObject);
	function  fnCheckMasterTreeInsertValid(DragCode,DropCode: String): Boolean;
    procedure ECombo_HeaderChange(Sender: TObject);
    procedure MMasterKBNChange(Sender: TObject);
    procedure JKanseiCalcFields(DataSet: TDataSet);
    procedure JKanseiBeforePost(DataSet: TDataSet);
    procedure dxKanseiGidEnter(Sender: TObject);
    procedure dxKanseiGidExit(Sender: TObject);
    procedure JKanseiAfterPost(DataSet: TDataSet);
    procedure ECombo_HeaderKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure MSPFunctionBarFunctionClick(Sender: TObject;
      FuncNo: Integer);
    procedure FreeSetMtokuiExecute(Sender: TObject);
    procedure dxKanseiGidCODEEditButtonClick(Sender: TObject);
    procedure evtOnChange(Sender: TObject);                 // <126>
    procedure evtGridOnEdited(Sender: TObject;              // <126>
      Node: TdxTreeListNode);
    function  UpdateHojyoMA(): Boolean;                     // <126>
    function  fnDelCheck(exNCode: Extended; iMKbn: Integer; var strErr: String): Boolean;
    procedure ECombo_HeaderEnter(Sender: TObject);
    procedure InpModeChangeExecute(Sender: TObject);
    procedure Jituzai_DdxDBGrid_KeiBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure Goukei_DdxDBGrid_KeiBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure Jituzai_DdxDBGrid_NyuBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure Goukei_DdxDBGrid_NyuBeforeChangeNode(Sender: TObject; Node,
      NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure Jituzai_DdxDBGrid_KeiChangeNodeEx(Sender: TObject);       // <205>
    procedure Goukei_DdxDBGrid_KeiChangeNodeEx(Sender: TObject);        // <205>
   	procedure	EnableKeiyakuListClm(bEnabled: Boolean; iFlg: Integer);
// <212> ADD start
    procedure evtKeiCostomerCodeEditButtonClick(
      Sender: TObject);
    procedure evtDdxDBGrid_KeiCostomerCodeGetText(Sender: TObject;
      ANode: TdxTreeListNode; var AText: String);
    procedure evtNyuCostomerCodeEditButtonClick(
      Sender: TObject);
    procedure Goukei_DdxDBGrid_NyuChangeNodeEx(Sender: TObject);
    procedure Jituzai_DdxDBGrid_NyuChangeNodeEx(Sender: TObject);
    procedure B_GrpSecClick(Sender: TObject);
    procedure Jituzai_DdxDBGrid_NyuCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused,
      ANewItemRow: Boolean; var AText: String; var AColor: TColor;
      AFont: TFont; var AAlignment: TAlignment; var ADone: Boolean);
    procedure Jituzai_DdxDBGrid_KeiCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused,
      ANewItemRow: Boolean; var AText: String; var AColor: TColor;
      AFont: TFont; var AAlignment: TAlignment; var ADone: Boolean);
    procedure ECombo_HeaderExit(Sender: TObject);
// <212> ADD end
//<KSN> ADD St
	procedure DBGridChangeNodeEx(Sender: TObject);
	procedure MemDataAfterPost(DataSet: TDataSet);
	procedure MemDataBeforePost(DataSet: TDataSet);
    procedure BSpeedButtonInsClick(Sender: TObject);
    procedure DBGridStartDrag(Sender: TObject;
        var DragObject: TDragObject);
    procedure DBGridDragOver(Sender, Source: TObject; X,
      Y: Integer; State: TDragState; var Accept: Boolean);
    procedure DBGridEndDrag(Sender, Target: TObject; X, Y: Integer);
    procedure DBGridDragDrop(Sender, Source: TObject; X,
      Y: Integer);
    procedure DBGridCodeEditButtonClick(Sender: TObject);
    procedure DBGridMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure PMPopup(Sender: TObject);
    procedure DBGridCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
      var AText: String; var AColor: TColor; AFont: TFont;
      var AAlignment: TAlignment; var ADone: Boolean);
    procedure TreeViewMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure BSpeedButtonClick(Sender: TObject);
    procedure FindHojyoMAExecute(Sender : TObject);
    procedure Goukei_PPanel_Card_2Resize(Sender: TObject);
    procedure Jituzai_PPanel_Card_2Resize(Sender: TObject);
//<KSN> ADD Ed
//<SEI> ADD St
    procedure JSeikyu_DMemDataBeforePost(DataSet: TDataSet);
    procedure GSeikyu_DMemDataBeforePost(DataSet: TDataSet);
    procedure DdxDBGrid_SeikyuBeforeChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
      NewColumn: Integer; var CanChange: Boolean);
    procedure DdxDBGrid_SeikyuBeforeChangeNode(Sender: TObject;
      Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
    procedure DdxDBGrid_SeikyuChangeColumn(Sender: TObject;
      Node: TdxTreeListNode; Column: Integer);
    procedure DdxDBGrid_SeikyuExit(Sender: TObject);
    procedure DdxDBGrid_SeikyuKeyPress(Sender: TObject;
      var Key: Char);
    procedure DdxDBGrid_SeikyuMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure DeleteSeikyuOutputDateExecute(Sender: TObject);
    procedure DeleteSeikyuInfoExecute(Sender: TObject);
    procedure DdxDBGrid_SeikyuEditing(Sender: TObject;
      Node: TdxTreeListNode; var Allow: Boolean);
    procedure DdxDBGrid_SeikyuCostomerGCodeEditButtonClick(
      Sender: TObject);
    procedure DdxDBGrid_SeikyuCustomDrawCell(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
      AColumn: TdxTreeListColumn; ASelected, AFocused,
      ANewItemRow: Boolean; var AText: String; var AColor: TColor;
      AFont: TFont; var AAlignment: TAlignment; var ADone: Boolean);
    procedure DdxDBGrid_SeikyuChangeNodeEx(Sender: TObject);
    procedure rdTaxClick(Sender: TObject);
//<SEI> ADD Ed
    procedure ContCopyExecute(Sender: TObject);
    procedure Keiyaku_DMemDataAfterCancel(DataSet: TDataSet);
    procedure Keiyaku_DMemDataBeforeCancel(DataSet: TDataSet);
    procedure TaxCalcExecute(Sender: TObject);
    procedure ExpChangeValue(Sender : TObject);
    procedure dxKanseiGidCustomDrawCell(Sender: TObject; ACanvas: TCanvas;
      ARect: TRect; ANode: TdxTreeListNode; AColumn: TdxTreeListColumn;
      ASelected, AFocused, ANewItemRow: Boolean; var AText: String;
      var AColor: TColor; AFont: TFont; var AAlignment: TAlignment;
      var ADone: Boolean);  //<EXP> ADD
  private
	{ Private 宣言 }
	m_pMyAppRecord		: ^TMjsAppRecord;
	m_pSystemArea	    : ^rcSYSTEMAREA;	                    // MJSｼｽﾃﾑｴﾘｱ
	m_pCommonArea	    : ^rcCOMMONAREA;	                    // MJS共通ｴﾘｱ
	ComArea				: TJNTMASCom;

	dbCorp_Select   	: TFDConnection;
	CTRL_DB				: TFDConnection;
	MDataModule			: ^TMDataModulef;
	m_AcControl			: TWinControl;
	TBaseNode			: TTreeNode;
	TBaseNodeSv			: TTreeNode;
	MemPost_Sw			: Integer;
	PrnSupport			: TMjsPrnSupport;
	mjspreview			: TMjsPreviewIF;
	MjsMsgRec			: TMJSMsgRec;
	MasTreee2Dlg		: TJNTMasTreee2Dlgf;
	MasMonth	        : TJNTMasMonth;    // <235> ADD

	m_fAccessTab		: Boolean;
	m_fAccessTabJ		: Boolean;
	m_fAccessTabG		: Boolean;
	m_fAccessTree		: Boolean;
	m_stGCodeSave		: String;
	m_fEnd				: Integer;
	m_fChange			: Integer;
	m_fPrint			: Integer;
	m_fIS				: Integer;
	m_fDel				: Integer;
	m_fTreeClk			: Integer;
	m_stRecPaste		: ^TreeViewRec;					        // NodeDataｾｰﾌﾞ用
	m_cNodeRightClk		: TTreeNode;					        // 右ｸﾘｯｸNodeｾｰﾌﾞ
	giFusenSelectColorJ	: Integer;
	giFusenSelectColorG	: Integer;
	giTokusyuFlg		: Integer;
//<TAX> DEL	giHasuu				: Integer;						        // 仮受消費税 端数処理方法
	m_iRekiKbn			: Integer;
	m_iMailKbn			: Integer;
	m_iAccProKbn		: Integer;						        // 消費税区分
	m_bFieldFlg			: Boolean;
// <212> MOD start
{
	JKeiDateSave	   	: array[1..8] of TDateTime;             // 実在契約年月日保管用
	GKeiDateSave		: array[1..8] of TDateTime;             // 合計契約年月日保管用
    JTaxRateSave        : array[1..8] of Integer;               // 実在税率保管用<169>
    GTaxRateSave        : array[1..8] of Integer;               // 合計税率保管用<169>
}
	JKeiDateSave	   	: array[1..999] of TDateTime;
	GKeiDateSave		: array[1..999] of TDateTime;
    JTaxRateSave        : array[1..999] of Integer;
    GTaxRateSave        : array[1..999] of Integer;
// <212> MOD end
	JNyuDateSave	   	: array[1..10] of TDateTime;
	GNyuDateSave		: array[1..10] of TDateTime;
// <212> MOD start
{
    JKeiNCodeSave       : array[1..8]  of Extended;             // 実在契約削除内部ｺｰﾄﾞ<172>
    GKeiNcodeSave       : array[1..8]  of Extended;             // 合計契約削除内部ｺｰﾄﾞ<172>
}
    JKeiNCodeSave       : array[1..999]  of Extended;
    GKeiNcodeSave       : array[1..999]  of Extended;
// <212> MOD end
// <SEI> ADD start
	// 請求情報ｸﾞﾘｯﾄﾞ用
	JSeikyuDateSave	   	: array[1..999] of TDateTime;
	GSeikyuDateSave		: array[1..999] of TDateTime;
    JSeikyuRateSave     : array[1..999] of Integer;
//    GSeikyuRateSave     : array[1..999] of Integer;
    JSeikyuNCodeSave    : array[1..999]  of Extended;
    GSeikyuNcodeSave    : array[1..999]  of Extended;
    JSeikyuElement      : Integer;                              // 実在削除配列要素
    GSeikyuElement      : Integer;                              // 合計削除配列要素
    mbSeikyuUse         : Boolean;
// <SEI> ADD end
    JNyuNCodeSave       : array[1..10] of Extended;             // 実在入金削除内部ｺｰﾄﾞ<172>
    GNyuNcodeSave       : array[1..10] of Extended;             // 合計入金削除内部ｺｰﾄﾞ<172>
    JKeiElement         : Integer;                              // 実在契約削除配列要素<172>
    GKeiElement         : Integer;                              // 合計契約削除配列要素<172>
    JNyuElement         : Integer;                              // 実在入金削除配列要素<172>
    GNyuElement         : Integer;                              // 合計入金削除配列要素<172>
	giChkFlg			: Integer;
	gbHojyoTree2Flag	: Boolean;					            // 書き込みﾌﾗｸﾞ
	giCloseFlg			: Integer;
	gbHojyoTreeDelFlag	: Boolean;					            // 削除ﾌﾗｸﾞ
	gbKojiInfo2DelFlag	: Boolean;					            // 削除ﾌﾗｸﾞ
	giReferFlag			: Integer;					            // 参照ﾌﾗｸﾞ
	gbTreeClick			: Boolean;
	gstErrorStr			: String;					            // ﾌﾘｰｺｰﾄﾞ入力可能文字列
	m_HintRow_Jitu		: Integer;
//<271> DEL	m_aCmnt_Jitu		: array of FusenCmntRec;
	m_aCmnt_Jitu		: TFusenCmntList;  //<271> ADD
	m_HintRow_Gou		: Integer;
//<271> DEL	m_aCmnt_Gou			: array of FusenCmntRec;
	m_aCmnt_Gou			: TFusenCmntList;  //<271> ADD
	giAllCnt			: Integer;
	m_SearchInfo		: SearchInfoRec;			            // 検索対象分類情報
	m_fSystemClear		: Boolean;					            // 加算体系ｸﾘｱ
	m_pExpModule		: ^TMjsExceptDbmf;			            // 排他制御
	sDetail2			: array[0..2] of String;
	sPart				: array[0..2] of String;
	m_bMsgFlg			: Boolean;
	m_bFirstFlag		: Boolean;					            // 初期処理ﾌﾗｸﾞ
	m_bModeChg			: Boolean;					            // false:ｺｰﾄﾞ入力 true:ﾃｷｽﾄ入力
    m_Zoom              : Integer;
    m_EdtSw             : Boolean;                              // <126>編集ｽｲｯﾁ
    m_cJNTArea          : TJNTCommon;
    m_Close             : Boolean;
    uvCombChgFlg        : Boolean;
    uvFncInfo           : urFncInfo;  // <100>
//  uvLogin             : Currency;   // <100> Test
    uvExpOpenSW         : Boolean;                              // ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ(true:OPEN false:CLOSE)
	m_arAdoptInfo	    : array [0..9] of AdoptInfo;
	m_arAdoptInfo_Seg	: array [1..10] of AdoptInfo;
	m_arAdoptInfo_PBr	: array [1..10] of AdoptInfo;
    UpdFreeFlg			: Boolean;                              // <102>ﾌﾘｰ項目対応
    freeItem			: TJNTFreeRec;                          // <102>ﾌﾘｰ項目対応
    freeItemNull		: TJNTFreeRec;                          // <102>ﾌﾘｰ項目対応
    uvHani              : TJNTHani;		                        // <PRN> 範囲ﾀﾞｲｱﾛｸﾞ用ﾊﾟﾗﾒｰﾀ
    PrintAppEntry   	: TPrintAppEntry;                       // <PRN>
    ArrHdl              : Array[0..100] of Pointer;			    // <PRN> Lのﾌｫｰﾑﾎﾟｲﾝﾀの格納配列(Lに渡す)
    PrtParam		    : rcPrtParam;                           // <PRN>
    DmqPrint            : TMQuery;                              // <PRN> 印刷用ｸｴﾘｰ
	uvSelSys            : TJNTSelCorpSys; 	                    // <PRN> 会社ｼｽﾃﾑ情報
	m_nOrderDivision    : Integer;							    // 印刷範囲指定: 0=ｺｰﾄﾞ順, 1=連想順
	m_strExCodeScopeStr : String;							    // 印刷開始部門外部ｺｰﾄﾞ
	m_strExCodeScopeEnd : String;							    // 印刷終了部門外部ｺｰﾄﾞ
    mqCmnDB			    : TMQuery;                              // <118>共通DB用ｸｴﾘｰ
    m_SyokuchiFlg       : Boolean;                              // <120>諸口ﾀﾞｲｱﾛｸﾞON/OFFﾌﾗｸﾞ
    AOwner              : TComponent;
    m_nMasterDivision   : Integer;                              // <124>ﾏｽﾀ区分 (201 ～ 210)
    uvNCODE             : Extended;                             // <124>
    m_KanseiFlg         : Boolean;                              // <124>
    m_MExistFlg         : Boolean;                              // <124>
//    m_FRIFlg            : Boolean;                              // <124>
    m_PLFlg             : Boolean;                              // <124>
    uvWFExpOpenSW       : Boolean;                              // <155>WF用ｴｸｽﾌﾟﾛｰﾗ起動ｽｲｯﾁ<WF>
//<225> DEL    m_recSinseiKey      : TSinseiInfoKey;                       // <155>申請書情報ｷｰ<WF>
    m_recOther          : TWFOtherInfo;                         // <155>申請書情報の他ﾓｼﾞｭｰﾙ部分<WF>
	m_WFSw				: Boolean;
	m_bTabClickFlg		: Boolean;							    // <160>
	m_aKanseiFuriInfo	: array[1..25] of KanseiFuriInfoRec;	// <162完成振替情報
																// 1～10:ｾｸﾞﾒﾝﾄ、11～20:ﾌﾟﾛｼﾞｪｸﾄ、21～25:補助
	m_bFirstFlg			: Boolean;                              // <162>MemDataへのPostの制御ﾌﾗｸﾞ
    m_TantoNCode        : Currency;                             // <172> ﾛｸﾞｲﾝ担当者内部ｺｰﾄﾞ
    m_SyncMaster        : TSyncMaster;                          // <172> ﾏｽﾀ同期基本ｸﾗｽ
    m_RowState          : Integer;                              // <172> 詳細画面行ｽﾃｰﾀｽ
    m_PrjUseFlg         : Boolean;                              // <178> 採用ﾌﾗｸﾞ

// <204> ADD start
	m_exJBmnNCode		: Extended; 							// 実在工事部門内部ｺｰﾄﾞ
	m_exGBmnNCode		: Extended;                             // 合計工事部門内部ｺｰﾄﾞ
// <204> ADD end

// <205> ADD start
	m_exJSekouBmnNCode		: Extended; 							// 実在施行部門内部ｺｰﾄﾞ
	m_exGSekouBmnNCode		: Extended;                             // 合計施行部門内部ｺｰﾄﾞ
// <205> ADD end

    m_RetFlg            : Boolean;  // <208> ADD
// <212> ADD start
//    m_NyCodeFlg         : Boolean;
    m_DetailKbn2        : Integer;
// <212> ADD end
	m_iSecUseKbn		: Integer;	// <217> ADD
    m_KojKbn            : Integer;  // <219> ADD
// <225> ADD start
    m_FLWSinseiFlg      : Boolean;
    m_recFLWSinseiKey   : TFLWSinseiInfoKeys;
    m_MstrKbn4          : Integer;  // 進行基準採用区分
// <225> ADD end
	m_MstrKbn20         : Integer;  // <291> ADD 収益認識基準採用区分
// <235> ADD start
    m_KojHurikaeKbn     : Integer;
    m_KeiyakuCheckFlg   : Boolean;
// <235> ADD end

// <238> ADD start
    m_JBmnExpFlg         : Boolean;  // 実在部門検索EXP選択フラグ
    m_JBmnChangeFlg      : Boolean;  // 実在部門変更フラグ
    m_GBmnExpFlg         : Boolean;  // 合計部門検索EXP選択フラグ
    m_GBmnChangeFlg      : Boolean;  // 合計部門変更フラグ

    m_JSekBmnExpFlg      : Boolean;  // 実在施工部門検索EXP選択フラグ
    m_JSekBmnChangeFlg   : Boolean;  // 実在施工部門変更フラグ
    m_GSekBmnExpFlg      : Boolean;  // 合計施工部門検索EXP選択フラグ
    m_GSekBmnChangeFlg   : Boolean;  // 合計施工部門変更フラグ
// <238> ADD end
    m_ArySortInfo       : TArySortInfo;                         // ｿｰﾄ情報 <265>Add

//<KSN> ADD St
    m_HojyoTree_Drag : TDragData;     // 加算データ(ドラッグ用)
	m_DragCtlName	: TComponentName; // ドラッグ開始時のコンポーネント
    // 検索関連
    m_NCodeArray : array of Extended;
    m_SrchHojyoMA : THojyoMA;
//<EXP> MOD St
{
    m_APGFILE   : TJNTCRP018001APG;
    m_DEFMODE   : TDEFMODE;
    m_DLG_INFO  : TDLG_INFO;
}
    moApgCtrlEnv    : APGFileController;  // クライアントフォルダ用
    moApgCtrlJnt    : APGFileController;  // 共有サーバー用
    moSections      : SectionList;
    msExpDivision   : String;
    msExpEmployee   : String;
//<EXP> MOD Ed
    m_iStartMode    : Integer;
    m_sComputerName : string;
    m_sProgramName  : string;
//<KSN> ADD Ed
	m_bKojiLicense		: Boolean;	// <276> ADD
	m_bNoControlSesyu	: Boolean;	// <277> ADD 「施主」項目の無条件表示フラグ
//<FREE> ADD St
    freeChgItem		    : TJNTFreeChgRec;
    freeChgItemNull		: TJNTFreeChgRec;
//<FREE> ADD Ed
//<TAX> ADD St
    moBusiness      : TBusinessObject;
    moKojiInfoMn    : TKojiInfoManager;
    miBeforeRecNo,                  // MemDataキャンセル前イベントのRecNoを保持
    miAfterRecNo      : Integer;    // MemDataキャンセル後イベントのRecNoを保持
//<TAX> ADD Ed
    m_RepHandle			: THandle;                          // 印刷モジュールハンドル <285> ADD
	m_MstrKbn12         : Integer;  // <292> ADD 契約情報税率登録区分


    function    fnGetGCODE                          (pCODE: Extended; pMKBN: Integer): String;
    Function    fnGetGCODE_Int                      (pCODE: Extended; pMKBN: Integer): Integer;
    Function    fnGetNCODE                          (pCODE: String; pMKBN,pAttr: Integer): Extended;
    Function    fnGetNCODE_KS                       (pCODE: Integer): Extended;
    procedure   fnKanseiWrite                       ();
    function    fnGetNAME                           (pCODE: String; pMKBN,pAttr: Integer; var RName: String): Boolean;
    function    fnChildCount                        (pNCode: Extended): Boolean;
    function    fnChkDateBigSmall                   (StDate,EdDate :TMDateEdit): Boolean;   // <115>
    // <162> - ST
	procedure   fnGetKanseiFuriInfo                 ();		    // 完成振替情報取得
	procedure   fnKanseiFuriInfoClear               ();			// 完成振替情報ｸﾘｱ
	procedure   fnKanseiFuriInfoDsp                 ();			// 完成振替情報表示
    // <162> - ED

// <191> ADD start
    function GetKmkGCode(exNCode : Extended) : Integer; 		// 売上計上科目外部ｺｰﾄﾞ取得
    function GetKmkNCode(iGCode : Integer) : Extended;          // 売上計上科目内部ｺｰﾄﾞ取得
// <191> ADD end

	procedure	SessionPractice(iSyori: Integer);				// <203> ADD
// <225> MOD start
//    procedure   fnKojiFldSetWF                      (objRec: TKojiToroku);                  // <208> ADD
    procedure   fnKojiFldSetWF(objRec: TPrjKojiAll);
// <225> MOD end
    function    fnPrjBunGet(iMasterKbn: Integer; NCode: Extended; var NM: String): String;  // <208> ADD
    procedure   EnableNyukinClm(bEnabled: Boolean; iFlg: Integer);                          // <212> ADD
    function    fnCheckDetailKbn2(pCODE:Integer):Integer;
// <225> ADD start
    function    fnGetKojiGCode(exNCode: Extended): String;
    function    UpdateFLWSinsei(objKey: TFLWSinseiInfoKeys): Boolean;
    function    fnKeiyakuNyukinDataCheck(exNCode: Extended; iInfoKbn: Integer): Boolean;
    procedure   fnHenkouPrjKojiAllFldSetWF(objRec: TPrjKojiAll);
    procedure   FontColorChange();
// <225> ADD end

    function    fnKeiyakuDateCheck(pBeforeDate: TDateTime; pAfterDate: TDateTime):Boolean;  // <235> ADD
    function    fnParaFileRead(aGetKbn: Integer): Boolean;	// <265>Add	//<277> MOD 引数追加

//<KSN> ADD St
    function  IsSyosaiMode():Boolean;
    function  IsLimitCount():Boolean;
    function  GetStartMode():Integer;
    procedure SetStartMode(Value:Integer);
    procedure ShowDLG(Mode:Integer;var iRet:Integer);
    procedure ShowExplorer(Send_Exp:TSend_Exp;var Rcv_Exp:TRcv_Exp);
    procedure QueryDispose(var Qry:TMQuery);
    procedure SetGuidance(Value:string);
    procedure GuidanceClear();
    // HojyoMA関連
    function fnHojyoMA_Count(MasterKbn:integer;SumKbn:Integer=-1):Integer;
    function fnHojyoMA_GetGoukei():TMQuery;
//    function fnHojyoMA_GetJitsuzai():TMQuery;
    function fnHojyoMA_Get(iSumKbn:Integer):TMQuery; overload;
    function fnHojyoMA_Get(GCode:String;NCode:Extended):THojyoMA; overload;
    function fnHojyoMA_CodeEdit(sGCode:String):String;
    function fnHojyoMA_GetData(GCode:String):THojyoMA; overload;
    function fnHojyoMA_GetData(NCode:Extended):THojyoMA; overload;
    // 加算先マスター関連
    function fnKasan_Count(SumNCode:Extended=-1):Integer;
    function fnKasan_GetMaxEntNo(SumNCode:Extended):Integer;
//    function fnKasan_GetMinEntNo(SumNCode:Extended):Integer;
    function fnKasan_GetEntNo(SumNCode:Extended;iGetKbn:Integer):Integer;
    function fnKasan_GetChild(SumNCode:Extended;iOrder:Integer=ORDER_ASC):TMQuery;
    function fnKasan_GetParent(BasedNCode:Extended;iOrder:Integer=ORDER_ASC):TMQuery;
    function fnKasan_Get(iNCode:Extended;iSumKbn:Integer;iOrder:Integer=ORDER_ASC):TMQuery;
//<KSN4> MOD St
//    procedure fnKasan_Update(HojyoTree:THojyoTree;bIns : Boolean);
    function fnKasan_Update(HojyoTree:THojyoTree;bIns : Boolean; pQry: TMQuery = nil): Boolean;
    procedure fnKasan_UpdateExecute(HojyoTree:THojyoTree);
//<KSN4> MOD Ed
    function fnKasan_ResetEntNo(PatternNo:Integer;SumNCode:Extended):Boolean;
//<KSN4> DEL    procedure fnKasan_Delete(HojyoTree:THojyoTree);
    function fnKasan_Delete(HojyoTree:THojyoTree; pQry: TMQuery = nil): Boolean;  //<KSN4> ADD
    function fnKasan_GetData(BasedNCode,SumNCode:Extended):THojyoTree;
    function fnKasan_EXISTS(MasterKbn,PatternNo,EntNo:Integer;SumNCode:Extended):Boolean;
    function fnKasan_Sort(Prog:TProgressBar;SumNCode:Extended=-1):Boolean;
    function fnKasan_Search(SumNCode:Extended):Boolean;
    procedure fnKasan_InsValidation(HojyoTree:THojyoTree;var ErrMsg:String);
    procedure fnKasan_DelValidation(HojyoTree:THojyoTree;var ErrMsg:String);

    procedure TreeView_Kasan_Create(NCode:Extended;iSumKbn:Integer=0);
    procedure MemData_EventCtrl(Mem:TdxMemData;bSet:Boolean);
    procedure DBGrid_EventCtrl(DBGrid:TdxDBGrid;bSet:Boolean);
    procedure TreeView_EventCtrl(TreeView:TMTreeView;bSet:Boolean);
    procedure Kasan_CreateChildGrid(SumNCode : Extended);
    procedure Kasan_CreateParentGrid();
    procedure Kasan_CreateSearchParent();
//<KSN> ADD Ed
	function IsExistLicense(aModuleCode: Integer): Boolean;	//<272> ADD
	procedure ToolBarObjectMove();	//<MLXDEP>
//<FREE> ADD ST
    procedure setWfFreeItem(objRec: TPrjKojiAll);
    function toPrjKojiAllOfFreeItem(qry: TMQuery): TPrjKojiAll;
//<FREE> ADD Ed
// <SEI> ADD start
	procedure   fnSeikyuRead        				(exNCode: Extended; iSumKbn: Integer);
	function	fnSeikyuWrite						(exNCode: Extended; iSumKbn: Integer): Boolean;
  	function	fnDelCheckSeikyu					(iMasterKbn: Integer; exNCode: Extended): Boolean;
    function	fnGetHojNameSeikyu					(iMasterkbn: Integer; iSumKbn: Integer; strGCode: String; var strName: String; var exNCode: Extended; iOption: Integer = 0): Boolean;
    function	IsSeikyuYoteiUse					(): Boolean;
    function	IsExistSeikyu						(iMasterKbn: Integer; exNCode: Extended): Boolean;

	procedure	SetCodeProp							(iAttr: Integer; iDigit: Integer;
													objTxt: TMTxtEdit; objNum: TMNumEdit; objppDBTxt: TppDBText);
    function	ClearSeikyuYoteiDate				(objMem: TdxMemData): Boolean;
    function	ChangeIkkatuKouji					(iSumKbn: Integer): Boolean;
    function	GetInputGCode						(objTxt: TMTxtEdit; objNum: TMNumEdit): String;
    function	GetDBGCode							(iAttr: Integer; strGCode: String; iLength: Integer = 16): String;
// <SEI> ADD end
//<TAX> ADD St
    function toKojiInfoParam(iSumKbn: Integer): TKojiInfoParam;
    function toKojiInfo2Param(mem: TdxMemData): TKojiInfo2Param;
    procedure setContTaxInfo(mem : TdxMemData; contList: TObjectList);overload;
    procedure setContTaxInfo(
        kojiInfoParam   : TKojiInfoParam;
        kojiInfo2Param  : TKojiInfo2Param;
        mem             : TdxMemData;
        updateTax       : Boolean = true); overload;
    function changeKojiInfo2(param: TKojiInfo2Param; errorCheck: Boolean = true): Integer;
    function checkKojiInfo2(param: TKojiInfo2Param): Integer;
    procedure setTaxType();
    procedure pushTaxButton(button: TMRadioButton);
    procedure autoCalcContMoney(taxType: Integer; mem: TdxMemData);
    procedure contCopy(mem: TdxMemData; fieldNames : array of String);
    procedure dspContCopy(dbGrid: TdxDBGrid);
    procedure dspTaxCalc(dbGrid: TdxDBGrid);    
    function canSetSalesTax(param: TKojiInfo2Param): Boolean;
    function getCurrentSumKbn(): Integer;
    property currentSumKbn: Integer read getCurrentSumKbn;
    procedure setFontColorTax(mem: TdxMemData);
//<TAX> ADD Ed
//<EXP> ADD St
    function GetDlgInfo(): String;
    procedure SetDlgInfo(value : String);
    property DlgInfo: String read GetDlgInfo write SetDlgInfo;
    function GetDefMode(): String;
    procedure SetDefMode(value : String);
    property DefMode: String read GetDefMode write SetDefMode;
    function GetExpValueDivision(): String;
    procedure SetExpValueDivision(value : String);
    property ExpValueDivision: String read GetExpValueDivision write SetExpValueDivision;
    function GetExpValueEmployee(): String;
    procedure SetExpValueEmployee(value : String);
    property ExpValueEmployee: String read GetExpValueEmployee write SetExpValueEmployee;
    function GetF2Caption(): String;
    property F2Caption: String read GetF2Caption;
    function GetF2Action(): TAction;
    property F2Action: TAction read GetF2Action;
    procedure ExpDivisionChange();
    procedure ExpEmployeeChange();
//<EXP> ADD Ed
//<KSN4> ADD St
    function GetKasanUpdate(): Boolean;
    property KasanUpdate : Boolean read GetKasanUpdate;
//<KSN4> ADD Ed
//<ConInfo> ADD St
    function GetErrorTaxRateCheck(): Integer;
    property errorTaxRateCheck : Integer read GetErrorTaxRateCheck;
//<ConInfo> ADD Ed
    procedure MakeNodeDelete(NodeTarget: TTreeNode; strTargetCode: String; strParentCode: String);  //<289-2>追加
    procedure MakeNodePaste(NodeTarget: TTreeNode; strExCode: String; nDivision: Integer);          //<289-3>追加
  public
	{ Public 宣言 }
	constructor CreateForm                          (pRec: Pointer);
	procedure	CMChildKey                          (var Msg: TWMKey); message CM_CHILDKEY;

    //<100>Add  ↓↓↓↓↓↓↓↓↓
//<113>    procedure   fnSetFncType(pKBN:Integer);
    procedure   fnSetFncType                        (nDspType: Boolean; ifuncNo: Integer);  // <113>
    procedure   fnFreeDlg                           (nFunc: Integer);
    procedure	fnPrint                             ();                                     // <PRN>

    //<155> - ST	<WK>↓↓↓
	procedure   ClearOtherRec                       (var objRec: TWFOtherInfo);
    procedure   fnImportWF                          (Sender: TObject);
//<225> DEL    function    UpdateSinsei                        (objKey: TSinseiInfoKey): Boolean;
//<227> DEL    procedure   fnFldSetWF                          (objRec: TKojiSinseiInfo);
    procedure   fnFldSetWF                          (objRec: TPrjKojiAll);  //<227> ADD
    function    ExistMst                            (iMKbn: Integer; exNCode: Extended): Boolean;
	function    fnInfoGet                           (Kbn: Integer; NCode: Extended; var NM: String): String;
	function    fnKojPrjDataCheck                   (strGCode: String; iSumKbn: Integer): Integer;
	procedure   fnSinseiDspControl                  (bDsp: Boolean);
    //<155> - ED	<WK>↑↑↑

    function    fnCorpRelation                      (var pSync: SyncKey; pType: Integer): Integer;     // <172>
// <212> ADD start
    function    fnGetTOKUNAME(pCODE:Extended;pMKBN:Integer):String;
    function    fnGetDispCode(pCODE:String;pMKBN:Integer):String;
// <212> ADD end
    function    fnSetGCode(pGCode: String; pAttr: Integer; pDigit: Integer; pKbn: Integer): String; // <240> ADD
    procedure   fnEdgeTrackerKeihiSeisanMsg();  // <290> add
  end;

function AppEntry(pParam:Pointer)	: Integer;
exports
	AppEntry;

implementation
{$include JNTMASFUSENBIKODLGIFB.inc}
{$include JNTMasCommonFuncB.inc}
{$include JNTMASERRORCODECHECK.INC}
{$include JNTMASSEARCHDLGIFB.inc}
//{$include JNTConst.inc}                     // <127>
{$include ETYMasterSinseiExgIFB.inc}		// <WF><155>
{$include JNTCRPSyncMasterB.inc}            // <172> ﾏｽﾀ同期共通実装部
{$include JNTSyncMasterIFB.inc}             // <183> ﾏｽﾀ同期一括配信DLGﾍｯﾀﾞ部
{$include JNTCRP004010IFB.inc}              // <217>
{$include FLWMasterSinseiExgIFB.inc}        // <225>
{$include JNTCRPFreeDlgB.inc} //<FREE> ADD
{$R *.DFM}

(*
var
    m_nMasterDivision : Integer;
    uvNCODE      : Extended;
    m_KanseiFlg  : Boolean;
    m_MExistFlg  : Boolean;
    m_FRIFlg     : Boolean;
    m_PLFlg      : Boolean;
*) // <124> ---> ここに記述すると共有で参照してしまう為、ｸﾗｽに移動


//**************************************************************************
//	Proccess	:	外部ﾌﾟﾛｸﾞﾗﾑからのｴﾝﾄﾘﾎﾟｲﾝﾄ
//	Name		:	unknown
//	Date		:	2000/ 08 / 09
//	Parameter	:	pParam	Pointer
//	Retrun		:	result
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function AppEntry(pParam: Pointer): Integer;
var
	pMyForm	:	^TJNTCRP018001f;
	pRec    :	^TMjsAppRecord;
begin
	result	:= ACTID_RET_OK;
	pRec	:= Pointer(TAppParam(pParam^).pRecord);

	case TAppParam(pParam^).iAction of

		ACTID_FORMCREATESTART:							    // ﾌｫｰﾑの作成要求（作成のみ）
		begin
			new (pMyForm);
			try
				pMyForm^:= TJNTCRP018001f.CreateForm(pRec);
				pRec^.m_pChildForm := pMyForm;
			except
				Dispose(pMyForm);
				result	:= ACTID_RET_NG;
			end;
		end;

		ACTID_FORMCREATESHOWSTART:						    // ﾌｫｰﾑの作成要求（作成&表示）
		begin
			new (pMyForm);
			try
				pMyForm^ := TJNTCRP018001f.CreateForm(pRec);
				pMyForm^.Show;
				pRec^.m_pChildForm := pMyForm;
			except
				Dispose(pMyForm);
				result	:= ACTID_RET_NG;
			end;
		end;

		ACTID_FORMCLOSESTART:							    // ﾌｫｰﾑの解放要求
		begin
			pMyForm	:= Pointer(pRec^.m_pChildForm);
			pMyForm^.Close();
			pMyForm^.Free();
			Dispose(pMyForm);
		end;

		ACTID_FORMCANCLOSESTART:						    // ﾌｫｰﾑの解放直前要求
		begin
			pMyForm	:= Pointer(pRec^.m_pChildForm);
			if pMyForm^.CloseQuery = false then
				result	:= ACTID_RET_NG;
		end;

		ACTID_SHOWSTART:								    // ﾌｫｰﾑの表示要求
		begin
			pMyForm	:= Pointer(pRec^.m_pChildForm);
			pMyForm^.Show();
		end;

		ACTID_HIDESTART:
		begin
			pMyForm := Pointer( pRec^.m_pChildForm );

			if pMyForm^.Parent <> nil then
			begin
				pMyForm^.Hide;
			end;
		end;
	end;
end;


//**************************************************************************
//	Proccess	:	ﾌｫｰﾑｺﾝｽﾄﾗｸﾄ
//	Name		:	unknown
//	Date		:	2000/ 08 / 09
//	Parameter	:	pRec	Pointer
//	Retrun		:
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
constructor TJNTCRP018001f.CreateForm(pRec: Pointer);
var
	DmqData	 : TMQuery;
	sMessage : String;
begin

	// 変数の初期化
	m_WFSw		:= false;       // <155>
	m_bFirstFlg := false;		// <162>
    m_Close     := false;

    m_cJNTArea := TJNTCommon.Create ( Self );
    m_cJNTArea.Init ( pRec );
	m_cJNTArea.setMasAppRecord;

	m_pMyAppRecord := pRec;								// 構造体のSave

//    m_Log := TLog_Writer.Init(0,rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot);  //*Log*

	MDataModule	   := m_pMyAppRecord^.m_pDBModule;      // DBModuleを取得
	m_pExpModule   := m_pMyAppRecord^.m_pExpModule;		// 排他Moduleを取得
	m_pSystemArea  := m_pMyAppRecord^.m_pSystemArea;	// ｼｽﾃﾑﾒﾓﾘ  取得
	m_pCommonArea  := m_pMyAppRecord^.m_pCommonArea;	// 会社Noを共通ﾒﾓﾘから取得

	ComArea		   := TJNTMASCom(m_pMyAppRecord^.m_pSystemArea^);
    m_TantoNCode   := rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;  // <172>
    AOwner         := TForm(m_pMyAppRecord^.m_pOwnerForm^);

    // 郵便番号辞書 初期化
	if ( fnCMNPostInit(m_pMyAppRecord) <> 0 ) then
	begin
		raise EMathError.Create('郵便番号辞書の初期化に失敗しました｡');
		Exit;
	end;

	// 会社DBのOpen
	dbCorp_Select := MDataModule^.COPDBOpen ( 1, m_pMyAppRecord.m_iCorpID );

	if ( dbCorp_Select = nil ) then
	begin
		raise Exception.Create('');
		Exit;
	end;

    // MQueryの構築
	DmqData := TMQuery.Create ( Self );
	MDataModule^.SetDBInfoToQuery ( dbCorp_Select, DmqData );

	// 共通DBのOpen
	CTRL_DB	:= MDataModule^.CTLDBOpen(0);
	if ( CTRL_DB = nil ) then
	begin
		ShowMessage('エラー');
		raise EMathError.Create('エラー');
	end;

    // <172> - ST
    // MQueryの構築
	DmqData := TMQuery.Create( Self );

    try
        // 子会社DBとMQueryの接続
    	MDataModule^.SetDBInfoToQuery ( dbCorp_Select, DmqData );

        // ﾏｽﾀ履歴用のｽﾄｱﾄﾞ(開始)を実行(子会社用)
      	DmqData.Close();
    	DmqData.SQL.Clear();
    	DmqData.SQL.Add(fnMakeSQL(1));

        // ﾛｸﾞｲﾝ担当者内部ｺｰﾄﾞ
        DmqData.ParamByName('TANCD').AsFloat := m_TantoNCode;

        // ｽﾄｱﾄﾞの実行
    	if ( DmqData.ExecSQL  = false ) then
    	begin
            sMessage := IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
            showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ﾏｽﾀ履歴ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりました。');
            raise Exception.Create( '' );
        end;

        // SyncMasterｸﾗｽの生成
        try
            m_SyncMaster := TSyncMaster.Create (Self, m_pMyAppRecord, m_cJNTArea, dbCorp_Select);
            m_SyncMaster.InitData();
            m_SyncMaster.m_AOwner := TForm(m_pMyAppRecord^.m_pOwnerForm^);
        except
            raise;
        end;
    finally
        DmqData.Close();
	    DmqData.Free();
    end;
    // <172> - ED

    // <PRN> - ST
    // 会社別ｼｽﾃﾑ情報の初期化
    try
        uvSelSys := nil;
	    uvSelSys := TJNTSelCorpSys.Create(Self);
        if uvSelSys = nil then
            Abort;

    	if uvSelSys.CreateSysMsg(m_pMyAppRecord) <> 0 then
            Abort;
    except
		MjsMessageBox(Self,'ｼｽﾃﾑ情報の初期化に失敗です。', mjError, mjDefOk);
        raise;
    end;

    // 会社別ｼｽﾃﾑ情報読み込み
    try
    	if ( uvSelSys.CreateSysInfo(dbCorp_Select) <> 0 ) then
            Abort;
    except
        MjsMessageBox(Self,'ｼｽﾃﾑ情報が取得できませんでした。', mjError, mjDefOk);
        raise;
    end;
    // <PRN> - ED

    inherited Create ( AOwner );
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnActivate
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormActivate(Sender: TObject);
var
	AppPara : TAppParam;
begin
	AppPara.iAction := ACTID_ACTIVEEND;
	AppPara.pRecord := Pointer( m_pMyAppRecord );
	AppPara.pActionParam := nil;

	TMjsAppRecord( m_pMyAppRecord^ ).m_pOwnerEntry( @AppPara );
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnCreate
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormCreate(Sender: TObject);
var
	DMQuery	 : TMQuery;
    i        : Integer;
    iRet     : Integer;        // <PRN>
    lvHandle : THandle;        // <PRN>
//    strName  : String;         // <222>
begin
// <203> ADD start
	SPMsHist.Connection := dbCorp_Select;
	//SPMsHist.SessionName  := dbCorp_Select.SessionName;

    if	m_SyncMaster.m_flgGrpCorp = 1 then		// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	begin
		SPMsHistParent.Connection	:= m_SyncMaster.m_cPDBSelect;
		//SPMsHistParent.SessionName	:= m_SyncMaster.m_cPDBSelect.SessionName;
	end;
// <203> ADD end

	m_bFirstFlag	:= false;
	m_fAccessTree   := false;
	m_fAccessTab    := false;
	m_fAccessTabJ   := false;
	m_fAccessTabG   := false;
	m_bTabClickFlg  := false;		// <160>
    m_RowState      := STATE_NONE;  // <172>
    m_PrjUseFlg     := false;       // <178>
	m_bNoControlSesyu	:= False;	// <277>
//<KSN> ADD St
//<271> ADD St
    m_aCmnt_Jitu := TFusenCmntList.Create();
    m_aCmnt_Gou := TFusenCmntList.Create();
//<271> ADD Ed
//<EXP> ADD St
    msExpDivision := '';
    msExpEmployee := '';
//<EXP> ADD Ed
    m_HojyoTree_Drag.HojyoTree := nil;
    m_HojyoTree_Drag.HojyoMA := nil;
    m_SrchHojyoMA := nil;
    m_iStartMode  := -1;

    m_bKojiLicense := IsExistLicense(MODULECODE_KOJI);	// <276> ADD
    mbSeikyuUse := false;  //<SEI> ADD

	fnParaFileRead(GETKBN_DISPLAYINFO);// <277> ADD m_APGFILEとは別のAPGファイル

    GetClientName(m_sComputerName);
//<EXP> MOD St
//    m_APGFILE := TJNTCRP018001APG.Create(rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot+'\ENV\JNT\'+m_sComputerName+'_'+'JNTCRP018001.APG');
    moApgCtrlEnv := APGFileController.Create(
        rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot +
        '\ENV\JNT\' + m_sComputerName + '_' + 'JNTCRP018001.APG');
    moApgCtrlJnt := APGFileController.Create(
        rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP018001.APG');
    moSections := SectionList.Create();
    // クライアント用
    moSections.Add(DlgInfoSection.Create(moApgCtrlEnv));
    moSections.Add(DefModeSection.Create(moApgCtrlEnv));
    // 共有サーバ用
    moSections.Add(ExpValueSection.Create(moApgCtrlJnt));
    moSections.Add(ConstractInfoSection.Create(moApgCtrlJnt));  //<ConInfo> ADD
//<EXP> MOD Ed
    B_SetUp.Hint         := '初回起動モードの設定';

    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        m_sProgramName := '工事登録';
//<EXP> DEL        m_DEFMODE := DSPTYPE_KOUJI;
//<EXP> DEL        m_DLG_INFO := INFO_KOUJI;
    end
    else
    begin
        m_sProgramName := 'プロジェクト登録';
//<EXP> DEL        m_DEFMODE := DSPTYPE_PROJECT;
//<EXP> DEL        m_DLG_INFO := INFO_PROJECT;
    end;
//<KSN> ADD Ed

    m_RepHandle	:= 0;                                               // 印刷モジュールハンドル <285> ADD

//<KSN4> ADD St
    chb_KasanUpdate.Left := Kasan_Parent_Panel.Left;    
    chb_KasanUpdate.Top  :=
        Kasan_Parent_Panel.Top + Kasan_Parent_Panel.Height + 10;
//<KSN4> ADD Ed
	Parent := TPanel(m_pMyAppRecord^.m_pOwnerPanel^);		// 親ﾊﾟﾈﾙをParent
	Align  := alClient; 							 		// 全領域を作成

	MjsColorChange(	TJNTCRP018001f ( Self ),
					ComArea.SystemArea.SysColorB,
					ComArea.SystemArea.SysColorD,
					ComArea.SystemArea.SysBaseColorB,
					ComArea.SystemArea.SysBaseColorD,
					rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysFocusColor	);

//  ↓2005/01/13 T.Shimada
//	MjsFontResize(TJNTCRP018001f( Self )	,Pointer(m_pMyAppRecord));
	m_Zoom := MjsFontResize(TJNTCRP018001f( Self )	,Pointer(m_pMyAppRecord));
//  MJSCompoResize(LVStyleBar, 0, Pointer(m_pMyAppRecord));
    LVStyleBar.ButtonHeight := LVStyleBar.Height;
    LVStyleBar.ButtonWidth := Trunc(LVStyleBar.ButtonWidth * m_Zoom / 100);
    LVStyleBar.Left := Trunc(LVStyleBar.Left * m_Zoom / 100);
//  ↑

	JNTMasAccelCharCancel(Self);

    fnSetFncType(false,0);      // <113>
    LblRecCnt.Caption := '';

    fnJNTFreeDlgLoad(m_pMyAppRecord );
    fnJNTFreeDlgInit(m_pMyAppRecord ,ComArea,@dbCorp_Select);

	// TMQuery 初期設定
	MDataModule^.SetDBInfoToQuery (dbCorp_Select, HojyoMA_DMQuery);
	MDataModule^.SetDBInfoToQuery (dbCorp_Select, KojiInfo_DMQuery);

	mjspreview := TMjsPreviewIF.Create;
	mjspreview.Init( m_pMyAppRecord );
//<TAX> ADD St
    moBusiness      := TBusinessObject.Create(m_pMyAppRecord, CTRL_DB, dbCorp_Select);
    moBusiness.Initialize();
    moKojiInfoMn    := TKojiInfoManager.Create(moBusiness);
    rdJTaxIn.Tag    := KBN_TAXIN;
    rdJTaxOut.Tag   := KBN_TAXOUT;
//<TAX> ADD Ed
    // 共通ｴｸｽﾌﾟﾛｰﾗの初期化
    uvExpOpenSW := false;
    if ( fnJNTExpInit(Self,m_pMyAppRecord) = 0 ) then
        uvExpOpenSW := true
    else
		MjsMessageBox(Self,'ｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10
					+ 'ｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);

    for i := 1 to  10 do
    begin
        TMLabel(MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm' + IntToStr(i))).Caption := '';
        TMLabel(MJSFindCtrl(Self, 'Jituzai_LLabel_BunNm' + IntToStr(i))).Caption := '';
    end;

    // ﾌﾟﾛｼﾞｪｸﾄ採用情報を取得する
	DMQuery := TMQuery.Create(Self);
	if ( Assigned(DMQuery) <> true ) then Exit;

   	MDataModule^.SetDBInfoToQuery ( dbCorp_Select, DMQuery );

    MasMonth := TJNTMasMonth.Init(DMQuery);  // <235> ADD

	try
        with DMQuery do
        begin
//<SEI> ADD St
            Close();
            SQL.Clear();
            SQL.Add(' select * From KbnInfo ');
            SQL.Add(' where RecKbn = :RecKbn');
            SetFld('RecKbn').AsInteger := RECKBN_SEIKYU;
            Open();

            while not Eof do
            begin
                case GetFld('RecKbn').AsInteger of
                    RECKBN_SEIKYU :
                    begin
                        mbSeikyuUse := GetFld('GnPuKbn22').AsInteger = 1;
                    end;
                end;
                Next();
            end;
//<SEI> ADD Ed
            Close();
            SQL.Clear();
            SQL.Add('select MasterKbn,CodeDigit,CodeAttr,JHojyoName,KojUseKbn ');
            SQL.Add('from MasterInfo                                          ');
            SQL.Add('where (MasterKBN between :pSMKBN and :pEMKBN)            ');

            // 工事登録
            if ( m_pMyAppRecord.m_sParameter = '1' ) then
                    SQL.Add('   and (KojUseKbn <> 0)    ')
            // ﾌﾟﾛｼﾞｪｸﾄ登録
            else
                    SQL.Add('   and (KojUseKbn = 0) and (UseKBN <> 0)   ');
//<255> MOD St
//            ParamByName('pSMKBN').AsFloat := MKBN_PROJECT1;
//            ParamByName('pEMKBN').AsFloat := MKBN_PROJECT10;
            ParamByName('pSMKBN').AsString := FormatFloat('0',MKBN_PROJECT1);
            ParamByName('pEMKBN').AsString := FormatFloat('0',MKBN_PROJECT10);
//<255> MOD Ed
            Open();

            i := 0;
            m_PLFlg           := false;     // PL型区分
            m_nMasterDivision := 0;         // 選択ﾏｽﾀ区分
            ECombo_Header.Items.Clear;

            while not Eof do
            begin
                // 工事管理種別(0:なし 1:B/S型 2:P/L型 3:P/L型[未成・完成区別なし])
                if ( FieldByName('KojUseKbn').asInteger = 2 ) then
                    m_PLFlg := true;

                m_arAdoptInfo [i].nMasterDivision := FieldByName('MasterKBN')   .AsInteger;     // ﾏｽﾀ区分
                m_arAdoptInfo [i].nCodeDigit      := FieldByName('CodeDigit')   .AsInteger;     // ｺｰﾄﾞ桁数
                m_arAdoptInfo [i].nCodeAttribute  := FieldByName('CodeAttr')    .AsInteger;     // ｺｰﾄﾞ属性
                m_arAdoptInfo [i].strDescription  := FieldByName('JHojyoName')  .AsString;      // 補助名称
                ECombo_Header.Items.Add(FieldByName('JHojyoName').AsString);
                inc(i);
                Next;
            end;

            // <178> - ST
            if ( i <> 0 ) then
                m_PrjUseFlg := true;
            // <178> - ED

            m_KanseiFlg := false;

            // 完成工事振替用ﾃﾞｰﾀの取得
            //（ﾌﾟﾛｼﾞｪｸﾄ・汎用補助・ｾｸﾞﾒﾝﾄで何も採用していない場合は、工事完成TABが開かない）
            Close();
            Sql.Clear();
            SQL.Add('select MasterKbn,JHojyoName from MasterInfo    ');
            SQL.Add('where ((MasterKBN Between :pSMKBN and :pEMKBN) ');
            SQL.Add('  and  (USEKBN <> 2) and (USEKBN <> 0))        ');
            SQL.Add('   or ((MasterKBN Between :pSMKBN and :pEMKBN) ');
            SQL.Add('  and  (USEKBN <> 0))                          ');
            SQL.Add('   or((MasterKBN Between :pSMKBN and :pEMKBN)  ');
            SQL.Add('  and  (USEKBN <> 0))                          ');
//<255> MOD St
{
            ParamByName('pSMKBN').AsFloat := MKBN_PROJECT1;     // ﾌﾟﾛｼﾞｪｸﾄ開始(201)
            ParamByName('pEMKBN').AsFloat := MKBN_PROJECT10;    // ﾌﾟﾛｼﾞｪｸﾄ終了(210)
            ParamByName('pSMKBN').AsFloat := MKBN_HHOJYO1;      // 汎用補助開始(31)
            ParamByName('pEMKBN').AsFloat := MKBN_HHOJYO5;      // 汎用補助終了(35)
            ParamByName('pSMKBN').AsFloat := MKBN_SEG1;         // ｾｸﾞﾒﾝﾄ開始(101)
            ParamByName('pEMKBN').AsFloat := MKBN_SEG10;        // ｾｸﾞﾒﾝﾄ終了(110)
}
            ParamByName('pSMKBN').AsString := FormatFloat('0',MKBN_PROJECT1);     // ﾌﾟﾛｼﾞｪｸﾄ開始(201)
            ParamByName('pEMKBN').AsString := FormatFloat('0',MKBN_PROJECT10);    // ﾌﾟﾛｼﾞｪｸﾄ終了(210)
            ParamByName('pSMKBN').AsString := FormatFloat('0',MKBN_HHOJYO1);      // 汎用補助開始(31)
            ParamByName('pEMKBN').AsString := FormatFloat('0',MKBN_HHOJYO5);      // 汎用補助終了(35)
            ParamByName('pSMKBN').AsString := FormatFloat('0',MKBN_SEG1);         // ｾｸﾞﾒﾝﾄ開始(101)
            ParamByName('pEMKBN').AsString := FormatFloat('0',MKBN_SEG10);        // ｾｸﾞﾒﾝﾄ終了(110)
//<255> MOD Ed
            Open();

            if not Eof then
                m_KanseiFlg := true;

            Close;

            for i := 1 to  10 do
            begin
                // ｾｸﾞﾒﾝﾄ
                m_arAdoptInfo_Seg [i].nMasterDivision	:= 0;
                m_arAdoptInfo_Seg [i].nAdoption      	:= 0;
                m_arAdoptInfo_Seg [i].nCodeDigit    	:= 0;
                m_arAdoptInfo_Seg [i].nCodeAttribute	:= 0;
                m_arAdoptInfo_Seg [i].strDescription	:= '';

                // ﾌﾟﾛｼﾞｪｸﾄ分類
                m_arAdoptInfo_PBr [i].nMasterDivision	:= 0;
                m_arAdoptInfo_PBr [i].nAdoption      	:= 0;
                m_arAdoptInfo_PBr [i].nCodeDigit    	:= 0;
                m_arAdoptInfo_PBr [i].nCodeAttribute	:= 0;
                m_arAdoptInfo_PBr [i].strDescription	:= '';
            end;

    		// ｾｸﾞﾒﾝﾄ情報
            i := 1;
            Close();
            Sql.Clear();
            SQL.Add('select MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr  ');
            SQL.Add('from MasterInfo                                            ');
            SQL.Add('where (MasterKBN Between :pSMKBN and :pEMKBN)              ');
            SQL.Add('order by MasterKBN                                         ');

            ParamByName('pSMKBN').AsInteger := MKBN_SEG1;
            ParamByName('pEMKBN').AsInteger := MKBN_SEG10;
            Open();

            while not eof do
            begin
                if i > 10 then Break;
                m_arAdoptInfo_Seg [i].nMasterDivision	:= FieldByName ('MasterKBN') .AsInteger;
                m_arAdoptInfo_Seg [i].nAdoption        	:= FieldByName ('UseKbn')    .AsInteger;
                m_arAdoptInfo_Seg [i].nCodeDigit		:= FieldByName ('CodeDigit') .AsInteger;
                m_arAdoptInfo_Seg [i].nCodeAttribute	:= FieldByName ('CodeAttr' ) .AsInteger;
                m_arAdoptInfo_Seg [i].strDescription	:= FieldByName ('JHojyoName').AsString;
                inc(i);
                Next;
            end;

            // ｾｸﾞﾒﾝﾄ名称
            for i := 1 to  10 do
            begin
                TMLabel(MJSFindCtrl  (Self, 'Jituzai_LLabel_SegTitl' + IntToStr(i))).Caption   := m_arAdoptInfo_Seg [i].strDescription;
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd'   + IntToStr(i))).MaxLength := m_arAdoptInfo_Seg [i].nCodeDigit;

                // 属性
                if ( m_arAdoptInfo_Seg [i].nCodeAttribute = 0 ) then
                begin
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputAttr := iaZeroSup;
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).ImeMode   := imDisable;
                end
                else if m_arAdoptInfo_Seg [i].nCodeAttribute = 1 then
                begin
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputAttr := iaZeroPad;
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).ImeMode   := imDisable;
                end
                else if m_arAdoptInfo_Seg [i].nCodeAttribute = 2 then
                begin
//<117>             TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputAttr := iaFree;
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputAttr := iaNone; //<117>
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).ImeMode   := imClose;
                end;
            end;

            // ﾌﾟﾛｼﾞｪｸﾄ分類情報
            i := 1;
            Close();
            Sql.Clear();
            SQL.Add('select MasterKbn, UseKbn, JHojyoName, CodeDigit, CodeAttr  ');
            SQL.Add('from MasterInfo                                            ');
            SQL.Add('where (MasterKBN Between :pSMKBN and :pEMKBN)              ');
            SQL.Add('order By MasterKBN                                         ');

            ParamByName('pSMKBN').AsInteger := MKBN_PROBN1;
            ParamByName('pEMKBN').AsInteger := MKBN_PROBN10;
            Open();

            while not eof do
            begin
                if i > 10 then Break;
                m_arAdoptInfo_PBr [i].nMasterDivision	:= FieldByName ('MasterKBN') .AsInteger;
                m_arAdoptInfo_PBr [i].nAdoption			:= FieldByName ('UseKbn')    .AsInteger;
                m_arAdoptInfo_PBr [i].nCodeDigit		:= FieldByName ('CodeDigit') .AsInteger;
                m_arAdoptInfo_PBr [i].nCodeAttribute	:= FieldByName ('CodeAttr')  .AsInteger;
                m_arAdoptInfo_PBr [i].strDescription	:= FieldByName ('JHojyoName').AsString;
                inc(i);
                Next;
            end;

            // ﾌﾟﾛｼﾞｪｸﾄ分類名称
            for i := 1 to  10 do
            begin
                TMLabel(MJSFindCtrl(Self, 'Jituzai_LLabel_BunTitl' + IntToStr(i))).Caption := m_arAdoptInfo_PBr [i].strDescription;

                // 属性
                if m_arAdoptInfo_PBr [i].nCodeAttribute = 0 then
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).InputAttr := iaZeroSup
                else if m_arAdoptInfo_PBr [i].nCodeAttribute = 1 then
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).InputAttr := iaZeroPad
                else if m_arAdoptInfo_PBr [i].nCodeAttribute = 2 then
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).InputAttr := iaFree;

                // 桁数
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).MaxLength := m_arAdoptInfo_PBr [i].nCodeDigit;
                if m_arAdoptInfo_PBr [i].nAdoption = 0 then
                begin
                    TMLabel(MJSFindCtrl  (Self, 'Jituzai_LLabel_BunTitl' + IntToStr(i))).Visible := false;
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd'   + IntToStr(i))).Visible := false;
                    TMLabel(MJSFindCtrl  (Self, 'Jituzai_LLabel_BunNm'   + IntToStr(i))).Visible := false;
                end
                else
                begin
                    TMLabel(MJSFindCtrl  (Self, 'Jituzai_LLabel_BunTitl' + IntToStr(i))).visible := true;
                    TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd'   + IntToStr(i))).Visible := true;
                    TMLabel(MJSFindCtrl  (Self, 'Jituzai_LLabel_BunNm'   + IntToStr(i))).Visible := true;
                end;
            end;

            //<217> ADD St
            m_iSecUseKbn := 0;
            Close();
            Sql.Clear();
            SQL.Add('select UseKbn from SecMain where OpeKbn=1 ');
            Open;
            if not Eof then
                m_iSecUseKbn := FieldByName('UseKbn').AsInteger;
            B_GrpSec.Visible := (m_iSecUseKbn = 1);
            //<217> ADD Ed

            // 工事用のｺﾝﾄﾛｰﾙを非表示にする
            Jituzai_PMTab.Items[1].Visible      := false;
            Goukei_PMTab .Items[1].Visible      := false;
            Jituzai_PMTab.Items[2].Visible      := false;
            Goukei_PMTab .Items[2].Visible      := false;
            Jituzai_PMTab.Items[PAGE_SEIKYU].Visible      	:= false;	// <SEI> ADD
            Goukei_PMTab .Items[PAGE_GOUKEI_SEIKYU].Visible := false;	// <SEI> ADD
            Jituzai_ChkBox_Tokusyu.Visible      := false;   // 特殊ﾌﾟﾛｼﾞｪｸﾄ
            Jituzai_LLabel_PersonCode.Visible   := false;   // 担当者(実在)
            Jituzai_ENEdit_PersonCode.Visible   := false;
            Jituzai_ETEdit_PersonCode.Visible   := false;
            Jituzai_LLabel_PersonName.Visible   := false;
            Goukei_LLabel_PersonCode.Visible    := false;   // 担当者(合計)
            Goukei_ENEdit_PersonCode.Visible    := false;
            Goukei_ETEdit_PersonCode.Visible    := false;
            Goukei_LLabel_PersonName.Visible    := false;
            Jituzai_LLabel_CostomerCode.Visible := false;   // 受注先(実在)
            Jituzai_ENEdit_CustomerCode.Visible := false;
            Jituzai_ETEdit_CustomerCode.Visible := false;
            Jituzai_LLabel_CustomerName.Visible := false;
            Jituzai_ETEdit_CustomerName.Visible := false;   // <144>
            Goukei_LLabel_CostomerCode.Visible  := false;   // 受注先(合計)
            Goukei_ENEdit_CustomerCode.Visible  := false;
            Goukei_ETEdit_CustomerCode.Visible  := false;
            Goukei_LLabel_CustomerName.Visible  := false;
            Goukei_ETEdit_CustomerName.Visible  := false;    // <144>
// <205> ADD start
// <212> MOD start
//            Goukei_PMTab .Items[3].Visible      := false;
//<SEI> ADD            Goukei_PMTab .Items[4].Visible      := false;
            Goukei_PMTab .Items[PAGE_GOUKEI_BIKOU].Visible  := false;  //<SEI> ADD
// <212> MOD end
// <SEI> ADD start
            Jituzai_LLabel_SeikyusakiCd.Visible	:= false;	// 請求先(実在)
            Jituzai_ETEdit_SeikyusakiCd.Visible := false;
            Jituzai_ENEdit_SeikyusakiCd.Visible := false;
            Jituzai_LLabel_SeikyusakiNm.Visible := false;
            Goukei_LLabel_SeikyusakiCd.Visible  := false;	// 請求先(合計)
            Goukei_ENEdit_SeikyusakiCd.Visible  := false;
            Goukei_ETEdit_SeikyusakiCd.Visible  := false;
            Goukei_LLabel_SeikyusakiNm.Visible  := false;

            Jituzai_LLabel_SeikyuKoujiCd.Visible:= false;	// 一括請求先工事(実在)
            Jituzai_ETEdit_SeikyuKoujiCd.Visible:= false;
            Jituzai_ENEdit_SeikyuKoujiCd.Visible:= false;
            Jituzai_LLabel_SeikyuKoujiNm.Visible:= false;
            Goukei_LLabel_SeikyuKoujiCd.Visible := false;	// 一括請求先工事(合計)
            Goukei_ENEdit_SeikyuKoujiCd.Visible := false;
            Goukei_ETEdit_SeikyuKoujiCd.Visible := false;
            Goukei_LLabel_SeikyuKoujiNm.Visible := false;
// <SEI> ADD end
            Jituzai_LLabel_SeshuCode.Visible    := false;    // 施主(実在)
            Jituzai_ETEdit_SeshuCode.Visible    := false;
            Jituzai_ENEdit_SeshuCode.Visible    := false;
            Jituzai_LLabel_SeshuName.Visible    := false;
            Goukei_LLabel_SeshuCode.Visible     := false;    // 施主(合計)
            Goukei_ENEdit_SeshuCode.Visible     := false;
            Goukei_ETEdit_SeshuCode.Visible     := false;
            Goukei_LLabel_SeshuName.Visible     := false;

            Jituzai_LLabel_UkeoiCode.Visible    := false;   // 請負区分(実在)
            Jituzai_ENEdit_UkeoiKbn.Visible     := false;
            Jituzai_LLabel_UkeoiKbnDsp.Visible  := false;
            Goukei_LLabel_UkeoiKbn.Visible      := false;   // 請負区分(合計)
            Goukei_ENEdit_UkeoiKbn.Visible      := false;
            Goukei_LLabel_UkeoiKbnDsp.Visible   := false;

            Jituzai_LLabel_SekouBmnCode.Visible := false;   // 施行部門(実在)
            Jituzai_ENEdit_SekouBmnCode.Visible := false;
            Jituzai_ETEdit_SekouBmnCode.Visible := false;
            Jituzai_LLabel_SekouBmnName.Visible := false;
            Goukei_LLabel_SekouBmnCode.Visible  := false;    // 施行部門(合計)
            Goukei_ENEdit_SekouBmnCode.Visible  := false;
            Goukei_ETEdit_SekouBmnCode.Visible  := false;
            Goukei_LLabel_SekouBmnName.Visible  := false;

            Jituzai_LLabel_SekouPersonCode.Visible  := false;   // 施行担当者(実在)
            Jituzai_ETEdit_SekouPersonCode.Visible  := false;
            Jituzai_ENEdit_SekouPersonCode.Visible  := false;
            Jituzai_LLabel_SekouPersonName.Visible  := false;
            Goukei_LLabel_SekouPersonCode.Visible   := false;   // 施行担当者(合計)
            Goukei_ETEdit_SekouPersonCode.Visible   := false;
            Goukei_ENEdit_SekouPersonCode.Visible   := false;
            Goukei_LLabel_SekouPersonName.Visible   := false;

            MLabel38.Visible                        := false;   //実在概要
            Jituzai_ETEdit_Gaiyou.Visible           := false;
//<SEI> DEL            Jituzai_PMTab.Items[5].Caption      := '備考';
            Jituzai_PMTab.Items[PAGE_BIKOU].Caption := '備考';  //<SEI> ADD
// <205> ADD end

// <209> ADD start
// <222> DEL start
//            MLabel54.Top                        := 5;
//            Jituzai_ETEdit_BIKO.Top             := 25;
// <222> DEL end
// <209> ADD end

            // 初期ﾌｫｰｶｽの設定
            PPanel_ECombo.Enabled := true;
            m_AcControl := ECombo_Header;
            ECombo_Header.ItemIndex := 0;

            // 工事の時
            if ( m_pMyAppRecord.m_sParameter = '1' ) then
            begin
                Close();
                Sql.Clear();
// <211> MOD start
//                SQL.Add('select KojUseKbn,UseKBN,MstrKbn4 from MasterInfo ');
// <235> MOD start
//                SQL.Add('select KojUseKbn,UseKBN,MstrKbn4,KojKbn2 from MasterInfo ');
// <291> MOD st
                //収益認識基準対応。クエリに「収益認識基準(MstrKbn20)」を追加
//                SQL.Add('select KojUseKbn, UseKBN, MstrKbn4, KojKbn1, KojKbn2 from MasterInfo ');
// <292> MOD st
                //クエリに「契約情報税率登録区分(MstrKbn12)」を追加
//                SQL.Add('select KojUseKbn, UseKBN, MstrKbn4, MstrKbn20, KojKbn1, KojKbn2 from MasterInfo ');
                SQL.Add('select KojUseKbn, UseKBN, MstrKbn4, MstrKbn12, MstrKbn20, KojKbn1, KojKbn2 from MasterInfo ');
// <292> MOD ED
// <291> MOD ed
// <235> MOD end
// <211> MOD start
                SQL.Add('where (MasterKBN Between :pSMKBN and :pEMKBN)    ');
                SQL.Add('  and (KojUseKbn <> 0)                           ');

                ParamByName('pSMKBN').AsInteger := MKBN_PROJECT1;
                ParamByName('pEMKBN').AsInteger := MKBN_PROJECT10;
                Open();

                if not Eof then
                begin
                    Jituzai_PMTab.Items[1].Visible      := true;
                    Goukei_PMTab. Items[1].Visible      := true;
                    Jituzai_ChkBox_Tokusyu.Visible      := true;    // 特殊ﾌﾟﾛｼﾞｪｸﾄ
                    Jituzai_LLabel_PersonCode.Visible   := true;    // 担当者(実在)
                    Jituzai_ENEdit_PersonCode.Visible   := true;
                    Jituzai_ETEdit_PersonCode.Visible   := true;
                    Jituzai_LLabel_PersonName.Visible   := true;
                    Goukei_LLabel_PersonCode.Visible    := true;    // 担当者(合計)
                    Goukei_ENEdit_PersonCode.Visible    := true;
                    Goukei_ETEdit_PersonCode.Visible    := true;
                    Goukei_LLabel_PersonName.Visible    := true;
                    Jituzai_LLabel_CostomerCode.Visible := true;    // 受注先(実在)
                    Jituzai_ENEdit_CustomerCode.Visible := true;
                    Jituzai_ETEdit_CustomerCode.Visible := true;
                    Jituzai_LLabel_CustomerName.Visible := true;
                    Jituzai_ETEdit_CustomerName.Visible := true;    // <144>
                    Goukei_LLabel_CostomerCode.Visible  := true;    // 受注先(合計)
                    Goukei_ENEdit_CustomerCode.Visible  := true;
                    Goukei_ETEdit_CustomerCode.Visible  := true;
                    Goukei_LLabel_CustomerName.Visible  := true;
                    Goukei_ETEdit_CustomerName.Visible  := true;    // <144>

// <205> ADD Start
// <212> MOD start
//                    Goukei_PMTab .Items[3].Visible      := true;
//<SEI> DEL                    Goukei_PMTab .Items[4].Visible      := true;
                    Goukei_PMTab .Items[PAGE_GOUKEI_BIKOU].Visible  := true;  //<SEI> ADD
// <SEI> ADD start
		            Jituzai_LLabel_SeikyusakiCd.Visible	:= true;	// 請求先(実在)
		            Jituzai_ETEdit_SeikyusakiCd.Visible := true;
		            Jituzai_ENEdit_SeikyusakiCd.Visible := true;
		            Jituzai_LLabel_SeikyusakiNm.Visible := true;
		            Goukei_LLabel_SeikyusakiCd.Visible  := true;	// 請求先(合計)
		            Goukei_ENEdit_SeikyusakiCd.Visible  := true;
		            Goukei_ETEdit_SeikyusakiCd.Visible  := true;
		            Goukei_LLabel_SeikyusakiNm.Visible  := true;

		            Jituzai_LLabel_SeikyuKoujiCd.Visible:= false;	// 一括請求先工事(実在)
		            Jituzai_ETEdit_SeikyuKoujiCd.Visible:= false;
		            Jituzai_ENEdit_SeikyuKoujiCd.Visible:= false;
		            Jituzai_LLabel_SeikyuKoujiNm.Visible:= false;

		            Goukei_LLabel_SeikyuKoujiCd.Visible := false;	// 一括請求先工事(合計)
		            Goukei_ENEdit_SeikyuKoujiCd.Visible := false;
		            Goukei_ETEdit_SeikyuKoujiCd.Visible := false;
		            Goukei_LLabel_SeikyuKoujiNm.Visible := false;
// <SEI> ADD end
// <212> MOD end
// <272> ADD START
// <276> MOD st					if IsExistLicense(MODULECODE_KOJI) then
// <277> MOD st					if (m_bKojiLicense) then	// <276> MOD ed
					if ( (m_bNoControlSesyu = False) and (m_bKojiLicense) ) or
                       (m_bNoControlSesyu = True) then	// <277> MOD ed
                    begin
// <272> ADD END
                        Jituzai_LLabel_SeshuCode.Visible    := true;    // 施主(実在)
                        Jituzai_ETEdit_SeshuCode.Visible    := true;
                        Jituzai_ETEdit_SeshuCode.Enabled    := true;	// <276> ADD
                        Jituzai_ENEdit_SeshuCode.Visible    := true;
                        Jituzai_ENEdit_SeshuCode.Enabled 	:= true;    // <276> ADD
                        Jituzai_LLabel_SeshuName.Visible    := true;
                        Goukei_LLabel_SeshuCode.Visible     := true;    // 施主(合計)
                        Goukei_ENEdit_SeshuCode.Visible     := true;
                        Goukei_ENEdit_SeshuCode.Enabled	    := true;    // <276> ADD
                        Goukei_ETEdit_SeshuCode.Visible     := true;
                        Goukei_ETEdit_SeshuCode.Enabled	    := true;    // <276> ADD
                        Goukei_LLabel_SeshuName.Visible     := true;
// <272> ADD START
                    end
                    else
                    begin
                        Jituzai_PPanel_Move.Top := Jituzai_PPanel_Move.Top - TOPDISTANCE_1KBN;
                        Goukei_PPanel_Move.Top	:= Goukei_PPanel_Move.Top - TOPDISTANCE_1KBN;
// <276> ADD st
                        Jituzai_ETEdit_SeshuCode.Enabled	:= False;
                        Jituzai_ENEdit_SeshuCode.Enabled	:= False;
                        Goukei_ENEdit_SeshuCode.Enabled		:= False;
                        Goukei_ETEdit_SeshuCode.Enabled		:= False;
// <276> ADD ed
                    end;
// <272> ADD END
                    Jituzai_LLabel_UkeoiCode.Visible    := true;    // 請負区分(実在)
                    Jituzai_ENEdit_UkeoiKbn.Visible     := true;
                    Jituzai_LLabel_UkeoiKbnDsp.Visible  := true;
                    Goukei_LLabel_UkeoiKbn.Visible      := true;   // 請負区分(合計)
                    Goukei_ENEdit_UkeoiKbn.Visible      := true;
                    Goukei_LLabel_UkeoiKbnDsp.Visible   := true;
                    Jituzai_LLabel_SekouPersonCode.Visible  := true;   // 施行担当者(実在)
                    Jituzai_ETEdit_SekouPersonCode.Visible  := true;
                    Jituzai_ENEdit_SekouPersonCode.Visible  := true;
                    Jituzai_LLabel_SekouPersonName.Visible  := true;
                    Goukei_LLabel_SekouPersonCode.Visible   := true;   // 施行担当者(合計)
                    Goukei_ETEdit_SekouPersonCode.Visible   := true;
                    Goukei_ENEdit_SekouPersonCode.Visible   := true;
                    Goukei_LLabel_SekouPersonName.Visible   := true;
                    Jituzai_LLabel_SekouBmnCode.Visible := true;   // 施行部門(実在)
                    Jituzai_ENEdit_SekouBmnCode.Visible := true;
                    Jituzai_ETEdit_SekouBmnCode.Visible := true;
                    Jituzai_LLabel_SekouBmnName.Visible := true;
                    Goukei_LLabel_SekouBmnCode.Visible  := true;    // 施行部門(合計)
                    Goukei_ENEdit_SekouBmnCode.Visible  := true;
                    Goukei_ETEdit_SekouBmnCode.Visible  := true;
                    Goukei_LLabel_SekouBmnName.Visible  := true;
                    MLabel38.Visible                    := true;   //実在概要
                    Jituzai_ETEdit_Gaiyou.Visible       := true;
// <209> MOD start
//                    Jituzai_PMTab.Items[4].Caption      := '備考・概要';
//<SEI> DEL                    Jituzai_PMTab.Items[5].Caption      := '概要・備考';
                    Jituzai_PMTab.Items[PAGE_BIKOU].Caption := '概要・備考';  //<SEI> ADD
                    MLabel54.Top                        := 158;
                    Jituzai_ETEdit_BIKO.Top             := 181;
// <209> MOD end

// <205> ADD End

                    // 工事管理種別=1:B/S型の場合
                    if ( FieldByname('KojUseKbn').asInteger = 1 ) then
                    begin
                        Jituzai_PMTab.Items[2].Visible := true;
                        Goukei_PMTab. Items[2].Visible := true;
                        Goukei_PMTab. Items[3].Visible := true; // <220> ADD
                    end
                    else
                    begin
                        Jituzai_PMTab.Items[2].Visible := false;
                        Goukei_PMTab. Items[2].Visible := false;
                        Goukei_PMTab. Items[3].Visible := false; // <220> ADD
                    end;

// <SEI> ADD start
					if IsSeikyuYoteiUse() then	// 請求予定採用あり
                    begin
	                    Jituzai_PMTab.Items[PAGE_SEIKYU].Visible      	:= true;
    	                Goukei_PMTab. Items[PAGE_GOUKEI_SEIKYU].Visible := true;
	                    Jituzai_PMTab.Items[PAGE_NYUKIN].Visible      	:= false;
    	                Goukei_PMTab. Items[PAGE_GOUKEI_NYUKIN].Visible := false;
                    end;
// <SEI> ADD end
					Jituzai_ENEdit_SalesBase.SelectItems.Clear;
                    Jituzai_ENEdit_SalesBase.SelectItems.Append(IntToStr(0) + ':工事完成基準');
					Jituzai_ENEdit_SalesBase.MaxValue := 0;						// <291> Add
                    if (FieldByname('MstrKbn4').asInteger = 1) then
                    begin
                        Jituzai_ENEdit_SalesBase.SelectItems.Append(IntToStr(1) + ':工事進行基準');
						Jituzai_ENEdit_SalesBase.MaxValue := 1;                 // <291> Add
                    end;
// <291> ADD st
                    if (FieldByname('MstrKbn20').asInteger = 1) then
                    begin
                        Jituzai_ENEdit_SalesBase.SelectItems.Append(IntToStr(2) + ':原価回収基準');
						Jituzai_ENEdit_SalesBase.MaxValue := 2;
                    end;
// <291> ADD ed
                    // 工事進行基準採用区分(0.採用なし、1.採用あり) <167>
                    Jituzai_ENEdit_SalesBase.value      := 0;
                    fnSetLabel(Jituzai_ENEdit_SalesBase);
                    (*
                    Jituzai_LLabel_SalesBase.Visible    := false;
                    Jituzai_ENEdit_SalesBase.Visible    := false;
                    Jituzai_LLabel_SalesBaseDsp.Visible := false;
                    *) // V108で復活<169>
// <291> MOD st
                    // 工事進行基準採用区分=1:ありの場合 or 収益認識基準採用区分=1:ありの場合　
//                    if ( FieldByname('MstrKbn4').asInteger  = 1 ) then
                    if ( FieldByname('MstrKbn4').asInteger  = 1 ) or ( FieldByname('MstrKbn20').asInteger  = 1 ) then
// <291> MOD ed
                    begin
//                        Jituzai_LLabel_SalesBase.Enabled    := true;	// <195> DEL
                        Jituzai_ENEdit_SalesBase.Enabled    := true;
//                        Jituzai_LLabel_SalesBaseDsp.Enabled := true;	// <195> DEL
                    end
                    else
                    begin
                        Jituzai_ENEdit_SalesBase.value      := 0;
                        fnSetLabel(Jituzai_ENEdit_SalesBase);

//                        Jituzai_LLabel_SalesBase.Enabled    := false;	// <195> DEL
                        Jituzai_ENEdit_SalesBase.Enabled    := false;
//                        Jituzai_LLabel_SalesBaseDsp.Enabled := false; // <195> DEL
                    end;

// <211> ADD start
                    // 売上高自動振替区分
                    if ( FieldByname('KojKbn2').asInteger  = 1 ) then
                    begin
                        Jituzai_ENEdit_KojKbn2.value        := 0;
                        fnSetLabel(Jituzai_ENEdit_KojKbn2);
                        Jituzai_ENEdit_KojKbn2.Enabled      := true;
                    end
                    else
                    begin
                        Jituzai_ENEdit_KojKbn2.value        := 0;
                        fnSetLabel(Jituzai_ENEdit_KojKbn2);
                        Jituzai_ENEdit_KojKbn2.Enabled      := false;
                    end;
                    m_KojKbn        := FieldByname('KojKbn2').asInteger;    // <219> ADD
// <211> ADD end
                    m_MstrKbn4      := FieldByname('MstrKbn4').asInteger;   // <225> ADD
                    m_KojHurikaeKbn := FieldByname('KojKbn1').asInteger;    // <235> ADD
                    m_MstrKbn20     := FieldByname('MstrKbn20').asInteger;	// <291> ADD
                    m_MstrKbn12		:= FieldByname('MstrKbn12').asInteger;	// <292> ADD 契約情報税率登録区分
                end;

                (*
                // ｺﾝﾎﾞを使用不可、ｸﾞﾘｯﾄﾞへﾌｫｰｶｽをｾｯﾄ
                PPanel_ECombo.Enabled := false;
                m_AcControl := Jituzai_DdxDBGrid;
                Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
                *) // <120>
            end
            //<157> - ST
			// ﾌﾟﾛｼﾞｪｸﾄの時
			else
            begin
				Goukei_PMTab. Items[2].Visible := true;
// <222> ADD start
                // プロジェクト基本情報の設定
                Jituzai_LLabel_PersonCode.Visible       := true;    // 担当者(実在)
                Jituzai_ENEdit_PersonCode.Visible       := true;
                Jituzai_ETEdit_PersonCode.Visible       := true;
                Jituzai_LLabel_PersonName.Visible       := true;
                Goukei_LLabel_PersonCode.Visible        := true;    // 担当者(合計)
                Goukei_ENEdit_PersonCode.Visible        := true;
                Goukei_ETEdit_PersonCode.Visible        := true;
                Goukei_LLabel_PersonName.Visible        := true;
                Jituzai_LLabel_CostomerCode.Visible     := true;    // 受注先(実在)
                Jituzai_ENEdit_CustomerCode.Visible     := true;
                Jituzai_ETEdit_CustomerCode.Visible     := true;
                Jituzai_LLabel_CustomerName.Visible     := true;
                Jituzai_ETEdit_CustomerName.Visible     := true;
                Goukei_LLabel_CostomerCode.Visible      := true;    // 受注先(合計)
                Goukei_ENEdit_CustomerCode.Visible      := true;
                Goukei_ETEdit_CustomerCode.Visible      := true;
                Goukei_LLabel_CustomerName.Visible      := true;
                Goukei_ETEdit_CustomerName.Visible      := true;
//<SEI> DEL                Goukei_PMTab .Items[4].Visible      := true;
                Goukei_PMTab .Items[PAGE_GOUKEI_BIKOU].Visible  := true;  //<SEI> ADD
// <272> ADD START
// <276> MOD st				if IsExistLicense(MODULECODE_KOJI) then
// <277> MOD st				if (m_bKojiLicense) then	// <276> MOD ed
                if ( (m_bNoControlSesyu = False) and (m_bKojiLicense) ) or
                   (m_bNoControlSesyu = True) then	// <277> MOD ed
                begin
// <272> ADD END
                    Jituzai_LLabel_SeshuCode.Visible        := true;    // 施主(実在)
                    Jituzai_ETEdit_SeshuCode.Visible        := true;
                    Jituzai_ETEdit_SeshuCode.Enabled        := true;    // <276> ADD
                    Jituzai_ENEdit_SeshuCode.Visible        := true;
                    Jituzai_ENEdit_SeshuCode.Enabled        := true;    // <276> ADD
                    Jituzai_LLabel_SeshuName.Visible        := true;
                    Goukei_LLabel_SeshuCode.Visible         := true;    // 施主(合計)
                    Goukei_ENEdit_SeshuCode.Visible         := true;
                    Goukei_ENEdit_SeshuCode.Enabled         := true;    // <276> ADD
                    Goukei_ETEdit_SeshuCode.Visible         := true;
                    Goukei_ETEdit_SeshuCode.Enabled         := true;    // <276> ADD
                    Goukei_LLabel_SeshuName.Visible         := true;
// <272> ADD START
				end
                else
                begin
                	Jituzai_PPanel_Move.Top := Jituzai_PPanel_Move.Top - TOPDISTANCE_1KBN;
                    Goukei_PPanel_Move.Top	:= Goukei_PPanel_Move.Top - TOPDISTANCE_1KBN;
// <276> ADD st
                    Jituzai_ETEdit_SeshuCode.Enabled        := False;
                    Jituzai_ENEdit_SeshuCode.Enabled        := False;
                    Goukei_ENEdit_SeshuCode.Enabled         := False;
                    Goukei_ETEdit_SeshuCode.Enabled         := False;
// <276> ADD ed
                end;
// <272> ADD END
                Jituzai_LLabel_UkeoiCode.Visible        := true;    // 請負区分(実在)
                Jituzai_ENEdit_UkeoiKbn.Visible         := true;
                Jituzai_LLabel_UkeoiKbnDsp.Visible      := true;
                Goukei_LLabel_UkeoiKbn.Visible          := true;   // 請負区分(合計)
                Goukei_ENEdit_UkeoiKbn.Visible          := true;
                Goukei_LLabel_UkeoiKbnDsp.Visible       := true;
                Jituzai_LLabel_SekouPersonCode.Visible  := true;   // 施行担当者(実在)
                Jituzai_LLabel_SekouPersonCode.Caption  := '製造担当者';
                Jituzai_ETEdit_SekouPersonCode.Visible  := true;
                Jituzai_ENEdit_SekouPersonCode.Visible  := true;
                Jituzai_LLabel_SekouPersonName.Visible  := true;
                Goukei_LLabel_SekouPersonCode.Visible   := true;   // 施行担当者(合計)
                Goukei_LLabel_SekouPersonCode.Caption   := '製造担当者';
                Goukei_ETEdit_SekouPersonCode.Visible   := true;
                Goukei_ENEdit_SekouPersonCode.Visible   := true;
                Goukei_LLabel_SekouPersonName.Visible   := true;
                Jituzai_LLabel_SekouBmnCode.Visible     := true;   // 施行部門(実在)
                Jituzai_LLabel_SekouBmnCode.Caption     := '製造部門';
                Jituzai_ENEdit_SekouBmnCode.Visible     := true;
                Jituzai_ETEdit_SekouBmnCode.Visible     := true;
                Jituzai_LLabel_SekouBmnName.Visible     := true;
                Goukei_LLabel_SekouBmnCode.Visible      := true;    // 施行部門(合計)
                Goukei_LLabel_SekouBmnCode.Caption      := '製造部門';
                Goukei_ENEdit_SekouBmnCode.Visible      := true;
                Goukei_ETEdit_SekouBmnCode.Visible      := true;
                Goukei_LLabel_SekouBmnName.Visible      := true;
                MLabel38.Visible                        := true;   //実在概要
                MLabel38.Caption                        :='概要';
                MLabel43.Caption                        :='概要';
                Jituzai_ETEdit_Gaiyou.Visible           := true;
//<SEI> DEL                Jituzai_PMTab.Items[5].Caption          := '概要・備考';
                Jituzai_PMTab.Items[PAGE_BIKOU].Caption := '概要・備考';  //<SEI> ADD
//                MLabel54.Top                        := 158;
//                Jituzai_ETEdit_BIKO.Top             := 181;

                Jituzai_PMTab.Items[1].Visible      := true;
                Jituzai_PMTab.Items[1].Caption      := 'プロジェクト';
                Goukei_PMTab .Items[1].Visible      := true;
                Goukei_PMTab .Items[1].Caption      := 'プロジェクト';

                //<273> St
                {// 実在プロジェクトタブ項目非表示
                Jituzai_LLabel_DetailKbn1.Visible       := false;
                Jituzai_ENEdit_DetailKbn1.Visible       := false;
                Jituzai_LLabel_DetailKbn1Dsp.Visible    := false;
                MLabel25.Visible                        := false;
                Jituzai_ENEdit_KojKbn2.Visible          := false;
                Jituzai_LLabel_KojKbn2Dsp.Visible       := false;
                Jituzai_LLabel_SalesKmkCd.Visible       := false;
                Jituzai_ENEdit_SalesKmkCd.Visible       := false;
                Jituzai_LLabel_SalesKmkCdDsp.Visible    := false;
                Jituzai_LLabel_DetailKbn2.Visible       := false;
                Jituzai_ENEdit_DetailKbn2.Visible       := false;
                Jituzai_LLabel_DetailKbn2Dsp.Visible    := false;
                Jituzai_LLabel_SalesBase.Visible        := false;
                Jituzai_ENEdit_SalesBase.Visible        := false;
                Jituzai_LLabel_SalesBaseDsp.Visible     := false;}

                // Gali2 ﾌﾟﾛｼﾞｪｸﾄの場合は完成振替対応　旧Gali従来通りに動作
                if TMSeries.IsGalielopt2 then
                begin
                    //完成振替パターン
                    Jituzai_LLabel_DetailKbn1.Visible       := true;
                    Jituzai_ENEdit_DetailKbn1.Visible       := true;
                    Jituzai_LLabel_DetailKbn1Dsp.Visible    := true;
                    //売上高自動振替区分
                    MLabel25.Visible                        := true;
                    Jituzai_ENEdit_KojKbn2.Visible          := true;
                    Jituzai_LLabel_KojKbn2Dsp.Visible       := true;
                    //売上計上科目コード
                    Jituzai_LLabel_SalesKmkCd.Visible       := true;
                    Jituzai_ENEdit_SalesKmkCd.Visible       := true;
                    Jituzai_LLabel_SalesKmkCdDsp.Visible    := true;
                    //完成売上高相手勘定区分
                    Jituzai_LLabel_DetailKbn2.Visible       := true;
                    Jituzai_ENEdit_DetailKbn2.Visible       := true;
                    Jituzai_LLabel_DetailKbn2Dsp.Visible    := true;
                    //売上計上基準
                    Jituzai_LLabel_SalesBase.Visible        := true;
                    Jituzai_ENEdit_SalesBase.Visible        := true;
                    Jituzai_LLabel_SalesBaseDsp.Visible     := true;
                    //Gali2の場合、プロジェクト完成振替タブ表示
                    Jituzai_PMTab.Items[2].Visible          := true;
                    Jituzai_PMTab.Items[2].Caption          := 'プロジェクト完成振替';
                end
                else
                begin
                    //完成振替パターン
                    Jituzai_LLabel_DetailKbn1.Visible       := false;
                    Jituzai_ENEdit_DetailKbn1.Visible       := false;
                    Jituzai_LLabel_DetailKbn1Dsp.Visible    := false;
                    //売上高自動振替区分
                    MLabel25.Visible                        := false;
                    Jituzai_ENEdit_KojKbn2.Visible          := false;
                    Jituzai_LLabel_KojKbn2Dsp.Visible       := false;
                    //売上計上科目コード
                    Jituzai_LLabel_SalesKmkCd.Visible       := false;
                    Jituzai_ENEdit_SalesKmkCd.Visible       := false;
                    Jituzai_LLabel_SalesKmkCdDsp.Visible    := false;
                    //完成売上高相手勘定区分
                    Jituzai_LLabel_DetailKbn2.Visible       := false;
                    Jituzai_ENEdit_DetailKbn2.Visible       := false;
                    Jituzai_LLabel_DetailKbn2Dsp.Visible    := false;
                    //売上計上基準
                    Jituzai_LLabel_SalesBase.Visible        := false;
                    Jituzai_ENEdit_SalesBase.Visible        := false;
                    Jituzai_LLabel_SalesBaseDsp.Visible     := false;
                    //Gali2の場合、プロジェクト完成振替タブ表示
                    Jituzai_PMTab.Items[2].Visible          := false;
                    Jituzai_PMTab.Items[2].Caption          := 'プロジェクト完成振替';
                end;
                //<273> -Ed
//<TAX> ADD St
                // プロジェクト時の契約情報の制御
                if not TMSeries.IsGalielopt2 then
                begin
                    pnlJTax.Visible := false;
                end;
//<TAX> ADD Ed
// <222> ADD end
            end;
            //<157> - ED
        end;

	finally
		DMQuery.Close;
		DMQuery.Free;
	end;


    // <120> - ST
    m_SyokuchiFlg                := false;
    Jituzai_PPanel_Grid .Enabled := false;
    Goukei_PPanel_Grid  .Enabled := false;
    Jituzai_PPanel_Card .Enabled := false;
    Goukei_PPanel_Card  .Enabled := false;
    Root_PMTab          .Enabled := true;
    BSpeedButtonIS      .Enabled := false;
    BSpeedButtonPrn     .Enabled := false;
    BSpeedButtonDel     .Enabled := false;
    BSpeedButtonSort    .Enabled := false;
    BSpeedButtonFind    .Enabled := false;
    // <120> - ED
    // <174> - ST
    btnFusenCtl         .Enabled := false;
	LVStyleBar          .Enabled := false;
    // <174> - ED
	// <217> - ST
	B_GrpSec            .Enabled := false;
	// <217> - ED

    // 権限のﾎﾞﾀﾝの制御<101>
    BSpeedButtonPrn.enabled := m_cJNTArea.IsPrint;
//<PRN2>    BSpeedButtonPrn.enabled := false;

    // MJSCOMMON.DBへの接続<118>
    mqCmnDB     :=  TMQuery.Create ( Self );
    MDataModule.SetDBInfoToQuery ( CTRL_DB, mqCmnDB );

    // <PRN> -----------Add↓-----------------
    for i := 0 to 100 do
        ArrHdl[i] := nil;

    // MQueryの構築
    DmqPrint    :=  TMQuery.Create (self);
    // DBとMQueryの接続
    MDataModule^.SetDBInfoToQuery(dbCorp_Select,DmqPrint );

    { ﾛｰﾄﾞﾊﾟｯｹｰｼﾞ処理}
	try
//<LPH> DEL		lvHandle    :=  LoadPackage(rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP018001L.BPL');
        lvHandle    :=  LoadPackageHelper(rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP018001L.BPL');  //<LPH> ADD

        if ( lvHandle = 0 ) then
            Abort;
	except
		MjsMessageBox(Self, 'JNTCRP018001LのLoadPackageに失敗しました。' + #13 + '処理終了します。' , mjError, mjDefOk);
		Exit;
	end;

    // Export関数ｱﾄﾞﾚｽの取得
    PrintAppEntry := GetProcAddress(lvHandle,'PrintAppEntry');

    if ( @PrintAppEntry = nil ) then
    begin
	    MjsMessageBox(Self,'PrintAppEntry関数ｱﾄﾞﾚｽの取得に失敗しました。', mjError, mjDefOk);
//<LPH> DEL    	UnloadPackage( lvHandle );
    	UnloadPackageHelper( lvHandle );  //<LPH> ADD
    end;

    m_RepHandle	:= lvHandle;                            // 印刷モジュールハンドル <285> ADD

    { 印刷用ﾓｼﾞｭｰﾙを生成 }
    try
        with PrtParam do
		begin
			Para		    :=  uvHani;
			TargetQry	    :=  nil;
			CorpSys		    :=  uvSelSys;
            iAPP_HDL_REC    :=  100;
            JntArea         :=  m_cJNTArea;
		end;

		iRet := PrintAppEntry(Self,m_pMyAppRecord,0,PrtParam,ArrHdl);
		if ( iRet = 0 ) then
			Abort;
	except
		MjsMessageBox(Self,'印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙの作成に失敗しました。'#13#10#13#10
				 + '印刷ﾃﾞｰﾀﾓｼﾞｭｰﾙは使用できません。', mjError, mjDefOk);
	end;
    // <PRN> -----------Add↑-----------------

    m_EdtSw := false;                               // <126>編集状態ｽｲｯﾁ初期化

    // <155> - ST
    // WFｴｸｽﾌﾟﾛｰﾗの初期化<WF>
    uvWFExpOpenSW := false;
	if TMSeries.IsMjsLink3	<> True then	//<MLXDEP-2>
	begin	//<MLXDEP-2>以下のbegin,end内を一段字下げ
	    if fnJNTWFExpInit(Self,m_pMyAppRecord) = 0 then
	        uvWFExpOpenSW := true
	    else
			MjsMessageBox(Self,'WFｴｸｽﾌﾟﾛｰﾗの初期化に失敗しました。'#13#10#13#10
						+ 'WFｴｸｽﾌﾟﾛｰﾗは使用できません。', mjError, mjDefOk);
	end;	//<MLXDEP-2>
// <214> MOD start
//    m_recSinseiKey.SwkForm := -1;           // 初期化	//<WK>
{<225> DEL St
    m_recSinseiKey.SinForm := -1;
    m_recSinseiKey.HisID   := -1;
// <214> MOD end
    m_recSinseiKey.OrgNo   := -1;						//<WK>
    m_recOther.CanInsert   := false;					//<WK>
    // <155> - ED
<225> DEL Ed}
// <225> ADD start
    SetLength(m_recFLWSinseiKey,1);
    m_recFLWSinseiKey[0].SinForm    := -1;
    m_recFLWSinseiKey[0].HisID      := -1;
    m_recFLWSinseiKey[0].OrgNo      := -1;
// <225> ADD end

    ProgressBar1.Parent := MPanel3;  //<241> ADD
    PPanelBase.Enabled := False;  //<247> ADD 一覧・詳細下地パネル
    PPanelTree.Enabled := False;  //<247> ADD ツリービュー下地パネル

	PostMessage( Self.Handle,WM_ONPAINT,0,0 );		// OnPaint Post

//<MLXDEP>
    // 工事・ﾌﾟﾛｼﾞｪｸﾄが未採用だった場合
    if ( m_PrjUseFlg = false ) and (TMSeries.IsMjsLink3) then
    begin
		PPanelTree.Visible 				:= False;
        LLabel_ECombo_Header.Visible 	:= False;
        ECombo_Header.Visible 			:= False;
		Root_PMTab.Visible				:= False;
        BSpeedButtonIS.Visible			:= False;
        BSpeedButtonSort.Visible		:= False;
        BSpeedButtonFind.Visible		:= False;
        B_ImportWF.Visible				:= False;
        B_GrpSec.Visible				:= False;
        B_SetUp.Visible					:= False;
		ToolBarObjectMove();
    end;
//<MLXDEP>

end;


//**************************************************************************
//	Component	:	Form
//	Event	    :	OnClose
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormClose(Sender: TObject; var Action: TCloseAction);
var
	wkParam	     : TAppParam;
	iarMasterKbn : Array of integer;
	Dmpuery		 : TMQuery;
	DmqData		 : TMQuery;
	sMessage	 : String;
    Dlg          : TJNTSyncMasterIF;       // <183>
    IDs          : Array[0..2] of integer; // <183>
begin
    m_Close :=  true;

	if m_bMsgFlg = true then
	begin
		sMessage := MasterInfo_DMemDataJHojyoName.AsString + '別の' + MasterInfo_DMemDataKosyuName.AsString + '管理区分が変更されています。'#13#10+
					'入力済み仕訳データに該当' + MasterInfo_DMemDataJHojyoName.AsString + 'が使用されている場合は'#13#10+
// <291> MOD st
//					'必ずマスタ再計算処理を行うようにしてください。';
					'必ずマスター再計算処理を行うようにしてください。';
// <291> MOD ed
		MjsMessageBoxEx(Self,sMessage, '登録', mjWarning, mjOk, mjDefOk);
	end;

	// 不正加算体系ﾚｺｰﾄﾞ復旧処理
	fnHojyoTreeRestore();
//<MLXDEP> DEL	if (gbHojyoTree2Flag = true) then  //<MLXDEP> コメント解除時は削除
	if (gbHojyoTree2Flag = true) and (not(TMSeries.IsMjsLink3)) then	//<MLXDEP>  ADD
	begin
		//	補助加算体系ﾏｽﾀ2を呼ぶ処理
		SetLength( iarMasterKbn, 1 );
		iarMasterKbn[0] := m_nMasterDivision;			//	工事(51)

		// 加算更新処理
		MasTreee2Dlg:= TJNTMasTreee2Dlgf.Create( Self );
		if MasTreee2Dlg.ExecTree2( 	rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot,
										MDataModule^,
										m_pMyAppRecord.m_iCorpID,
										iarMasterKbn, Dmpuery ) < 0 then
		begin
			if (Dmpuery <> nil) then
			begin
				MjsMessageBoxEx(Self,'加算体系更新に失敗しました。', '加算体系更新',mjError, mjOk, mjDefOk, false );
				Beep;
				ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, Dmpuery );
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,false );
				Dmpuery.Free;
			end
			else
			begin
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10,3);
				Beep;
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,false );
			end;
		end;
		MasTreee2Dlg.Free;

	end;

	gbHojyoTree2Flag	:=	false;

	if gbHojyoTreeDelFlag = true then											// メール会計履歴洗い替えﾌﾗｸﾞOn?
	begin
		gbHojyoTreeDelFlag := false;											// メール会計履歴洗い替えﾌﾗｸﾞOff
	end;

	if gbKojiInfo2DelFlag = true then											// メール会計履歴洗い替えﾌﾗｸﾞOn?
	begin
		gbKojiInfo2DelFlag := false;											// メール会計履歴洗い替えﾌﾗｸﾞOff
	end;

{	DmqData := TMQuery.Create( Self );					                        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		                //	DBとMQueryの接続

	// ｽﾄｱﾄﾞの終了処理
	DmqData.Close;
	DmqData.SQL.Clear;
	DmqData.SQL.Add(MakeSQL(0,'',false,4));
	if (DmqData.ExecSQL  = false) then
	begin
//		sMessage	:=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
		showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage + '　ｽﾄｱﾄﾞﾌﾟﾛｼｰｼﾞｬでｴﾗｰになりましたが気にせず進んで下さい。');
	end;

	DmqData.Close;
	DmqData.Free;
}


// <194> MOD start
(*
    // <183> - ST
    // ｸﾞﾙｰﾌﾟ会社ありの場合
    // <187>if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    if ( m_SyncMaster.m_flgGrpCorp in [0,1] ) then   // <187>
    begin
        IDs[0] := JNTSYNC_HojyoMA;
        IDs[1] := JNTSYNC_KojiInfo;
        IDs[2] := JNTSYNC_KojiInfo2;
        Dlg := TJNTSyncMasterIF.Create (Self, m_pMyAppRecord);

        try
            Dlg.ShowDlg(IDs);
    	finally
    		Dlg.Free;
    		Dlg:=nil;
    	end;
    end;
    // <183> - ED
*)

// <197> MOD start
(*

    if m_PrjUseFlg then 					// 工事が採用している場合は配信ダイアログを表示する
    begin
                                     		// 工事の場合は決算確定時、権限なしまたは全社と子社の整合性がない場合は配信ﾀﾞｲｱﾛｸﾞを表示しない
    	if (m_pMyAppRecord.m_sParameter = '1') or
           ((m_pMyAppRecord.m_sParameter <> '1') and
           (giReferFlag = NORMAL) then
        begin
        	if ( m_SyncMaster.m_flgGrpCorp in [0,1] ) then
    		begin
        		IDs[0] := JNTSYNC_HojyoMA;
        		IDs[1] := JNTSYNC_KojiInfo;
        		IDs[2] := JNTSYNC_KojiInfo2;
        		Dlg := TJNTSyncMasterIF.Create (Self, m_pMyAppRecord);

        		try
            		Dlg.ShowDlg(IDs);
    			finally
    				Dlg.Free;
    				Dlg:=nil;
    			end;
    		end;
        end;
    end;

// <194> MOD end
*)
	if  m_SyncMaster.m_flgGrpCorp in [0,1] then
    begin
    	if ((m_cJNTArea.IsAppend) or        // 追加権限あり
           (m_cJNTArea.IsModify) or         // 修正権限あり
           (m_cJNTArea.IsDelete)) and       // 削除権限あり
           (m_PrjUseFlg) and				// 採用あり
           (m_SyncMaster.m_CEComKbn5 = 0) and
           (m_SyncMaster.m_PEComKbn5 = 0) then	// 表示のみでなくて翌期更新済みでもない場合
		begin
         	IDs[0] := JNTSYNC_HojyoMA;
            IDs[1] := JNTSYNC_KojiInfo;
        	IDs[2] := JNTSYNC_KojiInfo2;
        	Dlg := TJNTSyncMasterIF.Create (Self, m_pMyAppRecord);

        	try
            	Dlg.ShowDlg(IDs);
    		finally
    			Dlg.Free;
//    			Dlg:=nil;
    		end;
        end;
    end;
// <197> MOD end


    // <172> - ST
    // DBとMQueryの接続(子会社用)
    DmqData := TMQuery.Create( Self );

    try
        MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqData );

        // ﾏｽﾀ履歴用のｽﾄｱﾄﾞ(終了)を実行(子会社用)
        DmqData.Close;
        DmqData.SQL.Clear;
        DmqData.SQL.Add(fnMakeSQL(2));

        if (DmqData.ExecSQL = false) then
        begin
            sMessage :=	IntToStr(ComArea.m_MsgStd.GetDBCode(DmqData));
            showmessage('ｴﾗｰｺｰﾄﾞ ' + sMessage);
        end;
    finally
        DmqData.Close();
        DmqData.Free();
    end;

// <235> ADD start
    if MasMonth <> nil then
        MasMonth.Free;
// <235> ADD end

    // ｸﾗｽの開放
    m_SyncMaster.fnSyncTerm();
    // <172> - ED

    // 共通ｴｸｽﾌﾟﾛｰﾗの開放
    if uvExpOpenSW = true then
        fnJNTExpFree;

    // <155> - ST
    // WF用ｴｸｽﾌﾟﾛｰﾗの解放<WF>
    if uvWFExpOpenSW = true then
        fnJNTWFExpFree;

    // 共通ｼｽﾃﾑ解放
	m_cJNTArea.Free;
    // <155> - ED

    if uvSelSys <> nil then
        uvSelSys.Free();

    // 印刷用ｸｴﾘｰの開放<PRN>
    DmqPrint.Close();
    DmqPrint.Free();

    // <118>
    if ( mqCmnDB <> nil ) then
        mqCmnDB.Free();

	MDataModule^.CTLDBClose(CTRL_DB);					// CTLDBOpen
	MDataModule^.COPDBClose(dbCorp_Select);				// DB Close

    // ｸﾞﾙｰﾌﾟ会社ありの場合<172>
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        // 親会社DBのClose
        if ( m_SyncMaster.m_cPDBSelect <> nil ) then
        	MDataModule^.COPDBClose(m_SyncMaster.m_cPDBSelect);
    end;

//<KSN> ADD St
    // ドラッグ用オブジェクトの開放
    if m_HojyoTree_Drag.HojyoTree <> nil then
    begin
        m_HojyoTree_Drag.HojyoTree.Free();
        m_HojyoTree_Drag.HojyoTree := nil;
    end;

    if m_HojyoTree_Drag.HojyoMA <> nil then
    begin
        m_HojyoTree_Drag.HojyoMA.Free();
        m_HojyoTree_Drag.HojyoMA := nil;
    end;

    // 検索関連
    if m_SrchHojyoMA <> nil then
    begin
        m_SrchHojyoMA.Free();
        m_SrchHojyoMA := nil;
    end;

    SetLength(m_NCodeArray,0);
//<EXP> MOD St
//    m_APGFILE.Free();  //APGファイル開放
    moApgCtrlJnt.Free();
    moApgCtrlEnv.Free();
    moSections.Free();
//<EXP> MOD Ed
//<KSN> ADD Ed

//<271> ADD St
    m_aCmnt_Jitu.Free();
    m_aCmnt_Gou.Free();
//<271> ADD Ed
//<TAX> ADD St
    if Assigned(moKojiInfoMn) then
    begin
        moKojiInfoMn.Free();
        moKojiInfoMn := nil;
    end;

    if Assigned(moBusiness) then
    begin
        moBusiness.Free();
        moBusiness := nil;
    end;
//<TAX> ADD Ed
	m_pMyAppRecord^.m_iDelete := 1;
	wkParam.iAction			  := ACTID_FORMCLOSEEND;		// 呼び出し区分 設定
	wkParam.pRecord			  := Pointer(m_pMyAppRecord);	// 管理構造体ﾎﾟｲﾝﾀ設定
	wkParam.pActionParam	  := nil;						// 予備ﾎﾟｲﾝﾀ 設定

	TMjsAppRecord(m_pMyAppRecord^).m_pOwnerEntry(@wkParam);	// 親を呼び出す!!
	Action	:= caFree;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnDestroy
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormDestroy(Sender: TObject);
begin

    // 終了処理<PRN>
	gfnHaniTerm(uvHani);

    // <PRN>
    with PrtParam do
	begin
		Para		:=  uvHani;
		TargetQry   :=  nil;
		CorpSys		:=  uvSelSys;
	end;

    // 開放<PRN>
    PrintAppEntry(nil,nil,6,PrtParam,ArrHdl);
//<285> ADD St
    // 印刷モジュール開放
	if ( m_RepHandle <> 0 ) then
	begin
    	UnloadPackageHelper( m_RepHandle );
	end;
//<285> ADD Ed

	fnCMNPostFree;										// 郵便番号辞書 終了
    // <100> フリーダイアログ開放
    fnJNTFreeDlgFree();
	mjspreview. Term();
	mjspreview. Free();

    // ﾏｽﾀ同期ｸﾗｽの破棄<172>
    if ( m_SyncMaster <> nil ) then
    begin
		m_SyncMaster.Free();
    end;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnCloseQuery
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
var
 	iRet	:	Integer;
//<278> ADD St
    function IsEditSw() : Boolean;
    var
        gCodeEmpty: Boolean;
    begin
        gCodeEmpty := IsSyosaiMode and
            (MasterInfo_DMemDataCodeAttr.AsInteger = 2) and (
            ((Root_PMTab.Items.Selected = PAGE_JITUZAI) and (Jituzai_ETEdit_GCode.Text = '')) or
            ((Root_PMTab.Items.Selected = PAGE_GOKEI) and (Goukei_ETEdit_GCode.Text = '')));
//<KSN6> MOD St
//        result := m_EdtSw and (not gCodeEmpty);
        result := m_EdtSw and (not gCodeEmpty) and (Root_PMTab.Items.Selected <> PAGE_KASAN);
//<KSN6> MOD Ed
    end;
//<278> ADD Ed
begin

    MemData_EventCtrl(MemKasanChild,False);     //イベント制御 <KSN> ADD
    DBGrid_EventCtrl(Kasan_Child_DBGrid,False); //イベント制御 <KSN> ADD

//<155> - ST	=== Close処理へ移動 ===
    //  共通システム解放
//	m_cJNTArea.Free;
//<155> - ED

// <126> St --------------------------------------------------------------------
	if ( uvHani.mjspre <> nil )then
   	begin
        if ( uvHani.mjspre.IsPreView = true ) then
//	if mjspreview.IsPreView then            // ﾌﾟﾚﾋﾞｭｰ中？
	   	begin
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,2);
			Beep;
	   		MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
		   	CanClose := false;
		end
		else
		begin
    	    CanClose := true;
	    end;
	end
	else
	begin
   	    CanClose := true;
    end;


//<278> DEL  	if (m_EdtSw) then                   // 変更あり
    if (IsEditSw) then //<278> ADD
    begin
        // 変更を保存します。よろしいですか？
        ComArea.m_MsgStd.GetMsg(MjsMsgRec,10020,2);
        with MjsMsgRec do
        begin
            iRet := MjsMessageBoxEx(Self, sMsg, sTitle, icontype,
                                    btntype, btndef,LogType );
        end;

        if iRet = mrYes then            // 「はい」
        begin
            //<293> - ST
            // 特殊工事更新時の確認メッセージ対応(更新ボタン押下時、特殊工事として使用がチェックされていたら、メッセージを表示
            if ( Jituzai_ChkBox_Tokusyu.Checked = true ) then
            begin
                // もともと特殊工事に設定されていて、かつ特殊工事設定が更新されていない場合は、メッセージは表示しない
                if ((MasterInfo_DMemDataCodeAttr.AsInteger = 2) and (MasterInfo_DMemDataSpHojyoNCd1.AsFloat <> JHojyoMA_DMemDataNCode.AsFloat))
                    or
                    ((MasterInfo_DMemDataCodeAttr.AsInteger <> 2) and (JHojyoMA_DMemDataGCode.AsString <> '') and (MasterInfo_DMemDataSpHojyoNCd1.AsFloat <> JHojyoMA_DMemDataNCode.AsFloat)) then
                begin
                    iRet := MjsMessageBoxEx(Self, '該当の工事は特殊工事として設定されました。' + #13#10 + '今後、完成工事原価振替仕訳の工事として使用されますが、よろしいですか？',
                                             '確認', mjQuestion, mjYesNo, mjDefNo);
                    // 「いいえ」ボタンもしくは「×」ボタン押下時、更新処理をキャンセルする
                    if iRet <> mrYes then
                    begin
                       m_EdtSw := false;
                       exit;
                    end
                end
            end;
            //<293> - ED
            if not UpdateHojyoMA() then // 入力ﾁｪｯｸ・更新処理
                CanClose := false       // 入力ﾁｪｯｸでｴﾗｰ時は閉じない
            else
                m_EdtSw := false;
        end
        else if iRet = mrCancel then    // 「ｷｬﾝｾﾙ」
        begin
            CanClose := false;
        end
        else                            // 「いいえ」
        begin
            m_EdtSw := false;
        end;
    end;

    //<MLXDEP>
	if (TMSeries.IsMjsLink3) then
	begin
		//並び替えは採用がある時のみ行う、採用がない時はやらない。
		if m_PrjUseFlg = True then
		begin
	        ComArea.m_MsgStd.GetMsg(MjsMsgRec,10020,2);
			BSpeedButtonSortClick(Self);
		end;
	end;
    //<MLXDEP>

// <126> Ed --------------------------------------------------------------------
end;

//**************************************************************************
//	Proccess  :	CM_CHILDKEY
//	Name	  :	Sin.Nakamura
//	Date	  :	2000/ 08 / 09
//	Parameter :	Msg		TWMKey
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.CMChildKey(var Msg: TWMKey);
var
	sShift		:	TShiftState;
   	iSelStart	:	Integer;
	iSelLength	:	Integer;
	iLength		:	Integer;
	iRet		:	Integer;
	bCtrl		:	Boolean;
    i           :   Integer;
    txtWk       :   TMTxtEdit;
    lvCode      :   String;     // <122>
    lvFld       :   TField;     // <122>
//<KSN> ADD St
    //-----------------------------------
    // 加算体系タブ用の内部関数
    //-----------------------------------
    procedure CMChildKey_Kasan();
    begin

        if m_AcControl is TdxDBGrid then
        begin
            // Esc処理
            if	((Msg.CharCode = VK_ESCAPE) and (sShift = [])) then
            begin
                if	(MemKasanChild.State in [dsEdit, dsInsert]) then						// ﾃﾞｰﾀ入力中
                    Exit;

                if m_AcControl = Kasan_Child_DBGrid then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                    Abort;
                end;
                ECombo_Header.SetFocus ();
                Abort;
            end;
            // Shift+TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
            begin
                if m_AcControl = Kasan_Parent_DBGrid then
                begin
                    if MemKasanParent.RecNo = 1 then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
                        Abort;
                    end;
                end;

                 if m_AcControl = Kasan_Child_DBGrid then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                    Abort;
                end;
            end;
            // ←,↑処理
            if ((Msg.CharCode = VK_LEFT)  and (sShift = [])) or
               ((Msg.CharCode = VK_UP)   and (sShift = [])) then
            begin
                if MemKasanChild.RecNo = 1 then
                begin
                    if m_AcControl = Kasan_Child_DBGrid then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                        Abort;
                    end;
                end;
            end;
            // TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[]) then
            begin
                if m_AcControl = Kasan_Parent_DBGrid then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Child_DBGrid');
                    (m_AcControl as TdxDBGrid).DataSource.DataSet.FieldByName('GCode').FocusControl();
                    Abort;
                end;
            end;
            // Enter,→,↓処理
            if ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
               ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
               ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
            begin
                if m_AcControl = Kasan_Parent_DBGrid then
                begin
                    if MemKasanParent.RecNo = MemKasanParent.RecordCount then  // 最終行？
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Child_DBGrid');
                        (m_AcControl as TdxDBGrid).DataSource.DataSet.FieldByName('GCode').FocusControl();
                        Abort;
                    end;
                end;
            end;
        end;

        if m_AcControl = Root_PMTab then
        begin
            // TAB,Enter,→,↓処理
            if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
               ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
               ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
               ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Kasan_Parent_DBGrid');
                Abort;
            end;

            // Shift+TAB処理
            if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
            begin
                Abort;
            end;
        end;
        // ファンクションバー
        case Msg.CharCode of
            VK_F3   :
            begin
                if MSPFunctionBar.GetFuncEnabled(3) then
                    MSPFunctionBar.OnFunctionClick(MSPFunctionBar,3);
            end;
        end;
    end;
//<KSN> ADD Ed
begin
	sShift := MJSKeyDataToShiftState(Msg.KeyData);		// Shiftｷｰの取得 <270>MOD

    // <120>
    m_AcControl :=  Screen.ActiveControl;

	if GetKeyState(VK_MENU) < 0 then				// Altｷｰを拾う
		Exit;

//<KSN> ADD St
    if PPanelKasan.Visible then
    begin
        CMChildKey_Kasan();
        Exit;
    end;
//<KSN> ADD Ed

	if m_AcControl is TSelectStrGrid then			// TMNumEditのItemsが開いている？
		Exit;

    // TComboBoxの↑↓のｷｰは処理しない
    if m_AcControl is TMComboBox then
    begin
		if (Msg.CharCode = VK_UP)   or
           (Msg.CharCode = VK_DOWN) then
            Exit;

// ↓↓↓<119>
        if m_AcControl = ECombo_Header then         // <129>工事完成振替ﾀﾌﾞのｺﾝﾎﾞでもEnterを無視する不具合修正
        begin
            if ( Msg.CharCode = VK_RETURN ) then
            begin
    	    	Exit;
            end;
// <129>↓ End & Esc
        	if	((Msg.CharCode = VK_ESCAPE) or (Msg.CharCode = VK_END)) then
	        begin
                if ECombo_Header.DroppedDown then   // ﾄﾞﾛｯﾌﾟﾀﾞｳﾝ中は何もしない
                    Exit;
		        Close;                              // 終了
                Exit;
    	    end;
// <129>↑
        end;

// ↑↑↑<119>
    end;

	// 実在Gridｵﾍﾟﾚｰｼｮﾝ
	if m_AcControl = Jituzai_DdxDBGrid then
	begin
        // 正式名称のｺﾋﾟｰ
		if (Msg.CharCode = VK_F8) then
		begin
			if Jituzai_DdxDBGrid.FocusedColumn = COL_S_NAME then
			begin
				JHojyoMA_DMemData.Edit;
//				JHojyoMA_DMemDataSimpleName.AsString := MjsCopy(JHojyoMA_DMemDataLongName.AsString, 14);
				JHojyoMA_DMemDataSimpleName.AsString := MJSKabuCut (JHojyoMA_DMemDataLongName.AsString, 14);
			end;
		end;

        // Shift+TAB処理
		if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
		begin
			if ((JHojyoMA_DMemData.RecNo = 0) and (Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE)) or
				((JHojyoMA_DMemData.RecNo = 1) and (Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE)) then
			begin
	  			MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
				Abort;
			end;
			exit;
		end;

		bCtrl := MjsSystemKeyChk(sShift);

		if Msg.CharCode=VK_ESCAPE then	// ESC処理
		begin
			if JHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
			end
			else
			begin
// <132>工事はｸﾞﾘｯﾄﾞで終了
                if m_pMyAppRecord.m_sParameter = '1' then
                begin
    				Beep;
	    			iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
		    		if iRet <> mrYes then
			    	begin
				    	abort;
					    exit;
    				end
	    			else
		    		begin
			    		if JHojyoMA_DMemDataGCode.IsNull then
				    		JHojyoMA_DMemData.Cancel;
    					close;
	    				exit;
		    		end;
                end
// <129>↓ﾌﾟﾛｼﾞｪｸﾄはﾌﾟﾛｼﾞｪｸﾄｺﾝﾎﾞへ移動
                else
                begin

//<MLXDEP>
				    if (TMSeries.IsMjsLink3) then
					begin
    					close;
						Exit;
					end;
//<MLXDEP>

                    ECombo_Header.SetFocus;                 // ﾌﾟﾛｼﾞｪｸﾄ
                    Exit;
                end;
// <129>↑
			end;
		end;

		if (Msg.CharCode=VK_END) and (bCtrl = true) then	// END+CONTROL処理
		begin
			exit;
		end;

		if (Msg.CharCode=VK_HOME) and (bCtrl = true) then // HOME+CONTROL処理
		begin
			exit;
		end;

		if Msg.CharCode=VK_END then	// END処理
		begin
			if Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE then
			begin
				Beep;
				iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
				if iRet <> mrYes then
				begin
					abort;
					exit;
				end
				else
				begin
					if JHojyoMA_DMemDataGCode.IsNull then
						JHojyoMA_DMemData.Cancel;
					close;
					exit;
				end;
			end;

			if Jituzai_DdxDBGrid.FocusedColumn <> COL_S_NAME then
			begin
				Jituzai_DdxDBGrid.FocusedColumn := COL_S_NAME;
			   abort;
				exit;
			end;
		end;

		if Msg.CharCode=VK_HOME then	// HOME処理
		begin
			if Jituzai_DdxDBGrid.FocusedColumn <> COL_GCODE then
			begin
				Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
				abort;
				exit;
			end
			else
			begin
				abort;
				exit;
			end;
		end;

		// その他のキー
		exit;
	end;

	// 合計Gridｵﾍﾟﾚｰｼｮﾝ
	if m_AcControl = Goukei_DdxDBGrid then
	begin
		if (Msg.CharCode=VK_F8) then
		begin
			if Goukei_DdxDBGrid.FocusedColumn = COL_S_NAME then
			begin
				GHojyoMA_DMemData.Edit;
				GHojyoMA_DMemDataSimpleName.AsString := MJSKabuCut (GHojyoMA_DMemDataLongName.AsString, 14);
			end;
		end;

		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then	// Shift+TAB処理
		begin
			if ((GHojyoMA_DMemData.RecNo = 0) and (Goukei_DdxDBGrid.FocusedColumn = COL_GCODE)) or
				((GHojyoMA_DMemData.RecNo = 1) and (Goukei_DdxDBGrid.FocusedColumn = COL_GCODE)) then
			begin
	  			MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
				abort;
			end;
			exit;
		end;

		if Msg.CharCode=VK_ESCAPE then	// ESC処理
		begin
			if GHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
			end
			else
			begin
// <132>工事はｸﾞﾘｯﾄﾞで終了
                if m_pMyAppRecord.m_sParameter = '1' then
                begin

    				Beep;
	    			iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
		    		if iRet <> mrYes then
			    	begin
				    	abort;
    					exit;
	    			end
		    		else
			    	begin
				    	if GHojyoMA_DMemDataGCode.IsNull then
					    	GHojyoMA_DMemData.Cancel;
    					close;
	    				exit;
		    		end;
                end
// <129>↓ﾌﾟﾛｼﾞｪｸﾄｺﾝﾎﾞへ移動
                else
                begin
                    ECombo_Header.SetFocus;             // ﾌﾟﾛｼﾞｪｸﾄ
                    Exit;
                end;
// <129>↑
			end;
		end;

		if Msg.CharCode=VK_END then	// END処理
		begin
			if Goukei_DdxDBGrid.FocusedColumn = COL_GCODE then
			begin
// <132>工事はｸﾞﾘｯﾄﾞで終了
                if m_pMyAppRecord.m_sParameter = '1' then
                begin
    				Beep;
	    			iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
		    		if iRet <> mrYes then
			    	begin
				    	abort;
					    exit;
    				end
	    			else
		    		begin
			    		if GHojyoMA_DMemDataGCode.IsNull then
				    		GHojyoMA_DMemData.Cancel;
					    close;
    					exit;
	    			end;
                end
// <129>↓ﾌﾟﾛｼﾞｪｸﾄｺﾝﾎﾞに移動
                else
                begin
                    ECombo_Header.SetFocus;             // ﾌﾟﾛｼﾞｪｸﾄ
                    Exit;
                end;
// <129>↑
			end;

			if Goukei_DdxDBGrid.FocusedColumn <> COL_S_NAME then
			begin
				Goukei_DdxDBGrid.FocusedColumn := COL_S_NAME;
				abort;
				exit;
			end;
		end;

		if Msg.CharCode=VK_HOME then	// HOME処理
		begin
			if Goukei_DdxDBGrid.FocusedColumn <> COL_GCODE then
			begin
				Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;
				abort;
				exit;
			end
			else
			begin
				abort;
				exit;
			end;
		end;

		// その他のキー
		exit;
	end;

	// Root_PMTabｷｰｵﾍﾟﾚｰｼｮﾝ
	if m_AcControl = Root_PMTab then
	begin
		if Msg.CharCode=VK_RETURN then	// ENTER処理
		begin
			if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			begin
				if BSpeedButtonIS.Caption = '詳細(&T)' then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
					Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;					// コードに初期ﾌｫｰｶｽ
					abort;
					exit;
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
						else
							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
						abort;
						exit;
					end
					else
						exit;
				end;
			end
			else
			begin
				if BSpeedButtonIS.Caption = '詳細(&T)' then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid');
					Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;					// コードに初期ﾌｫｰｶｽ
					abort;
					exit;
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
						else
							MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
						abort;
						exit;
					end
					else
						exit;
				end;
			end;
		end;

		if Msg.CharCode=VK_END then	// END処理
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
			begin
				if Root_PMTab.Items.Selected = PAGE_JITUZAI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
					Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;					// コードに初期ﾌｫｰｶｽ
					abort;
					exit;
				end
				else
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid');
					Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;					// コードに初期ﾌｫｰｶｽ
					abort;
					exit;
				end;
			end
			else
			begin
				if giReferFlag = NORMAL then
				begin
					if Root_PMTab.Items.Selected = PAGE_JITUZAI then
					begin
						// 更新ボタンに移動
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
						abort;
						exit;
					end
					else
					begin
						// 更新ボタンに移動
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
						abort;
						exit;
					end;
				end
				else
					exit;
			end;
		end;

		// Shift＋Tab
		if ((Msg.CharCode=VK_TAB) and (sShift=[ssShift])) then// Shift+TAB処理
		begin
			// Treeに移動
			MjsDispCtrl.MjsSetFocus(Self, 'VTreeView');
			abort;
		end;

		// その他のキー
		exit
	end;

	// Jituzai_PMTabｷｰｵﾍﾟﾚｰｼｮﾝ
	if m_AcControl = Jituzai_PMTab then
	begin
		if (Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[])) then	// ENTER処理
		begin
			if giReferFlag = NORMAL then
			begin
				if Jituzai_PMTab.Items.Selected = PAGE_KIHON then
				begin
// <106>
//                     if (Jituzai_ENEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_PersonCode')
//                    else if (Jituzai_ETEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_PersonCode')
//                    else if (Jituzai_ENEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_CustomerCode')
//                    else if (Jituzai_ETEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerCode')
//                    else
// <106>
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_HaifuKbn');

					Abort;
					Exit;
				end
				else if Jituzai_PMTab.Items.Selected = PAGE_KOJI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_ZipCode1');
					abort;
					exit;
				end
				else if Jituzai_PMTab.Items.Selected = PAGE_KFURI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'MMasterKBN');
					abort;
					exit;
				end
                else if Jituzai_PMTab.Items.Selected = PAGE_SONOTA	 then
                begin
                    for i := 1 to 10 do
                    begin
                        if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Visible then
                        begin
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i));
                            abort;
                            exit;
                        end;
                    end;
                    for i := 1 to 10 do
                    begin
                        if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Visible then
                        begin
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i));
                            abort;
                            exit;
                        end;
                    end;
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                    abort;
                    exit;

                end
// <SEI> ADD start
				// 請求・入金予定
                else if Jituzai_PMTab.Items.Selected = PAGE_SEIKYU then
                begin
    										// 請求先
                    if Jituzai_ETEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyusakiCd');
                    end
                    else if Jituzai_ENEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyusakiCd');
                    end
                    else	   				// 請求情報ｸﾞﾘｯﾄﾞ
                    begin
						JSeikyu_DMemData.RecNo := 1;
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Seikyu');
                        Jituzai_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                    end;
					abort;
					exit;
				end
// <SEI> ADD end
// <205> ADD start
                else if Jituzai_PMTab.Items.Selected = PAGE_BIKOU then
                begin
// <222> DEL start
{
// <209> MOD start
//					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
                    if (m_pMyAppRecord.m_sParameter <> '1') then
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO')
                    else
	                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
// <209> MOD end
}
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
// <222> DEL end
                    abort;
					exit;
                end
// <205> ADD end
// <212> ADD start
                else if Jituzai_PMTab.Items.Selected = PAGE_NYUKIN	 then
                begin
					JNyukin_DMemData.RecNo := 1;
					Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;					// コードに初期ﾌｫｰｶｽ
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
					abort;
					exit;
                end
// <212> ADD end
				else
				begin
//<TAX> ADD St
                    if (rdJTaxIn.Checked and rdjTaxIn.CanFocus) then
                    begin
                        rdJTaxIn.SetFocus();
                        abort;
                        exit;
                    end
                    else if (rdJTaxOut.Checked and rdjTaxOut.CanFocus) then
                    begin
                        rdJTaxOut.SetFocus();
                        abort;
                        exit;
                    end;
//<TAX> ADD Ed
					JKeiyaku_DMemData.RecNo := 1;
					Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;					// コードに初期ﾌｫｰｶｽ
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
					abort;
					exit;
				end;
			end
			else
				exit;
		end;

		if Msg.CharCode=VK_END then	// END処理
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ボタンに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;

		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
			if giReferFlag = NORMAL then
			begin
                if Jituzai_ChkBox_Tokusyu.Visible = true then
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu')
				else
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_RenChar');
				Abort;
			end
			else
			begin
				MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
				Abort;
			end;
			exit;
		end;
		exit;
	end;

	// Goukei_PMTabｷｰｵﾍﾟﾚｰｼｮﾝ
	if m_AcControl = Goukei_PMTab then
	begin
		if (Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[])) then	// ENTER処理
		begin
			if giReferFlag = NORMAL then
			begin
				if Goukei_PMTab.Items.Selected = PAGE_KIHON then
				begin
// <106>
//                    if (Goukei_ENEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_PersonCode')
//                    else if (Goukei_ETEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_PersonCode')
//                    else if (Goukei_ENEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_CustomerCode')
//                    else if (Goukei_ETEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_CustomerCode')
//                    else
// <106>
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_RootKbn');
					Abort;
					Exit;
				end
				else if Goukei_PMTab.Items.Selected = PAGE_KOJI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_ZipCode1');
					abort;
					exit;
				end
// <205> ADD start
// <212> MOD start
//                else if  Goukei_PMTab.Items.Selected = 3 then
//<SEI> DEL                else if  Goukei_PMTab.Items.Selected = 4 then
                else if Goukei_PMTab.Items.Selected = PAGE_GOUKEI_BIKOU then  //<SEI> ADD
// <212> MOD end
                begin
// <209> MOD start
//					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_BIKO');
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Gaiyou');
// <209> MOD end
					abort;
					exit;
                end
// <205> ADD end
// <212> ADD start
//<SEI> DEL                else if  Goukei_PMTab.Items.Selected = 3 then
                else if  Goukei_PMTab.Items.Selected = PAGE_GOUKEI_NYUKIN then  //<SEI> ADD
                begin
					GNyukin_DMemData.RecNo := 1;
					Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_KEINEN;					// コードに初期ﾌｫｰｶｽ
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Nyu');
					abort;
					exit;
                end
// <212> ADD end
// <SEI> ADD start
				// 請求・入金予定
				else if Goukei_PMTab.Items.Selected = PAGE_GOUKEI_SEIKYU then
                begin
    										// 請求先
                    if Goukei_ETEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyusakiCd');
                    end
                    else if Goukei_ENEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyusakiCd');
                    end
                    else		 			// 請求情報ｸﾞﾘｯﾄﾞ
                    begin
						GSeikyu_DMemData.RecNo := 1;
                        Goukei_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Seikyu');
                    end;
                end
// <SEI> ADD end
				else
				begin
					GKeiyaku_DMemData.RecNo := 1;
					Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;					// コードに初期ﾌｫｰｶｽ
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
					abort;
					exit;
				end;
			end
			else
				exit;
		end;

		if Msg.CharCode=VK_END then	// END処理
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ボタンに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;

		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
			if giReferFlag = NORMAL then
			begin
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_RenChar');
				Abort;
			end
			else
			begin
				// 簡略名称に移動
				MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
				abort;
			end;
			exit;
		end;
		exit;
	end;

	// VTreeViewｷｰｵﾍﾟﾚｰｼｮﾝ
	if m_AcControl = VTreeView then
	begin
//<164>③		if (Msg.CharCode=VK_RETURN) or (Msg.CharCode=VK_TAB) then	// ENTER処理
		if (Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[])) then	// ENTER処理
		begin
			if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			begin
				if BSpeedButtonIS.Caption = '詳細(&T)' then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid');
					abort;
					exit;
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
						else
							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
						abort;
					end;
					exit;
				end;
			end
			else
			begin
				if BSpeedButtonIS.Caption = '詳細(&T)' then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid');
					abort;
					exit;
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
						else
							MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
						abort;
					end;
					exit;
				end;
			end;
		end;

		if (Msg.CharCode = VK_F3) and (sShift=[]) then
		begin
			if m_SearchInfo.sKojCD = '' then				// 検索対象ｺｰﾄﾞが存在しない時
				BSpeedButtonFindClick(Self)					// 検索DLG表示
			else 											// 検索対象ｺｰﾄﾞが存在する時
				fnSearch();									// 検索
		end;

//<164>③ - ST
		if ((Msg.CharCode=VK_TAB) and (sShift=[ssShift])) and (PPanel_ECombo.Enabled = true) then	// SHIFT+ENTER処理
		begin
			MjsDispCtrl.MjsSetFocus(Self, 'ECombo_Header');
			Abort;
		end;
//<164>③ - ED

        if not ((Msg.CharCode = VK_F1) and (sShift=[])) then    // <151> F1ｷｰはExitしない
    		Exit;
	end;

	// 実在更新ﾎﾞﾀﾝ
	if m_AcControl = Jituzai_BBitBtn_Ok then
	begin
		if Msg.CharCode = VK_RETURN then	                // ENTER処理
		begin
			Jituzai_BBitBtn_OkClick(Jituzai_BBitBtn_Ok);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and
                                (sShift = [ssShift])) or    // Shift+TAB処理
		    (Msg.CharCode = VK_LEFT)                  or	// LEFT処理
		    (Msg.CharCode = VK_UP)                    then	// UP処理
		begin
// <215> ADD start
            if ( Jituzai_PMTab.Items.Selected = PAGE_KEIYAKU )then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
			    Abort;
//<SEI> MOD St
//            end;
			end
            // 請求・入金予定
            else if (Jituzai_PMTab.Items.Selected = PAGE_SEIKYU)then
            begin
    										// 一括請求先工事
                if Jituzai_ETEdit_SeikyuKoujiCd.CanFocus then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyuKoujiCd');
                end
                else if Jituzai_ENEdit_SeikyuKoujiCd.CanFocus then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyuKoujiCd');
                end
                else						// 請求情報ｸﾞﾘｯﾄﾞ
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Seikyu');
                end;
				Abort;
			end;
//<SEI> MOD Ed
// <215> ADD end
	 		MjsPrevCtrl(Self);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and
                                (sShift = []))        or    // TAB処理
		   (Msg.CharCode = VK_RIGHT)                  or	// RIGHT処理
		   (Msg.CharCode = VK_DOWN)                   then	// DOWN処理
		begin
			// 取り消しﾎﾞﾀﾝに移動
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Cancel');
			Abort;
		end;

		if Msg.CharCode = VK_END then	                    // END処理
		begin
			Jituzai_BBitBtn_CancelClick(Jituzai_BBitBtn_Cancel);
			Abort;
		end;
	end;

	// 実在取消ﾎﾞﾀﾝ
	if m_AcControl = Jituzai_BBitBtn_Cancel then
	begin
		if Msg.CharCode = VK_RETURN then	                // ENTER処理
		begin
			Jituzai_BBitBtn_CancelClick(Jituzai_BBitBtn_Cancel);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and
                                (sShift = [ssShift])) or    // Shift+TAB処理
		    (Msg.CharCode = VK_LEFT)                  or	// LEFT処理
		    (Msg.CharCode = VK_UP)                    then	// UP処理
		begin
			MjsPrevCtrl(Self);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and (sShift = [])) or   // TAB処理
		    (Msg.CharCode = VK_RIGHT)                  or	// RIGHT処理
		    (Msg.CharCode = VK_DOWN)                   then	// DOWN処理
		begin
//<164>④ - ST
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
			else
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
//<164>④ - ED
			Abort;
		end;
	end;

	// 合計更新ﾎﾞﾀﾝ
	if m_AcControl = Goukei_BBitBtn_Ok then
	begin
		if Msg.CharCode = VK_RETURN then	                // ENTER処理
		begin
			Goukei_BBitBtn_OkClick(Goukei_BBitBtn_Ok);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and
                                (sShift = [ssShift])) or    // Shift+TAB処理
		    (Msg.CharCode = VK_LEFT)                  or	// LEFT処理
		    (Msg.CharCode = VK_UP)                    then	// UP処理
		begin
// <215> ADD start
            if ( Goukei_PMTab.Items.Selected = 2 )then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
			    Abort;
//<SEI> MOD St
//            end;
			end
            // 請求・入金予定
            else if (Goukei_PMTab.Items.Selected = PAGE_GOUKEI_SEIKYU) then
            begin
    										// 一括請求先工事
		    	if Goukei_ETEdit_SeikyuKoujiCd.CanFocus then
		        begin
		        	MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyuKoujiCd');
		        end
		        else if Goukei_ENEdit_SeikyuKoujiCd.CanFocus then
		        begin
		        	MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyuKoujiCd');
		        end
		        else						// 請求情報ｸﾞﾘｯﾄﾞ
		        begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Seikyu');
		        end;
			    Abort;
            end;
//<SEI> MOD Ed
// <215> ADD end
			MjsPrevCtrl(Self);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and
                                (sShift = []))        or    // TAB処理
		   (Msg.CharCode = VK_RIGHT)                  or	// RIGHT処理
		   (Msg.CharCode = VK_DOWN)                   then	// DOWN処理
		begin
			// 取り消しボタンに移動
			MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Cancel');
			Abort;
		end;

		if Msg.CharCode = VK_END then	                    // END処理
		begin
			Goukei_BBitBtn_CancelClick(Goukei_BBitBtn_Cancel);
			Abort;
		end;
	end;

	// 合計取消ﾎﾞﾀﾝ
	if m_AcControl = Goukei_BBitBtn_Cancel then
	begin
		if Msg.CharCode=VK_RETURN then	                    // ENTER処理
		begin
			Goukei_BBitBtn_CancelClick(Goukei_BBitBtn_Cancel);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and
                                (sShift = [ssShift])) or    // Shift+TAB処理
		    (Msg.CharCode = VK_LEFT)                  or	// LEFT処理
		    (Msg.CharCode = VK_UP)                    then	// UP処理
		begin
			MjsPrevCtrl(Self);
			Abort;
		end;

		if ((Msg.CharCode = VK_TAB) and (sShift = [])) or   // TAB処理
		    (Msg.CharCode = VK_RIGHT)                  or	// RIGHT処理
		    (Msg.CharCode = VK_DOWN)                   then	// DOWN処理
		begin
//<164>④ - ST
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
			else
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
//<164>④ - ED
			Abort;
		end;
	end;

	// 実在契約情報
	if m_AcControl = Jituzai_DdxDBGrid_Kei then
	begin
		if Msg.CharCode=VK_ESCAPE then	// ESC処理
		begin
			if giReferFlag = NORMAL then
			begin
				if JKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
				begin
					JKeiyaku_DMemData.Cancel;
					exit;
				end
				else
				begin
					// 外部コードに移動
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
					abort;
					exit;
				end;
			end
			else
				exit;
		end;

// <212> MOD start
{
		// END
		if (Msg.CharCode=VK_END) and
		   (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ﾎﾞﾀﾝに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;
}
		// END
   		if (Msg.CharCode=VK_END) then
        begin
            // 契約情報連動区分採用の場合
            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
                if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end
            else
            begin
                if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end;
        end;
// <212> MOD end

		if ((Msg.CharCode=VK_UP) or (Msg.CharCode=VK_LEFT)) and
		   (JKeiyaku_DMemData.RecNo = 1) and
		   (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_KEINEN) then
		begin
			if JKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				exit;
			end
			else
			begin
//<TAX> MOD St
                if (rdJTaxIn.Checked and rdJTaxIn.CanFocus) then
                begin
                    rdJTaxIn.SetFocus();
                    abort;
                end
                else if (rdJTaxOut.Checked and rdJTaxOut.CanFocus) then
                begin
                    rdJTaxOut.SetFocus();
                    abort;
                end
                else
                begin
                    if giReferFlag = NORMAL then
                    begin
                        if Jituzai_ChkBox_Tokusyu.Visible = true then
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu')
                        else
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_RenChar');
                        Abort;
                    end;
                end;
{
				if giReferFlag = NORMAL then
				begin
                    if Jituzai_ChkBox_Tokusyu.Visible = true then
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu')
                    else
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_RenChar');
					Abort;
				end;
}
//<TAX> MOD Ed
				exit;
			end;
		end;

// <212> MOD start
{
		// ENTER処理
		if m_iAccProKbn <> 0 then
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
			   (JKeiyaku_DMemData.RecNo = 8) and
			   (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
			begin
				// 入金情報に移動
				JNyukin_DMemData.RecNo := 1;
				Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
				abort;
				exit;
			end;
		end
		else
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
			   (JKeiyaku_DMemData.RecNo = 8) and
			   (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_KEIKIN) then
			begin
				// 入金情報に移動
				JNyukin_DMemData.RecNo := 1;
				Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
				abort;
				exit;
			end;
		end;
}
 		// ENTER処理
		if m_iAccProKbn <> 0 then
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
			   (JKeiyaku_DMemData.RecNo >= 999) then
			begin
// <222> DEL start
{
                // 工事の場合
                if (m_pMyAppRecord.m_sParameter = '1') then
                begin
}
// <222> DEL end
                    // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
                    if ((JKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                        (JKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                    begin
                        if giReferFlag = NORMAL then
                        begin
                            // 更新ボタンに移動
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                            abort;
                        end;
                        exit;
                    end;
// <222> DEL                end;

                if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
                begin
			        if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE) or
                       (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ボタンに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end
                else
                begin
                    if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ボタンに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end;
			end;
		end
		else
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
			   (JKeiyaku_DMemData.RecNo >= 999) then
			begin
// <222> DEL start
{
                // 工事の場合
                if (m_pMyAppRecord.m_sParameter = '1') then
                begin
}
// <222> DEL end
                    // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
                    if ((JKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                        (JKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                    begin
                        if giReferFlag = NORMAL then
                        begin
                            // 更新ボタンに移動
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                            abort;
                        end;
                        exit;
                    end;
// <222> DEL                end;

                if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
                begin
			        if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE) or
                       (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ボタンに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end
                else
                begin
                    if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_KEIKIN) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ボタンに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end;
			end;
		end;
// <212> MOD end

// <215> ADD start
        if (Msg.CharCode = VK_DOWN) and
           (JKeiyaku_DMemData.RecNo >= 999)  then
        begin
            if giReferFlag = NORMAL then
            begin
                // 更新ボタンに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                abort;
            end;
            exit;
        end;

        if (Msg.CharCode = VK_RIGHT) and
           (JKeiyaku_DMemData.RecNo >= 999)  then
        begin
// <222> DEL start
{
            // 工事の場合
            if (m_pMyAppRecord.m_sParameter = '1') then
            begin
}
// <222> DEL end
                // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
                if ((JKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                   (JKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                begin
                    if giReferFlag = NORMAL then
                    begin
                        // 更新ボタンに移動
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                        abort;
                    end;
                    exit;
                end;
// <222> DEL            end;

            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
                if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE) then
                begin
                    Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                    abort;
                end;
                if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                begin
                    Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                    abort;
                end;
                exit;
            end
            else
            begin
                if (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
                begin
                    Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                    abort;
                end;
                exit;
            end;
        end;
// <215> ADD end

		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
			if (JKeiyaku_DMemData.RecNo = 1) and (Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_KEINEN) then
			begin
//<TAX> MOD St
                if (rdJTaxIn.Checked and rdJTaxIn.CanFocus) then
                begin
                    rdJTaxIn.SetFocus();
                end
                else if (rdJTaxOut.Checked and rdJTaxOut.CanFocus) then
                begin
                    rdJTaxOut.SetFocus();
                end
                else
                begin
                    // 実在タブに移動
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
                end;
{
				// 実在タブに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
}
//<TAX> MOD Ed
				abort;
				exit;
			end;
		end;

//<TAX> ADD St
        case Msg.CharCode of
            VK_F2   : MSPFunctionBarFunctionClick(MSPFunctionBar, 2);
            VK_F3   : MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
        end;
//<TAX> ADD Ed
		exit;
	end;

	// 実在入金情報
	if m_AcControl = Jituzai_DdxDBGrid_Nyu then
	begin
		if Msg.CharCode=VK_ESCAPE then	// ESC処理
		begin
			if JNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				JNyukin_DMemData.Cancel;
				exit;
			end
			else
			begin
				if giReferFlag = NORMAL then
				begin
					// 外部コードに移動
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
					abort;
				end;
				exit;
			end;
		end;

// <212> MOD start
{
		// END
		if (Msg.CharCode=VK_END) and
		   (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ﾎﾞﾀﾝに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;
}
		// END
		if (Msg.CharCode=VK_END) then
		begin
            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
		        if (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTNAME) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end
            else
            begin
		        if (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end;
		end;
// <212> MOD end

		if ((Msg.CharCode=VK_UP) or (Msg.CharCode=VK_LEFT)) and
		   (JNyukin_DMemData.RecNo = 1) and
		   (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIBI) then
		begin
			if JNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				exit;
			end
			else
			begin
// <212> MOD start
{
				// 契約情報に移動
				JKeiyaku_DMemData.RecNo := 1;
				Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
				abort;
				exit;
}
				if giReferFlag = NORMAL then
				begin
                    if Jituzai_ChkBox_Tokusyu.Visible = true then
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu')
                    else
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_RenChar');
					Abort;
				end;
				exit;
// <212> MOD end
			end;
		end;

// <212> MOD start
{
		// ENTER処理
		if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
		   (JNyukin_DMemData.RecNo = 10) and
		   (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ボタンに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;
}
		// ENTER処理
		if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
		   (JNyukin_DMemData.RecNo = 10) then
		begin
            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
		        if (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTCODE) or
		           (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTNAME) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ボタンに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end
            else
            begin
		        if (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ボタンに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end;
		end;
// <212> MOD end


		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
// <212> MOD start
			if (JNyukin_DMemData.RecNo = 1) and (Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIBI) then
			begin
{
				// 契約情報に移動
				JKeiyaku_DMemData.RecNo := 1;
				Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
				abort;
}
				// 実在タブに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
				abort;
				exit;
// <212> MOD end
			end;
			exit;
		end;
		exit;
	end;

// <SEI> ADD start
	// 実在請求・入金予定ｸﾞﾘｯﾄﾞ
	if m_AcControl = Jituzai_DdxDBGrid_Seikyu then
	begin
    	// ESC
		if Msg.CharCode=VK_ESCAPE then
		begin
			if giReferFlag = NORMAL then
			begin
				if JSeikyu_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
				begin
					JSeikyu_DMemData.Cancel;
					exit;
				end
				else
				begin
					// 外部コードに移動
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
					abort;
					exit;
				end;
			end
			else
				exit;
		end;

		// END
   		if (Msg.CharCode=VK_END) then
        begin
            if (Jituzai_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_NYUKINYOTEIBI) then
            begin
		        if giReferFlag = NORMAL then
		        begin
			        // 更新ﾎﾞﾀﾝに移動
			        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
			        abort;
		        end;
		        exit;
            end;
        end;

        // ↑, ← 先頭行先頭ｶﾗﾑ
		if ((Msg.CharCode=VK_UP) or (Msg.CharCode=VK_LEFT)) and
		   (JSeikyu_DMemData.RecNo = 1) and
		   (Jituzai_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_SEIKYUYOTEIBI) then
		begin
			if JSeikyu_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				exit;
			end
			else
			begin
				if giReferFlag = NORMAL then
				begin
                	if Jituzai_ENEdit_SeikyusakiCd.CanFocus then
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyusakiCd')
                    else if Jituzai_ETEdit_SeikyusakiCd.CanFocus then
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyusakiCd')
                    else if Jituzai_ChkBox_Tokusyu.CanFocus then
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu')
                    else
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_RenChar');
					Abort;
				end;
				exit;
			end;
		end;

 		// ENTER, Tab処理
		if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
           (JSeikyu_DMemData.RecNo >= 999) then
        begin
            if (Jituzai_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_NYUKINYOTEIBI) then
            begin
                if giReferFlag = NORMAL then
                begin
                    // 更新ボタンに移動
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                    abort;
                end;
                exit;
            end;
		end;

        // ↓
        if (Msg.CharCode = VK_DOWN) and
           (JSeikyu_DMemData.RecNo >= 999)  then
        begin
            if giReferFlag = NORMAL then
            begin
                // 更新ボタンに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                abort;
            end;
            exit;
        end;

        // →
        if (Msg.CharCode = VK_RIGHT) and
           (JSeikyu_DMemData.RecNo >= 999)  then
        begin
            if (Jituzai_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_NYUKINYOTEIBI) then
            begin
                Jituzai_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                abort;
            end;
            exit;
        end;

        // Shift+Tab
		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
			if (JSeikyu_DMemData.RecNo = 1) and (Jituzai_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_SEIKYUYOTEIBI) then
			begin
                if Jituzai_ENEdit_SeikyusakiCd.CanFocus then
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyusakiCd')
                else if Jituzai_ETEdit_SeikyusakiCd.CanFocus then
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyusakiCd')
				else
					// 実在タブに移動
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
				abort;
				exit;
			end;
		end;

        // F3, F5
        case Msg.CharCode of
//         VK_F3:  MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
        VK_F5:  MSPFunctionBarFunctionClick(MSPFunctionBar, 5);
        end;

		exit;
	end;

	// 合計請求・入金予定
	if m_AcControl = Goukei_DdxDBGrid_Seikyu then
	begin
    	// ESC
		if Msg.CharCode=VK_ESCAPE then
		begin
			if giReferFlag = NORMAL then
			begin
				if GSeikyu_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
				begin
					GSeikyu_DMemData.Cancel;
					exit;
				end
				else
				begin
					// 外部コードに移動
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
					abort;
				end;
			end
			else
				exit;
		end;

		// END
		if (Msg.CharCode=VK_END) then
		begin
            if (Goukei_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_NYUKINYOTEIBI) then
            begin
                if giReferFlag = NORMAL then
                begin
                    // 更新ﾎﾞﾀﾝに移動
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                    abort;
                end;
                exit;
            end;
		end;

        // ↑, ← 先頭行先頭ｶﾗﾑ
		if ((Msg.CharCode=VK_UP) or (Msg.CharCode=VK_LEFT)) and
		   (GSeikyu_DMemData.RecNo = 1) and
		   (Goukei_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_SEIKYUYOTEIBI) then
		begin
			if GSeikyu_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				exit;
			end
			else
			begin
				if giReferFlag = NORMAL then
				begin
                	if Goukei_ENEdit_SeikyusakiCd.CanFocus then
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyusakiCd')
                    else if Goukei_ETEdit_SeikyusakiCd.CanFocus then
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyusakiCd')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_RenChar');
					abort;
				end;
				exit;
			end;
		end;

		// ENTER, Tab
        if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
           (GSeikyu_DMemData.RecNo >= 999) then
        begin
            if (Goukei_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_NYUKINYOTEIBI) then
            begin
                if giReferFlag = NORMAL then
                begin
                    // 更新ﾎﾞﾀﾝに移動
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                    abort;
                end;
                exit;
            end;
        end;

        // ↓
        if (Msg.CharCode = VK_DOWN) and
           (GSeikyu_DMemData.RecNo >= 999)  then
        begin
            if giReferFlag = NORMAL then
            begin
                // 更新ボタンに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                abort;
            end;
            exit;
        end;

        // →
        if (Msg.CharCode = VK_RIGHT) and
           (GSeikyu_DMemData.RecNo >= 999)  then
        begin
            if (Goukei_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_NYUKINYOTEIBI) then
            begin
                Goukei_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                abort;
            end;
            exit;
        end;

        // Shift+Tab 先頭行先頭ｶﾗﾑ
		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
			if (GSeikyu_DMemData.RecNo = 1) and (Goukei_DdxDBGrid_Seikyu.FocusedColumn = COL_SEIKYU_SEIKYUYOTEIBI) then
			begin
                if Goukei_ENEdit_SeikyusakiCd.CanFocus then
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyusakiCd')
                else if Goukei_ETEdit_SeikyusakiCd.CanFocus then
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyusakiCd')
				else
					// タブに移動
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_PMTab');
				abort;
				exit;
			end;
		end;

        // F3, F5
        case Msg.CharCode of
//         VK_F3:  MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
        VK_F5:  MSPFunctionBarFunctionClick(MSPFunctionBar, 5);
        end;

		exit;
	end;
// <SEI> ADD end

	// 合計契約情報
	if m_AcControl = Goukei_DdxDBGrid_Kei then
	begin
		if Msg.CharCode=VK_ESCAPE then	// ESC処理
		begin
			if giReferFlag = NORMAL then
			begin
				if GKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
				begin
					GKeiyaku_DMemData.Cancel;
					exit;
				end
				else
				begin
					// 外部コードに移動
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
					abort;
				end;
			end
			else
				exit;
		end;
// <212> MOD start
{
		// END
		if (Msg.CharCode=VK_END) and
		   (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ﾎﾞﾀﾝに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;
}
		// END
		if (Msg.CharCode=VK_END) then
		begin
            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
		        if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end
            else
            begin
		        if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end;
		end;
// <212> MOD end

		//
		if ((Msg.CharCode=VK_UP) or (Msg.CharCode=VK_LEFT)) and
		   (GKeiyaku_DMemData.RecNo = 1) and
		   (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_KEINEN) then
		begin
			if GKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				exit;
			end
			else
			begin
				if giReferFlag = NORMAL then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_RenChar');
					abort;
				end;
				exit;
			end;
		end;

// <212> MOD start
{
		// ENTER処理
		if m_iAccProKbn <> 0 then
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
			   (GKeiyaku_DMemData.RecNo = 8) and
			   (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
			begin
				// 入金情報に移動
				GNyukin_DMemData.RecNo := 1;
				Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Nyu');
				abort;
				exit;
			end;
		end
		else
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
    		   (GKeiyaku_DMemData.RecNo = 8) and
			   (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_KEIKIN) then
			begin
				// 入金情報に移動
				GNyukin_DMemData.RecNo := 1;
				Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Nyu');
				abort;
				exit;
			end;
		end;
}
		// ENTER処理
		if m_iAccProKbn <> 0 then
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
			   (GKeiyaku_DMemData.RecNo >= 999) then
			begin
// <222> DEL start
{
                // 工事の場合
                if (m_pMyAppRecord.m_sParameter = '1') then
                begin
}
// <222> DEL end
                    // 原票No,仕訳入力形式有りの場合
                    if ((GKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                       (GKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                    begin
                        if giReferFlag = NORMAL then
                        begin
                            // 更新ボタンに移動
                            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                            abort;
                        end;
                        exit;
                    end;
// <222> DEL                end;

                if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
                begin
                    if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE) or
                       (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ﾎﾞﾀﾝに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end
                else
                begin
                    if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ﾎﾞﾀﾝに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end;
			end;
		end
		else
		begin
			if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
    		   (GKeiyaku_DMemData.RecNo >= 999) then
			begin
// <222> DEL start
{
                // 工事の場合
                if (m_pMyAppRecord.m_sParameter = '1') then
                begin
}
// <222> DEL end
                    // 原票No,仕訳入力形式有りの場合
                    if ((GKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                       (GKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                    begin
                        if giReferFlag = NORMAL then
                        begin
                            // 更新ボタンに移動
                            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                            abort;
                        end;
                        exit;
                    end;
// <222> DEL                end;

                if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
                begin
// <222> DEL start
{
                    // 工事の場合
                    if (m_pMyAppRecord.m_sParameter = '1') then
                    begin
}
// <222> DEL end
		                // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
                        if ((GKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                        (GKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                        begin
                            if giReferFlag = NORMAL then
                            begin
                                // 更新ボタンに移動
                                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                                abort;
                            end;
                            exit;
                        end;
// <222> DEL                    end;

                    if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE) or
                       (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ﾎﾞﾀﾝに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end
                else
                begin
                    if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_KEIKIN) then
                    begin
			            if giReferFlag = NORMAL then
			            begin
				            // 更新ﾎﾞﾀﾝに移動
				            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				            abort;
			            end;
			            exit;
                    end;
                end;
			end;
		end;
// <212> MOD end

// <215> ADD start
        if (Msg.CharCode = VK_DOWN) and
           (GKeiyaku_DMemData.RecNo >= 999)  then
        begin
            if giReferFlag = NORMAL then
            begin
                // 更新ボタンに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                abort;
            end;
            exit;
        end;

        if (Msg.CharCode = VK_RIGHT) and
           (GKeiyaku_DMemData.RecNo >= 999)  then
        begin
// <222> DEL start
{
            // 工事の場合
            if (m_pMyAppRecord.m_sParameter = '1') then
            begin
}
// <222> DEL end
                // 原票No,仕訳入力形式有りの場合
                if ((GKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
                   (GKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
                begin
                    if giReferFlag = NORMAL then
                    begin
                        // 更新ボタンに移動
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
                        abort;
                    end;
                    exit;
                end;
// <222> DEL            end;

            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
                if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE) then
                begin
                    Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                    abort;
                end;
                if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_COSTNAME) then
                begin
                    Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                    abort;
                end;
                exit;
            end
            else
            begin
                if (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_ZEIGAKU) then
                begin
                    Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                    abort;
                end;
                exit;
            end;
        end;
// <215> ADD end

		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin
			if (GKeiyaku_DMemData.RecNo = 1) and (Goukei_DdxDBGrid_Kei.FocusedColumn = COL_KEINEN) then
			begin
				// 実在タブに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_PMTab');
				abort;
				exit;
			end;
		end;
//<TAX> ADD St
        case Msg.CharCode of
            VK_F2   : MSPFunctionBarFunctionClick(MSPFunctionBar, 2);
            VK_F3   : MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
        end;
//<TAX> ADD Ed
		exit;
	end;

	// 合計入金情報
	if m_AcControl = Goukei_DdxDBGrid_Nyu then
	begin
		if Msg.CharCode=VK_ESCAPE then	// ESC処理
		begin
			if GNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			begin
				GNyukin_DMemData.Cancel;
				exit;
			end
			else
			begin
				if giReferFlag = NORMAL then
				begin
					// 外部コードに移動
					if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
					else
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
					abort;
				end;
				exit;
			end;
		end;

// <212> MOD start
{
		// END
		if (Msg.CharCode=VK_END) and
		   (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ﾎﾞﾀﾝに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;
}
		// END
		if (Msg.CharCode=VK_END) then
		begin
            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
                if (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTNAME) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end
            else
            begin
                if (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ﾎﾞﾀﾝに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end;
		end;
// <212> MOD end

		if ((Msg.CharCode=VK_UP) or (Msg.CharCode=VK_LEFT)) and
		   (GNyukin_DMemData.RecNo = 1) and
		   (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIBI) then
		begin
			if GNyukin_DMemData.State <> dsEdit then		// 新規ﾃﾞｰﾀ？
			begin
// <212> MOD start
{
				// 契約情報に移動
				GKeiyaku_DMemData.RecNo := 1;
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
				abort;
				exit;
}
				if giReferFlag = NORMAL then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_RenChar');
					abort;
				end;
				exit;
// <212> MOD end
			end;
		end;

// <212> ADD start
{
		// ENTER処理
		if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
		   (GNyukin_DMemData.RecNo = 10) and
		   (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
		begin
			if giReferFlag = NORMAL then
			begin
				// 更新ボタンに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				abort;
			end;
			exit;
		end;
}
		// ENTER処理
		if ((Msg.CharCode=VK_RETURN) or ((Msg.CharCode=VK_TAB) and (sShift=[]))) and
		   (GNyukin_DMemData.RecNo = 10) then
		begin
            if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
            begin
		        if (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTCODE) or
		           (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTNAME) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ボタンに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end
            else
            begin
		        if (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIGAKU) then
                begin
			        if giReferFlag = NORMAL then
			        begin
				        // 更新ボタンに移動
				        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
				        abort;
			        end;
			        exit;
                end;
            end;
		end;
// <212> ADD end

		if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
		begin

			if (GNyukin_DMemData.RecNo = 1) and (Goukei_DdxDBGrid_Nyu.FocusedColumn = COL_YOTEIBI) then
			begin
// <212> MOD start
{

				// 契約情報に移動
				GKeiyaku_DMemData.RecNo := 1;
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
				abort;
}
				// 実在タブに移動
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_PMTab');
// <212> MOD end
			end;
			exit;
		end;
		exit;
	end;

	// 簡略名称（詳細）
	if (m_AcControl = Jituzai_ETEdit_SimpleName) or
		(m_AcControl = Goukei_ETEdit_SimpleName) then
	begin
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			if (Msg.CharCode=VK_F8) then
				Jituzai_ETEdit_SimpleName.Text := MJSKabuCut (Jituzai_ETEdit_LongName.Text, 14);
		end
		else
		begin
			if (Msg.CharCode=VK_F8) then
				Goukei_ETEdit_SimpleName.Text := MjsCopy(Goukei_ETEdit_LongName.Text, 14);
		end;
	end;

	// モード切替
	// 受注先
//{// <144>復帰↓
	if (m_AcControl = Jituzai_ENEdit_CustomerCode) then
	begin
		if (Msg.CharCode=VK_F2) then
		begin
			m_bModeChg := true;
			Jituzai_ETEdit_CustomerName.Visible := true;
			Jituzai_ETEdit_CustomerName.Enabled := true;
//			Jituzai_ETEdit_CustomerName.TabOrder := 6;
			MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerName');
			Jituzai_ENEdit_CustomerCode.Value := 0;
			Jituzai_ENEdit_CustomerCode.InputFlag := true;
			Jituzai_LLabel_CustomerName.Caption := '';
			Jituzai_ENEdit_CustomerCode.Visible := false;
			Jituzai_ENEdit_CustomerCode.Enabled := false;
			exit;
		end;
	end;

	if (m_AcControl = Jituzai_ETEdit_CustomerCode) then
	begin
		if (Msg.CharCode=VK_F2) then
		begin
			m_bModeChg := true;
			Jituzai_ETEdit_CustomerName.Visible := true;
			Jituzai_ETEdit_CustomerName.Enabled := true;
//			Jituzai_ETEdit_CustomerName.TabOrder := 6;
			MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerName');
			Jituzai_ETEdit_CustomerCode.Text := '';
			Jituzai_LLabel_CustomerName.Caption := '';
			Jituzai_ETEdit_CustomerCode.Visible := false;
			Jituzai_ETEdit_CustomerCode.Enabled := false;
			exit;
		end;
	end;

	if (m_AcControl = Goukei_ENEdit_CustomerCode) then
	begin
		if (Msg.CharCode=VK_F2) then
		begin
			m_bModeChg := true;
			Goukei_ETEdit_CustomerName.Visible := true;
			Goukei_ETEdit_CustomerName.Enabled := true;
//			Goukei_ETEdit_CustomerName.TabOrder := 6;
			MjsSetFocus(Self, 'Goukei_ETEdit_CustomerName');
			Goukei_ENEdit_CustomerCode.Value := 0;
			Goukei_ENEdit_CustomerCode.InputFlag := true;
			Goukei_LLabel_CustomerName.Caption := '';
			Goukei_ENEdit_CustomerCode.Visible := false;
			Goukei_ENEdit_CustomerCode.Enabled := false;
			exit;
		end;
	end;

	if (m_AcControl = Goukei_ETEdit_CustomerCode) then
	begin
		if (Msg.CharCode=VK_F2) then
		begin
			m_bModeChg := true;
			Goukei_ETEdit_CustomerName.Visible := true;
			Goukei_ETEdit_CustomerName.Enabled := true;
//			Goukei_ETEdit_CustomerName.TabOrder := 6;
			MjsSetFocus(Self, 'Goukei_ETEdit_CustomerName');
			Goukei_ETEdit_CustomerCode.Text := '';
			Goukei_LLabel_CustomerName.Caption := '';
			Goukei_ETEdit_CustomerCode.Visible := false;
			Goukei_ETEdit_CustomerCode.Enabled := false;
			exit;
		end;
	end;

	if (m_AcControl = Jituzai_ETEdit_CustomerName) then
	begin
		if MasterInfo_DMemDataTorihikiUse.AsInteger <> 0 then
		begin
			if (Msg.CharCode=VK_F2) then
			begin
				m_bModeChg := false;
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
				begin
					Jituzai_ETEdit_CustomerCode.Visible := true;
					Jituzai_ETEdit_CustomerCode.Enabled := true;
//					Jituzai_ETEdit_CustomerCode.TabOrder := 6;
					MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerCode');
				end
				else
				begin
					Jituzai_ENEdit_CustomerCode.Visible := true;
					Jituzai_ENEdit_CustomerCode.Enabled := true;
//					Jituzai_ENEdit_CustomerCode.TabOrder := 6;
					MjsSetFocus(Self, 'Jituzai_ENEdit_CustomerCode');
				end;
				Jituzai_ETEdit_CustomerName.Text := '';
				Jituzai_ETEdit_CustomerName.Visible := false;
				Jituzai_ETEdit_CustomerName.Enabled := false;
				exit;
			end;
		end;
	end;

	if (m_AcControl = Goukei_ETEdit_CustomerName) then
	begin
		if MasterInfo_DMemDataTorihikiUse.AsInteger <> 0 then
		begin
			if (Msg.CharCode=VK_F2) then
			begin
				m_bModeChg := false;
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
				begin
					Goukei_ETEdit_CustomerCode.Visible := true;
					Goukei_ETEdit_CustomerCode.Enabled := true;
//					Goukei_ETEdit_CustomerCode.TabOrder := 6;
					MjsSetFocus(Self, 'Goukei_ETEdit_CustomerCode');
				end
				else
				begin
					Goukei_ENEdit_CustomerCode.Visible := true;
					Goukei_ENEdit_CustomerCode.Enabled := true;
//					Goukei_ENEdit_CustomerCode.TabOrder := 6;
					MjsSetFocus(Self, 'Goukei_ENEdit_CustomerCode');
				end;
				Goukei_ETEdit_CustomerName.Text := '';
				Goukei_ETEdit_CustomerName.Visible := false;
				Goukei_ETEdit_CustomerName.Enabled := false;
				exit;
			end;
		end;
	end;

//} // <144>復帰↑
	// 特殊工事
	if (m_AcControl = Jituzai_ChkBox_Tokusyu) then
	begin
		if ((Msg.CharCode=VK_TAB) and (sShift=[])) or
		   ((Msg.CharCode=VK_RETURN) and (sShift=[])) or
		   ((Msg.CharCode=VK_RIGHT) and (sShift=[])) or
		   ((Msg.CharCode=VK_DOWN) and (sShift=[])) then
		begin
//			if Jituzai_ETEdit_Fusen.Enabled = true then
//				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Fusen')
//			else
//			begin
                // 基本情報ﾀﾌﾞ
				if Jituzai_PMTab.Items.Selected = PAGE_KIHON then
				begin
// <106>
//                    if (Jituzai_ENEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_PersonCode')
//                    else if (Jituzai_ETEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_PersonCode')
//                    else if (Jituzai_ENEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_CustomerCode')
//                    else if (Jituzai_ETEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerCode')
//                    else
// <106>
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_HaifuKbn');

				end
                // 工事ﾀﾌﾞ
				else if Jituzai_PMTab.Items.Selected = PAGE_KOJI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_ZipCode1');
				end
                // 工事完成振替ﾀﾌﾞ
				else if Jituzai_PMTab.Items.Selected = PAGE_KFURI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'MMasterKBN');
				end
                // 契約入金情報ﾀﾌﾞ
// <212> MOD                else if Jituzai_PMTab.Items.Selected = PAGE_NYUKIN	 then
                else if Jituzai_PMTab.Items.Selected = PAGE_KEIYAKU	 then
				begin
//<TAX> MOD St
{
					JKeiyaku_DMemData.RecNo := 1;
					Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
}
                    if (rdJTaxIn.Checked and rdJTaxIn.CanFocus) then
                    begin
                        rdJTaxIn.SetFocus();
                    end
                    else if (rdJTaxOut.Checked and rdJTaxOut.CanFocus) then
                    begin
                        rdJTaxOut.SetFocus();
                    end
                    else
                    begin
                        JKeiyaku_DMemData.RecNo := 1;
                        Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
                    end;
//<TAX> MOD Ed
				end
// <212> ADD start
                else if Jituzai_PMTab.Items.Selected = PAGE_NYUKIN	 then
				begin
					JNyukin_DMemData.RecNo := 1;
					Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
				end
// <212> ADD end
// <SEI> ADD start
				// 請求・入金予定
                else if Jituzai_PMTab.Items.Selected = PAGE_SEIKYU then
                begin
    										// 請求先
                    if Jituzai_ETEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyusakiCd');
                    end
                    else if Jituzai_ENEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyusakiCd');
                    end
                    else	   				// 請求情報ｸﾞﾘｯﾄﾞ
                    begin
						JSeikyu_DMemData.RecNo := 1;
                        Jituzai_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Seikyu');
                    end;
				end
// <SEI> ADD end
                // その他ﾀﾌﾞ
                else if Jituzai_PMTab.Items.Selected = PAGE_SONOTA	 then
                begin
                    for i := 1 to 10 do
                    begin
                        if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Visible then
                        begin
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i));
                            Abort;
                        end;
                    end;
                    for i := 1 to 10 do
                    begin
                        if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Visible then
                        begin
                            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i));
                            Abort;
                        end;
                    end;
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                    Abort;
                end
// <205> ADD start
                // 備考・概要ﾀﾌﾞ
                else if Jituzai_PMTab.Items.Selected = PAGE_BIKOU then
                begin
// <209> MOD start
//					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
// <209> MOD end
                end;
// <205> ADD start
//			end;
			Abort;
		end;
	end;
	// ｷｬﾚｯﾄが入力ﾌｨｰﾙﾄﾞの途中にある場合、Left,Rightｷｰでの
	// Focus移動は禁止する。
   	if (m_AcControl is TMTxtEdit) then
	begin
		if Msg.CharCode = VK_LEFT then
		begin
			if not MjsChkCurTop(m_AcControl) then
			Exit;
		end;
		if Msg.CharCode = VK_RIGHT then
		begin
			if not MjsChkCurEnd(m_AcControl) then
			Exit;
		end;

{		iSelStart	:= TMTxtEdit(m_AcControl).SelStart;
		iSelLength	:= TMTxtEdit(m_AcControl).SelLength;
		iLength		:= Length(TMTxtEdit(m_AcControl).Text);

		if (Msg.CharCode=VK_LEFT) and (sShift=[]) then
		begin
			if (iSelStart+iSelLength > 0) then
				Exit;
		end;

		if (Msg.CharCode=VK_RIGHT) and (sShift=[]) then
		begin
			if (iSelStart < iLength) then
				Exit;
		end;}
	end;

	// 実在付箋コメント
	if (m_AcControl = Jituzai_ETEdit_Fusen) then
	begin
		if ((Msg.CharCode=VK_TAB) and (sShift=[])) or
		   ((Msg.CharCode=VK_RETURN) and (sShift=[])) or
		   ((Msg.CharCode=VK_RIGHT) and (sShift=[])) or
		   ((Msg.CharCode=VK_DOWN) and (sShift=[])) then
		begin
            if Jituzai_PMTab.Items.Selected = PAGE_KIHON then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_HaifuKbn');
            end
            else if Jituzai_PMTab.Items.Selected = PAGE_KOJI then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_ZipCode1');
            end
// <212> MOD start
//            else if Jituzai_PMTab.Items.Selected = PAGE_NYUKIN	 then
            else if Jituzai_PMTab.Items.Selected = PAGE_KEIYAKU	 then
// <212> MOD end
            begin
                JKeiyaku_DMemData.RecNo := 1;
                Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
            end
// <212> ADD start
            else if Jituzai_PMTab.Items.Selected = PAGE_NYUKIN	 then
            begin
                JNyukin_DMemData.RecNo := 1;
                Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
            end
// <212> ADD end
// <SEI> ADD start
			// 請求・入金予定
            else if Jituzai_PMTab.Items.Selected = PAGE_SEIKYU then
            begin
										// 請求先
                if Jituzai_ETEdit_SeikyusakiCd.CanFocus then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyusakiCd');
                end
                else if Jituzai_ENEdit_SeikyusakiCd.CanFocus then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyusakiCd');
                end
                else	   				// 請求情報ｸﾞﾘｯﾄﾞ
                begin
					JSeikyu_DMemData.RecNo := 1;
                    Jituzai_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Seikyu');
                end;
			end
// <SEI> ADD end
            else if Jituzai_PMTab.Items.Selected = PAGE_SONOTA	 then
            begin
                for i := 1 to 10 do
                begin
                    if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Visible then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i));
                        abort;
                        exit;
                    end;
                end;
                for i := 1 to 10 do
                begin
                    if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Visible then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i));
                        abort;
                        exit;
                    end;
                end;
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                abort;
                exit;

            end;

			abort;
		end;
	end;

	// 合計連想
	if (m_AcControl = Goukei_ETEdit_RenChar) then
	begin
		if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
		   ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
		   ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
		   ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
		begin
//			if Goukei_ETEdit_Fusen.Enabled = true then
//				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Fusen')
//			else
//			begin
				if Goukei_PMTab.Items.Selected = PAGE_KIHON then
				begin
// <106>
//                    if (Goukei_ENEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_PersonCode')
//                    else if (Goukei_ETEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_PersonCode')
//                    else if (Goukei_ENEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger <> 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_CustomerCode')
//                    else if (Goukei_ETEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger = 2) then
//                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_CustomerCode')
//                    else
// <106>
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_RootKbn');
				end
				else if Goukei_PMTab.Items.Selected = PAGE_KOJI then
				begin
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_ZipCode1');
				end
// <205> ADD start
// <212> MOD start
//                else if  Goukei_PMTab.Items.Selected = 3 then
//<SEI> DEL                else if  Goukei_PMTab.Items.Selected = 4 then
                else if  Goukei_PMTab.Items.Selected = PAGE_GOUKEI_BIKOU then  //<SEI> ADD
// <212> MOD end
                begin
// <209> MOD start
//					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_BIKO');
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Gaiyou');
// <209> MOD end
                end
// <205> ADD end
// <SEI> ADD start
				// 請求・入金予定
				else if Goukei_PMTab.Items.Selected = PAGE_GOUKEI_SEIKYU then
                begin
    										// 請求先
                    if Goukei_ETEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyusakiCd');
                    end
                    else if Goukei_ENEdit_SeikyusakiCd.CanFocus then
                    begin
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyusakiCd');
                    end
                    else		 			// 請求情報ｸﾞﾘｯﾄﾞ
                    begin
						GSeikyu_DMemData.RecNo := 1;
                        Goukei_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Seikyu');
                    end;
                end
// <SEI> ADD end
// <212> ADD start
                else if Goukei_PMTab.Items.Selected = 3	 then
                begin
                    GNyukin_DMemData.RecNo := 1;
                    Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Nyu');
                end
// <212> ADD start
				else
				begin
					GKeiyaku_DMemData.RecNo := 1;
					Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
					MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
				end;
//			end;
			Abort;
		end;
	end;
	// 合計付箋コメント
	if (m_AcControl = Goukei_ETEdit_Fusen) then
	begin
		if ((Msg.CharCode=VK_TAB) and (sShift=[])) or
		   ((Msg.CharCode=VK_RETURN) and (sShift=[])) or
		   ((Msg.CharCode=VK_RIGHT) and (sShift=[])) or
		   ((Msg.CharCode=VK_DOWN) and (sShift=[])) then
		begin
			if Goukei_PMTab.Items.Selected = PAGE_KIHON then
			begin
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_ZipCode1');
			end
// <SEI> ADD start
			// 請求・入金予定
			else if Goukei_PMTab.Items.Selected = PAGE_GOUKEI_SEIKYU then
            begin
										// 請求先
                if Goukei_ETEdit_SeikyusakiCd.CanFocus then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyusakiCd');
                end
                else if Goukei_ENEdit_SeikyusakiCd.CanFocus then
                begin
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyusakiCd');
                end
                else		 			// 請求情報ｸﾞﾘｯﾄﾞ
                begin
					GSeikyu_DMemData.RecNo := 1;
                    Goukei_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
                    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Seikyu');
                end;
            end
// <SEI> ADD end
			else
			begin
				GKeiyaku_DMemData.RecNo := 1;
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
			end;
			abort;
		end;
	end;

// <205> MOD start
{*
	// 備考
	if (m_AcControl = Jituzai_ETEdit_BIKO) then
	begin
    	// End,TAB処理
    	if (Msg.CharCode = VK_ESCAPE)                or
           ((Msg.CharCode = VK_TAB) and (sShift = [])) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            Abort;
        end;

        // Shift+Tab
		if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
        begin
    		MjsPrevCtrl(Self);
            Abort;
        end;

//<161>① - ST
		// Enter
		if (Msg.CharCode = VK_RETURN) and (sShift=[]) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            Abort;
        end
		// Shift+Enter
		else if (Msg.CharCode = VK_RETURN) and (sShift = [ssShift]) then
            Abort;
//<161>① - ED
        Exit;
    end;
*}
// <209> MOD start
//	// 実在備考
//	if (m_AcControl = Jituzai_ETEdit_BIKO) then
    // 工事概要
	if (m_AcControl = Jituzai_ETEdit_Gaiyou) then
// <209> MOD end
	begin

    	// ESC
    	if (Msg.CharCode = VK_ESCAPE) then
        begin
            // 外部コードに移動
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
            else
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
            abort;
            exit;
        end;

        // END
   		if (Msg.CharCode=VK_END) then
        begin
            // 更新ﾎﾞﾀﾝに移動
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            abort;
        end;

    	// TAB処理
        if ((Msg.CharCode = VK_TAB) and (sShift = [])) then
        begin
// <209> MOD start
//		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
// <209> MOD end
            Abort;
        end;
        // Shift+Tab
		if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
        begin
			// 実在タブに移動
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
			abort;
			exit;
        end;
		if (Msg.CharCode = VK_RETURN) and (sShift=[]) then
        begin
// <209> MOD start
//		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
// <209> MOD end
            Abort;
        end
		// Shift+Enter
		else if (Msg.CharCode = VK_RETURN) and (sShift = [ssShift]) then
            Abort;
        Exit;
    end;
// <209> MOD start
{
    // 実在工事概要
	if (m_AcControl = Jituzai_ETEdit_Gaiyou) then
}
	// 実在備考
	if (m_AcControl = Jituzai_ETEdit_BIKO) then
// <209> MOD end
	begin
    	// ESC
    	if (Msg.CharCode = VK_ESCAPE) then
        begin
            // 外部コードに移動
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
            else
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
            abort;
            exit;
        end;

        // END
   		if (Msg.CharCode=VK_END) then
        begin
            // 更新ﾎﾞﾀﾝに移動
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            abort;
        end;

    	// TAB処理
        if ((Msg.CharCode = VK_TAB) and (sShift = [])) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            Abort;
        end;

        // Shift+Tab
		if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
        begin
// <209> MOD start
//			MjsDispCtrl.MjsSetFocus(Self, 'Goukei_PMTab');
        // 工事登録
// <222> DEL        if ( m_pMyAppRecord.m_sParameter = '1' ) then
    	    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
// <222> DEL start
{
        // ﾌﾟﾛｼﾞｪｸﾄ登録
        else
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
}
// <222> DEL end
// <209> MOD end
            Abort;
        end;

		if (Msg.CharCode = VK_RETURN) and (sShift=[]) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            Abort;
        end
		// Shift+Enter
		else if (Msg.CharCode = VK_RETURN) and (sShift = [ssShift]) then
            Abort;
        Exit;
    end;
// <209> MOD start
{
	// 合計備考
	if (m_AcControl = Goukei_ETEdit_BIKO) then
}
	if (m_AcControl = Goukei_ETEdit_Gaiyou) then
// <209> MOD end
	begin
    	// ESC
    	if (Msg.CharCode = VK_ESCAPE) then
        begin
            // 外部コードに移動
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
            else
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
            abort;
            exit;
        end;

        // END
   		if (Msg.CharCode=VK_END) then
        begin
            // 更新ﾎﾞﾀﾝに移動
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
            abort;
        end;

    	// TAB処理
        if ((Msg.CharCode = VK_TAB) and (sShift = [])) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
// <209> MOD start
//		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Gaiyou');
		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_BIKO');
// <209> MOD end
            Abort;
        end;
        // Shift+Tab
		if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
        begin
			// 実在タブに移動
			MjsDispCtrl.MjsSetFocus(Self, 'Goukei_PMTab');
			abort;
			exit;
        end;
		if (Msg.CharCode = VK_RETURN) and (sShift=[]) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
// <209> MOD start
//		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Gaiyou');
		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_BIKO');
// <209> MOD end
            Abort;
        end
		// Shift+Enter
		else if (Msg.CharCode = VK_RETURN) and (sShift = [ssShift]) then
            Abort;
        Exit;
    end;
// <209> MOD start
{
    // 合計工事概要
	if (m_AcControl = Goukei_ETEdit_Gaiyou) then
}
	if (m_AcControl = Goukei_ETEdit_BIKO) then
// <209> MOD end
	begin
    	// ESC
    	if (Msg.CharCode = VK_ESCAPE) then
        begin
            // 外部コードに移動
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
            else
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
            abort;
            exit;
        end;

        // END
   		if (Msg.CharCode=VK_END) then
        begin
            // 更新ﾎﾞﾀﾝに移動
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
            abort;
        end;

    	// TAB処理
        if ((Msg.CharCode = VK_TAB) and (sShift = [])) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
            Abort;
        end;

        // Shift+Tab
		if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
        begin
    		MjsPrevCtrl(Self);
            Abort;
        end;

		if (Msg.CharCode = VK_RETURN) and (sShift=[]) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
            Abort;
        end
		// Shift+Enter
		else if (Msg.CharCode = VK_RETURN) and (sShift = [ssShift]) then
            Abort;
        Exit;
    end;

// <205> MOD end
// <SEI> ADD start
	// 実在請求先
	if (m_AcControl = Jituzai_ENEdit_SeikyusakiCd) or
     	(m_AcControl = Jituzai_ETEdit_SeikyusakiCd) then
    begin
    	// 前へ
        if ((Msg.CharCode = VK_LEFT) and (sShift = [])) or
           ((Msg.CharCode = VK_UP)    and (sShift = [])) then
        begin
			if giReferFlag = NORMAL then
			begin
                if Jituzai_ChkBox_Tokusyu.Visible = true then
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu')
				else
					MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_RenChar');
				Abort;
			end
		end;
    end;

   	// 合計請求先
	if (m_AcControl = Goukei_ENEdit_SeikyusakiCd) or
     	(m_AcControl = Goukei_ETEdit_SeikyusakiCd) then
    begin
    	// 前へ
        if ((Msg.CharCode = VK_LEFT) and (sShift = [])) or
           ((Msg.CharCode = VK_UP)    and (sShift = [])) then
        begin
			if giReferFlag = NORMAL then
			begin
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_RenChar');
				Abort;
			end
		end;
    end;

	// 実在一括請求先工事
	if (m_AcControl = Jituzai_ENEdit_SeikyuKoujiCd) or
     	(m_AcControl = Jituzai_ETEdit_SeikyuKoujiCd) then
    begin
    	// 次へ
        if ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
           ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
           ((Msg.CharCode = VK_RIGHT) and (sShift = [])) or
           ((Msg.CharCode = VK_DOWN) and (sShift = [])) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
            abort;
		end;
    end;

	// 合計一括請求先工事
	if (m_AcControl = Goukei_ENEdit_SeikyuKoujiCd) or
     	(m_AcControl = Goukei_ETEdit_SeikyuKoujiCd) then
    begin
    	// 次へ
        if ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
           ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
           ((Msg.CharCode = VK_RIGHT) and (sShift = [])) or
           ((Msg.CharCode = VK_DOWN) and (sShift = [])) then
        begin
            // 更新ﾎﾞﾀﾝへ移動
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
            abort;
		end;
    end;
// <SEI> ADD end
	// ﾏｽﾀ区分ｺﾝﾎﾞ
	if (m_AcControl = MMasterKBN) then
    begin
        if ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
           ((Msg.CharCode = VK_TAB)    and (sShift = [])) then
        begin
//<162> - ST
{
            // ｸﾞﾘｯﾄﾞへ移動
            dxKanseiGid.FocusedColumn := 1;
		    MjsDispCtrl.MjsSetFocus(Self, 'dxKanseiGid');
            Abort;
}
			if ((Msg.CharCode = VK_RETURN) and (sShift = [])) then
				fnKanseiFuriInfoDsp();

			if dxKanseiGid.Enabled = true then
			begin
	            // ｸﾞﾘｯﾄﾞへ移動
    	        dxKanseiGid.FocusedColumn := 1;
			    MjsDispCtrl.MjsSetFocus(Self, 'dxKanseiGid');
            	Abort;
			end
			else
			begin
				if MMasterKBN.DroppedDown = true then
					MMasterKBN.DroppedDown := false;
				abort;
			end;
//<162> - ED
        end;

//<162> - ST
		if (MMasterKBN.DroppedDown = true) and
		   ((Msg.CharCode = VK_LEFT) and (sShift = [])) or
		   ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) then
			exit;
//<162> - ED
    end;

    // 工事完成振替ｸﾞﾘｯﾄﾞ
	if TComponent(Screen.ActiveControl).Name = 'dxKanseiGid' then
    begin
        // Shift+Tab
    	if (Msg.CharCode = VK_TAB) and (sShift = [ssShift]) then
        begin
			if (JKansei.RecNo = 1)             and
               (dxKanseiGid.FocusedColumn = 1) then
            begin
                MjsDispCtrl.MjsSetFocus(Self, 'MMasterKBN');
                MMasterKBN.ItemIndex    :=  0;          // <122>
                MMasterKBN.DroppedDown  :=  true;       // <122>
                Abort;
            end;
        end;

// ↓↓↓<122> 手入力時の桁数/属性対応
        if (( Msg.CharCode = VK_RETURN )  or
            ( Msg.CharCode = VK_RIGHT  )  or
            ( Msg.CharCode = VK_TAB    )) and ( sShift = [] ) then
        begin
            // ｺｰﾄﾞ
            if ( TdxDBGrid(Screen.ActiveControl).Columns[1].Name = 'dxKanseiGidCODE' ) then
            begin
                with JKanseiDataSource.DataSet do
                begin
                    lvFld := FieldByName('GCODE');
                    if ( TdxDBGrid(Screen.ActiveControl).State = tsEditing ) then
                            lvCode := TdxDBGrid(Screen.ActiveControl).EditingText
                    else    lvCode := lvFld.AsString;

                    // 属性対応
                    if ( JKansei.State in [dsInsert,dsEdit] ) then
                    begin
                        case JKanseiCodeAttr.AsInteger of
                            // 数値属性
                            0:  begin
                                    lvFld.AsString  :=
                                        ComArea.SetDspCodeAttr(lvCode, JKanseiCodeDigit.AsInteger, 0);
                                end;
                            // 数値(前ｾﾞﾛ有)属性
                            1:  begin
                                    lvFld.AsString  :=
                                        ComArea.SetDspCodeAttr(lvCode, JKanseiCodeDigit.AsInteger, 1);
                                end;
                            // ﾌﾘｰ属性
                            2:  begin
                                    lvFld.AsString  :=
                                        ComArea.SetDspCodeAttr(lvCode, JKanseiCodeDigit.AsInteger, 2);
                                end;
                        end;
                    end;
                end;
            end;
//<161>② - ST
			if ((Msg.CharCode = VK_RETURN) or ((Msg.CharCode = VK_TAB) and (sShift=[]))) and
			   (JKansei.RecNo = JKansei.RecordCount) and
			   (dxKanseiGid.FocusedColumn = 1) then
			begin
//<162> - ST
				if JKansei.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
					JKansei.Post;
//<162> - ED
	            // 更新ﾎﾞﾀﾝへ移動
			    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
				abort;
			end;
//<161>② - ED
        end;
// ↑↑↑<122>

        Exit;
    end;

	// End処理
	if Msg.CharCode = VK_END then
	begin
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '一覧(&T)' then
			begin
				if (m_AcControl = Jituzai_ETEdit_GCode) or (m_AcControl = Jituzai_ENEdit_GCode)then
				begin
					Beep;
					iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
					if iRet <> mrYes then
					begin
						abort;
						exit;
					end
					else
					begin
						// 書込み
						close;
						exit;
					end;
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						// 更新ボタンに移動
						MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
						abort;
					end;
					exit;
				end;
			end;
		end
		else
		begin
			if BSpeedButtonIS.Caption = '一覧(&T)' then
			begin
				if (m_AcControl = Goukei_ETEdit_GCode) or
					(m_AcControl = Goukei_ENEdit_GCode)then
				begin
					Beep;
					iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
					if iRet <> mrYes then
					begin
						abort;
						exit;
					end
					else
					begin
						// 書込み
						close;
						exit;
					end;
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						// 更新ボタンに移動
						MjsDispCtrl.MjsSetFocus(Self, 'Goukei_BBitBtn_Ok');
						abort;
					end;
					exit;
				end;
			end;
		end;
	end;

	// ESC処理
	if Msg.CharCode=VK_ESCAPE then
	begin
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '一覧(&T)' then
			begin
				if (m_AcControl = Jituzai_ETEdit_GCode) or (m_AcControl = Jituzai_ENEdit_GCode) then
				begin
// <132> 工事登録はｸﾞﾘｯﾄﾞで終了
                    if m_pMyAppRecord.m_sParameter = '1' then
                    begin
    					Beep;
	    				iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
		    			if iRet <> mrYes then
			    		begin
				    		abort;
					    	exit;
    					end
	    				else
		    			begin
			    			// 書込み
				    		close;
					    	exit;
    					end;
                    end
// <129>↓
                    else
                    begin
                        ECombo_Header.SetFocus;             // ﾌﾟﾛｼﾞｪｸﾄ
                        Exit;
                    end;
// <129>↑
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						// 外部ｺｰﾄﾞに移動
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
						else
							MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
						abort;
					end;
					exit;
				end;
			end;
		end
		else
		begin
			if BSpeedButtonIS.Caption = '一覧(&T)' then
			begin
				if (m_AcControl = Goukei_ETEdit_GCode) or
					(m_AcControl = Goukei_ENEdit_GCode)then
				begin
// <132> 工事登録はｸﾞﾘｯﾄﾞで終了
                    if m_pMyAppRecord.m_sParameter = '1' then
                    begin
    					Beep;
	    				iRet := MjsMessageBoxEX(Self,'処理を終了します。よろしいですか？','終了',mjQuestion,mjYesNo,mjDefYes);
		    			if iRet <> mrYes then
			    		begin
				        		abort;
						    exit;
    					end
	    				else
		    			begin
			    			// 書込み
				    		close;
					    	exit;
    					end;
                    end
// <129>↓ﾌﾟﾛｼﾞｪｸﾄｺﾝﾎﾞに移動
                    else
                    begin
                        ECombo_Header.SetFocus;             // ﾌﾟﾛｼﾞｪｸﾄ
                        Exit;
                    end;
// <129>↑
				end
				else
				begin
					if giReferFlag = NORMAL then
					begin
						// 外部ｺｰﾄﾞに移動
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
						else
							MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
						abort;
					end;
					exit;
				end;
			end;
		end;
	end;


	// TAB,Enter,→,↓処理
	if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
	   ((Msg.CharCode = VK_RETURN) and (sShift = [])) or
	   ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) or
	   ((Msg.CharCode = VK_DOWN)   and (sShift = [])) then
	begin
// <216> MOD start
        if (m_AcControl = Jituzai_ENEdit_KojKbn2) then
        begin
            if Jituzai_ENEdit_KojKbn2.Value = 1 then
            begin
                if Jituzai_ENEdit_SalesBase.Enabled = true then
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SalesBase')
                else
                    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_BBitBtn_Ok');
                Abort;
            end
            else
            begin
                if Jituzai_ENEdit_SalesKmkCd.Enabled = false then
                    Jituzai_ENEdit_SalesKmkCd.Enabled := true;
                MjsNextCtrl(Self);
                Abort;
            end;
        end;
//<TAX> DEL St
{
        else
        begin
            MjsNextCtrl(Self);
            Abort;
        end;
}
//<TAX> DEL Ed
// <216> MOD end
//<TAX> ADD St
        if ((Msg.CharCode = VK_TAB)    and (sShift = [])) or
           ((Msg.CharCode = VK_RETURN) and (sShift = [])) then
        begin
            if (m_AcControl = rdJTaxIn) or
                (m_AcControl = rdJTaxOut) then
            begin
                JKeiyaku_DMemData.RecNo := 1;
                Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
                abort;
            end;
        end;

        if ((Msg.CharCode = VK_RIGHT)  and (sShift = [])) and
	        (m_AcControl = rdJTaxIn) then
        begin
            if (rdJTaxIn.Checked) and (rdJTaxOut.CanFocus) then
            begin
                rdJTaxOut.SetFocus();
                abort;
            end;
        end;

        MjsNextCtrl(Self);
        Abort;
//<TAX> ADD Ed
	end;

	// Shift+Tab処理
	if (Msg.CharCode=VK_TAB) and (sShift=[ssShift]) then
	begin
        // 実在ﾀﾌﾞの場合
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            // 外部ｺｰﾄﾞ
            if (m_AcControl = Jituzai_ETEdit_GCode) or
               (m_AcControl = Jituzai_ENEdit_GCode) then
            begin
                // Rootﾀﾌﾞに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
                abort;
                exit;
            end;

            if (m_AcControl = Jituzai_DdxDBGrid_Kei)   or       // 実在一覧
               (m_AcControl = Jituzai_ENEdit_HaifuKbn) or       // 基本情報ﾀﾌﾞ-配賦区分
               (m_AcControl = Jituzai_ENEdit_ZipCode1) or       // 工事ﾀﾌﾞ-郵便番号1
               (m_AcControl = MMasterKBN)              or       // 工事完成振替ﾀﾌﾞ-ﾏｽﾀ区分ｺﾝﾎﾞ
// <SEI> ADD start
               (m_AcControl = Jituzai_ETEdit_SeikyusakiCd) or   // 請求・入金予定の請求先
               (m_AcControl = Jituzai_ENEdit_SeikyusakiCd) or
               ((not Jituzai_ETEdit_SeikyusakiCd.CanFocus) and
				(not Jituzai_ENEdit_SeikyusakiCd.CanFocus) and
				(m_AcControl = Jituzai_DdxDBGrid_Seikyu)) or	// 請求先が無効の場合はｸﾞﾘｯﾄﾞ
// <SEI> ADD end
//<TAX> MOD St
//               (m_AcControl = Jituzai_DdxDBGrid_Kei)   then     // 契約入金情報ﾀﾌﾞ-ｸﾞﾘｯﾄﾞ
               (m_AcControl = rdJTaxIn) or
               (m_AcControl = rdJTaxOut) then
//<TAX> MOD Ed
            begin
                // 実在ﾀﾌﾞに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
                Abort;
            end;

            txtWk   :=  nil;
            // その他ﾀﾌﾞ-ｾｸﾞﾒﾝﾄ、分類
            for i := 1 to 20 do
            begin
                if i <= 10 then
                begin
                    if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Visible then
                    begin
                        txtWk := TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i)));
                        break;
                    end;
                end
                else begin
                    if TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i-10))).Visible then
                    begin
                        txtWk := TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i-10)));
                        break;
                    end;
                end;
            end;
            if m_AcControl = txtWk then
            begin
                // 実在ﾀﾌﾞに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_PMTab');
                Abort;
            end;
        end
        else begin
            // 外部ｺｰﾄﾞ
            if (m_AcControl = Goukei_ETEdit_GCode)  or
               (m_AcControl = Goukei_ENEdit_GCode)  then
            begin
                // Rootﾀﾌﾞに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Root_PMTab');
                abort;
                exit;
            end;

            if (m_AcControl = Goukei_DdxDBGrid_Kei)   or        // 合計一覧
               (m_AcControl = Goukei_ENEdit_RootKbn)  or        // 基本情報ﾀﾌﾞ-名寄せ区分
               (m_AcControl = Goukei_ENEdit_ZipCode1) or        // 工事ﾀﾌﾞ-郵便番号1
               (m_AcControl = Goukei_DdxDBGrid_Kei)   then      // 契約入金情報ﾀﾌﾞ-ｸﾞﾘｯﾄﾞ
            begin
                // 合計ﾀﾌﾞに移動
                MjsDispCtrl.MjsSetFocus(Self, 'Goukei_PMTab');
                Abort;
            end;
        end;

        // 上記以外のｺﾝﾄﾛｰﾙの場合
		MjsPrevCtrl(Self);
        Abort;
	end;

	// ↑,←処理
	if ((Msg.CharCode=VK_UP) and (sShift=[])) or
	   ((Msg.CharCode=VK_LEFT) and (sShift=[])) then
	begin
		if m_AcControl = Jituzai_ENEdit_ZipCode1 then
		begin
			// 簡略名称に移動
//			if Jituzai_ETEdit_Fusen.Enabled = true then
//				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Fusen')
//			else
				MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ChkBox_Tokusyu');
			abort;
			exit;
		end;

		if m_AcControl = Goukei_ENEdit_ZipCode1 then
		begin
			// 簡略名称に移動
//			if Goukei_ETEdit_Fusen.Enabled = true then
//				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Fusen')
//			else
				MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SimpleName');
			abort;
			exit;
		end;

//<TAX> ADD St
        if ((Msg.CharCode = VK_LEFT)  and (sShift = [])) and
	        (m_AcControl = rdJTaxOut) then
        begin
            if (rdJTaxOut.Checked) and (rdJTaxIn.CanFocus) then
            begin
                rdJTaxIn.SetFocus();
                abort;
            end;
        end;

        if ((Msg.CharCode in [VK_LEFT, VK_UP])  and (sShift = [])) and
	        (m_AcControl = rdJTaxIn) then
        begin
            Jituzai_PMTab.SetFocus();
            abort;
        end;
//<TAX> ADD Ed

//<276> MOD st		if m_AcControl.TabOrder = 0 then
		if (m_AcControl.TabOrder = 0) and
           ( (m_AcControl <> Jituzai_ENEdit_UkeoiKbn) and
             (m_AcControl <> Goukei_ENEdit_UkeoiKbn) ) then	//<276> MOD ed
		begin
			// ↑,←処理
			if ((Msg.CharCode=VK_UP) and (sShift=[])) or
			   ((Msg.CharCode=VK_LEFT) and (sShift=[])) then
            begin
                // ↓↓↓<153>
                if (m_AcControl=Jituzai_ETEdit_LongName)then
                begin
                    MjsDispCtrl.MjsSetFocus(Self,'Jituzai_ENEdit_GCode');
                end
                else if (m_AcControl=Goukei_ETEdit_LongName)then
                    MjsDispCtrl.MjsSetFocus(Self,'Goukei_ENEdit_GCode');
                // ↑↑↑<153>

                Abort;
            end;
		end;

		MjsPrevCtrl(Self);
		abort;
	end;

    // <100>*** ﾌｧﾝｸｼｮﾝ ***
    case Msg.CharCode of
    VK_F1:  MSPFunctionBarFunctionClick(MSPFunctionBar, 1);
    VK_F2:  MSPFunctionBarFunctionClick(MSPFunctionBar, 2);
    VK_F3:  MSPFunctionBarFunctionClick(MSPFunctionBar, 3);
    VK_F4:  MSPFunctionBarFunctionClick(MSPFunctionBar, 4);
    VK_F5:  MSPFunctionBarFunctionClick(MSPFunctionBar, 5);
    VK_F6:  MSPFunctionBarFunctionClick(MSPFunctionBar, 6);
    VK_F7:  MSPFunctionBarFunctionClick(MSPFunctionBar, 7);
//    VK_F8:  MSPFunctionBarFunctionClick(MSPFunctionBar, 8);
    end;

	// F3
	if (Msg.CharCode = VK_F3) and (sShift=[]) then
	begin
		if m_SearchInfo.sKojCD = '' then				// 検索対象ｺｰﾄﾞが存在しない時
			BSpeedButtonFindClick(Self)					// 検索DLG表示
		else 											// 検索対象ｺｰﾄﾞが存在する時
			fnSearch();									// 検索
	end;

	inherited;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnShow
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormShow(Sender: TObject);
begin

    // <100>  ファンクションキーの設定
    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

    if ECombo_Header.ItemIndex < 0 then Exit;

	JNTMASSetCaption( m_pMyAppRecord );
	MJSBtnVisible( TJNTCRP018001f(Self), true );

	if (m_iMailKbn = 1) or (giReferFlag = REFER) then
	begin
// <198> MOD start
(*
		BSpeedButtonDel.Enabled := false;
		TPDelete.Enabled := false;
*)
          									// 削除権限で判断
        BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
        TPDelete.Enabled := m_cJNTArea.IsDelete;
// <198> MOD end

	end;

	if giReferFlag = REFER then
		// <175>BSpeedButtonSort.Visible := false;
        BSpeedButtonSort.Enabled := false;  // <175>

	if giReferFlag = BASICONLY then
	begin
		BSpeedButtonIS.Visible := false;
		TPDetail.Visible := false;
	end;

	B_GrpSec.Visible := (m_iSecUseKbn = 1);	//<217> MJSBtnVisibleでﾎﾞﾀﾝ表示される為、再度設定
//<KSN> ADD St
    // 「設定」ボタンの位置を調整
    if (B_GrpSec.Visible) then
        B_SetUp.Left := B_GrpSec.Left + B_GrpSec.Width + 5
    else
        B_SetUp.Left := B_GrpSec.Left;
//<KSN> ADD Ed

//<MLXDEP>
	if (TMSeries.IsMjsLink3) then
	    ECombo_HeaderChange ( ECombo_Header );
//<MLXDEP>

	if mjspreview.IsPreview then
		mjspreview.Show
	else
		m_AcControl.SetFocus;


end;

//**************************************************************************
//	Component	:	Form    <178>
//	Event	    :	OnPaint
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormPaint(Sender: TObject);
begin
    if ( m_bFirstFlag = true  ) then Exit;
    if ( m_PrjUseFlg  = false ) then Exit;

    // 初期のみ一回の処理
	if ( m_bFirstFlag = false ) then
	begin
        m_bFirstFlag := true;
        uvCombChgFlg := false;

        // 採用がひとつの場合は起動させる
        if ( ECombo_Header.Items.Count = 1 ) then
        begin
            ECombo_HeaderChange ( ECombo_Header );
            m_AcControl.SetFocus;
        end
        else
        begin
            // DropDown起動
            ECombo_Header.DroppedDown := true;
        end;
{ <225> DEL St
		// 申請書参照ﾎﾞﾀﾝの有効/無効切替
// <198>	 MOD start
//		if ( m_cJNTArea.IsAppend = true ) then
											// 追加権限および修正権限がありの場合
		if ( m_cJNTArea.IsAppend = true ) and ( m_cJNTArea.IsModify = true ) then
// <198> MOD end
			    B_ImportWF.Enabled := true
		else    B_ImportWF.Enabled := false;
<225> DEL Ed}
    end;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnPaint
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.WMOnPaint(var Msg: TMessage);
var
    stWork,
    stName       : String;
    stMessageRec : TMJSMsgRec;
begin

    // 工事・ﾌﾟﾛｼﾞｪｸﾄが未採用だった場合<178> - ST
    if ( m_PrjUseFlg = false ) then
    begin
        if ( m_pMyAppRecord.m_sParameter = '1' ) then
                stName := '工事'
        else    stName := 'プロジェクト';

        // 採用ﾒｯｾｰｼﾞﾁｪｯｸをfnInitializeからWMOnPaintへ移動
        Beep();
        ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 10);
        stWork := ComArea.m_MsgStd.MsgChange(stMessageRec.sMsg,'@_@',stName);
        MjsMessageBoxEx(Self,
                        stWork,
                        stMessageRec.sTitle,
                        stMessageRec.icontype,
                        stMessageRec.btntype,
                        stMessageRec.btndef,
                        stMessageRec.LogType
                       );

        // 画面を閉じる
        Close;
    end;
    // <178> - ED

(*
    // 初期のみ一回の処理
	if (m_bFirstFlag = false) then
	begin
        m_AcControl.SetFocus;

        uvCombChgFlg := false;
        ECombo_Header.ItemIndex := 0;
        ECombo_HeaderChange(ECombo_Header);

		m_bFirstFlag := true;

		// 申請書参照ﾎﾞﾀﾝの有効/無効切替
		if (m_cJNTArea.IsAppend = true) then
			B_ImportWF.Enabled := true
		else
			B_ImportWF.Enabled := false;
    end;
*)  // FormOnPaintへ移動<178>

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnShow
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.FormHide(Sender: TObject);
begin

    if ECombo_Header.itemindex < 0 then Exit;

	MJSBtnVisible( TJNTCRP018001f(Self), false );

	if mjspreview.IsPreView then
		mjspreview.Hide;

end;

//**************************************************************************
//	Component	:	bDocking ( TMSpeedButton )
//		    			ﾂｰﾙﾊﾞｰの取出ﾎﾞﾀﾝ
//	Event		:	OnClick
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonChgClick(Sender: TObject);
var
	AppPara : TAppParam;

//	iAction : Integer;
    lvRect: TRect;
    lvWidth, lvHeight: Integer;
begin
    MemData_EventCtrl(MemKasanChild,False); //イベント制御 <KSN> ADD
	m_fChange := 1;

    //2005-05-31切込み・埋込み不具合対応済み inoue
    if  (BSpeedButtonChg.Caption = '埋込(&G)') then
    begin
        // 親画面への設定
        AppPara.iAction      :=  ACTID_DOCKINGINEND;         //  格納通知
        BSpeedButtonChg.Caption := '切出(&G)';                 // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end
    else
    begin
	   	Visible     :=	false;

        // 現在のｸﾗｲｱﾝﾄ領域を取得し幅と高さを取得
        lvRect      := Self.ClientRect;
        lvWidth     := lvRect.Right - lvRect.Left;
        lvHeight    := lvRect.Bottom - lvRect.Top;

        ClientWidth  :=  lvWidth;
        ClientHeight :=  lvHeight;
	  	Visible		 :=	true;

        // 親画面への設定
        AppPara.iAction      :=  ACTID_DOCKINGOUTEND;        //  取出通知
        BSpeedButtonChg.Caption := '埋込(&G)';                 // ﾎﾞﾀﾝｷｬﾌﾟｼｮﾝの変更
    end;

    AppPara.pRecord         :=    Pointer(m_pMyAppRecord);      // 管理構造体ﾎﾟｲﾝﾀ設定
    AppPara.pActionParam    :=    nil;                        // 予備ﾎﾟｲﾝﾀ設定
    TMjsAppRecord(m_pMyAppRecord^).m_pOwnerEntry(@AppPara);

	gbTreeClick := false;
	m_fChange := 0;
    MemData_EventCtrl(MemKasanChild,True); //イベント制御 <KSN> ADD
end;


//**************************************************************************
//	Proccess	:	OnEnterの共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name		:	UnKnown
//	Date		:	2000/ 08 / 31
//	Parameter	:	Sender
//	Retrun		:
//	History		:	2000 / 99 / 99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.EnterEvent(Sender: TObject);
//<SEI> ADD St
var
	bDisp	: Boolean;
//<SEI> ADD Ed

//<KSN> ADD St
    // -----------------------------------------------------------------------------
    //  OnEnterの共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(加算体系タブ用)
    // -----------------------------------------------------------------------------
    procedure EnterEvent_KasanTab();
    begin

        BSpeedButtonFind.Enabled := Root_PMTab.Items.Selected = PAGE_KASAN;  // 検索ボタン

        if Sender is TdxDBGrid then
        begin
            DBGridChangeNodeEx(Sender);
            BSpeedButtonSort.Enabled := True;
        end
        else
            BSpeedButtonSort.Enabled := False;

    end;
//<KSN> ADD Ed
begin
// <192> ADD start
	m_AcControl  := Screen.ActiveControl;   // 参照時でもｱｸﾃｨﾌﾞｺﾝﾄﾛｰﾙを保存する
// <192> ADD end

// <193> MOD start
(*
    // 参照ﾓｰﾄﾞのときは処理しない
	if giReferFlag = REFER then
		Exit;
*)
//<KSN> ADD St
    if PPanelKasan.Visible then
    begin
        EnterEvent_KasanTab();
        Exit;
    end;
//<KSN> ADD Ed

	if giReferFlag = REFER then  			// 決算確定時
	begin
       	if (m_AcControl = Root_PMTab) then 	// ﾀﾌﾞ
		begin
			btnFusenCtl.Enabled := False;
			LVStyleBar.Enabled  := False;

// <198> ADD start
											// 削除権限で判断
            BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
// <198> ADD end

		end
    										// 実在ｸﾞﾘｯﾄﾞまたは合計ｸﾞﾘｯﾄﾞ
    	else if (m_AcControl = Jituzai_DdxDBGrid) or
		        (m_AcControl = Goukei_DdxDBGrid) then
        begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
			begin
				if Root_PMTab.Items.Selected = PAGE_JITUZAI then
				begin
					if JHojyoMA_DMemData.RecordCount = 0 then
					begin
                    	btnFusenCtl.Enabled := False;
						LVStyleBar.Enabled := False;

// <198> ADD start
											// 削除権限で判断
                        BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
// <198> ADD end


					end
					else
					begin
                        if JHojyoMA_DMemData.FieldByName('Syokuchikbn').AsInteger = 1 then
                        begin
                        	btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
                            LVStyleBar.Enabled  := m_cJNTArea.IsFusen;

// <198> ADD start
											// 削除権限ありの場合
                            if m_cJNTArea.IsDelete then
                            begin
								BSpeedButtonDel.Enabled := fnRecordCount();
            				end
                            else
                            begin
                             	BSpeedButtonDel.Enabled := False;
                            end;
// <198> ADD end


                        end
                        else
                        begin
                            if JHojyoMA_DMemData.FieldByName('GCode').IsNull then
                            begin
                            	btnFusenCtl.Enabled := False;
                                LVStyleBar.Enabled := False;
// <198> ADD start
											// 削除権限で判断
                                BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
// <198> ADD end

                            end
                            else
                            begin
                            	btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
                                LVStyleBar.Enabled := m_cJNTArea.IsFusen;
// <198> ADD start
											// 削除権限ありの場合
                                if m_cJNTArea.IsDelete then
                                begin
                            		BSpeedButtonDel.Enabled := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));
                                end
                                else
                                begin
                                  	BSpeedButtonDel.Enabled := False;
                                end;
// <198> ADD end
                            end;
                        end;
                    end;
				end;
			end
			else
			begin
				if GHojyoMA_DMemData.FieldByName('GCode').IsNull then
				begin
                	btnFusenCtl.Enabled := False;
					LVStyleBar.Enabled := False;

// <198> ADD start
											// 削除権限で判断
                    BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
// <198> ADD end
				end
				else
				begin
                  	btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
					LVStyleBar.Enabled := m_cJNTArea.IsFusen;
// <198> ADD start
											// 削除権限ありの場合
                    if m_cJNTArea.IsDelete then
                    begin
                    	BSpeedButtonDel.Enabled := fnChildCount(fnGetNCODE(GHojyoMA_DMemData.FieldByName('GCode').asString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));
                    end
                    else
                    begin
                    	BSpeedButtonDel.Enabled := False;
                    end;
// <198> ADD end
				end;
			end;
		end;

		Exit;
	end;
// <193> MOD end

//<160> - ST
	if m_bTabClickFlg = true then
	begin
		m_bTabClickFlg := false;
		exit;
	end;
//<160> - ED

    // ﾌﾗｸﾞの初期化
    uvCombChgFlg := false;

// <192> DEL start
    // ｱｸﾃｨﾌﾞｺﾝﾄﾛｰﾙを保存
   //m_AcControl  := Screen.ActiveControl;
// <192> DEL end

    // 工事完成振替ﾀﾌﾞのﾏｽﾀ区分ｺﾝﾎﾞの先頭をﾃﾞﾌｫﾙﾄ表示する
	if (m_AcControl = MMasterKBN) then
    begin
//        MMasterKBN.itemIndex := 0;
//        MMasterKBNChange(MMasterKBN);
//        Exit;
    end;

	if (m_AcControl = Root_PMTab) then
	begin
		BSpeedButtonDel.Enabled := false;
		btnFusenCtl.Enabled     := false;
		LVStyleBar.Enabled      := false;
        fnSetFncType(false,1);              // <144>
		exit;
	end;

	if (m_AcControl = Jituzai_ETEdit_GCode) or
		(m_AcControl = Jituzai_ENEdit_GCode) or
		(m_AcControl = Goukei_ETEdit_GCode)  or
		(m_AcControl = Goukei_ENEdit_GCode)  then
    begin
		BSpeedButtonDel.Enabled := false;
        fnSetFncType(false,0);              // <113>
        fnSetFncType(false,1);              // <144>
        fnSetFncType(false,3);              // <KSN> ADD
//<113>        MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
    end
	else
	begin
		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			begin
				if JHojyoMA_DMemData.RecordCount = 0 then
				begin
					BSpeedButtonDel.Enabled := false;
					btnFusenCtl.Enabled     := false;
					LVStyleBar.Enabled      := false;
				end
				else
				begin
                    if m_cJNTArea.IsDelete = false then//削除権限を考慮する
						BSpeedButtonDel.Enabled := false
                    else
                    begin
                        if (JHojyoMA_DMemData.FieldByName('Syokuchikbn').AsInteger = 1) then
                        begin
                            BSpeedButtonDel.Enabled := fnRecordCount();
                            btnFusenCtl.Enabled     := m_cJNTArea.IsFusen;
                            LVStyleBar.Enabled      := m_cJNTArea.IsFusen;
                        end
                        else
                        begin
                            if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then
                            begin
                                BSpeedButtonDel.Enabled := false;
                                btnFusenCtl.Enabled     := false;
                                LVStyleBar.Enabled      := false;
                            end
                            else
                            begin
// <137>↓
//                                BSpeedButtonDel.Enabled
//                                        := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttr.AsInteger));;
                                BSpeedButtonDel.Enabled
                                        := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));
// <137>↑
                                btnFusenCtl.Enabled     := m_cJNTArea.IsFusen;
                                LVStyleBar.Enabled      := m_cJNTArea.IsFusen;
                            end;
                        end;
                    end;
				end;
			end
			else
			begin
				if (GHojyoMA_DMemData.FieldByName('GCode').IsNull) then
				begin
					BSpeedButtonDel.Enabled := false;
					btnFusenCtl.Enabled     := false;
					LVStyleBar.Enabled      := false;
				end
				else
				begin
					BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;//削除権限を考慮する
					btnFusenCtl.Enabled     := m_cJNTArea.IsFusen;
					LVStyleBar.Enabled      := m_cJNTArea.IsFusen;
				end;
			end;
		end
		else
		begin
			if HojyoMA_DMQuery.Eof = true then
				BSpeedButtonDel.Enabled := false
			else
			begin
                if m_cJNTArea.IsDelete = false then//削除権限を考慮する
					BSpeedButtonDel.Enabled := false
                else
                begin
                    if HojyoMA_DMQuery.GetFld('Syokuchikbn').AsInteger = 1 then
                        BSpeedButtonDel.Enabled := fnRecordCount()
                    else
                        BSpeedButtonDel.Enabled := true;
                end;
			end;
		end;
	end;

	if (m_AcControl = Jituzai_ETEdit_SimpleName) or
		(m_AcControl = Goukei_ETEdit_SimpleName) or
		(m_AcControl = Jituzai_ENEdit_SalesKmkCd) or
        (m_AcControl = Jituzai_ETEdit_CustomerName) or  // <144>実在 受注先名
        (m_AcControl = Goukei_ETEdit_CustomerName) or   // <144>合計 受注先名
		(m_AcControl = Jituzai_ENEdit_CustomerCode) or
		(m_AcControl = Jituzai_ETEdit_CustomerCode) or
		(m_AcControl = Goukei_ENEdit_CustomerCode) or
		(m_AcControl = Goukei_ETEdit_CustomerCode) or
//<EXP> ADD St
        (m_AcControl = Jituzai_ENEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ENEdit_BmnCode) or
        (m_AcControl = Jituzai_ENEdit_PersonCode) or
        (m_AcControl = Jituzai_ENEdit_SekouPersonCode) or
        (m_AcControl = Jituzai_ETEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ETEdit_BmnCode) or
        (m_AcControl = Jituzai_ETEdit_PersonCode) or
        (m_AcControl = Jituzai_ETEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ENEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ENEdit_BmnCode) or
        (m_AcControl = Goukei_ENEdit_PersonCode) or
        (m_AcControl = Goukei_ENEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ETEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ETEdit_BmnCode) or
        (m_AcControl = Goukei_ETEdit_PersonCode) or
        (m_AcControl = Goukei_ETEdit_SekouPersonCode) then
//<EXP> ADD Ed
	begin
		if (m_AcControl = Jituzai_ETEdit_SimpleName) or
			(m_AcControl = Goukei_ETEdit_SimpleName) then
		begin
//<113>			ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 19);
//<113>			SStatusBar.SimpleText := stMessageRec.sMsg;
            fnSetFncType(true,7);           // <113>
            fnSetFncType(false,1);          // <144>
		end
// <143>↓ｺﾒﾝﾄｱｳﾄ
//		else if m_AcControl = Jituzai_ENEdit_SalesKmkCd then
//			SStatusBar.SimpleText := '未設定の場合は「売上基準科目」が使用されます。'
// <143>↑
//{ // <144>復帰↓
		else if (m_AcControl = Jituzai_ENEdit_CustomerCode) or
				(m_AcControl = Jituzai_ETEdit_CustomerCode) or
				(m_AcControl = Goukei_ENEdit_CustomerCode) or
				(m_AcControl = Goukei_ETEdit_CustomerCode) or
				(m_AcControl = Jituzai_ETEdit_CustomerName) or
				(m_AcControl = Goukei_ETEdit_CustomerName) or
//<EXP> ADD St
                (m_AcControl = Jituzai_ENEdit_SekouBmnCode) or
                (m_AcControl = Jituzai_ENEdit_BmnCode) or
                (m_AcControl = Jituzai_ENEdit_PersonCode) or
                (m_AcControl = Jituzai_ENEdit_SekouPersonCode) or
                (m_AcControl = Jituzai_ETEdit_SekouBmnCode) or
                (m_AcControl = Jituzai_ETEdit_BmnCode) or
                (m_AcControl = Jituzai_ETEdit_PersonCode) or
                (m_AcControl = Jituzai_ETEdit_SekouPersonCode) or
                (m_AcControl = Goukei_ENEdit_SekouBmnCode) or
                (m_AcControl = Goukei_ENEdit_BmnCode) or
                (m_AcControl = Goukei_ENEdit_PersonCode) or
                (m_AcControl = Goukei_ENEdit_SekouPersonCode) or
                (m_AcControl = Goukei_ETEdit_SekouBmnCode) or
                (m_AcControl = Goukei_ETEdit_BmnCode) or
                (m_AcControl = Goukei_ETEdit_PersonCode) or
                (m_AcControl = Goukei_ETEdit_SekouPersonCode) then
//<EXP> ADD Ed                
		begin
			if (m_AcControl = Jituzai_ETEdit_CustomerName) or
				(m_AcControl = Goukei_ETEdit_CustomerName) then
			begin
				if MasterInfo_DMemDataTorihikiUse.AsInteger <> 0 then
//					SStatusBar.SimpleText := 'F1 入力モード切替（コード入力）'
                    fnSetFncType(true,1)    // <144>
				else
//					SStatusBar.SimpleText := '';
                    fnSetFncType(false,1);  // <144>
			end
			else
//				SStatusBar.SimpleText := 'F1 入力モード切替（名称入力）';
                fnSetFncType(true,2);       // <144>

		end
//} //<144>復帰↑
        else
        begin
            fnSetFncType(false,7);          // <113>
            fnSetFncType(false,1);          // <144>
        end;
	end
	else
    begin
//<113>		SStatusBar.SimpleText := '';
        fnSetFncType(false,7);              // <113>
        fnSetFncType(false,1);              // <144>
    end;

// <SEI> ADD start
	if (m_AcControl = Jituzai_DDxDBGrid_Seikyu) or
    	(m_AcControl = Goukei_DDxDBGrid_Seikyu) then
    begin
        bDisp := False;
    	// F5
        									// 請求予定日が入力済み
		if TdxDBGrid(m_AcControl).DataSource.DataSet.FieldByName('SeikyuYoteiDate').AsDateTime <> 0 then
        begin
        	bDisp := m_cJNTArea.IsDelete;
        end;
        fnSetFncType(bDisp, FUNC_DELSEIKYU); 		// F5 削除
	end
    else
    begin
        fnSetFncType(false, FUNC_DELSEIKYU); 		// F5 削除
    end;
// <SEI> ADD end

// <238> ADD start
    if (m_AcControl = Jituzai_ENEdit_BmnCode) or
       (m_AcControl = Jituzai_ETEdit_BmnCode) then
            m_JBmnChangeFlg      := False;

    if (m_AcControl = Goukei_ENEdit_BmnCode) or
       (m_AcControl = Goukei_ETEdit_BmnCode) then
            m_GBmnChangeFlg     := False;

    if (m_AcControl = Jituzai_ENEdit_SekouBmnCode) or
       (m_AcControl = Jituzai_ETEdit_SekouBmnCode) then
            m_JSekBmnChangeFlg   := False;

    if (m_AcControl = Goukei_ENEdit_SekouBmnCode) or
       (m_AcControl = Goukei_ETEdit_SekouBmnCode) then
            m_GSekBmnChangeFlg       := False;
// <238> ADD end
end;


//**************************************************************************
//	Component	:	Root_PMTab ( TMTab )
//	Notice		:	実在 or 合計
//	Event		:	OnChange
//**************************************************************************
procedure TJNTCRP018001f.Root_PMTabChange(Sender: TObject);
var
	bEnable	:	Boolean;
begin
// <193> DEL start
//   	if ( giReferFlag = REFER ) then Exit;
// <193> DEL end

	if ( m_fAccessTab = false ) then
	begin
		m_fAccessTab := true;
		Exit;
	end;

//<KSN> ADD St
    GuidanceClear();
    if Root_PMTab.Items.Selected = PAGE_KASAN then
    begin
        if PPanelKasan.Visible = False then   // 他のタブから加算体系タブへ切り替え時
        begin
            fnSetFncType(false,3);

            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
            BSpeedButtonFind.Enabled := Root_PMTab.Items.Selected = PAGE_KASAN;  // 検索ボタン
            B_ImportWF.Enabled := False;  //<KSN3> ADD
        end;

        BSpeedButtonDel.OnClick := BSpeedButtonClick;
        BSpeedButtonSort.OnClick :=    BSpeedButtonClick;
        BSpeedButtonFind.OnClick :=    BSpeedButtonClick;
        PPanelKasan.Visible := True;
        Jituzai_PPanel_Card.Visible := False;
        Jituzai_PPanel_Grid.Visible := False;
		btnFusenCtl.Enabled  := False;
		LVStyleBar.Enabled := False;

        DBGrid_EventCtrl(Kasan_Parent_DBGrid,False);  // 加算先(親)グリッドのイベント無効化
        DBGrid_EventCtrl(Kasan_Child_DBGrid,False);   // 加算元(子)グリッドのイベント無効化

        Kasan_CreateParentGrid();  // 加算先(親)グリッドの作成

        DBGrid_EventCtrl(Kasan_Parent_DBGrid,True);  // 加算先(親)グリッドのイベント有効化
        DBGrid_EventCtrl(Kasan_Child_DBGrid,True);   // 加算元(子)グリッドのイベント有効化

        Kasan_Parent_DBGrid.SetFocus;
        Kasan_Parent_DBGrid.FocusedColumn := COL_GCODE;
        Exit;
    end
    else
    begin
        if PPanelKasan.Visible then   // 加算体系タブから他のタブへ切り替え時
        begin
            fnSetFncType(true,0);
            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
            BSpeedButtonFind.Enabled := Root_PMTab.Items.Selected = PAGE_KASAN;  // 検索ボタン
            B_ImportWF.Enabled := (m_cJNTArea.IsAppend and m_cJNTArea.IsModify);  //<KSN3> ADD
        end;

        BSpeedButtonDel.OnClick := BSpeedButtonDelClick;
        BSpeedButtonSort.OnClick := BSpeedButtonSortClick;
        BSpeedButtonFind.OnClick := BSpeedButtonFindClick;
        PPanelKasan.Visible := False;
		btnFusenCtl.Enabled  := True;
		LVStyleBar.Enabled := True;

        if PPanelTree.Visible = False then
        begin
            BSpeedButtonSort.Enabled := False;
            BSpeedButtonFind.Enabled := False;
        end;
    end;
//<KSN> ADD Ed

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF

//<155> - ST
	if ( LSinsei.Visible = true ) then
	begin
		fnSinseiDspControl(true);
		fnClearCard(0);
		fnClearCard(1);
	end;
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
//<155> - ED
    FontColorChange();  // <225> 文字色変更

//<251> ADD St
    // ↑のFontColorChange内で実在分はPostされるため、ここでは合計分の編集中を解除
    if ( GKeiyaku_DMemData.State in [dsInsert, dsEdit] ) then
        GKeiyaku_DMemData.Cancel();
    if ( GNyukin_DMemData.State  in [dsInsert, dsEdit] ) then
        GNyukin_DMemData.Cancel();
//<251> ADD Ed

    // ------------------------------------------
    //  実在タブ
    // ------------------------------------------
	if ( Root_PMTab.Items.Selected = PAGE_JITUZAI ) then
	begin
		if ( JHojyoMA_DMemData.FieldByName('GCode').IsNull ) then	//	実在GridのｺｰﾄﾞがNullの時
			bEnable := false
		else
			bEnable := m_cJNTArea.IsFusen;
	end
    // ------------------------------------------
    //  合計タブ
    // ------------------------------------------
	else
	begin
		if ( GHojyoMA_DMemData.FieldByName('GCode').IsNull ) then	//	実在GridのｺｰﾄﾞがNullの時
			bEnable := false
		else
			bEnable := m_cJNTArea.IsFusen;
	end;

	GFBlue.Enabled   := bEnable;
	GFGreen.Enabled  := bEnable;
	GFOrange.Enabled := bEnable;
	GFRed.Enabled    := bEnable;

	// 付箋ﾎﾞﾀﾝ入力制御
	if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then
	begin
		if ( Root_PMTab.Items.Selected = PAGE_JITUZAI ) then
   		begin
			if ( JHojyoMA_DMemData.RecordCount <> 0 ) then
			begin
				btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
				LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
			end
			else
			begin
				btnFusenCtl.Enabled := false;
				LVStyleBar.Enabled  := false;
			end;
		end
		else
		begin
			if ( GHojyoMA_DMemData.RecordCount <> 0 ) then
			begin
				btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
				LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
			end
			else
			begin
				btnFusenCtl.Enabled := false;
				LVStyleBar.Enabled  := false;
			end;
		end;
	end
	else
	begin
		btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
		LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
	end;

	// 初期ﾌｫｰｶｽ
	if ( Root_PMTab.Items.Selected = 0 ) then
	begin

		if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then
		begin

			GHojyoMA_DMemData.Cancel;
			Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
			Jituzai_DdxDBGrid.SetFocus;

            //<100>
            fnSetFncType(false,0);
            //<113> MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
		end
		else
		begin
			JHojyoMA_DMemData.Cancel;
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
				    Jituzai_ETEdit_GCode.SetFocus
			else    Jituzai_ENEdit_GCode.SetFocus;
		end;
	end
	else
	begin
		if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then
		begin
			JHojyoMA_DMemData.Cancel;
			Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;
			Goukei_DdxDBGrid.SetFocus;
		end
		else
		begin
			GHojyoMA_DMemData.Cancel;
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
				    Goukei_ETEdit_GCode.SetFocus
			else    Goukei_ENEdit_GCode.SetFocus;
		end;
	end;


{	if ( Root_PMTab.Items.Selected = 0 ) then
	begin
		if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then
		begin
			Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
			Jituzai_DdxDBGrid.SetFocus;
		end;
	end
	else
	begin
		if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then
		begin
			Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;
			Goukei_DdxDBGrid.SetFocus;
		end;
	end;
}
end;

//**************************************************************************
//	Component	:	OnClick ( TMSpeedButton )
//                      ｽﾋﾟｰﾄﾞﾎﾞﾀﾝ → 終了
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonEndClick(Sender: TObject);
begin
	Close;
end;

//**************************************************************************
//	Component	:	OnClick ( TMSpeedButton )
//                      ｽﾋﾟｰﾄﾞﾎﾞﾀﾝ → 一覧＆詳細切替
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonISClick    (Sender: TObject);
var
	iSumKbn	 	: Integer;
	Node		: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	NodeOya		: TTreeNode;
//	stWorkRecOya: ^TreeViewRec;
	strGCode	: String;
begin
	m_fIS := 1;								// 一覧詳細ﾌﾗｸﾞ

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF

    ClearOtherRec(m_recOther);                      // <WF>申請書情報ｸﾘｱ		//<155>
    FontColorChange();  // <225> 文字色変更

	if Root_PMTab.Items.Selected = PAGE_JITUZAI then
	{実在工事パネルコントロール}
	begin
		iSumKbn := 0;
		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Card;
//			Root_PMTab.Items.Selected		:= -1;
//			Root_PMTab.Items.Selected		:= 0;
			Jituzai_PPanel_Grid.Visible 	:= false;
			Jituzai_PPanel_Card.Visible 	:= true;

			Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Card;
			BSpeedButtonIS.Caption			:= '一覧(&T)';

			{実在工事／詳細登録}		// 2004/07/09
			strGCode := JHojyoMA_DMemDataGCode.AsString;
			fnDataRead (strGCode, iSumKbn, 0);
//<271> DEL			SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
            m_aCmnt_Jitu.Clear();  //<271> ADD
			fnMemSet (iSumKbn, false);
			fnCreateCard (iSumKbn);
			btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
			LVStyleBar.Enabled  := m_cJNTArea.IsFusen;

// <192> MOD start
(*			if giReferFlag = NORMAL then

			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					Jituzai_ETEdit_GCode.SetFocus
				else
					Jituzai_ENEdit_GCode.SetFocus;
			end;
*)
                                            // 通常時、決算確定時でもﾌｫｰｶｽをｾｯﾄする
            if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            begin
                if Jituzai_ETEdit_GCode.Canfocus then  //<KSN> ADD
                    Jituzai_ETEdit_GCode.SetFocus;
            end
            else
            begin
                if Jituzai_ENEdit_GCode.Canfocus then  //<KSN> ADD
                    Jituzai_ENEdit_GCode.SetFocus;
            end;
// <192> MOD end
		end
		else
		begin
            //<100>
            fnSetFncType(false,0);
            //<100>
//<113>            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
			Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Grid;
//			Root_PMTab.Items.Selected		:= -1;
//			Root_PMTab.Items.Selected		:= 0;
			Jituzai_PPanel_Card.Visible 	:= false;
			Jituzai_PPanel_Grid.Visible 	:= true;

			Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Grid;
			BSpeedButtonIS.Caption			:= '詳細(&T)';

			Node := VTreeView.Selected;
			stWorkRec	:= Node.Data;
			if stWorkRec^.nDivision <> 9 then
				NodeOya := Node.Parent
			else
				NodeOya := Node;

			{実在工事／一覧登録}
//			fnCreateGrid (TBaseNode, iSumKbn);
//			fnCreateGrid (TBaseNode, iSumKbn + 1);
			fnCreateGrid (NodeOya, iSumKbn);
			fnCreateGrid (NodeOya, iSumKbn + 1);

			if stWorkRec^.nDivision = 0 then
			begin
				if JHojyoMA_DMemData.RecordCount <> 0 then
					JHojyoMA_DMemData.First;

				if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
				begin
					while JHojyoMA_DMemData.Eof = false do
					begin
						if JHojyoMA_DMemDataGCode.AsString <> '' then
						begin
							if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) = stWorkRec^.strExCode then
							begin
								Break;
							end;
						end;
						JHojyoMA_DMemData.Next;
					end;
				end
				else
				begin
					while JHojyoMA_DMemData.Eof = false do
					begin
						if JHojyoMA_DMemDataGCode.AsString = stWorkRec^.strExCode then
						begin
							Break;
						end;
						JHojyoMA_DMemData.Next;
					end;
				end;
			end;

			if JHojyoMA_DMemData.Eof = false then
			begin
				btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
				LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
			end
			else
			begin
				btnFusenCtl.Enabled := false;
				LVStyleBar.Enabled  := false;
				JHojyoMA_DMemData.First;
			end;

			Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;
			Jituzai_DdxDBGrid.SetFocus;
		end;
	end
	else
	begin
	{合計工事パネルコントロール}
		iSumKbn								:= 1;
		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Card;
//			Root_PMTab.Items.Selected		:= -1;
//			Root_PMTab.Items.Selected		:= 1;
			Goukei_PPanel_Grid.Visible		:= false;
			Goukei_PPanel_Card.Visible		:= true;

			Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Card;
			BSpeedButtonIS.Caption			:= '一覧(&T)';

			{合計工事／詳細登録}		// 2004/07/09
			strGCode := GHojyoMA_DMemDataGCode.AsString;
			fnDataRead (strGCode, iSumKbn, 0);
//<271> DEL			SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
            m_aCmnt_Gou.Clear();  //<271> ADD
			fnMemSet (iSumKbn, false);
			fnCreateCard (iSumKbn);

			btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
			LVStyleBar.Enabled  := m_cJNTArea.IsFusen;

// <192> MOD start
(*			if giReferFlag = NORMAL then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					Goukei_ETEdit_GCode.SetFocus
				else
					Goukei_ENEdit_GCode.SetFocus;
			end;
*)
                    						// 通常時、決算確定時でもﾌｫｰｶｽをｾｯﾄする
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            begin
              	Goukei_ETEdit_GCode.SetFocus;
            end
            else
            begin
            	Goukei_ENEdit_GCode.SetFocus;
            end;

// <192> MOD end

		end
		else
		begin
			Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Grid;
			Goukei_PPanel_Card.Visible		:= false;
			Goukei_PPanel_Grid.Visible		:= true;

			Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Grid;
			BSpeedButtonIS.Caption			:= '詳細(&T)';

			Node := VTreeView.Selected;
			stWorkRec	:= Node.Data;
			if stWorkRec^.nDivision <> 9 then
				NodeOya := Node.Parent
			else
				NodeOya := Node;

			{合計工事／一覧登録}
			fnCreateGrid (NodeOya, iSumKbn);
			fnCreateGrid (NodeOya, iSumKbn - 1);

			if stWorkRec^.nDivision = 1 then
			begin
				if GHojyoMA_DMemData.RecordCount <> 0 then
					GHojyoMA_DMemData.First;

				if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
				begin
					while GHojyoMA_DMemData.Eof = false do
					begin
						if GHojyoMA_DMemDataGCode.AsString <> '' then
						begin
							if Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))]) = stWorkRec^.strExCode then
							begin
								Break;
							end;
						end;
						GHojyoMA_DMemData.Next;
					end;
				end
				else
				begin
					while GHojyoMA_DMemData.Eof = false do
					begin
						if GHojyoMA_DMemDataGCode.AsString = stWorkRec^.strExCode then
						begin
							Break;
						end;
						GHojyoMA_DMemData.Next;
					end;
				end;
			end;

			if GHojyoMA_DMemData.Eof = false then
			begin
				btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
				LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
			end
			else
			begin
				btnFusenCtl.Enabled := false;
				LVStyleBar.Enabled := false;
				GHojyoMA_DMemData.First;
			end;

			Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;
			Goukei_DdxDBGrid.SetFocus;
		end;
	end;
	m_fIS := 0;										// 一覧詳細ﾌﾗｸﾞ初期化
end;


//**************************************************************************
//	Component	:	OnClick ( TTreeView )
//                  	TreeView のノードをクリック
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.VTreeViewClick(Sender: TObject);
{var
	Node1			:	TTreeNode;
	NodeOya			:	TTreeNode;
	stWorkRecSelect	:	^TreeViewRec;
	stWorkRecOya	:	^TreeViewRec;
	stGCode			:	String;}
begin
{	MemPost_Sw := 1;

	if BSpeedButtonIS.Caption = '詳細(&T)' then
	begin
		Node1 := VTreeView.Selected;
		NodeOya := Node1.Parent;
		stWorkRecSelect := Node1.Data;

		if (stWorkRecSelect^.nDivision = 9) or (stWorkRecSelect^.nDivision = 1) then
		begin
			stGCode := stWorkRecSelect^.strExCode;
		end
		else
		begin
			stWorkRecOya := NodeOya.Data;
			stGCode := stWorkRecOya^.strExCode;
		end;

		if m_stGCodeSave = stGCode then
			Exit;

		if Node1 = nil then
			Exit;

		m_stGCodeSave := stGCode;							// ｺｰﾄﾞのｾｰﾌﾞ

	end;

	fnCreateAll ();

	MemPost_Sw := 0;}
end;


//**************************************************************************
//	Component	:	OnClick ( TTreeView )
//                  	TreeView のノードをクリック
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.fnCreateAll();
var
	SelectNode	  : TTreeNode;
	stWorkRec	  : ^TreeViewRec;
	stWorkRecBase : ^TreeViewRec;
	iSumKbn		  : Integer;
	stCode		  : String;
	stName		  : String;
	iCode		  : Int64;
	iCut		  : Integer;
begin

	// 親NodeをMTABに表示
	TBaseNodeSv	:= TBaseNode;
	TBaseNode	:= VTreeView.Selected;
	stWorkRec	:= TBaseNode.Data;

	if ( stWorkRec^.nDivision = 0 ) then
		TBaseNode := TBaseNode.Parent;

	stWorkRecBase := TBaseNode.Data;

	if ( stWorkRecBase^.nDivision <> 9 ) then
	begin
		stCode		  := stWorkRecBase^.strExCode;
		m_stGCodeSave := stCode;
	end
	else
	begin
		stCode		  := '';
		m_stGCodeSave := '          ';
	end;

	if ( MasterInfo_DMemDataCodeAttr.AsInteger <> 2 ) then
	begin
		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 1 ) then
		begin
			if ( stCode <> '' ) then
			begin
				iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
				System.Delete(stCode, 1, iCut);
			end;
		end
		else
		begin
			if ( stCode <> '' ) then
			begin
				iCode  := StrToInt64(Trim(stCode));
				stCode := IntToStr(iCode);
			end;
		end;
	end;

	stName					 := stWorkRecBase^.strName;
	Root_PMTab.BorderCaption := stCode + ' ' + stName;

    if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then  //<255> ADD
    begin                                            //<255> ADD
        // Grid作成
        SelectNode := VTreeView.Selected;
        stWorkRec  := SelectNode.Data;

        iSumKbn := 0;   // 実在工事
        fnCreateGrid (TBaseNode, iSumKbn);

        if ( JHojyoMA_DMemData.RecordCount <> 0 ) then
            JHojyoMA_DMemData.First;

        if ( stWorkRec^.nDivision = 0 ) then
        begin
            if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
            begin
                while ( JHojyoMA_DMemData.Eof = false ) do
                begin
                    if ( stWorkRec^.strExCode = JHojyoMA_DMemDataGCode.AsString ) then
                        Break;

                    JHojyoMA_DMemData.Next;
                end;
            end
            else
            begin
                while ( JHojyoMA_DMemData.Eof = false ) do
                begin
                    if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
                    begin
                        if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
                        begin
                            if ( stWorkRec^.strExCode = Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) ) then
                                Break;
                        end;

                        JHojyoMA_DMemData.Next;
                    end;
                end;
            end;
        end;

        if ( BSpeedButtonIS.Caption <> '詳細(&T)' ) then
        begin
            if ( JHojyoMA_DMemData.Eof = false ) then
            begin
                stCode := JHojyoMA_DMemDataGCode.AsString;
                fnDataRead (stCode, iSumKbn, 0);
//<271> DEL                SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
                m_aCmnt_Jitu.Clear();  //<271> ADD
                fnMemSet (iSumKbn, false);
                fnCreateCard (iSumKbn);
            end
            else
             begin
                fnClearCard  (iSumKbn);
            end;
        end;

        // Grid作成
        iSumKbn := 1;   // 合計工事
        fnCreateGrid (TBaseNode, iSumKbn);

        if ( BSpeedButtonIS.Caption <> '詳細(&T)' ) then
        begin
            if ( GHojyoMA_DMemData.Eof = false ) then
            begin
                GHojyoMA_DMemData.First;
                stCode := GHojyoMA_DMemDataGCode.AsString;
                fnDataRead (stCode, iSumKbn, 0);
//<271> DEL                SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
                m_aCmnt_Gou.Clear();  //<271> ADD
                fnMemSet (iSumKbn, false);
                fnCreateCard (iSumKbn);
            end
            else
            begin
                fnClearCard  (iSumKbn);
            end;
        end;
    end;  //<255> ADD

    // 付箋の設定
    // 上記のfnClearCardでﾂｰﾙﾊﾞｰの付箋を使用不可にしてしまうので、
    // ここで再設定する<181> - ST
    if ( stWorkRecBase^.nDivision = 9 ) then
    begin
// <201> DEL start
//        BSpeedButtonDel.Enabled := false;
// <201> DEL end
		btnFusenCtl.Enabled     := false;
		LVStyleBar.Enabled      := false;
    end
    else
    begin
        btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
		LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
    end;
    // <181> - ED

end;


//**************************************************************************
//	Component	:	OnDragDrop ( TTreeView )
//                  	TreeView のノードをドロップ
//	Event		:	OnEnter
//**************************************************************************
procedure TJNTCRP018001f.VTreeViewDragDrop(Sender, Source: TObject; X,
  Y: Integer);

var
	qmQuery			: TMQuery;
	DragNode		: TTreeNode;		// ドラッグしたノード
	DragNode_wk		: TTreeNode;
	DropNode		: TTreeNode;		// ドロップしたノード
	DropNode_wk		: TTreeNode;
	stRecDrag		: ^TreeViewRec;
	stRecDrag_wk	: ^TreeViewRec;
	stRecDrop		: ^TreeViewRec;
	stRecDrop_wk	: ^TreeViewRec;

	NodeOya			: TTreeNode;
	NodeOya2		: TTreeNode;
	stWorkRecOya	: ^TreeViewRec;
	stWorkRecOya2	: ^TreeViewRec;

	Drop_which		: Boolean;			// true:実在→合計 false:その他
	iEntNo1			: Integer;
	iEntNo2			: Integer;
	iEntNoSv		: Integer;
	iError_sw		: Integer;
begin
    DragNode := VTreeView.Selected;
	DropNode := VTreeView.DropTarget;

	if ( DropNode = nil ) then Exit;

	stRecDrag := DragNode.Data;
	stRecDrop := DropNode.Data;

    if (( stRecDrop^.nDivision = 0 ) and ( stRecDrag^.nDivision = 1 ) and ( VTreeView.DropTarget.Level >  2 )) or
       (( stRecDrop^.nDivision = 1 ) and ( stRecDrag^.nDivision = 1 ) and ( VTreeView.DropTarget.Level >= 2 )) then
        Exit;

	// Drop Check
	iError_sw := fnDropCheck (DragNode, DropNode);

	if iError_sw = 0 then
	begin
		stRecDrag		:= DragNode.Data;
		stRecDrop		:= DropNode.Data;
		// 親
		DragNode_wk		:= DragNode.Parent;
		stRecDrag_wk	:= DragNode_wk.Data;
		DropNode_wk		:= VTreeView.DropTarget;
		if stRecDrop^.nDivision <> 9 then
			DropNode_wk		:= DropNode_wk.Parent;

		Drop_which		:= false;
		iEntNoSv		:= 0;

		if (stRecDrop^.nDivision = 1) or (stRecDrop^.nDivision = 9) then	// 1:合計工事
		begin
			DropNode_wk		:= VTreeView.DropTarget;
			Drop_which		:= true;
		end;

		stRecDrop_wk	:= DropNode_wk.Data;

		m_fAccessTree    := false;
		m_fAccessTab	 := false;
        if stRecDrop^.nDivision = 1 then				// 合計工事だった場合
        begin
            NodeOya := DropNode.Parent;
            stWorkRecOya := NodeOya.Data;
            if stWorkRecOya^.nDivision = 1 then				// 親が合計工事だった場合
            begin
                if BSpeedButtonIS.Caption = '詳細(&T)' then
                begin
                    Root_PMTab.Items.Selected		:= PAGE_JITUZAI;
                    Root_PMTab.Items[1].Enabled		:= false;
                end
                else
                begin
                    Root_PMTab.Items.Selected		:= PAGE_GOKEI;
                    Root_PMTab.Items[1].Enabled		:= true;
                end;
            end
            else
                Root_PMTab.Items[1].Enabled := true;
        end
        else
        begin
            if stRecDrop^.nDivision = 0 then					// 実在工事だった場合、親を見る
            begin
                NodeOya := DropNode.Parent;
                stWorkRecOya := NodeOya.Data;
                if stWorkRecOya^.nDivision = 1 then				// 合計工事だった場合、更に親を見る
                begin
                    NodeOya2 := NodeOya.Parent;
                    stWorkRecOya2 := NodeOya2.Data;
                    if stWorkRecOya2^.nDivision = 1 then			// 親の親が合計工事だった場合、子供は実在のみとする
                    begin
                        if Root_PMTab.Items.Selected = PAGE_GOKEI then
                        begin
                            if BSpeedButtonIS.Caption = '詳細(&T)' then
                            begin
                                Jituzai_PPanel_Grid.Visible 	:= true;
                                Goukei_PPanel_Grid.Visible 		:= false;
                            end
                            else
                            begin
                                Jituzai_PPanel_Card.Visible 	:= true;
                                Goukei_PPanel_Card.Visible 		:= false;
                            end;
                            Root_PMTab.Items.Selected := PAGE_JITUZAI;
                        end;
                        Root_PMTab.Items[1].Enabled := false;
                    end
                    else
                    begin
                        if BSpeedButtonIS.Caption <> '詳細(&T)' then
                            Root_PMTab.Items.Selected := PAGE_JITUZAI;

                        Root_PMTab.Items[1].Enabled := true;
                    end;
                end
                else
                begin
                    if BSpeedButtonIS.Caption <> '詳細(&T)' then
                        Root_PMTab.Items.Selected := PAGE_JITUZAI;

                    Root_PMTab.Items[1].Enabled := true;
                end;
            end
            else
                Root_PMTab.Items[1].Enabled := true;
        end;
		m_fAccessTree    := true;
		m_fAccessTab	 := true;

		qmQuery		:= TMQuery.Create(Self);
		MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

// <203> ADD start
    	SessionPractice(C_ST_PROCESS);
    	try
// <203> ADD end

		MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

		with qmQuery do
		begin
			try
				{EntNo算出}
				Close;
				SQL.Clear;		 							// qmQuery 初期化
//<255> DEL				SQL.Add('Select * from HojyoTree');
				SQL.Add('Select EntNo,BasedNCode from HojyoTree');  //<255> ADD
				SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
				SQL.Add('Order by EntNo DESC');
    			SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
//<255> DEL				SetFld('strSumCode').AsFloat	:= stRecDrop_wk^.InCode;
				SetFld('strSumCode').AsString	:= FormatFloat('0',stRecDrop_wk^.InCode); //<255> ADD

				Open;

				First;

				if Drop_which = true then
				begin
					if Eof = true then
						iEntNo1	:= 100
					else
						iEntNo1	:= GetFld('EntNo').AsInteger + 100;
				end
				else
				begin
					while Eof = false do
					begin
						if stRecDrop^.InCode = GetFld('BasedNCode').AsFloat then
							Break
						else
							Next;
					end;
					iEntNo1		:= GetFld('EntNo').AsInteger;
					Next;
					if Eof = true then
					begin
						iEntNo2	:= 0;
						iEntNoSv:= 0;
					end
					else
					begin
						iEntNo2	:= GetFld('EntNo').AsInteger;
						iEntNoSv:= GetFld('EntNo').AsInteger;
					end;

					iEntNo2		:= iEntNo1 + iEntNo2;
					iEntNo1		:= iEntNo2 div 2;
				end;

				if iEntNo1 <> iEntNoSv then
				begin
					if iEntNo1 <> 0 then
					begin
						{Dragデータ書き込み}
						Close;
						RequestLive	:= false;
						SQL.Clear;
						SQL.Add('update HojyoTree set               ');
						SQL.Add('  MasterKbn  = :iMasterKbn         ');
						SQL.Add(' ,PatternNo  = 0                   ');
						SQL.Add(' ,SumNCode	  = :strSumCode         ');
						SQL.Add(' ,EntNo	  = :iEntNo             ');
						SQL.Add(' ,BasedNCode = :strBasedCode       ');
						SQL.Add(' ,AddKbn	  = :iAddKbn            ');
						SQL.Add(' ,UpdTantoNCode = :iUpdTantoNCode  '); // <202>
						SQL.Add('where MasterKbn  = :pMKBN          ');
                        SQL.Add('  and SumNCode   = :strSumCode_Drag');
                        SQL.Add('  and BasedNCode = :strBasedCode   ');

                        SetFld('pMKBN'          ).AsInteger := m_nMasterDivision;
//<255> DEL						SetFld('strSumCode_Drag').AsFloat	:= stRecDrag_wk^.InCode;
						SetFld('strSumCode_Drag').AsString	:= FormatFloat('0',stRecDrag_wk^.InCode);  //<255> ADD
						SetFld('iMasterKbn'     ).AsInteger	:= m_nMasterDivision;
						SetFld('strSumCode'     ).AsFloat	:= stRecDrop_wk^.InCode;
						SetFld('iEntNo'         ).AsInteger	:= iEntNo1;
//<255> DEL						SetFld('strBasedCode'   ).AsFloat   := stRecDrag^.InCode;
						SetFld('strBasedCode'   ).AsString   := FormatFloat('0',stRecDrag^.InCode);  //<255> ADD
						SetFld('iAddKbn'        ).AsInteger	:= 0;
                        SetFld('iUpdTantoNCode').AsFloat    := m_TantoNCode; // <202>

						// DB更新
						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp ( qmQuery );
                            // ﾛｰﾙﾊﾞｯｸ
							MDataModule^.Rollback ( dbCorp_Select );
							qmQuery.Close;
							Exit;
						end;

                        // ｺﾐｯﾄ
						MDataModule^.Commit ( dbCorp_Select );

                        // 加算体系2更新ﾌﾗｸﾞON
						gbHojyoTree2Flag := true;

						// Dragﾃﾞｰﾀ移動：TreeView
						if ( Drop_which = true ) then
							    DragNode.MoveTo (DropNode, naAddChild)
						else    DragNode.MoveTo (DropNode, naInsert);

						{Grid & Card 再作成}
						MemPost_Sw := 1;
						fnCreateAll ();
						MemPost_Sw := 0;

						if stRecDrop^.nDivision <> 9 then
							DropNode.Parent.Expand(false)
						else
							DropNode.Expand(false)
					end
					else
					begin
						if AgainEntNoSet (stRecDrop_wk^.InCode) = false then				// 登録ＮＯ再編成処理
						begin
							abort;
							exit;
						end;

						{EntNo再算出}
						Close;
						SQL.Clear;		 							// qmQuery 初期化
//<255> DEL						SQL.Add('Select * from HojyoTree');
						SQL.Add('Select EntNo,BasedNCode from HojyoTree');  //<255> ADD
						SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
						SQL.Add('Order by EntNo DESC');
        				SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
//<255> DEL						SetFld('strSumCode').AsFloat	:= stRecDrop_wk^.InCODE;
						SetFld('strSumCode').AsString	:= FormatFloat('0',stRecDrop_wk^.InCODE);  //<255> ADD

						Open;

						First;

						if Drop_which = true then
						begin
							if Eof = true then
								iEntNo1	:= 100
							else
								iEntNo1	:= GetFld('EntNo').AsInteger + 100;
						end
						else
						begin
							while Eof = false do
							begin
								if stRecDrop^.InCode = GetFld('BasedNCode').AsFloat then
									Break
								else
									Next;
							end;
							iEntNo1		:= GetFld('EntNo').AsInteger;
							Next;
							if Eof = true then
							begin
								iEntNo2	:= 0;
							end
							else
							begin
								iEntNo2	:= GetFld('EntNo').AsInteger;
							end;

							iEntNo2		:= iEntNo1 + iEntNo2;
							iEntNo1		:= iEntNo2 div 2;
						end;

						{Dragデータ書き込み}
						Close;
						RequestLive	:= false;
						SQL.Clear;
						SQL.Add('Update HojyoTree');
						SQL.Add('Set');
						SQL.Add('MasterKbn		= :iMasterKbn');
						SQL.Add(',PatternNo		= 0');
						SQL.Add(',SumNCode		= :strSumCode');
						SQL.Add(',EntNo			= :iEntNo');
						SQL.Add(',BasedNCode		= :strBasedCode');
						SQL.Add(',AddKbn		= :iAddKbn');
						SQL.Add(',UpdTantoNCode = :iUpdTantoNCode'); // <202>
						SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode_Drag and BasedNCode=:strBasedCode');

                        SetFld('pMKBN').asInteger := m_nMasterDivision;
//<255> DEL						SetFld('strSumCode_Drag').AsFloat	:= stRecDrag_wk^.InCode;
						SetFld('strSumCode_Drag').AsString	:= FormatFloat('0',stRecDrag_wk^.InCode); //<255> ADD


						SetFld('iMasterKbn').AsInteger		:= m_nMasterDivision;
						SetFld('strSumCode').AsFloat		:= stRecDrop_wk^.InCode;
						SetFld('iEntNo').AsInteger			:= iEntNo1;
//<255> DEL						SetFld('strBasedCode').AsFloat  	:= stRecDrag^.InCode;
						SetFld('strBasedCode').AsString  	:= FormatFloat('0',stRecDrag^.InCode);  //<255> ADD
						SetFld('iAddKbn').AsInteger			:= 0;
                        SetFld('iUpdTantoNCode').AsFloat    := m_TantoNCode; // <202>

						if (ExecSQL = false) then
						begin
							ErrorMessageDsp(qmQuery);
							MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
							qmQuery.Close;
							Exit;
						end;

						MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

						gbHojyoTree2Flag	:=	true;	// 加算体系２更新ﾌﾗｸﾞＯＮ

						{Dragデータ移動：TreeView}
						if Drop_which = true then
							DragNode.MoveTo (DropNode, naAddChild)
						else
							DragNode.MoveTo (DropNode, naInsert);

						{Grid & Card 再作成}
						MemPost_Sw := 1;
						fnCreateAll ();
						MemPost_Sw := 0;

						if stRecDrop^.nDivision <> 9 then
							DropNode.Parent.Expand(false)
						else
							DropNode.Expand(false)
					end;
				end
				else
				begin
					if AgainEntNoSet (stRecDrop_wk^.InCode) = false then				// 登録ＮＯ再編成処理
					begin
						abort;
						exit;
					end;

					{EntNo再算出}
					Close;
					SQL.Clear;		 							// qmQuery 初期化
//<255> DEL					SQL.Add('Select * from HojyoTree');
					SQL.Add('Select EntNo,BasedNCode from HojyoTree');  //<255> ADD
					SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode');
					SQL.Add('Order by EntNo DESC');
    				SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
//<255> DEL					SetFld('strSumCode').AsFloat	:= stRecDrop_wk^.INCODE;
					SetFld('strSumCode').AsString	:= FormatFloat('0',stRecDrop_wk^.INCODE);  //<255> ADD

					Open;

					First;

					if Drop_which = true then
					begin
						if Eof = true then
							iEntNo1	:= 100
						else
							iEntNo1	:= GetFld('EntNo').AsInteger + 100;
					end
					else
					begin
						while Eof = false do
						begin
							if stRecDrop^.InCode = GetFld('BasedNCode').AsFloat then
								Break
							else
								Next;
						end;
						iEntNo1		:= GetFld('EntNo').AsInteger;
						Next;
						if Eof = true then
						begin
							iEntNo2	:= 0;
						end
						else
						begin
							iEntNo2	:= GetFld('EntNo').AsInteger;
						end;

						iEntNo2		:= iEntNo1 + iEntNo2;
						iEntNo1		:= iEntNo2 div 2;
					end;

					{Dragデータ書き込み}
					Close;
					RequestLive	:= false;
					SQL.Clear;
					SQL.Add('Update HojyoTree');
					SQL.Add('Set');
					SQL.Add('MasterKbn		= :iMasterKbn');
					SQL.Add(',PatternNo		= 0');
					SQL.Add(',SumNCode		= :strSumCode');
					SQL.Add(',EntNo			= :iEntNo');
					SQL.Add(',BasedNCode		= :strBasedCode');
					SQL.Add(',AddKbn		= :iAddKbn');
					SQL.Add(',UpdTantoNCode	= :iUpdTantoNCode'); // <202>
					SQL.Add('Where MasterKbn=:pMKBN and SumNCode=:strSumCode_Drag and BasedNCode=:strBasedCode');

                    SetFld('pMKBN').asInteger := m_nMasterDivision;
//<255> DEL					SetFld('strSumCode_Drag').AsFloat	:= stRecDrag_wk^.InCode;
					SetFld('strSumCode_Drag').AsString	:= FormatFloat('0',stRecDrag_wk^.InCode);  //<255> ADD

					SetFld('iMasterKbn').AsInteger		:= m_nMasterDivision;
					SetFld('strSumCode').AsFloat		:= stRecDrop_wk^.InCode;
					SetFld('iEntNo').AsInteger			:= iEntNo1;
//<255> DEL					SetFld('strBasedCode').AsFloat  	:= stRecDrag^.InCode;
					SetFld('strBasedCode').AsString  	:= FormatFloat('0',stRecDrag^.InCode);  //<255> ADD
					SetFld('iAddKbn').AsInteger			:= 0;
                    SetFld('iUpdTantoNCode').AsFloat    := m_TantoNCode; // <202>

					if (ExecSQL = false) then
					begin
						ErrorMessageDsp(qmQuery);
						MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
						qmQuery.Close;
						Exit;
					end;

					MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

					gbHojyoTree2Flag	:=	true;	// 加算体系２更新ﾌﾗｸﾞＯＮ

					{Dragデータ移動：TreeView}
					if Drop_which = true then
						DragNode.MoveTo (DropNode, naAddChild)
					else
						DragNode.MoveTo (DropNode, naInsert);

					{Grid & Card 再作成}
					MemPost_Sw := 1;
					fnCreateAll ();
					MemPost_Sw := 0;

					if stRecDrop^.nDivision <> 9 then
						DropNode.Parent.Expand(false)
					else
						DropNode.Expand(false)
				end;
			finally
				Free;
			end;
		end;

        // <289-5>追加↓
        // ドラッグ元と同一の工事を全て削除
        MakeNodeDelete(DropNode_wk, stRecDrag^.strExCode, stRecDrag_wk^.strExCode);

        // ドロップ先と同一の工事に追加
        MakeNodePaste(DropNode_wk, stRecDrop^.strExCode, stRecDrop^.nDivision);
        // <289-5>追加↑
// <203> ADD start
		finally
    		SessionPractice(C_ED_PROCESS);
    	end;
// <203> ADD end

	end
	else
	begin
		MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjInformation,mjOk, mjDefOk);
	end;

end;


//**************************************************************************
//	Component	:	OnDragOver ( TTreeView )
//                  	TreeView のノードをドロップ
//	Event		:	OnEnter
//**************************************************************************
procedure TJNTCRP018001f.VTreeViewDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
var
	NodeSelect		:	TTreeNode;
	stWorkRecSelect	:	^TreeViewRec;
	DropNode		:	TTreeNode;
	stWorkRecDrop	:	^TreeViewRec;
	NodeChk			:	TTreeNode;
	stWorkRecChk	:	^TreeViewRec;
begin
//	if VTreeView.Selected = VTreeView.Items[0] then
//		ShowMessage('You will not move this NODE !');
//		abort;

	NodeSelect := VTreeView.Selected;
	stWorkRecSelect := NodeSelect.Data;

	if stWorkRecSelect^.nDivision = 9 then
		abort;

	DropNode	:=	(VTreeView.GetNodeAt (X, Y));	//	Drop先のNode取得

	if  (DropNode = nil) then			//	Nil時
	begin
		Accept  := false;
		exit;
	end;

	stWorkRecDrop	:=	DropNode.Data;			//	Drop先のData取得

	if (DropNode.Level > 1) or (stWorkRecDrop^.nDivision = 1) then
	begin
		// 合計→合計の加算が組まれているかどうか
		if stWorkRecSelect^.nDivision = 1 then		// 合計のみ
		begin
			NodeChk := NodeSelect.getFirstChild;
			while NodeChk <> nil do
			begin
				stWorkRecChk  := NodeChk.Data;
				if stWorkRecChk^.nDivision = 1 then
				begin
					Accept  := false;
					exit;
				end;

				NodeChk := NodeSelect.GetNextChild(NodeChk);
			end;
		end;
	end;

	if  (stWorkRecSelect.nDivision = 1) then	//	選択したNodeが合計の時
	begin
		if  (not fnCheckMasterTreeInsertValid (stWorkRecSelect.strExCode,stWorkRecDrop.strExCode)) then
		begin
			Accept	:= false;
			Exit;
		end;
	end;

end;


//**************************************************************************
//	Component	:	OnEnter ( TTreeView )
//                  	TreeView のノードを選択（Enter）
//	Event		:	OnEnter
//**************************************************************************
procedure TJNTCRP018001f.VTreeViewEnter(Sender: TObject);

var
	SelectNode	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	cNodeWork  : TTreeNode;
begin
// <192> ADD start
   	m_AcControl := Screen.ActiveControl;  	// 参照時でもｱｸﾃｨﾌﾞｺﾝﾄﾛｰﾙを保存する
// <192> ADD end

// <193> MOD start
(*
	if giReferFlag = REFER then
		exit;
*)
	if giReferFlag = REFER then   			// 決算確定時
    begin

		MemPost_Sw := 1;
		{Gridのフォーカス移動＆Card表示}
		SelectNode := VTreeView.Selected;
		stWorkRec := SelectNode.Data;

		cNodeWork := SelectNode.GetFirstChild ();

		if stWorkRec^.nDivision = 9 then
		begin
// <198> ADD start
											// 削除権限で判断
            BSpeedButtonDel.Enabled := False;
// <198> ADD end
			MemPost_Sw := 0;
			btnFusenCtl.Enabled     := false;
            LVStyleBar.Enabled      := false;
			Exit;
		end
		else
		begin
// <198> ADD start
            if not m_cJNTArea.IsDelete then // 削除権限なしの場合
            begin
				BSpeedButtonDel.Enabled := false
            end
        	else
        	begin
            	if stWorkRec^.iSyokuti = 1 then
                begin
                	BSpeedButtonDel.Enabled  := fnRecordCount()
                end
            	else
           	 	begin
            		if(cNodeWork <> nil) then
                    begin
            			BSpeedButtonDel.Enabled := false
                    end
                	else
                    begin
                    	BSpeedButtonDel.Enabled := true;
                    end;
                end;
            end;

// <198> ADD end


			btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
            LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
		end;

    	MemPost_Sw := 0;
        Exit;
    end;
// <193> MOD end

	MemPost_Sw := 1;

// <192> DEL start
//	m_AcControl := Screen.ActiveControl;
// <192> DEL end

	{Gridのフォーカス移動＆Card表示}
	SelectNode		:= VTreeView.Selected;
	stWorkRec		:= SelectNode.Data;

	cNodeWork	:= SelectNode.GetFirstChild ();

	if stWorkRec^.nDivision = 9 then
	begin
		MemPost_Sw := 0;
		BSpeedButtonDel.Enabled := false;
		btnFusenCtl.Enabled     := false;
		LVStyleBar.Enabled      := false;
		exit;
	end
	else
	begin
        if m_cJNTArea.IsDelete = false then     //削除権限を考慮する
			BSpeedButtonDel.Enabled := false
        else
        begin
            if stWorkRec^.iSyokuti = 1 then
                BSpeedButtonDel.Enabled  := fnRecordCount()
            else
            begin
            	if(cNodeWork <> nil) then
            		BSpeedButtonDel.Enabled   := false
                else
                    BSpeedButtonDel.Enabled := true;
            end;
        end;

		btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
		LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
	end;


	if (stWorkRec^.nDivision = 1) then
    begin
    end;

{	if JHojyoMA_DMemData.RecordCount <> 0 then
		JHojyoMA_DMemData.First;

	while JHojyoMA_DMemData.Eof = false do
	begin
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if stWorkRec^.strExCode = JHojyoMA_DMemDataGCode.AsString then
			begin
				iFlg := 1;
				Break;
			end;
		end
		else
		begin
		   	if JHojyoMA_DMemDataGCode.AsString <> '' then
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
				begin
					if stWorkRec^.strExCode = Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) then
					begin
						iFlg := 1;
						Break;
					end;
				end;
			end;
		end;
		JHojyoMA_DMemData.Next;
	end;

	if iFlg = 1 then
		fnCreateCard (stWorkRec^.nDivision)
	else
		fnClearCard  (stWorkRec^.nDivision);
}
	MemPost_Sw := 0;

end;

//**************************************************************************
//	Component	:	OnClick ( TMBitBtn )
//					実在工事／更新ボタン
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_BBitBtn_OkClick(Sender: TObject);
var
	strGCode : String;
	iSumKbn	 : Integer;
    rSyncKey : SyncKey;     // <172>
    iRet     : Integer;     // <172>
    Qe       : TMQuery;     // <172>
begin

    //<293> - ST
    // 特殊工事更新時の確認メッセージ対応(更新ボタン押下時、特殊工事として使用がチェックされていたら、メッセージを表示
	if ( Jituzai_ChkBox_Tokusyu.Checked = true ) then
	begin
        // もともと特殊工事に設定されていて、かつ特殊工事設定が更新されていない場合は、メッセージは表示しない
        if ((MasterInfo_DMemDataCodeAttr.AsInteger = 2) and (MasterInfo_DMemDataSpHojyoNCd1.AsFloat <> JHojyoMA_DMemDataNCode.AsFloat))
            or
            ((MasterInfo_DMemDataCodeAttr.AsInteger <> 2) and (JHojyoMA_DMemDataGCode.AsString <> '') and (MasterInfo_DMemDataSpHojyoNCd1.AsFloat <> JHojyoMA_DMemDataNCode.AsFloat)) then
        begin
            iRet := MjsMessageBoxEx(Self, '該当の工事は特殊工事として設定されました。' + #13#10 + '今後、完成工事原価振替仕訳の工事として使用されますが、よろしいですか？',
                                     '確認', mjQuestion, mjYesNo, mjDefNo);
            // 「いいえ」ボタンもしくは「×」ボタン押下時、更新処理をキャンセルする
            if iRet <> mrYes then
            begin
                exit;
            end
        end
    end;
    //<293> - ED
	// ｺｰﾄﾞﾁｪｯｸ
	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
		if ( Jituzai_ETEdit_GCode.Text = '' ) then
		begin
			Beep;
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode');
		end;
	end
	else
	begin
		if ( Jituzai_ENEdit_GCode.Value     = 0    ) and
           ( Jituzai_ENEdit_GCode.InputFlag = true ) then
		begin
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
		end;
	end;

// <203> ADD start
    SessionPractice(C_ST_PROCESS);
    try
// <203> ADD end

    // -------------------------------------------------------------------------
    //  会社関連付処理 <172>
    //
    //  親子同時に同一ｺｰﾄﾞを指定し、詳細画面の更新ﾎﾞﾀﾝを押下した場合の処理
    //  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合の
    //  考慮が必要。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( m_RowState = STATE_INSERT ) then
    begin
        if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
                strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)])       // 数値属性
        else    strGCode := TrimRight (Jituzai_ETEdit_GCode.Text);                       // 文字属性

        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
        MDataModule^.BeginTran( dbCorp_Select );

        rSyncKey.strExCode := strGCode;
        rSyncKey.nDivision := 0;

        // HojyoMAの同期
        iRet := fnCorpRelation ( rSyncKey, 1 );

        // HojyoMAが正常に同期できた場合、KojiInfoの同期を行う
        if ( iRet = 1 ) then
        begin
            rSyncKey.nNCode := uvNCode;
            // KojiInfoの同期
            iRet := fnCorpRelation ( rSyncKey, 2 );
        end;

        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
        if ( iRet = 1 ) then
        begin
            Qe := TMQuery.Create ( Self );

            try
                MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close;
                Qe.SQL.Clear;
//<255> DEL                Qe.SQL.Add('select * from P_kojiinfo2 ');
                Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                Qe.SQL.Add('where MasterKbn = :pMstkbn');
                Qe.SQL.Add('  and NCode     = :pNCode ');
                Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                if Qe.Open = false then
                    Abort;

                Qe.First;
                while not Qe.Eof do
                begin
                    rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                    iRet := fnCorpRelation(rSyncKey, 3);

                    if (iRet <> 0) and (iRet <> 1) then
                        Abort;

                    Qe.Next;
                end;
            finally
                Qe.Close();
                Qe.Free();
            end;
        end;

        if ( iRet <> 1 ) then
        begin
            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( dbCorp_Select );
        end;

        case iRet of
            0:  begin
                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                end;
            1:  begin
                    // 親会社DBに対してｺﾐｯﾄを実行する
                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                    // 子会社DBに対してｺﾐｯﾄを実行する
                    MDataModule.Commit( dbCorp_Select );

                    fnDataRead (rSyncKey.strExCode, rSyncKey.nDivision, 1);

                    // 画面の再描画
                    fnMemSet ( 0, false );
                    fnCreateCard ( 0 );

                    // 正常に関連付が行えた場合
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
                		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
                	else    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');

                    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
                    ClearOtherRec(m_recOther);              // <155><WF>申請書情報ｸﾘｱ
                    FontColorChange();  // <225> 文字色変更
                    Abort;
                end;
            2:  begin
                    // 会社関連付をｷｬﾝｾﾙした場合
                    Abort;
                    Exit;
                end;
            -1, -9: begin
                    // 実在合計不一致、例外ｴﾗｰ
                    Abort;
                end;
        end;
    end;
    // ↑↑↑<172>
    // -------------------------------------------------------------------------

    // 入力値ﾁｪｯｸ
    if not fnDataCheck(0) then Exit;

    // DBに書込
	if not BtnClkWriteJ() then
	begin
		Abort;
		Exit;
	end;

	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
		strGCode := Jituzai_ETEdit_GCode.Text;
		strGCode := TrimRight(strGCode);
		Jituzai_ETEdit_GCode.Text := strGCode;
	end
	else
    begin
		strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);
    end;

    // 補助体系の更新
	iSumKbn := 0;
	fnTreeUpdate (strGCode, iSumKbn);

    // 工事完成振替ﾌﾗｸﾞを初期化する
    //<162> m_FRIFlg := false;

	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
		    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
	else    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');

    if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
        JKeiyaku_DMemData.First;
	if ( JNyukin_DMemData.RecordCount  <> 0 ) then
		JNyukin_DMemData.First;
// <SEI> ADD start
    if ( JSeikyu_DMemData.RecordCount <> 0 ) then
        JSeikyu_DMemData.First;
// <SEI> ADD end

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
    ClearOtherRec(m_recOther);              // <155><WF>申請書情報ｸﾘｱ
    FontColorChange();  // <225> 文字色変更

// <203> ADD start
	finally
    	SessionPractice(C_ED_PROCESS);
    end;
// <203> ADD end

end;

//**************************************************************************
//	Component	:	OnClick ( TMBitBtn )
//					実在工事／取消ボタン
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_BBitBtn_CancelClick(Sender: TObject);

var
	strGCode	: String;
	iSumKbn		: Integer;
	iRet		: Integer;
begin
    m_RetFlg    := False;   // <208> ADD
	if not fnUpdateCheck(0) then
	begin
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,1);
		Beep;
		iRet := MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
		if iRet <> mrYes then
// <208> MOD start
//			exit;
        begin
            m_RetFlg := true;
            exit;
        end;
// <208> MOD end
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		strGCode	:= Jituzai_ETEdit_GCode.Text;
		strGCode := TrimRight(strGCode);
		Jituzai_ETEdit_GCode.Text := strGCode;
	end
	else
		strGCode	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

	fnClearCard(0);						//<155>ｸﾘｱ

	if Sender <> B_ImportWF then		//<155>(if文追加)
	begin
		iSumKbn		:= 0;
		fnDataRead (strGCode, iSumKbn, 0);
//<271> DEL		SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
        m_aCmnt_Jitu.Clear();  //<271> ADD
		fnMemSet (iSumKbn, false);
		fnCreateCard (iSumKbn);
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
	else
		MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF

    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ				//<155>
    FontColorChange();  // <225> 文字色変更

	if Sender <> B_ImportWF then			//<155>(if文追加)
		abort;

end;


//**************************************************************************
//	Component	:	OnClick ( TMBitBtn )
//					合計工事／取消ボタン
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.Goukei_BBitBtn_CancelClick(Sender: TObject);

var
	strGCode	: String;
	iSumKbn		: Integer;
	iRet		: Integer;
begin
    m_RetFlg    := False;   // <208> ADD
	if not fnUpdateCheck(1) then
	begin
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020,1);
		Beep;
		iRet := MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
		if iRet <> mrYes then
// <208> MOD start
//			exit;
        begin
            m_RetFlg := true;
            exit;
        end;
// <208> MOD end
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		strGCode	:= Goukei_ETEdit_GCode.Text;
		strGCode := TrimRight(strGCode);
		Goukei_ETEdit_GCode.Text := strGCode;
	end
	else
		strGCode	:= Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

	fnClearCard(1);						//<155>ｸﾘｱ

	if Sender <> B_ImportWF then		//<155>(if文追加)
	begin
		iSumKbn		:= 1;
		fnDataRead (strGCode, iSumKbn, 0);
//<271> DEL		SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
        m_aCmnt_Gou.Clear();  //<271> ADD
		fnMemSet (iSumKbn, false);
		fnCreateCard (iSumKbn);
	end;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
	else
		MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF

    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ				//<155>
    

	if Sender <> B_ImportWF then			//<155>(if文追加)
		abort;
end;


//**************************************************************************
//	Component	:	OnClick ( TMBitBtn )
//					合計工事／更新ボタン
//	Event		:	OnClick
//**************************************************************************
procedure TJNTCRP018001f.Goukei_BBitBtn_OkClick(Sender: TObject);
var
	strGCode : String;
	iSumKbn	 : Integer;
    rSyncKey : SyncKey;     // <172>
    iRet     : Integer;     // <172>
    Qe       : TMQuery;     // <172>
begin

    // ｺｰﾄﾞﾁｪｯｸ
	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
        // ﾌﾘｰ属性
		if ( Goukei_ETEdit_GCode.Text = '' ) then
		begin
			Beep();
			MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode');
			Abort;
		end;
	end
	else
	begin
        // 数値属性
		if ( Goukei_ENEdit_GCode.Value = 0 ) and ( Goukei_ENEdit_GCode.InputFlag = true ) then
		begin
			Beep();
			MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
			Abort;
		end;
	end;



// <203> ADD start
    SessionPractice(C_ST_PROCESS);
    try
// <203> ADD end

    // -------------------------------------------------------------------------
    //  会社関連付処理 <172>
    //
    //  親子同時に同一ｺｰﾄﾞを指定し、詳細画面の更新ﾎﾞﾀﾝを押下した場合の処理
    //  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合の
    //  考慮が必要。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( m_RowState = STATE_INSERT ) then
    begin
        if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
                strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)])       // 数値属性
        else    strGCode := TrimRight (Goukei_ETEdit_GCode.Text);                       // 文字属性

        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
        MDataModule^.BeginTran( dbCorp_Select );

        rSyncKey.strExCode := strGCode;
        rSyncKey.nDivision := 1;

        // HojyoMAの同期
        iRet := fnCorpRelation ( rSyncKey, 1 );

        if ( iRet = 1 ) then
        begin
            rSyncKey.nNCode := uvNCode;
            // KojiInfoの同期
            iRet := fnCorpRelation ( rSyncKey, 2 );
        end;

        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
        if ( iRet = 1 ) then
        begin
            Qe := TMQuery.Create ( Self );

            try
                MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close;
                Qe.SQL.Clear;
//<255> DEL                Qe.SQL.Add('select * from P_kojiinfo2 ');
                Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                Qe.SQL.Add('where MasterKbn = :pMstkbn');
                Qe.SQL.Add('  and NCode     = :pNCode ');
                Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                if ( Qe.Open = false ) then
                    Abort;

                Qe.First;
                while not Qe.Eof do
                begin
                    rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                    iRet := fnCorpRelation(rSyncKey, 3);

                    if ( iRet <> 0 ) and ( iRet <> 1 ) then
                        Abort;

                    Qe.Next;
                end;
            finally
                Qe.Close();
                Qe.Free();
            end;
        end;

        if ( iRet <> 1 ) then
        begin
            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( dbCorp_Select );
        end;

        case iRet of
            0:  begin
                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                end;
            1:  begin
                    // 親会社DBに対してｺﾐｯﾄを実行する
                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                    // 子会社DBに対してｺﾐｯﾄを実行する
                    MDataModule.Commit( dbCorp_Select );

                    // 画面の再描画
                    fnMemSet (1, false);
                    fnCreateCard (1);

                    // 正常に関連付が行えた場合
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
                		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
                	else    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');

                    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
                    ClearOtherRec(m_recOther);              // <155><WF>申請書情報ｸﾘｱ
                    Abort;
                end;
            2:  begin
                    // 会社関連付をｷｬﾝｾﾙした場合
                    Abort;
                    Exit;
                end;
            -1, -9: begin
                    // 実在合計不一致、例外ｴﾗｰ
                    Abort;
                end;
        end;
    end;
    // ↑↑↑<172>
    // -------------------------------------------------------------------------

    // 入力値ﾁｪｯｸ
	if ( not fnDataCheck (1) ) then Exit;

    // ＤＢへの書込
	if ( not BtnClkWriteG() ) then
	begin
		Abort;
		Exit;
	end;

	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
		strGCode := Goukei_ETEdit_GCode.Text;
		strGCode := TrimRight(strGCode);
		Goukei_ETEdit_GCode.Text := strGCode;
	end
	else
    begin
		strGCode := Format ('%.16d',[Trunc (Goukei_ENEdit_GCode.Value)]);
    end;

    // 加算体系の更新
	iSumKbn := 1;
	fnTreeUpdate ( strGCode, iSumKbn );

	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
		    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
	else    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');

    if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
        GKeiyaku_DMemData.First;
	if ( GNyukin_DMemData.RecordCount  <> 0 ) then
		GNyukin_DMemData.First;

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
    ClearOtherRec(m_recOther);              // <155><WF>申請書情報ｸﾘｱ

// <203> ADD start
	finally
    	SessionPractice(C_ED_PROCESS);
    end;
// <203> ADD end

end;

//**************************************************************************
//	Component	:	JHojyoMA_DMemData ( TdxMemData )
//                  	DBに書き込み
//	Event		:	AfterPost
//**************************************************************************
procedure TJNTCRP018001f.JHojyoMA_DMemDataAfterPost(DataSet: TDataSet);

var
	strGCode		: String;
	iSumKbn			: Integer;
begin
	if giReferFlag = REFER then
		exit;

	if MemPost_Sw <> 0 then
		exit;

	if m_fEnd = 1 then
		Exit;

	if Jituzai_PPanel_Grid.Visible = false then
		exit;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		strGCode	:= JHojyoMA_DMemDataGCode.AsString
	else
	begin
		if JHojyoMA_DMemDataGCode.AsString <> '' then
			strGCode	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
		else
			strGCode := '';
	end;

	iSumKbn		:= 0;

	SessionPractice(C_ST_PROCESS);			   	// <203> ADD

    // DBに書込み
    if ( fnDataWrite (strGCode, iSumKbn, false) = false ) then
    begin

    	SessionPractice(C_ED_PROCESS);          // <203> ADD

        JHojyoMA_DMemData.delete;   // 編集中の行を削除 <166>
        Abort;
        Exit;
    end;

    // TreeView追加or更新
    fnTreeUpdate (strGCode, iSumKbn);

    SessionPractice(C_ED_PROCESS);          	// <203> ADD

end;

//**************************************************************************
//	Component	:	GHojyoMA_DMemData ( TdxMemData )
//                  	DBに書き込み
//	Event		:	AfterPost
//**************************************************************************
procedure TJNTCRP018001f.GHojyoMA_DMemDataAfterPost(DataSet: TDataSet);
var
	strGCode		: String;
	iSumKbn			: Integer;
begin
	if giReferFlag = REFER then
		exit;

	if MemPost_Sw <> 0 then
		exit;

	if m_fEnd = 1 then
		Exit;

	if Goukei_PPanel_Grid.Visible = false then
		exit;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		strGCode	:= GHojyoMA_DMemDataGCode.AsString
	else
	begin
		if GHojyoMA_DMemDataGCode.AsString <> '' then
			strGCode	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
		else
			strGCode := '';
	end;

	iSumKbn := 1;

	SessionPractice(C_ST_PROCESS);				// <203> ADD

	// DBに書込み
	if ( fnDataWrite (strGCode, iSumKbn, false) = false ) then
	begin

    	SessionPractice(C_ED_PROCESS);       	// <203> ADD

        GHojyoMA_DMemData.delete;   // 編集中の行を削除 <166>
		Abort;
		Exit;
	end;

	// TreeView追加or更新
	fnTreeUpdate (strGCode, iSumKbn);

    SessionPractice(C_ED_PROCESS);       		// <203> ADD

end;

//**************************************************************************
//	Proccess	:	画面の初期化(ECombo_Headerが変更された場合に処理する)
//                  OnPaintの処理を移動
//	Name		:
//	Date		:
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnInitialize;
var
	JNTCRP018001Syo : TJNTCRP018001SyokuchiDlgf;
    QueryRead	    : TMQuery;
	iCodeDigit	    : Integer;
	iCodeAttr	    : Integer;
	iSumKbn		    : Integer;

    // <178>
	//iCorpKbn	    : Integer;
	//iDataKbn	    : Integer;
	//iUseKbn		: Integer;
	//stMessageRec  : TMJSMsgRec;
	//stWork		: String;
	//stName		: String;
	//stBusyoName	: String;
    // <178>
begin

	if ( giCloseFlg <> 0 ) then
	begin
		raise EMathError.Create('加算体系の表示に失敗しました｡');
		Close;
		Exit;
	end;

//<KSN> ADD St
    // 諸口チェックをここに移動
    QueryRead := TMQuery.Create ( Self );

    MDataModule^.SetDBInfoToQuery ( dbCorp_Select, QueryRead );

    with QueryRead do
    begin
        // 自社に諸口が登録済かﾁｪｯｸ
        Close();
        SQL.Clear();
        SQL.Add('SELECT NCode FROM HojyoMA          ');
        SQL.Add('WHERE MasterKbn   = :pMstKbn   ');
        SQL.Add('  AND Syokuchikbn = 1          ');
        SQL.Add('  AND RDelKbn     = 0          ');
        ParamByName('pMstKbn').AsInteger := m_nMasterDivision;

        if ( Open() = false ) then
        begin
            // SQLｴﾗｰ
            ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, QueryRead );
            with MjsMsgRec do
                MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
            Exit;
        end;

        // 既に諸口ﾃﾞｰﾀが登録済みの場合、諸口登録DLGは表示しない
        if	( not EOF ) then
        begin
            giChkFlg      := 1;
            m_SyokuchiFlg := true;
        end
        else
        begin
            m_SyokuchiFlg := false;

			//↓<MLXDEP-2>MLXの時は諸口の登録をさせない。
			if TMSeries.IsMjsLink3 = True then
			begin
            	giChkFlg      := 1;
            	m_SyokuchiFlg := true;
			end;
			//↑<MLXDEP-2>

        end;

        Close();
    end;
//<KSN> ADD Ed
	if ( giChkFlg = 0 ) then
	begin

//<KSN> DEL		QueryRead := TMQuery.Create(Self);
		//iCorpKbn := 0;
		//iDataKbn := 0;
		//iUseKbn  := 0;
		//stName   := '';
		//stBusyoName := '';

		// 会社基本情報読み込み
		try
            MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

            (*
			QueryRead.Close;
			QueryRead.SQL.Clear;
			QueryRead.SQL.Add('Select DataKbn,CorpKbn from DTMAIN_MAS');
			QueryRead.Open;

			if ( QueryRead.Eof = false ) then
            begin
				iDataKbn := QueryRead.GetFld('DataKbn').AsInteger;
				iCorpKbn := QueryRead.GetFld('CorpKbn').AsInteger;
            end;

            //<147>--- ST
            // 工事の時
            if m_pMyAppRecord.m_sParameter = '1' then
    			stName := '工事'
            // ﾌﾟﾛｼﾞｪｸﾄの時
            else
       			stName := 'プロジェクト';
            //<147>--- ED

			// ﾏｽﾀ基本情報読み込み
			QueryRead.Close;
			QueryRead.SQL.Clear;
			QueryRead.SQL.Add('Select UseKbn, JHojyoName from MasterInfo');
			QueryRead.SQL.Add('Where MasterKbn = :pMKBN');
            QueryRead.ParamByName('pMKBN').AsInteger := m_nMasterDivision;
			QueryRead.Open;

			if QueryRead.Eof = false then
			begin
				iUseKbn := QueryRead.GetFld('UseKbn').AsInteger;
				stName := QueryRead.GetFld('JHojyoName').AsString;
				stName := Trim(stName);
			end;

            //<147>	if stName = '' then
            //<147>	    stName := '工事';

			// 部署だったら読み込み
			if iDataKbn = 3 then
			begin
				// ｼｽﾃﾑ基本情報読み込み
				QueryRead.Close;
				QueryRead.SQL.Clear;
				QueryRead.SQL.Add('Select SysName from MasInfo Where SysID = 1007');
				QueryRead.Open;

				if QueryRead.Eof = false then
					stBusyoName := QueryRead.GetFld('SysName').AsString;

				if stBusyoName = '' then
					stBusyoName := '部署';
			end;

            // 採用のﾁｪｯｸはWMOnPaintへ移動 ↓<178>
			// 法人区分が工事以外で、採用がない場合は終了
            //<146>if ((iCorpKbn <> 3) and (iCorpKbn <> 4)) and (iUseKbn = 0) then
			if (iUseKbn = 0) then   //<146>
			begin
				ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 10);
				stWork := ComArea.m_MsgStd.MsgChange(stMessageRec.sMsg,'@_@',stName);
				Beep;
				MjsMessageBoxEx(Self,stWork, stMessageRec.sTitle,stMessageRec.icontype ,
								stMessageRec.btntype , stMessageRec.btndef,stMessageRec.LogType );

				Close;
				Exit;
			end;

            {
			// 工事が未登録で登録権利がない場合
			if giReferFlag = REFER then
			begin
				MjsMessageBoxEX(Self,stName + '情報が未登録のため処理を終了します。',
								'登録',mjInformation, mjOk, mjDefOk);
				Close;
				Exit;
			end;
            }

			// 部署で工事が未登録の場合
			if iDataKbn = 3 then
			begin
				Beep;
				MjsMessageBoxEX(Self,'経理側で「諸口マスタ」が未登録のため'#13#10 + stBusyoName + '側でのマスタ登録は行えません。',
								'登録',mjWarning, mjOk, mjDefOk);
				Close;
				Exit;
			end;


            {<146>*** この処理は通りません ***
			// 工事採用確認
			if iUseKbn = 0 then
			begin
				iRet := MjsMessageBoxEX(Self,'会社基本情報では「採用なし」の設定ですが、'#13#10'登録処理を継続しますか？',
										'登録',mjQuestion, mjYesNo, mjDefNo);

				if iRet <> mrYes then
				begin
					Close;
					exit;
				end;
			end;
            }//<146>*** この処理は通りません ***

            {// 採用DLGは表示しない
			// 採用区分Dlg表示
			if giAllCnt = 0 then
			begin
				JNTCRP018001Chk	:= TJNTCRP018001ChkDlgf.fnCreateDialog (Self, MDataModule^, dbCorp_Select, m_nMasterDivision, m_pMyAppRecord);
				if JNTCRP018001Chk <> nil then
				begin
					if	(JNTCRP018001Chk.ShowModal () = mrCancel) then
					begin
						JNTCRP018001Chk.Release;
						Close;
						Exit;
					end;
					JNTCRP018001Chk.Release;
				end
				else
				begin
					raise EMathError.Create('採用区分ダイアログの作成に失敗しました｡');
					Close;
					Exit;
				end;
			end;
            }

            *) // <178>

            // 変更後ﾏｽﾀ基本情報再読込み
			fnMasterInfoRead();

            // <172>if giReferFlag <> REFER then
            if ( giReferFlag <> REFER ) and ( m_SyokuchiFlg = false ) then  // <172>
            begin
                iCodeDigit := MasterInfo_DMemDataCodeDigit.AsInteger;
                iCodeAttr  := MasterInfo_DMemDataCodeAttr.AsInteger;
                // 諸口登録Dlg表示
                // <172>JNTCRP018001Syo	:= TJNTCRP018001SyokuchiDlgf.fnCreateDialog (Self, MDataModule^, dbCorp_Select, ComArea, m_nMasterDivision,
                // <172>                                                        iCodeDigit, iCodeAttr, gstErrorStr, m_pMyAppRecord);

                // 諸口登録Dlg表示
                JNTCRP018001Syo	:= TJNTCRP018001SyokuchiDlgf.fnCreateDialog
                                        (m_pMyAppRecord,
                                         Self,
                                         dbCorp_Select,
                                         m_nMasterDivision,
                                         iCodeDigit,
                                         iCodeAttr,
                                         gstErrorStr,
                                         @m_SyncMaster); // <172>

                if JNTCRP018001Syo <> nil then
                begin
//<MLXDEP> DEL                    if	(JNTCRP018001Syo.ShowModal () = mrCancel) then  // <MLXDEP> コメント解除時は削除
                    if	(JNTCRP018001Syo.ShowModal () = mrCancel) and (not (TMSeries.IsMjsLink3)) then		//<MLXDEP> ADD
                    begin
                        JNTCRP018001Syo.Release;
                        Exit;
                    end;
                    JNTCRP018001Syo.Release;
                end
                else
                begin
                    raise EMathError.Create('諸口登録ダイアログの作成に失敗しました｡');
                    Close;
                    Exit;
                end;
            end;


			// 登録件数表示
//<KSN> MOD St
{
			QueryRead.Close;
			QueryRead.SQL.Clear;		 							// qmQuery 初期化
//<255> DEL			QueryRead.SQL.Add('Select Count(*) As Kensu from HojyoMA');
			QueryRead.SQL.Add('Select Count(NCode) As Kensu from HojyoMA');  //<255> ADD
    		QueryRead.SQL.Add('Where MasterKbn=:pMKBN and RDelKbn=0');
            QueryRead.ParamByName('pMKBN').asInteger := m_nMasterDivision;
			QueryRead.Open;										// 登録件数取得
			giAllCnt := QueryRead.GetFld('Kensu').AsInteger;
}
            giAllCnt := fnHojyoMA_Count(m_nMasterDivision);
//<KSN> MOD Ed

			LblRecCnt.Caption := IntToStr(giAllCnt);

            // ↓↓↓<120>
            if ( giAllCNT <> 0 ) then
                    m_SyokuchiFlg   :=  true
            else    m_SyokuchiFlg   :=  false;
            // ↑↑↑<120>

		finally
			QueryRead.Close;
			QueryRead.Free;
		end;

		{Flag Clear}
		MemPost_Sw	:= 1;
		m_fAccessTree    := false;

		{TreeView 作成}
		fnRebuildTreeViewItems ();

		{TreeView はぐれ作成}
		if fnRebuildTreeViewItemsHagure () = false then
		begin
			Close;
			exit;
		end;

        if PPanelTree.Visible then  //<KSN> ADD
        begin                       //<KSN> ADD
            {Grid 初期表示}
            TBaseNode	:= VTreeView.Items[0];
            TBaseNodeSv	:= VTreeView.Items[0];
        end;  //<KSN> ADD

		LookUpDataSet();										// 税率ﾃﾞｰﾀｾｯﾄ
		iSumKbn		:= 0;										// 実在グリッド
//<255> MOD St
{
		fnCreateGrid (TBaseNode, iSumKbn);
		if JHojyoMA_DMemData.Eof = false then
		begin
			fnCreateCard (iSumKbn);
		end
		else
			fnClearCard  (iSumKbn);
}
        if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
            fnCreateGrid (TBaseNode, iSumKbn);
            JHojyoMA_DMemData.First;
        end
        else
        begin
            fnClearCard  (iSumKbn);
			fnCreateCard (iSumKbn);
        end;
//<255> MOD Ed

		iSumKbn		:= 1;										// 合計グリッド
//<255> MOD St
{
		fnCreateGrid (TBaseNode, iSumKbn);
		if GHojyoMA_DMemData.Eof = false then
		begin
			GHojyoMA_DMemData.First;
			fnCreateCard (iSumKbn);
		end
		else
			fnClearCard  (iSumKbn);
}
        if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
            fnCreateGrid (TBaseNode, iSumKbn);
            GHojyoMA_DMemData.First;
        end
        else
        begin
            fnClearCard  (iSumKbn);
			fnCreateCard (iSumKbn);
        end;
//<255> MOD Ed

		MemPost_Sw	:= 0;

		giChkFlg := 1;

		m_fAccessTree    := true;
	end;

end;

//**************************************************************************
//	Proccess	:	対象データをグリッドに表示する（子ノード全て）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	MyTreeNode	: TTreeNode
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnCreateGrid(WkTreeNode: TTreeNode; iSumKbn: Integer);
var
	stWorkRec	: ^TreeViewRec;
//	strGCode	: String;
    iSumNCode : Extended;  //<KSN> ADD
begin
	if iSumKbn = 0 then
	begin
		JHojyoMA_DDataSource.DataSet := nil;
		Jituzai_DdxDBGrid.BeginUpdate;
		JHojyoMA_DMemData.Close;
		JHojyoMA_DMemData.Open;
//<271> DEL		SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
        m_aCmnt_Jitu.Clear();  //<271> ADD
	end
	else
	begin
		GHojyoMA_DDataSource.DataSet := nil;
		Goukei_DdxDBGrid.BeginUpdate;
		GHojyoMA_DMemData.Close;
		GHojyoMA_DMemData.Open;
//<271> DEL		SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
        m_aCmnt_Gou.Clear();  //<271> ADD
	end;
//<KSN> MOD St
{
	stWorkRec	:= WkTreeNode.Data;
	strGCode	:= stWorkRec^.strExCode;
}
    if TTreeNode = nil then
        iSumNCode := 0
    else
    begin
    	stWorkRec := WkTreeNode.Data;
        iSumNCode := stWorkRec^.iNCODE;
    end;
//<KSN> MOD Ed
	try
		with HojyoMA_DMQuery do
		begin
			Close;
			SQL.Clear;		 							// qmQuery 初期化
//<255> MOD St
//			SQL.Add('Select * from HojyoMA MA');
			SQL.Add('Select MA.GCode ');
			SQL.Add('      ,MA.Renso ');
			SQL.Add('      ,MA.LongName ');
			SQL.Add('      ,MA.SimpleName ');
			SQL.Add('      ,MA.NCode ');
			SQL.Add('      ,MA.MasterKbn ');
			SQL.Add('      ,MA.SumKbn ');
			SQL.Add('      ,MA.RDelKbn ');
			SQL.Add('      ,MA.FinishDate ');
			SQL.Add('      ,MA.BunCode ');
			SQL.Add('      ,MA.MoveKbn ');
			SQL.Add('      ,MA.Syokuchikbn ');
			SQL.Add('      ,MA.RootKbn ');
			SQL.Add('      ,FI.FusenKbn ');
			SQL.Add('      ,FI.FusenCmnt ');
            SQL.Add('from HojyoMA MA ');
//<255> MOD Ed
			SQL.Add('Left Outer Join HojyoTree TR On MA.NCode = TR.BasedNCode and TR.MasterKbn = :pMKBN');
			SQL.Add('Left Outer Join MFusenInfo FI On MA.NCode = FI.NCode and FI.MasterKbn = :pMKBN');
			SQL.Add('where TR.SumNCode =:SUMCD and MA.MasterKbn = :pMKBN and MA.RDelKbn = 0 and MA.SumKbn =:SUM');
			SQL.ADD('ORDER BY EntNo');
//<255> DEL			SetFld('SUMCD').AsFloat := stWorkRec^.iNCODE;
//<KSN> DEL			SetFld('SUMCD').AsString := FormatFloat('0',stWorkRec^.iNCODE);  //<255> ADD
			SetFld('SUMCD').AsString := FormatFloat('0',iSumNCode);  //<KSN> ADD
			SetFld('SUM').AsInteger := iSumKbn;
            SetFld('pMKBN').asInteger := m_nMasterDivision;
			Open;

			while Eof = false do
			begin
				fnMemSet (iSumKbn, true);
				Next;
			end;
		end;

	finally
		if iSumKbn = 0 then
		begin
			JHojyoMA_DDataSource.DataSet := JHojyoMA_DMemData;
			if JHojyoMA_DMemData.RecordCount <> 0 then
				JHojyoMA_DMemData.First;
			Jituzai_DdxDBGrid.EndUpdate;
		end
		else
		begin
			GHojyoMA_DDataSource.DataSet := GHojyoMA_DMemData;
			if GHojyoMA_DMemData.RecordCount <> 0 then
				GHojyoMA_DMemData.First;
			Goukei_DdxDBGrid.EndUpdate;
		end;
	end;

end;


//**************************************************************************
//	Proccess	:	対象データをカードに表示する
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnCreateCard(iSumKbn: Integer);
var
	strGCode  : String;
    strName	  : String;		// <SEI> ADD
    exNCode	  : Extended;	// <SEI> ADD
	iValue	  : Integer;
	QueryRead : TMQuery;
    lvNM      : String;
    i         : Integer;
//    rSyncKey  : SyncKey;     // <172>
//    iRet      : Integer;     // <172>
    strMemo   : String;
	lvSgCode        : string; //<SZERO>
begin
// <162>    MMasterKBN.itemIndex := -1;
	MMasterKBN.itemIndex := 0;		// <162>
// <109>    MMasterKBNChange(MMasterKBN);
    btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
	LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
    exNCode := 0;  //<SEI> ADD
	QueryRead := nil;


	try
		QueryRead := TMQuery.Create ( Self );
		MDataModule^.SetDBInfoToQuery ( dbCorp_Select, QueryRead );

        // 実在
		if ( iSumKbn = 0 ) then
		begin
			// 付箋情報SET
            FusenDsp(iSumKbn, JHojyoMA_DMemDataGCode.AsString, 1);
			if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
			begin
				if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
					Jituzai_ETEdit_GCode.Text	   := JHojyoMA_DMemDataGCode.AsString
				else
				begin
					Jituzai_ENEdit_GCode.InputFlag := false;
					Jituzai_ENEdit_GCode.Value	   := StrToInt64 (Trim (JHojyoMA_DMemDataGCode.AsString));
				end;
			end
			else
			begin
				if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
					Jituzai_ETEdit_GCode.Text	   := ''
				else
				begin
					Jituzai_ENEdit_GCode.Value	   := 0;
					Jituzai_ENEdit_GCode.InputFlag := true;
				end;
			end;

			strGCode := JHojyoMA_DMemDataGCode.AsString;

            // 付箋初期化<101>
            for i := 1 to  4 do
            begin
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
            end;

            if ( JHojyoMA_DMemDataFusenIndex.AsInteger >= 1 ) and
               ( JHojyoMA_DMemDataFusenIndex.AsInteger <= 4 ) then
            begin
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(JHojyoMA_DMemDataFusenIndex.AsInteger))).Visible := true;
            end;

			Jituzai_ETEdit_RenChar.Text			 := JHojyoMA_DMemDataRenChar.AsString;
			Jituzai_ETEdit_LongName.Text		 := JHojyoMA_DMemDataLongName.AsString;
			Jituzai_ETEdit_SimpleName.Text		 := JHojyoMA_DMemDataSimpleName.AsString;
			Jituzai_ENEdit_ZipCode1.Value		 := JHojyoMA_DMemDataZipCode1.AsInteger;
			Jituzai_ENEdit_ZipCode2.Value		 := JHojyoMA_DMemDataZipCode2.AsInteger;
			Jituzai_ETEdit_Address1.Text		 := JHojyoMA_DMemDataAddress1.AsString;
			Jituzai_ETEdit_Address2.Text		 := JHojyoMA_DMemDataAddress2.AsString;
			Jituzai_ETEdit_TelNo.Text			 := JHojyoMA_DMemDataTelNo.AsString;
			Jituzai_EDEdit_StartDate.AsDateTime  := JHojyoMA_DMemDataStartDate.AsDateTime;
			Jituzai_EDEdit_EndDate.AsDateTime    := JHojyoMA_DMemDataENDDate.AsDateTime;
			Jituzai_EDEdit_JStartDate.AsDateTime := JHojyoMA_DMemDataJStartDate.AsDateTime;
			Jituzai_EDEdit_JEndDate.AsDateTime   := JHojyoMA_DMemDataJStartDate.AsDateTime;
            Jituzai_ETEdit_BIKO.text             := JHojyoMA_DMemDataBIKO.AsString;
// <205> ADD start
            Jituzai_ETEdit_FaxNo.Text            := JHojyoMA_DMemDataFAXNo.AsString;
	        iValue                               := JHojyoMA_DMemDataUkeoiKbn.AsInteger;
			Jituzai_ENEdit_UkeoiKbn.InputFlag	 := false;
			Jituzai_ENEdit_UkeoiKbn.Value		 := iValue;
			Jituzai_LLabel_UkeoiKbnDsp.Caption	 := sUkeoi[iValue];
            Jituzai_ETEdit_Gaiyou.Text           := JHojyoMA_DMemDatagaiyou.AsString ;
// <205> ADD end
// <SEI> ADD start
            if IsSeikyuYoteiUse then
            begin
                // 請求先ｺｰﾄﾞ(実在)
                if JHojyoMA_DMemDataSeikyusakiGCode.AsString <> '' then
                begin
                    Jituzai_ETEdit_SeikyusakiCd.Visible    := false;
                    Jituzai_ETEdit_SeikyusakiCd.Text       := '';
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SeikyusakiCd.Visible := true;
                        Jituzai_ETEdit_SeikyusakiCd.Enabled := true;
                        Jituzai_ETEdit_SeikyusakiCd.Text	 := JHojyoMA_DMemDataSeikyusakiGCode.AsString;
                    end
                    else
                    begin
                        Jituzai_ENEdit_SeikyusakiCd.Visible := true;
                        Jituzai_ENEdit_SeikyusakiCd.Enabled := true;
                        Jituzai_ENEdit_SeikyusakiCd.Value	 := StrToInt64 (Trim (JHojyoMA_DMemDataSeikyusakiGCode.AsString));
                        Jituzai_ENEdit_SeikyusakiCd.InputFlag	:= false;
                    end;

                    strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
                                        JHojyoMA_DMemDataSeikyusakiGCode.AsString);

                    if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
                    begin
                        Exit;
                    end;

                    Jituzai_LLabel_SeikyusakiNm.Caption	:= strName;
                end
                else
                begin
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SeikyusakiCd.Text		:= '';
                    end
                    else
                    begin
                        Jituzai_ENEdit_SeikyusakiCd.Value		:= 0;
                        Jituzai_ENEdit_SeikyusakiCd.InputFlag	:= true;
                    end;
                    Jituzai_LLabel_SeikyusakiNm.Caption	:= '';
                end;

                // 一括請求先工事ｺｰﾄﾞ(実在)
                if not ChangeIkkatuKouji(SUMKBN_JITUZAI) then
                begin
                    Exit;
                end;
                if JHojyoMA_DMemDataSeikyuKoujiGCode.AsString <> '' then
                begin
                    Jituzai_ETEdit_SeikyuKoujiCd.Visible    := false;
                    Jituzai_ETEdit_SeikyuKoujiCd.Text       := '';
                    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SeikyuKoujiCd.Text	 := JHojyoMA_DMemDataSeikyuKoujiGCode.AsString;
                    end
                    else
                    begin
                        Jituzai_ENEdit_SeikyuKoujiCd.Value	 := StrToInt64 (Trim (JHojyoMA_DMemDataSeikyuKoujiGCode.AsString));
                        Jituzai_ENEdit_SeikyuKoujiCd.InputFlag	:= false;
                    end;

                    strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttr.AsInteger,
                                        JHojyoMA_DMemDataSeikyuKoujiGCode.AsString);

                    if not fnGetHojNameSeikyu(m_nMasterDivision, SUMKBN_JITUZAI, strGCode, strName, exNCode, OPT_KOUJI_IKKATUSEIKYU) then
                    begin
                        Exit;
                    end;

                    Jituzai_LLabel_SeikyuKoujiNm.Caption	:= strName;
                end
                else
                begin
                    if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SeikyuKoujiCd.Text		:= '';
                    end
                    else
                    begin
                        Jituzai_ENEdit_SeikyuKoujiCd.Value		:= 0;
                        Jituzai_ENEdit_SeikyuKoujiCd.InputFlag	:= true;
                    end;
                    Jituzai_LLabel_SeikyuKoujiNm.Caption	:= '';
                end;
            end;
// <SEI> ADD end
			with QueryRead do
			begin

// <205>     ADD start
                // 施主ｺｰﾄﾞ
                if JHojyoMA_DMemDataSesNCode.AsString <> '' then
                begin
// <276> ADD st
// <277> MOD st					if (m_bKojiLicense) then
					if ( (m_bNoControlSesyu = False) and (m_bKojiLicense) ) or
                       (m_bNoControlSesyu = True) then	// <277> MOD ed
                    begin
// <276> ADD ed
                        Jituzai_ETEdit_SeshuCode.Visible    := false;
                        Jituzai_ETEdit_SeshuCode.Text       := '';
                        if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                        begin
                            Jituzai_ETEdit_SeshuCode.Visible := true;
                            Jituzai_ETEdit_SeshuCode.Enabled := true;
                            Jituzai_ETEdit_SeshuCode.Text	 := JHojyoMA_DMemDataSesNCode.AsString;
                        end
                        else
                        begin
                            Jituzai_ENEdit_SeshuCode.Visible := true;
                            Jituzai_ENEdit_SeshuCode.Enabled := true;
                            Jituzai_ENEdit_SeshuCode.Value	 := StrToInt64 (Trim (JHojyoMA_DMemDataSesNCode.AsString));
                            Jituzai_ENEdit_SeshuCode.InputFlag	:= false;
                        end;
                    end;	// <276> ADD
				    Close;
				    SQL.Clear;		 							// qmQuery 初期化
// <224> MOD start
//                    SQL.Add('select Nm from MSOFU ');
                    SQL.Add('select Nmk as Nm from MSOFU ');
// <224> MOD end
                    SQL.Add('where GCODE = :strGCode and NCode=:exNCode and RDelKBN = 0 and NouKbn = 4');

//<255> DEL                    SetFld('exNCode').AsFloat :=  fnGetNCODE(JHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger);
                    SetFld('exNCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(JHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger));  //<255> ADD

                    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                        SetFld('strGCode').AsString	:= JHojyoMA_DMemDataSesNCode.AsString
                    else
                    begin
                        if JHojyoMA_DMemDataSesNCode.AsString <> '' then
                            SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataSesNCode.AsString))])
                        else
                            SetFld('strGCode').AsString	:= '';
                    end;

                    Open;

                   	if EOF = false then
					begin
						Jituzai_LLabel_SeshuName.Caption	:= GetFld('Nm').AsString;
					end
					else
                    begin
						Jituzai_LLabel_SeshuName.Caption	:= '';
                    end;
                end
                else
				begin
					if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                    begin
						Jituzai_ETEdit_SeshuCode.Text		:= '';
                    end
					else
					begin
						Jituzai_ENEdit_SeshuCode.Value		:= 0;
						Jituzai_ENEdit_SeshuCode.InputFlag	:= true;
					end;
                		Jituzai_LLabel_SeshuName.Caption	:= '';
                end;

                // 施行部門
                if JHojyoMA_DMemDataSekouBmnCode.AsString <>'' then
                begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
						Jituzai_ETEdit_SekouBmnCode.Text			:= JHojyoMA_DMemDataSekouBmnCode.AsString;
// <238> ADD start
                        if m_exJSekouBmnNCode <> 0 then
                            Jituzai_ETEdit_SekouBmnCode.TagStr  := FloatToStr(m_exJSekouBmnNCode);
// <238> ADD end
                    end
					else
					begin
						Jituzai_ENEdit_SekouBmnCode.Value		:= StrToInt64 (Trim (JHojyoMA_DMemDataSekouBmnCode.AsString));
						Jituzai_ENEdit_SekouBmnCode.InputFlag	:= false;
// <238> ADD start
                        if m_exJSekouBmnNCode <> 0 then
                            Jituzai_ENEdit_SekouBmnCode.TagStr  := FloatToStr(m_exJSekouBmnNCode);
// <238> ADD end
					end;

					Close;
					SQL.Clear;		 							// qmQuery 初期化
					SQL.Add('Select SimpleName from HojyoMA');
                    SQL.Add('Where GCode=:strGCode and NCode=:exNCode and MasterKbn=:pMKBN and RDelKbn=0 and SumKbn=0');

                    SetFld('pMKBN').asInteger := MKBN_BUMON;
//<255> DEL                    SetFld('exNCode').AsFloat := m_exJSekouBmnNCode;
                    SetFld('exNCode').AsString := FormatFloat('0',m_exJSekouBmnNCode);  //<255> ADD

					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        SetFld('strGCode').AsString	:= JHojyoMA_DMemDataSekouBmnCode.AsString
					else
                    begin
                        if JHojyoMA_DMemDataSekouBmnCode.AsString <> '' then
							SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataSekouBmnCode.AsString))])
                        else
						    SetFld('strGCode').AsString	:= '';
					end;

                    Open;

					if EOF = false then
                    begin
                        Jituzai_LLabel_SekouBmnName.Caption	:= GetFld('SimpleName').AsString;
                    end
                    else
                        Jituzai_LLabel_SekouBmnName.Caption	:= '';
                end
                else
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        Jituzai_ETEdit_SekouBmnCode.Text        := ''
                    else
                    begin
                        Jituzai_ENEdit_SekouBmnCode.Value		:= 0;
                        Jituzai_ENEdit_SekouBmnCode.InputFlag	:= true;
                    end;
                    Jituzai_LLabel_SekouBmnName.Caption	:= '';
                end;

                // 施行担当者
                if JHojyoMA_DMemDataSekouPersonCode.AsString <>'' then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
						Jituzai_ETEdit_SekouPersonCode.Text		:= JHojyoMA_DMemDataSekouPersonCode.AsString
                    else
					begin
// <223> MOD start
//                        if StrToInt64 (Trim (JHojyoMA_DMemDataSekouPersonCode.AsString)) <> 0 then
                            Jituzai_ENEdit_SekouPersonCode.Value    := StrToInt64 (Trim (JHojyoMA_DMemDataSekouPersonCode.AsString));
// <223> MOD end
						Jituzai_ENEdit_SekouPersonCode.InputFlag	:= false;
					end;

					Close;
					SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
						SetFld('strGCode').AsString	:= JHojyoMA_DMemDataSekouPersonCode.AsString
					else
					begin
						if JHojyoMA_DMemDataSekouPersonCode.AsString <> '' then
							SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataSekouPersonCode.AsString))])
						else
							SetFld('strGCode').AsString	:= '';
					end;

					Open;

					if EOF = false then
					begin
						Jituzai_LLabel_SekouPersonName.Caption	:= GetFld('SimpleName').AsString;
					end
					else
						Jituzai_LLabel_SekouPersonName.Caption	:= '';
                end
				else
				begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
						Jituzai_ETEdit_SekouPersonCode.Text		:= ''
					else
					begin
						Jituzai_ENEdit_SekouPersonCode.Value		:= 0;
						Jituzai_ENEdit_SekouPersonCode.InputFlag	:= true;
					end;
                    Jituzai_LLabel_SekouPersonName.Caption	:= '';
				end;

// <205> ADD end

	//			if (Jituzai_ETEdit_BmnCode.Enabled = true) or (Jituzai_ENEdit_BmnCode.Enabled = true) then
	//			begin
					if JHojyoMA_DMemDataBmnCode.AsString <>'' then
					begin
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
							Jituzai_ETEdit_BmnCode.Text			:= JHojyoMA_DMemDataBmnCode.AsString;
// <238> ADD start
                            if m_exJBmnNCode <> 0 then
                                Jituzai_ETEdit_BmnCode.TagStr   := FloatToStr(m_exJBmnNCode);
// <238> ADD end
                        end
						else
						begin
							Jituzai_ENEdit_BmnCode.Value		:= StrToInt64 (Trim (JHojyoMA_DMemDataBmnCode.AsString));
							Jituzai_ENEdit_BmnCode.InputFlag	:= false;
// <238> ADD start
                            if m_exJBmnNCode <> 0 then
                                Jituzai_ENEdit_BmnCode.TagStr   := FloatToStr(m_exJBmnNCode);
// <238> ADD end
						end;

						Close;
						SQL.Clear;		 							// qmQuery 初期化
						SQL.Add('Select SimpleName from HojyoMA');
// <204> MOD start
//						SQL.Add('Where GCode=:strGCode and MasterKbn=:pMKBN and RDelKbn=0 and SumKbn=0');
                        SQL.Add('Where GCode=:strGCode and NCode=:exNCode and MasterKbn=:pMKBN and RDelKbn=0 and SumKbn=0');
// <204> MOD end
                        SetFld('pMKBN').asInteger := MKBN_BUMON;

// <204> ADD start
//<255> DEL						SetFld('exNCode').AsFloat := m_exJBmnNCode;
						SetFld('exNCode').AsString := FormatFloat('0',m_exJBmnNCode);  //<255> ADD
// <204> ADD end

						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							SetFld('strGCode').AsString	:= JHojyoMA_DMemDataBmnCode.AsString
						else
						begin
							if JHojyoMA_DMemDataBmnCode.AsString <> '' then
								SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataBmnCode.AsString))])
							else
								SetFld('strGCode').AsString	:= '';
						end;
						Open;

						if EOF = false then
						begin
							Jituzai_LLabel_BmnName.Caption	:= GetFld('SimpleName').AsString;
						end
						else
							Jituzai_LLabel_BmnName.Caption	:= '';
					end
					else
					begin
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							Jituzai_ETEdit_BmnCode.Text			:= ''
						else
						begin
							Jituzai_ENEdit_BmnCode.Value		:= 0;
							Jituzai_ENEdit_BmnCode.InputFlag	:= true;
						end;

						Jituzai_LLabel_BmnName.Caption	:= '';
					end;
	//			end;

	//			if (Jituzai_ETEdit_PersonCode.Enabled = true) or (Jituzai_ENEdit_PersonCode.Enabled = true) then
	//			begin
					if JHojyoMA_DMemDataPersonCode.AsString <>'' then
					begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Jituzai_ETEdit_PersonCode.Text		:= JHojyoMA_DMemDataPersonCode.AsString
						else
						begin
// <223> start
//                            if StrToInt64 (Trim (JHojyoMA_DMemDataPersonCode.AsString)) <> 0 then
    							Jituzai_ENEdit_PersonCode.Value		:= StrToInt64 (Trim (JHojyoMA_DMemDataPersonCode.AsString));
// <223> end
							Jituzai_ENEdit_PersonCode.InputFlag	:= false;
						end;

						Close;
						SQL.Clear;		 							// qmQuery 初期化
                        SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                        SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                        SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							SetFld('strGCode').AsString	:= JHojyoMA_DMemDataPersonCode.AsString
						else
						begin
							if JHojyoMA_DMemDataPersonCode.AsString <> '' then
								SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataPersonCode.AsString))])
							else
								SetFld('strGCode').AsString	:= '';
						end;

						Open;

						if EOF = false then
						begin
							Jituzai_LLabel_PersonName.Caption	:= GetFld('SimpleName').AsString;
						end
						else
							Jituzai_LLabel_PersonName.Caption	:= '';
					end
					else
					begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Jituzai_ETEdit_PersonCode.Text		:= ''
						else
						begin
							Jituzai_ENEdit_PersonCode.Value		:= 0;
							Jituzai_ENEdit_PersonCode.InputFlag	:= true;
						end;

						Jituzai_LLabel_PersonName.Caption	:= '';
					end;
	//			end;

	//			if (Jituzai_ETEdit_CustomerCode.Enabled = true) or (Jituzai_ENEdit_CustomerCode.Enabled = true) then
	//			begin

//				if Jituzai_ETEdit_CostomerName.Visible <> true then
//				begin
// モード切替
// <222> MOD start
{
				if (MasterInfo_DMemDataTorihikiUse.AsInteger = 1) and   // 取引先採用あり
                   (m_pMyAppRecord.m_sParameter = '1')            then  // 工事の場合
}
				if (MasterInfo_DMemDataTorihikiUse.AsInteger = 1) then
// <222> MOD end
				begin
					if JHojyoMA_DMemDataCostomerCode.AsString <> '' then
					begin
						m_bModeChg := false;
                        Jituzai_ETEdit_CustomerName.Visible := false;   // <144>
                        Jituzai_ETEdit_CustomerName.Text := '';         // <144>
						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
						begin
							Jituzai_ETEdit_CustomerCode.Visible := true;
							Jituzai_ETEdit_CustomerCode.Enabled := true;
//							Jituzai_ETEdit_CustomerCode.TabOrder := 3;
							Jituzai_ETEdit_CustomerCode.Text		:= JHojyoMA_DMemDataCostomerCode.AsString
						end
						else
						begin
							Jituzai_ENEdit_CustomerCode.Visible := true;
							Jituzai_ENEdit_CustomerCode.Enabled := true;
//							Jituzai_ENEdit_CustomerCode.TabOrder := 3;
							Jituzai_ENEdit_CustomerCode.Value		:= StrToInt64 (Trim (JHojyoMA_DMemDataCostomerCode.AsString));
							Jituzai_ENEdit_CustomerCode.InputFlag	:= false;
						end;
						Close;
						SQL.Clear;		 							// qmQuery 初期化
						SQL.Add('select NMK from MTOKUI');
						SQL.Add('where  NCode=:NCode');
//<255> DEL						SetFld('NCode').AsFloat := fnGetNCODE(JHojyoMA_DMemDataCostomerCode.AsString,22,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
						SetFld('NCode').AsString :=
                            FormatFloat('0',
                            fnGetNCODE(JHojyoMA_DMemDataCostomerCode.AsString,22,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD

    					Open;

						if EOF = false then
						begin
							Jituzai_LLabel_CustomerName.Caption	:= GetFld('NMK').AsString;
						end
						else
							Jituzai_LLabel_CustomerName.Caption	:= '';
					end
                    // <144>↓受注先名称が登録されている場合
                    else if JHojyoMA_DMemDataCostomerName.AsString <> '' then
                    begin                   // 受注先名を表示
                        Jituzai_ETEdit_CustomerName.Visible := true;
                        Jituzai_ETEdit_CustomerName.Enabled := true;
                        Jituzai_ETEdit_CustomerName.Text := JHojyoMA_DMemDataCostomerName.AsString;
    					Jituzai_ETEdit_CustomerCode.Visible := false;
                        Jituzai_ETEdit_CustomerCode.Text := '';
    					Jituzai_ENEdit_CustomerCode.Visible := false;
                        Jituzai_ENEdit_CustomerCode.Value := 0;
                        Jituzai_ENEdit_CustomerCode.InputFlag := true;
						Jituzai_LLabel_CustomerName.Caption	:= '';
                    end
                    // <144>↑
					else                    // 受注先ｺｰﾄﾞ未入力
					begin
                        Jituzai_ETEdit_CustomerName.Visible := false;   // <144>
                        Jituzai_ETEdit_CustomerName.Text := '';         // <144>

						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
						begin
							Jituzai_ETEdit_CustomerCode.Visible := true;
							Jituzai_ETEdit_CustomerCode.Enabled := true;
							Jituzai_ETEdit_CustomerCode.Text		:= ''
						end
						else
						begin
							Jituzai_ENEdit_CustomerCode.Visible := true;
							Jituzai_ENEdit_CustomerCode.Enabled := true;
							Jituzai_ENEdit_CustomerCode.Value		:= 0;
							Jituzai_ENEdit_CustomerCode.InputFlag	:= true;
						end;

						Jituzai_LLabel_CustomerName.Caption	:= '';
					end;
// <144>↓
//				end;
				end
// <222> MOD start
//                else if (m_pMyAppRecord.m_sParameter = '1') then  // 工事で取引先採用なし
                else    // 取引先採用なし
// <222> MOD end
                begin                                             // 受注先名称
                    Jituzai_ETEdit_CustomerName.Text := JHojyoMA_DMemDataCostomerName.AsString;
  					Jituzai_ETEdit_CustomerCode.Visible := false;
                    Jituzai_ETEdit_CustomerCode.Text := '';
   					Jituzai_ENEdit_CustomerCode.Visible := false;
                    Jituzai_ENEdit_CustomerCode.Value := 0;
                    Jituzai_ENEdit_CustomerCode.InputFlag := true;
    				Jituzai_LLabel_CustomerName.Caption	:= '';
                end;
// <144>↑
			end;

			Jituzai_EDEdit_StartDate.AsDateTime		:= 0;
			Jituzai_EDEdit_StartDate.AsDateTime		:= JHojyoMA_DMemDataStartDate.AsDateTime;

			Jituzai_EDEdit_EndDate.AsDateTime		:= 0;
			Jituzai_EDEdit_EndDate.AsDateTime		:= JHojyoMA_DMemDataEndDate.AsDateTime;

			Jituzai_EDEdit_JStartDate.AsDateTime   	:= 0;
			Jituzai_EDEdit_JStartDate.AsDateTime   	:= JHojyoMA_DMemDataJStartDate.AsDateTime;

			Jituzai_EDEdit_JEndDate.AsDateTime		:= 0;
			Jituzai_EDEdit_JEndDate.AsDateTime		:= JHojyoMA_DMemDataJEndDate.AsDateTime;
// <106><167>
			if Jituzai_ENEdit_SalesBase.Enabled = true then
			begin
				iValue                              := JHojyoMA_DMemDataSalesBase.AsInteger;
				if iValue = 0 then
					Jituzai_ENEdit_SalesBase.Zero := true;

				Jituzai_ENEdit_SalesBase.Value		:= iValue;
				Jituzai_LLabel_SalesBaseDsp.Caption	:= sSales[iValue];
			end;
// <106><167>

			if Jituzai_ENEdit_HaifuKbn.Enabled = true then
			begin
				iValue                                  := JHojyoMA_DMemDataHaifuKbn.AsInteger;

//				Jituzai_ENEdit_HaifuKbn.InputFlag := false;
				Jituzai_ENEdit_HaifuKbn.Value			:= iValue;
				Jituzai_LLabel_HaifuKbnDsp.Caption		:= sHaifu[iValue];
			end;

			iValue                                  := JHojyoMA_DMemDataBunCode.AsInteger;

			Jituzai_ENEdit_BunCode.InputFlag := false;

			if iValue <> 9 then
			begin
				Jituzai_ENEdit_BunCode.Value	 		:= iValue;
				Jituzai_LLabel_BunCodeDsp.Caption		:= sBun[iValue];
			end
			else
			begin
				Jituzai_ENEdit_BunCode.Value	 		:= iValue;
				Jituzai_LLabel_BunCodeDsp.Caption		:= sBun[2];
			end;

			iValue                                  := JHojyoMA_DMemDataMoveKbn.AsInteger;
			Jituzai_ENEdit_MoveKbn.InputFlag		:= false;
			Jituzai_ENEdit_MoveKbn.Value			:= iValue;
			Jituzai_LLabel_MoveKbnDsp.Caption		:= sMove[iValue];

			Jituzai_EDEdit_FinishDate.AsDateTime	:= JHojyoMA_DMemDataFinishDate.AsDateTime;

            // 完成振替パターン
            iValue                                  := JHojyoMA_DMemDataDetailKbn1.AsInteger;
            Jituzai_ENEdit_DetailKbn1.InputFlag		:= false;
            Jituzai_ENEdit_DetailKbn1.Value			:= iValue;
            fnSetLabel(Jituzai_ENEdit_DetailKbn1);

            if MasterInfo_DMemDataKojKbn2.AsInteger <> 0 then
            begin
// <211> MOD start
{
                // 売上計上科目コード
                if JHojyoMA_DMemDataSalesKmkCd.AsInteger <> 0 then
                begin
                    Jituzai_ENEdit_SalesKmkCd.Value		:= JHojyoMA_DMemDataSalesKmkCd.AsInteger;
                    Jituzai_ENEdit_SalesKmkCd.InputFlag	:= false;

                    with QueryRead do
                    begin
                        Close;
                        SQL.Clear;		 							// qmQuery 初期化
                        SQL.Add('Select SimpleName from KmkMA');
                        SQL.Add('Where GCode=:strGCode and MasterKbn=1 and RDelKbn=0 and SumKbn=0');
                        SetFld('strGCode').AsInteger	:= JHojyoMA_DMemDataSalesKmkCd.AsInteger;
                        Open;

                        if EOF = false then
                            Jituzai_LLabel_SalesKmkCdDsp.Caption	:= GetFld('SimpleName').AsString
                        else
                            Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';
                    end;
                end
                else
                begin
                    Jituzai_ENEdit_SalesKmkCd.Value			:= 0;
                    Jituzai_ENEdit_SalesKmkCd.InputFlag		:= true;
                    Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';
                end;

                // 完成売上高相手勘定区分
                iValue                                  := JHojyoMA_DMemDataDetailKbn2.AsInteger;
                Jituzai_ENEdit_DetailKbn2.InputFlag		:= false;
                Jituzai_ENEdit_DetailKbn2.Value			:= iValue;
                fnSetLabel(Jituzai_ENEdit_DetailKbn2);
}

                if JHojyoMA_DMemDataDetailKbn2.AsInteger = 9 then
                begin

                    // 売上高自動振替区分
                    Jituzai_ENEdit_KojKbn2.Value            := 1;
                    Jituzai_ENEdit_KojKbn2.InputFlag        := false;
					fnSetLabel(Jituzai_ENEdit_KojKbn2);

                    //完成売上高相手勘定区分
                    Jituzai_ENEdit_DetailKbn2.InputFlag		:= false;
                    Jituzai_ENEdit_DetailKbn2.Value			:= 0;
                    fnSetLabel(Jituzai_ENEdit_DetailKbn2);
                    Jituzai_ENEdit_DetailKbn2.Enabled       := false;

                    //売上計上計上科目コード
                    Jituzai_ENEdit_SalesKmkCd.Value			:= 0;
                    Jituzai_ENEdit_SalesKmkCd.Enabled       := false;
                    Jituzai_ENEdit_SalesKmkCd.ParentColor 	:= true;
                    Jituzai_ENEdit_SalesKmkCd.InputFlag		:= true;
                    Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';
                end
                else
                begin
                    // 売上高自動振替区分
                    Jituzai_ENEdit_KojKbn2.Value            := 0;
                    Jituzai_ENEdit_KojKbn2.InputFlag        := false;
					fnSetLabel(Jituzai_ENEdit_KojKbn2);

                     //完成売上高相手勘定区分
                    Jituzai_ENEdit_DetailKbn2.Enabled       := true;
                    iValue                                  := JHojyoMA_DMemDataDetailKbn2.AsInteger;
                    Jituzai_ENEdit_DetailKbn2.InputFlag		:= false;
                    Jituzai_ENEdit_DetailKbn2.Value			:= iValue;
                    fnSetLabel(Jituzai_ENEdit_DetailKbn2);


                    // 売上計上科目コード
                    Jituzai_ENEdit_SalesKmkCd.Enabled       := true;
                    Jituzai_ENEdit_SalesKmkCd.ParentColor 	:= false;
                    Jituzai_ENEdit_SalesKmkCd.Color			:= clWindow;

                    if JHojyoMA_DMemDataSalesKmkCd.AsInteger <> 0 then
                    begin
                        Jituzai_ENEdit_SalesKmkCd.Value		:= JHojyoMA_DMemDataSalesKmkCd.AsInteger;
                        Jituzai_ENEdit_SalesKmkCd.InputFlag	:= false;

                        with QueryRead do
                        begin
                            Close;
                            SQL.Clear;		 							// qmQuery 初期化
                            SQL.Add('Select SimpleName from KmkMA');
                            SQL.Add('Where GCode=:strGCode and MasterKbn=1 and RDelKbn=0 and SumKbn=0');
                            SetFld('strGCode').AsInteger	:= JHojyoMA_DMemDataSalesKmkCd.AsInteger;
                            Open;

                            if EOF = false then
                                Jituzai_LLabel_SalesKmkCdDsp.Caption	:= GetFld('SimpleName').AsString
                            else
                                Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';
                        end;
                    end
                    else
                    begin
                        Jituzai_ENEdit_SalesKmkCd.Value			:= 0;
                        Jituzai_ENEdit_SalesKmkCd.InputFlag		:= true;
                        Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';
                    end;
                end;
// <211> MOD end
            end;

            if MasterInfo_DMemDataKsyUse.AsInteger <> 0 then
            begin
                // 工種管理区分
                iValue                                  := JHojyoMA_DMemDataPartKbn.AsInteger;
                Jituzai_ENEdit_PartKbn.InputFlag		:= false;
                Jituzai_ENEdit_PartKbn.Value			:= iValue;
                fnSetLabel(Jituzai_ENEdit_PartKbn);

                if Jituzai_ENEdit_PartKbn.AsInteger = 2 then
                begin
                    Jituzai_ENEdit_PatternNo.Enabled := true;
                    Jituzai_ENEdit_PatternNo.Color := clWindow;
                end
                else
                begin
                    Jituzai_ENEdit_PatternNo.Enabled := false;
                    Jituzai_ENEdit_PatternNo.Color := Self.Color;
                end;

                // パターンNO
                if JHojyoMA_DMemDataPatternNo.AsInteger <> 0 then
                begin
                    Jituzai_ENEdit_PatternNo.Value		:= JHojyoMA_DMemDataPatternNo.AsInteger;
                    Jituzai_ENEdit_PatternNo.InputFlag	:= false;

                    with QueryRead do
                    begin
                        Close;
                        SQL.Clear;		 							// qmQuery 初期化
                        SQL.Add('Select PtnName from KousyuPtnMA');
                        SQL.Add('where PtnNo = :PTNNO and RDelKbn = 0 and Masterkbn =');
                        SQL.Add(IntToStr(m_arAdoptInfo[ECombo_Header.ItemIndex].nMasterDivision + 100));

                        SetFld('PTNNO').AsInteger := JHojyoMA_DMemDataPatternNo.AsInteger;
                        Open;

                        if EOF = false then
                            Jituzai_LLabel_PatternNoDsp.Caption	:= GetFld('PtnName').AsString
                        else
                            Jituzai_LLabel_PatternNoDsp.Caption	:= '';
                    end;
                end
                else
                begin
                    Jituzai_ENEdit_PatternNo.Value		:= 0;
                    Jituzai_ENEdit_PatternNo.InputFlag	:= true;
                    Jituzai_LLabel_PatternNoDsp.Caption	:= '';
                end;
            end;

			giTokusyuFlg := 1;
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			begin
				// <173>if MasterInfo_DMemDataSpHojyoCd1.AsString = JHojyoMA_DMemDataGCode.AsString then
                if ( MasterInfo_DMemDataSpHojyoNCd1.AsFloat = JHojyoMA_DMemDataNCode.AsFloat ) then    // <173>
    					Jituzai_ChkBox_Tokusyu.Checked := true
				else    Jituzai_ChkBox_Tokusyu.Checked := false;
			end
			else
			begin
				if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
				begin
					if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
					begin
						// <173>if MasterInfo_DMemDataSpHojyoCd1.AsString = Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) then
                        if ( MasterInfo_DMemDataSpHojyoNCd1.AsFloat = JHojyoMA_DMemDataNCode.AsFloat ) then // <173>
							    Jituzai_ChkBox_Tokusyu.Checked := true
						else    Jituzai_ChkBox_Tokusyu.Checked := false;
					end
					else
                    begin
						Jituzai_ChkBox_Tokusyu.Checked := false;
                    end;
				end
				else
                begin
					Jituzai_ChkBox_Tokusyu.Checked := false;
                end;
			end;

			giTokusyuFlg := 0;
            //セグメント・分類
            for i := 1 to  10 do
            begin
//<SZERO> DEL St
{
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Text
                     := fnGetGCODE(HojyoMA_DMQuery.FieldByName('SegNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_Seg [i].nMasterDivision);
}
//<SZERO> DEL Ed
//                    := TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataSegCode' + IntToStr(i))).AsString;
//↓<SZERO>表示時、0諸口を表現したい。InputFlagをFalseにしたいので一度変数に受けてから制御する。
				TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Zero			:= True;

				lvSgCode := fnGetGCODE(HojyoMA_DMQuery.FieldByName('SegNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_Seg [i].nMasterDivision);
				if lvSgCode <> '' then
				begin
					TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputFlag	:= False;
					TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Text			:= lvSgCode;
				end
				else
				begin
					TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputFlag	:= True;
					TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Text			:= '';
				end;
//↑<SZERO>
                fnGetNAME(TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Text,
                  m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute,lvNM);
                //ラベルに名称をセット
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm' + IntToStr(i))).Caption := lvNm;

                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Text
                 := fnGetGCODE(HojyoMA_DMQuery.FieldByName('BunruiNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_PBr [i].nMasterDivision);
//                    := TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataBunruiCode' + IntToStr(i))).AsString;

                //ラベルに名称をセット
                fnGetNAME(TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Text,
                  m_arAdoptInfo_Pbr [i].nMasterDivision,m_arAdoptInfo_Pbr [i].nCodeAttribute,lvNM);
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_BunNm' + IntToStr(i))).Caption := lvNm;
            end;

//<162> - ST
			fnGetKanseiFuriInfo();		// 完成振替情報取得
			fnKanseiFuriInfoDsp();		// 完成振替情報表示
//<162> - ED
		end
		else
		begin
		{合計工事}
			// 付箋情報SET
			FusenDsp(iSumKbn, GHojyoMA_DMemDataGCode.AsString, 1);

			if GHojyoMA_DMemDataGCode.AsString <> '' then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					Goukei_ETEdit_GCode.Text				:= GHojyoMA_DMemDataGCode.AsString
				else
				begin
					Goukei_ENEdit_GCode.InputFlag			:= false;
					Goukei_ENEdit_GCode.Value				:= StrToInt64 (Trim (GHojyoMA_DMemDataGCode.AsString));
				end;
			end
			else
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					Goukei_ETEdit_GCode.Text			:= ''
				else
				begin
					Goukei_ENEdit_GCode.Value			:= 0;
					Goukei_ENEdit_GCode.InputFlag		:= true;
				end;
			end;

			strGCode								:= GHojyoMA_DMemDataGCode.AsString;
            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

            if (GHojyoMA_DMemDataFusenIndex.AsInteger >=1 )
                and (GHojyoMA_DMemDataFusenIndex.AsInteger <=4 ) then
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(GHojyoMA_DMemDataFusenIndex.AsInteger))).Visible := true;

			Goukei_ETEdit_RenChar.Text				:= GHojyoMA_DMemDataRenChar.AsString;
			Goukei_ETEdit_LongName.Text				:= GHojyoMA_DMemDataLongName.AsString;
			Goukei_ETEdit_SimpleName.Text			:= GHojyoMA_DMemDataSimpleName.AsString;
			Goukei_ENEdit_ZipCode1.Value			:= GHojyoMA_DMemDataZipCode1.AsInteger;
			Goukei_ENEdit_ZipCode2.Value			:= GHojyoMA_DMemDataZipCode2.AsInteger;
			Goukei_ETEdit_Address1.Text				:= GHojyoMA_DMemDataAddress1.AsString;
			Goukei_ETEdit_Address2.Text				:= GHojyoMA_DMemDataAddress2.AsString;
			Goukei_ETEdit_TelNo.Text				:= GHojyoMA_DMemDataTelNo.AsString;

// <205> ADD start
            Goukei_ETEdit_FAXNo.Text                := GHojyoMA_DMemDataFAXNo.AsString;
            iValue                                  := GHojyoMA_DMemDataUkeoiKbn.AsInteger;
            Goukei_ENEdit_UkeoiKbn.InputFlag        := false;
            Goukei_ENEdit_UkeoiKbn.Value            := iValue;
            Goukei_LLabel_UkeoiKbnDsp.Caption       := sUkeoi[iValue];

            Goukei_ETEdit_BIKO.Text                 := GHojyoMA_DMemDataBIKO.AsString;
            Goukei_ETEdit_Gaiyou.Text               := GHojyoMA_DMemDatagaiyou.AsString;
// <205> ADD end

			iValue									:= GHojyoMA_DMemDataRootKbn.AsInteger;


			with QueryRead do
			begin
				if iValue = 1 then
				begin
					if GHojyoMA_DMemDataBmnCode.AsString <> '' then
					begin
	//					if (Goukei_ETEdit_BmnCode.Enabled = true) or (Goukei_ENEdit_BmnCode.Enabled = true) then
	//					begin
							if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                            begin
								Goukei_ETEdit_BmnCode.Text		:= GHojyoMA_DMemDataBmnCode.AsString;
// <238> ADD start
                                if m_exGBmnNCode <> 0 then
                                    Goukei_ETEdit_BmnCode.TagStr    := FloatToStr(m_exGBmnNCode);
// <238> ADD end
                            end
							else
							begin
								Goukei_ENEdit_BmnCode.Value		:= StrToInt64 (Trim (GHojyoMA_DMemDataBmnCode.AsString));
								Goukei_ENEdit_BmnCode.InputFlag	:= false;
// <238> ADD start
                                if m_exGBmnNCode <> 0 then
                                    Goukei_ENEdit_BmnCode.TagStr    := FloatToStr(m_exGBmnNCode);
// <238> ADD end
							end;

							Close;
							SQL.Clear;		 							// qmQuery 初期化
							SQL.Add('Select SimpleName from HojyoMA');
// <204> MOD start
//							SQL.Add('Where GCode=:strGCode and MasterKbn=:pMKBN and RDelKbn=0 and SumKbn=0');
							SQL.Add('Where GCode=:strGCode and MasterKbn=:pMKBN and NCode=:exNCode and RDelKbn=0 and SumKbn=0');
// <204> MOD end
                            SetFld('pMKBN').asInteger := MKBN_BUMON;

// <204> ADD start
//<255> DEL							SetFld('exNCode').AsFloat := m_exGBmnNCode;
							SetFld('exNCode').AsString := FormatFloat('0',m_exGBmnNCode);  //<255> ADD
// <204> ADD end

							if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
								SetFld('strGCode').AsString	:= GHojyoMA_DMemDataBmnCode.AsString
							else
							begin
								if GHojyoMA_DMemDataBmnCode.AsString <> '' then
									SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataBmnCode.AsString))])
								else
									SetFld('strGCode').AsString	:= '';
							end;
							Open;

							if EOF = false then
							begin
								Goukei_LLabel_BmnName.Caption	:= GetFld('SimpleName').AsString;
							end
							else
								Goukei_LLabel_BmnName.Caption	:= '';
	//					end;
					end
					else
					begin
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							Goukei_ETEdit_BmnCode.Text		:= ''
						else
						begin
							Goukei_ENEdit_BmnCode.Value		:= 0;
							Goukei_ENEdit_BmnCode.InputFlag	:= true;
						end;

						Goukei_LLabel_BmnName.Caption	:= '';
					end;
				end
				else
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
					begin
						Goukei_ETEdit_BmnCode.Enabled	:= false;
						Goukei_ETEdit_BmnCode.Color		:= Self.Color;
						Goukei_ETEdit_BmnCode.Text		:= '';
// <222> MOD start
						Goukei_ENEdit_BmnCode.Enabled	:= false;
						Goukei_ENEdit_BmnCode.Color		:= Self.Color;
// <222> MOD end
					end
					else
					begin
						Goukei_ENEdit_BmnCode.Enabled	:= false;
						Goukei_ENEdit_BmnCode.Color		:= Self.Color;
						Goukei_ENEdit_BmnCode.Value		:= 0;
						Goukei_ENEdit_BmnCode.InputFlag	:= true;
// <222> MOD start
						Goukei_ETEdit_BmnCode.Enabled	:= false;
						Goukei_ETEdit_BmnCode.Color		:= Self.Color;
// <222> MOD end
					end;

					Goukei_LLabel_BmnName.Caption	:= '';
				end;
// <SEI> ADD start
                if IsSeikyuYoteiUse then
                begin
                    // 請求先ｺｰﾄﾞ(合計)
                    if GHojyoMA_DMemDataSeikyusakiGCode.AsString <> '' then
                    begin
                        Goukei_ETEdit_SeikyusakiCd.Visible    := false;
                        Goukei_ETEdit_SeikyusakiCd.Text       := '';
                        if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                        begin
                            Goukei_ETEdit_SeikyusakiCd.Visible := true;
                            Goukei_ETEdit_SeikyusakiCd.Enabled := true;
                            Goukei_ETEdit_SeikyusakiCd.Text	 := GHojyoMA_DMemDataSeikyusakiGCode.AsString;
                        end
                        else
                        begin
                            Goukei_ENEdit_SeikyusakiCd.Visible := true;
                            Goukei_ENEdit_SeikyusakiCd.Enabled := true;
                            Goukei_ENEdit_SeikyusakiCd.Value	 := StrToInt64 (Trim (GHojyoMA_DMemDataSeikyusakiGCode.AsString));
                            Goukei_ENEdit_SeikyusakiCd.InputFlag	:= false;
                        end;

                        strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
                                            GHojyoMA_DMemDataSeikyusakiGCode.AsString);

                        if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
                        begin
                            Exit;
                        end;

                        Goukei_LLabel_SeikyusakiNm.Caption	:= strName;
                    end
                    else
                    begin
                        if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                        begin
                            Goukei_ETEdit_SeikyusakiCd.Text		:= '';
                        end
                        else
                        begin
                            Goukei_ENEdit_SeikyusakiCd.Value		:= 0;
                            Goukei_ENEdit_SeikyusakiCd.InputFlag	:= true;
                        end;
                        Goukei_LLabel_SeikyusakiNm.Caption	:= '';
                    end;

                    // 一括請求先工事ｺｰﾄﾞ(合計)
                    if not ChangeIkkatuKouji(SUMKBN_GOUKEI) then
                    begin
                        Exit;
                    end;
                    if GHojyoMA_DMemDataSeikyuKoujiGCode.AsString <> '' then
                    begin
                        Goukei_ETEdit_SeikyuKoujiCd.Visible    := false;
                        Goukei_ETEdit_SeikyuKoujiCd.Text       := '';
                        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                        begin
                            Goukei_ETEdit_SeikyuKoujiCd.Text	 := GHojyoMA_DMemDataSeikyuKoujiGCode.AsString;
                        end
                        else
                        begin
                            Goukei_ENEdit_SeikyuKoujiCd.Value	 := StrToInt64 (Trim (GHojyoMA_DMemDataSeikyuKoujiGCode.AsString));
                            Goukei_ENEdit_SeikyuKoujiCd.InputFlag	:= false;
                        end;

                        strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttr.AsInteger,
                                            GHojyoMA_DMemDataSeikyuKoujiGCode.AsString);

                        if not fnGetHojNameSeikyu(m_nMasterDivision, SUMKBN_JITUZAI, strGCode, strName, exNCode, OPT_KOUJI_IKKATUSEIKYU) then
                        begin
                            Exit;
                        end;

                        Goukei_LLabel_SeikyuKoujiNm.Caption	:= strName;
                    end
                    else
                    begin
                        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                        begin
                            Goukei_ETEdit_SeikyuKoujiCd.Text		:= '';
                        end
                        else
                        begin
                            Goukei_ENEdit_SeikyuKoujiCd.Value		:= 0;
                            Goukei_ENEdit_SeikyuKoujiCd.InputFlag	:= true;
                        end;
                        Goukei_LLabel_SeikyuKoujiNm.Caption	:= '';
                    end;
                end;
// <SEI> ADD end
// <205> ADD start
                // 施主ｺｰﾄﾞ (合計)
                if GHojyoMA_DMemDataSesNCode.AsString <> '' then
                begin
// <276> ADD st
// <277> MOD st					if (m_bKojiLicense) then
					if ( (m_bNoControlSesyu = False) and (m_bKojiLicense) ) or
                       (m_bNoControlSesyu = True) then	// <277> MOD ed
                    begin
// <276> ADD ed
                        Goukei_ETEdit_SeshuCode.Visible := false;
                        Goukei_ETEdit_SeshuCode.Text    := '';
                        if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                        begin
                            Goukei_ETEdit_SeshuCode.Visible    := true;
                            Goukei_ETEdit_SeshuCode.Enabled    := true;
                            Goukei_ETEdit_SeshuCode.Text	   := GHojyoMA_DMemDataSesNCode.AsString;
                        end
                        else
                        begin
                            Goukei_ENEdit_SeshuCode.Visible    := true;
                            Goukei_ENEdit_SeshuCode.Enabled    := true;
                            Goukei_ENEdit_SeshuCode.Value	   := StrToInt64 (Trim (GHojyoMA_DMemDataSesNCode.AsString));
                            Goukei_ENEdit_SeshuCode.InputFlag	:= false;
                        end;
					end;	// <276> ADD ed
				    Close;
				    SQL.Clear;		 							// qmQuery 初期化
// <224> MOD start
//                    SQL.Add('select Nm from MSOFU ');
                    SQL.Add('select Nmk as Nm from MSOFU ');
// <224> MOD end
                    SQL.Add('where GCODE = :strGCode and NCode=:exNCode and RDelKBN = 0 and NouKbn = 4');

//<255> DEL                    SetFld('exNCode').AsFloat :=  fnGetNCODE(GHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger);
                    SetFld('exNCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(GHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger));  //<255> ADD

                    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                    begin
                        SetFld('strGCode').AsString	:= GHojyoMA_DMemDataSesNCode.AsString;
                    end
                    else
                    begin
                        if GHojyoMA_DMemDataSesNCode.AsString <> '' then
                        begin
                            SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataSesNCode.AsString))]);
                            strMemo := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataSesNCode.AsString))]);
                        end
                        else
                        begin
                            SetFld('strGCode').AsString	:= '';
                        end
                    end;

                    Open;

                   	if EOF = false then
					begin
						Goukei_LLabel_SeshuName.Caption	:= GetFld('Nm').AsString;
					end
					else
                    begin
						Goukei_LLabel_SeshuName.Caption	:= '';
                    end;
                end
                else
				begin
					if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                    begin
						Goukei_ETEdit_SeshuCode.Text		:= '';
                    end
					else
					begin
						Goukei_ENEdit_SeshuCode.Value		:= 0;
						Goukei_ENEdit_SeshuCode.InputFlag	:= true;
					end;
                		Goukei_LLabel_SeshuName.Caption	:= '';
                end;

                // 合計施行部門
                if GHojyoMA_DMemDataSekouBmnCode.AsString <>'' then
                begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
						Goukei_ETEdit_SekouBmnCode.Text			:= GHojyoMA_DMemDataSekouBmnCode.AsString;
// <238> ADD start
                        if m_exGSekouBmnNCode <> 0 then
                            Goukei_ETEdit_SekouBmnCode.TagStr   := FloatToStr(m_exGSekouBmnNCode);
// <238> ADD end
                    end
					else
					begin
						Goukei_ENEdit_SekouBmnCode.Value		:= StrToInt64 (Trim (GHojyoMA_DMemDataSekouBmnCode.AsString));
						Goukei_ENEdit_SekouBmnCode.InputFlag	:= false;
// <238> ADD start
                        if m_exGSekouBmnNCode <> 0 then
                            Goukei_ENEdit_SekouBmnCode.TagStr   := FloatToStr(m_exGSekouBmnNCode);
// <238> ADD end
					end;

					Close;
					SQL.Clear;		 							// qmQuery 初期化
					SQL.Add('Select SimpleName from HojyoMA');
                    SQL.Add('Where GCode=:strGCode and NCode=:exNCode and MasterKbn=:pMKBN and RDelKbn=0 and SumKbn=0');

                    SetFld('pMKBN').asInteger := MKBN_BUMON;
//<255> DEL                    SetFld('exNCode').AsFloat := m_exGSekouBmnNCode;
                    SetFld('exNCode').AsString := FormatFloat('0',m_exGSekouBmnNCode);  //<255> ADD

					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        SetFld('strGCode').AsString	:= GHojyoMA_DMemDataSekouBmnCode.AsString
					else
                    begin
                        if GHojyoMA_DMemDataSekouBmnCode.AsString <> '' then
							SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataSekouBmnCode.AsString))])
                        else
						    SetFld('strGCode').AsString	:= '';
					end;

                    Open;

					if EOF = false then
                    begin
                        Goukei_LLabel_SekouBmnName.Caption	:= GetFld('SimpleName').AsString;
                    end
                    else
                        Goukei_LLabel_SekouBmnName.Caption	:= '';
                end
                else
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        Goukei_ETEdit_SekouBmnCode.Text			:= ''
                    else
                    begin
                        Goukei_ENEdit_SekouBmnCode.Value		:= 0;
                        Goukei_ENEdit_SekouBmnCode.InputFlag	:= true;
                    end;
                    Goukei_LLabel_SekouBmnName.Caption	:= '';
                end;


                // 合計施行担当者
				if GHojyoMA_DMemDataSekouPersonCode.AsString <> '' then
				begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Goukei_ETEdit_SekouPersonCode.Text		:= GHojyoMA_DMemDataSekouPersonCode.AsString
						else
						begin
							Goukei_ENEdit_SekouPersonCode.Value		:= StrToInt64 (Trim (GHojyoMA_DMemDataSekouPersonCode.AsString));
							Goukei_ENEdit_SekouPersonCode.InputFlag	:= false;
						end;

						Close;
						SQL.Clear;		 							// qmQuery 初期化
                        SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                        SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                        SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							SetFld('strGCode').AsString	:= GHojyoMA_DMemDataSekouPersonCode.AsString
						else
						begin
							if GHojyoMA_DMemDataSekouPersonCode.AsString <> '' then
								SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataSekouPersonCode.AsString))])
							else
								SetFld('strGCode').AsString	:= '';
						end;

						Open;

						if EOF = false then
						begin
							Goukei_LLabel_SekouPersonName.Caption	:= GetFld('SimpleName').AsString;
						end
						else
							Goukei_LLabel_SekouPersonName.Caption	:= '';
				end
				else
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
						Goukei_ETEdit_SekouPersonCode.Text		:= ''
					else
					begin
						Goukei_ENEdit_SekouPersonCode.Value		:= 0;
						Goukei_ENEdit_SekouPersonCode.InputFlag	:= true;
					end;
					Goukei_LLabel_SekouPersonName.Caption	:= '';
				end;
// <205> ADD end



				if GHojyoMA_DMemDataPersonCode.AsString <> '' then
				begin
	//				if (Goukei_ETEdit_PersonCode.Enabled = true) or (Goukei_ENEdit_PersonCode.Enabled = true) then
	//				begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Goukei_ETEdit_PersonCode.Text		:= GHojyoMA_DMemDataPersonCode.AsString
						else
						begin
							Goukei_ENEdit_PersonCode.Value		:= StrToInt64 (Trim (GHojyoMA_DMemDataPersonCode.AsString));
							Goukei_ENEdit_PersonCode.InputFlag	:= false;
						end;

						Close;
						SQL.Clear;		 							// qmQuery 初期化
                        SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                        SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                        SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							SetFld('strGCode').AsString	:= GHojyoMA_DMemDataPersonCode.AsString
						else
						begin
							if GHojyoMA_DMemDataPersonCode.AsString <> '' then
								SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataPersonCode.AsString))])
							else
								SetFld('strGCode').AsString	:= '';
						end;

						Open;

						if EOF = false then
						begin
							Goukei_LLabel_PersonName.Caption	:= GetFld('SimpleName').AsString;
						end
						else
							Goukei_LLabel_PersonName.Caption	:= '';
	//				end;
				end
				else
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
						Goukei_ETEdit_PersonCode.Text		:= ''
					else
					begin
						Goukei_ENEdit_PersonCode.Value		:= 0;
						Goukei_ENEdit_PersonCode.InputFlag	:= true;
					end;

					Goukei_LLabel_PersonName.Caption	:= '';
				end;

//				if Goukei_ETEdit_CostomerName.Visible <> true then
//				begin
// モード切替
// <222> MOD start
{
				if (MasterInfo_DMemDataTorihikiUse.AsInteger = 1) and   // 取引先採用あり
                   (m_pMyAppRecord.m_sParameter = '1')            then  // 工事の場合
}
				if (MasterInfo_DMemDataTorihikiUse.AsInteger = 1) then
// <222> MOD end
				begin
					if GHojyoMA_DMemDataCostomerCode.AsString <> '' then
					begin
	//					if (Goukei_ETEdit_CustomerCode.Enabled = true) or (Goukei_ENEdit_CustomerCode.Enabled = true) then
	//					begin
                            Goukei_ETEdit_CustomerName.Visible := false;    // <144>
                            Goukei_ETEdit_CustomerName.Text := '';          // <144>
							m_bModeChg := false;
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
							begin
								Goukei_ETEdit_CustomerCode.Visible := true;
								Goukei_ETEdit_CustomerCode.Enabled := true;
//								Goukei_ETEdit_CustomerCode.TabOrder := 1;
								Goukei_ETEdit_CustomerCode.Text			:= GHojyoMA_DMemDataCostomerCode.AsString
							end
							else
							begin
								Goukei_ENEdit_CustomerCode.Visible := true;
								Goukei_ENEdit_CustomerCode.Enabled := true;
//								Goukei_ENEdit_CustomerCode.TabOrder := 1;
								Goukei_ENEdit_CustomerCode.Value		:= StrToInt64 (Trim (GHojyoMA_DMemDataCostomerCode.AsString));
								Goukei_ENEdit_CustomerCode.InputFlag	:= false;
							end;

							Close;
							SQL.Clear;		 							// qmQuery 初期化
                            SQL.Add('select NMK from MTOKUI');
                            SQL.Add('where  NCode=:NCode');
//<255> DEL                            SetFld('NCode').AsFloat := fnGetNCODE(GHojyoMA_DMemDataCostomerCode.AsString,22,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                            SetFld('NCode').AsString :=
                                FormatFloat('0',
                                fnGetNCODE(GHojyoMA_DMemDataCostomerCode.AsString,22,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
							Open;

							if EOF = false then
							begin
								Goukei_LLabel_CustomerName.Caption	:= GetFld('NMK').AsString;
							end
							else
								Goukei_LLabel_CustomerName.Caption	:= '';
	//					end;
					end
                    // <144>↓受注先名称が登録されている場合
                    else if GHojyoMA_DMemDataCostomerName.AsString <> '' then
                    begin                   // 受注先名を表示
                        Goukei_ETEdit_CustomerName.Visible := true;
                        Goukei_ETEdit_CustomerName.Enabled := true;
                        Goukei_ETEdit_CustomerName.Text := GHojyoMA_DMemDataCostomerName.AsString;
    					Goukei_ETEdit_CustomerCode.Visible := false;
                        Goukei_ETEdit_CustomerCode.Text := '';
    					Goukei_ENEdit_CustomerCode.Visible := false;
                        Goukei_ENEdit_CustomerCode.Value := 0;
                        Goukei_ENEdit_CustomerCode.InputFlag := true;
						Goukei_LLabel_CustomerName.Caption	:= '';
                    end
                    // <144>↑
					else
					begin
                        Goukei_ETEdit_CustomerName.Visible := false;    // <144>
                        Goukei_ETEdit_CustomerName.Text := '';          // <144>

						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
						begin
							Goukei_ETEdit_CustomerCode.Visible := true;
							Goukei_ETEdit_CustomerCode.Enabled := true;
							Goukei_ETEdit_CustomerCode.Text			:= ''
						end
						else
						begin
							Goukei_ENEdit_CustomerCode.Visible := true;
							Goukei_ENEdit_CustomerCode.Enabled := true;
							Goukei_ENEdit_CustomerCode.Value		:= 0;
							Goukei_ENEdit_CustomerCode.InputFlag	:= true;
						end;

						Goukei_LLabel_CustomerName.Caption	:= '';
					end;
// <144>↓
//				end;
				end
// <222> MOD start
{
                else if (m_pMyAppRecord.m_sParameter = '1') then  // 工事で取引先採用なし
}
                else
// <222> MOD end
                begin                                             // 受注先名称
                    Goukei_ETEdit_CustomerName.Text := GHojyoMA_DMemDataCostomerName.AsString;
  					Goukei_ETEdit_CustomerCode.Visible := false;
                    Goukei_ETEdit_CustomerCode.Text := '';
   					Goukei_ENEdit_CustomerCode.Visible := false;
                    Goukei_ENEdit_CustomerCode.Value := 0;
                    Goukei_ENEdit_CustomerCode.InputFlag := true;
    				Goukei_LLabel_CustomerName.Caption	:= '';
                end;
// <144>↑
			end;

			Goukei_EDEdit_StartDate.Value			:= 0;
			Goukei_EDEdit_EndDate.Value	    		:= 0;
			Goukei_EDEdit_JStartDate.Value			:= 0;
			Goukei_EDEdit_JEndDate.Value	        := 0;

			Goukei_EDEdit_StartDate.AsDateTime		:= GHojyoMA_DMemDataStartDate.AsDateTime;
			Goukei_EDEdit_EndDate.AsDateTime		:= GHojyoMA_DMemDataEndDate.AsDateTime;
			Goukei_EDEdit_JStartDate.AsDateTime		:= GHojyoMA_DMemDataJStartDate.AsDateTime;
			Goukei_EDEdit_JEndDate.AsDateTime		:= GHojyoMA_DMemDataJEndDate.AsDateTime;
			strGCode								:= GHojyoMA_DMemDataGCode.AsString;

			iValue									:= GHojyoMA_DMemDataRootKbn.AsInteger;

			Goukei_ENEdit_RootKbn.InputFlag 	:= false;

			Goukei_ENEdit_RootKbn.Value				:= iValue;
			Goukei_LLabel_RootKbnDsp.Caption		:= sRoot[iValue];

	{		iValue									:= GHojyoMA_DMemDataMoveKbn.AsInteger;
			if iValue = 0 then
				Goukei_ENEdit_MoveKbn.Zero := true;

			Goukei_ENEdit_MoveKbn.Value				:= iValue;
			Goukei_LLabel_MoveKbnDsp.Caption		:= sMove[iValue];
	}
			Goukei_EDEdit_FinishDate.AsDateTime		:= GHojyoMA_DMemDataFinishDate.AsDateTime;

//<162> - ST
			fnKanseiFuriInfoClear();
			JKansei.Close;
//<162> - ED

		end;

		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if strGCode <> '' then
				strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
		end;
//<TAX> ADD St
        setTaxType();  // 税込／税抜セット
        pnlJTax.Enabled := m_cJNTArea.IsModify and (m_iAccProKbn <> 0);
//<TAX> ADD
		{KojiInfo2 Read}
		if strGCode <> '' then
		begin
			if iSumKbn = 0 then
            begin
    			fnkeiyakuRead (JHojyoMA_DMemDataNCode.AsFloat, iSumKbn)					// 契約情報
            end
            else
    			fnkeiyakuRead (GHojyoMA_DMemDataNCode.AsFloat, iSumKbn);			    // 契約情報

			if iSumKbn = 0 then
    			fnNyukinRead  (JHojyoMA_DMemDataNCode.AsFloat, iSumKbn)					// 入金情報
            else
    			fnNyukinRead  (GHojyoMA_DMemDataNCode.AsFloat, iSumKbn);				// 入金情報

// <SEI> ADD start
            if IsSeikyuYoteiUse then
            begin
                if iSumKbn = 0 then
                    fnSeikyuRead  (JHojyoMA_DMemDataNCode.AsFloat, iSumKbn)					// 請求・入金予定情報
                else
                    fnSeikyuRead  (GHojyoMA_DMemDataNCode.AsFloat, iSumKbn);				// 請求・入金予定情報
            end;
// <SEI> ADD end
		end
//<282> ADD St
        else
        begin
            if (iSumKbn = 0) then
            begin
                JKeiyaku_DMemData.Close();
                JKeiyaku_DMemData.Open();
                JNyukin_DMemData.Close();
                JNyukin_DMemData.Open();
            end
            else
            begin
                GKeiyaku_DMemData.Close();
                GKeiyaku_DMemData.Open();
                GNyukin_DMemData.Close();
                GNyukin_DMemData.Open();
            end;
        end;
//<282> ADD Ed
	finally
		QueryRead.Free;
	end;

    //初期化102>
    UpdFreeFlg := false;
    freeItem   := freeItemNull;
    freeChgItem   := freeChgItemNull;       //<FREE> ADD
    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF

    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ				//<155>
    FontColorChange();  // <225> 文字色変更
//<TAX> ADD St
    // 消費税額の色を変える
    setFontColorTax(
        TdxMemData(IfThen(iSumKbn = 0, JKeiyaku_DMemData, GKeiyaku_DMemData)));
//<TAX> ADD Ed
end;


//**************************************************************************
//	Proccess	:	対象データをカードをクリアする
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnClearCard(iSumKbn: Integer);
var
	iCount : Integer;
    i      : Integer;
begin

	MemPost_Sw	 := 1;
	giTokusyuFlg := 1;

    btnFusenCtl.Enabled := false;
	LVStyleBar.Enabled  := false;

    // 実在工事
	if ( iSumKbn = 0 ) then
	begin
		JHojyoMA_DMemData.Close;
		JHojyoMA_DMemData.Open;

		Jituzai_ETEdit_GCode.Clear;
		Jituzai_ENEdit_GCode.Value            := 0;
		Jituzai_ENEdit_GCode.InputFlag        := true;
		Jituzai_ETEdit_RenChar.Clear;
		Jituzai_ChkBox_Tokusyu.Checked        := false;
		Jituzai_ETEdit_LongName.Clear;
		Jituzai_ETEdit_SimpleName.Clear;
		Jituzai_ENEdit_ZipCode1.Clear;
		Jituzai_ENEdit_ZipCode2.Clear;
		Jituzai_ENEdit_ZipCode1.Value         := 0;
		Jituzai_ENEdit_ZipCode2.Value         := 0;
		Jituzai_ETEdit_Address1.Clear;
		Jituzai_ETEdit_Address2.Clear;
		Jituzai_ETEdit_TelNo.Clear;
		Jituzai_ETEdit_BmnCode.Clear;
        Jituzai_ETEdit_BmnCode.TagStr         := '';   // <238>
		Jituzai_ENEdit_BmnCode.Value          := 0;
		Jituzai_ENEdit_BmnCode.InputFlag      := true;
        Jituzai_ENEdit_BmnCode.TagStr         := '';   // <238>
		Jituzai_LLabel_BmnName.Caption        := '';
		Jituzai_ETEdit_PersonCode.Clear;
		Jituzai_ENEdit_PersonCode.Value       := 0;
		Jituzai_ENEdit_PersonCode.InputFlag   := true;
		Jituzai_LLabel_PersonName.Caption     := '';
		Jituzai_ETEdit_CustomerCode.Clear;
		Jituzai_ENEdit_CustomerCode.Value     := 0;
		Jituzai_ENEdit_CustomerCode.InputFlag := true;
		Jituzai_LLabel_CustomerName.Caption   := '';
        Jituzai_ETEdit_CustomerName.Clear;              // <144>
		Jituzai_EDEdit_StartDate.Value        := 0;
		Jituzai_EDEdit_EndDate.Value          := 0;
		Jituzai_EDEdit_JStartDate.Value       := 0;
		Jituzai_EDEdit_JEndDate.Value         := 0;
		Jituzai_EDEdit_FinishDate.Value       := 0;

		Jituzai_ENEdit_HaifuKbn.Value         := 0;
		Jituzai_ENEdit_HaifuKbn.InputFlag     := true;
		Jituzai_LLabel_HaifuKbnDsp.Caption	  := sHaifu[0];
		Jituzai_ENEdit_BunCode.Value          := 0;
		Jituzai_ENEdit_BunCode.InputFlag      := false;
		Jituzai_LLabel_BunCodeDsp.Caption	  := sBun[0];
		Jituzai_ENEdit_MoveKbn.Value          := 0;
		Jituzai_ENEdit_MoveKbn.InputFlag      := false;
		Jituzai_LLabel_MoveKbnDsp.Caption	  := sMove[0];

// <205> ADD start
        // 請負区分
        Jituzai_ENEdit_UkeoiKbn.Value         := 0;
        Jituzai_ENEdit_UkeoiKbn.InputFlag     := false;
        Jituzai_LLabel_UkeoiKbnDsp.Caption    := sUkeoi[0];
        // 施主
        Jituzai_ETEdit_SeshuCode.Clear;
        Jituzai_ENEdit_SeshuCode.Value        := 0;
        Jituzai_ENEdit_SeshuCode.InputFlag    := true;
        Jituzai_LLabel_SeshuName.Caption      := '';
        // FAX番号
        Jituzai_ETEdit_FaxNo.Clear;
        // 工事概要
        Jituzai_ETEdit_Gaiyou.Clear;
        Jituzai_ETEdit_Gaiyou.Text            := '';
        // 施行担当者
        Jituzai_ETEdit_SekouPersonCode.Clear;
        Jituzai_ENEdit_SekouPersonCode.Value        := 0;
        Jituzai_ENEdit_SekouPersonCode.InputFlag    := true;
        Jituzai_LLabel_SekouPersonName.Caption      := '';
        // 施行部門
        Jituzai_ETEdit_SekouBmnCode.Clear;
        Jituzai_ETEdit_SekouBmnCode.TagStr       := '';   // <238>
        Jituzai_ENEdit_SekouBmnCode.Value        := 0;
        Jituzai_ENEdit_SekouBmnCode.InputFlag    := true;
        Jituzai_ENEdit_SekouBmnCode.TagStr       := '';   // <238>
        Jituzai_LLabel_SekouBmnName.Caption      := '';

// <205> ADD end
//<TAX> ADD St
        // 契約金額入力方法
        pushTaxButton(rdJTaxIn);
        rdJTaxOut.Enabled := false;
//<TAX> ADD Ed
// <SEI> ADD start
        // 請求先
        Jituzai_ETEdit_SeikyusakiCd.Clear;
        Jituzai_ENEdit_SeikyusakiCd.Value        := 0;
        Jituzai_ENEdit_SeikyusakiCd.InputFlag    := true;
        Jituzai_LLabel_SeikyusakiNm.Caption      := '';

        // 一括請求先工事
        Jituzai_ETEdit_SeikyuKoujiCd.Clear;
        Jituzai_ENEdit_SeikyuKoujiCd.Value        := 0;
        Jituzai_ENEdit_SeikyuKoujiCd.InputFlag    := true;
        Jituzai_LLabel_SeikyuKoujiNm.Caption      := '';
// <SEI> ADD end
        // 完成振替ﾊﾟﾀｰﾝ
        Jituzai_ENEdit_DetailKbn1.Value       := 0;
        Jituzai_ENEdit_DetailKbn1.InputFlag   := false;
        fnSetLabel(Jituzai_ENEdit_DetailKbn1);

        // 売上計上科目ｺｰﾄﾞ
        Jituzai_ENEdit_SalesKmkCd.Value		  := 0;
        Jituzai_ENEdit_SalesKmkCd.InputFlag	  := true;
        Jituzai_LLabel_SalesKmkCdDsp.Caption  := '';

// <211> ADD start
        if Jituzai_ENEdit_KojKbn2.Enabled = true then
        begin
            Jituzai_ENEdit_KojKbn2.value        := 0;
            Jituzai_ENEdit_KojKbn2.InputFlag    := false;
            fnSetLabel(Jituzai_ENEdit_KojKbn2);
            //<283>Add -St
            Jituzai_ENEdit_SalesKmkCd.Enabled   := True;
            Jituzai_ENEdit_SalesKmkCd.Color		:= clWindow;
            Jituzai_ENEdit_DetailKbn2.Enabled   := True;
            //<283>   -End
        end;
// <211> ADD end

        // 完成売上高相手勘定区分
        Jituzai_ENEdit_DetailKbn2.Value       := 0;
        Jituzai_ENEdit_DetailKbn2.InputFlag   := false;
        fnSetLabel(Jituzai_ENEdit_DetailKbn2);

        // 工種管理区分
        Jituzai_ENEdit_PartKbn.Value          := 0;
        Jituzai_ENEdit_PartKbn.InputFlag      := false;
        fnSetLabel(Jituzai_ENEdit_PartKbn);

        // ﾊﾟﾀｰﾝNO
        Jituzai_ENEdit_PatternNo.Value		  := 0;
        Jituzai_ENEdit_PatternNo.InputFlag	  := true;
        Jituzai_LLabel_PatternNoDsp.Caption	  := '';

        Jituzai_ENEdit_PatternNo.Enabled      := false;
        Jituzai_ENEdit_PatternNo.Color        := Self.Color;

        Jituzai_ETEdit_BIKO.Text              := '';
//      Jituzai_ENEdit_SalesBase.value        := 1;   // <106><167>
        Jituzai_ENEdit_SalesBase.value        := 0;   // <167>
        fnSetLabel(Jituzai_ENEdit_SalesBase);         // <106><167>

        // その他（ｾｸﾞﾒﾝﾄ・ﾌﾟﾛｼﾞｪｸﾄ分類）
//<162> MMasterKBN.itemIndex := -1;
        MMasterKBN.itemIndex := 0;			          // <162>

        JKansei.Close;                                // <274>

        //付箋初期化
        for i := 1 to 4 do
        begin
            TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
        end;
	end
    // 合計工事
	else
	begin
		GHojyoMA_DMemData.Close;
		GHojyoMA_DMemData.Open;

		Goukei_ETEdit_GCode.Clear;
		Goukei_ENEdit_GCode.Value             := 0;
		Goukei_ENEdit_GCode.InputFlag         := true;
		Goukei_ETEdit_RenChar.Clear;
		Goukei_ETEdit_LongName.Clear;
		Goukei_ETEdit_SimpleName.Clear;
		Goukei_ENEdit_ZipCode1.Clear;
		Goukei_ENEdit_ZipCode2.Clear;
		Goukei_ENEdit_ZipCode1.Value          := 0;
		Goukei_ENEdit_ZipCode2.Value          := 0;
		Goukei_ETEdit_Address1.Clear;
		Goukei_ETEdit_Address2.Clear;
		Goukei_ETEdit_TelNo.Clear;
		Goukei_ETEdit_BmnCode.Clear;
        Goukei_ETEdit_BmnCode.TagStr          := '';   // <238>
		Goukei_ENEdit_BmnCode.Value           := 0;
		Goukei_ENEdit_BmnCode.InputFlag       := true;
        Goukei_ENEdit_BmnCode.TagStr          := '';   // <238>
		Goukei_LLabel_BmnName.Caption         := '';
		Goukei_ETEdit_PersonCode.Clear;
		Goukei_ENEdit_PersonCode.Value        := 0;;
		Goukei_ENEdit_PersonCode.InputFlag    := true;
		Goukei_LLabel_PersonName.Caption      := '';
		Goukei_ETEdit_CustomerCode.Clear;
		Goukei_ENEdit_CustomerCode.Value      := 0;
		Goukei_ENEdit_CustomerCode.InputFlag  := true;
		Goukei_LLabel_CustomerName.Caption    := '';
        Goukei_ETEdit_CustomerName.Clear;               // <144>
		Goukei_EDEdit_StartDate.Value         := 0;
		Goukei_EDEdit_EndDate.Value           := 0;
		Goukei_EDEdit_JStartDate.Value        := 0;
		Goukei_EDEdit_JEndDate.Value          := 0;
		Goukei_EDEdit_FinishDate.Value        := 0;

		Goukei_ENEdit_RootKbn.Value           := 0;
		Goukei_ENEdit_RootKbn.InputFlag       := false;
		Goukei_LLabel_RootKbnDsp.Caption	  := sRoot[0];

// <205> ADD start
        // 請負区分
        Goukei_ENEdit_UkeoiKbn.Value         := 0;
        Goukei_ENEdit_UkeoiKbn.InputFlag     := false;
        Goukei_LLabel_UkeoiKbnDsp.Caption    := sUkeoi[0];
        // 施主
        Goukei_ETEdit_SeshuCode.Clear;
        Goukei_ENEdit_SeshuCode.Value        := 0;
        Goukei_ENEdit_SeshuCode.InputFlag    := true;
        Goukei_LLabel_SeshuName.Caption      := '';
        // FAX番号
        Goukei_ETEdit_FAXNo.Clear;
        // 施行担当者
        Goukei_ETEdit_SekouPersonCode.Clear;
        Goukei_ENEdit_SekouPersonCode.Value        := 0;
        Goukei_ENEdit_SekouPersonCode.InputFlag    := true;
        Goukei_LLabel_SekouPersonName.Caption      := '';
        // 施行部門
        Goukei_ETEdit_SekouBmnCode.Clear;
        Goukei_ETEdit_SekouBmnCode.TagStr       := '';   // <238>
        Goukei_ENEdit_SekouBmnCode.Value        := 0;
        Goukei_ENEdit_SekouBmnCode.InputFlag    := true;
        Goukei_ENEdit_SekouBmnCode.TagStr       := '';   // <238>
        Goukei_LLabel_SekouBmnName.Caption      := '';
        // 備考・概要
        Goukei_ETEdit_BIKO.Text                 := '';
        Goukei_ETEdit_Gaiyou.Text               := '';
// <205> ADD end
// <SEI> ADD start
        // 請求先
        Goukei_ETEdit_SeikyusakiCd.Clear;
        Goukei_ENEdit_SeikyusakiCd.Value        := 0;
        Goukei_ENEdit_SeikyusakiCd.InputFlag    := true;
        Goukei_LLabel_SeikyusakiNm.Caption      := '';

        // 一括請求先工事
        Goukei_ETEdit_SeikyuKoujiCd.Clear;
        Goukei_ENEdit_SeikyuKoujiCd.Value        := 0;
        Goukei_ENEdit_SeikyuKoujiCd.InputFlag    := true;
        Goukei_LLabel_SeikyuKoujiNm.Caption      := '';
// <SEI> ADD end
        //付箋初期化
        for i := 1 to 4 do
        begin
            TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
        end;
	end;

	// 契約情報：初期表示
	if ( iSumKbn = 0 ) then
	begin
		JKeiyaku_DMemData.Close;
		JKeiyaku_DMemData.Open;
	end
	else
	begin
		GKeiyaku_DMemData.Close;
		GKeiyaku_DMemData.Open;
	end;
{ <212> del
	for iCount := 0 to 8 - 1 do
	begin
		if ( iSumKbn = 0 ) then
		begin
			JKeiyaku_DMemData.Append;

			JKeiyaku_DMemDataContDate.Clear;                    // 契約日付
			JKeiyaku_DMemDataContNo.Clear;                      // 契約NO.
			JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;      // 消費税率(ﾀﾞﾐｰ)
			JKeiyaku_DMemDataTax_RateName.AsString   := '';     // 消費税率名
			JKeiyaku_DMemDataTax_Rate.AsInteger      := 0;      // 消費税率
			JKeiyaku_DMemDataSales_Tax.Clear;                   // 消費税額
			JKeiyaku_DMemDataContMoney.Clear;                   // 契約金額
			JKeiyaku_DMemDataCheck.AsInteger	     := 1;      //
            JKeiyaku_DMemDataKojiInfo2NCode.AsFloat  := 0;      // 契約情報内部ｺｰﾄﾞ

			JKeiyaku_DMemData.Post;
			JKeiyaku_DMemData.Next;
		end
		else
		begin
			GKeiyaku_DMemData.Append;

			GKeiyaku_DMemDataContDate.Clear;                    // 契約日付
			GKeiyaku_DMemDataContNo.Clear;                      // 契約NO.
			GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;      // 消費税率(ﾀﾞﾐｰ)
			GKeiyaku_DMemDataTax_RateName.AsString   := '';     // 消費税率名
			GKeiyaku_DMemDataTax_Rate.AsInteger      := 0;      // 消費税率
			GKeiyaku_DMemDataSales_Tax.Clear;                   // 消費税額
			GKeiyaku_DMemDataContMoney.Clear;                   // 契約金額
			GKeiyaku_DMemDataCheck.AsInteger	     := 1;      //
            GKeiyaku_DMemDataKojiInfo2NCode.AsFloat  := 0;      // 契約情報内部ｺｰﾄﾞ

			GKeiyaku_DMemData.Post;
			GKeiyaku_DMemData.Next;
		end;
	end;
}

	// 入金情報：初期表示
	if ( iSumKbn = 0 ) then
	begin
		JNyukin_DMemData.Close;
		JNyukin_DMemData.Open;
	end
	else
	begin
		GNyukin_DMemData.Close;
		GNyukin_DMemData.Open;
	end;

	for	iCount := 0 to 10 - 1 do
	begin
		if ( iSumKbn = 0 ) then
		begin
			JNyukin_DMemData.Append;

			JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
			JNyukin_DMemDataCheck.AsInteger	        := 1;      //
            JNyukin_DMemDataKojiInfo2NCode.AsFloat  := 0;      // 入金情報内部ｺｰﾄﾞ
// <225> ADD Start

            JNyukin_DMemDataFontColorDate.AsInteger	:= 0;
            JNyukin_DMemDataFontColorMony.AsInteger	:= 0;
            JNyukin_DMemDataDspOrder.AsInteger      := iCount + 1;
// <225> ADD end

			JNyukin_DMemData.Post;
			JNyukin_DMemData.Next;
		end
		else
		begin
			GNyukin_DMemData.Append;

			GNyukin_DMemDataContDate.Clear;                     // 入金予定日
			GNyukin_DMemDataContMoney.Clear;                    // 入金予定額
			GNyukin_DMemDataCheck.AsInteger	         := 1;      //
            GNyukin_DMemDataKojiInfo2NCode.AsFloat   := 0;      // 入金情報内部ｺｰﾄﾞ



			GNyukin_DMemData.Post;
			GNyukin_DMemData.Next;
		end;
	end;

// <SEI> ADD start
	// 請求・入金予定：初期表示
	if ( iSumKbn = 0 ) then
	begin
		JSeikyu_DMemData.Close;
		JSeikyu_DMemData.Open;
	end
	else
	begin
		GSeikyu_DMemData.Close;
		GSeikyu_DMemData.Open;
	end;
// <SEI> ADD end

	if ( iSumKbn = 0 ) then
	begin
		if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
			JKeiyaku_DMemData.First;
		if ( JNyukin_DMemData.RecordCount  <> 0 ) then
			JNyukin_DMemData.First;
// <SEI> ADD start
		if ( JSeikyu_DMemData.RecordCount  <> 0 ) then
			JSeikyu_DMemData.First;
// <SEI> ADD end
		Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
// <999>		Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
	end
	else
	begin
		if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
			GKeiyaku_DMemData.First;
		if ( GNyukin_DMemData.RecordCount  <> 0 ) then
			GNyukin_DMemData.First;
// <SEI> ADD start
		if ( GSeikyu_DMemData.RecordCount  <> 0 ) then
			GSeikyu_DMemData.First;
// <SEI> ADD end
		Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
		Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
	end;

	if ( iSumKbn = 0 ) then     // <231> ADD
    begin                       // <231> ADD
        // ｾｸﾞﾒﾝﾄ
        for iCount := 1 to 10 do
        begin
            TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(iCount))).Text    := '';
            TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm' + IntToStr(iCount))).Caption := '';
        end;

        // ﾌﾟﾛｼﾞｪｸﾄ分類
        for iCount := 1 to 10 do
        begin
            TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(iCount))).Text    := '';
            TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_BunNm' + IntToStr(iCount))).Caption := '';
        end;
    end;         // <231> ADD

	MemPost_Sw	 := 0;
	giTokusyuFlg := 0;

    // 初期化<102>
    UpdFreeFlg := false;
    freeItem   := freeItemNull;
    freeChgItem   := freeChgItemNull; //<FREE> ADD
    // <155> - ST
	LSinsei.Visible	:= false;
    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
    // <155> - ED
    FontColorChange();  // <225> 文字色変更
    moKojiInfoMn.Initialize();  //<TAX> ADD
end;

//**************************************************************************
//	Proccess	:	工事データ読み込み（１件）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer (0:実在 1:合計)
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnDataRead(strGCode: String; iSumKbn: Integer; iChk: Integer): Integer;
var
	QueryError	:	TMQuery;
begin
    Result  :=  0;

    if m_Close then exit;

	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if strGCode <> '' then
			strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
	end;

	if iChk = 1 then
	begin
		QueryError := TMQuery.Create( Self );					//	MQueryの構築
		MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryError );		//	DBとMQueryの接続

		// ユニークチェック
		with QueryError do
		begin
			try
				Close;
				SQL.Clear;
				SQL.Add('Select MasterKbn from HojyoMA');
				SQL.Add('Where MasterKbn=:pMKBN and RDelKbn=0 and GCode=:strGCode and SumKbn=:iSumKbn');
                SetFld('pMKBN').asInteger := m_nMasterDivision;
				SetFld('strGCode').AsString	:= strGCode;
				if iSumKbn = 0 then
					SetFld('iSumKbn').AsInteger	:= 1
				else
					SetFld('iSumKbn').AsInteger	:= 0;

				Open;

				if Eof = false then
				begin
					result := -1;
					exit;
				end;
			finally
				Free;
			end;
		end;
	end;

	{HojyoMA Read}
	with HojyoMA_DMQuery do
	begin
		try
			Close;
			SQL.Clear;
			SQL.Add('Select * from HojyoMA');
			SQL.Add('Where MasterKbn=:pMKBN and RDelKbn=0 and GCode=:strGCode and SumKbn=:iSumKbn');
            SetFld('pMKBN').asInteger := m_nMasterDivision;
			SetFld('strGCode').AsString	:= strGCode;
			SetFld('iSumKbn').AsInteger	:= iSumKbn;
			Open;
		except
			ShowMessage('HojyoMA Read Error!');
		end;
	end;

	{KojiInfo Read}
	with KojiInfo_DMQuery do
	begin
		try
			Close;
			SQL.Clear;
			SQL.Add('Select * from KojiInfo');
			SQL.Add('Where MasterKbn=:pMKBN and NCode=:strNCode');
            SetFld('pMKBN').asInteger  := m_nMasterDivision;
//<255> DEL			SetFld('strNCode').AsFloat := HojyoMA_DMQuery.GetFld('NCODE').AsFloat;
			SetFld('strNCode').AsString := HojyoMA_DMQuery.GetFld('NCODE').AsString;  //<255> ADD
			Open;
		except
			ShowMessage('KojiInfo Read Error!');
		end;
	end;

	result := 0
end;


//**************************************************************************
//	Proccess	:	MemData ← HojyoMA_DMQuery（実在工事）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	bSw = trueはGrid表示、falseはCard表示
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnMemSet(iSumKbn: Integer; bSw: Boolean);
var
	stCode		:	String;
	iCut		:	Integer;
	iCode		:	Int64;
	sCmnt		:	String;
	dQuery	:	TMQuery;
//    i       :   Integer;
    pCmnt       :   PFusenCmntRec;  //<271> ADD
begin
//<155> - ST
	if not m_WFSw then
    begin
		ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ
//<232> DEL        FontColorChange();  // <225> 文字色変更

    end;
//<155> - ED

	MemPost_Sw	:= 1;
	if bSw = false then
	begin
		dQuery := TMQuery.Create(Self);

		try
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, dQuery);

			with dQuery do
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 付箋コメントGET
				SQL.Add('select FusenCmnt from MFusenInfo');
				SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
				SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL				SetFld('NCode').AsFloat   := HojyoMA_DMQuery.GetFld('NCode').AsFloat;// 検索対象の内部ｺｰﾄﾞ 設定
				SetFld('NCode').AsString   := HojyoMA_DMQuery.GetFld('NCode').AsString;// 検索対象の内部ｺｰﾄﾞ 設定  <255> ADD
				Open;						// ｸｴﾘの開始

				if Eof = false then
					sCmnt := GetFld('FusenCmnt').AsString
				else
					sCmnt := '';
			end;
		finally
			dQuery.Close;
			dQuery.Free;
		end;
	end
	else
		sCmnt := HojyoMA_DMQuery.GetFld('FusenCmnt').AsString;

	if iSumKbn = 0 then
	begin
		if bSw = false then
			JHojyoMA_DMemData.Edit
		else
			JHojyoMA_DMemData.Append;

		if bSw = false then
			// 付箋情報SET
			FusenDsp(iSumKbn, HojyoMA_DMQuery.GetFld('GCode').AsString, 0)
		else
		begin
			JHojyoMA_DMemDataFusen.Clear;
            if HojyoMA_DMQuery.GetFld('FusenKbn').AsInteger = 0 then
    			JHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR
            else
    			JHojyoMA_DMemDataFusenIndex.AsInteger := HojyoMA_DMQuery.GetFld('FusenKbn').AsInteger;
			case HojyoMA_DMQuery.GetFld('FusenKbn').AsInteger of
			RED:	JHojyoMA_DMemDataFusen.Assign(GFRed2.Bitmap);
			GREEN:	JHojyoMA_DMemDataFusen.Assign(GFGreen2.Bitmap);
			BLUE:	JHojyoMA_DMemDataFusen.Assign(GFBlue2.Bitmap);
			ORANGE:	JHojyoMA_DMemDataFusen.Assign(GFOrange2.Bitmap);
			end;
		end;

		with HojyoMA_DMQuery do
		begin
			JHojyoMA_DMemDataMasterKbn.AsInteger		:= GetFld('MasterKbn').AsInteger;
			JHojyoMA_DMemDataSumKbn.AsInteger			:= GetFld('SumKbn').AsInteger;
			JHojyoMA_DMemDataRecordKbn.AsInteger		:= GetFld('RDelKbn').AsInteger;

			stCode := HojyoMA_DMQuery.GetFld('GCode').AsString;
			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
					if stCode <> '' then
					begin
						iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(stCode, 1, iCut);
					end;
				end
				else
				begin
					if stCode <> '' then
					begin
						iCode := StrToInt64(Trim(stCode));
						stCode := IntToStr(iCode);
					end;
				end;
			end;
			JHojyoMA_DMemDataGCode.AsString				:= stCode;
			JHojyoMA_DMemDataRenChar.AsString			:= GetFld('Renso').AsString;
			JHojyoMA_DMemDataLongName.AsString			:= GetFld('LongName').AsString;
			JHojyoMA_DMemDataSimpleName.AsString		:= GetFld('SimpleName').AsString;
			JHojyoMA_DMemDataNCode.AsInteger			:= GetFld('NCode').AsInteger;
			JHojyoMA_DMemDataFinishDate.AsDateTime		:= GetFld('FinishDate').AsDateTime;
			JHojyoMA_DMemDataBunCode.AsInteger			:= GetFld('BunCode').AsInteger;
			JHojyoMA_DMemDataMoveKbn.AsInteger			:= GetFld('MoveKbn').AsInteger;
			JHojyoMA_DMemDataSyokuchikbn.AsInteger	    := GetFld('Syokuchikbn').AsInteger;

{            //セグメント・分類
            for i := 1 to  10 do
            begin
                TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataSegCode' + IntToStr(i))).AsString
                 := fnGetGCODE(HojyoMA_DMQuery.FieldByName('SegNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_Seg [i].nMasterDivision);

                TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataBunruiCode' + IntToStr(i))).AsString
                 := fnGetGCODE(HojyoMA_DMQuery.FieldByName('BunruiNCode' + IntToStr(i)).AsFloat,m_arAdoptInfo_PBr [i].nMasterDivision);
            end;
}
//<271> MOD St
{
			SetLength(m_aCmnt_Jitu,Length(m_aCmnt_Jitu)+1);
			m_aCmnt_Jitu[Length(m_aCmnt_Jitu)-1].Code 	:= stCode;
			m_aCmnt_Jitu[Length(m_aCmnt_Jitu)-1].Cmnt 	:= sCmnt;
}
            New(pCmnt);
            pCmnt.Code  :=  stCode;
            pCmnt.Cmnt  :=  sCmnt;
            m_aCmnt_Jitu.Add(pCmnt);
//<271> MOD Ed
		end;

		if bSw = false then
		begin
			with KojiInfo_DMQuery do
			begin
				JHojyoMA_DMemDataZipCode1.AsInteger			:= GetFld('ZipCode1').AsInteger;
				JHojyoMA_DMemDataZipCode2.AsInteger			:= GetFld('ZipCode2').AsInteger;
				JHojyoMA_DMemDataAddress1.AsString			:= GetFld('Address1').AsString;
				JHojyoMA_DMemDataAddress2.AsString			:= GetFld('Address2').AsString;
				JHojyoMA_DMemDataTelNo.AsString				:= GetFld('TelNo').AsString;

				stCode := fnGetGCODE(GetFld('PersonNCode').AsFloat,MKBN_SYAIN);
				if MasterInfo_DMemDataCodeAttrShain.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitShain.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				JHojyoMA_DMemDataPersonCode.AsString		:= stCode;

				stCode := fnGetGCODE(GetFld('CostomerNCode').AsFloat,MKBN_TORIHIKI);
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				JHojyoMA_DMemDataCostomerCode.AsString		:= stCode;

// <204> ADD start
				m_exJBmnNCode := GetFld('BmnNCode').AsFloat;
// <204> ADD end

				stCode := fnGetGCODE(GetFld('BmnNCode').AsFloat,MKBN_BUMON);
				if MasterInfo_DMemDataCodeAttrBmn.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitBmn.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				JHojyoMA_DMemDataBmnCode.AsString			:= stCode;

				JHojyoMA_DMemDataSalesBase.AsInteger		:= GetFld('SalesBase').AsInteger;
				JHojyoMA_DMemDataHaifuKbn.AsInteger			:= GetFld('HaifuKbn').AsInteger;

				JHojyoMA_DMemDataStartDate.AsDateTime		:= GetFld('YoteiDateST').AsDateTime;
				JHojyoMA_DMemDataEndDate.AsDateTime	     	:= GetFld('YoteiDateEN').AsDateTime;

				JHojyoMA_DMemDataJStartDate.AsDateTime		:= GetFld('ScheDateST').AsDateTime;
				JHojyoMA_DMemDataJEndDate.AsDateTime       	:= GetFld('ScheDateEN').AsDateTime;

				JHojyoMA_DMemDataCostomerName.AsString		:= GetFld('CostomerName').AsString;
                JHojyoMA_DMemDataPartKbn.AsInteger			:= GetFld('PartKbn').AsInteger;
                JHojyoMA_DMemDataPatternNo.AsInteger        := fnGetGCODE_Int(GetFld('PtnNCode').AsInteger,0);
                JHojyoMA_DMemDataDetailKbn1.AsInteger		:= GetFld('DetailKbn1').AsInteger;
                JHojyoMA_DMemDataDetailKbn2.AsInteger		:= GetFld('DetailKbn2').AsInteger;
                m_DetailKbn2                                := GetFld('DetailKbn2').AsInteger;
// <191> MOD start
//                JHojyoMA_DMemDataSalesKmkCd.AsInteger		:= GetFld('SalesKmkCd').AsInteger;
											// 売上計上科目外部ｺｰﾄﾞ取得
				JHojyoMA_DMemDataSalesKmkCd.AsInteger		:= GetKmkGCode(GetFld('SalesKmkCd').AsFloat);
// <191> MOD end
                JHojyoMA_DMemDataBIKO.AsString      	   	:= GetFld('Remarks').AsString;

// <205> ADD start
                JHojyoMA_DMemDatagaiyou.AsString            := GetFld('gaiyou').AsString;       // 概要
                JHojyoMA_DMemDataUkeoiKbn.AsInteger         := GetFld('UkeoiKbn').AsInteger;    // 請負区分
                JHojyoMA_DMemDataFAXNo.AsString             := GetFld('FAXNo').AsString;        // FAXNo

                // 施主
				stCode := fnGetGCODE(GetFld('SesNCode').AsFloat,MKBN_SOFU);
				if MasterInfo_DMemDataCodeAttrSeshu.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitSeshu.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode  := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
                JHojyoMA_DMemDataSesNCode.AsString         := stCode;    // 施主内部ｺｰﾄﾞ


                // 施行部門コード
                m_exJSekouBmnNCode := GetFld('SeiBmnNCode').AsFloat;
				stCode := fnGetGCODE(GetFld('SeiBmnNCode').AsFloat,MKBN_BUMON);
				if MasterInfo_DMemDataCodeAttrBmn.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitBmn.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				JHojyoMA_DMemDataSekouBmnCode.AsString			:= stCode;


                // 施行担当者
				stCode := fnGetGCODE(GetFld('SeiTanNCode').AsFloat,MKBN_SYAIN);
				if MasterInfo_DMemDataCodeAttrShain.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitShain.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				JHojyoMA_DMemDataSekouPersonCode.AsString		:= stCode;
// <205> ADD end

// <SEI> ADD start
                if IsSeikyuYoteiUse then
                begin
                    // 請求先
                    stCode := fnGetGCODE(GetFld('SeikyuCode').AsFloat, MKBN_TORIHIKI);
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
                    begin
                        if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
                        begin
                            if stCode <> '' then
                            begin
                                iCut := 16 - MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                                System.Delete(stCode, 1, iCut);
                            end;
                        end
                        else
                        begin
                            if stCode <> '' then
                            begin
                                iCode := StrToInt64(Trim(stCode));
                                stCode := IntToStr(iCode);
                            end;
                        end;
                    end;
                    JHojyoMA_DMemDataSeikyusakiGCode.AsString		:= stCode;

                    // 一括請求先
                    stCode := fnGetGCODE(GetFld('IkkatuSeikyuCode').AsFloat, m_nMasterDivision);
                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                    begin
                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                        begin
                            if stCode <> '' then
                            begin
                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                System.Delete(stCode, 1, iCut);
                            end;
                        end
                        else
                        begin
                            if stCode <> '' then
                            begin
                                iCode := StrToInt64(Trim(stCode));
                                stCode := IntToStr(iCode);
                            end;
                        end;
                    end;
                    JHojyoMA_DMemDataSeikyuKoujiGCode.AsString		:= stCode;
                end;
// <SEI> ADD end
                JHojyoMA_DMemDataTaxType.AsInteger := GetFld('PartPattern').AsInteger;  // 税込/税抜 <TAX> ADD
				JHojyoMA_DMemData.Post;
			end;
		end
		else
			JHojyoMA_DMemData.Post;
	end
	else
	begin
		if bSw = false then
        begin
			GHojyoMA_DMemData.Edit;
        end
		else
        begin
			GHojyoMA_DMemData.Append;
        end;

		if bSw = false then
			// 付箋情報SET
			FusenDsp(iSumKbn, HojyoMA_DMQuery.GetFld('GCode').AsString, 0)
		else
		begin
			GHojyoMA_DMemDataFusen.Clear;
            if HojyoMA_DMQuery.GetFld('FusenKbn').AsInteger = 0 then
    			GHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR
            else
    			GHojyoMA_DMemDataFusenIndex.AsInteger := HojyoMA_DMQuery.GetFld('FusenKbn').AsInteger;
			case HojyoMA_DMQuery.GetFld('FusenKbn').AsInteger of
			RED:	GHojyoMA_DMemDataFusen.Assign(GFRed2.Bitmap);
			GREEN:	GHojyoMA_DMemDataFusen.Assign(GFGreen2.Bitmap);
			BLUE:	GHojyoMA_DMemDataFusen.Assign(GFBlue2.Bitmap);
			ORANGE:	GHojyoMA_DMemDataFusen.Assign(GFOrange2.Bitmap);
			end;
		end;

		with HojyoMA_DMQuery do
		begin
			GHojyoMA_DMemDataMasterKbn.AsInteger		:= GetFld('MasterKbn').AsInteger;
			GHojyoMA_DMemDataSumKbn.AsInteger			:= GetFld('SumKbn').AsInteger;
			GHojyoMA_DMemDataRecordKbn.AsInteger		:= GetFld('RDelKbn').AsInteger;

			stCode := HojyoMA_DMQuery.GetFld('GCode').AsString;
			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
					if stCode <> '' then
					begin
						iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(stCode, 1, iCut);
					end;
				end
				else
				begin
					if stCode <> '' then
					begin
						iCode := StrToInt64(Trim(stCode));
						stCode := IntToStr(iCode);
					end;
				end;
			end;
			GHojyoMA_DMemDataGCode.AsString				:= stCode;

			GHojyoMA_DMemDataRenChar.AsString			:= GetFld('Renso').AsString;
			GHojyoMA_DMemDataLongName.AsString			:= GetFld('LongName').AsString;
			GHojyoMA_DMemDataSimpleName.AsString		:= GetFld('SimpleName').AsString;
			GHojyoMA_DMemDataNCode.AsInteger			:= GetFld('NCode').AsInteger;
			GHojyoMA_DMemDataRootKbn.AsInteger			:= GetFld('RootKbn').AsInteger;
			GHojyoMA_DMemDataFinishDate.AsDateTime		:= GetFld('FinishDate').AsDateTime;
			GHojyoMA_DMemDataMoveKbn.AsInteger			:= GetFld('MoveKbn').AsInteger;
			GHojyoMA_DMemDataSyokuchikbn.AsInteger	    := GetFld('Syokuchikbn').AsInteger;
//<271> MOD St
{
			SetLength(m_aCmnt_Gou,Length(m_aCmnt_Gou)+1);
			m_aCmnt_Gou[Length(m_aCmnt_Gou)-1].Code 	:= stCode;
			m_aCmnt_Gou[Length(m_aCmnt_Gou)-1].Cmnt 	:= sCmnt;
}
            New(pCmnt);
            pCmnt.Code  :=  stCode;
            pCmnt.Cmnt  :=  sCmnt;
            m_aCmnt_Gou.Add(pCmnt);
//<271> MOD Ed
		end;

		if bSw = false then
		begin
			with KojiInfo_DMQuery do
			begin
				GHojyoMA_DMemDataZipCode1.AsInteger			:= GetFld('ZipCode1').AsInteger;
				GHojyoMA_DMemDataZipCode2.AsInteger			:= GetFld('ZipCode2').AsInteger;
				GHojyoMA_DMemDataAddress1.AsString			:= GetFld('Address1').AsString;
				GHojyoMA_DMemDataAddress2.AsString			:= GetFld('Address2').AsString;
				GHojyoMA_DMemDataTelNo.AsString				:= GetFld('TelNo').AsString;

				stCode := fnGetGCODE(GetFld('PersonNCode').AsFloat,MKBN_SYAIN);
				if MasterInfo_DMemDataCodeAttrShain.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitShain.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				GHojyoMA_DMemDataPersonCode.AsString		:= stCode;

				stCode := fnGetGCODE(GetFld('CostomerNCode').AsFloat,MKBN_TORIHIKI);
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				GHojyoMA_DMemDataCostomerCode.AsString		:= stCode;

// <204> ADD start
				m_exGBmnNCode := GetFld('BmnNCode').AsFloat;
// <204> ADD end

				stCode := fnGetGCODE(GetFld('BmnNCode').AsFloat,MKBN_BUMON);
				if MasterInfo_DMemDataCodeAttrBmn.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitBmn.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				GHojyoMA_DMemDataBmnCode.AsString			:= stCode;

				GHojyoMA_DMemDataSalesBase.AsInteger		:= GetFld('SalesBase').AsInteger;
				GHojyoMA_DMemDataHaifuKbn.AsInteger			:= GetFld('HaifuKbn').AsInteger;
				GHojyoMA_DMemDataStartDate.AsDateTime		:= GetFld('YoteiDateST').AsDateTime;
				GHojyoMA_DMemDataEndDate.AsDateTime	    	:= GetFld('YoteiDateEN').AsDateTime;
				GHojyoMA_DMemDataJStartDate.AsDateTime		:= GetFld('ScheDateST').AsDateTime;
				GHojyoMA_DMemDataJEndDate.AsDateTime	   	:= GetFld('ScheDateEN').AsDateTime;
				GHojyoMA_DMemDataCostomerName.AsString		:= GetFld('CostomerName').AsString;
                GHojyoMA_DMemDataDetailKbn1.AsInteger		:= GetFld('DetailKbn1').AsInteger;
                GHojyoMA_DMemDataDetailKbn2.AsInteger		:= GetFld('DetailKbn2').AsInteger;
                GHojyoMA_DMemDataPartKbn.AsInteger			:= GetFld('PartKbn').AsInteger;
                GHojyoMA_DMemDataSalesKmkCd.AsInteger		:= GetFld('SalesKmkCd').AsInteger;
//                GHojyoMA_DMemDataPatternNo.AsInteger		:= GetFld('PatternNo').AsInteger;

// <205> ADD start

                GHojyoMA_DMemDataUkeoiKbn.AsInteger         := GetFld('UkeoiKbn').AsInteger;    // 請負区分
                GHojyoMA_DMemDataFAXNo.AsString             := GetFld('FAXNo').AsString;        // FAXNo

                GHojyoMA_DMemDatagaiyou.AsString            := GetFld('gaiyou').AsString;
                GHojyoMA_DMemDataBIKO.AsString              := GetFld('Remarks').AsString;       // 概要

				stCode := fnGetGCODE(GetFld('SesNCode').AsFloat,MKBN_SOFU);
				if MasterInfo_DMemDataCodeAttrSeshu.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitSeshu.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
                GHojyoMA_DMemDataSesNCode.AsString         := stCode;    // 施主外部ｺｰﾄﾞ


                // 施行部門コード
                m_exGSekouBmnNCode := GetFld('SeiBmnNCode').AsFloat;
				stCode := fnGetGCODE(GetFld('SeiBmnNCode').AsFloat,MKBN_BUMON);
				if MasterInfo_DMemDataCodeAttrBmn.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitBmn.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				GHojyoMA_DMemDataSekouBmnCode.AsString			:= stCode;


                // 施行担当者
				stCode := fnGetGCODE(GetFld('SeiTanNCode').AsFloat,MKBN_SYAIN);
				if MasterInfo_DMemDataCodeAttrShain.AsInteger <> 2 then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
					begin
						if stCode <> '' then
						begin
							iCut := 16 - MasterInfo_DMemDataCodeDigitShain.AsInteger;
							System.Delete(stCode, 1, iCut);
						end;
					end
					else
					begin
						if stCode <> '' then
						begin
							iCode := StrToInt64(Trim(stCode));
							stCode := IntToStr(iCode);
						end;
					end;
				end;
				GHojyoMA_DMemDataSekouPersonCode.AsString		:= stCode;

// <205> ADD end

// <SEI> ADD start
                if IsSeikyuYoteiUse then
                begin
                    // 請求先
                    stCode := fnGetGCODE(GetFld('SeikyuCode').AsFloat, MKBN_TORIHIKI);
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
                    begin
                        if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
                        begin
                            if stCode <> '' then
                            begin
                                iCut := 16 - MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                                System.Delete(stCode, 1, iCut);
                            end;
                        end
                        else
                        begin
                            if stCode <> '' then
                            begin
                                iCode := StrToInt64(Trim(stCode));
                                stCode := IntToStr(iCode);
                            end;
                        end;
                    end;
                    GHojyoMA_DMemDataSeikyusakiGCode.AsString		:= stCode;

                    // 一括請求先
                    stCode := fnGetGCODE(GetFld('IkkatuSeikyuCode').AsFloat, m_nMasterDivision);
                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                    begin
                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                        begin
                            if stCode <> '' then
                            begin
                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                System.Delete(stCode, 1, iCut);
                            end;
                        end
                        else
                        begin
                            if stCode <> '' then
                            begin
                                iCode := StrToInt64(Trim(stCode));
                                stCode := IntToStr(iCode);
                            end;
                        end;
                    end;
                    GHojyoMA_DMemDataSeikyuKoujiGCode.AsString		:= stCode;
                end;
// <SEI> ADD end

				GHojyoMA_DMemData.Post;
			end;
		end
		else
			GHojyoMA_DMemData.Post;
	end;

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
	MemPost_Sw	:= 0;
end;


//**************************************************************************
//	Proccess	:	MemData ← Entry Data （実在工事）
//	Notice		:   カード型入力データをメモデータにセットする。
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnJEntrySet();

var
	MemAppend_Flg	: Boolean;
    i : Integer;
begin
	MemPost_Sw		:= 1;
	MemAppend_Flg	:= true;

	if JHojyoMA_DMemData.RecordCount <> 0 then
		JHojyoMA_DMemData.First;

	while JHojyoMA_DMemData.Eof = false do
	begin
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if JHojyoMA_DMemDataGCode.AsString = Jituzai_ETEdit_GCode.Text then
			begin
				MemAppend_Flg	:= false;
				Break;
			end
			else
				JHojyoMA_DMemData.Next;
		end
		else
		begin
			if JHojyoMA_DMemDataGCode.AsString <> '' then
			begin
				if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) = Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]) then
//				if JHojyoMA_DMemDataGCode.AsString = Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]) then
				begin
					MemAppend_Flg	:= false;
					Break;
				end
				else
					JHojyoMA_DMemData.Next;
			end
			else
				JHojyoMA_DMemData.Next;
		end;
	end;

	if MemAppend_Flg = true then
		JHojyoMA_DMemData.Append
	else
		JHojyoMA_DMemData.Edit;

	JHojyoMA_DMemDataMasterkbn.AsInteger		:= m_nMasterDivision;
	JHojyoMA_DMemDataSumKbn.AsInteger			:= 0;
	JHojyoMA_DMemDataRecordKbn.AsInteger		:= 0;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		JHojyoMA_DMemDataGCode.AsString		   	:= Jituzai_ETEdit_GCode.Text
	else
		JHojyoMA_DMemDataGCode.AsString		   	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

	JHojyoMA_DMemDataRenChar.AsString			:= Jituzai_ETEdit_RenChar.Text;
	JHojyoMA_DMemDataLongName.AsString			:= Jituzai_ETEdit_LongName.Text;
	JHojyoMA_DMemDataSimpleName.AsString		:= Jituzai_ETEdit_SimpleName.Text;
	JHojyoMA_DMemDataZipCode1.AsInteger			:= Jituzai_ENEdit_ZipCode1.AsInteger;
	JHojyoMA_DMemDataZipCode2.AsInteger			:= Jituzai_ENEdit_ZipCode2.AsInteger;
	JHojyoMA_DMemDataAddress1.AsString			:= Jituzai_ETEdit_Address1.Text;
	JHojyoMA_DMemDataAddress2.AsString			:= Jituzai_ETEdit_Address2.Text;
	JHojyoMA_DMemDataTelNo.AsString				:= Jituzai_ETEdit_TelNo.Text;

// <205> start
    JHojyoMA_DMemDatagaiyou.AsString            := Jituzai_ETEdit_Gaiyou.Text;          // 概要
    JHojyoMA_DMemDataUkeoiKbn.AsInteger         := Jituzai_ENEdit_UkeoiKbn.AsInteger;   // 請負区分
    JHojyoMA_DMemDataFAXNo.AsString             := Jituzai_ETEdit_FaxNo.Text;           // FAXNo

    // 施主ｺｰﾄﾞ
    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
    begin
        JHojyoMA_DMemDataSesNCode.AsString         := Jituzai_ETEdit_SeshuCode.Text;
    end
    else
    begin
		if Jituzai_ENEdit_SeshuCode.Value <> 0 then
        begin
			JHojyoMA_DMemDataSesNCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_SeshuCode.Value)]);
        end
		else
		begin
			if Jituzai_ENEdit_SeshuCode.InputFlag = true then
				JHojyoMA_DMemDataSesNCode.AsString	:= ''
			else
				JHojyoMA_DMemDataSesNCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_SeshuCode.Value)]);
		end;
    end;

    // 施行部門
	if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
		JHojyoMA_DMemDataSekouBmnCode.AsString  := Jituzai_ETEdit_SekouBmnCode.Text
	else
	begin
		if Jituzai_ENEdit_SekouBmnCode.Value <> 0 then
			JHojyoMA_DMemDataSekouBmnCode.AsString  := Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouBmnCode.Value)])
		else
		begin
			if Jituzai_ENEdit_SekouBmnCode.InputFlag = true then
				JHojyoMA_DMemDataSekouBmnCode.AsString	:= ''
			else
				JHojyoMA_DMemDataSekouBmnCode.AsString  := Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouBmnCode.Value)])
		end;
	end;

    // 施行担当者
	if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
		JHojyoMA_DMemDataSekouPersonCode.AsString	:= Jituzai_ETEdit_SekouPersonCode.Text
	else
	begin
		if Jituzai_ENEdit_SekouPersonCode.Value <> 0 then
			JHojyoMA_DMemDataSekouPersonCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouPersonCode.Value)])
		else
		begin
			if Jituzai_ENEdit_SekouPersonCode.InputFlag = true then
				JHojyoMA_DMemDataSekouPersonCode.AsString	:= ''
			else
				JHojyoMA_DMemDataSekouPersonCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouPersonCode.Value)]);
		end;
	end;
// <205> end

// <SEI> ADD start
    // 請求先ｺｰﾄﾞ
	         									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
    JHojyoMA_DMemDataSeikyusakiGCode.AsString := GetInputGCode(Jituzai_ETEdit_SeikyusakiCd,
					            						Jituzai_ENEdit_SeikyusakiCd);

    // 一括請求先工事ｺｰﾄﾞ
	         									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
    JHojyoMA_DMemDataSeikyuKoujiGCode.AsString := GetInputGCode(Jituzai_ETEdit_SeikyuKoujiCd,
					            						Jituzai_ENEdit_SeikyuKoujiCd);
// <SEI> ADD end

    // 社員
	if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
		JHojyoMA_DMemDataPersonCode.AsString	:= Jituzai_ETEdit_PersonCode.Text
	else
	begin
		if Jituzai_ENEdit_PersonCode.Value <> 0 then
			JHojyoMA_DMemDataPersonCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)])
		else
		begin
			if Jituzai_ENEdit_PersonCode.InputFlag = true then
				JHojyoMA_DMemDataPersonCode.AsString	:= ''
			else
				JHojyoMA_DMemDataPersonCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)]);
		end;
	end;

    // 取引先（受注先）
	if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
		JHojyoMA_DMemDataCostomerCode.AsString	:= Jituzai_ETEdit_CustomerCode.Text
	else
	begin
		if Jituzai_ENEdit_CustomerCode.Value <> 0 then
			JHojyoMA_DMemDataCostomerCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)])
		else
		begin
			if Jituzai_ENEdit_CustomerCode.InputFlag = true then
				JHojyoMA_DMemDataCostomerCode.AsString	:= ''
			else
				JHojyoMA_DMemDataCostomerCode.AsString	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)]);
		end;
	end;
    // <144>↓
                                            // 受注先名称
    JHojyoMA_DMemDataCostomerName.AsString := Jituzai_ETEdit_CustomerName.Text;
    // <144>↑

    // 部門
	if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
		JHojyoMA_DMemDataBmnCode.AsString		:= Jituzai_ETEdit_BmnCode.Text
	else
	begin
		if Jituzai_ENEdit_BmnCode.Value <> 0 then
			JHojyoMA_DMemDataBmnCode.AsString		:= Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)])
		else
		begin
			if Jituzai_ENEdit_BmnCode.InputFlag = true then
				JHojyoMA_DMemDataBmnCode.AsString	:= ''
			else
				JHojyoMA_DMemDataBmnCode.AsString		:= Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)])
		end;
	end;

	if Jituzai_EDEdit_StartDate.Value <> 0 then
		JHojyoMA_DMemDataStartDate.AsDateTime	:= Jituzai_EDEdit_StartDate.AsDateTime
	else
		JHojyoMA_DMemDataStartDate.Value		:= 0;

	if Jituzai_EDEdit_EndDate.Value <> 0 then
		JHojyoMA_DMemDataEndDate.AsDateTime	:= Jituzai_EDEdit_EndDate.AsDateTime
	else
		JHojyoMA_DMemDataEndDate.Value		:= 0;

	if Jituzai_EDEdit_JStartDate.Value <> 0 then
		JHojyoMA_DMemDataJStartDate.AsDateTime	:= Jituzai_EDEdit_JStartDate.AsDateTime
	else
		JHojyoMA_DMemDataJStartDate.Value		:= 0;

	if Jituzai_EDEdit_JEndDate.Value <> 0 then
		JHojyoMA_DMemDataJEndDate.AsDateTime	:= Jituzai_EDEdit_JEndDate.AsDateTime
	else
		JHojyoMA_DMemDataJEndDate.Value		:= 0;

	JHojyoMA_DMemDataSalesBase.AsInteger	:= Jituzai_ENEdit_SalesBase.AsInteger;  // <106><167>
	JHojyoMA_DMemDataHaifuKbn.AsInteger		:= Jituzai_ENEdit_HaifuKbn.AsInteger;
	JHojyoMA_DMemDataBIKO.AsString  		:= Jituzai_ETEdit_BIKO.Text;

    JHojyoMA_DMemDataDetailKbn1.AsInteger	:= Jituzai_ENEdit_DetailKbn1.AsInteger;
    JHojyoMA_DMemDataSalesKmkCd.AsInteger	:= Jituzai_ENEdit_SalesKmkCd.AsInteger;
// <211> MOD start
//    JHojyoMA_DMemDataDetailKbn2.AsInteger	:= Jituzai_ENEdit_DetailKbn2.AsInteger;
    if Jituzai_ENEdit_KojKbn2.AsInteger = 1 then
    begin
        JHojyoMA_DMemDataDetailKbn2.AsInteger	:= 9;
    end
    else
    begin
        JHojyoMA_DMemDataDetailKbn2.AsInteger	:= Jituzai_ENEdit_DetailKbn2.AsInteger;
    end;
// <211> MOD end

    if ((JHojyoMA_DMemDataPartKbn.AsInteger = 0) and (Jituzai_ENEdit_PartKbn.Value <> 0)) or
        ((JHojyoMA_DMemDataPartKbn.AsInteger <> 0) and (Jituzai_ENEdit_PartKbn.Value = 0)) then
        m_bMsgFlg := true;

    JHojyoMA_DMemDataPartKbn.AsInteger		:= Jituzai_ENEdit_PartKbn.AsInteger;
    JHojyoMA_DMemDataPatternNo.AsInteger	:= Jituzai_ENEdit_PatternNo.AsInteger;


    //分類・ｾｸﾞﾒﾝﾄ
    for i := 1 to  10 do
    begin
        TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataSegCode' + IntToStr(i))).AsString
            := TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Text;

        TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataBunruiCode' + IntToStr(i))).AsString
            := TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Text;
    end;
	JHojyoMA_DMemData.Post;
	MemPost_Sw		:= 0;

end;


//**************************************************************************
//	Proccess	:	MemData ← Entry Data （合計工事）
//	Notice		:   カード型入力データをメモデータにセットする。
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnGEntrySet();

var
	MemAppend_Flg	: Boolean;

begin
	MemPost_Sw		:= 1;
	MemAppend_Flg	:= true;

	if GHojyoMA_DMemData.RecordCount <> 0 then
		GHojyoMA_DMemData.First;

	while GHojyoMA_DMemData.Eof = false do
	begin
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if GHojyoMA_DMemDataGCode.AsString = Goukei_ETEdit_GCode.Text then
			begin
				MemAppend_Flg	:= false;
				Break;
			end
			else
				GHojyoMA_DMemData.Next;
		end
		else
		begin
			if GHojyoMA_DMemDataGCode.AsString = Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]) then
			begin
				MemAppend_Flg	:= false;
				Break;
			end
			else
				GHojyoMA_DMemData.Next;
		end;
	end;

	if MemAppend_Flg = true then
		GHojyoMA_DMemData.Append
	else
		GHojyoMA_DMemData.Edit;

	GHojyoMA_DMemDataMasterkbn.AsInteger		:= m_nMasterDivision;
	GHojyoMA_DMemDataSumKbn.AsInteger			:= 1;
	GHojyoMA_DMemDataRecordKbn.AsInteger		:= 0;
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		GHojyoMA_DMemDataGCode.AsString				:= Goukei_ETEdit_GCode.Text
	else
		GHojyoMA_DMemDataGCode.AsString				:= Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

	GHojyoMA_DMemDataRenChar.AsString			:= Goukei_ETEdit_RenChar.Text;
	GHojyoMA_DMemDataLongName.AsString			:= Goukei_ETEdit_LongName.Text;
	GHojyoMA_DMemDataSimpleName.AsString		:= Goukei_ETEdit_SimpleName.Text;
	GHojyoMA_DMemDataZipCode1.AsInteger			:= Goukei_ENEdit_ZipCode1.AsInteger;
	GHojyoMA_DMemDataZipCode2.AsInteger			:= Goukei_ENEdit_ZipCode2.AsInteger;
	GHojyoMA_DMemDataAddress1.AsString			:= Goukei_ETEdit_Address1.Text;
	GHojyoMA_DMemDataAddress2.AsString			:= Goukei_ETEdit_Address2.Text;
	GHojyoMA_DMemDataTelNo.AsString				:= Goukei_ETEdit_TelNo.Text;

// <205> start
    GHojyoMA_DMemDataUkeoiKbn.AsInteger         := Goukei_ENEdit_UkeoiKbn.AsInteger;   // 請負区分
    GHojyoMA_DMemDataFAXNo.AsString             := Goukei_ETEdit_FAXNo.Text;           // FAXNo
    GHojyoMA_DMemDatagaiyou.AsString            := Goukei_ETEdit_Gaiyou.Text;          // 工事概要
    GHojyoMA_DMemDataBIKO.AsString              := Goukei_ETEdit_BIKO.Text;            // 備考

    // 施主内部ｺｰﾄﾞ
    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
    begin
        GHojyoMA_DMemDataSesNCode.AsString         := Goukei_ETEdit_SeshuCode.Text;
    end
    else
    begin
		if Goukei_ENEdit_SeshuCode.Value <> 0 then
        begin
			GHojyoMA_DMemDataSesNCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_SeshuCode.Value)]);
        end
		else
		begin
			if Goukei_ENEdit_SeshuCode.InputFlag = true then
				GHojyoMA_DMemDataSesNCode.AsString	:= ''
			else
				GHojyoMA_DMemDataSesNCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_SeshuCode.Value)]);
		end;
    end;

    // 施行部門
	if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
		GHojyoMA_DMemDataSekouBmnCode.AsString		:= Goukei_ETEdit_SekouBmnCode.Text
	else
	begin
		if Goukei_ENEdit_SekouBmnCode.Value <> 0 then
        begin
			GHojyoMA_DMemDataSekouBmnCode.AsString		:= Format ('%.16d', [Trunc (Goukei_ENEdit_SekouBmnCode.Value)])
        end
		else
        begin
            if Goukei_ENEdit_SekouBmnCode.InputFlag = true then
			    GHojyoMA_DMemDataSekouBmnCode.AsString	:= ''
            else
				GHojyoMA_DMemDataSekouBmnCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_SekouBmnCode.Value)]);
        end;
	end;


    // 施行担当者
	if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
		GHojyoMA_DMemDataSekouPersonCode.AsString	:= Goukei_ETEdit_SekouPersonCode.Text
	else
	begin
		if Goukei_ENEdit_SekouPersonCode.Value <> 0 then
			GHojyoMA_DMemDataSekouPersonCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_SekouPersonCode.Value)])
		else
		begin
			if Goukei_ENEdit_SekouPersonCode.InputFlag = true then
				GHojyoMA_DMemDataSekouPersonCode.AsString	:= ''
			else
				GHojyoMA_DMemDataSekouPersonCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_SekouPersonCode.Value)])
		end;
	end;

// <205> end

// <SEI> ADD start
    // 請求先ｺｰﾄﾞ
	         									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
    GHojyoMA_DMemDataSeikyusakiGCode.AsString := GetInputGCode(Goukei_ETEdit_SeikyusakiCd,
					            						Goukei_ENEdit_SeikyusakiCd);

    // 一括請求先工事ｺｰﾄﾞ
	         									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
    GHojyoMA_DMemDataSeikyuKoujiGCode.AsString := GetInputGCode(Goukei_ETEdit_SeikyuKoujiCd,
					            						Goukei_ENEdit_SeikyuKoujiCd);

// <SEI> ADD end

    // 社員
	if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
		GHojyoMA_DMemDataPersonCode.AsString	:= Goukei_ETEdit_PersonCode.Text
	else
	begin
		if Goukei_ENEdit_PersonCode.Value <> 0 then
			GHojyoMA_DMemDataPersonCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)])
		else
		begin
			if Goukei_ENEdit_PersonCode.InputFlag = true then
				GHojyoMA_DMemDataPersonCode.AsString	:= ''
			else
				GHojyoMA_DMemDataPersonCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)])
		end;
	end;
    // 取引先（受注先）
	if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
		GHojyoMA_DMemDataCostomerCode.AsString	:= Goukei_ETEdit_CustomerCode.Text
	else
	begin
		if Goukei_ENEdit_CustomerCode.Value <> 0 then
			GHojyoMA_DMemDataCostomerCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)])
		else
		begin
			if Goukei_ENEdit_CustomerCode.InputFlag = true then
				GHojyoMA_DMemDataCostomerCode.AsString	:= ''
			else
				GHojyoMA_DMemDataCostomerCode.AsString	:= Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)])
		end;
	end;
    // <144>↓
                                            // 受注先名
    GHojyoMA_DMemDataCostomerName.AsString := Goukei_ETEdit_CustomerName.Text;
    // <144>

	GHojyoMA_DMemDataBmnCode.AsString	:= '';

	if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
		GHojyoMA_DMemDataBmnCode.AsString		:= Goukei_ETEdit_BmnCode.Text
	else
	begin
		if Goukei_ENEdit_BmnCode.Value <> 0 then
			GHojyoMA_DMemDataBmnCode.AsString		:= Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)])
		else
// <239> MOD start
//			GHojyoMA_DMemDataBmnCode.AsString	:= '';
        begin
            if Goukei_ENEdit_BmnCode.InputFlag = true then
			    GHojyoMA_DMemDataBmnCode.AsString		:= ''
            else
			    GHojyoMA_DMemDataBmnCode.AsString       := Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)]);

        end;
// <239> MOD end
	end;

//	GHojyoMA_DMemDataSalesBase.AsInteger		:= Goukei_ENEdit_SalesBase.AsInteger;
	GHojyoMA_DMemDataSalesBase.AsInteger		:= 0;
//	GHojyoMA_DMemDataHaifuKbn.AsInteger			:= Goukei_ENEdit_HaifuKbn.AsInteger;
	GHojyoMA_DMemDataHaifuKbn.AsInteger			:= 0;
	GHojyoMA_DMemDataRootKbn.AsInteger			:= Goukei_ENEdit_RootKbn.AsInteger;

	if Goukei_EDEdit_StartDate.Value <> 0 then
		GHojyoMA_DMemDataStartDate.AsDateTime		:= Goukei_EDEdit_StartDate.AsDateTime
	else
		GHojyoMA_DMemDataStartDate.Value			:= 0;

	if Goukei_EDEdit_EndDate.Value <> 0 then
		GHojyoMA_DMemDataEndDate.AsDateTime		:= Goukei_EDEdit_EndDate.AsDateTime
	else
		GHojyoMA_DMemDataEndDate.Value			:= 0;

	if Goukei_EDEdit_JStartDate.Value <> 0 then
		GHojyoMA_DMemDataJStartDate.AsDateTime		:= Goukei_EDEdit_JStartDate.AsDateTime
	else
		GHojyoMA_DMemDataJStartDate.Value			:= 0;

	if Goukei_EDEdit_JEndDate.Value <> 0 then
		GHojyoMA_DMemDataJEndDate.AsDateTime		:= Goukei_EDEdit_JEndDate.AsDateTime
	else
		GHojyoMA_DMemDataJEndDate.Value			:= 0;

	if Goukei_EDEdit_FinishDate.Value <> 0 then
		GHojyoMA_DMemDataFinishDate.AsDateTime	:= Goukei_EDEdit_FinishDate.AsDateTime
	else
		GHojyoMA_DMemDataFinishDate.Value	:= 0;

	GHojyoMA_DMemData.Post;
	MemPost_Sw		:= 0;
end;


//************************************************************************
//	Proccess	:	工事データ書き込み（１件）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:   strGCode : 外部ｺｰﾄﾞ
//                  iSumKbn  : 実在(0)・合計(1)区分
//                  bSw      : 詳細 (true) / 一覧 (false)
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//************************************************************************
function TJNTCRP018001f.fnDataWrite(strGCode: String; iSumKbn: Integer; bSw: Boolean): Boolean;
var
	HojyoMA_New   : Boolean;
	KojiInfo_New  : Boolean;
	QueryMaster	  : TMQuery;
    QueryHojyoMA  : TMQuery;
	QueryKojiInfo : TMQuery;
    dqMasterData  : TMQuery;
    i             : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
    strCode		  : String;  				// <SEI> ADD
    strName		  : String;					// <SEI> ADD
    exNCode		  : Extended;               // <SEI> ADD
begin

//	QueryMaster   :=  nil;
//	QueryKojiInfo :=  nil;
    exNCode := 0;  //<SEI> ADD
    // MQueryの構築
    QueryMaster   := TMQuery.Create( Self );
    QueryHojyoMA  := TMQuery.Create( Self );
    QueryKojiInfo := TMQuery.Create( Self );
    dqMasterData  := TMQuery.Create( Self );
	try
{
        // MQueryの構築
		QueryMaster   := TMQuery.Create( Self );
        QueryHojyoMA  := TMQuery.Create( Self );
        QueryKojiInfo := TMQuery.Create( Self );
        dqMasterData  := TMQuery.Create( Self );
}
        //	DBとMQueryの接続
		MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryMaster   );
        MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryHojyoMA  );
		MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryKojiInfo );

        // 工事ﾃﾞｰﾀ読込(自社) ﾚｺｰﾄﾞの存在ﾁｪｯｸ
		if ( fnDataRead (strGCode, iSumKbn, 1) <> 0 ) then
		begin
			Result := false;
			Exit;
		end;

		HojyoMA_New		:=  HojyoMA_DMQuery.Eof;    // ture: 新規挿入 false: 追加更新
		KojiInfo_New    :=  KojiInfo_DMQuery.Eof;   // ture: 新規挿入 false: 追加更新

        // ﾄﾗﾝｻﾞｸｼｮﾝの開始
		MDataModule^.BeginTran (dbCorp_Select);

        // -------------------------------------------------------------------------
        //  ｸﾞﾙｰﾌﾟ管理処理 <041>
        //
        //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
        //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
        // -------------------------------------------------------------------------
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 親会社DBのﾄﾗﾝｻﾞｸｼｮﾝ開始
            MDataModule^.BeginTran ( m_SyncMaster.m_cPDBSelect ) ;

            QueryHojyoMA.Close();
            QueryKojiInfo.Close();

            MDataModule^.SetDBInfoToQuery( m_SyncMaster.m_cPDBSelect, QueryHojyoMA  );
    		MDataModule^.SetDBInfoToQuery( m_SyncMaster.m_cPDBSelect, QueryKojiInfo );
        end;

		// 基本情報
		with QueryHojyoMA do
		begin
			try
                RequestLive :=  false;
				Close();
				SQL.Clear();

                // ---------------------
                //      新規追加
                // ---------------------
				if ( HojyoMA_New = true ) then
				begin
                    SQL.Add('INSERT INTO HojyoMA (  ');
                    SQL.Add('    MasterKbn          ');
                    SQL.Add('   ,SumKbn             ');
                    SQL.Add('   ,RDelKbn            ');
                    SQL.Add('   ,GCode              ');
                    SQL.Add('   ,Renso              ');
                    SQL.Add('   ,LongName           ');
                    SQL.Add('   ,SimpleName         ');
                    SQL.Add('   ,HojyoKbn1          ');
                    SQL.Add('   ,HojyoKbn2          ');
                    SQL.Add('   ,BunCode            ');
                    SQL.Add('   ,BSBumonNCode       ');
                    SQL.Add('   ,CostRate           ');
                    SQL.Add('   ,TStartDate         ');
                    SQL.Add('   ,TEndDate           ');
                    SQL.Add('   ,LimitSum           ');
                    SQL.Add('   ,MoveKbn            ');
                    SQL.Add('   ,FinishDate         ');
                    SQL.Add('   ,RootKbn            ');

                    // <102>
                    if ( UpdFreeFlg = true ) then
                    begin
                        SQL.Add('   ,VFree1         ');
                        SQL.Add('   ,VFree2         ');
                        SQL.Add('   ,VFree3         ');
                        SQL.Add('   ,VFree4         ');
                        SQL.Add('   ,VFree5         ');
                        SQL.Add('   ,VFree6         ');
                        SQL.Add('   ,VFree7         ');
                        SQL.Add('   ,VFree8         ');
                        SQL.Add('   ,VFree9         ');
                        SQL.Add('   ,VFree10        ');
                        SQL.Add('   ,NFree1         ');
                        SQL.Add('   ,NFree2         ');
                        SQL.Add('   ,NFree3         ');
                        SQL.Add('   ,NFree4         ');
                        SQL.Add('   ,NFree5         ');
                        SQL.Add('   ,NFree6         ');
                        SQL.Add('   ,NFree7         ');
                        SQL.Add('   ,NFree8         ');
                        SQL.Add('   ,NFree9         ');
                        SQL.Add('   ,NFree10        ');

//<FREE_2> DEL                        if ( freeItem.DFree1 > 0 ) then
                            SQL.Add('   ,DFree1     ');
//<FREE_2> DEL                        if ( freeItem.DFree2 > 0 ) then
                            SQL.Add('   ,DFree2     ');
//<FREE_2> DEL                        if ( freeItem.DFree3 > 0 ) then
                            SQL.Add('   ,DFree3     ');
                    end;

                    SQL.Add('   ,SegNCode1          ');
                    SQL.Add('   ,SegNCode2          ');
                    SQL.Add('   ,SegNCode3          ');
                    SQL.Add('   ,SegNCode4          ');
                    SQL.Add('   ,SegNCode5          ');
                    SQL.Add('   ,SegNCode6          ');
                    SQL.Add('   ,SegNCode7          ');
                    SQL.Add('   ,SegNCode8          ');
                    SQL.Add('   ,SegNCode9          ');
                    SQL.Add('   ,SegNCode10         ');
                    SQL.Add('   ,BunruiNCode1       ');
                    SQL.Add('   ,BunruiNCode2       ');
                    SQL.Add('   ,BunruiNCode3       ');
                    SQL.Add('   ,BunruiNCode4       ');
                    SQL.Add('   ,BunruiNCode5       ');
                    SQL.Add('   ,BunruiNCode6       ');
                    SQL.Add('   ,BunruiNCode7       ');
                    SQL.Add('   ,BunruiNCode8       ');
                    SQL.Add('   ,BunruiNCode9       ');
                    SQL.Add('   ,BunruiNCode10      ');
                    SQL.Add('   ,UpdTantoNCode      '); // <202>
                    SQL.Add(') VALUES (             ');
                    SQL.Add('    :iMasterKbn        ');
                    SQL.Add('   ,:iSumKbn           ');
                    SQL.Add('   ,:iRecordKbn        ');
                    SQL.Add('   ,:strGCode          ');
                    SQL.Add('   ,:strRenChar        ');
                    SQL.Add('   ,:strLongName       ');
                    SQL.Add('   ,:strSimpleName     ');
                    SQL.Add('   ,0                  ');
                    SQL.Add('   ,0                  ');
                    SQL.Add('   ,0                  ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,0                  ');
                    SQL.Add('   ,:TStartDate        ');
                    SQL.Add('   ,:TEndDate          ');
                    SQL.Add('   ,0                  ');
                    SQL.Add('   ,0                  ');

                    if ( iSumKbn = 1 ) then
                    begin
                        if ( GHojyoMA_DMemDataFinishDate.Value <> 0 ) then
                            SQL.Add('   ,:Finish    ')
                        else
                            SQL.Add('   ,NULL       ');
                        SQL.Add('   ,:iRootKbn      ');

                        // 付箋ｺﾒﾝﾄ追加
//<271> DEL                        SetLength(m_aCmnt_Gou,Length(m_aCmnt_Gou)+1);
//<271> ADD St
                        New(pCmnt);
                        pCmnt.Code := '';
                        pCmnt.Cmnt := '';
                        m_aCmnt_Gou.Add(pCmnt);
//<271> ADD Ed
                    end
                    else
                    begin
                        SQL.Add('   ,NULL           ');
                        SQL.Add('   ,0              ');

                        // 付箋ｺﾒﾝﾄ追加
//<271> DEL                        SetLength(m_aCmnt_Jitu,Length(m_aCmnt_Jitu)+1);
//<271> ADD St
                        New(pCmnt);
                        pCmnt.Code := '';
                        pCmnt.Cmnt := '';
                        m_aCmnt_Jitu.Add(pCmnt);
//<271> ADD Ed
                    end;

                    // <102>
                    if ( UpdFreeFlg = true ) then
                    begin
                        SQL.Add('   ,:VFree1        ');
                        SQL.Add('   ,:VFree2        ');
                        SQL.Add('   ,:VFree3        ');
                        SQL.Add('   ,:VFree4        ');
                        SQL.Add('   ,:VFree5        ');
                        SQL.Add('   ,:VFree6        ');
                        SQL.Add('   ,:VFree7        ');
                        SQL.Add('   ,:VFree8        ');
                        SQL.Add('   ,:VFree9        ');
                        SQL.Add('   ,:VFree10       ');
                        SQL.Add('   ,:NFree1        ');
                        SQL.Add('   ,:NFree2        ');
                        SQL.Add('   ,:NFree3        ');
                        SQL.Add('   ,:NFree4        ');
                        SQL.Add('   ,:NFree5        ');
                        SQL.Add('   ,:NFree6        ');
                        SQL.Add('   ,:NFree7        ');
                        SQL.Add('   ,:NFree8        ');
                        SQL.Add('   ,:NFree9        ');
                        SQL.Add('   ,:NFree10       ');
//<FREE_2> MOD St
{
                        if ( freeItem.DFree1 > 0 ) then
                            SQL.Add('   ,:DFree1    ');
                        if ( freeItem.DFree2 > 0 ) then
                            SQL.Add('   ,:DFree2    ');
                        if ( freeItem.DFree3 > 0 ) then
                            SQL.Add('   ,:DFree3    ');
}
                        if ( freeItem.DFree1 > 0 ) then
                        begin
                            SQL.Add('   ,:DFree1    ');
                        end
                        else
                        begin
                            SQL.Add('   ,NULL    ');
                        end;
                        if ( freeItem.DFree2 > 0 ) then
                        begin
                            SQL.Add('   ,:DFree2    ');
                        end
                        else
                        begin
                            SQL.Add('   ,NULL    ');
                        end;
                        if ( freeItem.DFree3 > 0 ) then
                        begin
                            SQL.Add('   ,:DFree3    ');
                        end
                        else
                        begin
                            SQL.Add('   ,NULL    ');
                        end;
//<FREE_2> MOD Ed
                    end;

                    SQL.Add('   ,:SegNCode1         ');
                    SQL.Add('   ,:SegNCode2         ');
                    SQL.Add('   ,:SegNCode3         ');
                    SQL.Add('   ,:SegNCode4         ');
                    SQL.Add('   ,:SegNCode5         ');
                    SQL.Add('   ,:SegNCode6         ');
                    SQL.Add('   ,:SegNCode7         ');
                    SQL.Add('   ,:SegNCode8         ');
                    SQL.Add('   ,:SegNCode9         ');
                    SQL.Add('   ,:SegNCode10        ');
                    SQL.Add('   ,:BunruiNCode1      ');
                    SQL.Add('   ,:BunruiNCode2      ');
                    SQL.Add('   ,:BunruiNCode3      ');
                    SQL.Add('   ,:BunruiNCode4      ');
                    SQL.Add('   ,:BunruiNCode5      ');
                    SQL.Add('   ,:BunruiNCode6      ');
                    SQL.Add('   ,:BunruiNCode7      ');
                    SQL.Add('   ,:BunruiNCode8      ');
                    SQL.Add('   ,:BunruiNCode9      ');
                    SQL.Add('   ,:BunruiNCode10     ');
                    SQL.Add('   ,:UpdTantoNCode     '); // <202>
                    SQL.Add(')                      ');

                    SetFld('TStartDate').AsDateTime :=  m_cJNTArea.GetDEFDATE(1);
                    SetFld('TEndDate')  .AsDateTime :=  m_cJNTArea.GetDEFDATE(2);

				end
            // ---------------------
            //         更新
            // ---------------------
				else
				begin
                    SQL.Add('UPDATE HojyoMA SET                 ');
                    SQL.Add('    MasterKbn	= :iMasterKbn       ');
                    SQL.Add('   ,SumKbn		= :iSumKbn          ');
                    SQL.Add('   ,RDelKBN	= :iRecordKbn       ');
                    SQL.Add('   ,GCode		= :strGCode         ');
                    SQL.Add('   ,Renso  	= :strRenChar       ');
                    SQL.Add('   ,LongName	= :strLongName      ');
                    SQL.Add('   ,SimpleName	= :strSimpleName    ');

                    if ( iSumKbn = 1 ) then
                    begin
                        if ( GHojyoMA_DMemDataFinishDate.Value <> 0 ) then
                            SQL.Add('   ,FinishDate	= :Finish   ')
                        else
                            SQL.Add('   ,FinishDate = NULL      ');

                        SQL.Add('   ,RootKbn    = :iRootKbn     ');
                    end;

                    // <102>
                    if ( UpdFreeFlg = true ) then
                    begin
                        SQL.Add('   ,VFree1  = :VFree1          ');
                        SQL.Add('   ,VFree2  = :VFree2          ');
                        SQL.Add('   ,VFree3  = :VFree3          ');
                        SQL.Add('   ,VFree4  = :VFree4          ');
                        SQL.Add('   ,VFree5  = :VFree5          ');
                        SQL.Add('   ,VFree6  = :VFree6          ');
                        SQL.Add('   ,VFree7  = :VFree7          ');
                        SQL.Add('   ,VFree8  = :VFree8          ');
                        SQL.Add('   ,VFree9  = :VFree9          ');
                        SQL.Add('   ,VFree10 = :VFree10         ');
                        SQL.Add('   ,NFree1  = :NFree1          ');
                        SQL.Add('   ,NFree2  = :NFree2          ');
                        SQL.Add('   ,NFree3  = :NFree3          ');
                        SQL.Add('   ,NFree4  = :NFree4          ');
                        SQL.Add('   ,NFree5  = :NFree5          ');
                        SQL.Add('   ,NFree6  = :NFree6          ');
                        SQL.Add('   ,NFree7  = :NFree7          ');
                        SQL.Add('   ,NFree8  = :NFree8          ');
                        SQL.Add('   ,NFree9  = :NFree9          ');
                        SQL.Add('   ,NFree10 = :NFree10         ');
//<FREE_2> MOD St
{
                        if ( freeItem.DFree1 > 0 ) then
                            SQL.Add('   ,DFree1 = :DFree1       ');
                        if ( freeItem.DFree2 > 0 ) then
                            SQL.Add('   ,DFree2 = :DFree2       ');
                        if ( freeItem.DFree3 > 0 ) then
                            SQL.Add('   ,DFree3 = :DFree3       ');
}
                        if ( freeItem.DFree1 > 0 ) then
                        begin
                            SQL.Add('   ,DFree1 = :DFree1       ');
                        end
                        else
                        begin
                            SQL.Add('   ,DFree1 = NULL       ');
                        end;
                        if ( freeItem.DFree2 > 0 ) then
                        begin
                            SQL.Add('   ,DFree2 = :DFree2       ');
                        end
                        else
                        begin
                            SQL.Add('   ,DFree2 = NULL       ');
                        end;
                        if ( freeItem.DFree3 > 0 ) then
                        begin
                            SQL.Add('   ,DFree3 = :DFree3       ');
                        end
                        else
                        begin
                            SQL.Add('   ,DFree3 = NULL       ');
                        end;
//<FREE_2> MOD Ed
                    end;
//<286> ADD St
                    // 詳細画面または合計
                    if (bSw or (iSumKbn = 1)) then
                    begin
//<286> ADD Ed
                        SQL.Add('   ,BunruiNCode1  = :BunruiNCode1  ');
                        SQL.Add('   ,BunruiNCode2  = :BunruiNCode2  ');
                        SQL.Add('   ,BunruiNCode3  = :BunruiNCode3  ');
                        SQL.Add('   ,BunruiNCode4  = :BunruiNCode4  ');
                        SQL.Add('   ,BunruiNCode5  = :BunruiNCode5  ');
                        SQL.Add('   ,BunruiNCode6  = :BunruiNCode6  ');
                        SQL.Add('   ,BunruiNCode7  = :BunruiNCode7  ');
                        SQL.Add('   ,BunruiNCode8  = :BunruiNCode8  ');
                        SQL.Add('   ,BunruiNCode9  = :BunruiNCode9  ');
                        SQL.Add('   ,BunruiNCode10 = :BunruiNCode10 ');
                        SQL.Add('   ,SegNCode1	   = :SegNCode1     ');
                        SQL.Add('   ,SegNCode2	   = :SegNCode2     ');
                        SQL.Add('   ,SegNCode3     = :SegNCode3     ');
                        SQL.Add('   ,SegNCode4	   = :SegNCode4     ');
                        SQL.Add('   ,SegNCode5	   = :SegNCode5     ');
                        SQL.Add('   ,SegNCode6	   = :SegNCode6     ');
                        SQL.Add('   ,SegNCode7	   = :SegNCode7     ');
                        SQL.Add('   ,SegNCode8	   = :SegNCode8     ');
                        SQL.Add('   ,SegNCode9	   = :SegNCode9     ');
                        SQL.Add('   ,SegNCode10    = :SegNCode10    ');
                    end;  //<286> ADD
                    SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode '); // <202>
                    SQL.Add('WHERE  (MasterKbn = :iMasterKbn)   ');
                    SQL.Add('  AND  (RDelKbn   = 0)             ');
                    SQL.Add('  AND  (SumKbn    = :iSumKbn)      ');
                    SQL.Add('  AND  (GCode     = :strGCode)     ');
                end;

                SetFld('iMasterKbn')    .AsInteger  :=  m_nMasterDivision;
                SetFld('iSumKbn')       .AsInteger	:=  iSumKbn;
                SetFld('iRecordKbn')    .AsInteger  :=  0;

                if ( iSumKbn = 0 ) then
                begin
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
                        SetFld('strGCode').AsString :=  JHojyoMA_DMemDataGCode.AsString
                    else
                    begin
                        if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
                            SetFld('strGCode').AsString :=  Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
                        else
                            SetFld('strGCode').AsString	:=  '';
                    end;
                    { <207> ↓
                    SetFld('strRenChar')    .AsString	:=  JHojyoMA_DMemDataRenChar.AsString;
                    SetFld('strLongName')   .AsString	:=  JHojyoMA_DMemDataLongName.AsString;
                    SetFld('strSimpleName') .AsString   :=  JHojyoMA_DMemDataSimpleName.AsString;
                      <207> ↑}
                    // <207> ↓
                    SetFld('strRenChar')    .AsString	:=
                    	StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataRenChar.AsString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
                    SetFld('strLongName')   .AsString	:=
                    	StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataLongName.AsString), #13#10, '', [rfReplaceAll,rfIgnoreCase]);
                    SetFld('strSimpleName') .AsString   :=
                    	StringReplace(AdjustLineBreaks(JHojyoMA_DMemDataSimpleName.AsString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
                    // <207> ↑
                    // ﾌﾘｰ情報ﾊﾟﾗﾒｰﾀｾｯﾄ<102>
                    if ( UpdFreeFlg = true ) then
                    begin
                        ParamByName('VFree1')   .AsString	:=  freeItem.VFree1;
                        ParamByName('VFree2')   .AsString	:=  freeItem.VFree2;
                        ParamByName('VFree3')   .AsString	:=  freeItem.VFree3;
                        ParamByName('VFree4')   .AsString	:=  freeItem.VFree4;
                        ParamByName('VFree5')   .AsString	:=  freeItem.VFree5;
                        ParamByName('VFree6')   .AsString	:=  freeItem.VFree6;
                        ParamByName('VFree7')   .AsString	:=  freeItem.VFree7;
                        ParamByName('VFree8')   .AsString	:=  freeItem.VFree8;
                        ParamByName('VFree9')   .AsString	:=  freeItem.VFree9;
                        ParamByName('VFree10')  .AsString	:=  freeItem.VFree10;
                        ParamByName('NFree1')   .AsCurrency :=  freeItem.NFree1;
                        ParamByName('NFree2')   .AsCurrency	:=  freeItem.NFree2;
                        ParamByName('NFree3')   .AsCurrency	:=  freeItem.NFree3;
                        ParamByName('NFree4')   .AsCurrency	:=  freeItem.NFree4;
                        ParamByName('NFree5')   .AsCurrency	:=  freeItem.NFree5;
                        ParamByName('NFree6')   .AsCurrency	:=  freeItem.NFree6;
                        ParamByName('NFree7')   .AsCurrency	:=  freeItem.NFree7;
                        ParamByName('NFree8')   .AsCurrency	:=  freeItem.NFree8;
                        ParamByName('NFree9')   .AsCurrency	:=  freeItem.NFree9;
                        ParamByName('NFree10')  .AsCurrency	:=  freeItem.NFree10;

                        if ( freeItem.DFree1 > 0 ) then
                            ParamByName('DFree1').AsDateTime    :=  freeItem.DFree1;
                        if ( freeItem.DFree2 > 0 ) then
                            ParamByName('DFree2').AsDateTime	:=  freeItem.DFree2;
                        if ( freeItem.DFree3 > 0 ) then
                            ParamByName('DFree3').AsDateTime	:= freeItem.DFree3;
                    end;
//<286> ADD St
                    // 新規または既存且つ詳細画面
                    if (HojyoMA_New or ((HojyoMA_New = false) and bSw)) then
                    begin
//<286> ADD Ed
                        for i := 1 to  10 do
                        begin
                            // ｾｸﾞﾒﾝﾄ情報
    //<255> MOD St
    {
                            ParamByName('SegNCode' + IntToStr(i)).AsFloat   :=
                                fnGetNCODE(TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataSegCode' + IntToStr(i))).AsString,
                                           m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute);
    }
                            ParamByName('SegNCode' + IntToStr(i)).AsString   :=
                                FormatFloat('0',fnGetNCODE(TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataSegCode' + IntToStr(i))).AsString,
                                           m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute));

                            // 分類情報
    {
                            ParamByName('BunruiNCode' + IntToStr(i)).AsFloat    :=
                                fnGetNCODE(TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataBunruiCode' + IntToStr(i))).AsString,
                                           m_arAdoptInfo_PBr [i].nMasterDivision,m_arAdoptInfo_PBr [i].nCodeAttribute);
    }
                            ParamByName('BunruiNCode' + IntToStr(i)).AsString    :=
                                FormatFloat('0',fnGetNCODE(TStringField(MJSFindCtrl(Self, 'JHojyoMA_DMemDataBunruiCode' + IntToStr(i))).AsString,
                                           m_arAdoptInfo_PBr [i].nMasterDivision,m_arAdoptInfo_PBr [i].nCodeAttribute));
    //<255> MOD Ed
                        end;
                    end;  //<286> ADD
                end
                else
                begin


                    if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
                        SetFld('strGCode').AsString :=  GHojyoMA_DMemDataGCode.AsString
                    else
                    begin
                        if ( GHojyoMA_DMemDataGCode.AsString <> '' ) then
                            SetFld('strGCode').AsString :=  Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
                        else
                            SetFld('strGCode').AsString :=  '';
                    end;
                    { <207> ↓
                    SetFld('strRenChar')    .AsString	:=  GHojyoMA_DMemDataRenChar.AsString;
                    SetFld('strLongName')   .AsString	:=  GHojyoMA_DMemDataLongName.AsString;
                    SetFld('strSimpleName') .AsString   :=  GHojyoMA_DMemDataSimpleName.AsString;
                      <207> ↑}
                    // <207> ↓
                    SetFld('strRenChar')    .AsString	:=
                    	StringReplace(AdjustLineBreaks(GHojyoMA_DMemDataRenChar.AsString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
                    SetFld('strLongName')   .AsString	:=
                    	StringReplace(AdjustLineBreaks(GHojyoMA_DMemDataLongName.AsString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
                    SetFld('strSimpleName') .AsString   :=
                    	StringReplace(AdjustLineBreaks(GHojyoMA_DMemDataSimpleName.AsString), #13#10, '',[rfReplaceAll,rfIgnoreCase]);
                    // <207> ↑
                    if ( GHojyoMA_DMemDataFinishDate.Value <> 0 ) then
                        SetFld('Finish').AsDateTime     :=  GHojyoMA_DMemDataFinishDate.AsDateTime;
                    SetFld('iRootKbn').AsInteger		:=  GHojyoMA_DMemDataRootKbn.AsInteger;

                    for i := 1 to  10 do
                    begin
//<255> MOD St
{
                        // ｾｸﾞﾒﾝﾄ情報
                        ParamByName('SegNCode' + IntToStr(i)).AsFloat       :=  0;
                        //分類情報
                        ParamByName('BunruiNCode' + IntToStr(i)).AsFloat    :=  0;
}
                        // ｾｸﾞﾒﾝﾄ情報
                        ParamByName('SegNCode' + IntToStr(i)).AsString       :=  '0';
                        //分類情報
                        ParamByName('BunruiNCode' + IntToStr(i)).AsString    :=  '0';
//<255> MOD Ed
                    end;
                end;

                ParamByName('UpdTantoNCode').AsFloat    :=  m_TantoNCode; // <202>

                if ( ExecSQL = false ) then
                begin
                    ErrorMessageDsp(HojyoMA_DMQuery);
                    // ﾛｰﾙﾊﾞｯｸ(破棄)
                    MDataModule^.Rollback(dbCorp_Select);

                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then   // <172>
                    begin
                        // 親会社DBのﾛｰﾙﾊﾞｯｸ
                        MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                    end;

                    HojyoMA_DMQuery.Close;
                    Result  :=  false;
                    Exit;
                end;

                // ｺﾐｯﾄ(反映)
                // ここではｺﾐｯﾄしない<172>
                // <172>MDataModule^.Commit(dbCorp_Select);

                // <172> - ST
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_HojyoMA, 0) = false ) then
                    begin
                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( dbCorp_Select );
                        result := false;
                        Exit;
                    end;
                end;
                // <172> - ED

            // -----------------------------------------------------------------
            //      内部ｺｰﾄﾞ取得
            // -----------------------------------------------------------------
                Close();
                SQL.Clear();
                SQL.Add('select NCode from HojyoMA      ');
                SQL.Add('where  (MasterKbn = :pMKBN)    ');
                SQL.Add('  and  (RDelKbn   = 0)         ');
                SQL.Add('  and  (SumKbn    = :iSumKbn)  ');
                SQL.Add('  and  (GCode     = :strGCode) ');

                SetFld('pMKBN')     .AsInteger  :=  m_nMasterDivision;
                SetFld('iSumKbn')   .AsInteger  :=  iSumKbn;

                if ( iSumKbn = 0 ) then
                begin
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
                        SetFld('strGCode').AsString :=  JHojyoMA_DMemDataGCode.AsString
                    else
                    begin
                        if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
                            SetFld('strGCode').AsString :=  Format('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
                        else
                            SetFld('strGCode').AsString :=  '';
                    end;
                end
                else
                begin
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
                        SetFld('strGCode').AsString		:=  GHojyoMA_DMemDataGCode.AsString
                    else
                    begin
                        if ( GHojyoMA_DMemDataGCode.AsString <> '' ) then
                            SetFld('strGCode').AsString :=  Format('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
                        else
                            SetFld('strGCode').AsString :=  '';
                    end;
                end;

                Open();

                if ( Eof = false ) then
                begin
                    uvNCODE :=  GetFld('NCode').AsFloat;

                    if ( iSumKbn = 0 ) then
                    begin
                        JHojyoMA_DMemData.Edit;
                        JHojyoMA_DMemDataNCode.AsInteger    :=  GetFld('NCode').AsInteger;
                        MemPost_Sw  :=  1;
                        JHojyoMA_DMemData.Post;
                        MemPost_Sw  :=  0;
                    end
                    else
                    begin
                        GHojyoMA_DMemData.Edit;
                        GHojyoMA_DMemDataNCode.AsInteger    :=  GetFld('NCode').AsInteger;
                        MemPost_Sw  :=  1;
                        GHojyoMA_DMemData.Post;
                        MemPost_Sw  :=  0;
                    end;
                end;
			except
				ShowMessage('HojyoMA Write Error!');
                // ↓↓↓<172>
                // ﾛｰﾙﾊﾞｯｸ(破棄)
                MDataModule^.Rollback(dbCorp_Select);

                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 親会社DBのﾛｰﾙﾊﾞｯｸ
                    MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                end;

                HojyoMA_DMQuery.Close;
                Result  :=  false;
                Exit;
                // ↑↑↑<172>
			end;
		end;


        // ---------------------
		//      詳細情報
        // ---------------------
        if not (( KojiInfo_New = False ) and (bSw = False)) then  //一覧からのUpdateでなければ、書き込む  <262> ADD
        begin                                                                                           //<262> ADD

		with QueryKojiInfo do
		begin
			try
                RequestLive :=  false;
				Close();
				SQL.Clear();

            // ---------------------
            //      新規追加
            // ---------------------
				if ( KojiInfo_New = true ) then
				begin
                    SQL.Add('INSERT INTO KojiInfo ( ');
                    SQL.Add('    MasterKbn          ');
                    SQL.Add('   ,NCode              ');
                    SQL.Add('   ,ZipCode1           ');
                    SQL.Add('   ,ZipCode2           ');
                    SQL.Add('   ,BarCode            ');
                    SQL.Add('   ,Address1           ');
                    SQL.Add('   ,Address2           ');
                    SQL.Add('   ,TelNo              ');
                    SQL.Add('   ,PersonNCode        ');
                    SQL.Add('   ,CostomerNCode      ');
                    SQL.Add('   ,BmnNCode           ');
                    SQL.Add('   ,YoteiDateST        ');
                    SQL.Add('   ,YoteiDateEN        ');
                    SQL.Add('   ,ScheDateST         ');
                    SQL.Add('   ,ScheDateEN         ');
                    SQL.Add('   ,Seg1NCode          ');
                    SQL.Add('   ,Seg2NCode          ');
                    SQL.Add('   ,Seg3NCode          ');
                    SQL.Add('   ,Seg4NCode          ');
                    SQL.Add('   ,Seg5NCode          ');
                    SQL.Add('   ,Seg6NCode          ');
                    SQL.Add('   ,Seg7NCode          ');
                    SQL.Add('   ,Seg8NCode          ');
                    SQL.Add('   ,Seg9NCode          ');
                    SQL.Add('   ,Seg10NCode         ');
                    SQL.Add('   ,Prj1NCode          ');
                    SQL.Add('   ,Prj2NCode          ');
                    SQL.Add('   ,Prj3NCode          ');
                    SQL.Add('   ,Prj4NCode          ');
                    SQL.Add('   ,Prj5NCode          ');
                    SQL.Add('   ,Prj6NCode          ');
                    SQL.Add('   ,Prj7NCode          ');
                    SQL.Add('   ,Prj8NCode          ');
                    SQL.Add('   ,Prj9NCode          ');
                    SQL.Add('   ,Prj10NCode         ');
                    SQL.Add('   ,Prj1SubNCode       ');
                    SQL.Add('   ,Prj2SubNCode       ');
                    SQL.Add('   ,Prj3SubNCode       ');
                    SQL.Add('   ,Prj4SubNCode       ');
                    SQL.Add('   ,Prj5SubNCode       ');
                    SQL.Add('   ,Prj6SubNCode       ');
                    SQL.Add('   ,Prj7SubNCode       ');
                    SQL.Add('   ,Prj8SubNCode       ');
                    SQL.Add('   ,Prj9SubNCode       ');
                    SQL.Add('   ,Prj10SubNCode      ');
                    SQL.Add('   ,Hoj1NCode          ');
                    SQL.Add('   ,Hoj2NCode          ');
                    SQL.Add('   ,Hoj3NCode          ');
                    SQL.Add('   ,Hoj4NCode          ');
                    SQL.Add('   ,Hoj5NCode          ');
                    SQL.Add('   ,SalesBase          ');
                    SQL.Add('   ,HaifuKbn           ');
                    SQL.Add('   ,PartKbn            ');
                    SQL.Add('   ,PtnNCode           ');
                    SQL.Add('   ,DetailKbn1         ');
                    SQL.Add('   ,DetailKbn2         ');
                    SQL.Add('   ,Class_NCode1       ');
                    SQL.Add('   ,Class_NCode2       ');
                    SQL.Add('   ,Class_NCode3       ');
                    SQL.Add('   ,Class_NCode4       ');
                    SQL.Add('   ,Class_NCode5       ');
                    SQL.Add('   ,CostomerName       ');
                    SQL.Add('   ,SalesKmkCd         ');
                    SQL.Add('   ,Remarks            ');
// <205> ADD start
                    SQL.Add('   ,gaiyou             ');         // 概要
                    SQL.Add('   ,SesNCode           ');         // 施主内部ｺｰﾄﾞ
                    SQL.Add('   ,UkeoiKbn           ');         // 請負区分
                    SQL.Add('   ,FAXNo              ');         // FAX番号
                    SQL.Add('   ,SeiBmnNCode        ');         // 施行部門内部コード
                    SQL.Add('   ,SeiTanNCode        ');         // 施行担当者内部コード
// <205> ADD end
                    SQL.Add('   ,PartPattern        ');         // 税込／税抜 <TAX> ADD
// <SEI> ADD start
                    if IsSeikyuYoteiUse then
                    begin
                        SQL.Add('   ,SeikyuCode         ');         // 請求先内部コード
                        SQL.Add('   ,IkkatuSeikyuCode   ');         // 一括請求先工事内部コード
                    end;
// <SEI> ADD end
                    SQL.Add(') VALUES (             ');
                    SQL.Add('    :iMasterKbn        ');
                    SQL.Add('   ,:strNCode          ');
                    SQL.Add('   ,:iZipCode1         ');
                    SQL.Add('   ,:iZipCode2         ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,:strAddress1       ');
                    SQL.Add('   ,:strAddress2       ');
                    SQL.Add('   ,:strTelNo          ');
                    SQL.Add('   ,:strPersonCode     ');
                    SQL.Add('   ,:strCostomerCode   ');
                    SQL.Add('   ,:strBmnCode        ');

                    // 詳細からの書込
                    if ( bSw = true ) then
                    begin
                        if ( iSumKbn = 0 ) then
                        begin
                            if ( JHojyoMA_DMemDataStartDate.Value <> 0 ) then
                                SQL.Add('   ,:YoteiDateST       ')
                            else
                                SQL.Add('   ,null               ');

                            if ( JHojyoMA_DMemDataEndDate.Value <> 0 ) then
                                SQL.Add('   ,:YoteiDateEN       ')
                            else
                                SQL.Add('   ,null               ');

                            if ( JHojyoMA_DMemDataJStartDate.Value <> 0 ) then
                                SQL.Add('   ,:ScheDateST        ')
                            else
                                SQL.Add('   ,null               ');

                            if ( JHojyoMA_DMemDataJEndDate.Value <> 0 ) then
                                SQL.Add('   ,:ScheDateEN        ')
                            else
                                SQL.Add('   ,null               ');
                         end
                         else
                         begin
                            if ( GHojyoMA_DMemDataStartDate.Value <> 0 ) then
                                SQL.Add('   ,:YoteiDateST       ')
                            else
                                SQL.Add('   ,null               ');

                            if ( GHojyoMA_DMemDataEndDate.Value <> 0 ) then
                                SQL.Add('   ,:YoteiDateEN       ')
                            else
                                SQL.Add('   ,null               ');

                            if ( GHojyoMA_DMemDataJStartDate.Value <> 0 ) then
                                SQL.Add('   ,:ScheDateST        ')
                            else
                                SQL.Add('   ,null               ');

                            if ( GHojyoMA_DMemDataJEndDate.Value <> 0 ) then
                                SQL.Add('   ,:ScheDateEN        ')
                            else
                                SQL.Add('   ,null               ');
                         end;
                    end
                    else
                    begin
                        if ( KojiInfo_DMQuery.GetFld('YoteiDateST').Value <> 0 ) then
                            SQL.Add('   ,:YoteiDateST           ')
                        else
                            SQL.Add('   ,null                   ');

                        if ( KojiInfo_DMQuery.GetFld('YoteiDateEN').Value <> 0 ) then
                            SQL.Add('   ,:YoteiDateEN           ')
                        else
                            SQL.Add('   ,null                   ');

                        if ( KojiInfo_DMQuery.GetFld('ScheDateST').Value <> 0 ) then
                            SQL.Add('   ,:ScheDateST            ')
                        else
                            SQL.Add('   ,null                   ');

                        if ( KojiInfo_DMQuery.GetFld('ScheDateEN').Value <> 0 ) then
                            SQL.Add('   ,:ScheDateEN            ')
                        else
                            SQL.Add('   ,null                   ');
                    end;

                    SQL.Add(',0,0,0,0,0,0,0,0,0,0,0 ');
                    SQL.Add(',0,0,0,0,0,0,0,0,0,0,0 ');
                    SQL.Add(',0,0,0,0,0,0,0,0,0,0,0 ');
                    SQL.Add(',0,0,:iSalesBase       ');
                    SQL.Add('   ,:iHaifuKbn         ');
                    SQL.Add('   ,:iPartKbn          ');
                    SQL.Add('   ,:iPtnNCode         ');
                    SQL.Add('   ,:iDetailKbn1       ');
                    SQL.Add('   ,:iDetailKbn2       ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,''''               ');
                    SQL.Add('   ,:strCostomerName   ');
                    SQL.Add('   ,:iSalesKmkCd       ');
                    SQL.Add('   ,:Remarks           ');
// <205> ADD start
                    SQL.Add('   ,:strgaiyou         ');
                    SQL.Add('   ,:iSesNCode         ');
                    SQL.Add('   ,:iUkeoiKbn         ');
                    SQL.Add('   ,:strFAXNo          ');
                    SQL.Add('   ,:iSeiBmnNCode      ');
                    SQL.Add('   ,:iSeiTanNCode      ');
// <205> ADD end
                    SQL.Add('   ,:PartPattern      ');  //<TAX> ADD
// <SEI> ADD start
                    if IsSeikyuYoteiUse then
                    begin
                        SQL.Add('   ,:iSeikyuCode      	');
                        SQL.Add('   ,:iIkkatuSeikyuCode ');
                    end;
// <SEI> ADD end
                    SQL.Add(')                      ');
				end
            // ---------------------
            //          更新
            // ---------------------
				else
				begin
                    SQL.Add('UPDATE KojiInfo SET                    ');
                    SQL.Add('    MasterKbn	   = :iMasterKbn        ');
                    SQL.Add('   ,ZipCode1	   = :iZipCode1         ');
                    SQL.Add('   ,ZipCode2	   = :iZipCode2         ');
                    SQL.Add('   ,Address1	   = :strAddress1       ');
                    SQL.Add('   ,Address2	   = :strAddress2       ');
                    SQL.Add('   ,TelNo		   = :strTelNo          ');
                    SQL.Add('   ,PersonNCode   = :strPersonCode     ');
                    SQL.Add('   ,CostomerNCode = :strCostomerCode   ');
                    SQL.Add('   ,BmnNCode	   = :strBmnCode        ');
                    SQL.Add('   ,SalesBase	   = :iSalesBase        ');
                    SQL.Add('   ,HaifuKbn	   = :iHaifuKbn         ');
                    SQL.Add('   ,PartKbn	   = :iPartKbn          ');
                    SQL.Add('   ,PtnNCode	   = :iPtnNCode         ');
                    SQL.Add('   ,DetailKbn1	   = :iDetailKbn1       ');
                    SQL.Add('   ,DetailKbn2	   = :iDetailKbn2       ');

                    // 詳細からの書込
                    if ( bSw = true ) then
                    begin
                        if ( iSumKbn = 0 ) then
                        begin
                            if ( JHojyoMA_DMemDataStartDate.Value <> 0 ) then
                                SQL.Add('   ,YoteiDateST = :YoteiDateST ')
                            else
                                SQL.Add('   ,YoteiDateST = null         ');

                            if ( JHojyoMA_DMemDataEndDate.Value <> 0 ) then
                                SQL.Add('   ,YoteiDateEN = :YoteiDateEN ')
                            else
                                SQL.Add('   ,YoteiDateEN = null         ');

                            if ( JHojyoMA_DMemDataJStartDate.Value <> 0 ) then
                                SQL.Add('   ,ScheDateST	 = :ScheDateST  ')
                            else
                                SQL.Add('   ,ScheDateST	 = null         ');

                            if ( JHojyoMA_DMemDataJEndDate.Value <> 0 ) then
                                SQL.Add('   ,ScheDateEN	 = :ScheDateEN  ')
                            else
                                SQL.Add('   ,ScheDateEN	 = null         ');
                        end
                        else
                        begin
                            if ( GHojyoMA_DMemDataStartDate.Value <> 0 ) then
                                SQL.Add('   ,YoteiDateST = :YoteiDateST ')
                            else
                                SQL.Add('   ,YoteiDateST = null         ');

                            if ( GHojyoMA_DMemDataEndDate.Value <> 0 ) then
                                SQL.Add('   ,YoteiDateEN = :YoteiDateEN ')
                            else
                                SQL.Add('   ,YoteiDateEN = null         ');

                            if ( GHojyoMA_DMemDataJStartDate.Value <> 0 ) then
                                SQL.Add('   ,ScheDateST	 = :ScheDateST  ')
                            else
                                SQL.Add('   ,ScheDateST  = null         ');

                            if ( GHojyoMA_DMemDataJEndDate.Value <> 0 ) then
                                SQL.Add('   ,ScheDateEN	 = :ScheDateEN  ')
                            else
                                SQL.Add('   ,ScheDateEN  = null         ');
                        end;
                    end
                    else
                    begin
                        if ( KojiInfo_DMQuery.GetFld('YoteiDateST').Value <> 0 ) then
                            SQL.Add('   ,YoteiDateST = :YoteiDateST     ')
                        else
                            SQL.Add('   ,YoteiDateST = null             ');

                        if ( KojiInfo_DMQuery.GetFld('YoteiDateEN').Value <> 0 ) then
                            SQL.Add('   ,YoteiDateEN = :YoteiDateEN     ')
                        else
                            SQL.Add('   ,YoteiDateEN = null             ');

                        if ( KojiInfo_DMQuery.GetFld('ScheDateST').Value <> 0 ) then
                            SQL.Add('   ,ScheDateST	 = :ScheDateST      ')
                        else
                            SQL.Add('   ,ScheDateST	 = null             ');

                        if ( KojiInfo_DMQuery.GetFld('ScheDateEN').Value <> 0 ) then
                            SQL.Add('   ,ScheDateEN	 = :ScheDateEN      ')
                        else
                            SQL.Add('   ,ScheDateEN	 = null             ');
                    end;
//<259> DEL St
{
                    SQL.Add('   ,Class_NCode1 = ''''                ');
                    SQL.Add('   ,Class_NCode2 = ''''                ');
                    SQL.Add('   ,Class_NCode3 = ''''                ');
                    SQL.Add('   ,Class_NCode4 = ''''                ');
                    SQL.Add('   ,Class_NCode5 = ''''                ');
}
//<259> DEL Ed
                    SQL.Add('   ,CostomerName = :strCostomerName    ');
                    SQL.Add('   ,SalesKmkCd	  = :iSalesKmkCd        ');
                    SQL.Add('   ,Remarks	  = :Remarks            ');
// <205> ADD start
                    SQL.Add('   ,gaiyou	      = :strgaiyou          ');
                    SQL.Add('   ,SesNCode	  = :iSesNCode          ');
                    SQL.Add('   ,UkeoiKbn	  = :iUkeoiKbn          ');
                    SQL.Add('   ,FAXNo	      = :strFAXNo           ');
                    SQL.Add('   ,SeiBmnNCode  = :iSeiBmnNCode       ');
                    SQL.Add('   ,SeiTanNCode  = :iSeiTanNCode       ');
// <205> ADD end
                    SQL.Add('   ,PartPattern  = :PartPattern       ');   //<TAX> ADD
// <SEI> ADD start
                    if IsSeikyuYoteiUse then
                    begin
                        SQL.Add('   ,SeikyuCode  		= :iSeikyuCode       ');
                        SQL.Add('   ,IkkatuSeikyuCode  	= :iIkkatuSeikyuCode ');
                    end;
// <SEI> ADD end
                    SQL.Add('WHERE  (MasterKbn = :iMasterKbn)       ');
                    SQL.Add('  AND  (NCode     = :strNCode)         ');
				end;

                // 詳細からの書込
				if ( bSw = true ) then
				begin
					SetFld('iMasterKbn').AsInteger  :=  m_nMasterDivision;

					if ( iSumKbn = 0 ) then
					begin
                        if ( KojiInfo_New = true ) then
//<255> DEL                            SetFld('strNCode').AsFloat  :=  uvNCODE
                            SetFld('strNCode').AsString  :=  FormatFloat('0',uvNCODE)  //<255> ADD
                        else
//<255> DEL                            SetFld('strNCode').AsFloat  :=  JHojyoMA_DMemDataNCODE.AsFloat;
                            SetFld('strNCode').AsString  :=  JHojyoMA_DMemDataNCODE.AsString;  //<255> ADD

						SetFld('iZipCode1')         .AsInteger  :=  JHojyoMA_DMemDataZipCode1.AsInteger;
						SetFld('iZipCode2')         .AsInteger	:=  JHojyoMA_DMemDataZipCode2.AsInteger;
						SetFld('strAddress1')       .AsString	:=  JHojyoMA_DMemDataAddress1.AsString;
						SetFld('strAddress2')       .AsString	:=  JHojyoMA_DMemDataAddress2.AsString;
						SetFld('strTelNo')          .AsString	:=  JHojyoMA_DMemDataTelNo.AsString;
						SetFld('strPersonCode')     .AsFloat	:=  fnGetNCODE(JHojyoMA_DMemDataPersonCode.AsString,MKBN_SYAIN,MasterInfo_DMemDataCodeAttrShain.asInteger);
						SetFld('strCostomerCode')   .AsFloat    :=  fnGetNCODE(JHojyoMA_DMemDataCostomerCode.AsString,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
// <204> MOD start
//						SetFld('strBmnCode')        .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);

												// ﾌﾘｰ属性
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
                         	if Jituzai_ETEdit_BmnCode.TagStr <> '' then
                        	begin
                        		SetFld('strBmnCode')    .AsFloat 	:=  StrToFloat(Jituzai_ETEdit_BmnCode.TagStr);
                        	end
                            else
                            begin
                            	SetFld('strBmnCode')    .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            end;
                        end
                        else           			// 数字属性
                        begin
                        	if Jituzai_ENEdit_BmnCode.TagStr <> '' then
                        	begin
                        		SetFld('strBmnCode')    .AsFloat 	:=  StrToFloat(Jituzai_ENEdit_BmnCode.TagStr);
                        	end
                            else
                            begin
                            	SetFld('strBmnCode')    .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            end;
						end;
// <204> MOD end

					    SetFld('iSalesBase')        .AsInteger	:=  JHojyoMA_DMemDataSalesBase.AsInteger;//<116><167>
//<116><167>			SetFld('iSalesBase')        .AsInteger	:=  0;
						SetFld('iHaifuKbn')         .AsInteger	:=  JHojyoMA_DMemDataHaifuKbn.AsInteger;

						if ( JHojyoMA_DMemDataStartDate.Value <> 0 ) then
							SetFld('YoteiDateST').AsDate  		:=  JHojyoMA_DMemDataStartDate.AsDateTime;

						if ( JHojyoMA_DMemDataEndDate.Value <> 0 ) then
							SetFld('YoteiDateEN').AsDate  		:=  JHojyoMA_DMemDataEndDate.AsDateTime;

						if ( JHojyoMA_DMemDataJStartDate.Value <> 0 ) then
							SetFld('ScheDateST').AsDate  		:=  JHojyoMA_DMemDataJStartDate.AsDateTime;

						if ( JHojyoMA_DMemDataJEndDate.Value <> 0 ) then
							SetFld('ScheDateEN').AsDate  		:=  JHojyoMA_DMemDataJEndDate.AsDateTime;

						SetFld('strCostomerName')   .AsString	:=  JHojyoMA_DMemDataCostomerName.AsString;
                        SetFld('iPartKbn')          .AsInteger	:=  JHojyoMA_DMemDataPartKbn.AsInteger;
                        SetFld('iPtnNCode')         .AsFloat 	:=  fnGetNCODE_KS(JHojyoMA_DMemDataPatternNo.AsInteger);
                        SetFld('iDetailKbn1')       .AsInteger	:=  JHojyoMA_DMemDataDetailKbn1.AsInteger;
                        SetFld('iDetailKbn2')       .AsInteger	:=  JHojyoMA_DMemDataDetailKbn2.AsInteger;
// <191> MOD start
//                        SetFld('iSalesKmkCd')       .AsInteger	:=  JHojyoMA_DMemDataSalesKmkCd.AsInteger;
											// 売上計上科目外部ｺｰﾄﾞを内部ｺｰﾄﾞに変換してｾｯﾄする
                        SetFld('iSalesKmkCd').AsFloat := GetKmkNCode(JHojyoMA_DMemDataSalesKmkCd.AsInteger);
// <191> MOD end

                        SetFld('Remarks')           .AsString	:=  JHojyoMA_DMemDataBIKO.AsString;
// <205> ADD start
                        SetFld('strgaiyou').AsString	        :=  JHojyoMA_DMemDatagaiyou.AsString;
// <218> MOD start
//                        SetFld('iSesNCode').AsFloat	            :=  fnGetNCODE(JHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                        SetFld('iSesNCode').AsFloat	            :=  fnGetNCODE(JHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.AsInteger);
// <218> MOD end
                        SetFld('iUkeoiKbn').AsInteger	        :=  JHojyoMA_DMemDataUkeoiKbn.AsInteger;
                        SetFld('strFAXNo').AsString	            :=  JHojyoMA_DMemDataFAXNo.AsString;
// <238> MOD start
//                        SetFld('iSeiBmnNCode').AsFloat	        :=  fnGetNCODE(JHojyoMA_DMemDataSekouBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
												// ﾌﾘｰ属性
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
                         	if Jituzai_ETEdit_SekouBmnCode.TagStr <> '' then
                        	begin
                        		SetFld('iSeiBmnNCode')    .AsFloat 	:=  StrToFloat(Jituzai_ETEdit_SekouBmnCode.TagStr);
                        	end
                            else
                            begin
                            	SetFld('iSeiBmnNCode')    .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataSekouBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            end;
                        end
                        else           			// 数字属性
                        begin
                        	if Jituzai_ENEdit_SekouBmnCode.TagStr <> '' then
                        	begin
                        		SetFld('iSeiBmnNCode')    .AsFloat 	:=  StrToFloat(Jituzai_ENEdit_SekouBmnCode.TagStr);
                        	end
                            else
                            begin
                            	SetFld('iSeiBmnNCode')    .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataSekouBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            end;
						end;
// <238> MOD end
                        SetFld('iSeiTanNCode').AsFloat	        :=  fnGetNCODE(JHojyoMA_DMemDataSekouPersonCode.AsString,MKBN_SYAIN,MasterInfo_DMemDataCodeAttrShain.asInteger);
//<TAX> ADD St
                        SetFld('PartPattern').AsInteger :=
                            toKojiInfoParam(currentSumKbn).PartPattern;
//<TAX> ADD Ed
// <SEI> ADD start
                        if IsSeikyuYoteiUse then
                        begin
                            // 請求先
                            strCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
                                JHojyoMA_DMemDataSeikyusakiGCode.AsString);
                            fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strCode, strName, exNCode);
                            SetFld('iSeikyuCode').AsFloat	        :=  exNCode;
                            // 一括請求先
                            strCode := GetDBGCode(MasterInfo_DMemDataCodeAttr.AsInteger,
                                JHojyoMA_DMemDataSeikyuKoujiGCode.AsString);
                            fnGetHojNameSeikyu(m_nMasterDivision, SUMKBN_JITUZAI, strCode, strName, exNCode, OPT_KOUJI_IKKATUSEIKYU);
                            SetFld('iIkkatuSeikyuCode').AsFloat	    :=  exNCode;
                        end;
// <SEI> ADD end
// <205> ADD start
					end
					else
					begin

                        if ( KojiInfo_New = true ) then
                            SetFld('strNCode').AsFloat  :=  uvNCODE
                        else
                            SetFld('strNCode').AsFloat  :=  GHojyoMA_DMemDataNCODE.AsFloat;

						SetFld('iZipCode1')         .AsInteger  :=  GHojyoMA_DMemDataZipCode1.AsInteger;
						SetFld('iZipCode2')         .AsInteger	:=  GHojyoMA_DMemDataZipCode2.AsInteger;
						SetFld('strAddress1')       .AsString	:=  GHojyoMA_DMemDataAddress1.AsString;
						SetFld('strAddress2')       .AsString	:=  GHojyoMA_DMemDataAddress2.AsString;
						SetFld('strTelNo')          .AsString	:=  GHojyoMA_DMemDataTelNo.AsString;
						SetFld('strPersonCode')     .AsFloat    :=  fnGetNCODE(GHojyoMA_DMemDataPersonCode.AsString,MKBN_SYAIN,MasterInfo_DMemDataCodeAttrShain.asInteger);
						SetFld('strCostomerCode')   .AsFloat   	:=  fnGetNCODE(GHojyoMA_DMemDataCostomerCode.AsString,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);

// <204> MOD start
//						SetFld('strBmnCode')        .AsFloat    :=  fnGetNCODE(GHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
												// ﾌﾘｰ属性
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
                         	if Goukei_ETEdit_BmnCode.TagStr <> '' then
                        	begin
                        		SetFld('strBmnCode')    .AsFloat 	:=  StrToFloat(Goukei_ETEdit_BmnCode.TagStr);
                        	end
                            else
                            begin
// <233> MOD start
//                            	SetFld('strBmnCode')    .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            	SetFld('strBmnCode')    .AsFloat 	:=  fnGetNCODE(GHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
// <233> MOD end
                            end;
                        end
                        else           			// 数字属性
                        begin
                        	if Goukei_ENEdit_BmnCode.TagStr <> '' then
                        	begin
                        		SetFld('strBmnCode')    .AsFloat 	:=  StrToFloat(Goukei_ENEdit_BmnCode.TagStr);
                        	end
                            else
                            begin
// <233> MOD start
//                            	SetFld('strBmnCode')    .AsFloat 	:=  fnGetNCODE(JHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            	SetFld('strBmnCode')    .AsFloat 	:=  fnGetNCODE(GHojyoMA_DMemDataBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
// <233> MOD end
                            end;
						end;
// <204> MOD end

						if ( GHojyoMA_DMemDataStartDate.Value <> 0 ) then
							SetFld('YoteiDateST').AsDate  		:=  GHojyoMA_DMemDataStartDate.AsDateTime;

						if ( GHojyoMA_DMemDataEndDate.Value <> 0 ) then
							SetFld('YoteiDateEN').AsDate  		:=  GHojyoMA_DMemDataEndDate.AsDateTime;

						if ( GHojyoMA_DMemDataJStartDate.Value <> 0 ) then
							SetFld('ScheDateST').AsDate  		:=  GHojyoMA_DMemDataJStartDate.AsDateTime;

						if ( GHojyoMA_DMemDataJEndDate.Value <> 0 ) then
							SetFld('ScheDateEN').AsDate  		:=  GHojyoMA_DMemDataJEndDate.AsDateTime;

					    SetFld('iSalesBase')        .AsInteger	:=  GHojyoMA_DMemDataSalesBase.AsInteger;//<116><167>
//<116><167>			SetFld('iSalesBase')        .AsInteger	:=  0;
						SetFld('iHaifuKbn')         .AsInteger	:=  GHojyoMA_DMemDataHaifuKbn.AsInteger;
						SetFld('strCostomerName')   .AsString	:=  GHojyoMA_DMemDataCostomerName.AsString;
                        SetFld('iPartKbn')          .AsInteger	:=  0;
                        SetFld('iPtnNCode')         .AsInteger	:=  0;
                        SetFld('iDetailKbn1')       .AsInteger	:=  0;
                        SetFld('iDetailKbn2')       .AsInteger	:=  0;
                        SetFld('iSalesKmkCd')       .AsInteger	:=  0;
//                        SetFld('Remarks')           .AsString  	:=  '';
// <205> ADD start
//                        SetFld('strgaiyou').AsString	        :=  '';
// <218> ADD start
//                        SetFld('iSesNCode').AsFloat	            :=  fnGetNCODE(GHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                        SetFld('iSesNCode').AsFloat	            :=  fnGetNCODE(GHojyoMA_DMemDataSesNCode.AsString,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.AsInteger);
// <218> ADD end
                        SetFld('iUkeoiKbn').AsInteger	        :=  GHojyoMA_DMemDataUkeoiKbn.AsInteger;
                        SetFld('strFAXNo').AsString	            :=  GHojyoMA_DMemDataFAXNo.AsString;
                        SetFld('Remarks').AsString	            :=  GHojyoMA_DMemDataBIKO.AsString;
                        SetFld('strgaiyou').AsString	        :=  GHojyoMA_DMemDatagaiyou.AsString;
// <238> MOD start
//                        SetFld('iSeiBmnNCode').AsFloat	        :=  fnGetNCODE(GHojyoMA_DMemDataSekouBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                        // ﾌﾘｰ属性
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
                         	if Goukei_ETEdit_SekouBmnCode.TagStr <> '' then
                        	begin
                        		SetFld('iSeiBmnNCode')    .AsFloat 	:=  StrToFloat(Goukei_ETEdit_SekouBmnCode.TagStr);
                        	end
                            else
                            begin
                            	SetFld('iSeiBmnNCode')    .AsFloat 	:=  fnGetNCODE(GHojyoMA_DMemDataSekouBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            end;
                        end
                        else    // 数字属性
                        begin
                        	if Goukei_ENEdit_SekouBmnCode.TagStr <> '' then
                        	begin
                        		SetFld('iSeiBmnNCode')    .AsFloat 	:=  StrToFloat(Goukei_ENEdit_SekouBmnCode.TagStr);
                        	end
                            else
                            begin
                            	SetFld('iSeiBmnNCode')    .AsFloat 	:=  fnGetNCODE(GHojyoMA_DMemDataSekouBmnCode.AsString,MKBN_BUMON,MasterInfo_DMemDataCodeAttrBmn.asInteger);
                            end;
						end;
// <238> MOD end
                        SetFld('iSeiTanNCode').AsFloat	        :=  fnGetNCODE(GHojyoMA_DMemDataSekouPersonCode.AsString,MKBN_SYAIN,MasterInfo_DMemDataCodeAttrShain.asInteger);
// <205> ADD end
//<TAX> ADD St
                        SetFld('PartPattern').AsInteger :=
                            toKojiInfoParam(currentSumKbn).PartPattern;
//<TAX> ADD Ed
// <SEI> ADD start
                        if IsSeikyuYoteiUse then
                        begin
                            // 請求先
                            strCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
                                GHojyoMA_DMemDataSeikyusakiGCode.AsString);
                            fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strCode, strName, exNCode);
                            SetFld('iSeikyuCode').AsFloat	        :=  exNCode;
                            // 一括請求先
                            strCode := GetDBGCode(MasterInfo_DMemDataCodeAttr.AsInteger,
                                GHojyoMA_DMemDataSeikyuKoujiGCode.AsString);
                            fnGetHojNameSeikyu(m_nMasterDivision, SUMKBN_JITUZAI, strCode, strName, exNCode, OPT_KOUJI_IKKATUSEIKYU);
                            SetFld('iIkkatuSeikyuCode').AsFloat	    :=  exNCode;
                        end;
// <SEI> ADD end
					end;
				end
                // 一覧からの書込
				else
				begin
					SetFld('iMasterKbn').AsInteger  :=  m_nMasterDivision;

    				if ( KojiInfo_New = true ) then
    					SetFld('strNCode').AsFloat  :=  uvNCODE
                    else
    					SetFld('strNCode').AsFloat  :=  JHojyoMA_DMemDataNCODE.AsFloat;

					if ( iSumKbn = 0 ) then
					begin
						SetFld('iZipCode1')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('ZipCode1')     .AsInteger;
						SetFld('iZipCode2')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('ZipCode2')     .AsInteger;
						SetFld('strAddress1')       .AsString	:=  KojiInfo_DMQuery.GetFld('Address1')     .AsString;
						SetFld('strAddress2')       .AsString	:=  KojiInfo_DMQuery.GetFld('Address2')     .AsString;
						SetFld('strTelNo')          .AsString	:=  KojiInfo_DMQuery.GetFld('TelNo')        .AsString;
						SetFld('strPersonCode')     .AsFloat  	:=  KojiInfo_DMQuery.GetFld('PersonNCode')  .AsFloat;
						SetFld('strCostomerCode')   .AsFloat	:=  KojiInfo_DMQuery.GetFld('CostomerNCode').AsFloat;
						SetFld('strBmnCode')        .AsFloat	:=  KojiInfo_DMQuery.GetFld('BmnNCode')     .AsFloat;
//<116><167>			SetFld('iSalesBase')        .AsInteger	:=  0;
						SetFld('iSalesBase')        .AsInteger	:=  KojiInfo_DMQuery.GetFld('SalesBase')    .AsInteger; // <116><167>
						SetFld('iHaifuKbn')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('HaifuKbn')     .AsInteger;
						SetFld('strCostomerName')   .AsString	:=  KojiInfo_DMQuery.GetFld('CostomerName') .AsString;
                        SetFld('iPartKbn')          .AsInteger	:=  KojiInfo_DMQuery.GetFld('PartKbn')      .AsInteger;
                        SetFld('iPtnNCode')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('PtnNCode')     .AsInteger;;
                        SetFld('iDetailKbn1')       .AsInteger	:=  KojiInfo_DMQuery.GetFld('DetailKbn1')   .AsInteger;
// <219> MOD start
//                        SetFld('iDetailKbn2')       .AsInteger	:=  KojiInfo_DMQuery.GetFld('DetailKbn2')   .AsInteger;
                        if (m_KojKbn = 0) then
                            SetFld('iDetailKbn2')       .AsInteger	:= 9
                        else
                            SetFld('iDetailKbn2')       .AsInteger	:=  KojiInfo_DMQuery.GetFld('DetailKbn2')   .AsInteger;
// <219> MOD end
                        SetFld('iSalesKmkCd')       .AsInteger	:=  KojiInfo_DMQuery.GetFld('SalesKmkCd')   .AsInteger;
                        SetFld('Remarks')           .AsString   :=  KojiInfo_DMQuery.GetFld('Remarks')      .AsString;
// <205> ADD start
                        SetFld('strgaiyou').AsString	        :=  KojiInfo_DMQuery.GetFld('gaiyou')       .AsString;
                        SetFld('iSesNCode').AsInteger	        :=  KojiInfo_DMQuery.GetFld('SesNCode')     .AsInteger;
                        SetFld('iUkeoiKbn').AsInteger	        :=  KojiInfo_DMQuery.GetFld('UkeoiKbn')     .AsInteger;
                        SetFld('strFAXNo').AsString	            :=  KojiInfo_DMQuery.GetFld('FAXNo')        .AsString;
                        SetFld('iSeiBmnNCode').AsFloat          :=  KojiInfo_DMQuery.GetFld('SeiBmnNCode')  .AsInteger;
                        SetFld('iSeiTanNCode').AsFloat	        :=  KojiInfo_DMQuery.GetFld('SeiTanNCode')  .AsInteger;
                        SetFld('PartPattern').AsInteger	        :=  KojiInfo_DMQuery.GetFld('PartPattern')  .AsInteger;  //<TAX> ADD
// <205> ADD end
// <SEI> ADD start
                        if IsSeikyuYoteiUse then
                        begin
                            SetFld('iSeikyuCode').AsFloat          	:=  KojiInfo_DMQuery.GetFld('SeikyuCode')  	.AsFloat;
                            SetFld('iIkkatuSeikyuCode').AsFloat	    :=  KojiInfo_DMQuery.GetFld('IkkatuSeikyuCode')  .AsFloat;
                        end;
// <SEI> ADD end
					end
					else
					begin
						SetFld('iZipCode1')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('ZipCode1')     .AsInteger;
						SetFld('iZipCode2')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('ZipCode2')     .AsInteger;
						SetFld('strAddress1')       .AsString	:=  KojiInfo_DMQuery.GetFld('Address1')     .AsString;
						SetFld('strAddress2')       .AsString	:=  KojiInfo_DMQuery.GetFld('Address2')     .AsString;
						SetFld('strTelNo')          .AsString	:=  KojiInfo_DMQuery.GetFld('TelNo')        .AsString;
						SetFld('strPersonCode')     .AsFloat 	:=  KojiInfo_DMQuery.GetFld('PersonNCode')  .AsFloat;
						SetFld('strCostomerCode')   .AsFloat	:=  KojiInfo_DMQuery.GetFld('CostomerNCode').AsFloat;
						SetFld('strBmnCode')        .AsFloat	:=  KojiInfo_DMQuery.GetFld('BmnNCode')     .AsFloat;
//<116><167>			SetFld('iSalesBase')        .AsInteger	:=  0;
						SetFld('iSalesBase')        .AsInteger	:=  KojiInfo_DMQuery.GetFld('SalesBase')    .AsInteger; //<116><167>
						SetFld('iHaifuKbn')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('HaifuKbn')     .AsInteger;
						SetFld('strCostomerName')   .AsString	:=  KojiInfo_DMQuery.GetFld('CostomerName') .AsString;
                        SetFld('iPartKbn')          .AsInteger	:=  0;
                        SetFld('iPtnNCode')         .AsInteger	:=  0;
                        SetFld('iDetailKbn1')       .AsInteger	:=  0;
                        SetFld('iDetailKbn2')       .AsInteger	:=  0;
                        SetFld('iSalesKmkCd')       .AsInteger	:=  0;
                        SetFld('Remarks')           .AsString  	:=  '';
// <205> ADD start
                        SetFld('strgaiyou')         .AsString	:=  KojiInfo_DMQuery.GetFld('gaiyou')       .AsString;
                        SetFld('iSesNCode')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('SesNCode')     .AsInteger;
                        SetFld('iUkeoiKbn')         .AsInteger	:=  KojiInfo_DMQuery.GetFld('UkeoiKbn')     .AsInteger;
                        SetFld('strFAXNo')          .AsString	:=  KojiInfo_DMQuery.GetFld('FAXNo')        .AsString;
                        SetFld('iSeiBmnNCode').AsFloat	        :=  KojiInfo_DMQuery.GetFld('SeiBmnNCode')  .AsInteger;
                        SetFld('iSeiTanNCode').AsFloat	        :=  KojiInfo_DMQuery.GetFld('SeiTanNCode')  .AsInteger;
// <205> ADD end
                        SetFld('PartPattern').AsInteger	        :=  KojiInfo_DMQuery.GetFld('PartPattern')  .AsInteger;  //<TAX> ADD
// <SEI> ADD start
                        if IsSeikyuYoteiUse then
                        begin
                            SetFld('iSeikyuCode').AsFloat          	:=  KojiInfo_DMQuery.GetFld('SeikyuCode')  	.AsFloat;
                            SetFld('iIkkatuSeikyuCode').AsFloat	    :=  KojiInfo_DMQuery.GetFld('IkkatuSeikyuCode')  .AsFloat;
                        end;
// <SEI> ADD end
					end;
// <141>↓
{                    if ( KojiInfo_DMQuery.GetFld('YoteiDateST').Value <> 0 ) then
                        SetFld('YoteiDateST').AsDate    :=  KojiInfo_DMQuery.GetFld('YoteiDateST').AsDateTime;

                    if ( KojiInfo_DMQuery.GetFld('YoteiDateEN').Value <> 0 ) then
                        SetFld('YoteiDateEN').AsDate  	:=  KojiInfo_DMQuery.GetFld('YoteiDateEN').AsDateTime;

                    if ( KojiInfo_DMQuery.GetFld('ScheDateST').Value <> 0 ) then
                        SetFld('ScheDateST').AsDate  	:=  KojiInfo_DMQuery.GetFld('ScheDateST').AsDateTime;

                    if ( KojiInfo_DMQuery.GetFld('ScheDateEN').Value <> 0 ) then
                        SetFld('ScheDateEN').AsDate  	:=  KojiInfo_DMQuery.GetFld('ScheDateEN').AsDateTime;
}                   
                    if ( KojiInfo_DMQuery.GetFld('YoteiDateST').Value <> 0 ) and
                        (not KojiInfo_DMQuery.GetFld('YoteiDateST').IsNull) then
                        SetFld('YoteiDateST').AsDate    :=  KojiInfo_DMQuery.GetFld('YoteiDateST').AsDateTime
                    else
                    begin
                        ParamByName('YoteiDateST').Clear;
                        ParamByName('YoteiDateST').ParamType := ptInput;
                        ParamByName('YoteiDateST').DataType := ftDate;
                    end;

                    if ( KojiInfo_DMQuery.GetFld('YoteiDateEN').Value <> 0 ) and
                        (not KojiInfo_DMQuery.GetFld('YoteiDateEN').IsNull) then
                        SetFld('YoteiDateEN').AsDate  	:=  KojiInfo_DMQuery.GetFld('YoteiDateEN').AsDateTime
                    else
                    begin
                        ParamByName('YoteiDateEN').Clear;
                        ParamByName('YoteiDateEN').ParamType := ptInput;
                        ParamByName('YoteiDateEN').DataType := ftDate;
                    end;

                    if ( KojiInfo_DMQuery.GetFld('ScheDateST').Value <> 0 ) and
                        (not KojiInfo_DMQuery.GetFld('ScheDateST').IsNull) then
                        SetFld('ScheDateST').AsDate  	:=  KojiInfo_DMQuery.GetFld('ScheDateST').AsDateTime
                    else
                    begin
                        ParamByName('ScheDateST').Clear;
                        ParamByName('ScheDateST').ParamType := ptInput;
                        ParamByName('ScheDateST').DataType := ftDate;
                    end;

                    if ( KojiInfo_DMQuery.GetFld('ScheDateEN').Value <> 0 ) and
                        (not KojiInfo_DMQuery.GetFld('ScheDateEN').IsNull) then
                        SetFld('ScheDateEN').AsDate  	:=  KojiInfo_DMQuery.GetFld('ScheDateEN').AsDateTime
                    else
                    begin
                        ParamByName('ScheDateEN').Clear;
                        ParamByName('ScheDateEN').ParamType := ptInput;
                        ParamByName('ScheDateEN').DataType := ftDate;
                    end;
				end;
// <141>↑
				if ( ExecSQL = false ) then
				begin
					ErrorMessageDsp(QueryKojiInfo);
                    // ﾛｰﾙﾊﾞｯｸ(破棄)
					MDataModule^.Rollback(dbCorp_Select);

                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then   // <172>
                    begin
                        // 親会社DBのﾛｰﾙﾊﾞｯｸ
                        MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                    end;

					QueryKojiInfo.Close;
					Result  :=  false;
					Exit;
				end;

                // <172> - ST
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo, 1) = false ) then
                    begin
                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( dbCorp_Select );
                        result := false;
                        Exit;
                    end;

                    // <184> - ST

                    // 親会社DBとMQueryの接続
                    MDataModule.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, dqMasterData );

                    dqMasterData.Close();
                    dqMasterData.SQL.Clear();
//<255> DEL                    dqMasterData.SQL.Add('select * from SecHojyoDispInfo   ');
                    dqMasterData.SQL.Add('select PlaceNCode from SecHojyoDispInfo   ');  //<255> ADD
                    dqMasterData.SQL.Add('where Opekbn          = :Opekbn  ');  // 使用区分
                    dqMasterData.SQL.Add('  and Masterkbn       = :Mstkbn  ');  // ﾏｽﾀ区分(101～110)
                    dqMasterData.SQL.Add('  and PlaceNCode      = :PNCode  ');  // ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
                    dqMasterData.SQL.Add('  and NoDispMasterkbn = :NMstKbn ');  // ﾏｽﾀ区分
                    dqMasterData.SQL.Add('  and NCode           = :NCode   ');  // 内部ｺｰﾄﾞ

                    dqMasterData.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                    dqMasterData.ParamByName('Mstkbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL                    dqMasterData.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                    dqMasterData.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD
                    dqMasterData.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL                    dqMasterData.ParamByName('NCode'  ).AsFloat   := uvNCODE;
                    dqMasterData.ParamByName('NCode'  ).AsString   := FormatFloat('0',uvNCODE);  //<255> ADD

                    //  ｴﾗｰの判定
                    if	( not dqMasterData.Open() ) then
                    begin
                        ErrorMessageDsp ( dqMasterData );
                        dqMasterData.Close ();
                        dqMasterData.Free  ();
                        Result := false;
                        Exit;
                    end;

                    // 該当ﾚｺｰﾄﾞが存在していない場合は、表示ﾚｺｰﾄを生成する。
                    if	( dqMasterData.Eof ) then
                    begin
                        dqMasterData.Close();
                        dqMasterData.SQL.Clear();
                        dqMasterData.SQL.Add('insert into SecHojyoDispInfo  ( ');
                        dqMasterData.SQL.Add(' Opekbn,Masterkbn,PlaceNCode,   ');
                        dqMasterData.SQL.Add(' NoDispMasterKbn,NCode,DispKbn, ');
                        dqMasterData.SQL.Add(' UpdateTime ) values (          ');
                        dqMasterData.SQL.Add(' :Opekbn,:Mstkbn,:PNCode,       ');
                        dqMasterData.SQL.Add(' :NMstKbn,:NCode,:DispKbn,      ');
                        dqMasterData.SQL.Add(' CURRENT_TIMESTAMP )            ');

                        dqMasterData.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                        dqMasterData.ParamByName('Mstkbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
                        dqMasterData.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                        dqMasterData.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
                        dqMasterData.ParamByName('NCode'  ).AsFloat   := uvNCODE;
                        dqMasterData.ParamByName('DispKbn').AsInteger := DISP_ON;

                        if	( not dqMasterData.ExecSQL() ) then
                        begin
                            ErrorMessageDsp ( dqMasterData );
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                            Result := FALSE;
                            Exit;
                        end;
                    end
                    else
                    begin
                        dqMasterData.Close();
                        dqMasterData.SQL.Clear();
                        dqMasterData.SQL.Add('update SecHojyoDispInfo set      ');
                        dqMasterData.SQL.Add(' DispKbn    = :DispKbn,          ');
                        dqMasterData.SQL.Add(' UpdateTime = CURRENT_TIMESTAMP  ');
                        dqMasterData.SQL.Add('where Opekbn          = :Opekbn  ');
                        dqMasterData.SQL.Add('  and Masterkbn       = :MstKbn  ');
                        dqMasterData.SQL.Add('  and PlaceNCode      = :PNCode  ');
                        dqMasterData.SQL.Add('  and NoDispMasterKbn = :NMstKbn ');
                        dqMasterData.SQL.Add('  and NCode           = :NCode   ');

                        dqMasterData.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                        dqMasterData.ParamByName('MstKbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL                        dqMasterData.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                        dqMasterData.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD
                        dqMasterData.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL                        dqMasterData.ParamByName('NCode'  ).AsFloat   := uvNCODE;
                        dqMasterData.ParamByName('NCode'  ).AsString   := FormatFloat('0',uvNCODE);  //<255> ADD
                        dqMasterData.ParamByName('DispKbn').AsInteger := DISP_ON;

                        if	( not dqMasterData.ExecSQL() ) then
                        begin
                            ErrorMessageDsp ( dqMasterData );
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                            Result := FALSE;
                            Exit;
                        end;
                    end;
                    // <184> - ED
                end;
                // <172> - ED
//<155> - ST
// <WF>↓
                // WF取込の場合
                if m_recOther.CanInsert then
                begin                       // WF連動区分更新
// <225> MOD start
{
                    if not UpdateSinsei(m_recSinseiKey) then
                    begin
                        MDataModule.RollBack(dbCorp_Select);

                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then   // <172>
                        begin
                            // 親会社DBのﾛｰﾙﾊﾞｯｸ
                            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                        end;

						QueryKojiInfo.Close;
						Result := false;
                        Exit;
                    end;
}

                    if not UpdateFLWSinsei(m_recFLWSinseiKey) then
                    begin
                        MDataModule.RollBack(dbCorp_Select);
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社DBのﾛｰﾙﾊﾞｯｸ
                            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                        end;
                        QueryKojiInfo.Close;
                        Result := false;
                        Exit;
                    end;

// <225> MOD end
                    // WF関係の初期化
                    ClearOtherRec(m_recOther);
                    FontColorChange();  // <225> 文字色変更
                end;
// <WF>↑
//<155> - ED
                // ｺﾐｯﾄ(反映)
                // ここでｺﾐｯﾄしない
				// <172>MDataModule^.Commit (dbCorp_Select);
			except
				ShowMessage('KojiInfo Write Error!');

                // ↓↓↓<172>
                MDataModule.RollBack(dbCorp_Select);

                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 親会社DBのﾛｰﾙﾊﾞｯｸ
                    MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                end;

				QueryKojiInfo.Close;
				Result := false;
                Exit;
                // ↑↑↑<172>
			end;
		end;
        end;  //<262> ADD

		// HojyoTree
		if ( HojyoMA_New = true ) then
		begin
			if ( fnHojyoTreeWrite (strGCode) = false ) then
			begin
                // ﾛｰﾙﾊﾞｯｸ(破棄) <172>
                MDataModule^.Rollback ( dbCorp_Select );
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then  // <172>
                begin
                    // 親会社DBのﾛｰﾙﾊﾞｯｸ
                    MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                end;
				Result  :=  false;
				Exit;
			end;
		end;


		if ( bSw = true ) then
		begin
            // 実在
			if ( iSumKbn = 0 ) then
			begin
				if ( BSpeedButtonIS.Caption = '一覧(&T)' ) then
				begin
                    // <*> KojiInfo2 <*> ／ 契約情報：最大8件
					if ( JKeiyaku_DMemData.Active = true ) then
					begin
(*
						if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
							JKeiyaku_DMemData.First;

                        // ※KoujiInfo2は洗替 ※

						// 全て削除
						if ( fnKeiyakuDelete ( JHojyoMA_DMemDataNCODE.AsFloat ) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result := false;
							Exit;
						end;
*) // <172>
						// 全て追加
						if ( fnKeiyakuWrite (JHojyoMA_DMemDataNCODE.AsFloat, iSumKbn) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result := false;
							Exit;
						end;
					end;
// <SEI> ADD start
                    // <*> KojiInfo2 <*> ／ 請求・入金予定
					if (IsSeikyuYoteiUse) and ( JSeikyu_DMemData.Active = true ) and
						( Jituzai_PMTab.Items[PAGE_SEIKYU].Visible = true ) then
					begin
						// 全て追加
						if ( fnSeikyuWrite (JHojyoMA_DMemDataNCODE.AsFloat, iSumKbn) = false ) then
						begin
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;

							Result := false;
							Exit;
						end;
					end;
// <SEI> ADD end
					// <*> KojiInfo2 <*> ／ 入金情報：最大10件
//<SEI> MOD St
//					if ( JNyukin_DMemData.Active = true ) then
					if ( JNyukin_DMemData.Active = true ) and
						( Jituzai_PMTab.Items[PAGE_NYUKIN].Visible = true ) then
//<SEI> MOD Ed
					begin
(*
						if ( JNyukin_DMemData.RecordCount <> 0 ) then
							JNyukin_DMemData.First;

						// 全て削除
						if ( fnNyukinDelete (JHojyoMA_DMemDataNCODE.AsFloat) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result  :=  false;
							Exit;
						end;
*) // <172>
						// 全て追加
						if ( fnNyukinWrite (JHojyoMA_DMemDataNCODE.AsFloat, iSumKbn) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result  :=  false;
							Exit;
						end;
					end;
				end;

				// <*> MasterInfo <*> ／ ﾏｽﾀ基本情報（工事情報）
				if ( BSpeedButtonIS.Caption = '一覧(&T)' ) then
				begin
                    // 実在
					if ( iSumKbn = 0 ) then
					begin
                        // 特殊工事指定
						if ( Jituzai_ChkBox_Tokusyu.Checked = true ) then
						begin
							if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
							begin
                                // 前回の指定と違う
								// <173>if ( MasterInfo_DMemDataSpHojyoCd1.AsString <> JHojyoMA_DMemDataGCode.AsString ) then
                                if ( MasterInfo_DMemDataSpHojyoNCd1.AsFloat <> JHojyoMA_DMemDataNCode.AsFloat ) then   // <173>
								begin
                                    QueryMaster.Close();
									QueryMaster.SQL.Clear();
                                    QueryMaster.SQL.Add('update MasterInfo set    ');
                                    QueryMaster.SQL.Add('   SpHojyoNCd1 = :Code   ');
// <210> MOD start
//                                    QueryMaster.SQL.Add('   UpdTantoNCode = :UpdTantoNCode '); // <202>
                                    QueryMaster.SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');
// <210> MOD start
                                    QueryMaster.SQL.Add('where MasterKbn = :pMKBN ');

                                    QueryMaster.SetFld('pMKBN') .AsInteger  :=  m_nMasterDivision;
                                    // <123>QueryMaster.SetFld('Code')  .AsString   :=  JHojyoMA_DMemDataGCode.AsString;
                                    QueryMaster.SetFld('Code')  .AsFloat    :=  JHojyoMA_DMemDataNCode.AsFloat; // <123>
                                    QueryMaster.SetFld('UpdTantoNCode').AsFloat :=  m_TantoNCode; // <202>

									if ( QueryMaster.ExecSQL = false ) then
									begin
										ErrorMessageDsp(QueryMaster);
                                        // ﾛｰﾙﾊﾞｯｸ(破棄)
										MDataModule^.Rollback (dbCorp_Select);
                                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then   // <172>
                                        begin
                                            // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                        end;
										Result := false;
										Exit;
									end;

                                    // ｺﾐｯﾄ(反映)
									// <172>MDataModule^.Commit (dbCorp_Select);

									MasterInfo_DMemData.Edit;
									// <173>MasterInfo_DMemDataSpHojyoCd1.AsString := JHojyoMA_DMemDataGCode.AsString;
                                    MasterInfo_DMemDataSpHojyoNCd1.AsFloat := JHojyoMA_DMemDataNCode.AsFloat;   // <173>
									MasterInfo_DMemData.Post;
								end;
							end
							else
							begin
								if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
								begin
                                    // 前回の指定と違う
									// <173>if ( MasterInfo_DMemDataSpHojyoCd1.AsString <> Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) ) then
                                    if ( MasterInfo_DMemDataSpHojyoNCd1.AsFloat <> JHojyoMA_DMemDataNCode.AsFloat ) then    // <173>
									begin
                                        QueryMaster.Close();
										QueryMaster.SQL.Clear();
										QueryMaster.SQL.Add('update MasterInfo set      ');
										QueryMaster.SQL.Add('   SpHojyoNCd1 = :Code     ');
// <210> MOD start
//										QueryMaster.SQL.Add('   UpdTantoNCode = :UpdTantoNCode '); // <202>
										QueryMaster.SQL.Add('   ,UpdTantoNCode = :UpdTantoNCode ');
// <210> MOD start
										QueryMaster.SQL.Add('where MasterKbn = :pMKBN   ');

                                        QueryMaster.SetFld('pMKBN') .AsInteger  :=  m_nMasterDivision;
                                        // <123>QueryMaster.SetFld('Code')  .AsString	:=  Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]);
                                        QueryMaster.SetFld('Code')  .AsFloat	:=  JHojyoMA_DMemDataNCode.AsFloat; // <123>
                                        QueryMaster.SetFld('UpdTantoNCode').AsFloat :=  m_TantoNCode; // <202>

										if ( QueryMaster.ExecSQL = false ) then
										begin
											ErrorMessageDsp ( QueryMaster );
                                            // ﾛｰﾙﾊﾞｯｸ(破棄)
											MDataModule^.Rollback ( dbCorp_Select );
                                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then   // <172>
                                            begin
                                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                            end;
											Result := false;
											Exit;
										end;

                                        // ｺﾐｯﾄ(反映)
										// <172>MDataModule^.Commit(dbCorp_Select);

										MasterInfo_DMemData.Edit;
										// <173>MasterInfo_DMemDataSpHojyoCd1.AsString := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]);
                                        MasterInfo_DMemDataSpHojyoNCd1.AsFloat := JHojyoMA_DMemDataNCode.AsFloat;   // <173>
										MasterInfo_DMemData.Post;
									end;
								end;
							end;
						end;
					end;
				end;
			end
            // 合計
			else
			begin
				if ( BSpeedButtonIS.Caption = '一覧(&T)' ) then
				begin
					// <*> KojiInfo2 <*> ／ 契約情報：最大8件
					if ( GKeiyaku_DMemData.Active = true ) then
					begin
(*
						if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
							GKeiyaku_DMemData.First;

						// 全て削除
						if ( fnKeiyakuDelete (GHojyoMA_DMemDataNCODE.AsFloat) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result  :=  false;
							Exit;
						end;
*) // <172>
						// 全て追加
						if ( fnKeiyakuWrite (GHojyoMA_DMemDataNCODE.AsFloat, iSumKbn) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result  :=  false;
							Exit;
						end;
					end;

// <SEI> ADD start
                    // <*> KojiInfo2 <*> ／ 請求・入金予定
					if (IsSeikyuYoteiUse) and ( GSeikyu_DMemData.Active = true ) and
						( Goukei_PMTab. Items[PAGE_GOUKEI_SEIKYU].Visible = true ) then
					begin
						// 全て追加
						if ( fnSeikyuWrite (GHojyoMA_DMemDataNCODE.AsFloat, iSumKbn) = false ) then
						begin
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;

							Result := false;
							Exit;
						end;
					end;
// <SEI> ADD end

					// <*> KojiInfo2 <*> ／ 入金情報：最大10件
//<SEI> MOD St
//					if ( GNyukin_DMemData.Active = true ) then
					if ( GNyukin_DMemData.Active = true ) and
						( Goukei_PMTab. Items[PAGE_GOUKEI_NYUKIN].Visible = true ) then
//<SEI> MOD Ed
					begin
(*
						if ( GNyukin_DMemData.RecordCount <> 0 ) then
							GNyukin_DMemData.First;

						// 全て削除
						if ( fnNyukinDelete (GHojyoMA_DMemDataNCODE.AsFloat) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result  :=  false;
							Exit;
						end;
*) // <172>
						// 全て追加
						if ( fnNyukinWrite (GHojyoMA_DMemDataNCODE.AsFloat, iSumKbn) = false ) then
						begin
                            // ↓↓↓<172>
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
                            MDataModule^.Rollback ( dbCorp_Select );
                            if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                            begin
                                // 親会社DBのﾛｰﾙﾊﾞｯｸ
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                            end;
                            // ↑↑↑<172>
							Result  :=  false;
							Exit;
						end;
					end;
				end;
			end;
		end;

		if ( HojyoMA_New = true ) then
		begin
            // 工事総件数を増やす
			Inc(giAllCnt);
			LblRecCnt.Caption := IntToStr(giAllCnt);
		end;

        // ↓↓↓<172>
        // ｺﾐｯﾄ(反映)
        MDataModule^.Commit(dbCorp_Select);
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 親会社DBのﾛｰﾙﾊﾞｯｸ
            MDataModule^.Commit ( m_SyncMaster.m_cPDBSelect );
        end;
        // ↑↑↑<172>
	finally
// <213> ADD start
		QueryHojyoMA.Close();					// ﾘｿｰｽ・ｶﾞﾊﾞﾅｰのｴﾗｰが起きるため最後にQueryを開放する
        QueryHojyoMA.Free();
// <213> ADD end
		QueryMaster.Close();
		QueryMaster.Free();
		QueryKojiInfo.Close();
		QueryKojiInfo.Free();
        dqMasterData.Close();
        dqMasterData.Free();
	end;

	Result := true;

end;

//**************************************************************************
//	Proccess	:	工事データ削除（１件）
//	Notice		:
//	Name		:	N.Nabe
//	Date		:	2000.09.25
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnDataDelete(strGCode: String; iSumKbn: Integer): Boolean;
var
	HojyoMA_New		 : Boolean;
    dqMasterData     : TMQuery;
//	strSyokuchi		 : String;
	iSyokuchi		 : Extended;        // <172>
    strCode, strName : String;          // <CHK>
    strErr           : String;          // <CHK>
    strMsg           : String;          // <CHK>
    exNCode          : Extended;        // <CHK>
    sNCodeIn         : String;
begin

    dqMasterData := TMQuery.Create ( Self );

    // 対象ﾃﾞｰﾀを取得する
	fnDataRead ( strGCode, iSumKbn, 0 );
 	HojyoMA_New := HojyoMA_DMQuery.Eof;

    // ↓↓↓ <CHK>
    // 内部ｺｰﾄﾞ取得
	exNCode := HojyoMA_DMQuery.GetFld('NCode').AsFloat;
    // 削除ﾁｪｯｸｽﾄｱﾄﾞ実行
    if ( not fnDelCheck(exNCode, m_nMasterDivision, strErr) ) then
    begin
        // ﾌｫｰﾏｯﾄ後の外部ｺｰﾄﾞ取得
        strCode := ComArea.SetDspCodeAttr(strGCode,
            MasterInfo_DMemDataCodeDigit.AsInteger, MasterInfo_DMemDataCodeAttr.AsInteger);
        // 簡略名称
    	strName := HojyoMA_DMQuery.GetFld('SimpleName').AsString;
        // 「ｺｰﾄﾞ 簡略名称 は、xxxのため削除できません。」
        strMsg := strCode + ' ' + strName + ' ' + strErr ;
        MjsMessageBoxEx(Self, strMsg, '確認', mjInformation, mjOk, mjDefOk);

        HojyoMA_DMQuery.Close();
        Result := false;
        Exit;
    end;
    // ↑↑↑ <CHK>

    // <SEI> ADD start
    // 他の工事で一括請求先工事として登録されているかﾁｪｯｸ
    if (IsSeikyuYoteiUse) and (not fnDelCheckSeikyu(m_nMasterDivision, exNCode)) then
    begin
        Result := false;
        Exit;
    end;
    // <SEI> ADD end

    //	ﾄﾗﾝｻﾞｸｼｮﾝの開始
	MDataModule^.BeginTran ( dbCorp_Select );

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
    //
    //  ﾏｽﾀﾃﾞｰﾀを削除する際に、ｸﾞﾙｰﾌﾟ管理を採用している場合は、親会社ﾃﾞｰﾀﾍﾞｰｽに
    //  対してﾄﾗﾝｻﾞｸｼｮﾝを掛ける。。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        // ﾌﾟﾛｼﾞｪｸﾄ登録での削除は、HojyoMAの削除時に、updateﾄﾘｶﾞ (MT_AU_HOJYOMA01) が起動します。
        // MT_AU_HOJYOMA01で関連ﾃﾞｰﾀ(KojiInfo,KojiInfo2)の削除ｽﾄｱﾄﾞﾌﾟﾛｼｼﾞｬ (MP_MAS_DEL_HOJYOMA) を起動します。

        // 親会社ﾃﾞｰﾀﾍﾞｰｽに対してﾄﾗﾝｻﾞｸｼｮﾝを掛ける
        MDataModule^.BeginTran ( m_SyncMaster.m_cPDBSelect );

        // 親会社へ接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, dqMasterData );

        // 親会社のHojyoMA_Relを削除
        dqMasterData.Close();
        dqMasterData.RequestLive := false;
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('update HojyoMA_Rel                  ');
        dqMasterData.SQL.Add('set RDelKbn_Rel = 1,                ');
        dqMasterData.SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
        dqMasterData.SQL.Add('where MasterKbn   = :pMstKbn        ');
        dqMasterData.SQL.Add(' and  RDelKbn_Rel = :pRDelKbn       ');
        dqMasterData.SQL.Add(' and  NCode       = :pNCode         ');
        dqMasterData.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode   ');

        dqMasterData.ParamByName('pMstKbn'     ).AsInteger := m_nMasterDivision;
        dqMasterData.ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> MOD St
//        dqMasterData.ParamByName('pNCode'      ).AsFloat   := exNCode;
//        dqMasterData.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
        dqMasterData.ParamByName('pNCode'      ).AsString   := FormatFloat('0',exNCode);
        dqMasterData.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

        if ( dqMasterData.ExecSQL = false ) then
        begin
            ErrorMessageDsp( dqMasterData );
            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
            MDataModule^.Rollback ( dbCorp_Select );
            dqMasterData.Close();
            dqMasterData.Free();
            result := false;
            Exit;
        end;

        // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動 このｽﾄｱﾄﾞをCallすることで、KojiInfo,KojiInfo2は削除されるので
        // KojiInfo, KojiInfo2の同期ﾌﾟﾛｼｼﾞｬｰはCallしないで_Relだけupdateする
        if ( m_SyncMaster.fnCall_SYNC ( JNTSYNC_HojyoMA, 0 ) = false ) then
        begin
            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
            MDataModule^.Rollback ( dbCorp_Select );
            dqMasterData.Close();
            dqMasterData.Free();
            result := false;
            Exit;
        end;

        // 親会社のKojiInfo_Relを削除
        dqMasterData.Close();
        dqMasterData.RequestLive := false;
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('update KojiInfo_Rel                  ');
        dqMasterData.SQL.Add('set RDelKbn_Rel = 1,                ');
        dqMasterData.SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
        dqMasterData.SQL.Add('where MasterKbn   = :pMstKbn        ');
        dqMasterData.SQL.Add(' and  RDelKbn_Rel = :pRDelKbn       ');
        dqMasterData.SQL.Add(' and  NCode       = :pNCode         ');
        dqMasterData.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode   ');

        dqMasterData.ParamByName('pMstKbn'     ).AsInteger := m_nMasterDivision;
        dqMasterData.ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> MOD St
//        dqMasterData.ParamByName('pNCode'      ).AsFloat   := exNCode;
//        dqMasterData.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
        dqMasterData.ParamByName('pNCode'      ).AsString   := FormatFloat('0',exNCode);
        dqMasterData.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

        if ( dqMasterData.ExecSQL = false ) then
        begin
            ErrorMessageDsp( dqMasterData );
            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
            MDataModule^.Rollback ( dbCorp_Select );
            dqMasterData.Close();
            dqMasterData.Free();
            result := false;
            Exit;
        end;

        // KojiInfo2の内部ｺｰﾄﾞを取得する
        dqMasterData.Close();
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('select KojiInfo2NCode from KojiInfo2');
        dqMasterData.SQL.Add('where MasterKbn   = :pMstKbn        ');
        dqMasterData.SQL.Add(' and  NCode       = :pNCode         ');
        dqMasterData.ParamByName('pMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL        dqMasterData.ParamByName('pNCode' ).AsFloat   := exNCode;
        dqMasterData.ParamByName('pNCode' ).AsString   := FormatFloat('0',exNCode);  //<255> ADD

        if ( dqMasterData.Open = false ) then
        begin
            ErrorMessageDsp( dqMasterData );
            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
            MDataModule^.Rollback ( dbCorp_Select );
            dqMasterData.Close();
			dqMasterData.Free();
            result := false;
            Exit;
        end;

        sNCodeIn := '';
        dqMasterData.First();
        while not dqMasterData.Eof do
        begin
            if (Trim(sNCodeIn) <> '') then sNCodeIn := sNCodeIn +',';
            sNCodeIn := sNCodeIn + FloatToStr (dqMasterData.GetFld('KojiInfo2NCode').AsFloat);
            dqMasterData.Next;
        end;

        if ( Trim(sNCodeIn) <> '' ) then
        begin
            // 親会社のKojiInfo2_Relを削除
            dqMasterData.Close();
            dqMasterData.RequestLive := false;
            dqMasterData.SQL.Clear();
            dqMasterData.SQL.Add('update KojiInfo2_Rel                       ');
            dqMasterData.SQL.Add('set RDelKbn_Rel = 1,                       ');
            dqMasterData.SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP        ');
            dqMasterData.SQL.Add('where RDelKbn_Rel = :pRDelKbn              ');
            dqMasterData.SQL.Add(' and  KojiInfo2NCode in (' + sNCodeIn + ') ');
            dqMasterData.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode          ');
            dqMasterData.ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> DEL            dqMasterData.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
            dqMasterData.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD

            if ( dqMasterData.ExecSQL = false ) then
            begin
                ErrorMessageDsp( dqMasterData );
                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                MDataModule^.Rollback ( dbCorp_Select );
                dqMasterData.Close();
                dqMasterData.Free();
                result := false;
                Exit;
            end;
        end;

        // <184> - ST
        // SecHojyoDispInfoのﾒﾝﾃを行う。-> 表示区分を非表示とする。
        dqMasterData.Close();
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('update SecHojyoDispInfo set      ');
        dqMasterData.SQL.Add(' DispKbn    = :DispKbn,          ');
        dqMasterData.SQL.Add(' UpdateTime = CURRENT_TIMESTAMP  ');
        dqMasterData.SQL.Add('where Opekbn          = :Opekbn  ');
        dqMasterData.SQL.Add('  and Masterkbn       = :MstKbn  ');
        dqMasterData.SQL.Add('  and PlaceNCode      = :PNCode  ');
        dqMasterData.SQL.Add('  and NoDispMasterKbn = :NMstKbn ');
        dqMasterData.SQL.Add('  and NCode           = :NCode   ');

        dqMasterData.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
        dqMasterData.ParamByName('MstKbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL        dqMasterData.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
        dqMasterData.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD
        dqMasterData.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL        dqMasterData.ParamByName('NCode'  ).AsFloat   := exNCode;
        dqMasterData.ParamByName('NCode'  ).AsString   := FormatFloat('0',exNCode);  //<255> ADD
        dqMasterData.ParamByName('DispKbn').AsInteger := DISP_OFF;

        if	( not dqMasterData.ExecSQL() ) then
        begin
            ErrorMessageDsp( dqMasterData );
            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
            MDataModule^.Rollback ( dbCorp_Select );
            dqMasterData.Close();
            dqMasterData.Free();
            result := false;
            Exit;
        end;
        // <184> - ED
    end
    else
    begin
        // 自社へ接続
        MDataModule^.SetDBInfoToQuery ( dbCorp_Select, dqMasterData );

        dqMasterData.Close();
        dqMasterData.RequestLive := false;
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('select Count(NCode) CNT from HojyoMA_Rel ');
        dqMasterData.SQL.Add('where MasterKbn   = :pMstKbn             ');
        dqMasterData.SQL.Add('  and NCode       = :pNCode              ');
        dqMasterData.SQL.Add('  and RDelKbn_REL = 0                    ');
        dqMasterData.ParamByName('pMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL        dqMasterData.ParamByName('pNCode' ).AsFloat   := exNCode;
        dqMasterData.ParamByName('pNCode' ).AsString   := FormatFloat('0',exNCode);  //<255> ADD

        if ( dqMasterData.Open = false ) then
        begin
            ErrorMessageDsp( dqMasterData );
            dqMasterData.Close();
			dqMasterData.Free();
            result := false;
            Exit;
        end;

        if ( dqMasterData.FieldByName('CNT').AsInteger <> 0 ) then
        begin
            MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                        '削除', mjInformation, mjOk, mjDefOk);

            dqMasterData.Close();
			dqMasterData.Free();
            result := false;
            Exit;
        end;

        // 実ﾃﾞｰﾀを削除する
        // HojyoMA, KojiInfo, KojiInfo2
        dqMasterData.Close();
        dqMasterData.RequestLive := false;
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('update HojyoMA set                ');
        dqMasterData.SQL.Add('   RDelKbn       = 1              ');
        dqMasterData.SQL.Add('  ,UpdTantoNCode = :UpdTantoNCode '); // <202>
        dqMasterData.SQL.Add('where  MasterKbn = :pMstkbn       ');
        dqMasterData.SQL.Add('  and  SumKbn    = :nSumDivision  ');
        dqMasterData.SQL.Add('  and  RDelKbn   = 0              ');
        dqMasterData.SQL.Add('  and  NCode     = :strExCode     ');
        dqMasterData.ParamByName('pMstKbn'      ).Asinteger  := m_nMasterDivision;
        dqMasterData.ParamByName('nSumDivision' ).AsInteger  := iSumKbn;
//<255> DEL        dqMasterData.ParamByName('strExCode'    ).AsFloat    := exNCode;
        dqMasterData.ParamByName('strExCode'    ).AsString    := FormatFloat('0',exNCode);  //<255> ADD
        dqMasterData.ParamByName('UpdTantoNCode').AsCurrency := m_TantoNCode; // <202>

        if ( dqMasterData.ExecSQL = false ) then
        begin
            ErrorMessageDsp( dqMasterData );
            MDataModule^.Rollback ( dbCorp_Select );
            dqMasterData.Close();
			dqMasterData.Free();
            result := false;
            Exit;
        end;
    end;


    // 自社へ接続
    dqMasterData.Close();
    MDataModule^.SetDBInfoToQuery ( dbCorp_Select, dqMasterData );

    // HojyoTree
    dqMasterData.Close();
    dqMasterData.RequestLive := false;
    dqMasterData.SQL.Clear();
    dqMasterData.SQL.Add('delete from HojyoTree ');
    dqMasterData.SQL.Add('where MasterKbn=:pMKBN and BasedNCode=:pNCODE ');
    dqMasterData.ParamByName('pMKBN' ).AsInteger := m_nMasterDivision;
//<255> DEL    dqMasterData.ParamByName('pNCODE').AsFloat   := exNCode;
    dqMasterData.ParamByName('pNCODE').AsString   := FormatFloat('0',exNCode);  //<255> ADD

	if ( dqMasterData.ExecSQL = false ) then
	begin
		ErrorMessageDsp ( dqMasterData );
		MDataModule^.Rollback ( dbCorp_Select );
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
        end;
		dqMasterData.Close();
        dqMasterData.Free();
		result := false;
		Exit;
	end;

    // 特殊工事指定を削除された場合、諸口を特殊工事とする
    // <173>if ( strGCode = MasterInfo_DMemDataSpHojyoCd1.AsString ) then
    if ( exNCode = MasterInfo_DMemDataSpHojyoNCd1.AsFloat ) then    // <173>
    begin
        // 諸口存在ﾁｪｯｸ
        dqMasterData.Close();
        dqMasterData.SQL.Clear();
        dqMasterData.SQL.Add('select NCode from HojyoMA  ');
        dqMasterData.SQL.Add('where MasterKbn   =:pMKBN  ');
        dqMasterData.SQL.Add('  and RDelKbn     =0       ');
        dqMasterData.SQL.Add('  and Syokuchikbn =1       ');
        dqMasterData.ParamByName('pMKBN').AsInteger := m_nMasterDivision;
        dqMasterData.Open();

		if ( dqMasterData.Eof = false ) then
		begin
			// <173>strSyokuchi := dqMasterData.GetFld('GCode').AsString;
             iSyokuchi   := dqMasterData.GetFld('NCode').AsFloat;   // <173>

			dqMasterData.Close();
            dqMasterData.RequestLive := false;
			dqMasterData.SQL.Clear();
			dqMasterData.SQL.Add('update MasterInfo set    ');
			dqMasterData.SQL.Add('  SpHojyoNCd1	=:SPHOJYO  ');
			dqMasterData.SQL.Add(' ,UpdTantoNCOde =:UpdTantoNCode '); // <202>
			dqMasterData.SQL.Add('where MasterKbn = :pMKBN ');
            dqMasterData.ParamByName('pMKBN'  ).AsInteger := m_nMasterDivision;
			// <173>dqMasterData.ParamByName('SPHOJYO').AsString  := strSyokuchi;
            dqMasterData.ParamByName('SPHOJYO').AsFloat := iSyokuchi;   // <173>
            dqMasterData.ParamByName('UpdTantoNCode').AsFloat :=  m_TantoNCode; // <202>
			if ( dqMasterData.ExecSQL = false ) then
			begin
				ErrorMessageDsp ( dqMasterData );
				MDataModule^.Rollback ( dbCorp_Select );
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                end;
				dqMasterData.Close();
                dqMasterData.Free();
				result := false;
				Exit;
			end;

			// 特殊工事を諸口に変更
			MasterInfo_DMemData.Edit;
			// <173>MasterInfo_DMemDataSpHojyoCd1.AsString := strSyokuchi;
            MasterInfo_DMemDataSpHojyoNCd1.AsFloat := iSyokuchi;  // <173>
			MasterInfo_DMemData.Post;
		end;
	end;

    //	ｺﾐｯﾄ(反映)
    MDataModule^.Commit ( dbCorp_Select );
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        MDataModule^.Commit ( m_SyncMaster.m_cPDBSelect );
    end;

    gbHojyoTreeDelFlag := true;	// 削除ﾌﾗｸﾞOn
    gbKojiInfo2DelFlag := true;	// 削除ﾌﾗｸﾞOn

    // <172>
    // -------------------------------------------------------------------------

    if ( HojyoMA_New = false ) then
	begin
        // 工事総件数を減らす
		Dec(giAllCnt);
		LblRecCnt.Caption := IntToStr(giAllCnt);
	end;
    //<290> start
	if ( iSumKbn = 0) then                         // 0 = 実在 1 = 合計
		fnEdgeTrackerKeihiSeisanMsg;
    //<290> end

	result := true;

end;

//**************************************************************************
//	Proccess	:	契約情報の読み込み（１件）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnKeiyakuRead(strNCode: Extended; iSumKbn: Integer);
var
	qmQuery	  : TMQuery;
	iCount	  : Integer;
	iCountSv  : Integer;
//	iCountMax : Integer;
    sGCode    : String; // <212>
//<TAX> ADD St
    //=========================
    // カラー設定値初期化
    //=========================
    procedure initializeFontColor(mem: TdxMemData);
    begin
        mem.FieldByName('FontColorDate').AsInteger      :=0;
        mem.FieldByName('FontColorNo').AsInteger       :=0;
        mem.FieldByName('FontColorMoney').AsInteger     :=0;
        mem.FieldByName('FontColorTax').AsInteger       :=0;
        mem.FieldByName('FontColorTaxRete').AsInteger   :=0;
    end;
//<TAX> ADD Ed
begin
    iCountSv := 0;
	qmQuery := TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

	with qmQuery do
	begin
		try
// <212> ADD start
            if ( iSumKbn = 0 ) then
            begin
                JKeiyaku_DDataSource.DataSet := nil;
                Jituzai_DdxDBGrid_Kei.BeginUpdate;
	            JKeiyaku_DMemData.DisableControls;
            end
            else
            begin
                GKeiyaku_DDataSource.DataSet := nil;
                Goukei_DdxDBGrid_Kei.BeginUpdate;
	            GKeiyaku_DMemData.DisableControls;
            end;

            // 描画更新の一次停止
//            SendMessage(Jituzai_DdxDBGrid_Kei.Handle, WM_SETREDRAW, 0, 0);
// <212> ADD end

			Close();
			SQL.Clear();
//<255> MOD St
//			SQL.Add('Select * from KojiInfo2                ');
			SQL.Add('Select InfoKbn ');
			SQL.Add('      ,NCode ');
			SQL.Add('      ,ContDate ');
			SQL.Add('      ,ContNo ');
			SQL.Add('      ,ContMoney ');
			SQL.Add('      ,Sales_Tax ');
			SQL.Add('      ,Tax_Rate ');
			SQL.Add('      ,KojiInfo2NCode ');
			SQL.Add('      ,DspOrder ');
			SQL.Add('      ,CsNCode ');
			SQL.Add('      ,OrgNo ');
			SQL.Add('      ,InpType ');
            SQL.Add('from KojiInfo2                ');
//<255> MOD Ed
			SQL.Add('Where NCode=:strNCode and InfoKbn=1    ');
// <168>	SQL.Add('Order by ContDate ASC, ContNo ASC, ContMoney ASC, tax_rate ASC, sales_tax ASC');
			SQL.Add('Order by DspOrder ASC, ContDate ASC, ContNo ASC, ContMoney ASC, tax_rate ASC, sales_tax ASC');   // <168>
//<255> DEL			SetFld('strNCode').AsFloat	:= strNCode;
			SetFld('strNCode').AsString	:= FormatFloat('0',strNCode);  //<255> ADD
			Open;

			if ( iSumKbn = 0 ) then
			begin
                // MemData初期化
				JKeiyaku_DMemData.Close;
				JKeiyaku_DMemData.Open;
			end
			else
			begin
                // MemData初期化
				GKeiyaku_DMemData.Close;
				GKeiyaku_DMemData.Open;
			end;

			iCount      := 0;
            JKeiElement := 1;   // <172>
            GKeiElement := 1;   // <172>

            moKojiInfoMn.CreateKojiInfo(toKojiInfoParam(iSumKbn));  //<TAX> ADD

			// 最大8 件
			while ( Eof = false ) do
			begin
				iCount := iCount + 1;

				if ( iSumKbn = 0 ) then
				begin
					JKeiyaku_DMemData.Append();
                    initializeFontColor(JKeiyaku_DMemData);  //<TAX> ADD

                    // 情報区分
					JKeiyaku_DMemDataInfoKbn.AsInteger			:= GetFld('InfoKbn')  .AsInteger;
                    // 工事内部ｺｰﾄﾞ
					JKeiyaku_DMemDataNCode.AsFloat				:= GetFld('NCode')    .AsFloat;
                    // 契約年月日
					JKeiyaku_DMemDataContDate.AsDateTime		:= GetFld('ContDate') .AsDateTime;
					JKeiyaku_DMemDataPrevContDate.AsDateTime	:= GetFld('ContDate') .AsDateTime;
					JKeiDateSave[iCount]						:= GetFld('ContDate') .AsDateTime;
                    // 契約書No.
					JKeiyaku_DMemDataContNo.AsString			:= GetFld('ContNo')   .AsString;
                    // 契約金額(税込)
					JKeiyaku_DMemDataContMoney.AsCurrency		:= GetFld('ContMoney').AsCurrency;
                    // 消費税額
					JKeiyaku_DMemDataSales_Tax.AsCurrency		:= GetFld('Sales_Tax').AsCurrency;
                    // 消費税率
					JKeiyaku_DMemDataDummyTax_Rate.AsInteger	:= GetFld('Tax_Rate') .AsInteger;
                    JTaxRateSave[iCount]                        := GetFld('Tax_Rate') .AsInteger;       // <169>
                    // 工事契約内部ｺｰﾄﾞ
                    JKeiyaku_DMemDataKojiInfo2NCode.AsFloat     := GetFld('KojiInfo2NCode').AsFloat;    // <172>
                    JKeiNCodeSave[iCount]                       := 0;                                   // <172>
                    // 表示順序
                    JKeiyaku_DMemDataDspOrder.AsInteger         := GetFld('DspOrder') .AsInteger;       // <172>

// <212> ADD start
                    JKeiyaku_DMemDataCostomerNCode.AsFloat      := GetFld('CsNCode') .AsFloat;
                    sGCode  := fnGetGCODE(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    JKeiyaku_DMemDataCostomerGCode.AsString     := fnGetDispCode(sGCode,MKBN_TORIHIKI);
                    JKeiyaku_DMemDataCostomerName.AsString      := fnGetTOKUNAME(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
// <212> ADD end

					// 消費税率(文字表記)
					if ( m_iAccProKbn = 0 ) then
						JKeiyaku_DMemDataTax_RateName.AsString	:= ''
					else
					begin
//<TAX> MOD St

                        // 消費税関連情報セット
                        setContTaxInfo(
                            toKojiInfoParam(iSumKbn),
                            toKojiInfo2Param(JKeiyaku_DMemData),
                            JKeiyaku_DMemData,
                            false);

//<TAX_1> DEL                        moKojiInfoMn.EntryKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);
//<TAX_1> ADD St
                        moKojiInfoMn.EntryKojiInfo2(
                            toKojiInfo2Param(JKeiyaku_DMemData), false,
// <291> MOD st
//                            IfThen(toKojiInfoParam(iSumKbn).SalesBase = SALES_PROGRESS ,
                            IfThen(toKojiInfoParam(iSumKbn).SalesBase <> SALES_COMPLETE ,
// <291> MOD ed
                                JKeiyaku_DMemDataDspOrder.AsInteger, 0)
                                );
//<TAX_1> ADD Ed
{
						if 		( GetFld('Tax_Rate').AsInteger = 9 ) then		// 非課税
//							JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
							JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]	// <201>
						else if ( GetFld('Tax_Rate').AsInteger = 8 ) then		// 不課税 // <201>
							JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
						else
							JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[GetFld('Tax_Rate').AsInteger];
}
//<TAX> MOD Ed
					end;

// <205> ADD start
                    JKeiyaku_DMemDataOrgNo.AsFloat              := GetFld('OrgNo').AsFloat;
                    JKeiyaku_DMemDataInpType.AsInteger          := GetFld('InpType') .AsInteger;
// <205> ADD end

// <225> ADD start
//<TAX> DEL St
// initializeFontColorに移動
{
                    JKeiyaku_DMemDataFontColorDate.AsInteger    := 0;
                    JKeiyaku_DMemDataFontColortNo.AsInteger     := 0;
                    JKeiyaku_DMemDataFontColorMoney.AsInteger   := 0;
                    JKeiyaku_DMemDataFontColorTax.AsInteger     := 0;
                    JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 0;
}
//<TAX> DEL Ed
// <225> ADD end

                    JKeiyaku_DMemDataCheck          .AsInteger := 1;    // <235> ADD

					MemPost_Sw := 1;
					JKeiyaku_DMemData.Post();
					MemPost_Sw := 0;
				end
				else
				begin
					GKeiyaku_DMemData.Append;

                    // 情報区分
					GKeiyaku_DMemDataInfoKbn.AsInteger			:= GetFld('InfoKbn')  .AsInteger;
                    // 工事内部ｺｰﾄﾞ
					GKeiyaku_DMemDataNCode.AsFloat				:= GetFld('NCode')    .AsFloat;
                    // 契約年月日
					GKeiyaku_DMemDataContDate.AsDateTime		:= GetFld('ContDate') .AsDateTime;
					GKeiyaku_DMemDataPrevContDate.AsDateTime	:= GetFld('ContDate') .AsDateTime;
					GKeiDateSave[iCount]						:= GetFld('ContDate') .AsDateTime;
                    // 契約書No.
					GKeiyaku_DMemDataContNo.AsString			:= GetFld('ContNo')   .AsString;
                    // 契約金額(税込)
					GKeiyaku_DMemDataContMoney.AsCurrency		:= GetFld('ContMoney').AsCurrency;
                    // 消費税額
					GKeiyaku_DMemDataSales_Tax.AsCurrency		:= GetFld('Sales_Tax').AsCurrency;
                    // 消費税率
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger	:= GetFld('Tax_Rate') .AsInteger;
                    // 工事契約内部ｺｰﾄﾞ
                    GKeiyaku_DMemDataKojiInfo2NCode.AsFloat     := GetFld('KojiInfo2NCode').AsFloat;    // <172>
                    GKeiNcodeSave[iCount]                       := 0;                                   // <172>
                    // 表示順序
                    GKeiyaku_DMemDataDspOrder.AsInteger         := GetFld('DspOrder') .AsInteger;       // <172>
// <212> ADD start
                    GKeiyaku_DMemDataCostomerNCode.AsFloat      := GetFld('CsNCode') .AsFloat;
                    sGCode := fnGetGCODE(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    GKeiyaku_DMemDataCostomerGCode.AsString     := fnGetDispCode(sGCode,MKBN_TORIHIKI);
                    GKeiyaku_DMemDataCostomerName.AsString      := fnGetTOKUNAME(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
// <212> ADD end

                    // 消費税率(文字表記)
					if ( m_iAccProKbn = 0 ) then
						GKeiyaku_DMemDataTax_RateName.AsString	:= ''
					else
					begin
//<TAX> MOD St
                        setContTaxInfo(
                            toKojiInfoParam(iSumKbn),
                            toKojiInfo2Param(GKeiyaku_DMemData),
                            GKeiyaku_DMemData,
                            false);

                        moKojiInfoMn.EntryKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData), false);
{
						if 		( GetFld('Tax_Rate').AsInteger = 9 ) then		// 非課税
//							GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
							GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]	// <201>
						else if ( GetFld('Tax_Rate').AsInteger = 8 ) then		// 不課税 // <201>
							GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
						else
							GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[GetFld('Tax_Rate').AsInteger];
}
//<TAX> MOD Ed
					end;

// <205> ADD start
                    GKeiyaku_DMemDataOrgNo.AsFloat              := GetFld('OrgNo').AsFloat;
                    GKeiyaku_DMemDataInpType.AsInteger          := GetFld('InpType') .AsInteger;
// <205> ADD end

                    GKeiyaku_DMemDataCheck          .AsInteger := 1;    // <235> ADD

					MemPost_Sw := 1;
					GKeiyaku_DMemData.Post;
					MemPost_Sw := 0;
				end;

				Next;
			end;

			Close;
		finally
// <212> ADD start
            if ( iSumKbn = 0 ) then
            begin
                JKeiyaku_DDataSource.DataSet := JKeiyaku_DMemData;
                Jituzai_DdxDBGrid_Kei.EndUpdate;
                JKeiyaku_DMemData.EnableControls;
            end
            else
            begin
                GKeiyaku_DDataSource.DataSet := GKeiyaku_DMemData;
                Goukei_DdxDBGrid_Kei.EndUpdate;
	            GKeiyaku_DMemData.EnableControls;
            end;
            // 描画更新の再開
//            SendMessage(Jituzai_DdxDBGrid_Kei.Handle, WM_SETREDRAW, 1, 0);
// <212> ADD end

			Free;
		end;
	end;


// <212> ADD start
    if (iCount = 0) and (iSumKbn = 0) then
    begin
        JKeiyaku_DMemData.Append;

        JKeiyaku_DMemDataContDate       .Clear;
        JKeiyaku_DMemDataPrevContDate   .Clear;
        JKeiDateSave[iCountSv+1] := 0;
        JKeiyaku_DMemDataContNo         .Clear;
        JKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
        JKeiyaku_DMemDataTax_RateName   .AsString := '';
        JKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
        JTaxRateSave[iCountSv+1] := 0;
        JKeiyaku_DMemDataSales_Tax      .Clear;
        JKeiyaku_DMemDataContMoney      .Clear;
        JKeiyaku_DMemDataCheck          .AsInteger := 1;
        JKeiyaku_DMemDataKojiInfo2NCode .AsFloat   := 0;
        JKeiyaku_DMemDataDspOrder       .AsInteger := 0;  //<TAX_1> ADD
        JKeiNCodeSave[iCountSv+1] := 0;
        JKeiyaku_DMemDataCostomerGCode.Clear;
        JKeiyaku_DMemDataCostomerName.Clear;
        JKeiyaku_DMemDataCostomerNCode.Clear;
// <225> ADD start
        JKeiyaku_DMemDataFontColorDate.AsInteger    := 0;
        JKeiyaku_DMemDataFontColorNo.AsInteger     := 0;
        JKeiyaku_DMemDataFontColorMoney.AsInteger   := 0;
        JKeiyaku_DMemDataFontColorTax.AsInteger     := 0;
        JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 0;
// <225> ADD end

        JKeiyaku_DMemData.Post();
        JKeiyaku_DMemData.Next();
    end
    else if  (iCount = 0) and (iSumKbn = 1) then
    begin
        GKeiyaku_DMemData.Append;
        GKeiyaku_DMemDataContDate       .Clear;
        GKeiyaku_DMemDataPrevContDate   .Clear;
        GKeiDateSave[iCountSv+1] := 0;
        GKeiyaku_DMemDataContNo         .Clear;
        GKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
        GKeiyaku_DMemDataTax_RateName   .AsString := '';
        GKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
        GTaxRateSave[iCountSv+1] := 0;
        GKeiyaku_DMemDataSales_Tax      .Clear;
        GKeiyaku_DMemDataContMoney      .Clear;
        GKeiyaku_DMemDataCheck          .AsInteger := 1;
        GKeiyaku_DMemDataKojiInfo2NCode .AsFloat   := 0;
        GKeiNCodeSave[iCountSv+1] := 0;
        GKeiyaku_DMemDataCostomerGCode.Clear;
        GKeiyaku_DMemDataCostomerName.Clear;
        GKeiyaku_DMemDataCostomerNCode.Clear;
        GKeiyaku_DMemData.Post();
        GKeiyaku_DMemData.Next();
    end;
// <212> ADD end

// <212> del start
{
	// Check(Dummy)ｾｯﾄ
	if ( iCount < 8 ) then
	begin
		iCountMax := 8 - iCount;
		iCountSv  := iCount;

		for	iCount := 0 to iCountMax - 1 do
		begin
			if ( iSumKbn = 0 ) then
			begin

				JKeiyaku_DMemData.Append;

				JKeiyaku_DMemDataContDate       .Clear;
				JKeiyaku_DMemDataPrevContDate   .Clear;
				JKeiDateSave[iCountSv+1] := 0;
				JKeiyaku_DMemDataContNo         .Clear;
				JKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
				JKeiyaku_DMemDataTax_RateName   .AsString := '';
				JKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
                JTaxRateSave[iCountSv+1] := 0;  // <169>
				JKeiyaku_DMemDataSales_Tax      .Clear;
				JKeiyaku_DMemDataContMoney      .Clear;
				JKeiyaku_DMemDataCheck          .AsInteger := 1;
                JKeiyaku_DMemDataKojiInfo2NCode .AsFloat   := 0;    // <172>
                JKeiNCodeSave[iCountSv+1] := 0;                     // <172>

				JKeiyaku_DMemData.Post();
				JKeiyaku_DMemData.Next();
			end
			else
			begin
				GKeiyaku_DMemData.Append;

				GKeiyaku_DMemDataContDate       .Clear;
				GKeiyaku_DMemDataPrevContDate   .Clear;
				GKeiDateSave[iCountSv+1] := 0;
				GKeiyaku_DMemDataContNo         .Clear;
				GKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
				GKeiyaku_DMemDataTax_RateName   .AsString  := '';
				GKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
				GKeiyaku_DMemDataSales_Tax      .Clear;
				GKeiyaku_DMemDataContMoney      .Clear;
				GKeiyaku_DMemDataCheck          .AsInteger := 1;
                GKeiyaku_DMemDataKojiInfo2NCode .AsFloat   := 0;    // <172>
                GKeiNcodeSave[iCountSv+1] := 0;                     // <172>

				GKeiyaku_DMemData.Post;
				GKeiyaku_DMemData.Next;
			end;
		end;
	end;
}
// <212> del end

	if ( iSumKbn = 0 ) then
	begin
		if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
			JKeiyaku_DMemData.First;
		Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
        JKeiyaku_DMemData.Refresh;
	end
	else
	begin
		if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
			GKeiyaku_DMemData.First;
		Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
        GKeiyaku_DMemData.Refresh;
	end;

end;

//**************************************************************************
//	Proccess	:	入金情報の読み込み（１件）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnNyukinRead(strNCode: Extended; iSumKbn: Integer);
var
	qmQuery	  : TMQuery;
	iCount	  : Integer;
	iCountSv  : Integer;
	iCountMax : Integer;
    sGCode    : String;
    iRowCount : Integer;
begin

	qmQuery	:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

	with qmQuery do
	begin
		try
			Close();
			SQL.Clear();
//<255> MOD St
//			SQL.Add('Select * from KojiInfo2                            ');
			SQL.Add('Select InfoKbn ');
			SQL.Add('      ,NCode ');
			SQL.Add('      ,ContDate ');
			SQL.Add('      ,ContNo ');
			SQL.Add('      ,ContMoney ');
			SQL.Add('      ,Sales_Tax ');
			SQL.Add('      ,Tax_Rate ');
			SQL.Add('      ,KojiInfo2NCode ');
			SQL.Add('      ,DspOrder ');
			SQL.Add('      ,CsNCode ');
			SQL.Add('      ,OrgNo ');
			SQL.Add('      ,InpType ');
			SQL.Add('from KojiInfo2                            ');
//<255> MOD Ed
			SQL.Add('Where NCode=:strNCode and InfoKbn=2                ');
// <168>	SQL.Add('Order by ContDate ASC, ContMoney ASC               ');
			SQL.Add('Order by DspOrder ASC, ContDate ASC, ContMoney ASC '); // <168>
//<255> DEL			SetFld('strNCode').AsFloat	:= strNCode;
			SetFld('strNCode').AsString	:= FormatFloat('0',strNCode);  //<255> ADD
			Open;

			if ( iSumKbn = 0 ) then
			begin
				JNyukin_DMemData.Close;						// MemData初期化
				JNyukin_DMemData.Open;
			end
			else
			begin
				GNyukin_DMemData.Close;						// MemData初期化
				GNyukin_DMemData.Open;
			end;

			iCount      := 0;
            JNyuElement := 1;   // <172>
            GNyuElement := 1;   // <172>

			while ( Eof = false ) do					    // 最大10 件
			begin
				iCount	:= iCount + 1;

				if ( iSumKbn = 0 ) then
				begin
					JNyukin_DMemData.Append;

                    // 情報区分
					JNyukin_DMemDataInfoKbn.AsInteger		:= GetFld('InfoKbn')  .AsInteger;
                    // 工事内部ｺｰﾄﾞ
					JNyukin_DMemDataNCode.AsFloat			:= GetFld('NCode')    .AsFloat;
                    // 入金予定日
					JNyukin_DMemDataContDate.AsDateTime		:= GetFld('ContDate') .AsDateTime;
					JNyukin_DMemDataPrevContDate.AsDateTime	:= GetFld('ContDate') .AsDateTime;
					JNyuDateSave[iCount]					:= GetFld('ContDate') .AsDateTime;
                    // 未使用項目(契約No)
					JNyukin_DMemDataContNo.AsString			:= GetFld('ContNo')   .AsString;
                    // 入金予定額
					JNyukin_DMemDataContMoney.AsCurrency	:= GetFld('ContMoney').AsCurrency;
                    // 未使用項目(消費税額)
					JNyukin_DMemDataSales_Tax.AsCurrency	:= GetFld('Sales_Tax').AsCurrency;
                    // 未使用項目(消費税率)
					JNyukin_DMemDataTax_Rate.AsInteger		:= GetFld('Tax_Rate') .AsInteger;
                    // 入金予定内部ｺｰﾄﾞ
                    JNyukin_DMemDataKojiInfo2NCode.AsFloat  := GetFld('KojiInfo2NCode').AsFloat;    // <172>
                    JNyuNCodeSave[iCount]                   := 0;                                   // <172>
                    // 表示順序
                    JNyukin_DMemDataDspOrder.AsInteger      := GetFld('DspOrder') .AsInteger;       // <172>

// <212> ADD start
                    JNyukin_DMemDataCostomerNCode.AsFloat   := GetFld('CsNCode') .AsFloat;
                    sGCode  := fnGetGCODE(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    JNyukin_DMemDataCostomerGCode.AsString  := fnGetDispCode(sGCode,MKBN_TORIHIKI);
                    JNyukin_DMemDataCostomerName.AsString   := fnGetTOKUNAME(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    JNyukin_DMemDataOrgNo.AsFloat           := GetFld('OrgNo').AsFloat;
                    JNyukin_DMemDataInpType.AsInteger       := GetFld('InpType') .AsInteger;
// <212> ADD end

// <225> ADD start  フォントカラー 0:黒 1:赤
                    JNyukin_DMemDataFontColorDate.AsInteger	     := 0;
                    JNyukin_DMemDataFontColorMony.AsInteger	     := 0;
                   
// <225> ADD end

					JNyukin_DMemData.Post;
				end
				else
				begin
					GNyukin_DMemData.Append;

                    // 情報区分
					GNyukin_DMemDataInfoKbn.AsInteger		:= GetFld('InfoKbn')  .AsInteger;
                    // 工事内部ｺｰﾄﾞ
					GNyukin_DMemDataNCode.AsFloat			:= GetFld('NCode')    .AsFloat;
                    // 入金予定日
					GNyukin_DMemDataContDate.AsDateTime		:= GetFld('ContDate') .AsDateTime;
					GNyukin_DMemDataPrevContDate.AsDateTime	:= GetFld('ContDate') .AsDateTime;
					GNyuDateSave[iCount]					:= GetFld('ContDate') .AsDateTime;
                    // 未使用項目(契約No)
					GNyukin_DMemDataContNo.AsString			:= GetFld('ContNo')   .AsString;
                    // 入金予定額
					GNyukin_DMemDataContMoney.AsCurrency	:= GetFld('ContMoney').AsCurrency;
                    // 未使用項目(消費税額)
					GNyukin_DMemDataSales_Tax.AsCurrency	:= GetFld('Sales_Tax').AsCurrency;
                    // 未使用項目(消費税率)
					GNyukin_DMemDataTax_Rate.AsInteger		:= GetFld('Tax_Rate') .AsInteger;
                    // 入金予定内部ｺｰﾄﾞ
                    GNyukin_DMemDataKojiInfo2NCode.AsFloat  := GetFld('KojiInfo2NCode').AsFloat;    // <172>
                    GNyuNCodeSave[iCount]                   := 0;                                   // <172>
                    // 表示順序
                    GNyukin_DMemDataDspOrder.AsInteger      := GetFld('DspOrder') .AsInteger;       // <172>
// <212> ADD start
                    GNyukin_DMemDataCostomerNCode.AsFloat   := GetFld('CsNCode') .AsFloat;
                    sGCode := fnGetGCODE(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    GNyukin_DMemDataCostomerGCode.AsString  := fnGetDispCode(sGCode,MKBN_TORIHIKI);
                    GNyukin_DMemDataCostomerName.AsString   := fnGetTOKUNAME(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    GNyukin_DMemDataOrgNo.AsFloat           := GetFld('OrgNo').AsFloat;
                    GNyukin_DMemDataInpType.AsInteger       := GetFld('InpType') .AsInteger;
// <212> ADD end
					GNyukin_DMemData.Post;
				end;

				Next;
			end;
		finally
			Close;
			Free;
		end;
	end;

	// Check(Dummy)ｾｯﾄ
	iCountMax := 10 - iCount;
	iCountSv  := iCount;
    iRowCount := iCount;    // <225> ADD

	if ( iCount < 10 ) then
	begin
		for	iCount := 0 to iCountMax - 1 do
		begin
			if ( iSumKbn = 0 ) then
			begin
				JNyukin_DMemData.Append;

				JNyukin_DMemDataContDate        .Clear;
				JNyukin_DMemDataPrevContDate    .Clear;
				JNyuDateSave[iCountSv+1] := 0;
				JNyukin_DMemDataContMoney       .Clear;
				JNyukin_DMemDataCheck           .AsInteger := 1;
                JNyukin_DMemDataKojiInfo2NCode  .AsFloat   := 0;    // <172>
                JNyuNCodeSave[iCountSv+1] := 0;                     // <172>
// <225> ADD start  フォントカラー 0:黒 1:赤
                JNyukin_DMemDataFontColorDate.AsInteger	    := 0;
                JNyukin_DMemDataFontColorMony.AsInteger	    := 0;
                JNyukin_DMemDataDspOrder.AsInteger          := iRowCount + 1;
// <225> ADD end

				JNyukin_DMemData.Post;
				JNyukin_DMemData.Next;
			end
			else
			begin
				GNyukin_DMemData.Append;

				GNyukin_DMemDataContDate        .Clear;
				GNyukin_DMemDataPrevContDate    .Clear;
				GNyuDateSave[iCountSv+1] := 0;
				GNyukin_DMemDataContMoney       .Clear;
				GNyukin_DMemDataCheck           .AsInteger := 1;
                GNyukin_DMemDataKojiInfo2NCode  .AsFloat   := 0;    // <172>
                GNyuNCodeSave[iCountSv+1] := 0;                     // <172>

				GNyukin_DMemData.Post;
				GNyukin_DMemData.Next;
			end;
            inc(iRowCount);     // <225> ADD
		end;
	end;

	if ( iSumKbn = 0 ) then
	begin
		if ( JNyukin_DMemData.RecordCount <> 0 ) then
			JNyukin_DMemData.First;
		Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
        JNyukin_DMemData.Refresh;
	end
	else
	begin
		if ( GNyukin_DMemData.RecordCount <> 0 ) then
			GNyukin_DMemData.First;
		Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
        GNyukin_DMemData.Refresh;
	end;

end;

// <SEI> ADD start
//**************************************************************************
//	Proccess	:	請求・入金予定の読み込み（１件） <SEI>
//	Name		:	K.Katou
//	Date		:	2009.07.23
//	Parameter	:	exNCode		: Extended	（工事内部コード）
//				:	iSumKbn		: Integer	（実在/合計区分）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnSeikyuRead(exNCode: Extended; iSumKbn: Integer);
var
	qmQuery	  : TMQuery;
	iCount	  : Integer;
	iCountSv  : Integer;
    sGCode    : String;
	objMem		: TdxMemData;
	objGrid		: TdxDBGrid;
begin

    iCountSv := 0;
	if iSumKbn = 0 then
	begin
		objGrid := Jituzai_DdxDBGrid_Seikyu;
	end
	else
	begin
		objGrid := Goukei_DdxDBGrid_Seikyu;
	end;

	objMem := TdxMemData(objGrid.DataSource.DataSet);

	qmQuery := TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

	with qmQuery do
	begin
		try
			objGrid.DataSource.DataSet := nil;
			objGrid.BeginUpdate;
			objMem.DisableControls;

 			Close();
			SQL.Clear();
			SQL.Add('Select * from KojiInfo2                ');
			SQL.Add('Where NCode=:parNCode and InfoKbn=2    ');
			SQL.Add('Order by DspOrder ASC, ContDate ASC, ContNo ASC, ContMoney ASC, tax_rate ASC, sales_tax ASC');
			SetFld('parNCode').AsFloat	:= exNCode;
			Open;

            // MemData初期化
			objMem.Close;
			objMem.Open;

			iCount      := 0;
            JSeikyuElement := 1;
            GSeikyuElement := 1;

			// 最大999 件
			while ( Eof = false ) do
			begin
				iCount := iCount + 1;

				if ( iSumKbn = 0 ) then
				begin
					JSeikyu_DMemData.Append();

                    // 情報区分
					JSeikyu_DMemDataInfoKbn.AsInteger		:= GetFld('InfoKbn')  .AsInteger;
                    // 工事内部ｺｰﾄﾞ
					JSeikyu_DMemDataNCode.AsFloat			:= GetFld('NCode')    .AsFloat;
                    // 入金予定日
                    // 値がないと初期値が入ってしまう
                    if GetFld('ContDate') .AsDateTime <> 0 then
                    begin
	                    JSeikyu_DMemDataContDate.AsDateTime		:= GetFld('ContDate') .AsDateTime;
                    end;
                    // <226> MOD end
					JSeikyuDateSave[iCount]					:= GetFld('ContDate') .AsDateTime;
                    // 請求額
					JSeikyu_DMemDataContMoney.AsCurrency	:= GetFld('ContMoney').AsCurrency;
                    // 消費税額
					JSeikyu_DMemDataSales_Tax.AsCurrency	:= GetFld('Sales_Tax').AsCurrency;
                    // 消費税率
					JSeikyu_DMemDataDummyTax_Rate.AsInteger	:= GetFld('Tax_Rate') .AsInteger;
                    JTaxRateSave[iCount]                    := GetFld('Tax_Rate') .AsInteger;
                    // 工事契約内部ｺｰﾄﾞ
                    JSeikyu_DMemDataKojiInfo2NCode.AsFloat  := GetFld('KojiInfo2NCode').AsFloat;
                    JSeikyuNCodeSave[iCount]                := 0;
                    // 表示順序
                    JSeikyu_DMemDataDspOrder.AsInteger      := GetFld('DspOrder') .AsInteger;
					// 請求先
                    JSeikyu_DMemDataCostomerNCode.AsFloat   := GetFld('CsNCode') .AsFloat;
                    sGCode  := fnGetGCODE(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    JSeikyu_DMemDataCostomerGCode.AsString  := fnGetDispCode(sGCode,MKBN_TORIHIKI);
                    JSeikyu_DMemDataCostomerName.AsString   := fnGetTOKUNAME(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);

					// 消費税率(文字表記)
					if ( m_iAccProKbn = 0 ) then
						JSeikyu_DMemDataTax_RateName.AsString	:= ''
					else
					begin
//<TAX> MOD St
                        JSeikyu_DMemDataTax_RateName.AsString	:=
                            moBusiness.GetTaxRate(GetFld('Tax_Rate').AsInteger).TaxName;
{
						if 		( GetFld('Tax_Rate').AsInteger = 9 ) then		// 非課税
							JSeikyu_DMemDataTax_RateName.AsString	:= sTax[4]
						else if ( GetFld('Tax_Rate').AsInteger = 8 ) then		// 不課税
							JSeikyu_DMemDataTax_RateName.AsString	:= sTax[3]
						else
							JSeikyu_DMemDataTax_RateName.AsString	:= sTax[GetFld('Tax_Rate').AsInteger];
}
//<TAX> MOD Ed
					end;
                    // 請求予定年月日
                    if GetFld('SeikyuYoteiDate').AsDateTime <> 0 then
                    begin
						JSeikyu_DMemDataSeikyuYoteiDate.AsDateTime		:= GetFld('SeikyuYoteiDate').AsDateTime;
                    end;
                    // 請求名目
					JSeikyu_DMemDataSeikyuMeimoku.AsString			:= GetFld('SeikyuMeimoku').AsString;
                    // 請求書発行年月日
                    if GetFld('SeikyuOutputDate').AsDateTime <> 0 then
                    begin
						JSeikyu_DMemDataSeikyuOutputDate.AsDateTime		:= GetFld('SeikyuOutputDate').AsDateTime;
                    end;
                    // 請求年月日
                    if GetFld('SeikyuDate').AsDateTime <> 0 then
                    begin
						JSeikyu_DMemDataSeikyuDate.AsDateTime			:= GetFld('SeikyuDate').AsDateTime;
                    end;

					MemPost_Sw := 1;
					JSeikyu_DMemData.Post();
					MemPost_Sw := 0;
				end
				else
				begin
					GSeikyu_DMemData.Append;

                    // 情報区分
					GSeikyu_DMemDataInfoKbn.AsInteger		:= GetFld('InfoKbn')  .AsInteger;
                    // 工事内部ｺｰﾄﾞ
					GSeikyu_DMemDataNCode.AsFloat			:= GetFld('NCode')    .AsFloat;
                    // 入金予定日
                    // 値がないと初期値が入ってしまう
                    if GetFld('ContDate') .AsDateTime <> 0 then
                    begin
	                    GSeikyu_DMemDataContDate.AsDateTime		:= GetFld('ContDate') .AsDateTime;
                    end;

                    if GetFld('ContDate') .AsDateTime <> 0 then
                    begin
    					GSeikyu_DMemDataPrevContDate.AsDateTime	:= GetFld('ContDate') .AsDateTime;
                    end;

					GSeikyuDateSave[iCount]					:= GetFld('ContDate') .AsDateTime;
                    // 請求額
					GSeikyu_DMemDataContMoney.AsCurrency	:= GetFld('ContMoney').AsCurrency;
                    // 消費税額
					GSeikyu_DMemDataSales_Tax.AsCurrency	:= GetFld('Sales_Tax').AsCurrency;
                    // 消費税率
					GSeikyu_DMemDataDummyTax_Rate.AsInteger	:= GetFld('Tax_Rate') .AsInteger;
                    // 工事契約内部ｺｰﾄﾞ
                    GSeikyu_DMemDataKojiInfo2NCode.AsFloat  := GetFld('KojiInfo2NCode').AsFloat;
                    GSeikyuNcodeSave[iCount]                := 0;
                    // 表示順序
                    GSeikyu_DMemDataDspOrder.AsInteger      := GetFld('DspOrder') .AsInteger;
					// 請求先
                    GSeikyu_DMemDataCostomerNCode.AsFloat   := GetFld('CsNCode') .AsFloat;
                    sGCode := fnGetGCODE(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);
                    GSeikyu_DMemDataCostomerGCode.AsString  := fnGetDispCode(sGCode,MKBN_TORIHIKI);
                    GSeikyu_DMemDataCostomerName.AsString   := fnGetTOKUNAME(GetFld('CsNCode').AsFloat,MKBN_TORIHIKI);

                    // 消費税率(文字表記)
					if ( m_iAccProKbn = 0 ) then
						GSeikyu_DMemDataTax_RateName.AsString	:= ''
					else
					begin
//<TAX> MOD St
                        GSeikyu_DMemDataTax_RateName.AsString	:=
                            moBusiness.GetTaxRate(GetFld('Tax_Rate').AsInteger).TaxName;
{
						if 		( GetFld('Tax_Rate').AsInteger = 9 ) then		// 非課税
							GSeikyu_DMemDataTax_RateName.AsString	:= sTax[4]
						else if ( GetFld('Tax_Rate').AsInteger = 8 ) then		// 不課税
							GSeikyu_DMemDataTax_RateName.AsString	:= sTax[3]
						else
							GSeikyu_DMemDataTax_RateName.AsString	:= sTax[GetFld('Tax_Rate').AsInteger];
}
//<TAX> MOD Ed
					end;
                    // 請求予定年月日
                    if GetFld('SeikyuYoteiDate').AsDateTime <> 0 then
                    begin
						GSeikyu_DMemDataSeikyuYoteiDate.AsDateTime		:= GetFld('SeikyuYoteiDate').AsDateTime;
                    end;
                    // 請求名目
					GSeikyu_DMemDataSeikyuMeimoku.AsString			:= GetFld('SeikyuMeimoku').AsString;
                    // 請求書発行年月日
                    if GetFld('SeikyuOutputDate').AsDateTime <> 0 then
                    begin
						GSeikyu_DMemDataSeikyuOutputDate.AsDateTime		:= GetFld('SeikyuOutputDate').AsDateTime;
                    end;
                    // 請求年月日
                    if GetFld('SeikyuDate').AsDateTime <> 0 then
                    begin
						GSeikyu_DMemDataSeikyuDate.AsDateTime			:= GetFld('SeikyuDate').AsDateTime;
                    end;

					MemPost_Sw := 1;
					GSeikyu_DMemData.Post;
					MemPost_Sw := 0;
				end;

				Next;
			end;

			Close;
		finally
            objGrid.DataSource.DataSet := objMem;
            objGrid.EndUpdate;
            objMem.EnableControls;
			Free;
		end;
	end;

    if (iCount = 0) and (iSumKbn = 0) then
    begin
        JSeikyu_DMemData.Append;
        JSeikyu_DMemDataContDate       .Clear;
        JSeikyu_DMemDataPrevContDate   .Clear;
        JSeikyuDateSave[iCountSv+1] := 0;
        JSeikyu_DMemDataDummyTax_Rate  .AsInteger := 0;
        JSeikyu_DMemDataTax_RateName   .AsString := '';
        JSeikyu_DMemDataTax_Rate       .AsInteger := 0;
        JSeikyuRateSave[iCountSv+1] := 0;
        JSeikyu_DMemDataSales_Tax      .Clear;
        JSeikyu_DMemDataContMoney      .Clear;
        JSeikyu_DMemDataCheck          .AsInteger := 1;
        JSeikyu_DMemDataKojiInfo2NCode .AsFloat   := 0;
        JSeikyuNCodeSave[iCountSv+1] := 0;
        JSeikyu_DMemDataCostomerGCode.Clear;
        JSeikyu_DMemDataCostomerName.Clear;
        JSeikyu_DMemDataCostomerNCode.Clear;
        JSeikyu_DMemDataSeikyuYoteiDate.Clear;
        JSeikyu_DMemDataSeikyuMeimoku.Clear;
        JSeikyu_DMemDataSeikyuOutputDate.Clear;
        JSeikyu_DMemDataSeikyuDate.Clear;
        JSeikyu_DMemData.Post();
        JSeikyu_DMemData.Next();
    end
    else if  (iCount = 0) and (iSumKbn = 1) then
    begin
        GSeikyu_DMemData.Append;
        GSeikyu_DMemDataContDate       .Clear;
        GSeikyu_DMemDataPrevContDate   .Clear;
        GSeikyuDateSave[iCountSv+1] := 0;
        GSeikyu_DMemDataDummyTax_Rate  .AsInteger := 0;
        GSeikyu_DMemDataTax_RateName   .AsString := '';
        GSeikyu_DMemDataTax_Rate       .AsInteger := 0;
        GTaxRateSave[iCountSv+1] := 0;
        GSeikyu_DMemDataSales_Tax      .Clear;
        GSeikyu_DMemDataContMoney      .Clear;
        GSeikyu_DMemDataCheck          .AsInteger := 1;
        GSeikyu_DMemDataKojiInfo2NCode .AsFloat   := 0;
        GSeikyuNCodeSave[iCountSv+1] := 0;
        GSeikyu_DMemDataCostomerGCode.Clear;
        GSeikyu_DMemDataCostomerName.Clear;
        GSeikyu_DMemDataCostomerNCode.Clear;
        GSeikyu_DMemDataSeikyuYoteiDate.Clear;
        GSeikyu_DMemDataSeikyuMeimoku.Clear;
        GSeikyu_DMemDataSeikyuOutputDate.Clear;
        GSeikyu_DMemDataSeikyuDate.Clear;
        GSeikyu_DMemData.Post();
        GSeikyu_DMemData.Next();
    end;

	if ( objMem.RecordCount <> 0 ) then
	begin
		objMem.First;
	end;
	objGrid.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
    objMem.Refresh;
end;
// <SEI> ADD end

//*************************************************************************
//*	Proccess	:	契約情報の書き込み（１件）
//*	Name		:	F.Toyama
//*	Date		:	2000.09.25
//*	Parameter	:	strGCode	: String	（工事外部コード）
//*	Retrun		:
//*	History		:	9999.99.99	X.Xxxxxx
//*					XXXXXXXX修正内容
//*                 茂木勇次(LEAD) 2007/04/05(THU)
//*                     洗替から通常更新へ変更(マスター同期の為)  <172>
//*************************************************************************
function TJNTCRP018001f.fnKeiyakuWrite(strNCode: Extended; iSumKbn: Integer): Boolean;
var
	qmQuery   : TMQuery;
    iLoop,
    iDspOrder : Integer;    // <168>
//    iRecCount : Integer;    // <212>
    oCont : TKojiInfo2;  //<TAX_1> ADD
begin

	// 契約情報有無ﾁｪｯｸ
	qmQuery	:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
    //
    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        qmQuery.Close();

        // 親会社DBとMQueryの接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, qmQuery );
    end;
    // ↑↑↑<172>

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    // ﾄﾗﾝｻﾞｸｼｮﾝはfnDataWrite内で行う為、ここではﾄﾗﾝｻﾞｸｼｮﾝを掛けない<172>
	// <172>MDataModule^.BeginTran (dbCorp_Select);

    try
    	with qmQuery do
    	begin
            // 実在
			if ( iSumKbn = 0 ) then
			begin
                iDspOrder := 0; // 登録順序<168>

                // 不要ﾃﾞｰﾀを削除
// <212> MOD start
//                for iLoop := 1 to 8 do
                for iLoop := 1 to 999 do
// <212> MOD end
                begin
                    if ( JKeiNCodeSave[iLoop] <> 0 ) then
                    begin
                        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社のKojiInfo2_Relを削除 (全子社の_Relを削除)
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('update KojiInfo2_Rel                ');
                            SQL.Add('set RDelKbn_Rel = 1,                ');
                            SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
                            SQL.Add('where RDelKbn_Rel    = :pRDelKbn    ');
                            SQL.Add('  and KojiInfo2NCode = :pNCode      ');
                            // <188>SQL.Add(' and  GrpSegNCode    = :pGrpSegNCode');
                            ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> DEL                            ParamByName('pNCode'      ).AsFloat   := JKeiNCodeSave[iLoop];
                            ParamByName('pNCode'      ).AsString   := FormatFloat('0',JKeiNCodeSave[iLoop]);  //<255> ADD
                            // <188>ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
    							Result := false;
    							Exit;
                            end;
                            
                            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                            if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
                            begin
                                Result := false;
    							Exit;
                            end;

                            // <188> - ST
                            // 全社の契約情報の実ﾃﾞｰﾀを削除する
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := JKeiNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',JKeiNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                            // <188> - ED
                            
                        end
                        else
                        begin
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := JKeiNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',JKeiNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end;
                    end;
                end;

                JKeiyaku_DMemData.DisableControls;

                // 更新
                if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
					JKeiyaku_DMemData.First;

				while ( JKeiyaku_DMemData.Eof = false ) do
				begin
					if ( JKeiyaku_DMemDataContDate.AsDateTime <> 0 ) then
					begin
                        inc(iDspOrder); // <168>

						Close();
                        RequestLive	:= false;
                        SQL.Clear();
                        // <172> - ST
                        if ( JKeiyaku_DMemDataKojiInfo2NCode.AsFloat = 0 ) then
                        begin
                            SQL.Add('insert into KojiInfo2 (');
                            SQL.Add('    MasterKbn          ');
                            SQL.Add('   ,InfoKbn            ');
                            SQL.Add('   ,NCode              ');
                            SQL.Add('   ,KSYNCode           ');
                            SQL.Add('   ,ContDate           ');
                            SQL.Add('   ,ContNo             ');
                            SQL.Add('   ,ContMoney          ');
                            SQL.Add('   ,Sales_Tax          ');
                            SQL.Add('   ,Tax_Rate           ');
                            SQL.Add('   ,DspOrder           ');  // <168>
                            SQL.Add('   ,CsNCode            ');  // <212>
                            SQL.Add(') values (             ');
                            SQL.Add('    :MastKBN           ');
                            SQL.Add('   ,:iInfoKbn          ');
                            SQL.Add('   ,:strNCode          ');
                            SQL.Add('   ,0                  ');
                            SQL.Add('   ,:datContDate       ');
                            SQL.Add('   ,:strContNo         ');
                            SQL.Add('   ,:iContMoney        ');
                            SQL.Add('   ,:iSales_Tax        ');
                            SQL.Add('   ,:iTax_Rate         ');
// <212> MOD start
//                            SQL.Add('   ,:iDspOrder)        '); // <168>
                            SQL.Add('   ,:iDspOrder         ');
                            SQL.Add('   ,:exCsNCode)        ');
// <212> MOD end
                        end
                        else
                        begin
                            SQL.Add('update KojiInfo2 set            ');
                            SQL.Add('    ContDate  = :datContDate    ');
                            SQL.Add('   ,ContNo    = :strContNo      ');
                            SQL.Add('   ,ContMoney = :iContMoney     ');
                            SQL.Add('   ,Sales_Tax = :iSales_Tax     ');
                            SQL.Add('   ,Tax_Rate  = :iTax_Rate      ');
                            SQL.Add('   ,DspOrder  = :iDspOrder      ');  // <168>
                            SQL.Add('   ,CsNCode   = :exCsNCode      ');  // <212> ADD
                            SQL.Add('where                           ');
                            SQL.Add('     MasterKbn      = :MastKBN  ');
                            SQL.Add(' and InfoKbn        = :iInfoKbn ');
                            SQL.Add(' and NCode          = :strNCode ');
                            SQL.Add(' and KojiInfo2NCode = :nNCode   ');

//<255> DEL                            SetFld('nNCode' ).AsFloat	 := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                            SetFld('nNCode' ).AsString	 := JKeiyaku_DMemDataKojiInfo2NCode.AsString;  //<255> ADD
                        end;
                        // <172> - ED
						SetFld('MastKBN'    ).AsInteger	 := m_nMasterDivision;
						SetFld('iInfoKbn'   ).AsInteger	 := 1;
//<255> DEL						SetFld('strNCode'   ).AsFloat	 := strNCode;
						SetFld('strNCode'   ).AsString	 := FormatFloat('0',strNCode);  //<255> ADD
						SetFld('datContDate').AsDateTime := JKeiyaku_DMemDataContDate.AsDateTime;
						SetFld('strContNo'  ).AsString	 := JKeiyaku_DMemDataContNo.AsString;
						SetFld('iContMoney' ).AsCurrency := JKeiyaku_DMemDataContMoney.AsCurrency;
						SetFld('iSales_Tax' ).AsCurrency := JKeiyaku_DMemDataSales_Tax.AsCurrency;
						SetFld('iTax_Rate'  ).AsInteger	 := JKeiyaku_DMemDataDummyTax_Rate.AsInteger;
//<TAX_1> DEL                        SetFld('iDspOrder'  ).AsInteger  := iDspOrder; // <168>
//<TAX_1> ADD St
                        if (toKojiInfoParam(0).SalesBase = SALES_COMPLETE) then
                        begin
                            SetFld('iDspOrder'  ).AsInteger  := iDspOrder;
                        end
                        else
                        begin
                            if JKeiyaku_DMemDataDspOrder.AsInteger <> 0 then
                            begin
                                SetFld('iDspOrder'  ).AsInteger :=
                                    JKeiyaku_DMemDataDspOrder.AsInteger;
                            end
                            else
                            begin
                                oCont := moKojiInfoMn.GetKojiInfo2(JKeiyaku_DMemData.RecNo);
                                if (oCont <> nil) then
                                begin
                                    oCont.DspOrder2 := moKojiInfoMn.NewDspOrder;
                                    SetFld('iDspOrder'  ).AsInteger := oCont.DspOrder2;
                                end
                                else
                                begin
                                    SetFld('iDspOrder'  ).AsInteger  := iDspOrder;
                                end;
                            end;
                        end;
//<TAX_1> ADD Ed
                        SetFld('exCsNCode'  ).AsFloat    := JKeiyaku_DMemDataCostomerNCode.AsFloat;     // <212> ADD

						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp(qmQuery);
							// <172>MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
							Result := false;
							Exit;
						end;
					end;

					JKeiyaku_DMemData.Next;
				end;

                JKeiyaku_DMemData.EnableControls;

				// <172> MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end
            // 合計
			else
			begin
                iDspOrder := 0; // 登録順序<168>

                // 不要ﾃﾞｰﾀを削除
// <212> MOD start
//                for iLoop := 1 to 8 do
                for iLoop := 1 to 999 do
// <212> MOD end
                begin
                    if ( GKeiNCodeSave[iLoop] <> 0 ) then
                    begin
                        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社のKojiInfo2_Relを削除 (全子社の_Relを削除)
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('update KojiInfo2_Rel                ');
                            SQL.Add('set RDelKbn_Rel = 1,                ');
                            SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
                            SQL.Add('where RDelKbn_Rel    = :pRDelKbn    ');
                            SQL.Add('  and KojiInfo2NCode = :pNCode      ');
                            // <188>    SQL.Add(' and  GrpSegNCode    = :pGrpSegNCode');
                            ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> DEL                            ParamByName('pNCode'      ).AsFloat   := GKeiNCodeSave[iLoop];
                            ParamByName('pNCode'      ).AsString   := FormatFloat('0',GKeiNCodeSave[iLoop]);  //<255> ADD
                            // <188>ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
    							Result := false;
    							Exit;
                            end;

                            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                            if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
                            begin
                                Result := false;
    							Exit;
                            end;

                            // <188> - ST
                            // 全社の契約情報の実ﾃﾞｰﾀを削除する
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := GKeiNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',GKeiNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                            // <188> - ED
                        end
                        else
                        begin
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := GKeiNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',GKeiNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end;
                    end;
                end;

                GKeiyaku_DMemData.DisableControls;

				if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
					GKeiyaku_DMemData.First;

				while ( GKeiyaku_DMemData.Eof = false ) do
				begin
					if ( GKeiyaku_DMemDataContDate.AsDateTime <> 0 ) then
					begin
                        inc(iDspOrder); // <168>

						Close();
                        RequestLive	:= false;
						SQL.Clear();

                        // <172> - ST
                        if ( GKeiyaku_DMemDataKojiInfo2NCode.AsFloat = 0 ) then
                        begin
                            SQL.Add('insert into KojiInfo2 (');
                            SQL.Add('    MasterKbn          ');
                            SQL.Add('   ,InfoKbn            ');
                            SQL.Add('   ,NCode              ');
                            SQL.Add('   ,KSYNCode           ');
                            SQL.Add('   ,ContDate           ');
                            SQL.Add('   ,ContNo             ');
                            SQL.Add('   ,ContMoney          ');
                            SQL.Add('   ,Sales_Tax          ');
                            SQL.Add('   ,Tax_Rate           ');
                            SQL.Add('   ,DspOrder           ');  // <168>
                            SQL.Add('   ,CsNCode            ');  // <212>
                            SQL.Add(') values (             ');
                            SQL.Add('    :MastKBN           ');
                            SQL.Add('   ,:iInfoKbn          ');
                            SQL.Add('   ,:strNCode          ');
                            SQL.Add('   ,0                  ');
                            SQL.Add('   ,:datContDate       ');
                            SQL.Add('   ,:strContNo         ');
                            SQL.Add('   ,:iContMoney        ');
                            SQL.Add('   ,:iSales_Tax        ');
                            SQL.Add('   ,:iTax_Rate         ');
// <212> MOD start
//                            SQL.Add('   ,:iDspOrder)        '); // <168>
                            SQL.Add('   ,:iDspOrder         ');
                            SQL.Add('   ,:exCsNCode)        ');
// <212> MOD end
                        end
                        else
                        begin
                            SQL.Add('update KojiInfo2 set            ');
                            SQL.Add('    ContDate  = :datContDate    ');
                            SQL.Add('   ,ContNo    = :strContNo      ');
                            SQL.Add('   ,ContMoney = :iContMoney     ');
                            SQL.Add('   ,Sales_Tax = :iSales_Tax     ');
                            SQL.Add('   ,Tax_Rate  = :iTax_Rate      ');
                            SQL.Add('   ,DspOrder  = :iDspOrder      ');  // <168>
                            SQL.Add('   ,CsNCode   = :exCsNCode      ');  // <212> ADD
                            SQL.Add('where                           ');
                            SQL.Add('     MasterKbn      = :MastKBN  ');
                            SQL.Add(' and InfoKbn        = :iInfoKbn ');
                            SQL.Add(' and NCode          = :strNCode ');
                            SQL.Add(' and KojiInfo2NCode = :nNCode   ');

//<255> DEL                            SetFld('nNCode' ).AsFloat	 := GKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                            SetFld('nNCode' ).AsString	 := GKeiyaku_DMemDataKojiInfo2NCode.AsString;  //<255> ADD
                        end;

						SetFld('MastKbn'    ).AsInteger	 := m_nMasterDivision;
						SetFld('iInfoKbn'   ).AsInteger	 := 1;
//<255> DEL						SetFld('strNCode'   ).AsFloat	 := strNCode;
						SetFld('strNCode'   ).AsString	 := FormatFloat('0',strNCode);  //<255> ADD
						SetFld('datContDate').AsDateTime := GKeiyaku_DMemDataContDate.AsDateTime;
						SetFld('strContNo'  ).AsString	 := GKeiyaku_DMemDataContNo.AsString;
						SetFld('iContMoney' ).AsCurrency := GKeiyaku_DMemDataContMoney.AsCurrency;
						SetFld('iSales_Tax' ).AsCurrency := GKeiyaku_DMemDataSales_Tax.AsCurrency;
						SetFld('iTax_Rate'  ).AsInteger	 := GKeiyaku_DMemDataDummyTax_Rate.AsInteger;
                        SetFld('iDspOrder'  ).AsInteger  := iDspOrder; // <168>
                        SetFld('exCsNCode'  ).AsFloat    := GKeiyaku_DMemDataCostomerNCode.AsFloat;     // <212> ADD

						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp(qmQuery);
							// <172>MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
							Result := false;
							Exit;
						end;

					end;

					GKeiyaku_DMemData.Next;
				end;

                GKeiyaku_DMemData.EnableControls;

				// <172>MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end;
        end;
	finally
        qmQuery.Close();
		qmQuery.Free();
	end;

    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
        if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
        begin
            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( dbCorp_Select );
            result := false;
            Exit;
        end;
    end;

	Result := true;

end;

//**************************************************************************
//	Proccess	:	入金情報の書き込み（１件）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnNyukinWrite(strNCode: Extended; iSumKbn: Integer): Boolean;
var
	qmQuery	  : TMQuery;
    iLoop,
    iDspOrder : Integer;    // <168>
begin

	// 入金情報有無ﾁｪｯｸ
	qmQuery := TMQuery.Create ( Self );
	MDataModule^.SetDBInfoToQuery ( dbCorp_Select, qmQuery );

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
    //
    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        qmQuery.Close();

        // 親会社DBとMQueryの接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, qmQuery );
    end;
    // ↑↑↑<172>

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    // ﾄﾗﾝｻﾞｸｼｮﾝはfnDataWrite内で行う為、ここではﾄﾗﾝｻﾞｸｼｮﾝを掛けない<172>
	// <172>MDataModule^.BeginTran (dbCorp_Select);

    try
    	with qmQuery do
    	begin
			// 実在
			if ( iSumKbn = 0 ) then
			begin
                iDspOrder := 0; // 登録順序<168>

                // 不要ﾃﾞｰﾀを削除
                for iLoop := 1 to 10 do
                begin
                    if ( JNyuNCodeSave[iLoop] <> 0 ) then
                    begin
                        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社のKojiInfo2_Relを削除 (全子社の_Relを削除)
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('update KojiInfo2_Rel                ');
                            SQL.Add('set RDelKbn_Rel = 1,                ');
                            SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
                            SQL.Add('where RDelKbn_Rel    = :pRDelKbn    ');
                            SQL.Add('  and KojiInfo2NCode = :pNCode      ');
                            // <188> SQL.Add(' and  GrpSegNCode    = :pGrpSegNCode');
                            ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> DEL                            ParamByName('pNCode'      ).AsFloat   := JNyuNCodeSave[iLoop];
                            ParamByName('pNCode'      ).AsString   := FormatFloat('0',JNyuNCodeSave[iLoop]);  //<255> ADD
                            // <188> ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
    							Result := false;
    							Exit;
                            end;

                            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                            if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
                            begin
                                Result := false;
    							Exit;
                            end;

                            // <188> - ST
                            // 全社の入金情報の実ﾃﾞｰﾀを削除する
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := JNyuNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',JNyuNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                            // <188> - ED
                        end
                        else
                        begin
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := JNyuNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',JNyuNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end;
                    end;
                end;

                JNyukin_DMemData.DisableControls;

				if ( JNyukin_DMemData.RecordCount <> 0 ) then
					JNyukin_DMemData.First;

				while ( JNyukin_DMemData.Eof = false ) do
				begin
					if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
					begin
                        inc(iDspOrder); // <168>

						Close();
                        RequestLive	:= false;
						SQL.Clear();

                        // <172> - ST
                        if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat = 0 ) then
                        begin
    						SQL.Add('insert into KojiInfo2 (');
    						SQL.Add('    MasterKbn          ');
    						SQL.Add('   ,InfoKbn            ');
    						SQL.Add('   ,NCode              ');
    						SQL.Add('   ,KSYNCode           ');
    						SQL.Add('   ,ContDate           ');
    						SQL.Add('   ,ContNo             ');
    						SQL.Add('   ,ContMoney          ');
    						SQL.Add('   ,Sales_Tax          ');
    						SQL.Add('   ,Tax_Rate           ');
                            SQL.Add('   ,DspOrder           ');  // <168>
                            SQL.Add('   ,CsNCode            ');  // <212> ADD
    						SQL.Add(') values (             ');
    						SQL.Add('    :MastKbn           ');
    						SQL.Add('   ,:iInfoKbn          ');
    						SQL.Add('   ,:strNCode          ');
    						SQL.Add('   ,0                  ');
    						SQL.Add('   ,:datContDate       ');
    						SQL.Add('   ,:strContNo         ');
    						SQL.Add('   ,:iContMoney        ');
    						SQL.Add('   ,:iSales_Tax        ');
    						SQL.Add('   ,:iTax_Rate         ');
                            SQL.Add('   ,:iDspOrder         ');  // <168>
                            SQL.Add('   ,:exCsNCode)        ');  // <212> ADD
                        end
                        else
                        begin
                            SQL.Add('update KojiInfo2 set            ');
                            SQL.Add('    ContDate  = :datContDate    ');
                            SQL.Add('   ,ContNo    = :strContNo      ');
                            SQL.Add('   ,ContMoney = :iContMoney     ');
                            SQL.Add('   ,Sales_Tax = :iSales_Tax     ');
                            SQL.Add('   ,Tax_Rate  = :iTax_Rate      ');
                            SQL.Add('   ,DspOrder  = :iDspOrder      ');  // <168>
                            SQL.Add('   ,CsNCode   = :exCsNCode      ');  // <212> ADD
                            SQL.Add('where                           ');
                            SQL.Add('     MasterKbn      = :MastKBN  ');
                            SQL.Add(' and InfoKbn        = :iInfoKbn ');
                            SQL.Add(' and NCode          = :strNCode ');
                            SQL.Add(' and KojiInfo2NCode = :nNCode   ');

//<255> DEL                            SetFld('nNCode' ).AsFloat	 := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                            SetFld('nNCode' ).AsString	 := JNyukin_DMemDataKojiInfo2NCode.AsString;  //<255> ADD
                        end;
                        // <172> - ED

						SetFld('MastKbn'    ).AsInteger	 := m_nMasterDivision;
						SetFld('iInfoKbn'   ).AsInteger	 := 2;
//<255> DEL						SetFld('strNCode'   ).AsFloat	 := strNCode;
						SetFld('strNCode'   ).AsString	 := FormatFloat('0',strNCode);  //<255> ADD
						SetFld('datContDate').AsDateTime := JNyukin_DMemDataContDate.AsDateTime;
						SetFld('strContNo'  ).AsString	 := JNyukin_DMemDataContNo.AsString;
						SetFld('iContMoney' ).AsCurrency := JNyukin_DMemDataContMoney.AsCurrency;
						SetFld('iSales_Tax' ).AsCurrency := JNyukin_DMemDataSales_Tax.AsCurrency;
						SetFld('iTax_Rate'  ).AsInteger	 := JNyukin_DMemDataTax_Rate.AsInteger;
                        SetFld('iDspOrder'  ).AsInteger  := iDspOrder; // <168>
                        SetFld('exCsNCode'   ).AsFloat   := JNyukin_DMemDataCostomerNCode.AsFloat; // <212> ADD

						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp(qmQuery);
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
							// <172>MDataModule^.Rollback ( dbCorp_Select );
							Result := false;
							Exit;
						end;

					end;

					JNyukin_DMemData.Next;
				end;

                JNyukin_DMemData.EnableControls;

                // ｺﾐｯﾄ(反映)
				// <172>MDataModule^.Commit (dbCorp_Select);
			end
            // 合計
			else
			begin
                iDspOrder := 0; // 登録順序<168>

                // 不要ﾃﾞｰﾀを削除
                for iLoop := 1 to 10 do
                begin
                    if ( GNyuNCodeSave[iLoop] <> 0 ) then
                    begin
                        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社のKojiInfo2_Relを削除 (全子社の_Relを削除)
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('update KojiInfo2_Rel                ');
                            SQL.Add('set RDelKbn_Rel = 1,                ');
                            SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
                            SQL.Add('where RDelKbn_Rel    = :pRDelKbn    ');
                            SQL.Add('  and KojiInfo2NCode = :pNCode      ');
                            // <188>SQL.Add(' and  GrpSegNCode    = :pGrpSegNCode');
                            ParamByName('pRDelKbn'    ).AsInteger := 0;
//<255> DEL                            ParamByName('pNCode'      ).AsFloat   := GNyuNCodeSave[iLoop];
                            ParamByName('pNCode'      ).AsString   := FormatFloat('0',GNyuNCodeSave[iLoop]);  //<255> ADD
                            // <188>ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
    							Result := false;
    							Exit;
                            end;

                            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                            if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
                            begin
                                Result := false;
    							Exit;
                            end;

                            // <188> - ST
                            // 全社の入金情報の実ﾃﾞｰﾀを削除する
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := GNyuNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',GNyuNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                            // <188> - ED
                        end
                        else
                        begin
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
//<255> DEL                            ParamByName('pNCode').AsFloat := GNyuNCodeSave[iLoop];
                            ParamByName('pNCode').AsString := FormatFloat('0',GNyuNCodeSave[iLoop]);  //<255> ADD

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end;
                    end;
                end;

                GNyukin_DMemData.DisableControls;

				if ( GNyukin_DMemData.RecordCount <> 0 ) then
					GNyukin_DMemData.First;

				while ( GNyukin_DMemData.Eof = false ) do
				begin
					if ( GNyukin_DMemDataContDate.AsDateTime <> 0 ) then
					begin
                        inc(iDspOrder); // <168>
                        RequestLive	:= false;

						Close();
						SQL.Clear();

                        // <172> - ST
                        if ( GNyukin_DMemDataKojiInfo2NCode.AsFloat = 0 ) then
                        begin
                            SQL.Add('insert into KojiInfo2 (');
                            SQL.Add('    MasterKbn          ');
                            SQL.Add('   ,InfoKbn            ');
                            SQL.Add('   ,NCode              ');
                            SQL.Add('   ,KSYNCode           ');
                            SQL.Add('   ,ContDate           ');
                            SQL.Add('   ,ContNo             ');
                            SQL.Add('   ,ContMoney          ');
                            SQL.Add('   ,Sales_Tax          ');
                            SQL.Add('   ,Tax_Rate           ');
                            SQL.Add('   ,DspOrder           ');  // <168>
                            SQL.Add('   ,CsNCode            ');  // <212> ADD
                            SQL.Add(') values (             ');
                            SQL.Add('    :MastKBN           ');
                            SQL.Add('   ,:iInfoKbn          ');
                            SQL.Add('   ,:strNCode          ');
                            SQL.Add('   ,0                  ');
                            SQL.Add('   ,:datContDate       ');
                            SQL.Add('   ,:strContNo         ');
                            SQL.Add('   ,:iContMoney        ');
                            SQL.Add('   ,:iSales_Tax        ');
                            SQL.Add('   ,:iTax_Rate         ');
                            SQL.Add('   ,:iDspOrder         ');  // <168>
                            SQL.Add('   ,:exCsNCode)        ');  // <212> ADD
                        end
                        else
                        begin
                            SQL.Add('update KojiInfo2 set            ');
                            SQL.Add('    ContDate  = :datContDate    ');
                            SQL.Add('   ,ContNo    = :strContNo      ');
                            SQL.Add('   ,ContMoney = :iContMoney     ');
                            SQL.Add('   ,Sales_Tax = :iSales_Tax     ');
                            SQL.Add('   ,Tax_Rate  = :iTax_Rate      ');
                            SQL.Add('   ,DspOrder  = :iDspOrder      ');  // <168>
                            SQL.Add('   ,CsNCode   = :exCsNCode      ');  // <212> ADD
                            SQL.Add('where                           ');
                            SQL.Add('     MasterKbn      = :MastKBN  ');
                            SQL.Add(' and InfoKbn        = :iInfoKbn ');
                            SQL.Add(' and NCode          = :strNCode ');
                            SQL.Add(' and KojiInfo2NCode = :nNCode   ');

//<255> DEL                            SetFld('nNCode' ).AsFloat	 := GNyukin_DMemDataKojiInfo2NCode.AsFloat;
                            SetFld('nNCode' ).AsString	 := GNyukin_DMemDataKojiInfo2NCode.AsString;  //<255> ADD
                        end;

						SetFld('MastKbn'    ).AsInteger	 := m_nMasterDivision;
						SetFld('iInfoKbn'   ).AsInteger	 := 2;
//<255> DEL						SetFld('strNCode'   ).AsFloat	 := uvNCODE;
						SetFld('strNCode'   ).AsString	 := FormatFloat('0',uvNCODE);  //<255> ADD
						SetFld('datContDate').AsDateTime := GNyukin_DMemDataContDate.AsDateTime;
						SetFld('strContNo'  ).AsString	 := GNyukin_DMemDataContNo.AsString;
						SetFld('iContMoney' ).AsCurrency := GNyukin_DMemDataContMoney.AsCurrency;
						SetFld('iSales_Tax' ).AsCurrency := GNyukin_DMemDataSales_Tax.AsCurrency;
						SetFld('iTax_Rate'  ).AsInteger	 := GNyukin_DMemDataTax_Rate.AsInteger;
                        SetFld('iDspOrder'  ).AsInteger  := iDspOrder; // <168>
                        SetFld('exCsNCode'   ).AsFloat    := GNyukin_DMemDataCostomerNCode.AsFloat; // <212> ADD

						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp(qmQuery);
                            // ﾛｰﾙﾊﾞｯｸ(破棄)
							// <172>MDataModule^.Rollback ( dbCorp_Select );
							result := false;
							Exit;
						end;
					end;

					GNyukin_DMemData.Next;
				end;

                GNyukin_DMemData.EnableControls;

                //	ｺﾐｯﾄ(反映)
				// <172>MDataModule^.Commit (dbCorp_Select);
			end;
        end;
    finally
        qmQuery.Close();
		qmQuery.Free();
	end;

    // ｸﾞﾙｰﾌﾟ会計<172> - ST
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
        if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
        begin
            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( dbCorp_Select );
            result := false;
            Exit;
        end;
    end;
    // <172> - ED
	Result := true;

end;

//<SEI> ADD St
//*************************************************************************
//*	Proccess	:	請求・入金予定の書き込み（１件）<SEI>
//*	Name		:	K.Katou(PRIME)
//*	Date		:	2009.07.22
//*	Parameter	:	exNCode		: Extended	（工事内部コード）
//*				:	iSumKbn		: Integer	（実在/合計区分）
//*	Retrun		:
//*	History		:	9999.99.99	X.Xxxxxx
//*					XXXXXXXX修正内容
//*************************************************************************
function TJNTCRP018001f.fnSeikyuWrite(exNCode: Extended; iSumKbn: Integer): Boolean;
var
	qmQuery   : TMQuery;
    iLoop,
    iDspOrder : Integer;
begin

	// 請求・入金予定有無ﾁｪｯｸ
	qmQuery	:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理
    //
    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        qmQuery.Close();

        // 親会社DBとMQueryの接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, qmQuery );
    end;

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    // ﾄﾗﾝｻﾞｸｼｮﾝはfnDataWrite内で行う為、ここではﾄﾗﾝｻﾞｸｼｮﾝを掛けない
	// MDataModule^.BeginTran (dbCorp_Select);

    try
    	with qmQuery do
    	begin
            // 実在
			if ( iSumKbn = 0 ) then
			begin
                iDspOrder := 0; // 登録順序

                // 不要ﾃﾞｰﾀを削除
                for iLoop := 1 to 999 do
                begin
                    if ( JSeikyuNCodeSave[iLoop] <> 0 ) then
                    begin
                        //  ｸﾞﾙｰﾌﾟ管理処理
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社のKojiInfo2_Relを削除 (全子社の_Relを削除)
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('update KojiInfo2_Rel                ');
                            SQL.Add('set RDelKbn_Rel = 1,                ');
                            SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
                            SQL.Add('where RDelKbn_Rel    = :pRDelKbn    ');
                            SQL.Add('  and KojiInfo2NCode = :pNCode      ');
                            ParamByName('pRDelKbn'    ).AsInteger := 0;
                            ParamByName('pNCode'      ).AsFloat   := JSeikyuNCodeSave[iLoop];

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
    							Result := false;
    							Exit;
                            end;

                            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                            if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
                            begin
                                Result := false;
    							Exit;
                            end;

                            // 全社の請求・入金予定の実ﾃﾞｰﾀを削除する
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
                            ParamByName('pNCode').AsFloat := JSeikyuNCodeSave[iLoop];

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;

                        end
                        else
                        begin
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
                            ParamByName('pNCode').AsFloat := JSeikyuNCodeSave[iLoop];

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end;
                    end;
                end;

                JSeikyu_DMemData.DisableControls;

                // 更新
                if ( JSeikyu_DMemData.RecordCount <> 0 ) then
					JSeikyu_DMemData.First;

				while ( JSeikyu_DMemData.Eof = false ) do
				begin
                	// 請求予定日が入っていれば更新
					if ( JSeikyu_DMemDataSeikyuYoteiDate.AsDateTime <> 0 ) then
					begin
                        inc(iDspOrder);

						Close();
                        RequestLive	:= false;
                        SQL.Clear();

                        if ( JSeikyu_DMemDataKojiInfo2NCode.AsFloat = 0 ) then
                        begin
                            SQL.Add('insert into KojiInfo2 (' +
                            '    MasterKbn          ' +
                            '   ,InfoKbn            ' +
                            '   ,NCode              ' +
                            '   ,KSYNCode           ' +
                            '   ,ContDate           ' +
                            '   ,ContMoney          ' +
                            '   ,Sales_Tax          ' +
                            '   ,Tax_Rate           ' +
                            '   ,DspOrder           ' +
                            '   ,CsNCode            ' +
                            '   ,SeikyuYoteiDate    ' +
                            '   ,SeikyuMeimoku    	' +
                            '   ,SeikyuOutputDate   ' +
                            '   ,SeikyuDate   		' +
                            ') values (             ' +
                            '    :MastKBN           ' +
                            '   ,:iInfoKbn          ' +
                            '   ,:parNCode          ' +
                            '   ,0                  ' +
                            '   ,:datContDate       ' +
                            '   ,:iContMoney        ' +
                            '   ,:iSales_Tax        ' +
                            '   ,:iTax_Rate         ' +
                            '   ,:iDspOrder         ' +
                            '   ,:exCsNCode        	' +
                            '   ,:datSeikyuYoteiDate    ' +
                            '   ,:strSeikyuMeimoku    	' +
                            '   ,:datSeikyuOutputDate   ' +
                            '   ,:datSeikyuDate)   		');
                        end
                        else
                        begin
                            SQL.Add('update KojiInfo2 set    ' +
                            '    ContDate  = :datContDate    ' +
                            '   ,ContMoney = :iContMoney     ' +
                            '   ,Sales_Tax = :iSales_Tax     ' +
                            '   ,Tax_Rate  = :iTax_Rate      ' +
                            '   ,DspOrder  = :iDspOrder      ' +
                            '   ,CsNCode   = :exCsNCode      ' +
                            '   ,SeikyuYoteiDate	= :datSeikyuYoteiDate  ' +
                            '   ,SeikyuMeimoku = 	:strSeikyuMeimoku      ' +
                            '   ,SeikyuOutputDate = :datSeikyuOutputDate   ' +
                            '   ,SeikyuDate = 		:datSeikyuDate   	   ' +
                            'where                           ' +
                            '     MasterKbn      = :MastKBN  ' +
                            ' and InfoKbn        = :iInfoKbn ' +
                            ' and NCode          = :parNCode ' +
                            ' and KojiInfo2NCode = :nNCode   ');

                            SetFld('nNCode' ).AsFloat	 := JSeikyu_DMemDataKojiInfo2NCode.AsFloat;
                        end;

						SetFld('MastKBN'    ).AsInteger	 := m_nMasterDivision;
						SetFld('iInfoKbn'   ).AsInteger	 := 2;
						SetFld('parNCode'   ).AsFloat	 := exNCode;
						SetFld('datContDate').AsDateTime := JSeikyu_DMemDataContDate.AsDateTime;
						SetFld('iContMoney' ).AsCurrency := JSeikyu_DMemDataContMoney.AsCurrency;
						SetFld('iSales_Tax' ).AsCurrency := JSeikyu_DMemDataSales_Tax.AsCurrency;
						SetFld('iTax_Rate'  ).AsInteger	 := JSeikyu_DMemDataDummyTax_Rate.AsInteger;
                        SetFld('iDspOrder'  ).AsInteger  := iDspOrder;
                        SetFld('exCsNCode'  ).AsFloat    := JSeikyu_DMemDataCostomerNCode.AsFloat;
                        SetFld('strSeikyuMeimoku'  ).AsString    		:= JSeikyu_DMemDataSeikyuMeimoku.AsString;
                        // 日付はnullの場合ｸﾘｱ
	                    if (JSeikyu_DMemDataSeikyuYoteiDate.AsDateTime <> 0) and
	                        (not JSeikyu_DMemDataSeikyuYoteiDate.IsNull) then
						begin
	                        SetFld('datSeikyuYoteiDate').AsDate := JSeikyu_DMemDataSeikyuYoteiDate.AsDateTime;
						end
	                    else
	                    begin
	                        ParamByName('datSeikyuYoteiDate').Clear;
	                        ParamByName('datSeikyuYoteiDate').ParamType := ptInput;
	                        ParamByName('datSeikyuYoteiDate').DataType := ftDate;
	                    end;

	                    if (JSeikyu_DMemDataSeikyuOutputDate.AsDateTime <> 0) and
	                        (not JSeikyu_DMemDataSeikyuOutputDate.IsNull) then
						begin
	                        SetFld('datSeikyuOutputDate').AsDate := JSeikyu_DMemDataSeikyuOutputDate.AsDateTime;
						end
	                    else
	                    begin
	                        ParamByName('datSeikyuOutputDate').Clear;
	                        ParamByName('datSeikyuOutputDate').ParamType := ptInput;
	                        ParamByName('datSeikyuOutputDate').DataType := ftDate;
	                    end;

	                    if (JSeikyu_DMemDataSeikyuDate.AsDateTime <> 0) and
	                        (not JSeikyu_DMemDataSeikyuDate.IsNull) then
						begin
	                        SetFld('datSeikyuDate').AsDate := JSeikyu_DMemDataSeikyuDate.AsDateTime;
						end
	                    else
	                    begin
	                        ParamByName('datSeikyuDate').Clear;
	                        ParamByName('datSeikyuDate').ParamType := ptInput;
	                        ParamByName('datSeikyuDate').DataType := ftDate;
	                    end;



						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp(qmQuery);
							Result := false;
							Exit;
						end;
					end;

					JSeikyu_DMemData.Next;
				end;

                JSeikyu_DMemData.EnableControls;

			end
            // 合計
			else
			begin
                iDspOrder := 0; // 登録順序

                // 不要ﾃﾞｰﾀを削除
                for iLoop := 1 to 999 do
                begin
                    if ( GSeikyuNCodeSave[iLoop] <> 0 ) then
                    begin
                        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                            // 親会社のKojiInfo2_Relを削除 (全子社の_Relを削除)
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('update KojiInfo2_Rel                ');
                            SQL.Add('set RDelKbn_Rel = 1,                ');
                            SQL.Add('    UpdDateTM   = CURRENT_TIMESTAMP ');
                            SQL.Add('where RDelKbn_Rel    = :pRDelKbn    ');
                            SQL.Add('  and KojiInfo2NCode = :pNCode      ');
                            ParamByName('pRDelKbn'    ).AsInteger := 0;
                            ParamByName('pNCode'      ).AsFloat   := GSeikyuNCodeSave[iLoop];

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
    							Result := false;
    							Exit;
                            end;

                            // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                            if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
                            begin
                                Result := false;
    							Exit;
                            end;

                            // 全社の請求・入金予定の実ﾃﾞｰﾀを削除する
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
                            ParamByName('pNCode').AsFloat := GSeikyuNCodeSave[iLoop];

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end
                        else
                        begin
                            Close();
                            RequestLive := false;
                            SQL.Clear();
                            SQL.Add('delete from KojiInfo2          ');
                            SQL.Add('where KojiInfo2NCode = :pNCode ');
                            ParamByName('pNCode').AsFloat := GSeikyuNCodeSave[iLoop];

                            if ( ExecSQL = false ) then
                            begin
                                ErrorMessageDsp(qmQuery);
                                Result := false;
                                Exit;
                            end;
                        end;
                    end;
                end;

                GSeikyu_DMemData.DisableControls;

				if ( GSeikyu_DMemData.RecordCount <> 0 ) then
					GSeikyu_DMemData.First;

				while ( GSeikyu_DMemData.Eof = false ) do
				begin
                	// 請求予定日が入っていれば更新
					if ( GSeikyu_DMemDataSeikyuYoteiDate.AsDateTime <> 0 ) then
					begin
                        inc(iDspOrder);

						Close();
                        RequestLive	:= false;
						SQL.Clear();

                        if ( GSeikyu_DMemDataKojiInfo2NCode.AsFloat = 0 ) then
                        begin
                            SQL.Add('insert into KojiInfo2 (' +
                            '    MasterKbn          ' +
                            '   ,InfoKbn            ' +
                            '   ,NCode              ' +
                            '   ,KSYNCode           ' +
                            '   ,ContDate           ' +
                            '   ,ContMoney          ' +
                            '   ,Sales_Tax          ' +
                            '   ,Tax_Rate           ' +
                            '   ,DspOrder           ' +
                            '   ,CsNCode            ' +
                            '   ,SeikyuYoteiDate    ' +
                            '   ,SeikyuMeimoku    	' +
                            '   ,SeikyuOutputDate   ' +
                            '   ,SeikyuDate   		' +
                            ') values (             ' +
                            '    :MastKBN           ' +
                            '   ,:iInfoKbn          ' +
                            '   ,:parNCode          ' +
                            '   ,0                  ' +
                            '   ,:datContDate       ' +
                            '   ,:iContMoney        ' +
                            '   ,:iSales_Tax        ' +
                            '   ,:iTax_Rate         ' +
                            '   ,:iDspOrder         ' +
                            '   ,:exCsNCode        	' +
                            '   ,:datSeikyuYoteiDate    ' +
                            '   ,:strSeikyuMeimoku    	' +
                            '   ,:datSeikyuOutputDate   ' +
                            '   ,:datSeikyuDate)   		');
                        end
                        else
                        begin
                            SQL.Add('update KojiInfo2 set    ' +
                            '    ContDate  = :datContDate    ' +
                            '   ,ContMoney = :iContMoney     ' +
                            '   ,Sales_Tax = :iSales_Tax     ' +
                            '   ,Tax_Rate  = :iTax_Rate      ' +
                            '   ,DspOrder  = :iDspOrder      ' +
                            '   ,CsNCode   = :exCsNCode      ' +
                            '   ,SeikyuYoteiDate	= :datSeikyuYoteiDate  ' +
                            '   ,SeikyuMeimoku = 	:strSeikyuMeimoku      ' +
                            '   ,SeikyuOutputDate = :datSeikyuOutputDate   ' +
                            '   ,SeikyuDate = 		:datSeikyuDate   	   ' +
                            'where                           ' +
                            '     MasterKbn      = :MastKBN  ' +
                            ' and InfoKbn        = :iInfoKbn ' +
                            ' and NCode          = :parNCode ' +
                            ' and KojiInfo2NCode = :nNCode   ');

                            SetFld('nNCode' ).AsFloat	 := GSeikyu_DMemDataKojiInfo2NCode.AsFloat;
                        end;

						SetFld('MastKbn'    ).AsInteger	 := m_nMasterDivision;
						SetFld('iInfoKbn'   ).AsInteger	 := 2;
						SetFld('parNCode'   ).AsFloat	 := exNCode;
						SetFld('datContDate').AsDateTime := GSeikyu_DMemDataContDate.AsDateTime;
						SetFld('iContMoney' ).AsCurrency := GSeikyu_DMemDataContMoney.AsCurrency;
						SetFld('iSales_Tax' ).AsCurrency := GSeikyu_DMemDataSales_Tax.AsCurrency;
						SetFld('iTax_Rate'  ).AsInteger	 := GSeikyu_DMemDataDummyTax_Rate.AsInteger;
                        SetFld('iDspOrder'  ).AsInteger  := iDspOrder;
                        SetFld('exCsNCode'  ).AsFloat    := GSeikyu_DMemDataCostomerNCode.AsFloat;
                        SetFld('strSeikyuMeimoku'  ).AsString    		:= GSeikyu_DMemDataSeikyuMeimoku.AsString;
                        // 日付がnullの場合ｸﾘｱ
	                    if (GSeikyu_DMemDataSeikyuYoteiDate.AsDateTime <> 0) and
	                        (not GSeikyu_DMemDataSeikyuYoteiDate.IsNull) then
						begin
	                        SetFld('datSeikyuYoteiDate').AsDate := GSeikyu_DMemDataSeikyuYoteiDate.AsDateTime;
						end
	                    else
	                    begin
	                        ParamByName('datSeikyuYoteiDate').Clear;
	                        ParamByName('datSeikyuYoteiDate').ParamType := ptInput;
	                        ParamByName('datSeikyuYoteiDate').DataType := ftDate;
	                    end;

	                    if (GSeikyu_DMemDataSeikyuOutputDate.AsDateTime <> 0) and
	                        (not GSeikyu_DMemDataSeikyuOutputDate.IsNull) then
						begin
	                        SetFld('datSeikyuOutputDate').AsDate := GSeikyu_DMemDataSeikyuOutputDate.AsDateTime;
						end
	                    else
	                    begin
	                        ParamByName('datSeikyuOutputDate').Clear;
	                        ParamByName('datSeikyuOutputDate').ParamType := ptInput;
	                        ParamByName('datSeikyuOutputDate').DataType := ftDate;
	                    end;

	                    if (GSeikyu_DMemDataSeikyuDate.AsDateTime <> 0) and
	                        (not GSeikyu_DMemDataSeikyuDate.IsNull) then
						begin
	                        SetFld('datSeikyuDate').AsDate := GSeikyu_DMemDataSeikyuDate.AsDateTime;
						end
	                    else
	                    begin
	                        ParamByName('datSeikyuDate').Clear;
	                        ParamByName('datSeikyuDate').ParamType := ptInput;
	                        ParamByName('datSeikyuDate').DataType := ftDate;
	                    end;


						if ( ExecSQL = false ) then
						begin
							ErrorMessageDsp(qmQuery);
							Result := false;
							Exit;
						end;

					end;

					GSeikyu_DMemData.Next;
				end;

                GSeikyu_DMemData.EnableControls;
			end;
        end;
	finally
        qmQuery.Close();
		qmQuery.Free();
	end;

    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
        if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo2, 1) = false ) then
        begin
            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
            MDataModule^.Rollback( dbCorp_Select );
            result := false;
            Exit;
        end;
    end;

	Result := true;
end;
//<SEI> ADD Ed

(*
//**************************************************************************
//*	Proccess	:	契約情報の削除（１件）
//*	Name		:	N.Nabe
//*	Date		:	2000.11.15
//*	Parameter	:	strGCode	: String	（工事外部コード）
//*	Retrun		:
//*	History		:	9999.99.99	X.Xxxxxx
//*					XXXXXXXX修正内容
//*                 茂木勇次(LEAD) 2007/04/05(THU)
//*                     現状実ﾃﾞｰﾀを削除しているが、該当ﾃﾞｰﾀが存在していた場合は
//*                     情報をｸﾘｱする形に変更。
//**************************************************************************
function TJNTCRP018001f.fnKeiyakuDelete(strNCode: Extended): Boolean;
var
	qmQuery : TMQuery;
begin

	// 契約情報有無ﾁｪｯｸ
	qmQuery := TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
    //
    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        qmQuery.Close();

        // 親会社DBとMQueryの接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, qmQuery );
    end;
    // ↑↑↑<172>
    // -------------------------------------------------------------------------

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    // ﾄﾗﾝｻﾞｸｼｮﾝはfnDataWrite内で行う為、ここではﾄﾗﾝｻﾞｸｼｮﾝを掛けない<172>
	// <172>MDataModule^.BeginTran (dbCorp_Select);

    try
    	with qmQuery do
    	begin
			Close();
			SQL.Clear();
			SQL.Add('select * from KojiInfo2    ');
			SQL.Add('where NCode   = :strNCode  ');
            SQL.Add('  and InfoKbn = 1          ');
			SetFld('strNCode').AsFloat := strNCode;
			Open;

			// 契約情報削除 <172>契約情報のｸﾘｱに変更。
			if ( Eof = false ) then
			begin
				Close();
				SQL.Clear();
				SQL.Add('delete KojiInfo2           ');
				SQL.Add('where NCode   = :strNCode  ');
                SQL.Add('  and InfoKbn = 1          ');
				SetFld('strNCode').AsFloat := strNCode;

				if ( ExecSQL = false ) then
				begin
					ErrorMessageDsp(qmQuery);
                    // <172>MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					Result := false;
					Exit;
				end;

				// <172>MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
				gbKojiInfo2DelFlag	:= true;				        // 削除ﾌﾗｸﾞ
			end;
        end;
    finally
        qmQuery.Close;
   	    qmQuery.Free;
    end;

	Result := true;

end;
*) // <172>

(*
//**************************************************************************
//	Proccess	:	入金情報の削除（１件）
//	Name		:	N.Nabe
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnNyukinDelete(strNCode: Extended): Boolean;
var
	qmQuery : TMQuery;
begin

	qmQuery		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
    //
    //  ｸﾞﾙｰﾌﾟ管理を行っている場合は、接続ﾃﾞｰﾀﾍﾞｰｽを親会社に切り替える
    //  通常は、自ﾃﾞｰﾀﾍﾞｰｽに接続されます。
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        qmQuery.Close();

        // 親会社DBとMQueryの接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, qmQuery );
    end;
    // ↑↑↑<172>
    // -------------------------------------------------------------------------

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    // ﾄﾗﾝｻﾞｸｼｮﾝはfnDataWrite内で行う為、ここではﾄﾗﾝｻﾞｸｼｮﾝを掛けない<172>
	// <172>MDataModule^.BeginTran (dbCorp_Select);

    try
    	with qmQuery do
    	begin
			Close();
			SQL.Clear();
			SQL.Add('select * from KojiInfo2    ');
   			SQL.Add('Where NCode   = :strNCode  ');
            SQL.Add('  and InfoKbn = 2          ');
		   	SetFld('strNCode').AsFloat := strNCode;
			Open;

			if ( Eof = false ) then
			begin
				Close();
				SQL.Clear();
				SQL.Add('delete KojiInfo2           ');
	   			SQL.Add('Where NCode   = :strNCode  ');
                SQL.Add('  and InfoKbn = 2          ');
			   	SetFld('strNCode').AsFloat := strNCode;

				if ( ExecSQL = false ) then
				begin
					ErrorMessageDsp(qmQuery);
					// <172>MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					Result := false;
					Exit;
				end;

				// <172>MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
				gbKojiInfo2DelFlag	:= true;					    // 削除ﾌﾗｸﾞ
			end;
        end;
    finally
        qmQuery.Close();
        qmQuery.Free();
    end;

	Result := true;
    
end;
*) // <172>

//**************************************************************************
//	Proccess	:	加算体系の書き込み（新規）
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnHojyoTreeWrite (strGCode: String): Boolean;
var
	qmQuery	  : TMQuery;
	WkEntNo	  : Integer;
	stWorkRec : ^TreeViewRec;
    stWorkRec_Dummy	: TreeViewRec;  //<KSN> ADD
begin

	qmQuery := TMQuery.Create ( Self );
	MDataModule^.SetDBInfoToQuery ( dbCorp_Select, qmQuery );
//<KSN> MOD St
//	stWorkRec := TBaseNode.Data;
    if PPanelTree.Visible = False then
    begin
        stWorkRec_Dummy.nDivision := 9;
        stWorkRec_Dummy.strExCode := '          ';
        stWorkRec_Dummy.iNCode := 0;
        stWorkRec_Dummy.iSyokuti := 0;
        stWorkRec := @stWorkRec_Dummy;
    end
    else
        stWorkRec	:= TBaseNode.Data;
//<KSN> MOD Ed
    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    // ﾄﾗﾝｻﾞｸｼｮﾝはfnDataWrite内で行う為、ここではﾄﾗﾝｻﾞｸｼｮﾝを掛けない<172>
	// <172> MDataModule^.BeginTran ( dbCorp_Select );

    try
	    with qmQuery do
	    begin
			// EntNo算出
			Close();
			SQL.Clear();
//<255> DEL			SQL.Add('Select * from HojyoTree        ');
			SQL.Add('Select EntNo from HojyoTree        ');  //<255> ADD
			SQL.Add('Where MasterKbn = :pMKBN       ');
            SQL.Add('  and SumNCode  = :strSumCode  ');
			SQL.Add('Order by EntNo DESC            ');
			SetFld('pMKBN'     ).AsInteger := m_nMasterDivision;
//<255> DEL			SetFld('strSumCode').AsFloat   := stWorkRec^.iNCode;
			SetFld('strSumCode').AsString   := FormatFloat('0',stWorkRec^.iNCode);  //<255> ADD
			Open;

			if ( Eof = true ) then
				WkEntNo	:= 100
			else
			begin
				WkEntNo	:= GetFld('EntNo').AsInteger;
				WkEntNo	:= WkEntNo div 100;
				WkEntNo	:= WkEntNo * 100;
				WkEntNo	:= WkEntNo + 100;
			end;

			// HojyoTree書込み
            RequestLive	:= false;
			Close();
			SQL.Clear();
			SQL.Add('insert into HojyoTree (');
			SQL.Add('    MasterKbn          ');
			SQL.Add('   ,PatternNo          ');
			SQL.Add('   ,SumNCode           ');
			SQL.Add('   ,EntNo              ');
			SQL.Add('   ,BasedNCode         ');
			SQL.Add('   ,AddKbn             ');
			SQL.Add('   ,UpdTantoNCode      '); // <202>
			SQL.Add(') values (             ');
			SQL.Add('    :iMasterKbn        ');
			SQL.Add('   ,0                  ');
			SQL.Add('   ,:strSumCode        ');
			SQL.Add('   ,:iEntNo            ');
			SQL.Add('   ,:strBasedCode      ');
			SQL.Add('   ,:iAddKbn           ');
			SQL.Add('   ,:iUpdTantoNCode)   '); // <202>

			SetFld('iMasterKbn'  ).AsInteger := m_nMasterDivision;
			SetFld('strSumCode'  ).AsFloat 	 := stWorkRec^.iNCode;
			SetFld('iEntNo'      ).AsInteger := WkEntNo;
			SetFld('strBasedCode').AsFloat   := uvNCODE;
			SetFld('iAddKbn'     ).AsInteger := 0;
            SetFld('iUpdTantoNCode').AsFloat  := m_TantoNCode; // <202>

			if ( ExecSQL = false ) then
			begin
				ErrorMessageDsp(qmQuery);
                // ﾛｰﾙﾊﾞｯｸ(破棄)
                // <172>MDataModule^.Rollback (dbCorp_Select);
				qmQuery.Close;
				result := false;
				Exit;
			end;

            // ｺﾐｯﾄ(反映)
			// <172>MDataModule^.Commit (dbCorp_Select);

            // 加算体系1更新ﾌﾗｸﾞON
			gbHojyoTree2Flag := true;
        end;

    finally
        qmQuery.Close();
	    qmQuery.Free();
    end;

	result := true;
    
end;


//**************************************************************************
//	Proccess	:	TreeViewを追加or変更
//	Attension	:	DB書き込み後に実行する。
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnTreeUpdate(strGCode: String; iSumKbn: Integer);
var
	stWorkRec	: ^TreeViewRec;
	stWorkNode	: TTreeNode;
	NodeInsSW	: Boolean;
	MyTreeNode	: TTreeNode;
	stName		: String;
	iCut		: Integer;
	stCode		: String;
// <165> MOD start
	//iCode		: Currency;
    iCode       : Int64;
// <165> MOD end
    stWorkRec2   : ^TreeViewRec; //<289-6>追加
begin
    if PPanelTree.Visible = False then Exit;  //<KSN> ADD
	fnDataRead (strGCode, iSumKbn, 0);					// 実在工事読み込み

	NodeInsSW	:= true;

	// 変更
	stWorkNode := VTreeView.Items[0];
	while stWorkNode <> nil do
	begin
		stWorkRec	:= stWorkNode.Data;
		if strGCode = stWorkRec^.strExCode then
		begin
			stCode := HojyoMA_DMQuery.GetFld('GCode').AsString;
			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
                    if stCode <> '' then
					begin
						iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(stCode, 1, iCut);
					end;
				end
				else
				begin
					if stCode <> '' then
					begin
						iCode := StrToInt64(stCode);
                        // <165> MOD start
					 //	stCode := CurrToStr(iCode);
                        stCode := IntToStr(iCode);
                        // <165> MOD end
					end;
				end;
			end;

			stWorkRec^.strName		:= HojyoMA_DMQuery.GetFld('SimpleName').AsString;
			stName := stCode + ' ' + HojyoMA_DMQuery.GetFld('SimpleName').AsString;
			stWorkNode.Text			:= stName;
			NodeInsSW				:= false;
		end;
		stWorkNode	:= stWorkNode.GetNext;
	end;

	{追加}
	if NodeInsSW = true then
	begin
		New (stWorkRec);
		MyTreeNode					:= TBaseNode;
		stWorkRec^.nDivision		:= HojyoMA_DMQuery.GetFld('SumKbn').AsInteger;
		stWorkRec^.strExCode		:= HojyoMA_DMQuery.GetFld('GCode').AsString;
		stWorkRec^.strName			:= HojyoMA_DMQuery.GetFld('SimpleName').AsString;
		stWorkRec^.iNCode			:= HojyoMA_DMQuery.GetFld('NCode').AsInteger;
		stWorkRec^.iSyokuti			:= HojyoMA_DMQuery.GetFld('SyokuchiKbn').AsInteger;

		stCode := HojyoMA_DMQuery.GetFld('GCode').AsString;
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
                if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
                    // <165> MOD start
				   //	stCode := CurrToStr(iCode);
                    stCode := IntToStr(iCode);
                    // <165> MOD end
				end;
			end;
		end;
		stName := stCode + ' ' + HojyoMA_DMQuery.GetFld('SimpleName').AsString;
                            
		stWorkNode					:= VTreeView.Items.AddChildObject (MyTreeNode, stName, stWorkRec);

		if HojyoMA_DMQuery.GetFld('SumKbn').AsInteger = 0 then
		begin
			stWorkNode.ImageIndex		:= 0;
			stWorkNode.SelectedIndex	:= 1;
		end
		else
		begin
			stWorkNode.ImageIndex		:= 2;
			stWorkNode.SelectedIndex	:= 3;
		end;

		// <289-6>追加↓
		stWorkRec2 := MyTreeNode.Data;

        // 貼り付け先と同一の工事に追加
		MakeNodePaste(MyTreeNode, stWorkRec2^.strExCode, stWorkRec2^.nDivision);
		// <289-6>追加↑

		TBaseNode.Expand(false);
	end;
end;


//**************************************************************************
//	Proccess	:	Drag&Drop時の加算チェック
//	Name		:	F.Toyama
//	Date		:	2000.09.25
//	Parameter	:	nDrapNode	: TTreeNode
//				:	nDropNode	: TTreeNode
//	Retrun		:	Integer		: 0 = Check OK
//				:				: 1	= 総合計工事をドラッグ
//				:				: 2 = 総合計工事にドロップ
//				:				: 3 = 重複加算
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnDropCheck(nDragNode: TTreeNode; nDropNode: TTreeNode) : Integer;

var
	stRecDrag	: ^TreeViewRec;
	stRecDrop	: ^TreeViewRec;
	nTreeNode	:	TTreeNode;
	QueryChk	: TMQuery;
begin
	Result			:= 0;
	stRecDrag		:= nDragNode.Data;
	stRecDrop		:= nDropNode.Data;
	if stRecDrop^.nDivision = 0 then
	begin
		nTreeNode := nDropNode.Parent;
		nDropNode := nTreeNode;
		stRecDrop := nDropNode.Data;
	end;

	// 同一加算先には貼り付け禁止
	if stRecDrag^.Incode = stRecDrop^.Incode then
	begin
		MjsMessageBoxEX(Self,'２重加算の為コピーすることができません。','確認',mjInformation,mjOk, mjDefOk);
		exit;
	end;

	{加算順序入れ替え？}
	if nDragNode.Parent = nDropNode then
		exit;

	{合計工事にドロップしたかチェック}
{	if stRecDrag^.nDivision = 0 then						// 0:実在工事
	begin
		if stRecDrop^.nDivision = 1 then					// 1:合計工事
			nTreeNode		:= VTreeView.DropTarget;
	end;

	{加算順序入れ替え？}
{	if nDragNode.Parent <> nTreeNode then
	begin
		{総合計工事をドラッグ？}
{		if stRecDrag^.nDivision = 9 then
			Result	:= 1
		else
		begin
			{総合計工事以外にドロップ？}
{			if stRecDrop^.nDivision <> 9 then
			begin
				nTreeNode		:= nTreeNode.getFirstChild;
				{重複加算？}
{				while nTreeNode <> nil do
				begin
					stRecDrop	:= nTreeNode.Data;
					if stRecDrag^.strExCode = stRecDrop^.strExCode then
					begin
						Result	:= 3;
						Break;
					end;
					nTreeNode	:= nTreeNode.getNextSibling;
				end;
			end;
		end;
	end;
}

	// 加算体系ﾁｪｯｸ(移動先ノードに同一ﾚｺｰﾄﾞがあるかどうか)
	QueryChk := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryChk);
	try
		with QueryChk do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
//<255> DEL			SQL.Add('select * from HojyoTree');
			SQL.Add('select EntNo from HojyoTree');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:iSum AND BasedNCode=:iBased');
			SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
//<255> DEL			SetFld('iSum').AsFloat          := stRecDrop^.InCode;
			SetFld('iSum').AsString          := FormatFloat('0',stRecDrop^.InCode);  //<255> ADD
//<255> DEL			SetFld('iBased').AsFloat        := stRecDrag^.InCode;
			SetFld('iBased').AsString        := FormatFloat('0',stRecDrag^.InCode);  //<255> ADD

			Open;
			if EOF = false then
			begin
				Result	:= -1;
				MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjInformation,mjOk, mjDefOk);
				abort;
			end;
		end;
	finally
		QueryChk.Free;
	end;

end;



//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP018001f.fnRebuildTreeViewItems ()                                                 */
//*																									*/
//*	目的	: 工事登録処理 ﾂﾘｰﾋﾞｭｰ再作成処理                                                        */
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//***************************************************************************************************/
procedure   TJNTCRP018001f.fnRebuildTreeViewItems ();
var
	stWorkRec  : ^TreeViewRec;
	cNode      : TTreeNode;
	strItemName: String;
	stName	   : String;
begin
    if PPanelTree.Visible = False then Exit;  //<KSN> ADD
	VTreeView.Items.BeginUpdate;

    // <156> - ST
//	stName := '総合計'+ MasterInfo_DMemDataJHojyoName.AsString;
	stName := MasterInfo_DMemDataJHojyoName.AsString + '体系';
    // <156> - ED

	VTreeView.Items.Clear;
	New (stWorkRec);

	stWorkRec^.nDivision    	:= 9;
	stWorkRec^.strExCode    	:= '          ';
	stWorkRec^.strName      	:= stName;
	stWorkRec^.iNCode	    	:= 0;
	stWorkRec^.iSyokuti	    	:= 0;
	strItemName					:= stName;
	Root_PMTab.BorderCaption	:= ' ' + stName;

	cNode   := VTreeView.Items.AddChildObject (Nil, strItemName, stWorkRec);

	cNode.ImageIndex			:= 2;
	cNode.SelectedIndex			:= 3;

	fnCreateTreeViewItems (cNode);

	VTreeView.Selected := VTreeView.Items[0];
	gbTreeClick := false;

	if TreeView_EnsureVisible(VTreeView.Handle, VTreeView.Selected.ItemID) then
		VTreeView.Invalidate;

	VTreeView.FullExpand ();
	VTreeView.Items.EndUpdate;

end;


//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP018001f.fnCreatTreeViewItems (TTreeNode)                                       */
//*																									*/
//*	目的	: 工事登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ作成処理                                                     */
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//*-------------------------------------------------------------------------------------------------*/
//*																									*/
//*	ﾊﾟﾗﾒｰﾀ	: cSrcNode  = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)                                                          */
//*                                                                                                 */
//***************************************************************************************************/
procedure   TJNTCRP018001f.fnCreateTreeViewItems (cSrcNode: TTreeNode);
var
	dqMasterTree : TMQuery;
	stWorkRec    : ^TreeViewRec;
begin
	stWorkRec    := cSrcNode.Data;
	dqMasterTree := TMQuery.Create (Self);

	MDataModule^.SetDBInfoToQuery ( dbCorp_Select, dqMasterTree );

	try
		with (dqMasterTree) do
		begin
			Close ();
			SQL.Clear();
			SQL.Add('SELECT ht.BasedNCode, hm.SumKbn, hm.SimpleName, hm.NCode , hm.GCode, hm.Syokuchikbn ');
            SQL.Add('FROM HojyoTree ht, HojyoMA hm ');
			SQL.Add('WHERE ht.MasterKbn = :pMKBN and ht.SumNCode = :strSumCode ');
			SQL.Add('and hm.Masterkbn = ht.MasterKbn and hm.RDelKbn =0 and hm.NCode = ht.BasedNCode');
			SQL.Add('ORDER BY EntNo DESC');

            SetFld('pMKBN'     ).AsInteger := m_nMasterDivision;
//<255> DEL			SetFld('strSumCode').AsFloat   := stWorkRec^.InCode;
			SetFld('strSumCode').AsString   := FormatFloat('0',stWorkRec^.InCode);   //<255> ADD
			Open ();

			while (not EOF) do
			begin
				fnCreateTreeViewItem ( dqMasterTree, cSrcNode );
				NEXT;
			end;
		end;
	finally
        dqMasterTree.Close();
		dqMasterTree.Free();
	end;
end;


//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP018001f.fnCreatTreeViewItem (TMQuery; TTreeNode)                               */
//*																									*/
//*	目的	: 工事登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑ作成処理                                                     */
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//*-------------------------------------------------------------------------------------------------*/
//*																									*/
//*	ﾊﾟﾗﾒｰﾀ	: dqMasterTree  = 補助加算体系ﾏｽﾀ用ｸｴﾘｰ                                                 */
//*			  cSrcNode      = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)                                                      */
//*                                                                                                 */
//***************************************************************************************************/
procedure   TJNTCRP018001f.fnCreateTreeViewItem (dqMasterTree: TMQuery; cSrcNode: TTreeNode);
var
	stWorkRec   : ^TreeViewRec;
	cNode       : TTreeNode;
	iCut		: Integer;
	stCode		: String;
	stName		: String;
// <165> MOD start
	//iCode		: Currency;
    iCode       : Int64;
// <165> MOD end
begin
	New (stWorkRec);

	with (dqMasterTree) do
	begin
		stWorkRec^.strExCode	:= FieldByName ('GCode' ).AsString;
//		stWorkRec^.strExCode	:= FieldByName ('BasedNCode' ).AsString;
		stWorkRec^.nDivision	:= FieldByName ('SumKbn'    ).AsInteger;
		stWorkRec^.strName		:= FieldByName ('SimpleName').AsString;
		stWorkRec^.iNCode		:= FieldByName ('NCode' ).AsInteger;
		stWorkRec^.iSyokuti		:= FieldByName ('SyokuchiKbn' ).AsInteger;

//		stCode := FieldByName ('BasedNCode' ).AsString;
		stCode := FieldByName ('GCode' ).AsString;
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
                if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
                    // <165> MOD start
				   //	stCode := CurrToStr(iCode);
                    stCode := IntToStr(iCode);
                    // <165> MOD end
				end;
			end;
		end;
		stName := stCode + ' ' + FieldByName ('SimpleName').AsString;

		cNode	:= VTreeView.Items.AddChildObjectFirst (cSrcNode, stName, stWorkRec);

		if  (stWorkRec^.nDivision = 0) then
		begin
			cNode.ImageIndex    := IC_JCLOSE;
			cNode.SelectedIndex := IC_JOPEN;
		end
		else
		begin
			cNode.ImageIndex    := IC_GMCLOSE;
			cNode.SelectedIndex := IC_GMOPEN;

			fnCreateTreeViewItems (cNode);
		end;
	end;
end;

//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP018001f.fnRebuildTreeViewItemsHagure ()										*/
//*																									*/
//*	目的	: 工事登録処理 ﾂﾘｰﾋﾞｭｰはぐれマスター作成処理											*/
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//***************************************************************************************************/
function   TJNTCRP018001f.fnRebuildTreeViewItemsHagure (): Boolean;
var
	cNode      : TTreeNode;
begin
//<KSN> ADD St
    if PPanelTree.Visible = False then
    begin
        result := True;
        Exit;
    end;
//<KSN> ADD Ed
	VTreeView.Items.BeginUpdate;

	cNode   := VTreeView.Items[0];

	if fnCreateTreeViewItemsHagure (cNode, 0) = false then
	begin
		result := false;
		abort;
		exit;
	end;

	VTreeView.Selected := VTreeView.Items[0];
	gbTreeClick := false;

	if TreeView_EnsureVisible(VTreeView.Handle, VTreeView.Selected.ItemID) then
		VTreeView.Invalidate;

	VTreeView.FullExpand ();
	VTreeView.Items.EndUpdate;

	result := true;
end;


//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP018001f.fnCreatTreeViewItemsHagure (TTreeNode)									*/
//*																									*/
//*	目的	: 工事登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑはぐれマスター作成処理										*/
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//*-------------------------------------------------------------------------------------------------*/
//*																									*/
//*	ﾊﾟﾗﾒｰﾀ	: cSrcNode  = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)                                                          */
//*                                                                                                 */
//***************************************************************************************************/
function   TJNTCRP018001f.fnCreateTreeViewItemsHagure (cSrcNode: TTreeNode; iFlg : Integer): Boolean;
var
	dqMasterTree : TMQuery;
	dqMasterWrite: TMQuery;
	stWorkRec    : ^TreeViewRec;
	iEntNo		 : Integer;
begin
	stWorkRec       := cSrcNode.Data;
	dqMasterTree    := TMQuery.Create (Self);
	dqMasterWrite   := TMQuery.Create (Self);

	MDataModule^.SetDBInfoToQuery(dbCorp_Select, dqMasterTree);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, dqMasterWrite);

	MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	try
		with (dqMasterTree) do
		begin
			Close ();

			if iFlg = 0 then
			begin
				SQL.Clear;
				SQL.ADD('SELECT MA.GCode,MA.SimpleName,MA.SumKbn,MA.NCode,MA.Syokuchikbn ');
				SQL.ADD('FROM HojyoMA MA');
				SQL.ADD('where MA.NCode not in(select TR.BasedNCode from HojyoTree TR where TR.MasterKbn=:pMKBN)');
//				SQL.ADD('where MA.GCode not in(select TR.BasedNCode from HojyoTree TR where TR.MasterKbn=:pMKBN)');
//				SQL.ADD('and MA.GCode not in(select TR.SumCode from HojyoTree TR where TR.MasterKbn=51)');
				SQL.ADD('and MA.MasterKbn=:pMKBN and MA.RDelKbn = 0');
				SQL.ADD('Order By MA.GCode');
			end
			else
			begin
				SQL.Clear;
				SQL.ADD ('SELECT TR.BasedNCode, MA.SumKbn, MA.SimpleName, MA.NCode, MA.Syokuchikbn FROM HojyoTree TR, HojyoMA MA ');
				SQL.ADD ('WHERE TR.MasterKbn = :pMKBN and TR.SumNCode = :strSumCode ');
				SQL.ADD ('and MA.Masterkbn = TR.MasterKbn and MA.RDelKbn =0 and MA.GCode = TR.BasedNCode');
				SQL.ADD ('ORDER BY EntNo DESC');

//				ParamByName ('strSumCode').AsString  := stWorkRec^.strExCode;
//<255> DEL				ParamByName ('strSumCode').AsFloat  := stWorkRec^.InCODE;
				ParamByName ('strSumCode').AsString  := FormatFloat('0',stWorkRec^.InCODE);  //<255> ADD
			end;
            ParamByName('pMKBN').asInteger       := m_nMasterDivision;

			Open ();

			if iFlg = 0 then
			begin
				with (dqMasterWrite) do
				begin
					Close ();
					SQL.Clear;
					SQL.ADD('SELECT EntNo From HojyoTree');
					SQL.ADD('Where MasterKbn=:pMKBN AND SumNCode =:stSum');
					SQL.ADD('Order by EntNo DESC');
					SetFld('pMKBN').AsInteger := m_nMasterDivision;
					SetFld('stSum').AsInteger := 0;

					Open;

					if EOF = false then
						iEntNo := GetFld('EntNo').AsInteger
					else
						iEntNo := 0;
				end;

				// はぐれマスター書込み
				while (not EOF) do
				begin
					with (dqMasterWrite) do
					begin
						iEntNo := iEntNo + 100;
						SQL.Clear;
						SQL.ADD ('Insert Into HojyoTree ');
						SQL.ADD ('(MasterKbn, PatternNo, SumNCode, EntNo, BasedNCode, AddKbn, ');
						SQL.ADD ('UpdTantoNCode) '); // <202>
						SQL.ADD ('Values (:pMKBN, 0, :stSum, :iEnt, :stBased, 0, ');
						SQL.ADD (':iUpdTantoNCode) '); // <202>
        				SetFld('pMKBN').AsInteger    := m_nMasterDivision;
						SetFld('stSum').AsInteger    := 0;
						SetFld('iEnt').AsInteger     := iEntNo;
						SetFld('stBased').AsFloat    := dqMasterTree.GetFld('NCode').AsFloat;
                        SetFld('iUpdTantoNCode').AsFloat  := m_TantoNCode; // <202>

						if (ExecSQL = false) then
						begin
							ErrorMessageDsp(dqMasterWrite);
							MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
							dqMasterWrite.Close;
//							dqMasterWrite.Free;
							result := false;
							Exit;
						end;

						MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

						gbHojyoTree2Flag	:=	true;	// 加算体系２更新ﾌﾗｸﾞＯＮ

						dqMasterTree.NEXT;
					end;
				end;

				dqMasterTree.First;
			end;

			while (not EOF) do
			begin
				if fnCreateTreeViewItemHagure (dqMasterTree, cSrcNode, iFlg) = false then
				begin
					result := false;
					abort;
					exit;
				end;
				NEXT;
			end;

			Close ();
		end;
	finally
		dqMasterTree.Free;
		dqMasterWrite.Free;
	end;

	result := true;
end;


//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: TJNTCRP018001f.fnCreatTreeViewItemHagure (TMQuery; TTreeNode)							*/
//*																									*/
//*	目的	: 工事登録処理 ﾂﾘｰﾋﾞｭｰ･ｱｲﾃﾑはぐれマスター作成処理										*/
//*																									*/
//*	戻り値	: なし,                         						                                */
//*																									*/
//*-------------------------------------------------------------------------------------------------*/
//*																									*/
//*	ﾊﾟﾗﾒｰﾀ	: dqMasterTree  = 補助加算体系ﾏｽﾀ用ｸｴﾘｰ                                                 */
//*			  cSrcNode      = ｱｲﾃﾑ作成ﾉｰﾄﾞ(親)                                                      */
//*                                                                                                 */
//***************************************************************************************************/
function   TJNTCRP018001f.fnCreateTreeViewItemHagure (dqMasterTree: TMQuery; cSrcNode: TTreeNode; iFlg : Integer): Boolean;
var
	stWorkRec   : ^TreeViewRec;
	cNode       : TTreeNode;
	iCut		: Integer;
	stCode		: String;
	stName		: String;
// <165> MOD start
	//iCode		: Currency;
    iCode       : Int64;
// <165> MOD end

    begin
	New (stWorkRec);

	with (dqMasterTree) do
	begin

		if iFlg =  1 then
		begin
//			stWorkRec^.strExCode	:= FieldByName ('BasedNCode' ).AsString;
			stWorkRec^.InCode   	:= FieldByName ('BasedNCode' ).AsFloat;
			stCode := FieldByName ('BasedNCode' ).AsString;
		end
		else
		begin
			stWorkRec^.strExCode	:= FieldByName ('GCode' ).AsString;
			stCode := FieldByName ('GCode' ).AsString;
		end;

		stWorkRec^.nDivision	:= FieldByName ('SumKbn'    ).AsInteger;
		stWorkRec^.strName		:= FieldByName ('SimpleName').AsString;
		stWorkRec^.iNCode		:= FieldByName ('NCode'    ).AsInteger;
		stWorkRec^.iSyokuti		:= FieldByName ('SyokuchiKbn').AsInteger;

		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
                    // <165> MOD start
                    //stCode := CurrToStr(iCode);
					stCode := IntToStr(iCode);
                    // <165> MOD end
				end;
			end;
		end;
		stName := stCode + ' ' + FieldByName ('SimpleName').AsString;

		cNode	:= VTreeView.Items.AddChildObject (cSrcNode, stName, stWorkRec);

		if  (stWorkRec^.nDivision = 0) then
		begin
			cNode.ImageIndex    := IC_JCLOSE;
			cNode.SelectedIndex := IC_JOPEN;
		end
		else
		begin
			cNode.ImageIndex    := IC_GMCLOSE;
			cNode.SelectedIndex := IC_GMOPEN;

			if fnCreateTreeViewItemsHagure (cNode, 1) = false then
			begin
				result := false;
				abort;
				exit;
			end;
		end;
	end;

	result := true;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
	if (Key = VK_INSERT) then
		abort;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
	if (Key = VK_INSERT) then
		abort;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyUp
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridKeyUp(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
	if giReferFlag = REFER then
		exit;

	if (Key = VK_UP) then
	begin
//		BSpeedButtonDel.Enabled := true;
//		TPDelKouji.Enabled := true;
		GFBlue.Enabled   := m_cJNTArea.IsFusen;
		GFGreen.Enabled  := m_cJNTArea.IsFusen;
		GFOrange.Enabled := m_cJNTArea.IsFusen;
		GFRed.Enabled    := m_cJNTArea.IsFusen;
	end;

	if (Key = VK_INSERT) then
		abort;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnKeyUp
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if giReferFlag = REFER then
		exit;

	if (Key = VK_UP) then
	begin
//		BSpeedButtonDel.Enabled := true;
//		TPDelKouji.Enabled := true;
		GFBlue.Enabled   := m_cJNTArea.IsFusen;
		GFGreen.Enabled  := m_cJNTArea.IsFusen;
		GFOrange.Enabled := m_cJNTArea.IsFusen;
		GFRed.Enabled    := m_cJNTArea.IsFusen;
	end;

	if (Key = VK_INSERT) then
		abort;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnMouseDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
	iFocus	:	Integer;
	cField	:	TField;
begin
	iFocus := Jituzai_DdxDBGrid.FocusedColumn;					// ﾌｫｰｶｽ位置

	case iFocus of
		COL_FUSEN:
		begin
			cField  := JHojyoMA_DMemDataGCode;
			cField.FocusControl;
			abort;
			exit;
		end;
		COL_GCODE:							// 外部コード
		begin
		end;
		COL_REN:
		begin
		end;
		COL_L_NAME:
		begin
		end;
		COL_S_NAME:
		begin
		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnMouseDown
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
	iFocus	:	Integer;
	cField	:	TField;
begin
	iFocus := Goukei_DdxDBGrid.FocusedColumn;					// ﾌｫｰｶｽ位置

	case iFocus of
		COL_FUSEN:
		begin
			cField  := GHojyoMA_DMemDataGCode;
			cField.FocusControl;
			abort;
			exit;
		end;
		COL_GCODE:							// 外部コード
		begin
		end;
		COL_REN:
		begin
		end;
		COL_L_NAME:
		begin
		end;
		COL_S_NAME:
		begin
		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnBeforeChangeColumn
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	stWork	  :	String;
	QueryRead :	TMQuery;
    rSyncKey  : SyncKey;    // <172>
    iRet      : Integer;    // <172>
    Qe        : TMQuery;    // <172>
begin

	if ( m_fEnd = 1 ) then exit;

	// 外部ｺｰﾄﾞ
	case Column of
		COL_GCODE:
		begin
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			begin
				stWork := JHojyoMA_DMemDataGCode.AsString;
				if ( JHojyoMA_DMemData.State in [dsInsert] ) then
				begin
					stWork := TrimRight(stWork);
					JHojyoMA_DMemDataGCode.AsString := stWork;
				end;
			end
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
					stWork := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
				else
					stWork := '';
			end;

			// 外部ｺｰﾄﾞ0は許さない
			if ( JHojyoMA_DMemData.State in [dsInsert] ) then
			begin
				if (stWork = '') or (stWork = '0000000000') then
				begin
					CanChange := false;
					exit;
				end;
			end;

			if ( JHojyoMA_DMemDataGCode.ReadOnly = false ) then
			begin
				// ﾌﾘｰｺｰﾄﾞ(有効文字列)ﾁｪｯｸ
				if not JNTMASERRORCODECHECK(stWork,gstErrorStr) then
				begin
					ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
					MjsMessageBoxEx(Self,
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    MjsMsgRec.LogType);
					CanChange := false;
					abort;
				end;

				QueryRead := TMQuery.Create (Self);
				MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

				try
                    // 工事を外部ｺｰﾄﾞ昇順でGET
					with QueryRead do
					begin
						Close();
						SQL.Clear();
//<255> DEL						SQL.Add('select * from HojyoMA      ');
						SQL.Add('select NCode from HojyoMA      ');  //<255> ADD
						SQL.Add('where MasterKbn=:pMKBN     ');
                        SQL.Add('  and RDelKbn  =0          ');
                        SQL.Add('  and GCode    =:stGCode   ');
						SQL.Add('order by Gcode             ');
                        SetFld('pMKBN'  ).AsInteger := m_nMasterDivision;
						SetFld('stGCode').AsString  := stWork;
						Open;

						if Eof = false then
						begin
							Beep;
							MjsMessageBoxEX(Self,
                                            '同一'+MasterInfo_DMemDataJHojyoName.AsString+'が登録済みです。',
                                            '登録',mjInformation ,mjOk, mjDefOk);
							CanChange := false;
							abort;
						end;
					end;
				finally
					QueryRead.Free;
				end;

                // -------------------------------------------------------------------------
                //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                //
                //  親子同時に同一ｺｰﾄﾞを指定し、一覧(実在)画面でPostした場合の処理
                //  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合
                //  の考慮が必要。
                // -------------------------------------------------------------------------
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( JHojyoMA_DMemData.State in [dsInsert,dsEdit] ) then
                begin
                    iRet := 1;
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
                            stWork := Format ('%.16d', [StrToInt64 (Trim (JHojyoMA_DMemDataGCode.AsString))])    // 数値属性
                    else    stWork := TrimRight (JHojyoMA_DMemDataGCode.AsString);                               // 文字属性

                    // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                    MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                    // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                    MDataModule^.BeginTran( dbCorp_Select );

                    rSyncKey.strExCode := stWork;
                    rSyncKey.nDivision := 0;

                    if ( JHojyoMA_DMemData.State in [dsInsert] ) then
                    begin
                        // HojyoMAの同期
                        iRet := fnCorpRelation ( rSyncKey, 1 );

                        if ( iRet = 1 ) then
                        begin
                            rSyncKey.nNCode := uvNCode;
                            // KojiInfoの同期
                            iRet := fnCorpRelation ( rSyncKey, 2 );
                        end;
                    end;

                    // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                    if ( iRet = 1 ) then
                    begin
                        Qe := TMQuery.Create ( Self );

                        try
                            MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                            Qe.Close;
                            Qe.SQL.Clear;
//<255> DEL                            Qe.SQL.Add('select * from P_kojiinfo2 ');
                            Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                            Qe.SQL.Add('where MasterKbn = :pMstkbn');
                            Qe.SQL.Add('  and NCode     = :pNCode ');
                            Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                            Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                            Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                            if Qe.Open = false then
                                Abort;

                            Qe.First;
                            while not Qe.Eof do
                            begin
                                rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                iRet := fnCorpRelation(rSyncKey, 3);

                                if (iRet <> 0) and (iRet <> 1) then
                                    Abort;

                                Qe.Next;
                            end;
                        finally
                            Qe.Close();
                            Qe.Free();
                        end;
                    end;

                    if ( iRet <> 1 ) then
                    begin
                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( dbCorp_Select );
                    end;

                    case iRet of    // 実在
                        0:  begin
                                // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                            end;
                        1:  begin
                                // 親会社DBに対してｺﾐｯﾄを実行する
                                MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                // 子会社DBに対してｺﾐｯﾄを実行する
                                MDataModule.Commit( dbCorp_Select );

                                // 正常に関連付が行えた場合は、画面の再描画を行う
                                // ↓↓↓Gridの初期化
                                TBaseNode	:= VTreeView.Items[0];
                                fnCreateGrid ( TBaseNode, 0 );
                                if ( JHojyoMA_DMemData.Eof = false ) then
                                begin
                                    JHojyoMA_DMemData.First;
                                    fnCreateCard (0);
                                end
                                else
                                begin
                                    fnClearCard (0);
                                end;
                                // ↑↑↑
                                Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                                Abort;
                            end;
                        2:  begin
                                // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                                Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                                Abort;
                            end;
                        -1, -9: begin
                                // 実在合計不一致、例外ｴﾗｰ
                                Abort;
                            end;
                    end;
                end;
                // ↑↑↑<172>
                // -------------------------------------------------------------------------
			end;
		end;
        // 連想
		COL_REN:
		begin
		end;
        // 正式名称
		COL_L_NAME:
		begin
			stWork := JHojyoMA_DMemDataSimpleName.AsString;
			if ( JHojyoMA_DMemDataLongName.AsString <> '' ) and ( stWork = '' ) then
			begin
				JHojyoMA_DMemData.Edit;
				JHojyoMA_DMemDataSimpleName.AsString := MjsCopy(JHojyoMA_DMemDataLongName.AsString, 14);
			end;
		end;
        // 簡略名称
		COL_S_NAME:
		begin
		end;
	end;

	// ｽﾃｰﾀｽﾊﾞｰ消去
    //<113>	SStatusBar.SimpleText := '';
    fnSetFncType(false,7);  // <113>

	case NewColumn of
		COL_S_NAME:
		begin
            // <113> ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 19);
            // <113> SStatusBar.SimpleText := stMessageRec.sMsg;
            fnSetFncType(true,7)
 		end;
	end;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnBeforeChangeColumn
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridBeforeChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer; NewNode: TdxTreeListNode;
  NewColumn: Integer; var CanChange: Boolean);
var
	stWork	  :	String;
	QueryRead :	TMQuery;
    Qe        : TMQuery;    // <172>
    rSyncKey  : SyncKey;    // <172>
    iRet      : Integer;    // <172>
begin

	if ( m_fEnd = 1 ) then exit;

	// 外部ｺｰﾄﾞ
	case Column of
		COL_GCODE:
		begin
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			begin
				stWork := GHojyoMA_DMemDataGCode.AsString;
				if ( GHojyoMA_DMemData.State in [dsInsert] ) then
				begin
					stWork := TrimRight(stWork);
					GHojyoMA_DMemDataGCode.AsString := stWork;
				end;
			end
			else
			begin
				if ( GHojyoMA_DMemDataGCode.AsString <> '' ) then
					stWork := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
				else
					stWork := '';
			end;

			// 外部ｺｰﾄﾞの0は許さない
			if ( GHojyoMA_DMemData.State in [dsInsert] ) then
			begin
				if ( stWork = '' ) or ( stWork = '0000000000' ) then
				begin
					CanChange := false;
					exit;
				end;
			end;

			if ( GHojyoMA_DMemDataGCode.ReadOnly = false ) then
			begin
				// ﾌﾘｰｺｰﾄﾞ(有効文字列)ﾁｪｯｸ
				if not JNTMASERRORCODECHECK(stWork,gstErrorStr) then
				begin
					ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
					MjsMessageBoxEx(Self,
                                    MjsMsgRec.sMsg,
                                    MjsMsgRec.sTitle,
                                    MjsMsgRec.icontype,
                                    MjsMsgRec.btntype,
                                    MjsMsgRec.btndef,
                                    MjsMsgRec.LogType);
					CanChange := false;
					abort;
				end;

				QueryRead := TMQuery.Create (Self);
				MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

				try
                    // 工事を外部ｺｰﾄﾞ昇順でGET
					with QueryRead do
					begin
						Close();
						SQL.Clear();
//<255> DEL						SQL.Add('select * from HojyoMA   ');
						SQL.Add('select NCode from HojyoMA   ');  //<255> ADD
						SQL.Add('where MasterKbn=:pMKBN  ');
                        SQL.Add('  and RDelKbn  =0       ');
                        SQL.Add('  and GCode    =:stGCode');
						SQL.Add('order by Gcode          ');
                        SetFld('pMKBN'  ).AsInteger := m_nMasterDivision;
						SetFld('stGCode').AsString  := stWork;
						Open;

						if Eof = false then
						begin
							Beep;
							MjsMessageBoxEX(Self,
                                            '同一'+MasterInfo_DMemDataJHojyoName.AsString+'が登録済みです。',
                                            '登録',mjInformation ,mjOk, mjDefOk);
							CanChange := false;
							abort;
						end;
					end;
				finally
					QueryRead.Free;
				end;

                // -------------------------------------------------------------------------
                //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                //
                //  親子同時に同一ｺｰﾄﾞを指定し、一覧(合計)画面でPostした場合の処理
                //  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合
                //  の考慮が必要。
                // -------------------------------------------------------------------------
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( GHojyoMA_DMemData.State in [dsInsert,dsEdit] ) then
                begin
                    iRet := 1;
                    if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
                            stWork := Format ('%.16d', [StrToInt64 (Trim (GHojyoMA_DMemDataGCode.AsString))])    // 数値属性
                    else    stWork := TrimRight (GHojyoMA_DMemDataGCode.AsString);                               // 文字属性

                    // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                    MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                    // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                    MDataModule^.BeginTran( dbCorp_Select );

                    rSyncKey.strExCode := stWork;
                    rSyncKey.nDivision := 1;

                    if ( GHojyoMA_DMemData.State in [dsInsert] ) then
                    begin
                        // HojyoMAの同期
                        iRet := fnCorpRelation ( rSyncKey, 1 );

                        if ( iRet = 1 ) then
                        begin
                            rSyncKey.nNCode := uvNCode;
                            // KojiInfoの同期
                            iRet := fnCorpRelation ( rSyncKey, 2 );
                        end;
                    end;

                    // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                    if ( iRet = 1 ) then
                    begin
                        Qe := TMQuery.Create ( Self );

                        try
                            MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                            Qe.Close;
                            Qe.SQL.Clear;
//<255> DEL                            Qe.SQL.Add('select * from P_kojiinfo2 ');
                            Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                            Qe.SQL.Add('where MasterKbn = :pMstkbn');
                            Qe.SQL.Add('  and NCode     = :pNCode ');
                            Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                            Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                            Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                            if Qe.Open = false then
                                Abort;

                            Qe.First;
                            while not Qe.Eof do
                            begin
                                rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                iRet := fnCorpRelation(rSyncKey, 3);

                                if (iRet <> 0) and (iRet <> 1) then
                                    Abort;

                                Qe.Next;
                            end;
                        finally
                            Qe.Close();
                            Qe.Free();
                        end;
                    end;

                    if ( iRet <> 1 ) then
                    begin
                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( dbCorp_Select );
                    end;

                    case iRet of
                        0:  begin
                                // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                            end;
                        1:  begin
                                // 親会社DBに対してｺﾐｯﾄを実行する
                                MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                // 子会社DBに対してｺﾐｯﾄを実行する
                                MDataModule.Commit( dbCorp_Select );

                                // 正常に関連付が行えた場合は、画面の再描画を行う
                                // ↓↓↓Gridの初期化
                                TBaseNode	:= VTreeView.Items[0];
                                fnCreateGrid ( TBaseNode, 1 );
                                if ( GHojyoMA_DMemData.Eof = false ) then
                                begin
                                    GHojyoMA_DMemData.First;
                                    fnCreateCard (1);
                                end
                                else
                                begin
                                    fnClearCard (1);
                                end;
                                // ↑↑↑
                                Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                                Abort;
                            end;
                        2:  begin
                                // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                                Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                                Abort;
                            end;
                        -1, -9: begin
                                // 実在合計不一致、例外ｴﾗｰ
                                Abort;
                            end;
                    end;
                end;
                // ↑↑↑<172>
                // -------------------------------------------------------------------------
			end;
		end;
        // 連想
		COL_REN:
		begin
		end;
        // 正式名称
		COL_L_NAME:
		begin
			stWork := GHojyoMA_DMemDataSimpleName.AsString;
			if ( GHojyoMA_DMemDataLongName.AsString <> '' ) and ( stWork = '' ) then
			begin
				GHojyoMA_DMemData.Edit;
				GHojyoMA_DMemDataSimpleName.AsString := MjsCopy(GHojyoMA_DMemDataLongName.AsString, 14);
			end;
		end;
        // 簡略名称
		COL_S_NAME:
		begin
		end;
	end;

	// ｽﾃｰﾀｽﾊﾞｰ消去
    //<113>	SStatusBar.SimpleText := '';
    fnSetFncType(false,7);  // <113>

	case NewColumn of
		COL_S_NAME:
		begin
            // <113> ComArea.m_MsgStd.GetMsg( stMessageRec, 30, 19);
            // <113> SStatusBar.SimpleText := stMessageRec.sMsg;
            fnSetFncType(true,7);   // <113>
 		end;
	end;
    
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnStateChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.JHojyoMA_DDataSourceStateChange(Sender: TObject);
begin
	if  (JHojyoMA_DMemData.State in [dsInsert]) then
	begin
		Jituzai_DdxDBGrid.Columns[COL_GCODE].ReadOnly := false;
		JHojyoMA_DMemDataGCode.ReadOnly := false;
	end
	else
	begin
		Jituzai_DdxDBGrid.Columns[COL_GCODE].ReadOnly := true;
		JHojyoMA_DMemDataGCode.ReadOnly := true;
	end;

	if  (JHojyoMA_DMemData.Active) then
	begin
		if  (JHojyoMA_DMemData.RecordCount = 0) then
		begin
			Jituzai_DdxDBGrid.Columns [COL_GCODE].ReadOnly := false;
			JHojyoMA_DMemDataGCode.ReadOnly := false;
		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnStateChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.GHojyoMA_DDataSourceStateChange(Sender: TObject);
begin
	if  (GHojyoMA_DMemData.State in [dsInsert]) then
	begin
		Goukei_DdxDBGrid.Columns[COL_GCODE].ReadOnly := false;
		GHojyoMA_DMemDataGCode.ReadOnly := false;
	end
	else
	begin
		Goukei_DdxDBGrid.Columns[COL_GCODE].ReadOnly := true;
		GHojyoMA_DMemDataGCode.ReadOnly := true;
	end;

	if  (GHojyoMA_DMemData.Active) then
	begin
		if  (GHojyoMA_DMemData.RecordCount = 0) then
		begin
			Goukei_DdxDBGrid.Columns [COL_GCODE].ReadOnly := false;
			GHojyoMA_DMemDataGCode.ReadOnly := false;
		end;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.VTreeViewExit(Sender: TObject);
begin
	gbTreeClick := false;

	m_SearchInfo.sKojCD := '';

	if (m_AcControl = Jituzai_DdxDBGrid) or
		(m_AcControl = Goukei_DdxDBGrid) then
	begin
		if (m_AcControl = Jituzai_DdxDBGrid) and
			(JHojyoMA_DMemData.Eof = false)then
		begin
			btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
			LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
			exit;
		end;

		if (m_AcControl = Goukei_DdxDBGrid) and
			(GHojyoMA_DMemData.Eof = false)then
		begin
			btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
			LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
			exit;
		end;

//		btnFusenCtl.Enabled := false;
//		LVStyleBar.Enabled  := false;
	end
	else
	begin
//		btnFusenCtl.Enabled := false;
//		LVStyleBar.Enabled  := false;
	end;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.VTreeViewChange(Sender: TObject; Node: TTreeNode);
var
	Node1			: TTreeNode;
	NodeOya			: TTreeNode;
	NodeOya2		: TTreeNode;
	stWorkRecSelect	: ^TreeViewRec;
	stWorkRecOya	: ^TreeViewRec;
	stWorkRecOya2	: ^TreeViewRec;
	stGCode			: String;
	stMemGCode		: String;
	bFlg			: Boolean;
	cNodeWork       : TTreeNode;
begin
try  //<260> ADD

	if  m_fAccessTree = false then
		exit;

    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ				//<155>
    FontColorChange();  // <225> 文字色変更

	m_fTreeClk := 1;						// TreeClickﾌﾗｸﾞ

	Node1 := VTreeView.Selected;
	stWorkRecSelect := Node1.Data;
	if stWorkRecSelect^.nDivision = 9 then
	begin
		BSpeedButtonDel.Enabled := false;
		btnFusenCtl.Enabled     := false;
		LVStyleBar.Enabled      := false;
        TPDelete.Enabled  		:= false;
	end
	else
	begin
		btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
		LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
        if m_cJNTArea.IsDelete = false then//削除権限を考慮する
			BSpeedButtonDel.Enabled := false
        else
        begin
            if stWorkRecSelect^.iSyokuti = 1 then
                BSpeedButtonDel.Enabled := fnRecordCount()
            else
                BSpeedButtonDel.Enabled := true;
        end;
	end;

	gbTreeClick := true;

	MemPost_Sw := 1;
	m_fAccessTree    := false;
	m_fAccessTab	 := false;

	cNodeWork	:= Node.GetFirstChild ();

    if stWorkRecSelect^.nDivision = 1 then				// 合計工事だった場合
    begin
        if (cNodeWork <> nil) then
    		BSpeedButtonDel.Enabled   := false
        else
      		BSpeedButtonDel.Enabled   := m_cJNTArea.IsDelete;//削除権限を考慮

        NodeOya := Node1.Parent;
        stWorkRecOya := NodeOya.Data;
        if stWorkRecOya^.nDivision = 1 then				// 親が合計工事だった場合
        begin
            if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
                Root_PMTab.Items.Selected		:= PAGE_JITUZAI;
                Root_PMTab.Items[1].Enabled		:= false;
            end
            else
            begin
                Root_PMTab.Items.Selected		:= PAGE_GOKEI;
                Root_PMTab.Items[1].Enabled		:= true;
            end;
        end
        else
            Root_PMTab.Items[1].Enabled := true;

    end
    else
    begin
        if stWorkRecSelect^.nDivision = 0 then				// 実在工事だった場合、親を見る
        begin
            NodeOya := Node1.Parent;
            stWorkRecOya := NodeOya.Data;
            if stWorkRecOya^.nDivision = 1 then				// 合計工事だった場合、更に親を見る
            begin
                NodeOya2 := NodeOya.Parent;
                stWorkRecOya2 := NodeOya2.Data;
                if stWorkRecOya2^.nDivision = 1 then			// 親の親が合計工事だった場合、子供は実在のみとする
                begin
                    if Root_PMTab.Items.Selected = PAGE_GOKEI then
                    begin
                        if BSpeedButtonIS.Caption = '詳細(&T)' then
                        begin
                            Jituzai_PPanel_Grid.Visible 	:= true;
                            Goukei_PPanel_Grid.Visible 		:= false;
                        end
                        else
                        begin
                            Jituzai_PPanel_Card.Visible 	:= true;
                            Goukei_PPanel_Card.Visible 		:= false;
                        end;
                        Root_PMTab.Items.Selected := PAGE_JITUZAI;
                    end;
                    Root_PMTab.Items[1].Enabled := false;
                end
                else
                begin
                    if BSpeedButtonIS.Caption <> '詳細(&T)' then
                        Root_PMTab.Items.Selected := PAGE_JITUZAI;

                    Root_PMTab.Items[1].Enabled := true;
                end;
            end
            else
            begin
                if BSpeedButtonIS.Caption <> '詳細(&T)' then
                    Root_PMTab.Items.Selected := PAGE_JITUZAI;

                Root_PMTab.Items[1].Enabled := true;
            end;
        end
        else
            Root_PMTab.Items[1].Enabled := true;
    end;
	m_fAccessTree    := true;
	m_fAccessTab	 := true;

	bFlg := false;

	Node1 := VTreeView.Selected;
	NodeOya := Node1.Parent;
	stWorkRecSelect := Node1.Data;

	if BSpeedButtonIS.Caption <> '詳細(&T)' then
	begin
		if stWorkRecSelect^.nDivision = 1 then
		begin
			m_cNodeRightClk := VTreeView.Selected;
			TPDetailClick(Self);
			MemPost_Sw := 0;
			m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
			exit;
		end;
	end;

	stGCode := stWorkRecSelect^.strExCode;

	if Root_PMTab.Items.Selected = PAGE_JITUZAI then
	begin
		if JHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			JHojyoMA_DMemData.Cancel;

		if JHojyoMA_DMemData.RecordCount <> 0 then
			JHojyoMA_DMemData.First;
		while JHojyoMA_DMemData.Eof = false do
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				stMemGCode := JHojyoMA_DMemDataGCode.AsString
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
					stMemGCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
				else
					JHojyoMA_DMemData.Next;
			end;

			if stMemGCode = stGCode then
			begin
				bFlg := true;
				break;
			end
			else
				JHojyoMA_DMemData.Next;
		end;
	end
	else
	begin
		if GHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			GHojyoMA_DMemData.Cancel;

		if GHojyoMA_DMemData.RecordCount <> 0 then
			GHojyoMA_DMemData.First;
		while GHojyoMA_DMemData.Eof = false do
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				stMemGCode := GHojyoMA_DMemDataGCode.AsString
			else
			begin
				if GHojyoMA_DMemDataGCode.AsString <> '' then
					stMemGCode := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
				else
					GHojyoMA_DMemData.Next;
			end;

			if stMemGCode = stGCode then
			begin
				bFlg := true;
				break;
			end
			else
				GHojyoMA_DMemData.Next;
		end;
	end;

	if bFlg = false then
	begin
		if JHojyoMA_DMemData.RecordCount <> 0 then
        begin
			JHojyoMA_DMemData.First;
        end;
		if GHojyoMA_DMemData.RecordCount <> 0 then
        begin
			GHojyoMA_DMemData.First;
        end;
	end;

	MemPost_Sw := 0;

	if BSpeedButtonIS.Caption <> '詳細(&T)' then
	begin
		if stWorkRecSelect^.nDivision = 0 then
		begin
			if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			begin
                fnSetFncType(true,0);//<113>
				fnDataRead (stGCode, 0, 0);				// 2004/07/09
//<271> DEL				SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
                m_aCmnt_Jitu.Clear();   //<271> ADD
				fnMemSet (0, false);
				fnCreateCard (0);
			end
			else
			begin
                fnSetFncType(false,0);//<113>
				fnDataRead (stGCode, 1, 0);				// 2004/07/09
//<271> DEL				SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
                m_aCmnt_Gou.Clear();  //<271> ADD
				fnMemSet (1, false);
				fnCreateCard (1);
			end;
            //<100>
//<113>            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
		end;
	end;

	if (stWorkRecSelect^.nDivision = 9) or (stWorkRecSelect^.nDivision = 1) then
	begin
		stGCode := stWorkRecSelect^.strExCode;
        fnSetFncType(false,0);  // <152>
	end
	else
	begin
		stWorkRecOya := NodeOya.Data;
		stGCode := stWorkRecOya^.strExCode;
	end;

// <201> MOD start
(*
// <198> MOD start
	//if m_stGCodeSave = stGCode then
	if (m_stGCodeSave = stGCode) or (stWorkRecSelect^.nDivision <> 9) then
// <198> MOD end
*)
 	if m_stGCodeSave = stGCode then
// <201> MOD end

	begin
		m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
		Exit;
	end;

	if Node1 = nil then
	begin
		m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
		Exit;
	end;

	m_stGCodeSave := stGCode;							// ｺｰﾄﾞのｾｰﾌﾞ

	MemPost_Sw := 1;
	fnCreateAll ();
	MemPost_Sw := 0;

	m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
	MemPost_Sw := 1;
    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
	MemPost_Sw := 0;

    ClearOtherRec(m_recOther);              // <WF>申請書情報ｸﾘｱ				//<155>
//<260> ADD St
finally
    // フォーカスされているのがTreeViewでなければOFFにする
    if m_AcControl <> VTreeView then
        gbTreeClick := False;
end;
//<260> ADD Ed
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_PMTabChange(Sender: TObject);
var
    i : Integer;
begin
	if ( giReferFlag = REFER ) then Exit;

	if ( LSinsei.Visible = true ) then Exit;    // <155>

	if  ( m_fAccessTabJ = false ) then
	begin
		m_fAccessTabJ := true;
		Exit;
	end;

    // ↓↓↓<122>
    if ( JKansei.Active ) then
        JKansei.Close;
    // ↑↑↑<122>

    // ↓↓↓<171>
    // 契約情報及び入金情報ｸﾞﾘｯﾄﾞで編集状態のﾛｰが存在する場合は、ｷｬﾝｾﾙを行う
    // ※ ｴﾗｰの場合でも現状Postされている為、同一日付のﾃﾞｰﾀが作成されてしまいます。
    if ( JKeiyaku_DMemData.State in [dsInsert, dsEdit] ) then
        JKeiyaku_DMemData.Cancel();
    if ( JNyukin_DMemData.State  in [dsInsert, dsEdit] ) then
        JNyukin_DMemData.Cancel();
    // ↑↑↑<171>
// <SEI> ADD start
    if ( JSeikyu_DMemData.State  in [dsInsert, dsEdit] ) then
        JSeikyu_DMemData.Cancel();
// <SEI> ADD end

    // -----------------------------------------------
    //  基本情報タブ
    // -----------------------------------------------
	if ( Jituzai_PMTab.Items.Selected = PAGE_KIHON ) then
	begin
(*
		JKeiyaku_DMemData.Cancel;
		if JKeiyaku_DMemData.RecordCount <> 0 then
			JKeiyaku_DMemData.First;
		JNyukin_DMemData.Cancel;
		if JNyukin_DMemData.RecordCount <> 0 then
			JNyukin_DMemData.First;
*) // <171>
(*
        if (Jituzai_ENEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger <> 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_PersonCode')
        else if (Jituzai_ETEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger = 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_PersonCode')
        else if (Jituzai_ENEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger <> 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_CustomerCode')
        else if (Jituzai_ETEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger = 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerCode')
        else
*) // <106>

        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_HaifuKbn');
		Abort;
		Exit;
	end
    // -----------------------------------------------
    //  工事タブ
    // -----------------------------------------------
    else if ( Jituzai_PMTab.Items.Selected = PAGE_KOJI ) then
    begin
        if ( m_KanseiFlg = false ) then
        begin
            Abort;
            Exit;
        end;

        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_ZipCode1');
		Abort;
		Exit;
    end
    // -----------------------------------------------
    //  工事完成振替タブ
    // -----------------------------------------------
    else if ( Jituzai_PMTab.Items.Selected = PAGE_KFURI ) then
    begin
        MjsDispCtrl.MjsSetFocus(Self, 'MMasterKBN');
        MMasterKBN.ItemIndex := 0;
		Abort;
		Exit;
    end
    // -----------------------------------------------
    //  契約・入金情報タブ
    // -----------------------------------------------
// <212> MOD start
//    else if ( Jituzai_PMTab.Items.Selected = PAGE_NYUKIN )then
    else if ( Jituzai_PMTab.Items.Selected = PAGE_KEIYAKU )then
// <212> MOD end
	begin
//<TAX> ADD St
        if (rdJTaxIn.Checked and rdJTaxIn.CanFocus) then
        begin
            rdJTaxIn.SetFocus();
            abort;
            Exit;
        end
        else if (rdJTaxOut.Checked and rdJTaxOut.CanFocus) then
        begin
            rdJTaxOut.SetFocus();
            abort;
            Exit;
        end;
//<TAX> ADD Ed
		MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
		Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
		Abort;
		Exit;
	end

// <212> ADD start
    // -----------------------------------------------
    //  入金情報タブ
    // -----------------------------------------------
    else if ( Jituzai_PMTab.Items.Selected = PAGE_NYUKIN )then
	begin
		MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
		Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
		Abort;
		Exit;
	end
// <212> ADD end
// <SEI> ADD start
    // -------------------------------------------------
    //  請求・入金予定タブ
    // -------------------------------------------------
    else if (Jituzai_PMTab.Items.Selected = PAGE_SEIKYU) then
    begin
    										// 請求先
    	if Jituzai_ETEdit_SeikyusakiCd.CanFocus then
        begin
        	MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SeikyusakiCd');
        end
        else if Jituzai_ENEdit_SeikyusakiCd.CanFocus then
        begin
        	MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SeikyusakiCd');
        end
        else								// 請求情報ｸﾞﾘｯﾄﾞ
        begin
			MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Seikyu');
			Jituzai_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
        end;
		Abort;
		Exit;
    end
// <SEI> ADD end
    // -----------------------------------------------
    //  その他タブ
    // -----------------------------------------------
    else if ( Jituzai_PMTab.Items.Selected = PAGE_SONOTA )then
	begin
        for i := 1 to 10 do
        begin
            if ( TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Visible ) then
            begin
        		MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i));
        		Abort;
        		Exit;
            end;
        end;

        for i := 1 to 10 do
        begin
            if ( TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Visible ) then
            begin
        		MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i));
        		Abort;
        		Exit;
            end;
        end;
// <209> MOD start
//    	MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
        // 工事登録

// <222> DEL        if ( m_pMyAppRecord.m_sParameter = '1' ) then
//<261> DEL    	    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
            Jituzai_BBitBtn_Ok.SetFocus();  // タブ内には表示されているコンポーネントがないので更新ボタンにフォーカスをあてる <261> ADD
// <222> DEL start
{
        // ﾌﾟﾛｼﾞｪｸﾄ登録
        else
           	MjsDisCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
}
// <222> DEL end
// <209> MOD end
        Abort;
        Exit;
	end
// <205> ADD start
    // -----------------------------------------------
    //  備考・概要タブ
    // -----------------------------------------------
    else if ( Jituzai_PMTab.Items.Selected = PAGE_BIKOU )then
	begin
// <222> MOD start
{
// <209> MOD start
//    	MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
        // 工事登録
        if ( m_pMyAppRecord.m_sParameter = '1' ) then
    	    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou')
        // ﾌﾟﾛｼﾞｪｸﾄ登録
        else
           	MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_BIKO');
// <209> MOD end
        Abort;
        Exit;
	end;
// <205> ADD start
}
        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_Gaiyou');
    end;
// <222> MOD end
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChange
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_PMTabChange(Sender: TObject);
begin
	if ( giReferFlag = REFER ) then Exit;

	if ( LSinsei.Visible = true )  then Exit;   // <155>

	if ( m_fAccessTabG = false ) then
	begin
		m_fAccessTabG := true;
		Exit;
	end;

//<251> ADD St
    // 編集中の解除
    if ( GKeiyaku_DMemData.State in [dsInsert, dsEdit] ) then
        GKeiyaku_DMemData.Cancel();
    if ( GNyukin_DMemData.State  in [dsInsert, dsEdit] ) then
        GNyukin_DMemData.Cancel();
//<251> ADD Ed


    // -------------------------------------------------
    //  基本情報タブ
    // -------------------------------------------------
	if ( Goukei_PMTab.Items.Selected = PAGE_KIHON ) then
	begin
		GKeiyaku_DMemData.Cancel;
		if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
			GKeiyaku_DMemData.First;
		GNyukin_DMemData.Cancel;
		if ( GNyukin_DMemData.RecordCount <> 0 ) then
			GNyukin_DMemData.First;
(*
        if (Goukei_ENEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger <> 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_PersonCode')
        else if (Goukei_ETEdit_PersonCode.enabled) and (MasterInfo_DMemDataCodeAttrShain.asInteger = 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_PersonCode')
        else if (Goukei_ENEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger <> 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_CustomerCode')
        else if (Goukei_ETEdit_CustomerCode.enabled) and (MasterInfo_DMemDataCodeAttrTorihiki.asInteger = 2) then
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_CustomerCode')
        else
            MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_RootKbn');
*) // <106>

        MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_RootKbn');
		Abort;
		Exit;
	end
    // -------------------------------------------------
    //  工事タブ
    // -------------------------------------------------
	else if Goukei_PMTab.Items.Selected = PAGE_KOJI then
	begin
		MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_ZipCode1');
		Abort;
		Exit;
	end
// <205> ADD start
    // -----------------------------------------------
    //  備考・概要タブ
    // -----------------------------------------------
// <212> MOD start
//    else if ( Goukei_PMTab.Items.Selected = 3 )then
//<SEI> MOD St
//    else if ( Goukei_PMTab.Items.Selected = 4 )then
    else if ( Goukei_PMTab.Items.Selected = PAGE_GOUKEI_BIKOU )then  //<SEI> ADD
//<SEI> MOD Ed
// <212> MOD end
	begin
// <209> MOD start
//    	MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_BIKO');
    	MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_Gaiyou');
// <209> MOD end
        Abort;
        Exit;
	end
// <205> ADD end
// <212> ADD start
    // -------------------------------------------------
    //  入金情報タブ
    // -------------------------------------------------
    else if (Goukei_PMTab.Items.Selected = 3) then
    begin
		MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Nyu');
		Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
		Abort;
		Exit;
    end
// <212> ADD end
// <SEI> ADD start
    // -------------------------------------------------
    //  請求・入金予定タブ
    // -------------------------------------------------
    else if (Goukei_PMTab.Items.Selected = PAGE_GOUKEI_SEIKYU) then
    begin
    										// 請求先
    	if Goukei_ETEdit_SeikyusakiCd.CanFocus then
        begin
        	MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_SeikyusakiCd');
        end
        else if Goukei_ENEdit_SeikyusakiCd.CanFocus then
        begin
        	MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_SeikyusakiCd');
        end
        else								// 請求情報ｸﾞﾘｯﾄﾞ
        begin
			MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Seikyu');
			Goukei_DdxDBGrid_Seikyu.FocusedColumn := COL_SEIKYU_SEIKYUYOTEIBI;
        end;
		Abort;
		Exit;
    end
// <SEI> ADD end
    // -------------------------------------------------
    //  契約・入金情報タブ
    // -------------------------------------------------
	else
	begin
		MjsDispCtrl.MjsSetFocus(Self, 'Goukei_DdxDBGrid_Kei');
		Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
		Abort;
		Exit;
	end;
end;

//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridExit(Sender: TObject);
begin
	if m_fEnd = 0 then
	begin
		if JHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
		begin
			if JHojyoMA_DMemDataGCode.AsString <> '' then
				JHojyoMA_DMemData.Post
			else
				JHojyoMA_DMemData.Cancel;
		end;
	end;
end;

//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridExit(Sender: TObject);
begin
	if m_fEnd = 0 then
	begin
		if GHojyoMA_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
		begin
			if GHojyoMA_DMemDataGCode.AsString <> '' then
				GHojyoMA_DMemData.Post
			else
				GHojyoMA_DMemData.Cancel;
		end;
	end;
end;

//**************************************************************************
//	Proccess  :	郵便番号入力のOnArrowClickの共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//					ArrowClickによる郵便番号辞書Expの呼び出し
//	Name	  :	Sin.Nakamura
//	Date	  :	2000/ 08 / 28
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.CmnPostShow(Sender: TObject);
var
	sAdr1  :	String;
	sAdr2  :	String;
	sZip   :	String;
	iZip1  :	Integer;
	iZip2  :	Integer;
	iValue :	Integer;
begin

	if Sender is TMNumEdit then							// 郵便番号枝番入力
	begin
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			iZip1 := Trunc(Jituzai_ENEdit_ZipCode1.Value);			// 基番 取得
			iZip2 := Trunc(Jituzai_ENEdit_ZipCode2.Value);			// 枝番 取得
		end
		else
		begin
			iZip1 := Trunc(Goukei_ENEdit_ZipCode1.Value);			// 基番 取得
			iZip2 := Trunc(Goukei_ENEdit_ZipCode2.Value);			// 枝番 取得
		end;

		sZip  := MjsEditNum(iZip1,'0000',3);					// 基番文字列変換
		if iZip2 <> 0 then
			sZip  := sZip + '-' + MjsEditNum(iZip2,'0000',4);	// 枝番文字列変換

		sAdr1 := '';
		sAdr2 := '';
	end
	else												// 住所上段入力
	begin
		sZip  := '';
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			sAdr1 := Jituzai_ETEdit_Address1.Text;					// 住所上段 取得
			sAdr2 := Jituzai_ETEdit_Address2.Text;					// 住所下段 取得
		end
		else
		begin
			sAdr1 := Goukei_ETEdit_Address1.Text;					// 住所上段 取得
			sAdr2 := Goukei_ETEdit_Address2.Text;					// 住所下段 取得
		end;
	end;

	iValue := fnCMNPostShow(sZip,sAdr1,sAdr2,0);		// 郵便番号辞書Exp 起動

	if iValue = 1 then
	begin
		iZip1 := StrToInt(MjsCopy(sZip,3));				// 基番 取り出し
		iZip2 := StrToInt(MJSHanCopy(sZip,5,4));				// 枝番 取り出し

		if Sender is TMNumEdit then
		begin
			if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			begin
				if (Jituzai_ETEdit_Address1.Text <> '') or
				   (Jituzai_ETEdit_Address2.Text <> '') then
				begin
					Beep;
					iValue := MjsMessageBoxEX(Self,'住所を上書きしてもよろしいですか？','郵便番号検索',
											  mjQuestion,mjYesNo,mjDefYes);
					if iValue <> mrYes then
						Exit;
				end;
			end
			else
			begin
				if (Goukei_ETEdit_Address1.Text <> '') or
				   (Goukei_ETEdit_Address2.Text <> '') then
				begin
					Beep;
					iValue := MjsMessageBoxEX(Self,'住所を上書きしてもよろしいですか？','郵便番号検索',
											  mjQuestion,mjYesNo,mjDefYes);
					if iValue <> mrYes then
						Exit;
				end;
			end;
		end;

		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			Jituzai_ENEdit_ZipCode1.Value := iZip1;					// 基番 SET
			Jituzai_ENEdit_ZipCode2.Value := iZip2;					// 枝番 SET
			Jituzai_ETEdit_Address1.Text  := sAdr1;					// 住所上段 SET
			Jituzai_ETEdit_Address2.Text  := sAdr2;					// 住所下段 SET
		end
		else
		begin
			Goukei_ENEdit_ZipCode1.Value := iZip1;					// 基番 SET
			Goukei_ENEdit_ZipCode2.Value := iZip2;					// 枝番 SET
			Goukei_ETEdit_Address1.Text  := sAdr1;					// 住所上段 SET
			Goukei_ETEdit_Address2.Text  := sAdr2;					// 住所下段 SET
		end;
	end
	else if iValue < 0 then
	begin
		MjsMessageBox(Self,'郵便番号辞書の呼び出しに失敗しました',mjError,mjDefOk);
		Exit;
	end;

end;

//***************************************************************************************************/
//*                                                                                                 */
//*	関数	: fnCorpRelation    <172>		                                                        */
//*																									*/
//*	目的	: 会社関連付処理(ﾏｽﾀ同期)								                                */
//*																									*/
//*	戻り値	: 0: 対象外 1: 正常 2:ｷｬﾝｾﾙ -1: 実在合計不一致 -9:ｴﾗｰ                                   */
//*																									*/
//***************************************************************************************************/
function    TJNTCRP018001f.fnCorpRelation(var pSync: SyncKey; pType: Integer): Integer;
var
    Qe       : TMQuery;
    iMastKbn : Integer;
    nPNCode  : Extended;
    strNameSimple,
    strGCode : String;
    bRet     : Boolean;
    stName   : String;
    iRet     : Integer;
    iSyncID  : Integer;
    iSyncPara: Integer;
begin

    result    := 0;
    iSyncPara := 0;
    nPNCode   := 0;
    iMastKbn  := 0;
    iSyncID   := 0;

    if ( m_pMyAppRecord.m_sParameter = '1' ) then
    	    stName := '工事'
    else    stName := 'プロジェクト';

    Qe := TMQuery.Create( Self );
    // 親会社DBとMQueryの接続
    MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, Qe );

    Qe.Close();
    Qe.SQL.Clear();

    case pType of
    1:  // HojyoMA //
    begin
//<255> MOD St
//        Qe.SQL.Add('select * from HojyoMA       ');
        Qe.SQL.Add('select SumKbn ');
        Qe.SQL.Add('      ,SimpleName ');
        Qe.SQL.Add('      ,MasterKbn ');
        Qe.SQL.Add('      ,NCode ');
        Qe.SQL.Add('      ,GCode ');
        Qe.SQL.Add('from HojyoMA       ');
//<255> MOD Ed
        Qe.SQL.Add('where MasterKbn = :pMstKbn  ');
        Qe.SQL.Add(' and  RDelKbn   = 0         ');
        Qe.SQL.Add(' and  GCode     = :pGCode   ');
        Qe.ParamByName('pMstKbn').Asinteger := m_nMasterDivision;   // 実在合計区分
        Qe.ParamByName('pGCode' ).AsString  := pSync.strExCode;     // 外部ｺｰﾄﾞ
    end;
    2:  // KojiInfo //
    begin
//<255> MOD St
//        Qe.SQL.Add('select * from KojiInfo      ');
        Qe.SQL.Add('select MasterKbn ');
        Qe.SQL.Add('      ,NCode ');
        Qe.SQL.Add(' from KojiInfo      ');
//<255> MOD Ed
        Qe.SQL.Add('where MasterKbn = :pMstKbn  ');
        Qe.SQL.Add(' and  NCode     = :pNCode   ');
        Qe.ParamByName('pMstKbn').Asinteger := m_nMasterDivision;   // 実在合計区分
//<255> DEL        Qe.ParamByName('pNCode' ).AsFloat   := pSync.nNCode;        // 内部ｺｰﾄﾞ
        Qe.ParamByName('pNCode' ).AsString   := FormatFloat('0',pSync.nNCode);        // 内部ｺｰﾄﾞ  <255> ADD
    end;
    3:  // KojiInfo2 //
    begin
//<255> MOD St
//        Qe.SQL.Add('select * from KojiInfo2         ');
        Qe.SQL.Add('select KojiInfo2NCode from KojiInfo2 ');
//<255> MOD Ed
        Qe.SQL.Add('where KojiInfo2NCode = :pNCode  ');
//<255> DEL        Qe.ParamByName('pNCode' ).AsFloat   := pSync.nNCode;        // 内部ｺｰﾄﾞ
        Qe.ParamByName('pNCode' ).AsString   := FormatFloat('0',pSync.nNCode);        // 内部ｺｰﾄﾞ  <255> ADD
    end;
    end;

    if ( Qe.Open = false ) then
    begin
        // SQLｴﾗｰ
        ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, Qe );
        with MjsMsgRec do
            MjsMessageBoxEx (AOwner, sMsg, sTitle, icontype, btntype, btndef, false);
        result := -9;
        Exit;
    end;

    // 親会社に既に該当ﾃﾞｰﾀが存在した場合
    if not Qe.Eof then
    begin
        // 実在合計ﾁｪｯｸ
        if ( pType = 1 ) then
        begin
            // 全社と子社で実在・合計が合致しない場合はﾒｯｾｰｼﾞを表示し同期は行わない
            if ( Qe.FieldByName('SumKbn').AsInteger <> pSync.nDivision ) then
            begin
                MjsMessageBoxEx (Self, JNTSYNC_MSG_SUM_ERR + #13#10#13#10
                               + Qe.FieldByName('SimpleName').AsString,
                               stName+'登録', mjQuestion, mjOk, mjDefOk);
                result := -1;
                Exit;
            end;
        end;

        if ( pType = 1 ) then
            iRet := MjsMessageBoxEx(Self, JNTSYNC_MSG_CHK_SYNC + #13#10#13#10
                           + Qe.FieldByName('SimpleName').AsString,
                             '確認', mjQuestion, mjYESNO, mjDefNO)
        else
            iRet := mrYES;

        if ( iRet = mrYES ) then
        begin
            // 親の_Relの存在ﾁｪｯｸ
            case pType of
            1:
            begin
                // HojyoMA_Relｷｰ情報を取得
                iMastKbn      := Qe.FieldByName('MasterKbn' ).AsInteger;
                nPNCode       := Qe.FieldByName('NCode'     ).AsFloat;
                strGCode      := Qe.FieldByName('GCode'     ).AsString;
                strNameSimple := Qe.FieldByName('SimpleName').AsString;

                Qe.Close();
                Qe.SQL.Clear();
//<255> DEL                Qe.SQL.Add('select * from HojyoMA_Rel           ');
                Qe.SQL.Add('select NCode from HojyoMA_Rel           ');  //<255> ADD
                Qe.SQL.Add('where MasterKbn   = :pMstKbn        ');
                Qe.SQL.Add(' and  NCode       = :pNCode         ');
                Qe.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode   ');
                Qe.ParamByName('pMstKbn'     ).AsInteger := iMastKbn;
//<255> MOD St
//                Qe.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                Qe.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                Qe.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                Qe.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed
            end;
            2:
            begin
                // KojiInfo_Relｷｰ情報を取得
                iMastKbn      := Qe.FieldByName('MasterKbn' ).AsInteger;
                nPNCode       := Qe.FieldByName('NCode'     ).AsFloat;

                Qe.Close();
                Qe.SQL.Clear();
//<255> DEL                Qe.SQL.Add('select * from KojiInfo_Rel          ');
                Qe.SQL.Add('select NCode from KojiInfo_Rel          ');  //<255> ADD
                Qe.SQL.Add('where MasterKbn   = :pMstKbn        ');
                Qe.SQL.Add(' and  NCode       = :pNCode         ');
                Qe.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode   ');
                Qe.ParamByName('pMstKbn'     ).AsInteger := iMastKbn;
//<255> MOD St
//                Qe.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                Qe.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                Qe.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                Qe.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed
            end;
            3:
            begin
                // KojiInfo2_Relｷｰ情報を取得
                nPNCode       := Qe.FieldByName('KojiInfo2NCode').AsFloat;

                Qe.Close();
                Qe.SQL.Clear();
//<255> DEL                Qe.SQL.Add('select * from KojiInfo2_Rel          ');
                Qe.SQL.Add('select KojiInfo2NCode from KojiInfo2_Rel          ');  //<255> ADD
                Qe.SQL.Add('where KojiInfo2NCode = :pNCode       ');
                Qe.SQL.Add(' and  GrpSegNCode    = :pGrpSegNCode ');
//<255> MOD St
//                Qe.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                Qe.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                Qe.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                Qe.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed
            end;
            end;

            if ( Qe.Open = false ) then
            begin
                // SQLｴﾗｰ
                ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, Qe );
                with MjsMsgRec do
                    MjsMessageBoxEx (AOwner, sMsg, sTitle, icontype, btntype, btndef, false);
                result := -9;
                Exit;
            end;

            if ( Qe.Eof ) then
                    bRet := true
            else    bRet := false;

            try
                Qe.Close();
                Qe.SQL.Clear();
                case pType of
                1:
                begin
                    if ( bRet ) then    // 新規
                    begin
                        Qe.SQL.Add('insert into HojyoMA_Rel (                     ');
                        Qe.SQL.Add(' MasterKbn, NCode, GrpSegNCode, RDelKbn_REL)  ');
                        Qe.SQL.Add('values (:pMstKbn, :pNCode, :pGrpSegNCode, 0)  ');
                    end
                    else                // 更新
                    begin
                        Qe.SQL.Add('update HojyoMA_Rel set               ');
                        Qe.SQL.Add('    RDelKbn_REL = 0                  ');
                        Qe.SQL.Add('   ,UpdDateTM   = CURRENT_TIMESTAMP  ');
                        Qe.SQL.Add('where MasterKbn   = :pMstKbn         ');
                        Qe.SQL.Add('  and Ncode       = :pNCode          ');
                        Qe.SQL.Add('  and GrpSegNCode = :pGrpSegNCode    ');
                    end;

                    Qe.ParamByName('pMstKbn'     ).AsInteger := iMastKbn;
//<255> MOD St
//                    Qe.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                    Qe.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                    Qe.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                    Qe.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                    iSyncID   := JNTSYNC_HojyoMA;
                    iSyncPara := 0;
                end;
                2:
                begin
                    if ( bRet = true ) then     // 新規
                    begin
                        Qe.SQL.Add('insert into KojiInfo_Rel (                    ');
                        Qe.SQL.Add(' MasterKbn, NCode, GrpSegNCode, RDelKbn_REL)  ');
                        Qe.SQL.Add('values (:pMstKbn, :pNCode, :pGrpSegNCode, 0)  ');
                    end
                    else                        // 更新
                    begin
                        Qe.SQL.Add('update KojiInfo_Rel set              ');
                        Qe.SQL.Add('    RDelKbn_REL = 0                  ');
                        Qe.SQL.Add('   ,UpdDateTM   = CURRENT_TIMESTAMP  ');
                        Qe.SQL.Add('where MasterKbn   = :pMstKbn         ');
                        Qe.SQL.Add('  and Ncode       = :pNCode          ');
                        Qe.SQL.Add('  and GrpSegNCode = :pGrpSegNCode    ');
                    end;

                    Qe.ParamByName('pMstKbn'     ).AsInteger := iMastKbn;
//<255> MOD St
//                    Qe.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                    Qe.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                    Qe.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                    Qe.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                    iSyncID   := JNTSYNC_KojiInfo;
                    iSyncPara := 1; // 実ﾃﾞｰﾀを削除するﾊﾟﾀｰﾝ
                end;
                3:
                begin
                    if ( bRet = true ) then     // 新規
                    begin
                        Qe.SQL.Add('insert into KojiInfo2_Rel (                 ');
                        Qe.SQL.Add(' KojiInfo2NCode, GrpSegNCode, RDelKbn_REL)  ');
                        Qe.SQL.Add('values (:pNCode, :pGrpSegNCode, 0)          ');
                    end
                    else
                    begin
                        Qe.SQL.Add('update KojiInfo2_Rel set             ');
                        Qe.SQL.Add('    RDelKbn_REL = 0                  ');
                        Qe.SQL.Add('   ,UpdDateTM   = CURRENT_TIMESTAMP  ');
                        Qe.SQL.Add('where KojiInfo2NCode = :pNCode       ');
                        Qe.SQL.Add('  and GrpSegNCode    = :pGrpSegNCode ');
                    end;
//<255> MOD St
//                    Qe.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                    Qe.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                    Qe.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                    Qe.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                    iSyncID   := JNTSYNC_KojiInfo2;
                    iSyncPara := 1; // 実ﾃﾞｰﾀを削除するﾊﾟﾀｰﾝ
                end;
                end;

                if ( Qe.ExecSQL = false ) then
                begin
                    MjsMessageBoxEx (Self,
                                     '自社への関連付けに失敗しました。',
// <291> MOD st
//                                     'マスタ同期', mjError, mjOk, mjDefOk);
                                     'マスター同期', mjError, mjOk, mjDefOk);
// <291> MOD ed
                    result := -9;
                    Exit;
                end;

                // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                if ( m_SyncMaster.fnCall_SYNC (iSyncID, iSyncPara) = false ) then
                begin
                    result := -9;
                    Exit;
                end;

                // 補助ﾏｽﾀの同期の場合、体系を生成する
                if ( pType = 1 ) then
                begin
                    // <184> - ST
                    // SecHojyoDispInfoのﾒﾝﾃを行う

                    Qe.Close();
                    // 親会社DBとMQueryの接続
                    MDataModule.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, Qe );

                    Qe.Close();
                    Qe.SQL.Clear();
//<255> DEL                    Qe.SQL.Add('select * from SecHojyoDispInfo   ');
                    Qe.SQL.Add('select PlaceNCode from SecHojyoDispInfo   ');  //<255> ADD
                    Qe.SQL.Add('where Opekbn          = :Opekbn  ');  // 使用区分
                    Qe.SQL.Add('  and Masterkbn       = :Mstkbn  ');  // ﾏｽﾀ区分(101～110)
                    Qe.SQL.Add('  and PlaceNCode      = :PNCode  ');  // ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
                    Qe.SQL.Add('  and NoDispMasterkbn = :NMstKbn ');  // ﾏｽﾀ区分
                    Qe.SQL.Add('  and NCode           = :NCode   ');  // 内部ｺｰﾄﾞ

                    Qe.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                    Qe.ParamByName('Mstkbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL                    Qe.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                    Qe.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
                    Qe.ParamByName('NMstKbn').AsInteger := iMastKbn;
//<255> DEL                    Qe.ParamByName('NCode'  ).AsFloat   := nPNCode;
                    Qe.ParamByName('NCode'  ).AsString   := FormatFloat('0',nPNCode);  //<255> ADD

                    //  ｴﾗｰの判定
                    if	( not Qe.Open() ) then
                    begin
                        // SQLｴﾗｰ
                        ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, Qe );
                        with MjsMsgRec do
                            MjsMessageBoxEx (AOwner, sMsg, sTitle, icontype, btntype, btndef, false);
                        result := -9;
                        Exit;
                    end;

                    // 該当ﾚｺｰﾄﾞが存在していない場合は、表示ﾚｺｰﾄを生成する。
                    if	( Qe.Eof ) then
                    begin
                        Qe.Close();
                        Qe.SQL.Clear();
                        Qe.SQL.Add('insert into SecHojyoDispInfo  ( ');
                        Qe.SQL.Add(' Opekbn,Masterkbn,PlaceNCode,   ');
                        Qe.SQL.Add(' NoDispMasterKbn,NCode,DispKbn, ');
                        Qe.SQL.Add(' UpdateTime ) values (          ');
                        Qe.SQL.Add(' :Opekbn,:Mstkbn,:PNCode,       ');
                        Qe.SQL.Add(' :NMstKbn,:NCode,:DispKbn,      ');
                        Qe.SQL.Add(' CURRENT_TIMESTAMP )            ');

                        Qe.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                        Qe.ParamByName('Mstkbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
                        Qe.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                        Qe.ParamByName('NMstKbn').AsInteger := iMastKbn;
                        Qe.ParamByName('NCode'  ).AsFloat   := nPNCode;
                        Qe.ParamByName('DispKbn').AsInteger := DISP_ON;

                        if	( not Qe.ExecSQL() ) then
                        begin
                            // SQLｴﾗｰ
                            ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, Qe );
                            with MjsMsgRec do
                                MjsMessageBoxEx (AOwner, sMsg, sTitle, icontype, btntype, btndef, false);
                            result := -9;
                            Exit;
                        end;
                    end
                    else
                    begin
                        Qe.Close();
                        Qe.SQL.Clear();
                        Qe.SQL.Add('update SecHojyoDispInfo set      ');
                        Qe.SQL.Add(' DispKbn    = :DispKbn,          ');
                        Qe.SQL.Add(' UpdateTime = CURRENT_TIMESTAMP  ');
                        Qe.SQL.Add('where Opekbn          = :Opekbn  ');
                        Qe.SQL.Add('  and Masterkbn       = :MstKbn  ');
                        Qe.SQL.Add('  and PlaceNCode      = :PNCode  ');
                        Qe.SQL.Add('  and NoDispMasterKbn = :NMstKbn ');
                        Qe.SQL.Add('  and NCode           = :NCode   ');

                        Qe.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                        Qe.ParamByName('MstKbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL                        Qe.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                        Qe.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD
                        Qe.ParamByName('NMstKbn').AsInteger := iMastKbn;
//<255> DEL                        Qe.ParamByName('NCode'  ).AsFloat   := nPNCode;
                        Qe.ParamByName('NCode'  ).AsString   := FormatFloat('0',nPNCode);  //<255> ADD
                        Qe.ParamByName('DispKbn').AsInteger := DISP_ON;

                        if	( not Qe.ExecSQL() ) then
                        begin
                            // SQLｴﾗｰ
                            ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, Qe );
                            with MjsMsgRec do
                                MjsMessageBoxEx (AOwner, sMsg, sTitle, icontype, btntype, btndef, false);
                            result := -9;
                            Exit;
                        end;
                    end;
                    // <184> - ED

                    // 子会社DBの補助体系を更新する
                    uvNCode := nPNCode; // 内部ｺｰﾄﾞの保管
                    if ( fnHojyoTreeWrite ( strGCode ) = false ) then
                    begin
                        result := -9;
                        Exit;
                    end;
                end;
            except
                result := -9;
                Exit;
            end;

            // TreeViewの更新
            if ( pType = 1 ) then
            begin
                fnTreeUpdate ( strGCode, pSync.nDivision );
            end;

            result := 1;    // 正常
            Exit;
        end
        else
        begin
            // ｷｬﾝｾﾙ
            result := 2;
            Exit;
        end;
    end;

end;

//**************************************************************************
//	Component	:	MemData
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.JHojyoMA_DMemDataBeforePost(DataSet: TDataSet);
var
	stCode	  :	String;
	QueryRead :	TMQuery;
    rSyncKey  : SyncKey;    // <172>
    iRet      : Integer;    // <172>
    Qe        : TMQuery;    // <172>
begin
	if 	MemPost_Sw <> 0 then
		exit;

	if m_fEnd = 1 then
		Exit;

	if Jituzai_PPanel_Grid.Visible = false then
		abort;

	// 外部コード
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		stCode := JHojyoMA_DMemDataGCode.AsString;
		stCode := TrimRight(stCode);
		JHojyoMA_DMemDataGCode.AsString := stCode;
	end
	else
	begin
		if JHojyoMA_DMemDataGCode.AsString <> '' then
			stCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
		else
			stCode := '';
	end;

	//　外部コードの0は許さない
	if JHojyoMA_DMemData.State in [dsInsert] then		// 新規ﾃﾞｰﾀ？
	begin
		if (stCode = '') or (stCode = '0000000000') then
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
			begin
				Beep;
				Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
				abort;
				exit;
			end
			else
			begin
				Beep;
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')	// 元の場所に戻す
				else
					MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');	// 元の場所に戻す
				abort;
			end;
		end;
	end;

	if JHojyoMA_DMemData.State in [dsInsert] then		// 新規ﾃﾞｰﾀ？
	begin
		// フリーコードチェック
		if not JNTMASERRORCODECHECK(stCode,gstErrorStr) then
		begin
			Beep;
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg,MjsMsgRec.sTitle,MjsMsgRec.icontype,MjsMsgRec.btntype,MjsMsgRec.btndef,MjsMsgRec.LogType);
			if BSpeedButtonIS.Caption = '詳細(&T)' then
			begin
				Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
				abort;
				exit;
			end
			else
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')	// 元の場所に戻す
				else
					MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');	// 元の場所に戻す
				abort;
			end;
		end;

		QueryRead := TMQuery.Create (Self);
		MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

		try
			with QueryRead do
			begin
				Close;

				SQL.Clear;							// ｸｴﾘの初期化
				// 工事を外部ｺｰﾄﾞ昇順でGET
//<255> DEL				SQL.Add('select * from HojyoMA');
				SQL.Add('select GCode from HojyoMA');  //<255> ADD
				SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:GCode');
				SQL.Add('order by Gcode');
                SetFld('pMKBN').asInteger := m_nMasterDivision;
				SetFld('GCode').AsString := stCode;

				Open;						// ｸｴﾘの開始

				if stCode = GetFld('GCode').AsString then
				begin
					if BSpeedButtonIS.Caption = '詳細(&T)' then
					begin
						Beep;
						MjsMessageBoxEX(Self,'同一' + MasterInfo_DMemDataJHojyoName.AsString + 'が登録済みです。','登録',mjInformation ,mjOk, mjDefOk);
						Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
						abort;
						exit;
					end
					else
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')	// 元の場所に戻す
						else
							MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');	// 元の場所に戻す
						abort;
					end;
				end;
			end;
		finally
			QueryRead.Free;
		end;

// <203> ADD start
    	SessionPractice(C_ST_PROCESS);
    	try
// <203> ADD end

        // -------------------------------------------------------------------------
        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
        //
        //  親子同時に同一ｺｰﾄﾞを指定し、一覧(実在)画面でPostした場合の処理
        //  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合
        //  の考慮が必要。
        // -------------------------------------------------------------------------
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( JHojyoMA_DMemData.State in [dsInsert] ) then
        begin
            if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
                    stCode := Format ('%.16d', [StrToInt64 (Trim (JHojyoMA_DMemDataGCode.AsString))])    // 数値属性
            else    stCode := TrimRight (JHojyoMA_DMemDataGCode.AsString);                               // 文字属性

            // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule^.BeginTran( dbCorp_Select );

            rSyncKey.strExCode := stCode;
            rSyncKey.nDivision := 0;

            // HojyoMAの同期
            iRet := fnCorpRelation ( rSyncKey, 1 );

            if ( iRet = 1 ) then
            begin
                rSyncKey.nNCode := uvNCode;
                // KojiInfoの同期
                iRet := fnCorpRelation ( rSyncKey, 2 );
            end;

            // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
            if ( iRet = 1 ) then
            begin
                Qe := TMQuery.Create ( Self );

                try
                    MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                    Qe.Close;
                    Qe.SQL.Clear;
//<255> DEL                    Qe.SQL.Add('select * from P_kojiinfo2 ');
                    Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                    Qe.SQL.Add('where MasterKbn = :pMstkbn');
                    Qe.SQL.Add('  and NCode     = :pNCode ');
                    Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                    Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                    Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                    if Qe.Open = false then
                        Abort;

                    Qe.First;
                    while not Qe.Eof do
                    begin
                        rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                        iRet := fnCorpRelation(rSyncKey, 3);

                        if (iRet <> 0) and (iRet <> 1) then
                            Abort;

                        Qe.Next;
                    end;
                finally
                    Qe.Close();
                    Qe.Free();
                end;
            end;

            if ( iRet <> 1 ) then
            begin
                // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback( dbCorp_Select );
            end;

            case iRet of
                0:  begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                    end;
                1:  begin
                        // 親会社DBに対してｺﾐｯﾄを実行する
                        MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してｺﾐｯﾄを実行する
                        MDataModule.Commit( dbCorp_Select );

                        // 正常に関連付が行えた場合は、画面の再描画を行う
                        // ↓↓↓Gridの初期化
                        TBaseNode	:= VTreeView.Items[0];
                        fnCreateGrid ( TBaseNode, 0 );
                        if ( JHojyoMA_DMemData.Eof = false ) then
		                begin
			                JHojyoMA_DMemData.First;
                            fnCreateCard (0);
		                end
		                else
                        begin
			                fnClearCard (0);
                        end;
                        // ↑↑↑
                        Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                        Abort;
                    end;
                2:  begin
                        // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                        Jituzai_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                        Abort;
                    end;
                -1, -9: begin
                        // 実在合計不一致、例外ｴﾗｰ
                        Abort;
                    end;
            end;
        end;
        // ↑↑↑<172>
        // -------------------------------------------------------------------------

// <203> ADD start
		finally
    		SessionPractice(C_ED_PROCESS);
    	end;
// <203> ADD end
	end;

end;

//**************************************************************************
//	Component	:	MemData
//	Event	    :	OnExit
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.GHojyoMA_DMemDataBeforePost(DataSet: TDataSet);
var
	stCode	  :	String;
	QueryRead :	TMQuery;
    rSyncKey  : SyncKey;    // <172>
    iRet      : Integer;    // <172>
    Qe        : TMQuery;    // <172>
begin

	if 	MemPost_Sw <> 0 then
		exit;

	if m_fEnd = 1 then
		Exit;

	if Goukei_PPanel_Grid.Visible = false then
		abort;

	// 外部コード
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		stCode := GHojyoMA_DMemDataGCode.AsString;
		stCode := TrimRight(stCode);
		GHojyoMA_DMemDataGCode.AsString := stCode;
	end
	else
	begin
		if GHojyoMA_DMemDataGCode.AsString <> '' then
			stCode := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
		else
			stCode := '';
	end;

	//　外部コードの0は許さない
	if (stCode = '') or (stCode = '0000000000000000') then
	begin
		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			Beep;
			Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
			abort;
			exit;
		end
		else
		begin
			Beep;
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				MjsSetFocus(Self, 'Goukei_ETEdit_GCode')	// 元の場所に戻す
			else
				MjsSetFocus(Self, 'Goukei_ENEdit_GCode');	// 元の場所に戻す
			abort;
			exit;
		end;
	end;

	if GHojyoMA_DMemData.State in [dsInsert] then		// 新規ﾃﾞｰﾀ？
	begin
		// フリーコードチェック
		if not JNTMASERRORCODECHECK(stCode,gstErrorStr) then
		begin
			Beep;
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg,MjsMsgRec.sTitle,MjsMsgRec.icontype,MjsMsgRec.btntype,MjsMsgRec.btndef,MjsMsgRec.LogType);
			if BSpeedButtonIS.Caption = '詳細(&T)' then
			begin
				Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
				abort;
				exit;
			end
			else
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					MjsSetFocus(Self, 'Goukei_ETEdit_GCode')	// 元の場所に戻す
				else
					MjsSetFocus(Self, 'Goukei_ENEdit_GCode');	// 元の場所に戻す
				abort;
				exit;
			end;
		end;

		QueryRead := TMQuery.Create (Self);
		MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

		try
			with QueryRead do
			begin
				Close;

				SQL.Clear;							// ｸｴﾘの初期化
				// 工事を外部ｺｰﾄﾞ昇順でGET
//<255> DEL				SQL.Add('select * from HojyoMA');
				SQL.Add('select GCode from HojyoMA');  //<255> ADD
				SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:GCode');
				SQL.Add('order by Gcode');
				SetFld('GCode').AsString := stCode;
				SetFld('pMKBN').AsInteger	    := m_nMasterDivision;

				Open;						// ｸｴﾘの開始

				if stCode = GetFld('GCode').AsString then
				begin
					if BSpeedButtonIS.Caption = '詳細(&T)' then
					begin
						Beep;
						MjsMessageBoxEX(Self,'同一' + MasterInfo_DMemDataJHojyoName.AsString + 'が登録済みです。','登録',mjInformation ,mjOk, mjDefOk);
						Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
						abort;
						exit;
					end
					else
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
							MjsSetFocus(Self, 'Goukei_ETEdit_GCode')	// 元の場所に戻す
						else
							MjsSetFocus(Self, 'Goukei_ENEdit_GCode');	// 元の場所に戻す
						abort;
						exit;
					end;
				end;
			end;
		finally
			QueryRead.Free;
		end;

// <203> ADD start
    	SessionPractice(C_ST_PROCESS);
    	try
// <203> ADD end

        // -------------------------------------------------------------------------
        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
        //
        //  親子同時に同一ｺｰﾄﾞを指定し、一覧(合計)画面でPostした場合の処理
        //  通常ならば、ｺｰﾄﾞ指定時で同期関連付を行うが、同時同一ｺｰﾄﾞの場合
        //  の考慮が必要。
        // -------------------------------------------------------------------------
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) and ( GHojyoMA_DMemData.State in [dsInsert] ) then
        begin
            if ( MasterInfo_DMemDataCodeAttr.AsInteger <= 1 ) then
                    stCode := Format ('%.16d', [StrToInt64 (Trim (GHojyoMA_DMemDataGCode.AsString))])    // 数値属性
            else    stCode := TrimRight (GHojyoMA_DMemDataGCode.AsString);                               // 文字属性

            // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
            // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule^.BeginTran( dbCorp_Select );

            rSyncKey.strExCode := stCode;
            rSyncKey.nDivision := 1;    // 合計

            // HojyoMAの同期
            iRet := fnCorpRelation ( rSyncKey, 1 );

            if ( iRet = 1 ) then
            begin
                rSyncKey.nNCode := uvNCode;
                // KojiInfoの同期
                iRet := fnCorpRelation ( rSyncKey, 2 );
            end;

            // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
            if ( iRet = 1 ) then
            begin
                Qe := TMQuery.Create ( Self );

                try
                    MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                    Qe.Close;
                    Qe.SQL.Clear;
//<255> DEL                    Qe.SQL.Add('select * from P_kojiinfo2 ');
                    Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                    Qe.SQL.Add('where MasterKbn = :pMstkbn');
                    Qe.SQL.Add('  and NCode     = :pNCode ');
                    Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                    Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                    Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                    if Qe.Open = false then
                        Abort;

                    Qe.First;
                    while not Qe.Eof do
                    begin
                        rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                        iRet := fnCorpRelation(rSyncKey, 3);

                        if (iRet <> 0) and (iRet <> 1) then
                            Abort;

                        Qe.Next;
                    end;
                finally
                    Qe.Close();
                    Qe.Free();
                end;
            end;

            if ( iRet <> 1 ) then
            begin
                // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback( dbCorp_Select );
            end;

            case iRet of
                0:  begin
                        // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                    end;
                1:  begin
                        // 親会社DBに対してｺﾐｯﾄを実行する
                        MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してｺﾐｯﾄを実行する
                        MDataModule.Commit( dbCorp_Select );

                        // 正常に関連付が行えた場合は、画面の再描画を行う
                        // ↓↓↓Gridの初期化
                        TBaseNode	:= VTreeView.Items[0];
                        fnCreateGrid ( TBaseNode, 1 );
                        if ( GHojyoMA_DMemData.Eof = false ) then
		                begin
			                GHojyoMA_DMemData.First;
                            fnCreateCard (1);
		                end
		                else
                        begin
			                fnClearCard (1);
                        end;
                        // ↑↑↑
                        Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                        Abort;
                    end;
                2:  begin
                        // 会社関連付をｷｬﾝｾﾙした場合、ﾌｫｰｶｽ位置を戻す
                        Goukei_DdxDBGrid.FocusedColumn	:= COL_GCODE;
                        Abort;
                    end;
                -1, -9: begin
                        // 実在合計不一致、例外ｴﾗｰ
                        Abort;
                    end;
            end;
        end;
        // ↑↑↑<172>
        // -------------------------------------------------------------------------

// <203> ADD start
		finally
    		SessionPractice(C_ED_PROCESS);
    	end;
// <203> ADD end

	end;

end;

//**************************************************************************
//	Proccess  :	実在EditコンポーネントのExit共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 11 / 9
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.JituzaiEditExit(Sender: TObject);
var
	strGCode	 : String;
	iSumKbn		 : Integer;
	stWork		 : String;
	sAdr1		 : String;
	sAdr2		 : String;
	sZip		 : String;
	iZip1		 : Integer;
	iZip2		 : Integer;
	iValue		 : Int64;
	iCount		 : Integer;
	i			 : Integer;
	sValue		 : String;
	iPos		 : Integer;
	iMin		 : Integer;
	iMax		 : Integer;
	QueryRead	 : TMQuery;
	NodeSelect	 : TTreeNode;
	stWorkRec	 : ^TreeViewRec;
	NodeOya		 : TTreeNode;
	stWorkRecOya : ^TreeViewRec;
	NodeOya2	 : TTreeNode;
	stWorkRecOya2: ^TreeViewRec;
	stWorkRecBase: ^TreeViewRec;
	stCode		 : String;
	stName		 : String;
	iCode     	 : Int64;
	iCut		 : Integer;
	iRet		 : Integer;
    lvNAME       : String;
    rSyncKey     : SyncKey;     // <172>
    iRet2        : Integer;     // <172>
    Qe           : TMQuery;     // <172>
    NextControl  : TWinControl;  //<KSN> ADD
    strName		 : String;		// <SEI> ADD
    exNCode		 : Extended;    // <SEI> ADD
//<TAX> ADD St
    returnCode : Integer;
    sWk : string;
    oCont : TKojiInfo2;
    kojiInfoParam : TKojiInfoParam;
    oDic,
    oDic2 : TDIC_COTXRATE;
//<TAX> ADD Ed
begin
    if m_Close then Exit;
//<EXP> ADD St
    msExpDivision := '';
    msExpEmployee := '';
//<EXP> ADD Ed
    iRet2 := 0;

	if (m_fEnd = 1) or (m_fChange = 1) or (m_fPrint = 1) or
		(m_fIS = 1) or (m_fDel = 1) or (m_fTreeClk = 1) then
		exit;

	if ( m_fEnd = 0 ) then
	begin
        NextControl := Screen.ActiveControl;  //<KSN> ADD
		if ( Jituzai_PPanel_Card.Visible = false ) then
		begin
            // 項目復元
			FieldRestor(Sender, 0);
			exit;
		end;

		if ( gbTreeClick = true ) then
		begin
			gbTreeClick := false;
			exit;
		end;

//<160> - ST
//<155> - ST
//		if ( LSinsei.Visible = true ) then
//			fnSinseiDspControl(true);
//<155> - ED

		if ( LSinsei.Visible = true ) then
		begin
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			begin
				strGCode := Jituzai_ETEdit_GCode.Text;
//<KSN> DEL				if ( strGCode = '' ) then
				if (( strGCode = '' ) and (NextControl <> nil)) then  //<KSN> ADD
				begin
                    if (NextControl <> ECombo_Header) then  //<KSN> ADD
                    begin                                   //<KSN> ADD
                        m_bTabClickFlg := true;
                        Jituzai_ETEdit_GCode.SetFocus;
                        abort;
                    end;   //<KSN> ADD
				end;
			end
			else
			begin
//<KSN> DEL				if ( Jituzai_ENEdit_GCode.InputFlag = true ) then
				if (( Jituzai_ENEdit_GCode.InputFlag = true ) and (NextControl <> nil)) then  //<KSN> ADD
				begin
                    if (NextControl <> ECombo_Header) then  //<KSN> ADD
                    begin                                   //<KSN> ADD
                        m_bTabClickFlg := true;
                        Jituzai_ENEdit_GCode.SetFocus;
//<KSN> DEL                        exit;
                        abort;  //<KSN> ADD
                    end;  //<KSN> ADD
				end;
			end;
			fnSinseiDspControl(true);
		end;
//<160> - ED

		// ﾌﾘｰ属性
		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
		begin
			if ( Sender = Jituzai_ETEdit_GCode ) then
			begin
//<TAX> ADD St
                // 申請書参照時以外のときFontColorの初期化をする
                if not LSinsei.Visible then
                begin
//<TAX> ADD Ed
                    FontColorChange();  // <225> 文字色変更
                end;  //<TAX> ADD

                fnSetFncType (true, 0);
//<113>         MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

				strGCode := Jituzai_ETEdit_GCode.Text;
				strGCode := TrimRight(strGCode);
				Jituzai_ETEdit_GCode.Text := strGCode;

                // 該当ﾃﾞｰﾀ検索
				iSumKbn	 := 0;
				iRet     := fnDataRead (strGCode, iSumKbn, 1);

                //<155> - ST
				if ( HojyoMA_DMQuery.Eof = true ) then	// 新規
                begin
					if ( LSinsei.Visible ) then			// WF参照
						m_WFSw := true;
                end;
                //<155> - ED

				if ( iRet < 0 ) then
				begin
					Root_PMTab.Items.Selected   := PAGE_GOKEI;
					Root_PMTab.Items[1].Enabled := true;
					Goukei_ETEdit_GCode.Text    := strGCode;
					GoukeiEditExit(Goukei_ETEdit_GCode);
					exit;
				end;

                // 新規挿入
				if ( HojyoMA_DMQuery.Eof = true ) then
				begin
					// ﾌﾘｰｺｰﾄﾞ(有効文字列)ﾁｪｯｸ
					if not JNTMASERRORCODECHECK(strGCode,gstErrorStr) then
					begin
						Beep;
						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
						MjsMessageBoxEx(Self,
                                        MjsMsgRec.sMsg,
                                        MjsMsgRec.sTitle,
                                        MjsMsgRec.icontype,
                                        MjsMsgRec.btntype,
                                        MjsMsgRec.btndef,
                                        MjsMsgRec.LogType);
                        // 元の場所に戻す
						MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
						abort;
					end;

                    // <155> - ST
					if not LSinsei.Visible then
					begin
						fnClearCard (iSumKbn);
						Jituzai_ETEdit_GCode.Text := strGCode;
						Jituzai_ENEdit_HaifuKbn.InputFlag := true;
					end
					else if LSinsei.Visible = true then
					begin
						if Jituzai_PPanel_Card_1.Visible = true then
							Jituzai_ETEdit_LongName.SetFocus
						else
							Goukei_ETEdit_LongName.SetFocus;
					end;
                    // <155> - ED
		        	fnGetKanseiFuriInfo();		// <274> 完成振替情報取得
        			fnKanseiFuriInfoDsp();		// <274> 完成振替情報表示                    

					if Jituzai_ETEdit_GCode.Text = ''then
					begin
                        if (NextControl <> ECombo_Header) then  //<KSN> ADD
                        begin                                   //<KSN> ADD
                            Beep;
                            MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                            Abort;
                        end;  //<KSN> ADD
					end;

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        // HojyoMAの同期
                        iRet2 := fnCorpRelation ( rSyncKey, 1 );

                        if ( iRet2 = 1 ) then
                        begin
                            rSyncKey.nNCode := uvNCode;
                            // KojiInfoの同期
                            iRet2 := fnCorpRelation ( rSyncKey, 2 );
                        end;

                        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                        if ( iRet2 = 1 ) then
                        begin
                            Qe := TMQuery.Create ( Self );

                            try
                                MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                                Qe.Close;
                                Qe.SQL.Clear;
//<255> DEL                                Qe.SQL.Add('select * from P_kojiinfo2 ');
                                Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                                Qe.SQL.Add('where MasterKbn = :pMstkbn');
                                Qe.SQL.Add('  and NCode     = :pNCode ');
                                Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                                Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                                Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                                if Qe.Open = false then
                                    Abort;

                                Qe.First;
                                while not Qe.Eof do
                                begin
                                    rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                    iRet2 := fnCorpRelation(rSyncKey, 3);

                                    if (iRet2 <> 0) and (iRet2 <> 1) then
                                        Abort;

                                    Qe.Next;
                                end;
                            finally
                                Qe.Close();
                                Qe.Free();
                            end;
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        // 会社関連付処理
                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                    m_RowState := STATE_INSERT;
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
                                    fnDataRead (strGCode, iSumKbn, 1);

//<271> DEL                                    SetLength(m_aCmnt_Jitu,0);
                                    m_aCmnt_Jitu.Clear();  //<271> ADD
                                    fnMemSet (iSumKbn, false);
                					fnCreateCard (iSumKbn);

                                    m_RowState := STATE_EDIT;

                                    //MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end
                // 追加更新
				else
				begin
                    if PPanelTree.Visible then   //<KSN> ADD
                    begin  //<KSN> ADD
                        // 他の合計についている？
                        NodeSelect := VTreeView.Items[0];
                        while ( NodeSelect <> nil ) do
                        begin
                            stWorkRec 	:= NodeSelect.Data;
                            if ( strGCode = stWorkRec^.strExCode ) then
                            begin
                                NodeOya      := NodeSelect.Parent;
                                stWorkRecOya := NodeOya.Data;
                                if ( stWorkRec^.strExCode <> stWorkRecOya^.strExCode ) then
                                begin
                                    TBaseNode     := NodeOya;
                                    stWorkRecBase := TBaseNode.Data;
                                    if ( stWorkRecBase^.nDivision <> 9 ) then
                                    begin
                                        stCode	      := stWorkRecBase^.strExCode;
                                        m_stGCodeSave := stCode;	        // ｺｰﾄﾞのｾｰﾌﾞ
                                    end
                                    else
                                    begin
                                        stCode		   := '';
                                        m_stGCodeSave  := '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end;

                                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                                    begin
                                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                                System.Delete(stCode, 1, iCut);
                                            end;
                                        end
                                        else
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCode := StrToInt64(Trim(stCode));
                                                stCode := IntToStr(iCode);
                                            end;
                                        end;
                                    end;
                                    stName					 := stWorkRecBase^.strName;
                                    Root_PMTab.BorderCaption := stCode + ' ' + stName;
                                end;

                                if stWorkRecOya^.nDivision = 1 then
                                begin
                                    NodeOya2      := NodeOya.Parent;
                                    stWorkRecOya2 := NodeOya2.Data;
                                    if stWorkRecOya2^.nDivision = 1 then
                                        Root_PMTab.Items[1].Enabled := false
                                    else
                                        Root_PMTab.Items[1].Enabled := true;
                                end;

                                break;
                            end
                            else
                            begin
                                NodeSelect	:= NodeSelect.GetNext;
                                Root_PMTab.Items[1].Enabled := true;
                            end;
                        end;
                    end;  //<KSN> ADD
					gbTreeClick := false;

                    // <155> - ST
					if ( LSinsei.Visible = true ) then
					begin
						if ( Jituzai_PPanel_Card_1.Visible = true ) then
    							Jituzai_ETEdit_LongName.SetFocus
						else    Goukei_ETEdit_LongName.SetFocus;
					end;
                    // <155> - ED

//<271> DEL					SetLength(m_aCmnt_Jitu,0);	// 配列をｸﾘｱ
                    m_aCmnt_Jitu.Clear();  //<271> ADD
					fnMemSet (iSumKbn, false);
					fnCreateCard (iSumKbn);

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                        begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                        Qe := TMQuery.Create ( Self );

                        try
                            MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                            Qe.Close;
                            Qe.SQL.Clear;
//<255> DEL                            Qe.SQL.Add('select * from P_kojiinfo2 ');
                            Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                            Qe.SQL.Add('where MasterKbn = :pMstkbn');
                            Qe.SQL.Add('  and NCode     = :pNCode ');
                            Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                            Qe.ParamByName('pNCode').AsFloat    := JHojyoMA_DMemDataNCode.AsFloat;
                            Qe.ParamByName('pNCode').AsString    := JHojyoMA_DMemDataNCode.AsString;  //<255> ADD

                            if Qe.Open = false then
                                Abort;

                            Qe.First;
                            while not Qe.Eof do
                            begin
                                rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                iRet2 := fnCorpRelation(rSyncKey, 3);

                                if (iRet2 <> 0) and (iRet2 <> 1) then
                                    Abort;

                                Qe.Next;
                            end;
                        finally
                            Qe.Close();
                            Qe.Free();
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        // 会社関連付処理
                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
//<271> DEL                                    SetLength(m_aCmnt_Jitu,0);
                                    m_aCmnt_Jitu.Clear();  //<271> ADD
                                    fnMemSet (iSumKbn, false);
                					fnCreateCard (iSumKbn);

                                    //MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;

                    m_RowState := STATE_EDIT;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end;
			end;
		end
        // 数値属性
		else
		begin
			if ( Sender = Jituzai_ENEdit_GCode ) then
			begin
// <254>ADD↓
           		if ( Jituzai_ENEdit_GCode.Value = 0 ) and ( Jituzai_ENEdit_GCode.InputFlag = true ) then
                begin
                    if (NextControl <> ECombo_Header) then  //<KSN> ADD
                    begin                                   //<KSN> ADD
                        Jituzai_ENEdit_GCode.SetFocus;
                        abort;
                    end;     //<KSN> ADD
                end;
// <254>ADD↑
//<TAX> ADD St
                // 申請書参照時以外のときFontColorの初期化をする
                if not LSinsei.Visible then
                begin
//<TAX> ADD Ed
                    FontColorChange();  // <225> 文字色変更
                end;  // <TAX> ADD
                fnSetFncType(true,0);
//<113>                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

				strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

                // 該当ﾃﾞｰﾀの取得
				iSumKbn	 := 0;
				iRet     := fnDataRead (strGCode, iSumKbn, 1);

                // <155> - ST
				if HojyoMA_DMQuery.Eof = true then	// 新規
                begin
					if LSinsei.Visible then			// WF参照
						m_WFSw := true;
                end;
                // <155> - ED

				if iRet < 0 then
				begin
					Root_PMTab.Items.Selected   := PAGE_GOKEI;
					Root_PMTab.Items[1].Enabled := true;
					Goukei_ENEdit_GCode.Value   := Jituzai_ENEdit_GCode.Value;
					GoukeiEditExit(Goukei_ENEdit_GCode);
					exit;
				end;
                // 新規挿入
				if ( HojyoMA_DMQuery.Eof = true ) then
				begin
                    // <155> - ST
                    (*
					fnClearCard (iSumKbn);
					Jituzai_ENEdit_GCode.Value	:= StrToInt64 (Trim (strGCode));
                    // Jituzai_ENEdit_SalesBase.InputFlag := true;
					Jituzai_ENEdit_HaifuKbn.InputFlag := true;
                    // Jituzai_ENEdit_BunCode.InputFlag := true;
                    // Jituzai_ENEdit_MoveKbn.InputFlag := true;
                    *)

					if not LSinsei.Visible then
					begin
						fnClearCard (iSumKbn);
						Jituzai_ENEdit_GCode.Value	:= StrToInt64 (Trim (strGCode));
//<258> ADD St
                        if StrGCode <> '' then
                            Jituzai_ENEdit_GCode.InputFlag := False;
//<258> ADD Ed
						Jituzai_ENEdit_HaifuKbn.InputFlag := true;
					end
					else if LSinsei.Visible then
					begin
						if Jituzai_PPanel_Card_1.Visible = true then
							Jituzai_ETEdit_LongName.SetFocus
						else
							Goukei_ETEdit_LongName.SetFocus;
					end;
                    // <155> - ED

		        	fnGetKanseiFuriInfo();		// <274> 完成振替情報取得
        			fnKanseiFuriInfoDsp();		// <274> 完成振替情報表示
					if Jituzai_ENEdit_GCode.Value = 0 then
					begin
						Beep;
						MjsSetFocus(Self,(Sender as TMNumEdit).Name);
						Abort;
					end;

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        // HojyoMAの同期
                        iRet2 := fnCorpRelation ( rSyncKey, 1 );

                        if ( iRet2 = 1 ) then
                        begin
                            rSyncKey.nNCode := uvNCode;
                            // KojiInfoの同期
                            iRet2 := fnCorpRelation ( rSyncKey, 2 );
                        end;

                        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                        if ( iRet2 = 1 ) then
                        begin
                            Qe := TMQuery.Create ( Self );

                            try
                                MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                                Qe.Close;
                                Qe.SQL.Clear;
//<255> DEL                                Qe.SQL.Add('select * from P_kojiinfo2 ');
                                Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                                Qe.SQL.Add('where MasterKbn = :pMstkbn');
                                Qe.SQL.Add('  and NCode     = :pNCode ');
                                Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                                Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                                Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                                if Qe.Open = false then
                                    Abort;

                                Qe.First;
                                while not Qe.Eof do
                                begin
                                    rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                    iRet2 := fnCorpRelation(rSyncKey, 3);

                                    if (iRet2 <> 0) and (iRet2 <> 1) then
                                        Abort;

                                    Qe.Next;
                                end;
                            finally
                                Qe.Close();
                                Qe.Free();
                            end;
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                    m_RowState := STATE_INSERT;
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
                                    fnDataRead (strGCode, iSumKbn, 1);

//<271> DEL                                    SetLength(m_aCmnt_Jitu,0);
                                    m_aCmnt_Jitu.Clear();  //<271> ADD
                                    fnMemSet (iSumKbn, false);
                					fnCreateCard (iSumKbn);

                                    m_RowState := STATE_EDIT;

                                    //MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end
                // 追加更新
				else
				begin
                    if PPanelTree.Visible then   //<KSN> ADD
                    begin  //<KSN> ADD
					// 他の合計についている？
					NodeSelect := VTreeView.Items[0];
                        while ( NodeSelect <> nil ) do
                        begin
                            stWorkRec := NodeSelect.Data;
                            if ( strGCode = stWorkRec^.strExCode ) then
                            begin
                                NodeOya      := NodeSelect.Parent;
                                stWorkRecOya := NodeOya.Data;
                                if ( stWorkRec^.strExCode <> stWorkRecOya^.strExCode ) then
                                begin
                                    TBaseNode     := NodeOya;
                                    stWorkRecBase := TBaseNode.Data;
                                    if ( stWorkRecBase^.nDivision <> 9 ) then
                                    begin
                                        stCode        := stWorkRecBase^.strExCode;
                                        m_stGCodeSave := stCode;		    // ｺｰﾄﾞのｾｰﾌﾞ
                                    end
                                    else
                                    begin
                                        stCode		  := '';
                                        m_stGCodeSave := '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end;

                                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                                    begin
                                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                                System.Delete(stCode, 1, iCut);
                                            end;
                                        end
                                        else
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCode := StrToInt64(Trim(stCode));
                                                stCode := IntToStr(iCode);
                                            end;
                                        end;
                                    end;
                                    stName							:= stWorkRecBase^.strName;
                                    Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
                                end;

                                if stWorkRecOya^.nDivision = 1 then
                                begin
                                    NodeOya2 := NodeOya.Parent;
                                    stWorkRecOya2 := NodeOya2.Data;
                                    if stWorkRecOya2^.nDivision = 1 then
                                        Root_PMTab.Items[1].Enabled := false
                                    else
                                        Root_PMTab.Items[1].Enabled := true;
                                end;

                                break;
                            end
                            else
                            begin
                                NodeSelect	:= NodeSelect.GetNext;
                                Root_PMTab.Items[1].Enabled := true;
                            end;
                        end;
                    end;  //<KSN> ADD
					gbTreeClick := false;

                    // <155> - ST
					if LSinsei.Visible then
					begin
						if Jituzai_PPanel_Card_1.Visible = true then
							Jituzai_ETEdit_LongName.SetFocus
						else
							Goukei_ETEdit_LongName.SetFocus;
					end;
                    // <155> - ED

//<271> DEL					SetLength(m_aCmnt_Jitu,0);	//	配列をｸﾘｱ
                    m_aCmnt_Jitu.Clear();  //<271> ADD
					fnMemSet (iSumKbn, false);
					fnCreateCard (iSumKbn);

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        Qe := TMQuery.Create ( Self );

                        try
                            MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                            Qe.Close;
                            Qe.SQL.Clear;
//<255> DEL                            Qe.SQL.Add('select * from P_kojiinfo2 ');
                            Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                            Qe.SQL.Add('where MasterKbn = :pMstkbn');
                            Qe.SQL.Add('  and NCode     = :pNCode ');
                            Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                            Qe.ParamByName('pNCode').AsFloat    := JHojyoMA_DMemDataNCode.AsFloat;
                            Qe.ParamByName('pNCode').AsString    := JHojyoMA_DMemDataNCode.AsString;  //<255> ADD

                            if Qe.Open = false then
                                Abort;

                            Qe.First;
                            while not Qe.Eof do
                            begin
                                rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                iRet2 := fnCorpRelation(rSyncKey, 3);

                                if (iRet2 <> 0) and (iRet2 <> 1) then
                                    Abort;

                                Qe.Next;
                            end;
                        finally
                            Qe.Close();
                            Qe.Free();
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
//<271> DEL                                    SetLength(m_aCmnt_Jitu,0);
                                    m_aCmnt_Jitu.Clear();  //<271> ADD
                                    fnMemSet (iSumKbn, false);
                					fnCreateCard (iSumKbn);

                                    //MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;
                    m_RowState := STATE_EDIT;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end;
			end;
		end;

//<256> ADD St
		if (Jituzai_PPanel_Card.Visible = True) then
		begin
	        for iCount := 1 to VTreeView.Items.Count do
            begin
		       	stWorkRec   := VTreeView.Items [iCount - 1].Data;
                if	(CompareStr (stWorkRec^.strExCode, strGCode) = 0) then
            	begin
            		VTreeView.Items [iCount - 1].Selected := TRUE;
            		Break;
            	end;
            end;
        end;
//<256> ADD Ed

		//　実在正式名称
		if Sender = Jituzai_ETEdit_LongName then
		begin
			stWork := Jituzai_ETEdit_SimpleName.Text;
			if stWork = '' then
			begin
				stWork := Jituzai_ETEdit_LongName.Text;
				Jituzai_ETEdit_SimpleName.Text := MjsCopy(stWork, 14);
			end;
		end;


		if (Jituzai_PPanel_Card.Visible = false) then
		begin
			FieldRestor(Sender, 0);				// 項目復元
			exit;
		end;

		//　実在郵便番号
		if (Sender = Jituzai_ENEdit_ZipCode2)	and			// 郵便番号枝番入力(基番,枝番入力済み)
		   (Jituzai_ENEdit_ZipCode1.Value <> 0) and
		   (Jituzai_ENEdit_ZipCode2.Value <> 0) then
		begin
			if (Jituzai_ETEdit_Address1.Text = '') and		// 住所上段下段 未入力？
			   (Jituzai_ETEdit_Address2.Text = '') then
			begin

				iZip1 := Trunc(Jituzai_ENEdit_ZipCode1.Value);		// 基番 取得
				iZip2 := Trunc(Jituzai_ENEdit_ZipCode2.Value);		// 枝番 取得
				sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
				sAdr1 := '';
				sAdr2 := '';

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索

				if iValue = 1 then
				begin
					Jituzai_ETEdit_Address1.Text := sAdr1;			// 住所上段 SET
					Jituzai_ETEdit_Address2.Text := sAdr2;			// 住所下段 SET
				end
				else if iValue < 0 then
				begin
					Beep;
                    Jituzai_PMTab.Items.Selected := 0;
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
					Abort;
				end;
			end;
		end;

		// 実在住所上段
		if Sender = Jituzai_ETEdit_Address1 then					// 住所上段入力
		begin
			if (Jituzai_ENEdit_ZipCode1.Value = 0) and				// 基番,枝番 未入力？
			   (Jituzai_ENEdit_ZipCode2.Value = 0) then
			begin
				sZip  := '';
				sAdr1 := Jituzai_ETEdit_Address1.Text;
				sAdr2 := Jituzai_ETEdit_Address2.Text;

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 住所から直接検索
				if iValue = 1 then
				begin
					iZip1 := StrToInt(MjsCopy(sZip,3));				// 基番 取り出し
					iZip2 := StrToInt(MJSHanCopy(sZip,5,4));				// 枝番 取り出し
					Jituzai_ENEdit_ZipCode1.Value := iZip1;			// 基番 SET
					Jituzai_ENEdit_ZipCode2.Value := iZip2;			// 枝番 SET
				end;
			end;
		end;

		// 実在完成振替部門
		if (Sender = Jituzai_ETEdit_BmnCode) or (Sender = Jituzai_ENEdit_BmnCode) then
		begin
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				if Jituzai_ETEdit_BmnCode.Text = '' then
				begin
					Jituzai_LLabel_BmnName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Jituzai_ETEdit_BmnCode.Text;
				end;
			end
			else
			begin
				if Jituzai_ENEdit_BmnCode.Value = 0 then
				begin
					if Jituzai_ENEdit_BmnCode.InputFlag = true then
					begin
						Jituzai_LLabel_BmnName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
					Close;

					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');

// <204> ADD start
					SQL.Add('ORDER BY TStartDate desc, InsDateTM desc');
// <204> ADD end

                    SetFld('pMKBN').asInteger  := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
// <238> ADD start
                        // 検索Expから選択もしくは変更なしの場合
                        if (m_JBmnExpFlg = True) or (m_JBmnChangeFlg = False) then
                        begin
                            m_JBmnExpFlg := False;
                            exit;
                        end;
// <238> ADD end

// <204> MOD start
//						Jituzai_LLabel_BmnName.Caption := GetFld('SimpleName').AsString;
						if ((Sender = Jituzai_ENEdit_BmnCode) and (Jituzai_ENEdit_BmnCode.TagStr = '')) or
                           ((Sender = Jituzai_ETEdit_BmnCode) and (Jituzai_ETEdit_BmnCode.TagStr = '')) then
                        begin
							Jituzai_LLabel_BmnName.Caption := GetFld('SimpleName').AsString;
                        end;
// <204> MOD end
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 1;
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 実在担当者
		if (Sender = Jituzai_ETEdit_PersonCode) or (Sender = Jituzai_ENEdit_PersonCode) then
		begin
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
			begin
				if Jituzai_ETEdit_PersonCode.Text = '' then
				begin
					Jituzai_LLabel_PersonName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Jituzai_ETEdit_PersonCode.Text;
				end;
			end
			else
			begin
				if Jituzai_ENEdit_PersonCode.Value = 0 then
				begin
					if Jituzai_ENEdit_PersonCode.InputFlag = true then
					begin
						Jituzai_LLabel_PersonName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin

                    Close;
                    SQL.Clear;
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');
					SetFld('strGCode').AsString := strGCode;
					Open;

					if EOF = false then
					begin
						Jituzai_LLabel_PersonName.Caption := GetFld('SimpleName').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 実在受注者
		if (Sender = Jituzai_ETEdit_CustomerCode) or (Sender = Jituzai_ENEdit_CustomerCode) then
		begin
// モード切り替え
//			if m_bModeChg = false then
//			begin
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
				begin
					if Jituzai_ETEdit_CustomerCode.Text = '' then
					begin
						Jituzai_LLabel_CustomerName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Jituzai_ETEdit_CustomerCode.Text;
					end;
				end
				else
				begin
					if Jituzai_ENEdit_CustomerCode.Value = 0 then
					begin
						if Jituzai_ENEdit_CustomerCode.InputFlag = true then
						begin
							Jituzai_LLabel_CustomerName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)]);
						end;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)]);
					end;
				end;

				QueryRead := TMQuery.Create (Self);
				MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

				try
					with QueryRead do
					begin
						Close;

						SQL.Clear;							// ｸｴﾘの初期化
						// 取引先を外部ｺｰﾄﾞ昇順でGET
						SQL.Add('select NMK from MTOKUI');
						SQL.Add('where  NCode=:NCode');
						SQL.Add(' And  SumKbn = 0');  //<242> ADD
						SQL.Add(' And  HojyoKbn1 = 1 AND RDelKbn = 0 ');  //<243> ADD
//<255> DEL						SetFld('NCode').AsFloat := fnGetNCODE(strGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
						SetFld('NCode').AsString :=
                            FormatFloat('0',
                            fnGetNCODE(strGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
						Open;						// ｸｴﾘの開始

						if EOF = false then
						begin
							Jituzai_LLabel_CustomerName.Caption := GetFld('NMK').AsString;
							exit;
						end
						else
						begin
							Beep;
                            Jituzai_PMTab.Items.Selected := 0;
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
								MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
							else
								MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
							Abort;
							exit;
						end;
					end;
				finally
					QueryRead.Free;
				end;
//			end;
		end;

		// 実在計上基準・実在配賦区分
		if (Sender = Jituzai_ENEdit_SalesBase) or                                   // <106><167>
		   (Sender = Jituzai_ENEdit_HaifuKbn)  then
		begin
			iValue := Trunc((Sender as TMNumEdit).Value);
			iCount := TMNumEdit(Sender).SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc((Sender as TMNumEdit).MinValue);
			iMax   := Trunc((Sender as TMNumEdit).MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 1;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//<TAX> ADD St
            if (Sender = Jituzai_ENEdit_SalesBase) then
            begin
//<TAX_1> MOD St
{
                if (iValue = SALES_COMPLETE) and                                    // 完成基準
                    (toKojiInfoParam(currentSumKbn).PartPattern = KBN_TAXOUT) and   // 税抜
                    (moKojiInfoMn.ContCount > 0) then                               // 1件以上登録あり
                begin
                    MjsMessageBoxEX(self, MSG_CHANGECOMPLETE, '登録', mjWarning, mjOk, mjDefOk);
                    Jituzai_ENEdit_SalesBase.Value := SALES_PROGRESS;
                    Jituzai_ENEdit_SalesBase.SetFocus();
                    abort;
                end;

                rdJTaxOut.Enabled := iValue = SALES_PROGRESS;
                if iValue = SALES_COMPLETE then
                begin
                    pushTaxButton(rdjTaxIn);
                end;
                moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn));  // 管理クラスにも更新
}
                if (iValue = SALES_COMPLETE) then
                begin
                    returnCode :=
                        moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn));
                    case returnCode of
                        CONT_NOTCHANGEFINISH,               // 税抜で契約情報あり
                        CONT_EXISTSCONTACCOUNT_SALES:       // 契約別仮受消費税登録あり
                        begin
                            MjsMessageBoxEX(self, GetContMessage(returnCode),
                                '登録', mjWarning, mjOk, mjDefOk);
// <291> MOD st
//                          	Jituzai_ENEdit_SalesBase.Value := SALES_PROGRESS;
                        	Jituzai_ENEdit_SalesBase.Value := JHojyoMA_DMemDataSalesBase.AsInteger;
// <291> MOD ed
                            Jituzai_ENEdit_SalesBase.SetFocus();
                            abort;
                        end;
                    end;
                end;

// <291> MOD st
//                rdJTaxOut.Enabled := iValue = SALES_PROGRESS;
                rdJTaxOut.Enabled := iValue in [SALES_PROGRESS,SALES_CostRecovery];
// <291> MOD ed
                if iValue = SALES_COMPLETE then
                begin
                    pushTaxButton(rdjTaxIn);
                end;
//<TAX_1> MOD Ed
            end;
//<TAX> ADD Ed

			if iCount <> 0 then
			begin
				for i := 0 to iCount-1 do
				begin
					sValue := TMNumEdit(Sender).SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);

					if iValue = StrToInt(sValue) then
					begin
						if Sender = Jituzai_ENEdit_SalesBase then                   // <106><167>
                        begin
 							Jituzai_LLabel_SalesBaseDsp.Caption	:= sSales[iValue];  // <106><167>
                        end
						else                                                        // <106><167>
                        begin
							Jituzai_ENEdit_HaifuKbn.Value       := iValue;
//							Jituzai_ENEdit_HaifuKbn.InputFlag   := false;
							Jituzai_LLabel_HaifuKbnDsp.Caption	:= sHaifu[iValue];
                        end;

						Exit;
					end;
				end;
				Beep;
                Jituzai_PMTab.Items.Selected := 1;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end
			else
			begin
				if Sender = Jituzai_ENEdit_SalesBase then                           // <106><167>
                begin
					Jituzai_LLabel_SalesBaseDsp.Caption	:= sSales[0];               // <106><167>
                end
				else                                                                // <106><167>
                begin
					Jituzai_ENEdit_HaifuKbn.Value       := 0;
//					Jituzai_ENEdit_HaifuKbn.InputFlag := false;
					Jituzai_LLabel_HaifuKbnDsp.Caption	:= sHaifu[0];
                end;
			end;

			exit;
		end;

		// 完成振替パターン
		// 完成売上高相手勘定区分
		// 工種管理区分
		if (Sender = Jituzai_ENEdit_DetailKbn1) or
		   (Sender = Jituzai_ENEdit_DetailKbn2) or
		   (Sender = Jituzai_ENEdit_PartKbn)    or
		   (Sender = Jituzai_ENEdit_KojKbn2)    or          // <211> ADD 売上高自動振替区分
		   (Sender = Jituzai_ENEdit_SalesBase)  then                                // <106><167>
		begin
			iValue := Trunc((Sender as TMNumEdit).Value);
			iCount := TMNumEdit(Sender).SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc((Sender as TMNumEdit).MinValue);
			iMax   := Trunc((Sender as TMNumEdit).MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 1;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;

			if iCount <> 0 then
			begin
				for i := 0 to iCount-1 do
				begin
					sValue := TMNumEdit(Sender).SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);
					if iValue = StrToInt(sValue) then
					begin
						if Sender = Jituzai_ENEdit_DetailKbn1 then
						begin
							Jituzai_ENEdit_DetailKbn1.Value := iValue;
							Jituzai_ENEdit_DetailKbn1.InputFlag := false;
							fnSetLabel(Jituzai_ENEdit_DetailKbn1);
						end
						else if Sender = Jituzai_ENEdit_DetailKbn2 then
						begin
							if (iValue = 2) or
								((iValue = 0) and (MasterInfo_DMemDataMstrKbn5.AsInteger = 1)) then
							begin
								if MasterInfo_DMemDataKmkCode6.AsInteger <> 0 then
								begin
									Jituzai_ENEdit_DetailKbn2.Value := iValue;
									Jituzai_ENEdit_DetailKbn2.InputFlag := false;
									fnSetLabel(Jituzai_ENEdit_DetailKbn2);
								end
								else
								begin
									Beep;
//									MjsMessageBoxEX(Self,'通過勘定が設定されていません。','登録',mjInformation, mjOk, mjDefOk);
									MjsMessageBoxEX(Self,'通過勘定が設定されていないため、完成売上高相手勘定区分を設定することができません。','登録',mjInformation, mjOk, mjDefOk);
                                    Jituzai_PMTab.Items.Selected := 1;
									MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
									Abort;
								end;
							end
							else
							begin
								Jituzai_ENEdit_DetailKbn2.Value     := iValue;
								Jituzai_ENEdit_DetailKbn2.InputFlag := false;
								fnSetLabel(Jituzai_ENEdit_DetailKbn2);
							end;
						end
						else if Sender = Jituzai_ENEdit_PartKbn then
						begin
							Jituzai_ENEdit_PartKbn.Value     := iValue;
							Jituzai_ENEdit_PartKbn.InputFlag := false;
							fnSetLabel(Jituzai_ENEdit_PartKbn);
// <106><167>
						end
						else if Sender = Jituzai_ENEdit_SalesBase then
						begin
							Jituzai_ENEdit_SalesBase.Value     := iValue;
							Jituzai_ENEdit_SalesBase.InputFlag := false;
							fnSetLabel(Jituzai_ENEdit_SalesBase);
// <106><167>
						end
// <211> ADD start
                        else if Sender = Jituzai_ENEdit_KojKbn2 then
                        begin
                            Jituzai_ENEdit_KojKbn2.Value        := iValue;
                            Jituzai_ENEdit_KojKbn2.InputFlag    := false;
							fnSetLabel(Jituzai_ENEdit_KojKbn2);
                                // 1:なしの場合入力不可
                            if iValue = 1 then
                            begin
                                //売上高相手勘定区分
					            Jituzai_ENEdit_DetailKbn2.Value         := 0;
					            Jituzai_ENEdit_DetailKbn2.InputFlag     := false;
					            fnSetLabel(Jituzai_ENEdit_DetailKbn2);
					            Jituzai_ENEdit_DetailKbn2.Enabled       := false;
                                // 売上科目コード
                                Jituzai_ENEdit_SalesKmkCd.Value			:= 0;
                                Jituzai_ENEdit_SalesKmkCd.Enabled       := false;
                                Jituzai_ENEdit_SalesKmkCd.ParentColor 	:= True;
                                Jituzai_ENEdit_SalesKmkCd.InputFlag		:= true;
                                Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';

// <216> del                                MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_SalesBase');
                            end
                            else
                            begin
					            Jituzai_ENEdit_DetailKbn2.Enabled       := true;
					            Jituzai_ENEdit_DetailKbn2.InputFlag     := true;
                                Jituzai_ENEdit_SalesKmkCd.Enabled       := true;
                                Jituzai_ENEdit_SalesKmkCd.InputFlag		:= true;
                                Jituzai_ENEdit_SalesKmkCd.ParentColor 	:= false;
					            Jituzai_ENEdit_SalesKmkCd.Color			:= clWindow;
                            end;
                        end;
// <211> ADD end
						Exit;
					end;
				end;
				Beep;
                Jituzai_PMTab.Items.Selected := 1;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end
			else
			begin
				if Sender = Jituzai_ENEdit_DetailKbn1 then
				begin
					Jituzai_ENEdit_DetailKbn1.Value := 0;
					Jituzai_ENEdit_DetailKbn1.InputFlag := false;
					fnSetLabel(Jituzai_ENEdit_DetailKbn1);
				end
				else if Sender = Jituzai_ENEdit_DetailKbn2 then
				begin
					Jituzai_ENEdit_DetailKbn2.Value := 0;
					Jituzai_ENEdit_DetailKbn2.InputFlag := false;
					fnSetLabel(Jituzai_ENEdit_DetailKbn2);
				end
// <211> ADD start
                else if Sender = Jituzai_ENEdit_KojKbn2 then
                begin
                    Jituzai_ENEdit_KojKbn2.Value        := 0;
                    Jituzai_ENEdit_KojKbn2.InputFlag    := false;
                    fnSetLabel(Jituzai_ENEdit_KojKbn2);
                 	Jituzai_ENEdit_DetailKbn2.Enabled   := true;
                    Jituzai_ENEdit_SalesKmkCd.Enabled    := true;
                end
// <211> ADD end
				else if Sender = Jituzai_ENEdit_PartKbn then
				begin
					Jituzai_ENEdit_PartKbn.Value := 0;
					Jituzai_ENEdit_PartKbn.InputFlag := false;
					fnSetLabel(Jituzai_ENEdit_PartKbn);
// <106><167>
				end
				else if Sender = Jituzai_ENEdit_SalesBase then
				begin
					Jituzai_ENEdit_SalesBase.Value := 0;
					Jituzai_ENEdit_SalesBase.InputFlag := false;
					fnSetLabel(Jituzai_ENEdit_SalesBase);
// <106><167>
				end;
			end;
			exit;
		end;

		// 売上計上科目コード
		if Sender = Jituzai_ENEdit_SalesKmkCd then
		begin
			if Jituzai_ENEdit_SalesKmkCd.Value = 0 then
			begin
				if Jituzai_ENEdit_SalesKmkCd.InputFlag = true then
				begin
					Jituzai_LLabel_SalesKmkCdDsp.Caption := '';
					exit;
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
					Close;

					SQL.Clear;							// ｸｴﾘの初期化
					// 科目を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from KmkMA');
					SQL.Add('where MasterKbn=1 AND RDelKbn=0 AND SumKbn=0 AND GCode =:KMK and');
					SQL.Add('GCode >=:KMK3 and GCode <=:KMK4');
					SetFld('KMK').AsInteger := Jituzai_ENEdit_SalesKmkCd.AsInteger;
					SetFld('KMK3').AsInteger := MasterInfo_DMemDataKmkCode3.AsInteger;
					SetFld('KMK4').AsInteger := MasterInfo_DMemDataKmkCode4.AsInteger;
					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
						Jituzai_LLabel_SalesKmkCdDsp.Caption := GetFld('SimpleName').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 1;
						MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 工種パターン
		if Sender = Jituzai_ENEdit_PatternNo then
		begin
{			if Jituzai_ENEdit_PatternNo.Value = 0 then
			begin
				if Jituzai_ENEdit_PatternNo.InputFlag = true then
				begin
					Jituzai_LLabel_PatternNoDsp.Caption := '';
					exit;
				end;
			end;
}
			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
					Close;

					SQL.Clear;
					// 科目を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select PtnName from KousyuPtnMA');
                    SQL.Add('where PtnNo = :PTNNO and RDelKbn = 0 and Masterkbn =');
                    SQL.Add(IntToStr(m_arAdoptInfo[ECombo_Header.ItemIndex].nMasterDivision + 100));

					SetFld('PTNNO').AsInteger := Jituzai_ENEdit_PatternNo.AsInteger;
					Open;						            // ｸｴﾘの開始

					if EOF = false then
					begin
						Jituzai_LLabel_PatternNoDsp.Caption := GetFld('PtnName').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 0;
						MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 開始予定工期
		if Sender = Jituzai_EDEdit_StartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Jituzai_EDEdit_StartDate,Jituzai_EDEdit_EndDate) then
            begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---
		end;

		// 終了予定工期
		if Sender = Jituzai_EDEdit_EndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Jituzai_EDEdit_StartDate,Jituzai_EDEdit_EndDate) then
            begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---
//<TAX> ADD St
            kojiInfoParam := moKojiInfoMn.GetKojiInfoParam();
            returnCode :=
                moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn));
            case returnCode of
                // 標準税率同士の税率不一致
                CONT_CHANGERATE  :
                begin
                    sWk := GetContMessage(returnCode);
                    oCont := TKojiInfo2(moKojiInfoMn.GetContErrList()[0]);
                    oDic := moBusiness.GetStandardTaxRate(
                        oCont.ContDate, Jituzai_EDEdit_EndDate.AsDateTime);      // 現在の標準税率
                    oDic2 := moBusiness.GetStandardTaxRate(
                        oCont.ContDate, KojiInfoParam.YoteiDateED);  // 変更前の標準税率

                    sWk := Format(sWk, [oDic2.TaxName, oDic.TaxName]);
                    iRet := MjsMessageBoxEX(Self, sWk,'確認',mjQuestion ,mjYesNo,mjDefNO);
                    if iRet <> mrYes then
                    begin
                        Beep;
                        Jituzai_PMTab.Items.Selected := 0;
                        Jituzai_EDEdit_EndDate.SetFocus();
                        Abort;
                    end
                    else
                    begin
                        moKojiInfoMn.ReChangeKojiInfo();  // 再変更依頼
                        setContTaxInfo(JKeiyaku_DMemData, moKojiInfoMn.GetContErrList);
                    end;
                end;
            end;
//<TAX> ADD Ed
		end;


		// 開始実績工期
		if Sender = Jituzai_EDEdit_JStartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Jituzai_EDEdit_JStartDate,Jituzai_EDEdit_JEndDate) then
            begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---

		end;

		// 終了実績工期
		if Sender = Jituzai_EDEdit_JEndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
//--<115> St ---
            if not fnChkDateBigSmall(Jituzai_EDEdit_JStartDate,Jituzai_EDEdit_JEndDate) then
            begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---
		end;

        //存在チェック及び名称の取得【セグメント】
        if Copy(TMTxtEdit(Sender).name,1,20) = 'Jituzai_ETEdit_SegCd'  then
        begin

            i := StrToInt(Copy(TMTxtEdit(Sender).name,21,2));

            TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm' + IntToStr(i))).Caption := '';
            if TMTxtEdit(Sender).text = '' then Exit;

            if fnGetNAME(TMTxtEdit(Sender).text,
                  m_arAdoptInfo_Seg [i].nMasterDivision,m_arAdoptInfo_Seg [i].nCodeAttribute,lvNAME) then
                //ラベルに名称をセット
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm' + IntToStr(i))).Caption := lvName
            else
			begin
				Beep;
// <205> MOD start
//                Jituzai_PMTab.Items.Selected := 4;
                Jituzai_PMTab.Items.Selected := PAGE_SONOTA;
// <205> MOD end
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;


        end;

        //存在チェック及び名称の取得【ﾌﾟﾛｼﾞｪｸﾄ分類】
        if Copy(TMTxtEdit(Sender).name,1,20) = 'Jituzai_ETEdit_BunCd'  then
        begin

            i := StrToInt(Copy(TMTxtEdit(Sender).name,21,2));
            TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_BunNm' + IntToStr(i))).Caption := '';
            if TMTxtEdit(Sender).text = '' then Exit;


            if fnGetNAME(TMTxtEdit(Sender).text,
                  m_arAdoptInfo_Pbr [i].nMasterDivision,m_arAdoptInfo_Pbr [i].nCodeAttribute,lvNAME) then
                //ラベルに名称をセット
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_BunNm' + IntToStr(i))).Caption := lvName
            else
			begin
				Beep;
// <205> MOD start
//                Jituzai_PMTab.Items.Selected := 4;
                Jituzai_PMTab.Items.Selected := PAGE_SONOTA;
// <205> MOD end
				MjsSetFocus(Self,TMTxtEdit(Sender).name);	// 元の場所に戻す
				Abort;
			end;

        end;

// <205> ADD start
		// 実在施主
		if (Sender = Jituzai_ETEdit_SeshuCode) or (Sender = Jituzai_ENEdit_SeshuCode) then
		begin
			if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
			begin
				if Jituzai_ETEdit_SeshuCode.Text = '' then
				begin
					Jituzai_LLabel_SeshuName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Jituzai_ETEdit_SeshuCode.Text;
				end;
			end
			else
			begin
				if Jituzai_ENEdit_SeshuCode.Value = 0 then
				begin
					if Jituzai_ENEdit_SeshuCode.InputFlag = true then
					begin
						Jituzai_LLabel_SeshuName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_SeshuCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_SeshuCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
                    Close;
                    SQL.Clear;
// <224> MOD start
//                    SQL.Add('select Nm from MSOFU ');
                    SQL.Add('select Nmk as Nm from MSOFU ');
// <224> MOD end
                    SQL.Add('where NCode=:exNCode and RDelKBN = 0 and NouKbn = 4');

//<255> DEL					SetFld('exNCode').AsFloat := fnGetNCODE(strGCode,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger);
					SetFld('exNCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(strGCode,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger));  //<255> ADD

					Open;

					if EOF = false then
					begin
						Jituzai_LLabel_SeshuName.Caption  := GetFld('Nm').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

        // 実在施行部門
		if (Sender = Jituzai_ETEdit_SekouBmnCode) or (Sender = Jituzai_ENEdit_SekouBmnCode) then
		begin
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				if Jituzai_ETEdit_SekouBmnCode.Text = '' then
				begin
					Jituzai_LLabel_SekouBmnName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Jituzai_ETEdit_SekouBmnCode.Text;
				end;
			end
			else
			begin
				if Jituzai_ENEdit_SekouBmnCode.Value = 0 then
				begin
					if Jituzai_ENEdit_SekouBmnCode.InputFlag = true then
					begin
						Jituzai_LLabel_SekouBmnName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouBmnCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouBmnCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
//<228> DEL					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
                    SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 ');  //<228> ADD
					SQL.Add('ORDER BY TStartDate desc, InsDateTM desc');

                    SetFld('pMKBN').asInteger  := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;

					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
// <238> MOD start
//						Jituzai_LLabel_SekouBmnName.Caption := GetFld('SimpleName').AsString;
                        // 検索Expから選択もしくは変更なしの場合
                        if (m_JSekBmnExpFlg = True) or (m_JSekBmnChangeFlg = False) then
                        begin
                            m_JSekBmnExpFlg := False;
                            exit;
                        end;

						if ((Sender = Jituzai_ENEdit_SekouBmnCode) and (Jituzai_ENEdit_SekouBmnCode.TagStr = '')) or
                           ((Sender = Jituzai_ETEdit_SekouBmnCode) and (Jituzai_ETEdit_SekouBmnCode.TagStr = '')) then
                        begin
							Jituzai_LLabel_SekouBmnName.Caption := GetFld('SimpleName').AsString;
                        end;
// <238> MOD end
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
                        end
						else
                        begin
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
                        end;
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;


        // 実在施行担当者
		if (Sender = Jituzai_ETEdit_SekouPersonCode) or (Sender = Jituzai_ENEdit_SekouPersonCode) then
		begin
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
			begin
				if Jituzai_ETEdit_SekouPersonCode.Text = '' then
				begin
					Jituzai_LLabel_SekouPersonName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Jituzai_ETEdit_SekouPersonCode.Text;
				end;
			end
			else
			begin
				if Jituzai_ENEdit_SekouPersonCode.Value = 0 then
				begin
					if Jituzai_ENEdit_SekouPersonCode.InputFlag = true then
					begin
						Jituzai_LLabel_SekouPersonName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouPersonCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouPersonCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin

                    Close;
                    SQL.Clear;
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');
					SetFld('strGCode').AsString := strGCode;
					Open;

					if EOF = false then
					begin
						Jituzai_LLabel_SekouPersonName.Caption := GetFld('SimpleName').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Jituzai_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 実在請負区分
		if (Sender = Jituzai_ENEdit_UkeoiKbn) then
		begin
			iValue := Trunc((Sender as TMNumEdit).Value);
			iCount := TMNumEdit(Sender).SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc((Sender as TMNumEdit).MinValue);
			iMax   := Trunc((Sender as TMNumEdit).MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;

			if iCount <> 0 then
			begin
				for i := 0 to iCount-1 do
				begin
					sValue := TMNumEdit(Sender).SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);
					if iValue = StrToInt(sValue) then
					begin
    					Jituzai_ENEdit_UkeoiKbn.Value       := iValue;
						Jituzai_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[iValue];
    					Exit;
					end;
				end;
				Beep;
                Jituzai_PMTab.Items.Selected := 1;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end
			else
			begin
				Jituzai_ENEdit_UkeoiKbn.Value       := 0;
				Jituzai_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[0];
			end;
			exit;
		end;
// <205> ADD end
// <SEI> ADD start
		// 請求先(実在)
		if (Sender = Jituzai_ETEdit_SeikyusakiCd) or (Sender = Jituzai_ENEdit_SeikyusakiCd) then
		begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
        	strGCode := GetInputGCode(Jituzai_ETEdit_SeikyusakiCd,
            						Jituzai_ENEdit_SeikyusakiCd);

            if strGCode = '' then
            begin
            	Jituzai_LLabel_SeikyusakiNm.Caption := '';
                Exit;
            end;

			if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
			begin
				Exit;
			end;

			if strName <> '' then
			begin
				Jituzai_LLabel_SeikyusakiNm.Caption := strName;
				Exit;
			end
			else
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := PAGE_SEIKYU;
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
					MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
				else
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
				exit;
			end;
		end
		// 一括請求先工事(実在)
		else if (Sender = Jituzai_ETEdit_SeikyuKoujiCd) or (Sender = Jituzai_ENEdit_SeikyuKoujiCd) then
		begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
        	strGCode := GetInputGCode(Jituzai_ETEdit_SeikyuKoujiCd,
            						Jituzai_ENEdit_SeikyuKoujiCd);

            if strGCode = '' then
            begin
            	Jituzai_LLabel_SeikyuKoujiNm.Caption := '';
                Exit;
            end;

			if not fnGetHojNameSeikyu(m_nMasterDivision, SUMKBN_JITUZAI, strGCode, strName, exNCode, OPT_KOUJI_IKKATUSEIKYU) then
			begin
				Exit;
			end;

			if strName <> '' then
			begin
				Jituzai_LLabel_SeikyuKoujiNm.Caption := strName;
				Exit;
			end
			else
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := PAGE_SEIKYU;
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
				else
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
				exit;
			end;
		end;
// <SEI> ADD end
	end;
end;

//**************************************************************************
//	Proccess  :	合計EditコンポーネントのExit共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 11 / 9
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.GoukeiEditExit(Sender: TObject);
var
	strGCode	 : String;
	iSumKbn		 : Integer;
	stWork		 : String;
	sAdr1		 : String;
	sAdr2		 : String;
	sZip		 : String;
	iZip1		 : Integer;
	iZip2		 : Integer;
	iValue		 : Integer;
	iCount		 : Integer;
	i			 : Integer;
	sValue		 : String;
	iPos		 : Integer;
	iMin		 : Integer;
	iMax		 : Integer;
	QueryRead	 : TMQuery;
	NodeSelect	 : TTreeNode;
	NodeOya		 : TTreeNode;
	stWorkRec	 : ^TreeViewRec;
	stWorkRecOya : ^TreeViewRec;
	stWorkRecBase: ^TreeViewRec;
	NodeOya2	 : TTreeNode;
	stWorkRecOya2: ^TreeViewRec;
	stCode		 : String;
	stName		 : String;
	iCode		 : Integer;
	iCut		 : Integer;
	iRet		 : Integer;
    lvNAME       : String;
    rSyncKey     : SyncKey;     // <172>
    iRet2        : Integer;     // <172>
    Qe           : TMQuery;     // <172>
    NextControl  : TWinControl;  //<KSN> ADD
    strName		 : String;		// <SEI> ADD
    exNCode		 : Extended;    // <SEI> ADD
//<TAX> ADD St
    returnCode : Integer;
    sWk : string;
    oCont : TKojiInfo2;
    kojiInfoParam : TKojiInfoParam;
    oDic,
    oDic2 : TDIC_COTXRATE;
//<TAX> ADD Ed
begin
	if (m_fEnd = 1) or (m_fChange = 1) or (m_fPrint = 1) or
		(m_fIS = 1) or (m_fDel = 1) or (m_fTreeClk = 1) then
		exit;
//<EXP> ADD St
    msExpDivision := '';
    msExpEmployee := '';
//<EXP> ADD Ed
    iRet2   := 0;

	if m_fEnd = 0 then
	begin
        NextControl := Screen.ActiveControl;  //<KSN> ADD
		if Goukei_PPanel_Card.Visible = false then
		begin
			FieldRestor(Sender, 1);				// 項目復元
			exit;
		end;

		if (gbTreeClick = true) then
		begin
			gbTreeClick := false;
			exit;
		end;

        // <160> - ST
		if LSinsei.Visible = true then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			begin
				strGCode := Goukei_ETEdit_GCode.Text;
//<KSN> DEL				if strGCode = '' then
				if (( strGCode = '' ) and (NextControl <> nil)) then  //<KSN> ADD
				begin
                    if (NextControl <> ECombo_Header) then  //<KSN> ADD
                    begin                                   //<KSN> ADD
                        m_bTabClickFlg := true;
                        Goukei_ETEdit_GCode.SetFocus;
                        abort;
                    end;   //<KSN> ADD
				end;
			end
			else
			begin
				strGCode := Goukei_ENEdit_GCode.Text;  //<FREE_1> ADD
//<KSN> DEL				if Goukei_ENEdit_GCode.InputFlag = true then
//<FREE_1> DEL				if (( Jituzai_ENEdit_GCode.InputFlag = true ) and (NextControl <> nil)) then  //<KSN> ADD
                if (( strGCode = '' ) and (NextControl <> nil)) then  //<FREE_1> ADD
				begin
                    if (NextControl <> ECombo_Header) then  //<KSN> ADD
                    begin                                   //<KSN> ADD
                        m_bTabClickFlg := true;
                        Goukei_ENEdit_GCode.SetFocus;
//<KSN> DEL                        exit;
                        abort;  //<KSN> ADD
                    end;  //<KSN> ADD
				end;
			end;
			fnSinseiDspControl(true);
		end;
        // <160> - ED

		// ﾌﾘｰ属性
		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
		begin
			if ( Sender = Goukei_ETEdit_GCode ) then
			begin
				strGCode := Goukei_ETEdit_GCode.Text;
				strGCode := TrimRight(strGCode);
				Goukei_ETEdit_GCode.Text := strGCode;

                // 該当ﾃﾞｰﾀの取得
				iSumKbn	:= 1;
   				iRet := fnDataRead (strGCode, iSumKbn, 1);

				if (iRet < 0) then
				begin
					Root_PMTab.Items.Selected := PAGE_JITUZAI;
					Jituzai_ETEdit_GCode.Text := Goukei_ETEdit_GCode.Text;
					JituzaiEditExit(Jituzai_ETEdit_GCode);
					exit;
				end;

                // 新規挿入
				if ( HojyoMA_DMQuery.Eof = true ) then
				begin
					// ﾌﾘｰｺｰﾄﾞ(有効文字列)ﾁｪｯｸ
					if not JNTMASERRORCODECHECK(strGCode,gstErrorStr) then
					begin
						Beep;
						ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
						MjsMessageBoxEx(Self,
                                        MjsMsgRec.sMsg,
                                        MjsMsgRec.sTitle,
                                        MjsMsgRec.icontype,
                                        MjsMsgRec.btntype,
                                        MjsMsgRec.btndef,
                                        MjsMsgRec.LogType);
						MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
						Abort;
					end;

                    // <155> - ST
                    (*
					fnClearCard (iSumKbn);
					Goukei_ETEdit_GCode.Text	:= strGCode;
                    // Goukei_ENEdit_SalesBase.Zero := true;
                    // Goukei_ENEdit_HaifuKbn.Zero := true;
                    // Goukei_ENEdit_RootKbn.InputFlag := true;
                    // Goukei_ENEdit_MoveKbn.Zero := true;
                    *)

					if not LSinsei.Visible then
					begin
						fnClearCard (iSumKbn);
						Goukei_ETEdit_GCode.Text	:= strGCode;
					end;
                    // <155> - ED
//<FREE_1> ADD St
                    if LSinsei.Visible and Goukei_ETEdit_LongName.CanFocus then
                    begin
                        Goukei_ETEdit_LongName.SetFocus();
                    end;
//<FREE_1> ADD Ed
//<KSN> DEL					if Goukei_ETEdit_GCode.Text = '' then
					if ((Goukei_ETEdit_GCode.Text = '') and (NextControl <> nil)) then  //<KSN> ADD
					begin
                        if (NextControl <> ECombo_Header) then  //<KSN> ADD
                        begin                                   //<KSN> ADD
                            Beep;
                            MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                            Abort;
                        end;  //<KSN> ADD
					end;

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        // HojyoMAの同期
                        iRet2 := fnCorpRelation ( rSyncKey, 1 );

                        if ( iRet2 = 1 ) then
                        begin
                            rSyncKey.nNCode := uvNCode;
                            // KojiInfoの同期
                            iRet2 := fnCorpRelation ( rSyncKey, 2 );
                        end;

                        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                        if ( iRet2 = 1 ) then
                        begin
                            Qe := TMQuery.Create ( Self );

                            try
                                MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                                Qe.Close;
                                Qe.SQL.Clear;
//<255> DEL                                Qe.SQL.Add('select * from P_kojiinfo2 ');
                                Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                                Qe.SQL.Add('where MasterKbn = :pMstkbn');
                                Qe.SQL.Add('  and NCode     = :pNCode ');
                                Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                                Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                                Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                                if Qe.Open = false then
                                    Abort;

                                Qe.First;
                                while not Qe.Eof do
                                begin
                                    rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                    iRet2 := fnCorpRelation(rSyncKey, 3);

                                    if (iRet2 <> 0) and (iRet2 <> 1) then
                                        Abort;

                                    Qe.Next;
                                end;
                            finally
                                Qe.Close();
                                Qe.Free();
                            end;
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        // 会社関連付処理
                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                    m_RowState := STATE_INSERT;
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
                                    fnDataRead (strGCode, iSumKbn, 1);

//<271> DEL                                    SetLength(m_aCmnt_Gou,0);
                                    m_aCmnt_Gou.Clear();  //<271> ADD
                                    fnMemSet ( iSumKbn, false );
                					fnCreateCard ( iSumKbn );

                                    m_RowState := STATE_EDIT;

                                    //MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end
                // 追加更新
				else
				begin
                    if PPanelTree.Visible then   //<KSN> ADD
                    begin  //<KSN> ADD
                        // 他の合計についている？
                        NodeSelect := VTreeView.Items[0];
                        while NodeSelect <> nil do
                        begin
                            stWorkRec 	:= NodeSelect.Data;
                            if strGCode = stWorkRec^.strExCode then
                            begin
                                NodeOya := NodeSelect.Parent;
                                stWorkRecOya := NodeOya.Data;
                                if stWorkRec^.strExCode <> stWorkRecOya^.strExCode then
                                begin
                                    TBaseNode := NodeOya;
                                    stWorkRecBase	:= TBaseNode.Data;
                                    if stWorkRecBase^.nDivision <> 9 then
                                    begin
                                        stCode	:= stWorkRecBase^.strExCode;
                                        m_stGCodeSave := stCode;		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end
                                    else
                                    begin
                                        stCode		 	:= '';
                                        m_stGCodeSave	:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end;
                                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                                    begin
                                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                                System.Delete(stCode, 1, iCut);
                                            end;
                                        end
                                        else
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCode := StrToInt64(Trim(stCode));
                                                stCode := IntToStr(iCode);
                                            end;
                                        end;
                                    end;
                                    stName							:= stWorkRecBase^.strName;
                                    Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
                                end;

                                if stWorkRecOya^.nDivision = 1 then
                                begin
                                    NodeOya2 := NodeOya.Parent;
                                    stWorkRecOya2 := NodeOya2.Data;
                                    if stWorkRecOya2^.nDivision = 1 then
                                        Root_PMTab.Items[1].Enabled := false
                                    else
                                        Root_PMTab.Items[1].Enabled := true;
                                end;

                                break;
                            end
                            else
                            begin
                                NodeSelect	:= NodeSelect.GetNext;
                                Root_PMTab.Items[1].Enabled := true;
                            end;
                        end;
                    end;  //<KSN> ADD
					gbTreeClick := false;

//<271> DEL					SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
                    m_aCmnt_Gou.Clear();  //<271> ADD
					fnMemSet (iSumKbn, false);
					fnCreateCard (iSumKbn);

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        Qe := TMQuery.Create ( Self );

                        try
                            MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                            Qe.Close;
                            Qe.SQL.Clear;
//<255> DEL                            Qe.SQL.Add('select * from P_kojiinfo2 ');]
                            Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                            Qe.SQL.Add('where MasterKbn = :pMstkbn');
                            Qe.SQL.Add('  and NCode     = :pNCode ');
                            Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                            Qe.ParamByName('pNCode').AsFloat    := GHojyoMA_DMemDataNCode.AsFloat;
                            Qe.ParamByName('pNCode').AsString    := GHojyoMA_DMemDataNCode.AsString;  //<255> ADD

                            if Qe.Open = false then
                                Abort;

                            Qe.First;
                            while not Qe.Eof do
                            begin
                                rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                iRet2 := fnCorpRelation(rSyncKey, 3);

                                if (iRet2 <> 0) and (iRet2 <> 1) then
                                    Abort;

                                Qe.Next;
                            end;
                        finally
                            Qe.Close();
                            Qe.Free();
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        // 会社関連付処理
                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
//<271> DEL                                    SetLength(m_aCmnt_Gou,0);
                                    m_aCmnt_Gou.Clear();  //<271> ADD
                                    fnMemSet ( iSumKbn, false );
                					fnCreateCard ( iSumKbn );

                                    //MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMTxtEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;

                    m_RowState := STATE_EDIT;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end;
			end;
		end
        // 数値属性
		else
		begin
			if ( Sender = Goukei_ENEdit_GCode ) then
			begin
// <254>ADD↓
//<KSN> DEL           		if ( Goukei_ENEdit_GCode.Value = 0 ) and ( Goukei_ENEdit_GCode.InputFlag = true ) then
           		if (( Goukei_ENEdit_GCode.Value = 0 ) and ( Goukei_ENEdit_GCode.InputFlag = true ) and (NextControl <> nil)) then  //<KSN> ADD
                begin
                    if (NextControl <> ECombo_Header) then  //<KSN> ADD
                    begin                                   //<KSN> ADD
                        Goukei_ENEdit_GCode.SetFocus;
                        abort;
                    end;  //<KSN> ADD
                end;
// <254>ADD↑
				strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

                // 該当ﾃﾞｰﾀの取得
				iSumKbn	 := 1;
				iRet     := fnDataRead (strGCode, iSumKbn, 1);

				if ( iRet < 0 ) then
				begin
					Root_PMTab.Items.Selected := PAGE_JITUZAI;
					Jituzai_ENEdit_GCode.Value := Goukei_ENEdit_GCode.Value;
					JituzaiEditExit(Jituzai_ENEdit_GCode);
					exit;
				end;

                // 新規挿入
				if HojyoMA_DMQuery.Eof = true then
				begin
                    // <155> - ST
                    (*
					fnClearCard (iSumKbn);
					Goukei_ENEdit_GCode.Value	:= StrToInt64 (Trim (strGCode));
                    // Goukei_ENEdit_SalesBase.Zero := true;
                    // Goukei_ENEdit_HaifuKbn.Zero := true;
                    // Goukei_ENEdit_RootKbn.InputFlag := true;
                    // Goukei_ENEdit_MoveKbn.Zero := true;
                    *)

					if not LSinsei.Visible then
					begin
						fnClearCard (iSumKbn);
						Goukei_ENEdit_GCode.Value	:= StrToInt64 (Trim (strGCode));
//<258> ADD St
                        if StrGCode <> '' then
                            Goukei_ENEdit_GCode.InputFlag := False;
//<258> ADD Ed
					end;
                    // <155> - ED
//<FREE_1> ADD St
                    if LSinsei.Visible and Goukei_ETEdit_LongName.CanFocus then
                    begin
                        Goukei_ETEdit_LongName.SetFocus();
                    end;
//<FREE_1> ADD Ed
//<KSN> DEL					if Goukei_ENEdit_GCode.Value = 0 then
					if ((Goukei_ENEdit_GCode.Value = 0) and (NextControl <> nil)) then  //<KSN> ADD
					begin
                        if (NextControl <> ECombo_Header) then  //<KSN> ADD
                        begin                                   //<KSN> ADD
                            Beep;
                            MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                            Abort;
                        end;  //<KSN> ADD
					end;

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        // HojyoMAの同期
                        iRet2 := fnCorpRelation ( rSyncKey, 1 );

                        if ( iRet2 = 1 ) then
                        begin
                            rSyncKey.nNCode := uvNCode;
                            // KojiInfoの同期
                            iRet2 := fnCorpRelation ( rSyncKey, 2 );
                        end;

                        // KojiInfoが正常に同期できた場合、KojiInfo2の同期を行う
                        if ( iRet2 = 1 ) then
                        begin
                            Qe := TMQuery.Create ( Self );

                            try
                                MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                                Qe.Close;
                                Qe.SQL.Clear;
//<255> DEL                                Qe.SQL.Add('select * from P_kojiinfo2 ');
                                Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                                Qe.SQL.Add('where MasterKbn = :pMstkbn');
                                Qe.SQL.Add('  and NCode     = :pNCode ');
                                Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                                Qe.ParamByName('pNCode').AsFloat    := uvNCode;
                                Qe.ParamByName('pNCode').AsString    := FormatFloat('0',uvNCode);  //<255> ADD

                                if Qe.Open = false then
                                    Abort;

                                Qe.First;
                                while not Qe.Eof do
                                begin
                                    rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                    iRet2 := fnCorpRelation(rSyncKey, 3);

                                    if (iRet2 <> 0) and (iRet2 <> 1) then
                                        Abort;

                                    Qe.Next;
                                end;
                            finally
                                Qe.Close();
                                Qe.Free();
                            end;
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        // 会社関連付処理
                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                    m_RowState := STATE_INSERT;
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
                                    fnDataRead (strGCode, iSumKbn, 1);
                                    
//<271> DEL                                    SetLength(m_aCmnt_Gou,0);
                                    m_aCmnt_Gou.Clear();  //<271> ADD
                                    fnMemSet (iSumKbn, false);
                					fnCreateCard (iSumKbn);

                                    m_RowState := STATE_EDIT;

                                    //MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end
				else
				begin
				{更新}
                    if PPanelTree.Visible then   //<KSN> ADD
                    begin  //<KSN> ADD
                        // 他の合計についている？
                        NodeSelect := VTreeView.Items[0];
                        while NodeSelect <> nil do
                        begin
                            stWorkRec 	:= NodeSelect.Data;
                            if strGCode = stWorkRec^.strExCode then
                            begin
                                NodeOya := NodeSelect.Parent;
                                stWorkRecOya := NodeOya.Data;
                                if stWorkRec^.strExCode <> stWorkRecOya^.strExCode then
                                begin
                                    TBaseNode := NodeOya;
                                    stWorkRecBase	:= TBaseNode.Data;
                                    if stWorkRecBase^.nDivision <> 9 then
                                    begin
                                        stCode	:= stWorkRecBase^.strExCode;
                                        m_stGCodeSave := stCode;		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end
                                    else
                                    begin
                                        stCode		 	:= '';
                                        m_stGCodeSave	:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
                                    end;
                                    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
                                    begin
                                        if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                                                System.Delete(stCode, 1, iCut);
                                            end;
                                        end
                                        else
                                        begin
                                            if stCode <> '' then
                                            begin
                                                iCode := StrToInt64(Trim(stCode));
                                                stCode := IntToStr(iCode);
                                            end;
                                        end;
                                    end;
                                    stName							:= stWorkRecBase^.strName;
                                    Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
                                end;

                                if stWorkRecOya^.nDivision = 1 then
                                begin
                                    NodeOya2 := NodeOya.Parent;
                                    stWorkRecOya2 := NodeOya2.Data;
                                    if stWorkRecOya2^.nDivision = 1 then
                                        Root_PMTab.Items[1].Enabled := false
                                    else
                                        Root_PMTab.Items[1].Enabled := true;
                                end;

                                break;
                            end
                            else
                            begin
                                NodeSelect	:= NodeSelect.GetNext;
                                Root_PMTab.Items[1].Enabled := true;
                            end;
                        end;
                    end;  //<KSN> ADD

					gbTreeClick := false;

//<271> DEL					SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
                    m_aCmnt_Gou.Clear();  //<271> ADD
					fnMemSet (iSumKbn, false);
					fnCreateCard (iSumKbn);

                    // -------------------------------------------------------------------------
                    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
                    //
                    //  ｸﾞﾙｰﾌﾟ管理を採用している場合、詳細画面のｺｰﾄﾞｺﾝﾄﾛｰﾙ確定時に同期を
                    //  行う。親会社に既に同一ﾏｽﾀが存在している場合は同期配信を行います。
                    //  存在していない場合は、通常処理。
                    // -------------------------------------------------------------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                        MDataModule^.BeginTran( dbCorp_Select );

                        rSyncKey.strExCode := strGCode;
                        rSyncKey.nDivision := iSumKbn;

                        Qe := TMQuery.Create ( Self );

                        try
                            MDataModule.SetDBInfoToQuery ( dbCorp_Select, Qe );

                            Qe.Close;
                            Qe.SQL.Clear;
//<255> DEL                            Qe.SQL.Add('select * from P_kojiinfo2 ');
                            Qe.SQL.Add('select KojiInfo2NCode from P_kojiinfo2 ');  //<255> ADD
                            Qe.SQL.Add('where MasterKbn = :pMstkbn');
                            Qe.SQL.Add('  and NCode     = :pNCode ');
                            Qe.ParamByName('pMstkbn').Asinteger := m_nMasterDivision;
//<255> DEL                            Qe.ParamByName('pNCode').AsFloat    := GHojyoMA_DMemDataNCode.AsFloat;
                            Qe.ParamByName('pNCode').AsString    := GHojyoMA_DMemDataNCode.AsString;  //<255> ADD

                            if Qe.Open = false then
                                Abort;

                            Qe.First;
                            while not Qe.Eof do
                            begin
                                rSyncKey.nNCode := Qe.FieldByName('KojiInfo2NCode').AsFloat;
                                iRet2 := fnCorpRelation(rSyncKey, 3);

                                if (iRet2 <> 0) and (iRet2 <> 1) then
                                    Abort;

                                Qe.Next;
                            end;
                        finally
                            Qe.Close();
                            Qe.Free();
                        end;

                        if ( iRet2 <> 1 ) then
                        begin
                            // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                            MDataModule^.Rollback( dbCorp_Select );
                        end;

                        // 会社関連付処理
                        case iRet2 of
                            0:  begin
                                    // 親会社に該当ﾃﾞｰﾀがない場合は何も行わない(通常)
                                end;
                            1:  begin
                                    // 親会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してｺﾐｯﾄを実行する
                                    MDataModule.Commit( dbCorp_Select );

                                    // 正常に関連付が行えた場合は、画面の再描画を行う
//<271> DEL                                    SetLength(m_aCmnt_Gou,0);
                                    m_aCmnt_Gou.Clear();  //<271> ADD
                                    fnMemSet (iSumKbn, false);
                					fnCreateCard (iSumKbn);

                                    //MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                end;
                            2:  begin
                                    // 会社関連付をｷｬﾝｾﾙした場合
                                    MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                    Abort;
                                end;
                            -1, -9: begin
                                        // 実在合計不一致、例外ｴﾗｰ
                                        MjsSetFocus(Self,(Sender as TMNumEdit).Name);
                                        Abort;
                                    end;
                        end;
                    end;

                    m_RowState := STATE_EDIT;
                    // ↑↑↑<172>
                    // -------------------------------------------------------------------------
				end;
			end;
		end;

//<256> ADD St
		if (Goukei_PPanel_Card.Visible = True) then
		begin
	        for iCount := 1 to VTreeView.Items.Count do
            begin
		       	stWorkRec   := VTreeView.Items [iCount - 1].Data;
                if	(CompareStr (stWorkRec^.strExCode, strGCode) = 0) then
            	begin
            		VTreeView.Items [iCount - 1].Selected := TRUE;
            		Break;
            	end;
            end;
        end;
//<256> ADD Ed

		//　合計正式名称
		if Sender = Goukei_ETEdit_LongName then
		begin
			stWork := Goukei_ETEdit_SimpleName.Text;
			if stWork = '' then
			begin
				stWork := Goukei_ETEdit_LongName.Text;
				Goukei_ETEdit_SimpleName.Text := MjsCopy(stWork, 14);
			end;
		end;

{		if (Goukei_PPanel_Card.Visible = false) or (Goukei_PPanel_Kihon.Visible = false) or (Goukei_PPanel_Kihon.Visible = false) then
		begin
			FieldRestor(Sender, 1);				// 項目復元
			exit;
		end;
}
		//　合計郵便番号
		if (Sender = Goukei_ENEdit_ZipCode2)	and			// 郵便番号枝番入力(基番,枝番入力済み)
		   (Goukei_ENEdit_ZipCode1.Value <> 0) and
		   (Goukei_ENEdit_ZipCode2.Value <> 0) then
		begin
			if (Goukei_ETEdit_Address1.Text = '') and		// 住所上段下段 未入力？
			   (Goukei_ETEdit_Address2.Text = '') then
			begin
				iZip1 := Trunc(Goukei_ENEdit_ZipCode1.Value);		// 基番 取得
				iZip2 := Trunc(Goukei_ENEdit_ZipCode2.Value);		// 枝番 取得
				sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
				sAdr1 := '';
				sAdr2 := '';

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
				if iValue = 1 then
				begin
					Goukei_ETEdit_Address1.Text := sAdr1;			// 住所上段 SET
					Goukei_ETEdit_Address2.Text := sAdr2;			// 住所下段 SET
				end
				else if iValue < 0 then
				begin
					Beep;
                    Goukei_PMTab.Items.Selected := 0;
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
					Abort;
				end;
			end;
		end;

		// 合計住所上段
		if Sender = Goukei_ETEdit_Address1 then					// 住所上段入力
		begin
			if (Goukei_ENEdit_ZipCode1.Value = 0) and				// 基番,枝番 未入力？
			   (Goukei_ENEdit_ZipCode2.Value = 0) then
			begin
				sZip  := '';
				sAdr1 := Goukei_ETEdit_Address1.Text;
				sAdr2 := Goukei_ETEdit_Address2.Text;

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 住所から直接検索
				if iValue = 1 then
				begin
					iZip1 := StrToInt(MjsCopy(sZip,3));				// 基番 取り出し
					iZip2 := StrToInt(MJSHanCopy(sZip,5,4));				// 枝番 取り出し
					Goukei_ENEdit_ZipCode1.Value := iZip1;			// 基番 SET
					Goukei_ENEdit_ZipCode2.Value := iZip2;			// 枝番 SET
	//            end
	//            else
	//			begin
	//				Beep;
	//				MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
	//				Abort;
				end;
			end;
		end;

		// 合計完成振替部門
		if (Sender = Goukei_ETEdit_BmnCode) or (Sender = Goukei_ENEdit_BmnCode) then
		begin
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				if Goukei_ETEdit_BmnCode.Text = '' then
				begin
					Goukei_LLabel_BmnName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Goukei_ETEdit_BmnCode.Text;
				end;
			end
			else
			begin
				if Goukei_ENEdit_BmnCode.Value = 0 then
				begin
					if Goukei_ENEdit_BmnCode.InputFlag = true then
					begin
						Goukei_LLabel_BmnName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
					Close;

					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');

// <204> ADD start
					SQL.Add('ORDER BY TStartDate desc, InsDateTM desc');
// <204> ADD end

                    SetFld('pMKBN').asInteger := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
// <238> ADD start
                        // 検索Expから選択もしくは変更なしの場合
                        if (m_GBmnExpFlg  = True) or (m_GBmnChangeFlg = False) then
                        begin
                            m_GBmnExpFlg  := False;
                            exit;
                        end;
// <238> ADD end

// <204> MOD start
//						Goukei_LLabel_BmnName.Caption := GetFld('SimpleName').AsString;
                        if ((Sender = Goukei_ENEdit_BmnCode) and (Goukei_ENEdit_BmnCode.TagStr = '')) or
                           ((Sender = Goukei_ETEdit_BmnCode) and (Goukei_ETEdit_BmnCode.TagStr = '')) then
                        begin
							Goukei_LLabel_BmnName.Caption := GetFld('SimpleName').AsString;
                        end;
// <204> MOD end
						exit;
					end
					else
					begin
						Beep;
                        Goukei_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 合計担当者
		if (Sender = Goukei_ETEdit_PersonCode) or (Sender = Goukei_ENEdit_PersonCode) then
		begin
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
			begin
				if Goukei_ETEdit_PersonCode.Text = '' then
				begin
					Goukei_LLabel_PersonName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Goukei_ETEdit_PersonCode.Text;
				end;
			end
			else
			begin
				if Goukei_ENEdit_PersonCode.Value = 0 then
				begin
					if Goukei_ENEdit_PersonCode.InputFlag = true then
					begin
						Goukei_LLabel_PersonName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin

                    Close;
                    SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

					SetFld('strGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
						Goukei_LLabel_PersonName.Caption := GetFld('SimpleName').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Goukei_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 合計受注者
		if (Sender = Goukei_ETEdit_CustomerCode) or (Sender = Goukei_ENEdit_CustomerCode) then
		begin
// モード切り替え
//			if m_bModeChg = false then
//			begin
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
				begin
				if Goukei_ETEdit_CustomerCode.Text = '' then
					begin
						Goukei_LLabel_CustomerName.Caption := '';
						exit;
						end
					else
					begin
						strGCode := Goukei_ETEdit_CustomerCode.Text;
					end;
				end
				else
				begin
					if Goukei_ENEdit_CustomerCode.Value = 0 then
					begin
						if Goukei_ENEdit_CustomerCode.InputFlag = true then
						begin
							Goukei_LLabel_CustomerName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)]);
						end;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)]);
					end;
				end;

				QueryRead := TMQuery.Create (Self);
				MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

				try
					with QueryRead do
					begin
						Close;

						SQL.Clear;							// ｸｴﾘの初期化
						// 取引先を外部ｺｰﾄﾞ昇順でGET
                        SQL.Add('select NMK from MTOKUI');
                        SQL.Add('where  GCode=:GCode and RDelKbn=0');
                        SetFld('GCode').AsString := strGCode;
						Open;						// ｸｴﾘの開始

						if EOF = false then
						begin
							Goukei_LLabel_CustomerName.Caption := GetFld('NMK').AsString;
							exit;
						end
						else
						begin
							Beep;
                            Goukei_PMTab.Items.Selected := 0;
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
								MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
							else
								MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
							Abort;
							exit;
						end;
					end;
				finally
					QueryRead.Free;
				end;
//			end;
		end;

		// 合計計上基準・合計配賦区分・合計名寄せ区分
//		if (Sender = Goukei_ENEdit_SalesBase) or
//		if (Sender = Goukei_ENEdit_HaifuKbn) or
		if Sender = Goukei_ENEdit_RootKbn then
		begin
			iValue := Trunc((Sender as TMNumEdit).Value);
			iCount := TMNumEdit(Sender).SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc((Sender as TMNumEdit).MinValue);
			iMax   := Trunc((Sender as TMNumEdit).MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;

			if iCount <> 0 then
			begin
				for i := 0 to iCount-1 do
				begin
					sValue := TMNumEdit(Sender).SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);
					if iValue = StrToInt(sValue) then
					begin
//						if Sender = Goukei_ENEdit_SalesBase then
//							Goukei_LLabel_SalesBaseDsp.Caption		:= sSales[iValue]
//						else
//						begin
//							if Sender = Goukei_ENEdit_HaifuKbn then
//								Goukei_LLabel_HaifuKbnDsp.Caption		:= sHaifu[iValue]
//							else
								if iValue = 0 then
								begin
									Goukei_ENEdit_BmnCode.Value := 0;
									Goukei_ENEdit_BmnCode.InputFlag := true;
									Goukei_ETEdit_BmnCode.Text := '';
									Goukei_LLabel_BmnName.Caption := '';
									Goukei_EDEdit_FinishDate.Value := 0;
								end
								else
									Goukei_EDEdit_FinishDate.AsDateTime	:= GHojyoMA_DMemDataFinishDate.AsDateTime;

								Goukei_ENEdit_RootKbn.Value := iValue;
								Goukei_ENEdit_RootKbn.InputFlag := false;
								Goukei_LLabel_RootKbnDsp.Caption		:= sRoot[iValue];
//						end;

						Exit;
					end;
				end;
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end
			else
			begin
//				if Sender = Goukei_ENEdit_SalesBase then
//					Goukei_LLabel_SalesBaseDsp.Caption		:= sSales[0]
//				else
//				begin
//					if Sender = Goukei_ENEdit_HaifuKbn then
//						Goukei_LLabel_HaifuKbnDsp.Caption		:= sHaifu[0]
//					else
						Goukei_ENEdit_BmnCode.Value := 0;
						Goukei_ENEdit_BmnCode.InputFlag := true;
						Goukei_ETEdit_BmnCode.Text := '';
						Goukei_LLabel_BmnName.Caption := '';
						Goukei_EDEdit_FinishDate.Value := 0;

						Goukei_ENEdit_RootKbn.Value := 0;
						Goukei_ENEdit_RootKbn.InputFlag := false;
						Goukei_LLabel_RootKbnDsp.Caption		:= sRoot[0];
//				end;
				exit;
			end;
		end;

		// 合計予定年月日(開始)
		if Sender = Goukei_EDEdit_StartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Goukei_EDEdit_StartDate,Goukei_EDEdit_EndDate) then
            begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---
		end;

		// 合計予定年月日（終了）
		if Sender = Goukei_EDEdit_EndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Goukei_EDEdit_StartDate,Goukei_EDEdit_EndDate) then
            begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---
//<TAX> ADD St
            kojiInfoParam := moKojiInfoMn.GetKojiInfoParam();
            returnCode :=
                moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn));
            case returnCode of
                // 標準税率同士の税率不一致
                CONT_CHANGERATE  :
                begin
                    sWk := GetContMessage(returnCode);
                    oCont := TKojiInfo2(moKojiInfoMn.GetContErrList()[0]);
                    oDic := moBusiness.GetStandardTaxRate(
                        oCont.ContDate, Goukei_EDEdit_EndDate.AsDateTime);      // 現在の標準税率
                    oDic2 := moBusiness.GetStandardTaxRate(
                        oCont.ContDate, KojiInfoParam.YoteiDateED);             // 変更前の標準税率

                    sWk := Format(sWk, [oDic2.TaxName, oDic.TaxName]);
                    iRet := MjsMessageBoxEX(Self, sWk,'確認',mjQuestion ,mjYesNo,mjDefNO);
                    if iRet <> mrYes then
                    begin
                        Beep;
                        Goukei_PMTab.Items.Selected := 0;
                        Goukei_EDEdit_EndDate.SetFocus();
                        Abort;
                    end
                    else
                    begin
                        moKojiInfoMn.ReChangeKojiInfo();  // 再変更依頼
                        setContTaxInfo(GKeiyaku_DMemData, moKojiInfoMn.GetContErrList);
                    end;
                end;
            end;
//<TAX> ADD Ed
		end;

		// 合計実績年月日(開始)
		if Sender = Goukei_EDEdit_JStartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Goukei_EDEdit_JStartDate,Goukei_EDEdit_JEndDate) then
            begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---
		end;

		// 合計実績年月日（終了）
		if Sender = Goukei_EDEdit_JEndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;

//--<115> St ---
            if not fnChkDateBigSmall(Goukei_EDEdit_JStartDate,Goukei_EDEdit_JEndDate) then
            begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
            end;
//--<115> Ed ---

		end;
// <205> ADD start
		// 合計施主
		if (Sender = Goukei_ETEdit_SeshuCode) or (Sender = Goukei_ENEdit_SeshuCode) then
		begin
			if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
			begin
				if Goukei_ETEdit_SeshuCode.Text = '' then
				begin
					Goukei_LLabel_SeshuName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Goukei_ETEdit_SeshuCode.Text;
				end;
			end
			else
			begin
				if Goukei_ENEdit_SeshuCode.Value = 0 then
				begin
					if Goukei_ENEdit_SeshuCode.InputFlag = true then
					begin
						Goukei_LLabel_SeshuName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_SeshuCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_SeshuCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin

                    //送付ﾏｽﾀ
                    Close;
                    SQL.Clear;
// <224> MOD start
//                    SQL.Add('select Nm from MSOFU ');
                    SQL.Add('select Nmk as Nm from MSOFU ');
// <224> MOD end
                    SQL.Add('where NCode=:exNCode and RDelKBN = 0 and NouKbn = 4');
//<255> DEL					SetFld('exNCode').AsFloat := fnGetNCODE(strGCode,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger);
					SetFld('exNCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(strGCode,MKBN_SOFU,MasterInfo_DMemDataCodeAttrSeshu.asInteger));  //<255> ADD

					Open;

					if EOF = false then
					begin
						Goukei_LLabel_SeshuName.Caption  := GetFld('Nm').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Goukei_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

		// 合計施行部門
		if (Sender = Goukei_ETEdit_SekouBmnCode) or (Sender = Goukei_ENEdit_SekouBmnCode) then
		begin
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				if Goukei_ETEdit_SekouBmnCode.Text = '' then
				begin
					Goukei_LLabel_SekouBmnName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Goukei_ETEdit_SekouBmnCode.Text;
				end;
			end
			else
			begin
				if Goukei_ENEdit_SekouBmnCode.Value = 0 then
				begin
					if Goukei_ENEdit_SekouBmnCode.InputFlag = true then
					begin
						Goukei_LLabel_SekouBmnName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_SekouBmnCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_SekouBmnCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin
					Close;

					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
//<228> DEL					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 ');  //<228> ADD
					SQL.Add('ORDER BY TStartDate desc, InsDateTM desc');

                    SetFld('pMKBN').asInteger := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
// <238> MOD start
//						Goukei_LLabel_SekouBmnName.Caption := GetFld('SimpleName').AsString;
                        // 検索Expから選択もしくは変更なしの場合
                        if (m_GSekBmnExpFlg = True) or (m_GSekBmnChangeFlg = False) then
                        begin
                            m_GSekBmnExpFlg := False;
                            exit;
                        end;

                        if ((Sender = Goukei_ENEdit_SekouBmnCode) and (Goukei_ENEdit_SekouBmnCode.TagStr = '')) or
                           ((Sender = Goukei_ETEdit_SekouBmnCode) and (Goukei_ETEdit_SekouBmnCode.TagStr = '')) then
                        begin
						    Goukei_LLabel_SekouBmnName.Caption := GetFld('SimpleName').AsString;
                        end;
// <233> MOD end
						exit;
					end
					else
					begin
						Beep;
                        Goukei_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;

        // 合計施行担当者
		if (Sender = Goukei_ETEdit_SekouPersonCode) or (Sender = Goukei_ENEdit_SekouPersonCode) then
		begin
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
			begin
				if Goukei_ETEdit_SekouPersonCode.Text = '' then
				begin
					Goukei_LLabel_SekouPersonName.Caption := '';
					exit;
				end
				else
				begin
					strGCode := Goukei_ETEdit_SekouPersonCode.Text;
				end;
			end
			else
			begin
				if Goukei_ENEdit_SekouPersonCode.Value = 0 then
				begin
					if Goukei_ENEdit_SekouPersonCode.InputFlag = true then
					begin
						Goukei_LLabel_SekouPersonName.Caption := '';
						exit;
					end
					else
					begin
						strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_SekouPersonCode.Value)]);
					end;
				end
				else
				begin
					strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_SekouPersonCode.Value)]);
				end;
			end;

			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			try
				with QueryRead do
				begin

                    Close;
                    SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

					SetFld('strGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
					begin
						Goukei_LLabel_SekouPersonName.Caption := GetFld('SimpleName').AsString;
						exit;
					end
					else
					begin
						Beep;
                        Goukei_PMTab.Items.Selected := 0;
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
						else
							MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
						Abort;
						exit;
					end;
				end;
			finally
				QueryRead.Free;
			end;
		end;


		// 合計請負区分
		if (Sender = Goukei_ENEdit_UkeoiKbn) then
		begin
			iValue := Trunc((Sender as TMNumEdit).Value);
			iCount := TMNumEdit(Sender).SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc((Sender as TMNumEdit).MinValue);
			iMax   := Trunc((Sender as TMNumEdit).MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;

			if iCount <> 0 then
			begin
				for i := 0 to iCount-1 do
				begin
					sValue := TMNumEdit(Sender).SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);
					if iValue = StrToInt(sValue) then
					begin
    					Goukei_ENEdit_UkeoiKbn.Value        := iValue;
						Goukei_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[iValue];
    					Exit;
					end;
				end;
				Beep;
                Goukei_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end
			else
			begin
				Goukei_ENEdit_UkeoiKbn.Value        := 0;
				Goukei_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[0];
			end;
			exit;
		end;
// <205> ADD end
// <SEI> ADD start
		// 請求先(合計)
		if (Sender = Goukei_ETEdit_SeikyusakiCd) or (Sender = Goukei_ENEdit_SeikyusakiCd) then
		begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
        	strGCode := GetInputGCode(Goukei_ETEdit_SeikyusakiCd,
            						Goukei_ENEdit_SeikyusakiCd);

            if strGCode = '' then
            begin
            	Goukei_LLabel_SeikyusakiNm.Caption := '';
                Exit;
            end;

			if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
			begin
				Exit;
			end;

			if strName <> '' then
			begin
				Goukei_LLabel_SeikyusakiNm.Caption := strName;
				Exit;
			end
			else
			begin
				Beep;
                Goukei_PMTab.Items.Selected := PAGE_SEIKYU;
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
					MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
				else
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
				exit;
			end;
		end
		// 一括請求先工事(合計)
		else if (Sender = Goukei_ETEdit_SeikyuKoujiCd) or (Sender = Goukei_ENEdit_SeikyuKoujiCd) then
		begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
        	strGCode := GetInputGCode(Goukei_ETEdit_SeikyuKoujiCd,
            						Goukei_ENEdit_SeikyuKoujiCd);

            if strGCode = '' then
            begin
            	Goukei_LLabel_SeikyuKoujiNm.Caption := '';
                Exit;
            end;

			if not fnGetHojNameSeikyu(m_nMasterDivision, SUMKBN_JITUZAI, strGCode, strName, exNCode, OPT_KOUJI_IKKATUSEIKYU) then
			begin
				Exit;
			end;

			if strName <> '' then
			begin
				Goukei_LLabel_SeikyuKoujiNm.Caption := strName;
				Exit;
			end
			else
			begin
				Beep;
                Goukei_PMTab.Items.Selected := PAGE_SEIKYU;
				if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
					MjsSetFocus(Self,(Sender as TMTxtEdit).Name)	// 元の場所に戻す
				else
					MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
				exit;
			end;
		end;
// <SEI> ADD end
	end;
end;

//**************************************************************************
//	Proccess  :	実在EditコンポーネントのCheck共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 11 / 9
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.JituzaiEditCheck(Sender: TObject);
var
	sAdr1		: String;
	sAdr2		: String;
	sZip		: String;
	iZip1		: Integer;
	iZip2		: Integer;
	iValue		: Integer;
begin

	if m_fEnd = 0 then
	begin
		//　実在郵便番号
		if (Sender = Jituzai_ENEdit_ZipCode2)	and			// 郵便番号枝番入力(基番,枝番入力済み)
		   (Jituzai_ENEdit_ZipCode1.Value <> 0) and
		   (Jituzai_ENEdit_ZipCode2.Value <> 0) then
		begin
			iZip1 := Trunc(Jituzai_ENEdit_ZipCode1.Value);		// 基番 取得
			iZip2 := Trunc(Jituzai_ENEdit_ZipCode2.Value);		// 枝番 取得
			sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
			sAdr1 := '';
			sAdr2 := '';

			iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
			if iValue < 0 then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 実在住所上段
		if Sender = Jituzai_ETEdit_Address1 then					// 住所上段入力
		begin
			sZip  := '';
			sAdr1 := Jituzai_ETEdit_Address1.Text;
			sAdr2 := Jituzai_ETEdit_Address2.Text;

			iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 住所から直接検索
			if iValue < 1 then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 実在完成振替部門
		if Sender = Jituzai_ETEdit_BmnCode then
		begin
		end;

		// 実在担当者
		if Sender = Jituzai_ETEdit_PersonCode then
		begin
		end;

		// 実在受注者
		if Sender = Jituzai_ETEdit_CustomerCode then
		begin
		end;

		//　開始予定工期
		if Sender = Jituzai_EDEdit_StartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 終了予定工期
		if Sender = Jituzai_EDEdit_EndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		//　開始実績工期
		if Sender = Jituzai_EDEdit_JStartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 終了実績工期
		if Sender = Jituzai_EDEdit_JEndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;


	end;
end;

//**************************************************************************
//	Proccess  :	合計EditコンポーネントのCheck共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 11 / 9
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.GoukeiEditCheck(Sender: TObject);
var
	sAdr1		: String;
	sAdr2		: String;
	sZip		: String;
	iZip1		: Integer;
	iZip2		: Integer;
	iValue		: Integer;
begin

	if m_fEnd = 0 then
	begin
		//　合計郵便番号
		if (Sender = Goukei_ENEdit_ZipCode2)	and			// 郵便番号枝番入力(基番,枝番入力済み)
		   (Goukei_ENEdit_ZipCode1.Value <> 0) and
		   (Goukei_ENEdit_ZipCode2.Value <> 0) then
		begin
			iZip1 := Trunc(Goukei_ENEdit_ZipCode1.Value);		// 基番 取得
			iZip2 := Trunc(Goukei_ENEdit_ZipCode2.Value);		// 枝番 取得
			sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
			sAdr1 := '';
			sAdr2 := '';

			iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
			if iValue < 0 then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMNumEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 合計住所上段
		if Sender = Goukei_ETEdit_Address1 then					// 住所上段入力
		begin
			sZip  := '';
			sAdr1 := Goukei_ETEdit_Address1.Text;
			sAdr2 := Goukei_ETEdit_Address2.Text;

			iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 住所から直接検索
			if iValue < 1 then
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMTxtEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 合計完成振替部門
		if Sender = Goukei_ETEdit_BmnCode then
		begin
		end;

		// 合計担当者
		if Sender = Goukei_ETEdit_PersonCode then
		begin
		end;

		// 合計受注者
		if Sender = Goukei_ETEdit_CustomerCode then
		begin
		end;

		// 合計予定年月日
		if Sender = Goukei_EDEdit_StartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 合計予定年月日
		if Sender = Goukei_EDEdit_EndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 合計予定年月日
		if Sender = Goukei_EDEdit_JStartDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

		// 合計予定年月日
		if Sender = Goukei_EDEdit_JEndDate then
		begin
			// 日付にｴﾗｰがないか？
			iValue := Trunc((Sender as TMDateEdit).Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
			begin
				Beep;
				MjsSetFocus(Self,(Sender as TMDateEdit).Name);	// 元の場所に戻す
				Abort;
			end;
		end;

	end;

end;


// PopUpTree







//**************************************************************************
//	Proccess  :	ツリービュー右クリックﾎﾟｯﾌﾟｱｯﾌﾟｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.PMKasantaikeiPopup(Sender: TObject);
var
	NodeSelect			: TTreeNode;
	stWorkRec			: ^TreeViewRec;
	NodeOya				: TTreeNode;
	stWorkRecOya		: ^TreeViewRec;
	NodeOya2			: TTreeNode;
	stWorkRecOya2		: ^TreeViewRec;
	QueryFusen			: TMQuery;
	NodeChk				: TTreeNode;
	stWorkRecChk		: ^TreeViewRec;
begin
// <193> ADD start
	NodeSelect          := VTreeView.Selected;
	m_cNodeRightClk     := NodeSelect;
	stWorkRec           := NodeSelect.Data;

	VTreeView.Selected  := NodeSelect;
// <193> ADD end

    // 参照ﾓｰﾄﾞの場合は以下の処理を行わない<176>
    if ( giReferFlag = REFER )  then
    begin
        // とりあえず、ﾎﾟｯﾌﾟｱｯﾌﾟの内容を使用不可に。
        // 最終的は他のﾏｽﾀと動作を合わせる必要有
        TPDetail    .Enabled := false;
        TPCopy      .Enabled := false;
        TPPaste     .Enabled := false;
        TPAllDel    .Enabled := false;

// <198> MOD start
//        TPDelete    .Enabled := false;
        if m_cJNTArea.IsDelete then     	// 削除権限ありの場合
        begin
        	if stWorkRec^.nDivision = 9 then// 工事加算体系だったら
            begin
            	TFDel.Enabled     := false;
            end
            else
            begin                          	// 諸口の場合
            	if stWorkRec^.iSyokuti = 1 then
                begin                       // ﾚｺｰﾄﾞが一件もない場合は削除ﾎﾞﾀﾝを有効にする
                	TPDelete.Enabled  := fnRecordCount()
                end
            	else                		// 諸口以外は削除ﾎﾞﾀﾝを有効にする
                begin
                	TPDelete.Enabled  := true;
                end;
            end;

            								// 合計→合計の加算が組まれているかどうか
			if stWorkRec^.nDivision = 1 then// 合計のみ
			begin
				NodeChk := NodeSelect.getFirstChild;
				if NodeChk <> nil then
				begin
                	TPDelete.Enabled  := false;
				end
                else
                begin
					TPDelete.Enabled  := true;
                end;
			end;
        end
        else
        begin
          	TPDelete.Enabled     := false;
        end;
// <198> MOD start

        TPOpen      .Enabled := false;
        TPClose     .Enabled := false;

// <193> MOD start
(*
		TFDel       .Enabled := false;
        TFRe        .Enabled := false;
        TFRed       .Enabled := false;
        TFBlue      .Enabled := false;
        TFGreen     .Enabled := false;
        TFOrange    .Enabled := false;
      	Exit;
*)
        									// 付箋は決算確定時でも有効にする
		if  stWorkRec^.nDivision = 9 then	// 工事加算体系だったら
		begin
			TFDel.Enabled := false;
        	TFRe.Enabled := false;
        	TFRed.Enabled := false;
        	TFBlue.Enabled := false;
        	TFGreen.Enabled := false;
        	TFOrange.Enabled := false;
		end
        else
        begin
        	TFDel.Enabled := True;
        	TFRe.Enabled := True;
        	TFRed.Enabled := m_cJNTArea.IsFusen;
        	TFBlue.Enabled := m_cJNTArea.IsFusen;
        	TFGreen.Enabled := m_cJNTArea.IsFusen;
        	TFOrange.Enabled := m_cJNTArea.IsFusen;
        end;
 // <193> MOD end
    end;

    // <176> - ED

	m_fTreeClk := 1;							// TreeClickﾌﾗｸﾞ

// <193> DEL start
(*	NodeSelect          := VTreeView.Selected;
	m_cNodeRightClk     := NodeSelect;
	stWorkRec           := NodeSelect.Data;

	VTreeView.Selected  := NodeSelect;
*)
// <193> DEL end

//    VTreeViewChange(Sender, NodeSelect);

// <193> ADD start
	if giReferFlag <> REFER then  				// 決算確定でない場合
    begin
// <193> ADD start

	if  stWorkRec^.nDivision = 9 then			// 工事加算体系だったら
	begin
//		TPCut.Enabled  := false;
		TPDetail.Enabled  := false;
		TPCopy.Enabled    := false;
		TPDelete.Enabled  := false;
		TPAllDel.Enabled  := false;
		TFDel.Enabled     := false;
		TFSep.Enabled     := false;
		TFBlue.Enabled    := false;
		TFGreen.Enabled   := false;
		TFOrange.Enabled  := false;
		TFRed.Enabled     := false;
	end
	else
	begin
//		TPCut.Enabled  := true;
		TPDetail.Enabled  := true;
        if giReferFlag = REFER then
    		TPCopy.Enabled := false
        else
    		TPCopy.Enabled := true;
        if m_cJNTArea.IsDelete = false then//削除権限を考慮する
        begin
			TPDelete.Enabled  := false;
        end
        else
        begin
            if stWorkRec^.iSyokuti = 1 then
                TPDelete.Enabled  := fnRecordCount()
            else
                TPDelete.Enabled  := true;
        end;
		TPAllDel .Enabled  := true;
		TFDel.Enabled      := true;
		TFSep.Enabled      := true;
		TFBlue.Enabled     := m_cJNTArea.IsFusen;
		TFGreen.Enabled    := m_cJNTArea.IsFusen;
		TFOrange.Enabled   := m_cJNTArea.IsFusen;
		TFRed.Enabled      := m_cJNTArea.IsFusen;

		NodeOya			   := NodeSelect.Parent;
		stWorkRecOya       := NodeOya.Data;
		if  stWorkRecOya^.nDivision = 9 then
			TPAllDel.Enabled  := false;
	end;


	// 合計→合計の加算が組まれているかどうか
	if stWorkRec^.nDivision = 1 then		// 合計のみ
	begin
		NodeChk := NodeSelect.getFirstChild;
		while NodeChk <> nil do
		begin
			stWorkRecChk  := NodeChk.Data;
			if stWorkRecChk^.nDivision = 1 then
			begin
				TPCopy.Enabled  := false;
				break;
			end;

			NodeChk := NodeSelect.GetNextChild(NodeChk);
		end;
	end;

	if  m_stRecPaste = nil then
		TPPaste.Enabled  := false
	else
	begin
        case stWorkRec^.nDivision of
            0:
            begin
                NodeOya			    := NodeSelect.Parent;
                stWorkRecOya        := NodeOya.Data;
                if  stWorkRecOya^.nDivision = 9 then
                begin
                    // 二重加算は許さない
                    if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                        TPPaste.Enabled  := false
                    else
                        TPPaste.Enabled  := true;
                end
                else
                begin
                    NodeOya2		:= NodeOya.Parent;
                    stWorkRecOya2	:= NodeOya2.Data;
                    if  stWorkRecOya2^.nDivision = 9 then
                        TPPaste.Enabled  := true
                    else
                    begin
                        // 合計工事に合計工事は貼り付けさせない
                        if m_stRecPaste^.nDivision = 1 then
                            TPPaste.Enabled  := false
                        else
                        begin
                            // 二重加算は許さない
                            if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                                TPPaste.Enabled  := false
                            else
                                TPPaste.Enabled  := true;
                        end;
                    end;
                end;
            end;
            1:
            begin
                NodeOya			    := NodeSelect.Parent;
                stWorkRecOya        := NodeOya.Data;
                if  stWorkRecOya^.nDivision = 9 then
                begin
                    // 二重加算は許さない
                    if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                        TPPaste.Enabled  := false
                    else
                        TPPaste.Enabled  := true;
                end
                else
                begin
                    // 合計工事に合計工事は貼り付けさせない
                    if m_stRecPaste^.nDivision = 1 then
                        TPPaste.Enabled  := false
                    else
                    begin
                        // 二重加算は許さない
                        if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                            TPPaste.Enabled  := false
                        else
                            TPPaste.Enabled  := true;
                    end;
                end;
            end;
            9:
            begin
                // 二重加算は許さない
                if  m_stRecPaste^.strExCode = stWorkRec^.strExCode then
                    TPPaste.Enabled  := false
                else
                    TPPaste.Enabled  := true;
            end;
        end;
	end;

    // ﾄｯﾌﾟﾉｰﾄﾞの場合は無視<125>
    if ( stWorkRec^.nDivision <> 9 ) then
    begin
    	if BSpeedButtonIS.Caption <> '詳細(&T)' then
    		TPDetail.Enabled  := false
    	else
    		TPDetail.Enabled  := true;
    end;

// <193> ADD start
	end;        						// 決算確定でないif文のend
// <193> ADD end

	QueryFusen := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

//	PMKasantaikei.Items[8].Checked := false;
//	PMKasantaikei.Items[9].Checked := false;
//	PMKasantaikei.Items[10].Checked := false;
//	PMKasantaikei.Items[11].Checked := false;
	try
		// 付箋ﾁｪｯｸ
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 工事付箋情報をGET
//<255> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenKbn from MFusenInfo');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger  := m_nMasterDivision;
//<255> DEL			SetFld('Ncode').AsFloat    := stWorkRec^.iNCode;// 検索対象の外部ｺｰﾄﾞ 設定
			SetFld('Ncode').AsString    := FormatFloat('0',stWorkRec^.iNCode);// 検索対象の外部ｺｰﾄﾞ 設定  <255> ADD
			Open;						// ｸｴﾘの開始

{			while EOF = false do
			begin
//	            showmessage(IntToStr(GetFld('FusenKbn').AsInteger));
				case GetFld('FusenKbn').AsInteger of
				RED:	PMKasantaikei.Items[8].Checked := true;
				GREEN:	PMKasantaikei.Items[9].Checked := true;
				BLUE:	PMKasantaikei.Items[10].Checked := true;
				ORANGE:	PMKasantaikei.Items[11].Checked := true;
				end;
				Next;
			end;}

			if EOF = false then
			begin
				PMKasantaikei.Items[11].Visible := true;
				PMKasantaikei.Items[12].Visible := true;
				PMKasantaikei.Items[13].Visible := true;
				case GetFld('FusenKbn').AsInteger of
					RED:
					begin
						PMKasantaikei.Items[14].Visible := false;
						PMKasantaikei.Items[15].Visible := true;
						PMKasantaikei.Items[16].Visible := true;
						PMKasantaikei.Items[17].Visible := true;
						TFDel.Bitmap.Assign(TFRed.Bitmap);
					end;
					BLUE:
					begin
						PMKasantaikei.Items[14].Visible := true;
						PMKasantaikei.Items[15].Visible := false;
						PMKasantaikei.Items[16].Visible := true;
						PMKasantaikei.Items[17].Visible := true;
						TFDel.Bitmap.Assign(TFBlue.Bitmap);
					end;
					GREEN:
					begin
						PMKasantaikei.Items[14].Visible := true;
						PMKasantaikei.Items[15].Visible := true;
						PMKasantaikei.Items[16].Visible := false;
						PMKasantaikei.Items[17].Visible := true;
						TFDel.Bitmap.Assign(TFGreen.Bitmap);
					end;
					ORANGE:
					begin
						PMKasantaikei.Items[14].Visible := true;
						PMKasantaikei.Items[15].Visible := true;
						PMKasantaikei.Items[16].Visible := true;
						PMKasantaikei.Items[17].Visible := false;
						TFDel.Bitmap.Assign(TFOrange.Bitmap);
					end;
				end;
			end
			else
			begin
				PMKasantaikei.Items[11].Visible := false;
				PMKasantaikei.Items[12].Visible := false;
				PMKasantaikei.Items[13].Visible := false;
				PMKasantaikei.Items[14].Visible := true;
				PMKasantaikei.Items[15].Visible := true;
				PMKasantaikei.Items[16].Visible := true;
				PMKasantaikei.Items[17].Visible := true;
			end;
		end;


{		with QueryFusen do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
			SQL.Add('select * from HojyoMA');
			SQL.Add('where MasterKbn=51 AND SumKbn=:iSum AND RecordKbn=0 AND GCode=:stGCode');
			SetFld('iSum').AsInteger := stWorkRec^.nDivision;
			SetFld('stGCode').AsString := stWorkRec^.strExCode;
			Open;
		end;

		if QueryFusen.GetFld('KoteiKbn').AsInteger = 1 then			// 固定体系区分が1：固定のとき
			Cut.Enabled  := false;}
	finally
		QueryFusen.Free;
	end;

	m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ切り取りｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.CutClick(Sender: TObject);
var
	NodeOya		: TTreeNode;
//	stWorkRecKo : ^TreeViewRec;
begin
	NodeOya			:= m_cNodeRightClk.Parent;
	m_stRecPaste	:= m_cNodeRightClk.Data;

	// 指定のノードのﾊﾟﾗﾒｰﾀをｾｰﾌﾞ
//	m_stRecPaste^.prmCode  := stWorkRecKo^.prmCode;
//	m_stRecPaste^.prmName  := stWorkRecKo^.prmName;
//	m_stRecPaste^.prmSumKbn:= stWorkRecKo^.prmSumKbn;
//	m_stRecPaste^.prmAddKbn:= stWorkRecKo^.prmAddKbn;

	// 加算体系削除
	if DeleteHOJYOTREE(NodeOya, m_cNodeRightClk) = false then
	begin
		abort;
		exit;
	end;

	// ノード自体を削除
	m_cNodeRightClk.Delete;
	gbTreeClick := false;

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟコピーｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.CopyClick(Sender: TObject);
begin
	m_stRecPaste  := m_cNodeRightClk.Data;

	// 指定のノードのﾊﾟﾗﾒｰﾀをｾｰﾌﾞ
//	m_stRecPaste^.prmCode  := stWorkRecKo^.prmCode;
//	m_stRecPaste^.prmName  := stWorkRecKo^.prmName;
//	m_stRecPaste^.prmSumKbn:= stWorkRecKo^.prmSumKbn;
//	m_stRecPaste^.prmAddKbn:= stWorkRecKo^.prmAddKbn;

	// 加算体系削除
//    DeleteKMKTREE(NodeOya, m_cNodeRightClk);

	// ノード自体を削除
//	m_cNodeRightClk.Delete;

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ貼り付けｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.PasteClick(Sender: TObject);
var
	NodeSelect		: TTreeNode;
	NodeOya			: TTreeNode;
	NodeKo			: TTreeNode;
	stWorkRecSelect	: ^TreeViewRec;
	stWorkRecOya	: ^TreeViewRec;
	stWorkRecAdd 	: ^TreeViewRec;
	QueryCheck		: TMQuery;
	iCut			: Integer;
	stCode			: String;
	stName			: String;
	iCode			: Currency;
//	iRet			: Integer;
begin
	New(stWorkRecAdd);

	NodeSelect		:= m_cNodeRightClk;
	stWorkRecSelect	:= NodeSelect.Data;

	// 親ノード取得
	if stWorkRecSelect^.nDivision = 0 then
		NodeOya			:= NodeSelect.Parent
	else
		NodeOya			:= NodeSelect;

	stWorkRecOya	:= NodeOya.Data;

	// 同一加算先には貼り付け禁止
	if m_stRecPaste^.Incode = stWorkRecSelect^.Incode then
	begin
		MjsMessageBoxEX(Self,'２重加算の為コピーすることができません。','確認',mjInformation,mjOk, mjDefOk);
		exit;
	end;

	// 加算体系ﾁｪｯｸ(移動先ノードに同一ﾚｺｰﾄﾞがあるかどうか)
	QueryCheck := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryCheck);
	try
		with QueryCheck do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
//<255> DEL			SQL.Add('select * from HojyoTree');
			SQL.Add('select EntNo from HojyoTree');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
//          SQL.Add('order by EntNo DESC');
			SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
//<255> MOD St
//			SetFld('stSum').AsFloat         := stWorkRecOya^.Incode;
//			SetFld('stBased').AsFloat       := m_stRecPaste^.InCode;
			SetFld('stSum').AsString         := FormatFloat('0',stWorkRecOya^.Incode);
			SetFld('stBased').AsString       := FormatFloat('0',m_stRecPaste^.InCode);
//<255> MOD Ed

			Open;
			if EOF = false then
			begin
				Beep;
				MjsMessageBoxEX(Self,'同一コードが登録済みです','登録',mjInformation,mjOk, mjDefOk);
				exit;
			end;
		end;
	finally
		QueryCheck.Free;
	end;


	if stWorkRecSelect^.nDivision = 0 then
	begin
		// ﾂﾘｰﾋﾞｭｰに反映
		stWorkRecAdd^.nDivision	:= m_stRecPaste^.nDivision;
		stWorkRecAdd^.strName	:= m_stRecPaste^.strName;
		stWorkRecAdd^.strExCode	:= m_stRecPaste^.strExCode;
		stWorkRecAdd^.iNCode	:= m_stRecPaste^.iNCode;
		stWorkRecAdd^.iSyokuti	:= m_stRecPaste^.iSyokuti;

		stCode := m_stRecPaste^.strExCode;
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
					stCode := CurrToStr(iCode);
				end;
			end;
		end;
		stName := stCode + ' ' + m_stRecPaste^.strName;

		NodeKo := VTreeView.Items.AddChildObject(NodeOya, stName, stWorkRecAdd);
		if m_stRecPaste^.nDivision = 0 then			// 追加するノードが実在
		begin
			NodeKo.ImageIndex := IC_JCLOSE;
			NodeKo.SelectedIndex := IC_JOPEN;
		end
		else 									// 合計
		begin
			NodeKo.ImageIndex := IC_GMCLOSE;
			NodeKo.SelectedIndex := IC_GMOPEN;
		end;

        SessionPractice(C_ST_PROCESS);			// <203> ADD

		// 加算体系書込
		if WriteHOJYOTREE(NodeOya, NodeKo, NodeSelect) = false then
		begin
        	SessionPractice(C_ED_PROCESS);		// <203> ADD

			abort;
			exit;
		end;

        SessionPractice(C_ED_PROCESS);			// <203> ADD

		NodeOya.DeleteChildren;
		gbTreeClick := false;

		fnCreateTreeViewItems(NodeOya);				// 加算体系ﾂﾘｰﾋﾞｭｰ作成

		// <289-3>追加↓
        // 貼り付け先と同一の工事に追加
		MakeNodePaste(NodeOya, stWorkRecSelect^.strExCode, stWorkRecSelect^.nDivision);
		// <289-3>追加↑

		{Grid & Card 再作成}
		MemPost_Sw := 1;
		fnCreateAll ();
		MemPost_Sw := 0;
	end
	else
	begin
		// ﾂﾘｰﾋﾞｭｰに反映
		stWorkRecAdd^.nDivision	:= m_stRecPaste^.nDivision;
		stWorkRecAdd^.strName	:= m_stRecPaste^.strName;
		stWorkRecAdd^.strExCode	:= m_stRecPaste^.strExCode;
		stWorkRecAdd^.iNCode	:= m_stRecPaste^.iNCode;
		stWorkRecAdd^.iSyokuti	:= m_stRecPaste^.iSyokuti;

		stCode := m_stRecPaste^.strExCode;
		if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
			begin
				if stCode <> '' then
				begin
					iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
					System.Delete(stCode, 1, iCut);
				end;
			end
			else
			begin
				if stCode <> '' then
				begin
					iCode := StrToInt64(Trim(stCode));
					stCode := CurrToStr(iCode);
				end;
			end;
		end;
		stName := stCode + ' ' + m_stRecPaste^.strName;

		NodeKo := VTreeView.Items.AddChildObject(NodeSelect, stName, stWorkRecAdd);
		if m_stRecPaste^.nDivision = 0 then			// 追加するノードが実在
		begin
			NodeKo.ImageIndex := IC_JCLOSE;
			NodeKo.SelectedIndex := IC_JOPEN;
		end
		else 									// 合計
		begin
			NodeKo.ImageIndex := IC_GMCLOSE;
			NodeKo.SelectedIndex := IC_GMOPEN;
		end;

        SessionPractice(C_ST_PROCESS);			// <203> ADD

		// 加算体系書込
		if WriteHOJYOTREE(NodeSelect, NodeKo, NodeSelect) = false then
		begin
        	SessionPractice(C_ED_PROCESS);		// <203> ADD

			abort;
			exit;
		end;

        SessionPractice(C_ED_PROCESS);			// <203> ADD

		NodeSelect.DeleteChildren;
		gbTreeClick := false;

		fnCreateTreeViewItems(NodeSelect);				// 加算体系ﾂﾘｰﾋﾞｭｰ作成

		// <289-3>追加↓
        // 貼り付け先と同一の工事に追加
		MakeNodePaste(NodeOya, stWorkRecSelect^.strExCode, stWorkRecSelect^.nDivision);
		// <289-3>追加↑

		{Grid & Card 再作成}
		MemPost_Sw := 1;
		fnCreateAll ();
		MemPost_Sw := 0;
	end;

	m_stRecPaste := nil;							// 初期化

end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ削除ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.DeleteClick(Sender: TObject);
//var
//	NodeOya			: TTreeNode;
//	NodeKo			: TTreeNode;
//	stWorkRecKo		: ^TreeViewRec;
//	stWorkRecOya	: ^TreeViewRec;
//	iRet			: Integer;
//	iRetChk			: Boolean;
//	QueryRead		: TMQuery;
begin
{	NodeKo		 := m_cNodeRightClk;
	stWorkRecKo  := NodeKo.Data;
	NodeOya		 := NodeKo.Parent;
	stWorkRecOya := NodeOya.Data;

{	if NodeKo.getFirstChild <> nil then
	begin
		Beep;
		MjsMessageBoxEX(Self,'加算先として登録済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
		exit;
	end;

	// 発生データの存在チェック
	iRetChk := fnDeleteCheck(stWorkRecKo^.strExCode);
	if iRetChk = false then
	begin
		Beep;
		MjsMessageBoxEX(Self,'仕訳データが入力済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
		exit;
	end;

	QueryRead		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

	try
		// 諸口かどうか判定
		QueryRead.Close;
		QueryRead.SQL.Clear;		 							// QueryFree 初期化
		QueryRead.SQL.Add('Select * from HojyoMA');
		QueryRead.SQL.Add('Where MasterKbn=51 AND GCode=:stCode AND NCode=0');
		QueryRead.SetFld('stCode').AsString := stWorkRecKo^.strExCode;
		QueryRead.Open;

		if QueryRead.EOF = false then
		begin
			QueryRead.Close;
			QueryRead.SQL.Clear;		 							// QueryFree 初期化
			QueryRead.SQL.Add('Select * from HojyoMA');
			QueryRead.SQL.Add('Where MasterKbn=51 AND NCode<>0 AND RecordKbn=0');
			QueryRead.Open;

			if QueryRead.EOF = false Then
			begin
				Beep;
				MjsMessageBoxEX(Self,'諸口以外のデータが登録済みです。'#13#10'削除することはできません。','削除',mjWarning ,mjOk ,mjDefOk);
				exit;
			end;
		end;
	finally
		QueryRead.Free;
	end;
}
{	Beep;
	iRet := MjsMessageBoxEX(Self,''''+stWorkRecKo^.strName+''''+'を削除します。よろしいですか？','削除',mjQuestion,mjYesNo,mjDefNo);
	if iRet <> mrYes then
		exit;

	m_fDel := 1;										// 削除ﾌﾗｸﾞ

	if NodeSearch(stWorkRecKo^, stWorkRecOya^) <= 1 then							// ツリー内に一件のみの時は削除
	begin
		// 工事削除
		if fnDataDelete(stWorkRecKo^.strExCode, stWorkRecKo^.nDivision) = false then
		begin
			m_fDel := 0;										// 削除ﾌﾗｸﾞ
			abort;
			exit;
		end;
	end
	else																			// 一件以上存在する場合は加算体系のみ削除
	begin
		// 加算体系削除
		if DeleteHOJYOTREE(NodeOya, NodeKo) = false then
		begin
			m_fDel := 0;										// 削除ﾌﾗｸﾞ
			abort;
			exit;
		end;
	end;

	// ノード自体を削除
	NodeKo.Delete;
	gbTreeClick := false;

	// グリッド再表示
	MemPost_Sw := 1;

	fnCreateAll ();


//	m_stGCodeSave := stGCode;							// ｺｰﾄﾞのｾｰﾌﾞ

	MemPost_Sw := 0;
	m_fDel := 0;										// 削除ﾌﾗｸﾞ
}

	BSpeedButtonDelClick(Sender);
end;

//**************************************************************************
//	Proccess  :	ツリービューﾎﾟｯﾌﾟｱｯﾌﾟ体系消去ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.AllDelClick(Sender: TObject);
var
	NodeWork		:	TTreeNode;
	NodeTop			:	TTreeNode;
	NodeOya			:	TTreeNode;
	stWorkRecWk		: ^TreeViewRec;
	QueryRead		:	TMQuery;
	iCount			:	Integer;
    stWorkRecOya    : ^TreeViewRec; //<289-4>追加
begin

    NodeTop  := VTreeView.Items[0];
	NodeWork := m_cNodeRightClk;
	NodeOya := NodeWork.Parent;
	stWorkRecWk := NodeWork.Data;
    stWorkRecOya := NodeOya.Data;   //<289-4>追加

// <203> ADD start
  	SessionPractice(C_ST_PROCESS);
    try
// <203> ADD end

	// 加算体系削除
	if DeleteHOJYOTREE(NodeOya, NodeWork) = false then
	begin
		abort;
		exit;
	end;

	QueryRead := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

	try
		with QueryRead do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化
			// 工事を外部ｺｰﾄﾞ昇順でGET
//<255> DEL			SQL.Add('select Count(*) as Kensu from HojyoTree');
			SQL.Add('select Count(BasedNCode) as Kensu from HojyoTree');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND BasedNCode =:BASE');
			SetFld('pMKBN').AsInteger  := m_nMasterDivision;
//<255> DEL			SetFld('BASE').AsFloat     := stWorkRecWk^.inCode;
			SetFld('BASE').AsString     := FormatFloat('0',stWorkRecWk^.inCode);  //<255> ADD
			Open;

			iCount := GetFld('Kensu').AsInteger;
		end;
	finally
		QueryRead.Close;
		QueryRead.Free;
	end;

	// 加算体系書込
	if iCount <= 0 then
	begin
		if WriteHOJYOTREE(NodeTop, NodeWork, NodeTop) = false then
		begin
			abort;
			exit;
		end;

		// Nodeの移動
		NodeWork.MoveTo (NodeTop, naAddChild);
	end
	else
		NodeWork.Delete;
    // <289-4> add st
    // ツリー内の対象ノードを全て削除
    MakeNodeDelete(NodeOya, stWorkRecWk^.strExCode, stWorkRecOya^.strExCode);
    // <289-4> add ed


	fnCreateAll ();

// <203> ADD start
	finally
    	SessionPractice(C_ED_PROCESS);
    end;
// <203> ADD end

end;

//**************************************************************************
//	Proccess  :	ツリービュー該当科目サーチ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.NodeSearch(stWorkRecSearch : TreeViewRec; stWorkRecOya : TreeViewRec): Integer;
var
	iCount   		: Integer;
	iLoop   		: Integer;
	stWorkRec		: ^TreeViewRec;
    QueryRead       :   TMQuery;  //<KSN> ADD
begin
	iCount := 0;

//<KSN> ADD St
    if PPanelTree.Visible = False then
    begin
        QueryRead := nil;
        try
            QueryRead		:= TMQuery.Create(Self);
            MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			QueryRead.Close;
			QueryRead.SQL.Clear;
            QueryRead.SQL.Add('Select T1.GCode as GCode,T1.BasedNCode as BasedNCode, Count(T1.GCode) as count ');
            QueryRead.SQL.Add(' From ');
            QueryRead.SQL.Add('(Select * From HojyoTree TR ');
            QueryRead.SQL.Add('Inner join MTokui MA ');
            QueryRead.SQL.Add('ON TR.MasterKbn = :iMasterKbn ');
            QueryRead.SQL.Add('AND TR.BasedNCode = MA.NCode ');
            QueryRead.SQL.Add('Where MA.RDelKbn = 0 ');
            QueryRead.SQL.Add('And MA.GCode = :strExCode) T1 ');
            QueryRead.SQL.Add('Group by GCode, BasedNCode ');

            QueryRead.SetFld('strExCode').AsString	:= stWorkRecSearch.strExCode;
            QueryRead.SetFld('iMasterKbn').AsInteger	:= m_nMasterDivision;

			QueryRead.Open;

            if QueryRead.Eof = false then
            begin
                iCount := QueryRead.GetFld('Count').AsInteger;
            end;

        finally
            QueryRead.Close;
            QueryRead.Free;
            result := iCount;
        end;
        Exit;
    end;
//<KSN> ADD Ed

	for iLoop := 1 to VTreeView.Items.Count do
	begin
		stWorkRec := VTreeView.Items [iLoop - 1].Data;
		if stWorkRecSearch.strExCode = stWorkRec.strExCode then
		begin
			Inc(iCount);
		end
	end;

	result := iCount;
end;

//**************************************************************************
//	Proccess  :	加算体系削除ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.TaikeiDelete(NodeOya : TTreeNode; NodeKo : TTreeNode);
var
	stWorkRecKo	:	^TreeViewRec;
	stWorkRecOya:	^TreeViewRec;
	NodeChild	:	TTreeNode;
begin
	stWorkRecKo  := NodeKo.Data;
	stWorkRecOya := NodeOya.Data;
	NodeChild := NodeKo.getFirstChild;

	if NodeSearch(stWorkRecKo^, stWorkRecOya^) <= 1 then	// ツリー内に一件のみの時は削除
	begin
		// 加算体系削除
		if DeleteHOJYOTREE(NodeOya, NodeKo) = false then
		begin
			abort;
			exit;
		end;

		// 工事削除
		if fnDataDelete(stWorkRecKo^.strExCode, stWorkRecKo^.nDivision) = false then
		begin
			abort;
			exit;
		end;
	end;

	// 子ノードを削除
	while NodeChild <> nil do
	begin
		// 加算体系削除
		TaikeiDelete(NodeKo, NodeChild);
		NodeChild := NodeKo.GetNextChild(NodeChild);
	end;
end;


//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからの工事削除
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : TTreeNode
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.DelKoujiClick(Sender: TObject);
begin
	BSpeedButtonDelClick(Sender);
end;

//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからの詳細表示
//	Name	  :	N.Nabe
//	Date	  :	2000/ 12 / 04
//	Parameter : TTreeNode
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.TPDetailClick(Sender: TObject);
var
	NodeWork	:	TTreeNode;
	NodeSelect	:	TTreeNode;
	NodeOya		:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	stWorkRecOya:	^TreeViewRec;
	iSumKbn		:	Integer;
	strGCode	:	String;
	stWorkRecBase: ^TreeViewRec;
	stCode		: String;
	stName		: String;
	iCode		: Integer;
	iCut		: Integer;
begin
	NodeWork := m_cNodeRightClk;
	stWorkRec := NodeWork.Data;

	Root_PMTab.Items.Selected := stWorkRec^.nDivision;

   	VTreeview.Selected := m_cNodeRightClk;
	gbTreeClick := false;

	m_fAccessTree    := false;

	if stWorkRec.nDivision = PAGE_JITUZAI then
	{実在工事パネルコントロール}
	begin
		iSumKbn := 0;
		{実在工事／詳細登録}
		Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Card;
//		Root_PMTab.Items.Selected		:= -1;
//		Root_PMTab.Items.Selected		:= 0;
		Jituzai_PPanel_Grid.Visible 	:= false;
		Jituzai_PPanel_Card.Visible 	:= true;

		Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Card;
		BSpeedButtonIS.Caption			:= '一覧(&T)';

		NodeOya := m_cNodeRightClk.Parent;
		stWorkRecOya := NodeOya.Data;
		if stWorkRecOya^.nDivision = 9 then
			Root_PMTab.Items[1].Enabled	:= true;
//<268> ADD St
        fnDataRead (stWorkRec.strExCode, iSumKbn, 0);

        fnMemSet (iSumKbn, false);

		fnCreateCard (iSumKbn);

		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			Jituzai_ETEdit_GCode.SetFocus
		else
			Jituzai_ENEdit_GCode.SetFocus;
//<268> ADD Ed
//		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
//			Jituzai_ETEdit_GCode.SetFocus
//		else
//			Jituzai_ENEdit_GCode.SetFocus;

{		fnDataRead (stWorkRec.strExCode, iSumKbn, 0);
		if JHojyoMA_DMemData.RecordCount <> 0 then
			JHojyoMA_DMemData.First;
		while JHojyoMA_DMemData.Eof = false do
		begin
			if JHojyoMA_DMemDataGCode.AsString = stWorkRec.strExCode then
			begin
				Break;
			end;
			JHojyoMA_DMemData.Next;
		end;

		if GHojyoMA_DMemData.Eof = true then
			fnMemSet (iSumKbn, false);

		fnCreateCard (iSumKbn);}
	end
	else
	begin
	{合計工事パネルコントロール}
		iSumKbn								:= 1;
		{合計工事／詳細登録}
		Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Card;
//      Root_PMTab.Items.Selected		:= -1;
//      Root_PMTab.Items.Selected		:= 1;
		Goukei_PPanel_Grid.Visible		:= false;
		Goukei_PPanel_Card.Visible		:= true;

		Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Card;
		BSpeedButtonIS.Caption			:= '一覧(&T)';
		Root_PMTab.Items[1].Enabled	:= true;
//		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
//			Goukei_ETEdit_GCode.SetFocus
//		else
//			Goukei_ENEdit_GCode.SetFocus;

		strGCode := stWorkRec^.strExCode;
		fnDataRead (strGCode, iSumKbn, 0);
		// 他の合計についている？
		NodeSelect := VTreeView.Items[0];
		while NodeSelect <> nil do
		begin
			stWorkRec 	:= NodeSelect.Data;
			if strGCode = stWorkRec^.strExCode then
			begin
				NodeOya := NodeSelect.Parent;
				stWorkRecOya := NodeOya.Data;
				if stWorkRec^.strExCode <> stWorkRecOya^.strExCode then
				begin
					TBaseNodeSv := TBaseNode;
					TBaseNode := NodeOya;
					stWorkRecBase	:= TBaseNode.Data;
					if stWorkRecBase^.nDivision <> 9 then
					begin
						stCode	:= stWorkRecBase^.strExCode;
						m_stGCodeSave := stCode;		// ｺｰﾄﾞのｾｰﾌﾞ
					end
					else
					begin
						stCode		 	:= '';
						m_stGCodeSave	:= '          ';		// ｺｰﾄﾞのｾｰﾌﾞ
					end;
					if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
					begin
						if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
						begin
							if stCode <> '' then
							begin
								iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
								System.Delete(stCode, 1, iCut);
							end;
						end
						else
						begin
							if stCode <> '' then
							begin
								iCode := StrToInt64(Trim(stCode));
								stCode := IntToStr(iCode);
							end;
						end;
					end;
					stName							:= stWorkRecBase^.strName;
					Root_PMTab.BorderCaption		:= stCode + ' ' + stName;
//					Root_PMTab.BorderCaption := TBaseNode.Text;
				end;
				break;
			end;
			NodeSelect	:= NodeSelect.GetNext;
		end;

		if GHojyoMA_DMemData.RecordCount <> 0 then
			GHojyoMA_DMemData.First;
		while GHojyoMA_DMemData.Eof = false do
		begin
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			begin
				if GHojyoMA_DMemDataGCode.AsString = strGCode then
				begin
					Break;
				end;
			end
			else
			begin
				if GHojyoMA_DMemDataGCode.AsString <> '' then
				begin
					if Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))]) = strGCode then
					begin
						Break;
					end;
				end;
			end;
			GHojyoMA_DMemData.Next;
		end;
//<271> DEL		SetLength(m_aCmnt_Gou,0);	//	配列をｸﾘｱ
        m_aCmnt_Gou.Clear();  //<271> ADD
//		if GHojyoMA_DMemData.Eof = true then
		fnMemSet (iSumKbn, false);

		fnCreateCard (iSumKbn);
//<268> ADD St
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            Goukei_ETEdit_GCode.SetFocus
        else
            Goukei_ENEdit_GCode.SetFocus;
//<268> ADD Ed
	end;

//<KSN> ADD St
    // 詳細起動であればTreeViewは非表示
    if (GetStartMode() = 1) then
    begin
        TreeView_EventCtrl(VTreeView,False);
        PPanelTree.Visible := False;
        Root_PMTab.Items[PAGE_KASAN].Visible := True;
        BSpeedButtonSort.Enabled := False;
        BSpeedButtonFind.Enabled := False;
        Root_PMTab.BorderCaption := '';      // タブのキャプションはクリアしておく
    end;
//<KSN> ADD Ed

	m_fAccessTree    := true;
end;

//**********************************************************************
//	Proccess	:	付箋表示処理
//	Name		:	N.Nabe
//	Date		:	2000/08/23
//	Return		:
//	History		:	9999/99/99	X.Xxxx
//					XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenDsp(iPage : Integer; stCode : String; iFlg : Integer);
var
	QueryFusen	:	TMQuery;
begin
	if stCode = '' then
		exit;

	QueryFusen := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 工事付箋情報をGET
//<255> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenKbn from MFusenInfo');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL			SetFld('nCODE').AsFloat        := fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('nCODE').AsString        :=
                FormatFloat('0',
                fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));  //<255> ADD

			Open;						// ｸｴﾘの開始

			if EOF = false then
			begin
                if iPage = 0 then
                begin
                    if JHojyoMA_DMemDataFusenIndex.AsInteger <> GetFld('FusenKbn').AsInteger then
                    begin
                        if iFlg = 1 then
                            JHojyoMA_DMemData.Edit;
                        JHojyoMA_DMemDataFusen.Clear;
                        JHojyoMA_DMemDataFusenIndex.AsInteger := GetFld('FusenKbn').AsInteger;
                        case GetFld('FusenKbn').AsInteger of
                        RED:	JHojyoMA_DMemDataFusen.Assign(GFRed2.Bitmap);
                        GREEN:	JHojyoMA_DMemDataFusen.Assign(GFGreen2.Bitmap);
                        BLUE:	JHojyoMA_DMemDataFusen.Assign(GFBlue2.Bitmap);
                        ORANGE:	JHojyoMA_DMemDataFusen.Assign(GFOrange2.Bitmap);
                        end;
                        if iFlg = 1 then
                        begin
                            MemPost_Sw := 1;
                            JHojyoMA_DMemData.Post;
                            MemPost_Sw := 0;
                        end;
                    end;
                end
                else
                begin
                    if GHojyoMA_DMemDataFusenIndex.AsInteger <> GetFld('FusenKbn').AsInteger then
                    begin
                        if iFlg = 1 then
                            GHojyoMA_DMemData.Edit;
                        GHojyoMA_DMemDataFusen.Clear;
                        GHojyoMA_DMemDataFusenIndex.AsInteger := GetFld('FusenKbn').AsInteger;
                        case GetFld('FusenKbn').AsInteger of
                        RED:	GHojyoMA_DMemDataFusen.Assign(GFRed2.Bitmap);
                        GREEN:	GHojyoMA_DMemDataFusen.Assign(GFGreen2.Bitmap);
                        BLUE:	GHojyoMA_DMemDataFusen.Assign(GFBlue2.Bitmap);
                        ORANGE:	GHojyoMA_DMemDataFusen.Assign(GFOrange2.Bitmap);
                        end;
                        if iFlg = 1 then
                        begin
                            MemPost_Sw := 1;
                            GHojyoMA_DMemData.Post;
                            MemPost_Sw := 0;
                        end;
                    end;
                end;
			end
			else
			begin
                if iPage = 0 then
                begin
                    if (JHojyoMA_DMemDataFusenIndex.AsInteger <> NOCOLOR) and
                        (JHojyoMA_DMemDataFusenIndex.AsInteger <> 0) then
                    begin
                        if iFlg = 1 then
                            JHojyoMA_DMemData.Edit;
                        JHojyoMA_DMemDataFusen.Clear;
                        JHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR;
                        if iFlg = 1 then
                        begin
                            MemPost_Sw := 1;
                            JHojyoMA_DMemData.Post;
                            MemPost_Sw := 0;
                        end;
                    end;
                end
                else
                begin
                    if (GHojyoMA_DMemDataFusenIndex.AsInteger <> NOCOLOR) and
                        (GHojyoMA_DMemDataFusenIndex.AsInteger <> 0) then
                    begin
                        if iFlg = 1 then
                            GHojyoMA_DMemData.Edit;
                        GHojyoMA_DMemDataFusen.Clear;
                        GHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR;
                        if iFlg = 1 then
                        begin
                            MemPost_Sw := 1;
                            GHojyoMA_DMemData.Post;
                            MemPost_Sw := 0;
                        end;
                    end;
                end;
			end;
		end;
	finally
		QueryFusen.Free;
	end;
end;

//**********************************************************************
//	Proccess	:	付箋情報書込み処理
//	Name		:	N.Nabe
//	Date		:	2000/08/23
//	Return		:
//	History		:	9999/99/99	X.Xxxx
//					XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.FusenInfoWrite(iColor : Integer; stCode : String; stCmt : String; bSw: Boolean): Boolean;
var
	QueryFusen	:	TMQuery;
	sCmntSv		:	String;
begin
	QueryFusen := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

	MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	sCmntSv := '';
	
	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 工事付箋情報をGET
//<255> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select FusenCmnt from MFusenInfo');  //<255> ADD
			SQL.Add('Where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := m_nMasterDivision;
			// 補助コード
//<255> DEL			SetFld('nCODE').AsFloat        := fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('nCODE').AsString        :=
                FormatFloat('0',
                fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));  //<255> ADD
			Open;						// ｸｴﾘの開始

			if EOF = false then
			begin
				// 付箋コメント退避
				sCmntSv := GetFld('FusenCmnt').AsString;

				// 書き込まれている付箋を削除
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 挿入ｸｴﾘの作成
				SQL.Add('Delete MFusenInfo');
				SQL.Add('Where MasterKbn=:pMKBN AND NCode=:NCode');
				SetFld('pMKBN').AsInteger := m_nMasterDivision;
				// 補助コード
//<255> DEL    			SetFld('nCODE').AsFloat   := fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
    			SetFld('nCODE').AsString   :=
                    FormatFloat('0',
                    fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));  //<255> ADD  

				// DB更新
				if (ExecSQL = false) then
				begin
					ErrorMessageDsp(QueryFusen);
					MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryFusen.Close;
	//				QueryFusen.Free;
					result := false;
					Exit;
				end;
	
				MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end;

			Close;
			SQL.Clear;							// ｸｴﾘの初期化
			// 挿入ｸｴﾘの作成
			SQL.Add('insert into MFusenInfo');
			SQL.Add('(MasterKbn, NCode, SubNCode, FusenKbn, FusenCmnt,');
			SQL.Add('UpdTantoNCode) '); // <202>
			SQL.Add('values (:iMasterKbn, :nCode, 0, :iFusenKbn, :stFsnCmt,');
			SQL.Add(':iUpdTantoNCode) '); // <202>
			// ﾏｽﾀ区分
			SetFld('iMasterKbn').AsInteger := m_nMasterDivision;
			SetFld('nCODE').AsFloat        := fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
			// 付箋区分
			SetFld('iFusenKbn').AsInteger := iColor;
			// 付箋コメント
			if bSw = true then
			begin
				if stCmt <> '' then
					SetFld('stFsnCmt').AsString := stCmt
				else
					SetFld('stFsnCmt').AsString := sCmntSv;
			end
			else
				SetFld('stFsnCmt').AsString := '';
            SetFld('iUpdTantoNCode').AsFloat    := m_TantoNCode; // <202>

			// DB更新
			if (ExecSQL = false) then
			begin
				ErrorMessageDsp(QueryFusen);
				MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				QueryFusen.Close;
//				QueryFusen.Free;
				result := false;
				Exit;
			end;

			MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
		end;
	finally
		QueryFusen.Free;
	end;

	result := true;
end;

//**********************************************************************
//	Proccess	:	付箋情報削除処理
//	Name		:	N.Nabe
//	Date		:	2000/08/23
//	Return		:
//	History		:	9999/99/99	X.Xxxx
//					XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.FusenInfaDelete(stCode : String): Boolean;
var
	QueryFusen	:	TMQuery;
begin
	QueryFusen := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

	MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 資金繰科目科目付箋情報をGET
//<255> DEL			SQL.Add('select * from MFusenInfo');
			SQL.Add('select NCode from MFusenInfo');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL			SetFld('nCODE').AsFloat        := fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
			SetFld('nCODE').AsString        :=
                FormatFloat('0',
                fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));  //<255> ADD
			Open;						// ｸｴﾘの開始

			if EOF = false then
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 削除ｸｴﾘの作成
				SQL.Add('delete from MFusenInfo');
				SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
				SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL    			SetFld('nCODE').AsFloat        := fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
    			SetFld('nCODE').AsString        :=
                    FormatFloat('0',
                    fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));  //<255> ADD

				// DB更新
				if (ExecSQL = false) then
				begin
					ErrorMessageDsp(QueryFusen);
					MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryFusen.Close;
//					QueryFusen.Free;
					result := false;
					Exit;
				end;
	
				MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
			end;
		end;
	finally
		QueryFusen.Free;
	end;

	result := true;

end;

//**************************************************************************
//	Proccess  :	グリッドﾎﾟｯﾌﾟｱｯﾌﾟｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.PMKoujiPopup(Sender: TObject);
var
	QueryFusen   : TMQuery;
    nExNCode     : Extended;
    nTagDivision : Integer;
begin

//    nExNCode     := 0;
    nTagDivision := 0;
    GFDel.Enabled := m_cJNTArea.IsFusen;
    GFRe .Enabled := m_cJNTArea.IsFusen;

    // 実在情報
    if ( Root_PMTab.Items.Selected = PAGE_JITUZAI ) then
        nExNCode := fnGetNCODE( JHojyoMA_DMemDataGCode.AsString,
                                m_nMasterDivision,
                                MasterInfo_DMemDataCodeAttr.AsInteger)
    // 合計情報
    else
        nExNCode := fnGetNCODE( GHojyoMA_DMemDataGCode.AsString,
                                m_nMasterDivision,
                                MasterInfo_DMemDataCodeAttr.AsInteger);

    if ( nExNCode <> 0 ) then
    begin
        GFRed   .Enabled := m_cJNTArea.IsFusen;
        GFBlue  .Enabled := m_cJNTArea.IsFusen;
        GFGreen .Enabled := m_cJNTArea.IsFusen;
        GFOrange.Enabled := m_cJNTArea.IsFusen;

        QueryFusen := TMQuery.Create ( Self );
        MDataModule^.SetDBInfoToQuery ( dbCorp_Select, QueryFusen );

        try
            with QueryFusen do
    		begin
                Close();
    			SQL.Clear();
//<255> DEL                SQL.Add('select * from MFusenInfo ');
                SQL.Add('select FusenKbn from MFusenInfo ');  //<255> ADD
    			SQL.Add('where MasterKbn=:pMKBN and NCode=:NCode ');
    			SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL                SetFld('nCODE').AsFloat   := nExNCode;
                SetFld('nCODE').AsString   := FormatFloat('0',nExNCode);  //<255> ADD
                Open();

                if ( not EOF ) then
                    nTagDivision := GetFld ('FusenKbn').AsInteger;
            end;
        finally
            QueryFusen.Close();
            QueryFusen.Free();
        end;


        if ( nTagDivision > 0 ) then
        begin
            GFDel.Visible := true;
            GFRe .Visible := true;

            case nTagDivision of
                RED:
                begin
                    GFRed   .Visible := false;
                    GFBlue  .Visible := true;
                    GFGreen .Visible := true;
                    GFOrange.Visible := true;
                    GFDel.Bitmap.Assign(GFRed.Bitmap);
                end;
                BLUE:
                begin
                    GFRed   .Visible := true;
                    GFBlue  .Visible := false;
                    GFGreen .Visible := true;
                    GFOrange.Visible := true;
                    GFDel.Bitmap.Assign(GFBlue.Bitmap);
                end;
                GREEN:
                begin
                    GFRed   .Visible := true;
                    GFBlue  .Visible := true;
                    GFGreen .Visible := false;
                    GFOrange.Visible := true;
                    GFDel.Bitmap.Assign(GFGreen.Bitmap);
                end;
                ORANGE:
                begin
                    GFRed   .Visible := true;
                    GFBlue  .Visible := true;
                    GFGreen .Visible := true;
                    GFOrange.Visible := false;
                    GFDel.Bitmap.Assign(GFOrange.Bitmap);
				end;
            end;
        end
        else
        begin
            GFDel   .Visible := false;
            GFRe    .Visible := false;

            GFRed   .Visible := true;
            GFBlue  .Visible := true;
            GFGreen .Visible := true;
            GFOrange.Visible := true;
        end;
    end
    else
    begin
        GFDel   .Visible := false;
        GFRe    .Visible := false;

        GFRed   .Visible := true;
        GFBlue  .Visible := true;
        GFGreen .Visible := true;
        GFOrange.Visible := true;

        GFRed   .Enabled := false;
        GFBlue  .Enabled := false;
        GFGreen .Enabled := false;
        GFOrange.Enabled := false;
    end;

end;

//**************************************************************************
//	Proccess  :	グリッドﾎﾟｯﾌﾟｱｯﾌﾟ付箋貼り付けｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(各色)
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.GFRedOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(RED, stCode, '', false) = false then
    begin
        abort;
        exit;
    end;

	FusenDsp(iIndex, stCode, 1);


	if iIndex = PAGE_JITUZAI then
	begin
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(赤)
        jituzai_Fusen1.Visible := true;
	end
	else
	begin
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(赤)
        Goukei_Fusen1.Visible := true;
	end;

end;

procedure TJNTCRP018001f.GFGreenOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(GREEN, stCode, '', false) = false then
    begin
        abort;
        exit;
    end;


	FusenDsp(iIndex, stCode, 1);


	if iIndex = PAGE_JITUZAI then
	begin
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(緑)
        jituzai_Fusen2.Visible := true;
	end
	else
	begin
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(緑)
        Goukei_Fusen2.Visible := true;
	end;

end;

procedure TJNTCRP018001f.GFBlueOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(BLUE, stCode, '', false) = false then
    begin
        abort;
        exit;
    end;

	FusenDsp(iIndex, stCode, 1);


	if iIndex = PAGE_JITUZAI then
	begin
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(青)
        jituzai_Fusen3.Visible := true;

	end
	else
	begin
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(青)
        Goukei_Fusen3.Visible := true;
	end;

end;

procedure TJNTCRP018001f.GFOrangeOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

    if FusenInfoWrite(ORANGE, stCode, '', false) = false then
    begin
        abort;
        exit;
    end;

	FusenDsp(iIndex, stCode, 1);

	if iIndex = PAGE_JITUZAI then
	begin
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(橙)
        jituzai_Fusen4.Visible := true;

	end
	else
	begin
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := '';
//		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := '';
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

        //ｶｰﾄﾞ型付箋セット(橙)
        Goukei_Fusen4.Visible := true;
	end;

end;

procedure TJNTCRP018001f.GFRedOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
 	pCmnt   	:	PFusenCmntRec;  //<271> ADD
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(RED, stCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stCode, 1);


	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= RED;							//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if iIndex = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;

            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(赤)
            jituzai_Fusen1.Visible := true;

		end
		else
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Gou.Items[GHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;

            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(赤)
            Goukei_Fusen1.Visible := true;
		end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.GFGreenOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(GREEN, stCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stCode, 1);


	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init(Self, pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= GREEN;							//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if iIndex = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL            	m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;

            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(緑)
            jituzai_Fusen2.Visible := true;

		end
		else
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Gou.Items[GHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(緑)
            Goukei_Fusen2.Visible := true;
		end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.GFBlueOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    pCmnt       : PFusenCmntRec;  //<271> ADD	    
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(BLUE, stCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stCode, 1);

{	MemPost_Sw := 1;
	if iIndex = PAGE_JITUZAI then
		JHojyoMA_DMemData.Post
	else
		GHojyoMA_DMemData.Post;
	MemPost_Sw := 0;
}
	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= BLUE;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if iIndex = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(青)
            jituzai_Fusen3.Visible := true;

		end
		else
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Gou.Items[GHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(青)
            Goukei_Fusen2.Visible := true;
		end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.GFOrangeOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    pCmnt       : PFusenCmntRec;  //<271> ADD	    
begin
	iIndex := Root_PMTab.Items.Selected;

	if iIndex = PAGE_JITUZAI then
		stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
	else
		stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定

	if FusenInfoWrite(ORANGE, stCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	FusenDsp(iIndex, stCode, 1);

{	MemPost_Sw := 1;
	if iIndex = PAGE_JITUZAI then
		JHojyoMA_DMemData.Post
	else
		GHojyoMA_DMemData.Post;
	MemPost_Sw := 0;
}
	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= ORANGE;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if iIndex = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(橙)
            jituzai_Fusen4.Visible := true;

		end
		else
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := stCode;
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Gou.Items[GHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
            //付箋初期化 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

            //ｶｰﾄﾞ型付箋セット(橙)
            Goukei_Fusen4.Visible := true;
		end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.GFDelClick(Sender: TObject);
var
	iIndex		:	Integer;
	i           :	Integer;
	stCode		:	String;
begin
	iIndex := Root_PMTab.Items.Selected;

	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
	begin
		if iIndex = PAGE_JITUZAI then
			stCode := JHojyoMA_DMemDataGCode.AsString// 検索対象の外部ｺｰﾄﾞ 設定
		else
			stCode := GHojyoMA_DMemDataGCode.AsString;// 検索対象の外部ｺｰﾄﾞ 設定
	end
	else
	begin
		if iIndex = PAGE_JITUZAI then
		begin
			if JHojyoMA_DMemDataGCode.AsString <> '' then
				stCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])// 検索対象の外部ｺｰﾄﾞ 設定
			else
				stCode := '';
		end
		else
		begin
			if GHojyoMA_DMemDataGCode.AsString <> '' then
				stCode := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])// 検索対象の外部ｺｰﾄﾞ 設定
			else
				stCode := '';
		end;
	end;

	if FusenInfaDelete(stCode) = false then
	begin
		abort;
		exit;
	end;

	MemPost_Sw := 1;
	if iIndex = PAGE_JITUZAI then
	begin
		JHojyoMA_DMemData.Edit;
		JHojyoMA_DMemDataFusen.Clear;
		JHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR;
		JHojyoMA_DMemData.Post;

        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
	end
	else
	begin
		GHojyoMA_DMemData.Edit;
		GHojyoMA_DMemDataFusen.Clear;
		GHojyoMA_DMemDataFusenIndex.AsInteger := NOCOLOR;
		GHojyoMA_DMemData.Post;
        //付箋初期化 <101>
        for i := 1 to  4 do
            TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
	end;
	MemPost_Sw := 0;


{	if iIndex = PAGE_JITUZAI then
	begin
		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
		m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
	end
	else
	begin
		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := '';
		m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := '';
	end;
}
end;

// 付箋備考修正イベント
procedure TJNTCRP018001f.GFReClick(Sender: TObject);
var
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	QueryFusen	:	TMQuery;
	iColor		:	Integer;
	sCmnt		:	String;
    pCmnt       :   PFusenCmntRec;  //<271> ADD
begin
	QueryFusen := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 工事付箋情報をGET
			SQL.Add('select FusenKbn from MFusenInfo');
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := m_nMasterDivision;

            if Root_PMTab.Items.Selected = PAGE_JITUZAI then
//<255> DEL    			SetFld('nCODE').AsFloat   := fnGetNCODE(JHojyoMA_DMemDataGCode.AsString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger)
    			SetFld('nCODE').AsString   :=
                    FormatFloat('0',
                    fnGetNCODE(JHojyoMA_DMemDataGCode.AsString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger))  //<255> ADD
            else
//<255> DEL    			SetFld('nCODE').AsFloat   := fnGetNCODE(GHojyoMA_DMemDataGCode.AsString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
    			SetFld('nCODE').AsString   :=
                    FormatFloat('0',
                    fnGetNCODE(GHojyoMA_DMemDataGCode.AsString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));  //<255> ADD
			Open;						// ｸｴﾘの開始

			iColor := GetFld('FusenKbn').AsInteger;
		end;
	finally
		QueryFusen.Free;
	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(資金繰)
	if Root_PMTab.Items.Selected = PAGE_JITUZAI then
    	MasDLGParam.m_iNCode 		:= fnGetNCODE(JHojyoMA_DMemDataGCode.AsString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger)							//
    else
    	MasDLGParam.m_iNCode 		:= fnGetNCODE(GHojyoMA_DMemDataGCode.AsString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= iColor;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := JHojyoMA_DMemDataGCode.AsString;
//<271> DEL    			m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := JHojyoMA_DMemDataGCode.AsString;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end
		else
		begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Code := GHojyoMA_DMemDataGCode.AsString;
//<271> DEL    			m_aCmnt_Gou[GHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Gou.Items[GHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := GHojyoMA_DMemDataGCode.AsString;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();
end;


//**************************************************************************
//	Proccess  :	ツリーﾎﾟｯﾌﾟｱｯﾌﾟ付箋貼り付けｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(各色)
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.TFRedOffClick(Sender: TObject);
var
	iIndex		: Integer;
	NodeSelect	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
    i           : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

//	if PMKasantaikei.Items[8].Checked = false then
//	begin
		if FusenInfoWrite(RED, stWorkRec^.strExCode, '', false) = false then
		begin
			abort;
			exit;
		end;
{	end
	else
	begin
		if FusenInfaDelete(stWorkRec^.strExCode) = false then
		begin
			abort;
			exit;
		end;

		PMKasantaikei.Items[8].Checked := false;
	end;}

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}
		if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := '';
    			pCmnt.Cmnt := '';
//<271> ADD Ed
        end;
	end;

    if BSpeedButtonIS.Caption = '一覧(&T)' then
    begin
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(赤)
            Jituzai_Fusen1.Visible := true;
        end
        else
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(赤)
            Goukei_Fusen1.Visible := true;
        end;
    end;

//	fnCreateAll ();
end;

procedure TJNTCRP018001f.TFGreenOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

//	if PMKasantaikei.Items[9].Checked = false then
//	begin
		if FusenInfoWrite(GREEN, stWorkRec^.strExCode, '', false) = false then
		begin
			abort;
			exit;
		end;
{	end
	else
	begin
		if FusenInfaDelete(stWorkRec^.strExCode) = false then
		begin
			abort;
			exit;
		end;

		PMKasantaikei.Items[9].Checked := false;
	end;}

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);
	
{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}
		if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := '';
    			pCmnt.Cmnt := '';
//<271> ADD Ed
        end;
	end;

    if BSpeedButtonIS.Caption = '一覧(&T)' then
    begin
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(緑)
            Jituzai_Fusen2.Visible := true;
        end
        else
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(緑)
            Goukei_Fusen2.Visible := true;
        end;
    end;

//	fnCreateAll ();
end;

procedure TJNTCRP018001f.TFBlueOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := Root_PMTab.Items.Selected;

//	if PMKasantaikei.Items[10].Checked = false then
//	begin
		if FusenInfoWrite(BLUE, stWorkRec^.strExCode, '', false) = false then
		begin
			abort;
			exit;
		end;
{	end
	else
	begin
		if FusenInfaDelete(stWorkRec^.strExCode) = false then
		begin
			abort;
			exit;
		end;

		PMKasantaikei.Items[10].Checked := false;
	end;}

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);
	
{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}
		if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := '';
    			pCmnt.Cmnt := '';
//<271> ADD Ed
        end;
	end;
    if BSpeedButtonIS.Caption = '一覧(&T)' then
    begin
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(青)
            Jituzai_Fusen3.Visible := true;
        end
        else
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(青)
            Goukei_Fusen3.Visible := true;
        end;
    end;

//	fnCreateAll ();

end;

procedure TJNTCRP018001f.TFOrangeOffClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
    i           : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD	    
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

//	if PMKasantaikei.Items[11].Checked = false then
//	begin
		if FusenInfoWrite(ORANGE, stWorkRec^.strExCode, '', false) = false then
		begin
			abort;
			exit;
		end;
{	end
	else
	begin
		if FusenInfaDelete(stWorkRec^.strExCode) = false then
		begin
			abort;
			exit;
		end;

		PMKasantaikei.Items[11].Checked := false;
	end;}

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);
	
{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}
		if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := '';
    			pCmnt.Cmnt := '';
//<271> ADD Ed
        end;
	end;
    if BSpeedButtonIS.Caption = '一覧(&T)' then
    begin
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(黄)
            Jituzai_Fusen4.Visible := true;
        end
        else
        begin
            //ｶｰﾄﾞ型付箋 <101>
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
            //ｶｰﾄﾞ型付箋セット(黄)
            Goukei_Fusen4.Visible := true;
        end;
    end;

//	fnCreateAll ();
end;

procedure TJNTCRP018001f.TFRedOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfoWrite(RED, stWorkRec^.strExCode, '', true) = false then
	begin
		abort;
		exit;
	end;
	
	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);
	
{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= RED;							//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if stWorkRec^.nDivision = 0 then
		begin
    		if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stWorkRec^.strExCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end;

        if BSpeedButtonIS.Caption = '一覧(&T)' then
        begin
            if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(赤)
                Jituzai_Fusen1.Visible := true;
            end
            else
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(赤)
                Goukei_Fusen1.Visible := true;
            end;
        end;

	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.TFGreenOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfoWrite(GREEN, stWorkRec^.strExCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= GREEN;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if stWorkRec^.nDivision = 0 then
		begin
    		if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stWorkRec^.strExCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end;
        if BSpeedButtonIS.Caption = '一覧(&T)' then
        begin
            if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(緑)
                Jituzai_Fusen2.Visible := true;
            end
            else
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(緑)
                Goukei_Fusen2.Visible := true;
            end;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.TFBlueOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := Root_PMTab.Items.Selected;

	if FusenInfoWrite(BLUE, stWorkRec^.strExCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= BLUE;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if stWorkRec^.nDivision = 0 then
		begin
    		if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stWorkRec^.strExCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end;
        if BSpeedButtonIS.Caption = '一覧(&T)' then
        begin
            if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(青)
                Jituzai_Fusen3.Visible := true;
            end
            else
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(青)
                Goukei_Fusen3.Visible := true;
            end;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.TFOrangeOnClick(Sender: TObject);
var
	iIndex		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	sCmnt		:	String;
    i : Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfoWrite(ORANGE, stWorkRec^.strExCode, '', true) = false then
	begin
		abort;
		exit;
	end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= fnGetNCODE(stWorkRec^.strExCode,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger);							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= ORANGE;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if stWorkRec^.nDivision = 0 then
		begin
    		if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stWorkRec^.strExCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end;
        if BSpeedButtonIS.Caption = '一覧(&T)' then
        begin
            if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(黄)
                Jituzai_Fusen4.Visible := true;
            end
            else
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット(黄)
                Goukei_Fusen4.Visible := true;
            end;
        end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();

end;

procedure TJNTCRP018001f.TFDelClick(Sender: TObject);
var
	iIndex		:  Integer;
	NodeSelect	:  TTreeNode;
	stWorkRec	:  ^TreeViewRec;
    i           :  Integer;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	iIndex := stWorkRec^.nDivision;

	if FusenInfaDelete(stWorkRec^.strExCode) = false then
	begin
		abort;
	end;

	if stWorkRec^.nDivision = 0 then
	begin
		FusenDsp(iIndex, stWorkRec^.strExCode, 1);

{		if BSpeedButtonIS.Caption = '詳細(&T)' then
		begin
			MemPost_Sw := 1;
			JHojyoMA_DMemData.Post;
			MemPost_Sw := 0;
		end;
}
		if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := '';
//<271> DEL            m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := '';
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := '';
    			pCmnt.Cmnt := '';
//<271> ADD Ed
        end;

	end;

    //ｶｰﾄﾞ型付箋 <101>
    if BSpeedButtonIS.Caption = '一覧(&T)' then
    begin
        if Root_PMTab.Items.Selected = PAGE_JITUZAI then
        begin
            //付箋初期化
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
        end
        else
        begin
            for i := 1 to  4 do
                TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

        end;
    end;

//	fnCreateAll ();
end;

// 付箋備考
procedure TJNTCRP018001f.TFReClick(Sender: TObject);
var
	MasDLGParam	:	TJNTMasDLGParam;
	Fusen		:	TJNTMASFUSENBIKODLGIF;
	QueryFusen	:	TMQuery;
	iColor		:	Integer;
	NodeSelect	:	TTreeNode;
	stWorkRec	:	^TreeViewRec;
	sCmnt		:	String;
    pCmnt       : PFusenCmntRec;  //<271> ADD
begin
	NodeSelect := m_cNodeRightClk;
	stWorkRec := NodeSelect.Data;

	QueryFusen := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

	try
		with QueryFusen do
		begin
			Close;

			SQL.Clear;							// ｸｴﾘの初期化
			// 工事付箋情報をGET
			SQL.Add('select FusenKbn from MFusenInfo');
			SQL.Add('where MasterKbn=:pMKBN AND NCode=:NCode');
			SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL			SetFld('Ncode').AsFloat   := stWorkRec^.iNCode;// 検索対象の外部ｺｰﾄﾞ 設定
			SetFld('Ncode').AsString   := FormatFloat('0',stWorkRec^.iNCode);// 検索対象の外部ｺｰﾄﾞ 設定 <255> ADD

			Open;						// ｸｴﾘの開始

			iColor := GetFld('FusenKbn').AsInteger;
		end;
	finally
		QueryFusen.Free;
	end;

	//	付箋備考ﾀﾞｲｱﾛｸﾞ表示
	Fusen := TJNTMASFUSENBIKODLGIF.Create();
	Fusen.Init( Self,pointer ( m_pMyAppRecord ) );
	MasDLGParam					:= TJNTMasDLGParam.CreateParam();
	MasDLGParam.m_iMasterkbn	:= m_nMasterDivision;							//	ﾏｽﾀ区分(工事)
	MasDLGParam.m_iNCode 		:= stWorkRec^.iNCode;							//	科目ｺｰﾄﾞ
	MasDLGParam.m_iSubNCode		:= 0;							//	科目別補助ｺｰﾄﾞ
	MasDLGParam.m_iFusenKbn		:= iColor;						//	付箋区分
	MasDLGParam.m_pApRec		:= pointer( m_pMyAppRecord );	//	ApRecのポインタ
	Fusen.DoDlg(MasDLGParam);
	sCmnt := MasDLGParam.m_sCmnt;
	if MasDLGParam.m_MasDLGResult <> mrCancel then
	begin
		if stWorkRec^.nDivision = 0 then
		begin
   			if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Code := stWorkRec^.strExCode;
//<271> DEL                m_aCmnt_Jitu[JHojyoMA_DMemData.RecNo-1].Cmnt := sCmnt;
//<271> ADD St
                pCmnt := m_aCmnt_Jitu.Items[JHojyoMA_DMemData.RecNo-1];
    			pCmnt.Code := stWorkRec^.strExCode;
    			pCmnt.Cmnt := sCmnt;
//<271> ADD Ed
            end;
		end;
	end;
	MasDLGParam.Free();
	Fusen.Term();
	Fusen.Free();
end;

//**************************************************************************
//	Proccess  :	加算体系用DB書込みｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.WriteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode; NodeTarget : TTreeNode): Boolean;
var
	QueryWrite		:	TMQuery;
	QueryTree		:	TMQuery;
	stWorkRecOya	:	^TreeViewRec;
	stWorkRecKo		:	^TreeViewRec;
	stWorkRecTarget	:	^TreeViewRec;
	iMaxEntNo		:	Integer;
	iWkEntNo1		:	Integer;
	iWkEntNo2		:	Integer;
begin
	stWorkRecOya := NodeOya.Data;
	stWorkRecKo := NodeKo.Data;
	if NodeTarget <> nil Then
		stWorkRecTarget := NodeTarget.Data
	else
		stWorkRecTarget := nil;

//	if stWorkRecOya^.prmSumKbn = 9 then						// ’資金繰加算体系’の場合は加算体系には更新しない
//		exit;

	QueryWrite := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryWrite);
	QueryTree := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryTree);

	MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	try
		with QueryWrite do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			if stWorkRecTarget^.nDivision = 0 then
			begin
				// ターゲットノード
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
				SQL.Add('order by EntNo DESC');
				SetFld('pMKBN').AsInteger  := m_nMasterDivision;
//<255> MOD St
//				SetFld('stSum').AsFloat    := stWorkRecOya^.InCode;
//				SetFld('stBased').AsFloat  := stWorkRecTarget^.Incode;
				SetFld('stSum').AsString    := FormatFloat('0',stWorkRecOya^.InCode);
				SetFld('stBased').AsString  := FormatFloat('0',stWorkRecTarget^.Incode);
//<255> MOD Ed
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//				SetFld('stBased').AsString := stWorkRecTarget^.strExCode;

				Open;

				iWkEntNo1 := QueryWrite.GetFld('EntNo').AsInteger;

				// ターゲットノードの上のノード
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND EntNo<:iEnt');
				SQL.Add('order by EntNo DESC');
				SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//<255> DEL				SetFld('stSum').AsFloat := stWorkRecOya^.InCode;
				SetFld('stSum').AsString := FormatFloat('0',stWorkRecOya^.InCode);  //<255> ADD
				SetFld('iEnt').AsInteger := iWkEntNo1;

				Open;

				if EOF <> true then
					iWkEntNo2 := QueryWrite.GetFld('EntNo').AsInteger
				else
					iWkEntNo2 := 0;

				// 登録NOを求める
				iMaxEntNo := (iWkEntNo1 + iWkEntNo2) div 2;

				if iMaxEntNo = iWkEntNo2 then
				begin
					if AgainEntNoSet (stWorkRecTarget^.InCode) = false then				// 登録ＮＯ再編成処理
					begin
						result := false;
						abort;
						exit;
					end;

					// ターゲットノード
					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
					SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
					SQL.Add('order by EntNo DESC');
    				SetFld('pMKBN').AsInteger  := m_nMasterDivision;
//<255> MOD St
//					SetFld('stSum').AsFloat    := stWorkRecOya^.InCode;
//					SetFld('stBased').AsFloat  := stWorkRecTarget^.InCode;
					SetFld('stSum').AsString    := FormatFloat('0',stWorkRecOya^.InCode);
					SetFld('stBased').AsString  := FormatFloat('0',stWorkRecTarget^.InCode);
//<255> MOD Ed
//					SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//					SetFld('stBased').AsString := stWorkRecTarget^.strExCode;

					Open;

					iWkEntNo1 := QueryWrite.GetFld('EntNo').AsInteger;

					// ターゲットノードの上のノード
					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
					SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND EntNo<:iEnt');
					SQL.Add('order by EntNo DESC');
    				SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL					SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
					SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);  //<255> ADD
//					SetFld('stSum').AsString := stWorkRecOya^.strExCode;
					SetFld('iEnt').AsInteger := iWkEntNo1;

					Open;

					if EOF <> true then
						iWkEntNo2 := QueryWrite.GetFld('EntNo').AsInteger
					else
						iWkEntNo2 := 0;

					// 登録NOを求める
					iMaxEntNo := (iWkEntNo1 + iWkEntNo2) div 2;
				end;
			end
			else									// ターゲットが合計
			begin
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				SQL.Add('select MasterKbn, SumNCode, EntNo, BasedNCode, AddKbn from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum');
				SQL.Add('order by EntNo DESC');
				SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> DEL				SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
				SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);  //<255> ADD
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
				Open;

				if EOF = false then
				begin
					iWkEntNo2 := GetFld('EntNo').AsInteger;
					// 登録NOを求める
					iMaxEntNo := iWkEntNo2 + 100;
				end
				else
				begin
					// 登録NOを求める
					iMaxEntNo := 100;
				end;
			end;

			// 工事をDBにWriteする
			Close;
			SQL.Clear;							// ｸｴﾘの初期化
			// 挿入ｸｴﾘの作成
			SQL.Add('insert into HojyoTree');
			SQL.Add('(MasterKbn, PatternNo, SumNCode, EntNo, BasedNCode, AddKbn, ');
			SQL.Add('UpdTantoNCode) '); // <202>
			SQL.Add('values (:iMasterKbn, 0, :stSumCode, :iEntNo, :stBasedCode, :iAddKbn, ');
			SQL.Add(':iUpdTantoNCode) '); // <202>

			// マスター区分
			SetFld('iMasterKbn').AsInteger := m_nMasterDivision;
			// 加算先外部ｺｰﾄﾞ
			SetFld('stSumCode').AsFloat := stWorkRecOya^.InCODE;
//			SetFld('stSumCode').AsString := stWorkRecOya^.strExCode;
//            showmessage('加算先コード'+IntToStr(stWorkRecOya^.prmCode));
			// 登録NO
			SetFld('iEntNo').AsInteger := iMaxEntNo;
//            showmessage('登録NO'+IntToStr(iMaxEntNo));
			// 加算元外部ｺｰﾄﾞ
			SetFld('stBasedCode').AsFloat := stWorkRecKo^.InCode;
//			SetFld('stBasedCode').AsString := stWorkRecKo^.strExCode;
//            showmessage('加算元コード'+IntToStr(stWorkRecKo^.prmCode));
			// 加算区分
			SetFld('iAddKbn').AsInteger := 0;
			// 更新担当者内部ｺｰﾄﾞ<202>
            SetFld('iUpdTantoNCode').AsFloat  := m_TantoNCode;

			// DB更新
			if (ExecSQL = false) then
			begin
				ErrorMessageDsp(QueryWrite);
				MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
				QueryWrite.Close;
//				QueryWrite.Free;
				result := false;
				Exit;
			end;

			MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

			gbHojyoTree2Flag	:=	true;	// 加算体系２更新ﾌﾗｸﾞＯＮ
		end;
	finally
		QueryWrite.Free;
		QueryTree.Free;
	end;

	result := true;
end;

//**************************************************************************
//	Proccess  :	加算体系ﾚｺｰﾄﾞ削除ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.DeleteHOJYOTREE(NodeOya : TTreeNode; NodeKo : TTreeNode): Boolean;
var
	QueryWrite	:	TMQuery;
	stWorkRecOya:	^TreeViewRec;
	stWorkRecKo	:	^TreeViewRec;
begin
	stWorkRecOya := NodeOya.Data;
	stWorkRecKo := NodeKo.Data;

//	if stWorkRecOya^.prmSumKbn = 9 then						// ’資金繰加算体系’の場合は加算体系には更新しない
//		exit;

	QueryWrite := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryWrite);

	MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	try
		with QueryWrite do
		begin
			Close;
			SQL.Clear;							// ｸｴﾘの初期化

			// ﾃﾞｰﾀ存在確認
//<255> DEL			SQL.Add('select * from HojyoTree');
			SQL.Add('select EntNo from HojyoTree');  //<255> ADD
			SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
//          SQL.Add('order by EntNo DESC');
			SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> MOD St
//			SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
//			SetFld('stBased').AsFloat := stWorkRecKo^.InCode;
			SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);
			SetFld('stBased').AsString := FormatFloat('0',stWorkRecKo^.InCode);
//<255> MOD Ed
//			SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//			SetFld('stBased').AsString := stWorkRecKo^.strExCode;
//			ShowMessage(IntToStr(stWorkRecOya^.prmCode)+'親');
//			ShowMessage(IntToStr(stWorkRecKo^.prmCode)+'子');

			Open;

			if EOF = false then
			begin
				// 加算体系の該当ﾚｺｰﾄﾞを削除する
//				ShowMessage('加算体系の該当ﾚｺｰﾄﾞあり');
				Close;
				SQL.Clear;							// ｸｴﾘの初期化
				// 挿入ｸｴﾘの作成
				SQL.Add('delete from HojyoTree');
				SQL.Add('where MasterKbn=:pMKBN AND SumNCode=:stSum AND BasedNCode=:stBased');
    			SetFld('pMKBN').AsInteger := m_nMasterDivision;
//<255> MOD St
//				SetFld('stSum').AsFloat   := stWorkRecOya^.InCode;
//				SetFld('stBased').AsFloat := stWorkRecKo^.InCode;
				SetFld('stSum').AsString   := FormatFloat('0',stWorkRecOya^.InCode);
				SetFld('stBased').AsString := FormatFloat('0',stWorkRecKo^.InCode);
//<255> MOD Ed
//				SetFld('stSum').AsString := stWorkRecOya^.strExCode;
//				SetFld('stBased').AsString := stWorkRecKo^.strExCode;

				// DB更新
				if (ExecSQL = false) then
				begin
					ErrorMessageDsp(QueryWrite);
					MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					QueryWrite.Close;
//					QueryWrite.Free;
					result := false;
					Exit;
				end;

				MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

				gbHojyoTreeDelFlag	:= true;					// 削除ﾌﾗｸﾞ
				gbHojyoTree2Flag	:= true;	// 加算体系２更新ﾌﾗｸﾞＯＮ
			end;
		end;
	finally
		QueryWrite.Free;
	end;

	result := true;
end;

//**************************************************************************
//	Proccess  :	削除ﾎﾞﾀﾝｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 09
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonDelClick(Sender: TObject);
var
	stCode			: String;
	iIndex			: Integer;
	NodeSelect  	: TTreeNode;
	NodeOya			: TTreeNode;
	stWorkRecSelect	: ^TreeViewRec;
	stWorkRecOya	: ^TreeViewRec;
	iRet			: Integer;
	stName			: String;
	iSumKbn			: Integer;
    stWorkRecSelect_Dummy :   TreeViewRec;       // <KSN> ADD
    stWorkRecOya_Dummy	:   TreeViewRec;         // <KSN> ADD
begin
//<KSN> ADD St
    NodeSelect := nil;
    NodeOya := nil;
    stWorkRecSelect := nil;
    stWorkRecOya := nil;
//<KSN> ADD Ed

// <203> ADD start
   	SessionPractice(C_ST_PROCESS);
   	try
// <203> ADD end

	if ( m_fSystemClear ) then
	begin
		m_fSystemClear := false;

// <291> MOD st
//		if ( MJSMessageBoxEx (Self,'加算情報を消去します。'#13#10'再登録後はマスタ更新処理を行って下さい。',
		if ( MJSMessageBoxEx (Self,'加算情報を消去します。'#13#10'再登録後はマスター更新処理を行って下さい。',
// <291> MOD ed
								'警告', mjWarning, mjOkCancel, mjDefCancel, false) = mrCancel ) then
			Exit;

        // 加算体系の削除(HojyoTree, HojyoTree2)
		if ( not fnClearAllSystems () ) then
			Exit;

		// TreeView 作成
		fnRebuildTreeViewItems ();

		// TreeView はぐれ作成
		if ( fnRebuildTreeViewItemsHagure () = false ) then
		begin
			MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			Exit;
		end;

		// Grid 初期表示
		TBaseNode	:= VTreeView.Items[0];
		TBaseNodeSv	:= VTreeView.Items[0];

        // 実在Grid
		iSumKbn := 0;
		fnCreateGrid (TBaseNode, iSumKbn);
		if ( JHojyoMA_DMemData.Eof = false ) then
		begin
			JHojyoMA_DMemData.First;
			fnCreateCard ( iSumKbn );
		end
		else
        begin
			fnClearCard ( iSumKbn );
        end;
        // 合計Grid
		iSumKbn	:= 1;
		fnCreateGrid (TBaseNode, iSumKbn);
		if ( GHojyoMA_DMemData.Eof = false ) then
		begin
			GHojyoMA_DMemData.First;
			fnCreateCard ( iSumKbn );
		end
		else
        begin
			fnClearCard ( iSumKbn );
        end;

		Exit;
	end;

	if ( m_AcControl = Jituzai_ETEdit_GCode ) or
	   ( m_AcControl = Jituzai_ENEdit_GCode ) or
	   ( m_AcControl = Goukei_ETEdit_GCode  ) or
	   ( m_AcControl = Goukei_ENEdit_GCode  ) then Exit;

    // ActiveなTabを取得
	iIndex := Root_PMTab.Items.Selected;

	if ( m_AcControl = VTreeView ) then
	begin
		NodeSelect      := VTreeView.Selected;
		stWorkRecSelect := NodeSelect.Data;
		stCode          := stWorkRecSelect.strExCode;
		stName          := stWorkRecSelect.strName;
	end
	else
	begin
		if ( BSpeedButtonIS.Caption = '詳細(&T)' ) then
		begin
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			begin
				if ( iIndex = PAGE_GOKEI ) then
				begin
					stCode := GHojyoMA_DMemDataGCode.AsString;
					stName := GHojyoMA_DMemDataSimpleName.AsString;
				end
				else
				begin
					stCode := JHojyoMA_DMemDataGCode.AsString;
					stName := JHojyoMA_DMemDataSimpleName.AsString;
				end;
			end
			else
			begin
				if ( iIndex = PAGE_GOKEI ) then
				begin
					if ( GHojyoMA_DMemDataGCode.AsString <> '' ) then
    						stCode := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
					else    stCode := '';

					stName := GHojyoMA_DMemDataSimpleName.AsString;
				end
				else
				begin
					if ( JHojyoMA_DMemDataGCode.AsString <> '' ) then
						    stCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
					else    stCode := '';

					stName := JHojyoMA_DMemDataSimpleName.AsString;
				end;
			end;
		end
		else
		begin
			if ( iIndex = PAGE_GOKEI ) then
			begin
				if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
    					stCode := Goukei_ETEdit_GCode.Text
				else    stCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

				stName := Goukei_ETEdit_SimpleName.Text;
			end
			else
			begin
				if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
    					stCode := Jituzai_ETEdit_GCode.Text
				else    stCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

				stName := Jituzai_ETEdit_SimpleName.Text;
			end;
		end;
	end;

	if ( stCode = '' ) then Exit;
//<KSN> ADD St
    if PPanelTree.Visible = False then
    begin
        if iIndex = PAGE_GOKEI then
            stWorkRecSelect_Dummy.nDivision := 1
        else
            stWorkRecSelect_Dummy.nDivision := 0;

        stWorkRecSelect_Dummy.strExCode := stCode;
        stWorkRecSelect_Dummy.strName := stName;
        stWorkRecSelect := @stWorkRecSelect_Dummy;

        stWorkRecOya_Dummy.nDivision := 0;
        stWorkRecOya_Dummy.strExCode := stCode;
        stWorkRecOya_Dummy.strName := stName;
        stWorkRecOya := @stWorkRecOya_Dummy;
    end;
//<KSN> ADD Ed
// <127>↓
//  iRet := MjsMessageBoxEX(Self,''''+stName+''''+'を削除します。よろしいですか？','削除',mjQuestion,mjYesNo,mjDefNo);
    iRet := MjsMessageBoxEX(Self, MSG_DELETE ,'削除',mjQuestion,mjYesNo,mjDefNo);
// <127>↑
	if ( iRet <> mrYes ) then Exit;

    // 削除ﾌﾗｸﾞON
	m_fDel := 1;

    if PPanelTree.Visible then  //<KSN> ADD
    begin                       //<KSN> ADD
        NodeSelect      := VTreeView.Selected;
        stWorkRecSelect := NodeSelect.Data;
        if ( stWorkRecSelect^.nDivision = 0 ) then
                NodeOya := NodeSelect.Parent
        else    NodeOya := NodeSelect;
        //<289-1>追加↓
        // 「m_AcControl」がツリーの場合、上記「if stWorkRecSelect^.nDivision = 0 then」の判定だと
        // 統合工事（nDivision = 1）の親が統合工事の場合、親の情報が取得できない。
        // そのため、加算体系の削除が行われない（対象データなしとなる）。
        // 「m_AcControl」がツリーのときは親情報をセットするようにする。
        // 「総合計工事」を選択時は削除が有効にならないため問題なし。
        if m_AcControl = VTreeView then
        begin
            NodeOya := NodeSelect.Parent;
        end;
        // 「m_AcControl」がツリーのときに削除した場合、この判定は必ずTrueになる
        // 「stCode」をVTreeView.Selectedから設定
        //<289-1>追加↑

        if ( stWorkRecSelect^.strExCode <> stCode ) then
        begin
            NodeSelect  := NodeOya.getFirstChild;
            while ( NodeSelect<> nil ) do
            begin
                stWorkRecSelect := NodeSelect.Data;
                if ( stWorkRecSelect^.strExCode = stCode ) then
                begin
                    NodeOya := NodeSelect.Parent;
                    break;
                end;

                NodeSelect := NodeSelect.GetNext;
            end;
        end;

        stWorkRecSelect := NodeSelect.Data;
        stWorkRecOya    := NodeOya.Data;
    end;  //<KSN> ADD

    // ﾂﾘｰ内に一件のみの時は削除
	if ( NodeSearch(stWorkRecSelect^, stWorkRecOya^) <= 1 ) then
	begin
		// 工事削除
		if ( fnDataDelete (stWorkRecSelect^.strExCode, stWorkRecSelect^.nDivision) = false ) then
		begin
            // 削除ﾌﾗｸﾞOFF
			m_fDel := 0;
			Abort;
			Exit;
		end;
	end
    // 一件以上存在する場合は加算体系のみ削除
	else
	begin
        if PPanelTree.Visible then  //<KSN> ADD
        begin                       //<KSN> ADD
            // 加算体系削除
            if ( DeleteHOJYOTREE(NodeOya, NodeSelect) = false ) then
            begin
                // 削除ﾌﾗｸﾞOFF
                m_fDel := 0;
                Abort;
                Exit;
            end;
//<KSN> ADD St
        end
        else
        begin
            MjsMessageBoxEx(Self, '加算体系が複数存在します。先に加算体系を削除してください。', '確認', mjInformation, mjOk, mjDefOk);
            m_fDel := 0;							   // 削除ﾌﾗｸﾞ初期化
            Exit;
        end;
//<KSN> ADD Ed
	end;

    // 詳細の時のみ
	if ( BSpeedButtonIS.Caption <> '詳細(&T)' ) then
	begin
		if ( iIndex = PAGE_GOKEI ) then
			    fnClearCard (1)
		else    fnClearCard (0);
	end;

	// Node自体を削除
    if PPanelTree.Visible then  //<KSN> ADD
	    NodeSelect.Delete;
    // <289-2>追加修正↓
    MakeNodeDelete(NodeOya, stWorkRecSelect^.strExCode, stWorkRecOya^.strExCode);
    // <289-2>追加修正↑
	gbTreeClick := false;
    // Memdata PostﾌﾗｸﾞON
	MemPost_Sw  := 1;

	if ( BSpeedButtonIS.Caption <> '詳細(&T)' ) then
	begin
        // 合計ﾀﾌﾞ
		if ( Root_PMTab.Items.Selected = PAGE_GOKEI ) then
		begin
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
				    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
			else    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
		end
		else
		begin
			if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
				    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
			else    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
		end;

        // Memdata PostﾌﾗｸﾞOFF
		MemPost_Sw := 0;
        // 削除ﾌﾗｸﾞOFF
		m_fDel     := 0;
		Exit;
	end
	else
	begin
		// Grid再表示
		fnCreateAll ();

        // 合計ﾀﾌﾞ
		if ( iIndex = PAGE_GOKEI ) then
		begin
			if ( GHojyoMA_DMemData.FieldByName('GCode').IsNull ) then
			begin
				BSpeedButtonDel.Enabled := false;
				btnFusenCtl.Enabled     := false;
				LVStyleBar.Enabled      := false;
			end
			else
			begin
                // 削除権限を考慮する
				BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
				btnFusenCtl.Enabled     := m_cJNTArea.IsFusen;
				LVStyleBar.Enabled      := m_cJNTArea.IsFusen;
			end;
		end
        // 実在ﾀﾌﾞ
		else
		begin
			if ( JHojyoMA_DMemData.RecordCount = 0 ) then
			begin
				BSpeedButtonDel.Enabled := false;
				btnFusenCtl.Enabled     := false;
				LVStyleBar.Enabled      := false;
			end
			else
			begin
                // 削除権限を考慮する
                if ( m_cJNTArea.IsDelete = false ) then
					BSpeedButtonDel.Enabled := false
                else
                begin
                    if ( JHojyoMA_DMemData.FieldByName('Syokuchikbn').AsInteger = 1 ) then
                    begin
                        BSpeedButtonDel.Enabled := fnRecordCount();
                        btnFusenCtl.Enabled     := m_cJNTArea.IsFusen;
                        LVStyleBar.Enabled      := m_cJNTArea.IsFusen;
                    end
                    else
                    begin
                        if ( JHojyoMA_DMemData.FieldByName('GCode').IsNull ) then
                        begin
                            BSpeedButtonDel.Enabled := false;
                            btnFusenCtl.Enabled     := false;
                            LVStyleBar.Enabled      := false;
                        end
                        else
                        begin
// <137>↓
//                          BSpeedButtonDel.Enabled
//                              := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttr.AsInteger));
                            BSpeedButtonDel.Enabled
                                := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));
// <137>↑
                            btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
                            LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
                        end;
                    end;
                end;
			end;
		end;
	end;
// <KSN> DEL St   finallyに移動
{
    // Memdata PostﾌﾗｸﾞOFF
	MemPost_Sw := 0;
    // 削除ﾌﾗｸﾞOFF
	m_fDel := 0;

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF
}
// <KSN> DEL Ed
// <203> ADD start
	finally
//<KSN> ADD St
	MemPost_Sw := 0;
    // 削除ﾌﾗｸﾞOFF
	m_fDel := 0;

    m_EdtSw := false;                       // 変更ﾌﾗｸﾞOFF
//<KSN> ADD Ed
    	SessionPractice(C_ED_PROCESS);
    end;
// <203> ADD end

end;

//**************************************************************************
//	Proccess  :	DELETEﾎﾞﾀﾝマウスダウンｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2004/ 06 / 25
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonDelMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	m_fSystemClear	:= false;

	if	(ssShift in Shift) then
		m_fSystemClear	:= true;
end;

//**************************************************************************
//	Proccess  :	工事加算体系クリア処理
//	Name	  :	N.Nabe
//	Date	  :	2004/ 06 / 25
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnClearAllSystems(): Boolean;
var
	dqMasterTree: TMQuery;
begin
{	if	(m_pExpModule.SetExcept (ueCop, m_pMyAppRecord^.m_iSystemCode,
										m_pMyAppRecord^.m_iOptionCode,
										m_pMyAppRecord^.m_iCorpCode,
										m_pMyAppRecord^.m_iCorpSubCode,
										m_pMyAppRecord^.m_iProgramCode, 0) <> 0) then
	begin
		Beep ();

		MJSMessageBoxEx (Self,'会社単独処理の設定を行うことができませんでした。',
														m_pMyAppRecord^.m_ProgramName, mjError, mjOk, mjDefOk, false);

		Result	:= false;
		Exit;
	end;
}
	MDataModule^.BeginTran (dbCorp_Select);												// ﾄﾗﾝｻﾞｸｼｮﾝの開始

	dqMasterTree	:= TMQuery.Create (Self);									// MQueryの構築

	MDataModule^.SetDBInfoToQuery (dbCorp_Select, dqMasterTree);							// DBとMQueryの接続

	with (dqMasterTree) do
	begin
		Close ();

		SQL.Clear ();
		SQL.Add   ('DELETE FROM HojyoTree WHERE MasterKbn = :pMKBN');
		SetFld('pMKBN').AsInteger	    := m_nMasterDivision;

		if (ExecSQL = false) then
		begin
			ErrorMessageDsp(dqMasterTree);
			MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			dqMasterTree.Close;
			dqMasterTree.Free;
			result := false;
			Exit;
		end;

		Close ();
		SQL.Clear ();
		SQL.Add   ('DELETE FROM HojyoTree2 WHERE MasterKbn = :pMKBN');
		SetFld('pMKBN').AsInteger	    := m_nMasterDivision;

		if (ExecSQL = false) then
		begin
			ErrorMessageDsp(dqMasterTree);
			MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			dqMasterTree.Close;
			dqMasterTree.Free;
			result := false;
			Exit;
		end;

		gbHojyoTreeDelFlag	:= true;	// 削除ﾌﾗｸﾞ
		gbHojyoTree2Flag	:= true;	// 加算体系２更新ﾌﾗｸﾞＯＮ
	end;

	MDataModule^.Commit (dbCorp_Select);													// ｺﾐｯﾄ(反映)

	dqMasterTree.Close ();
	dqMasterTree.Free  ();

{	m_pExpModule.ResetExcept (ueCop, m_pMyAppRecord^.m_iSystemCode,
									 m_pMyAppRecord^.m_iOptionCode,
									 m_pMyAppRecord^.m_iCorpCode,
									 m_pMyAppRecord^.m_iCorpSubCode,
									 m_pMyAppRecord^.m_iProgramCode, 0);
}
	Result	:= true;
end;

//**************************************************************************
//	Proccess  :	SORTﾎﾞﾀﾝｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2003/ 05 / 14
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonSortClick(Sender: TObject);
var
	iRet		: Integer;
	iEntNo		: Integer;
	QueryRead	: TMQuery;
	QueryWrite	: TMQuery;
	sSvSumCode	: Integer;
	iCount		: Integer;
	stName		: String;
//<265>↓↓Add
    iCodeDigit  : Integer;      // ｺｰﾄﾞ桁数
    iCodeAttr   : Integer;      // ｺｰﾄﾞ属性[0:数字, 1:数字(前ｾﾞﾛあり), 2:ﾌﾘｰ]
    iLCnt       : Integer;      // ﾙｰﾌﾟ変数
    bChkFileFlg : Boolean;      // ﾌｧｲﾙﾁｪｯｸﾌﾗｸﾞ[True=OK, False=NG]
    bChkErrFlg  : Boolean;      // ﾊﾟﾗﾒｰﾀﾁｪｯｸﾌﾗｸﾞ[True=OK, False=NG]
    iChkSKeyFlg : Integer;      // ｿｰﾄｷｰ使用ﾁｪｯｸﾌﾗｸﾞ[0:未使用, 1:ｿｰﾄｷｰ1のみ使用, 2:ｿｰﾄｷｰ2まで使用, 3:ｿｰﾄｷｰ3まで使用]
    sSKey       : String;       // ｿｰﾄｷｰ
//<265>↑↑
begin

    sSvSumCode      :=  0;
	QueryRead		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);
	QueryWrite		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryWrite);
	iEntNo := 100;
//<265>↓↓Add
//    iChkSKeyFlg := 0;
    iCodeDigit := 0;
    iCodeAttr := 0;
//<265>↑↑

    try

		SessionPractice(C_ST_PROCESS);			// <203> ADD

        // ﾏｽﾀ基本情報読み込み
		QueryRead.Close();
		QueryRead.SQL.Clear();
//<265>↓↓ｺｰﾄﾞ桁数、ｺｰﾄﾞ属性も取得
//		QueryRead.SQL.Add('select UseKbn, JHojyoName from MasterInfo ');
		QueryRead.SQL.Add('select UseKbn, JHojyoName, CodeDigit, CodeAttr from MasterInfo ');
//<265>↑↑
		QueryRead.SQL.Add('where MasterKbn = :pMKBN ');
        QueryRead.ParamByName('pMKBN').AsInteger := m_nMasterDivision;
		QueryRead.Open();

		if ( QueryRead.Eof = false ) then
		begin
			stName := QueryRead.GetFld('JHojyoName').AsString;
			stName := Trim(stName);
//<265>↓↓Add
            iCodeDigit := QueryRead.GetFld('CodeDigit').AsInteger;      // ｺｰﾄﾞ桁数
            iCodeAttr := QueryRead.GetFld('CodeAttr').AsInteger;        // ｺｰﾄﾞ属性
//<265>↑↑
		end;

//<265>↓↓
		if ( stName = '' ) then
//			stName := '工事';
			stName := '工事コード昇順で'
        else
            stName := stName + 'コード昇順で';

        // APGﾌｧｲﾙの設定有無をﾁｪｯｸ
        bChkFileFlg := False;
// <277> MOD st 引数追加		if fnParaFileRead() then
		if fnParaFileRead(GETKBN_SORTKEY) then	// <277> MOD ed
        begin
            if not ((m_ArySortInfo[0].iSortOrder = 9) and (m_ArySortInfo[0].iKetaStart = 0) and (m_ArySortInfo[0].iKetaEnd = 0)) then
            begin
                bChkFileFlg := True;        // APGﾌｧｲﾙの設定あり
                stName := '';
            end;
        end;
//<265>↑↑

//<MLXDEP>
		if (TMSeries.IsMjsLink3) then
		begin
			iRet :=	mrYes;
		end else begin
//<MLXDEP>

		iRet := MjsMessageBoxEX(Self,
//<265>↓↓
//                                stName + 'コード昇順で並び替えを行います。よろしいですか？',
                                stName + '並び替えを行います。よろしいですか？',
//<265>↑↑
                                '並び替え',
                                mjQuestion,
                                mjYesNo,
                                mjDefYes);
		end;   //<MLXDEP>


		if ( iRet = mrYes ) then
		begin
            // ﾄﾗﾝｻﾞｸｼｮﾝの開始
			MDataModule^.BeginTran ( dbCorp_Select );

			ProgressBar1.Visible := true;
			ProgressBar1.Height  := Trunc(9   * m_Zoom / 100);
			ProgressBar1.Left    := Trunc(8   * m_Zoom / 100);
			ProgressBar1.Width   := Trunc(273 * m_Zoom / 100);
			ProgressBar1.Top     := SStatusBar.Top + 6;

			// 加算体系更新下準備
			QueryWrite.Close();
			QueryWrite.SQL.Clear();
			QueryWrite.SQL.Add('update HojyoTree set EntNo = EntNo * -1');
            QueryWrite.SQL.Add(',UpdTantoNCode = :iUpdTantoNCode ');
            QueryWrite.SQL.Add('where MasterKbn = :pMKBN and EntNo > 0');
			QueryWrite.SetFld('pMKBN').AsInteger := m_nMasterDivision;
            QueryWrite.SetFld('iUpdTantoNCode').AsFloat := m_TantoNCode; // <202>

			if ( QueryWrite.ExecSQL = false ) then
			begin
				ErrorMessageDsp ( QueryWrite );
                // ﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule^.Rollback ( dbCorp_Select );
				Exit;
			end;

			// 加算体系の読込み
			QueryRead.Close();
			QueryRead.SQL.Clear();
//<255> DEL			QueryRead.SQL.Add('select Count(*) as Kensu from HojyoTree where MasterKbn = :pMKBN');
			QueryRead.SQL.Add('select Count(EntNo) as Kensu from HojyoTree where MasterKbn = :pMKBN');  //<255> ADD
			QueryRead.SetFld('pMKBN').AsInteger := m_nMasterDivision;
			QueryRead.Open();

			if ( QueryRead.Eof = false ) then
			begin
				ProgressBar1.Max := QueryRead.GetFld('Kensu').AsInteger;
				ProgressBar1.Position := 0;
				iCount := 0;
			end
			else
            begin
				Exit;
            end;

			// 加算体系の読込み
			QueryRead.Close();
			QueryRead.SQL.Clear();

(* <112>	QueryRead.SQL.Add('Select HojyoTree.MasterKbn, HojyoTree.SumNCode, HojyoTree.BasedNCode, HojyoTree.EntNo, ho.SumKbn from HojyoTree HojyoTree Left Outer Join HojyoMA ho');
			QueryRead.SQL.Add('on HojyoTree.BasedNCode = ho.NCode and HojyoTree.MasterKbn = Ho.MasterKbn');
			QueryRead.SQL.Add('Where HojyoTree.MasterKbn = :pMKBN and HojyoTree.BasedNCode = Ho.NCode and Ho.RDelKbn = 0');
//			QueryRead.SQL.Add('order by HojyoTree.SumNCode, Ho.SumKbn, HojyoTree. BasedNCode, HojyoTree.EntNo');
			QueryRead.SQL.Add('order by HojyoTree.SumNCode, Ho.SumKbn, Ho.GCode');
*)
//<112>---St
        	QueryRead.SQL.Add('select HT.MasterKbn,HT.SumNCode,HT.BasedNCode,HT.EntNo,HM.SumKbn from HojyoTree HT ');
            QueryRead.SQL.Add('left outer join HojyoMA HM    on HT.BasedNCode = HM.NCode    ');
            QueryRead.SQL.Add('left outer join HojyoMA HMOya on HT.SumNCode   = HMOya.NCode ');
		    QueryRead.SQL.Add('where HT.MasterKbn = :pMKBN and HT.BasedNCode = HM.NCode and HM.RDelKbn = 0 ');
//<265>↓↓APGﾌｧｲﾙ内容からｿｰﾄ条件を作成
//		    QueryRead.SQL.Add('order by HMOya.GCode,HM.SumKbn,HM.GCode, HT.EntNo');     //<265>「APGﾌｧｲﾙのﾊﾟﾗﾒｰﾀが取得できなかった場合」の条件に移動

            // APGﾌｧｲﾙのﾊﾟﾗﾒｰﾀが取得できた場合
            if bChkFileFlg then
            begin
                // 取得ﾊﾟﾗﾒｰﾀのﾁｪｯｸ
                bChkErrFlg := True;
                iChkSKeyFlg := 3;
                for iLCnt := 0 to 2 do
                begin
                    // ｿｰﾄｷｰの使用確認
                    if (m_ArySortInfo[iLCnt].iSortOrder = 9) and (m_ArySortInfo[iLCnt].iKetaStart = 0) and (m_ArySortInfo[iLCnt].iKetaEnd = 0) then
                    begin
                        if iLCnt = 2 then
                        begin
                            // ｿｰﾄｷｰ2まで使用
                            iChkSKeyFlg := 2;
                            Break;
                        end
                        else if iLCnt = 1 then
                        begin
                            // ｿｰﾄｷｰ1のみ使用
                            iChkSKeyFlg := 1;
                            Break;
                        end;
                    end;

                    // ｿｰﾄ順[0:昇順，1:降順]の範囲外指定はｴﾗｰ
                    if (m_ArySortInfo[iLCnt].iSortOrder < 0) or (m_ArySortInfo[iLCnt].iSortOrder > 1) then
                        bChkErrFlg := False;

                    // ｺｰﾄﾞ桁数の開始位置、終了位置がﾏｽﾀ(MasterInfo)で採用されているｺｰﾄﾞ桁数を超える場合はｴﾗｰ
                    if (m_ArySortInfo[iLCnt].iKetaStart > iCodeDigit) or (m_ArySortInfo[iLCnt].iKetaEnd > iCodeDigit) then
                        bChkErrFlg := False;

                    // ｺｰﾄﾞ桁数の開始位置が終了位置よりも大きい場合はｴﾗｰ
                    if m_ArySortInfo[iLCnt].iKetaStart > m_ArySortInfo[iLCnt].iKetaEnd then
                        bChkErrFlg := False;
                end;

                if bChkErrFlg = False then
                begin
                    Beep;
                    MjsMessageBoxEX(Self, '並び替えの条件設定に問題があります。', '並び替え', mjWarning, mjOk, mjDefOk);
                    exit;
                end;

                // ｺｰﾄﾞ属性がﾌﾘｰの場合
                if iCodeAttr = 2 then
                begin
                    // ｿｰﾄｷｰ作成
                    for iLCnt := 0 to (iChkSKeyFlg - 1) do
                    begin
                        sSKey := sSKey + 'substring(HM.GCode || left(space(16), ' + IntToStr(iCodeDigit) + ' - length(HM.GCode)), '
                                        + IntToStr(m_ArySortInfo[iLCnt].iKetaStart) + ', '
                                        + IntToStr(m_ArySortInfo[iLCnt].iKetaEnd - m_ArySortInfo[iLCnt].iKetaStart + 1) + ')';


                        if m_ArySortInfo[iLCnt].iSortOrder = 1 then
                            sSKey := sSKey + ' desc, '
                        else
                            sSKey := sSKey + ', ';
                    end;
                end
                // ｺｰﾄﾞ属性が数字の場合
                else
                begin
                    // ｿｰﾄｷｰ作成
                    for iLCnt := 0 to (iChkSKeyFlg - 1) do
                    begin
                        sSKey := sSKey + 'substring(HM.GCode, '
                                        + IntToStr((16 - iCodeDigit) + m_ArySortInfo[iLCnt].iKetaStart) + ', '
                                        + IntToStr(m_ArySortInfo[iLCnt].iKetaEnd - m_ArySortInfo[iLCnt].iKetaStart + 1) + ')';

                        if m_ArySortInfo[iLCnt].iSortOrder = 1 then
                            sSKey := sSKey + ' desc, '
                        else
                            sSKey := sSKey + ', ';
                    end;
                end;

                QueryRead.SQL.Add('order by HMOya.GCode, HM.SumKbn, ' + sSKey + 'HT.EntNo');

            end
            // APGﾌｧｲﾙのﾊﾟﾗﾒｰﾀが取得できなかった場合
            else
            begin
                // <265>対応以前のｿｰﾄ順を使用
                QueryRead.SQL.Add('order by HMOya.GCode, HM.SumKbn, HM.GCode, HT.EntNo');
            end;
//<265>↑↑
//<112>---Ed
			QueryRead.SetFld('pMKBN').AsInteger := m_nMasterDivision;
			QueryRead.Open();
			QueryRead.FetchAll;

			while ( QueryRead.Eof = false ) do
			begin
                if ( sSvSumCode <> QueryRead.GetFld('SumNCode').AsInteger ) then
                    iEntNo := 100;

				QueryWrite.Close();
				QueryWrite.SQL.Clear();
				QueryWrite.SQL.Add('update HojyoTree set EntNo =:NewENT ');
				QueryWrite.SQL.Add(', UpdTantoNCode = :UpdTantoNCode '); // <202>
                QueryWrite.SQL.Add('where MasterKbn=:pMKBN and SumNCode=:SUM and BasedNCode=:BASED and EntNo=:ENT ');
    			QueryWrite.SetFld('pMKBN' ).AsInteger := m_nMasterDivision;
				QueryWrite.SetFld('NewENT').AsInteger := iEntNo;
				QueryWrite.SetFld('SUM'   ).AsString  := QueryRead.GetFld('SumNCode'  ).AsString;
				QueryWrite.SetFld('BASED' ).AsString  := QueryRead.GetFld('BasedNCode').AsString;
				QueryWrite.SetFld('ENT'   ).AsInteger := QueryRead.GetFld('EntNo'     ).AsInteger;
                QueryWrite.SetFld('UpdTantoNCode').AsFloat := m_TantoNCode; // <202>

				if ( QueryWrite.ExecSQL = false ) then
				begin
					ErrorMessageDsp ( QueryWrite );
                    // ﾛｰﾙﾊﾞｯｸ(破棄)
					MDataModule^.Rollback ( dbCorp_Select );
					Exit;
				end;

				sSvSumCode := QueryRead.GetFld('SumNCode').AsInteger;
				iEntNo     := iEntNo + 100;

				QueryRead.Next;

				Inc(iCount);
				ProgressBar1.Position := iCount;
            end;

			ProgressBar1.Visible := false;

			// TreeView 再作成
			fnRebuildTreeViewItems ();
			// TreeView 再作成(はぐれ対応)
			if ( fnRebuildTreeViewItemsHagure () = false ) then
			begin
                // ﾛｰﾙﾊﾞｯｸ(破棄)
				MDataModule^.Rollback ( dbCorp_Select );
				Exit;
			end;

            // <180> - ST
            TBaseNode	:= VTreeView.Items[0];
		    TBaseNodeSv	:= VTreeView.Items[0];
            // <180> - ED

			if ( BSpeedButtonIS.Caption <> '詳細(&T)' ) then
			begin
				if ( Root_PMTab.Items.Selected = PAGE_GOKEI ) then
				begin
					if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
						    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ETEdit_GCode')
					else    MjsDispCtrl.MjsSetFocus(Self, 'Goukei_ENEdit_GCode');
				end
				else
				begin
					if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
						    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')
					else    MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');
				end;

                // <181> - ST
                btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
        		LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
                // <181> - ED
			end
			else
			begin
				fnCreateGrid(VTreeView.TopItem, 0);
				fnCreateGrid(VTreeView.TopItem, 1);
			end;

            // ｺﾐｯﾄ(反映)
			MDataModule^.Commit (dbCorp_Select);
        end;
	finally

    	SessionPractice(C_ED_PROCESS);			// <203> ADD

		QueryRead.Free();
		QueryWrite.Free();
	end;

end;

//**************************************************************************
//	Proccess  :	検索ﾎﾞﾀﾝｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2004/ 06 / 22
//	Parameter : Sender
//	Retrun	  :
//	History	　:	200X / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.BSpeedButtonFindClick(Sender: TObject);                //<114>
var

    lvExpSend   :   rcJNTExpSend;   // 親BPL送信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    lvExpRecv   :   rcJNTExpRecv;   // 親BPL受信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    iExpRtn     :   Integer;        // 戻り値
    strExCode   :   String;
    iMasterKbn  :   Integer;
    iCodeAttr   :   Integer;

begin
    iMasterKbn := m_arAdoptInfo[ECombo_Header.ItemIndex].nMasterDivision;  // ﾏｽﾀ区分
    iCodeAttr  := m_arAdoptInfo[ECombo_Header.ItemIndex].nCodeAttribute;   // ｺｰﾄﾞ属性

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam( @lvExpSend );
    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;                         // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;                         // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;

    lvExpSend.MasterKbn     :=  iMasterKbn;
    lvExpSend.ModulKbn      :=  0;                          // ﾓｼﾞｭｰﾙ区分(共通=0)
    lvExpSend.PatternNo     :=  1;                          // ﾊﾟﾀｰﾝNo.
    lvExpSend.WhereStr      :=  'HojyoMA.MasterKbn ='
                                + IntToStr(iMasterkbn)
                                + ' And HojyoMA.RDelKbn = 0';

    lvExpSend.SortStr       :=  'Order By HojyoMA.GCode';

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
        Exit;

    // 中身あり
    if ( Length(Trim(lvExpRecv.GCode)) > 0 ) then
    begin

		if  (iCodeAttr <= 1) then
			strExCode	:= Format ('%.16d', [StrToInt64(lvExpRecv.GCode)])
		else
			strExCode	:= TrimRight(lvExpRecv.GCode);

    	m_SearchInfo.sKojCD     := strExCode;
		m_SearchInfo.iItem      := 0;
		m_SearchInfo.bFstFlg    := false;
		VTreeView.SetFocus;
		fnSearch();
	end;

(*
var
	DLGParam	:	TJNTDLGParam;
	SearchDlg	:	TJNTMASSEARCHDLGIF;
	sCode		:	String;
//	iCut,
//	iCode		:	Integer;
begin
	SearchDlg := nil;
	DLGParam := nil;
{
	// マスタ検索ﾀﾞｲｱﾛｸﾞ表示
	try
		SearchDlg := TJNTMASSEARCHDLGIF.Create();
		SearchDlg.Init( pointer ( m_pMyAppRecord ) );

		DLGParam := TJNTDLGParam.CreateParam();
		DLGParam.iMasterkbn	:= m_nMasterDivision;											//	ﾏｽﾀ区分
		DLGParam.iAttr		:= MasterInfo_DMemDataCodeAttr.AsInteger;		//	属性
		DLGParam.iDigit		:= MasterInfo_DMemDataCodeDigit.AsInteger;		//	桁数
		DLGParam.pApRec		:= pointer( m_pMyAppRecord );					//	ApRecのポインタ
		if SearchDlg.DoDlg(DLGParam) = mrOK then
		begin
			sCode := DLGParam.sSearchCD;
}{			if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
			begin
				if MasterInfo_DMemDataCodeAttr.AsInteger = 1 then
				begin
					if sCode <> '' then
					begin
						iCut := 10 - MasterInfo_DMemDataCodeDigit.AsInteger;
						System.Delete(sCode, 1, iCut);
					end;
				end
				else
				begin
					if sCode <> '' then
					begin
						iCode := StrToInt64(Trim(sCode));
						sCode := CurrToStr(iCode);
					end;
				end;
			end;
}
{			m_SearchInfo.sKojCD := sCode;

			m_SearchInfo.iItem    := 0;
			m_SearchInfo.bFstFlg  := false;
			VTreeView.SetFocus;
			fnSearch();
		end;
	finally
		DLGParam.Free();
		SearchDlg.Term();
		SearchDlg.Free();
	end;
}

*)
end;

//**********************************************************************
//*		Proccess	:	検索
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/04
//*		Parameter	:   Nothing
//*		Return		:	Nothing
//**********************************************************************
procedure  TJNTCRP018001f.fnSearch();
begin
	if fnDownSearch() = true then
	begin
		if m_SearchInfo.bFstFlg = false then
			m_SearchInfo.bFstFlg := true;
		exit;
	end;

	while true do
	begin
		// 1件も一致しなかった時
		if m_SearchInfo.bFstFlg = false then
			break;

		// 最後まで検索した時
		if m_SearchInfo.bFstFlg = true then
		begin
			ComArea.m_MsgStd.GetMsg(MjsMsgRec, 30,31);
	   		MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype ,
										MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
			showmessage('最後まで検索しました。');
			m_SearchInfo.sKojCD := '';
			break;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	検索処理
//*		Name		:	H.Endo(MJS)
//*		Date		:	2004/06/04
//*		Parameter	:	Nothing
//*		Return		:	一致(true)/不一致(false)
//**********************************************************************
function TJNTCRP018001f.fnDownSearch():Boolean;
var
	stWorkRec	: ^TreeViewRec;
	i			: Integer;
begin
	Result := false;
	for i:=m_SearchInfo.iItem to VTreeView.Items.Count-1 do
	begin
		stWorkRec := VTreeView.Items[i].Data;
		if stWorkRec^.strExCode = m_SearchInfo.sKojCD then
		begin
			VTreeView.Items[i].Selected := true;
			m_SearchInfo.iItem := i+1;
			Result := true;
			break;
		end;
	end;
end;

//**************************************************************************
//	Proccess	:	削除前仕訳・実績有無チェック
//	Name		:	N.Nabe
//	Date		:	2000.11.16
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnDeleteCheck(strGCode: String): Boolean;
var
	QueryFree	: TMQuery;
	QueryMain	: TMQuery;
	iFlg		: Integer;

begin
	QueryFree		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFree);
	QueryMain		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryMain);

	iFlg := 0;													// 削除不可ﾌﾗｸﾞ初期化

	try
		// 会社基本情報読み込み
		QueryMain.Close;
		QueryMain.SQL.Clear;		 							// QueryFree 初期化
//<255> DEL		QueryMain.SQL.Add('Select * from DTMAIN_MAS');
		QueryMain.SQL.Add('Select strMonth from DTMAIN_MAS');  //<255> ADD
		QueryMain.Open;

		// 工事実績有無のチェック
		QueryFree.Close;
		QueryFree.SQL.Clear;		 							// QueryFree 初期化
//<255> DEL		QueryFree.SQL.Add('Select * from SumSM');
		QueryFree.SQL.Add('Select DebitSum,CreditSum from SumSM');  //<255> ADD
		QueryFree.SQL.Add('Where NMonth>=:iNMonth and MasterKbn=:pMKBN and BmnNCode=:stKouji');
		QueryFree.SetFld('pMKBN').AsInteger := m_nMasterDivision;
		QueryFree.SetFld('iNMonth').AsInteger	:= QueryMain.GetFld('strMonth').AsInteger;
		QueryFree.SetFld('stKouji').AsString	:= strGCode;
		QueryFree.Open;

		if QueryFree.EOF = false then
		begin
			while QueryFree.EOF = false do
			begin
				if (QueryFree.GetFld('DebitSum').AsInteger <> 0) or
				   (QueryFree.GetFld('CreditSum').AsInteger <> 0)then
				begin
					iFlg := 1;
				end;

				if iFlg = 1 then
				begin
					result := false;
					exit;
				end;

				QueryFree.Next;
			end;

			// 仕訳有無のチェック(借方)
			QueryFree.Close;
			QueryFree.SQL.Clear;		 							// QueryFree 初期化
//<255> DEL			QueryFree.SQL.Add('Select * from SwkDetail');
			QueryFree.SQL.Add('Select NMonth from SwkDetail');  //<255> ADD
			QueryFree.SQL.Add('Where NMonth>=:iNMonth and DKojCode=:stKarikouji');
			QueryFree.SetFld('iNMonth').AsInteger	:= QueryMain.GetFld('strMonth').AsInteger;
			QueryFree.SetFld('stKariKouji').AsString	:= strGCode;
			QueryFree.Open;

			if QueryFree.EOF = false then
			begin
				result := false;
				exit;
			end;

			// 仕訳有無のチェック(貸方)
			QueryFree.Close;
			QueryFree.SQL.Clear;		 							// QueryFree 初期化
//<255> DEL			QueryFree.SQL.Add('Select * from SwkDetail');
			QueryFree.SQL.Add('Select NMonth from SwkDetail');  //<255> ADD
			QueryFree.SQL.Add('Where NMonth>=:iNMonth and CKojCode=:stKasikouji');
			QueryFree.SetFld('iNMonth').AsInteger	:= QueryMain.GetFld('strMonth').AsInteger;
			QueryFree.SetFld('stKasiKouji').AsString	:= strGCode;
			QueryFree.Open;

			if QueryFree.EOF = false then
			begin
				result := false;
				exit;
			end;

			result := true;
			exit;

		end
		else
		begin
			result := true;
			exit;
		end;

	finally
		QueryMain.Free;										// QueryFree 開放
		QueryFree.Free;										// QueryFree 開放
	end;
end;

//**********************************************************************
//*		Proccess	:	付箋の初期化
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenInitialize();
begin
	giFusenSelectColorJ	:=	0;
	giFusenSelectColorG	:=	0;

{	Jituzai_ImageLowered_FusenRed.Visible	:=	false;
	Jituzai_ImageLowered_FusenGreen.Visible	:=	false;
	Jituzai_ImageLowered_FusenBlue.Visible	:=	false;
	Jituzai_ImageLowered_FusenOrange.Visible:=	false;
	Jituzai_ImageRaised_FusenRed.Visible 	:=	true;
	Jituzai_ImageRaised_FusenGreen.Visible	:=	true;
	Jituzai_ImageRaised_FusenBlue.Visible	:=	true;
	Jituzai_ImageRaised_FusenOrange.Visible	:=	true;

	Jituzai_ETEdit_Fusen.Enabled	:=	false;
	Jituzai_ETEdit_Fusen.Color		:=	Self.Color;
	Jituzai_ETEdit_Fusen.Text		:=	'';

	Goukei_ImageLowered_FusenRed.Visible	:=	false;
	Goukei_ImageLowered_FusenGreen.Visible	:=	false;
	Goukei_ImageLowered_FusenBlue.Visible	:=	false;
	Goukei_ImageLowered_FusenOrange.Visible	:=	false;
	Goukei_ImageRaised_FusenRed.Visible 	:=	true;
	Goukei_ImageRaised_FusenGreen.Visible	:=	true;
	Goukei_ImageRaised_FusenBlue.Visible	:=	true;
	Goukei_ImageRaised_FusenOrange.Visible	:=	true;

	Goukei_ETEdit_Fusen.Enabled		:=	false;
	Goukei_ETEdit_Fusen.Color		:=	Self.Color;
	Goukei_ETEdit_Fusen.Text		:=	'';
}
end;

//**********************************************************************
//*		Proccess	:	赤の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenImageRedClick(Sender: TObject);
begin
	SelectFusenColor(Red);
end;

//**********************************************************************
//*		Proccess	:	緑の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenImageGreenClick(Sender: TObject);
begin
	SelectFusenColor(Green);
end;

//**********************************************************************
//*		Proccess	:	青の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenImageBlueClick(Sender: TObject);
begin
	SelectFusenColor(Blue);
end;

//**********************************************************************
//*		Proccess	:	橙の付箋を選択した時
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenImageOrangeClick(Sender: TObject);
begin
	SelectFusenColor(Orange);
end;

//**********************************************************************
//*		Proccess	:	付箋の表示処理
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Parameter	:	SelectFusen		:	選ばれた付箋
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.SelectFusenColor(SelectFusen: Integer);
begin

	if Root_PMTab.Items.Selected = PAGE_JITUZAI then
	begin
		case (giFusenSelectColorJ) of
			Red:
			begin
				Jituzai_ImageLowered_FusenRed.Visible	:= false;
				Jituzai_ImageRaised_FusenRed .Visible	:= true;
			end;
			Green:
			begin
				Jituzai_ImageLowered_FusenGreen.Visible	:= false;
				Jituzai_ImageRaised_FusenGreen .Visible	:= true;
			end;
			Blue:
			begin
				Jituzai_ImageLowered_FusenBlue.Visible	:= false;
				Jituzai_ImageRaised_FusenBlue .Visible	:= true;
			end;
			Orange:
			begin
				Jituzai_ImageLowered_FusenOrange.Visible:= false;
				Jituzai_ImageRaised_FusenOrange .Visible:= true;
			end;
		end;

		if	(SelectFusen = giFusenSelectColorJ) then
			giFusenSelectColorJ	:= 0
		else
		begin
			case (SelectFusen) of
				Red:
				begin
					Jituzai_ImageRaised_FusenRed .Visible	:= false;
					Jituzai_ImageLowered_FusenRed.Visible	:= true;
				end;
				Green:
				begin
					Jituzai_ImageRaised_FusenGreen .Visible	:= false;
					Jituzai_ImageLowered_FusenGreen.Visible	:= true;
				end;
				Blue:
				begin
					Jituzai_ImageRaised_FusenBlue .Visible	:= false;
					Jituzai_ImageLowered_FusenBlue.Visible	:= true;
				end;
				Orange:
				begin
					Jituzai_ImageRaised_FusenOrange .Visible	:= false;
					Jituzai_ImageLowered_FusenOrange.Visible	:= true;
				end;
			end;

			giFusenSelectColorJ	:= SelectFusen;
		end;

{		if	(giFusenSelectColorJ = 0) then
		begin
			Jituzai_ETEdit_Fusen.Enabled	:= false;
			Jituzai_ETEdit_Fusen.Color		:= Self.Color;
		end
		else
		begin
			Jituzai_ETEdit_Fusen.Enabled	:= true;
			Jituzai_ETEdit_Fusen.Color		:= clWindow;
		end;}
	end
	else
	begin
		case (giFusenSelectColorG) of
			Red:
			begin
				Goukei_ImageLowered_FusenRed.Visible	:= false;
				Goukei_ImageRaised_FusenRed .Visible	:= true;
			end;
			Green:
			begin
				Goukei_ImageLowered_FusenGreen.Visible	:= false;
				Goukei_ImageRaised_FusenGreen .Visible	:= true;
			end;
			Blue:
			begin
				Goukei_ImageLowered_FusenBlue.Visible	:= false;
				Goukei_ImageRaised_FusenBlue .Visible	:= true;
			end;
			Orange:
			begin
				Goukei_ImageLowered_FusenOrange.Visible:= false;
				Goukei_ImageRaised_FusenOrange .Visible:= true;
			end;
		end;

		if	(SelectFusen = giFusenSelectColorG) then
			giFusenSelectColorG	:= 0
		else
		begin
			case (SelectFusen) of
				Red:
				begin
					Goukei_ImageRaised_FusenRed .Visible	:= false;
					Goukei_ImageLowered_FusenRed.Visible	:= true;
				end;
				Green:
				begin
					Goukei_ImageRaised_FusenGreen .Visible	:= false;
					Goukei_ImageLowered_FusenGreen.Visible	:= true;
				end;
				Blue:
				begin
					Goukei_ImageRaised_FusenBlue .Visible	:= false;
					Goukei_ImageLowered_FusenBlue.Visible	:= true;
				end;
				Orange:
				begin
					Goukei_ImageRaised_FusenOrange .Visible	:= false;
					Goukei_ImageLowered_FusenOrange.Visible	:= true;
				end;
			end;

			giFusenSelectColorG	:= SelectFusen;
		end;

{		if	(giFusenSelectColorG = 0) then
		begin
			Goukei_ETEdit_Fusen.Enabled	:= false;
			Goukei_ETEdit_Fusen.Color		:= Self.Color;
		end
		else
		begin
			Goukei_ETEdit_Fusen.Enabled	:= true;
			Goukei_ETEdit_Fusen.Color		:= clWindow;
		end;}
	end;

end;

//**********************************************************************
//*		Proccess	:	印刷
//*		Name		:	N.Nabe
//*		Date		:	2000/10/10
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.BSpeedButtonPrnClick(Sender: TObject);
(* <PRN>
var
	JNTCRP018001PrnDlg	:	TJNTCRP018001PrnDlgf;
	MJSPrnDlgf		:	TMJSPrnDlgf;
	iDlg			:	Integer;
	iReturn			:	Integer;
	DmqPrint		:	TMQuery;
	stStart			:	String;
	stEnd			:	String;
	iSelect			:	Integer;
	iOrder			:	Integer;
	MemWork			:	TdxMemData;
	sTitle			:	TStringList;
	sMemFld			:	TStringList;
*)
  var  // <MLXDEP> ADD
 	sMLWF 			:   String;  // <MLXDEP> ADD

begin
	m_fPrint := 1;

//<MLXDEP>
	sMLWF := '' ;
	if (TMSeries.IsMjsLink3) then
		sMLWF	:= '_DEP_';
//<MLXDEP>↑


    // 帳票用ﾊﾟﾗﾒｰﾀ初期化
    gfnHaniInit(Self,
                m_pMyAppRecord,
                MDataModule,
                ComArea,
                dbCorp_Select,
//<MLXDEP> DEL              'JNTCRP018001',
                'JNTCRP018001' + sMLWF,     //<MLXDEP> ADD
                uvHani,
                uvSelSys);
    fnPrint;
(* <PRN>
	MemWork	:= nil;

	//	条件ﾀﾞｲｱﾛｸﾞ表示
	JNTCRP018001PrnDlg	:= TJNTCRP018001PrnDlgf.Create(Self);
	JNTCRP018001PrnDlg.MDataModule	:=	MDataModule^;
	JNTCRP018001PrnDlg.dbCorp_Select	:=	dbCorp_Select;
	iReturn	:=	JNTCRP018001PrnDlg.DLG(stStart,stEnd,iSelect,pointer(m_pMyAppRecord), iOrder,
									MasterInfo_DMemDataCodeDigit.AsInteger, MasterInfo_DMemDataCodeAttr.AsInteger,
									MasterInfo_DMemDataJHojyoName.AsString, MasterInfo_DMemDataGHojyoName.AsString);
	JNTCRP018001PrnDlg.Free;

	if iReturn = 2 then		//	選択ﾀﾞｲｱﾛｸﾞでｷｬﾝｾﾙ時
	begin
		m_fPrint := 0;
		EXIT;
	end;

	DmqPrint := TMQuery.Create( Self );					//	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqPrint );		//	DBとMQueryの接続

	sTitle	:=	TStringList.Create;
	sMemFld	:=	TStringList.Create;

	//	印刷ﾀﾞｲｱﾛｸﾞ表示
	PrnSupport		:=	TMjsPrnSupport.Create();
	gfnJNTMasSetPrnInfo ( PrnSupport,DmqPrint );

	PrnSupport.iReportID		:=	990100;							//	帳票ｸﾞﾙｰﾌﾟNO
	case iSelect of
		JITUZAIKANI:	//	簡易時
		begin
			PrnSupport.ApRB				:=	ppReportKaniJ;
			PrnSupport.strDocName		:=	(MasterInfo_DMemDataJHojyoName.AsString + '登録リスト');
			PrnSupport.pPage			:=	RSV_JituzaiKoujiK_Page;	  		//	ﾍﾟｰｼﾞ
			PrnSupport.pDate			:=	RSV_JituzaiKoujiK_Date;	  		//	日付
			PrnSupport.pCorpCode		:=	JituzaiKoujiK_CorpCode;			//	会社ｺｰﾄﾞ
			PrnSupport.pCorpName		:=	JituzaiKoujiK_CorpName;			//	会社名称
			PrnSupport.pAccountOffice	:=	RL_JituzaiKoujiK_Kaikei;		//	会計事務所名称
			PrnSupport.strFileName		:=	rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot +
											'\tmp\' + MasterInfo_DMemDataJHojyoName.AsString + 'チェックリスト（簡略）.csv';

			ppListNameKaniJ.Caption		:=	MasterInfo_DMemDataJHojyoName.AsString + '登録リスト';
		end;
		JITUZAISHOSAI:	//	詳細時
		begin
//			showmessage('調整中');
//			exit;
			PrnSupport.ApRB				:=	ppReportShosaiJ;
			PrnSupport.strDocName		:=	(MasterInfo_DMemDataJHojyoName.AsString + '登録リスト');
			PrnSupport.pPage			:=	SVppPage;		  		//	ﾍﾟｰｼﾞ
			PrnSupport.pDate			:=	SVppDate;		  		//	日付
			PrnSupport.pCorpCode		:=	LppCorpCode;	  		//	会社ｺｰﾄﾞ
			PrnSupport.pCorpName		:=	LppCorpName;			//	会社名称
			PrnSupport.pAccountOffice	:=	LppAccOffice;			//	会計事務所名称
			PrnSupport.strFileName		:=	rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot +
											'\tmp\' + MasterInfo_DMemDataJHojyoName.AsString + 'チェックリスト（詳細）.csv';

			ppListNameShosaiJ.Caption	:=	MasterInfo_DMemDataJHojyoName.AsString + '登録リスト';
			ppKanFuriBmnJ.Caption		:=	'完成振替' + MasterInfo_DMemDataBumonName.AsString;
//			ppTantoJ.Caption			:=	MasterInfo_DMemDataShainName.AsString;
		end;
		GOUKEIKANI:	//	簡易時
		begin
			PrnSupport.ApRB				:=	ppReportKaniG;
			PrnSupport.strDocName		:=	(MasterInfo_DMemDataGHojyoName.AsString + '登録リスト');
			PrnSupport.pPage			:=	RSV_GoukeiKoujiK_Page;	  		//	ﾍﾟｰｼﾞ
			PrnSupport.pDate			:=	RSV_GoukeiKoujiK_Date;	  		//	日付
			PrnSupport.pCorpCode		:=	GoukeiKoujiK_CorpCode;			//	会社ｺｰﾄﾞ
			PrnSupport.pCorpName		:=	GoukeiKoujiK_CorpName;			//	会社名称
			PrnSupport.pAccountOffice	:=	RL_GoukeiKoujiK_Kaikei;			//	会計事務所名称
			PrnSupport.strFileName		:=	rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot +
											'\tmp\' + MasterInfo_DMemDataGHojyoName.AsString + 'チェックリスト（簡略）.csv';

			ppListNameKaniG.Caption		:=	MasterInfo_DMemDataGHojyoName.AsString + '登録リスト';
		end;
		GOUKEISHOSAI:	//	詳細時
		begin
//			showmessage('調整中');
//			exit;
			PrnSupport.ApRB				:=	ppReportShosaiG;
			PrnSupport.strDocName		:=	(MasterInfo_DMemDataGHojyoName.AsString + '登録リスト');
			PrnSupport.pPage			:=	ppSystemVariable2;		//	ﾍﾟｰｼﾞ
			PrnSupport.pDate			:=	ppSystemVariable1;	  	//	日付
			PrnSupport.pCorpCode		:=	ppLabel79;				//	会社ｺｰﾄﾞ
			PrnSupport.pCorpName		:=	ppLabel80;				//	会社名称
			PrnSupport.pAccountOffice	:=	ppLabel147;				//	会計事務所名称
			PrnSupport.strFileName		:=	rcCOMMONAREA ( m_pMyAppRecord^.m_pCommonArea^ ).SysCliRoot +
											'\tmp\' + MasterInfo_DMemDataGHojyoName.AsString + 'チェックリスト（詳細）.csv';

			ppListNameShosaiG.Caption	:=	MasterInfo_DMemDataGHojyoName.AsString + '登録リスト';
			ppBmnG.Caption				:=	'集計' + MasterInfo_DMemDataBumonName.AsString;
//			ppTantoG.Caption			:=	MasterInfo_DMemDataShainName.AsString;
		end;
	end;

	PrnSupport.pComArea 	:=	m_pMyAppRecord^.m_pCommonArea;
	PrnSupport.MdataModule	:=	MdataModule^;
	PrnSupport.iDspFileBtn	:=	1; // ファイル出力表示
	PrnSupport.iCalendarKbn	:=	m_iRekiKbn + 1;	//　暦区分

	MJSPrnDlgf := TMJSPrnDlgf.Create( Self );

	iDlg := MJSPrnDlgf.DoDLG( PrnSupport );

	if (PrnSupport.iCommand <> PDLG_CANCEL) then
	begin
		if iDlg > 0 then
		begin
			if ( mjspreview.IsExistPreview ) and ( PrnSupport.iCommand = PDLG_PREVIEW ) then
			begin
				ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,1);
				Beep;
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );

				JHojyoMA_Print.Close;
				GHojyoMA_Print.Close;
				MJSPrnDlgf.Free();
				DmqPrint.Free;
				m_fPrint := 0;
				exit;
			end;

			PrnSet(iSelect, iOrder, stStart, stEnd);					// 印刷情報SET

{			case iSelect of
				JITUZAIKANI:	//	実在簡易時
				begin
					case PrnSupport.iCommand of
						PDLG_PRINT:     ppReportKaniJ.Print;
						PDLG_PREVIEW:   ppReportKaniJ.Print;
						PDLG_FILE:
						begin
							if DSet2CSV(JHojyoMA_Print, PrnSupport.strFileName) = -1 then
								ShowMessage('ファイル出力失敗');
						end;
					end;
				end;
				JITUZAISHOSAI:	//	実在詳細時
				begin
					case PrnSupport.iCommand of
						PDLG_PRINT:     ppReportShosaiJ.Print;
						PDLG_PREVIEW:   ppReportShosaiJ.Print;
						PDLG_FILE:
						begin
							if DSet2CSV(JHojyoMA_Print, PrnSupport.strFileName) = -1 then
								ShowMessage('ファイル出力失敗');
						end;
					end;
				end;
				GOUKEIKANI:		//	合計簡易時
				begin
					case PrnSupport.iCommand of
						PDLG_PRINT:     ppReportKaniG.Print;
						PDLG_PREVIEW:   ppReportKaniG.Print;
						PDLG_FILE:
						begin
							if DSet2CSV(GHojyoMA_Print, PrnSupport.strFileName) = -1 then
								ShowMessage('ファイル出力失敗');
						end;
					end;
				end;
				GOUKEISHOSAI:		//	合計詳細時
				begin
					case PrnSupport.iCommand of
						PDLG_PRINT:     ppReportShosaiG.Print;
						PDLG_PREVIEW:   ppReportShosaiG.Print;
						PDLG_FILE:
						begin
							if DSet2CSV(GHojyoMA_Print, PrnSupport.strFileName) = -1 then
								ShowMessage('ファイル出力失敗');
						end;
					end;
				end;
			end;
}

			if	((PrnSupport.iCommand = PDLG_PRINT) or (PrnSupport.iCommand = PDLG_PREVIEW)) then
				mjspreview.Exec (PrnSupport, MJSPrnDlgf, nil)
			else if	(PrnSupport.iCommand = PDLG_FILE) then
			begin
				case iSelect of
					JITUZAIKANI:	MemWork := JHojyoMA_Print;//	実在簡易時
					JITUZAISHOSAI:	MemWork := JHojyoMA_Print;//	実在詳細時
					GOUKEIKANI:		MemWork := GHojyoMA_Print;//	合計簡易時
					GOUKEISHOSAI:	MemWork := GHojyoMA_Print;//	合計詳細時
				end;

				SetFileOut(iSelect, sTitle,sMemFld);
				if MjsFileOut(MemWork, sMemFld, sTitle, PrnSupport, m_pMyAppRecord) = -1 then
				begin
					//	ファイル出力大失敗
					ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10040,3);
					MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType );
				end;
			end;
		end;
	end;
	JHojyoMA_Print.Close;
	GHojyoMA_Print.Close;
	MJSPrnDlgf.Free();
	DmqPrint.Free;
*)
	m_fPrint := 0;
end;

//**********************************************************************
//*		Proccess	:	検索EXP ArrowClick共通ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ <105>
//*		Name		:	N.Nabe
//*		Date		:	2000/11/17
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.ArrowClick(Sender: TObject);
var
    lvExpSend   :  rcJNTExpSend;
    lvExpRecv   :  rcJNTExpRecv;
    iExpRtn     :  Integer;
    CompName    :  String;
    i           :  Integer;
//<EXP> ADD St
    sWk         : String;

    function GetDivisionText(isReturn : Boolean): String;
    begin
        result := '';
        if (isReturn) then
        begin
            result := ' TEndDate >= Convert(Date, now()) ';
        end;
    end;

    function GetEmployeeText(isReturn : Boolean): String;
    begin
        result := '';
        if (isReturn) then
        begin
            result := ' Zaishoku = 1 ';
        end;
    end;
//<EXP> ADD Ed
begin

// <238> ADD start
    m_JBmnExpFlg     := False;
    m_GBmnExpFlg     := False;
    m_JSekBmnExpFlg  := False;
    m_GSekBmnExpFlg  := False;
// <238> ADD end

    CompName    :=  TComponent(Sender).name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec := m_pMyAppRecord;                 // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     := @dbCorp_Select;                 // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     := ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := ComArea.SystemArea.SysColorD;

    // ﾌﾟﾛｼﾞｪｸﾄ
    if     (Sender = Jituzai_ENEdit_GCode)
        or (Sender = Jituzai_ETEdit_GCode)
        or (Sender = Goukei_ENEdit_GCode )
        or (Sender = Goukei_ETEdit_GCode )
//<SEI> ADD St
        or	(Sender = Jituzai_ENEdit_SeikyuKoujiCd) 		// 一括請求先工事(実在)
        or	(Sender = Jituzai_ETEdit_SeikyuKoujiCd)
        or	(Sender = Goukei_ENEdit_SeikyuKoujiCd) 			// 一括請求先工事(合計)
        or	(Sender = Goukei_ETEdit_SeikyuKoujiCd)
//<SEI> ADD Ed
         then
    begin
        lvExpSend.TrRootCaption := m_arAdoptInfo [ECombo_Header.itemindex].strDescription;
        lvExpSend.MasterKbn     := m_arAdoptInfo [ECombo_Header.itemindex].nMasterDivision; // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                                                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                                                       // ﾊﾟﾀｰﾝNO
        lvExpSend.TBarNM        := m_arAdoptInfo [ECombo_Header.itemindex].strDescription + '検索ｴｸｽﾌﾟﾛｰﾗ'; //
        lvExpSend.TableName     := 'HOJYOMA';
        lvExpSend.WhereStr      := ' HojyoMA.RDelKbn = 0 and HojyoMA.Masterkbn = ' + IntToStr(m_arAdoptInfo [ECombo_Header.itemindex].nMasterDivision)
                                    + ' and  HojyoMA.SumKBN = ' + IntToStr(Root_PMTab.Items.Selected);
    end
    // 担当者
    else if     (Sender = Jituzai_ENEdit_PersonCode)
        or (Sender = Jituzai_ETEdit_PersonCode)
        or (Sender = Goukei_ETEdit_PersonCode)
        or (Sender = Goukei_ENEdit_PersonCode) then
    begin
        lvExpSend.TrRootCaption := '担当者';
        lvExpSend.MasterKbn     := 25;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
//<EXP> ADD St
        lvExpSend.WhereStr := GetEmployeeText(ExpValueEmployee = '1');
//<EXP> ADD Ed
//        lvExpSend.TBarNM        :=  '担当者検索ｴｸｽﾌﾟﾛｰﾗ';
//        lvExpSend.TableName     :=  'HAPSC';
//        lvExpSend.WhereStr      :=  'RecordKbn=0 and SumKbn=0 ';
    end
    // 得意先
    else if (Sender = Jituzai_ENEdit_CustomerCode)
        or  (Sender = Jituzai_ETEdit_CustomerCode)
        or  (Sender = Goukei_ETEdit_CustomerCode )
        or  (Sender = Goukei_ENEdit_CustomerCode )
//<SEI> ADD St
        or	(Sender = Jituzai_ETEdit_SeikyusakiCd) 			// 請求先(実在)
        or	(Sender = Jituzai_ENEdit_SeikyusakiCd)
        or	(Sender = Goukei_ETEdit_SeikyusakiCd) 			// 請求先(合計)
        or	(Sender = Goukei_ENEdit_SeikyusakiCd)
//<SEI> ADD Ed
        then
    begin
        lvExpSend.TrRootCaption := '得意先';
        lvExpSend.MasterKbn     := 23;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
//        lvExpSend.TBarNM        :=  '得意先検索ｴｸｽﾌﾟﾛｰﾗ';
//        lvExpSend.TableName     :=  'MTOKUI';
        lvExpSend.WhereStr      := 'MTOKUI.RDelKbn = 0 and MTOKUI.SumKBN = 0 and MTOKUI.TemplateKbn = 0';
    end
    // 部門
    else if (Sender = Jituzai_ENEdit_BmnCode)
        or  (Sender = Jituzai_ETEdit_BmnCode) then
    begin
        lvExpSend.TrRootCaption := '部門';
        lvExpSend.MasterKbn     := 41;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
//        lvExpSend.TBarNM        :=  '部門検索ｴｸｽﾌﾟﾛｰﾗ';
//        lvExpSend.TableName     :=  'HOJYOMA';
        lvExpSend.WhereStr      :=  'HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0 and HojyoMA.HojyoKbn2 <> 2';
//<EXP> ADD St
        sWk := GetDivisionText(ExpValueDivision = '1');
        if (sWk <> '') then
        begin
            sWk := ' And ' + sWk;
        end;
        lvExpSend.WhereStr := lvExpSend.WhereStr + sWk;
//<EXP> ADD Ed

// <204> MOD start
		lvExpSend.SortStr  		:= 'ORDER BY GCode, TStartDate desc, InsDateTM desc'
// <204> MOD end
    end


    // 部門(合計)
//<159> - ST
//	else if (Sender = Goukei_ENEdit_BmnCode) then
    else if (Sender = Goukei_ENEdit_BmnCode) or
			(Sender = Goukei_ETEdit_BmnCode) then
//<159> - ED
    begin
        lvExpSend.TrRootCaption := '部門';
        lvExpSend.MasterKbn     := 41;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        lvExpSend.WhereStr      :=  'HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0 and HojyoMA.HojyoKbn2 <> 2';
//<EXP> ADD St
        sWk := GetDivisionText(ExpValueDivision = '1');
        if (sWk <> '') then
        begin
            sWk := ' And ' + sWk;
        end;
        lvExpSend.WhereStr := lvExpSend.WhereStr + sWk;
//<EXP> ADD Ed
// <204> MOD start
		lvExpSend.SortStr  		:= 'ORDER BY GCode, TStartDate desc, InsDateTM desc'
// <204> MOD end
    end

    // 科目
    else if (Sender = Jituzai_ENEdit_SalesKmkCd) then
    begin
        lvExpSend.TrRootCaption := '科目';
        lvExpSend.MasterKbn     := 1;                       // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
//        lvExpSend.TBarNM        :=  '部門検索ｴｸｽﾌﾟﾛｰﾗ';
//        lvExpSend.TableName     :=  'KmkMA';
        lvExpSend.WhereStr      :=  'RDelKbn = 0 and SumKbn = 0 and GCode between '
                        + IntToStr(MasterInfo_DMemDataKmkCode3.AsInteger)
                        + ' and '
                        + IntToStr(MasterInfo_DMemDataKmkCode4.AsInteger);
    end
    // ｾｸﾞﾒﾝﾄ
    else if Copy(CompName,16,5) = 'SegCd' then
    begin
        i := StrToInt(Copy(CompName,21,2));
        lvExpSend.MasterKbn     := m_arAdoptInfo_Seg [i].nMasterDivision;   // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                                       // ﾊﾟﾀｰﾝNO
//        lvExpSend.TBarNM        := m_arAdoptInfo_Seg [i].strDescription  + '検索ｴｸｽﾌﾟﾛｰﾗ';
//        lvExpSend.TableName     := 'HOJYOMA';
        lvExpSend.TrRootCaption := m_arAdoptInfo_Seg [i].strDescription;
        lvExpSend.WhereStr      := ' HojyoMA.SumKBN = 0 and HojyoMA.RDelKbn = 0';

    end
    // 分類
    else if Copy(CompName,16,5) = 'BunCd' then
    begin
        i := StrToInt(Copy(CompName,21,2));
        lvExpSend.MasterKbn     := m_arAdoptInfo_PBr [i].nMasterDivision;   // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                                       // ﾊﾟﾀｰﾝNO
//        lvExpSend.TBarNM        := m_arAdoptInfo_PBr [i].strDescription  + '検索ｴｸｽﾌﾟﾛｰﾗ';
//        lvExpSend.TableName     := 'MMEISHO';
        lvExpSend.TrRootCaption := m_arAdoptInfo_PBr [i].strDescription;
        lvExpSend.WhereStr      := ' RDelKbn = 0 and SetNM = ' + IntToStr(m_arAdoptInfo_Pbr [i].nMasterDivision);
    end
    // 工種ﾊﾟﾀｰﾝ
    else if (Sender = Jituzai_ENEdit_PatternNo) then
    begin
        i := ECombo_Header.ItemIndex;
        lvExpSend.TrRootCaption := '工種ﾊﾟﾀｰﾝ';
        lvExpSend.MasterKbn     := 9060;                    // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        lvExpSend.WhereStr      := ' KousyuPtnMA.RDelKbn = 0 and KousyuPtnMA.Masterkbn = ' + IntToStr(m_arAdoptInfo [i].nMasterDivision + 100);
    end
// <205> ADD start
    // 施主
    else if (Sender = Jituzai_ENEdit_SeshuCode) or
            (Sender = Jituzai_ETEdit_SeshuCode) or
            (Sender = Goukei_ENEdit_SeshuCode) or
            (Sender = Goukei_ETEdit_SeshuCode) then
    begin
        lvExpSend.TrRootCaption := '施主';
        lvExpSend.MasterKbn     := 26;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 6;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
        lvExpSend.DelivKbn      := 4;                       // 納品先区分
    end
    // 施行担当者
    else if (Sender = Jituzai_ETEdit_SekouPersonCode)
            or (Sender = Jituzai_ENEdit_SekouPersonCode)
            or (Sender = Goukei_ETEdit_SekouPersonCode)
            or (Sender = Goukei_ENEdit_SekouPersonCode) then
    begin
        lvExpSend.TrRootCaption := '担当者';
        lvExpSend.MasterKbn     := 25;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
//<EXP> ADD St
        lvExpSend.WhereStr := GetEmployeeText(ExpValueEmployee = '1');
//<EXP> ADD Ed
    end
    // 施行部門
    else if (Sender = Jituzai_ETEdit_SekouBmnCode)
            or (Sender = Jituzai_ENEdit_SekouBmnCode)
            or (Sender = Goukei_ENEdit_SekouBmnCode)
            or (Sender = Goukei_ETEdit_SekouBmnCode) then
    begin
        lvExpSend.TrRootCaption := '部門';
        lvExpSend.MasterKbn     := 41;                      // ﾏｽﾀ区分
        lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
        lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
//<228> DEL        lvExpSend.WhereStr      :=  'HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0 and HojyoMA.HojyoKbn2 <> 2';
        lvExpSend.WhereStr      :=  'HojyoMA.RDelKbn = 0 and HojyoMA.SumKbn = 0 ';  //<228> ADD
//<EXP> ADD St
        sWk := GetDivisionText(ExpValueDivision = '1');
        if (sWk <> '') then
        begin
            sWk := ' And ' + sWk;
        end;
        lvExpSend.WhereStr := lvExpSend.WhereStr + sWk;
//<EXP> ADD Ed                
		lvExpSend.SortStr  		:= 'ORDER BY GCode, TStartDate desc, InsDateTM desc'
    end;

// <205> ADD end

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    if iExpRtn <> 1 then
        Exit;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode)) > 0 then
    begin
        if Sender is TMNumEdit then
        begin
            TMNumEdit(MJSFindCtrl(Self,CompName )).value     := StrToFloat(lvExpRecv.GCode);
            TMNumEdit(MJSFindCtrl(Self,CompName )).InputFlag := false;  // <185>
        end
        else if Sender is TMTxtEdit then
        begin
           TMTxtEdit(MJSFindCtrl(Self,CompName )).Text := lvExpRecv.GCode;
        end;

        if Copy(CompName,16,6) = 'Person' then
        begin
            Jituzai_LLabel_PersonName.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,15,6) = 'Person' then
        begin
            Goukei_LLabel_PersonName.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,16,8) = 'Customer' then
        begin
            Jituzai_LLabel_CustomerName.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,15,8) = 'Customer' then
        begin
            Goukei_LLabel_CustomerName.Caption := lvExpRecv.NMK;
        end
        else if CompName = 'Jituzai_ENEdit_SalesKmkCd' then
        begin
            Jituzai_LLabel_SalesKmkCdDsp.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,16,7) = 'BmnCode' then
        begin
            Jituzai_LLabel_BmnName.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,15,7) = 'BmnCode' then
        begin
            Goukei_LLabel_BmnName.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,16,5) = 'SegCd' then
        begin
            i := StrToInt(Copy(CompName,21,2));
            TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm' + IntToStr(i))).Caption := lvExpRecv.NMK;
        end
// <SEI> ADD start
		// 請求先
        else if Copy(CompName,16,12) = 'SeikyusakiCd' then
        begin
        	Jituzai_LLabel_SeikyusakiNm.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,15,12) = 'SeikyusakiCd' then
        begin
        	Goukei_LLabel_SeikyusakiNm.Caption := lvExpRecv.NMK;
        end
		// 一括請求先工事
        else if Copy(CompName,16,13) = 'SeikyuKoujiCd' then
        begin
        	Jituzai_LLabel_SeikyuKoujiNm.Caption := lvExpRecv.NMK;
        end
        else if Copy(CompName,15,13) = 'SeikyuKoujiCd' then
        begin
        	Goukei_LLabel_SeikyuKoujiNm.Caption := lvExpRecv.NMK;
        end
// <SEI> ADD end
// <205> ADD start
        else if ((CompName = Jituzai_ENEdit_SeshuCode.Name) or
                 (CompName = Jituzai_ETEdit_SeshuCode.Name)) then
        begin
// <224> MOD start
//            Jituzai_LLabel_SeshuName.Caption    := lvExpRecv.NM;
            Jituzai_LLabel_SeshuName.Caption    := lvExpRecv.NMK;
// <224> MOD end
        end
        else if ((CompName = Goukei_ENEdit_SeshuCode.Name) or
                 (CompName = Goukei_ETEdit_SeshuCode.Name)) then
        begin
// <224> MOD start
//            Goukei_LLabel_SeshuName.Caption     := lvExpRecv.NM;
            Goukei_LLabel_SeshuName.Caption     := lvExpRecv.NMK;
// <224> MOD end
        end
        else if ((CompName = Jituzai_ENEdit_SekouPersonCode.Name) or
                 (CompName = Jituzai_ETEdit_SekouPersonCode.Name)) then
        begin
            Jituzai_LLabel_SekouPersonName.Caption  := lvExpRecv.NMK;
        end
        else if ((CompName = Goukei_ENEdit_SekouPersonCode.Name) or
                 (CompName = Goukei_ETEdit_SekouPersonCode.Name)) then
        begin
            Goukei_LLabel_SekouPersonName.Caption   := lvExpRecv.NMK;
        end
        else if ((CompName = Jituzai_ETEdit_SekouBmnCode.Name) or
                 (CompName = Jituzai_ENEdit_SekouBmnCode.Name)) then
        begin
            Jituzai_LLabel_SekouBmnName.Caption     := lvExpRecv.NMK;
        end
        else if ((CompName = Goukei_ENEdit_SekouBmnCode.Name) or
                 (CompName = Goukei_ETEdit_SekouBmnCode.Name)) then
        begin
            Goukei_LLabel_SekouBmnName.Caption      := lvExpRecv.NMK;
        end;
// <205> ADD end

// <204> ADD start
		// ﾀｸﾞに部門の内部ｺｰﾄﾞをｾｯﾄする

        if Sender = Jituzai_ENEdit_BmnCode then // 実在部門（数字属性）
        begin
         	Jituzai_ENEdit_BmnCode.TagStr := FloatToStr(lvExpRecv.NCode);
            m_JBmnExpFlg                    := True;   // <238> ADD
        end                                    	// 実在部門（ﾌﾘｰ属性）
        else if Sender = Jituzai_ETEdit_BmnCode then
        begin
          	Jituzai_ETEdit_BmnCode.TagStr := FloatToStr(lvExpRecv.NCode);
            m_JBmnExpFlg                    := True;   // <238> ADD
        end                                   	// 合計部門（数字属性）
        else if Sender = Goukei_ENEdit_BmnCode then
        begin
        	Goukei_ENEdit_BmnCode.TagStr := FloatToStr(lvExpRecv.NCode);
            m_GBmnExpFlg                    := True;   // <238> ADD
        end                                 	// 合計部門（ﾌﾘｰ属性）
        else if Sender = Goukei_ETEdit_BmnCode then
        begin
        	Goukei_ETEdit_BmnCode.TagStr := FloatToStr(lvExpRecv.NCode);
            m_GBmnExpFlg                    := True;   // <238> ADD
        end;
// <204> ADD end
// <238> ADD start
        if Sender = Jituzai_ENEdit_SekouBmnCode then // 実在施工部門（数字属性）
        begin
         	Jituzai_ENEdit_SekouBmnCode.TagStr  := FloatToStr(lvExpRecv.NCode);
            m_JSekBmnExpFlg                     := True;
        end                                    	// 実在施工部門（ﾌﾘｰ属性）
        else if Sender = Jituzai_ETEdit_SekouBmnCode then
        begin
          	Jituzai_ETEdit_SekouBmnCode.TagStr  := FloatToStr(lvExpRecv.NCode);
            m_JSekBmnExpFlg                     := True;
        end                                   	// 合計施工部門（数字属性）
        else if Sender = Goukei_ENEdit_SekouBmnCode then
        begin
        	Goukei_ENEdit_SekouBmnCode.TagStr   := FloatToStr(lvExpRecv.NCode);
            m_GSekBmnExpFlg                     := True;
        end                                 	// 合計施工部門（ﾌﾘｰ属性）
        else if Sender = Goukei_ETEdit_SekouBmnCode then
        begin
        	Goukei_ETEdit_SekouBmnCode.TagStr   := FloatToStr(lvExpRecv.NCode);
            m_GSekBmnExpFlg                     := True;
        end;
// <238> ADD end

        // Enter ｷｰのｴﾐｭﾚｲﾄ
        keybd_event(VK_RETURN, 0, 0, 0);

		Abort;
    end;

end;

//**********************************************************************
//*		Proccess	:	印刷情報SET
//*		Name		:	N.Nabe
//*		Date		:	2000/11/21
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
//<TAX> DEL procedure TJNTCRP018001f.PrnSet(iSelect : Integer; iOrder : Integer; stStart : String; stEnd : String);
procedure TJNTCRP018001f.PrnSet(iSelect : Integer; iOrder : Integer; param: TJNTHani);  //<TAX> ADD
var
	DmqPrint	:	TMQuery;		// 補助基本マスター
	DmqFusen	:	TMQuery;		// 付箋情報
	DmqKInfo	:	TMQuery;		// 工事詳細情報
	DmqKInfo2	:	TMQuery;		// 工事契約情報等
	DmqFree		:	TMQuery;		// その他マスター
	stCode		:	String;
//	iCut		:	Integer;
//	iCode		:	Int64;
	crKeiyaku	:	Currency;
	crShohi		:	Currency;
	crNyukin	:	Currency;
	dDate		:	TDateTime;
    i, j        :	Integer;
//    strTmp		:	String;
//	MasKbn  	:	Integer;
//	MasName 	:	String;
//	CdAttr  	:	Integer;
//	CdDigit 	:	Integer;
//    Kbn0		:	Integer;
	strFormat	:	String;
    iNoCount    :   Integer;
    sGCode      :   String;
    iSumKbn     :   Integer;
	crSubKeiyaku :	Currency;
	crSubShohi	 :	Currency;
    iSubCount   :   Integer;
//    sSQL        :   String;
    iKCount      :   Integer;
    iNCount      :   Integer;
//	icnt2:Integer;
//<TAX> ADD St
    stStart,
    stEnd : String;
    rateCode    : Integer;
    oDic        : TDIC_COTXRATE;
    finishDate  : TDate;

    //=========================
    // 契約情報セット
    //=========================
    procedure setContInfo(
        contDate,                         // 契約日
        contNo,                           // 契約NO
        contRateName : TStringField;      // 税率名称
        contRateCode: TIntegerField;      // 税率コード
        contMoney,                        // 契約金額
        contSalesTax: TCurrencyField);    // 消費税額
    begin
        // 契約年月日1
        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
        begin
            contDate.Clear;
        end
        else
        begin
            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
            if m_iRekiKbn = 0 then				// 和暦
            begin
                contDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
            end
            else
            begin
                contDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
            end;
        end;
        // 契約書NO1
        contNo.AsString         :=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

        // 契約金額1（税込）
        contMoney.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

        // 消費税額1
        contSalesTax.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

        // 消費税率1
        contRateCode.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
        if m_iAccProKbn = 0 then
        begin
            contRateName.AsString	:= '';
        end
        else
        begin
            rateCode := DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
            contRateName.AsString :=
                moBusiness.GetTaxRate(rateCode).TaxName;

            if rateCode = RATECODESTANDARD then
            begin
                finishDate := IfThen(DmqPrint.Fields[INDEX_YOTEIDATEEN].IsNull,
                    //0, DmqPrint.Fields[INDEX_YOTEIDATEEN].AsDateTime);
                    0, TDate(DmqPrint.Fields[INDEX_YOTEIDATEEN].AsDateTime));
                oDic := moBusiness.GetStandardTaxRate(dDate, finishDate);
                if oDic <> nil then
                begin
                    contRateName.AsString  := contRateName.AsString + ' ' + oDic.TaxName;
                end;
            end;
        end;
    end;

    //=========================
    // 契約情報存在チェック
    //=========================
	function ExistCheck(): Boolean;
	begin
		Result := True;

		if (param.pvrStDate <> 0) or (param.pvrEdDate <> 0) then
		begin
			with DmqFree do
			begin
				Close;
                SQL.Clear();
				SQL.Add('SELECT * FROM Dummy WHERE EXISTS ('
				     + ' SELECT * FROM KojiInfo2 KI2'
				     + '  WHERE KI2.MasterKbn  = :MasterKbn'
				     + '    AND KI2.NCode      = :NCode'
				     + '    AND KI2.InfoKbn  = 1');

				SetFld('NCode').AsString := DmqPrint.Fields[INDEX_NCODE].AsString;
                SetFld('MasterKbn').AsInteger := m_nMasterDivision;

				if param.pvrStDate <> 0 then
				begin
					SQL.Add('AND ContDate >= :dtKeiSt');
					SetFld('dtKeiSt').AsInteger := param.pvrStDate;
				end;

				if param.pvrEdDate <> 0 then
				begin
					SQL.Add('AND ContDate <= :dtKeiEd');
					SetFld('dtKeiEd').AsInteger := param.pvrEdDate;
				end;

				SQL.Add(')');

				Open;

				if EOF then
                begin
                    Result := False;
                end;
                Close;
			end;
		end;
	end;
//<TAX> ADD Ed
begin
    crKeiyaku       := 0;
    crShohi         := 0;
    crSubKeiyaku    := 0;
    crSubShohi      := 0;
//    Kbn0            := 0;
//    CdAttr          := 0;
//    MasKbn          := 0;

	DmqPrint := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqPrint );	//	DBとMQueryの接続

	DmqFusen := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqFusen );	//	DBとMQueryの接続

	DmqKInfo := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqKInfo );	//	DBとMQueryの接続

	DmqKInfo2 := TMQuery.Create( Self );					    //	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqKInfo2 );	//	DBとMQueryの接続

	DmqFree := TMQuery.Create(Self );					        //	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqFree );	//	DBとMQueryの接続

	JHojyoMA_Print.Close;
	GHojyoMA_Print.Close;
	JHojyoMA_Print.Open;
	GHojyoMA_Print.Open;

	MemPtnSegBun.Close;
	MemPtnSegBun.Open;

    dMemData_KeiyakuPrint.Close;
    dMemData_KeiyakuPrint.Open;

// <263> ADD start
    dMemData_KasanPrint.Close;
    dMemData_KasanPrint.Open;
// <263> ADD end
//<TAX> ADD St
    if Length(param.pvrStCode) > 0 then
    begin
        stStart := param.pvrStCode[0];
    end
    else
    begin
        stStart := '';
    end;

    if Length(param.pvrEdCode) > 0 then
    begin
        stEnd := param.pvrEdCode[0];
    end
    else
    begin
        stEnd := '';
    end;
//<TAX> ADD Ed
	case iSelect of
		JITUZAIKANI:							// 実在工事簡易
		begin
			with DmqPrint do
			begin
				//	実在詳細情報取得
				try
					Close;
					SQL.Clear;
					SQL.Add(KANI_SQL);

					if (stStart <> '') and (stEnd = '') then
					begin
						SQL.ADD(' AND MA.GCode >= :StartGCode');
						ParamByName('StartGCode').AsString	:=	stStart;
					end
					else if (stStart = '') and (stEnd <> '') then
					begin
						SQL.ADD(' AND MA.GCode <= :EndGCode');
						ParamByName('EndGCode').AsString	:=	stEnd;
					end
					else if (stStart <> '') and (stEnd <> '') then
					begin
						SQL.ADD(' AND MA.GCode >= :StartGCode');
						SQL.ADD(' AND MA.GCode <= :EndGCode');
						ParamByName('StartGCode').AsString	:=	stStart;
						ParamByName('EndGCode').AsString	:=	stEnd;
					end;
                    SetFld('pMKBN').asInteger := m_nMasterDivision;
                    SetFld('pSumKbn').asInteger	:= 0;

					//	出力順序
					if (iOrder = CODEORDER) then
						SQL.ADD(' ORDER BY MA.GCode')
					else
						SQL.ADD(' ORDER BY MA.Renso');

					Open;

					while EOF <> true do
					begin
						JHojyoMA_Print.Append();

						//	外部ｺｰﾄﾞ
                        stCode := fnSetGCode(Fields[KANI_INDEX_GCODE].AsString,MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,0);
						JHojyoMA_PrintGCode.AsString		:=	stCode;
						//	連想ｼﾝﾎﾞﾙ
						JHojyoMA_PrintRenChar.AsString		:=	Fields[KANI_INDEX_RENSO].AsString;
						//	正式名称
						JHojyoMA_PrintLongName.AsString		:=	Fields[KANI_INDEX_LONGNAME].AsString;
						//	簡略名称
						JHojyoMA_PrintSimpleName.AsString	:=	Fields[KANI_INDEX_SIMPLENAME].AsString;
    					//	付箋
                        case Fields[KANI_INDEX_FUSENKBN].AsInteger of	//	付箋区分
                            RED:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFRed.Bitmap);
                            GREEN:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFGreen.Bitmap);
                            BLUE:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFBlue.Bitmap);
                            ORANGE:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFOrange.Bitmap);
                        end;

						JHojyoMA_Print.Post;
						DmqPrint.NEXT;
					end;
				except
					DmqPrint.Free;
				end;
			end;
		end;
		GOUKEIKANI:								// 合計工事簡易
		begin
			with DmqPrint do
			begin
				Try
					Close;
					SQL.Clear;
					SQL.Add(KANI_SQL);

					if (stStart <> '') and (stEnd = '') then
					begin
						SQL.ADD(' AND MA.GCode >= :StartGCode');
						ParamByName('StartGCode').AsString	:=	stStart;
					end
					else if (stStart = '') and (stEnd <> '') then
					begin
						SQL.ADD(' AND MA.GCode <= :EndGCode');
						ParamByName('EndGCode').AsString	:=	stEnd;
					end
					else if (stStart <> '') and (stEnd <> '') then
					begin
						SQL.ADD(' AND MA.GCode >= :StartGCode');
						SQL.ADD(' AND MA.GCode <= :EndGCode');
						ParamByName('StartGCode').AsString	:=	stStart;
						ParamByName('EndGCode').AsString	:=	stEnd;
					end;
                    SetFld('pMKBN').asInteger   := m_nMasterDivision;
                    SetFld('pSumKbn').asInteger	:= 1;

					//	出力順序
					if (iOrder = CODEORDER) then
						SQL.ADD('ORDER BY MA.GCode')
					else
						SQL.ADD('ORDER BY MA.Renso');

					Open;

					while EOF <> true do
					begin
						GHojyoMA_Print.Append();

						//	外部ｺｰﾄﾞ
                        stCode := fnSetGCode(Fields[KANI_INDEX_GCODE].AsString,MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,0);
						GHojyoMA_PrintGCode.AsString		:=	stCode;
						//	連想
						GHojyoMA_PrintRenChar.AsString		:=	Fields[KANI_INDEX_RENSO].AsString;
						//	正式名称
						GHojyoMA_PrintLongName.AsString		:=	Fields[KANI_INDEX_LONGNAME].AsString;
						//	簡略名称
						GHojyoMA_PrintSimpleName.AsString	:=	Fields[KANI_INDEX_SIMPLENAME].AsString;
                    	//	付箋区分
                        case Fields[KANI_INDEX_FUSENKBN].AsInteger of
                            RED:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFRed.Bitmap);
                            GREEN:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFGreen.Bitmap);
                            BLUE:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFBlue.Bitmap);
                            ORANGE:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFOrange.Bitmap);
                        end;

						GHojyoMA_Print.Post;

						NEXT;
					end;
				except
					DmqPrint.Free;
				end;
			end;
		end;
		JITUZAISHOSAI:			// 実在工事詳細
		begin
            fnGetKanseiFuriInfo();		// 完成振替情報取得

			with DmqPrint do
			begin
                SQL.ADD(SHOSAI_SQL);

				if (stStart <> '') and (stEnd = '') then
				begin
					SQL.ADD(' AND MA.GCode >= :StartGCode');
					ParamByName('StartGCode').AsString	:=	stStart;
				end
				else if (stStart = '') and (stEnd <> '') then
				begin
					SQL.ADD(' AND MA.GCode <= :EndGCode');
					ParamByName('EndGCode').AsString	:=	stEnd;
				end
				else if (stStart <> '') and (stEnd <> '') then
				begin
					SQL.ADD(' AND MA.GCode >= :StartGCode AND  MA.GCode <= :EndGCode');
					ParamByName('StartGCode').AsString	:=	stStart;
					ParamByName('EndGCode').AsString	:=	stEnd;
				end;
//<TAX> ADD St
                // 予定工期終了日(開始)
                if param.pvrStDate2 <> 0 then
                begin
                    SQL.ADD(' AND KI.YoteiDateEN >= :StartYoteiDateEN');
                    ParamByName('StartYoteiDateEN').AsInteger	:=	param.pvrStDate2;
                end;

                // 予定工期終了日(終了)
                if param.pvrEdDate2 <> 0 then
                begin
                    SQL.ADD(' AND KI.YoteiDateEN <= :EndYoteiDateEN');
                    ParamByName('EndYoteiDateEN').AsInteger	:=	param.pvrEdDate2;
                end;
//<TAX> ADD Ed
                SetFld('pMastKbn').asInteger := m_nMasterDivision;
                SetFld('pSumKbn').asInteger := 0;

				//	出力順序
				if (iOrder = CODEORDER) then
					SQL.ADD(' ORDER BY MA.GCode')
				else
					SQL.ADD(' ORDER BY MA.Renso');

                Open();  //<269> ADD

				while EOF <> true do
				begin
//<TAX> ADD St
                    // 契約情報存在チェック
                    if not ExistCheck() then
                    begin
                        Next;
                        continue;
                    end;
//<TAX> ADD Ed
					crKeiyaku	    :=	0;
					crShohi		    :=	0;
					crNyukin	    :=	0;
                    crSubKeiyaku    :=	0;
                    crSubShohi      :=	0;
					JHojyoMA_Print.Append();

				    // 工事外部ｺｰﾄﾞ
                    stCode := fnSetGCode(Fields[INDEX_GCODE].AsString,MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,0);
                    JHojyoMA_PrintGCode.AsString		:=	stCode;

				    // 連想ｼﾝﾎﾞﾙ
					JHojyoMA_PrintRenChar.AsString		:=	Fields[INDEX_RENSO].AsString;

				    // 正式名称
					JHojyoMA_PrintLongName.AsString     :=	Fields[INDEX_LONGNAME].AsString;

				    // 簡略名称
					JHojyoMA_PrintSimpleName.AsString	:=  Fields[INDEX_SIMPLENAME].AsString;

				    // 更新日時
					if Fields[INDEX_UPDATETM].IsNull then
                    begin
                        JHojyoMA_PrintUpDateTime.Clear;
                    end
					else
					begin
						dDate := Fields[INDEX_UPDATETM].AsDateTime;
						if m_iRekiKbn = 0 then				// 和暦
                        begin
                            JHojyoMA_PrintUpDateTime.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd hh:mm:ss', dDate );
                        end
						else
                        begin
                            JHojyoMA_PrintUpDateTime.AsString	:=	FormatDateTime( 'yyyy/mm/dd hh:mm:ss', dDate );
                        end;

					end;

				    // 入力区分
                    JHojyoMA_PrintBunCode.AsInteger             :=	Fields[INDEX_BUNCODE].AsInteger;

					if Fields[INDEX_BUNCODE].AsInteger <> 9 then
                    begin
						JHojyoMA_PrintBunCodeName.AsString	:=	sBun[Fields[INDEX_BUNCODE].AsInteger];
                    end
					else
                    begin
						JHojyoMA_PrintBunCodeName.AsString	:=	sBun[2];
                    end;

				    // 完成年月日
					if Fields[INDEX_FINISHDATE].IsNull then
                    begin
						JHojyoMA_PrintFinishDate.Clear;
                    end
					else
					begin
						dDate := Fields.Fields[INDEX_FINISHDATE].AsDateTime;
						if m_iRekiKbn = 0 then				// 和暦
                        begin
							JHojyoMA_PrintFinishDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                        end
						else
                        begin
							JHojyoMA_PrintFinishDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                        end;
					end;

				    // 翌期移送区分
					JHojyoMA_PrintMoveKbn.AsInteger		:=	Fields[INDEX_MOVEKBN].AsInteger;
					JHojyoMA_PrintMoveKbnName.AsString	:=	sMove[Fields[INDEX_MOVEKBN].AsInteger];

                    if ( MasterInfo_DMemDataSpHojyoNCd1.AsFloat = Fields[INDEX_NCODE].AsFloat ) then  // 工事内部コード
                    begin
						    JHojyoMA_PrintTokCaption.AsString	:=  '特殊' + MasterInfo_DMemDataJHojyoName.AsString + 'として使用';
                    end
					else
                    begin
                        JHojyoMA_PrintTokCaption.AsString	:=  '';
                    end;

					if Fields[INDEX_FUSENKBN].AsInteger <> 0 then
					begin
						case Fields[INDEX_FUSENKBN].AsInteger of	//	付箋区分
							RED:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFRed.Bitmap);
							GREEN:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFGreen.Bitmap);
							BLUE:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFBlue.Bitmap);
							ORANGE:	TGraphicField(JHojyoMA_PrintFusen).Assign(GFOrange.Bitmap);
						end;
						JHojyoMA_PrintFusenCmt.AsString     := Fields[INDEX_FUSENCMNT].AsString;    // 付箋コメント
					end;

                    //	郵便番号（基番）
                    if Fields[INDEX_ZIPCODE1].AsInteger <> 0 then
                    begin
                        JHojyoMA_PrintZipCode1.AsInteger        :=	Fields[INDEX_ZIPCODE1].AsInteger;

                        //	郵便番号（枝番）
                        if Fields[INDEX_ZIPCODE2].AsInteger <> 0 then
                        begin
                            JHojyoMA_PrintZipCode2.AsInteger	:=	Fields[INDEX_ZIPCODE2].AsInteger;
                        end;
                    end
                    else
                    begin
                        //	郵便番号（枝番）
                        if Fields.Fields[INDEX_ZIPCODE2].AsInteger <> 0 then
                        begin
                            JHojyoMA_PrintZipCode2.AsInteger	:=	Fields.Fields[INDEX_ZIPCODE2].AsInteger;
                        end;
                    end;
                    //	住所（上段）
                    JHojyoMA_PrintAddress1.AsString		    :=	Fields[INDEX_ADDRESS1].AsString;

                    //	住所（下段）
                    JHojyoMA_PrintAddress2.AsString		    :=	Fields[INDEX_ADDRESS2].AsString;

                    //	電話番号
                    JHojyoMA_PrintTelNo.AsString		    :=	Fields[INDEX_TELNO].AsString;

                    //	担当者コード
                    if Fields[INDEX_PERSONNCODE].AsFloat <> 0 then
                    begin
                        // 外部コード
                        stCode := fnSetGCode(Fields[INDEX_PERSONGCODE].AsString,MasterInfo_DMemDataCodeAttrShain.AsInteger,MasterInfo_DMemDataCodeDigitShain.AsInteger,0);
                        JHojyoMA_PrintPersonCode.AsString	:=	stCode;
                        // 担当者名
                      if JHojyoMA_PrintPersonCode.AsString	 <> '' then
                            JHojyoMA_PrintPersonCodeName.AsString	:=	Fields[INDEX_PERSONNAME].AsString;
                    end;

                    // 取引先コード
                    if Fields[INDEX_COSTOMERNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields.Fields[INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                        JHojyoMA_PrintCostomerCode.AsString := stCode;
                        // 取引先名
                        if JHojyoMA_PrintCostomerCode.AsString <> '' then
                            JHojyoMA_PrintCostomerCodeName.AsString := Fields[INDEX_COSTOMERCODENAME].AsString;
                    end;

                    // 取引先名称(入力)
                    JHojyoMA_PrintCostomerName.AsString := Fields[INDEX_COSTOMERNAME].AsString;

                    // 部門コード
                    if Fields[INDEX_BMNNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields.Fields[INDEX_BMNGCODE].AsString,MasterInfo_DMemDataCodeAttrBmn.AsInteger,MasterInfo_DMemDataCodeDigitBmn.AsInteger,0);
                        JHojyoMA_PrintBmnCode.AsString  := stCode;
                        // 部門名
                        if JHojyoMA_PrintBmnCode.AsString <> '' then
                            JHojyoMA_PrintBmnCodeName.AsString := Fields[INDEX_BMNNAME].AsString;

                    end;

					//	計上基準
                    JHojyoMA_PrintSalesBase.AsInteger	    := Fields.Fields[INDEX_SALESBASE].AsInteger;
                    JHojyoMA_PrintSalesBaseName.AsString    := sSales[Fields.Fields[INDEX_SALESBASE].AsInteger];

					//	工事配賦区分
                    JHojyoMA_PrintHaifuKbn.AsInteger	    := Fields.Fields[INDEX_HAIFUKBN].AsInteger;
                    JHojyoMA_PrintHaifuKbnName.AsString     := sHaifu[Fields.Fields[INDEX_HAIFUKBN].AsInteger];

					//	開始着工年月日
                    if Fields[INDEX_SCHEDATEST].IsNull then
                    begin
							JHojyoMA_PrintStartDate.Clear;
                    end
                    else if Fields[INDEX_SCHEDATEST].AsDateTime = m_cJNTArea.getDefDate(1) then
                    begin
                        JHojyoMA_PrintStartDate.Clear;
                    end
                    else
                    begin
                        dDate := Fields[INDEX_SCHEDATEST].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                        begin
                            JHojyoMA_PrintStartDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                        end
                        else
                        begin
                            JHojyoMA_PrintStartDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                        end;
                    end;
					//	終了着工年月日
                    if Fields[INDEX_SCHEDATEEN].IsNull then
                    begin
                        JHojyoMA_PrintEndDate.Clear;
                    end
                    else if Fields[INDEX_SCHEDATEEN].AsDateTime = m_cJNTArea.getDefDate(2) then
                    begin
                        JHojyoMA_PrintEndDate.Clear;
                    end
                    else
                    begin
                        dDate := Fields[INDEX_SCHEDATEEN].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                        begin
                            JHojyoMA_PrintEndDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                        end
                        else
                        begin
                            JHojyoMA_PrintEndDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                        end;
                    end;

					//	開始予定日
                    if Fields[INDEX_YOTEIDATEST].IsNull then
                    begin
                        JHojyoMA_PrintScheduleDateS.Clear;
                    end
                    else if Fields[INDEX_YOTEIDATEST].AsDateTime = m_cJNTArea.getDefDate(1) then
                    begin
                        JHojyoMA_PrintScheduleDateS.Clear;
                    end
                    else
                    begin
                        dDate := Fields[INDEX_YOTEIDATEST].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                        begin
                            JHojyoMA_PrintScheduleDateS.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                        end
                        else
                        begin
                            JHojyoMA_PrintScheduleDateS.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                        end;
                    end;

					//	完成予定日
                    if Fields.Fields[INDEX_YOTEIDATEEN].IsNull then
                    begin
                        JHojyoMA_PrintScheduleDate.Clear;
                    end
                    else if Fields.Fields[INDEX_YOTEIDATEEN].AsDateTime = m_cJNTArea.getDefDate(2) then
                    begin
                        JHojyoMA_PrintScheduleDate.Clear;
                    end
                    else
                    begin
                        dDate := Fields.Fields[INDEX_YOTEIDATEEN].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                        begin
                            JHojyoMA_PrintScheduleDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                        end
                        else
                        begin
                            JHojyoMA_PrintScheduleDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                        end;
                    end;

                    // 備考
                    JHojyoMA_PrintBIKO.AsString     := Fields[INDEX_REMARKS].AsString;

                    // 工事概要
                    JHojyoMA_PrintGaiyou.AsString   := Fields[INDEX_GAIYOU].AsString;

                    // FAX番号
                    JHojyoMA_PrintFAXNo.AsString    := Fields[INDEX_FAXNO].AsString;

                    // 請負区分
                    JHojyoMA_PrintUkeoiKbn.AsInteger    := Fields[INDEX_UKEOIKBN].AsInteger;
                    JHojyoMA_PrintUkeoiKbnName.AsString := sUkeoi[Fields[INDEX_UKEOIKBN].AsInteger];

                    // 施主ｺｰﾄﾞ
                    if Fields[INDEX_SESNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_SESGCODE].AsString,MasterInfo_DMemDataCodeAttrSeshu.AsInteger,MasterInfo_DMemDataCodeDigitSeshu.AsInteger,0);
                        JHojyoMA_PrintSeshuCode.AsString	:=	stCode;
                        // 施主名称
                        if JHojyoMA_Print.FieldByName('SeshuCode').AsString <> '' then
                        begin
                            JHojyoMA_PrintSeshuCodeName.AsString    :=	Fields[INDEX_SESNAME].AsString;
                        end;
                    end;

                    // 施行部門コード
                    if Fields.Fields[INDEX_SEIBMNNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_SEIBMNGCODE].AsString,MasterInfo_DMemDataCodeAttrBmn.AsInteger,MasterInfo_DMemDataCodeDigitBmn.AsInteger,0);
                        JHojyoMA_PrintSekouBmnCode.AsString		:=	stCode;
                        // 施行部門名
                        if JHojyoMA_PrintSekouBmnCode.AsString <> '' then
                            JHojyoMA_PrintSekouBmnCodeName.AsString	:=  Fields[INDEX_SEIBMNNAME].AsString;
                    end;

                    // 施行担当者
                    if Fields.Fields[INDEX_SEITANNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_SEITANGCODE].AsString,MasterInfo_DMemDataCodeAttrShain.AsInteger,MasterInfo_DMemDataCodeDigitShain.AsInteger,0);
                        JHojyoMA_PrintSekouPersonCode.AsString	:=	stCode;

                        // 施行担当者名
                        if JHojyoMA_PrintSekouPersonCode.AsString <> '' then
                            JHojyoMA_PrintSekouPersonCodeName.AsString	:= Fields[INDEX_SEITANNAME].AsString;
                    end;


                    //<273> St　
                    // mod if m_pMyAppRecord.m_sParameter = '1' then       // 工事のみ
                    if (m_pMyAppRecord.m_sParameter = '1') or                                           // 工事の場合
                       ((m_pMyAppRecord.m_sParameter <> '1') and (TMSeries.IsGalielopt2 = True)) then    // Gali2 プロジェクトの場合
                    //<273> Ed
                    begin
                        //	完成振替パターン
                        JHojyoMA_PrintDetailKbn1.AsInteger	    :=	Fields[INDEX_DETAILKBN1].AsInteger;
                        JHojyoMA_PrintDetailKbn1Name.AsString   :=	sDetail1[Fields.Fields[INDEX_DETAILKBN1].AsInteger];

                        if MasterInfo_DMemDataKojKbn2.AsInteger = 0 then
                        begin
                            // 売上高自動振替区分
                            JHojyoMA_PrintKojKbn2.AsInteger	        := 1;
                            JHojyoMA_PrintKojKbn2Name.AsString      := sKojKbn2[1];
                            //	完成売上高相手勘定区分
                            JHojyoMA_PrintDetailKbn2.AsInteger	    := 0;
                            JHojyoMA_PrintDetailKbn2Name.AsString   := sDetail2[0];
                            //	売上計上科目コード
                            JHojyoMA_PrintSalesKmkCd.AsInteger	    := 0;
                            JHojyoMA_PrintSalesKmkCdName.AsString	:= '';
                        end
                        else
                        begin
                            if Fields.Fields[46].AsInteger = 9 then
                            begin
                                //	完成売上高相手勘定区分
                                JHojyoMA_PrintDetailKbn2.AsInteger	    := 0;
                                JHojyoMA_PrintDetailKbn2Name.AsString   := sDetail2[0];
                                // 売上高自動振替区分
//<244> MOD St
//                                JHojyoMA_PrintSalesKmkCd.AsInteger	        := 1;
//                                JHojyoMA_PrintSalesKmkCdName.AsString      := sKojKbn2[1];
                                JHojyoMA_PrintKojKbn2.AsInteger	        := 1;
                                JHojyoMA_PrintKojKbn2Name.AsString      := sKojKbn2[1];
//<244> MOD Ed
                            end
                            else
                            begin
                                // 売上高自動振替区分
                                JHojyoMA_PrintKojKbn2.AsInteger	        := 0;
                                JHojyoMA_PrintKojKbn2Name.AsString      := sKojKbn2[0];
                                //	完成売上高相手勘定区分
                                JHojyoMA_PrintDetailKbn2.AsInteger	    := Fields[INDEX_DETAILKBN2].AsInteger;
                                JHojyoMA_PrintDetailKbn2Name.AsString   := sDetail2[Fields.Fields[INDEX_DETAILKBN2].AsInteger];
                                //	売上計上科目コード
                                JHojyoMA_PrintSalesKmkCd.AsInteger	    := Fields[INDEX_SALESKMKCD].AsInteger;
                                JHojyoMA_PrintSalesKmkCdName.AsString	:= Fields[INDEX_SALESKMKCDNAME].AsString;
                            end;
                        end;

                    end;

                    //	工種管理区分
                    JHojyoMA_PrintPartKbn.AsInteger		:=	Fields[INDEX_PARTKBN].AsInteger;
                    JHojyoMA_PrintPartKbnName.AsString	:=	sPart[Fields.Fields[INDEX_PARTKBN].AsInteger];

                    //	工種パターンNO
                    JHojyoMA_PrintPatternNo.AsInteger	:=	Fields[INDEX_PTNNO].AsInteger;
                    if JHojyoMA_PrintPatternNo.AsInteger <> 0 then
                        JHojyoMA_PrintPatternNoName.AsString    := Fields[INDEX_PTNNAME].AsString;
//<TAX> ADD St
                    // 税込／税抜
                    JHojyoMA_PrintPartPattern.AsInteger :=  Fields[INDEX_PARTPATTERN].AsInteger;
                    JHojyoMA_PrintPartPatternName.AsString := TAX_TYPENAME[Fields[INDEX_PARTPATTERN].AsInteger];
//<TAX> ADD Ed
                    //	工事完成振替
                    j := 1;
                    if m_aKanseiFuriInfo[1].UseKbn > 0 then // セグメント１
                    begin
                        //  セグメント１内部コード
                        if Fields[INDEX_SEG1NCODE].AsFloat <> 0 then
                        begin
                            // セグメント１外部コード
                            stCode := fnSetGCode(Fields[INDEX_SEG1GCODE].AsString,m_aKanseiFuriInfo[1].CodeAttr,m_aKanseiFuriInfo[1].CodeDigit,1);
//                            JHojyoMA_PrintKanseiCd1.AsString    := stCode;
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString      := stCode;
                             // セグメント１名称
//                            JHojyoMA_PrintKanseiNm1.AsString    := Fields[INDEX_SEG1NM].AsString;
                            	JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG1NM].AsString;
                            // セグメント１マスター区分
//                            JHojyoMA_PrintMasKbn1.AsInteger     := m_aKanseiFuriInfo[1].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger        := m_aKanseiFuriInfo[1].MasterKbn;
                            // セグメント１マスター名称
//                            JHojyoMA_PrintMasNm1.AsString       := m_aKanseiFuriInfo[1].JHojyoName;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString         := m_aKanseiFuriInfo[1].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[2].UseKbn > 0 then // セグメント２
                    begin
                        if Fields[INDEX_SEG2NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG2GCODE].AsString,m_aKanseiFuriInfo[2].CodeAttr,m_aKanseiFuriInfo[2].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG2NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[2].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[2].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[3].UseKbn > 0 then // セグメント３
                    begin
                        if Fields[INDEX_SEG3NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG3GCODE].AsString,m_aKanseiFuriInfo[3].CodeAttr,m_aKanseiFuriInfo[3].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG3NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[3].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[3].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[4].UseKbn > 0 then // セグメント４
                    begin
                        if Fields[INDEX_SEG4NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG4GCODE].AsString,m_aKanseiFuriInfo[4].CodeAttr,m_aKanseiFuriInfo[4].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG4NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[4].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[4].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[5].UseKbn > 0 then // セグメント５
                    begin
                        if Fields[INDEX_SEG5NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG5GCODE].AsString,m_aKanseiFuriInfo[5].CodeAttr,m_aKanseiFuriInfo[5].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG5NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[5].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[5].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[6].UseKbn > 0 then // セグメント６
                    begin
                        if Fields.Fields[INDEX_SEG6NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields.Fields[INDEX_SEG6GCODE].AsString,m_aKanseiFuriInfo[6].CodeAttr,m_aKanseiFuriInfo[6].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG6NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[6].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[6].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[7].UseKbn > 0 then // セグメント７
                    begin
                        if Fields[INDEX_SEG7NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG7GCODE].AsString,m_aKanseiFuriInfo[7].CodeAttr,m_aKanseiFuriInfo[7].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG7NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[7].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[7].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[8].UseKbn > 0 then // セグメント８
                    begin
                        if Fields[INDEX_SEG8NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG8GCODE].AsString,m_aKanseiFuriInfo[8].CodeAttr,m_aKanseiFuriInfo[8].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG8NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[8].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[8].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[9].UseKbn > 0 then // セグメント９
                    begin
                        if Fields[INDEX_SEG9NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG9GCODE].AsString,m_aKanseiFuriInfo[9].CodeAttr,m_aKanseiFuriInfo[9].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG9NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[9].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[9].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[10].UseKbn > 0 then // セグメント１０
                    begin
                        if Fields[INDEX_SEG10NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_SEG10CODE].AsString,m_aKanseiFuriInfo[10].CodeAttr,m_aKanseiFuriInfo[10].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_SEG10NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[10].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[10].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[11].UseKbn > 0 then // プロジェクト１
                    begin
                        if Fields[INDEX_PRJ1NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ1GCODE].AsString,m_aKanseiFuriInfo[11].CodeAttr,m_aKanseiFuriInfo[11].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ1NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[11].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[11].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[12].UseKbn > 0 then // プロジェクト２
                    begin
                        if Fields[INDEX_PRJ2NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ2GCODE].AsString,m_aKanseiFuriInfo[12].CodeAttr,m_aKanseiFuriInfo[12].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ2NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[12].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[12].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[13].UseKbn > 0 then // プロジェクト３
                    begin
                        if Fields[INDEX_PRJ3NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ3GCODE].AsString,m_aKanseiFuriInfo[13].CodeAttr,m_aKanseiFuriInfo[13].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ3NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[13].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[13].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[14].UseKbn > 0 then // プロジェクト４
                    begin
                        if Fields[INDEX_PRJ4NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ4GCODE].AsString,m_aKanseiFuriInfo[14].CodeAttr,m_aKanseiFuriInfo[14].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ4NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[14].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[14].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[15].UseKbn > 0 then // プロジェクト５
                    begin
                        if Fields[INDEX_PRJ5NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ5GCODE].AsString,m_aKanseiFuriInfo[15].CodeAttr,m_aKanseiFuriInfo[15].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ5NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[15].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[15].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[16].UseKbn > 0 then // プロジェクト６
                    begin
                        if Fields[INDEX_PRJ6NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ6GCODE].AsString,m_aKanseiFuriInfo[16].CodeAttr,m_aKanseiFuriInfo[16].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ6NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[16].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[16].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[17].UseKbn > 0 then // プロジェクト７
                    begin
                        if Fields[INDEX_PRJ7NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ7GCODE].AsString,m_aKanseiFuriInfo[17].CodeAttr,m_aKanseiFuriInfo[17].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ7NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[17].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[17].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[18].UseKbn > 0 then // プロジェクト８
                    begin
                        if Fields[INDEX_PRJ8NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ8GCODE].AsString,m_aKanseiFuriInfo[18].CodeAttr,m_aKanseiFuriInfo[18].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ8NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[18].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[18].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[19].UseKbn > 0 then // プロジェクト９
                    begin
                        if Fields[INDEX_PRJ9NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ9GCODE].AsString,m_aKanseiFuriInfo[19].CodeAttr,m_aKanseiFuriInfo[19].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ9NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[19].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[19].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[20].UseKbn > 0 then // プロジェクト１０
                    begin
                        if Fields[INDEX_PRJ10NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_PRJ10GCODE].AsString,m_aKanseiFuriInfo[20].CodeAttr,m_aKanseiFuriInfo[20].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_PRJ10NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[20].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[20].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[21].UseKbn > 0 then // 汎用補助１
                    begin
                        if Fields[INDEX_HAN1NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_HAN1GCODE].AsString,m_aKanseiFuriInfo[21].CodeAttr,m_aKanseiFuriInfo[21].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_HAN1NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[21].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[21].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[22].UseKbn > 0 then // 汎用補助２
                    begin
                        if Fields[INDEX_HAN2NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_HAN2GCODE].AsString,m_aKanseiFuriInfo[22].CodeAttr,m_aKanseiFuriInfo[22].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_HAN2NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[22].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[22].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[23].UseKbn > 0 then // 汎用補助３
                    begin
                        if Fields[INDEX_HAN3NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_HAN3GCODE].AsString,m_aKanseiFuriInfo[23].CodeAttr,m_aKanseiFuriInfo[23].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_HAN3NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[23].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[23].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[24].UseKbn > 0 then // 汎用補助４
                    begin
                        if Fields[INDEX_HAN4NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_HAN4GCODE].AsString,m_aKanseiFuriInfo[24].CodeAttr,m_aKanseiFuriInfo[24].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_HAN4NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[24].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[24].JHojyoName;
                            inc(j);
                        end;
                    end;

                    if m_aKanseiFuriInfo[25].UseKbn > 0 then // 汎用補助５
                    begin
                        if Fields[INDEX_HAN5NCODE].AsFloat <> 0 then
                        begin
                            stCode := fnSetGCode(Fields[INDEX_HAN5GCODE].AsString,m_aKanseiFuriInfo[25].CodeAttr,m_aKanseiFuriInfo[25].CodeDigit,1);
                            JHojyoMA_Print.FieldByName('KanseiCd'  + IntToStr(j)).AsString  := stCode;
                            JHojyoMA_Print.FieldByName('KanseiNm' + IntToStr(j)).AsString   := Fields[INDEX_HAN5NM].AsString;
                            JHojyoMA_Print.FieldByName('MasKbn' + IntToStr(j)).AsInteger    := m_aKanseiFuriInfo[25].MasterKbn;
                            JHojyoMA_Print.FieldByName('MasNm' + IntToStr(j)).AsString      := m_aKanseiFuriInfo[25].JHojyoName;
//                            inc(j);
                        end;
                    end;

                    //	工事契約・入金情報
                    DmqKInfo2.Close;
                    DmqKInfo2.SQL.Clear;

                    DmqKInfo2.SQL.Add(SHOSAI_K_SQL);
                    DmqKInfo2.SQL.Add(SHOSAI_K_SQL_ORDERBY);  //<TAX> ADD

//<255> DEL                    DmqKInfo2.ParamByName('Code').AsFloat	:=	Fields[INDEX_NCODE].AsFloat;
                    DmqKInfo2.ParamByName('Code').AsString	:=	Fields[INDEX_NCODE].AsString;  //<255> ADD

                    DmqKInfo2.Open;
{
                    if	( not DmqKInfo2.Open ) then
                    begin
                        ErrorMessageDsp(DmqKInfo2);
                        dqMasterData.Close ();
                        dqMasterData.Free  ();
                        Result := false;
                        Exit;
                    end;
}

                    // 契約情報
                    iKCount     := 1;
                    iNCount     := 1;
                    iSubCount   := 0;
                    while DmqKInfo2.EOF = False do
                    begin
                        // 契約情報
                        if DmqKInfo2.Fields[K_INDEX_INFOKBN].AsInteger = 1 then
                        begin

                            if iKCount < 7 then
                            begin
//<TAX> MOD St
                                case iKCount of
                                    1 : setContInfo(
                                            JHojyoMA_PrintContDateK1,
                                            JHojyoMA_PrintContNoK1,
                                            JHojyoMA_Printtax_rateK1Name,
                                            JHojyoMA_Printtax_rateK1,
                                            JHojyoMA_PrintContMoneyK1,
                                            JHojyoMA_Printsales_taxK1
                                            );
                                    2 : setContInfo(
                                            JHojyoMA_PrintContDateK2,
                                            JHojyoMA_PrintContNoK2,
                                            JHojyoMA_Printtax_rateK2Name,
                                            JHojyoMA_Printtax_rateK2,
                                            JHojyoMA_PrintContMoneyK2,
                                            JHojyoMA_Printsales_taxK2
                                            );
                                    3 : setContInfo(
                                            JHojyoMA_PrintContDateK3,
                                            JHojyoMA_PrintContNoK3,
                                            JHojyoMA_Printtax_rateK3Name,
                                            JHojyoMA_Printtax_rateK3,
                                            JHojyoMA_PrintContMoneyK3,
                                            JHojyoMA_Printsales_taxK3
                                            );
                                    4 : setContInfo(
                                            JHojyoMA_PrintContDateK4,
                                            JHojyoMA_PrintContNoK4,
                                            JHojyoMA_Printtax_rateK4Name,
                                            JHojyoMA_Printtax_rateK4,
                                            JHojyoMA_PrintContMoneyK4,
                                            JHojyoMA_Printsales_taxK4
                                            );
                                    5 : setContInfo(
                                            JHojyoMA_PrintContDateK5,
                                            JHojyoMA_PrintContNoK5,
                                            JHojyoMA_Printtax_rateK5Name,
                                            JHojyoMA_Printtax_rateK5,
                                            JHojyoMA_PrintContMoneyK5,
                                            JHojyoMA_Printsales_taxK5
                                            );
                                    6 : setContInfo(
                                            JHojyoMA_PrintContDateK6,
                                            JHojyoMA_PrintContNoK6,
                                            JHojyoMA_Printtax_rateK6Name,
                                            JHojyoMA_Printtax_rateK6,
                                            JHojyoMA_PrintContMoneyK6,
                                            JHojyoMA_Printsales_taxK6
                                            );
                                    7 : setContInfo(
                                            JHojyoMA_PrintContDateK7,
                                            JHojyoMA_PrintContNoK7,
                                            JHojyoMA_Printtax_rateK7Name,
                                            JHojyoMA_Printtax_rateK7,
                                            JHojyoMA_PrintContMoneyK7,
                                            JHojyoMA_Printsales_taxK7
                                            );
                                end;
{
                                case iKCount of
                                    1:
                                    begin
                                        // 契約年月日1
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK1.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK1.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK1.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK1.AsString         :=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK1.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK1.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK1.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK1Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK1Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK1Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK1Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    2:
                                    begin
                                        // 契約年月日2
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK2.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK2.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK2.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK2.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK2.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK2.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK2.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK2Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK2Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK2Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK2Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    3:
                                    begin
                                        // 契約年月日2
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK3.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK3.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK3.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK3.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;
                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK3.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK3.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK3.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK3Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK3Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK3Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK3Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    4:
                                    begin
                                        // 契約年月日4
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK4.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK4.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK4.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK4.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK4.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK4.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK4.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK4Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK4Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK4Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK3Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    5:
                                    begin
                                        // 契約年月日5
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK5.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK5.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK5.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK5.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK5.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK5.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK5.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK5Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK5Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK5Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK5Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    6:
                                    begin
                                        // 契約年月日6
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK6.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK6.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK6.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK6.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK6.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK6.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK6.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK6Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK6Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK6Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK6Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    7:
                                    begin
                                        // 契約年月日7
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            JHojyoMA_PrintContDateK7.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                JHojyoMA_PrintContDateK7.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                JHojyoMA_PrintContDateK7.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;
                                        // 契約書NO1
                                        JHojyoMA_PrintContNoK7.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額1（税込）
                                        JHojyoMA_PrintContMoneyK7.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        JHojyoMA_Printsales_taxK7.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        JHojyoMA_Printtax_rateK7.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            JHojyoMA_Printtax_rateK7Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                JHojyoMA_Printtax_rateK7Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                JHojyoMA_Printtax_rateK7Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                JHojyoMA_Printtax_rateK7Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                end;
}
//<TAX> MOD Ed
                            end
                            else
                            begin
                                crSubKeiyaku    := crSubKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                crSubShohi      := crSubShohi   + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                inc(iSubCount);
                            end;

                            inc(iKCount);
                        end
                        else if DmqKInfo2.Fields[K_INDEX_INFOKBN].AsInteger = 2 then
                        begin
                        // 入金情報
                            case iNCount of
                                1:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN1.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN1.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN1.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN1.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode1.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName1.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                2:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN2.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN2.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN2.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN2.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode2.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName2.AsString    :=  DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                3:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN3.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN3.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN3.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN3.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode3.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName3.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                4:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN4.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN4.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN4.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN4.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode4.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName4.AsString    :=  DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                5:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN5.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN5.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN5.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN5.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode5.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName5.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                6:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN6.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN6.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN6.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN6.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode6.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName6.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                7:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN7.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN7.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN7.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN7.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode7.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName7.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                8:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN8.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN8.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN8.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN8.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode8.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName8.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                9:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN9.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN9.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN9.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN9.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode9.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName9.AsString    := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                                10:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       JHojyoMA_PrintContDateN10.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            JHojyoMA_PrintContDateN10.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            JHojyoMA_PrintContDateN10.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    JHojyoMA_PrintContMoneyN10.AsCurrency      :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                    // 取引先
                                    stCode := fnSetGCode(DmqKInfo2.Fields[K_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                                    JHojyoMA_PrintCostomerCode10.AsString	:= stCode;
                                    JHojyoMA_PrintCostomerName10.AsString   := DmqKInfo2.Fields[K_INDEX_COSTOMERNMK].AsString;
                                end;
                            end;
                            inc(iNCount);
                        end;

                        DmqKInfo2.Next;
                    end;

                    if iKCount > 7 then
                    begin
                        JHojyoMA_PrintContNoK8.AsString			:=	'その他' + IntToStr(iSubCount) + '件';
                        JHojyoMA_PrintContMoneyK8.AsCurrency	:=	crSubKeiyaku;
                        JHojyoMA_Printsales_taxK8.AsCurrency	:=	crSubShohi;
                    end;

                    crKeiyaku   := crKeiyaku + crSubKeiyaku;
                    crShohi     := crShohi + crSubShohi;
                    // 契約金額合計
                    JHojyoMA_PrintKeiyakuG.AsCurrency   := crKeiyaku;
                    // 契約消費税額合計
                    JHojyoMA_PrintShohiG.AsCurrency     := crShohi;

					// 入金消費税額合計
                    JHojyoMA_PrintNyukinG.AsCurrency := crNyukin;

					JHojyoMA_Print.Post;

                    NEXT;
                end;
			end;

		end;
		GOUKEISHOSAI:				// 合計工事詳細
		begin
			with DmqPrint do
			begin
				//	合計詳細情報取得
				Close;
				SQL.Clear;
				SQL.ADD(SHOSAI_SQL);

				if (stStart <> '') and (stEnd = '') then
				begin
					SQL.ADD(' AND MA.GCode >= :StartGCode');
					ParamByName('StartGCode').AsString	:=	stStart;
				end
				else if (stStart = '') and (stEnd <> '') then
				begin
					SQL.ADD(' AND MA.GCode <= :EndGCode');
					ParamByName('EndGCode').AsString	:=	stEnd;
				end
				else if (stStart <> '') and (stEnd <> '') then
				begin
					SQL.ADD(' AND MA.GCode >= :StartGCode');
					SQL.ADD(' AND MA.GCode <= :EndGCode');
					ParamByName('StartGCode').AsString	:=	stStart;
					ParamByName('EndGCode').AsString	:=	stEnd;
				end;
//<TAX> ADD St
                // 予定工期終了日(開始)
                if param.pvrStDate2 <> 0 then
                begin
                    SQL.ADD(' AND KI.YoteiDateEN >= :StartYoteiDateEN');
                    ParamByName('StartYoteiDateEN').AsInteger	:=	param.pvrStDate2;
                end;

                // 予定工期終了日(終了)
                if param.pvrEdDate2 <> 0 then
                begin
                    SQL.ADD(' AND KI.YoteiDateEN <= :EndYoteiDateEN');
                    ParamByName('EndYoteiDateEN').AsInteger	:=	param.pvrEdDate2;
                end;
//<TAX> ADD Ed
                SetFld('pMastKbn').asInteger    := m_nMasterDivision;
                SetFld('pSumKbn').asInteger     := 1;

				//	出力順序
				if (iOrder = CODEORDER) then
					SQL.ADD(' ORDER BY MA.GCode')
				else
					SQL.ADD(' ORDER BY MA.Renso');

				Open;
				while EOF <> true do
				begin
//<TAX> ADD St
                    // 契約情報存在チェック
                    if not ExistCheck() then
                    begin
                        Next;
                        continue;
                    end;
//<TAX> ADD Ed
					crKeiyaku	:=	0;
					crShohi		:=	0;
					crNyukin	:=	0;
					GHojyoMA_Print.Append();

				    //外部ｺｰﾄﾞ
                    stCode := fnSetGCode(Fields[INDEX_GCODE].AsString,MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,0);
					GHojyoMA_PrintGCode.AsString		:= stCode;

				    //連想ｼﾝﾎﾞﾙ
					GHojyoMA_PrintRenChar.AsString		:= Fields[INDEX_RENSO].AsString;

				    //正式名称
					GHojyoMA_PrintLongName.AsString		:= Fields[INDEX_LONGNAME].AsString;

				    //簡略名称
					GHojyoMA_PrintSimpleName.AsString   := Fields[INDEX_SIMPLENAME].AsString;

			    	//更新日時
					if Fields[INDEX_UPDATETM].IsNull then
						GHojyoMA_PrintUpDateTime.Clear
					else
					begin
						dDate := Fields[INDEX_UPDATETM].AsDateTime;
						if m_iRekiKbn = 0 then				// 和暦
							GHojyoMA_PrintUpDateTime.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd hh:mm:ss', dDate )
						else
							GHojyoMA_PrintUpDateTime.AsString   :=	FormatDateTime( 'yyyy/mm/dd hh:mm:ss', dDate );
					end;

				    //完成年月日
					if Fields[INDEX_FINISHDATE].IsNull then
						GHojyoMA_PrintFinishDate.Clear
					else
					begin
						dDate := Fields[INDEX_FINISHDATE].AsDateTime;
						if m_iRekiKbn = 0 then				// 和暦
							GHojyoMA_PrintFinishDate.AsString   :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
						else
							GHojyoMA_PrintFinishDate.AsString   :=	FormatDateTime( 'yyyy/mm/dd', dDate );
					end;

				    //翌期移送区分
					GHojyoMA_PrintMoveKbn.AsInteger		:=  Fields[INDEX_MOVEKBN].AsInteger;
					GHojyoMA_PrintMoveKbnName.AsString	:=  sMove[Fields[INDEX_MOVEKBN].AsInteger];

				    //名寄せ区分
					GHojyoMA_PrintRootKbn.AsInteger		:=	Fields[INDEX_ROOTKBN].AsInteger;
					GHojyoMA_PrintRootKbnName.AsString  :=  sRoot[Fields[INDEX_ROOTKBN].AsInteger];

					// 付箋
                    case Fields[INDEX_FUSENKBN].AsInteger of	//	付箋区分
                        RED:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFRed.Bitmap);
						GREEN:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFGreen.Bitmap);
						BLUE:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFBlue.Bitmap);
                        ORANGE:	TGraphicField(GHojyoMA_PrintFusen).Assign(GFOrange.Bitmap);
                    end;
                    GHojyoMA_PrintFusenCmt.AsString := Fields[INDEX_FUSENCMNT].AsString;    // 付箋コメント

					//	工事詳細情報

                    // 郵便番号（基番）
                    if Fields[INDEX_ZIPCODE1].AsInteger <> 0 then
                    begin
                        GHojyoMA_PrintZipCode1.AsInteger	:=  Fields[INDEX_ZIPCODE1].AsInteger;
                        GHojyoMA_PrintstrZipCode1.AsString	:=	Format('%.3d', [Fields[INDEX_ZIPCODE1].AsInteger]);

                        //	郵便番号（枝番）
                        if Fields[INDEX_ZIPCODE2].AsInteger <> 0 then
                        begin
                            GHojyoMA_PrintZipCode2.AsInteger    :=  Fields[INDEX_ZIPCODE2].AsInteger;
                            GHojyoMA_PrintstrZipCode2.AsString  :=	Format('%.4d', [Fields[INDEX_ZIPCODE2].AsInteger]);
                        end;
                    end
                    else
                    begin
                        // 郵便番号（枝番）
                        if Fields[INDEX_ZIPCODE2].AsInteger <> 0 then
                        begin
                            GHojyoMA_PrintZipCode2.AsInteger	:= Fields[INDEX_ZIPCODE2].AsInteger;
                            GHojyoMA_PrintstrZipCode2.AsString  := Format('%.4d', [Fields[INDEX_ZIPCODE2].AsInteger]);
                        end;
                    end;

                    //住所（上段）
                    GHojyoMA_PrintAddress1.AsString     :=  Fields[INDEX_ADDRESS1].AsString;

                    // 住所（下段）
                    GHojyoMA_PrintAddress2.AsString		:=  Fields[INDEX_ADDRESS2].AsString;

                    // 電話番号
                    GHojyoMA_PrintTelNo.AsString		:=  Fields[INDEX_TELNO].AsString;

                    // 担当者コード
                    if Fields[INDEX_PERSONNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_PERSONGCODE].AsString,MasterInfo_DMemDataCodeAttrShain.AsInteger,MasterInfo_DMemDataCodeDigitShain.AsInteger,0);
                        GHojyoMA_PrintPersonCode.AsString   :=	stCode;
                        if GHojyoMA_PrintPersonCode.AsString <> '' then
                            GHojyoMA_PrintPersonCodeName.AsString   :=  Fields[INDEX_PERSONNAME].AsString;
                    end;

                    // 取引先コード
                    if Fields[INDEX_COSTOMERNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields.Fields[INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                        GHojyoMA_PrintCostomerCode.AsString	:= stCode;
                        // 取引先名
                        if GHojyoMA_PrintCostomerCode.AsString <> '' then
                            GHojyoMA_PrintCostomerCodeName.AsString := Fields[INDEX_COSTOMERCODENAME].AsString;
                    end;

                    // 取引先名称(入力)
                    GHojyoMA_PrintCostomerName.AsString := Fields[INDEX_COSTOMERNAME].AsString;

                    // 部門コード
                    if Fields[INDEX_BMNNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields.Fields[INDEX_BMNGCODE].AsString,MasterInfo_DMemDataCodeAttrBmn.AsInteger,MasterInfo_DMemDataCodeDigitBmn.AsInteger,0);
                        GHojyoMA_PrintBmnCode.AsString  := stCode;

                        // 部門名
                        if GHojyoMA_PrintBmnCode.AsString <> '' then
                            GHojyoMA_PrintBmnCodeName.AsString := Fields[INDEX_BMNNAME].AsString;
                    end;

					//計上基準
                    GHojyoMA_PrintSalesBase.AsInteger       := Fields[INDEX_SALESBASE].AsInteger;
                    GHojyoMA_PrintSalesBaseName.AsString    := sSales[Fields[INDEX_SALESBASE].AsInteger];

					//工事配賦区分
                    GHojyoMA_PrintHaifuKbn.AsInteger	    := Fields[INDEX_HAIFUKBN].AsInteger;
                    GHojyoMA_PrintHaifuKbnName.AsString     := sHaifu[Fields[INDEX_HAIFUKBN].AsInteger];

					//着工年月日開始
                    if Fields[INDEX_SCHEDATEST].IsNull then
							GHojyoMA_PrintStartDate.Clear
                    else
                    begin
							dDate := Fields[INDEX_SCHEDATEST].AsDateTime;
							if m_iRekiKbn = 0 then				// 和暦
								GHojyoMA_PrintStartDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
							else
								GHojyoMA_PrintStartDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                    end;
					//着工年月日終了
                    if Fields[INDEX_SCHEDATEEN].IsNull then
                        GHojyoMA_PrintEndDate.Clear
                    else
                    begin
                        dDate := Fields[INDEX_SCHEDATEEN].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                            GHojyoMA_PrintEndDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                        else
                            GHojyoMA_PrintEndDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                    end;

					//開始予定日
                    if Fields[INDEX_YOTEIDATEST].IsNull then
                        GHojyoMA_PrintScheduleDateS.Clear
                    else
                    begin
                        dDate := Fields[INDEX_YOTEIDATEST].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                            GHojyoMA_PrintScheduleDateS.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                        else
                            GHojyoMA_PrintScheduleDateS.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                    end;

					//	完成予定日
                    if Fields[INDEX_YOTEIDATEEN].IsNull then
                        GHojyoMA_PrintScheduleDate.Clear
                    else
                    begin
                        dDate := Fields[INDEX_YOTEIDATEEN].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                            GHojyoMA_PrintScheduleDate.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                        else
                            GHojyoMA_PrintScheduleDate.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                    end;

                    //備考
                    GHojyoMA_PrintBIKO.AsString         := Fields[INDEX_REMARKS].AsString;

                    //工事概要
                    GHojyoMA_PrintGaiyou.AsString       := Fields[INDEX_GAIYOU].AsString;

                    //FAX番号
                    GHojyoMA_PrintFAXNo.AsString        := Fields[INDEX_FAXNO].AsString;

                    //請負区分
                    GHojyoMA_PrintUkeoiKbn.AsInteger    := Fields[INDEX_UKEOIKBN].AsInteger;
                    GHojyoMA_PrintUkeoiKbnName.AsString := sUkeoi[Fields[INDEX_UKEOIKBN].AsInteger];

                    //施主ｺｰﾄﾞ
                    if Fields[INDEX_SESNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_SESGCODE].AsString,MasterInfo_DMemDataCodeAttrSeshu.AsInteger,MasterInfo_DMemDataCodeDigitSeshu.AsInteger,0);
                        GHojyoMA_PrintSeshuCode.AsString	:=	stCode;
                        // 施主名称
                        if GHojyoMA_PrintSeshuCode.AsString <> '' then
                            GHojyoMA_PrintSeshuCodeName.AsString    :=	Fields[INDEX_SESNAME].AsString;
                    end;

                    //施行部門コード
                    if Fields.Fields[INDEX_SEIBMNNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_SEIBMNGCODE].AsString,MasterInfo_DMemDataCodeAttrBmn.AsInteger,MasterInfo_DMemDataCodeDigitBmn.AsInteger,0);
                        GHojyoMA_PrintSekouBmnCode.AsString		:=	stCode;
                        // 施行部門名
                        if GHojyoMA_PrintSekouBmnCode.AsString <> '' then
                            GHojyoMA_PrintSekouBmnCodeName.AsString := Fields[INDEX_SEIBMNNAME].AsString;
                    end;

                    // 施行担当者
                    if Fields.Fields[INDEX_SEITANNCODE].AsFloat <> 0 then
                    begin
                        stCode := fnSetGCode(Fields[INDEX_SEITANGCODE].AsString,MasterInfo_DMemDataCodeAttrShain.AsInteger,MasterInfo_DMemDataCodeDigitShain.AsInteger,0);
                        GHojyoMA_PrintSekouPersonCode.AsString	:=	stCode;
                        // 施行担当者名
                        if GHojyoMA_PrintSekouPersonCode.AsString <> '' then
                            GHojyoMA_PrintSekouPersonCodeName.AsString	:= Fields[INDEX_SEITANNAME].AsString;
                    end;

					//	工事契約情報等
					DmqKInfo2.Close;
					DmqKInfo2.SQL.Clear;
                    DmqKInfo2.SQL.Add(SHOSAI_K_SQL);
                    DmqKInfo2.SQL.Add(SHOSAI_K_SQL_ORDERBY);  //<TAX> ADD
//<255> DEL                    DmqKInfo2.ParamByName('Code').AsFloat	:=	Fields[INDEX_NCODE].AsFloat;
                    DmqKInfo2.ParamByName('Code').AsString	:=	Fields[INDEX_NCODE].AsString;  //<255> ADD

					DmqKInfo2.Open;

                    // 契約情報
                    iKCount     := 1;
                    iNCount     := 1;
                    iSubCount   := 0;
					while DmqKInfo2.EOF = False do
					begin
                        // 契約情報
                        if DmqKInfo2.Fields[K_INDEX_INFOKBN].AsInteger = 1 then
                        begin
                            if iKCount < 7 then
                            begin
//<TAX> MOD St
                                case iKCount of
                                    1 : setContInfo(
                                            GHojyoMA_PrintContDateK1,
                                            GHojyoMA_PrintContNoK1,
                                            GHojyoMA_Printtax_rateK1Name,
                                            GHojyoMA_Printtax_rateK1,
                                            GHojyoMA_PrintContMoneyK1,
                                            GHojyoMA_Printsales_taxK1
                                            );
                                    2 : setContInfo(
                                            GHojyoMA_PrintContDateK2,
                                            GHojyoMA_PrintContNoK2,
                                            GHojyoMA_Printtax_rateK2Name,
                                            GHojyoMA_Printtax_rateK2,
                                            GHojyoMA_PrintContMoneyK2,
                                            GHojyoMA_Printsales_taxK2
                                            );
                                    3 : setContInfo(
                                            GHojyoMA_PrintContDateK3,
                                            GHojyoMA_PrintContNoK3,
                                            GHojyoMA_Printtax_rateK3Name,
                                            GHojyoMA_Printtax_rateK3,
                                            GHojyoMA_PrintContMoneyK3,
                                            GHojyoMA_Printsales_taxK3
                                            );
                                    4 : setContInfo(
                                            GHojyoMA_PrintContDateK4,
                                            GHojyoMA_PrintContNoK4,
                                            GHojyoMA_Printtax_rateK4Name,
                                            GHojyoMA_Printtax_rateK4,
                                            GHojyoMA_PrintContMoneyK4,
                                            GHojyoMA_Printsales_taxK4
                                            );
                                    5 : setContInfo(
                                            GHojyoMA_PrintContDateK5,
                                            GHojyoMA_PrintContNoK5,
                                            GHojyoMA_Printtax_rateK5Name,
                                            GHojyoMA_Printtax_rateK5,
                                            GHojyoMA_PrintContMoneyK5,
                                            GHojyoMA_Printsales_taxK5
                                            );
                                    6 : setContInfo(
                                            GHojyoMA_PrintContDateK6,
                                            GHojyoMA_PrintContNoK6,
                                            GHojyoMA_Printtax_rateK6Name,
                                            GHojyoMA_Printtax_rateK6,
                                            GHojyoMA_PrintContMoneyK6,
                                            GHojyoMA_Printsales_taxK6
                                            );
                                    7 : setContInfo(
                                            GHojyoMA_PrintContDateK7,
                                            GHojyoMA_PrintContNoK7,
                                            GHojyoMA_Printtax_rateK7Name,
                                            GHojyoMA_Printtax_rateK7,
                                            GHojyoMA_PrintContMoneyK7,
                                            GHojyoMA_Printsales_taxK7
                                            );
{
                                case iKCount of
                                    1:
                                    begin
                                        // 契約年月日1
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK1.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK1.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK1.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        //契約書NO1
                                        GHojyoMA_PrintContNoK1.AsString         :=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        //契約金額1（税込）
                                        GHojyoMA_PrintContMoneyK1.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額1
                                        GHojyoMA_PrintSales_taxK1.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率1
                                        GHojyoMA_Printtax_rateK1.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_Printtax_rateK1Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if  DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                GHojyoMA_Printtax_rateK1Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then   // 不課税
                                            begin
                                                GHojyoMA_Printtax_rateK1Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_Printtax_rateK1Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;

                                        //消費税率
                                        GHojyoMA_Print.FieldByName('tax_rateK1').AsInteger		:=	DmqKInfo2.GetFld('tax_rate').AsInteger;
                                        if m_iAccProKbn = 0 then
                                            GHojyoMA_Print.FieldByName('tax_rateK1Name').AsString	:=	''
                                        else
                                        begin
                                            if DmqKInfo2.GetFld('tax_rate').AsInteger = 9 then          // 非課税
                                                GHojyoMA_Print.FieldByName('tax_rateK1Name').AsString	:=	sTax[4]
                                            else if DmqKInfo2.GetFld('tax_rate').AsInteger = 8 then     // 不課税
                                                GHojyoMA_Print.FieldByName('tax_rateK1Name').AsString	:=	sTax[3]
                                            else
                                                GHojyoMA_Print.FieldByName('tax_rateK1Name').AsString	:=	sTax[DmqKInfo2.GetFld('tax_rate').AsInteger];
                                        end;
                                    end;
                                    2:
                                    begin
                                        // 契約年月日
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK2.Clear
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK2.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK2.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        //契約書NO
                                        GHojyoMA_PrintContNoK2.AsString	            :=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        //契約金額（税込）
                                        GHojyoMA_PrintContMoneyK2.AsCurrency	        :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        //消費税額
                                        GHojyoMA_PrintSales_taxK2.AsCurrency        :=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        //消費税率
                                        GHojyoMA_PrintTax_rateK2.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;

                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_PrintTax_RateK2Name.AsString   :=	'';
                                        end
                                        else
                                        begin
                                            if  DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then       // 非課税
                                            begin
                                                GHojyoMA_PrintTax_RateK2Name.AsString   := sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then	// 不課税
                                            begin
                                                GHojyoMA_PrintTax_RateK2Name.AsString   := sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintTax_RateK2Name.AsString   := sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    3:
                                    begin
                                        // 契約年月日
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK3.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK3.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK3.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        // 契約書NO
                                        GHojyoMA_PrintContNoK3.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額（税込）
                                        GHojyoMA_PrintContMoneyK3.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額
                                        GHojyoMA_PrintSales_TaxK3.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率
                                        GHojyoMA_PrintTax_RateK3.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_PrintTax_RateK3Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                GHojyoMA_PrintTax_RateK3Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                GHojyoMA_PrintTax_RateK3Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintTax_RateK3Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    4:
                                    begin
                                        // 契約年月日
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK4.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK4.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK4.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        // 契約書NO
                                        GHojyoMA_PrintContNoK4.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額（税込）
                                        GHojyoMA_PrintContMoneyK4.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額
                                        GHojyoMA_PrintSales_TaxK4.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率
                                        GHojyoMA_PrintTax_RateK4.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_PrintTax_RateK4Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                GHojyoMA_PrintTax_RateK4Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                GHojyoMA_PrintTax_RateK4Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintTax_RateK4Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    5:
                                    begin
                                        // 契約年月日
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK5.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK5.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK5.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        // 契約書NO
                                        GHojyoMA_PrintContNoK5.AsString		:=	DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額（税込）
                                        GHojyoMA_PrintContMoneyK5.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額
                                        GHojyoMA_PrintSales_TaxK5.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率
                                        GHojyoMA_PrintTax_RateK5.AsInteger    :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_PrintTax_RateK5Name.AsString	:=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                GHojyoMA_PrintTax_RateK5Name.AsString :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                GHojyoMA_PrintTax_RateK5Name.AsString :=	sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintTax_RateK5Name.AsString :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    6:
                                    begin
                                        // 契約年月日
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK6.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK6.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK6.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        // 契約書NO
                                        GHojyoMA_PrintContNoK6.AsString         :=  DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額（税込）
                                        GHojyoMA_PrintContMoneyK6.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額
                                        GHojyoMA_PrintSales_TaxK6.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率
                                        GHojyoMA_PrintTax_RateK6.AsInteger      :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_PrintTax_RateK6Name.AsString   :=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                GHojyoMA_PrintTax_RateK6Name.AsString   :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                GHojyoMA_PrintTax_RateK6Name.AsString   :=    sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintTax_RateK6Name.AsString   :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    //-----
                                    7:
                                    begin
                                        // 契約年月日
                                        if DmqKInfo2.Fields[K_INDEX_CONTDATE].IsNull then
                                        begin
                                            GHojyoMA_PrintContDateK7.Clear;
                                        end
                                        else
                                        begin
                                            dDate := DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                            if m_iRekiKbn = 0 then				// 和暦
                                            begin
                                                GHojyoMA_PrintContDateK7.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintContDateK7.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                            end;
                                        end;

                                        // 契約書NO
                                        GHojyoMA_PrintContNoK7.AsString         :=  DmqKInfo2.Fields[K_INDEX_CONTNO].AsString;

                                        // 契約金額（税込）
                                        GHojyoMA_PrintContMoneyK7.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                        crKeiyaku := crKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                        // 消費税額
                                        GHojyoMA_PrintSales_TaxK7.AsCurrency	:=	DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                        crShohi := crShohi + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;

                                        // 消費税率
                                        GHojyoMA_PrintTax_RateK7.AsInteger      :=	DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger;
                                        if m_iAccProKbn = 0 then
                                        begin
                                            GHojyoMA_PrintTax_RateK7Name.AsString   :=	'';
                                        end
                                        else
                                        begin
                                            if      DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 9 then		// 非課税
                                            begin
                                                GHojyoMA_PrintTax_RateK7Name.AsString   :=	sTax[4];
                                            end
                                            else if DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger = 8 then		// 不課税
                                            begin
                                                GHojyoMA_PrintTax_RateK7Name.AsString   :=    sTax[3];
                                            end
                                            else
                                            begin
                                                GHojyoMA_PrintTax_RateK7Name.AsString   :=	sTax[DmqKInfo2.Fields[K_INDEX_TAX_RATE].AsInteger];
                                            end;
                                        end;
                                    end;
                                    //-----
}
//<TAX> MOD Ed
                                end;
                            end
                            else
                            begin
                                crSubKeiyaku    := crSubKeiyaku + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                crSubShohi      := crSubShohi   + DmqKInfo2.Fields[K_INDEX_SALES_TAX].AsCurrency;
                                inc(iSubCount);
                            end;
                            inc(iKCount);
                        end
                        else if DmqKInfo2.Fields[K_INDEX_INFOKBN].AsInteger = 2 then
                        begin
                        // 入金情報
                            case iNCount of
                                1:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN1.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN1.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN1.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    GHojyoMA_PrintContMoneyN1.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                end;
                                2:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN2.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN2.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN2.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    GHojyoMA_PrintContMoneyN2.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                                3:
                                begin
                                    //	入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN3.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN3.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN3.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //	入金予定額
                                    GHojyoMA_PrintContMoneyN3.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                                4:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN4.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN4.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN4.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN4.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                end;
                                5:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN5.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN5.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN5.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN5.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;

                                end;
                                6:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN6.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN6.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN6.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN6.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                                7:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN7.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN7.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN7.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN7.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                                8:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN8.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN8.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN8.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN8.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                                9:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN9.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN9.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN9.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN9.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                                10:
                                begin
                                    //入金年月日
                                    if  DmqKInfo2.Fields.Fields[K_INDEX_CONTDATE].IsNull then
                                    begin
                                       GHojyoMA_PrintContDateN10.Clear;
                                    end
                                    else
                                    begin
                                        dDate :=  DmqKInfo2.Fields[K_INDEX_CONTDATE].AsDateTime;
                                        if m_iRekiKbn = 0 then				// 和暦
                                        begin
                                            GHojyoMA_PrintContDateN10.AsString	:=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate );
                                        end
                                        else
                                        begin
                                            GHojyoMA_PrintContDateN10.AsString	:=	FormatDateTime( 'yyyy/mm/dd', dDate );
                                        end;
                                    end;
                                    //入金予定額
                                    GHojyoMA_PrintContMoneyN10.AsCurrency         :=	DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                    crNyukin := crNyukin + DmqKInfo2.Fields[K_INDEX_CONTMONEY].AsCurrency;
                                end;
                            end;
                            inc(iNCount);
                        end;
                        DmqKInfo2.Next;
                    end;

                    if iKCount > 7 then
                    begin
                        GHojyoMA_PrintContNoK8.AsString			:=	'その他' + IntToStr(iSubCount) + '件';
                        GHojyoMA_PrintContMoneyK8.AsCurrency	:=	crSubKeiyaku;
                        GHojyoMA_PrintSales_TaxK8.AsCurrency	:=	crSubShohi;
                    end;

                    crKeiyaku   := crKeiyaku + crSubKeiyaku;
                    crShohi     := crShohi + crSubShohi;

                    // 契約金額合計
                    GHojyoMA_PrintKeiyakuG.AsCurrency   := crKeiyaku;

                    // 契約消費税額合計
                    GHojyoMA_PrintShohiG.AsCurrency     := crShohi;

					// 入金消費税額合計
					GHojyoMA_PrintNyukinG.AsCurrency    := crNyukin;


					GHojyoMA_Print.Post;
					NEXT;
				end;
			end;
		end;

		JITUZAIBUNRUI:							// 実在分類
		begin
			with DmqPrint do
			begin
				Close ();
				SQL.Clear;
				SQL.Add('SELECT hm.GCode, hm.LongName, hm.TStartDate, hm.TEndDate, ');
				SQL.Add('       seg01.GCode As seg01Code, seg01.SimpleName As seg01Name, bun01.GCode As bun01Code, bun01.Nmk As bun01Name, ');
				SQL.Add('       seg02.GCode As seg02Code, seg02.SimpleName As seg02Name, bun02.GCode As bun02Code, bun02.Nmk As bun02Name, ');
				SQL.Add('       seg03.GCode As seg03Code, seg03.SimpleName As seg03Name, bun03.GCode As bun03Code, bun03.Nmk As bun03Name, ');
				SQL.Add('       seg04.GCode As seg04Code, seg04.SimpleName As seg04Name, bun04.GCode As bun04Code, bun04.Nmk As bun04Name, ');
				SQL.Add('       seg05.GCode As seg05Code, seg05.SimpleName As seg05Name, bun05.GCode As bun05Code, bun05.Nmk As bun05Name, ');
				SQL.Add('       seg06.GCode As seg06Code, seg06.SimpleName As seg06Name, bun06.GCode As bun06Code, bun06.Nmk As bun06Name, ');
				SQL.Add('       seg07.GCode As seg07Code, seg07.SimpleName As seg07Name, bun07.GCode As bun07Code, bun07.Nmk As bun07Name, ');
				SQL.Add('       seg08.GCode As seg08Code, seg08.SimpleName As seg08Name, bun08.GCode As bun08Code, bun08.Nmk As bun08Name, ');
				SQL.Add('       seg09.GCode As seg09Code, seg09.SimpleName As seg09Name, bun09.GCode As bun09Code, bun09.Nmk As bun09Name, ');
				SQL.Add('       seg10.GCode As seg10Code, seg10.SimpleName As seg10Name, bun10.GCode As bun10Code, bun10.Nmk As bun10Name  ');
				SQL.Add('FROM HojyoMA hm ');
		        SQL.Add('LEFT OUTER JOIN HojyoMA seg01 ');
				SQL.Add('  ON   seg01.MasterKbn = 101 and hm.SegNCode1 = seg01.NCode and seg01.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg02 ');
				SQL.Add('  ON   seg02.MasterKbn = 102 and hm.SegNCode2 = seg02.NCode and seg02.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg03 ');
				SQL.Add('  ON   seg03.MasterKbn = 103 and hm.SegNCode3 = seg03.NCode and seg03.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg04 ');
				SQL.Add('  ON   seg04.MasterKbn = 104 and hm.SegNCode4 = seg04.NCode and seg04.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg05 ');
				SQL.Add('  ON   seg05.MasterKbn = 105 and hm.SegNCode5 = seg05.NCode and seg05.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg06 ');
				SQL.Add('  ON   seg06.MasterKbn = 106 and hm.SegNCode6 = seg06.NCode and seg06.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg07 ');
				SQL.Add('  ON   seg07.MasterKbn = 107 and hm.SegNCode7 = seg07.NCode and seg07.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg08 ');
				SQL.Add('  ON   seg08.MasterKbn = 108 and hm.SegNCode8 = seg08.NCode and seg08.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg09 ');
				SQL.Add('  ON   seg09.MasterKbn = 109 and hm.SegNCode9 = seg09.NCode and seg09.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN HojyoMA seg10 ');
				SQL.Add('  ON   seg10.MasterKbn = 110 and hm.SegNCode10 = seg10.NCode and seg10.RDelKbn = 0 ');

				SQL.Add('LEFT OUTER JOIN MMEISHO bun01 ');
				SQL.Add('  ON   bun01.SetNm = 511 and hm.BunruiNCode1 = bun01.NCode and bun01.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun02 ');
				SQL.Add('  ON   bun02.SetNm = 512 and hm.BunruiNCode2 = bun02.NCode and bun02.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun03 ');
				SQL.Add('  ON   bun03.SetNm = 513 and hm.BunruiNCode3 = bun03.NCode and bun03.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun04 ');
				SQL.Add('  ON   bun04.SetNm = 514 and hm.BunruiNCode4 = bun04.NCode and bun04.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun05 ');
				SQL.Add('  ON   bun05.SetNm = 515 and hm.BunruiNCode5 = bun05.NCode and bun05.RDelKbn = 0 ');

				SQL.Add('LEFT OUTER JOIN MMEISHO bun06 ');
				SQL.Add('  ON   bun06.SetNm = 516 and hm.BunruiNCode6 = bun06.NCode and bun06.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun07 ');
				SQL.Add('  ON   bun07.SetNm = 517 and hm.BunruiNCode7 = bun07.NCode and bun07.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun08 ');
				SQL.Add('  ON   bun08.SetNm = 518 and hm.BunruiNCode8 = bun08.NCode and bun08.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun09 ');
				SQL.Add('  ON   bun09.SetNm = 519 and hm.BunruiNCode9 = bun09.NCode and bun09.RDelKbn = 0 ');
				SQL.Add('LEFT OUTER JOIN MMEISHO bun10 ');
				SQL.Add('  ON   bun10.SetNm = 520 and hm.BunruiNCode10 = bun10.NCode and bun10.RDelKbn = 0 ');

				SQL.Add('WHERE  hm.MasterKbn = :nMasterDivision and hm.SumKbn = 0 and hm.RDelKbn = 0 ');
		        SQL.Add('AND (');
				SQL.Add(' EXISTS(');
				SQL.Add('  select * from HojyoMA seg01, SegMA ');
				SQL.Add('  WHERE seg01.MasterKbn = 101 and hm.SegNCode1 = seg01.NCode and seg01.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse1 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg02, SegMA ');
				SQL.Add('  WHERE seg02.MasterKbn = 102 and hm.SegNCode2 = seg02.NCode and seg02.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse2 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg03, SegMA ');
				SQL.Add('  WHERE seg03.MasterKbn = 103 and hm.SegNCode3 = seg03.NCode and seg03.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse3 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg04, SegMA ');
				SQL.Add('  WHERE seg04.MasterKbn = 104 and hm.SegNCode4 = seg04.NCode and seg04.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse4 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg05, SegMA ');
				SQL.Add('  WHERE seg05.MasterKbn = 105 and hm.SegNCode5 = seg05.NCode and seg05.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse5 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg06, SegMA ');
				SQL.Add('  WHERE seg06.MasterKbn = 106 and hm.SegNCode6 = seg06.NCode and seg06.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse6 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg07, SegMA ');
				SQL.Add('  WHERE seg07.MasterKbn = 107 and hm.SegNCode7 = seg07.NCode and seg07.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse7 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg08, SegMA ');
				SQL.Add('  WHERE seg08.MasterKbn = 108 and hm.SegNCode8 = seg08.NCode and seg08.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse8 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg09, SegMA ');
				SQL.Add('  WHERE seg09.MasterKbn = 109 and hm.SegNCode9 = seg09.NCode and seg09.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse9 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from HojyoMA seg10, SegMA ');
				SQL.Add('  WHERE seg10.MasterKbn = 110 and hm.SegNCode10 = seg10.NCode and seg10.RDelKbn = 0 ');
				SQL.Add('    AND SegMA.MasterKbn = :nMasterDivision and SegMA.SegUse10 = 1 and SegMA.RDelKbn = 0 ');
				SQL.Add(') ');

		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun01, MasterInfo ');
				SQL.Add('  WHERE bun01.SetNm = 511 and hm.BunruiNCode1 = bun01.NCode and bun01.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 511 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun02, MasterInfo ');
				SQL.Add('  WHERE bun02.SetNm = 512 and hm.BunruiNCode2 = bun02.NCode and bun02.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 512 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
    		    SQL.Add('  select * from MMEISHO bun03, MasterInfo ');
				SQL.Add('  WHERE bun03.SetNm = 513 and hm.BunruiNCode3 = bun03.NCode and bun03.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 513 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
		        SQL.Add(' OR EXISTS(');
        		SQL.Add('  select * from MMEISHO bun04, MasterInfo ');
				SQL.Add('  WHERE bun04.SetNm = 514 and hm.BunruiNCode4 = bun04.NCode and bun04.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 514 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
        		SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun05, MasterInfo ');
				SQL.Add('  WHERE bun05.SetNm = 515 and hm.BunruiNCode5 = bun05.NCode and bun05.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 515 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
        		SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun06, MasterInfo ');
				SQL.Add('  WHERE bun06.SetNm = 516 and hm.BunruiNCode6 = bun06.NCode and bun06.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 516 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
        		SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun07, MasterInfo ');
				SQL.Add('  WHERE bun07.SetNm = 517 and hm.BunruiNCode7 = bun07.NCode and bun07.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 517 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
        		SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun08, MasterInfo ');
				SQL.Add('  WHERE bun08.SetNm = 518 and hm.BunruiNCode8 = bun08.NCode and bun08.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 518 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
        		SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun09, MasterInfo ');
				SQL.Add('  WHERE bun09.SetNm = 519 and hm.BunruiNCode9 = bun09.NCode and bun09.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 519 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');
        		SQL.Add(' OR EXISTS(');
		        SQL.Add('  select * from MMEISHO bun10, MasterInfo ');
				SQL.Add('  WHERE bun10.SetNm = 520 and hm.BunruiNCode10 = bun10.NCode and bun10.RDelKbn = 0 ');
				SQL.Add('    AND MasterInfo.MasterKbn = 520 and MasterInfo.UseKbn <> 0 ');
				SQL.Add(') ');

				SQL.Add(') ');

				// コードによる範囲指定
		        if ( uvHani.pvrRgType[0] <> 0 ) then							// 指定あり
        		begin
		            if ( uvHani.pvrStCode[0] <> '' ) then						// 開始指定
        		    begin
                		SQL.Add('AND (hm.GCode >= :ExStCode) ');
		    			ParamByName('ExStCode').AsString :=	uvHani.pvrStCode[0];
        		    end;

		            if ( uvHani.pvrEdCode[0] <> '' ) then						// 終了のみ指定
        		    begin
                		SQL.Add('AND (hm.GCode <= :ExEdCode) ');
		    			ParamByName('ExEdCode').AsString := uvHani.pvrEdCode[0];
        		    end;
		        end;

				if	(m_nOrderDivision = 0) then									// 印刷範囲指定: 0=ｺｰﾄﾞ順
					SQL.ADD ('ORDER BY hm.GCode')
				else															// 印刷範囲指定: 1=連想順
					SQL.ADD ('ORDER BY hm.Renso, hm.GCode');

				ParamByName ('nMasterDivision').AsInteger := m_nMasterDivision;

				Open ();

				while (not EOF) do
				begin
					MemPtnSegBun.Append();

					stCode := GetFld ('GCode').AsString;

					if (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
					begin
						case (MasterInfo_DMemDataCodeAttr.AsInteger) of
							0:	strFormat := '%'  + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
							1:	strFormat := '%.' + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
						end;

						stCode := Format (strFormat, [StrToInt64 (Trim (stCode))]);
					end;

					MemPtnSegBun.FieldByName ('strExCodeDst'    ).AsString := stCode;
					MemPtnSegBun.FieldByName ('strNameSimpleDst').AsString := GetFld ('LongName').AsString;

					if (not GetFld ('TStartDate').IsNull) AND (GetFld('TStartDate').AsDateTime <> DEF_S_DATE) then
						MemPtnSegBun.FieldByName('dtStart').AsDateTime := GetFld('TStartDate' ).AsDateTime
					else
						MemPtnSegBun.FieldByName('dtStart').Clear;

					if (not GetFld ('TEndDate').IsNull) AND (GetFld('TEndDate').AsDateTime <> DEF_E_DATE) then
						MemPtnSegBun.FieldByName('dtEnd').AsDateTime := GetFld('TEndDate').AsDateTime
					else
						MemPtnSegBun.FieldByName('dtEnd').Clear;

					// セグメント
        		    for i:=1 to 10 do
		            begin
						if i = 10 then
							stCode := GetFld('seg'+IntToStr(i)+'Code').AsString
						else
							stCode := GetFld('seg0'+IntToStr(i)+'Code').AsString;

                		if stCode = '' then							// 未設定
		                	continue;

	    		        for j:=1 to 10 do
    	        		begin
		                	if i+100 = m_arAdoptInfo_Seg[j].nMasterDivision then
        		            	break;
                		end;

		                if (m_arAdoptInfo_Seg[j].nAdoption = 0) then			// 採用なし
                			continue;

						if	(m_arAdoptInfo_Seg[j].nCodeAttribute <= 1) then
						begin
							case (m_arAdoptInfo_Seg[j].nCodeAttribute) of
								0:	strFormat := '%'  + IntToStr(m_arAdoptInfo_Seg[j].nCodeDigit) + 'd';
								1:	strFormat := '%.' + IntToStr(m_arAdoptInfo_Seg[j].nCodeDigit) + 'd';
							end;

							stCode := Format (strFormat, [StrToInt64 (Trim (stCode))]);
						end;

						if i = 10 then
						begin
							MemPtnSegBun.FieldByName('strSeg' + IntToStr(i) + 'Code').AsString	:= stCode;
							MemPtnSegBun.FieldByName('strSeg' + IntToStr(i) + 'Name').AsString	:= GetFld('seg' + IntToStr(i) + 'Name').AsString;
						end
						else
						begin
							MemPtnSegBun.FieldByName('strSeg0' + IntToStr(i) + 'Code').AsString	:= stCode;
							MemPtnSegBun.FieldByName('strSeg0' + IntToStr(i) + 'Name').AsString	:= GetFld('seg0' + IntToStr(i) + 'Name').AsString;
						end;
					end;

					// 分類
        		    for i:=1 to 10 do
		            begin
						if i = 10 then
							stCode := GetFld('bun' + IntToStr(i) + 'Code').AsString
						else
							stCode := GetFld('bun0' + IntToStr(i) + 'Code').AsString;

                		if stCode = '' then										// 未設定
		                	continue;

	    		        for j:=1 to 10 do
    	        		begin
		                	if i+510 = m_arAdoptInfo_PBr[j].nMasterDivision then
        		            	break;
                		end;

		                if m_arAdoptInfo_PBr[j].nAdoption = 0 then	// 採用なし
        		        	continue;

						if (m_arAdoptInfo_PBr[j].nCodeAttribute <= 1) then
						begin
							case (m_arAdoptInfo_PBr[j].nCodeAttribute) of
								0: strFormat := '%'  + IntToStr(m_arAdoptInfo_PBr[j].nCodeDigit) + 'd';
								1: strFormat := '%.' + IntToStr(m_arAdoptInfo_PBr[j].nCodeDigit) + 'd';
							end;

							stCode := Format(strFormat, [StrToInt64 (Trim (stCode))]);
						end;

						if i = 0 then
						begin
							MemPtnSegBun.FieldByName('strBun' + IntToStr(i) + 'Code').AsString	:= stCode;
							MemPtnSegBun.FieldByName('strBun' + IntToStr(i) + 'Name').AsString	:= GetFld ('bun' + IntToStr(i) + 'Name').AsString;
						end
						else
						begin
							MemPtnSegBun.FieldByName('strBun0' + IntToStr(i) + 'Code').AsString	:= stCode;
							MemPtnSegBun.FieldByName('strBun0' + IntToStr(i) + 'Name').AsString	:= GetFld ('bun0' + IntToStr(i) + 'Name').AsString;
						end;
		            end;

					MemPtnSegBun.Post();

					NEXT;
				end;
			end;
		end;

		JITUZAINYUUKIN,GOUKEINYUUKIN,             // 実在入金情報,合計入金情報
        JITUZAIKEIYAKU,GOUKEIKEIYAKU,
        JITUZAIKEIYAKUDTL,GOUKEIKEIYAKUDTL:
        begin
            if (iSelect = JITUZAIKEIYAKU) or (iSelect = JITUZAIKEIYAKUDTL) or (iSelect = JITUZAINYUUKIN) then
                iSumKbn := 0
            else
                iSumKbn := 1;

            // 工事契約情報等
            DmqKInfo2.Close;
            DmqKInfo2.SQL.Clear;

            DmqKInfo2.SQL.ADD(KEIYAKU_SQL);

            if (stStart <> '') and (stEnd = '') then
            begin
                DmqKInfo2.SQL.ADD(' AND MA.GCode >= :parStrNCode');
                DmqKInfo2.ParamByName('parStrNCode').AsString	:=	stStart;
            end
            else if (stStart = '') and (stEnd <> '') then
			begin
                DmqKInfo2.SQL.ADD(' AND MA.GCode <= :parEndNCode');
                DmqKInfo2.ParamByName('parEndNCode').AsString	:=	stEnd;
            end
            else if (stStart <> '') and (stEnd <> '') then
            begin
                DmqKInfo2.SQL.ADD(' AND MA.GCode >= :parStrNCode');
                DmqKInfo2.SQL.ADD(' AND MA.GCode <= :parEndNCode');
                DmqKInfo2.ParamByName('parStrNCode').AsString	:=	stStart;
                DmqKInfo2.ParamByName('parEndNCode').AsString	:=	stEnd;
            end;
            DmqKInfo2.SQL.Add('order by MA.GCode asc, KI.DspOrder asc, KI.ContDate asc, KI.ContNo asc, KI.ContMoney asc, KI.tax_rate asc, KI.sales_tax ');

            DmqKInfo2.ParamByName('parMasterKbn').asInteger := m_nMasterDivision;
            DmqKInfo2.ParamByName('parSUM').asInteger       := iSumKbn;

            if (iSelect = JITUZAINYUUKIN) or (iSelect = GOUKEINYUUKIN) then
                DmqKInfo2.ParamByName('parInfoKbn').asInteger := 2   // 入金情報
            else
                DmqKInfo2.ParamByName('parInfoKbn').asInteger := 1;  // 契約情報

            DmqKInfo2.Open;

            iNoCount    := 0;
            sGCode      := '';

            while DmqKInfo2.EOF <> true do
            begin
                if not (iSelect in [JITUZAINYUUKIN,GOUKEINYUUKIN]) then  // <249> ADD
                begin                                                    // <249> ADD
                    dMemData_KeiyakuPrint.Append();

                    iNoCount := iNoCount + 1;

                    // 工事外部コード
                    stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_GCODE].AsString,MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,0);

                    // 工事コード変更時初期化
                    if sGCode <> stCode then
                    begin
                        iNoCount    := 1;
                        crKeiyaku   := 0;
                        crShohi     := 0;
                    end;

                    //　行NO
                    dMemData_KeiyakuPrintNo.AsInteger		    :=	iNoCount;

                    // 外部コード
                    dMemData_KeiyakuPrintGCode.AsString		    :=	stCode;
                    sGCode		                                :=	stCode;

                    //	正式名称
                    dMemData_KeiyakuPrintLongName.AsString		:=	DmqKInfo2.Fields[KN_INDEX_LONGNAME].AsString;

                    //	簡略名称
                    dMemData_KeiyakuPrintSimpleName.AsString    :=	DmqKInfo2.Fields[KN_INDEX_SIMPLENAME].AsString;
//<TAX> ADD St
                    //  契約金額入力方法
                    dMemData_KeiyakuPrintPartPattern.AsInteger  :=
                        DmqKInfo2.Fields[KN_INDEX_PARTPATTERN].AsInteger;
                    dMemData_KeiyakuPrintPartPatternName.AsString :=
                        TAX_TYPENAME[dMemData_KeiyakuPrintPartPattern.AsInteger];
//<TAX> ADD Ed
                    //	契約年月日
                    if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                        dMemData_KeiyakuPrintContDate.Clear
                    else
                    begin
                        dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                        if m_iRekiKbn = 0 then				// 和暦
                            dMemData_KeiyakuPrintContDate.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                        else
                            dMemData_KeiyakuPrintContDate.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                    end;

                    //	契約書NO
                    dMemData_KeiyakuPrintContNo.AsString			:=	DmqKInfo2.Fields[KN_INDEX_CONTNO].AsString;

                    //	契約金額（税込）
                    dMemData_KeiyakuPrintContMoney.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                    crKeiyaku := crKeiyaku + DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;

                    //	消費税額
                    dMemData_KeiyakuPrintSales_Tax.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_SALES_TAX].AsCurrency;
                    crShohi := crShohi + DmqKInfo2.Fields[KN_INDEX_SALES_TAX].AsCurrency;

                    //	消費税率
                    dMemData_KeiyakuPrintTaxRate.AsInteger		:=	DmqKInfo2.Fields[KN_INDEX_TAX_RATE].AsInteger;
                    if m_iAccProKbn = 0 then
                        dMemData_KeiyakuPrintTax_RateName.AsString   :=	''
                    else
                    begin
//<TAX> MOD St
                        rateCode := DmqKInfo2.Fields[KN_INDEX_TAX_RATE].AsInteger;
                        dMemData_KeiyakuPrintTax_RateName.AsString	:=
                            moBusiness.GetTaxRate(rateCode).TaxName;

                        if rateCode = RATECODESTANDARD then
                        begin
                            finishDate := IfThen(DmqKInfo2.Fields[KN_INDEX_YOTEIDATEEN].IsNull,
                                //0, DmqKInfo2.Fields[KN_INDEX_YOTEIDATEEN].AsDateTime);
                                0, TDate(DmqKInfo2.Fields[KN_INDEX_YOTEIDATEEN].AsDateTime));
                            oDic := moBusiness.GetStandardTaxRate(dDate, finishDate);
                            if oDic <> nil then
                            begin
                                dMemData_KeiyakuPrintTax_RateName.AsString  :=
                                    dMemData_KeiyakuPrintTax_RateName.AsString + ' ' + oDic.TaxName;
                            end;
                        end;

{
                        if DmqKInfo2.Fields[KN_INDEX_TAX_RATE].AsInteger = 9 then      // 非課税
                            dMemData_KeiyakuPrintTax_RateName.AsString	:=	sTax[4]
                        else if DmqKInfo2.Fields[KN_INDEX_TAX_RATE].AsInteger = 8 then	// 不課税
                            dMemData_KeiyakuPrintTax_RateName.AsString	:=	sTax[3]
                        else
                            dMemData_KeiyakuPrintTax_RateName.AsString  :=	sTax[DmqKInfo2.Fields[KN_INDEX_TAX_RATE].AsInteger];
}
//<TAX> MOD Ed
                    end;

                    // 取引先コード
                    stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                    dMemData_KeiyakuPrintCostomerCode.AsString	:=	stCode;
                    //	取引先名
                    dMemData_KeiyakuPrintCostomerName.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;

                    // 契約金額合計
                    dMemData_KeiyakuPrintKeiyakuG.AsCurrency    := crKeiyaku;

                    // 消費税額合計
                    dMemData_KeiyakuPrintShohiG.AsCurrency      := crShohi;

                    dMemData_KeiyakuPrint.Post();
//<249> ADD St
                end
                else
                begin
                    inc(iNoCount);
                    // 工事外部コード
                    stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_GCODE].AsString,MasterInfo_DMemDataCodeAttr.AsInteger,MasterInfo_DMemDataCodeDigit.AsInteger,0);

                    // 工事コード変更時初期化
                    if sGCode <> stCode then
                    begin
                        crKeiyaku   := 0;
                        if sGCode <> '' then JHojyoMA_Print.Post();
                        JHojyoMA_Print.Append();
                    end;

                    // 外部コード
                    JHojyoMA_PrintGCode.AsString		    :=	stCode;
                    sGCode		                            :=	stCode;

                    //	正式名称
                    JHojyoMA_PrintLongName.AsString		:=	DmqKInfo2.Fields[KN_INDEX_LONGNAME].AsString;

                    //	簡略名称
                    JHojyoMA_PrintSimpleName.AsString    :=	DmqKInfo2.Fields[KN_INDEX_SIMPLENAME].AsString;

                    // 表示順序に従いセットする
                    case DmqKInfo2.Fields[KN_INDEX_DSPORDER].AsInteger of 
                        1   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN1.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN1.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN1.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode1.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName1.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN1.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        2   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN2.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN2.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN2.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode2.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName2.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN2.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        3   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN3.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN3.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN3.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode3.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName3.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN3.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        4   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN4.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN4.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN4.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode4.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName4.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN4.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        5   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN5.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN5.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN5.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode5.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName5.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN5.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        6   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN6.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN6.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN6.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode6.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName6.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN6.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        7   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN7.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN7.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN7.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode7.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName7.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN7.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        8   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN8.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN8.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN8.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode8.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName8.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN8.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        9   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN9.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN9.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN9.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode9.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName9.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN9.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                        10   :
                        begin
                            //入金予定日
                            if DmqKInfo2.Fields[KN_INDEX_CONTDATE].IsNull then
                                JHojyoMA_PrintContDateN10.Clear
                            else
                            begin
                                dDate := DmqKInfo2.Fields[KN_INDEX_CONTDATE].AsDateTime;
                                if m_iRekiKbn = 0 then				// 和暦
                                    JHojyoMA_PrintContDateN10.AsString  :=	MjsGetGengou( dDate, MdtCMP_YMD ) + FormatDateTime( 'ee/mm/dd', dDate )
                                else
                                    JHojyoMA_PrintContDateN10.AsString  :=	FormatDateTime( 'yyyy/mm/dd', dDate );
                            end;
                            // 取引先コード
                            stCode := fnSetGCode(DmqKInfo2.Fields[KN_INDEX_COSTOMERGCODE].AsString,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,0);
                            JHojyoMA_PrintCostomerCode10.AsString	:=	stCode;
                            // 取引先名
                            JHojyoMA_PrintCostomerName10.AsString	:=	DmqKInfo2.Fields[KN_INDEX_COSTOMERNMK].AsString;
                            // 入金額
                            JHojyoMA_PrintContMoneyN10.AsCurrency	:=	DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                        end;
                    end;
                    // 合計にセット
                    crKeiyaku := crKeiyaku + DmqKInfo2.Fields[KN_INDEX_CONTMONEY].AsCurrency;
                    // 入金額合計
                    JHojyoMA_PrintNyukinG.AsCurrency    := crKeiyaku;
                end;
//<249> ADD Ed

                DmqKInfo2.Next;
            end;
//<249> ADD St
            // 入金情報は最終セット情報を更新する
            if (iSelect in [JITUZAINYUUKIN,GOUKEINYUUKIN]) and (iNoCount > 0) then
                JHojyoMA_Print.Post();
//<249> ADD Ed
        end;
// <263> ADD start
		KASANTOROKU:						// 加算登録
		begin
			with DmqPrint do
			begin
				Close;
				SQL.Clear;
				SQL.ADD(KASAN_SQL);
                SetFld('pMKBN').asInteger := m_nMasterDivision;

				Open;
				while not EOF do
				begin
					dMemData_KasanPrint.Append();

					// 加算先ｺｰﾄﾞ
                    stCode := fnSetGCode(Fields[KASAN_INDEX_GCODE_DST].AsString, 
									MasterInfo_DMemDataCodeAttr.AsInteger, 
									MasterInfo_DMemDataCodeDigit.AsInteger, 
									0);
					dMemData_KasanPrintGCodeDst.AsString		:=	stCode;
					// 加算先名称
					dMemData_KasanPrintSimpleNameDst.AsString	:=	Fields[KASAN_INDEX_SIMPLENAME_DST].AsString;
					// 加算元ｺｰﾄﾞ
                    stCode := fnSetGCode(Fields[KASAN_INDEX_GCODE_SRC].AsString, 
									MasterInfo_DMemDataCodeAttr.AsInteger, 
									MasterInfo_DMemDataCodeDigit.AsInteger, 
									0);
					dMemData_KasanPrintGCodeSrc.AsString		:=	stCode;
					// 加算元名称
					dMemData_KasanPrintSimpleNameSrc.AsString	:=	Fields[KASAN_INDEX_SIMPLENAME_SRC].AsString;

					dMemData_KasanPrint.Post;
					Next;
				end;
			end;
		end;
// <263> ADD end
	end;

	if JHojyoMA_Print.RecordCount <> 0 then
		JHojyoMA_Print.First;
	if GHojyoMA_Print.RecordCount <> 0 then
		GHojyoMA_Print.First;

	if MemPtnSegBun.RecordCount <> 0 then
		MemPtnSegBun.First;

    if dMemData_KeiyakuPrint.RecordCount <> 0 then
        dMemData_KeiyakuPrint.First;

// <263> ADD start
    if dMemData_KasanPrint.RecordCount <> 0 then
        dMemData_KasanPrint.First;
// <263> ADD end

	DmqPrint.Close;
	DmqPrint.Free;
	DmqFusen.Close;
	DmqFusen.Free;
	DmqKInfo.Close;
	DmqKInfo.Free;
	DmqKInfo2.Close;
	DmqKInfo2.Free;
	DmqFree.Close;
	DmqFree.Free;
end;

//**********************************************************************
//*		Proccess	:	印刷前処理ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/21
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.ppReportKaniJBeforePrint(Sender: TObject);
begin
	PrnSupport.BeforePrint(Sender);
end;

procedure TJNTCRP018001f.ppReportKaniGBeforePrint(Sender: TObject);
begin
	PrnSupport.BeforePrint(Sender);
end;

procedure TJNTCRP018001f.ppReportShosaiJBeforePrint(Sender: TObject);
begin
	PrnSupport.BeforePrint(Sender);
end;

procedure TJNTCRP018001f.ppReportShosaiGBeforePrint(Sender: TObject);
begin
	PrnSupport.BeforePrint(Sender);
end;

//**********************************************************************
//*		Proccess	:	登録ＮＯ再付番
//*		Name		:	N.Nabe
//*		Date		:	2000/11/27
//*		Parameter	:	ParentCode		:	再付番する親の外部ｺｰﾄﾞ
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.AgainEntNoSet(ParentCode: Extended): Boolean;
var
	DmqTreeSelect	:	TMQuery;
	DmqTreeUpdate	:	TMQuery;
	iCount			:	Integer;
begin
	iCount	:=	1;

	DmqTreeSelect := TMQuery.Create( Self );					//	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqTreeSelect );	//	DBとMQueryの接続

	DmqTreeUpdate := TMQuery.Create( Self );					//	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmqTreeUpdate );	//	DBとMQueryの接続

	MDataModule^.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	with DmqTreeSelect do
	begin
		Close ();
		SQL.Clear;
		SQL.ADD ('SELECT MasterKbn, SumNCode, BasedNCode FROM HojyoTree ');
		SQL.ADD ('WHERE MasterKbn = :MasterKbn AND SumNCode = :SakiGCode ');
		SQL.ADD ('ORDER BY EntNo');
		ParamByName('MasterKbn').AsInteger	:=	m_nMasterDivision;
//<255> DEL		ParamByName('SakiGCode').AsFloat	:=	ParentCode;
		ParamByName('SakiGCode').AsString	:=	FormatFloat('0',ParentCode);  //<255> ADD
		Open ();
		while (not EOF) do
		begin
			with DmqTreeUpdate do
			begin
				Close ();
				SQL.Clear;
				SQL.ADD('UPDATE HojyoTree SET EntNo = :EntryNo ');
				SQL.ADD(', UpdTantoNCode = :UpdTantoNCode '); // <202>
				SQL.ADD('WHERE MasterKbn = :MasterKbn and ');
				SQL.ADD('SumNCode = :SakiGCode and BasedNCode = :MotoGCode');
// <237> DEL start
//                Showmessage('1:' + IntToStr(DmqTreeSelect.GetFLD('MasterKbn').AsInteger));
//                Showmessage('2:' + IntToStr(DmqTreeSelect.GetFLD('SumNCode').AsInteger));
//                Showmessage('3:' + IntToStr(DmqTreeSelect.GetFLD('BasedNCode').AsInteger));
//                Showmessage('4:' + FormatFloat('#',iCount * -100));
// <237> DEL end

				ParamByName('MasterKbn').AsInteger	:=	DmqTreeSelect.GetFLD('MasterKbn').AsInteger;
				ParamByName('SakiGCode').AsInteger	:=	DmqTreeSelect.GetFLD('SumNCode'  ).AsInteger;
				ParamByName('MotoGCode').AsInteger	:=	DmqTreeSelect.GetFLD('BasedNCode').AsInteger;

				ParamByName('EntryNo').AsInteger	:=	iCount * -100;
                ParamByName('UpdTantoNCode').AsFloat := m_TantoNCode; // <202>

				if (ExecSQL = false) then
				begin
					ErrorMessageDsp(DmqTreeUpdate);
					MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
					DmqTreeUpdate.Close;
					DmqTreeUpdate.Free;
					result := false;
					Exit;
				end;

				MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

				gbHojyoTree2Flag	:=	true;	// 加算体系２更新ﾌﾗｸﾞＯＮ
			end;

			iCount	:=	iCount + 1;

			NEXT;
		end;
	end;
	DmqTreeSelect.Close;
	DmqTreeSelect.Free;

	with DmqTreeUpdate do
	begin
		Close ();
		SQL.Clear;
		SQL.ADD ('UPDATE HojyoTree SET EntNo = EntNo * -1 ');
		SQL.ADD (', UpdTantoNCode = :UpdTantoNCode '); // <202>
		SQL.ADD ('WHERE MasterKbn = :MasKbn AND SumNCode = :SakiGCode and EntNo < 0');		// 2003/11/19

		ParamByName ('MasKbn'	).AsInteger	:=	m_nMasterDivision;
//<255> DEL		ParamByName ('SakiGCode').AsFloat	:=	ParentCode;
		ParamByName ('SakiGCode').AsString	:=	FormatFloat('0',ParentCode);  //<255> ADD
        ParamByName ('UpdTantoNCode').AsFloat := m_TantoNCode; // <202>

		if (ExecSQL = false) then
		begin
			ErrorMessageDsp(DmqTreeUpdate);
			MDataModule^.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
			DmqTreeUpdate.Close;
			DmqTreeUpdate.Free;
			result := false;
			Exit;
		end;

		MDataModule^.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
		
		gbHojyoTree2Flag	:=	true;	// 加算体系２更新ﾌﾗｸﾞＯＮ
	end;

	DmqTreeUpdate.Close;
	DmqTreeUpdate.Free;
	result := true;
end;

//**********************************************************************
//*		Proccess	:	マスター基本情報読み込み
//*		Name		:	N.Nabe
//*		Date		:	2000/11/27
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.fnMasterInfoRead();
var
	QueryMaster	  :	TMQuery;
	QueryBumon	  :	TMQuery;
	QueryShain	  :	TMQuery;
	QueryTorihiki :	TMQuery;
	QueryKosyu	  :	TMQuery;
	QueryFree	  :	TMQuery;
    QuerySeshu    : TMQuery;    // <205>
	stKoujiName	  :	String;
	stOne		  :	String;
	stAll		  :	String;
	iLoop		  :	Integer;
	iPtnCnt		  :	Integer;
    i             :	Integer;
	urSegSaiyo	  : array[1..10] of Integer;
    lvMKBN        : Integer;
begin

    // MasterInfo(汎用的に使用) MQueryの構築
	QueryMaster := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryMaster );

    // MasterInfo(41:部門) MQueryの構築
	QueryBumon := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryBumon );

    // MasterInfo(25:社員) MQueryの構築
	QueryShain := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryShain );

    // MasterInfo(22:取引先) MQueryの構築
	QueryTorihiki := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryTorihiki );

    // MasterInfo(301～399:工種) MQueryの構築
	QueryKosyu := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryKosyu );

// <205> ADD start
    // 施主マスターの取得
	QuerySeshu := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QuerySeshu );
// <205> ADD end

    // 汎用的に使用 MQueryの構築
	QueryFree := TMQuery.Create( Self );
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryFree );

	MasterInfo_DMemData.Close;
	MasterInfo_DMemData.Open;
	MasterInfo_DMemData.Append;
//<TAX> DEL St
    // ビジネスオブジェクトで行うため削除
{
	giHasuu := 0;

	MemDIC_COTXRATE.Close;
	MemDIC_COTXRATE.Open;

    // <118> - ST
	// 消費税基本（MJSCOMMON）の読み込み
    with mqCmnDB do
    begin
        Close();
        SQL.Clear();
        // <169>SQL.Add('SELECT StartYMD, TaxRate FROM DIC_COTXRATE ');
        SQL.Add('SELECT RateCD, StartYMD, TaxRate FROM DIC_COTXRATE '); // <169>
        SQL.Add('ORDER BY StartYMD DESC                             ');
        Open();

        while EOF = false do
        begin
            MemDIC_COTXRATE.Append;
            MemDIC_COTXRATERateCD.AsInteger     := GetFLD('RateCD')  .AsInteger;    // <169>
    		MemDIC_COTXRATEStartYMD.AsDateTime	:= GetFLD('StartYMD').AsDateTime;
    		MemDIC_COTXRATETaxRate.AsCurrency	:= GetFLD('TaxRate') .AsCurrency;
    		MemDIC_COTXRATE.Post;
    		Next;
        end;

        Close();
    end;
    // <118> - ED
}
//<TAX> DEL Ed
	try
        for i := 1 to  10 do
        begin
            urSegSaiyo[i] := 0;
        end;

        // ｾｸﾞﾒﾝﾄ採用区分の読直し
		with QueryMaster do
        begin
            Close();
            Sql.Clear();
            SQL.Add('select SegUse1,SegUse2,SegUse3,SegUse4,SegUse5, ');
            SQL.Add('       SegUse6,SegUse7,SegUse8,SegUse9,SegUse10 ');
            SQL.Add('from SegMa where MasterKBN = :MasKbn            ');
            ParamByName('MasKbn').AsInteger := m_nMasterDivision;
            Open();
            if not eof then
            begin
                for i := 1 to  10 do
                begin
                    urSegSaiyo[i] := FieldByName ('SegUse' + IntToStr(i)).AsInteger;
                end;
            end;
            Close();
        end;

        for i := 1 to  10 do
        begin
            m_arAdoptInfo_Seg [i].nAdoption := 0;

            if ( m_arAdoptInfo_Seg [i].nMasterDivision <> 0 ) then
            begin
                lvMKBN := StrToInt(Copy(IntToStr(m_arAdoptInfo_Seg [i].nMasterDivision),2,2));
                // 採用はSegMaを考慮する
                m_arAdoptInfo_Seg [i].nAdoption := urSegSaiyo[lvMKBN];
            end;

            // 表示・非表示
            if ( m_arAdoptInfo_Seg [i].nAdoption = 0 ) then
            begin
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegTitl' + IntToStr(i))).Visible := false;
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd'   + IntToStr(i))).Visible := false;
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm'   + IntToStr(i))).Visible := false;
            end
            else
            begin
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegTitl' + IntToStr(i))).visible := true;
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd'   + IntToStr(i))).Visible := true;
                TMLabel  (MJSFindCtrl(Self, 'Jituzai_LLabel_SegNm'   + IntToStr(i))).Visible := true;
//↓<SZERO>0諸口を表現するための設定です
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputFlag		:= True;
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).InputFlagEnabled	:= True;
                TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Zero				:= True;
//↑<SZERO>
            end;
        end;
//<TAX> MOD St
        // ビジネスオブジェクトから取得
        m_iAccProKbn := moBusiness.TaxInfo.AccProKbn;
{
		// 消費税基本情報 //
		with QueryMaster do
		begin
			Close();
			SQL.Clear();
			SQL.Add('select AccProKbn, UkeAdjust from TaxInfo ');
			Open();

            // 仮受消費税 端数処理方法
			if ( Eof = false ) then
			begin
				m_iAccProKbn := GetFld('AccProKbn').AsInteger;  // 消費税区分
				giHasuu      := GetFld('UkeAdjust').AsInteger;
			end
			else
			begin
				m_iAccProKbn := 1;							    // 税込
				giHasuu      := 2;
			end;
		end;
}
//<TAX> MOD Ed
        // 免税業者だったら,消費税額ｸﾘｱ
		if ( m_iAccProKbn = 0 ) then
		begin
			with QueryMaster do
			begin
				Close();
				SQL.Clear();
				SQL.Add('update KojiInfo2 set      ');
				SQL.Add('    sales_tax = 0         ');
				SQL.Add('   ,tax_rate  = 0         ');
				SQL.Add('where InfoKbn   = 1       ');
                SQL.Add('  and MasterKbn = :MasKbn ');
                ParamByName('MasKbn').AsInteger := m_nMasterDivision;

				if ( ExecSQL = false ) then
				begin
					ErrorMessageDsp ( QueryMaster );
                    // ﾛｰﾙﾊﾞｯｸ
					MDataModule^.Rollback ( dbCorp_Select );
					Exit;
				end;
			end;
		end;

		// ﾌﾟﾗｲﾏﾘｷｰ検索
		with QueryMaster do
		begin
			Close();
			SQL.Clear();
			SQL.Add('select count(*) as Kensu from SYS.SYSTABLE ');
			SQL.Add('where UPPER(table_name) = ' + AnsiQuotedStr('KOJIINFO2',''''));
			SQL.Add('  and primary_root <> 0 ');
			Open();

            // 仮受消費税 端数処理方法
			if Eof = false then
			begin
				if GetFld('Kensu').AsInteger > 0 then
					m_bFieldFlg := false
				else
					m_bFieldFlg := true;
			end
			else
				m_bFieldFlg := true;
		end;

		// 工事情報
		with QueryMaster do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName, ');
			SQL.ADD ('GHojyoName, ');
			SQL.ADD ('CodeDigit, ');
			SQL.ADD ('CodeAttr, ');
			SQL.ADD ('MstrKbn1, ');
//<273> Add↓　
			SQL.ADD ('MstrKbn4, ');
//<273> Add↑
			SQL.ADD ('MstrKbn5, ');
			SQL.ADD ('MstrKbn6, ');
			SQL.ADD ('MstrKbn7, ');
			SQL.ADD ('MstrKbn8, ');
			SQL.ADD ('MstrKbn9, ');
			SQL.ADD ('MstrKbn10, ');
//<291> Add↓　
			SQL.ADD ('MstrKbn20, ');
//<291> Add↑
			SQL.ADD ('KmkNCode3, ');
			SQL.ADD ('KmkNCode4, ');
			SQL.ADD ('KmkNCode6, ');
			SQL.ADD ('SpHojyoNCd1, ');
// <205> ADD start
			SQL.ADD ('KojKbn17, ');
			SQL.ADD ('KojKbn18, ');
// <205> ADD end
			SQL.ADD ('KojKbn1, ');
			SQL.ADD ('KojKbn2 ');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = ' + IntToStr(m_nMasterDivision));
			Open ();
		end;

		// 部門情報
		with QueryBumon do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName, ');
			SQL.ADD ('GHojyoName, ');
			SQL.ADD ('CodeDigit, ');
			SQL.ADD ('CodeAttr');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = 41');
			Open ();
		end;

		// 社員情報
		with QueryShain do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName, ');
			SQL.ADD ('GHojyoName, ');
			SQL.ADD ('CodeDigit, ');
			SQL.ADD ('CodeAttr');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = 25');
			Open ();
		end;

		// 取引先情報
		with QueryTorihiki do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName, ');
			SQL.ADD ('GHojyoName, ');
			SQL.ADD ('CodeDigit, ');
			SQL.ADD ('CodeAttr');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = 22');
			Open ();
		end;

		// 工種情報
		with QueryKosyu do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = ' + IntToStr(m_nMasterDivision + 100));
			Open ();
		end;

// <205> ADD start
		// 施主情報
		with QuerySeshu do
		begin
			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('UseKbn, ');
			SQL.ADD ('JHojyoName, ');
			SQL.ADD ('GHojyoName, ');
			SQL.ADD ('CodeDigit, ');
			SQL.ADD ('CodeAttr');
			SQL.ADD ('From MasterInfo ');
			SQL.ADD ('WHERE MasterKbn = 26');
			Open ();
		end;
// <205> ADD end

		// 情報SET
		// 名称変更
//		Root_PMTab.Items[PAGE_JITUZAI].Caption := QueryMaster.GetFld('JHojyoName').AsString;


		stKoujiName := QueryMaster.GetFld('JHojyoName').AsString;
		stOne := '';
		stAll := '';
// <Del10-VerUp001> ST
//		for iLoop := 1 to MJSHanLength(stKoujiName) do
		for iLoop := 1 to Length(stKoujiName) do
// <Del10-VerUp001> ED
		begin
// <Del10-VerUp001> ST
//			stOne := MJSHanCopy(stKoujiName,iLoop,1);
			stOne := Copy(stKoujiName,iLoop,1);
// <Del10-VerUp001> ED
			if stOne = '&' then
				stOne := stOne + '&';

			stAll := stAll + stOne;
		end;
		Jituzai_ChkBox_Tokusyu.Caption := '特殊' + stAll + 'として使用';


//		Root_PMTab.Items[PAGE_GOKEI].Caption := QueryMaster.GetFld('GHojyoName').AsString;

// <222> MOD start
//		Jituzai_LLabel_BmnCode.Caption := '完成振替' + QueryBumon.GetFld('JHojyoName').AsString;
        if ( m_pMyAppRecord.m_sParameter = '1' ) then
		    Jituzai_LLabel_BmnCode.Caption := '完成振替' + QueryBumon.GetFld('JHojyoName').AsString
        else
        //<273> St
		//    Jituzai_LLabel_BmnCode.Caption := '営業' + QueryBumon.GetFld('JHojyoName').AsString;
        begin
            //　Gali2　プロジェクトの場合　営業部門と完成振替部門を制御
            if TMSeries.IsGalielopt2 then
            begin
                if (QueryMaster.GetFld('KojKbn1').AsInteger = 0) and (QueryMaster.GetFld('KojKbn2').AsInteger = 0) then
                    Jituzai_LLabel_BmnCode.Caption := '営業' + QueryBumon.GetFld('JHojyoName').AsString
                else
                    Jituzai_LLabel_BmnCode.Caption := '完成振替' + QueryBumon.GetFld('JHojyoName').AsString;
            end
            else
            begin
                //　旧Gali　従来通りに営業部門
                Jituzai_LLabel_BmnCode.Caption := '営業' + QueryBumon.GetFld('JHojyoName').AsString;
            end;

        end;
        //<273> Ed

// <222> MOD end

		Goukei_LLabel_BmnCode.Caption  := '集計' + QueryBumon.GetFld('JHojyoName').AsString;

//		Jituzai_LLabel_PersonCode.Caption := QueryShain.GetFld('JHojyoName').AsString;
//		Goukei_LLabel_PersonCode.Caption := QueryShain.GetFld('JHojyoName').AsString;

//		Jituzai_LLabel_CustomerCode.Caption := QueryTorihiki.GetFld('JHojyoName').AsString;
//		Goukei_LLabel_CustomerCode.Caption := QueryTorihiki.GetFld('JHojyoName').AsString;

		// 区分非表示
		if (QueryBumon.GetFld('UseKbn').AsInteger = 0) 			// 完成振替部門
            {or (m_PLFlg = false)} then     // <130>BSでも完成振替部門を登録させる
		begin
			Jituzai_ETEdit_BmnCode.Enabled := false;
			Jituzai_ETEdit_BmnCode.Color := Self.Color;
			Goukei_ETEdit_BmnCode.Enabled := false;
			Goukei_ETEdit_BmnCode.Color := Self.Color;

			Jituzai_ENEdit_BmnCode.Enabled := false;
			Jituzai_ENEdit_BmnCode.Color := Self.Color;
			Goukei_ENEdit_BmnCode.Enabled := false;
			Goukei_ENEdit_BmnCode.Color := Self.Color;
		end;

// <222> MOD start
{
		if (QueryShain.GetFld('UseKbn').AsInteger = 1) and	    // 担当者
           (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
}
		if (QueryShain.GetFld('UseKbn').AsInteger = 1) then
// <222> MOD end
		begin
			Jituzai_ENEdit_PersonCode.Visible := true;
			Goukei_ENEdit_PersonCode.Visible  := true;
			Jituzai_ETEdit_PersonCode.Visible := true;
			Goukei_ETEdit_PersonCode.Visible  := true;
            Jituzai_LLabel_PersonCode.Visible := true;
            Goukei_LLabel_PersonCode.Visible  := true;
		end
        else
        begin
			Jituzai_ETEdit_PersonCode.Enabled := false;
			Jituzai_ETEdit_PersonCode.Color   := Self.Color;
			Goukei_ETEdit_PersonCode.Enabled  := false;
			Goukei_ETEdit_PersonCode.Color    := Self.Color;

			Jituzai_ETEdit_PersonCode.Visible := false;
			Goukei_ETEdit_PersonCode.Visible  := false;

			Jituzai_ENEdit_PersonCode.Enabled := false;
			Jituzai_ENEdit_PersonCode.Color   := Self.Color;
			Goukei_ENEdit_PersonCode.Enabled  := false;
			Goukei_ENEdit_PersonCode.Color    := Self.Color;
			Jituzai_ENEdit_PersonCode.Visible := false;
			Goukei_ENEdit_PersonCode.Visible  := false;
            Jituzai_LLabel_PersonCode.Visible := false;
            Goukei_LLabel_PersonCode.Visible  := false;
        end;
// <222> MOD start
{
		if (QueryTorihiki.GetFld('UseKbn').AsInteger = 1) and   // 受注者
           (m_pMyAppRecord.m_sParameter = '1')            then  // 工事の場合
}
		if (QueryTorihiki.GetFld('UseKbn').AsInteger = 1) then
// <222> MOD end
		begin
			Jituzai_ETEdit_CustomerCode.Enabled  := true;
			Goukei_ETEdit_CustomerCode.Enabled   := true;

			Jituzai_ENEdit_CustomerCode.Enabled  := true;
			Goukei_ENEdit_CustomerCode.Enabled   := true;
			Jituzai_ENEdit_CustomerCode.Visible  := true;
			Goukei_ENEdit_CustomerCode.Visible   := true;
            Jituzai_LLabel_CostomerCode.Visible  := true;
            Goukei_LLabel_CostomerCode.Visible   := true;
            // <144>↓受注先名は無効
            Jituzai_ETEdit_CustomerCode.Enabled := false;
            Goukei_ETEdit_CustomerCode.Enabled := false;
            // <144>↑
		end
		else
		begin
			Jituzai_ETEdit_CustomerCode.Enabled := false;
			Goukei_ETEdit_CustomerCode.Enabled  := false;

			Jituzai_ENEdit_CustomerCode.Enabled := false;
			Goukei_ENEdit_CustomerCode.Enabled  := false;
			Jituzai_ENEdit_CustomerCode.Visible := false;
			Goukei_ENEdit_CustomerCode.Visible  := false;
            Jituzai_LLabel_CostomerCode.Visible := false;
            Goukei_LLabel_CostomerCode.Visible  := false;
            // <144>↓受注先名を有効にする
// <222> DEL start
{
            if (m_pMyAppRecord.m_sParameter = '1') then        // 取引先採用なし&工事の場合
            begin
}
// <222> DEL end
                Jituzai_LLabel_CostomerCode.Visible  := true;
                Goukei_LLabel_CostomerCode.Visible   := true;
                Jituzai_ETEdit_CustomerCode.Enabled := true;
                Goukei_ETEdit_CustomerCode.Enabled := true;
// <222> DEL            end;
            // <144>↑
		end;

{		if QueryMaster.GetFld('KojKbn1').AsInteger = 0 then
		begin
			Jituzai_ETEdit_BmnCode.Enabled := false;
			Jituzai_ETEdit_BmnCode.Color := Self.Color;
//			Jituzai_ENEdit_SalesBase.Enabled := false;
//			Jituzai_ENEdit_SalesBase.Color := Self.Color;
			Goukei_ETEdit_BmnCode.Enabled := false;
			Goukei_ETEdit_BmnCode.Color := Self.Color;
//			Goukei_ENEdit_SalesBase.Enabled := false;
// 			Goukei_ENEdit_SalesBase.Color := Self.Color;

			Jituzai_ENEdit_BmnCode.Enabled := false;
			Jituzai_ENEdit_BmnCode.Color := Self.Color;
			Goukei_ENEdit_BmnCode.Enabled := false;
			Goukei_ENEdit_BmnCode.Color := Self.Color;
		end;
}
		if QueryMaster.GetFld('MstrKbn1').AsInteger = 0 then
		begin
//			Jituzai_ENEdit_HaifuKbn.Enabled := false;
//			Jituzai_ENEdit_HaifuKbn.Color := Self.Color;
//			Goukei_ENEdit_HaifuKbn.Enabled := false;
//			Goukei_ENEdit_HaifuKbn.Color := Self.Color;
		end;

		// 各入力不可項目ｶﾗｰ設定
		Jituzai_EDEdit_FinishDate.Color := Self.Color;
		Jituzai_ENEdit_BunCode.Color := Self.Color;
		Jituzai_ENEdit_MoveKbn.Color := Self.Color;
		Goukei_EDEdit_FinishDate.Color := Self.Color;


		// MemDataに保存
		// <173>MasterInfo_DMemDataSpHojyoCd1.AsString         := QueryMaster.GetFld('SpHojyoNCd1').AsString;
        MasterInfo_DMemDataSpHojyoNCd1.AsFloat         := QueryMaster.GetFld('SpHojyoNCd1').AsFloat;    // <173>
		MasterInfo_DMemDataJHojyoName.AsString         := QueryMaster.GetFld('JHojyoName').AsString;
		MasterInfo_DMemDataGHojyoName.AsString         := QueryMaster.GetFld('GHojyoName').AsString;
		MasterInfo_DMemDataKojKbn1.AsInteger           := QueryMaster.GetFld('KojKbn1').AsInteger;      // <273>
		MasterInfo_DMemDataKojKbn2.AsInteger           := QueryMaster.GetFld('KojKbn2').AsInteger;
		MasterInfo_DMemDataMstrKbn4.AsInteger          := QueryMaster.GetFld('MstrKbn4').AsInteger;     // <273>
		MasterInfo_DMemDataMstrKbn5.AsInteger          := QueryMaster.GetFld('MstrKbn5').AsInteger;
		MasterInfo_DMemDataMstrKbn6.AsInteger          := QueryMaster.GetFld('MstrKbn6').AsInteger;
		MasterInfo_DMemDataMstrKbn7.AsInteger          := QueryMaster.GetFld('MstrKbn7').AsInteger;
		MasterInfo_DMemDataMstrKbn8.AsInteger          := QueryMaster.GetFld('MstrKbn8').AsInteger;
		MasterInfo_DMemDataMstrKbn9.AsInteger          := QueryMaster.GetFld('MstrKbn9').AsInteger;
		MasterInfo_DMemDataMstrKbn10.AsInteger         := QueryMaster.GetFld('MstrKbn10').AsInteger;
		MasterInfo_DMemDataMstrKbn20.AsInteger         := QueryMaster.GetFld('MstrKbn20').AsInteger;     // <291> ADD
		MasterInfo_DMemDataKmkCode3.AsInteger          := fnGetGCODE_Int(QueryMaster.GetFld('KmkNCode3').AsFloat,1);
		MasterInfo_DMemDataKmkCode4.AsInteger          := fnGetGCODE_Int(QueryMaster.GetFld('KmkNCode4').AsFloat,1);
		MasterInfo_DMemDataKmkCode6.AsInteger          := fnGetGCODE_Int(QueryMaster.GetFld('KmkNCode6').AsFloat,1);
		MasterInfo_DMemDataCodeDigit.AsInteger         := QueryMaster.GetFld('CodeDigit').AsInteger;
		MasterInfo_DMemDataCodeAttr.AsInteger          := QueryMaster.GetFld('CodeAttr').AsInteger;
// <205> start
		MasterInfo_DMemDataKojKbn17.AsInteger          := QueryMaster.GetFld('KojKbn17').AsInteger;
		MasterInfo_DMemDataKojKbn18.AsInteger          := QueryMaster.GetFld('KojKbn18').AsInteger;
		MasterInfo_DMemDataCodeDigitSeshu.AsInteger    := QuerySeshu.GetFld('CodeDigit').AsInteger;
        MasterInfo_DMemDataCodeAttrSeshu.AsInteger     := QuerySeshu.GetFld('CodeAttr').AsInteger;
		MasterInfo_DMemDataSeshuName.AsString          := QuerySeshu.GetFld('JHojyoName').AsString;
// <205> end
		MasterInfo_DMemDataBumonName.AsString          := QueryBumon.GetFld('JHojyoName').AsString;
		MasterInfo_DMemDataCodeDigitBmn.AsInteger      := QueryBumon.GetFld('CodeDigit').AsInteger;
		MasterInfo_DMemDataCodeAttrBmn.AsInteger       := QueryBumon.GetFld('CodeAttr').AsInteger;
		MasterInfo_DMemDataShainName.AsString          := QueryShain.GetFld('JHojyoName').AsString;
		MasterInfo_DMemDataCodeDigitShain.AsInteger    := QueryShain.GetFld('CodeDigit').AsInteger;
		MasterInfo_DMemDataCodeAttrShain.AsInteger     := QueryShain.GetFld('CodeAttr').AsInteger;
		MasterInfo_DMemDataTorihikiName.AsString       := QueryTorihiki.GetFld('JHojyoName').AsString;
		MasterInfo_DMemDataCodeDigitTorihiki.AsInteger := QueryTorihiki.GetFld('CodeDigit').AsInteger;
		MasterInfo_DMemDataCodeAttrTorihiki.AsInteger  := QueryTorihiki.GetFld('CodeAttr').AsInteger;
		MasterInfo_DMemDataTorihikiUse.AsInteger       := QueryTorihiki.GetFld('UseKbn').AsInteger;
		if QueryKosyu.Eof = false then
		begin
			MasterInfo_DMemDataKsyUse.AsInteger   := QueryKosyu.GetFld('UseKbn').AsInteger;
			MasterInfo_DMemDataKosyuName.AsString := QueryKosyu.GetFld('JHojyoName').AsString;
		end
		else
		begin
			MasterInfo_DMemDataKsyUse.AsInteger   := 0;
			MasterInfo_DMemDataKosyuName.AsString := '工種';
		end;
		MasterInfo_DMemData.Post;

// <212> ADD start
        // 契約情報連動区分採用の場合
        if MasterInfo_DMemDataKojKbn17.AsInteger = 1 then
        begin
            Jituzai_DdxDBGrid_Kei.Bands[5].Visible  := true;
            Jituzai_DdxDBGrid_Nyu.Bands[2].Visible  := true;
			Jituzai_DdxDBGrid_Nyu.Width 			:= Trunc(502 * m_Zoom / 100);	// <264> ADD
            Goukei_DdxDBGrid_Kei.Bands[5].Visible   := true;
            Goukei_DdxDBGrid_Nyu.Bands[2].Visible   := true;
			Goukei_DdxDBGrid_Nyu.Width 				:= Trunc(502 * m_Zoom / 100);	// <264> ADD
        end
        else
        begin
            Jituzai_DdxDBGrid_Kei.Bands[5].Visible  := false;
            Jituzai_DdxDBGrid_Nyu.Bands[2].Visible  := false;
// <264> MOD start
//            Jituzai_DdxDBGrid_Nyu.Width             := 272;
			Jituzai_DdxDBGrid_Nyu.Width             := Trunc(272 * m_Zoom / 100);
// <264> MOD end
            Goukei_DdxDBGrid_Kei.Bands[5].Visible   := false;
            Goukei_DdxDBGrid_Nyu.Bands[2].Visible   := false;
// <264> MOD start
//            Goukei_DdxDBGrid_Nyu.Width              := 272;
            Goukei_DdxDBGrid_Nyu.Width              := Trunc(272 * m_Zoom / 100);
// <264> MOD end
        end;
// <212> ADD end


		// ｺｰﾄﾞ桁数・属性設定
		Jituzai_DdxDBGridGCode.MaxLength := QueryMaster.GetFld('CodeDigit').AsInteger;
		Goukei_DdxDBGridGCode.MaxLength  := QueryMaster.GetFld('CodeDigit').AsInteger;

//<KSN> ADD St
        Lbl_KasanParent.Caption := '合計' + QueryMaster.FieldByName ('JHojyoName').AsString;
		Kasan_Child_DBGridGCode.MaxLength := QueryMaster.GetFld('CodeDigit').AsInteger;
//<KSN> ADD Ed

		Jituzai_DdxDBGrid_KeiContDate.MaxLength := 8;
		Goukei_DdxDBGrid_KeiContDate.MaxLength := 8;
		Jituzai_DdxDBGrid_NyuContDate.MaxLength := 8;
		Goukei_DdxDBGrid_NyuContDate.MaxLength := 8;

		if QueryMaster.GetFld('CodeAttr').AsInteger = 2 then						// フリー
		begin
			Jituzai_DdxDBGridGCode.Alignment     := taLeftJustify;
			Jituzai_DdxDBGridGCode.EditAlignment := taLeftJustify;
			Goukei_DdxDBGridGCode.Alignment      := taLeftJustify;
			Goukei_DdxDBGridGCode.EditAlignment  := taLeftjustify;

//<KSN> ADD St
            // 加算先(親)グリッド
			Kasan_Parent_DBGridGCode.Alignment       := taLeftJustify;
			Kasan_Parent_DBGridGCode.EditAlignment   := taLeftJustify;
            Kasan_Parent_DBGridGCode.ImeMode         := imClose;
            // 加算元(子)グリッド
			Kasan_Child_DBGridGCode.Alignment       := taLeftJustify;
			Kasan_Child_DBGridGCode.EditAlignment   := taLeftJustify;
            Kasan_Child_DBGridGCode.ImeMode         := imClose;
//<KSN> ADD Ed

			Jituzai_ENEdit_GCode.Visible		 := false;
			Jituzai_ETEdit_GCode.Visible		 := true;
			Goukei_ENEdit_GCode.Visible			 := false;
			Goukei_ETEdit_GCode.Visible			 := true;
			Jituzai_ETEdit_GCode.MaxLength       := QueryMaster.GetFld('CodeDigit').AsInteger;
			Goukei_ETEdit_GCode.MaxLength        := QueryMaster.GetFld('CodeDigit').AsInteger;

			ppDBText14.Alignment				 :=taLeftjustify;
			ppDBText1.Alignment					 :=taLeftjustify;
			pDT_Code.Alignment					 :=taLeftjustify;
			ppDBText71.Alignment				 :=taLeftjustify;
//<266> ADD St
            Jituzai_DdxDBGridGCode.ImeMode       := imClose;
            Jituzai_DdxDBGridGCode.Hankaku       := True;
            Goukei_DdxDBGridGCode.ImeMode        := imClose;
            Goukei_DdxDBGridGCode.Hankaku        := True;
//<266> ADD Ed
		end
		else																		// 数字
		begin
			Jituzai_DdxDBGridGCode.Alignment     := taRightJustify;
			Jituzai_DdxDBGridGCode.EditAlignment := taRightJustify;
			Goukei_DdxDBGridGCode.Alignment      := taRightJustify;
			Goukei_DdxDBGridGCode.EditAlignment  := taRightJustify;

//<KSN> ADD St
            // 加算先(親)グリッド
			Kasan_Parent_DBGridGCode.Alignment       := taRightJustify;
			Kasan_Parent_DBGridGCode.EditAlignment   := taRightJustify;
            Kasan_Parent_DBGridGCode.ImeMode         := imDisable;
            // 加算元(子)グリッド
			Kasan_Child_DBGridGCode.Alignment       := taRightJustify;
			Kasan_Child_DBGridGCode.EditAlignment   := taRightJustify;
            Kasan_Child_DBGridGCode.ImeMode         := imDisable;
//<KSN> ADD Ed

			Jituzai_ENEdit_GCode.Visible		 := true;
			Jituzai_ETEdit_GCode.Visible		 := false;
			Goukei_ENEdit_GCode.Visible			 := true;
			Goukei_ETEdit_GCode.Visible			 := false;

			Jituzai_ENEdit_GCode.Digits			 := QueryMaster.GetFld('CodeDigit').AsInteger;
			Goukei_ENEdit_GCode.Digits			 := QueryMaster.GetFld('CodeDigit').AsInteger;

			Jituzai_ENEdit_GCode.TabOrder		 := 0;
			Goukei_ENEdit_GCode.TabOrder		 := 0;

			if	QueryMaster.GetFld('CodeAttr').AsInteger = 1 then
			begin
				Jituzai_ENEdit_GCode.FormatStr := StringOfChar ('0', QueryMaster.GetFld('CodeDigit').AsInteger);
				Goukei_ENEdit_GCode.FormatStr  := StringOfChar ('0', QueryMaster.GetFld('CodeDigit').AsInteger);
			end
			else
			begin
				Jituzai_ENEdit_GCode.FormatStr := '';
				Goukei_ENEdit_GCode.FormatStr  := '';
			end;

			ppDBText14.Alignment				 := taRightJustify;
			ppDBText1.Alignment					 := taRightJustify;
			pDT_Code.Alignment					 := taRightJustify;
			ppDBText71.Alignment				 := taRightJustify;
//<266> ADD St
            Jituzai_DdxDBGridGCode.ImeMode       := imDisable;
            Jituzai_DdxDBGridGCode.Hankaku       := False;
            Goukei_DdxDBGridGCode.ImeMode        := imDisable;
            Goukei_DdxDBGridGCode.Hankaku        := False;
//<266> ADD Ed
		end;

		// 担当者
// <222> MOD start
{
		if (QueryShain.GetFld('UseKbn').AsInteger = 1) and
           (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
}
		if (QueryShain.GetFld('UseKbn').AsInteger = 1) then
// <222> MOD end
		begin
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then						// フリー
			begin
				Jituzai_ENEdit_PersonCode.Visible	   := false;
				Jituzai_ETEdit_PersonCode.Visible	   := true;
				Goukei_ENEdit_PersonCode.Visible	   := false;
				Goukei_ETEdit_PersonCode.Visible	   := true;
				Jituzai_ETEdit_PersonCode.MaxLength	   := MasterInfo_DMemDataCodeDigitShain.AsInteger;
				Goukei_ETEdit_PersonCode.MaxLength 	   := MasterInfo_DMemDataCodeDigitShain.AsInteger;

//				Jituzai_ETEdit_PersonCode.TabOrder	   := 5;
//				Goukei_ETEdit_PersonCode.TabOrder	   := 5;

// <205> ADD start
// <222> DEL start
//                if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
//                begin
// <222> DEL end
                    Jituzai_ENEdit_SekouPersonCode.Visible	   := false;
                    Jituzai_ETEdit_SekouPersonCode.Visible	   := true;
                    Goukei_ENEdit_SekouPersonCode.Visible	   := false;
                    Goukei_ETEdit_SekouPersonCode.Visible	   := true;
                    Jituzai_ETEdit_SekouPersonCode.MaxLength   := MasterInfo_DMemDataCodeDigitShain.AsInteger;
                    Goukei_ETEdit_SekouPersonCode.MaxLength	   := MasterInfo_DMemDataCodeDigitShain.AsInteger;
// <222> DEL                 end;
// <205> ADD end

				ppDBText11.Alignment				   :=taLeftjustify;
				ppDBText82.Alignment				   :=taLeftjustify;
			end
			else																		// 数字
			begin
				Jituzai_ENEdit_PersonCode.Visible	   := true;
				Jituzai_ETEdit_PersonCode.Visible	   := false;
				Goukei_ENEdit_PersonCode.Visible	   := true;
				Goukei_ETEdit_PersonCode.Visible	   := false;
				Jituzai_ENEdit_PersonCode.Digits	   := MasterInfo_DMemDataCodeDigitShain.AsInteger;
				Goukei_ENEdit_PersonCode.Digits		   := MasterInfo_DMemDataCodeDigitShain.AsInteger;

//				Jituzai_ENEdit_PersonCode.TabOrder	   := 5;
//				Goukei_ENEdit_PersonCode.TabOrder	   := 5;

// <205> ADD start
// <222> DEL start
{
                if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                begin
}
// <222> DEL end
                    Jituzai_ENEdit_SekouPersonCode.Visible	:= true;
                    Jituzai_ETEdit_SekouPersonCode.Visible	:= false;
                    Goukei_ENEdit_SekouPersonCode.Visible	:= true;
                    Goukei_ETEdit_SekouPersonCode.Visible	:= false;
                    Jituzai_ENEdit_SekouPersonCode.Digits	:= MasterInfo_DMemDataCodeDigitShain.AsInteger;
                    Goukei_ENEdit_SekouPersonCode.Digits	:= MasterInfo_DMemDataCodeDigitShain.AsInteger;
// <222> DEL                end;
// <205> ADD end


				if	MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
				begin
					Jituzai_ENEdit_PersonCode.FormatStr:= StringOfChar ('0', MasterInfo_DMemDataCodeDigitShain.AsInteger);
					Goukei_ENEdit_PersonCode.FormatStr := StringOfChar ('0', MasterInfo_DMemDataCodeDigitShain.AsInteger);
// <205> ADD start
// <222> DEL start
{
                    if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                    begin
}
// <222> DEL end
                        Jituzai_ENEdit_SekouPersonCode.FormatStr    := StringOfChar ('0', MasterInfo_DMemDataCodeDigitShain.AsInteger);
                        Goukei_ENEdit_SekouPersonCode.FormatStr     := StringOfChar ('0', MasterInfo_DMemDataCodeDigitShain.AsInteger);
// <222> DEL                     end;
// <205> ADD end
				end
				else
				begin
					Jituzai_ENEdit_PersonCode.FormatStr   := '';
					Goukei_ENEdit_PersonCode.FormatStr	  := '';
// <205> ADD start
// <222> DEL start
{
                    if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                    begin
}
                        Jituzai_ENEdit_SekouPersonCode.FormatStr  := '';
                        Goukei_ENEdit_SekouPersonCode.FormatStr   := '';
// <222> DEL                    end;
// <205> ADD end
				end;

				ppDBText11.Alignment				   :=taRightJustify;
				ppDBText82.Alignment				   :=taRightJustify;
			end;
		end;

		// 取引先
// <222> MOD start
{
		if (QueryTorihiki.GetFld('UseKbn').AsInteger = 1) and
           (m_pMyAppRecord.m_sParameter = '1')            then  // 工事の場合
}
		if (QueryTorihiki.GetFld('UseKbn').AsInteger = 1) then
// <222> MOD end
		begin
			m_bModeChg := false;
            // <144>↓
            Jituzai_ETEdit_CustomerName.Visible := false;
            Goukei_ETEdit_CustomerName.Visible := false;
            // <144>↑

			if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then						// フリー
			begin
				Jituzai_ENEdit_CustomerCode.Visible	   := false;
				Jituzai_ETEdit_CustomerCode.Visible	   := true;
				Goukei_ENEdit_CustomerCode.Visible	   := false;
				Goukei_ETEdit_CustomerCode.Visible	   := true;
				Jituzai_ETEdit_CustomerCode.MaxLength  := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
				Goukei_ETEdit_CustomerCode.MaxLength   := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
// <212> ADD start
                Jituzai_DdxDBGrid_KeiCostomerCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Jituzai_DdxDBGrid_KeiCostomerCode.Alignment     := taLeftjustify;
                Jituzai_DdxDBGrid_KeiCostomerCode.EditAlignment := taLeftjustify;
                Goukei_DdxDBGrid_KeiCostomerCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Goukei_DdxDBGrid_KeiCostomerCode.Alignment     := taLeftjustify;
                Goukei_DdxDBGrid_KeiCostomerCode.EditAlignment := taLeftjustify;

                Jituzai_DdxDBGrid_NyuCostomerCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Jituzai_DdxDBGrid_NyuCostomerCode.Alignment     := taLeftjustify;
                Jituzai_DdxDBGrid_NyuCostomerCode.EditAlignment := taLeftjustify;
                Goukei_DdxDBGrid_NyuCostomerGCode.MaxLength      := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Goukei_DdxDBGrid_NyuCostomerGCode.Alignment      := taLeftjustify;
                Goukei_DdxDBGrid_NyuCostomerGCode.EditAlignment  := taLeftjustify;
// <212> ADD end
// <SEI> ADD start
                Jituzai_DdxDBGrid_SeikyuCostomerGCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Jituzai_DdxDBGrid_SeikyuCostomerGCode.Alignment     := taLeftjustify;
                Jituzai_DdxDBGrid_SeikyuCostomerGCode.EditAlignment := taLeftjustify;
                Goukei_DdxDBGrid_SeikyuCostomerGCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Goukei_DdxDBGrid_SeikyuCostomerGCode.Alignment     := taLeftjustify;
                Goukei_DdxDBGrid_SeikyuCostomerGCode.EditAlignment := taLeftjustify;
// <SEI> ADD end
//				Jituzai_ETEdit_CustomerCode.TabOrder   := 6;
//				Goukei_ETEdit_CustomerCode.TabOrder	   := 6;

				ppDBText12.Alignment				   :=taLeftjustify;
				ppDBText83.Alignment				   :=taLeftjustify;

				ppDBText12.Visible					   := true;
				ppDBText17.Visible					   := true;
				ppDBText21.Visible					   := false;

				ppDBText83.Visible					   := true;
				ppDBText86.Visible					   := true;
				ppDBText22.Visible					   := false;
			end
			else																		// 数字
			begin
				Jituzai_ENEdit_CustomerCode.Visible	   := true;
				Jituzai_ETEdit_CustomerCode.Visible	   := false;
				Goukei_ENEdit_CustomerCode.Visible	   := true;
				Goukei_ETEdit_CustomerCode.Visible	   := false;

				Jituzai_ENEdit_CustomerCode.Digits	   := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
				Goukei_ENEdit_CustomerCode.Digits	   := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;

// <212> ADD start
                Jituzai_DdxDBGrid_KeiCostomerCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Jituzai_DdxDBGrid_KeiCostomerCode.Alignment     := taRightJustify;
                Jituzai_DdxDBGrid_KeiCostomerCode.EditAlignment := taRightJustify;
                Goukei_DdxDBGrid_KeiCostomerCode.MaxLength      := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Goukei_DdxDBGrid_KeiCostomerCode.Alignment      := taRightJustify;
                Goukei_DdxDBGrid_KeiCostomerCode.EditAlignment  := taRightJustify;

                Jituzai_DdxDBGrid_NyuCostomerCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Jituzai_DdxDBGrid_NyuCostomerCode.Alignment     := taRightJustify;
                Jituzai_DdxDBGrid_NyuCostomerCode.EditAlignment := taRightJustify;
                Goukei_DdxDBGrid_NyuCostomerGCode.MaxLength      := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Goukei_DdxDBGrid_NyuCostomerGCode.Alignment      := taRightJustify;
                Goukei_DdxDBGrid_NyuCostomerGCode.EditAlignment  := taRightJustify;
// <212> ADD end
// <SEI> ADD start
                Jituzai_DdxDBGrid_SeikyuCostomerGCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Jituzai_DdxDBGrid_SeikyuCostomerGCode.Alignment     := taRightJustify;
                Jituzai_DdxDBGrid_SeikyuCostomerGCode.EditAlignment := taRightJustify;
                Goukei_DdxDBGrid_SeikyuCostomerGCode.MaxLength     := MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                Goukei_DdxDBGrid_SeikyuCostomerGCode.Alignment     := taRightJustify;
                Goukei_DdxDBGrid_SeikyuCostomerGCode.EditAlignment := taRightJustify;
// <SEI> ADD end
//				Jituzai_ENEdit_CustomerCode.TabOrder   := 6;
//				Goukei_ENEdit_CustomerCode.TabOrder	   := 6;

				if	MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
				begin
					Jituzai_ENEdit_CustomerCode.FormatStr:= StringOfChar ('0', MasterInfo_DMemDataCodeDigitTorihiki.AsInteger);
					Goukei_ENEdit_CustomerCode.FormatStr := StringOfChar ('0', MasterInfo_DMemDataCodeDigitTorihiki.AsInteger);
				end
				else
				begin
					Jituzai_ENEdit_CustomerCode.FormatStr   := '';
					Goukei_ENEdit_CustomerCode.FormatStr	:= '';
				end;

				ppDBText12.Alignment			   :=taRightJustify;
				ppDBText83.Alignment			   :=taRightJustify;

				ppDBText12.Visible				   := true;
				ppDBText17.Visible				   := true;
				ppDBText21.Visible				   := false;

				ppDBText83.Visible				   := true;
				ppDBText86.Visible				   := true;
				ppDBText22.Visible				   := false;
			end;
		end
		else
		begin
			m_bModeChg := true;

			Jituzai_ENEdit_CustomerCode.Visible	   := false;
			Jituzai_ETEdit_CustomerCode.Visible	   := false;
			Goukei_ENEdit_CustomerCode.Visible	   := false;
			Goukei_ETEdit_CustomerCode.Visible	   := false;

			ppDBText12.Visible					   := false;
			ppDBText17.Visible					   := false;
			ppDBText21.Visible					   := true;

			ppDBText83.Visible					   := false;
			ppDBText86.Visible					   := false;
			ppDBText22.Visible					   := true;
            // <144>↓
// <222> DEL start
{
            if (m_pMyAppRecord.m_sParameter = '1') then  // 取引先採用なし&工事の場合
            begin
}
// <222> DEL end
                Jituzai_ETEdit_CustomerName.Visible := true;
                Jituzai_ETEdit_CustomerName.Enabled := true;
                Goukei_ETEdit_CustomerName.Visible := true;
                Goukei_ETEdit_CustomerName.Enabled := true;
// <222> DEL            end;
            // <144>↑
		end;

		// 部門
		if (QueryBumon.GetFld('UseKbn').AsInteger <> 0)
            {and (m_PLFlg)} then		    // 完成振替部門 <130>BSでも登録させる
		begin
            if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then						// フリー
            begin
                Jituzai_ENEdit_BmnCode.Visible		   := false;
                Jituzai_ETEdit_BmnCode.Visible		   := true;
                Goukei_ENEdit_BmnCode.Visible		   := false;
                Goukei_ETEdit_BmnCode.Visible		   := true;
                Jituzai_ETEdit_BmnCode.MaxLength	   := MasterInfo_DMemDataCodeDigitBmn.AsInteger;
                Goukei_ETEdit_BmnCode.MaxLength 	   := MasterInfo_DMemDataCodeDigitBmn.AsInteger;

//				Jituzai_ETEdit_BmnCode.TabOrder		   := 5;
//				Goukei_ETEdit_BmnCode.TabOrder		   := 6;

// <222> ADD DEL start
{
// <205> ADD start
                if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                begin
}
// <222> ADD DEL end
                    Jituzai_ENEdit_SekouBmnCode.Visible     := false;
                    Jituzai_ETEdit_SekouBmnCode.Visible     := true;
                    Goukei_ENEdit_SekouBmnCode.Visible      := false;
                    Goukei_ETEdit_SekouBmnCode.Visible      := true;
                    Jituzai_ETEdit_SekouBmnCode.MaxLength   := MasterInfo_DMemDataCodeDigitBmn.AsInteger;
                    Goukei_ETEdit_SekouBmnCode.MaxLength    := MasterInfo_DMemDataCodeDigitBmn.AsInteger;
// <205> ADD end
// <222> ADD DEL                 end

                ppDBText10.Alignment				   :=taLeftjustify;
                ppDBText96.Alignment				   :=taLeftjustify;
            end
            else																		// 数字
            begin
                Jituzai_ENEdit_BmnCode.Visible		   := true;
                Jituzai_ETEdit_BmnCode.Visible		   := false;
                Goukei_ENEdit_BmnCode.Visible		   := true;
                Goukei_ETEdit_BmnCode.Visible		   := false;

                Jituzai_ENEdit_BmnCode.Digits		   := MasterInfo_DMemDataCodeDigitBmn.AsInteger;
                Goukei_ENEdit_BmnCode.Digits		   := MasterInfo_DMemDataCodeDigitBmn.AsInteger;

//				Jituzai_ENEdit_BmnCode.TabOrder		   := 5;
//				Goukei_ENEdit_BmnCode.TabOrder		   := 6;


// <205> ADD start
// <222> ADD DEL start
{
                if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                begin
}
// <222> ADD DEL end
                    Jituzai_ENEdit_SekouBmnCode.Visible     := true;
                    Jituzai_ETEdit_SekouBmnCode.Visible     := false;
                    Goukei_ENEdit_SekouBmnCode.Visible      := true;
                    Goukei_ETEdit_SekouBmnCode.Visible      := false;
                    Jituzai_ENEdit_SekouBmnCode.Digits      := MasterInfo_DMemDataCodeDigitBmn.AsInteger;
                    Goukei_ENEdit_SekouBmnCode.Digits       := MasterInfo_DMemDataCodeDigitBmn.AsInteger;
// <205> ADD end
// <222> ADD DEL                end

                if	MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
                begin
                    Jituzai_ENEdit_BmnCode.FormatStr   := StringOfChar ('0', MasterInfo_DMemDataCodeDigitBmn.AsInteger);
                    Goukei_ENEdit_BmnCode.FormatStr	   := StringOfChar ('0', MasterInfo_DMemDataCodeDigitBmn.AsInteger);
// <205> ADD start
// <222> DEL start
{
                    if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                    begin
}
// <222> DEL end
                        Jituzai_ENEdit_SekouBmnCode.FormatStr   := StringOfChar ('0', MasterInfo_DMemDataCodeDigitBmn.AsInteger);
                        Goukei_ENEdit_SekouBmnCode.FormatStr    := StringOfChar ('0', MasterInfo_DMemDataCodeDigitBmn.AsInteger);
// <222> DEL                    end;
// <205> ADD end
                end
                else
                begin
                    Jituzai_ENEdit_BmnCode.FormatStr   := '';
                    Goukei_ENEdit_BmnCode.FormatStr	   := '';
// <205> ADD start
// <222> DEL start
{
                    if (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
                    begin
}
// <222> DEL end
                        Jituzai_ENEdit_SekouBmnCode.FormatStr   := '';
                        Goukei_ENEdit_SekouBmnCode.FormatStr    := '';
// <222> DEL                    end;
// <205> ADD end
                end;
                ppDBText10.Alignment				   :=taRightJustify;
                ppDBText96.Alignment				   :=taRightJustify;
            end;
		end;

// <205> ADD start
		// 施主
// <205> MOD start
{
		if (QuerySeshu.GetFld('UseKbn').AsInteger = 1) and
           (m_pMyAppRecord.m_sParameter = '1')         then     // 工事の場合
}
		if (QuerySeshu.GetFld('UseKbn').AsInteger = 1) then
// <205> MOD end
		begin
			if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then						// フリー
			begin
// <276> ADD st
// <277> MOD st				if (m_bKojiLicense) then
                if ( (m_bNoControlSesyu = False) and (m_bKojiLicense) ) or
                   (m_bNoControlSesyu = True) then	// <277> MOD ed
                begin
// <276> ADD ed
                    Jituzai_ENEdit_SeshuCode.Visible	   := false;
                    Goukei_ENEdit_SeshuCode.Visible        := false;
                    Jituzai_ETEdit_SeshuCode.Visible	   := true;
                    Goukei_ETEdit_SeshuCode.Visible        := true;
                    Jituzai_ETEdit_SeshuCode.MaxLength	   := MasterInfo_DMemDataCodeDigitSeshu.AsInteger;
                    Goukei_ETEdit_SeshuCode.MaxLength      := MasterInfo_DMemDataCodeDigitSeshu.AsInteger;
				end;	// <276> ADD
				ppDBText11.Alignment				   :=taLeftjustify;
				ppDBText82.Alignment				   :=taLeftjustify;
			end
			else																		// 数字
			begin
// <276> ADD st
// <277> MOD st				if (m_bKojiLicense) then
                if ( (m_bNoControlSesyu = False) and (m_bKojiLicense) ) or
                   (m_bNoControlSesyu = True) then	// <277> MOD ed
                begin
// <276> ADD ed
                    Jituzai_ENEdit_SeshuCode.Visible	    := true;
                    Goukei_ENEdit_SeshuCode.Visible         := true;
                    Jituzai_ETEdit_SeshuCode.Visible	    := false;
                    Goukei_ETEdit_SeshuCode.Visible         := false;
                    Jituzai_ENEdit_SeshuCode.Digits	        := MasterInfo_DMemDataCodeDigitSeshu.AsInteger;
                    Goukei_ENEdit_SeshuCode.Digits          := MasterInfo_DMemDataCodeDigitSeshu.AsInteger;

                    if	MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 1 then
                    begin
                        Jituzai_ENEdit_SeshuCode.FormatStr  := StringOfChar ('0', MasterInfo_DMemDataCodeDigitSeshu.AsInteger);
                        Goukei_ENEdit_SeshuCode.FormatStr   := StringOfChar ('0', MasterInfo_DMemDataCodeDigitSeshu.AsInteger);
                    end
                    else
                    begin
                        Jituzai_ENEdit_SeshuCode.FormatStr   := '';
                        Goukei_ENEdit_SeshuCode.FormatStr    := '';
                    end;
                end;	// <276> ADD

				ppDBText11.Alignment				   :=taRightJustify;
				ppDBText82.Alignment				   :=taRightJustify;
			end;
		end;

// <205> ADD end

// <SEI> ADD start
											// 工事の場合
		if (m_pMyAppRecord.m_sParameter = '1') then
		begin
        									// 取引先採用あり
			if (QueryTorihiki.GetFld('UseKbn').AsInteger = 1) then
			begin
				// 請求先(実在)
				SetCodeProp(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
					MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,
					Jituzai_ETEdit_SeikyusakiCd,
					Jituzai_ENEdit_SeikyusakiCd,
					nil);

				// 請求先(合計)
				SetCodeProp(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
					MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,
					Goukei_ETEdit_SeikyusakiCd,
					Goukei_ENEdit_SeikyusakiCd,
					nil);
			end;

			// 一括請求先工事(実在)
			SetCodeProp(MasterInfo_DMemDataCodeAttr.AsInteger,
				MasterInfo_DMemDataCodeDigit.AsInteger,
				Jituzai_ETEdit_SeikyuKoujiCd,
				Jituzai_ENEdit_SeikyuKoujiCd,
				nil);

			// 請求先(合計)
			SetCodeProp(MasterInfo_DMemDataCodeAttr.AsInteger,
				MasterInfo_DMemDataCodeDigit.AsInteger,
				Goukei_ETEdit_SeikyuKoujiCd,
				Goukei_ENEdit_SeikyuKoujiCd,
				nil);

            Jituzai_ETEdit_SeikyuKoujiCd.Visible    := false;
            Jituzai_ENEdit_SeikyuKoujiCd.Visible    := false;
			Goukei_ETEdit_SeikyuKoujiCd.Visible     := false;
			Goukei_ENEdit_SeikyuKoujiCd.Visible     := false;

            // 名称ﾗﾍﾞﾙの位置調節
            if Jituzai_ETEdit_SeikyuKoujiCd.Visible then
            begin
             	Jituzai_LLabel_SeikyuKoujiNm.Left := Jituzai_ETEdit_SeikyuKoujiCd.Left +
                							Jituzai_ETEdit_SeikyuKoujiCd.Width + Trunc(18 * m_Zoom / 100);
             	Goukei_LLabel_SeikyuKoujiNm.Left := Goukei_ETEdit_SeikyuKoujiCd.Left +
                							Goukei_ETEdit_SeikyuKoujiCd.Width + Trunc(18 * m_Zoom / 100);
            end
            else
            begin
             	Jituzai_LLabel_SeikyuKoujiNm.Left := Jituzai_ENEdit_SeikyuKoujiCd.Left +
                							Jituzai_ENEdit_SeikyuKoujiCd.Width + Trunc(18 * m_Zoom / 100);
             	Goukei_LLabel_SeikyuKoujiNm.Left := Goukei_ENEdit_SeikyuKoujiCd.Left +
                							Goukei_ENEdit_SeikyuKoujiCd.Width + Trunc(18 * m_Zoom / 100);
            end;
		end;
// <SEI> ADD end
		// 工種
        with QueryFree do
        begin
            Close ();
            SQL.Clear;
//<255> DEL            SQL.ADD('select Count(*) As Kensu from KousyuPtnMA');
            SQL.ADD('select Count(NCode) As Kensu from KousyuPtnMA');  //<255> ADD
            SQL.Add('where RDelKbn = 0 and Masterkbn = ');
            SQL.Add(IntToStr(m_arAdoptInfo[ECombo_Header.ItemIndex].nMasterDivision + 100));
            Open ();

            if EOF = false then
                iPtnCnt := GetFld('Kensu').AsInteger
            else
                iPtnCnt := 0;
        end;

        Jituzai_LLabel_PartKbn.Caption		   := MasterInfo_DMemDataKosyuName.AsString + '管理区分';
        Jituzai_LLabel_PatternNo.Caption	   := MasterInfo_DMemDataKosyuName.AsString + 'パターンＮＯ';

        Jituzai_ENEdit_PartKbn.SelectItems.Clear;
        Jituzai_ENEdit_PartKbn.SelectItems.Append(IntToStr(0) + ':なし');
        Jituzai_ENEdit_PartKbn.SelectItems.Append(IntToStr(1) + ':あり（全' + MasterInfo_DMemDataKosyuName.AsString + '）');
        if iPtnCnt <> 0 then
            Jituzai_ENEdit_PartKbn.SelectItems.Append(IntToStr(2) + ':あり（パターン指定）');

        sPart[0] := 'なし';
        sPart[1] := 'あり（全' + MasterInfo_DMemDataKosyuName.AsString + '）';

// <200> MOD start
(*
        if iPtnCnt <> 0 then
            sPart[2] := 'あり（パターン指定）'
        else
            sPart[2] := '';
*)
		if iPtnCnt <> 0 then        		// 作業内訳(工種)ﾊﾟﾀｰﾝがありの場合
        begin
         	sPart[2] := 'あり（パターン指定）';
            Jituzai_ENEdit_PartKbn.MaxValue := 2;
        end
        else                    			// 作業内訳(工種)ﾊﾟﾀｰﾝがなしの場合
        begin
        	sPart[2] := '';
            								// 管理区分に「2」を入力できないようにする
          	Jituzai_ENEdit_PartKbn.MaxValue := 1;
        end;
// <200> ADD end

        Jituzai_ENEdit_DetailKbn2.SelectItems.Clear;
        if MasterInfo_DMemDataMstrKbn5.AsInteger = 0 then
        begin
            Jituzai_ENEdit_DetailKbn2.SelectItems.Append(IntToStr(0) + ':標準（入金勘定）');
            sDetail2[0] := '標準（入金勘定）';
        end
        else
        begin
            Jituzai_ENEdit_DetailKbn2.SelectItems.Append(IntToStr(0) + ':標準（通過勘定）');
            sDetail2[0] := '標準（通過勘定）';
        end;
        Jituzai_ENEdit_DetailKbn2.SelectItems.Append(IntToStr(1) + ':入金勘定');
        Jituzai_ENEdit_DetailKbn2.SelectItems.Append(IntToStr(2) + ':通過勘定');
        sDetail2[1] := '入金勘定';
        sDetail2[2] := '通過勘定';

        ppLabel103.Caption	   := MasterInfo_DMemDataKosyuName.AsString + '管理区分';
        ppLabel104.Caption	   := MasterInfo_DMemDataKosyuName.AsString + 'パターンＮＯ';

//<273> St　　Gali2　プロジェクトの場合
        if (( m_pMyAppRecord.m_sParameter <> '1' ) and (TMSeries.IsGalielopt2 = True )) then
        begin
// <291> ADD st
        	Jituzai_ENEdit_SalesBase.SelectItems.Clear;
            Jituzai_ENEdit_SalesBase.SelectItems.Append(IntToStr(0) + ':工事完成基準');
			Jituzai_ENEdit_SalesBase.MaxValue := 0;
            if (MasterInfo_DMemDataMstrKbn4.AsInteger= 1) then
            begin
            	Jituzai_ENEdit_SalesBase.SelectItems.Append(IntToStr(1) + ':工事進行基準');
				Jituzai_ENEdit_SalesBase.MaxValue := 1;
            end;
        	if (MasterInfo_DMemDataMstrKbn20.AsInteger= 1) then
        	begin
            	Jituzai_ENEdit_SalesBase.SelectItems.Append(IntToStr(2) + ':原価回収基準');
				Jituzai_ENEdit_SalesBase.MaxValue := 2;
        	end;
// <291> ADD ed
            // 工事進行基準採用区分(0.採用なし、1.採用あり)
            Jituzai_ENEdit_SalesBase.value          := 0;
            fnSetLabel(Jituzai_ENEdit_SalesBase);
// <291> MOD st
            // 工事進行基準採用区分=1:ありの場合
//            if (MasterInfo_DMemDataMstrKbn4.AsInteger= 1 ) then
            // 工事進行基準採用区分=1:ありの場合もしくは収益認識基準採用区分=1:ありの場合
            if (MasterInfo_DMemDataMstrKbn4.AsInteger= 1 ) or (MasterInfo_DMemDataMstrKbn20.AsInteger= 1 ) then
// <291> MOD ed
            begin
                Jituzai_ENEdit_SalesBase.Enabled    := true;
            end
            else
            begin
                Jituzai_ENEdit_SalesBase.value      := 0;
                fnSetLabel(Jituzai_ENEdit_SalesBase);
                Jituzai_ENEdit_SalesBase.Enabled    := false;
            end;

            // 売上完成振替パターン
            if (MasterInfo_DMemDataKojKbn1.AsInteger <> 0 ) then
            begin
                Jituzai_ENEdit_DetailKbn1.Enabled   := true;
            end
            else
            begin
                Jituzai_ENEdit_DetailKbn1.Enabled   := False;
            end;

            // 売上高自動振替区分
            if (MasterInfo_DMemDataKojKbn2.asInteger = 1 ) then
            begin
                Jituzai_ENEdit_KojKbn2.value        := 0;
                fnSetLabel(Jituzai_ENEdit_KojKbn2);
                Jituzai_ENEdit_KojKbn2.Enabled      := true;
            end
            else
            begin
                Jituzai_ENEdit_KojKbn2.value        := 1;
                fnSetLabel(Jituzai_ENEdit_KojKbn2);
                Jituzai_ENEdit_KojKbn2.Enabled      := false;
            end;
            m_KojKbn        := MasterInfo_DMemDataKojKbn2.asInteger;
            m_MstrKbn4      := MasterInfo_DMemDataMstrKbn4.asInteger;
            m_KojHurikaeKbn := MasterInfo_DMemDataKojKbn1.asInteger;
// <291> ADD st
            m_MstrKbn20     := MasterInfo_DMemDataMstrKbn20.asInteger;
// <291> ADD ed
        end;
//<273> Ed

        if MasterInfo_DMemDataKojKbn2.AsInteger = 0 then
        begin
            // 売上計上科目コード
            Jituzai_ENEdit_SalesKmkCd.Enabled		:= false;
            Jituzai_ENEdit_SalesKmkCd.Color			:= Self.Color;
            Jituzai_ENEdit_SalesKmkCd.Value			:= 0;
            Jituzai_ENEdit_SalesKmkCd.InputFlag		:= true;
            Jituzai_LLabel_SalesKmkCdDsp.Caption	:= '';

            // 完成売上高相手勘定区分
            Jituzai_ENEdit_DetailKbn2.Enabled		:= false;
            //<275> -Del Jituzai_ENEdit_DetailKbn2.Color			:= Self.Color;
            Jituzai_ENEdit_DetailKbn2.Value			:= 0;
            Jituzai_ENEdit_DetailKbn2.InputFlag		:= true;
            Jituzai_LLabel_DetailKbn2Dsp.Caption	:= '';

// <211> ADD start
            Jituzai_ENEdit_KojKbn2.Enabled          := false;
            //<275> -Del Jituzai_ENEdit_KojKbn2.Color            := Self.Color;
            Jituzai_ENEdit_KojKbn2.Value            := 1;
            Jituzai_ENEdit_KojKbn2.InputFlag        := true;
            Jituzai_LLabel_KojKbn2Dsp.Caption       := '';
// <211> ADD start

            ppLabel97.Visible := false;
            ppLabel99.Visible := false;
            ppDBText34.Visible := false;
            ppDBText38.Visible := false;
            ppDBText35.Visible := false;
            ppDBText39.Visible := false;
        end;

        if QueryKosyu.Eof = false then
        begin
            if MasterInfo_DMemDataKsyUse.AsInteger <> 0 then
            begin
                Jituzai_ENEdit_PartKbn.Enabled		:= true;

                if iPtnCnt <> 0 then
                    Jituzai_ENEdit_PatternNo.Enabled	:= true
                else
                begin
                    Jituzai_ENEdit_PatternNo.Enabled		:= false;
                    Jituzai_ENEdit_PatternNo.Color			:= Self.Color;
                    Jituzai_ENEdit_PatternNo.Value			:= 0;
                    Jituzai_ENEdit_PatternNo.InputFlag		:= true;
                    Jituzai_LLabel_PatternNoDsp.Caption		:= '';

                    ppLabel104.Visible := false;
                    ppDBText36.Visible := false;
                    ppDBText37.Visible := false;
                end;
//?				ppDBText10.Visible					   := true;
//?				ppDBText96.Visible					   := true;
            end
            else
            begin
                Jituzai_ENEdit_PartKbn.Enabled		:= false;
                Jituzai_ENEdit_PartKbn.Color		:= Self.Color;
                Jituzai_ENEdit_PatternNo.Enabled	:= false;
                Jituzai_ENEdit_PatternNo.Color		:= Self.Color;

//?				ppDBText10.Visible					   := true;
//?				ppDBText96.Visible					   := true;

                // 工種管理区分
                Jituzai_ENEdit_PartKbn.Value		:= 0;
                Jituzai_ENEdit_PartKbn.InputFlag	:= true;
                Jituzai_LLabel_PartKbnDsp.Caption	:= '';
                // パターンNO
                Jituzai_ENEdit_PatternNo.Value		:= 0;
                Jituzai_ENEdit_PatternNo.InputFlag	:= true;
                Jituzai_LLabel_PatternNoDsp.Caption	:= '';

                ppLabel103.Visible := false;
                ppLabel104.Visible := false;
                ppDBText40.Visible := false;
                ppDBText36.Visible := false;
                ppDBText41.Visible := false;
                ppDBText37.Visible := false;
            end;
        end
        else
        begin
            Jituzai_ENEdit_PartKbn.Enabled			:= false;
            Jituzai_ENEdit_PartKbn.Color			:= Self.Color;
            Jituzai_ENEdit_PatternNo.Enabled		:= false;
            Jituzai_ENEdit_PatternNo.Color			:= Self.Color;

//?			ppDBText10.Visible					   := true;
//?			ppDBText96.Visible					   := true;

            // 工種管理区分
            Jituzai_ENEdit_PartKbn.Value			:= 0;
            Jituzai_ENEdit_PartKbn.InputFlag		:= true;
            Jituzai_LLabel_PartKbnDsp.Caption		:= '';
            // パターンNO
            Jituzai_ENEdit_PatternNo.Value			:= 0;
            Jituzai_ENEdit_PatternNo.InputFlag		:= true;
            Jituzai_LLabel_PatternNoDsp.Caption		:= '';

            ppLabel103.Visible := false;
            ppLabel104.Visible := false;
            ppDBText40.Visible := false;
            ppDBText36.Visible := false;
            ppDBText41.Visible := false;
            ppDBText37.Visible := false;
        end;
//		Jituzai_ENEdit_SalesBase.TabOrder	   := 8;
{ <106>
        Jituzai_ENEdit_PersonCode.TabOrder	   := 0;
        Jituzai_ETEdit_PersonCode.TabOrder	   := 1;
        Jituzai_ENEdit_CustomerCode.TabOrder   := 2;
        Jituzai_ETEdit_CustomerCode.TabOrder   := 3;
        Jituzai_ENEdit_HaifuKbn.TabOrder	   := 4;
        Jituzai_ENEdit_PartKbn.TabOrder	   	   := 5;
        Jituzai_ENEdit_PatternNo.TabOrder	   := 6;
        Jituzai_EDEdit_StartDate.TabOrder	   := 7;
        Jituzai_EDEdit_EndDate.TabOrder	       := 8;
        Jituzai_EDEdit_JStartDate.TabOrder	   := 9;
        Jituzai_EDEdit_JEndDate.TabOrder	   := 10;
        Jituzai_EDEdit_FinishDate.TabOrder	   := 11;
        Jituzai_ENEdit_MoveKbn.TabOrder	       := 12;
        Jituzai_ETEdit_BIKO.TabOrder	       := 13;

        Goukei_ENEdit_PersonCode.TabOrder	   := 0;
        Goukei_ETEdit_PersonCode.TabOrder	   := 1;
        Goukei_ENEdit_CustomerCode.TabOrder    := 2;
        Goukei_ETEdit_CustomerCode.TabOrder    := 3;
        Goukei_ENEdit_RootKbn.TabOrder         := 4;
        Goukei_ETEdit_BmnCode.TabOrder         := 5;
        Goukei_ENEdit_BmnCode.TabOrder         := 6;
        Goukei_EDEdit_StartDate.TabOrder       := 7;
        Goukei_EDEdit_EndDate.TabOrder         := 8;
        Goukei_EDEdit_JStartDate.TabOrder      := 9;
        Goukei_EDEdit_JEndDate.TabOrder        := 10;
        Goukei_EDEdit_FinishDate.TabOrder	   := 11;
}
		// 和暦西暦区分取得
		with QueryFree do
		begin
			m_iRekiKbn := 0;
			m_iMailKbn := 0;

			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('ComKbn3 ');
			SQL.ADD ('From DTMAIN_MAS ');
			Open ();

			if EOF = false then
        		m_iMailKbn := GetFld('ComKbn3').AsInteger;

			Close ();
			SQL.Clear;
			SQL.ADD ('SELECT ');
			SQL.ADD ('YearKbn,  DTName7 ');
			SQL.ADD ('From DTMAIN ');
			Open ();

			// 和暦西暦設定
			FormatSettings.ShortDateFormat := 'yyyy/mm/dd';							// 西暦
			if EOF = false then
			begin
				m_iRekiKbn := GetFld('YearKbn').AsInteger;
				gstErrorStr := GetFld('DTName7').AsString;

				JNTMasDateCtrl.JNTMasSetFormDateIni(TJNTCRP018001f(self), m_iRekiKbn);	// <#NGEN>

				if GetFld('YearKbn').AsInteger = 0 then
				begin
//					ShortDateFormat := 'gggee/mm/dd';							// 和暦
// <#NGEN> Del Start
//					Jituzai_EDEdit_StartDate.DateFormat		:=	TDateFormatType(1);
//					Jituzai_EDEdit_EndDate.DateFormat		:=	TDateFormatType(1);
//					Jituzai_EDEdit_JStartDate.DateFormat   	:=	TDateFormatType(1);
//					Jituzai_EDEdit_JEndDate.DateFormat		:=	TDateFormatType(1);
//					Jituzai_EDEdit_FinishDate.DateFormat	:=	TDateFormatType(1);
//					Jituzai_EDEdit_StartDate.Gengou			:=	'H';
//					Jituzai_EDEdit_EndDate.Gengou			:=	'H';
//					Jituzai_EDEdit_JStartDate.Gengou			:=	'H';
//					Jituzai_EDEdit_JEndDate.Gengou			:=	'H';
//					Jituzai_EDEdit_FinishDate.Gengou		:=	'H';

//					Goukei_EDEdit_StartDate.DateFormat		:=	TDateFormatType(1);
//					Goukei_EDEdit_EndDate.DateFormat		:=	TDateFormatType(1);
//					Goukei_EDEdit_JStartDate.DateFormat		:=	TDateFormatType(1);
//					Goukei_EDEdit_JEndDate.DateFormat		:=	TDateFormatType(1);
//					Goukei_EDEdit_FinishDate.DateFormat		:=	TDateFormatType(1);
//					Goukei_EDEdit_StartDate.Gengou			:=	'H';
//					Goukei_EDEdit_EndDate.Gengou			:=	'H';
//					Goukei_EDEdit_JStartDate.Gengou			:=	'H';
//					Goukei_EDEdit_JEndDate.Gengou			:=	'H';
//					Goukei_EDEdit_FinishDate.Gengou			:=	'H';

//					Jituzai_DdxDBGrid_KeiContDate.DateEditFormat := dfEMD;
//					Jituzai_DdxDBGrid_NyuContDate.DateEditFormat := dfEMD;
//					Goukei_DdxDBGrid_KeiContDate.DateEditFormat := dfEMD;
//					Goukei_DdxDBGrid_NyuContDate.DateEditFormat := dfEMD;
//					Jituzai_DdxDBGrid_KeiContDate.Gengou	:= 'H';
//					Jituzai_DdxDBGrid_NyuContDate.Gengou	:= 'H';
//					Goukei_DdxDBGrid_KeiContDate.Gengou		:= 'H';
//					Goukei_DdxDBGrid_NyuContDate.Gengou		:= 'H';
// <#NGEN> Del End
					JKeiyaku_DMemDataContDate.DisplayFormat := 'g ee/mm/dd';
					GKeiyaku_DMemDataContDate.DisplayFormat := 'g ee/mm/dd';
					JNyukin_DMemDataContDate.DisplayFormat := 'g ee/mm/dd';
					GNyukin_DMemDataContDate.DisplayFormat := 'g ee/mm/dd';
// <SEI> ADD start
// <#NGEN> Del Start
//					Jituzai_DdxDBGrid_SeikyuContDate.DateEditFormat 		:= dfEMD;/
//					Jituzai_DdxDBGrid_SeikyuSeikyuYoteiDate.DateEditFormat 	:= dfEMD;
//                    Jituzai_DdxDBGrid_SeikyuSeikyuOutputDate.DateEditFormat	:= dfEMD;
//                    Jituzai_DdxDBGrid_SeikyuSeikyuDate.DateEditFormat 		:= dfEMD;
//					Goukei_DdxDBGrid_SeikyuContDate.DateEditFormat 			:= dfEMD;
//					Goukei_DdxDBGrid_SeikyuSeikyuYoteiDate.DateEditFormat 	:= dfEMD;
//                    Goukei_DdxDBGrid_SeikyuSeikyuOutputDate.DateEditFormat 	:= dfEMD;
//                    Goukei_DdxDBGrid_SeikyuSeikyuDate.DateEditFormat 		:= dfEMD;
//					Jituzai_DdxDBGrid_SeikyuContDate.Gengou			:= 'H';
//					Jituzai_DdxDBGrid_SeikyuSeikyuYoteiDate.Gengou	:= 'H';
//                    Jituzai_DdxDBGrid_SeikyuSeikyuOutputDate.Gengou	:= 'H';
//                    Jituzai_DdxDBGrid_SeikyuSeikyuDate.Gengou		:= 'H';
//					Goukei_DdxDBGrid_SeikyuContDate.Gengou			:= 'H';
//					Goukei_DdxDBGrid_SeikyuSeikyuYoteiDate.Gengou 	:= 'H';
//                    Goukei_DdxDBGrid_SeikyuSeikyuOutputDate.Gengou	:= 'H';
//                    Goukei_DdxDBGrid_SeikyuSeikyuDate.Gengou	 	:= 'H';
// <#NGEN> Del End
					JSeikyu_DMemDataContDate.DisplayFormat := 'g ee/mm/dd';
					JSeikyu_DMemDataSeikyuYoteiDate.DisplayFormat := 'g ee/mm/dd';
					JSeikyu_DMemDataSeikyuOutputDate.DisplayFormat := 'g ee/mm/dd';
					JSeikyu_DMemDataSeikyuDate.DisplayFormat := 'g ee/mm/dd';
					GSeikyu_DMemDataContDate.DisplayFormat := 'g ee/mm/dd';
					GSeikyu_DMemDataSeikyuYoteiDate.DisplayFormat := 'g ee/mm/dd';
					GSeikyu_DMemDataSeikyuOutputDate.DisplayFormat := 'g ee/mm/dd';
					GSeikyu_DMemDataSeikyuDate.DisplayFormat := 'g ee/mm/dd';
// <SEI> ADD end
{					JHojyoMA_PrintStartDate.DisplayFormat	:= 'g ee/mm/dd';
 					JHojyoMA_PrintScheduleDate.DisplayFormat:= 'g ee/mm/dd';
					JHojyoMA_PrintFinishDate.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintUpDateTime.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateK1.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateK2.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateK3.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateN1.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateN2.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateN3.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateN4.DisplayFormat	:= 'g ee/mm/dd';
					JHojyoMA_PrintContDateN5.DisplayFormat	:= 'g ee/mm/dd';
					ppDBText18.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText19.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText20.DisplayFormat				:= 'g ee/mm/dd';
					R_JS_LastUpDate.DisplayFormat			:= 'g ee/mm/dd';
					ppDBText54.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText58.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText63.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText31.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText43.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText44.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText45.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText46.DisplayFormat				:= 'g ee/mm/dd';

					GHojyoMA_PrintStartDate.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintScheduleDate.DisplayFormat:= 'g ee/mm/dd';
					GHojyoMA_PrintFinishDate.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintUpDateTime.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateK1.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateK2.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateK3.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateN1.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateN2.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateN3.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateN4.DisplayFormat	:= 'g ee/mm/dd';
					GHojyoMA_PrintContDateN5.DisplayFormat	:= 'g ee/mm/dd';
					ppDBText87.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText88.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText89.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText75.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText121.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText125.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText130.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText110.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText112.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText113.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText114.DisplayFormat				:= 'g ee/mm/dd';
					ppDBText115.DisplayFormat				:= 'g ee/mm/dd';
}				end
				else
				begin
//					ShortDateFormat := 'yyyy/mm/dd';							// 西暦
// <#NGEN> Del Start
//					Jituzai_EDEdit_StartDate.DateFormat		:=	TDateFormatType(0);
//					Jituzai_EDEdit_EndDate.DateFormat		:=	TDateFormatType(0);
//					Jituzai_EDEdit_JStartDate.DateFormat 	:=	TDateFormatType(0);
//					Jituzai_EDEdit_JEndDate.DateFormat		:=	TDateFormatType(0);
//					Jituzai_EDEdit_FinishDate.DateFormat	:=	TDateFormatType(0);
//					Jituzai_EDEdit_StartDate.Gengou			:=	#0;
//					Jituzai_EDEdit_EndDate.Gengou			:=	#0;
//					Jituzai_EDEdit_JStartDate.Gengou	 	:=	#0;
//					Jituzai_EDEdit_JEndDate.Gengou			:=	#0;
//					Jituzai_EDEdit_FinishDate.Gengou		:=	#0;

//					Goukei_EDEdit_StartDate.DateFormat		:=	TDateFormatType(0);
//					Goukei_EDEdit_EndDate.DateFormat		:=	TDateFormatType(0);
//					Goukei_EDEdit_JStartDate.DateFormat		:=	TDateFormatType(0);
//					Goukei_EDEdit_JEndDate.DateFormat		:=	TDateFormatType(0);
//					Goukei_EDEdit_FinishDate.DateFormat		:=	TDateFormatType(0);
//					Goukei_EDEdit_StartDate.Gengou			:=	#0;
//					Goukei_EDEdit_EndDate.Gengou			:=	#0;
//					Goukei_EDEdit_JStartDate.Gengou			:=	#0;
//					Goukei_EDEdit_JEndDate.Gengou			:=	#0;
//					Goukei_EDEdit_FinishDate.Gengou			:=	#0;

//					Jituzai_DdxDBGrid_KeiContDate.DateEditFormat := dfYMD;
//					Jituzai_DdxDBGrid_NyuContDate.DateEditFormat := dfYMD;
//					Goukei_DdxDBGrid_KeiContDate.DateEditFormat := dfYMD;
//					Goukei_DdxDBGrid_NyuContDate.DateEditFormat := dfYMD;
//					Jituzai_DdxDBGrid_KeiContDate.Gengou	:= #0;
//					Jituzai_DdxDBGrid_NyuContDate.Gengou	:= #0;
//					Goukei_DdxDBGrid_KeiContDate.Gengou		:= #0;
//					Goukei_DdxDBGrid_NyuContDate.Gengou		:= #0;
// <#NGEN> Del End
					JKeiyaku_DMemDataContDate.DisplayFormat := 'yyyy/mm/dd';
					GKeiyaku_DMemDataContDate.DisplayFormat := 'yyyy/mm/dd';
					JNyukin_DMemDataContDate.DisplayFormat := 'yyyy/mm/dd';
					GNyukin_DMemDataContDate.DisplayFormat := 'yyyy/mm/dd';
// <SEI> ADD start
// <#NGEN> Del Start
//					Jituzai_DdxDBGrid_SeikyuContDate.DateEditFormat 	:= dfYMD;
//					Jituzai_DdxDBGrid_SeikyuSeikyuYoteiDate.DateEditFormat  := dfYMD;
//                    Jituzai_DdxDBGrid_SeikyuSeikyuOutputDate.DateEditFormat := dfYMD;
//                    Jituzai_DdxDBGrid_SeikyuSeikyuDate.DateEditFormat 		:= dfYMD;
//					Goukei_DdxDBGrid_SeikyuContDate.DateEditFormat 			:= dfYMD;
//					Goukei_DdxDBGrid_SeikyuSeikyuYoteiDate.DateEditFormat 	:= dfYMD;
//                    Goukei_DdxDBGrid_SeikyuSeikyuOutputDate.DateEditFormat 	:= dfYMD;
//                    Goukei_DdxDBGrid_SeikyuSeikyuDate.DateEditFormat 	 	:= dfYMD;
//					Jituzai_DdxDBGrid_SeikyuContDate.Gengou			:= #0;
//					Jituzai_DdxDBGrid_SeikyuSeikyuYoteiDate.Gengou	:= #0;
//                    Jituzai_DdxDBGrid_SeikyuSeikyuOutputDate.Gengou	:= #0;
//                    Jituzai_DdxDBGrid_SeikyuSeikyuDate.Gengou  		:= #0;
//					Goukei_DdxDBGrid_SeikyuContDate.Gengou			:= #0;
//					Goukei_DdxDBGrid_SeikyuSeikyuYoteiDate.Gengou  	:= #0;
//                    Goukei_DdxDBGrid_SeikyuSeikyuOutputDate.Gengou	:= #0;
//                    Goukei_DdxDBGrid_SeikyuSeikyuDate.Gengou		:= #0;
// <#NGEN> Del End
					JSeikyu_DMemDataContDate.DisplayFormat := 'yyyy/mm/dd';
					JSeikyu_DMemDataSeikyuYoteiDate.DisplayFormat := 'yyyy/mm/dd';
					JSeikyu_DMemDataSeikyuOutputDate.DisplayFormat := 'yyyy/mm/dd';
					JSeikyu_DMemDataSeikyuDate.DisplayFormat := 'yyyy/mm/dd';
					GSeikyu_DMemDataContDate.DisplayFormat := 'yyyy/mm/dd';
					GSeikyu_DMemDataSeikyuYoteiDate.DisplayFormat := 'yyyy/mm/dd';
					GSeikyu_DMemDataSeikyuOutputDate.DisplayFormat := 'yyyy/mm/dd';
					GSeikyu_DMemDataSeikyuDate.DisplayFormat := 'yyyy/mm/dd';
// <SEI> ADD end
{					JHojyoMA_PrintStartDate.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintScheduleDate.DisplayFormat:= 'yyyy/mm/dd';
					JHojyoMA_PrintFinishDate.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintUpDateTime.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateK1.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateK2.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateK3.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateN1.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateN2.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateN3.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateN4.DisplayFormat	:= 'yyyy/mm/dd';
					JHojyoMA_PrintContDateN5.DisplayFormat	:= 'yyyy/mm/dd';
					ppDBText18.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText19.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText20.DisplayFormat				:= 'yyyy/mm/dd';
					R_JS_LastUpDate.DisplayFormat			:= 'yyyy/mm/dd';
					ppDBText54.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText58.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText63.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText31.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText43.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText44.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText45.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText46.DisplayFormat				:= 'yyyy/mm/dd';

					GHojyoMA_PrintStartDate.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintScheduleDate.DisplayFormat:= 'yyyy/mm/dd';
					GHojyoMA_PrintFinishDate.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintUpDateTime.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateK1.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateK2.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateK3.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateN1.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateN2.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateN3.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateN4.DisplayFormat	:= 'yyyy/mm/dd';
					GHojyoMA_PrintContDateN5.DisplayFormat	:= 'yyyy/mm/dd';
					ppDBText87.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText88.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText89.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText75.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText121.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText125.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText130.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText110.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText112.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText113.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText114.DisplayFormat				:= 'yyyy/mm/dd';
					ppDBText115.DisplayFormat				:= 'yyyy/mm/dd';
}				end;
			end;
		end;
	finally
		QueryMaster.Free;
		QueryBumon.Free;
		QueryShain.Free;
		QueryTorihiki.Free;
		QueryFree.Free;
		QueryKosyu.Free;  //<246> ADD
		QuerySeshu.Free;  //<246> ADD
	end;
end;

//**********************************************************************
//*		Proccess	:	実在契約情報GridColumn移動前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiBeforeChangeColumn(
  Sender: TObject; Node: TdxTreeListNode; Column: Integer;
  NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
var
	dDate	  :	TDateTime;
	dPrevDate :	TDateTime;
	stGCode	  :	String;
//	iCnt	  :	Integer;
//	crKingaku :	Currency;
//	crRitu	  :	Currency;
//	iKingaku  :	Int64;
//    craRateCD : Integer;    // 比較先税ｺｰﾄﾞ
//    croRateCD : Integer;    // 比較元税ｺｰﾄﾞ
//    crBaseNo  : Integer;
//    iLoop     : Integer;
//   	QueryRead : TMQuery;    // <212> ADD
//    iRecCount : Integer;    // <212> ADD
    iRet	  :	Integer;    // <235> ADD
//<TAX> ADD St
    returnCode : Integer;
    sWk : string;
    kojiInfoParam : TKojiInfoParam;
    oCont : TKojiInfo2;
    oDic,
    oDic2 : TDIC_COTXRATE;
//<TAX> ADD Ed
begin
	if ( m_fEnd = 1 ) then Exit;

//	iKingaku :=	0;


    // 契約年月日
	if ( Column = COL_KEINEN ) then
	begin
		if ( m_bFieldFlg = true ) then Exit;

		dDate     := JKeiyaku_DMemDataContDate.AsDateTime;
		dPrevDate := JKeiyaku_DMemDataPrevContDate.AsDateTime;

		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			    stGCode := Jituzai_ETEdit_GCode.Text
		else    stGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);
// <235> MOD start
{
		if ( dDate <> 0 ) then
		begin
			if ( dDate <> dPrevDate ) then
			begin
				for iCnt := 1 to 8 do
				begin
					if ( iCnt <> JKeiyaku_DMemData.RecNo ) then
					begin
						(*
						if ( dDate = JKeiDateSave[iCnt] ) then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
                            Jituzai_DdxDBGrid_Kei.ShowEditor;
							CanChange := false;
							Abort;
						end;
                        *) // <179>
					end;
				end;
			end;
		end;
}
        // 日付入力有
        m_KeiyakuCheckFlg := False; // 変更チェックフラグ
        if (dDate <> 0) and (dPrevDate <> 0) then
        begin
            // 工事かつ日付が変更されている？
			if  (m_pMyAppRecord.m_sParameter = '1') and (dDate <> dPrevDate) then
			begin
                //内部月変更チェック
                if fnKeiyakuDateCheck(dPrevDate,dDate) = true then
                begin
                    iRet := MjsMessageBoxEX(Self,MSG_KEIYAKU,'確認',mjInformation ,mjOkCancel,mjDefCancel);
                    if (iRet <> mrOk) then
                    begin
                        if (JKeiyaku_DMemData.State <> dsEdit) then
                            JKeiyaku_DMemData.Edit;
                        JKeiyaku_DMemDataContDate.AsDateTime    := dPrevDate;   //変更前日付セット
                        Jituzai_DdxDBGrid_Kei.FocusedColumn	    := COL_KEINEN;
                        Jituzai_DdxDBGrid_Kei.ShowEditor;
                        CanChange := false;
                        Abort;
                    end
                    else
                    begin
                        if (JKeiyaku_DMemData.State <> dsEdit) then
                            JKeiyaku_DMemData.Edit;
                        JKeiyaku_DMemDataCheck.AsInteger := 0;
                        m_KeiyakuCheckFlg := True;
                    end;
                end;
			end;
		end;
// <235> MOD end
//<TAX_1> ADD St
        if (dDate = 0) then
        begin
            returnCode := moKojiInfoMn.DeleteKojiInfo2(
                toKojiInfo2Param(JKeiyaku_DMemData));
            // 契約別仮受消費税存在時
            if (returnCode = CONT_EXISTSCONTACCOUNT) then
            begin
                JKeiyaku_DMemData.Edit;
                oCont := moKojiInfoMn.GetKojiInfo2(JKeiyaku_DMemData.RecNo);
                JKeiyaku_DMemDataContDate.AsDateTime := oCont.ContDate;
                MjsMessageBoxEX(Self,
                    GetContMessage(returnCode),'警告',mjWarning ,mjOk,mjDefOK);
                Root_PMTab.Items.Selected		    := PAGE_JITUZAI;
                Jituzai_PMTab.Items.Selected	    := PAGE_KEIYAKU;
                Jituzai_DdxDBGrid_Kei.SetFocus;
                Jituzai_DdxDBGrid_Kei.FocusedColumn     := COL_KEINEN;
                Jituzai_DdxDBGrid_Kei.ShowEditor;
                CanChange := false;
                Abort;
            end;
        end;
//<TAX_1> ADD Ed
//<TAX> ADD St
        returnCode := checkKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData));

        case returnCode of
            // 標準税率同士の税率不一致
            CONT_CHANGERATE  :
            begin
                sWk := GetContMessage(returnCode);
                kojiInfoParam := toKojiInfoParam(SUMKBN_JITUZAI);
                oDic := moBusiness.GetStandardTaxRate(
                    dDate, KojiInfoParam.YoteiDateED);      // 現在の標準税率
                oCont := moKojiInfoMn.GetKojiInfo2(JKeiyaku_DMemData.RecNo); // 変更前の契約情報
                oDic2 := moBusiness.GetStandardTaxRate(
                    oCont.ContDate, KojiInfoParam.YoteiDateED);  // 変更前の標準税率

                sWk := Format(sWk, [oDic2.TaxName, oDic.TaxName]);
                iRet := MjsMessageBoxEX(Self, sWk,'確認',mjQuestion ,mjYesNo,mjDefNO);
                if iRet <> mrYes then
                begin
                    Root_PMTab.Items.Selected		    := PAGE_JITUZAI;
                    Jituzai_PMTab.Items.Selected	    := PAGE_KEIYAKU;
                    Jituzai_DdxDBGrid_Kei.SetFocus;
                    Jituzai_DdxDBGrid_Kei.FocusedColumn     := COL_KEINEN;
                    Jituzai_DdxDBGrid_Kei.ShowEditor;
                    CanChange := false;
                    Abort;
                end
                else
                begin
                    changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);
                    // 消費税情報再セット
                    setContTaxInfo(
                        kojiInfoParam,
                        toKojiInfo2Param(JKeiyaku_DMemData),
                        JKeiyaku_DMemData,
                        false);
                end;
            end
            else
            begin
                changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);
            end;
        end;
//<TAX> ADD Ed
	end
	else
	begin
        // 税率
		if ( Column = COL_ZEIRITU ) then
		begin
			if ( m_iAccProKbn <> 0 ) then   // 税率 ≠ 0
			begin

                // ↓↓↓<169>
// <291> MOD st
//                if ( Jituzai_ENEdit_SalesBase.Value = 1 ) then                  // 工事進行基準の場合
                if ( Jituzai_ENEdit_SalesBase.Value <> 0 ) then                 // 工事進行基準の場合 もしくは　原価回収基準の場合
                begin
// <291> MOD ed
//<TAX> DEL St
{
                    crBaseNo := JKeiyaku_DMemData.RecNo;
// <212> MOD start
//                    for iLoop := 1 to 8 do
                    iRecCount := JKeiyaku_DMemData.RecordCount;
                    if iRecCount = 0 then
                        iRecCount := 8;

                    for iLoop := 1 to iRecCount do
// <212> MOD end
                    begin
                        // 先頭行がﾌﾞﾗﾝｸの場合がある為
                        if ( JKeiDateSave[iLoop] <> 0 ) then
                        begin
                            crBaseNo := iLoop;
                            break;
                        end;
                    end;

                    if ( JKeiyaku_DMemData.RecNo > crBaseNo ) then              // 基準行目以降の場合
                    begin
						if ( JKeiyaku_DMemDataContDate.IsNull = false ) then    // 契約年月日指定済
                        begin
                            croRateCD := 0;
                            croRateCD := JTaxRateSave[crBaseNo];
                            craRateCD := 0;
                            craRateCD := JKeiyaku_DMemDataDummyTax_Rate.AsInteger;   // 税ｺｰﾄﾞ

                            if ( croRateCD = 0 ) then    // 標準税率の場合は、DIC_COTXRATEより税ｺｰﾄﾞを取得
                            begin
        						if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                                    MemDIC_COTXRATE.First();

                                while ( MemDIC_COTXRATE.Eof = false ) do
                                begin
                                    if ( MemDIC_COTXRATEStartYMD.AsDateTime <=
                                            JKeiyaku_DMemDataContDate.AsDateTime ) then
                                    begin
                                        croRateCD := MemDIC_COTXRATERateCD.AsInteger;
                                        break;
                                    end;
                                    MemDIC_COTXRATE.Next();
                                end;
                            end;

                            if ( craRateCD = 0 ) then    // 標準税率の場合は、DIC_COTXRATEより税ｺｰﾄﾞを取得
                            begin
        						if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                                    MemDIC_COTXRATE.First();

                                while ( MemDIC_COTXRATE.Eof = false ) do
                                begin
                                    if ( MemDIC_COTXRATEStartYMD.AsDateTime <=
                                            JKeiyaku_DMemDataContDate.AsDateTime ) then
                                    begin
                                        craRateCD := MemDIC_COTXRATERateCD.AsInteger;
                                        break;
                                    end;
                                    MemDIC_COTXRATE.Next();
								end;
                            end;

                            if ( croRateCD <> craRateCD ) then
                            begin
                                Beep;
                                MjsMessageBoxEX(Self,'工事進行基準採用工事は、契約情報の税率を全て同じにして下さい。'
                                                    ,'契約情報',mjInformation,mjOk,mjDefOk);
                                Jituzai_DdxDBGrid_Kei.ShowEditor;
                                CanChange := false;
                                Abort;
                            end;
                        end;
                    end;
}
//<TAX> DEL Ed
                    // 税率の保管<169>
                    //JTaxRateSave[JKeiyaku_DMemData.RecNo] := JKeiyaku_DMemDataDummyTax_Rate.AsInteger;
                end;
                // ↑↑↑<169>

// <206> Del Start　ChangeColumnイベントに移動
{
                crKingaku := JKeiyaku_DMemDataContMoney.AsCurrency;
    			if ( crKingaku = 0 ) then Exit;


    			JKeiyaku_DMemData.Edit;

				dDate := JKeiyaku_DMemDataContDate.AsDateTime;
				case JKeiyaku_DMemDataDummyTax_Rate.AsInteger of
					0:											// 標準税率
					begin
						JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
						JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
						// 消費税率算出
						if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
							MemDIC_COTXRATE.First;
						crRitu := 0;

						while MemDIC_COTXRATE.Eof = false do
						begin
							if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
							begin
								crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
								break;
							end;
							MemDIC_COTXRATE.Next;
						end;

						crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

						case giHasuu of
							0:	iKingaku := Trunc(crKingaku);		// 切り捨て
							1:										// 切り上げ
							begin
								iKingaku := Trunc(crKingaku);
								if Frac(crKingaku) > 0 then
									Inc(iKingaku);
							end;
							2:
							begin
								if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
								else iKingaku := Trunc(crKingaku - 0.5);
							end;
						end;
						JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
					end;
					1:											// 3%
					begin
						JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 1;
						JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
						crKingaku := (crKingaku / 103) * 3;

						case giHasuu of
							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
							1:									// 切り上げ
							begin
								iKingaku := Trunc(crKingaku);
								if Frac(crKingaku) > 0 then
									Inc(iKingaku);
							end;
							2:
							begin
								if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
								else iKingaku := Trunc(crKingaku - 0.5);
							end;
						end;
						JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
					end;
					2:											// 5%
					begin
						JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 2;
						JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
						crKingaku := (crKingaku / 105) * 5;

						case giHasuu of
							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
							1:									// 切り上げ
							begin
								iKingaku := Trunc(crKingaku);
								if Frac(crKingaku) > 0 then
									Inc(iKingaku);
							end;
							2:
							begin
								if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
								else iKingaku := Trunc(crKingaku - 0.5);
							end;
						end;
						JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
					end;
					8:											// 不課税 // <201>
					begin
						JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 8;
						JKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
						JKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
					end;
					9:											// 非課税
					begin
						JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 9;
//						JKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
						JKeiyaku_DMemDataTax_RateName.AsString   := sTax[4];	// <201>
						JKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
					end;
				end;
}
// <206> Del end　ChangeColumnイベントに移動
			end
			else
			begin
                JKeiyaku_DMemData.Edit;
				JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
				JKeiyaku_DMemDataTax_RateName.AsString   := '';
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	実在入金予定情報GridColumn移動前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_NyuBeforeChangeColumn(
  Sender: TObject; Node: TdxTreeListNode; Column: Integer;
  NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
var
	dDate		:	TDateTime;
	dPrevDate	:	TDateTime;
	stGCode		:	String;
	iCnt		:	Integer;
begin
	if m_fEnd = 1 then
		Exit;

	if m_bFieldFlg = true then
		exit;

	if Column = COL_YOTEIBI then
	begin
		dDate := JNyukin_DMemDataContDate.AsDateTime;
		dPrevDate := JNyukin_DMemDataPrevContDate.AsDateTime;

		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			stGCode := Jituzai_ETEdit_GCode.Text
		else
			stGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

		if dDate <> 0 then
		begin
			if (dDate <> dPrevDate) then
			begin
				for iCnt := 1 to 10 do
				begin
					if iCnt <> JNyukin_DMemData.RecNo then
					begin
                        (*
						if dDate = JNyuDateSave[iCnt] then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							CanChange := false;
							abort;
						end;
                        *) // <179>
					end;
				end;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	合計契約情報GridColumn移動前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiBeforeChangeColumn(
  Sender: TObject; Node: TdxTreeListNode; Column: Integer;
  NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
var
	dDate	  :	TDateTime;
	dPrevDate :	TDateTime;
	stGCode	  :	String;
	iCnt	  :	Integer;
//	crKingaku :	Currency;
//	crRitu	  :	Currency;
//	iKingaku  :	Int64;
//   	QueryRead : TMQuery;    // <212> ADD
//    stGCode   : String;    // <212> ADD
//<TAX> ADD St
    iRet : Integer;
    returnCode : Integer;
    sWk : string;
    kojiInfoParam : TKojiInfoParam;
    oCont : TKojiInfo2;
    oDic,
    oDic2 : TDIC_COTXRATE;
//<TAX> ADD Ed
begin

	if ( m_fEnd = 1 ) then Exit;

//	iKingaku :=	0;

    // 契約年月日
	if ( Column = COL_KEINEN ) then
	begin
		if ( m_bFieldFlg = true ) then Exit;

		dDate     := GKeiyaku_DMemDataContDate.AsDateTime;
		dPrevDate := GKeiyaku_DMemDataPrevContDate.AsDateTime;

		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
		    	stGCode := Goukei_ETEdit_GCode.Text
		else    stGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

		if ( dDate <> 0 ) then
		begin
			if ( dDate <> dPrevDate ) then
			begin
				for iCnt := 1 to 8 do
				begin
					if ( iCnt <> GKeiyaku_DMemData.RecNo ) then
					begin
                        (*
						if ( dDate = GKeiDateSave[iCnt] ) then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							CanChange := false;
							Abort;
						end;
                        *) // <179>
					end;
				end;
			end;
		end;
//<TAX> ADD St
        returnCode := checkKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData));
        case returnCode of
            // 標準税率同士の税率不一致
            CONT_CHANGERATE  :
            begin
                sWk := GetContMessage(returnCode);
                kojiInfoParam := toKojiInfoParam(SUMKBN_GOUKEI);
                oDic := moBusiness.GetStandardTaxRate(
                    dDate, KojiInfoParam.YoteiDateED);      // 現在の標準税率
                oCont := moKojiInfoMn.GetKojiInfo2(GKeiyaku_DMemData.RecNo); // 変更前の契約情報
                oDic2 := moBusiness.GetStandardTaxRate(
                    oCont.ContDate, KojiInfoParam.YoteiDateED);  // 変更前の標準税率

                sWk := Format(sWk, [oDic2.TaxName, oDic.TaxName]);
                iRet := MjsMessageBoxEX(Self, sWk,'確認',mjQuestion ,mjYesNo,mjDefNO);
                if iRet <> mrYes then
                begin
                    Root_PMTab.Items.Selected		    := PAGE_GOKEI;
                    Goukei_PMTab.Items.Selected	    := PAGE_GOUKEI_KEIYAKU;
                    Goukei_DdxDBGrid_Kei.SetFocus;
                    Goukei_DdxDBGrid_Kei.FocusedColumn     := COL_KEINEN;
                    Goukei_DdxDBGrid_Kei.ShowEditor;
                    CanChange := false;
                    Abort;
                end
                else
                begin
                    changeKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData), false);
                    // 消費税情報再セット
                    setContTaxInfo(
                        kojiInfoParam,
                        toKojiInfo2Param(GKeiyaku_DMemData),
                        GKeiyaku_DMemData,
                        false);
                end;
            end
            else
            begin
                changeKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData), false);
            end;
        end;
//<TAX> ADD Ed
	end
	else
	begin
        // 税率 //
		if ( Column = COL_ZEIRITU ) then
		begin
			if ( m_iAccProKbn <> 0 ) then
			begin
// <206> Del Start　ChangeColumnイベントに移動
{
                crKingaku := GKeiyaku_DMemDataContMoney.AsCurrency;
    			if ( crKingaku = 0 ) then Exit;

			    GKeiyaku_DMemData.Edit;

				dDate := GKeiyaku_DMemDataContDate.AsDateTime;
				case GKeiyaku_DMemDataDummyTax_Rate.AsInteger of
                    // 標準税率
					0:  begin
						    GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
						    // 消費税率算出
    						if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
    							MemDIC_COTXRATE.First;
    						crRitu := 0;

    						while ( MemDIC_COTXRATE.Eof = false ) do
    						begin
    							if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
    				 		begin
    								crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
    								break;
    							end;
    							MemDIC_COTXRATE.Next;
    						end;

    						crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

    						case giHasuu of
    							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    							1:									// 切り上げ
    							begin
    								iKingaku := Trunc(crKingaku);
    								if ( Frac(crKingaku) > 0 ) then
    									Inc(iKingaku);
    							end;
    							2:
    							begin
    								if ( crKingaku >= 0 ) then
                                            iKingaku := Trunc(crKingaku + 0.5)
    								else    iKingaku := Trunc(crKingaku - 0.5);
    							end;
    						end;

    						GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    					end;
                    // 3%
					1:  begin
							GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 1;
    						GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
    						crKingaku := (crKingaku / 103) * 3;

    						case giHasuu of
    							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    							1:									// 切り上げ
    							begin
									iKingaku := Trunc(crKingaku);
    								if ( Frac(crKingaku) > 0 ) then
    									Inc(iKingaku);
    							end;
    							2:
    							begin
									if ( crKingaku >= 0 ) then
                                            iKingaku := Trunc(crKingaku + 0.5)
    								else    iKingaku := Trunc(crKingaku - 0.5);
    							end;
    						end;

    						GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    					end;
                    // 5%
					2:  begin
						    GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 2;
    						GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
    						crKingaku := (crKingaku / 105) * 5;

    						case giHasuu of
    							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    							1:									// 切り上げ
    							begin
    								iKingaku := Trunc(crKingaku);
    								if ( Frac(crKingaku) > 0 ) then
    									Inc(iKingaku);
    							end;
    							2:
    							begin
									if ( crKingaku >= 0 ) then
											iKingaku := Trunc(crKingaku + 0.5)
									else    iKingaku := Trunc(crKingaku - 0.5);
								end;
							end;

							GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
						end;
					// 不課税	// <201>
					8:  begin
							GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 8;
							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
							GKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
						end;
					// 非課税
					9:  begin
							GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 9;
//							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[4]; 	// <201>
							GKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
						end;
				end;
}
// <206> Del end　ChangeColumnイベントに移動
			end
			else
			begin
                GKeiyaku_DMemData.Edit;
				GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
				GKeiyaku_DMemDataTax_RateName.AsString   := '';
			end;
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	合計入金予定情報GridColumn移動前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_NyuBeforeChangeColumn(
  Sender: TObject; Node: TdxTreeListNode; Column: Integer;
  NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
var
	dDate		:	TDateTime;
	dPrevDate	:	TDateTime;
	stGCode		:	String;
	iCnt		:	Integer;
begin
	if m_fEnd = 1 then
		Exit;

	if m_bFieldFlg = true then
		exit;

	if Column = COL_YOTEIBI then
	begin
		dDate := GNyukin_DMemDataContDate.AsDateTime;
		dPrevDate := GNyukin_DMemDataPrevContDate.AsDateTime;
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			stGCode := Goukei_ETEdit_GCode.Text
		else
			stGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

		if dDate <> 0 then
		begin
			if (dDate <> dPrevDate) then
			begin
				for iCnt := 1 to 10 do
				begin
					if iCnt <> GNyukin_DMemData.RecNo then
					begin
                        (*
						if dDate = GNyuDateSave[iCnt] then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							CanChange := false;
							abort;
						end;
                        *) // <179>
					end;
				end;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	実在契約情報Post前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.JKeiyaku_DMemDataBeforePost(DataSet: TDataSet);
var
	dDate	  :	TDateTime;
	dPrevDate :	TDateTime;
	stGCode	  :	String;
//	iCnt	  :	Integer;
	crKingaku :	Currency;
//	crRitu	  :	Currency;
//	iKingaku  :	Int64;
//    craRateCD : Integer;    // 比較先税ｺｰﾄﾞ
//    croRateCD : Integer;    // 比較元税ｺｰﾄﾞ
//    crBaseNo,
//    iLoop     : Integer;
// <212> ADD start
    QueryRead : TMQuery;
//    iRecCount : Integer;
//    iRecNo    : Integer;
// <212> ADD end
    iRet      : Integer;    // <235> ADD
//<TAX> ADD St
    returnCode: Integer;
    sWk : String;
//<TAX> ADD Ed
begin
	if ( MemPost_Sw <> 0 ) then Exit;

//	iKingaku := 0;

	if ( Jituzai_PPanel_Card.Visible     = false ) or
// <212> MOD start
//       ( Jituzai_PPanel_KeNyukin.Visible = false ) then Exit;
       ( Jituzai_PPanel_Keiyaku.Visible = false ) then Exit;
// <212> MOD end

	if ( m_fEnd = 1 ) then Exit;

// <212> ADD start
    if  JKeiyaku_DMemDataCostomerGCode.AsString  = '' then
    begin
        JKeiyaku_DMemData.Edit;
        JKeiyaku_DMemDataCostomerName.AsString  := '';
        JKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
    end
    else
    begin
        if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
            stGCode := JKeiyaku_DMemDataCostomerGCode.AsString
        else
            stGCode := Format ('%.16d', [Trunc (JKeiyaku_DMemDataCostomerGCode.AsFloat)]);

        QueryRead := TMQuery.Create (Self);
        MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

        try
            with QueryRead do
            begin
                Close;

                SQL.Clear;							// ｸｴﾘの初期化
                // 取引先を外部ｺｰﾄﾞ昇順でGET
                SQL.Add('select NMK,NCode from MTOKUI');
                SQL.Add('where  NCode=:NCode');
                SQL.Add(' And  HojyoKbn1 = 1 AND RDelKbn = 0 AND SumKbn = 0 ');  //<252> ADD
//<255> DEL                SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                SetFld('NCode').AsString :=
                    FormatFloat('0',
                    fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                Open;						// ｸｴﾘの開始

                if EOF = false then
                begin
                    JKeiyaku_DMemData.Edit;
                    JKeiyaku_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                    JKeiyaku_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                end
                else
                begin
                    JKeiyaku_DMemData.Edit;
                    JKeiyaku_DMemDataCostomerName.AsString  := '';
                    JKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
					beep;
					abort;
                end;
            end;
        finally
            QueryRead.Free;
        end;
    end;
// <212> ADD end

	if ( m_bFieldFlg = false ) then
	begin
		dDate     := JKeiyaku_DMemDataContDate.AsDateTime;
		dPrevDate := JKeiyaku_DMemDataPrevContDate.AsDateTime;

		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
    			stGCode := Jituzai_ETEdit_GCode.Text
		else    stGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

		// 契約年月日ﾁｪｯｸ
		if ( dDate <> 0 ) then
		begin
			if ( dDate <> dPrevDate ) then
			begin
// <235> MOD start
{
				for iCnt := 1 to 8 do
				begin
					if ( iCnt <> JKeiyaku_DMemData.RecNo ) then
					begin
                        (*
						if ( dDate = JKeiDateSave[iCnt] ) then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							Jituzai_DdxDBGrid_Kei.FocusedColumn	:= COL_KEINEN;
                            Jituzai_DdxDBGrid_Kei.ShowEditor;
							Abort;
						end;
                        *) // <179>
					end;
				end;
}
                // 工事かつ未チェック以外
                if  (m_pMyAppRecord.m_sParameter = '1') and (JKeiyaku_DMemDataCheck.AsInteger = 1) then
                begin
                    dDate       := JKeiyaku_DMemDataContDate.AsDateTime;
                    dPrevDate   := JKeiyaku_DMemDataPrevContDate.AsDateTime;
                    // 日付入力有
                    if (dDate <> 0) and (dPrevDate <> 0) then
                    begin
                        //内部月変更チェック
                        if fnKeiyakuDateCheck(dPrevDate,dDate) = true then
                        begin
                            iRet := MjsMessageBoxEX(Self,MSG_KEIYAKU,'確認',mjInformation ,mjOkCancel,mjDefCancel);
                            if (iRet <> mrOk) then
                            begin
                                Root_PMTab.Items.Selected		    := PAGE_JITUZAI;
                                Jituzai_PMTab.Items.Selected	    := PAGE_KEIYAKU;
                                if (JKeiyaku_DMemData.State <> dsEdit) then
                                    JKeiyaku_DMemData.Edit;
                                JKeiyaku_DMemDataContDate.AsDateTime    := dPrevDate;   //変更前日付セット
                                Jituzai_DdxDBGrid_Kei.SetFocus;
                                Jituzai_DdxDBGrid_Kei.FocusedColumn     := COL_KEINEN;
                                Jituzai_DdxDBGrid_Kei.ShowEditor;
                                Abort;
                            end;
                        end;
                    end;
                end;
// <235> MOD end
				JKeiDateSave[JKeiyaku_DMemData.RecNo] := dDate;
			end;
//<TAX> ADD St
            sWk := '';
        	if ( m_iAccProKbn <> 0 ) then   // 税率 ≠ 0
            begin
                setContTaxInfo(
                    toKojiInfoParam(SUMKBN_JITUZAI),
                    toKojiInfo2Param(JKeiyaku_DMemData),
                    JKeiyaku_DMemData,
                    canSetSalesTax(toKojiInfo2Param(JKeiyaku_DMemData)));
            end;
            JKeiyaku_DMemData.Edit();
            JKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_WINDOWTEXT2;
            returnCode := changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData));
            case returnCode of
                // 不正税率
                CONT_ERRRATE  :
                begin
                    sWk := GetContMessage(returnCode);
                    MjsMessageBoxEX(Self, sWk,'警告',mjWarning ,mjOk,mjDefOK);
                end;
                // 税率混在①
                CONT_MIXRATE  :
                begin
//<292> MOD st 		// 契約情報税率登録区分 ≠ 1 の時は税率混在不可。メッセージ出力
					if ( m_MstrKbn12 <> 1 ) then
					begin
	                    sWk := GetContMessage(returnCode);
	                    sWk := Format(sWk, [MasterInfo_DMemDataJHojyoName.AsString]);
	                    MjsMessageBoxEX(Self, sWk, '契約情報', mjInformation, mjOk, MjDefOk);
					end;
                end;
                // 税率混在②
                CONT_SPMIXRATE  :
                begin
					// 契約情報税率登録区分 ≠ 1 の時は税率混在不可。メッセージ出力
					if ( m_MstrKbn12 <> 1 ) then
					begin
	                    sWk := GetContMessage(returnCode);
	                    sWk := Format(sWk, [MasterInfo_DMemDataJHojyoName.AsString,
	                        moBusiness.GetTaxRate(JKeiyaku_DMemDataDummyTax_Rate.AsInteger).TaxName]);
	                    MjsMessageBoxEX(Self, sWk, '契約情報', mjInformation, mjOk, MjDefOk);
					end;
//<292> MOD ed
                end;
                // 税額不一致
                CONT_DIFFTAX    :
                begin
                    JKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                end;
            end;

            if (sWk <> '') then
            begin
                Root_PMTab.Items.Selected           := PAGE_JITUZAI;
                Jituzai_PMTab.Items.Selected        := PAGE_KEIYAKU;
                Jituzai_DdxDBGrid_Kei.SetFocus;
                Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_ZEIRITU;
                Jituzai_DdxDBGrid_Kei.ShowEditor;
                Abort;
            end;
//<TAX> ADD Ed
		end
		else
		begin
//<TAX_1> ADD St
            returnCode := moKojiInfoMn.DeleteKojiInfo2(
                toKojiInfo2Param(JKeiyaku_DMemData));
            // 契約別仮受消費税存在時                
            if (returnCode = CONT_EXISTSCONTACCOUNT) then
            begin
    			JKeiyaku_DMemData.Edit;
                JKeiyaku_DMemDataContDate.AsDateTime :=
                    moKojiInfoMn.GetKojiInfo2(JKeiyaku_DMemData.RecNo).ContDate;
                MjsMessageBoxEX(Self,
                    GetContMessage(returnCode),'警告',mjWarning ,mjOk,mjDefOK);
                Root_PMTab.Items.Selected           := PAGE_JITUZAI;
                Jituzai_PMTab.Items.Selected        := PAGE_KEIYAKU;
                Jituzai_DdxDBGrid_Kei.SetFocus;
                Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEINEN;
                Jituzai_DdxDBGrid_Kei.ShowEditor;
                Abort;
                Exit;
            end;
//<TAX_1> ADD Ed
			JKeiDateSave[JKeiyaku_DMemData.RecNo] := dDate;
			JKeiyaku_DMemData.Edit;
			JKeiyaku_DMemDataPrevContDate.Clear;
			JKeiyaku_DMemDataContNo.Clear;
			JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
			JKeiyaku_DMemDataTax_RateName.AsString   := '';
			JKeiyaku_DMemDataTax_RateName2.AsString  := '';  //<TAX> ADD
			JKeiyaku_DMemDataTax_Rate.AsInteger      := 0;
            JKeiyaku_DMemDataDspOrder.AsInteger := 0;       //<TAX_1> ADD
            JTaxRateSave[JKeiyaku_DMemData.RecNo]    := 0;  // <169>
			JKeiyaku_DMemDataSales_Tax.Clear;
			JKeiyaku_DMemDataContMoney.Clear;
			JKeiyaku_DMemDataCheck.AsInteger	     := 1;
// <212> ADD start
            JKeiyaku_DMemDataCostomerGCode.Clear;
            JKeiyaku_DMemDataCostomerName.Clear;
            JKeiyaku_DMemDataCostomerNCode.Clear;
// <212> ADD end

// <225> ADD start
            JKeiyaku_DMemDataFontColorDate.AsInteger    := 0;
            JKeiyaku_DMemDataFontColorNo.AsInteger     := 0;
            JKeiyaku_DMemDataFontColorMoney.AsInteger   := 0;
            JKeiyaku_DMemDataFontColorTax.AsInteger     := 0;
            JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 0;

// <225> ADD end
//<TAX> ADD St
            // 削除
//<TAX_1> DEL            moKojiInfoMn.DeleteKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData));
//<TAX> ADD Ed
		end;
	end;

    // ↓↓↓<169>
// <291> MOD st
//    if ( Jituzai_ENEdit_SalesBase.Value = 1 ) then  // 工事進行基準の場合
    if ( Jituzai_ENEdit_SalesBase.Value <> 0 ) then  // 工事進行基準の場合 もしくは　原価回収基準の場合
//<291> MOD ed
    begin
//<TAX> DEL St
// 別クラスでチェックするため削除
{
// <212> ADD start
        iRecCount := JKeiyaku_DMemData.RecordCount;
        if iRecCount = 0 then
            iRecCount := 8;
// <212> ADD end
        crBaseNo := JKeiyaku_DMemData.RecNo;

// <212> MOD start
//        for iLoop := 1 to 8 do
        for iLoop := 1 to iRecCount do
// <212> MOD end
        begin
            // 先頭行がﾌﾞﾗﾝｸの場合がある為
            if ( JKeiDateSave[iLoop] <> 0 ) then
            begin
                crBaseNo := iLoop;
                break;
            end;
        end;

        if ( JKeiyaku_DMemData.RecNo > crBaseNo ) then                  // 基準行目以降の場合
        begin
            if ( m_iAccProKbn <> 0 ) then
            begin
                if ( JKeiDateSave[JKeiyaku_DMemData.RecNo] <> 0 ) then  // 契約年月日が指定済
                begin
                    croRateCD := 0;
                    croRateCD := JTaxRateSave[crBaseNo];
                    craRateCD := 0;
					craRateCD := JKeiyaku_DMemDataDummyTax_Rate.AsInteger;   // 税ｺｰﾄﾞ

                    if ( croRateCD = 0 ) then    // 標準税率の場合は、DIC_COTXRATEより税ｺｰﾄﾞを取得
                    begin
        				if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                            MemDIC_COTXRATE.First();

                        while ( MemDIC_COTXRATE.Eof = false ) do
                        begin
                            if ( MemDIC_COTXRATEStartYMD.AsDateTime <=
                                    JKeiyaku_DMemDataContDate.AsDateTime ) then
                            begin
                                croRateCD := MemDIC_COTXRATERateCD.AsInteger;
                                break;
                            end;
                            MemDIC_COTXRATE.Next();
                        end;
                    end;

                    if ( craRateCD = 0 ) then    // 標準税率の場合は、DIC_COTXRATEより税ｺｰﾄﾞを取得
                    begin
        				if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                            MemDIC_COTXRATE.First();

                        while ( MemDIC_COTXRATE.Eof = false ) do
                        begin
                            if ( MemDIC_COTXRATEStartYMD.AsDateTime <=
                                    JKeiyaku_DMemDataContDate.AsDateTime ) then
                            begin
                                craRateCD := MemDIC_COTXRATERateCD.AsInteger;
                                break;
                            end;
                            MemDIC_COTXRATE.Next();
                        end;
                    end;

                    if ( croRateCD <> craRateCD ) then // 税率が異なる場合はｴﾗｰ
                    begin
						Beep;
                        MjsMessageBoxEX(Self,'工事進行基準採用工事は、契約情報の税率を全て同じにして下さい。'
                                            ,'契約情報',mjInformation,mjOk,mjDefOk);
                        Jituzai_DdxDBGrid_Kei.FocusedColumn	:= COL_ZEIRITU;
                        Jituzai_DdxDBGrid_Kei.ShowEditor;
                        Abort;
                    end;
                end;
            end;
        end;
}
//<TAX> DEL Ed
        // 税率の保管<169>
        JTaxRateSave[JKeiyaku_DMemData.RecNo] := JKeiyaku_DMemDataDummyTax_Rate.AsInteger;
    end;
    // ↑↑↑<169>

	crKingaku := JKeiyaku_DMemDataContMoney.AsCurrency;
	if ( crKingaku = 0 ) then Exit;

//	if ( JKeiyaku_DMemDataDummyTax_Rate.AsInteger <> 9 ) then
	if ( JKeiyaku_DMemDataDummyTax_Rate.AsInteger <> 9 ) and ( JKeiyaku_DMemDataDummyTax_Rate.AsInteger <> 8 ) then	// <201>
	begin
		if ( JKeiyaku_DMemDataSales_Tax.AsCurrency <> 0 ) then Exit;
	end;

	if ( m_iAccProKbn <> 0 ) then   // 税率≠0の場合
	begin
//<TAX> DEL St
{
		dDate := JKeiyaku_DMemDataContDate.AsDateTime;

		case JKeiyaku_DMemDataDummyTax_Rate.AsInteger of
            // 標準税率
			0:  begin
				    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
					JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
    				// 消費税率算出
    				if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
    					MemDIC_COTXRATE.First;
    				crRitu := 0;
    				while ( MemDIC_COTXRATE.Eof = false ) do
					begin
    					if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
    					begin
    						crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
    						break;
    					end;
    					MemDIC_COTXRATE.Next;
    				end;

    				crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
    					begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
    						else iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
            // 3%
			1:  begin
				    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 1;
    				JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];

    				crKingaku := (crKingaku / 103) * 3;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
						begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
    						else iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

				    JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
            // 5%
			2:  begin
    				JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 2;
    				JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];

    				crKingaku := (crKingaku / 105) * 5;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
                        begin
    						iKingaku := Trunc(crKingaku);
		    				if ( Frac(crKingaku) > 0 ) then
			    				Inc(iKingaku);
				    	end;
					    2:
    					begin
    						if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
							else iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
			// 不課税 // <201>
			8:  begin
					JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 8;
					JKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
					JKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
				end;
			// 非課税 //
			9:  begin
					JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 9;
//					JKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
					JKeiyaku_DMemDataTax_RateName.AsString   := sTax[4];	// <201>
					JKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
				end;
		end;
}
//<TAX> DEL Ed
	end
	else
	begin
		JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
		JKeiyaku_DMemDataTax_RateName.AsString   := '';
	end;
end;

//**********************************************************************
//*		Proccess	:	実在入金予定情報Post前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.JNyukin_DMemDataBeforePost(DataSet: TDataSet);
var
	dDate		:	TDateTime;
	dPrevDate	:	TDateTime;
	QueryRead	:	TMQuery;
	stGCode		:	String;
	iCnt		:	Integer;
//    iRecNo      :   Integer;
begin

	if (Jituzai_PPanel_Card.Visible = false) or (Jituzai_PPanel_KeNyukin.Visible = false) then
	begin
//		fnCreateCard (0);
		exit;
	end;

	if m_fEnd = 1 then
		Exit;

// <212> ADD start
    if  JNyukin_DMemDataCostomerGCode.AsString  = '' then
    begin
        JNyukin_DMemData.Edit;
        JNyukin_DMemDataCostomerName.AsString  := '';
        JNyukin_DMemDataCostomerNCode.AsFloat  := 0;
    end
    else
    begin
        if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
            stGCode := JNyukin_DMemDataCostomerGCode.AsString
        else
            stGCode := Format ('%.16d', [Trunc (JNyukin_DMemDataCostomerGCode.AsFloat)]);

        QueryRead := TMQuery.Create (Self);
        MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

        try
            with QueryRead do
            begin
                Close;

                SQL.Clear;							// ｸｴﾘの初期化
                // 取引先を外部ｺｰﾄﾞ昇順でGET
                SQL.Add('select NMK,NCode from MTOKUI');
                SQL.Add('where  NCode=:NCode');
                SQL.Add(' And  HojyoKbn1 = 1 AND RDelKbn = 0 AND SumKbn = 0');  //<252> ADD
//<255> DEL                SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                SetFld('NCode').AsString := FormatFloat('0',fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                Open;						// ｸｴﾘの開始

                if EOF = false then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                    JNyukin_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                end
                else
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataCostomerName.AsString  := '';
                    JNyukin_DMemDataCostomerNCode.AsFloat  := 0;
					beep;
					abort;
                end;
            end;
        finally
            QueryRead.Free;
        end;
    end;
// <212> ADD end

	if m_bFieldFlg = false then
	begin
		dDate := JNyukin_DMemDataContDate.AsDateTime;
		dPrevDate := JNyukin_DMemDataPrevContDate.AsDateTime;
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			stGCode := Jituzai_ETEdit_GCode.Text
		else
			stGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

		if dDate <> 0 then
		begin
			if (dDate <> dPrevDate) then
			begin
				for iCnt := 1 to 10 do
				begin
					if iCnt <> JNyukin_DMemData.RecNo then
					begin
                        (*
						if dDate = JNyuDateSave[iCnt] then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							Jituzai_DdxDBGrid_Nyu.FocusedColumn	:= COL_YOTEIBI;
							abort;
							exit;
						end;
                        *) // <179>
					end;
				end;
		
				JNyuDateSave[JNyukin_DMemData.RecNo] := dDate;
			end;
		end
		else
		begin
			JNyuDateSave[JNyukin_DMemData.RecNo] := dDate;
			JNyukin_DMemData.Edit;
			JNyukin_DMemDataContDate.Clear;
			JNyukin_DMemDataPrevContDate.Clear;
			JNyukin_DMemDataContMoney.Clear;
			JNyukin_DMemDataCheck.AsInteger	:= 1;
// <212> ADD start
            JNyukin_DMemDataCostomerName.Clear;
            JNyukin_DMemDataCostomerNCode.Clear;
            JNyukin_DMemDataCostomerGCode.Clear;
// <212> ADD end
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	合計契約情報Post前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.GKeiyaku_DMemDataBeforePost(DataSet: TDataSet);
var
	dDate	  :	TDateTime;
	dPrevDate :	TDateTime;
	stGCode	  :	String;
	iCnt	  :	Integer;
	crKingaku :	Currency;
//	crRitu	  :	Currency;
//	iKingaku  :	Int64;
    QueryRead : TMQuery;
//<TAX> ADD St
    sWk : String;
    returnCode : Integer;
//<TAX> ADD Ed
begin
	if ( MemPost_Sw <> 0 ) then Exit;

	if ( Goukei_PPanel_Card.Visible     = false ) or
// <212> MOD Start
//       ( Goukei_PPanel_KeNyukin.Visible = false ) then Exit;
       ( Goukei_PPanel_Keiyaku.Visible = false ) then Exit;
// <212> MOD end

//	iKingaku := 0;

	if ( m_fEnd = 1 ) then Exit;

// <212> ADD Start
    if  GKeiyaku_DMemDataCostomerGCode.AsString  = '' then
    begin
        GKeiyaku_DMemData.Edit;
        GKeiyaku_DMemDataCostomerName.AsString  := '';
        GKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
    end
    else
    begin
        if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
            stGCode :=GKeiyaku_DMemDataCostomerGCode.AsString
        else
            stGCode := Format ('%.16d', [Trunc (GKeiyaku_DMemDataCostomerGCode.AsFloat)]);

        QueryRead := TMQuery.Create (Self);
        MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

        try
            with QueryRead do
            begin
                Close;

                SQL.Clear;							// ｸｴﾘの初期化
                // 取引先を外部ｺｰﾄﾞ昇順でGET
                SQL.Add('select NMK,NCode from MTOKUI');
                SQL.Add('where  NCode=:NCode');
                SQL.Add(' And  HojyoKbn1 = 1 AND RDelKbn = 0 AND SumKbn = 0 ');  //<252> ADD
//<255> DEL                SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                SetFld('NCode').AsString :=
                    FormatFloat('0',
                    fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                Open;						// ｸｴﾘの開始

                if EOF = false then
                begin
                    GKeiyaku_DMemData.Edit;
                    GKeiyaku_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                    GKeiyaku_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                end
                else
                begin
                    GKeiyaku_DMemData.Edit;
                    GKeiyaku_DMemDataCostomerName.AsString  := '';
                    GKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
                    Goukei_DdxDBGrid_Kei.FocusedColumn      := COL_COSTCODE;
					abort;
                end;
            end;
        finally
            QueryRead.Free;
        end;
    end;
// <212> ADD end

	if ( m_bFieldFlg = false ) then
	begin
		dDate     := GKeiyaku_DMemDataContDate.AsDateTime;
		dPrevDate := GKeiyaku_DMemDataPrevContDate.AsDateTime;

		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
    			stGCode := Goukei_ETEdit_GCode.Text
		else    stGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);

		if ( dDate <> 0 ) then
		begin
			if ( dDate <> dPrevDate ) then
			begin
				for iCnt := 1 to 8 do
				begin
					if ( iCnt <> GKeiyaku_DMemData.RecNo ) then
					begin
                        (*
						if ( dDate = GKeiDateSave[iCnt] ) then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							Goukei_DdxDBGrid_Kei.FocusedColumn	:= COL_KEINEN;
							Abort;
						end;
                        *) // <179>
					end;
				end;

				GKeiDateSave[GKeiyaku_DMemData.RecNo] := dDate;
			end;
//<TAX> ADD St
            sWk := '';
        	if ( m_iAccProKbn <> 0 ) then   // 税率 ≠ 0
            begin
                setContTaxInfo(
                    toKojiInfoParam(SUMKBN_GOUKEI),
                    toKojiInfo2Param(GKeiyaku_DMemData),
                    GKeiyaku_DMemData,
                    canSetSalesTax(toKojiInfo2Param(GKeiyaku_DMemData)));
            end;
            GKeiyaku_DMemData.Edit();
            GKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_WINDOWTEXT2;
            returnCode := changeKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData));
            
            case returnCode of
                // 不正税率
                CONT_ERRRATE  :
                begin
                    sWk := GetContMessage(returnCode);
                    MjsMessageBoxEX(Self, sWk,'警告',mjWarning ,mjOk,mjDefOK);
                end;
                // 税率混在①
                CONT_MIXRATE  :
                begin
//<292> MOD st 		// 契約情報税率登録区分 ≠ 1 の時は税率混在不可。メッセージ出力
					if ( m_MstrKbn12 <> 1 ) then
					begin
                        sWk := GetContMessage(returnCode);
                        sWk := Format(sWk, [MasterInfo_DMemDataJHojyoName.AsString]);
                        MjsMessageBoxEX(Self, sWk, '契約情報', mjInformation, mjOk, MjDefOk);
					end
                end;
                // 税率混在②
                CONT_SPMIXRATE  :
                begin
                    // 契約情報税率登録区分 ≠ 1 の時は税率混在不可。メッセージ出力
					if ( m_MstrKbn12 <> 1 ) then
					begin
                        sWk := GetContMessage(returnCode);
                        sWk := Format(sWk, [MasterInfo_DMemDataJHojyoName.AsString,
                            moBusiness.GetTaxRate(GKeiyaku_DMemDataDummyTax_Rate.AsInteger).TaxName]);
                        MjsMessageBoxEX(Self, sWk, '契約情報', mjInformation, mjOk, MjDefOk);
					end;
//<292> MOD ed
                end;
                // 税額不一致
                CONT_DIFFTAX    :
                begin
                    GKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                end;
            end;

            if (sWk <> '') then
            begin
                Root_PMTab.Items.Selected		    := PAGE_GOKEI;
                Goukei_PMTab.Items.Selected	        := PAGE_GOUKEI_KEIYAKU;
                Goukei_DdxDBGrid_Kei.SetFocus;
                Goukei_DdxDBGrid_Kei.FocusedColumn  := COL_ZEIRITU;
                Goukei_DdxDBGrid_Kei.ShowEditor;
                Abort;
            end;
//<TAX> ADD Ed
		end
		else
		begin
			GKeiDateSave[GKeiyaku_DMemData.RecNo]    := dDate;
			GKeiyaku_DMemData.Edit;
			GKeiyaku_DMemDataContDate.Clear;
			GKeiyaku_DMemDataPrevContDate.Clear;
			GKeiyaku_DMemDataContNo.Clear;
			GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
			GKeiyaku_DMemDataTax_RateName.AsString   := '';
			GKeiyaku_DMemDataTax_RateName2.AsString  := '';  //<TAX> ADD          
			GKeiyaku_DMemDataTax_Rate.AsInteger      := 0;
			GKeiyaku_DMemDataSales_Tax.Clear;
			GKeiyaku_DMemDataContMoney.Clear;
			GKeiyaku_DMemDataCheck.AsInteger	     := 1;
//<TAX> ADD St
            // 削除
            moKojiInfoMn.DeleteKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData));
//<TAX> ADD Ed
		end;
	end;

	crKingaku := GKeiyaku_DMemDataContMoney.AsCurrency;
	if ( crKingaku = 0 ) then Exit;

//	if ( GKeiyaku_DMemDataDummyTax_Rate.AsInteger <> 9 ) then
	if ( GKeiyaku_DMemDataDummyTax_Rate.AsInteger <> 9 ) and ( GKeiyaku_DMemDataDummyTax_Rate.AsInteger <> 8 ) then	// <201>
	begin
		if ( GKeiyaku_DMemDataSales_Tax.AsCurrency <> 0 ) then Exit;
	end;

	if ( m_iAccProKbn <> 0 ) then   // 税率 ≠ 0
	begin
//<TAX> DEL St
{
		case GKeiyaku_DMemDataDummyTax_Rate.AsInteger of
            // 標準税率
			0:  begin
				    GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
					GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
    				// 消費税率算出
    				if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
    					MemDIC_COTXRATE.First;
    				crRitu := 0;

    				while ( MemDIC_COTXRATE.Eof = false ) do
    				begin
    					if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
    					begin
    						crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
    						break;
    					end;
    					MemDIC_COTXRATE.Next;
    				end;
	
    				crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
    					begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if ( crKingaku >= 0 ) then
                                    iKingaku := Trunc(crKingaku + 0.5)
    						else    iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
            // 3%
			1:  begin
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 1;
    				GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
	
    				crKingaku := (crKingaku / 103) * 3;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
    					begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if ( crKingaku >= 0 ) then
                                    iKingaku := Trunc(crKingaku + 0.5)
    						else    iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
            // 5%
			2:  begin
				    GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 2;
    				GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];

    				crKingaku := (crKingaku / 105) * 5;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
    					begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if ( crKingaku >= 0 ) then
                                    iKingaku := Trunc(crKingaku + 0.5)
    						else    iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
			// 不課税 // <201>
			8:  begin
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 8;
					GKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
					GKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
				end;
			// 非課税
			9:  begin
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 9;
//					GKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
					GKeiyaku_DMemDataTax_RateName.AsString   := sTax[4];	// <201>
					GKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
				end;
		end;
}
//<TAX> DEL Ed
	end
	else
	begin
		GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
		GKeiyaku_DMemDataTax_RateName.AsString   := '';
	end;
end;

//**********************************************************************
//*		Proccess	:	合計入金予定情報Post前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.GNyukin_DMemDataBeforePost(DataSet: TDataSet);
var
	dDate		:	TDateTime;
	dPrevDate	:	TDateTime;
	QueryRead	:	TMQuery;
	stGCode		:	String;
	iCnt		:	Integer;
begin
	if (Goukei_PPanel_Card.Visible = false) or (Goukei_PPanel_KeNyukin.Visible = false) then
	begin
//		fnCreateCard (1);
		exit;
	end;

   	if m_fEnd = 1 then
		Exit;

	if m_bFieldFlg = false then
	begin
		dDate := GNyukin_DMemDataContDate.AsDateTime;
		dPrevDate := GNyukin_DMemDataPrevContDate.AsDateTime;
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			stGCode := Goukei_ETEdit_GCode.Text
		else
			stGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_GCode.Value)]);
	
		if dDate <> 0 then
		begin
			if (dDate <> dPrevDate) then
			begin
				for iCnt := 1 to 10 do
				begin
					if iCnt <> GNyukin_DMemData.RecNo then
					begin
                        (*
						if dDate = GNyuDateSave[iCnt] then
						begin
							Beep;
							MjsMessageBoxEX(Self,'同一年月日は入力できません。','登録',mjWarning ,mjOk,mjDefOk);
							Goukei_DdxDBGrid_Nyu.FocusedColumn	:= COL_KEINEN;
							abort;
							exit;
						end;
                        *) // <179>
					end;
				end;

				GNyuDateSave[GNyukin_DMemData.RecNo] := dDate;
			end;
		end
		else
		begin
			GNyuDateSave[GNyukin_DMemData.RecNo] := dDate;
			GNyukin_DMemData.Edit;
			GNyukin_DMemDataContDate.Clear;
			GNyukin_DMemDataPrevContDate.Clear;
			GNyukin_DMemDataContMoney.Clear;
			GNyukin_DMemDataCheck.AsInteger	:= 1;
// <212> ADD start
            GNyukin_DMemDataCostomerGCode.Clear;
            GNyukin_DMemDataCostomerNCode.Clear;
            GNyukin_DMemDataCostomerName.Clear;
// <212> ADD end
		end;
	end;

// <212> ADD start
    if  GNyukin_DMemDataCostomerGCode.AsString  = '' then
    begin
        GNyukin_DMemData.Edit;
        GNyukin_DMemDataCostomerName.AsString  := '';
        GNyukin_DMemDataCostomerNCode.AsFloat  := 0;
    end
    else
    begin
        if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
            stGCode := GNyukin_DMemDataCostomerGCode.AsString
        else
            stGCode := Format ('%.16d', [Trunc (GNyukin_DMemDataCostomerGCode.AsFloat)]);

        QueryRead := TMQuery.Create (Self);
        MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

        try
            with QueryRead do
            begin
                Close;

                SQL.Clear;							// ｸｴﾘの初期化
                // 取引先を外部ｺｰﾄﾞ昇順でGET
                SQL.Add('select NMK,NCode from MTOKUI');
                SQL.Add('where  NCode=:NCode');
                SQL.Add(' And  HojyoKbn1 = 1 AND RDelKbn = 0 AND SumKbn = 0');  //<252> ADD                
//<255> DEL                SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                SetFld('NCode').AsString :=
                    FormatFloat('0',
                    fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                Open;						// ｸｴﾘの開始

                if EOF = false then
                begin
                    GNyukin_DMemData.Edit;
                    GNyukin_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                    GNyukin_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                end
                else
                begin
                    GNyukin_DMemData.Edit;
                    GNyukin_DMemDataCostomerName.AsString  := '';
                    GNyukin_DMemDataCostomerNCode.AsFloat  := 0;
					beep;
					abort;
                end;
            end;
        finally
            QueryRead.Free;
        end;
    end;
// <212> ADD end

end;

//**********************************************************************
//*		Proccess	:	実在契約情報Exitｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiExit(Sender: TObject);
var
// <212> ADD start
    QueryRead   : TMQuery;
    stGCode     : String;
// <212> ADD end
begin
// <212> MOD start
{
	if m_fEnd = 0 then
	begin
		if JKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			JKeiyaku_DMemData.Post;
	end;
}
	if m_fEnd = 0 then
    begin

        if Jituzai_PMTab.Items.Selected <> 3 then exit;

		if JKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
        begin

            if JKeiyaku_DMemDataCostomerGCode.AsString  = '' then
            begin
                JKeiyaku_DMemData.Edit;
                JKeiyaku_DMemDataCostomerName.AsString  := '';
                JKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
		        JKeiyaku_DMemData.Post;
                exit;
            end;

	        if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
		        stGCode :=JKeiyaku_DMemDataCostomerGCode.AsString
	        else
		        stGCode := Format ('%.16d', [Trunc (JKeiyaku_DMemDataCostomerGCode.AsFloat)]);

            QueryRead := TMQuery.Create (Self);
            MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

            try
                with QueryRead do
                begin

                    Close;

                    SQL.Clear;							// ｸｴﾘの初期化
                    // 取引先を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select NMK,NCode from MTOKUI');
                    SQL.Add('where  NCode=:NCode');
//<255> DEL                    SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                    SetFld('NCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                    Open;						// ｸｴﾘの開始

                    if EOF = false then
                    begin
                        JKeiyaku_DMemData.Edit;
                        JKeiyaku_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                        JKeiyaku_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                    end
                    else
                    begin
                        JKeiyaku_DMemData.Edit;
                        JKeiyaku_DMemDataCostomerName.AsString  := '';
                        JKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Kei');
					    Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_COSTCODE;
					    abort;
                    end;

                end;

            finally
                QueryRead.Free;
            end;
		    JKeiyaku_DMemData.Post;
        end;
    end;
// <212> MOD end

end;

//**********************************************************************
//*		Proccess	:	実在入金予定情報Exitｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_NyuExit(Sender: TObject);
var
// <212> ADD start
   	QueryRead : TMQuery;
    stGCode   : String;
// <212> ADD end
begin
// <212> MOD start
{
	if m_fEnd = 0 then
	begin
		if JNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			JNyukin_DMemData.Post;
	end;
}
	if m_fEnd = 0 then
	begin

        if Jituzai_PMTab.Items.Selected <> 4 then exit;

		if JNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
        begin
            if  JNyukin_DMemDataCostomerGCode.AsString  = '' then
            begin
                JNyukin_DMemData.Edit;
                JNyukin_DMemDataCostomerName.AsString  := '';
                JNyukin_DMemDataCostomerNCode.AsFloat  := 0;
			    JNyukin_DMemData.Post;
                exit;
            end;

            if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
                stGCode := JNyukin_DMemDataCostomerGCode.AsString
            else
                stGCode := Format ('%.16d', [Trunc (JNyukin_DMemDataCostomerGCode.AsFloat)]);

            QueryRead := TMQuery.Create (Self);
            MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

            try
                with QueryRead do
                begin
                    Close;

                    SQL.Clear;							// ｸｴﾘの初期化
                    // 取引先を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select NMK,NCode from MTOKUI');
                    SQL.Add('where  NCode=:NCode');
//<255> DEL                    SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                    SetFld('NCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                    Open;						// ｸｴﾘの開始

                    if EOF = false then
                    begin
                        JNyukin_DMemData.Edit;
                        JNyukin_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                        JNyukin_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                    end
                    else
                    begin
                        JNyukin_DMemData.Edit;
                        JNyukin_DMemDataCostomerName.AsString  := '';
                        JNyukin_DMemDataCostomerNCode.AsFloat  := 0;
                        MjsDispCtrl.MjsSetFocus(Self, 'Jituzai_DdxDBGrid_Nyu');
					    Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_NCOSTCODE;
					    abort;
                    end;
                end;
            finally
                QueryRead.Free;
            end;
            JNyukin_DMemData.Post;
        end;
	end;
// <212> MOD end
end;

//**********************************************************************
//*		Proccess	:	合計契約情報Exitｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiExit(Sender: TObject);
var
// <212> ADD start
   	QueryRead : TMQuery;
    stGCode   : String;
// <212> ADD end
begin
// <212> MOD start
{
	if m_fEnd = 0 then
	begin
		if GKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			GKeiyaku_DMemData.Post;
	end;
}
	if m_fEnd = 0 then
	begin

        if Goukei_PMTab.Items.Selected <> 2 then exit;

		if GKeiyaku_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
        begin
            if GKeiyaku_DMemDataCostomerGCode.AsString  = '' then
            begin
                GKeiyaku_DMemData.Edit;
                GKeiyaku_DMemDataCostomerName.AsString  := '';
                GKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
		        GKeiyaku_DMemData.Post;
                exit;
            end;

	        if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
		        stGCode :=GKeiyaku_DMemDataCostomerGCode.AsString
	        else
		        stGCode := Format ('%.16d', [Trunc (GKeiyaku_DMemDataCostomerGCode.AsFloat)]);

            QueryRead := TMQuery.Create (Self);
            MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

            try
                with QueryRead do
                begin

                    Close;

                    SQL.Clear;							// ｸｴﾘの初期化
                    // 取引先を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select NMK,NCode from MTOKUI');
                    SQL.Add('where  NCode=:NCode');
//<255> DEL                    SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                    SetFld('NCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                    Open;						// ｸｴﾘの開始

                    if EOF = false then
                    begin
                        GKeiyaku_DMemData.Edit;
                        GKeiyaku_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                        GKeiyaku_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                    end
                    else
                    begin
                        GKeiyaku_DMemData.Edit;
                        GKeiyaku_DMemDataCostomerName.AsString  := '';
                        GKeiyaku_DMemDataCostomerNCode.AsFloat  := 0;
				            MjsDispCtrl.MjsSetFocus(Self,'Goukei_DdxDBGrid_Kei');
                        Goukei_DdxDBGrid_Kei.FocusedColumn      := COL_COSTCODE;
					    abort;
                    end;
                end;
            finally
                QueryRead.Free;
            end;
		    GKeiyaku_DMemData.Post;
        end;
	end;
end;

//**********************************************************************
//*		Proccess	:	合計入金予定情報Exitｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_NyuExit(Sender: TObject);
var
// <212> ADD start
   	QueryRead : TMQuery;
    stGCode   : String;
// <212> ADD end
begin
// <212> MOD start
{
	if m_fEnd = 0 then
	begin
		if GNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
			GNyukin_DMemData.Post;
	end;
}

	if m_fEnd = 0 then
	begin

        if Goukei_PMTab.Items.Selected <> 3 then exit;

		if GNyukin_DMemData.State in [dsInsert,dsEdit] then	// ﾃﾞｰﾀ編集中？
        begin
            if  GNyukin_DMemDataCostomerGCode.AsString  = '' then
            begin
                GNyukin_DMemData.Edit;
                GNyukin_DMemDataCostomerName.AsString  := '';
                GNyukin_DMemDataCostomerNCode.AsFloat  := 0;
                GNyukin_DMemData.Post;
                exit;
            end;


            if ( MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 ) then
                stGCode := GNyukin_DMemDataCostomerGCode.AsString
            else
                stGCode := Format ('%.16d', [Trunc (GNyukin_DMemDataCostomerGCode.AsFloat)]);

            QueryRead := TMQuery.Create (Self);
            MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

            try
                with QueryRead do
                begin
                    Close;

                    SQL.Clear;							// ｸｴﾘの初期化
                    // 取引先を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select NMK,NCode from MTOKUI');
                    SQL.Add('where  NCode=:NCode');
//<255> DEL                    SetFld('NCode').AsFloat := fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                    SetFld('NCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(stGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
                    Open;						// ｸｴﾘの開始

                    if EOF = false then
                    begin
                        GNyukin_DMemData.Edit;
                        GNyukin_DMemDataCostomerName.AsString  := GetFld('NMK').AsString;
                        GNyukin_DMemDataCostomerNCode.AsFloat  := GetFld('NCode').AsFloat;
                    end
                    else
                    begin
                        GNyukin_DMemData.Edit;
                        GNyukin_DMemDataCostomerName.AsString  := '';
                        GNyukin_DMemDataCostomerNCode.AsFloat  := 0;
			            MjsDispCtrl.MjsSetFocus(Self,'Goukei_DdxDBGrid_Nyu');
                        Goukei_DdxDBGrid_Nyu.FocusedColumn      := COL_NCOSTCODE;
					    abort;
                    end;
                end;
            finally
                QueryRead.Free;
            end;
			GNyukin_DMemData.Post;
        end;
    end;
// <212> MOD end

end;

//**********************************************************************
//*		Proccess	:	付箋Clickｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.FusenClick(Sender: TObject);
begin
	// 付箋貼り付け
{	if Sender = Jituzai_ImageRaised_FusenRed then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := true;
		Jituzai_ImageRaised_FusenRed.Visible := false;
		Jituzai_ImageLowered_FusenGreen.Visible := false;
		Jituzai_ImageRaised_FusenGreen.Visible := true;
		Jituzai_ImageLowered_FusenBlue.Visible := false;
		Jituzai_ImageRaised_FusenBlue.Visible := true;
		Jituzai_ImageLowered_FusenOrange.Visible := false;
		Jituzai_ImageRaised_FusenOrange.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := true;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Jituzai_ImageRaised_FusenGreen then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := false;
		Jituzai_ImageRaised_FusenRed.Visible := true;
		Jituzai_ImageLowered_FusenGreen.Visible := true;
		Jituzai_ImageRaised_FusenGreen.Visible := false;
		Jituzai_ImageLowered_FusenBlue.Visible := false;
		Jituzai_ImageRaised_FusenBlue.Visible := true;
		Jituzai_ImageLowered_FusenOrange.Visible := false;
		Jituzai_ImageRaised_FusenOrange.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := true;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Jituzai_ImageRaised_FusenBlue then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := false;
		Jituzai_ImageRaised_FusenRed.Visible := true;
		Jituzai_ImageLowered_FusenGreen.Visible := false;
		Jituzai_ImageRaised_FusenGreen.Visible := true;
		Jituzai_ImageLowered_FusenBlue.Visible := true;
		Jituzai_ImageRaised_FusenBlue.Visible := false;
		Jituzai_ImageLowered_FusenOrange.Visible := false;
		Jituzai_ImageRaised_FusenOrange.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := true;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Jituzai_ImageRaised_FusenOrange then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := false;
		Jituzai_ImageRaised_FusenRed.Visible := true;
		Jituzai_ImageLowered_FusenGreen.Visible := false;
		Jituzai_ImageRaised_FusenGreen.Visible := true;
		Jituzai_ImageLowered_FusenBlue.Visible := false;
		Jituzai_ImageRaised_FusenBlue.Visible := true;
		Jituzai_ImageLowered_FusenOrange.Visible := true;
		Jituzai_ImageRaised_FusenOrange.Visible := false;

		Jituzai_ETEdit_Fusen.Enabled := true;
		Jituzai_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenRed then
	begin
		Goukei_ImageLowered_FusenRed.Visible := true;
		Goukei_ImageRaised_FusenRed.Visible := false;
		Goukei_ImageLowered_FusenGreen.Visible := false;
		Goukei_ImageRaised_FusenGreen.Visible := true;
		Goukei_ImageLowered_FusenBlue.Visible := false;
		Goukei_ImageRaised_FusenBlue.Visible := true;
		Goukei_ImageLowered_FusenOrange.Visible := false;
		Goukei_ImageRaised_FusenOrange.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := true;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenGreen then
	begin
		Goukei_ImageLowered_FusenRed.Visible := false;
		Goukei_ImageRaised_FusenRed.Visible := true;
		Goukei_ImageLowered_FusenGreen.Visible := true;
		Goukei_ImageRaised_FusenGreen.Visible := false;
		Goukei_ImageLowered_FusenBlue.Visible := false;
		Goukei_ImageRaised_FusenBlue.Visible := true;
		Goukei_ImageLowered_FusenOrange.Visible := false;
		Goukei_ImageRaised_FusenOrange.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := true;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenBlue then
	begin
		Goukei_ImageLowered_FusenRed.Visible := false;
		Goukei_ImageRaised_FusenRed.Visible := true;
		Goukei_ImageLowered_FusenGreen.Visible := false;
		Goukei_ImageRaised_FusenGreen.Visible := true;
		Goukei_ImageLowered_FusenBlue.Visible := true;
		Goukei_ImageRaised_FusenBlue.Visible := false;
		Goukei_ImageLowered_FusenOrange.Visible := false;
		Goukei_ImageRaised_FusenOrange.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := true;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	if Sender = Goukei_ImageRaised_FusenOrange then
	begin
		Goukei_ImageLowered_FusenRed.Visible := false;
		Goukei_ImageRaised_FusenRed.Visible := true;
		Goukei_ImageLowered_FusenGreen.Visible := false;
		Goukei_ImageRaised_FusenGreen.Visible := true;
		Goukei_ImageLowered_FusenBlue.Visible := false;
		Goukei_ImageRaised_FusenBlue.Visible := true;
		Goukei_ImageLowered_FusenOrange.Visible := true;
		Goukei_ImageRaised_FusenOrange.Visible := false;

		Goukei_ETEdit_Fusen.Enabled := true;
		Goukei_ETEdit_Fusen.Color := clWindow;
	end;

	// 付箋はがし
	if Sender = Jituzai_ImageLowered_FusenRed then
	begin
		Jituzai_ImageLowered_FusenRed.Visible := false;
		Jituzai_ImageRaised_FusenRed.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := false;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Jituzai_ImageLowered_FusenGreen then
	begin
		Jituzai_ImageLowered_FusenGreen.Visible := false;
		Jituzai_ImageRaised_FusenGreen.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := false;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Jituzai_ImageLowered_FusenBlue then
	begin
		Jituzai_ImageLowered_FusenBlue.Visible := false;
		Jituzai_ImageRaised_FusenBlue.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := false;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Jituzai_ImageLowered_FusenOrange then
	begin
		Jituzai_ImageLowered_FusenOrange.Visible := false;
		Jituzai_ImageRaised_FusenOrange.Visible := true;

		Jituzai_ETEdit_Fusen.Enabled := false;
		Jituzai_ETEdit_Fusen.Color := Self.Color;
		Jituzai_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenRed then
	begin
		Goukei_ImageLowered_FusenRed.Visible := false;
		Goukei_ImageRaised_FusenRed.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := false;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenGreen then
	begin
		Goukei_ImageLowered_FusenGreen.Visible := false;
		Goukei_ImageRaised_FusenGreen.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := false;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenBlue then
	begin
		Goukei_ImageLowered_FusenBlue.Visible := false;
		Goukei_ImageRaised_FusenBlue.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := false;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;

	if Sender = Goukei_ImageLowered_FusenOrange then
	begin
		Goukei_ImageLowered_FusenOrange.Visible := false;
		Goukei_ImageRaised_FusenOrange.Visible := true;

		Goukei_ETEdit_Fusen.Enabled := false;
		Goukei_ETEdit_Fusen.Color := Self.Color;
		Goukei_ETEdit_Fusen.Text := '';
	end;}
end;

//**********************************************************************
//*		Proccess	:	実在Grid OnKeyPressｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridKeyPress(Sender: TObject;
  var Key: Char);
//<KSN3> ADD St
var
    dbGrid : TdxDBGrid;
//<KSN3> ADD Ed
begin
    dbGrid := TdxDBGrid(Sender);  //<KSN3> ADD
//<KSN3> DEL	if  (Jituzai_DdxDBGrid.FocusedColumn = COL_GCODE) then
    if (dbGrid.FocusedField.FieldName = 'GCode') then  //<KSN3> ADD
	begin
		if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
		begin
//        	showmessage('['+Key+']');
			if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) and (Key <> #13) then
			begin                          // #8=BackSpace   #27=Esc  #9=Tab #13=Enter
				Beep ();
				Abort;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	合計Grid OnKeyPressｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridKeyPress(Sender: TObject;
  var Key: Char);
begin
	if  (Goukei_DdxDBGrid.FocusedColumn = COL_GCODE) then
	begin
		if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
		begin
			if  ((Key < '0') or (Key > '9')) and (Key <> #8) and (Key <> #27) and (Key <> #9) then
			begin                          // #8=BackSpace   #27=Esc  #9=Tab
				Beep ();
				Abort;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	実在Grid OnGetTextｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(数値属性の時に必要)
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridGCodeGetText(Sender: TObject;
  ANode: TdxTreeListNode; var AText: String);
var
	strFormat	:	String;
begin

	if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
	begin
		case (MasterInfo_DMemDataCodeAttr.AsInteger) of
			0:  strFormat   := '%'  + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
			1:  strFormat   := '%.' + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
		end;

		if  (AText <> '') then
			AText   := Format (strFormat, [StrToInt64 (Trim (AText))]);
	end


end;

//**********************************************************************
//*		Proccess	:	合計Grid OnGetTextｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ(数値属性の時に必要)
//*		Name		:	N.Nabe
//*		Date		:	2000/12/01
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridGCodeGetText(Sender: TObject;
  ANode: TdxTreeListNode; var AText: String);
var
	strFormat	:	String;
begin
	if  (MasterInfo_DMemDataCodeAttr.AsInteger <= 1) then
	begin
		case (MasterInfo_DMemDataCodeAttr.AsInteger) of
			0:  strFormat   := '%'  + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
			1:  strFormat   := '%.' + IntToStr (MasterInfo_DMemDataCodeDigit.AsInteger) + 'd';
		end;

		if  (AText <> '') then
			AText   := Format (strFormat, [StrToInt64 (Trim (AText))]);
	end
end;

//**********************************************************************
//*		Proccess	:	ファイル出力に必要なTitle･Filed設定
//*		Name		:	N.Nabe
//*		Date		:	2000/1/31
//*		Parameter	:	sTitle	:	CreateされたTStringList(ﾀｲﾄﾙ用)
//*						sMemFld	:	CreateされたTStringList(ﾌｨｰﾙﾄﾞ用)
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP018001f.SetFileOut(iSelect : Integer; var sTitle: TStringList; var sMemFld: TStringList);
begin
	case iSelect of
		JITUZAIKANI:							// 実在工事簡易
		begin
			sTitle.Add('コード');
			sTitle.Add('連想');
			sTitle.Add('正式名称');
			sTitle.Add('簡略名称');

			sMemFld.Add('GCode');
			sMemFld.Add('RenChar');
			sMemFld.Add('LongName');
			sMemFld.Add('SimpleName');
		end;
		JITUZAISHOSAI:
		begin
			sTitle.Add('コード');
			sTitle.Add('連想');
			sTitle.Add('正式名称');
			sTitle.Add('簡略名称');
			//sTitle.Add('付箋コメント');
   			sTitle.Add('郵便番号基番');
    		sTitle.Add('郵便番号枝番');
	    	sTitle.Add('住所上段');
		    sTitle.Add('住所下段');
   			sTitle.Add('電話番号');
    		sTitle.Add('完成振替' + MasterInfo_DMemDataBumonName.AsString + 'コード');
	    	sTitle.Add('完成振替' + MasterInfo_DMemDataBumonName.AsString + '名称');
		    sTitle.Add('担当者コード');
   			sTitle.Add('担当者名称');
    		sTitle.Add('受注者コード');
	    	sTitle.Add('受注者名称');
		    sTitle.Add('受注者');
			sTitle.Add('予定工期(開始日)');
			sTitle.Add('予定工期(終了日)');
			sTitle.Add('実績工期(開始日)');
			sTitle.Add('実績工期(終了日)');
			sTitle.Add('計上基準区分');
			sTitle.Add('計上基準名称');
			sTitle.Add('配賦区分');
			sTitle.Add('配賦区分名称');
			sTitle.Add('入力区分');
			sTitle.Add('入力区分名称');
			sTitle.Add('翌期移送区分');
			sTitle.Add('翌期移送区分名称');
            sTitle.Add('完成振替パターン');
            sTitle.Add('完成振替パターン名称');
            if MasterInfo_DMemDataKojKbn2.AsInteger <> 0 then
            begin
                sTitle.Add('売上計上科目コード');
                sTitle.Add('売上計上科目コード名称');
                sTitle.Add('完成売上高相手勘定区分');
                sTitle.Add('完成売上高相手勘定区分名称');
            end;
            if MasterInfo_DMemDataKsyUse.AsInteger <> 0 then
            begin
                sTitle.Add(MasterInfo_DMemDataKosyuName.AsString+'管理区分');
                sTitle.Add(MasterInfo_DMemDataKosyuName.AsString+'管理区分名称');
                sTitle.Add(MasterInfo_DMemDataKosyuName.AsString+'パターンNO');
                sTitle.Add(MasterInfo_DMemDataKosyuName.AsString+'パターンNO名称');
            end;
			//sTitle.Add('最終更新日時');
			sTitle.Add('契約情報１契約年月日');
			sTitle.Add('契約情報１契約書ＮＯ');
			sTitle.Add('契約情報１契約金額');
			sTitle.Add('契約情報１税率');
			sTitle.Add('契約情報１消費税額');
			sTitle.Add('契約情報２契約年月日');
			sTitle.Add('契約情報２契約書ＮＯ');
			sTitle.Add('契約情報２契約金額');
			sTitle.Add('契約情報２税率');
			sTitle.Add('契約情報２消費税額');
			sTitle.Add('契約情報３契約年月日');
			sTitle.Add('契約情報３契約書ＮＯ');
			sTitle.Add('契約情報３契約金額');
			sTitle.Add('契約情報３税率');
			sTitle.Add('契約情報３消費税額');
			sTitle.Add('契約情報４契約年月日');
			sTitle.Add('契約情報４契約書ＮＯ');
			sTitle.Add('契約情報４契約金額');
			sTitle.Add('契約情報４税率');
			sTitle.Add('契約情報４消費税額');
			sTitle.Add('契約情報５契約年月日');
			sTitle.Add('契約情報５契約書ＮＯ');
			sTitle.Add('契約情報５契約金額');
			sTitle.Add('契約情報５税率');
			sTitle.Add('契約情報５消費税額');
			sTitle.Add('契約情報６契約年月日');
			sTitle.Add('契約情報６契約書ＮＯ');
			sTitle.Add('契約情報６契約金額');
			sTitle.Add('契約情報６税率');
			sTitle.Add('契約情報６消費税額');
			sTitle.Add('契約情報７契約年月日');
			sTitle.Add('契約情報７契約書ＮＯ');
			sTitle.Add('契約情報７契約金額');
			sTitle.Add('契約情報７税率');
			sTitle.Add('契約情報７消費税額');
			sTitle.Add('契約情報８契約年月日');
			sTitle.Add('契約情報８契約書ＮＯ');
			sTitle.Add('契約情報８契約金額');
			sTitle.Add('契約情報８税率');
			sTitle.Add('契約情報８消費税額');
			sTitle.Add('入金予定情報１入金予定日');
			sTitle.Add('入金予定情報１入金予定金額');
			sTitle.Add('入金予定情報２入金予定日');
			sTitle.Add('入金予定情報２入金予定金額');
			sTitle.Add('入金予定情報３入金予定日');
			sTitle.Add('入金予定情報３入金予定金額');
			sTitle.Add('入金予定情報４入金予定日');
			sTitle.Add('入金予定情報４入金予定金額');
			sTitle.Add('入金予定情報５入金予定日');
			sTitle.Add('入金予定情報５入金予定金額');
			sTitle.Add('入金予定情報６入金予定日');
			sTitle.Add('入金予定情報６入金予定金額');
			sTitle.Add('入金予定情報７入金予定日');
			sTitle.Add('入金予定情報７入金予定金額');
			sTitle.Add('入金予定情報８入金予定日');
			sTitle.Add('入金予定情報８入金予定金額');
			sTitle.Add('入金予定情報９入金予定日');
			sTitle.Add('入金予定情報９入金予定金額');
			sTitle.Add('入金予定情報１０入金予定日');
			sTitle.Add('入金予定情報１０入金予定金額');
			sTitle.Add('合計契約金額');
			sTitle.Add('合計消費税額');
			sTitle.Add('合計入金予定金額');

			sMemFld.Add('GCode');
			sMemFld.Add('RenChar');
			sMemFld.Add('LongName');
			sMemFld.Add('SimpleName');
			//sMemFld.Add('FusenCmt');
            sMemFld.Add('ZipCode1');
            sMemFld.Add('ZipCode2');
            sMemFld.Add('Address1');
            sMemFld.Add('Address2');
            sMemFld.Add('TelNo');
            sMemFld.Add('BmnNCode');
            sMemFld.Add('BmnCodeName');
            sMemFld.Add('PersonNCode');
            sMemFld.Add('PersonCodeName');
            sMemFld.Add('CostomerNCode');
            sMemFld.Add('CostomerCodeName');
            sMemFld.Add('CostomerName');
//			sMemFld.Add('StartDate');
//			sMemFld.Add('ScheduleDate');
			sMemFld.Add('FinishDate');
			sMemFld.Add('SalesBase');
			sMemFld.Add('SalesBaseName');
			sMemFld.Add('HaifuKbn');
			sMemFld.Add('HaifuKbnName');
			sMemFld.Add('BunCode');
			sMemFld.Add('BunCodeName');
			sMemFld.Add('MoveKbn');
			sMemFld.Add('MoveKbnName');
            sMemFld.Add('DetailKbn1');
            sMemFld.Add('DetailKbn1Name');

            if MasterInfo_DMemDataKojKbn2.AsInteger <> 0 then
            begin
                sMemFld.Add('SalesKmkCd');
                sMemFld.Add('SalesKmkCdName');
                sMemFld.Add('DetailKbn2');
                sMemFld.Add('DetailKbn2Name');
            end;
            if MasterInfo_DMemDataKsyUse.AsInteger <> 0 then
            begin
                sMemFld.Add('PartKbn');
                sMemFld.Add('PartKbnName');
                sMemFld.Add('PatternNo');
                sMemFld.Add('PatternNoName');
            end;
			sMemFld.Add('UpDateTime');
			sMemFld.Add('ContDateK1');
			sMemFld.Add('ContNoK1');
			sMemFld.Add('ContMoneyK1');
			sMemFld.Add('Tax_RateK1');
			sMemFld.Add('Sales_TaxK1');

			sMemFld.Add('ContDateK2');
			sMemFld.Add('ContNoK2');
			sMemFld.Add('ContMoneyK2');
			sMemFld.Add('Tax_RateK2');
			sMemFld.Add('Sales_TaxK2');

			sMemFld.Add('ContDateK3');
			sMemFld.Add('ContNoK3');
			sMemFld.Add('ContMoneyK3');
			sMemFld.Add('Tax_RateK3');
			sMemFld.Add('Sales_TaxK3');

			sMemFld.Add('ContDateK4');
			sMemFld.Add('ContNoK4');
			sMemFld.Add('ContMoneyK4');
			sMemFld.Add('Tax_RateK4');
			sMemFld.Add('Sales_TaxK4');

			sMemFld.Add('ContDateK5');
			sMemFld.Add('ContNoK5');
			sMemFld.Add('ContMoneyK5');
			sMemFld.Add('Tax_RateK5');
			sMemFld.Add('Sales_TaxK5');

			sMemFld.Add('ContDateK6');
			sMemFld.Add('ContNoK6');
			sMemFld.Add('ContMoneyK6');
			sMemFld.Add('Tax_RateK6');
			sMemFld.Add('Sales_TaxK6');

			sMemFld.Add('ContDateK7');
			sMemFld.Add('ContNoK7');
			sMemFld.Add('ContMoneyK7');
			sMemFld.Add('Tax_RateK7');
			sMemFld.Add('Sales_TaxK7');

			sMemFld.Add('ContDateK8');
			sMemFld.Add('ContNoK8');
			sMemFld.Add('ContMoneyK8');
			sMemFld.Add('Tax_RateK8');
			sMemFld.Add('Sales_TaxK8');

			sMemFld.Add('ContDateN1');
			sMemFld.Add('ContMoneyN1');

			sMemFld.Add('ContDateN2');
			sMemFld.Add('ContMoneyN2');

			sMemFld.Add('ContDateN3');
			sMemFld.Add('ContMoneyN3');

			sMemFld.Add('ContDateN4');
			sMemFld.Add('ContMoneyN4');

			sMemFld.Add('ContDateN5');
			sMemFld.Add('ContMoneyN5');

			sMemFld.Add('ContDateN6');
			sMemFld.Add('ContMoneyN6');

			sMemFld.Add('ContDateN7');
			sMemFld.Add('ContMoneyN7');

			sMemFld.Add('ContDateN8');
			sMemFld.Add('ContMoneyN8');

			sMemFld.Add('ContDateN9');
			sMemFld.Add('ContMoneyN9');

			sMemFld.Add('ContDateN10');
			sMemFld.Add('ContMoneyN10');

			sMemFld.Add('KeiyakuG');
			sMemFld.Add('ShohiG');
			sMemFld.Add('NyukinG');
		end;
		GOUKEIKANI:
		begin
			sTitle.Add('コード');
			sTitle.Add('連想');
			sTitle.Add('正式名称');
			sTitle.Add('簡略名称');

			sMemFld.Add('GCode');
			sMemFld.Add('RenChar');
			sMemFld.Add('LongName');
			sMemFld.Add('SimpleName');
		end;
		GOUKEISHOSAI:
		begin
			sTitle.Add('コード');
			sTitle.Add('連想');
			sTitle.Add('正式名称');
			sTitle.Add('簡略名称');
			//sTitle.Add('付箋コメント');
			sTitle.Add('郵便番号基番');
			sTitle.Add('郵便番号枝番');
			sTitle.Add('住所上段');
			sTitle.Add('住所下段');
			sTitle.Add('電話番号');
			sTitle.Add('担当者コード');
			sTitle.Add('担当者名称');
			sTitle.Add('受注者コード');
			sTitle.Add('受注者名称');
			sTitle.Add('受注者');
			sTitle.Add('名寄せ区分');
			sTitle.Add('名寄せ区分名称');
			sTitle.Add('集計' + MasterInfo_DMemDataBumonName.AsString + 'コード');
			sTitle.Add('集計' + MasterInfo_DMemDataBumonName.AsString + '名称');
			sTitle.Add('着工年月日');
			sTitle.Add('完成予定日');
			sTitle.Add('完成年月日');
			sTitle.Add('計上基準区分');
			sTitle.Add('計上基準名称');
			sTitle.Add('配賦区分');
			sTitle.Add('配賦区分名称');
			sTitle.Add('翌期移送区分');
			sTitle.Add('翌期移送区分名称');
			sTitle.Add('最終更新日時');
			sTitle.Add('契約情報１契約年月日');
			sTitle.Add('契約情報１契約書ＮＯ');
			sTitle.Add('契約情報１契約金額');
			sTitle.Add('契約情報１税率');
			sTitle.Add('契約情報１消費税額');
			sTitle.Add('契約情報２契約年月日');
			sTitle.Add('契約情報２契約書ＮＯ');
			sTitle.Add('契約情報２契約金額');
			sTitle.Add('契約情報２税率');
			sTitle.Add('契約情報２消費税額');
			sTitle.Add('契約情報３契約年月日');
			sTitle.Add('契約情報３契約書ＮＯ');
			sTitle.Add('契約情報３契約金額');
			sTitle.Add('契約情報３税率');
			sTitle.Add('契約情報３消費税額');
			sTitle.Add('契約情報４契約年月日');
			sTitle.Add('契約情報４契約書ＮＯ');
			sTitle.Add('契約情報４契約金額');
			sTitle.Add('契約情報４税率');
			sTitle.Add('契約情報４消費税額');
			sTitle.Add('契約情報５契約年月日');
			sTitle.Add('契約情報５契約書ＮＯ');
			sTitle.Add('契約情報５契約金額');
			sTitle.Add('契約情報５税率');
			sTitle.Add('契約情報５消費税額');
			sTitle.Add('契約情報６契約年月日');
			sTitle.Add('契約情報６契約書ＮＯ');
			sTitle.Add('契約情報６契約金額');
			sTitle.Add('契約情報６税率');
			sTitle.Add('契約情報６消費税額');
			sTitle.Add('契約情報７契約年月日');
			sTitle.Add('契約情報７契約書ＮＯ');
			sTitle.Add('契約情報７契約金額');
			sTitle.Add('契約情報７税率');
			sTitle.Add('契約情報７消費税額');
			sTitle.Add('契約情報８契約年月日');
			sTitle.Add('契約情報８契約書ＮＯ');
			sTitle.Add('契約情報８契約金額');
			sTitle.Add('契約情報８税率');
			sTitle.Add('契約情報８消費税額');
			sTitle.Add('入金予定情報１入金予定日');
			sTitle.Add('入金予定情報１入金予定金額');
			sTitle.Add('入金予定情報２入金予定日');
			sTitle.Add('入金予定情報２入金予定金額');
			sTitle.Add('入金予定情報３入金予定日');
			sTitle.Add('入金予定情報３入金予定金額');
			sTitle.Add('入金予定情報４入金予定日');
			sTitle.Add('入金予定情報４入金予定金額');
			sTitle.Add('入金予定情報５入金予定日');
			sTitle.Add('入金予定情報５入金予定金額');
			sTitle.Add('入金予定情報６入金予定日');
			sTitle.Add('入金予定情報６入金予定金額');
			sTitle.Add('入金予定情報７入金予定日');
			sTitle.Add('入金予定情報７入金予定金額');
			sTitle.Add('入金予定情報８入金予定日');
			sTitle.Add('入金予定情報８入金予定金額');
			sTitle.Add('入金予定情報９入金予定日');
			sTitle.Add('入金予定情報９入金予定金額');
			sTitle.Add('入金予定情報１０入金予定日');
			sTitle.Add('入金予定情報１０入金予定金額');
			sTitle.Add('合計契約金額');
			sTitle.Add('合計消費税額');
			sTitle.Add('合計入金予定金額');

			sMemFld.Add('GCode');
			sMemFld.Add('RenChar');
			sMemFld.Add('LongName');
			sMemFld.Add('SimpleName');
			//sMemFld.Add('FusenCmt');
			sMemFld.Add('ZipCode1');
			sMemFld.Add('ZipCode2');
			sMemFld.Add('Address1');
			sMemFld.Add('Address2');
			sMemFld.Add('TelNo');
			sMemFld.Add('PersonNCode');
			sMemFld.Add('PersonCodeName');
			sMemFld.Add('CostomerNCode');
			sMemFld.Add('CostomerCodeName');
			sMemFld.Add('CostomerName');
			sMemFld.Add('RootKbn');
			sMemFld.Add('RootKbnName');
			sMemFld.Add('BmnNCode');
			sMemFld.Add('BmnCodeName');
//			sMemFld.Add('StartDate');
//			sMemFld.Add('ScheduleDate');
			sMemFld.Add('FinishDate');
			sMemFld.Add('SalesBase');
			sMemFld.Add('SalesBaseName');
			sMemFld.Add('HaifuKbn');
			sMemFld.Add('HaifuKbnName');
			sMemFld.Add('MoveKbn');
			sMemFld.Add('MoveKbnName');
			sMemFld.Add('UpDateTime');

			sMemFld.Add('ContDateK1');
			sMemFld.Add('ContNoK1');
			sMemFld.Add('ContMoneyK1');
			sMemFld.Add('Tax_RateK1');
			sMemFld.Add('Sales_TaxK1');

			sMemFld.Add('ContDateK2');
			sMemFld.Add('ContNoK2');
			sMemFld.Add('ContMoneyK2');
			sMemFld.Add('Tax_RateK2');
			sMemFld.Add('Sales_TaxK2');

			sMemFld.Add('ContDateK3');
			sMemFld.Add('ContNoK3');
			sMemFld.Add('ContMoneyK3');
			sMemFld.Add('Tax_RateK3');
			sMemFld.Add('Sales_TaxK3');

			sMemFld.Add('ContDateK4');
			sMemFld.Add('ContNoK4');
			sMemFld.Add('ContMoneyK4');
			sMemFld.Add('Tax_RateK4');
			sMemFld.Add('Sales_TaxK4');

			sMemFld.Add('ContDateK5');
			sMemFld.Add('ContNoK5');
			sMemFld.Add('ContMoneyK5');
			sMemFld.Add('Tax_RateK5');
			sMemFld.Add('Sales_TaxK5');

			sMemFld.Add('ContDateK6');
			sMemFld.Add('ContNoK6');
			sMemFld.Add('ContMoneyK6');
			sMemFld.Add('Tax_RateK6');
			sMemFld.Add('Sales_TaxK6');

			sMemFld.Add('ContDateK7');
			sMemFld.Add('ContNoK7');
			sMemFld.Add('ContMoneyK7');
			sMemFld.Add('Tax_RateK7');
			sMemFld.Add('Sales_TaxK7');

			sMemFld.Add('ContDateK8');
			sMemFld.Add('ContNoK8');
			sMemFld.Add('ContMoneyK8');
			sMemFld.Add('Tax_RateK8');
			sMemFld.Add('Sales_TaxK8');

			sMemFld.Add('ContDateN1');
			sMemFld.Add('ContMoneyN1');

			sMemFld.Add('ContDateN2');
			sMemFld.Add('ContMoneyN2');

			sMemFld.Add('ContDateN3');
			sMemFld.Add('ContMoneyN3');

			sMemFld.Add('ContDateN4');
			sMemFld.Add('ContMoneyN4');

			sMemFld.Add('ContDateN5');
			sMemFld.Add('ContMoneyN5');

			sMemFld.Add('ContDateN6');
			sMemFld.Add('ContMoneyN6');

			sMemFld.Add('ContDateN7');
			sMemFld.Add('ContMoneyN7');

			sMemFld.Add('ContDateN8');
			sMemFld.Add('ContMoneyN8');

			sMemFld.Add('ContDateN9');
			sMemFld.Add('ContMoneyN9');

			sMemFld.Add('ContDateN10');
			sMemFld.Add('ContMoneyN10');

			sMemFld.Add('KeiyakuG');
			sMemFld.Add('ShohiG');
			sMemFld.Add('NyukinG');
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	ｽﾄｱﾄﾞのSQL文作成
//*		Name		:	H.Endo
//*		Date		:	2001/2/15
//*		Parameter	:	TAN_CD		:	担当者ｺｰﾄﾞ
//*						TAN_NAME	:	担当者名
//*						FLAG		:	担当者選択なし(-1以外:true/-1:false)
//*		Return		:	作成したSQL文
//*		History		:   <131>担当者内部ｺｰﾄﾞを渡す
//**********************************************************************
//function TJNTCRP018001f.MakeSQL(TAN_CD: Integer; TAN_NAME: String; FLAG: Boolean; Proc : Integer):String;
(*
function TJNTCRP018001f.MakeSQL(TAN_CD: Extended; FLAG: Boolean; Proc : Integer):String;
var
	sSQL		:	String;
//	sTanCD		:	String;                                     // <131>削除
begin
	case Proc of
		1:														// 初期処理
		begin
//			sTanCD		:=	IntToStr(TAN_CD);                   // <131>削除
			sSQL	:=	'CALL MP200010(0';
			if (FLAG) then		//	担当者選択なし
			begin
// <131>↓
//				sSQL	:=	sSQL	+ ',:TANCD,:TANNAME'
				sSQL	:=	sSQL	+ ',:TANCD'
// <131>↑
//				sSQL	:=	sSQL	+ ','
//									+ ''+ sTanCD + ','
//									+ ''''+ TAN_NAME + '''';
			end;
			sSQL	:=	sSQL + ')';
		end;
		2:														// 諸口存在チェック
		begin
			sSQL	:=	'CALL MP200010_GetSyokuchi(510);';
		end;
		3:														// 最大内部コードの取得
		begin
			sSQL	:=	'CALL MP200010_GetMaxNCode(''HojyoMA'');';
		end;
		4:														// 終了処理
		begin
			sSQL	:=	'CALL MP200010(1);';
		end;
	end;

	Result	:=	sSQL;
end;
*)

{
function TJNTCRP018001f.fnMakeSQL(nType: Integer): String;
var
	sSQL : String;
begin

    sSQL := '';
	case nType of
        1:  sSQL := 'CALL MP200010(0, :TANCD)';     // 履歴ｽﾄｱﾄﾞの開始
 	    2:	sSQL :=	'CALL MP200010(1)';             // 履歴ｽﾄｱﾄﾞの終了
        10: sSQL := 'CALL MP200011(0, :SEGCD)';     // ｸﾞﾙｰﾌﾟ管理ｽﾄｱﾄﾞの開始
	    20:	sSQL :=	'CALL MP200011(1)';             // ｸﾞﾙｰﾌﾟ管理ｽﾄｱﾄﾞの終了
    end;

	Result := sSQL;

end;
}

//**********************************************************************
//*		Proccess	:	ｴﾗｰﾒｯｾｰｼﾞ表示処理
//*		Name		:	H.Endo
//*		Date		:	2001/2/16
//*		Parameter	:	DmQuery		:	ｴﾗｰになったQuery
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP018001f.ErrorMessageDsp(DmQuery: TMQuery);
begin
	case ComArea.m_MsgStd.GetDBCode(DmQuery) of
		1:
		begin
			//	最大登録件数をｵｰﾊﾞｰしました
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 0,1);
			MjsMessageBoxEx(Self,MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		2:
		begin
			//	･･･のため削除できません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,5);
			MjsMessageBoxEx(Self,'固定体系区分が固定' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		3:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'子供が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		4:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'仕訳が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
//--- 追加 START -----
		5:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
// <291> MOD st
//			MjsMessageBoxEx(Self,'諸口、総合計を削除する時にその他のマスタが登録済みの為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
			MjsMessageBoxEx(Self,'諸口、総合計を削除する時にその他のマスターが登録済みの為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
// <291> MOD ed
		end;
		6:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'支払予定データが存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		7:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'部署情報が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
		8:
		begin
			//	･･･することができません
			ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
			MjsMessageBoxEx(Self,'未連結仕訳(部署or分散)が存在する為削除' + MjsMsgRec.sMsg, MjsMsgRec.sTitle,MjsMsgRec.icontype , MjsMsgRec.btntype , MjsMsgRec.btndef,MJsMsgRec.LogType);
		end;
//--- 追加  END  -----
// <166> ↓
        -193, -196:
        begin
            // 重複ｴﾗｰ
            ComArea.m_MsgStd.GetMsg ( MjsMsgRec, 10000, 10017 );
			MjsMessageBoxEx(Self, MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, false );
        end;
        -210:
        begin
            // ﾛｯｸｴﾗｰ
            ComArea.m_MsgStd.GetMsg ( MjsMsgRec, 10000, 10016 );
			MjsMessageBoxEx(Self, MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, false );
        end;
// <166> ↑
		else
		begin
			ComArea.m_MsgStd.GetMsgDB( MjsMsgRec, DmQuery );
			MjsMessageBoxEx(Self, MjsMsgRec.sMsg, MjsMsgRec.sTitle, MjsMsgRec.icontype, MjsMsgRec.btntype, MjsMsgRec.btndef, false );
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	Jituzai_ChkBox_TokusyuClickｲﾍﾞﾝﾄ
//*		Name		:	N.Nabe
//*		Date		:	2001/2/27
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_ChkBox_TokusyuClick(Sender: TObject);
var
	strGCode	:	String;
begin
	if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		strGCode	:= JHojyoMA_DMemDataGCode.AsString
	else
	begin
		if JHojyoMA_DMemDataGCode.AsString <> '' then
			strGCode	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
		else
			strGCode	:= '';
	end;

	if (Jituzai_ChkBox_Tokusyu.Checked = false) and (giTokusyuFlg = 0) then
	begin
		// <173>if strGCode = MasterInfo_DMemDataSpHojyoCd1.AsString then
        if ( JHojyoMA_DMemDataNCode.AsFloat = MasterInfo_DMemDataSpHojyoNCd1.AsFloat ) then
		begin
			MjsMessageBoxEx(Self,'特殊工事の設定解除は，他の工事を特殊工事に'#13#10'設定することにより自動的に行われます。'#13#10'特殊工事は，必ず１件の工事に対して設定する'#13#10'ことが必要です。', '特殊工事',mjWarning, mjOk, mjDefOk, false );
			Jituzai_ChkBox_Tokusyu.Checked := true;
		end;
	end;

    // <126>↓
    if (m_EdtSw = false) then
        m_EdtSw := true;                    // 変更ﾌﾗｸﾞON
    // <126>↑

end;

//**************************************************************************
//	Proccess  :	ｸｴﾘｰでﾃﾞｰﾀ読み込み
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 28
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.LookUpDataSet();
var
	iLoop: Integer;
    oTaxRates : TDIC_COTXRATEList;  //<TAX> ADD
begin
	ListMemTax_Rate.close;
	ListMemTax_Rate.Open;
//<TAX> MOD St
    oTaxRates := moBusiness.TaxRates;
    for iLoop := 0 to oTaxRates.Count -1 do
    begin
		ListMemTax_Rate.Append;
        ListMemTax_Rate.FieldByName('iCode').AsInteger := oTaxRates[iLoop].RateCD;        
        ListMemTax_Rate.FieldByName('iName').AsString :=
            IfThen(m_iAccProKbn = 0, '', oTaxRates[iLoop].TaxName);
        ListMemTax_Rate.Post;
    end;
{
//	for iLoop := 0 to 3 do
	for iLoop := 0 to 4 do	// <201>
	begin
		ListMemTax_Rate.Append;
// <201> ↓↓↓
//		if iLoop = 3 then
//			ListMemTax_Rate.FieldByName('iCode').AsInteger := 9
		if 		iLoop = 4 then
			ListMemTax_Rate.FieldByName('iCode').AsInteger := 9
		else if iLoop = 3 then
			ListMemTax_Rate.FieldByName('iCode').AsInteger := 8
// <201> ↑↑↑
		else
			ListMemTax_Rate.FieldByName('iCode').AsInteger := iLoop;
		if m_iAccProKbn = 0 then
			ListMemTax_Rate.FieldByName('iName').AsString := ''
		else
			ListMemTax_Rate.FieldByName('iName').AsString := sTax[iLoop];

		ListMemTax_Rate.Post;
	end;
}
//<TAX> MOD Ed
//	Jituzai_DdxDBGrid_KeiTax_Rate.DropDownRows := 4;
//<TAX> DEL	Jituzai_DdxDBGrid_KeiTax_Rate.DropDownRows := 5;	// <201>
    Jituzai_DdxDBGrid_KeiTax_Rate.DropDownRows := oTaxRates.Count;  //<TAX> ADD
//	Goukei_DdxDBGrid_KeiTax_Rate.DropDownRows := 4;
//<TAX> DEL	Goukei_DdxDBGrid_KeiTax_Rate.DropDownRows := 5;		// <201>
    Goukei_DdxDBGrid_KeiTax_Rate.DropDownRows := oTaxRates.Count;  //<TAX> ADD
//<TAX> MOD St
// <SEI> ADD start
//	Jituzai_DdxDBGrid_SeikyuTax_Rate.DropDownRows := 5;
//	Goukei_DdxDBGrid_SeikyuTax_Rate.DropDownRows := 5;
// <SEI> ADD end
	Jituzai_DdxDBGrid_SeikyuTax_Rate.DropDownRows := oTaxRates.Count;
	Goukei_DdxDBGrid_SeikyuTax_Rate.DropDownRows := oTaxRates.Count;
//<TAX> MOD Ed
	if ListMemTax_Rate.RecordCount <> 0 then
		ListMemTax_Rate.First;
end;

//**************************************************************************
//	Proccess  :	Jituzai_DdxDBGrid_KeiMouseDownｲﾍﾞﾝﾄ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 28
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
	iFocus	:	Integer;
begin

	iFocus := Jituzai_DdxDBGrid_Kei.FocusedColumn;					// ﾌｫｰｶｽ位置

	case iFocus of
		COL_KEINEN:
		begin
		end;
		COL_KEINO:
		begin
		end;
		COL_KEIKIN:
		begin
		end;
		COL_ZEIRITU:
		begin
			if m_iAccProKbn = 0 then
			begin
				Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
				abort;
				exit;
			end;
		end;
		COL_ZEIRITUNAME,
        COL_ZEIRITUNAME2:  //<TAX> ADD
		begin
			if m_iAccProKbn = 0 then
			begin
				Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
				abort;
				exit;
			end
			else
			begin
				Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_ZEIRITU;
				abort;
				exit;
			end;
		end;
		COL_ZEIGAKU:
		begin
			if m_iAccProKbn = 0 then
			begin
				Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
				abort;
				exit;
			end;
		end;
	end;

end;

//**************************************************************************
//	Proccess  :	Goukei_DdxDBGrid_KeiMouseDownｲﾍﾞﾝﾄ
//	Name	  :	N.Nabe
//	Date	  :	2000/ 08 / 28
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
	iFocus	:	Integer;
begin
	iFocus := Goukei_DdxDBGrid_Kei.FocusedColumn;					// ﾌｫｰｶｽ位置

	case iFocus of
		COL_KEINEN:
		begin
		end;
		COL_KEINO:
		begin
		end;
		COL_KEIKIN:
		begin
		end;
		COL_ZEIRITU:
		begin
			if m_iAccProKbn = 0 then
			begin
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
				abort;
				exit;
			end;
		end;
		COL_ZEIRITUNAME,
        COL_ZEIRITUNAME2: //<TAX> ADD
		begin
			if m_iAccProKbn = 0 then
			begin
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
				abort;
				exit;
			end
			else
			begin
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_ZEIRITU;
				abort;
				exit;
			end;
		end;
		COL_ZEIGAKU:
		begin
			if m_iAccProKbn = 0 then
			begin
				Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
				abort;
				exit;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	参照・更新時のｺﾝﾎﾟｰﾈﾝﾄ制御処理
//*		Name		:	N.Nabe
//*		Date		:	2001/2/2
//*		Parameter	:	Select		:	REFER(参照)･NORMAL(通常処理)･BASICONLY(基本のみ設定可能)
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP018001f.DisplayControl(Select: Integer);
begin
	case Select of
		REFER:
		begin
			//	実在Grid
			Jituzai_DdxDBGrid.Options	:=	Jituzai_DdxDBGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
			Jituzai_DdxDBGridFusen.ReadOnly			:= true;
			Jituzai_DdxDBGridGCode.ReadOnly			:= true;
			Jituzai_DdxDBGridRenChar.ReadOnly		:= true;
			Jituzai_DdxDBGridLongName.ReadOnly		:= true;
			Jituzai_DdxDBGridSimpleName.ReadOnly	:= true;

			//	合計Grid
			Goukei_DdxDBGrid.Options	:=	Goukei_DdxDBGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
			Goukei_DdxDBGridFusen.ReadOnly			:= true;
			Goukei_DdxDBGridGCode.ReadOnly			:= true;
			Goukei_DdxDBGridRenChar.ReadOnly		:= true;
			Goukei_DdxDBGridLongName.ReadOnly		:= true;
			Goukei_DdxDBGridSimpleName.ReadOnly		:= true;

//<KSN> ADD St
            Kasan_Child_DBGridGCode.ReadOnly        := True;
			Kasan_Child_DBGrid.Options	:=	Kasan_Child_DBGrid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
            Kasan_Child_DBGrid.OnStartDrag := nil;
            Kasan_Child_DBGrid.OnDragDrop := nil;
            Kasan_Child_DBGrid.OnDragOver := nil;
//<KSN> ADD Ed

			BSpeedButtonDel.Enabled	:=	false;

			BSpeedButtonSort.Visible:=	false;
//			btnFusenCtl.Visible := false;
//			LVStyleBar.Visible  := false;
			VTreeView.DragMode	:=	dmManual;
//			VTreeView.PopupMenu	:=	nil;

//			Jituzai_DdxDBGrid.PopupMenu	:=	nil;
//			Goukei_DdxDBGrid.PopupMenu	:=	nil;

			SyosaiControl();								// 詳細画面設定
		end;
		NORMAL:
		begin
			//	実在Grid
			Jituzai_DdxDBGrid.Options	:=	Jituzai_DdxDBGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
			Jituzai_DdxDBGridFusen.ReadOnly			:= false;
			Jituzai_DdxDBGridGCode.ReadOnly			:= false;
			Jituzai_DdxDBGridRenChar.ReadOnly		:= false;
			Jituzai_DdxDBGridLongName.ReadOnly		:= false;
			Jituzai_DdxDBGridSimpleName.ReadOnly	:= false;

			//	合計Grid
			Goukei_DdxDBGrid.Options	:=	Goukei_DdxDBGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
			Goukei_DdxDBGridFusen.ReadOnly			:= false;
			Goukei_DdxDBGridGCode.ReadOnly			:= false;
			Goukei_DdxDBGridRenChar.ReadOnly		:= false;
			Goukei_DdxDBGridLongName.ReadOnly		:= false;
			Goukei_DdxDBGridSimpleName.ReadOnly		:= false;

            Kasan_Child_DBGridGCode.ReadOnly        := False;  //<KSN> ADD

			BSpeedButtonDel.Enabled	:=	false;

//<MLXDEP>
			if not (TMSeries.IsMjsLink3) then
				BSpeedButtonSort.Visible:=	true;
//<MLXDEP>

			btnFusenCtl.Visible := true;
			LVStyleBar.Visible := true;
			VTreeView.DragMode	:=	dmAutomatic;
			VTreeView.PopupMenu	:=	PMKasantaikei;

			Jituzai_DdxDBGrid.PopupMenu	:=	PMKouji;
			Goukei_DdxDBGrid.PopupMenu	:=	PMKouji;
		end;
		BASICONLY:
		begin
			//	実在Grid
			Jituzai_DdxDBGrid.Options	:=	Jituzai_DdxDBGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
			Jituzai_DdxDBGridFusen.ReadOnly			:= false;
			Jituzai_DdxDBGridGCode.ReadOnly			:= false;
			Jituzai_DdxDBGridRenChar.ReadOnly		:= false;
			Jituzai_DdxDBGridLongName.ReadOnly		:= false;
			Jituzai_DdxDBGridSimpleName.ReadOnly	:= false;

			//	合計Grid
			Goukei_DdxDBGrid.Options	:=	Goukei_DdxDBGrid.Options + [egoCanAppend] - [egoMultiSelect] - [egoRowSelect];
			Goukei_DdxDBGridFusen.ReadOnly			:= false;
			Goukei_DdxDBGridGCode.ReadOnly			:= false;
			Goukei_DdxDBGridRenChar.ReadOnly		:= false;
			Goukei_DdxDBGridLongName.ReadOnly		:= false;
			Goukei_DdxDBGridSimpleName.ReadOnly		:= false;

            Kasan_Child_DBGridGCode.ReadOnly        := False;  //<KSN> ADD

			BSpeedButtonDel.Enabled	:=	false;
			BSpeedButtonIS.Enabled	:=	false;

//<MLXDEP>
			if not (TMSeries.IsMjsLink3) then
				BSpeedButtonSort.Visible:=	true;
//<MLXDEP>

			btnFusenCtl.Visible := true;
			LVStyleBar.Visible := true;
			VTreeView.DragMode	:=	dmAutomatic;
			VTreeView.PopupMenu	:=	PMKasantaikei;

			Jituzai_DdxDBGrid.PopupMenu	:=	PMKouji;
			Goukei_DdxDBGrid.PopupMenu	:=	PMKouji;

			SyosaiControl();								// 詳細画面設定
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	詳細参照制御処理
//*		Name		:	H.Endo
//*		Date		:	2000/12/19
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
procedure TJNTCRP018001f.SyosaiControl();
begin

//	参照
	//	実在
    Jituzai_PPanel_Card_1.Enabled := false;
	//	基本情報
    Jituzai_PPanel_Kihon.Enabled  := false;
	//	工事
    Jituzai_PPanel_Koji.Enabled   := false;
	//	その他
    Jituzai_PPanel_Sonota.Enabled   := false;
	// 完成工事振替
    dxKanseiGid.Options	:=	dxKanseiGid.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
	// 契約情報
	Jituzai_DdxDBGrid_Kei.Options	:=	Jituzai_DdxDBGrid_Kei.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
	Jituzai_DdxDBGrid_KeiContDate.ReadOnly		:= true;
	Jituzai_DdxDBGrid_KeiContNo.ReadOnly		:= true;
	Jituzai_DdxDBGrid_KeiContMoney.ReadOnly		:= true;
	Jituzai_DdxDBGrid_KeiDummyTax_Rate.ReadOnly	:= true;
	Jituzai_DdxDBGrid_KeiTax_Rate.ReadOnly		:= true;
	Jituzai_DdxDBGrid_KeiTax_RateName.ReadOnly	:= true;
	Jituzai_DdxDBGrid_KeiSales_Tax.ReadOnly		:= true;
// <212> ADD start
    Jituzai_DdxDBGrid_KeiCostomerCode.ReadOnly	:= true;
    Jituzai_DdxDBGrid_KeiCostomerName.ReadOnly	:= true;
// <212> ADD end
	// 入金情報
	Jituzai_DdxDBGrid_Nyu.Options	:=	Jituzai_DdxDBGrid_Nyu.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
	Jituzai_DdxDBGrid_NyuContDate.ReadOnly		:= true;
	Jituzai_DdxDBGrid_NyuContMoney.ReadOnly		:= true;
// <212> ADD start
    Jituzai_DdxDBGrid_NyuCostomerCode.ReadOnly  := true;
    Jituzai_DdxDBGrid_NyuCostomerName.ReadOnly  := true;
// <212> ADD end

    // 備考
    Jituzai_PPanel_Bikou.Enabled   := false;

	Jituzai_BBitBtn_Ok.Enabled				:= false;
// <236> Jituzai_BBitBtn_Cancel.Enabled			:= false;

	//	合計
    Goukei_PPanel_Card_1.Enabled := false;
	//	基本情報
    Goukei_PPanel_Kihon.Enabled := false;
	//	工事
    Goukei_PPanel_Koji.Enabled   := false;
	// 契約情報
	Goukei_DdxDBGrid_Kei.Options	:=	Jituzai_DdxDBGrid_Kei.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
	Goukei_DdxDBGrid_KeiContDate.ReadOnly		:= true;
	Goukei_DdxDBGrid_KeiContNo.ReadOnly			:= true;
	Goukei_DdxDBGrid_KeiContMoney.ReadOnly		:= true;
	Goukei_DdxDBGrid_KeiDummyTax_Rate.ReadOnly	:= true;
	Goukei_DdxDBGrid_KeiTax_Rate.ReadOnly		:= true;
	Goukei_DdxDBGrid_KeiTax_RateName.ReadOnly	:= true;
	Goukei_DdxDBGrid_KeiSales_Tax.ReadOnly		:= true;
// <212> ADD start
    Goukei_DdxDBGrid_KeiCostomerCode.ReadOnly	:= true;
    Goukei_DdxDBGrid_KeiCostomerName.ReadOnly	:= true;
// <212> ADD end
	// 入金情報
	Goukei_DdxDBGrid_Nyu.Options	:=	Jituzai_DdxDBGrid_Nyu.Options - [egoCanAppend] + [egoMultiSelect] + [egoRowSelect];
	Goukei_DdxDBGrid_NyuContDate.ReadOnly		:= true;
	Goukei_DdxDBGrid_NyuContMoney.ReadOnly		:= true;
// <212> ADD start
    Goukei_DdxDBGrid_NyuCostomerGCode.ReadOnly	:= true;
    Goukei_DdxDBGrid_NyuCostomerName.ReadOnly	:= true;
// <212> ADD end

    // 備考
    Goukei_PPanel_Bikou.Enabled   := false;

	Goukei_BBitBtn_Ok.Enabled				:= false;
// <236>	Goukei_BBitBtn_Cancel.Enabled			:= false;
end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChangeNodeEx
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGridChangeNodeEx(Sender: TObject);
var
    lvFlg : Boolean;
begin
// <193> DEL start
(*
	if giReferFlag = REFER then
		exit;
*)
// <193> DEL end

	if m_AcControl = VTreeView then
		exit;

	if MemPost_Sw = 1 then
		exit;

	if gbTreeClick = true then
		exit;

// <193> ADD start
   	if giReferFlag = REFER then  			// 決算確定時
    begin                                  	// 実在GridのｺｰﾄﾞがNullの時
    	if JHojyoMA_DMemData.FieldByName('GCode').IsNull then
		begin
        	btnFusenCtl.Enabled := False;
            LVStyleBar.Enabled := false;
// <198> ADD start
            if not m_cJNTArea.IsDelete then	// 削除権限なしの場合
            begin
            	TPDelete.Enabled        := false;
             	BSpeedButtonDel.Enabled := false;
            end;
// <198> ADD end

        end
        else
        begin
        	btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
            LVStyleBar.Enabled := m_cJNTArea.IsFusen;

// <198> ADD start                    		// ﾃﾞｰﾀ挿入中？
          	if JHojyoMA_DMemData.State in [dsInsert] then
            begin
            	TPDelete.Enabled        := false;
             	BSpeedButtonDel.Enabled := false;
            end
            else
            begin
            								// 削除権限なしの場合
                if not m_cJNTArea.IsDelete then
                begin
                 	BSpeedButtonDel.Enabled := false;
                    TPDelete.Enabled        := false;
                end
                else
                begin                    	// 実在Gridのｺｰﾄﾞが諸口の時
                	if JHojyoMA_DMemData.FieldByName('Syokuchikbn').AsInteger = 1 then
                    begin
                     	BSpeedButtonDel.Enabled := fnRecordCount();
                        TPDelete.Enabled        := BSpeedButtonDel.Enabled;
                    end
                    else
                    begin
                		lvFlg := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));
                    	BSpeedButtonDel.Enabled := lvFlg;
                        TPDelete.Enabled        := lvFlg;
                    end;
                end;
            end;
// <198> ADD end


        end;
        Exit;
    end;
// <193> ADD end


	if (JHojyoMA_DMemData.FieldByName('GCode').IsNull) then	//	実在GridのｺｰﾄﾞがNullの時
	begin
		BSpeedButtonDel.Enabled := false;
		TPDelete.Enabled        := false;
		GFBlue.Enabled          := false;
		GFGreen.Enabled         := false;
		GFOrange.Enabled        := false;
		GFRed.Enabled           := false;
		btnFusenCtl.Enabled     := false;
		LVStyleBar.Enabled      := false;

		Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;	//	ﾌｫｰｶｽのｶﾗﾑ位置を指定
	end
	else
	begin
		if JHojyoMA_DMemData.State in [dsInsert] then	// ﾃﾞｰﾀ挿入中？
		begin
			BSpeedButtonDel.Enabled := false;
			TPDelete.Enabled        := false;
			GFBlue.Enabled          := false;
			GFGreen.Enabled         := false;
			GFOrange.Enabled        := false;
			GFRed.Enabled           := false;
			btnFusenCtl.Enabled     := false;
			LVStyleBar.Enabled      := false;
		end
		else
		begin
            if m_cJNTArea.IsDelete = false then//削除権限を考慮する
            begin
				BSpeedButtonDel.Enabled := false;
                TPDelete.Enabled        := false;
            end
            else
            begin
                if JHojyoMA_DMemData.FieldByName('Syokuchikbn').AsInteger = 1 then	//	実在Gridのｺｰﾄﾞが諸口の時
                begin
                    BSpeedButtonDel.Enabled := fnRecordCount();
                    TPDelete.Enabled        := BSpeedButtonDel.Enabled;
                end
                else
                begin
// <137>
//                    lvFlg := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttr.AsInteger));
                    lvFlg := fnChildCount(fnGetNCODE(JHojyoMA_DMemData.FieldByName('GCode').asString,m_nMasterDivision,MasterInfo_DMemDataCodeAttr.AsInteger));
// <137>
                    BSpeedButtonDel.Enabled := lvFlg;
                    TPDelete.Enabled        := lvFlg;
                end;
            end;

			GFBlue.Enabled      := m_cJNTArea.IsFusen;
			GFGreen.Enabled     := m_cJNTArea.IsFusen;
			GFOrange.Enabled    := m_cJNTArea.IsFusen;
			GFRed.Enabled       := m_cJNTArea.IsFusen;
			btnFusenCtl.Enabled := m_cJNTArea.IsFusen;
			LVStyleBar.Enabled  := m_cJNTArea.IsFusen;
		end;
	end;

end;

//**************************************************************************
//	Component	:	Form
//	Event	    :	OnChangeNodeEx
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGridChangeNodeEx(Sender: TObject);
begin

// <198> DEL start
(*
	if giReferFlag = REFER then
		exit;
*)
// <198> DEL end


	if m_AcControl = VTreeView then
		exit;

	if MemPost_Sw = 1 then
		exit;

	if gbTreeClick = true then
		exit;

// <198> ADD start
	if giReferFlag = REFER then
    begin
        if not m_cJNTArea.IsDelete then 						// 削除権限なしの場合
        begin
        	Exit;
        end
        else                                                 	//	実在GridのｺｰﾄﾞがNullの時
        begin
         	if (GHojyoMA_DMemData.FieldByName('GCode').IsNull) then
            begin
            	BSpeedButtonDel.Enabled := false;
                TPDelete.Enabled        := false;
            end
            else
            begin
             	if GHojyoMA_DMemData.State in [dsInsert] then	// ﾃﾞｰﾀ挿入中？
            	begin
					BSpeedButtonDel.Enabled := false;
                    TPDelete.Enabled        := false;
                end
                else
                begin
                	BSpeedButtonDel.Enabled := true;
                    TPDelete.Enabled        := true;
                end;
            end;
		end;
        Exit;
    end;
// <198> ADD end


	if (GHojyoMA_DMemData.FieldByName('GCode').IsNull) then		//	実在GridのｺｰﾄﾞがNullの時
	begin
		BSpeedButtonDel.Enabled := false;
		TPDelete.Enabled        := false;
		GFBlue.Enabled          := false;
		GFGreen.Enabled         := false;
		GFOrange.Enabled        := false;
		GFRed.Enabled           := false;
		btnFusenCtl.Enabled     := false;
		LVStyleBar.Enabled      := false;

	end
	else
	begin
		if GHojyoMA_DMemData.State in [dsInsert] then	// ﾃﾞｰﾀ挿入中？
		begin
			BSpeedButtonDel.Enabled := false;
			TPDelete.Enabled        := false;
			GFBlue.Enabled          := false;
			GFGreen.Enabled         := false;
			GFOrange.Enabled        := false;
			GFRed.Enabled           := false;
			btnFusenCtl.Enabled     := false;
			LVStyleBar.Enabled      := false;
		end
		else
		begin
			BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;//削除権限を考慮する
			TPDelete.Enabled        := m_cJNTArea.IsDelete;//削除権限を考慮する
			GFBlue.Enabled          := m_cJNTArea.IsFusen;
			GFGreen.Enabled         := m_cJNTArea.IsFusen;
			GFOrange.Enabled        := m_cJNTArea.IsFusen;
			GFRed.Enabled           := m_cJNTArea.IsFusen;
			btnFusenCtl.Enabled     := m_cJNTArea.IsFusen;
			LVStyleBar.Enabled      := m_cJNTArea.IsFusen;
		end;
	end;

    Goukei_DdxDBGrid.FocusedColumn := COL_GCODE;	//	ﾌｫｰｶｽのｶﾗﾑ位置を指定

end;

//**********************************************************************
//*		Proccess	:	レコード件数取得処理
//*		Name		:	N.Nabe
//*		Date		:	2001/3/28
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP018001f.fnRecordCount():Boolean;
var
	QueryRead	:	TMQuery;
begin
	Result := false;

	QueryRead := TMQuery.Create( Self );						//	MQueryの構築
	MDataModule^.SetDBInfoToQuery( dbCorp_Select, QueryRead );		//	DBとMQueryの接続

	// 全レコード件数取得
	with QueryRead do
	begin
		try
			Close;											// 会社情報 Close
			SQL.Clear;										// SQL文 Clear
//<255> DEL			SQL.Add('SELECT Count(*) as Kensu FROM HojyoMA Where MasterKbn = :pMKBN and RDelKbn = 0');
			SQL.Add('SELECT Count(NCode) as Kensu FROM HojyoMA Where MasterKbn = :pMKBN and RDelKbn = 0');  //<255> ADD
            SetFld('pMKBN').asInteger := m_nMasterDivision;
			if not Open then
			begin
				ComArea.m_MsgStd.GetMsgDB(MjsMsgRec,QueryRead);
				MjsMessageBoxEx(Self,MjsMsgRec.sMsg,
								MjsMsgRec.sTitle,
								MjsMsgRec.icontype,
								MjsMsgRec.btntype,
								MjsMsgRec.btndef,
								MJsMsgRec.LogType);
				Exit;
			end;

			if GetFld('Kensu').AsInteger > 1 then
				Result := false
			else
				Result := true;
		finally
			Close;
			Free;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	変更確認
//*		Name		:	N.Nabe
//*		Date		:	2001/3/28
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP018001f.fnUpdateCheck(iSumKbn : Integer):Boolean;
var
	strGCode   : String;
    SpHojyoCd1 : String;    // 特殊工事外部ｺｰﾄﾞ<173>
    DmQuery    : TMQuery;
//    iCut,iCode : Integer;
    iDKbn      : Integer;   // <211>
    strSaveCode: String;	// <SEI> ADD
begin
	result := false;

	if iSumKbn = 0 then
	begin
	{実在工事}
		// 付箋情報SET
		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
		begin
			if Jituzai_ETEdit_GCode.Text <> '' then
			begin
				if Jituzai_ETEdit_GCode.Text <> JHojyoMA_DMemDataGCode.AsString then
					exit;
			end
			else
			begin
				result := true;
				exit;
			end;
		end
		else
		begin
			if Jituzai_ENEdit_GCode.Value = 0 then
			begin
				if Jituzai_ENEdit_GCode.InputFlag <> true then
				begin
					if JHojyoMA_DMemDataGCode.AsString <> '' then
					begin
						if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) <>
							Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.AsInteger)]) then
							exit;
					end
					else
						exit;
				end
				else
				begin
					result := true;
					exit;
				end;
			end
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
				begin
					if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))]) <>
						Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.AsInteger)]) then
						exit;
				end
				else
					exit;
			end;
		end;

		strGCode := JHojyoMA_DMemDataGCode.AsString;

		if Jituzai_ETEdit_RenChar.Text <> JHojyoMA_DMemDataRenChar.AsString then
			exit;

		if Jituzai_ETEdit_LongName.Text <> JHojyoMA_DMemDataLongName.AsString then
			exit;

		if Jituzai_ETEdit_SimpleName.Text <> JHojyoMA_DMemDataSimpleName.AsString then
			exit;

		if Jituzai_ENEdit_ZipCode1.Value <> JHojyoMA_DMemDataZipCode1.AsInteger then
			exit;

		if Jituzai_ENEdit_ZipCode2.Value <> JHojyoMA_DMemDataZipCode2.AsInteger then
			exit;

		if Jituzai_ETEdit_Address1.Text <> JHojyoMA_DMemDataAddress1.AsString then
			exit;

		if Jituzai_ETEdit_Address2.Text <> JHojyoMA_DMemDataAddress2.AsString then
			exit;

		if Jituzai_ETEdit_TelNo.Text <> JHojyoMA_DMemDataTelNo.AsString then
			exit;

        // 部門
		if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
		begin
			if Jituzai_ETEdit_BmnCode.Text <> JHojyoMA_DMemDataBmnCode.AsString then
				exit;
		end
		else
		begin
			if Jituzai_ENEdit_BmnCode.InputFlag <> true then
			begin
				if JHojyoMA_DMemDataBmnCode.AsString <> '' then
				begin
					if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataBmnCode.AsString))]) <>
						Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.AsInteger)]) then
						exit;
				end
				else
					exit;
			end
			else
			begin
				if JHojyoMA_DMemDataBmnCode.AsString <> '' then
					exit;
			end;
		end;

        // 社員
		if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
		begin
			if Jituzai_ETEdit_PersonCode.Text <> JHojyoMA_DMemDataPersonCode.AsString then
				exit;
		end
		else
		begin
			if Jituzai_ENEdit_PersonCode.InputFlag <> true then
			begin
				if JHojyoMA_DMemDataPersonCode.AsString <> '' then
				begin
					if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataPersonCode.AsString))]) <>
						Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.AsInteger)]) then
						exit;
				end
				else
					exit;
			end
			else
			begin
				if JHojyoMA_DMemDataPersonCode.AsString <> '' then
					exit;
			end;
		end;

        // <144>↓
        // 取引先
        if Jituzai_ETEdit_CustomerName.Visible <> true then
        begin
                                            // 文字ﾌﾘｰ
            if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
            begin
                if Jituzai_ETEdit_CustomerCode.Text <> JHojyoMA_DMemDataCostomerCode.AsString then
                    exit;
            end
            else                            // 数字
            begin
                if Jituzai_ENEdit_CustomerCode.InputFlag <> true then
                begin
                    if JHojyoMA_DMemDataCostomerCode.AsString <> '' then
                    begin
					    if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataCostomerCode.AsString))]) <>
						    Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.AsInteger)]) then
						    exit;
                    end
                    else
                        exit;
                end
                else
                begin
                    if JHojyoMA_DMemDataCostomerCode.AsString <> '' then
                        exit;
                end;
            end;
        end
        else                                // 受注先名称
        begin
            if Jituzai_ETEdit_CustomerName.Text <> JHojyoMA_DMemDataCostomerName.AsString then
                exit;
        end;
        // <144>↑

		if Jituzai_EDEdit_StartDate.Value = 0 then
		begin
			if Jituzai_EDEdit_StartDate.Value <> JHojyoMA_DMemDataStartDate.AsDateTime then
				exit;
		end
		else
		begin
			if Jituzai_EDEdit_StartDate.AsDateTime <> JHojyoMA_DMemDataStartDate.AsDateTime then
				exit;
		end;

		if Jituzai_EDEdit_EndDate.Value = 0 then
		begin
			if Jituzai_EDEdit_EndDate.Value <> JHojyoMA_DMemDataEndDate.AsDateTime then
				exit;
		end
		else
		begin
			if Jituzai_EDEdit_EndDate.AsDateTime <> JHojyoMA_DMemDataEndDate.AsDateTime then
				exit;
		end;

		if Jituzai_EDEdit_JStartDate.Value = 0 then
		begin
			if Jituzai_EDEdit_JStartDate.Value <> JHojyoMA_DMemDataJStartDate.AsDateTime then
				exit;
		end
		else
		begin
			if Jituzai_EDEdit_JStartDate.AsDateTime <> JHojyoMA_DMemDataJStartDate.AsDateTime then
				exit;
		end;

		if Jituzai_EDEdit_JEndDate.Value = 0 then
		begin
			if Jituzai_EDEdit_JEndDate.Value <> JHojyoMA_DMemDataJEndDate.AsDateTime then
				exit;
		end
		else
		begin
			if Jituzai_EDEdit_JEndDate.AsDateTime <> JHojyoMA_DMemDataJEndDate.AsDateTime then
				exit;
		end;

		if Jituzai_ENEdit_HaifuKbn.Enabled = true then
		begin
			if Jituzai_ENEdit_HaifuKbn.Value <> JHojyoMA_DMemDataHaifuKbn.AsInteger then
				exit;
		end;

		if Jituzai_ETEdit_BIKO.Enabled = true then
		begin
			if Jituzai_ETEdit_BIKO.Text <> JHojyoMA_DMemDataBIKO.AsString then
				exit;
		end;
// <SEI> ADD start
        // 請求先
        if Jituzai_LLabel_SeikyusakiNm.Visible = true then
        begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄ
        	strGCode := GetInputGCode(Jituzai_ETEdit_SeikyusakiCd,
            						Jituzai_ENEdit_SeikyusakiCd);
											// ｾｰﾌﾞしていた外部ｺｰﾄﾞをﾌｫｰﾏｯﾄ
            strSaveCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
                                    JHojyoMA_DMemDataSeikyusakiGCode.AsString);

			if strGCode <> strSaveCode then
			begin
				Exit;
			end;
        end;
        // 一括請求先工事
        if Jituzai_LLabel_SeikyuKoujiNm.Visible = true then
        begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄ
        	strGCode := GetInputGCode(Jituzai_ETEdit_SeikyuKoujiCd,
            						Jituzai_ENEdit_SeikyuKoujiCd);
											// ｾｰﾌﾞしていた外部ｺｰﾄﾞをﾌｫｰﾏｯﾄ
            strSaveCode := GetDBGCode(MasterInfo_DMemDataCodeAttr.AsInteger,
                                    JHojyoMA_DMemDataSeikyuKoujiGCode.AsString);

			if strGCode <> strSaveCode then
			begin
				Exit;
			end;
        end;
// <SEI> ADD end
// <205> ADD start

        // 施主
        if Jituzai_ENEdit_SeshuCode.Visible = true then
        begin
            if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
            begin
                if Jituzai_ETEdit_SeshuCode.Text <> JHojyoMA_DMemDataSesNCode.AsString then
                    exit;
            end
            else
            begin
                if Jituzai_ENEdit_SeshuCode.InputFlag <> true then
                begin
                    if JHojyoMA_DMemDataSesNCode.AsString <> '' then
                    begin
                        if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataSesNCode.AsString))]) <>
						    Format ('%.16d', [Trunc (Jituzai_ENEdit_SeshuCode.AsInteger)]) then
						        exit;
                    end
                    else
                        exit;

                end
                else
                begin
                    if JHojyoMA_DMemDataSesNCode.AsString <> '' then
                        exit;
                end;
            end;
        end;

        // 請負区分
        if Jituzai_ENEdit_UkeoiKbn.Visible = true then
        begin
            if Jituzai_ENEdit_UkeoiKbn.Value <> JHojyoMA_DMemDataUkeoiKbn.AsInteger then
                exit;
        end;

        // 施行部門
        if Jituzai_ETEdit_SekouBmnCode.Visible = true then
        begin
		    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
		    begin
			    if Jituzai_ETEdit_SekouBmnCode.Text <> JHojyoMA_DMemDataSekouBmnCode.AsString then
				    exit;
		    end
		    else
		    begin
			    if Jituzai_ENEdit_SekouBmnCode.InputFlag <> true then
			    begin
				    if JHojyoMA_DMemDataBmnCode.AsString <> '' then
				    begin
					    if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataSekouBmnCode.AsString))]) <>
						    Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouBmnCode.AsInteger)]) then
						        exit;
				    end
				    else
					    exit;
			    end
			    else
			    begin
				    if JHojyoMA_DMemDataSekouBmnCode.AsString <> '' then
					    exit;
			    end;
		    end;
        end;

        // 施行担当者
        if Jituzai_ETEdit_SekouPersonCode.Visible = true then
        begin
		    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
		    begin
			    if Jituzai_ETEdit_SekouPersonCode.Text <> JHojyoMA_DMemDataSekouPersonCode.AsString then
				    exit;
		    end
		    else
		    begin
			    if Jituzai_ENEdit_SekouPersonCode.InputFlag <> true then
			    begin
				    if JHojyoMA_DMemDataSekouPersonCode.AsString <> '' then
				    begin
					    if Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataSekouPersonCode.AsString))]) <>
						    Format ('%.16d', [Trunc (Jituzai_ENEdit_SekouPersonCode.AsInteger)]) then
						    exit;
				    end
				    else
					    exit;
			    end
			    else
			    begin
				    if JHojyoMA_DMemDataSekouPersonCode.AsString <> '' then
					    exit;
			    end;
		    end;
        end;

        // FAXNo
        if Jituzai_ETEdit_FaxNo.Visible = true then
        begin
            if Jituzai_ETEdit_FaxNo.Text <> JHojyoMA_DMemDataFAXNo.AsString then
                exit;
        end;

        // 概要
		if Jituzai_ETEdit_Gaiyou.Enabled = true then
		begin
			if Jituzai_ETEdit_Gaiyou.Text <> JHojyoMA_DMemDataGaiyou.AsString then
				exit;
		end;
// <205> ADD end




//		if Jituzai_ENEdit_BunCode.Value <> JHojyoMA_DMemDataBunCode.AsInteger then
//			exit;

//		if Jituzai_ENEdit_MoveKbn.Value  <> JHojyoMA_DMemDataMoveKbn.AsInteger then
//			exit;

        // <173> - ST
        SpHojyoCd1 := '';
	    DmQuery := TMQuery.Create( Self );
	    MDataModule^.SetDBInfoToQuery( dbCorp_Select, DmQuery );

        DmQuery.Close();
        DmQuery.SQL.Clear();
        DmQuery.SQL.Add('select GCode from HojyoMA  ');
        DmQuery.SQL.Add('where MasterKbn = :MstKbn  ');
        DmQuery.SQL.Add('  and RDelKbn   = 0        ');
        DmQuery.SQL.Add('  and NCode     = :NCode   ');
        DmQuery.ParamByName('MstKbn').AsInteger := m_nMasterDivision;
//<255> DEL        DmQuery.ParamByName('NCode' ).AsFloat   := MasterInfo_DMemDataSpHojyoNCd1.AsFloat;
        DmQuery.ParamByName('NCode' ).AsString   := MasterInfo_DMemDataSpHojyoNCd1.AsString;  //<255> ADD

        if ( DmQuery.Open = false ) then
        begin
            ErrorMessageDsp( DmQuery );
            DmQuery.Close();
			DmQuery.Free();
            Exit;
        end;

        if ( not DmQuery.Eof ) then
        begin
            SpHojyoCd1 := DmQuery.GetFld('GCode').AsString;
        end;
        // <173> - ED

		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then   // ﾌﾘｰ属性
		begin
			if Jituzai_ChkBox_Tokusyu.Checked = true then
			begin
				// <173>if MasterInfo_DMemDataSpHojyoCd1.AsString <> Jituzai_ETEdit_GCode.Text then Exit;
                if ( SpHojyoCd1 <> Jituzai_ETEdit_GCode.Text ) then Exit;   // <173>
			end
			else
			begin
				// <173>if MasterInfo_DMemDataSpHojyoCd1.AsString = Jituzai_ETEdit_GCode.Text then Exit;
                if ( SpHojyoCd1 = Jituzai_ETEdit_GCode.Text ) then Exit;    // <173>
			end;
		end
		else                                                // 数値属性
		begin
			if ( Jituzai_ChkBox_Tokusyu.Checked = true ) then
			begin
				// <173>if MasterInfo_DMemDataSpHojyoCd1.AsString <> Format ('%.16d', [Trunc(Jituzai_ENEdit_GCode.AsInteger)]) then Exit;
                if ( SpHojyoCd1 <> Format ('%.16d', [Trunc(Jituzai_ENEdit_GCode.AsInteger)]) ) then Exit;   // <173>
			end
			else
			begin
				// <173>if MasterInfo_DMemDataSpHojyoCd1.AsString = Format ('%.16d', [Trunc(Jituzai_ENEdit_GCode.AsInteger)]) then Exit;
                if ( SpHojyoCd1 = Format ('%.16d', [Trunc(Jituzai_ENEdit_GCode.AsInteger)]) ) then Exit;    // <173>
			end;
		end;

        if Jituzai_ENEdit_DetailKbn1.Enabled = true then
        begin
            if Jituzai_ENEdit_DetailKbn1.Value <> JHojyoMA_DMemDataDetailKbn1.AsInteger then
                exit;
        end;

        if Jituzai_ENEdit_SalesKmkCd.Enabled = true then
        begin
            if Jituzai_ENEdit_SalesKmkCd.InputFlag <> true then
            begin
                if JHojyoMA_DMemDataSalesKmkCd.AsInteger <> 0 then
                begin
                    if JHojyoMA_DMemDataSalesKmkCd.AsInteger <>	Jituzai_ENEdit_SalesKmkCd.AsInteger then
                        exit;
                end
                else
                    exit;
            end
            else
            begin
                if JHojyoMA_DMemDataSalesKmkCd.AsInteger <> 0 then
                    exit;
            end;
        end;

// <211> ADD start
        if Jituzai_ENEdit_KojKbn2.Enabled   = true then
        begin
            if m_DetailKbn2 = 9 then
                iDKbn := 1
            else
                iDKbn := 0;

            if Jituzai_ENEdit_KojKbn2.Value <> iDKbn then
                exit;
        end;
// <211> ADD end

        if Jituzai_ENEdit_DetailKbn2.Enabled = true then
        begin
            if Jituzai_ENEdit_DetailKbn2.Value <> JHojyoMA_DMemDataDetailKbn2.AsInteger then
                exit;
        end;

        if Jituzai_ENEdit_PartKbn.Enabled = true then
        begin
            if Jituzai_ENEdit_PartKbn.Value <> JHojyoMA_DMemDataPartKbn.AsInteger then
                exit;
        end;

        if Jituzai_ENEdit_PatternNo.Enabled = true then
        begin
            if Jituzai_ENEdit_PatternNo.InputFlag <> true then
            begin
                if JHojyoMA_DMemDataPatternNo.AsInteger <> 0 then
                begin
                    if JHojyoMA_DMemDataPatternNo.AsInteger <>	Jituzai_ENEdit_PatternNo.AsInteger then
                        exit;
                end
                else
                    exit;
            end
            else
            begin
                if JHojyoMA_DMemDataPatternNo.AsInteger <> 0 then
                    exit;
            end;
        end;
    end;

	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if strGCode <> '' then
			strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
	end;

	{KojiInfo2 check}
	if not fnkeiyakuCheck (JHojyoMA_DMemDataNCode.AsFloat, iSumKbn) then					// 契約情報
		exit;

	if not fnNyukinCheck(JHojyoMA_DMemDataNCode.AsFloat, iSumKbn) then					// 入金情報
		exit;

	result := true;
end;

//**********************************************************************
//*		Proccess	:	登録内容確認
//*		Name		:	N.Nabe
//*		Date		:	2004/09/14
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP018001f.fnDataCheck(iSumKbn : Integer):Boolean;
var
	strGCode	: String;
	bOk			: Boolean;
	sAdr1		: String;
	sAdr2		: String;
	sZip		: String;
	iZip1		: Integer;
	iZip2		: Integer;
	iValue		: Int64;
	iCount		: Integer;
	i			: Integer;
	sValue		: String;
	iPos		: Integer;
	iMin		: Integer;
	iMax		: Integer;
	QueryRead	: TMQuery;
    iDKbn,
    iCheck   : Integer;     // <221>
    bHojyoMA_New  : Boolean;   //<257> ADD
    sWk         : String;  //<TAX> ADD
begin
	result := false;

	QueryRead := nil;
{<225> DEL St
//<155> - ST
// <WF>↓
                                            // WFから取り込んだ場合
// <214> MOD start
//    if (m_recSinseiKey.SwkForm > 0) and (m_recSinseiKey.OrgNo > 0) then
    if (m_recSinseiKey.SinForm > 0) and (m_recSinseiKey.OrgNo > 0) then
// <214> MOD end
    begin
        if not m_recOther.CanInsert then    // 画面にない項目のﾁｪｯｸでｴﾗｰだったら登録させない
        begin                               // 「申請書情報に誤りがある為登録できません。」
    		MjsMessageBoxEx(Self, MSG_WF_INPUTERR, '登録',mjWarning, mjOk, mjDefOk);
            Result := false;
            Exit;
        end;
    end;
// <WF>↑
//<155> - ED
<225> DEL Ed}
// <225> ADD start
    if (m_recFLWSinseiKey[0].SinForm > 0) and (m_recFLWSinseiKey[0].OrgNo > 0) then
    begin
        if not m_recOther.CanInsert then    // 画面にない項目のﾁｪｯｸでｴﾗｰだったら登録させない
        begin                               // 「申請書情報に誤りがある為登録できません。」
    		MjsMessageBoxEx(Self, MSG_WF_INPUTERR, '登録',mjWarning, mjOk, mjDefOk);
//            Result := false;
            Exit;
        end;
    end;
// <225> ADD end

//<257> ADD St
	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
		strGCode := Jituzai_ETEdit_GCode.Text
	else
		strGCode := Jituzai_ENEdit_GCode.Text;

    // 工事ﾃﾞｰﾀ読込 ﾚｺｰﾄﾞの存在ﾁｪｯｸ
    fnDataRead (strGCode, iSumKbn, 0);

    bHojyoMA_New		:=  HojyoMA_DMQuery.Eof;    // ture: 新規挿入 false: 追加更新
//<257> ADD Ed

	if iSumKbn = 0 then
	begin
//<155> - ST
	    //===================================================================
	    //ｺｰﾄﾞ
	    //===================================================================
	    if (Jituzai_ENEdit_GCode.Visible = true) then
	    begin
	        with Jituzai_ENEdit_GCode do
	        begin
	            if (m_AcControl.Name = Name) then
	            begin
	                if (InputFlag = true) then
	                begin
	                    if (Value = 0) then
	                    begin
//	                        Result := false;
	                        Abort;
    	                end;
    	            end;
        	    end;
	        end;
	    end
	    else
	    begin
	        with Jituzai_ETEdit_GCode do
	        begin
	            if (m_AcControl.Name = Name) then
	            begin
	                if (Text ='') then
	                begin
//	                    Result := false;
	                    Abort;
	                end;
	            end;
	        end;
	    end;
//<155> - ED
//<288> ADD St
        // 実在連想
        if (JNTSelXKanjiCheck(Jituzai_ETEdit_RenChar.Text)) then
        begin
            Beep;
            MjsMessageBoxEX(
                Self,
                MSG_CONTAINSKANJI,
                '登録',
                mjWarning,
                mjOk,
                mjDefOk);
            MjsSetFocus(Self,Jituzai_ETEdit_RenChar.Name);	// 元の場所に戻す
            Abort;
        end;
//<288> ADD Ed
	{実在工事}
		//　実在郵便番号
		if (Jituzai_ENEdit_ZipCode1.Value <> 0) and
		   (Jituzai_ENEdit_ZipCode2.Value <> 0) then
		begin
			if (Jituzai_ETEdit_Address1.Text = '') and		// 住所上段下段 未入力？
			   (Jituzai_ETEdit_Address2.Text = '') then
			begin
				iZip1 := Trunc(Jituzai_ENEdit_ZipCode1.Value);		// 基番 取得
				iZip2 := Trunc(Jituzai_ENEdit_ZipCode2.Value);		// 枝番 取得
				sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
				sAdr1 := '';
				sAdr2 := '';

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
				if iValue < 0 then
				begin
					Beep;
                    Jituzai_PMTab.Items.Selected := 1;
					MjsSetFocus(Self,Jituzai_ENEdit_ZipCode1.Name);	// 元の場所に戻す
					Abort;
				end;
			end;
		end;
//<288> ADD St
        // 実在電話番号
        if (JNTSelXKanjiCheck(Jituzai_ETEdit_TelNo.Text)) then
        begin
            Beep;
            MjsMessageBoxEX(
                Self,
                MSG_CONTAINSKANJI,
                '登録',
                mjWarning,
                mjOk,
                mjDefOk);
            try
                Jituzai_PMTab.Items.Selected := PAGE_KOJI;
            except
            end;
            MjsSetFocus(Self,Jituzai_ETEdit_TelNo.Name);	// 元の場所に戻す
            Abort;
        end;
        // 実在FAX番号
        if (JNTSelXKanjiCheck(Jituzai_ETEdit_FaxNo.Text)) then
        begin
            Beep;
            MjsMessageBoxEX(
                Self,
                MSG_CONTAINSKANJI,
                '登録',
                mjWarning,
                mjOk,
                mjDefOk);
            try
                Jituzai_PMTab.Items.Selected := PAGE_KOJI;
            except
            end;
            MjsSetFocus(Self,Jituzai_ETEdit_FaxNo.Name);	// 元の場所に戻す
            Abort;
        end;
//<288> ADD Ed
		try
			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

			// 実在担当者
			bOk := false;
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
			begin
				strGCode := Jituzai_ETEdit_PersonCode.Text;
				if strGCode = '' then
					bOk := true;
			end
			else
			begin
				if Jituzai_ENEdit_PersonCode.InputFlag = true then
					bOk := true;

				strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)]);
			end;

			if bOk = false then
			begin
				with QueryRead do
				begin

                    Close;
                    SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

					SetFld('strGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = true then
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                        begin
                            Jituzai_PMTab.Items.Selected := 0;
   							MjsSetFocus(Self,Jituzai_ETEdit_PersonCode.Name);	// 元の場所に戻す
       						Abort;
                        end
						else
                        begin
                            Jituzai_PMTab.Items.Selected := 0;
  							MjsSetFocus(Self,Jituzai_ENEdit_PersonCode.Name);	// 元の場所に戻す
       						Abort;
                        end;
					end;
				end;
			end;

			// 実在受注者
// モード切り替え
			if m_bModeChg = false then      // <144>復帰
			begin                           // <144>復帰
				bOk := false;
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
				begin
					strGCode := Jituzai_ETEdit_CustomerCode.Text;
					if strGCode = '' then
						bOk := true;
				end
				else
				begin
					if Jituzai_ENEdit_CustomerCode.InputFlag = true then
						bOk := true;

					strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)]);
				end;

				if bOk = false then
				begin
					with QueryRead do
					begin
						Close;

						SQL.Clear;							// ｸｴﾘの初期化
						// 取引先を外部ｺｰﾄﾞ昇順でGET
                        SQL.Add('select NMK from MTOKUI');
                        SQL.Add('where  GCode=:stGCode and RDelKbn=0');
						SetFld('stGCode').AsString := strGCode;
						Open;						// ｸｴﾘの開始

						if EOF = true then
						begin
							Beep;
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                            begin
                                if Jituzai_ETEdit_CustomerCode.Enabled then
                                begin
                                    Jituzai_PMTab.Items.Selected := 0;
    								MjsSetFocus(Self,Jituzai_ETEdit_CustomerCode.Name);	// 元の場所に戻す
            						Abort;
                                end;

                            end
							else
                            begin
                                if Jituzai_ENEdit_CustomerCode.Enabled then
                                begin
                                    Jituzai_PMTab.Items.Selected := 0;
    								MjsSetFocus(Self,Jituzai_ENEdit_CustomerCode.Name);	// 元の場所に戻す
            						Abort;
                                end;
                            end;
						end;
					end;
				end;
			end;                            // <144>復帰

			// 実在完成振替部門
			bOk := false;
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				strGCode := Jituzai_ETEdit_BmnCode.Text;
				if strGCode = '' then
					bOk := true;
			end
			else
			begin
				if Jituzai_ENEdit_BmnCode.InputFlag = true then
					bOk := true;

				strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)]);
			end;

			if bOk = false then
			begin
				with QueryRead do
				begin
					Close;

					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
                    SetFld('pMKBN').asInteger  := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = true then
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
                            if Jituzai_ETEdit_BmnCode.Enabled then
                            begin
                                Jituzai_PMTab.Items.Selected := 1;
    							MjsSetFocus(Self,Jituzai_ETEdit_BmnCode.Name);	// 元の場所に戻す
        						Abort;
                            end;
                        end
						else
                        begin
                            if Jituzai_ENEdit_BmnCode.Enabled then
                            begin
                                Jituzai_PMTab.Items.Selected := 1;
    							MjsSetFocus(Self,Jituzai_ENEdit_BmnCode.Name);	// 元の場所に戻す
        						Abort;
                            end;
                        end;
					end;
				end;
			end;

			// 実在計上基準・実在配賦区分
			iValue := Trunc(Jituzai_ENEdit_HaifuKbn.Value);
			iCount := Jituzai_ENEdit_HaifuKbn.SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc(Jituzai_ENEdit_HaifuKbn.MinValue);
			iMax   := Trunc(Jituzai_ENEdit_HaifuKbn.MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 1;
				MjsSetFocus(Self,Jituzai_ENEdit_HaifuKbn.Name);	// 元の場所に戻す
				Abort;
			end;

			if iCount <> 0 then
			begin
				bOk := false;
				for i := 0 to iCount-1 do
				begin
					sValue := Jituzai_ENEdit_HaifuKbn.SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);
					if iValue = StrToInt(sValue) then
					begin
						bOk := true;
						Break;
					end;
				end;

				if bOk = false then
				begin
					Beep;
                    Jituzai_PMTab.Items.Selected := 1;
					MjsSetFocus(Self,Jituzai_ENEdit_HaifuKbn.Name);	// 元の場所に戻す
					Abort;
				end;
			end;

            // 完成振替パターン
            iValue := Trunc(Jituzai_ENEdit_DetailKbn1.Value);
            iCount := Jituzai_ENEdit_DetailKbn1.SelectItems.Count;
            // 数値が入力可能範囲内か？
            iMin   := Trunc(Jituzai_ENEdit_DetailKbn1.MinValue);
            iMax   := Trunc(Jituzai_ENEdit_DetailKbn1.MaxValue);
            if (iValue < iMin) or (iValue > iMax) then
            begin
                Beep;
                Jituzai_PMTab.Items.Selected := 1;
                MjsSetFocus(Self,Jituzai_ENEdit_DetailKbn1.Name);	// 元の場所に戻す
                Abort;
            end;

            if iCount <> 0 then
            begin
                bOk := false;
                for i := 0 to iCount-1 do
                begin
                    sValue := Jituzai_ENEdit_DetailKbn1.SelectItems.Strings[i];
                    iPos   := MJSHanPos(':',sValue);
                    sValue := MJSHanCopy(sValue,1,iPos-1);
                    if iValue = StrToInt(sValue) then
                    begin
                        bOk := true;
                        Break;
                    end;
                end;

                if bOk = false then
                begin
                    Beep;
                    Jituzai_PMTab.Items.Selected := 1;
                    MjsSetFocus(Self,Jituzai_ENEdit_DetailKbn1.Name);	// 元の場所に戻す
                    Abort;
                end;
            end;

            // 売上計上科目コード
            if Jituzai_ENEdit_SalesKmkCd.AsInteger <> 0 then
            begin
                with QueryRead do
                begin
                    Close;

                    SQL.Clear;							// ｸｴﾘの初期化
                    // 科目を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select SimpleName from KmkMA');
                    SQL.Add('where MasterKbn=1 AND RDelKbn=0 AND SumKbn=0 AND GCode =:KMK and');
                    SQL.Add('GCode >=:KMK3 and GCode <=:KMK4');
                    SetFld('KMK').AsInteger := Jituzai_ENEdit_SalesKmkCd.AsInteger;
                    SetFld('KMK3').AsInteger := MasterInfo_DMemDataKmkCode3.AsInteger;
                    SetFld('KMK4').AsInteger := MasterInfo_DMemDataKmkCode4.AsInteger;
                    Open;						// ｸｴﾘの開始

                    if EOF = true then
                    begin
                        Beep;
                        Jituzai_PMTab.Items.Selected := 1;
                        MjsSetFocus(Self,Jituzai_ENEdit_SalesKmkCd.Name);	// 元の場所に戻す
                        Abort;
                    end;
                end;
            end;

            // 完成売上高相手勘定区分
            iValue := Trunc(Jituzai_ENEdit_DetailKbn2.Value);
            iCount := Jituzai_ENEdit_DetailKbn2.SelectItems.Count;
            // 数値が入力可能範囲内か？
            iMin   := Trunc(Jituzai_ENEdit_DetailKbn2.MinValue);
            iMax   := Trunc(Jituzai_ENEdit_DetailKbn2.MaxValue);
            if (iValue < iMin) or (iValue > iMax) then
            begin
                Beep;
                Jituzai_PMTab.Items.Selected := 1;
                MjsSetFocus(Self,Jituzai_ENEdit_DetailKbn2.Name);	// 元の場所に戻す
                Abort;
            end;

            if iCount <> 0 then
            begin
                bOk := false;
                for i := 0 to iCount-1 do
                begin
                    sValue := Jituzai_ENEdit_DetailKbn2.SelectItems.Strings[i];
                    iPos   := MJSHanPos(':',sValue);
                    sValue := MJSHanCopy(sValue,1,iPos-1);
                    if iValue = StrToInt(sValue) then
                    begin
                        if (iValue = 2) or
                            ((iValue = 0) and (MasterInfo_DMemDataMstrKbn5.AsInteger = 1)) then
                        begin
                            if MasterInfo_DMemDataKmkCode6.AsInteger <> 0 then
                            begin
                                bOk := true;
                                Break;
                            end
                            else
                            begin
                                Beep;
                                MjsMessageBoxEX(Self,'通過勘定が設定されていないため、完成売上高相手勘定区分を設定することができません。','登録',mjInformation, mjOk, mjDefOk);
                            end;
                        end
                        else
                        begin
                            bOk := true;
                            Break;
                        end;
                    end;
                end;

                if bOk = false then
                begin
                    Beep;
                    Jituzai_PMTab.Items.Selected := 1;
                    MjsSetFocus(Self,Jituzai_ENEdit_DetailKbn2.Name);	// 元の場所に戻す
                    Abort;
                end;
            end;

// <211> ADD Start
            // 売上高自動振替区分
            iValue := Trunc(Jituzai_ENEdit_KojKbn2.Value);
            iCount := Jituzai_ENEdit_KojKbn2.SelectItems.Count;
            // 数値が入力可能範囲内か？
            iMin   := Trunc(Jituzai_ENEdit_KojKbn2.MinValue);
            iMax   := Trunc(Jituzai_ENEdit_KojKbn2.MaxValue);
            if (iValue < iMin) or (iValue > iMax) then
            begin
                Beep;
                Jituzai_PMTab.Items.Selected := 1;
                MjsSetFocus(Self,Jituzai_ENEdit_KojKbn2.Name);	// 元の場所に戻す
                Abort;
            end;

            if iCount <> 0 then
            begin
                bOk := false;
                for i := 0 to iCount-1 do
                begin
                    sValue := Jituzai_ENEdit_KojKbn2.SelectItems.Strings[i];
                    iPos   := MJSHanPos(':',sValue);
                    sValue := MJSHanCopy(sValue,1,iPos-1);
                    if iValue = StrToInt(sValue) then
                    begin
                        bOk := true;
                        Break;
                    end;
                end;

                if bOk = false then
                begin
                    Beep;
                    Jituzai_PMTab.Items.Selected := 1;
                    MjsSetFocus(Self,Jituzai_ENEdit_KojKbn2.Name);	// 元の場所に戻す
                    Abort;
                end;
            end;
// <211> ADD End

// <221> ADD start
            if not bHojyoMA_New then   //<257> ADD
            begin                      //<257> ADD
                // 売上自動振替区分の変更確認
                if Jituzai_ENEdit_KojKbn2.Enabled   = true then
                begin
                    if m_DetailKbn2 = 9 then
                        iDKbn := 1
                    else
                        iDKbn := 0;

                    // 区分を変更した場合
                    if Jituzai_ENEdit_KojKbn2.Value <> iDKbn then
                    begin
                        // ストアド実行 2009/2/4 ストアドでエラーが発生する。
                        iCheck := fnCheckDetailKbn2(JHojyoMA_DMemDataNCode.AsInteger);

                        if iCheck = 1 then
                        begin
                            MjsMessageBoxEX(Self,'該当工事は、売上伝票で入力済みのため' + #10#13
                                                + '売上高自動振替区分を変更できません。','登録',mjInformation,mjOk, mjDefOk);
                            MjsSetFocus(Self,Jituzai_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                            Abort;
                        end;
                    end;
                end;
            end;   //<257> ADD
// <221> ADD end

            // 工種管理区分
            iValue := Trunc(Jituzai_ENEdit_PartKbn.Value);
            iCount := Jituzai_ENEdit_PartKbn.SelectItems.Count;
            // 数値が入力可能範囲内か？
            iMin   := Trunc(Jituzai_ENEdit_PartKbn.MinValue);
            iMax   := Trunc(Jituzai_ENEdit_PartKbn.MaxValue);
            if (iValue < iMin) or (iValue > iMax) then
            begin
                Beep;
                Jituzai_PMTab.Items.Selected := 0;
                MjsSetFocus(Self,Jituzai_ENEdit_PartKbn.Name);	// 元の場所に戻す
                Abort;
            end;

            if iCount <> 0 then
            begin
                bOk := false;
                for i := 0 to iCount-1 do
                begin
                    sValue := Jituzai_ENEdit_PartKbn.SelectItems.Strings[i];
                    iPos   := MJSHanPos(':',sValue);
                    sValue := MJSHanCopy(sValue,1,iPos-1);
                    if iValue = StrToInt(sValue) then
                    begin
                        bOk := true;
                        Break;
                    end;
                end;

                if bOk = false then
                begin
                    Beep;
                    Jituzai_PMTab.Items.Selected := 0;
                    MjsSetFocus(Self,Jituzai_ENEdit_PartKbn.Name);	// 元の場所に戻す
                    Abort;
                end;
            end;

            // 工種パターン
    {		if Jituzai_ENEdit_PatternNo.Value = 0 then
            begin
                if Jituzai_ENEdit_PatternNo.InputFlag = true then
                begin
                    Jituzai_LLabel_PatternNoDsp.Caption := '';
                    exit;
                end;
            end;
    }
            if Jituzai_ENEdit_PatternNo.AsInteger <> 0 then
            begin
                with QueryRead do
                begin
                    Close;

                    SQL.Clear;							// ｸｴﾘの初期化
                    // 科目を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select PtnName from KousyuPtnMA');
                    SQL.Add('where PtnNo = :PTNNO and RDelKbn = 0 and Masterkbn = ');
                    SQL.Add(IntToStr(m_arAdoptInfo [ECombo_Header.ItemIndex].nMasterDivision + 100));

                    SetFld('PTNNO').AsInteger := Jituzai_ENEdit_PatternNo.AsInteger;
                    Open;						// ｸｴﾘの開始

                    if EOF = true then
                    begin
                        Beep;
                        Jituzai_PMTab.Items.Selected := 0;
                        MjsSetFocus(Self,Jituzai_ENEdit_PatternNo.Name);	// 元の場所に戻す
                        Abort;
                    end;
                end;
            end;
// <291> Add st
            if (Jituzai_ENEdit_SalesBase.Value = 1) and (m_MstrKbn4 <> 1) then
            begin
				Beep;
				MjsMessageBoxEX(Self,'工事進行基準が採用されていないため、売上計上基準を工事進行基準に設定することはできません。','登録',mjInformation, mjOk, mjDefOk);
                MjsSetFocus(Self,Jituzai_ENEdit_SalesBase.Name);	// 元の場所に戻す
            	Abort;
            end;
            if (Jituzai_ENEdit_SalesBase.Value = 2) and (m_MstrKbn20 <> 1) then
            begin
				Beep;
				MjsMessageBoxEX(Self,'収益認識が採用されていないため、売上計上基準を原価回収基準に設定することはできません。','登録',mjInformation, mjOk, mjDefOk);
            	MjsSetFocus(Self,Jituzai_ENEdit_SalesBase.Name);	// 元の場所に戻す
            	Abort;
            end;
// <291> Add ed
			// 開始予定工期
			// 日付にｴﾗｰがないか？
			iValue := Trunc(Jituzai_EDEdit_StartDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Jituzai_EDEdit_StartDate.AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Jituzai_EDEdit_StartDate.Name);	// 元の場所に戻す
				Abort;
			end;

			// 終了予定工期
			// 日付にｴﾗｰがないか？
			iValue := Trunc(Jituzai_EDEdit_EndDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Jituzai_EDEdit_EndDate.AsIntYM)) then    // <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Jituzai_EDEdit_EndDate.Name);	// 元の場所に戻す
				Abort;
			end;

			// 開始実績工期
			// 日付にｴﾗｰがないか？
			iValue := Trunc(Jituzai_EDEdit_JStartDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Jituzai_EDEdit_JStartDate.AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Jituzai_EDEdit_JStartDate.Name);	// 元の場所に戻す
				Abort;
			end;

			// 終了実績工期
			// 日付にｴﾗｰがないか？
			iValue := Trunc(Jituzai_EDEdit_JEndDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Jituzai_EDEdit_JEndDate.AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Jituzai_EDEdit_JEndDate.Name);	// 元の場所に戻す
				Abort;
			end;
//<TAX> ADD St
            // 契約情報の不正税率チェック
            if (moKojiInfoMn.ContainsErrRate()) then
            begin
//<ConInfo> ADD St
                if (ErrorTaxRateCheck <> 0) then
                begin
                    if (mrYes <> MjsMessageBoxEx(
                        Self, MSG_CONTAINSDIFFRATE, '確認', mjQuestion, mjYesNo, mjDefNo)) then
                    begin
                        MjsSetFocus(Self,Jituzai_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                        Abort;
                    end;
                end
                else
                begin
//<ConInfo> ADD Ed
                    MjsMessageBoxEx(Self, MSG_CONTAINSERRRATE, '確認', mjInformation, mjOk, mjDefOk);
                    MjsSetFocus(Self,Jituzai_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                    Abort;
                end;    // <ConInfo> ADD
            end;

            // 完成済み工事で契約情報に変更あり
            if (Jituzai_EDEdit_FinishDate.Text <> '') and
                (moKojiInfoMn.ContChanged) then
            begin
                sWk := MSG_FINISHCHANGE;
                sWk := Format(sWk, [
                    MasterInfo_DMemDataJHojyoName.AsString,
                    MasterInfo_DMemDataJHojyoName.AsString]);

                if mrYes <>
                    MjsMessageBoxEX(Self,sWk,'確認',mjQuestion,mjYesNo, mjDefNo) then
                begin
                    MjsSetFocus(Self,Jituzai_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                    abort;
                end;
            end;
//<TAX> ADD Ed
		finally
			QueryRead.Free;
		end;
	end
	else
	begin
//<155> - ST

	    //===================================================================
	    //ｺｰﾄﾞ
	    //===================================================================
	    if (Goukei_ENEdit_GCode.Visible = true) then
	    begin
	        with Goukei_ENEdit_GCode do
	        begin
	            if (m_AcControl.Name = Name) then
	            begin
	                if (InputFlag = true) then
	                begin
	                    if (Value = 0) then
	                    begin
//	                        Result := false;
	                        Abort;
    	                end;
    	            end;
        	    end;
	        end;
	    end
	    else
	    begin
	        with Goukei_ETEdit_GCode do
	        begin
	            if (m_AcControl.Name = Name) then
	            begin
	                if (Text ='') then
	                begin
//	                    Result := false;
	                    Abort;
	                end;
	            end;
	        end;
	    end;
//<155> - ED
//<288> ADD St
        // 合計連想
        if (JNTSelXKanjiCheck(Goukei_ETEdit_RenChar.Text)) then
        begin
            Beep;
            MjsMessageBoxEX(
                Self,
                MSG_CONTAINSKANJI,
                '登録',
                mjWarning,
                mjOk,
                mjDefOk);
            MjsSetFocus(Self,Goukei_ETEdit_RenChar.Name);	// 元の場所に戻す
            Abort;
        end;
//<288> ADD Ed

		{合計工事}
		//　合計郵便番号
		if (Goukei_ENEdit_ZipCode1.Value <> 0) and
		   (Goukei_ENEdit_ZipCode2.Value <> 0) then
		begin
			if (Goukei_ETEdit_Address1.Text = '') and		// 住所上段下段 未入力？
			   (Goukei_ETEdit_Address2.Text = '') then
			begin
				iZip1 := Trunc(Goukei_ENEdit_ZipCode1.Value);		// 基番 取得
				iZip2 := Trunc(Goukei_ENEdit_ZipCode2.Value);		// 枝番 取得
				sZip  := MjsEditNum(iZip1,'0000',3) + '-' + MjsEditNum(iZip2,'0000',4);		// 郵便番号 文字列変換
				sAdr1 := '';
				sAdr2 := '';

				iValue := fnCMNPostGet(sZip,sAdr1,sAdr2,0);			// 郵便番号から直接検索
				if iValue < 0 then
				begin
					Beep;
                    Jituzai_PMTab.Items.Selected := 0;
					MjsSetFocus(Self,Goukei_ENEdit_ZipCode1.Name);	// 元の場所に戻す
					Abort;
				end;
			end;
		end;
//<288> ADD St
        // 合計電話番号
        if (JNTSelXKanjiCheck(Goukei_ETEdit_TelNo.Text)) then
        begin
            Beep;
            MjsMessageBoxEX(
                Self,
                MSG_CONTAINSKANJI,
                '登録',
                mjWarning,
                mjOk,
                mjDefOk);
            try
                Goukei_PMTab.Items.Selected := PAGE_KOJI;
            except
            end;
            MjsSetFocus(Self,Goukei_ETEdit_TelNo.Name);	// 元の場所に戻す
            Abort;
        end;
        // 合計FAX番号
        if (JNTSelXKanjiCheck(Goukei_ETEdit_FaxNo.Text)) then
        begin
            Beep;
            MjsMessageBoxEX(
                Self,
                MSG_CONTAINSKANJI,
                '登録',
                mjWarning,
                mjOk,
                mjDefOk);
            try
                Goukei_PMTab.Items.Selected := PAGE_KOJI;
            except
            end;
            MjsSetFocus(Self,Goukei_ETEdit_FaxNo.Name);	// 元の場所に戻す
            Abort;
        end;
//<288> ADD Ed

		try
			QueryRead := TMQuery.Create (Self);
			MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);



			// 合計担当者
			bOk := false;
			if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
			begin
				strGCode := Goukei_ETEdit_PersonCode.Text;
				if strGCode = '' then
					bOk := true;
			end
			else
			begin
				if Goukei_ENEdit_PersonCode.InputFlag = true then
					bOk := true;
				strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)]);
			end;

			if bOk = false then
			begin
				with QueryRead do
				begin
                    Close;
                    SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');
					SetFld('strGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = true then
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                        begin
                            Jituzai_PMTab.Items.Selected := 0;
   							MjsSetFocus(Self,Goukei_ETEdit_PersonCode.Name);	// 元の場所に戻す
                        end
						else
                        begin
                            Jituzai_PMTab.Items.Selected := 0;
							MjsSetFocus(Self,Goukei_ENEdit_PersonCode.Name);	// 元の場所に戻す
                        end;
						Abort;
					end;
				end;
			end;

			// 合計受注者
// モード切り替え
			if m_bModeChg = false then      // <144>復帰
			begin                           // <144>復帰
				bOk := false;
				if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
				begin
					strGCode := Goukei_ETEdit_CustomerCode.Text;
					if strGCode = '' then
						bOk := true;
				end
				else
				begin
					if Goukei_ENEdit_CustomerCode.InputFlag = true then
						bOk := true;

					strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)]);
				end;

				if bOk = false then
				begin
					with QueryRead do
					begin
						Close;

						SQL.Clear;							// ｸｴﾘの初期化
						// 取引先を外部ｺｰﾄﾞ昇順でGET
                        SQL.Add('select NMK from MTOKUI');
                        SQL.Add('where  GCode=:GCode and RDelKbn=0');
						SetFld('GCode').AsString := strGCode;
						Open;						// ｸｴﾘの開始

						if EOF = true then
						begin
							Beep;
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                            begin
                                Jituzai_PMTab.Items.Selected := 0;
								MjsSetFocus(Self,Goukei_ETEdit_CustomerCode.Name);	// 元の場所に戻す
                            end
							else
                            begin
                                Jituzai_PMTab.Items.Selected := 0;
								MjsSetFocus(Self,Goukei_ENEdit_CustomerCode.Name);	// 元の場所に戻す
                            end;
							Abort;
						end;
					end;
				end;
			end;                            // <144>復帰



			// 合計計上基準・合計配賦区分・合計名寄せ区分
			iValue := Trunc(Goukei_ENEdit_RootKbn.Value);
			iCount := Goukei_ENEdit_RootKbn.SelectItems.Count;
			// 数値が入力可能範囲内か？
			iMin   := Trunc(Goukei_ENEdit_RootKbn.MinValue);
			iMax   := Trunc(Goukei_ENEdit_RootKbn.MaxValue);
			if (iValue < iMin) or (iValue > iMax) then
			begin
				Beep;
				MjsSetFocus(Self,Goukei_ENEdit_RootKbn.Name);	// 元の場所に戻す
				Abort;
			end;

			if iCount <> 0 then
			begin
				bOk := false;
				for i := 0 to iCount-1 do
				begin
					sValue := Goukei_ENEdit_RootKbn.SelectItems.Strings[i];
					iPos   := MJSHanPos(':',sValue);
					sValue := MJSHanCopy(sValue,1,iPos-1);
					if iValue = StrToInt(sValue) then
					begin
						bOk := true;
						Break;
					end;
				end;

				if bOk = false then
				begin
					Beep;
                    Jituzai_PMTab.Items.Selected := 0;
					MjsSetFocus(Self,Goukei_ENEdit_RootKbn.Name);	// 元の場所に戻す
					Abort;
				end;
			end;

			// 合計完成振替部門
			bOk := false;
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				strGCode := Goukei_ETEdit_BmnCode.Text;
				if strGCode = '' then
					bOk := true;
			end
			else
			begin
				if Goukei_ENEdit_BmnCode.InputFlag = true then
					bOk := true;

				strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)]);
			end;

			if bOk = false then
			begin
				with QueryRead do
				begin
					Close;

					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
                    SetFld('pMKBN').asInteger  := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = true then
					begin
						Beep;
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                        begin
                            Jituzai_PMTab.Items.Selected := 1;
							MjsSetFocus(Self,Goukei_ETEdit_BmnCode.Name);	// 元の場所に戻す
                        end
						else
                        begin
                            Jituzai_PMTab.Items.Selected := 1;
							MjsSetFocus(Self,Goukei_ENEdit_BmnCode.Name);	// 元の場所に戻す
                        end;
						Abort;
					end;
				end;
			end;

			// 合計着工年月日
			// 日付にｴﾗｰがないか？
			iValue := Trunc(Goukei_EDEdit_StartDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Goukei_EDEdit_StartDate.AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Goukei_EDEdit_StartDate.Name);	// 元の場所に戻す
				Abort;
			end;

			iValue := Trunc(Goukei_EDEdit_EndDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Goukei_EDEdit_EndDate.AsIntYM)) then	    // <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Goukei_EDEdit_EndDate.Name);	// 元の場所に戻す
				Abort;
			end;


			iValue := Trunc(Goukei_EDEdit_JStartDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Goukei_EDEdit_JStartDate.AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Goukei_EDEdit_JStartDate.Name);	// 元の場所に戻す
				Abort;
			end;

			iValue := Trunc(Goukei_EDEdit_JEndDate.Value);
//			if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
			if (iValue <> 0) and (not MjsIntYMDChk(Goukei_EDEdit_JEndDate.AsIntYM)) then	// <#NGEN>
			begin
				Beep;
                Jituzai_PMTab.Items.Selected := 0;
				MjsSetFocus(Self,Goukei_EDEdit_JEndDate.Name);	// 元の場所に戻す
				Abort;
			end;

//<TAX> ADD St
            // 契約情報の不正税率チェック
            if (moKojiInfoMn.ContainsErrRate()) then
            begin
//<ConInfo> ADD St
                if (ErrorTaxRateCheck <> 0) then
                begin
                    if (mrYes <> MjsMessageBoxEx(
                        Self, MSG_CONTAINSDIFFRATE, '確認', mjQuestion, mjYesNo, mjDefNo)) then
                    begin
                        MjsSetFocus(Self,Goukei_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                        Abort;
                    end;
                end
                else
                begin
//<ConInfo> ADD Ed
                    MjsMessageBoxEx(Self, MSG_CONTAINSERRRATE, '確認', mjInformation, mjOk, mjDefOk);
                    MjsSetFocus(Self,Goukei_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                    Abort;
                end;    // <ConInfo> ADD
            end;

            // 完成済み工事で契約情報に変更あり
            if (Goukei_EDEdit_FinishDate.Text <> '') and
                (moKojiInfoMn.ContChanged) then
            begin
                sWk := MSG_FINISHCHANGE;
                sWk := Format(sWk, [
                    MasterInfo_DMemDataJHojyoName.AsString,
                    MasterInfo_DMemDataJHojyoName.AsString]);

                if mrYes <>
                    MjsMessageBoxEX(Self,sWk,'確認',mjQuestion,mjYesNo, mjDefNo) then
                begin
                    MjsSetFocus(Self,Goukei_BBitBtn_Ok.Name);	// 更新ボタンに戻す
                    abort;
                end;
            end;
//<TAX> ADD Ed

		finally
			QueryRead.Free;
		end;
	end;

	result := true;

end;

//**************************************************************************
//	Proccess	:	契約情報更新チェック
//	Name		:	N.Nabe
//	Date		:	2000.09.25
//	Parameter	:	strGCode	String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnKeiyakuCheck(strNCode: Extended; iSumKbn: Integer): Boolean;
var
	qmQuery : TMQuery;
begin
	result := false;

	qmQuery		:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

	with qmQuery do
	begin
		try
			Close();
			SQL.Clear();
//<255> MOD St
//			SQL.Add('select * from KojiInfo2 ');
			SQL.Add('select InfoKbn ');
            SQL.Add('      ,NCode ');
            SQL.Add('      ,ContDate ');
            SQL.Add('      ,ContNo ');
            SQL.Add('      ,ContMoney ');
            SQL.Add('      ,Sales_Tax ');
            SQL.Add('      ,Tax_Rate ');
            SQL.Add('from KojiInfo2 ');
//<255> MOD Ed
			SQL.Add('where NCode=:strNCode and InfoKbn=1 ');
			SQL.Add('Order by ContDate ASC, ContNo ASC,  ');
            SQL.Add(' ContMoney ASC, tax_rate ASC, sales_tax ASC ');
//<255> DEL			SetFld('strNCode').AsFloat := strNCode;
			SetFld('strNCode').AsString := FormatFloat('0',strNCode);  //<255> ADD
			Open();

			if ( iSumKbn = 0 ) then     // 実在
			begin
// <190>                JKeiyaku_DMemData.DisableControls;

				if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
					JKeiyaku_DMemData.First;
			end
			else                        // 合計
			begin
// <190>               GKeiyaku_DMemData.DisableControls;

				if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
					GKeiyaku_DMemData.First;
			end;

			if ( Eof = false ) then	        // 最大8件
			begin
				while Eof = false do
				begin
					if ( iSumKbn = 0 ) then
					begin
						if ( JKeiyaku_DMemDataInfoKbn.AsInteger <> GetFld('InfoKbn').AsInteger ) then
							Exit;

						if ( JKeiyaku_DMemDataNCode.AsFloat <> GetFld('NCode').AsFloat ) then
							Exit;

						if ( JKeiyaku_DMemDataContDate.AsDateTime <> GetFld('ContDate').AsDateTime ) then
							Exit;

						if ( JKeiyaku_DMemDataContNo.AsString <> GetFld('ContNo').AsString ) then
							Exit;

						if ( JKeiyaku_DMemDataContMoney.AsCurrency <> GetFld('ContMoney').AsCurrency ) then
							Exit;

						if ( JKeiyaku_DMemDataSales_Tax.AsCurrency <> GetFld('Sales_Tax').AsCurrency ) then
							Exit;

						if ( JKeiyaku_DMemDataDummyTax_Rate.AsInteger <> GetFld('Tax_Rate').AsInteger ) then
							Exit;

						JKeiyaku_DMemData.Next;
					end
					else
					begin
						if ( GKeiyaku_DMemDataInfoKbn.AsInteger <> GetFld('InfoKbn').AsInteger ) then
							Exit;

						if ( GKeiyaku_DMemDataNCode.AsFloat <> GetFld('NCode').AsFloat ) then
							Exit;

						if ( GKeiyaku_DMemDataContDate.AsDateTime <> GetFld('ContDate').AsDateTime ) then
							Exit;

						if ( GKeiyaku_DMemDataContNo.AsString <> GetFld('ContNo').AsString ) then
							Exit;

						if ( GKeiyaku_DMemDataContMoney.AsCurrency <> GetFld('ContMoney').AsCurrency ) then
							Exit;

						if ( GKeiyaku_DMemDataSales_Tax.AsCurrency <> GetFld('Sales_Tax').AsCurrency ) then
							Exit;

						if ( GKeiyaku_DMemDataDummyTax_Rate.AsInteger <> GetFld('Tax_Rate').AsInteger ) then
							Exit;

						GKeiyaku_DMemData.Next;
					end;
					Next;
				end;
				
				// 残りをﾁｪｯｸ
				if ( iSumKbn = 0 ) then
				begin
					while JKeiyaku_DMemData.Eof = false do
					begin
						if ( JKeiyaku_DMemDataContDate.AsDateTime <> 0 ) then
							Exit;

						JKeiyaku_DMemData.Next;
					end;
				end
				else
				begin
					while GKeiyaku_DMemData.Eof = false do
					begin
						if ( GKeiyaku_DMemDataContDate.AsDateTime <> 0 ) then
							Exit;

						GKeiyaku_DMemData.Next;
					end;
				end;
			end
			else
			begin
				if ( iSumKbn = 0 ) then
				begin
					while JKeiyaku_DMemData.Eof = false do
					begin
						if ( JKeiyaku_DMemDataContDate.AsDateTime <> 0 ) then
							Exit;

						JKeiyaku_DMemData.Next;
					end;
				end
				else
				begin
					while GKeiyaku_DMemData.Eof = false do
					begin
						if ( GKeiyaku_DMemDataContDate.AsDateTime <> 0 ) then
							Exit;

						GKeiyaku_DMemData.Next;
					end;
				end;
			end;

			Close;
		finally
			Free;
		end;
	end;

	if ( iSumKbn = 0 ) then
	begin
		if ( JKeiyaku_DMemData.RecordCount <> 0 ) then
			JKeiyaku_DMemData.First;
// <190>       JKeiyaku_DMemData.EnableControls;
	end
	else
	begin
		if ( GKeiyaku_DMemData.RecordCount <> 0 ) then
			GKeiyaku_DMemData.First;
// <190>       GKeiyaku_DMemData.EnableControls;
	end;

	result := true;

end;

//**************************************************************************
//	Proccess	:	入金情報更新チェック
//	Name		:	N.Nabe
//	Date		:	2000.09.25
//	Parameter	:	strGCode	String	（工事外部コード）
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnNyukinCheck(strNCode: Extended; iSumKbn: Integer): Boolean;
var
	qmQuery			: TMQuery;
begin
	result := false;

	qmQuery	:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

	with qmQuery do
	begin
		try
			Close;
			SQL.Clear;		 							// qmQuery 初期化
//<255> MOD St
//			SQL.Add('Select * from KojiInfo2');
			SQL.Add('select InfoKbn ');
            SQL.Add('      ,NCode ');
            SQL.Add('      ,ContDate ');
            SQL.Add('      ,ContNo ');
            SQL.Add('      ,ContMoney ');
            SQL.Add('      ,Sales_Tax ');
            SQL.Add('      ,Tax_Rate ');
            SQL.Add('from KojiInfo2 ');
//<255> MOD Ed
			SQL.Add('Where NCode=:strNCode and InfoKbn=2');
			SQL.Add('Order by ContDate ASC, ContMoney ASC');
//<255> DEL			SetFld('strNCode').AsFloat	:= strNCode;
			SetFld('strNCode').AsString	:= FormatFloat('0',strNCode);  //<255> ADD
			Open;

			if iSumKbn = 0 then
			begin
				if JNyukin_DMemData.RecordCount <> 0 then
					JNyukin_DMemData.First;
			end
			else
			begin
				if GNyukin_DMemData.RecordCount <> 0 then
					GNyukin_DMemData.First;
			end;

			if  Eof = false then						// 最大１０件
			begin
				while EOF = false do						// 最大１０件
				begin
					if iSumKbn = 0 then
					begin
						if JNyukin_DMemDataInfoKbn.AsInteger <> GetFld('InfoKbn').AsInteger then
							exit;

						if JNyukin_DMemDataNCode.AsFloat <> GetFld('NCode').AsFloat then
							exit;

//						if JNyukin_DMemDataUpdateTime.AsDateTime <> GetFld('UpdateTime').AsDateTime then
//							exit;

						if JNyukin_DMemDataContDate.AsDateTime <> GetFld('ContDate').AsDateTime then
							exit;

						if JNyukin_DMemDataContNo.AsString <> GetFld('ContNo').AsString then
							exit;

						if JNyukin_DMemDataContMoney.AsCurrency <> GetFld('ContMoney').AsCurrency then
							exit;

						if JNyukin_DMemDataSales_Tax.AsCurrency <> GetFld('Sales_Tax').AsCurrency then
							exit;

						if JNyukin_DMemDataTax_Rate.AsInteger <> GetFld('Tax_Rate').AsInteger then
							exit;

						JNyukin_DMemData.Next;
					end
					else
					begin
						if GNyukin_DMemDataInfoKbn.AsInteger <> GetFld('InfoKbn').AsInteger then
							exit;

						if GNyukin_DMemDataNCode.AsFloat <> GetFld('NCode').AsFloat then
							exit;

//						if GNyukin_DMemDataUpdateTime.AsDateTime <> GetFld('UpdateTime').AsDateTime then
//							exit;

						if GNyukin_DMemDataContDate.AsDateTime <> GetFld('ContDate').AsDateTime then
							exit;

						if GNyukin_DMemDataContNo.AsString <> GetFld('ContNo').AsString then
							exit;

						if GNyukin_DMemDataContMoney.AsCurrency <> GetFld('ContMoney').AsCurrency then
							exit;

						if GNyukin_DMemDataSales_Tax.AsCurrency <> GetFld('Sales_Tax').AsCurrency then
							exit;

						if GNyukin_DMemDataTax_Rate.AsInteger <> GetFld('Tax_Rate').AsInteger then
							exit;

						GNyukin_DMemData.Next;
					end;
					Next;
				end;

				// 残りをチェック
				if iSumKbn = 0 then
				begin
					while JNyukin_DMemData.Eof = false do						// 最大１０件
					begin
						if JNyukin_DMemDataContDate.AsDateTime <> 0 then
							exit;
		
						JNyukin_DMemData.Next;
					end;
				end
				else
				begin
					while GNyukin_DMemData.Eof = false do						// 最大１０件
					begin
						if GNyukin_DMemDataContDate.AsDateTime <> 0 then
							exit;
		
						GNyukin_DMemData.Next;
					end;
				end;
			end
			else
			begin
				if iSumKbn = 0 then
				begin
					while JNyukin_DMemData.Eof = false do						// 最大１０件
					begin
						if JNyukin_DMemDataContDate.AsDateTime <> 0 then
							exit;

						JNyukin_DMemData.Next;
					end;
				end
				else
				begin
					while GNyukin_DMemData.Eof = false do						// 最大１０件
					begin
						if GNyukin_DMemDataContDate.AsDateTime <> 0 then
							exit;

						GNyukin_DMemData.Next;
					end;
				end;
			end;

		finally
			Close;
			Free;										// qmQuery 開放
		end;
	end;

	if iSumKbn = 0 then
	begin
		if JNyukin_DMemData.RecordCount <> 0 then
			JNyukin_DMemData.First;
	end
	else
	begin
		if GNyukin_DMemData.RecordCount <> 0 then
			GNyukin_DMemData.First;
	end;

	result := true;

end;

//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnValidateInput
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiContDateDateValidateInput(
  Sender: TObject; const AText: String; var ADate: TDateTime;
  var AMessage: String; var AError: Boolean);
var
	sDate	:	String;
	iDate	:	Integer;
	sGengou	:	String;
begin
	AMessage := '';
	AError := false;

	if AText = '' then
	begin
		exit;
	end;

	// 他のイベント実行中はチェックしない。
	if (m_fEnd = 1) or (m_fChange = 1) or (m_fPrint = 1) or
		(m_fIS = 1) or (m_fDel = 1) or (m_fTreeClk = 1) then
	begin
		JKeiyaku_DMemData.Cancel;
		JNyukin_DMemData.Cancel;
		JSeikyu_DMemData.Cancel;			// <SEI> ADD
		exit;
	end;

	// パネル自体が非表示の時はキャンセルしてチェックしない
// <211> MOD start
//	if (Jituzai_PPanel_KeNyukin.Visible = false) or
	if (Jituzai_PPanel_Keiyaku.Visible = false) or
// <211> MOD end
		(Jituzai_PPanel_Card.Visible = false) then
	begin
		JKeiyaku_DMemData.Cancel;
// <999>		JNyukin_DMemData.Cancel;
		exit;
	end;

// <SEI> ADD start
	if (Jituzai_PPanel_KeNyukin.Visible = false) or
		(Jituzai_PPanel_Card.Visible = false) then
	begin
		JNyukin_DMemData.Cancel;
		exit;
	end;

   	if (Jituzai_PPanel_Seikyu.Visible = false) or
		(Jituzai_PPanel_Card.Visible = false) then
	begin
		JSeikyu_DMemData.Cancel;
		exit;
	end;
// <SEI> ADD end

	sDate := AText;
	sDate := AText;

	if m_iRekiKbn = 0 then				// 和暦
	begin
		sGengou := Copy(AText, 1, 1);
		System.Delete(sDate, 1, 2);
		sDate := Trim(sDate);

// <#NGEN> Mod St
//		if (sDate = '') or
//			(AnsiUpperCase(sDate) = 'H') or
//			(AnsiUpperCase(sDate) = 'S') or
//			(AnsiUpperCase(sDate) = 'T') or
//			(AnsiUpperCase(sDate) = 'M') then
		if (JNTMasDateCtrl.JNTMasGetNumber(sDate) = '') then
// <#NGEN> Mod Ed
		begin
			Beep;
			abort;
		end;

//<284> DEL		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし
// <#NGEN> Mod St
//		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		iDate := MjsDateCtrl.MjsIntDateHokan6(StrToInt(sDate), MdtWAREKI);
		iDate := JNTMasDateCtrl.JNTMasWarekiToSeireki(sGengou, iDate, MdtCMP_YMD);
// <#NGEN> Mod Ed
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
//		iDate := MjsDateCtrl.MjsIntDateHokan6(StrToInt(sDate), MdtWAREKI);		// <#NGEN>
//		ADate := MjsDateCtrl.MjsIntToDate(iDate, sGengou[1]);					// <#NGEN>
		ADate := MjsDateCtrl.MjsIntToDate(iDate, #0);							// <#NGEN>
	end
	else
	begin
//<284> DEL		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし
		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
		ADate := MjsDateCtrl.MjsIntToDate(iDate, #0);
	end;

	if (AText <> '') and (ADate <= 0) then
	begin
		Beep;
		abort;
	end;
end;

//**************************************************************************
//	Component	:	Grid
//	Event	    :	OnValidateInput
//	Name	    :	unknown
//**************************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiContDateDateValidateInput(
  Sender: TObject; const AText: String; var ADate: TDateTime;
  var AMessage: String; var AError: Boolean);
var
	sDate	:	String;
	iDate	:	Integer;
	sGengou	:	String;
begin
	AMessage := '';
	AError := false;

	if AText = '' then
	begin
		exit;
	end;

	// 他のイベント実行中はチェックしない。
	if (m_fEnd = 1) or (m_fChange = 1) or (m_fPrint = 1) or
		(m_fIS = 1) or (m_fDel = 1) or (m_fTreeClk = 1) then
	begin
		GKeiyaku_DMemData.Cancel;
		GNyukin_DMemData.Cancel;
        GSeikyu_DMemData.Cancel;			// <SEI> ADD
		exit;
	end;

	// パネル自体が非表示の時はキャンセルしてチェックしない
// <212> ADD start
//	if (Goukei_PPanel_KeNyukin.Visible = false) or
	if (Goukei_PPanel_Keiyaku.Visible = false) or
// <212> ADD end
		(Goukei_PPanel_Card.Visible = false) then
	begin
		GKeiyaku_DMemData.Cancel;
// <212> del		GNyukin_DMemData.Cancel;
		exit;
	end;

// <SEI> ADD start
	if (Goukei_PPanel_KeNyukin.Visible = false) or
		(Goukei_PPanel_Card.Visible = false) then
	begin
		GNyukin_DMemData.Cancel;
		exit;
	end;

   	if (Goukei_PPanel_Seikyu.Visible = false) or
		(Goukei_PPanel_Card.Visible = false) then
	begin
		GSeikyu_DMemData.Cancel;
		exit;
	end;
// <SEI> ADD end

	sDate := AText;
	sDate := AText;

	if m_iRekiKbn = 0 then				// 和暦
	begin
		sGengou := Copy(AText, 1, 1);
		System.Delete(sDate, 1, 2);
		sDate := Trim(sDate);

// <#NGEN> Mod St
//		if (sDate = '') or
//			(AnsiUpperCase(sDate) = 'H') or
//			(AnsiUpperCase(sDate) = 'S') or
//			(AnsiUpperCase(sDate) = 'T') or
//			(AnsiUpperCase(sDate) = 'M') then
		if (JNTMasDateCtrl.JNTMasGetNumber(sDate) = '') then
// <#NGEN> Mod Ed
		begin
			Beep;
			abort;
		end;

//<284> DEL		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし
// <#NGEN> Mod St
//		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		iDate := MjsDateCtrl.MjsIntDateHokan6(StrToInt(sDate), MdtWAREKI);
		iDate := JNTMasDateCtrl.JNTMasWarekiToSeireki(sGengou, iDate, MdtCMP_YMD);
// <#NGEN> Mod Ed
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
//		iDate := MjsDateCtrl.MjsIntDateHokan6(StrToInt(sDate), MdtWAREKI);		// <#NGEN>
//		ADate := MjsDateCtrl.MjsIntToDate(iDate, sGengou[1]);					// <#NGEN>
		ADate := MjsDateCtrl.MjsIntToDate(iDate, #0);							// <#NGEN>
	end
	else
	begin
//<284> DEL		MjsDateCtrl.MHokanFromDate := 0;    // 基準日（年度の開始日）なし
		iDate := MjsDateCtrl.MjsIntDateHokan8(StrToInt(sDate));
		if not MjsDateCtrl.MjsIntYMDChk(iDate) then
		begin
			Beep;
			abort;
		end;
		ADate := MjsDateCtrl.MjsIntToDate(iDate, #0);
	end;

	if (AText <> '') and (ADate <= 0) then
	begin
		Beep;
		abort;
	end;
end;

//**********************************************************************
//*		Proccess	:	実在契約情報GridColumn移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
var
	dDate :	TDateTime;
// <206> ADD start
//	crKingaku :	Currency;
//	crRitu	  :	Currency;
//	iKingaku  :	Int64;
//    craRateCD : Integer;    // 比較先税ｺｰﾄﾞ
//    croRateCD : Integer;    // 比較元税ｺｰﾄﾞ
//    crBaseNo  : Integer;
//    iLoop     : Integer;
// <206> ADD end
// <212> ADD start
//   	QueryRead : TMQuery;
//    stGCode   : String;
// <212> ADD end
    Qe    : TMQuery;    // <220> ADD
begin
	dDate := JKeiyaku_DMemDataContDate.AsDateTime;
    Qe    := TMQuery.Create ( Self );   // <220> ADD

	if ( dDate = 0 ) then   // 契約年月日が0の場合、初期化する
	begin
// <220> MODD start
{
		JKeiDateSave[JKeiyaku_DMemData.RecNo] := 0;
        JTaxRateSave[JKeiyaku_DMemData.RecNo] := 0; // <169>
		JKeiyaku_DMemData.Edit;
		JKeiyaku_DMemDataContDate.Clear;
		JKeiyaku_DMemDataPrevContDate.Clear;
		JKeiyaku_DMemDataContNo.Clear;
		JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
		JKeiyaku_DMemDataTax_RateName.AsString   := '';
		JKeiyaku_DMemDataTax_Rate.AsInteger      := 0;
		JKeiyaku_DMemDataSales_Tax.Clear;
		JKeiyaku_DMemDataContMoney.Clear;
		JKeiyaku_DMemDataCheck.AsInteger	     := 1;
// <212> ADD start
        JKeiyaku_DMemDataCostomerGCode.Clear;
        JKeiyaku_DMemDataCostomerName.Clear;
        JKeiyaku_DMemDataCostomerNCode.Clear;
// <212> ADD end
}
        try
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                // 自社(子社)へ接続
                MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close();
                Qe.SQL.Clear();
                Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                Qe.SQL.Add('from KojiInfo2_Rel                  ');
                Qe.SQL.Add('where                               ');
                Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                Qe.ParamByName('pNCode' ).AsFloat   := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                Qe.ParamByName('pNCode' ).AsString   := JKeiyaku_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                if ( Qe.Open = false ) then
                begin
                    ErrorMessageDsp( Qe );
                    Qe.Close();
                    Qe.Free();
                    Abort;
                end;

                if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                begin
                    MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                '削除', mjInformation, mjOk, mjDefOk);
                    JKeiyaku_DMemData.Cancel();
                    Abort;
                    exit;
                end;
            end;
            // Memdataの内容を消去する
            JKeiDateSave[JKeiyaku_DMemData.RecNo]      := 0;
            JKeiyaku_DMemData.Edit;
            JKeiyaku_DMemDataContDate       .Clear;
            JKeiyaku_DMemDataPrevContDate   .Clear;
            JKeiyaku_DMemDataContNo         .Clear;
            JKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
            JKeiyaku_DMemDataTax_RateName   .AsString  := '';
            JKeiyaku_DMemDataTax_RateName2   .AsString  := '';   //<TAX> ADD
            JKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
            JKeiyaku_DMemDataDspOrder       .AsInteger := 0;  //<TAX_1> ADD            
            JTaxRateSave[JKeiyaku_DMemData.RecNo]      := 0;    // <169>
            JKeiyaku_DMemDataSales_Tax      .Clear;
            JKeiyaku_DMemDataContMoney      .Clear;
            JKeiyaku_DMemDataCheck          .AsInteger := 1;
            JKeiyaku_DMemDataCostomerGCode.Clear;
            JKeiyaku_DMemDataCostomerName.Clear;
            JKeiyaku_DMemDataCostomerNCode.Clear;


            // 削除する契約情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 8件
            if ( JKeiyaku_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                JKeiNCodeSave[JKeiElement] := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                inc(JKeiElement);
            end;

            JKeiyaku_DMemDataKojiInfo2NCode .AsFloat := 0;
        finally
            Qe.Close();
            Qe.Free();
        end;
// <220> MOD end
	end;

// <206> ADD Start　ChangeColumnイベントから移動
    if ( Column = COL_ZEIGAKU) or ( Column = COL_KEIKIN) then
    begin

        if ( m_iAccProKbn <> 0 ) then   // 税率 ≠ 0
        begin
//<TAX> DEL St
{
            crKingaku := JKeiyaku_DMemDataContMoney.AsCurrency;
            if ( crKingaku = 0 ) then Exit;

            JKeiyaku_DMemData.Edit;

            dDate := JKeiyaku_DMemDataContDate.AsDateTime;
            case JKeiyaku_DMemDataDummyTax_Rate.AsInteger of
                0:											// 標準税率
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
                    JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
                    // 消費税率算出
                    if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                        MemDIC_COTXRATE.First;
                    crRitu := 0;

                    while MemDIC_COTXRATE.Eof = false do
                    begin
                        if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
                        begin
                            crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
                            break;
                        end;
                        MemDIC_COTXRATE.Next;
                    end;

                    crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

                    case giHasuu of
                        0:	iKingaku := Trunc(crKingaku);		// 切り捨て
                        1:										// 切り上げ
                        begin
                            iKingaku := Trunc(crKingaku);
                            if Frac(crKingaku) > 0 then
                                Inc(iKingaku);
                        end;
                        2:
                        begin
                            if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
                                else iKingaku := Trunc(crKingaku - 0.5);
                        end;
                    end;
                    JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
                end;
                1:											// 3%
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 1;
                    JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
                    crKingaku := (crKingaku / 103) * 3;

                    case giHasuu of
                        0:	iKingaku := Trunc(crKingaku);	// 切り捨て
                        1:									// 切り上げ
                        begin
                            iKingaku := Trunc(crKingaku);
                            if Frac(crKingaku) > 0 then
                                Inc(iKingaku);
                        end;
                        2:
                        begin
                            if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
                            else iKingaku := Trunc(crKingaku - 0.5);
                        end;
                    end;
                    JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
                end;
                2:											// 5%
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 2;
                    JKeiyaku_DMemDataTax_RateName.AsString   := sTax[JKeiyaku_DMemDataDummyTax_Rate.AsInteger];
                    crKingaku := (crKingaku / 105) * 5;

                    case giHasuu of
                        0:	iKingaku := Trunc(crKingaku);	// 切り捨て
                        1:									// 切り上げ
                        begin
                            iKingaku := Trunc(crKingaku);
                            if Frac(crKingaku) > 0 then
                                Inc(iKingaku);
                        end;
                        2:
                        begin
                            if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
                            else iKingaku := Trunc(crKingaku - 0.5);
                        end;
                    end;
                    JKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
                end;
                8:											// 不課税 // <201>
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 8;
                    JKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
                    JKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
                end;
                9:											// 非課税
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 9;
//			        JKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
                    JKeiyaku_DMemDataTax_RateName.AsString   := sTax[4];	// <201>
                    JKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
                end;
            end;
}
        end;
//<TAX> DEL Ed
    end;
// <206> ADD end　ChangeColumnイベントから移動
//<TAX> ADD St
    if ( Column <> COL_KEINEN) then
    begin
        if JKeiyaku_DMemDataContDate.AsString <> '' then
        begin
            setContTaxInfo(
                toKojiInfoParam(SUMKBN_JITUZAI),
                toKojiInfo2Param(JKeiyaku_DMemData),
                JKeiyaku_DMemData,
                IfThen(JKeiyaku_DMemData.State in [dsInsert],
                true, canSetSalesTax(toKojiInfo2Param(JKeiyaku_DMemData))));
        end;
    end;

    // F2 上段コピー表示
    dspContCopy(TdxDBGrid(Sender));
    // F3 再計算表示
    dspTaxCalc(TdxDBGrid(Sender));
//<TAX> ADD Ed
end;

//**********************************************************************
//*		Proccess	:	実在入金情報GridColumn移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_NyuChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
var
	dDate		:	TDateTime;
// <212> ADD start
//   	QueryRead : TMQuery;
//    stGCode   : String;
// <212> ADD end
// <226> ADD start
    Qe    : TMQuery;
// <226> ADD start
begin

	dDate := JNyukin_DMemDataContDate.AsDateTime;

	if dDate = 0 then
	begin
		JNyuDateSave[JNyukin_DMemData.RecNo] := 0;
		JNyukin_DMemData.Edit;
		JNyukin_DMemDataContDate.Clear;
		JNyukin_DMemDataPrevContDate.Clear;
		JNyukin_DMemDataContMoney.Clear;
		JNyukin_DMemDataCheck.AsInteger	:= 1;
// <212> ADD start
        JNyukin_DMemDataCostomerName.Clear;
        JNyukin_DMemDataCostomerNCode.Clear;
        JNyukin_DMemDataCostomerGCode.Clear;
// <212> ADD end

// <225> ADD start フォントカラー 0:黒 1:赤
        JNyukin_DMemDataFontColorDate.AsInteger	     := 0;
        JNyukin_DMemDataFontColorMony.AsInteger	     := 0;
// <225> ADD end

// <226> ADD start
        if JNyukin_DMemData.RecNo = 10 then
        begin
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                Qe := TMQuery.Create(self);
                try
                    // 自社(子社)へ接続
                    MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );
                    Qe.Close();
                    Qe.SQL.Clear();
                    Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                    Qe.SQL.Add('from KojiInfo2_Rel                  ');
                    Qe.SQL.Add('where                               ');
                    Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                    Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                    Qe.ParamByName('pNCode' ).AsFloat   := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                    Qe.ParamByName('pNCode' ).AsString   := JNyukin_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                    if ( Qe.Open = false ) then
                    begin
                        ErrorMessageDsp( Qe );
                        Qe.Close();
                        Qe.Free();
                        Abort;
                    end;

                    if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                    begin
                        MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                    '削除', mjInformation, mjOk, mjDefOk);
                        JKeiyaku_DMemData.Cancel();
                        Abort;
                    end;
                finally
                    Qe.Close();
                    Qe.Free();
                end;
            end;
            // 削除する入金予定情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 10件
            if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                inc(JNyuElement);
            end;
            JNyukin_DMemDataKojiInfo2NCode .AsFloat := 0;
        end;
// <226> ADD end
	end;
end;

//**********************************************************************
//*		Proccess	:	合計契約情報GridColumn移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
var
	dDate		:	TDateTime;
// <206> ADD start
//	crKingaku :	Currency;
//	crRitu	  :	Currency;
//	iKingaku  :	Int64;
// <206> ADD end
//   	QueryRead : TMQuery;    // <212> ADD
//    stGCode   : String;     // <212> ADD
    Qe    : TMQuery;        // <220> ADD
begin
	dDate := GKeiyaku_DMemDataContDate.AsDateTime;
    Qe    := TMQuery.Create ( Self );               // <220> ADD

	if dDate = 0 then
	begin
// <220> MOD start
{
		GKeiDateSave[GKeiyaku_DMemData.RecNo]    := 0;
		GKeiyaku_DMemData.Edit;
		GKeiyaku_DMemDataContDate.Clear;
		GKeiyaku_DMemDataPrevContDate.Clear;
		GKeiyaku_DMemDataContNo.Clear;
		GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
		GKeiyaku_DMemDataTax_RateName.AsString   := '';
		GKeiyaku_DMemDataTax_Rate.AsInteger      := 0;
		GKeiyaku_DMemDataSales_Tax.Clear;
		GKeiyaku_DMemDataContMoney.Clear;
		GKeiyaku_DMemDataCheck.AsInteger	     := 1;
// <212> ADD start
        GKeiyaku_DMemDataCostomerGCode.Clear;
        GKeiyaku_DMemDataCostomerName.Clear;
        GKeiyaku_DMemDataCostomerNCode.Clear;
// <212> ADD end
}
        try
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                // 自社(子社)へ接続
                MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close();
                Qe.SQL.Clear();
                Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                Qe.SQL.Add('from KojiInfo2_Rel                  ');
                Qe.SQL.Add('where                               ');
                Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                Qe.ParamByName('pNCode' ).AsFloat   := GKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                Qe.ParamByName('pNCode' ).AsString   := GKeiyaku_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                if ( Qe.Open = false ) then
                begin
                    ErrorMessageDsp( Qe );
                    Qe.Close();
                    Qe.Free();
                    Abort;
                end;

                if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                begin
                    MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                '削除', mjInformation, mjOk, mjDefOk);
                    GKeiyaku_DMemData.Cancel();
                    Abort;
                end;
            end;

            // Memdataの内容を消去する
    		GKeiDateSave[GKeiyaku_DMemData.RecNo]      := 0;
    		GKeiyaku_DMemData               .Edit;
    		GKeiyaku_DMemDataContDate       .Clear;
    		GKeiyaku_DMemDataPrevContDate   .Clear;
    		GKeiyaku_DMemDataContNo         .Clear;
			GKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
			GKeiyaku_DMemDataTax_RateName   .AsString  := '';
			GKeiyaku_DMemDataTax_RateName2  .AsString  := '';  //<TAX> ADD          
			GKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
			GKeiyaku_DMemDataSales_Tax      .Clear;
			GKeiyaku_DMemDataContMoney      .Clear;
    		GKeiyaku_DMemDataCheck          .AsInteger := 1;

            // 削除する契約情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 8件
            if ( GKeiyaku_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                GKeiNCodeSave[GKeiElement] := GKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                inc(GKeiElement);
            end;

            GKeiyaku_DMemDataKojiInfo2NCode .AsFloat := 0;
        finally
            Qe.Close();
            Qe.Free();
        end;
// <220> MOD end
	end;

// <206> ADD Start　ChangeColumnイベントから移動
    if ( Column = COL_ZEIGAKU) then
    begin
        if ( m_iAccProKbn <> 0 ) then   // 税率 ≠ 0
        begin
//<TAX> DEL St
{
                crKingaku := GKeiyaku_DMemDataContMoney.AsCurrency;
    			if ( crKingaku = 0 ) then Exit;

			    GKeiyaku_DMemData.Edit;

				dDate := GKeiyaku_DMemDataContDate.AsDateTime;
				case GKeiyaku_DMemDataDummyTax_Rate.AsInteger of
                    // 標準税率
					0:  begin
						    GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
						    // 消費税率算出
    						if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
    							MemDIC_COTXRATE.First;
    						crRitu := 0;

    						while ( MemDIC_COTXRATE.Eof = false ) do
    						begin
    							if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
    				 		begin
    								crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
    								break;
    							end;
    							MemDIC_COTXRATE.Next;
    						end;

    						crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

    						case giHasuu of
    							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    							1:									// 切り上げ
    							begin
    								iKingaku := Trunc(crKingaku);
    								if ( Frac(crKingaku) > 0 ) then
    									Inc(iKingaku);
    							end;
    							2:
    							begin
    								if ( crKingaku >= 0 ) then
                                            iKingaku := Trunc(crKingaku + 0.5)
    								else    iKingaku := Trunc(crKingaku - 0.5);
    							end;
    						end;

    						GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    					end;
                    // 3%
					1:  begin
							GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 1;
    						GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
    						crKingaku := (crKingaku / 103) * 3;

    						case giHasuu of
    							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    							1:									// 切り上げ
    							begin
									iKingaku := Trunc(crKingaku);
    								if ( Frac(crKingaku) > 0 ) then
    									Inc(iKingaku);
    							end;
    							2:
    							begin
									if ( crKingaku >= 0 ) then
                                            iKingaku := Trunc(crKingaku + 0.5)
    								else    iKingaku := Trunc(crKingaku - 0.5);
    							end;
    						end;

    						GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    					end;
                    // 5%
					2:  begin
						    GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 2;
    						GKeiyaku_DMemDataTax_RateName.AsString   := sTax[GKeiyaku_DMemDataDummyTax_Rate.AsInteger];
    						crKingaku := (crKingaku / 105) * 5;

    						case giHasuu of
    							0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    							1:									// 切り上げ
    							begin
    								iKingaku := Trunc(crKingaku);
    								if ( Frac(crKingaku) > 0 ) then
    									Inc(iKingaku);
    							end;
    							2:
    							begin
									if ( crKingaku >= 0 ) then
											iKingaku := Trunc(crKingaku + 0.5)
									else    iKingaku := Trunc(crKingaku - 0.5);
								end;
							end;

							GKeiyaku_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
						end;
					// 不課税	// <201>
					8:  begin
							GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 8;
							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
							GKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
						end;
					// 非課税
					9:  begin
							GKeiyaku_DMemDataDummyTax_Rate.AsInteger := 9;
//							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[3];
							GKeiyaku_DMemDataTax_RateName.AsString   := sTax[4]; 	// <201>
							GKeiyaku_DMemDataSales_Tax.AsCurrency    := 0;
						end;
				end;
}
//<TAX> DEL Ed
       end;
    end;
// <206> ADD end　ChangeColumnイベントから移動
//<TAX> ADD St
    if ( Column <> COL_KEINEN) then
    begin
        if GKeiyaku_DMemDataContDate.AsString <> '' then
        begin
            setContTaxInfo(
                toKojiInfoParam(SUMKBN_GOUKEI),
                toKojiInfo2Param(GKeiyaku_DMemData),
                GKeiyaku_DMemData,
                IfThen(GKeiyaku_DMemData.State in [dsInsert],
                true, canSetSalesTax(toKojiInfo2Param(GKeiyaku_DMemData))));
        end;
    end;

    // F2 上段コピー表示
    dspContCopy(TdxDBGrid(Sender));
    // F3 再計算表示
    dspTaxCalc(TdxDBGrid(Sender));
//<TAX> ADD Ed
end;

//**********************************************************************
//*		Proccess	:	合計入金情報GridColumn移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_NyuChangeColumn(Sender: TObject;
  Node: TdxTreeListNode; Column: Integer);
var
	dDate		:	TDateTime;
// <212> ADD start
//   	QueryRead : TMQuery;
//    stGCode   : String;
// <212> ADD end
// <226> ADD start
    Qe    : TMQuery;
// <226> ADD end
begin
	dDate := GNyukin_DMemDataContDate.AsDateTime;
	if dDate = 0 then
	begin
		GNyuDateSave[GNyukin_DMemData.RecNo] := 0;
		GNyukin_DMemData.Edit;
		GNyukin_DMemDataContDate.Clear;
		GNyukin_DMemDataPrevContDate.Clear;
		GNyukin_DMemDataContMoney.Clear;
		GNyukin_DMemDataCheck.AsInteger	:= 1;
// <212> ADD start
        GNyukin_DMemDataCostomerName.Clear;
        GNyukin_DMemDataCostomerNCode.Clear;
        GNyukin_DMemDataCostomerGCode.Clear;
// <212> ADD end
// <226> ADD start
        if GNyukin_DMemData.RecNo = 10 then
        begin
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                Qe := TMQuery.Create(self);
                try
                    // 自社(子社)へ接続
                    MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );
                    Qe.Close();
                    Qe.SQL.Clear();
                    Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                    Qe.SQL.Add('from KojiInfo2_Rel                  ');
                    Qe.SQL.Add('where                               ');
                    Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                    Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                    Qe.ParamByName('pNCode' ).AsFloat   := GNyukin_DMemDataKojiInfo2NCode.AsFloat;
                    Qe.ParamByName('pNCode' ).AsString   := GNyukin_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                    if ( Qe.Open = false ) then
                    begin
                        ErrorMessageDsp( Qe );
                        Qe.Close();
                        Qe.Free();
                        Abort;
                    end;

                    if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                    begin
                        MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                    '削除', mjInformation, mjOk, mjDefOk);
                        JKeiyaku_DMemData.Cancel();
                        Abort;
                    end;
                finally
                    Qe.Close();
                    Qe.Free();
                end;
            end;
            // 削除する入金予定情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 10件
            if ( GNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                GNyuNCodeSave[GNyuElement] := GNyukin_DMemDataKojiInfo2NCode.AsFloat;
                inc(GNyuElement);
            end;
            GNyukin_DMemDataKojiInfo2NCode .AsFloat   := 0;
        end;
// <226> ADD end
	end;
end;

//**********************************************************************
//*		Proccess	:	ボタンクリックイベント付属[実在詳細画面]
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.BtnClkWriteJ():Boolean;
var
	strGCode  : String;
	iSumKbn	  : Integer;
    iLoop     : Integer;
//    croRateCD : Integer;    // 比較元税ｺｰﾄﾞ
//    craRateCD : Integer;    // 比較先税ｺｰﾄﾞ
//    crBaseNo  : Integer;
    iRecCount : Integer;    // レコード件数 <212> ADD
begin

	result := false;

	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
		strGCode := Jituzai_ETEdit_GCode.Text;
		strGCode := TrimRight(strGCode);
		Jituzai_ETEdit_GCode.Text := strGCode;
	end
	else
		strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);

	// ﾌﾘｰｺｰﾄﾞﾁｪｯｸ(有効文字ﾁｪｯｸ)
	if not JNTMASERRORCODECHECK(strGCode,gstErrorStr) then
	begin
		Beep;
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
		MjsMessageBoxEx(Self,MjsMsgRec.sMsg,MjsMsgRec.sTitle,MjsMsgRec.icontype,MjsMsgRec.btntype,MjsMsgRec.btndef,MjsMsgRec.LogType);

		if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
			    MjsSetFocus(Self, 'Jituzai_ETEdit_GCode')	// 元の場所に戻す
		else    MjsSetFocus(Self, 'Jituzai_ENEdit_GCode');	// 元の場所に戻す
		Abort;
	end;

    // <170>
    // 契約年月日及び入金予定日の入力値ﾁｪｯｸ
    if ( JKeiyaku_DMemData.Active = true ) then
    begin
        // 編集状態の場合はPostし、日付のﾁｪｯｸを行う。
        if ( JKeiyaku_DMemData.State in [dsEdit, dsInsert] ) then
            JKeiyaku_DMemData.Post();
        if ( JNyukin_DMemData.State  in [dsEdit, dsInsert] ) then
            JNyukin_DMemData.Post();
    end;
    // <170>

    // <169>税率のﾁｪｯｸ(工事-実在の場合のみ指定可能)
// <291> MOD st

//    if ( Jituzai_ENEdit_SalesBase.Value = 1 ) then // 工事進行基準の場合
    if ( Jituzai_ENEdit_SalesBase.Value <> 0 ) then // 工事進行基準の場合 もしくは　原価回収基準の場合
// <291> MOD ed
    begin

// <212> ADD start
        iRecCount := JKeiyaku_DMemData.RecordCount;
        if iRecCount = 0 then
            iRecCount := 8;
// <212> ADD end

//        crBaseNo := 1;
// <212> MOD start
//        for iLoop := 1 to 8 do
        for iLoop := 1 to iRecCount do
// <212> MOD end
        begin
            // 先頭行がﾌﾞﾗﾝｸの場合がある為
            if ( JKeiDateSave[iLoop] <> 0 ) then
            begin
//                crBaseNo := iLoop;
                break;
            end;
        end;
//<TAX> DEL St
{
        // 比較元
        if ( JKeiDateSave[crBaseNo] <> 0 ) then
        begin
            croRateCD := 0;
            croRateCD := JTaxRateSave[crBaseNo];

            // 標準税率の場合は、DIC_COTXRATEより税ｺｰﾄﾞを取得
            if ( croRateCD = 0 ) then
            begin
        		if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                    MemDIC_COTXRATE.First();

                while ( MemDIC_COTXRATE.Eof = false ) do
                begin
                    if ( MemDIC_COTXRATEStartYMD.AsDateTime <= JKeiDateSave[crBaseNo] ) then
                    begin
                        croRateCD := MemDIC_COTXRATERateCD.AsInteger;
                        break;
                    end;
                    MemDIC_COTXRATE.Next();
                end;
            end;
        end;

        // 比較先
// <212> MOD start
//        for iLoop := crBaseNo + 1 to 8 do
        for iLoop := crBaseNo + 1 to iRecCount do
// <212> MOD end
        begin
            // 契約年月日が入力済の場合
            if ( JKeiDateSave[iLoop] <> 0 ) then
            begin
                craRateCD := 0;
                craRateCD := JTaxRateSave[iLoop];

                if ( craRateCD = 0 ) then
                // 標準税率の場合は、DIC_COTXRATEより税ｺｰﾄﾞを取得
                begin
        			if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
                        MemDIC_COTXRATE.First();

                    while ( MemDIC_COTXRATE.Eof = false ) do
                    begin
                        if ( MemDIC_COTXRATEStartYMD.AsDateTime <= JKeiDateSave[iLoop] ) then
                        begin
                            craRateCD := MemDIC_COTXRATERateCD.AsInteger;
                            break;
                        end;
                        MemDIC_COTXRATE.Next();
                    end;
                end;

                if ( croRateCD <> craRateCD ) then
                begin
                    // 契約・入金情報タブの場合
// <211> MOD start
//                    if ( Jituzai_PMTab.Items.Selected = PAGE_NYUKIN ) then
                    if ( Jituzai_PMTab.Items.Selected = PAGE_KEIYAKU ) then
// <211> MOD end
                    begin
                        Beep;
                        MjsMessageBoxEX(Self,'工事進行基準採用工事は、契約情報の税率を全て同じにして下さい。'
                                        ,'契約情報',mjInformation,mjOk,mjDefOk);
                        Jituzai_DdxDBGrid_Kei.SetFocus;
                        JKeiyaku_DMemData.Locate('RecId', iLoop, []);
                        Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_ZEIRITU;
                        Jituzai_DdxDBGrid_Kei.ShowEditor;
                        Abort;
                    end
                    // タブが異なった場合
                    else
                    begin
                        JKeiyaku_DMemData.Locate('RecId', iLoop, []);
                        Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_ZEIRITU;
// <211> MOD start
//                        Jituzai_PMTab.Items.Selected := PAGE_NYUKIN;
                        Jituzai_PMTab.Items.Selected := PAGE_KEIYAKU;
// <211> MOD end
                        Jituzai_DdxDBGrid_Kei.SetFocus;
                        Jituzai_DdxDBGrid_Kei.ShowEditor;
                        Abort;
                    end;
                end;
            end;
        end;
}
//<TAX> DEL Ed
    end;
    // <169>

	iSumKbn	:= 0;

    // 入力ﾃﾞｰﾀをMemDataにｾｯﾄ
	fnJEntrySet ();

	if ( fnDataWrite (strGcode, iSumKbn, true) = false ) then
	begin
		Abort;
		Exit;
	end;

    //工事完成振替部を登録する
    if ( iSumKbn = 0 ) then
        fnKanseiWrite;

	result := true;

end;

//**********************************************************************
//*		Proccess	:	ボタンクリックイベント付属
//*		Name		:	N.Nabe
//*		Date		:	2000/11/29
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.BtnClkWriteG():Boolean;
var
	strGCode		: String;
	iSumKbn			: Integer;
//	iRet			: Integer;
begin
	result := false;

	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
		strGCode := Goukei_ETEdit_GCode.Text;
		strGCode := TrimRight(strGCode);
		Goukei_ETEdit_GCode.Text := strGCode;
	end
	else
    begin
		strGCode := Format ('%.16d',[Trunc (Goukei_ENEdit_GCode.Value)]);
    end;

	// ﾌﾘｰｺｰﾄﾞ(有効文字)ﾁｪｯｸ
	if ( not JNTMASERRORCODECHECK(strGCode,gstErrorStr) ) then
	begin
		Beep();
		ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30, 21);
		MjsMessageBoxEx(Self,
                        MjsMsgRec.sMsg,
                        MjsMsgRec.sTitle,
                        MjsMsgRec.icontype,
                        MjsMsgRec.btntype,
                        MjsMsgRec.btndef,
                        MjsMsgRec.LogType);

		if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
			    MjsSetFocus(Self, 'Goukei_ETEdit_GCode')	// 元の場所に戻す
		else    MjsSetFocus(Self, 'Goukei_ENEdit_GCode');	// 元の場所に戻す
		Abort;
	end;

    // <170>
    // 契約年月日及び入金予定日の入力値ﾁｪｯｸ
    if ( GKeiyaku_DMemData.Active = true ) then
    begin
        // 編集状態の場合はPostし、日付のﾁｪｯｸを行う。
        if ( GKeiyaku_DMemData.State in [dsEdit,dsInsert] ) then
            GKeiyaku_DMemData.Post();
        if ( GNyukin_DMemData.State  in [dsEdit,dsInsert] ) then
            GNyukin_DMemData.Post();
    end;
    // <170>

    // 実在合計区分の設定(合計)
	iSumKbn := 1;

    // 入力ﾃﾞｰﾀをMemDataにｾｯﾄ
	fnGEntrySet ();

    // ＤＢへの書込
	if ( fnDataWrite (strGcode, iSumKbn, true) = false ) then
	begin
		Abort;
		Exit;
	end;

	result := true;

end;

// 付箋ボタンクリック
procedure TJNTCRP018001f.btnFusenCtlClick(Sender: TObject);
var
	iColor	:	Integer;
	iIndex	:	Integer;
	nNCode	:	Extended;
	sCode	:	String;
	NodeSelect	: TTreeNode;
	stWorkRec	: ^TreeViewRec;
	QueryFusen	: TMQuery;
    i           : Integer;
begin

// <193> DEL start
(*
    // 参照ﾓｰﾄﾞの場合は以下の処理を行わない<174>
    if ( giReferFlag = REFER )  then Exit;
*)
// <193> DEL end

	iIndex := 0;
	stWorkRec := nil;

	// 加算体系
	if (Screen.ActiveControl = VTreeView)
    	   and	(BSpeedButtonIS.Caption = '詳細(&T)') then
	begin
		NodeSelect := VTreeView.Selected;
		stWorkRec := NodeSelect.Data;
	end;

//	if (Screen.ActiveControl = VTreeView) and (stWorkRec^.nDivision = 1)then			// 加算体系
	if (Screen.ActiveControl = VTreeView) 			// 加算体系
    	   and	(BSpeedButtonIS.Caption = '詳細(&T)') then
	begin
		nNCode := stWorkRec^.iNCode;
		sCode  := stWorkRec^.strExCode;

		try
			QueryFusen := TMQuery.Create (Self);
		except
			// クエリのインスタンスに失敗
			MjsMessageBoxEX(Self,'Query Instance Error','btnFusenCtlClick',mjError ,mjOk ,mjDefOk);
			Exit;
		end;
		MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryFusen);

		try
			// 付箋ﾁｪｯｸ
			with QueryFusen do
			begin
				Close ();
				SQL.Clear;							// ｸｴﾘの初期化

				// 工事合計/集計科目付箋情報をGET
				SQL.Add('select FusenKbn from MFusenInfo');
				SQL.Add('where MasterKbn= :pMKBN AND NCode=:NCode');
                ParamByName('pMKBN').asInteger := m_nMasterDivision;
				// 検索対象の外部ｺｰﾄﾞ 設定
//<255> DEL				SetFld('Ncode').AsFloat := nNCode;
				SetFld('Ncode').AsString := FormatFloat('0',nNCode);  //<255> ADD

				Open ();							// ｸｴﾘの開始

				if EOF = false then
					iColor := GetFld('FusenKbn').AsInteger
				else
					iColor := NOCOLOR;
			end;
		finally
			QueryFusen.Close;
			QueryFusen.Free;
		end;
	end
	else
	begin
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
			iColor := JHojyoMA_DMemDataFusenIndex.AsInteger;
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				sCode := JHojyoMA_DMemDataGCode.AsString
			else
			begin
				if JHojyoMA_DMemDataGCode.AsString <> '' then
					sCode := Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataGCode.AsString))])
				else
					sCode := '';
			end;
		end
		else
		begin
			iColor := GHojyoMA_DMemDataFusenIndex.AsInteger;
			if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
				sCode := GHojyoMA_DMemDataGCode.AsString
			else
			begin
				if GHojyoMA_DMemDataGCode.AsString <> '' then
					sCode := Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataGCode.AsString))])
				else
					sCode := '';
			end;
		end;
	end;

	if sCode = '' then
		exit;

	case iColor of
		NOCOLOR:	iIndex := 99;
		RED:		iIndex := 0;
		GREEN:		iIndex := 2;
		BLUE:		iIndex := 1;
		ORANGE:		iIndex := 3;
	end;

	if btnFusenCtl.ImageIndex =  iIndex then		// 同色を設定→はがす。
	begin
		if (Screen.ActiveControl = VTreeView)			// 加算体系
    	   and	(BSpeedButtonIS.Caption = '詳細(&T)') then
		begin
			m_cNodeRightClk := VTreeView.Selected;
			TFDelClick(Sender);
		end
		else
        begin
			GFDelClick(Sender);
            //ｶｰﾄﾞ型付箋 <101>
    		if BSpeedButtonIS.Caption = '一覧(&T)' then
            begin
        		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
                begin
                    //付箋初期化
                    for i := 1 to  4 do
                        TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
                end
                else
                begin
                    for i := 1 to  4 do
                        TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;

                end;
            end;
        end;
	end
	else
	begin
		case btnFusenCtl.ImageIndex of
			0:	iColor := RED;
			1:	iColor := BLUE;
			2:	iColor := GREEN;
			3:	iColor := ORANGE;
		end;

		if FusenInfoWrite(iColor, sCode, '', true) = false then
		begin
			abort;
			exit;
		end;

		if BSpeedButtonIS.Caption = '一覧(&T)' then
        begin
      		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット
                if (iColor >=1 ) and (iColor <=4 ) then
                    TImage(MJSFindCtrl(Self, 'Jituzai_Fusen' + IntToStr(iColor))).Visible := true;
            end
            else
            begin
                //ｶｰﾄﾞ型付箋 <101>
                for i := 1 to  4 do
                    TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(i))).Visible := false;
                //ｶｰﾄﾞ型付箋セット
                if (iColor >=1 ) and (iColor <=4 ) then
                    TImage(MJSFindCtrl(Self, 'Goukei_Fusen' + IntToStr(iColor))).Visible := true;
            end;
        end;

		FusenDsp(Root_PMTab.Items.Selected, sCode, 1);

{		MemPost_Sw := 1;
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
			JHojyoMA_DMemData.Post
		else
			GHojyoMA_DMemData.Post;
		MemPost_Sw := 0;
}
	end;
end;

// 付箋ボタンdropdownクリック
procedure TJNTCRP018001f.FusenListClick(Sender: TObject);
begin
	btnFusenCtl.ImageIndex := TControl(Sender).Tag-1;
end;

// 実在グリッドマウス移動イベント
procedure TJNTCRP018001f.Jituzai_DdxDBGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	Row	:	Integer;
//<271> ADD St
    sGCode  :   string;
    DBGrid : TdxDBGrid;
    iHintRow : integer;
    pCmnt       : PFusenCmntRec;
    CmntList : TFusenCmntList;
    idx : integer;
//<271> ADD Ed
begin
  inherited;
//<271> MOD St
{
	// 付箋備考表示処理
	Row	:= Y div Jituzai_DdxDBGrid.DefaultRowHeight + Jituzai_DdxDBGrid.TopIndex;

	if (Row <> m_HintRow_Jitu) then
	begin
		m_HintRow_Jitu			:= Row;
		Jituzai_DdxDBGrid.Hint		:= '';
		Jituzai_DdxDBGrid.ShowHint	:= false;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;

	//	行
	if (Row = m_HintRow_Jitu) and (Jituzai_DdxDBGrid.ShowHint = true) then
		Exit;

	if (Row <= JHojyoMA_DMemData.RecordCount) and (m_aCmnt_Jitu[Row-1].Cmnt <> '') then
	begin
		Jituzai_DdxDBGrid.Hint		:= m_aCmnt_Jitu[Row-1].Cmnt;
		Jituzai_DdxDBGrid.ShowHint	:= true;
	end;
}
//    idx := 0;
    Row := -1;
    pCmnt := nil;
    DBGrid := TdxDBGrid(Sender);

    if (Sender = Jituzai_DdxDBGrid) then
    begin
        iHintRow := m_HintRow_Jitu;
        CmntList := m_aCmnt_Jitu;
    end
    else
    begin
        iHintRow := m_HintRow_Gou;
        CmntList := m_aCmnt_Gou;
    end;


    if ((Y <= DBGrid.HeaderPanelHeight) or
	    (X <= DBGrid.GrIndicatorWidth ) or
	    (X >= (DBGrid.GrIndicatorWidth + DBGrid.Width))) then
    begin
        DBGrid.Hint	  := '';
	    DBGrid.ShowHint := FALSE;
	    Exit;
    end;


    //  付箋コメント0件
    if (CmntList.Count = 0) then
        exit;

    if	((DBGrid.GetNodeAt (X, Y) <> nil) and
		 (not VarIsNull (TdxTreeListNode (DBGrid.GetNodeAt (X, Y)).Values [2]))) then     // 外部コード
	begin
        sGCode  := TdxTreeListNode (DBGrid.GetNodeAt (X, Y)).Values [2];    // 外部ｺｰﾄﾞ

        for idx := 0 to CmntList.Count -1 do
        begin
            pCmnt := CmntList.Items[idx];

            if (pCmnt.Code = sGCode) then
            begin
                Row := idx;
                break;
            end;
        end;
    end;

	if (Row <> iHintRow) then
	begin
        iHintRow := Row;
        if (Sender = Jituzai_DdxDBGrid) then
        begin
            m_HintRow_Jitu := iHintRow;
        end
        else
        begin
            m_HintRow_Gou := iHintRow;
        end;
		DBGrid.Hint		:= '';
		DBGrid.ShowHint	:= false;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;


	//	行
	if (Row = iHintRow) and (DBGrid.ShowHint = true) then
		Exit;

	if Row = -1 then
        Exit;

	if (Row <= DBGrid.DataSource.DataSet.RecordCount) and (pCmnt <> nil) and (pCmnt.Cmnt <> '') then
	begin
		DBGrid.Hint		:= pCmnt.Cmnt;
		DBGrid.ShowHint	:= true;
	end;
//<271> MOD Ed
end;
//<271> DEL St
{
// 合計グリッドマウス移動イベント
procedure TJNTCRP018001f.Goukei_DdxDBGridMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
	Row	:	Integer;
begin
  inherited;

	// 付箋備考表示処理
	Row	:= Y div Goukei_DdxDBGrid.DefaultRowHeight + Goukei_DdxDBGrid.TopIndex;

	if (Row <> m_HintRow_Gou) then
	begin
		m_HintRow_Gou			:= Row;
		Goukei_DdxDBGrid.Hint		:= '';
		Goukei_DdxDBGrid.ShowHint	:= false;
		exit;
	end;

	//	付箋の枠以外
	if (X < 12) or (X > 32) then
		exit;

	if (Y >= 0) and (Y <= 17) then
		exit;

	//	行
	if (Row = m_HintRow_Gou) and (Goukei_DdxDBGrid.ShowHint = true) then
		Exit;

	if (Row <= GHojyoMA_DMemData.RecordCount) and (m_aCmnt_Gou[Row-1].Cmnt <> '') then
	begin
		Goukei_DdxDBGrid.Hint		:= m_aCmnt_Gou[Row-1].Cmnt;
		Goukei_DdxDBGrid.ShowHint	:= true;
	end;
end;
}
//<271> DEL Ed

// 合計-名寄せ区分Changeイベント
procedure TJNTCRP018001f.Goukei_ENEdit_RootKbnChange(Sender: TObject);
begin
	if 	m_bFirstFlag = false then
		exit;

	case Goukei_ENEdit_RootKbn.AsInteger of
		0:
		begin
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
				Goukei_ETEdit_BmnCode.Enabled := false;
				Goukei_ETEdit_BmnCode.Color	  := Self.Color;
			end
			else
			begin
				Goukei_ENEdit_BmnCode.Enabled := false;
				Goukei_ENEdit_BmnCode.Color   := Self.Color;
			end;
		end;
		1:
		begin
			if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
			begin
//				Goukei_ETEdit_BmnCode.TabOrder:= 4;
				Goukei_ETEdit_BmnCode.Enabled := true;
				Goukei_ETEdit_BmnCode.Color	  := clWindow;
			end
			else
			begin
//				Goukei_ENEdit_BmnCode.TabOrder:= 4;
				Goukei_ENEdit_BmnCode.Enabled := true;
				Goukei_ENEdit_BmnCode.Color   := clWindow;
			end;
		end;
	end;
end;

procedure TJNTCRP018001f.Root_PMTabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	m_fAccessTab := false;
end;

procedure TJNTCRP018001f.Goukei_PMTabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	m_fAccessTabG := false;
end;

procedure TJNTCRP018001f.Jituzai_PMTabKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	m_fAccessTabJ := false;
end;

//**************************************************************************
//	Proccess  :	工事契約情報KeyPressｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//	Name	  :	N.Nabe
//	Date	  :	2002/ 07 / 12
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.DdxDBGrid_KeiKeyPress(Sender: TObject; var Key: Char);
//<279> ADD St
var
    oGrid : TdxDBGrid;
    sFldName : String;
//<279> ADD Ed
begin
//<279> ADD St
    oGrid := TdxDBGrid(Sender);
    sFldName := oGrid.FocusedField.FieldName;
//<279> ADD Ed
    // <177> 契約日付の場合
//<250> MOD St
//    if (( Sender = Jituzai_DdxDBGrid_Kei ) and ( Jituzai_DdxDBGrid_Kei.FocusedColumn = 0 )) or
//       (( Sender = Goukei_DdxDBGrid_Kei  ) and ( Goukei_DdxDBGrid_Kei.FocusedColumn  = 0 )) then
//<279> MOD St
    if (sFldName = 'ContDate') then
{
    if (( Sender = Jituzai_DdxDBGrid_Kei ) and ( Jituzai_DdxDBGrid_Kei.FocusedColumn = 0 )) or
       (( Sender = Goukei_DdxDBGrid_Kei  ) and ( Goukei_DdxDBGrid_Kei.FocusedColumn  = 0 )) or
       (( Sender = Jituzai_DdxDBGrid_Nyu ) and ( Jituzai_DdxDBGrid_Nyu.FocusedColumn = 0 )) or
       (( Sender = Goukei_DdxDBGrid_Nyu  ) and ( Goukei_DdxDBGrid_Nyu.FocusedColumn  = 0 )) then
}
//<279> MOD Ed
//<250> MOD Ed
    begin
    	if ( m_iRekiKbn = 1 ) then      // 西暦
    	begin
    		if  (( Key < '0'  ) or  ( Key > '9' )) and  // 数値 0-9
                 ( Key <> #8  ) and                     // #8=BackSpace
                 ( Key <> #27 ) and                     // #27=Esc
                 ( Key <> #9  ) and                     // #9=Tab
                 ( Key <> #13 ) then                    // #13=Enter
    		begin
    			Beep ();
    			Abort;
    		end;
    	end;
    end;
// <212> ADD start
	{ ｺｰﾄﾞの入力可能ｷｰ制御 }
//<250> MOD St
//	if Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE then
//<279> MOD St
    if (sFldName = 'CostomerGCode') then
{
    if ( Jituzai_DdxDBGrid_Kei.FocusedColumn = COL_COSTCODE ) or
       ( Goukei_DdxDBGrid_Kei.FocusedColumn  = COL_COSTCODE ) or
       ( Jituzai_DdxDBGrid_Nyu.FocusedColumn = COL_NCOSTCODE ) or
       ( Goukei_DdxDBGrid_Nyu.FocusedColumn  = COL_NCOSTCODE ) then
}
//<279> MOD Ed
//<250> MOD Ed
    begin
											// 数字・0つき数字の場合
		if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
		begin
											// 数字、制御ｷｰ以外は入力不可
	        if not MJSHanCharInSet(Key,['0'..'9', #8(*BS*), #27(*ESC*), #9(*TAB*)]) then
	    	begin
	    		SysUtils.Beep;
		        Abort;
	        end;
		end;
    end;
// <212> ADD end

end;

//**************************************************************************
//	Proccess  :	工事詳細復元
//	Name	  :	N.Nabe
//	Date	  :	2002/ 07 / 16
//	Parameter : Sender
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.FieldRestor(Sender: TObject; SumKbn: Integer);
var
	QueryRead	:	TMQuery;
	sValue,
	strGCode	:	String;
	iPos,
	iCount,
	iMin,
	iMax,
	i,
	iValue		:	Integer;
begin
	QueryRead := TMQuery.Create (Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, QueryRead);

	try
		if SumKbn = 0 then										// 実在
		begin
			with QueryRead do
			begin
				// 完成振替部門
				if (Sender = Jituzai_ETEdit_BmnCode) or (Sender = Jituzai_ENEdit_BmnCode) then
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
					begin
						if Jituzai_ETEdit_BmnCode.Text = '' then
						begin
							Jituzai_LLabel_BmnName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Jituzai_ETEdit_BmnCode.Text;
						end;
					end
					else
					begin
						if Jituzai_ENEdit_BmnCode.Value = 0 then
						begin
							if Jituzai_ENEdit_BmnCode.InputFlag = true then
							begin
								Jituzai_LLabel_BmnName.Caption := '';
								exit;
							end
							else
							begin
								strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)]);
							end;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_BmnCode.Value)]);
						end;
					end;

					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
                    SetFld('pMKBN').asInteger  := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
						Jituzai_LLabel_BmnName.Caption := GetFld('SimpleName').AsString
					else
					begin
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							Jituzai_ETEdit_BmnCode.Text := 	JHojyoMA_DMemDataBmnCode.AsString						// 元に戻す
						else
						begin
							if JHojyoMA_DMemDataBmnCode.AsString <> '' then
								Jituzai_ENEdit_BmnCode.Value := StrToInt64(Trim(JHojyoMA_DMemDataBmnCode.AsString))	// 元に戻す
							else
							begin
								Jituzai_ENEdit_BmnCode.Value := 0;													// 元に戻す
								Jituzai_ENEdit_BmnCode.InputFlag := true;
							end;
						end;

						if JHojyoMA_DMemDataBmnCode.AsString <> '' then
						begin
							Close;
							SQL.Clear;							// ｸｴﾘの初期化
							// 部門を外部ｺｰﾄﾞ昇順でGET
							SQL.Add('select SimpleName from HojyoMA');
							SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
							if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
								SetFld('stGCode').AsString	:= JHojyoMA_DMemDataBmnCode.AsString
							else
								SetFld('stGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataBmnCode.AsString))]);
                            SetFld('pMKBN').asInteger := MKBN_BUMON;
							Open;						// ｸｴﾘの開始

							if EOF = false then
								Jituzai_LLabel_BmnName.Caption := GetFld('SimpleName').AsString
							else
								Jituzai_LLabel_BmnName.Caption := '';
						end
						else
							Jituzai_LLabel_BmnName.Caption := '';
					end;
				end;

				// 担当者
				if (Sender = Jituzai_ETEdit_PersonCode) or (Sender = Jituzai_ENEdit_PersonCode) then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
					begin
						if Jituzai_ETEdit_PersonCode.Text = '' then
						begin
							Jituzai_LLabel_PersonName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Jituzai_ETEdit_PersonCode.Text;
						end;
					end
					else
					begin
						if Jituzai_ENEdit_PersonCode.Value = 0 then
						begin
							if Jituzai_ENEdit_PersonCode.InputFlag = true then
							begin
								Jituzai_LLabel_PersonName.Caption := '';
								exit;
							end
							else
							begin
								strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)]);
							end;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_PersonCode.Value)]);
						end;
					end;

                    Close;
                    SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');
					SetFld('strGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
						Jituzai_LLabel_PersonName.Caption := GetFld('SimpleName').AsString
					else
					begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Jituzai_ETEdit_PersonCode.Text := 	JHojyoMA_DMemDataPersonCode.AsString					// 元に戻す
						else
						begin
							if JHojyoMA_DMemDataPersonCode.AsString <> '' then
								Jituzai_ENEdit_PersonCode.Value := StrToInt64(Trim(JHojyoMA_DMemDataPersonCode.AsString))	// 元に戻す
							else
							begin
								Jituzai_ENEdit_PersonCode.Value := 0;													// 元に戻す
								Jituzai_ENEdit_PersonCode.InputFlag := true;
							end;
						end;

						if JHojyoMA_DMemDataPersonCode.AsString <> '' then
						begin

                            Close;
                            SQL.Clear;		 							// qmQuery 初期化
                            SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                            SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                            SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

							if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
								SetFld('strGCode').AsString	:= JHojyoMA_DMemDataPersonCode.AsString
							else
								SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataPersonCode.AsString))]);
							Open;						// ｸｴﾘの開始

							if EOF = false then
								Jituzai_LLabel_PersonName.Caption := GetFld('SimpleName').AsString
							else
								Jituzai_LLabel_PersonName.Caption := '';
						end
						else
							Jituzai_LLabel_PersonName.Caption := '';
					end;
				end;

				// 受注者
				if (Sender = Jituzai_ETEdit_CustomerCode) or (Sender = Jituzai_ENEdit_CustomerCode) then
				begin
					if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
					begin
						if Jituzai_ETEdit_CustomerCode.Text = '' then
						begin
							Jituzai_LLabel_CustomerName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Jituzai_ETEdit_CustomerCode.Text;
						end;
					end
					else
					begin
						if Jituzai_ENEdit_CustomerCode.Value = 0 then
						begin
							if Jituzai_ENEdit_CustomerCode.InputFlag = true then
							begin
								Jituzai_LLabel_CustomerName.Caption := '';
								exit;
							end
							else
							begin
								strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)]);
							end;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Jituzai_ENEdit_CustomerCode.Value)]);
						end;
					end;

					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					// 取引先を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select NMK from MTOKUI');
                    SQL.Add('where  NCode=:NCode');
//<255> DEL                    SetFld('NCode').AsFloat := fnGetNCODE(strGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                    SetFld('NCode').AsString :=
                        FormatFloat('0',
                        fnGetNCODE(strGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD
					Open;						// ｸｴﾘの開始

					if EOF = false then
						Jituzai_LLabel_CustomerName.Caption := GetFld('NMK').AsString
					else
					begin
						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
							Jituzai_ETEdit_CustomerCode.Text := JHojyoMA_DMemDataCostomerCode.AsString						// 元に戻す
						else
						begin
							if JHojyoMA_DMemDataCostomerCode.AsString <> '' then
								Jituzai_ENEdit_CustomerCode.Value := StrToInt64(Trim(JHojyoMA_DMemDataCostomerCode.AsString))	// 元に戻す
							else
							begin
								Jituzai_ENEdit_CustomerCode.Value := 0;													// 元に戻す
								Jituzai_ENEdit_CustomerCode.InputFlag := true;
							end;
						end;

						if JHojyoMA_DMemDataCostomerCode.AsString <> '' then
						begin
							Close;
							SQL.Clear;							// ｸｴﾘの初期化
							// 取引先を外部ｺｰﾄﾞ昇順でGET
                            SQL.Add('select NMK from MTOKUI');
                            SQL.Add('where  NCode=:NCode');
//<255> DEL                            SetFld('NCode').AsFloat := fnGetNCODE(strGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger);
                            SetFld('NCode').AsString := FormatFloat('0',fnGetNCODE(strGCode,MKBN_TORIHIKI,MasterInfo_DMemDataCodeAttrTorihiki.asInteger));  //<255> ADD

(* //<149>SHK03-016 このﾊﾟﾗﾒｰﾀは不要

                            SetFld('pMKBN').asInteger := MKBN_TORIHIKI;
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
								SetFld('stGCode').AsString	:= JHojyoMA_DMemDataCostomerCode.AsString
							else
								SetFld('stGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(JHojyoMA_DMemDataCostomerCode.AsString))]);
*)
							Open;						// ｸｴﾘの開始

							if EOF = false then
								Jituzai_LLabel_CustomerName.Caption := GetFld('NMK').AsString
							else
								Jituzai_LLabel_CustomerName.Caption := '';
						end
						else
							Jituzai_LLabel_CustomerName.Caption := '';
					end;
				end;
			end;

			// 配賦区分
			if Sender = Jituzai_ENEdit_HaifuKbn then
			begin
				iValue := Trunc((Sender as TMNumEdit).Value);
				iCount := TMNumEdit(Sender).SelectItems.Count;
				// 数値が入力可能範囲内か？
				iMin   := Trunc((Sender as TMNumEdit).MinValue);
				iMax   := Trunc((Sender as TMNumEdit).MaxValue);
				if (iValue < iMin) or (iValue > iMax) then
				begin
					Jituzai_ENEdit_HaifuKbn.Value := JHojyoMA_DMemDataHaifuKbn.AsInteger;
					iValue := JHojyoMA_DMemDataHaifuKbn.AsInteger;
				end;

				if iCount <> 0 then
				begin
					for i := 0 to iCount-1 do
					begin
						sValue := TMNumEdit(Sender).SelectItems.Strings[i];
						iPos   := MJSHanPos(':',sValue);
						sValue := MJSHanCopy(sValue,1,iPos-1);
						if iValue = StrToInt(sValue) then
						begin
							Jituzai_ENEdit_HaifuKbn.Value := iValue;
							Jituzai_ENEdit_HaifuKbn.InputFlag := false;
							Jituzai_LLabel_HaifuKbnDsp.Caption := sHaifu[iValue];
						end;
					end;
				end
				else
				begin
					Jituzai_ENEdit_HaifuKbn.Value := 0;
					Jituzai_ENEdit_HaifuKbn.InputFlag := false;
					Jituzai_LLabel_HaifuKbnDsp.Caption		:= sHaifu[0];
				end;
			end;

			// 日付関係
			if Sender = Jituzai_EDEdit_StartDate then
			begin
				iValue := Jituzai_EDEdit_StartDate.Value;
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Jituzai_EDEdit_StartDate.AsDateTime := JHojyoMA_DMemDataStartDate.AsDateTime;
			end;
			// 日付関係
			if Sender = Jituzai_EDEdit_EndDate then
			begin
				iValue := Jituzai_EDEdit_EndDate.Value;
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Jituzai_EDEdit_EndDate.AsDateTime := JHojyoMA_DMemDataEndDate.AsDateTime;
			end;

			// 日付関係
			if Sender = Jituzai_EDEdit_JStartDate then
			begin
				iValue := Jituzai_EDEdit_JStartDate.Value;
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Jituzai_EDEdit_JStartDate.AsDateTime := JHojyoMA_DMemDataJStartDate.AsDateTime;
			end;
			// 日付関係
			if Sender = Jituzai_EDEdit_JEndDate then
			begin
				iValue := Jituzai_EDEdit_JEndDate.Value;
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Jituzai_EDEdit_JEndDate.AsDateTime := JHojyoMA_DMemDataJEndDate.AsDateTime;
			end;
		end
		else
		begin
			with QueryRead do
			begin
				// 完成振替部門
				if (Sender = Goukei_ETEdit_BmnCode) or (Sender = Goukei_ENEdit_BmnCode) then
				begin
					if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
					begin
						if Goukei_ETEdit_BmnCode.Text = '' then
						begin
							Goukei_LLabel_BmnName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Goukei_ETEdit_BmnCode.Text;
						end;
					end
					else
					begin
						if Goukei_ENEdit_BmnCode.Value = 0 then
						begin
							if Goukei_ENEdit_BmnCode.InputFlag = true then
							begin
								Goukei_LLabel_BmnName.Caption := '';
								exit;
							end
							else
							begin
								strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)]);
							end;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_BmnCode.Value)]);
						end;
					end;

					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					// 部門を外部ｺｰﾄﾞ昇順でGET
					SQL.Add('select SimpleName from HojyoMA');
					SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
                    SetFld('pMKBN').asInteger  := MKBN_BUMON;
					SetFld('stGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
						Goukei_LLabel_BmnName.Caption := GetFld('SimpleName').AsString
					else
					begin
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							Goukei_ETEdit_BmnCode.Text := GHojyoMA_DMemDataBmnCode.AsString						// 元に戻す
						else
						begin
							if GHojyoMA_DMemDataBmnCode.AsString <> '' then
								Goukei_ENEdit_BmnCode.Value := StrToInt64(Trim(GHojyoMA_DMemDataBmnCode.AsString))	// 元に戻す
							else
							begin
								Goukei_ENEdit_BmnCode.Value := 0;													// 元に戻す
								Goukei_ENEdit_BmnCode.InputFlag := true;
							end;
						end;

						if GHojyoMA_DMemDataBmnCode.AsString <> '' then
						begin
							Close;
							SQL.Clear;							// ｸｴﾘの初期化
							// 部門を外部ｺｰﾄﾞ昇順でGET
							SQL.Add('select SimpleName from HojyoMA');
							SQL.Add('where MasterKbn=:pMKBN AND RDelKbn=0 AND GCode=:stGCode AND SumKbn=0 AND HojyoKbn2<>2');
                            SetFld('pMKBN').asInteger := MKBN_BUMON;
							if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
								SetFld('stGCode').AsString	:= GHojyoMA_DMemDataBmnCode.AsString
							else
								SetFld('stGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataBmnCode.AsString))]);
							Open;						// ｸｴﾘの開始

							if EOF = false then
								Goukei_LLabel_BmnName.Caption := GetFld('SimpleName').AsString
							else
								Goukei_LLabel_BmnName.Caption := '';
						end
						else
							Goukei_LLabel_BmnName.Caption := '';
					end;
				end;
					
				// 担当者
				if (Sender = Goukei_ETEdit_PersonCode) or (Sender = Goukei_ENEdit_PersonCode) then
				begin
					if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
					begin
						if Goukei_ETEdit_PersonCode.Text = '' then
						begin
							Goukei_LLabel_PersonName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Goukei_ETEdit_PersonCode.Text;
						end;
					end
					else
					begin
						if Goukei_ENEdit_PersonCode.Value = 0 then
						begin
							if Goukei_ENEdit_PersonCode.InputFlag = true then
							begin
								Goukei_LLabel_PersonName.Caption := '';
								exit;
							end
							else
							begin
								strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)]);
							end;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_PersonCode.Value)]);
						end;
					end;
		

                    Close;
                    SQL.Clear;		 							// qmQuery 初期化
                    SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                    SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                    SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');
    				SetFld('strGCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
						Goukei_LLabel_PersonName.Caption := GetFld('SimpleName').AsString
					else
					begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Goukei_ETEdit_PersonCode.Text := GHojyoMA_DMemDataPersonCode.AsString					// 元に戻す
						else
						begin
							if GHojyoMA_DMemDataPersonCode.AsString <> '' then
								Goukei_ENEdit_PersonCode.Value := StrToInt64(Trim(GHojyoMA_DMemDataPersonCode.AsString))	// 元に戻す
							else
							begin
								Goukei_ENEdit_PersonCode.Value := 0;													// 元に戻す
								Goukei_ENEdit_PersonCode.InputFlag := true;
							end;
						end;

						if GHojyoMA_DMemDataPersonCode.AsString <> '' then
						begin

                            Close;
                            SQL.Clear;		 							// qmQuery 初期化
                            SQL.Add('SELECT  M.SimpleName FROM HAPSC H   ');
                            SQL.Add('LEFT OUTER JOIN MOS_OFFICE_STAFF M  ON (M.NCODE = H.NCODE)');
                            SQL.Add('WHERE (H.GCODE = :strGCode) AND (M.RDelKBN = 0)          ');

							if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
								SetFld('strGCode').AsString	:= GHojyoMA_DMemDataPersonCode.AsString
							else
								SetFld('strGCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataPersonCode.AsString))]);
							Open;						// ｸｴﾘの開始

							if EOF = false then
								Goukei_LLabel_PersonName.Caption := GetFld('SimpleName').AsString
							else
								Goukei_LLabel_PersonName.Caption := '';
						end
						else
							Goukei_LLabel_PersonName.Caption := '';
					end;
				end;

				// 受注者
				if (Sender = Goukei_ETEdit_CustomerCode) or (Sender = Goukei_ENEdit_CustomerCode) then
				begin
					if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
					begin
						if Goukei_ETEdit_CustomerCode.Text = '' then
						begin
							Goukei_LLabel_CustomerName.Caption := '';
							exit;
						end
						else
						begin
							strGCode := Goukei_ETEdit_CustomerCode.Text;
						end;
					end
					else
					begin
						if Goukei_ENEdit_CustomerCode.Value = 0 then
						begin
							if Goukei_ENEdit_CustomerCode.InputFlag = true then
							begin
								Goukei_LLabel_CustomerName.Caption := '';
								exit;
							end
							else
							begin
								strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)]);
							end;
						end
						else
						begin
							strGCode := Format ('%.16d', [Trunc (Goukei_ENEdit_CustomerCode.Value)]);
						end;
					end;
		
					Close;
					SQL.Clear;							// ｸｴﾘの初期化
					// 取引先を外部ｺｰﾄﾞ昇順でGET
                    SQL.Add('select NMK from MTOKUI');
                    SQL.Add('where  GCode=:GCode and RDelKbn=0');
					SetFld('GCode').AsString := strGCode;
					Open;						// ｸｴﾘの開始

					if EOF = false then
						Goukei_LLabel_CustomerName.Caption := GetFld('NMK').AsString
					else
					begin
						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
							Goukei_ETEdit_CustomerCode.Text := GHojyoMA_DMemDataCostomerCode.AsString						// 元に戻す
						else
						begin
							if GHojyoMA_DMemDataCostomerCode.AsString <> '' then
								Goukei_ENEdit_CustomerCode.Value := StrToInt64(Trim(GHojyoMA_DMemDataCostomerCode.AsString))	// 元に戻す
							else
							begin
								Goukei_ENEdit_CustomerCode.Value := 0;													// 元に戻す
								Goukei_ENEdit_CustomerCode.InputFlag := true;
							end;
						end;

						if GHojyoMA_DMemDataCostomerCode.AsString <> '' then
						begin
							Close;
							SQL.Clear;							// ｸｴﾘの初期化
							// 取引先を外部ｺｰﾄﾞ昇順でGET
                            SQL.Add('select NMK from MTOKUI');
                            SQL.Add('where  GCode=:GCode and RDelKbn=0');
							if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
								SetFld('GCode').AsString	:= GHojyoMA_DMemDataCostomerCode.AsString
							else
								SetFld('GCode').AsString	:= Format ('%.16d', [StrToInt64 (Trim(GHojyoMA_DMemDataCostomerCode.AsString))]);
							Open;						// ｸｴﾘの開始

							if EOF = false then
								Goukei_LLabel_CustomerName.Caption := GetFld('NMK').AsString
							else
								Goukei_LLabel_CustomerName.Caption := '';
						end
						else
							Goukei_LLabel_CustomerName.Caption := '';
					end;
				end;
			end;

			// 名寄せ区分
			if Sender = Goukei_ENEdit_RootKbn then
			begin
				iValue := Trunc((Sender as TMNumEdit).Value);
				iCount := TMNumEdit(Sender).SelectItems.Count;
				// 数値が入力可能範囲内か？
				iMin   := Trunc((Sender as TMNumEdit).MinValue);
				iMax   := Trunc((Sender as TMNumEdit).MaxValue);
				if (iValue < iMin) or (iValue > iMax) then
				begin
					Goukei_ENEdit_RootKbn.Value := GHojyoMA_DMemDataRootKbn.AsInteger;
					iValue := GHojyoMA_DMemDataRootKbn.AsInteger;
				end;

				if iCount <> 0 then
				begin
					for i := 0 to iCount-1 do
					begin
						sValue := TMNumEdit(Sender).SelectItems.Strings[i];
						iPos   := MJSHanPos(':',sValue);
						sValue := MJSHanCopy(sValue,1,iPos-1);
						if iValue = StrToInt(sValue) then
						begin
							if iValue = 0 then
							begin
								Goukei_ENEdit_BmnCode.Value := 0;
								Goukei_ENEdit_BmnCode.InputFlag := true;
								Goukei_ETEdit_BmnCode.Text := '';
								Goukei_LLabel_BmnName.Caption := '';
								Goukei_EDEdit_FinishDate.Value := 0;
							end
							else
								Goukei_EDEdit_FinishDate.AsDateTime	:= GHojyoMA_DMemDataFinishDate.AsDateTime;

							Goukei_ENEdit_RootKbn.Value := iValue;
							Goukei_ENEdit_RootKbn.InputFlag := false;
							Goukei_LLabel_RootKbnDsp.Caption		:= sRoot[iValue];
						end;
					end;
				end
				else
				begin
					Goukei_ENEdit_BmnCode.Value := 0;
					Goukei_ENEdit_BmnCode.InputFlag := true;
					Goukei_ETEdit_BmnCode.Text := '';
					Goukei_LLabel_BmnName.Caption := '';
					Goukei_EDEdit_FinishDate.Value := 0;

					Goukei_ENEdit_RootKbn.Value := 0;
					Goukei_ENEdit_RootKbn.InputFlag := false;
					Goukei_LLabel_RootKbnDsp.Caption		:= sRoot[0];
				end;
			end;

			// 日付関係
			if Sender = Goukei_EDEdit_StartDate then
			begin
				iValue := Goukei_EDEdit_StartDate.Value;
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Goukei_EDEdit_StartDate.AsDateTime := GHojyoMA_DMemDataStartDate.AsDateTime;
			end;
			if Sender = Goukei_EDEdit_EndDate then
			begin
//				iValue := Goukei_EDEdit_StartDate.Value;										// <#NGEN>
				iValue := Goukei_EDEdit_EndDate.Value;											// <#NGEN>
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Goukei_EDEdit_EndDate.AsDateTime := GHojyoMA_DMemDataEndDate.AsDateTime;
			end;

			if Sender = Goukei_EDEdit_JStartDate then
			begin
//				iValue := Goukei_EDEdit_StartDate.Value;										// <#NGEN>
				iValue := Goukei_EDEdit_JStartDate.Value;										// <#NGEN>
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Goukei_EDEdit_JStartDate.AsDateTime := GHojyoMA_DMemDataJStartDate.AsDateTime;
			end;
			if Sender = Goukei_EDEdit_JEndDate then
			begin
//				iValue := Goukei_EDEdit_JStartDate.Value;										// <#NGEN>
				iValue := Goukei_EDEdit_JEndDate.Value;											// <#NGEN>
//				if (iValue <> 0) and (not MjsIntYMDChk(iValue)) then							// <#NGEN>
				if (iValue <> 0) and (not MjsIntYMDChk((Sender as TMDateEdit).AsIntYM)) then	// <#NGEN>
					Goukei_EDEdit_JEndDate.AsDateTime := GHojyoMA_DMemDataJEndDate.AsDateTime;
			end;

		end;
	finally
		QueryRead.Free;
	end;
end;

procedure TJNTCRP018001f.ppDetailBand5BeforeGenerate(Sender: TObject);
begin
	// 最終レコード、頁の最下行を判定する関数の追加
	if (ppDetailBand5.LastRecord) or (ppDetailBand5.PageOutOfSpace = true) then
	begin
		if ppDetailBand5.OverFlow = false then
			ppDetailBand5.OverFlow := true;
		if ppLine94.ReprintOnOverFlow = false then
			ppLine94.ReprintOnOverFlow := true;
		ppLine94.Weight := 0.75;  // ラインの太さを太くしている
	end
	else
	begin
		ppLine94.Weight := 0.25;  // ラインの太さを元にもどす
	end;
end;

procedure TJNTCRP018001f.ppDetailBand1BeforeGenerate(Sender: TObject);
begin
	// 最終レコード、頁の最下行を判定する関数の追加
	if (ppDetailBand1.LastRecord) or (ppDetailBand1.PageOutOfSpace = true) then
	begin
		if ppDetailBand1.OverFlow = false then
			ppDetailBand1.OverFlow := true;
		if ppLine5.ReprintOnOverFlow = false then
			ppLine5.ReprintOnOverFlow := true;
		ppLine5.Weight := 0.75;  // ラインの太さを太くしている
	end
	else
	begin
		ppLine5.Weight := 0.25;  // ラインの太さを元にもどす
	end;
end;

//**************************************************************************
//	Proccess  :	入力ﾃﾞｰﾀによるﾗﾍﾞﾙのｷｬﾌﾟｼｮﾝ登録
//					区分による数値入力しか通さない
//	Name	  :	N.Nabe
//	Date	  :	2000/ 09 / 29
//	Parameter :
//	Retrun	  :
//	History	　:	2001 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.fnSetLabel(Sender: TObject);
var
	sValue	:	String;
	iValue	:	Integer;
	iPos	:	Integer;
	iLen	:	Integer;
	iCount	:	Integer;
	iwk		:	Integer;
	swk		:	String;
begin
	if not(Sender is TMNumEdit) then
		Exit;

	iCount := TMNumEdit(Sender).SelectItems.Count;	// ﾄﾞﾛｯﾌﾟﾀﾞｳﾝ なし？
	if iCount = 0 then
		Exit;

	sValue := '';
	iValue := Trunc((Sender as TMNumEdit).Value);	// 区分 取得
	if (iValue = 0) then
		(Sender as TMNumEdit).Zero := true;

	// 区分から名称 取得
	for iwk := 0 to iCount-1 do
	begin
		swk := TMNumEdit(Sender).SelectItems.Strings[iwk];
		iPos := MJSHanPos(IntToStr(iValue)+':',swk);
		if iPos = 0 then
			continue;
		iPos := MJSHanPos(':',swk);
		iLen := MJSHanLength(swk);
		sValue := MJSHanCopy(swk,iPos+1,iLen-iPos);
		Break;
	end;

	// 基本情報
	if 		Sender = Jituzai_ENEdit_DetailKbn1 then			// 完成振替パターン
		Jituzai_LLabel_DetailKbn1Dsp.Caption := sValue
	else if Sender = Jituzai_ENEdit_DetailKbn2 then			// 完成売上高相手勘定区分
		Jituzai_LLabel_DetailKbn2Dsp.Caption := sValue
	else if Sender = Jituzai_ENEdit_PartKbn then			// 工種管理区分
		Jituzai_LLabel_PartKbnDsp.Caption := sValue
	else if Sender = Jituzai_ENEdit_SalesBase then			// 売上計上区分 <106><167>
		Jituzai_LLabel_SalesBaseDsp.Caption := sValue      //              <106><167>
// <211> ADD start
    else if Sender = Jituzai_ENEdit_KojKbn2 then
        Jituzai_LLabel_KojKbn2Dsp.Caption   := sValue;
// <211> ADD end

end;

//**************************************************************************
//	Proccess  :	Jituzai_ENEdit_PartKbnChange
//	Name	  :	N.Nabe
//	Date	  :	2000/ 09 / 29
//	Parameter :
//	Retrun	  :
//	History	　:	2001 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.Jituzai_ENEdit_PartKbnChange(Sender: TObject);
begin
	if m_fEnd = 1 then
		exit;

	if 	m_bFirstFlag = false then
		exit;

    // <126>↓
    if (m_EdtSw = false) then
        m_EdtSw := true;                    // 変更ﾌﾗｸﾞON
    // <126>↑

	if Jituzai_ENEdit_PartKbn.SelectItems.Count > 2 then
	begin
		if Jituzai_ENEdit_PartKbn.AsInteger = 2 then
		begin
			Jituzai_ENEdit_PatternNo.Enabled := true;
			Jituzai_ENEdit_PatternNo.Color := clWindow;
		end
		else
		begin
			Jituzai_ENEdit_PatternNo.Enabled := false;
			Jituzai_ENEdit_PatternNo.Color := Self.Color;
			Jituzai_ENEdit_PatternNo.Value := 0;
			Jituzai_ENEdit_PatternNo.InputFlag := true;
			Jituzai_LLabel_PatternNoDsp.Caption := '';
		end;
	end
	else
	begin
		Jituzai_ENEdit_PatternNo.Enabled := false;
		Jituzai_ENEdit_PatternNo.Color := Self.Color;
		Jituzai_ENEdit_PatternNo.Value := 0;
		Jituzai_ENEdit_PatternNo.InputFlag := true;
		Jituzai_LLabel_PatternNoDsp.Caption := '';
	end;

end;

//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからのツリーを全て展開
//	Name	  :	N.Nabe
//	Date	  :	2004/ 11 / 25
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.TPOpenClick(Sender: TObject);
begin
	VTreeView.FullExpand();
end;

//**************************************************************************
//	Proccess  :	ﾎﾟｯﾌﾟｱｯﾌﾟからのツリーを全て閉じる
//	Name	  :	N.Nabe
//	Date	  :	2004/ 11 / 25
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.TPCloseClick(Sender: TObject);
begin
	VTreeView.FullCollapse();
	VTreeView.Selected.Expand(false);
end;

//**********************************************************************
//*		Proccess	:	加算体系ﾏｽﾀ 挿入ﾁｪｯｸ
//*		Name		:	H.Endo
//*		Date		:	2001/06/28
//*		Parameter	:	DragCode	:	挿入元
//*						DropCode	:	挿入先
//*		Return		:	正常(true)/異常(false)
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.fnCheckMasterTreeInsertValid(DragCode,DropCode: String): Boolean;
var
	iCount  : Integer;
	cNode   : TTreeNode;
	WorkRec	: ^TreeViewRec;
begin
	for iCount := 1 to VTreeView.Items.Count do
	begin
		WorkRec   := VTreeView.Items [iCount - 1].Data;

		if  (WorkRec^.strExCode = DropCode) then
		begin
			cNode       := VTreeView.Items [iCount - 1];
			WorkRec   := cNode.Data;

			if  WorkRec^.nDivision = 0 then
			begin
				cNode       := cNode.Parent;
				WorkRec   := cNode.Data;
			end;

			while (true) do
			begin
				if  (WorkRec^.strExCode = DragCode) then
				begin
					Result	:= false;
					Exit;
				end;

				cNode   := cNode.Parent;

				if  (cNode = nil) then
					break
				else
					WorkRec   := cNode.Data;
			end;
		end;
	end;

	result  := true;

end;
//**************************************************************************
//	Proccess  :
//	Name	  :	N.Nabe
//	Date	  :	2004/ 11 / 25
//	Parameter :
//	Retrun	  :
//	History	　:	2000 / 99 / 99	X.Xxxxxx
//				XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.ECombo_HeaderChange(Sender: TObject);
var
	iSumKbn	  : Integer;
//	QueryRead : TMQuery;
//	nReturn	  : Integer;
//	fNoRecord : Boolean;
//    iMastKbn  : Integer;          // <172>
//    nPNCode   : Extended;         // <172>
//    bRet      : Boolean;          // <172>
    strName   : String;           // <222>
//<KSN> ADD St
    iRet      : Integer;
    bLimitOver : Boolean;

    // ================================================
    // 概要：データ読み込み
    // ================================================

    procedure fnRead();
    begin

        m_AcControl := VTreeView;
        // TreeView 作成
        fnRebuildTreeViewItems ();

        // TreeView 作成(はぐれ対応)
        if fnRebuildTreeViewItemsHagure () = false then
            giCloseFlg := 1;

        if giCloseFlg <> 1 then
        begin
            {Grid 初期表示}
	        TBaseNode	:= VTreeView.Items[0];
    	    TBaseNodeSv	:= VTreeView.Items[0];

            LookUpDataSet();										// 税率ﾃﾞｰﾀｾｯﾄ
            iSumKbn		:= 0;										// 実在グリッド

            fnClearCard  (iSumKbn);

            if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
                fnCreateGrid (TBaseNode, iSumKbn);
                JHojyoMA_DMemData.First;
            end;

            iSumKbn		:= 1;										// 合計グリッド

            fnClearCard  (iSumKbn);

            if BSpeedButtonIS.Caption = '詳細(&T)' then
            begin
                fnCreateGrid (TBaseNode, iSumKbn);
                GHojyoMA_DMemData.First;
            end;

            m_fEnd    := 0;									// 終了ﾌﾗｸﾞ初期化
            m_fChange := 0;									// 切り出しﾌﾗｸﾞ初期化
            m_fPrint  := 0;									// 印刷ﾌﾗｸﾞ初期化
            m_fIS     := 0;										// 一覧詳細ﾌﾗｸﾞ初期化
            m_fDel    := 0;									// 削除ﾌﾗｸﾞ初期化
            m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
            m_stGCodeSave := '          ';					// 外部ｺｰﾄﾞｾｰﾌﾞ変数初期化

            MasTreee2Dlg := nil;

            FusenInitialize();								// 付箋初期化

            gbHojyoTree2Flag	:=	false;					// 加算体系２仕様ﾌﾗｸﾞ初期化
            gbHojyoTreeDelFlag	:=	false;					// 削除ﾌﾗｸﾞ初期化
            gbKojiInfo2DelFlag	:=	false;					// 削除ﾌﾗｸﾞ初期化
        end;

    end;
//<KSN> ADD Ed
begin
//<247> ADD St
    PPanelBase.Enabled := True;
    PPanelTree.Enabled := True;
//<247> ADD Ed
    m_SyokuchiFlg   :=  false;  // <120>

    if uvCombChgFlg then
    begin
        uvCombChgFlg := false;
        Exit;
    end;

    (*
    // 何も採用されていない場合
    if ( ECombo_Header.ItemIndex < 0 ) then
    begin
        fnInitialize;
        Exit;
    end;
    *) // <178>

	MemPost_Sw    := 1;
	giChkFlg      := 0;
	giCloseFlg    := 0;
	giTokusyuFlg  := 0;
//<TAX> DEL	giHasuu       := 0;
	m_SearchInfo.sKojCD := '';
	m_bMsgFlg     := false;
	m_bFieldFlg   := false;
	m_bModeChg    := false;
	giReferFlag	  := NORMAL;

    // VTreeViewChangeの処理を実行しないようにﾌﾗｸﾞを立てる <107>
	m_fAccessTree := false;

    // 共通で使用するﾏｽﾀ区分に値を設定
    m_nMasterDivision := m_arAdoptInfo [ECombo_Header.ItemIndex].nMasterDivision;

    // ﾏｽﾀ基本情報読込み
	fnMasterInfoRead();

    Root_PMTab.Items[0].Caption := '実在' + MasterInfo_DMemDataJHojyoName.AsString;
    Root_PMTab.Items[1].Caption := '合計' + MasterInfo_DMemDataJHojyoName.AsString;

    bLimitOver := false;  //<KSN> ADD

// <222> ADD starat
    // プロジェクトの場合
    if ( m_pMyAppRecord.m_sParameter <> '1' ) then
    begin
        strName := MasterInfo_DMemDataJHojyoName.AsString;
        if strName = '' then
            strName := 'プロジェクト';
        Jituzai_PMTab.Items[1].Caption      := strName;
        Goukei_PMTab .Items[1].Caption      := strName;

        //<273> St Gali2　プロジェクトの場合、プロジェクト完成振替名称になる
        if TMSeries.IsGalielopt2 then
        begin
            Jituzai_PMTab.Items[2].Caption      := strName+'完成振替';
        end;
        //<273> Ed

    end;
// <222> ADD end

    // 権限情報を取得<104>
    m_cJNTArea.FxPermission;

// <199> MOD start
(*
    if ( m_cJNTArea.IsKessan(true) = 1 ) then		// 決算確定MSG
    begin
        giReferFlag	:= REFER;						// 決算確定の為参照のみ
    end
    else
    begin



        if (m_cJNTArea.IsModify = false) then
        begin
            if (m_cJNTArea.IsAppend = false ) then
            begin
                giReferFlag := REFER;   // 決算確定と同様の処理
            end
            else
            begin
                Jituzai_DdxDBGrid.Options 	:= Jituzai_DdxDBGrid.Options + [egoCanAppend] - [egoCanInsert];
                Goukei_DdxDBGrid.Options 	:= Goukei_DdxDBGrid.Options + [egoCanAppend] - [egoCanInsert];
            end;
        end;




        // ↓<172> ｸﾞﾙｰﾌﾟ会計 翌期更新処理区分の考慮
        // 参照権限の場合は以下の処理は行わない。
        if ( giReferFlag = REFER ) then Exit;
*)
											// 追加権限または修正権限がなしの場合
	if (m_cJNTArea.IsAppend = false) or (m_cJNTArea.IsModify = false) then
    begin
     	giReferFlag	:= REFER;
    end;
                                    		// 決算確定MSG
    if ( m_cJNTArea.IsKessan(true) = 1 ) then
    begin
    	giReferFlag	:= REFER;
    end;

    if (giReferFlag <> REFER) then  		// 参照ﾓｰﾄﾞでない場合
    begin
// <199> MOD end

        // 全社の過年度DBを選択している場合
        if ( m_SyncMaster.m_flgGrpCorp = 0 ) then
        begin
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                if ( MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Oya,
                                        'グループ会計', mjQuestion, mjYesNo, mjDefNO) = mrYES ) then
                begin
                    // 通常のﾏｽﾀ登録として起動する。
                    // 登録したﾏｽﾀについて_RELの作成はしない。(Triggerでﾁｪｯｸを行う)
                    giReferFlag	:= NORMAL;  // 通常ﾓｰﾄﾞ
                end
                else
                begin
                    // 更新ﾎﾞﾀﾝは、入力不可の状態で起動する。
                    // ﾏｽﾀをUpdata、Insertすることはできない。
                    m_cJNTArea.Invalidity;
                    giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
                end;
            end;
        end
        // 子会社(ｸﾞﾙｰﾌﾟ会計採用有)
        else if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 子会社が過年度DBの場合
            if ( m_SyncMaster.m_CEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_K,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;
                giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
            end
            // 親会社が過年度DBの場合
            else if  ( m_SyncMaster.m_PEComKbn5 = 1 ) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_YokukiChk_Ko_O,
                                    'グループ会計', mjInformation, mjOk, mjDefOk);
                m_cJNTArea.Invalidity;
                giReferFlag	:= REFER;	// 参照ﾓｰﾄﾞ
            end;
        end;
        // ↑<172>
// <199> ADD start
    end;     							// 参照ﾓｰﾄﾞでないif文のend
// <199> ADD end
//<KSN> ADD St
    // 詳細画面初期化
    fnClearCard  (0);   // 実在
    fnClearCard  (1);   // 合計
    // 登録件数取得
    giAllCnt := fnHojyoMA_Count(m_nMasterDivision);
    LblRecCnt.Caption := IntToStr(giAllCnt);

    // 加算件数がTreeViewの限界を超えた？
    if fnKasan_Count() >= LIMIT_TREE_COUNT then
    begin
        if (GetStartMode() = 0) then  // 一覧起動になっていたら警告メッセージ
            MjsMessageBoxEx(self,'加算体系の数が膨大なため、詳細画面で起動します。',m_sProgramName,mjInformation,mjOK,mjDefOK);

        SetStartMode(1);
        bLimitOver := true;
    end
    else
    begin
        if ((IsLimitCount() = True) and                                           // 基準となる件数
//<EXP> DEL            (m_APGFILE.GetValue(m_DLG_INFO) = '0') and                            // 毎回問い合わせする
            (DlgInfo = '0') and  //<EXP> ADD
            (Jituzai_PPanel_Grid.Visible or Goukei_PPanel_Grid.Visible)) then     // 一覧画面が表示されている
        begin
            ShowDLG(DLG_START,iRet);                   // 表示方法確認のダイアログを表示

            if iRet = mrOK then
            begin
                // 詳細画面モードに変更
//<EXP> DEL                m_APGFile.SetValue(m_DEFMODE,'1');
                DefMode := '1';  //<EXP> ADD
            end
            else
            begin
                // 一覧画面モードに変更
//<EXP> DEL                m_APGFile.SetValue(m_DEFMODE,'0');
                DefMode := '0';  //<EXP> ADD
            end;
        end;
    end;

    // 詳細画面モード？
    if (GetStartMode() = 1) then
    begin
        TreeView_EventCtrl(VTreeView,False);
        PPanelTree.Visible := False;
        BSpeedButtonIS.OnClick := BSpeedButtonClick;

        if IsSyosaiMode() = false then
            BSpeedButtonIS.OnClick(BSpeedButtonIS);

        BSpeedButtonDel.Enabled := False;
        BSpeedButtonSort.Enabled := False;
        BSpeedButtonFind.Enabled := False;

        LookUpDataSet();  // 税率ﾃﾞｰﾀｾｯﾄ
    end
    else
    begin
        // 今まで通りデータの読み込み
        fnRead();
//<KSN@> ADD St
        BSpeedButtonSort.Enabled := True;
        BSpeedButtonFind.Enabled := True;
//<KSN@> ADD Ed
    end;

    B_SetUp.Enabled := (bLimitOver = false);   // 「設定」ボタンの可・不可制御

//<MLXDEP>
	if (TMSeries.IsMjsLink3) then
	begin
		PPanelTree.Visible 				:= False;
        LLabel_ECombo_Header.Visible 	:= False;
        ECombo_Header.Visible 			:= False;
		Root_PMTab.Visible				:= False;
        BSpeedButtonIS.Visible			:= False;
        BSpeedButtonSort.Visible		:= False;
        BSpeedButtonFind.Visible		:= False;
        B_ImportWF.Visible				:= False;
        B_GrpSec.Visible				:= False;
        B_SetUp.Visible					:= False;
		ToolBarObjectMove();
	end;
//<MLXDEP>

//<KSN> ADD Ed
//<KSN> DEL St
//  ↑のfnReadへ移動
(*
    m_AcControl := VTreeView;
	// TreeView 作成
	fnRebuildTreeViewItems ();

	// TreeView 作成(はぐれ対応)
	if fnRebuildTreeViewItemsHagure () = false then
		giCloseFlg := 1;

	if giCloseFlg <> 1 then
	begin
		{Grid 初期表示}
		TBaseNode	:= VTreeView.Items[0];
		TBaseNodeSv	:= VTreeView.Items[0];

		LookUpDataSet();										// 税率ﾃﾞｰﾀｾｯﾄ
		iSumKbn		:= 0;										// 実在グリッド
//<255> MOD St
{
		fnCreateGrid (TBaseNode, iSumKbn);
		if JHojyoMA_DMemData.Eof = false then
		begin
			JHojyoMA_DMemData.First;
			fnCreateCard (iSumKbn);
		end
		else
			fnClearCard  (iSumKbn);
}
        fnClearCard  (iSumKbn);

        if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
            fnCreateGrid (TBaseNode, iSumKbn);
            JHojyoMA_DMemData.First;
        end;
//<255> MOD Ed

		iSumKbn		:= 1;										// 合計グリッド
//<255> MOD St
{
		fnCreateGrid (TBaseNode, iSumKbn);
		if GHojyoMA_DMemData.Eof = false then
		begin
			GHojyoMA_DMemData.First;
			fnCreateCard (iSumKbn);
		end
		else
			fnClearCard  (iSumKbn);
}
        fnClearCard  (iSumKbn);

        if BSpeedButtonIS.Caption = '詳細(&T)' then
        begin
            fnCreateGrid (TBaseNode, iSumKbn);
            GHojyoMA_DMemData.First;
        end;
//<255> MOD Ed

		m_fEnd    := 0;									// 終了ﾌﾗｸﾞ初期化
		m_fChange := 0;									// 切り出しﾌﾗｸﾞ初期化
		m_fPrint  := 0;									// 印刷ﾌﾗｸﾞ初期化
		m_fIS     := 0;										// 一覧詳細ﾌﾗｸﾞ初期化
		m_fDel    := 0;									// 削除ﾌﾗｸﾞ初期化
		m_fTreeClk := 0;								// TreeClickﾌﾗｸﾞ初期化
		m_stGCodeSave := '          ';					// 外部ｺｰﾄﾞｾｰﾌﾞ変数初期化

		MasTreee2Dlg := nil;

		FusenInitialize();								// 付箋初期化

    	gbHojyoTree2Flag	:=	false;					// 加算体系２仕様ﾌﾗｸﾞ初期化
		gbHojyoTreeDelFlag	:=	false;					// 削除ﾌﾗｸﾞ初期化
		gbKojiInfo2DelFlag	:=	false;					// 削除ﾌﾗｸﾞ初期化

// <199> ADD start
		if (giReferFlag <> REFER) then 		// 参照ﾓｰﾄﾞでない場合はｸﾞﾙｰﾌﾟ管理処理をする
        begin
// <199> ADD end

        // -------------------------------------------------------------------------
        //  ｸﾞﾙｰﾌﾟ管理処理 <172>
        //
        //  親子間の採用区分、ｺｰﾄﾞ属性、桁数の整合性ﾁｪｯｸを行う
        // -------------------------------------------------------------------------
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            case m_SyncMaster.fnChkP_MasterInfo ( m_nMasterDivision ) of
                // 正常
                JNTSYNC_RET_MASCHK_OK:
                    begin

                    end;
                // 全社では採用なし
                JNTSYNC_RET_MASCHK_NO_USE:
                    begin
                        MjsMessageBoxEx(Self, JNTSYNC_MSG_NO_USE,
                                    'マスタ同期', mjInformation, mjOk, mjDefOk);
                        Abort;
                        Exit;
                    end;
                // 属性・桁数違う
                JNTSYNC_RET_MASCHK_DIFF_C:
                    begin
                        MjsMessageBoxEx(Self, JNTSYNC_MSG_DIFF_C,
                                    'マスタ同期', mjInformation, mjOk, mjDefOk);
                        Abort;
                        Exit;
                    end;
                // 採用区分違う
                JNTSYNC_RET_MASCHK_DIFF_U:
                    begin
                        MjsMessageBoxEx(Self, JNTSYNC_MSG_DIFF_U,
                                    'マスタ同期', mjInformation, mjOk, mjDefOk);
                        Abort;
                        Exit;
                    end;
                // 異常
                JNTSYNC_RET_MASCHK_ERR:
                    begin   // 例外ｴﾗｰ
                        Abort;
                        Exit;
                    end;
            end;

            // 未配信ﾏｽﾀの考慮として、同期ﾌﾟﾛｼｼﾞｬの起動。

            // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
            MDataModule^.BeginTran( dbCorp_Select );

            // HojyoMA
            if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_HojyoMA, 0) = false ) then
            begin
                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback ( dbCorp_Select );
                Abort;
                Exit;
            end;

            // KojiInfo
            if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_KojiInfo, 1) = false ) then
            begin
                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback ( dbCorp_Select );
                Abort;
                Exit;
            end;

            // KojiInfo2
            if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_KojiInfo2, 1) = false ) then
            begin
                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                MDataModule^.Rollback ( dbCorp_Select );
                Abort;
                Exit;
            end;

            // 子会社DBに対してｺﾐｯﾄを実行する
            MDataModule^.Commit ( dbCorp_Select );
        end;
        // ↑↑↑<172>
        // -------------------------------------------------------------------------

        // ↓↓↓<172>諸口の同期配信
        QueryRead := TMQuery.Create ( Self );

        try
            MDataModule^.SetDBInfoToQuery ( dbCorp_Select, QueryRead );

            with QueryRead do
            begin
                // 自社に諸口が登録済かﾁｪｯｸ
                Close();
                SQL.Clear();
//<255> DEL                SQL.Add('SELECT * FROM HojyoMA          ');
                SQL.Add('SELECT NCode FROM HojyoMA          ');  //<255> ADD
                SQL.Add('WHERE MasterKbn   = :pMstKbn   ');
                SQL.Add('  AND Syokuchikbn = 1          ');
                SQL.Add('  AND RDelKbn     = 0          ');
                ParamByName('pMstKbn').AsInteger := m_nMasterDivision;

                if ( Open() = false ) then
                begin
                    // SQLｴﾗｰ
                    ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, QueryRead );
                    with MjsMsgRec do
                        MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                    Exit;
                end;

                // 既に諸口ﾃﾞｰﾀが登録済みの場合、諸口登録DLGは表示しない
                if	( not EOF ) then
                begin
                    giChkFlg      := 1;
                    m_SyokuchiFlg := true;   // 有<120>
                end
                else
                begin
                    m_SyokuchiFlg := false;  // 無<120>
                end;

                Close();
            end;

            if ( m_SyokuchiFlg = false ) then
            begin
                if ( giReferFlag <> REFER ) then
                begin
                    // ----------------------
                    //      ｸﾞﾙｰﾌﾟ管理
                    // ----------------------
                    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                    begin
                        // TMQueryをCloseする
                        QueryRead.Close();
                        // 親会社DBとMQueryの接続
                        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, QueryRead );

                        // 補助ﾏｽﾀの同期関連付
                        QueryRead.Close();
                        QueryRead.SQL.Clear();
//<255> DEL                        QueryRead.SQL.Add('select * from HojyoMA        ');
                        QueryRead.SQL.Add('select MasterKbn,NCode from HojyoMA        ');  //<255> ADD
                        QueryRead.SQL.Add('where MasterKbn = :pMstKbn   ');
                        QueryRead.SQL.Add(' and  Syokuchikbn = 1        ');
                        QueryRead.SQL.Add(' and  RDelKbn     = 0        ');
                        QueryRead.ParamByName('pMstKbn').AsInteger := m_nMasterDivision;

                        if ( QueryRead.Open() = false ) then
                        begin
                            // SQLｴﾗｰ
                            ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, QueryRead );
                            with MjsMsgRec do
                                MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                            Abort;
                        end;

                        // 親会社DBに「諸口」が存在していた場合は、諸口ﾏｽﾀ同期処理を行う
                        if ( not QueryRead.Eof ) then
                        begin
                            iMastKbn := QueryRead.GetFld('MasterKbn').AsInteger;
                            nPNCode  := QueryRead.GetFld('NCode'    ).AsFloat;

                            // 親会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                            MDataModule^.BeginTran( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してﾄﾗﾝｻﾞｸｼｮﾝを開始する
                            MDataModule^.BeginTran( dbCorp_Select );

                            try
                                QueryRead.Close();
                                QueryRead.SQL.Clear();
//<255> DEL                                QueryRead.SQL.Add('select * from HojyoMA_Rel           ');
                                QueryRead.SQL.Add('select NCode from HojyoMA_Rel           ');  //<255> ADD
                                QueryRead.SQL.Add('where MasterKbn   = :pMstKbn        ');
                                QueryRead.SQL.Add(' and  NCode       = :pNCode         ');
                                QueryRead.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode   ');
                                QueryRead.ParamByName('pMstKbn'     ).AsInteger := m_nMasterDivision;
//<255> MOD St
//                                QueryRead.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                                QueryRead.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                                QueryRead.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                                QueryRead.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                                if ( QueryRead.Open() = false ) then
                                begin
                                    // SQLｴﾗｰ
                                    ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, QueryRead );
                                    with MjsMsgRec do
                                        MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                                    Abort;
                                end;

                                if ( QueryRead.Eof ) then
                                        bRet := true
                                else    bRet := false;

                                // 親会社のHojyoMA_Relの更新
                                if ( bRet ) then    // 新規挿入
                                begin
                                    QueryRead.Close();
                                    QueryRead.SQL.Clear();
                                    QueryRead.SQL.Add('insert into HojyoMA_Rel (                ');
                                    QueryRead.SQL.Add(' MasterKbn,NCode,GrpSegNCode,RDelKbn_REL ');
                                    QueryRead.SQL.Add(') values (                               ');
                                    QueryRead.SQL.Add(' :pMstKbn,:pNCode,:pGrpSegNCode,0)       ');
                                end
                                else                // 更新
                                begin
                                    QueryRead.Close();
                                    QueryRead.SQL.Clear();
                                    QueryRead.SQL.Add('update HojyoMA_Rel set                    ');
                                    QueryRead.SQL.Add('    RDelKbn_REL = 0                       ');
                                    QueryRead.SQL.Add('   ,UpdDateTM   = CURRENT_TIMESTAMP       ');
                                    QueryRead.SQL.Add('where  MasterKbn   = :pMstKbn             ');
                                    QueryRead.SQL.Add('  and  NCode       = :pNCode              ');
                                    QueryRead.SQL.Add('  and  GrpSegNCode = :pGrpSegNCode        ');
                                end;

                                QueryRead.ParamByName('pMstKbn'     ).AsInteger := m_nMasterDivision;
//<255> MOD St
//                                QueryRead.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                                QueryRead.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                                QueryRead.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                                QueryRead.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                                if ( QueryRead.ExecSQL = false ) then
                                begin
                                    MjsMessageBoxEx (Self,
                                                     '自社への関連付けに失敗しました。',
                                                     'マスタ同期', mjError, mjOk, mjDefOk);
                                    Abort;
                                end;

                                // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                                if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_HojyoMA, 0) = false ) then
                                begin
                                    // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                    MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                    MDataModule^.Rollback ( dbCorp_Select );
                                    Abort;
                                end;

                                QueryRead.Close();
                                QueryRead.SQL.Clear();
//<255> DEL                                QueryRead.SQL.Add('select * from KojiInfo_Rel          ');
                                QueryRead.SQL.Add('select NCode from KojiInfo_Rel          ');  //<255> ADD
                                QueryRead.SQL.Add('where MasterKbn   = :pMstKbn        ');
                                QueryRead.SQL.Add(' and  NCode       = :pNCode         ');
                                QueryRead.SQL.Add(' and  GrpSegNCode = :pGrpSegNCode   ');
                                QueryRead.ParamByName('pMstKbn'     ).AsInteger := m_nMasterDivision;
//<255> MOD St
//                                QueryRead.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                                QueryRead.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                                QueryRead.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                                QueryRead.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                                if ( QueryRead.Open() = false ) then
                                begin
                                    // SQLｴﾗｰ
                                    ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, QueryRead );
                                    with MjsMsgRec do
                                        MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                                    Abort;
                                end;

                                if ( QueryRead.Eof ) then
                                        bRet := true
                                else    bRet := false;

                                // 親会社のHojyoMA_Relの更新
                                if ( bRet ) then    // 新規挿入
                                begin
                                    QueryRead.Close();
                                    QueryRead.SQL.Clear();
                                    QueryRead.SQL.Add('insert into KojiInfo_Rel (               ');
                                    QueryRead.SQL.Add(' MasterKbn,NCode,GrpSegNCode,RDelKbn_REL ');
                                    QueryRead.SQL.Add(') values (                               ');
                                    QueryRead.SQL.Add(' :pMstKbn,:pNCode,:pGrpSegNCode,0)       ');
                                end
                                else                // 更新
                                begin
                                    QueryRead.Close();
                                    QueryRead.SQL.Clear();
                                    QueryRead.SQL.Add('update KojiInfo_Rel set                   ');
                                    QueryRead.SQL.Add('    RDelKbn_REL = 0                       ');
                                    QueryRead.SQL.Add('   ,UpdDateTM   = CURRENT_TIMESTAMP       ');
                                    QueryRead.SQL.Add('where  MasterKbn   = :pMstKbn             ');
                                    QueryRead.SQL.Add('  and  NCode       = :pNCode              ');
                                    QueryRead.SQL.Add('  and  GrpSegNCode = :pGrpSegNCode        ');
                                end;

                                QueryRead.ParamByName('pMstKbn'     ).AsInteger := m_nMasterDivision;
//<255> MOD St
//                                QueryRead.ParamByName('pNCode'      ).AsFloat   := nPNCode;
//                                QueryRead.ParamByName('pGrpSegNCode').AsFloat   := m_SyncMaster.m_nSegNCode;
                                QueryRead.ParamByName('pNCode'      ).AsString   := FormatFloat('0',nPNCode);
                                QueryRead.ParamByName('pGrpSegNCode').AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);
//<255> MOD Ed

                                if ( QueryRead.ExecSQL = false ) then
                                begin
                                    MjsMessageBoxEx (Self,
                                                     '自社への関連付けに失敗しました。',
                                                     'マスタ同期', mjError, mjOk, mjDefOk);
                                    Abort;
                                end;

                                // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                                if ( m_SyncMaster.fnCall_SYNC(JNTSYNC_KojiInfo, 1) = false ) then
                                begin
                                    // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                    MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                    // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                    MDataModule^.Rollback ( dbCorp_Select );
                                    Abort;
                                end;

                                // <186> - ST
                                // 親社のSecHojyoDispInfoのﾒﾝﾃを行う

                                QueryRead.Close();
                                QueryRead.SQL.Clear();
//<255> DEL                                QueryRead.SQL.Add('select * from SecHojyoDispInfo   ');
                                QueryRead.SQL.Add('select NCode from SecHojyoDispInfo   ');  //<255> ADD
                                QueryRead.SQL.Add('where Opekbn          = :Opekbn  ');  // 使用区分
                                QueryRead.SQL.Add('  and Masterkbn       = :Mstkbn  ');  // ﾏｽﾀ区分(101～110)
                                QueryRead.SQL.Add('  and PlaceNCode      = :PNCode  ');  // ｾｸﾞﾒﾝﾄ内部ｺｰﾄﾞ
                                QueryRead.SQL.Add('  and NoDispMasterkbn = :NMstKbn ');  // ﾏｽﾀ区分
                                QueryRead.SQL.Add('  and NCode           = :NCode   ');  // 内部ｺｰﾄﾞ

                                QueryRead.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                                QueryRead.ParamByName('Mstkbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL                                QueryRead.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                                QueryRead.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD
                                QueryRead.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL                                QueryRead.ParamByName('NCode'  ).AsFloat   := nPNCode;
                                QueryRead.ParamByName('NCode'  ).AsString   := FormatFloat('0',nPNCode);  //<255> ADD

                                //  ｴﾗｰの判定
                                if	( not QueryRead.Open() ) then
                                begin
                                    ComArea.m_MsgStd.GetMsgDB ( MjsMsgRec, QueryRead );
                                    with MjsMsgRec do
                                        MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                                    Abort;
                                end;

                                // 該当ﾚｺｰﾄﾞが存在していない場合は、表示ﾚｺｰﾄを生成する。
                                if	( QueryRead.Eof ) then
                                begin
                                    QueryRead.Close();
                                    QueryRead.SQL.Clear();
                                    QueryRead.SQL.Add('insert into SecHojyoDispInfo  ( ');
                                    QueryRead.SQL.Add(' Opekbn,Masterkbn,PlaceNCode,   ');
                                    QueryRead.SQL.Add(' NoDispMasterKbn,NCode,DispKbn, ');
                                    QueryRead.SQL.Add(' UpdateTime ) values (          ');
                                    QueryRead.SQL.Add(' :Opekbn,:Mstkbn,:PNCode,       ');
                                    QueryRead.SQL.Add(' :NMstKbn,:NCode,:DispKbn,      ');
                                    QueryRead.SQL.Add(' CURRENT_TIMESTAMP )            ');

                                    QueryRead.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                                    QueryRead.ParamByName('Mstkbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
                                    QueryRead.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                                    QueryRead.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
                                    QueryRead.ParamByName('NCode'  ).AsFloat   := nPNCode;
                                    QueryRead.ParamByName('DispKbn').AsInteger := DISP_ON;

                                    if	( not QueryRead.ExecSQL() ) then
                                    begin
                                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                        MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                        MDataModule^.Rollback ( dbCorp_Select );
                                        Abort;
                                    end;
                                end
                                else
                                begin
                                    QueryRead.Close();
                                    QueryRead.SQL.Clear();
                                    QueryRead.SQL.Add('update SecHojyoDispInfo set      ');
                                    QueryRead.SQL.Add(' DispKbn    = :DispKbn,          ');
                                    QueryRead.SQL.Add(' UpdateTime = CURRENT_TIMESTAMP  ');
                                    QueryRead.SQL.Add('where Opekbn          = :Opekbn  ');
                                    QueryRead.SQL.Add('  and Masterkbn       = :MstKbn  ');
                                    QueryRead.SQL.Add('  and PlaceNCode      = :PNCode  ');
                                    QueryRead.SQL.Add('  and NoDispMasterKbn = :NMstKbn ');
                                    QueryRead.SQL.Add('  and NCode           = :NCode   ');

                                    QueryRead.ParamByName('Opekbn' ).AsInteger := OPE_GROUP;
                                    QueryRead.ParamByName('MstKbn' ).AsInteger := m_SyncMaster.m_SecMasterKbn;
//<255> DEL                                    QueryRead.ParamByName('PNCode' ).AsFloat   := m_SyncMaster.m_nSegNCode;
                                    QueryRead.ParamByName('PNCode' ).AsString   := FormatFloat('0',m_SyncMaster.m_nSegNCode);  //<255> ADD
                                    QueryRead.ParamByName('NMstKbn').AsInteger := m_nMasterDivision;
//<255> DEL                                    QueryRead.ParamByName('NCode'  ).AsFloat   := nPNCode;
                                    QueryRead.ParamByName('NCode'  ).AsString   := FormatFloat('0',nPNCode);  //<255> ADD
                                    QueryRead.ParamByName('DispKbn').AsInteger := DISP_ON;

                                    if	( not QueryRead.ExecSQL() ) then
                                    begin
                                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                        MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                        MDataModule^.Rollback ( dbCorp_Select );
                                        Abort;
                                    end;
                                end;
                                // <186> - ED
                            except
                                // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                MDataModule^.Rollback ( m_SyncMaster.m_cPDBSelect );
                                // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                                MDataModule^.Rollback ( dbCorp_Select );
                                Abort;
                            end;

                            // 親会社DBに対してｺﾐｯﾄを実行する
                            MDataModule^.Commit ( m_SyncMaster.m_cPDBSelect );
                            // 子会社DBに対してｺﾐｯﾄを実行する
                            MDataModule^.Commit ( dbCorp_Select );
                            // 諸口ﾌﾗｸﾞON
                            m_SyokuchiFlg := true;
                        end;
                    end;
                end;
            end;

            QueryRead.Close();
            MDataModule^.SetDBInfoToQuery ( dbCorp_Select, QueryRead );

            // 登録件数表示
            QueryRead.Close();
            QueryRead.SQL.Clear();
            QueryRead.SQL.Add('Select Count(NCode) As Kensu from HojyoMA');  //<255> ADD
            QueryRead.SQL.Add('Where MasterKbn=:pMKBN and RDelKbn=0 ');
            QueryRead.ParamByName('pMKBN').AsInteger := m_nMasterDivision;
            QueryRead.Open;

            giAllCnt := QueryRead.GetFld('Kensu').AsInteger;

            LblRecCnt.Caption := IntToStr(giAllCnt);

        finally
            QueryRead.Close();
            QueryRead.Free();
        end;

// <199> ADD end
       	end;								// 参照ﾓｰﾄﾞでない場合のif文のend
// <199> ADD end
	end;
*)
//<KSN> DEL Ed
//	メール会計によって通常処理・基本のみ設定・参照を切り替える
//	(NORMAL:通常処理,BASICONLY:基本のみ設定可能,REFER:参照のみ)

{	KojiMaster	:=	MailEntCheck(dbCorp_Select,MDataModule,ComArea,m_nMasterDivision,1);	//	ﾒｰﾙ会計登録権利をCheck
	case KojiMaster of
		DISPOSE_SETTLE,	//	決算確定の為参照のみ
		DISPOSE_OFFLINELICENSE: // オフラインのため参照のみ
		begin
			giReferFlag	:=	REFER;
		end;
		DISPOSE_MAILNOTUSE,		//	メール未採用の為通常処理
		DISPOSE_USUALLY:		//	通常処理
		begin
			giReferFlag	:=	NORMAL;
		end;
		DISPOSE_BASIC:			//	基本のみ設定可能
		begin
			giReferFlag	:=	BASICONLY;
		end;
		DISPOSE_REFER:	giReferFlag	:=	REFER;	//	参照のみ
	end;
}
    // 画面の初期化
    fnInitialize;

    // ↓↓↓<120>
//<MLXDEP> DEL    if ( m_SyokuchiFlg ) then   //<MLXDEP> コメント解除時は削除
    if ( m_SyokuchiFlg ) or (TMSeries.IsMjsLink3) then  //<MLXDEP> ADD
    begin
        Jituzai_PPanel_Grid .Enabled    :=  true;
        Goukei_PPanel_Grid  .Enabled    :=  true;
        Jituzai_PPanel_Card .Enabled    :=  true;
        Goukei_PPanel_Card  .Enabled    :=  true;
        Root_PMTab          .Enabled    :=  true;
//<KSN> DEL        BSpeedButtonIS      .Enabled    :=  true;
        BSpeedButtonIS.Enabled := (bLimitOver = false);  //<KSN> ADD
//<PRN2>        BSpeedButtonPrn     .Enabled    :=  false;  // とりあえず現在印刷機能がないのでfalseとします。
        BSpeedButtonPrn     .Enabled    :=  m_cJNTArea.IsPrint;		//<PRN2>
        BSpeedButtonDel     .Enabled    :=  m_cJNTArea.IsDelete;
//<KSN@> DEL        BSpeedButtonSort    .Enabled    :=  true;
//<KSN@> DEL        BSpeedButtonFind    .Enabled    :=  true;

		B_GrpSec            .Enabled    :=  true;	//<217>
// <225> ADD start
		// 申請書参照ﾎﾞﾀﾝの有効/無効切替
											// 追加権限および修正権限がありの場合
		if ( m_cJNTArea.IsAppend = true ) and ( m_cJNTArea.IsModify = true ) then
			    B_ImportWF.Enabled := true
		else    B_ImportWF.Enabled := false;
// <225> ADD end
    end
    else
    begin
        // 諸口ﾀﾞｲｱﾛｸﾞでｷｬﾝｾﾙを選択した場合は以下の処理は行わない!
        Jituzai_PPanel_Grid .Enabled    :=  false;
        Goukei_PPanel_Grid  .Enabled    :=  false;
        Jituzai_PPanel_Card .Enabled    :=  false;
        Goukei_PPanel_Card  .Enabled    :=  false;
        Root_PMTab          .Enabled    :=  false;
        BSpeedButtonIS      .Enabled    :=  false;
        BSpeedButtonPrn     .Enabled    :=  false;
        BSpeedButtonDel     .Enabled    :=  false;
        BSpeedButtonSort    .Enabled    :=  false;
        BSpeedButtonFind    .Enabled    :=  false;

		B_GrpSec            .Enabled    :=  false;	//<217>

        B_ImportWF.Enabled := false;                // <225> ADD
        // ﾌﾟﾛｼﾞｪｸﾄｺﾝﾎﾞへ移動
        ECombo_Header.SetFocus();
        m_EdtSw := false;                       // <148>変更ﾌﾗｸﾞOFF

        Exit;
    end;
    // ↑↑↑<120>

	DisplayControl(giReferFlag);

	if (m_iMailKbn = 1) or (giReferFlag = REFER) then
	begin
		BSpeedButtonDel.Enabled := false;
		TPDelete.Enabled := false;

// <198> MOD start
(*		if giReferFlag = REFER then
//↓2005/01/13 T.Shimada
//			BSpeedButtonFind.Left := 289
			BSpeedButtonFind.Left := Trunc(289 * m_Zoom / 100)
//↑
*)
		if giReferFlag = REFER then
        begin
    								// 追加権限ありおよび修正権限ありの場合
         	if (m_cJNTArea.IsAppend) and (m_cJNTArea.IsModify) then
            begin
				BSpeedButtonFind.Left := Trunc(289 * m_Zoom / 100);
            end;


        end
// <198> MOD end

		else
		begin
//↓2005/01/13 T.Shimada
//			BSpeedButtonSort.Left := 289;
//			BSpeedButtonFind.Left := 385;
//			LVStyleBar.Left := 466;
			BSpeedButtonSort.Left := Trunc(289 * m_Zoom / 100);
			BSpeedButtonFind.Left := Trunc(385 * m_Zoom / 100);
			LVStyleBar.Left := Trunc(466 * m_Zoom / 100);
//↑
		end;
	end;


	if giReferFlag = BASICONLY then
	begin
		BSpeedButtonIS.Visible := false;
		TPDetail.Visible := false;
	end;

	m_fAccessTree   := true;
	m_fAccessTab    := true;
	m_fAccessTabJ   := true;
	m_fAccessTabG   := true;
	gbTreeClick 	:= false;

	MemPost_Sw	:= 0;

    {フォーカス初期処理}
    if m_bFirstFlag = false then
    begin
        // 工事の時
        if m_pMyAppRecord.m_sParameter = '1' then
        begin
            PPanel_ECombo.Enabled := false;
            m_AcControl	:= Jituzai_DdxDBGrid;
            Jituzai_DdxDBGrid.FocusedColumn	:= 1;
        end
        else begin
            PPanel_ECombo.Enabled := true;
            m_AcControl := ECombo_Header;
            Jituzai_DdxDBGrid.FocusedColumn := COL_GCODE;   // <136>
        end;

		m_bFirstFlag := true
    end
    else begin
        if giReferFlag <> REFER then
        begin

            Root_PMTab.Items.Selected := PAGE_JITUZAI;

            if BSpeedButtonIS.Caption = '一覧(&T)' then
            begin
                if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                    m_AcControl	:= Jituzai_ETEdit_GCode
                else
                    m_AcControl	:= Jituzai_ENEdit_GCode;
            end
            else begin
                m_AcControl	:= Jituzai_DdxDBGrid;
                Jituzai_DdxDBGrid.FocusedColumn	:= 1;
            end;
        end
        else
        begin
            m_AcControl	:= VTreeView;
        end;
    end;

	if m_iAccProKbn = 0 then
	begin
		Jituzai_DdxDBGrid_KeiTax_Rate.TabStop := false;
		Jituzai_DdxDBGrid_KeiSales_Tax.TabStop := false;
		Goukei_DdxDBGrid_KeiTax_Rate.TabStop := false;
		Goukei_DdxDBGrid_KeiSales_Tax.TabStop := false;

		// 表示形式変更
		JKeiyaku_DMemDataTax_Rate.DisplayFormat  := '###,###';
		JKeiyaku_DMemDataSales_Tax.DisplayFormat := '###,###,###,###,###';
		GKeiyaku_DMemDataTax_Rate.DisplayFormat  := '###,###';
		GKeiyaku_DMemDataSales_Tax.DisplayFormat := '###,###,###,###,###';

		ppDBText56.DisplayFormat := '###,###';
		ppDBText57.DisplayFormat := '###,###,###,###,###';
		ppDBText61.DisplayFormat := '###,###';
		ppDBText62.DisplayFormat := '###,###,###,###,###';
		ppDBText66.DisplayFormat := '###,###';
		ppDBText67.DisplayFormat := '###,###,###,###,###';
		ppDBText69.DisplayFormat := '###,###,###,###,###';
// <SEI> ADD start
		Jituzai_DdxDBGrid_SeikyuTax_Rate.TabStop := false;
		Jituzai_DdxDBGrid_SeikyuSales_Tax.TabStop := false;
		Goukei_DdxDBGrid_SeikyuTax_Rate.TabStop := false;
		Goukei_DdxDBGrid_SeikyuSales_Tax.TabStop := false;

		// 表示形式変更
		JSeikyu_DMemDataTax_Rate.DisplayFormat  := '###,###';
		JSeikyu_DMemDataSales_Tax.DisplayFormat := '###,###,###,###,###';
		GSeikyu_DMemDataTax_Rate.DisplayFormat  := '###,###';
		GSeikyu_DMemDataSales_Tax.DisplayFormat := '###,###,###,###,###';
// <SEI> ADD end
	end;

	// 付箋フィールド非表示
	Jituzai_LLabel_Fusen.Visible             := false;
	Jituzai_ImageLowered_FusenRed.Visible    := false;
	Jituzai_ImageLowered_FusenGreen.Visible  := false;
	Jituzai_ImageLowered_FusenBlue.Visible   := false;
	Jituzai_ImageLowered_FusenOrange.Visible := false;
	Jituzai_ImageRaised_FusenRed.Visible     := false;
	Jituzai_ImageRaised_FusenGreen.Visible   := false;
	Jituzai_ImageRaised_FusenBlue.Visible    := false;
	Jituzai_ImageRaised_FusenOrange.Visible  := false;
	Jituzai_ETEdit_Fusen.Visible             := false;
	ppLabel35.Visible                        := false;
	ppDBText30.Visible                       := false;

	MLabel18.Visible                         := false;
	Goukei_ImageLowered_FusenRed.Visible     := false;
	Goukei_ImageLowered_FusenGreen.Visible   := false;
	Goukei_ImageLowered_FusenBlue.Visible    := false;
	Goukei_ImageLowered_FusenOrange.Visible  := false;
	Goukei_ImageRaised_FusenRed.Visible      := false;
	Goukei_ImageRaised_FusenGreen.Visible    := false;
	Goukei_ImageRaised_FusenBlue.Visible     := false;
	Goukei_ImageRaised_FusenOrange.Visible   := false;
	Goukei_ETEdit_Fusen.Visible              := false;
	ppLabel108.Visible                       := false;
	ppDBText99.Visible                       := false;

//<KSN> ADD St
    if (Jituzai_PPanel_Grid.Visible) then
        m_AcControl := Jituzai_DdxDBGrid
    else
    begin
        if (Jituzai_ETEdit_GCode.CanFocus) then
            m_AcControl := Jituzai_ETEdit_GCode
        else
            m_AcControl := Jituzai_ENEdit_GCode;
    end;
//<KSN> ADD Ed
    // ﾌｫｰｶｽを移動
    m_AcControl.SetFocus;

    m_EdtSw := false;                       // <126>変更ﾌﾗｸﾞOFF

//<KSN> ADD St
    Root_PMTab.Items[2].Visible := GetStartMode() <> 0;
//<EXP> DEL    SetGuidance(m_APGFile.ErrMsg());
//<KSN> ADD Ed

end;
//-----------------------------------------------------------------------------
//  外部コード取得（Retern:String）
//-----------------------------------------------------------------------------
Function TJNTCRP018001f.fnGetGCODE(pCODE:Extended;pMKBN:Integer):String;
var
    Qry :TMQuery;
begin

    Result := '';


    Qry := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            SQL.Clear;
            if pMKBN = MKBN_TORIHIKI then // 取引先
            begin
                SQL.Add   ('SELECT GCODE FROM MTOKUI  ');
                SQL.Add   ('WHERE  NCode = :pCode');
//<255> DEL                ParamByName ('pCode').AsFloat  := pCODE;
                ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
            end
            else if pMKBN = MKBN_SYAIN then // 担当者
            begin
                SQL.Add   ('SELECT GCODE FROM HAPSC  ');
                SQL.Add   ('WHERE  NCode = :pCode');
//<255> DEL    			ParamByName ('pCode').AsFloat  := pCODE;
    			ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
            end
// <205> ADD start
            else if (pMKBN = MKBN_SOFU) then //施主
            begin
                SQL.Add('select GCODE from MSOFU ');
                SQL.Add('where NouKbn = 4 and RDelKbn=0 AND NCode=:pCode');
//<255> DEL    			ParamByName ('pCode').AsFloat  := pCODE;
    			ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
            end
// <205> ADD end
            else if (pMKBN >= MKBN_PROBN1) and (pMKBN <= MKBN_PROBN10) then
            begin // ﾌﾟﾛｼﾞｪｸﾄ分類
                SQL.Add   ('SELECT GCODE FROM MMEISHO  ');
                SQL.Add   ('WHERE  NCode = :pCode and SETNM = :pMKBN and RDelKbn = 0');
//<255> DEL    			ParamByName ('pCode').AsFloat  := pCODE;
    			ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
    			ParamByName ('pMkbn').AsInteger  := pMKBN;
            end
            else
            begin // 部門・プロジェクト・汎用補助・ｾｸﾞﾒﾝﾄ
                SQL.Add   ('SELECT GCODE FROM HOJYOMA  ');
                SQL.Add   ('WHERE  NCode = :pCode and MasterKbn = :pMKBN and RDelKbn = 0');
//<255> DEL    			ParamByName ('pCode').AsFloat  := pCODE;
    			ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
    			ParamByName ('pMkbn').AsInteger  := pMKBN;
            end;

            Open;						// ｸｴﾘの開始

            if EOF = false then
                Result := FieldByName('GCODE').asString;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  外部コード取得（Retern:Integer）
//-----------------------------------------------------------------------------
Function TJNTCRP018001f.fnGetGCODE_Int(pCODE:Extended;pMKBN:Integer):Integer;
var
    Qry :TMQuery;
begin

    Result := 0;


    Qry := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            SQL.Clear;
            if pMKBN = 0 then
            begin
                SQL.Add   ('SELECT PtnNo GCODE FROM KousyuPtnMA  ');
                SQL.Add   ('WHERE  NCode = :pCode');
            end
            else
            begin
                SQL.Add   ('SELECT GCODE FROM KmkMA  ');
//<229> DEL                SQL.Add   ('WHERE  NCode = :pCode and SubCode = 0');
                SQL.Add   ('WHERE MasterKbn = 1 AND NCode = :pCode AND RDelKbn = 0');  //<229> ADD
            end;
//<255> DEL            ParamByName ('pCode').AsFloat  := pCODE;
            ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
// <229> MOD start
//            Open;						// ｸｴﾘの開始
            //  ｴﾗｰの判定
            if not Open then
            begin
                ErrorMessageDsp(Qry);
                Exit;
            end;
// <229> MOD end

            if EOF = false then
                Result := FieldByName('GCODE').asInteger;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  内部コード取得
//-----------------------------------------------------------------------------
Function TJNTCRP018001f.fnGetNCODE(pCODE:String;pMKBN,pAttr:Integer):Extended;
var
    Qry :TMQuery;
    lvCode : String;
begin

    Result := 0;
    lvCODE := '';


	if pAttr = 2 then
		lvCODE:= pCODE
	else
	begin
		if pCODE <> '' then
			lvCODE	:= Format ('%.16d', [StrToInt64 (Trim(pCODE))])
		else
			lvCODE := '';
	end;

    Qry := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            if pMKBN = MKBN_TORIHIKI then // 取引先
            begin
                SQL.Add('SELECT NCODE FROM MTOKUI  ');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add(' and TemplateKbn = 0 '     );
            end
            else if pMKBN = MKBN_SYAIN then // 担当者
            begin
                SQL.Add('SELECT NCODE FROM HAPSC  ');
                SQL.Add('where  GCode=:stGCode');
            end
            else if (pMKBN = MKBN_BUMON) or // 部門
                    ((pMKBN >= MKBN_PROJECT1) and (pMKBN <= MKBN_PROJECT10)) or //ﾌﾟﾛｼﾞｪｸﾄ
                    ((pMKBN >= MKBN_SEG1) and (pMKBN <= MKBN_SEG10)) then//ｾｸﾞﾒﾝﾄ
            begin
                SQL.Add('SELECT NCODE FROM HOJYOMA  ');
                SQL.Add('where  MasterKbn = :MKBN AND RDelKbn=0 ');
                SQL.Add(' and   GCode=:stGCode ');
// <204> ADD start
				SQL.Add(' ORDER BY TStartDate desc, InsDateTM desc');
// <204> ADD end

                SetFld('MKBN').asInteger       := pMKbn;
            end
            else if  ((pMKBN >= MKBN_PROBN1) and (pMKBN <= MKBN_PROBN10)) then
            begin
                SQL.Add('select NCODE from MMEISHO');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('       AND SetNM =:MKBN');
                SetFld('MKBN').asInteger   := pMKBN;
            end
// <205> ADD start
            else if (pMKBN = MKBN_SOFU) then //施主
            begin
                SQL.Add('select NCODE from MSOFU ');
                SQL.Add('where NouKbn = 4 and RDelKbn=0 AND GCode=:stGCode');
            end;
// <205> ADD end
            SetFld('stGCode').AsString := lvCODE;
            Open;						// ｸｴﾘの開始

            if EOF = false then
                Result := FieldByName('NCODE').asFloat;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  工種の内部コード取得
//-----------------------------------------------------------------------------
Function TJNTCRP018001f.fnGetNCODE_KS(pCODE:Integer):Extended;
var
    Qry :TMQuery;
begin

    Result := 0;

    Qry := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            SQL.Add('SELECT NCODE FROM KousyuPtnMA  ');
            SQL.Add('where PtnNo = :iCode and RDelKbn = 0 and Masterkbn = ');
            SQL.Add(IntToStr(m_arAdoptInfo [ECombo_Header.ItemIndex].nMasterDivision + 100));

            SetFld('iCode').AsInteger := pCODE;
            Open;						// ｸｴﾘの開始

            if EOF = false then
                Result := FieldByName('NCODE').asFloat;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;
//-----------------------------------------------------------------------------
//  工事完成の部分をセット
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.MMasterKBNChange(Sender: TObject);
//var
//    Qry     : TMQuery;
//	uaNCode : array[1..10] of Extended;
//    i       : Integer;
//    lvSql   : String;
//    lvCnt   : Integer;
//    lvCode  : String;
//    iCode   : Integer;
//    iCut    : Integer;

begin
//<162> - ST
{
    lvCnt   :=  0;

    // ﾏｽﾀ区分ｺﾝﾎﾞのItemが未選択の場合はExit
    if MMasterKBN.itemindex < 0 then
        Exit;

    // MemDataをOpen
    if JKansei.Active = true then
        JKansei.Close;
    JKansei.Open;

    // Queryの作成
    Qry	:= TMQuery.Create(Self);
    MDataModule^.SetDBInfoToQuery(dbCorp_Select, Qry);

    // 内部ｺｰﾄﾞ保存用ﾜｰｸの初期化
    for i := 1 to 10 do
        uaNCode[i] := 0;

    if MMasterKBN.itemIndex      = 0 then                   // ﾌﾟﾛｼﾞｪｸﾄ
    begin
        lvCnt := 10;
        lvSql := 'Prj';
    end
    else if MMasterKBN.itemIndex = 1 then                   // 汎用補助
    begin
        lvCnt := 5;
        lvSql := 'Hoj';
    end
    else if MMasterKBN.itemIndex = 2 then                   // ｾｸﾞﾒﾝﾄ
    begin
        lvCnt := 10;
        lvSql := 'Seg';
    end;

    try
        with Qry do
        begin
            Close;
            Sql.Clear;
            SQL.Add('Select * From KojiInfo ko'+
                    ' Where MasterKbn = :iMasterKbn and NCode = :NCode');

            SetFld('iMasterKbn').AsInteger := m_nMasterDivision;
            SetFld('NCode').AsFloat        := JHojyoMA_DMemDataNCode.AsFloat;
            Open;

            if not Eof then
            begin
                // 配列に内部ｺｰﾄﾞをｾｯﾄ
                for i := 1 to lvCnt do
                    uaNCode[i] := FieldByName(lvSql +  IntToStr(i) + 'NCODE').AsFloat;
            end;

            Close;
            Sql.Clear;
            Sql.add('select MasterKbn,JHojyoName,CodeAttr,CodeDigit From MasterInfo ');

            if MMasterKBN.itemIndex      = 0 then           // ﾌﾟﾛｼﾞｪｸﾄ
            begin
                Sql.add( ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
// <108>                        '   and (USEKBN <> 2) and (USEKBN <> 0)');
                         '   and (KOJUSEKBN = 0) and (USEKBN <> 0)');
                ParamByName('pSMKBN').asFloat := MKBN_PROJECT1;
                ParamByName('pEMKBN').asFloat := MKBN_PROJECT10;
            end
            else if MMasterKBN.itemIndex = 1 then           // 汎用補助
            begin
                Sql.add( ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                         '   and (USEKBN <> 0)');
                ParamByName('pSMKBN').asFloat := MKBN_HHOJYO1;
                ParamByName('pEMKBN').asFloat := MKBN_HHOJYO5;
            end
            else if MMasterKBN.itemIndex = 2 then           // ｾｸﾞﾒﾝﾄ
            begin
                Sql.add( ' Where (MasterKBN Between :pSMKBN and :pEMKBN)'+
                         '   and (USEKBN <> 0)');
                ParamByName('pSMKBN').asFloat := MKBN_SEG1;
                ParamByName('pEMKBN').asFloat := MKBN_SEG10;
            end;

            Open;
            While not eof  do
            begin
                JKansei.Append;
                JKanseiMasterKbn.asInteger := FieldByName('MasterKBN').asInteger;
                JKanseiTitol.asString      := FieldByName('JHojyoName').asString;
                JKanseiCodeAttr.asInteger  := FieldByName('CodeAttr').asInteger;
                JKanseiCodeDigit.asInteger := FieldByName('CodeDigit').asInteger;
                if MMasterKBN.itemIndex = 1 then
                    i := StrToInt(Copy(IntToStr(FieldByName('MasterKBN').asInteger),2,1))
                else
                    i := StrToInt(Copy(IntToStr(FieldByName('MasterKBN').asInteger),2,2));

                //外部コードを取得
                lvCode := '';
                lvCode := fnGetGCODE(uaNCode[i],FieldByName('MasterKBN').asInteger);

                if FieldByName('CodeAttr').asInteger <> 2 then
                begin
                    if FieldByName('CodeAttr').asInteger = 1 then
                    begin
                        if lvCode <> '' then
                        begin
                            iCut := 16 - FieldByName('CodeDigit').asInteger;
                            System.Delete(lvCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if lvCode <> '' then
                        begin
                            iCode := StrToInt64(Trim(lvCode));
                            lvCode := IntToStr(iCode);
                        end;
                    end;
                end;
                JKanseiGCODE.AsString		:= lvCode;
    			JKansei.Post;
                Next;
            end;
            JKansei.First;
        end;
    Finally
        Qry.Close;
        Qry.Free;
    end;
}
	if MMasterKBN.DroppedDown = true then
		exit
	else
		fnKanseiFuriInfoDsp();
//<162> - ED
end;
//-----------------------------------------------------------------------------
//  工事完成振替の名称部分をセット
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.JKanseiCalcFields(DataSet: TDataSet);
var
    Qry : TMQuery;
begin

    m_MExistFlg := true;

    if JKanseiGCODE.asString = '' then Exit;

    JKanseiNAME.asString := '';
    JKanseiNCode.asFloat := 0;

    Qry		:= TMQuery.Create(Self);
    MDataModule^.SetDBInfoToQuery(dbCorp_Select, Qry);

    Try
        with Qry do
        begin
            Close;
            Sql.Clear;

{
            if MMasterKBN.itemIndex = 2 then
            begin
                Sql.add(' Select NM LongName,NCODE from MMEISHO '+
                        ' Where (SetNM = :MKBN)'+
                        '   and (GCODE = :GCODE) and (RDelKBN = 0)');
            end
            else
            begin
} // <122>
                Sql.add(' Select LongName,NCODE From HOJYOMA '+
                        ' Where (MasterKBN = :MKBN)'+
                        '   and (GCODE = :GCODE) and (RDelKBN = 0)');
// <122>             end;


            ParamByName('MKBN').asInteger := JKanseiMasterKbn.asInteger;

            if JKanseiCodeAttr.asInteger = 2 then
                ParamByName('GCODE').asString := JKanseiGCODE.asString
            else
            begin
                if  JKanseiGCODE.asString <> '' then
                    ParamByName('GCODE').asString := Format ('%.16d', [StrToInt64 (Trim(JKanseiGCODE.asString))])
                else
                    ParamByName('GCODE').asString := '';
            end;
            Open;
            if not Eof then
            begin
                JKanseiNAME.asString := FieldByName('LongName').asString;
                JKanseiNCode.asFloat := FieldByName('NCODE').asFloat;
            end
            else
                m_MExistFlg := false;
        end;
    Except
        m_MExistFlg := false;
    end;
    Qry.Close;
    Qry.Free;

end;
//-----------------------------------------------------------------------------
//  工事完成振替のデータをDBに更新する
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnKanseiWrite;
var
    Qry   : TMQuery;
//    lvCnt : Integer;
//<162> - ST
//    lvSql,i : String;
    i 		: Integer;
	sSQL	: String;
//<162> - ED

begin

    if (MMasterKBN.itemIndex < 0) then Exit;
    if (JKansei.recordcount <= 0) then Exit;

    Qry := TMQuery.Create(Self);
    MDataModule^.SetDBInfoToQuery(dbCorp_Select, Qry);

    // ﾄﾗﾝｻﾞｸｼｮﾝの開始
    MDataModule^.BeginTran ( dbCorp_Select );

    // -------------------------------------------------------------------------
    //  ｸﾞﾙｰﾌﾟ管理処理 <172>
    // -------------------------------------------------------------------------
    if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
    begin
        Qry.Close();

        // 親会社DBとMQueryの接続
        MDataModule^.SetDBInfoToQuery ( m_SyncMaster.m_cPDBSelect, Qry );

        // ﾄﾗﾝｻﾞｸｼｮﾝの開始
        MDataModule^.BeginTran ( m_SyncMaster.m_cPDBSelect );
    end;
    // ↑↑↑<172>

//<162> - ST
{
    if MMasterKBN.itemIndex = 0 then //プロジェクト
        lvSql := 'Prj'
    else if MMasterKBN.itemIndex = 1 then//汎用補助
        lvSql := 'Hoj'
    else if MMasterKBN.itemIndex = 2 then//セグメント
        lvSql := 'Seg';

    Try

        JKansei.First;
        While not JKansei.Eof do
        begin
            if MMasterKBN.itemIndex = 1 then
                i := Copy(IntToStr(JKanseiMasterKbn.AsInteger),2,1)
            else
                i := IntToStr(StrToInt(Copy(IntToStr(JKanseiMasterKbn.AsInteger),2,2)));
            with Qry do
            begin
                Close;
                Sql.clear;
                SQL.Add('Update KojiInfo '+
                        'Set '+
                        lvSql +  i + 'NCODE = :Code' +
                        ' Where MasterKbn= :iMasterKbn and NCode=:NCode');

                SetFld('iMasterKbn').AsInteger  := m_nMasterDivision;
                SetFld('NCode').AsFloat  := uvNCODE;
                SetFld('Code').AsFloat   := JKanseiNCODE.asFloat;
                ExecSql;
            end;
            JKansei.Next;
        end;
    Finally
        Qry.Close;
        Qry.Free;
    end;
}
	try
		for i:=1 to 25 do
		begin
			if m_aKanseiFuriInfo[i].UseKbn = 1 then
			begin
				sSQL := '';
				case i of
					1..10 : sSQL := 'Seg'+IntToStr(i);
					11..20: sSQL := 'Prj'+IntToStr(i-10);
					21..25: sSQL := 'Hoj'+IntToStr(i-20);
				end;

    	        with Qry do
        	    begin
            	    Close;
                	Sql.clear;
	                SQL.Add('Update KojiInfo '+
    	                    'Set '+ sSQL + 'NCODE = :Code' +
            	            ' Where MasterKbn= :iMasterKbn and NCode=:NCode');

	                SetFld('iMasterKbn').AsInteger := m_nMasterDivision;
//<255> DEL    	            SetFld('NCode'	   ).AsFloat   := uvNCODE;
    	            SetFld('NCode'	   ).AsString   := FormatFloat('0',uvNCODE);  //<255> ADD
        	        SetFld('Code'	   ).AsFloat   := m_aKanseiFuriInfo[i].NCode;
            	    ExecSql;
	            end;

                // <172> - ST
                if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
                begin
                    // 同期IDﾌﾟﾛｼｰｼﾞｬｰの起動
                    if ( m_SyncMaster.fnCall_SYNC (JNTSYNC_KojiInfo, 1) = false ) then
                    begin
                        // 親会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( m_SyncMaster.m_cPDBSelect );
                        // 子会社DBに対してﾛｰﾙﾊﾞｯｸを実行する
                        MDataModule^.Rollback( dbCorp_Select );
                        Abort;
                    end;
                end;
                // <172> - ED
			end;
		end;

        // ｺﾐｯﾄ(反映)
        MDataModule^.Commit(dbCorp_Select);
        if ( m_SyncMaster.m_flgGrpCorp = 1 ) then
        begin
            // 親会社DBのﾛｰﾙﾊﾞｯｸ
            MDataModule^.Commit ( m_SyncMaster.m_cPDBSelect );
        end;
        // ↑↑↑<172>
    finally
        Qry.Close;
        Qry.Free;
    end;
//<162> - ED

end;
//-----------------------------------------------------------------------------
//　　完成工事振替MemDataのBeforePost
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.JKanseiBeforePost(DataSet: TDataSet);
begin

    //外部コードの存在チェック
    if m_MExistFlg = false then
    begin
        Beep;
        dxKanseiGid.FocusedColumn	:= 1;
        abort;
        exit;
    end;


end;
//-----------------------------------------------------------------------------
//　　工事完成振替グリットがフォーカスを受けた時
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.dxKanseiGidEnter(Sender: TObject);
begin

    //
	m_AcControl := Screen.ActiveControl;

    // 工事完成振替フラグを初期化する
//<162>    m_FRIFlg := false;

end;
//-----------------------------------------------------------------------------
//　　工事完成振替グリットよりフォーカス消失時
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.dxKanseiGidExit(Sender: TObject);
//var
//	sMessage   : String;
//    iRet       : Integer;
begin
//<162> - ST
{
    if m_Close then Exit;

    if m_FRIFlg then
    begin
		sMessage := '登録した振替先コードを更新しますか？';
		iRet := MjsMessageBoxEx(Self,sMessage, '登録',mjQuestion,mjYesNoCancel,mjDefYes);
        case iRet of
            mrYes:
            begin
                Jituzai_BBitBtn_OkClick(Jituzai_BBitBtn_Ok);
            end;
            mrNo,mrCancel:
            begin
                MMasterKBN.ItemIndex := -1;
                MMasterKBNChange(MMasterKBN);
                Exit;
            end;
        end;
    end;
}
//<162> - ED
end;
//-----------------------------------------------------------------------------
//  工事完成振替MemDataのAfterPost
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.JKanseiAfterPost(DataSet: TDataSet);
var
	i	:	Integer;
begin
//<162> - ST
    //工事完成振替フラグをONにする
//    m_FRIFlg := true;

	if m_bFirstFlg = false then
	begin
		for i:=1 to 25 do
		begin
			if JKanseiMasterKbn.asInteger = m_aKanseiFuriInfo[i].MasterKbn then
	        begin
				m_aKanseiFuriInfo[i].NCode := JKanseiNCode.asFloat;
				break;
			end;
		end;
	end;
//<162> - ED
end;
procedure TJNTCRP018001f.ECombo_HeaderKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
// <129>ChildKeyに処理を移動
{	if	((Key = VK_ESCAPE) or (Key = VK_END)) then								// End & Esc
	begin
		Close;
		Abort;
	end;
}

	if	((Key = VK_TAB) and (Shift = [ssShift])) then							// Shift+Tab
		Abort;

    if  (Key = VK_Up) or (Key = VK_Down) then
		uvCombChgFlg := true;

	if	((Key = VK_RETURN) or (Key = VK_TAB) ) then								// Enter & Tab
	begin
        // ﾄﾞﾛｯﾌﾟﾀﾞｳﾝｺﾝﾎﾞを開いた状態で諸口DLGを開くとECombo_HeaderChangeが発生
        // してしまう為、閉じておく(諸口DLGを開く=ﾌｫｰｶｽがｺﾝﾎﾞから離れる)
        ECombo_Header.DroppedDown := false;
		uvCombChgFlg := false;
		ECombo_HeaderChange (ECombo_Header);
//		Abort;
	end;

end;
//-----------------------------------------------------------------------------
//  名称を取得
//-----------------------------------------------------------------------------
Function TJNTCRP018001f.fnGetNAME(pCODE:String;pMKBN,pAttr:Integer; var RName:String ):Boolean;
var
    Qry :TMQuery;
    lvCode : String;
begin

    Result := false;
    RName  := '';
    lvCODE := '';

	if pAttr = 2 then
		lvCODE:= pCODE
	else
	begin
		if pCODE <> '' then
			lvCODE	:= Format ('%.16d', [StrToInt64 (Trim(pCODE))])
		else
			lvCODE := '';
	end;

    Qry := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            SQL.Clear;							// ｸｴﾘの初期化
            if (pMKBN >= MKBN_SEG1) and (pMKBN <= MKBN_SEG10) then
            begin
                SQL.Add('select SimpleName NMK from HOJYOMA');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('       AND MasterKbn =:MKBN');
                SQL.Add('       AND SumKbn = 0');  //<267> ADD
            end
            else
            begin
                SQL.Add('select NMK from MMEISHO');
                SQL.Add('where  RDelKbn=0 AND GCode=:stGCode');
                SQL.Add('       AND SetNM =:MKBN');
            end;
            SetFld('stGCode').AsString := lvCODE;
            SetFld('MKBN').asInteger   := pMKBN;
            Open;						// ｸｴﾘの開始

            if EOF = false then
            begin
                Result := true;
                RName  := FieldByName('NMK').asString;
            end;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;

(* <113>
//-----------------------------------------------------------------------------
// <100>fnSetFncType
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnSetFncType(pKBN:Integer);
begin

    if pKBN = 1 then
        // ｸﾘｱ
        uvFncInfo.Caption[0] := 'F1 ﾌﾘｰ項目登録'
    else
        // ｸﾘｱ
        uvFncInfo.Caption[0] := '';
    uvFncInfo.Caption[1] := '';
    uvFncInfo.Caption[2] := '';
    uvFncInfo.Caption[3] := '';
    uvFncInfo.Caption[4] := '';
    uvFncInfo.Caption[5] := '';
    uvFncInfo.Caption[6] := '';
    uvFncInfo.Caption[7] := '';

    uvFncInfo.Action[0]  := FreeSetMTokui;
    uvFncInfo.Action[1]  := nil;
    uvFncInfo.Action[2]  := nil;
    uvFncInfo.Action[3]  := nil;
    uvFncInfo.Action[4]  := nil;
    uvFncInfo.Action[5]  := nil;
    uvFncInfo.Action[6]  := nil;
    uvFncInfo.Action[7]  := nil;

end;
*)

//-----------------------------------------------------------------------------
// fnSetFncType()
//      PARAM   : nDspType  :   表示識別子
//      VAR     :
//      RETURN  :
//      MEMO    : ﾌｧﾝｸｼｮﾝｷｰ/ｲﾍﾞﾝﾄの設定
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnSetFncType(nDspType: Boolean ;ifuncNo : Integer);
var
	stMessageRec : TMJSMsgRec;
    strChange    : String;                  // <144>
begin

    case iFuncNo of
        0:  //[F1 ]
        begin
            if ( nDspType = false ) then
            begin
                uvFncInfo.Caption[iFuncNo] := '';
                uvFncInfo.Action [iFuncNo] := nil;
            end
            else
            begin
                uvFncInfo.Caption[iFuncNo] := 'F1 ﾌﾘｰ項目登録';
                uvFncInfo.Action [iFuncNo] := FreeSetMTokui;
            end;
        end;
// <144>↓
        1, 2://[F2 ]
        begin
            if ifuncNo = 1 then
                strChange := '(ｺｰﾄﾞ入力)'
            else
                strChange := '(名称入力)';
            if ( nDspType = false ) then
            begin
                uvFncInfo.Caption[1] := '';
                uvFncInfo.Action [1] := nil;
            end
            else
            begin
//<EXP> MOD St
(*
                uvFncInfo.Caption[1] := 'F2 入力ﾓｰﾄﾞ切替' {+ strChange};
                //uvFncInfo.Action [1] := nil;
                uvFncInfo.Action [1] := InpModeChange;
*)
                uvFncInfo.Caption[1] := F2Caption;
                if (uvFncInfo.Caption[1] <> '') then
                begin
                    uvFncInfo.Action [1] := F2Action;
                end
                else
                begin
                    uvFncInfo.Action [1] := nil;
                end;
//<EXP> MOD Ed
            end;
        end;
// <144>↑
//<KSN> ADD St
        3:  //[F3 ]
        begin
            if ( nDspType = false ) then
            begin
                uvFncInfo.Caption[2] := '';
                uvFncInfo.Action [2] := nil;
            end
            else
            begin
                uvFncInfo.Caption[2] := 'F3 次検索';
                uvFncInfo.Action [2] := FindHojyoMA;
//<TAX> ADD St
                if (m_AcControl = Jituzai_DdxDBGrid_Kei) or
                    (m_AcControl = Goukei_DdxDBGrid_Kei) then
                begin
                    uvFncInfo.Caption[2] := 'F3 再計算';
                    uvFncInfo.Action [2] := ActionTaxCalc;
                end;
//<TAX> ADD Ed
            end;
        end;
//<KSN> ADD Ed
// <SEI> ADD start
		4:	//[F5 ]
        begin
        	// 請求・入金予定の削除
            if ( nDspType = false ) then
            begin
                uvFncInfo.Caption[iFuncNo] := '';
                uvFncInfo.Action [iFuncNo] := nil;
            end
            else
            begin                       	// 「F5 削除」
                uvFncInfo.Caption[iFuncNo] := FUNC_CAP_DELSEIKYU;
                uvFncInfo.Action [iFuncNo] := DeleteSeikyuInfo;
            end;
        end;
// <SEI> ADD end
        7:  //[F8 ]
        begin
            if ( nDspType = false ) then
            begin
                uvFncInfo.Caption[iFuncNo] := '';
                uvFncInfo.Action [iFuncNo] := nil;
            end
            else
            begin
                ComArea.m_MsgStd.GetMsg (stMessageRec, 30, 19);
                uvFncInfo.Caption[iFuncNo] := stMessageRec.sMsg;
                uvFncInfo.Action [iFuncNo] := nil;
            end;
        end;
        else
        begin
            uvFncInfo.Caption[iFuncNo] := '';
            uvFncInfo.Action [iFuncNo]  := nil;
        end;
    end;

    MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
end;


//-----------------------------------------------------------------------------
// <100>fnFrrDlg
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnFreeDlg(nFunc: Integer);
var
    lvNCode:    Currency;
    lvCaption:  String;
//    lvType:     integer;    				// <196> DEL
    lvTblName:  String;
    strGCode :  String;
//<FREE> ADD St
    procedure setHeaderItem();
    begin
        freeItem.GCode     := strGCode;
        freeItem.LCaption  := lvCaption;
        freeItem.NCode     := lvNCode;
        freeItem.Nm        := Jituzai_ETEdit_LongName.Text;
        freeItem.Nmk       := Jituzai_ETEdit_SimpleName.Text;

        //  表示項目設定
        fnJNTFreeDlgSetItem(@freeItem, (m_nMasterDivision + 19) * 10);
    end;
//<FREE> ADD Ed
begin
    fnJNTFreeDlgInit(m_pMyAppRecord ,ComArea,@dbCorp_Select);  //<FREEINIT> ADD
//    lvType  :=  0; 						// <196> DEL
    lvNCode :=  0;
    try
        Case nFunc of
            0:
            begin
                if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
                begin
                    strGCode	:= Jituzai_ETEdit_GCode.Text;
                    strGCode := TrimRight(strGCode);
                end
                else
                    strGCode	:= Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);


                lvNCode     :=  fnGetNCODE(strGCode,m_nMasterDivision,m_arAdoptInfo [ECombo_Header.ItemIndex].nCodeAttribute);     //内部ｺｰﾄﾞ
                lvCaption   :=  m_arAdoptInfo [ECombo_Header.ItemIndex].strDescription;     //Caption
                lvTblName   :=  'HOJYOMA';            //参照TableName
            end;

            1:  ;
            2:  ;
            3:  ;
            4:  ;
            5:  ;
            6:  ;
            7:  ;
        end;
        //  ダイアログ表示内容変更
// <133>↓
//        fnJNTFreeDlgInfo(lvTblName, 'NCode', 'GCode', 'SimpleName', lvCaption, m_nMasterDivision);
        fnJNTFreeDlgInfo(lvTblName, 'NCode', 'GCode', 'SimpleName', lvCaption, (m_nMasterDivision + 19) * 10);
// <133>↑

        if lvNCode <> 0 then
        begin
            if UpdFreeFlg = false then//ﾌﾘｰﾀﾞｲｱﾛｸﾞ初回起動時
            begin
                //  ダイアログ表示
                if fnJNTFreeDlgShow(lvNCode) = mrOK then
                begin
                    //  フリー項目更新
                    freeItem := fnJNTFreeDlgGetItem;
                    UpdFreeFlg := true;
                end;
            end
            else
            begin
            	//  表示項目設定
// <196> MOD start
//        	    fnJNTFreeDlgSetItem(@freeItem, lvType);
//<FREE> DEL             	fnJNTFreeDlgSetItem(@freeItem, (m_nMasterDivision + 19) * 10);
//<FREE> ADD St
                setHeaderItem();
				fnJNTFreeDlgSetChgRec(@freeChgItem);
//<FREE> ADD Ed
// <196> MOD end

                //  ダイアログ表示
                if fnJNTFreeDlgShow2() = mrOK then
                begin
                    //  フリー項目更新
                    freeItem := fnJNTFreeDlgGetItem;
                end;

            end;

        end
        else
        begin
//<FREE> MOD St
{
    		freeItem.GCode     := strGCode;
			freeItem.LCaption  := lvCaption;
            freeItem.NCode     := lvNCode;
            freeItem.Nm        := Jituzai_ETEdit_LongName.Text;
			freeItem.Nmk       := Jituzai_ETEdit_SimpleName.Text;

        	//  表示項目設定
// <196> MOD start
//    	    fnJNTFreeDlgSetItem(@freeItem, lvType);
			fnJNTFreeDlgSetItem(@freeItem, (m_nMasterDivision + 19) * 10);
// <196> MOD end
}
            setHeaderItem();
//<FREE> MOD Ed
        	//  ダイアログ表示
	        if fnJNTFreeDlgShow2() = mrOK then
    	    begin
        	    //  フリー項目更新
	            freeItem := fnJNTFreeDlgGetItem;
    	        UpdFreeFlg := true;
        	end;
        end;
    except
    end;
end;
//-----------------------------------------------------------------------------
// <100>MSPFunctionBar Event
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.MSPFunctionBarFunctionClick(Sender: TObject;
  FuncNo: Integer);
begin
//<113>    if MSPFunctionBar.GetFuncCaption(FuncNo) <> '' then
//<113>        uvFncInfo.Action[FuncNo-1].Execute;

//<113>---St

    if MSPFunctionBar.GetFuncCaption(FuncNo) <> '' then
    begin
        case FuncNo of
//<SEI> MOD St
//            1,2,3:  uvFncInfo.Action[FuncNo-1].Execute;   // 「3」追加 <KSN>
            1,
            2,
            3,
            5:								// F5 削除（請求・入金予定の削除）
            begin
            	uvFncInfo.Action[FuncNo-1].Execute;
            end;
//<SEI> MOD Ed
            8:  Keybd_Event(VK_F8, 0, 0, 0);
        end;
    end;

//<113>---Ed
end;
//-----------------------------------------------------------------------------
// <100>
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.FreeSetMtokuiExecute(Sender: TObject);
begin
    fnFreeDlg(0);

end;
//**********************************************************************
//*		Proccess	:	子供のレコード件数取得処理
//*		Name		:	N.Nabe
//*		Date		:	2001/3/28
//*		Parameter	:	なし
//*		Return		:	なし
//*		History		:
//**********************************************************************
function TJNTCRP018001f.fnChildCount(pNCode:Extended):Boolean;
var
	QueryRead	:	TMQuery;
begin
//	Result := false;

	QueryRead := TMQuery.Create( Self );						//	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, QueryRead );		//	DBとMQueryの接続

	// 全レコード件数取得
	with QueryRead do
	begin
		try
			Close;											// 会社情報 Close
			SQL.Clear;										// SQL文 Clear
			SQL.Add('SELECT MasterKbn FROM HojyoTree '+
                    ' Where MasterKbn =:MasKbn and SumNCode = :NCODE');
            ParambyName('MasKbn').asinteger := m_nMasterDivision;
//<255> DEL            ParambyName('NCode').asFloat    := pNCode;
            ParambyName('NCode').asString    := FormatFloat('0',pNCode);  //<255> ADD
            Open;
			if not Eof then
				Result := false
			else
				Result := true;
		finally
			Close;
			Free;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	加算体系 不正レコード復旧処理
//*		Name		:	N.Nabe
//*		Date		:	2005/01/28
//*		Return		:
//*		History		:	2005/09/08	K.Takahashi <111>
//*									MLからFXへ移植
//**********************************************************************
procedure TJNTCRP018001f.fnHojyoTreeRestore();
var
//	iRet,
	iMaxEnt			:	Integer;
	DmqChk,
	DmqRead,
	DmqWrite		:	TMQuery;

begin

	DmqChk := TMQuery.Create( Application );					//	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqChk );		//	DBとMQueryの接続
	DmqRead := TMQuery.Create( Application );					//	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqRead );		//	DBとMQueryの接続
	DmqWrite := TMQuery.Create( Application );					//	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqWrite );	//	DBとMQueryの接続

	SessionPractice(C_ST_PROCESS);								// <203> ADD

	MDataModule.BeginTran (dbCorp_Select);						//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

	try
		with DmqRead do
		begin
			// SumCodeに実在工事が設定されているﾚｺｰﾄﾞを復旧
			Close;
			SQL.Clear;
//<255> MOD St
//			SQL.Add('select * from HojyoTree TR');
			SQL.Add('select TR.MasterKbn ');
			SQL.Add('      ,TR.BasedNCode ');
			SQL.Add('      ,TR.SumNCode ');
			SQL.Add('      ,TR.EntNo ');
            SQL.Add('from HojyoTree TR');
//<255> MOd Ed
			SQL.Add('Inner Join HojyoMA MA on MA.SumKbn = 0 and ');
            SQL.Add('MA.MasterKbn between :pSMKBN and :pEMKBN and RDelKbn = 0');
			SQL.Add('where TR.SumNCode = MA.NCode and TR.MasterKbn between :pSMKBN and :pEMKBN');
            SQL.Add(' and TR.PatternNo = 0');
//<255> MOD St
//            ParamByName('pSMKBN').asFloat := MKBN_PROJECT1;
//            ParamByName('pEMKBN').asFloat := MKBN_PROJECT10;
            ParamByName('pSMKBN').asString := FormatFloat('0',MKBN_PROJECT1);
            ParamByName('pEMKBN').asString := FormatFloat('0',MKBN_PROJECT10);
//<255> MOD Ed

            // ｸｴﾘの開始
			Open;

			while EOF = false do
			begin
                // 加算体系2更新ﾌﾗｸﾞON
				gbHojyoTree2Flag := true;

				// 加算確認
				DmqChk.Close;
				DmqChk.SQL.Clear;
//<255> MOD St
//				DmqChk.SQL.Add('select * from HojyoTree');
                DmqChk.SQL.Add('select MasterKbn ');
                DmqChk.SQL.Add('      ,BasedNCode ');
                DmqChk.SQL.Add('      ,SumNCode ');
                DmqChk.SQL.Add('      ,EntNo ');
                DmqChk.SQL.Add('from HojyoTree ');
//<255> MOD Ed
				DmqChk.SQL.Add('where MasterKbn = :MASTER and PatternNo = 0 and SumNCode =:SUM and BasedNCode = :BASED');
				DmqChk.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
//<255> MOD St
//				DmqChk.SetFld('SUM').AsFloat      := 0;
//				DmqChk.SetFld('BASED').AsFloat    := GetFld('BasedNCode').AsFloat;
				DmqChk.SetFld('SUM').AsString      := '0';
				DmqChk.SetFld('BASED').AsString    := GetFld('BasedNCode').AsString;
//<255> MOD Ed

                // ｸｴﾘの開始
				DmqChk.Open;

				if DmqChk.EOF = true then
				begin
					DmqChk.Close;
					DmqChk.SQL.Clear;
//<255> MOD St
//					DmqChk.SQL.Add('select * from HojyoTree');
                    DmqChk.SQL.Add('select MasterKbn ');
                    DmqChk.SQL.Add('      ,BasedNCode ');
                    DmqChk.SQL.Add('      ,SumNCode ');
                    DmqChk.SQL.Add('      ,EntNo ');
                    DmqChk.SQL.Add('from HojyoTree ');
//<255> MOD Ed
					DmqChk.SQL.Add('where MasterKbn = :MASTER and SumNCode = :SUM and PatternNo = 0');
					DmqChk.SQL.Add('order by EntNo DESC');
					DmqChk.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
//<255> DEL					DmqChk.SetFld('SUM').AsFloat      := 0;
					DmqChk.SetFld('SUM').AsString      := '0';
					DmqChk.Open;

					if DmqChk.Eof = false then
						iMaxEnt := DmqChk.GetFld('EntNo').AsInteger + 100
					else
						iMaxEnt := 100;

					DmqWrite.Close;
					DmqWrite.SQL.Clear;
					DmqWrite.SQL.Add('update HojyoTree Set SumNCode = :SUM1, EntNo = :ENT1');
					DmqWrite.SQL.Add(',UpdTantoNCode = :UpdTantoNCode'); // <202>
					DmqWrite.SQL.Add('where MasterKbn = :MASTER and PatternNo = 0 and SumNCode = :SUM2 and EntNo = :ENT2');
					DmqWrite.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
					DmqWrite.SetFld('SUM1').AsFloat     := 0;
					DmqWrite.SetFld('ENT1').AsInteger   := iMaxEnt;
//<255> DEL					DmqWrite.SetFld('SUM2').AsFloat     := GetFld('SumNCode').AsFloat;
					DmqWrite.SetFld('SUM2').AsString     := GetFld('SumNCode').AsString;  //<255> ADD
					DmqWrite.SetFld('ENT2').AsInteger   := GetFld('EntNo').AsInteger;
                    DmqWrite.SetFld('UpdTantoNCode').AsFloat := m_TantoNCode; // <202>

					if DmqWrite.ExecSQL = false then
					begin
						ErrorMessageDsp(DmqWrite);
						MDataModule.Rollback(dbCorp_Select);
						Exit;
					end;
				end
				else
				begin
					DmqWrite.Close;
					DmqWrite.SQL.Clear;
					DmqWrite.SQL.Add('delete HojyoTree');
					DmqWrite.SQL.Add('where MasterKbn =:MASTER and PatternNo = 0 and SumNCode = :SUM and EntNo = :ENT');
					DmqWrite.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
//<255> DEL					DmqWrite.SetFld('SUM').AsFloat      := GetFld('SumNCode').AsFloat;
					DmqWrite.SetFld('SUM').AsString      := GetFld('SumNCode').AsString;  //<255> ADD
					DmqWrite.SetFld('ENT').AsInteger    := GetFld('EntNo').AsInteger;

					if DmqWrite.ExecSQL = false then
					begin
						ErrorMessageDsp(DmqWrite);
						MDataModule.Rollback(dbCorp_Select);
						Exit;
					end;
				end;

				Next;
			end;

			// SumNCodeとBasedNCodeに同一工事が設定されているﾚｺｰﾄﾞを復旧
			Close;
			SQL.Clear;
//<255> MOD St
//			SQL.Add('select * from HojyoTree');
			SQL.Add('select MasterKbn ');
			SQL.Add('      ,BasedNCode ');
			SQL.Add('      ,SumNCode ');
			SQL.Add('      ,EntNo ');
            SQL.Add('from HojyoTree ');
//<255> MOD Ed
			SQL.Add('where SumNCode = BasedNCode and MasterKbn Between :pSMKBN and :pEMKBN and PatternNo = 0');
//<255> MOD St
//            ParamByName('pSMKBN').asFloat := MKBN_PROJECT1;
//            ParamByName('pEMKBN').asFloat := MKBN_PROJECT10;
            ParamByName('pSMKBN').asString := FormatFloat('0',MKBN_PROJECT1);
            ParamByName('pEMKBN').asString := FormatFloat('0',MKBN_PROJECT10);
//<255> MOD Ed

            // ｸｴﾘの開始
			Open;

			while EOF = false do
			begin
                // 加算体系2更新ﾌﾗｸﾞON
				gbHojyoTree2Flag := true;

				// 加算確認
				DmqChk.Close;
				DmqChk.SQL.Clear;
//<255> MOD St
//				DmqChk.SQL.Add('select * from HojyoTree');
                DmqChk.SQL.Add('select MasterKbn ');
                DmqChk.SQL.Add('      ,BasedNCode ');
                DmqChk.SQL.Add('      ,SumNCode ');
                DmqChk.SQL.Add('      ,EntNo ');
                DmqChk.SQL.Add('from HojyoTree ');
//<255> MOD Ed
				DmqChk.SQL.Add('where MasterKbn = :MASTER and PatternNo = 0 and SumNCode = :SUM and BasedNCode = :BASED');
				DmqChk.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
//<255> MOD St
//				DmqChk.SetFld('SUM').AsFloat      := 0;
//				DmqChk.SetFld('BASED').AsFloat    := GetFld('BasedNCode').AsFloat;
				DmqChk.SetFld('SUM').AsString      := '0';
				DmqChk.SetFld('BASED').AsString    := GetFld('BasedNCode').AsString;
//<255> MOD Ed

                // ｸｴﾘの開始
				DmqChk.Open;

				if DmqChk.EOF = true then
				begin
					DmqChk.Close;
					DmqChk.SQL.Clear;
//<255> MOD St
//					DmqChk.SQL.Add('select * from HojyoTree');
                    DmqChk.SQL.Add('select MasterKbn ');
                    DmqChk.SQL.Add('      ,BasedNCode ');
                    DmqChk.SQL.Add('      ,SumNCode ');
                    DmqChk.SQL.Add('      ,EntNo ');
                    DmqChk.SQL.Add('from HojyoTree ');
//<255> MOD Ed
					DmqChk.SQL.Add('where MasterKbn = :MASTER and SumNCode = :SUM and PatternNo = 0');
					DmqChk.SQL.Add('order by EntNo DESC');
					DmqChk.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
//<255> DEL					DmqChk.SetFld('SUM').AsFloat      := 0;
					DmqChk.SetFld('SUM').AsString      := '0';  //<255> ADD
					DmqChk.Open;

					if DmqChk.Eof = false then
						iMaxEnt := DmqChk.GetFld('EntNo').AsInteger + 100
					else
						iMaxEnt := 100;

					DmqWrite.Close;
					DmqWrite.SQL.Clear;
					DmqWrite.SQL.Add('update HojyoTree Set SumNCode =:SUM1, EntNo = :ENT1');
					DmqWrite.SQL.Add(',UpdTantoNCode = :UpdTantoNCode'); // <202>
					DmqWrite.SQL.Add('where MasterKbn = :MASTER and SumNCode = :SUM2 and EntNo = :ENT2');
					DmqWrite.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
					DmqWrite.SetFld('SUM1').AsFloat     := 0;
					DmqWrite.SetFld('ENT1').AsInteger   := iMaxEnt;
					DmqWrite.SetFld('ENT2').AsInteger   := GetFld('EntNo').AsInteger;
//<255> DEL					DmqWrite.SetFld('SUM2').AsFloat     := GetFld('SumNCode').AsFloat;
					DmqWrite.SetFld('SUM2').AsString     := GetFld('SumNCode').AsString;  //<255> ADD
                    DmqWrite.SetFld('UpdTantoNCode').AsFloat := m_TantoNCode; // <202>

					if DmqWrite.ExecSQL = false then
					begin
						ErrorMessageDsp(DmqWrite);
						MDataModule.Rollback(dbCorp_Select);
						Exit;
					end;
				end
				else
				begin
					DmqWrite.Close;
					DmqWrite.SQL.Clear;
					DmqWrite.SQL.Add('delete HojyoTree');
					DmqWrite.SQL.Add('where MasterKbn = :MASTER and PatternNo = 0 and SumNCode = :SUM and EntNo = :ENT');
					DmqWrite.SetFld('MASTER').AsInteger := GetFld('MasterKbn').AsInteger;
//<255> DEL					DmqWrite.SetFld('SUM').AsFloat      := GetFld('SumNCode').AsFloat;
					DmqWrite.SetFld('SUM').AsString      := GetFld('SumNCode').AsString;  //<255> ADD
					DmqWrite.SetFld('ENT').AsInteger    := GetFld('EntNo').AsInteger;

					if DmqWrite.ExecSQL = false then
					begin
						ErrorMessageDsp(DmqWrite);
						MDataModule.Rollback(dbCorp_Select);
						Exit;
					end;
				end;

				Next;
			end;

            // ｺﾐｯﾄ
			MDataModule.Commit(dbCorp_Select);
		end;
	finally
    	SessionPractice(C_ED_PROCESS);          // <203> ADD

		DmqChk.Close;
		DmqChk.Free;
		DmqRead.Close;
		DmqRead.Free;
		DmqWrite.Close;
		DmqWrite.Free;
	end;

end;

//**********************************************************************
//*		Proccess	:	日付大小ﾁｪｯｸ
//**********************************************************************
function TJNTCRP018001f.fnChkDateBigSmall(StDate,EdDate :TMDateEdit):Boolean;
var
    iValueSt,iValueEd : Integer;
begin

	Result := false;

	// 開始
	iValueSt := Trunc((StDate).Value);
//	if (iValueSt <> 0) and (not MjsIntYMDChk(iValueSt)) then				// <#NGEN>
	if (iValueSt <> 0) and (not MjsIntYMDChk((StDate).AsIntYM)) then 		// <#NGEN>
        Exit;

	// 終了
	iValueEd := Trunc((EdDate).Value);
//	if (iValueEd <> 0) and (not MjsIntYMDChk(iValueEd)) then				// <#NGEN>
	if (iValueEd <> 0) and (not MjsIntYMDChk((EdDate).AsIntYM)) then 		// <#NGEN>
        Exit;

    if (iValueSt <> 0) and (iValueEd <> 0) then
    begin
//        if iValueSt > iValueEd then										// <#NGEN>
        if (StDate).AsIntYM > (EdDate).AsIntYM then							// <#NGEN>
            Exit;

    end;

    Result := true;

end;
//<PRN>********* ↓↓↓ 以下印刷処理 ↓↓↓ ******************************


//************************************************************************
//*     ProgramID       :   JNTCRP020000
//*     Component       :   B_PrintClick
//*     Name            :   Y.Ichihashi　　　　　　
//*
//************************************************************************
procedure	TJNTCRP018001f.fnPrint ();
var
	cMemDataWork	 : TdxMemData;

    lvRet       :   Integer;            // <PRN>
    JNTPDlg     :   TFrmJNTPDialog;     // <PRN>
    iSelect     :   Integer;
begin
	cMemDataWork	:= nil;

    m_cJNTArea.SetSelAppRecord;

    uvHani.pvMasterKbn := m_nMasterDivision;
    uvHani.pvHojyoName := m_arAdoptInfo [ECombo_Header.ItemIndex].strDescription;

    // 範囲ﾀﾞｲｱﾛｸﾞを表示する<PRN>
    JNTPDlg := TFrmJNTPDialog.Create(Self, @uvHani);
    lvRet   := JNTPDlg.ShowModal;
    JNTPDlg.Free;
//<Del10-VerUp001><D10_OwnMapRules> ST
	dbCorp_Select.FormatOptions.MapRules.Clear;
	dbCorp_Select.FormatOptions.OwnMapRules := False;
//<Del10-VerUp001><D10_OwnMapRules> ED

    //ｷｬﾝｾﾙ他
    if lvRet <> 1 then
    begin
        m_cJNTArea.SetMasAppRecord;
        Exit;
    end;

//<PRN2> 実在／合計　簡略／詳細 共通
//<PRN2>	case (uvHani.pvrPattern) of
        // 実在工事/ﾌﾟﾛｼﾞｪｸﾄ
//<PRN2>    	0:  begin
            	m_nOrderDivision	:= uvHani.pvrOrder;             		// 範囲指定: 0=ｺｰﾄﾞ順, 1=連想順
			if Length(uvHani.pvrStCode) > 0 then	// <263> ADD
            	m_strExCodeScopeStr	:= uvHani.pvrStCode[0];         		// 開始外部ｺｰﾄﾞ
			if Length(uvHani.pvrEdCode) > 0 then	// <263> ADD
            	m_strExCodeScopeEnd	:= uvHani.pvrEdCode[0];		    		// 終了外部ｺｰﾄﾞ
//<PRN2>            end;
//<PRN2>    end;

//<PRN2>    iSelect := uvHani.pvrPattern + 1;
    iSelect := uvHani.pvrPattern;		//<PRN2>

// <212> MOD start
   if MasterInfo_DMemDataKojKbn17.AsInteger <> 1 then
   begin
        case (uvHani.pvrPattern) of
            0: iSelect := 0;
            1: iSelect := 1;
            2: iSelect := 2;
            3: iSelect := 5;
            4: iSelect := 6;
            5: iSelect := 7;
            6: iSelect := 8;
            7: iSelect := KASANTOROKU;		// <263> ADD
        end;
   end;
    uvHani.pvrPattern := iSelect;
// <212> MOD end

//<TAX> DEL	PrnSet(iSelect,m_nOrderDivision,m_strExCodeScopeStr,m_strExCodeScopeEnd);
    PrnSet(iSelect,m_nOrderDivision, uvHani);  //<TAX> ADD

// <212> MOD start
{
	//<PRN2> >>
	case (uvHani.pvrPattern) of
    	JITUZAIKANI,
    	JITUZAISHOSAI:
			cMemDataWork	:= JHojyoMA_Print;
        GOUKEIKANI,
        GOUKEISHOSAI:
			cMemDataWork	:= GHojyoMA_Print;
		JITUZAIBUNRUI:
			cMemDataWork	:= MemPtnSegBun;
	end;
	//<PRN2> <<
}

    case (iSelect) of
        JITUZAIKANI,
        JITUZAISHOSAI:
            cMemDataWork	:= JHojyoMA_Print;
        GOUKEIKANI,
        GOUKEISHOSAI:
            cMemDataWork	:= GHojyoMA_Print;
        JITUZAIBUNRUI:
            cMemDataWork	:= MemPtnSegBun;
        JITUZAIKEIYAKU,GOUKEIKEIYAKU,
        JITUZAIKEIYAKUDTL,GOUKEIKEIYAKUDTL:
            cMemDataWork	:= dMemData_KeiyakuPrint;
//<240> MOD St
{
        JITUZAINYUUKIN:
            cMemDataWork	:= JHojyoMA_Print;
        GOUKEINYUUKIN:
            cMemDataWork	:= GHojyoMA_Print;
}
//<249> MOD St
//        JITUZAINYUUKIN,GOUKEINYUUKIN:
//            cMemDataWork	:= dMemData_KeiyakuPrint;
        JITUZAINYUUKIN,GOUKEINYUUKIN:
            cMemDataWork	:= JHojyoMA_Print;
//<249> MOD Ed
//<240> MOD Ed
// <263> ADD start
		KASANTOROKU:
			cMemDataWork	:= dMemData_KasanPrint;
// <263> ADD end
    end;
// <212> MOD end

    uvHani.pvrYearKbn   := m_iRekiKbn;                           // 和暦西暦区分
    if (cMemDataWork = nil) then Exit;
    // <PRN>
    with PrtParam do
  	begin
    	Para		:=  uvHani;
        TargetMD    :=  cMemDataWork;
       	CorpSys		:=  uvSelSys;
		//<PRN2> >>
		case (uvHani.pvrPattern) of
    		JITUZAISHOSAI:
// <222> MOD start
//				TargetStr	:= '完成振替' + MasterInfo_DMemDataBumonName.AsString;
            begin
                if ( m_pMyAppRecord.m_sParameter = '1' ) then
				    TargetStr	:= '完成振替' + MasterInfo_DMemDataBumonName.AsString
                else
				    //<273> Mod    TargetStr	:= '営業' + MasterInfo_DMemDataBumonName.AsString;
                    TargetStr	:= Jituzai_LLabel_BmnCode.Caption;
            end;
// <222> MOD end
// <212> MOD start        	GOUKEISHOSAI:
        	5,7:
				TargetStr	:= '集計' + MasterInfo_DMemDataBumonName.AsString;
		end;
		//<PRN2> <<
   	end;

    //印刷する<PRN>
    PrintAppEntry(nil,nil,1,PrtParam,ArrHdl);
    m_cJNTArea.SetMasAppRecord;
end;

//**********************************************************************
//		工事完成振替 検索エクスプローラー<121>
//**********************************************************************
procedure TJNTCRP018001f.dxKanseiGidCODEEditButtonClick(Sender: TObject);
var
    lvExpSend   :   rcJNTExpSend;   // 親BPL送信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    lvExpRecv   :   rcJNTExpRecv;   // 親BPL受信ﾃﾞｰﾀｲﾝﾀｰﾌｪｽ構造体
    iExpRtn     :   Integer;        // 戻り値
begin

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam( @lvExpSend );
    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;                     // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;                     // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;       //
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;       //

    lvExpSend.MasterKbn     :=  JKanseiMasterKbn.AsInteger;
    lvExpSend.ModulKbn      :=  0;
    lvExpSend.PatternNo     :=  1;
    lvExpSend.TBarNM        :=  '検索ｴｸｽﾌﾟﾛｰﾗ';
    lvExpSend.TableName     :=  'HojyoMA';
    lvExpSend.WhereStr      :=  '';
    lvExpSend.SumKbn        :=  0;
    lvExpSend.SortStr       :=  '';
    lvExpSend.TrRootCaption :=  '';

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if ( iExpRtn <> 1 ) then  //ｷｬﾝｾﾙ
        Exit;

    // 中身あり?
    if ( Length(Trim(lvExpRecv.GCode)) > 0 ) then
    begin
        JKansei.Edit;
        JKanseiNCODE.AsFloat    :=  lvExpRecv.NCode;
        JKanseiGCODE.AsString   :=  lvExpRecv.GCode;
        JKanseiNAME.AsString    :=  lvExpRecv.NM;
    end
    else                            
    begin
        JKansei.Edit;
        JKanseiNCODE.AsFloat    :=  0;
		JKanseiGCODE.AsString   := '';
		JKanseiNAME.AsString    := '';
    end;

    // Enter ｷｰのｴﾐｭﾚｲﾄ
    keybd_event(VK_RETURN, 0, 0, 0);
	Abort;

end;

// <126>
//**************************************************************************
//	Component	:	入力ﾌｨｰﾙﾄﾞ
//		    			詳細ﾀﾌﾞの入力ｺﾝﾄﾛｰﾙ共通Changeｲﾍﾞﾝﾄ
//	Event		:	OnChange
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP018001f.evtOnChange(Sender: TObject);
begin
    if (m_EdtSw = false) then
        m_EdtSw := true;                    // 変更ﾌﾗｸﾞON

// <204> ADD start
    // 部門ｺｰﾄﾞを入力した場合は最新の部門を表示するためﾀｸﾞをｸﾘｱする

 	if Sender = Jituzai_ENEdit_BmnCode then
    begin
     	Jituzai_ENEdit_BmnCode.TagStr := '';
        m_JBmnChangeFlg             := True;  // <238> ADD
    end
    else if Sender = Jituzai_ETEdit_BmnCode then
    begin
     	Jituzai_ETEdit_BmnCode.TagStr := '';
        m_JBmnChangeFlg             := True;  // <238> ADD
    end
    else if Sender = Goukei_ENEdit_BmnCode then
    begin
     	Goukei_ENEdit_BmnCode.TagStr := '';
        m_GBmnChangeFlg             := True;  // <238> ADD
    end
    else if Sender = Goukei_ETEdit_BmnCode then
    begin
     	Goukei_ETEdit_BmnCode.TagStr := '';
        m_GBmnChangeFlg             := True;  // <238> ADD
    end;
// <204> ADD end

// <238> ADD start
 	if Sender = Jituzai_ENEdit_SekouBmnCode then
    begin
     	Jituzai_ENEdit_SekouBmnCode.TagStr  := '';
        m_JSekBmnChangeFlg                  := True;
    end
    else if Sender = Jituzai_ETEdit_SekouBmnCode then
    begin
     	Jituzai_ETEdit_SekouBmnCode.TagStr  := '';
        m_JSekBmnChangeFlg                  := True;
    end
    else if Sender = Goukei_ENEdit_SekouBmnCode then
    begin
     	Goukei_ENEdit_SekouBmnCode.TagStr   := '';
        m_GSekBmnChangeFlg                  := True;
    end
    else if Sender = Goukei_ETEdit_SekouBmnCode then
    begin
     	Goukei_ETEdit_SekouBmnCode.TagStr   := '';
        m_GSekBmnChangeFlg                  := True;
    end;
// <238> ADD end


end;
// <126>
//**************************************************************************
//	Component	:	詳細ﾀﾌﾞの中のｸﾞﾘｯﾄﾞ
//		    			詳細ﾀﾌﾞのｸﾞﾘｯﾄﾞ共通OnEditedｲﾍﾞﾝﾄ
//	Event		:	OnChange
//	Name		:	unknown
//**************************************************************************
procedure TJNTCRP018001f.evtGridOnEdited(Sender: TObject;
  Node: TdxTreeListNode);
begin
    if (m_EdtSw = false) then
        m_EdtSw := true;                    // 変更ﾌﾗｸﾞON

end;
// <126>
//**********************************************************************
//*		Proccess	:	登録処理（終了時に呼ぶ）
//*		Name		:	K.Katou
//*		Date		:	2005/10/27
//*		Return		:	true: 正常 false: 異常/入力ｴﾗｰ
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
function TJNTCRP018001f.UpdateHojyoMA(): Boolean;
var
    strGCode    : String;
    iSumKbn     : Integer;
begin
    Result := false;

// <203> ADD start
   	SessionPractice(C_ST_PROCESS);
    try
// <203> ADD end

//<155> - ST
//	if not fnDataCheck(0) then Exit;
	if (Root_PMTab.Items.Selected = PAGE_JITUZAI) then
	begin
		if not fnDataCheck(0) then
			Exit;
	end
	else
	begin
		if not fnDataCheck(1) then
			Exit;
	end;
//<155> - ED

	if not BtnClkWriteJ() then
	begin
		Abort;
		Exit;
	end;

	// DBに書込
	if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
	begin
		strGCode	:=  Jituzai_ETEdit_GCode.Text;
		strGCode    :=  TrimRight(strGCode);
		Jituzai_ETEdit_GCode.Text   :=  strGCode;
	end
	else
    begin
		strGCode	:=  Format ('%.16d', [Trunc (Jituzai_ENEdit_GCode.Value)]);
    end;

	iSumKbn     :=  0;

	fnTreeUpdate(strGCode, iSumKbn);

    // 工事完成振替ﾌﾗｸﾞを初期化する
//<162>    m_FRIFlg    :=  false;

    Result := true;

// <203> ADD start
	finally
    	SessionPractice(C_ED_PROCESS);
    end;
// <203> ADD end
end;

//**********************************************************************
//*		Proccess	:	削除ﾁｪｯｸ <CHK>
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2006/02/15
//*		Parameter	:	exNCode : ﾁｪｯｸ対象内部ｺｰﾄﾞ
//*                     iMKbn   : ﾏｽﾀ区分
//*                     strErr  : ｴﾗｰ時の理由格納域
//*		Return		:	削除可(true)/削除不可(false)
//**********************************************************************
function TJNTCRP018001f.fnDelCheck(exNCode: Extended; iMKbn: Integer; var strErr: String): Boolean;
var
    iRet        : Integer;
begin
    Result := false;

	if TMSeries.IsMjsLink3 <> True then	//<MLXDEP-2>
	begin	//<MLXDEP-2>次の<MLXDEP-2>タグまでのbegin,end内を一段字下げ
	    try
	        SPMasHoj.Connection := dbCorp_Select;
	        //SPMasHoj.SessionName := dbCorp_Select.SessionName;

	        // 【会計】MP_MAS_CHK_HOJYOMA
	        with SPMasHoj do
	        begin
	            ParamByName('@NCode').AsFloat := exNCode;
	            ParamByName('@MasterKbn').AsInteger := iMKbn;
// Delphi10 ST
                FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
	            ExecProc;                       // ｽﾄｱﾄﾞ実行
                                            // 結果
	            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
	            strErr := ParamByName('@errMsg').AsString;
	        end;
	    except
	        // 例外発生
	        strErr := '例外発生(MP_MAS_CHK_HOJYOMA)';
	        Exit;
	    end;

	    if iRet = 1 then                        // 削除不可
	        Exit;

	    try
	        SPPayHoj.Connection := dbCorp_Select;
	        //SPPayHoj.SessionName := dbCorp_Select.SessionName;

	        // 【債務】MP_PAY_CHK_HOJYOMA
	        with SPPayHoj do
	        begin
	            ParamByName('@NCode').AsFloat := exNCode;
	            ParamByName('@MasterKbn').AsInteger := iMKbn;
// Delphi10 ST
                FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
	            ExecProc;                   // ｽﾄｱﾄﾞ実行
                                            // 結果
	            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
	            strErr := ParamByName('@errMsg').AsString;
	        end;
	    except
	        // 例外発生
	        strErr := '例外発生(MP_PAY_CHK_HOJYOMA)';
	        Exit;
	    end;

	    if iRet = 1 then                        // 削除不可
	        Exit;

	    try
	        SPSelHoj.Connection := dbCorp_Select;
	        //SPSelHoj.SessionName := dbCorp_Select.SessionName;

	        // 【販売】MP_SEL_CHK_HOJYOMA
	        with SPSelHoj do
	        begin
	            ParamByName('@NCode').AsFloat := exNCode;
	            ParamByName('@MasterKbn').AsInteger := iMKbn;
// Delphi10 ST
                FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
	            ExecProc;                   // ｽﾄｱﾄﾞ実行
                                            // 結果
	            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
	            strErr := ParamByName('@errMsg').AsString;
	        end;
	    except
	        // 例外発生
	        strErr := '例外発生(MP_SEL_CHK_HOJYOMA)';
	        Exit;
	    end;

	    if iRet = 1 then                        // 削除不可
	        Exit;

	end;	//<MLXDEP-2>

	try
	    SPDepHoj.Connection := dbCorp_Select;
	    //SPDepHoj.SessionName := dbCorp_Select.SessionName;

        // 【資産】MP_DEP_CHK_HOJYOMA
        with SPDepHoj do
        begin
            ParamByName('@NCode').AsFloat := exNCode;
            ParamByName('@MasterKbn').AsInteger := iMKbn;
// Delphi10 ST
            FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
            ExecProc;                   // ｽﾄｱﾄﾞ実行
                                            // 結果
            iRet := ParamByName('@RetCd').AsInteger;
                                            // ｴﾗｰ時の理由
            strErr := ParamByName('@errMsg').AsString;
        end;
    except
        // 例外発生
        strErr := '例外発生(MP_DEP_CHK_HOJYOMA)';
        Exit;
    end;

    if iRet = 1 then                        // 削除不可
        Exit;

    Result := true;                         // 全ﾁｪｯｸで削除可能と判断

end;

procedure TJNTCRP018001f.ECombo_HeaderEnter(Sender: TObject);
begin
// <192> ADD start
    m_AcControl  := Screen.ActiveControl;   // 参照時でもｱｸﾃｨﾌﾞｺﾝﾄﾛｰﾙを保存する
// <192> ADD end

    // <152> 指示の場合はﾌｧﾝｸｼｮﾝは非表示とする。
    fnSetFncType(false,0);

// <198> ADD start
	if giReferFlag = REFER then  			// 参照時
    begin
        if not m_cJNTArea.IsDelete then  	// 削除権限なしの場合
        begin
        	BSpeedButtonDel.Enabled := False;
        end
        else
        begin                        		// 詳細画面
         	if BSpeedButtonIS.Caption = '一覧(&T)' then
            begin                   		//削除権限を考慮する
               	if HojyoMA_DMQuery.Eof then
                begin
                 	BSpeedButtonDel.Enabled := false
                end
                else
                begin
             		if not m_cJNTArea.IsDelete then
                	begin
						BSpeedButtonDel.Enabled := false
                	end
                	else
                	begin           		// 諸口のみの場合は削除ﾎﾞﾀﾝを有効にする
                    	if HojyoMA_DMQuery.GetFld('Syokuchikbn').AsInteger = 1 then
                    	begin
                        	BSpeedButtonDel.Enabled := fnRecordCount();
                    	end
                    	else
                    	begin
                        	BSpeedButtonDel.Enabled := true;
                    	end;
                	end;
                end;
            end;
        end;
    end;
// <198> ADD end
// <247> ADD St
    // フォーカスされている時点ではどのプロジェクトが呼ばれるか未確定なので、申請書参照は使用不可とする
    B_ImportWF.Enabled := False;
// <247> ADD Ed

end;

procedure TJNTCRP018001f.InpModeChangeExecute(Sender: TObject);
begin

    // 実在ﾀﾌﾞ
    if (Root_PMTab.Items.Selected = PAGE_JITUZAI) then
    begin
        // 受注先ｺｰﾄﾞ(数値 TMNumEdit)⇒受注先名称
        if (Jituzai_ENEdit_CustomerCode.Visible) then
        begin
			m_bModeChg := true;
			Jituzai_ETEdit_CustomerName.Visible     :=  true;
			Jituzai_ETEdit_CustomerName.Enabled     :=  true;
			MjsSetFocus(Self,'Jituzai_ETEdit_CustomerName');
			Jituzai_ENEdit_CustomerCode.Value       :=  0;
			Jituzai_ENEdit_CustomerCode.InputFlag   :=  true;
			Jituzai_LLabel_CustomerName.Caption     :=  '';
			Jituzai_ENEdit_CustomerCode.Visible     :=  false;
			Jituzai_ENEdit_CustomerCode.Enabled     :=  false;
			Exit;
		end
        // 受注先ｺｰﾄﾞ(ﾌﾘｰ TMTxtEdit)⇒受注先名称
        else if (Jituzai_ETEdit_CustomerCode.Visible) then
        begin
            m_bModeChg := true;
			Jituzai_ETEdit_CustomerName.Visible     :=  true;
			Jituzai_ETEdit_CustomerName.Enabled     :=  true;
			MjsSetFocus(Self, 'Jituzai_ETEdit_CustomerName');
			Jituzai_ETEdit_CustomerCode.Text        :=  '';
			Jituzai_LLabel_CustomerName.Caption     :=  '';
			Jituzai_ETEdit_CustomerCode.Visible     :=  false;
			Jituzai_ETEdit_CustomerCode.Enabled     :=  false;
			Exit;
        end
        // 受注先名称⇒受注先ｺｰﾄﾞ
        else if (Jituzai_ETEdit_CustomerName.Visible) then
        begin
            if (MasterInfo_DMemDataTorihikiUse.AsInteger <> 0) then
    		begin
				m_bModeChg  :=  false;
                // ﾌﾘｰ属性
				if (MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2) then
				begin
					Jituzai_ETEdit_CustomerCode.Visible :=  true;
					Jituzai_ETEdit_CustomerCode.Enabled :=  true;
					MjsSetFocus(Self,'Jituzai_ETEdit_CustomerCode');
				end
				else
				begin
					Jituzai_ENEdit_CustomerCode.Visible :=  true;
					Jituzai_ENEdit_CustomerCode.Enabled :=  true;
					MjsSetFocus(Self,'Jituzai_ENEdit_CustomerCode');
				end;
				Jituzai_ETEdit_CustomerName.Text    :=  '';
				Jituzai_ETEdit_CustomerName.Visible :=  false;
				Jituzai_ETEdit_CustomerName.Enabled :=  false;
				Exit;
			end;
        end;
	end
    // 合計ﾀﾌﾞ
    else if (Root_PMTab.Items.Selected = PAGE_GOKEI) then
    begin
        // 受注先ｺｰﾄﾞ(数値 TMNumEdit)⇒受注先名称
        if (Goukei_ENEdit_CustomerCode.Visible) then
        begin
            m_bModeChg := true;
			Goukei_ETEdit_CustomerName.Visible      :=  true;
			Goukei_ETEdit_CustomerName.Enabled      :=  true;
			MjsSetFocus(Self,'Goukei_ETEdit_CustomerName');
			Goukei_ENEdit_CustomerCode.Value        :=  0;
			Goukei_ENEdit_CustomerCode.InputFlag    :=  true;
			Goukei_LLabel_CustomerName.Caption      :=  '';
			Goukei_ENEdit_CustomerCode.Visible      :=  false;
			Goukei_ENEdit_CustomerCode.Enabled      :=  false;
			Exit;
        end
        // 受注先ｺｰﾄﾞ(ﾌﾘｰ TMTxtEdit)⇒受注先名称
        else if (Goukei_ETEdit_CustomerCode.Visible) then
        begin
            m_bModeChg := true;
			Goukei_ETEdit_CustomerName.Visible      :=  true;
			Goukei_ETEdit_CustomerName.Enabled      :=  true;
			MjsSetFocus(Self,'Goukei_ETEdit_CustomerName');
			Goukei_ETEdit_CustomerCode.Text         :=  '';
			Goukei_LLabel_CustomerName.Caption      :=  '';
			Goukei_ETEdit_CustomerCode.Visible      :=  false;
			Goukei_ETEdit_CustomerCode.Enabled      :=  false;
			exit;
        end
        // 受注先名称⇒受注先ｺｰﾄﾞ
        else if (Goukei_ETEdit_CustomerName.Visible) then
        begin
            if (MasterInfo_DMemDataTorihikiUse.AsInteger <> 0) then
    		begin
                m_bModeChg  :=  false;
                // ﾌﾘｰ属性
				if (MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2) then
				begin
					Goukei_ETEdit_CustomerCode.Visible  :=  true;
					Goukei_ETEdit_CustomerCode.Enabled  :=  true;
					MjsSetFocus(Self,'Goukei_ETEdit_CustomerCode');
				end
				else
				begin
					Goukei_ENEdit_CustomerCode.Visible  := true;
					Goukei_ENEdit_CustomerCode.Enabled  := true;
					MjsSetFocus(Self,'Goukei_ENEdit_CustomerCode');
				end;
				Goukei_ETEdit_CustomerName.Text         :=  '';
				Goukei_ETEdit_CustomerName.Visible      :=  false;
				Goukei_ETEdit_CustomerName.Enabled      :=  false;
				Exit;
			end;
        end;
    end;
end;

//<155> - ST
// *************************************************************
// *
// *　　　作成日付：2006.06.20
// *　　　作成者  ：H.Endo
// *
// *　　　関数名称：ClearOtherRec
// *　　　関数説明：基本情報以外のWF取込ﾃﾞｰﾀ構造体をｸﾘｱ
// *
// *　　　入力　　：objRec  : ｸﾘｱしたい構造体
// *　　　出力　　：なし
// *
// *************************************************************
procedure TJNTCRP018001f.ClearOtherRec(var objRec: TWFOtherInfo);				//<WF>
begin
    with objRec do
    begin
        CanInsert       := false;           // 登録可否
        TrihikiKbn      := 0;               // 取引区分
        TrihikiKbnFlg   := false;           // 取引区分ｾｯﾄ有無
        TnNCode         := 0;               // 担当者ｺｰﾄﾞ
        TnNCodeFlg      := false;           // 担当者ｺｰﾄﾞｾｯﾄ有無
        BmNCode         := 0;               // 部門
        BmNCodeFlg      := false;           // 部門ｺｰﾄﾞｾｯﾄ有無
        YsGKin          := 0;               // 与信限度額
        YsGKinFlg       := false;           // 与信限度額ｾｯﾄ有無
    end;

{<225> DEL St
    with m_recSinseiKey do
    begin
// <214> MOD start
//        SwkForm := -1;
        SinForm := -1;
// <214> MOD end
        OrgNo := -1;
        HisID   := -1;  // <214> ADD
    end;
<225> DEL Ed}
// <225> ADD start
    m_recFLWSinseiKey[0].SinForm    := -1;
    m_recFLWSinseiKey[0].HisID      := -1;
    m_recFLWSinseiKey[0].OrgNo      := -1;
// <225> ADD end

	LSinsei.Visible	:= false;	//<155>
end;

//**************************************************************************
//	Component	:	申請書参照ﾎﾞﾀﾝ
//	Event		:	OnClick
//	Name		:
//**************************************************************************
procedure TJNTCRP018001f.B_ImportWFClick(Sender: TObject);						// <WF>
begin
	fnImportWF(Sender);
end;

//**********************************************************************
//*		Proccess	:	申請書参照(得意先/仕入先)
//*		Name		:	H.Endo(MJS)
//*		Date		:	2006/06/20
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.fnImportWF(Sender: TObject);							// <WF>
var
    lvExpSend   : rcJNTWFExpSend;           // WFEXP送信ﾊﾟﾗﾒｰﾀ
    lvExpRecv   : rcJNTWFExpRecv;           // WFEXP受信ﾊﾟﾗﾒｰﾀ
    iExpRtn     : Integer;
//<227> DEL    prTORIHIKI  : ^TKojiSinseiInfo;			// 工事/ﾌﾟﾛｼﾞｪｸﾄ申請書情報
//    prTORIHIKI  : ^TPrjKojiAll;			// 工事/ﾌﾟﾛｼﾞｪｸﾄ申請書情報  <227> ADD
// MOD <225> start
//    prKOJIOP    : ^TKojiToroku;             // 工事OP申請書情報 ADD <208>
    prPrjKojiAll : ^TPrjKojiAll;            // PRJおよび工事全般
//    bWFHenkouFlg : Boolean;
// MOD <225> end
begin

//    bWFHenkouFlg   := False;    // <225> ADD

    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord; // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select; // TDatabaseﾎﾟｲﾝﾀ
                                                // ｼｽﾃﾑ色
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
//<230> MOD St
{
	if m_pMyAppRecord.m_sParameter = '1' then	// 工事
		lvExpSend.MasterKbn :=  WF_MKBN_KOJI
	else										// ﾌﾟﾛｼﾞｪｸﾄ
		lvExpSend.MasterKbn :=  WF_MKBN_PROJECT;
}
    lvExpSend.MasterKbn := m_nMasterDivision;
//<230> MOD Ed

    lvExpSend.BumonNCode    :=  -1;             // 部署・部門内部ｺｰﾄﾞ(-1は指定無）
    lvExpSend.SyainNCode    :=  -1;             // 社員内部ｺｰﾄﾞ(-1は指定無）
    lvExpSend.SPKbn         :=  0;              // 単複区分
    lvExpSend.StartDate     := -1;
    lvExpSend.EndDate       := -1;
                                            // WF用ｴｸｽﾌﾟﾛｰﾗ出力
    iExpRtn :=  fnJNTWFExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <> 1 then                    // ｷｬﾝｾﾙ
        Exit;

    if (lvExpRecv.RetCount) > 0 then        // 中身あり?
    begin
//<227> MOD St
(*
                                       // 得意先or仕入先or取引先
        if (lvExpRecv.MasterKbn = WF_MKBN_PROJECT) or
// <208> MOD start
//		   (lvExpRecv.MasterKbn = WF_MKBN_KOJI) then
		   (lvExpRecv.MasterKbn = WF_MKBN_KOJI)   or
           (lvExpRecv.MasterKbn = WF_MKBN_KOJIOP) then
// <208> MOD end
        begin                               // 1ﾚｺｰﾄﾞ目を取得(一次は1ﾚｺｰﾄﾞのみ対応)
//<155> - ST
			if BSpeedButtonIS.Caption = '詳細(&T)' then
				BSpeedButtonISClick(self);

			if Jituzai_PPanel_Card.Visible = true then
		    begin
				Jituzai_BBitBtn_CancelClick(Sender);
// <208> MOD start
{
				if m_EdtSw then
					Exit;
}
                if m_RetFlg then
                    exit;
// <208> MOD end
                if LSinsei.Visible = False then
           			    LSinsei.Visible	:= true;    // ADD <208>

				Jituzai_PMTab.items.Selected := 0;
			end
			else if Goukei_PPanel_Card.Visible = true then
			begin
				Goukei_BBitBtn_CancelClick(Sender);
// <208> MOD start
{
				if m_EdtSw then
					Exit;
}
                if m_RetFlg then
                    exit;
// <208> MOD end
                if LSinsei.Visible = False then
           			    LSinsei.Visible	:= true;    // ADD <208>

				Goukei_PMTab.items.Selected := 0;
			end;
//<155> - ED
// <208> MOD start
//            prTORIHIKI :=  lvExpRecv.ArHdl[0];
//            fnFldSetWF(prTORIHIKI^);        // 戻りを画面に表示
            if (lvExpRecv.MasterKbn = WF_MKBN_PROJECT) or
               (lvExpRecv.MasterKbn = WF_MKBN_KOJI) then
            begin
                prTORIHIKI  :=  lvExpRecv.ArHdl[0];
                fnFldSetWF(prTORIHIKI^);            // 戻りを画面に表示
// <225> ADD start
                fnSinseiDspControl(false);
                m_FLWSinseiFlg := False;
// <225> ADD end
            end
            else if (lvExpRecv.MasterKbn = WF_MKBN_KOJIOP) then
            begin
// <225> MOD start
//                prKOJIOP    :=  lvExpRecv.ArHdl[0];
//                fnKojiFldSetWF(prKOJIOP^);
                prPrjKojiAll    :=  lvExpRecv.ArHdl[0];
                if prPrjKojiAll.SyncKbn = 14 then
                begin
                    fnKojiFldSetWF(prPrjKojiAll^);
                    fnSinseiDspControl(false);
                end
                else if prPrjKojiAll.SyncKbn = 19 then
                begin
                    fnSinseiDspControl(true);
                    fnHenkouPrjKojiAllFldSetWF(prPrjKojiAll^);
                end
                else
                    exit;

                m_FLWSinseiFlg := True;
// <225> MOD end
            end;
// <208> MOD end

//<155> - ST
			LSinsei.Visible	:= true;
// <225> DEL		    fnSinseiDspControl(false);
//<155> - ED
        end;
*)
        if (lvExpRecv.MasterKbn >= 201) and (lvExpRecv.MasterKbn <= 210) then
        begin
			if BSpeedButtonIS.Caption = '詳細(&T)' then
				BSpeedButtonISClick(self);

			if Jituzai_PPanel_Card.Visible = true then
		    begin
				Jituzai_BBitBtn_CancelClick(Sender);

                if m_RetFlg then
                    exit;

                if LSinsei.Visible = False then
           			    LSinsei.Visible	:= true;

				Jituzai_PMTab.items.Selected := 0;
			end
			else if Goukei_PPanel_Card.Visible = true then
			begin
				Goukei_BBitBtn_CancelClick(Sender);

                if m_RetFlg then
                    exit;

                if LSinsei.Visible = False then
           			    LSinsei.Visible	:= true;

				Goukei_PMTab.items.Selected := 0;
			end;

            prPrjKojiAll    :=  lvExpRecv.ArHdl[0];
            case prPrjKojiAll.SyncKbn of
                12: //プロジェクト受注
                begin
                    fnFldSetWF(prPrjKojiAll^);      // 戻りを画面に表示
                    fnSinseiDspControl(false);
                end;
                13: // 工事受注
                begin
                    fnFldSetWF(prPrjKojiAll^);      // 戻りを画面に表示
                    fnSinseiDspControl(false);
                end;
                14: // 工事/プロジェクト登録
                begin
                    fnKojiFldSetWF(prPrjKojiAll^);
                    fnSinseiDspControl(false);
                end;
                19: // 工事(プロジェクト)内容変更届
                begin
                    fnSinseiDspControl(true);
                    fnHenkouPrjKojiAllFldSetWF(prPrjKojiAll^);
                end;
                else
                    exit;
            end;

            m_FLWSinseiFlg := True;

			LSinsei.Visible	:= true;
        end;
//<227> MOD Ed
		abort;
    end;

end;

//**********************************************************************
//*		Proccess	:	申請書の情報をｾｯﾄ　構造体→画面
//*		Name		:	K.Katou
//*		Date		:	2005/10/31
//*     Param       :   objRec  : 工事/ﾌﾟﾛｼﾞｪｸﾄ申請書構造体
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
//<227> DEL procedure TJNTCRP018001f.fnFldSetWF(objRec: TKojiSinseiInfo);					// <WF>
procedure TJNTCRP018001f.fnFldSetWF(objRec: TPrjKojiAll);					// <227> ADD
var
	sName	: String;
	sGCode	: String;
    returnCode : Integer;  //<TAX> ADD
begin
    ClearOtherRec(m_recOther);              // 中身をｸﾘｱ
	with objRec do
    begin
		// 実在
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
	        if LongNameFlg then					// 正式名称
       		    Jituzai_ETEdit_LongName.Text := LongName;
	        if SimpleNameFlg then				// 簡略名称
       		    Jituzai_ETEdit_SimpleName.Text := SimpleName;
	        if RensoFlg then                    // 連想
				Jituzai_ETEdit_RenChar.Text := Renso;

			// 基本情報
			if YoteiDateSTFlg then				// 予定工期開始日
				Jituzai_EDEdit_StartDate.AsDateTime := YoteiDateST;
			if YoteiDateENFlg then				// 予定工期終了日
				Jituzai_EDEdit_EndDate.AsDateTime := YoteiDateEN;
//<FREE> ADD St
			if ScheDateSTFlg then				// 実績工期開始日
				Jituzai_EDEdit_JStartDate.AsDateTime := ScheDateST;
			if ScheDateENFlg then				// 実績工期終了日
				Jituzai_EDEdit_JEndDate.AsDateTime := ScheDateEN;
//<FREE> ADD Ed
			if RemarksFlg then					// 備考
				Jituzai_ETEdit_BIKO.Text := Remarks;
//<TAX> ADD St
            if PartPatternFlg then
            begin
                if (PartPattern = KBN_TAXIN) or
                    (toKojiInfoParam(currentSumKbn).SalesBase = SALES_COMPLETE) then
                begin
                    pushTaxButton(rdJTaxIn);
                end
                else
                begin
                    rdJTaxOut.Enabled := true;
                    pushTaxButton(rdJTaxOut);
                end;
            end;

            moKojiInfoMn.CreateKojiInfo(toKojiInfoParam(currentSumKbn));
//<TAX> ADD Ed
			// 契約情報
			if ContDateFlg then					// 契約年月日
			begin
				JKeiyaku_DMemData.Edit;
				JKeiyaku_DMemDataInfoKbn.AsInteger			:= 1;
				JKeiyaku_DMemDataNCode.AsFloat				:= JHojyoMA_DMemDataNCODE.AsFloat;
				JKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
				JKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
				JKeiDateSave[1]								:= ContDate;
				if ContNoFlg then				// 契約書NO
					JKeiyaku_DMemDataContNo.AsString		:= ContNo;
				if ContMoneyFlg then			// 契約金額(税込)
					JKeiyaku_DMemDataContMoney.AsCurrency	:= ContMoney;
				if sales_taxFlg then			// 消費税額
					JKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax;
				if tax_rateFlg then				// 消費税率
                begin
//<TAX> MOD St
                    if (moBusiness.GetTaxRate(tax_rate) <> nil) then
                    begin
                        JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;
                        JTaxRateSave[1]                         := tax_rate;
                    end
                    else
                    begin
                        JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= RATECODESTANDARD;
                        JTaxRateSave[1]                         := RATECODESTANDARD;
                    end;
{
					JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;
                    JTaxRateSave[1]                         := tax_rate;    // <169>
}
//<TAX> MOD Ed
                end;

                returnCode := changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);  //<TAX> ADD

				if m_iAccProKbn = 0 then
					JKeiyaku_DMemDataTax_RateName.AsString	:= ''
				else
				begin
// <201> ↓↓↓
//					if tax_rate = 9 then
//						JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
//<TAX> MOD St
                    // 青色表示
                    if returnCode = CONT_DIFFTAX then
                    begin
                        JKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                    end;

                    setContTaxInfo(
                        toKojiInfoParam(currentSumKbn),
                        toKojiInfo2Param(JKeiyaku_DMemData),
                        JKeiyaku_DMemData,
                        false);

{
					if 		tax_rate = 9 then	// 非課税
						JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]
					else if tax_rate = 8 then	// 不課税
						JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
					else
						JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[tax_rate];
}
//<TAX> MOD Ed
// <201> ↑↑↑
				end;

				JKeiyaku_DMemData.Post;
			end;

			// 入金情報
//<227> DEL			if RcvDateFlg then
            if RcvDate1Flg then  //<227> ADD
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
{<227> DEL St
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate;
				JNyuDateSave[1]							:= RcvDate;
				if RcvMoneyFlg then
					JNyukin_DMemDataContMoney.AsCurrency:= RcvMoney;
<227> DEL Ed}
//<227> ADD St
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
				JNyuDateSave[1]							:= RcvDate1;
				if RcvMoney1Flg then
					JNyukin_DMemDataContMoney.AsCurrency:= RcvMoney1;
//<227> ADD Ed
				JNyukin_DMemData.Post;
			end;

			// 工事の時
			if m_pMyAppRecord.m_sParameter = '1' then
			begin
				// 基本情報
				if PersonNCodeFlg then			// 担当者内部コード
				begin
					sGCode := fnInfoGet(KBN_TANTOSYA,PersonNCode,sName);
					if sGCode <> '' then
					begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Jituzai_ETEdit_PersonCode.Text		:= sGCode
						else
						begin
							Jituzai_ENEdit_PersonCode.Value		:= StrToInt64 (Trim (sGCode));
							Jituzai_ENEdit_PersonCode.InputFlag	:= false;
						end;
						Jituzai_LLabel_PersonName.Caption := sName;
					end;
				end;

				if CostomerNCodeFlg then		// 受注先
				begin
					sGCode := fnInfoGet(KBN_JUTYUSAKI,CostomerNCode,sName);
					if sGCode <> '' then
					begin
						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
							Jituzai_ETEdit_CustomerCode.Text		:= sGCode
						else
						begin
							Jituzai_ENEdit_CustomerCode.Value		:= StrToInt64 (Trim (sGCode));
							Jituzai_ENEdit_CustomerCode.InputFlag	:= false;
						end;
						Jituzai_LLabel_CustomerName.Caption := sName;
					end;
				end;

				// 工事
				if ZipCode1Flg then				// 郵便番号(基番)
					Jituzai_ENEdit_ZipCode1.Value := ZipCode1;
				if ZipCode2Flg then				// 郵便番号(枝番)
					Jituzai_ENEdit_ZipCode2.Value := ZipCode2;
				if Address1Flg then				// 住所（上段）
					Jituzai_ETEdit_Address1.Text  := Address1;
				if Address2Flg then				// 住所（下段）
					Jituzai_ETEdit_Address2.Text  := Address2;
				if TelNoFlg then				// 電話番号
					Jituzai_ETEdit_TelNo.Text	  := TelNo;
				if BmnNCodeFlg then				// 完成振替部門
				begin
					sGCode := fnInfoGet(KBN_BMN,BmnNCode,sName);
					if sGCode <> '' then
					begin
						if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
							Jituzai_ETEdit_BmnCode.Text		:= sGCode
						else
						begin
							Jituzai_ENEdit_BmnCode.Value	 := StrToInt64 (Trim (sGCode));
							Jituzai_ENEdit_BmnCode.InputFlag := false;
						end;
						Jituzai_LLabel_BmnName.Caption := sName;
					end;
				end;
			end;
//<FREE> ADD St
            // フリー項目セット
            setWfFreeItem(ObjRec);
//<FREE> ADD Ed
		end
		// 合計
		else
		begin
	        if LongNameFlg then					// 正式名称
       		    Goukei_ETEdit_LongName.Text := LongName;
	        if SimpleNameFlg then				// 簡略名称
       		    Goukei_ETEdit_SimpleName.Text := SimpleName;
	        if RensoFlg then                    // 連想
				Goukei_ETEdit_RenChar.Text := Renso;

			// 基本情報
			if YoteiDateSTFlg then				// 予定工期開始日
				Goukei_EDEdit_StartDate.AsDateTime := YoteiDateST;
			if YoteiDateENFlg then				// 予定工期終了日
				Goukei_EDEdit_EndDate.AsDateTime := YoteiDateEN;
//<FREE> ADD St
			if ScheDateSTFlg then				// 実績工期開始日
				Goukei_EDEdit_JStartDate.AsDateTime := ScheDateST;
			if ScheDateENFlg then				// 実績工期終了日
				Goukei_EDEdit_JEndDate.AsDateTime := ScheDateEN;
//<FREE> ADD Ed                
// <225> ADD start
			if RemarksFlg then					// 備考
				Jituzai_ETEdit_BIKO.Text := Remarks;
// <225> ADD end
            moKojiInfoMn.CreateKojiInfo(toKojiInfoParam(currentSumKbn));  //<TAX> ADD
			// 契約情報
			if ContDateFlg then					// 契約年月日
			begin
				GKeiyaku_DMemData.Edit;
				GKeiyaku_DMemDataInfoKbn.AsInteger			:= 1;
				GKeiyaku_DMemDataNCode.AsFloat				:= GHojyoMA_DMemDataNCODE.AsFloat;
				GKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
				GKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
				GKeiDateSave[1]								:= ContDate;
				if ContNoFlg then				// 契約書NO
					GKeiyaku_DMemDataContNo.AsString		:= ContNo;
				if ContMoneyFlg then			// 契約金額(税込)
					GKeiyaku_DMemDataContMoney.AsCurrency	:= ContMoney;
				if sales_taxFlg then			// 消費税額
					GKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax;
//<TAX> MOD St
				if tax_rateFlg then				// 消費税率
                begin
                    if (moBusiness.GetTaxRate(tax_rate) <> nil) then
                    begin
                        GKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;
                    end
                    else
                    begin
                        GKeiyaku_DMemDataDummyTax_Rate.AsInteger:= RATECODESTANDARD;
                    end;
                end;
{
				if tax_rateFlg then				// 消費税率
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;
}
//<TAX> MOD Ed

                returnCode := changeKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData), false);  //<TAX> ADD

				if m_iAccProKbn = 0 then
					GKeiyaku_DMemDataTax_RateName.AsString	:= ''
				else
				begin
// <201> ↓↓↓
//					if tax_rate = 9 then
//						GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
//<TAX> MOD St
                    // 青色表示
                    if returnCode = CONT_DIFFTAX then
                    begin
                        GKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                    end;

                    setContTaxInfo(
                        toKojiInfoParam(currentSumKbn),
                        toKojiInfo2Param(GKeiyaku_DMemData),
                        GKeiyaku_DMemData,
                        false);

{
					if 		tax_rate = 9 then		// 非課税
						GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]
					else if tax_rate = 8 then		// 不課税
						GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
					else
						GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[tax_rate];
}
//<TAX> MOD Ed
// <201> ↑↑↑
				end;

				GKeiyaku_DMemData.Post;
			end;

			// 入金情報
{<227> DEL St
			if RcvDateFlg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate;
				GNyuDateSave[1]							:= RcvDate;
				if RcvMoneyFlg then
					GNyukin_DMemDataContMoney.AsCurrency:= RcvMoney;
				GNyukin_DMemData.Post;
			end;
<227> DEL Ed}
//<227> ADD St
			if RcvDate1Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
				GNyuDateSave[1]							:= RcvDate1;
				if RcvMoney1Flg then
					GNyukin_DMemDataContMoney.AsCurrency:= RcvMoney1;
				GNyukin_DMemData.Post;
			end;
//<227> ADD Ed
			// 工事の時
			if m_pMyAppRecord.m_sParameter = '1' then
			begin
				// 基本情報
				if PersonNCodeFlg then			// 担当者内部コード
				begin
					sGCode := fnInfoGet(KBN_TANTOSYA,PersonNCode,sName);
					if sGCode <> '' then
					begin
						if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
							Goukei_ETEdit_PersonCode.Text := sGCode
						else
						begin
							Goukei_ENEdit_PersonCode.Value	   := StrToInt64 (Trim (sGCode));
							Goukei_ENEdit_PersonCode.InputFlag := false;
						end;
						Goukei_LLabel_PersonName.Caption := sName;
					end;
				end;

				if CostomerNCodeFlg then		// 受注先
				begin
					sGCode := fnInfoGet(KBN_JUTYUSAKI,CostomerNCode,sName);
					if sGCode <> '' then
					begin
						if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
							Goukei_ETEdit_CustomerCode.Text := sGCode
						else
						begin
							Goukei_ENEdit_CustomerCode.Value	 := StrToInt64 (Trim (sGCode));
							Goukei_ENEdit_CustomerCode.InputFlag := false;
						end;
						Goukei_LLabel_CustomerName.Caption := sName;
					end;
				end;

				// 工事
				if ZipCode1Flg then				// 郵便番号(基番)
					Goukei_ENEdit_ZipCode1.Value := ZipCode1;
				if ZipCode2Flg then				// 郵便番号(枝番)
					Goukei_ENEdit_ZipCode2.Value := ZipCode2;
				if Address1Flg then				// 住所（上段）
					Goukei_ETEdit_Address1.Text  := Address1;
				if Address2Flg then				// 住所（下段）
					Goukei_ETEdit_Address2.Text  := Address2;
				if TelNoFlg then				// 電話番号
					Goukei_ETEdit_TelNo.Text	  := TelNo;
			end;
		end;

        // 申請書情報ｷｰ
// <214> MOD start
{
        if SwkFormFlg then                  // 仕訳入力形式
            m_recSinseiKey.SwkForm := SwkForm
        else
            m_recSinseiKey.SwkForm := -1;
}
{<225> DEL St
        if SinFormFlg then                  // 申請書入力形式
            m_recSinseiKey.SinForm := SinForm
        else
            m_recSinseiKey.SinForm := -1;

        if HisIDFlg then                    // 処理履歴ID
            m_recSinseiKey.HisID := HisID
        else
            m_recSinseiKey.HisID := -1;
// <214> MOD end
        if OrgNoFlg then                    // 原票No
            m_recSinseiKey.OrgNo := OrgNo
        else
            m_recSinseiKey.OrgNo := -1;
<225> DEL Ed}
//<225> ADD St
        if SinFormFlg then                  // 申請書入力形式
            m_recFLWSinseiKey[0].SinForm    := SinForm
        else
            m_recFLWSinseiKey[0].SinForm    := -1;
        if HisIDFlg then                    // 処理履歴ID
            m_recFLWSinseiKey[0].HisID      := HisID
        else
            m_recFLWSinseiKey[0].HisID      := -1;
//<225> DEL        if OrgNoFlg then                    // 原票No
        if SinOrgNoFlg then                    // 原票No  debug
//<225> DEL            m_recFLWSinseiKey[0].OrgNo      := OrgNo
            m_recFLWSinseiKey[0].OrgNo      := SinOrgNo  //<225> ADD
        else
            m_recFLWSinseiKey[0].OrgNo      := -1;
//<225> ADD Ed
    end;
    m_recOther.CanInsert := true;           // 取込可能
end;

//**********************************************************************
//*		Proccess	:	申請書の情報をｾｯﾄ　構造体→画面 ADD <208>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2008/09/05
//*     Param       :   objRec  : 工事OP申請書構造体
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
// <225> MOD start
//procedure TJNTCRP018001f.fnKojiFldSetWF(objRec: TKojiToroku);
procedure TJNTCRP018001f.fnKojiFldSetWF(objRec: TPrjKojiAll);
// <225> MOD end
var
	sName	: String;
	sGCode	: String;
    returnCode : Integer;  //<TAX> ADD
begin
    ClearOtherRec(m_recOther);              // 中身をｸﾘｱ
	with objRec do
    begin
		// 実在
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
	        if LongNameFlg then					// 正式名称
       		    Jituzai_ETEdit_LongName.Text := LongName;
	        if SimpleNameFlg then				// 簡略名称
       		    Jituzai_ETEdit_SimpleName.Text := SimpleName;
	        if RensoFlg then                    // 連想
				Jituzai_ETEdit_RenChar.Text := Renso;
			// 基本情報
			if YoteiDateSTFlg then				// 予定工期開始日
				Jituzai_EDEdit_StartDate.AsDateTime := YoteiDateST;
			if YoteiDateENFlg then				// 予定工期終了日
				Jituzai_EDEdit_EndDate.AsDateTime := YoteiDateEN;
//<FREE> ADD St
			if ScheDateSTFlg then				// 実績工期開始日
				Jituzai_EDEdit_JStartDate.AsDateTime := ScheDateST;
			if ScheDateENFlg then				// 実績工期終了日
				Jituzai_EDEdit_JEndDate.AsDateTime := ScheDateEN;
//<FREE> ADD Ed
			if RemarksFlg then					// 備考
				Jituzai_ETEdit_BIKO.Text    := Remarks;
			// 工事の時
//<225> DEL			if m_pMyAppRecord.m_sParameter = '1' then
//<225> DEL            begin
            if PersonNCodeFlg then			// 担当者内部コード
            begin
                sGCode := fnInfoGet(KBN_TANTOSYA,PersonNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                        Jituzai_ETEdit_PersonCode.Text		:= sGCode
                    else
                    begin
                        Jituzai_ENEdit_PersonCode.Value		:= StrToInt64 (Trim (sGCode));
                        Jituzai_ENEdit_PersonCode.InputFlag	:= false;
                    end;
                    Jituzai_LLabel_PersonName.Caption := sName;
                end;
            end;
            if CostomerNCodeFlg then		// 受注先
            begin
                sGCode := fnInfoGet(KBN_JUTYUSAKI,CostomerNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                        Jituzai_ETEdit_CustomerCode.Text    := sGCode
                    else
                    begin
                        Jituzai_ENEdit_CustomerCode.Value		:= StrToInt64 (Trim (sGCode));
                        Jituzai_ENEdit_CustomerCode.InputFlag	:= false;
                    end;
                    Jituzai_LLabel_CustomerName.Caption := sName;
                end;
            end;
            if SesNCodeFlg then             // 施主
            begin
                sGCode := fnInfoGet(KBN_SESHU,SesNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                        Jituzai_ETEdit_SeshuCode.Text   := sGCode
                    else
                    begin
                        Jituzai_ENEdit_SeshuCode.Value	 := StrToInt64 (Trim (sGCode));
                        Jituzai_ENEdit_SeshuCode.InputFlag := false;
                    end;
                    Jituzai_LLabel_SeshuName.Caption := sName;
                end;
            end;
            if UkeoiKbnFlg then                // 請負区分
            begin
                Jituzai_ENEdit_UkeoiKbn.Value       := UkeoiKbn;
                Jituzai_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[UkeoiKbn];
            end;
            if SeiBmnNCodeFlg then          // 施行部門内部コード
            begin
                sGCode := fnInfoGet(KBN_BMN,SeiBmnNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SekouBmnCode.Text    := sGCode;
                        Jituzai_ETEdit_SekouBmnCode.TagStr  := FloatToStr(SeiBmnNCode); // <238> ADD
                    end
                    else
                    begin
                        Jituzai_ENEdit_SekouBmnCode.Value       := StrToInt64 (Trim (sGCode));
                        Jituzai_ENEdit_SekouBmnCode.InputFlag   := false;
                        Jituzai_ENEdit_SekouBmnCode.TagStr      := FloatToStr(SeiBmnNCode); // <238> ADD
                    end;
                    Jituzai_LLabel_SekouBmnName.Caption := sName;
                end;
            end;
            if SeiTanNCodeFlg then          //施行担当者内部コード
            begin
                sGCode := fnInfoGet(KBN_TANTOSYA,SeiTanNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                        Jituzai_ETEdit_SekouPersonCode.Text		:= sGCode
                    else
                    begin
                        Jituzai_ENEdit_SekouPersonCode.Value		:= StrToInt64 (Trim (sGCode));
                        Jituzai_ENEdit_SekouPersonCode.InputFlag	:= false;
                    end;
                    Jituzai_LLabel_SekouPersonName.Caption := sName;
                end;
            end;
            // 工事
            if ZipCode1Flg then				// 郵便番号(基番)
                Jituzai_ENEdit_ZipCode1.Value := ZipCode1;
            if ZipCode2Flg then				// 郵便番号(枝番)
                Jituzai_ENEdit_ZipCode2.Value := ZipCode2;
            if Address1Flg then				// 住所（上段）
                Jituzai_ETEdit_Address1.Text  := Address1;
            if Address2Flg then				// 住所（下段）
                Jituzai_ETEdit_Address2.Text  := Address2;
            if TelNoFlg then				// 電話番号
                Jituzai_ETEdit_TelNo.Text	  := TelNo;
            if FaxNoFlg then                // FAX番号
                Jituzai_ETEdit_FaxNo.Text     := FaxNo;
            if BmnNCodeFlg then				// 完成振替部門
            begin
                sGCode := fnInfoGet(KBN_BMN,BmnNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_BmnCode.Text		:= sGCode;
                        Jituzai_ETEdit_BmnCode.TagStr   := FloatToStr(BmnNCode);    // <238> ADD
                    end
                    else
                    begin
                        Jituzai_ENEdit_BmnCode.Value	 := StrToInt64 (Trim (sGCode));
                        Jituzai_ENEdit_BmnCode.InputFlag := false;
                        Jituzai_ENEdit_BmnCode.TagStr    := FloatToStr(BmnNCode);    // <238> ADD
                    end;
                    Jituzai_LLabel_BmnName.Caption := sName;
                end;
            end;
// <225> ADD start
            // <273> St
            // 工事の時
            //mod if m_pMyAppRecord.m_sParameter = '1' then
            if (m_pMyAppRecord.m_sParameter = '1') or                                           // 工事
               ((m_pMyAppRecord.m_sParameter <> '1') and (TMSeries.IsGalielopt2 = True) ) then  // Gali2 ﾌﾟﾛｼﾞｪｸﾄ
            // <273> Ed
            begin
                if SalesBaseFlg then            // 売上計上基準
                begin
// <291> MOD st
//                    if m_MstrKbn4 = 1 then  // 進行基準を採用しているか？
                    if ((m_MstrKbn4 = 1) or (m_MstrKbn20 = 1)) then  // 進行基準を採用しているか？もしくは収益認識基準を採用しているか　
// <291> MOD ed
                    begin
                        Jituzai_ENEdit_SalesBase.Value		    := SalesBase;
                        Jituzai_LLabel_SalesBaseDsp.Caption	    := sSales[SalesBase];
                    end
                    else
                    begin
                        Jituzai_ENEdit_SalesBase.Value		    := 0;
                        Jituzai_LLabel_SalesBaseDsp.Caption	    := sSales[0];
                    end;
                end;
            end;

// <225> ADD end
            if GaiyouFlg then                   // 工事概要
                Jituzai_ETEdit_Gaiyou.Text  := Gaiyou;
//<225> DEL            end;
//<TAX> ADD St
            // 税込／税抜
            if PartPatternFlg then
            begin
                if (PartPattern = KBN_TAXIN) or
                    (toKojiInfoParam(currentSumKbn).SalesBase = SALES_COMPLETE) then
                begin
                    pushTaxButton(rdJTaxIn);
                end
                else
                begin
                    rdJTaxOut.Enabled := true;
                    pushTaxButton(rdJTaxOut);
                end;
            end;

            moKojiInfoMn.CreateKojiInfo(toKojiInfoParam(currentSumKbn));
//<TAX> ADD Ed
			// 契約情報
			if ContDateFlg then					// 契約年月日
			begin
				JKeiyaku_DMemData.Edit;
				JKeiyaku_DMemDataInfoKbn.AsInteger			:= 1;
				JKeiyaku_DMemDataNCode.AsFloat				:= JHojyoMA_DMemDataNCODE.AsFloat;
				JKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
				JKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
				JKeiDateSave[1]								:= ContDate;
				if ContNoFlg then				// 契約書NO
					JKeiyaku_DMemDataContNo.AsString		:= ContNo;
				if ContMoneyFlg then			// 契約金額(税込)
					JKeiyaku_DMemDataContMoney.AsCurrency	:= ContMoney;
				if sales_taxFlg then			// 消費税額
                begin
					JKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax;
{<227> DEL St
					JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= 0;           // 消費税率
                    JTaxRateSave[1]                         := 0;
				    if m_iAccProKbn = 0 then                                // 消費税率名称
					    JKeiyaku_DMemDataTax_RateName.AsString	:= ''
                    else
					    JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[0];
<227> DEL Ed}
                end;
//<227> ADD St
                // 消費税率
                if tax_rateFlg = True then
                begin
//<TAX> DEL					JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;        // 消費税率
//<TAX> DEL                    JTaxRateSave[1]                         := tax_rate;
//<TAX> ADD St
                    if (moBusiness.GetTaxRate(tax_rate) <> nil) then
                    begin
                        JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;
                        JTaxRateSave[1]                         := tax_rate;
                    end
                    else
                    begin
                        JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= RATECODESTANDARD;
                        JTaxRateSave[1]                         := RATECODESTANDARD;
                    end;

                    returnCode := changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);
//<TAX> ADD Ed
				    if m_iAccProKbn = 0 then                                    // 0:免税業者
					    JKeiyaku_DMemDataTax_RateName.AsString	:= ''           // 消費税率名称
                    else
                    begin
//<TAX> MOD St
                        // 青色表示
                        if returnCode = CONT_DIFFTAX then
                        begin
                            JKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                        end;

                        setContTaxInfo(
                            toKojiInfoParam(currentSumKbn),
                            toKojiInfo2Param(JKeiyaku_DMemData),
                            JKeiyaku_DMemData,
                            false);
{
                        if tax_rate = 9 then		// 非課税
					        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]
                        else if tax_rate = 8 then		// 不課税
					        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
                        else
					        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[tax_rate];
}
//<TAX> MOD Ed
                    end;
                end
                else
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger    := 0;
                    returnCode := changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);  //<TAX> ADD

	                if m_iAccProKbn = 0 then
					    JKeiyaku_DMemDataTax_RateName.AsString	:= ''
                    else
//<TAX> DEL					    JKeiyaku_DMemDataTax_RateName.AsString	    := sTax[0];
//<TAX> ADD St
                    begin
                        // 青色表示
                        if returnCode = CONT_DIFFTAX then
                        begin
                            JKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                        end;

                        setContTaxInfo(
                            toKojiInfoParam(currentSumKbn),
                            toKojiInfo2Param(JKeiyaku_DMemData),
                            JKeiyaku_DMemData,
                            false);
                    end;
//<TAX> ADD Ed
                end;
//<227> ADD Ed
				JKeiyaku_DMemData.Post;
			end;
// <225> MOD start
{
			// 入金情報
			if RcvDateFlg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate;
				JNyuDateSave[1]							:= RcvDate;
				if RcvMoneyFlg then
					JNyukin_DMemDataContMoney.AsCurrency:= RcvMoney;
				JNyukin_DMemData.Post;
			end;
}
            JNyukin_DMemData.First;
			// 入金情報1
			if RcvDate1Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
				JNyuDateSave[1]							:= RcvDate1;
				if RcvMoney1Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney1;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報2
			if RcvDate2Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate2;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate2;
				JNyuDateSave[2]							:= RcvDate2;
				if RcvMoney2Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney2;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報3
			if RcvDate3Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate3;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate3;
				JNyuDateSave[3]							:= RcvDate3;
				if RcvMoney3Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney3;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報4
			if RcvDate4Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate4;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate4;
				JNyuDateSave[4]							:= RcvDate4;
				if RcvMoney4Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney4;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報5
			if RcvDate5Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate5;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate5;
				JNyuDateSave[5]							:= RcvDate5;
				if RcvMoney5Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney5;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報6
			if RcvDate6Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate6;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate6;
				JNyuDateSave[6]							:= RcvDate6;
				if RcvMoney6Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney6;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報7
			if RcvDate7Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate7;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate7;
				JNyuDateSave[7]							:= RcvDate7;
				if RcvMoney7Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney7;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報8
			if RcvDate8Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate8;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate8;
				JNyuDateSave[8]							:= RcvDate8;
				if RcvMoney8Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney8;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報9
			if RcvDate9Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate9;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate9;
				JNyuDateSave[9]							:= RcvDate9;
				if RcvMoney9Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney9;
				JNyukin_DMemData.Post;
                JNyukin_DMemData.Next;
			end;
			// 入金情報10
			if RcvDate10Flg then
			begin
				JNyukin_DMemData.Edit;
				JNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				JNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				JNyukin_DMemDataContDate.AsDateTime		:= RcvDate10;
				JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate10;
				JNyuDateSave[10]						:= RcvDate10;
				if RcvMoney10Flg then
					JNyukin_DMemDataContMoney.AsCurrency := RcvMoney10;
				JNyukin_DMemData.Post;
			end;
// <225> MOD end
            // ﾌﾟﾛｼﾞｪｸﾄ分類1
            if BunruiNCode1Flg then
            begin
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [1].nMasterDivision,BunruiNCode1,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_BunCd1.Text      := sGCode;
                    Jituzai_LLabel_BunNm1.Caption   := sName;
                end;
            end;
            // ﾌﾟﾛｼﾞｪｸﾄ分類2
            if BunruiNCode2Flg then
            begin
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [2].nMasterDivision,BunruiNCode2,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_BunCd2.Text      := sGCode;
                    Jituzai_LLabel_BunNm2.Caption   := sName;
                end;
            end;
            // ﾌﾟﾛｼﾞｪｸﾄ分類3
            if BunruiNCode3Flg then
            begin
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [3].nMasterDivision,BunruiNCode3,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_BunCd3.Text      := sGCode;
                    Jituzai_LLabel_BunNm3.Caption   := sName;
                end;
            end;
            // ﾌﾟﾛｼﾞｪｸﾄ分類4
            if BunruiNCode4Flg then
            begin
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [4].nMasterDivision,BunruiNCode4,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_BunCd4.Text      := sGCode;
                    Jituzai_LLabel_BunNm4.Caption   := sName;
                end;
            end;
            // ﾌﾟﾛｼﾞｪｸﾄ分類5
            if BunruiNCode5Flg then
            begin
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [5].nMasterDivision,BunruiNCode5,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_BunCd5.Text      := sGCode;
                    Jituzai_LLabel_BunNm5.Caption   := sName;
                end;
            end;
// <234> ADD start
            // セグメント情報1
            if (Jituzai_ETEdit_SegCd1.Visible = True and SegNCode1Flg = True) then
            begin
                sGCode := fnGetGCODE(SegNCode1,m_arAdoptInfo_Seg [1].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [1].nMasterDivision,m_arAdoptInfo_Seg [1].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd1.Text      := sGCode;
                    Jituzai_LLabel_SegNm1.Caption   := sName;
                end;
            end;
            // セグメント情報2
            if (Jituzai_ETEdit_SegCd2.Visible = True and SegNCode2Flg = True) then
            begin
                sGCode := fnGetGCODE(SegNCode2,m_arAdoptInfo_Seg [2].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [2].nMasterDivision,m_arAdoptInfo_Seg [2].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd2.Text      := sGCode;
                    Jituzai_LLabel_SegNm2.Caption   := sName;
                end;
            end;
            // セグメント情報3
            if (Jituzai_ETEdit_SegCd3.Visible = True and SegNCode3Flg = True) then
            begin
                sGCode := fnGetGCODE(SegNCode3,m_arAdoptInfo_Seg [3].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [3].nMasterDivision,m_arAdoptInfo_Seg [3].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd3.Text      := sGCode;
                    Jituzai_LLabel_SegNm3.Caption   := sName;
                end;
            end;
            // セグメント情報4
            if (Jituzai_ETEdit_SegCd4.Visible = True and SegNCode4Flg = True) then
            begin
                sGCode := fnGetGCODE(SegNCode4,m_arAdoptInfo_Seg [4].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [4].nMasterDivision,m_arAdoptInfo_Seg [4].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd4.Text      := sGCode;
                    Jituzai_LLabel_SegNm4.Caption   := sName;
                end;
            end;
            // セグメント情報5
            if (Jituzai_ETEdit_SegCd5.Visible = True and SegNCode5Flg = True) then
            begin
                sGCode := fnGetGCODE(SegNCode5,m_arAdoptInfo_Seg [5].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [5].nMasterDivision,m_arAdoptInfo_Seg [5].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd5.Text      := sGCode;
                    Jituzai_LLabel_SegNm5.Caption   := sName;
                end;
            end;
            // セグメント情報6
            if (Jituzai_ETEdit_SegCd6.Visible = True and SegNCode6Flg = True) then
            begin
                sGCode  := fnGetGCODE(SegNCode6,m_arAdoptInfo_Seg [6].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [6].nMasterDivision,m_arAdoptInfo_Seg [6].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd6.Text      := sGCode;
                    Jituzai_LLabel_SegNm6.Caption   := sName;
                end;
            end;
            // セグメント情報7
            if (Jituzai_ETEdit_SegCd7.Visible = True and SegNCode7Flg = True) then
            begin
                sGCode  := fnGetGCODE(SegNCode7,m_arAdoptInfo_Seg [7].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [7].nMasterDivision,m_arAdoptInfo_Seg [7].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd7.Text      := sGCode;
                    Jituzai_LLabel_SegNm7.Caption   := sName;
                end;
            end;
            // セグメント情報8
            if (Jituzai_ETEdit_SegCd8.Visible = True and SegNCode8Flg = True) then
            begin
                sGCode  := fnGetGCODE(SegNCode8,m_arAdoptInfo_Seg [8].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [8].nMasterDivision,m_arAdoptInfo_Seg [8].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd8.Text      := sGCode;
                    Jituzai_LLabel_SegNm8.Caption   := sName;
                end;
            end;
            // セグメント情報9
            if (Jituzai_ETEdit_SegCd9.Visible = True and SegNCode9Flg = True) then
            begin
                sGCode  := fnGetGCODE(SegNCode9,m_arAdoptInfo_Seg [9].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [9].nMasterDivision,m_arAdoptInfo_Seg [9].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd9.Text      := sGCode;
                    Jituzai_LLabel_SegNm9.Caption   := sName;
                end;
            end;
            // セグメント情報10
            if (Jituzai_ETEdit_SegCd10.Visible = True and SegNCode10Flg = True) then
            begin
                sGCode  := fnGetGCODE(SegNCode10,m_arAdoptInfo_Seg [10].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [10].nMasterDivision,m_arAdoptInfo_Seg [10].nCodeAttribute,sName);
                if sGCode <> '' then
                begin
                    Jituzai_ETEdit_SegCd10.Text      := sGCode;
                    Jituzai_LLabel_SegNm10.Caption   := sName;
                end;
            end;
// <234> ADD end
//<FREE> ADD St
            // フリー項目セット
            setWfFreeItem(ObjRec);
//<FREE> ADD Ed
		end
		// 合計
		else
		begin
	        if LongNameFlg then					// 正式名称
       		    Goukei_ETEdit_LongName.Text := LongName;
	        if SimpleNameFlg then				// 簡略名称
       		    Goukei_ETEdit_SimpleName.Text := SimpleName;
	        if RensoFlg then                    // 連想
				Goukei_ETEdit_RenChar.Text := Renso;
			// 基本情報
			if YoteiDateSTFlg then				// 予定工期開始日
				Goukei_EDEdit_StartDate.AsDateTime := YoteiDateST;
			if YoteiDateENFlg then				// 予定工期終了日
				Goukei_EDEdit_EndDate.AsDateTime := YoteiDateEN;
//<FREE> ADD St
			if ScheDateSTFlg then				// 実績工期開始日
				Goukei_EDEdit_JStartDate.AsDateTime := ScheDateST;
			if ScheDateENFlg then				// 実績工期終了日
				Goukei_EDEdit_JEndDate.AsDateTime := ScheDateEN;
//<FREE> ADD Ed
			// 工事の時
//<225> DEL			if m_pMyAppRecord.m_sParameter = '1' then
//<225> DEL			begin
            // 基本情報
            if PersonNCodeFlg then			// 担当者内部コード
            begin
                sGCode := fnInfoGet(KBN_TANTOSYA,PersonNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                        Goukei_ETEdit_PersonCode.Text := sGCode
                    else
                    begin
                        Goukei_ENEdit_PersonCode.Value	   := StrToInt64 (Trim (sGCode));
                        Goukei_ENEdit_PersonCode.InputFlag := false;
                    end;
                    Goukei_LLabel_PersonName.Caption := sName;
                end;
            end;
            if CostomerNCodeFlg then		// 受注先
            begin
                sGCode := fnInfoGet(KBN_JUTYUSAKI,CostomerNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                        Goukei_ETEdit_CustomerCode.Text := sGCode
                    else
                    begin
                        Goukei_ENEdit_CustomerCode.Value	 := StrToInt64 (Trim (sGCode));
                        Goukei_ENEdit_CustomerCode.InputFlag := false;
                    end;
                    Goukei_LLabel_CustomerName.Caption := sName;
                end;
            end;
            if SesNCodeFlg then             // 施主
            begin
                sGCode := fnInfoGet(KBN_SESHU,SesNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                        Goukei_ETEdit_SeshuCode.Text		:= sGCode
                    else
                    begin
                        Goukei_ENEdit_SeshuCode.Value	 := StrToInt64 (Trim (sGCode));
                        Goukei_ENEdit_SeshuCode.InputFlag := false;
                    end;
                    Goukei_LLabel_SeshuName.Caption := sName;
                end;
            end;
            if UkeoiKbnFlg then                // 請負区分
            begin
                Goukei_ENEdit_UkeoiKbn.Value        := UkeoiKbn;
                Goukei_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[UkeoiKbn];
            end;
            if SeiBmnNCodeFlg then          // 施行部門内部コード
            begin
                sGCode := fnInfoGet(KBN_BMN,SeiBmnNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
                        Goukei_ETEdit_SekouBmnCode.Text		:= sGCode;
                        Goukei_ETEdit_SekouBmnCode.TagStr   := FloatToStr(SeiBmnNCode); // <238> ADD
                    end
                    else
                    begin
                        Goukei_ENEdit_SekouBmnCode.Value	 := StrToInt64 (Trim (sGCode));
                        Goukei_ENEdit_SekouBmnCode.InputFlag := false;
                        Goukei_ENEdit_SekouBmnCode.TagStr    := FloatToStr(SeiBmnNCode); // <238> ADD
                    end;
                    Goukei_LLabel_SekouBmnName.Caption := sName;
                end;
            end;
            if SeiTanNCodeFlg then          //施行担当者内部コード
            begin
                sGCode := fnInfoGet(KBN_TANTOSYA,SeiTanNCode,sName);
                if sGCode <> '' then
                begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                        Goukei_ETEdit_SekouPersonCode.Text		:= sGCode
                    else
                    begin
                        Goukei_ENEdit_SekouPersonCode.Value		:= StrToInt64 (Trim (sGCode));
                        Goukei_ENEdit_SekouPersonCode.InputFlag	:= false;
                    end;
                    Goukei_LLabel_SekouPersonName.Caption := sName;
                end;
            end;
            // 工事
            if ZipCode1Flg then				// 郵便番号(基番)
                Goukei_ENEdit_ZipCode1.Value := ZipCode1;
            if ZipCode2Flg then				// 郵便番号(枝番)
                Goukei_ENEdit_ZipCode2.Value := ZipCode2;
            if Address1Flg then				// 住所（上段）
                Goukei_ETEdit_Address1.Text  := Address1;
            if Address2Flg then				// 住所（下段）
                Goukei_ETEdit_Address2.Text  := Address2;
            if TelNoFlg then				// 電話番号
                Goukei_ETEdit_TelNo.Text	 := TelNo;
            if FaxNoFlg then                // FAX番号
                Goukei_ETEdit_FAXNo.Text     := FaxNo;
            if RemarksFlg then				// 備考
                Goukei_ETEdit_BIKO.Text      := Remarks;
            if GaiyouFlg then               // 工事概要
                Goukei_ETEdit_Gaiyou.Text    := Gaiyou;
//<225> DEL			end;

            moKojiInfoMn.CreateKojiInfo(toKojiInfoParam(currentSumKbn));  //<TAX> ADD
			// 契約情報
			if ContDateFlg then					// 契約年月日
			begin
				GKeiyaku_DMemData.Edit;
				GKeiyaku_DMemDataInfoKbn.AsInteger			:= 1;
				GKeiyaku_DMemDataNCode.AsFloat				:= GHojyoMA_DMemDataNCODE.AsFloat;
				GKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
				GKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
				GKeiDateSave[1]								:= ContDate;
				if ContNoFlg then				// 契約書NO
					GKeiyaku_DMemDataContNo.AsString		:= ContNo;
				if ContMoneyFlg then			// 契約金額(税込)
					GKeiyaku_DMemDataContMoney.AsCurrency	:= ContMoney;
				if sales_taxFlg then			// 消費税額
                begin
					GKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax;
{<227> DEL St
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger:= 0;           // 消費税率
				    if m_iAccProKbn = 0 then                                // 消費税率名称
					    GKeiyaku_DMemDataTax_RateName.AsString	:= ''
				    else
					    GKeiyaku_DMemDataTax_RateName.AsString	:=sTax[0];
<227> DEL Ed}
                end;
//<227> ADD St
                // 消費税率
                if tax_rateFlg = True then
                begin
//<TAX> MOD St
                    if (moBusiness.GetTaxRate(tax_rate) <> nil) then
                    begin
                        GKeiyaku_DMemDataDummyTax_Rate.AsInteger    := tax_rate;    // 消費税率
                        GTaxRateSave[1]                             := tax_rate;
                    end
                    else
                    begin
                        GKeiyaku_DMemDataDummyTax_Rate.AsInteger    := RATECODESTANDARD;    // 消費税率
                        GTaxRateSave[1]                             := RATECODESTANDARD;
                    end;
{
					GKeiyaku_DMemDataDummyTax_Rate.AsInteger    := tax_rate;    // 消費税率
                    GTaxRateSave[1]                             := tax_rate;
}
//<TAX> MOD Ed
                    returnCode := changeKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData), false);  //<TAX> ADD
                    
				    if m_iAccProKbn = 0 then                                    // 0:免税業者
					    GKeiyaku_DMemDataTax_RateName.AsString	:= ''           // 消費税率名称
                    else
                    begin
//<TAX> MOD St
                        setContTaxInfo(
                            toKojiInfoParam(currentSumKbn),
                            toKojiInfo2Param(GKeiyaku_DMemData),
                            GKeiyaku_DMemData,
                            false);

{
                        if tax_rate = 9 then		// 非課税
					        GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]
                        else if tax_rate = 8 then		// 不課税
					        GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
                        else
					        GKeiyaku_DMemDataTax_RateName.AsString	:= sTax[tax_rate];
}
//<TAX> MOD Ed
                    end;
                end
                else
                begin
                    GKeiyaku_DMemDataDummyTax_Rate.AsInteger    := 0;
                    returnCode := changeKojiInfo2(toKojiInfo2Param(GKeiyaku_DMemData), false);  //<TAX> ADD
                    
				    if m_iAccProKbn = 0 then
                        GKeiyaku_DMemDataTax_RateName.AsString	:= ''
                    else
//<TAX> DEL                        GKeiyaku_DMemDataTax_RateName.AsString	    := sTax[0];
//<TAX> ADD St
                        setContTaxInfo(
                            toKojiInfoParam(currentSumKbn),
                            toKojiInfo2Param(GKeiyaku_DMemData),
                            GKeiyaku_DMemData,
                            false);
//<TAX> ADD Ed
                end;
//<227> ADD Ed
//<TAX> ADD St
                // 青色表示
                if returnCode = CONT_DIFFTAX then
                begin
                    GKeiyaku_DMemDataFontColorTax.AsInteger := FONTCOLOR_BLUE;
                end;
//<TAX> ADD Ed
				GKeiyaku_DMemData.Post;
			end;
// <225> MOD start
{
			// 入金情報
			if RcvDateFlg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate;
				GNyuDateSave[1]							:= RcvDate;
				if RcvMoneyFlg then
					GNyukin_DMemDataContMoney.AsCurrency:= RcvMoney;
				GNyukin_DMemData.Post;
			end;
}
            GNyukin_DMemData.First;
			// 入金情報1
			if RcvDate1Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
				GNyuDateSave[1]							:= RcvDate1;
				if RcvMoney1Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney1;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報2
			if RcvDate2Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate2;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate2;
				GNyuDateSave[2]							:= RcvDate2;
				if RcvMoney2Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney2;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報3
			if RcvDate3Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate3;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate3;
				GNyuDateSave[3]							:= RcvDate3;
				if RcvMoney3Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney3;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報4
			if RcvDate4Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate4;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate4;
				GNyuDateSave[4]							:= RcvDate4;
				if RcvMoney4Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney4;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報5
			if RcvDate5Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate5;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate5;
				GNyuDateSave[5]							:= RcvDate5;
				if RcvMoney5Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney5;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報6
			if RcvDate6Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate6;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate6;
				GNyuDateSave[6]							:= RcvDate6;
				if RcvMoney6Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney6;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報7
			if RcvDate7Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate7;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate7;
				GNyuDateSave[7]							:= RcvDate7;
				if RcvMoney7Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney7;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報8
			if RcvDate8Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate8;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate8;
				GNyuDateSave[8]							:= RcvDate8;
				if RcvMoney8Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney8;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報9
			if RcvDate9Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate9;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate9;
				GNyuDateSave[9]							:= RcvDate9;
				if RcvMoney9Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney9;
				GNyukin_DMemData.Post;
                GNyukin_DMemData.Next;
			end;
			// 入金情報10
			if RcvDate10Flg then
			begin
				GNyukin_DMemData.Edit;
				GNyukin_DMemDataInfoKbn.AsInteger		:= 2;
				GNyukin_DMemDataNCode.AsFloat			:= JHojyoMA_DMemDataNCODE.AsFloat;
				GNyukin_DMemDataContDate.AsDateTime		:= RcvDate10;
				GNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate10;
				GNyuDateSave[10]						:= RcvDate10;
				if RcvMoney10Flg then
					GNyukin_DMemDataContMoney.AsCurrency := RcvMoney10;
				GNyukin_DMemData.Post;
			end;
// <225> MOD end
		end;

        // 申請書情報ｷｰ
// <214> MOD start
{
        if SwkFormFlg then                  // 仕訳入力形式
            m_recSinseiKey.SwkForm := SwkForm
        else
            m_recSinseiKey.SwkForm := -1;
}
// <225> MOD start
{
        if SinFormFlg then                  // 申請書入力形式
            m_recSinseiKey.SinForm := SinForm
        else
            m_recSinseiKey.SinForm := -1;

        if HisIDFlg then                    // 処理履歴ID
            m_recSinseiKey.HisID := HisID
        else
            m_recSinseiKey.HisID := -1;
// <214> MOD end
        if OrgNoFlg then                    // 原票No
            m_recSinseiKey.OrgNo := OrgNo
        else
            m_recSinseiKey.OrgNo := -1;
}
        // 申請書情報ｷｰ
        if SinFormFlg then                  // 申請書入力形式
            m_recFLWSinseiKey[0].SinForm := SinForm
        else
            m_recFLWSinseiKey[0].SinForm := -1;
            
        if HisIDFlg then                    // 処理履歴ID
            m_recFLWSinseiKey[0].HisID := HisID
        else
            m_recFLWSinseiKey[0].HisID := -1;
            
        if SinOrgNoFlg then                 // 原票No
            m_recFLWSinseiKey[0].OrgNo := SinOrgNo
        else
            m_recFLWSinseiKey[0].OrgNo := -1;

// <225> MOD end
    end;

    m_recOther.CanInsert := true;           // 取込可能
end;

//**********************************************************************
//*		Proccess	:	工事変更届の情報をｾｯﾄ　構造体→画面 ADD <225>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2009/07/21
//*     Param       :   objRec  : PRJおよび工事全般構造体
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.fnHenkouPrjKojiAllFldSetWF(objRec: TPrjKojiAll);
var
	sName	    : String;
	sGCode	    : String;
    sKojiGCode  : String;
	iCode		: Int64;
	iCut		: Integer;
    bKihonFlg,
    bKojiFlg,
    bKeiyakuFlg,
    bNyuukinFlg,
    bBikouFlg,
    bSontaFlg   : Boolean;
    iDspOrder   : Integer;
//  	exBefNCode     : Extended;
//  	exAftNCode     : Extended;
begin
    bKihonFlg := false;
    bKojiFlg := false;
    bKeiyakuFlg := false;
    bNyuukinFlg := false;
    bBikouFlg := false;
    bSontaFlg := false;
    sKojiGCode := '';
    ClearOtherRec(m_recOther);              // 中身をｸﾘｱ

	with objRec do
    begin

        if NCodeFlg then
        begin
            sKojiGCode := fnGetKojiGCode(NCode);
            if sKojiGCode = '' then
            begin
                MjsMessageBoxEx(Self, '選択した申請書情報に該当する工事が存在しません。',
                    '申請書取込', mjInformation, mjOk, mjDefOk);
                exit;
            end;

            if ( MasterInfo_DMemDataCodeAttr.AsInteger <> 2 ) then
            begin
                if ( MasterInfo_DMemDataCodeAttr.AsInteger = 1 ) then
                begin
                    if ( sKojiGCode <> '' ) then
                    begin
                        iCut := 16 - MasterInfo_DMemDataCodeDigit.AsInteger;
                        System.Delete(sKojiGCode, 1, iCut);
                    end;
                end
                else
                begin
                    if ( sKojiGCode <> '' ) then
                    begin
                        iCode  := StrToInt64(Trim(sKojiGCode));
                        sKojiGCode := IntToStr(iCode);
                    end;
                end;
            end;
        end
        else
        begin
            // 該当工事なし
            MjsMessageBoxEx(Self, '選択した申請書情報に該当する工事が存在しません。',
                '申請書取込', mjInformation, mjOk, mjDefOk);
            exit;
        end;

        Root_PMTab.Items.Selected := PAGE_JITUZAI;  // 現在実在のみ取込可能

		// 実在
		if Root_PMTab.Items.Selected = PAGE_JITUZAI then
		begin
            if ( MasterInfo_DMemDataCodeAttr.AsInteger = 2 ) then
            begin
                Jituzai_ETEdit_GCode.Text	   := sKojiGCode;
                JituzaiEditExit(Jituzai_ETEdit_GCode);  //　DBの内容を画面に表示
            end
            else
            begin
                Jituzai_ENEdit_GCode.InputFlag := false;
                Jituzai_ENEdit_GCode.Value	   := StrToInt64 (Trim (sKojiGCode));
//<227> ADD St
                // 数字型の場合の対応漏れ？
                JituzaiEditExit(Jituzai_ENEdit_GCode);  //　DBの内容を画面に表示
//<227> ADD Ed
            end;
            Jituzai_ETEdit_LongName.SetFocus;

            // 正式名称
//<227> DEL            if (LongName <> JHojyoMA_DMemDataLongName.AsString) then
            if LongNameFlg = True then  //<227> ADD
            begin
                Jituzai_ETEdit_LongName.Text := LongName;
                Jituzai_ETEdit_LongName.Font.Color := clRed;
                Jituzai_LLabel_LongName.Font.Color := clRed;
            end;

            // 簡略名称
//<227> DEL            if (SimpleName <> JHojyoMA_DMemDataSimpleName.AsString) then
            if SimpleNameFlg = True then  //<227> ADD
            begin
                Jituzai_ETEdit_SimpleName.Text := SimpleName;
                Jituzai_ETEdit_SimpleName.Font.Color := clRed;
                Jituzai_LLabel_SimpleName.Font.Color := clRed;
            end;

            // 連想
//<227> DEL            if (Renso <> JHojyoMA_DMemDataRenChar.AsString) then
            if RensoFlg = True then  //<227> ADD
            begin
                Jituzai_ETEdit_RenChar.Text       := Renso;
                Jituzai_ETEdit_RenChar.Font.Color := clRed;
                Jituzai_LLabel_RenChar.Font.Color := clRed;
            end;

			// 基本情報タブ
            // 予定工期開始日
//<227> DEL            if (YoteiDateST <> JHojyoMA_DMemDataStartDate.AsDateTime) then
            if YoteiDateSTFlg = True then  //<227> ADD
            begin
                Jituzai_EDEdit_StartDate.AsDateTime := YoteiDateST;
                Jituzai_LLabel_StartDate.Font.Color := clRed;
                Jituzai_EDEdit_StartDate.Font.Color := clRed;
                bKihonFlg := True;
            end;

            // 予定工期終了日
//<227> DEL            if (YoteiDateEN <> JHojyoMA_DMemDataENDDate.AsDateTime) then
            if YoteiDateENFlg = True then  //<227> ADD
            begin
                Jituzai_EDEdit_EndDate.AsDateTime := YoteiDateEN;
                Jituzai_LLabel_StartDate.Font.Color := clRed;
                Jituzai_EDEdit_EndDate.Font.Color := clRed;
                bKihonFlg := True;
            end;
//<FREE> ADD St
            // 実績工期開始日
            if ScheDateSTFlg = True then
            begin
                Jituzai_EDEdit_JStartDate.AsDateTime := ScheDateST;
                MLabel12.Font.Color := clRed;
                Jituzai_EDEdit_JStartDate.Font.Color := clRed;
                bKihonFlg := True;
            end;

            // 実績工期終了日
            if ScheDateENFlg = True then
            begin
                Jituzai_EDEdit_JEndDate.AsDateTime := ScheDateEN;
                MLabel12.Font.Color := clRed;
                Jituzai_EDEdit_JEndDate.Font.Color := clRed;
                bKihonFlg := True;
            end;
//<FREE> ADD Ed
            // 担当者内部コード
            if PersonNCodeFlg = True then  //<227> ADD
            begin  //<227> ADD
                sGCode := fnInfoGet(KBN_TANTOSYA,PersonNCode,sName);
                if MasterInfo_DMemDataCodeAttrShain.AsInteger <> 2 then
                begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
                    begin
                        if sGCode <> '' then
                        begin
                            iCut := 16 - MasterInfo_DMemDataCodeDigitShain.AsInteger;
                            System.Delete(sGCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if sGCode <> '' then
                        begin
                            iCode := StrToInt64(Trim(sGCode));
                            sGCode := IntToStr(iCode);
                        end;
                    end;
                end;
//<227> DEL                if (sGCode <> JHojyoMA_DMemDataPersonCode.AsString) then
//<227> DEL                begin
                    Jituzai_LLabel_PersonCode.Font.Color  := clRed;
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_PersonCode.Text		    := sGCode;
                        Jituzai_ETEdit_PersonCode.Font.Color    := clRed;
                    end
                    else
                    begin
                        if (sGCode <> '') then
                        begin
                            Jituzai_ENEdit_PersonCode.Value		    := StrToInt64 (Trim (sGCode));
                            Jituzai_ENEdit_PersonCode.InputFlag	    := false;
                            Jituzai_ENEdit_PersonCode.Font.Color    := clRed;
                        end
                        else
                        begin
                            Jituzai_ENEdit_PersonCode.Value		    := 0;
                            Jituzai_ENEdit_PersonCode.InputFlag	    := true;
                            Jituzai_ENEdit_PersonCode.Font.Color    := clRed;
                        end;
//<227> DEL                    end;
                    Jituzai_LLabel_PersonName.Caption := sName;
                    bKihonFlg := True;
                end;
            end;  //<227> ADD

            // 受注先
            if CostomerNCodeFlg = True then  //<227> ADD
            begin  //<227> ADD
                sGCode := fnInfoGet(KBN_JUTYUSAKI,CostomerNCode,sName);
                if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
                begin
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
                    begin
                        if sGCode <> '' then
                        begin
                            iCut := 16 - MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                            System.Delete(sGCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if sGCode <> '' then
                        begin
                            iCode := StrToInt64(Trim(sGCode));
                            sGCode := IntToStr(iCode);
                        end;
                    end;
                end;
//<227> DEL                if (sGCode <> JHojyoMA_DMemDataCostomerCode.AsString) then
//<227> DEL                begin
                    Jituzai_LLabel_CostomerCode.Font.Color  := clRed;
                    if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_CustomerCode.Text        := sGCode;
                        Jituzai_ETEdit_CustomerCode.Font.Color  := clRed;
                    end
                    else
                    begin
                        if (sGCode <> '') then
                        begin
                            Jituzai_ENEdit_CustomerCode.Value		:= StrToInt64 (Trim (sGCode));
                            Jituzai_ENEdit_CustomerCode.InputFlag	:= false;
                            Jituzai_ENEdit_CustomerCode.Font.Color  := clRed;
                        end
                        else
                        begin
                            Jituzai_ENEdit_CustomerCode.Value		:= 0;
                            Jituzai_ENEdit_CustomerCode.InputFlag	:= true;
                            Jituzai_ENEdit_CustomerCode.Font.Color  := clRed;
                        end;
                    end;
                    Jituzai_LLabel_CustomerName.Caption := sName;
                    bKihonFlg := True;
//<227> DEL                end;
            end;  //<227> ADD

            // 施主
            if SesNCodeFlg = True then  //<227> ADD
            begin  //<227> ADD
                sGCode := fnInfoGet(KBN_SESHU,SesNCode,sName);
                if MasterInfo_DMemDataCodeAttrSeshu.AsInteger <> 2 then
                begin
                    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 1 then
                    begin
                        if sGCode <> '' then
                        begin
                            iCut := 16 - MasterInfo_DMemDataCodeDigitSeshu.AsInteger;
                            System.Delete(sGCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if sGCode <> '' then
                        begin
                            iCode  := StrToInt64(Trim(sGCode));
                            sGCode := IntToStr(iCode);
                        end;
                    end;
                end;
//<227> DEL                if (sGCode <> JHojyoMA_DMemDataSesNCode.AsString) then
//<227> DEL                begin
                    Jituzai_LLabel_SeshuCode.Font.Color  := clRed;
                    if MasterInfo_DMemDataCodeAttrSeshu.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SeshuCode.Text       := sGCode;
                        Jituzai_ETEdit_SeshuCode.Font.Color := clRed;
                    end
                    else
                    begin
                        if (sGCode <> '') then
                        begin
                            Jituzai_ENEdit_SeshuCode.Value	    := StrToInt64 (Trim (sGCode));
                            Jituzai_ENEdit_SeshuCode.InputFlag  := false;
                            Jituzai_ENEdit_SeshuCode.Font.Color := clRed;
                        end
                        else
                        begin
                            Jituzai_ENEdit_SeshuCode.Value	    := 0;
                            Jituzai_ENEdit_SeshuCode.InputFlag  := true;
                            Jituzai_ENEdit_SeshuCode.Font.Color := clRed;
                        end;
                    end;
                    Jituzai_LLabel_SeshuName.Caption := sName;
                    bKihonFlg := True;
//<227> DEL                end;
            end;  //<227> ADD

            // 施行部門内部コード
            if SeiBmnNCodeFlg = True then  //<227> ADD
            begin  //<227> ADD
                sGCode := fnInfoGet(KBN_BMN,SeiBmnNCode,sName);
                if MasterInfo_DMemDataCodeAttrBmn.AsInteger <> 2 then
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
                    begin
                        if sGCode <> '' then
                        begin
                            iCut := 16 - MasterInfo_DMemDataCodeDigitBmn.AsInteger;
                            System.Delete(sGCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if sGCode <> '' then
                        begin
                            iCode := StrToInt64(Trim(sGCode));
                            sGCode := IntToStr(iCode);
                        end;
                    end;
                end;
//<227> DEL                if (sGCode <> JHojyoMA_DMemDataSekouBmnCode.AsString) then
//<227> DEL                begin
                    Jituzai_LLabel_SekouBmnCode.Font.Color  := clRed;
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SekouBmnCode.Text        := sGCode;
                        Jituzai_ETEdit_SekouBmnCode.Font.Color  := clRed;
                        Jituzai_ETEdit_SekouBmnCode.TagStr      := FloatToStr(SeiBmnNCode); // <238> ADD
                    end
                    else
                    begin
                        if (sGCode <> '') then
                        begin
                            Jituzai_ENEdit_SekouBmnCode.Value       := StrToInt64 (Trim (sGCode));
                            Jituzai_ENEdit_SekouBmnCode.InputFlag   := false;
                            Jituzai_ENEdit_SekouBmnCode.Font.Color  := clRed;
                            Jituzai_ENEdit_SekouBmnCode.TagStr      := FloatToStr(SeiBmnNCode); // <238> ADD
                        end
                        else
                        begin
                            Jituzai_ENEdit_SekouBmnCode.Value       := 0;
                            Jituzai_ENEdit_SekouBmnCode.InputFlag   := true;
                            Jituzai_ENEdit_SekouBmnCode.Font.Color  := clRed;
                            Jituzai_ENEdit_SekouBmnCode.TagStr      := '';  // <238> ADD
                        end;
                    end;
                    Jituzai_LLabel_SekouBmnName.Caption := sName;
                    bKihonFlg := True;
//<227> DEL                end;
            end;  //<227> ADD

            //施行担当者内部コード
            if SeiTanNCodeFlg = True then  //<227> ADD
            begin  //<227> ADD
                sGCode := fnInfoGet(KBN_TANTOSYA,SeiTanNCode,sName);
                if MasterInfo_DMemDataCodeAttrShain.AsInteger <> 2 then
                begin
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 1 then
                    begin
                        if sGCode <> '' then
                        begin
                            iCut := 16 - MasterInfo_DMemDataCodeDigitShain.AsInteger;
                            System.Delete(sGCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if sGCode <> '' then
                        begin
                            iCode := StrToInt64(Trim(sGCode));
                            sGCode := IntToStr(iCode);
                        end;
                    end;
                end;
//<227> DEL                if (sGCode <> JHojyoMA_DMemDataSekouPersonCode.AsString) then
//<227> DEL                begin
                    Jituzai_LLabel_SekouPersonCode.Font.Color  := clRed;
                    if MasterInfo_DMemDataCodeAttrShain.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_SekouPersonCode.Text		    := sGCode;
                        Jituzai_ETEdit_SekouPersonCode.Font.Color   := clRed;
                    end
                    else
                    begin
                        if (sGCode <> '') then
                        begin
                            Jituzai_ENEdit_SekouPersonCode.Value		:= StrToInt64 (Trim (sGCode));
                            Jituzai_ENEdit_SekouPersonCode.InputFlag	:= false;
                            Jituzai_ENEdit_SekouPersonCode.Font.Color   := clRed;
                        end
                        else
                        begin
                            Jituzai_ENEdit_SekouPersonCode.Value		:= 0;
                            Jituzai_ENEdit_SekouPersonCode.InputFlag	:= true;
                            Jituzai_ENEdit_SekouPersonCode.Font.Color   := clRed;
                        end;
                    end;
                    Jituzai_LLabel_SekouPersonName.Caption := sName;
                    bKihonFlg := True;
//<227> DEL                end;
            end;  //<227> ADD

            // 請負区分
//<227> DEL            if (UkeoiKbn <> JHojyoMA_DMemDataUkeoiKbn.AsInteger) then
            if UkeoiKbnFlg = True then  //<227> ADD
            begin
                Jituzai_LLabel_UkeoiCode.Font.Color := clRed;
                Jituzai_ENEdit_UkeoiKbn.Font.Color  := clRed;
//<227> DEL                Jituzai_ENEdit_UkeoiKbn.Value       := UkeoiKbn;
//<227> ADD St
                if UkeoiKbn <> FLW_NullData_Integer then
                    Jituzai_ENEdit_UkeoiKbn.Value       := UkeoiKbn
                else
                    Jituzai_ENEdit_UkeoiKbn.Value := 0;
//<227> ADD Ed
                Jituzai_LLabel_UkeoiKbnDsp.Caption	:= sUkeoi[UkeoiKbn];
                bKihonFlg := True;
            end;

        // 工事タブ
            // 完成振替部門
            if BmnNCodeFlg = True then  //<227> ADD
            begin  //<227> ADD
                sGCode := fnInfoGet(KBN_BMN,BmnNCode,sName);
                if MasterInfo_DMemDataCodeAttrBmn.AsInteger <> 2 then
                begin
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 1 then
                    begin
                        if sGCode <> '' then
                        begin
                            iCut := 16 - MasterInfo_DMemDataCodeDigitBmn.AsInteger;
                            System.Delete(sGCode, 1, iCut);
                        end;
                    end
                    else
                    begin
                        if sGCode <> '' then
                        begin
                            iCode := StrToInt64(Trim(sGCode));
                            sGCode := IntToStr(iCode);
                        end;
                    end;
                end;
//<227> DEL                if (sGCode <> JHojyoMA_DMemDataBmnCode.AsString) then
//<227> DEL                begin
                    Jituzai_LLabel_BmnCode.Font.Color  := clRed;
                    if MasterInfo_DMemDataCodeAttrBmn.AsInteger = 2 then
                    begin
                        Jituzai_ETEdit_BmnCode.Text	    	:= sGCode;
                        Jituzai_ETEdit_BmnCode.Font.Color   := clRed;
                        Jituzai_ETEdit_BmnCode.TagStr       := FloatToStr(BmnNCode);    // <238> ADD
                    end
                    else
                    begin
                        if (sGCode <> '') then
                        begin
                            Jituzai_ENEdit_BmnCode.Value	    := StrToInt64 (Trim (sGCode));
                            Jituzai_ENEdit_BmnCode.InputFlag    := false;
                            Jituzai_ENEdit_BmnCode.Font.Color   := clRed;
                            Jituzai_ENEdit_BmnCode.TagStr       := FloatToStr(BmnNCode);    // <238> ADD
                        end
                        else
                        begin
                            Jituzai_ENEdit_BmnCode.Value	    := 0;
                            Jituzai_ENEdit_BmnCode.InputFlag    := true;
                            Jituzai_ENEdit_BmnCode.Font.Color   := clRed;
                            Jituzai_ETEdit_BmnCode.TagStr       := '';          // <238> ADD
                        end;
                    end;
                    Jituzai_LLabel_BmnName.Caption := sName;
                    bKojiFlg := True;
//<227> DEL                end;
            end;  //<227> ADD

            // 郵便番号(基番)
//<227> DEL            if (ZipCode1 <> JHojyoMA_DMemDataZipCode1.AsInteger) then
            if ZipCode1Flg = True then  //<227> ADD
            begin
                Jituzai_LLabel_ZipCode1.Font.Color  := clRed;
                Jituzai_ENEdit_ZipCode1.Font.Color  := clRed;
//<227> DEL                Jituzai_ENEdit_ZipCode1.Value       := ZipCode1;
//<227> ADD St
                if ZipCode1 <> FLW_NullData_Integer then
                    Jituzai_ENEdit_ZipCode1.Value       := ZipCode1
                else
                    Jituzai_ENEdit_ZipCode1.Value := 0;
//<227> ADD Ed
                bKojiFlg := True;
            end;

            // 郵便番号(枝番)
//<227> DEL            if (ZipCode2 <> JHojyoMA_DMemDataZipCode2.AsInteger) then
            if ZipCode2Flg = True then  //<227> ADD
            begin
                Jituzai_LLabel_ZipCode1.Font.Color  := clRed;
                Jituzai_ENEdit_ZipCode2.Font.Color  := clRed;
//<227> DEL                Jituzai_ENEdit_ZipCode2.Value       := ZipCode2;
//<227> ADD St
                if ZipCode2 <> FLW_NullData_Integer then
                    Jituzai_ENEdit_ZipCode2.Value       := ZipCode2
                else
                    Jituzai_ENEdit_ZipCode2.Value := 0;
//<227> ADD Ed
                bKojiFlg := True;
            end;

            // 住所（上段）
//<227> DEL            if (Address1 <> JHojyoMA_DMemDataAddress1.AsString) then
            if Address1Flg = True then  //<227> ADD
            begin
                Jituzai_LLabel_Address.Font.Color   := clRed;
                Jituzai_ETEdit_Address1.Font.Color  := clRed;
                Jituzai_ETEdit_Address1.Text        := Address1;
                bKojiFlg := True;
            end;

            // 住所（下段）
//<227> DEL            if (Address2 <> JHojyoMA_DMemDataAddress2.AsString) then
            if Address2Flg = True then  //<227> ADD
            begin
                Jituzai_LLabel_Address.Font.Color   := clRed;
                Jituzai_ETEdit_Address2.Text        := Address2;
                Jituzai_ETEdit_Address2.Font.Color  := clRed;
                bKojiFlg := True;
            end;

            // 電話番号
//<227> DEL            if (TelNo <> JHojyoMA_DMemDataTelNo.AsString) then
            if telNoFlg = True then  //<227> ADD
            begin
                Jituzai_LLabel_TelNo.Font.Color     := clRed;
                Jituzai_ETEdit_TelNo.Font.Color     := clRed;
                Jituzai_ETEdit_TelNo.Text	        := TelNo;
                bKojiFlg := True;
            end;

            // FAX番号
//<227> DEL            if (FaxNo <> JHojyoMA_DMemDataFAXNo.AsString) then
            if FaxNoFlg = True then  //<227> ADD
            begin
                Jituzai_LLabel_FaxNo.Font.Color     := clRed;
                Jituzai_ETEdit_FaxNo.Font.Color     := clRed;
                Jituzai_ETEdit_FaxNo.Text           := FaxNo;
                bKojiFlg := True;
            end;

            // 売上計上基準
//<227> DEL            if (SalesBase <> JHojyoMA_DMemDataSalesBase.AsInteger) then
            if SalesBaseFlg = True then  //<227> ADD
            begin
// <291> MOD st
//                if m_MstrKbn4 = 1 then  // 進行基準を採用しているか？
                if ((m_MstrKbn4 = 1) or (m_MstrKbn20 = 1)) then  // 進行基準を採用しているか？もしくは収益認識基準を採用しているか
// <291> MOD st
                begin
                    Jituzai_LLabel_SalesBase.Font.Color     := clRed;
                    Jituzai_ENEdit_SalesBase.Font.Color     := clRed;
//<227> DEL                    Jituzai_ENEdit_SalesBase.Value		    := SalesBase;
//<227> ADD St
                    if SalesBase <> FLW_NullData_Integer then
                    begin
                        Jituzai_ENEdit_SalesBase.Value		    := SalesBase;
                        Jituzai_LLabel_SalesBaseDsp.Caption	    := sSales[SalesBase];
                    end
                    else
                    begin
                        Jituzai_ENEdit_SalesBase.Value		    := 0;
                        Jituzai_LLabel_SalesBaseDsp.Caption	    := sSales[0];
                    end;
//<227> ADD Ed
//<227> DEL                    Jituzai_LLabel_SalesBaseDsp.Caption	    := sSales[SalesBase];
                    bKojiFlg := True;
                end
                else
                begin
                    Jituzai_ENEdit_SalesBase.Value		    := 0;
                    Jituzai_LLabel_SalesBaseDsp.Caption	    := sSales[0];
                end;
            end;

            // 概要・備考タブ
            // 備考
//<227> DEL            if (Remarks <> JHojyoMA_DMemDataBIKO.AsString) then
            if RemarksFlg = True then  //<227> ADD
            begin
                Jituzai_ETEdit_BIKO.Text        := Remarks;
                Jituzai_ETEdit_BIKO.Font.Color  := clRed;
                MLabel54.Font.Color             := clRed;
                bBikouFlg := True;
            end;

            // 工事概要
//<227> DEL            if (Gaiyou <> JHojyoMA_DMemDatagaiyou.AsString) then
            if GaiyouFlg = True then  //<227> ADD
            begin
                Jituzai_ETEdit_Gaiyou.Text          := Gaiyou;
                Jituzai_ETEdit_Gaiyou.Font.Color    := clRed;
                MLabel38.Font.Color                 := clRed;
                bBikouFlg := True;
            end;

			// 契約情報タブ
{<227> DEL St
            if fnKeiyakuNyukinDataCheck(NCode_K,1) = True then
            begin
			    if ContDateFlg then					// 契約年月日
                begin
                    JKeiyaku_DMemData.First;
                    if (ContDate <> JKeiyaku_DMemDataContDate.AsDateTime) then
                    begin
				        JKeiyaku_DMemData.Edit;
				        JKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
				        JKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
				        JKeiDateSave[1]								:= ContDate;
                        JKeiyaku_DMemDataFontColorDate.AsInteger    := 1;
				        JKeiyaku_DMemData.Post;
                        bKeiyakuFlg := True;
                    end;
                    if (ContNo <> JKeiyaku_DMemDataContNo.AsString) then
                    begin
				        JKeiyaku_DMemData.Edit;
					    JKeiyaku_DMemDataContNo.AsString		    := ContNo;
                        JKeiyaku_DMemDataFontColortNo.AsInteger     := 1;
				        JKeiyaku_DMemData.Post;
                        bKeiyakuFlg := True;
                    end;
                    if (ContMoney <> JKeiyaku_DMemDataContMoney.AsCurrency) then
                    begin
				        JKeiyaku_DMemData.Edit;
					    JKeiyaku_DMemDataContMoney.AsCurrency	    := ContMoney;
                        JKeiyaku_DMemDataFontColorMoney.AsInteger   := 1;
				        JKeiyaku_DMemData.Post;
                        bKeiyakuFlg := True;
                    end;
                    if (sales_tax <> JKeiyaku_DMemDataSales_Tax.AsCurrency) then
                    begin
				        JKeiyaku_DMemData.Edit;
					    JKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax;
                        JKeiyaku_DMemDataFontColorTax.AsInteger := 1;

                        if (0 <> JKeiyaku_DMemDataDummyTax_Rate.AsInteger) then
                        begin
                            JKeiyaku_DMemDataDummyTax_Rate.AsInteger         := 0;
                            JTaxRateSave[1]                             := 0;
                            JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 1;
				            if m_iAccProKbn = 0 then                                // 消費税率名称
					            JKeiyaku_DMemDataTax_RateName.AsString	:= ''
                            else
                                JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[0];
                        end;
                        JKeiyaku_DMemData.Post;
                        bKeiyakuFlg := True;
                    end;
                end
                else
                begin
                    if (JKeiyaku_DMemDataContDate.AsDateTime <> 0) then
                    begin
                        // 削除用内部コード格納
                        if JKeiyaku_DMemDataKojiInfo2NCode.AsFloat <> 0 then
                        begin
                            JKeiNCodeSave[JKeiElement] := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                            inc(JKeiElement);
                        end;
                        JKeiyaku_DMemData.First;
                        JKeiyaku_DMemData.Edit;
                        JKeiyaku_DMemDataContDate.Clear;
                        JKeiyaku_DMemDataPrevContDate.Clear;
                        JKeiDateSave[1] := 0;
                        JKeiyaku_DMemDataContNo.Clear;
                        JKeiyaku_DMemDataContMoney.Clear;
                        JKeiyaku_DMemDataSales_Tax.Clear;
                        JKeiyaku_DMemDataDummyTax_Rate.AsInteger := 0;
                        JKeiyaku_DMemDataTax_RateName.AsString := sTax[0];
                        JKeiyaku_DMemDataTax_Rate.AsInteger := 0;
                        JTaxRateSave[1] := 0;
			            JKeiyaku_DMemDataCheck.AsInteger	     := 1;
                        JKeiyaku_DMemDataKojiInfo2NCode.AsFloat  := 0;
                        JKeiyaku_DMemData.Post;
                        bKeiyakuFlg := True;
                    end;
                end;
            end
            else
            begin
                if ContDateFlg then					// 契約年月日
                begin
                    JKeiyaku_DMemData.Edit;
                    JKeiyaku_DMemDataInfoKbn.AsInteger			:= 1;
                    JKeiyaku_DMemDataNCode.AsFloat				:= JHojyoMA_DMemDataNCODE.AsFloat;
                    JKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
                    JKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
                    JKeiDateSave[1]								:= ContDate;
                    JKeiyaku_DMemDataFontColorDate.AsInteger    := 1;
                    if ContNoFlg then				// 契約書NO
                    begin
                        JKeiyaku_DMemDataContNo.AsString		:= ContNo;
                        JKeiyaku_DMemDataFontColortNo.AsInteger     := 1;
                    end;
                    if ContMoneyFlg then			// 契約金額(税込)
                    begin
                        JKeiyaku_DMemDataContMoney.AsCurrency	:= ContMoney;
                        JKeiyaku_DMemDataFontColorMoney.AsInteger   := 1;
                    end;
                    if sales_taxFlg then			// 消費税額
                    begin
                        JKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax;
                        JKeiyaku_DMemDataFontColorTax.AsInteger := 1;
                        JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= 0;           // 消費税率
                        JTaxRateSave[1]                         := 0;
                        if m_iAccProKbn = 0 then                                // 消費税率名称
                            JKeiyaku_DMemDataTax_RateName.AsString	:= ''
                        else
                            JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[0];
                    end;
                    JKeiyaku_DMemData.Post;
                    bKeiyakuFlg := True;

                end;
            end;
<227> DEL Ed}
//<TAX> ADD St
            // 税込／税抜
            if PartPatternFlg then
            begin
                lblJTax.Font.Color := clRed;
                if (PartPattern = KBN_TAXIN) or
                    (toKojiInfoParam(currentSumKbn).SalesBase = SALES_COMPLETE) then
                begin
                    pushTaxButton(rdJTaxIn);
                    rdJTaxIn.Font.Color := clRed;
                end
                else
                begin
                    rdJTaxOut.Enabled := true;
                    pushTaxButton(rdJTaxOut);
                    rdJTaxOut.Font.Color := clRed;
                end;
                bKeiyakuFlg := True;
            end;

            moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn), false);
//<TAX> ADD Ed
//<227> ADD St
            if (ContDateFlg = True) or
               (ContNoFlg = True)   or
               (ContMoneyFlg = True) or
               (sales_taxFlg = True) or
               (tax_RateFlg = True)then
            begin
                if fnKeiyakuNyukinDataCheck(NCode_K,1) = True then
                    JKeiyaku_DMemData.First;
            end;

            if ContDateFlg = True then
            begin
                JKeiyaku_DMemData.Edit;

                if ContDate <> FLW_NullData_TDateTime then
                begin
                    JKeiyaku_DMemDataContDate.AsDateTime		:= ContDate;
                    JKeiyaku_DMemDataPrevContDate.AsDateTime	:= ContDate;
                end
                else
                begin
                    // 削除用内部コード格納
                    if JKeiyaku_DMemDataKojiInfo2NCode.AsFloat <> 0 then
                    begin
                        JKeiNCodeSave[JKeiElement] := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                        inc(JKeiElement);
                    end;
                    JKeiyaku_DMemDataContDate.Clear;
                    JKeiyaku_DMemDataPrevContDate.Clear;
                end;

                JKeiDateSave[1]								:= ContDate;
                JKeiyaku_DMemDataFontColorDate.AsInteger    := 1;
                JKeiyaku_DMemData.Post;
                bKeiyakuFlg := True;
            end;

            if (ContNoFlg = True) then
            begin
                JKeiyaku_DMemData.Edit;
                JKeiyaku_DMemDataContNo.AsString		    := ContNo;
                JKeiyaku_DMemDataFontColorNo.AsInteger     := 1;
                JKeiyaku_DMemData.Post;
                bKeiyakuFlg := True;
            end;
            if (ContMoneyFlg = True) then
            begin
                JKeiyaku_DMemData.Edit;

                if ContMoney <> FLW_NullData_Double then
                    JKeiyaku_DMemDataContMoney.AsCurrency	    := ContMoney
                else
                    JKeiyaku_DMemDataContMoney.Clear;
                JKeiyaku_DMemDataFontColorMoney.AsInteger   := 1;
                JKeiyaku_DMemData.Post;
                bKeiyakuFlg := True;
            end;
            if (sales_taxFlg = True) then
            begin
                JKeiyaku_DMemData.Edit;

                if sales_tax <> FLW_NullData_Double then
                    JKeiyaku_DMemDataSales_Tax.AsCurrency	:= sales_tax
                else
                    JKeiyaku_DMemDataSales_Tax.Clear;

                JKeiyaku_DMemDataFontColorTax.AsInteger := 1;

                if (0 <> JKeiyaku_DMemDataDummyTax_Rate.AsInteger) then
                begin
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger         := 0;
                    JTaxRateSave[1]                             := 0;
                    JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 1;
                    if m_iAccProKbn = 0 then                                // 消費税率名称
                        JKeiyaku_DMemDataTax_RateName.AsString	:= ''
                    else
//<TAX> DEL                        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[0];
//<TAX> ADD St
                    begin
                        JKeiyaku_DMemDataTax_RateName.AsString :=
                            moBusiness.GetTaxRate(0).TaxName;
                    end;
//<TAX> ADD Ed
                end;
                JKeiyaku_DMemData.Post;
                bKeiyakuFlg := True;
            end;
            // 消費税率
            if tax_rateFlg = True then
            begin
                JKeiyaku_DMemData.Edit;
                if tax_rate <> FLW_NullData_Integer then
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate
                else
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= 0;
{
                if tax_rate = 9 then
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= 4
                else if tax_rate = 8 then
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= 3
                else
                    JKeiyaku_DMemDataDummyTax_Rate.AsInteger:= tax_rate;
}

                JTaxRateSave[1]                         := JKeiyaku_DMemDataDummyTax_Rate.AsInteger;
//                    JTaxRateSave[1]                         := tax_rate;
                changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);  //<TAX> ADD

                if m_iAccProKbn = 0 then                                    // 0:免税業者
                    JKeiyaku_DMemDataTax_RateName.AsString	:= ''           // 消費税率名称
                else
                begin
//<TAX> MOD St
                    setContTaxInfo(
                        toKojiInfoParam(currentSumKbn),
                        toKojiInfo2Param(JKeiyaku_DMemData),
                        JKeiyaku_DMemData,
                        false);

{
                    if tax_rate = 9 then		// 非課税
                        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[4]
                    else if tax_rate = 8 then		// 不課税
                        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[3]
                    else
                        JKeiyaku_DMemDataTax_RateName.AsString	:= sTax[tax_rate];
}
//<TAX> MOD Ed
                end;
                JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 1;
                JKeiyaku_DMemDataFontColorTaxReteName.AsInteger := 1;
                JKeiyaku_DMemDataFontColorTaxRateName2.AsInteger := 1;  //<TAX> ADD
                JKeiyaku_DMemData.Post;
                bKeiyakuFlg := True;
            end
            else
            begin
//<TAX> ADD St
                changeKojiInfo2(toKojiInfo2Param(JKeiyaku_DMemData), false);
                setContTaxInfo(
                    toKojiInfoParam(currentSumKbn),
                    toKojiInfo2Param(JKeiyaku_DMemData),
                    JKeiyaku_DMemData,
                    false);
//<TAX> ADD Ed
{
                JKeiyaku_DMemDataDummyTax_Rate.AsInteger    := 0;
                if m_iAccProKbn = 0 then
                    JKeiyaku_DMemDataTax_RateName.AsString	:= ''
                else
                    JKeiyaku_DMemDataTax_RateName.AsString	    := sTax[0];
}
            end;
//<227> ADD Ed

            // 入金情報存在チェック
            if fnKeiyakuNyukinDataCheck(NCode_K,2) = True then
            begin
                // 変更前後のデータを比較
                JNyukin_DMemData.First;
                for iDspOrder := 1 to  10 do
				begin
                    case iDspOrder of
					    1:  // 入金情報1
					    begin
{<227> DEL St
                            if RcvDate1Flg then
                            begin
                                if (RcvDate1 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
                                    JNyuDateSave[1]							:= RcvDate1;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney1 <> JNyukin_DMemDataContMoney.AsCurrency) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney1;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
					            if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate1Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;
                                
                                if RcvDate1 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
                                    JNyuDateSave[1]							:= RcvDate1;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[1] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney1Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney1 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney1
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
                        end;
					    2:  // 入金情報2
					    begin
{<227> DEL St
                            if RcvDate2Flg then
                            begin
                                if (RcvDate2 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate2;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate2;
                                    JNyuDateSave[2]							:= RcvDate2;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney2 <> JNyukin_DMemDataContMoney.AsCurrency) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney2;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
					            if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate2Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate2 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate2;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate2;
                                    JNyuDateSave[2]							:= RcvDate2;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[2] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney2Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney2 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney2
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    3:  // 入金情報3
					    begin
{<227> DEL St
                            if RcvDate3Flg then
                            begin
                                if (RcvDate3 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate3;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate3;
                                    JNyuDateSave[3]							:= RcvDate3;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney3 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney3;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
					            if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate3Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate3 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate3;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate3;
                                    JNyuDateSave[3]							:= RcvDate3;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[3] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney3Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney3 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney3
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    4:  // 入金情報4
					    begin
{<227> DEL St
                            if RcvDate4Flg then
                            begin
                                if (RcvDate4 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate4;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate4;
                                    JNyuDateSave[4]							:= RcvDate4;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney4 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney4;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
					            if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate4Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate4 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate4;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate4;
                                    JNyuDateSave[4]							:= RcvDate4;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[4] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney4Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney4 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney4
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    5:  // 入金情報5
					    begin
{<227> DEL St
                            if RcvDate5Flg then
                            begin
                                if (RcvDate5 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate5;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate5;
                                    JNyuDateSave[5]							:= RcvDate5;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney5 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney5;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
					            if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate5Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate5 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate5;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate5;
                                    JNyuDateSave[5]							:= RcvDate5;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[5] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney5Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney5 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney5
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    6:  // 入金情報6
					    begin
{<227> DEL St
                            if RcvDate6Flg then
                            begin
                                if (RcvDate6 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate6;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate6;
                                    JNyuDateSave[6]							:= RcvDate6;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney6 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney6;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
					            if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate6Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate6 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate6;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate6;
                                    JNyuDateSave[6]							:= RcvDate6;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[6] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney6Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney6 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney6
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    7:  // 入金情報7
					    begin
{<227> DEL St
                            if RcvDate7Flg then
                            begin
                                if (RcvDate7 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate7;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate7;
                                    JNyuDateSave[7]							:= RcvDate7;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney7 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney7;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
                                if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate7Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate7 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate7;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate7;
                                    JNyuDateSave[7]							:= RcvDate7;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[7] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney7Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney7 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney7
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    8:  // 入金情報8
					    begin
{<227> DEL St
                            if RcvDate8Flg then
                            begin
                                if (RcvDate8 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate8;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate8;
                                    JNyuDateSave[3]							:= RcvDate8;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney8 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney8;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
                                if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate8Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate8 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate8;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate8;
                                    JNyuDateSave[8]							:= RcvDate8;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[8] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney8Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney8 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney8
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    9:  // 入金情報9
					    begin
{<227> DEL St
                            if RcvDate9Flg then
                            begin
                                if (RcvDate9 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate9;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate9;
                                    JNyuDateSave[9]							:= RcvDate9;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney9 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney9;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
                                if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate9Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate9 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate9;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate9;
                                    JNyuDateSave[9]							:= RcvDate9;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[9] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney9Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney9 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney9
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
					    10:  // 入金情報10
					    begin
{<227> DEL St
                            if RcvDate10Flg then
                            begin
                                if (RcvDate10 <> JNyukin_DMemDataContDate.AsDateTime) then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate10;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate10;
                                    JNyuDateSave[10]							:= RcvDate10;
                                    JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                                if (RcvMoney10 <> JNyukin_DMemDataContMoney.AsCurrency)  then
                                begin
                                    JNyukin_DMemData.Edit;
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney10;
                                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end
                            else
                            begin
                                if ( JNyukin_DMemDataContDate.AsDateTime <> 0 ) then
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemData.Edit;
    			                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
			                        JNyukin_DMemDataContMoney.Clear;                    // 入金予定額
                                    JNyukin_DMemData.Post;
                                    bNyuukinFlg := True;
                                end;
                            end;
<227> DEL Ed}
//<227> ADD St
                            if (RcvDate10Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvDate10 <> FLW_NullData_TDateTime then
                                begin
                                    JNyukin_DMemDataContDate.AsDateTime		:= RcvDate10;
                                    JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate10;
                                    JNyuDateSave[10]							:= RcvDate10;
                                end
                                else
                                begin
                                    // 削除する入金予定情報の内部ｺｰﾄﾞを保管
                                    if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
                                    begin
                                        JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                                        inc(JNyuElement);
                                    end;
                                    JNyukin_DMemDataContDate.Clear;                     // 入金予定日
                                    JNyukin_DMemDataPrevContDate.Clear;
                                    JNyuDateSave[10] := FLW_NullData_TDateTime;
                                end;

                                JNyukin_DMemDataFontColorDate.AsInteger := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;

                            if (RcvMoney10Flg = True) then
                            begin
                                JNyukin_DMemData.Edit;

                                if RcvMoney10 <> FLW_NullData_Double then
                                    JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney10
                                else
                                begin
                                    JNyukin_DMemDataContMoney.Clear;
                                end;

                                JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                                JNyukin_DMemData.Post;
                                bNyuukinFlg := True;
                            end;
//<227> ADD Ed
					    end;
				    end;
			        JNyukin_DMemData.Next;
				end;
            end
            else
            begin
                // 変更後データを格納する
                JNyukin_DMemData.First;
			    // 入金情報1
    			if RcvDate1Flg then
    			begin
                    JNyukin_DMemData.Edit;
    				JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
				    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//    				JNyukin_DMemDataContDate.AsDateTime		    := RcvDate1;
//    				JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate1;
//    				JNyuDateSave[1]							    := RcvDate1;
                    if RcvDate1 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate1;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate1;
                        JNyuDateSave[1]							:= RcvDate1;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[1] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
    				if RcvMoney1Flg then
                    begin
    					JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney1;
                    end
                    else
    					JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney1Flg = True) then
                    begin
                        if RcvMoney1 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney1
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
    				JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
    			end;
			    // 入金情報2
			    if RcvDate2Flg then
			    begin
                    JNyukin_DMemData.Edit;
				    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
				    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//				    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate2;
//				    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate2;
//				    JNyuDateSave[2]							    := RcvDate2;
                    if RcvDate2 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate2;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate2;
                        JNyuDateSave[2]							:= RcvDate2;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[2] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
				    if RcvMoney2Flg then
					    JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney2
                    else
					    JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney2Flg = True) then
                    begin
                        if RcvMoney2 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney2
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
				    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報3
                if RcvDate3Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate3;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate3;
//                    JNyuDateSave[3]							    := RcvDate3;
                    if RcvDate3 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate3;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate3;
                        JNyuDateSave[3]							:= RcvDate3;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[3] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney3Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney3
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney3Flg = True) then
                    begin
                        if RcvMoney3 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney3
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger	    := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報4
                if RcvDate4Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate4;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate4;
//                    JNyuDateSave[4]							    := RcvDate4;
                    if RcvDate4 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate4;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate4;
                        JNyuDateSave[4]							:= RcvDate4;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[4] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney4Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney4
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney4Flg = True) then
                    begin
                        if RcvMoney4 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney4
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報5
                if RcvDate5Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate5;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate5;
//                    JNyuDateSave[5]							    := RcvDate5;
                    if RcvDate5 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate5;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate5;
                        JNyuDateSave[5]							:= RcvDate5;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[5] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney5Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney5
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney5Flg = True) then
                    begin
                        if RcvMoney5 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney5
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報6
                if RcvDate6Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate6;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate6;
//                    JNyuDateSave[6]							    := RcvDate6;
                    if RcvDate6 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate6;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate6;
                        JNyuDateSave[6]							:= RcvDate6;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[6] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney6Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney6
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney6Flg = True) then
                    begin
                        if RcvMoney6 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney6
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報7
                if RcvDate7Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate7;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate7;
//                    JNyuDateSave[7]							    := RcvDate7;
                    if RcvDate7 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate7;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate7;
                        JNyuDateSave[7]							:= RcvDate7;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[7] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney7Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney7
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney7Flg = True) then
                    begin
                        if RcvMoney7 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney7
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報8
                if RcvDate8Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate8;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate8;
//                    JNyuDateSave[8]							    := RcvDate8;
                    if RcvDate8 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate8;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate8;
                        JNyuDateSave[8]							:= RcvDate8;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[8] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney8Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney8
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney8Flg = True) then
                    begin
                        if RcvMoney8 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney8
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報9
                if RcvDate9Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate9;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate9;
//                    JNyuDateSave[9]							    := RcvDate9;
                    if RcvDate9 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate9;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate9;
                        JNyuDateSave[9]							:= RcvDate9;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[9] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney9Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney9
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney9Flg = True) then
                    begin
                        if RcvMoney9 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney9
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
			        JNyukin_DMemData.Next;
                    bNyuukinFlg := True;
                end;
                // 入金情報10
                if RcvDate10Flg then
                begin
                    JNyukin_DMemData.Edit;
                    JNyukin_DMemDataInfoKbn.AsInteger		    := 2;
                    JNyukin_DMemDataNCode.AsFloat			    := 0;
//<227> MOD St
//                    JNyukin_DMemDataContDate.AsDateTime		    := RcvDate10;
//                    JNyukin_DMemDataPrevContDate.AsDateTime	    := RcvDate10;
//                    JNyuDateSave[10]						    := RcvDate10;
                    if RcvDate10 <> FLW_NullData_TDateTime then
                    begin
                        JNyukin_DMemDataContDate.AsDateTime		:= RcvDate10;
                        JNyukin_DMemDataPrevContDate.AsDateTime	:= RcvDate10;
                        JNyuDateSave[10]							:= RcvDate10;
                    end
                    else
                    begin
                        JNyukin_DMemDataContDate.Clear;
                        JNyukin_DMemDataPrevContDate.Clear;
                        JNyuDateSave[10] := FLW_NullData_TDateTime;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorDate.AsInteger     := 1;
//<227> MOD St
{
                    if RcvMoney10Flg then
                        JNyukin_DMemDataContMoney.AsCurrency    := RcvMoney10
                    else
                        JNyukin_DMemDataContMoney.AsCurrency    := 0;
}
                    if (RcvMoney10Flg = True) then
                    begin
                        if RcvMoney10 <> FLW_NullData_Double then
                            JNyukin_DMemDataContMoney.AsCurrency        := RcvMoney10
                        else
                        begin
                            JNyukin_DMemDataContMoney.Clear;
                        end;
                    end;
//<227> MOD Ed
                    JNyukin_DMemDataFontColorMony.AsInteger     := 1;
                    JNyukin_DMemData.Post;
                    bNyuukinFlg := True;
                end;
            end;

            // その他タブ
            if Jituzai_ETEdit_BunCd1.Visible then            // ﾌﾟﾛｼﾞｪｸﾄ分類1
            begin
{<227> DEL St
                if Jituzai_ETEdit_BunCd1.Text <> '' then
                begin
                    exBefNCode := fnGetNCODE(Jituzai_ETEdit_BunCd1.Text,m_arAdoptInfo_PBr [1].nMasterDivision,m_arAdoptInfo_PBr [1].nCodeAttribute);
                end
                else
                    exBefNCode := 0;
                sGCode      := fnPrjBunGet(m_arAdoptInfo_Pbr [1].nMasterDivision,BunruiNCode1,sName);
                exAftNCode  := BunruiNCode1;
                if exBefNCode <> exAftNCode then
                begin
                    Jituzai_ETEdit_BunCd1.Text          := sGCode;
                    Jituzai_LLabel_BunNm1.Caption       := sName;
                    Jituzai_ETEdit_BunCd1.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl1.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
<227> DEL Ed}
//<227> ADD St
                if BunruiNCode1Flg = true then
                begin
                    sGCode      := fnPrjBunGet(m_arAdoptInfo_Pbr [1].nMasterDivision,BunruiNCode1,sName);
                    Jituzai_ETEdit_BunCd1.Text          := sGCode;
                    Jituzai_LLabel_BunNm1.Caption       := sName;
                    Jituzai_ETEdit_BunCd1.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl1.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
//<227> ADD Ed
            end;
            if Jituzai_ETEdit_BunCd2.Visible then            // ﾌﾟﾛｼﾞｪｸﾄ分類2
            begin
{<227> DEL St
                if Jituzai_ETEdit_BunCd2.Text <> '' then
                begin
                    exBefNCode := fnGetNCODE(Jituzai_ETEdit_BunCd2.Text,m_arAdoptInfo_PBr [2].nMasterDivision,m_arAdoptInfo_PBr [2].nCodeAttribute);
                end
                else
                    exBefNCode := 0;
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [2].nMasterDivision,BunruiNCode2,sName);
                exAftNCode := BunruiNCode2;
                if exBefNCode <> exAftNCode then
                begin
                    Jituzai_ETEdit_BunCd2.Text          := sGCode;
                    Jituzai_LLabel_BunNm2.Caption       := sName;
                    Jituzai_ETEdit_BunCd2.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl2.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
<227> DEL Ed}
//<227> ADD St
                if BunruiNCode2Flg = true then
                begin
                    sGCode      := fnPrjBunGet(m_arAdoptInfo_Pbr [2].nMasterDivision,BunruiNCode2,sName);
                    Jituzai_ETEdit_BunCd2.Text          := sGCode;
                    Jituzai_LLabel_BunNm2.Caption       := sName;
                    Jituzai_ETEdit_BunCd2.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl2.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
//<227> ADD Ed
            end;
            if Jituzai_ETEdit_BunCd3.Visible then            // ﾌﾟﾛｼﾞｪｸﾄ分類3
            begin
{<227> DEL St
                if Jituzai_ETEdit_BunCd3.Text <> '' then
                begin
                    exBefNCode := fnGetNCODE(Jituzai_ETEdit_BunCd3.Text,m_arAdoptInfo_PBr [3].nMasterDivision,m_arAdoptInfo_PBr [3].nCodeAttribute);
                end
                else
                    exBefNCode := 0;
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [3].nMasterDivision,BunruiNCode3,sName);
                exAftNCode := BunruiNCode3;
                if exBefNCode <> exAftNCode then
                begin
                    Jituzai_ETEdit_BunCd3.Text          := sGCode;
                    Jituzai_LLabel_BunNm3.Caption       := sName;
                    Jituzai_ETEdit_BunCd3.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl3.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
<227> DEL Ed}
//<227> ADD St
                if BunruiNCode3Flg = true then
                begin
                    sGCode      := fnPrjBunGet(m_arAdoptInfo_Pbr [3].nMasterDivision,BunruiNCode3,sName);
                    Jituzai_ETEdit_BunCd3.Text          := sGCode;
                    Jituzai_LLabel_BunNm3.Caption       := sName;
                    Jituzai_ETEdit_BunCd3.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl3.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
//<227> ADD Ed
            end;
            if Jituzai_ETEdit_BunCd4.Visible then            // ﾌﾟﾛｼﾞｪｸﾄ分類4
            begin
{<227> DEL St
                if Jituzai_ETEdit_BunCd4.Text <> '' then
                begin
                    exBefNCode := fnGetNCODE(Jituzai_ETEdit_BunCd4.Text,m_arAdoptInfo_PBr [4].nMasterDivision,m_arAdoptInfo_PBr [4].nCodeAttribute);
                end
                else
                    exBefNCode := 0;
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [4].nMasterDivision,BunruiNCode4,sName);
                exAftNCode := BunruiNCode4;
                if exBefNCode <> exAftNCode then
                begin
                    Jituzai_ETEdit_BunCd4.Text          := sGCode;
                    Jituzai_LLabel_BunNm4.Caption       := sName;
                    Jituzai_ETEdit_BunCd4.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl4.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
<227> DEL Ed}
//<227> ADD St
                if BunruiNCode4Flg = true then
                begin
                    sGCode      := fnPrjBunGet(m_arAdoptInfo_Pbr [4].nMasterDivision,BunruiNCode4,sName);
                    Jituzai_ETEdit_BunCd4.Text          := sGCode;
                    Jituzai_LLabel_BunNm4.Caption       := sName;
                    Jituzai_ETEdit_BunCd4.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl4.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
//<227> ADD Ed
            end;
            if Jituzai_ETEdit_BunCd5.Visible then            // ﾌﾟﾛｼﾞｪｸﾄ分類5
            begin
{<227> DEL St
                if Jituzai_ETEdit_BunCd5.Text <> '' then
                begin
                    exBefNCode := fnGetNCODE(Jituzai_ETEdit_BunCd5.Text,m_arAdoptInfo_PBr [5].nMasterDivision,m_arAdoptInfo_PBr [5].nCodeAttribute);
                end
                else
                    exBefNCode := 0;
                sGCode := fnPrjBunGet(m_arAdoptInfo_Pbr [5].nMasterDivision,BunruiNCode5,sName);
                exAftNCode := BunruiNCode5;
                if exBefNCode <> exAftNCode then
                begin
                    Jituzai_ETEdit_BunCd5.Text          := sGCode;
                    Jituzai_LLabel_BunNm5.Caption       := sName;
                    Jituzai_ETEdit_BunCd5.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl5.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
<227> DEL Ed}
//<227> ADD St
                if BunruiNCode5Flg = true then
                begin
                    sGCode      := fnPrjBunGet(m_arAdoptInfo_Pbr [5].nMasterDivision,BunruiNCode5,sName);
                    Jituzai_ETEdit_BunCd5.Text          := sGCode;
                    Jituzai_LLabel_BunNm5.Caption       := sName;
                    Jituzai_ETEdit_BunCd5.Font.Color    := clRed;
                    Jituzai_LLabel_BunTitl5.Font.Color  := clRed;
                    bSontaFlg := True;
                end;
//<227> ADD Ed
            end;

// <234> ADD start
            // セグメント情報1
//<253> DEL            if (Jituzai_ETEdit_SegCd1.Visible = True and SegNCode1Flg = True) then
            if (Jituzai_ETEdit_SegCd1.Visible = True) and (SegNCode1Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode1,m_arAdoptInfo_Seg [1].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [1].nMasterDivision,m_arAdoptInfo_Seg [1].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd1.Text          := sGCode;
                Jituzai_LLabel_SegNm1.Caption       := sName;
                Jituzai_ETEdit_SegCd1.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl1.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報2
//<253> DEL            if (Jituzai_ETEdit_SegCd2.Visible = True and SegNCode2Flg = True) then
            if (Jituzai_ETEdit_SegCd2.Visible = True) and (SegNCode2Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode2,m_arAdoptInfo_Seg [2].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [2].nMasterDivision,m_arAdoptInfo_Seg [2].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd2.Text          := sGCode;
                Jituzai_LLabel_SegNm2.Caption       := sName;
                Jituzai_ETEdit_SegCd2.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl2.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報3
//<253> DEL            if (Jituzai_ETEdit_SegCd3.Visible = True and SegNCode3Flg = True) then
            if (Jituzai_ETEdit_SegCd3.Visible = True) and (SegNCode3Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode3,m_arAdoptInfo_Seg [3].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [3].nMasterDivision,m_arAdoptInfo_Seg [3].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd3.Text          := sGCode;
                Jituzai_LLabel_SegNm3.Caption       := sName;
                Jituzai_ETEdit_SegCd3.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl3.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報4
//<253> DEL            if (Jituzai_ETEdit_SegCd4.Visible = True and SegNCode4Flg = True) then
            if (Jituzai_ETEdit_SegCd4.Visible = True) and (SegNCode4Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode4,m_arAdoptInfo_Seg [4].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [4].nMasterDivision,m_arAdoptInfo_Seg [4].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd4.Text          := sGCode;
                Jituzai_LLabel_SegNm4.Caption       := sName;
                Jituzai_ETEdit_SegCd4.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl4.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報5
//<253> DEL            if (Jituzai_ETEdit_SegCd5.Visible = True and SegNCode5Flg = True) then
            if (Jituzai_ETEdit_SegCd5.Visible = True) and (SegNCode5Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode5,m_arAdoptInfo_Seg [5].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [5].nMasterDivision,m_arAdoptInfo_Seg [5].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd5.Text          := sGCode;
                Jituzai_LLabel_SegNm5.Caption       := sName;
                Jituzai_ETEdit_SegCd5.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl5.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報6
//<253> DEL            if (Jituzai_ETEdit_SegCd6.Visible = True and SegNCode6Flg = True) then
            if (Jituzai_ETEdit_SegCd6.Visible = True) and (SegNCode6Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode6,m_arAdoptInfo_Seg [6].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [6].nMasterDivision,m_arAdoptInfo_Seg [6].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd6.Text          := sGCode;
                Jituzai_LLabel_SegNm6.Caption       := sName;
                Jituzai_ETEdit_SegCd6.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl6.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報7
//<253> DEL            if (Jituzai_ETEdit_SegCd7.Visible = True and SegNCode7Flg = True) then
            if (Jituzai_ETEdit_SegCd7.Visible = True) and (SegNCode7Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode7,m_arAdoptInfo_Seg [7].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [7].nMasterDivision,m_arAdoptInfo_Seg [7].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd7.Text          := sGCode;
                Jituzai_LLabel_SegNm7.Caption       := sName;
                Jituzai_ETEdit_SegCd7.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl7.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報8
//<253> DEL            if (Jituzai_ETEdit_SegCd8.Visible = True and SegNCode8Flg = True) then
            if (Jituzai_ETEdit_SegCd8.Visible = True) and (SegNCode8Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode8,m_arAdoptInfo_Seg [8].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [8].nMasterDivision,m_arAdoptInfo_Seg [8].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd8.Text          := sGCode;
                Jituzai_LLabel_SegNm8.Caption       := sName;
                Jituzai_ETEdit_SegCd8.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl8.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報9
//<253> DEL            if (Jituzai_ETEdit_SegCd9.Visible = True and SegNCode9Flg = True) then
            if (Jituzai_ETEdit_SegCd9.Visible = True) and (SegNCode9Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode9,m_arAdoptInfo_Seg [9].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [9].nMasterDivision,m_arAdoptInfo_Seg [9].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd9.Text          := sGCode;
                Jituzai_LLabel_SegNm9.Caption       := sName;
                Jituzai_ETEdit_SegCd9.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl9.Font.Color  := clRed;
                bSontaFlg := True;
            end;
            // セグメント情報10
//<253> DEL            if (Jituzai_ETEdit_SegCd10.Visible = True and SegNCode10Flg = True) then
            if (Jituzai_ETEdit_SegCd10.Visible = True) and (SegNCode10Flg = True) then  //<253> ADD
            begin
                sGCode := fnGetGCODE(SegNCode10,m_arAdoptInfo_Seg [10].nMasterDivision);
                fnGetNAME(sGCode,m_arAdoptInfo_Seg [10].nMasterDivision,m_arAdoptInfo_Seg [10].nCodeAttribute,sName);
                Jituzai_ETEdit_SegCd10.Text          := sGCode;
                Jituzai_LLabel_SegNm10.Caption       := sName;
                Jituzai_ETEdit_SegCd10.Font.Color    := clRed;
                Jituzai_LLabel_SegTitl10.Font.Color  := clRed;
                bSontaFlg := True;
            end;
// <234> ADD end

            // タブの文字色を変更
//<281> MOD St
{
            if bKihonFlg = true then
                Jituzai_PMTab.Items[0].Font.Color    := clRed;
            if bKojiFlg = true  then
                Jituzai_PMTab.Items[1].Font.Color    := clRed;
            if bKeiyakuFlg = true  then
                Jituzai_PMTab.Items[3].Font.Color    := clRed;
            if bNyuukinFlg = true  then
                Jituzai_PMTab.Items[4].Font.Color    := clRed;
            if bBikouFlg = true  then
                Jituzai_PMTab.Items[5].Font.Color    := clRed;
            if bSontaFlg = true  then
                Jituzai_PMTab.Items[6].Font.Color    := clRed;
}
            if bKihonFlg = true then
                Jituzai_PMTab.Items[PAGE_KIHON].Font.Color    := clRed;
            if bKojiFlg = true  then
                Jituzai_PMTab.Items[PAGE_KOJI].Font.Color    := clRed;
            if bKeiyakuFlg = true  then
                Jituzai_PMTab.Items[PAGE_KEIYAKU].Font.Color    := clRed;
            if bNyuukinFlg = true  then
                Jituzai_PMTab.Items[PAGE_NYUKIN].Font.Color    := clRed;
            if bBikouFlg = true  then
                Jituzai_PMTab.Items[PAGE_BIKOU].Font.Color    := clRed;
            if bSontaFlg = true  then
                Jituzai_PMTab.Items[PAGE_SONOTA].Font.Color    := clRed;
//<281> MOD Ed
//<FREE> ADD St
            // 最初にDBのフリー項目の値をセットしておく
            setWfFreeItem(toPrjKojiAllOfFreeItem(HojyoMA_DMQuery));
            // フリー項目セット
            setWfFreeItem(ObjRec);
//<FREE> ADD Ed
		end
		// 合計
		else
		begin
		end;

        // 申請書情報ｷｰ
        if SinFormFlg then                  // 申請書入力形式
            m_recFLWSinseiKey[0].SinForm := SinForm
        else
            m_recFLWSinseiKey[0].SinForm := -1;
        if HisIDFlg then                    // 処理履歴ID
            m_recFLWSinseiKey[0].HisID := HisID
        else
            m_recFLWSinseiKey[0].HisID := -1;
        if SinOrgNoFlg then                 // 原票No
            m_recFLWSinseiKey[0].OrgNo := SinOrgNo
        else
            m_recFLWSinseiKey[0].OrgNo := -1;
    end;

    m_recOther.CanInsert := true;           // 取込可能
end;



// *************************************************************
// *
// *　　　作成日付：2005.11.01
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：ExistMst
// *　　　関数説明：ﾏｽﾀに存在するか
// *
// *　　　入力　　：iMKbn   : ﾏｽﾀ区分(社員、部門)
// *                exNCode : 内部ｺｰﾄﾞ
// *　　　出力　　：Boolean : true: ある false: ない
// *
// *************************************************************
function TJNTCRP018001f.ExistMst(iMKbn: Integer; exNCode: Extended): Boolean;	// <WF>
var
    qryMst  : TMQuery;
    strSQL  : String;
begin
    Result := false;

    if iMKbn = MKBN_SYAIN then              // 社員
    begin
//<255> DEL        strSQL := 'select * from HAPSC HAP ' +
        strSQL := 'select HAP.NCode from HAPSC HAP ' +  //<255> ADD
                    'left outer join MOS_OFFICE_STAFF MOS ' +
                    'on (MOS.NCode = HAP.NCode) ' +
                    'where (HAP.NCode = :parNCode) ' +
                    'and (MOS.RDelKbn = 0) ';
// <147>販売担当者区分はﾁｪｯｸしない
                // 得意先担当者
{                if m_recSinseiKey.SwkForm = SWKFORM_TOKUI then
                    strSQL := strSQL + '  AND  (HAP.KBN in (1,3)) '
                // 仕入先担当者
                else if m_recSinseiKey.SwkForm = SWKFORM_SIIRE then
                    strSQL := strSQL + '  AND  (HAP.KBN in (2,3)) '
                else
                    Exit;
}
    end
    else if iMKbn = MKBN_BUMON then         // 部門
    begin
//<255> DEL        strSQL := 'select * from HojyoMA '+
        strSQL := 'select NCode from HojyoMA '+  //<255> ADD
                    'where RDelKbn = 0 and MasterKbn = 41 and SumKbn = 0 ' +
                    'and NCode = :parNCode';
    end
    else
        Exit;


	qryMst := TMQuery.Create(Self);					        // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryMst);	// DBとMQueryの接続

   	with qryMst do
   	begin
   		try
   			Close;
   			SQL.Clear;		 							// qmQuery 初期化
   			SQL.Add(strSQL);
//<255> DEL            ParamByName('parNCode').AsFloat := exNCode; // 内部ｺｰﾄﾞ
            ParamByName('parNCode').AsString := FormatFloat('0',exNCode); // 内部ｺｰﾄﾞ  <255> ADD

   			Open;
   			if not EOF then                 // ﾃﾞｰﾀあり
                Result := true;

        finally
            Close;
            Free;
        end;
    end;

end;

// *************************************************************
// *
// *　　　作成日付：2005.10.31
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：UpdateSinsei
// *　　　関数説明：申請書情報の連動区分更新
// *
// *　　　入力　　：objKey  : 申請書情報ｷｰ
// *　　　出力　　：正常 or 異常
// *
// *************************************************************
{<225> DEL St
function TJNTCRP018001f.UpdateSinsei(objKey: TSinseiInfoKey): Boolean;			// <WF>
var
    cMasterSinseiExpIF : TETYMasterSinseiExgIF;
    iResult    : Integer;
begin
    Result := true;
                                            // BPL管理構造体、ｵｰﾌﾟﾝ済み会社DB
    cMasterSinseiExpIF := TETYMasterSinseiExgIF.Create(m_pMyAppRecord, dbCorp_Select);

                                            // 更新
    iResult := cMasterSinseiExpIF.UpdConnectFlg(objKey);
    if iResult < 0 then
        Result := false;

    cMasterSinseiExpIF.Free;                // 申請ﾃﾞｰﾀIFｵﾌﾞｼﾞｪｸﾄの破棄

end;
<225> DEL Ed}
// *************************************************************
// *
// *　　　作成日付：2006.06.30
// *　　　作成者  ：H.Endo(MJS)
// *
// *　　　関数名称：fnInfoGet
// *　　　関数説明：担当者/受注先の内部ｺｰﾄﾞから外部ｺｰﾄﾞ、名称を取得
// *
// *　　　入力　　：iMKbn   	: 区分		0:担当者(KBN_TANTOSYA)
// *										1:受注先(KBN_JUTYUSAKI)
// *										2:受注先(KBN_BMN)
// *                                        3:施主  (KBN_SESHU)      <208> ADD
// *                NCode		: 内部ｺｰﾄﾞ
// *				(out)NM		: 名称
// *　　　出力　　：String		: 外部ｺｰﾄﾞ
// *
// *************************************************************
function TJNTCRP018001f.fnInfoGet(Kbn: Integer; NCode: Extended; var NM: String): String;	// <WF>
var
    qryMst  : TMQuery;
    strSQL  : String;
begin
	NM	   := '';
    Result := '';

    if Kbn = KBN_TANTOSYA then              // 担当者
    begin
        strSQL := 'select HAP.GCode as GC,Mos.Simplename as NM from HAPSC HAP ' +
                    'left outer join MOS_OFFICE_STAFF MOS ' +
                    'on (MOS.NCode = HAP.NCode) ' +
                    'where (HAP.NCode = :parNCode) ' +
                    'and (MOS.RDelKbn = 0) ';
    end
    else if Kbn = KBN_JUTYUSAKI then		// 受注先
    begin
        strSQL := 'select GCode as GC,Nmk as NM from MTOKUI '+
                    'where RDelKbn = 0 and SumKBN = 0 and TemplateKbn = 0 ' +
                    'and NCode = :parNCode';
    end
    else if Kbn = KBN_BMN then				// 部門
    begin
        strSQL := 'select GCode as GC,Simplename as NM from HojyoMA '+
                    'where RDelKbn = 0 and MasterKbn = 41 and SumKbn = 0 ' +
                    'and NCode = :parNCode';
    end
// <208> ADD start
    else if Kbn = KBN_SESHU then
    begin
// <224> MOD start
{
        strSQL := 'select GCode as GC,Nm as NM from MSOFU '+
                    'where RDelKbn = 0 and NouKbn = 4 ' +
                    'and NCode = :parNCode';
}
        strSQL := 'select GCode as GC,Nmk as NM from MSOFU '+
                    'where RDelKbn = 0 and NouKbn = 4 ' +
                    'and NCode = :parNCode';
// <224> MOD end
    end;
// <208> ADD start


	qryMst := TMQuery.Create(Self);					        // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryMst);	// DBとMQueryの接続

   	with qryMst do
   	begin
   		try
   			Close;
   			SQL.Clear;		 							// qmQuery 初期化
   			SQL.Add(strSQL);
//<255> DEL            ParamByName('parNCode').AsFloat := NCode; // 内部ｺｰﾄﾞ
            ParamByName('parNCode').AsString := FormatFloat('0',NCode); // 内部ｺｰﾄﾞ  <255> ADD

   			Open;
   			if not EOF then                 // ﾃﾞｰﾀあり
			begin
				NM	   := GetFld('NM').AsString;
                Result := GetFld('GC').AsString;
			end;

        finally
            Close;
            Free;
        end;
    end;
end;

// *************************************************************
// *      <208> ADD
// *　　　作成日付：2008.09.05
// *　　　作成者  ：T.Miyagi(RIT)
// *　　　関数名称：fnPrjBunGet
// *　　　関数説明：ﾌﾟﾛｼﾞｪｸﾄ分類の内部ｺｰﾄﾞから外部ｺｰﾄﾞ、名称を取得
// *　　　入力　　：iMasterKbn 	: マスター区分
// *                NCode		: 内部ｺｰﾄﾞ
// *　　　出力　　：String		: 外部ｺｰﾄﾞ
// *			  ：NM		    : 名称
// *************************************************************
function TJNTCRP018001f.fnPrjBunGet(iMasterKbn: Integer; NCode: Extended; var NM: String): String;
var
    qryMst  : TMQuery;
    strSQL  : String;
begin
	NM	   := '';
    Result := '';

    strSQL := 'select GCode as GC,Nmk as NM from MMEISHO '  +
                    'where RDelKbn = 0 and SetNM = :SetNm ' +
                    'and NCode = :parNCode';

	qryMst := TMQuery.Create(Self);					        // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryMst);	// DBとMQueryの接続

   	with qryMst do
   	begin
   		try
   			Close;
   			SQL.Clear;		 							// qmQuery 初期化
   			SQL.Add(strSQL);
//<255> DEL            ParamByName('parNCode').AsFloat := NCode;      // 内部ｺｰﾄﾞ
            ParamByName('parNCode').AsString := FormatFloat('0',NCode);      // 内部ｺｰﾄﾞ  <255> ADD
            ParamByName('SetNm').AsInteger  := iMasterKbn; // マスター区分

   			Open;
   			if not EOF then                 // ﾃﾞｰﾀあり
			begin
				NM	   := GetFld('NM').AsString;
                Result := GetFld('GC').AsString;
			end;

        finally
            Close;
            Free;
        end;
    end;
end;


//**************************************************************************
//	Proccess	:	工事/プロジェクトデータ存在チェック
//	Parameter	:	strGCode	: String
//				:	iSumKbn		: Integer (0:実在 1:合計)
//	Retrun		:
//**************************************************************************
function TJNTCRP018001f.fnKojPrjDataCheck(strGCode: String; iSumKbn: Integer): Integer;
var
	QueryError	:	TMQuery;

begin
	result := 0;

    // 外部ｺｰﾄﾞを属性により編集
	if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
	begin
		if strGCode <> '' then
			strGCode := Format ('%.16d', [StrToInt64 (Trim(strGCode))]);
	end;

    // 取引先の存在ﾁｪｯｸ
	QueryError := TMQuery.Create(Self);					        // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryError);    // DBとMQueryの接続

	with QueryError do
	begin
		try
			Close;
			SQL.Clear;

			SQL.Add('Select MasterKbn from HojyoMA');
			SQL.Add('Where MasterKbn=:pMKBN and RDelKbn=0 and GCode=:strGCode and SumKbn=:iSumKbn');
            SetFld('pMKBN'   ).asInteger := m_nMasterDivision;
			SetFld('strGCode').AsString	 := strGCode;
			SetFld('iSumKbn' ).AsInteger := iSumKbn;

			Open;

			if Eof = false then
			begin
				result := 1;
				exit;
			end;
		finally
			Free;
		end;
	end;

end;

//**********************************************************************
//*		Proccess	:	申請書入力時の画面操作
//*		Name		:	H.Endo(MJS)
//*		Date		:	2006/07/07
//*     Param       :   bDsp	:	画面操作フラグ	true	:使用可
//*													false	:使用不可
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.fnSinseiDspControl(bDsp: Boolean);
begin
	Jituzai_PPanel_Card_1.Enabled	:= bDsp;
	Jituzai_PPanel_Koji.Enabled		:= bDsp;
	Jituzai_PPanel_Kansei.Enabled	:= bDsp;
	Jituzai_PPanel_KeNyukin.Enabled := bDsp;
    Jituzai_PPanel_Keiyaku.Enabled  := bDsp;    // ADD <212>
	Jituzai_PPanel_Kihon.Enabled	:= bDsp;
	Jituzai_PPanel_Sonota.Enabled	:= bDsp;
    Jituzai_PPanel_Bikou.Enabled    := bDsp;    // ADD <208>
    Jituzai_PPanel_Seikyu.Enabled   := bDsp;    // ADD <SEI>
	Jituzai_BBitBtn_Ok.Enabled		:= bDsp;

	Goukei_PPanel_Card_1.Enabled   := bDsp;
	Goukei_PPanel_Koji.Enabled	   := bDsp;
	Goukei_PPanel_KeNyukin.Enabled := bDsp;
    Goukei_PPanel_Keiyaku.Enabled  := bDsp;     // ADD <212>
	Goukei_PPanel_Kihon.Enabled    := bDsp;
    Goukei_PPanel_Bikou.Enabled    := bDsp;     // ADD <208>
    Goukei_PPanel_Seikyu.Enabled   := bDsp;     // ADD <SEI>
	Goukei_BBitBtn_Ok.Enabled      := bDsp;

	PPanelTree.Enabled := bDsp;
end;
//<155> - ED

//<162> - ST
//**********************************************************************
//*		Proccess	:	完成振替情報取得
//*		Name		:	H.Endo(MJS)
//*		Date		:	2006/08/29
//*     Param       :   なし
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.fnGetKanseiFuriInfo();
var
    Qry     : TMQuery;
    i       : Integer;

//	uaNCode : array[1..10] of Extended;
//    lvSql   : String;
//    lvCnt   : Integer;
//    lvCode  : String;
//    iCode   : Integer;
//    iCut    : Integer;

begin
	// 完成振替情報の配列ｸﾘｱ
	fnKanseiFuriInfoClear();

    // Queryの作成
    Qry	:= TMQuery.Create(Self);
    MDataModule^.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            Sql.Clear;
//<255> MOD St
//            SQL.Add('Select * From KojiInfo ko'+
            SQL.Add('Select Ko.Seg1NCode ');
            // セグメント２～１０
            for i := 2 to 10 do SQL.Add(',Ko.Seg'+IntToStr(i)+'NCode ');
            // プロジェクト１～１０
            for i := 1 to 10 do SQL.Add(',Ko.Prj'+IntToStr(i)+'NCode ');
            // 汎用補助１～５
            for i := 1 to 5 do SQL.Add(',Ko.Hoj'+IntToStr(i)+'NCode ');
            SQL.Add(' From KojiInfo ko'+
//<255> MOD Ed
                    ' Where MasterKbn = :iMasterKbn and NCode = :NCode');

            SetFld('iMasterKbn').AsInteger := m_nMasterDivision;
//<255> DEL            SetFld('NCode'	   ).AsFloat   := JHojyoMA_DMemDataNCode.AsFloat;
            SetFld('NCode'	   ).AsString   := JHojyoMA_DMemDataNCode.AsString;  //<255> ADD
            Open;
//<KSN> MOD St
{
            if not Eof then
            begin
                // 配列に内部ｺｰﾄﾞをｾｯﾄ
				// ｾｸﾞﾒﾝﾄ
                for i := 1 to 10 do
				begin
					m_aKanseiFuriInfo[i].MasterKbn := i+100;
					m_aKanseiFuriInfo[i].NCode	   := FieldByName('Seg' +  IntToStr(i) + 'NCODE').AsFloat;
				end;
				// ﾌﾟﾛｼﾞｪｸﾄ
                for i := 11 to 20 do
				begin
					m_aKanseiFuriInfo[i].MasterKbn := i+190;
					m_aKanseiFuriInfo[i].NCode := FieldByName('Prj' +  IntToStr(i-10) + 'NCODE').AsFloat;
				end;
				// 補助
                for i := 21 to 25 do
				begin
					m_aKanseiFuriInfo[i].MasterKbn := i+10;
					m_aKanseiFuriInfo[i].NCode := FieldByName('Hoj' +  IntToStr(i-20) + 'NCODE').AsFloat;
				end;
            end;
}
            // 取得できなくてもセットするようにする。
            // 配列に内部ｺｰﾄﾞをｾｯﾄ
            // ｾｸﾞﾒﾝﾄ
            for i := 1 to 10 do
            begin
                m_aKanseiFuriInfo[i].MasterKbn := i+100;
                if not Eof then
                    m_aKanseiFuriInfo[i].NCode	   := FieldByName('Seg' +  IntToStr(i) + 'NCODE').AsFloat;
            end;
            // ﾌﾟﾛｼﾞｪｸﾄ
            for i := 11 to 20 do
            begin
                m_aKanseiFuriInfo[i].MasterKbn := i+190;
                if not Eof then
                    m_aKanseiFuriInfo[i].NCode := FieldByName('Prj' +  IntToStr(i-10) + 'NCODE').AsFloat;
            end;
            // 補助
            for i := 21 to 25 do
            begin
                m_aKanseiFuriInfo[i].MasterKbn := i+10;
                if not Eof then
                    m_aKanseiFuriInfo[i].NCode := FieldByName('Hoj' +  IntToStr(i-20) + 'NCODE').AsFloat;
            end;
//<KSN> MOD Ed

            Close;
            Sql.Clear;
            Sql.add('select MasterKbn,JHojyoName,CodeAttr,CodeDigit From MasterInfo ');
			Sql.add('where ((MasterKBN Between 31 and 35) and (USEKBN <> 0)) or ');
			Sql.add('((MasterKBN Between 101 and 110) and (USEKBN <> 0)) or ');

            //<273> St 工事登録 /  ﾌﾟﾛｼﾞｪｸﾄ登録
            //Mod Sql.add('((MasterKBN Between 201 and 210) and (KOJUSEKBN = 0) and (USEKBN <> 0))');
            if ( m_pMyAppRecord.m_sParameter = '1' ) then
                Sql.add('((MasterKBN Between 201 and 210) and (KOJUSEKBN = 0) and (USEKBN <> 0))')
            else
                Sql.add('((MasterKBN Between 201 and 210) and (USEKBN <> 0))');
            //<273> Ed

            Open;
            While not eof  do
            begin
				for i:=1 to 25 do
				begin
					if m_aKanseiFuriInfo[i].MasterKbn = FieldByName('MasterKBN').asInteger then
					begin
						m_aKanseiFuriInfo[i].JHojyoName := FieldByName('JHojyoName').asString;
						m_aKanseiFuriInfo[i].CodeAttr   := FieldByName('CodeAttr').asInteger;
						m_aKanseiFuriInfo[i].CodeDigit  := FieldByName('CodeDigit').asInteger;
						m_aKanseiFuriInfo[i].UseKbn		:= 1;
						break;
					end;
				end;
                Next;
            end;
        end;
    Finally
        Qry.Close;
        Qry.Free;
    end;
end;

//**********************************************************************
//*		Proccess	:	完成振替情報ｸﾘｱ
//*		Name		:	H.Endo(MJS)
//*		Date		:	2006/08/29
//*     Param       :   なし
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.fnKanseiFuriInfoClear();
var
	i	: Integer;
begin
	for i:=1 to 25 do
	begin
		m_aKanseiFuriInfo[i].MasterKbn  := 0;	// ﾏｽﾀ区分
		m_aKanseiFuriInfo[i].JHojyoName := '';	// 名称
		m_aKanseiFuriInfo[i].CodeAttr	:= 0;	// 属性
		m_aKanseiFuriInfo[i].CodeDigit	:= 0;	// 桁数
		m_aKanseiFuriInfo[i].NCode		:= 0;	// 内部ｺｰﾄﾞ
		m_aKanseiFuriInfo[i].UseKbn		:= 0;	// 採用区分
	end;
end;

//**********************************************************************
//*		Proccess	:	完成振替情報表示
//*		Name		:	H.Endo(MJS)
//*		Date		:	2006/08/29
//*     Param       :   なし
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.fnKanseiFuriInfoDsp();
var
	i,iSt,iEd	: Integer;
	iCut		: Integer;
	cCode		: Currency;
	sCode		: String;
begin
    iSt := 0;
    iEd := 0;
    if MMasterKBN.itemIndex      = 0 then                   // ﾌﾟﾛｼﾞｪｸﾄ
    begin
		iSt := 11;
		iEd := 20;
    end
    else if MMasterKBN.itemIndex = 1 then                   // 汎用補助
    begin
		iSt := 21;
		iEd := 25;
    end
    else if MMasterKBN.itemIndex = 2 then                   // ｾｸﾞﾒﾝﾄ
    begin
		iSt := 1;
		iEd := 10;
    end;

    // MemDataをOpen
    if JKansei.Active = true then
        JKansei.Close;
    JKansei.Open;

	m_bFirstFlg := true;
	for i:=iSt to iEd do
	begin
        //<273> St
		if (MMasterKBN.itemIndex = 0) then
        begin
            //ﾌﾟﾛｼﾞｪｸﾄ[x]自身はマスター区分Gridに表示させない。
            if (TMSeries.IsGalielopt2=true) and (m_aKanseiFuriInfo[i].MasterKbn =m_arAdoptInfo[ECombo_Header.ItemIndex].nMasterDivision) then
		        continue;
        end;
        //  プロジェクトの場合、1：PL型、2：BS+PL なので、「2」もOKとする。
        //　昔からの不具合。工事登録でも同様の問題があったはず。
    	//mod if m_aKanseiFuriInfo[i].UseKbn = 1 then
		if m_aKanseiFuriInfo[i].UseKbn >= 1 then
        //<273> Ed
		begin
			JKansei.Append;
			JKanseiMasterKbn.asInteger := m_aKanseiFuriInfo[i].MasterKbn;
			JKanseiTitol.asString      := m_aKanseiFuriInfo[i].JHojyoName;
			JKanseiCodeAttr.asInteger  := m_aKanseiFuriInfo[i].CodeAttr;
			JKanseiCodeDigit.asInteger := m_aKanseiFuriInfo[i].CodeDigit;

			//外部コードを取得
			sCode := '';
			sCode := fnGetGCODE(m_aKanseiFuriInfo[i].NCode,m_aKanseiFuriInfo[i].MasterKbn);

			if m_aKanseiFuriInfo[i].CodeAttr <> 2 then
			begin
				if m_aKanseiFuriInfo[i].CodeAttr = 1 then
				begin
					if sCode <> '' then
					begin
						iCut := 16 - m_aKanseiFuriInfo[i].CodeDigit;
						System.Delete(sCode, 1, iCut);
					end;
				end
				else
				begin
					if sCode <> '' then
					begin
						cCode := StrToInt64(Trim(sCode));
						sCode := CurrToStr(cCode);
					end;
				end;
			end;
			JKanseiGCODE.AsString := sCode;
			JKansei.Post;
		end;
	end;
	m_bFirstFlg := false;
	JKansei.First;

	if JKansei.RecordCount = 0 then
		dxKanseiGid.Enabled := false
	else
		dxKanseiGid.Enabled := true;
end;
//<162> - ED

//**********************************************************************
//*		Proccess	:	実在契約情報BeforeChangeNode移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ  <163><172>
//*		Name		:	H.Endo
//*		Date		:	2006/09/14
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiBeforeChangeNode(
  Sender: TObject; Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	dDate : TDateTime;
    Qe    : TMQuery;
    returnCode : Integer;  //<TAX_1> ADD
begin
	dDate := JKeiyaku_DMemDataContDate.AsDateTime;
    Qe    := TMQuery.Create ( Self );

    try
        if ( dDate = 0 ) then
        begin
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                // 自社(子社)へ接続
                MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close();
                Qe.SQL.Clear();
                Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                Qe.SQL.Add('from KojiInfo2_Rel                  ');
                Qe.SQL.Add('where                               ');
                Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                Qe.ParamByName('pNCode' ).AsFloat   := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                Qe.ParamByName('pNCode' ).AsString   := JKeiyaku_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                if ( Qe.Open = false ) then
                begin
                    ErrorMessageDsp( Qe );
                    Qe.Close();
                    Qe.Free();
                    Abort;
                end;

                if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                begin
                    MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                '削除', mjInformation, mjOk, mjDefOk);
                    JKeiyaku_DMemData.Cancel();
                    Abort;
                end;
            end;
//<TAX_1> ADD St
            returnCode := moKojiInfoMn.DeleteKojiInfo2(
                toKojiInfo2Param(JKeiyaku_DMemData));
            // 契約別仮受消費税存在時                
            if (returnCode = CONT_EXISTSCONTACCOUNT) then
            begin
                MjsMessageBoxEX(Self,
                    GetContMessage(returnCode),'警告',mjWarning ,mjOk,mjDefOK);
                JKeiyaku_DMemData.Cancel;
                Abort;
            end;
//<TAX_1> ADD Ed
            // Memdataの内容を消去する
            JKeiDateSave[JKeiyaku_DMemData.RecNo]      := 0;
            JKeiyaku_DMemData.Edit;
            JKeiyaku_DMemDataContDate       .Clear;
            JKeiyaku_DMemDataPrevContDate   .Clear;
            JKeiyaku_DMemDataContNo         .Clear;
            JKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
            JKeiyaku_DMemDataTax_RateName   .AsString  := '';
            JKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
            JKeiyaku_DMemDataDspOrder       .AsInteger := 0;  //<TAX_1> ADD
            JTaxRateSave[JKeiyaku_DMemData.RecNo]      := 0;    // <169>
            JKeiyaku_DMemDataSales_Tax      .Clear;
            JKeiyaku_DMemDataContMoney      .Clear;
            JKeiyaku_DMemDataCheck          .AsInteger := 1;

            // 削除する契約情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 8件
            if ( JKeiyaku_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                JKeiNCodeSave[JKeiElement] := JKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                inc(JKeiElement);
            end;

            JKeiyaku_DMemDataKojiInfo2NCode .AsFloat := 0;
        end;
    finally
        Qe.Close();
        Qe.Free();
    end;
end;

//**********************************************************************
//*		Proccess	:	合計契約情報BeforeChangeNode移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ  <163><172>
//*		Name		:	H.Endo
//*		Date		:	2006/09/14
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiBeforeChangeNode(
  Sender: TObject; Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	dDate : TDateTime;
    Qe    : TMQuery;
begin
	dDate := GKeiyaku_DMemDataContDate.AsDateTime;
    Qe    := TMQuery.Create ( Self );

    try
    	if ( dDate = 0 ) then
    	begin
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                // 自社(子社)へ接続
                MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close();
                Qe.SQL.Clear();
                Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                Qe.SQL.Add('from KojiInfo2_Rel                  ');
                Qe.SQL.Add('where                               ');
                Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                Qe.ParamByName('pNCode' ).AsFloat   := GKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                Qe.ParamByName('pNCode' ).AsString   := GKeiyaku_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                if ( Qe.Open = false ) then
                begin
                    ErrorMessageDsp( Qe );
                    Qe.Close();
                    Qe.Free();
                    Abort;
                end;

                if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                begin
                    MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                '削除', mjInformation, mjOk, mjDefOk);
// <220> MOD start
//                    JKeiyaku_DMemData.Cancel();
                    GKeiyaku_DMemData.Cancel();
// <220> MOD end
                    Abort;
                end;
            end;

            // Memdataの内容を消去する
    		GKeiDateSave[GKeiyaku_DMemData.RecNo]      := 0;
    		GKeiyaku_DMemData               .Edit;
    		GKeiyaku_DMemDataContDate       .Clear;
    		GKeiyaku_DMemDataPrevContDate   .Clear;
    		GKeiyaku_DMemDataContNo         .Clear;
			GKeiyaku_DMemDataDummyTax_Rate  .AsInteger := 0;
			GKeiyaku_DMemDataTax_RateName   .AsString  := '';
			GKeiyaku_DMemDataTax_Rate       .AsInteger := 0;
			GKeiyaku_DMemDataSales_Tax      .Clear;
			GKeiyaku_DMemDataContMoney      .Clear;
    		GKeiyaku_DMemDataCheck          .AsInteger := 1;

            // 削除する契約情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 8件
            if ( GKeiyaku_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                GKeiNCodeSave[GKeiElement] := GKeiyaku_DMemDataKojiInfo2NCode.AsFloat;
                inc(GKeiElement);
            end;

            GKeiyaku_DMemDataKojiInfo2NCode .AsFloat := 0;
        end;
    finally
        Qe.Close();
        Qe.Free();
    end;
end;

//**********************************************************************
//*		Proccess	:	実在入金情報BeforeChangeNode移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ  <172>
//*		Name		:	y.Mogi(LEAD)
//*		Date		:	2007/04/06
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_NyuBeforeChangeNode(
  Sender: TObject; Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	dDate : TDateTime;
    Qe    : TMQuery;
begin

    dDate := JNyukin_DMemDataContDate.AsDateTime;
    Qe    := TMQuery.Create ( Self );

    try
    	if ( dDate = 0 ) then
    	begin
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                // 自社(子社)へ接続
                MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close();
                Qe.SQL.Clear();
                Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                Qe.SQL.Add('from KojiInfo2_Rel                  ');
                Qe.SQL.Add('where                               ');
                Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                Qe.ParamByName('pNCode' ).AsFloat   := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                Qe.ParamByName('pNCode' ).AsString   := JNyukin_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                if ( Qe.Open = false ) then
                begin
                    ErrorMessageDsp( Qe );
                    Qe.Close();
                    Qe.Free();
                    Abort;
                end;

                if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                begin
                    MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                '削除', mjInformation, mjOk, mjDefOk);
                    JKeiyaku_DMemData.Cancel();
                    Abort;
                end;
            end;

            JNyukin_DMemData.Edit;

            // 削除する入金予定情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 10件
            if ( JNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                JNyuNCodeSave[JNyuElement] := JNyukin_DMemDataKojiInfo2NCode.AsFloat;
                inc(JNyuElement);
            end;

            JNyukin_DMemDataKojiInfo2NCode .AsFloat := 0;
        end;
    finally
        Qe.Close();
        Qe.Free();
    end;
end;

//**********************************************************************
//*		Proccess	:	合計入金情報BeforeChangeNode移動ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ  <172>
//*		Name		:	y.Mogi(LEAD)
//*		Date		:	2007/04/06
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_NyuBeforeChangeNode(
  Sender: TObject; Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	dDate : TDateTime;
    Qe    : TMQuery;
begin

    dDate := GNyukin_DMemDataContDate.AsDateTime;
    Qe    := TMQuery.Create ( Self );

    try
    	if ( dDate = 0 ) then
    	begin
            if ( m_SyncMaster.m_flgGrpCorp = 0 ) then   // <189> ｸﾞﾙｰﾌﾟ会計全社か否か判断する
            begin
                // 自社(子社)へ接続
                MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

                Qe.Close();
                Qe.SQL.Clear();
                Qe.SQL.Add('select Count(KojiInfo2NCode) CNT    ');
                Qe.SQL.Add('from KojiInfo2_Rel                  ');
                Qe.SQL.Add('where                               ');
                Qe.SQL.Add('      KojiInfo2NCode = :pNCode      ');
                Qe.SQL.Add('  and RDelKbn_REL    = 0            ');
//<255> DEL                Qe.ParamByName('pNCode' ).AsFloat   := GNyukin_DMemDataKojiInfo2NCode.AsFloat;
                Qe.ParamByName('pNCode' ).AsString   := GNyukin_DMemDataKojiInfo2NCode.AsString;  //<255> ADD

                if ( Qe.Open = false ) then
                begin
                    ErrorMessageDsp( Qe );
                    Qe.Close();
                    Qe.Free();
                    Abort;
                end;

                if ( Qe.FieldByName('CNT').AsInteger <> 0 ) then
                begin
                    MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                                '削除', mjInformation, mjOk, mjDefOk);
                    JKeiyaku_DMemData.Cancel();
                    Abort;
                end;
            end;

            GNyukin_DMemData.Edit;

            // 削除する入金予定情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 10件
            if ( GNyukin_DMemDataKojiInfo2NCode.AsFloat <> 0 ) then
            begin
                GNyuNCodeSave[GNyuElement] := GNyukin_DMemDataKojiInfo2NCode.AsFloat;
                inc(GNyuElement);
            end;

            GNyukin_DMemDataKojiInfo2NCode .AsFloat   := 0;
        end;
    finally
        Qe.Close();
        Qe.Free();
    end;

end;

// <191> ADD start

//**************************************************************************
//	Proccess  : 売上計上科目の外部ｺｰﾄﾞを取得
//	Name	  :	S.Suzuki
//	Date	  :	2007/07/09
//	Parameter : iNCode 売上計上科目内部ｺｰﾄﾞ
//
//	Retrun	  : 外部ｺｰﾄﾞ
//	History	　:
//
//**************************************************************************
function TJNTCRP018001f.GetKmkGCode(exNCode : Extended) : Integer;
var
	dQuery : TMQuery;
begin
    Result := 0;

    dQuery := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, dQuery);

    try
        with dQuery do
        begin
            Close();
            SQL.Clear();					// ｸｴﾘの初期化
            SQL.Add('Select GCode From KmkMA' 	+
           			' Where MasterKbn = 1' 		+
                    ' And SumKbn = 0'			+
                    ' And RDelKbn = 0'			+
                    ' And NCode = :parNCode');

//<255> DEL            SetFld('parNCode').AsFloat := exNCode;
            SetFld('parNCode').AsString := FormatFloat('0',exNCode);  //<255> ADD

			if not Open() then
            begin
            	 							// SQLｴﾗｰ
            	ComArea.m_MsgStd.GetMsgDB (MjsMsgRec, dQuery);
                with MjsMsgRec do
            	begin
                 	MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                end;

				Exit;
            end;

            if not Eof then
            begin               			// 外部ｺｰﾄﾞ取得
                Result := FieldByName('GCode').AsInteger;
            end;
        end;

    finally
        dQuery.Close();
        dQuery.Free();
    end;
end;

//**************************************************************************
//	Proccess  : 売上計上科目の外部ｺｰﾄﾞを取得
//	Name	  :	S.Suzuki
//	Date	  :	2007/07/09
//	Parameter : iNCode 売上計上科目外部ｺｰﾄﾞ
//
//	Retrun	  : 内部ｺｰﾄﾞ
//	History	　:
//
//**************************************************************************
function TJNTCRP018001f.GetKmkNCode(iGCode : Integer) : Extended;
var
	dQuery : TMQuery;
begin
    Result := 0;

    dQuery := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, dQuery);

    try
        with dQuery do
        begin
            Close();
            SQL.Clear();					// ｸｴﾘの初期化
            SQL.Add('Select NCode From KmkMA' 	+
           			' Where MasterKbn = 1' 		+
                    ' And SumKbn = 0'			+
                    ' And RDelKbn = 0'			+
                    ' And GCode = :parGCode');

            SetFld('parGCode').AsInteger := iGCode;

			if not Open() then
            begin
            	 							// SQLｴﾗｰ
            	ComArea.m_MsgStd.GetMsgDB (MjsMsgRec, dQuery);
                with MjsMsgRec do
            	begin
                 	MjsMessageBoxEx (Self, sMsg, sTitle, icontype, btntype, btndef, false);
                end;

				Exit;
            end;

            if not Eof then
            begin              				// 内部ｺｰﾄﾞ取得
                Result := FieldByName('NCode').AsFloat;
            end;
        end;

    finally
        dQuery.Close();
        dQuery.Free();
    end;
end;
// <191> ADD end

//**********************************************************************
//	Proccess	:	ｾｯｼｮﾝ管理ｽﾄｱﾄﾞの実行	<203> ADD
//	Name		:	S.Suzuki
//	Date		:	2008/05/13
//	Parameter	:	iSyori  0=設定 1=開放
//	Return		:	なし
//	History		:	9999/99/99  X.Xxxxxx
//					XXXXXXXX修正内容
//**********************************************************************
procedure TJNTCRP018001f.SessionPractice(iSyori: Integer);
begin
												// 処理区分
	SPMsHist.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
	SPMsHist.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
    SPMsHist.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;
												// 担当者名称
    SPMsHist.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
    SPMsHist.ParamByName('@pSysCode').AsInteger			:= m_pMyAppRecord^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
    SPMsHist.ParamByName('@pOptCode').AsInteger			:= m_pMyAppRecord^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
    SPMsHist.ParamByName('@pPrgCode').AsInteger			:= m_pMyAppRecord^.m_iProgramCode;

// Delphi10 ST
//    SPMsHist.Prepare();							// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
    SPMsHist.FetchOptions.Items := SPMsHist.FetchOptions.Items - [fimeta];
// Delphi10 ED
    SPMsHist.ExecProc();						// ｽﾄｱﾄﾞ実行
// Delphi10 ST
//	SPMsHist.UnPrepare();						// ﾘｿｰｽを解放する
// Delphi10 ED

	if	m_SyncMaster.m_flgGrpCorp = 1 then		// ｸﾞﾙｰﾌﾟ会計の子会社の場合
	begin
												// 処理区分
		SPMsHistParent.ParamByName('@pSyoriKbn').AsInteger		:= iSyori;
												// 履歴取得区分
		SPMsHistParent.ParamByName('@pMSHistKbn').AsInteger		:= 1;
												// 担当者内部ｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pTanNCode').AsCurrency		:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoNCD;
												// 担当者名称
    	SPMsHistParent.ParamByName('@pTanSimpleName').AsString	:= rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).TantoName;
												// ｼｽﾃﾑｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pSysCode').AsInteger		:= m_pMyAppRecord^.m_iSystemCode;
												// ｵﾌﾟｼｮﾝｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pOptCode').AsInteger		:= m_pMyAppRecord^.m_iOptionCode;
												// 処理ｺｰﾄﾞ
    	SPMsHistParent.ParamByName('@pPrgCode').AsInteger		:= m_pMyAppRecord^.m_iProgramCode;

// Delphi10 ST
//    	SPMsHistParent.Prepare();				// ﾊﾟﾗﾒｰﾀをﾊﾞｲﾝﾄﾞする
        SPMsHistParent.FetchOptions.Items := SPMsHistParent.FetchOptions.Items - [fimeta];
// Delphi10 ED
    	SPMsHistParent.ExecProc();				// ｽﾄｱﾄﾞ実行
// Delphi10 ST
//		SPMsHistParent.UnPrepare();				// ﾘｿｰｽを解放する
// Delphi10 ED
	end;
end;


//**********************************************************************
//*		Proccess	:	実在契約情報ChangeNodeExｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<205>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2008/08/25
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiChangeNodeEx(
  Sender: TObject);
begin
// <222> DEL start
{
    // 工事の場合
    if (m_pMyAppRecord.m_sParameter = '1') then
    begin
}
// <222> DEL end
//        // 受注連動を採用している場合
//		if (MasterInfo_DMemDataKojKbn17.AsInteger = 1) or (MasterInfo_DMemDataKojKbn18.AsInteger = 1) then
//        begin
            // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
            if not ((JKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
               (JKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
            begin
    	        EnableKeiyakuListClm(True,0);   	// 入力可
            end
            else
            begin
    	        EnableKeiyakuListClm(False,0);		// 入力不可
            end;

//        end;
// <222> DEL    end;
//<TAX> ADD St
    // F2 上段コピー表示
    dspContCopy(TdxDbGrid(Sender));
    // F3 再計算表示
    dspTaxCalc(TdxDBGrid(Sender));
//<TAX> ADD Ed
end;

//**********************************************************************
//*		Proccess	:	合計契約情報ChangeNodeExｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<205>
//*		Name		:	T.Miyagit(RIT)
//*		Date		:	2008/08/25
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_KeiChangeNodeEx(Sender: TObject);
begin
// <222> DEL start
{
    // 工事の場合
    if (m_pMyAppRecord.m_sParameter = '1') then
    begin
}
// <222> DEL end
//        // 受注連動を採用している場合
//		if (MasterInfo_DMemDataKojKbn17.AsInteger = 1) or (MasterInfo_DMemDataKojKbn18.AsInteger = 1) then
//        begin
            // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
            if not ((GKeiyaku_DMemData.FieldByName('OrgNo').AsFloat > 0) and
               (GKeiyaku_DMemData.FieldByName('InpType').AsInteger > 0)) then
            begin
    	        EnableKeiyakuListClm(True,1);   	// 入力可
            end
            else
            begin
    	        EnableKeiyakuListClm(False,1);		// 入力不可
            end;
//        end;
// <222> DEL    end;
//<TAX> ADD St
    // F2 上段コピー表示
    dspContCopy(TdxDbGrid(Sender));
    // F3 再計算表示
    dspTaxCalc(TdxDBGrid(Sender));
//<TAX> ADD Ed
end;

//**********************************************************************
//  Proccess	:	契約情報の入力切り替え <206>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2008/08/25
//	Parameter 	: 	bEnabled	T: 入力可 F: 入力不可
//              :   iFlg        0: 実在   1: 合計
//	Retrun	  	:
//	Comment		:	入力制御
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//***********************************************************************
procedure TJNTCRP018001f.EnableKeiyakuListClm(bEnabled: Boolean; iFlg: Integer);
//<280> ADD St
var
    bTaxEnabled : Boolean;
//<280> ADD Ed
begin
    bTaxEnabled := bEnabled and (m_iAccProKbn <> 0);  //<280> ADD

    if iFlg = 0 then
    begin
	    { 実在契約情報ｸﾞﾘｯﾄﾞ }
        Jituzai_DdxDBGrid_KeiContDate.ReadOnly          := not bEnabled;
        Jituzai_DdxDBGrid_KeiContDate.DisableEditor     := not bEnabled;
        Jituzai_DdxDBGrid_KeiContDate.TabStop           := bEnabled;

        Jituzai_DdxDBGrid_KeiContNo.ReadOnly            := not bEnabled;
        Jituzai_DdxDBGrid_KeiContNo.DisableEditor       := not bEnabled;
        Jituzai_DdxDBGrid_KeiContNo.TabStop             := bEnabled;

        Jituzai_DdxDBGrid_KeiContMoney.ReadOnly         := not bEnabled;
        Jituzai_DdxDBGrid_KeiContMoney.DisableEditor    := not bEnabled;
        Jituzai_DdxDBGrid_KeiContMoney.TabStop          := bEnabled;

        Jituzai_DdxDBGrid_KeiDummyTax_Rate.ReadOnly     := not bEnabled;
        Jituzai_DdxDBGrid_KeiDummyTax_Rate.DisableEditor := not bEnabled;
        Jituzai_DdxDBGrid_KeiDummyTax_Rate.TabStop      := bEnabled;
//<280> MOD St
{
        Jituzai_DdxDBGrid_KeiTax_Rate.ReadOnly          := not bEnabled;
        Jituzai_DdxDBGrid_KeiTax_Rate.DisableEditor     := not bEnabled;
        Jituzai_DdxDBGrid_KeiTax_Rate.TabStop           := bEnabled;
}
        Jituzai_DdxDBGrid_KeiTax_Rate.ReadOnly          := not bTaxEnabled;
        Jituzai_DdxDBGrid_KeiTax_Rate.DisableEditor     := not bTaxEnabled;
        Jituzai_DdxDBGrid_KeiTax_Rate.TabStop           := bTaxEnabled;
//<280> MOD Ed
{
        Jituzai_DdxDBGrid_KeiTax_RateName.ReadOnly      := not bEnabled;
        Jituzai_DdxDBGrid_KeiTax_RateName.DisableEditor := not bEnabled;
        Jituzai_DdxDBGrid_KeiTax_RateName.TabStop       := bEnabled;
}
//<280> MOD St
{
        Jituzai_DdxDBGrid_KeiSales_Tax.ReadOnly         := not bEnabled;
        Jituzai_DdxDBGrid_KeiSales_Tax.DisableEditor    := not bEnabled;
        Jituzai_DdxDBGrid_KeiSales_Tax.TabStop          := bEnabled;
}
        Jituzai_DdxDBGrid_KeiSales_Tax.ReadOnly         := not bTaxEnabled;
        Jituzai_DdxDBGrid_KeiSales_Tax.DisableEditor    := not bTaxEnabled;
        Jituzai_DdxDBGrid_KeiSales_Tax.TabStop          := bTaxEnabled;
//<280> MOD Ed
// <212> ADD start
        Jituzai_DdxDBGrid_KeiCostomerCode.ReadOnly      := not bEnabled;
        Jituzai_DdxDBGrid_KeiCostomerCode.DisableEditor := not bEnabled;
        Jituzai_DdxDBGrid_KeiCostomerCode.TabStop       := bEnabled;
// <212> ADD end
    end
    else
    begin
        { 合計契約情報ｸﾞﾘｯﾄﾞ }
        Goukei_DdxDBGrid_KeiContDate.ReadOnly           := not bEnabled;
        Goukei_DdxDBGrid_KeiContDate.DisableEditor      := not bEnabled;
        Goukei_DdxDBGrid_KeiContDate.TabStop            := bEnabled;

        Goukei_DdxDBGrid_KeiContNo.ReadOnly             := not bEnabled;
        Goukei_DdxDBGrid_KeiContNo.DisableEditor        := not bEnabled;
        Goukei_DdxDBGrid_KeiContNo.TabStop              := bEnabled;

        Goukei_DdxDBGrid_KeiContMoney.ReadOnly          := not bEnabled;
        Goukei_DdxDBGrid_KeiContMoney.DisableEditor     := not bEnabled;
        Goukei_DdxDBGrid_KeiContMoney.TabStop           := bEnabled;

        Goukei_DdxDBGrid_KeiDummyTax_Rate.ReadOnly      := not bEnabled;
        Goukei_DdxDBGrid_KeiDummyTax_Rate.DisableEditor := not bEnabled;
        Goukei_DdxDBGrid_KeiDummyTax_Rate.TabStop       := bEnabled;
//<280> MOD St
{
        Goukei_DdxDBGrid_KeiTax_Rate.ReadOnly           := not bEnabled;
        Goukei_DdxDBGrid_KeiTax_Rate.DisableEditor      := not bEnabled;
        Goukei_DdxDBGrid_KeiTax_Rate.TabStop            := bEnabled;
}
        Goukei_DdxDBGrid_KeiTax_Rate.ReadOnly           := not bTaxEnabled;
        Goukei_DdxDBGrid_KeiTax_Rate.DisableEditor      := not bTaxEnabled;
        Goukei_DdxDBGrid_KeiTax_Rate.TabStop            := bTaxEnabled;
//<280> MOD Ed
{
        Goukei_DdxDBGrid_KeiTax_RateName.ReadOnly       := not bEnabled;
        Goukei_DdxDBGrid_KeiTax_RateName.DisableEditor  := not bEnabled;
        Goukei_DdxDBGrid_KeiTax_RateName.TabStop        := bEnabled;
}
//<280> MOD St
{
        Goukei_DdxDBGrid_KeiSales_Tax.ReadOnly          := not bEnabled;
        Goukei_DdxDBGrid_KeiSales_Tax.DisableEditor     := not bEnabled;
        Goukei_DdxDBGrid_KeiSales_Tax.TabStop           := bEnabled;
}
        Goukei_DdxDBGrid_KeiSales_Tax.ReadOnly          := not bTaxEnabled;
        Goukei_DdxDBGrid_KeiSales_Tax.DisableEditor     := not bTaxEnabled;
        Goukei_DdxDBGrid_KeiSales_Tax.TabStop           := bTaxEnabled;
//<280> MOD Ed
// <212> ADD start
        Goukei_DdxDBGrid_KeiCostomerCode.ReadOnly       := not bEnabled;
        Goukei_DdxDBGrid_KeiCostomerCode.DisableEditor  := not bEnabled;
        Goukei_DdxDBGrid_KeiCostomerCode.TabStop        := bEnabled;
// <212> ADD end
    end;
end;


//**********************************************************************
//*		Proccess	:	契約情報ｺｰﾄﾞｶﾗﾑEditButtonClickｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<212>
//*		Name		:	T.Miyagit(RIT)
//*		Date		:	2008/10/25
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.evtKeiCostomerCodeEditButtonClick(Sender: TObject);
var
    lvExpSend   :  rcJNTExpSend;
    lvExpRecv   :  rcJNTExpRecv;
    iExpRtn     :  Integer;
    CompName    :  String;
//    i           :  Integer;
begin

    CompName    :=  TComponent(Sender).name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec := m_pMyAppRecord;                 // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     := @dbCorp_Select;                 // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     := ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := ComArea.SystemArea.SysColorD;

    lvExpSend.TrRootCaption := '取引先';
    lvExpSend.MasterKbn     := 23;                      // ﾏｽﾀ区分
    lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
    lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
    lvExpSend.WhereStr      := 'MTOKUI.RDelKbn = 0 and MTOKUI.SumKBN = 0 and MTOKUI.TemplateKbn = 0';  //<252> ADD    

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    if iExpRtn <> 1 then
        Exit;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode)) > 0 then
    begin

        if Jituzai_PPanel_Card.Visible  = true then
        begin
            JKeiyaku_DMemData.Edit;
										// 内部ｺｰﾄﾞ
            JKeiyaku_DMemData.FieldByName('CostomerNCode').AsFloat := lvExpRecv.NCode;
										// 外部ｺｰﾄﾞ
            JKeiyaku_DMemData.FieldByName('CostomerGCode').AsString := ComArea.SetDspCodeAttr(lvExpRecv.GCode,                                                                        MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger);
										// 名称
            JKeiyaku_DMemData.FieldByName('CostomerName').AsString := lvExpRecv.NMK;
//   	        Jituzai_DdxDBGrid_Kei.SetFocus;
//            Jituzai_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
        end
        else
        begin
            GKeiyaku_DMemData.Edit;
										// 内部ｺｰﾄﾞ
            GKeiyaku_DMemData.FieldByName('CostomerNCode').AsFloat := lvExpRecv.NCode;
										// 外部ｺｰﾄﾞ
            GKeiyaku_DMemData.FieldByName('CostomerGCode').AsString := ComArea.SetDspCodeAttr(lvExpRecv.GCode,                                                                        MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger);
										// 名称
            GKeiyaku_DMemData.FieldByName('CostomerName').AsString := lvExpRecv.NMK;
//            Goukei_DdxDBGrid_Kei.SetFocus;
//            Goukei_DdxDBGrid_Kei.FocusedColumn := COL_KEIKIN;
        end;
    end;

end;

//**************************************************************************
//	Proccess  	:	契約情報のｺｰﾄﾞｶﾗﾑのGetTextｲﾍﾞﾝﾄ	<212>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2007/10/25
//	Parameter 	: 	Sender
//	Retrun	  	:
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.evtDdxDBGrid_KeiCostomerCodeGetText(
  Sender: TObject; ANode: TdxTreeListNode; var AText: String);
var
	strFormat	: String;					// 形式文字列
begin
                                            // 文字属性以外
   	if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
	begin                                   // 数字
		if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 0 then
		begin
			strFormat := '%d';
		end
		else								// 0つき数字
		begin
											// 桁数分0で埋める
			strFormat := '%.' + IntToStr(MasterInfo_DMemDataCodeDigitTorihiki.AsInteger) + 'd';
		end;

		if (AText <> '') then
		begin
			AText := Format(strFormat, [StrToInt64(Trim(AText))]);
		end;
	end;
end;


//**************************************************************************
//	Proccess  	:	取引先名称取得	<212>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2007/10/25
//	Parameter 	: 	Sender
//	Retrun	  	:
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnGetTOKUNAME(pCODE:Extended;pMKBN:Integer):String;
var
    Qry :TMQuery;
begin

    Result := '';


    Qry := TMQuery.Create (Self);
    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    try
        with Qry do
        begin
            Close;
            SQL.Clear;
            if pMKBN = MKBN_TORIHIKI then // 取引先
            begin
                SQL.Add   ('SELECT Nmk FROM MTOKUI  ');
                SQL.Add   ('WHERE  HojyoKbn1 = 1 AND RDelKbn = 0 ');
                SQL.Add   ('AND NCode = :pCode');
//<255> DEL                ParamByName ('pCode').AsFloat  := pCODE;
                ParamByName ('pCode').AsString  := FormatFloat('0',pCODE);  //<255> ADD
            end;

            Open;						// ｸｴﾘの開始

            if EOF = false then
                Result := FieldByName('Nmk').asString;
        end;
    finally
        Qry.Close;
        Qry.Free;
    end;

end;

//**************************************************************************
//	Proccess  	:	コード取得	<212>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2007/10/25
//	Parameter 	: 	Sender
//	Retrun	  	:
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnGetDispCode(pCODE:String;pMKBN:Integer):String;
var
    stCode  : String;
    iCode   : Integer;
    iCut    : Integer;
begin
    stCode := pCODE;

    if pMKBN = MKBN_TORIHIKI then // 取引先
    begin
        if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
        begin
            if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger = 1 then
            begin
                if stCode <> '' then
                begin
                    iCut := 16 - MasterInfo_DMemDataCodeDigitTorihiki.AsInteger;
                    System.Delete(stCode, 1, iCut);
                end;
            end
            else
            begin
                if pCODE <> '' then
                begin
                    iCode := StrToInt64(Trim(stCode));
                    stCode := IntToStr(iCode);
                end;
            end;
        end;
    end;

    Result := stCode;

end;

//**********************************************************************
//*		Proccess	:	入金情報ｺｰﾄﾞｶﾗﾑEditButtonClickｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<212>
//*		Name		:	T.Miyagit(RIT)
//*		Date		:	2008/10/25
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.evtNyuCostomerCodeEditButtonClick(
  Sender: TObject);
var
    lvExpSend   :  rcJNTExpSend;
    lvExpRecv   :  rcJNTExpRecv;
    iExpRtn     :  Integer;
    CompName    :  String;
//    i           :  Integer;
begin

    CompName    :=  TComponent(Sender).name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec := m_pMyAppRecord;                 // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     := @dbCorp_Select;                 // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     := ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := ComArea.SystemArea.SysColorD;

    lvExpSend.TrRootCaption := '取引先';
    lvExpSend.MasterKbn     := 23;                      // ﾏｽﾀ区分
    lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
    lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO
    lvExpSend.WhereStr      := 'MTOKUI.RDelKbn = 0 and MTOKUI.SumKBN = 0 and MTOKUI.TemplateKbn = 0';  //<252> ADD    

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    if iExpRtn <> 1 then
        Exit;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode)) > 0 then
    begin

        if Jituzai_PPanel_Card.Visible  = true then
        begin
            JNyukin_DMemData.Edit;
										// 内部ｺｰﾄﾞ
            JNyukin_DMemData.FieldByName('CostomerNCode').AsFloat := lvExpRecv.NCode;
										// 外部ｺｰﾄﾞ
            JNyukin_DMemData.FieldByName('CostomerGCode').AsString := ComArea.SetDspCodeAttr(lvExpRecv.GCode,                                                                        MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger);
										// 名称
            JNyukin_DMemData.FieldByName('CostomerName').AsString := lvExpRecv.NMK;
//   	        Jituzai_DdxDBGrid_Nyu.SetFocus;
//            Jituzai_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
        end
        else
        begin
            GNyukin_DMemData.Edit;
										// 内部ｺｰﾄﾞ
            GNyukin_DMemData.FieldByName('CostomerNCode').AsFloat := lvExpRecv.NCode;
										// 外部ｺｰﾄﾞ
            GNyukin_DMemData.FieldByName('CostomerGCode').AsString := ComArea.SetDspCodeAttr(lvExpRecv.GCode,                                                                        MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,MasterInfo_DMemDataCodeAttrTorihiki.AsInteger);
										// 名称
            GNyukin_DMemData.FieldByName('CostomerName').AsString := lvExpRecv.NMK;
//            Goukei_DdxDBGrid_Nyu.SetFocus;
//            Goukei_DdxDBGrid_Nyu.FocusedColumn := COL_YOTEIBI;
        end;
    end;


end;


//**********************************************************************
//  Proccess	:	入金情報の入力切り替え <212>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2008/10/25
//	Parameter 	: 	bEnabled	T: 入力可 F: 入力不可
//              :   iFlg        0: 実在   1: 合計
//	Retrun	  	:
//	Comment		:	入力制御
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//***********************************************************************
procedure TJNTCRP018001f.EnableNyukinClm(bEnabled: Boolean; iFlg: Integer);
begin
    if iFlg = 0 then
    begin
	    { 実在入金情報ｸﾞﾘｯﾄﾞ }
        Jituzai_DdxDBGrid_NyuContDate.ReadOnly           := not bEnabled;
        Jituzai_DdxDBGrid_NyuContDate.DisableEditor      := not bEnabled;
        Jituzai_DdxDBGrid_NyuContDate.TabStop            := bEnabled;

        Jituzai_DdxDBGrid_NyuContMoney.ReadOnly          := not bEnabled;
        Jituzai_DdxDBGrid_NyuContMoney.DisableEditor     := not bEnabled;
        Jituzai_DdxDBGrid_NyuContMoney.TabStop           := bEnabled;

        Jituzai_DdxDBGrid_NyuCostomerCode.ReadOnly      := not bEnabled;
        Jituzai_DdxDBGrid_NyuCostomerCode.DisableEditor := not bEnabled;
        Jituzai_DdxDBGrid_NyuCostomerCode.TabStop       := bEnabled;
    end
    else
    begin
        { 合計契約情報ｸﾞﾘｯﾄﾞ }
        Goukei_DdxDBGrid_NyuContDate.ReadOnly           := not bEnabled;
        Goukei_DdxDBGrid_NyuContDate.DisableEditor      := not bEnabled;
        Goukei_DdxDBGrid_NyuContDate.TabStop            := bEnabled;

        Goukei_DdxDBGrid_NyuContMoney.ReadOnly          := not bEnabled;
        Goukei_DdxDBGrid_NyuContMoney.DisableEditor     := not bEnabled;
        Goukei_DdxDBGrid_NyuContMoney.TabStop           := bEnabled;

        Goukei_DdxDBGrid_NyuCostomerGCode.ReadOnly      := not bEnabled;
        Goukei_DdxDBGrid_NyuCostomerGCode.DisableEditor := not bEnabled;
        Goukei_DdxDBGrid_NyuCostomerGCode.TabStop       := bEnabled;
    end;
end;

//**********************************************************************
//*		Proccess	:	実在入金情報ChangeNodeExｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<212>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2008/10/25
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Goukei_DdxDBGrid_NyuChangeNodeEx(Sender: TObject);
begin
// <222> DEL start
{
    // 工事の場合
    if (m_pMyAppRecord.m_sParameter = '1') then
    begin
}
// <222> DEL end
        // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
        if not ((GNyukin_DMemData.FieldByName('OrgNo').AsFloat > 0) and
               (GNyukin_DMemData.FieldByName('InpType').AsInteger > 0)) then
        begin
            EnableNyukinClm(True,1);
        end
        else
        begin
            EnableNyukinClm(False,1);
        end;
// <222> DEL    end;
end;


//**********************************************************************
//*		Proccess	:	実在入金情報ChangeNodeExｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<212>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2008/10/25
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_NyuChangeNodeEx(
  Sender: TObject);
begin
// <222> DEL start
{
    // 工事の場合
    if (m_pMyAppRecord.m_sParameter = '1') then
    begin
}
// <222> DEL end
        // 原票No,仕訳入力形式有りの場合に契約情報グリッドを入力不可に設定
        if not ((JNyukin_DMemData.FieldByName('OrgNo').AsFloat > 0) and
               (JNyukin_DMemData.FieldByName('InpType').AsInteger > 0)) then
        begin
            EnableNyukinClm(True,0);
        end
        else
        begin
            EnableNyukinClm(False,0);
        end;
// <222> DEL    end;
end;

//**************************************************************************
//	Component	:	グループ別セキュリティボタン <217>
//	Event		:	OnClick
//	Name		:
//**************************************************************************
procedure TJNTCRP018001f.B_GrpSecClick(Sender: TObject);
var
	cDlg	: TJNTCRP004010IF;
	DlgPrm	: TJNTCRP004010Prm;
//	iResult	: Integer;

begin

	cDlg := TJNTCRP004010IF.Create();
	DlgPrm := TJNTCRP004010Prm.CreateParam();

	try
		cDlg.Init(Self, pointer(m_pMyAppRecord));
		DlgPrm.iMasDefKbn	:= m_nMasterDivision;			//	ﾃﾞﾌｫﾙﾄ表示ﾏｽﾀ区分
		DLGPrm.pApRec		:= pointer( m_pMyAppRecord );	//	TMjsAppRecordﾎﾟｲﾝﾀ
		DLGPrm.pJNTArea		:= @m_cJNTArea;					//	TJNTCommonﾎﾟｲﾝﾀ

		cDlg.DoDlg(DlgPrm);

	finally
		if DlgPrm <> nil then
		begin
			DlgPrm.Free;
		end;
		if cDlg <> nil then
		begin
			cDlg.Term;
			cDlg.Free;
		end;
	end;
end;

//**************************************************************************
//	Proccess  	:	売上自動振替区分チェック	<221>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2008/02/03
//	Parameter 	: 	pCODE : 工事内部コード
//	Retrun	  	:   0:該当なし 1:該当あり 9:エラー
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnCheckDetailKbn2(pCODE:Integer):Integer;
var
//    Qry         : TMQuery;
//    sSQL        : String;
    iRet        : Integer;
//    sMessage    : String;
begin
    Result := 0;
    iRet := 0;
    try
        SPMP_KJURDATA.Connection := dbCorp_Select;
        //SPMP_KJURDATA.SessionName := dbCorp_Select.SessionName;

        // ストアド呼び出し
        with SPMP_KJURDATA do
        begin
            ParamByName('@pKjNCd').AsFloat        	:= pCODE;
            ParamByName('@RETURN_VALUE').AsInteger  := iRet;
// Delphi10 ST
            FetchOptions.Items := FetchOptions.Items - [fimeta];
// Delphi10 ED
            ExecProc;                       // ｽﾄｱﾄﾞ実行
                                            // 結果
            iRet := ParamByName('@RETURN_VALUE').AsInteger;

            if iRet = 1 then
                Result := 1;
        end;
    except
        // 例外発生
//        strErr := '例外発生(MP_SEL_CHK_KJURDATA)';
        Result := 9;
        Exit;
    end;
end;

//**************************************************************************
//	Proccess  	:	工事/プロジェクト外部コードを取得 <225>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2009/07/21
//	Parameter 	: 	exNCode : 内部コード
//	Retrun	  	:   外部コード
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnGetKojiGCode(exNCode: Extended): String;
var
	Query	:	TMQuery;
begin
	result := '';

	Query := TMQuery.Create(Self);					        // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, Query);    // DBとMQueryの接続

	with Query do
	begin
		try
			Close;
			SQL.Clear;

			SQL.Add('Select GCode from HojyoMA');
			SQL.Add('Where MasterKbn = :pMKBN and NCode= :prexNCode and RDelKbn=0');
            SetFld('pMKBN'   ).asInteger := m_nMasterDivision;
//<255> DEL			SetFld('prexNCode').AsFloat := exNCode;
			SetFld('prexNCode').AsString := FormatFloat('0',exNCode);  //<255> ADD

			Open;

			if Eof = false then
			begin
				result :=  FieldByName('GCode').asString;;
				exit;
			end;

		finally
            Close;
			Free;
		end;
	end;
end;

//**************************************************************************
//	Proccess  	:	申請書情報の連動区分更新 <225>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2009/07/21
//	Parameter 	: 	objKey  : 申請書情報ｷｰ
//	Retrun	  	:   正常 or 異常
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.UpdateFLWSinsei(objKey: TFLWSinseiInfoKeys): Boolean;
var
    cMasterFLWSinseiExpIF : TFLWMasterSinseiExgIF;
    iResult    : Integer;
begin
    Result := true;

                                            // BPL管理構造体、ｵｰﾌﾟﾝ済み会社DB
    cMasterFLWSinseiExpIF := TFLWMasterSinseiExgIF.Create(m_pMyAppRecord, dbCorp_Select);

                                            // 更新
    iResult := cMasterFLWSinseiExpIF.UpdConnectFlg(objKey);
    if iResult < 0 then
        Result := false;

    cMasterFLWSinseiExpIF.Free;                // 申請ﾃﾞｰﾀIFｵﾌﾞｼﾞｪｸﾄの破棄
end;

//**************************************************************************
//	Proccess	:	契約・入金情報の存在チェック <225>
//	Name		:	T.Miyagi(RIT)
//	Date		:	2009.07.23
//	Parameter	:	strNCode    工事内部コード
//              :	strNCode    工事内部コード
//	Parameter	:	iSumKbn
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnKeiyakuNyukinDataCheck(exNCode: Extended; iInfoKbn: Integer): Boolean;
var
	qmQuery	  : TMQuery;
begin
    Result := false;
	qmQuery	:= TMQuery.Create(Self);
	MDataModule^.SetDBInfoToQuery(dbCorp_Select, qmQuery);

	with qmQuery do
	begin
        try
            Close();
            SQL.Clear();
            SQL.Add('Select ContDate from KojiInfo2 ');
            SQL.Add('Where MasterKbn = :pMKBN and NCode = :pNCode and InfoKbn= :pInfoKbn ');
            SetFld('pMKBN'   ).asInteger    := m_nMasterDivision;
//<255> DEL            SetFld('pNCode').AsFloat	    := exNCode;
            SetFld('pNCode').AsString	    := FormatFloat('0',exNCode);  //<255> ADD
            SetFld('pInfoKbn').asInteger    := iInfoKbn;
            Open;
            if EOF = false then
            begin
                Result	:= true;
            end;
        finally
            Close;
            Free;
        end;
    end;
end;

//**************************************************************************
//	Proccess	:	コントロールの文字色変更 <225>
//	Name		:	T.Miyagi(RIT)
//	Date		:	2009.07.23
//	Parameter	:
//	Retrun		:
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
procedure TJNTCRP018001f.FontColorChange();
var
    i       : Integer;
//    iCount  : Integer;
begin
    Jituzai_ETEdit_LongName.Font.Color 			:= clWindowText;
	Jituzai_LLabel_LongName.Font.Color 			:= clWindowText;
	Jituzai_ETEdit_SimpleName.Font.Color 		:= clWindowText;
	Jituzai_LLabel_SimpleName.Font.Color 		:= clWindowText;
	Jituzai_ETEdit_RenChar.Font.Color 			:= clWindowText;
	Jituzai_LLabel_RenChar.Font.Color 			:= clWindowText;
	Jituzai_LLabel_StartDate.Font.Color 		:= clWindowText;
	Jituzai_EDEdit_StartDate.Font.Color 		:= clWindowText;
	Jituzai_LLabel_StartDate.Font.Color 		:= clWindowText;
	Jituzai_EDEdit_EndDate.Font.Color 			:= clWindowText;
//<FREE> ADD St
	MLabel12.Font.Color 	                	:= clWindowText;
	Jituzai_EDEdit_JStartDate.Font.Color 		:= clWindowText;
	Jituzai_EDEdit_JEndDate.Font.Color 			:= clWindowText;
//<FREE> ADD Ed
	Jituzai_LLabel_PersonCode.Font.Color  		:= clWindowText;
	Jituzai_ETEdit_PersonCode.Font.Color    	:= clWindowText;
	Jituzai_ENEdit_PersonCode.Font.Color    	:= clWindowText;
	Jituzai_LLabel_CostomerCode.Font.Color  	:= clWindowText;
	Jituzai_ETEdit_CustomerCode.Font.Color  	:= clWindowText;
	Jituzai_ENEdit_CustomerCode.Font.Color  	:= clWindowText;
	Jituzai_LLabel_SeshuCode.Font.Color  		:= clWindowText;
	Jituzai_ETEdit_SeshuCode.Font.Color	 		:= clWindowText;
	Jituzai_ENEdit_SeshuCode.Font.Color 		:= clWindowText;
	Jituzai_LLabel_SekouBmnCode.Font.Color  	:= clWindowText;
	Jituzai_ETEdit_SekouBmnCode.Font.Color  	:= clWindowText;
	Jituzai_ENEdit_SekouBmnCode.Font.Color  	:= clWindowText;
	Jituzai_LLabel_SekouPersonCode.Font.Color  	:= clWindowText;
	Jituzai_ETEdit_SekouPersonCode.Font.Color   := clWindowText;
	Jituzai_ENEdit_SekouPersonCode.Font.Color   := clWindowText;
	Jituzai_LLabel_UkeoiCode.Font.Color 		:= clWindowText;
	Jituzai_ENEdit_UkeoiKbn.Font.Color  		:= clWindowText;
	Jituzai_LLabel_BmnCode.Font.Color  			:= clWindowText;
	Jituzai_ETEdit_BmnCode.Font.Color   		:= clWindowText;
	Jituzai_ENEdit_BmnCode.Font.Color   		:= clWindowText;
	Jituzai_LLabel_ZipCode1.Font.Color  		:= clWindowText;
	Jituzai_ENEdit_ZipCode1.Font.Color  		:= clWindowText;
	Jituzai_ENEdit_ZipCode2.Font.Color  		:= clWindowText;
	Jituzai_LLabel_Address.Font.Color   		:= clWindowText;
	Jituzai_ETEdit_Address1.Font.Color  		:= clWindowText;
	Jituzai_ETEdit_Address2.Font.Color     		:= clWindowText;
	Jituzai_LLabel_TelNo.Font.Color     		:= clWindowText;
	Jituzai_ETEdit_TelNo.Font.Color     		:= clWindowText;
	Jituzai_LLabel_FaxNo.Font.Color     		:= clWindowText;
	Jituzai_ETEdit_FaxNo.Font.Color     		:= clWindowText;
	Jituzai_LLabel_SalesBase.Font.Color     	:= clWindowText;
	Jituzai_ENEdit_SalesBase.Font.Color     	:= clWindowText;
	Jituzai_ETEdit_BIKO.Font.Color  			:= clWindowText;
	MLabel54.Font.Color             			:= clWindowText;
	Jituzai_ETEdit_Gaiyou.Font.Color    		:= clWindowText;
	MLabel38.Font.Color                 		:= clWindowText;
    // プロジェクト分類
    for i := 1 to  5 do
    begin
        TMLabel(MJSFindCtrl(Self, 'Jituzai_LLabel_BunTitl' + IntToStr(i))).Font.Color   := clWindowText;
        TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_BunCd' + IntToStr(i))).Font.Color   := clWindowText;
    end;
// <234> ADD start
    for i := 1 to  10 do
    begin
        TMLabel(MJSFindCtrl(Self, 'Jituzai_LLabel_SegTitl' + IntToStr(i))).Font.Color   := clWindowText;
        TMTxtEdit(MJSFindCtrl(Self, 'Jituzai_ETEdit_SegCd' + IntToStr(i))).Font.Color   := clWindowText;
    end;
// <234> ADD end
//<TAX> ADD St
    lblJTax.Font.Color      := clWindowText;
    rdjTaxIn.Font.Color     := clWindowText;
    rdjTaxOut.Font.Color    := clWindowText;
//<TAX> ADD Ed
    // タブ
//<289> MOD St
{
    Jituzai_PMTab.Items[0].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[1].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[3].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[4].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[5].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[6].Font.Color    := clWindowText;
}
    Jituzai_PMTab.Items[PAGE_KIHON].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[PAGE_KOJI].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[PAGE_KEIYAKU].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[PAGE_NYUKIN].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[PAGE_BIKOU].Font.Color    := clWindowText;
    Jituzai_PMTab.Items[PAGE_SONOTA].Font.Color    := clWindowText;
//<289> MOD Ed
    MemPost_Sw := 1;  // Postイベントでチェックは行わないようにする <TAX> ADD
    // 契約情報
    if (JKeiyaku_DMemData.Active = true) then
    begin
        JKeiyaku_DMemData.DisableControls;
        if (JKeiyaku_DMemData.RecordCount <> 0) then
            JKeiyaku_DMemData.First;
        while ( JKeiyaku_DMemData.Eof = false ) do
        begin
            JKeiyaku_DMemData.Edit;
            JKeiyaku_DMemDataFontColorDate.AsInteger    := 0;
            JKeiyaku_DMemDataFontColorNo.AsInteger     := 0;
            JKeiyaku_DMemDataFontColorMoney.AsInteger   := 0;
            JKeiyaku_DMemDataFontColorTax.AsInteger     := 0;
            JKeiyaku_DMemDataFontColorTaxRete.AsInteger := 0;
            JKeiyaku_DMemDataFontColorTaxReteName.AsInteger := 0;  //<227> ADD
            JKeiyaku_DMemDataFontColorTaxRateName2.AsInteger := 0;  //<TAX> ADD
            JKeiyaku_DMemData.Post;
            JKeiyaku_DMemData.Next;
        end;
        if (JKeiyaku_DMemData.RecordCount <> 0) then
            JKeiyaku_DMemData.First;
        JKeiyaku_DMemData.EnableControls;
    end;
    // 入金情報
    if (JNyukin_DMemData.Active = true) then
    begin
        JNyukin_DMemData.DisableControls;
        if (JNyukin_DMemData.RecordCount <> 0) then
            JNyukin_DMemData.First;
        while ( JNyukin_DMemData.Eof = false ) do
        begin
            JNyukin_DMemData.Edit;
            JNyukin_DMemDataFontColorDate.AsInteger	:= 0;
            JNyukin_DMemDataFontColorMony.AsInteger	:= 0;
            JNyukin_DMemData.Post;
			JNyukin_DMemData.Next;
        end;
        if (JNyukin_DMemData.RecordCount <> 0) then
            JNyukin_DMemData.First;
        JNyukin_DMemData.EnableControls;
    end;
    MemPost_Sw := 0;  // <TAX> ADD
end;

//**********************************************************************
//*		Proccess	:	実在入金情報CustomDrawCellｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<225>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2009/07/21
//*		Return		:
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_NyuCustomDrawCell(
  Sender: TObject; ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
    vData                   : Variant;
begin
   if AColumn = Jituzai_DdxDBGrid_NyuContDate then
   begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_NyuFontColorDate.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
   end;

   if AColumn = Jituzai_DdxDBGrid_NyuContMoney then
   begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_NyuFontColorMony.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
   end;
end;

//**********************************************************************
//*		Proccess	:	実在契約情報CustomDrawCellｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ　<225>
//*		Name		:	T.Miyagi(RIT)
//*		Date		:	2009/07/21
//*		Return		:
//**********************************************************************
procedure TJNTCRP018001f.Jituzai_DdxDBGrid_KeiCustomDrawCell(
  Sender: TObject; ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
    vData                   : Variant;
//<TAX> ADD St
    oGrid : TdxDbGrid;
    //======================
    // フォントカラーセット
    //======================
    procedure setColor();
    begin
        if vData <> FONTCOLOR_WINDOWTEXT then
        begin
            AFont.Color := GetFontColor(vData);
        end;
    end;
//<TAX> ADD Ed
begin
//<TAX> MOD St
    oGrid := TdxDbGrid(Sender);

    if oGrid.Columns[AColumn.Index].FieldName = 'ContDate' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorDate').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;

    if oGrid.Columns[AColumn.Index].FieldName = 'ContNo' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorNo').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;

    if oGrid.Columns[AColumn.Index].FieldName = 'ContMoney' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorMoney').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;

    if oGrid.Columns[AColumn.Index].FieldName = 'Sales_Tax' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorTax').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;

    if oGrid.Columns[AColumn.Index].FieldName = 'Tax_Rate' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorTaxRete').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;

    if oGrid.Columns[AColumn.Index].FieldName = 'Tax_RateName' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorTaxReteName').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;

    if oGrid.Columns[AColumn.Index].FieldName = 'Tax_RateName2' then
    begin
       vData     := ANode.Values[oGrid.ColumnByFieldName('FontColorTaxRateName2').Index];
       if VarType(vData) = varInteger then
       begin
           setColor();
       end;
    end;
{
    if AColumn = Jituzai_DdxDBGrid_KeiContDate then
    begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_KeiFontColorDate.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
    end;
    if AColumn = Jituzai_DdxDBGrid_KeiContNo then
    begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_KeiFontColortNo.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
    end;
    if AColumn = Jituzai_DdxDBGrid_KeiContMoney then
    begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_KeiFontColorMoney.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
    end;
    if AColumn = Jituzai_DdxDBGrid_KeiSales_Tax then
    begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_KeiFontColorTax.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
    end;
    if AColumn = Jituzai_DdxDBGrid_KeiTax_Rate then
    begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_KeiFontColorTaxRete.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
    end;
    //<227> ADD St                                    　
    if AColumn = Jituzai_DdxDBGrid_KeiTax_RateName then
    begin
       vData     := ANode.Values[Jituzai_DdxDBGrid_KeiFontColorTaxReteName.Index];
       if VarType(vData) = varInteger then
       begin
           // 文字を赤
           if vData = 1 then
               AFont.Color          := clRed
           else
               AFont.Color          := clWindowText;
       end;
    end;
    //<227> ADD Ed
 }
//<TAX> MOD Ed
end;

//**************************************************************************
//	Proccess  	:	契約年月日内部月変更チェック  <235>
//	Name	  	:	T.Miyagi(RIT)
//	Date	  	:	2010/03/08
//	Parameter 	: 	pBeforeDate ：変更前年月日
//	                pAfterDate  ：変更後年月日
//	Retrun	  	:   True:変更あり False:変更なし
//	History	　	:	2000/99/99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnKeiyakuDateCheck(pBeforeDate: TDateTime; pAfterDate: TDateTime):Boolean;
var
	iBeforeGYear,
	iBeforeGMonth,
	iBeforeGDay,
	iBeforeNMonth,
	iAfterGYear,
	iAfterGMonth,
	iAfterGDay,
	iAfterNMonth :	Integer;
begin
    Result := False;

    // 工事完成原価自動仕訳と工事完成売上自動仕訳が採用されていない場合
    if (m_KojHurikaeKbn = 0) and (m_KojKbn = 0) then Exit;

    // 外部年取得
    iBeforeGYear    := MjsDateCtrl.MjsYear(pBeforeDate);
    iAfterGYear     := MjsDateCtrl.MjsYear(pAfterDate);
    // 外部月取得
	iBeforeGMonth   := MjsDateCtrl.MjsMonth(pBeforeDate);
	iAfterGMonth    := MjsDateCtrl.MjsMonth(pAfterDate);
    // 外部日取得
	iBeforeGDay     := MjsDateCtrl.MjsDay(pBeforeDate);
	iAfterGDay      := MjsDateCtrl.MjsDay(pAfterDate);

	// 内部月取得
	iBeforeNMonth   := MasMonth.GetMonth(iBeforeGYear,iBeforeGMonth,iBeforeGDay);
	iAfterNMonth    := MasMonth.GetMonth(iAfterGYear,iAfterGMonth,iAfterGDay);

    // 会計期間外から会計期間外の場合は
    if ((iBeforeNMonth = 0) or (iBeforeNMonth = -1)) and
       ((iAfterNMonth  = 0) or (iAfterNMonth  = -1)) then
        exit;

    // 比較する 戻り値：未来年月日　-1　過去年月日　0
    if (iBeforeNMonth <> iAfterNMonth) then
        Result := True;
end;

//**************************************************************************
//	Proccess	:	外部コード設定 // <240> ADD
//	Name		:	T.Ogawa(RIT)
//	Date		:	2010.06.24
//	Parameter	:   pGCode  外部コード
//	         	:   pAttr   属性
//	         	:   pDigit  桁数
//              :   pKbn    整形 0:なし 1:あり
//	Retrun		:   外部コード
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
function TJNTCRP018001f.fnSetGCode(pGCode: String; pAttr: Integer; pDigit: Integer; pKbn: Integer): String;
var
	stCode		:	String;
	iCut		:	Integer;
	iCode		:	Int64;
    iDigit      :   Integer;  //<245> ADD
begin
	result := '';
    stCode := pGCode;

    if pAttr <> 2 then
    begin
        if pAttr = 1 then
        begin
            if stCode <> '' then
            begin
                iCut := 16 - pDigit;
                System.Delete(stCode, 1, iCut);
                if pKbn = 1 then
                begin
                    for iCut := pDigit + 1 to 10 do
                        stCode := ' ' + stCode;
                end;
            end;
        end
        else
        begin
            if stCode <> '' then
            begin
                iCode := StrToInt64(Trim(stCode));
                stCode := IntToStr(iCode);
//<245> ADD St
                iDigit := Length(stCode);
                if pKbn = 1 then
                begin
                    for iCut := iDigit + 1 to 10 do
                        stCode := ' ' + stCode;
                end;
//<245> ADD Ed
            end;
        end;
    end;
	result := stCode;
end;

//<265>↓↓Add
//**************************************************************************
//	Proccess	:	特殊ﾊﾟﾗﾒｰﾀﾌｧｲﾙの読込
//	Name		:	T.Otahara(MSI)
//	Date		:	2011.06.27
//	Parameter	:
//              :
//	Retrun		:   True=ﾊﾟﾗﾒｰﾀ取得, False=ﾊﾟﾗﾒｰﾀ取得できず
//	History		:	9999.99.99	X.Xxxxxx
//					XXXXXXXX修正内容
//**************************************************************************
// <277> MOD st 引数追加	function TJNTCRP018001f.fnParaFileRead(): Boolean;
function TJNTCRP018001f.fnParaFileRead(aGetKbn: Integer): Boolean;	// <277> MOD ed
var
    sFileName   : String;       // APGﾌｧｲﾙ名
    IniFile     : TIniFile;     // ﾌｧｲﾙ読込用のｵﾌﾞｼﾞｪｸﾄ
    iLCnt       : Integer;      // ﾙｰﾌﾟ変数
    sSecName    : String;       // APGﾌｧｲﾙのｾｸｼｮﾝ名
begin
    Result := False;

    if Assigned(m_pMyAppRecord) = False then
        Exit;

    if Assigned(m_pMyAppRecord^.m_pCommonArea) = False then
        Exit;

    sFileName := rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysRoot + '\JNT\PRG\JNTCRP018001.APG';
    if FileExists(sFileName) = False then
        Exit;

    IniFile := TIniFile.Create(sFileName);
    try
        if Assigned(IniFile) = False then
            Exit;

// <277> ADD st
        case aGetKbn of
		GETKBN_SORTKEY:
        	begin
// <277> ADD ed
                // ﾊﾟﾗﾒｰﾀを取得
                for iLCnt := 0 to 2 do
                begin
                    sSecName := 'SortKey' + IntToStr(iLCnt + 1);
                    m_ArySortInfo[iLCnt].iSortOrder := IniFile.ReadInteger(sSecName, 'Order', 9);    // ｿｰﾄ順[0:昇順，1:降順]
                    m_ArySortInfo[iLCnt].iKetaStart := IniFile.ReadInteger(sSecName, 'Start', 0);    // ｺｰﾄﾞ桁数の先頭からの開始位置
                    m_ArySortInfo[iLCnt].iKetaEnd := IniFile.ReadInteger(sSecName, 'End', 0);        // ｺｰﾄﾞ桁数の先頭からの終了位置
                end;
			    Result := True;
// <277> ADD st
			end;
		GETKBN_DISPLAYINFO:
        	begin
                if (IniFile.ReadInteger('DisplayInfo', 'Sesyu', 0) = 1) then	// 0=ライセンスにより判断, 1=無条件で表示
                    m_bNoControlSesyu := True;
			    Result := True;
            end;
        end;
// <277> ADD ed
// <277> DEL        Result := True;
    finally
        if Assigned(IniFile) then
            FreeAndNil(IniFile);
    end;
end;
//<265>↑↑




///////////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
//  プロジェクトコンボボックスのOnExitイベント  <248> ADD
//-----------------------------------------------------------------------------
procedure TJNTCRP018001f.ECombo_HeaderExit(Sender: TObject);
begin
//<247> ADD St
                                        // 追加権限および修正権限がありの場合
    if ( m_cJNTArea.IsAppend = true ) and ( m_cJNTArea.IsModify = true ) then
            B_ImportWF.Enabled := true
    else    B_ImportWF.Enabled := false;

    PPanelBase.Enabled := True;
    PPanelTree.Enabled := True;
//<247> ADD Ed
end;

//<KSN> ADD St
// -----------------------------------------------------------------------------
//  ダイアログ表示
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.ShowDLG(Mode:Integer;var iRet:Integer);
var
	JNTCRP018001MSG: TJNTCRP018001MsgDlgf;
    // -----------------------------------------------------------------------------
    //  起動確認
    // -----------------------------------------------------------------------------
    procedure SHOW_START();
    var
        sCount : String;
    begin
        sCount := FormatFloat('#,##0',LIMIT_COUNT);
        try
            JNTCRP018001MSG := TJNTCRP018001MsgDlgf.fnCreateDialog(self,m_pMyAppRecord,DLG_START);

            if JNTCRP018001MSG <> nil then
            begin
                JNTCRP018001MSG.MMessage.Lines.Add(Format(INFO_MSG,[MasterInfo_DMemDataJHojyoName.AsString,sCount]));

                iRet := JNTCRP018001MSG.ShowModal();

                // DLG_INFOの更新
//<EXP> MOD St
{
                if (JNTCRP018001MSG.chkDLGInfo.Checked) then m_APGFILE.SetValue(m_DLG_INFO,'1')     // 次回以降は問い合わせない
                else                                         m_APGFILE.SetValue(m_DLG_INFO,'0');    // 毎回問い合わせる
}
                if (JNTCRP018001MSG.chkDLGInfo.Checked) then
                begin
                    DlgInfo := '1';
                end
                else
                begin
                    DlgInfo := '0';
                end;                
//<EXP> MOD Ed
            end;
        finally
            JNTCRP018001MSG.Release;
            JNTCRP018001MSG := nil;
        end;
    end;

    // -----------------------------------------------------------------------------
    //  並び替え
    // -----------------------------------------------------------------------------
    procedure SHOW_SORT();
    begin
        try
            JNTCRP018001MSG := TJNTCRP018001MsgDlgf.fnCreateDialog(self,m_pMyAppRecord,DLG_SORT);

            if JNTCRP018001MSG <> nil then
            begin
                JNTCRP018001MSG.MMessage.Lines.Add(Format(INFO_SORTMSG,[MemKasanSimpleName.AsString]));
                iRet := JNTCRP018001MSG.ShowModal();
            end;
        finally
            JNTCRP018001MSG.Release;
            JNTCRP018001MSG := nil;
            Self.Refresh;  // 並び替え中にダイアログを残さないように再描画
        end;
    end;
begin

    if Mode = DLG_START then SHOW_START()
    else if Mode = DLG_SORT then SHOW_SORT();

end;
// -----------------------------------------------------------------------------
//  プロジェクトの登録件数を返す
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_Count(MasterKbn:Integer;SumKbn:Integer=-1):Integer;
var
    Qry : TMQuery;
begin
    result := 0;
    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('select Count(NCode) as Kensu from HojyoMA');
            SQL.Add('where  RDelKbn = 0');
            SQL.Add(' and   Masterkbn = :MasterKbn');

            SetFld('Masterkbn').AsInteger := MasterKbn;
            if SumKbn <> -1 then
            begin
                SQL.Add(' and SumKbn = :SumKbn');
                SetFld('SumKbn').AsInteger := SumKbn;
            end;

            if not Open() then
            begin
        		MjsMessageBox(Self,'登録件数の取得に失敗しました。', mjError, mjDefOk);
                Exit;
            end;

            if not EOF then
                result := GetFld('Kensu').AsInteger;

        end;
    finally
        QueryDispose(Qry);
    end;
end;
// -----------------------------------------------------------------------------
//  合計工事(プロジェクト)取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_GetGoukei():TMQuery;
var
    Qry : TMQuery;
begin
    Qry := fnHojyoMA_Get(1);
    result := Qry;
end;
{
// -----------------------------------------------------------------------------
//  実在工事(プロジェクト)取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_GetJitsuzai():TMQuery;
var
    Qry : TMQuery;
begin
    Qry := fnHojyoMA_Get(0);
    result := Qry;
end;
}
// -----------------------------------------------------------------------------
//  工事(プロジェクト)マスター取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_Get(iSumKbn:integer):TMQuery;
var
    Qry : TMQuery;
begin
    result := nil;
    Qry	:= TMQuery.Create(Self);

    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    with Qry do
    begin
        SQL.Clear();
        SQL.Add('Select ');
        SQL.Add('      MA.GCode ');
        SQL.Add('      ,MA.SumKbn ');
        SQL.Add('      ,MA.LongName ');
        SQL.Add('      ,MA.SimpleName ');
        SQL.Add('      ,MA.NCode ');
        SQL.Add('      ,FI.FusenKbn ');
        SQL.Add('      ,FI.FusenCmnt ');
        SQL.Add('from HojyoMA MA');
        SQL.Add('Left Outer Join MFusenInfo FI On MA.NCode = FI.NCode and FI.MasterKbn = MA.MasterKbn');
        SQL.Add('where MA.RDelKbn = 0 and MA.SumKbn =:SUM');
        SQL.Add(' and  MA.MasterKbn = :pMKBN');
        SQL.ADD('ORDER BY GCode');

        SetFld('SUM').AsInteger := iSumKbn;
        SetFld('pMKBN').AsInteger := m_nMasterDivision;

        if not Open() then
        begin
            ErrorMessageDsp(Qry);
            Exit;
        end;
    end;

    result := Qry;

end;

// -----------------------------------------------------------------------------
//  受け取った引数を工事(プロジェクト)の属性・桁数に従い編集して返却する
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_CodeEdit(sGCode:String):String;
var
    iAttr,
    iDigit : integer;
    wkCode : String;
begin
    wkCode := '';
    iAttr := MasterInfo_DMemDataCodeAttr.AsInteger;
    iDigit := MasterInfo_DMemDataCodeDigit.AsInteger;

    if sGCode <> '' then
    begin
        if iAttr <> 2 then
        begin
            if iAttr = 1 then wkCode := Format ('%.'+IntToStr(iDigit)+'d', [StrToInt64(Trim(sGCode))])
            else              wkCode := FloatToStr(StrToFloat(Trim(sGCode)));

        end
        else
            wkCode := sGCode;
    end;

    result := wkCode;
end;

// -----------------------------------------------------------------------------
//  HojyoMAデータの取得(外部コード検索)
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_GetData(GCode:String):THojyoMA;
var
    HojyoMA : THojyoMA;
    wkGCode : String;
begin
//<KSN4> ADD St
    if GCode = '' then
    begin
        result := nil;
        Exit;
    end;
//<KSN4> ADD Ed
    // 外部コードをDB用に編集
    if MasterInfo_DMemDataCodeAttr.AsInteger <> 2 then
    begin
        wkGCode := Format('%.'+IntToStr(GCODE_LENGTH)+'d', [StrToInt64Def(GCode,0)]);
    end
    else
        wkGCode := Trim(GCode);

    HojyoMA := fnHojyoMA_Get(wkGCode,0);
    result := HojyoMA;
end;

// -----------------------------------------------------------------------------
//  HojyoMAデータの取得(内部コード検索)
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_GetData(NCode:Extended):THojyoMA;
var
    HojyoMA : THojyoMA;
begin
    HojyoMA := fnHojyoMA_Get('',NCode);
    result := HojyoMA;
end;

// -----------------------------------------------------------------------------
//  HojyoMAデータの取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnHojyoMA_Get(GCode:String;NCode:Extended):THojyoMA;
var
    Qry : TMQuery;
    HojyoMA : THojyoMA;
    wkCode : String;
begin

    HojyoMA := nil;
    if GCode <> '' then
    begin
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
            wkCode := GCode
        else
            wkCode := Format ('%.' + IntToStr(GCODE_LENGTH)+'d', [StrToInt64(GCode)]);
    end;

    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        with Qry do
        begin
            SQL.Clear;
            if GCode <> '' then
            begin
                SQL.Add('Select * From HojyoMA Where GCode = :GCode and RDelKbn = 0 and MasterKbn = :MasterKbn');
                SetFld('GCode').AsString := wkCode;
            end
            else
            begin
                SQL.Add('Select * From HojyoMA Where NCode = :NCode and RDelKbn = 0 and MasterKbn = :MasterKbn');
                SetFld('NCode').AsString := FormatFloat('0',NCode);
            end;

            SetFld('MasterKbn').AsInteger := m_nMasterDivision;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                result := nil;
                Exit;
            end;

            if EOF = False then
            begin
                HojyoMA := THojyoMA.Create;

                HojyoMA.MasterKbn := GetFld('MasterKbn').AsInteger;
                HojyoMA.GCode := GetFld('GCode').AsString;
                HojyoMA.NCode := GetFld('NCode').AsFloat;
                HojyoMA.LongName := GetFld('LongName').AsString;
                HojyoMA.SimpleName := GetFld('SimpleName').AsString;
                HojyoMA.SumKbn := GetFld('SumKbn').AsInteger;
                HojyoMA.SyokuchiKbn := GetFld('SyokuchiKbn').AsInteger;
                // その他のカラムは当面必要なさそうなので、ここでセットを終わる

            end;
        end;

        result := HojyoMA;
    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  加算(親)取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_GetParent(BasedNCode:Extended;iOrder:Integer=0):TMQuery;
var
    Qry : TMQuery;
begin
//    result := nil;
    Qry := fnKasan_Get(BasedNCode,1,iOrder);
    result := Qry;
end;

// -----------------------------------------------------------------------------
//  加算(子)取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_GetChild(SumNCode:Extended;iOrder:Integer=0):TMQuery;
var
    Qry : TMQuery;
begin
//    result := nil;
    Qry := fnKasan_Get(SumNCode,0,iOrder);
    result := Qry;
end;

// -----------------------------------------------------------------------------
//  加算先マスター取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_Get(iNCode:Extended;iSumKbn:Integer;iOrder:Integer=0):TMQuery;
const
    sParent : array[0..2] of String = ('TR.SumNCode','TR.BasedNCode','And MA.SumKbn =1');
    sChild : array[0..2] of String = ('TR.BasedNCode','TR.SumNCode','');
var
    Qry : TMQuery;
begin
    result := nil;
    Qry	:= TMQuery.Create(Self);

    MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);

    with Qry do
    begin
        SQL.Clear();
        SQL.Add('Select ');
        SQL.Add('      MA.GCode ');
        SQL.Add('      ,MA.SumKbn ');
        SQL.Add('      ,MA.LongName ');
        SQL.Add('      ,MA.SimpleName ');
        SQL.Add('      ,MA.NCode ');
        SQL.Add('      ,TR.PatternNo ');
        SQL.Add('      ,TR.SumNCode ');
        SQL.Add('      ,TR.EntNo ');
        SQL.Add('      ,TR.AddKbn ');
        SQL.Add('      ,TR.UpdDateTM ');
        SQL.Add('      ,TR.InsDateTM ');
        SQL.Add('      ,FI.FusenKbn ');
        SQL.Add('      ,FI.FusenCmnt ');
        SQL.Add('from HojyoMA MA');
        SQL.Add('Left Outer Join HojyoTree TR On MA.NCode = %s and TR.MasterKbn = MA.MasterKbn');
        SQL.Add('Left Outer Join MFusenInfo FI On MA.NCode = FI.NCode and FI.MasterKbn = MA.MasterKbn');
        SQL.Add('where %s =:NCode and MA.RDelKbn = 0 %s');
        SQL.Add(' and  MA.MasterKbn=:pMKBN');

        if iSumKbn = 1 then
            SQL.ADD('ORDER BY GCode')
        else
            SQL.ADD('ORDER BY EntNo');

        if iOrder = ORDER_DESC then SQL.ADD(' DESC');

        if iSumKbn = 0      then SQL.Text :=  Format(SQL.Text,[sChild[0],sChild[1],sChild[2]])
        else if iSumKbn = 1 then SQL.Text :=  Format(SQL.Text,[sParent[0],sParent[1],sParent[2]])
        else                     SQL.Text :=  Format(SQL.Text,[sChild[0],sChild[1],sChild[2]]);

        SetFld('NCode').AsString := FormatFloat('0',iNCode);
        SetFld('pMKBN').asInteger := m_nMasterDivision;

        if not Open() then
        begin
            ErrorMessageDsp(Qry);
            Exit;
        end;
    end;

    result := Qry;

end;

// -----------------------------------------------------------------------------
//  HojyoTreeの更新
// -----------------------------------------------------------------------------
//<KSN4> DEL procedure TJNTCRP018001f.fnKasan_Update(HojyoTree : THojyoTree;bIns : Boolean);
function TJNTCRP018001f.fnKasan_Update(HojyoTree:THojyoTree;bIns : Boolean; pQry: TMQuery = nil): Boolean;  //<KSN4> ADD
var
    Qry : TMQuery;
begin

    result := false;  //<KSN4> ADD

    try
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            Qry := TMQuery.Create(self);
            MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

            MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

            SessionPractice(C_ST_PROCESS);

//<KSN4> ADD St
        end
        else
        begin
            Qry := pQry;
        end;
//<KSN4> ADD Ed

        with Qry do
        begin
            SQL.Clear;
            if bIns then
            begin
                SQL.Add('Insert Into HojyoTree (MasterKbn');
                SQL.Add(',PatternNo');
                SQL.Add(',SumNCode');
                SQL.Add(',EntNo');
                SQL.Add(',BasedNCode');
                SQL.Add(',AddKbn');
                SQL.Add(',UpdDateTM');
                SQL.Add(',InsDateTM');
                SQL.Add(',UpdTantoNCode');
                SQL.Add(') Values(');
                SQL.Add(' :MasterKbn');
                SQL.Add(' ,:PatternNo');
                SQL.Add(' ,:SumNCode');
                SQL.Add(' ,:EntNo');
                SQL.Add(' ,:BasedNCode');
                SQL.Add(' ,:AddKbn');
                SQL.Add(' ,:UpdDateTM');
                SQL.Add(' ,:InsDateTM');
                SQL.Add(' ,:UpdTantoNCode');
                SQL.Add(' )');

            end
            else
            begin
                SQL.Add('Update HojyoTree Set ');
                SQL.Add('MasterKbn = :MasterKbn,');
                SQL.Add('PatternNo = :PatternNo,');
                SQL.Add('SumNCode = :SumNCode,');
                SQL.Add('EntNo = :EntNo,');
                SQL.Add('BasedNCode = :BasedNCode,');
                SQL.Add('AddKbn = :AddKbn,');
                SQL.Add('UpdDateTM = :UpdDateTM,');
                SQL.Add('InsDateTM = :InsDateTM,');
                SQL.Add('UpdTantoNCode = :UpdTantoNCode');
                SQL.Add('Where MasterKbn = :MasterKbn');
                SQL.Add('And PatternNo = :PatternNo');
                SQL.Add('And SumNCode = :SumNCode');
                SQL.Add('And EntNo = :EntNo');
            end;

            SetFld('MasterKbn').AsInteger := HojyoTree.MasterKbn;
            SetFld('PatternNo').AsInteger := HojyoTree.PatternNo;
            SetFld('SumNCode').AsString := FormatFloat('0',HojyoTree.SumNCode);
            SetFld('EntNo').AsInteger := HojyoTree.EntNo;
            SetFld('BasedNCode').AsString := FormatFloat('0',HojyoTree.BasedNCode);
            SetFld('AddKbn').AsInteger := HojyoTree.AddKbn;

            SetFld('UpdDateTM').AsString := DateTimeToStr(HojyoTree.UpdDateTM);
            SetFld('InsDateTM').AsString := DateTimeToStr(HojyoTree.InsDateTM);
            SetFld('UpdTantoNCode').AsString := FormatFloat('0',HojyoTree.UpdTantoNCode);

            if not ExecSQL then
            begin
//<KSN4> ADD St
                if (not Assigned(pQry)) then
                begin
//<KSN4> ADD Ed
                    ErrorMessageDsp(Qry);
                    MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                end;  //<KSN4> ADD
                Exit;
            end;

//<KSN4> ADD St
            if (not Assigned(pQry)) then
            begin
//<KSN4> ADD Ed
                MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

                gbHojyoTree2Flag := True;
            end;  //<KSN4> ADD

            result := true;  //<KSN4> ADD
        end;
    finally
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            QueryDispose(Qry);
            SessionPractice(C_ED_PROCESS);
        end;  //<KSN4> ADD
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeの削除
// -----------------------------------------------------------------------------
//<KSN4> DEL procedure TJNTCRP018001f.fnKasan_Delete(HojyoTree : THojyoTree);
function TJNTCRP018001f.fnKasan_Delete(HojyoTree : THojyoTree; pQry: TMQuery = nil): Boolean;  //<KSN4> ADD
var
    Qry : TMQuery;
begin

    result := false;  //<KSN4> ADD

    try
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            Qry := TMQuery.Create(self);
            MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

            MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

            SessionPractice(C_ST_PROCESS);
//<KSN4> ADD St
        end
        else
        begin
            Qry := pQry;
        end;
//<KSN4> ADD Ed

        with Qry do
        begin
            SQL.Clear;

            SQL.Add('Delete HojyoTree  ');
            SQL.Add('Where MasterKbn = :MasterKbn');
            SQL.Add('And PatternNo = :PatternNo');
            SQL.Add('And SumNCode = :SumNCode');
            SQL.Add('And BasedNCode = :BasedNCode');

            SetFld('MasterKbn').AsInteger := HojyoTree.MasterKbn;
            SetFld('PatternNo').AsInteger := HojyoTree.PatternNo;
            SetFld('SumNCode').AsString := FormatFloat('0',HojyoTree.SumNCode);
            SetFld('BasedNCode').AsString := FormatFloat('0',HojyoTree.BasedNCode);

            if not ExecSQL then
            begin
//<KSN4> ADD St
                if (not Assigned(pQry)) then
                begin
//<KSN4> ADD Ed
                    ErrorMessageDsp(Qry);
                    MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                end;  //<KSN4> ADD
                Exit;
            end;

//<KSN4> ADD St
            if (not Assigned(pQry)) then
            begin
//<KSN4> ADD Ed
                MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

                gbHojyoTree2Flag := True;
            end;  //<KSN4> ADD

            result := true;  //<KSN4> ADD
        end;
    finally
//<KSN4> ADD St
        if (not Assigned(pQry)) then
        begin
//<KSN4> ADD Ed
            QueryDispose(Qry);
            SessionPractice(C_ED_PROCESS);
        end;  //<KSN4> ADD
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeのEntNo再付番
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_ResetEntNo(PatternNo:Integer;SumNCode:Extended):Boolean;
var
    Qry : TMQuery;
    bRet : Boolean;
begin
    bRet := False;

    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

    	MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

        SessionPractice(C_ST_PROCESS);

        with Qry do
        begin
            SQL.Clear;

            SQL.Add('Update HojyoTree Tree ');
            SQL.Add('Inner Join ');
            SQL.Add('(Select Masterkbn');
            SQL.Add(',PatternNo');
            SQL.Add(',SumNCode');
            SQL.Add(',EntNo');
            SQL.Add(',BasedNCode');
            SQL.Add(',AddKbn');
            SQL.Add(',UpdDateTM');
            SQL.Add(',InsDateTM');
            SQL.Add(',UpdTantoNCode');
            SQL.Add(',(Row_Number() Over (Order by EntNo) * 100) as OrderEntNo');  //<KSN2> ADD
            SQL.Add('From HojyoTree');
            SQL.Add('Where MasterKbn = :MasterKbn');
            SQL.Add('And SumNCode = :SumNCode');
            SQL.Add('And PatternNo = :PatternNo');
            SQL.Add('Order by EntNo) Tree2');
            SQL.Add('On Tree.MasterKbn = Tree2.MasterKbn');
            SQL.Add('And Tree.PatternNo = Tree2.PatternNo');
            SQL.Add('And Tree.SumNCode = Tree2.SumNCode');
            SQL.Add('And Tree.EntNo = Tree2.EntNo');
//<KSN2> DEL            SQL.Add('Set Tree.EntNo = number(*) * 100');
            SQL.Add('Set Tree.EntNo = Tree2.OrderEntNo');  //<KSN2> ADD

            SetFld('MasterKbn').AsInteger := m_nMasterDivision;
            SetFld('PatternNo').AsInteger := PatternNo;
            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);

            if not ExecSQL then
            begin
				ErrorMessageDsp(Qry);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                result := False;
                Exit;
            end;

            MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
            bRet := True;
        end;
    finally
        QueryDispose(Qry);
		SessionPractice(C_ED_PROCESS);
        result := bRet;
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeデータの取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_GetData(BasedNCode,SumNCode:Extended):THojyoTree;
var
    Qry : TMQuery;
    HojyoTree : THojyoTree;
begin
    HojyoTree := nil;

    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select * From HojyoTree Where SumNCode = :SumNCode and BasedNCode = :BasedNCode');
            SQL.Add('and MasterKbn = :MasterKbn');

            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            SetFld('BasedNCode').AsString := FormatFloat('0',BasedNCode);
            SetFld('MasterKbn').AsInteger := m_nMasterDivision;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                result := nil;
                Exit;
            end;

            if EOF = False then
            begin
                HojyoTree := THojyoTree.Create;

                HojyoTree.MasterKbn := GetFld('MasterKbn').AsInteger;
                HojyoTree.PatternNo := GetFld('PatternNo').AsInteger;
                HojyoTree.SumNCode := GetFld('SumNCode').AsFloat;
                HojyoTree.EntNo := GetFld('EntNo').AsInteger;
                HojyoTree.BasedNCode := GetFld('BasedNCode').AsFloat;
                HojyoTree.AddKbn := GetFld('AddKbn').AsInteger;
                HojyoTree.UpdDateTM := GetFld('UpdDateTM').AsDateTime;
                HojyoTree.InsDateTM := GetFld('InsDateTM').AsDateTime;
                HojyoTree.UpdTantoNCode := GetFld('UpdTantoNCode').AsFloat;

            end;
        end;

    finally
        QueryDispose(Qry);
        result := HojyoTree;
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeデータの存在チェック
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_EXISTS(MasterKbn,PatternNo,EntNo:Integer;SumNCode:Extended):Boolean;
var
    Qry : TMQuery;
begin
    result := False;

    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select EntNo From HojyoTree Where SumNCode = :SumNCode and EntNo = :EntNo');
            SQL.Add('and MasterKbn = :MasterKbn');
            SQL.Add('and PatternNo = :PatternNo');

            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            SetFld('EntNo').AsInteger := EntNo;
            SetFld('MasterKbn').AsInteger := Masterkbn;
            SetFld('PatternNo').AsInteger := PatternNo;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                Exit;
            end;

            if EOF = False then result := True;
        end;

    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeデータのEntNo取得(最大値)
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_GetMaxEntNo(SumNCode:Extended):Integer;
begin
    result := fnKasan_GetEntNo(SumNCode,KBN_MAX);
end;
{
// -----------------------------------------------------------------------------
//  HojyoTreeデータのEntNo取得(最小値)
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_GetMINEntNo(SumNCode:Extended):Integer;
begin
    result := fnKasan_GetEntNo(SumNCode,KBN_MIN);
end;
}
// -----------------------------------------------------------------------------
//  HojyoTreeデータのEntNo取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_GetEntNo(SumNCode:Extended;iGetKbn:Integer):Integer;
var
    Qry : TMQuery;
begin
    result := 0;

    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select ');

            if iGetKbn = KBN_MAX then SQL.Add('MAX(EntNo) As EntNo')
            Else                      SQL.Add('MIN(EntNo) As EntNo');

            SQL.Add('From HojyoTree');
            SQL.Add('Where MasterKbn = :MasterKbn');
            SQL.Add('And SumNCode = :SumNCode');
            SQL.Add('And PatternNo = :PatternNo');

            SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            SetFld('PatternNo').AsInteger := 0;
            SetFld('MasterKbn').AsInteger := m_nMasterDivision;

            if not Open() then
            begin
				ErrorMessageDsp(Qry);
                Exit;
            end;

            if EOF = False then
            begin
                result := GetFld('EntNo').AsInteger;
            end;
        end;

    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのChangeNodeExイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridChangeNodeEx(Sender: TObject);
var
    Mem     : TdxMemData;
    // -----------------------------------------------------------------------------
    //  グリッドのChangeNodeExイベント(加算先(親)グリッド用)
    // -----------------------------------------------------------------------------
    procedure DBGridChangeNodeEx_ParentGrid();
    begin
        Mem := MemKasanParent;

        BSpeedButtonDel.Enabled := False;

        DBGrid_EventCtrl(Kasan_Child_DBGrid,False);

        Kasan_CreateChildGrid(Mem.FieldByName('NCode').AsFloat);

        DBGrid_EventCtrl(Kasan_Child_DBGrid,True);

        Lbl_KasanChild.Caption := Mem.FieldByName('GCode').AsString +' '+ Mem.FieldByName('SimpleName').AsString;

        TreeView_Kasan_Create(Mem.FieldByName('NCode').AsFloat,1);
    end;

    // -----------------------------------------------------------------------------
    //  グリッドのChangeNodeExイベント(加算元(子)グリッド用)
    // -----------------------------------------------------------------------------
    procedure DBGridChangeNodeEx_ChildGrid();
    var
        iNo:Integer;
        sMSG : String;
        HojyoTree : THojyoTree;
    begin
        HojyoTree := nil;
        Mem := MemKasanChild;

        if Mem.RecordCount <= 0 then
        begin
            BSpeedButtonDel.Enabled := False;
            TPDelChild.Enabled := False;
            TPInsert.Enabled := False
        end;

        try
            // 加算TreeView作成処理
            TreeView_Kasan_Create(Mem.FieldByName('NCode').AsFloat);

            if (Mem.FieldByName('GCode').IsNull) then	//	実在GridのｺｰﾄﾞがNullの時
            begin
                BSpeedButtonDel.Enabled   := False;
                TPDelChild.Enabled   := False;
            end
            else
            begin
                if Mem.State in [dsInsert] then	// ﾃﾞｰﾀ挿入中？
                begin
                    BSpeedButtonDel.Enabled   := False;
                    TPDelChild.Enabled   := False;
                    TPInsert.Enabled := False;
                end
                else
                begin
                    BSpeedButtonDel.Enabled := m_cJNTArea.IsDelete;
                    TPDelChild.Enabled := m_cJNTArea.IsDelete;
                    TPInsert.Enabled := m_cJNTArea.IsAppend;  // 追加権限

                    if BSpeedButtonDel.Enabled then
                    begin
                        // HojyoTree生成
                        HojyoTree := THojyoTree.Create();
                        With HojyoTree do
                        begin
                            BasedNCode := Mem.FieldByName('NCode').AsFloat;
                            SumNCode := Mem.FieldByName('SumNCode').AsFloat;
                        end;
                        // 削除可能かチェックする
                        fnKasan_DelValidation(HojyoTree,sMSG);

                        if sMSG <> '' then
                        begin
                            BSpeedButtonDel.Enabled := False;
                            TPDelChild.Enabled := False;
                        end;
                    end;

                    // DspNoが振られているか？
                    iNo := Mem.FieldByName('DspNo').AsInteger;
                    if iNo = 0 then
                    begin
                        TPDelChild.Enabled := False;
                        BSpeedButtonDel.Enabled := False;
                    end;
                end;
            end;
        finally
            if HojyoTree <> nil then HojyoTree.Free();
        end;
    end;
begin

    // 加算先(親)グリッド
    if Sender = Kasan_Parent_DBGrid then
    begin
        DBGridChangeNodeEx_ParentGrid();
    end;

    // 加算元(子)グリッド
    if Sender = Kasan_Child_DBGrid then
    begin
        DBGridChangeNodeEx_ChildGrid();
    end;
end;

// -----------------------------------------------------------------------------
//  MemDataのBeforePostイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.MemDataBeforePost(DataSet: TDataSet);
var
    stCode : String;
    Mem : TdxMemData;
    iSumNCode : Extended;
    iBasedNCode : Extended;
    HojyoMA,HojyoMAParent : THojyoMA;
    HojyoTree : THojyoTree;
    sMsg : String;
//<KSN4> ADD St
    oQry : TMQuery;
    iSumNCode2 : Extended;
//<KSN4> ADD Ed
    // -----------------------------------------------------------------------------
    //  工事(プロジェクト)情報のセット
    // -----------------------------------------------------------------------------
    procedure HojyoMASET();
    begin
//<KSN4> DEL        if (HojyoMA = nil) then Exit;
//<KSN4> ADD St
        if (HojyoMA = nil) then
        begin
            DataSet.FieldByName('SumNCode').AsFloat := 0;
            DataSet.FieldByName('SumKbn').AsInteger := 0;
            DataSet.FieldByName('PatternNo').Asinteger := 0;
            DataSet.FieldByName('NCode').AsFloat := 0;
            DataSet.FieldByName('AddKbn').Asinteger := 0;
            DataSet.FieldByName('LongName').AsString := '';
            DataSet.FieldByName('SimpleName').AsString := '';
            DataSet.FieldByName('NewData').AsBoolean :=  (DataSet.State in [dsInsert]);
            Exit;
        end;
//<KSN4> ADD Ed
        // 工事(プロジェクト)情報セット
        with HojyoMA do
        begin
            DataSet.FieldByName('SumNCode').AsFloat := iSumNCode;
            DataSet.FieldByName('SumKbn').AsInteger := SumKbn;
            DataSet.FieldByName('PatternNo').Asinteger := 0;
            DataSet.FieldByName('NCode').AsFloat := NCode;
            DataSet.FieldByName('AddKbn').Asinteger := 0;
            DataSet.FieldByName('LongName').AsString := LongName;
            DataSet.FieldByName('SimpleName').AsString := SimpleName;
            DataSet.FieldByName('NewData').AsBoolean :=  (DataSet.State in [dsInsert]);

            if SumKbn <> 0 then DataSet.FieldByName('Fusen').Assign(Image_Goukei.Picture.Bitmap)
            else                DataSet.FieldByName('Fusen').Assign(Image_Jitsuzai.Picture.Bitmap);

        end;
    end;
    // -----------------------------------------------------------------------------
    //  インスタンスの開放
    // -----------------------------------------------------------------------------
    procedure oFree();
    begin
        if HojyoMA <> nil then
        begin
            HojyoMA.Free();
            HojyoMA := nil;
        end;

        if HojyoMAParent <> nil then
        begin
            HojyoMAParent.Free();
            HojyoMAParent := nil;
        end;

        if HojyoTree <> nil then
        begin
            HojyoTree.Free();
            HojyoTree := nil;
        end;
    end;
begin
    try
        HojyoMA := nil;
        HojyoMAParent := nil;
        HojyoTree := nil;
        oQry := nil;  //<KSN4> ADD
        iSumNCode := 0;
        iSumNCode2 := 0;  //<KSN4> ADD
        iBasedNCode := 0;

        HojyoMA := fnHojyoMA_GetData(DataSet.FieldByName('GCode').AsString);

        if HojyoMA <> nil then iBasedNCode := HojyoMA.NCode;

        Mem := MemKasanParent;
        HojyoMAParent := fnHojyoMA_GetData(Mem.FieldByName('NCode').AsFloat);

        if HojyoMAParent <> nil then iSumNCode := HojyoMAParent.NCode;

//<KSN4> ADD St
        if (HojyoMA = nil) and (DataSet.FieldByName('NCode').AsInteger <> 0) then
        begin
            // 削除して行もクリア
            HojyoTree := fnKasan_GetData(DataSet.FieldByName('NCode').AsInteger, iSumNCode);
            fnKasan_Delete(HojyoTree);
            Exit;
        end;
//<KSN4> ADD Ed

        // Editモードの時に、同じコードで上書きしたときに登録チェックを行ってしまうための対策
        if (DataSet.FieldByName('EntNo').AsInteger <> 0) then
        begin
            HojyoTree := fnKasan_GetData(iBasedNCode,iSumNCode);
            if (HojyoTree <> nil) then
            begin
                // EntNoイコール時は同じコードで上書きしているので以下のチェックは行わない
                if (DataSet.FieldByName('EntNo').AsInteger = HojyoTree.EntNo) then
                    Exit;
            end;
        end;

        // HojyoTree生成
        if (HojyoTree = nil) then HojyoTree := THojyoTree.Create();
        With HojyoTree do
        begin
            BasedNCode := iBasedNCode;
            SumNCode := iSumNCode;
        end;

        fnKasan_InsValidation(HojyoTree,sMsg);   // 登録チェック

        if sMsg <> '' then
        begin
            MjsMessageBoxEX(Self,sMsg,'登録',mjInformation,mjOk, mjDefOk);
            // 名称をクリア
            DataSet.FieldByName('LongName').AsString := '';
            DataSet.FieldByName('SimpleName').AsString := '';
            DataSet.FieldByName('Fusen').Clear;
            oFree();
            abort;
        end;

//<KSN4> ADD St
        oQry := fnKasan_GetParent(iBasedNCode);
        if (oQry <> nil) then
        begin
            while not (oQry.EOF) do
            begin
                if iSumNCode <> oQry.GetFld('SumNCode').AsFloat then
                begin
                    iSumNCode2 := oQry.GetFld('SumNCode').AsFloat;
                    break;
                end;
                oQry.Next();
            end;

            QueryDispose(oQry);

            if iSumNCode2 <> 0 then
            begin
                if mrYes <> MjsMessageBoxEx(
                    self, Format(
                        '既に別の合計%sにも加算されていますが登録しますか？',
                        [MasterInfo_DMemDataJHojyoName.AsString]),
                    '確認', mjQuestion, mjYesNo, mjDefNo) then
                begin
                    oFree();
                    abort;
                end;
            end;
        end;
//<KSN4> ADD Ed

        // 外部ｺｰﾄﾞ
        if MasterInfo_DMemDataCodeAttr.AsInteger = 2 then
        begin
            stCode := DataSet.FieldByName('GCode').AsString;
            stCode := TrimRight(stCode);
            DataSet.FieldByName('GCode').AsString := fnHojyoMA_CodeEdit(stCode);
        end;

        //最終行に新規に入力した時 NOを付番
        if DataSet.FieldByName('DspNo').AsInteger = 0 then
        begin
            if DataSet.RecNo = 0 then						// 初回は0らしいので..
                DataSet.FieldByName('DspNo').AsInteger := 1
            else
                DataSet.FieldByName('DspNo').AsInteger := DataSet.RecNo;
        end;

        // EntNoが入っていない場合
        if DataSet.FieldByName('EntNo').AsInteger = 0 then
            DataSet.FieldByName('EntNo').AsInteger := fnKasan_GetMaxEntNo(iSumNCode)+100;

    finally
        HojyoMASET();
        oFree();
    end;
end;

// -----------------------------------------------------------------------------
//  MemDataのAfterPostイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.MemDataAfterPost(DataSet: TDataSet);
var
    HojyoTree : THojyoTree;
//<KSN4> DEL    bIns      : Boolean;
    oMem : TdxMemData;  //<KSN4> ADD
begin
//<KSN4> ADD St
    oMem := TdxMemData(DataSet);
    if oMem.FieldByName('GCode').AsString = '' then
    begin
        Exit;
    end;
//<KSN4> ADD Ed
    HojyoTree := nil;
    try
        // HojyoTreeの更新
        HojyoTree := THojyoTree.Create;

        with HojyoTree do
        begin
            MasterKbn := m_nMasterDivision;
            PatternNo := DataSet.FieldByName('PatternNo').AsInteger;
            SumNCode := DataSet.FieldByName('SumNCode').AsFloat;
            EntNo := DataSet.FieldByName('EntNo').AsInteger;
            BasedNCode := DataSet.FieldByName('NCode').AsFloat;
            AddKbn := DataSet.FieldByName('AddKbn').AsInteger;
//<KSN4> DEL St
{
            // 存在したら新規作成
            bIns := not fnKasan_EXISTS(MasterKbn,PatternNo,EntNo,SumNCode);

            UpdDateTM := now;

            if bIns then
                InsDateTM := now
            else
                InsDateTM := DataSet.FieldByName('InsDateTM').AsDateTime;
}
//<KSN4> DEL Ed
            UpdTantoNCode := m_TantoNCode;
//<KSN4> DEL St
{
            fnKasan_Update(HojyoTree,bIns);

            if not Assigned(m_SrchHojyoMA) then Exit;

            // 検索用加算先の作成
            if (bIns = True) and (m_SrchHojyoMA.NCode = BasedNCode) then Kasan_CreateSearchParent();
}
//<KSN4> DEL Ed
        end;

        fnKasan_UpdateExecute(HojyoTree);  //<KSN4> ADD

    finally
        HojyoTree.Free;
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系TreeViewの作成
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.TreeView_Kasan_Create(NCode:Extended;iSumKbn:Integer=0);
var
    stWorkRec  : ^TreeViewRec;
	cNode : TTreeNode;
    cSrcNode   : TTreeNode;
    TreeView : TMTreeView;
    nCodeArray : array of Extended;
    Qry:TMQuery;
    iCnt : Integer;
    HojyoMA : THojyoMA;

    // -----------------------------------------------------------------------------
    //  TreeViewのノード作成
    // -----------------------------------------------------------------------------
    procedure SetData(HojyoMA : THojyoMA;bComp:Boolean);
    var
        stName : String;
        stCode : String;
        SetWorkRec : ^TreeViewRec;
    begin
    	New (SetWorkRec);
    	SetWorkRec^.nDivision    	:= HojyoMA.SumKbn;
    	SetWorkRec^.strExCode    	:= HojyoMA.GCode;
        SetWorkRec^.iNCode          := HojyoMA.NCode;
    	SetWorkRec^.strName      	:= HojyoMA.LongName;
    	SetWorkRec^.iSyokuti	    := HojyoMA.SyokuchiKbn;
		SetWorkRec^.bComp           := bComp;

        stCode := fnHojyoMA_CodeEdit(HojyoMA.GCode);
		stName := stCode + ' ' + HojyoMA.SimpleName;
        cNode	:= TreeView.Items.AddChildObjectFirst (cSrcNode, stName, SetWorkRec);

        if cSrcNode = nil then
            cSrcNode := cNode;

		if  (SetWorkRec^.nDivision = 0) then
		begin
			cNode.ImageIndex    := IC_JCLOSE;
			cNode.SelectedIndex := IC_JCLOSE;
		end
		else
		begin
			cNode.ImageIndex    := IC_GMCLOSE;
			cNode.SelectedIndex := IC_GMCLOSE;
		end;
    end;

    // -----------------------------------------------------------------------------
    //  子情報の作成
    // -----------------------------------------------------------------------------
    procedure CreateChild(pNCode:Extended);
    begin

        HojyoMA := nil;
        Qry := nil;

        try
            // 子情報の取得
            Qry := fnKasan_GetChild(pNCode,ORDER_DESC);

            if Qry <> nil then
            begin
                cNode := nil;

                while Qry.Eof = False do
                begin
                    HojyoMA := THojyoMA.Create();

                    with HojyoMA do
                    begin
                        SumKbn := Qry.GetFld('SumKbn').AsInteger;
                        GCode := Qry.GetFld('GCode').AsString;
                        NCode := Qry.GetFld('NCode').AsFloat;
                        SimpleName := Qry.GetFld('SimpleName').AsString;
                        SyokuchiKbn := 0;
                    end;

                    if HojyoMA <> nil then
                    begin
                        SetData(HojyoMA,HojyoMA.SumKbn = 0);     // 加算元(子)のセット

                        HojyoMA.Free();
                        HojyoMA := nil;
                    end;
                    Qry.Next();
                end;
            end;
        finally
            QueryDispose(Qry);
        end;
    end;

    // -----------------------------------------------------------------------------
    // まだ取得していない子情報の作成
    // -----------------------------------------------------------------------------
    procedure TreeBuild();
    var
        iCnt,iCnt2 : Integer;
        wkNode : TTreeNode;
    begin
        iCnt2 := 0;
        iCnt := 0;

        while iCnt <= (TreeView.Items.Count -1) do
        begin
            wkNode := TreeView.Items [iCnt];

            if iCnt = 0 then wkNode.Expanded := True;   // 先頭は開く

            stWorkRec := wkNode.Data;
            if stWorkRec^.bComp = False then
            begin
                if wkNode.Level = 0 then inc(iCnt2);

                cSrcNode := wkNode;
                CreateChild(stWorkRec^.iNCode);
                stWorkRec^.bComp := True;

                // 初期表示で先頭にスクロールを持っていくための対策
                if iCnt2 < 2 then wkNode.Expanded := True;
            end;
            inc(iCnt);
        end;
    end;
begin

    TreeView := VTreeView_Kasan;
    TreeView.Items.BeginUpdate;
    TreeView.Items.Clear;

    Qry := nil;
    HojyoMA := nil;

    if iSumKbn = 0 then
    begin
        // 複数の加算先を取得
        Qry := fnKasan_GetParent(NCode,ORDER_DESC);

        if Qry <> nil then
        begin
            SetLength(nCodeArray,Qry.RecordCount);

            iCnt := 0;
            while Qry.EOF = False do
            begin
                nCodeArray[iCnt] := Qry.GetFld('NCode').AsFloat;
                inc(iCnt);
                Qry.Next();
            end;

            QueryDispose(Qry);
        end;
    end
    else
    begin
        SetLength(nCodeArray,1);
        nCodeArray[0] := NCode;
    end;

    for iCnt := Low(nCodeArray) to High(nCodeArray) do
    begin

        HojyoMA := fnHojyoMA_GetData(nCodeArray[iCnt]);

        if HojyoMA = nil then continue;

        cSrcNode := nil;

        SetData(HojyoMA,True);  // 加算先(親)のセット

        CreateChild(nCodeArray[iCnt]);
    end;

    if TreeView.Items.Count > 0 then
    begin
        // まだ取得していない子情報の作成
        TreeBuild();

        TreeView.Selected := TreeView.Items[0];

        if TreeView_EnsureVisible(TreeView.Handle, TreeView.Selected.ItemID) then
            TreeView.Invalidate;
    end;

    TreeView.Items.EndUpdate;
end;

// -----------------------------------------------------------------------------
//  挿入ボタンのクリックイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.BSpeedButtonInsClick(Sender: TObject);
var
	i,
	iNo,
	iEntNo,
	iEntNoPrev,
	iWk		:	Integer;
    DBGrid  :   TdxDBGrid;
    Mem     :   TdxMemData;
    iSumNCode : Extended;
    iPatternNo : Integer;
begin
    DBGrid := Kasan_Child_DBGrid;
    Mem    := MemKasanChild;

//<KSN2> ADD St
    if (Mem.State in [dsEdit]) then
    begin
        Mem.Post();
    end;
//<KSN2> ADD St

    DBGrid_EventCtrl(DBGrid,False);

	// 挿入場所以降のNOを振り直す
	iNo := Mem.FieldByName('DspNo').AsInteger;		// 挿入場所のNO
	iEntNo := Mem.FieldByName('EntNo').AsInteger;	    // 挿入場所のEntNO
	iEntNoPrev := 0;
	if Mem.RecNo > 1 then
	begin
		Mem.Prior;
		iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のDspNo
		Mem.Next;
	end;
	iEntNo := (iEntNo + iEntNoPrev) div 2;

	// 間に挿入できなくなったら、出力順NOの振り直しを行う
	if iEntNo = iEntNoPrev then
	begin
        iSumNCode := Mem.FieldByName('SumNCode').AsFloat;
        iPatternNo := Mem.FieldByName('PatternNo').AsInteger;
        // EntNoの再付番
		if not fnKasan_ResetEntNo(iPatternNo,iSumNCode) then
			exit;

        MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化

        Kasan_CreateChildGrid(iSumNCode);  // 加算元(子)グリッド作成

        MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す

		Mem.RecNo	:=	iNo;						// Dropしたﾚｺｰﾄﾞに戻る
		iEntNo := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
		iEntNoPrev := 0;
		if Mem.RecNo > 1 then
		begin
			Mem.Prior;
			iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のDspNo
			Mem.Next;
		end;
		iEntNo := (iEntNo + iEntNoPrev) div 2;
	end;

	if iNo <> 0 then									// 途中のNOに挿入したとき,以降のNOを振り直す
	begin
		Mem.Last;									// 後ろの行からNOを＋１していく
        MemData_EventCtrl(Mem,False);
		for i := Mem.RecNo downto iNo do
		begin
			Mem.Edit;								// 編集ﾓｰﾄﾞ
			iWk := Mem.FieldByName('DspNo').AsInteger+1;	// NO <-- 行+1
			Mem.FieldByName('DspNo').AsInteger := iWk;
			Mem.Post;
			Mem.Prior;
		end;
        MemData_EventCtrl(Mem,True);
	end;

	if iNo <> 1 then
		Mem.Next;

    MemData_EventCtrl(Mem,False);
	Mem.Insert;									// ｲﾝｻｰﾄ
	iWk := Mem.RecNo;								// 行NO
	Mem.FieldByName('DspNo').AsInteger	:= iWk;
	Mem.FieldByName('EntNo').AsInteger	:= iEntNo;
	Mem.Post;
    MemData_EventCtrl(Mem,True);
    DBGrid_EventCtrl(DBGrid,True);
end;

// -----------------------------------------------------------------------------
//  MemDataのイベント制御
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.MemData_EventCtrl(Mem:TdxMemData;bSet:Boolean);
begin

    if bSet = False then
    begin
        Mem.BeforePost := nil;
        Mem.AfterPost := nil;
        Exit;
    end;

    if Mem = MemKasanChild then
    begin
        Mem.BeforePost := MemDataBeforePost;
        Mem.AfterPost := MemDataAfterPost;
    end;
end;

// -----------------------------------------------------------------------------
//  DBGridのイベント制御
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGrid_EventCtrl(DBGrid:TdxDBGrid;bSet:Boolean);
begin
    if bSet = False then
    begin
        DBGrid.OnChangeNodeEx := nil;
        DBGrid.OnEnter := nil;
        Exit;
    end;

    if DBGrid = Kasan_Child_DBGrid then
    begin
        DBGrid.OnChangeNodeEx := DBGridChangeNodeEx;
        DBGrid.OnEnter := EnterEvent;
    end;

    if DBGrid = Kasan_Parent_DBGrid then
    begin
        DBGrid.OnChangeNodeEx := DBGridChangeNodeEx;
        DBGrid.OnEnter := EnterEvent;
    end;
end;

// -----------------------------------------------------------------------------
//  TreeViewのイベント制御
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.TreeView_EventCtrl(TreeView:TMTreeView;bSet:Boolean);
begin
    if bSet = False then
    begin
        // イベントの無効化
        TreeView.OnChange := nil;
        TreeView.OnClick := nil;
        TreeView.OnDragDrop := nil;
        TreeView.OnDragOver := nil;
        TreeView.OnEnter := nil;
        TreeView.OnExit := nil;
        Exit;
    end;

    if TreeView = VTreeView then
    begin
        TreeView.OnChange := VTreeViewChange;
        TreeView.OnClick := VTreeViewClick;
        TreeView.OnDragDrop := VTreeViewDragDrop;
        TreeView.OnDragOver := VTreeViewDragOver;
        TreeView.OnEnter := VTreeViewEnter;
        TreeView.OnExit := VTreeViewExit;
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドの作成
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.Kasan_CreateChildGrid(SumNCode : Extended);
var
    Qry : TMQuery;
    DBGrid : TdxDBGrid;
    Mem : TdxMemData;
    DSource : TDataSource;
    iCnt : Integer;
begin

    if SumNCode = 0 then Exit;

    DBGrid := Kasan_Child_DBGrid;
    Mem := MemKasanChild;
    MemData_EventCtrl(Mem,False);
    DSource := dsKasanChild;

    DSource.DataSet := nil;

    DBGrid.BeginUpdate;

    Mem.Close;
    Mem.Open;

	Mem.DisableControls;

    Qry := fnKasan_GetChild(SumNCode);

    if Qry = nil then Exit;

    try
        iCnt := 1;
        with Qry do
        begin
            While EOF = False do
            begin
                Mem.Append;
                Mem.FieldByName('DspNo').AsInteger := iCnt;
                Mem.FieldByName('SumKbn').AsInteger := GetFld('SumKbn').AsInteger;
                Mem.FieldByName('GCode').AsString := fnHojyoMA_CodeEdit(GetFld('GCode').AsString);
                Mem.FieldByName('LongName').AsString := GetFld('LongName').AsString;
                Mem.FieldByName('SimpleName').AsString := GetFld('SimpleName').AsString;
                Mem.FieldByName('NCode').AsFloat := GetFld('NCode').AsFloat;
                Mem.FieldByName('SumNCode').AsFloat := GetFld('SumNCode').AsFloat;
                Mem.FieldByName('EntNo').AsInteger := GetFld('EntNo').AsInteger;
                Mem.FieldByName('UpdDateTM').AsDateTime := GetFld('UpdDateTM').AsDateTime;
                Mem.FieldByName('InsDateTM').AsDateTime := GetFld('InsDateTM').AsDateTime;

                if Mem.FieldByName('SumKbn').AsInteger <> 0 then
                    Mem.FieldByName('Fusen').Assign(Image_Goukei.Picture.Bitmap)
                else
                    Mem.FieldByName('Fusen').Assign(Image_Jitsuzai.Picture.Bitmap);
                Mem.Post;
                Next;
                inc(iCnt);
            end;
        end;

    finally
        QueryDispose(Qry);

        DSource.DataSet := Mem;
        if Mem.RecordCount <> 0 then
            Mem.First;
        DBGrid.EndUpdate;
        Mem.EnableControls;
        MemData_EventCtrl(Mem,True);
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドラッグ開始イベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridStartDrag(Sender: TObject;
  var DragObject: TDragObject);
var
    Mem:TdxMemData;
    DBGrid : TdxDBGrid;
begin

	m_DragCtlName := TdxDBGrid(m_AcControl).Name;
    m_HojyoTree_Drag.DspNo := MemKasanChild.FieldByName('DspNo').AsInteger;
    Mem := MemKasanChild;
    DBGrid := TdxDBGrid(Sender);

    DBGrid_EventCtrl(DBGrid,False);  // グリッドのイベント無効化

    if m_HojyoTree_Drag.HojyoMA <> nil then
    begin
        m_HojyoTree_Drag.HojyoMA.Free;
        m_HojyoTree_Drag.HojyoMA := nil;
    end;

    if m_HojyoTree_Drag.HojyoTree <> nil then
    begin
        m_HojyoTree_Drag.HojyoTree.Free;
        m_HojyoTree_Drag.HojyoTree := nil;
    end;

    m_HojyoTree_Drag.HojyoMA := fnHojyoMA_GetData(Mem.FieldByName('NCode').AsFloat);

    m_HojyoTree_Drag.HojyoTree := THojyoTree.Create();

    with m_HojyoTree_Drag.HojyoTree do
    begin
        MasterKbn := m_nMasterDivision;
        PatternNo := Mem.FieldByName('PatternNo').AsInteger;
        SumNCode := Mem.FieldByName('SumNCode').AsFloat;
        EntNo := Mem.FieldByName('EntNo').AsInteger;
        BasedNCode := Mem.FieldByName('NCode').AsFloat;
        AddKbn := Mem.FieldByName('AddKbn').AsInteger;
        UpdDateTM := now;
        UpdTantoNCode := m_TantoNCode;
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドラッグオーバーイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridDragOver(Sender, Source: TObject; X,
  Y: Integer; State: TDragState; var Accept: Boolean);
begin
	Accept := true;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドラッグ終了イベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridEndDrag(Sender, Target: TObject; X, Y: Integer);
var
    Mem:TdxMemData;
    DBGrid : TdxDBGrid;
begin
    Mem := MemKasanChild;
    DBGrid := TdxDBGrid(Sender);
	m_DragCtlName := '';
    DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
    MemData_EventCtrl(Mem,True);    // MemDataのPostイベント有効にする
    DBGrid_EventCtrl(DBGrid,True);    // MemDataのPostイベント有効にする

    if m_HojyoTree_Drag.HojyoTree <> nil then
    begin
        m_HojyoTree_Drag.HojyoTree.Free();
        m_HojyoTree_Drag.HojyoTree := nil;
    end;

    if m_HojyoTree_Drag.HojyoMA <> nil then
    begin
        m_HojyoTree_Drag.HojyoMA.Free();
        m_HojyoTree_Drag.HojyoMA := nil;
    end;
end;

// -----------------------------------------------------------------------------
//  加算元(子)グリッドのドロップイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridDragDrop(Sender, Source: TObject; X,
  Y: Integer);
var
	iNo,
	iNoSave,
	iEntNo,
	iEntNoSave,
	iEntNoPrev,
	iDragNo,
	iWk,
	i,
	iRecCount	: Integer;
	DBGrid : TdxDBGrid;
    Mem : TdxMemData;
    iSumNCode : Extended;
    iPatternNo : Integer;
begin

    DBGrid := Kasan_Child_DBGrid;
    Mem := MemKasanChild;

	if m_DragCtlName = DBGrid.Name then
	begin
		iRecCount := Mem.RecordCount;				// 全件数
		iDragNo := m_HojyoTree_Drag.DspNo;						// ﾄﾞﾗｯｸﾞしたﾚｺｰﾄﾞのNO
		iNo := Mem.FieldByName('DspNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のNO
		iNoSave := Mem.FieldByName('DspNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のNO
		iEntNo := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
		iEntNoSave := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
		iEntNoPrev := 0;
		if iNo <> iRecCount then						// Dropした場所は最終行ではない
		begin
			if iDragNo < iNoSave then						// 上から下に移動した時
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Next;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Prior;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end
			else
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Prior;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Next;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end;
		end
		else
		begin
			iEntNo := iEntNo + 100;
		end;

		if (iNo = 0) or (iNo = iDragNo) then			// 新規の場所にDropした 又は
			Abort;										// 元いたNOにDropした

		// 間に挿入できなくなったら、出力順NOの振り直しを行う
		if (iEntNo = iEntNoPrev) or (iEntNo = iEntNoSave) then
		begin
            iSumNCode := Mem.FieldByName('SumNCode').AsFloat;
            iPatternNo := Mem.FieldByName('PatternNo').AsInteger;

			if not fnKasan_ResetEntNo(iPatternNo,iSumNCode) then
				exit;

            MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化

            Kasan_CreateChildGrid(iSumNCode);  // 加算元(子)グリッド作成

            MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す

			Mem.RecNo	:=	iNo;						// Dropしたﾚｺｰﾄﾞに戻る
			iEntNo := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所のEntNo
			iEntNoPrev := 0;
			if iDragNo < iNoSave then						// 上から下に移動した時
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Next;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Prior;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end
			else
			begin
				if Mem.RecNo > 1 then
				begin
					Mem.Prior;
					iEntNoPrev := Mem.FieldByName('EntNo').AsInteger;	// ﾄﾞﾛｯﾌﾟした場所の前のEntNo
					Mem.Next;
				end;
				iEntNo := (iEntNo + iEntNoPrev) div 2;
			end;
		end;

		iRecCount := Mem.RecordCount;				// 全件数

//<出力順NO>↓
		// ①ﾄﾞﾗｯｸﾞしたﾚｺｰﾄﾞのNoを一旦×999999→999999999に変更し、ﾒﾓﾃﾞｰﾀから削除
		Mem.RecNo	:=	iDragNo;					// Dragしたﾚｺｰﾄﾞに戻る

		Mem.Delete;								// DragしたﾚｺｰﾄﾞをMomから削除

        fnKasan_Delete(m_HojyoTree_Drag.HojyoTree);  // DragしたﾚｺｰﾄﾞをHojyoTreeから削除

		// ②間のﾚｺｰﾄﾞのNoを＋(－)１
		if iDragNo < iNoSave then						// 上から下に移動した時
		begin
            MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化
			for i := Mem.FieldByName('DspNo').AsInteger to iNo do
			begin
				Mem.Edit;							// 編集ﾓｰﾄﾞ

				iWk := Mem.FieldByName('DspNo').AsInteger - 1;	// NO <-- 元NO-1
				Mem.FieldByName('DspNo').AsInteger := iWk;
				Mem.Post;
				Mem.Next;
			end;
            MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す
		end
		else											// 下から上に移動した時
		begin
			if iDragNo <> iRecCount then				// Dragしたﾚｺｰﾄﾞは最終行ではない
				Mem.Prior;

            MemData_EventCtrl(Mem,False);    // MemDataのPostイベント無効化
			for i := Mem.FieldByName('DspNo').AsInteger downto iNo do
			begin
				Mem.Edit;							// 編集ﾓｰﾄﾞ

				iWk := Mem.FieldByName('DspNo').AsInteger + 1;		// NO <-- 元NO+1
				Mem.FieldByName('DspNo').AsInteger := iWk;
				Mem.Post;
				Mem.Prior;
			end;
            MemData_EventCtrl(Mem,True);     // MemDataのPostイベント元に戻す

			if iNo <> 1 then
				Mem.Next;
		end;

		// ③ﾄﾞﾗｯｸﾞしたﾚｺｰﾄﾞをﾄﾞﾛｯﾌﾟ先のNoでWrite
		if iNo <> iRecCount then						// Dropした場所は最終行ではない
			Mem.Insert							// ﾒﾓﾘ上はｲﾝｻｰﾄﾓｰﾄﾞ
		else
			Mem.Append;							// ﾒﾓﾘ上は追加ﾓｰﾄﾞ


        with m_HojyoTree_Drag do
        begin
            Mem.FieldByName('DspNo').AsInteger		    := iNo;
            Mem.FieldByName('EntNo').AsInteger		    := iEntNo;
            Mem.FieldByName('PatternNo').AsInteger		:= HojyoTree.PatternNo;
            Mem.FieldByName('SumNCode').AsFloat	        := HojyoTree.SumNCode;
            Mem.FieldByName('NCode').AsFloat		    := HojyoTree.BasedNCode;
            Mem.FieldByName('GCode').AsString		    := fnHojyoMA_CodeEdit(HojyoMA.GCode);
            Mem.FieldByName('LongName').AsString		:= HojyoMA.LongName;
            Mem.FieldByName('SimpleName').AsString		:= HojyoMA.SimpleName;
            Mem.FieldByName('AddKbn').AsInteger		    := HojyoTree.AddKbn;
            Mem.FieldByName('UpdDateTM').AsDateTime		:= HojyoTree.UpdDateTM;
            Mem.FieldByName('InsDateTM').AsDateTime		:= HojyoTree.InsDateTM;
            Mem.FieldByName('NewData').AsBoolean		:= True;
        end;
		Mem.Post;

        DBGridChangeNodeEx(DBGrid);  //ChangeNodeExイベントの呼び出し
	end;

    DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();    
end;

// -----------------------------------------------------------------------------
//  加算先(親)グリッドの作成
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.Kasan_CreateParentGrid();
var
    Qry : TMQuery;
    DBGrid : TdxDBGrid;
    Mem : TdxMemData;
    DSource : TDataSource;
begin

    DBGrid := Kasan_Parent_DBGrid;
    Mem := MemKasanParent;
    DSource := dsKasanParent;

    DSource.DataSet := nil;

    DBGrid.BeginUpdate;

    Mem.Close;
    Mem.Open;

	Mem.DisableControls;

    Qry := fnHojyoMA_GetGoukei();

    if Qry = nil then Exit;

    try
        with Qry do
        begin
            While EOF = False do
            begin
                Mem.Append;
                Mem.FieldByName('GCode').AsString := fnHojyoMA_CodeEdit(GetFld('GCode').AsString);
                Mem.FieldByName('LongName').AsString := GetFld('LongName').AsString;
                Mem.FieldByName('SimpleName').AsString := GetFld('SimpleName').AsString;
                Mem.FieldByName('NCode').AsFloat := GetFld('NCode').AsFloat;
                Mem.FieldByName('Fusen').Assign(Image_Goukei.Picture.Bitmap);

                Mem.Post;
                Next;
            end;
        end;

    finally
        QueryDispose(Qry);

        DSource.DataSet := Mem;
        if Mem.RecordCount <> 0 then
            Mem.First;
        DBGrid.EndUpdate;
        Mem.EnableControls;
    end;
end;

// -----------------------------------------------------------------------------
//  検索エクスプローラー表示
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.ShowExplorer(Send_Exp:TSend_Exp;var Rcv_Exp:TRcv_Exp);
var
    lvExpSend:  rcJNTExpSend;
    lvExpRecv:  rcJNTExpRecv;
    iExpRtn:    Integer;
begin
    Rcv_Exp.GCode := '';
    Rcv_Exp.LongName := '';
    Rcv_Exp.SimpleName := '';

    fnJNTExpMakeParam(@lvExpSend);   //ﾊﾟﾗﾒｰﾀ初期設定
    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec    :=  m_pMyAppRecord;       //MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB        :=  @dbCorp_Select;           //TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB        :=  ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD        :=  ComArea.SystemArea.SysColorD;

    if Send_Exp.TableName = 'HojyoMA' then
    begin
        lvExpSend.MasterKbn     :=  m_nMasterDivision;         //マスター区分
        lvExpSend.TBarNM        :=  MasterInfo_DMemDataJHojyoName.AsString + '検索ｴｸｽﾌﾟﾛｰﾗ';
    end;

    lvExpSend.ModulKbn      :=  0;                  //モジュール区分
    lvExpSend.PatternNo     :=  1;                  //マスター区分

    lvExpSend.TableName     :=  Send_Exp.TableName;
    lvExpSend.TrRootCaption :=  MasterInfo_DMemDataJHojyoName.AsString;

    lvExpSend.WhereStr := Send_Exp.Where;

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);
    if iExpRtn <>1 then  //ｷｬﾝｾﾙ
        Exit;

    if Length(Trim(lvExpRecv.GCode))>0 then     //中身あり?
    begin
        Rcv_Exp.GCode := lvExpRecv.GCode;
        Rcv_Exp.LongName := lvExpRecv.Nm;
        Rcv_Exp.SimpleName := lvExpRecv.Nmk;
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのクリックイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridCodeEditButtonClick(Sender: TObject);
var
    Send_Exp:TSend_Exp;
    Rcv_Exp:TRcv_Exp;
    Mem : TdxMemData;
begin
    if m_AcControl = Kasan_Child_DBGrid then
    begin
        Mem := MemKasanChild;

        Send_Exp.TableName := 'HojyoMA';
        Send_Exp.Where := 'HojyoMA.RDelKBN = 0 and HojyoMA.MasterKbn ='+IntToStr(m_nMasterDivision);
        ShowExplorer(Send_Exp,Rcv_Exp);

        if Rcv_Exp.GCode <> '' then
        begin
            Mem.Open;
            Mem.Edit;
            Mem.FieldByName('GCode').AsString	:=	fnHojyoMA_CodeEdit(Rcv_Exp.GCode);
            Mem.FieldByName('LongName').AsString	:=	Rcv_Exp.LongName;
            Mem.FieldByName('SimpleName').AsString	:=	Rcv_Exp.SimpleName;
        end;
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのMouseDownイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
    DBGrid  :   TdxDBGrid;
begin
    DBGrid := TdxDBGrid(Sender);

    DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
end;

// -----------------------------------------------------------------------------
//  PopupMenuのClickイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.PMPopup(Sender: TObject);
begin
    if m_AcControl = Kasan_Child_DBGrid then DBGridChangeNodeEx(Kasan_Child_DBGrid);
end;

// -----------------------------------------------------------------------------
//  TMQueryの破棄
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.QueryDispose(var Qry:TMQuery);
begin
    if Assigned(Qry) then
    begin
        Qry.Close();
        Qry.Free();
        Qry := nil;
    end;
end;

// -----------------------------------------------------------------------------
//  グリッドのCustomDrawCellイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.DBGridCustomDrawCell(Sender: TObject;
  ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
var
    Mem : TdxMemData;
begin
    Mem := MemKasanParent;

	if (ANode.Focused) then
    begin
    	if Mem.RecordCount <> 0 then			// ｸﾞﾘｯﾄﾞにﾃﾞｰﾀが表示されているとき
        begin
    											// ﾌｫｰｶｽ色にする
    		AColor      := rcCOMMONAREA(m_pMyAppRecord^.m_pCommonArea^).SysFocusColor;
        	AFont.Color := clBlack;
    	end;
    end;
end;

// -----------------------------------------------------------------------------
//  ツリービューのMouseDownイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.TreeViewMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
    // 加算体系イメージのツリービューにはフォーカスをあてない
    if m_AcControl is TdxDBGrid then
    begin
        DBGrid_EventCtrl(TdxDBGrid(m_AcControl),False);
        m_AcControl.SetFocus;
        DBGrid_EventCtrl(TdxDBGrid(m_AcControl),True);
    end
    else
        m_AcControl.SetFocus;

    abort;
end;

// -----------------------------------------------------------------------------
//  HojyoTreeの登録件数を返す
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_Count(SumNCode:Extended=-1):Integer;
var
    Qry : TMQuery;
begin
    result := 0;
    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        with Qry do
        begin
            SQL.Clear;
            SQL.Add('Select Count(EntNo) as Kensu from HojyoTree Where MasterKbn = :pMKBN');

            if SumNCode <> -1 then
            begin
                SQL.Add(' and SumNCode = :SumNCode');
                SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
            end;

            SetFld('pMKBN').AsInteger := m_nMasterDivision;

            if not Open() then
            begin
        		MjsMessageBox(Self,'登録件数の取得に失敗しました。', mjError, mjDefOk);
                Exit;
            end;

            if not EOF then
                result := GetFld('Kensu').AsInteger;
        end;
    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  TMSpeedButtonクリックイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.BSpeedButtonClick(Sender: TObject);
    // -----------------------------------------------------------------------------
    //  並び替えボタン(加算体系用タブ用)
    // -----------------------------------------------------------------------------
    procedure KasanSort();
    var
        iSumNCode : Extended;
        Mem : TdxMemData;
        iRet : Integer;
    begin
        iSumNCode := 0;
        Mem := MemKasanParent;

        ShowDLG(DLG_SORT,iRet);

        if iRet = mrCancel then Exit;

        if iRet = mrYes then
        begin
            iSumNCode := -1;
        end
        else if iRet = mrNo then
        begin
            iSumNCode := Mem.FieldByName('NCode').AsFloat;
        end;

        if not fnKasan_Sort(ProgressBar1,iSumNCode) then
        begin
            MjsMessageBox(Self,'並び替えに失敗しました。'+#13#10+'並び替えは行われませんでした。', mjError, mjDefOk);
            Exit;
        end;

        if iRet = mrYes then
        begin
            DBGrid_EventCtrl(Kasan_Parent_DBGrid,False);
            MemData_EventCtrl(Mem,False);
            Mem.First;
            DBGrid_EventCtrl(Kasan_Parent_DBGrid,True);
            MemData_EventCtrl(Mem,True);
        end;

        DBGridChangeNodeEx(Kasan_Parent_DBGrid);    // 合計マスター内はグリッドの読み直しを行う

    end;

    // -----------------------------------------------------------------------------
    //  設定ボタン
    // -----------------------------------------------------------------------------
    procedure SetUp();
    var
    	JNTCRP018001SetUp: TJNTCRP018001SetUpDlgf;
        iRet        :   Integer;
    begin
        JNTCRP018001SetUp := nil;
        try
            JNTCRP018001SetUp := TJNTCRP018001SetUpDlgf.fnCreateDialog(self,m_pMyAppRecord);
            JNTCRP018001SetUp.Caption := '起動設定';

//<EXP> DEL            JNTCRP018001SetUp.chb_Syosai.Checked := m_APGFile.GetValue(m_DEFMODE) = '1';
            JNTCRP018001SetUp.chb_Syosai.Checked := DefMode = '1';  //<EXP> ADD

            iRet := JNTCRP018001SetUp.ShowModal();

            if (iRet = mrOK) then
            begin
//<EXP> MOD St
{
                if JNTCRP018001SetUp.chb_Syosai.Checked then m_APGFile.SetValue(m_DEFMODE,'1')   // 詳細起動
                else                                         m_APGFile.SetValue(m_DEFMODE,'0');  // 一覧起動
}
                if JNTCRP018001SetUp.chb_Syosai.Checked then DefMode := '1'   // 詳細起動
                else                                         DefMode := '0';  // 一覧起動
//<EXP> MOD Ed
//<EXP> DEL                SetGuidance(m_APGFile.ErrMSG());

//<EXP> DEL                if m_APGFile.ErrMSG() = '' then
//<EXP> DEL                begin
                    if JNTCRP018001SetUp.chb_Syosai.Checked then SetGuidance('次回より詳細画面で起動します。')
                    else                                         SetGuidance('次回より一覧画面で起動します。');
//<EXP> DEL                end;
            end;

        finally
            JNTCRP018001SetUp.Release;
        end;
    end;

    // -----------------------------------------------------------------------------
    //  削除ボタン(加算体系用タブ用)
    // -----------------------------------------------------------------------------
    procedure KasanDelete();
    var
        HojyoTree,
        HojyoTree2 : THojyoTree;
        Mem : TdxMemData;
        DBGrid : TdxDBGrid;
        iNo,
        iCnt,
        iRecNo,
        iParentCount : Integer;
        Qry_Parent : TMQuery;
    begin
        HojyoTree := nil;
        Mem := MemKasanChild;
        DBGrid := Kasan_Child_DBGrid;
        iParentCount := 0;
        Qry_Parent := nil;
//        HojyoTree2 := nil;

        try
            if Mem.FieldByName('GCode').AsString <> '' then
            begin
                HojyoTree := THojyoTree.Create;

                with HojyoTree do
                begin
                    MasterKbn := m_nMasterDivision;
                    PatternNo := Mem.FieldByName('PatternNo').AsInteger;
                    SumNCode := Mem.FieldByName('SumNCode').AsFloat;
                    EntNo := Mem.FieldByName('EntNo').AsInteger;
                    BasedNCode := Mem.FieldByName('NCode').AsFloat;
                    AddKbn := Mem.FieldByName('AddKbn').AsInteger;
                    UpdDateTM := now;
                    UpdTantoNCode := m_TantoNCode;
                end;

                fnKasan_Delete(HojyoTree);
                
                Mem.Delete();

                MemData_EventCtrl(Mem,False);

                iCnt := Mem.RecordCount;

                TPDelChild.Enabled := iCnt = 0;

                if iCnt = 0 then Exit;

                // 途中のNOを削除したとき,以降のNOを振り直す
                if Mem.FieldByName('DspNo').AsInteger <> Mem.RecNo then
                begin
                    DBGrid_EventCtrl(DBGrid,False);
                    iRecNo := Mem.RecNo;
                    while True do
                    begin
                        Mem.Edit;
                        iNo := Mem.FieldByName('DspNo').AsInteger;
                        Mem.FieldByName('DspNo').AsInteger := iNo-1;
                        Mem.Post;
                        if iCnt = Mem.RecNo then		// 最終行まで処理した
                            break;
                        Mem.Next;
                    end;
                    DBGrid_EventCtrl(DBGrid,True);
                    Mem.RecNo := iRecNo;
                end;
            end;

            // 加算先(親)情報の取得
            Qry_Parent := fnKasan_GetParent(HojyoTree.BasedNCode);

            if Qry_Parent <> nil then
            begin
                iParentCount := Qry_Parent.RecordCount;
                QueryDispose(Qry_Parent);
            end;

            if iParentCount = 0 then
            begin
                // 総合計に存在しているか？
                HojyoTree2 := fnKasan_GetData(HojyoTree.BasedNCode,0);
                if HojyoTree2 <> nil then
                    HojyoTree2.Free
                // 総合計に作成する
                else
                begin
                    with HojyoTree do
                    begin
                        SumNCode := 0;
                        EntNo := fnKasan_GetMaxEntNo(0) + 100;
                        UpdDateTM := now;
                        InsDateTM := now;
                        fnKasan_Update(HojyoTree,True);
                    end;
                end;
            end;

            DBGridChangeNodeEx(DBGrid);  // イベント発生にてTreeView情報を読み込む

            if not Assigned(m_SrchHojyoMA) then Exit;  // まだ生成されていなければ、ここで終了

            // 検索用加算先の作成
            if (m_SrchHojyoMA.NCode = HojyoTree.BasedNCode) then Kasan_CreateSearchParent();

            if Length(m_NCodeArray) <= 0 then
            begin
                fnSetFncType(false,0);
                MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);
            end;

        finally
            if HojyoTree <> nil then HojyoTree.Free;

            MemData_EventCtrl(Mem,True);
        end;
    end;

    // -----------------------------------------------------------------------------
    //  検索ボタン
    // -----------------------------------------------------------------------------
    procedure KasanSearch();
    var
        Send_Exp:TSend_Exp;
        Rcv_Exp:TRcv_Exp;
        HojyoMA : THojyoMA;
    begin

        try
            Send_Exp.TableName := 'HojyoMA';
            Send_Exp.Where := 'HojyoMA.RDelKBN = 0 and HojyoMA.MasterKbn = '+IntToStr(m_nMasterDivision);

            ShowExplorer(Send_Exp,Rcv_Exp);  // 検索EXP

            if Rcv_Exp.GCode = '' then Exit;

            HojyoMA := fnHojyoMA_GetData(Rcv_Exp.GCode);

            if HojyoMA = nil then Exit;

            if m_SrchHojyoMA <> nil then
            begin
                m_SrchHojyoMA.Free();
                m_SrchHojyoMA := nil;
            end;

            m_SrchHojyoMA := HojyoMA;

            Kasan_CreateSearchParent();  // 検索用加算先の作成

            if Length(m_NCodeArray) > 0 then
            begin
                fnKasan_Search(m_NCodeArray[0]);
                fnSetFncType(true,3);
                Kasan_Child_DBGrid.SetFocus;
                Kasan_Child_DBGrid.DataSource.DataSet.FieldByName('GCode').FocusControl();
            end
            else
            begin
                fnSetFncType(false,0);
                MjsMessageBoxEx(Self,'見つかりませんでした。','検索',mjInformation,mjOK,mjDefOK);
            end;

            MSPFunctionBar.CopyFuncData(uvFncInfo.Caption);

        finally

        end;
    end;

    // -----------------------------------------------------------------------------
    //  一覧(詳細)ボタン
    // -----------------------------------------------------------------------------
    procedure DspChange();
    var
        iRet : Integer;
        iSVsaveMode:Integer;
    begin
        iRet := 0;
        if BSpeedButtonIS.Caption = '詳細(&T)' then  // 一覧 ⇒ 詳細
        begin
            TreeView_EventCtrl(VTreeView,False);
            PPanelTree.Visible := False;
            Root_PMTab.Items[PAGE_KASAN].Visible := True;
            BSpeedButtonSort.Enabled := False;
            BSpeedButtonFind.Enabled := False;
            BSpeedButtonISClick(Sender);   // 既存のクリックイベント実行
            Root_PMTab.BorderCaption := '';      // タブのキャプションはクリアしておく
            Root_PMTab.Items[PAGE_GOKEI].Enabled := true    // 無効になっている場合があるため。。。
        end
        else                                    // 詳細 ⇒ 一覧
        begin
            if IsLimitCount() then
                iRet := MjsMessageBoxEx(Self, '画面表示に時間がかかる場合がありますが、よろしいですか？', m_sProgramName, mjWarning, mjYesNo, mjDefNo);

            if (iRet = mrYes) or (not IsLimitCount() = True) then
            begin
                if Root_PMTab.Items.Selected = PAGE_KASAN then Root_PMTab.Items.Selected := PAGE_JITUZAI;

                TreeView_EventCtrl(VTreeView,True);
                PPanelTree.Visible := True;
                Root_PMTab.Items[PAGE_KASAN].Visible := False;
                Root_PMTab.Items[0].SyncControl	:= Jituzai_PPanel_Grid;
                Jituzai_PPanel_Card.Visible 	:= False;
                Root_PMTab.Items[1].SyncControl	:= Goukei_PPanel_Grid;
                Goukei_PPanel_Card.Visible 	:= False;
                PPanelKasan.Visible := False;
                Jituzai_PPanel_Grid.Visible 	:= True;
                BSpeedButtonDel.OnClick := BSpeedButtonDelClick;
                BSpeedButtonSort.OnClick := BSpeedButtonSortClick;
                BSpeedButtonFind.OnClick := BSpeedButtonFindClick;
                BSpeedButtonSort.Enabled := True;
                BSpeedButtonFind.Enabled := True;

                BSpeedButtonIS.Caption := '詳細(&T)';

                iSVsaveMode := GetStartMode();
                SetStartMode(0);
                ECombo_Header.OnChange(ECombo_Header);
                SetStartMode(iSVsaveMode);
            end;
        end;

    end;

// -----------------------------------------------------------------------------
//  ここからメイン
// -----------------------------------------------------------------------------
begin

    if Sender = BSpeedButtonSort then      // 並び替え
    begin
        KasanSort();
        Exit;
    end;

    if Sender = B_SetUp then     // 設定
    begin
        SetUp();
        Exit;
    end;

    if (Sender = BSpeedButtonDel) or (Sender = TPDelChild) then    // 削除
    begin
        KasanDelete();
        Exit;
    end;

    if Sender = BSpeedButtonFind then    // 検索
    begin
        KasanSearch();
        Exit;
    end;

    if Sender = BSpeedButtonIS then    // 一覧(詳細)
    begin
        DspChange();
        Exit;
    end;

end;

// -----------------------------------------------------------------------------
//  HojyoTreeの並び替え
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_Sort(Prog:TProgressBar;SumNCode:Extended=-1):Boolean;
var
	iEntNo		:	Integer;
	QueryRead	:	TMQuery;
	QueryWrite	:	TMQuery;
	sSvSumCode	:	Integer;
	iCount		:	Integer;
begin
    result := False;
    iEntNo := 0;
	QueryRead		:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryRead);
	QueryWrite		:= TMQuery.Create(Self);
	MDataModule.SetDBInfoToQuery(dbCorp_Select, QueryWrite);

	SessionPractice(C_ST_PROCESS);

    try

        MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

        Prog.Visible := True;

        // 加算体系更新下準備
        QueryWrite.Close;
        QueryWrite.SQL.Clear;		 							// QueryFree 初期化
        QueryWrite.SQL.Add('Update HojyoTree Set EntNo = EntNo * -1 Where MasterKbn = :pMKBN and EntNo > 0');

        if SumNCode <> -1 then
        begin
            QueryWrite.SQL.Add('and SumNCode = :SumNCode');
            QueryWrite.SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
        end;

        QueryWrite.SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
        if (QueryWrite.ExecSQL = False) then
        begin
            ErrorMessageDsp(QueryWrite);
            MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
            Exit;
        end;

        Prog.Max := fnKasan_Count(SumNCode);
        Prog.Position := 0;
        iCount := 0;

        // 加算体系の読み込み
        QueryRead.Close;
        QueryRead.SQL.Clear;		 							// QueryFree 初期化
        QueryRead.SQL.Add('Select HT.SumNCode, HT.BasedNCode, HT.EntNo from HojyoTree HT  Left Outer Join HojyoMA MT');
        QueryRead.SQL.Add('on HT.BasedNCode = MT.NCode');
        QueryRead.SQL.Add('And HT.MasterKbn = MT.MasterKbn');
        QueryRead.SQL.Add('Where HT.MasterKbn = :pMKBN');

        if SumNCode <> -1 then
        begin
            QueryRead.SQL.Add('and HT.SumNCode = :SumNCode');
            QueryRead.SetFld('SumNCode').AsString := FormatFloat('0',SumNCode);
        end;

        QueryRead.SQL.Add('order by HT.SumNCode, MT.GCode');

        QueryRead.SetFld('pMKBN').AsInteger	    := m_nMasterDivision;

        if not QueryRead.Open then
            showmessage(QueryRead.Errors.Text);
        QueryRead.FetchAll;

        sSvSumCode := -1;
        while QueryRead.Eof = False do
        begin
            if sSvSumCode <> QueryRead.GetFld('SumNCode').AsInteger then
                iEntNo := 100;

            QueryWrite.Close;
            QueryWrite.SQL.Clear;		 							// QueryFree 初期化
            QueryWrite.SQL.Add('Update HojyoTree Set EntNo =:NewENT Where MasterKbn = :pMKBN and SumNCode =:SUM and BasedNCode =:BASED and EntNo =:ENT');
            QueryWrite.SetFld('pMKBN').AsInteger	    := m_nMasterDivision;
            QueryWrite.SetFld('NewENT').AsInteger := iEntNo;
            QueryWrite.SetFld('SUM').AsString := QueryRead.GetFld('SumNCode').AsString;
            QueryWrite.SetFld('BASED').AsString := QueryRead.GetFld('BasedNCode').AsString;
            QueryWrite.SetFld('ENT').AsInteger := QueryRead.GetFld('EntNo').AsInteger;
            if (QueryWrite.ExecSQL = False) then
            begin
                ErrorMessageDsp(QueryWrite);
                MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                Exit;
            end;

            sSvSumCode := QueryRead.GetFld('SumNCode').AsInteger;
            iEntNo := iEntNo + 100;

            QueryRead.Next;

            Inc(iCount);
            Prog.Position := iCount;
        end;

        Prog.Visible := False;

        MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)
        result := True;
    finally
        QueryDispose(QueryRead);										// Query 開放
        QueryDispose(QueryWrite);										// Query 開放

        SessionPractice(C_ED_PROCESS);
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系エラーチェック(登録時)
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnKasan_InsValidation(HojyoTree:THojyoTree;var ErrMsg:String);
var
    MST_Child  : THojyoMA;
    HojyoTree_chk : THojyoTree;
    Qry : TMQuery;
    pSearchParent : ^Extended;  
    ParentList : TList;
    idx : Integer;       
begin
    ErrMsg := '';
    Qry := nil;
    MST_Child := nil;
    HojyoTree_chk := nil;
    idx := 0;
    ParentList := TList.Create();  

    try
        if HojyoTree = nil then
        begin
// <291> MOD st
//            ErrMsg := 'マスタが生成されていません。';
            ErrMsg := 'マスターが生成されていません。';
// <291> MOD ed
            Exit;
        end;

        if HojyoTree.BasedNCode = 0 then
        begin
            ErrMsg := 'コードに誤りがあります。';
            Exit;
        end;

        if HojyoTree.SumNCode = HojyoTree.BasedNCode then
        begin
            ErrMsg := '加算先と同じコードの登録は出来ません。';
            Exit;
        end;

        // 加算先に既に登録済み？
        HojyoTree_chk := fnKasan_GetData(HojyoTree.BasedNCode,HojyoTree.SumNCode);
        if HojyoTree_chk <> nil then
        begin
            ErrMsg := '同一コードが登録済みです。';
            Exit;
        end;

        MST_Child := fnHojyoMA_GetData(HojyoTree.BasedNCode);

        if MST_Child <> nil then
        begin
            // 子供が合計の場合、合計の子供に加算先が含まれているか？(循環チェック)
            if MST_Child.SumKbn = 1 then
            begin
                new(pSearchParent);
                pSearchParent^ := MST_Child.NCode;
                ParentList.Add(pSearchParent);

                while (idx <= (ParentList.Count-1)) do
                begin
                    pSearchParent := ParentList.Items[idx];
                    Qry := fnKasan_GetChild(pSearchParent^);
                    if Qry <> nil then
                    begin
                        with Qry do
                        begin
                            while EOF = False do
                            begin
                                // 子供に加算先合計が存在している？
                                if GetFld('NCode').AsFloat = HojyoTree.SumNCode then
                                begin
                                    ErrMsg := '加算体系が重複しています。';
                                    Exit;
                                end;
                                // 合計のときリストに追加
                                if (GetFld('SumKbn').AsInteger = 1) then
                                begin
                                    new(pSearchParent);
                                    pSearchParent^ := GetFld('NCode').AsFloat;
                                    ParentList.Add(pSearchParent);
                                end;
                                Next();
                            end;
                        end;
                        QueryDispose(Qry);
                    end;

                    inc(idx);
                end;
            end;
        end;
    finally
        if MST_Child <> nil then MST_Child.Free();

        if HojyoTree_chk <> nil then HojyoTree_chk.Free();

        QueryDispose(Qry);

        for idx := 0 to (ParentList.Count -1) do
        begin
            pSearchParent := ParentList.Items[idx];
            Dispose(pSearchParent);
        end;
        ParentList.Free();
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系エラーチェック(削除時)
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnKasan_DelValidation(HojyoTree:THojyoTree;var ErrMsg:String);
var
    Qry:TMQuery;
    MST_Child : THojyoMA;
begin
    ErrMsg := '';
    Qry := nil;
    MST_Child := nil;

    try
        if HojyoTree = nil then
        begin
// <291> MOD st
//            ErrMsg := 'マスタが生成されていません。';
            ErrMsg := 'マスターが生成されていません。';
// <291> MOD ed
            Exit;
        end;

        // 親が総合計の場合、他の親に加算しているかチェックする
        if HojyoTree.SumNCode = 0 then
        begin
            Qry := fnKasan_GetParent(HojyoTree.BasedNCode);

            if Qry <> nil then
            begin
                // 他の親に加算していない？
                if Qry.RecordCount <= 0 then
                begin
// <291> MOD st
//                    ErrMsg := '他の合計マスタに加算されていないため、削除できません。';
                    ErrMsg := '他の合計マスターに加算されていないため、削除できません。';
// <291> MOD ed
                    Exit;
                end;
            end;
        end;

        MST_Child := fnHojyoMA_GetData(HojyoTree.BasedNCode);

        if MST_Child <> nil then
        begin
            // 合計だった場合、加算元(子)が存在しているかチェックする
            if MST_Child.SumKbn = 1 then
            begin
                // 加算元(子)情報の取得
                Qry := fnKasan_GetChild(MST_Child.NCode);

                if Qry <> nil then
                begin
                    if Qry.RecordCount <> 0 then
                    begin
                        ErrMsg := '子となる加算先が登録されているため、削除できません。';
                        Exit;
                    end;
                end;
            end;
        end;
    finally
        if MST_Child <> nil then MST_Child.Free();

        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  加算体系の検索
// -----------------------------------------------------------------------------
function TJNTCRP018001f.fnKasan_Search(SumNCode:Extended):Boolean;
begin
    result := True;
    try
        if m_SrchHojyoMA = nil then Exit;

        MemData_EventCtrl(MemKasanParent,False);
        DBGrid_EventCtrl(Kasan_Parent_DBGrid,False);

        if SumNCode <> 0 then
        begin
            MemKasanParent.First;

            while MemKasanParent.EOF = False do
            begin
                if SumNCode = MemKasanParent.FieldByName('NCode').AsFloat then
                begin
                    break;
                end;

                MemKasanParent.Next;
            end;
        end
        // 総合計より検索
        else
        begin
            MemKasanParent.Last;
        end;

        DBGridChangeNodeEx(Kasan_Parent_DBGrid);

        MemData_EventCtrl(MemKasanChild,False);
        DBGrid_EventCtrl(Kasan_Child_DBGrid,False);

        MemKasanChild.First;

        // 加算元グリッドを検索コードまで行移動
        while MemKasanChild.EOF = False do
        begin
            if m_SrchHojyoMA.NCode = MemKasanChild.FieldByName('NCode').AsFloat then break;
            MemKasanChild.Next;
        end;

        DBGridChangeNodeEx(Kasan_Child_DBGrid);
    finally
        MemData_EventCtrl(MemKasanChild,True);
        DBGrid_EventCtrl(Kasan_Child_DBGrid,True);
        MemData_EventCtrl(MemKasanParent,True);
        DBGrid_EventCtrl(Kasan_Parent_DBGrid,True);
    end;
end;

// -----------------------------------------------------------------------------
//  詳細画面初回起動の基準となる件数以上か？
// -----------------------------------------------------------------------------
function TJNTCRP018001f.IsLimitCount():Boolean;
begin
    result := giAllCnt >= LIMIT_COUNT;
end;

// ----------------------------------------------------------------------------
// 加算体系の検索
// ----------------------------------------------------------------------------
procedure TJNTCRP018001f.FindHojyoMAExecute(Sender : TObject);
var
    sGCode : String;
    iCnt : Integer;
    HojyoMA : THojyoMA;
begin

    if m_SrchHojyoMA = nil then Exit;

    HojyoMA := nil;

    sGCode := MemKasanParent.FieldByName('GCode').AsString;

    for iCnt := 0 to High(m_NCodeArray) do
    begin
        try
            HojyoMA := fnHojyoMA_GetData(m_NCodeArray[iCnt]);

            if HojyoMA = nil then continue;

            if fnHojyoMA_CodeEdit(HojyoMA.GCode) > sGCode then
            begin
                fnKasan_Search(m_NCodeArray[iCnt]);
                Exit;
            end;
        finally
            HojyoMA.Free();
        end;
    end;

end;

// -----------------------------------------------------------------------------
//  検索用加算先親の作成
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.Kasan_CreateSearchParent();
var
    Qry : TMQuery;
    idx : Integer;
begin
    idx := 0;

    if m_SrchHojyoMA = nil then Exit;

    try
        Qry := nil;

        SetLength(m_NCodeArray,0);

        // 加算先の親を取得する
        Qry := fnKasan_GetParent(m_SrchHojyoMA.NCode);

        if Qry = nil then Exit;

        SetLength(m_NCodeArray,Qry.RecordCount);

        // 加算先の親をセット
        while Qry.EOF = False do
        begin
            m_NCodeArray[idx] := Qry.GetFld('NCode').AsFloat;
            Qry.Next;
            inc(idx);
        end;
    finally
        QueryDispose(Qry);
    end;
end;

// -----------------------------------------------------------------------------
//  StatusBarへセット
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.SetGuidance(Value:string);
begin
    SStatusBar.SimpleText := Value;
end;

// -----------------------------------------------------------------------------
//  StatusBarクリア
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.GuidanceClear();
begin
    SStatusBar.SimpleText := '';
end;

// -----------------------------------------------------------------------------
//  起動モード取得   0:一覧起動 1:詳細起動
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetStartMode():integer;
begin
    if (m_iStartMode = -1) then
    begin
//<EXP> DEL        m_iStartMode := StrToIntDef(m_APGFile.GetValue(m_DEFMODE),0);
        m_iStartMode := StrToIntDef(DefMode,0);  //<EXP> ADD
    end;

    result := m_iStartMode;
end;

// -----------------------------------------------------------------------------
//  起動モードセット
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.SetStartMode(Value:Integer);
begin
    m_iStartMode := Value;
end;

// -----------------------------------------------------------------------------
//  詳細モードならTrueを返す
// -----------------------------------------------------------------------------
function TJNTCRP018001f.IsSyosaiMode():Boolean;
begin
    result := False;
    if BSpeedButtonIS.Caption = '詳細(&T)' then Exit;
    result := True;
end;

// -----------------------------------------------------------------------------
//  合計ボタン類パネルのResizeイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.Goukei_PPanel_Card_2Resize(Sender: TObject);
begin
    // 更新・取消ボタン位置調整
    Goukei_BBitBtn_Cancel.Left := (Goukei_PPanel_Card_2.Width - 16) - Goukei_BBitBtn_Cancel.Width;
    Goukei_BBitBtn_Ok.Left := (Goukei_BBitBtn_Cancel.Left - Goukei_BBitBtn_Ok.Width) - 2;
end;
// -----------------------------------------------------------------------------
//  実在ボタン類パネルのResizeイベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.Jituzai_PPanel_Card_2Resize(Sender: TObject);
begin
    // 更新・取消ボタン位置調整
    Jituzai_BBitBtn_Cancel.Left := (Jituzai_PPanel_Card_2.Width - 16) - Jituzai_BBitBtn_Cancel.Width;
    Jituzai_BBitBtn_Ok.Left := (Jituzai_BBitBtn_Cancel.Left - Jituzai_BBitBtn_Ok.Width) - 2;
end;

//<272> ADD START
// -----------------------------------------------------------------------------
//   ライセンスチェック関数
// -----------------------------------------------------------------------------
function TJNTCRP018001f.IsExistLicense(aModuleCode: Integer): Boolean;
begin
	result := False;

    if (CheckModuleLicense(m_pMyAppRecord,aModuleCode)) then
    begin
    	// ライセンスあり
    	result := True;
    end;
end;
//<272> ADD END

//<MLXDEP>
//**********************************************************************
//*		Proccess	:	ツールバーの表示設定
//*		Name		:	IWATA(NTC)
//*		Date		:	2012/10/24
//*		Parameter	:
//*		Return		:
//**********************************************************************
procedure TJNTCRP018001f.ToolBarObjectMove;
var
	iLeft	: Integer;

	// 一行入力欄のLeftとVisible設定
	procedure TbMove(bVisible: Boolean; TbCtrl: TControl);
	begin
		TbCtrl.Visible	:= bVisible;

		if bVisible = True then
		begin
			TbCtrl.Left	:= iLeft;
			iLeft		:= iLeft + TbCtrl.Width;
		end;
	end;
begin
	iLeft 	:= BSpeedButtonEnd.Left;
	TbMove(True,					BSpeedButtonEnd);		// 終了
	TbMove(True,					BSpeedButtonPrn);		// 印刷
	TbMove(True,					BSpeedButtonChg);		// 切出
	TbMove(True,					BSpeedButtonDel);		// 削除
	TbMove(True,					LVStyleBar);			// 付箋
end;
//<MLXDEP>

//<FREE> ADD St
// -----------------------------------------------------------------------------
//   申請書情報セット(フリー項目)
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.setWfFreeItem(objRec: TPrjKojiAll);
begin
    with objRec do
    begin
        // フリー項目の更新フラグON・OFF
        UpdFreeFlg :=
            VFree1Flg or VFree2Flg or VFree3Flg or VFree4Flg or VFree5Flg or
            VFree6Flg or VFree7Flg or VFree8Flg or VFree9Flg or VFree10Flg or
            NFree1Flg or NFree2Flg or NFree3Flg or NFree4Flg or NFree5Flg or
            NFree6Flg or NFree7Flg or NFree8Flg or NFree9Flg or NFree10Flg or
            DFree1Flg or DFree2Flg or DFree3Flg;

        // 文字項目
        if VFree1Flg then freeItem.VFree1   := VFree1;
        if VFree2Flg then freeItem.VFree2   := VFree2;
        if VFree3Flg then freeItem.VFree3   := VFree3;
        if VFree4Flg then freeItem.VFree4   := VFree4;
        if VFree5Flg then freeItem.VFree5   := VFree5;
        if VFree6Flg then freeItem.VFree6   := VFree6;
        if VFree7Flg then freeItem.VFree7   := VFree7;
        if VFree8Flg then freeItem.VFree8   := VFree8;
        if VFree9Flg then freeItem.VFree9   := VFree9;
        if VFree10Flg then freeItem.VFree10 := VFree10;
        // 数字項目
        if NFree1Flg then freeItem.NFree1   := NFree1;
        if NFree2Flg then freeItem.NFree2   := NFree2;
        if NFree3Flg then freeItem.NFree3   := NFree3;
        if NFree4Flg then freeItem.NFree4   := NFree4;
        if NFree5Flg then freeItem.NFree5   := NFree5;
        if NFree6Flg then freeItem.NFree6   := NFree6;
        if NFree7Flg then freeItem.NFree7   := NFree7;
        if NFree8Flg then freeItem.NFree8   := NFree8;
        if NFree9Flg then freeItem.NFree9   := NFree9;
        if NFree10Flg then freeItem.NFree10 := NFree10;
        // 日付項目
        if DFree1Flg then freeItem.DFree1 := DFree1;
        if DFree2Flg then freeItem.DFree2 := DFree2;
        if DFree3Flg then freeItem.DFree3 := DFree3;

        freeChgItem.VFree1Flg	:= VFree1Flg;	//文字型フリー項目1
        freeChgItem.VFree2Flg	:= VFree2Flg;	//文字型フリー項目2
        freeChgItem.VFree3Flg	:= VFree3Flg;	//文字型フリー項目3
        freeChgItem.VFree4Flg	:= VFree4Flg;	//文字型フリー項目4
        freeChgItem.VFree5Flg	:= VFree5Flg;	//文字型フリー項目5
        freeChgItem.VFree6Flg	:= VFree6Flg;	//文字型フリー項目6
        freeChgItem.VFree7Flg	:= VFree7Flg;	//文字型フリー項目7
        freeChgItem.VFree8Flg	:= VFree8Flg;	//文字型フリー項目8
        freeChgItem.VFree9Flg	:= VFree9Flg;	//文字型フリー項目9
        freeChgItem.VFree10Flg	:= VFree10Flg;	//文字型フリー項目10
        freeChgItem.NFree1Flg	:= NFree1Flg;	//数字型フリー項目1
        freeChgItem.NFree2Flg	:= NFree2Flg;	//数字型フリー項目2
        freeChgItem.NFree3Flg	:= NFree3Flg;	//数字型フリー項目3
        freeChgItem.NFree4Flg	:= NFree4Flg;	//数字型フリー項目4
        freeChgItem.NFree5Flg	:= NFree5Flg;	//数字型フリー項目5
        freeChgItem.NFree6Flg	:= NFree6Flg;	//数字型フリー項目6
        freeChgItem.NFree7Flg	:= NFree7Flg;	//数字型フリー項目7
        freeChgItem.NFree8Flg	:= NFree8Flg;	//数字型フリー項目8
        freeChgItem.NFree9Flg	:= NFree9Flg;	//数字型フリー項目9
        freeChgItem.NFree10Flg	:= NFree10Flg;	//数字型フリー項目10
        freeChgItem.DFree1Flg	:= DFree1Flg;	//日付型フリー項目1
        freeChgItem.DFree2Flg	:= DFree2Flg;	//日付型フリー項目2
        freeChgItem.DFree3Flg	:= DFree3Flg;	//日付型フリー項目3
    end;
end;
// -----------------------------------------------------------------------------
//   申請書情報構造体への変換(フリー項目専門)
// -----------------------------------------------------------------------------
function TJNTCRP018001f.toPrjKojiAllOfFreeItem(qry: TMQuery): TPrjKojiAll;
begin
    if Assigned(qry) and (qry.Eof = false) then
    begin
        with qry do
        begin
            // 文字
            if not (GetFld('VFree1').IsNull or (GetFld('VFree1').AsString = '')) then
            begin
                result.VFree1Flg := true;
                result.VFree1 := GetFld('VFree1').AsString;
            end;

            if not (GetFld('VFree2').IsNull or (GetFld('VFree2').AsString = '')) then
            begin
                result.VFree2Flg := true;
                result.VFree2 := GetFld('VFree2').AsString;
            end;

            if not (GetFld('VFree3').IsNull or (GetFld('VFree3').AsString = '')) then
            begin
                result.VFree3Flg := true;
                result.VFree3 := GetFld('VFree3').AsString;
            end;

            if not (GetFld('VFree4').IsNull or (GetFld('VFree4').AsString = '')) then
            begin
                result.VFree4Flg := true;
                result.VFree4 := GetFld('VFree4').AsString;
            end;

            if not (GetFld('VFree5').IsNull or (GetFld('VFree5').AsString = '')) then
            begin
                result.VFree5Flg := true;
                result.VFree5 := GetFld('VFree5').AsString;
            end;

            if not (GetFld('VFree6').IsNull or (GetFld('VFree6').AsString = '')) then
            begin
                result.VFree6Flg := true;
                result.VFree6 := GetFld('VFree6').AsString;
            end;

            if not (GetFld('VFree7').IsNull or (GetFld('VFree7').AsString = '')) then
            begin
                result.VFree7Flg := true;
                result.VFree7 := GetFld('VFree7').AsString;
            end;

            if not (GetFld('VFree8').IsNull or (GetFld('VFree8').AsString = '')) then
            begin
                result.VFree8Flg := true;
                result.VFree8 := GetFld('VFree8').AsString;
            end;

            if not (GetFld('VFree9').IsNull or (GetFld('VFree9').AsString = '')) then
            begin
                result.VFree9Flg := true;
                result.VFree9 := GetFld('VFree9').AsString;
            end;

            if not (GetFld('VFree10').IsNull or (GetFld('VFree10').AsString = '')) then
            begin
                result.VFree10Flg := true;
                result.VFree10 := GetFld('VFree10').AsString;
            end;

            // 数字
            if not (GetFld('NFree1').IsNull or (GetFld('NFree1').AsFloat = 0)) then
            begin
                result.NFree1Flg := true;
                result.NFree1 := GetFld('NFree1').AsFloat;
            end;

            if not (GetFld('NFree2').IsNull or (GetFld('NFree2').AsFloat = 0)) then
            begin
                result.NFree2Flg := true;
                result.NFree2 := GetFld('NFree2').AsFloat;
            end;

            if not (GetFld('NFree3').IsNull or (GetFld('NFree3').AsFloat = 0)) then
            begin
                result.NFree3Flg := true;
                result.NFree3 := GetFld('NFree3').AsFloat;
            end;

            if not (GetFld('NFree4').IsNull or (GetFld('NFree4').AsFloat = 0)) then
            begin
                result.NFree4Flg := true;
                result.NFree4 := GetFld('NFree4').AsFloat;
            end;

            if not (GetFld('NFree5').IsNull or (GetFld('NFree5').AsFloat = 0)) then
            begin
                result.NFree5Flg := true;
                result.NFree5 := GetFld('NFree5').AsFloat;
            end;

            if not (GetFld('NFree6').IsNull or (GetFld('NFree6').AsFloat = 0)) then
            begin
                result.NFree6Flg := true;
                result.NFree6 := GetFld('NFree6').AsFloat;
            end;

            if not (GetFld('NFree7').IsNull or (GetFld('NFree7').AsFloat = 0)) then
            begin
                result.NFree7Flg := true;
                result.NFree7 := GetFld('NFree7').AsFloat;
            end;

            if not (GetFld('NFree8').IsNull or (GetFld('NFree8').AsFloat = 0)) then
            begin
                result.NFree8Flg := true;
                result.NFree8 := GetFld('NFree8').AsFloat;
            end;

            if not (GetFld('NFree9').IsNull or (GetFld('NFree9').AsFloat = 0)) then
            begin
                result.NFree9Flg := true;
                result.NFree9 := GetFld('NFree9').AsFloat;
            end;

            if not (GetFld('NFree10').IsNull or (GetFld('NFree10').AsFloat = 0)) then
            begin
                result.NFree10Flg := true;
                result.NFree10 := GetFld('NFree10').AsFloat;
            end;

            // 日付
            if not (GetFld('DFree1').IsNull) then
            begin
                result.DFree1Flg := true;
                result.DFree1 := GetFld('DFree1').AsDateTime;
            end;

            if not (GetFld('DFree2').IsNull) then
            begin
                result.DFree2Flg := true;
                result.DFree2 := GetFld('DFree2').AsDateTime;
            end;

            if not (GetFld('DFree3').IsNull) then
            begin
                result.DFree3Flg := true;
                result.DFree3 := GetFld('DFree3').AsDateTime;
            end;
        end;
    end;
end;
//<FREE> ADD Ed
// <SEI> ADD start
//**********************************************************************
//*		Proccess	:	請求・入金予定GridColumn移動前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuBeforeChangeColumn(
  Sender: TObject; Node: TdxTreeListNode; Column: Integer;
  NewNode: TdxTreeListNode; NewColumn: Integer; var CanChange: Boolean);
var
	objMem	: TdxMemData;
begin
	if (m_fEnd = 1) then
	begin
		Exit;
	end;

    objMem := TdxMemData(TdxDBGrid(Sender).DataSource.DataSet);
    // 税率
	if (Column = COL_ZEIRITU) then
	begin
		if (m_iAccProKbn = 0) then   		// 税率 = 0
		begin
            objMem.Edit;
			objMem.FieldByName('DummyTax_Rate').AsInteger := 0;
			objMem.FieldByName('Tax_RateName').AsString   := '';
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのBeforeChangeNodeｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuBeforeChangeNode(
  Sender: TObject; Node, NewNode: TdxTreeListNode; var CanChange: Boolean);
var
	dDate 	: TDateTime;
	objMem	: TdxMemData;
begin
    objMem := TdxMemData(TdxDBGrid(Sender).DataSource.DataSet);
	dDate := objMem.FieldByName('SeikyuYoteiDate').AsDateTime;
    if (dDate = 0) then
    begin
		ClearSeikyuYoteiDate(objMem);
	end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのChangeColumnｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuChangeColumn(
  Sender: TObject; Node: TdxTreeListNode; Column: Integer);
var
	dDate 		: TDateTime;
	crKingaku 	: Currency;
//	crRitu	  	: Currency;
//	iKingaku  	: Int64;
	objMem		: TdxMemData;
    exNCode		: Extended;
    strGCode  	: String;
    strName		: String;
//<TAX> ADD St
    rateCode : Integer;
    oDic : TDIC_COTXRATE;
//<TAX> ADD Ed
begin
	objMem := TdxMemData(TdxDBGrid(Sender).DataSource.DataSet);
	dDate := objMem.FieldByName('SeikyuYoteiDate').AsDateTime;
    if (dDate = 0) then
	begin
		// 日付ｸﾘｱ
		if not ClearSeikyuYoteiDate(objMem) then
		begin
			Exit;
		end;
	end;

    // 移動先が請求額か請求名目
    if (Column = COL_SEIKYU_SEIKYUGAKU) or (Column = COL_SEIKYU_SEIKYUMEIMOKU) then
    begin
		// 入力なし
	    if  objMem.FieldByName('CostomerGCode').AsString  = '' then
	    begin
	        objMem.Edit;
	        objMem.FieldByName('CostomerName').AsString  := '';
	        objMem.FieldByName('CostomerNCode').AsFloat  := 0;
	    end
	    else
	    begin
			// 入力されていた場合、名称とNCodeをｾｯﾄ
			strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
								objMem.FieldByName('CostomerGCode').AsString);

			if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
			begin
				objMem.Cancel;
				Exit;
			end;

	        if exNCode <> 0 then
	        begin
	            objMem.Edit;
	            objMem.FieldByName('CostomerName').AsString  := strName;
	            objMem.FieldByName('CostomerNCode').AsFloat  := exNCode;
	        end
	        else
	        begin
	            objMem.Edit;
	            objMem.FieldByName('CostomerName').AsString  := '';
	            objMem.FieldByName('CostomerNCode').AsFloat  := 0;
				beep;
	        end;
	    end;
	end;

	// 移動先が金額
    if (Column = COL_SEIKYU_ZEIGAKU) or (Column = COL_SEIKYU_SEIKYUGAKU) then
    begin
        if (m_iAccProKbn <> 0) then   		// 税率 ≠ 0
        begin
            crKingaku := objMem.FieldByName('ContMoney').AsCurrency;
            if (crKingaku = 0) then
			begin
				Exit;
			end;

            objMem.Edit;

            // 請求予定日を基準に標準税率を求める
            dDate := objMem.FieldByName('SeikyuYoteiDate').AsDateTime;

//<TAX> MOD St
            // 税率コード
            rateCode := objMem.FieldByName('DummyTax_Rate').AsInteger;
            objMem.FieldByName('DummyTax_Rate').AsInteger := rateCode;
            // 税率名称取得
            objMem.FieldByName('Tax_RateName').AsString   :=
                moBusiness.GetTaxRate(rateCode).TaxName;

            // 税率オブジェクト取得
            if rateCode = RATECODESTANDARD then // 標準税率
            begin
                oDic := moBusiness.GetTaxRate(dDate);
            end
            else
            begin
                oDic := moBusiness.GetTaxRate(rateCode);
            end;

            objMem.FieldByName('Sales_Tax').AsCurrency :=
                moBusiness.GetTaxAmount(oDic, KBN_TAXIN, crKingaku);
{
            case objMem.FieldByName('DummyTax_Rate').AsInteger of
                0:											// 標準税率
                begin
                    objMem.FieldByName('DummyTax_Rate').AsInteger := 0;
                    objMem.FieldByName('Tax_RateName').AsString   := sTax[objMem.FieldByName('DummyTax_Rate').AsInteger];
                    // 消費税率算出
                    if (MemDIC_COTXRATE.RecordCount <> 0) then
					begin
                        MemDIC_COTXRATE.First;
					end;
                    crRitu := 0;

                    while not MemDIC_COTXRATE.Eof do
                    begin
                        if (MemDIC_COTXRATEStartYMD.AsDateTime <= dDate) then
                        begin
                            crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
                            break;
                        end;
                        MemDIC_COTXRATE.Next;
                    end;

                    crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

                    case giHasuu of
                        0:	iKingaku := Trunc(crKingaku);		// 切り捨て
                        1:										// 切り上げ
                        begin
                            iKingaku := Trunc(crKingaku);
                            if Frac(crKingaku) > 0 then
                                Inc(iKingaku);
                        end;
                        2:
                        begin
                            if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
                                else iKingaku := Trunc(crKingaku - 0.5);
                        end;
                    end;
                    objMem.FieldByName('Sales_Tax').AsCurrency := StrToCurr(IntToStr(iKingaku));
                end;
                1:											// 3%
                begin
                    objMem.FieldByName('DummyTax_Rate').AsInteger := 1;
                    objMem.FieldByName('Tax_RateName').AsString   := sTax[objMem.FieldByName('DummyTax_Rate').AsInteger];
                    crKingaku := (crKingaku / 103) * 3;

                    case giHasuu of
                        0:	iKingaku := Trunc(crKingaku);	// 切り捨て
                        1:									// 切り上げ
                        begin
                            iKingaku := Trunc(crKingaku);
                            if Frac(crKingaku) > 0 then
                                Inc(iKingaku);
                        end;
                        2:
                        begin
                            if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
                            else iKingaku := Trunc(crKingaku - 0.5);
                        end;
                    end;
                    objMem.FieldByName('Sales_Tax').AsCurrency := StrToCurr(IntToStr(iKingaku));
                end;
                2:											// 5%
                begin
                    objMem.FieldByName('DummyTax_Rate').AsInteger := 2;
                    objMem.FieldByName('Tax_RateName').AsString   := sTax[objMem.FieldByName('DummyTax_Rate').AsInteger];
                    crKingaku := (crKingaku / 105) * 5;

                    case giHasuu of
                        0:	iKingaku := Trunc(crKingaku);	// 切り捨て
                        1:									// 切り上げ
                        begin
                            iKingaku := Trunc(crKingaku);
                            if Frac(crKingaku) > 0 then
                                Inc(iKingaku);
                        end;
                        2:
                        begin
                            if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
                            else iKingaku := Trunc(crKingaku - 0.5);
                        end;
                    end;
                    objMem.FieldByName('Sales_Tax').AsCurrency := StrToCurr(IntToStr(iKingaku));
                end;
                8:											// 不課税
                begin
                    objMem.FieldByName('DummyTax_Rate').AsInteger := 8;
                    objMem.FieldByName('Tax_RateName').AsString   := sTax[3];
                    objMem.FieldByName('Sales_Tax').AsCurrency    := 0;
                end;
                9:											// 非課税
                begin
                    objMem.FieldByName('DummyTax_Rate').AsInteger := 9;
                    objMem.FieldByName('Tax_RateName').AsString   := sTax[4];
                    objMem.FieldByName('Sales_Tax').AsCurrency    := 0;
                end;
            end;
}
//<TAX> MOD Ed
        end;
    end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのExitｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuExit(Sender: TObject);
var
	exNCode		: Extended;
    strGCode    : String;
	strName		: String;
	objMem		: TdxMemData;
begin
	objMem := TdxMemData(TdxDBGrid(Sender).DataSource.DataSet);

	if m_fEnd <> 0 then
    begin
		Exit;
	end;

	// 選択中のﾀﾌﾞが請求・入金予定ﾀﾌﾞじゃなければ処理しない
	if Sender = Jituzai_DdxDBGrid_Seikyu then
	begin
	    if Jituzai_PMTab.Items.Selected <> PAGE_SEIKYU then
		begin
			Exit;
		end;
	end
	else
	begin
	    if Goukei_PMTab.Items.Selected <> PAGE_GOUKEI_SEIKYU then
		begin
			Exit;
		end;
	end;

	if objMem.State in [dsInsert, dsEdit] then	// ﾃﾞｰﾀ編集中？
    begin

        if objMem.FieldByName('CostomerGCode').AsString  = '' then
        begin
            objMem.Edit;
            objMem.FieldByName('CostomerName').AsString  := '';
            objMem.FieldByName('CostomerNCode').AsFloat  := 0;
	        objMem.Post;
            exit;
        end;

        strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
                            objMem.FieldByName('CostomerGCode').AsString);

        if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
        begin
            Exit;
        end;

        if exNCode <> 0 then
        begin
            objMem.Edit;
            objMem.FieldByName('CostomerName').AsString  := strName;
            objMem.FieldByName('CostomerNCode').AsFloat  := exNCode;
        end
        else
        begin

            if (TdxDBGrid(Sender).CanFocus) then
            begin
                objMem.Edit;
                objMem.FieldByName('CostomerName').AsString  := '';
                objMem.FieldByName('CostomerNCode').AsFloat  := 0;
                MjsDispCtrl.MjsSetFocus(Self, TComponent(Sender).Name);

                                                // ｺｰﾄﾞにﾌｫｰｶｽ
                TdxDBGrid(Sender).FocusedColumn := COL_SEIKYU_SEIKYUSAKICODE;
                abort;
            end;
        end;

	    objMem.Post;
    end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのKeyPressｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuKeyPress(Sender: TObject;
  var Key: Char);
var
	iCol	: Integer;
begin
	iCol := TdxDBGrid(Sender).FocusedColumn;

	case iCol of
	    // 日付の場合
    	COL_SEIKYU_SEIKYUYOTEIBI,	// 請求予定日
		COL_SEIKYU_SEIKYUHAKKOUBI,	// 請求書発行年月日
		COL_SEIKYU_SEIKYUBI,		// 請求日
		COL_SEIKYU_NYUKINYOTEIBI:	// 入金予定日
	    begin
	    	if (m_iRekiKbn = 1) then      // 西暦
	    	begin
	    		if  (( Key < '0'  ) or  ( Key > '9' )) and  // 数値 0-9
	                 ( Key <> #8  ) and                     // #8=BackSpace
	                 ( Key <> #27 ) and                     // #27=Esc
	                 ( Key <> #9  ) and                     // #9=Tab
	                 ( Key <> #13 ) then                    // #13=Enter
	    		begin
	    			Beep ();
	    			Abort;
	    		end;
	    	end;
	    end;
		// ｺｰﾄﾞの入力可能ｷｰ制御
		COL_SEIKYU_SEIKYUSAKICODE:	// 請求先ｺｰﾄﾞ
	    begin
												// 数字・0つき数字の場合
			if MasterInfo_DMemDataCodeAttrTorihiki.AsInteger <> 2 then
			begin
												// 数字、制御ｷｰ以外は入力不可
		        if not MJSHanCharInSet(Key,['0'..'9', #8(*BS*), #27(*ESC*), #9(*TAB*)]) then
		    	begin
		    		SysUtils.Beep;
			        Abort;
		        end;
			end;
	    end;
	end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのMouseDownｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
	iCol	: Integer;
begin

	iCol := TdxDBGrid(Sender).FocusedColumn;// ﾌｫｰｶｽ位置

	case iCol of
		COL_SEIKYU_ZEIRITU:					// 税率
		begin
			if m_iAccProKbn = 0 then
			begin
				TdxDBGrid(Sender).FocusedColumn := COL_SEIKYU_SEIKYUGAKU;
				abort;
				exit;
			end;
		end;
		COL_SEIKYU_ZEIRIUNAME:				// 税率（名称）
		begin
			if m_iAccProKbn = 0 then
			begin
				TdxDBGrid(Sender).FocusedColumn := COL_SEIKYU_SEIKYUGAKU;
				abort;
				exit;
			end
			else
			begin
				TdxDBGrid(Sender).FocusedColumn := COL_SEIKYU_ZEIRITU;
				abort;
				exit;
			end;
		end;
		COL_SEIKYU_ZEIGAKU:   				// 税額
		begin
			if m_iAccProKbn = 0 then
			begin
				TdxDBGrid(Sender).FocusedColumn := COL_SEIKYU_SEIKYUGAKU;
				abort;
				exit;
			end;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのEditingｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuEditing(Sender: TObject;
  Node: TdxTreeListNode; var Allow: Boolean);
var
	iCol	: Integer;
	objMem	: TdxMemData;
begin
	iCol := TdxDBGrid(Sender).FocusedColumn;
	objMem := TdxMemData(TdxDBGrid(Sender).DataSource.DataSet);
                                            // 入金予定日以外の列
	if iCol <> COL_SEIKYU_NYUKINYOTEIBI then
    begin
    										// 請求書発行年月日が設定されている場合
    	if objMem.FieldByName('SeikyuOutputDate').AsDateTime <> 0 then
        begin
        	Allow := False;					// 入力不可とする
        end;
    end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのCustomDrawCellｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/27
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuCustomDrawCell(
  Sender: TObject; ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
  AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
  var AText: String; var AColor: TColor; AFont: TFont;
  var AAlignment: TAlignment; var ADone: Boolean);
begin
                                            // NOｶﾗﾑは描画時に番号をふる
    if (AColumn.Index - 1) = COL_SEIKYU_NO then
    begin
        AText := IntToStr(ANode.Index + 1);
    end;
end;

//**********************************************************************
//*		Proccess	:	請求・入金予定GridのChangeNodeExｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/27
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuChangeNodeEx(
  Sender: TObject);
var
	bDisp	: Boolean;
begin
//	bDisp := False;
	// F3
{
    									// 請求書発行年月日が入力済み
	if TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SeikyuOutputDate').AsDateTime <> 0 then
    begin
    	bDisp := m_cJNTArea.IsModify;
    end;
    									// F3 請求書発行年月日削除
    fnSetFncType(bDisp, FUNC_DEL_OUTPUTDATE);
}

    bDisp := False;
	// F5
    									// 請求予定日が入力済み
	if TdxDBGrid(Sender).DataSource.DataSet.FieldByName('SeikyuYoteiDate').AsDateTime <> 0 then
    begin
    	bDisp := m_cJNTArea.IsDelete;
    end;
    									// F5 削除
    fnSetFncType(bDisp, FUNC_DELSEIKYU);

end;

//**********************************************************************
//*		Proccess	:	請求・入金予定Grid-請求先ｺｰﾄﾞのEditButtonClickｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ (実在/合計)
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/23
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.DdxDBGrid_SeikyuCostomerGCodeEditButtonClick(
  Sender: TObject);
var
    lvExpSend   :  rcJNTExpSend;
    lvExpRecv   :  rcJNTExpRecv;
    iExpRtn     :  Integer;
    CompName    :  String;
	objMem		: TdxMemData;
begin
	if Sender = Jituzai_DdxDBGrid_SeikyuCostomerGCode then
	begin
		objMem := JSeikyu_DMemData;
	end
	else
	begin
		objMem := GSeikyu_DMemData;
	end;

    CompName    :=  TComponent(Sender).Name;

    // ﾊﾟﾗﾒｰﾀ初期設定
    fnJNTExpMakeParam(@lvExpSend);

    // 共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    lvExpSend.pMjsAppRec := m_pMyAppRecord;                 // MJS共通 Bpl管理構造ﾎﾟｲﾝﾀ
    lvExpSend.pCopDB     := @dbCorp_Select;                 // TDatabaseﾎﾟｲﾝﾀ
    lvExpSend.ColorB     := ComArea.SystemArea.SysColorB;
    lvExpSend.ColorD     := ComArea.SystemArea.SysColorD;

    lvExpSend.TrRootCaption := '取引先';
    lvExpSend.MasterKbn     := MKBN_TOKUI;              // ﾏｽﾀ区分
    lvExpSend.ModulKbn      := 0;                       // ﾓｼﾞｭｰﾙ区分
    lvExpSend.PatternNo     := 1;                       // ﾊﾟﾀｰﾝNO

    //共通ｴｸｽﾌﾟﾛｰﾗのﾃﾞｰﾀｾｯﾄ
    iExpRtn :=  fnJNTExpShow(@lvExpSend, @lvExpRecv);

    if iExpRtn <> 1 then
	begin
        Exit;
	end;

    // 中身あり?
    if Length(Trim(lvExpRecv.GCode)) > 0 then
    begin
        objMem.Edit;
									// 内部ｺｰﾄﾞ
        objMem.FieldByName('CostomerNCode').AsFloat := lvExpRecv.NCode;
									// 外部ｺｰﾄﾞ
        objMem.FieldByName('CostomerGCode').AsString := ComArea.SetDspCodeAttr(lvExpRecv.GCode,                                                                        	MasterInfo_DMemDataCodeDigitTorihiki.AsInteger,
											MasterInfo_DMemDataCodeAttrTorihiki.AsInteger);
									// 名称
        objMem.FieldByName('CostomerName').AsString := lvExpRecv.NMK;
    end;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.27
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：IsSeikyuYoteiUse
// *　　　関数説明：請求予定採用有無
// *
// *　　　入力　　：なし
// *　　　出力　　：Boolean	: T: 採用あり F: 採用なし
// *
// *************************************************************
function TJNTCRP018001f.IsSeikyuYoteiUse(): Boolean;
begin
	Result := mbSeikyuUse;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.16
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：fnDelCheckSeikyu
// *　　　関数説明：他の工事で一括請求先工事として登録されている場合
// *				削除不可ﾒｯｾｰｼﾞを出す
// *
// *　　　入力　　：iMasterKbn	: ﾏｽﾀ区分
// *			  ：exNCode		: 工事内部ｺｰﾄﾞ
// *　　　出力　　：正常 or 異常
// *
// *************************************************************
function TJNTCRP018001f.fnDelCheckSeikyu(iMasterKbn: Integer; exNCode: Extended): Boolean;
var
	iCnt	: Integer;
    strSQL  : String;
    strMsg	: String;
    qryInfo : TMQuery;
const
	MSG_KOUJICNT	= 5;
begin
    Result := False;
    iCnt := 0;
    strMsg := '';

    strSQL := 	'select MA.SimpleName ' +
    			'from HojyoMA MA ' +
                'inner join KojiInfo INF ' +
                'on MA.MasterKbn = INF.MasterKbn ' +
                'and MA.NCode = INF.NCode ' +
                'where MA.MasterKbn = :parMasterKbn ' +
                'and MA.RDelKbn = 0 ' +
                'and INF.IkkatuSeikyuCode = :parIkkatuSeikyuCode ' +
                'order by MA.GCode ';

	qryInfo := TMQuery.Create(Self);					    // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryInfo);	// DBとMQueryの接続

   	with qryInfo do
   	begin
   		try
   			Close;
   			SQL.Clear;
   			SQL.Add(strSQL);
            ParamByName('parMasterKbn').AsInteger := iMasterKbn;
            								// 一括請求先工事ｺｰﾄﾞ
            ParamByName('parIkkatuSeikyuCode').AsFloat := exNCode;


	        if not Open() then
            begin
                ErrorMessageDsp(qryInfo);
                Exit;
            end;

   			while not EOF do              	// ﾃﾞｰﾀあり
            begin
            	if iCnt > 0 then
                begin
                    if iCnt = MSG_KOUJICNT then
                    begin
                    	break;
                    end
                    else
                    begin
						strMsg := strMsg + #13#10;
                    end;
                end;

            	strMsg := strMsg + GetFld('SimpleName').AsString;
                Inc(iCnt);
                Next;
            end;

            if qryInfo.RecordCount > MSG_KOUJICNT then
            begin
                strMsg := strMsg + #13#10 + '他' + IntToStr(qryInfo.RecordCount - MSG_KOUJICNT) + '件';
            end;

            if strMsg <> '' then            // 他の工事の一括請求先に設定されていた
            begin
                							//	･･･することができません
                ComArea.m_MsgStd.GetMsg( MjsMsgRec, 30,18);
		        with MjsMsgRec do
                begin
	                strMsg := '他の工事に一括請求工事として登録されている為削除'
		                	+ sMsg
                            + #13#10
                			+ strMsg;

	                MjsMessageBoxEx(Self, strMsg, sTitle, icontype, btntype, btndef, LogType);
                end;
                Exit;
            end;

            Result := True;
        finally
            Close;
            Free;
        end;
    end;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.16
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：ChangeIkkatuKouji
// *　　　関数説明：他の工事で一括請求先工事として登録されている場合
// *				一括請求先工事を無効にする
// *
// *　　　入力　　：iSumKbn	: 実在/合計
// *　　　出力　　：正常 or 異常
// *
// *************************************************************
function TJNTCRP018001f.ChangeIkkatuKouji(iSumKbn: Integer): Boolean;
var
	exNCode		: Extended;
    strGCode	: String;
    strName		: String;
    objNum		: TMNumEdit;
    objTxt		: TMTxtEdit;
begin
	Result := True;

	if iSumKbn = SUMKBN_JITUZAI then
    begin
        									// 入力されている外部ｺｰﾄﾞをﾌｫｰﾏｯﾄして返す
	   	strGCode := GetInputGCode(Jituzai_ETEdit_GCode,
            						Jituzai_ENEdit_GCode);
        objNum := Jituzai_ENEdit_SeikyuKoujiCd;
        objTxt := Jituzai_ETEdit_SeikyuKoujiCd;
    end
    else
    begin
	   	strGCode := GetInputGCode(Goukei_ETEdit_GCode,
            						Goukei_ENEdit_GCode);
        objNum := Goukei_ENEdit_SeikyuKoujiCd;
        objTxt := Goukei_ETEdit_SeikyuKoujiCd;
    end;

    if strGCode = '' then
    begin
        Exit;
    end;

    // 内部ｺｰﾄﾞ取得
    if not fnGetHojNameSeikyu(m_nMasterDivision, iSumKbn, strGCode, strName, exNCode) then
    begin
        Result := False;
        Exit;
    end;

    // 他の工事の一括請求先工事になっている場合
	if IsExistSeikyu(m_nMasterDivision, exNCode) then
    begin
   		objNum.Enabled := False;
        objTxt.Enabled := False;
    end
    else
    begin
   		objNum.Enabled := True;
        objTxt.Enabled := True;
    end;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.16
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：IsExistSeikyu
// *　　　関数説明：他の工事で一括請求先工事として登録されているかどうか
// *
// *　　　入力　　：iMasterKbn	: ﾏｽﾀ区分
// *			  ：exNCode		: 工事内部ｺｰﾄﾞ
// *　　　出力　　：T: 削除可能 F: 削除不可
// *
// *************************************************************
function TJNTCRP018001f.IsExistSeikyu(iMasterKbn: Integer; exNCode: Extended): Boolean;
var
    strSQL  : String;
    qryInfo : TMQuery;
begin
    Result := False;

    strSQL := 	'select MA.SimpleName ' +
    			'from HojyoMA MA ' +
                'inner join KojiInfo INF ' +
                'on MA.MasterKbn = INF.MasterKbn ' +
                'and MA.NCode = INF.NCode ' +
                'where MA.MasterKbn = :parMasterKbn ' +
                'and MA.RDelKbn = 0 ' +
                'and INF.IkkatuSeikyuCode = :parIkkatuSeikyuCode ' +
                'order by MA.GCode ';

	qryInfo := TMQuery.Create(Self);					    // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryInfo);	// DBとMQueryの接続

   	with qryInfo do
   	begin
   		try
   			Close;
   			SQL.Clear;
   			SQL.Add(strSQL);
            ParamByName('parMasterKbn').AsInteger := iMasterKbn;
            								// 一括請求先工事ｺｰﾄﾞ
            ParamByName('parIkkatuSeikyuCode').AsFloat := exNCode;


	        if not Open() then
            begin
                ErrorMessageDsp(qryInfo);
                Exit;
            end;

   			if not EOF then             		// ﾃﾞｰﾀあり
            begin
            	Result := True;
            end;

        finally
            Close;
            Free;
        end;
    end;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.24
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：DeleteSeikyuInfo
// *　　　関数説明：請求・入金予定の削除
// *
// *　　　入力　　：Sender
// *　　　出力　　：なし
// *
// *************************************************************
procedure TJNTCRP018001f.DeleteSeikyuInfoExecute(Sender: TObject);
var
	iRet	: Integer;
	objMem	: TdxMemData;
begin
//    objMem := nil;
	if m_AcControl is TdxDBGrid then
    begin
	    objMem := TdxMemData(TdxDBGrid(m_AcControl).DataSource.DataSet);
    end
    else
    begin
    	Exit;
    end;

	// 「該当請求予定情報を削除しますか？」
    ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020, 4);
    with MjsMsgRec do
    begin
        iRet := MjsMessageBoxEx(Self, MSG_DELETE_SEIKYU, sTitle, icontype, btntype, btndef, LogType);
    end;

    if iRet <> mrYes then
    begin
    	Exit;
    end;

// ▲ここで即時更新したい場合はfnSeikyuWriteの一部を流用する
    // 削除処理 = 請求予定日のｸﾘｱ
    ClearSeikyuYoteiDate(objMem);

end;

// *************************************************************
// *
// *　　　作成日付：2009.07.24
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：DeleteSeikyuOutputDate
// *　　　関数説明：請求書発行年月日の削除
// *
// *　　　入力　　：Sender
// *　　　出力　　：なし
// *
// *************************************************************
procedure TJNTCRP018001f.DeleteSeikyuOutputDateExecute(Sender: TObject);
var
	iRet	: Integer;
	objMem	: TdxMemData;
begin
//    objMem := nil;
	if m_AcControl is TdxDBGrid then
    begin
	    objMem := TdxMemData(TdxDBGrid(m_AcControl).DataSource.DataSet);
    end
    else
    begin
    	Exit;
    end;

	// 「請求書発行年月日を削除しますか？」
    ComArea.m_MsgStd.GetMsg( MjsMsgRec, 10020, 4);
    with MjsMsgRec do
    begin
        iRet := MjsMessageBoxEx(Self, MSG_DELETE_SEIKYUOUTPUTDATE, sTitle, icontype, btntype, btndef, LogType);
    end;

    if iRet <> mrYes then
    begin
    	Exit;
    end;

    // 「削除後に登録しなおすことはできませんがよろしいですか？」
    with MjsMsgRec do
    begin
        iRet := MjsMessageBoxEx(Self, MSG_DELETE_SEIKYUOUTPUTDATE_ALERT, sTitle, icontype, btntype, btndef, LogType);
    end;

    if iRet <> mrYes then
    begin
    	Exit;
    end;

// ▲ここで即時更新したい場合はfnSeikyuWriteの一部を流用する
    // 請求書発行年月日のｸﾘｱ
    objMem.Edit;
    objMem.FieldByName('SeikyuOutputDate').Clear;
    objMem.Post;

end;

// *************************************************************
// *
// *　　　作成日付：2009.07.21
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：fnGetHojNameSeikyu
// *　　　関数説明：外部ｺｰﾄﾞから名称取得（請求・入金予定用）
// *
// *　　　入力　　：iMasterKbn	: ﾏｽﾀ区分
// *			  ：iSumKbn		: 実在/合計区分
// *			  ：strGCode	: 外部ｺｰﾄﾞ
// *			  ：strName		: 簡略名称格納域
// *			  ：exNCode		: 内部ｺｰﾄﾞ格納域
// *			  ：iOption		: OPT_KOUJI_IKKATUSEIKYU 一括請求先工事
// *　　　出力　　：正常 or 異常
// *
// *************************************************************
function TJNTCRP018001f.fnGetHojNameSeikyu(iMasterkbn: Integer; iSumKbn: Integer; strGCode: String; var strName: String; var exNCode: Extended; iOption: Integer = 0): Boolean;
var
    strSQL  : String;
    qryHojyo : TMQuery;
begin
    Result := False;
    exNCode := 0;
    strName := '';

    if strGCode = '' then
    begin
    	Result := True;
    	Exit;
    end;

	qryHojyo := TMQuery.Create(Self);					    // MQueryの構築
	MDataModule.SetDBInfoToQuery(dbCorp_Select, qryHojyo);	// DBとMQueryの接続

   	with qryHojyo do
   	begin
   		try
   			Close;
   			SQL.Clear;

            case iMasterKbn of
                MKBN_TOKUI:    					// 得意先
                begin
                    strSQL := 'select NMK as SimpleName ' +
                    		', NCode ' +
                            'from MTOKUI ' +
                            'where GCode = :parGCode ' +
                            'and HojyoKbn1 = 1 ' +
                            'and SumKbn = :parSumKbn ' +
                            'and RDelKbn = 0';
		   			SQL.Add(strSQL);
                    SetFld('parGCode').AsString := strGCode;
                    SetFld('parSumKbn').AsInteger := iSumKbn;

                end;
                MKBN_PROJECT1..MKBN_PROJECT10: 	// ﾌﾟﾛｼﾞｪｸﾄ1～10
                begin
                    // 一括請求先工事の場合 実在&合計
                    if iOption = OPT_KOUJI_IKKATUSEIKYU then
                    begin
	                    strSQL := 'select MA.SimpleName ' +
                    		', MA.NCode ' +
                            'from HojyoMA MA ' +
                            'inner join KojiInfo KOJ ' +
                            'on MA.MasterKbn = KOJ.MasterKbn ' +
                            'and MA.NCode = KOJ.NCode ' +
                            'where MA.MasterKbn = :parMasterKbn ' +
                            'and MA.GCode = :parGCode ' +
                            'and MA.RDelKbn = 0 ' +
                    							// 他の工事の一括請求先になっていない工事
                    		'and ((KOJ.IkkatuSeikyuCode is null) or (KOJ.IkkatuSeikyuCode = 0))' ;
			   			SQL.Add(strSQL);
					end
                    else
                    begin
	                    strSQL := 'select SimpleName ' +
                    		', NCode ' +
                            'from HojyoMA ' +
                            'where MasterKbn = :parMasterKbn ' +
                            'and GCode = :parGCode ' +
                            'and RDelKbn = 0 ' +
                            'and SumKbn = :parSumKbn ';
			   			SQL.Add(strSQL);
	                    SetFld('parSumKbn').AsInteger := iSumKbn;
                    end;

                    SetFld('parGCode').AsString := strGCode;
                    SetFld('parMasterKbn').AsInteger := iMasterKbn;
                end;
                else
                begin
                	Exit;
                end;
            end;

	        if not Open() then
            begin
                ErrorMessageDsp(qryHojyo);
                Exit;
            end;

   			if not EOF then              // ﾃﾞｰﾀあり
            begin
            	exNCode := GetFld('NCode').AsFloat;
            	strName := GetFld('SimpleName').AsString;
            end;

            Result := True;
        finally
            Close;
            Free;
        end;
    end;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.21
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：GetInputGCode
// *　　　関数説明：TxtEdit or NumEditから外部ｺｰﾄﾞを取得
// *
// *　　　入力　　：objTxt		: 文字属性時のEdit
// *			  ：objNum		: 数字属性時のEdit
// *　　　出力　　：String		: 外部ｺｰﾄﾞ(数字の場合は0つきにﾌｫｰﾏｯﾄ)
// *
// *************************************************************
function TJNTCRP018001f.GetInputGCode(objTxt: TMTxtEdit; objNum: TMNumEdit): String;
begin
	Result := '';
	if objTxt.Visible then 					// 文字
	begin
		if objTxt.Text = '' then 			// 未入力
		begin
			Exit;
		end
		else
		begin
			Result := objTxt.Text;
		end;
	end
	else if objNum.Visible then   			// 数字
	begin
		if objNum.Value = 0 then
		begin
			if objNum.InputFlag = true then // 未入力
			begin
				Exit;
			end
			else                            // 0入力あり
			begin
				Result := Format ('%.16d', [Trunc (objNum.Value)]);
			end;
		end
		else
		begin
			Result := Format ('%.16d', [Trunc (objNum.Value)]);
		end;
	end;
end;

// *************************************************************
// *
// *　　　作成日付：2009.07.22
// *　　　作成者  ：K.Katou
// *
// *　　　関数名称：GetDBGCode
// *　　　関数説明：DB上の外部ｺｰﾄﾞを返す
// *
// *　　　入力　　：iAttr   	: 属性
// *                strGCode 	: 外部ｺｰﾄﾞ
// *				iLength		: DB上の桁数 default=16
// *　　　出力　　：String 		: DB上の外部ｺｰﾄﾞ ex) 0000000000000001
// *
// *************************************************************
function TJNTCRP018001f.GetDBGCode(iAttr: Integer; strGCode: String; iLength: Integer = 16): String;
var
    strBk   : String;
begin
    Result := strGCode;					    // 表示通りの外部ｺｰﾄﾞ

	if strGCode = '' then					// ｺｰﾄﾞが空の場合そのまま返す
    begin
    	Exit;
    end;

    if iAttr = 2 then         				// 文字の場合そのまま返す
    begin
        Exit;
    end;
    										// 数値の場合DBの最大桁数になるように0をつけて返す
                                            // 付加する'0'部分
    strBk := StringOfChar('0', iLength - Length(strGCode));

    Result := strBk + strGCode;           // '00000xxx'

end;

// *************************************************************
// *
// *　　　作成日付：2009.07.21
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：SetCodeProp
// *　　　関数説明：TxtEdit/NumEdit/ppDBTextのﾌﾟﾛﾊﾟﾃｨ設定
// *
// *　　　入力　　：iAttr		: 属性
// *			  ：iDigit		: 桁数
// *			  ：objTxt		: 文字属性時のEdit
// *			  ：objNum		: 数字属性時のEdit
// *			  ：objppDBTxt	: ReportBuilderのﾗﾍﾞﾙ
// *　　　出力　　：String		: 外部ｺｰﾄﾞ(数字の場合は0つきにﾌｫｰﾏｯﾄ)
// *
// *************************************************************
procedure TJNTCRP018001f.SetCodeProp(iAttr: Integer; iDigit: Integer;
					objTxt: TMTxtEdit; objNum: TMNumEdit; objppDBTxt: TppDBText);
begin
	if iAttr = 2 then						// ﾌﾘｰ
	begin
		objNum.Visible	   	:= false;
		objTxt.Visible	   	:= true;
		objTxt.MaxLength  	:= iDigit;
		if objppDBTxt <> nil then
		begin
			objppDBTxt.Alignment := taLeftjustify;
		end;
	end
	else									// 数字
	begin
		objNum.Visible	    := true;
		objTxt.Visible	    := false;
		objNum.Digits	    := iDigit;

		if	iAttr = 1 then
		begin
			objNum.FormatStr  := StringOfChar ('0', iDigit);
		end
		else
		begin
			objNum.FormatStr   := '';
		end;

		if objppDBTxt <> nil then
		begin
			objppDBTxt.Alignment				   :=taRightJustify;
		end;
	end;
end;

//**********************************************************************
//*		Proccess	:	実在請求・入金予定情報Post前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/22
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.JSeikyu_DMemDataBeforePost(DataSet: TDataSet);
var
	dDate	  :	TDateTime;
	crKingaku :	Currency;
//	crRitu	  :	Currency;
    exNCode	  : Extended;
//	iKingaku  :	Int64;
    strGCode  : String;
    strName   : String;
//<TAX> ADD St
    rateCode : Integer;
    oDic : TDIC_COTXRATE;
//<TAX> ADD Ed
begin

	if (MemPost_Sw <> 0) then
	begin
		Exit;
	end;

//	iKingaku := 0;

	if (not Jituzai_PPanel_Card.Visible) or
       (not Jituzai_PPanel_Seikyu.Visible) then
	begin
		Exit;
	end;

	if (m_fEnd = 1) then
	begin
		Exit;
	end;

	// 請求先
    if  JSeikyu_DMemDataCostomerGCode.AsString  = '' then
    begin
        JSeikyu_DMemData.Edit;
        JSeikyu_DMemDataCostomerName.AsString  := '';
        JSeikyu_DMemDataCostomerNCode.AsFloat  := 0;
    end
    else
    begin
		// 入力されていた場合、名称とNCodeをｾｯﾄ
		strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
							JSeikyu_DMemDataCostomerGCode.AsString);

		if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
		begin
			JSeikyu_DMemData.Cancel;
			Exit;
		end;

        if exNCode <> 0 then
        begin
            JSeikyu_DMemData.Edit;
            JSeikyu_DMemDataCostomerName.AsString  := strName;
            JSeikyu_DMemDataCostomerNCode.AsFloat  := exNCode;
        end
        else
        begin
            JSeikyu_DMemData.Edit;
            JSeikyu_DMemDataCostomerName.AsString  := '';
            JSeikyu_DMemDataCostomerNCode.AsFloat  := 0;
			beep;
			abort;
        end;
    end;

	if (not m_bFieldFlg) then
	begin
		// 請求予定日
		dDate     := JSeikyu_DMemDataSeikyuYoteiDate.AsDateTime;
		// 空の場合その他のﾌｨｰﾙﾄﾞをｸﾘｱ
		if (dDate = 0) then
		begin
			JSeikyuDateSave[JSeikyu_DMemData.RecNo] := dDate;
			JSeikyu_DMemData.Edit;
			JSeikyu_DMemDataContDate.Clear;
			JSeikyu_DMemDataDummyTax_Rate.AsInteger := 0;
			JSeikyu_DMemDataTax_RateName.AsString   := '';
			JSeikyu_DMemDataTax_Rate.AsInteger      := 0;
            JSeikyuRateSave[JSeikyu_DMemData.RecNo]    := 0;
			JSeikyu_DMemDataSales_Tax.Clear;
			JSeikyu_DMemDataContMoney.Clear;
            JSeikyu_DMemDataCostomerGCode.Clear;
            JSeikyu_DMemDataCostomerName.Clear;
            JSeikyu_DMemDataCostomerNCode.Clear;
            JSeikyu_DMemDataSeikyuDate.Clear;
            JSeikyu_DMemDataSeikyuYoteiDate.Clear;
            JSeikyu_DMemDataSeikyuOutputDate.Clear;
            JSeikyu_DMemDataSeikyuMeimoku.Clear;
		end;
	end;

	crKingaku := JSeikyu_DMemDataContMoney.AsCurrency;
	if (crKingaku = 0) then
	begin
		Exit;
	end;

	// 税率
	if (JSeikyu_DMemDataDummyTax_Rate.AsInteger <> 9) and (JSeikyu_DMemDataDummyTax_Rate.AsInteger <> 8) then
	begin
		if (JSeikyu_DMemDataSales_Tax.AsCurrency <> 0) then
		begin
			Exit;
		end;
	end;

	if (m_iAccProKbn <> 0) then   // 税率≠0の場合
	begin

		//dDate := JSeikyu_DMemDataContDate.AsDateTime;
        // 請求予定日を基準に標準税率を求める
		dDate := JSeikyu_DMemDataSeikyuYoteiDate .AsDateTime;
//<TAX> MOD St
        // 税率コード
        rateCode := JSeikyu_DMemDataDummyTax_Rate.AsInteger;
        // 税率名称取得
        JSeikyu_DMemDataTax_RateName.AsString :=
            moBusiness.GetTaxRate(rateCode).TaxName;
        // 税率オブジェクト取得
        if rateCode = RATECODESTANDARD then // 標準税率
        begin
            oDic := moBusiness.GetTaxRate(dDate);
        end
        else
        begin
            oDic := moBusiness.GetTaxRate(rateCode);
        end;

        JSeikyu_DMemDataSales_Tax.AsCurrency := moBusiness.GetTaxAmount(oDic, KBN_TAXIN, crKingaku);
{
		case JSeikyu_DMemDataDummyTax_Rate.AsInteger of
            // 標準税率
			0:  begin
				    JSeikyu_DMemDataDummyTax_Rate.AsInteger := 0;
					JSeikyu_DMemDataTax_RateName.AsString   := sTax[JSeikyu_DMemDataDummyTax_Rate.AsInteger];
    				// 消費税率算出
    				if ( MemDIC_COTXRATE.RecordCount <> 0 ) then
    					MemDIC_COTXRATE.First;
    				crRitu := 0;
    				while ( MemDIC_COTXRATE.Eof = false ) do
					begin
    					if ( MemDIC_COTXRATEStartYMD.AsDateTime <= dDate ) then
    					begin
    						crRitu := MemDIC_COTXRATETaxRate.AsCurrency;
    						break;
    					end;
    					MemDIC_COTXRATE.Next;
    				end;

    				crKingaku := (crKingaku / (crRitu + 100)) * crRitu;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
    					begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
    						else iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				JSeikyu_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
            // 3%
			1:  begin
				    JSeikyu_DMemDataDummyTax_Rate.AsInteger := 1;
    				JSeikyu_DMemDataTax_RateName.AsString   := sTax[JSeikyu_DMemDataDummyTax_Rate.AsInteger];

    				crKingaku := (crKingaku / 103) * 3;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
						begin
    						iKingaku := Trunc(crKingaku);
    						if ( Frac(crKingaku) > 0 ) then
    							Inc(iKingaku);
    					end;
    					2:
    					begin
    						if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
    						else iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

				    JSeikyu_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
            // 5%
			2:  begin
    				JSeikyu_DMemDataDummyTax_Rate.AsInteger := 2;
    				JSeikyu_DMemDataTax_RateName.AsString   := sTax[JSeikyu_DMemDataDummyTax_Rate.AsInteger];

    				crKingaku := (crKingaku / 105) * 5;

    				case giHasuu of
    					0:	iKingaku := Trunc(crKingaku);	// 切り捨て
    					1:									// 切り上げ
                        begin
    						iKingaku := Trunc(crKingaku);
		    				if ( Frac(crKingaku) > 0 ) then
			    				Inc(iKingaku);
				    	end;
					    2:
    					begin
    						if crKingaku >= 0 then iKingaku := Trunc(crKingaku + 0.5)
							else iKingaku := Trunc(crKingaku - 0.5);
    					end;
    				end;

    				JSeikyu_DMemDataSales_Tax.AsCurrency := StrToCurr(IntToStr(iKingaku));
    			end;
			// 不課税
			8:  begin
					JSeikyu_DMemDataDummyTax_Rate.AsInteger := 8;
					JSeikyu_DMemDataTax_RateName.AsString   := sTax[3];
					JSeikyu_DMemDataSales_Tax.AsCurrency    := 0;
				end;
			// 非課税
			9:  begin
					JSeikyu_DMemDataDummyTax_Rate.AsInteger := 9;
					JSeikyu_DMemDataTax_RateName.AsString   := sTax[4];
					JSeikyu_DMemDataSales_Tax.AsCurrency    := 0;
				end;
		end;
}
//<TAX> MOD Ed
	end
	else
	begin
		JSeikyu_DMemDataDummyTax_Rate.AsInteger := 0;
		JSeikyu_DMemDataTax_RateName.AsString   := '';
	end;
end;

//**********************************************************************
//*		Proccess	:	合計請求・入金予定情報Post前ｲﾍﾞﾝﾄﾊﾝﾄﾞﾗ
//*		Name		:	K.Katou(PRIME)
//*		Date		:	2009/07/22
//*		Return		:	なし
//*		History		:	9999/99/99	X.Xxxx
//*									XXXXXXXXXXXXXXXXXX
//**********************************************************************
procedure TJNTCRP018001f.GSeikyu_DMemDataBeforePost(DataSet: TDataSet);
var
	dDate	  :	TDateTime;
	crKingaku :	Currency;
//	crRitu	  :	Currency;
    exNCode	  : Extended;
//	iKingaku  :	Int64;
    strGCode  : String;
    strName   : String;
//<TAX> ADD St
    rateCode : Integer;
    oDic : TDIC_COTXRATE;
//<TAX> ADD Ed
begin

	if (MemPost_Sw <> 0) then
	begin
		Exit;
	end;

//	iKingaku := 0;

	if (not Goukei_PPanel_Card.Visible) or
       (not Goukei_PPanel_Seikyu.Visible) then
	begin
		Exit;
	end;

	if (m_fEnd = 1) then
	begin
		Exit;
	end;

	// 請求先
    if  GSeikyu_DMemDataCostomerGCode.AsString  = '' then
    begin
        GSeikyu_DMemData.Edit;
        GSeikyu_DMemDataCostomerName.AsString  := '';
        GSeikyu_DMemDataCostomerNCode.AsFloat  := 0;
    end
    else
    begin
		// 入力されていた場合、名称とNCodeをｾｯﾄ
		strGCode := GetDBGCode(MasterInfo_DMemDataCodeAttrTorihiki.AsInteger,
							GSeikyu_DMemDataCostomerGCode.AsString);

		if not fnGetHojNameSeikyu(MKBN_TOKUI, SUMKBN_JITUZAI, strGCode, strName, exNCode) then
		begin
			GSeikyu_DMemData.Cancel;
			Exit;
		end;

        if exNCode <> 0 then
        begin
            GSeikyu_DMemData.Edit;
            GSeikyu_DMemDataCostomerName.AsString  := strName;
            GSeikyu_DMemDataCostomerNCode.AsFloat  := exNCode;
        end
        else
        begin
            GSeikyu_DMemData.Edit;
            GSeikyu_DMemDataCostomerName.AsString  := '';
            GSeikyu_DMemDataCostomerNCode.AsFloat  := 0;
			beep;
			abort;
        end;
    end;

	if (not m_bFieldFlg) then
	begin
		// 請求予定日
		dDate     := GSeikyu_DMemDataSeikyuYoteiDate.AsDateTime;
		// 空の場合その他のﾌｨｰﾙﾄﾞをｸﾘｱ
		if (dDate = 0) then
		begin
			GSeikyuDateSave[GSeikyu_DMemData.RecNo] := dDate;
			GSeikyu_DMemData.Edit;
			GSeikyu_DMemDataContDate.Clear;
			GSeikyu_DMemDataDummyTax_Rate.AsInteger := 0;
			GSeikyu_DMemDataTax_RateName.AsString   := '';
			GSeikyu_DMemDataTax_Rate.AsInteger      := 0;
//            GSeikyuRateSave[GSeikyu_DMemData.RecNo]    := 0;
			GSeikyu_DMemDataSales_Tax.Clear;
			GSeikyu_DMemDataContMoney.Clear;
            GSeikyu_DMemDataCostomerGCode.Clear;
            GSeikyu_DMemDataCostomerName.Clear;
            GSeikyu_DMemDataCostomerNCode.Clear;
            GSeikyu_DMemDataSeikyuDate.Clear;
            GSeikyu_DMemDataSeikyuYoteiDate.Clear;
            GSeikyu_DMemDataSeikyuOutputDate.Clear;
            GSeikyu_DMemDataSeikyuMeimoku.Clear;
		end;
	end;

	crKingaku := GSeikyu_DMemDataContMoney.AsCurrency;
	if (crKingaku = 0) then
	begin
		Exit;
	end;

	// 税率
	if (GSeikyu_DMemDataDummyTax_Rate.AsInteger <> 9) and (GSeikyu_DMemDataDummyTax_Rate.AsInteger <> 8) then
	begin
		if (GSeikyu_DMemDataSales_Tax.AsCurrency <> 0) then
		begin
			Exit;
		end;
	end;

	if (m_iAccProKbn <> 0) then   // 税率≠0の場合
	begin

		//dDate := GSeikyu_DMemDataContDate.AsDateTime;
        // 請求予定日を基準に標準税率を求める
		dDate := GSeikyu_DMemDataSeikyuYoteiDate .AsDateTime;
//<TAX> MOD St
        // 税率コード
        rateCode := GSeikyu_DMemDataDummyTax_Rate.AsInteger;
        // 税率名称取得
        GSeikyu_DMemDataTax_RateName.AsString :=
            moBusiness.GetTaxRate(rateCode).TaxName;
        // 税率オブジェクト取得
        if rateCode = RATECODESTANDARD then // 標準税率
        begin
            oDic := moBusiness.GetTaxRate(dDate);
        end
        else
        begin
            oDic := moBusiness.GetTaxRate(rateCode);
        end;

        GSeikyu_DMemDataSales_Tax.AsCurrency := moBusiness.GetTaxAmount(oDic, KBN_TAXIN, crKingaku);
//<TAX> MOD Ed
	end
	else
	begin
		GSeikyu_DMemDataDummyTax_Rate.AsInteger := 0;
		GSeikyu_DMemDataTax_RateName.AsString   := '';
	end;
end;

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

// *************************************************************
// *
// *　　　作成日付：2009.07.23
// *　　　作成者  ：K.Katou(PRIME)
// *
// *　　　関数名称：ClearSeikyuYoteiDate
// *　　　関数説明：請求予定日のｸﾘｱ処理
// *
// *　　　入力　　：TdxMemData 	: 請求・入金予定MemData(実在/合計)
// *　　　出力　　：Boolean		: T: 正常 F: 異常or削除不可
// *
// *************************************************************
function TJNTCRP018001f.ClearSeikyuYoteiDate(objMem: TdxMemData): Boolean;
var
//	dDate 	: TDateTime;
    Qe    	: TMQuery;
begin
	Result := False;
//	dDate := objMem.FieldByName('SeikyuYoteiDate').AsDateTime;
    Qe    := TMQuery.Create(Self);

    try
        if (m_SyncMaster.m_flgGrpCorp = 0) then   // ｸﾞﾙｰﾌﾟ会計全社か否か判断する
        begin
            // 自社(子社)へ接続
            MDataModule^.SetDBInfoToQuery ( dbCorp_Select, Qe );

            Qe.Close();
            Qe.SQL.Clear();
            Qe.SQL.Add('select Count(KojiInfo2NCode) CNT   	 ' +
                        'from KojiInfo2_Rel                  ' +
                        'where                               ' +
                        '      KojiInfo2NCode = :pNCode      ' +
                        '  and RDelKbn_REL    = 0            ');
            Qe.ParamByName('pNCode' ).AsFloat   := objMem.FieldByName('KojiInfo2NCode').AsFloat;

            if (not Qe.Open) then
            begin
                ErrorMessageDsp(Qe);
                Qe.Close();
                Qe.Free();
                Abort;
            end;

            // 子会社で使用中
            if (Qe.FieldByName('CNT').AsInteger <> 0) then
            begin
                MjsMessageBoxEx(Self, JNTSYNC_MSG_USE_CHILD,
                            '削除', mjInformation, mjOk, mjDefOk);
                objMem.Cancel();
                Abort;
                Exit;
            end;
        end;
        // Memdataの内容を消去する
                                        // 実在
        if objMem = JSeikyu_DMemData then
        begin
            JSeikyuDateSave[objMem.RecNo]      := 0;
        end
        else
        begin
            GSeikyuDateSave[objMem.RecNo]      := 0;
        end;
        objMem.Edit;

        objMem.FieldByName('NO').Clear;
        objMem.FieldByName('SeikyuYoteiDate').Clear;
        objMem.FieldByName('SeikyuMeimoku').AsString  := '';
        objMem.FieldByName('CostomerGCode').Clear;
        objMem.FieldByName('CostomerName').Clear;
        objMem.FieldByName('CostomerNCode').Clear;
        objMem.FieldByName('ContMoney').Clear;
        objMem.FieldByName('DummyTax_Rate').AsInteger := 0;
        objMem.FieldByName('Tax_RateName').AsString  := '';
        objMem.FieldByName('Tax_Rate').AsInteger := 0;
        JSeikyuRateSave[objMem.RecNo]      := 0;
        objMem.FieldByName('Sales_Tax').Clear;
        objMem.FieldByName('SeikyuOutputDate').Clear;
        objMem.FieldByName('SeikyuDate').Clear;
        objMem.FieldByName('ContDate').Clear;

        // 削除する契約情報の内部ｺｰﾄﾞを保管(既存ﾃﾞｰﾀのみ) MAX 999件
        if (objMem.FieldByName('KojiInfo2NCode').AsFloat <> 0) then
        begin
                                        // 実在
            if objMem = JSeikyu_DMemData then
            begin
                JSeikyuNCodeSave[JSeikyuElement] := objMem.FieldByName('KojiInfo2NCode').AsFloat;
                inc(JSeikyuElement);
            end
            else						// 合計
            begin
                GSeikyuNCodeSave[GSeikyuElement] := objMem.FieldByName('KojiInfo2NCode').AsFloat;
                inc(GSeikyuElement);
            end;
        end;

        objMem.FieldByName('KojiInfo2NCode').AsFloat := 0;

        Result := True;
    finally
        Qe.Close();
        Qe.Free();
    end;

end;
//<SEI> ADD Ed
//<TAX> ADD St
//==============================================================================
// 概要：TKojiInfoパラメーターへ変換
//==============================================================================
function TJNTCRP018001f.toKojiInfoParam(iSumKbn: Integer): TKojiInfoParam;
begin
    if iSumKbn = 0 then
    begin
        result.SalesBase := Jituzai_ENEdit_SalesBase.AsInteger;

        if rdJTaxIn.Checked then
        begin
            result.PartPattern := KBN_TAXIN;
        end
        else
        begin
            result.PartPattern := KBN_TAXOUT;
        end;

        result.YoteiDateSt := Jituzai_EDEdit_StartDate.AsDateTime;
        result.YoteiDateEd := Jituzai_EDEdit_EndDate.AsDateTime;
    end
    else
    begin
        result.SalesBase := 0;
        result.PartPattern := KBN_TAXIN;
        result.YoteiDateSt := Goukei_EDEdit_StartDate.AsDateTime;
        result.YoteiDateEd := Goukei_EDEdit_EndDate.AsDateTime;
    end;

end;

//==============================================================================
// 概要：TKojiInfo2パラメーターへ変換
//==============================================================================
function TJNTCRP018001f.toKojiInfo2Param(mem: TdxMemData): TKojiInfo2Param;
begin
//<TAX_1> ADD St
    result.MasterKbn    := m_nMasterDivision;
    result.NCode        := IfThen(
        CurrentSumKbn = 0,
        JHojyoMA_DMemDataNCode.AsFloat,
        GHojyoMA_DMemDataNCode.AsFloat);
//<TAX_1> ADD Ed
    result.ContDate     := mem.FieldByName('ContDate').AsDateTime;
    result.ContNo       := mem.FieldByName('ContNo').AsString;
    result.ContMoney    := mem.FieldByName('ContMoney').AsCurrency;
    result.Tax_Rate     := mem.FieldByName('DummyTax_Rate').AsInteger;
    result.Sales_Tax    := mem.FieldByName('Sales_Tax').AsCurrency;
    result.DspOrder     := mem.RecNo;
end;

//==============================================================================
// 概要：管理クラスへ契約情報の変更依頼を行う
//==============================================================================
function TJNTCRP018001f.changeKojiInfo2(param: TKojiInfo2Param; errorCheck: Boolean = true): Integer;
begin
    moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn), false);  // 最新の画面情報をセット
    result := moKojiInfoMn.ChangeKojiInfo2(param, errorCheck)
end;

//==============================================================================
// 概要：管理クラスへ契約情報の変更依頼を行う
//==============================================================================
function TJNTCRP018001f.checkKojiInfo2(param: TKojiInfo2Param): Integer;
begin
    moKojiInfoMn.ChangeKojiInfo(toKojiInfoParam(currentSumKbn), false);  // 最新の画面情報をセット
    result := moKojiInfoMn.CheckKojiInfo2(param);
end;

//==============================================================================
// 概要：契約情報MemDataに消費税関連のデータをセット
//==============================================================================
procedure TJNTCRP018001f.setContTaxInfo(
    kojiInfoParam   : TKojiInfoParam;
    kojiInfo2Param  : TKojiInfo2Param;
    mem             : TdxMemData;
    updateTax       : Boolean = true);  // 消費税額更新判定
var
    contMoney,
    taxAmount       : Currency;
    contDate,
    finishDate      : TDate;
    rateCode        : Integer;
    taxType         : Integer;
    oDic            : TDIC_COTXRATE;
begin
    // 契約金額
    contMoney := kojiInfo2Param.ContMoney;

    if (not (mem.State in [dsEdit, dsInsert])) then
    begin
        mem.Edit;
    end;
    // 契約日
    contDate := kojiInfo2Param.ContDate;
    if IsZeroDate(contDate) then
    begin
        Exit;
    end;
    // 完成予定日(終了日)
    finishDate := kojiInfoParam.YoteiDateED;

    // 税率コード
    rateCode :=
        IfThen(moBusiness.GetTaxRate(kojiInfo2Param.Tax_Rate) <> nil,
        kojiInfo2Param.Tax_Rate, RATECODESTANDARD);
    mem.FieldByName('DummyTax_Rate').AsInteger := rateCode;

    // 税込／税抜
    taxType := kojiInfoParam.PartPattern;

    // 税率名称取得
    mem.FieldByName('Tax_RateName').AsString   :=
        moBusiness.GetTaxRate(rateCode).TaxName;
    // 税率オブジェクト取得
    if rateCode = RATECODESTANDARD then // 標準税率
    begin
        oDic := moBusiness.GetStandardTaxRate(contDate, finishDate);
        mem.FieldByName('Tax_RateName2').AsString := oDic.TaxName;
    end
    else
    begin
        oDic := moBusiness.GetTaxRate(rateCode);
        mem.FieldByName('Tax_RateName2').AsString := '';
    end;

    if (updateTax or (IsNonTax(oDic.RateCD))) then
    begin
        taxAmount := moBusiness.GetTaxAmount(oDic, taxType, contMoney);
        mem.FieldByName('Sales_Tax').AsCurrency := taxAmount;
    end;

end;

//==============================================================================
// 概要：契約情報MemDataに消費税関連のデータをセット
//       (contListに格納されているものが対象)
//==============================================================================
procedure TJNTCRP018001f.setContTaxInfo(mem : TdxMemData; contList: TObjectList);
var
    oCont: TKojiInfo2;
    idx : Integer;
    showedMSG: Boolean;
    returnCode : Integer;
begin
    showedMSG := false;
    if (contList <> nil) then
    begin
        MemPost_Sw := 1;  // Postイベントでチェックは行わないようにする
        mem.DisableControls();
        for idx := 0 to contList.Count -1 do
        begin
            oCont := TKojiInfo2(contList[idx]);
            mem.RecNo := oCont.DspOrder;

            setContTaxInfo(
                toKojiInfoParam(currentSumKbn),
                toKojiInfo2Param(mem),
                mem,
                false);

            returnCode := moKojiInfoMn.ChangeKojiInfo2(TConverter.ToKojiInfo2Param(oCont), false);
            if returnCode = CONT_DIFFTAX then
            begin
                mem.FieldByName('FontColorTax').AsInteger := FONTCOLOR_BLUE;
                if (not showedMSG) then
                begin
                    MjsMessageBoxEX(self, MSG_DIFFSALESTAX, '確認',  mjInformation, mjOK, mjDefOk);
                    showedMSG := true;
                end;
            end
            else
            begin
                mem.FieldByName('FontColorTax').AsInteger := FONTCOLOR_WINDOWTEXT2;
            end;

            mem.Post();
        end;
        mem.First();
        mem.EnableControls();
        MemPost_Sw := 0;
    end;
end;

//==============================================================================
// 概要：税込／税抜初回読み込み
//==============================================================================
procedure TJNTCRP018001f.setTaxType();
begin
    // 進行基準のとき税抜は有効
    rdJTaxOut.Enabled :=
// <291> MOD st
//        (JHojyoMA_DMemDataSalesBase.AsInteger = SALES_PROGRESS);
        not(JHojyoMA_DMemDataSalesBase.AsInteger = SALES_COMPLETE);
// <291> MOD ed
    if (JHojyoMA_DMemDataTaxType.AsInteger = KBN_TAXIN) or
        (JHojyoMA_DMemDataSalesBase.AsInteger = SALES_COMPLETE) then
    begin
        pushTaxButton(rdJTaxIn);
    end
    else
    begin
        pushTaxButton(rdJTaxOut);
    end;
end;

//==============================================================================
// 概要：税込／税抜押下
//==============================================================================
procedure TJNTCRP018001f.pushTaxButton(button: TMRadioButton);
var
    oGrid: TdxDbGrid;
begin
    if (not button.Enabled) then
    begin
        Exit;
    end;
    oGrid := Jituzai_DdxDBGrid_Kei;
    button.OnClick := nil;
    button.Checked := true;
    oGrid.Bands[2].Caption :=
        Format('契約金額%s', [
            IfThen(m_iAccProKbn = 0, '', '(' + button.Caption + ')')]);
    button.OnClick := rdTaxClick;
end;

//==============================================================================
// 概要：税込／税抜クリックイベント
//==============================================================================
procedure TJNTCRP018001f.rdTaxClick(Sender: TObject);
var
    taxType : Integer;
    sWk : String;
    oButton: TMRadioButton;
    oMem : TdxMemData;
begin
    pushTaxButton(TMRadioButton(Sender));
    taxType := TMRadioButton(Sender).Tag;  // 「0:税込」or「1:税抜」
    oMem     := JKeiyaku_DMemData;

    // 何も入力がない場合
    if  (oMem.RecordCount = 0) or
        ((oMem.RecordCount = 1) and
        (oMem.FieldByName('ContDate').AsString = '')) then
    begin
        Exit;
    end;

    if (taxType = KBN_TAXIN) then
    begin
        sWk := MSG_CHANGETAXIN;
    end
    else
    begin
        sWk := MSG_CHANGETAXOUT;
    end;

    case MjsMessageBoxEx(
        self, sWk, '確認', mjQuestion, MjYesNoCancel, mjDefCancel) of
        // 契約金額自動計算
        mrYes   :
        begin
            autoCalcContMoney(taxType, oMem);
        end;
        // 何もしない
        mrNo    :
        begin
        end;
        // 元に戻す
        else
        begin
            if (taxType = KBN_TAXIN) then
            begin
                oButton := rdJTaxOut;
            end
            else
            begin
                oButton := rdJTaxIn;
            end;

            pushTaxButton(oButton);
            oButton.SetFocus();
        end;
    end;
end;

//==============================================================================
// 概要：契約金額に消費税額を一括で加減する
//==============================================================================
procedure TJNTCRP018001f.autoCalcContMoney(taxType: Integer; mem: TdxMemData);
begin

    MemPost_Sw := 1;
    mem.First();

    while (not mem.Eof) do
    begin
        mem.Edit();
        if taxType = KBN_TAXIN then
        begin
            mem.FieldByName('ContMoney').AsCurrency :=
                mem.FieldByName('ContMoney').AsCurrency +
                mem.FieldByName('Sales_Tax').AsCurrency;
        end
        else
        begin
            mem.FieldByName('ContMoney').AsCurrency :=
                mem.FieldByName('ContMoney').AsCurrency -
                mem.FieldByName('Sales_Tax').AsCurrency;
        end;

        changeKojiInfo2(toKojiInfo2Param(mem), false);
        mem.Next();
    end;
    mem.First();
    MemPost_Sw := 0;
end;

//==============================================================================
// 概要：上段コピーのイベント
//==============================================================================
procedure TJNTCRP018001f.ContCopyExecute(Sender: TObject);
var
    oGrid : TdxDbGrid;
    oMem : TdxMemData;
begin
    if (Root_PMTab.Items.Selected = PAGE_JITUZAI) then
    begin
        oGrid   := Jituzai_DdxDBGrid_Kei;
        oMem    := TdxMemData(oGrid.DataSource.DataSet);
    end
    else
    begin
        oGrid   := Goukei_DdxDBGrid_Kei;
        oMem    := TdxMemData(oGrid.DataSource.DataSet);
    end;

    ContCopy(oMem, [
        IfThen(oGrid.FocusedColumn = COL_KEINEN, 'ContDate', ''),
        IfThen(oGrid.FocusedColumn = COL_KEINO, 'ContNo', '')
        ]);
end;

//==============================================================================
// 概要：上段コピーファンクション表示
//==============================================================================
procedure TJNTCRP018001f.dspContCopy(dbGrid: TdxDBGrid);
var
    oMem: TdxMemData;
begin
    oMem := TdxMemData(dbGrid.DataSource.DataSet);
    fnSetFncType(
        ((omem.RecNo > 1) and
        (dbGrid.FocusedColumn in [COL_KEINEN, COL_KEINO]) and
        m_cJNTArea.IsModify),
        2);
end;

//==============================================================================
// 概要：消費税再計算ファンクション表示
//==============================================================================
procedure TJNTCRP018001f.dspTaxCalc(dbGrid: TdxDBGrid);
var
    fldName : String;
begin
    fldName := dbGrid.FocusedField.FieldName;
    fnSetFncType(
        ((fldName = 'Sales_Tax') and m_cJNTArea.IsModify),
        3);
end;

//==============================================================================
// 概要：契約情報コピー
//==============================================================================
procedure TJNTCRP018001f.contCopy(mem: TdxMemData; fieldNames : array of String);
var
    kojiInfo2 : TKojiInfo2Param;
begin
    if mem.RecNo >= 2 then
    begin
        kojiInfo2 := moKojiInfoMn.GetKojiInfo2Param(mem.RecNo-1);
        if (not (mem.State in [dsEdit, dsInsert])) then
        begin
            mem.Edit;
        end;

        if IsContains(fieldNames, 'ContDate') then
        begin
            mem.FieldByName('ContDate').AsDateTime  := kojiInfo2.ContDate;
        end;

        if IsContains(fieldNames, 'ContNo') then
        begin
            mem.FieldByName('ContNo').AsString      := kojiInfo2.ContNo;
        end;
    end;
end;

//==============================================================================
// 概要：実在／合計選択に基づきSumKbnを返値
//==============================================================================
function TJNTCRP018001f.getCurrentSumKbn(): Integer;
begin
    result := SUMKBN_JITUZAI;
    if Root_PMTab.Items.Selected = PAGE_JITUZAI then
    begin
        result := SUMKBN_JITUZAI;
    end
    else if Root_PMTab.Items.Selected = PAGE_GOKEI then
    begin
        result := SUMKBN_GOUKEI;
    end;
end;

//==============================================================================
// 概要：契約情報の消費税を更新できるかどうかの判定を返値
//==============================================================================
function TJNTCRP018001f.canSetSalesTax(param: TKojiInfo2Param): Boolean;
var
    oCont: TKojiInfo2;
    kojiInfo : TKojiInfoParam;
begin

    oCont := moKojiInfoMn.GetKojiInfo2(param.DspOrder);
    kojiInfo := toKojiInfoParam(currentSumKbn);

    result := (oCont <> nil) and
        ((param.ContMoney <> oCont.ContMoney) or            // 契約金額の不一致
        (param.Tax_Rate <> oCont.Tax_Rate));                // 税率コードの不一致

    if (result) then
    begin
        moKojiInfoMn.ChangeKojiInfo2(param, false);
    end;
end;

//==============================================================================
// 概要：契約情報の消費税が税率に基づいていない場合は色を変える
//==============================================================================
procedure TJNTCRP018001f.setFontColorTax(mem: TdxMemData);
var
    idx : Integer;
    oKojiInfo2: TKojiInfo2;
begin
    MemPost_Sw := 1;  // Postイベントでチェックは行わないようにする
    try
        for idx := 1 to mem.RecordCount do
        begin
            oKojiInfo2 := moKojiInfoMn.GetKojiInfo2(idx);
            if (oKojiInfo2 <> nil) and
                (moKojiInfoMn.CheckKojiInfo2(
                TConverter.toKojiInfo2Param(oKojiInfo2)) = CONT_DIFFTAX) then
            begin
                mem.RecNo := idx;
                mem.Edit();
                mem.FieldByName('FontColorTax').AsInteger := FONTCOLOR_BLUE;
                mem.Post();
            end;
        end;

        if mem.RecordCount > 0 then
        begin
            mem.First();
        end;
    finally
        MemPost_Sw := 0;
    end;
end;

//==============================================================================
// 概要：契約情報MemDataのBeforeCancelイベント
//==============================================================================
procedure TJNTCRP018001f.Keiyaku_DMemDataBeforeCancel(DataSet: TDataSet);
begin
    miBeforeRecNo := TdxMemData(DataSet).RecNo;
end;

//==============================================================================
// 概要：契約情報MemDataのAfterCancelイベント
//==============================================================================
procedure TJNTCRP018001f.Keiyaku_DMemDataAfterCancel(DataSet: TDataSet);
var
    oMem: TdxMemData;
    param : TKojiInfo2Param;
begin
    oMem := TdxMemData(DataSet);
    miAfterRecNo := oMem.RecNo;
    if (miBeforeRecNo <> miAfterRecNo) then
    begin
        param := moKojiInfoMn.GetKojiInfo2Param(miBeforeRecNo);
        moKojiInfoMn.DeleteKojiInfo2(param);
    end
    else
    begin
        param := toKojiInfo2Param(oMem);
        changeKojiInfo2(param, false);  // エラーチェックなしで更新
    end;
end;

//==============================================================================
// 概要：消費税再計算のイベント
//==============================================================================
procedure TJNTCRP018001f.TaxCalcExecute(Sender: TObject);
var
    oMem : TdxMemData;
begin
    if (Root_PMTab.Items.Selected = PAGE_JITUZAI) then
    begin
        oMem    := JKeiyaku_DMemData;
    end
    else
    begin
        oMem    := GKeiyaku_DMemData;
    end;

    setContTaxInfo(
        toKojiInfoParam(currentSumKbn),
        toKojiInfo2Param(oMem),
        oMem,
        true);
end;
//<TAX> ADD Ed
//<KSN4> ADD St
// -----------------------------------------------------------------------------
//  加算体系の一連の更新処理
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.fnKasan_UpdateExecute(HojyoTree:THojyoTree);
var
    bIns      : Boolean;
    Qry : TMQuery;
begin
    try
        Qry := TMQuery.Create(self);
        MDataModule.SetDBInfoToQuery(dbCorp_Select, Qry);	// DBとMQueryの接続

        MDataModule.BeginTran (dbCorp_Select);		//	ﾄﾗﾝｻﾞｸｼｮﾝの開始

        SessionPractice(C_ST_PROCESS);

        with HojyoTree do
        begin

            // 存在したら新規作成
            bIns := not fnKasan_EXISTS(MasterKbn, PatternNo, EntNo, SumNCode);

            if bIns then
            begin
                InsDateTM := now;
            end;

            if not fnKasan_Update(HojyoTree, bIns, Qry) then
            begin
				ErrorMessageDsp(Qry);
				MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                Exit;
            end;

            // 検索用加算先の作成
            if (bIns = True) and
                Assigned(m_SrchHojyoMA) and
                (m_SrchHojyoMA.NCode = BasedNCode) then Kasan_CreateSearchParent();

            // 総合計体系は移動(削除)
            if (not KasanUpdate) and (SumNCode <> 0) then
            begin
                SumNCode := 0;

                if not fnKasan_Delete(HojyoTree, Qry) then
                begin
                    ErrorMessageDsp(Qry);
                    MDataModule.Rollback (dbCorp_Select);	//	ﾛｰﾙﾊﾞｯｸ(破棄)
                    Exit;
                end;
            end;

            MDataModule.Commit (dbCorp_Select);		//	ｺﾐｯﾄ(反映)

            gbHojyoTree2Flag := true;  //<KSN5> ADD

        end;
    finally
        QueryDispose(Qry);
        SessionPractice(C_ED_PROCESS);
    end;
end;

// -----------------------------------------------------------------------------
//  True : コピーモードで更新  False : 総合計体系は削除
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetKasanUpdate(): Boolean;
begin
    result := chb_KasanUpdate.Checked;
end;
//<KSN4> ADD Ed
//<EXP> ADD St
// -----------------------------------------------------------------------------
//   起動確認ダイアログ表示有無取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetDlgInfo(): String;
var
    keyName : String;
begin
    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'INFO_KOUJI';
    end
    else
    begin
        keyName := 'INFO_PROJECT';
    end;

    result := moSections['DLG_INFO'][keyName];
end;

// -----------------------------------------------------------------------------
//   起動確認ダイアログ表示有無格納
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.SetDlgInfo(value: String);
var
    keyName : String;
begin
    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'INFO_KOUJI';
    end
    else
    begin
        keyName := 'INFO_PROJECT';
    end;

    moSections['DLG_INFO'][keyName] := value;
end;

// -----------------------------------------------------------------------------
//   起動モード取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetDefMode(): String;
var
    keyName : String;
begin
    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'DSPTYPE_KOUJI';
    end
    else
    begin
        keyName := 'DSPTYPE_PROJECT';
    end;

    result := moSections['DEFMODE'][keyName];
end;

// -----------------------------------------------------------------------------
//   起動モード格納
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.SetDefMode(value: String);
var
    keyName : String;
begin
    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'DSPTYPE_KOUJI';
    end
    else
    begin
        keyName := 'DSPTYPE_PROJECT';
    end;

    moSections['DEFMODE'][keyName] := value;
end;

// -----------------------------------------------------------------------------
//   部門EXP設定値取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetExpValueDivision(): String;
var
    keyName : String;
begin
    if msExpDivision <> '' then
    begin
        result := msExpDivision;
        Exit;
    end;

    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'DIVISION_KOUJI';
    end
    else
    begin
        keyName := 'DIVISION_PROJECT';
    end;

    result := moSections['EXP_VALUE'][keyName];
    msExpDivision := result;
end;

// -----------------------------------------------------------------------------
//   部門EXP設定値格納
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.SetExpValueDivision(value: String);
var
    keyName : String;
begin
    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'DIVISION_KOUJI';
    end
    else
    begin
        keyName := 'DIVISION_PROJECT';
    end;

    msExpDivision := value;
end;

// -----------------------------------------------------------------------------
//   担当者EXP設定値取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetExpValueEmployee(): String;
var
    keyName : String;
begin
    if msExpEmployee <> '' then
    begin
        result := msExpEmployee;
        Exit;
    end;

    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'EMPLOYEE_KOUJI';
    end
    else
    begin
        keyName := 'EMPLOYEE_PROJECT';
    end;

    result := moSections['EXP_VALUE'][keyName];
    msExpEmployee := result;
end;

// -----------------------------------------------------------------------------
//   担当者EXP設定値格納
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.SetExpValueEmployee(value: String);
var
    keyName : String;
begin
    if m_pMyAppRecord.m_sParameter = '1' then
    begin
        keyName := 'EMPLOYEE_KOUJI';
    end
    else
    begin
        keyName := 'EMPLOYEE_PROJECT';
    end;

    msExpEmployee := value;
end;

// -----------------------------------------------------------------------------
//   F2 文字列取得
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetF2Caption(): String;
begin
    result := '';
    if ((m_AcControl = Jituzai_ENEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ENEdit_BmnCode) or
        (m_AcControl = Goukei_ENEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ENEdit_BmnCode) or
        (m_AcControl = Jituzai_ETEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ETEdit_BmnCode) or
        (m_AcControl = Goukei_ETEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ETEdit_BmnCode)
        ) then
    begin
        if (ExpValueDivision = '-1') then
        begin
            result := '';
        end
        else if (ExpValueDivision = '0') then
        begin
            result := 'F2 適用部門のみ';
        end
        else if (ExpValueDivision = '1') then
        begin
            result := 'F2 全部門表示';
        end;
    end
    else if ((m_AcControl = Jituzai_ENEdit_PersonCode) or
        (m_AcControl = Jituzai_ENEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ENEdit_PersonCode) or
        (m_AcControl = Goukei_ENEdit_SekouPersonCode) or
        (m_AcControl = Jituzai_ETEdit_PersonCode) or
        (m_AcControl = Jituzai_ETEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ETEdit_PersonCode) or
        (m_AcControl = Goukei_ETEdit_SekouPersonCode)) then
    begin
        if (ExpValueEmployee = '-1') then
        begin
            result := '';
        end
        else if (ExpValueEmployee = '0') then
        begin
            result := 'F2 在職者のみ';
        end
        else if (ExpValueEmployee = '1') then
        begin
            result := 'F2 全社員表示';
        end;
    end
//<SEI> ADD St
    // 請求・入金予定ｸﾞﾘｯﾄﾞにFocusがあるとき
    else if (m_AcControl = Jituzai_DdxDBGrid_Seikyu) or
        (m_AcControl = Goukei_DdxDBGrid_Seikyu) then
    begin
        result := '';
    end
//<SEI> ADD Ed
//<TAX> ADD St
    else if (m_AcControl = Jituzai_DdxDBGrid_Kei) or
        (m_AcControl = Goukei_DdxDBGrid_Kei) then
    begin
        result := 'F2 上段コピー';
    end
//<TAX> ADD Ed
    else
    begin
        result := 'F2 入力ﾓｰﾄﾞ切替';
    end;
end;

// -----------------------------------------------------------------------------
//   F2のメソッドを返却
// -----------------------------------------------------------------------------
function TJNTCRP018001f.GetF2Action(): TAction;
begin
    if ((m_AcControl = Jituzai_ENEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ENEdit_BmnCode) or
        (m_AcControl = Jituzai_ENEdit_PersonCode) or
        (m_AcControl = Jituzai_ENEdit_SekouPersonCode) or
        (m_AcControl = Jituzai_ETEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ETEdit_BmnCode) or
        (m_AcControl = Jituzai_ETEdit_PersonCode) or
        (m_AcControl = Jituzai_ETEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ENEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ENEdit_BmnCode) or
        (m_AcControl = Goukei_ENEdit_PersonCode) or
        (m_AcControl = Goukei_ENEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ETEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ETEdit_BmnCode) or
        (m_AcControl = Goukei_ETEdit_PersonCode) or
        (m_AcControl = Goukei_ETEdit_SekouPersonCode)) then
    begin
        result := ExpChange;
    end
//<SEI> ADD St
    // 請求・入金予定ｸﾞﾘｯﾄﾞにFocusがあるとき
    else if (m_AcControl = Jituzai_DdxDBGrid_Seikyu) or
        (m_AcControl = Goukei_DdxDBGrid_Seikyu) then
    begin
        result := nil;
    end
//<SEI> ADD Ed
//<TAX> ADD St
    else if (m_AcControl = Jituzai_DdxDBGrid_Kei) or
        (m_AcControl = Goukei_DdxDBGrid_Kei) then
    begin
        result := UpperCopy;
    end
//<TAX> ADD Ed
    else
    begin
        result := InpModeChange;
    end;
end;

// -----------------------------------------------------------------------------
//   検索EXP取得条件変更イベント
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.ExpChangeValue(Sender : TObject);
begin
    if ((m_AcControl = Jituzai_ENEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ETEdit_SekouBmnCode) or
        (m_AcControl = Jituzai_ENEdit_BmnCode) or
        (m_AcControl = Jituzai_ETEdit_BmnCode) or
        (m_AcControl = Goukei_ENEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ETEdit_SekouBmnCode) or
        (m_AcControl = Goukei_ENEdit_BmnCode) or
        (m_AcControl = Goukei_ETEdit_BmnCode)) then
    begin
        ExpDivisionChange();
    end
    else if ((m_AcControl = Jituzai_ENEdit_PersonCode) or
        (m_AcControl = Jituzai_ETEdit_PersonCode) or
        (m_AcControl = Jituzai_ENEdit_SekouPersonCode) or
        (m_AcControl = Jituzai_ETEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ENEdit_PersonCode) or
        (m_AcControl = Goukei_ETEdit_PersonCode) or
        (m_AcControl = Goukei_ENEdit_SekouPersonCode) or
        (m_AcControl = Goukei_ETEdit_SekouPersonCode)) then
    begin
        ExpEmployeeChange();
    end
    else
    begin
        Exit;
    end;

    EnterEvent(m_AcControl);
end;

// -----------------------------------------------------------------------------
//   部門の検索EXP取得条件変更処理
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.ExpDivisionChange();
begin
    if (ExpValueDivision = '1') then
    begin
        ExpValueDivision := '0';
    end
    else
    begin
        ExpValueDivision := '1';
    end;
end;

// -----------------------------------------------------------------------------
//   担当者の検索EXP取得条件変更処理
// -----------------------------------------------------------------------------
procedure TJNTCRP018001f.ExpEmployeeChange();
begin
    if (ExpValueEmployee = '1') then
    begin
        ExpValueEmployee := '0';
    end
    else
    begin
        ExpValueEmployee := '1';
    end;
end;
//<EXP> ADD Ed
//<ConInfo> ADD St
//==============================================================================
// 概要：消費税チェックフラグ取得
//==============================================================================
function TJNTCRP018001f.GetErrorTaxRateCheck(): Integer;
begin
    result := StrToIntDef(moSections['ConstractInfo']['ErrorTaxRateCheck'], 0);
end;
//<ConInfo> ADD Ed
//<287> ADD St
procedure TJNTCRP018001f.dxKanseiGidCustomDrawCell(Sender: TObject;
    ACanvas: TCanvas; ARect: TRect; ANode: TdxTreeListNode;
    AColumn: TdxTreeListColumn; ASelected, AFocused, ANewItemRow: Boolean;
    var AText: String; var AColor: TColor; AFont: TFont;
    var AAlignment: TAlignment; var ADone: Boolean);
var
    rec : KanseiFuriInfoRec;

    function GetKanseiFuriInfoRec(AMasterKbn : Integer) : KanseiFuriInfoRec;
    var
        i : Integer;
    begin
        for i := Low(m_aKanseiFuriInfo) to High(m_aKanseiFuriInfo) do
        begin
            if (m_aKanseiFuriInfo[i].MasterKbn = AMasterKbn) then
            begin
                result := m_aKanseiFuriInfo[i];
                Exit;
            end;
        end;

        // ここに来ることはないと思うが念のため初期化しておく
        result.MasterKbn := 0;
        result.UseKbn := 0;
        result.CodeAttr := 0;
        result.CodeDigit := 0;
        result.JHojyoName := '';
    end;
begin

    if (AColumn = dxKanseiGidCODE) then
    begin
        rec := GetKanseiFuriInfoRec(JKanseiMasterKbn.AsInteger);
        if (rec.CodeAttr <= 1) then
        begin
            AAlignment := taRightJustify;
        end
        else
        begin
            AAlignment := taLeftJustify;
        end;
    end;
end;
//<287> ADD Ed

//<289-2>追加↓
//**************************************************************************
//	Proccess  :	ノード削除
//	Name	  :	F.Oda
//	Date	  :	2016/ 11 / 09
//	Parameter : NodeTarget	  : 挿入先親情報
//				strTargetCode : 削除対象工事コード
//				strParentCode : 削除対象工事コードの親コード
//	Retrun	  :
//**************************************************************************
procedure TJNTCRP018001f.MakeNodeDelete(NodeTarget: TTreeNode;
  strTargetCode, strParentCode: String);
var
    RecTreeItem : ^TreeViewRec;
    NodeChild   : TTreeNode;
    NodeDstWork : TTreeNode;
    iCount      : Integer;
    iCountMax   : Integer;

begin
    iCountMax   := VTreeView.Items.Count;
    NodeDstWork := NodeTarget;

    // ツリーのデータ数分ループ
    for iCount := 1 to VTreeView.Items.Count do
    begin
        // ループのカウント数が現在のツリーのデータ数を超えた
        if iCount > iCountMax then
        begin
            // 終了
            Break;
        end;

        // 挿入先(親)ノードと同一は除く（作成済みのため）
        if VTreeView.Items [iCount - 1] = NodeDstWork then
        begin
            Continue;
        end;

        RecTreeItem := VTreeView.Items[iCount - 1].Data;

        // 親コードが一致
        if CompareStr(RecTreeItem^.strExCode, strParentCode) = 0 then
        begin
            // 子取得
            NodeChild := VTreeView.Items[iCount - 1].GetFirstChild();

            while True do
            begin
                if NodeChild = nil then
                begin
                    Break;
                end;

                // 子データ取得
                RecTreeItem := NodeChild.Data;

                if CompareStr(RecTreeItem^.strExCode, strTargetCode) = 0 then
                begin
                    // 対象の子を削除
                    NodeChild.Delete();
                    // 削除したためツリーのデータ数を再取得
                    iCountMax   := VTreeView.Items.Count;
                    Break;
                end;

                // 次の子取得
                NodeChild := NodeChild.GetNextSibling();
            end;
        end;
    end;
end;
//<289-2>追加↑
//<289-3>追加↓
//**************************************************************************
//  Proccess  : ノード貼り付け
//  Name      : F.Oda
//  Date      : 2016/ 11 / 11
//  Parameter : NodeTarget : 挿入先親情報
//              strExCode  : 挿入先工事コード
//              nDivision  : 挿入先工事種類（0：実在 1:統合）
//  Retrun    :
//**************************************************************************
procedure TJNTCRP018001f.MakeNodePaste(NodeTarget: TTreeNode;
  strExCode: String; nDivision: Integer);
var
    NodeWork    : TTreeNode;
    NodeDstWork : TTreeNode;
    NodeDstOther: TTreeNode;
    RecWork     : ^TreeViewRec;
    RecTreeItem : ^TreeViewRec;
    iCount      : Integer;

begin

    NodeDstWork := NodeTarget;
    RecWork     := NodeTarget.Data;

    // ツリーのデータ数分ループ
    for iCount := 1 to VTreeView.Items.Count do
    begin
        // 挿入先(親)ノードと同一は除く（作成済みのため）
        if VTreeView.Items [iCount - 1] = NodeDstWork then
        begin
            Continue;
        end;

        RecTreeItem := VTreeView.Items[iCount - 1].Data;

        // 挿入先が一致（親）
        if CompareStr(RecTreeItem^.strExCode, RecWork^.strExCode) = 0 then
        begin
            NodeDstOther := nil;

            if nDivision <> 0 then                      // 合計
            begin
                NodeDstOther := VTreeView.Items[iCount - 1];
            end
            else                                        // 実在
            begin
                // 先頭の子取得
                NodeWork := VTreeView.Items[iCount - 1].GetFirstChild();

                while True do
                begin
                    if NodeWork = nil then
                    begin
                        Break;
                    end;

                    RecTreeItem := NodeWork.Data;

                    // 挿入先が一致（子）
                    if CompareStr(RecTreeItem^.strExCode, strExCode) = 0 then
                    begin
                        // 一致した子の親を取得
                        NodeDstOther := NodeWork.Parent;
                        Break;
                    end;

                    // 次の子取得
                    NodeWork := NodeWork.GetNextSibling();
                end;
            end;

            // 他の挿入元あり
            if NodeDstOther <> nil then
            begin
                // 対象の親にぶら下がっている子をクリア
                NodeDstOther.DeleteChildren();

                // 引数の親に対して子をHojyoTree、HojyoMAからデータを取得し、再作成
                fnCreateTreeViewItems(NodeDstOther);
            end;
        end;
    end;
end;
//<289-3>追加↑

// <290> Start
//**********************************************************************
//*		Proccess	:	EdgeTracker経費精算連携用メッセージ表示(コード削除した時にメッセージを出力)
//*		Name		:	T.Komatsu
//*		Date		:	2018.09.11
//*		Parameter	:	なし
//*		Return		:	なし
//**********************************************************************
procedure TJNTCRP018001f.fnEdgeTrackerKeihiSeisanMsg();
var
	DmqData			: TMQuery;
	iCnt			: Integer;
begin

	DmqData := TMQuery.Create( Self );					        //	MQueryの構築
	MDataModule.SetDBInfoToQuery( dbCorp_Select, DmqData );		//	DBとMQueryの接続
	iCnt := 0 ;

	//	区分情報から経費精算連携採用の有無を取得
	with DmqData do
	begin
		Close();
		SQL.Clear;
        // RecKbn=54(経費精算)、GnPuKbn1（Edge Tracker 経費精算連携採用区分）
		SQL.ADD('SELECT count(*) as cnt FROM KbnInfo WHERE RecKbn=54 and GnPuKbn1 = 1');
		if Open = False then
		begin
			ErrorMessageDsp(DmqData);
			Close;
			Free;
			Exit;
		end;
        iCnt := GetFld('cnt').AsInteger;
		Close;
		Free;
	end;

    // 「Edge Tracker 経費精算連携」があるときにメッセージを表示する
	if (iCnt > 0) then
	begin
		if (m_pMyAppRecord.m_sParameter = '1' ) then
		begin
// <291> MOD st
//			MjsMessageBoxEx(Self, '工事が削除されました。' + #13#10 + 'Edge Tracker でマスタを見直してください。', '確認', mjInformation, mjOk, mjDefOk);
			MjsMessageBoxEx(Self, '工事が削除されました。' + #13#10 + 'Edge Tracker でマスターを見直してください。', '確認', mjInformation, mjOk, mjDefOk);
// <291> MOD ed
		end
		else
		begin
// <291> MOD st
//			MjsMessageBoxEx(Self, 'プロジェクトが削除されました。' + #13#10 + 'Edge Tracker でマスタを見直してください。', '確認', mjInformation, mjOk, mjDefOk);
			MjsMessageBoxEx(Self, 'プロジェクトが削除されました。' + #13#10 + 'Edge Tracker でマスターを見直してください。', '確認', mjInformation, mjOk, mjDefOk);
// <291> MOD ed
		end;
	end;
end;
// <290> End

end.
///////////////////////////////////////////////////////////////////////////////////
